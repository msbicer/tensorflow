<?php	/**	 * List reports in a database	 *	 * $Id: reports.php,v 1.34 2008/01/09 00:19:10 ioguix Exp $	 */	// Include application functions	include_once('./libraries/lib.inc.php');	$action = (isset($_REQUEST['action'])) ? $_REQUEST['action'] : '';	/**	 * Displays a screen where they can edit a report	 */	function doEdit($msg = '') {		global $data, $reportsdb, $misc;		global $lang;		// If it's a first, load then get the data from the database		$report = $reportsdb->getReport($_REQUEST['report_id']);		if ($_REQUEST['action'] == 'edit') {						$_POST['report_name'] = $report->fields['report_name'];			$_POST['db_name'] = $report->fields['db_name'];			$_POST['descr'] = $report->fields['descr'];			$_POST['report_sql'] = $report->fields['report_sql'];			if ($report->fields['paginate'] == 't') {				$_POST['paginate'] = TRUE;			}		}		// Get a list of available databases		$databases = $data->getDatabases();		$_REQUEST['report'] = $report->fields['report_name'];		$misc->printTrail('report');		$misc->printTitle($lang['stredit']);		$misc->printMsg($msg);		echo "<form action=\"reports.php\" method=\"post\">\n";		echo $misc->form;		echo "<table style=\"width: 100%\">\n";		echo "<tr><th class=\"data left required\">{$lang['strname']}</th>\n";		echo "<td class=\"data1\"><input name=\"report_name\" size=\"32\" maxlength=\"{$data->_maxNameLen}\" value=\"",			htmlspecialchars($_POST['report_name']), "\" /></td></tr>\n";		echo "<tr><th class=\"data left required\">{$lang['strdatabase']}</th>\n";		echo "<td class=\"data1\"><select name=\"db_name\">\n";		while (!$databases->EOF) {			$dbname = $databases->fields['datname'];			echo "<option value=\"", htmlspecialchars($dbname), "\"",			($dbname == $_POST['db_name']) ? ' selected="selected"' : '', ">",				htmlspecialchars($dbname), "</option>\n";			$databases->moveNext();		}		echo "</select></td></tr>\n";		echo "<tr><th class=\"data left\">{$lang['strcomment']}</th>\n";		echo "<td class=\"data1\"><textarea style=\"width:100%;\" rows=\"5\" cols=\"50\" name=\"descr\">",			htmlspecialchars($_POST['descr']), "</textarea></td></tr>\n";		echo "<tr><th class=\"data left required\">{$lang['strsql']}</th>\n";		echo "<td class=\"data1\"><textarea style=\"width:100%;\" rows=\"15\" cols=\"50\" name=\"report_sql\">",			htmlspecialchars($_POST['report_sql']), "</textarea></td></tr>\n";		echo "</table>\n";		echo "<label for=\"paginate\"><input type=\"checkbox\" id=\"paginate\" name=\"paginate\"", (isset($_POST['paginate']) ? ' checked="checked"' : ''), " />&nbsp;{$lang['strpaginate']}</label>\n";		echo "<p><input type=\"hidden\" name=\"action\" value=\"save_edit\" />\n";		echo "<input type=\"submit\" value=\"{$lang['strsave']}\" />\n";		echo "<input type=\"submit\" name=\"cancel\" value=\"{$lang['strcancel']}\" /></p>\n";		echo "<input type=\"hidden\" name=\"report_id\" value=\"{$report->fields['report_id']}\" />\n";		echo "</form>\n";	}	/**	 * Saves changes to a report	 */	function doSaveEdit() {		global $reportsdb, $lang;		if (!isset($_POST['report_name'])) $_POST['report_name'] = '';		if (!isset($_POST['db_name'])) $_POST['db_name'] = '';		if (!isset($_POST['descr'])) $_POST['descr'] = '';		if (!isset($_POST['report_sql'])) $_POST['report_sql'] = '';		// Check that they've given a name and a definition		if ($_POST['report_name'] == '') doEdit($lang['strreportneedsname']);		elseif ($_POST['report_sql'] == '') doEdit($lang['strreportneedsdef']);		else {			$status = $reportsdb->alterReport($_POST['report_id'], $_POST['report_name'], $_POST['db_name'],								$_POST['descr'], $_POST['report_sql'], isset($_POST['paginate']));			if ($status == 0)				doDefault($lang['strreportcreated']);			else				doEdit($lang['strreportcreatedbad']);		}	}	/**	 * Display read-only properties of a report	 */	function doProperties($msg = '') {		global $data, $reportsdb, $misc;		global $lang;		$report = $reportsdb->getReport($_REQUEST['report_id']);		$_REQUEST['report'] = $report->fields['report_name'];		$misc->printTrail('report');		$misc->printTitle($lang['strproperties']);		$misc->printMsg($msg);		if ($report->recordCount() == 1) {			echo "<table>\n";			echo "<tr><th class=\"data left\">{$lang['strname']}</th>\n";			echo "<td class=\"data1\">", $misc->printVal($report->fields['report_name']), "</td></tr>\n";			echo "<tr><th class=\"data left\">{$lang['strdatabase']}</th>\n";			echo "<td class=\"data1\">", $misc->printVal($report->fields['db_name']), "</td></tr>\n";			echo "<tr><th class=\"data left\">{$lang['strcomment']}</th>\n";			echo "<td class=\"data1\">", $misc->printVal($report->fields['descr']), "</td></tr>\n";			echo "<tr><th class=\"data left\">{$lang['strsql']}</th>\n";			echo "<td class=\"data1\">", $misc->printVal($report->fields['report_sql']), "</td></tr>\n";			echo "</table>\n";		}		else echo "<p>{$lang['strinvalidparam']}</p>\n";		echo "<ul class=\"navlink\">\n\t<li><a href=\"reports.php?{$misc->href}\">{$lang['strshowallreports']}</a></li>\n";		echo "\t<li><a href=\"reports.php?action=edit&amp;{$misc->href}&amp;report_id={$report->fields['report_id']}\">{$lang['stredit']}</a></li>\n</ul>\n";	}	/**	 * Displays a screen where they can enter a new report	 */	function doCreate($msg = '') {		global $data, $reportsdb, $misc;		global $lang;		if (!isset($_REQUEST['report_name'])) $_REQUEST['report_name'] = '';		if (!isset($_REQUEST['db_name'])) $_REQUEST['db_name'] = '';		if (!isset($_REQUEST['descr'])) $_REQUEST['descr'] = '';		if (!isset($_REQUEST['report_sql'])) $_REQUEST['report_sql'] = '';		if (isset($_REQUEST['database'])) {			$_REQUEST['db_name'] = $_REQUEST['database'];			unset($_REQUEST['database']);			$misc->setForm();		}				$databases = $data->getDatabases();		$misc->printTrail('server');		$misc->printTitle($lang['strcreatereport']);		$misc->printMsg($msg);		echo "<form action=\"reports.php\" method=\"post\">\n";		echo $misc->form;		echo "<table style=\"width: 100%\">\n";		echo "<tr><th class=\"data left required\">{$lang['strname']}</th>\n";		echo "<td class=\"data1\"><input name=\"report_name\" size=\"32\" maxlength=\"{$data->_maxNameLen}\" value=\"",			htmlspecialchars($_REQUEST['report_name']), "\" /></td></tr>\n";		echo "<tr><th class=\"data left required\">{$lang['strdatabase']}</th>\n";		echo "<td class=\"data1\"><select name=\"db_name\">\n";		while (!$databases->EOF) {			$dbname = $databases->fields['datname'];			echo "<option value=\"", htmlspecialchars($dbname), "\"",			($dbname == $_REQUEST['db_name']) ? ' selected="selected"' : '', ">",				htmlspecialchars($dbname), "</option>\n";			$databases->moveNext();		}		echo "</select></td></tr>\n";		echo "<tr><th class=\"data left\">{$lang['strcomment']}</th>\n";		echo "<td class=\"data1\"><textarea style=\"width:100%;\" rows=\"5\" cols=\"50\" name=\"descr\">",			htmlspecialchars($_REQUEST['descr']), "</textarea></td></tr>\n";		echo "<tr><th class=\"data left required\">{$lang['strsql']}</th>\n";		echo "<td class=\"data1\"><textarea style=\"width:100%;\" rows=\"15\" cols=\"50\" name=\"report_sql\">",			htmlspecialchars($_REQUEST['report_sql']), "</textarea></td></tr>\n";		echo "</table>\n";		echo "<label for=\"paginate\"><input type=\"checkbox\" id=\"paginate\" name=\"paginate\"", (isset($_REQUEST['paginate']) ? ' checked="checked"' : ''), " />&nbsp;{$lang['strpaginate']}</label>\n";		echo "<p><input type=\"hidden\" name=\"action\" value=\"save_create\" />\n";		echo "<input type=\"submit\" value=\"{$lang['strsave']}\" />\n";		echo "<input type=\"submit\" name=\"cancel\" value=\"{$lang['strcancel']}\" /></p>\n";		echo "</form>\n";	}	/**	 * Actually creates the new report in the database	 */	function doSaveCreate() {		global $reportsdb, $lang;		if (!isset($_POST['report_name'])) $_POST['report_name'] = '';		if (!isset($_POST['db_name'])) $_POST['db_name'] = '';		if (!isset($_POST['descr'])) $_POST['descr'] = '';		if (!isset($_POST['report_sql'])) $_POST['report_sql'] = '';		// Check that they've given a name and a definition		if ($_POST['report_name'] == '') doCreate($lang['strreportneedsname']);		elseif ($_POST['report_sql'] == '') doCreate($lang['strreportneedsdef']);		else {			$status = $reportsdb->createReport($_POST['report_name'], $_POST['db_name'],								$_POST['descr'], $_POST['report_sql'], isset($_POST['paginate']));			if ($status == 0)				doDefault($lang['strreportcreated']);			else				doCreate($lang['strreportcreatedbad']);		}	}	/**	 * Show confirmation of drop and perform actual drop	 */	function doDrop($confirm) {		global $reportsdb, $misc;		global $lang;		if ($confirm) {			// Fetch report from the database			$report = $reportsdb->getReport($_REQUEST['report_id']);			$_REQUEST['report'] = $report->fields['report_name'];			$misc->printTrail('report');			$misc->printTitle($lang['strdrop']);			echo "<p>", sprintf($lang['strconfdropreport'], $misc->printVal($report->fields['report_name'])), "</p>\n";			echo "<form action=\"reports.php\" method=\"post\">\n";			echo $misc->form;			echo "<input type=\"hidden\" name=\"action\" value=\"drop\" />\n";			echo "<input type=\"hidden\" name=\"report_id\" value=\"", htmlspecialchars($_REQUEST['report_id']), "\" />\n";			echo "<input type=\"submit\" name=\"drop\" value=\"{$lang['strdrop']}\" />\n";			echo "<input type=\"submit\" name=\"cancel\" value=\"{$lang['strcancel']}\" />\n";			echo "</form>\n";		}		else {			$status = $reportsdb->dropReport($_POST['report_id']);			if ($status == 0)				doDefault($lang['strreportdropped']);			else				doDefault($lang['strreportdroppedbad']);		}	}	/**	 * Show default list of reports in the database	 */	function doDefault($msg = '') {		global $data, $misc, $reportsdb;		global $lang;		$misc->printTrail('server');		$misc->printTabs('server','reports');		$misc->printMsg($msg);				$reports = $reportsdb->getReports();		$columns = array(			'report' => array(				'title' => $lang['strreport'],				'field' => field('report_name'),				'url'   => "reports.php?action=properties&amp;{$misc->href}&amp;",				'vars'  => array('report_id' => 'report_id'),			),			'database' => array(				'title' => $lang['strdatabase'],				'field' => field('db_name'),			),			'created' => array(				'title' => $lang['strcreated'],				'field' => field('date_created'),			),			'actions' => array(				'title' => $lang['stractions'],			),			'comment' => array(				'title' => $lang['strcomment'],				'field' => field('descr'),			),		);				$return_url = urlencode("reports.php?{$misc->href}");				$actions = array(			'run' => array(				'title' => $lang['strexecute'],				'url'   => "sql.php?subject=report&amp;{$misc->href}&amp;return_url={$return_url}&amp;return_desc=".urlencode($lang['strback'])."&amp;",				'vars'  => array('report' => 'report_name', 'database' => 'db_name', 'reportid' => 'report_id', 'paginate' => 'paginate'),			),			'edit' => array(				'title' => $lang['stredit'],				'url'   => "reports.php?action=edit&amp;{$misc->href}&amp;",				'vars'  => array('report_id' => 'report_id'),			),			'drop' => array(				'title' => $lang['strdrop'],				'url'   => "reports.php?action=confirm_drop&amp;{$misc->href}&amp;",				'vars'  => array('report_id' => 'report_id'),			),		);				$misc->printTable($reports, $columns, $actions, $lang['strnoreports']);				echo "<p><a class=\"navlink\" href=\"reports.php?action=create&amp;{$misc->href}\">{$lang['strcreatereport']}</a></p>\n";	}		$misc->printHeader($lang['strreports']);	$misc->printBody();	// Create a database accessor for the reports database	include_once('./classes/Reports.php');	$reportsdb = new Reports($status);	if ($status != 0) {		$misc->printTrail('server');		$misc->printTabs('server','reports');		$misc->printMsg($lang['strnoreportsdb']);	}	else {		switch ($action) {			case 'save_edit':				if (isset($_POST['cancel'])) doDefault();				else doSaveEdit();				break;			case 'edit':				doEdit();				break;			case 'properties':				doProperties();				break;			case 'save_create':				if (isset($_POST['cancel'])) doDefault();				else doSaveCreate();				break;			case 'create':				doCreate();				break;			case 'drop':				if (isset($_POST['drop'])) doDrop(false);				else doDefault();				break;			case 'confirm_drop':				doDrop(true);				break;			default:				doDefault();				break;		}	}	$misc->printFooter();?>
<?php	/**	 * Manage casts in a database	 *	 * $Id: casts.php,v 1.16 2007/09/25 16:08:05 ioguix Exp $	 */	// Include application functions	include_once('./libraries/lib.inc.php');		$action = (isset($_REQUEST['action'])) ? $_REQUEST['action'] : '';	if (!isset($msg)) $msg = '';	/**	 * Show default list of casts in the database	 */	function doDefault($msg = '') {		global $data, $misc, $database;		global $lang;		function renderCastContext($val) {			global $lang;			switch ($val) {				case 'e': return $lang['strno'];				case 'a': return $lang['strinassignment'];				default: return $lang['stryes'];			}		}				$misc->printTrail('database');		$misc->printTabs('database','casts');		$misc->printMsg($msg);				$casts = $data->getCasts();		$columns = array(			'source_type' => array(				'title' => $lang['strsourcetype'],				'field' => field('castsource'),			),			'target_type' => array(				'title' => $lang['strtargettype'],				'field' => field('casttarget'),			),			'function' => array(				'title' => $lang['strfunction'],				'field' => field('castfunc'),				'params'=> array('null' => $lang['strbinarycompat']),			),			'implicit' => array(				'title' => $lang['strimplicit'],				'field' => field('castcontext'),				'type'  => 'callback',				'params'=> array('function' => 'renderCastContext', 'align' => 'center'),			),			'comment' => array(				'title' => $lang['strcomment'],				'field' => field('castcomment'),			),		);		$actions = array();				$misc->printTable($casts, $columns, $actions, $lang['strnocasts']);	}	/**	 * Generate XML for the browser tree.	 */	function doTree() {		global $misc, $data;				$casts = $data->getCasts();				$proto = concat(field('castsource'), ' AS ', field('casttarget'));				$attrs = array(			'text'   => $proto,			'icon'   => 'Cast'		);				$misc->printTreeXML($casts, $attrs);		exit;	}		if ($action == 'tree') doTree();		$misc->printHeader($lang['strcasts']);	$misc->printBody();	switch ($action) {		case 'tree':			doTree();			break;		default:			doDefault();			break;	}		$misc->printFooter();?>
<?php	/**	 * Manage aggregates in a database	 *	 * $Id: aggregates.php,v 1.27 2008/01/19 13:46:15 ioguix Exp $	 */	// Include application functions	include_once('./libraries/lib.inc.php');		$action = (isset($_REQUEST['action'])) ? $_REQUEST['action'] : '';	if (!isset($msg)) $msg = '';	/**	 * Actually creates the new aggregate in the database	 */	function doSaveCreate() {		global $data, $lang, $_reload_browser;		// Check inputs		if (trim($_REQUEST['name']) == '') {			doCreate($lang['straggrneedsname']);			return;		}		else if (trim($_REQUEST['basetype']) == '') {			doCreate($lang['straggrneedsbasetype']);			return;		}		else if (trim($_REQUEST['sfunc']) == '') {			doCreate($lang['straggrneedssfunc']);			return;		}		else if (trim($_REQUEST['stype']) == '') {			doCreate($lang['straggrneedsstype']);			return;		}		$status = $data->createAggregate($_REQUEST['name'], $_REQUEST['basetype'], $_REQUEST['sfunc'], $_REQUEST['stype'], 		$_REQUEST['ffunc'], $_REQUEST['initcond'], $_REQUEST['sortop'], $_REQUEST['aggrcomment']);					if ($status == 0) {			$_reload_browser = true;			doDefault($lang['straggrcreated']);		}		else {			doCreate($lang['straggrcreatedbad']);		}	}		/**	 * Displays a screen for create a new aggregate function	 */	function doCreate($msg = '') {		global $data, $misc;		global $lang;		if (!isset($_REQUEST['name'])) $_REQUEST['name'] = '';		if (!isset($_REQUEST['basetype'])) $_REQUEST['basetype'] = '';		if (!isset($_REQUEST['sfunc'])) $_REQUEST['sfunc'] = '';		if (!isset($_REQUEST['stype'])) $_REQUEST['stype'] = '';		if (!isset($_REQUEST['ffunc'])) $_REQUEST['ffunc'] = '';		if (!isset($_REQUEST['initcond'])) $_REQUEST['initcond'] = '';		if (!isset($_REQUEST['sortop'])) $_REQUEST['sortop'] = '';		if (!isset($_REQUEST['aggrcomment'])) $_REQUEST['aggrcomment'] = '';		$misc->printTrail('schema');		$misc->printTitle($lang['strcreateaggregate'], 'pg.aggregate.create');		$misc->printMsg($msg);						echo "<form action=\"aggregates.php\" method=\"post\">\n";		echo "<table>\n";		echo "\t<tr>\n\t\t<th class=\"data left required\">{$lang['strname']}</th>\n";		echo "\t\t<td class=\"data\"><input name=\"name\" size=\"32\" maxlength=\"{$data->_maxNameLen}\" value=\"", 			htmlspecialchars($_REQUEST['name']), "\" /></td>\n\t</tr>\n";		echo "\t<tr>\n\t\t<th class=\"data left required\">{$lang['straggrbasetype']}</th>\n";		echo "\t\t<td class=\"data\"><input name=\"basetype\" size=\"32\" maxlength=\"{$data->_maxNameLen}\" value=\"", 			htmlspecialchars($_REQUEST['basetype']), "\" /></td>\n\t</tr>\n";		echo "\t<tr>\n\t\t<th class=\"data left required\">{$lang['straggrsfunc']}</th>\n";		echo "\t\t<td class=\"data\"><input name=\"sfunc\" size=\"32\" maxlength=\"{$data->_maxNameLen}\" value=\"", 			htmlspecialchars($_REQUEST['sfunc']), "\" /></td>\n\t</tr>\n";		echo "\t<tr>\n\t\t<th class=\"data left required\">{$lang['straggrstype']}</th>\n";		echo "\t\t<td class=\"data\"><input name=\"stype\" size=\"32\" maxlength=\"{$data->_maxNameLen}\" value=\"", 			htmlspecialchars($_REQUEST['stype']), "\" /></td>\n\t</tr>\n";		echo "\t<tr>\n\t\t<th class=\"data left\">{$lang['straggrffunc']}</th>\n";		echo "\t\t<td class=\"data\"><input name=\"ffunc\" size=\"32\" maxlength=\"{$data->_maxNameLen}\" value=\"", 			htmlspecialchars($_REQUEST['ffunc']), "\" /></td>\n\t</tr>\n";		echo "\t<tr>\n\t\t<th class=\"data left\">{$lang['straggrinitcond']}</th>\n";		echo "\t\t<td class=\"data\"><input name=\"initcond\" size=\"32\" maxlength=\"{$data->_maxNameLen}\" value=\"", 			htmlspecialchars($_REQUEST['initcond']), "\" /></td>\n\t</tr>\n";		echo "\t<tr>\n\t\t<th class=\"data left\">{$lang['straggrsortop']}</th>\n";		echo "\t\t<td class=\"data\"><input name=\"sortop\" size=\"32\" maxlength=\"{$data->_maxNameLen}\" value=\"", 			htmlspecialchars($_REQUEST['sortop']), "\" /></td>\n\t</tr>\n";		echo "\t<tr>\n\t\t<th class=\"data left\">{$lang['strcomment']}</th>\n";		echo "\t\t<td><textarea name=\"aggrcomment\" rows=\"3\" cols=\"32\">", 			htmlspecialchars($_REQUEST['aggrcomment']), "</textarea></td>\n\t</tr>\n";		echo "</table>\n";		echo "<p><input type=\"hidden\" name=\"action\" value=\"save_create\" />\n";		echo $misc->form;		echo "<input type=\"submit\" value=\"{$lang['strcreate']}\" />\n";		echo "<input type=\"submit\" name=\"cancel\" value=\"{$lang['strcancel']}\" /></p>\n";		echo "</form>\n";	}	/** 	 * Function to save after altering an aggregate 	 */	function doSaveAlter() {		global $data, $lang;		// Check inputs 		if (trim($_REQUEST['aggrname']) == '') { 			doAlter($lang['straggrneedsname']); 			return; 		} 		$status = $data->alterAggregate($_REQUEST['aggrname'], $_REQUEST['aggrtype'], $_REQUEST['aggrowner'], 			$_REQUEST['aggrschema'], $_REQUEST['aggrcomment'], $_REQUEST['newaggrname'], $_REQUEST['newaggrowner'], 			$_REQUEST['newaggrschema'], $_REQUEST['newaggrcomment']);		if ($status == 0)			doDefault($lang['straggraltered']);		else {			doAlter($lang['straggralteredbad']);			return;		}	}	/**	 * Function to allow editing an aggregate function	 */	function doAlter($msg = '') {		global $data, $misc;		global $lang;		$misc->printTrail('aggregate');		$misc->printTitle($lang['stralter'], 'pg.aggregate.alter');		$misc->printMsg($msg);		echo "<form action=\"aggregates.php\" method=\"post\">\n";		$aggrdata = $data->getAggregate($_REQUEST['aggrname'], $_REQUEST['aggrtype']);		if($aggrdata->recordCount() > 0 ) {			// Output table header			echo "<table>\n";			echo "\t<tr>\n\t\t<th class=\"data required\">{$lang['strname']}</th>";			echo "<th class=\"data required\">{$lang['strowner']}</th>";			echo "<th class=\"data required\">{$lang['strschema']}</th>\n\t</tr>\n";			// Display aggregate's name, owner and schema			echo "\t<tr>\n\t\t<td><input name=\"newaggrname\" size=\"32\" maxlength=\"32\" value=\"", htmlspecialchars($_REQUEST['aggrname']), "\" /></td>";			echo "<td><input name=\"newaggrowner\" size=\"32\" maxlength=\"32\" value=\"", htmlspecialchars($aggrdata->fields['usename']), "\" /></td>";			echo "<td><input name=\"newaggrschema\" size=\"32\" maxlength=\"32\" value=\"", htmlspecialchars($_REQUEST['schema']), "\" /></td>\n\t</tr>\n";			echo "\t<tr>\n\t\t<th class=\"data left\">{$lang['strcomment']}</th>\n";			echo "\t\t<td><textarea name=\"newaggrcomment\" rows=\"3\" cols=\"32\">", 				htmlspecialchars($aggrdata->fields['aggrcomment']), "</textarea></td>\n\t</tr>\n";			echo "</table>\n";			echo "<p><input type=\"hidden\" name=\"action\" value=\"save_alter\" />\n";			echo $misc->form;			echo "<input type=\"hidden\" name=\"aggrname\" value=\"", htmlspecialchars($_REQUEST['aggrname']), "\" />\n";			echo "<input type=\"hidden\" name=\"aggrtype\" value=\"", htmlspecialchars($_REQUEST['aggrtype']), "\" />\n";			echo "<input type=\"hidden\" name=\"aggrowner\" value=\"", htmlspecialchars($aggrdata->fields['usename']), "\" />\n";			echo "<input type=\"hidden\" name=\"aggrschema\" value=\"", htmlspecialchars($_REQUEST['schema']), "\" />\n";			echo "<input type=\"hidden\" name=\"aggrcomment\" value=\"", htmlspecialchars($aggrdata->fields['aggrcomment']), "\" />\n";			echo "<input type=\"submit\" name=\"alter\" value=\"{$lang['stralter']}\" />\n";			echo "<input type=\"submit\" name=\"cancel\" value=\"{$lang['strcancel']}\" /></p>\n";		} else {			echo "<p>{$lang['strnodata']}</p>\n";			echo "<input type=\"submit\" name=\"cancel\" value=\"{$lang['strback']}\" /></p>\n";		}			echo "</form>\n";							}	/**	 * Show confirmation of drop and perform actual drop of the aggregate function selected	 */	function doDrop($confirm) {		global $data, $misc;		global $lang, $_reload_browser;		if ($confirm) {			$misc->printTrail('aggregate');			$misc->printTitle($lang['strdrop'], 'pg.aggregate.drop');			echo "<p>", sprintf($lang['strconfdropaggregate'], htmlspecialchars($_REQUEST['aggrname'])), "</p>\n";			echo "<form action=\"aggregates.php\" method=\"post\">\n";			echo "<p><input type=\"checkbox\" id=\"cascade\" name=\"cascade\" /> <label for=\"cascade\">{$lang['strcascade']}</label></p>\n";			echo "<p><input type=\"hidden\" name=\"action\" value=\"drop\" />\n";			echo "<input type=\"hidden\" name=\"aggrname\" value=\"", htmlspecialchars($_REQUEST['aggrname']), "\" />\n";			echo "<input type=\"hidden\" name=\"aggrtype\" value=\"", htmlspecialchars($_REQUEST['aggrtype']), "\" />\n";			echo $misc->form;			echo "<input type=\"submit\" name=\"drop\" value=\"{$lang['strdrop']}\" />\n";			echo "<input type=\"submit\" name=\"cancel\" value=\"{$lang['strcancel']}\" /></p>\n";			echo "</form>\n";		}		else {			$status = $data->dropAggregate($_POST['aggrname'], $_POST['aggrtype'], isset($_POST['cascade']));			if ($status == 0) {				$_reload_browser = true;				doDefault($lang['straggregatedropped']);			}			else				doDefault($lang['straggregatedroppedbad']);		}	}	/**	 * Show the properties of an aggregate	 */	function doProperties($msg = '') {		global $data, $misc;		global $lang;		$misc->printTrail('aggregate');		$misc->printTitle($lang['strproperties'],'pg.aggregate');		$misc->printMsg($msg);		$aggrdata = $data->getAggregate($_REQUEST['aggrname'], $_REQUEST['aggrtype']);		if($aggrdata->recordCount() > 0 ) {			// Display aggregate's info			echo "<table>\n";			echo "<tr>\n\t<th class=\"data left\">{$lang['strname']}</th>\n";			echo "\t<td class=\"data1\">", htmlspecialchars($_REQUEST['aggrname']), "</td>\n</tr>\n";			echo "<tr>\n\t<th class=\"data left\">{$lang['straggrbasetype']}</th>\n";			echo "\t<td class=\"data1\">", htmlspecialchars($_REQUEST['aggrtype']), "</td>\n</tr>\n";			echo "<tr>\n\t<th class=\"data left\">{$lang['straggrsfunc']}</th>\n";			echo "\t<td class=\"data1\">", htmlspecialchars($aggrdata->fields['aggtransfn']), "</td>\n</tr>\n";			echo "<tr>\n\t<th class=\"data left\">{$lang['straggrstype']}</th>\n";			echo "\t<td class=\"data1\">", htmlspecialchars($aggrdata->fields['aggstype']), "</td>\n</tr>\n";			echo "<tr>\n\t<th class=\"data left\">{$lang['straggrffunc']}</th>\n";			echo "\t<td class=\"data1\">", htmlspecialchars($aggrdata->fields['aggfinalfn']), "</td>\n</tr>\n";			echo "<tr>\n\t<th class=\"data left\">{$lang['straggrinitcond']}</th>\n";			echo "\t<td class=\"data1\">", htmlspecialchars($aggrdata->fields['agginitval']), "</td>\n</tr>\n";			if($data->hasAggregateSortOp()) {				echo "<tr>\n\t<th class=\"data left\">{$lang['straggrsortop']}</th>\n";				echo "\t<td class=\"data1\">", htmlspecialchars($aggrdata->fields['aggsortop']), "</td>\n</tr>\n";			}			echo "<tr>\n\t<th class=\"data left\">{$lang['strowner']}</th>\n";			echo "\t<td class=\"data1\">", htmlspecialchars($aggrdata->fields['usename']), "</td>\n</tr>\n";			echo "<tr>\n\t<th class=\"data left\">{$lang['strcomment']}</th>\n";			echo "\t<td class=\"data1\">", $misc->printVal($aggrdata->fields['aggrcomment']), "</td>\n</tr>\n";			echo "</table>\n";		}		else echo "<p>{$lang['strnodata']}</p>\n";		echo "<ul class=\"navlink\">\n\t<li><a class=\"navlink\" href=\"aggregates.php?{$misc->href}\">{$lang['straggrshowall']}</a></li>\n";		if ($data->hasAlterAggregate()) {		echo "\t<li><a class=\"navlink\" href=\"aggregates.php?action=alter&amp;{$misc->href}&amp;aggrname=", 			urlencode($_REQUEST['aggrname']), "&amp;aggrtype=", urlencode($_REQUEST['aggrtype']), "\">{$lang['stralter']}</a></li>\n";		}		echo "\t<li><a class=\"navlink\" href=\"aggregates.php?action=confirm_drop&amp;{$misc->href}&amp;aggrname=",			urlencode($_REQUEST['aggrname']), "&amp;aggrtype=", urlencode($_REQUEST['aggrtype']), "\">{$lang['strdrop']}</a></li>\n</ul>\n";	}	/**	 * Show default list of aggregate functions in the database	 */	function doDefault($msg = '') {		global $data, $conf, $misc;			global $lang;		$misc->printTrail('schema');		$misc->printTabs('schema', 'aggregates');		$misc->printMsg($msg);				$aggregates = $data->getAggregates();		$columns = array(			'aggrname' => array(				'title' => $lang['strname'],				'field' => field('proname'),				'url'   => "redirect.php?subject=aggregate&amp;action=properties&amp;{$misc->href}&amp;",				'vars'  => array('aggrname' => 'proname', 'aggrtype' => 'proargtypes'),			),			'aggrtype' => array(				'title' => $lang['strtype'],				'field' => field('proargtypes'),			),			'aggrtransfn' => array(				'title' => $lang['straggrsfunc'],				'field' => field('aggtransfn'),			),						'owner' => array(				'title' => $lang['strowner'],				'field' => field('usename'),			),						'actions' => array(				'title' => $lang['stractions'],			),						'comment' => array(				'title' => $lang['strcomment'],				'field' => field('aggrcomment'),			),		);				$actions = array(			'alter' => array(				'title' => $lang['stralter'],				'url'   => "aggregates.php?action=alter&amp;{$misc->href}&amp;",				'vars'  => array('aggrname' => 'proname', 'aggrtype' => 'proargtypes'),			),			'drop' => array(				'title' => $lang['strdrop'],				'url'   => "aggregates.php?action=confirm_drop&amp;{$misc->href}&amp;",				'vars'  => array('aggrname' => 'proname', 'aggrtype' => 'proargtypes'),			)		);		if (!$data->hasAlterAggregate()) unset($actions['alter']);		$misc->printTable($aggregates, $columns, $actions, $lang['strnoaggregates']);				echo "<p><a class=\"navlink\" href=\"aggregates.php?action=create&amp;{$misc->href}\">{$lang['strcreateaggregate']}</a></p>\n";	}	/**	 * Generate XML for the browser tree.	 */	function doTree() {		global $misc, $data;				$aggregates = $data->getAggregates();		$proto = concat(field('proname'), ' (', field('proargtypes'), ')');		$reqvars = $misc->getRequestVars('aggregate');				$attrs = array(			'text'    => $proto,			'icon'    => 'Aggregate',			'toolTip' => field('aggcomment'),			'action'  => url('redirect.php',				$reqvars,				array(					'action' => 'properties',					'aggrname' => field('proname'),					'aggrtype' => field('proargtypes')				)			)		);				$misc->printTreeXML($aggregates, $attrs);		exit;	}		if ($action == 'tree') doTree();		$misc->printHeader($lang['straggregates']);	$misc->printBody();	switch ($action) {		case 'create':			doCreate();			break;		case 'save_create':			if (isset($_POST['cancel'])) doDefault();			else doSaveCreate();			break;		case 'alter':			doAlter();			break;		case 'save_alter':			if (isset($_POST['alter'])) doSaveAlter();			else doProperties();			break;		case 'drop':			if (isset($_POST['drop'])) doDrop(false);			else doDefault();			break;		case 'confirm_drop':			doDrop(true);			break;		default:			doDefault();			break;		case 'properties':			doProperties();			break;	}	$misc->printFooter();?>
<?php	/**	 * Manage users in a database cluster	 *	 * $Id: users.php,v 1.40 2008/02/25 17:20:44 xzilla Exp $	 */	// Include application functions	include_once('./libraries/lib.inc.php');	$action = (isset($_REQUEST['action'])) ? $_REQUEST['action'] : '';	if (!isset($msg)) $msg = '';			/**	 * If a user is not a superuser, then we have an 'account management' page	 * where they can change their password, etc.  We don't prevent them from	 * messing with the URL to gain access to other user admin stuff, because	 * the PostgreSQL permissions will prevent them changing anything anyway.	 */	function doAccount($msg = '') {		global $data, $misc;		global $lang;				$server_info = $misc->getServerInfo();				$userdata = $data->getUser($server_info['username']);		$_REQUEST['user'] = $server_info['username'];				$misc->printTrail('user');		$misc->printTabs('server','account');		$misc->printMsg($msg);		if ($userdata->recordCount() > 0) {			$userdata->fields['usesuper'] = $data->phpBool($userdata->fields['usesuper']);			$userdata->fields['usecreatedb'] = $data->phpBool($userdata->fields['usecreatedb']);			echo "<table>\n";			echo "<tr><th class=\"data\">{$lang['strusername']}</th><th class=\"data\">{$lang['strsuper']}</th><th class=\"data\">{$lang['strcreatedb']}</th><th class=\"data\">{$lang['strexpires']}</th>";			echo "<th class=\"data\">{$lang['strsessiondefaults']}</th>";			echo "</tr>\n";			echo "<tr>\n\t<td class=\"data1\">", $misc->printVal($userdata->fields['usename']), "</td>\n";			echo "\t<td class=\"data1\">", $misc->printVal($userdata->fields['usesuper'], 'yesno'), "</td>\n";			echo "\t<td class=\"data1\">", $misc->printVal($userdata->fields['usecreatedb'], 'yesno'), "</td>\n";			echo "\t<td class=\"data1\">", ($userdata->fields['useexpires'] == 'infinity' || is_null($userdata->fields['useexpires']) ? $lang['strnever'] : $misc->printVal($userdata->fields['useexpires'])), "</td>\n";			echo "\t<td class=\"data1\">", $misc->printVal($userdata->fields['useconfig']), "</td>\n";			echo "</tr>\n</table>\n";		}		else echo "<p>{$lang['strnodata']}</p>\n";				echo "<p><a class=\"navlink\" href=\"users.php?action=confchangepassword&amp;{$misc->href}\">{$lang['strchangepassword']}</a></p>\n";	}		/**	 * Show confirmation of change password and actually change password	 */	function doChangePassword($confirm, $msg = '') {		global $data, $misc;		global $lang, $conf;				$server_info = $misc->getServerInfo();				if ($confirm) {			$_REQUEST['user'] = $server_info['username'];			$misc->printTrail('user');			$misc->printTitle($lang['strchangepassword'],'pg.user.alter');			$misc->printMsg($msg);						if (!isset($_POST['password'])) $_POST['password'] = '';			if (!isset($_POST['confirm'])) $_POST['confirm'] = '';						echo "<form action=\"users.php\" method=\"post\">\n";			echo "<table>\n";			echo "\t<tr>\n\t\t<th class=\"data left required\">{$lang['strpassword']}</th>\n";			echo "\t\t<td><input type=\"password\" name=\"password\" size=\"32\" value=\"", 				htmlspecialchars($_POST['password']), "\" /></td>\n\t</tr>\n";			echo "\t<tr>\n\t\t<th class=\"data left required\">{$lang['strconfirm']}</th>\n";			echo "\t\t<td><input type=\"password\" name=\"confirm\" size=\"32\" value=\"\" /></td>\n\t</tr>\n";			echo "</table>\n";			echo "<p><input type=\"hidden\" name=\"action\" value=\"changepassword\" />\n";			echo $misc->form;			echo "<input type=\"submit\" name=\"ok\" value=\"{$lang['strok']}\" />\n";			echo "<input type=\"submit\" name=\"cancel\" value=\"{$lang['strcancel']}\" />\n";			echo "</p></form>\n";		}		else {			// Check that password is minimum length			if (strlen($_POST['password']) < $conf['min_password_length'])				doChangePassword(true, $lang['strpasswordshort']);			// Check that password matches confirmation password			elseif ($_POST['password'] != $_POST['confirm'])				doChangePassword(true, $lang['strpasswordconfirm']);			else {				$status = $data->changePassword($server_info['username'], 					$_POST['password']);				if ($status == 0)					doAccount($lang['strpasswordchanged']);				else					doAccount($lang['strpasswordchangedbad']);			}		}			}	/**	 * Function to allow editing of a user	 */	function doEdit($msg = '') {		global $data, $misc;		global $lang;			$misc->printTrail('user');		$misc->printTitle($lang['stralter'],'pg.user.alter');		$misc->printMsg($msg);				$userdata = $data->getUser($_REQUEST['username']);				if ($userdata->recordCount() > 0) {			$server_info = $misc->getServerInfo();			$canRename = $data->hasUserRename() && ($_REQUEST['username'] != $server_info['username']);			$userdata->fields['usesuper'] = $data->phpBool($userdata->fields['usesuper']);			$userdata->fields['usecreatedb'] = $data->phpBool($userdata->fields['usecreatedb']);			if (!isset($_POST['formExpires'])){				if ($canRename) $_POST['newname'] = $userdata->fields['usename'];				if ($userdata->fields['usesuper']) $_POST['formSuper'] = '';				if ($userdata->fields['usecreatedb']) $_POST['formCreateDB'] = '';				$_POST['formExpires'] = $userdata->fields['useexpires'] == 'infinity' ? '' : $userdata->fields['useexpires'];				$_POST['formPassword'] = '';			}					echo "<form action=\"users.php\" method=\"post\">\n";			echo "<table>\n";			echo "\t<tr>\n\t\t<th class=\"data left\">{$lang['strusername']}</th>\n";			echo "\t\t<td class=\"data1\">", ($canRename ? "<input name=\"newname\" size=\"15\" maxlength=\"{$data->_maxNameLen}\" value=\"" . htmlspecialchars($_POST['newname']) . "\" />" : $misc->printVal($userdata->fields['usename'])), "</td>\n\t</tr>\n";			echo "\t<tr>\n\t\t<th class=\"data left\"><label for=\"formSuper\">{$lang['strsuper']}</label></th>\n";			echo "\t\t<td class=\"data1\"><input type=\"checkbox\" id=\"formSuper\" name=\"formSuper\"", 				(isset($_POST['formSuper'])) ? ' checked="checked"' : '', " /></td>\n\t</tr>\n";			echo "\t<tr>\n\t\t<th class=\"data left\"><label for=\"formCreateDB\">{$lang['strcreatedb']}</label></th>\n";			echo "\t\t<td class=\"data1\"><input type=\"checkbox\" id=\"formCreateDB\" name=\"formCreateDB\"", 				(isset($_POST['formCreateDB'])) ? ' checked="checked"' : '', " /></td>\n\t</tr>\n";			echo "\t<tr>\n\t\t<th class=\"data left\">{$lang['strexpires']}</th>\n";			echo "\t\t<td class=\"data1\"><input size=\"16\" name=\"formExpires\" value=\"", htmlspecialchars($_POST['formExpires']), "\" /></td>\n\t</tr>\n";			echo "\t<tr>\n\t\t<th class=\"data left\">{$lang['strpassword']}</th>\n";			echo "\t\t<td class=\"data1\"><input type=\"password\" size=\"16\" name=\"formPassword\" value=\"", htmlspecialchars($_POST['formPassword']), "\" /></td>\n\t</tr>\n";			echo "\t<tr>\n\t\t<th class=\"data left\">{$lang['strconfirm']}</th>\n";			echo "\t\t<td class=\"data1\"><input type=\"password\" size=\"16\" name=\"formConfirm\" value=\"\" /></td>\n\t</tr>\n";			echo "</table>\n";			echo "<p><input type=\"hidden\" name=\"action\" value=\"save_edit\" />\n";			echo "<input type=\"hidden\" name=\"username\" value=\"", htmlspecialchars($_REQUEST['username']), "\" />\n";			echo $misc->form;			echo "<input type=\"submit\" name=\"alter\" value=\"{$lang['stralter']}\" />\n";			echo "<input type=\"submit\" name=\"cancel\" value=\"{$lang['strcancel']}\" /></p>\n";			echo "</form>\n";		}		else echo "<p>{$lang['strnodata']}</p>\n";	}		/** 	 * Function to save after editing a user	 */	function doSaveEdit() {		global $data, $lang;				// Check name and password		if (isset($_POST['newname']) && $_POST['newname'] == '')			doEdit($lang['struserneedsname']);		else if ($_POST['formPassword'] != $_POST['formConfirm'])			doEdit($lang['strpasswordconfirm']);		else {			if (isset($_POST['newname'])) $status = $data->setRenameUser($_POST['username'], $_POST['formPassword'], isset($_POST['formCreateDB']), isset($_POST['formSuper']), $_POST['formExpires'], $_POST['newname']);			else $status = $data->setUser($_POST['username'], $_POST['formPassword'], isset($_POST['formCreateDB']), isset($_POST['formSuper']), $_POST['formExpires']);			if ($status == 0)				doDefault($lang['struserupdated']);			else				doEdit($lang['struserupdatedbad']);		}	}	/**	 * Show confirmation of drop and perform actual drop	 */	function doDrop($confirm) {		global $data, $misc;		global $lang;		if ($confirm) {			$misc->printTrail('user');			$misc->printTitle($lang['strdrop'],'pg.user.drop');						echo "<p>", sprintf($lang['strconfdropuser'], $misc->printVal($_REQUEST['username'])), "</p>\n";							echo "<form action=\"users.php\" method=\"post\">\n";			echo "<p><input type=\"hidden\" name=\"action\" value=\"drop\" />\n";			echo "<input type=\"hidden\" name=\"username\" value=\"", htmlspecialchars($_REQUEST['username']), "\" />\n";			echo $misc->form;			echo "<input type=\"submit\" name=\"drop\" value=\"{$lang['strdrop']}\" />\n";			echo "<input type=\"submit\" name=\"cancel\" value=\"{$lang['strcancel']}\" /></p>\n";			echo "</form>\n";		}		else {			$status = $data->dropUser($_REQUEST['username']);			if ($status == 0)				doDefault($lang['struserdropped']);			else				doDefault($lang['struserdroppedbad']);		}			}		/**	 * Displays a screen where they can enter a new user	 */	function doCreate($msg = '') {		global $data, $misc, $username;		global $lang;				if (!isset($_POST['formUsername'])) $_POST['formUsername'] = '';		if (!isset($_POST['formPassword'])) $_POST['formPassword'] = '';		if (!isset($_POST['formConfirm'])) $_POST['formConfirm'] = '';		if (!isset($_POST['formExpires'])) $_POST['formExpires'] = '';				$misc->printTrail('server');		$misc->printTitle($lang['strcreateuser'],'pg.user.create');		$misc->printMsg($msg);		echo "<form action=\"users.php\" method=\"post\">\n";		echo "<table>\n";		echo "\t<tr>\n\t\t<th class=\"data left required\">{$lang['strusername']}</th>\n";		echo "\t\t<td class=\"data1\"><input size=\"15\" maxlength=\"{$data->_maxNameLen}\" name=\"formUsername\" value=\"", htmlspecialchars($_POST['formUsername']), "\" /></td>\n\t</tr>\n";		echo "\t<tr>\n\t\t<th class=\"data left\">{$lang['strpassword']}</th>\n";		echo "\t\t<td class=\"data1\"><input size=\"15\" type=\"password\" name=\"formPassword\" value=\"", htmlspecialchars($_POST['formPassword']), "\" /></td>\n\t</tr>\n";		echo "\t<tr>\n\t\t<th class=\"data left\">{$lang['strconfirm']}</th>\n";		echo "\t\t<td class=\"data1\"><input size=\"15\" type=\"password\" name=\"formConfirm\" value=\"", htmlspecialchars($_POST['formConfirm']), "\" /></td>\n\t</tr>\n";		echo "\t<tr>\n\t\t<th class=\"data left\"><label for=\"formSuper\">{$lang['strsuper']}</label></th>\n";		echo "\t\t<td class=\"data1\"><input type=\"checkbox\" id=\"formSuper\" name=\"formSuper\"", 			(isset($_POST['formSuper'])) ? ' checked="checked"' : '', " /></td>\n\t</tr>\n";		echo "\t<tr>\n\t\t<th class=\"data left\"><label for=\"formCreateDB\">{$lang['strcreatedb']}</label></th>\n";		echo "\t\t<td class=\"data1\"><input type=\"checkbox\" id=\"formCreateDB\" name=\"formCreateDB\"", 			(isset($_POST['formCreateDB'])) ? ' checked="checked"' : '', " /></td>\n\t</tr>\n";		echo "\t<tr>\n\t\t<th class=\"data left\">{$lang['strexpires']}</th>\n";		echo "\t\t<td class=\"data1\"><input size=\"30\" name=\"formExpires\" value=\"", htmlspecialchars($_POST['formExpires']), "\" /></td>\n\t</tr>\n";		echo "</table>\n";		echo "<p><input type=\"hidden\" name=\"action\" value=\"save_create\" />\n";		echo $misc->form;		echo "<input type=\"submit\" name=\"create\" value=\"{$lang['strcreate']}\" />\n";		echo "<input type=\"submit\" name=\"cancel\" value=\"{$lang['strcancel']}\" /></p>\n";		echo "</form>\n";	}		/**	 * Actually creates the new user in the database	 */	function doSaveCreate() {		global $data;		global $lang;		// Check data		if ($_POST['formUsername'] == '')			doCreate($lang['struserneedsname']);		else if ($_POST['formPassword'] != $_POST['formConfirm'])			doCreate($lang['strpasswordconfirm']);		else {					$status = $data->createUser($_POST['formUsername'], $_POST['formPassword'], 				isset($_POST['formCreateDB']), isset($_POST['formSuper']), $_POST['formExpires'], array());			if ($status == 0)				doDefault($lang['strusercreated']);			else				doCreate($lang['strusercreatedbad']);		}	}		/**	 * Show default list of users in the database	 */	function doDefault($msg = '') {		global $data, $misc;		global $lang;				function renderUseExpires($val) {			global $lang;			return $val == 'infinity' ? $lang['strnever'] : htmlspecialchars($val); 		}				$misc->printTrail('server');		$misc->printTabs('server','users');		$misc->printMsg($msg);				$users = $data->getUsers();				$columns = array(			'user' => array(				'title' => $lang['strusername'],				'field' => field('usename'),			),			'superuser' => array(				'title' => $lang['strsuper'],				'field' => field('usesuper'),				'type'  => 'yesno',			),			'createdb' => array(				'title' => $lang['strcreatedb'],				'field' => field('usecreatedb'),				'type'  => 'yesno',			),			'expires' => array(				'title' => $lang['strexpires'],				'field' => field('useexpires'),				'type'  => 'callback',				'params'=> array('function' => 'renderUseExpires', 'null' => $lang['strnever']),			),			'defaults' => array(				'title' => $lang['strsessiondefaults'],				'field' => field('useconfig'),			),			'actions' => array(				'title' => $lang['stractions'],			),		);				$actions = array(			'alter' => array(				'title' => $lang['stralter'],				'url'   => "users.php?action=edit&amp;{$misc->href}&amp;",				'vars'  => array('username' => 'usename'),			),			'drop' => array(				'title' => $lang['strdrop'],				'url'   => "users.php?action=confirm_drop&amp;{$misc->href}&amp;",				'vars'  => array('username' => 'usename'),			),		);				$misc->printTable($users, $columns, $actions, $lang['strnousers']);		echo "<p><a class=\"navlink\" href=\"users.php?action=create&amp;{$misc->href}\">{$lang['strcreateuser']}</a></p>\n";	}	$misc->printHeader($lang['strusers']);	$misc->printBody();	switch ($action) {		case 'changepassword':			if (isset($_REQUEST['ok'])) doChangePassword(false);			else doAccount();			break;		case 'confchangepassword':			doChangePassword(true);			break;					case 'account':			doAccount();			break;		case 'save_create':			if (isset($_REQUEST['cancel'])) doDefault();			else doSaveCreate();			break;		case 'create':						doCreate();			break;		case 'drop':			if (isset($_REQUEST['cancel'])) doDefault();			else doDrop(false);			break;		case 'confirm_drop':			doDrop(true);			break;		case 'save_edit':			if (isset($_REQUEST['cancel'])) doDefault();			else doSaveEdit();			break;		case 'edit':			doEdit();			break;		default:			doDefault();			break;	}		$misc->printFooter();?>
<?php	/**	 * List indexes on a table	 *	 * $Id: indexes.php,v 1.46 2008/01/08 22:50:29 xzilla Exp $	 */	// Include application functions	include_once('./libraries/lib.inc.php');	include_once('./classes/class.select.php');			$action = (isset($_REQUEST['action'])) ? $_REQUEST['action'] : '';	/**	 * Show confirmation of cluster index and perform actual cluster	 */	function doClusterIndex($confirm) {		global $data, $misc, $action;		global $lang;		if ($confirm) {			// Default analyze to on			$_REQUEST['analyze'] = true;						$misc->printTrail('index');			$misc->printTitle($lang['strclusterindex'],'pg.index.cluster');			echo "<p>", sprintf($lang['strconfcluster'], $misc->printVal($_REQUEST['index'])), "</p>\n";			echo "<form action=\"indexes.php\" method=\"post\">\n";			echo "<p><input type=\"checkbox\" id=\"analyze\" name=\"analyze\"", (isset($_REQUEST['analyze']) ? ' checked="checked"' : ''), " /><label for=\"analyze\">{$lang['stranalyze']}</label></p>\n";			echo "<input type=\"hidden\" name=\"action\" value=\"cluster_index\" />\n";			echo "<input type=\"hidden\" name=\"table\" value=\"", htmlspecialchars($_REQUEST['table']), "\" />\n";			echo "<input type=\"hidden\" name=\"index\" value=\"", htmlspecialchars($_REQUEST['index']), "\" />\n";			echo $misc->form;			echo "<input type=\"submit\" name=\"cluster\" value=\"{$lang['strclusterindex']}\" />\n";			echo "<input type=\"submit\" name=\"cancel\" value=\"{$lang['strcancel']}\" />\n";			echo "</form>\n";		}		else {			$status = $data->clusterIndex($_POST['table'], $_POST['index']);			if ($status == 0)				if (isset($_POST['analyze'])){					$status = $data->analyzeDB($_POST['table']);					if ($status == 0)						doDefault($lang['strclusteredgood'] . ' ' . $lang['stranalyzegood']);					else						doDefault($lang['stranalyzebad']);				} else					doDefault($lang['strclusteredgood']);			else				doDefault($lang['strclusteredbad']);		}	}	function doReindex() {		global $data, $lang;		$status = $data->reindex('INDEX', $_REQUEST['index']);		if ($status == 0)			doDefault($lang['strreindexgood']);		else			doDefault($lang['strreindexbad']);	}	/**	 * Displays a screen where they can enter a new index	 */	function doCreateIndex($msg = '') {		global $data, $misc;		global $lang;		if (!isset($_POST['formIndexName'])) $_POST['formIndexName'] = '';		if (!isset($_POST['formIndexType'])) $_POST['formIndexType'] = null;		if (!isset($_POST['formCols'])) $_POST['formCols'] = '';		if (!isset($_POST['formWhere'])) $_POST['formWhere'] = '';		if (!isset($_POST['formSpc'])) $_POST['formSpc'] = '';		$attrs = $data->getTableAttributes($_REQUEST['table']);		// Fetch all tablespaces from the database		if ($data->hasTablespaces()) $tablespaces = $data->getTablespaces();				$misc->printTrail('table');		$misc->printTitle($lang['strcreateindex'],'pg.index.create');		$misc->printMsg($msg);		$selColumns = new XHTML_select("TableColumnList",true,10);		$selColumns->set_style("width: 10em;");		if ($attrs->recordCount() > 0) {			while (!$attrs->EOF) {				$selColumns->add(new XHTML_Option($attrs->fields['attname']));				$attrs->moveNext();			}		}		$selIndex = new XHTML_select("IndexColumnList[]", true, 10);		$selIndex->set_style("width: 10em;");		$selIndex->set_attribute("id", "IndexColumnList");		$buttonAdd    = new XHTML_Button("add", ">>");		$buttonAdd->set_attribute("onclick", "buttonPressed(this);");		$buttonAdd->set_attribute("type", "button");		$buttonRemove = new XHTML_Button("remove", "<<");		$buttonRemove->set_attribute("onclick", "buttonPressed(this);");				$buttonRemove->set_attribute("type", "button");		echo "<form onsubmit=\"doSelectAll();\" name=\"formIndex\" action=\"indexes.php\" method=\"post\">\n";		echo "<table>\n";		echo "<tr><th class=\"data required\" colspan=\"3\">{$lang['strindexname']}</th></tr>";		echo "<tr>";		echo "<td class=\"data1\" colspan=\"3\"><input type=\"text\" name=\"formIndexName\" size=\"32\" maxlength=\"{$data->_maxNameLen}\" value=\"", 			htmlspecialchars($_POST['formIndexName']), "\" /></td></tr>";		echo "<tr><th class=\"data\">{$lang['strtablecolumnlist']}</th><th class=\"data\">&nbsp;</th>";		echo "<th class=\"data required\">{$lang['strindexcolumnlist']}</th></tr>\n";		echo "<tr><td class=\"data1\">" . $selColumns->fetch() . "</td>\n";		echo "<td class=\"data1\">" . $buttonRemove->fetch() . $buttonAdd->fetch() . "</td>";		echo "<td class=\"data1\">" . $selIndex->fetch() . "</td></tr>\n";		echo "</table>\n";		echo "<table> \n";		echo "<tr>";		echo "<th class=\"data left required\" scope=\"row\">{$lang['strindextype']}</th>";		echo "<td class=\"data1\"><select name=\"formIndexType\">";		foreach ($data->typIndexes as $v) {			echo "<option value=\"", htmlspecialchars($v), "\"",				($v == $_POST['formIndexType']) ? ' selected="selected"' : '', ">", htmlspecialchars($v), "</option>\n";		}		echo "</select></td></tr>\n";						echo "<tr>";		echo "<th class=\"data left\" scope=\"row\"><label for=\"formUnique\">{$lang['strunique']}</label></th>";		echo "<td class=\"data1\"><input type=\"checkbox\" id=\"formUnique\" name=\"formUnique\"", (isset($_POST['formUnique']) ? 'checked="checked"' : ''), " /></td>";		echo "</tr>";		echo "<tr>";		echo "<th class=\"data left\" scope=\"row\">{$lang['strwhere']}</th>";		echo "<td class=\"data1\">(<input name=\"formWhere\" size=\"32\" maxlength=\"{$data->_maxNameLen}\" value=\"", 			htmlspecialchars($_POST['formWhere']), "\" />)</td>";		echo "</tr>";				// Tablespace (if there are any)		if ($data->hasTablespaces() && $tablespaces->recordCount() > 0) {			echo "\t<tr>\n\t\t<th class=\"data left\">{$lang['strtablespace']}</th>\n";			echo "\t\t<td class=\"data1\">\n\t\t\t<select name=\"formSpc\">\n";			// Always offer the default (empty) option			echo "\t\t\t\t<option value=\"\"",				($_POST['formSpc'] == '') ? ' selected="selected"' : '', "></option>\n";			// Display all other tablespaces			while (!$tablespaces->EOF) {				$spcname = htmlspecialchars($tablespaces->fields['spcname']);				echo "\t\t\t\t<option value=\"{$spcname}\"",					($spcname == $_POST['formSpc']) ? ' selected="selected"' : '', ">{$spcname}</option>\n";				$tablespaces->moveNext();			}			echo "\t\t\t</select>\n\t\t</td>\n\t</tr>\n";		}		if ($data->hasConcurrentIndexBuild()) {			echo "<tr>";			echo "<th class=\"data left\" scope=\"row\"><label for=\"formConcur\">{$lang['strconcurrently']}</label></th>";			echo "<td class=\"data1\"><input type=\"checkbox\" id=\"formConcur\" name=\"formConcur\"", (isset($_POST['formConcur']) ? 'checked="checked"' : ''), " /></td>";			echo "</tr>";		}			echo "</table>";		echo "<p><input type=\"hidden\" name=\"action\" value=\"save_create_index\" />\n";		echo $misc->form;		echo "<input type=\"hidden\" name=\"table\" value=\"", htmlspecialchars($_REQUEST['table']), "\" />\n";		echo "<input type=\"submit\" value=\"{$lang['strcreate']}\" />\n";		echo "<input type=\"submit\" name=\"cancel\" value=\"{$lang['strcancel']}\" /></p>\n";		echo "</form>\n";	}	/**	 * Actually creates the new index in the database	 * @@ Note: this function can't handle columns with commas in them	 */	function doSaveCreateIndex() {		global $data;		global $lang;				// Handle databases that don't have partial indexes		if (!isset($_POST['formWhere'])) $_POST['formWhere'] = '';		// Default tablespace to null if it isn't set		if (!isset($_POST['formSpc'])) $_POST['formSpc'] = null;				// Check that they've given a name and at least one column		if ($_POST['formIndexName'] == '') doCreateIndex($lang['strindexneedsname']);		elseif (!isset($_POST['IndexColumnList']) || $_POST['IndexColumnList'] == '') doCreateIndex($lang['strindexneedscols']);		else {			$status = $data->createIndex($_POST['formIndexName'], $_POST['table'], $_POST['IndexColumnList'], 				$_POST['formIndexType'], isset($_POST['formUnique']), $_POST['formWhere'], $_POST['formSpc'], 				isset($_POST['formConcur']));			if ($status == 0)				doDefault($lang['strindexcreated']);			else				doCreateIndex($lang['strindexcreatedbad']);		}	}	/**	 * Show confirmation of drop index and perform actual drop	 */	function doDropIndex($confirm) {		global $data, $misc;		global $lang;		if ($confirm) {			$misc->printTrail('index');			$misc->printTitle($lang['strdrop'],'pg.index.drop');			echo "<p>", sprintf($lang['strconfdropindex'], $misc->printVal($_REQUEST['index'])), "</p>\n";			echo "<form action=\"indexes.php\" method=\"post\">\n";			echo "<input type=\"hidden\" name=\"action\" value=\"drop_index\" />\n";			echo "<input type=\"hidden\" name=\"table\" value=\"", htmlspecialchars($_REQUEST['table']), "\" />\n";			echo "<input type=\"hidden\" name=\"index\" value=\"", htmlspecialchars($_REQUEST['index']), "\" />\n";			echo $misc->form;			echo "<p><input type=\"checkbox\" id=\"cascade\" name=\"cascade\" /> <label for=\"cascade\">{$lang['strcascade']}</label></p>\n";			echo "<input type=\"submit\" name=\"drop\" value=\"{$lang['strdrop']}\" />\n";			echo "<input type=\"submit\" name=\"cancel\" value=\"{$lang['strcancel']}\" />\n";			echo "</form>\n";		}		else {			$status = $data->dropIndex($_POST['index'], isset($_POST['cascade']));			if ($status == 0)				doDefault($lang['strindexdropped']);			else				doDefault($lang['strindexdroppedbad']);		}	}	function doDefault($msg = '') {		global $data, $misc;		global $lang;				function indPre(&$rowdata, $actions) {			global $data, $lang;						if ($data->phpBool($rowdata->fields['indisprimary'])) {				$rowdata->fields['+constraints'] = $lang['strprimarykey'];				$actions['drop']['disable'] = true;			}			elseif ($data->phpBool($rowdata->fields['indisunique'])) {				$rowdata->fields['+constraints'] = $lang['struniquekey'];				$actions['drop']['disable'] = true;			}			else				$rowdata->fields['+constraints'] = '';						return $actions;		}				$misc->printTrail('table');		$misc->printTabs('table','indexes');		$misc->printMsg($msg);		$indexes = $data->getIndexes($_REQUEST['table']);				$columns = array(			'index' => array(				'title' => $lang['strname'],				'field' => field('indname'),			),			'definition' => array(				'title' => $lang['strdefinition'],				'field' => field('inddef'),			),			'constraints' => array(				'title' => $lang['strconstraints'],				'field' => field('+constraints'),				'type'  => 'verbatim',				'params'=> array('align' => 'center'),			),			'clustered' => array(				'title' => $lang['strclustered'],				'field' => field('indisclustered'),				'type'  => 'yesno',			),			'actions' => array(				'title' => $lang['stractions'],			),			'comment' => array(				'title' => $lang['strcomment'],				'field' => field('idxcomment'),			),		);				$actions = array(			'cluster' => array(				'title' => $lang['strclusterindex'],				'url'   => "indexes.php?action=confirm_cluster_index&amp;{$misc->href}&amp;table=".urlencode($_REQUEST['table'])."&amp;",				'vars'  => array('index' => 'indname'),			),			'reindex' => array(				'title' => $lang['strreindex'],				'url'   => "indexes.php?action=reindex&amp;{$misc->href}&amp;table=".urlencode($_REQUEST['table'])."&amp;",				'vars'  => array('index' => 'indname'),			),			'drop' => array(				'title' => $lang['strdrop'],				'url'   => "indexes.php?action=confirm_drop_index&amp;{$misc->href}&amp;table=".urlencode($_REQUEST['table'])."&amp;",				'vars'  => array('index' => 'indname'),			),		);				$misc->printTable($indexes, $columns, $actions, $lang['strnoindexes'], 'indPre');				echo "<p><a class=\"navlink\" href=\"indexes.php?action=create_index&amp;{$misc->href}&amp;table=", 			urlencode($_REQUEST['table']), "\">{$lang['strcreateindex']}</a></p>\n";			}	function doTree() {		global $misc, $data;		$indexes = $data->getIndexes($_REQUEST['table']);		$reqvars = $misc->getRequestVars('table');		function getIcon($f) {			if ($f['indisprimary'] == 't')				return 'PrimaryKey';			if ($f['indisunique'] == 't')				return 'UniqueConstraint';			return 'Index';		}		$attrs = array(			'text'   => field('indname'),			'icon'   => callback('getIcon'),		);		$misc->printTreeXML($indexes, $attrs);		exit;	}	if ($action == 'tree') doTree();	$misc->printHeader($lang['strindexes'], "<script src=\"indexes.js\" type=\"text/javascript\"></script>");	if ($action == 'create_index' || $action == 'save_create_index')		echo "<body onload=\"init();\">";	else		$misc->printBody();	switch ($action) {		case 'cluster_index':			if (isset($_POST['cluster'])) doClusterIndex(false);			else doDefault();			break;		case 'confirm_cluster_index':			doClusterIndex(true);			break;		case 'reindex':			doReindex();			break;		case 'save_create_index':			if (isset($_POST['cancel'])) doDefault();			else doSaveCreateIndex();			break;		case 'create_index':			doCreateIndex();			break;		case 'drop_index':			if (isset($_POST['drop'])) doDropIndex(false);			else doDefault();			break;		case 'confirm_drop_index':			doDropIndex(true);			break;		default:			doDefault();			break;	}	$misc->printFooter();?>
<?php	/**	 * German language file for phpPgAdmin.  Use this as a basis	 *	 * @maintainer Laurenz Albe <laurenz.albe@wien.gv.at>	 *     * $Id: german.php,v 1.30 2008/02/18 23:06:51 ioguix Exp $	 */	// Language and character set	$lang['applang'] = 'Deutsch';	$lang['appcharset'] = 'UTF-8';	$lang['applocale'] = 'de_DE';	$lang['appdbencoding'] = 'LATIN1';	$lang['applangdir'] = 'ltr';	// Welcome	$lang['strintro'] = 'Willkommen bei phpPgAdmin.';	$lang['strppahome'] = 'phpPgAdmin Homepage';	$lang['strpgsqlhome'] = 'PostgreSQL Homepage';	$lang['strpgsqlhome_url'] = 'http://www.postgresql.org/';	$lang['strlocaldocs'] = 'PostgreSQL Dokumentation (lokal)';	$lang['strreportbug'] = 'Fehler melden';	$lang['strviewfaq'] = 'Online-FAQ ansehen';	$lang['strviewfaq_url'] = 'http://phppgadmin.sourceforge.net/?page=faq';		// Basic strings	$lang['strlogin'] = 'Anmelden';	$lang['strloginfailed'] = 'Anmeldung fehlgeschlagen';	$lang['strlogindisallowed'] = 'Anmeldung aus Sicherheitsgründen verweigert.';	$lang['strserver'] = 'Server';	$lang['strservers'] = 'Server';	$lang['strintroduction'] = 'Einführung';	$lang['strhost'] = 'Host';	$lang['strport'] = 'Port';	$lang['strlogout'] = 'Abmelden';	$lang['strowner'] = 'Besitzer';	$lang['straction'] = 'Aktion';	$lang['stractions'] = 'Aktionen';	$lang['strname'] = 'Name';	$lang['strdefinition'] = 'Definition';	$lang['strproperties'] = 'Eigenschaften';	$lang['strbrowse'] = 'Durchsuchen';	$lang['strenable'] = 'Einschalten';	$lang['strdisable'] = 'Ausschalten';	$lang['strdrop'] = 'Löschen';	$lang['strdropped'] = 'Gelöscht';	$lang['strnull'] = 'Null';	$lang['strnotnull'] = 'Nicht Null';	$lang['strprev'] = '< Zurück';	$lang['strnext'] = 'Weiter >';	$lang['strfirst'] = '<< Anfang';	$lang['strlast'] = 'Ende >>';	$lang['strfailed'] = 'Fehlgeschlagen';	$lang['strcreate'] = 'Erstellen';	$lang['strcreated'] = 'Erstellt';	$lang['strcomment'] = 'Kommentar';	$lang['strlength'] = 'Länge';	$lang['strdefault'] = 'Standardwert';	$lang['stralter'] = 'Ändern';	$lang['strok'] = 'OK';	$lang['strcancel'] = 'Abbrechen';	$lang['strac'] = 'Automatische Vervollständigung einschalten';	$lang['strsave'] = 'Speichern';	$lang['strreset'] = 'Zurücksetzen';	$lang['strinsert'] = 'Einfügen';	$lang['strselect'] = 'Abfrage';	$lang['strdelete'] = 'Löschen';	$lang['strupdate'] = 'Ändern';	$lang['strreferences'] = 'Verweise';	$lang['stryes'] = 'Ja';	$lang['strno'] = 'Nein';	$lang['strtrue'] = 'WAHR';	$lang['strfalse'] = 'FALSCH';	$lang['stredit'] = 'Bearbeiten';	$lang['strcolumn'] = 'Spalte';	$lang['strcolumns'] = 'Spalten';	$lang['strrows'] = 'Datensätze';	$lang['strrowsaff'] = 'Datensätze betroffen.';	$lang['strobjects'] = 'Objekt(e)';	$lang['strback'] = 'Zurück';	$lang['strqueryresults'] = 'Abfrageergebnis';	$lang['strshow'] = 'Anzeigen';	$lang['strempty'] = 'Leeren';	$lang['strlanguage'] = 'Sprache';	$lang['strencoding'] = 'Zeichenkodierung';	$lang['strvalue'] = 'Wert';	$lang['strunique'] = 'Eindeutig';	$lang['strprimary'] = 'Primär';	$lang['strexport'] = 'Exportieren';	$lang['strimport'] = 'Importieren';	$lang['strallowednulls'] = 'NULL-Zeichen erlaubt';	$lang['strbackslashn'] = '\N';	$lang['stremptystring'] = 'Leere Zeichenkette / Leere Spalte';	$lang['strsql'] = 'SQL';	$lang['stradmin'] = 'Admin';	$lang['strvacuum'] = 'Bereinigen';	$lang['stranalyze'] = 'Analysieren';	$lang['strclusterindex'] = 'Cluster';	$lang['strclustered'] = 'Geclustert?';	$lang['strreindex'] = 'Reindexieren';	$lang['strexecute'] = 'Ausführen';	$lang['stradd'] = 'Hinzufügen';	$lang['strevent'] = 'Ereignis';	$lang['strwhere'] = 'Bedingung';	$lang['strinstead'] = 'Tu stattdessen';	$lang['strwhen'] = 'Wann';	$lang['strformat'] = 'Format';	$lang['strdata'] = 'Daten';	$lang['strconfirm'] = 'Bestätigen';	$lang['strexpression'] = 'Ausdruck';	$lang['strellipsis'] = '...';	$lang['strseparator'] = ': ';	$lang['strexpand'] = 'Aufklappen';	$lang['strcollapse'] = 'Zuklappen';	$lang['strfind'] = 'Suchen';	$lang['stroptions'] = 'Optionen';	$lang['strrefresh'] = 'Aktualisieren';	$lang['strdownload'] = 'Herunterladen';	$lang['strdownloadgzipped'] = 'gzip-komprimiert herunterladen';	$lang['strinfo'] = 'Info';	$lang['stroids'] = 'OIDs';	$lang['stradvanced'] = 'Erweitert';	$lang['strvariables'] = 'Variable';	$lang['strprocess'] = 'Prozess';	$lang['strprocesses'] = 'Prozesse';	$lang['strsetting'] = 'Einstellung';	$lang['streditsql'] = 'SQL bearbeiten';	$lang['strruntime'] = 'Laufzeit gesamt: %s ms';	$lang['strpaginate'] = 'Ergebnisse seitenweise anzeigen';	$lang['struploadscript'] = 'oder laden Sie ein SQL-Script hoch:';	$lang['strstarttime'] = 'Beginnzeitpunkt';	$lang['strfile'] = 'Datei';	$lang['strfileimported'] = 'Datei importiert.';	$lang['strtrycred'] = 'Diese Anmeldedaten für alle Server verwenden';	$lang['strconfdropcred']  = 'Aus Sicherheitsgründen werden gemeinsamme Anmeldedaten beim Abmelden gelöscht. Sind Sie sicher, dass sie sich abmelden wollen?';	$lang['stractionsonmultiplelines'] = 'Mehrzeilige Aktionen';	$lang['strselectall'] = 'Alle auswählen';	$lang['strunselectall'] = 'Alle abwählen';	$lang['strlocale'] = 'Spracheinstellung';	// User-supplied SQL history	$lang['strhistory'] = 'Befehlsspeicher';	$lang['strnohistory'] = 'Kein Befehlsspeicher.';	$lang['strclearhistory'] = 'Befehlsspeicher löschen';	$lang['strdelhistory'] = 'Aus dem Befehlsspeicher löschen';	$lang['strconfdelhistory'] = 'Diese Abfrage wirklich aus dem Befehlsspeicher löschen?';	$lang['strconfclearhistory'] = 'Befehlsspeicher wirklich löschen?';	$lang['strnodatabaseselected'] = 'Bitte wählen Sie eine Datenbank aus.';	// Database sizes	$lang['strsize'] = 'Größe';	$lang['strbytes'] = 'Bytes';	$lang['strkb'] = 'kB';	$lang['strmb'] = 'MB';	$lang['strgb'] = 'GB';	$lang['strtb'] = 'TB';	// Error handling	$lang['strnoframes'] = 'Diese Anwendung funktioniert am besten mit einem Browser, der Frames beherrscht, kann aber mit dem untenstehenden Link auch ohne Frames verwendet werden.';	$lang['strnoframeslink'] = 'Ohne Frames arbeiten';	$lang['strbadconfig'] = 'Ihre config.inc.php ist nicht aktuell. Sie müssen sie aus der config.inc.php-dist neu erzeugen.';	$lang['strnotloaded'] = 'Ihre PHP-Installation unterstützt PostgreSQL nicht. Sie müssen PHP unter Verwendung der Konfigurationsoption --with-pgsql neu kompilieren.';	$lang['strpostgresqlversionnotsupported'] = 'Ihre PostgreSQL-Version wird nicht unterstützt. Bitte stellen Sie Ihre Datenbank auf Version %s oder eine neuere Version um.';	$lang['strbadschema'] = 'Ungültiges Schema angegeben.';	$lang['strbadencoding'] = 'Kann die Client-Zeichenkodierung nicht in der Datenbank setzen.';	$lang['strsqlerror'] = 'SQL-Fehler:';	$lang['strinstatement'] = 'In der Anweisung:';	$lang['strinvalidparam'] = 'Unzulässige Script-Parameter.';	$lang['strnodata'] = 'Keine Datensätze gefunden.';	$lang['strnoobjects'] = 'Keine Objekte gefunden.';	$lang['strrownotunique'] = 'Dieser Datensatz hat keine eindeutige Spalte.';	$lang['strnoreportsdb'] = 'Sie haben die Berichtsdatenbank nicht angelegt. In der Datei INSTALL finden Sie Anweisungen dafür.';	$lang['strnouploads'] = 'Das Hochladen von Dateien ist ausgeschaltet.';	$lang['strimporterror'] = 'Importfehler.';	$lang['strimporterror-fileformat'] = 'Importfehler: Dateiformat konnte nicht automatisch bestimmt werden.';	$lang['strimporterrorline'] = 'Importfehler in Zeile %s.';	$lang['strimporterrorline-badcolumnnum'] = 'Importfehler in Zeile %s: die Zeile hat nicht die richtige Anzahl von Spalten.';	$lang['strimporterror-uploadedfile'] = 'Importfehler: die Datei konnte nicht auf den Server geladen werden';	$lang['strcannotdumponwindows'] = 'Das Ablegen von komplizierten Tabellen- und Schemanamen wird auf Windows nicht unterstützt.';	$lang['strinvalidserverparam'] = 'Es wurde versucht, mit einem ungültigen Server-Parameter eine Verbindung herzustellen. Möglicherweise versucht jemand, in Ihr System einzubrechen.'; 	$lang['strnoserversupplied'] = 'Kein Server angegeben!';	// Tables	$lang['strtable'] = 'Tabelle';	$lang['strtables'] = 'Tabellen';	$lang['strshowalltables'] = 'Alle Tabellen anzeigen';	$lang['strnotables'] = 'Keine Tabellen gefunden.';	$lang['strnotable'] = 'Keine Tabelle gefunden.';	$lang['strcreatetable'] = 'Neue Tabelle erstellen';	$lang['strcreatetablelike'] = 'Neue Tabelle als Kopie einer bestehenden anlegen';	$lang['strcreatetablelikeparent'] = 'Ursprüngliche Tabelle';	$lang['strcreatelikewithdefaults'] = 'DEFAULT-Werte mitkopieren';	$lang['strcreatelikewithconstraints'] = 'Constraints mitkopieren';	$lang['strcreatelikewithindexes'] = 'Indizes mitkopieren';	$lang['strtablename'] = 'Tabellenname';	$lang['strtableneedsname'] = 'Sie müssen für die Tabelle einen Namen angeben.';	$lang['strtablelikeneedslike'] = 'Sie müssen eine Tabelle angeben, deren Spaltendefinitionen kopiert werden sollen.';	$lang['strtableneedsfield'] = 'Sie müssen mindestens eine Spalte angeben.';	$lang['strtableneedscols'] = 'Sie müssen eine zulässige Anzahl von Spalten angeben.';	$lang['strtablecreated'] = 'Tabelle erstellt.';	$lang['strtablecreatedbad'] = 'Erstellen der Tabelle fehlgeschlagen.';	$lang['strconfdroptable'] = 'Sind Sie sicher, dass Sie die Tabelle "%s" löschen möchten?';	$lang['strtabledropped'] = 'Tabelle gelöscht.';	$lang['strtabledroppedbad'] = 'Löschen der Tabelle fehlgeschlagen.';	$lang['strconfemptytable'] = 'Sind Sie sicher, dass Sie den Inhalt der Tabelle "%s" löschen möchten?';	$lang['strtableemptied'] = 'Tabelleninhalt gelöscht.';	$lang['strtableemptiedbad'] = 'Löschen des Tabelleninhaltes fehlgeschlagen.';	$lang['strinsertrow'] = 'Datensatz einfügen';	$lang['strrowinserted'] = 'Datensatz eingefügt.';	$lang['strrowinsertedbad'] = 'Einfügen des Datensatzes fehlgeschlagen.';	$lang['strrowduplicate'] = 'Einfügen des Datensatzes fehlgeschlagen: es wurde versucht, ein Duplikat einzufügen.';	$lang['streditrow'] = 'Datensatz bearbeiten';	$lang['strrowupdated'] = 'Datensatz geändert.';	$lang['strrowupdatedbad'] = 'Ändern des Datensatzes fehlgeschlagen.';	$lang['strdeleterow'] = 'Datensatz löschen';	$lang['strconfdeleterow'] = 'Sind Sie sicher, dass Sie diesen Datensatz löschen möchten?';	$lang['strrowdeleted'] = 'Datensatz gelöscht.';	$lang['strrowdeletedbad'] = 'Löschen des Datensatzes fehlgeschlagen.';	$lang['strinsertandrepeat'] = 'Einfügen und Wiederholen';	$lang['strnumcols'] = 'Anzahl der Spalten';	$lang['strcolneedsname'] = 'Sie müssen einen Namen für die Spalte angeben';	$lang['strselectallfields'] = 'Alle Felder auswählen';	$lang['strselectneedscol'] = 'Sie müssen mindestens eine Spalte anzeigen lassen.';	$lang['strselectunary'] = 'Unäre Operatoren können keine Werte haben.';	$lang['strcolumnaltered'] = 'Spalte geändert.';	$lang['strcolumnalteredbad'] = 'Ändern der Spalte fehlgeschlagen.';	$lang['strconfdropcolumn'] = 'Sind Sie sicher, dass Sie die Spalte "%s" aus der Tabelle "%s" löschen möchten?';	$lang['strcolumndropped'] = 'Spalte gelöscht.';	$lang['strcolumndroppedbad'] = 'Löschen der Spalte fehlgschlagen.';	$lang['straddcolumn'] = 'Spalte hinzufügen';	$lang['strcolumnadded'] = 'Spalte hinzugefügt.';	$lang['strcolumnaddedbad'] = 'Hinzufügen der Spalte fehlgeschlagen.';	$lang['strcascade'] = 'CASCADE';	$lang['strtablealtered'] = 'Tabelle geändert.';	$lang['strtablealteredbad'] = 'Ändern der Tabelle fehlgeschlagen.';	$lang['strdataonly'] = 'Nur die Daten';	$lang['strstructureonly'] = 'Nur die Struktur';	$lang['strstructureanddata'] = 'Struktur und Daten';	$lang['strtabbed'] = 'Mit Tabluatoren';	$lang['strauto'] = 'Automatisch';	$lang['strconfvacuumtable'] = 'Sind sie sicher, dass Sie VACUUM auf "%s" ausführen wollen?';	$lang['strconfanalyzetable'] = 'Sind sie sicher, dass Sie ANALYZE auf "%s" ausführen wollen?';	$lang['strestimatedrowcount'] = 'Geschätzte Anzahl von Datensätzen';	$lang['strspecifytabletoanalyze'] = 'Sie müssen mindestens eine Tabelle angeben, die analysiert werden soll.';	$lang['strspecifytabletoempty'] = 'Sie müssen mindestens eine Tabelle angeben, deren Inhalt gelöscht werden soll.';	$lang['strspecifytabletodrop'] = 'Sie müssen mindestens eine Tabelle angeben, die gelöscht werden soll.';	$lang['strspecifytabletovacuum'] = 'Sie müssen mindestens eine Tabelle angeben, die bereinigt werden soll.';	// Columns	$lang['strcolprop'] = 'Spalteneigenschaften';	$lang['strnotableprovided'] = 'Keine Tabelle angegeben!';			// Users	$lang['struser'] = 'Benutzer';	$lang['strusers'] = 'Benutzer';	$lang['strusername'] = 'Benutzername';	$lang['strpassword'] = 'Passwort';	$lang['strsuper'] = 'Superuser?';	$lang['strcreatedb'] = 'Datenbank erstellen?';	$lang['strexpires'] = 'Gültig bis';	$lang['strsessiondefaults'] = 'Standardwerte für Datenbanksitzungen';	$lang['strnousers'] = 'Keine Benutzer gefunden.';	$lang['struserupdated'] = 'Benutzer geändert.';	$lang['struserupdatedbad'] = 'Ändern des Benutzers fehlgeschlagen.';	$lang['strshowallusers'] = 'Alle Benutzer anzeigen';	$lang['strcreateuser'] = 'Benutzer anlegen';	$lang['struserneedsname'] = 'Sie müssen einen Namen für den Benutzer angeben.';	$lang['strusercreated'] = 'Benutzer angelegt.';	$lang['strusercreatedbad'] = 'Anlegen des Benutzers fehlgeschlagen.';	$lang['strconfdropuser'] = 'Sind Sie sicher, dass Sie den Benutzer "%s" löschen möchten?';	$lang['struserdropped'] = 'Benutzer gelöscht.';	$lang['struserdroppedbad'] = 'Löschen des Benutzers fehlgeschlagen.';	$lang['straccount'] = 'Benutzerkonto';	$lang['strchangepassword'] = 'Passwort ändern';	$lang['strpasswordchanged'] = 'Passwort geändert.';	$lang['strpasswordchangedbad'] = 'Ändern des Passwortes fehlgeschlagen.';	$lang['strpasswordshort'] = 'Passwort ist zu kurz.';	$lang['strpasswordconfirm'] = 'Passwort und Passwortbestätigung stimmen nicht überein.';		// Groups	$lang['strgroup'] = 'Gruppe';	$lang['strgroups'] = 'Gruppen';	$lang['strshowallgroups'] = 'Alle Gruppen anzeigen';	$lang['strnogroup'] = 'Gruppe nicht gefunden.';	$lang['strnogroups'] = 'Keine Gruppe gefunden.';	$lang['strcreategroup'] = 'Gruppe anlegen';	$lang['strgroupneedsname'] = 'Sie müssen für die Gruppe einen Namen angeben.';	$lang['strgroupcreated'] = 'Gruppe angelegt.';	$lang['strgroupcreatedbad'] = 'Anlegen der Gruppe fehlgeschlagen.';		$lang['strconfdropgroup'] = 'Sind Sie sicher, dass Sie die Gruppe "%s" löschen möchten?';	$lang['strgroupdropped'] = 'Gruppe gelöscht.';	$lang['strgroupdroppedbad'] = 'Löschen der Gruppe fehlgeschlagen.';	$lang['strmembers'] = 'Mitglieder';	$lang['strmemberof'] = 'Mitglied von';	$lang['stradminmembers'] = 'Administrative Mitglieder';	$lang['straddmember'] = 'Mitglied hinzufügen';	$lang['strmemberadded'] = 'Mitglied hinzugefügt.';	$lang['strmemberaddedbad'] = 'Hinzufügen des Mitglieds fehlgeschlagen.';	$lang['strdropmember'] = 'Mitglied löschen';	$lang['strconfdropmember'] = 'Sind Sie sicher, dass Sie das Mitglied "%s" aus der Gruppe "%s" löschen wollen?';	$lang['strmemberdropped'] = 'Mitglied gelöscht.';	$lang['strmemberdroppedbad'] = 'Löschen des Mitglieds fehlgeschlagen.';	// Roles	$lang['strrole'] = 'Rolle';	$lang['strroles'] = 'Rollen';	$lang['strshowallroles'] = 'Alle Rollen anzeigen';	$lang['strnoroles'] = 'Keine Rollen gefunden.';	$lang['strinheritsprivs'] = 'Rechte vererben?';	$lang['strcreaterole'] = 'Rolle anlegen';	$lang['strcancreaterole'] = 'Darf Rollen anlegen?';	$lang['strrolecreated'] = 'Rolle angelegt.';	$lang['strrolecreatedbad'] = 'Anlegen der Rolle fehlgeschlagen.';	$lang['strrolealtered'] = 'Rolle geändert.';	$lang['strrolealteredbad'] = 'Ändern der Rolle fehlgeschlagen.';	$lang['strcanlogin'] = 'Darf sich anmelden?';	$lang['strconnlimit'] = 'Maximalzahl an Datenbankverbindungen';	$lang['strdroprole'] = 'Rolle löschen';	$lang['strconfdroprole'] = 'Sind Sie sicher, dass Sie die Rolle "%s" löschen möchten?';	$lang['strroledropped'] = 'Rolle gelöscht.';	$lang['strroledroppedbad'] = 'Löschen der Rolle fehlgeschlagen.';	$lang['strnolimit'] = 'Unbeschränkt';	$lang['strnever'] = 'Nie';	$lang['strroleneedsname'] = 'Sie müssen für die Rolle einen Namen angeben.';	// Privileges	$lang['strprivilege'] = 'Recht';	$lang['strprivileges'] = 'Rechte';	$lang['strnoprivileges'] = 'Für dieses Objekt gelten die Standard-Eigentümerrechte.';	$lang['strgrant'] = 'Rechte erteilen';	$lang['strrevoke'] = 'Rechte entziehen';	$lang['strgranted'] = 'Rechte geändert.';	$lang['strgrantfailed'] = 'Ändern der Rechte fehlgeschlagen.';	$lang['strgrantbad'] = 'Sie müssen mindestens einen Benutzer oder eine Gruppe und mindestens ein Recht angeben.';	$lang['strgrantor'] = 'Recht vergeben von';	$lang['strasterisk'] = '*';	// Databases	$lang['strdatabase'] = 'Datenbank';	$lang['strdatabases'] = 'Datenbanken';	$lang['strshowalldatabases'] = 'Alle Datenbanken anzeigen';	$lang['strnodatabases'] = 'Keine Datenbanken gefunden.';	$lang['strcreatedatabase'] = 'Datenbank erstellen';	$lang['strdatabasename'] = 'Datenbankname';	$lang['strdatabaseneedsname'] = 'Sie müssen für die Datenbank einen Namen angeben.';	$lang['strdatabasecreated'] = 'Datenbank erstellt.';	$lang['strdatabasecreatedbad'] = 'Erstellen der Datenbank fehlgeschlagen.';	$lang['strconfdropdatabase'] = 'Sind Sie sicher, dass Sie die Datenbank "%s" löschen möchten?';	$lang['strdatabasedropped'] = 'Datenbank gelöscht.';	$lang['strdatabasedroppedbad'] = 'Löschen der Datenbank fehlgeschlagen.';	$lang['strentersql'] = 'Auszuführende SQL-Anweisungen hier eingeben:';	$lang['strsqlexecuted'] = 'SQL-Anweisungen ausgeführt.';	$lang['strvacuumgood'] = 'Tabellenbereinigung abgeschlossen.';	$lang['strvacuumbad'] = 'Tabellenbereinigung fehlgeschlagen.';	$lang['stranalyzegood'] = 'Analyse abgeschlossen.';	$lang['stranalyzebad'] = 'Analyse fehlgeschlagen.';	$lang['strreindexgood'] = 'Neuindexierung abgeschlossen.';	$lang['strreindexbad'] = 'Neuindexierung fehlgeschlagen.';	$lang['strfull'] = 'Mit Reorganisation';	$lang['strfreeze'] = 'Aggressives "Einfrieren"';	$lang['strforce'] = 'Erzwingen';	$lang['strsignalsent'] = 'Signal gesendet.';	$lang['strsignalsentbad'] = 'Senden des Signales fehlgeschlagen.';	$lang['strallobjects'] = 'Alle Objekte';	$lang['strdatabasealtered'] = 'Datenbank geändert.';	$lang['strdatabasealteredbad'] = 'Ändern der Datenbank fehlgeschlagen.';	$lang['strspecifydatabasetodrop'] = 'Sie müssen mindestens eine Datenbank angeben, die gelöscht werden soll.';	// Views	$lang['strview'] = 'Sicht';	$lang['strviews'] = 'Sichten';	$lang['strshowallviews'] = 'Alle Sichten anzeigen';	$lang['strnoview'] = 'Keine Sicht gefunden.';	$lang['strnoviews'] = 'Keine Sichten gefunden.';	$lang['strcreateview'] = 'Sicht erstellen';	$lang['strviewname'] = 'Name der Sicht';	$lang['strviewneedsname'] = 'Sie müssen für die Sicht einen Namen angeben.';	$lang['strviewneedsdef'] = 'Sie müssen für die Sicht eine Definition angeben.';	$lang['strviewneedsfields'] = 'Sie müssen die Spalten angeben, die sie in der Sicht haben wollen.';	$lang['strviewcreated'] = 'Sicht erstellt.';	$lang['strviewcreatedbad'] = 'Erstellen der Sicht fehlgeschlagen.';	$lang['strconfdropview'] = 'Sind Sie sicher, dass Sie die Sicht "%s" löschen möchten?';	$lang['strviewdropped'] = 'Sicht gelöscht.';	$lang['strviewdroppedbad'] = 'Löschen der Sicht fehlgeschlagen.';	$lang['strviewupdated'] = 'Sicht geändert.';	$lang['strviewupdatedbad'] = 'Ändern der Sicht fehlgeschlagen.';	$lang['strviewlink'] = 'Verbindende Schlüssel';	$lang['strviewconditions'] = 'Zusätzliche Bedingungen';	$lang['strcreateviewwiz'] = 'Sicht mit dem Assistenten erstellen';	$lang['strrenamedupfields'] = 'Doppelte Spalten umbenennen';	$lang['strdropdupfields'] = 'Doppelte Spalten entfernen';	$lang['strerrordupfields'] = 'Fehler bei den doppelten Spalten';	$lang['strviewaltered'] = 'Sicht geändert.';	$lang['strviewalteredbad'] = 'Ändern der Sicht fehlgeschlagen.';	$lang['strspecifyviewtodrop'] = 'Sie müssen mindestens eine Sicht angeben, die gelöscht werden soll.';	// Sequences	$lang['strsequence'] = 'Sequenz';	$lang['strsequences'] = 'Sequenzen';	$lang['strshowallsequences'] = 'Alle Sequenzen anzeigen';	$lang['strnosequence'] = 'Keine Sequenz gefunden.';	$lang['strnosequences'] = 'Keine Sequenzen gefunden.';	$lang['strcreatesequence'] = 'Sequenz erstellen';	$lang['strlastvalue'] = 'Letzter Wert';	$lang['strincrementby'] = 'Erhöhen um';		$lang['strstartvalue'] = 'Startwert';	$lang['strmaxvalue'] = 'Maximalwert';	$lang['strminvalue'] = 'Minimalwert';	$lang['strcachevalue'] = 'Anzahl Werte im Cache';	$lang['strlogcount'] = 'WAL-Zähler (log_cnt)';	$lang['strcancycle'] = 'Zyklisch?';	$lang['striscalled'] = 'Wird erhöht werden, wenn der nächste Wert angefordert wird (is_called)?';	$lang['strsequenceneedsname'] = 'Sie müssen für die Sequenz einen Namen angeben.';	$lang['strsequencecreated'] = 'Sequenz erstellt.';	$lang['strsequencecreatedbad'] = 'Erstellen der Sequenz fehlgeschlagen.';	$lang['strconfdropsequence'] = 'Sind Sie sicher, dass die die Sequenz "%s" löschen möchten?';	$lang['strsequencedropped'] = 'Sequenz gelöscht.';	$lang['strsequencedroppedbad'] = 'Löschen der Sequenz fehlgeschlagen.';	$lang['strsequencereset'] = 'Sequenz zurückgesetzt.';	$lang['strsequenceresetbad'] = 'Rücksetzen der Sequenz fehlgeschlagen.'; 	$lang['strsequencealtered'] = 'Sequenz geändert.'; 	$lang['strsequencealteredbad'] = 'Ändern der Sequenz fehlgeschlagen.'; 	$lang['strsetval'] = 'Wert setzen'; 	$lang['strsequencesetval'] = 'Sequenzwert gesetzt.'; 	$lang['strsequencesetvalbad'] = 'Setzen des Sequenzwertes fehlgeschlagen.'; 	$lang['strnextval'] = 'Wert erhöhen'; 	$lang['strsequencenextval'] = 'Sequenzwert erhöht.'; 	$lang['strsequencenextvalbad'] = 'Erhöhen des Sequenzwertes fehlgeschlagen.';	$lang['strspecifysequencetodrop'] = 'Sie müssen mindestens eine Sequenz angeben, die gelöscht werden soll.';		// Indexes	$lang['strindex'] = 'Index';	$lang['strindexes'] = 'Indizes';	$lang['strindexname'] = 'Indexname';	$lang['strshowallindexes'] = 'Alle Indizes anzeigen';	$lang['strnoindex'] = 'Kein Index gefunden.';	$lang['strnoindexes'] = 'Keine Indizes gefunden.';	$lang['strcreateindex'] = 'Index erstellen';	$lang['strtabname'] = 'Tabellenname';	$lang['strcolumnname'] = 'Spaltenname';	$lang['strindexneedsname'] = 'Sie müssen für den Index einen Namen angeben.';	$lang['strindexneedscols'] = 'Sie müssen eine zulässige Anzahl an Spalten angeben.';	$lang['strindexcreated'] = 'Index erstellt.';	$lang['strindexcreatedbad'] = 'Erstellen des Index fehlgeschlagen.';	$lang['strconfdropindex'] = 'Sind Sie sicher, dass sie den Index "%s" löschen möchten?';	$lang['strindexdropped'] = 'Index gelöscht.';	$lang['strindexdroppedbad'] = 'Löschen des Index fehlgeschlagen.';	$lang['strkeyname'] = 'Schlüsselname';	$lang['struniquekey'] = 'Eindeutiger Schlüssel';	$lang['strprimarykey'] = 'Primärerschlüssel'; 	$lang['strindextype'] = 'Typ des Index';	$lang['strtablecolumnlist'] = 'Spalten in der Tabelle';	$lang['strindexcolumnlist'] = 'Spalten im Index';	$lang['strconfcluster'] = 'Sind Sie sicher, dass Sie "%s" clustern wollen?';	$lang['strclusteredgood'] = 'Clustern abgeschlossen.';	$lang['strclusteredbad'] = 'Clustern fehlgeschlagen.';	// Rules	$lang['strrules'] = 'Regeln';	$lang['strrule'] = 'Regel';	$lang['strshowallrules'] = 'Alle Regeln anzeigen';	$lang['strnorule'] = 'Keine Regel gefunden.';	$lang['strnorules'] = 'Keine Regeln gefunden.';	$lang['strcreaterule'] = 'Regel erstellen';	$lang['strrulename'] = 'Regelname';	$lang['strruleneedsname'] = 'Sie müssen für die Regel einen Namen angeben.';	$lang['strrulecreated'] = 'Regel erstellt.';	$lang['strrulecreatedbad'] = 'Erstellen der Regel fehlgeschlagen.';	$lang['strconfdroprule'] = 'Sind Sie sicher, dass Sie die Regel "%s" in der Tabelle "%s" löschen möchten?';	$lang['strruledropped'] = 'Regel gelöscht.';	$lang['strruledroppedbad'] = 'Löschen der Regel fehlgeschlagen.';	// Constraints	$lang['strconstraint'] = 'Constraint';	$lang['strconstraints'] = 'Constraints';	$lang['strshowallconstraints'] = 'Alle Constraints anzeigen';	$lang['strnoconstraints'] = 'Keine Constraints gefunden.';	$lang['strcreateconstraint'] = 'Constraint erstellen';	$lang['strconstraintcreated'] = 'Constraint erstellt.';	$lang['strconstraintcreatedbad'] = 'Erstellen des Constraints fehlgeschlagen.';	$lang['strconfdropconstraint'] = 'Sind Sie sicher, dass Sie den Constraint "%s" in der Tabelle "%s" löschen möchten?';	$lang['strconstraintdropped'] = 'Constraint gelöscht.';	$lang['strconstraintdroppedbad'] = 'Löschen des Constraints fehlgeschlagen.';	$lang['straddcheck'] = 'Check-Constraint hinzufügen';	$lang['strcheckneedsdefinition'] = 'Ein Check-Constraint braucht eine Definition.';	$lang['strcheckadded'] = 'Check-Constraint hinzugefügt.';	$lang['strcheckaddedbad'] = 'Hinzufügen des Check-Constraints fehlgeschlagen.';	$lang['straddpk'] = 'Primärschlüssel hinzufügen';	$lang['strpkneedscols'] = 'Ein Primärschlüssel benötigt mindestens eine Spalte.';	$lang['strpkadded'] = 'Primärschlüssel hinzugefügt.';	$lang['strpkaddedbad'] = 'Hinzufügen des Primärschlüssels fehlgeschlagen.';	$lang['stradduniq'] = 'Eindeutigen Schlüssel hinzufügen';	$lang['struniqneedscols'] = 'Ein eindeutiger Schlüssel benötigt mindestens eine Spalte.';	$lang['struniqadded'] = 'Eindeutiger Schlüssel hinzugefügt.';	$lang['struniqaddedbad'] = 'Hinzufügen eines eindeutigen Schlüssels fehlgeschlagen.';	$lang['straddfk'] = 'Fremdschlüssel hinzufügen';	$lang['strfkneedscols'] = 'Ein Fremdschlüssel benötigt mindestens eine Spalte.';	$lang['strfkneedstarget'] = 'Ein Fremdschlüssel benötigt eine Zieltabelle.';	$lang['strfkadded'] = 'Fremdschlüssel hinzugefügt.';	$lang['strfkaddedbad'] = 'Hinzufügen eines Fremdschlüssels fehlgeschlagen.';	$lang['strfktarget'] = 'Zieltabelle';	$lang['strfkcolumnlist'] = 'Spalten im Schlüssel';	$lang['strondelete'] = 'ON DELETE';	$lang['stronupdate'] = 'ON UPDATE';	// Functions	$lang['strfunction'] = 'Funktion';	$lang['strfunctions'] = 'Funktionen';	$lang['strshowallfunctions'] = 'Alle Funktionen anzeigen';	$lang['strnofunction'] = 'Keine Funktion gefunden.';	$lang['strnofunctions'] = 'Keine Funktionen gefunden.';	$lang['strcreateplfunction'] = 'SQL/PL-Funktion erstellen';	$lang['strcreateinternalfunction'] = 'Interne Funktion erstellen';	$lang['strcreatecfunction'] = 'C-Funktion erstellen';	$lang['strfunctionname'] = 'Funktionsname';	$lang['strreturns'] = 'Rückgabetyp';	$lang['strproglanguage'] = 'Programmiersprache';	$lang['strfunctionneedsname'] = 'Sie müssen für die Funktion einen Namen angeben.';	$lang['strfunctionneedsdef'] = 'Sie müssen für die Funktion eine Definition angeben.';	$lang['strfunctioncreated'] = 'Funktion erstellt.';	$lang['strfunctioncreatedbad'] = 'Erstellen der Funktion fehlgeschlagen.';	$lang['strconfdropfunction'] = 'Sind Sie sicher, dass sie die Funktion "%s" löschen möchten?';	$lang['strfunctiondropped'] = 'Funktion gelöscht.';	$lang['strfunctiondroppedbad'] = 'Löschen der Funktion fehlgeschlagen.';	$lang['strfunctionupdated'] = 'Funktion geändert.';	$lang['strfunctionupdatedbad'] = 'Ändern der Funktion fehlgeschlagen.';	$lang['strobjectfile'] = 'Objektdatei';	$lang['strlinksymbol'] = 'Link-Symbol';	$lang['strarguments'] = 'Funktionsargumente';	$lang['strargmode'] = 'Richtung';	$lang['strargtype'] = 'Datentyp';	$lang['strargadd'] = 'Weiteres Argument hinzufügen';	$lang['strargremove'] = 'Dieses Argument entfernen';	$lang['strargnoargs'] = 'Diese Funktion kann nur ohne Argumente aufgerufen werden.';	$lang['strargenableargs'] = 'Diese Funktion kann mit Argumenten aufgerufen werden.';	$lang['strargnorowabove'] = 'Oberhalb dieser Spalte muss eine weitere Spalte sein.';	$lang['strargnorowbelow'] = 'Unterhalb dieser Spalte muss eine weitere Spalte sein.';	$lang['strargraise'] = 'Hinaufschieben.';	$lang['strarglower'] = 'Hinunterschieben.';	$lang['strargremoveconfirm'] = 'Sind Sie sicher, dass Sie dieses Argument entfernen wollen? Das kann nicht rückgängig gemacht werden.';	$lang['strfunctioncosting'] = 'Ausführungskosten';	$lang['strresultrows'] = 'Geschätzte Anzahl der Ergebniszeilen';	$lang['strexecutioncost'] = 'Geschätzte Ausführungskosten';	$lang['strspecifyfunctiontodrop'] = 'Sie müssen mindestens eine Funktion angeben, die gelöscht werden soll.';	// Triggers	$lang['strtrigger'] = 'Trigger';	$lang['strtriggers'] = 'Trigger';	$lang['strshowalltriggers'] = 'Alle Trigger anzeigen';	$lang['strnotrigger'] = 'Kein Trigger gefunden.';	$lang['strnotriggers'] = 'Keine Trigger gefunden.';	$lang['strcreatetrigger'] = 'Trigger erstellen';	$lang['strtriggerneedsname'] = 'Sie müssen für den Trigger einen Namen angeben.';	$lang['strtriggerneedsfunc'] = 'Sie müssen für den Trigger eine Funktion angeben.';	$lang['strtriggercreated'] = 'Trigger erstellt.';	$lang['strtriggercreatedbad'] = 'Erstellen des Triggers fehlgeschlagen.';	$lang['strconfdroptrigger'] = 'Sind Sie sicher, dass Sie den Trigger "%s" auf der Tabelle "%s" löschen möchten?';	$lang['strconfenabletrigger'] = 'Sind Sie sicher, dass Sie den Trigger "%s" auf der Tabelle "%s" aktivieren möchten?';	$lang['strconfdisabletrigger'] = 'Sind Sie sicher, dass Sie den Trigger "%s" auf der Tabelle "%s" deaktivieren möchten?';	$lang['strtriggerdropped'] = 'Trigger gelöscht.';	$lang['strtriggerdroppedbad'] = 'Löschen des Triggers fehlgeschlagen.';	$lang['strtriggerenabled'] = 'Trigger aktiviert.';	$lang['strtriggerenabledbad'] = 'Aktivieren des Triggers fehlgeschlagen.';	$lang['strtriggerdisabled'] = 'Trigger deaktiviert.';	$lang['strtriggerdisabledbad'] = 'Deaktivieren des Triggers fehlgeschlagen.';	$lang['strtriggeraltered'] = 'Trigger geändert.';	$lang['strtriggeralteredbad'] = 'Ändern des Triggers fehlgeschlagen.';	$lang['strforeach'] = 'Für alle';	// Types	$lang['strtype'] = 'Datentyp';	$lang['strtypes'] = 'Datentypen';	$lang['strshowalltypes'] = 'Alle Datentypen anzeigen';	$lang['strnotype'] = 'Kein Datentyp gefunden.';	$lang['strnotypes'] = 'Keine Datentypen gefunden.';	$lang['strcreatetype'] = 'Datentyp erstellen';	$lang['strcreatecomptype'] = 'Zusammengesetzten Typ erstellen';	$lang['strcreateenumtype'] = 'Aufzählungstyp erstellen';	$lang['strtypeneedsfield'] = 'Sie müssen mindestens ein Feld angeben.';	$lang['strtypeneedsvalue'] = 'Sie müssen mindestens einen Wert angeben.';	$lang['strtypeneedscols'] = 'Sie müssen eine gültige Anzahl von Spalten angeben.';	$lang['strtypeneedsvals'] = 'Sie müssen eine gültige Anzahl von Werten angeben.';	$lang['strinputfn'] = 'Eingabefunktion';	$lang['stroutputfn'] = 'Ausgabefunktion';	$lang['strpassbyval'] = 'Übergabe "by value"?';	$lang['stralignment'] = 'Alignment';	$lang['strelement'] = 'Element';	$lang['strdelimiter'] = 'Trennzeichen';	$lang['strstorage'] = 'Speicherung';	$lang['strfield'] = 'Spalte';	$lang['strnumfields'] = 'Anzahl Spalten';	$lang['strnumvalues'] = 'Anzahl Werte';	$lang['strtypeneedsname'] = 'Sie müssen einen Namen für den Datentyp angeben.';	$lang['strtypeneedslen'] = 'Sie müssen eine Länge für den Datentyp angeben.';	$lang['strtypecreated'] = 'Datentyp erstellt.';	$lang['strtypecreatedbad'] = 'Erstellen des Datentypen fehlgeschlagen.';	$lang['strconfdroptype'] = 'Sind Sie sicher, dass Sie den Datentyp "%s" löschen möchten?';	$lang['strtypedropped'] = 'Datentyp gelöscht.';	$lang['strtypedroppedbad'] = 'Löschen des Datentyps fehlgeschlagen.';	$lang['strflavor'] = 'Art';	$lang['strbasetype'] = 'Basis-Typ';	$lang['strcompositetype'] = 'Zusammengesetzt';	$lang['strpseudotype'] = 'Pseudo';	$lang['strenum'] = 'Aufzählend';	$lang['strenumvalues'] = 'Wert';	// Schemas	$lang['strschema'] = 'Schema';	$lang['strschemas'] = 'Schemata';	$lang['strshowallschemas'] = 'Alle Schemata anzeigen';	$lang['strnoschema'] = 'Kein Schema gefunden.';	$lang['strnoschemas'] = 'Keine Schemata gefunden.';	$lang['strcreateschema'] = 'Schema erstellen';	$lang['strschemaname'] = 'Name des Schema';	$lang['strschemaneedsname'] = 'Sie müssen für das Schema einen Namen angeben.';	$lang['strschemacreated'] = 'Schema erstellt.';	$lang['strschemacreatedbad'] = 'Erstellen des Schemas fehlgeschlagen.';	$lang['strconfdropschema'] = 'Sind Sie sicher, dass sie das Schema "%s" löschen möchten?';	$lang['strschemadropped'] = 'Schema gelöscht.';	$lang['strschemadroppedbad'] = 'Löschen des Schemas fehlgeschlagen';	$lang['strschemaaltered'] = 'Schema geändert.';	$lang['strschemaalteredbad'] = 'Ändern des Schemas fehlgeschlagen.';	$lang['strsearchpath'] = 'Schemasuchpfad';	$lang['strspecifyschematodrop'] = 'Sie müssen mindestens ein Schema angeben, das gelöscht werden soll.';	// Reports	$lang['strreport'] = 'Bericht';	$lang['strreports'] = 'Berichte';	$lang['strshowallreports'] = 'Alle Berichte anzeigen';	$lang['strnoreports'] = 'Keine Berichte gefunden.';	$lang['strcreatereport'] = 'Bericht erstellen.';	$lang['strreportdropped'] = 'Bericht gelöscht.';	$lang['strreportdroppedbad'] = 'Löschen des Berichtes fehlgeschlagen.';	$lang['strconfdropreport'] = 'Sind Sie sicher, dass Sie den Bericht "%s" löschen wollen?';	$lang['strreportneedsname'] = 'Sie müssen für den Bericht einen Namen angeben.';	$lang['strreportneedsdef'] = 'Sie müssen eine SQL-Abfrage für den Bericht eingeben.';	$lang['strreportcreated'] = 'Bericht gespeichert.';	$lang['strreportcreatedbad'] = 'Speichern des Berichtes fehlgeschlagen.';	// Domains	$lang['strdomain'] = 'Domäne';	$lang['strdomains'] = 'Domänen';	$lang['strshowalldomains'] = 'Alle Domänen anzeigen';	$lang['strnodomains'] = 'Keine Domänen gefunden.';	$lang['strcreatedomain'] = 'Domäne erstellen';	$lang['strdomaindropped'] = 'Domäne gelöscht.';	$lang['strdomaindroppedbad'] = 'Löschen der Domäne fehlgeschlagen.';	$lang['strconfdropdomain'] = 'Sind Sie sicher, dass Sie die Domäne "%s" löschen wollen?';	$lang['strdomainneedsname'] = 'Sie müssen einen Namen für die Domäne angeben.';	$lang['strdomaincreated'] = 'Domäne erstellt.';	$lang['strdomaincreatedbad'] = 'Erstellen der Domäne fehlgeschlagen.';	$lang['strdomainaltered'] = 'Domäne geändert.';	$lang['strdomainalteredbad'] = 'Ändern der Domäne fehlgeschlagen.';		// Operators	$lang['stroperator'] = 'Operator';	$lang['stroperators'] = 'Operatoren';	$lang['strshowalloperators'] = 'Alle Operatoren anzeigen';	$lang['strnooperator'] = 'Kein Operator gefunden.';	$lang['strnooperators'] = 'Keine Operatoren gefunden.';	$lang['strcreateoperator'] = 'Operator erstellen';	$lang['strleftarg'] = 'Typ des linken Arguments';	$lang['strrightarg'] = 'Typ des rechter Arguments';	$lang['strcommutator'] = 'Kommutator';	$lang['strnegator'] = 'Negator';	$lang['strrestrict'] = 'Funktion zur Schätzung der Restriktions-Selektivität';	$lang['strjoin'] = 'Funktion zur Schätzung der Join-Selektivität';	$lang['strhashes'] = 'Unterstützt Hash-Joins';	$lang['strmerges'] = 'Unterstützt Merge-Joins';	$lang['strleftsort'] = 'Kleiner-Operator zum Sortieren der linken Seite';	$lang['strrightsort'] = 'Kleiner-Operator zum Sortieren der rechten Seite';	$lang['strlessthan'] = 'Kleiner-Operator';	$lang['strgreaterthan'] = 'Größer-Operator';	$lang['stroperatorneedsname'] = 'Sie müssen einen Namen für den Operator angeben.';	$lang['stroperatorcreated'] = 'Operator erstellt.';	$lang['stroperatorcreatedbad'] = 'Erstellen des Operators fehlgeschlagen.';	$lang['strconfdropoperator'] = 'Sind Sie sicher, dass Sie den Operator "%s" löschen wollen?';	$lang['stroperatordropped'] = 'Operator gelöscht.';	$lang['stroperatordroppedbad'] = 'Löschen des Operators fehlgeschlagen.';	// Casts	$lang['strcasts'] = 'Typumwandlungen';	$lang['strnocasts'] = 'Keine Typumwandlungen gefunden.';	$lang['strsourcetype'] = 'Ursprungs-Datentyp';	$lang['strtargettype'] = 'Ziel-Datentyp';	$lang['strimplicit'] = 'Implizit';	$lang['strinassignment'] = 'Bei Zuweisungen';	$lang['strbinarycompat'] = '(Binärkompatibel)';		// Conversions	$lang['strconversions'] = 'Konvertierungen';	$lang['strnoconversions'] = 'Keine Konvertierungen gefunden.';	$lang['strsourceencoding'] = 'Ursprungs-Zeichenkodierung';	$lang['strtargetencoding'] = 'Ziel-Zeichenkodierung';		// Languages	$lang['strlanguages'] = 'Programmiersprachen';	$lang['strnolanguages'] = 'Keine Sprachen gefunden.';	$lang['strtrusted'] = 'Vertrauenswürdig';		// Info	$lang['strnoinfo'] = 'Keine Informationen vorhanden.';	$lang['strreferringtables'] = 'Tabellen, die mit Fremdschlüsseln auf diese Tabelle verweisen';	$lang['strparenttables'] = 'Elterntabellen';	$lang['strchildtables'] = 'Kindtabellen';	// Aggregates	$lang['straggregate'] = 'Aggregatsfunktion';	$lang['straggregates'] = 'Aggregatsfunktionen';	$lang['strnoaggregates'] = 'Keine Aggregatsfunktionen gefunden.';	$lang['stralltypes'] = '(Alle Typen)';	$lang['strcreateaggregate'] = 'Aggregatsfunktion erstellen';	$lang['straggrbasetype'] = 'Eingabedatentyp';	$lang['straggrsfunc'] = 'Zustandsübergangsfunktion';	$lang['straggrstype'] = 'Datentyp für den Zustandswert';	$lang['straggrffunc'] = 'Ergebnisfunktion';	$lang['straggrinitcond'] = 'Zustandswert zu Beginn';	$lang['straggrsortop'] = 'Operator für Sortierung';	$lang['strconfdropaggregate'] = 'Sind Sie sicher, dass Sie die Aggregatsfunktion "%s" löschen wollen?';	$lang['straggregatedropped'] = 'Aggregatsfunktion gelöscht.';	$lang['straggregatedroppedbad'] = 'Löschen der Aggregatsfunktion fehlgeschlagen.';	$lang['straggraltered'] = 'Aggregatsfunktion geändert.';	$lang['straggralteredbad'] = 'Ändern der Aggregatsfunktion fehlgeschlagen.';	$lang['straggrneedsname'] = 'Sie müssen einen Namen für die Aggregatsfunktion angeben.';	$lang['straggrneedsbasetype'] = 'Sie müssen den Eingabedatentyp für die Aggregatsfunktion angeben.';	$lang['straggrneedssfunc'] = 'Sie müssen den Namen der Zustandsübergangsfunktion für die Aggregatsfunktion angeben.';	$lang['straggrneedsstype'] = 'Sie müssen den Datentyp für den Zustandswert der Aggregatsfunktion angeben.';	$lang['straggrcreated'] = 'Aggregatsfunktion erstellt.';	$lang['straggrcreatedbad'] = 'Erstellen der Aggregatsfunktion fehlgeschlagen.';	$lang['straggrshowall'] = 'Alle Aggregatsfunktionen anzeigen';	// Operator Classes	$lang['stropclasses'] = 'Operatorklassen';	$lang['strnoopclasses'] = 'Keine Operatorklassen gefunden.';	$lang['straccessmethod'] = 'Zugriffsmethode';	// Stats and performance	$lang['strrowperf'] = 'Zeilen-Performance';	$lang['strioperf'] = 'E/A Performance';	$lang['stridxrowperf'] = 'Index-Zeilen-Performance';	$lang['stridxioperf'] = 'Index-E/A-Performance';	$lang['strpercent'] = '%';	$lang['strsequential'] = 'Sequentiell';	$lang['strscan'] = 'Durchsuchen';	$lang['strread'] = 'Lesen';	$lang['strfetch'] = 'Holen';	$lang['strheap'] = 'Heap';	$lang['strtoast'] = 'TOAST';	$lang['strtoastindex'] = 'TOAST-Index';	$lang['strcache'] = 'Zwischenspeicher';	$lang['strdisk'] = 'Festplatte';	$lang['strrows2'] = 'Zeilen';	// Tablespaces	$lang['strtablespace'] = 'Tablespace';	$lang['strtablespaces'] = 'Tablespaces';	$lang['strshowalltablespaces'] = 'Alle Tablespaces anzeigen';	$lang['strnotablespaces'] = 'Keine Tablespaces gefunden.';	$lang['strcreatetablespace'] = 'Tablespace erstellen';	$lang['strlocation'] = 'Pfad';	$lang['strtablespaceneedsname'] = 'Sie müssen einen Namen für den Tablespace angeben.';	$lang['strtablespaceneedsloc'] = 'Sie müssen ein Verzeichnis angeben, in dem Sie den Tablespace erstellen möchten.';	$lang['strtablespacecreated'] = 'Tablespace erstellt.';	$lang['strtablespacecreatedbad'] = 'Erstellen des Tablespace fehlgeschlagen.';	$lang['strconfdroptablespace'] = 'Sind Sie sicher, dass Sie den Tablespace "%s" löschen wollen?';	$lang['strtablespacedropped'] = 'Tablespace gelöscht.';	$lang['strtablespacedroppedbad'] = 'Löschen des Tablespace fehlgeschlagen.';	$lang['strtablespacealtered'] = 'Tablespace geändert.';	$lang['strtablespacealteredbad'] = 'Ändern des Tablespace fehlgeschlagen.';	// Slony clusters	$lang['strcluster'] = 'Cluster';	$lang['strnoclusters'] = 'Keine Cluster gefunden.';	$lang['strconfdropcluster'] = 'Sind Sie sicher, dass Sie den Cluster "%s" löschen möchten?';	$lang['strclusterdropped'] = 'Cluster gelöscht.';	$lang['strclusterdroppedbad'] = 'Löschen des Clusters fehlgeschlagen.';	$lang['strinitcluster'] = 'Cluster initialisieren';	$lang['strclustercreated'] = 'Cluster initialisiert.';	$lang['strclustercreatedbad'] = 'Initialisierung des Clusters fehlgeschlagen.';	$lang['strclusterneedsname'] = 'Sie müssen einen Namen für den Cluster angeben.';	$lang['strclusterneedsnodeid'] = 'Sie müssen eine ID für den lokalen Cluster-Knoten angeben.';	// Slony nodes	$lang['strnodes'] = 'Cluster-Knoten';	$lang['strnonodes'] = 'Keine Cluster-Knoten gefunden.';	$lang['strcreatenode'] = 'Cluster-Knoten erstellen';	$lang['strid'] = 'ID';	$lang['stractive'] = 'Aktiv';	$lang['strnodecreated'] = 'Cluster-Knoten erstellt.';	$lang['strnodecreatedbad'] = 'Erstellen des Cluster-Knotens fehlgeschlagen.';	$lang['strconfdropnode'] = 'Sind Sie sicher, dass Sie Cluster-Knoten "%s" löschen möchten?';	$lang['strnodedropped'] = 'Cluster-Knoten gelöscht.';	$lang['strnodedroppedbad'] = 'Löschen des Cluster-Knotens fehlgeschlagen.';	$lang['strfailover'] = 'Übernahme';	$lang['strnodefailedover'] = 'Cluster-Knoten übernommen.';	$lang['strnodefailedoverbad'] = 'Übernahme des Cluster-Knotens fehlgeschlagen.';	$lang['strstatus'] = 'Status';		$lang['strhealthy'] = 'Gesund';	$lang['stroutofsync'] = 'Nicht Synchronisiert';	$lang['strunknown'] = 'Unbekannt';		// Slony paths		$lang['strpaths'] = 'Kommunikationspfade';	$lang['strnopaths'] = 'Keine Kommunikationspfade gefunden.';	$lang['strcreatepath'] = 'Kommunikationspfad erstellen';	$lang['strnodename'] = 'Name des Cluster-Knotens';	$lang['strnodeid'] = 'ID des Cluster-Knotens';	$lang['strconninfo'] = 'Connection-String';	$lang['strconnretry'] = 'Wartezeit vor erneutem Verbindungsversuch in Sekunden';	$lang['strpathneedsconninfo'] = 'Sie müssen einen Connection-String für den Kommunikationspfad angeben.';	$lang['strpathneedsconnretry'] = 'Sie müssen die Wartezeit vor einem erneuten Verbindungsversuch angeben.';	$lang['strpathcreated'] = 'Kommunikationspfad erstellt.';	$lang['strpathcreatedbad'] = 'Erstellen des Kommunikationspfades fehlgeschlagen.';	$lang['strconfdroppath'] = 'Sind Sie sicher, dass Sie den Kommunikationspfad "%s" löschen möchten?';	$lang['strpathdropped'] = 'Kommunikationspfad gelöscht.';	$lang['strpathdroppedbad'] = 'Löschen des Kommunikationspfades fehlgeschlagen.';	// Slony listens	$lang['strlistens'] = 'Zuhörer';	$lang['strnolistens'] = 'Keine Zuhörer gefunden.';	$lang['strcreatelisten'] = 'Zuhörer erstellen';	$lang['strlistencreated'] = 'Zuhörer erstellt.';	$lang['strlistencreatedbad'] = 'Erstellen des Zuhörers fehlgeschlagen.';	$lang['strconfdroplisten'] = 'Sind Sie sicher, dass Sie Zuhörer "%s" löschen möchten?';	$lang['strlistendropped'] = 'Zuhörer gelöscht.';	$lang['strlistendroppedbad'] = 'Löschen des Zuhörers fehlgeschlagen.';	// Slony replication sets	$lang['strrepsets'] = 'Replikationsgruppe';	$lang['strnorepsets'] = 'Keine Replikationsgruppen gefunden.';	$lang['strcreaterepset'] = 'Replikationsgruppe erstellen';	$lang['strrepsetcreated'] = 'Replikationsgruppe erstellt.';	$lang['strrepsetcreatedbad'] = 'Erstellen der Replikationsgruppe fehlgeschlagen.';	$lang['strconfdroprepset'] = 'Sind Sie sicher, dass Sie Replikationsgruppe "%s" löschen möchten?';	$lang['strrepsetdropped'] = 'Replikationsgruppe gelöscht.';	$lang['strrepsetdroppedbad'] = 'Löschen der Replikationsgruppe fehlgeschlagen.';	$lang['strmerge'] = 'Vereinigen';	$lang['strmergeinto'] = 'Vereinigen mit';	$lang['strrepsetmerged'] = 'Replikationsgruppen vereinige.';	$lang['strrepsetmergedbad'] = 'Vereinigung der Replikationsgruppen fehlgeschlagen.';	$lang['strmove'] = 'Verschieben';	$lang['strneworigin'] = 'Neuer Usrprung';	$lang['strrepsetmoved'] = 'Replikationsgruppe verschoben.';	$lang['strrepsetmovedbad'] = 'Verschieben der Replikationsgruppe fehlgeschlagen.';	$lang['strnewrepset'] = 'Neue Replikationsgruppe';	$lang['strlock'] = 'Sperren';	$lang['strlocked'] = 'Gesperrt';	$lang['strunlock'] = 'Entsperren';	$lang['strconflockrepset'] = 'Sind Sie sicher, dass Sie Replikationsgruppe "%s" sperren möchten?';	$lang['strrepsetlocked'] = 'Replikationsgruppe gesperrt.';	$lang['strrepsetlockedbad'] = 'Sperren der Replikationsgruppe fehlgeschlagen.';	$lang['strconfunlockrepset'] = 'Sind Sie sicher, dass Sie Replikationsgruppe "%s" entsperren möchten?';	$lang['strrepsetunlocked'] = 'Replikationsgruppe entsperrt.';	$lang['strrepsetunlockedbad'] = 'Entsperren der Replikationsgruppe fehlgeschlagen.';	$lang['stronlyonnode'] = 'Nur auf dem Cluster-Knoten';	$lang['strddlscript'] = 'DDL-Script';	$lang['strscriptneedsbody'] = 'Sie müssen ein Script angeben, das auf allen Cluster-Knoten ausgeführt werden soll.';	$lang['strscriptexecuted'] = 'DDL-Script für die Replikationsgruppe ausgeführt.';	$lang['strscriptexecutedbad'] = 'Ausführung des DDL-Scripts für die Replikationsgruppe fehlgeschlagen.';	$lang['strtabletriggerstoretain'] = 'Die folgenden Trigger werden von Slony NICHT deaktiviert:';	// Slony tables in replication sets	$lang['straddtable'] = 'Tabelle hinzufügen';	$lang['strtableneedsuniquekey'] = 'Damit eine Tabelle hinzugefügt werden kann, muss sie einen Primärschlüssel oder einen eindeutigen Schlüssel besitzen.';	$lang['strtableaddedtorepset'] = 'Tabelle zu Replikationsgruppe hinzugefügt.';	$lang['strtableaddedtorepsetbad'] = 'Hinzufügen der Tabelle zur Replikationsgruppe fehlgeschlagen.';	$lang['strconfremovetablefromrepset'] = 'Sind Sie sicher, dass Sie die Tabelle "%s" aus der Replikationsgruppe "%s" entfernen möchten?';	$lang['strtableremovedfromrepset'] = 'Tabelle aus Replikationsgruppe entfernt.';	$lang['strtableremovedfromrepsetbad'] = 'Entfernen der Tabelle aus der Replikationsgruppe fehlgeschlagen.';	// Slony sequences in replication sets	$lang['straddsequence'] = 'Sequenz hinzufügen';	$lang['strsequenceaddedtorepset'] = 'Sequenz zu Replikationsgruppe hinzugefügt.';	$lang['strsequenceaddedtorepsetbad'] = 'Hinzufügen der Sequenz zur Replikationsgruppe fehlgeschlagen.';	$lang['strconfremovesequencefromrepset'] = 'Sind Sie sicher, dass Sie die Sequenz "%s" aus der Replikationsgruppe "%s" entfernen möchten?';	$lang['strsequenceremovedfromrepset'] = 'Sequenz aus Replikationsgruppe entfernt.';	$lang['strsequenceremovedfromrepsetbad'] = 'Entfernen der Sequenz aus der Replikationsgruppe fehlgeschlagen.';	// Slony subscriptions	$lang['strsubscriptions'] = 'Abonnements';	$lang['strnosubscriptions'] = 'Keine Abonnements gefunden.';	// Miscellaneous	$lang['strtopbar'] = '%s läuft auf %s:%s -- Sie sind als "%s" angemeldet, %s';	$lang['strtimefmt'] = 'D, j. n. Y, G:i';	$lang['strhelp'] = 'Hilfe';	$lang['strhelpicon'] = '?';	$lang['strhelppagebrowser'] = 'Browser für Hilfeseiten';	$lang['strselecthelppage'] = 'Hilfeseite auswählen';	$lang['strinvalidhelppage'] = 'Ungültige Hilfeseite.';	$lang['strlogintitle'] = 'Bei %s anmelden';	$lang['strlogoutmsg'] = 'Von %s abgemendet';	$lang['strloading'] = 'Lade...';	$lang['strerrorloading'] = 'Fehler beim Laden';	$lang['strclicktoreload'] = 'Klicken Sie zum Neuladen';	// Autovacuum	$lang['strautovacuum'] = 'Autovacuum';	$lang['strturnedon'] = 'Eingeschaltet';	$lang['strturnedoff'] = 'Ausgeschaltet';	$lang['strenabled'] = 'Aktiviert';	$lang['strvacuumbasethreshold'] = 'Autovacuum-Schwellwert';	$lang['strvacuumscalefactor'] = 'Autovacuum-Skalierungsfaktor';	$lang['stranalybasethreshold'] = 'Analyze-Schwellwert';	$lang['stranalyzescalefactor'] = 'Analyze-Skalierungsfaktor';	$lang['strvacuumcostdelay'] = 'Pause nach Erreichen des Autovacuum-Kostenlimits';	$lang['strvacuumcostlimit'] = 'Autovacuum-Kostenlimits';	// Table-level Locks	$lang['strlocks'] = 'Sperren';	$lang['strtransaction'] = 'Transaktions-ID';	$lang['strvirtualtransaction'] = 'Virtuelle Transaktions-ID';	$lang['strprocessid'] = 'Prozess-ID';	$lang['strmode'] = 'Art der Sperre';	$lang['strislockheld'] = 'Sperre gewährt?';	// Prepared transactions	$lang['strpreparedxacts'] = 'Vorbereitete verteilte Transaktionen';	$lang['strxactid'] = 'Transaktions-ID';	$lang['strgid'] = 'Globale ID';		// Fulltext search	$lang['strfulltext'] = 'Volltextsuche';	$lang['strftsconfig'] = 'Volltextsuch-Konfiguration';	$lang['strftsconfigs'] = 'Konfigurationen';	$lang['strftscreateconfig'] = 'Volltextsuch-Konfiguration erstellen';	$lang['strftscreatedict'] = 'Wörterbuch erstellen';	$lang['strftscreatedicttemplate'] = 'Wörterbuch-Blaupause erstellen';	$lang['strftscreateparser'] = 'Parser erstellen';	$lang['strftsnoconfigs'] = 'Keine Volltextsuch-Konfigurationen gefunden.';	$lang['strftsconfigdropped'] = 'Volltextsuch-Konfiguration gelöscht.';	$lang['strftsconfigdroppedbad'] = 'Löschen der Volltextsuch-Konfiguration fehlgeschlagen.';	$lang['strconfdropftsconfig'] = 'Sind Sie sicher, dass Sie die Volltextsuch-Konfiguration "%s" löschen möchten?';	$lang['strconfdropftsdict'] = 'Sind Sie sicher, dass Sie das Wörterbuch "%s" löschen möchten?';	$lang['strconfdropftsmapping'] = 'Sind Sie sicher, dass Sie die Zuordnung "%s" der Volltextsuch-Konfiguration "%s" löschen möchten?';	$lang['strftstemplate'] = 'Blaupause';	$lang['strftsparser'] = 'Parser';	$lang['strftsconfigneedsname'] = 'Sie müssen für die Volltextsuch-Konfiguration einen Namen angeben.';	$lang['strftsconfigcreated'] = 'Volltextsuch-Konfiguration erstellt.';	$lang['strftsconfigcreatedbad'] = 'Erstellen der Volltextsuch-Konfiguration fehlgeschlagen.';	$lang['strftsmapping'] = 'Zuordnung';	$lang['strftsdicts'] = 'Wörterbücher';	$lang['strftsdict'] = 'Wörterbuch';	$lang['strftsemptymap'] = 'Leere Zuordnung für Volltextsuch-Konfiguration.';	$lang['strftswithmap'] = 'Mit Zuordnung';	$lang['strftsmakedefault'] = 'Als Standardwert für die angegebene Spracheinstellung festlegen';	$lang['strftsconfigaltered'] = 'Volltextsuch-Konfiguration geändert.';	$lang['strftsconfigalteredbad'] = 'Ändern der Volltextsuch-Konfiguration fehlgeschlagen.';	$lang['strftsconfigmap'] = 'Zuordnung für Volltextsuch-Konfiguration';	$lang['strftsparsers'] = 'Parsers für Volltextsuch-Konfiguration';	$lang['strftsnoparsers'] = 'Keine Parsers für Volltextsuch-Konfiguration vorhanden';	$lang['strftsnodicts'] = 'Keine Wörterbücher für die Volltextsuche vorhanden.';	$lang['strftsdictcreated'] = 'Wörterbuch für die Volltextsuche erstellt.';	$lang['strftsdictcreatedbad'] = 'Erstellen des Wörterbuches für die Volltextsuche fehlgeschlagen.';	$lang['strftslexize'] = 'Funktion zum Zerlegen in Lexeme';	$lang['strftsinit'] = 'Initialisierungsfunktion';	$lang['strftsoptionsvalues'] = 'Optionen und Werte';	$lang['strftsdictneedsname'] = 'Sie müssen für das Volltextsuch-Wörterbuch einen Namen angeben.';	$lang['strftsdictdropped'] = 'Wörterbuches für die Volltextsuche gelöscht.';	$lang['strftsdictdroppedbad'] = 'Löschen des Wörterbuches für die Volltextsuche fehlgeschlagen.';	$lang['strftsdictaltered'] = 'Wörterbuches für die Volltextsuche geändert.';	$lang['strftsdictalteredbad'] = 'Ändern des Wörterbuches für die Volltextsuche fehlgeschlagen.';	$lang['strftsaddmapping'] = 'Neue Zuordnung hinzufügen';	$lang['strftsspecifymappingtodrop'] = 'Sie müssen mindestens eine Zuordnung angeben, die gelöscht werden soll.';	$lang['strftsspecifyconfigtoalter'] = 'Sie müssen eine Volltextsuch-Konfiguration angeben, die geändert werden soll';	$lang['strftsmappingdropped'] = 'Volltextsuch-Zuordnung gelöscht.';	$lang['strftsmappingdroppedbad'] = 'Löschen der Volltextsuch-Zuordnung fehlgeschlagen.';	$lang['strftsnodictionaries'] = 'Keine Wörterbücher gefunden.';	$lang['strftsmappingaltered'] = 'Volltextsuch-Zuordnung geändert.';	$lang['strftsmappingalteredbad'] = 'Ändern der Volltextsuch-Zuordnung fehlgeschlagen.';	$lang['strftsmappingadded'] = 'Volltextsuch-Zuordnung hinzugefügt.';	$lang['strftsmappingaddedbad'] = 'Hinzufügen der Volltextsuch-Zuordnung fehlgeschlagen.';	$lang['strftstabconfigs'] = 'Volltextsuch-Konfigurationen';	$lang['strftstabdicts'] = 'Wörterbücher';	$lang['strftstabparsers'] = 'Parser';?>
<?php	/**	 * Alternative SQL editing window	 *	 * $Id: history.php,v 1.3 2008/01/10 19:37:07 xzilla Exp $	 */	// Include application functions	include_once('./libraries/lib.inc.php');	$action = (isset($_REQUEST['action'])) ? $_REQUEST['action'] : '';	function doDefault() {		global $misc, $lang;		$onchange = "onchange=\"location.href='history.php?server=' + encodeURI(server.options[server.selectedIndex].value) + '&amp;database=' + encodeURI(database.options[database.selectedIndex].value) + '&amp;'\"";		$misc->printHeader($lang['strhistory']);				// Bring to the front always		echo "<body onload=\"window.focus();\">\n";			echo "<form action=\"history.php\" method=\"post\">\n";		$misc->printConnection($onchange);		echo "</form><br />";			if (!isset($_REQUEST['database'])) {			echo "<p>{$lang['strnodatabaseselected']}</p>\n";			return;		}					if (isset($_SESSION['history'][$_REQUEST['server']][$_REQUEST['database']])) {			include_once('classes/ArrayRecordSet.php');						   			$history = new ArrayRecordSet($_SESSION['history'][$_REQUEST['server']][$_REQUEST['database']]);						$columns = array(				'query' => array(					'title' => $lang['strsql'],					'field' => field('query'),				),				'paginate' => array(					'title' => $lang['strpaginate'],					'field' => field('paginate'),					'type' => 'yesno',				),				'actions' => array(					'title' => $lang['stractions'],				),			);			$actions = array(				'run' => array(					'title' => $lang['strexecute'],					'url'   => "sql.php?{$misc->href}&amp;nohistory=t&amp;",					'vars'  => array('query' => 'query', 'paginate' => 'paginate'),					'target' => 'detail',				),				'remove' => array(					'title' => $lang['strdelete'],					'url'   => "history.php?{$misc->href}&amp;action=confdelhistory&amp;",					'vars'  => array('queryid' => 'queryid'),				),			);			$misc->printTable($history, $columns, $actions, $lang['strnohistory']);		}		else echo "<p>{$lang['strnohistory']}</p>\n";		echo "<ul class=\"navlink\">\n";		if (isset($_SESSION['history'][$_REQUEST['server']][$_REQUEST['database']]) 				&& count($_SESSION['history'][$_REQUEST['server']][$_REQUEST['database']]))			echo "\t<li><a href=\"history.php?action=confclearhistory&amp;{$misc->href}\">{$lang['strclearhistory']}</a></li>\n";		echo "\t<li><a href=\"history.php?action=history&amp;{$misc->href}\">{$lang['strrefresh']}</a></li>\n</ul>\n";	}	function doDelHistory($qid, $confirm) {		global $misc, $lang;		if ($confirm) {			$misc->printHeader($lang['strhistory']);        		// Bring to the front always	        	echo "<body onload=\"window.focus();\">\n";						echo "<h3>{$lang['strdelhistory']}</h3>\n";			echo "<p>{$lang['strconfdelhistory']}</p>\n";			echo "<pre>", htmlentities($_SESSION['history'][$_REQUEST['server']][$_REQUEST['database']][$qid]['query']), "</pre>";			echo "<form action=\"history.php\" method=\"post\">\n";			echo "<input type=\"hidden\" name=\"action\" value=\"delhistory\" />\n";			echo "<input type=\"hidden\" name=\"queryid\" value=\"$qid\" />\n";			echo $misc->form;			echo "<input type=\"submit\" name=\"yes\" value=\"{$lang['stryes']}\" />\n";			echo "<input type=\"submit\" name=\"no\" value=\"{$lang['strno']}\" />\n";			echo "</form>\n";		}		else			unset($_SESSION['history'][$_REQUEST['server']][$_REQUEST['database']][$qid]);	}       	function doClearHistory($confirm) {		global $misc, $lang;		if ($confirm) {			$misc->printHeader($lang['strhistory']);        		// Bring to the front always	        	echo "<body onload=\"window.focus();\">\n";			echo "<h3>{$lang['strclearhistory']}</h3>\n";			echo "<p>{$lang['strconfclearhistory']}</p>\n";			echo "<form action=\"history.php\" method=\"post\">\n";			echo "<input type=\"hidden\" name=\"action\" value=\"clearhistory\" />\n";			echo $misc->form;			echo "<input type=\"submit\" name=\"yes\" value=\"{$lang['stryes']}\" />\n";			echo "<input type=\"submit\" name=\"no\" value=\"{$lang['strno']}\" />\n";			echo "</form>\n";		}		else			unset($_SESSION['history'][$_REQUEST['server']][$_REQUEST['database']]);	}																																									switch ($action) {		case 'confdelhistory':			doDelHistory($_REQUEST['queryid'], true);			break;		case 'delhistory':			if (isset($_POST['yes'])) doDelHistory($_REQUEST['queryid'], false);			doDefault();			break;		case 'confclearhistory':			doClearHistory(true);			break;		case 'clearhistory':			if (isset($_POST['yes'])) doClearHistory(false);			doDefault();			break;		default:			doDefault();	}																						// Set the name of the window	$misc->setWindowName('history');	$misc->printFooter();	?>
<?php	/**	 * Manage opclasss in a database	 *	 * $Id: opclasses.php,v 1.10 2007/08/31 18:30:11 ioguix Exp $	 */	// Include application functions	include_once('./libraries/lib.inc.php');		$action = (isset($_REQUEST['action'])) ? $_REQUEST['action'] : '';	if (!isset($msg)) $msg = '';	/**	 * Show default list of opclasss in the database	 */	function doDefault($msg = '') {		global $data, $conf, $misc;		global $lang;				$misc->printTrail('schema');		$misc->printTabs('schema','opclasses');		$misc->printMsg($msg);				$opclasses = $data->getOpClasses();				$columns = array(			'accessmethod' => array(				'title' => $lang['straccessmethod'],				'field' => field('amname'),			),			'opclass' => array(				'title' => $lang['strname'],				'field' => field('opcname'),			),			'type' => array(				'title' => $lang['strtype'],				'field' => field('opcintype'),			),			'default' => array(				'title' => $lang['strdefault'],				'field' => field('opcdefault'),				'type'  => 'yesno',			),			'comment' => array(				'title' => $lang['strcomment'],				'field' => field('opccomment'),			),		);				$actions = array();				$misc->printTable($opclasses, $columns, $actions, $lang['strnoopclasses']);	}		/**	 * Generate XML for the browser tree.	 */	function doTree() {		global $misc, $data;				$opclasses = $data->getOpClasses();				// OpClass prototype: "op_class/access_method"		$proto = concat(field('opcname'),'/',field('amname'));				$attrs = array(			'text'   => $proto,			'icon'   => 'OperatorClass',			'toolTip'=> field('opccomment'),		);				$misc->printTreeXML($opclasses, $attrs);		exit;	}		if ($action == 'tree') doTree();		$misc->printHeader($lang['stropclasses']);	$misc->printBody();	switch ($action) {		default:			doDefault();			break;	}		$misc->printFooter();?>
<?php/** * Class to represent a database connection * * $Id: Connection.php,v 1.15 2008/02/18 21:42:47 ioguix Exp $ */include_once('./classes/database/ADODB_base.php');class Connection {	var $conn;		// The backend platform.  Set to UNKNOWN by default.	var $platform = 'UNKNOWN';		/**	 * Creates a new connection.  Will actually make a database connection.	 * @param $fetchMode Defaults to associative.  Override for different behaviour	 */	function Connection($host, $port, $sslmode, $user, $password, $database, $fetchMode = ADODB_FETCH_ASSOC) {		$this->conn = &ADONewConnection('postgres7');		$this->conn->setFetchMode($fetchMode);		// Ignore host if null		if ($host === null || $host == '')			if ($port !== null && $port != '')				$pghost = ':'.$port;			else				$pghost = '';		else			$pghost = "{$host}:{$port}";		// Add sslmode to $pghost as needed                if (($sslmode == 'disable') || ($sslmode == 'allow') || ($sslmode == 'prefer') || ($sslmode == 'require')) {                        $pghost .= ':'.$sslmode;                } elseif ($sslmode == 'legacy') {                        $pghost .= ' requiressl=1';                }		$this->conn->connect($pghost, $user, $password, $database);	}	/**	 * Gets the name of the correct database driver to use.  As a side effect,	 * sets the platform.	 * @param (return-by-ref) $description A description of the database and version	 * @return The class name of the driver eg. Postgres84	 * @return null if version is < 7.4	 * @return -3 Database-specific failure	 */	function getDriver(&$description) {		// If we're on a recent enough PHP 5, and against PostgreSQL 7.4 or		// higher, we don't need to query for the version.  This gives a great		// speed up.						if (function_exists('pg_version')) {			$v = pg_version($this->conn->_connectionID);			if (isset($v['server'])) $version = $v['server'];					}				// If we didn't manage to get the version without a query, query...		if (!isset($version)) {			$adodb = new ADODB_base($this->conn);				$sql = "SELECT VERSION() AS version";			$field = $adodb->selectField($sql, 'version');				// Check the platform, if it's mingw, set it			if (preg_match('/ mingw /i', $field))				$this->platform = 'MINGW';				$params = explode(' ', $field);			if (!isset($params[1])) return -3;				$version = $params[1]; // eg. 8.4.4		}				$description = "PostgreSQL {$version}";		// Detect version and choose appropriate database driver		switch (substr($version,0,3)) {			case '8.4': return 'Postgres'; break;			case '8.3': return 'Postgres83'; break;			case '8.2': return 'Postgres82'; break;			case '8.1': return 'Postgres81'; break;			case '8.0':			case '7.5': return 'Postgres80'; break;			case '7.4': return 'Postgres74'; break;		}		/* All <7.4 versions are not supported */		// if major version is 7 or less and wasn't catch in the		// switch/case block, we have an unsupported version.		if ((int)substr($version, 0, 1) < 8)			return null;		// If unknown version, then default to latest driver		return 'Postgres';	}	/** 	 * Get the last error in the connection	 * @return Error string	 */	function getLastError() {				if (function_exists('pg_errormessage'))			return pg_errormessage($this->conn->_connectionID);		else			return pg_last_error($this->conn->_connectionID);	}}?>
<?php	/**	 * Manage privileges in a database	 *	 * $Id: privileges.php,v 1.45 2007/09/13 13:41:01 ioguix Exp $	 */	// Include application functions	include_once('./libraries/lib.inc.php');		$action = (isset($_REQUEST['action'])) ? $_REQUEST['action'] : '';	if (!isset($msg)) $msg = '';	/**	 * Grant permissions on an object to a user	 * @param $confirm To show entry screen	 * @param $mode 'grant' or 'revoke'	 * @param $msg (optional) A message to show	 */	function doAlter($confirm, $mode, $msg = '') {		global $data, $misc;		global $lang;		if (!isset($_REQUEST['username'])) $_REQUEST['username'] = array();		if (!isset($_REQUEST['groupname'])) $_REQUEST['groupname'] = array();		if (!isset($_REQUEST['privilege'])) $_REQUEST['privilege'] = array();			if ($confirm) {			// Get users from the database			$users = $data->getUsers();			// Get groups from the database			$groups = $data->getGroups();					$misc->printTrail($_REQUEST['subject']);						switch ($mode) {				case 'grant':					$misc->printTitle($lang['strgrant'],'pg.privilege.grant');					break;				case 'revoke':					$misc->printTitle($lang['strrevoke'],'pg.privilege.revoke');					break;			}			$misc->printMsg($msg);						echo "<form action=\"privileges.php\" method=\"post\">\n";			echo "<table>\n";			echo "<tr><th class=\"data left\">{$lang['strusers']}</th>\n";			echo "<td class=\"data1\"><select name=\"username[]\" multiple=\"multiple\" size=\"", min(6, $users->recordCount()), "\">\n";			while (!$users->EOF) {				$uname = htmlspecialchars($users->fields['usename']);				echo "<option value=\"{$uname}\"",					in_array($users->fields['usename'], $_REQUEST['username']) ? ' selected="selected"' : '', ">{$uname}</option>\n";				$users->moveNext();			}			echo "</select></td></tr>\n";			echo "<tr><th class=\"data left\">{$lang['strgroups']}</th>\n";			echo "<td class=\"data1\">\n";			echo "<input type=\"checkbox\" id=\"public\" name=\"public\"", (isset($_REQUEST['public']) ? ' checked="checked"' : ''), " /><label for=\"public\">PUBLIC</label>\n";			// Only show groups if there are groups!			if ($groups->recordCount() > 0) {				echo "<br /><select name=\"groupname[]\" multiple=\"multiple\" size=\"", min(6, $groups->recordCount()), "\">\n";				while (!$groups->EOF) {					$gname = htmlspecialchars($groups->fields['groname']);					echo "<option value=\"{$gname}\"",						in_array($groups->fields['groname'], $_REQUEST['groupname']) ? ' selected="selected"' : '', ">{$gname}</option>\n";					$groups->moveNext();				}				echo "</select>\n";			}			echo "</td></tr>\n";			echo "<tr><th class=\"data left required\">{$lang['strprivileges']}</th>\n";			echo "<td class=\"data1\">\n";			foreach ($data->privlist[$_REQUEST['subject']] as $v) {				$v = htmlspecialchars($v);				echo "<input type=\"checkbox\" id=\"privilege[$v]\" name=\"privilege[$v]\"", 							isset($_REQUEST['privilege'][$v]) ? ' checked="checked"' : '', " /><label for=\"privilege[$v]\">{$v}</label><br />\n";			}			echo "</td></tr>\n";			// Grant option			if ($data->hasGrantOption()) {				echo "<tr><th class=\"data left\">{$lang['stroptions']}</th>\n";				echo "<td class=\"data1\">\n";				if ($mode == 'grant') {					echo "<input type=\"checkbox\" id=\"grantoption\" name=\"grantoption\"", 								isset($_REQUEST['grantoption']) ? ' checked="checked"' : '', " /><label for=\"grantoption\">GRANT OPTION</label>\n";				}				elseif ($mode == 'revoke') {					echo "<input type=\"checkbox\" id=\"grantoption\" name=\"grantoption\"", 								isset($_REQUEST['grantoption']) ? ' checked="checked"' : '', " /><label for=\"grantoption\">GRANT OPTION FOR</label><br />\n";					echo "<input type=\"checkbox\" id=\"cascade\" name=\"cascade\"", 								isset($_REQUEST['cascade']) ? ' checked="checked"' : '', " /><label for=\"cascade\">CASCADE</label><br />\n";				}				echo "</td></tr>\n";			}			echo "</table>\n";			echo "<p><input type=\"hidden\" name=\"action\" value=\"save\" />\n";			echo "<input type=\"hidden\" name=\"mode\" value=\"", htmlspecialchars($mode), "\" />\n";			echo "<input type=\"hidden\" name=\"subject\" value=\"", htmlspecialchars($_REQUEST['subject']), "\" />\n";			if (isset($_REQUEST[$_REQUEST['subject'].'_oid']))				echo "<input type=\"hidden\" name=\"", htmlspecialchars($_REQUEST['subject'].'_oid'),					"\" value=\"", htmlspecialchars($_REQUEST[$_REQUEST['subject'].'_oid']), "\" />\n";			echo "<input type=\"hidden\" name=\"", htmlspecialchars($_REQUEST['subject']),				"\" value=\"", htmlspecialchars($_REQUEST[$_REQUEST['subject']]), "\" />\n";			if ($_REQUEST['subject'] == 'column')				echo "<input type=\"hidden\" name=\"table\" value=\"",					htmlspecialchars($_REQUEST['table']), "\" />\n";			echo $misc->form;			if ($mode == 'grant')				echo "<input type=\"submit\" name=\"grant\" value=\"{$lang['strgrant']}\" />\n";			elseif ($mode == 'revoke')				echo "<input type=\"submit\" name=\"revoke\" value=\"{$lang['strrevoke']}\" />\n";			echo "<input type=\"submit\" name=\"cancel\" value=\"{$lang['strcancel']}\" /></p>";			echo "</form>\n";		}		else {			// Determine whether object should be ref'd by name or oid.			if (isset($_REQUEST[$_REQUEST['subject'].'_oid']))				$object = $_REQUEST[$_REQUEST['subject'].'_oid'];			else				$object = $_REQUEST[$_REQUEST['subject']];			if (isset($_REQUEST['table'])) $table = $_REQUEST['table'];			else $table = null;			$status = $data->setPrivileges(($mode == 'grant') ? 'GRANT' : 'REVOKE', $_REQUEST['subject'], $object,				isset($_REQUEST['public']), $_REQUEST['username'], $_REQUEST['groupname'], array_keys($_REQUEST['privilege']),				isset($_REQUEST['grantoption']), isset($_REQUEST['cascade']), $table);			if ($status == 0)				doDefault($lang['strgranted']);			elseif ($status == -3 || $status == -4)				doAlter(true, $_REQUEST['mode'], $lang['strgrantbad']);			else				doAlter(true, $_REQUEST['mode'], $lang['strgrantfailed']);		}	}	/**	 * Show permissions on a database, namespace, relation, language or function	 */	function doDefault($msg = '') {		global $data, $misc, $database;		global $lang;		$misc->printTrail($_REQUEST['subject']);				# @@@FIXME: This switch is just a temporary solution,		# need a better way, maybe every type of object should		# have a tab bar???		switch ($_REQUEST['subject']) {			case 'server':			case 'database':			case 'schema':			case 'table':			case 'column':			case 'view':				$misc->printTabs($_REQUEST['subject'], 'privileges');				break;			default:				$misc->printTitle($lang['strprivileges'], 'pg.privilege');		}		$misc->printMsg($msg);		// Determine whether object should be ref'd by name or oid.		if (isset($_REQUEST[$_REQUEST['subject'].'_oid']))			$object = $_REQUEST[$_REQUEST['subject'].'_oid'];		else			$object = $_REQUEST[$_REQUEST['subject']];				// Get the privileges on the object, given its type		if ($_REQUEST['subject'] == 'column')			$privileges = $data->getPrivileges($object, 'column', $_REQUEST['table']);		else			$privileges = $data->getPrivileges($object, $_REQUEST['subject']);		if (sizeof($privileges) > 0) {			echo "<table>\n";			if ($data->hasRoles())				echo "<tr><th class=\"data\">{$lang['strrole']}</th>";			else				echo "<tr><th class=\"data\">{$lang['strtype']}</th><th class=\"data\">{$lang['struser']}/{$lang['strgroup']}</th>";			foreach ($data->privlist[$_REQUEST['subject']] as $v2) {				// Skip over ALL PRIVILEGES				if ($v2 == 'ALL PRIVILEGES') continue;				echo "<th class=\"data\">{$v2}</th>\n";			}			if ($data->hasGrantOption()) {				echo "<th class=\"data\">{$lang['strgrantor']}</th>";			}			echo "</tr>\n";			// Loop over privileges, outputting them			$i = 0;			foreach ($privileges as $v) {				$id = (($i % 2) == 0 ? '1' : '2');				echo "<tr class=\"data{$id}\">\n";				if (!$data->hasRoles())					echo "<td>", $misc->printVal($v[0]), "</td>\n";				echo "<td>", $misc->printVal($v[1]), "</td>\n";				foreach ($data->privlist[$_REQUEST['subject']] as $v2) {					// Skip over ALL PRIVILEGES					if ($v2 == 'ALL PRIVILEGES') continue;					echo "<td>";					if (in_array($v2, $v[2]))						echo $lang['stryes'];					else						echo $lang['strno'];					// If we have grant option for this, end mark					if ($data->hasGrantOption() && in_array($v2, $v[4])) echo $lang['strasterisk'];					echo "</td>\n";				}				if ($data->hasGrantOption()) {					echo "<td>", $misc->printVal($v[3]), "</td>\n";				}				echo "</tr>\n";				$i++;			}			echo "</table>";		}		else {			echo "<p>{$lang['strnoprivileges']}</p>\n";		}				// Links for granting to a user or group		switch ($_REQUEST['subject']) {			case 'table':			case 'view':			case 'sequence':			case 'function':			case 'tablespace':				$allurl = "{$_REQUEST['subject']}s.php";				$alltxt = $lang["strshowall{$_REQUEST['subject']}s"];				break;			case 'schema':				$allurl = "database.php";				$alltxt = $lang["strshowallschemas"];				break;			case 'database':				$allurl = 'all_db.php';				$alltxt = $lang['strshowalldatabases'];				break;		}				$subject = htmlspecialchars(urlencode($_REQUEST['subject']));		$object = htmlspecialchars(urlencode($_REQUEST[$_REQUEST['subject']]));				if ($_REQUEST['subject'] == 'function') {			$objectoid = $_REQUEST[$_REQUEST['subject'].'_oid'];			$alterurl = "privileges.php?action=alter&amp;{$misc->href}&amp;{$subject}={$object}&amp;{$subject}_oid={$objectoid}&amp;subject={$subject}&amp;mode=";		}		else if ($_REQUEST['subject'] == 'column') {			$alterurl = "privileges.php?action=alter&amp;{$misc->href}&amp;{$subject}={$object}"				."&amp;subject={$subject}&amp;table=". urlencode($_REQUEST['table']) ."&amp;mode=";		}		else {			$alterurl = "privileges.php?action=alter&amp;{$misc->href}&amp;{$subject}={$object}&amp;subject={$subject}&amp;mode=";		}			echo "<ul class=\"navlink\">\n\t<li><a href=\"{$alterurl}grant\">{$lang['strgrant']}</a></li>\n";		echo "\t<li><a href=\"{$alterurl}revoke\">{$lang['strrevoke']}</a></li>\n";		if (isset($allurl))			echo "\t<li><a href=\"{$allurl}?{$misc->href}\">{$alltxt}</a></li>\n";				echo "</ul>\n";	}	$misc->printHeader($lang['strprivileges']);	$misc->printBody();	switch ($action) {		case 'save':			if (isset($_REQUEST['cancel'])) doDefault();			else doAlter(false, $_REQUEST['mode']);			break;		case 'alter':			doAlter(true, $_REQUEST['mode']);			break;		default:			doDefault();			break;	}		$misc->printFooter();	?>
<?php	/**	 * Manage servers	 *	 * $Id: servers.php,v 1.12 2008/02/18 22:20:26 ioguix Exp $	 */	// Include application functions	$_no_db_connection = true;	include_once('./libraries/lib.inc.php');		$action = (isset($_REQUEST['action'])) ? $_REQUEST['action'] : '';	if (!isset($msg)) $msg = '';		function doLogout() {		global $misc, $lang, $_reload_browser;				$server_info = $misc->getServerInfo($_REQUEST['logoutServer']);		$misc->setServerInfo(null, null, $_REQUEST['logoutServer']);		unset($_SESSION['sharedUsername'], $_SESSION['sharedPassword']);		doDefault(sprintf($lang['strlogoutmsg'], $server_info['desc']));				$_reload_browser = true;	}	function doDefault($msg = '') {		global $conf, $misc;		global $lang;				$misc->printTabs('root','servers');		$misc->printMsg($msg);				$group = isset($_GET['group']) ? $_GET['group'] : false;				$servers = $misc->getServers(true, $group);				function svPre(&$rowdata, $actions) {			$actions['logout']['disable'] = empty($rowdata->fields['username']);			return $actions;		}				$columns = array(			'server' => array(				'title' => $lang['strserver'],				'field' => field('desc'),				'url'   => "redirect.php?subject=server&amp;",				'vars'  => array('server' => 'id'),			),			'host' => array(				'title' => $lang['strhost'],				'field' => field('host'),			),			'port' => array(				'title' => $lang['strport'],				'field' => field('port'),			),			'username' => array(				'title' => $lang['strusername'],				'field' => field('username'),			),			'actions' => array(				'title' => $lang['stractions'],			),		);				$actions = array(			'logout' => array(				'title' => $lang['strlogout'],				'url'   => "servers.php?action=logout&amp;",				'vars'  => array('logoutServer' => 'id'),			),		);				if (($group !== false) and isset($conf['srv_groups'][$group])) {			printf("<h2>{$lang['strgroupservers']}</h2>", htmlentities($conf['srv_groups'][$group]['desc']));			$actions['logout']['url'] .= "group=" . htmlentities($group) . "&amp;";		}				$misc->printTable($servers, $columns, $actions, $lang['strnoobjects'], 'svPre');				if (isset($conf['srv_groups'])) {			echo "<br /><ul class=\"navlink\">\n";			echo "\t<li><a href=\"servers.php\">{$lang['strallservers']}</a></li>\n";			foreach ($conf['srv_groups'] as $id => $grp) {				echo "\t<li><a href=\"servers.php?group={$id}\">", htmlentities($grp['desc']), "</a></li>\n";			}			echo "</ul>\n";					}	}		function doTree($group = false) {		global $misc;				$servers = $misc->getServers(true, $group);				$reqvars = $misc->getRequestVars('server');				$attrs = array(			'text'   => field('desc'),						// Show different icons for logged in/out			'icon'   => ifempty(field('username'), 'DisconnectedServer', 'Server'),						'toolTip'=> field('id'),						'action' => url('redirect.php',							$reqvars,							array('server' => field('id'))						),						// Only create a branch url if the user has			// logged into the server.			'branch' => ifempty(field('username'), false,							url('all_db.php',								$reqvars,								array(									'action' => 'tree',									'server' => field('id')								)							)						),		);				$misc->printTreeXML($servers, $attrs);		exit;	}		function doGroupsTree() {		global $misc;				$groups = $misc->getServersGroups();		function escape($fields) {			global $lang;			if ($fields['id'] === 'all') {				return $lang['strallservers'];			}			else return value(field('desc'), $fields, 'xml');		}		$attrs = array(			'text'   => noEscape(callback('escape')),			'icon'   => 'Servers',						'action' => url('servers.php',				array(					'group' => field('id')				)			),			'branch' => url('servers.php',				array(					'action' => 'tree',					'group' => field('id')				)			)		);				$misc->printTreeXML($groups, $attrs);		exit;	}		if ($action == 'tree') {		if (isset($_GET['group'])) doTree($_GET['group']);		else doTree(false);	}	if ($action == 'groupstree') doGroupsTree();		$misc->printHeader($lang['strservers']);	$misc->printBody();	$misc->printTrail('root');	switch ($action) {		case 'logout':			doLogout();			break;		default:			doDefault($msg);			break;	}	$misc->printFooter();?>
<?php	/**	 * Class to hold various commonly used functions	 *	 * $Id: Misc.php,v 1.171 2008/03/17 21:35:48 ioguix Exp $	 */	class Misc {		// Tracking string to include in HREFs		var $href;		// Tracking string to include in forms		var $form;		/* Constructor */		function Misc() {		}		/**		 * Checks if dumps are properly set up		 * @param $all (optional) True to check pg_dumpall, false to just check pg_dump		 * @return True, dumps are set up, false otherwise		 */		function isDumpEnabled($all = false) {			$info = $this->getServerInfo();			return !empty($info[$all ? 'pg_dumpall_path' : 'pg_dump_path']);		}		/**		 * Sets the href tracking variable		 */		function setHREF() {			$this->href = $this->getHREF();		}		/**		 * Get a href query string, excluding objects below the given object type (inclusive)		 */		function getHREF($exclude_from = null) {			$href = '';			if (isset($_REQUEST['server']) && $exclude_from != 'server') {				$href .= 'server=' . urlencode($_REQUEST['server']);				if (isset($_REQUEST['database']) && $exclude_from != 'database') {					$href .= '&amp;database=' . urlencode($_REQUEST['database']);					if (isset($_REQUEST['schema']) && $exclude_from != 'schema') {						$href .= '&amp;schema=' . urlencode($_REQUEST['schema']);					}				}			}			return $href;		}		/**		 * Sets the form tracking variable		 */		function setForm() {			$this->form = '';			if (isset($_REQUEST['server'])) {				$this->form .= "<input type=\"hidden\" name=\"server\" value=\"" . htmlspecialchars($_REQUEST['server']) . "\" />\n";				if (isset($_REQUEST['database'])) {					$this->form .= "<input type=\"hidden\" name=\"database\" value=\"" . htmlspecialchars($_REQUEST['database']) . "\" />\n";					if (isset($_REQUEST['schema'])) {						$this->form .= "<input type=\"hidden\" name=\"schema\" value=\"" . htmlspecialchars($_REQUEST['schema']) . "\" />\n";					}				}			}		}		/**		 * Render a value into HTML using formatting rules specified		 * by a type name and parameters.		 *		 * @param $str The string to change		 *		 * @param $type Field type (optional), this may be an internal PostgreSQL type, or:		 *			yesno    - same as bool, but renders as 'Yes' or 'No'.		 *			pre      - render in a <pre> block.		 *			nbsp     - replace all spaces with &nbsp;'s		 *			verbatim - render exactly as supplied, no escaping what-so-ever.		 *			callback - render using a callback function supplied in the 'function' param.		 *		 * @param $params Type parameters (optional), known parameters:		 *			null     - string to display if $str is null, or set to TRUE to use a default 'NULL' string,		 *			           otherwise nothing is rendered.		 *			clip     - if true, clip the value to a fixed length, and append an ellipsis...		 *			cliplen  - the maximum length when clip is enabled (defaults to $conf['max_chars'])		 *			ellipsis - the string to append to a clipped value (defaults to $lang['strellipsis'])		 *			tag      - an HTML element name to surround the value.		 *			class    - a class attribute to apply to any surrounding HTML element.		 *			align    - an align attribute ('left','right','center' etc.)		 *			true     - (type='bool') the representation of true.		 *			false    - (type='bool') the representation of false.		 *			function - (type='callback') a function name, accepts args ($str, $params) and returns a rendering.		 *			lineno   - prefix each line with a line number.		 *			map      - an associative array.		 *		 * @return The HTML rendered value		 */		function printVal($str, $type = null, $params = array()) {			global $lang, $conf, $data;			// Shortcircuit for a NULL value			if (is_null($str))				return isset($params['null'])						? ($params['null'] === true ? '<i>NULL</i>' : $params['null'])						: '';			if (isset($params['map']) && isset($params['map'][$str])) $str = $params['map'][$str];			// Clip the value if the 'clip' parameter is true.			if (isset($params['clip']) && $params['clip'] === true) {				$maxlen = isset($params['cliplen']) && is_integer($params['cliplen']) ? $params['cliplen'] : $conf['max_chars'];				$ellipsis = isset($params['ellipsis']) ? $params['ellipsis'] : $lang['strellipsis'];				if (strlen($str) > $maxlen) {					$str = substr($str, 0, $maxlen-1) . $ellipsis;				}			}			$out = '';			switch ($type) {				case 'int2':				case 'int4':				case 'int8':				case 'float4':				case 'float8':				case 'money':				case 'numeric':				case 'oid':				case 'xid':				case 'cid':				case 'tid':					$align = 'right';					$out = nl2br(htmlspecialchars($str));					break;				case 'yesno':					if (!isset($params['true'])) $params['true'] = $lang['stryes'];					if (!isset($params['false'])) $params['false'] = $lang['strno'];					// No break - fall through to boolean case.				case 'bool':				case 'boolean':					if (is_bool($str)) $str = $str ? 't' : 'f';					switch ($str) {						case 't':							$out = (isset($params['true']) ? $params['true'] : $lang['strtrue']);							$align = 'center';							break;						case 'f':							$out = (isset($params['false']) ? $params['false'] : $lang['strfalse']);							$align = 'center';							break;						default:							$out = htmlspecialchars($str);					}					break;				case 'bytea':					$tag = 'div';					$class = 'pre';					$out = $data->escapeBytea($str);					break;				case 'errormsg':					$tag = 'pre';					$class = 'error';					$out = htmlspecialchars($str);					break;				case 'pre':					$tag = 'pre';					$out = htmlspecialchars($str);					break;				case 'prenoescape':					$tag = 'pre';					$out = $str;					break;				case 'nbsp':					$out = nl2br(str_replace(' ', '&nbsp;', htmlspecialchars($str)));					break;				case 'verbatim':					$out = $str;					break;				case 'callback':					$out = $params['function']($str, $params);					break;				case 'prettysize':					if ($str == -1) 						$out = $lang['strnoaccess'];					else					{						$limit = 10 * 1024;						$mult = 1;						if ($str < $limit * $mult)							$out = $str.' '.$lang['strbytes'];						else						{							$mult *= 1024;							if ($str < $limit * $mult)								$out = floor(($str + $mult / 2) / $mult).' '.$lang['strkb'];							else							{								$mult *= 1024;								if ($str < $limit * $mult)									$out = floor(($str + $mult / 2) / $mult).' '.$lang['strmb'];								else								{									$mult *= 1024;									if ($str < $limit * $mult)										$out = floor(($str + $mult / 2) / $mult).' '.$lang['strgb'];									else									{										$mult *= 1024;										if ($str < $limit * $mult)											$out = floor(($str + $mult / 2) / $mult).' '.$lang['strtb'];									}								}							}						}					}					break;				case 'slonystatus':					switch ($str) {					case 'insync':						$out = $lang['strhealthy'];						break;					case 'outofsync':						$out = $lang['stroutofsync'];						break;					default:						$out = $lang['strunknown'];					}					break;				default:					// If the string contains at least one instance of >1 space in a row, a tab					// character, a space at the start of a line, or a space at the start of					// the whole string then render within a pre-formatted element (<pre>).					if (preg_match('/(^ |  |\t|\n )/m', $str)) {						$tag = 'pre';						$class = 'data';						$out = htmlspecialchars($str);					} else {						$out = nl2br(htmlspecialchars($str));					}			}			if (isset($params['class'])) $class = $params['class'];			if (isset($params['align'])) $align = $params['align'];			if (!isset($tag) && (isset($class) || isset($align))) $tag = 'div';			if (isset($tag)) {				$alignattr = isset($align) ? " style=\"text-align: {$align}\"" : '';				$classattr = isset($class) ? " class=\"{$class}\"" : '';				$out = "<{$tag}{$alignattr}{$classattr}>{$out}</{$tag}>";			}			// Add line numbers if 'lineno' param is true			if (isset($params['lineno']) && $params['lineno'] === true) {				$lines = explode("\n", $str);				$num = count($lines);				if ($num > 0) {					$temp = "<table>\n<tr><td class=\"{$class}\" style=\"vertical-align: top; padding-right: 10px;\"><pre class=\"{$class}\">";					for ($i = 1; $i <= $num; $i++) {						$temp .= $i . "\n";					}					$temp .= "</pre></td><td class=\"{$class}\" style=\"vertical-align: top;\">{$out}</td></tr></table>\n";					$out = $temp;				}				unset($lines);			}			return $out;		}		/**		 * A function to recursively strip slashes.  Used to		 * enforce magic_quotes_gpc being off.		 * @param &var The variable to strip		 */		function stripVar(&$var) {			if (is_array($var)) {				foreach($var as $k => $v) {					$this->stripVar($var[$k]);					/* magic_quotes_gpc escape keys as well ...*/					if (is_string($k)) {						$ek = stripslashes($k);						if ($ek !== $k) {							$var[$ek] = $var[$k];							unset($var[$k]);						}					}				}			}			else				$var = stripslashes($var);		}		/**		 * Print out the page heading and help link		 * @param $title Title, already escaped		 * @param $help (optional) The identifier for the help link		 */		function printTitle($title, $help = null) {			global $data, $lang;			echo "<h2>";			$this->printHelp($title, $help);			echo "</h2>\n";		}		/**		 * Print out a message		 * @param $msg The message to print		 */		function printMsg($msg) {			if ($msg != '') echo "<p class=\"message\">{$msg}</p>\n";		}		/**		 * Creates a database accessor		 */		function getDatabaseAccessor($database, $server_id = null) {			global $lang, $conf, $misc, $_connection;			$server_info = $this->getServerInfo($server_id);			// Perform extra security checks if this config option is set			if ($conf['extra_login_security']) {				// Disallowed logins if extra_login_security is enabled.				// These must be lowercase.				$bad_usernames = array('pgsql', 'postgres', 'root', 'administrator');				$username = strtolower($server_info['username']);				if ($server_info['password'] == '' || in_array($username, $bad_usernames)) {					unset($_SESSION['webdbLogin'][$_REQUEST['server']]);					$msg = $lang['strlogindisallowed'];					include('./login.php');					exit;				}			}			// Create the connection object and make the connection			$_connection = new Connection(				$server_info['host'],				$server_info['port'],				$server_info['sslmode'],				$server_info['username'],				$server_info['password'],				$database			);			// Get the name of the database driver we need to use.			// The description of the server is returned in $platform.			$_type = $_connection->getDriver($platform);			if ($_type === null) {				printf($lang['strpostgresqlversionnotsupported'], $postgresqlMinVer);				exit;			}			$this->setServerInfo('platform', $platform, $server_id);			$this->setServerInfo('pgVersion', $_connection->conn->pgVersion, $server_id);			// Create a database wrapper class for easy manipulation of the			// connection.			include_once('./classes/database/' . $_type . '.php');			$data = new $_type($_connection->conn);			$data->platform = $_connection->platform;			return $data;		}		/**		 * Prints the page header.  If global variable $_no_output is		 * set then no header is drawn.		 * @param $title The title of the page		 * @param $script script tag		 */		function printHeader($title = '', $script = null, $frameset = false) {			global $appName, $lang, $_no_output, $conf;			if (!isset($_no_output)) {				header("Content-Type: text/html; charset=" . $lang['appcharset']);				// Send XHTML headers, or regular XHTML strict headers				echo "<?xml version=\"1.0\" encoding=\"", htmlspecialchars($lang['appcharset']), "\"?>\n";				if ($frameset == true) {					echo "<!DOCTYPE html PUBLIC \"-//W3C//DTD XHTML 1.0 Frameset//EN\" \"http://www.w3.org/TR/xhtml1/DTD/xhtml1-frameset.dtd\">\n";				} else if (isset($conf['use_xhtml_strict']) && $conf['use_xhtml_strict']) {					echo "<!DOCTYPE html PUBLIC \"-//W3C//DTD XHTML 1.0 Strict//EN\" \"http://www.w3.org/TR/xhtml1/DTD/xhtml1-Strict.dtd\">\n";				} else {					echo "<!DOCTYPE html PUBLIC \"-//W3C//DTD XHTML 1.0 Transitional//EN\" \"http://www.w3.org/TR/xhtml1/DTD/xhtml1-transitional.dtd\">\n";				}				echo "<html xmlns=\"http://www.w3.org/1999/xhtml\" xml:lang=\"{$lang['applocale']}\" lang=\"{$lang['applocale']}\"";				if (strcasecmp($lang['applangdir'], 'ltr') != 0) echo " dir=\"", htmlspecialchars($lang['applangdir']), "\"";				echo ">\n";				echo "<head>\n";				echo "<meta http-equiv=\"Content-Type\" content=\"text/html; charset={$lang['appcharset']}\" />\n";				// Theme				echo "<link rel=\"stylesheet\" href=\"themes/{$conf['theme']}/global.css\" type=\"text/css\" />\n";				echo "<link rel=\"shortcut icon\" href=\"images/themes/{$conf['theme']}/Favicon.ico\" type=\"image/vnd.microsoft.icon\" />\n";				echo "<link rel=\"icon\" type=\"image/png\" href=\"images/themes/{$conf['theme']}/Introduction.png\" />\n";				echo "<title>", htmlspecialchars($appName);				if ($title != '') echo " - {$title}";				echo "</title>\n";				if ($script) echo "{$script}\n";				echo "</head>\n";			}		}		/**		 * Prints the page footer		 * @param $doBody True to output body tag, false otherwise		 */		function printFooter($doBody = true) {			global $_reload_browser, $_reload_drop_database;			global $lang, $_no_bottom_link;			if ($doBody) {				if (isset($_reload_browser)) $this->printReload(false);				elseif (isset($_reload_drop_database)) $this->printReload(true);				if (!isset($_no_bottom_link)) 					echo "<a href=\"#\" class=\"bottom_link\">".$lang['strgotoppage']."</a>";				echo "</body>\n";			}			echo "</html>\n";		}		/**		 * Prints the page body.		 * @param $doBody True to output body tag, false otherwise		 * @param $bodyClass - name of body class		 */		function printBody($bodyClass = '', $doBody = true ) {			global $_no_output;			if (!isset($_no_output)) {				if ($doBody) {					$bodyClass = htmlspecialchars($bodyClass);					echo "<body", ($bodyClass == '' ? '' : " class=\"{$bodyClass}\"");					echo ">\n";				}			}		}		/**		 * Outputs JavaScript code that will reload the browser		 * @param $database True if dropping a database, false otherwise		 */		function printReload($database) {			echo "<script type=\"text/javascript\">\n";			if ($database)				echo "\tparent.frames.browser.location.href=\"browser.php\";\n";			else				echo "\tparent.frames.browser.location.reload();\n";			echo "</script>\n";		}		/**		 * Display navigation tabs		 * @param $tabs An associative array of tabs definitions, see printNav() for an example.		 * @param $activetab The name of the tab to be highlighted.		 */		function printTabs($tabs, $activetab) {			global $misc, $conf, $data, $lang;			if (is_string($tabs)) {				$_SESSION['webdbLastTab'][$tabs] = $activetab;				$tabs = $this->getNavTabs($tabs);			}			echo "<table class=\"tabs\"><tr>\n";			#echo "<div class=\"tabs\">\n";			# FIXME: don't count hidden tabs			$width = (int)(100 / count($tabs)).'%';			foreach ($tabs as $tab_id => $tab) {				$active = ($tab_id == $activetab) ? ' active' : '';				if (!isset($tab['hide']) || $tab['hide'] !== true) {					$tablink = "<a" . $this->printActionUrl($tab, $_REQUEST, 'href') . ">";					if (isset($tab['icon']) && $icon = $this->icon($tab['icon']))						$tablink .= "<span class=\"icon\"><img src=\"{$icon}\" alt=\"{$tab['title']}\" /></span>";					$tablink .= "<span class=\"label\">{$tab['title']}</span></a>";					echo "<td style=\"width: {$width}\" class=\"tab{$active}\">";					#echo "<span class=\"tab{$active}\" style=\"white-space:nowrap;\">";					if (isset($tab['help']))						$this->printHelp($tablink, $tab['help']);					else						echo $tablink;					echo "</td>\n";					#echo "</span>\n";				}			}			echo "</tr></table>\n";			#echo "</div>\n";		}		/**		 * Retrieve the tab info for a specific tab bar.		 * @param $section The name of the tab bar.		 */		function getNavTabs($section) {			global $data, $lang, $conf, $slony;			$hide_advanced = ($conf['show_advanced'] === false);			switch ($section) {				case 'root':					return array (						'intro' => array (							'title' => $lang['strintroduction'],							'url'   => "intro.php",							'icon'  => 'Introduction',						),						'servers' => array (							'title' => $lang['strservers'],							'url'   => "servers.php",							'icon'  => 'Servers',						),					);				case 'server':				case 'report':					$server_info = $this->getServerInfo();					$hide_users = !$data->isSuperUser($server_info['username']);					$tmp = array (						'databases' => array (							'title' => $lang['strdatabases'],							'url'   => 'all_db.php',							'urlvars' => array('subject' => 'server'),							'help'  => 'pg.database',							'icon'  => 'Databases',						)					);					if ($data->hasRoles()) {						$tmp = array_merge($tmp, array(							'roles' => array (								'title' => $lang['strroles'],								'url'   => 'roles.php',								'urlvars' => array('subject' => 'server'),								'hide'  => $hide_users,								'help'  => 'pg.role',								'icon'  => 'Roles',							)						));					}					else {						$tmp = array_merge($tmp, array(							'users' => array (								'title' => $lang['strusers'],								'url'   => 'users.php',								'urlvars' => array('subject' => 'server'),								'hide'  => $hide_users,								'help'  => 'pg.user',								'icon'  => 'Users',							),							'groups' => array (								'title' => $lang['strgroups'],								'url'   => 'groups.php',								'urlvars' => array('subject' => 'server'),								'hide'  => $hide_users,								'help'  => 'pg.group',								'icon'  => 'UserGroups',							)						));					}					$tmp = array_merge($tmp, array(						'account' => array (							'title' => $lang['straccount'],							'url'   => $data->hasRoles() ? 'roles.php' : 'users.php',							'urlvars' => array('subject' => 'server', 'action' => 'account'),							'hide'  => !$hide_users,							'help'  => 'pg.role',							'icon'  => 'User',						),						'tablespaces' => array (							'title' => $lang['strtablespaces'],							'url'   => 'tablespaces.php',							'urlvars' => array('subject' => 'server'),							'hide'  => (!$data->hasTablespaces()),							'help'  => 'pg.tablespace',							'icon'  => 'Tablespaces',						),						'export' => array (							'title' => $lang['strexport'],							'url'   => 'all_db.php',							'urlvars' => array('subject' => 'server', 'action' => 'export'),							'hide'  => (!$this->isDumpEnabled()),							'icon'  => 'Export',						),						'reports' => array (							'title' => $lang['strreports'],							'url'   => 'reports.php',							'urlvars' => array('subject' => 'server'),							'hide' => !$conf['show_reports'],							'icon' => 'Reports',						),					));					return $tmp;					break;				case 'database':					$tabs = array (						'schemas' => array (							'title' => $lang['strschemas'],							'url'   => 'schemas.php',							'urlvars' => array('subject' => 'database'),							'help'  => 'pg.schema',							'icon'  => 'Schemas',						),						'sql' => array (							'title' => $lang['strsql'],							'url'   => 'database.php',							'urlvars' => array('subject' => 'database', 'action' => 'sql', 'new' => 1),							'help'  => 'pg.sql',							'tree'  => false,							'icon'  => 'SqlEditor'						),						'find' => array (							'title' => $lang['strfind'],							'url'   => 'database.php',							'urlvars' => array('subject' => 'database', 'action' => 'find'),							'tree'  => false,							'icon'  => 'Search'						),						'variables' => array (							'title' => $lang['strvariables'],							'url'   => 'database.php',							'urlvars' => array('subject' => 'database', 'action' => 'variables'),							'help'  => 'pg.variable',							'tree'  => false,							'icon'  => 'Variables',						),						'processes' => array (							'title' => $lang['strprocesses'],							'url'   => 'database.php',							'urlvars' => array('subject' => 'database', 'action' => 'processes'),							'help'  => 'pg.process',							'tree'  => false,							'icon'  => 'Processes',						),						'locks' => array (							'title' => $lang['strlocks'],							'url'   => 'database.php',							'urlvars' => array('subject' => 'database', 'action' => 'locks'),							'help'  => 'pg.locks',							'tree'  => false,							'icon'  => 'Key',						),						'admin' => array (							'title' => $lang['stradmin'],							'url'   => 'database.php',							'urlvars' => array('subject' => 'database', 'action' => 'admin'),							'tree'  => false,							'icon'  => 'Admin',						),						'privileges' => array (							'title' => $lang['strprivileges'],							'url'   => 'privileges.php',							'urlvars' => array('subject' => 'database'),							'hide'  => (!isset($data->privlist['database'])),							'help'  => 'pg.privilege',							'tree'  => false,							'icon'  => 'Privileges',						),						'languages' => array (							'title' => $lang['strlanguages'],							'url'   => 'languages.php',							'urlvars' => array('subject' => 'database'),							'hide'  => $hide_advanced,							'help'  => 'pg.language',							'icon'  => 'Languages',						),						'casts' => array (							'title' => $lang['strcasts'],							'url'   => 'casts.php',							'urlvars' => array('subject' => 'database'),							'hide'  => ($hide_advanced),							'help'  => 'pg.cast',							'icon'  => 'Casts',						),						'slony' => array (							'title' => 'Slony',							'url'   => 'plugin_slony.php',							'urlvars' => array('subject' => 'database', 'action' => 'clusters_properties'),							'hide'  => !isset($slony),							'help'  => '',							'icon'  => 'Replication',						),						'export' => array (							'title' => $lang['strexport'],							'url'   => 'database.php',							'urlvars' => array('subject' => 'database', 'action' => 'export'),							'hide'  => (!$this->isDumpEnabled()),							'tree'  => false,							'icon'  => 'Export',						),					);					return $tabs;				case 'schema':					$tabs = array (						'tables' => array (							'title' => $lang['strtables'],							'url'   => 'tables.php',							'urlvars' => array('subject' => 'schema'),							'help'  => 'pg.table',							'icon'  => 'Tables',						),						'views' => array (							'title' => $lang['strviews'],							'url'   => 'views.php',							'urlvars' => array('subject' => 'schema'),							'help'  => 'pg.view',							'icon'  => 'Views',						),						'sequences' => array (							'title' => $lang['strsequences'],							'url'   => 'sequences.php',							'urlvars' => array('subject' => 'schema'),							'help'  => 'pg.sequence',							'icon'  => 'Sequences',						),						'functions' => array (							'title' => $lang['strfunctions'],							'url'   => 'functions.php',							'urlvars' => array('subject' => 'schema'),							'help'  => 'pg.function',							'icon'  => 'Functions',						),						'fulltext' => array (							'title' => $lang['strfulltext'],							'url'   => 'fulltext.php',							'urlvars' => array('subject' => 'schema'),							'help'  => 'pg.fts',							'tree'  => true,							'icon'  => 'Fts',						),						'domains' => array (							'title' => $lang['strdomains'],							'url'   => 'domains.php',							'urlvars' => array('subject' => 'schema'),							'help'  => 'pg.domain',							'icon'  => 'Domains',						),						'aggregates' => array (							'title' => $lang['straggregates'],							'url'   => 'aggregates.php',							'urlvars' => array('subject' => 'schema'),							'hide'  => $hide_advanced,							'help'  => 'pg.aggregate',							'icon'  => 'Aggregates',						),						'types' => array (							'title' => $lang['strtypes'],							'url'   => 'types.php',							'urlvars' => array('subject' => 'schema'),							'hide'  => $hide_advanced,							'help'  => 'pg.type',							'icon'  => 'Types',						),						'operators' => array (							'title' => $lang['stroperators'],							'url'   => 'operators.php',							'urlvars' => array('subject' => 'schema'),							'hide'  => $hide_advanced,							'help'  => 'pg.operator',							'icon'  => 'Operators',						),						'opclasses' => array (							'title' => $lang['stropclasses'],							'url'   => 'opclasses.php',							'urlvars' => array('subject' => 'schema'),							'hide'  => $hide_advanced,							'help'  => 'pg.opclass',							'icon'  => 'OperatorClasses',						),						'conversions' => array (							'title' => $lang['strconversions'],							'url'   => 'conversions.php',							'urlvars' => array('subject' => 'schema'),							'hide'  => $hide_advanced,							'help'  => 'pg.conversion',							'icon'  => 'Conversions',						),						'privileges' => array (							'title' => $lang['strprivileges'],							'url'   => 'privileges.php',							'urlvars' => array('subject' => 'schema'),							'help'  => 'pg.privilege',							'tree'  => false,							'icon'  => 'Privileges',						),						'export' => array (							'title' => $lang['strexport'],							'url'   => 'schemas.php',							'urlvars' => array('subject' => 'schema', 'action' => 'export'),							'hide'  => (!$this->isDumpEnabled()),							'tree'  => false,							'icon'  => 'Export',						),					);					if (!$data->hasFTS()) unset($tabs['fulltext']);					return $tabs;				case 'table':					return array (						'columns' => array (							'title' => $lang['strcolumns'],							'url'   => 'tblproperties.php',							'urlvars' => array('subject' => 'table', 'table' => field('table')),							'icon'  => 'Columns',							'branch'=> true,						),						'indexes' => array (							'title' => $lang['strindexes'],							'url'   => 'indexes.php',							'urlvars' => array('subject' => 'table', 'table' => field('table')),							'help'  => 'pg.index',							'icon'  => 'Indexes',							'branch'=> true,						),						'constraints' => array (							'title' => $lang['strconstraints'],							'url'   => 'constraints.php',							'urlvars' => array('subject' => 'table', 'table' => field('table')),							'help'  => 'pg.constraint',							'icon'  => 'Constraints',							'branch'=> true,						),						'triggers' => array (							'title' => $lang['strtriggers'],							'url'   => 'triggers.php',							'urlvars' => array('subject' => 'table', 'table' => field('table')),							'help'  => 'pg.trigger',							'icon'  => 'Triggers',							'branch'=> true,						),						'rules' => array (							'title' => $lang['strrules'],							'url'   => 'rules.php',							'urlvars' => array('subject' => 'table', 'table' => field('table')),							'help'  => 'pg.rule',							'icon'  => 'Rules',							'branch'=> true,						),						'admin' => array (							'title' => $lang['stradmin'],							'url'   => 'tables.php',							'urlvars' => array('subject' => 'table', 'table' => field('table'), 'action' => 'admin'),							'icon'  => 'Admin',						),						'info' => array (							'title' => $lang['strinfo'],							'url'   => 'info.php',							'urlvars' => array('subject' => 'table', 'table' => field('table')),							'icon'  => 'Statistics',						),						'privileges' => array (							'title' => $lang['strprivileges'],							'url'   => 'privileges.php',							'urlvars' => array('subject' => 'table', 'table' => field('table')),							'help'  => 'pg.privilege',							'icon'  => 'Privileges',						),						'import' => array (							'title' => $lang['strimport'],							'url'   => 'tblproperties.php',							'urlvars' => array('subject' => 'table', 'table' => field('table'), 'action' => 'import'),							'icon'  => 'Import',							'hide'	=> false,						),						'export' => array (							'title' => $lang['strexport'],							'url'   => 'tblproperties.php',							'urlvars' => array('subject' => 'table', 'table' => field('table'), 'action' => 'export'),							'icon'  => 'Export',							'hide'	=> false,						),					);				case 'view':					return array (						'columns' => array (							'title' => $lang['strcolumns'],							'url'   => 'viewproperties.php',							'urlvars' => array('subject' => 'view', 'view' => field('view')),							'icon'  => 'Columns',							'branch'=> true,						),						'definition' => array (							'title' => $lang['strdefinition'],							'url'   => 'viewproperties.php',							'urlvars' => array('subject' => 'view', 'view' => field('view'), 'action' => 'definition'),							'icon'  => 'Definition'						),						'rules' => array (							'title' => $lang['strrules'],							'url'   => 'rules.php',							'urlvars' => array('subject' => 'view', 'view' => field('view')),							'help'  => 'pg.rule',							'icon'  => 'Rules',							'branch'=> true,						),						'privileges' => array (							'title' => $lang['strprivileges'],							'url'   => 'privileges.php',							'urlvars' => array('subject' => 'view', 'view' => field('view')),							'help'  => 'pg.privilege',							'icon'  => 'Privileges',						),						'export' => array (							'title' => $lang['strexport'],							'url'   => 'viewproperties.php',							'urlvars' => array('subject' => 'view', 'view' => field('view'), 'action' => 'export'),							'icon'  => 'Export',							'hide'	=> false,						),					);				case 'function':					return array (						'definition' => array (							'title' => $lang['strdefinition'],							'url'   => 'functions.php',							'urlvars' => array(									'subject' => 'function',									'function' => field('function'),									'function_oid' => field('function_oid'),									'action' => 'properties',								),							'icon'  => 'Definition',						),						'privileges' => array (							'title' => $lang['strprivileges'],							'url'   => 'privileges.php',							'urlvars' => array(									'subject' => 'function',									'function' => field('function'),									'function_oid' => field('function_oid'),								),							'icon'  => 'Privileges',						),					);				case 'aggregate':					return array (						'definition' => array (							'title' => $lang['strdefinition'],							'url'   => 'aggregates.php',							'urlvars' => array(									'subject' => 'aggregate',									'aggrname' => field('aggrname'),									'aggrtype' => field('aggrtype'),									'action' => 'properties',								),							'icon'  => 'Definition',						),					);				case 'role':					return array (						'definition' => array (							'title' => $lang['strdefinition'],							'url'   => 'roles.php',							'urlvars' => array(									'subject' => 'role',									'rolename' => field('rolename'),									'action' => 'properties',								),							'icon'  => 'Definition',						),					);				case 'popup':					return array (						'sql' => array (							'title' => $lang['strsql'],							'url'   => 'sqledit.php',							'urlvars' => array('subject' => 'schema', 'action' => 'sql'),							'help'  => 'pg.sql',							'icon'  => 'SqlEditor',						),						'find' => array (							'title' => $lang['strfind'],							'url'   => 'sqledit.php',							'urlvars' => array('subject' => 'schema', 'action' => 'find'),							'icon'  => 'Search',						),					);				case 'slony_cluster':					return array (						'properties' => array (							'title' => $lang['strproperties'],							'url'   => 'plugin_slony.php',							'urlvars' => array(									'subject' => 'slony_cluster',									'action' => 'cluster_properties',									'slony_cluster' => field('slony_cluster')								),							'help'  => '',							'tree'  => false,							'icon'  => 'Cluster',						),						'nodes' => array (							'title' => $lang['strnodes'],							'url'   => 'plugin_slony.php',							'urlvars' => array(									'subject' => 'slony_cluster',									'action' => 'nodes_properties',									'slony_cluster' => field('slony_cluster')								),							'branch' => 'nodes',							'help'  => '',							'icon'  => 'Nodes',						),						'sets' => array (							'title' => $lang['strrepsets'],							'url'   => 'plugin_slony.php',							'urlvars' => array(								'subject' => 'slony_cluster',								'action' => 'sets_properties',								'slony_cluster' => field('slony_cluster')							),							'branch' => 'sets',							'help'  => '',							'icon'  => 'ReplicationSets',						),					);				case 'column':					return array(						'properties' => array (							'title'		=> $lang['strcolprop'],							'url'		=> 'colproperties.php',							'urlvars'	=> array(								'subject' => 'column',								'table' => field('table'),								'column' => field('column')							),							'icon'		=> 'Column'						),						'privileges' => array (							'title' => $lang['strprivileges'],							'url'   => 'privileges.php',							'urlvars' => array(								'subject' => 'column',								'table' => field('table'),								'column' => field('column')							),							'help'  => 'pg.privilege',							'icon'  => 'Privileges',						)					);                case 'fulltext':                    return array (                        'ftsconfigs' => array (                            'title' => $lang['strftstabconfigs'],                            'url'   => 'fulltext.php',                            'urlvars' => array('subject' => 'schema'),                            'hide'  => !$data->hasFTS(),                            'help'  => 'pg.ftscfg',                            'tree'  => true,                            'icon'  => 'FtsCfg',                        ),                        'ftsdicts' => array (                            'title' => $lang['strftstabdicts'],                            'url'   => 'fulltext.php',                            'urlvars' => array('subject' => 'schema', 'action' => 'viewdicts'),                            'hide'  => !$data->hasFTS(),                            'help'  => 'pg.ftsdict',                            'tree'  => true,                            'icon'  => 'FtsDict',                        ),                        'ftsparsers' => array (                            'title' => $lang['strftstabparsers'],                            'url'   => 'fulltext.php',                            'urlvars' => array('subject' => 'schema', 'action' => 'viewparsers'),                            'hide'  => !$data->hasFTS(),                            'help'  => 'pg.ftsparser',                            'tree'  => true,                            'icon'  => 'FtsParser',                        ),                    );				default:					return array();			}		}		/**		 * Get the URL for the last active tab of a particular tab bar.		 */		function getLastTabURL($section) {			global $data;			$tabs = $this->getNavTabs($section);			if (isset($_SESSION['webdbLastTab'][$section]) && isset($tabs[$_SESSION['webdbLastTab'][$section]]))				$tab = $tabs[$_SESSION['webdbLastTab'][$section]];			else				$tab = reset($tabs);			return isset($tab['url']) ? $tab : null;		}		function printTopbar() {			global $lang, $conf, $appName, $appVersion, $appLangFiles;			$server_info = $this->getServerInfo();			echo "<div class=\"topbar\"><table style=\"width: 100%\"><tr><td>";			if ($server_info && isset($server_info['platform']) && isset($server_info['username'])) {				echo sprintf($lang['strtopbar'],					'<span class="platform">'.htmlspecialchars($server_info['platform']).'</span>',					'<span class="host">'.htmlspecialchars((empty($server_info['host'])) ? 'localhost':$server_info['host']).'</span>',					'<span class="port">'.htmlspecialchars($server_info['port']).'</span>',					'<span class="username">'.htmlspecialchars($server_info['username']).'</span>',					'<span class="date">'.date($lang['strtimefmt']).'</span>');			} else {				echo "<span class=\"appname\">$appName</span> <span class=\"version\">$appVersion</span>";			}			echo "</td>";			if (isset($_REQUEST['server'])) {				$sql_url = "sqledit.php?{$this->href}&amp;action=";				$sql_window_id = htmlspecialchars('sqledit:'.$_REQUEST['server']);				$history_url = "history.php?{$this->href}&amp;action=pophistory";				$history_window_id = htmlspecialchars('history:'.$_REQUEST['server']);				$logout_shared = isset($_SESSION['sharedUsername']) ?					' onclick="return confirm(\''. $lang['strconfdropcred']. '\')"':					'';				echo "<td style=\"text-align: right\">";				echo "<ul class=\"toplink\">\n\t<li><a class=\"toplink\" href=\"{$sql_url}sql\" target=\"sqledit\" onclick=\"window.open('{$sql_url}sql','{$sql_window_id}','toolbar=no,width=700,height=500,resizable=yes,scrollbars=yes').focus(); return false;\">{$lang['strsql']}</a></li>\n";				echo "\t<li><a class=\"toplink\" href=\"{$history_url}\" onclick=\"window.open('{$history_url}','{$history_window_id}','toolbar=no,width=800,height=600,resizable=yes,scrollbars=yes').focus(); return false;\">{$lang['strhistory']}</a></li>\n";				echo "\t<li><a class=\"toplink\" href=\"{$sql_url}find\" target=\"sqledit\" onclick=\"window.open('{$sql_url}find','{$sql_window_id}','toolbar=no,width=700,height=500,resizable=yes,scrollbars=yes').focus(); return false;\">{$lang['strfind']}</a></li>\n"; 				echo "\t<li><a class=\"toplink\" href=\"servers.php?action=logout&amp;logoutServer=".htmlspecialchars($server_info['host']).":".htmlspecialchars($server_info['port']).":".htmlspecialchars($server_info['sslmode'])."\"{$logout_shared}>{$lang['strlogout']}</a></li>\n"; 				echo "</ul>\n";				echo "</td>";			}/*			echo "<td style=\"text-align: right; width: 1%\">";			echo "<form method=\"get\"><select name=\"language\" onchange=\"this.form.submit()\">\n";			$language = isset($_SESSION['webdbLanguage']) ? $_SESSION['webdbLanguage'] : 'english';			foreach ($appLangFiles as $k => $v) {				echo "<option value=\"{$k}\"",					($k == $language) ? ' selected="selected"' : '',					">{$v}</option>\n";			}			echo "</select>\n";			echo "<noscript><input type=\"submit\" value=\"Set Language\"></noscript>\n";			foreach ($_GET as $key => $val) {				if ($key == 'language') continue;				echo "<input type=\"hidden\" name=\"$key\" value=\"", htmlspecialchars($val), "\" />\n";			}			echo "</form>\n";			echo "</td>";*/			echo "</tr></table></div>\n";		}		/**		 * Display a bread crumb trail.		 */		function printTrail($trail = array()) {			global $lang;			$this->printTopbar();			if (is_string($trail)) {				$trail = $this->getTrail($trail);			}			echo "<div class=\"trail\"><table><tr>";			foreach ($trail as $crumb) {				echo "<td class=\"crumb\">";				$crumblink = "<a";				if (isset($crumb['url']))					$crumblink .= ' href="' . $this->printVal($crumb['url'], 'nbsp') . '"';				if (isset($crumb['title']))					$crumblink .= " title=\"{$crumb['title']}\"";				$crumblink .= ">";				if (isset($crumb['title']))					$iconalt = $crumb['title'];				else					$iconalt = 'Database Root';				if (isset($crumb['icon']) && $icon = $this->icon($crumb['icon']))					$crumblink .= "<span class=\"icon\"><img src=\"{$icon}\" alt=\"{$iconalt}\" /></span>";				$crumblink .= "<span class=\"label\">" . htmlspecialchars($crumb['text']) . "</span></a>";				if (isset($crumb['help']))					$this->printHelp($crumblink, $crumb['help']);				else					echo $crumblink;				echo "{$lang['strseparator']}";				echo "</td>";			}			echo "</tr></table></div>\n";		}		/**		 * Create a bread crumb trail of the object hierarchy.		 * @param $object The type of object at the end of the trail.		 */		function getTrail($subject = null) {			global $lang, $conf, $data, $appName;			$trail = array();			$vars = '';			$done = false;			$trail['root'] = array(				'text'  => $appName,				'url'   => 'redirect.php?subject=root',				'icon'  => 'Introduction'			);			if ($subject == 'root') $done = true;			if (!$done) {				$vars = 'server='.urlencode($_REQUEST['server']).'&';				$server_info = $this->getServerInfo();				$trail['server'] = array(					'title' => $lang['strserver'],					'text'  => $server_info['desc'],					'url'   => "redirect.php?subject=server&{$vars}",					'help'  => 'pg.server',					'icon'  => 'Server'				);			}			if ($subject == 'server') $done = true;			if (isset($_REQUEST['report']) && !$done) {				$vars .= 'report='.urlencode($_REQUEST['report']).'&';				$trail['report'] = array(					'title' => $lang['strreport'],					'text'  => $_REQUEST['report'],					'url'   => "reports.php?subject=report&{$vars}",					'icon'  => 'Report'				);			}			if (isset($_REQUEST['database']) && !$done) {				$vars .= 'database='.urlencode($_REQUEST['database']).'&';				$trail['database'] = array(					'title' => $lang['strdatabase'],					'text'  => $_REQUEST['database'],					'url'   => "redirect.php?subject=database&{$vars}",					'help'  => 'pg.database',					'icon'  => 'Database'				);			} elseif (isset($_REQUEST['rolename']) && !$done) {				$vars .= "subject=role&action=properties&rolename=".urlencode($_REQUEST['rolename']);				$trail['role'] = array(					'title' => $lang['strrole'],					'text'  => $_REQUEST['rolename'],					'url'   => "redirect.php?{$vars}",					'help'  => 'pg.role',					'icon'  => 'Roles'				);			}			if ($subject == 'database' || $subject == 'role' || $subject == 'report') $done = true;			if (isset($_REQUEST['schema']) && !$done) {				$vars .= 'schema='.urlencode($_REQUEST['schema']).'&';				$trail['schema'] = array(					'title' => $lang['strschema'],					'text'  => $_REQUEST['schema'],					'url'   => "redirect.php?subject=schema&{$vars}",					'help'  => 'pg.schema',					'icon'  => 'Schema'				);			}			if ($subject == 'schema') $done = true;			if (isset($_REQUEST['slony_cluster']) && !$done) {				$vars .= 'slony_cluster='.urlencode($_REQUEST['slony_cluster']).'&';				$trail['slony_cluster'] = array(					'title' => 'Slony Cluster',					'text'  => $_REQUEST['slony_cluster'],					'url'   => "redirect.php?subject=slony_cluster&{$vars}",					'help'  => 'sl.cluster',					'icon'  => 'Cluster'				);			}			if ($subject == 'slony_cluster') $done = true;			if (isset($_REQUEST['table']) && !$done) {				$vars .= "table=".urlencode($_REQUEST['table']);				$trail['table'] = array(					'title' => $lang['strtable'],					'text'  => $_REQUEST['table'],					'url'   => "redirect.php?subject=table&{$vars}",					'help'  => 'pg.table',					'icon'  => 'Table'				);			} elseif (isset($_REQUEST['view']) && !$done) {				$vars .= "view=".urlencode($_REQUEST['view']);				$trail['view'] = array(					'title' => $lang['strview'],					'text'  => $_REQUEST['view'],					'url'   => "redirect.php?subject=view&{$vars}",					'help'  => 'pg.view',					'icon'  => 'View'				);			} elseif (isset($_REQUEST['ftscfg']) && !$done) {				$vars .= "action=viewconfig&ftscfg=".urlencode($_REQUEST['ftscfg']);				$trail['ftscfg'] = array(					'title' => $lang['strftsconfig'],					'text'  => $_REQUEST['ftscfg'],					'url'   => "fulltext.php?{$vars}",					'help'  => 'pg.ftscfg.example',					'icon'  => 'Fts'				);			}			if ($subject == 'table' || $subject == 'view' || $subject == 'ftscfg') $done = true;			if (!$done && !is_null($subject)) {				switch ($subject) {					case 'function':						$vars .= "{$subject}_oid=".urlencode($_REQUEST[$subject.'_oid']).'&';						$vars .= "subject={$subject}&{$subject}=".urlencode($_REQUEST[$subject]);						$trail[$subject] = array(							'title' => $lang['str'.$subject],							'text'  => $_REQUEST[$subject],							'url'   => "redirect.php?{$vars}",							'help'  => 'pg.function',							'icon'  => 'Function'						);						break;					case 'aggregate':						$vars .= "subject=aggregate&action=properties&aggrname=".urlencode($_REQUEST['aggrname']);						$vars .= "&aggrtype=".urlencode($_REQUEST['aggrtype']);						$trail[$subject] = array(							'title' => $lang['straggregate'],							'text'  => $_REQUEST['aggrname'],							'url'   => "redirect.php?{$vars}",							'help'  => 'pg.aggregate',							'icon'  => 'Aggregate'						);						break;					case 'slony_node':						$vars .= 'no_id='.urlencode($_REQUEST['no_id']).'&no_name='.urlencode($_REQUEST['no_name']);						$trail[$subject] = array(							'title' => 'Slony Node',							'text'  => $_REQUEST['no_name'],							'url'   => "redirect.php?{$vars}",							'help'  => 'sl.'.$subject,							'icon'  => 'Node'						);						break;					case 'slony_set':						$vars .= "{$subject}_id=".urlencode($_REQUEST[$subject]).'&';						$vars .= "subject={$subject}&{$subject}=".urlencode($_REQUEST[$subject]);						$trail[$subject] = array(							'title' => $lang['str'.$subject],							'text'  => $_REQUEST[$subject],							'url'   => "redirect.php?{$vars}",							'help'  => 'sl.'.$subject,							'icon'  => 'AvailableReplicationSet'						);						break;					case 'column':						$vars .= "&column=". urlencode($_REQUEST['column']) ."&subject=column";						$trail['column'] = array (							'title' => $lang['strcolumn'],							'text'  => $_REQUEST['column'],							'icon'	=> 'Column',							'url'   => "redirect.php?{$vars}"						);						break;					default:						if (isset($_REQUEST[$subject])) {							switch ($subject) {								case 'domain': $icon = 'Domain'; break;								case 'sequence': $icon = 'Sequence'; break;								case 'type': $icon = 'Type'; break;								case 'operator': $icon = 'Operator'; break;								default: $icon = null; break;							}							$trail[$subject] = array(								'title' => $lang['str'.$subject],								'text'  => $_REQUEST[$subject],								'help'  => 'pg.'.$subject,								'icon'  => $icon,							);						}				}			}			return $trail;		}		/**		 * Do multi-page navigation.  Displays the prev, next and page options.		 * @param $page the page currently viewed		 * @param $pages the maximum number of pages		 * @param $url the url to refer to with the page number inserted		 * @param $max_width the number of pages to make available at any one time (default = 20)		 */		function printPages($page, $pages, $url, $max_width = 20) {			global $lang;			$window = 10;			if ($page < 0 || $page > $pages) return;			if ($pages < 0) return;			if ($max_width <= 0) return;			if ($pages > 1) {				echo "<p style=\"text-align: center\">\n";				if ($page != 1) {					$temp = str_replace('%s', 1, $url);					echo "<a class=\"pagenav\" href=\"{$temp}\">{$lang['strfirst']}</a>\n";					$temp = str_replace('%s', $page - 1, $url);					echo "<a class=\"pagenav\" href=\"{$temp}\">{$lang['strprev']}</a>\n";				}				if ($page <= $window) {					$min_page = 1;					$max_page = min(2 * $window, $pages);				}				elseif ($page > $window && $pages >= $page + $window) {					$min_page = ($page - $window) + 1;					$max_page = $page + $window;				}				else {					$min_page = ($page - (2 * $window - ($pages - $page))) + 1;					$max_page = $pages;				}				// Make sure min_page is always at least 1				// and max_page is never greater than $pages				$min_page = max($min_page, 1);				$max_page = min($max_page, $pages);				for ($i = $min_page; $i <= $max_page; $i++) {					$temp = str_replace('%s', $i, $url);					if ($i != $page) echo "<a class=\"pagenav\" href=\"{$temp}\">$i</a>\n";					else echo "$i\n";				}				if ($page != $pages) {					$temp = str_replace('%s', $page + 1, $url);					echo "<a class=\"pagenav\" href=\"{$temp}\">{$lang['strnext']}</a>\n";					$temp = str_replace('%s', $pages, $url);					echo "<a class=\"pagenav\" href=\"{$temp}\">{$lang['strlast']}</a>\n";				}				echo "</p>\n";			}		}		/**		 * Displays link to the context help.		 * @param $str   - the string that the context help is related to (already escaped)		 * @param $help  - help section identifier		 */		function printHelp($str, $help) {			global $lang, $data;			echo $str;			if ($help) {				echo "<a class=\"help\" href=\"";				echo htmlspecialchars("help.php?help=".urlencode($help)."&server=".urlencode($_REQUEST['server']));				echo "\" title=\"{$lang['strhelp']}\" target=\"phppgadminhelp\">{$lang['strhelpicon']}</a>";			}		}		/**		 * Outputs JavaScript to set default focus		 * @param $object eg. forms[0].username		 */		function setFocus($object) {			echo "<script type=\"text/javascript\">\n";			echo "   document.{$object}.focus();\n";			echo "</script>\n";		}		/**		 * Outputs JavaScript to set the name of the browser window.		 * @param $name the window name		 * @param $addServer if true (default) then the server id is		 *        attached to the name.		 */		function setWindowName($name, $addServer = true) {			echo "<script type=\"text/javascript\">\n";			echo "//<![CDATA[\n";			echo "   window.name = '{$name}", ($addServer ? ':'.htmlspecialchars($_REQUEST['server']) : ''), "';\n";			echo "//]]>\n";			echo "</script>\n";		}		/**		 * Converts a PHP.INI size variable to bytes.  Taken from publically available		 * function by Chris DeRose, here: http://www.php.net/manual/en/configuration.directives.php#ini.file-uploads		 * @param $strIniSize The PHP.INI variable		 * @return size in bytes, false on failure		 */		function inisizeToBytes($strIniSize) {			// This function will take the string value of an ini 'size' parameter,			// and return a double (64-bit float) representing the number of bytes			// that the parameter represents. Or false if $strIniSize is unparseable.			$a_IniParts = array();			if (!is_string($strIniSize))				return false;			if (!preg_match ('/^(\d+)([bkm]*)$/i', $strIniSize,$a_IniParts))				return false;			$nSize = (double) $a_IniParts[1];			$strUnit = strtolower($a_IniParts[2]);			switch($strUnit) {				case 'm':					return ($nSize * (double) 1048576);				case 'k':					return ($nSize * (double) 1024);				case 'b':				default:					return $nSize;			}		}		/**		 * Display a URL given an action associative array.		 * @param $action An associative array of the follow properties:		 *			'url'  => The first part of the URL (before the ?)		 *			'urlvars' => Associative array of (URL variable => field name)		 *						these are appended to the URL		 *			'urlfn' => Function to apply to URL before display		 * @param $fields Field data from which 'urlfield' and 'vars' are obtained.		 * @param $attr If supplied then the URL will be quoted and prefixed with		 *				'$attr='.		 */		function printActionUrl(&$action, &$fields, $attr = null) {			$url = value($action['url'], $fields);			if ($url === false) return '';			if (!empty($action['urlvars'])) {				$urlvars = value($action['urlvars'], $fields);			} else {				$urlvars = array();			}			if (isset($urlvars['subject'])) {				$subject = value($urlvars['subject'], $fields);				if (isset($_REQUEST['server']) && $subject != 'root') {					$urlvars['server'] = $_REQUEST['server'];					if (isset($_REQUEST['database']) && $subject != 'server') {						$urlvars['database'] = $_REQUEST['database'];						if (isset($_REQUEST['schema']) && $subject != 'database') {							$urlvars['schema'] = $_REQUEST['schema'];						}					}				}			}			$sep = '?';			foreach ($urlvars as $var => $varfield) {				$url .= $sep . value_url($var, $fields) . '=' . value_url($varfield, $fields);				$sep = '&';			}			$url = htmlentities($url);			if ($attr !== null && $url != '')				return ' '.$attr.'="'.$url.'"';			else				return $url;		}		function getRequestVars($subject = '') {			$v = array();			if (!empty($subject))				$v['subject'] = $subject;			if (isset($_REQUEST['server']) && $subject != 'root') {				$v['server'] = $_REQUEST['server'];				if (isset($_REQUEST['database']) && $subject != 'server') {					$v['database'] = $_REQUEST['database'];					if (isset($_REQUEST['schema']) && $subject != 'database') {						$v['schema'] = $_REQUEST['schema'];					}				}			}			return $v;		}		function printUrlVars(&$vars, &$fields) {			foreach ($vars as $var => $varfield) {				echo "{$var}=", urlencode($fields[$varfield]), "&amp;";			}		}		/**		 * Display a table of data.		 * @param $tabledata A set of data to be formatted, as returned by $data->getDatabases() etc.		 * @param $columns   An associative array of columns to be displayed:		 *			$columns = array(		 *				column_id => array(		 *					'title' => Column heading,		 *					'field' => Field name for $tabledata->fields[...],		 *					'help'  => Help page for this column,		 *				), ...		 *			);		 * @param $actions   Actions that can be performed on each object:		 *			$actions = array(		 *				* multi action support		 *				* parameters are serialized for each entries and given in $_REQUEST['ma']		 *				'multiactions' => array(		 *					'keycols' => Associative array of (URL variable => field name), // fields included in the form		 *					'url' => URL submission,		 *					'default' => Default selected action in the form.		 *									if null, an empty action is added & selected		 *				),		 *				* actions *		 *				action_id => array(		 *					'title' => Action heading,		 *					'url'   => Static part of URL.  Often we rely		 *							   relative urls, usually the page itself (not '' !), or just a query string,		 *					'vars'  => Associative array of (URL variable => field name),		 *					'multiaction' => Name of the action to execute.		 *										Add this action to the multi action form		 *				), ...		 *			);		 * @param $nodata    (optional) Message to display if data set is empty.		 * @param $pre_fn    (optional) Name of a function to call for each row,		 *					 it will be passed two params: $rowdata and $actions,		 *					 it may be used to derive new fields or modify actions.		 *					 It can return an array of actions specific to the row,		 *					 or if nothing is returned then the standard actions are used.		 *					 (see tblproperties.php and constraints.php for examples)		 *					 The function must not must not store urls because		 *					 they are relative and won't work out of context.		 */		function printTable(&$tabledata, &$columns, &$actions, $nodata = null, $pre_fn = null) {			global $data, $conf, $misc, $lang;			if ($has_ma = isset($actions['multiactions']))				$ma = $actions['multiactions'];			unset($actions['multiactions']);			if ($tabledata->recordCount() > 0) {				// Remove the 'comment' column if they have been disabled				if (!$conf['show_comments']) {					unset($columns['comment']);				}				if (isset($columns['comment'])) {					// Uncomment this for clipped comments.					// TODO: This should be a user option.					//$columns['comment']['params']['clip'] = true;				}				if ($has_ma) {					echo "<script src=\"multiactionform.js\" type=\"text/javascript\"></script>\n";					echo "<form id=\"multi_form\" action=\"{$ma['url']}\" method=\"post\" enctype=\"multipart/form-data\">\n";					if (isset($ma['vars']))						foreach ($ma['vars'] as $k => $v)							echo "<input type=\"hidden\" name=\"$k\" value=\"$v\" />";				}				echo "<table>\n";				echo "<tr>\n";				// Display column headings				if ($has_ma) echo "<th></th>";				foreach ($columns as $column_id => $column) {					switch ($column_id) {						case 'actions':							if (sizeof($actions) > 0) echo "<th class=\"data\" colspan=\"", count($actions), "\">{$column['title']}</th>\n";							break;						default:							echo "<th class=\"data\">";							if (isset($column['help']))								$this->printHelp($column['title'], $column['help']);							else								echo $column['title'];							echo "</th>\n";							break;					}				}				echo "</tr>\n";				// Display table rows				$i = 0;				while (!$tabledata->EOF) {					$id = ($i % 2) + 1;					unset($alt_actions);					if (!is_null($pre_fn)) $alt_actions = $pre_fn($tabledata, $actions);					if (!isset($alt_actions)) $alt_actions =& $actions;					echo "<tr class=\"data{$id}\">\n";					if ($has_ma) {						foreach ($ma['keycols'] as $k => $v)							$a[$k] = $tabledata->fields[$v];						echo "<td>";						echo "<input type=\"checkbox\" name=\"ma[]\" value=\"". htmlentities(serialize($a)) ."\" />";						echo "</td>\n";					}					foreach ($columns as $column_id => $column) {						// Apply default values for missing parameters						if (isset($column['url']) && !isset($column['vars'])) $column['vars'] = array();						switch ($column_id) {							case 'actions':								foreach ($alt_actions as $action) {									if (isset($action['disable']) && $action['disable'] === true) {										echo "<td></td>\n";									} else {										echo "<td class=\"opbutton{$id}\">";										echo "<a href=\"{$action['url']}";										if ($action['url'] === '') echo '?';										$misc->printUrlVars($action['vars'], $tabledata->fields);										if (isset($action['target']))											echo "\" target=\"{$action['target']}";										echo "\">{$action['title']}</a></td>\n";									}								}								break;							default:								echo "<td>";								$val = value($column['field'], $tabledata->fields);								if (!is_null($val)) {									if (isset($column['url'])) {										echo "<a href=\"{$column['url']}";										$misc->printUrlVars($column['vars'], $tabledata->fields);										echo "\">";									}									$type = isset($column['type']) ? $column['type'] : null;									$params = isset($column['params']) ? $column['params'] : array();									echo $misc->printVal($val, $type, $params);									if (isset($column['url'])) echo "</a>";								}								echo "</td>\n";								break;						}					}					echo "</tr>\n";					$tabledata->moveNext();					$i++;				}				echo "</table>\n";				// Multi action table footer w/ options & [un]check'em all				if ($has_ma) {					// if default is not set or doesn't exist, set it to null					if (!isset($ma['default']) || !isset($actions[$ma['default']]))						$ma['default'] = null;					echo "<br />\n";					echo "<table>\n";					echo "<tr>\n";					echo "<th class=\"data\" style=\"text-align: left\" colspan=\"3\">{$lang['stractionsonmultiplelines']}</th>\n";					echo "</tr>\n";					echo "<tr class=\"row1\">\n";					echo "<td>";					echo "<a href=\"#\" onclick=\"javascript:checkAll(true);\">{$lang['strselectall']}</a> / ";					echo "<a href=\"#\" onclick=\"javascript:checkAll(false);\">{$lang['strunselectall']}</a></td>\n";					echo "<td>&nbsp;--->&nbsp;</td>\n";					echo "<td>\n";					echo "\t<select name=\"action\">\n";					if ($ma['default'] == null)						echo "\t\t<option value=\"\">--</option>\n";					foreach($actions as $k => $a)						if (isset($a['multiaction']))							echo "\t\t<option value=\"{$a['multiaction']}\"", ($ma['default']  == $k? ' selected="selected"': ''), ">{$a['title']}</option>\n";					echo "\t</select>\n";					echo "<input type=\"submit\" value=\"{$lang['strexecute']}\" />\n";					echo $misc->form;					echo "</td>\n";					echo "</tr>\n";					echo "</table>\n";					echo '</form>';				};				return true;			} else {				if (!is_null($nodata)) {					echo "<p>{$nodata}</p>\n";				}				return false;			}		}		/** Produce XML data for the browser tree		 * @param $treedata A set of records to populate the tree.		 * @param $attrs Attributes for tree items		 *        'text' - the text for the tree node		 *        'icon' - an icon for node		 *        'openIcon' - an alternative icon when the node is expanded		 *        'toolTip' - tool tip text for the node		 *        'action' - URL to visit when single clicking the node		 *        'iconAction' - URL to visit when single clicking the icon node		 *        'branch' - URL for child nodes (tree XML)		 *        'expand' - the action to return XML for the subtree		 *        'nodata' - message to display when node has no children		 *        'nohead' - suppress headers and opening <tree> tag		 *        'nofoot' - suppress closing </tree> tag		 */		function printTreeXML(&$treedata, &$attrs) {			global $conf, $lang;			if (!isset($attrs['nohead']) || $attrs['nohead'] === false) {				header("Content-Type: text/xml");				header("Cache-Control: no-cache");				echo "<?xml version=\"1.0\" encoding=\"", htmlspecialchars($lang['appcharset']), "\"?>\n";				echo "<tree>\n";			}			if ($treedata->recordCount() > 0) {				while (!$treedata->EOF) {					$rec =& $treedata->fields;					echo "<tree";					echo value_xml_attr('text', $attrs['text'], $rec);					echo value_xml_attr('action', $attrs['action'], $rec);					echo value_xml_attr('src', $attrs['branch'], $rec);					$icon = $this->icon(value($attrs['icon'], $rec));					echo value_xml_attr('icon', $icon, $rec);					echo value_xml_attr('iconaction', $attrs['iconAction'], $rec);					if (!empty($attrs['openicon'])) {						$icon = $this->icon(value($attrs['openIcon'], $rec));					}					echo value_xml_attr('openicon', $icon, $rec);					echo value_xml_attr('tooltip', $attrs['toolTip'], $rec);					echo " />\n";					$treedata->moveNext();				}			} else {				$msg = isset($attrs['nodata']) ? $attrs['nodata'] : $lang['strnoobjects'];				echo "<tree text=\"{$msg}\" onaction=\"tree.getSelected().getParent().reload()\" icon=\"", $this->icon('ObjectNotFound'), "\" />\n";			}			if (!isset($attrs['nofoot']) || $attrs['nofoot'] === false) {				echo "</tree>\n";			}		}		function adjustTabsForTree(&$tabs) {			include_once('./classes/ArrayRecordSet.php');			foreach ($tabs as $i => $tab) {				if ((isset($tab['hide']) && $tab['hide'] === true) || (isset($tab['tree']) && $tab['tree'] === false)) {					unset($tabs[$i]);				}			}			return new ArrayRecordSet($tabs);		}		function icon($icon) {			global $conf;			$path = "images/themes/{$conf['theme']}/{$icon}";			if (file_exists($path.'.png')) return $path.'.png';			if (file_exists($path.'.gif')) return $path.'.gif';			$path = "images/themes/default/{$icon}";			if (file_exists($path.'.png')) return $path.'.png';			if (file_exists($path.'.gif')) return $path.'.gif';			return '';		}		/**		 * Function to escape command line parameters		 * @param $str The string to escape		 * @return The escaped string		 */		function escapeShellArg($str) {			global $data, $lang;			if (strtoupper(substr(PHP_OS, 0, 3)) === 'WIN') {				// Due to annoying PHP bugs, shell arguments cannot be escaped				// (command simply fails), so we cannot allow complex objects				// to be dumped.				if (preg_match('/^[_.[:alnum:]]+$/', $str))					return $str;				else {					echo $lang['strcannotdumponwindows'];					exit;				}			}			else				return escapeshellarg($str);		}		/**		 * Function to escape command line programs		 * @param $str The string to escape		 * @return The escaped string		 */		function escapeShellCmd($str) {			global $data;			if (strtoupper(substr(PHP_OS, 0, 3)) === 'WIN') {				$data->fieldClean($str);				return '"' . $str . '"';			}			else				return escapeshellcmd($str);		}		/**		 * Get list of servers' groups if existing in the conf		 * @return a recordset of servers' groups		 */		function getServersGroups() {			global $conf, $lang;			$grps = array();						foreach ($conf['srv_groups'] as $i => $group) {				$grps[$i] = array(					'id' => $i,					'desc' => $group['desc'],				);							}						$grps['all'] = array(				'id' => 'all', 				'desc' => $lang['strallservers'],			);			include_once('./classes/ArrayRecordSet.php');			return new ArrayRecordSet($grps);		}				/**		 * Get list of servers		 * @param $recordset return as RecordSet suitable for printTable if true,		 *                   otherwise just return an array.		 * @param $group a group name to filter the returned servers using $conf[srv_groups]		 */		function getServers($recordset = false, $group = false) {			global $conf;			$logins = isset($_SESSION['webdbLogin']) && is_array($_SESSION['webdbLogin']) ? $_SESSION['webdbLogin'] : array();			$srvs = array();			if (($group !== false) and ($group !== 'all'))				$group = array_fill_keys(explode(',', $conf['srv_groups'][$group]['servers']), 1);						foreach($conf['servers'] as $idx => $info) {				$server_id = $info['host'].':'.$info['port'].':'.$info['sslmode'];				if (($group === false) 					or (isset($group[$idx]))					or ($group === 'all')				) {					$server_id = $info['host'].':'.$info['port'].':'.$info['sslmode'];										if (isset($logins[$server_id])) $srvs[$server_id] = $logins[$server_id];					else $srvs[$server_id] = $info;					$srvs[$server_id]['id'] = $server_id;				}			}			function _cmp_desc($a, $b) {				return strcmp($a['desc'], $b['desc']);			}			uasort($srvs, '_cmp_desc');			if ($recordset) {				include_once('./classes/ArrayRecordSet.php');				return new ArrayRecordSet($srvs);			}			return $srvs;		}		/**		 * Validate and retrieve information on a server.		 * If the parameter isn't supplied then the currently		 * connected server is returned.		 * @param $server_id A server identifier (host:port)		 * @return An associative array of server properties		 */		function getServerInfo($server_id = null) {			global $conf, $_reload_browser, $lang;			if ($server_id === null && isset($_REQUEST['server']))				$server_id = $_REQUEST['server'];			// Check for the server in the logged-in list			if (isset($_SESSION['webdbLogin'][$server_id]))				return $_SESSION['webdbLogin'][$server_id];			// Otherwise, look for it in the conf file			foreach($conf['servers'] as $idx => $info) {				if ($server_id == $info['host'].':'.$info['port'].':'.$info['sslmode']) {					// Automatically use shared credentials if available					if (!isset($info['username']) && isset($_SESSION['sharedUsername'])) {						$info['username'] = $_SESSION['sharedUsername'];						$info['password'] = $_SESSION['sharedPassword'];						$_reload_browser = true;						$this->setServerInfo(null, $info, $server_id);					}					return $info;				}			}			if ($server_id === null){				return null;			} else {				// Unable to find a matching server, are we being hacked?				echo $lang['strinvalidserverparam'];				exit;			}		}		/**		 * Set server information.		 * @param $key parameter name to set, or null to replace all		 *             params with the assoc-array in $value.		 * @param $value the new value, or null to unset the parameter		 * @param $server_id the server identifier, or null for current		 *                   server.		 */		function setServerInfo($key, $value, $server_id = null)		{			if ($server_id === null && isset($_REQUEST['server']))				$server_id = $_REQUEST['server'];			if ($key === null) {				if ($value === null)					unset($_SESSION['webdbLogin'][$server_id]);				else					$_SESSION['webdbLogin'][$server_id] = $value;			} else {				if ($value === null)					unset($_SESSION['webdbLogin'][$server_id][$key]);				else					$_SESSION['webdbLogin'][$server_id][$key] = $value;			}		}				/**		 * Set the current schema		 * @param $schema The schema name		 * @return 0 on success		 * @return $data->seSchema() on error		 */		function setCurrentSchema($schema) {			global $data;						$status = $data->setSchema($schema);			if($status != 0)				return $status;			$_REQUEST['schema'] = $schema;			$this->setHREF();			return 0;		}		/**		 * Save the given SQL script in the history 		 * of the database and server.		 * @param $script the SQL script to save.		 */		function saveScriptHistory($script) {			list($usec, $sec) = explode(' ', microtime());			$time = ((float)$usec + (float)$sec);			$_SESSION['history'][$_REQUEST['server']][$_REQUEST['database']]["$time"] = array(				'query' => $script,				'paginate' => (!isset($_REQUEST['paginate'])? 'f':'t'),				'queryid' => $time,			);		}			/*		 * Output dropdown list to select server and 		 * databases form the popups windows.		 * @param $onchange Javascript action to take when selections change.		 */			function printConnection($onchange) {			global $data, $lang, $misc;			echo "<table style=\"width: 100%\"><tr><td>\n";			echo "<label>";			$misc->printHelp($lang['strserver'], 'pg.server');			echo "</label>";			echo ": <select name=\"server\" {$onchange}>\n";						$servers = $misc->getServers();			foreach($servers as $info) {				if (empty($info['username'])) continue; // not logged on this server				echo "<option value=\"", htmlspecialchars($info['id']), "\"",					((isset($_REQUEST['server']) && $info['id'] == $_REQUEST['server'])) ? ' selected="selected"' : '', ">",					htmlspecialchars("{$info['desc']} ({$info['id']})"), "</option>\n";			}			echo "</select>\n</td><td style=\"text-align: right\">\n";						// Get the list of all databases			$databases = $data->getDatabases();			if ($databases->recordCount() > 0) {				echo "<label>";				$misc->printHelp($lang['strdatabase'], 'pg.database');				echo ": <select name=\"database\" {$onchange}>\n";								//if no database was selected, user should select one				if (!isset($_REQUEST['database']))					echo "<option value=\"\">--</option>\n";								while (!$databases->EOF) {					$dbname = $databases->fields['datname'];					echo "<option value=\"", htmlspecialchars($dbname), "\"",						((isset($_REQUEST['database']) && $dbname == $_REQUEST['database'])) ? ' selected="selected"' : '', ">",						htmlspecialchars($dbname), "</option>\n";					$databases->moveNext();				}				echo "</select></label>\n";			}			else {				$server_info = $misc->getServerInfo();				echo "<input type=\"hidden\" name=\"database\" value=\"", 					htmlspecialchars($server_info['defaultdb']), "\" />\n";			}						echo "</td></tr></table>\n";		}		/**		 * returns an array representing FKs definition for a table, sorted by fields		 * or by constraint.		 * @param $table The table to retrieve FK contraints from		 * @returns the array of FK definition:		 *   array(		 *     'byconstr' => array(		 *       constrain id => array(		 *         confrelid => foreign relation oid		 *         f_schema => foreign schema name		 *         f_table => foreign table name		 *         pattnums => array of parent's fields nums		 *         pattnames => array of parent's fields names		 *         fattnames => array of foreign attributes names		 *       )		 *     ),		 *     'byfield' => array(		 *       attribute num => array (constraint id, ...)		 *     ),		 *     'code' => HTML/js code to include in the page for auto-completion		 *   )		 **/		function getAutocompleteFKProperties($table) {			global $data;			$fksprops = array(				'byconstr' => array(),				'byfield' => array(),				'code' => ''			);			$constrs = $data->getConstraintsWithFields($table);			if (!$constrs->EOF) {				$conrelid = $constrs->fields['conrelid'];				while(!$constrs->EOF) {					if ($constrs->fields['contype'] == 'f') {						if (!isset($fksprops['byconstr'][$constrs->fields['conid']])) {							$fksprops['byconstr'][$constrs->fields['conid']] = array (								'confrelid' => $constrs->fields['confrelid'],								'f_table' => $constrs->fields['f_table'],								'f_schema' => $constrs->fields['f_schema'],								'pattnums' => array(),								'pattnames' => array(),								'fattnames' => array()							);						}						$fksprops['byconstr'][$constrs->fields['conid']]['pattnums'][] = $constrs->fields['p_attnum'];						$fksprops['byconstr'][$constrs->fields['conid']]['pattnames'][] = $constrs->fields['p_field'];						$fksprops['byconstr'][$constrs->fields['conid']]['fattnames'][] = $constrs->fields['f_field'];						if (!isset($fksprops['byfield'][$constrs->fields['p_attnum']]))							$fksprops['byfield'][$constrs->fields['p_attnum']] = array();						$fksprops['byfield'][$constrs->fields['p_attnum']][] = $constrs->fields['conid'];					}					$constrs->moveNext();				}				$fksprops['code'] = "<script type=\"text/javascript\">\n";				$fksprops['code'] .= "var constrs = {};\n";				foreach ($fksprops['byconstr'] as $conid => $props) {					$fksprops['code'] .= "constrs.constr_{$conid} = {\n";					$fksprops['code'] .= 'pattnums: ['. implode(',',$props['pattnums']) ."],\n";					$fksprops['code'] .= "f_table:'". addslashes(htmlentities($props['f_table'], ENT_QUOTES)) ."',\n";					$fksprops['code'] .= "f_schema:'". addslashes(htmlentities($props['f_schema'], ENT_QUOTES)) ."',\n";					$_ = '';					foreach ($props['pattnames'] as $n) {						$_ .= ",'". htmlentities($n, ENT_QUOTES) ."'";					}					$fksprops['code'] .= 'pattnames: ['. substr($_, 1) ."],\n";					$_ = '';					foreach ($props['fattnames'] as $n) {						$_ .= ",'". htmlentities($n, ENT_QUOTES) ."'";					}					$fksprops['code'] .= 'fattnames: ['. substr($_, 1) ."]\n";					$fksprops['code'] .= "};\n";				}				$fksprops['code'] .= "var attrs = {};\n";				foreach ($fksprops['byfield'] as $attnum => $cstrs ) {					$fksprops['code'] .= "attrs.attr_{$attnum} = [". implode(',', $fksprops['byfield'][$attnum]) ."];\n";				}				$fksprops['code'] .= "var table='". addslashes(htmlentities($table, ENT_QUOTES)) ."';";				$fksprops['code'] .= "var server='". htmlentities($_REQUEST['server']) ."';";				$fksprops['code'] .= "var database='". addslashes(htmlentities($_REQUEST['database'], ENT_QUOTES)) ."';";				$fksprops['code'] .= "</script>\n";				$fksprops['code'] .= '<div id="fkbg"></div>';				$fksprops['code'] .= '<div id="fklist"></div>';				$fksprops['code'] .= '<script src="libraries/js/jquery.js" type="text/javascript"></script>';				$fksprops['code'] .= '<script src="js/ac_insert_row.js" type="text/javascript"></script>';			}			else /* we have no foreign keys on this table */				return false;			return $fksprops;		}	}?>
<?php	/**	 * Manage groups in a database cluster	 *	 * $Id: groups.php,v 1.27 2007/08/31 18:30:11 ioguix Exp $	 */	// Include application functions	include_once('./libraries/lib.inc.php');	$action = (isset($_REQUEST['action'])) ? $_REQUEST['action'] : '';	if (!isset($msg)) $msg = '';	/**	 * Add user to a group	 */	function doAddMember() {		global $data, $misc;		global $lang;		$status = $data->addGroupMember($_REQUEST['group'], $_REQUEST['user']);		if ($status == 0)			doProperties($lang['strmemberadded']);		else			doProperties($lang['strmemberaddedbad']);	}		/**	 * Show confirmation of drop user from group and perform actual drop	 */	function doDropMember($confirm) {		global $data, $misc;		global $lang;		if ($confirm) { 			$misc->printTrail('group');			$misc->printTitle($lang['strdropmember'],'pg.group.alter');						echo "<p>", sprintf($lang['strconfdropmember'], $misc->printVal($_REQUEST['user']), $misc->printVal($_REQUEST['group'])), "</p>\n";						echo "<form action=\"groups.php\" method=\"post\">\n";			echo $misc->form;			echo "<input type=\"hidden\" name=\"action\" value=\"drop_member\" />\n";			echo "<input type=\"hidden\" name=\"group\" value=\"", htmlspecialchars($_REQUEST['group']), "\" />\n";			echo "<input type=\"hidden\" name=\"user\" value=\"", htmlspecialchars($_REQUEST['user']), "\" />\n";			echo "<input type=\"submit\" name=\"drop\" value=\"{$lang['strdrop']}\" />\n";			echo "<input type=\"submit\" name=\"cancel\" value=\"{$lang['strcancel']}\" />\n";			echo "</form>\n";		}		else {			$status = $data->dropGroupMember($_REQUEST['group'], $_REQUEST['user']);			if ($status == 0)				doProperties($lang['strmemberdropped']);			else				doDropMember(true, $lang['strmemberdroppedbad']);		}			}		/**	 * Show read only properties for a group	 */	function doProperties($msg = '') {		global $data, $misc;		global $lang;			if (!isset($_POST['user'])) $_POST['user'] = '';			$misc->printTrail('group');		$misc->printTitle($lang['strproperties'],'pg.group');		$misc->printMsg($msg);				$groupdata = $data->getGroup($_REQUEST['group']);		$users = $data->getUsers();				if ($groupdata->recordCount() > 0) {			echo "<table>\n";           	echo "<tr><th class=\"data\">{$lang['strmembers']}</th><th class=\"data\">{$lang['stractions']}</th></tr>\n";           	$i = 0;           	while (!$groupdata->EOF) {					$id = (($i % 2) == 0 ? '1' : '2');            	echo "<tr class=\"data{$id}\"><td>", $misc->printVal($groupdata->fields['usename']), "</td>\n";					echo "<td class=\"opbutton{$id}\"><a href=\"groups.php?action=confirm_drop_member&{$misc->href}&group=",						urlencode($_REQUEST['group']), "&user=", urlencode($groupdata->fields['usename']), "\">{$lang['strdrop']}</a></td>\n";            	echo "</tr>\n";            	$groupdata->moveNext();           	}			echo "</table>\n";		}		else echo "<p>{$lang['strnousers']}</p>\n";		// Display form for adding a user to the group					echo "<form action=\"groups.php\" method=\"post\">\n";		echo "<select name=\"user\">";		while (!$users->EOF) {			$uname = $misc->printVal($users->fields['usename']);			echo "<option value=\"{$uname}\"",				($uname == $_POST['user']) ? ' selected="selected"' : '', ">{$uname}</option>\n";			$users->moveNext();		}		echo "</select>\n";		echo "<input type=\"submit\" value=\"{$lang['straddmember']}\" />\n";		echo $misc->form;		echo "<input type=\"hidden\" name=\"group\" value=\"", htmlspecialchars($_REQUEST['group']), "\" />\n";		echo "<input type=\"hidden\" name=\"action\" value=\"add_member\" />\n";		echo "</form>\n";				echo "<p><a class=\"navlink\" href=\"groups.php?{$misc->href}\">{$lang['strshowallgroups']}</a></p>\n";	}		/**	 * Show confirmation of drop and perform actual drop	 */	function doDrop($confirm) {		global $data, $misc;		global $lang;		if ($confirm) {			$misc->printTrail('group');			$misc->printTitle($lang['strdrop'],'pg.group.drop');						echo "<p>", sprintf($lang['strconfdropgroup'], $misc->printVal($_REQUEST['group'])), "</p>\n";						echo "<form action=\"groups.php\" method=\"post\">\n";			echo $misc->form;			echo "<input type=\"hidden\" name=\"action\" value=\"drop\" />\n";			echo "<input type=\"hidden\" name=\"group\" value=\"", htmlspecialchars($_REQUEST['group']), "\" />\n";			echo "<input type=\"submit\" name=\"drop\" value=\"{$lang['strdrop']}\" />\n";			echo "<input type=\"submit\" name=\"cancel\" value=\"{$lang['strcancel']}\" />\n";			echo "</form>\n";		}		else {			$status = $data->dropGroup($_REQUEST['group']);			if ($status == 0)				doDefault($lang['strgroupdropped']);			else				doDefault($lang['strgroupdroppedbad']);		}			}		/**	 * Displays a screen where they can enter a new group	 */	function doCreate($msg = '') {		global $data, $misc;		global $lang;				if (!isset($_POST['name'])) $_POST['name'] = '';		if (!isset($_POST['members'])) $_POST['members'] = array();		// Fetch a list of all users in the cluster		$users = $data->getUsers();				$misc->printTrail('server');		$misc->printTitle($lang['strcreategroup'],'pg.group.create');		$misc->printMsg($msg);		echo "<form action=\"\" method=\"post\">\n";		echo $misc->form;		echo "<table>\n";		echo "\t<tr>\n\t\t<th class=\"data left required\">{$lang['strname']}</th>\n";		echo "\t\t<td class=\"data\"><input size=\"32\" maxlength=\"{$data->_maxNameLen}\" name=\"name\" value=\"", htmlspecialchars($_POST['name']), "\" /></td>\n\t</tr>\n";		if ($users->recordCount() > 0) {			echo "\t<tr>\n\t\t<th class=\"data left\">{$lang['strmembers']}</th>\n";			echo "\t\t<td class=\"data\">\n";			echo "\t\t\t<select name=\"members[]\" multiple=\"multiple\" size=\"", min(40, $users->recordCount()), "\">\n";			while (!$users->EOF) {				$username = $users->fields['usename'];				echo "\t\t\t\t<option value=\"{$username}\"",						(in_array($username, $_POST['members']) ? ' selected="selected"' : ''), ">", $misc->printVal($username), "</option>\n";				$users->moveNext();			}			echo "\t\t\t</select>\n";			echo "\t\t</td>\n\t</tr>\n";			}		echo "</table>\n";		echo "<p><input type=\"hidden\" name=\"action\" value=\"save_create\" />\n";		echo "<input type=\"submit\" value=\"{$lang['strcreate']}\" />\n";		echo "<input type=\"submit\" name=\"cancel\" value=\"{$lang['strcancel']}\" /></p>\n";		echo "</form>\n";	}		/**	 * Actually creates the new group in the database	 */	function doSaveCreate() {		global $data;		global $lang;		if (!isset($_POST['members'])) $_POST['members'] = array();		// Check form vars		if (trim($_POST['name']) == '')			doCreate($lang['strgroupneedsname']);		else {					$status = $data->createGroup($_POST['name'], $_POST['members']);			if ($status == 0)				doDefault($lang['strgroupcreated']);			else				doCreate($lang['strgroupcreatedbad']);		}	}		/**	 * Show default list of groups in the database	 */	function doDefault($msg = '') {		global $data, $misc;		global $lang;				$misc->printTrail('server');		$misc->printTabs('server','groups');		$misc->printMsg($msg);				$groups = $data->getGroups();				$columns = array(			'group' => array(				'title' => $lang['strgroup'],				'field' => field('groname'),				'url'   => "groups.php?action=properties&amp;{$misc->href}&amp;",				'vars'  => array('group' => 'groname'),			),			'actions' => array(				'title' => $lang['stractions'],			),		);				$actions = array(			'drop' => array(				'title' => $lang['strdrop'],				'url'   => "groups.php?action=confirm_drop&amp;{$misc->href}&amp;",				'vars'  => array('group' => 'groname'),			),		);				$misc->printTable($groups, $columns, $actions, $lang['strnogroups']);				echo "<p><a class=\"navlink\" href=\"groups.php?action=create&amp;{$misc->href}\">{$lang['strcreategroup']}</a></p>\n";	}	$misc->printHeader($lang['strgroups']);	$misc->printBody();	switch ($action) {		case 'add_member':			doAddMember();			break;		case 'drop_member':			if (isset($_REQUEST['drop'])) doDropMember(false);			else doProperties();			break;		case 'confirm_drop_member':			doDropMember(true);			break;					case 'save_create':			if (isset($_REQUEST['cancel'])) doDefault();			else doSaveCreate();			break;		case 'create':			doCreate();			break;		case 'drop':			if (isset($_REQUEST['drop'])) doDrop(false);			else doDefault();			break;		case 'confirm_drop':			doDrop(true);			break;					case 'save_edit':			doSaveEdit();			break;		case 'edit':			doEdit();			break;		case 'properties':			doProperties();			break;		default:			doDefault();			break;	}		$misc->printFooter();?>
