<?php	/**	 * Manage groups in a database cluster	 *	 * $Id: groups.php,v 1.27 2007/08/31 18:30:11 ioguix Exp $	 */	// Include application functions	include_once('./libraries/lib.inc.php');	$action = (isset($_REQUEST['action'])) ? $_REQUEST['action'] : '';	if (!isset($msg)) $msg = '';	/**	 * Add user to a group	 */	function doAddMember() {		global $data, $misc;		global $lang;		$status = $data->addGroupMember($_REQUEST['group'], $_REQUEST['user']);		if ($status == 0)			doProperties($lang['strmemberadded']);		else			doProperties($lang['strmemberaddedbad']);	}		/**	 * Show confirmation of drop user from group and perform actual drop	 */	function doDropMember($confirm) {		global $data, $misc;		global $lang;		if ($confirm) { 			$misc->printTrail('group');			$misc->printTitle($lang['strdropmember'],'pg.group.alter');						echo "<p>", sprintf($lang['strconfdropmember'], $misc->printVal($_REQUEST['user']), $misc->printVal($_REQUEST['group'])), "</p>\n";						echo "<form action=\"groups.php\" method=\"post\">\n";			echo $misc->form;			echo "<input type=\"hidden\" name=\"action\" value=\"drop_member\" />\n";			echo "<input type=\"hidden\" name=\"group\" value=\"", htmlspecialchars($_REQUEST['group']), "\" />\n";			echo "<input type=\"hidden\" name=\"user\" value=\"", htmlspecialchars($_REQUEST['user']), "\" />\n";			echo "<input type=\"submit\" name=\"drop\" value=\"{$lang['strdrop']}\" />\n";			echo "<input type=\"submit\" name=\"cancel\" value=\"{$lang['strcancel']}\" />\n";			echo "</form>\n";		}		else {			$status = $data->dropGroupMember($_REQUEST['group'], $_REQUEST['user']);			if ($status == 0)				doProperties($lang['strmemberdropped']);			else				doDropMember(true, $lang['strmemberdroppedbad']);		}			}		/**	 * Show read only properties for a group	 */	function doProperties($msg = '') {		global $data, $misc;		global $lang;			if (!isset($_POST['user'])) $_POST['user'] = '';			$misc->printTrail('group');		$misc->printTitle($lang['strproperties'],'pg.group');		$misc->printMsg($msg);				$groupdata = $data->getGroup($_REQUEST['group']);		$users = $data->getUsers();				if ($groupdata->recordCount() > 0) {			echo "<table>\n";           	echo "<tr><th class=\"data\">{$lang['strmembers']}</th><th class=\"data\">{$lang['stractions']}</th></tr>\n";           	$i = 0;           	while (!$groupdata->EOF) {					$id = (($i % 2) == 0 ? '1' : '2');            	echo "<tr class=\"data{$id}\"><td>", $misc->printVal($groupdata->fields['usename']), "</td>\n";					echo "<td class=\"opbutton{$id}\"><a href=\"groups.php?action=confirm_drop_member&{$misc->href}&group=",						urlencode($_REQUEST['group']), "&user=", urlencode($groupdata->fields['usename']), "\">{$lang['strdrop']}</a></td>\n";            	echo "</tr>\n";            	$groupdata->moveNext();           	}			echo "</table>\n";		}		else echo "<p>{$lang['strnousers']}</p>\n";		// Display form for adding a user to the group					echo "<form action=\"groups.php\" method=\"post\">\n";		echo "<select name=\"user\">";		while (!$users->EOF) {			$uname = $misc->printVal($users->fields['usename']);			echo "<option value=\"{$uname}\"",				($uname == $_POST['user']) ? ' selected="selected"' : '', ">{$uname}</option>\n";			$users->moveNext();		}		echo "</select>\n";		echo "<input type=\"submit\" value=\"{$lang['straddmember']}\" />\n";		echo $misc->form;		echo "<input type=\"hidden\" name=\"group\" value=\"", htmlspecialchars($_REQUEST['group']), "\" />\n";		echo "<input type=\"hidden\" name=\"action\" value=\"add_member\" />\n";		echo "</form>\n";				echo "<p><a class=\"navlink\" href=\"groups.php?{$misc->href}\">{$lang['strshowallgroups']}</a></p>\n";	}		/**	 * Show confirmation of drop and perform actual drop	 */	function doDrop($confirm) {		global $data, $misc;		global $lang;		if ($confirm) {			$misc->printTrail('group');			$misc->printTitle($lang['strdrop'],'pg.group.drop');						echo "<p>", sprintf($lang['strconfdropgroup'], $misc->printVal($_REQUEST['group'])), "</p>\n";						echo "<form action=\"groups.php\" method=\"post\">\n";			echo $misc->form;			echo "<input type=\"hidden\" name=\"action\" value=\"drop\" />\n";			echo "<input type=\"hidden\" name=\"group\" value=\"", htmlspecialchars($_REQUEST['group']), "\" />\n";			echo "<input type=\"submit\" name=\"drop\" value=\"{$lang['strdrop']}\" />\n";			echo "<input type=\"submit\" name=\"cancel\" value=\"{$lang['strcancel']}\" />\n";			echo "</form>\n";		}		else {			$status = $data->dropGroup($_REQUEST['group']);			if ($status == 0)				doDefault($lang['strgroupdropped']);			else				doDefault($lang['strgroupdroppedbad']);		}			}		/**	 * Displays a screen where they can enter a new group	 */	function doCreate($msg = '') {		global $data, $misc;		global $lang;				if (!isset($_POST['name'])) $_POST['name'] = '';		if (!isset($_POST['members'])) $_POST['members'] = array();		// Fetch a list of all users in the cluster		$users = $data->getUsers();				$misc->printTrail('server');		$misc->printTitle($lang['strcreategroup'],'pg.group.create');		$misc->printMsg($msg);		echo "<form action=\"\" method=\"post\">\n";		echo $misc->form;		echo "<table>\n";		echo "\t<tr>\n\t\t<th class=\"data left required\">{$lang['strname']}</th>\n";		echo "\t\t<td class=\"data\"><input size=\"32\" maxlength=\"{$data->_maxNameLen}\" name=\"name\" value=\"", htmlspecialchars($_POST['name']), "\" /></td>\n\t</tr>\n";		if ($users->recordCount() > 0) {			echo "\t<tr>\n\t\t<th class=\"data left\">{$lang['strmembers']}</th>\n";			echo "\t\t<td class=\"data\">\n";			echo "\t\t\t<select name=\"members[]\" multiple=\"multiple\" size=\"", min(40, $users->recordCount()), "\">\n";			while (!$users->EOF) {				$username = $users->fields['usename'];				echo "\t\t\t\t<option value=\"{$username}\"",						(in_array($username, $_POST['members']) ? ' selected="selected"' : ''), ">", $misc->printVal($username), "</option>\n";				$users->moveNext();			}			echo "\t\t\t</select>\n";			echo "\t\t</td>\n\t</tr>\n";			}		echo "</table>\n";		echo "<p><input type=\"hidden\" name=\"action\" value=\"save_create\" />\n";		echo "<input type=\"submit\" value=\"{$lang['strcreate']}\" />\n";		echo "<input type=\"submit\" name=\"cancel\" value=\"{$lang['strcancel']}\" /></p>\n";		echo "</form>\n";	}		/**	 * Actually creates the new group in the database	 */	function doSaveCreate() {		global $data;		global $lang;		if (!isset($_POST['members'])) $_POST['members'] = array();		// Check form vars		if (trim($_POST['name']) == '')			doCreate($lang['strgroupneedsname']);		else {					$status = $data->createGroup($_POST['name'], $_POST['members']);			if ($status == 0)				doDefault($lang['strgroupcreated']);			else				doCreate($lang['strgroupcreatedbad']);		}	}		/**	 * Show default list of groups in the database	 */	function doDefault($msg = '') {		global $data, $misc;		global $lang;				$misc->printTrail('server');		$misc->printTabs('server','groups');		$misc->printMsg($msg);				$groups = $data->getGroups();				$columns = array(			'group' => array(				'title' => $lang['strgroup'],				'field' => field('groname'),				'url'   => "groups.php?action=properties&amp;{$misc->href}&amp;",				'vars'  => array('group' => 'groname'),			),			'actions' => array(				'title' => $lang['stractions'],			),		);				$actions = array(			'drop' => array(				'title' => $lang['strdrop'],				'url'   => "groups.php?action=confirm_drop&amp;{$misc->href}&amp;",				'vars'  => array('group' => 'groname'),			),		);				$misc->printTable($groups, $columns, $actions, $lang['strnogroups']);				echo "<p><a class=\"navlink\" href=\"groups.php?action=create&amp;{$misc->href}\">{$lang['strcreategroup']}</a></p>\n";	}	$misc->printHeader($lang['strgroups']);	$misc->printBody();	switch ($action) {		case 'add_member':			doAddMember();			break;		case 'drop_member':			if (isset($_REQUEST['drop'])) doDropMember(false);			else doProperties();			break;		case 'confirm_drop_member':			doDropMember(true);			break;					case 'save_create':			if (isset($_REQUEST['cancel'])) doDefault();			else doSaveCreate();			break;		case 'create':			doCreate();			break;		case 'drop':			if (isset($_REQUEST['drop'])) doDrop(false);			else doDefault();			break;		case 'confirm_drop':			doDrop(true);			break;					case 'save_edit':			doSaveEdit();			break;		case 'edit':			doEdit();			break;		case 'properties':			doProperties();			break;		default:			doDefault();			break;	}		$misc->printFooter();?>
<?php/** * PostgreSQL 8.3 support * * $Id: Postgres82.php,v 1.10 2007/12/28 16:21:25 ioguix Exp $ */include_once('./classes/database/Postgres.php');class Postgres83 extends Postgres {	var $major_version = 8.3;	// List of all legal privileges that can be applied to different types	// of objects.	var $privlist = array(  		'table' => array('SELECT', 'INSERT', 'UPDATE', 'DELETE', 'REFERENCES', 'TRIGGER', 'ALL PRIVILEGES'),  		'view' => array('SELECT', 'INSERT', 'UPDATE', 'DELETE', 'REFERENCES', 'TRIGGER', 'ALL PRIVILEGES'),  		'sequence' => array('SELECT', 'UPDATE', 'ALL PRIVILEGES'),  		'database' => array('CREATE', 'TEMPORARY', 'CONNECT', 'ALL PRIVILEGES'),  		'function' => array('EXECUTE', 'ALL PRIVILEGES'),  		'language' => array('USAGE', 'ALL PRIVILEGES'),  		'schema' => array('CREATE', 'USAGE', 'ALL PRIVILEGES'),  		'tablespace' => array('CREATE', 'ALL PRIVILEGES')	);	// List of characters in acl lists and the privileges they	// refer to.	var $privmap = array(		'r' => 'SELECT',		'w' => 'UPDATE',		'a' => 'INSERT',  		'd' => 'DELETE',  		'R' => 'RULE',  		'x' => 'REFERENCES',  		't' => 'TRIGGER',  		'X' => 'EXECUTE',  		'U' => 'USAGE', 		'C' => 'CREATE',  		'T' => 'TEMPORARY',  		'c' => 'CONNECT'	);	/**	 * Constructor	 * @param $conn The database connection	 */	function Postgres83($conn) {		$this->Postgres($conn);	}	// Help functions	function getHelpPages() {		include_once('./help/PostgresDoc83.php');		return $this->help_page;	}	// Databse functions	/**	 * Return all database available on the server	 * @param $currentdatabase database name that should be on top of the resultset	 * 	 * @return A list of databases, sorted alphabetically	 */	function getDatabases($currentdatabase = NULL) {		global $conf, $misc;		$server_info = $misc->getServerInfo();		if (isset($conf['owned_only']) && $conf['owned_only'] && !$this->isSuperUser($server_info['username'])) {			$username = $server_info['username'];			$this->clean($username);			$clause = " AND pr.rolname='{$username}'";		}		else $clause = '';		if ($currentdatabase != NULL) {			$this->clean($currentdatabase);			$orderby = "ORDER BY pdb.datname = '{$currentdatabase}' DESC, pdb.datname";		}		else			$orderby = "ORDER BY pdb.datname";		if (!$conf['show_system'])			$where = ' AND NOT pdb.datistemplate';		else			$where = ' AND pdb.datallowconn';		$sql = "			SELECT pdb.datname AS datname, pr.rolname AS datowner, pg_encoding_to_char(encoding) AS datencoding,				(SELECT description FROM pg_catalog.pg_shdescription pd WHERE pdb.oid=pd.objoid) AS datcomment,				(SELECT spcname FROM pg_catalog.pg_tablespace pt WHERE pt.oid=pdb.dattablespace) AS tablespace,				pg_catalog.pg_database_size(pdb.oid) as dbsize			FROM pg_catalog.pg_database pdb LEFT JOIN pg_catalog.pg_roles pr ON (pdb.datdba = pr.oid)			WHERE true				{$where}				{$clause}			{$orderby}";		return $this->selectSet($sql);	}	// Administration functions	/**	 * Returns all available autovacuum per table information.	 * @return A recordset	 */	function getTableAutovacuum($table='') {		$sql = '';		if ($table !== '') {			$this->clean($table);			$c_schema = $this->_schema;			$this->clean($c_schema);			$sql = "				SELECT vacrelid, nspname, relname, 					CASE enabled 						WHEN 't' THEN 'on' 						ELSE 'off' 					END AS autovacuum_enabled, vac_base_thresh AS autovacuum_vacuum_threshold,					vac_scale_factor AS autovacuum_vacuum_scale_factor, anl_base_thresh AS autovacuum_analyze_threshold, 					anl_scale_factor AS autovacuum_analyze_scale_factor, vac_cost_delay AS autovacuum_vacuum_cost_delay, 					vac_cost_limit AS autovacuum_vacuum_cost_limit				FROM pg_autovacuum AS a					join pg_class AS c on (c.oid=a.vacrelid)					join pg_namespace AS n on (n.oid=c.relnamespace)				WHERE c.relname = '{$table}' AND n.nspname = '{$c_schema}'				ORDER BY nspname, relname			";		}		else {			$sql = "				SELECT vacrelid, nspname, relname, 					CASE enabled 						WHEN 't' THEN 'on' 						ELSE 'off' 					END AS autovacuum_enabled, vac_base_thresh AS autovacuum_vacuum_threshold,					vac_scale_factor AS autovacuum_vacuum_scale_factor, anl_base_thresh AS autovacuum_analyze_threshold, 					anl_scale_factor AS autovacuum_analyze_scale_factor, vac_cost_delay AS autovacuum_vacuum_cost_delay, 					vac_cost_limit AS autovacuum_vacuum_cost_limit				FROM pg_autovacuum AS a					join pg_class AS c on (c.oid=a.vacrelid)					join pg_namespace AS n on (n.oid=c.relnamespace)				ORDER BY nspname, relname			";		}		return $this->selectSet($sql);	}		function saveAutovacuum($table, $vacenabled, $vacthreshold, $vacscalefactor, $anathresold, 		$anascalefactor, $vaccostdelay, $vaccostlimit) 	{		$defaults = $this->getAutovacuum();		$c_schema = $this->_schema;		$this->clean($c_schema);		$this->clean($table);				$rs = $this->selectSet("			SELECT c.oid 			FROM pg_catalog.pg_class AS c 				LEFT JOIN pg_catalog.pg_namespace AS n ON (n.oid=c.relnamespace)			WHERE 				c.relname = '{$table}' AND n.nspname = '{$c_schema}'		");				if ($rs->EOF)			return -1;					$toid = $rs->fields('oid');		unset ($rs);					if (empty($_POST['autovacuum_vacuum_threshold']))			$_POST['autovacuum_vacuum_threshold'] = $defaults['autovacuum_vacuum_threshold'];				if (empty($_POST['autovacuum_vacuum_scale_factor']))			$_POST['autovacuum_vacuum_scale_factor'] = $defaults['autovacuum_vacuum_scale_factor'];				if (empty($_POST['autovacuum_analyze_threshold']))			$_POST['autovacuum_analyze_threshold'] = $defaults['autovacuum_analyze_threshold'];				if (empty($_POST['autovacuum_analyze_scale_factor']))			$_POST['autovacuum_analyze_scale_factor'] = $defaults['autovacuum_analyze_scale_factor'];				if (empty($_POST['autovacuum_vacuum_cost_delay']))			$_POST['autovacuum_vacuum_cost_delay'] = $defaults['autovacuum_vacuum_cost_delay'];				if (empty($_POST['autovacuum_vacuum_cost_limit']))			$_POST['autovacuum_vacuum_cost_limit'] = $defaults['autovacuum_vacuum_cost_limit'];				if (empty($_POST['vacuum_freeze_min_age']))			$_POST['vacuum_freeze_min_age'] = $defaults['vacuum_freeze_min_age'];				if (empty($_POST['autovacuum_freeze_max_age']))			$_POST['autovacuum_freeze_max_age'] = $defaults['autovacuum_freeze_max_age'];				$rs = $this->selectSet("SELECT vacrelid 			FROM \"pg_catalog\".\"pg_autovacuum\" 			WHERE vacrelid = {$toid};");				$status = -1; // ini		if (isset($rs->fields['vacrelid']) and ($rs->fields['vacrelid'] == $toid)) {			// table exists in pg_autovacuum, UPDATE			$sql = sprintf("UPDATE \"pg_catalog\".\"pg_autovacuum\" SET 						enabled = '%s',						vac_base_thresh = %s,						vac_scale_factor = %s,						anl_base_thresh = %s,						anl_scale_factor = %s,						vac_cost_delay = %s,						vac_cost_limit = %s,						freeze_min_age = %s,						freeze_max_age = %s					WHERE vacrelid = {$toid};				",				($_POST['autovacuum_enabled'] == 'on')? 't':'f',				$_POST['autovacuum_vacuum_threshold'],				$_POST['autovacuum_vacuum_scale_factor'],				$_POST['autovacuum_analyze_threshold'],				$_POST['autovacuum_analyze_scale_factor'],				$_POST['autovacuum_vacuum_cost_delay'],				$_POST['autovacuum_vacuum_cost_limit'],				$_POST['vacuum_freeze_min_age'],				$_POST['autovacuum_freeze_max_age']			);			$status = $this->execute($sql);		}		else {			// table doesn't exists in pg_autovacuum, INSERT			$sql = sprintf("INSERT INTO \"pg_catalog\".\"pg_autovacuum\" 				VALUES (%s, '%s', %s, %s, %s, %s, %s, %s, %s, %s )				WHERE 					c.relname = '{$table}' AND n.nspname = '{$c_schema}';",				$toid,				($_POST['autovacuum_enabled'] == 'on')? 't':'f',				$_POST['autovacuum_vacuum_threshold'],				$_POST['autovacuum_vacuum_scale_factor'],				$_POST['autovacuum_analyze_threshold'],				$_POST['autovacuum_analyze_scale_factor'],				$_POST['autovacuum_vacuum_cost_delay'],				$_POST['autovacuum_vacuum_cost_limit'],				$_POST['vacuum_freeze_min_age'],				$_POST['autovacuum_freeze_max_age']			);			$status = $this->execute($sql);		}				return $status;	}	function dropAutovacuum($table) {		$c_schema = $this->_schema;		$this->clean($c_schema);		$this->clean($table);				$rs = $this->selectSet("			SELECT c.oid 			FROM pg_catalog.pg_class AS c 				LEFT JOIN pg_catalog.pg_namespace AS n ON (n.oid=c.relnamespace)			WHERE 				c.relname = '{$table}' AND n.nspname = '{$c_schema}'		");				return $this->deleteRow('pg_autovacuum', array('vacrelid' => $rs->fields['oid']), 'pg_catalog');	}		// Sequence functions		/**	 * Alter a sequence's properties	 * @param $seqrs The sequence RecordSet returned by getSequence()	 * @param $increment The sequence incremental value	 * @param $minvalue The sequence minimum value	 * @param $maxvalue The sequence maximum value	 * @param $restartvalue The sequence current value	 * @param $cachevalue The sequence cache value	 * @param $cycledvalue Sequence can cycle ?	 * @param $startvalue The sequence start value when issueing a restart (ignored)	 * @return 0 success	 */	function alterSequenceProps($seqrs, $increment,	$minvalue, $maxvalue,								$restartvalue, $cachevalue, $cycledvalue, $startvalue) {		$sql = '';		/* vars are cleaned in _alterSequence */		if (!empty($increment) && ($increment != $seqrs->fields['increment_by'])) $sql .= " INCREMENT {$increment}";		if (!empty($minvalue) && ($minvalue != $seqrs->fields['min_value'])) $sql .= " MINVALUE {$minvalue}";		if (!empty($maxvalue) && ($maxvalue != $seqrs->fields['max_value'])) $sql .= " MAXVALUE {$maxvalue}";		if (!empty($restartvalue) && ($restartvalue != $seqrs->fields['last_value'])) $sql .= " RESTART {$restartvalue}";		if (!empty($cachevalue) && ($cachevalue != $seqrs->fields['cache_value'])) $sql .= " CACHE {$cachevalue}";		// toggle cycle yes/no		if (!is_null($cycledvalue))	$sql .= (!$cycledvalue ? ' NO ' : '') . " CYCLE";		if ($sql != '') {			$f_schema = $this->_schema;			$this->fieldClean($f_schema);			$sql = "ALTER SEQUENCE \"{$f_schema}\".\"{$seqrs->fields['seqname']}\" {$sql}";			return $this->execute($sql);		}		return 0;	}	/**	 * Alter a sequence's owner	 * @param $seqrs The sequence RecordSet returned by getSequence()	 * @param $name The new owner for the sequence	 * @return 0 success	 */	function alterSequenceOwner($seqrs, $owner) {		// If owner has been changed, then do the alteration.  We are		// careful to avoid this generally as changing owner is a		// superuser only function.		/* vars are cleaned in _alterSequence */		if (!empty($owner) && ($seqrs->fields['seqowner'] != $owner)) {			$f_schema = $this->_schema;			$this->fieldClean($f_schema);			$sql = "ALTER TABLE \"{$f_schema}\".\"{$seqrs->fields['seqname']}\" OWNER TO \"{$owner}\"";			return $this->execute($sql);		}		return 0;	}	function hasQueryKill() { return false; }	function hasDatabaseCollation() { return false; }	function hasAlterSequenceStart() { return false; }}?>
<?php	/**	 * Manage servers	 *	 * $Id: servers.php,v 1.12 2008/02/18 22:20:26 ioguix Exp $	 */	// Include application functions	$_no_db_connection = true;	include_once('./libraries/lib.inc.php');		$action = (isset($_REQUEST['action'])) ? $_REQUEST['action'] : '';	if (!isset($msg)) $msg = '';		function doLogout() {		global $misc, $lang, $_reload_browser;				$server_info = $misc->getServerInfo($_REQUEST['logoutServer']);		$misc->setServerInfo(null, null, $_REQUEST['logoutServer']);		unset($_SESSION['sharedUsername'], $_SESSION['sharedPassword']);		doDefault(sprintf($lang['strlogoutmsg'], $server_info['desc']));				$_reload_browser = true;	}	function doDefault($msg = '') {		global $conf, $misc;		global $lang;				$misc->printTabs('root','servers');		$misc->printMsg($msg);				$group = isset($_GET['group']) ? $_GET['group'] : false;				$servers = $misc->getServers(true, $group);				function svPre(&$rowdata, $actions) {			$actions['logout']['disable'] = empty($rowdata->fields['username']);			return $actions;		}				$columns = array(			'server' => array(				'title' => $lang['strserver'],				'field' => field('desc'),				'url'   => "redirect.php?subject=server&amp;",				'vars'  => array('server' => 'id'),			),			'host' => array(				'title' => $lang['strhost'],				'field' => field('host'),			),			'port' => array(				'title' => $lang['strport'],				'field' => field('port'),			),			'username' => array(				'title' => $lang['strusername'],				'field' => field('username'),			),			'actions' => array(				'title' => $lang['stractions'],			),		);				$actions = array(			'logout' => array(				'title' => $lang['strlogout'],				'url'   => "servers.php?action=logout&amp;",				'vars'  => array('logoutServer' => 'id'),			),		);				if (($group !== false) and isset($conf['srv_groups'][$group])) {			printf("<h2>{$lang['strgroupservers']}</h2>", htmlentities($conf['srv_groups'][$group]['desc']));			$actions['logout']['url'] .= "group=" . htmlentities($group) . "&amp;";		}				$misc->printTable($servers, $columns, $actions, $lang['strnoobjects'], 'svPre');				if (isset($conf['srv_groups'])) {			echo "<br /><ul class=\"navlink\">\n";			echo "\t<li><a href=\"servers.php\">{$lang['strallservers']}</a></li>\n";			foreach ($conf['srv_groups'] as $id => $grp) {				echo "\t<li><a href=\"servers.php?group={$id}\">", htmlentities($grp['desc']), "</a></li>\n";			}			echo "</ul>\n";					}	}		function doTree($group = false) {		global $misc;				$servers = $misc->getServers(true, $group);				$reqvars = $misc->getRequestVars('server');				$attrs = array(			'text'   => field('desc'),						// Show different icons for logged in/out			'icon'   => ifempty(field('username'), 'DisconnectedServer', 'Server'),						'toolTip'=> field('id'),						'action' => url('redirect.php',							$reqvars,							array('server' => field('id'))						),						// Only create a branch url if the user has			// logged into the server.			'branch' => ifempty(field('username'), false,							url('all_db.php',								$reqvars,								array(									'action' => 'tree',									'server' => field('id')								)							)						),		);				$misc->printTreeXML($servers, $attrs);		exit;	}		function doGroupsTree() {		global $misc;				$groups = $misc->getServersGroups();		function escape($fields) {			global $lang;			if ($fields['id'] === 'all') {				return $lang['strallservers'];			}			else return value(field('desc'), $fields, 'xml');		}		$attrs = array(			'text'   => noEscape(callback('escape')),			'icon'   => 'Servers',						'action' => url('servers.php',				array(					'group' => field('id')				)			),			'branch' => url('servers.php',				array(					'action' => 'tree',					'group' => field('id')				)			)		);				$misc->printTreeXML($groups, $attrs);		exit;	}		if ($action == 'tree') {		if (isset($_GET['group'])) doTree($_GET['group']);		else doTree(false);	}	if ($action == 'groupstree') doGroupsTree();		$misc->printHeader($lang['strservers']);	$misc->printBody();	$misc->printTrail('root');	switch ($action) {		case 'logout':			doLogout();			break;		default:			doDefault($msg);			break;	}	$misc->printFooter();?>
<?php	/**	 * Manage opclasss in a database	 *	 * $Id: opclasses.php,v 1.10 2007/08/31 18:30:11 ioguix Exp $	 */	// Include application functions	include_once('./libraries/lib.inc.php');		$action = (isset($_REQUEST['action'])) ? $_REQUEST['action'] : '';	if (!isset($msg)) $msg = '';	/**	 * Show default list of opclasss in the database	 */	function doDefault($msg = '') {		global $data, $conf, $misc;		global $lang;				$misc->printTrail('schema');		$misc->printTabs('schema','opclasses');		$misc->printMsg($msg);				$opclasses = $data->getOpClasses();				$columns = array(			'accessmethod' => array(				'title' => $lang['straccessmethod'],				'field' => field('amname'),			),			'opclass' => array(				'title' => $lang['strname'],				'field' => field('opcname'),			),			'type' => array(				'title' => $lang['strtype'],				'field' => field('opcintype'),			),			'default' => array(				'title' => $lang['strdefault'],				'field' => field('opcdefault'),				'type'  => 'yesno',			),			'comment' => array(				'title' => $lang['strcomment'],				'field' => field('opccomment'),			),		);				$actions = array();				$misc->printTable($opclasses, $columns, $actions, $lang['strnoopclasses']);	}		/**	 * Generate XML for the browser tree.	 */	function doTree() {		global $misc, $data;				$opclasses = $data->getOpClasses();				// OpClass prototype: "op_class/access_method"		$proto = concat(field('opcname'),'/',field('amname'));				$attrs = array(			'text'   => $proto,			'icon'   => 'OperatorClass',			'toolTip'=> field('opccomment'),		);				$misc->printTreeXML($opclasses, $attrs);		exit;	}		if ($action == 'tree') doTree();		$misc->printHeader($lang['stropclasses']);	$misc->printBody();	switch ($action) {		default:			doDefault();			break;	}		$misc->printFooter();?>
<?php	/**	 * List Columns properties in tables	 *	 * $Id: colproperties.php	 */	// Include application functions	include_once('./libraries/lib.inc.php');	$action = (isset($_REQUEST['action'])) ? $_REQUEST['action'] : '';	if (isset($_REQUEST['table']))		$tableName =& $_REQUEST['table'];	elseif (isset($_REQUEST['view']))		$tableName =& $_REQUEST['view'];	else 		die($lang['strnotableprovided']);	/**	 * Displays a screen where they can alter a column	 */	function doAlter($msg = '') {		global $data, $misc, $_reload_browser;		global $lang;		if (!isset($_REQUEST['stage'])) $_REQUEST['stage'] = 1;		switch ($_REQUEST['stage']) {			case 1:				$misc->printTrail('column');				$misc->printTitle($lang['stralter'], 'pg.column.alter'); 				$misc->printMsg($msg);				echo "<script src=\"tables.js\" type=\"text/javascript\"></script>";				echo "<form action=\"colproperties.php\" method=\"post\">\n";				// Output table header				echo "<table>\n";				echo "<tr><th class=\"data required\">{$lang['strname']}</th>\n";				if ($data->hasAlterColumnType()) {					echo "<th class=\"data required\" colspan=\"2\">{$lang['strtype']}</th>\n";					echo "<th class=\"data\">{$lang['strlength']}</th>\n";				}				else {					echo "<th class=\"data required\">{$lang['strtype']}</th>\n";				}				echo "<th class=\"data\">{$lang['strnotnull']}</th>\n<th class=\"data\">{$lang['strdefault']}</th>\n<th class=\"data\">{$lang['strcomment']}</th></tr>\n";				$column = $data->getTableAttributes($_REQUEST['table'], $_REQUEST['column']);				$column->fields['attnotnull'] = $data->phpBool($column->fields['attnotnull']);				// Upon first drawing the screen, load the existing column information				// from the database.				if (!isset($_REQUEST['default'])) {					$_REQUEST['field'] = $column->fields['attname'];					$_REQUEST['type'] = $column->fields['base_type'];					// Check to see if its' an array type...					// XXX: HACKY					if (substr($column->fields['base_type'], strlen($column->fields['base_type']) - 2) == '[]') {						$_REQUEST['type'] = substr($column->fields['base_type'], 0, strlen($column->fields['base_type']) - 2);						$_REQUEST['array'] = '[]';					}					else {						$_REQUEST['type'] = $column->fields['base_type'];						$_REQUEST['array'] = '';					}					// To figure out the length, look in the brackets :(					// XXX: HACKY					if ($column->fields['type'] != $column->fields['base_type'] && preg_match('/\\(([0-9, ]*)\\)/', $column->fields['type'], $bits)) {						$_REQUEST['length'] = $bits[1];					}					else						$_REQUEST['length'] = '';					$_REQUEST['default'] = $_REQUEST['olddefault'] = $column->fields['adsrc'];					if ($column->fields['attnotnull']) $_REQUEST['notnull'] = 'YES';					$_REQUEST['comment'] = $column->fields['comment'];				}								// Column name				echo "<tr><td><input name=\"field\" size=\"16\" maxlength=\"{$data->_maxNameLen}\" value=\"",					htmlspecialchars($_REQUEST['field']), "\" /></td>\n";									// Column type				$escaped_predef_types = array(); // the JS escaped array elements				if ($data->hasAlterColumnType()) {					// Fetch all available types					$types = $data->getTypes(true, false, true);					$types_for_js = array();										echo "<td><select name=\"type\" id=\"type\" onchange=\"checkLengths(document.getElementById('type').value,'');\">\n";									while (!$types->EOF) {						$typname = $types->fields['typname'];						$types_for_js[] = $typname;						echo "\t<option value=\"", htmlspecialchars($typname), "\"", ($typname == $_REQUEST['type']) ? ' selected="selected"' : '', ">",							$misc->printVal($typname), "</option>\n";						$types->moveNext();					}					echo "</select></td>\n";										// Output array type selector					echo "<td><select name=\"array\">\n";					echo "\t<option value=\"\"", ($_REQUEST['array'] == '') ? ' selected="selected"' : '', "></option>\n";					echo "\t<option value=\"[]\"", ($_REQUEST['array'] == '[]') ? ' selected="selected"' : '', ">[ ]</option>\n";					echo "</select></td>\n";					$predefined_size_types = array_intersect($data->predefined_size_types, $types_for_js);					foreach($predefined_size_types as $value) {						$escaped_predef_types[] = "'{$value}'";					}						echo "<td><input name=\"length\" id=\"lengths\" size=\"8\" value=\"",						htmlspecialchars($_REQUEST['length']), "\" /></td>\n";				} else {					// Otherwise draw the read-only type name					echo "<td>", $misc->printVal($data->formatType($column->fields['type'], $column->fields['atttypmod'])), "</td>\n";				}								echo "<td><input type=\"checkbox\" name=\"notnull\"", (isset($_REQUEST['notnull'])) ? ' checked="checked"' : '', " /></td>\n";				echo "<td><input name=\"default\" size=\"20\" value=\"", 					htmlspecialchars($_REQUEST['default']), "\" /></td>\n";				echo "<td><input name=\"comment\" size=\"40\" value=\"", 					htmlspecialchars($_REQUEST['comment']), "\" /></td></tr>\n";				echo "</table>\n";				echo "<p><input type=\"hidden\" name=\"action\" value=\"properties\" />\n";				echo "<input type=\"hidden\" name=\"stage\" value=\"2\" />\n";				echo $misc->form;				echo "<input type=\"hidden\" name=\"table\" value=\"", htmlspecialchars($_REQUEST['table']), "\" />\n";				echo "<input type=\"hidden\" name=\"column\" value=\"", htmlspecialchars($_REQUEST['column']), "\" />\n";				echo "<input type=\"hidden\" name=\"olddefault\" value=\"", htmlspecialchars($_REQUEST['olddefault']), "\" />\n";				if ($column->fields['attnotnull']) echo "<input type=\"hidden\" name=\"oldnotnull\" value=\"on\" />\n";				echo "<input type=\"hidden\" name=\"oldtype\" value=\"", htmlspecialchars($data->formatType($column->fields['type'], $column->fields['atttypmod'])), "\" />\n";				// Add hidden variables to suppress error notices if we don't support altering column type				if (!$data->hasAlterColumnType()) {					echo "<input type=\"hidden\" name=\"type\" value=\"", htmlspecialchars($_REQUEST['type']), "\" />\n";									echo "<input type=\"hidden\" name=\"length\" value=\"", htmlspecialchars($_REQUEST['length']), "\" />\n";									echo "<input type=\"hidden\" name=\"array\" value=\"", htmlspecialchars($_REQUEST['array']), "\" />\n";								}				echo "<input type=\"submit\" value=\"{$lang['stralter']}\" />\n";				echo "<input type=\"submit\" name=\"cancel\" value=\"{$lang['strcancel']}\" /></p>\n";				echo "</form>\n";				echo "<script type=\"text/javascript\">predefined_lengths = new Array(". implode(",",$escaped_predef_types) .");checkLengths(document.getElementById('type').value,'');</script>\n";						break;			case 2:				// Check inputs				if (trim($_REQUEST['field']) == '') {					$_REQUEST['stage'] = 1;					doAlter($lang['strcolneedsname']);					return;				}				if (!isset($_REQUEST['length'])) $_REQUEST['length'] = '';				$status = $data->alterColumn($_REQUEST['table'], $_REQUEST['column'], $_REQUEST['field'], 							     isset($_REQUEST['notnull']), isset($_REQUEST['oldnotnull']), 							     $_REQUEST['default'], $_REQUEST['olddefault'],							     $_REQUEST['type'], $_REQUEST['length'], $_REQUEST['array'], $_REQUEST['oldtype'],							     $_REQUEST['comment']);				if ($status == 0) {					if ($_REQUEST['column'] != $_REQUEST['field']) {						$_REQUEST['column'] = $_REQUEST['field'];						$_reload_browser = true;					}					doDefault($lang['strcolumnaltered']);				}				else {					$_REQUEST['stage'] = 1;					doAlter($lang['strcolumnalteredbad']);					return;				}				break;			default:				echo "<p>{$lang['strinvalidparam']}</p>\n";		}	}	/**	 * Show default list of columns in the table	 */	function doDefault($msg = '', $isTable = true) {		global $data, $conf, $misc, $tableName;		global $lang;		function attPre(&$rowdata) {			global $data;			$rowdata->fields['+type'] = $data->formatType($rowdata->fields['type'], $rowdata->fields['atttypmod']);		}				if (empty($_REQUEST['column']))			$msg.= "<br/>{$lang['strnoobjects']}";					$misc->printTrail('column');			//$misc->printTitle($lang['strcolprop']);			$misc->printTabs('column','properties');			$misc->printMsg($msg);		if (! empty($_REQUEST['column'])) {			// Get table			$tdata = $data->getTable($tableName);			// Get columns			$attrs = $data->getTableAttributes($tableName, $_REQUEST['column']);			// Show comment if any			if ($attrs->fields['comment'] !== null)				echo "<p class=\"comment\">", $misc->printVal($attrs->fields['comment']), "</p>\n";			$column = array(				'column' => array(					'title' => $lang['strcolumn'],					'field' => field('attname'),				),				'type' => array(					'title' => $lang['strtype'],					'field' => field('+type'),				)			);					if ($isTable) {				$column['notnull'] = array(					'title' => $lang['strnotnull'],					'field' => field('attnotnull'),					'type'  => 'bool',					'params'=> array('true' => 'NOT NULL', 'false' => '')				);				$column['default'] = array(					'title' => $lang['strdefault'],					'field' => field('adsrc'),				);			}			$actions=array();			$misc->printTable($attrs, $column, $actions, null, 'attPre');			echo "<br />\n";			echo "<ul class=\"navlink\">\n";			$f_attname = $_REQUEST['column'];			$f_table = $tableName;			$f_schema = $data->_schema;			$data->fieldClean($f_attname);			$data->fieldClean($f_table);			$data->fieldClean($f_schema);			$query_url = urlencode("SELECT \"{$f_attname}\", count(*) AS \"count\" FROM \"{$f_schema}\".\"{$f_table}\" GROUP BY \"{$f_attname}\" ORDER BY \"{$f_attname}\"") ;			if ($isTable) {				$return_url = urlencode("colproperties.php?{$misc->href}&amp;table=". urlencode($tableName)					."&amp;column=". urlencode($_REQUEST['column']));				/* Browse link */				/* FIXME browsing a col should somehow be a action so we don't				 * send an ugly SQL in the URL */				echo "\t<li><a href=\"display.php?{$misc->href}&amp;subject=column&amp;table=",					urlencode($_REQUEST['table']),					"&amp;column=", urlencode($_REQUEST['column']),					"&amp;return_url={$return_url}&amp;return_desc=", urlencode($lang['strback']), 					"&amp;query={$query_url}\">{$lang['strbrowse']}</a></li>\n";				/* Edit link */				echo "\t<li><a href=\"colproperties.php?action=properties&amp;{$misc->href}&amp;table=", urlencode($tableName),				    "&amp;column=", urlencode($_REQUEST['column']) . "\">{$lang['stralter']}</a></li>\n";									echo "\t<li><a href=\"tblproperties.php?action=confirm_drop&amp;{$misc->href}&amp;table=", urlencode($tableName),						"&amp;column=" . urlencode($_REQUEST['column']) . "\">{$lang['strdrop']}</a></li>\n";			} else {				$return_url = urlencode("colproperties.php?{$misc->href}&amp;view=". urlencode($tableName)					."&amp;column=". urlencode($_REQUEST['column']));				/* Browse link */				echo "\t<li><a href=\"display.php?{$misc->href}&amp;subject=column&amp;column=",					urlencode($_REQUEST['column']), "&amp;return_url={$return_url}&amp;return_desc=", urlencode($lang['strback']),					"&amp;query={$query_url}\">{$lang['strbrowse']}</a></li>\n";			}			echo "</ul>\n";		}	}	$misc->printHeader($lang['strtables'] . ' - ' . $tableName);	$misc->printBody();	if (isset($_REQUEST['view']))		doDefault(null, false);	else		switch ($action) {			case 'properties':				if (isset($_POST['cancel'])) doDefault();				else doAlter();				break;			default:				doDefault();				break;		}		$misc->printFooter();?>
<?php	/**	 * Manage privileges in a database	 *	 * $Id: privileges.php,v 1.45 2007/09/13 13:41:01 ioguix Exp $	 */	// Include application functions	include_once('./libraries/lib.inc.php');		$action = (isset($_REQUEST['action'])) ? $_REQUEST['action'] : '';	if (!isset($msg)) $msg = '';	/**	 * Grant permissions on an object to a user	 * @param $confirm To show entry screen	 * @param $mode 'grant' or 'revoke'	 * @param $msg (optional) A message to show	 */	function doAlter($confirm, $mode, $msg = '') {		global $data, $misc;		global $lang;		if (!isset($_REQUEST['username'])) $_REQUEST['username'] = array();		if (!isset($_REQUEST['groupname'])) $_REQUEST['groupname'] = array();		if (!isset($_REQUEST['privilege'])) $_REQUEST['privilege'] = array();			if ($confirm) {			// Get users from the database			$users = $data->getUsers();			// Get groups from the database			$groups = $data->getGroups();					$misc->printTrail($_REQUEST['subject']);						switch ($mode) {				case 'grant':					$misc->printTitle($lang['strgrant'],'pg.privilege.grant');					break;				case 'revoke':					$misc->printTitle($lang['strrevoke'],'pg.privilege.revoke');					break;			}			$misc->printMsg($msg);						echo "<form action=\"privileges.php\" method=\"post\">\n";			echo "<table>\n";			echo "<tr><th class=\"data left\">{$lang['strusers']}</th>\n";			echo "<td class=\"data1\"><select name=\"username[]\" multiple=\"multiple\" size=\"", min(6, $users->recordCount()), "\">\n";			while (!$users->EOF) {				$uname = htmlspecialchars($users->fields['usename']);				echo "<option value=\"{$uname}\"",					in_array($users->fields['usename'], $_REQUEST['username']) ? ' selected="selected"' : '', ">{$uname}</option>\n";				$users->moveNext();			}			echo "</select></td></tr>\n";			echo "<tr><th class=\"data left\">{$lang['strgroups']}</th>\n";			echo "<td class=\"data1\">\n";			echo "<input type=\"checkbox\" id=\"public\" name=\"public\"", (isset($_REQUEST['public']) ? ' checked="checked"' : ''), " /><label for=\"public\">PUBLIC</label>\n";			// Only show groups if there are groups!			if ($groups->recordCount() > 0) {				echo "<br /><select name=\"groupname[]\" multiple=\"multiple\" size=\"", min(6, $groups->recordCount()), "\">\n";				while (!$groups->EOF) {					$gname = htmlspecialchars($groups->fields['groname']);					echo "<option value=\"{$gname}\"",						in_array($groups->fields['groname'], $_REQUEST['groupname']) ? ' selected="selected"' : '', ">{$gname}</option>\n";					$groups->moveNext();				}				echo "</select>\n";			}			echo "</td></tr>\n";			echo "<tr><th class=\"data left required\">{$lang['strprivileges']}</th>\n";			echo "<td class=\"data1\">\n";			foreach ($data->privlist[$_REQUEST['subject']] as $v) {				$v = htmlspecialchars($v);				echo "<input type=\"checkbox\" id=\"privilege[$v]\" name=\"privilege[$v]\"", 							isset($_REQUEST['privilege'][$v]) ? ' checked="checked"' : '', " /><label for=\"privilege[$v]\">{$v}</label><br />\n";			}			echo "</td></tr>\n";			// Grant option			if ($data->hasGrantOption()) {				echo "<tr><th class=\"data left\">{$lang['stroptions']}</th>\n";				echo "<td class=\"data1\">\n";				if ($mode == 'grant') {					echo "<input type=\"checkbox\" id=\"grantoption\" name=\"grantoption\"", 								isset($_REQUEST['grantoption']) ? ' checked="checked"' : '', " /><label for=\"grantoption\">GRANT OPTION</label>\n";				}				elseif ($mode == 'revoke') {					echo "<input type=\"checkbox\" id=\"grantoption\" name=\"grantoption\"", 								isset($_REQUEST['grantoption']) ? ' checked="checked"' : '', " /><label for=\"grantoption\">GRANT OPTION FOR</label><br />\n";					echo "<input type=\"checkbox\" id=\"cascade\" name=\"cascade\"", 								isset($_REQUEST['cascade']) ? ' checked="checked"' : '', " /><label for=\"cascade\">CASCADE</label><br />\n";				}				echo "</td></tr>\n";			}			echo "</table>\n";			echo "<p><input type=\"hidden\" name=\"action\" value=\"save\" />\n";			echo "<input type=\"hidden\" name=\"mode\" value=\"", htmlspecialchars($mode), "\" />\n";			echo "<input type=\"hidden\" name=\"subject\" value=\"", htmlspecialchars($_REQUEST['subject']), "\" />\n";			if (isset($_REQUEST[$_REQUEST['subject'].'_oid']))				echo "<input type=\"hidden\" name=\"", htmlspecialchars($_REQUEST['subject'].'_oid'),					"\" value=\"", htmlspecialchars($_REQUEST[$_REQUEST['subject'].'_oid']), "\" />\n";			echo "<input type=\"hidden\" name=\"", htmlspecialchars($_REQUEST['subject']),				"\" value=\"", htmlspecialchars($_REQUEST[$_REQUEST['subject']]), "\" />\n";			if ($_REQUEST['subject'] == 'column')				echo "<input type=\"hidden\" name=\"table\" value=\"",					htmlspecialchars($_REQUEST['table']), "\" />\n";			echo $misc->form;			if ($mode == 'grant')				echo "<input type=\"submit\" name=\"grant\" value=\"{$lang['strgrant']}\" />\n";			elseif ($mode == 'revoke')				echo "<input type=\"submit\" name=\"revoke\" value=\"{$lang['strrevoke']}\" />\n";			echo "<input type=\"submit\" name=\"cancel\" value=\"{$lang['strcancel']}\" /></p>";			echo "</form>\n";		}		else {			// Determine whether object should be ref'd by name or oid.			if (isset($_REQUEST[$_REQUEST['subject'].'_oid']))				$object = $_REQUEST[$_REQUEST['subject'].'_oid'];			else				$object = $_REQUEST[$_REQUEST['subject']];			if (isset($_REQUEST['table'])) $table = $_REQUEST['table'];			else $table = null;			$status = $data->setPrivileges(($mode == 'grant') ? 'GRANT' : 'REVOKE', $_REQUEST['subject'], $object,				isset($_REQUEST['public']), $_REQUEST['username'], $_REQUEST['groupname'], array_keys($_REQUEST['privilege']),				isset($_REQUEST['grantoption']), isset($_REQUEST['cascade']), $table);			if ($status == 0)				doDefault($lang['strgranted']);			elseif ($status == -3 || $status == -4)				doAlter(true, $_REQUEST['mode'], $lang['strgrantbad']);			else				doAlter(true, $_REQUEST['mode'], $lang['strgrantfailed']);		}	}	/**	 * Show permissions on a database, namespace, relation, language or function	 */	function doDefault($msg = '') {		global $data, $misc, $database;		global $lang;		$misc->printTrail($_REQUEST['subject']);				# @@@FIXME: This switch is just a temporary solution,		# need a better way, maybe every type of object should		# have a tab bar???		switch ($_REQUEST['subject']) {			case 'server':			case 'database':			case 'schema':			case 'table':			case 'column':			case 'view':				$misc->printTabs($_REQUEST['subject'], 'privileges');				break;			default:				$misc->printTitle($lang['strprivileges'], 'pg.privilege');		}		$misc->printMsg($msg);		// Determine whether object should be ref'd by name or oid.		if (isset($_REQUEST[$_REQUEST['subject'].'_oid']))			$object = $_REQUEST[$_REQUEST['subject'].'_oid'];		else			$object = $_REQUEST[$_REQUEST['subject']];				// Get the privileges on the object, given its type		if ($_REQUEST['subject'] == 'column')			$privileges = $data->getPrivileges($object, 'column', $_REQUEST['table']);		else			$privileges = $data->getPrivileges($object, $_REQUEST['subject']);		if (sizeof($privileges) > 0) {			echo "<table>\n";			if ($data->hasRoles())				echo "<tr><th class=\"data\">{$lang['strrole']}</th>";			else				echo "<tr><th class=\"data\">{$lang['strtype']}</th><th class=\"data\">{$lang['struser']}/{$lang['strgroup']}</th>";			foreach ($data->privlist[$_REQUEST['subject']] as $v2) {				// Skip over ALL PRIVILEGES				if ($v2 == 'ALL PRIVILEGES') continue;				echo "<th class=\"data\">{$v2}</th>\n";			}			if ($data->hasGrantOption()) {				echo "<th class=\"data\">{$lang['strgrantor']}</th>";			}			echo "</tr>\n";			// Loop over privileges, outputting them			$i = 0;			foreach ($privileges as $v) {				$id = (($i % 2) == 0 ? '1' : '2');				echo "<tr class=\"data{$id}\">\n";				if (!$data->hasRoles())					echo "<td>", $misc->printVal($v[0]), "</td>\n";				echo "<td>", $misc->printVal($v[1]), "</td>\n";				foreach ($data->privlist[$_REQUEST['subject']] as $v2) {					// Skip over ALL PRIVILEGES					if ($v2 == 'ALL PRIVILEGES') continue;					echo "<td>";					if (in_array($v2, $v[2]))						echo $lang['stryes'];					else						echo $lang['strno'];					// If we have grant option for this, end mark					if ($data->hasGrantOption() && in_array($v2, $v[4])) echo $lang['strasterisk'];					echo "</td>\n";				}				if ($data->hasGrantOption()) {					echo "<td>", $misc->printVal($v[3]), "</td>\n";				}				echo "</tr>\n";				$i++;			}			echo "</table>";		}		else {			echo "<p>{$lang['strnoprivileges']}</p>\n";		}				// Links for granting to a user or group		switch ($_REQUEST['subject']) {			case 'table':			case 'view':			case 'sequence':			case 'function':			case 'tablespace':				$allurl = "{$_REQUEST['subject']}s.php";				$alltxt = $lang["strshowall{$_REQUEST['subject']}s"];				break;			case 'schema':				$allurl = "database.php";				$alltxt = $lang["strshowallschemas"];				break;			case 'database':				$allurl = 'all_db.php';				$alltxt = $lang['strshowalldatabases'];				break;		}				$subject = htmlspecialchars(urlencode($_REQUEST['subject']));		$object = htmlspecialchars(urlencode($_REQUEST[$_REQUEST['subject']]));				if ($_REQUEST['subject'] == 'function') {			$objectoid = $_REQUEST[$_REQUEST['subject'].'_oid'];			$alterurl = "privileges.php?action=alter&amp;{$misc->href}&amp;{$subject}={$object}&amp;{$subject}_oid={$objectoid}&amp;subject={$subject}&amp;mode=";		}		else if ($_REQUEST['subject'] == 'column') {			$alterurl = "privileges.php?action=alter&amp;{$misc->href}&amp;{$subject}={$object}"				."&amp;subject={$subject}&amp;table=". urlencode($_REQUEST['table']) ."&amp;mode=";		}		else {			$alterurl = "privileges.php?action=alter&amp;{$misc->href}&amp;{$subject}={$object}&amp;subject={$subject}&amp;mode=";		}			echo "<ul class=\"navlink\">\n\t<li><a href=\"{$alterurl}grant\">{$lang['strgrant']}</a></li>\n";		echo "\t<li><a href=\"{$alterurl}revoke\">{$lang['strrevoke']}</a></li>\n";		if (isset($allurl))			echo "\t<li><a href=\"{$allurl}?{$misc->href}\">{$alltxt}</a></li>\n";				echo "</ul>\n";	}	$misc->printHeader($lang['strprivileges']);	$misc->printBody();	switch ($action) {		case 'save':			if (isset($_REQUEST['cancel'])) doDefault();			else doAlter(false, $_REQUEST['mode']);			break;		case 'alter':			doAlter(true, $_REQUEST['mode']);			break;		default:			doDefault();			break;	}		$misc->printFooter();	?>
<?php/** * PostgreSQL 8.2 support * * $Id: Postgres82.php,v 1.10 2007/12/28 16:21:25 ioguix Exp $ */include_once('./classes/database/Postgres83.php');class Postgres82 extends Postgres83 {	var $major_version = 8.2;	// Select operators	var $selectOps = array('=' => 'i', '!=' => 'i', '<' => 'i', '>' => 'i', '<=' => 'i', '>=' => 'i', '<<' => 'i', '>>' => 'i', '<<=' => 'i', '>>=' => 'i',		'LIKE' => 'i', 'NOT LIKE' => 'i', 'ILIKE' => 'i', 'NOT ILIKE' => 'i', 'SIMILAR TO' => 'i',		'NOT SIMILAR TO' => 'i', '~' => 'i', '!~' => 'i', '~*' => 'i', '!~*' => 'i',		'IS NULL' => 'p', 'IS NOT NULL' => 'p', 'IN' => 'x', 'NOT IN' => 'x');	/**	 * Constructor	 * @param $conn The database connection	 */	function Postgres82($conn) {		$this->Postgres($conn);	}	// Help functions	function getHelpPages() {		include_once('./help/PostgresDoc82.php');		return $this->help_page;	}	// Database functions	/**	 * Returns table locks information in the current database	 * @return A recordset	 */	function getLocks() {		global $conf;		if (!$conf['show_system'])			$where = "AND pn.nspname NOT LIKE 'pg\\\\_%'";		else			$where = "AND nspname !~ '^pg_t(emp_[0-9]+|oast)$'";		$sql = "SELECT pn.nspname, pc.relname AS tablename, pl.transaction, pl.pid, pl.mode, pl.granted		FROM pg_catalog.pg_locks pl, pg_catalog.pg_class pc, pg_catalog.pg_namespace pn		WHERE pl.relation = pc.oid AND pc.relnamespace=pn.oid {$where}		ORDER BY nspname,tablename";		return $this->selectSet($sql);	}	// Sequence functions	/**	 * Rename a sequence	 * @param $seqrs The sequence RecordSet returned by getSequence()	 * @param $name The new name for the sequence	 * @return 0 success	 */	function alterSequenceName($seqrs, $name) {		/* vars are cleaned in _alterSequence */		if (!empty($name) && ($seqrs->fields['seqname'] != $name)) {			$f_schema = $this->_schema;			$this->fieldClean($f_schema);			$sql = "ALTER TABLE \"{$f_schema}\".\"{$seqrs->fields['seqname']}\" RENAME TO \"{$name}\"";			$status = $this->execute($sql);			if ($status == 0)				$seqrs->fields['seqname'] = $name;			else				return $status;		}		return 0;		}	// View functions	/**	 * Rename a view	 * @param $vwrs The view recordSet returned by getView()	 * @param $name The new view's name	 * @return -1 Failed	 * @return 0 success	 */	function alterViewName($vwrs, $name) {		// Rename (only if name has changed)		/* $vwrs and $name are cleaned in _alterView */		if (!empty($name) && ($name != $vwrs->fields['relname'])) {			$f_schema = $this->_schema;			$this->fieldClean($f_schema);			$sql = "ALTER TABLE \"{$f_schema}\".\"{$vwrs->fields['relname']}\" RENAME TO \"{$name}\"";			$status =  $this->execute($sql);			if ($status == 0)				$vwrs->fields['relname'] = $name;			else				return $status;		}		return 0;	}	// Trigger functions	/**	 * Grabs a list of triggers on a table	 * @param $table The name of a table whose triggers to retrieve	 * @return A recordset	 */	function getTriggers($table = '') {		$c_schema = $this->_schema;		$this->clean($c_schema);		$this->clean($table);		$sql = "SELECT				t.tgname, pg_catalog.pg_get_triggerdef(t.oid) AS tgdef, t.tgenabled, p.oid AS prooid,				p.proname || ' (' || pg_catalog.oidvectortypes(p.proargtypes) || ')' AS proproto,				ns.nspname AS pronamespace			FROM pg_catalog.pg_trigger t, pg_catalog.pg_proc p, pg_catalog.pg_namespace ns			WHERE t.tgrelid = (SELECT oid FROM pg_catalog.pg_class WHERE relname='{$table}'				AND relnamespace=(SELECT oid FROM pg_catalog.pg_namespace WHERE nspname='{$c_schema}'))				AND (NOT tgisconstraint OR NOT EXISTS						(SELECT 1 FROM pg_catalog.pg_depend d    JOIN pg_catalog.pg_constraint c							ON (d.refclassid = c.tableoid AND d.refobjid = c.oid)						WHERE d.classid = t.tableoid AND d.objid = t.oid AND d.deptype = 'i' AND c.contype = 'f'))				AND p.oid=t.tgfoid				AND p.pronamespace = ns.oid";		return $this->selectSet($sql);		}	// Function functions	/**	 * Returns all details for a particular function	 * @param $func The name of the function to retrieve	 * @return Function info	 */	function getFunction($function_oid) {		$this->clean($function_oid);		$sql = "SELECT					pc.oid AS prooid,					proname,					pg_catalog.pg_get_userbyid(proowner) AS proowner,					nspname as proschema,					lanname as prolanguage,					pg_catalog.format_type(prorettype, NULL) as proresult,					prosrc,					probin,					proretset,					proisstrict,					provolatile,					prosecdef,					pg_catalog.oidvectortypes(pc.proargtypes) AS proarguments,					proargnames AS proargnames,					pg_catalog.obj_description(pc.oid, 'pg_proc') AS procomment				FROM					pg_catalog.pg_proc pc, pg_catalog.pg_language pl, pg_catalog.pg_namespace pn				WHERE					pc.oid = '{$function_oid}'::oid					AND pc.prolang = pl.oid					AND pc.pronamespace = pn.oid				";		return $this->selectSet($sql);	}	/**	 * Creates a new function.	 * @param $funcname The name of the function to create	 * @param $args A comma separated string of types	 * @param $returns The return type	 * @param $definition The definition for the new function	 * @param $language The language the function is written for	 * @param $flags An array of optional flags	 * @param $setof True if it returns a set, false otherwise	 * @param $rows number of rows planner should estimate will be returned     * @param $cost cost the planner should use in the function execution step	 * @param $comment The comment on the function	 * @param $replace (optional) True if OR REPLACE, false for normal	 * @return 0 success	 * @return -1 create function failed	 * @return -4 set comment failed	 */	function createFunction($funcname, $args, $returns, $definition, $language, $flags, $setof, $cost, $rows, $comment, $replace = false) {				// Begin a transaction		$status = $this->beginTransaction();		if ($status != 0) {			$this->rollbackTransaction();			return -1;		}				$f_schema = $this->_schema;		$this->fieldClean($f_schema);		$this->fieldClean($funcname);		$this->clean($args);		$this->fieldClean($language);		$this->arrayClean($flags);		$sql = "CREATE";		if ($replace) $sql .= " OR REPLACE";		$sql .= " FUNCTION \"{$f_schema}\".\"{$funcname}\" (";		if ($args != '')			$sql .= $args;		// For some reason, the returns field cannot have quotes...		$sql .= ") RETURNS ";		if ($setof) $sql .= "SETOF ";		$sql .= "{$returns} AS ";		if (is_array($definition)) {			$this->arrayClean($definition);			$sql .= "'" . $definition[0] . "'";			if ($definition[1]) {				$sql .= ",'" . $definition[1] . "'";			}		} else {			$this->clean($definition);			$sql .= "'" . $definition . "'";	}		$sql .= " LANGUAGE \"{$language}\"";		// Add flags		foreach ($flags as  $v) {			// Skip default flags			if ($v == '') continue;			else $sql .= "\n{$v}";		}		$status = $this->execute($sql);		if ($status != 0) {			$this->rollbackTransaction();			return -3;		}		/* set the comment */		$status = $this->setComment('FUNCTION', "\"{$funcname}\"({$args})", null, $comment);		if ($status != 0) {			$this->rollbackTransaction();			return -4;		}		return $this->endTransaction();	}	// Index functions	/**	 * Clusters an index	 * @param $index The name of the index	 * @param $table The table the index is on	 * @return 0 success	 */	function clusterIndex($table='', $index='') {		$sql = 'CLUSTER';				// We don't bother with a transaction here, as there's no point rolling		// back an expensive cluster if a cheap analyze fails for whatever reason				if (!empty($table)) {			$f_schema = $this->_schema;			$this->fieldClean($f_schema);			$this->fieldClean($table);						if (!empty($index)) {				$this->fieldClean($index);				$sql .= " \"{$index}\" ON \"{$f_schema}\".\"{$table}\"";			}			else {				$sql .= " \"{$f_schema}\".\"{$table}\"";			}		}		return $this->execute($sql);	}	// Operator functions	/**	 * Returns all details for a particular operator	 * @param $operator_oid The oid of the operator	 * @return Function info	 */	function getOperator($operator_oid) {		$this->clean($operator_oid);		$sql = "			SELECT				po.oid, po.oprname,				oprleft::pg_catalog.regtype AS oprleftname,				oprright::pg_catalog.regtype AS oprrightname,				oprresult::pg_catalog.regtype AS resultname,				po.oprcanhash,				oprcom::pg_catalog.regoperator AS oprcom,				oprnegate::pg_catalog.regoperator AS oprnegate,				oprlsortop::pg_catalog.regoperator AS oprlsortop,				oprrsortop::pg_catalog.regoperator AS oprrsortop,				oprltcmpop::pg_catalog.regoperator AS oprltcmpop,				oprgtcmpop::pg_catalog.regoperator AS oprgtcmpop,				po.oprcode::pg_catalog.regproc AS oprcode,				po.oprrest::pg_catalog.regproc AS oprrest,				po.oprjoin::pg_catalog.regproc AS oprjoin			FROM				pg_catalog.pg_operator po			WHERE				po.oid='{$operator_oid}'		";		return $this->selectSet($sql);	}	// Operator Class functions	/**	 * Gets all opclasses	 * @return A recordset	 */	function getOpClasses() {		$c_schema = $this->_schema;		$this->clean($c_schema);		$sql = "			SELECT				pa.amname,				po.opcname,				po.opcintype::pg_catalog.regtype AS opcintype,				po.opcdefault,				pg_catalog.obj_description(po.oid, 'pg_opclass') AS opccomment			FROM				pg_catalog.pg_opclass po, pg_catalog.pg_am pa, pg_catalog.pg_namespace pn			WHERE				po.opcamid=pa.oid				AND po.opcnamespace=pn.oid				AND pn.nspname='{$c_schema}'			ORDER BY 1,2		";		return $this->selectSet($sql);	}	// Capabilities	function hasCreateTableLikeWithIndexes() {return false;}	function hasEnumTypes() {return false;}	function hasFTS() {return false;}	function hasFunctionCosting() {return false;}	function hasFunctionGUC() {return false;}	function hasVirtualTransactionId() {return false;}}?>
<?php	/**	 * Manage types in a database	 *	 * $Id: types.php,v 1.42 2007/11/30 15:25:23 soranzo Exp $	 */	// Include application functions	include_once('./libraries/lib.inc.php');		$action = (isset($_REQUEST['action'])) ? $_REQUEST['action'] : '';	if (!isset($msg)) $msg = '';	/**	 * Show read only properties for a type	 */	function doProperties($msg = '') {		global $data, $misc;		global $lang;		// Get type (using base name)		$typedata = $data->getType($_REQUEST['type']);		$misc->printTrail('type');		$misc->printTitle($lang['strproperties'], 'pg.type');		$misc->printMsg($msg);				function attPre(&$rowdata) {			global $data;			$rowdata->fields['+type'] = $data->formatType($rowdata->fields['type'], $rowdata->fields['atttypmod']);		}				if ($typedata->recordCount() > 0) {			$vals = false;			switch ($typedata->fields['typtype']) {			case 'c':				$attrs = $data->getTableAttributes($_REQUEST['type']);								$columns = array(					'field' => array(						'title' => $lang['strfield'],						'field' => field('attname'),					),					'type' => array(						'title' => $lang['strtype'],						'field' => field('+type'),					),					'comment' => array(						'title' => $lang['strcomment'],						'field' => field('comment'),					)				);								$actions = array();								$misc->printTable($attrs, $columns, $actions, null, 'attPre');								break;			case 'e':				$vals = $data->getEnumValues($typedata->fields['typname']);			default:				$byval = $data->phpBool($typedata->fields['typbyval']);				echo "<table>\n";				echo "<tr><th class=\"data left\">{$lang['strname']}</th>\n";				echo "<td class=\"data1\">", $misc->printVal($typedata->fields['typname']), "</td></tr>\n";				echo "<tr><th class=\"data left\">{$lang['strinputfn']}</th>\n";				echo "<td class=\"data1\">", $misc->printVal($typedata->fields['typin']), "</td></tr>\n";				echo "<tr><th class=\"data left\">{$lang['stroutputfn']}</th>\n";				echo "<td class=\"data1\">", $misc->printVal($typedata->fields['typout']), "</td></tr>\n";				echo "<tr><th class=\"data left\">{$lang['strlength']}</th>\n";				echo "<td class=\"data1\">", $misc->printVal($typedata->fields['typlen']), "</td></tr>\n";				echo "<tr><th class=\"data left\">{$lang['strpassbyval']}</th>\n";				echo "<td class=\"data1\">", ($byval) ? $lang['stryes'] : $lang['strno'], "</td></tr>\n";				echo "<tr><th class=\"data left\">{$lang['stralignment']}</th>\n";				echo "<td class=\"data1\">", $misc->printVal($typedata->fields['typalign']), "</td></tr>\n";				if ($data->hasEnumTypes() && $vals) {					$vals = $vals->getArray();					$nbVals = count($vals);					echo "<tr>\n\t<th class=\"data left\" rowspan=\"$nbVals\">{$lang['strenumvalues']}</th>\n";					echo "<td class=\"data2\">{$vals[0]['enumval']}</td></tr>\n";					for ($i=1; $i < $nbVals; $i++)						echo "<td class=\"data", 2-($i%2), "\">{$vals[$i]['enumval']}</td></tr>\n";				}				echo "</table>\n";			}			echo "<p><a class=\"navlink\" href=\"types.php?{$misc->href}\">{$lang['strshowalltypes']}</a></p>\n";		} else			doDefault($lang['strinvalidparam']);	}		/**	 * Show confirmation of drop and perform actual drop	 */	function doDrop($confirm) {		global $data, $misc;		global $lang;		if ($confirm) {			$misc->printTrail('type');			$misc->printTitle($lang['strdrop'], 'pg.type.drop');			echo "<p>", sprintf($lang['strconfdroptype'], $misc->printVal($_REQUEST['type'])), "</p>\n";			echo "<form action=\"types.php\" method=\"post\">\n";			echo "<p><input type=\"checkbox\" id=\"cascade\" name=\"cascade\" /> <label for=\"cascade\">{$lang['strcascade']}</label></p>\n";			echo "<p><input type=\"hidden\" name=\"action\" value=\"drop\" />\n";			echo "<input type=\"hidden\" name=\"type\" value=\"", htmlspecialchars($_REQUEST['type']), "\" />\n";			echo $misc->form;			echo "<input type=\"submit\" name=\"drop\" value=\"{$lang['strdrop']}\" />\n";			echo "<input type=\"submit\" name=\"cancel\" value=\"{$lang['strcancel']}\" /></p>\n";			echo "</form>\n";		}		else {			$status = $data->dropType($_POST['type'], isset($_POST['cascade']));			if ($status == 0)				doDefault($lang['strtypedropped']);			else				doDefault($lang['strtypedroppedbad']);		}			}	/**	 * Displays a screen where they can enter a new composite type	 */	function doCreateComposite($msg = '') {		global $data, $misc;		global $lang;		if (!isset($_REQUEST['stage'])) $_REQUEST['stage'] = 1;		if (!isset($_REQUEST['name'])) $_REQUEST['name'] = '';		if (!isset($_REQUEST['fields'])) $_REQUEST['fields'] = '';		if (!isset($_REQUEST['typcomment'])) $_REQUEST['typcomment'] = '';		switch ($_REQUEST['stage']) {			case 1:				$misc->printTrail('type');				$misc->printTitle($lang['strcreatecomptype'], 'pg.type.create');				$misc->printMsg($msg);								echo "<form action=\"types.php\" method=\"post\">\n";				echo "<table>\n";				echo "\t<tr>\n\t\t<th class=\"data left required\">{$lang['strname']}</th>\n";				echo "\t\t<td class=\"data\"><input name=\"name\" size=\"32\" maxlength=\"{$data->_maxNameLen}\" value=\"", 					htmlspecialchars($_REQUEST['name']), "\" /></td>\n\t</tr>\n";				echo "\t<tr>\n\t\t<th class=\"data left required\">{$lang['strnumfields']}</th>\n";				echo "\t\t<td class=\"data\"><input name=\"fields\" size=\"5\" maxlength=\"{$data->_maxNameLen}\" value=\"", 					htmlspecialchars($_REQUEST['fields']), "\" /></td>\n\t</tr>\n";				echo "\t<tr>\n\t\t<th class=\"data left\">{$lang['strcomment']}</th>\n";				echo "\t\t<td><textarea name=\"typcomment\" rows=\"3\" cols=\"32\">", 					htmlspecialchars($_REQUEST['typcomment']), "</textarea></td>\n\t</tr>\n";				echo "</table>\n";				echo "<p><input type=\"hidden\" name=\"action\" value=\"create_comp\" />\n";				echo "<input type=\"hidden\" name=\"stage\" value=\"2\" />\n";				echo $misc->form;				echo "<input type=\"submit\" value=\"{$lang['strnext']}\" />\n";				echo "<input type=\"submit\" name=\"cancel\" value=\"{$lang['strcancel']}\" /></p>\n";				echo "</form>\n";				break;			case 2:				global $lang;				// Check inputs				$fields = trim($_REQUEST['fields']);				if (trim($_REQUEST['name']) == '') {					$_REQUEST['stage'] = 1;					doCreateComposite($lang['strtypeneedsname']);					return;				}				elseif ($fields == '' || !is_numeric($fields) || $fields != (int)$fields || $fields < 1)  {					$_REQUEST['stage'] = 1;					doCreateComposite($lang['strtypeneedscols']);					return;				}				$types = $data->getTypes(true, false, true);				$misc->printTrail('schema');				$misc->printTitle($lang['strcreatecomptype'], 'pg.type.create');				$misc->printMsg($msg);				echo "<form action=\"types.php\" method=\"post\">\n";				// Output table header				echo "<table>\n";				echo "\t<tr><th colspan=\"2\" class=\"data required\">{$lang['strfield']}</th><th colspan=\"2\" class=\"data required\">{$lang['strtype']}</th>";				echo"<th class=\"data\">{$lang['strlength']}</th><th class=\"data\">{$lang['strcomment']}</th></tr>\n";								for ($i = 0; $i < $_REQUEST['fields']; $i++) {					if (!isset($_REQUEST['field'][$i])) $_REQUEST['field'][$i] = '';					if (!isset($_REQUEST['length'][$i])) $_REQUEST['length'][$i] = '';					if (!isset($_REQUEST['colcomment'][$i])) $_REQUEST['colcomment'][$i] = '';					echo "\t<tr>\n\t\t<td>", $i + 1, ".&nbsp;</td>\n";					echo "\t\t<td><input name=\"field[{$i}]\" size=\"16\" maxlength=\"{$data->_maxNameLen}\" value=\"",						htmlspecialchars($_REQUEST['field'][$i]), "\" /></td>\n";					echo "\t\t<td>\n\t\t\t<select name=\"type[{$i}]\">\n";					$types->moveFirst();					while (!$types->EOF) {						$typname = $types->fields['typname'];						echo "\t\t\t\t<option value=\"", htmlspecialchars($typname), "\"",						(isset($_REQUEST['type'][$i]) && $typname == $_REQUEST['type'][$i]) ? ' selected="selected"' : '', ">",							$misc->printVal($typname), "</option>\n";						$types->moveNext();					}					echo "\t\t\t</select>\n\t\t</td>\n";										// Output array type selector					echo "\t\t<td>\n\t\t\t<select name=\"array[{$i}]\">\n";					echo "\t\t\t\t<option value=\"\"", (isset($_REQUEST['array'][$i]) && $_REQUEST['array'][$i] == '') ? ' selected="selected"' : '', "></option>\n";					echo "\t\t\t\t<option value=\"[]\"", (isset($_REQUEST['array'][$i]) && $_REQUEST['array'][$i] == '[]') ? ' selected="selected"' : '', ">[ ]</option>\n";					echo "\t\t\t</select>\n\t\t</td>\n";										echo "\t\t<td><input name=\"length[{$i}]\" size=\"10\" value=\"", 						htmlspecialchars($_REQUEST['length'][$i]), "\" /></td>\n";					echo "\t\t<td><input name=\"colcomment[{$i}]\" size=\"40\" value=\"", 						htmlspecialchars($_REQUEST['colcomment'][$i]), "\" /></td>\n\t</tr>\n";				}					echo "</table>\n";				echo "<p><input type=\"hidden\" name=\"action\" value=\"create_comp\" />\n";				echo "<input type=\"hidden\" name=\"stage\" value=\"3\" />\n";				echo $misc->form;				echo "<input type=\"hidden\" name=\"name\" value=\"", htmlspecialchars($_REQUEST['name']), "\" />\n";				echo "<input type=\"hidden\" name=\"fields\" value=\"", htmlspecialchars($_REQUEST['fields']), "\" />\n";				echo "<input type=\"hidden\" name=\"typcomment\" value=\"", htmlspecialchars($_REQUEST['typcomment']), "\" />\n";				echo "<input type=\"submit\" value=\"{$lang['strcreate']}\" />\n";				echo "<input type=\"submit\" name=\"cancel\" value=\"{$lang['strcancel']}\" /></p>\n";				echo "</form>\n";												break;			case 3:				global $data, $lang;				// Check inputs				$fields = trim($_REQUEST['fields']);				if (trim($_REQUEST['name']) == '') {					$_REQUEST['stage'] = 1;					doCreateComposite($lang['strtypeneedsname']);					return;				}				elseif ($fields == '' || !is_numeric($fields) || $fields != (int)$fields || $fields <= 0)  {					$_REQUEST['stage'] = 1;					doCreateComposite($lang['strtypeneedscols']);						return;				}								$status = $data->createCompositeType($_REQUEST['name'], $_REQUEST['fields'], $_REQUEST['field'],								$_REQUEST['type'], $_REQUEST['array'], $_REQUEST['length'], $_REQUEST['colcomment'], 								$_REQUEST['typcomment']);				if ($status == 0)					doDefault($lang['strtypecreated']);				elseif ($status == -1) {					$_REQUEST['stage'] = 2;					doCreateComposite($lang['strtypeneedsfield']);					return;				}				else {					$_REQUEST['stage'] = 2;					doCreateComposite($lang['strtypecreatedbad']);					return;				}				break;			default:				echo "<p>{$lang['strinvalidparam']}</p>\n";		}	}	/**	 * Displays a screen where they can enter a new enum type	 */	function doCreateEnum($msg = '') {		global $data, $misc;		global $lang;		if (!isset($_REQUEST['stage'])) $_REQUEST['stage'] = 1;		if (!isset($_REQUEST['name'])) $_REQUEST['name'] = '';		if (!isset($_REQUEST['values'])) $_REQUEST['values'] = '';		if (!isset($_REQUEST['typcomment'])) $_REQUEST['typcomment'] = '';		switch ($_REQUEST['stage']) {			case 1:				$misc->printTrail('type');				$misc->printTitle($lang['strcreateenumtype'], 'pg.type.create');				$misc->printMsg($msg);								echo "<form action=\"types.php\" method=\"post\">\n";				echo "<table>\n";				echo "\t<tr>\n\t\t<th class=\"data left required\">{$lang['strname']}</th>\n";				echo "\t\t<td class=\"data\"><input name=\"name\" size=\"32\" maxlength=\"{$data->_maxNameLen}\" value=\"", 					htmlspecialchars($_REQUEST['name']), "\" /></td>\n\t</tr>\n";				echo "\t<tr>\n\t\t<th class=\"data left required\">{$lang['strnumvalues']}</th>\n";				echo "\t\t<td class=\"data\"><input name=\"values\" size=\"5\" maxlength=\"{$data->_maxNameLen}\" value=\"", 					htmlspecialchars($_REQUEST['values']), "\" /></td>\n\t</tr>\n";				echo "\t<tr>\n\t\t<th class=\"data left\">{$lang['strcomment']}</th>\n";				echo "\t\t<td><textarea name=\"typcomment\" rows=\"3\" cols=\"32\">", 					htmlspecialchars($_REQUEST['typcomment']), "</textarea></td>\n\t</tr>\n";				echo "</table>\n";				echo "<p><input type=\"hidden\" name=\"action\" value=\"create_enum\" />\n";				echo "<input type=\"hidden\" name=\"stage\" value=\"2\" />\n";				echo $misc->form;				echo "<input type=\"submit\" value=\"{$lang['strnext']}\" />\n";				echo "<input type=\"submit\" name=\"cancel\" value=\"{$lang['strcancel']}\" /></p>\n";				echo "</form>\n";				break;			case 2:				global $lang;				// Check inputs				$values = trim($_REQUEST['values']);				if (trim($_REQUEST['name']) == '') {					$_REQUEST['stage'] = 1;					doCreateEnum($lang['strtypeneedsname']);					return;				}				elseif ($values == '' || !is_numeric($values) || $values != (int)$values || $values < 1)  {					$_REQUEST['stage'] = 1;					doCreateEnum($lang['strtypeneedsvals']);					return;				}				$misc->printTrail('schema');				$misc->printTitle($lang['strcreateenumtype'], 'pg.type.create');				$misc->printMsg($msg);				echo "<form action=\"types.php\" method=\"post\">\n";				// Output table header				echo "<table>\n";				echo "\t<tr><th colspan=\"2\" class=\"data required\">{$lang['strvalue']}</th></tr>\n";								for ($i = 0; $i < $_REQUEST['values']; $i++) {					if (!isset($_REQUEST['value'][$i])) $_REQUEST['value'][$i] = '';					echo "\t<tr>\n\t\t<td>", $i + 1, ".&nbsp;</td>\n";					echo "\t\t<td><input name=\"value[{$i}]\" size=\"16\" maxlength=\"{$data->_maxNameLen}\" value=\"",						htmlspecialchars($_REQUEST['value'][$i]), "\" /></td>\n\t</tr>\n";				}					echo "</table>\n";				echo "<p><input type=\"hidden\" name=\"action\" value=\"create_enum\" />\n";				echo "<input type=\"hidden\" name=\"stage\" value=\"3\" />\n";				echo $misc->form;				echo "<input type=\"hidden\" name=\"name\" value=\"", htmlspecialchars($_REQUEST['name']), "\" />\n";				echo "<input type=\"hidden\" name=\"values\" value=\"", htmlspecialchars($_REQUEST['values']), "\" />\n";				echo "<input type=\"hidden\" name=\"typcomment\" value=\"", htmlspecialchars($_REQUEST['typcomment']), "\" />\n";				echo "<input type=\"submit\" value=\"{$lang['strcreate']}\" />\n";				echo "<input type=\"submit\" name=\"cancel\" value=\"{$lang['strcancel']}\" /></p>\n";				echo "</form>\n";				break;			case 3:				global $data, $lang;				// Check inputs				$values = trim($_REQUEST['values']);				if (trim($_REQUEST['name']) == '') {					$_REQUEST['stage'] = 1;					doCreateEnum($lang['strtypeneedsname']);					return;				}				elseif ($values == '' || !is_numeric($values) || $values != (int)$values || $values <= 0)  {					$_REQUEST['stage'] = 1;					doCreateEnum($lang['strtypeneedsvals']);						return;				}				$status = $data->createEnumType($_REQUEST['name'], $_REQUEST['value'], $_REQUEST['typcomment']);				if ($status == 0)					doDefault($lang['strtypecreated']);				elseif ($status == -1) {					$_REQUEST['stage'] = 2;					doCreateEnum($lang['strtypeneedsvalue']);					return;				}				else {					$_REQUEST['stage'] = 2;					doCreateEnum($lang['strtypecreatedbad']);					return;				}				break;			default:				echo "<p>{$lang['strinvalidparam']}</p>\n";		}	}	/**	 * Displays a screen where they can enter a new type	 */	function doCreate($msg = '') {		global $data, $misc;		global $lang;		if (!isset($_POST['typname'])) $_POST['typname'] = '';		if (!isset($_POST['typin'])) $_POST['typin'] = '';		if (!isset($_POST['typout'])) $_POST['typout'] = '';		if (!isset($_POST['typlen'])) $_POST['typlen'] = '';		if (!isset($_POST['typdef'])) $_POST['typdef'] = '';		if (!isset($_POST['typelem'])) $_POST['typelem'] = '';		if (!isset($_POST['typdelim'])) $_POST['typdelim'] = '';		if (!isset($_POST['typalign'])) $_POST['typalign'] = $data->typAlignDef;		if (!isset($_POST['typstorage'])) $_POST['typstorage'] = $data->typStorageDef;		// Retrieve all functions and types in the database		$funcs = $data->getFunctions(true);		$types = $data->getTypes(true);		$misc->printTrail('schema');		$misc->printTitle($lang['strcreatetype'], 'pg.type.create');		$misc->printMsg($msg);		echo "<form action=\"types.php\" method=\"post\">\n";		echo "<table>\n";		echo "<tr><th class=\"data left required\">{$lang['strname']}</th>\n";		echo "<td class=\"data1\"><input name=\"typname\" size=\"32\" maxlength=\"{$data->_maxNameLen}\" value=\"",			htmlspecialchars($_POST['typname']), "\" /></td></tr>\n";		echo "<tr><th class=\"data left required\">{$lang['strinputfn']}</th>\n";		echo "<td class=\"data1\"><select name=\"typin\">";		while (!$funcs->EOF) {			$proname = htmlspecialchars($funcs->fields['proname']);			echo "<option value=\"{$proname}\"",				($proname == $_POST['typin']) ? ' selected="selected"' : '', ">{$proname}</option>\n";			$funcs->moveNext();		}		echo "</select></td></tr>\n";		echo "<tr><th class=\"data left required\">{$lang['stroutputfn']}</th>\n";		echo "<td class=\"data1\"><select name=\"typout\">";		$funcs->moveFirst();		while (!$funcs->EOF) {			$proname = htmlspecialchars($funcs->fields['proname']);			echo "<option value=\"{$proname}\"",				($proname == $_POST['typout']) ? ' selected="selected"' : '', ">{$proname}</option>\n";			$funcs->moveNext();		}		echo "</select></td></tr>\n";		echo "<tr><th class=\"data left" . (version_compare($data->major_version, '7.4', '<') ? ' required' : '') . "\">{$lang['strlength']}</th>\n";		echo "<td class=\"data1\"><input name=\"typlen\" size=\"8\" value=\"",			htmlspecialchars($_POST['typlen']), "\" /></td></tr>";		echo "<tr><th class=\"data left\">{$lang['strdefault']}</th>\n";		echo "<td class=\"data1\"><input name=\"typdef\" size=\"8\" value=\"",			htmlspecialchars($_POST['typdef']), "\" /></td></tr>";		echo "<tr><th class=\"data left\">{$lang['strelement']}</th>\n";		echo "<td class=\"data1\"><select name=\"typelem\">";		echo "<option value=\"\"></option>\n";		while (!$types->EOF) {			$currname = htmlspecialchars($types->fields['typname']);			echo "<option value=\"{$currname}\"",				($currname == $_POST['typelem']) ? ' selected="selected"' : '', ">{$currname}</option>\n";			$types->moveNext();		}		echo "</select></td></tr>\n";		echo "<tr><th class=\"data left\">{$lang['strdelimiter']}</th>\n";		echo "<td class=\"data1\"><input name=\"typdelim\" size=\"1\" maxlength=\"1\" value=\"",			htmlspecialchars($_POST['typdelim']), "\" /></td></tr>";		echo "<tr><th class=\"data left\"><label for=\"typbyval\">{$lang['strpassbyval']}</label></th>\n";		echo "<td class=\"data1\"><input type=\"checkbox\" id=\"typbyval\" name=\"typbyval\"", 			isset($_POST['typbyval']) ? ' checked="checked"' : '', " /></td></tr>";		echo "<tr><th class=\"data left\">{$lang['stralignment']}</th>\n";		echo "<td class=\"data1\"><select name=\"typalign\">";		foreach ($data->typAligns as $v) {			echo "<option value=\"{$v}\"",				($v == $_POST['typalign']) ? ' selected="selected"' : '', ">{$v}</option>\n";		}		echo "</select></td></tr>\n";		echo "<tr><th class=\"data left\">{$lang['strstorage']}</th>\n";		echo "<td class=\"data1\"><select name=\"typstorage\">";		foreach ($data->typStorages as $v) {			echo "<option value=\"{$v}\"",				($v == $_POST['typstorage']) ? ' selected="selected"' : '', ">{$v}</option>\n";		}		echo "</select></td></tr>\n";		echo "</table>\n";		echo "<p><input type=\"hidden\" name=\"action\" value=\"save_create\" />\n";		echo $misc->form;		echo "<input type=\"submit\" value=\"{$lang['strcreate']}\" />\n";		echo "<input type=\"submit\" name=\"cancel\" value=\"{$lang['strcancel']}\" /></p>\n";		echo "</form>\n";	}		/**	 * Actually creates the new type in the database	 */	function doSaveCreate() {		global $data;		global $lang;		// Check that they've given a name and a length.		// Note: We're assuming they've given in and out functions here		// which might be unwise...		if ($_POST['typname'] == '') doCreate($lang['strtypeneedsname']);		elseif ($_POST['typlen'] == '') doCreate($lang['strtypeneedslen']);		else {		 			$status = $data->createType(				$_POST['typname'],				$_POST['typin'],				$_POST['typout'],				$_POST['typlen'],				$_POST['typdef'],				$_POST['typelem'],				$_POST['typdelim'],				isset($_POST['typbyval']),				$_POST['typalign'],				$_POST['typstorage']			);			if ($status == 0)				doDefault($lang['strtypecreated']);			else				doCreate($lang['strtypecreatedbad']);		}	}		/**	 * Show default list of types in the database	 */	function doDefault($msg = '') {		global $data, $conf, $misc;		global $lang;		$misc->printTrail('schema');		$misc->printTabs('schema','types');		$misc->printMsg($msg);				$types = $data->getTypes();		$columns = array(			'type' => array(				'title' => $lang['strtype'],				'field' => field('typname'),				'url'   => "types.php?action=properties&amp;{$misc->href}&amp;",				'vars'  => array('type' => 'basename'),			),			'owner' => array(				'title' => $lang['strowner'],				'field' => field('typowner'),			),			'flavour' => array(				'title' => $lang['strflavor'],				'field' => field('typtype'),				'type'  => 'verbatim',				'params'=> array(					'map' => array(						'b' => $lang['strbasetype'],						'c' => $lang['strcompositetype'],						'd' => $lang['strdomain'],						'p' => $lang['strpseudotype'],						'e' => $lang['strenum'],					),					'align' => 'center',				),			),			'actions' => array(				'title' => $lang['stractions'],			),			'comment' => array(				'title' => $lang['strcomment'],				'field' => field('typcomment'),			),		);				if (!isset($types->fields['typtype'])) unset($columns['flavour']);		$actions = array(			'drop' => array(				'title' => $lang['strdrop'],				'url'   => "types.php?action=confirm_drop&amp;{$misc->href}&amp;",				'vars'  => array('type' => 'basename'),			),		);				$misc->printTable($types, $columns, $actions, $lang['strnotypes']);		echo "<ul class=\"navlink\">\n\t<li><a href=\"types.php?action=create&amp;{$misc->href}\">{$lang['strcreatetype']}</a></li>\n";		echo "\t<li><a href=\"types.php?action=create_comp&amp;{$misc->href}\">{$lang['strcreatecomptype']}</a></li>\n";		if ($data->hasEnumTypes())			echo "\t<li><a href=\"types.php?action=create_enum&amp;{$misc->href}\">{$lang['strcreateenumtype']}</a></li>\n";		echo "</ul>\n";	}		/**	 * Generate XML for the browser tree.	 */	function doTree() {		global $misc, $data;				$types = $data->getTypes();				$reqvars = $misc->getRequestVars('type');				$attrs = array(			'text'   => field('typname'),			'icon'   => 'Type',			'toolTip'=> field('typcomment'),			'action' => url('types.php',							$reqvars,							array(								'action' => 'properties',								'type'   => field('basename')							)						)		);				$misc->printTreeXML($types, $attrs);		exit;	}		if ($action == 'tree') doTree();		$misc->printHeader($lang['strtypes']);	$misc->printBody();	switch ($action) {		case 'create_comp':			if (isset($_POST['cancel'])) doDefault();			else doCreateComposite();			break;		case 'create_enum':			if (isset($_POST['cancel'])) doDefault();			else doCreateEnum();			break;		case 'save_create':			if (isset($_POST['cancel'])) doDefault();			else doSaveCreate();			break;		case 'create':			doCreate();			break;		case 'drop':			if (isset($_POST['cancel'])) doDefault();			else doDrop(false);			break;		case 'confirm_drop':			doDrop(true);			break;					case 'properties':			doProperties();			break;		default:			doDefault();			break;	}		$misc->printFooter();?>
<?php	/**	 * List views in a database	 *	 * $Id: viewproperties.php,v 1.34 2007/12/11 14:17:17 ioguix Exp $	 */	// Include application functions	include_once('./libraries/lib.inc.php');	$action = (isset($_REQUEST['action'])) ? $_REQUEST['action'] : '';	/** 	 * Function to save after editing a view	 */	function doSaveEdit() {		global $data, $lang;				$status = $data->setView($_POST['view'], $_POST['formDefinition'], $_POST['formComment']);		if ($status == 0)			doDefinition($lang['strviewupdated']);		else			doEdit($lang['strviewupdatedbad']);	}		/**	 * Function to allow editing of a view	 */	function doEdit($msg = '') {		global $data, $misc;		global $lang;				$misc->printTrail('view');		$misc->printTitle($lang['stredit'],'pg.view.alter');		$misc->printMsg($msg);				$viewdata = $data->getView($_REQUEST['view']);				if ($viewdata->recordCount() > 0) {						if (!isset($_POST['formDefinition'])) {				$_POST['formDefinition'] = $viewdata->fields['vwdefinition'];				$_POST['formComment'] = $viewdata->fields['relcomment'];			}						echo "<form action=\"viewproperties.php\" method=\"post\">\n";			echo "<table style=\"width: 100%\">\n";			echo "\t<tr>\n\t\t<th class=\"data left required\">{$lang['strdefinition']}</th>\n";			echo "\t\t<td class=\"data1\"><textarea style=\"width: 100%;\" rows=\"20\" cols=\"50\" name=\"formDefinition\">", 				htmlspecialchars($_POST['formDefinition']), "</textarea></td>\n\t</tr>\n";			echo "\t<tr>\n\t\t<th class=\"data left\">{$lang['strcomment']}</th>\n";			echo "\t\t<td class=\"data1\"><textarea rows=\"3\" cols=\"32\" name=\"formComment\">", 				htmlspecialchars($_POST['formComment']), "</textarea></td>\n\t</tr>\n";			echo "</table>\n";			echo "<p><input type=\"hidden\" name=\"action\" value=\"save_edit\" />\n";			echo "<input type=\"hidden\" name=\"view\" value=\"", htmlspecialchars($_REQUEST['view']), "\" />\n";			echo $misc->form;			echo "<input type=\"submit\" value=\"{$lang['stralter']}\" />\n";			echo "<input type=\"submit\" name=\"cancel\" value=\"{$lang['strcancel']}\" /></p>\n";			echo "</form>\n";		}		else echo "<p>{$lang['strnodata']}</p>\n";	}	/** 	 * Allow the dumping of the data "in" a view	 * NOTE:: PostgreSQL doesn't currently support dumping the data in a view 	 *        so I have disabled the data related parts for now. In the future 	 *        we should allow it conditionally if it becomes supported.  This is 	 *        a SMOP since it is based on pg_dump version not backend version. 	 */	function doExport($msg = '') {		global $data, $misc;		global $lang;		$misc->printTrail('view');		$misc->printTabs('view','export');		$misc->printMsg($msg);		echo "<form action=\"dataexport.php\" method=\"post\">\n";		echo "<table>\n";		echo "<tr><th class=\"data\">{$lang['strformat']}</th><th class=\"data\" colspan=\"2\">{$lang['stroptions']}</th></tr>\n";		// Data only		echo "<!--\n";		echo "<tr><th class=\"data left\">";		echo "<input type=\"radio\" id=\"what1\" name=\"what\" value=\"dataonly\" /><label for=\"what1\">{$lang['strdataonly']}</label></th>\n";		echo "<td>{$lang['strformat']}</td>\n";		echo "<td><select name=\"d_format\" >\n";		echo "<option value=\"copy\">COPY</option>\n";		echo "<option value=\"sql\">SQL</option>\n";		echo "<option value=\"csv\">CSV</option>\n";		echo "<option value=\"tab\">{$lang['strtabbed']}</option>\n";		echo "<option value=\"html\">XHTML</option>\n";		echo "<option value=\"xml\">XML</option>\n";		echo "</select>\n</td>\n</tr>\n";		echo "-->\n";		// Structure only		echo "<tr><th class=\"data left\"><input type=\"radio\" id=\"what2\" name=\"what\" value=\"structureonly\" checked=\"checked\" /><label for=\"what2\">{$lang['strstructureonly']}</label></th>\n";		echo "<td><label for=\"s_clean\">{$lang['strdrop']}</label></td><td><input type=\"checkbox\" id=\"s_clean\" name=\"s_clean\" /></td>\n</tr>\n";		// Structure and data		echo "<!--\n";		echo "<tr><th class=\"data left\" rowspan=\"2\">";		echo "<input type=\"radio\" id=\"what3\" name=\"what\" value=\"structureanddata\" /><label for=\"what3\">{$lang['strstructureanddata']}</label></th>\n";		echo "<td>{$lang['strformat']}</td>\n";		echo "<td><select name=\"sd_format\">\n";		echo "<option value=\"copy\">COPY</option>\n";		echo "<option value=\"sql\">SQL</option>\n";		echo "</select>\n</td>\n</tr>\n";		echo "<td><label for=\"sd_clean\">{$lang['strdrop']}</label></td><td><input type=\"checkbox\" id=\"sd_clean\" name=\"sd_clean\" /></td>\n</tr>\n";		echo "-->\n";		echo "</table>\n";				echo "<h3>{$lang['stroptions']}</h3>\n";		echo "<p><input type=\"radio\" id=\"output1\" name=\"output\" value=\"show\" checked=\"checked\" /><label for=\"output1\">{$lang['strshow']}</label>\n";		echo "<br/><input type=\"radio\" id=\"output2\" name=\"output\" value=\"download\" /><label for=\"output2\">{$lang['strdownload']}</label></p>\n";		echo "<p><input type=\"hidden\" name=\"action\" value=\"export\" />\n";		echo $misc->form;		echo "<input type=\"hidden\" name=\"subject\" value=\"view\" />\n";		echo "<input type=\"hidden\" name=\"view\" value=\"", htmlspecialchars($_REQUEST['view']), "\" />\n";		echo "<input type=\"submit\" value=\"{$lang['strexport']}\" /></p>\n";		echo "</form>\n";	}	/**	 * Show definition for a view	 */	function doDefinition($msg = '') {		global $data, $misc;		global $lang;			// Get view		$vdata = $data->getView($_REQUEST['view']);		$misc->printTrail('view');		$misc->printTabs('view','definition');		$misc->printMsg($msg);				if ($vdata->recordCount() > 0) {			// Show comment if any			if ($vdata->fields['relcomment'] !== null)				echo "<p class=\"comment\">", $misc->printVal($vdata->fields['relcomment']), "</p>\n";			echo "<table style=\"width: 100%\">\n";			echo "<tr><th class=\"data\">{$lang['strdefinition']}</th></tr>\n";			echo "<tr><td class=\"data1\">", $misc->printVal($vdata->fields['vwdefinition']), "</td></tr>\n";			echo "</table>\n";		}		else echo "<p>{$lang['strnodata']}</p>\n";				echo "<p><a class=\"navlink\" href=\"viewproperties.php?action=edit&amp;{$misc->href}&amp;view=", 			urlencode($_REQUEST['view']), "\">{$lang['stralter']}</a></p>\n";	}	/**	 * Displays a screen where they can alter a column in a view	 */	function doProperties($msg = '') {		global $data, $misc;		global $lang;		if (!isset($_REQUEST['stage'])) $_REQUEST['stage'] = 1;		switch ($_REQUEST['stage']) {			case 1:				global $lang;				$misc->printTrail('column');				$misc->printTitle($lang['stralter'],'pg.column.alter'); 				$misc->printMsg($msg);				echo "<form action=\"viewproperties.php\" method=\"post\">\n";				// Output view header				echo "<table>\n";				echo "<tr><th class=\"data required\">{$lang['strname']}</th><th class=\"data required\">{$lang['strtype']}</th>";				echo "<th class=\"data\">{$lang['strdefault']}</th><th class=\"data\">{$lang['strcomment']}</th></tr>";				$column = $data->getTableAttributes($_REQUEST['view'], $_REQUEST['column']);				if (!isset($_REQUEST['default'])) {					$_REQUEST['field'] = $column->fields['attname'];					$_REQUEST['default'] = $_REQUEST['olddefault'] = $column->fields['adsrc'];					$_REQUEST['comment'] = $column->fields['comment'];				}				echo "<tr><td><input name=\"field\" size=\"32\" value=\"",					htmlspecialchars($_REQUEST['field']), "\" /></td>";								echo "<td>", $misc->printVal($data->formatType($column->fields['type'], $column->fields['atttypmod'])), "</td>";				echo "<td><input name=\"default\" size=\"20\" value=\"", 					htmlspecialchars($_REQUEST['default']), "\" /></td>";				echo "<td><input name=\"comment\" size=\"32\" value=\"", 					htmlspecialchars($_REQUEST['comment']), "\" /></td>";								echo "</table>\n";				echo "<p><input type=\"hidden\" name=\"action\" value=\"properties\" />\n";				echo "<input type=\"hidden\" name=\"stage\" value=\"2\" />\n";				echo $misc->form;				echo "<input type=\"hidden\" name=\"view\" value=\"", htmlspecialchars($_REQUEST['view']), "\" />\n";				echo "<input type=\"hidden\" name=\"column\" value=\"", htmlspecialchars($_REQUEST['column']), "\" />\n";				echo "<input type=\"hidden\" name=\"olddefault\" value=\"", htmlspecialchars($_REQUEST['olddefault']), "\" />\n";				echo "<input type=\"submit\" value=\"{$lang['stralter']}\" />\n";				echo "<input type=\"submit\" name=\"cancel\" value=\"{$lang['strcancel']}\" /></p>\n";				echo "</form>\n";												break;			case 2:				global $data, $lang;				// Check inputs				if (trim($_REQUEST['field']) == '') {					$_REQUEST['stage'] = 1;					doProperties($lang['strcolneedsname']);					return;				}								// Alter the view column				$status = $data->alterColumn($_REQUEST['view'], $_REQUEST['column'], $_REQUEST['field'], 							     false, false, $_REQUEST['default'], $_REQUEST['olddefault'],							     '', '', '', '', $_REQUEST['comment']);				if ($status == 0)					doDefault($lang['strcolumnaltered']);				else {					$_REQUEST['stage'] = 1;					doProperties($lang['strcolumnalteredbad']);					return;				}				break;			default:				echo "<p>{$lang['strinvalidparam']}</p>\n";		}	}	function doAlter($confirm = false, $msg = '') {		if ($confirm) {			global $data, $misc, $lang;			$misc->printTrail('view');			$misc->printTitle($lang['stralter'], 'pg.view.alter');			$misc->printMsg($msg);			// Fetch view info			$view = $data->getView($_REQUEST['view']);			if ($view->recordCount() > 0) {				if (!isset($_POST['name'])) $_POST['name'] = $view->fields['relname'];	            if (!isset($_POST['owner'])) $_POST['owner'] = $view->fields['relowner'];	            if (!isset($_POST['newschema'])) $_POST['newschema'] = $view->fields['nspname'];				if (!isset($_POST['comment'])) $_POST['comment'] = $view->fields['relcomment'];				echo "<form action=\"viewproperties.php\" method=\"post\">\n";				echo "<table>\n";	            echo "<tr><th class=\"data left required\">{$lang['strname']}</th>\n";				echo "<td class=\"data1\">";				echo "<input name=\"name\" size=\"32\" maxlength=\"{$data->_maxNameLen}\" value=\"",					htmlspecialchars($_POST['name']), "\" /></td></tr>\n";				$server_info = $misc->getServerInfo();				if ($data->isSuperUser($server_info['username'])) {					// Fetch all users					$users = $data->getUsers();					echo "<tr><th class=\"data left required\">{$lang['strowner']}</th>\n";					echo "<td class=\"data1\"><select name=\"owner\">";					while (!$users->EOF) {						$uname = $users->fields['usename'];						echo "<option value=\"", htmlspecialchars($uname), "\"",						($uname == $_POST['owner']) ? ' selected="selected"' : '', ">", htmlspecialchars($uname), "</option>\n";						$users->moveNext();					}					echo "</select></td></tr>\n";				}				if ($data->hasAlterTableSchema()) {					$schemas = $data->getSchemas();					echo "<tr><th class=\"data left required\">{$lang['strschema']}</th>\n";					echo "<td class=\"data1\"><select name=\"newschema\">";					while (!$schemas->EOF) {						$schema = $schemas->fields['nspname'];						echo "<option value=\"", htmlspecialchars($schema), "\"",							($schema == $_POST['newschema']) ? ' selected="selected"' : '', ">", htmlspecialchars($schema), "</option>\n";						$schemas->moveNext();					}					echo "</select></td></tr>\n";				}								echo "<tr><th class=\"data left\">{$lang['strcomment']}</th>\n";				echo "<td class=\"data1\">";				echo "<textarea rows=\"3\" cols=\"32\" name=\"comment\">",	                htmlspecialchars($_POST['comment']), "</textarea></td></tr>\n";				echo "</table>\n";				echo "<input type=\"hidden\" name=\"action\" value=\"alter\" />\n";				echo "<input type=\"hidden\" name=\"view\" value=\"", htmlspecialchars($_REQUEST['view']), "\" />\n";				echo $misc->form;				echo "<p><input type=\"submit\" name=\"alter\" value=\"{$lang['stralter']}\" />\n";	            echo "<input type=\"submit\" name=\"cancel\" value=\"{$lang['strcancel']}\" /></p>\n";				echo "</form>\n";			}			else echo "<p>{$lang['strnodata']}</p>\n";		}		else{			global $data, $lang, $_reload_browser, $misc;			// For databases that don't allow owner change	        if (!isset($_POST['owner'])) $_POST['owner'] = '';	        if (!isset($_POST['newschema'])) $_POST['newschema'] = null;			$status = $data->alterView($_POST['view'], $_POST['name'], $_POST['owner'], $_POST['newschema'], $_POST['comment']);			if ($status == 0) {				// If view has been renamed, need to change to the new name and				// reload the browser frame.				if ($_POST['view'] != $_POST['name']) {					// Jump them to the new view name					$_REQUEST['view'] = $_POST['name'];	                // Force a browser reload					$_reload_browser = true;				}				// If schema has changed, need to change to the new schema and reload the browser				if (!empty($_POST['newschema']) && ($_POST['newschema'] != $data->_schema)) {					// Jump them to the new sequence schema					$misc->setCurrentSchema($_POST['newschema']);					$_reload_browser = true;				}				doDefault($lang['strviewaltered']);			}			else doAlter(true, $lang['strviewalteredbad']);		}	}	function doTree () {		global $misc, $data;		$reqvars = $misc->getRequestVars('column');		$columns = $data->getTableAttributes($_REQUEST['view']);				$attrs = array (			'text'   => field('attname'),			'action' => url('colproperties.php',							$reqvars,							array(								'view'     => $_REQUEST['view'],								'column'    => field('attname')							)						),			'icon'   => 'Column',			'iconAction' => url('display.php',							$reqvars,							array(								'view'     => $_REQUEST['view'],								'column'    => field('attname'),								'query'     => replace(									'SELECT "%column%", count(*) AS "count" FROM %view% GROUP BY "%column%" ORDER BY "%column%"',									array (										'%column%' => field('attname'),										'%view%' => $_REQUEST['view']									)								)							)			),			'toolTip'=> field('comment')		);		$misc->printTreeXML($columns, $attrs);		exit;	}	if ($action == 'tree') doTree();	/**	 * Show view definition and virtual columns	 */	function doDefault($msg = '') {		global $data, $misc;		global $lang;				function attPre(&$rowdata) {			global $data;			$rowdata->fields['+type'] = $data->formatType($rowdata->fields['type'], $rowdata->fields['atttypmod']);		}				$misc->printTrail('view');		$misc->printTabs('view','columns');		$misc->printMsg($msg);		// Get view		$vdata = $data->getView($_REQUEST['view']);		// Get columns (using same method for getting a view)		$attrs = $data->getTableAttributes($_REQUEST['view']);				// Show comment if any		if ($vdata->fields['relcomment'] !== null)			echo "<p class=\"comment\">", $misc->printVal($vdata->fields['relcomment']), "</p>\n";		$columns = array(			'column' => array(				'title' => $lang['strcolumn'],				'field' => field('attname'),			),			'type' => array(				'title' => $lang['strtype'],				'field' => field('+type'),			),			'default' => array(				'title' => $lang['strdefault'],				'field' => field('adsrc'),			),			'actions' => array(				'title' => $lang['stractions'],			),			'comment' => array(				'title' => $lang['strcomment'],				'field' => field('comment'),			),		);				$actions = array(			'alter' => array(				'title' => $lang['stralter'],				'url'   => "viewproperties.php?action=properties&amp;{$misc->href}&amp;view=".urlencode($_REQUEST['view'])."&amp;",				'vars'  => array('column' => 'attname'),			),		);				$misc->printTable($attrs, $columns, $actions, null, 'attPre');			echo "<br />\n";		echo "<ul class=\"navlink\">\n";		$return_url = urlencode("viewproperties.php?{$misc->href}&amp;view=" . urlencode($_REQUEST['view']));		echo "\t<li><a href=\"display.php?{$misc->href}&amp;view=", urlencode($_REQUEST['view']), "&amp;subject=view&amp;return_url={$return_url}&amp;return_desc=",			urlencode($lang['strback']), "\">{$lang['strbrowse']}</a></li>\n";		echo "\t<li><a href=\"views.php?action=confselectrows&amp;{$misc->href}&amp;view=", urlencode($_REQUEST['view']),"\">{$lang['strselect']}</a></li>\n";		echo "\t<li><a href=\"views.php?action=confirm_drop&amp;{$misc->href}&amp;view=", urlencode($_REQUEST['view']),"\">{$lang['strdrop']}</a></li>\n";		echo "\t<li><a href=\"viewproperties.php?action=confirm_alter&amp;{$misc->href}&amp;view=", urlencode($_REQUEST['view']),"\">{$lang['stralter']}</a></li>\n";		echo "</ul>\n";	}	$misc->printHeader($lang['strviews'] . ' - ' . $_REQUEST['view']);	$misc->printBody();	switch ($action) {		case 'save_edit':			if (isset($_POST['cancel'])) doDefinition();			else doSaveEdit();			break;		case 'edit':			doEdit();			break;		case 'export':			doExport();			break;		case 'definition':			doDefinition();			break;		case 'properties':			if (isset($_POST['cancel'])) doDefault();			else doProperties();			break;		case 'alter':			if (isset($_POST['alter'])) doAlter(false);			else doDefault();			break;		case 'confirm_alter':			doAlter(true);			break;		case 'drop':			if (isset($_POST['drop'])) doDrop(false);			else doDefault();			break;		case 'confirm_drop':			doDrop(true);			break;		default:			doDefault();			break;	}		$misc->printFooter();?>
<?php/** * PostgreSQL 8.1 support * * $Id: Postgres81.php,v 1.21 2008/01/19 13:46:15 ioguix Exp $ */include_once('./classes/database/Postgres82.php');class Postgres81 extends Postgres82 {	var $major_version = 8.1;	// List of all legal privileges that can be applied to different types	// of objects.	var $privlist = array(		'table' => array('SELECT', 'INSERT', 'UPDATE', 'DELETE', 'RULE', 'REFERENCES', 'TRIGGER', 'ALL PRIVILEGES'),		'view' => array('SELECT', 'INSERT', 'UPDATE', 'DELETE', 'RULE', 'REFERENCES', 'TRIGGER', 'ALL PRIVILEGES'),		'sequence' => array('SELECT', 'UPDATE', 'ALL PRIVILEGES'),		'database' => array('CREATE', 'TEMPORARY', 'ALL PRIVILEGES'),		'function' => array('EXECUTE', 'ALL PRIVILEGES'),		'language' => array('USAGE', 'ALL PRIVILEGES'),		'schema' => array('CREATE', 'USAGE', 'ALL PRIVILEGES'),		'tablespace' => array('CREATE', 'ALL PRIVILEGES')	);	// List of characters in acl lists and the privileges they	// refer to.	var $privmap = array(		'r' => 'SELECT',		'w' => 'UPDATE',		'a' => 'INSERT',		'd' => 'DELETE',		'R' => 'RULE',		'x' => 'REFERENCES',		't' => 'TRIGGER',		'X' => 'EXECUTE',		'U' => 'USAGE',		'C' => 'CREATE',		'T' => 'TEMPORARY'	);	// Array of allowed index types	var $typIndexes = array('BTREE', 'RTREE', 'GIST', 'HASH');	/**	 * Constructor	 * @param $conn The database connection	 */	function Postgres81($conn) {		$this->Postgres82($conn);	}	// Help functions		function getHelpPages() {		include_once('./help/PostgresDoc81.php');		return $this->help_page;	}	// Database functions	/**	 * Returns all databases available on the server	 * @return A list of databases, sorted alphabetically	 */	function getDatabases($currentdatabase = NULL) {		global $conf, $misc;				$server_info = $misc->getServerInfo();				if (isset($conf['owned_only']) && $conf['owned_only'] && !$this->isSuperUser($server_info['username'])) {			$username = $server_info['username'];			$this->clean($username);			$clause = " AND pr.rolname='{$username}'";		}		else $clause = '';		if ($currentdatabase != NULL) {			$this->clean($currentdatabase);			$orderby = "ORDER BY pdb.datname = '{$currentdatabase}' DESC, pdb.datname";		}		else			$orderby = "ORDER BY pdb.datname";		if (!$conf['show_system'])			$where = ' AND NOT pdb.datistemplate';		else			$where = ' AND pdb.datallowconn';		$sql = "SELECT pdb.datname AS datname, pr.rolname AS datowner, pg_encoding_to_char(encoding) AS datencoding,                               (SELECT description FROM pg_catalog.pg_description pd WHERE pdb.oid=pd.objoid) AS datcomment,                               (SELECT spcname FROM pg_catalog.pg_tablespace pt WHERE pt.oid=pdb.dattablespace) AS tablespace,							   pg_catalog.pg_database_size(pdb.oid) as dbsize                         FROM pg_catalog.pg_database pdb LEFT JOIN pg_catalog.pg_roles pr ON (pdb.datdba = pr.oid)  						WHERE true 			{$where}			{$clause}			{$orderby}";		return $this->selectSet($sql);	}	/**	 * Alters a database	 * the multiple return vals are for postgres 8+ which support more functionality in alter database	 * @param $dbName The name of the database	 * @param $newName new name for the database	 * @param $newOwner The new owner for the database	 * @return 0 success	 * @return -1 transaction error	 * @return -2 owner error	 * @return -3 rename error	 */	function alterDatabase($dbName, $newName, $newOwner = '', $comment = '') {		$this->clean($dbName);		$this->clean($newName);		$this->clean($newOwner);		//ignore $comment, not supported pre 8.2					$status = $this->beginTransaction();		if ($status != 0) {			$this->rollbackTransaction();			return -1;		}		if ($dbName != $newName) {			$status = $this->alterDatabaseRename($dbName, $newName);			if ($status != 0) {				$this->rollbackTransaction();				return -3;			}		}		$status = $this->alterDatabaseOwner($newName, $newOwner);		if ($status != 0) {			$this->rollbackTransaction();			return -2;		}		return $this->endTransaction();	}	// Tablespace functions		/**	 * Retrieves a tablespace's information	 * @return A recordset	 */	function getTablespace($spcname) {		$this->clean($spcname);		$sql = "SELECT spcname, pg_catalog.pg_get_userbyid(spcowner) AS spcowner, spclocation					FROM pg_catalog.pg_tablespace WHERE spcname='{$spcname}'";		return $this->selectSet($sql);	}		/**	 * Retrieves information for all tablespaces	 * @param $all Include all tablespaces (necessary when moving objects back to the default space)	 * @return A recordset	 */	function getTablespaces($all = false) {		global $conf;				$sql = "SELECT spcname, pg_catalog.pg_get_userbyid(spcowner) AS spcowner, spclocation					FROM pg_catalog.pg_tablespace";		if (!$conf['show_system'] && !$all) {			$sql .= " WHERE spcname NOT LIKE 'pg\\\\_%'";	}			$sql .= " ORDER BY spcname";		return $this->selectSet($sql);	}	// Capabilities	function hasCreateTableLikeWithConstraints() {return false;}	function hasSharedComments() {return false;}	function hasConcurrentIndexBuild() {return false;}}?>
<?php	/**	 * Process an arbitrary SQL query - tricky!  The main problem is that	 * unless we implement a full SQL parser, there's no way of knowing	 * how many SQL statements have been strung together with semi-colons	 * @param $_SESSION['sqlquery'] The SQL query string to execute	 *	 * $Id: sql.php,v 1.43 2008/01/10 20:19:27 xzilla Exp $	 */	// Prevent timeouts on large exports (non-safe mode only)	if (!ini_get('safe_mode')) set_time_limit(0);	// Include application functions	include_once('./libraries/lib.inc.php');	/**	 * This is a callback function to display the result of each separate query	 * @param ADORecordSet $rs The recordset returned by the script execetor	 */	function sqlCallback($query, $rs, $lineno) {		global $data, $misc, $lang, $_connection;		// Check if $rs is false, if so then there was a fatal error		if ($rs === false) {			echo htmlspecialchars($_FILES['script']['name']), ':', $lineno, ': ', nl2br(htmlspecialchars($_connection->getLastError())), "<br/>\n";		}		else {			// Print query results			switch (pg_result_status($rs)) {				case PGSQL_TUPLES_OK:					// If rows returned, then display the results					$num_fields = pg_numfields($rs);					echo "<p><table>\n<tr>";					for ($k = 0; $k < $num_fields; $k++) {						echo "<th class=\"data\">", $misc->printVal(pg_fieldname($rs, $k)), "</th>";					}							$i = 0;					$row = pg_fetch_row($rs);					while ($row !== false) {						$id = (($i % 2) == 0 ? '1' : '2');						echo "<tr class=\"data{$id}\">\n";						foreach ($row as $k => $v) {							echo "<td style=\"white-space:nowrap;\">", $misc->printVal($v, pg_fieldtype($rs, $k), array('null' => true)), "</td>";						}													echo "</tr>\n";						$row = pg_fetch_row($rs);						$i++;					};					echo "</table><br/>\n";					echo $i, " {$lang['strrows']}</p>\n";					break;				case PGSQL_COMMAND_OK:					// If we have the command completion tag					if (version_compare(phpversion(), '4.3', '>=')) {						echo htmlspecialchars(pg_result_status($rs, PGSQL_STATUS_STRING)), "<br/>\n";					}					// Otherwise if any rows have been affected					elseif ($data->conn->Affected_Rows() > 0) {						echo $data->conn->Affected_Rows(), " {$lang['strrowsaff']}<br/>\n";					}					// Otherwise output nothing...					break;				case PGSQL_EMPTY_QUERY:					break;				default:					break;			}		}	}	// We need to store the query in a session for editing purposes	// We avoid GPC vars to avoid truncating long queries	// If we came from a report, we need to look up the query	if (isset($_REQUEST['subject']) && $_REQUEST['subject'] == 'report' ) {		global $data, $misc;		include_once('./classes/Reports.php');		$reportsdb = new Reports($status);		$report = $reportsdb->getReport($_REQUEST['reportid']);		$_SESSION['sqlquery'] = $report->fields['report_sql'];		} 	elseif (isset($_POST['query'])) {		// Or maybe we came from an sql form		$_SESSION['sqlquery'] = $_POST['query'];	} else {		echo "could not find the query!!";	}		// Pagination maybe set by a get link that has it as FALSE,	// if that's the case, unset the variable.	if (isset($_REQUEST['paginate']) && $_REQUEST['paginate'] == 'f') {		unset($_REQUEST['paginate']);		unset($_POST['paginate']);		unset($_GET['paginate']);	}	// Check to see if pagination has been specified. In that case, send to display	// script for pagination	/* if a file is given or the request is an explain, do not paginate */	if (isset($_REQUEST['paginate']) && !(isset($_FILES['script']) && $_FILES['script']['size'] > 0)			&& (preg_match('/^\s*explain/i', $_SESSION['sqlquery']) == 0)) {		include('./display.php');		exit;	}		$subject = isset($_REQUEST['subject'])? $_REQUEST['subject'] : '';	$misc->printHeader($lang['strqueryresults']);	$misc->printBody();	$misc->printTrail('database');	$misc->printTitle($lang['strqueryresults']);	// Set the schema search path	if (isset($_REQUEST['search_path'])) {		if ($data->setSearchPath(array_map('trim',explode(',',$_REQUEST['search_path']))) != 0) {			$misc->printFooter();			exit;		}	}	// May as well try to time the query	if (function_exists('microtime')) {		list($usec, $sec) = explode(' ', microtime());		$start_time = ((float)$usec + (float)$sec);	}	else $start_time = null;	// Execute the query.  If it's a script upload, special handling is necessary	if (isset($_FILES['script']) && $_FILES['script']['size'] > 0)		$data->executeScript('script', 'sqlCallback');	else {		// Set fetch mode to NUM so that duplicate field names are properly returned		$data->conn->setFetchMode(ADODB_FETCH_NUM);		$rs = $data->conn->Execute($_SESSION['sqlquery']);		// $rs will only be an object if there is no error		if (is_object($rs)) {			// Request was run, saving it in history			if(!isset($_REQUEST['nohistory']))				$misc->saveScriptHistory($_SESSION['sqlquery']);			// Now, depending on what happened do various things				// First, if rows returned, then display the results			if ($rs->recordCount() > 0) {				echo "<table>\n<tr>";				foreach ($rs->fields as $k => $v) {					$finfo = $rs->fetchField($k);					echo "<th class=\"data\">", $misc->printVal($finfo->name), "</th>";				}                                echo "</tr>\n";					$i = 0;						while (!$rs->EOF) {					$id = (($i % 2) == 0 ? '1' : '2');					echo "<tr class=\"data{$id}\">\n";					foreach ($rs->fields as $k => $v) {						$finfo = $rs->fetchField($k);						echo "<td style=\"white-space:nowrap;\">", $misc->printVal($v, $finfo->type, array('null' => true)), "</td>";					}												echo "</tr>\n";					$rs->moveNext();					$i++;				}				echo "</table>\n";				echo "<p>", $rs->recordCount(), " {$lang['strrows']}</p>\n";			}			// Otherwise if any rows have been affected			elseif ($data->conn->Affected_Rows() > 0) {				echo "<p>", $data->conn->Affected_Rows(), " {$lang['strrowsaff']}</p>\n";			}			// Otherwise nodata to print			else echo '<p>', $lang['strnodata'], "</p>\n";		}	}	// May as well try to time the query	if ($start_time !== null) {		list($usec, $sec) = explode(' ', microtime());		$end_time = ((float)$usec + (float)$sec);			// Get duration in milliseconds, round to 3dp's			$duration = number_format(($end_time - $start_time) * 1000, 3);	}	else $duration = null;	// Reload the browser as we may have made schema changes	$_reload_browser = true;	// Display duration if we know it	if ($duration !== null) {		echo "<p>", sprintf($lang['strruntime'], $duration), "</p>\n";	}		echo "<p>{$lang['strsqlexecuted']}</p>\n";				echo "<ul class=\"navlink\">\n";		// Return	if (isset($_REQUEST['return_url']) && isset($_REQUEST['return_desc']))		echo "\t<li><a href=\"{$_REQUEST['return_url']}\">{$_REQUEST['return_desc']}</a></li>\n";	// Edit			echo "\t<li><a href=\"database.php?database=", urlencode($_REQUEST['database']),		"&amp;server=", urlencode($_REQUEST['server']), "&amp;action=sql\">{$lang['streditsql']}</a></li>\n";					// Create report	if (($subject !== 'report') && $conf['show_reports'] && isset($rs) && is_object($rs) && $rs->recordCount() > 0)		echo "\t<li><a href=\"reports.php?{$misc->href}&amp;action=create&amp;report_sql=",			urlencode($_SESSION['sqlquery']), "\">{$lang['strcreatereport']}</a></li>\n";		// Create view and download	if (isset($_SESSION['sqlquery']) && isset($rs) && is_object($rs) && $rs->recordCount() > 0) {		// Report views don't set a schema, so we need to disable create view in that case		if (isset($_REQUEST['schema'])) 			echo "\t<li><a href=\"views.php?action=create&amp;formDefinition=",				urlencode($_SESSION['sqlquery']), "&amp;{$misc->href}\">{$lang['strcreateview']}</a></li>\n";		echo "\t<li><a href=\"dataexport.php?query=", urlencode($_SESSION['sqlquery']);		if (isset($_REQUEST['search_path']))			echo "&amp;search_path=", urlencode($_REQUEST['search_path']);		echo "&amp;{$misc->href}\">{$lang['strdownload']}</a></li>\n";	}	echo "</ul>\n";		$misc->printFooter();?>
<?php	/**	 * List extra information on a table	 *	 * $Id: info.php,v 1.14 2007/05/28 17:30:32 ioguix Exp $	 */	// Include application functions	include_once('./libraries/lib.inc.php');	$action = (isset($_REQUEST['action'])) ? $_REQUEST['action'] : '';	/**	 * List all the information on the table	 */	function doDefault($msg = '') {		global $data, $misc;		global $lang;		$misc->printTrail('table');		$misc->printTabs('table','info');		$misc->printMsg($msg);		// common params for printVal		$shownull = array('null' => true);		// Fetch info		$referrers = $data->getReferrers($_REQUEST['table']);		$parents = $data->getTableParents($_REQUEST['table']);		$children = $data->getTableChildren($_REQUEST['table']);		$tablestatstups = $data->getStatsTableTuples($_REQUEST['table']);		$tablestatsio = $data->getStatsTableIO($_REQUEST['table']);		$indexstatstups = $data->getStatsIndexTuples($_REQUEST['table']);		$indexstatsio = $data->getStatsIndexIO($_REQUEST['table']);        		// Check that there is some info		if (($referrers === -99 || ($referrers !== -99 && $referrers->recordCount() == 0)) 				&& $parents->recordCount() == 0 && $children->recordCount() == 0				&& ($tablestatstups->recordCount() == 0 && $tablestatsio->recordCount() == 0				&& $indexstatstups->recordCount() == 0 && $indexstatsio->recordCount() == 0)) {			$misc->printMsg($lang['strnoinfo']);		}		else {			// Referring foreign tables			if ($referrers !== -99 && $referrers->recordCount() > 0) {				echo "<h3>{$lang['strreferringtables']}</h3>\n";				echo "<table>\n";				echo "\t<tr>\n\t\t";				echo "<th class=\"data\">{$lang['strschema']}</th>";				echo "<th class=\"data\">{$lang['strtable']}</th>";				echo "<th class=\"data\">{$lang['strname']}</th><th class=\"data\">{$lang['strdefinition']}</th>";				echo "<th class=\"data\">{$lang['stractions']}</th>\n";				echo "\t</tr>\n";				$i = 0;								while (!$referrers->EOF) {					$id = ( ($i % 2 ) == 0 ? '1' : '2' );					echo "\t<tr class=\"data{$id}\">\n\t\t";					echo "<td>", $misc->printVal($referrers->fields['nspname']), "</td>";					echo "<td>", $misc->printVal($referrers->fields['relname']), "</td>";					echo "<td>", $misc->printVal($referrers->fields['conname']), "</td>";					echo "<td>", $misc->printVal($referrers->fields['consrc']), "</td>";					echo "<td class=\"opbutton{$id}\"><a href=\"constraints.php?{$misc->href}", 						"&amp;schema=", urlencode($referrers->fields['nspname']),						"&amp;table=", urlencode($referrers->fields['relname']), "\">{$lang['strproperties']}</a></td>\n";					echo "\t</tr>\n";					$referrers->movenext();					$i++;				}					echo "</table>\n";			}						// Parent tables			if ($parents->recordCount() > 0) {				echo "<h3>{$lang['strparenttables']}</h3>\n";				echo "<table>\n";				echo "\t<tr>\n\t\t";				echo "<th class=\"data\">{$lang['strschema']}</th>";				echo "\t\t<th class=\"data\">{$lang['strtable']}</th>";							echo "<th class=\"data\">{$lang['stractions']}</th>\n";				echo "\t</tr>\n";				$i = 0;								while (!$parents->EOF) {					$id = ( ($i % 2 ) == 0 ? '1' : '2' );					echo "\t<tr class=\"data{$id}\">\n";					echo "\t\t<td>", $misc->printVal($parents->fields['nspname']), "</td>";					echo "<td>", $misc->printVal($parents->fields['relname']), "</td>";					echo "<td class=\"opbutton{$id}\"><a href=\"tblproperties.php?{$misc->href}",						"&amp;schema=", urlencode($parents->fields['nspname']),						"&amp;table=", urlencode($parents->fields['relname']), "\">{$lang['strproperties']}</a></td>\n";					echo "\t</tr>\n";					$parents->movenext();					$i++;				}					echo "</table>\n";			}				// Child tables			if ($children->recordCount() > 0) {				echo "<h3>{$lang['strchildtables']}</h3>\n";				echo "<table>\n";				echo "\t<tr>\n";				echo "<th class=\"data\">{$lang['strschema']}</th>";				echo "\t\t<th class=\"data\">{$lang['strtable']}</th>";							echo "<th class=\"data\">{$lang['stractions']}</th>\n";				echo "\t</tr>\n";				$i = 0;								while (!$children->EOF) {					$id = ( ($i % 2 ) == 0 ? '1' : '2' );					echo "\t<tr class=\"data{$id}\">\n";					echo "\t\t<td>", $misc->printVal($children->fields['nspname']), "</td>";					echo "<td>", $misc->printVal($children->fields['relname']), "</td>";					echo "<td class=\"opbutton{$id}\"><a href=\"tblproperties.php?{$misc->href}",						"&amp;schema=", urlencode($children->fields['nspname']),						"&amp;table=", urlencode($children->fields['relname']), "\">{$lang['strproperties']}</a></td>\n";					echo "\t</tr>\n";					$children->movenext();					$i++;				}					echo "</table>\n";			}			// Row performance			if ($tablestatstups->recordCount() > 0) {				echo "<h3>{$lang['strrowperf']}</h3>\n";				echo "<table>\n";				echo "\t<tr>\n";				echo "\t\t<th class=\"data\" colspan=\"2\">{$lang['strsequential']}</th>\n";				echo "\t\t<th class=\"data\" colspan=\"2\">{$lang['strindex']}</th>\n";				echo "\t\t<th class=\"data\" colspan=\"3\">{$lang['strrows2']}</th>\n";				echo "\t</tr>\n";				echo "\t<tr>\n";				echo "\t\t<th class=\"data\">{$lang['strscan']}</th>\n";				echo "\t\t<th class=\"data\">{$lang['strread']}</th>\n";				echo "\t\t<th class=\"data\">{$lang['strscan']}</th>\n";				echo "\t\t<th class=\"data\">{$lang['strfetch']}</th>\n";				echo "\t\t<th class=\"data\">{$lang['strinsert']}</th>\n";				echo "\t\t<th class=\"data\">{$lang['strupdate']}</th>\n";				echo "\t\t<th class=\"data\">{$lang['strdelete']}</th>\n";				echo "\t</tr>\n";				$i = 0;								while (!$tablestatstups->EOF) {					$id = ( ($i % 2 ) == 0 ? '1' : '2' );					echo "\t<tr class=\"data{$id}\">\n";					echo "\t\t<td>", $misc->printVal($tablestatstups->fields['seq_scan'], 'int4', $shownull), "</td>\n";					echo "\t\t<td>", $misc->printVal($tablestatstups->fields['seq_tup_read'], 'int4', $shownull), "</td>\n";					echo "\t\t<td>", $misc->printVal($tablestatstups->fields['idx_scan'], 'int4', $shownull), "</td>\n";					echo "\t\t<td>", $misc->printVal($tablestatstups->fields['idx_tup_fetch'], 'int4', $shownull), "</td>\n";					echo "\t\t<td>", $misc->printVal($tablestatstups->fields['n_tup_ins'], 'int4', $shownull), "</td>\n";					echo "\t\t<td>", $misc->printVal($tablestatstups->fields['n_tup_upd'], 'int4', $shownull), "</td>\n";					echo "\t\t<td>", $misc->printVal($tablestatstups->fields['n_tup_del'], 'int4', $shownull), "</td>\n";					echo "\t</tr>\n";					$tablestatstups->movenext();					$i++;				}					echo "</table>\n";			}			// I/O performance			if ($tablestatsio->recordCount() > 0) {				echo "<h3>{$lang['strioperf']}</h3>\n";				echo "<table>\n";				echo "\t<tr>\n";				echo "\t\t<th class=\"data\" colspan=\"3\">{$lang['strheap']}</th>\n";				echo "\t\t<th class=\"data\" colspan=\"3\">{$lang['strindex']}</th>\n";				echo "\t\t<th class=\"data\" colspan=\"3\">{$lang['strtoast']}</th>\n";				echo "\t\t<th class=\"data\" colspan=\"3\">{$lang['strtoastindex']}</th>\n";				echo "\t</tr>\n";				echo "\t<tr>\n";				echo "\t\t<th class=\"data\">{$lang['strdisk']}</th>\n";				echo "\t\t<th class=\"data\">{$lang['strcache']}</th>\n";				echo "\t\t<th class=\"data\">{$lang['strpercent']}</th>\n";				echo "\t\t<th class=\"data\">{$lang['strdisk']}</th>\n";				echo "\t\t<th class=\"data\">{$lang['strcache']}</th>\n";				echo "\t\t<th class=\"data\">{$lang['strpercent']}</th>\n";				echo "\t\t<th class=\"data\">{$lang['strdisk']}</th>\n";				echo "\t\t<th class=\"data\">{$lang['strcache']}</th>\n";				echo "\t\t<th class=\"data\">{$lang['strpercent']}</th>\n";				echo "\t\t<th class=\"data\">{$lang['strdisk']}</th>\n";				echo "\t\t<th class=\"data\">{$lang['strcache']}</th>\n";				echo "\t\t<th class=\"data\">{$lang['strpercent']}</th>\n";				echo "\t</tr>\n";				$i = 0;								while (!$tablestatsio->EOF) {					$id = ( ($i % 2 ) == 0 ? '1' : '2' );					echo "\t<tr class=\"data{$id}\">\n";					$total = $tablestatsio->fields['heap_blks_hit'] + $tablestatsio->fields['heap_blks_read'];					if ($total > 0)	$percentage = round(($tablestatsio->fields['heap_blks_hit'] / $total) * 100);					else $percentage = 0;					echo "\t\t<td>", $misc->printVal($tablestatsio->fields['heap_blks_read'], 'int4', $shownull), "</td>\n";					echo "\t\t<td>", $misc->printVal($tablestatsio->fields['heap_blks_hit'], 'int4', $shownull), "</td>\n";					echo "\t\t<td>({$percentage}{$lang['strpercent']})</td>\n";					$total = $tablestatsio->fields['idx_blks_hit'] + $tablestatsio->fields['idx_blks_read'];					if ($total > 0)	$percentage = round(($tablestatsio->fields['idx_blks_hit'] / $total) * 100);					else $percentage = 0;					echo "\t\t<td>", $misc->printVal($tablestatsio->fields['idx_blks_read'], 'int4', $shownull), "</td>\n";					echo "\t\t<td>", $misc->printVal($tablestatsio->fields['idx_blks_hit'], 'int4', $shownull), "</td>\n";					echo "\t\t<td>({$percentage}{$lang['strpercent']})</td>\n";					$total = $tablestatsio->fields['toast_blks_hit'] + $tablestatsio->fields['toast_blks_read'];					if ($total > 0)	$percentage = round(($tablestatsio->fields['toast_blks_hit'] / $total) * 100);					else $percentage = 0;					echo "\t\t<td>", $misc->printVal($tablestatsio->fields['toast_blks_read'], 'int4', $shownull), "</td>\n";					echo "\t\t<td>", $misc->printVal($tablestatsio->fields['toast_blks_hit'], 'int4', $shownull), "</td>\n";					echo "\t\t<td>({$percentage}{$lang['strpercent']})</td>\n";					$total = $tablestatsio->fields['tidx_blks_hit'] + $tablestatsio->fields['tidx_blks_read'];					if ($total > 0)	$percentage = round(($tablestatsio->fields['tidx_blks_hit'] / $total) * 100);					else $percentage = 0;					echo "\t\t<td>", $misc->printVal($tablestatsio->fields['tidx_blks_read'], 'int4', $shownull), "</td>\n";					echo "\t\t<td>", $misc->printVal($tablestatsio->fields['tidx_blks_hit'], 'int4', $shownull), "</td>\n";					echo "\t\t<td>({$percentage}{$lang['strpercent']})</td>\n";					echo "\t</tr>\n";					$tablestatsio->movenext();					$i++;				}					echo "</table>\n";			}			// Index row performance			if ($indexstatstups->recordCount() > 0) {				echo "<h3>{$lang['stridxrowperf']}</h3>\n";				echo "<table>\n";				echo "\t<tr>\n";				echo "\t\t<th class=\"data\">{$lang['strindex']}</th>\n";				echo "\t\t<th class=\"data\">{$lang['strscan']}</th>\n";				echo "\t\t<th class=\"data\">{$lang['strread']}</th>\n";				echo "\t\t<th class=\"data\">{$lang['strfetch']}</th>\n";				echo "\t</tr>\n";				$i = 0;								while (!$indexstatstups->EOF) {					$id = ( ($i % 2 ) == 0 ? '1' : '2' );					echo "\t<tr class=\"data{$id}\">\n";					echo "\t\t<td>", $misc->printVal($indexstatstups->fields['indexrelname']), "</td>\n";					echo "\t\t<td>", $misc->printVal($indexstatstups->fields['idx_scan'], 'int4', $shownull), "</td>\n";					echo "\t\t<td>", $misc->printVal($indexstatstups->fields['idx_tup_read'], 'int4', $shownull), "</td>\n";					echo "\t\t<td>", $misc->printVal($indexstatstups->fields['idx_tup_fetch'], 'int4', $shownull), "</td>\n";					echo "\t</tr>\n";					$indexstatstups->movenext();					$i++;				}					echo "</table>\n";			}			// Index I/0 performance			if ($indexstatsio->recordCount() > 0) {				echo "<h3>{$lang['stridxioperf']}</h3>\n";				echo "<table>\n";				echo "\t<tr>\n";				echo "\t\t<th class=\"data\">{$lang['strindex']}</th>\n";				echo "\t\t<th class=\"data\">{$lang['strdisk']}</th>\n";				echo "\t\t<th class=\"data\">{$lang['strcache']}</th>\n";				echo "\t\t<th class=\"data\">{$lang['strpercent']}</th>\n";				echo "\t</tr>\n";				$i = 0;								while (!$indexstatsio->EOF) {					$id = ( ($i % 2 ) == 0 ? '1' : '2' );					echo "\t<tr class=\"data{$id}\">\n";					$total = $indexstatsio->fields['idx_blks_hit'] + $indexstatsio->fields['idx_blks_read'];					if ($total > 0)	$percentage = round(($indexstatsio->fields['idx_blks_hit'] / $total) * 100);					else $percentage = 0;					echo "\t\t<td>", $misc->printVal($indexstatsio->fields['indexrelname']), "</td>\n";					echo "\t\t<td>", $misc->printVal($indexstatsio->fields['idx_blks_read'], 'int4', $shownull), "</td>\n";					echo "\t\t<td>", $misc->printVal($indexstatsio->fields['idx_blks_hit'], 'int4', $shownull), "</td>\n";					echo "\t\t<td>({$percentage}{$lang['strpercent']})</td>\n";					echo "\t</tr>\n";					$indexstatsio->movenext();					$i++;				}					echo "</table>\n";			}		}	}	$misc->printHeader($lang['strtables'] . ' - ' . $_REQUEST['table'] . ' - ' . $lang['strinfo']);	$misc->printBody();		switch ($action) {		default:			doDefault();			break;	}		$misc->printFooter();?>
<?php	$script = ''; // init global value script		/**	 * Show confirmation of cluster and perform cluster	 */	function doCluster($type, $confirm=false) {		global $script, $data, $misc, $lang;		if (($type == 'table') && empty($_REQUEST['table']) && empty($_REQUEST['ma'])) {			doDefault($lang['strspecifytabletocluster']);			return;		}		if ($confirm) {			if (isset($_REQUEST['ma'])) {				$misc->printTrail('schema');				$misc->printTitle($lang['strclusterindex'], 'pg.index.cluster');				echo "<form action=\"{$script}\" method=\"post\">\n";				foreach($_REQUEST['ma'] as $v) {					$a = unserialize(htmlspecialchars_decode($v, ENT_QUOTES));					echo "<p>", sprintf($lang['strconfclustertable'], $misc->printVal($a['table'])), "</p>\n";					echo "<input type=\"hidden\" name=\"table[]\" value=\"", htmlspecialchars($a['table']), "\" />\n";				}			} // END if multi cluster			else {				$misc->printTrail($type);				$misc->printTitle($lang['strclusterindex'], 'pg.index.cluster');								echo "<form action=\"{$script}\" method=\"post\">\n";								if ($type == 'table') {					echo "<p>", sprintf($lang['strconfclustertable'], $misc->printVal($_REQUEST['object'])), "</p>\n";					echo "<input type=\"hidden\" name=\"table\" value=\"", htmlspecialchars($_REQUEST['object']), "\" />\n";				}				else {					echo "<p>", sprintf($lang['strconfclusterdatabase'], $misc->printVal($_REQUEST['object'])), "</p>\n";					echo "<input type=\"hidden\" name=\"table\" value=\"\" />\n";				}			}			echo "<input type=\"hidden\" name=\"action\" value=\"cluster\" />\n";						echo $misc->form;			echo "<input type=\"submit\" name=\"cluster\" value=\"{$lang['strcluster']}\" />\n"; //TODO			echo "<input type=\"submit\" name=\"cancel\" value=\"{$lang['strcancel']}\" />\n";			echo "</form>\n";		} // END single cluster		else {			//If multi table cluster			if ($type == 'table') { // cluster one or more table				if (is_array($_REQUEST['table'])) {					$msg='';					foreach($_REQUEST['table'] as $o) {						$status = $data->clusterIndex($o);						if ($status == 0)							$msg.= sprintf('%s: %s<br />', htmlentities($o), $lang['strclusteredgood']);						else {							doDefault($type, sprintf('%s%s: %s<br />', $msg, htmlentities($o), $lang['strclusteredbad']));							return;						}					}					 // Everything went fine, back to the Default page....					 doDefault($msg);				}				else {					$status = $data->clusterIndex($_REQUEST['object']);					if ($status == 0) {						doAdmin($type, $lang['strclusteredgood']);					}					else						doAdmin($type, $lang['strclusteredbad']);				}			}			else { // Cluster all tables in database				$status = $data->clusterIndex();				if ($status == 0) {					doAdmin($type, $lang['strclusteredgood']);				}				else					doAdmin($type, $lang['strclusteredbad']);			}		}	}		/**	 * Show confirmation of reindex and perform reindex	 */	function doReindex($type, $confirm=false) {		global $script, $data, $misc, $lang, $_reload_browser;		if (($type == 'table') && empty($_REQUEST['table']) && empty($_REQUEST['ma'])) {			doDefault($lang['strspecifytabletoreindex']);			return;		}		if ($confirm) {			if (isset($_REQUEST['ma'])) {				$misc->printTrail('schema');				$misc->printTitle($lang['strreindex'], 'pg.reindex');				echo "<form action=\"{$script}\" method=\"post\">\n";				foreach($_REQUEST['ma'] as $v) {					$a = unserialize(htmlspecialchars_decode($v, ENT_QUOTES));					echo "<p>", sprintf($lang['strconfreindextable'], $misc->printVal($a['table'])), "</p>\n";					echo "<input type=\"hidden\" name=\"table[]\" value=\"", htmlspecialchars($a['table']), "\" />\n";				}			} // END if multi reindex			else {				$misc->printTrail($type);				$misc->printTitle($lang['strreindex'], 'pg.reindex');								echo "<form action=\"{$script}\" method=\"post\">\n";								if ($type == 'table') {					echo "<p>", sprintf($lang['strconfreindextable'], $misc->printVal($_REQUEST['object'])), "</p>\n";					echo "<input type=\"hidden\" name=\"table\" value=\"", htmlspecialchars($_REQUEST['object']), "\" />\n";				}				else {					echo "<p>", sprintf($lang['strconfreindexdatabase'], $misc->printVal($_REQUEST['object'])), "</p>\n";					echo "<input type=\"hidden\" name=\"table\" value=\"\" />\n";				}			}			echo "<input type=\"hidden\" name=\"action\" value=\"reindex\" />\n";						if ($data->hasForceReindex())				echo "<p><input type=\"checkbox\" id=\"reindex_force\" name=\"reindex_force\" /><label for=\"reindex_force\">{$lang['strforce']}</label></p>\n";						echo $misc->form;			echo "<input type=\"submit\" name=\"reindex\" value=\"{$lang['strreindex']}\" />\n"; //TODO			echo "<input type=\"submit\" name=\"cancel\" value=\"{$lang['strcancel']}\" />\n";			echo "</form>\n";		} // END single reindex		else {			//If multi table reindex			if (($type == 'table') && is_array($_REQUEST['table'])) {				$msg='';				foreach($_REQUEST['table'] as $o) {					$status = $data->reindex(strtoupper($type), $o, isset($_REQUEST['reindex_force']));					if ($status == 0)						$msg.= sprintf('%s: %s<br />', htmlentities($o), $lang['strreindexgood']);					else {						doDefault($type, sprintf('%s%s: %s<br />', $msg, htmlentities($o), $lang['strreindexbad']));						return;					}				}				 // Everything went fine, back to the Default page....				 $_reload_browser = true;				 doDefault($msg);			}			else {				$status = $data->reindex(strtoupper($type), $_REQUEST['object'], isset($_REQUEST['reindex_force']));				if ($status == 0) {					$_reload_browser = true;					doAdmin($type, $lang['strreindexgood']);				}				else					doAdmin($type, $lang['strreindexbad']);			}		}	}		/**	 * Show confirmation of analyze and perform analyze	 */	function doAnalyze($type, $confirm=false) {		global $script, $data, $misc, $lang, $_reload_browser;		if (($type == 'table') && empty($_REQUEST['table']) && empty($_REQUEST['ma'])) {			doDefault($lang['strspecifytabletoanalyze']);			return;		}		if ($confirm) {			if (isset($_REQUEST['ma'])) {				$misc->printTrail('schema');				$misc->printTitle($lang['stranalyze'], 'pg.analyze');				echo "<form action=\"{$script}\" method=\"post\">\n";				foreach($_REQUEST['ma'] as $v) {					$a = unserialize(htmlspecialchars_decode($v, ENT_QUOTES));					echo "<p>", sprintf($lang['strconfanalyzetable'], $misc->printVal($a['table'])), "</p>\n";					echo "<input type=\"hidden\" name=\"table[]\" value=\"", htmlspecialchars($a['table']), "\" />\n";				}			} // END if multi analyze			else {				$misc->printTrail($type);				$misc->printTitle($lang['stranalyze'], 'pg.analyze');								echo "<form action=\"{$script}\" method=\"post\">\n";								if ($type == 'table') {					echo "<p>", sprintf($lang['strconfanalyzetable'], $misc->printVal($_REQUEST['object'])), "</p>\n";					echo "<input type=\"hidden\" name=\"table\" value=\"", htmlspecialchars($_REQUEST['object']), "\" />\n";				}				else {					echo "<p>", sprintf($lang['strconfanalyzedatabase'], $misc->printVal($_REQUEST['object'])), "</p>\n";					echo "<input type=\"hidden\" name=\"table\" value=\"\" />\n";				}			}			echo "<input type=\"hidden\" name=\"action\" value=\"analyze\" />\n";			echo $misc->form;			echo "<input type=\"submit\" name=\"analyze\" value=\"{$lang['stranalyze']}\" />\n"; //TODO			echo "<input type=\"submit\" name=\"cancel\" value=\"{$lang['strcancel']}\" />\n";			echo "</form>\n";		} // END single analyze		else {			//If multi table analyze			if (($type == 'table') && is_array($_REQUEST['table'])) {				$msg='';				foreach($_REQUEST['table'] as $o) {					$status = $data->analyzeDB($o);					if ($status == 0)						$msg.= sprintf('%s: %s<br />', htmlentities($o), $lang['stranalyzegood']);					else {						doDefault($type, sprintf('%s%s: %s<br />', $msg, htmlentities($o), $lang['stranalyzebad']));						return;					}				}				 // Everything went fine, back to the Default page....				 $_reload_browser = true;				 doDefault($msg);			}			else {				//we must pass table here. When empty, analyze the whole db				$status = $data->analyzeDB($_REQUEST['table']);				if ($status == 0) {					$_reload_browser = true;					doAdmin($type, $lang['stranalyzegood']);				}				else					doAdmin($type, $lang['stranalyzebad']);			}		}	}	/**	 * Show confirmation of vacuum and perform actual vacuum	 */	function doVacuum($type, $confirm = false) {		global $script, $data, $misc, $lang, $_reload_browser;		if (($type == 'table') && empty($_REQUEST['table']) && empty($_REQUEST['ma'])) {			doDefault($lang['strspecifytabletovacuum']);			return;		}		if ($confirm) {			if (isset($_REQUEST['ma'])) {				$misc->printTrail('schema');				$misc->printTitle($lang['strvacuum'], 'pg.vacuum');				echo "<form action=\"{$script}\" method=\"post\">\n";				foreach($_REQUEST['ma'] as $v) {					$a = unserialize(htmlspecialchars_decode($v, ENT_QUOTES));					echo "<p>", sprintf($lang['strconfvacuumtable'], $misc->printVal($a['table'])), "</p>\n";					echo "<input type=\"hidden\" name=\"table[]\" value=\"", htmlspecialchars($a['table']), "\" />\n";				}			} // END if multi vacuum			else {				$misc->printTrail($type);				$misc->printTitle($lang['strvacuum'], 'pg.vacuum');				echo "<form action=\"{$script}\" method=\"post\">\n";								if ($type == 'table') {					echo "<p>", sprintf($lang['strconfvacuumtable'], $misc->printVal($_REQUEST['object'])), "</p>\n";					echo "<input type=\"hidden\" name=\"table\" value=\"", htmlspecialchars($_REQUEST['object']), "\" />\n";				}				else {					echo "<p>", sprintf($lang['strconfvacuumdatabase'], $misc->printVal($_REQUEST['object'])), "</p>\n";					echo "<input type=\"hidden\" name=\"table\" value=\"\" />\n";				}			}			echo "<input type=\"hidden\" name=\"action\" value=\"vacuum\" />\n";			echo $misc->form;			echo "<p><input type=\"checkbox\" id=\"vacuum_full\" name=\"vacuum_full\" /> <label for=\"vacuum_full\">{$lang['strfull']}</label></p>\n";			echo "<p><input type=\"checkbox\" id=\"vacuum_analyze\" name=\"vacuum_analyze\" /> <label for=\"vacuum_analyze\">{$lang['stranalyze']}</label></p>\n";			echo "<p><input type=\"checkbox\" id=\"vacuum_freeze\" name=\"vacuum_freeze\" /><label for=\"vacuum_freeze\">{$lang['strfreeze']}</label></p>\n";			echo "<input type=\"submit\" name=\"vacuum\" value=\"{$lang['strvacuum']}\" />\n";			echo "<input type=\"submit\" name=\"cancel\" value=\"{$lang['strcancel']}\" />\n";			echo "</form>\n";		} // END single vacuum		else {			//If multi drop			if (is_array($_REQUEST['table'])) {				$msg='';				foreach($_REQUEST['table'] as $t) {					$status = $data->vacuumDB($t, isset($_REQUEST['vacuum_analyze']), isset($_REQUEST['vacuum_full']), isset($_REQUEST['vacuum_freeze']));					if ($status == 0)						$msg.= sprintf('%s: %s<br />', htmlentities($t), $lang['strvacuumgood']);					else {						doDefault($type, sprintf('%s%s: %s<br />', $msg, htmlentities($t), $lang['strvacuumbad']));						return;					}				}				 // Everything went fine, back to the Default page....				 $_reload_browser = true;				 doDefault($msg);			}			else {				//we must pass table here. When empty, vacuum the whole db				$status = $data->vacuumDB($_REQUEST['table'], isset($_REQUEST['vacuum_analyze']), isset($_REQUEST['vacuum_full']), isset($_REQUEST['vacuum_freeze']));				if ($status == 0) {					$_reload_browser = true;					doAdmin($type, $lang['strvacuumgood']);				}				else					doAdmin($type, $lang['strvacuumbad']);			}		}	}	/**	 * Add or Edit autovacuum params and save them	 */	function doEditAutovacuum($type, $confirm, $msg='') {		global $script, $data, $misc, $lang;				if (empty($_REQUEST['table'])) {			doAdmin($type, '', $lang['strspecifyeditvacuumtable']);			return;		}				$script = ($type == 'database')? 'database.php' : 'tables.php';				if ($confirm) {			$misc->printTrail($type);			$misc->printTitle(sprintf($lang['streditvacuumtable'], $misc->printVal($_REQUEST['table'])));			$misc->printMsg(sprintf($msg, $misc->printVal($_REQUEST['table'])));			if (empty($_REQUEST['table'])) {				doAdmin($type, '', $lang['strspecifyeditvacuumtable']);				return;			}						$old_val = $data->getTableAutovacuum($_REQUEST['table']);			$defaults = $data->getAutovacuum();			$old_val = $old_val->fields;			if (isset($old_val['autovacuum_enabled']) and ($old_val['autovacuum_enabled'] == 'off')) {				$enabled = '';				$disabled = 'checked="checked"';			}			else {				$enabled = 'checked="checked"';				$disabled = '';			}			if (!isset($old_val['autovacuum_vacuum_threshold'])) $old_val['autovacuum_vacuum_threshold'] = '';			if (!isset($old_val['autovacuum_vacuum_scale_factor'])) $old_val['autovacuum_vacuum_scale_factor'] = '';			if (!isset($old_val['autovacuum_analyze_threshold'])) $old_val['autovacuum_analyze_threshold'] = '';			if (!isset($old_val['autovacuum_analyze_scale_factor'])) $old_val['autovacuum_analyze_scale_factor'] = '';			if (!isset($old_val['autovacuum_vacuum_cost_delay'])) $old_val['autovacuum_vacuum_cost_delay'] = '';			if (!isset($old_val['autovacuum_vacuum_cost_limit'])) $old_val['autovacuum_vacuum_cost_limit'] = '';			echo "<form action=\"{$script}\" method=\"post\">\n";			echo $misc->form;			echo "<input type=\"hidden\" name=\"action\" value=\"editautovac\" />\n";			echo "<input type=\"hidden\" name=\"table\" value=\"", htmlspecialchars($_REQUEST['table']), "\" />\n";			echo "<br />\n<br />\n<table>\n";			echo "\t<tr><td>&nbsp;</td>\n";			echo "<th class=\"data\">{$lang['strnewvalues']}</th><th class=\"data\">{$lang['strdefaultvalues']}</th></tr>\n";			echo "\t<tr><th class=\"data left\">{$lang['strenable']}</th>\n";			echo "<td class=\"data1\">\n";			echo "<label for=\"on\">on</label><input type=\"radio\" name=\"autovacuum_enabled\" id=\"on\" value=\"on\" {$enabled} />\n";			echo "<label for=\"off\">off</label><input type=\"radio\" name=\"autovacuum_enabled\" id=\"off\" value=\"off\" {$disabled} /></td>\n";			echo "<th class=\"data left\">{$defaults['autovacuum']}</th></tr>\n";			echo "\t<tr><th class=\"data left\">{$lang['strvacuumbasethreshold']}</th>\n";			echo "<td class=\"data1\"><input type=\"text\" name=\"autovacuum_vacuum_threshold\" value=\"{$old_val['autovacuum_vacuum_threshold']}\" /></td>\n";			echo "<th class=\"data left\">{$defaults['autovacuum_vacuum_threshold']}</th></tr>\n";			echo "\t<tr><th class=\"data left\">{$lang['strvacuumscalefactor']}</th>\n";			echo "<td class=\"data1\"><input type=\"text\" name=\"autovacuum_vacuum_scale_factor\" value=\"{$old_val['autovacuum_vacuum_scale_factor']}\" /></td>\n";			echo "<th class=\"data left\">{$defaults['autovacuum_vacuum_scale_factor']}</th></tr>\n";			echo "\t<tr><th class=\"data left\">{$lang['stranalybasethreshold']}</th>\n";			echo "<td class=\"data1\"><input type=\"text\" name=\"autovacuum_analyze_threshold\" value=\"{$old_val['autovacuum_analyze_threshold']}\" /></td>\n";			echo "<th class=\"data left\">{$defaults['autovacuum_analyze_threshold']}</th></tr>\n";			echo "\t<tr><th class=\"data left\">{$lang['stranalyzescalefactor']}</th>\n";			echo "<td class=\"data1\"><input type=\"text\" name=\"autovacuum_analyze_scale_factor\" value=\"{$old_val['autovacuum_analyze_scale_factor']}\" /></td>\n";			echo "<th class=\"data left\">{$defaults['autovacuum_analyze_scale_factor']}</th></tr>\n";			echo "\t<tr><th class=\"data left\">{$lang['strvacuumcostdelay']}</th>\n";			echo "<td class=\"data1\"><input type=\"text\" name=\"autovacuum_vacuum_cost_delay\" value=\"{$old_val['autovacuum_vacuum_cost_delay']}\" /></td>\n";			echo "<th class=\"data left\">{$defaults['autovacuum_vacuum_cost_delay']}</th></tr>\n";			echo "\t<tr><th class=\"data left\">{$lang['strvacuumcostlimit']}</th>\n";			echo "<td class=\"datat1\"><input type=\"text\" name=\"autovacuum_vacuum_cost_limit\" value=\"{$old_val['autovacuum_vacuum_cost_limit']}\" /></td>\n";			echo "<th class=\"data left\">{$defaults['autovacuum_vacuum_cost_limit']}</th></tr>\n";			echo "</table>\n";			echo "<br />";			echo "<br />";			echo "<input type=\"submit\" name=\"save\" value=\"{$lang['strsave']}\" />\n";			echo "<input type=\"submit\" name=\"cancel\" value=\"{$lang['strcancel']}\" /></p>\n";			echo "</form>\n";		}		else {			$status = $data->saveAutovacuum($_REQUEST['table'], $_POST['autovacuum_enabled'], $_POST['autovacuum_vacuum_threshold'], 				$_POST['autovacuum_vacuum_scale_factor'], $_POST['autovacuum_analyze_threshold'], $_POST['autovacuum_analyze_scale_factor'],				$_POST['autovacuum_vacuum_cost_delay'], $_POST['autovacuum_vacuum_cost_limit']);						if ($status == 0)				doAdmin($type, '', sprintf($lang['strsetvacuumtablesaved'], $_REQUEST['table']));			else				doEditAutovacuum($type, true, $lang['strsetvacuumtablefail']);		}	}		/**	 * confirm drop autovacuum params for a table and drop it	 */	function doDropAutovacuum($type, $confirm) {		global $script, $data, $misc, $lang;		if (empty($_REQUEST['table'])) {			doAdmin($type, '', $lang['strspecifydelvacuumtable']);			return;		}				if ($confirm) {			$misc->printTrail($type);			$misc->printTabs($type,'admin');						$script = ($type == 'database')? 'database.php' : 'tables.php';			printf("<p>{$lang['strdelvacuumtable']}</p>\n", 				$misc->printVal("\"{$_GET['schema']}"."{$_GET['table']}\""));			echo "<form style=\"float: left\" action=\"{$script}\" method=\"post\">\n";			echo "<input type=\"hidden\" name=\"action\" value=\"delautovac\" />\n";			echo $misc->form;			echo "<input type=\"hidden\" name=\"table\" value=\"", htmlspecialchars($_REQUEST['table']), "\" />\n";			echo "<input type=\"hidden\" name=\"rel\" value=\"", htmlspecialchars(serialize(array($_REQUEST['schema'], $_REQUEST['table']))), "\" />\n";			echo "<input type=\"submit\" name=\"yes\" value=\"{$lang['stryes']}\" />\n";			echo "</form>\n";						echo "<form action=\"{$script}\" method=\"post\">\n";			echo "<input type=\"hidden\" name=\"action\" value=\"admin\" />\n";			echo "<input type=\"hidden\" name=\"table\" value=\"", htmlspecialchars($_REQUEST['table']), "\" />\n";			echo $misc->form;			echo "<input type=\"submit\" name=\"no\" value=\"{$lang['strno']}\" />\n";			echo "</form>\n";		}		else {						$status = $data->dropAutovacuum($_POST['table']);						if ($status == 0) {				doAdmin($type, '', sprintf($lang['strvacuumtablereset'], $misc->printVal($_POST['table'])));			}			else				doAdmin($type, '', sprintf($lang['strdelvacuumtablefail'], $misc->printVal($_POST['table'])));		}	}	/**	 * database/table administration and tuning tasks	 *	 * $Id: admin.php	 */		function doAdmin($type, $msg = '') {		global $script, $data, $misc, $lang;			$misc->printTrail($type);		$misc->printTabs($type,'admin');		$misc->printMsg($msg);				if ($type == 'database')			printf("<p>{$lang['stradminondatabase']}</p>\n", $misc->printVal($_REQUEST['object']));		else			printf("<p>{$lang['stradminontable']}</p>\n", $misc->printVal($_REQUEST['object']));				echo "<table style=\"width: 50%\">\n";		echo "<tr>\n";		echo "<th class=\"data\">";		$misc->printHelp($lang['strvacuum'],'pg.admin.vacuum')."</th>\n";		echo "</th>";		echo "<th class=\"data\">";		$misc->printHelp($lang['stranalyze'],'pg.admin.analyze');		echo "</th>";		if ($data->hasRecluster()){			echo "<th class=\"data\">";			$misc->printHelp($lang['strclusterindex'],'pg.index.cluster');			echo "</th>";		}		echo "<th class=\"data\">";		$misc->printHelp($lang['strreindex'],'pg.index.reindex');		echo "</th>";		echo "</tr>";			// Vacuum		echo "<tr class=\"row1\">\n";		echo "<td style=\"text-align: center; vertical-align: bottom\">\n";		echo "<form action=\"{$script}\" method=\"post\">\n";				echo "<p><input type=\"hidden\" name=\"action\" value=\"confirm_vacuum\" />\n";		echo $misc->form;		if ($type == 'table') {			echo "<input type=\"hidden\" name=\"table\" value=\"", htmlspecialchars($_REQUEST['object']), "\" />\n";			echo "<input type=\"hidden\" name=\"subject\" value=\"table\" />\n";		}		echo "<input type=\"submit\" value=\"{$lang['strvacuum']}\" /></p>\n";		echo "</form>\n";										echo "</td>\n";		// Analyze		echo "<td style=\"text-align: center; vertical-align: bottom\">\n";		echo "<form action=\"{$script}\" method=\"post\">\n";		echo "<p><input type=\"hidden\" name=\"action\" value=\"confirm_analyze\" />\n";		echo $misc->form;		if ($type == 'table') {			echo "<input type=\"hidden\" name=\"table\" value=\"", htmlspecialchars($_REQUEST['object']), "\" />\n";			echo "<input type=\"hidden\" name=\"subject\" value=\"table\" />\n";		}		echo "<input type=\"submit\" value=\"{$lang['stranalyze']}\" /></p>\n";		echo "</form>\n";		echo "</td>\n";				// Cluster		if ($data->hasRecluster()){			$disabled = '';			echo "<td style=\"text-align: center; vertical-align: bottom\">\n";			echo "<form action=\"{$script}\" method=\"post\">\n";			echo $misc->form;			if ($type == 'table') {				echo "<input type=\"hidden\" name=\"table\" value=\"", htmlspecialchars($_REQUEST['object']), "\" />\n";				echo "<input type=\"hidden\" name=\"subject\" value=\"table\" />\n";				if (!$data->alreadyClustered($_REQUEST['object'])) {					$disabled = 'disabled="disabled" ';					echo "{$lang['strnoclusteravailable']}<br />";				}			}			echo "<p><input type=\"hidden\" name=\"action\" value=\"confirm_cluster\" />\n";			echo "<input type=\"submit\" value=\"{$lang['strclusterindex']}\" $disabled/></p>\n";			echo "</form>\n";			echo "</td>\n";		}				// Reindex		echo "<td style=\"text-align: center; vertical-align: bottom\">\n";		echo "<form action=\"{$script}\" method=\"post\">\n";		echo "<p><input type=\"hidden\" name=\"action\" value=\"confirm_reindex\" />\n";		echo $misc->form;		if ($type == 'table') {			echo "<input type=\"hidden\" name=\"table\" value=\"", htmlspecialchars($_REQUEST['object']), "\" />\n";			echo "<input type=\"hidden\" name=\"subject\" value=\"table\" />\n";		}		echo "<input type=\"submit\" value=\"{$lang['strreindex']}\" /></p>\n";		echo "</form>\n";		echo "</td>\n";		echo "</tr>\n";		echo "</table>\n";		// Autovacuum		if($data->hasAutovacuum()) {			// get defaults values for autovacuum			$defaults = $data->getAutovacuum();			// Fetch the autovacuum properties from the database or table if != ''			if ($type == 'table') $autovac = $data->getTableAutovacuum($_REQUEST['table']);			else $autovac = $data->getTableAutovacuum();			echo "<br /><br /><h2>{$lang['strvacuumpertable']}</h2>";			echo '<p>' . (($defaults['autovacuum'] == 'on') ? $lang['strturnedon'] : $lang['strturnedoff'] ) . '</p>';			echo "<p class=\"message\">{$lang['strnotdefaultinred']}</p>";						function enlight($f, $p) {				if ( isset($f[$p[0]]) and ($f[$p[0]] != $p[1]))					return "<span style=\"color:#F33;font-weight:bold\">". htmlspecialchars($f[$p[0]]) ."</span>";				return htmlspecialchars($p[1]);			}						$columns = array(				'namespace' => array(					'title' => $lang['strschema'],					'field' => field('nspname'),					'url'   => "redirect.php?subject=schema&amp;{$misc->href}&amp;",					'vars'  => array('schema' => 'nspname'),				),					'relname' => array(					'title' => $lang['strtable'],					'field' => field('relname'),					'url'	=> "redirect.php?subject=table&amp;{$misc->href}&amp;",					'vars'  => array('table' => 'relname', 'schema' => 'nspname'),				),				'autovacuum_enabled' => array(					'title' => $lang['strenabled'],					'field' => callback('enlight', array('autovacuum_enabled', $defaults['autovacuum'])),					'type' => 'verbatim'				),				'autovacuum_vacuum_threshold' => array(					'title' => $lang['strvacuumbasethreshold'],					'field' => callback('enlight', array('autovacuum_vacuum_threshold', $defaults['autovacuum_vacuum_threshold'])),					'type' => 'verbatim'				),				'autovacuum_vacuum_scale_factor' => array(					'title' => $lang['strvacuumscalefactor'],					'field' => callback('enlight', array('autovacuum_vacuum_scale_factor', $defaults['autovacuum_vacuum_scale_factor'])),					'type' => 'verbatim'				),				'autovacuum_analyze_threshold' => array(					'title' => $lang['stranalybasethreshold'],					'field' => callback('enlight', array('autovacuum_analyze_threshold', $defaults['autovacuum_analyze_threshold'])),					'type' => 'verbatim'				),				'autovacuum_analyze_scale_factor' => array(					'title' => $lang['stranalyzescalefactor'],					'field' => callback('enlight', array('autovacuum_analyze_scale_factor', $defaults['autovacuum_analyze_scale_factor'])),					'type' => 'verbatim'				),				'autovacuum_vacuum_cost_delay' => array(					'title' => $lang['strvacuumcostdelay'],					'field' => concat(callback('enlight', array('autovacuum_vacuum_cost_delay', $defaults['autovacuum_vacuum_cost_delay'])), 'ms'),					'type' => 'verbatim'				),				'autovacuum_vacuum_cost_limit' => array(					'title' => $lang['strvacuumcostlimit'],					'field' => callback('enlight', array('autovacuum_vacuum_cost_limit', $defaults['autovacuum_vacuum_cost_limit'])),					'type' => 'verbatim'				),			);						// Maybe we need to check permissions here?			$columns['actions'] = array('title' => $lang['stractions']);			$actions = array(				'edit' => array(					'title' => $lang['stredit'],					'url'   => "{$script}?action=confeditautovac&amp;{$misc->href}&amp;subject={$type}&amp;",					'vars'  => array(						'schema' => 'nspname',						'table' => 'relname'					)				),				'delete' => array(					'title' => $lang['strdelete'],					'url'   => "{$script}?action=confdelautovac&amp;{$misc->href}&amp;subject={$type}&amp;",					'vars'  => array(						'schema' => 'nspname',						'table' => 'relname'					)				)			);						if ($type == 'table') {				unset($actions['edit']['vars']['schema'], 					$actions['delete']['vars']['schema'],					$columns['namespace'],					$columns['relname']				);			}			$misc->printTable($autovac, $columns, $actions, $lang['strnovacuumconf']);						if (($type == 'table') and ($autovac->recordCount() == 0)) {				echo "<br />";				echo "<a href=\"tables.php?action=confeditautovac&amp;{$misc->href}&amp;table=", htmlspecialchars($_REQUEST['table'])					,"\">{$lang['straddvacuumtable']}</a>";			}		}	}		function adminActions($action, $type) {		global $script;				if ($type == 'database') {			$_REQUEST['object'] = $_REQUEST['database'];			$script = 'database.php';		}		else {			// $_REQUEST['table'] is no set if we are in the schema page			$_REQUEST['object'] = (isset($_REQUEST['table']) ? $_REQUEST['table']:'');			$script = 'tables.php';		}		switch ($action) {			case 'confirm_cluster':				doCluster($type, true);				break;			case 'confirm_reindex':				doReindex($type, true);				break;			case 'confirm_analyze':				doAnalyze($type, true);				break;			case 'confirm_vacuum':				doVacuum($type, true);				break;			case 'cluster':				if (isset($_POST['cluster'])) doCluster($type);				// if multi-action from table canceled: back to the schema default page				else if (($type == 'table') && is_array($_REQUEST['object']) ) doDefault();				else doAdmin($type);				break;			case 'reindex':				if (isset($_POST['reindex'])) doReindex($type);				// if multi-action from table canceled: back to the schema default page				else if (($type == 'table') && is_array($_REQUEST['object']) ) doDefault();				else doAdmin($type);				break;			case 'analyze':				if (isset($_POST['analyze'])) doAnalyze($type);				// if multi-action from table canceled: back to the schema default page				else if (($type == 'table') && is_array($_REQUEST['object']) ) doDefault();				else doAdmin($type);				break;			case 'vacuum':				if (isset($_POST['vacuum'])) doVacuum($type);				// if multi-action from table canceled: back to the schema default page				else if (($type == 'table') && is_array($_REQUEST['object']) ) doDefault();				else doAdmin($type);				break;			case 'admin':				doAdmin($type);				break;			case 'confeditautovac':				doEditAutovacuum($type, true);				break;			case 'confdelautovac':				doDropAutovacuum($type, true);				break;			case 'confaddautovac':				doAddAutovacuum(true);				break;			case 'editautovac':				if (isset($_POST['save'])) doEditAutovacuum($type, false);				else doAdmin($type);				break;			case 'delautovac':				doDropAutovacuum($type, false);				break;			default:				return false;		}		return true;	}?>
