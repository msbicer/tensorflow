<?php	/**	 * Manage languages in a database	 *	 * $Id: languages.php,v 1.13 2007/08/31 18:30:11 ioguix Exp $	 */	// Include application functions	include_once('./libraries/lib.inc.php');		$action = (isset($_REQUEST['action'])) ? $_REQUEST['action'] : '';	if (!isset($msg)) $msg = '';	/**	 * Show default list of languages in the database	 */	function doDefault($msg = '') {		global $data, $misc, $database;		global $lang;				$misc->printTrail('database');		$misc->printTabs('database','languages');		$misc->printMsg($msg);				$languages = $data->getLanguages();		$columns = array(			'language' => array(				'title' => $lang['strname'],				'field' => field('lanname'),			),			'trusted' => array(				'title' => $lang['strtrusted'],				'field' => field('lanpltrusted'),				'type'  => 'yesno',			),			'function' => array(				'title' => $lang['strfunction'],				'field' => field('lanplcallf'),			),		);		$actions = array();		$misc->printTable($languages, $columns, $actions, $lang['strnolanguages']);	}	/**	 * Generate XML for the browser tree.	 */	function doTree() {		global $misc, $data;				$languages = $data->getLanguages();				$attrs = array(			'text'   => field('lanname'),			'icon'   => 'Language'		);				$misc->printTreeXML($languages, $attrs);		exit;	}		if ($action == 'tree') doTree();		$misc->printHeader($lang['strlanguages']);	$misc->printBody();	switch ($action) {		default:			doDefault();			break;	}		$misc->printFooter();?>
<?php	/**	 * Manage groups in a database cluster	 *	 * $Id: groups.php,v 1.27 2007/08/31 18:30:11 ioguix Exp $	 */	// Include application functions	include_once('./libraries/lib.inc.php');	$action = (isset($_REQUEST['action'])) ? $_REQUEST['action'] : '';	if (!isset($msg)) $msg = '';	/**	 * Add user to a group	 */	function doAddMember() {		global $data, $misc;		global $lang;		$status = $data->addGroupMember($_REQUEST['group'], $_REQUEST['user']);		if ($status == 0)			doProperties($lang['strmemberadded']);		else			doProperties($lang['strmemberaddedbad']);	}		/**	 * Show confirmation of drop user from group and perform actual drop	 */	function doDropMember($confirm) {		global $data, $misc;		global $lang;		if ($confirm) { 			$misc->printTrail('group');			$misc->printTitle($lang['strdropmember'],'pg.group.alter');						echo "<p>", sprintf($lang['strconfdropmember'], $misc->printVal($_REQUEST['user']), $misc->printVal($_REQUEST['group'])), "</p>\n";						echo "<form action=\"groups.php\" method=\"post\">\n";			echo $misc->form;			echo "<input type=\"hidden\" name=\"action\" value=\"drop_member\" />\n";			echo "<input type=\"hidden\" name=\"group\" value=\"", htmlspecialchars($_REQUEST['group']), "\" />\n";			echo "<input type=\"hidden\" name=\"user\" value=\"", htmlspecialchars($_REQUEST['user']), "\" />\n";			echo "<input type=\"submit\" name=\"drop\" value=\"{$lang['strdrop']}\" />\n";			echo "<input type=\"submit\" name=\"cancel\" value=\"{$lang['strcancel']}\" />\n";			echo "</form>\n";		}		else {			$status = $data->dropGroupMember($_REQUEST['group'], $_REQUEST['user']);			if ($status == 0)				doProperties($lang['strmemberdropped']);			else				doDropMember(true, $lang['strmemberdroppedbad']);		}			}		/**	 * Show read only properties for a group	 */	function doProperties($msg = '') {		global $data, $misc;		global $lang;			if (!isset($_POST['user'])) $_POST['user'] = '';			$misc->printTrail('group');		$misc->printTitle($lang['strproperties'],'pg.group');		$misc->printMsg($msg);				$groupdata = $data->getGroup($_REQUEST['group']);		$users = $data->getUsers();				if ($groupdata->recordCount() > 0) {			echo "<table>\n";           	echo "<tr><th class=\"data\">{$lang['strmembers']}</th><th class=\"data\">{$lang['stractions']}</th></tr>\n";           	$i = 0;           	while (!$groupdata->EOF) {					$id = (($i % 2) == 0 ? '1' : '2');            	echo "<tr class=\"data{$id}\"><td>", $misc->printVal($groupdata->fields['usename']), "</td>\n";					echo "<td class=\"opbutton{$id}\"><a href=\"groups.php?action=confirm_drop_member&{$misc->href}&group=",						urlencode($_REQUEST['group']), "&user=", urlencode($groupdata->fields['usename']), "\">{$lang['strdrop']}</a></td>\n";            	echo "</tr>\n";            	$groupdata->moveNext();           	}			echo "</table>\n";		}		else echo "<p>{$lang['strnousers']}</p>\n";		// Display form for adding a user to the group					echo "<form action=\"groups.php\" method=\"post\">\n";		echo "<select name=\"user\">";		while (!$users->EOF) {			$uname = $misc->printVal($users->fields['usename']);			echo "<option value=\"{$uname}\"",				($uname == $_POST['user']) ? ' selected="selected"' : '', ">{$uname}</option>\n";			$users->moveNext();		}		echo "</select>\n";		echo "<input type=\"submit\" value=\"{$lang['straddmember']}\" />\n";		echo $misc->form;		echo "<input type=\"hidden\" name=\"group\" value=\"", htmlspecialchars($_REQUEST['group']), "\" />\n";		echo "<input type=\"hidden\" name=\"action\" value=\"add_member\" />\n";		echo "</form>\n";				echo "<p><a class=\"navlink\" href=\"groups.php?{$misc->href}\">{$lang['strshowallgroups']}</a></p>\n";	}		/**	 * Show confirmation of drop and perform actual drop	 */	function doDrop($confirm) {		global $data, $misc;		global $lang;		if ($confirm) {			$misc->printTrail('group');			$misc->printTitle($lang['strdrop'],'pg.group.drop');						echo "<p>", sprintf($lang['strconfdropgroup'], $misc->printVal($_REQUEST['group'])), "</p>\n";						echo "<form action=\"groups.php\" method=\"post\">\n";			echo $misc->form;			echo "<input type=\"hidden\" name=\"action\" value=\"drop\" />\n";			echo "<input type=\"hidden\" name=\"group\" value=\"", htmlspecialchars($_REQUEST['group']), "\" />\n";			echo "<input type=\"submit\" name=\"drop\" value=\"{$lang['strdrop']}\" />\n";			echo "<input type=\"submit\" name=\"cancel\" value=\"{$lang['strcancel']}\" />\n";			echo "</form>\n";		}		else {			$status = $data->dropGroup($_REQUEST['group']);			if ($status == 0)				doDefault($lang['strgroupdropped']);			else				doDefault($lang['strgroupdroppedbad']);		}			}		/**	 * Displays a screen where they can enter a new group	 */	function doCreate($msg = '') {		global $data, $misc;		global $lang;				if (!isset($_POST['name'])) $_POST['name'] = '';		if (!isset($_POST['members'])) $_POST['members'] = array();		// Fetch a list of all users in the cluster		$users = $data->getUsers();				$misc->printTrail('server');		$misc->printTitle($lang['strcreategroup'],'pg.group.create');		$misc->printMsg($msg);		echo "<form action=\"\" method=\"post\">\n";		echo $misc->form;		echo "<table>\n";		echo "\t<tr>\n\t\t<th class=\"data left required\">{$lang['strname']}</th>\n";		echo "\t\t<td class=\"data\"><input size=\"32\" maxlength=\"{$data->_maxNameLen}\" name=\"name\" value=\"", htmlspecialchars($_POST['name']), "\" /></td>\n\t</tr>\n";		if ($users->recordCount() > 0) {			echo "\t<tr>\n\t\t<th class=\"data left\">{$lang['strmembers']}</th>\n";			echo "\t\t<td class=\"data\">\n";			echo "\t\t\t<select name=\"members[]\" multiple=\"multiple\" size=\"", min(40, $users->recordCount()), "\">\n";			while (!$users->EOF) {				$username = $users->fields['usename'];				echo "\t\t\t\t<option value=\"{$username}\"",						(in_array($username, $_POST['members']) ? ' selected="selected"' : ''), ">", $misc->printVal($username), "</option>\n";				$users->moveNext();			}			echo "\t\t\t</select>\n";			echo "\t\t</td>\n\t</tr>\n";			}		echo "</table>\n";		echo "<p><input type=\"hidden\" name=\"action\" value=\"save_create\" />\n";		echo "<input type=\"submit\" value=\"{$lang['strcreate']}\" />\n";		echo "<input type=\"submit\" name=\"cancel\" value=\"{$lang['strcancel']}\" /></p>\n";		echo "</form>\n";	}		/**	 * Actually creates the new group in the database	 */	function doSaveCreate() {		global $data;		global $lang;		if (!isset($_POST['members'])) $_POST['members'] = array();		// Check form vars		if (trim($_POST['name']) == '')			doCreate($lang['strgroupneedsname']);		else {					$status = $data->createGroup($_POST['name'], $_POST['members']);			if ($status == 0)				doDefault($lang['strgroupcreated']);			else				doCreate($lang['strgroupcreatedbad']);		}	}		/**	 * Show default list of groups in the database	 */	function doDefault($msg = '') {		global $data, $misc;		global $lang;				$misc->printTrail('server');		$misc->printTabs('server','groups');		$misc->printMsg($msg);				$groups = $data->getGroups();				$columns = array(			'group' => array(				'title' => $lang['strgroup'],				'field' => field('groname'),				'url'   => "groups.php?action=properties&amp;{$misc->href}&amp;",				'vars'  => array('group' => 'groname'),			),			'actions' => array(				'title' => $lang['stractions'],			),		);				$actions = array(			'drop' => array(				'title' => $lang['strdrop'],				'url'   => "groups.php?action=confirm_drop&amp;{$misc->href}&amp;",				'vars'  => array('group' => 'groname'),			),		);				$misc->printTable($groups, $columns, $actions, $lang['strnogroups']);				echo "<p><a class=\"navlink\" href=\"groups.php?action=create&amp;{$misc->href}\">{$lang['strcreategroup']}</a></p>\n";	}	$misc->printHeader($lang['strgroups']);	$misc->printBody();	switch ($action) {		case 'add_member':			doAddMember();			break;		case 'drop_member':			if (isset($_REQUEST['drop'])) doDropMember(false);			else doProperties();			break;		case 'confirm_drop_member':			doDropMember(true);			break;					case 'save_create':			if (isset($_REQUEST['cancel'])) doDefault();			else doSaveCreate();			break;		case 'create':			doCreate();			break;		case 'drop':			if (isset($_REQUEST['drop'])) doDrop(false);			else doDefault();			break;		case 'confirm_drop':			doDrop(true);			break;					case 'save_edit':			doSaveEdit();			break;		case 'edit':			doEdit();			break;		case 'properties':			doProperties();			break;		default:			doDefault();			break;	}		$misc->printFooter();?>
<?php	/**	 * List triggers on a table	 *	 * $Id: triggers.php,v 1.37 2007/09/19 14:42:12 ioguix Exp $	 */	// Include application functions	include_once('./libraries/lib.inc.php');	include_once('./classes/class.select.php');		$action = (isset($_REQUEST['action'])) ? $_REQUEST['action'] : '';	/** 	 * Function to save after altering a trigger	 */	function doSaveAlter() {		global $data, $lang;				$status = $data->alterTrigger($_POST['table'], $_POST['trigger'], $_POST['name']);		if ($status == 0)			doDefault($lang['strtriggeraltered']);		else			doAlter($lang['strtriggeralteredbad']);	}	/**	 * Function to allow altering of a trigger	 */	function doAlter($msg = '') {		global $data, $misc;		global $lang;				$misc->printTrail('trigger');		$misc->printTitle($lang['stralter'],'pg.trigger.alter');		$misc->printMsg($msg);				$triggerdata = $data->getTrigger($_REQUEST['table'], $_REQUEST['trigger']);				if ($triggerdata->recordCount() > 0) {						if (!isset($_POST['name'])) $_POST['name'] = $triggerdata->fields['tgname'];						echo "<form action=\"triggers.php\" method=\"post\">\n";			echo "<table>\n";			echo "<tr><th class=\"data\">{$lang['strname']}</th>\n";			echo "<td class=\"data1\">";			echo "<input name=\"name\" size=\"32\" maxlength=\"{$data->_maxNameLen}\" value=\"", 				htmlspecialchars($_POST['name']), "\" />\n";			echo "</table>\n";			echo "<p><input type=\"hidden\" name=\"action\" value=\"alter\" />\n";			echo "<input type=\"hidden\" name=\"table\" value=\"", htmlspecialchars($_REQUEST['table']), "\" />\n";			echo "<input type=\"hidden\" name=\"trigger\" value=\"", htmlspecialchars($_REQUEST['trigger']), "\" />\n";			echo $misc->form;			echo "<input type=\"submit\" name=\"alter\" value=\"{$lang['strok']}\" />\n";			echo "<input type=\"submit\" name=\"cancel\" value=\"{$lang['strcancel']}\" /></p>\n";			echo "</form>\n";		}		else echo "<p>{$lang['strnodata']}</p>\n";	}		/**	 * Show confirmation of drop and perform actual drop	 */	function doDrop($confirm) {		global $data, $misc;		global $lang;		if ($confirm) {			$misc->printTrail('trigger');			$misc->printTitle($lang['strdrop'],'pg.trigger.drop');			echo "<p>", sprintf($lang['strconfdroptrigger'], $misc->printVal($_REQUEST['trigger']),				$misc->printVal($_REQUEST['table'])), "</p>\n";			echo "<form action=\"triggers.php\" method=\"post\">\n";			echo "<input type=\"hidden\" name=\"action\" value=\"drop\" />\n";			echo "<input type=\"hidden\" name=\"table\" value=\"", htmlspecialchars($_REQUEST['table']), "\" />\n";			echo "<input type=\"hidden\" name=\"trigger\" value=\"", htmlspecialchars($_REQUEST['trigger']), "\" />\n";			echo $misc->form;			echo "<p><input type=\"checkbox\" id=\"cascade\" name=\"cascade\" /> <label for=\"cascade\">{$lang['strcascade']}</label></p>\n";			echo "<input type=\"submit\" name=\"yes\" value=\"{$lang['stryes']}\" />\n";			echo "<input type=\"submit\" name=\"no\" value=\"{$lang['strno']}\" />\n";			echo "</form>\n";		}		else {			$status = $data->dropTrigger($_POST['trigger'], $_POST['table'], isset($_POST['cascade']));			if ($status == 0)				doDefault($lang['strtriggerdropped']);			else				doDefault($lang['strtriggerdroppedbad']);		}	}	/**	 * Show confirmation of enable trigger and perform enabling the trigger	 */	function doEnable($confirm) {		global $data, $misc;		global $lang;		if ($confirm) {			$misc->printTrail('trigger');			$misc->printTitle($lang['strenable'],'pg.table.alter');			echo "<p>", sprintf($lang['strconfenabletrigger'], $misc->printVal($_REQUEST['trigger']),				$misc->printVal($_REQUEST['table'])), "</p>\n";			echo "<form action=\"triggers.php\" method=\"post\">\n";			echo "<input type=\"hidden\" name=\"action\" value=\"enable\" />\n";			echo "<input type=\"hidden\" name=\"table\" value=\"", htmlspecialchars($_REQUEST['table']), "\" />\n";			echo "<input type=\"hidden\" name=\"trigger\" value=\"", htmlspecialchars($_REQUEST['trigger']), "\" />\n";			echo $misc->form;			echo "<input type=\"submit\" name=\"yes\" value=\"{$lang['stryes']}\" />\n";			echo "<input type=\"submit\" name=\"no\" value=\"{$lang['strno']}\" />\n";			echo "</form>\n";		}		else {			$status = $data->enableTrigger($_POST['trigger'], $_POST['table']);			if ($status == 0)				doDefault($lang['strtriggerenabled']);			else				doDefault($lang['strtriggerenabledbad']);		}	}	/**	 * Show confirmation of disable trigger and perform disabling the trigger	 */	function doDisable($confirm) {		global $data, $misc;		global $lang;		if ($confirm) {			$misc->printTrail('trigger');			$misc->printTitle($lang['strdisable'],'pg.table.alter');			echo "<p>", sprintf($lang['strconfdisabletrigger'], $misc->printVal($_REQUEST['trigger']),				$misc->printVal($_REQUEST['table'])), "</p>\n";			echo "<form action=\"triggers.php\" method=\"post\">\n";			echo "<input type=\"hidden\" name=\"action\" value=\"disable\" />\n";			echo "<input type=\"hidden\" name=\"table\" value=\"", htmlspecialchars($_REQUEST['table']), "\" />\n";			echo "<input type=\"hidden\" name=\"trigger\" value=\"", htmlspecialchars($_REQUEST['trigger']), "\" />\n";			echo $misc->form;			echo "<input type=\"submit\" name=\"yes\" value=\"{$lang['stryes']}\" />\n";			echo "<input type=\"submit\" name=\"no\" value=\"{$lang['strno']}\" />\n";			echo "</form>\n";		}		else {			$status = $data->disableTrigger($_POST['trigger'], $_POST['table']);			if ($status == 0)				doDefault($lang['strtriggerdisabled']);			else				doDefault($lang['strtriggerdisabledbad']);		}	}	/**	 * Let them create s.th.	 */	function doCreate($msg = '') {		global $data, $misc;		global $lang;				$misc->printTrail('table');		$misc->printTitle($lang['strcreatetrigger'],'pg.trigger.create');		$misc->printMsg($msg);				// Get all the functions that can be used in triggers		$funcs = $data->getTriggerFunctions();		if ($funcs->recordCount() == 0) {			doDefault($lang['strnofunctions']);			return;		}		/* Populate functions */		$sel0 = new XHTML_Select('formFunction');		while (!$funcs->EOF) {			$sel0->add(new XHTML_Option($funcs->fields['proname']));			$funcs->moveNext();		}		/* Populate times */		$sel1 = new XHTML_Select('formExecTime');		$sel1->set_data($data->triggerExecTimes);		/* Populate events */		$sel2 = new XHTML_Select('formEvent');		$sel2->set_data($data->triggerEvents);				/* Populate occurences */		$sel3 = new XHTML_Select('formFrequency');		$sel3->set_data($data->triggerFrequency);				echo "<form action=\"triggers.php\" method=\"post\">\n";		echo "<table>\n";		echo "<tr>\n";		echo "		<th class=\"data\">{$lang['strname']}</th>\n";		echo "		<th class=\"data\">{$lang['strwhen']}</th>\n";		echo "</tr>\n";		echo "<tr>\n";		echo "		<td class=\"data1\"> <input type=\"text\" name=\"formTriggerName\" size=\"32\" /></td>\n";		echo "		<td class=\"data1\"> ", $sel1->fetch(), "</td>\n";		echo "</tr>\n";		echo "<tr>\n";		echo "    <th class=\"data\">{$lang['strevent']}</th>\n";		echo "    <th class=\"data\">{$lang['strforeach']}</th>\n";		echo "</tr>\n";		echo "<tr>\n";		echo "     <td class=\"data1\"> ", $sel2->fetch(), "</td>\n";		echo "     <td class=\"data1\"> ", $sel3->fetch(), "</td>\n";		echo "</tr>\n";		echo "<tr><th class=\"data\"> {$lang['strfunction']}</th>\n";		echo "<th class=\"data\"> {$lang['strarguments']}</th></tr>\n";		echo "<tr><td class=\"data1\">", $sel0->fetch(), "</td>\n";		echo "<td class=\"data1\">(<input type=\"text\" name=\"formTriggerArgs\" size=\"32\" />)</td>\n";		echo "</tr></table>\n";		echo "<p><input type=\"submit\" value=\"{$lang['strcreate']}\" />\n";		echo "<input type=\"submit\" name=\"cancel\" value=\"{$lang['strcancel']}\" /></p>\n";		echo "<input type=\"hidden\" name=\"action\" value=\"save_create\" />\n";		echo "<input type=\"hidden\" name=\"table\" value=\"", htmlspecialchars($_REQUEST['table']), "\" />\n";		echo $misc->form;		echo "</form>\n";	}		/**	 * Actually creates the new trigger in the database	 */	function doSaveCreate() {		global $data;		global $lang;					// Check that they've given a name and a definition		if ($_POST['formFunction'] == '')			doCreate($lang['strtriggerneedsfunc']);		elseif ($_POST['formTriggerName'] == '')			doCreate($lang['strtriggerneedsname']);		elseif ($_POST['formEvent'] == '') 			doCreate();		else {		 			$status = $data->createTrigger($_POST['formTriggerName'], $_POST['table'],					$_POST['formFunction'], $_POST['formExecTime'], $_POST['formEvent'],					$_POST['formFrequency'], $_POST['formTriggerArgs']);			if ($status == 0)				doDefault($lang['strtriggercreated']);			else				doCreate($lang['strtriggercreatedbad']);		}	}		/**	 * List all the triggers on the table	 */	function doDefault($msg = '') {		global $data, $misc, $database;		global $lang;		function tgPre(&$rowdata) {			global $data, $lang;			// Nasty hack to support pre-7.4 PostgreSQL			$rowdata->fields['+tgdef'] = $rowdata->fields['tgdef'] !== null									? $rowdata->fields['tgdef']									: $data->getTriggerDef($rowdata->fields);		}				$misc->printTrail('table');		$misc->printTabs('table','triggers');		$misc->printMsg($msg);		$triggers = $data->getTriggers($_REQUEST['table']);		$columns = array(			'trigger' => array(				'title' => $lang['strname'],				'field' => field('tgname'),			),			'definition' => array(				'title' => $lang['strdefinition'],				'field' => field('+tgdef'),			),			'function' => array(				'title' => $lang['strfunction'],				'field' => field('proproto'),				'url' => "functions.php?action=properties&amp;server={$_REQUEST['server']}&amp;database={$_REQUEST['database']}&amp;",				'vars' => array(					'schema' => 'pronamespace',					'function' => 'proproto',					'function_oid' => 'prooid',				),			),			'actions' => array(				'title' => $lang['stractions'],			),		);		$actions = array(			'alter' => array(				'title' => $lang['stralter'],				'url'   => "triggers.php?action=confirm_alter&amp;{$misc->href}&amp;table=".urlencode($_REQUEST['table'])."&amp;",				'vars'  => array('trigger' => 'tgname'),			),			'drop' => array(				'title' => $lang['strdrop'],				'url'   => "triggers.php?action=confirm_drop&amp;{$misc->href}&amp;table=".urlencode($_REQUEST['table'])."&amp;",				'vars'  => array('trigger' => 'tgname'),			),		);		if($data->hasDisableTriggers()) {			if(!$data->phpBool($triggers->fields["tgenabled"])) {				$actions['enable'] = array(					'title' => $lang['strenable'],					'url'   => "triggers.php?action=confirm_enable&amp;{$misc->href}&amp;table=".urlencode($_REQUEST['table'])."&amp;",					'vars'  => array('trigger' => 'tgname'),				);			} else {				$actions['disable'] = array(					'title' => $lang['strdisable'],					'url'   => "triggers.php?action=confirm_disable&amp;{$misc->href}&amp;table=".urlencode($_REQUEST['table'])."&amp;",					'vars'  => array('trigger' => 'tgname'),				);			}		}		$misc->printTable($triggers, $columns, $actions, $lang['strnotriggers'], 'tgPre');				echo "<p><a class=\"navlink\" href=\"triggers.php?action=create&amp;{$misc->href}&amp;table=", urlencode($_REQUEST['table']), "\">{$lang['strcreatetrigger']}</a></p>\n";	}	function doTree() {		global $misc, $data;		$triggers = $data->getTriggers($_REQUEST['table']);		$reqvars = $misc->getRequestVars('table');				$attrs = array(			'text'   => field('tgname'),			'icon'   => 'Trigger',		);		$misc->printTreeXML($triggers, $attrs);		exit;	}	if ($action == 'tree') doTree();	$misc->printHeader($lang['strtables'] . ' - ' . $_REQUEST['table'] . ' - ' . $lang['strtriggers']);	$misc->printBody();	switch ($action) {		case 'alter':			if (isset($_POST['alter'])) doSaveAlter();			else doDefault();			break;		case 'confirm_alter':			doAlter();			break;		case 'confirm_enable':			doEnable(true);			break;		case 'confirm_disable':			doDisable(true);			break;		case 'save_create':			if (isset($_POST['cancel'])) doDefault();			else doSaveCreate();			break;		case 'create':			doCreate();			break;		case 'drop':			if (isset($_POST['yes'])) doDrop(false);			else doDefault();			break;		case 'confirm_drop':			doDrop(true);			break;		case 'enable':			if (isset($_POST['yes'])) doEnable(false);			else doDefault();			break;		case 'disable':			if (isset($_POST['yes'])) doDisable(false);			else doDefault();			break;		default:			doDefault();			break;	}		$misc->printFooter();?>
<?php	/**	 * List rules on a table OR view	 *	 * $Id: rules.php,v 1.33 2007/08/31 18:30:11 ioguix Exp $	 */	// Include application functions	include_once('./libraries/lib.inc.php');	$action = (isset($_REQUEST['action'])) ? $_REQUEST['action'] : '';	/**	 * Confirm and then actually create a rule	 */	function createRule($confirm, $msg = '') {		global $data, $misc;		global $lang;		if (!isset($_POST['name'])) $_POST['name'] = '';		if (!isset($_POST['event'])) $_POST['event'] = '';		if (!isset($_POST['where'])) $_POST['where'] = '';		if (!isset($_POST['type'])) $_POST['type'] = 'SOMETHING';		if (!isset($_POST['raction'])) $_POST['raction'] = '';		if ($confirm) {			$misc->printTrail($_REQUEST['subject']);			$misc->printTitle($lang['strcreaterule'],'pg.rule.create');			$misc->printMsg($msg);			echo "<form action=\"rules.php\" method=\"post\">\n";			echo "<table>\n";			echo "<tr><th class=\"data left required\">{$lang['strname']}</th>\n";			echo "<td class=\"data1\"><input name=\"name\" size=\"16\" maxlength=\"{$data->_maxNameLen}\" value=\"",				htmlspecialchars($_POST['name']), "\" /></td></tr>\n";			echo "<tr><th class=\"data left required\">{$lang['strevent']}</th>\n";			echo "<td class=\"data1\"><select name=\"event\">\n";			foreach ($data->rule_events as $v) {				echo "<option value=\"{$v}\"", ($v == $_POST['event']) ? ' selected="selected"' : '',				">{$v}</option>\n";			}			echo "</select></td></tr>\n";			echo "<tr><th class=\"data left\">{$lang['strwhere']}</th>\n";			echo "<td class=\"data1\"><input name=\"where\" size=\"32\" value=\"",				htmlspecialchars($_POST['where']), "\" /></td></tr>\n";			echo "<tr><th class=\"data left\"><label for=\"instead\">{$lang['strinstead']}</label></th>\n";			echo "<td class=\"data1\">";			echo "<input type=\"checkbox\" id=\"instead\" name=\"instead\" ", (isset($_POST['instead'])) ? ' checked="checked"' : '', " />\n";			echo "</td></tr>\n";			echo "<tr><th class=\"data left required\">{$lang['straction']}</th>\n";			echo "<td class=\"data1\">";			echo "<input type=\"radio\" id=\"type1\" name=\"type\" value=\"NOTHING\"", ($_POST['type'] == 'NOTHING') ? ' checked="checked"' : '', " /> <label for=\"type1\">NOTHING</label><br />\n";			echo "<input type=\"radio\" name=\"type\" value=\"SOMETHING\"", ($_POST['type'] == 'SOMETHING') ? ' checked="checked"' : '', " />\n";			echo "(<input name=\"raction\" size=\"32\" value=\"",				htmlspecialchars($_POST['raction']), "\" />)</td></tr>\n";			echo "</table>\n";			echo "<input type=\"hidden\" name=\"action\" value=\"save_create_rule\" />\n";			echo "<input type=\"hidden\" name=\"subject\" value=\"", htmlspecialchars($_REQUEST['subject']), "\" />\n";			echo "<input type=\"hidden\" name=\"", htmlspecialchars($_REQUEST['subject']),					"\" value=\"", htmlspecialchars($_REQUEST[$_REQUEST['subject']]), "\" />\n";			echo $misc->form;			echo "<p><input type=\"submit\" name=\"ok\" value=\"{$lang['strcreate']}\" />\n";			echo "<input type=\"submit\" name=\"cancel\" value=\"{$lang['strcancel']}\" /></p>\n";			echo "</form>\n";		}		else {			if (trim($_POST['name']) == '')				createRule(true, $lang['strruleneedsname']);			else {				$status = $data->createRule($_POST['name'],					$_POST['event'], $_POST[$_POST['subject']], $_POST['where'],					isset($_POST['instead']), $_POST['type'], $_POST['raction']);				if ($status == 0)					doDefault($lang['strrulecreated']);				else					createRule(true, $lang['strrulecreatedbad']);			}		}	}	/**	 * Show confirmation of drop and perform actual drop	 */	function doDrop($confirm) {		global $data, $misc;		global $lang;		if ($confirm) {			$misc->printTrail($_REQUEST['subject']);			$misc->printTitle($lang['strdrop'],'pg.rule.drop');						echo "<p>", sprintf($lang['strconfdroprule'], $misc->printVal($_REQUEST['rule']),				$misc->printVal($_REQUEST[$_REQUEST['reltype']])), "</p>\n";			echo "<form action=\"rules.php\" method=\"post\">\n";			echo "<input type=\"hidden\" name=\"action\" value=\"drop\" />\n";			echo "<input type=\"hidden\" name=\"subject\" value=\"", htmlspecialchars($_REQUEST['reltype']), "\" />\n";			echo "<input type=\"hidden\" name=\"", htmlspecialchars($_REQUEST['reltype']),					"\" value=\"", htmlspecialchars($_REQUEST[$_REQUEST['reltype']]), "\" />\n";			echo "<input type=\"hidden\" name=\"rule\" value=\"", htmlspecialchars($_REQUEST['rule']), "\" />\n";			echo $misc->form;			echo "<p><input type=\"checkbox\" id=\"cascade\" name=\"cascade\" /> <label for=\"cascade\">{$lang['strcascade']}</label></p>\n";			echo "<input type=\"submit\" name=\"yes\" value=\"{$lang['stryes']}\" />\n";			echo "<input type=\"submit\" name=\"no\" value=\"{$lang['strno']}\" />\n";			echo "</form>\n";		}		else {			$status = $data->dropRule($_POST['rule'], $_POST[$_POST['subject']], isset($_POST['cascade']));			if ($status == 0)				doDefault($lang['strruledropped']);			else				doDefault($lang['strruledroppedbad']);		}	}	/**	 * List all the rules on the table	 */	function doDefault($msg = '') {		global $data, $misc;		global $lang;		$misc->printTrail($_REQUEST['subject']);		$misc->printTabs($_REQUEST['subject'], 'rules');		$misc->printMsg($msg);		$rules = $data->getRules($_REQUEST[$_REQUEST['subject']]);		$columns = array(			'rule' => array(				'title' => $lang['strname'],				'field' => field('rulename'),			),			'definition' => array(				'title' => $lang['strdefinition'],				'field' => field('definition'),			),			'actions' => array(				'title' => $lang['stractions'],			),		);		$subject = urlencode($_REQUEST['subject']);		$object = urlencode($_REQUEST[$_REQUEST['subject']]);		$actions = array(			'drop' => array(				'title' => $lang['strdrop'],				'url'   => "rules.php?action=confirm_drop&amp;{$misc->href}&amp;reltype={$subject}&amp;{$subject}={$object}&amp;subject=rule&amp;",				'vars'  => array('rule' => 'rulename'),			),		);		$misc->printTable($rules, $columns, $actions, $lang['strnorules']);		echo "<p><a class=\"navlink\" href=\"rules.php?action=create_rule&amp;{$misc->href}&amp;{$subject}={$object}&amp;subject={$subject}\">{$lang['strcreaterule']}</a></p>\n";	}	function doTree() {		global $misc, $data;		$rules = $data->getRules($_REQUEST[$_REQUEST['subject']]);		$reqvars = $misc->getRequestVars($_REQUEST['subject']);		$attrs = array(			'text'   => field('rulename'),			'icon'   => 'Rule',		);		$misc->printTreeXML($rules, $attrs);		exit;	}	if ($action == 'tree') doTree();		// Different header if we're view rules or table rules	$misc->printHeader($_REQUEST[$_REQUEST['subject']] . ' - ' . $lang['strrules']);	$misc->printBody();	switch ($action) {		case 'create_rule':			createRule(true);			break;		case 'save_create_rule':			if (isset($_POST['cancel'])) doDefault();			else createRule(false);			break;		case 'drop':			if (isset($_POST['yes'])) doDrop(false);			else doDefault();			break;		case 'confirm_drop':			doDrop(true);			break;		default:			doDefault();			break;	}		$misc->printFooter();?>
<?php	/**	 * Process an arbitrary SQL query - tricky!  The main problem is that	 * unless we implement a full SQL parser, there's no way of knowing	 * how many SQL statements have been strung together with semi-colons	 * @param $_SESSION['sqlquery'] The SQL query string to execute	 *	 * $Id: sql.php,v 1.43 2008/01/10 20:19:27 xzilla Exp $	 */	// Prevent timeouts on large exports (non-safe mode only)	if (!ini_get('safe_mode')) set_time_limit(0);	// Include application functions	include_once('./libraries/lib.inc.php');	/**	 * This is a callback function to display the result of each separate query	 * @param ADORecordSet $rs The recordset returned by the script execetor	 */	function sqlCallback($query, $rs, $lineno) {		global $data, $misc, $lang, $_connection;		// Check if $rs is false, if so then there was a fatal error		if ($rs === false) {			echo htmlspecialchars($_FILES['script']['name']), ':', $lineno, ': ', nl2br(htmlspecialchars($_connection->getLastError())), "<br/>\n";		}		else {			// Print query results			switch (pg_result_status($rs)) {				case PGSQL_TUPLES_OK:					// If rows returned, then display the results					$num_fields = pg_numfields($rs);					echo "<p><table>\n<tr>";					for ($k = 0; $k < $num_fields; $k++) {						echo "<th class=\"data\">", $misc->printVal(pg_fieldname($rs, $k)), "</th>";					}							$i = 0;					$row = pg_fetch_row($rs);					while ($row !== false) {						$id = (($i % 2) == 0 ? '1' : '2');						echo "<tr class=\"data{$id}\">\n";						foreach ($row as $k => $v) {							echo "<td style=\"white-space:nowrap;\">", $misc->printVal($v, pg_fieldtype($rs, $k), array('null' => true)), "</td>";						}													echo "</tr>\n";						$row = pg_fetch_row($rs);						$i++;					};					echo "</table><br/>\n";					echo $i, " {$lang['strrows']}</p>\n";					break;				case PGSQL_COMMAND_OK:					// If we have the command completion tag					if (version_compare(phpversion(), '4.3', '>=')) {						echo htmlspecialchars(pg_result_status($rs, PGSQL_STATUS_STRING)), "<br/>\n";					}					// Otherwise if any rows have been affected					elseif ($data->conn->Affected_Rows() > 0) {						echo $data->conn->Affected_Rows(), " {$lang['strrowsaff']}<br/>\n";					}					// Otherwise output nothing...					break;				case PGSQL_EMPTY_QUERY:					break;				default:					break;			}		}	}	// We need to store the query in a session for editing purposes	// We avoid GPC vars to avoid truncating long queries	// If we came from a report, we need to look up the query	if (isset($_REQUEST['subject']) && $_REQUEST['subject'] == 'report' ) {		global $data, $misc;		include_once('./classes/Reports.php');		$reportsdb = new Reports($status);		$report = $reportsdb->getReport($_REQUEST['reportid']);		$_SESSION['sqlquery'] = $report->fields['report_sql'];		} 	elseif (isset($_POST['query'])) {		// Or maybe we came from an sql form		$_SESSION['sqlquery'] = $_POST['query'];	} else {		echo "could not find the query!!";	}		// Pagination maybe set by a get link that has it as FALSE,	// if that's the case, unset the variable.	if (isset($_REQUEST['paginate']) && $_REQUEST['paginate'] == 'f') {		unset($_REQUEST['paginate']);		unset($_POST['paginate']);		unset($_GET['paginate']);	}	// Check to see if pagination has been specified. In that case, send to display	// script for pagination	/* if a file is given or the request is an explain, do not paginate */	if (isset($_REQUEST['paginate']) && !(isset($_FILES['script']) && $_FILES['script']['size'] > 0)			&& (preg_match('/^\s*explain/i', $_SESSION['sqlquery']) == 0)) {		include('./display.php');		exit;	}		$subject = isset($_REQUEST['subject'])? $_REQUEST['subject'] : '';	$misc->printHeader($lang['strqueryresults']);	$misc->printBody();	$misc->printTrail('database');	$misc->printTitle($lang['strqueryresults']);	// Set the schema search path	if (isset($_REQUEST['search_path'])) {		if ($data->setSearchPath(array_map('trim',explode(',',$_REQUEST['search_path']))) != 0) {			$misc->printFooter();			exit;		}	}	// May as well try to time the query	if (function_exists('microtime')) {		list($usec, $sec) = explode(' ', microtime());		$start_time = ((float)$usec + (float)$sec);	}	else $start_time = null;	// Execute the query.  If it's a script upload, special handling is necessary	if (isset($_FILES['script']) && $_FILES['script']['size'] > 0)		$data->executeScript('script', 'sqlCallback');	else {		// Set fetch mode to NUM so that duplicate field names are properly returned		$data->conn->setFetchMode(ADODB_FETCH_NUM);		$rs = $data->conn->Execute($_SESSION['sqlquery']);		// $rs will only be an object if there is no error		if (is_object($rs)) {			// Request was run, saving it in history			if(!isset($_REQUEST['nohistory']))				$misc->saveScriptHistory($_SESSION['sqlquery']);			// Now, depending on what happened do various things				// First, if rows returned, then display the results			if ($rs->recordCount() > 0) {				echo "<table>\n<tr>";				foreach ($rs->fields as $k => $v) {					$finfo = $rs->fetchField($k);					echo "<th class=\"data\">", $misc->printVal($finfo->name), "</th>";				}                                echo "</tr>\n";					$i = 0;						while (!$rs->EOF) {					$id = (($i % 2) == 0 ? '1' : '2');					echo "<tr class=\"data{$id}\">\n";					foreach ($rs->fields as $k => $v) {						$finfo = $rs->fetchField($k);						echo "<td style=\"white-space:nowrap;\">", $misc->printVal($v, $finfo->type, array('null' => true)), "</td>";					}												echo "</tr>\n";					$rs->moveNext();					$i++;				}				echo "</table>\n";				echo "<p>", $rs->recordCount(), " {$lang['strrows']}</p>\n";			}			// Otherwise if any rows have been affected			elseif ($data->conn->Affected_Rows() > 0) {				echo "<p>", $data->conn->Affected_Rows(), " {$lang['strrowsaff']}</p>\n";			}			// Otherwise nodata to print			else echo '<p>', $lang['strnodata'], "</p>\n";		}	}	// May as well try to time the query	if ($start_time !== null) {		list($usec, $sec) = explode(' ', microtime());		$end_time = ((float)$usec + (float)$sec);			// Get duration in milliseconds, round to 3dp's			$duration = number_format(($end_time - $start_time) * 1000, 3);	}	else $duration = null;	// Reload the browser as we may have made schema changes	$_reload_browser = true;	// Display duration if we know it	if ($duration !== null) {		echo "<p>", sprintf($lang['strruntime'], $duration), "</p>\n";	}		echo "<p>{$lang['strsqlexecuted']}</p>\n";				echo "<ul class=\"navlink\">\n";		// Return	if (isset($_REQUEST['return_url']) && isset($_REQUEST['return_desc']))		echo "\t<li><a href=\"{$_REQUEST['return_url']}\">{$_REQUEST['return_desc']}</a></li>\n";	// Edit			echo "\t<li><a href=\"database.php?database=", urlencode($_REQUEST['database']),		"&amp;server=", urlencode($_REQUEST['server']), "&amp;action=sql\">{$lang['streditsql']}</a></li>\n";					// Create report	if (($subject !== 'report') && $conf['show_reports'] && isset($rs) && is_object($rs) && $rs->recordCount() > 0)		echo "\t<li><a href=\"reports.php?{$misc->href}&amp;action=create&amp;report_sql=",			urlencode($_SESSION['sqlquery']), "\">{$lang['strcreatereport']}</a></li>\n";		// Create view and download	if (isset($_SESSION['sqlquery']) && isset($rs) && is_object($rs) && $rs->recordCount() > 0) {		// Report views don't set a schema, so we need to disable create view in that case		if (isset($_REQUEST['schema'])) 			echo "\t<li><a href=\"views.php?action=create&amp;formDefinition=",				urlencode($_SESSION['sqlquery']), "&amp;{$misc->href}\">{$lang['strcreateview']}</a></li>\n";		echo "\t<li><a href=\"dataexport.php?query=", urlencode($_SESSION['sqlquery']);		if (isset($_REQUEST['search_path']))			echo "&amp;search_path=", urlencode($_REQUEST['search_path']);		echo "&amp;{$misc->href}\">{$lang['strdownload']}</a></li>\n";	}	echo "</ul>\n";		$misc->printFooter();?>
<?php/** * PostgreSQL 8.4 support * * $Id: Postgres82.php,v 1.10 2007/12/28 16:21:25 ioguix Exp $ */include_once('./classes/database/Postgres.php');class Postgres84 extends Postgres {	var $major_version = 8.4;	// List of all legal privileges that can be applied to different types	// of objects.	var $privlist = array(  		'table' => array('SELECT', 'INSERT', 'UPDATE', 'DELETE', 'REFERENCES', 'TRIGGER', 'ALL PRIVILEGES'),  		'view' => array('SELECT', 'INSERT', 'UPDATE', 'DELETE', 'REFERENCES', 'TRIGGER', 'ALL PRIVILEGES'),  		'sequence' => array('SELECT', 'UPDATE', 'ALL PRIVILEGES'),  		'database' => array('CREATE', 'TEMPORARY', 'CONNECT', 'ALL PRIVILEGES'),  		'function' => array('EXECUTE', 'ALL PRIVILEGES'),  		'language' => array('USAGE', 'ALL PRIVILEGES'),  		'schema' => array('CREATE', 'USAGE', 'ALL PRIVILEGES'),  		'tablespace' => array('CREATE', 'ALL PRIVILEGES'),		'column' => array('SELECT', 'INSERT', 'UPDATE', 'REFERENCES','ALL PRIVILEGES')	);	/**	 * Constructor	 * @param $conn The database connection	 */	function Postgres84($conn) {		$this->Postgres($conn);	}	// Help functions	function getHelpPages() {		include_once('./help/PostgresDoc84.php');		return $this->help_page;	}	// Databse functions	/**	 * Grabs a list of triggers on a table	 * @param $table The name of a table whose triggers to retrieve	 * @return A recordset	 */	function getTriggers($table = '') {		$c_schema = $this->_schema;		$this->clean($c_schema);		$this->clean($table);		$sql = "SELECT				t.tgname, pg_catalog.pg_get_triggerdef(t.oid) AS tgdef,				CASE WHEN t.tgenabled = 'D' THEN FALSE ELSE TRUE END AS tgenabled, p.oid AS prooid,				p.proname || ' (' || pg_catalog.oidvectortypes(p.proargtypes) || ')' AS proproto,				ns.nspname AS pronamespace			FROM pg_catalog.pg_trigger t, pg_catalog.pg_proc p, pg_catalog.pg_namespace ns			WHERE t.tgrelid = (SELECT oid FROM pg_catalog.pg_class WHERE relname='{$table}'				AND relnamespace=(SELECT oid FROM pg_catalog.pg_namespace WHERE nspname='{$c_schema}'))				AND (NOT tgisconstraint OR NOT EXISTS						(SELECT 1 FROM pg_catalog.pg_depend d    JOIN pg_catalog.pg_constraint c							ON (d.refclassid = c.tableoid AND d.refobjid = c.oid)						WHERE d.classid = t.tableoid AND d.objid = t.oid AND d.deptype = 'i' AND c.contype = 'f'))				AND p.oid=t.tgfoid				AND p.pronamespace = ns.oid";		return $this->selectSet($sql);	}	/**	 * Searches all system catalogs to find objects that match a certain name.	 * @param $term The search term	 * @param $filter The object type to restrict to ('' means no restriction)	 * @return A recordset	 */	function findObject($term, $filter) {		global $conf;		// Escape search term for ILIKE match		$term = str_replace('_', '\\_', $term);		$term = str_replace('%', '\\%', $term);		$this->clean($term);		$this->clean($filter);		// Exclude system relations if necessary		if (!$conf['show_system']) {			// XXX: The mention of information_schema here is in the wrong place, but			// it's the quickest fix to exclude the info schema from 7.4			$where = " AND pn.nspname NOT LIKE 'pg\\\\_%' AND pn.nspname != 'information_schema'";			$lan_where = "AND pl.lanispl";		}		else {			$where = '';			$lan_where = '';	}		// Apply outer filter		$sql = '';		if ($filter != '') {			$sql = "SELECT * FROM (";		}		$sql .= "			SELECT 'SCHEMA' AS type, oid, NULL AS schemaname, NULL AS relname, nspname AS name				FROM pg_catalog.pg_namespace pn WHERE nspname ILIKE '%{$term}%' {$where}			UNION ALL			SELECT CASE WHEN relkind='r' THEN 'TABLE' WHEN relkind='v' THEN 'VIEW' WHEN relkind='S' THEN 'SEQUENCE' END, pc.oid,				pn.nspname, NULL, pc.relname FROM pg_catalog.pg_class pc, pg_catalog.pg_namespace pn				WHERE pc.relnamespace=pn.oid AND relkind IN ('r', 'v', 'S') AND relname ILIKE '%{$term}%' {$where}			UNION ALL			SELECT CASE WHEN pc.relkind='r' THEN 'COLUMNTABLE' ELSE 'COLUMNVIEW' END, NULL, pn.nspname, pc.relname, pa.attname FROM pg_catalog.pg_class pc, pg_catalog.pg_namespace pn,				pg_catalog.pg_attribute pa WHERE pc.relnamespace=pn.oid AND pc.oid=pa.attrelid				AND pa.attname ILIKE '%{$term}%' AND pa.attnum > 0 AND NOT pa.attisdropped AND pc.relkind IN ('r', 'v') {$where}			UNION ALL			SELECT 'FUNCTION', pp.oid, pn.nspname, NULL, pp.proname || '(' || pg_catalog.oidvectortypes(pp.proargtypes) || ')' FROM pg_catalog.pg_proc pp, pg_catalog.pg_namespace pn				WHERE pp.pronamespace=pn.oid AND NOT pp.proisagg AND pp.proname ILIKE '%{$term}%' {$where}			UNION ALL			SELECT 'INDEX', NULL, pn.nspname, pc.relname, pc2.relname FROM pg_catalog.pg_class pc, pg_catalog.pg_namespace pn,				pg_catalog.pg_index pi, pg_catalog.pg_class pc2 WHERE pc.relnamespace=pn.oid AND pc.oid=pi.indrelid				AND pi.indexrelid=pc2.oid				AND NOT EXISTS (					SELECT 1 FROM pg_catalog.pg_depend d JOIN pg_catalog.pg_constraint c					ON (d.refclassid = c.tableoid AND d.refobjid = c.oid)					WHERE d.classid = pc2.tableoid AND d.objid = pc2.oid AND d.deptype = 'i' AND c.contype IN ('u', 'p')				)				AND pc2.relname ILIKE '%{$term}%' {$where}			UNION ALL			SELECT 'CONSTRAINTTABLE', NULL, pn.nspname, pc.relname, pc2.conname FROM pg_catalog.pg_class pc, pg_catalog.pg_namespace pn,				pg_catalog.pg_constraint pc2 WHERE pc.relnamespace=pn.oid AND pc.oid=pc2.conrelid AND pc2.conrelid != 0				AND CASE WHEN pc2.contype IN ('f', 'c') THEN TRUE ELSE NOT EXISTS (					SELECT 1 FROM pg_catalog.pg_depend d JOIN pg_catalog.pg_constraint c					ON (d.refclassid = c.tableoid AND d.refobjid = c.oid)					WHERE d.classid = pc2.tableoid AND d.objid = pc2.oid AND d.deptype = 'i' AND c.contype IN ('u', 'p')				) END				AND pc2.conname ILIKE '%{$term}%' {$where}			UNION ALL			SELECT 'CONSTRAINTDOMAIN', pt.oid, pn.nspname, pt.typname, pc.conname FROM pg_catalog.pg_type pt, pg_catalog.pg_namespace pn,				pg_catalog.pg_constraint pc WHERE pt.typnamespace=pn.oid AND pt.oid=pc.contypid AND pc.contypid != 0				AND pc.conname ILIKE '%{$term}%' {$where}			UNION ALL			SELECT 'TRIGGER', NULL, pn.nspname, pc.relname, pt.tgname FROM pg_catalog.pg_class pc, pg_catalog.pg_namespace pn,				pg_catalog.pg_trigger pt WHERE pc.relnamespace=pn.oid AND pc.oid=pt.tgrelid					AND (NOT pt.tgisconstraint OR NOT EXISTS					(SELECT 1 FROM pg_catalog.pg_depend d JOIN pg_catalog.pg_constraint c					ON (d.refclassid = c.tableoid AND d.refobjid = c.oid)					WHERE d.classid = pt.tableoid AND d.objid = pt.oid AND d.deptype = 'i' AND c.contype = 'f'))				AND pt.tgname ILIKE '%{$term}%' {$where}			UNION ALL			SELECT 'RULETABLE', NULL, pn.nspname AS schemaname, c.relname AS tablename, r.rulename FROM pg_catalog.pg_rewrite r				JOIN pg_catalog.pg_class c ON c.oid = r.ev_class				LEFT JOIN pg_catalog.pg_namespace pn ON pn.oid = c.relnamespace				WHERE c.relkind='r' AND r.rulename != '_RETURN' AND r.rulename ILIKE '%{$term}%' {$where}			UNION ALL			SELECT 'RULEVIEW', NULL, pn.nspname AS schemaname, c.relname AS tablename, r.rulename FROM pg_catalog.pg_rewrite r				JOIN pg_catalog.pg_class c ON c.oid = r.ev_class				LEFT JOIN pg_catalog.pg_namespace pn ON pn.oid = c.relnamespace				WHERE c.relkind='v' AND r.rulename != '_RETURN' AND r.rulename ILIKE '%{$term}%' {$where}		";		// Add advanced objects if show_advanced is set		if ($conf['show_advanced']) {			$sql .= "				UNION ALL				SELECT CASE WHEN pt.typtype='d' THEN 'DOMAIN' ELSE 'TYPE' END, pt.oid, pn.nspname, NULL,					pt.typname FROM pg_catalog.pg_type pt, pg_catalog.pg_namespace pn					WHERE pt.typnamespace=pn.oid AND typname ILIKE '%{$term}%'					AND (pt.typrelid = 0 OR (SELECT c.relkind = 'c' FROM pg_catalog.pg_class c WHERE c.oid = pt.typrelid))					{$where}			 	UNION ALL				SELECT 'OPERATOR', po.oid, pn.nspname, NULL, po.oprname FROM pg_catalog.pg_operator po, pg_catalog.pg_namespace pn					WHERE po.oprnamespace=pn.oid AND oprname ILIKE '%{$term}%' {$where}				UNION ALL				SELECT 'CONVERSION', pc.oid, pn.nspname, NULL, pc.conname FROM pg_catalog.pg_conversion pc,					pg_catalog.pg_namespace pn WHERE pc.connamespace=pn.oid AND conname ILIKE '%{$term}%' {$where}				UNION ALL				SELECT 'LANGUAGE', pl.oid, NULL, NULL, pl.lanname FROM pg_catalog.pg_language pl					WHERE lanname ILIKE '%{$term}%' {$lan_where}				UNION ALL				SELECT DISTINCT ON (p.proname) 'AGGREGATE', p.oid, pn.nspname, NULL, p.proname FROM pg_catalog.pg_proc p					LEFT JOIN pg_catalog.pg_namespace pn ON p.pronamespace=pn.oid					WHERE p.proisagg AND p.proname ILIKE '%{$term}%' {$where}				UNION ALL				SELECT DISTINCT ON (po.opcname) 'OPCLASS', po.oid, pn.nspname, NULL, po.opcname FROM pg_catalog.pg_opclass po,					pg_catalog.pg_namespace pn WHERE po.opcnamespace=pn.oid					AND po.opcname ILIKE '%{$term}%' {$where}			";		}		// Otherwise just add domains		else {			$sql .= "				UNION ALL				SELECT 'DOMAIN', pt.oid, pn.nspname, NULL,					pt.typname FROM pg_catalog.pg_type pt, pg_catalog.pg_namespace pn					WHERE pt.typnamespace=pn.oid AND pt.typtype='d' AND typname ILIKE '%{$term}%'					AND (pt.typrelid = 0 OR (SELECT c.relkind = 'c' FROM pg_catalog.pg_class c WHERE c.oid = pt.typrelid))					{$where}			";		}		if ($filter != '') {			// We use like to make RULE, CONSTRAINT and COLUMN searches work			$sql .= ") AS sub WHERE type LIKE '{$filter}%' ";		}		$sql .= "ORDER BY type, schemaname, relname, name";		return $this->selectSet($sql);	}	// Capabilities}?>
<?php	/**	 * Manage schemas within a database	 *	 * $Id: database.php,v 1.104 2007/11/30 06:04:43 xzilla Exp $	 */	// Include application functions	include_once('./libraries/lib.inc.php');	$action = (isset($_REQUEST['action'])) ? $_REQUEST['action'] : '';	if (!isset($msg)) $msg = '';	$scripts = '';	function _highlight($string, $term) {		return str_replace($term, "<b>{$term}</b>", $string);	}		/**	 * Sends a signal to a process	 */	function doSignal() {		global $data, $lang;		$status = $data->sendSignal($_REQUEST['procpid'], $_REQUEST['signal']);		if ($status == 0)			doProcesses($lang['strsignalsent']);		else			doProcesses($lang['strsignalsentbad']);	}	/**	 * Searches for a named database object	 */	function doFind($confirm = true, $msg = '') {		global $data, $misc;		global $lang, $conf;		if (!isset($_REQUEST['term'])) $_REQUEST['term'] = '';		if (!isset($_REQUEST['filter'])) $_REQUEST['filter'] = '';		$misc->printTrail('database');		$misc->printTabs('database','find');		$misc->printMsg($msg);				echo "<form action=\"database.php\" method=\"post\">\n";		echo "<p><input name=\"term\" value=\"", htmlspecialchars($_REQUEST['term']), 			"\" size=\"32\" maxlength=\"{$data->_maxNameLen}\" />\n";		// Output list of filters.  This is complex due to all the 'has' and 'conf' feature possibilities		echo "<select name=\"filter\">\n";		echo "\t<option value=\"\"", ($_REQUEST['filter'] == '') ? ' selected="selected"' : '', ">{$lang['strallobjects']}</option>\n";		echo "\t<option value=\"SCHEMA\"", ($_REQUEST['filter'] == 'SCHEMA') ? ' selected="selected"' : '', ">{$lang['strschemas']}</option>\n";		echo "\t<option value=\"TABLE\"", ($_REQUEST['filter'] == 'TABLE') ? ' selected="selected"' : '', ">{$lang['strtables']}</option>\n";		echo "\t<option value=\"VIEW\"", ($_REQUEST['filter'] == 'VIEW') ? ' selected="selected"' : '', ">{$lang['strviews']}</option>\n";		echo "\t<option value=\"SEQUENCE\"", ($_REQUEST['filter'] == 'SEQUENCE') ? ' selected="selected"' : '', ">{$lang['strsequences']}</option>\n";		echo "\t<option value=\"COLUMN\"", ($_REQUEST['filter'] == 'COLUMN') ? ' selected="selected"' : '', ">{$lang['strcolumns']}</option>\n";		echo "\t<option value=\"RULE\"", ($_REQUEST['filter'] == 'RULE') ? ' selected="selected"' : '', ">{$lang['strrules']}</option>\n";		echo "\t<option value=\"INDEX\"", ($_REQUEST['filter'] == 'INDEX') ? ' selected="selected"' : '', ">{$lang['strindexes']}</option>\n";		echo "\t<option value=\"TRIGGER\"", ($_REQUEST['filter'] == 'TRIGGER') ? ' selected="selected"' : '', ">{$lang['strtriggers']}</option>\n";		echo "\t<option value=\"CONSTRAINT\"", ($_REQUEST['filter'] == 'CONSTRAINT') ? ' selected="selected"' : '', ">{$lang['strconstraints']}</option>\n";		echo "\t<option value=\"FUNCTION\"", ($_REQUEST['filter'] == 'FUNCTION') ? ' selected="selected"' : '', ">{$lang['strfunctions']}</option>\n";		echo "\t<option value=\"DOMAIN\"", ($_REQUEST['filter'] == 'DOMAIN') ? ' selected="selected"' : '', ">{$lang['strdomains']}</option>\n";		if ($conf['show_advanced']) {			echo "\t<option value=\"AGGREGATE\"", ($_REQUEST['filter'] == 'AGGREGATE') ? ' selected="selected"' : '', ">{$lang['straggregates']}</option>\n";			echo "\t<option value=\"TYPE\"", ($_REQUEST['filter'] == 'TYPE') ? ' selected="selected"' : '', ">{$lang['strtypes']}</option>\n";			echo "\t<option value=\"OPERATOR\"", ($_REQUEST['filter'] == 'OPERATOR') ? ' selected="selected"' : '', ">{$lang['stroperators']}</option>\n";			echo "\t<option value=\"OPCLASS\"", ($_REQUEST['filter'] == 'OPCLASS') ? ' selected="selected"' : '', ">{$lang['stropclasses']}</option>\n";			echo "\t<option value=\"CONVERSION\"", ($_REQUEST['filter'] == 'CONVERSION') ? ' selected="selected"' : '', ">{$lang['strconversions']}</option>\n";			echo "\t<option value=\"LANGUAGE\"", ($_REQUEST['filter'] == 'LANGUAGE') ? ' selected="selected"' : '', ">{$lang['strlanguages']}</option>\n";		}		echo "</select>\n";		echo "<input type=\"submit\" value=\"{$lang['strfind']}\" />\n";		echo $misc->form;		echo "<input type=\"hidden\" name=\"action\" value=\"find\" /></p>\n";		echo "</form>\n";				// Default focus		$misc->setFocus('forms[0].term');		// If a search term has been specified, then perform the search		// and display the results, grouped by object type		if ($_REQUEST['term'] != '') {			$rs = $data->findObject($_REQUEST['term'], $_REQUEST['filter']);			if ($rs->recordCount() > 0) {				$curr = '';				while (!$rs->EOF) {					// Output a new header if the current type has changed, but not if it's just changed the rule type					if ($rs->fields['type'] != $curr) {						// Short-circuit in the case of changing from table rules to view rules; table cols to view cols;						// table constraints to domain constraints						if ($rs->fields['type'] == 'RULEVIEW' && $curr == 'RULETABLE') {							$curr = $rs->fields['type'];						}						elseif ($rs->fields['type'] == 'COLUMNVIEW' && $curr == 'COLUMNTABLE') {							$curr = $rs->fields['type'];						}						elseif ($rs->fields['type'] == 'CONSTRAINTTABLE' && $curr == 'CONSTRAINTDOMAIN') {							$curr = $rs->fields['type'];						}						else {							if ($curr != '') echo "</ul>\n";							$curr = $rs->fields['type'];							echo "<h3>";							switch ($curr) {								case 'SCHEMA':									echo $lang['strschemas'];									break;								case 'TABLE':									echo $lang['strtables'];									break;								case 'VIEW':									echo $lang['strviews'];									break;								case 'SEQUENCE':									echo $lang['strsequences'];									break;								case 'COLUMNTABLE':								case 'COLUMNVIEW':									echo $lang['strcolumns'];									break;								case 'INDEX':									echo $lang['strindexes'];									break;								case 'CONSTRAINTTABLE':								case 'CONSTRAINTDOMAIN':									echo $lang['strconstraints'];									break;								case 'TRIGGER':									echo $lang['strtriggers'];									break;								case 'RULETABLE':								case 'RULEVIEW':									echo $lang['strrules'];									break;								case 'FUNCTION':									echo $lang['strfunctions'];									break;								case 'TYPE':									echo $lang['strtypes'];									break;								case 'DOMAIN':									echo $lang['strdomains'];									break;								case 'OPERATOR':									echo $lang['stroperators'];									break;								case 'CONVERSION':									echo $lang['strconversions'];									break;								case 'LANGUAGE':									echo $lang['strlanguages'];									break;								case 'AGGREGATE':									echo $lang['straggregates'];									break;								case 'OPCLASS':									echo $lang['stropclasses'];									break;							}							echo "</h3>";							echo "<ul>\n";						}					}										switch ($curr) {						case 'SCHEMA':													echo "<li><a href=\"redirect.php?subject=schema&amp;{$misc->href}&amp;schema=", $misc->printVal($rs->fields['name']), "\">", _highlight($misc->printVal($rs->fields['name']), $_REQUEST['term']), "</a></li>\n";							break;						case 'TABLE':							echo "<li>";							echo "<a href=\"tables.php?subject=schema&amp;{$misc->href}&amp;schema=", urlencode($rs->fields['schemaname']), "\">", $misc->printVal($rs->fields['schemaname']), "</a>.";							echo "<a href=\"redirect.php?subject=table&amp;{$misc->href}&amp;schema=", urlencode($rs->fields['schemaname']), "&amp;table=", 								urlencode($rs->fields['name']), "\">", _highlight($misc->printVal($rs->fields['name']), $_REQUEST['term']), "</a></li>\n";							break;						case 'VIEW':							echo "<li>";							echo "<a href=\"views.php?subject=schema&amp;{$misc->href}&amp;schema=", urlencode($rs->fields['schemaname']), "\">", $misc->printVal($rs->fields['schemaname']), "</a>.";							echo "<a href=\"redirect.php?subject=view&amp;{$misc->href}&amp;schema=", urlencode($rs->fields['schemaname']), "&amp;view=", 								urlencode($rs->fields['name']), "\">", _highlight($misc->printVal($rs->fields['name']), $_REQUEST['term']), "</a></li>\n";							break;						case 'SEQUENCE':							echo "<li>";							echo "<a href=\"sequences.php?subject=schema&amp;{$misc->href}&amp;schema=", urlencode($rs->fields['schemaname']), "\">", $misc->printVal($rs->fields['schemaname']), "</a>.";							echo "<a href=\"sequences.php?subject=sequence&amp;action=properties&amp;{$misc->href}&amp;schema=", urlencode($rs->fields['schemaname']), 								"&amp;sequence=", urlencode($rs->fields['name']), "\">", _highlight($misc->printVal($rs->fields['name']), $_REQUEST['term']), "</a></li>\n";							break;						case 'COLUMNTABLE':							echo "<li>";							echo "<a href=\"redirect.php?subject=schema&amp;{$misc->href}&amp;schema=", urlencode($rs->fields['schemaname']), "\">", $misc->printVal($rs->fields['schemaname']), "</a>.";							echo "<a href=\"tblproperties.php?subject=table&amp;{$misc->href}&amp;table=", urlencode($rs->fields['relname']), "&amp;schema=", urlencode($rs->fields['schemaname']), "\">", $misc->printVal($rs->fields['relname']), "</a>.";							echo "<a href=\"colproperties.php?{$misc->href}&amp;schema=", urlencode($rs->fields['schemaname']), "&amp;table=", 								urlencode($rs->fields['relname']), "&amp;column=", urlencode($rs->fields['name']), "\">", 								_highlight($misc->printVal($rs->fields['name']), $_REQUEST['term']), "</a></li>\n";							break;						case 'COLUMNVIEW':							echo "<li>";							echo "<a href=\"redirect.php?subject=schema&amp;{$misc->href}&amp;schema=", urlencode($rs->fields['schemaname']), "\">", $misc->printVal($rs->fields['schemaname']), "</a>.";							echo "<a href=\"viewproperties.php?subject=view&amp;{$misc->href}&amp;view=", urlencode($rs->fields['relname']), "&amp;schema=", urlencode($rs->fields['schemaname']), "\">", $misc->printVal($rs->fields['relname']), "</a>.";							echo "<a href=\"colproperties.php?{$misc->href}&amp;schema=", urlencode($rs->fields['schemaname']), "&amp;view=", 								urlencode($rs->fields['relname']), "&amp;column=", urlencode($rs->fields['name']), "\">", 								_highlight($misc->printVal($rs->fields['name']), $_REQUEST['term']), "</a></li>\n";							break;						case 'INDEX':							echo "<li>";							echo "<a href=\"redirect.php?subject=schema&amp;{$misc->href}&amp;schema=", urlencode($rs->fields['schemaname']), "\">", $misc->printVal($rs->fields['schemaname']), "</a>.";							echo "<a href=\"redirect.php?subject=table&amp;{$misc->href}&amp;table=", urlencode($rs->fields['relname']), "&amp;schema=", urlencode($rs->fields['schemaname']), "\">", $misc->printVal($rs->fields['relname']), "</a>.";							echo "<a href=\"indexes.php?{$misc->href}&amp;schema=", urlencode($rs->fields['schemaname']), "&amp;table=", urlencode($rs->fields['relname']), "\">", _highlight($misc->printVal($rs->fields['name']), $_REQUEST['term']), "</a></li>\n";							break;						case 'CONSTRAINTTABLE':							echo "<li>";							echo "<a href=\"redirect.php?subject=schema&amp;{$misc->href}&amp;schema=", urlencode($rs->fields['schemaname']), "\">", $misc->printVal($rs->fields['schemaname']), "</a>.";							echo "<a href=\"redirect.php?subject=table&amp;{$misc->href}&amp;table=", urlencode($rs->fields['relname']), "&amp;schema=", urlencode($rs->fields['schemaname']), "\">", $misc->printVal($rs->fields['relname']), "</a>.";							echo "<a href=\"constraints.php?{$misc->href}&amp;schema=", urlencode($rs->fields['schemaname']), "&amp;table=", 								urlencode($rs->fields['relname']), "\">", _highlight($misc->printVal($rs->fields['name']), $_REQUEST['term']), "</a></li>\n";							break;						case 'CONSTRAINTDOMAIN':							echo "<li>";							echo "<a href=\"domains.php?subject=schema&amp;{$misc->href}&amp;schema=", urlencode($rs->fields['schemaname']), "\">", $misc->printVal($rs->fields['schemaname']), "</a>.";							echo "<a href=\"domains.php?action=properties&amp;{$misc->href}&amp;schema=", urlencode($rs->fields['schemaname']), "&amp;domain=", urlencode($rs->fields['relname']), "\">", 								$misc->printVal($rs->fields['relname']), '.', _highlight($misc->printVal($rs->fields['name']), $_REQUEST['term']), "</a></li>\n";							break;						case 'TRIGGER':							echo "<li>";							echo "<a href=\"redirect.php?subject=schema&amp;{$misc->href}&amp;schema=", urlencode($rs->fields['schemaname']), "\">", $misc->printVal($rs->fields['schemaname']), "</a>.";							echo "<a href=\"redirect.php?subject=table&amp;{$misc->href}&amp;table=", urlencode($rs->fields['relname']), "&amp;schema=", urlencode($rs->fields['schemaname']), "\">", $misc->printVal($rs->fields['relname']), "</a>.";							echo "<a href=\"triggers.php?{$misc->href}&amp;schema=", urlencode($rs->fields['schemaname']), "&amp;table=", urlencode($rs->fields['relname']), "\">", 								_highlight($misc->printVal($rs->fields['name']), $_REQUEST['term']), "</a></li>\n";							break;						case 'RULETABLE':							echo "<li>";							echo "<a href=\"redirect.php?subject=schema&amp;{$misc->href}&amp;schema=", urlencode($rs->fields['schemaname']), "\">", $misc->printVal($rs->fields['schemaname']), "</a>.";							echo "<a href=\"redirect.php?subject=table&amp;{$misc->href}&amp;table=", urlencode($rs->fields['relname']), "&amp;schema=", urlencode($rs->fields['schemaname']), "\">", $misc->printVal($rs->fields['relname']), "</a>.";							echo "<a href=\"rules.php?subject=table&amp;{$misc->href}&amp;schema=", urlencode($rs->fields['schemaname']), "&amp;reltype=table&amp;table=", 								urlencode($rs->fields['relname']), "\">", _highlight($misc->printVal($rs->fields['name']), $_REQUEST['term']), "</a></li>\n";							break;						case 'RULEVIEW':							echo "<li>";							echo "<a href=\"redirect.php?subject=schema&amp;{$misc->href}&amp;schema=", urlencode($rs->fields['schemaname']), "\">", $misc->printVal($rs->fields['schemaname']), "</a>.";							echo "<a href=\"redirect.php?subject=view&amp;{$misc->href}&amp;view=", urlencode($rs->fields['relname']), "&amp;schema=", urlencode($rs->fields['schemaname']), "\">", $misc->printVal($rs->fields['relname']), "</a>.";							echo "<a href=\"rules.php?subject=view&amp;{$misc->href}&amp;schema=", urlencode($rs->fields['schemaname']), "&amp;reltype=view&amp;view=", 								urlencode($rs->fields['relname']), "\">", _highlight($misc->printVal($rs->fields['name']), $_REQUEST['term']), "</a></li>\n";							break;						case 'FUNCTION':							echo "<li>";							echo "<a href=\"functions.php?subject=schema&amp;{$misc->href}&amp;schema=", urlencode($rs->fields['schemaname']), "\">", $misc->printVal($rs->fields['schemaname']), "</a>.";							echo "<a href=\"functions.php?action=properties&amp;{$misc->href}&amp;schema=", urlencode($rs->fields['schemaname']), "&amp;function=", 								urlencode($rs->fields['name']), "&amp;function_oid=", urlencode($rs->fields['oid']), "\">", 								_highlight($misc->printVal($rs->fields['name']), $_REQUEST['term']), "</a></li>\n";							break;						case 'TYPE':							echo "<li>";							echo "<a href=\"types.php?subject=schema&amp;{$misc->href}&amp;schema=", urlencode($rs->fields['schemaname']), "\">", $misc->printVal($rs->fields['schemaname']), "</a>.";							echo "<a href=\"types.php?action=properties&amp;{$misc->href}&amp;schema=", urlencode($rs->fields['schemaname']), "&amp;type=", 								urlencode($rs->fields['name']), "\">", _highlight($misc->printVal($rs->fields['name']), $_REQUEST['term']), "</a></li>\n";							break;						case 'DOMAIN':							echo "<li>";							echo "<a href=\"domains.php?subject=schema&amp;{$misc->href}&amp;schema=", urlencode($rs->fields['schemaname']), "\">", $misc->printVal($rs->fields['schemaname']), "</a>.";							echo "<a href=\"domains.php?action=properties&amp;{$misc->href}&amp;schema=", urlencode($rs->fields['schemaname']), "&amp;domain=", 								urlencode($rs->fields['name']), "\">", _highlight($misc->printVal($rs->fields['name']), $_REQUEST['term']), "</a></li>\n";							break;						case 'OPERATOR':							echo "<li>";							echo "<a href=\"operators.php?subject=schema&amp;{$misc->href}&amp;schema=", urlencode($rs->fields['schemaname']), "\">", $misc->printVal($rs->fields['schemaname']), "</a>.";							echo "<a href=\"operators.php?action=properties&amp;{$misc->href}&amp;schema=", urlencode($rs->fields['schemaname']), "&amp;operator=", 								urlencode($rs->fields['name']), "&amp;operator_oid=", urlencode($rs->fields['oid']) ,"\">", _highlight($misc->printVal($rs->fields['name']), $_REQUEST['term']), "</a></li>\n";							break;						case 'CONVERSION':							echo "<li>";							echo "<a href=\"conversions.php?subject=schema&amp;{$misc->href}&amp;schema=", urlencode($rs->fields['schemaname']), "\">", $misc->printVal($rs->fields['schemaname']), "</a>.";							echo "<a href=\"conversions.php?{$misc->href}&amp;schema=", urlencode($rs->fields['schemaname']), 								"\">", _highlight($misc->printVal($rs->fields['name']), $_REQUEST['term']), "</a></li>\n";							break;						case 'LANGUAGE':							echo "<li><a href=\"languages.php?{$misc->href}\">", _highlight($misc->printVal($rs->fields['name']), $_REQUEST['term']), "</a></li>\n";							break;						case 'AGGREGATE':							echo "<li>";							echo "<a href=\"aggregates.php?subject=schema&amp;{$misc->href}&amp;schema=", urlencode($rs->fields['schemaname']), "\">", $misc->printVal($rs->fields['schemaname']), "</a>.";							echo "<a href=\"aggregates.php?{$misc->href}&amp;schema=", urlencode($rs->fields['schemaname']), "\">",								_highlight($misc->printVal($rs->fields['name']), $_REQUEST['term']), "</a></li>\n";							break;						case 'OPCLASS':							echo "<li>";							echo "<a href=\"redirect.php?subject=schema&amp;{$misc->href}&amp;schema=", urlencode($rs->fields['schemaname']), "\">", $misc->printVal($rs->fields['schemaname']), "</a>.";							echo "<a href=\"opclasses.php?{$misc->href}&amp;schema=", urlencode($rs->fields['schemaname']), "\">",								_highlight($misc->printVal($rs->fields['name']), $_REQUEST['term']), "</a></li>\n";							break;					}					$rs->moveNext();					}							echo "</ul>\n";								echo "<p>", $rs->recordCount(), " ", $lang['strobjects'], "</p>\n";			}			else echo "<p>{$lang['strnoobjects']}</p>\n";		}			}	/**	 * Displays options for database download	 */	function doExport($msg = '') {		global $data, $misc;		global $lang;		$misc->printTrail('database');		$misc->printTabs('database','export');		$misc->printMsg($msg);		echo "<form action=\"dbexport.php\" method=\"post\">\n";		echo "<table>\n";		echo "<tr><th class=\"data\">{$lang['strformat']}</th><th class=\"data\" colspan=\"2\">{$lang['stroptions']}</th></tr>\n";		// Data only		echo "<tr><th class=\"data left\" rowspan=\"2\">";		echo "<input type=\"radio\" id=\"what1\" name=\"what\" value=\"dataonly\" checked=\"checked\" /><label for=\"what1\">{$lang['strdataonly']}</label></th>\n";		echo "<td>{$lang['strformat']}</td>\n";		echo "<td><select name=\"d_format\">\n";		echo "<option value=\"copy\">COPY</option>\n";		echo "<option value=\"sql\">SQL</option>\n";		echo "</select>\n</td>\n</tr>\n";		echo "<tr><td><label for=\"d_oids\">{$lang['stroids']}</label></td><td><input type=\"checkbox\" id=\"d_oids\" name=\"d_oids\" /></td>\n</tr>\n";		// Structure only		echo "<tr><th class=\"data left\"><input type=\"radio\" id=\"what2\" name=\"what\" value=\"structureonly\" /><label for=\"what2\">{$lang['strstructureonly']}</label></th>\n";		echo "<td><label for=\"s_clean\">{$lang['strdrop']}</label></td><td><input type=\"checkbox\" id=\"s_clean\" name=\"s_clean\" /></td>\n</tr>\n";		// Structure and data		echo "<tr><th class=\"data left\" rowspan=\"3\">";		echo "<input type=\"radio\" id=\"what3\" name=\"what\" value=\"structureanddata\" /><label for=\"what3\">{$lang['strstructureanddata']}</label></th>\n";		echo "<td>{$lang['strformat']}</td>\n";		echo "<td><select name=\"sd_format\">\n";		echo "<option value=\"copy\">COPY</option>\n";		echo "<option value=\"sql\">SQL</option>\n";		echo "</select>\n</td>\n</tr>\n";		echo "<tr><td><label for=\"sd_clean\">{$lang['strdrop']}</label></td><td><input type=\"checkbox\" id=\"sd_clean\" name=\"sd_clean\" /></td>\n</tr>\n";		echo "<tr><td><label for=\"sd_oids\">{$lang['stroids']}</label></td><td><input type=\"checkbox\" id=\"sd_oids\" name=\"sd_oids\" /></td>\n</tr>\n";		echo "</table>\n";				echo "<h3>{$lang['stroptions']}</h3>\n";		echo "<p><input type=\"radio\" id=\"output1\" name=\"output\" value=\"show\" checked=\"checked\" /><label for=\"output1\">{$lang['strshow']}</label>\n";		echo "<br/><input type=\"radio\" id=\"output2\" name=\"output\" value=\"download\" /><label for=\"output2\">{$lang['strdownload']}</label>\n";		// MSIE cannot download gzip in SSL mode - it's just broken		if (!(strstr($_SERVER['HTTP_USER_AGENT'], 'MSIE') && isset($_SERVER['HTTPS']))) {			echo "<br /><input type=\"radio\" id=\"output3\" name=\"output\" value=\"gzipped\" /><label for=\"output3\">{$lang['strdownloadgzipped']}</label>\n";		}		echo "</p>\n";		echo "<p><input type=\"hidden\" name=\"action\" value=\"export\" />\n";		echo "<input type=\"hidden\" name=\"subject\" value=\"database\" />\n";		echo $misc->form;		echo "<input type=\"submit\" value=\"{$lang['strexport']}\" /></p>\n";		echo "</form>\n";	}		/**	 * Show the current status of all database variables	 */	function doVariables() {		global $data, $misc;		global $lang;		// Fetch the variables from the database		$variables = $data->getVariables();			$misc->printTrail('database');		$misc->printTabs('database','variables');		$columns = array(			'variable' => array(				'title' => $lang['strname'],				'field' => field('name'),			),			'value' => array(				'title' => $lang['strsetting'],				'field' => field('setting'),			),		);				$actions = array();				$misc->printTable($variables, $columns, $actions, $lang['strnodata']);	}	/**	 * Show all current database connections and any queries they	 * are running.	 */	function doProcesses($msg = '') {		global $data, $misc;		global $lang;		$misc->printTrail('database');		$misc->printTabs('database','processes');		$misc->printMsg($msg);		if (strlen($msg) === 0) {			echo "<br /><a id=\"control\" href=\"\"><img src=\"".$misc->icon('Refresh')."\" alt=\"{$lang['strrefresh']}\" title=\"{$lang['strrefresh']}\"/>&nbsp;{$lang['strrefresh']}</a>";		}		echo "<div id=\"data_block\">";		currentProcesses();		echo "</div>";	}		function currentProcesses($isAjax = false) {		global $data, $misc, $lang;				// Display prepared transactions		if($data->hasPreparedXacts()) {			echo "<h3>{$lang['strpreparedxacts']}</h3>\n";			$prep_xacts = $data->getPreparedXacts($_REQUEST['database']);					$columns = array(				'transaction' => array(					'title' => $lang['strxactid'],					'field' => field('transaction'),				),				'gid' => array(					'title' => $lang['strgid'],					'field' => field('gid'),				),				'prepared' => array(					'title' => $lang['strstarttime'],					'field' => field('prepared'),				),				'owner' => array(					'title' => $lang['strowner'],					'field' => field('owner'),				),			);			$actions = array();			$misc->printTable($prep_xacts, $columns, $actions, $lang['strnodata']);		}		// Fetch the processes from the database		echo "<h3>{$lang['strprocesses']}</h3>\n";		$processes = $data->getProcesses($_REQUEST['database']);						$columns = array(			'user' => array(				'title' => $lang['strusername'],				'field' => field('usename'),			),			'process' => array(				'title' => $lang['strprocess'],				'field' => field('procpid'),			),			'query' => array(				'title' => $lang['strsql'],				'field' => field('current_query'),			),			'start_time' => array(				'title' => $lang['strstarttime'],				'field' => field('query_start'),			),		);		// Build possible actions for our process list		$columns['actions'] = array('title' => $lang['stractions']);					$actions = array(			'cancel' => array(				'title' => $lang['strcancel'],				'url'   => "database.php?action=signal&amp;signal=CANCEL&amp;{$misc->href}&amp;",				'vars'  => array('procpid' => 'procpid')			),			'kill' => array(				'title' => $lang['strkill'],				'url'   => "database.php?action=signal&amp;signal=KILL&amp;{$misc->href}&amp;",				'vars'  => array('procpid' => 'procpid')			)		);			// Remove actions where not supported		if (!$data->hasQueryKill()) unset($actions['kill']);		if (!$data->hasQueryCancel()) unset($actions['cancel']);		if (count($actions) == 0) unset($columns['actions']);			// Remove query start time for <7.4		if (!isset($processes->fields['query_start'])) unset($columns['start_time']);		$misc->printTable($processes, $columns, $actions, $lang['strnodata']);				if ($isAjax) exit;	}	function currentLocks($isAjax = false) {		global $data, $misc, $lang;		// Get the info from the pg_locks view		$variables = $data->getLocks();		$columns = array(			'namespace' => array(				'title' => $lang['strschema'],				'field' => field('nspname'),			),			'tablename' => array(				'title' => $lang['strtablename'],				'field' => field('tablename'),			),			'vxid' => array(				'title' => $lang['strvirtualtransaction'],				'field' => field('virtualtransaction'),			),			'transactionid' => array(				'title' => $lang['strtransaction'],				'field' => field('transaction'),			),			'processid' => array(				'title' => $lang['strprocessid'],				'field' => field('pid'),			),			'mode' => array(				'title' => $lang['strmode'],				'field' => field('mode'),			),			'granted' => array(				'title' => $lang['strislockheld'],				'field' => field('granted'),				'type'  => 'yesno',			),		);		if (!$data->hasVirtualTransactionId()) unset($columns['vxid']);		$actions = array();		$misc->printTable($variables, $columns, $actions, $lang['strnodata']);				if ($isAjax) exit;	}		/**	 * Show the existing table locks in the current database	 */	function doLocks() {		global $data, $misc;		global $lang;		$misc->printTrail('database');		$misc->printTabs('database','locks');		echo "<br /><a id=\"control\" href=\"\"><img src=\"".$misc->icon('Refresh')."\" alt=\"{$lang['strrefresh']}\" title=\"{$lang['strrefresh']}\"/>&nbsp;{$lang['strrefresh']}</a>";		echo "<div id=\"data_block\">";		currentLocks();		echo "</div>";	}	/**	 * Allow execution of arbitrary SQL statements on a database	 */	function doSQL() {		global $data, $misc;		global $lang;		if ((!isset($_SESSION['sqlquery'])) || isset($_REQUEST['new'])) $_SESSION['sqlquery'] = '';		$misc->printTrail('database');		$misc->printTabs('database','sql');		echo "<p>{$lang['strentersql']}</p>\n";		echo "<form action=\"sql.php\" method=\"post\" enctype=\"multipart/form-data\">\n";		echo "<p>{$lang['strsql']}<br />\n";		echo "<textarea style=\"width:100%;\" rows=\"20\" cols=\"50\" name=\"query\">",			htmlspecialchars($_SESSION['sqlquery']), "</textarea></p>\n";		// Check that file uploads are enabled		if (ini_get('file_uploads')) {			// Don't show upload option if max size of uploads is zero			$max_size = $misc->inisizeToBytes(ini_get('upload_max_filesize'));			if (is_double($max_size) && $max_size > 0) {				echo "<p><input type=\"hidden\" name=\"MAX_FILE_SIZE\" value=\"{$max_size}\" />\n";				echo "<label for=\"script\">{$lang['struploadscript']}</label> <input id=\"script\" name=\"script\" type=\"file\" /></p>\n";			}		}		echo "<p><input type=\"checkbox\" id=\"paginate\" name=\"paginate\"", (isset($_REQUEST['paginate']) ? ' checked="checked"' : ''), " /><label for=\"paginate\">{$lang['strpaginate']}</label></p>\n";		echo "<p><input type=\"submit\" value=\"{$lang['strexecute']}\" />\n";		echo $misc->form;		echo "<input type=\"reset\" value=\"{$lang['strreset']}\" /></p>\n";		echo "</form>\n";		// Default focus		$misc->setFocus('forms[0].query');	}	function doTree() {		global $misc, $data, $lang, $slony;		$reqvars = $misc->getRequestVars('database');		$tabs = $misc->getNavTabs('database');		$items = $misc->adjustTabsForTree($tabs);		$attrs = array(			'text'   => noEscape(field('title')),			'icon'   => field('icon'),			'action' => url(field('url'),							$reqvars,							field('urlvars', array())						),			'branch' => url(field('url'),							$reqvars,							field('urlvars'),							array('action' => 'tree')						),		);				$misc->printTreeXML($items, $attrs);		exit;	}	require('./admin.php');	/* shortcuts: these functions exit the script */	if ($action == 'tree') doTree();	if ($action == 'refresh_locks') currentLocks(true);	if ($action == 'refresh_processes') currentProcesses(true);	/* normal flow */	if ($action == 'locks' or $action == 'processes') {		$scripts  = "<script src=\"libraries/js/jquery.js\" type=\"text/javascript\"></script>\n";		$scripts .= "<script src=\"js/database.js\" type=\"text/javascript\"></script>";		$refreshTime = $conf['ajax_refresh'] * 1000;		$scripts .= "<script type=\"text/javascript\">\n";		$scripts .= "var Database = {\n";		$scripts .= "ajax_time_refresh: {$refreshTime},\n";		$scripts .= "str_start: {text:'{$lang['strstart']}',icon: '". $misc->icon('Execute') ."'},\n";		$scripts .= "str_stop: {text:'{$lang['strstop']}',icon: '". $misc->icon('Stop') ."'},\n";		$scripts .= "load_icon: '". $misc->icon('Loading') ."',\n";		$scripts .= "server:'{$_REQUEST['server']}',\n";		$scripts .= "dbname:'{$_REQUEST['database']}',\n";		$scripts .= "action:'refresh_{$action}',\n";		$scripts .= "errmsg: '". str_replace("'", "\'", $lang['strconnectionfail']) ."'\n";		$scripts .= "};\n";		$scripts .= "</script>\n";	}	$misc->printHeader($lang['strdatabase'], $scripts);	$misc->printBody();	switch ($action) {		case 'find':			if (isset($_REQUEST['term'])) doFind(false);			else doFind(true);			break;		case 'sql':			doSQL();			break;		case 'variables':			doVariables();			break;		case 'processes':			doProcesses();			break;		case 'locks':			doLocks();			break;		case 'export':			doExport();			break;		case 'signal':			doSignal();			break;		default:			if (adminActions($action, 'database') === false) doSQL();			break;	}	$misc->printFooter();?>
<?php	/**	 * List Columns properties in tables	 *	 * $Id: colproperties.php	 */	// Include application functions	include_once('./libraries/lib.inc.php');	$action = (isset($_REQUEST['action'])) ? $_REQUEST['action'] : '';	if (isset($_REQUEST['table']))		$tableName =& $_REQUEST['table'];	elseif (isset($_REQUEST['view']))		$tableName =& $_REQUEST['view'];	else 		die($lang['strnotableprovided']);	/**	 * Displays a screen where they can alter a column	 */	function doAlter($msg = '') {		global $data, $misc, $_reload_browser;		global $lang;		if (!isset($_REQUEST['stage'])) $_REQUEST['stage'] = 1;		switch ($_REQUEST['stage']) {			case 1:				$misc->printTrail('column');				$misc->printTitle($lang['stralter'], 'pg.column.alter'); 				$misc->printMsg($msg);				echo "<script src=\"tables.js\" type=\"text/javascript\"></script>";				echo "<form action=\"colproperties.php\" method=\"post\">\n";				// Output table header				echo "<table>\n";				echo "<tr><th class=\"data required\">{$lang['strname']}</th>\n";				if ($data->hasAlterColumnType()) {					echo "<th class=\"data required\" colspan=\"2\">{$lang['strtype']}</th>\n";					echo "<th class=\"data\">{$lang['strlength']}</th>\n";				}				else {					echo "<th class=\"data required\">{$lang['strtype']}</th>\n";				}				echo "<th class=\"data\">{$lang['strnotnull']}</th>\n<th class=\"data\">{$lang['strdefault']}</th>\n<th class=\"data\">{$lang['strcomment']}</th></tr>\n";				$column = $data->getTableAttributes($_REQUEST['table'], $_REQUEST['column']);				$column->fields['attnotnull'] = $data->phpBool($column->fields['attnotnull']);				// Upon first drawing the screen, load the existing column information				// from the database.				if (!isset($_REQUEST['default'])) {					$_REQUEST['field'] = $column->fields['attname'];					$_REQUEST['type'] = $column->fields['base_type'];					// Check to see if its' an array type...					// XXX: HACKY					if (substr($column->fields['base_type'], strlen($column->fields['base_type']) - 2) == '[]') {						$_REQUEST['type'] = substr($column->fields['base_type'], 0, strlen($column->fields['base_type']) - 2);						$_REQUEST['array'] = '[]';					}					else {						$_REQUEST['type'] = $column->fields['base_type'];						$_REQUEST['array'] = '';					}					// To figure out the length, look in the brackets :(					// XXX: HACKY					if ($column->fields['type'] != $column->fields['base_type'] && preg_match('/\\(([0-9, ]*)\\)/', $column->fields['type'], $bits)) {						$_REQUEST['length'] = $bits[1];					}					else						$_REQUEST['length'] = '';					$_REQUEST['default'] = $_REQUEST['olddefault'] = $column->fields['adsrc'];					if ($column->fields['attnotnull']) $_REQUEST['notnull'] = 'YES';					$_REQUEST['comment'] = $column->fields['comment'];				}								// Column name				echo "<tr><td><input name=\"field\" size=\"16\" maxlength=\"{$data->_maxNameLen}\" value=\"",					htmlspecialchars($_REQUEST['field']), "\" /></td>\n";									// Column type				$escaped_predef_types = array(); // the JS escaped array elements				if ($data->hasAlterColumnType()) {					// Fetch all available types					$types = $data->getTypes(true, false, true);					$types_for_js = array();										echo "<td><select name=\"type\" id=\"type\" onchange=\"checkLengths(document.getElementById('type').value,'');\">\n";									while (!$types->EOF) {						$typname = $types->fields['typname'];						$types_for_js[] = $typname;						echo "\t<option value=\"", htmlspecialchars($typname), "\"", ($typname == $_REQUEST['type']) ? ' selected="selected"' : '', ">",							$misc->printVal($typname), "</option>\n";						$types->moveNext();					}					echo "</select></td>\n";										// Output array type selector					echo "<td><select name=\"array\">\n";					echo "\t<option value=\"\"", ($_REQUEST['array'] == '') ? ' selected="selected"' : '', "></option>\n";					echo "\t<option value=\"[]\"", ($_REQUEST['array'] == '[]') ? ' selected="selected"' : '', ">[ ]</option>\n";					echo "</select></td>\n";					$predefined_size_types = array_intersect($data->predefined_size_types, $types_for_js);					foreach($predefined_size_types as $value) {						$escaped_predef_types[] = "'{$value}'";					}						echo "<td><input name=\"length\" id=\"lengths\" size=\"8\" value=\"",						htmlspecialchars($_REQUEST['length']), "\" /></td>\n";				} else {					// Otherwise draw the read-only type name					echo "<td>", $misc->printVal($data->formatType($column->fields['type'], $column->fields['atttypmod'])), "</td>\n";				}								echo "<td><input type=\"checkbox\" name=\"notnull\"", (isset($_REQUEST['notnull'])) ? ' checked="checked"' : '', " /></td>\n";				echo "<td><input name=\"default\" size=\"20\" value=\"", 					htmlspecialchars($_REQUEST['default']), "\" /></td>\n";				echo "<td><input name=\"comment\" size=\"40\" value=\"", 					htmlspecialchars($_REQUEST['comment']), "\" /></td></tr>\n";				echo "</table>\n";				echo "<p><input type=\"hidden\" name=\"action\" value=\"properties\" />\n";				echo "<input type=\"hidden\" name=\"stage\" value=\"2\" />\n";				echo $misc->form;				echo "<input type=\"hidden\" name=\"table\" value=\"", htmlspecialchars($_REQUEST['table']), "\" />\n";				echo "<input type=\"hidden\" name=\"column\" value=\"", htmlspecialchars($_REQUEST['column']), "\" />\n";				echo "<input type=\"hidden\" name=\"olddefault\" value=\"", htmlspecialchars($_REQUEST['olddefault']), "\" />\n";				if ($column->fields['attnotnull']) echo "<input type=\"hidden\" name=\"oldnotnull\" value=\"on\" />\n";				echo "<input type=\"hidden\" name=\"oldtype\" value=\"", htmlspecialchars($data->formatType($column->fields['type'], $column->fields['atttypmod'])), "\" />\n";				// Add hidden variables to suppress error notices if we don't support altering column type				if (!$data->hasAlterColumnType()) {					echo "<input type=\"hidden\" name=\"type\" value=\"", htmlspecialchars($_REQUEST['type']), "\" />\n";									echo "<input type=\"hidden\" name=\"length\" value=\"", htmlspecialchars($_REQUEST['length']), "\" />\n";									echo "<input type=\"hidden\" name=\"array\" value=\"", htmlspecialchars($_REQUEST['array']), "\" />\n";								}				echo "<input type=\"submit\" value=\"{$lang['stralter']}\" />\n";				echo "<input type=\"submit\" name=\"cancel\" value=\"{$lang['strcancel']}\" /></p>\n";				echo "</form>\n";				echo "<script type=\"text/javascript\">predefined_lengths = new Array(". implode(",",$escaped_predef_types) .");checkLengths(document.getElementById('type').value,'');</script>\n";						break;			case 2:				// Check inputs				if (trim($_REQUEST['field']) == '') {					$_REQUEST['stage'] = 1;					doAlter($lang['strcolneedsname']);					return;				}				if (!isset($_REQUEST['length'])) $_REQUEST['length'] = '';				$status = $data->alterColumn($_REQUEST['table'], $_REQUEST['column'], $_REQUEST['field'], 							     isset($_REQUEST['notnull']), isset($_REQUEST['oldnotnull']), 							     $_REQUEST['default'], $_REQUEST['olddefault'],							     $_REQUEST['type'], $_REQUEST['length'], $_REQUEST['array'], $_REQUEST['oldtype'],							     $_REQUEST['comment']);				if ($status == 0) {					if ($_REQUEST['column'] != $_REQUEST['field']) {						$_REQUEST['column'] = $_REQUEST['field'];						$_reload_browser = true;					}					doDefault($lang['strcolumnaltered']);				}				else {					$_REQUEST['stage'] = 1;					doAlter($lang['strcolumnalteredbad']);					return;				}				break;			default:				echo "<p>{$lang['strinvalidparam']}</p>\n";		}	}	/**	 * Show default list of columns in the table	 */	function doDefault($msg = '', $isTable = true) {		global $data, $conf, $misc, $tableName;		global $lang;		function attPre(&$rowdata) {			global $data;			$rowdata->fields['+type'] = $data->formatType($rowdata->fields['type'], $rowdata->fields['atttypmod']);		}				if (empty($_REQUEST['column']))			$msg.= "<br/>{$lang['strnoobjects']}";					$misc->printTrail('column');			//$misc->printTitle($lang['strcolprop']);			$misc->printTabs('column','properties');			$misc->printMsg($msg);		if (! empty($_REQUEST['column'])) {			// Get table			$tdata = $data->getTable($tableName);			// Get columns			$attrs = $data->getTableAttributes($tableName, $_REQUEST['column']);			// Show comment if any			if ($attrs->fields['comment'] !== null)				echo "<p class=\"comment\">", $misc->printVal($attrs->fields['comment']), "</p>\n";			$column = array(				'column' => array(					'title' => $lang['strcolumn'],					'field' => field('attname'),				),				'type' => array(					'title' => $lang['strtype'],					'field' => field('+type'),				)			);					if ($isTable) {				$column['notnull'] = array(					'title' => $lang['strnotnull'],					'field' => field('attnotnull'),					'type'  => 'bool',					'params'=> array('true' => 'NOT NULL', 'false' => '')				);				$column['default'] = array(					'title' => $lang['strdefault'],					'field' => field('adsrc'),				);			}			$actions=array();			$misc->printTable($attrs, $column, $actions, null, 'attPre');			echo "<br />\n";			echo "<ul class=\"navlink\">\n";			$f_attname = $_REQUEST['column'];			$f_table = $tableName;			$f_schema = $data->_schema;			$data->fieldClean($f_attname);			$data->fieldClean($f_table);			$data->fieldClean($f_schema);			$query_url = urlencode("SELECT \"{$f_attname}\", count(*) AS \"count\" FROM \"{$f_schema}\".\"{$f_table}\" GROUP BY \"{$f_attname}\" ORDER BY \"{$f_attname}\"") ;			if ($isTable) {				$return_url = urlencode("colproperties.php?{$misc->href}&amp;table=". urlencode($tableName)					."&amp;column=". urlencode($_REQUEST['column']));				/* Browse link */				/* FIXME browsing a col should somehow be a action so we don't				 * send an ugly SQL in the URL */				echo "\t<li><a href=\"display.php?{$misc->href}&amp;subject=column&amp;table=",					urlencode($_REQUEST['table']),					"&amp;column=", urlencode($_REQUEST['column']),					"&amp;return_url={$return_url}&amp;return_desc=", urlencode($lang['strback']), 					"&amp;query={$query_url}\">{$lang['strbrowse']}</a></li>\n";				/* Edit link */				echo "\t<li><a href=\"colproperties.php?action=properties&amp;{$misc->href}&amp;table=", urlencode($tableName),				    "&amp;column=", urlencode($_REQUEST['column']) . "\">{$lang['stralter']}</a></li>\n";									echo "\t<li><a href=\"tblproperties.php?action=confirm_drop&amp;{$misc->href}&amp;table=", urlencode($tableName),						"&amp;column=" . urlencode($_REQUEST['column']) . "\">{$lang['strdrop']}</a></li>\n";			} else {				$return_url = urlencode("colproperties.php?{$misc->href}&amp;view=". urlencode($tableName)					."&amp;column=". urlencode($_REQUEST['column']));				/* Browse link */				echo "\t<li><a href=\"display.php?{$misc->href}&amp;subject=column&amp;column=",					urlencode($_REQUEST['column']), "&amp;return_url={$return_url}&amp;return_desc=", urlencode($lang['strback']),					"&amp;query={$query_url}\">{$lang['strbrowse']}</a></li>\n";			}			echo "</ul>\n";		}	}	$misc->printHeader($lang['strtables'] . ' - ' . $tableName);	$misc->printBody();	if (isset($_REQUEST['view']))		doDefault(null, false);	else		switch ($action) {			case 'properties':				if (isset($_POST['cancel'])) doDefault();				else doAlter();				break;			default:				doDefault();				break;		}		$misc->printFooter();?>
<?php	/**	 * Manage roles in a database cluster	 *	 * $Id: roles.php,v 1.13 2008/03/21 15:32:57 xzilla Exp $	 */	// Include application functions	include_once('./libraries/lib.inc.php');	$action = (isset($_REQUEST['action'])) ? $_REQUEST['action'] : '';	if (!isset($msg)) $msg = '';		/**	 * Displays a screen for create a new role	 */	function doCreate($msg = '') {		global $data, $misc, $username;		global $lang;				if (!isset($_POST['formRolename'])) $_POST['formRolename'] = '';		if (!isset($_POST['formPassword'])) $_POST['formPassword'] = '';		if (!isset($_POST['formConfirm'])) $_POST['formConfirm'] = '';		if (!isset($_POST['formConnLimit'])) $_POST['formConnLimit'] = '';		if (!isset($_POST['formExpires'])) $_POST['formExpires'] = '';		if (!isset($_POST['memberof'])) $_POST['memberof'] = array();		if (!isset($_POST['members'])) $_POST['members'] = array();		if (!isset($_POST['adminmembers'])) $_POST['adminmembers'] = array();			$misc->printTrail('role');		$misc->printTitle($lang['strcreaterole'],'pg.role.create');		$misc->printMsg($msg);		echo "<form action=\"roles.php\" method=\"post\">\n";		echo "<table>\n";		echo "\t<tr>\n\t\t<th class=\"data left required\" style=\"width: 130px\">{$lang['strname']}</th>\n";		echo "\t\t<td class=\"data1\"><input size=\"15\" maxlength=\"{$data->_maxNameLen}\" name=\"formRolename\" value=\"", htmlspecialchars($_POST['formRolename']), "\" /></td>\n\t</tr>\n";		echo "\t<tr>\n\t\t<th class=\"data left\">{$lang['strpassword']}</th>\n";		echo "\t\t<td class=\"data1\"><input size=\"15\" type=\"password\" name=\"formPassword\" value=\"", htmlspecialchars($_POST['formPassword']), "\" /></td>\n\t</tr>\n";		echo "\t<tr>\n\t\t<th class=\"data left\">{$lang['strconfirm']}</th>\n";		echo "\t\t<td class=\"data1\"><input size=\"15\" type=\"password\" name=\"formConfirm\" value=\"", htmlspecialchars($_POST['formConfirm']), "\" /></td>\n\t</tr>\n";		echo "\t<tr>\n\t\t<th class=\"data left\"><label for=\"formSuper\">{$lang['strsuper']}</label></th>\n";		echo "\t\t<td class=\"data1\"><input type=\"checkbox\" id=\"formSuper\" name=\"formSuper\"", 			(isset($_POST['formSuper'])) ? ' checked="checked"' : '', " /></td>\n\t</tr>\n";		echo "\t<tr>\n\t\t<th class=\"data left\"><label for=\"formCreateDB\">{$lang['strcreatedb']}</label></th>\n";		echo "\t\t<td class=\"data1\"><input type=\"checkbox\" id=\"formCreateDB\" name=\"formCreateDB\"", 			(isset($_POST['formCreateDB'])) ? ' checked="checked"' : '', " /></td>\n\t</tr>\n";		echo "\t<tr>\n\t\t<th class=\"data left\"><label for=\"formCreateRole\">{$lang['strcancreaterole']}</label></th>\n";		echo "\t\t<td class=\"data1\"><input type=\"checkbox\" id=\"formCreateRole\" name=\"formCreateRole\"", 			(isset($_POST['formCreateRole'])) ? ' checked="checked"' : '', " /></td>\n\t</tr>\n";		echo "\t<tr>\n\t\t<th class=\"data left\"><label for=\"formInherits\">{$lang['strinheritsprivs']}</label></th>\n";		echo "\t\t<td class=\"data1\"><input type=\"checkbox\" id=\"formInherits\" name=\"formInherits\"", 			(isset($_POST['formInherits'])) ? ' checked="checked"' : '', " /></td>\n\t</tr>\n";		echo "\t<tr>\n\t\t<th class=\"data left\"><label for=\"formCanLogin\">{$lang['strcanlogin']}</label></th>\n";		echo "\t\t<td class=\"data1\"><input type=\"checkbox\" id=\"formCanLogin\" name=\"formCanLogin\"", 			(isset($_POST['formCanLogin'])) ? ' checked="checked"' : '', " /></td>\n\t</tr>\n";					echo "\t<tr>\n\t\t<th class=\"data left\">{$lang['strconnlimit']}</th>\n";		echo "\t\t<td class=\"data1\"><input size=\"4\" name=\"formConnLimit\" value=\"", htmlspecialchars($_POST['formConnLimit']), "\" /></td>\n\t</tr>\n";		echo "\t<tr>\n\t\t<th class=\"data left\">{$lang['strexpires']}</th>\n";		echo "\t\t<td class=\"data1\"><input size=\"23\" name=\"formExpires\" value=\"", htmlspecialchars($_POST['formExpires']), "\" /></td>\n\t</tr>\n";				$roles = $data->getRoles();		if ($roles->recordCount() > 0) {			echo "\t<tr>\n\t\t<th class=\"data left\">{$lang['strmemberof']}</th>\n";			echo "\t\t<td class=\"data\">\n";			echo "\t\t\t<select name=\"memberof[]\" multiple=\"multiple\" size=\"", min(20, $roles->recordCount()), "\">\n";			while (!$roles->EOF) {				$rolename = $roles->fields['rolname'];				echo "\t\t\t\t<option value=\"{$rolename}\"",				(in_array($rolename, $_POST['memberof']) ? ' selected="selected"' : ''), ">", $misc->printVal($rolename), "</option>\n";				$roles->moveNext();			}			echo "\t\t\t</select>\n";			echo "\t\t</td>\n\t</tr>\n";						$roles->moveFirst();			echo "\t<tr>\n\t\t<th class=\"data left\">{$lang['strmembers']}</th>\n";			echo "\t\t<td class=\"data\">\n";			echo "\t\t\t<select name=\"members[]\" multiple=\"multiple\" size=\"", min(20, $roles->recordCount()), "\">\n";			while (!$roles->EOF) {				$rolename = $roles->fields['rolname'];				echo "\t\t\t\t<option value=\"{$rolename}\"",				(in_array($rolename, $_POST['members']) ? ' selected="selected"' : ''), ">", $misc->printVal($rolename), "</option>\n";				$roles->moveNext();			}			echo "\t\t\t</select>\n";			echo "\t\t</td>\n\t</tr>\n";			$roles->moveFirst();			echo "\t<tr>\n\t\t<th class=\"data left\">{$lang['stradminmembers']}</th>\n";			echo "\t\t<td class=\"data\">\n";			echo "\t\t\t<select name=\"adminmembers[]\" multiple=\"multiple\" size=\"", min(20, $roles->recordCount()), "\">\n";			while (!$roles->EOF) {				$rolename = $roles->fields['rolname'];				echo "\t\t\t\t<option value=\"{$rolename}\"",				(in_array($rolename, $_POST['adminmembers']) ? ' selected="selected"' : ''), ">", $misc->printVal($rolename), "</option>\n";				$roles->moveNext();			}			echo "\t\t\t</select>\n";			echo "\t\t</td>\n\t</tr>\n";		}				echo "</table>\n";		echo "<p><input type=\"hidden\" name=\"action\" value=\"save_create\" />\n";		echo $misc->form;		echo "<input type=\"submit\" name=\"create\" value=\"{$lang['strcreate']}\" />\n";		echo "<input type=\"submit\" name=\"cancel\" value=\"{$lang['strcancel']}\" /></p>\n";		echo "</form>\n";	}		/**	 * Actually creates the new role in the database	 */	function doSaveCreate() {		global $data, $lang;		if(!isset($_POST['memberof'])) $_POST['memberof'] = array();		if(!isset($_POST['members'])) $_POST['members'] = array();		if(!isset($_POST['adminmembers'])) $_POST['adminmembers'] = array();				// Check data		if ($_POST['formRolename'] == '')			doCreate($lang['strroleneedsname']);		else if ($_POST['formPassword'] != $_POST['formConfirm'])			doCreate($lang['strpasswordconfirm']);		else {					$status = $data->createRole($_POST['formRolename'], $_POST['formPassword'], isset($_POST['formSuper']), 				isset($_POST['formCreateDB']), isset($_POST['formCreateRole']), isset($_POST['formInherits']), 				isset($_POST['formCanLogin']), $_POST['formConnLimit'], $_POST['formExpires'], $_POST['memberof'], $_POST['members'],				$_POST['adminmembers']);			if ($status == 0)				doDefault($lang['strrolecreated']);			else				doCreate($lang['strrolecreatedbad']);		}	}		/**	 * Function to allow alter a role	 */	function doAlter($msg = '') {		global $data, $misc;		global $lang;		$misc->printTrail('role');		$misc->printTitle($lang['stralter'],'pg.role.alter');		$misc->printMsg($msg);						$roledata = $data->getRole($_REQUEST['rolename']);				if ($roledata->recordCount() > 0) {			$server_info = $misc->getServerInfo();			$canRename = $data->hasUserRename() && ($_REQUEST['rolename'] != $server_info['username']);			$roledata->fields['rolsuper'] = $data->phpBool($roledata->fields['rolsuper']);			$roledata->fields['rolcreatedb'] = $data->phpBool($roledata->fields['rolcreatedb']);			$roledata->fields['rolcreaterole'] = $data->phpBool($roledata->fields['rolcreaterole']);			$roledata->fields['rolinherit'] = $data->phpBool($roledata->fields['rolinherit']);			$roledata->fields['rolcanlogin'] = $data->phpBool($roledata->fields['rolcanlogin']);			if (!isset($_POST['formExpires'])){				if ($canRename) $_POST['formNewRoleName'] = $roledata->fields['rolname'];				if ($roledata->fields['rolsuper']) $_POST['formSuper'] = '';				if ($roledata->fields['rolcreatedb']) $_POST['formCreateDB'] = '';				if ($roledata->fields['rolcreaterole']) $_POST['formCreateRole'] = '';				if ($roledata->fields['rolinherit']) $_POST['formInherits'] = '';				if ($roledata->fields['rolcanlogin']) $_POST['formCanLogin'] = '';				$_POST['formConnLimit'] = $roledata->fields['rolconnlimit'] == '-1' ? '' : $roledata->fields['rolconnlimit'];				$_POST['formExpires'] = $roledata->fields['rolvaliduntil'] == 'infinity' ? '' : $roledata->fields['rolvaliduntil'];				$_POST['formPassword'] = '';			}					echo "<form action=\"roles.php\" method=\"post\">\n";			echo "<table>\n";			echo "\t<tr>\n\t\t<th class=\"data left\" style=\"width: 130px\">{$lang['strname']}</th>\n";			echo "\t\t<td class=\"data1\">", ($canRename ? "<input name=\"formNewRoleName\" size=\"15\" maxlength=\"{$data->_maxNameLen}\" value=\"" . htmlspecialchars($_POST['formNewRoleName']) . "\" />" : $misc->printVal($roledata->fields['rolname'])), "</td>\n\t</tr>\n";			echo "\t<tr>\n\t\t<th class=\"data left\">{$lang['strpassword']}</th>\n";			echo "\t\t<td class=\"data1\"><input type=\"password\" size=\"15\" name=\"formPassword\" value=\"", htmlspecialchars($_POST['formPassword']), "\" /></td>\n\t</tr>\n";			echo "\t<tr>\n\t\t<th class=\"data left\">{$lang['strconfirm']}</th>\n";			echo "\t\t<td class=\"data1\"><input type=\"password\" size=\"15\" name=\"formConfirm\" value=\"\" /></td>\n\t</tr>\n";			echo "\t<tr>\n\t\t<th class=\"data left\"><label for=\"formSuper\">{$lang['strsuper']}</label></th>\n";			echo "\t\t<td class=\"data1\"><input type=\"checkbox\" id=\"formSuper\" name=\"formSuper\"", 				(isset($_POST['formSuper'])) ? ' checked="checked"' : '', " /></td>\n\t</tr>\n";			echo "\t<tr>\n\t\t<th class=\"data left\"><label for=\"formCreateDB\">{$lang['strcreatedb']}</label></th>\n";			echo "\t\t<td class=\"data1\"><input type=\"checkbox\" id=\"formCreateDB\" name=\"formCreateDB\"", 				(isset($_POST['formCreateDB'])) ? ' checked="checked"' : '', " /></td>\n\t</tr>\n";			echo "\t<tr>\n\t\t<th class=\"data left\"><label for=\"formCreateRole\">{$lang['strcancreaterole']}</label></th>\n";			echo "\t\t<td class=\"data1\"><input type=\"checkbox\" id=\"formCreateRole\" name=\"formCreateRole\"", 				(isset($_POST['formCreateRole'])) ? ' checked="checked"' : '', " /></td>\n\t</tr>\n";			echo "\t<tr>\n\t\t<th class=\"data left\"><label for=\"formInherits\">{$lang['strinheritsprivs']}</label></th>\n";			echo "\t\t<td class=\"data1\"><input type=\"checkbox\" id=\"formInherits\" name=\"formInherits\"", 				(isset($_POST['formInherits'])) ? ' checked="checked"' : '', " /></td>\n\t</tr>\n";			echo "\t<tr>\n\t\t<th class=\"data left\"><label for=\"formCanLogin\">{$lang['strcanlogin']}</label></th>\n";			echo "\t\t<td class=\"data1\"><input type=\"checkbox\" id=\"formCanLogin\" name=\"formCanLogin\"", 				(isset($_POST['formCanLogin'])) ? ' checked="checked"' : '', " /></td>\n\t</tr>\n";			echo "\t<tr>\n\t\t<th class=\"data left\">{$lang['strconnlimit']}</th>\n";			echo "\t\t<td class=\"data1\"><input size=\"4\" name=\"formConnLimit\" value=\"", htmlspecialchars($_POST['formConnLimit']), "\" /></td>\n\t</tr>\n";			echo "\t<tr>\n\t\t<th class=\"data left\">{$lang['strexpires']}</th>\n";			echo "\t\t<td class=\"data1\"><input size=\"23\" name=\"formExpires\" value=\"", htmlspecialchars($_POST['formExpires']), "\" /></td>\n\t</tr>\n";			if (!isset($_POST['memberof']))			{				$memberof = $data->getMemberOf($_REQUEST['rolename']);				if ($memberof->recordCount() > 0) {					$i = 0;					while (!$memberof->EOF) {						$_POST['memberof'][$i++] = $memberof->fields['rolname'];						$memberof->moveNext();					}				}				else					$_POST['memberof'] = array();				$memberofold = implode(',', $_POST['memberof']);			}			if (!isset($_POST['members']))			{				$members = $data->getMembers($_REQUEST['rolename']);				if ($members->recordCount() > 0) {					$i = 0;					while (!$members->EOF) {						$_POST['members'][$i++] = $members->fields['rolname'];						$members->moveNext();					}				}				else					$_POST['members'] = array();				$membersold = implode(',', $_POST['members']);			}			if (!isset($_POST['adminmembers']))			{				$adminmembers = $data->getMembers($_REQUEST['rolename'], 't');				if ($adminmembers->recordCount() > 0) {					$i = 0;					while (!$adminmembers->EOF) {						$_POST['adminmembers'][$i++] = $adminmembers->fields['rolname'];						$adminmembers->moveNext();					}				}				else					$_POST['adminmembers'] = array();				$adminmembersold = implode(',', $_POST['adminmembers']);			}						$roles = $data->getRoles($_REQUEST['rolename']);			if ($roles->recordCount() > 0) {				echo "\t<tr>\n\t\t<th class=\"data left\">{$lang['strmemberof']}</th>\n";				echo "\t\t<td class=\"data\">\n";				echo "\t\t\t<select name=\"memberof[]\" multiple=\"multiple\" size=\"", min(20, $roles->recordCount()), "\">\n";				while (!$roles->EOF) {					$rolename = $roles->fields['rolname'];					echo "\t\t\t\t<option value=\"{$rolename}\"",					(in_array($rolename, $_POST['memberof']) ? ' selected="selected"' : ''), ">", $misc->printVal($rolename), "</option>\n";					$roles->moveNext();				}				echo "\t\t\t</select>\n";				echo "\t\t</td>\n\t</tr>\n";							$roles->moveFirst();				echo "\t<tr>\n\t\t<th class=\"data left\">{$lang['strmembers']}</th>\n";				echo "\t\t<td class=\"data\">\n";				echo "\t\t\t<select name=\"members[]\" multiple=\"multiple\" size=\"", min(20, $roles->recordCount()), "\">\n";				while (!$roles->EOF) {					$rolename = $roles->fields['rolname'];					echo "\t\t\t\t<option value=\"{$rolename}\"",					(in_array($rolename, $_POST['members']) ? ' selected="selected"' : ''), ">", $misc->printVal($rolename), "</option>\n";					$roles->moveNext();				}				echo "\t\t\t</select>\n";				echo "\t\t</td>\n\t</tr>\n";				$roles->moveFirst();				echo "\t<tr>\n\t\t<th class=\"data left\">{$lang['stradminmembers']}</th>\n";				echo "\t\t<td class=\"data\">\n";				echo "\t\t\t<select name=\"adminmembers[]\" multiple=\"multiple\" size=\"", min(20, $roles->recordCount()), "\">\n";				while (!$roles->EOF) {					$rolename = $roles->fields['rolname'];					echo "\t\t\t\t<option value=\"{$rolename}\"",					(in_array($rolename, $_POST['adminmembers']) ? ' selected="selected"' : ''), ">", $misc->printVal($rolename), "</option>\n";					$roles->moveNext();				}				echo "\t\t\t</select>\n";				echo "\t\t</td>\n\t</tr>\n";			}			echo "</table>\n";			echo "<p><input type=\"hidden\" name=\"action\" value=\"save_alter\" />\n";			echo "<input type=\"hidden\" name=\"rolename\" value=\"", htmlspecialchars($_REQUEST['rolename']), "\" />\n";			echo "<input type=\"hidden\" name=\"memberofold\" value=\"", isset($_POST['memberofold']) ? $_POST['memberofold'] : htmlspecialchars($memberofold), "\" />\n";			echo "<input type=\"hidden\" name=\"membersold\" value=\"", isset($_POST['membersold']) ? $_POST['membersold'] : htmlspecialchars($membersold), "\" />\n";			echo "<input type=\"hidden\" name=\"adminmembersold\" value=\"", isset($_POST['adminmembersold']) ? $_POST['adminmembersold'] : htmlspecialchars($adminmembersold), "\" />\n";			echo $misc->form;			echo "<input type=\"submit\" name=\"alter\" value=\"{$lang['stralter']}\" />\n";			echo "<input type=\"submit\" name=\"cancel\" value=\"{$lang['strcancel']}\" /></p>\n";			echo "</form>\n";		}		else echo "<p>{$lang['strnodata']}</p>\n";	}		/** 	 * Function to save after editing a role	 */	function doSaveAlter() {		global $data, $lang;		if(!isset($_POST['memberof'])) $_POST['memberof'] = array();		if(!isset($_POST['members'])) $_POST['members'] = array();		if(!isset($_POST['adminmembers'])) $_POST['adminmembers'] = array();		// Check name and password		if (isset($_POST['formNewRoleName']) && $_POST['formNewRoleName'] == '')			doAlter($lang['strroleneedsname']);		else if ($_POST['formPassword'] != $_POST['formConfirm'])			doAlter($lang['strpasswordconfirm']);		else {			if (isset($_POST['formNewRoleName'])) $status = $data->setRenameRole($_POST['rolename'], $_POST['formPassword'], isset($_POST['formSuper']), isset($_POST['formCreateDB']), isset($_POST['formCreateRole']), isset($_POST['formInherits']), isset($_POST['formCanLogin']), $_POST['formConnLimit'], $_POST['formExpires'], $_POST['memberof'], $_POST['members'], $_POST['adminmembers'], $_POST['memberofold'], $_POST['membersold'], $_POST['adminmembersold'], $_POST['formNewRoleName']);			else $status = $data->setRole($_POST['rolename'], $_POST['formPassword'], isset($_POST['formSuper']), isset($_POST['formCreateDB']), isset($_POST['formCreateRole']), isset($_POST['formInherits']), isset($_POST['formCanLogin']), $_POST['formConnLimit'], $_POST['formExpires'], $_POST['memberof'], $_POST['members'], $_POST['adminmembers'], $_POST['memberofold'], $_POST['membersold'], $_POST['adminmembersold']);			if ($status == 0)				doDefault($lang['strrolealtered']);			else				doAlter($lang['strrolealteredbad']);		}	}	/**	 * Show confirmation of drop a role and perform actual drop	 */	function doDrop($confirm) {		global $data, $misc;		global $lang;		if ($confirm) {			$misc->printTrail('role');			$misc->printTitle($lang['strdroprole'],'pg.role.drop');						echo "<p>", sprintf($lang['strconfdroprole'], $misc->printVal($_REQUEST['rolename'])), "</p>\n";							echo "<form action=\"roles.php\" method=\"post\">\n";			echo "<p><input type=\"hidden\" name=\"action\" value=\"drop\" />\n";			echo "<input type=\"hidden\" name=\"rolename\" value=\"", htmlspecialchars($_REQUEST['rolename']), "\" />\n";			echo $misc->form;			echo "<input type=\"submit\" name=\"drop\" value=\"{$lang['strdrop']}\" />\n";			echo "<input type=\"submit\" name=\"cancel\" value=\"{$lang['strcancel']}\" /></p>\n";			echo "</form>\n";		}		else {			$status = $data->dropRole($_REQUEST['rolename']);			if ($status == 0)				doDefault($lang['strroledropped']);			else				doDefault($lang['strroledroppedbad']);		}			}		/**	 * Show the properties of a role	 */	function doProperties($msg = '') {		global $data, $misc;		global $lang;		$misc->printTrail('role');		$misc->printTitle($lang['strproperties'],'pg.role');		$misc->printMsg($msg);					$roledata = $data->getRole($_REQUEST['rolename']);		if($roledata->recordCount() > 0 ) {			$roledata->fields['rolsuper'] = $data->phpBool($roledata->fields['rolsuper']);			$roledata->fields['rolcreatedb'] = $data->phpBool($roledata->fields['rolcreatedb']);			$roledata->fields['rolcreaterole'] = $data->phpBool($roledata->fields['rolcreaterole']);			$roledata->fields['rolinherit'] = $data->phpBool($roledata->fields['rolinherit']);			$roledata->fields['rolcanlogin'] = $data->phpBool($roledata->fields['rolcanlogin']);			echo "<table>\n";			echo "\t<tr>\n\t\t<th class=\"data\" style=\"width: 130px\">Description</th>\n";			echo "\t\t<th class=\"data\" style=\"width: 120\">Value</th>\n\t</tr>\n";			echo "\t<tr>\n\t\t<td class=\"data1\">{$lang['strname']}</td>\n";			echo "\t\t<td class=\"data1\">", htmlspecialchars($_REQUEST['rolename']), "</td>\n\t</tr>\n";			echo "\t<tr>\n\t\t<td class=\"data2\">{$lang['strsuper']}</td>\n";			echo "\t\t<td class=\"data2\">", (($roledata->fields['rolsuper']) ? $lang['stryes'] : $lang['strno']), "</td>\n\t</tr>\n";			echo "\t<tr>\n\t\t<td class=\"data1\">{$lang['strcreatedb']}</td>\n";			echo "\t\t<td class=\"data1\">", (($roledata->fields['rolcreatedb']) ? $lang['stryes'] : $lang['strno']), "</td>\n";			echo "\t<tr>\n\t\t<td class=\"data2\">{$lang['strcancreaterole']}</td>\n";			echo "\t\t<td class=\"data2\">", (($roledata->fields['rolcreaterole']) ? $lang['stryes'] : $lang['strno']), "</td>\n";			echo "\t<tr>\n\t\t<td class=\"data1\">{$lang['strinheritsprivs']}</td>\n";			echo "\t\t<td class=\"data1\">", (($roledata->fields['rolinherit']) ? $lang['stryes'] : $lang['strno']), "</td>\n";			echo "\t<tr>\n\t\t<td class=\"data2\">{$lang['strcanlogin']}</td>\n";			echo "\t\t<td class=\"data2\">", (($roledata->fields['rolcanlogin']) ? $lang['stryes'] : $lang['strno']), "</td>\n";			echo "\t<tr>\n\t\t<td class=\"data1\">{$lang['strconnlimit']}</td>\n";			echo "\t\t<td class=\"data1\">", ($roledata->fields['rolconnlimit'] == '-1' ? $lang['strnolimit'] : $misc->printVal($roledata->fields['rolconnlimit'])), "</td>\n";			echo "\t<tr>\n\t\t<td class=\"data2\">{$lang['strexpires']}</td>\n";			echo "\t\t<td class=\"data2\">", ($roledata->fields['rolvaliduntil'] == 'infinity' || is_null($roledata->fields['rolvaliduntil']) ? $lang['strnever'] : $misc->printVal($roledata->fields['rolvaliduntil'])), "</td>\n";			echo "\t<tr>\n\t\t<td class=\"data1\">{$lang['strsessiondefaults']}</td>\n";			echo "\t\t<td class=\"data1\">", $misc->printVal($roledata->fields['rolconfig']), "</td>\n";			echo "\t<tr>\n\t\t<td class=\"data2\">{$lang['strmemberof']}</td>\n";			echo "\t\t<td class=\"data2\">";			$memberof = $data->getMemberOf($_REQUEST['rolename']);			if ($memberof->recordCount() > 0) {					while (!$memberof->EOF) {					echo $misc->printVal($memberof->fields['rolname']), "<br />\n";					$memberof->moveNext();				}			}			echo "</td>\n\t</tr>\n";			echo "\t<tr>\n\t\t<td class=\"data1\">{$lang['strmembers']}</td>\n";			echo "\t\t<td class=\"data1\">";			$members = $data->getMembers($_REQUEST['rolename']);			if ($members->recordCount() > 0) {				while (!$members->EOF) {					echo $misc->printVal($members->fields['rolname']), "<br />\n";					$members->moveNext();				}			}			echo "</td>\n\t</tr>\n";			echo "\t<tr>\n\t\t<td class=\"data2\">{$lang['stradminmembers']}</td>\n";			echo "\t\t<td class=\"data2\">";			$adminmembers = $data->getMembers($_REQUEST['rolename'], 't');			if ($adminmembers->recordCount() > 0) {				while (!$adminmembers->EOF) {					echo $misc->printVal($adminmembers->fields['rolname']), "<br />\n";					$adminmembers->moveNext();				}			}			echo "</td>\n\t</tr>\n";			echo "</table>\n";		}		else echo "<p>{$lang['strnodata']}</p>\n";		echo "<ul class=\"navlink\">\n\t<li><a href=\"roles.php?{$misc->href}\">{$lang['strshowallroles']}</a></li>\n";		echo "\t<li><a href=\"roles.php?action=alter&amp;{$misc->href}&amp;rolename=", 			urlencode($_REQUEST['rolename']), "\">{$lang['stralter']}</a></li>\n";		echo "\t<li><a href=\"roles.php?action=confirm_drop&amp;{$misc->href}&amp;rolename=",			urlencode($_REQUEST['rolename']), "\">{$lang['strdrop']}</li>\n</ul>\n";	}	/**	 * If a role is not a superuser role, then we have an 'account management'	 * page for change his password, etc.  We don't prevent them from	 * messing with the URL to gain access to other role admin stuff, because	 * the PostgreSQL permissions will prevent them changing anything anyway.	 */	function doAccount($msg = '') {		global $data, $misc;		global $lang;				$server_info = $misc->getServerInfo();				$roledata = $data->getRole($server_info['username']);		$_REQUEST['rolename'] = $server_info['username'];				$misc->printTrail('role');		$misc->printTabs('server','account');		$misc->printMsg($msg);		if ($roledata->recordCount() > 0) {			$roledata->fields['rolsuper'] = $data->phpBool($roledata->fields['rolsuper']);			$roledata->fields['rolcreatedb'] = $data->phpBool($roledata->fields['rolcreatedb']);			$roledata->fields['rolcreaterole'] = $data->phpBool($roledata->fields['rolcreaterole']);			$roledata->fields['rolinherit'] = $data->phpBool($roledata->fields['rolinherit']);			echo "<table>\n";			echo "\t<tr>\n\t\t<th class=\"data\">{$lang['strname']}</th>\n";			echo "\t\t<th class=\"data\">{$lang['strsuper']}</th>\n";			echo "\t\t<th class=\"data\">{$lang['strcreatedb']}</th>\n";			echo "\t\t<th class=\"data\">{$lang['strcancreaterole']}</th>\n";			echo "\t\t<th class=\"data\">{$lang['strinheritsprivs']}</th>\n";			echo "\t\t<th class=\"data\">{$lang['strconnlimit']}</th>\n";			echo "\t\t<th class=\"data\">{$lang['strexpires']}</th>\n";			echo "\t\t<th class=\"data\">{$lang['strsessiondefaults']}</th>\n";			echo "\t</tr>\n";			echo "\t<tr>\n\t\t<td class=\"data1\">", $misc->printVal($roledata->fields['rolname']), "</td>\n";			echo "\t\t<td class=\"data1\">", $misc->printVal($roledata->fields['rolsuper'], 'yesno'), "</td>\n";			echo "\t\t<td class=\"data1\">", $misc->printVal($roledata->fields['rolcreatedb'], 'yesno'), "</td>\n";			echo "\t\t<td class=\"data1\">", $misc->printVal($roledata->fields['rolcreaterole'], 'yesno'), "</td>\n";			echo "\t\t<td class=\"data1\">", $misc->printVal($roledata->fields['rolinherit'], 'yesno'), "</td>\n";			echo "\t\t<td class=\"data1\">", ($roledata->fields['rolconnlimit'] == '-1' ? $lang['strnolimit'] : $misc->printVal($roledata->fields['rolconnlimit'])), "</td>\n";			echo "\t\t<td class=\"data1\">", ($roledata->fields['rolvaliduntil'] == 'infinity' || is_null($roledata->fields['rolvaliduntil']) ? $lang['strnever'] : $misc->printVal($roledata->fields['rolvaliduntil'])), "</td>\n";			echo "\t\t<td class=\"data1\">", $misc->printVal($roledata->fields['rolconfig']), "</td>\n";			echo "\t</tr>\n</table>\n";		}		else echo "<p>{$lang['strnodata']}</p>\n";				echo "<p><a class=\"navlink\" href=\"roles.php?action=confchangepassword&amp;{$misc->href}\">{$lang['strchangepassword']}</a></p>\n";	}		/**	 * Show confirmation of change password and actually change password	 */	function doChangePassword($confirm, $msg = '') {		global $data, $misc;		global $lang, $conf;				$server_info = $misc->getServerInfo();				if ($confirm) {			$_REQUEST['rolename'] = $server_info['username'];			$misc->printTrail('role');			$misc->printTitle($lang['strchangepassword'],'pg.role.alter');			$misc->printMsg($msg);						if (!isset($_POST['password'])) $_POST['password'] = '';			if (!isset($_POST['confirm'])) $_POST['confirm'] = '';						echo "<form action=\"roles.php\" method=\"post\">\n";			echo "<table>\n";			echo "\t<tr>\n\t\t<th class=\"data left required\">{$lang['strpassword']}</th>\n";			echo "\t\t<td><input type=\"password\" name=\"password\" size=\"32\" value=\"", 				htmlspecialchars($_POST['password']), "\" /></td>\n\t</tr>\n";			echo "\t<tr>\n\t\t<th class=\"data left required\">{$lang['strconfirm']}</th>\n";			echo "\t\t<td><input type=\"password\" name=\"confirm\" size=\"32\" value=\"\" /></td>\n\t</tr>\n";			echo "</table>\n";			echo "<p><input type=\"hidden\" name=\"action\" value=\"changepassword\" />\n";			echo $misc->form;			echo "<input type=\"submit\" name=\"ok\" value=\"{$lang['strok']}\" />\n";			echo "<input type=\"submit\" name=\"cancel\" value=\"{$lang['strcancel']}\" />\n";			echo "</p></form>\n";		}		else {			// Check that password is minimum length			if (strlen($_POST['password']) < $conf['min_password_length'])				doChangePassword(true, $lang['strpasswordshort']);			// Check that password matches confirmation password			elseif ($_POST['password'] != $_POST['confirm'])				doChangePassword(true, $lang['strpasswordconfirm']);			else {				$status = $data->changePassword($server_info['username'], $_POST['password']);				if ($status == 0)					doAccount($lang['strpasswordchanged']);				else					doAccount($lang['strpasswordchangedbad']);			}		}			}	/**	 * Show default list of roles in the database	 */	function doDefault($msg = '') {		global $data, $misc;		global $lang;				function renderRoleConnLimit($val) {			global $lang;			return $val == '-1' ? $lang['strnolimit'] : htmlspecialchars($val); 		}				function renderRoleExpires($val) {			global $lang;			return $val == 'infinity' ? $lang['strnever'] : htmlspecialchars($val); 		}				$misc->printTrail('server');		$misc->printTabs('server','roles');		$misc->printMsg($msg);				$roles = $data->getRoles();				$columns = array(			'role' => array(				'title' => $lang['strrole'],				'field' => field('rolname'),				'url'   => "redirect.php?subject=role&amp;action=properties&amp;{$misc->href}&amp;",				'vars'  => array('rolename' => 'rolname'),			),			'superuser' => array(				'title' => $lang['strsuper'],				'field' => field('rolsuper'),				'type'  => 'yesno',			),			'createdb' => array(				'title' => $lang['strcreatedb'],				'field' => field('rolcreatedb'),				'type'  => 'yesno',			),			'createrole' => array(				'title' => $lang['strcancreaterole'],				'field' => field('rolcreaterole'),				'type'  => 'yesno',			),			'inherits' => array(				'title' => $lang['strinheritsprivs'],				'field' => field('rolinherit'),				'type'  => 'yesno',			),			'canloging' => array(				'title' => $lang['strcanlogin'],				'field' => field('rolcanlogin'),				'type'  => 'yesno',			),			'connlimit' => array(				'title'	=> $lang['strconnlimit'],				'field'	=> field('rolconnlimit'),				'type'	=> 'callback',				'params'=> array('function' => 'renderRoleConnLimit')			),			'expires' => array(				'title' => $lang['strexpires'],				'field' => field('rolvaliduntil'),				'type'  => 'callback',				'params'=> array('function' => 'renderRoleExpires', 'null' => $lang['strnever']),			),			'actions' => array(				'title' => $lang['stractions'],			),		);				$actions = array(			'alter' => array(				'title' => $lang['stralter'],				'url'   => "roles.php?action=alter&amp;{$misc->href}&amp;",				'vars'  => array('rolename' => 'rolname'),			),			'drop' => array(				'title' => $lang['strdrop'],				'url'   => "roles.php?action=confirm_drop&amp;{$misc->href}&amp;",				'vars'  => array('rolename' => 'rolname'),			),		);				$misc->printTable($roles, $columns, $actions, $lang['strnoroles']);		echo "<p><a class=\"navlink\" href=\"roles.php?action=create&amp;{$misc->href}\">{$lang['strcreaterole']}</a></p>\n";	}	$misc->printHeader($lang['strroles']);	$misc->printBody();	switch ($action) {		case 'create':			doCreate();			break;		case 'save_create':			if (isset($_POST['create'])) doSaveCreate();			else doDefault();			break;		case 'alter':			doAlter();			break;		case 'save_alter':			if (isset($_POST['alter'])) doSaveAlter();			else doDefault();			break;		case 'confirm_drop':			doDrop(true);			break;		case 'drop':			if (isset($_POST['drop'])) doDrop(false);			else doDefault();			break;		case 'properties':			doProperties();			break;		case 'confchangepassword':			doChangePassword(true);			break;					case 'changepassword':			if (isset($_REQUEST['ok'])) doChangePassword(false);			else doAccount();			break;		case 'account':			doAccount();			break;		default:			doDefault();	}		$misc->printFooter();?>
<?php	/**	 * Manage casts in a database	 *	 * $Id: casts.php,v 1.16 2007/09/25 16:08:05 ioguix Exp $	 */	// Include application functions	include_once('./libraries/lib.inc.php');		$action = (isset($_REQUEST['action'])) ? $_REQUEST['action'] : '';	if (!isset($msg)) $msg = '';	/**	 * Show default list of casts in the database	 */	function doDefault($msg = '') {		global $data, $misc, $database;		global $lang;		function renderCastContext($val) {			global $lang;			switch ($val) {				case 'e': return $lang['strno'];				case 'a': return $lang['strinassignment'];				default: return $lang['stryes'];			}		}				$misc->printTrail('database');		$misc->printTabs('database','casts');		$misc->printMsg($msg);				$casts = $data->getCasts();		$columns = array(			'source_type' => array(				'title' => $lang['strsourcetype'],				'field' => field('castsource'),			),			'target_type' => array(				'title' => $lang['strtargettype'],				'field' => field('casttarget'),			),			'function' => array(				'title' => $lang['strfunction'],				'field' => field('castfunc'),				'params'=> array('null' => $lang['strbinarycompat']),			),			'implicit' => array(				'title' => $lang['strimplicit'],				'field' => field('castcontext'),				'type'  => 'callback',				'params'=> array('function' => 'renderCastContext', 'align' => 'center'),			),			'comment' => array(				'title' => $lang['strcomment'],				'field' => field('castcomment'),			),		);		$actions = array();				$misc->printTable($casts, $columns, $actions, $lang['strnocasts']);	}	/**	 * Generate XML for the browser tree.	 */	function doTree() {		global $misc, $data;				$casts = $data->getCasts();				$proto = concat(field('castsource'), ' AS ', field('casttarget'));				$attrs = array(			'text'   => $proto,			'icon'   => 'Cast'		);				$misc->printTreeXML($casts, $attrs);		exit;	}		if ($action == 'tree') doTree();		$misc->printHeader($lang['strcasts']);	$misc->printBody();	switch ($action) {		case 'tree':			doTree();			break;		default:			doDefault();			break;	}		$misc->printFooter();?>
<?php	/**	 * Alternative SQL editing window	 *	 * $Id: history.php,v 1.3 2008/01/10 19:37:07 xzilla Exp $	 */	// Include application functions	include_once('./libraries/lib.inc.php');	$action = (isset($_REQUEST['action'])) ? $_REQUEST['action'] : '';	function doDefault() {		global $misc, $lang;		$onchange = "onchange=\"location.href='history.php?server=' + encodeURI(server.options[server.selectedIndex].value) + '&amp;database=' + encodeURI(database.options[database.selectedIndex].value) + '&amp;'\"";		$misc->printHeader($lang['strhistory']);				// Bring to the front always		echo "<body onload=\"window.focus();\">\n";			echo "<form action=\"history.php\" method=\"post\">\n";		$misc->printConnection($onchange);		echo "</form><br />";			if (!isset($_REQUEST['database'])) {			echo "<p>{$lang['strnodatabaseselected']}</p>\n";			return;		}					if (isset($_SESSION['history'][$_REQUEST['server']][$_REQUEST['database']])) {			include_once('classes/ArrayRecordSet.php');						   			$history = new ArrayRecordSet($_SESSION['history'][$_REQUEST['server']][$_REQUEST['database']]);						$columns = array(				'query' => array(					'title' => $lang['strsql'],					'field' => field('query'),				),				'paginate' => array(					'title' => $lang['strpaginate'],					'field' => field('paginate'),					'type' => 'yesno',				),				'actions' => array(					'title' => $lang['stractions'],				),			);			$actions = array(				'run' => array(					'title' => $lang['strexecute'],					'url'   => "sql.php?{$misc->href}&amp;nohistory=t&amp;",					'vars'  => array('query' => 'query', 'paginate' => 'paginate'),					'target' => 'detail',				),				'remove' => array(					'title' => $lang['strdelete'],					'url'   => "history.php?{$misc->href}&amp;action=confdelhistory&amp;",					'vars'  => array('queryid' => 'queryid'),				),			);			$misc->printTable($history, $columns, $actions, $lang['strnohistory']);		}		else echo "<p>{$lang['strnohistory']}</p>\n";		echo "<ul class=\"navlink\">\n";		if (isset($_SESSION['history'][$_REQUEST['server']][$_REQUEST['database']]) 				&& count($_SESSION['history'][$_REQUEST['server']][$_REQUEST['database']]))			echo "\t<li><a href=\"history.php?action=confclearhistory&amp;{$misc->href}\">{$lang['strclearhistory']}</a></li>\n";		echo "\t<li><a href=\"history.php?action=history&amp;{$misc->href}\">{$lang['strrefresh']}</a></li>\n</ul>\n";	}	function doDelHistory($qid, $confirm) {		global $misc, $lang;		if ($confirm) {			$misc->printHeader($lang['strhistory']);        		// Bring to the front always	        	echo "<body onload=\"window.focus();\">\n";						echo "<h3>{$lang['strdelhistory']}</h3>\n";			echo "<p>{$lang['strconfdelhistory']}</p>\n";			echo "<pre>", htmlentities($_SESSION['history'][$_REQUEST['server']][$_REQUEST['database']][$qid]['query']), "</pre>";			echo "<form action=\"history.php\" method=\"post\">\n";			echo "<input type=\"hidden\" name=\"action\" value=\"delhistory\" />\n";			echo "<input type=\"hidden\" name=\"queryid\" value=\"$qid\" />\n";			echo $misc->form;			echo "<input type=\"submit\" name=\"yes\" value=\"{$lang['stryes']}\" />\n";			echo "<input type=\"submit\" name=\"no\" value=\"{$lang['strno']}\" />\n";			echo "</form>\n";		}		else			unset($_SESSION['history'][$_REQUEST['server']][$_REQUEST['database']][$qid]);	}       	function doClearHistory($confirm) {		global $misc, $lang;		if ($confirm) {			$misc->printHeader($lang['strhistory']);        		// Bring to the front always	        	echo "<body onload=\"window.focus();\">\n";			echo "<h3>{$lang['strclearhistory']}</h3>\n";			echo "<p>{$lang['strconfclearhistory']}</p>\n";			echo "<form action=\"history.php\" method=\"post\">\n";			echo "<input type=\"hidden\" name=\"action\" value=\"clearhistory\" />\n";			echo $misc->form;			echo "<input type=\"submit\" name=\"yes\" value=\"{$lang['stryes']}\" />\n";			echo "<input type=\"submit\" name=\"no\" value=\"{$lang['strno']}\" />\n";			echo "</form>\n";		}		else			unset($_SESSION['history'][$_REQUEST['server']][$_REQUEST['database']]);	}																																									switch ($action) {		case 'confdelhistory':			doDelHistory($_REQUEST['queryid'], true);			break;		case 'delhistory':			if (isset($_POST['yes'])) doDelHistory($_REQUEST['queryid'], false);			doDefault();			break;		case 'confclearhistory':			doClearHistory(true);			break;		case 'clearhistory':			if (isset($_POST['yes'])) doClearHistory(false);			doDefault();			break;		default:			doDefault();	}																						// Set the name of the window	$misc->setWindowName('history');	$misc->printFooter();	?>
<?php	/**	 * List tables in a database	 *	 * $Id: tables.php,v 1.112 2008/06/16 22:38:46 ioguix Exp $	 */	// Include application functions	include_once('./libraries/lib.inc.php');	$action = (isset($_REQUEST['action'])) ? $_REQUEST['action'] : '';	/**	 * Displays a screen where they can enter a new table	 */	function doCreate($msg = '') {		global $data, $misc;		global $lang;		if (!isset($_REQUEST['stage'])) {			$_REQUEST['stage'] = 1;			$default_with_oids = $data->getDefaultWithOid();			if ($default_with_oids == 'off') $_REQUEST['withoutoids'] = 'on';		}		if (!isset($_REQUEST['name'])) $_REQUEST['name'] = '';		if (!isset($_REQUEST['fields'])) $_REQUEST['fields'] = '';		if (!isset($_REQUEST['tblcomment'])) $_REQUEST['tblcomment'] = '';		if (!isset($_REQUEST['spcname'])) $_REQUEST['spcname'] = '';		switch ($_REQUEST['stage']) {			case 1:				// Fetch all tablespaces from the database				if ($data->hasTablespaces()) $tablespaces = $data->getTablespaces();				$misc->printTrail('schema');				$misc->printTitle($lang['strcreatetable'], 'pg.table.create');				$misc->printMsg($msg);				echo "<form action=\"tables.php\" method=\"post\">\n";				echo "<table>\n";				echo "\t<tr>\n\t\t<th class=\"data left required\">{$lang['strname']}</th>\n";				echo "\t\t<td class=\"data\"><input name=\"name\" size=\"32\" maxlength=\"{$data->_maxNameLen}\" value=\"",					htmlspecialchars($_REQUEST['name']), "\" /></td>\n\t</tr>\n";				echo "\t<tr>\n\t\t<th class=\"data left required\">{$lang['strnumcols']}</th>\n";				echo "\t\t<td class=\"data\"><input name=\"fields\" size=\"5\" maxlength=\"{$data->_maxNameLen}\" value=\"",					htmlspecialchars($_REQUEST['fields']), "\" /></td>\n\t</tr>\n";				echo "\t<tr>\n\t\t<th class=\"data left\">{$lang['stroptions']}</th>\n";				echo "\t\t<td class=\"data\"><label for=\"withoutoids\"><input type=\"checkbox\" id=\"withoutoids\" name=\"withoutoids\"", isset($_REQUEST['withoutoids']) ? ' checked="checked"' : '', " />WITHOUT OIDS</label></td>\n\t</tr>\n";				// Tablespace (if there are any)				if ($data->hasTablespaces() && $tablespaces->recordCount() > 0) {					echo "\t<tr>\n\t\t<th class=\"data left\">{$lang['strtablespace']}</th>\n";					echo "\t\t<td class=\"data1\">\n\t\t\t<select name=\"spcname\">\n";					// Always offer the default (empty) option					echo "\t\t\t\t<option value=\"\"",						($_REQUEST['spcname'] == '') ? ' selected="selected"' : '', "></option>\n";					// Display all other tablespaces					while (!$tablespaces->EOF) {						$spcname = htmlspecialchars($tablespaces->fields['spcname']);						echo "\t\t\t\t<option value=\"{$spcname}\"",							($tablespaces->fields['spcname'] == $_REQUEST['spcname']) ? ' selected="selected"' : '', ">{$spcname}</option>\n";						$tablespaces->moveNext();					}					echo "\t\t\t</select>\n\t\t</td>\n\t</tr>\n";				}				echo "\t<tr>\n\t\t<th class=\"data left\">{$lang['strcomment']}</th>\n";				echo "\t\t<td><textarea name=\"tblcomment\" rows=\"3\" cols=\"32\">",					htmlspecialchars($_REQUEST['tblcomment']), "</textarea></td>\n\t</tr>\n";				echo "</table>\n";				echo "<p><input type=\"hidden\" name=\"action\" value=\"create\" />\n";				echo "<input type=\"hidden\" name=\"stage\" value=\"2\" />\n";				echo $misc->form;				echo "<input type=\"submit\" value=\"{$lang['strnext']}\" />\n";				echo "<input type=\"submit\" name=\"cancel\" value=\"{$lang['strcancel']}\" /></p>\n";				echo "</form>\n";				break;			case 2:				global $lang;				// Check inputs				$fields = trim($_REQUEST['fields']);				if (trim($_REQUEST['name']) == '') {					$_REQUEST['stage'] = 1;					doCreate($lang['strtableneedsname']);					return;				}				elseif ($fields == '' || !is_numeric($fields) || $fields != (int)$fields || $fields < 1)  {					$_REQUEST['stage'] = 1;					doCreate($lang['strtableneedscols']);					return;				}				$types = $data->getTypes(true, false, true);				$types_for_js = array();				$misc->printTrail('schema');				$misc->printTitle($lang['strcreatetable'], 'pg.table.create');				$misc->printMsg($msg);				echo "<script src=\"tables.js\" type=\"text/javascript\"></script>";				echo "<form action=\"tables.php\" method=\"post\">\n";				// Output table header				echo "<table>\n";				echo "\t<tr><th colspan=\"2\" class=\"data required\">{$lang['strcolumn']}</th><th colspan=\"2\" class=\"data required\">{$lang['strtype']}</th>";				echo "<th class=\"data\">{$lang['strlength']}</th><th class=\"data\">{$lang['strnotnull']}</th>";				echo "<th class=\"data\">{$lang['struniquekey']}</th><th class=\"data\">{$lang['strprimarykey']}</th>";				echo "<th class=\"data\">{$lang['strdefault']}</th><th class=\"data\">{$lang['strcomment']}</th></tr>\n";				for ($i = 0; $i < $_REQUEST['fields']; $i++) {					if (!isset($_REQUEST['field'][$i])) $_REQUEST['field'][$i] = '';					if (!isset($_REQUEST['length'][$i])) $_REQUEST['length'][$i] = '';					if (!isset($_REQUEST['default'][$i])) $_REQUEST['default'][$i] = '';					if (!isset($_REQUEST['colcomment'][$i])) $_REQUEST['colcomment'][$i] = '';					echo "\t<tr>\n\t\t<td>", $i + 1, ".&nbsp;</td>\n";					echo "\t\t<td><input name=\"field[{$i}]\" size=\"16\" maxlength=\"{$data->_maxNameLen}\" value=\"",						htmlspecialchars($_REQUEST['field'][$i]), "\" /></td>\n";					echo "\t\t<td>\n\t\t\t<select name=\"type[{$i}]\" id=\"types{$i}\" onchange=\"checkLengths(this.options[this.selectedIndex].value,{$i});\">\n";					// Output any "magic" types					foreach ($data->extraTypes as $v) {						$types_for_js[strtolower($v)] = 1;						echo "\t\t\t\t<option value=\"", htmlspecialchars($v), "\"",						(isset($_REQUEST['type'][$i]) && $v == $_REQUEST['type'][$i]) ? ' selected="selected"' : '', ">",							$misc->printVal($v), "</option>\n";					}					$types->moveFirst();					while (!$types->EOF) {						$typname = $types->fields['typname'];						$types_for_js[$typname] = 1;						echo "\t\t\t\t<option value=\"", htmlspecialchars($typname), "\"",						(isset($_REQUEST['type'][$i]) && $typname == $_REQUEST['type'][$i]) ? ' selected="selected"' : '', ">",							$misc->printVal($typname), "</option>\n";						$types->moveNext();					}					echo "\t\t\t</select>\n\t\t\n";					if($i==0) { // only define js types array once						$predefined_size_types = array_intersect($data->predefined_size_types,array_keys($types_for_js));						$escaped_predef_types = array(); // the JS escaped array elements						foreach($predefined_size_types as $value) {							$escaped_predef_types[] = "'{$value}'";						}						echo "<script type=\"text/javascript\">predefined_lengths = new Array(". implode(",",$escaped_predef_types) .");</script>\n\t</td>";					}					// Output array type selector					echo "\t\t<td>\n\t\t\t<select name=\"array[{$i}]\">\n";					echo "\t\t\t\t<option value=\"\"", (isset($_REQUEST['array'][$i]) && $_REQUEST['array'][$i] == '') ? ' selected="selected"' : '', "></option>\n";					echo "\t\t\t\t<option value=\"[]\"", (isset($_REQUEST['array'][$i]) && $_REQUEST['array'][$i] == '[]') ? ' selected="selected"' : '', ">[ ]</option>\n";					echo "\t\t\t</select>\n\t\t</td>\n";					echo "\t\t<td><input name=\"length[{$i}]\" id=\"lengths{$i}\" size=\"10\" value=\"",						htmlspecialchars($_REQUEST['length'][$i]), "\" /></td>\n";					echo "\t\t<td><input type=\"checkbox\" name=\"notnull[{$i}]\"", (isset($_REQUEST['notnull'][$i])) ? ' checked="checked"' : '', " /></td>\n";					echo "\t\t<td style=\"text-align: center\"><input type=\"checkbox\" name=\"uniquekey[{$i}]\""						.(isset($_REQUEST['uniquekey'][$i]) ? ' checked="checked"' :'')." /></td>\n";					echo "\t\t<td style=\"text-align: center\"><input type=\"checkbox\" name=\"primarykey[{$i}]\" "						.(isset($_REQUEST['primarykey'][$i]) ? ' checked="checked"' : '')						." /></td>\n";					echo "\t\t<td><input name=\"default[{$i}]\" size=\"20\" value=\"",						htmlspecialchars($_REQUEST['default'][$i]), "\" /></td>\n";					echo "\t\t<td><input name=\"colcomment[{$i}]\" size=\"40\" value=\"",						htmlspecialchars($_REQUEST['colcomment'][$i]), "\" />						<script type=\"text/javascript\">checkLengths(document.getElementById('types{$i}').value,{$i});</script>						</td>\n\t</tr>\n";				}				echo "</table>\n";				echo "<p><input type=\"hidden\" name=\"action\" value=\"create\" />\n";				echo "<input type=\"hidden\" name=\"stage\" value=\"3\" />\n";				echo $misc->form;				echo "<input type=\"hidden\" name=\"name\" value=\"", htmlspecialchars($_REQUEST['name']), "\" />\n";				echo "<input type=\"hidden\" name=\"fields\" value=\"", htmlspecialchars($_REQUEST['fields']), "\" />\n";				if (isset($_REQUEST['withoutoids'])) {					echo "<input type=\"hidden\" name=\"withoutoids\" value=\"true\" />\n";				}				echo "<input type=\"hidden\" name=\"tblcomment\" value=\"", htmlspecialchars($_REQUEST['tblcomment']), "\" />\n";				if (isset($_REQUEST['spcname'])) {					echo "<input type=\"hidden\" name=\"spcname\" value=\"", htmlspecialchars($_REQUEST['spcname']), "\" />\n";				}				echo "<input type=\"submit\" value=\"{$lang['strcreate']}\" />\n";				echo "<input type=\"submit\" name=\"cancel\" value=\"{$lang['strcancel']}\" /></p>\n";				echo "</form>\n";				break;			case 3:				global $data, $lang, $_reload_browser;				if (!isset($_REQUEST['notnull'])) $_REQUEST['notnull'] = array();				if (!isset($_REQUEST['uniquekey'])) $_REQUEST['uniquekey'] = array();				if (!isset($_REQUEST['primarykey'])) $_REQUEST['primarykey'] = array();				if (!isset($_REQUEST['length'])) $_REQUEST['length'] = array();				// Default tablespace to null if it isn't set				if (!isset($_REQUEST['spcname'])) $_REQUEST['spcname'] = null;				// Check inputs				$fields = trim($_REQUEST['fields']);				if (trim($_REQUEST['name']) == '') {					$_REQUEST['stage'] = 1;					doCreate($lang['strtableneedsname']);					return;				}				elseif ($fields == '' || !is_numeric($fields) || $fields != (int)$fields || $fields <= 0)  {					$_REQUEST['stage'] = 1;					doCreate($lang['strtableneedscols']);					return;				}				$status = $data->createTable($_REQUEST['name'], $_REQUEST['fields'], $_REQUEST['field'],								$_REQUEST['type'], $_REQUEST['array'], $_REQUEST['length'], $_REQUEST['notnull'], $_REQUEST['default'],								isset($_REQUEST['withoutoids']), $_REQUEST['colcomment'], $_REQUEST['tblcomment'], $_REQUEST['spcname'],								$_REQUEST['uniquekey'], $_REQUEST['primarykey']);				if ($status == 0) {					$_reload_browser = true;					doDefault($lang['strtablecreated']);				}				elseif ($status == -1) {					$_REQUEST['stage'] = 2;					doCreate($lang['strtableneedsfield']);					return;				}				else {					$_REQUEST['stage'] = 2;					doCreate($lang['strtablecreatedbad']);					return;				}				break;			default:				echo "<p>{$lang['strinvalidparam']}</p>\n";		}	}	/**	 * Dsiplay a screen where user can create a table from an existing one.	 * We don't have to check if pg supports schema cause create table like	 * is available under pg 7.4+ which has schema.	 */	function doCreateLike($confirm, $msg = '') {		global $data, $misc, $lang;		if (!$confirm) {			include_once('./classes/Gui.php');			if (!isset($_REQUEST['name'])) $_REQUEST['name'] = '';			if (!isset($_REQUEST['like'])) $_REQUEST['like'] = '';			if (!isset($_REQUEST['tablespace'])) $_REQUEST['tablespace'] = '';			$misc->printTrail('schema');		    $misc->printTitle($lang['strcreatetable'], 'pg.table.create');			$misc->printMsg($msg);			$tbltmp = $data->getTables(true);			$tbltmp = $tbltmp->getArray();			$tables = array();			$tblsel = '';			foreach ($tbltmp as $a) {				$data->fieldClean($a['nspname']);				$data->fieldClean($a['relname']);				$tables["\"{$a['nspname']}\".\"{$a['relname']}\""] = serialize(array('schema' => $a['nspname'], 'table' => $a['relname']));				if ($_REQUEST['like'] == $tables["\"{$a['nspname']}\".\"{$a['relname']}\""]) 					$tblsel = htmlspecialchars($tables["\"{$a['nspname']}\".\"{$a['relname']}\""]);			}			unset($tbltmp);			echo "<form action=\"tables.php\" method=\"post\">\n";			echo "<table>\n\t<tr>\n\t\t<th class=\"data left required\">{$lang['strname']}</th>\n";			echo "\t\t<td class=\"data\"><input name=\"name\" size=\"32\" maxlength=\"{$data->_maxNameLen}\" value=\"", htmlspecialchars($_REQUEST['name']), "\" /></td>\n\t</tr>\n";			echo "\t<tr>\n\t\t<th class=\"data left required\">{$lang['strcreatetablelikeparent']}</th>\n";			echo "\t\t<td class=\"data\">";			echo GUI::printCombo($tables, 'like', true, $tblsel, false);			echo "</td>\n\t</tr>\n";			if ($data->hasTablespaces()) {				$tblsp_ = $data->getTablespaces();				if ($tblsp_->recordCount() > 0) {					$tblsp_ = $tblsp_->getArray();					$tblsp = array();					foreach($tblsp_ as $a) $tblsp[$a['spcname']] = $a['spcname'];					echo "\t<tr>\n\t\t<th class=\"data left\">{$lang['strtablespace']}</th>\n";					echo "\t\t<td class=\"data\">";					echo GUI::printCombo($tblsp, 'tablespace', true, $_REQUEST['tablespace'], false);					echo "</td>\n\t</tr>\n";				}			}			echo "\t<tr>\n\t\t<th class=\"data left\">{$lang['stroptions']}</th>\n\t\t<td class=\"data\">";			echo "<label for=\"withdefaults\"><input type=\"checkbox\" id=\"withdefaults\" name=\"withdefaults\"",				isset($_REQUEST['withdefaults']) ? ' checked="checked"' : '',				"/>{$lang['strcreatelikewithdefaults']}</label>";			if ($data->hasCreateTableLikeWithConstraints()) {				echo "<br /><label for=\"withconstraints\"><input type=\"checkbox\" id=\"withconstraints\" name=\"withconstraints\"",					isset($_REQUEST['withconstraints']) ? ' checked="checked"' : '',					"/>{$lang['strcreatelikewithconstraints']}</label>";			}			if ($data->hasCreateTableLikeWithIndexes()) {				echo "<br /><label for=\"withindexes\"><input type=\"checkbox\" id=\"withindexes\" name=\"withindexes\"",					isset($_REQUEST['withindexes']) ? ' checked="checked"' : '',					"/>{$lang['strcreatelikewithindexes']}</label>";			}			echo "</td>\n\t</tr>\n";			echo "</table>";			echo "<input type=\"hidden\" name=\"action\" value=\"confcreatelike\" />\n";			echo $misc->form;			echo "<p><input type=\"submit\" value=\"{$lang['strcreate']}\" />\n";			echo "<input type=\"submit\" name=\"cancel\" value=\"{$lang['strcancel']}\" /></p>\n";			echo "</form>\n";		}		else {			global $_reload_browser;			if (trim($_REQUEST['name']) == '') {				doCreateLike(false, $lang['strtableneedsname']);				return;			}			if (trim($_REQUEST['like']) == '') {				doCreateLike(false, $lang['strtablelikeneedslike']);				return;			}			if (!isset($_REQUEST['tablespace'])) $_REQUEST['tablespace'] = '';			$status = $data->createTableLike($_REQUEST['name'], unserialize($_REQUEST['like']), isset($_REQUEST['withdefaults']),				isset($_REQUEST['withconstraints']), isset($_REQUEST['withindexes']), $_REQUEST['tablespace']);							if ($status == 0) {				$_reload_browser = true;				doDefault($lang['strtablecreated']);			}			else {				doCreateLike(false, $lang['strtablecreatedbad']);				return;			}		}	}	/**	 * Ask for select parameters and perform select	 */	function doSelectRows($confirm, $msg = '') {		global $data, $misc, $_no_output;		global $lang;		if ($confirm) {			$misc->printTrail('table');			$misc->printTitle($lang['strselect'], 'pg.sql.select');			$misc->printMsg($msg);			$attrs = $data->getTableAttributes($_REQUEST['table']);			echo "<form action=\"tables.php\" method=\"post\" id=\"selectform\">\n";			if ($attrs->recordCount() > 0) {				// JavaScript for select all feature				echo "<script type=\"text/javascript\">\n";				echo "//<![CDATA[\n";				echo "	function selectAll() {\n";				echo "		for (var i=0; i<document.getElementById('selectform').elements.length; i++) {\n";				echo "			var e = document.getElementById('selectform').elements[i];\n";				echo "			if (e.name.indexOf('show') == 0) e.checked = document.getElementById('selectform').selectall.checked;\n";				echo "		}\n";				echo "	}\n";				echo "//]]>\n";				echo "</script>\n";				echo "<table>\n";				// Output table header				echo "<tr><th class=\"data\">{$lang['strshow']}</th><th class=\"data\">{$lang['strcolumn']}</th>";				echo "<th class=\"data\">{$lang['strtype']}</th><th class=\"data\">{$lang['stroperator']}</th>";				echo "<th class=\"data\">{$lang['strvalue']}</th></tr>";				$i = 0;				while (!$attrs->EOF) {					$attrs->fields['attnotnull'] = $data->phpBool($attrs->fields['attnotnull']);					// Set up default value if there isn't one already					if (!isset($_REQUEST['values'][$attrs->fields['attname']]))						$_REQUEST['values'][$attrs->fields['attname']] = null;					if (!isset($_REQUEST['ops'][$attrs->fields['attname']]))						$_REQUEST['ops'][$attrs->fields['attname']] = null;					// Continue drawing row					$id = (($i % 2) == 0 ? '1' : '2');					echo "<tr class=\"data{$id}\">\n";					echo "<td style=\"white-space:nowrap;\">";					echo "<input type=\"checkbox\" name=\"show[", htmlspecialchars($attrs->fields['attname']), "]\"",						isset($_REQUEST['show'][$attrs->fields['attname']]) ? ' checked="checked"' : '', " /></td>";					echo "<td style=\"white-space:nowrap;\">", $misc->printVal($attrs->fields['attname']), "</td>";					echo "<td style=\"white-space:nowrap;\">", $misc->printVal($data->formatType($attrs->fields['type'], $attrs->fields['atttypmod'])), "</td>";					echo "<td style=\"white-space:nowrap;\">";					echo "<select name=\"ops[{$attrs->fields['attname']}]\">\n";					foreach (array_keys($data->selectOps) as $v) {						echo "<option value=\"", htmlspecialchars($v), "\"", ($v == $_REQUEST['ops'][$attrs->fields['attname']]) ? ' selected="selected"' : '',						">", htmlspecialchars($v), "</option>\n";					}					echo "</select>\n</td>\n";					echo "<td style=\"white-space:nowrap;\">", $data->printField("values[{$attrs->fields['attname']}]",						$_REQUEST['values'][$attrs->fields['attname']], $attrs->fields['type']), "</td>";					echo "</tr>\n";					$i++;					$attrs->moveNext();				}				// Select all checkbox				echo "<tr><td colspan=\"5\"><input type=\"checkbox\" id=\"selectall\" name=\"selectall\" onclick=\"javascript:selectAll()\" /><label for=\"selectall\">{$lang['strselectallfields']}</label></td>";				echo "</tr></table>\n";			}			else echo "<p>{$lang['strinvalidparam']}</p>\n";			echo "<p><input type=\"hidden\" name=\"action\" value=\"selectrows\" />\n";			echo "<input type=\"hidden\" name=\"table\" value=\"", htmlspecialchars($_REQUEST['table']), "\" />\n";			echo "<input type=\"hidden\" name=\"subject\" value=\"table\" />\n";			echo $misc->form;			echo "<input type=\"submit\" name=\"select\" value=\"{$lang['strselect']}\" />\n";			echo "<input type=\"submit\" name=\"cancel\" value=\"{$lang['strcancel']}\" /></p>\n";			echo "</form>\n";		}		else {			if (!isset($_POST['show'])) $_POST['show'] = array();			if (!isset($_POST['values'])) $_POST['values'] = array();			if (!isset($_POST['nulls'])) $_POST['nulls'] = array();			// Verify that they haven't supplied a value for unary operators			foreach ($_POST['ops'] as $k => $v) {				if ($data->selectOps[$v] == 'p' && $_POST['values'][$k] != '') {					doSelectRows(true, $lang['strselectunary']);					return;				}			}			if (sizeof($_POST['show']) == 0)				doSelectRows(true, $lang['strselectneedscol']);			else {				// Generate query SQL				$query = $data->getSelectSQL($_REQUEST['table'], array_keys($_POST['show']),					$_POST['values'], $_POST['ops']);				$_REQUEST['query'] = $query;				$_REQUEST['return_url'] = "tables.php?action=confselectrows&amp;{$misc->href}&amp;table={$_REQUEST['table']}";				$_REQUEST['return_desc'] = $lang['strback'];				$_no_output = true;				include('./display.php');				exit;			}		}	}	/**	 * Ask for insert parameters and then actually insert row	 */	function doInsertRow($confirm, $msg = '') {		global $data, $misc, $conf;		global $lang;		if ($confirm) {			$misc->printTrail('table');			$misc->printTitle($lang['strinsertrow'], 'pg.sql.insert');			$misc->printMsg($msg);			$attrs = $data->getTableAttributes($_REQUEST['table']);			if (($conf['autocomplete'] != 'disable')) {				$fksprops = $misc->getAutocompleteFKProperties($_REQUEST['table']);				if ($fksprops !== false)					echo $fksprops['code'];			}			else $fksprops = false;			echo "<form action=\"tables.php\" method=\"post\" id=\"ac_form\">\n";			if ($attrs->recordCount() > 0) {				echo "<table>\n";				// Output table header				echo "<tr><th class=\"data\">{$lang['strcolumn']}</th><th class=\"data\">{$lang['strtype']}</th>";				echo "<th class=\"data\">{$lang['strformat']}</th>";				echo "<th class=\"data\">{$lang['strnull']}</th><th class=\"data\">{$lang['strvalue']}</th></tr>";				$i = 0;				$fields = array();				while (!$attrs->EOF) {					$fields[$attrs->fields['attnum']] = $attrs->fields['attname'];					$attrs->fields['attnotnull'] = $data->phpBool($attrs->fields['attnotnull']);					// Set up default value if there isn't one already					if (!isset($_REQUEST['values'][$attrs->fields['attnum']]))						$_REQUEST['values'][$attrs->fields['attnum']] = $attrs->fields['adsrc'];					// Default format to 'VALUE' if there is no default,					// otherwise default to 'EXPRESSION'					if (!isset($_REQUEST['format'][$attrs->fields['attnum']]))						$_REQUEST['format'][$attrs->fields['attnum']] = ($attrs->fields['adsrc'] === null) ? 'VALUE' : 'EXPRESSION';					// Continue drawing row					$id = (($i % 2) == 0 ? '1' : '2');					echo "<tr class=\"data{$id}\">\n";					echo "<td style=\"white-space:nowrap;\">", $misc->printVal($attrs->fields['attname']), "</td>";					echo "<td style=\"white-space:nowrap;\">\n";					echo $misc->printVal($data->formatType($attrs->fields['type'], $attrs->fields['atttypmod']));					echo "<input type=\"hidden\" name=\"types[{$attrs->fields['attnum']}]\" value=\"",						htmlspecialchars($attrs->fields['type']), "\" /></td>";					echo "<td style=\"white-space:nowrap;\">\n";					echo "<select name=\"format[{$attrs->fields['attnum']}]\">\n";					echo "<option value=\"VALUE\"", ($_REQUEST['format'][$attrs->fields['attnum']] == 'VALUE') ? ' selected="selected"' : '', ">{$lang['strvalue']}</option>\n";					echo "<option value=\"EXPRESSION\"", ($_REQUEST['format'][$attrs->fields['attnum']] == 'EXPRESSION') ? ' selected="selected"' : '', ">{$lang['strexpression']}</option>\n";					echo "</select>\n</td>\n";					echo "<td style=\"white-space:nowrap;\">";					// Output null box if the column allows nulls (doesn't look at CHECKs or ASSERTIONS)					if (!$attrs->fields['attnotnull']) {						echo "<input type=\"checkbox\" name=\"nulls[{$attrs->fields['attnum']}]\"",							isset($_REQUEST['nulls'][$attrs->fields['attnum']]) ? ' checked="checked"' : '', " /></td>";					}					else {						echo "&nbsp;</td>";					}					echo "<td id=\"row_att_{$attrs->fields['attnum']}\" style=\"white-space:nowrap;\">";					if (($fksprops !== false) && isset($fksprops['byfield'][$attrs->fields['attnum']])) {						echo $data->printField("values[{$attrs->fields['attnum']}]", $_REQUEST['values'][$attrs->fields['attnum']], 'fktype'/*force FK*/,							array(								'id' => "attr_{$attrs->fields['attnum']}",								'autocomplete' => 'off'							)						);					}					else {						echo $data->printField("values[{$attrs->fields['attnum']}]", $_REQUEST['values'][$attrs->fields['attnum']], $attrs->fields['type']);					}					echo "</td>\n";					echo "</tr>\n";					$i++;					$attrs->moveNext();				}				echo "</table>\n";				if (!isset($_SESSION['counter'])) { $_SESSION['counter'] = 0; }				echo "<input type=\"hidden\" name=\"action\" value=\"insertrow\" />\n";				echo "<input type=\"hidden\" name=\"fields\" value=\"", htmlentities(serialize($fields),ENT_QUOTES) ,"\" />\n";				echo "<input type=\"hidden\" name=\"protection_counter\" value=\"".$_SESSION['counter']."\" />\n";				echo "<input type=\"hidden\" name=\"table\" value=\"", htmlspecialchars($_REQUEST['table']), "\" />\n";				echo "<p><input type=\"submit\" name=\"insert\" value=\"{$lang['strinsert']}\" />\n";				echo "<input type=\"submit\" name=\"insertandrepeat\" value=\"{$lang['strinsertandrepeat']}\" />\n";				echo "<input type=\"submit\" name=\"cancel\" value=\"{$lang['strcancel']}\" />\n";								if($fksprops !== false) {					if ($conf['autocomplete'] != 'default off')						echo "<input type=\"checkbox\" id=\"no_ac\" value=\"1\" checked=\"checked\" /><label for=\"no_ac\">{$lang['strac']}</label>\n";					else						echo "<input type=\"checkbox\" id=\"no_ac\" value=\"0\" /><label for=\"no_ac\">{$lang['strac']}</label>\n";				}				echo "</p>\n";			}			else { 				echo "<p>{$lang['strnofieldsforinsert']}</p>\n";				echo "<input type=\"submit\" name=\"cancel\" value=\"{$lang['strcancel']}\" />\n";			}			echo $misc->form;			echo "</form>\n";		}		else {			if (!isset($_POST['values'])) $_POST['values'] = array();			if (!isset($_POST['nulls'])) $_POST['nulls'] = array();			$_POST['fields'] = unserialize(htmlspecialchars_decode($_POST['fields'], ENT_QUOTES));			if ($_SESSION['counter']++ == $_POST['protection_counter']) {				$status = $data->insertRow($_POST['table'], $_POST['fields'], $_POST['values'],											$_POST['nulls'], $_POST['format'], $_POST['types']);				if ($status == 0) {					if (isset($_POST['insert']))						doDefault($lang['strrowinserted']);					else {						$_REQUEST['values'] = array();						$_REQUEST['nulls'] = array();						doInsertRow(true, $lang['strrowinserted']);					}				}				else					doInsertRow(true, $lang['strrowinsertedbad']);			} else				doInsertRow(true, $lang['strrowduplicate']);		}	}	/**	 * Show confirmation of empty and perform actual empty	 */	function doEmpty($confirm) {		global $data, $misc;		global $lang;		if (empty($_REQUEST['table']) && empty($_REQUEST['ma'])) {			doDefault($lang['strspecifytabletoempty']);			exit();		}		if ($confirm) {			if (isset($_REQUEST['ma'])) {				$misc->printTrail('schema');				$misc->printTitle($lang['strempty'],'pg.table.empty');				echo "<form action=\"tables.php\" method=\"post\">\n";				foreach ($_REQUEST['ma'] as $v) {					$a = unserialize(htmlspecialchars_decode($v, ENT_QUOTES));					echo "<p>", sprintf($lang['strconfemptytable'], $misc->printVal($a['table'])), "</p>\n";					printf('<input type="hidden" name="table[]" value="%s" />', htmlspecialchars($a['table']));				}			} // END mutli empty			else {				$misc->printTrail('table');				$misc->printTitle($lang['strempty'],'pg.table.empty');				echo "<p>", sprintf($lang['strconfemptytable'], $misc->printVal($_REQUEST['table'])), "</p>\n";				echo "<form action=\"tables.php\" method=\"post\">\n";				echo "<input type=\"hidden\" name=\"table\" value=\"", htmlspecialchars($_REQUEST['table']), "\" />\n";			} // END not mutli empty			echo "<input type=\"hidden\" name=\"action\" value=\"empty\" />\n";			echo $misc->form;			echo "<input type=\"submit\" name=\"empty\" value=\"{$lang['strempty']}\" /> <input type=\"submit\" name=\"cancel\" value=\"{$lang['strcancel']}\" />\n";			echo "</form>\n";		} // END if confirm		else { // Do Empty			if (is_array($_REQUEST['table'])) {				$msg='';				foreach($_REQUEST['table'] as $t) {					$status = $data->emptyTable($t);					if ($status == 0)						$msg.= sprintf('%s: %s<br />', htmlentities($t), $lang['strtableemptied']);					else {						doDefault(sprintf('%s%s: %s<br />', $msg, htmlentities($t), $lang['strtableemptiedbad']));						return;					}				}				doDefault($msg);			} // END mutli empty			else {				$status = $data->emptyTable($_POST['table']);				if ($status == 0)					doDefault($lang['strtableemptied']);				else					doDefault($lang['strtableemptiedbad']);			} // END not mutli empty		} // END do Empty	}	/**	 * Show confirmation of drop and perform actual drop	 */	function doDrop($confirm) {		global $data, $misc;		global $lang, $_reload_browser;		if (empty($_REQUEST['table']) && empty($_REQUEST['ma'])) {			doDefault($lang['strspecifytabletodrop']);			exit();		}		if ($confirm) {			//If multi drop			if (isset($_REQUEST['ma'])) {				$misc->printTrail('schema');				$misc->printTitle($lang['strdrop'], 'pg.table.drop');				echo "<form action=\"tables.php\" method=\"post\">\n";				foreach($_REQUEST['ma'] as $v) {					$a = unserialize(htmlspecialchars_decode($v, ENT_QUOTES));					echo "<p>", sprintf($lang['strconfdroptable'], $misc->printVal($a['table'])), "</p>\n";					printf('<input type="hidden" name="table[]" value="%s" />', htmlspecialchars($a['table']));				}			} else {				$misc->printTrail('table');				$misc->printTitle($lang['strdrop'], 'pg.table.drop');				echo "<p>", sprintf($lang['strconfdroptable'], $misc->printVal($_REQUEST['table'])), "</p>\n";				echo "<form action=\"tables.php\" method=\"post\">\n";				echo "<input type=\"hidden\" name=\"table\" value=\"", htmlspecialchars($_REQUEST['table']), "\" />\n";			}// END if multi drop			echo "<input type=\"hidden\" name=\"action\" value=\"drop\" />\n";			echo $misc->form;			echo "<p><input type=\"checkbox\" id=\"cascade\" name=\"cascade\" /> <label for=\"cascade\">{$lang['strcascade']}</label></p>\n";			echo "<input type=\"submit\" name=\"drop\" value=\"{$lang['strdrop']}\" />\n";			echo "<input type=\"submit\" name=\"cancel\" value=\"{$lang['strcancel']}\" />\n";			echo "</form>\n";		} // END confirm		else {			//If multi drop			if (is_array($_REQUEST['table'])) {				$msg='';				$status = $data->beginTransaction();				if ($status == 0) {					foreach($_REQUEST['table'] as $t) {						$status = $data->dropTable($t, isset($_POST['cascade']));						if ($status == 0)							$msg.= sprintf('%s: %s<br />', htmlentities($t), $lang['strtabledropped']);						else {							$data->endTransaction();							doDefault(sprintf('%s%s: %s<br />', $msg, htmlentities($t), $lang['strtabledroppedbad']));							return;						}					}				}				if($data->endTransaction() == 0) {					// Everything went fine, back to the Default page....					$_reload_browser = true;					doDefault($msg);				}				else doDefault($lang['strtabledroppedbad']);			} else {				$status = $data->dropTable($_POST['table'], isset($_POST['cascade']));				if ($status == 0) {					$_reload_browser = true;					doDefault($lang['strtabledropped']);				}				else					doDefault($lang['strtabledroppedbad']);			}		} // END DROP	}// END Function	/**	 * Show default list of tables in the database	 */	function doDefault($msg = '') {		global $data, $conf, $misc, $data;		global $lang;		$misc->printTrail('schema');		$misc->printTabs('schema','tables');		$misc->printMsg($msg);		$tables = $data->getTables();		$columns = array(			'table' => array(				'title' => $lang['strtable'],				'field' => field('relname'),				'url'		=> "redirect.php?subject=table&amp;{$misc->href}&amp;",				'vars'  => array('table' => 'relname'),			),			'owner' => array(				'title' => $lang['strowner'],				'field' => field('relowner'),			),			'tablespace' => array(				'title' => $lang['strtablespace'],				'field' => field('tablespace')			),			'tuples' => array(				'title' => $lang['strestimatedrowcount'],				'field' => field('reltuples'),				'type'  => 'numeric'			),			'actions' => array(				'title' => $lang['stractions'],			),			'comment' => array(				'title' => $lang['strcomment'],				'field' => field('relcomment'),			),		);		$actions = array(			'multiactions' => array(				'keycols' => array('table' => 'relname'),				'url' => 'tables.php',				'default' => 'analyze',			),			'browse' => array(				'title' => $lang['strbrowse'],				'url'   => "display.php?{$misc->href}&amp;subject=table&amp;return_url=".urlencode("tables.php?{$misc->href}")."&amp;return_desc=".urlencode($lang['strback'])."&amp;",				'vars'  => array('table' => 'relname'),			),			'select' => array(				'title' => $lang['strselect'],				'url'   => "tables.php?action=confselectrows&amp;{$misc->href}&amp;",				'vars'  => array('table' => 'relname'),			),			'insert' => array(				'title' => $lang['strinsert'],				'url'   => "tables.php?action=confinsertrow&amp;{$misc->href}&amp;",				'vars'  => array('table' => 'relname'),			),			'empty' => array(				'title' => $lang['strempty'],				'url'   => "tables.php?action=confirm_empty&amp;{$misc->href}&amp;",				'vars'  => array('table' => 'relname'),				'multiaction' => 'confirm_empty',			),			'alter' => array(				'title' => $lang['stralter'],				'url'	=> "tblproperties.php?action=confirm_alter&amp;{$misc->href}&amp;",				'vars'	=> array('table' => 'relname'),			),			'drop' => array(				'title' => $lang['strdrop'],				'url'   => "tables.php?action=confirm_drop&amp;{$misc->href}&amp;",				'vars'  => array('table' => 'relname'),				'multiaction' => 'confirm_drop',			),			'vacuum' => array(				'title' => $lang['strvacuum'],				'url'   => "tables.php?action=confirm_vacuum&amp;{$misc->href}&amp;",				'vars'  => array('table' => 'relname'),				'multiaction' => 'confirm_vacuum',			),			'analyze' => array(				'title' => $lang['stranalyze'],				'url'   => "tables.php?action=confirm_analyze&amp;{$misc->href}&amp;",				'vars'  => array('table' => 'relname'),				'multiaction' => 'confirm_analyze',			),			'reindex' => array(				'title' => $lang['strreindex'],				'url'   => "tables.php?action=confirm_reindex&amp;{$misc->href}&amp;",				'vars'  => array('table' => 'relname'),				'multiaction' => 'confirm_reindex',			),			//'cluster' TODO ?		);		if (!$data->hasTablespaces()) unset($columns['tablespace']);		$misc->printTable($tables, $columns, $actions, $lang['strnotables']);		echo "<ul class=\"navlink\">\n\t<li><a href=\"tables.php?action=create&amp;{$misc->href}\">{$lang['strcreatetable']}</a></li>\n";		if (($tables->recordCount() > 0) && $data->hasCreateTableLike())			echo "\t<li><a href=\"tables.php?action=createlike&amp;{$misc->href}\">{$lang['strcreatetablelike']}</a></li>\n";		echo "</ul>\n";	}		require('./admin.php');	/**	 * Generate XML for the browser tree.	 */	function doTree() {		global $misc, $data;		$tables = $data->getTables();		$reqvars = $misc->getRequestVars('table');		$attrs = array(			'text'   => field('relname'),			'icon'   => 'Table',			'iconAction' => url('display.php',							$reqvars,							array('table' => field('relname'))						),			'toolTip'=> field('relcomment'),			'action' => url('redirect.php',							$reqvars,							array('table' => field('relname'))						),			'branch' => url('tables.php',							$reqvars,							array (								'action' => 'subtree',								'table' => field('relname')							)						)		);		$misc->printTreeXML($tables, $attrs);		exit;	}	function doSubTree() {		global $misc, $data;		$tabs = $misc->getNavTabs('table');		$items = $misc->adjustTabsForTree($tabs);		$reqvars = $misc->getRequestVars('table');		$attrs = array(			'text'   => noEscape(field('title')),			'icon'   => field('icon'),			'action' => url(				field('url'),				$reqvars,				field('urlvars'),				array('table' => $_REQUEST['table'])			),			'branch' => ifempty(				field('branch'), '', url(					field('url'),					$reqvars,					array(						'action' => 'tree',						'table' => $_REQUEST['table']					)				)			),		);		$misc->printTreeXML($items, $attrs);		exit;	}	if ($action == 'tree') doTree();	if ($action == 'subtree') dosubTree();	$misc->printHeader($lang['strtables']);	$misc->printBody();	switch ($action) {		case 'create':			if (isset($_POST['cancel'])) doDefault();			else doCreate();			break;		case 'createlike':			doCreateLike(false);			break;		case 'confcreatelike':			if (isset($_POST['cancel'])) doDefault();			else doCreateLike(true);			break;		case 'selectrows':			if (!isset($_POST['cancel'])) doSelectRows(false);			else doDefault();			break;		case 'confselectrows':			doSelectRows(true);			break;		case 'insertrow':			if (!isset($_POST['cancel'])) doInsertRow(false);			else doDefault();			break;		case 'confinsertrow':			doInsertRow(true);			break;		case 'empty':			if (isset($_POST['empty'])) doEmpty(false);			else doDefault();			break;		case 'confirm_empty':			doEmpty(true);			break;		case 'drop':			if (isset($_POST['drop'])) doDrop(false);			else doDefault();			break;		case 'confirm_drop':			doDrop(true);			break;		default:			if (adminActions($action, 'table') === false) doDefault();			break;	}	$misc->printFooter();?>
<?php	/**	 * Manage databases within a server	 *	 * $Id: all_db.php,v 1.59 2007/10/17 21:40:19 ioguix Exp $	 */	// Include application functions	include_once('./libraries/lib.inc.php');	$action = (isset($_REQUEST['action'])) ? $_REQUEST['action'] : '';	if (!isset($msg)) $msg = '';	/**	 * Display a form for alter and perform actual alter	 */	function doAlter($confirm) {		global $data, $misc, $_reload_browser;		global $lang;		if ($confirm) {			$misc->printTrail('database');			$misc->printTitle($lang['stralter'], 'pg.database.alter');			echo "<form action=\"all_db.php\" method=\"post\">\n";			echo "<table>\n";			echo "<tr><th class=\"data left required\">{$lang['strname']}</th>\n";			echo "<td class=\"data1\">";			echo "<input name=\"newname\" size=\"32\" maxlength=\"{$data->_maxNameLen}\" value=\"",				htmlspecialchars($_REQUEST['alterdatabase']), "\" /></td></tr>\n";			$server_info = $misc->getServerInfo();			if ($data->hasAlterDatabaseOwner() && $data->isSuperUser($server_info['username'])) {				// Fetch all users				$rs = $data->getDatabaseOwner($_REQUEST['alterdatabase']);				$owner = isset($rs->fields['usename']) ? $rs->fields['usename'] : '';				$users = $data->getUsers();				echo "<tr><th class=\"data left required\">{$lang['strowner']}</th>\n";				echo "<td class=\"data1\"><select name=\"owner\">";				while (!$users->EOF) {					$uname = $users->fields['usename'];					echo "<option value=\"", htmlspecialchars($uname), "\"",						($uname == $owner) ? ' selected="selected"' : '', ">", htmlspecialchars($uname), "</option>\n";					$users->moveNext();				}				echo "</select></td></tr>\n";			}			if ($data->hasSharedComments()){				$rs = $data->getDatabaseComment($_REQUEST['alterdatabase']);				$comment = isset($rs->fields['description']) ? $rs->fields['description'] : '';				echo "<tr><th class=\"data left\">{$lang['strcomment']}</th>\n";				echo "<td class=\"data1\">";				echo "<textarea rows=\"3\" cols=\"32\" name=\"dbcomment\">",					htmlspecialchars($comment), "</textarea></td></tr>\n";			}			echo "</table>\n";			echo "<input type=\"hidden\" name=\"action\" value=\"alter\" />\n";			echo $misc->form;			echo "<input type=\"hidden\" name=\"oldname\" value=\"",				htmlspecialchars($_REQUEST['alterdatabase']), "\" />\n";			echo "<input type=\"submit\" name=\"alter\" value=\"{$lang['stralter']}\" />\n";			echo "<input type=\"submit\" name=\"cancel\" value=\"{$lang['strcancel']}\" />\n";			echo "</form>\n";		}		else {			if (!isset($_POST['owner'])) $_POST['owner'] = '';			if (!isset($_POST['dbcomment'])) $_POST['dbcomment'] = '';			if ($data->alterDatabase($_POST['oldname'], $_POST['newname'], $_POST['owner'], $_POST['dbcomment']) == 0) {				$_reload_browser = true;				doDefault($lang['strdatabasealtered']);			}			else				doDefault($lang['strdatabasealteredbad']);		}	}	/**	 * Show confirmation of drop and perform actual drop	 */	function doDrop($confirm) {		global $data, $misc;		global $lang, $_reload_drop_database;		if (empty($_REQUEST['dropdatabase']) && empty($_REQUEST['ma'])) {			doDefault($lang['strspecifydatabasetodrop']);			exit();		}		if ($confirm) {            $misc->printTrail('database');            $misc->printTitle($lang['strdrop'], 'pg.database.drop');	        echo "<form action=\"all_db.php\" method=\"post\">\n";            //If multi drop            if (isset($_REQUEST['ma'])) {			    foreach($_REQUEST['ma'] as $v) {			        $a = unserialize(htmlspecialchars_decode($v, ENT_QUOTES));				    echo "<p>", sprintf($lang['strconfdropdatabase'], $misc->printVal($a['database'])), "</p>\n";				    printf('<input type="hidden" name="dropdatabase[]" value="%s" />', htmlspecialchars($a['database']));			    }			} else {		            echo "<p>", sprintf($lang['strconfdropdatabase'], $misc->printVal($_REQUEST['dropdatabase'])), "</p>\n";			        echo "<input type=\"hidden\" name=\"dropdatabase\" value=\"", htmlspecialchars($_REQUEST['dropdatabase']), "\" />\n";            }// END if multi drop			echo "<input type=\"hidden\" name=\"action\" value=\"drop\" />\n";        	echo $misc->form;			echo "<input type=\"submit\" name=\"drop\" value=\"{$lang['strdrop']}\" />\n";			echo "<input type=\"submit\" name=\"cancel\" value=\"{$lang['strcancel']}\" />\n";			echo "</form>\n";		} // END confirm		else {            //If multi drop            if (is_array($_REQUEST['dropdatabase'])) {                $msg = '';                foreach($_REQUEST['dropdatabase'] as $d) {					$status = $data->dropDatabase($d);					if ($status == 0)						$msg.= sprintf('%s: %s<br />', htmlentities($d), $lang['strdatabasedropped']);					else {						doDefault(sprintf('%s%s: %s<br />', $msg, htmlentities($d), $lang['strdatabasedroppedbad']));						return;					}				}// Everything went fine, back to Default page...                $_reload_drop_database = true;                doDefault($msg);            } else {			    $status = $data->dropDatabase($_POST['dropdatabase']);			    if ($status == 0) {				    $_reload_drop_database = true;				    doDefault($lang['strdatabasedropped']);			    }			    else				    doDefault($lang['strdatabasedroppedbad']);            }		}//END DROP    }// END FUNCTION	/**	 * Displays a screen where they can enter a new database	 */	function doCreate($msg = '') {		global $data, $misc;		global $lang;		$misc->printTrail('server');		$misc->printTitle($lang['strcreatedatabase'], 'pg.database.create');		$misc->printMsg($msg);		if (!isset($_POST['formName'])) $_POST['formName'] = '';		// Default encoding is that in language file		if (!isset($_POST['formEncoding'])) {			if (isset($lang['appdbencoding']))				$_POST['formEncoding'] = $lang['appdbencoding'];			else				$_POST['formEncoding'] = '';		}		if (!isset($_POST['formTemplate'])) $_POST['formTemplate'] = 'template1';		if (!isset($_POST['formSpc'])) $_POST['formSpc'] = '';		if (!isset($_POST['formComment'])) $_POST['formComment'] = '';		// Fetch a list of databases in the cluster		$templatedbs = $data->getDatabases(false);		// Fetch all tablespaces from the database		if ($data->hasTablespaces()) $tablespaces = $data->getTablespaces();		echo "<form action=\"all_db.php\" method=\"post\">\n";		echo "<table>\n";		echo "\t<tr>\n\t\t<th class=\"data left required\">{$lang['strname']}</th>\n";		echo "\t\t<td class=\"data1\"><input name=\"formName\" size=\"32\" maxlength=\"{$data->_maxNameLen}\" value=\"",			htmlspecialchars($_POST['formName']), "\" /></td>\n\t</tr>\n";		echo "\t<tr>\n\t\t<th class=\"data left required\">{$lang['strtemplatedb']}</th>\n";		echo "\t\t<td class=\"data1\">\n";		echo "\t\t\t<select name=\"formTemplate\">\n";		// Always offer template0 and template1 		echo "\t\t\t\t<option value=\"template0\"",			($_POST['formTemplate'] == 'template0') ? ' selected="selected"' : '', ">template0</option>\n";		echo "\t\t\t\t<option value=\"template1\"",			($_POST['formTemplate'] == 'template1') ? ' selected="selected"' : '', ">template1</option>\n";		while (!$templatedbs->EOF) {			$dbname = htmlspecialchars($templatedbs->fields['datname']);			if ($dbname != 'template1') { 				// filter out for $conf[show_system] users so we dont get duplicates 				echo "\t\t\t\t<option value=\"{$dbname}\"",					($dbname == $_POST['formTemplate']) ? ' selected="selected"' : '', ">{$dbname}</option>\n";			}			$templatedbs->moveNext();		}		echo "\t\t\t</select>\n";		echo "\t\t</td>\n\t</tr>\n";		// ENCODING		echo "\t<tr>\n\t\t<th class=\"data left required\">{$lang['strencoding']}</th>\n";		echo "\t\t<td class=\"data1\">\n";		echo "\t\t\t<select name=\"formEncoding\">\n";		echo "\t\t\t\t<option value=\"\"></option>\n";		while (list ($key) = each ($data->codemap)) {		    echo "\t\t\t\t<option value=\"", htmlspecialchars($key), "\"",				($key == $_POST['formEncoding']) ? ' selected="selected"' : '', ">",				$misc->printVal($key), "</option>\n";		}		echo "\t\t\t</select>\n";		echo "\t\t</td>\n\t</tr>\n";		if ($data->hasDatabaseCollation()) {			if (!isset($_POST['formCollate'])) $_POST['formCollate'] = '';			if (!isset($_POST['formCType'])) $_POST['formCType'] = '';			// LC_COLLATE			echo "\t<tr>\n\t\t<th class=\"data left\">{$lang['strcollation']}</th>\n";			echo "\t\t<td class=\"data1\">\n";			echo "\t\t\t<input name=\"formCollate\" value=\"", htmlspecialchars($_POST['formCollate']), "\" />\n";			echo "\t\t</td>\n\t</tr>\n";			// LC_CTYPE			echo "\t<tr>\n\t\t<th class=\"data left\">{$lang['strctype']}</th>\n";			echo "\t\t<td class=\"data1\">\n";			echo "\t\t\t<input name=\"formCType\" value=\"", htmlspecialchars($_POST['formCType']), "\" />\n";			echo "\t\t</td>\n\t</tr>\n";		}		// Tablespace (if there are any)		if ($data->hasTablespaces() && $tablespaces->recordCount() > 0) {			echo "\t<tr>\n\t\t<th class=\"data left\">{$lang['strtablespace']}</th>\n";			echo "\t\t<td class=\"data1\">\n\t\t\t<select name=\"formSpc\">\n";			// Always offer the default (empty) option			echo "\t\t\t\t<option value=\"\"",				($_POST['formSpc'] == '') ? ' selected="selected"' : '', "></option>\n";			// Display all other tablespaces			while (!$tablespaces->EOF) {				$spcname = htmlspecialchars($tablespaces->fields['spcname']);				echo "\t\t\t\t<option value=\"{$spcname}\"",					($spcname == $_POST['formSpc']) ? ' selected="selected"' : '', ">{$spcname}</option>\n";				$tablespaces->moveNext();			}			echo "\t\t\t</select>\n\t\t</td>\n\t</tr>\n";		}		// Comments (if available)		if ($data->hasSharedComments()) {			echo "\t<tr>\n\t\t<th class=\"data left\">{$lang['strcomment']}</th>\n";			echo "\t\t<td><textarea name=\"formComment\" rows=\"3\" cols=\"32\">",				htmlspecialchars($_POST['formComment']), "</textarea></td>\n\t</tr>\n";		}		echo "</table>\n";		echo "<p><input type=\"hidden\" name=\"action\" value=\"save_create\" />\n";		echo $misc->form;		echo "<input type=\"submit\" value=\"{$lang['strcreate']}\" />\n";		echo "<input type=\"submit\" name=\"cancel\" value=\"{$lang['strcancel']}\" /></p>\n";		echo "</form>\n";	}	/**	 * Actually creates the new view in the database	 */	function doSaveCreate() {		global $data, $lang, $_reload_browser;		// Default tablespace to null if it isn't set		if (!isset($_POST['formSpc'])) $_POST['formSpc'] = null;		// Default comment to blank if it isn't set		if (!isset($_POST['formComment'])) $_POST['formComment'] = null;		// Default collate to blank if it isn't set		if (!isset($_POST['formCollate'])) $_POST['formCollate'] = null;		// Default ctype to blank if it isn't set		if (!isset($_POST['formCType'])) $_POST['formCType'] = null;		// Check that they've given a name and a definition		if ($_POST['formName'] == '') doCreate($lang['strdatabaseneedsname']);		else {			$status = $data->createDatabase($_POST['formName'], $_POST['formEncoding'], $_POST['formSpc'],				$_POST['formComment'], $_POST['formTemplate'], $_POST['formCollate'], $_POST['formCType']);			if ($status == 0) {				$_reload_browser = true;				doDefault($lang['strdatabasecreated']);			}			else				doCreate($lang['strdatabasecreatedbad']);		}	}	/**	 * Displays options for cluster download	 */	function doExport($msg = '') {		global $data, $misc;		global $lang;		$misc->printTrail('server');		$misc->printTabs('server','export');		$misc->printMsg($msg);		echo "<form action=\"dbexport.php\" method=\"post\">\n";		echo "<table>\n";		echo "<tr><th class=\"data\">{$lang['strformat']}</th><th class=\"data\">{$lang['stroptions']}</th></tr>\n";		// Data only		echo "<tr><th class=\"data left\" rowspan=\"2\">";		echo "<input type=\"radio\" id=\"what1\" name=\"what\" value=\"dataonly\" checked=\"checked\" /><label for=\"what1\">{$lang['strdataonly']}</label></th>\n";		echo "<td>{$lang['strformat']}\n";		echo "<select name=\"d_format\">\n";		echo "<option value=\"copy\">COPY</option>\n";		echo "<option value=\"sql\">SQL</option>\n";		echo "</select>\n</td>\n</tr>\n";		echo "<tr><td><input type=\"checkbox\" id=\"d_oids\" name=\"d_oids\" /><label for=\"d_oids\">{$lang['stroids']}</label></td>\n</tr>\n";		// Structure only		echo "<tr><th class=\"data left\"><input type=\"radio\" id=\"what2\" name=\"what\" value=\"structureonly\" /><label for=\"what2\">{$lang['strstructureonly']}</label></th>\n";		echo "<td><input type=\"checkbox\" id=\"s_clean\" name=\"s_clean\" /><label for=\"s_clean\">{$lang['strdrop']}</label></td>\n</tr>\n";		// Structure and data		echo "<tr><th class=\"data left\" rowspan=\"3\">";		echo "<input type=\"radio\" id=\"what3\" name=\"what\" value=\"structureanddata\" /><label for=\"what3\">{$lang['strstructureanddata']}</label></th>\n";		echo "<td>{$lang['strformat']}\n";		echo "<select name=\"sd_format\">\n";		echo "<option value=\"copy\">COPY</option>\n";		echo "<option value=\"sql\">SQL</option>\n";		echo "</select>\n</td>\n</tr>\n";		echo "<tr><td><input type=\"checkbox\" id=\"sd_clean\" name=\"sd_clean\" /><label for=\"sd_clean\">{$lang['strdrop']}</label></td>\n</tr>\n";		echo "<tr><td><input type=\"checkbox\" id=\"sd_oids\" name=\"sd_oids\" /><label for=\"sd_oids\">{$lang['stroids']}</label></td>\n</tr>\n";		echo "</table>\n";		echo "<h3>{$lang['stroptions']}</h3>\n";		echo "<p><input type=\"radio\" id=\"output1\" name=\"output\" value=\"show\" checked=\"checked\" /><label for=\"output1\">{$lang['strshow']}</label>\n";		echo "<br/><input type=\"radio\" id=\"output2\" name=\"output\" value=\"download\" /><label for=\"output2\">{$lang['strdownload']}</label></p>\n";		echo "<p><input type=\"hidden\" name=\"action\" value=\"export\" />\n";		echo "<input type=\"hidden\" name=\"subject\" value=\"server\" />\n";		echo $misc->form;		echo "<input type=\"submit\" value=\"{$lang['strexport']}\" /></p>\n";		echo "</form>\n";	}	/**	 * Show default list of databases in the server	 */	function doDefault($msg = '') {		global $data, $conf, $misc;		global $lang;		$misc->printTrail('server');		$misc->printTabs('server','databases');		$misc->printMsg($msg);		$databases = $data->getDatabases();		$columns = array(			'database' => array(				'title' => $lang['strdatabase'],				'field' => field('datname'),				'url'   => "redirect.php?subject=database&amp;{$misc->href}&amp;",				'vars'  => array('database' => 'datname'),			),			'owner' => array(				'title' => $lang['strowner'],				'field' => field('datowner'),			),			'encoding' => array(				'title' => $lang['strencoding'],				'field' => field('datencoding'),			),			'lc_collate' => array(				'title' => $lang['strcollation'],				'field' => field('datcollate'),			),			'lc_ctype' => array(				'title' => $lang['strctype'],				'field' => field('datctype'),			),			'tablespace' => array(				'title' => $lang['strtablespace'],				'field' => field('tablespace'),			),			'dbsize' => array(				'title' => $lang['strsize'],				'field' => field('dbsize'),				'type' => 'prettysize',			),			'actions' => array(				'title' => $lang['stractions'],			),			'comment' => array(				'title' => $lang['strcomment'],				'field' => field('datcomment'),			),		);		$actions = array(			'multiactions' => array(				'keycols' => array('database' => 'datname'),				'url' => 'all_db.php',				'default' => null,			),			'drop' => array(				'title' => $lang['strdrop'],				'url'   => "all_db.php?action=confirm_drop&amp;subject=database&amp;{$misc->href}&amp;",				'vars'  => array('dropdatabase' => 'datname'),				'multiaction' => 'confirm_drop',			),			'privileges' => array(				'title' => $lang['strprivileges'],				'url'   => "privileges.php?subject=database&amp;{$misc->href}&amp;",				'vars'  => array('database' => 'datname'),			)		);		if ($data->hasAlterDatabase() ) {			$actions['alter'] = array(				'title' => $lang['stralter'],				'url'   => "all_db.php?action=confirm_alter&amp;subject=database&amp;{$misc->href}&amp;",				'vars'  => array('alterdatabase' => 'datname')			);		}		if (!$data->hasTablespaces()) unset($columns['tablespace']);		if (!$data->hasServerAdminFuncs()) unset($columns['dbsize']);		if (!$data->hasDatabaseCollation()) unset($columns['lc_collate'], $columns['lc_ctype']);		if (!isset($data->privlist['database'])) unset($actions['privileges']);		$misc->printTable($databases, $columns, $actions, $lang['strnodatabases']);		echo "<p><a class=\"navlink\" href=\"all_db.php?action=create&amp;{$misc->href}\">{$lang['strcreatedatabase']}</a></p>\n";	}	function doTree() {		global $misc, $data, $lang;		$databases = $data->getDatabases();		$reqvars = $misc->getRequestVars('database');		$attrs = array(			'text'   => field('datname'),			'icon'   => 'Database',			'toolTip'=> field('datcomment'),			'action' => url('redirect.php',							$reqvars,							array('database' => field('datname'))						),			'branch' => url('database.php',							$reqvars,							array(								'action' => 'tree',								'database' => field('datname')							)						),		);		$misc->printTreeXML($databases, $attrs);		exit;	}	if ($action == 'tree') doTree();	$misc->printHeader($lang['strdatabases']);	$misc->printBody();	switch ($action) {		case 'export':			doExport();			break;		case 'save_create':			if (isset($_POST['cancel'])) doDefault();			else doSaveCreate();			break;		case 'create':			doCreate();			break;		case 'drop':			if (isset($_REQUEST['drop'])) doDrop(false);			else doDefault();			break;		case 'confirm_drop':			doDrop(true);			break;		case 'alter':			if (isset($_POST['oldname']) && isset($_POST['newname']) && !isset($_POST['cancel']) ) doAlter(false);			else doDefault();			break;		case 'confirm_alter':			doAlter(true);			break;		default:			doDefault();			break;	}	$misc->printFooter();?>
<?php	/**	 * Common relation browsing function that can be used for views,	 * tables, reports, arbitrary queries, etc. to avoid code duplication.	 * @param $query The SQL SELECT string to execute	 * @param $count The same SQL query, but only retrieves the count of the rows (AS total)	 * @param $return_url The return URL	 * @param $return_desc The return link name	 * @param $page The current page	 *	 * $Id: display.php,v 1.68 2008/04/14 12:44:27 ioguix Exp $	 */	// Prevent timeouts on large exports (non-safe mode only)	if (!ini_get('safe_mode')) set_time_limit(0);	// Include application functions	include_once('./libraries/lib.inc.php');	global $conf, $lang;	$action = (isset($_REQUEST['action'])) ? $_REQUEST['action'] : '';	/**	 * Show confirmation of edit and perform actual update	 */	function doEditRow($confirm, $msg = '') {		global $data, $misc, $conf;		global $lang;		if (is_array($_REQUEST['key']))           $key = $_REQUEST['key'];        else           $key = unserialize($_REQUEST['key']);		if ($confirm) {			$misc->printTrail($_REQUEST['subject']);			$misc->printTitle($lang['streditrow']);			$misc->printMsg($msg);			$attrs = $data->getTableAttributes($_REQUEST['table']);			$rs = $data->browseRow($_REQUEST['table'], $key);			if (($conf['autocomplete'] != 'disable')) {				$fksprops = $misc->getAutocompleteFKProperties($_REQUEST['table']);				if ($fksprops !== false)					echo $fksprops['code'];			}			else $fksprops = false;			echo "<form action=\"display.php\" method=\"post\" id=\"ac_form\">\n";			$elements = 0;			$error = true;						if ($rs->recordCount() == 1 && $attrs->recordCount() > 0) {				echo "<table>\n";				// Output table header				echo "<tr><th class=\"data\">{$lang['strcolumn']}</th><th class=\"data\">{$lang['strtype']}</th>";				echo "<th class=\"data\">{$lang['strformat']}</th>\n";				echo "<th class=\"data\">{$lang['strnull']}</th><th class=\"data\">{$lang['strvalue']}</th></tr>";				$i = 0;				while (!$attrs->EOF) {					$attrs->fields['attnotnull'] = $data->phpBool($attrs->fields['attnotnull']);					$id = (($i % 2) == 0 ? '1' : '2');										// Initialise variables					if (!isset($_REQUEST['format'][$attrs->fields['attname']]))						$_REQUEST['format'][$attrs->fields['attname']] = 'VALUE';										echo "<tr class=\"data{$id}\">\n";					echo "<td style=\"white-space:nowrap;\">", $misc->printVal($attrs->fields['attname']), "</td>";					echo "<td style=\"white-space:nowrap;\">\n";					echo $misc->printVal($data->formatType($attrs->fields['type'], $attrs->fields['atttypmod']));					echo "<input type=\"hidden\" name=\"types[", htmlspecialchars($attrs->fields['attname']), "]\" value=\"", 						htmlspecialchars($attrs->fields['type']), "\" /></td>";					$elements++;					echo "<td style=\"white-space:nowrap;\">\n";					echo "<select name=\"format[", htmlspecialchars($attrs->fields['attname']), "]\">\n";					echo "<option value=\"VALUE\"", ($_REQUEST['format'][$attrs->fields['attname']] == 'VALUE') ? ' selected="selected"' : '', ">{$lang['strvalue']}</option>\n";					echo "<option value=\"EXPRESSION\"", ($_REQUEST['format'][$attrs->fields['attname']] == 'EXPRESSION') ? ' selected="selected"' : '', ">{$lang['strexpression']}</option>\n";					echo "</select>\n</td>\n";					$elements++;					echo "<td style=\"white-space:nowrap;\">";					// Output null box if the column allows nulls (doesn't look at CHECKs or ASSERTIONS)					if (!$attrs->fields['attnotnull']) {						// Set initial null values						if ($_REQUEST['action'] == 'confeditrow' && $rs->fields[$attrs->fields['attname']] === null) {							$_REQUEST['nulls'][$attrs->fields['attname']] = 'on';						}						echo "<input type=\"checkbox\" name=\"nulls[{$attrs->fields['attname']}]\"",							isset($_REQUEST['nulls'][$attrs->fields['attname']]) ? ' checked="checked"' : '', " /></td>\n";						$elements++;					}					else						echo "&nbsp;</td>";					echo "<td id=\"row_att_{$attrs->fields['attnum']}\" style=\"white-space:nowrap;\">";					$extras = array();					// If the column allows nulls, then we put a JavaScript action on the data field to unset the					// NULL checkbox as soon as anything is entered in the field.  We use the $elements variable to 					// keep track of which element offset we're up to.  We can't refer to the null checkbox by name					// as it contains '[' and ']' characters.					if (!$attrs->fields['attnotnull']) {						$extras['onChange'] = 'elements[' . ($elements - 1) . '].checked = false;';					}					if (($fksprops !== false) && isset($fksprops['byfield'][$attrs->fields['attnum']])) {						$extras['id'] = "attr_{$attrs->fields['attnum']}";						$extras['autocomplete'] = 'off';					}					echo $data->printField("values[{$attrs->fields['attname']}]", $rs->fields[$attrs->fields['attname']], $attrs->fields['type'], $extras);					echo "</td>";					$elements++;					echo "</tr>\n";					$i++;					$attrs->moveNext();				}				echo "</table>\n";				$error = false;			}			elseif ($rs->recordCount() != 1) {				echo "<p>{$lang['strrownotunique']}</p>\n";							}			else {				echo "<p>{$lang['strinvalidparam']}</p>\n";			}			echo "<input type=\"hidden\" name=\"action\" value=\"editrow\" />\n";			echo $misc->form;			if (isset($_REQUEST['table']))				echo "<input type=\"hidden\" name=\"table\" value=\"", htmlspecialchars($_REQUEST['table']), "\" />\n";			if (isset($_REQUEST['subject']))				echo "<input type=\"hidden\" name=\"subject\" value=\"", htmlspecialchars($_REQUEST['subject']), "\" />\n";			if (isset($_REQUEST['query']))				echo "<input type=\"hidden\" name=\"query\" value=\"", htmlspecialchars($_REQUEST['query']), "\" />\n";			if (isset($_REQUEST['count']))				echo "<input type=\"hidden\" name=\"count\" value=\"", htmlspecialchars($_REQUEST['count']), "\" />\n";			if (isset($_REQUEST['return_url']))				echo "<input type=\"hidden\" name=\"return_url\" value=\"", htmlspecialchars($_REQUEST['return_url']), "\" />\n";			if (isset($_REQUEST['return_desc']))				echo "<input type=\"hidden\" name=\"return_desc\" value=\"", htmlspecialchars($_REQUEST['return_desc']), "\" />\n";			echo "<input type=\"hidden\" name=\"page\" value=\"", htmlspecialchars($_REQUEST['page']), "\" />\n";			echo "<input type=\"hidden\" name=\"sortkey\" value=\"", htmlspecialchars($_REQUEST['sortkey']), "\" />\n";			echo "<input type=\"hidden\" name=\"sortdir\" value=\"", htmlspecialchars($_REQUEST['sortdir']), "\" />\n";			echo "<input type=\"hidden\" name=\"strings\" value=\"", htmlspecialchars($_REQUEST['strings']), "\" />\n";			echo "<input type=\"hidden\" name=\"key\" value=\"", htmlspecialchars(serialize($key)), "\" />\n";			echo "<p>";			if (!$error) echo "<input type=\"submit\" name=\"save\" value=\"{$lang['strsave']}\" />\n";			echo "<input type=\"submit\" name=\"cancel\" value=\"{$lang['strcancel']}\" />\n";			if($fksprops !== false) {				if ($conf['autocomplete'] != 'default off')					echo "<input type=\"checkbox\" id=\"no_ac\" value=\"1\" checked=\"checked\" /><label for=\"no_ac\">{$lang['strac']}</label>\n";				else					echo "<input type=\"checkbox\" id=\"no_ac\" value=\"0\" /><label for=\"no_ac\">{$lang['strac']}</label>\n";			}			echo "</p>\n";			echo "</form>\n";		}		else {			if (!isset($_POST['values'])) $_POST['values'] = array();			if (!isset($_POST['nulls'])) $_POST['nulls'] = array();						$status = $data->editRow($_POST['table'], $_POST['values'], $_POST['nulls'], 				$_POST['format'], $_POST['types'], unserialize($_POST['key']));			if ($status == 0)				doBrowse($lang['strrowupdated']);			elseif ($status == -2)				doEditRow(true, $lang['strrownotunique']);			else				doEditRow(true, $lang['strrowupdatedbad']);		}	}		/**	 * Show confirmation of drop and perform actual drop	 */	function doDelRow($confirm) {		global $data, $misc;		global $lang;		if ($confirm) {			$misc->printTrail($_REQUEST['subject']);			$misc->printTitle($lang['strdeleterow']);			echo "<p>{$lang['strconfdeleterow']}</p>\n";						echo "<form action=\"display.php\" method=\"post\">\n";			echo "<input type=\"hidden\" name=\"action\" value=\"delrow\" />\n";			echo $misc->form;			if (isset($_REQUEST['table']))				echo "<input type=\"hidden\" name=\"table\" value=\"", htmlspecialchars($_REQUEST['table']), "\" />\n";			if (isset($_REQUEST['subject']))				echo "<input type=\"hidden\" name=\"subject\" value=\"", htmlspecialchars($_REQUEST['subject']), "\" />\n";			if (isset($_REQUEST['query']))				echo "<input type=\"hidden\" name=\"query\" value=\"", htmlspecialchars($_REQUEST['query']), "\" />\n";			if (isset($_REQUEST['count']))				echo "<input type=\"hidden\" name=\"count\" value=\"", htmlspecialchars($_REQUEST['count']), "\" />\n";			if (isset($_REQUEST['return_url']))				echo "<input type=\"hidden\" name=\"return_url\" value=\"", htmlspecialchars($_REQUEST['return_url']), "\" />\n";			if (isset($_REQUEST['return_desc']))				echo "<input type=\"hidden\" name=\"return_desc\" value=\"", htmlspecialchars($_REQUEST['return_desc']), "\" />\n";			echo "<input type=\"hidden\" name=\"page\" value=\"", htmlspecialchars($_REQUEST['page']), "\" />\n";			echo "<input type=\"hidden\" name=\"sortkey\" value=\"", htmlspecialchars($_REQUEST['sortkey']), "\" />\n";			echo "<input type=\"hidden\" name=\"sortdir\" value=\"", htmlspecialchars($_REQUEST['sortdir']), "\" />\n";			echo "<input type=\"hidden\" name=\"strings\" value=\"", htmlspecialchars($_REQUEST['strings']), "\" />\n";			echo "<input type=\"hidden\" name=\"key\" value=\"", htmlspecialchars(serialize($_REQUEST['key'])), "\" />\n";			echo "<input type=\"submit\" name=\"yes\" value=\"{$lang['stryes']}\" />\n";			echo "<input type=\"submit\" name=\"no\" value=\"{$lang['strno']}\" />\n";			echo "</form>\n";		}		else {			$status = $data->deleteRow($_POST['table'], unserialize($_POST['key']));			if ($status == 0)				doBrowse($lang['strrowdeleted']);			elseif ($status == -2)				doBrowse($lang['strrownotunique']);			else							doBrowse($lang['strrowdeletedbad']);		}			}		/* build & return the FK information data structure 	 * used when deciding if a field should have a FK link or not*/	function &getFKInfo() {		global $data, $misc, $lang;		 		// Get the foreign key(s) information from the current table		$fkey_information = array('byconstr' => array(), 'byfield' => array());		if (isset($_REQUEST['table'])) {			$constraints = $data->getConstraintsWithFields($_REQUEST['table']);			if ($constraints->recordCount() > 0) {				/* build the common parts of the url for the FK  */				$fk_return_url = "{$misc->href}&amp;subject=table&amp;table=". urlencode($_REQUEST['table']);				if (isset($_REQUEST['page'])) $fk_return_url .= "&amp;page=" . urlencode($_REQUEST['page']);				if (isset($_REQUEST['query'])) $fk_return_url .= "&amp;query=" . urlencode($_REQUEST['query']);				if (isset($_REQUEST['search_path'])) $fk_return_url .= "&amp;search_path=" . urlencode($_REQUEST['search_path']);				/* yes, we double urlencode fk_return_url so parameters here don't 				 * overwrite real one when included in the final url */				$fkey_information['common_url'] = $misc->getHREF('schema') .'&amp;subject=table&amp;return_url=display.php?'					. urlencode($fk_return_url) .'&amp;return_desc='. urlencode($lang['strback']);				/* build the FK constraints data structure */				while (!$constraints->EOF) {					$constr =& $constraints->fields;					if ($constr['contype'] == 'f') {						if (!isset($fkey_information['byconstr'][$constr['conid']])) {							$fkey_information['byconstr'][$constr['conid']] = array (								'url_data' => 'table='. urlencode($constr['f_table']) .'&amp;schema='. urlencode($constr['f_schema']),								'fkeys' => array(),								'consrc' => $constr['consrc']							);						}						$fkey_information['byconstr'][$constr['conid']]['fkeys'][$constr['p_field']] = $constr['f_field'];						if (!isset($fkey_information['byfield'][$constr['p_field']]))							$fkey_information['byfield'][$constr['p_field']] = array();						$fkey_information['byfield'][$constr['p_field']][] = $constr['conid'];					}					$constraints->moveNext();				}			}		}		return $fkey_information;	}	/* Print table header cells 	 * @param $sortLink must be urlencoded already	 * */	function printTableHeaderCells(&$rs, $sortLink, $withOid) {		global $misc, $data, $conf;		$j = 0;		foreach ($rs->fields as $k => $v) {			if (($k === $data->id) && ( !($withOid && $conf['show_oids']) )) {				$j++;				continue;			}			$finfo = $rs->fetchField($j);			if ($sortLink === false) {				echo "<th class=\"data\">", $misc->printVal($finfo->name), "</th>\n";			}			else {				echo "<th class=\"data\"><a href=\"display.php?{$sortLink}&amp;sortkey=", ($j + 1), "&amp;sortdir=";				// Sort direction opposite to current direction, unless it's currently ''				echo ($_REQUEST['sortdir'] == 'asc' && $_REQUEST['sortkey'] == ($j + 1)) ? 'desc' : 'asc';				echo "&amp;strings=", urlencode($_REQUEST['strings']), 					"&amp;page=" . urlencode($_REQUEST['page']), "\">", 					$misc->printVal($finfo->name), "</a></th>\n";			}			$j++;		}		reset($rs->fields);	}	/* Print data-row cells */	function printTableRowCells(&$rs, &$fkey_information, $withOid) {		global $data, $misc, $conf;		$j = 0;				if (!isset($_REQUEST['strings'])) $_REQUEST['strings'] = 'collapsed';		foreach ($rs->fields as $k => $v) {			$finfo = $rs->fetchField($j++);			if (($k === $data->id) && ( !($withOid && $conf['show_oids']) )) continue;			elseif ($v !== null && $v == '') echo "<td>&nbsp;</td>";			else {				echo "<td style=\"white-space:nowrap;\">";				if (($v !== null) && isset($fkey_information['byfield'][$k])) {					foreach ($fkey_information['byfield'][$k] as $conid) {						$query_params = $fkey_information['byconstr'][$conid]['url_data'];						foreach ($fkey_information['byconstr'][$conid]['fkeys'] as $p_field => $f_field) {							$query_params .= '&amp;'. urlencode("fkey[{$f_field}]") .'='. urlencode($rs->fields[$p_field]);						}						/* $fkey_information['common_url'] is already urlencoded */						$query_params .= '&amp;'. $fkey_information['common_url'];						echo "<div style=\"display:inline-block;\">";						echo "<a class=\"fk fk_". htmlentities($conid) ."\" href=\"display.php?{$query_params}\">";						echo "<img src=\"".$misc->icon('ForeignKey')."\" style=\"vertical-align:middle;\" alt=\"[fk]\" title=\""							. htmlentities($fkey_information['byconstr'][$conid]['consrc'])							."\" />";						echo "</a>";						echo "</div>";					}					echo $misc->printVal($v, $finfo->type, array('null' => true, 'clip' => ($_REQUEST['strings']=='collapsed'), 'class' => 'fk_value'));				} else {					echo $misc->printVal($v, $finfo->type, array('null' => true, 'clip' => ($_REQUEST['strings']=='collapsed')));				}				echo "</td>";			}		}	}	/* Print the FK row, used in ajax requests */	function doBrowseFK() {		global $data, $misc, $lang;		$ops = array();		foreach($_REQUEST['fkey'] as $x => $y) {			$ops[$x] = '=';		}		$query = $data->getSelectSQL($_REQUEST['table'], array(), $_REQUEST['fkey'], $ops);		$_REQUEST['query'] = $query;		$fkinfo =& getFKInfo();		$max_pages = 1;		// Retrieve page from query.  $max_pages is returned by reference.		$rs = $data->browseQuery('SELECT', $_REQUEST['table'], $_REQUEST['query'],  			null, null, 1, 1, $max_pages);		echo "<a href=\"\" style=\"display:table-cell;\" class=\"fk_delete\"><img alt=\"[delete]\" src=\"". $misc->icon('Delete') ."\" /></a>\n";		echo "<div style=\"display:table-cell;\">";		if (is_object($rs) && $rs->recordCount() > 0) {			/* we are browsing a referenced table here			 * we should show OID if show_oids is true			 * so we give true to withOid in functions bellow			 * as 3rd paramter */					echo "<table><tr>";				printTableHeaderCells($rs, false, true);			echo "</tr>";			echo "<tr class=\"data1\">\n";				printTableRowCells($rs, $fkinfo, true);			echo "</tr>\n";			echo "</table>\n";		}		else			echo $lang['strnodata'];		echo "</div>";		exit;	}	/** 	 * Displays requested data	 */	function doBrowse($msg = '') {		global $data, $conf, $misc, $lang;		$save_history = false;		// If current page is not set, default to first page		if (!isset($_REQUEST['page']))			$_REQUEST['page'] = 1;		if (!isset($_REQUEST['nohistory']))			$save_history = true;				if (isset($_REQUEST['subject'])) {			$subject = $_REQUEST['subject'];			if (isset($_REQUEST[$subject])) $object = $_REQUEST[$subject];		}		else {			$subject = '';		}		$misc->printTrail(isset($subject) ? $subject : 'database');		/* This code is used when browsing FK in pure-xHTML (without js) */		if (isset($_REQUEST['fkey'])) {			$ops = array();			foreach($_REQUEST['fkey'] as $x => $y) {				$ops[$x] = '=';			}			$query = $data->getSelectSQL($_REQUEST['table'], array(), $_REQUEST['fkey'], $ops);			$_REQUEST['query'] = $query;		}				if (isset($object)) {			if (isset($_REQUEST['query'])) {				$_SESSION['sqlquery'] = $_REQUEST['query'];				$misc->printTitle($lang['strselect']);				$type = 'SELECT';			} else {				$misc->printTitle($lang['strbrowse']);				$type = 'TABLE';			}		} else {			$misc->printTitle($lang['strqueryresults']);			$type = 'QUERY';		}		$misc->printMsg($msg);		// If 'sortkey' is not set, default to ''		if (!isset($_REQUEST['sortkey'])) $_REQUEST['sortkey'] = '';		// If 'sortdir' is not set, default to ''		if (!isset($_REQUEST['sortdir'])) $_REQUEST['sortdir'] = '';			// If 'strings' is not set, default to collapsed 		if (!isset($_REQUEST['strings'])) $_REQUEST['strings'] = 'collapsed';			// Fetch unique row identifier, if this is a table browse request.		if (isset($object))			$key = $data->getRowIdentifier($object);		else			$key = array();				// Set the schema search path		if (isset($_REQUEST['search_path'])) {			if ($data->setSearchPath(array_map('trim',explode(',',$_REQUEST['search_path']))) != 0) {				return;			}		}		// Retrieve page from query.  $max_pages is returned by reference.		$rs = $data->browseQuery($type, 			isset($object) ? $object : null, 			isset($_REQUEST['query']) ? $_REQUEST['query'] : null, 			$_REQUEST['sortkey'], $_REQUEST['sortdir'], $_REQUEST['page'],			$conf['max_rows'], $max_pages);		$fkey_information =& getFKInfo();		// Build strings for GETs		$gets = $misc->href;		if (isset($object)) $gets .= "&amp;" . urlencode($subject) . '=' . urlencode($object);		if (isset($subject)) $gets .= "&amp;subject=" . urlencode($subject);		if (isset($_REQUEST['query'])) $gets .= "&amp;query=" . urlencode($_REQUEST['query']);		if (isset($_REQUEST['count'])) $gets .= "&amp;count=" . urlencode($_REQUEST['count']);		if (isset($_REQUEST['return_url'])) $gets .= "&amp;return_url=" . urlencode($_REQUEST['return_url']);		if (isset($_REQUEST['return_desc'])) $gets .= "&amp;return_desc=" . urlencode($_REQUEST['return_desc']);		if (isset($_REQUEST['search_path'])) $gets .= "&amp;search_path=" . urlencode($_REQUEST['search_path']);		if (isset($_REQUEST['table'])) $gets .= "&amp;table=" . urlencode($_REQUEST['table']);				// This string just contains sort info		$getsort = "sortkey=" . urlencode($_REQUEST['sortkey']) .			"&amp;sortdir=" . urlencode($_REQUEST['sortdir']);		if ($save_history && is_object($rs) && ($type == 'QUERY')) //{			$misc->saveScriptHistory($_REQUEST['query']);		if (is_object($rs) && $rs->recordCount() > 0) {			// Show page navigation			$misc->printPages($_REQUEST['page'], $max_pages, "display.php?page=%s&amp;{$gets}&amp;{$getsort}&amp;nohistory=t&amp;strings=" . urlencode($_REQUEST['strings']));			echo "<table id=\"data\">\n<tr>";			// Check that the key is actually in the result set.  This can occur for select			// operations where the key fields aren't part of the select.  XXX:  We should			// be able to support this, somehow.			foreach ($key as $v) {				// If a key column is not found in the record set, then we				// can't use the key.				if (!in_array($v, array_keys($rs->fields))) {					$key = array();					break;				}			}			// Display edit and delete actions if we have a key			if (sizeof($key) > 0)				echo "<th colspan=\"2\" class=\"data\">{$lang['stractions']}</th>\n";			/* we show OIDs only if we are in TABLE or SELECT type browsing */			printTableHeaderCells($rs, $gets, isset($object));			echo "</tr>\n";			$i = 0;					reset($rs->fields);			while (!$rs->EOF) {				$id = (($i % 2) == 0 ? '1' : '2');				echo "<tr class=\"data{$id}\">\n";				// Display edit and delete links if we have a key				if (sizeof($key) > 0) {					$key_str = '';					$has_nulls = false;					foreach ($key as $v) {						if ($rs->fields[$v] === null) {							$has_nulls = true;							break;						}						if ($key_str != '') $key_str .= '&amp;';						$key_str .= urlencode("key[{$v}]") . '=' . urlencode($rs->fields[$v]);					}					if ($has_nulls) {						echo "<td colspan=\"2\">&nbsp;</td>\n";					} else {						echo "<td class=\"opbutton{$id}\"><a href=\"display.php?action=confeditrow&amp;strings=", 							urlencode($_REQUEST['strings']), "&amp;page=", 							urlencode($_REQUEST['page']), "&amp;{$key_str}&amp;{$gets}&amp;{$getsort}\">{$lang['stredit']}</a></td>\n";						echo "<td class=\"opbutton{$id}\"><a href=\"display.php?action=confdelrow&amp;strings=", 							urlencode($_REQUEST['strings']), "&amp;page=", 							urlencode($_REQUEST['page']), "&amp;{$key_str}&amp;{$gets}&amp;{$getsort}\">{$lang['strdelete']}</a></td>\n";					}				}				print printTableRowCells($rs, $fkey_information, isset($object));				echo "</tr>\n";				$rs->moveNext();				$i++;			}			echo "</table>\n";			echo "<p>", $rs->recordCount(), " {$lang['strrows']}</p>\n";			// Show page navigation			$misc->printPages($_REQUEST['page'], $max_pages, "display.php?page=%s&amp;{$gets}&amp;{$getsort}&amp;strings=" . urlencode($_REQUEST['strings']));		}		else echo "<p>{$lang['strnodata']}</p>\n";		// Navigation links			echo "<ul class=\"navlink\">\n";		// Return		if (isset($_REQUEST['return_url']) && isset($_REQUEST['return_desc']))			echo "\t<li><a href=\"{$_REQUEST['return_url']}\">{$_REQUEST['return_desc']}</a></li>\n";		// Edit SQL link		if (isset($_REQUEST['query']))			echo "\t<li><a href=\"database.php?{$misc->href}&amp;action=sql&amp;paginate=on&amp;query=",				urlencode($_REQUEST['query']), "\">{$lang['streditsql']}</a></li>\n";		// Expand/Collapse		if ($_REQUEST['strings'] == 'expanded')			echo "\t<li><a href=\"display.php?{$gets}&amp;{$getsort}&amp;strings=collapsed&amp;page=", 				urlencode($_REQUEST['page']), "\">{$lang['strcollapse']}</a></li>\n";		else			echo "\t<li><a href=\"display.php?{$gets}&amp;{$getsort}&amp;strings=expanded&amp;page=", 				urlencode($_REQUEST['page']), "\">{$lang['strexpand']}</a></li>\n";		// Create report		if (isset($_REQUEST['query']) && ($subject !== 'report') && $conf['show_reports'] && isset($rs) && is_object($rs) && $rs->recordCount() > 0)			echo "\t<li><a href=\"reports.php?{$misc->href}&amp;action=create&amp;report_sql=",				urlencode($_REQUEST['query']), "&amp;paginate=", (isset($_REQUEST['paginate'])? urlencode($_REQUEST['paginate']):'f'), "\">{$lang['strcreatereport']}</a></li>\n";		// Create view and download		if (isset($_REQUEST['query']) && isset($rs) && is_object($rs) && $rs->recordCount() > 0) {			// Report views don't set a schema, so we need to disable create view in that case			if (isset($_REQUEST['schema'])) 				echo "\t<li><a href=\"views.php?action=create&amp;formDefinition=",					urlencode($_REQUEST['query']), "&amp;{$misc->href}\">{$lang['strcreateview']}</a></li>\n";			echo "\t<li><a href=\"dataexport.php?query=", urlencode($_REQUEST['query']);			if (isset($_REQUEST['search_path']))				echo "&amp;search_path=", urlencode($_REQUEST['search_path']);			echo "&amp;{$misc->href}\">{$lang['strdownload']}</a></li>\n";		}		// Insert		if (isset($object) && (isset($subject) && $subject == 'table'))			echo "\t<li><a href=\"tables.php?action=confinsertrow&amp;table=",				urlencode($object), "&amp;{$misc->href}\">{$lang['strinsert']}</a></li>\n";		// Refresh		echo "\t<li><a href=\"display.php?{$gets}&amp;{$getsort}&amp;strings=", urlencode($_REQUEST['strings']), 			"&amp;page=" . urlencode($_REQUEST['page']),			"\">{$lang['strrefresh']}</a></li>\n";		echo "</ul>\n";	}	/* shortcuts: this function exit the script for ajax purpose */	if ($action == 'dobrowsefk') {		doBrowseFK();	}	$scripts  = "<script src=\"libraries/js/jquery.js\" type=\"text/javascript\"></script>\n";	$scripts .= "<script src=\"js/display.js\" type=\"text/javascript\"></script>";	$scripts .= "<script type=\"text/javascript\">\n";	$scripts .= "var Display = {\n";	$scripts .= "errmsg: '". str_replace("'", "\'", $lang['strconnectionfail']) ."'\n";	$scripts .= "};\n";	$scripts .= "</script>\n";	// If a table is specified, then set the title differently	if (isset($_REQUEST['subject']) && isset($_REQUEST[$_REQUEST['subject']]))		$misc->printHeader($lang['strtables'], $scripts);	else			$misc->printHeader($lang['strqueryresults']);	$misc->printBody();	switch ($action) {		case 'editrow':			if (isset($_POST['save'])) doEditRow(false);			else doBrowse();			break;		case 'confeditrow':			doEditRow(true);			break;		case 'delrow':			if (isset($_POST['yes'])) doDelRow(false);			else doBrowse();			break;		case 'confdelrow':			doDelRow(true);			break;		default:			doBrowse();			break;	}	$misc->printFooter();?>
<?php/** * Class to represent a database connection * * $Id: Connection.php,v 1.15 2008/02/18 21:42:47 ioguix Exp $ */include_once('./classes/database/ADODB_base.php');class Connection {	var $conn;		// The backend platform.  Set to UNKNOWN by default.	var $platform = 'UNKNOWN';		/**	 * Creates a new connection.  Will actually make a database connection.	 * @param $fetchMode Defaults to associative.  Override for different behaviour	 */	function Connection($host, $port, $sslmode, $user, $password, $database, $fetchMode = ADODB_FETCH_ASSOC) {		$this->conn = &ADONewConnection('postgres7');		$this->conn->setFetchMode($fetchMode);		// Ignore host if null		if ($host === null || $host == '')			if ($port !== null && $port != '')				$pghost = ':'.$port;			else				$pghost = '';		else			$pghost = "{$host}:{$port}";		// Add sslmode to $pghost as needed                if (($sslmode == 'disable') || ($sslmode == 'allow') || ($sslmode == 'prefer') || ($sslmode == 'require')) {                        $pghost .= ':'.$sslmode;                } elseif ($sslmode == 'legacy') {                        $pghost .= ' requiressl=1';                }		$this->conn->connect($pghost, $user, $password, $database);	}	/**	 * Gets the name of the correct database driver to use.  As a side effect,	 * sets the platform.	 * @param (return-by-ref) $description A description of the database and version	 * @return The class name of the driver eg. Postgres84	 * @return null if version is < 7.4	 * @return -3 Database-specific failure	 */	function getDriver(&$description) {		// If we're on a recent enough PHP 5, and against PostgreSQL 7.4 or		// higher, we don't need to query for the version.  This gives a great		// speed up.						if (function_exists('pg_version')) {			$v = pg_version($this->conn->_connectionID);			if (isset($v['server'])) $version = $v['server'];					}				// If we didn't manage to get the version without a query, query...		if (!isset($version)) {			$adodb = new ADODB_base($this->conn);				$sql = "SELECT VERSION() AS version";			$field = $adodb->selectField($sql, 'version');				// Check the platform, if it's mingw, set it			if (preg_match('/ mingw /i', $field))				$this->platform = 'MINGW';				$params = explode(' ', $field);			if (!isset($params[1])) return -3;				$version = $params[1]; // eg. 8.4.4		}				$description = "PostgreSQL {$version}";		// Detect version and choose appropriate database driver		switch (substr($version,0,3)) {			case '8.4': return 'Postgres'; break;			case '8.3': return 'Postgres83'; break;			case '8.2': return 'Postgres82'; break;			case '8.1': return 'Postgres81'; break;			case '8.0':			case '7.5': return 'Postgres80'; break;			case '7.4': return 'Postgres74'; break;		}		/* All <7.4 versions are not supported */		// if major version is 7 or less and wasn't catch in the		// switch/case block, we have an unsupported version.		if ((int)substr($version, 0, 1) < 8)			return null;		// If unknown version, then default to latest driver		return 'Postgres';	}	/** 	 * Get the last error in the connection	 * @return Error string	 */	function getLastError() {				if (function_exists('pg_errormessage'))			return pg_errormessage($this->conn->_connectionID);		else			return pg_last_error($this->conn->_connectionID);	}}?>
<?php	/**	 * Manage operators in a database	 *	 * $Id: operators.php,v 1.29 2007/08/31 18:30:11 ioguix Exp $	 */	// Include application functions	include_once('./libraries/lib.inc.php');		$action = (isset($_REQUEST['action'])) ? $_REQUEST['action'] : '';	if (!isset($msg)) $msg = '';	/**	 * Show read only properties for an operator	 */	function doProperties($msg = '') {		global $data, $misc;		global $lang;		$misc->printTrail('operator');		$misc->printTitle($lang['strproperties'],'pg.operator');		$misc->printMsg($msg);				$oprdata = $data->getOperator($_REQUEST['operator_oid']);		$oprdata->fields['oprcanhash'] = $data->phpBool($oprdata->fields['oprcanhash']);		if ($oprdata->recordCount() > 0) {			echo "<table>\n";			echo "<tr><th class=\"data left\">{$lang['strname']}</th>\n";			echo "<td class=\"data1\">", $misc->printVal($oprdata->fields['oprname']), "</td></tr>\n";			echo "<tr><th class=\"data left\">{$lang['strleftarg']}</th>\n";			echo "<td class=\"data1\">", $misc->printVal($oprdata->fields['oprleftname']), "</td></tr>\n";			echo "<tr><th class=\"data left\">{$lang['strrightarg']}</th>\n";			echo "<td class=\"data1\">", $misc->printVal($oprdata->fields['oprrightname']), "</td></tr>\n";			echo "<tr><th class=\"data left\">{$lang['strcommutator']}</th>\n";			echo "<td class=\"data1\">", $misc->printVal($oprdata->fields['oprcom']), "</td></tr>\n";			echo "<tr><th class=\"data left\">{$lang['strnegator']}</th>\n";			echo "<td class=\"data1\">", $misc->printVal($oprdata->fields['oprnegate']), "</td></tr>\n";			echo "<tr><th class=\"data left\">{$lang['strjoin']}</th>\n";			echo "<td class=\"data1\">", $misc->printVal($oprdata->fields['oprjoin']), "</td></tr>\n";			echo "<tr><th class=\"data left\">{$lang['strhashes']}</th>\n";			echo "<td class=\"data1\">", ($oprdata->fields['oprcanhash']) ? $lang['stryes'] : $lang['strno'], "</td></tr>\n";			/* these field only exists in 8.2 and before in pg_catalog */			if (isset($oprdata->fields['oprlsortop'])) {				echo "<tr><th class=\"data left\">{$lang['strmerges']}</th>\n";				echo "<td class=\"data1\">", ($oprdata->fields['oprlsortop'] !== '0' && $oprdata->fields['oprrsortop'] !== '0') ? $lang['stryes'] : $lang['strno'], "</td></tr>\n";				echo "<tr><th class=\"data left\">{$lang['strrestrict']}</th>\n";				echo "<td class=\"data1\">", $misc->printVal($oprdata->fields['oprrest']), "</td></tr>\n";				echo "<tr><th class=\"data left\">{$lang['strleftsort']}</th>\n";				echo "<td class=\"data1\">", $misc->printVal($oprdata->fields['oprlsortop']), "</td></tr>\n";				echo "<tr><th class=\"data left\">{$lang['strrightsort']}</th>\n";				echo "<td class=\"data1\">", $misc->printVal($oprdata->fields['oprrsortop']), "</td></tr>\n";				echo "<tr><th class=\"data left\">{$lang['strlessthan']}</th>\n";				echo "<td class=\"data1\">", $misc->printVal($oprdata->fields['oprltcmpop']), "</td></tr>\n";				echo "<tr><th class=\"data left\">{$lang['strgreaterthan']}</th>\n";				echo "<td class=\"data1\">", $misc->printVal($oprdata->fields['oprgtcmpop']), "</td></tr>\n";			}			else {				echo "<tr><th class=\"data left\">{$lang['strmerges']}</th>\n";				echo "<td class=\"data1\">", $data->phpBool($oprdata->fields['oprcanmerge']) ? $lang['stryes'] : $lang['strno'], "</td></tr>\n";			}			echo "</table>\n";			echo "<p><a class=\"navlink\" href=\"operators.php?{$misc->href}\">{$lang['strshowalloperators']}</a></p>\n";		}		else			doDefault($lang['strinvalidparam']);	}	/**	 * Show confirmation of drop and perform actual drop	 */	function doDrop($confirm) {		global $data, $misc;		global $lang;		if ($confirm) {			$misc->printTrail('operator');			$misc->printTitle($lang['strdrop'], 'pg.operator.drop');						echo "<p>", sprintf($lang['strconfdropoperator'], $misc->printVal($_REQUEST['operator'])), "</p>\n";							echo "<form action=\"operators.php\" method=\"post\">\n";			echo "<p><input type=\"checkbox\" id=\"cascade\" name=\"cascade\" /> <label for=\"cascade\">{$lang['strcascade']}</label></p>\n";			echo "<p><input type=\"hidden\" name=\"action\" value=\"drop\" />\n";			echo "<input type=\"hidden\" name=\"operator\" value=\"", htmlspecialchars($_REQUEST['operator']), "\" />\n";			echo "<input type=\"hidden\" name=\"operator_oid\" value=\"", htmlspecialchars($_REQUEST['operator_oid']), "\" />\n";			echo $misc->form;			echo "<input type=\"submit\" name=\"drop\" value=\"{$lang['strdrop']}\" />\n";			echo "<input type=\"submit\" name=\"cancel\" value=\"{$lang['strcancel']}\" /></p>\n";			echo "</form>\n";		}		else {			$status = $data->dropOperator($_POST['operator_oid'], isset($_POST['cascade']));			if ($status == 0)				doDefault($lang['stroperatordropped']);			else				doDefault($lang['stroperatordroppedbad']);		}			}		/**	 * Show default list of operators in the database	 */	function doDefault($msg = '') {		global $data, $conf, $misc;		global $lang;				$misc->printTrail('schema');		$misc->printTabs('schema','operators');		$misc->printMsg($msg);				$operators = $data->getOperators();		$columns = array(			'operator' => array(				'title' => $lang['stroperator'],				'field' => field('oprname'),				'url'   => "operators.php?action=properties&amp;{$misc->href}&amp;",				'vars'  => array('operator' => 'oprname', 'operator_oid' => 'oid'),			),			'leftarg' => array(				'title' => $lang['strleftarg'],				'field' => field('oprleftname'),			),			'rightarg' => array(				'title' => $lang['strrightarg'],				'field' => field('oprrightname'),			),			'returns' => array(				'title' => $lang['strreturns'],				'field' => field('resultname'),			),			'actions' => array(				'title' => $lang['stractions'],			),			'comment' => array(				'title' => $lang['strcomment'],				'field' => field('oprcomment'),			),		);		$actions = array(			'drop' => array(				'title' => $lang['strdrop'],				'url'   => "operators.php?action=confirm_drop&amp;{$misc->href}&amp;",				'vars'  => array('operator' => 'oprname', 'operator_oid' => 'oid'),			),		);				$misc->printTable($operators, $columns, $actions, $lang['strnooperators']);		//		echo "<p><a class=\"navlink\" href=\"operators.php?action=create&amp;{$misc->href}\">{$lang['strcreateoperator']}</a></p>\n";	}	/**	 * Generate XML for the browser tree.	 */	function doTree() {		global $misc, $data;				$operators = $data->getOperators();				// Operator prototype: "type operator type"		$proto = concat(field('oprleftname'), ' ', field('oprname'), ' ', field('oprrightname'));				$reqvars = $misc->getRequestVars('operator');				$attrs = array(			'text'   => $proto,			'icon'   => 'Operator',			'toolTip'=> field('oprcomment'),			'action' => url('operators.php',							$reqvars,							array(								'action'  => 'properties',								'operator' => $proto,								'operator_oid' => field('oid')							)						)		);				$misc->printTreeXML($operators, $attrs);		exit;	}		if ($action == 'tree') doTree();		$misc->printHeader($lang['stroperators']);	$misc->printBody();	switch ($action) {		case 'save_create':			if (isset($_POST['cancel'])) doDefault();			else doSaveCreate();			break;		case 'create':			doCreate();			break;		case 'drop':			if (isset($_POST['cancel'])) doDefault();			else doDrop(false);			break;		case 'confirm_drop':			doDrop(true);			break;					case 'properties':			doProperties();			break;		default:			doDefault();			break;	}		$misc->printFooter();?>
<?php	/**	 * List reports in a database	 *	 * $Id: reports.php,v 1.34 2008/01/09 00:19:10 ioguix Exp $	 */	// Include application functions	include_once('./libraries/lib.inc.php');	$action = (isset($_REQUEST['action'])) ? $_REQUEST['action'] : '';	/**	 * Displays a screen where they can edit a report	 */	function doEdit($msg = '') {		global $data, $reportsdb, $misc;		global $lang;		// If it's a first, load then get the data from the database		$report = $reportsdb->getReport($_REQUEST['report_id']);		if ($_REQUEST['action'] == 'edit') {						$_POST['report_name'] = $report->fields['report_name'];			$_POST['db_name'] = $report->fields['db_name'];			$_POST['descr'] = $report->fields['descr'];			$_POST['report_sql'] = $report->fields['report_sql'];			if ($report->fields['paginate'] == 't') {				$_POST['paginate'] = TRUE;			}		}		// Get a list of available databases		$databases = $data->getDatabases();		$_REQUEST['report'] = $report->fields['report_name'];		$misc->printTrail('report');		$misc->printTitle($lang['stredit']);		$misc->printMsg($msg);		echo "<form action=\"reports.php\" method=\"post\">\n";		echo $misc->form;		echo "<table style=\"width: 100%\">\n";		echo "<tr><th class=\"data left required\">{$lang['strname']}</th>\n";		echo "<td class=\"data1\"><input name=\"report_name\" size=\"32\" maxlength=\"{$data->_maxNameLen}\" value=\"",			htmlspecialchars($_POST['report_name']), "\" /></td></tr>\n";		echo "<tr><th class=\"data left required\">{$lang['strdatabase']}</th>\n";		echo "<td class=\"data1\"><select name=\"db_name\">\n";		while (!$databases->EOF) {			$dbname = $databases->fields['datname'];			echo "<option value=\"", htmlspecialchars($dbname), "\"",			($dbname == $_POST['db_name']) ? ' selected="selected"' : '', ">",				htmlspecialchars($dbname), "</option>\n";			$databases->moveNext();		}		echo "</select></td></tr>\n";		echo "<tr><th class=\"data left\">{$lang['strcomment']}</th>\n";		echo "<td class=\"data1\"><textarea style=\"width:100%;\" rows=\"5\" cols=\"50\" name=\"descr\">",			htmlspecialchars($_POST['descr']), "</textarea></td></tr>\n";		echo "<tr><th class=\"data left required\">{$lang['strsql']}</th>\n";		echo "<td class=\"data1\"><textarea style=\"width:100%;\" rows=\"15\" cols=\"50\" name=\"report_sql\">",			htmlspecialchars($_POST['report_sql']), "</textarea></td></tr>\n";		echo "</table>\n";		echo "<label for=\"paginate\"><input type=\"checkbox\" id=\"paginate\" name=\"paginate\"", (isset($_POST['paginate']) ? ' checked="checked"' : ''), " />&nbsp;{$lang['strpaginate']}</label>\n";		echo "<p><input type=\"hidden\" name=\"action\" value=\"save_edit\" />\n";		echo "<input type=\"submit\" value=\"{$lang['strsave']}\" />\n";		echo "<input type=\"submit\" name=\"cancel\" value=\"{$lang['strcancel']}\" /></p>\n";		echo "<input type=\"hidden\" name=\"report_id\" value=\"{$report->fields['report_id']}\" />\n";		echo "</form>\n";	}	/**	 * Saves changes to a report	 */	function doSaveEdit() {		global $reportsdb, $lang;		if (!isset($_POST['report_name'])) $_POST['report_name'] = '';		if (!isset($_POST['db_name'])) $_POST['db_name'] = '';		if (!isset($_POST['descr'])) $_POST['descr'] = '';		if (!isset($_POST['report_sql'])) $_POST['report_sql'] = '';		// Check that they've given a name and a definition		if ($_POST['report_name'] == '') doEdit($lang['strreportneedsname']);		elseif ($_POST['report_sql'] == '') doEdit($lang['strreportneedsdef']);		else {			$status = $reportsdb->alterReport($_POST['report_id'], $_POST['report_name'], $_POST['db_name'],								$_POST['descr'], $_POST['report_sql'], isset($_POST['paginate']));			if ($status == 0)				doDefault($lang['strreportcreated']);			else				doEdit($lang['strreportcreatedbad']);		}	}	/**	 * Display read-only properties of a report	 */	function doProperties($msg = '') {		global $data, $reportsdb, $misc;		global $lang;		$report = $reportsdb->getReport($_REQUEST['report_id']);		$_REQUEST['report'] = $report->fields['report_name'];		$misc->printTrail('report');		$misc->printTitle($lang['strproperties']);		$misc->printMsg($msg);		if ($report->recordCount() == 1) {			echo "<table>\n";			echo "<tr><th class=\"data left\">{$lang['strname']}</th>\n";			echo "<td class=\"data1\">", $misc->printVal($report->fields['report_name']), "</td></tr>\n";			echo "<tr><th class=\"data left\">{$lang['strdatabase']}</th>\n";			echo "<td class=\"data1\">", $misc->printVal($report->fields['db_name']), "</td></tr>\n";			echo "<tr><th class=\"data left\">{$lang['strcomment']}</th>\n";			echo "<td class=\"data1\">", $misc->printVal($report->fields['descr']), "</td></tr>\n";			echo "<tr><th class=\"data left\">{$lang['strsql']}</th>\n";			echo "<td class=\"data1\">", $misc->printVal($report->fields['report_sql']), "</td></tr>\n";			echo "</table>\n";		}		else echo "<p>{$lang['strinvalidparam']}</p>\n";		echo "<ul class=\"navlink\">\n\t<li><a href=\"reports.php?{$misc->href}\">{$lang['strshowallreports']}</a></li>\n";		echo "\t<li><a href=\"reports.php?action=edit&amp;{$misc->href}&amp;report_id={$report->fields['report_id']}\">{$lang['stredit']}</a></li>\n</ul>\n";	}	/**	 * Displays a screen where they can enter a new report	 */	function doCreate($msg = '') {		global $data, $reportsdb, $misc;		global $lang;		if (!isset($_REQUEST['report_name'])) $_REQUEST['report_name'] = '';		if (!isset($_REQUEST['db_name'])) $_REQUEST['db_name'] = '';		if (!isset($_REQUEST['descr'])) $_REQUEST['descr'] = '';		if (!isset($_REQUEST['report_sql'])) $_REQUEST['report_sql'] = '';		if (isset($_REQUEST['database'])) {			$_REQUEST['db_name'] = $_REQUEST['database'];			unset($_REQUEST['database']);			$misc->setForm();		}				$databases = $data->getDatabases();		$misc->printTrail('server');		$misc->printTitle($lang['strcreatereport']);		$misc->printMsg($msg);		echo "<form action=\"reports.php\" method=\"post\">\n";		echo $misc->form;		echo "<table style=\"width: 100%\">\n";		echo "<tr><th class=\"data left required\">{$lang['strname']}</th>\n";		echo "<td class=\"data1\"><input name=\"report_name\" size=\"32\" maxlength=\"{$data->_maxNameLen}\" value=\"",			htmlspecialchars($_REQUEST['report_name']), "\" /></td></tr>\n";		echo "<tr><th class=\"data left required\">{$lang['strdatabase']}</th>\n";		echo "<td class=\"data1\"><select name=\"db_name\">\n";		while (!$databases->EOF) {			$dbname = $databases->fields['datname'];			echo "<option value=\"", htmlspecialchars($dbname), "\"",			($dbname == $_REQUEST['db_name']) ? ' selected="selected"' : '', ">",				htmlspecialchars($dbname), "</option>\n";			$databases->moveNext();		}		echo "</select></td></tr>\n";		echo "<tr><th class=\"data left\">{$lang['strcomment']}</th>\n";		echo "<td class=\"data1\"><textarea style=\"width:100%;\" rows=\"5\" cols=\"50\" name=\"descr\">",			htmlspecialchars($_REQUEST['descr']), "</textarea></td></tr>\n";		echo "<tr><th class=\"data left required\">{$lang['strsql']}</th>\n";		echo "<td class=\"data1\"><textarea style=\"width:100%;\" rows=\"15\" cols=\"50\" name=\"report_sql\">",			htmlspecialchars($_REQUEST['report_sql']), "</textarea></td></tr>\n";		echo "</table>\n";		echo "<label for=\"paginate\"><input type=\"checkbox\" id=\"paginate\" name=\"paginate\"", (isset($_REQUEST['paginate']) ? ' checked="checked"' : ''), " />&nbsp;{$lang['strpaginate']}</label>\n";		echo "<p><input type=\"hidden\" name=\"action\" value=\"save_create\" />\n";		echo "<input type=\"submit\" value=\"{$lang['strsave']}\" />\n";		echo "<input type=\"submit\" name=\"cancel\" value=\"{$lang['strcancel']}\" /></p>\n";		echo "</form>\n";	}	/**	 * Actually creates the new report in the database	 */	function doSaveCreate() {		global $reportsdb, $lang;		if (!isset($_POST['report_name'])) $_POST['report_name'] = '';		if (!isset($_POST['db_name'])) $_POST['db_name'] = '';		if (!isset($_POST['descr'])) $_POST['descr'] = '';		if (!isset($_POST['report_sql'])) $_POST['report_sql'] = '';		// Check that they've given a name and a definition		if ($_POST['report_name'] == '') doCreate($lang['strreportneedsname']);		elseif ($_POST['report_sql'] == '') doCreate($lang['strreportneedsdef']);		else {			$status = $reportsdb->createReport($_POST['report_name'], $_POST['db_name'],								$_POST['descr'], $_POST['report_sql'], isset($_POST['paginate']));			if ($status == 0)				doDefault($lang['strreportcreated']);			else				doCreate($lang['strreportcreatedbad']);		}	}	/**	 * Show confirmation of drop and perform actual drop	 */	function doDrop($confirm) {		global $reportsdb, $misc;		global $lang;		if ($confirm) {			// Fetch report from the database			$report = $reportsdb->getReport($_REQUEST['report_id']);			$_REQUEST['report'] = $report->fields['report_name'];			$misc->printTrail('report');			$misc->printTitle($lang['strdrop']);			echo "<p>", sprintf($lang['strconfdropreport'], $misc->printVal($report->fields['report_name'])), "</p>\n";			echo "<form action=\"reports.php\" method=\"post\">\n";			echo $misc->form;			echo "<input type=\"hidden\" name=\"action\" value=\"drop\" />\n";			echo "<input type=\"hidden\" name=\"report_id\" value=\"", htmlspecialchars($_REQUEST['report_id']), "\" />\n";			echo "<input type=\"submit\" name=\"drop\" value=\"{$lang['strdrop']}\" />\n";			echo "<input type=\"submit\" name=\"cancel\" value=\"{$lang['strcancel']}\" />\n";			echo "</form>\n";		}		else {			$status = $reportsdb->dropReport($_POST['report_id']);			if ($status == 0)				doDefault($lang['strreportdropped']);			else				doDefault($lang['strreportdroppedbad']);		}	}	/**	 * Show default list of reports in the database	 */	function doDefault($msg = '') {		global $data, $misc, $reportsdb;		global $lang;		$misc->printTrail('server');		$misc->printTabs('server','reports');		$misc->printMsg($msg);				$reports = $reportsdb->getReports();		$columns = array(			'report' => array(				'title' => $lang['strreport'],				'field' => field('report_name'),				'url'   => "reports.php?action=properties&amp;{$misc->href}&amp;",				'vars'  => array('report_id' => 'report_id'),			),			'database' => array(				'title' => $lang['strdatabase'],				'field' => field('db_name'),			),			'created' => array(				'title' => $lang['strcreated'],				'field' => field('date_created'),			),			'actions' => array(				'title' => $lang['stractions'],			),			'comment' => array(				'title' => $lang['strcomment'],				'field' => field('descr'),			),		);				$return_url = urlencode("reports.php?{$misc->href}");				$actions = array(			'run' => array(				'title' => $lang['strexecute'],				'url'   => "sql.php?subject=report&amp;{$misc->href}&amp;return_url={$return_url}&amp;return_desc=".urlencode($lang['strback'])."&amp;",				'vars'  => array('report' => 'report_name', 'database' => 'db_name', 'reportid' => 'report_id', 'paginate' => 'paginate'),			),			'edit' => array(				'title' => $lang['stredit'],				'url'   => "reports.php?action=edit&amp;{$misc->href}&amp;",				'vars'  => array('report_id' => 'report_id'),			),			'drop' => array(				'title' => $lang['strdrop'],				'url'   => "reports.php?action=confirm_drop&amp;{$misc->href}&amp;",				'vars'  => array('report_id' => 'report_id'),			),		);				$misc->printTable($reports, $columns, $actions, $lang['strnoreports']);				echo "<p><a class=\"navlink\" href=\"reports.php?action=create&amp;{$misc->href}\">{$lang['strcreatereport']}</a></p>\n";	}		$misc->printHeader($lang['strreports']);	$misc->printBody();	// Create a database accessor for the reports database	include_once('./classes/Reports.php');	$reportsdb = new Reports($status);	if ($status != 0) {		$misc->printTrail('server');		$misc->printTabs('server','reports');		$misc->printMsg($lang['strnoreportsdb']);	}	else {		switch ($action) {			case 'save_edit':				if (isset($_POST['cancel'])) doDefault();				else doSaveEdit();				break;			case 'edit':				doEdit();				break;			case 'properties':				doProperties();				break;			case 'save_create':				if (isset($_POST['cancel'])) doDefault();				else doSaveCreate();				break;			case 'create':				doCreate();				break;			case 'drop':				if (isset($_POST['drop'])) doDrop(false);				else doDefault();				break;			case 'confirm_drop':				doDrop(true);				break;			default:				doDefault();				break;		}	}	$misc->printFooter();?>
<?php	/**	 * List extra information on a table	 *	 * $Id: info.php,v 1.14 2007/05/28 17:30:32 ioguix Exp $	 */	// Include application functions	include_once('./libraries/lib.inc.php');	$action = (isset($_REQUEST['action'])) ? $_REQUEST['action'] : '';	/**	 * List all the information on the table	 */	function doDefault($msg = '') {		global $data, $misc;		global $lang;		$misc->printTrail('table');		$misc->printTabs('table','info');		$misc->printMsg($msg);		// common params for printVal		$shownull = array('null' => true);		// Fetch info		$referrers = $data->getReferrers($_REQUEST['table']);		$parents = $data->getTableParents($_REQUEST['table']);		$children = $data->getTableChildren($_REQUEST['table']);		$tablestatstups = $data->getStatsTableTuples($_REQUEST['table']);		$tablestatsio = $data->getStatsTableIO($_REQUEST['table']);		$indexstatstups = $data->getStatsIndexTuples($_REQUEST['table']);		$indexstatsio = $data->getStatsIndexIO($_REQUEST['table']);        		// Check that there is some info		if (($referrers === -99 || ($referrers !== -99 && $referrers->recordCount() == 0)) 				&& $parents->recordCount() == 0 && $children->recordCount() == 0				&& ($tablestatstups->recordCount() == 0 && $tablestatsio->recordCount() == 0				&& $indexstatstups->recordCount() == 0 && $indexstatsio->recordCount() == 0)) {			$misc->printMsg($lang['strnoinfo']);		}		else {			// Referring foreign tables			if ($referrers !== -99 && $referrers->recordCount() > 0) {				echo "<h3>{$lang['strreferringtables']}</h3>\n";				echo "<table>\n";				echo "\t<tr>\n\t\t";				echo "<th class=\"data\">{$lang['strschema']}</th>";				echo "<th class=\"data\">{$lang['strtable']}</th>";				echo "<th class=\"data\">{$lang['strname']}</th><th class=\"data\">{$lang['strdefinition']}</th>";				echo "<th class=\"data\">{$lang['stractions']}</th>\n";				echo "\t</tr>\n";				$i = 0;								while (!$referrers->EOF) {					$id = ( ($i % 2 ) == 0 ? '1' : '2' );					echo "\t<tr class=\"data{$id}\">\n\t\t";					echo "<td>", $misc->printVal($referrers->fields['nspname']), "</td>";					echo "<td>", $misc->printVal($referrers->fields['relname']), "</td>";					echo "<td>", $misc->printVal($referrers->fields['conname']), "</td>";					echo "<td>", $misc->printVal($referrers->fields['consrc']), "</td>";					echo "<td class=\"opbutton{$id}\"><a href=\"constraints.php?{$misc->href}", 						"&amp;schema=", urlencode($referrers->fields['nspname']),						"&amp;table=", urlencode($referrers->fields['relname']), "\">{$lang['strproperties']}</a></td>\n";					echo "\t</tr>\n";					$referrers->movenext();					$i++;				}					echo "</table>\n";			}						// Parent tables			if ($parents->recordCount() > 0) {				echo "<h3>{$lang['strparenttables']}</h3>\n";				echo "<table>\n";				echo "\t<tr>\n\t\t";				echo "<th class=\"data\">{$lang['strschema']}</th>";				echo "\t\t<th class=\"data\">{$lang['strtable']}</th>";							echo "<th class=\"data\">{$lang['stractions']}</th>\n";				echo "\t</tr>\n";				$i = 0;								while (!$parents->EOF) {					$id = ( ($i % 2 ) == 0 ? '1' : '2' );					echo "\t<tr class=\"data{$id}\">\n";					echo "\t\t<td>", $misc->printVal($parents->fields['nspname']), "</td>";					echo "<td>", $misc->printVal($parents->fields['relname']), "</td>";					echo "<td class=\"opbutton{$id}\"><a href=\"tblproperties.php?{$misc->href}",						"&amp;schema=", urlencode($parents->fields['nspname']),						"&amp;table=", urlencode($parents->fields['relname']), "\">{$lang['strproperties']}</a></td>\n";					echo "\t</tr>\n";					$parents->movenext();					$i++;				}					echo "</table>\n";			}				// Child tables			if ($children->recordCount() > 0) {				echo "<h3>{$lang['strchildtables']}</h3>\n";				echo "<table>\n";				echo "\t<tr>\n";				echo "<th class=\"data\">{$lang['strschema']}</th>";				echo "\t\t<th class=\"data\">{$lang['strtable']}</th>";							echo "<th class=\"data\">{$lang['stractions']}</th>\n";				echo "\t</tr>\n";				$i = 0;								while (!$children->EOF) {					$id = ( ($i % 2 ) == 0 ? '1' : '2' );					echo "\t<tr class=\"data{$id}\">\n";					echo "\t\t<td>", $misc->printVal($children->fields['nspname']), "</td>";					echo "<td>", $misc->printVal($children->fields['relname']), "</td>";					echo "<td class=\"opbutton{$id}\"><a href=\"tblproperties.php?{$misc->href}",						"&amp;schema=", urlencode($children->fields['nspname']),						"&amp;table=", urlencode($children->fields['relname']), "\">{$lang['strproperties']}</a></td>\n";					echo "\t</tr>\n";					$children->movenext();					$i++;				}					echo "</table>\n";			}			// Row performance			if ($tablestatstups->recordCount() > 0) {				echo "<h3>{$lang['strrowperf']}</h3>\n";				echo "<table>\n";				echo "\t<tr>\n";				echo "\t\t<th class=\"data\" colspan=\"2\">{$lang['strsequential']}</th>\n";				echo "\t\t<th class=\"data\" colspan=\"2\">{$lang['strindex']}</th>\n";				echo "\t\t<th class=\"data\" colspan=\"3\">{$lang['strrows2']}</th>\n";				echo "\t</tr>\n";				echo "\t<tr>\n";				echo "\t\t<th class=\"data\">{$lang['strscan']}</th>\n";				echo "\t\t<th class=\"data\">{$lang['strread']}</th>\n";				echo "\t\t<th class=\"data\">{$lang['strscan']}</th>\n";				echo "\t\t<th class=\"data\">{$lang['strfetch']}</th>\n";				echo "\t\t<th class=\"data\">{$lang['strinsert']}</th>\n";				echo "\t\t<th class=\"data\">{$lang['strupdate']}</th>\n";				echo "\t\t<th class=\"data\">{$lang['strdelete']}</th>\n";				echo "\t</tr>\n";				$i = 0;								while (!$tablestatstups->EOF) {					$id = ( ($i % 2 ) == 0 ? '1' : '2' );					echo "\t<tr class=\"data{$id}\">\n";					echo "\t\t<td>", $misc->printVal($tablestatstups->fields['seq_scan'], 'int4', $shownull), "</td>\n";					echo "\t\t<td>", $misc->printVal($tablestatstups->fields['seq_tup_read'], 'int4', $shownull), "</td>\n";					echo "\t\t<td>", $misc->printVal($tablestatstups->fields['idx_scan'], 'int4', $shownull), "</td>\n";					echo "\t\t<td>", $misc->printVal($tablestatstups->fields['idx_tup_fetch'], 'int4', $shownull), "</td>\n";					echo "\t\t<td>", $misc->printVal($tablestatstups->fields['n_tup_ins'], 'int4', $shownull), "</td>\n";					echo "\t\t<td>", $misc->printVal($tablestatstups->fields['n_tup_upd'], 'int4', $shownull), "</td>\n";					echo "\t\t<td>", $misc->printVal($tablestatstups->fields['n_tup_del'], 'int4', $shownull), "</td>\n";					echo "\t</tr>\n";					$tablestatstups->movenext();					$i++;				}					echo "</table>\n";			}			// I/O performance			if ($tablestatsio->recordCount() > 0) {				echo "<h3>{$lang['strioperf']}</h3>\n";				echo "<table>\n";				echo "\t<tr>\n";				echo "\t\t<th class=\"data\" colspan=\"3\">{$lang['strheap']}</th>\n";				echo "\t\t<th class=\"data\" colspan=\"3\">{$lang['strindex']}</th>\n";				echo "\t\t<th class=\"data\" colspan=\"3\">{$lang['strtoast']}</th>\n";				echo "\t\t<th class=\"data\" colspan=\"3\">{$lang['strtoastindex']}</th>\n";				echo "\t</tr>\n";				echo "\t<tr>\n";				echo "\t\t<th class=\"data\">{$lang['strdisk']}</th>\n";				echo "\t\t<th class=\"data\">{$lang['strcache']}</th>\n";				echo "\t\t<th class=\"data\">{$lang['strpercent']}</th>\n";				echo "\t\t<th class=\"data\">{$lang['strdisk']}</th>\n";				echo "\t\t<th class=\"data\">{$lang['strcache']}</th>\n";				echo "\t\t<th class=\"data\">{$lang['strpercent']}</th>\n";				echo "\t\t<th class=\"data\">{$lang['strdisk']}</th>\n";				echo "\t\t<th class=\"data\">{$lang['strcache']}</th>\n";				echo "\t\t<th class=\"data\">{$lang['strpercent']}</th>\n";				echo "\t\t<th class=\"data\">{$lang['strdisk']}</th>\n";				echo "\t\t<th class=\"data\">{$lang['strcache']}</th>\n";				echo "\t\t<th class=\"data\">{$lang['strpercent']}</th>\n";				echo "\t</tr>\n";				$i = 0;								while (!$tablestatsio->EOF) {					$id = ( ($i % 2 ) == 0 ? '1' : '2' );					echo "\t<tr class=\"data{$id}\">\n";					$total = $tablestatsio->fields['heap_blks_hit'] + $tablestatsio->fields['heap_blks_read'];					if ($total > 0)	$percentage = round(($tablestatsio->fields['heap_blks_hit'] / $total) * 100);					else $percentage = 0;					echo "\t\t<td>", $misc->printVal($tablestatsio->fields['heap_blks_read'], 'int4', $shownull), "</td>\n";					echo "\t\t<td>", $misc->printVal($tablestatsio->fields['heap_blks_hit'], 'int4', $shownull), "</td>\n";					echo "\t\t<td>({$percentage}{$lang['strpercent']})</td>\n";					$total = $tablestatsio->fields['idx_blks_hit'] + $tablestatsio->fields['idx_blks_read'];					if ($total > 0)	$percentage = round(($tablestatsio->fields['idx_blks_hit'] / $total) * 100);					else $percentage = 0;					echo "\t\t<td>", $misc->printVal($tablestatsio->fields['idx_blks_read'], 'int4', $shownull), "</td>\n";					echo "\t\t<td>", $misc->printVal($tablestatsio->fields['idx_blks_hit'], 'int4', $shownull), "</td>\n";					echo "\t\t<td>({$percentage}{$lang['strpercent']})</td>\n";					$total = $tablestatsio->fields['toast_blks_hit'] + $tablestatsio->fields['toast_blks_read'];					if ($total > 0)	$percentage = round(($tablestatsio->fields['toast_blks_hit'] / $total) * 100);					else $percentage = 0;					echo "\t\t<td>", $misc->printVal($tablestatsio->fields['toast_blks_read'], 'int4', $shownull), "</td>\n";					echo "\t\t<td>", $misc->printVal($tablestatsio->fields['toast_blks_hit'], 'int4', $shownull), "</td>\n";					echo "\t\t<td>({$percentage}{$lang['strpercent']})</td>\n";					$total = $tablestatsio->fields['tidx_blks_hit'] + $tablestatsio->fields['tidx_blks_read'];					if ($total > 0)	$percentage = round(($tablestatsio->fields['tidx_blks_hit'] / $total) * 100);					else $percentage = 0;					echo "\t\t<td>", $misc->printVal($tablestatsio->fields['tidx_blks_read'], 'int4', $shownull), "</td>\n";					echo "\t\t<td>", $misc->printVal($tablestatsio->fields['tidx_blks_hit'], 'int4', $shownull), "</td>\n";					echo "\t\t<td>({$percentage}{$lang['strpercent']})</td>\n";					echo "\t</tr>\n";					$tablestatsio->movenext();					$i++;				}					echo "</table>\n";			}			// Index row performance			if ($indexstatstups->recordCount() > 0) {				echo "<h3>{$lang['stridxrowperf']}</h3>\n";				echo "<table>\n";				echo "\t<tr>\n";				echo "\t\t<th class=\"data\">{$lang['strindex']}</th>\n";				echo "\t\t<th class=\"data\">{$lang['strscan']}</th>\n";				echo "\t\t<th class=\"data\">{$lang['strread']}</th>\n";				echo "\t\t<th class=\"data\">{$lang['strfetch']}</th>\n";				echo "\t</tr>\n";				$i = 0;								while (!$indexstatstups->EOF) {					$id = ( ($i % 2 ) == 0 ? '1' : '2' );					echo "\t<tr class=\"data{$id}\">\n";					echo "\t\t<td>", $misc->printVal($indexstatstups->fields['indexrelname']), "</td>\n";					echo "\t\t<td>", $misc->printVal($indexstatstups->fields['idx_scan'], 'int4', $shownull), "</td>\n";					echo "\t\t<td>", $misc->printVal($indexstatstups->fields['idx_tup_read'], 'int4', $shownull), "</td>\n";					echo "\t\t<td>", $misc->printVal($indexstatstups->fields['idx_tup_fetch'], 'int4', $shownull), "</td>\n";					echo "\t</tr>\n";					$indexstatstups->movenext();					$i++;				}					echo "</table>\n";			}			// Index I/0 performance			if ($indexstatsio->recordCount() > 0) {				echo "<h3>{$lang['stridxioperf']}</h3>\n";				echo "<table>\n";				echo "\t<tr>\n";				echo "\t\t<th class=\"data\">{$lang['strindex']}</th>\n";				echo "\t\t<th class=\"data\">{$lang['strdisk']}</th>\n";				echo "\t\t<th class=\"data\">{$lang['strcache']}</th>\n";				echo "\t\t<th class=\"data\">{$lang['strpercent']}</th>\n";				echo "\t</tr>\n";				$i = 0;								while (!$indexstatsio->EOF) {					$id = ( ($i % 2 ) == 0 ? '1' : '2' );					echo "\t<tr class=\"data{$id}\">\n";					$total = $indexstatsio->fields['idx_blks_hit'] + $indexstatsio->fields['idx_blks_read'];					if ($total > 0)	$percentage = round(($indexstatsio->fields['idx_blks_hit'] / $total) * 100);					else $percentage = 0;					echo "\t\t<td>", $misc->printVal($indexstatsio->fields['indexrelname']), "</td>\n";					echo "\t\t<td>", $misc->printVal($indexstatsio->fields['idx_blks_read'], 'int4', $shownull), "</td>\n";					echo "\t\t<td>", $misc->printVal($indexstatsio->fields['idx_blks_hit'], 'int4', $shownull), "</td>\n";					echo "\t\t<td>({$percentage}{$lang['strpercent']})</td>\n";					echo "\t</tr>\n";					$indexstatsio->movenext();					$i++;				}					echo "</table>\n";			}		}	}	$misc->printHeader($lang['strtables'] . ' - ' . $_REQUEST['table'] . ' - ' . $lang['strinfo']);	$misc->printBody();		switch ($action) {		default:			doDefault();			break;	}		$misc->printFooter();?>
<?php	/**	 * List indexes on a table	 *	 * $Id: indexes.php,v 1.46 2008/01/08 22:50:29 xzilla Exp $	 */	// Include application functions	include_once('./libraries/lib.inc.php');	include_once('./classes/class.select.php');			$action = (isset($_REQUEST['action'])) ? $_REQUEST['action'] : '';	/**	 * Show confirmation of cluster index and perform actual cluster	 */	function doClusterIndex($confirm) {		global $data, $misc, $action;		global $lang;		if ($confirm) {			// Default analyze to on			$_REQUEST['analyze'] = true;						$misc->printTrail('index');			$misc->printTitle($lang['strclusterindex'],'pg.index.cluster');			echo "<p>", sprintf($lang['strconfcluster'], $misc->printVal($_REQUEST['index'])), "</p>\n";			echo "<form action=\"indexes.php\" method=\"post\">\n";			echo "<p><input type=\"checkbox\" id=\"analyze\" name=\"analyze\"", (isset($_REQUEST['analyze']) ? ' checked="checked"' : ''), " /><label for=\"analyze\">{$lang['stranalyze']}</label></p>\n";			echo "<input type=\"hidden\" name=\"action\" value=\"cluster_index\" />\n";			echo "<input type=\"hidden\" name=\"table\" value=\"", htmlspecialchars($_REQUEST['table']), "\" />\n";			echo "<input type=\"hidden\" name=\"index\" value=\"", htmlspecialchars($_REQUEST['index']), "\" />\n";			echo $misc->form;			echo "<input type=\"submit\" name=\"cluster\" value=\"{$lang['strclusterindex']}\" />\n";			echo "<input type=\"submit\" name=\"cancel\" value=\"{$lang['strcancel']}\" />\n";			echo "</form>\n";		}		else {			$status = $data->clusterIndex($_POST['table'], $_POST['index']);			if ($status == 0)				if (isset($_POST['analyze'])){					$status = $data->analyzeDB($_POST['table']);					if ($status == 0)						doDefault($lang['strclusteredgood'] . ' ' . $lang['stranalyzegood']);					else						doDefault($lang['stranalyzebad']);				} else					doDefault($lang['strclusteredgood']);			else				doDefault($lang['strclusteredbad']);		}	}	function doReindex() {		global $data, $lang;		$status = $data->reindex('INDEX', $_REQUEST['index']);		if ($status == 0)			doDefault($lang['strreindexgood']);		else			doDefault($lang['strreindexbad']);	}	/**	 * Displays a screen where they can enter a new index	 */	function doCreateIndex($msg = '') {		global $data, $misc;		global $lang;		if (!isset($_POST['formIndexName'])) $_POST['formIndexName'] = '';		if (!isset($_POST['formIndexType'])) $_POST['formIndexType'] = null;		if (!isset($_POST['formCols'])) $_POST['formCols'] = '';		if (!isset($_POST['formWhere'])) $_POST['formWhere'] = '';		if (!isset($_POST['formSpc'])) $_POST['formSpc'] = '';		$attrs = $data->getTableAttributes($_REQUEST['table']);		// Fetch all tablespaces from the database		if ($data->hasTablespaces()) $tablespaces = $data->getTablespaces();				$misc->printTrail('table');		$misc->printTitle($lang['strcreateindex'],'pg.index.create');		$misc->printMsg($msg);		$selColumns = new XHTML_select("TableColumnList",true,10);		$selColumns->set_style("width: 10em;");		if ($attrs->recordCount() > 0) {			while (!$attrs->EOF) {				$selColumns->add(new XHTML_Option($attrs->fields['attname']));				$attrs->moveNext();			}		}		$selIndex = new XHTML_select("IndexColumnList[]", true, 10);		$selIndex->set_style("width: 10em;");		$selIndex->set_attribute("id", "IndexColumnList");		$buttonAdd    = new XHTML_Button("add", ">>");		$buttonAdd->set_attribute("onclick", "buttonPressed(this);");		$buttonAdd->set_attribute("type", "button");		$buttonRemove = new XHTML_Button("remove", "<<");		$buttonRemove->set_attribute("onclick", "buttonPressed(this);");				$buttonRemove->set_attribute("type", "button");		echo "<form onsubmit=\"doSelectAll();\" name=\"formIndex\" action=\"indexes.php\" method=\"post\">\n";		echo "<table>\n";		echo "<tr><th class=\"data required\" colspan=\"3\">{$lang['strindexname']}</th></tr>";		echo "<tr>";		echo "<td class=\"data1\" colspan=\"3\"><input type=\"text\" name=\"formIndexName\" size=\"32\" maxlength=\"{$data->_maxNameLen}\" value=\"", 			htmlspecialchars($_POST['formIndexName']), "\" /></td></tr>";		echo "<tr><th class=\"data\">{$lang['strtablecolumnlist']}</th><th class=\"data\">&nbsp;</th>";		echo "<th class=\"data required\">{$lang['strindexcolumnlist']}</th></tr>\n";		echo "<tr><td class=\"data1\">" . $selColumns->fetch() . "</td>\n";		echo "<td class=\"data1\">" . $buttonRemove->fetch() . $buttonAdd->fetch() . "</td>";		echo "<td class=\"data1\">" . $selIndex->fetch() . "</td></tr>\n";		echo "</table>\n";		echo "<table> \n";		echo "<tr>";		echo "<th class=\"data left required\" scope=\"row\">{$lang['strindextype']}</th>";		echo "<td class=\"data1\"><select name=\"formIndexType\">";		foreach ($data->typIndexes as $v) {			echo "<option value=\"", htmlspecialchars($v), "\"",				($v == $_POST['formIndexType']) ? ' selected="selected"' : '', ">", htmlspecialchars($v), "</option>\n";		}		echo "</select></td></tr>\n";						echo "<tr>";		echo "<th class=\"data left\" scope=\"row\"><label for=\"formUnique\">{$lang['strunique']}</label></th>";		echo "<td class=\"data1\"><input type=\"checkbox\" id=\"formUnique\" name=\"formUnique\"", (isset($_POST['formUnique']) ? 'checked="checked"' : ''), " /></td>";		echo "</tr>";		echo "<tr>";		echo "<th class=\"data left\" scope=\"row\">{$lang['strwhere']}</th>";		echo "<td class=\"data1\">(<input name=\"formWhere\" size=\"32\" maxlength=\"{$data->_maxNameLen}\" value=\"", 			htmlspecialchars($_POST['formWhere']), "\" />)</td>";		echo "</tr>";				// Tablespace (if there are any)		if ($data->hasTablespaces() && $tablespaces->recordCount() > 0) {			echo "\t<tr>\n\t\t<th class=\"data left\">{$lang['strtablespace']}</th>\n";			echo "\t\t<td class=\"data1\">\n\t\t\t<select name=\"formSpc\">\n";			// Always offer the default (empty) option			echo "\t\t\t\t<option value=\"\"",				($_POST['formSpc'] == '') ? ' selected="selected"' : '', "></option>\n";			// Display all other tablespaces			while (!$tablespaces->EOF) {				$spcname = htmlspecialchars($tablespaces->fields['spcname']);				echo "\t\t\t\t<option value=\"{$spcname}\"",					($spcname == $_POST['formSpc']) ? ' selected="selected"' : '', ">{$spcname}</option>\n";				$tablespaces->moveNext();			}			echo "\t\t\t</select>\n\t\t</td>\n\t</tr>\n";		}		if ($data->hasConcurrentIndexBuild()) {			echo "<tr>";			echo "<th class=\"data left\" scope=\"row\"><label for=\"formConcur\">{$lang['strconcurrently']}</label></th>";			echo "<td class=\"data1\"><input type=\"checkbox\" id=\"formConcur\" name=\"formConcur\"", (isset($_POST['formConcur']) ? 'checked="checked"' : ''), " /></td>";			echo "</tr>";		}			echo "</table>";		echo "<p><input type=\"hidden\" name=\"action\" value=\"save_create_index\" />\n";		echo $misc->form;		echo "<input type=\"hidden\" name=\"table\" value=\"", htmlspecialchars($_REQUEST['table']), "\" />\n";		echo "<input type=\"submit\" value=\"{$lang['strcreate']}\" />\n";		echo "<input type=\"submit\" name=\"cancel\" value=\"{$lang['strcancel']}\" /></p>\n";		echo "</form>\n";	}	/**	 * Actually creates the new index in the database	 * @@ Note: this function can't handle columns with commas in them	 */	function doSaveCreateIndex() {		global $data;		global $lang;				// Handle databases that don't have partial indexes		if (!isset($_POST['formWhere'])) $_POST['formWhere'] = '';		// Default tablespace to null if it isn't set		if (!isset($_POST['formSpc'])) $_POST['formSpc'] = null;				// Check that they've given a name and at least one column		if ($_POST['formIndexName'] == '') doCreateIndex($lang['strindexneedsname']);		elseif (!isset($_POST['IndexColumnList']) || $_POST['IndexColumnList'] == '') doCreateIndex($lang['strindexneedscols']);		else {			$status = $data->createIndex($_POST['formIndexName'], $_POST['table'], $_POST['IndexColumnList'], 				$_POST['formIndexType'], isset($_POST['formUnique']), $_POST['formWhere'], $_POST['formSpc'], 				isset($_POST['formConcur']));			if ($status == 0)				doDefault($lang['strindexcreated']);			else				doCreateIndex($lang['strindexcreatedbad']);		}	}	/**	 * Show confirmation of drop index and perform actual drop	 */	function doDropIndex($confirm) {		global $data, $misc;		global $lang;		if ($confirm) {			$misc->printTrail('index');			$misc->printTitle($lang['strdrop'],'pg.index.drop');			echo "<p>", sprintf($lang['strconfdropindex'], $misc->printVal($_REQUEST['index'])), "</p>\n";			echo "<form action=\"indexes.php\" method=\"post\">\n";			echo "<input type=\"hidden\" name=\"action\" value=\"drop_index\" />\n";			echo "<input type=\"hidden\" name=\"table\" value=\"", htmlspecialchars($_REQUEST['table']), "\" />\n";			echo "<input type=\"hidden\" name=\"index\" value=\"", htmlspecialchars($_REQUEST['index']), "\" />\n";			echo $misc->form;			echo "<p><input type=\"checkbox\" id=\"cascade\" name=\"cascade\" /> <label for=\"cascade\">{$lang['strcascade']}</label></p>\n";			echo "<input type=\"submit\" name=\"drop\" value=\"{$lang['strdrop']}\" />\n";			echo "<input type=\"submit\" name=\"cancel\" value=\"{$lang['strcancel']}\" />\n";			echo "</form>\n";		}		else {			$status = $data->dropIndex($_POST['index'], isset($_POST['cascade']));			if ($status == 0)				doDefault($lang['strindexdropped']);			else				doDefault($lang['strindexdroppedbad']);		}	}	function doDefault($msg = '') {		global $data, $misc;		global $lang;				function indPre(&$rowdata, $actions) {			global $data, $lang;						if ($data->phpBool($rowdata->fields['indisprimary'])) {				$rowdata->fields['+constraints'] = $lang['strprimarykey'];				$actions['drop']['disable'] = true;			}			elseif ($data->phpBool($rowdata->fields['indisunique'])) {				$rowdata->fields['+constraints'] = $lang['struniquekey'];				$actions['drop']['disable'] = true;			}			else				$rowdata->fields['+constraints'] = '';						return $actions;		}				$misc->printTrail('table');		$misc->printTabs('table','indexes');		$misc->printMsg($msg);		$indexes = $data->getIndexes($_REQUEST['table']);				$columns = array(			'index' => array(				'title' => $lang['strname'],				'field' => field('indname'),			),			'definition' => array(				'title' => $lang['strdefinition'],				'field' => field('inddef'),			),			'constraints' => array(				'title' => $lang['strconstraints'],				'field' => field('+constraints'),				'type'  => 'verbatim',				'params'=> array('align' => 'center'),			),			'clustered' => array(				'title' => $lang['strclustered'],				'field' => field('indisclustered'),				'type'  => 'yesno',			),			'actions' => array(				'title' => $lang['stractions'],			),			'comment' => array(				'title' => $lang['strcomment'],				'field' => field('idxcomment'),			),		);				$actions = array(			'cluster' => array(				'title' => $lang['strclusterindex'],				'url'   => "indexes.php?action=confirm_cluster_index&amp;{$misc->href}&amp;table=".urlencode($_REQUEST['table'])."&amp;",				'vars'  => array('index' => 'indname'),			),			'reindex' => array(				'title' => $lang['strreindex'],				'url'   => "indexes.php?action=reindex&amp;{$misc->href}&amp;table=".urlencode($_REQUEST['table'])."&amp;",				'vars'  => array('index' => 'indname'),			),			'drop' => array(				'title' => $lang['strdrop'],				'url'   => "indexes.php?action=confirm_drop_index&amp;{$misc->href}&amp;table=".urlencode($_REQUEST['table'])."&amp;",				'vars'  => array('index' => 'indname'),			),		);				$misc->printTable($indexes, $columns, $actions, $lang['strnoindexes'], 'indPre');				echo "<p><a class=\"navlink\" href=\"indexes.php?action=create_index&amp;{$misc->href}&amp;table=", 			urlencode($_REQUEST['table']), "\">{$lang['strcreateindex']}</a></p>\n";			}	function doTree() {		global $misc, $data;		$indexes = $data->getIndexes($_REQUEST['table']);		$reqvars = $misc->getRequestVars('table');		function getIcon($f) {			if ($f['indisprimary'] == 't')				return 'PrimaryKey';			if ($f['indisunique'] == 't')				return 'UniqueConstraint';			return 'Index';		}		$attrs = array(			'text'   => field('indname'),			'icon'   => callback('getIcon'),		);		$misc->printTreeXML($indexes, $attrs);		exit;	}	if ($action == 'tree') doTree();	$misc->printHeader($lang['strindexes'], "<script src=\"indexes.js\" type=\"text/javascript\"></script>");	if ($action == 'create_index' || $action == 'save_create_index')		echo "<body onload=\"init();\">";	else		$misc->printBody();	switch ($action) {		case 'cluster_index':			if (isset($_POST['cluster'])) doClusterIndex(false);			else doDefault();			break;		case 'confirm_cluster_index':			doClusterIndex(true);			break;		case 'reindex':			doReindex();			break;		case 'save_create_index':			if (isset($_POST['cancel'])) doDefault();			else doSaveCreateIndex();			break;		case 'create_index':			doCreateIndex();			break;		case 'drop_index':			if (isset($_POST['drop'])) doDropIndex(false);			else doDefault();			break;		case 'confirm_drop_index':			doDropIndex(true);			break;		default:			doDefault();			break;	}	$misc->printFooter();?>
<?php	/**	 * Manage domains in a database	 *	 * $Id: domains.php,v 1.34 2007/09/13 13:41:01 ioguix Exp $	 */	// Include application functions	include_once('./libraries/lib.inc.php');		$action = (isset($_REQUEST['action'])) ? $_REQUEST['action'] : '';	if (!isset($msg)) $msg = '';		/** 	 * Function to save after altering a domain	 */	function doSaveAlter() {		global $data, $lang;				$status = $data->alterDomain($_POST['domain'], $_POST['domdefault'], 			isset($_POST['domnotnull']), $_POST['domowner']);		if ($status == 0)			doProperties($lang['strdomainaltered']);		else			doAlter($lang['strdomainalteredbad']);	}	/**	 * Allow altering a domain	 */	function doAlter($msg = '') {		global $data, $misc;		global $lang;			$misc->printTrail('domain');		$misc->printTitle($lang['stralter'],'pg.domain.alter');		$misc->printMsg($msg);				// Fetch domain info		$domaindata = $data->getDomain($_REQUEST['domain']);		// Fetch all users		$users = $data->getUsers();				if ($domaindata->recordCount() > 0) {			if (!isset($_POST['domname'])) {								$_POST['domtype'] = $domaindata->fields['domtype'];				$_POST['domdefault'] = $domaindata->fields['domdef'];				$domaindata->fields['domnotnull'] = $data->phpBool($domaindata->fields['domnotnull']);				if ($domaindata->fields['domnotnull']) $_POST['domnotnull'] = 'on';				$_POST['domowner'] = $domaindata->fields['domowner'];			}						// Display domain info			echo "<form action=\"domains.php\" method=\"post\">\n";			echo "<table>\n";			echo "<tr><th class=\"data left required\" style=\"width: 70px\">{$lang['strname']}</th>\n";			echo "<td class=\"data1\">", $misc->printVal($domaindata->fields['domname']), "</td></tr>\n";			echo "<tr><th class=\"data left required\">{$lang['strtype']}</th>\n";			echo "<td class=\"data1\">", $misc->printVal($domaindata->fields['domtype']), "</td></tr>\n";			echo "<tr><th class=\"data left\"><label for=\"domnotnull\">{$lang['strnotnull']}</label></th>\n";			echo "<td class=\"data1\"><input type=\"checkbox\" id=\"domnotnull\" name=\"domnotnull\"", (isset($_POST['domnotnull']) ? ' checked="checked"' : ''), " /></td></tr>\n";			echo "<tr><th class=\"data left\">{$lang['strdefault']}</th>\n";			echo "<td class=\"data1\"><input name=\"domdefault\" size=\"32\" value=\"", 				htmlspecialchars($_POST['domdefault']), "\" /></td></tr>\n";			echo "<tr><th class=\"data left required\">{$lang['strowner']}</th>\n";			echo "<td class=\"data1\"><select name=\"domowner\">";			while (!$users->EOF) {				$uname = $users->fields['usename'];				echo "<option value=\"", htmlspecialchars($uname), "\"",					($uname == $_POST['domowner']) ? ' selected="selected"' : '', ">", htmlspecialchars($uname), "</option>\n";				$users->moveNext();			}			echo "</select></td></tr>\n";							echo "</table>\n";			echo "<p><input type=\"hidden\" name=\"action\" value=\"save_alter\" />\n";			echo "<input type=\"hidden\" name=\"domain\" value=\"", htmlspecialchars($_REQUEST['domain']), "\" />\n";			echo $misc->form;			echo "<input type=\"submit\" name=\"alter\" value=\"{$lang['stralter']}\" />\n";			echo "<input type=\"submit\" name=\"cancel\" value=\"{$lang['strcancel']}\" /></p>\n";			echo "</form>\n";		}		else echo "<p>{$lang['strnodata']}</p>\n";	}		/**	 * Confirm and then actually add a CHECK constraint	 */	function addCheck($confirm, $msg = '') {		global $data, $misc;		global $lang;		if (!isset($_POST['name'])) $_POST['name'] = '';		if (!isset($_POST['definition'])) $_POST['definition'] = '';		if ($confirm) {			$misc->printTrail('domain');			$misc->printTitle($lang['straddcheck'],'pg.constraint.check');			$misc->printMsg($msg);			echo "<form action=\"domains.php\" method=\"post\">\n";			echo "<table>\n";			echo "<tr><th class=\"data\">{$lang['strname']}</th>\n";			echo "<th class=\"data required\">{$lang['strdefinition']}</th></tr>\n";			echo "<tr><td class=\"data1\"><input name=\"name\" size=\"16\" maxlength=\"{$data->_maxNameLen}\" value=\"",				htmlspecialchars($_POST['name']), "\" /></td>\n";			echo "<td class=\"data1\">(<input name=\"definition\" size=\"32\" value=\"",				htmlspecialchars($_POST['definition']), "\" />)</td></tr>\n";			echo "</table>\n";			echo "<p><input type=\"hidden\" name=\"action\" value=\"save_add_check\" />\n";			echo "<input type=\"hidden\" name=\"domain\" value=\"", htmlspecialchars($_REQUEST['domain']), "\" />\n";			echo $misc->form;			echo "<input type=\"submit\" name=\"add\" value=\"{$lang['stradd']}\" />\n";			echo "<input type=\"submit\" name=\"cancel\" value=\"{$lang['strcancel']}\" /></p>\n";			echo "</form>\n";		}		else {			if (trim($_POST['definition']) == '')				addCheck(true, $lang['strcheckneedsdefinition']);			else {				$status = $data->addDomainCheckConstraint($_POST['domain'],					$_POST['definition'], $_POST['name']);				if ($status == 0)					doProperties($lang['strcheckadded']);				else					addCheck(true, $lang['strcheckaddedbad']);			}		}	}	/**	 * Show confirmation of drop constraint and perform actual drop	 */	function doDropConstraint($confirm, $msg = '') {		global $data, $misc;		global $lang;		if ($confirm) {			$misc->printTrail('domain');			$misc->printTitle($lang['strdrop'],'pg.constraint.drop');			$misc->printMsg($msg);						echo "<p>", sprintf($lang['strconfdropconstraint'], $misc->printVal($_REQUEST['constraint']), 				$misc->printVal($_REQUEST['domain'])), "</p>\n";				echo "<form action=\"domains.php\" method=\"post\">\n";			echo "<input type=\"hidden\" name=\"action\" value=\"drop_con\" />\n";			echo "<input type=\"hidden\" name=\"domain\" value=\"", htmlspecialchars($_REQUEST['domain']), "\" />\n";			echo "<input type=\"hidden\" name=\"constraint\" value=\"", htmlspecialchars($_REQUEST['constraint']), "\" />\n";			echo $misc->form;			echo "<p><input type=\"checkbox\" id=\"cascade\" name=\"cascade\" /> <label for=\"cascade\">{$lang['strcascade']}</label></p>\n";			echo "<input type=\"submit\" name=\"drop\" value=\"{$lang['strdrop']}\" />\n";			echo "<input type=\"submit\" name=\"cancel\" value=\"{$lang['strcancel']}\" />\n";			echo "</form>\n";		}		else {			$status = $data->dropDomainConstraint($_POST['domain'], $_POST['constraint'], isset($_POST['cascade']));			if ($status == 0)				doProperties($lang['strconstraintdropped']);			else				doDropConstraint(true, $lang['strconstraintdroppedbad']);		}			}		/**	 * Show properties for a domain.  Allow manipulating constraints as well.	 */	function doProperties($msg = '') {		global $data, $misc;		global $lang;			$misc->printTrail('domain');		$misc->printTitle($lang['strproperties'],'pg.domain');		$misc->printMsg($msg);				$domaindata = $data->getDomain($_REQUEST['domain']);				if ($domaindata->recordCount() > 0) {			// Show comment if any			if ($domaindata->fields['domcomment'] !== null)				echo "<p class=\"comment\">", $misc->printVal($domaindata->fields['domcomment']), "</p>\n";			// Display domain info			$domaindata->fields['domnotnull'] = $data->phpBool($domaindata->fields['domnotnull']);			echo "<table>\n";			echo "<tr><th class=\"data left\" style=\"width: 70px\">{$lang['strname']}</th>\n";			echo "<td class=\"data1\">", $misc->printVal($domaindata->fields['domname']), "</td></tr>\n";			echo "<tr><th class=\"data left\">{$lang['strtype']}</th>\n";			echo "<td class=\"data1\">", $misc->printVal($domaindata->fields['domtype']), "</td></tr>\n";			echo "<tr><th class=\"data left\">{$lang['strnotnull']}</th>\n";			echo "<td class=\"data1\">", ($domaindata->fields['domnotnull'] ? 'NOT NULL' : ''), "</td></tr>\n";			echo "<tr><th class=\"data left\">{$lang['strdefault']}</th>\n";			echo "<td class=\"data1\">", $misc->printVal($domaindata->fields['domdef']), "</td></tr>\n";			echo "<tr><th class=\"data left\">{$lang['strowner']}</th>\n";			echo "<td class=\"data1\">", $misc->printVal($domaindata->fields['domowner']), "</td></tr>\n";			echo "</table>\n";						// Display domain constraints			if ($data->hasDomainConstraints()) {				$domaincons = $data->getDomainConstraints($_REQUEST['domain']);				if ($domaincons->recordCount() > 0) {					echo "<h3>{$lang['strconstraints']}</h3>\n";					echo "<table>\n";					echo "<tr><th class=\"data\">{$lang['strname']}</th><th class=\"data\">{$lang['strdefinition']}</th><th class=\"data\">{$lang['stractions']}</th>\n";					$i = 0;										while (!$domaincons->EOF) {						$id = (($i % 2 ) == 0 ? '1' : '2');						echo "<tr class=\"data{$id}\"><td>", $misc->printVal($domaincons->fields['conname']), "</td>";						echo "<td>";						echo $misc->printVal($domaincons->fields['consrc']);						echo "</td>";						echo "<td class=\"opbutton{$id}\">";						echo "<a href=\"domains.php?action=confirm_drop_con&amp;{$misc->href}&amp;constraint=", urlencode($domaincons->fields['conname']),							"&amp;domain=", urlencode($_REQUEST['domain']), "&amp;type=", urlencode($domaincons->fields['contype']), "\">{$lang['strdrop']}</a></td></tr>\n";								$domaincons->moveNext();						$i++;					}										echo "</table>\n";				}			}		}		else echo "<p>{$lang['strnodata']}</p>\n";				echo "<ul class=\"navlink\">\n\t<li><a href=\"domains.php?action=confirm_drop&amp;{$misc->href}&amp;domain=", urlencode($_REQUEST['domain']),"\">{$lang['strdrop']}</a></li>\n";		if ($data->hasAlterDomains()) {			echo "\t<li><a href=\"domains.php?action=add_check&amp;{$misc->href}&amp;domain=", urlencode($_REQUEST['domain']),				"\">{$lang['straddcheck']}</a></li>\n";			echo "\t<li><a href=\"domains.php?action=alter&amp;{$misc->href}&amp;domain=", 				urlencode($_REQUEST['domain']), "\">{$lang['stralter']}</a></li>\n";		}		echo "</ul>\n";	}		/**	 * Show confirmation of drop and perform actual drop	 */	function doDrop($confirm) {		global $data, $misc;		global $lang;		if ($confirm) {			$misc->printTrail('domain');			$misc->printTitle($lang['strdrop'],'pg.domain.drop');						echo "<p>", sprintf($lang['strconfdropdomain'], $misc->printVal($_REQUEST['domain'])), "</p>\n";				echo "<form action=\"domains.php\" method=\"post\">\n";			echo "<p><input type=\"checkbox\" id=\"cascade\" name=\"cascade\" /><label for=\"cascade\">{$lang['strcascade']}</label></p>\n";			echo "<p><input type=\"hidden\" name=\"action\" value=\"drop\" />\n";			echo "<input type=\"hidden\" name=\"domain\" value=\"", htmlspecialchars($_REQUEST['domain']), "\" />\n";			echo $misc->form;			echo "<input type=\"submit\" name=\"drop\" value=\"{$lang['strdrop']}\" />\n";			echo "<input type=\"submit\" name=\"cancel\" value=\"{$lang['strcancel']}\" /></p>\n";			echo "</form>\n";		}		else {			$status = $data->dropDomain($_POST['domain'], isset($_POST['cascade']));			if ($status == 0)				doDefault($lang['strdomaindropped']);			else				doDefault($lang['strdomaindroppedbad']);		}			}		/**	 * Displays a screen where they can enter a new domain	 */	function doCreate($msg = '') {		global $data, $misc;		global $lang;				if (!isset($_POST['domname'])) $_POST['domname'] = '';		if (!isset($_POST['domtype'])) $_POST['domtype'] = '';		if (!isset($_POST['domlength'])) $_POST['domlength'] = '';		if (!isset($_POST['domarray'])) $_POST['domarray'] = '';		if (!isset($_POST['domdefault'])) $_POST['domdefault'] = '';		if (!isset($_POST['domcheck'])) $_POST['domcheck'] = '';		$types = $data->getTypes(true);				$misc->printTrail('schema');		$misc->printTitle($lang['strcreatedomain'],'pg.domain.create');		$misc->printMsg($msg);		echo "<form action=\"domains.php\" method=\"post\">\n";		echo "<table>\n";		echo "<tr><th class=\"data left required\" style=\"width: 70px\">{$lang['strname']}</th>\n";		echo "<td class=\"data1\"><input name=\"domname\" size=\"32\" maxlength=\"{$data->_maxNameLen}\" value=\"", 			htmlspecialchars($_POST['domname']), "\" /></td></tr>\n";		echo "<tr><th class=\"data left required\">{$lang['strtype']}</th>\n";		echo "<td class=\"data1\">\n";		// Output return type list				echo "<select name=\"domtype\">\n";		while (!$types->EOF) {			echo "<option value=\"", htmlspecialchars($types->fields['typname']), "\"", 				($types->fields['typname'] == $_POST['domtype']) ? ' selected="selected"' : '', ">",				$misc->printVal($types->fields['typname']), "</option>\n";			$types->moveNext();		}		echo "</select>\n";				// Type length		echo "<input type=\"text\" size=\"4\" name=\"domlength\" value=\"", htmlspecialchars($_POST['domlength']), "\" />";		// Output array type selector		echo "<select name=\"domarray\">\n";		echo "<option value=\"\"", ($_POST['domarray'] == '') ? ' selected="selected"' : '', "></option>\n";		echo "<option value=\"[]\"", ($_POST['domarray'] == '[]') ? ' selected="selected"' : '', ">[ ]</option>\n";		echo "</select></td></tr>\n";		echo "<tr><th class=\"data left\"><label for=\"domnotnull\">{$lang['strnotnull']}</label></th>\n";		echo "<td class=\"data1\"><input type=\"checkbox\" id=\"domnotnull\" name=\"domnotnull\"", 			(isset($_POST['domnotnull']) ? ' checked="checked"' : ''), " /></td></tr>\n";		echo "<tr><th class=\"data left\">{$lang['strdefault']}</th>\n";		echo "<td class=\"data1\"><input name=\"domdefault\" size=\"32\" value=\"", 			htmlspecialchars($_POST['domdefault']), "\" /></td></tr>\n";		if ($data->hasDomainConstraints()) {			echo "<tr><th class=\"data left\">{$lang['strconstraints']}</th>\n";			echo "<td class=\"data1\">CHECK (<input name=\"domcheck\" size=\"32\" value=\"", 				htmlspecialchars($_POST['domcheck']), "\" />)</td></tr>\n";		}		echo "</table>\n";		echo "<p><input type=\"hidden\" name=\"action\" value=\"save_create\" />\n";		echo $misc->form;		echo "<input type=\"submit\" value=\"{$lang['strcreate']}\" />\n";		echo "<input type=\"submit\" name=\"cancel\" value=\"{$lang['strcancel']}\" /></p>\n";		echo "</form>\n";	}		/**	 * Actually creates the new domain in the database	 */	function doSaveCreate() {		global $data, $lang;				if (!isset($_POST['domcheck'])) $_POST['domcheck'] = '';		// Check that they've given a name and a definition		if ($_POST['domname'] == '') doCreate($lang['strdomainneedsname']);		else {		 			$status = $data->createDomain($_POST['domname'], $_POST['domtype'], $_POST['domlength'], $_POST['domarray'] != '',																isset($_POST['domnotnull']), $_POST['domdefault'], $_POST['domcheck']);			if ($status == 0)				doDefault($lang['strdomaincreated']);			else				doCreate($lang['strdomaincreatedbad']);		}	}		/**	 * Show default list of domains in the database	 */	function doDefault($msg = '') {		global $data, $conf, $misc;		global $lang;				$misc->printTrail('schema');		$misc->printTabs('schema','domains');		$misc->printMsg($msg);				$domains = $data->getDomains();				$columns = array(			'domain' => array(				'title' => $lang['strdomain'],				'field' => field('domname'),				'url' => "domains.php?action=properties&amp;{$misc->href}&amp;",				'vars'  => array('domain' => 'domname'),			),			'type' => array(				'title' => $lang['strtype'],				'field' => field('domtype'),			),			'notnull' => array(				'title' => $lang['strnotnull'],				'field' => field('domnotnull'),				'type'  => 'bool',				'params'=> array('true' => 'NOT NULL', 'false' => ''),			),			'default' => array(				'title' => $lang['strdefault'],				'field' => field('domdef'),			),			'owner' => array(				'title' => $lang['strowner'],				'field' => field('domowner'),			),			'actions' => array(				'title' => $lang['stractions'],			),			'comment' => array(				'title' => $lang['strcomment'],				'field' => field('domcomment'),			),		);				$actions = array(			'alter' => array(				'title'	=> $lang['stralter'],				'url'	=> "domains.php?action=alter&amp;{$misc->href}&amp;",				'vars'	=> array('domain' => 'domname'),			),			'drop' => array(				'title'	=> $lang['strdrop'],				'url'	=> "domains.php?action=confirm_drop&amp;{$misc->href}&amp;",				'vars'	=> array('domain' => 'domname'),			),		);		if (!$data->hasAlterDomains()) unset($actions['alter']);				$misc->printTable($domains, $columns, $actions, $lang['strnodomains']);				echo "<p><a class=\"navlink\" href=\"domains.php?action=create&amp;{$misc->href}\">{$lang['strcreatedomain']}</a></p>\n";	}		/**	 * Generate XML for the browser tree.	 */	function doTree() {		global $misc, $data;				$domains = $data->getDomains();				$reqvars = $misc->getRequestVars('domain');				$attrs = array(			'text'   => field('domname'),			'icon'   => 'Domain',			'toolTip'=> field('domcomment'),			'action' => url('domains.php',							$reqvars,							array(								'action' => 'properties',								'domain' => field('domname')							)						)		);				$misc->printTreeXML($domains, $attrs);		exit;	}		if ($action == 'tree') doTree();	$misc->printHeader($lang['strdomains']);	$misc->printBody();	switch ($action) {		case 'add_check':			addCheck(true);			break;		case 'save_add_check':			if (isset($_POST['cancel'])) doProperties();			else addCheck(false);			break;		case 'drop_con':			if (isset($_POST['drop'])) doDropConstraint(false);			else doProperties();			break;		case 'confirm_drop_con':			doDropConstraint(true);			break;					case 'save_create':			if (isset($_POST['cancel'])) doDefault();			else doSaveCreate();			break;		case 'create':			doCreate();			break;		case 'drop':			if (isset($_POST['drop'])) doDrop(false);			else doDefault();			break;		case 'confirm_drop':			doDrop(true);			break;					case 'save_alter':			if (isset($_POST['alter'])) doSaveAlter();			else doProperties();			break;		case 'alter':			doAlter();			break;		case 'properties':			doProperties();			break;		default:			doDefault();			break;	}		$misc->printFooter();	?>
<?php	/**	 * Manage tablespaces in a database cluster	 *	 * $Id: tablespaces.php,v 1.16 2007/08/31 18:30:11 ioguix Exp $	 */	// Include application functions	include_once('./libraries/lib.inc.php');	$action = (isset($_REQUEST['action'])) ? $_REQUEST['action'] : '';	if (!isset($msg)) $msg = '';	/**	 * Function to allow altering of a tablespace	 */	function doAlter($msg = '') {		global $data, $misc;		global $lang;				$misc->printTrail('tablespace');		$misc->printTitle($lang['stralter'],'pg.tablespace.alter');		$misc->printMsg($msg);		// Fetch tablespace info				$tablespace = $data->getTablespace($_REQUEST['tablespace']);		// Fetch all users				$users = $data->getUsers();				if ($tablespace->recordCount() > 0) {						if (!isset($_POST['name'])) $_POST['name'] = $tablespace->fields['spcname'];			if (!isset($_POST['owner'])) $_POST['owner'] = $tablespace->fields['spcowner'];			if (!isset($_POST['comment'])) {				$_POST['comment'] = ($data->hasSharedComments()) ? $tablespace->fields['spccomment'] : '';			}						echo "<form action=\"tablespaces.php\" method=\"post\">\n";			echo $misc->form;			echo "<table>\n";			echo "<tr><th class=\"data left required\">{$lang['strname']}</th>\n";			echo "<td class=\"data1\">";			echo "<input name=\"name\" size=\"32\" maxlength=\"{$data->_maxNameLen}\" value=\"", 				htmlspecialchars($_POST['name']), "\" /></td></tr>\n";			echo "<tr><th class=\"data left required\">{$lang['strowner']}</th>\n";			echo "<td class=\"data1\"><select name=\"owner\">";			while (!$users->EOF) {				$uname = $users->fields['usename'];				echo "<option value=\"", htmlspecialchars($uname), "\"",					($uname == $_POST['owner']) ? ' selected="selected"' : '', ">", htmlspecialchars($uname), "</option>\n";				$users->moveNext();			}			echo "</select></td></tr>\n"; 			if ($data->hasSharedComments()){				echo "<tr><th class=\"data left\">{$lang['strcomment']}</th>\n";				echo "<td class=\"data1\">";				echo "<textarea rows=\"3\" cols=\"32\" name=\"comment\">",					htmlspecialchars($_POST['comment']), "</textarea></td></tr>\n";			}			echo "</table>\n";			echo "<p><input type=\"hidden\" name=\"action\" value=\"save_edit\" />\n";			echo "<input type=\"hidden\" name=\"tablespace\" value=\"", htmlspecialchars($_REQUEST['tablespace']), "\" />\n";			echo "<input type=\"submit\" name=\"alter\" value=\"{$lang['stralter']}\" />\n";			echo "<input type=\"submit\" name=\"cancel\" value=\"{$lang['strcancel']}\" /></p>\n";			echo "</form>\n";		}		else echo "<p>{$lang['strnodata']}</p>\n";	}	/** 	 * Function to save after altering a tablespace	 */	function doSaveAlter() {		global $data, $lang;		// Check data		if (trim($_POST['name']) == '')			doAlter($lang['strtablespaceneedsname']);		else {			$status = $data->alterTablespace($_POST['tablespace'], $_POST['name'], $_POST['owner'], $_POST['comment']);			if ($status == 0) {				// If tablespace has been renamed, need to change to the new name				if ($_POST['tablespace'] != $_POST['name']) {					// Jump them to the new table name					$_REQUEST['tablespace'] = $_POST['name'];				}				doDefault($lang['strtablespacealtered']);			}			else				doAlter($lang['strtablespacealteredbad']);		}	}	/**	 * Show confirmation of drop and perform actual drop	 */	function doDrop($confirm) {		global $data, $misc;		global $lang;		if ($confirm) {			$misc->printTrail('tablespace');			$misc->printTitle($lang['strdrop'],'pg.tablespace.drop');						echo "<p>", sprintf($lang['strconfdroptablespace'], $misc->printVal($_REQUEST['tablespace'])), "</p>\n";							echo "<form action=\"tablespaces.php\" method=\"post\">\n";			echo $misc->form;			echo "<input type=\"hidden\" name=\"action\" value=\"drop\" />\n";			echo "<input type=\"hidden\" name=\"tablespace\" value=\"", htmlspecialchars($_REQUEST['tablespace']), "\" />\n";			echo "<input type=\"submit\" name=\"drop\" value=\"{$lang['strdrop']}\" />\n";			echo "<input type=\"submit\" name=\"cancel\" value=\"{$lang['strcancel']}\" />\n";			echo "</form>\n";		}		else {			$status = $data->droptablespace($_REQUEST['tablespace']);			if ($status == 0)				doDefault($lang['strtablespacedropped']);			else				doDefault($lang['strtablespacedroppedbad']);		}			}		/**	 * Displays a screen where they can enter a new tablespace	 */	function doCreate($msg = '') {		global $data, $misc, $spcname;		global $lang;				$server_info = $misc->getServerInfo();				if (!isset($_POST['formSpcname'])) $_POST['formSpcname'] = '';		if (!isset($_POST['formOwner'])) $_POST['formOwner'] = $server_info['username'];		if (!isset($_POST['formLoc'])) $_POST['formLoc'] = '';		if (!isset($_POST['formComment'])) $_POST['formComment'] = '';		// Fetch all users		$users = $data->getUsers();				$misc->printTrail('server');		$misc->printTitle($lang['strcreatetablespace'],'pg.tablespace.create');		$misc->printMsg($msg);		echo "<form action=\"tablespaces.php\" method=\"post\">\n";		echo $misc->form;		echo "<table>\n";		echo "\t<tr>\n\t\t<th class=\"data left required\">{$lang['strname']}</th>\n";		echo "\t\t<td class=\"data1\"><input size=\"32\" name=\"formSpcname\" maxlength=\"{$data->_maxNameLen}\" value=\"", htmlspecialchars($_POST['formSpcname']), "\" /></td>\n\t</tr>\n";		echo "\t<tr>\n\t\t<th class=\"data left required\">{$lang['strowner']}</th>\n";		echo "\t\t<td class=\"data1\"><select name=\"formOwner\">\n";		while (!$users->EOF) {			$uname = $users->fields['usename'];			echo "\t\t\t<option value=\"", htmlspecialchars($uname), "\"",				($uname == $_POST['formOwner']) ? ' selected="selected"' : '', ">", htmlspecialchars($uname), "</option>\n";			$users->moveNext();		}		echo "\t\t</select></td>\n\t</tr>\n";						echo "\t<tr>\n\t\t<th class=\"data left required\">{$lang['strlocation']}</th>\n";		echo "\t\t<td class=\"data1\"><input size=\"32\" name=\"formLoc\" value=\"", htmlspecialchars($_POST['formLoc']), "\" /></td>\n\t</tr>\n";		// Comments (if available)		if ($data->hasSharedComments()) {			echo "\t<tr>\n\t\t<th class=\"data left\">{$lang['strcomment']}</th>\n";			echo "\t\t<td><textarea name=\"formComment\" rows=\"3\" cols=\"32\">", 				htmlspecialchars($_POST['formComment']), "</textarea></td>\n\t</tr>\n";		}		echo "</table>\n";		echo "<p><input type=\"hidden\" name=\"action\" value=\"save_create\" />\n";		echo "<input type=\"submit\" value=\"{$lang['strcreate']}\" />\n";		echo "<input type=\"submit\" name=\"cancel\" value=\"{$lang['strcancel']}\" /></p>\n";		echo "</form>\n";	}		/**	 * Actually creates the new tablespace in the cluster	 */	function doSaveCreate() {		global $data;		global $lang;		// Check data		if (trim($_POST['formSpcname']) == '')			doCreate($lang['strtablespaceneedsname']);		elseif (trim($_POST['formLoc']) == '')			doCreate($lang['strtablespaceneedsloc']);		else {			// Default comment to blank if it isn't set			if (!isset($_POST['formComment'])) $_POST['formComment'] = null;					$status = $data->createTablespace($_POST['formSpcname'], $_POST['formOwner'], $_POST['formLoc'], $_POST['formComment']);			if ($status == 0)				doDefault($lang['strtablespacecreated']);			else				doCreate($lang['strtablespacecreatedbad']);		}	}		/**	 * Show default list of tablespaces in the cluster	 */	function doDefault($msg = '') {		global $data, $misc;		global $lang;				$misc->printTrail('server');		$misc->printTabs('server','tablespaces');		$misc->printMsg($msg);				$tablespaces = $data->getTablespaces();		$columns = array(			'database' => array(				'title' => $lang['strname'],				'field' => field('spcname')			),			'owner' => array(				'title' => $lang['strowner'],				'field' => field('spcowner')			),			'location' => array(				'title' => $lang['strlocation'],				'field' => field('spclocation')			),			'actions' => array(				'title' => $lang['stractions']			)		);		if ($data->hasSharedComments()) {			$columns['comment'] = array(				'title' => $lang['strcomment'],				'field' => field('spccomment'),			);		}				$actions = array(			'alter' => array(				'title' => $lang['stralter'],				'url'   => "tablespaces.php?action=edit&amp;{$misc->href}&amp;",				'vars'  => array('tablespace' => 'spcname')			),			'drop' => array(				'title' => $lang['strdrop'],				'url'   => "tablespaces.php?action=confirm_drop&amp;{$misc->href}&amp;",				'vars'  => array('tablespace' => 'spcname')			),			'privileges' => array(				'title' => $lang['strprivileges'],				'url'   => "privileges.php?subject=tablespace&amp;{$misc->href}&amp;",				'vars'  => array('tablespace' => 'spcname')			)		);						$misc->printTable($tablespaces, $columns, $actions, $lang['strnotablespaces']);				echo "<p><a class=\"navlink\" href=\"tablespaces.php?action=create&amp;{$misc->href}\">{$lang['strcreatetablespace']}</a></p>\n";	}	$misc->printHeader($lang['strtablespaces']);	$misc->printBody();	switch ($action) {		case 'save_create':			if (isset($_REQUEST['cancel'])) doDefault();			else doSaveCreate();			break;		case 'create':						doCreate();			break;		case 'drop':			if (isset($_REQUEST['cancel'])) doDefault();			else doDrop(false);			break;		case 'confirm_drop':			doDrop(true);			break;		case 'save_edit':			if (isset($_REQUEST['cancel'])) doDefault();			else doSaveAlter();			break;		case 'edit':			doAlter();			break;		default:			doDefault();			break;	}		$misc->printFooter();?>
<?php	/**	 * Manage opclasss in a database	 *	 * $Id: opclasses.php,v 1.10 2007/08/31 18:30:11 ioguix Exp $	 */	// Include application functions	include_once('./libraries/lib.inc.php');		$action = (isset($_REQUEST['action'])) ? $_REQUEST['action'] : '';	if (!isset($msg)) $msg = '';	/**	 * Show default list of opclasss in the database	 */	function doDefault($msg = '') {		global $data, $conf, $misc;		global $lang;				$misc->printTrail('schema');		$misc->printTabs('schema','opclasses');		$misc->printMsg($msg);				$opclasses = $data->getOpClasses();				$columns = array(			'accessmethod' => array(				'title' => $lang['straccessmethod'],				'field' => field('amname'),			),			'opclass' => array(				'title' => $lang['strname'],				'field' => field('opcname'),			),			'type' => array(				'title' => $lang['strtype'],				'field' => field('opcintype'),			),			'default' => array(				'title' => $lang['strdefault'],				'field' => field('opcdefault'),				'type'  => 'yesno',			),			'comment' => array(				'title' => $lang['strcomment'],				'field' => field('opccomment'),			),		);				$actions = array();				$misc->printTable($opclasses, $columns, $actions, $lang['strnoopclasses']);	}		/**	 * Generate XML for the browser tree.	 */	function doTree() {		global $misc, $data;				$opclasses = $data->getOpClasses();				// OpClass prototype: "op_class/access_method"		$proto = concat(field('opcname'),'/',field('amname'));				$attrs = array(			'text'   => $proto,			'icon'   => 'OperatorClass',			'toolTip'=> field('opccomment'),		);				$misc->printTreeXML($opclasses, $attrs);		exit;	}		if ($action == 'tree') doTree();		$misc->printHeader($lang['stropclasses']);	$misc->printBody();	switch ($action) {		default:			doDefault();			break;	}		$misc->printFooter();?>
<?php	/**	 * Manage schemas in a database	 *	 * $Id: schemas.php,v 1.22 2007/12/15 22:57:43 ioguix Exp $	 */	// Include application functions	include_once('./libraries/lib.inc.php');	$action = (isset($_REQUEST['action'])) ? $_REQUEST['action'] : '';	if (!isset($msg)) $msg = '';	/**	 * Show default list of schemas in the database	 */	function doDefault($msg = '') {		global $data, $misc, $conf;		global $lang;		$misc->printTrail('database');		$misc->printTabs('database','schemas');		$misc->printMsg($msg);		// Check that the DB actually supports schemas		$schemas = $data->getSchemas();		$columns = array(			'schema' => array(				'title' => $lang['strschema'],				'field' => field('nspname'),				'url'   => "redirect.php?subject=schema&amp;{$misc->href}&amp;",				'vars'  => array('schema' => 'nspname'),			),			'owner' => array(				'title' => $lang['strowner'],				'field' => field('nspowner'),			),			'actions' => array(				'title' => $lang['stractions'],			),			'comment' => array(				'title' => $lang['strcomment'],				'field' => field('nspcomment'),			),		);		$actions = array(			'multiactions' => array(				'keycols' => array('nsp' => 'nspname'),				'url' => 'schemas.php',			),			'drop' => array(				'title' => $lang['strdrop'],				'url'   => "schemas.php?action=drop&amp;{$misc->href}&amp;",				'vars'  => array('nsp' => 'nspname'),				'multiaction' => 'drop',			),			'privileges' => array(				'title' => $lang['strprivileges'],				'url'   => "privileges.php?subject=schema&amp;{$misc->href}&amp;",				'vars'  => array('schema' => 'nspname'),			),			'alter' => array(				'title' => $lang['stralter'],				'url'   => "schemas.php?action=alter&amp;{$misc->href}&amp;",				'vars'  => array('schema' => 'nspname'),			),		);		if (!$data->hasAlterSchema()) unset($actions['alter']);		$misc->printTable($schemas, $columns, $actions, $lang['strnoschemas']);		echo "<p><a class=\"navlink\" href=\"schemas.php?action=create&amp;{$misc->href}\">{$lang['strcreateschema']}</a></p>\n";	}	/**	 * Displays a screen where they can enter a new schema	 */	function doCreate($msg = '') {		global $data, $misc;		global $lang;		$server_info = $misc->getServerInfo();		if (!isset($_POST['formName'])) $_POST['formName'] = '';		if (!isset($_POST['formAuth'])) $_POST['formAuth'] = $server_info['username'];		if (!isset($_POST['formSpc'])) $_POST['formSpc'] = '';		if (!isset($_POST['formComment'])) $_POST['formComment'] = '';		// Fetch all users from the database		$users = $data->getUsers();		$misc->printTrail('database');		$misc->printTitle($lang['strcreateschema'],'pg.schema.create');		$misc->printMsg($msg);		echo "<form action=\"schemas.php\" method=\"post\">\n";		echo "<table style=\"width: 100%\">\n";		echo "\t<tr>\n\t\t<th class=\"data left required\">{$lang['strname']}</th>\n";		echo "\t\t<td class=\"data1\"><input name=\"formName\" size=\"32\" maxlength=\"{$data->_maxNameLen}\" value=\"",			htmlspecialchars($_POST['formName']), "\" /></td>\n\t</tr>\n";		// Owner		echo "\t<tr>\n\t\t<th class=\"data left required\">{$lang['strowner']}</th>\n";		echo "\t\t<td class=\"data1\">\n\t\t\t<select name=\"formAuth\">\n";		while (!$users->EOF) {			$uname = htmlspecialchars($users->fields['usename']);			echo "\t\t\t\t<option value=\"{$uname}\"",				($uname == $_POST['formAuth']) ? ' selected="selected"' : '', ">{$uname}</option>\n";			$users->moveNext();		}		echo "\t\t\t</select>\n\t\t</td>\n\t</tr>\n";		echo "\t<tr>\n\t\t<th class=\"data left\">{$lang['strcomment']}</th>\n";		echo "\t\t<td class=\"data1\"><textarea name=\"formComment\" rows=\"3\" cols=\"32\">",			htmlspecialchars($_POST['formComment']), "</textarea></td>\n\t</tr>\n";		echo "</table>\n";		echo "<p>\n";		echo "<input type=\"hidden\" name=\"action\" value=\"create\" />\n";		echo "<input type=\"hidden\" name=\"database\" value=\"", htmlspecialchars($_REQUEST['database']), "\" />\n";		echo $misc->form;		echo "<input type=\"submit\" name=\"create\" value=\"{$lang['strcreate']}\" />\n";		echo "<input type=\"submit\" name=\"cancel\" value=\"{$lang['strcancel']}\" />\n";		echo "</p>\n";		echo "</form>\n";	}	/**	 * Actually creates the new schema in the database	 */	function doSaveCreate() {		global $data, $lang, $_reload_browser;		// Check that they've given a name		if ($_POST['formName'] == '') doCreate($lang['strschemaneedsname']);		else {			$status = $data->createSchema($_POST['formName'], $_POST['formAuth'], $_POST['formComment']);			if ($status == 0) {				$_reload_browser = true;				doDefault($lang['strschemacreated']);			}			else				doCreate($lang['strschemacreatedbad']);		}	}	/**	 * Display a form to permit editing schema properies.	 * TODO: permit changing owner	 */	function doAlter($msg = '') {		global $data, $misc, $lang;		$misc->printTrail('schema');		$misc->printTitle($lang['stralter'],'pg.schema.alter');		$misc->printMsg($msg);		$schema = $data->getSchemaByName($_REQUEST['schema']);		if ($schema->recordCount() > 0) {			if (!isset($_POST['comment'])) $_POST['comment'] = $schema->fields['nspcomment'];			if (!isset($_POST['schema'])) $_POST['schema'] = $_REQUEST['schema'];			if (!isset($_POST['name'])) $_POST['name'] = $_REQUEST['schema'];			if (!isset($_POST['owner'])) $_POST['owner'] = $schema->fields['ownername'];			echo "<form action=\"schemas.php\" method=\"post\">\n";			echo "<table>\n";			echo "\t<tr>\n";			echo "\t\t<th class=\"data left required\">{$lang['strname']}</th>\n";			echo "\t\t<td class=\"data1\">";			echo "\t\t\t<input name=\"name\" size=\"32\" maxlength=\"{$data->_maxNameLen}\" value=\"",				htmlspecialchars($_POST['name']), "\" />\n";			echo "\t\t</td>\n";			echo "\t</tr>\n";			if ($data->hasAlterSchemaOwner()) {				$users = $data->getUsers();				echo "<tr><th class=\"data left required\">{$lang['strowner']}</th>\n";					echo "<td class=\"data2\"><select name=\"owner\">";					while (!$users->EOF) {						$uname = $users->fields['usename'];						echo "<option value=\"", htmlspecialchars($uname), "\"",						($uname == $_POST['owner']) ? ' selected="selected"' : '', ">", htmlspecialchars($uname), "</option>\n";						$users->moveNext();					}					echo "</select></td></tr>\n";			}			else 				echo "<input name=\"owner\" value=\"{$_POST['owner']}\" type=\"hidden\" />";			echo "\t<tr>\n";			echo "\t\t<th class=\"data\">{$lang['strcomment']}</th>\n";			echo "\t\t<td class=\"data1\"><textarea cols=\"32\" rows=\"3\"name=\"comment\">", htmlspecialchars($_POST['comment']), "</textarea></td>\n";			echo "\t</tr>\n";			echo "</table>\n";			echo "<p><input type=\"hidden\" name=\"action\" value=\"alter\" />\n";			echo "<input type=\"hidden\" name=\"schema\" value=\"", htmlspecialchars($_POST['schema']), "\" />\n";			echo $misc->form;			echo "<input type=\"submit\" name=\"alter\" value=\"{$lang['stralter']}\" />\n";			echo "<input type=\"submit\" name=\"cancel\" value=\"{$lang['strcancel']}\" /></p>\n";			echo "</form>\n";		} else {			echo "<p>{$lang['strnodata']}</p>\n";		}	}	/**	 * Save the form submission containing changes to a schema	 */	function doSaveAlter($msg = '') {		global $data, $misc, $lang, $_reload_browser;		$status = $data->updateSchema($_POST['schema'], $_POST['comment'], $_POST['name'], $_POST['owner']);		if ($status == 0) {			$_reload_browser = true;			doDefault($lang['strschemaaltered']);		}		else			doAlter($lang['strschemaalteredbad']);	}	/**	 * Show confirmation of drop and perform actual drop	 */	function doDrop($confirm) {		global $data, $misc;		global $lang, $_reload_browser;		if (empty($_REQUEST['nsp']) && empty($_REQUEST['ma'])) {			doDefault($lang['strspecifyschematodrop']);			exit();		}		if ($confirm) {			$misc->printTrail('schema');			$misc->printTitle($lang['strdrop'],'pg.schema.drop');			echo "<form action=\"schemas.php\" method=\"post\">\n";			//If multi drop			if (isset($_REQUEST['ma'])) {				foreach($_REQUEST['ma'] as $v) {					$a = unserialize(htmlspecialchars_decode($v, ENT_QUOTES));					echo '<p>', sprintf($lang['strconfdropschema'], $misc->printVal($a['nsp'])), "</p>\n";					echo '<input type="hidden" name="nsp[]" value="', htmlspecialchars($a['nsp']), "\" />\n";				}			}			else {				echo "<p>", sprintf($lang['strconfdropschema'], $misc->printVal($_REQUEST['nsp'])), "</p>\n";				echo "<input type=\"hidden\" name=\"nsp\" value=\"", htmlspecialchars($_REQUEST['nsp']), "\" />\n";			}			echo "<p><input type=\"checkbox\" id=\"cascade\" name=\"cascade\" /> <label for=\"cascade\">{$lang['strcascade']}</label></p>\n";			echo "<p><input type=\"hidden\" name=\"action\" value=\"drop\" />\n";			echo "<input type=\"hidden\" name=\"database\" value=\"", htmlspecialchars($_REQUEST['database']), "\" />\n";			echo $misc->form;			echo "<input type=\"submit\" name=\"drop\" value=\"{$lang['strdrop']}\" />\n";			echo "<input type=\"submit\" name=\"cancel\" value=\"{$lang['strcancel']}\" /></p>\n";			echo "</form>\n";		}		else {			if (is_array($_POST['nsp'])) {				$msg='';				$status = $data->beginTransaction();				if ($status == 0) {					foreach($_POST['nsp'] as $s) {						$status = $data->dropSchema($s, isset($_POST['cascade']));						if ($status == 0)							$msg.= sprintf('%s: %s<br />', htmlentities($s), $lang['strschemadropped']);						else {							$data->endTransaction();							doDefault(sprintf('%s%s: %s<br />', $msg, htmlentities($s), $lang['strschemadroppedbad']));							return;						}					}				}				if($data->endTransaction() == 0) {					// Everything went fine, back to the Default page....					$_reload_browser = true;					doDefault($msg);				}				else doDefault($lang['strschemadroppedbad']);			}			else{				$status = $data->dropSchema($_POST['nsp'], isset($_POST['cascade']));				if ($status == 0) {					$_reload_browser = true;					doDefault($lang['strschemadropped']);				}				else					doDefault($lang['strschemadroppedbad']);			}		}	}	/**	 * Displays options for database download	 */	function doExport($msg = '') {		global $data, $misc;		global $lang;		$misc->printTrail('schema');		$misc->printTabs('schema','export');		$misc->printMsg($msg);		echo "<form action=\"dbexport.php\" method=\"post\">\n";		echo "<table>\n";		echo "<tr><th class=\"data\">{$lang['strformat']}</th><th class=\"data\" colspan=\"2\">{$lang['stroptions']}</th></tr>\n";		// Data only		echo "<tr><th class=\"data left\" rowspan=\"2\">";		echo "<input type=\"radio\" id=\"what1\" name=\"what\" value=\"dataonly\" checked=\"checked\" /><label for=\"what1\">{$lang['strdataonly']}</label></th>\n";		echo "<td>{$lang['strformat']}</td>\n";		echo "<td><select name=\"d_format\">\n";		echo "<option value=\"copy\">COPY</option>\n";		echo "<option value=\"sql\">SQL</option>\n";		echo "</select>\n</td>\n</tr>\n";		echo "<tr><td><label for=\"d_oids\">{$lang['stroids']}</label></td><td><input type=\"checkbox\" id=\"d_oids\" name=\"d_oids\" /></td>\n</tr>\n";		// Structure only		echo "<tr><th class=\"data left\"><input type=\"radio\" id=\"what2\" name=\"what\" value=\"structureonly\" /><label for=\"what2\">{$lang['strstructureonly']}</label></th>\n";		echo "<td><label for=\"s_clean\">{$lang['strdrop']}</label></td><td><input type=\"checkbox\" id=\"s_clean\" name=\"s_clean\" /></td>\n</tr>\n";		// Structure and data		echo "<tr><th class=\"data left\" rowspan=\"3\">";		echo "<input type=\"radio\" id=\"what3\" name=\"what\" value=\"structureanddata\" /><label for=\"what3\">{$lang['strstructureanddata']}</label></th>\n";		echo "<td>{$lang['strformat']}</td>\n";		echo "<td><select name=\"sd_format\">\n";		echo "<option value=\"copy\">COPY</option>\n";		echo "<option value=\"sql\">SQL</option>\n";		echo "</select>\n</td>\n</tr>\n";		echo "<tr><td><label for=\"sd_clean\">{$lang['strdrop']}</label></td><td><input type=\"checkbox\" id=\"sd_clean\" name=\"sd_clean\" /></td>\n</tr>\n";		echo "<tr><td><label for=\"sd_oids\">{$lang['stroids']}</label></td><td><input type=\"checkbox\" id=\"sd_oids\" name=\"sd_oids\" /></td>\n</tr>\n";		echo "</table>\n";		echo "<h3>{$lang['stroptions']}</h3>\n";		echo "<p><input type=\"radio\" id=\"output1\" name=\"output\" value=\"show\" checked=\"checked\" /><label for=\"output1\">{$lang['strshow']}</label>\n";		echo "<br/><input type=\"radio\" id=\"output2\" name=\"output\" value=\"download\" /><label for=\"output2\">{$lang['strdownload']}</label>\n";		// MSIE cannot download gzip in SSL mode - it's just broken		if (!(strstr($_SERVER['HTTP_USER_AGENT'], 'MSIE') && isset($_SERVER['HTTPS']))) {			echo "<br /><input type=\"radio\" id=\"output3\" name=\"output\" value=\"gzipped\" /><label for=\"output3\">{$lang['strdownloadgzipped']}</label>\n";		}		echo "</p>\n";		echo "<p><input type=\"hidden\" name=\"action\" value=\"export\" />\n";		echo "<input type=\"hidden\" name=\"subject\" value=\"schema\" />\n";        echo "<input type=\"hidden\" name=\"database\" value=\"", htmlspecialchars($_REQUEST['database']), "\" />\n";        echo "<input type=\"hidden\" name=\"schema\" value=\"", htmlspecialchars($_REQUEST['schema']), "\" />\n";		echo $misc->form;		echo "<input type=\"submit\" value=\"{$lang['strexport']}\" /></p>\n";		echo "</form>\n";	}	/**	 * Generate XML for the browser tree.	 */	function doTree() {		global $misc, $data, $lang, $slony;		$schemas = $data->getSchemas();		$reqvars = $misc->getRequestVars('schema');		$attrs = array(			'text'   => field('nspname'),			'icon'   => 'Schema',			'toolTip'=> field('nspcomment'),			'action' => url('redirect.php',							$reqvars,							array(								'subject' => 'schema',								'schema'  => field('nspname')							)						),			'branch' => url('schemas.php',							$reqvars,							array(								'action'  => 'subtree',								'schema'  => field('nspname')							)						),		);		$misc->printTreeXML($schemas, $attrs);		exit;	}	function doSubTree() {		global $misc, $data, $lang;		$tabs = $misc->getNavTabs('schema');		$items = $misc->adjustTabsForTree($tabs);		$reqvars = $misc->getRequestVars('schema');		$attrs = array(			'text'   => noEscape(field('title')),			'icon'   => field('icon'),			'action' => url(field('url'),							$reqvars,							field('urlvars', array())						),			'branch' => url(field('url'),							$reqvars,							field('urlvars'),							array('action' => 'tree')						)		);		$misc->printTreeXML($items, $attrs);		exit;	}	if ($action == 'tree') doTree();	if ($action == 'subtree') doSubTree();	$misc->printHeader($lang['strschemas']);	$misc->printBody();	if (isset($_POST['cancel'])) $action = '';	switch ($action) {		case 'create':			if (isset($_POST['create'])) doSaveCreate();			else doCreate();			break;		case 'alter':			if (isset($_POST['alter'])) doSaveAlter();			else doAlter();			break;		case 'drop':			if (isset($_POST['drop'])) doDrop(false);			else doDrop(true);			break;		case 'export':			doExport();			break;		default:			doDefault();			break;	}	$misc->printFooter();?>
<?php/** * PostgreSQL 8.3 support * * $Id: Postgres82.php,v 1.10 2007/12/28 16:21:25 ioguix Exp $ */include_once('./classes/database/Postgres.php');class Postgres83 extends Postgres {	var $major_version = 8.3;	// List of all legal privileges that can be applied to different types	// of objects.	var $privlist = array(  		'table' => array('SELECT', 'INSERT', 'UPDATE', 'DELETE', 'REFERENCES', 'TRIGGER', 'ALL PRIVILEGES'),  		'view' => array('SELECT', 'INSERT', 'UPDATE', 'DELETE', 'REFERENCES', 'TRIGGER', 'ALL PRIVILEGES'),  		'sequence' => array('SELECT', 'UPDATE', 'ALL PRIVILEGES'),  		'database' => array('CREATE', 'TEMPORARY', 'CONNECT', 'ALL PRIVILEGES'),  		'function' => array('EXECUTE', 'ALL PRIVILEGES'),  		'language' => array('USAGE', 'ALL PRIVILEGES'),  		'schema' => array('CREATE', 'USAGE', 'ALL PRIVILEGES'),  		'tablespace' => array('CREATE', 'ALL PRIVILEGES')	);	// List of characters in acl lists and the privileges they	// refer to.	var $privmap = array(		'r' => 'SELECT',		'w' => 'UPDATE',		'a' => 'INSERT',  		'd' => 'DELETE',  		'R' => 'RULE',  		'x' => 'REFERENCES',  		't' => 'TRIGGER',  		'X' => 'EXECUTE',  		'U' => 'USAGE', 		'C' => 'CREATE',  		'T' => 'TEMPORARY',  		'c' => 'CONNECT'	);	/**	 * Constructor	 * @param $conn The database connection	 */	function Postgres83($conn) {		$this->Postgres($conn);	}	// Help functions	function getHelpPages() {		include_once('./help/PostgresDoc83.php');		return $this->help_page;	}	// Databse functions	/**	 * Return all database available on the server	 * @param $currentdatabase database name that should be on top of the resultset	 * 	 * @return A list of databases, sorted alphabetically	 */	function getDatabases($currentdatabase = NULL) {		global $conf, $misc;		$server_info = $misc->getServerInfo();		if (isset($conf['owned_only']) && $conf['owned_only'] && !$this->isSuperUser($server_info['username'])) {			$username = $server_info['username'];			$this->clean($username);			$clause = " AND pr.rolname='{$username}'";		}		else $clause = '';		if ($currentdatabase != NULL) {			$this->clean($currentdatabase);			$orderby = "ORDER BY pdb.datname = '{$currentdatabase}' DESC, pdb.datname";		}		else			$orderby = "ORDER BY pdb.datname";		if (!$conf['show_system'])			$where = ' AND NOT pdb.datistemplate';		else			$where = ' AND pdb.datallowconn';		$sql = "			SELECT pdb.datname AS datname, pr.rolname AS datowner, pg_encoding_to_char(encoding) AS datencoding,				(SELECT description FROM pg_catalog.pg_shdescription pd WHERE pdb.oid=pd.objoid) AS datcomment,				(SELECT spcname FROM pg_catalog.pg_tablespace pt WHERE pt.oid=pdb.dattablespace) AS tablespace,				pg_catalog.pg_database_size(pdb.oid) as dbsize			FROM pg_catalog.pg_database pdb LEFT JOIN pg_catalog.pg_roles pr ON (pdb.datdba = pr.oid)			WHERE true				{$where}				{$clause}			{$orderby}";		return $this->selectSet($sql);	}	// Administration functions	/**	 * Returns all available autovacuum per table information.	 * @return A recordset	 */	function getTableAutovacuum($table='') {		$sql = '';		if ($table !== '') {			$this->clean($table);			$c_schema = $this->_schema;			$this->clean($c_schema);			$sql = "				SELECT vacrelid, nspname, relname, 					CASE enabled 						WHEN 't' THEN 'on' 						ELSE 'off' 					END AS autovacuum_enabled, vac_base_thresh AS autovacuum_vacuum_threshold,					vac_scale_factor AS autovacuum_vacuum_scale_factor, anl_base_thresh AS autovacuum_analyze_threshold, 					anl_scale_factor AS autovacuum_analyze_scale_factor, vac_cost_delay AS autovacuum_vacuum_cost_delay, 					vac_cost_limit AS autovacuum_vacuum_cost_limit				FROM pg_autovacuum AS a					join pg_class AS c on (c.oid=a.vacrelid)					join pg_namespace AS n on (n.oid=c.relnamespace)				WHERE c.relname = '{$table}' AND n.nspname = '{$c_schema}'				ORDER BY nspname, relname			";		}		else {			$sql = "				SELECT vacrelid, nspname, relname, 					CASE enabled 						WHEN 't' THEN 'on' 						ELSE 'off' 					END AS autovacuum_enabled, vac_base_thresh AS autovacuum_vacuum_threshold,					vac_scale_factor AS autovacuum_vacuum_scale_factor, anl_base_thresh AS autovacuum_analyze_threshold, 					anl_scale_factor AS autovacuum_analyze_scale_factor, vac_cost_delay AS autovacuum_vacuum_cost_delay, 					vac_cost_limit AS autovacuum_vacuum_cost_limit				FROM pg_autovacuum AS a					join pg_class AS c on (c.oid=a.vacrelid)					join pg_namespace AS n on (n.oid=c.relnamespace)				ORDER BY nspname, relname			";		}		return $this->selectSet($sql);	}		function saveAutovacuum($table, $vacenabled, $vacthreshold, $vacscalefactor, $anathresold, 		$anascalefactor, $vaccostdelay, $vaccostlimit) 	{		$defaults = $this->getAutovacuum();		$c_schema = $this->_schema;		$this->clean($c_schema);		$this->clean($table);				$rs = $this->selectSet("			SELECT c.oid 			FROM pg_catalog.pg_class AS c 				LEFT JOIN pg_catalog.pg_namespace AS n ON (n.oid=c.relnamespace)			WHERE 				c.relname = '{$table}' AND n.nspname = '{$c_schema}'		");				if ($rs->EOF)			return -1;					$toid = $rs->fields('oid');		unset ($rs);					if (empty($_POST['autovacuum_vacuum_threshold']))			$_POST['autovacuum_vacuum_threshold'] = $defaults['autovacuum_vacuum_threshold'];				if (empty($_POST['autovacuum_vacuum_scale_factor']))			$_POST['autovacuum_vacuum_scale_factor'] = $defaults['autovacuum_vacuum_scale_factor'];				if (empty($_POST['autovacuum_analyze_threshold']))			$_POST['autovacuum_analyze_threshold'] = $defaults['autovacuum_analyze_threshold'];				if (empty($_POST['autovacuum_analyze_scale_factor']))			$_POST['autovacuum_analyze_scale_factor'] = $defaults['autovacuum_analyze_scale_factor'];				if (empty($_POST['autovacuum_vacuum_cost_delay']))			$_POST['autovacuum_vacuum_cost_delay'] = $defaults['autovacuum_vacuum_cost_delay'];				if (empty($_POST['autovacuum_vacuum_cost_limit']))			$_POST['autovacuum_vacuum_cost_limit'] = $defaults['autovacuum_vacuum_cost_limit'];				if (empty($_POST['vacuum_freeze_min_age']))			$_POST['vacuum_freeze_min_age'] = $defaults['vacuum_freeze_min_age'];				if (empty($_POST['autovacuum_freeze_max_age']))			$_POST['autovacuum_freeze_max_age'] = $defaults['autovacuum_freeze_max_age'];				$rs = $this->selectSet("SELECT vacrelid 			FROM \"pg_catalog\".\"pg_autovacuum\" 			WHERE vacrelid = {$toid};");				$status = -1; // ini		if (isset($rs->fields['vacrelid']) and ($rs->fields['vacrelid'] == $toid)) {			// table exists in pg_autovacuum, UPDATE			$sql = sprintf("UPDATE \"pg_catalog\".\"pg_autovacuum\" SET 						enabled = '%s',						vac_base_thresh = %s,						vac_scale_factor = %s,						anl_base_thresh = %s,						anl_scale_factor = %s,						vac_cost_delay = %s,						vac_cost_limit = %s,						freeze_min_age = %s,						freeze_max_age = %s					WHERE vacrelid = {$toid};				",				($_POST['autovacuum_enabled'] == 'on')? 't':'f',				$_POST['autovacuum_vacuum_threshold'],				$_POST['autovacuum_vacuum_scale_factor'],				$_POST['autovacuum_analyze_threshold'],				$_POST['autovacuum_analyze_scale_factor'],				$_POST['autovacuum_vacuum_cost_delay'],				$_POST['autovacuum_vacuum_cost_limit'],				$_POST['vacuum_freeze_min_age'],				$_POST['autovacuum_freeze_max_age']			);			$status = $this->execute($sql);		}		else {			// table doesn't exists in pg_autovacuum, INSERT			$sql = sprintf("INSERT INTO \"pg_catalog\".\"pg_autovacuum\" 				VALUES (%s, '%s', %s, %s, %s, %s, %s, %s, %s, %s )				WHERE 					c.relname = '{$table}' AND n.nspname = '{$c_schema}';",				$toid,				($_POST['autovacuum_enabled'] == 'on')? 't':'f',				$_POST['autovacuum_vacuum_threshold'],				$_POST['autovacuum_vacuum_scale_factor'],				$_POST['autovacuum_analyze_threshold'],				$_POST['autovacuum_analyze_scale_factor'],				$_POST['autovacuum_vacuum_cost_delay'],				$_POST['autovacuum_vacuum_cost_limit'],				$_POST['vacuum_freeze_min_age'],				$_POST['autovacuum_freeze_max_age']			);			$status = $this->execute($sql);		}				return $status;	}	function dropAutovacuum($table) {		$c_schema = $this->_schema;		$this->clean($c_schema);		$this->clean($table);				$rs = $this->selectSet("			SELECT c.oid 			FROM pg_catalog.pg_class AS c 				LEFT JOIN pg_catalog.pg_namespace AS n ON (n.oid=c.relnamespace)			WHERE 				c.relname = '{$table}' AND n.nspname = '{$c_schema}'		");				return $this->deleteRow('pg_autovacuum', array('vacrelid' => $rs->fields['oid']), 'pg_catalog');	}		// Sequence functions		/**	 * Alter a sequence's properties	 * @param $seqrs The sequence RecordSet returned by getSequence()	 * @param $increment The sequence incremental value	 * @param $minvalue The sequence minimum value	 * @param $maxvalue The sequence maximum value	 * @param $restartvalue The sequence current value	 * @param $cachevalue The sequence cache value	 * @param $cycledvalue Sequence can cycle ?	 * @param $startvalue The sequence start value when issueing a restart (ignored)	 * @return 0 success	 */	function alterSequenceProps($seqrs, $increment,	$minvalue, $maxvalue,								$restartvalue, $cachevalue, $cycledvalue, $startvalue) {		$sql = '';		/* vars are cleaned in _alterSequence */		if (!empty($increment) && ($increment != $seqrs->fields['increment_by'])) $sql .= " INCREMENT {$increment}";		if (!empty($minvalue) && ($minvalue != $seqrs->fields['min_value'])) $sql .= " MINVALUE {$minvalue}";		if (!empty($maxvalue) && ($maxvalue != $seqrs->fields['max_value'])) $sql .= " MAXVALUE {$maxvalue}";		if (!empty($restartvalue) && ($restartvalue != $seqrs->fields['last_value'])) $sql .= " RESTART {$restartvalue}";		if (!empty($cachevalue) && ($cachevalue != $seqrs->fields['cache_value'])) $sql .= " CACHE {$cachevalue}";		// toggle cycle yes/no		if (!is_null($cycledvalue))	$sql .= (!$cycledvalue ? ' NO ' : '') . " CYCLE";		if ($sql != '') {			$f_schema = $this->_schema;			$this->fieldClean($f_schema);			$sql = "ALTER SEQUENCE \"{$f_schema}\".\"{$seqrs->fields['seqname']}\" {$sql}";			return $this->execute($sql);		}		return 0;	}	/**	 * Alter a sequence's owner	 * @param $seqrs The sequence RecordSet returned by getSequence()	 * @param $name The new owner for the sequence	 * @return 0 success	 */	function alterSequenceOwner($seqrs, $owner) {		// If owner has been changed, then do the alteration.  We are		// careful to avoid this generally as changing owner is a		// superuser only function.		/* vars are cleaned in _alterSequence */		if (!empty($owner) && ($seqrs->fields['seqowner'] != $owner)) {			$f_schema = $this->_schema;			$this->fieldClean($f_schema);			$sql = "ALTER TABLE \"{$f_schema}\".\"{$seqrs->fields['seqname']}\" OWNER TO \"{$owner}\"";			return $this->execute($sql);		}		return 0;	}	function hasQueryKill() { return false; }	function hasDatabaseCollation() { return false; }	function hasAlterSequenceStart() { return false; }}?>
<?php	/**	 * Function library read in upon startup	 *	 * $Id: lib.inc.php,v 1.123 2008/04/06 01:10:35 xzilla Exp $	 */	include_once('./libraries/decorator.inc.php');	include_once('./lang/translations.php');	// Set error reporting level to max	error_reporting(E_ALL); 	// Application name	$appName = 'phpPgAdmin';	// Application version	$appVersion = '5.0';	// PostgreSQL and PHP minimum version	$postgresqlMinVer = '7.4';	$phpMinVer = '5.0';	// Check the version of PHP	if (version_compare(phpversion(), $phpMinVer, '<'))		exit(sprintf('Version of PHP not supported. Please upgrade to version %s or later.', $phpMinVer));	// Check to see if the configuration file exists, if not, explain	if (file_exists('conf/config.inc.php')) {		$conf = array();		include('./conf/config.inc.php');	}	else {		echo 'Configuration error: Copy conf/config.inc.php-dist to conf/config.inc.php and edit appropriately.';		exit;	}	// Configuration file version.  If this is greater than that in config.inc.php, then	// the app will refuse to run.  This and $conf['version'] should be incremented whenever	// backwards incompatible changes are made to config.inc.php-dist.	$conf['base_version'] = 16;	// Always include english.php, since it's the master language file	if (!isset($conf['default_lang'])) $conf['default_lang'] = 'english';	$lang = array();	require_once('./lang/recoded/english.php');	// Create Misc class references	require_once('./classes/Misc.php');	$misc = new Misc();	// Start session (if not auto-started)	if (!ini_get('session.auto_start')) {		session_name('PPA_ID');		session_start();	}	// Do basic PHP configuration checks	if (ini_get('magic_quotes_gpc')) {		$misc->stripVar($_GET);		$misc->stripVar($_POST);		$misc->stripVar($_COOKIE);		$misc->stripVar($_REQUEST);	}	// This has to be deferred until after stripVar above	$misc->setHREF();	$misc->setForm();	// Enforce PHP environment	ini_set('magic_quotes_runtime', 0);	ini_set('magic_quotes_sybase', 0);	ini_set('arg_separator.output', '&amp;');	// If login action is set, then set session variables	if (isset($_POST['loginServer']) && isset($_POST['loginUsername']) &&		isset($_POST['loginPassword_'.md5($_POST['loginServer'])])) {		$_server_info = $misc->getServerInfo($_POST['loginServer']);		$_server_info['username'] = $_POST['loginUsername'];		$_server_info['password'] = $_POST['loginPassword_'.md5($_POST['loginServer'])];		$misc->setServerInfo(null, $_server_info, $_POST['loginServer']);		// Check for shared credentials		if (isset($_POST['loginShared'])) {			$_SESSION['sharedUsername'] = $_POST['loginUsername'];			$_SESSION['sharedPassword'] = $_POST['loginPassword_'.md5($_POST['loginServer'])];		}		$_reload_browser = true;	}	/* select the theme */	unset($_theme);	$conf['theme'] = 'default';	// 1. Check for the theme from a request var	if (isset($_REQUEST['theme']) && is_file("./themes/{$_REQUEST['theme']}/global.css")) {		/* save the selected theme in cookie for a year */		setcookie('ppaTheme', $_REQUEST['theme'], time()+31536000);		$_theme = $_SESSION['ppaTheme'] = $conf['theme'] = $_REQUEST['theme'];	}	// 2. Check for theme session var	if (!isset($_theme) && isset($_SESSION['ppaTheme']) && is_file("./themes/{$_SESSION['ppaTheme']}/global.css")) {		$conf['theme']  = $_SESSION['ppaTheme'];	}	// 3. Check for theme in cookie var	if (!isset($_theme) && isset($_COOKIE['ppaTheme']) && is_file("./themes/{$_COOKIE['ppaTheme']}/global.css")) {		$conf['theme']  = $_COOKIE['ppaTheme'];	}	// Determine language file to import:	unset($_language);	// 1. Check for the language from a request var	if (isset($_REQUEST['language']) && isset($appLangFiles[$_REQUEST['language']])) {		/* save the selected language in cookie for a year */		setcookie('webdbLanguage', $_REQUEST['language'], time()+31536000);		$_language = $_REQUEST['language'];	}	// 2. Check for language session var	if (!isset($_language) && isset($_SESSION['webdbLanguage']) && isset($appLangFiles[$_SESSION['webdbLanguage']])) {		$_language = $_SESSION['webdbLanguage'];	}	// 3. Check for language in cookie var	if (!isset($_language) && isset($_COOKIE['webdbLanguage']) && isset($appLangFiles[$_COOKIE['webdbLanguage']])) {		$_language  = $_COOKIE['webdbLanguage'];	}	// 4. Check for acceptable languages in HTTP_ACCEPT_LANGUAGE var	if (!isset($_language) && $conf['default_lang'] == 'auto' && isset($_SERVER['HTTP_ACCEPT_LANGUAGE'])) {		// extract acceptable language tags		// (http://www.w3.org/Protocols/rfc2616/rfc2616-sec14.html#sec14.4)		preg_match_all('/\s*([a-z]{1,8}(?:-[a-z]{1,8})*)(?:;q=([01](?:.[0-9]{0,3})?))?\s*(?:,|$)/', strtolower($_SERVER['HTTP_ACCEPT_LANGUAGE']), $_m, PREG_SET_ORDER);		foreach($_m as $_l) {  // $_l[1] = language tag, [2] = quality			if (!isset($_l[2])) $_l[2] = 1;  // Default quality to 1			if ($_l[2] > 0 && $_l[2] <= 1 && isset($availableLanguages[$_l[1]])) {				// Build up array of (quality => language_file)				$_acceptLang[$_l[2]] = $availableLanguages[$_l[1]];			}		}		unset($_m);		unset($_l);		if (isset($_acceptLang)) {			// Sort acceptable languages by quality			krsort($_acceptLang, SORT_NUMERIC);			$_language = reset($_acceptLang);			unset($_acceptLang);		}	}	// 5. Otherwise resort to the default set in the config file	if (!isset($_language) && $conf['default_lang'] != 'auto' && isset($appLangFiles[$conf['default_lang']])) {		$_language = $conf['default_lang'];	}	// Import the language file	if (isset($_language)) {		include("./lang/recoded/{$_language}.php");		$_SESSION['webdbLanguage'] = $_language;	}	// Check for config file version mismatch	if (!isset($conf['version']) || $conf['base_version'] > $conf['version']) {		echo $lang['strbadconfig'];		exit;	}	// Check database support is properly compiled in	if (!function_exists('pg_connect')) {		echo $lang['strnotloaded'];		exit;	}	// Create data accessor object, if necessary	if (!isset($_no_db_connection)) {		if (!isset($_REQUEST['server'])) {			echo $lang['strnoserversupplied'];			exit;	    }		$_server_info = $misc->getServerInfo();		/* starting with PostgreSQL 9.0, we can set the application name */		if(isset($_server_info['pgVersion']) && $_server_info['pgVersion'] >= 9)			putenv("PGOPTIONS=--application_name={$appName}_{$appVersion}");		// Redirect to the login form if not logged in		if (!isset($_server_info['username'])) {			include('./login.php');			exit;		}		// Connect to the current database, or if one is not specified		// then connect to the default database.		if (isset($_REQUEST['database']))			$_curr_db = $_REQUEST['database'];		else			$_curr_db = $_server_info['defaultdb'];		include_once('./classes/database/Connection.php');		// Connect to database and set the global $data variable		$data = $misc->getDatabaseAccessor($_curr_db);		// If schema is defined and database supports schemas, then set the		// schema explicitly.		if (isset($_REQUEST['database']) && isset($_REQUEST['schema'])) {			$status = $data->setSchema($_REQUEST['schema']);			if ($status != 0) {				echo $lang['strbadschema'];				exit;			}		}		// Get database encoding		$dbEncoding = $data->getDatabaseEncoding();		// Set client encoding to database encoding		if ($dbEncoding != '') {			// Explicitly change client encoding if it's different to server encoding.			if (function_exists('pg_client_encoding'))				$currEncoding = pg_client_encoding($data->conn->_connectionID);			elseif (function_exists('pg_clientencoding'))				$currEncoding = pg_clientencoding($data->conn->_connectionID);			else				$currEncoding = null;			if ($currEncoding != $dbEncoding) {				$status = $data->setClientEncoding($dbEncoding);				if ($status != 0 && $status != -99) {					echo $lang['strbadencoding'];					exit;				}			}			// Override $lang['appcharset']			if (isset($data->codemap[$dbEncoding]))				$lang['appcharset'] = $data->codemap[$dbEncoding];			else				$lang['appcharset'] = $dbEncoding;		}		// Load Slony if required		if ($_server_info['slony_support']) {			include('./classes/plugins/Slony.php');			$slony = new Slony();		}	}	if (!function_exists("htmlspecialchars_decode")) {		function htmlspecialchars_decode($string, $quote_style = ENT_COMPAT) {			return strtr($string, array_flip(get_html_translation_table(HTML_SPECIALCHARS, $quote_style)));		}	}?>
<?php	/**	 * Manage conversions in a database	 *	 * $Id: conversions.php,v 1.15 2007/08/31 18:30:10 ioguix Exp $	 */	// Include application functions	include_once('./libraries/lib.inc.php');		$action = (isset($_REQUEST['action'])) ? $_REQUEST['action'] : '';	if (!isset($msg)) $msg = '';	/**	 * Show default list of conversions in the database	 */	function doDefault($msg = '') {		global $data, $conf, $misc, $database;		global $lang;		$misc->printTrail('schema');		$misc->printTabs('schema', 'conversions');		$misc->printMsg($msg);				$conversions = $data->getconversions();				$columns = array(			'conversion' => array(				'title' => $lang['strname'],				'field' => field('conname'),			),			'source_encoding' => array(				'title' => $lang['strsourceencoding'],				'field' => field('conforencoding'),			),			'target_encoding' => array(				'title' => $lang['strtargetencoding'],				'field' => field('contoencoding'),			),			'default' => array(				'title' => $lang['strdefault'],				'field' => field('condefault'),				'type'  => 'yesno',			),			'comment' => array(				'title' => $lang['strcomment'],				'field' => field('concomment'),			),		);				$actions = array();				$misc->printTable($conversions, $columns, $actions, $lang['strnoconversions']);	}		/**	 * Generate XML for the browser tree.	 */	function doTree() {		global $misc, $data;				$conversions = $data->getconversions();				$attrs = array(			'text'   => field('conname'),			'icon'   => 'Conversion',			'toolTip'=> field('concomment')		);				$misc->printTreeXML($conversions, $attrs);		exit;	}		if ($action == 'tree') doTree();		$misc->printHeader($lang['strconversions']);	$misc->printBody();	switch ($action) {		default:			doDefault();			break;	}		$misc->printFooter();?>
<?php	/**	 * Manage servers	 *	 * $Id: servers.php,v 1.12 2008/02/18 22:20:26 ioguix Exp $	 */	// Include application functions	$_no_db_connection = true;	include_once('./libraries/lib.inc.php');		$action = (isset($_REQUEST['action'])) ? $_REQUEST['action'] : '';	if (!isset($msg)) $msg = '';		function doLogout() {		global $misc, $lang, $_reload_browser;				$server_info = $misc->getServerInfo($_REQUEST['logoutServer']);		$misc->setServerInfo(null, null, $_REQUEST['logoutServer']);		unset($_SESSION['sharedUsername'], $_SESSION['sharedPassword']);		doDefault(sprintf($lang['strlogoutmsg'], $server_info['desc']));				$_reload_browser = true;	}	function doDefault($msg = '') {		global $conf, $misc;		global $lang;				$misc->printTabs('root','servers');		$misc->printMsg($msg);				$group = isset($_GET['group']) ? $_GET['group'] : false;				$servers = $misc->getServers(true, $group);				function svPre(&$rowdata, $actions) {			$actions['logout']['disable'] = empty($rowdata->fields['username']);			return $actions;		}				$columns = array(			'server' => array(				'title' => $lang['strserver'],				'field' => field('desc'),				'url'   => "redirect.php?subject=server&amp;",				'vars'  => array('server' => 'id'),			),			'host' => array(				'title' => $lang['strhost'],				'field' => field('host'),			),			'port' => array(				'title' => $lang['strport'],				'field' => field('port'),			),			'username' => array(				'title' => $lang['strusername'],				'field' => field('username'),			),			'actions' => array(				'title' => $lang['stractions'],			),		);				$actions = array(			'logout' => array(				'title' => $lang['strlogout'],				'url'   => "servers.php?action=logout&amp;",				'vars'  => array('logoutServer' => 'id'),			),		);				if (($group !== false) and isset($conf['srv_groups'][$group])) {			printf("<h2>{$lang['strgroupservers']}</h2>", htmlentities($conf['srv_groups'][$group]['desc']));			$actions['logout']['url'] .= "group=" . htmlentities($group) . "&amp;";		}				$misc->printTable($servers, $columns, $actions, $lang['strnoobjects'], 'svPre');				if (isset($conf['srv_groups'])) {			echo "<br /><ul class=\"navlink\">\n";			echo "\t<li><a href=\"servers.php\">{$lang['strallservers']}</a></li>\n";			foreach ($conf['srv_groups'] as $id => $grp) {				echo "\t<li><a href=\"servers.php?group={$id}\">", htmlentities($grp['desc']), "</a></li>\n";			}			echo "</ul>\n";					}	}		function doTree($group = false) {		global $misc;				$servers = $misc->getServers(true, $group);				$reqvars = $misc->getRequestVars('server');				$attrs = array(			'text'   => field('desc'),						// Show different icons for logged in/out			'icon'   => ifempty(field('username'), 'DisconnectedServer', 'Server'),						'toolTip'=> field('id'),						'action' => url('redirect.php',							$reqvars,							array('server' => field('id'))						),						// Only create a branch url if the user has			// logged into the server.			'branch' => ifempty(field('username'), false,							url('all_db.php',								$reqvars,								array(									'action' => 'tree',									'server' => field('id')								)							)						),		);				$misc->printTreeXML($servers, $attrs);		exit;	}		function doGroupsTree() {		global $misc;				$groups = $misc->getServersGroups();		function escape($fields) {			global $lang;			if ($fields['id'] === 'all') {				return $lang['strallservers'];			}			else return value(field('desc'), $fields, 'xml');		}		$attrs = array(			'text'   => noEscape(callback('escape')),			'icon'   => 'Servers',						'action' => url('servers.php',				array(					'group' => field('id')				)			),			'branch' => url('servers.php',				array(					'action' => 'tree',					'group' => field('id')				)			)		);				$misc->printTreeXML($groups, $attrs);		exit;	}		if ($action == 'tree') {		if (isset($_GET['group'])) doTree($_GET['group']);		else doTree(false);	}	if ($action == 'groupstree') doGroupsTree();		$misc->printHeader($lang['strservers']);	$misc->printBody();	$misc->printTrail('root');	switch ($action) {		case 'logout':			doLogout();			break;		default:			doDefault($msg);			break;	}	$misc->printFooter();?>
<?php	include_once('./libraries/lib.inc.php');	if(isset($_POST['offset']))		$offset = " OFFSET {$_POST['offset']}";	else {		$_POST['offset'] = 0;		$offset = " OFFSET 0";	}	$keynames = array();	foreach ($_POST['fkeynames'] as $k => $v) {		$fkeynames[$k] = html_entity_decode($v, ENT_QUOTES);	}	$keyspos = array_combine($fkeynames, $_POST['keys']);	$f_schema = html_entity_decode($_POST['f_schema'], ENT_QUOTES);	$data->fieldClean($f_schema);	$f_table = html_entity_decode($_POST['f_table'], ENT_QUOTES);	$data->fieldClean($f_table);	$f_attname = $fkeynames[$_POST['fattpos'][0]];	$data->fieldClean($f_attname);	$q = "SELECT *		FROM \"{$f_schema}\".\"{$f_table}\"		WHERE \"{$f_attname}\"::text LIKE '{$_POST['fvalue']}%'		ORDER BY \"{$f_attname}\" LIMIT 12 {$offset};";	$res = $data->selectSet($q);	if (!$res->EOF) {		echo "<table class=\"ac_values\">";		echo '<tr>';		foreach (array_keys($res->fields) as $h) {			echo '<th>';			if (in_array($h, $fkeynames))				echo '<img src="'. $misc->icon('ForeignKey') .'" alt="[referenced key]" />';			echo htmlentities($h), '</th>';					}		echo "</tr>\n";		$i=0;		while ((!$res->EOF) && ($i < 11)) {			echo "<tr class=\"acline\">";			foreach ($res->fields as $n => $v) {				if (in_array($n, $fkeynames))					echo "<td><a href=\"javascript:void(0)\" class=\"fkval\" name=\"{$keyspos[$n]}\">",htmlentities($v), "</a></td>";				else					echo "<td><a href=\"javascript:void(0)\">", htmlentities($v), "</a></td>";			}			echo "</tr>\n";			$i++;			$res->moveNext();		}				echo "</table>\n";		$page_tests='';		$js = "<script type=\"text/javascript\">\n";				if ($_POST['offset']) {			echo "<a href=\"javascript:void(0)\" id=\"fkprev\">&lt;&lt; Prev</a>";			$js.= "fkl_hasprev=true;\n";		}		else			$js.= "fkl_hasprev=false;\n";		if ($res->recordCount() == 12) {			$js.= "fkl_hasnext=true;\n";			echo "&nbsp;&nbsp;&nbsp;<a href=\"javascript:void(0)\" id=\"fknext\">Next &gt;&gt;</a>";		}		else			$js.= "fkl_hasnext=false;\n";				echo $js ."</script>";	}	else {		printf("<p>{$lang['strnofkref']}</p>", "\"{$_POST['f_schema']}\".\"{$_POST['f_table']}\".\"{$fkeynames[$_POST['fattpos']]}\"");		if ($_POST['offset'])			echo "<a href=\"javascript:void(0)\" class=\"fkprev\">Prev &lt;&lt;</a>";	}?>
<?php/** * A class that implements the DB interface for Postgres * Note: This class uses ADODB and returns RecordSets. * * $Id: Postgres74.php,v 1.72 2008/02/20 21:06:18 ioguix Exp $ */include_once('./classes/database/Postgres80.php');class Postgres74 extends Postgres80 {	var $major_version = 7.4;	// List of all legal privileges that can be applied to different types	// of objects.	var $privlist = array(		'table' => array('SELECT', 'INSERT', 'UPDATE', 'DELETE', 'RULE', 'REFERENCES', 'TRIGGER', 'ALL PRIVILEGES'),		'view' => array('SELECT', 'INSERT', 'UPDATE', 'DELETE', 'RULE', 'REFERENCES', 'TRIGGER', 'ALL PRIVILEGES'),		'sequence' => array('SELECT', 'UPDATE', 'ALL PRIVILEGES'),		'database' => array('CREATE', 'TEMPORARY', 'ALL PRIVILEGES'),		'function' => array('EXECUTE', 'ALL PRIVILEGES'),		'language' => array('USAGE', 'ALL PRIVILEGES'),		'schema' => array('CREATE', 'USAGE', 'ALL PRIVILEGES')	);	/**	 * Constructor	 * @param $conn The database connection	 */	function Postgres74($conn) {		$this->Postgres80($conn);	}	// Help functions	function getHelpPages() {		include_once('./help/PostgresDoc74.php');		return $this->help_page;	}	// Database functions	/**	 * Alters a database	 * the multiple return vals are for postgres 8+ which support more functionality in alter database	 * @param $dbName The name of the database	 * @param $newName new name for the database	 * @param $newOwner The new owner for the database	 * @return 0 success	 * @return -1 transaction error	 * @return -2 owner error	 * @return -3 rename error	 */	function alterDatabase($dbName, $newName, $newOwner = '', $comment = '') {		//ignore $newowner, not supported pre 8.0		//ignore $comment, not supported pre 8.2		$this->clean($dbName);		$this->clean($newName);		$status = $this->alterDatabaseRename($dbName, $newName);		if ($status != 0) return -3;		else return 0;	}	/**	 * Return all database available on the server	 * @return A list of databases, sorted alphabetically	 */	function getDatabases($currentdatabase = NULL) {		global $conf, $misc;		$server_info = $misc->getServerInfo();		if (isset($conf['owned_only']) && $conf['owned_only'] && !$this->isSuperUser($server_info['username'])) {			$username = $server_info['username'];			$this->clean($username);			$clause = " AND pu.usename='{$username}'";		}		else $clause = '';		if ($currentdatabase != NULL) {			$this->clean($currentdatabase);			$orderby = "ORDER BY pdb.datname = '{$currentdatabase}' DESC, pdb.datname";		}		else			$orderby = "ORDER BY pdb.datname";		if (!$conf['show_system'])			$where = ' AND NOT pdb.datistemplate';		else			$where = ' AND pdb.datallowconn';		$sql = "SELECT pdb.datname AS datname, pu.usename AS datowner, pg_encoding_to_char(encoding) AS datencoding,                               (SELECT description FROM pg_description pd WHERE pdb.oid=pd.objoid) AS datcomment                        FROM pg_database pdb, pg_user pu			WHERE pdb.datdba = pu.usesysid			{$where}			{$clause}			{$orderby}";		return $this->selectSet($sql);	}	// Table functions	/**	 * Protected method which alter a table	 * SHOULDN'T BE CALLED OUTSIDE OF A TRANSACTION	 * @param $tblrs The table recordSet returned by getTable()	 * @param $name The new name for the table	 * @param $owner The new owner for the table	 * @param $schema The new schema for the table	 * @param $comment The comment on the table	 * @param $tablespace The new tablespace for the table ('' means leave as is)	 * @return 0 success	 * @return -3 rename error	 * @return -4 comment error	 * @return -5 owner error	 */	protected	function _alterTable($tblrs, $name, $owner, $schema, $comment, $tablespace) {		/* $schema and tablespace not supported in pg74- */		$this->fieldArrayClean($tblrs->fields);		// Comment		$status = $this->setComment('TABLE', '', $tblrs->fields['relname'], $comment);		if ($status != 0) return -4;		// Owner		$this->fieldClean($owner);		$status = $this->alterTableOwner($tblrs, $owner);		if ($status != 0) return -5;		// Rename		$this->fieldClean($name);		$status = $this->alterTableName($tblrs, $name);		if ($status != 0) return -3;		return 0;	}	/**	 * Alters a column in a table OR view	 * @param $table The table in which the column resides	 * @param $column The column to alter	 * @param $name The new name for the column	 * @param $notnull (boolean) True if not null, false otherwise	 * @param $oldnotnull (boolean) True if column is already not null, false otherwise	 * @param $default The new default for the column	 * @param $olddefault The old default for the column	 * @param $type The new type for the column	 * @param $array True if array type, false otherwise	 * @param $length The optional size of the column (ie. 30 for varchar(30))	 * @param $oldtype The old type for the column	 * @param $comment Comment for the column	 * @return 0 success	 * @return -2 set not null error	 * @return -3 set default error	 * @return -4 rename column error	 * @return -5 comment error	 * @return -6 transaction error	 */	function alterColumn($table, $column, $name, $notnull, $oldnotnull, $default, $olddefault,	$type, $length, $array, $oldtype, $comment)	{		$status = $this->beginTransaction();		if ($status != 0) return -1;		// @@ NEED TO HANDLE "NESTED" TRANSACTION HERE		if ($notnull != $oldnotnull) {			$status = $this->setColumnNull($table, $column, !$notnull);			if ($status != 0) {				$this->rollbackTransaction();				return -2;			}		}		// Set default, if it has changed		if ($default != $olddefault) {			if ($default == '')				$status = $this->dropColumnDefault($table, $column);			else				$status = $this->setColumnDefault($table, $column, $default);			if ($status != 0) {				$this->rollbackTransaction();				return -3;			}		}		// Rename the column, if it has been changed		if ($column != $name) {			$status = $this->renameColumn($table, $column, $name);			if ($status != 0) {				$this->rollbackTransaction();				return -4;			}		}		// The $name and $table parameters must be cleaned for the setComment function.                  // It's ok to do that here since this is the last time these variables are used.		$this->fieldClean($name);		$this->fieldClean($table);		$status = $this->setComment('COLUMN', $name, $table, $comment);		if ($status != 0) {			$this->rollbackTransaction();			return -5;		}		return $this->endTransaction();	}	/**	 * Returns table information	 * @param $table The name of the table	 * @return A recordset	 */	function getTable($table) {		$c_schema = $this->_schema;		$this->clean($c_schema);		$this->clean($table);		$sql = "			SELECT			  c.relname, n.nspname, u.usename AS relowner,			  pg_catalog.obj_description(c.oid, 'pg_class') AS relcomment			FROM pg_catalog.pg_class c			     LEFT JOIN pg_catalog.pg_user u ON u.usesysid = c.relowner			     LEFT JOIN pg_catalog.pg_namespace n ON n.oid = c.relnamespace			WHERE c.relkind = 'r'				AND n.nspname = '{$c_schema}'			    AND c.relname = '{$table}'";		return $this->selectSet($sql);	}	/**	 * Return all tables in current database (and schema)	 * @param $all True to fetch all tables, false for just in current schema	 * @return All tables, sorted alphabetically	 */	function getTables($all = false) {		$c_schema = $this->_schema;		$this->clean($c_schema);		if ($all) {			// Exclude pg_catalog and information_schema tables			$sql = "SELECT schemaname AS nspname, tablename AS relname, tableowner AS relowner					FROM pg_catalog.pg_tables					WHERE schemaname NOT IN ('pg_catalog', 'information_schema', 'pg_toast')					ORDER BY schemaname, tablename";		} else {			$sql = "SELECT c.relname, pg_catalog.pg_get_userbyid(c.relowner) AS relowner,						pg_catalog.obj_description(c.oid, 'pg_class') AS relcomment,						reltuples::bigint					FROM pg_catalog.pg_class c					LEFT JOIN pg_catalog.pg_namespace n ON n.oid = c.relnamespace					WHERE c.relkind = 'r'					AND nspname='{$c_schema}'					ORDER BY c.relname";		}		return $this->selectSet($sql);	}	/**	 * Returns the current default_with_oids setting	 * @return default_with_oids setting	 */	function getDefaultWithOid() {		// 8.0 is the first release to have this setting		// Prior releases don't have this setting... oids always activated		return 'on';		}	// Sequence functions	/**	 * Returns all sequences in the current database	 * @return A recordset	 */	function getSequences($all = false) {		$c_schema = $this->_schema;		$this->clean($c_schema);		if ($all) {			// Exclude pg_catalog and information_schema tables			$sql = "SELECT n.nspname, c.relname AS seqname, u.usename AS seqowner				FROM pg_catalog.pg_class c, pg_catalog.pg_user u, pg_catalog.pg_namespace n				WHERE c.relowner=u.usesysid AND c.relnamespace=n.oid				AND c.relkind = 'S'				AND n.nspname NOT IN ('pg_catalog', 'information_schema', 'pg_toast')				ORDER BY nspname, seqname";		} else {			$sql = "SELECT c.relname AS seqname, u.usename AS seqowner, pg_catalog.obj_description(c.oid, 'pg_class') AS seqcomment				FROM pg_catalog.pg_class c, pg_catalog.pg_user u, pg_catalog.pg_namespace n				WHERE c.relowner=u.usesysid AND c.relnamespace=n.oid				AND c.relkind = 'S' AND n.nspname='{$c_schema}' ORDER BY seqname";		}		return $this->selectSet( $sql );		}	// Function functions	/**	 * Returns all details for a particular function	 * @param $func The name of the function to retrieve	 * @return Function info	 */	function getFunction($function_oid) {		$this->clean($function_oid);		$sql = "		SELECT			pc.oid AS prooid,			proname,			pg_catalog.pg_get_userbyid(proowner) AS proowner,			nspname as proschema,			lanname as prolanguage,			pg_catalog.format_type(prorettype, NULL) as proresult,			prosrc,			probin,			proretset,			proisstrict,			provolatile,			prosecdef,			pg_catalog.oidvectortypes(pc.proargtypes) AS proarguments,			pg_catalog.obj_description(pc.oid, 'pg_proc') AS procomment		FROM			pg_catalog.pg_proc pc, pg_catalog.pg_language pl, pg_catalog.pg_namespace n		WHERE			pc.oid = '$function_oid'::oid			AND pc.prolang = pl.oid			AND n.oid = pc.pronamespace		";		return $this->selectSet($sql);	}	// Capabilities	function hasAlterColumnType() { return false; }	function hasCreateFieldWithConstraints() { return false; }	function hasAlterDatabaseOwner() { return false; }	function hasAlterSchemaOwner() { return false; }	function hasFunctionAlterOwner() { return false; }	function hasNamedParams() { return false; }	function hasQueryCancel() { return false; }	function hasTablespaces() { return false; }	function hasMagicTypes() { return false; }}?>
<?php	/**	 * Manage aggregates in a database	 *	 * $Id: aggregates.php,v 1.27 2008/01/19 13:46:15 ioguix Exp $	 */	// Include application functions	include_once('./libraries/lib.inc.php');		$action = (isset($_REQUEST['action'])) ? $_REQUEST['action'] : '';	if (!isset($msg)) $msg = '';	/**	 * Actually creates the new aggregate in the database	 */	function doSaveCreate() {		global $data, $lang, $_reload_browser;		// Check inputs		if (trim($_REQUEST['name']) == '') {			doCreate($lang['straggrneedsname']);			return;		}		else if (trim($_REQUEST['basetype']) == '') {			doCreate($lang['straggrneedsbasetype']);			return;		}		else if (trim($_REQUEST['sfunc']) == '') {			doCreate($lang['straggrneedssfunc']);			return;		}		else if (trim($_REQUEST['stype']) == '') {			doCreate($lang['straggrneedsstype']);			return;		}		$status = $data->createAggregate($_REQUEST['name'], $_REQUEST['basetype'], $_REQUEST['sfunc'], $_REQUEST['stype'], 		$_REQUEST['ffunc'], $_REQUEST['initcond'], $_REQUEST['sortop'], $_REQUEST['aggrcomment']);					if ($status == 0) {			$_reload_browser = true;			doDefault($lang['straggrcreated']);		}		else {			doCreate($lang['straggrcreatedbad']);		}	}		/**	 * Displays a screen for create a new aggregate function	 */	function doCreate($msg = '') {		global $data, $misc;		global $lang;		if (!isset($_REQUEST['name'])) $_REQUEST['name'] = '';		if (!isset($_REQUEST['basetype'])) $_REQUEST['basetype'] = '';		if (!isset($_REQUEST['sfunc'])) $_REQUEST['sfunc'] = '';		if (!isset($_REQUEST['stype'])) $_REQUEST['stype'] = '';		if (!isset($_REQUEST['ffunc'])) $_REQUEST['ffunc'] = '';		if (!isset($_REQUEST['initcond'])) $_REQUEST['initcond'] = '';		if (!isset($_REQUEST['sortop'])) $_REQUEST['sortop'] = '';		if (!isset($_REQUEST['aggrcomment'])) $_REQUEST['aggrcomment'] = '';		$misc->printTrail('schema');		$misc->printTitle($lang['strcreateaggregate'], 'pg.aggregate.create');		$misc->printMsg($msg);						echo "<form action=\"aggregates.php\" method=\"post\">\n";		echo "<table>\n";		echo "\t<tr>\n\t\t<th class=\"data left required\">{$lang['strname']}</th>\n";		echo "\t\t<td class=\"data\"><input name=\"name\" size=\"32\" maxlength=\"{$data->_maxNameLen}\" value=\"", 			htmlspecialchars($_REQUEST['name']), "\" /></td>\n\t</tr>\n";		echo "\t<tr>\n\t\t<th class=\"data left required\">{$lang['straggrbasetype']}</th>\n";		echo "\t\t<td class=\"data\"><input name=\"basetype\" size=\"32\" maxlength=\"{$data->_maxNameLen}\" value=\"", 			htmlspecialchars($_REQUEST['basetype']), "\" /></td>\n\t</tr>\n";		echo "\t<tr>\n\t\t<th class=\"data left required\">{$lang['straggrsfunc']}</th>\n";		echo "\t\t<td class=\"data\"><input name=\"sfunc\" size=\"32\" maxlength=\"{$data->_maxNameLen}\" value=\"", 			htmlspecialchars($_REQUEST['sfunc']), "\" /></td>\n\t</tr>\n";		echo "\t<tr>\n\t\t<th class=\"data left required\">{$lang['straggrstype']}</th>\n";		echo "\t\t<td class=\"data\"><input name=\"stype\" size=\"32\" maxlength=\"{$data->_maxNameLen}\" value=\"", 			htmlspecialchars($_REQUEST['stype']), "\" /></td>\n\t</tr>\n";		echo "\t<tr>\n\t\t<th class=\"data left\">{$lang['straggrffunc']}</th>\n";		echo "\t\t<td class=\"data\"><input name=\"ffunc\" size=\"32\" maxlength=\"{$data->_maxNameLen}\" value=\"", 			htmlspecialchars($_REQUEST['ffunc']), "\" /></td>\n\t</tr>\n";		echo "\t<tr>\n\t\t<th class=\"data left\">{$lang['straggrinitcond']}</th>\n";		echo "\t\t<td class=\"data\"><input name=\"initcond\" size=\"32\" maxlength=\"{$data->_maxNameLen}\" value=\"", 			htmlspecialchars($_REQUEST['initcond']), "\" /></td>\n\t</tr>\n";		echo "\t<tr>\n\t\t<th class=\"data left\">{$lang['straggrsortop']}</th>\n";		echo "\t\t<td class=\"data\"><input name=\"sortop\" size=\"32\" maxlength=\"{$data->_maxNameLen}\" value=\"", 			htmlspecialchars($_REQUEST['sortop']), "\" /></td>\n\t</tr>\n";		echo "\t<tr>\n\t\t<th class=\"data left\">{$lang['strcomment']}</th>\n";		echo "\t\t<td><textarea name=\"aggrcomment\" rows=\"3\" cols=\"32\">", 			htmlspecialchars($_REQUEST['aggrcomment']), "</textarea></td>\n\t</tr>\n";		echo "</table>\n";		echo "<p><input type=\"hidden\" name=\"action\" value=\"save_create\" />\n";		echo $misc->form;		echo "<input type=\"submit\" value=\"{$lang['strcreate']}\" />\n";		echo "<input type=\"submit\" name=\"cancel\" value=\"{$lang['strcancel']}\" /></p>\n";		echo "</form>\n";	}	/** 	 * Function to save after altering an aggregate 	 */	function doSaveAlter() {		global $data, $lang;		// Check inputs 		if (trim($_REQUEST['aggrname']) == '') { 			doAlter($lang['straggrneedsname']); 			return; 		} 		$status = $data->alterAggregate($_REQUEST['aggrname'], $_REQUEST['aggrtype'], $_REQUEST['aggrowner'], 			$_REQUEST['aggrschema'], $_REQUEST['aggrcomment'], $_REQUEST['newaggrname'], $_REQUEST['newaggrowner'], 			$_REQUEST['newaggrschema'], $_REQUEST['newaggrcomment']);		if ($status == 0)			doDefault($lang['straggraltered']);		else {			doAlter($lang['straggralteredbad']);			return;		}	}	/**	 * Function to allow editing an aggregate function	 */	function doAlter($msg = '') {		global $data, $misc;		global $lang;		$misc->printTrail('aggregate');		$misc->printTitle($lang['stralter'], 'pg.aggregate.alter');		$misc->printMsg($msg);		echo "<form action=\"aggregates.php\" method=\"post\">\n";		$aggrdata = $data->getAggregate($_REQUEST['aggrname'], $_REQUEST['aggrtype']);		if($aggrdata->recordCount() > 0 ) {			// Output table header			echo "<table>\n";			echo "\t<tr>\n\t\t<th class=\"data required\">{$lang['strname']}</th>";			echo "<th class=\"data required\">{$lang['strowner']}</th>";			echo "<th class=\"data required\">{$lang['strschema']}</th>\n\t</tr>\n";			// Display aggregate's name, owner and schema			echo "\t<tr>\n\t\t<td><input name=\"newaggrname\" size=\"32\" maxlength=\"32\" value=\"", htmlspecialchars($_REQUEST['aggrname']), "\" /></td>";			echo "<td><input name=\"newaggrowner\" size=\"32\" maxlength=\"32\" value=\"", htmlspecialchars($aggrdata->fields['usename']), "\" /></td>";			echo "<td><input name=\"newaggrschema\" size=\"32\" maxlength=\"32\" value=\"", htmlspecialchars($_REQUEST['schema']), "\" /></td>\n\t</tr>\n";			echo "\t<tr>\n\t\t<th class=\"data left\">{$lang['strcomment']}</th>\n";			echo "\t\t<td><textarea name=\"newaggrcomment\" rows=\"3\" cols=\"32\">", 				htmlspecialchars($aggrdata->fields['aggrcomment']), "</textarea></td>\n\t</tr>\n";			echo "</table>\n";			echo "<p><input type=\"hidden\" name=\"action\" value=\"save_alter\" />\n";			echo $misc->form;			echo "<input type=\"hidden\" name=\"aggrname\" value=\"", htmlspecialchars($_REQUEST['aggrname']), "\" />\n";			echo "<input type=\"hidden\" name=\"aggrtype\" value=\"", htmlspecialchars($_REQUEST['aggrtype']), "\" />\n";			echo "<input type=\"hidden\" name=\"aggrowner\" value=\"", htmlspecialchars($aggrdata->fields['usename']), "\" />\n";			echo "<input type=\"hidden\" name=\"aggrschema\" value=\"", htmlspecialchars($_REQUEST['schema']), "\" />\n";			echo "<input type=\"hidden\" name=\"aggrcomment\" value=\"", htmlspecialchars($aggrdata->fields['aggrcomment']), "\" />\n";			echo "<input type=\"submit\" name=\"alter\" value=\"{$lang['stralter']}\" />\n";			echo "<input type=\"submit\" name=\"cancel\" value=\"{$lang['strcancel']}\" /></p>\n";		} else {			echo "<p>{$lang['strnodata']}</p>\n";			echo "<input type=\"submit\" name=\"cancel\" value=\"{$lang['strback']}\" /></p>\n";		}			echo "</form>\n";							}	/**	 * Show confirmation of drop and perform actual drop of the aggregate function selected	 */	function doDrop($confirm) {		global $data, $misc;		global $lang, $_reload_browser;		if ($confirm) {			$misc->printTrail('aggregate');			$misc->printTitle($lang['strdrop'], 'pg.aggregate.drop');			echo "<p>", sprintf($lang['strconfdropaggregate'], htmlspecialchars($_REQUEST['aggrname'])), "</p>\n";			echo "<form action=\"aggregates.php\" method=\"post\">\n";			echo "<p><input type=\"checkbox\" id=\"cascade\" name=\"cascade\" /> <label for=\"cascade\">{$lang['strcascade']}</label></p>\n";			echo "<p><input type=\"hidden\" name=\"action\" value=\"drop\" />\n";			echo "<input type=\"hidden\" name=\"aggrname\" value=\"", htmlspecialchars($_REQUEST['aggrname']), "\" />\n";			echo "<input type=\"hidden\" name=\"aggrtype\" value=\"", htmlspecialchars($_REQUEST['aggrtype']), "\" />\n";			echo $misc->form;			echo "<input type=\"submit\" name=\"drop\" value=\"{$lang['strdrop']}\" />\n";			echo "<input type=\"submit\" name=\"cancel\" value=\"{$lang['strcancel']}\" /></p>\n";			echo "</form>\n";		}		else {			$status = $data->dropAggregate($_POST['aggrname'], $_POST['aggrtype'], isset($_POST['cascade']));			if ($status == 0) {				$_reload_browser = true;				doDefault($lang['straggregatedropped']);			}			else				doDefault($lang['straggregatedroppedbad']);		}	}	/**	 * Show the properties of an aggregate	 */	function doProperties($msg = '') {		global $data, $misc;		global $lang;		$misc->printTrail('aggregate');		$misc->printTitle($lang['strproperties'],'pg.aggregate');		$misc->printMsg($msg);		$aggrdata = $data->getAggregate($_REQUEST['aggrname'], $_REQUEST['aggrtype']);		if($aggrdata->recordCount() > 0 ) {			// Display aggregate's info			echo "<table>\n";			echo "<tr>\n\t<th class=\"data left\">{$lang['strname']}</th>\n";			echo "\t<td class=\"data1\">", htmlspecialchars($_REQUEST['aggrname']), "</td>\n</tr>\n";			echo "<tr>\n\t<th class=\"data left\">{$lang['straggrbasetype']}</th>\n";			echo "\t<td class=\"data1\">", htmlspecialchars($_REQUEST['aggrtype']), "</td>\n</tr>\n";			echo "<tr>\n\t<th class=\"data left\">{$lang['straggrsfunc']}</th>\n";			echo "\t<td class=\"data1\">", htmlspecialchars($aggrdata->fields['aggtransfn']), "</td>\n</tr>\n";			echo "<tr>\n\t<th class=\"data left\">{$lang['straggrstype']}</th>\n";			echo "\t<td class=\"data1\">", htmlspecialchars($aggrdata->fields['aggstype']), "</td>\n</tr>\n";			echo "<tr>\n\t<th class=\"data left\">{$lang['straggrffunc']}</th>\n";			echo "\t<td class=\"data1\">", htmlspecialchars($aggrdata->fields['aggfinalfn']), "</td>\n</tr>\n";			echo "<tr>\n\t<th class=\"data left\">{$lang['straggrinitcond']}</th>\n";			echo "\t<td class=\"data1\">", htmlspecialchars($aggrdata->fields['agginitval']), "</td>\n</tr>\n";			if($data->hasAggregateSortOp()) {				echo "<tr>\n\t<th class=\"data left\">{$lang['straggrsortop']}</th>\n";				echo "\t<td class=\"data1\">", htmlspecialchars($aggrdata->fields['aggsortop']), "</td>\n</tr>\n";			}			echo "<tr>\n\t<th class=\"data left\">{$lang['strowner']}</th>\n";			echo "\t<td class=\"data1\">", htmlspecialchars($aggrdata->fields['usename']), "</td>\n</tr>\n";			echo "<tr>\n\t<th class=\"data left\">{$lang['strcomment']}</th>\n";			echo "\t<td class=\"data1\">", $misc->printVal($aggrdata->fields['aggrcomment']), "</td>\n</tr>\n";			echo "</table>\n";		}		else echo "<p>{$lang['strnodata']}</p>\n";		echo "<ul class=\"navlink\">\n\t<li><a class=\"navlink\" href=\"aggregates.php?{$misc->href}\">{$lang['straggrshowall']}</a></li>\n";		if ($data->hasAlterAggregate()) {		echo "\t<li><a class=\"navlink\" href=\"aggregates.php?action=alter&amp;{$misc->href}&amp;aggrname=", 			urlencode($_REQUEST['aggrname']), "&amp;aggrtype=", urlencode($_REQUEST['aggrtype']), "\">{$lang['stralter']}</a></li>\n";		}		echo "\t<li><a class=\"navlink\" href=\"aggregates.php?action=confirm_drop&amp;{$misc->href}&amp;aggrname=",			urlencode($_REQUEST['aggrname']), "&amp;aggrtype=", urlencode($_REQUEST['aggrtype']), "\">{$lang['strdrop']}</a></li>\n</ul>\n";	}	/**	 * Show default list of aggregate functions in the database	 */	function doDefault($msg = '') {		global $data, $conf, $misc;			global $lang;		$misc->printTrail('schema');		$misc->printTabs('schema', 'aggregates');		$misc->printMsg($msg);				$aggregates = $data->getAggregates();		$columns = array(			'aggrname' => array(				'title' => $lang['strname'],				'field' => field('proname'),				'url'   => "redirect.php?subject=aggregate&amp;action=properties&amp;{$misc->href}&amp;",				'vars'  => array('aggrname' => 'proname', 'aggrtype' => 'proargtypes'),			),			'aggrtype' => array(				'title' => $lang['strtype'],				'field' => field('proargtypes'),			),			'aggrtransfn' => array(				'title' => $lang['straggrsfunc'],				'field' => field('aggtransfn'),			),						'owner' => array(				'title' => $lang['strowner'],				'field' => field('usename'),			),						'actions' => array(				'title' => $lang['stractions'],			),						'comment' => array(				'title' => $lang['strcomment'],				'field' => field('aggrcomment'),			),		);				$actions = array(			'alter' => array(				'title' => $lang['stralter'],				'url'   => "aggregates.php?action=alter&amp;{$misc->href}&amp;",				'vars'  => array('aggrname' => 'proname', 'aggrtype' => 'proargtypes'),			),			'drop' => array(				'title' => $lang['strdrop'],				'url'   => "aggregates.php?action=confirm_drop&amp;{$misc->href}&amp;",				'vars'  => array('aggrname' => 'proname', 'aggrtype' => 'proargtypes'),			)		);		if (!$data->hasAlterAggregate()) unset($actions['alter']);		$misc->printTable($aggregates, $columns, $actions, $lang['strnoaggregates']);				echo "<p><a class=\"navlink\" href=\"aggregates.php?action=create&amp;{$misc->href}\">{$lang['strcreateaggregate']}</a></p>\n";	}	/**	 * Generate XML for the browser tree.	 */	function doTree() {		global $misc, $data;				$aggregates = $data->getAggregates();		$proto = concat(field('proname'), ' (', field('proargtypes'), ')');		$reqvars = $misc->getRequestVars('aggregate');				$attrs = array(			'text'    => $proto,			'icon'    => 'Aggregate',			'toolTip' => field('aggcomment'),			'action'  => url('redirect.php',				$reqvars,				array(					'action' => 'properties',					'aggrname' => field('proname'),					'aggrtype' => field('proargtypes')				)			)		);				$misc->printTreeXML($aggregates, $attrs);		exit;	}		if ($action == 'tree') doTree();		$misc->printHeader($lang['straggregates']);	$misc->printBody();	switch ($action) {		case 'create':			doCreate();			break;		case 'save_create':			if (isset($_POST['cancel'])) doDefault();			else doSaveCreate();			break;		case 'alter':			doAlter();			break;		case 'save_alter':			if (isset($_POST['alter'])) doSaveAlter();			else doProperties();			break;		case 'drop':			if (isset($_POST['drop'])) doDrop(false);			else doDefault();			break;		case 'confirm_drop':			doDrop(true);			break;		default:			doDefault();			break;		case 'properties':			doProperties();			break;	}	$misc->printFooter();?>
<?php	/**	 * List constraints on a table	 *	 * $Id: constraints.php,v 1.56 2007/12/31 16:46:07 xzilla Exp $	 */	// Include application functions	include_once('./libraries/lib.inc.php');	include_once('./classes/class.select.php');	$action = (isset($_REQUEST['action'])) ? $_REQUEST['action'] : '';	/**	 * Confirm and then actually add a FOREIGN KEY constraint	 */	function addForeignKey($stage, $msg = '') {		global $data, $misc;		global $lang;		if (!isset($_POST['name'])) $_POST['name'] = '';		if (!isset($_POST['target'])) $_POST['target'] = '';		switch ($stage) {			case 2:				// Check that they've given at least one source column				if (!isset($_REQUEST['SourceColumnList']) && (!isset($_POST['IndexColumnList']) || !is_array($_POST['IndexColumnList']) || sizeof($_POST['IndexColumnList']) == 0))					addForeignKey(1, $lang['strfkneedscols']);				else { 					// Copy the IndexColumnList variable from stage 1					if (isset($_REQUEST['IndexColumnList']) && !isset($_REQUEST['SourceColumnList']))						$_REQUEST['SourceColumnList'] = serialize($_REQUEST['IndexColumnList']);					// Initialise variables					if (!isset($_POST['upd_action'])) $_POST['upd_action'] = null;					if (!isset($_POST['del_action'])) $_POST['del_action'] = null;					if (!isset($_POST['match'])) $_POST['match'] = null;					if (!isset($_POST['deferrable'])) $_POST['deferrable'] = null;					if (!isset($_POST['initially'])) $_POST['initially'] = null;					$_REQUEST['target'] = unserialize($_REQUEST['target']);					$misc->printTrail('table');					$misc->printTitle($lang['straddfk'],'pg.constraint.foreign_key');					$misc->printMsg($msg);					// Unserialize target and fetch appropriate table. This is a bit messy					// because the table could be in another schema.					$data->setSchema($_REQUEST['target']['schemaname']);					$attrs = $data->getTableAttributes($_REQUEST['target']['tablename']);					$data->setSchema($_REQUEST['schema']);					$selColumns = new XHTML_select('TableColumnList', true, 10);					$selColumns->set_style('width: 15em;');					if ($attrs->recordCount() > 0) {						while (!$attrs->EOF) {							$selColumns->add(new XHTML_Option($attrs->fields['attname']));							$attrs->moveNext();						}					}					$selIndex = new XHTML_select('IndexColumnList[]', true, 10);					$selIndex->set_style('width: 15em;');					$selIndex->set_attribute('id', 'IndexColumnList');					$buttonAdd = new XHTML_Button('add', '>>');					$buttonAdd->set_attribute('onclick', 'buttonPressed(this);');					$buttonAdd->set_attribute('type', 'button');					$buttonRemove = new XHTML_Button('remove', '<<');					$buttonRemove->set_attribute('onclick', 'buttonPressed(this);');					$buttonRemove->set_attribute('type', 'button');					echo "<form onsubmit=\"doSelectAll();\" name=\"formIndex\" action=\"constraints.php\" method=\"post\">\n";					echo "<table>\n";					echo "<tr><th class=\"data\" colspan=\"3\">{$lang['strfktarget']}</th></tr>";					echo "<tr><th class=\"data\">{$lang['strtablecolumnlist']}</th><th class=\"data\">&nbsp;</th><th class=data>{$lang['strfkcolumnlist']}</th></tr>\n";					echo "<tr><td class=\"data1\">" . $selColumns->fetch() . "</td>\n";					echo "<td class=\"data1\" style=\"text-align: center\">" . $buttonRemove->fetch() . $buttonAdd->fetch() . "</td>";					echo "<td class=\"data1\">" . $selIndex->fetch() . "</td></tr>\n";					echo "<tr><th class=\"data\" colspan=\"3\">{$lang['stractions']}</th></tr>";					echo "<tr>";					echo "<td class=\"data1\" colspan=\"3\">\n";					// ON SELECT actions					echo "{$lang['stronupdate']} <select name=\"upd_action\">";					foreach ($data->fkactions as $v)						echo "<option value=\"{$v}\"", ($_POST['upd_action'] == $v) ? ' selected="selected"' : '', ">{$v}</option>\n";					echo "</select><br />\n";					// ON DELETE actions					echo "{$lang['strondelete']} <select name=\"del_action\">";					foreach ($data->fkactions as $v)						echo "<option value=\"{$v}\"", ($_POST['del_action'] == $v) ? ' selected="selected"' : '', ">{$v}</option>\n";					echo "</select><br />\n";					// MATCH options					echo "<select name=\"match\">";					foreach ($data->fkmatches as $v)						echo "<option value=\"{$v}\"", ($_POST['match'] == $v) ? ' selected="selected"' : '', ">{$v}</option>\n";					echo "</select><br />\n";					// DEFERRABLE options					echo "<select name=\"deferrable\">";					foreach ($data->fkdeferrable as $v)						echo "<option value=\"{$v}\"", ($_POST['deferrable'] == $v) ? ' selected="selected"' : '', ">{$v}</option>\n";					echo "</select><br />\n";					// INITIALLY options					echo "<select name=\"initially\">";					foreach ($data->fkinitial as $v)						echo "<option value=\"{$v}\"", ($_POST['initially'] == $v) ? ' selected="selected"' : '', ">{$v}</option>\n";					echo "</select>\n";					echo "</td></tr>\n";					echo "</table>\n";					echo "<p><input type=\"hidden\" name=\"action\" value=\"save_add_foreign_key\" />\n";					echo $misc->form;					echo "<input type=\"hidden\" name=\"table\" value=\"", htmlspecialchars($_REQUEST['table']), "\" />\n";					echo "<input type=\"hidden\" name=\"name\" value=\"", htmlspecialchars($_REQUEST['name']), "\" />\n";					echo "<input type=\"hidden\" name=\"target\" value=\"", htmlspecialchars(serialize($_REQUEST['target'])), "\" />\n";					echo "<input type=\"hidden\" name=\"SourceColumnList\" value=\"", htmlspecialchars($_REQUEST['SourceColumnList']), "\" />\n";					echo "<input type=\"hidden\" name=\"stage\" value=\"3\" />\n";					echo "<input type=\"submit\" value=\"{$lang['stradd']}\" />\n";					echo "<input type=\"submit\" name=\"cancel\" value=\"{$lang['strcancel']}\" /></p>\n";					echo "</form>\n";				}				break;			case 3:				// Unserialize target				$_POST['target'] = unserialize($_POST['target']);				// Check that they've given at least one column				if (isset($_POST['SourceColumnList'])) $temp = unserialize($_POST['SourceColumnList']);				if (!isset($_POST['IndexColumnList']) || !is_array($_POST['IndexColumnList'])						|| sizeof($_POST['IndexColumnList']) == 0 || !isset($temp)						|| !is_array($temp) || sizeof($temp) == 0) addForeignKey(2, $lang['strfkneedscols']);				else {					$status = $data->addForeignKey($_POST['table'], $_POST['target']['schemaname'], $_POST['target']['tablename'],						unserialize($_POST['SourceColumnList']), $_POST['IndexColumnList'], $_POST['upd_action'], $_POST['del_action'],						$_POST['match'], $_POST['deferrable'], $_POST['initially'], $_POST['name']);					if ($status == 0)						doDefault($lang['strfkadded']);					else						addForeignKey(2, $lang['strfkaddedbad']);				}				break;			default:				$misc->printTrail('table');				$misc->printTitle($lang['straddfk'],'pg.constraint.foreign_key');				$misc->printMsg($msg);				$attrs = $data->getTableAttributes($_REQUEST['table']);				$tables = $data->getTables(true);				$selColumns = new XHTML_select('TableColumnList', true, 10);				$selColumns->set_style('width: 15em;');				if ($attrs->recordCount() > 0) {					while (!$attrs->EOF) {						$selColumns->add(new XHTML_Option($attrs->fields['attname']));						$attrs->moveNext();					}				}				$selIndex = new XHTML_select('IndexColumnList[]', true, 10);				$selIndex->set_style('width: 15em;');				$selIndex->set_attribute('id', 'IndexColumnList');				$buttonAdd = new XHTML_Button('add', '>>');				$buttonAdd->set_attribute('onclick', 'buttonPressed(this);');				$buttonAdd->set_attribute('type', 'button');				$buttonRemove = new XHTML_Button('remove', '<<');				$buttonRemove->set_attribute('onclick', 'buttonPressed(this);');				$buttonRemove->set_attribute('type', 'button');				echo "<form onsubmit=\"doSelectAll();\" name=\"formIndex\" action=\"constraints.php\" method=\"post\">\n";				echo "<table>\n";				echo "<tr><th class=\"data\" colspan=\"3\">{$lang['strname']}</th></tr>\n";				echo "<tr><td class=\"data1\" colspan=\"3\"><input type=\"text\" name=\"name\" size=\"32\" maxlength=\"{$data->_maxNameLen}\" /></td></tr>\n";				echo "<tr><th class=\"data\">{$lang['strtablecolumnlist']}</th><th class=\"data\">&nbsp;</th><th class=\"data required\">{$lang['strfkcolumnlist']}</th></tr>\n";				echo "<tr><td class=\"data1\">" . $selColumns->fetch() . "</td>\n";				echo "<td class=\"data1\" style=\"text-align: center\">" . $buttonRemove->fetch() . $buttonAdd->fetch() . "</td>\n";				echo "<td class=data1>" . $selIndex->fetch() . "</td></tr>\n";				echo "<tr><th class=\"data\" colspan=\"3\">{$lang['strfktarget']}</th></tr>";				echo "<tr>";				echo "<td class=\"data1\" colspan=\"3\"><select name=\"target\">";				while (!$tables->EOF) {					$key = array('schemaname' => $tables->fields['nspname'], 'tablename' => $tables->fields['relname']);					$key = serialize($key);					echo "<option value=\"", htmlspecialchars($key), "\">";					if ($tables->fields['nspname'] != $_REQUEST['schema']) {							echo htmlspecialchars($tables->fields['nspname']), '.';					}					echo htmlspecialchars($tables->fields['relname']), "</option>\n";					$tables->moveNext();				}				echo "</select>\n";				echo "</td></tr>";				echo "</table>\n";				echo "<p><input type=\"hidden\" name=\"action\" value=\"save_add_foreign_key\" />\n";				echo $misc->form;				echo "<input type=\"hidden\" name=\"table\" value=\"", htmlspecialchars($_REQUEST['table']), "\" />\n";				echo "<input type=\"hidden\" name=\"stage\" value=\"2\" />\n";				echo "<input type=\"submit\" value=\"{$lang['stradd']}\" />\n";				echo "<input type=\"submit\" name=\"cancel\" value=\"{$lang['strcancel']}\" /></p>\n";				echo "</form>\n";				break;		}	}	/**	 * Confirm and then actually add a PRIMARY KEY or UNIQUE constraint	 */	function addPrimaryOrUniqueKey($type, $confirm, $msg = '') {		global $data, $misc;		global $lang;		if (!isset($_POST['name'])) $_POST['name'] = '';		if ($confirm) {			if (!isset($_POST['name'])) $_POST['name'] = '';			if (!isset($_POST['tablespace'])) $_POST['tablespace'] = '';			$misc->printTrail('table');			switch ($type) {				case 'primary':					$misc->printTitle($lang['straddpk'],'pg.constraint.primary_key');					break;				case 'unique':					$misc->printTitle($lang['stradduniq'],'pg.constraint.unique_key');					break;				default:					doDefault($lang['strinvalidparam']);					return;			}			$misc->printMsg($msg);			$attrs = $data->getTableAttributes($_REQUEST['table']);			// Fetch all tablespaces from the database			if ($data->hasTablespaces()) $tablespaces = $data->getTablespaces();			$selColumns = new XHTML_select('TableColumnList', true, 10);			$selColumns->set_style('width: 15em;');			if ($attrs->recordCount() > 0) {				while (!$attrs->EOF) {					$selColumns->add(new XHTML_Option($attrs->fields['attname']));					$attrs->moveNext();				}			}			$selIndex = new XHTML_select('IndexColumnList[]', true, 10);			$selIndex->set_style('width: 15em;');			$selIndex->set_attribute('id', 'IndexColumnList');			$buttonAdd = new XHTML_Button('add', '>>');			$buttonAdd->set_attribute('onclick', 'buttonPressed(this);');			$buttonAdd->set_attribute('type', 'button');			$buttonRemove = new XHTML_Button('remove', '<<');			$buttonRemove->set_attribute('onclick', 'buttonPressed(this);');			$buttonRemove->set_attribute('type', 'button');			echo "<form onsubmit=\"doSelectAll();\" name=\"formIndex\" action=\"constraints.php\" method=\"post\">\n";			echo "<table>\n";			echo "<tr><th class=\"data\" colspan=\"3\">{$lang['strname']}</th></tr>";			echo "<tr>";			echo "<td class=\"data1\" colspan=\"3\"><input type=\"text\" name=\"name\" value=\"", htmlspecialchars($_POST['name']),				"\" size=\"32\" maxlength=\"{$data->_maxNameLen}\" /></td></tr>";			echo "<tr><th class=\"data\">{$lang['strtablecolumnlist']}</th><th class=\"data\">&nbsp;</th><th class=\"data required\">{$lang['strindexcolumnlist']}</th></tr>\n";			echo "<tr><td class=\"data1\">" . $selColumns->fetch() . "</td>\n";			echo "<td class=\"data1\" style=\"text-align: center\">" . $buttonRemove->fetch() . $buttonAdd->fetch() . "</td>";			echo "<td class=data1>" . $selIndex->fetch() . "</td></tr>\n";			// Tablespace (if there are any)			if ($data->hasTablespaces() && $tablespaces->recordCount() > 0) {				echo "<tr><th class=\"data\" colspan=\"3\">{$lang['strtablespace']}</th></tr>";				echo "<tr><td class=\"data1\" colspan=\"3\"><select name=\"tablespace\">\n";				// Always offer the default (empty) option				echo "\t\t\t\t<option value=\"\"",					($_POST['tablespace'] == '') ? ' selected="selected"' : '', "></option>\n";				// Display all other tablespaces				while (!$tablespaces->EOF) {					$spcname = htmlspecialchars($tablespaces->fields['spcname']);					echo "\t\t\t\t<option value=\"{$spcname}\"",						($spcname == $_POST['tablespace']) ? ' selected="selected"' : '', ">{$spcname}</option>\n";					$tablespaces->moveNext();				}				echo "</select></td></tr>\n";			}			echo "</table>\n";			echo "<p><input type=\"hidden\" name=\"action\" value=\"save_add_primary_key\" />\n";			echo $misc->form;			echo "<input type=\"hidden\" name=\"table\" value=\"", htmlspecialchars($_REQUEST['table']), "\" />\n";			echo "<input type=\"hidden\" name=\"type\" value=\"", htmlspecialchars($type), "\" />\n";			echo "<input type=\"submit\" value=\"{$lang['stradd']}\" />\n";			echo "<input type=\"submit\" name=\"cancel\" value=\"{$lang['strcancel']}\" /></p>\n";			echo "</form>\n";		}		else {			// Default tablespace to empty if it isn't set			if (!isset($_POST['tablespace'])) $_POST['tablespace'] = '';			if ($_POST['type'] == 'primary') {				// Check that they've given at least one column				if (!isset($_POST['IndexColumnList']) || !is_array($_POST['IndexColumnList'])						|| sizeof($_POST['IndexColumnList']) == 0) addPrimaryOrUniqueKey($_POST['type'], true, $lang['strpkneedscols']);				else {					$status = $data->addPrimaryKey($_POST['table'], $_POST['IndexColumnList'], $_POST['name'], $_POST['tablespace']);					if ($status == 0)						doDefault($lang['strpkadded']);					else						addPrimaryOrUniqueKey($_POST['type'], true, $lang['strpkaddedbad']);				}			}			elseif ($_POST['type'] == 'unique') {				// Check that they've given at least one column				if (!isset($_POST['IndexColumnList']) || !is_array($_POST['IndexColumnList'])						|| sizeof($_POST['IndexColumnList']) == 0) addPrimaryOrUniqueKey($_POST['type'], true, $lang['struniqneedscols']);				else {					$status = $data->addUniqueKey($_POST['table'], $_POST['IndexColumnList'], $_POST['name'], $_POST['tablespace']);					if ($status == 0)						doDefault($lang['struniqadded']);					else						addPrimaryOrUniqueKey($_POST['type'], true, $lang['struniqaddedbad']);				}			}			else doDefault($lang['strinvalidparam']);		}	}	/**	 * Confirm and then actually add a CHECK constraint	 */	function addCheck($confirm, $msg = '') {		global $data, $misc;		global $lang;		if (!isset($_POST['name'])) $_POST['name'] = '';		if (!isset($_POST['definition'])) $_POST['definition'] = '';		if ($confirm) {			$misc->printTrail('table');			$misc->printTitle($lang['straddcheck'],'pg.constraint.check');			$misc->printMsg($msg);			echo "<form action=\"constraints.php\" method=\"post\">\n";			echo "<table>\n";			echo "<tr><th class=\"data\">{$lang['strname']}</th>\n";			echo "<th class=\"data required\">{$lang['strdefinition']}</th></tr>\n";			echo "<tr><td class=\"data1\"><input name=\"name\" size=\"16\" maxlength=\"{$data->_maxNameLen}\" value=\"",				htmlspecialchars($_POST['name']), "\" /></td>\n";			echo "<td class=\"data1\">(<input name=\"definition\" size=\"32\" value=\"",				htmlspecialchars($_POST['definition']), "\" />)</td></tr>\n";			echo "</table>\n";			echo "<input type=\"hidden\" name=\"action\" value=\"save_add_check\" />\n";			echo "<input type=\"hidden\" name=\"table\" value=\"", htmlspecialchars($_REQUEST['table']), "\" />\n";			echo $misc->form;			echo "<p><input type=\"submit\" name=\"ok\" value=\"{$lang['stradd']}\" />\n";			echo "<input type=\"submit\" name=\"cancel\" value=\"{$lang['strcancel']}\" /></p>\n";			echo "</form>\n";		}		else {			if (trim($_POST['definition']) == '')				addCheck(true, $lang['strcheckneedsdefinition']);			else {				$status = $data->addCheckConstraint($_POST['table'],					$_POST['definition'], $_POST['name']);				if ($status == 0)					doDefault($lang['strcheckadded']);				else					addCheck(true, $lang['strcheckaddedbad']);			}		}	}	/**	 * Show confirmation of drop and perform actual drop	 */	function doDrop($confirm) {		global $data, $misc;		global $lang;		if ($confirm) {			$misc->printTrail('constraint');			$misc->printTitle($lang['strdrop'],'pg.constraint.drop');			echo "<p>", sprintf($lang['strconfdropconstraint'], $misc->printVal($_REQUEST['constraint']),				$misc->printVal($_REQUEST['table'])), "</p>\n";			echo "<form action=\"constraints.php\" method=\"post\">\n";			echo "<input type=\"hidden\" name=\"action\" value=\"drop\" />\n";			echo "<input type=\"hidden\" name=\"table\" value=\"", htmlspecialchars($_REQUEST['table']), "\" />\n";			echo "<input type=\"hidden\" name=\"constraint\" value=\"", htmlspecialchars($_REQUEST['constraint']), "\" />\n";			echo "<input type=\"hidden\" name=\"type\" value=\"", htmlspecialchars($_REQUEST['type']), "\" />\n";			echo $misc->form;			echo "<p><input type=\"checkbox\" id=\"cascade\" name=\"cascade\" /> <label for=\"cascade\">{$lang['strcascade']}</label></p>\n";			echo "<input type=\"submit\" name=\"drop\" value=\"{$lang['strdrop']}\" />\n";			echo "<input type=\"submit\" name=\"cancel\" value=\"{$lang['strcancel']}\" />\n";			echo "</form>\n";		}		else {			$status = $data->dropConstraint($_POST['constraint'], $_POST['table'], $_POST['type'], isset($_POST['cascade']));			if ($status == 0)				doDefault($lang['strconstraintdropped']);			else				doDefault($lang['strconstraintdroppedbad']);		}	}	/**	 * List all the constraints on the table	 */	function doDefault($msg = '') {		global $data, $misc, $lang;		function cnPre(&$rowdata) {			global $data;			if (is_null($rowdata->fields['consrc'])) {				$atts = $data->getAttributeNames($_REQUEST['table'], explode(' ', $rowdata->fields['indkey']));				$rowdata->fields['+definition'] = ($rowdata->fields['contype'] == 'u' ? "UNIQUE (" : "PRIMARY KEY (") . join(',', $atts) . ')';			} else {				$rowdata->fields['+definition'] = $rowdata->fields['consrc'];			}		}		$misc->printTrail('table');		$misc->printTabs('table','constraints');		$misc->printMsg($msg);		$constraints = $data->getConstraints($_REQUEST['table']);		$columns = array(			'constraint' => array(				'title' => $lang['strname'],				'field' => field('conname'),			),			'definition' => array(				'title' => $lang['strdefinition'],				'field' => field('+definition'),				'type'  => 'pre',			),			'actions' => array(				'title' => $lang['stractions'],			),			'comment' => array(				'title' => $lang['strcomment'],				'field' => field('constcomment'),			),		);		$actions = array(			'drop' => array(				'title' => $lang['strdrop'],				'url'   => "constraints.php?action=confirm_drop&amp;{$misc->href}&amp;table=".urlencode($_REQUEST['table'])."&amp;",				'vars'  => array('constraint' => 'conname', 'type' => 'contype'),			),		);		$misc->printTable($constraints, $columns, $actions, $lang['strnoconstraints'], 'cnPre');		echo "<ul class=\"navlink\">\n\t<li><a href=\"constraints.php?action=add_check&amp;{$misc->href}&amp;table=", urlencode($_REQUEST['table']),			"\">{$lang['straddcheck']}</a></li>\n";		echo "\t<li><a href=\"constraints.php?action=add_unique_key&amp;{$misc->href}&amp;table=", urlencode($_REQUEST['table']),			"\">{$lang['stradduniq']}</a></li>\n";		echo "\t<li><a href=\"constraints.php?action=add_primary_key&amp;{$misc->href}&amp;table=", urlencode($_REQUEST['table']),			"\">{$lang['straddpk']}</a></li>\n";		echo "\t<li><a href=\"constraints.php?action=add_foreign_key&amp;{$misc->href}&amp;table=", urlencode($_REQUEST['table']),			"\">{$lang['straddfk']}</a></li>\n</ul>\n";	}	function doTree() {		global $misc, $data;		$constraints = $data->getConstraints($_REQUEST['table']);		$reqvars = $misc->getRequestVars('schema');		function getIcon($f) {			switch($f['contype']) {				case 'u':					return 'UniqueConstraint';				case 'c':					return 'CheckConstraint';				case 'f':					return 'ForeignKey';				case 'p':					return 'PrimaryKey';			}		}		$attrs = array(			'text'   => field('conname'),			'icon'   => callback('getIcon'),		);		$misc->printTreeXML($constraints, $attrs);		exit;	}	if ($action == 'tree') doTree();	$misc->printHeader($lang['strtables'] . ' - ' . $_REQUEST['table'] . ' - ' . $lang['strconstraints'],		"<script src=\"indexes.js\" type=\"text/javascript\"></script>");	if ($action == 'add_unique_key' || $action == 'save_add_unique_key'			|| $action == 'add_primary_key' || $action == 'save_add_primary_key'			|| $action == 'add_foreign_key' || $action == 'save_add_foreign_key')		echo "<body onload=\"init();\">";	else		$misc->printBody();	switch ($action) {		case 'add_foreign_key':			addForeignKey(1);			break;		case 'save_add_foreign_key':			if (isset($_POST['cancel'])) doDefault();			else addForeignKey($_REQUEST['stage']);			break;		case 'add_unique_key':			addPrimaryOrUniqueKey('unique', true);			break;		case 'save_add_unique_key':			if (isset($_POST['cancel'])) doDefault();			else addPrimaryOrUniqueKey('unique', false);			break;		case 'add_primary_key':			addPrimaryOrUniqueKey('primary', true);			break;		case 'save_add_primary_key':			if (isset($_POST['cancel'])) doDefault();			else addPrimaryOrUniqueKey('primary', false);			break;		case 'add_check':			addCheck(true);			break;		case 'save_add_check':			if (isset($_POST['cancel'])) doDefault();			else addCheck(false);			break;		case 'save_create':			doSaveCreate();			break;		case 'create':			doCreate();			break;		case 'drop':			if (isset($_POST['drop'])) doDrop(false);			else doDefault();			break;		case 'confirm_drop':			doDrop(true);			break;		default:			doDefault();			break;	}	$misc->printFooter();?>
<?php/** * PostgreSQL 8.2 support * * $Id: Postgres82.php,v 1.10 2007/12/28 16:21:25 ioguix Exp $ */include_once('./classes/database/Postgres83.php');class Postgres82 extends Postgres83 {	var $major_version = 8.2;	// Select operators	var $selectOps = array('=' => 'i', '!=' => 'i', '<' => 'i', '>' => 'i', '<=' => 'i', '>=' => 'i', '<<' => 'i', '>>' => 'i', '<<=' => 'i', '>>=' => 'i',		'LIKE' => 'i', 'NOT LIKE' => 'i', 'ILIKE' => 'i', 'NOT ILIKE' => 'i', 'SIMILAR TO' => 'i',		'NOT SIMILAR TO' => 'i', '~' => 'i', '!~' => 'i', '~*' => 'i', '!~*' => 'i',		'IS NULL' => 'p', 'IS NOT NULL' => 'p', 'IN' => 'x', 'NOT IN' => 'x');	/**	 * Constructor	 * @param $conn The database connection	 */	function Postgres82($conn) {		$this->Postgres($conn);	}	// Help functions	function getHelpPages() {		include_once('./help/PostgresDoc82.php');		return $this->help_page;	}	// Database functions	/**	 * Returns table locks information in the current database	 * @return A recordset	 */	function getLocks() {		global $conf;		if (!$conf['show_system'])			$where = "AND pn.nspname NOT LIKE 'pg\\\\_%'";		else			$where = "AND nspname !~ '^pg_t(emp_[0-9]+|oast)$'";		$sql = "SELECT pn.nspname, pc.relname AS tablename, pl.transaction, pl.pid, pl.mode, pl.granted		FROM pg_catalog.pg_locks pl, pg_catalog.pg_class pc, pg_catalog.pg_namespace pn		WHERE pl.relation = pc.oid AND pc.relnamespace=pn.oid {$where}		ORDER BY nspname,tablename";		return $this->selectSet($sql);	}	// Sequence functions	/**	 * Rename a sequence	 * @param $seqrs The sequence RecordSet returned by getSequence()	 * @param $name The new name for the sequence	 * @return 0 success	 */	function alterSequenceName($seqrs, $name) {		/* vars are cleaned in _alterSequence */		if (!empty($name) && ($seqrs->fields['seqname'] != $name)) {			$f_schema = $this->_schema;			$this->fieldClean($f_schema);			$sql = "ALTER TABLE \"{$f_schema}\".\"{$seqrs->fields['seqname']}\" RENAME TO \"{$name}\"";			$status = $this->execute($sql);			if ($status == 0)				$seqrs->fields['seqname'] = $name;			else				return $status;		}		return 0;		}	// View functions	/**	 * Rename a view	 * @param $vwrs The view recordSet returned by getView()	 * @param $name The new view's name	 * @return -1 Failed	 * @return 0 success	 */	function alterViewName($vwrs, $name) {		// Rename (only if name has changed)		/* $vwrs and $name are cleaned in _alterView */		if (!empty($name) && ($name != $vwrs->fields['relname'])) {			$f_schema = $this->_schema;			$this->fieldClean($f_schema);			$sql = "ALTER TABLE \"{$f_schema}\".\"{$vwrs->fields['relname']}\" RENAME TO \"{$name}\"";			$status =  $this->execute($sql);			if ($status == 0)				$vwrs->fields['relname'] = $name;			else				return $status;		}		return 0;	}	// Trigger functions	/**	 * Grabs a list of triggers on a table	 * @param $table The name of a table whose triggers to retrieve	 * @return A recordset	 */	function getTriggers($table = '') {		$c_schema = $this->_schema;		$this->clean($c_schema);		$this->clean($table);		$sql = "SELECT				t.tgname, pg_catalog.pg_get_triggerdef(t.oid) AS tgdef, t.tgenabled, p.oid AS prooid,				p.proname || ' (' || pg_catalog.oidvectortypes(p.proargtypes) || ')' AS proproto,				ns.nspname AS pronamespace			FROM pg_catalog.pg_trigger t, pg_catalog.pg_proc p, pg_catalog.pg_namespace ns			WHERE t.tgrelid = (SELECT oid FROM pg_catalog.pg_class WHERE relname='{$table}'				AND relnamespace=(SELECT oid FROM pg_catalog.pg_namespace WHERE nspname='{$c_schema}'))				AND (NOT tgisconstraint OR NOT EXISTS						(SELECT 1 FROM pg_catalog.pg_depend d    JOIN pg_catalog.pg_constraint c							ON (d.refclassid = c.tableoid AND d.refobjid = c.oid)						WHERE d.classid = t.tableoid AND d.objid = t.oid AND d.deptype = 'i' AND c.contype = 'f'))				AND p.oid=t.tgfoid				AND p.pronamespace = ns.oid";		return $this->selectSet($sql);		}	// Function functions	/**	 * Returns all details for a particular function	 * @param $func The name of the function to retrieve	 * @return Function info	 */	function getFunction($function_oid) {		$this->clean($function_oid);		$sql = "SELECT					pc.oid AS prooid,					proname,					pg_catalog.pg_get_userbyid(proowner) AS proowner,					nspname as proschema,					lanname as prolanguage,					pg_catalog.format_type(prorettype, NULL) as proresult,					prosrc,					probin,					proretset,					proisstrict,					provolatile,					prosecdef,					pg_catalog.oidvectortypes(pc.proargtypes) AS proarguments,					proargnames AS proargnames,					pg_catalog.obj_description(pc.oid, 'pg_proc') AS procomment				FROM					pg_catalog.pg_proc pc, pg_catalog.pg_language pl, pg_catalog.pg_namespace pn				WHERE					pc.oid = '{$function_oid}'::oid					AND pc.prolang = pl.oid					AND pc.pronamespace = pn.oid				";		return $this->selectSet($sql);	}	/**	 * Creates a new function.	 * @param $funcname The name of the function to create	 * @param $args A comma separated string of types	 * @param $returns The return type	 * @param $definition The definition for the new function	 * @param $language The language the function is written for	 * @param $flags An array of optional flags	 * @param $setof True if it returns a set, false otherwise	 * @param $rows number of rows planner should estimate will be returned     * @param $cost cost the planner should use in the function execution step	 * @param $comment The comment on the function	 * @param $replace (optional) True if OR REPLACE, false for normal	 * @return 0 success	 * @return -1 create function failed	 * @return -4 set comment failed	 */	function createFunction($funcname, $args, $returns, $definition, $language, $flags, $setof, $cost, $rows, $comment, $replace = false) {				// Begin a transaction		$status = $this->beginTransaction();		if ($status != 0) {			$this->rollbackTransaction();			return -1;		}				$f_schema = $this->_schema;		$this->fieldClean($f_schema);		$this->fieldClean($funcname);		$this->clean($args);		$this->fieldClean($language);		$this->arrayClean($flags);		$sql = "CREATE";		if ($replace) $sql .= " OR REPLACE";		$sql .= " FUNCTION \"{$f_schema}\".\"{$funcname}\" (";		if ($args != '')			$sql .= $args;		// For some reason, the returns field cannot have quotes...		$sql .= ") RETURNS ";		if ($setof) $sql .= "SETOF ";		$sql .= "{$returns} AS ";		if (is_array($definition)) {			$this->arrayClean($definition);			$sql .= "'" . $definition[0] . "'";			if ($definition[1]) {				$sql .= ",'" . $definition[1] . "'";			}		} else {			$this->clean($definition);			$sql .= "'" . $definition . "'";	}		$sql .= " LANGUAGE \"{$language}\"";		// Add flags		foreach ($flags as  $v) {			// Skip default flags			if ($v == '') continue;			else $sql .= "\n{$v}";		}		$status = $this->execute($sql);		if ($status != 0) {			$this->rollbackTransaction();			return -3;		}		/* set the comment */		$status = $this->setComment('FUNCTION', "\"{$funcname}\"({$args})", null, $comment);		if ($status != 0) {			$this->rollbackTransaction();			return -4;		}		return $this->endTransaction();	}	// Index functions	/**	 * Clusters an index	 * @param $index The name of the index	 * @param $table The table the index is on	 * @return 0 success	 */	function clusterIndex($table='', $index='') {		$sql = 'CLUSTER';				// We don't bother with a transaction here, as there's no point rolling		// back an expensive cluster if a cheap analyze fails for whatever reason				if (!empty($table)) {			$f_schema = $this->_schema;			$this->fieldClean($f_schema);			$this->fieldClean($table);						if (!empty($index)) {				$this->fieldClean($index);				$sql .= " \"{$index}\" ON \"{$f_schema}\".\"{$table}\"";			}			else {				$sql .= " \"{$f_schema}\".\"{$table}\"";			}		}		return $this->execute($sql);	}	// Operator functions	/**	 * Returns all details for a particular operator	 * @param $operator_oid The oid of the operator	 * @return Function info	 */	function getOperator($operator_oid) {		$this->clean($operator_oid);		$sql = "			SELECT				po.oid, po.oprname,				oprleft::pg_catalog.regtype AS oprleftname,				oprright::pg_catalog.regtype AS oprrightname,				oprresult::pg_catalog.regtype AS resultname,				po.oprcanhash,				oprcom::pg_catalog.regoperator AS oprcom,				oprnegate::pg_catalog.regoperator AS oprnegate,				oprlsortop::pg_catalog.regoperator AS oprlsortop,				oprrsortop::pg_catalog.regoperator AS oprrsortop,				oprltcmpop::pg_catalog.regoperator AS oprltcmpop,				oprgtcmpop::pg_catalog.regoperator AS oprgtcmpop,				po.oprcode::pg_catalog.regproc AS oprcode,				po.oprrest::pg_catalog.regproc AS oprrest,				po.oprjoin::pg_catalog.regproc AS oprjoin			FROM				pg_catalog.pg_operator po			WHERE				po.oid='{$operator_oid}'		";		return $this->selectSet($sql);	}	// Operator Class functions	/**	 * Gets all opclasses	 * @return A recordset	 */	function getOpClasses() {		$c_schema = $this->_schema;		$this->clean($c_schema);		$sql = "			SELECT				pa.amname,				po.opcname,				po.opcintype::pg_catalog.regtype AS opcintype,				po.opcdefault,				pg_catalog.obj_description(po.oid, 'pg_opclass') AS opccomment			FROM				pg_catalog.pg_opclass po, pg_catalog.pg_am pa, pg_catalog.pg_namespace pn			WHERE				po.opcamid=pa.oid				AND po.opcnamespace=pn.oid				AND pn.nspname='{$c_schema}'			ORDER BY 1,2		";		return $this->selectSet($sql);	}	// Capabilities	function hasCreateTableLikeWithIndexes() {return false;}	function hasEnumTypes() {return false;}	function hasFTS() {return false;}	function hasFunctionCosting() {return false;}	function hasFunctionGUC() {return false;}	function hasVirtualTransactionId() {return false;}}?>
