<?php/** * A class that implements the DB interface for Postgres * Note: This class uses ADODB and returns RecordSets. * * $Id: Postgres74.php,v 1.72 2008/02/20 21:06:18 ioguix Exp $ */include_once('./classes/database/Postgres80.php');class Postgres74 extends Postgres80 {	var $major_version = 7.4;	// List of all legal privileges that can be applied to different types	// of objects.	var $privlist = array(		'table' => array('SELECT', 'INSERT', 'UPDATE', 'DELETE', 'RULE', 'REFERENCES', 'TRIGGER', 'ALL PRIVILEGES'),		'view' => array('SELECT', 'INSERT', 'UPDATE', 'DELETE', 'RULE', 'REFERENCES', 'TRIGGER', 'ALL PRIVILEGES'),		'sequence' => array('SELECT', 'UPDATE', 'ALL PRIVILEGES'),		'database' => array('CREATE', 'TEMPORARY', 'ALL PRIVILEGES'),		'function' => array('EXECUTE', 'ALL PRIVILEGES'),		'language' => array('USAGE', 'ALL PRIVILEGES'),		'schema' => array('CREATE', 'USAGE', 'ALL PRIVILEGES')	);	/**	 * Constructor	 * @param $conn The database connection	 */	function Postgres74($conn) {		$this->Postgres80($conn);	}	// Help functions	function getHelpPages() {		include_once('./help/PostgresDoc74.php');		return $this->help_page;	}	// Database functions	/**	 * Alters a database	 * the multiple return vals are for postgres 8+ which support more functionality in alter database	 * @param $dbName The name of the database	 * @param $newName new name for the database	 * @param $newOwner The new owner for the database	 * @return 0 success	 * @return -1 transaction error	 * @return -2 owner error	 * @return -3 rename error	 */	function alterDatabase($dbName, $newName, $newOwner = '', $comment = '') {		//ignore $newowner, not supported pre 8.0		//ignore $comment, not supported pre 8.2		$this->clean($dbName);		$this->clean($newName);		$status = $this->alterDatabaseRename($dbName, $newName);		if ($status != 0) return -3;		else return 0;	}	/**	 * Return all database available on the server	 * @return A list of databases, sorted alphabetically	 */	function getDatabases($currentdatabase = NULL) {		global $conf, $misc;		$server_info = $misc->getServerInfo();		if (isset($conf['owned_only']) && $conf['owned_only'] && !$this->isSuperUser($server_info['username'])) {			$username = $server_info['username'];			$this->clean($username);			$clause = " AND pu.usename='{$username}'";		}		else $clause = '';		if ($currentdatabase != NULL) {			$this->clean($currentdatabase);			$orderby = "ORDER BY pdb.datname = '{$currentdatabase}' DESC, pdb.datname";		}		else			$orderby = "ORDER BY pdb.datname";		if (!$conf['show_system'])			$where = ' AND NOT pdb.datistemplate';		else			$where = ' AND pdb.datallowconn';		$sql = "SELECT pdb.datname AS datname, pu.usename AS datowner, pg_encoding_to_char(encoding) AS datencoding,                               (SELECT description FROM pg_description pd WHERE pdb.oid=pd.objoid) AS datcomment                        FROM pg_database pdb, pg_user pu			WHERE pdb.datdba = pu.usesysid			{$where}			{$clause}			{$orderby}";		return $this->selectSet($sql);	}	// Table functions	/**	 * Protected method which alter a table	 * SHOULDN'T BE CALLED OUTSIDE OF A TRANSACTION	 * @param $tblrs The table recordSet returned by getTable()	 * @param $name The new name for the table	 * @param $owner The new owner for the table	 * @param $schema The new schema for the table	 * @param $comment The comment on the table	 * @param $tablespace The new tablespace for the table ('' means leave as is)	 * @return 0 success	 * @return -3 rename error	 * @return -4 comment error	 * @return -5 owner error	 */	protected	function _alterTable($tblrs, $name, $owner, $schema, $comment, $tablespace) {		/* $schema and tablespace not supported in pg74- */		$this->fieldArrayClean($tblrs->fields);		// Comment		$status = $this->setComment('TABLE', '', $tblrs->fields['relname'], $comment);		if ($status != 0) return -4;		// Owner		$this->fieldClean($owner);		$status = $this->alterTableOwner($tblrs, $owner);		if ($status != 0) return -5;		// Rename		$this->fieldClean($name);		$status = $this->alterTableName($tblrs, $name);		if ($status != 0) return -3;		return 0;	}	/**	 * Alters a column in a table OR view	 * @param $table The table in which the column resides	 * @param $column The column to alter	 * @param $name The new name for the column	 * @param $notnull (boolean) True if not null, false otherwise	 * @param $oldnotnull (boolean) True if column is already not null, false otherwise	 * @param $default The new default for the column	 * @param $olddefault The old default for the column	 * @param $type The new type for the column	 * @param $array True if array type, false otherwise	 * @param $length The optional size of the column (ie. 30 for varchar(30))	 * @param $oldtype The old type for the column	 * @param $comment Comment for the column	 * @return 0 success	 * @return -2 set not null error	 * @return -3 set default error	 * @return -4 rename column error	 * @return -5 comment error	 * @return -6 transaction error	 */	function alterColumn($table, $column, $name, $notnull, $oldnotnull, $default, $olddefault,	$type, $length, $array, $oldtype, $comment)	{		$status = $this->beginTransaction();		if ($status != 0) return -1;		// @@ NEED TO HANDLE "NESTED" TRANSACTION HERE		if ($notnull != $oldnotnull) {			$status = $this->setColumnNull($table, $column, !$notnull);			if ($status != 0) {				$this->rollbackTransaction();				return -2;			}		}		// Set default, if it has changed		if ($default != $olddefault) {			if ($default == '')				$status = $this->dropColumnDefault($table, $column);			else				$status = $this->setColumnDefault($table, $column, $default);			if ($status != 0) {				$this->rollbackTransaction();				return -3;			}		}		// Rename the column, if it has been changed		if ($column != $name) {			$status = $this->renameColumn($table, $column, $name);			if ($status != 0) {				$this->rollbackTransaction();				return -4;			}		}		// The $name and $table parameters must be cleaned for the setComment function.                  // It's ok to do that here since this is the last time these variables are used.		$this->fieldClean($name);		$this->fieldClean($table);		$status = $this->setComment('COLUMN', $name, $table, $comment);		if ($status != 0) {			$this->rollbackTransaction();			return -5;		}		return $this->endTransaction();	}	/**	 * Returns table information	 * @param $table The name of the table	 * @return A recordset	 */	function getTable($table) {		$c_schema = $this->_schema;		$this->clean($c_schema);		$this->clean($table);		$sql = "			SELECT			  c.relname, n.nspname, u.usename AS relowner,			  pg_catalog.obj_description(c.oid, 'pg_class') AS relcomment			FROM pg_catalog.pg_class c			     LEFT JOIN pg_catalog.pg_user u ON u.usesysid = c.relowner			     LEFT JOIN pg_catalog.pg_namespace n ON n.oid = c.relnamespace			WHERE c.relkind = 'r'				AND n.nspname = '{$c_schema}'			    AND c.relname = '{$table}'";		return $this->selectSet($sql);	}	/**	 * Return all tables in current database (and schema)	 * @param $all True to fetch all tables, false for just in current schema	 * @return All tables, sorted alphabetically	 */	function getTables($all = false) {		$c_schema = $this->_schema;		$this->clean($c_schema);		if ($all) {			// Exclude pg_catalog and information_schema tables			$sql = "SELECT schemaname AS nspname, tablename AS relname, tableowner AS relowner					FROM pg_catalog.pg_tables					WHERE schemaname NOT IN ('pg_catalog', 'information_schema', 'pg_toast')					ORDER BY schemaname, tablename";		} else {			$sql = "SELECT c.relname, pg_catalog.pg_get_userbyid(c.relowner) AS relowner,						pg_catalog.obj_description(c.oid, 'pg_class') AS relcomment,						reltuples::bigint					FROM pg_catalog.pg_class c					LEFT JOIN pg_catalog.pg_namespace n ON n.oid = c.relnamespace					WHERE c.relkind = 'r'					AND nspname='{$c_schema}'					ORDER BY c.relname";		}		return $this->selectSet($sql);	}	/**	 * Returns the current default_with_oids setting	 * @return default_with_oids setting	 */	function getDefaultWithOid() {		// 8.0 is the first release to have this setting		// Prior releases don't have this setting... oids always activated		return 'on';		}	// Sequence functions	/**	 * Returns all sequences in the current database	 * @return A recordset	 */	function getSequences($all = false) {		$c_schema = $this->_schema;		$this->clean($c_schema);		if ($all) {			// Exclude pg_catalog and information_schema tables			$sql = "SELECT n.nspname, c.relname AS seqname, u.usename AS seqowner				FROM pg_catalog.pg_class c, pg_catalog.pg_user u, pg_catalog.pg_namespace n				WHERE c.relowner=u.usesysid AND c.relnamespace=n.oid				AND c.relkind = 'S'				AND n.nspname NOT IN ('pg_catalog', 'information_schema', 'pg_toast')				ORDER BY nspname, seqname";		} else {			$sql = "SELECT c.relname AS seqname, u.usename AS seqowner, pg_catalog.obj_description(c.oid, 'pg_class') AS seqcomment				FROM pg_catalog.pg_class c, pg_catalog.pg_user u, pg_catalog.pg_namespace n				WHERE c.relowner=u.usesysid AND c.relnamespace=n.oid				AND c.relkind = 'S' AND n.nspname='{$c_schema}' ORDER BY seqname";		}		return $this->selectSet( $sql );		}	// Function functions	/**	 * Returns all details for a particular function	 * @param $func The name of the function to retrieve	 * @return Function info	 */	function getFunction($function_oid) {		$this->clean($function_oid);		$sql = "		SELECT			pc.oid AS prooid,			proname,			pg_catalog.pg_get_userbyid(proowner) AS proowner,			nspname as proschema,			lanname as prolanguage,			pg_catalog.format_type(prorettype, NULL) as proresult,			prosrc,			probin,			proretset,			proisstrict,			provolatile,			prosecdef,			pg_catalog.oidvectortypes(pc.proargtypes) AS proarguments,			pg_catalog.obj_description(pc.oid, 'pg_proc') AS procomment		FROM			pg_catalog.pg_proc pc, pg_catalog.pg_language pl, pg_catalog.pg_namespace n		WHERE			pc.oid = '$function_oid'::oid			AND pc.prolang = pl.oid			AND n.oid = pc.pronamespace		";		return $this->selectSet($sql);	}	// Capabilities	function hasAlterColumnType() { return false; }	function hasCreateFieldWithConstraints() { return false; }	function hasAlterDatabaseOwner() { return false; }	function hasAlterSchemaOwner() { return false; }	function hasFunctionAlterOwner() { return false; }	function hasNamedParams() { return false; }	function hasQueryCancel() { return false; }	function hasTablespaces() { return false; }	function hasMagicTypes() { return false; }}?>
<?php	/**	 * Manage groups in a database cluster	 *	 * $Id: groups.php,v 1.27 2007/08/31 18:30:11 ioguix Exp $	 */	// Include application functions	include_once('./libraries/lib.inc.php');	$action = (isset($_REQUEST['action'])) ? $_REQUEST['action'] : '';	if (!isset($msg)) $msg = '';	/**	 * Add user to a group	 */	function doAddMember() {		global $data, $misc;		global $lang;		$status = $data->addGroupMember($_REQUEST['group'], $_REQUEST['user']);		if ($status == 0)			doProperties($lang['strmemberadded']);		else			doProperties($lang['strmemberaddedbad']);	}		/**	 * Show confirmation of drop user from group and perform actual drop	 */	function doDropMember($confirm) {		global $data, $misc;		global $lang;		if ($confirm) { 			$misc->printTrail('group');			$misc->printTitle($lang['strdropmember'],'pg.group.alter');						echo "<p>", sprintf($lang['strconfdropmember'], $misc->printVal($_REQUEST['user']), $misc->printVal($_REQUEST['group'])), "</p>\n";						echo "<form action=\"groups.php\" method=\"post\">\n";			echo $misc->form;			echo "<input type=\"hidden\" name=\"action\" value=\"drop_member\" />\n";			echo "<input type=\"hidden\" name=\"group\" value=\"", htmlspecialchars($_REQUEST['group']), "\" />\n";			echo "<input type=\"hidden\" name=\"user\" value=\"", htmlspecialchars($_REQUEST['user']), "\" />\n";			echo "<input type=\"submit\" name=\"drop\" value=\"{$lang['strdrop']}\" />\n";			echo "<input type=\"submit\" name=\"cancel\" value=\"{$lang['strcancel']}\" />\n";			echo "</form>\n";		}		else {			$status = $data->dropGroupMember($_REQUEST['group'], $_REQUEST['user']);			if ($status == 0)				doProperties($lang['strmemberdropped']);			else				doDropMember(true, $lang['strmemberdroppedbad']);		}			}		/**	 * Show read only properties for a group	 */	function doProperties($msg = '') {		global $data, $misc;		global $lang;			if (!isset($_POST['user'])) $_POST['user'] = '';			$misc->printTrail('group');		$misc->printTitle($lang['strproperties'],'pg.group');		$misc->printMsg($msg);				$groupdata = $data->getGroup($_REQUEST['group']);		$users = $data->getUsers();				if ($groupdata->recordCount() > 0) {			echo "<table>\n";           	echo "<tr><th class=\"data\">{$lang['strmembers']}</th><th class=\"data\">{$lang['stractions']}</th></tr>\n";           	$i = 0;           	while (!$groupdata->EOF) {					$id = (($i % 2) == 0 ? '1' : '2');            	echo "<tr class=\"data{$id}\"><td>", $misc->printVal($groupdata->fields['usename']), "</td>\n";					echo "<td class=\"opbutton{$id}\"><a href=\"groups.php?action=confirm_drop_member&{$misc->href}&group=",						urlencode($_REQUEST['group']), "&user=", urlencode($groupdata->fields['usename']), "\">{$lang['strdrop']}</a></td>\n";            	echo "</tr>\n";            	$groupdata->moveNext();           	}			echo "</table>\n";		}		else echo "<p>{$lang['strnousers']}</p>\n";		// Display form for adding a user to the group					echo "<form action=\"groups.php\" method=\"post\">\n";		echo "<select name=\"user\">";		while (!$users->EOF) {			$uname = $misc->printVal($users->fields['usename']);			echo "<option value=\"{$uname}\"",				($uname == $_POST['user']) ? ' selected="selected"' : '', ">{$uname}</option>\n";			$users->moveNext();		}		echo "</select>\n";		echo "<input type=\"submit\" value=\"{$lang['straddmember']}\" />\n";		echo $misc->form;		echo "<input type=\"hidden\" name=\"group\" value=\"", htmlspecialchars($_REQUEST['group']), "\" />\n";		echo "<input type=\"hidden\" name=\"action\" value=\"add_member\" />\n";		echo "</form>\n";				echo "<p><a class=\"navlink\" href=\"groups.php?{$misc->href}\">{$lang['strshowallgroups']}</a></p>\n";	}		/**	 * Show confirmation of drop and perform actual drop	 */	function doDrop($confirm) {		global $data, $misc;		global $lang;		if ($confirm) {			$misc->printTrail('group');			$misc->printTitle($lang['strdrop'],'pg.group.drop');						echo "<p>", sprintf($lang['strconfdropgroup'], $misc->printVal($_REQUEST['group'])), "</p>\n";						echo "<form action=\"groups.php\" method=\"post\">\n";			echo $misc->form;			echo "<input type=\"hidden\" name=\"action\" value=\"drop\" />\n";			echo "<input type=\"hidden\" name=\"group\" value=\"", htmlspecialchars($_REQUEST['group']), "\" />\n";			echo "<input type=\"submit\" name=\"drop\" value=\"{$lang['strdrop']}\" />\n";			echo "<input type=\"submit\" name=\"cancel\" value=\"{$lang['strcancel']}\" />\n";			echo "</form>\n";		}		else {			$status = $data->dropGroup($_REQUEST['group']);			if ($status == 0)				doDefault($lang['strgroupdropped']);			else				doDefault($lang['strgroupdroppedbad']);		}			}		/**	 * Displays a screen where they can enter a new group	 */	function doCreate($msg = '') {		global $data, $misc;		global $lang;				if (!isset($_POST['name'])) $_POST['name'] = '';		if (!isset($_POST['members'])) $_POST['members'] = array();		// Fetch a list of all users in the cluster		$users = $data->getUsers();				$misc->printTrail('server');		$misc->printTitle($lang['strcreategroup'],'pg.group.create');		$misc->printMsg($msg);		echo "<form action=\"\" method=\"post\">\n";		echo $misc->form;		echo "<table>\n";		echo "\t<tr>\n\t\t<th class=\"data left required\">{$lang['strname']}</th>\n";		echo "\t\t<td class=\"data\"><input size=\"32\" maxlength=\"{$data->_maxNameLen}\" name=\"name\" value=\"", htmlspecialchars($_POST['name']), "\" /></td>\n\t</tr>\n";		if ($users->recordCount() > 0) {			echo "\t<tr>\n\t\t<th class=\"data left\">{$lang['strmembers']}</th>\n";			echo "\t\t<td class=\"data\">\n";			echo "\t\t\t<select name=\"members[]\" multiple=\"multiple\" size=\"", min(40, $users->recordCount()), "\">\n";			while (!$users->EOF) {				$username = $users->fields['usename'];				echo "\t\t\t\t<option value=\"{$username}\"",						(in_array($username, $_POST['members']) ? ' selected="selected"' : ''), ">", $misc->printVal($username), "</option>\n";				$users->moveNext();			}			echo "\t\t\t</select>\n";			echo "\t\t</td>\n\t</tr>\n";			}		echo "</table>\n";		echo "<p><input type=\"hidden\" name=\"action\" value=\"save_create\" />\n";		echo "<input type=\"submit\" value=\"{$lang['strcreate']}\" />\n";		echo "<input type=\"submit\" name=\"cancel\" value=\"{$lang['strcancel']}\" /></p>\n";		echo "</form>\n";	}		/**	 * Actually creates the new group in the database	 */	function doSaveCreate() {		global $data;		global $lang;		if (!isset($_POST['members'])) $_POST['members'] = array();		// Check form vars		if (trim($_POST['name']) == '')			doCreate($lang['strgroupneedsname']);		else {					$status = $data->createGroup($_POST['name'], $_POST['members']);			if ($status == 0)				doDefault($lang['strgroupcreated']);			else				doCreate($lang['strgroupcreatedbad']);		}	}		/**	 * Show default list of groups in the database	 */	function doDefault($msg = '') {		global $data, $misc;		global $lang;				$misc->printTrail('server');		$misc->printTabs('server','groups');		$misc->printMsg($msg);				$groups = $data->getGroups();				$columns = array(			'group' => array(				'title' => $lang['strgroup'],				'field' => field('groname'),				'url'   => "groups.php?action=properties&amp;{$misc->href}&amp;",				'vars'  => array('group' => 'groname'),			),			'actions' => array(				'title' => $lang['stractions'],			),		);				$actions = array(			'drop' => array(				'title' => $lang['strdrop'],				'url'   => "groups.php?action=confirm_drop&amp;{$misc->href}&amp;",				'vars'  => array('group' => 'groname'),			),		);				$misc->printTable($groups, $columns, $actions, $lang['strnogroups']);				echo "<p><a class=\"navlink\" href=\"groups.php?action=create&amp;{$misc->href}\">{$lang['strcreategroup']}</a></p>\n";	}	$misc->printHeader($lang['strgroups']);	$misc->printBody();	switch ($action) {		case 'add_member':			doAddMember();			break;		case 'drop_member':			if (isset($_REQUEST['drop'])) doDropMember(false);			else doProperties();			break;		case 'confirm_drop_member':			doDropMember(true);			break;					case 'save_create':			if (isset($_REQUEST['cancel'])) doDefault();			else doSaveCreate();			break;		case 'create':			doCreate();			break;		case 'drop':			if (isset($_REQUEST['drop'])) doDrop(false);			else doDefault();			break;		case 'confirm_drop':			doDrop(true);			break;					case 'save_edit':			doSaveEdit();			break;		case 'edit':			doEdit();			break;		case 'properties':			doProperties();			break;		default:			doDefault();			break;	}		$misc->printFooter();?>
<?php	/**	 * Manage users in a database cluster	 *	 * $Id: users.php,v 1.40 2008/02/25 17:20:44 xzilla Exp $	 */	// Include application functions	include_once('./libraries/lib.inc.php');	$action = (isset($_REQUEST['action'])) ? $_REQUEST['action'] : '';	if (!isset($msg)) $msg = '';			/**	 * If a user is not a superuser, then we have an 'account management' page	 * where they can change their password, etc.  We don't prevent them from	 * messing with the URL to gain access to other user admin stuff, because	 * the PostgreSQL permissions will prevent them changing anything anyway.	 */	function doAccount($msg = '') {		global $data, $misc;		global $lang;				$server_info = $misc->getServerInfo();				$userdata = $data->getUser($server_info['username']);		$_REQUEST['user'] = $server_info['username'];				$misc->printTrail('user');		$misc->printTabs('server','account');		$misc->printMsg($msg);		if ($userdata->recordCount() > 0) {			$userdata->fields['usesuper'] = $data->phpBool($userdata->fields['usesuper']);			$userdata->fields['usecreatedb'] = $data->phpBool($userdata->fields['usecreatedb']);			echo "<table>\n";			echo "<tr><th class=\"data\">{$lang['strusername']}</th><th class=\"data\">{$lang['strsuper']}</th><th class=\"data\">{$lang['strcreatedb']}</th><th class=\"data\">{$lang['strexpires']}</th>";			echo "<th class=\"data\">{$lang['strsessiondefaults']}</th>";			echo "</tr>\n";			echo "<tr>\n\t<td class=\"data1\">", $misc->printVal($userdata->fields['usename']), "</td>\n";			echo "\t<td class=\"data1\">", $misc->printVal($userdata->fields['usesuper'], 'yesno'), "</td>\n";			echo "\t<td class=\"data1\">", $misc->printVal($userdata->fields['usecreatedb'], 'yesno'), "</td>\n";			echo "\t<td class=\"data1\">", ($userdata->fields['useexpires'] == 'infinity' || is_null($userdata->fields['useexpires']) ? $lang['strnever'] : $misc->printVal($userdata->fields['useexpires'])), "</td>\n";			echo "\t<td class=\"data1\">", $misc->printVal($userdata->fields['useconfig']), "</td>\n";			echo "</tr>\n</table>\n";		}		else echo "<p>{$lang['strnodata']}</p>\n";				echo "<p><a class=\"navlink\" href=\"users.php?action=confchangepassword&amp;{$misc->href}\">{$lang['strchangepassword']}</a></p>\n";	}		/**	 * Show confirmation of change password and actually change password	 */	function doChangePassword($confirm, $msg = '') {		global $data, $misc;		global $lang, $conf;				$server_info = $misc->getServerInfo();				if ($confirm) {			$_REQUEST['user'] = $server_info['username'];			$misc->printTrail('user');			$misc->printTitle($lang['strchangepassword'],'pg.user.alter');			$misc->printMsg($msg);						if (!isset($_POST['password'])) $_POST['password'] = '';			if (!isset($_POST['confirm'])) $_POST['confirm'] = '';						echo "<form action=\"users.php\" method=\"post\">\n";			echo "<table>\n";			echo "\t<tr>\n\t\t<th class=\"data left required\">{$lang['strpassword']}</th>\n";			echo "\t\t<td><input type=\"password\" name=\"password\" size=\"32\" value=\"", 				htmlspecialchars($_POST['password']), "\" /></td>\n\t</tr>\n";			echo "\t<tr>\n\t\t<th class=\"data left required\">{$lang['strconfirm']}</th>\n";			echo "\t\t<td><input type=\"password\" name=\"confirm\" size=\"32\" value=\"\" /></td>\n\t</tr>\n";			echo "</table>\n";			echo "<p><input type=\"hidden\" name=\"action\" value=\"changepassword\" />\n";			echo $misc->form;			echo "<input type=\"submit\" name=\"ok\" value=\"{$lang['strok']}\" />\n";			echo "<input type=\"submit\" name=\"cancel\" value=\"{$lang['strcancel']}\" />\n";			echo "</p></form>\n";		}		else {			// Check that password is minimum length			if (strlen($_POST['password']) < $conf['min_password_length'])				doChangePassword(true, $lang['strpasswordshort']);			// Check that password matches confirmation password			elseif ($_POST['password'] != $_POST['confirm'])				doChangePassword(true, $lang['strpasswordconfirm']);			else {				$status = $data->changePassword($server_info['username'], 					$_POST['password']);				if ($status == 0)					doAccount($lang['strpasswordchanged']);				else					doAccount($lang['strpasswordchangedbad']);			}		}			}	/**	 * Function to allow editing of a user	 */	function doEdit($msg = '') {		global $data, $misc;		global $lang;			$misc->printTrail('user');		$misc->printTitle($lang['stralter'],'pg.user.alter');		$misc->printMsg($msg);				$userdata = $data->getUser($_REQUEST['username']);				if ($userdata->recordCount() > 0) {			$server_info = $misc->getServerInfo();			$canRename = $data->hasUserRename() && ($_REQUEST['username'] != $server_info['username']);			$userdata->fields['usesuper'] = $data->phpBool($userdata->fields['usesuper']);			$userdata->fields['usecreatedb'] = $data->phpBool($userdata->fields['usecreatedb']);			if (!isset($_POST['formExpires'])){				if ($canRename) $_POST['newname'] = $userdata->fields['usename'];				if ($userdata->fields['usesuper']) $_POST['formSuper'] = '';				if ($userdata->fields['usecreatedb']) $_POST['formCreateDB'] = '';				$_POST['formExpires'] = $userdata->fields['useexpires'] == 'infinity' ? '' : $userdata->fields['useexpires'];				$_POST['formPassword'] = '';			}					echo "<form action=\"users.php\" method=\"post\">\n";			echo "<table>\n";			echo "\t<tr>\n\t\t<th class=\"data left\">{$lang['strusername']}</th>\n";			echo "\t\t<td class=\"data1\">", ($canRename ? "<input name=\"newname\" size=\"15\" maxlength=\"{$data->_maxNameLen}\" value=\"" . htmlspecialchars($_POST['newname']) . "\" />" : $misc->printVal($userdata->fields['usename'])), "</td>\n\t</tr>\n";			echo "\t<tr>\n\t\t<th class=\"data left\"><label for=\"formSuper\">{$lang['strsuper']}</label></th>\n";			echo "\t\t<td class=\"data1\"><input type=\"checkbox\" id=\"formSuper\" name=\"formSuper\"", 				(isset($_POST['formSuper'])) ? ' checked="checked"' : '', " /></td>\n\t</tr>\n";			echo "\t<tr>\n\t\t<th class=\"data left\"><label for=\"formCreateDB\">{$lang['strcreatedb']}</label></th>\n";			echo "\t\t<td class=\"data1\"><input type=\"checkbox\" id=\"formCreateDB\" name=\"formCreateDB\"", 				(isset($_POST['formCreateDB'])) ? ' checked="checked"' : '', " /></td>\n\t</tr>\n";			echo "\t<tr>\n\t\t<th class=\"data left\">{$lang['strexpires']}</th>\n";			echo "\t\t<td class=\"data1\"><input size=\"16\" name=\"formExpires\" value=\"", htmlspecialchars($_POST['formExpires']), "\" /></td>\n\t</tr>\n";			echo "\t<tr>\n\t\t<th class=\"data left\">{$lang['strpassword']}</th>\n";			echo "\t\t<td class=\"data1\"><input type=\"password\" size=\"16\" name=\"formPassword\" value=\"", htmlspecialchars($_POST['formPassword']), "\" /></td>\n\t</tr>\n";			echo "\t<tr>\n\t\t<th class=\"data left\">{$lang['strconfirm']}</th>\n";			echo "\t\t<td class=\"data1\"><input type=\"password\" size=\"16\" name=\"formConfirm\" value=\"\" /></td>\n\t</tr>\n";			echo "</table>\n";			echo "<p><input type=\"hidden\" name=\"action\" value=\"save_edit\" />\n";			echo "<input type=\"hidden\" name=\"username\" value=\"", htmlspecialchars($_REQUEST['username']), "\" />\n";			echo $misc->form;			echo "<input type=\"submit\" name=\"alter\" value=\"{$lang['stralter']}\" />\n";			echo "<input type=\"submit\" name=\"cancel\" value=\"{$lang['strcancel']}\" /></p>\n";			echo "</form>\n";		}		else echo "<p>{$lang['strnodata']}</p>\n";	}		/** 	 * Function to save after editing a user	 */	function doSaveEdit() {		global $data, $lang;				// Check name and password		if (isset($_POST['newname']) && $_POST['newname'] == '')			doEdit($lang['struserneedsname']);		else if ($_POST['formPassword'] != $_POST['formConfirm'])			doEdit($lang['strpasswordconfirm']);		else {			if (isset($_POST['newname'])) $status = $data->setRenameUser($_POST['username'], $_POST['formPassword'], isset($_POST['formCreateDB']), isset($_POST['formSuper']), $_POST['formExpires'], $_POST['newname']);			else $status = $data->setUser($_POST['username'], $_POST['formPassword'], isset($_POST['formCreateDB']), isset($_POST['formSuper']), $_POST['formExpires']);			if ($status == 0)				doDefault($lang['struserupdated']);			else				doEdit($lang['struserupdatedbad']);		}	}	/**	 * Show confirmation of drop and perform actual drop	 */	function doDrop($confirm) {		global $data, $misc;		global $lang;		if ($confirm) {			$misc->printTrail('user');			$misc->printTitle($lang['strdrop'],'pg.user.drop');						echo "<p>", sprintf($lang['strconfdropuser'], $misc->printVal($_REQUEST['username'])), "</p>\n";							echo "<form action=\"users.php\" method=\"post\">\n";			echo "<p><input type=\"hidden\" name=\"action\" value=\"drop\" />\n";			echo "<input type=\"hidden\" name=\"username\" value=\"", htmlspecialchars($_REQUEST['username']), "\" />\n";			echo $misc->form;			echo "<input type=\"submit\" name=\"drop\" value=\"{$lang['strdrop']}\" />\n";			echo "<input type=\"submit\" name=\"cancel\" value=\"{$lang['strcancel']}\" /></p>\n";			echo "</form>\n";		}		else {			$status = $data->dropUser($_REQUEST['username']);			if ($status == 0)				doDefault($lang['struserdropped']);			else				doDefault($lang['struserdroppedbad']);		}			}		/**	 * Displays a screen where they can enter a new user	 */	function doCreate($msg = '') {		global $data, $misc, $username;		global $lang;				if (!isset($_POST['formUsername'])) $_POST['formUsername'] = '';		if (!isset($_POST['formPassword'])) $_POST['formPassword'] = '';		if (!isset($_POST['formConfirm'])) $_POST['formConfirm'] = '';		if (!isset($_POST['formExpires'])) $_POST['formExpires'] = '';				$misc->printTrail('server');		$misc->printTitle($lang['strcreateuser'],'pg.user.create');		$misc->printMsg($msg);		echo "<form action=\"users.php\" method=\"post\">\n";		echo "<table>\n";		echo "\t<tr>\n\t\t<th class=\"data left required\">{$lang['strusername']}</th>\n";		echo "\t\t<td class=\"data1\"><input size=\"15\" maxlength=\"{$data->_maxNameLen}\" name=\"formUsername\" value=\"", htmlspecialchars($_POST['formUsername']), "\" /></td>\n\t</tr>\n";		echo "\t<tr>\n\t\t<th class=\"data left\">{$lang['strpassword']}</th>\n";		echo "\t\t<td class=\"data1\"><input size=\"15\" type=\"password\" name=\"formPassword\" value=\"", htmlspecialchars($_POST['formPassword']), "\" /></td>\n\t</tr>\n";		echo "\t<tr>\n\t\t<th class=\"data left\">{$lang['strconfirm']}</th>\n";		echo "\t\t<td class=\"data1\"><input size=\"15\" type=\"password\" name=\"formConfirm\" value=\"", htmlspecialchars($_POST['formConfirm']), "\" /></td>\n\t</tr>\n";		echo "\t<tr>\n\t\t<th class=\"data left\"><label for=\"formSuper\">{$lang['strsuper']}</label></th>\n";		echo "\t\t<td class=\"data1\"><input type=\"checkbox\" id=\"formSuper\" name=\"formSuper\"", 			(isset($_POST['formSuper'])) ? ' checked="checked"' : '', " /></td>\n\t</tr>\n";		echo "\t<tr>\n\t\t<th class=\"data left\"><label for=\"formCreateDB\">{$lang['strcreatedb']}</label></th>\n";		echo "\t\t<td class=\"data1\"><input type=\"checkbox\" id=\"formCreateDB\" name=\"formCreateDB\"", 			(isset($_POST['formCreateDB'])) ? ' checked="checked"' : '', " /></td>\n\t</tr>\n";		echo "\t<tr>\n\t\t<th class=\"data left\">{$lang['strexpires']}</th>\n";		echo "\t\t<td class=\"data1\"><input size=\"30\" name=\"formExpires\" value=\"", htmlspecialchars($_POST['formExpires']), "\" /></td>\n\t</tr>\n";		echo "</table>\n";		echo "<p><input type=\"hidden\" name=\"action\" value=\"save_create\" />\n";		echo $misc->form;		echo "<input type=\"submit\" name=\"create\" value=\"{$lang['strcreate']}\" />\n";		echo "<input type=\"submit\" name=\"cancel\" value=\"{$lang['strcancel']}\" /></p>\n";		echo "</form>\n";	}		/**	 * Actually creates the new user in the database	 */	function doSaveCreate() {		global $data;		global $lang;		// Check data		if ($_POST['formUsername'] == '')			doCreate($lang['struserneedsname']);		else if ($_POST['formPassword'] != $_POST['formConfirm'])			doCreate($lang['strpasswordconfirm']);		else {					$status = $data->createUser($_POST['formUsername'], $_POST['formPassword'], 				isset($_POST['formCreateDB']), isset($_POST['formSuper']), $_POST['formExpires'], array());			if ($status == 0)				doDefault($lang['strusercreated']);			else				doCreate($lang['strusercreatedbad']);		}	}		/**	 * Show default list of users in the database	 */	function doDefault($msg = '') {		global $data, $misc;		global $lang;				function renderUseExpires($val) {			global $lang;			return $val == 'infinity' ? $lang['strnever'] : htmlspecialchars($val); 		}				$misc->printTrail('server');		$misc->printTabs('server','users');		$misc->printMsg($msg);				$users = $data->getUsers();				$columns = array(			'user' => array(				'title' => $lang['strusername'],				'field' => field('usename'),			),			'superuser' => array(				'title' => $lang['strsuper'],				'field' => field('usesuper'),				'type'  => 'yesno',			),			'createdb' => array(				'title' => $lang['strcreatedb'],				'field' => field('usecreatedb'),				'type'  => 'yesno',			),			'expires' => array(				'title' => $lang['strexpires'],				'field' => field('useexpires'),				'type'  => 'callback',				'params'=> array('function' => 'renderUseExpires', 'null' => $lang['strnever']),			),			'defaults' => array(				'title' => $lang['strsessiondefaults'],				'field' => field('useconfig'),			),			'actions' => array(				'title' => $lang['stractions'],			),		);				$actions = array(			'alter' => array(				'title' => $lang['stralter'],				'url'   => "users.php?action=edit&amp;{$misc->href}&amp;",				'vars'  => array('username' => 'usename'),			),			'drop' => array(				'title' => $lang['strdrop'],				'url'   => "users.php?action=confirm_drop&amp;{$misc->href}&amp;",				'vars'  => array('username' => 'usename'),			),		);				$misc->printTable($users, $columns, $actions, $lang['strnousers']);		echo "<p><a class=\"navlink\" href=\"users.php?action=create&amp;{$misc->href}\">{$lang['strcreateuser']}</a></p>\n";	}	$misc->printHeader($lang['strusers']);	$misc->printBody();	switch ($action) {		case 'changepassword':			if (isset($_REQUEST['ok'])) doChangePassword(false);			else doAccount();			break;		case 'confchangepassword':			doChangePassword(true);			break;					case 'account':			doAccount();			break;		case 'save_create':			if (isset($_REQUEST['cancel'])) doDefault();			else doSaveCreate();			break;		case 'create':						doCreate();			break;		case 'drop':			if (isset($_REQUEST['cancel'])) doDefault();			else doDrop(false);			break;		case 'confirm_drop':			doDrop(true);			break;		case 'save_edit':			if (isset($_REQUEST['cancel'])) doDefault();			else doSaveEdit();			break;		case 'edit':			doEdit();			break;		default:			doDefault();			break;	}		$misc->printFooter();?>
<?php	/**	 * Manage sequences in a database	 *	 * $Id: sequences.php,v 1.49 2007/12/15 22:21:54 ioguix Exp $	 */	// Include application functions	include_once('./libraries/lib.inc.php');	$action = (isset($_REQUEST['action'])) ? $_REQUEST['action'] : '';	if (!isset($msg)) $msg = '';	/**	 * Display list of all sequences in the database/schema	 */	function doDefault($msg = '')	{		global $data, $conf, $misc;		global $lang;		$misc->printTrail('schema');		$misc->printTabs('schema', 'sequences');		$misc->printMsg($msg);		// Get all sequences		$sequences = $data->getSequences();		$columns = array(			'sequence' => array(				'title' => $lang['strsequence'],				'field' => field('seqname'),				'url'   => "sequences.php?action=properties&amp;{$misc->href}&amp;",				'vars'  => array('sequence' => 'seqname'),			),			'owner' => array(				'title' => $lang['strowner'],				'field' => field('seqowner'),			),			'actions' => array(				'title' => $lang['stractions'],			),			'comment' => array(				'title' => $lang['strcomment'],				'field' => field('seqcomment'),			),		);		$actions = array(			'multiactions' => array(				'keycols' => array('sequence' => 'seqname'),				'url' => 'sequences.php',			),			'alter' => array(				'title' => $lang['stralter'],				'url'   => "sequences.php?action=confirm_alter&amp;{$misc->href}&amp;subject=sequence&amp;",				'vars'  => array('sequence' => 'seqname'),			),			'drop' => array(				'title' => $lang['strdrop'],				'url'   => "sequences.php?action=confirm_drop&amp;{$misc->href}&amp;",				'vars'  => array('sequence' => 'seqname'),				'multiaction' => 'confirm_drop',			),			'privileges' => array(				'title' => $lang['strprivileges'],				'url'   => "privileges.php?{$misc->href}&amp;subject=sequence&amp;",				'vars'  => array('sequence' => 'seqname'),			),		);		$misc->printTable($sequences, $columns, $actions, $lang['strnosequences']);		echo "<p><a class=\"navlink\" href=\"sequences.php?action=create&amp;{$misc->href}\">{$lang['strcreatesequence']}</a></p>\n";	}	/**	 * Generate XML for the browser tree.	 */	function doTree() {		global $misc, $data;		$sequences = $data->getSequences();		$reqvars = $misc->getRequestVars('sequence');		$attrs = array(			'text'   => field('seqname'),			'icon'   => 'Sequence',			'toolTip'=> field('seqcomment'),			'action' => url('sequences.php',							$reqvars,							array (								'action' => 'properties',								'sequence' => field('seqname')							)						)		);		$misc->printTreeXML($sequences, $attrs);		exit;	}	/**	 * Display the properties of a sequence	 */	function doProperties($msg = '') {		global $data, $misc;		global $lang;		$misc->printTrail('sequence');		$misc->printTitle($lang['strproperties'],'pg.sequence');		$misc->printMsg($msg);		// Fetch the sequence information		$sequence = $data->getSequence($_REQUEST['sequence']);		if (is_object($sequence) && $sequence->recordCount() > 0) {			$sequence->fields['is_cycled'] = $data->phpBool($sequence->fields['is_cycled']);			$sequence->fields['is_called'] = $data->phpBool($sequence->fields['is_called']);			// Show comment if any			if ($sequence->fields['seqcomment'] !== null)				echo "<p class=\"comment\">", $misc->printVal($sequence->fields['seqcomment']), "</p>\n";			echo "<table border=\"0\">";			echo "<tr><th class=\"data\">{$lang['strname']}</th>";			if ($data->hasAlterSequenceStart()) {				echo "<th class=\"data\">{$lang['strstartvalue']}</th>";			}			echo "<th class=\"data\">{$lang['strlastvalue']}</th>";			echo "<th class=\"data\">{$lang['strincrementby']}</th>";			echo "<th class=\"data\">{$lang['strmaxvalue']}</th>";			echo "<th class=\"data\">{$lang['strminvalue']}</th>";			echo "<th class=\"data\">{$lang['strcachevalue']}</th>";			echo "<th class=\"data\">{$lang['strlogcount']}</th>";			echo "<th class=\"data\">{$lang['strcancycle']}</th>";			echo "<th class=\"data\">{$lang['striscalled']}</th></tr>";			echo "<tr>";			echo "<td class=\"data1\">", $misc->printVal($sequence->fields['seqname']), "</td>";			if ($data->hasAlterSequenceStart()) {				echo "<td class=\"data1\">", $misc->printVal($sequence->fields['start_value']), "</td>";			}			echo "<td class=\"data1\">", $misc->printVal($sequence->fields['last_value']), "</td>";			echo "<td class=\"data1\">", $misc->printVal($sequence->fields['increment_by']), "</td>";			echo "<td class=\"data1\">", $misc->printVal($sequence->fields['max_value']), "</td>";			echo "<td class=\"data1\">", $misc->printVal($sequence->fields['min_value']), "</td>";			echo "<td class=\"data1\">", $misc->printVal($sequence->fields['cache_value']), "</td>";			echo "<td class=\"data1\">", $misc->printVal($sequence->fields['log_cnt']), "</td>";			echo "<td class=\"data1\">", ($sequence->fields['is_cycled'] ? $lang['stryes'] : $lang['strno']), "</td>";			echo "<td class=\"data1\">", ($sequence->fields['is_called'] ? $lang['stryes'] : $lang['strno']), "</td>";			echo "</tr>";			echo "</table>";			echo "<ul class=\"navlink\">\n";			echo "\t<li><a href=\"sequences.php?action=confirm_alter&amp;{$misc->href}&amp;sequence=", urlencode($sequence->fields['seqname']), "\">{$lang['stralter']}</a></li>\n";			echo "\t<li><a href=\"sequences.php?action=confirm_setval&amp;{$misc->href}&amp;sequence=", urlencode($sequence->fields['seqname']), "\">{$lang['strsetval']}</a></li>\n";			echo "\t<li><a href=\"sequences.php?action=nextval&amp;{$misc->href}&amp;sequence=", urlencode($sequence->fields['seqname']), "\">{$lang['strnextval']}</a></li>\n";			if ($data->hasAlterSequenceStart()) {				echo "\t<li><a href=\"sequences.php?action=restart&amp;{$misc->href}&amp;sequence=", urlencode($sequence->fields['seqname']), "\">{$lang['strrestart']}</a></li>\n";			}			echo "\t<li><a href=\"sequences.php?action=reset&amp;{$misc->href}&amp;sequence=", urlencode($sequence->fields['seqname']), "\">{$lang['strreset']}</a></li>\n";			echo "\t<li><a href=\"sequences.php?{$misc->href}\">{$lang['strshowallsequences']}</a></li>\n</ul>\n";		}		else echo "<p>{$lang['strnodata']}</p>\n";	}	/**	 * Drop a sequence	 */	function doDrop($confirm, $msg = '') {		global $data, $misc;		global $lang;		if (empty($_REQUEST['sequence']) && empty($_REQUEST['ma'])) {			doDefault($lang['strspecifysequencetodrop']);			exit();		}				if ($confirm) {			$misc->printTrail('sequence');			$misc->printTitle($lang['strdrop'],'pg.sequence.drop');			$misc->printMsg($msg);						echo "<form action=\"sequences.php\" method=\"post\">\n";						//If multi drop			if (isset($_REQUEST['ma'])) {				foreach($_REQUEST['ma'] as $v) {					$a = unserialize(htmlspecialchars_decode($v, ENT_QUOTES));					echo "<p>", sprintf($lang['strconfdropsequence'], $misc->printVal($a['sequence'])), "</p>\n";					printf('<input type="hidden" name="sequence[]" value="%s" />', htmlspecialchars($a['sequence']));				}			} else {				echo "<p>", sprintf($lang['strconfdropsequence'], $misc->printVal($_REQUEST['sequence'])), "</p>\n";				echo "<input type=\"hidden\" name=\"sequence\" value=\"", htmlspecialchars($_REQUEST['sequence']), "\" />\n";			}			echo "<p><input type=\"checkbox\" id=\"cascade\" name=\"cascade\" /> <label for=\"cascade\">{$lang['strcascade']}</label></p>\n";			echo "<p><input type=\"hidden\" name=\"action\" value=\"drop\" />\n";			echo $misc->form;			echo "<input type=\"submit\" name=\"drop\" value=\"{$lang['strdrop']}\" />\n";			echo "<input type=\"submit\" name=\"cancel\" value=\"{$lang['strcancel']}\" /></p>\n";			echo "</form>\n";		}		else {			if (is_array($_POST['sequence'])) {				$msg='';				$status = $data->beginTransaction();				if ($status == 0) {					foreach($_POST['sequence'] as $s) {						$status = $data->dropSequence($s, isset($_POST['cascade']));						if ($status == 0)							$msg.= sprintf('%s: %s<br />', htmlentities($s), $lang['strsequencedropped']);						else {							$data->endTransaction();							doDefault(sprintf('%s%s: %s<br />', $msg, htmlentities($s), $lang['strsequencedroppedbad']));							return;						}					}				}				if($data->endTransaction() == 0) {					// Everything went fine, back to the Default page....					$_reload_browser = true;					doDefault($msg);				}				else doDefault($lang['strsequencedroppedbad']);			}			else{				$status = $data->dropSequence($_POST['sequence'], isset($_POST['cascade']));				if ($status == 0) {					$_reload_browser = true;					doDefault($lang['strsequencedropped']);				}				else					doDrop(true, $lang['strsequencedroppedbad']);			}		}	}	/**	 * Displays a screen where they can enter a new sequence	 */	function doCreateSequence($msg = '') {		global $data, $misc;		global $lang;		if (!isset($_POST['formSequenceName'])) $_POST['formSequenceName'] = '';		if (!isset($_POST['formIncrement'])) $_POST['formIncrement'] = '';		if (!isset($_POST['formMinValue'])) $_POST['formMinValue'] = '';		if (!isset($_POST['formMaxValue'])) $_POST['formMaxValue'] = '';		if (!isset($_POST['formStartValue'])) $_POST['formStartValue'] = '';		if (!isset($_POST['formCacheValue'])) $_POST['formCacheValue'] = '';		$misc->printTrail('schema');		$misc->printTitle($lang['strcreatesequence'],'pg.sequence.create');		$misc->printMsg($msg);		echo "<form action=\"sequences.php\" method=\"post\">\n";		echo "<table>\n";		echo "<tr><th class=\"data left required\">{$lang['strname']}</th>\n";		echo "<td class=\"data1\"><input name=\"formSequenceName\" size=\"32\" maxlength=\"{$data->_maxNameLen}\" value=\"",			htmlspecialchars($_POST['formSequenceName']), "\" /></td></tr>\n";		echo "<tr><th class=\"data left\">{$lang['strincrementby']}</th>\n";		echo "<td class=\"data1\"><input name=\"formIncrement\" size=\"5\" value=\"",			htmlspecialchars($_POST['formIncrement']), "\" /> </td></tr>\n";		echo "<tr><th class=\"data left\">{$lang['strminvalue']}</th>\n";		echo "<td class=\"data1\"><input name=\"formMinValue\" size=\"5\" value=\"",			htmlspecialchars($_POST['formMinValue']), "\" /></td></tr>\n";		echo "<tr><th class=\"data left\">{$lang['strmaxvalue']}</th>\n";		echo "<td class=\"data1\"><input name=\"formMaxValue\" size=\"5\" value=\"",			htmlspecialchars($_POST['formMaxValue']), "\" /></td></tr>\n";		echo "<tr><th class=\"data left\">{$lang['strstartvalue']}</th>\n";		echo "<td class=\"data1\"><input name=\"formStartValue\" size=\"5\" value=\"",			htmlspecialchars($_POST['formStartValue']), "\" /></td></tr>\n";		echo "<tr><th class=\"data left\">{$lang['strcachevalue']}</th>\n";		echo "<td class=\"data1\"><input name=\"formCacheValue\" size=\"5\" value=\"",			htmlspecialchars($_POST['formCacheValue']), "\" /></td></tr>\n";		echo "<tr><th class=\"data left\"><label for=\"formCycledValue\">{$lang['strcancycle']}</label></th>\n";		echo "<td class=\"data1\"><input type=\"checkbox\" id=\"formCycledValue\" name=\"formCycledValue\" ",			(isset($_POST['formCycledValue']) ? ' checked="checked"' : ''), " /></td></tr>\n";		echo "</table>\n";		echo "<p><input type=\"hidden\" name=\"action\" value=\"save_create_sequence\" />\n";		echo $misc->form;		echo "<input type=\"submit\" name=\"create\" value=\"{$lang['strcreate']}\" />\n";		echo "<input type=\"submit\" name=\"cancel\" value=\"{$lang['strcancel']}\" /></p>\n";		echo "</form>\n";	}	/**	 * Actually creates the new sequence in the database	 */	function doSaveCreateSequence() {		global $data;		global $lang;		// Check that they've given a name and at least one column		if ($_POST['formSequenceName'] == '') doCreateSequence($lang['strsequenceneedsname']);		else {			$status = $data->createSequence($_POST['formSequenceName'],				$_POST['formIncrement'], $_POST['formMinValue'],				$_POST['formMaxValue'], $_POST['formStartValue'],				$_POST['formCacheValue'], isset($_POST['formCycledValue']));			if ($status == 0) {				doDefault($lang['strsequencecreated']);			} else {				doCreateSequence($lang['strsequencecreatedbad']);			}		}	}	/**	 * Restarts a sequence	 */	function doRestart() {		global $data;		global $lang;		$status = $data->restartSequence($_REQUEST['sequence']);		if ($status == 0)			doProperties($lang['strsequencerestart']);		else			doProperties($lang['strsequencerestartbad']);	}	/**	 * Resets a sequence	 */	function doReset() {		global $data;		global $lang;		$status = $data->resetSequence($_REQUEST['sequence']);		if ($status == 0)			doProperties($lang['strsequencereset']);		else			doProperties($lang['strsequenceresetbad']);	}	/**	 * Set Nextval of a sequence	 */	function doNextval() {		global $data;		global $lang;		$status = $data->nextvalSequence($_REQUEST['sequence']);		if ($status == 0)			doProperties($lang['strsequencenextval']);		else			doProperties($lang['strsequencenextvalbad']);	}	/**	 * Function to save after 'setval'ing a sequence	 */	function doSaveSetval() {		global $data, $lang, $_reload_browser;		$status = $data->setvalSequence($_POST['sequence'], $_POST['nextvalue']);		if ($status == 0)			doProperties($lang['strsequencesetval']);		else			doProperties($lang['strsequencesetvalbad']);	}	/**	 * Function to allow 'setval'ing of a sequence	 */	function doSetval($msg = '') {		global $data, $misc;		global $lang;		$misc->printTrail('sequence');		$misc->printTitle($lang['strsetval'], 'pg.sequence');		$misc->printMsg($msg);		// Fetch the sequence information		$sequence = $data->getSequence($_REQUEST['sequence']);		if (is_object($sequence) && $sequence->recordCount() > 0) {			echo "<form action=\"sequences.php\" method=\"post\">\n";			echo "<table border=\"0\">";			echo "<tr><th class=\"data left required\">{$lang['strlastvalue']}</th>\n";			echo "<td class=\"data1\">";			echo "<input name=\"nextvalue\" size=\"32\" maxlength=\"{$data->_maxNameLen}\" value=\"",				$misc->printVal($sequence->fields['last_value']), "\" /></td></tr>\n";			echo "</table>\n";			echo "<p><input type=\"hidden\" name=\"action\" value=\"setval\" />\n";			echo "<input type=\"hidden\" name=\"sequence\" value=\"", htmlspecialchars($_REQUEST['sequence']), "\" />\n";			echo $misc->form;			echo "<input type=\"submit\" name=\"setval\" value=\"{$lang['strsetval']}\" />\n";			echo "<input type=\"submit\" name=\"cancel\" value=\"{$lang['strcancel']}\" /></p>\n";			echo "</form>\n";		}		else echo "<p>{$lang['strnodata']}</p>\n";	}	/**	 * Function to save after altering a sequence	 */	function doSaveAlter() {		global $data, $lang, $_reload_browser, $misc;		if (!isset($_POST['owner'])) $_POST['owner'] = null;		if (!isset($_POST['newschema'])) $_POST['newschema'] = null;		if (!isset($_POST['formIncrement'])) $_POST['formIncrement'] = null;		if (!isset($_POST['formMinValue'])) $_POST['formMinValue'] = null;		if (!isset($_POST['formMaxValue'])) $_POST['formMaxValue'] = null;		if (!isset($_POST['formStartValue'])) $_POST['formStartValue'] = null;		if (!isset($_POST['formRestartValue'])) $_POST['formRestartValue'] = null;		if (!isset($_POST['formCacheValue'])) $_POST['formCacheValue'] = null;		if (!isset($_POST['formCycledValue'])) $_POST['formCycledValue'] = null;		$status = $data->alterSequence($_POST['sequence'], $_POST['name'], $_POST['comment'], $_POST['owner'],			$_POST['newschema'], $_POST['formIncrement'], $_POST['formMinValue'], $_POST['formMaxValue'],			$_POST['formRestartValue'], $_POST['formCacheValue'], isset($_POST['formCycledValue']), $_POST['formStartValue']);		if ($status == 0) {			if ($_POST['sequence'] != $_POST['name']) {				// Jump them to the new view name				$_REQUEST['sequence'] = $_POST['name'];				// Force a browser reload				$_reload_browser = true;			}			if (!empty($_POST['newschema']) && ($_POST['newschema'] != $data->_schema)) {				// Jump them to the new sequence schema				$misc->setCurrentSchema($_POST['newschema']);				$_reload_browser = true;			 }			doProperties($lang['strsequencealtered']);		}		else			doProperties($lang['strsequencealteredbad']);	}	/**	 * Function to allow altering of a sequence	 */	function doAlter($msg = '') {		global $data, $misc;		global $lang;		$misc->printTrail('sequence');		$misc->printTitle($lang['stralter'], 'pg.sequence.alter');		$misc->printMsg($msg);		// Fetch the sequence information		$sequence = $data->getSequence($_REQUEST['sequence']);		if (is_object($sequence) && $sequence->recordCount() > 0) {			if (!isset($_POST['name'])) $_POST['name'] = $_REQUEST['sequence'];			if (!isset($_POST['comment'])) $_POST['comment'] = $sequence->fields['seqcomment'];			if (!isset($_POST['owner'])) $_POST['owner'] = $sequence->fields['seqowner'];			if (!isset($_POST['newschema'])) $_POST['newschema'] = $sequence->fields['nspname'];			// Handle Checkbox Value			$sequence->fields['is_cycled'] = $data->phpBool($sequence->fields['is_cycled']);			if ($sequence->fields['is_cycled']) $_POST['formCycledValue'] = 'on';			echo "<form action=\"sequences.php\" method=\"post\">\n";			echo "<table>\n";			echo "<tr><th class=\"data left required\">{$lang['strname']}</th>\n";			echo "<td class=\"data1\">";			echo "<input name=\"name\" size=\"32\" maxlength=\"{$data->_maxNameLen}\" value=\"",				htmlspecialchars($_POST['name']), "\" /></td></tr>\n";			$server_info = $misc->getServerInfo();			if ($data->isSuperUser($server_info['username'])) {				// Fetch all users				$users = $data->getUsers();				echo "<tr><th class=\"data left required\">{$lang['strowner']}</th>\n";				echo "<td class=\"data1\"><select name=\"owner\">";				while (!$users->EOF) {					$uname = $users->fields['usename'];					echo "<option value=\"", htmlspecialchars($uname), "\"",					($uname == $_POST['owner']) ? ' selected="selected"' : '', ">", htmlspecialchars($uname), "</option>\n";					$users->moveNext();				}				echo "</select></td></tr>\n";			}						if ($data->hasAlterSequenceSchema()) {				$schemas = $data->getSchemas();				echo "<tr><th class=\"data left required\">{$lang['strschema']}</th>\n";				echo "<td class=\"data1\"><select name=\"newschema\">";				while (!$schemas->EOF) {					$schema = $schemas->fields['nspname'];					echo "<option value=\"", htmlspecialchars($schema), "\"",						($schema == $_POST['newschema']) ? ' selected="selected"' : '', ">", htmlspecialchars($schema), "</option>\n";					$schemas->moveNext();				}			    echo "</select></td></tr>\n";			}			echo "<tr><th class=\"data left\">{$lang['strcomment']}</th>\n";			echo "<td class=\"data1\">";			echo "<textarea rows=\"3\" cols=\"32\" name=\"comment\">",				htmlspecialchars($_POST['comment']), "</textarea></td></tr>\n";			if ($data->hasAlterSequenceStart()) {				echo "<tr><th class=\"data left\">{$lang['strstartvalue']}</th>\n";				echo "<td class=\"data1\"><input name=\"formStartValue\" size=\"5\" value=\"",					htmlspecialchars($sequence->fields['start_value']), "\" /></td></tr>\n";			}			echo "<tr><th class=\"data left\">{$lang['strrestartvalue']}</th>\n";			echo "<td class=\"data1\"><input name=\"formRestartValue\" size=\"5\" value=\"",				htmlspecialchars($sequence->fields['last_value']), "\" /></td></tr>\n";			echo "<tr><th class=\"data left\">{$lang['strincrementby']}</th>\n";			echo "<td class=\"data1\"><input name=\"formIncrement\" size=\"5\" value=\"",				htmlspecialchars($sequence->fields['increment_by']), "\" /> </td></tr>\n";			echo "<tr><th class=\"data left\">{$lang['strmaxvalue']}</th>\n";			echo "<td class=\"data1\"><input name=\"formMaxValue\" size=\"5\" value=\"",				htmlspecialchars($sequence->fields['max_value']), "\" /></td></tr>\n";			echo "<tr><th class=\"data left\">{$lang['strminvalue']}</th>\n";			echo "<td class=\"data1\"><input name=\"formMinValue\" size=\"5\" value=\"",				htmlspecialchars($sequence->fields['min_value']), "\" /></td></tr>\n";			echo "<tr><th class=\"data left\">{$lang['strcachevalue']}</th>\n";			echo "<td class=\"data1\"><input name=\"formCacheValue\" size=\"5\" value=\"",				htmlspecialchars($sequence->fields['cache_value']), "\" /></td></tr>\n";			echo "<tr><th class=\"data left\"><label for=\"formCycledValue\">{$lang['strcancycle']}</label></th>\n";			echo "<td class=\"data1\"><input type=\"checkbox\" id=\"formCycledValue\" name=\"formCycledValue\" ",				( isset($_POST['formCycledValue']) ? ' checked="checked"' : ''), " /></td></tr>\n";			echo "</table>\n";			echo "<p><input type=\"hidden\" name=\"action\" value=\"alter\" />\n";			echo $misc->form;			echo "<input type=\"hidden\" name=\"sequence\" value=\"", htmlspecialchars($_REQUEST['sequence']), "\" />\n";			echo "<input type=\"submit\" name=\"alter\" value=\"{$lang['stralter']}\" />\n";			echo "<input type=\"submit\" name=\"cancel\" value=\"{$lang['strcancel']}\" /></p>\n";			echo "</form>\n";		}		else echo "<p>{$lang['strnodata']}</p>\n";	}	if ($action == 'tree') doTree();	// Print header	$misc->printHeader($lang['strsequences']);	$misc->printBody();	switch($action) {		case 'create':			doCreateSequence();			break;		case 'save_create_sequence':			if (isset($_POST['create'])) doSaveCreateSequence();			else doDefault();			break;		case 'properties':			doProperties();			break;		case 'drop':			if (isset($_POST['drop'])) doDrop(false);			else doDefault();			break;		case 'confirm_drop':			doDrop(true);			break;		case 'restart':			doRestart();			break;		case 'reset':			doReset();			break;		case 'nextval':			doNextval();			break;		case 'setval':			if (isset($_POST['setval'])) doSaveSetval();			else doDefault();			break;		case 'confirm_setval':			doSetval();			break;		case 'alter':			if (isset($_POST['alter'])) doSaveAlter();			else doDefault();			break;		case 'confirm_alter':			doAlter();			break;		default:			doDefault();			break;	}	// Print footer	$misc->printFooter();?>
<?php	/**	 * Manage domains in a database	 *	 * $Id: domains.php,v 1.34 2007/09/13 13:41:01 ioguix Exp $	 */	// Include application functions	include_once('./libraries/lib.inc.php');		$action = (isset($_REQUEST['action'])) ? $_REQUEST['action'] : '';	if (!isset($msg)) $msg = '';		/** 	 * Function to save after altering a domain	 */	function doSaveAlter() {		global $data, $lang;				$status = $data->alterDomain($_POST['domain'], $_POST['domdefault'], 			isset($_POST['domnotnull']), $_POST['domowner']);		if ($status == 0)			doProperties($lang['strdomainaltered']);		else			doAlter($lang['strdomainalteredbad']);	}	/**	 * Allow altering a domain	 */	function doAlter($msg = '') {		global $data, $misc;		global $lang;			$misc->printTrail('domain');		$misc->printTitle($lang['stralter'],'pg.domain.alter');		$misc->printMsg($msg);				// Fetch domain info		$domaindata = $data->getDomain($_REQUEST['domain']);		// Fetch all users		$users = $data->getUsers();				if ($domaindata->recordCount() > 0) {			if (!isset($_POST['domname'])) {								$_POST['domtype'] = $domaindata->fields['domtype'];				$_POST['domdefault'] = $domaindata->fields['domdef'];				$domaindata->fields['domnotnull'] = $data->phpBool($domaindata->fields['domnotnull']);				if ($domaindata->fields['domnotnull']) $_POST['domnotnull'] = 'on';				$_POST['domowner'] = $domaindata->fields['domowner'];			}						// Display domain info			echo "<form action=\"domains.php\" method=\"post\">\n";			echo "<table>\n";			echo "<tr><th class=\"data left required\" style=\"width: 70px\">{$lang['strname']}</th>\n";			echo "<td class=\"data1\">", $misc->printVal($domaindata->fields['domname']), "</td></tr>\n";			echo "<tr><th class=\"data left required\">{$lang['strtype']}</th>\n";			echo "<td class=\"data1\">", $misc->printVal($domaindata->fields['domtype']), "</td></tr>\n";			echo "<tr><th class=\"data left\"><label for=\"domnotnull\">{$lang['strnotnull']}</label></th>\n";			echo "<td class=\"data1\"><input type=\"checkbox\" id=\"domnotnull\" name=\"domnotnull\"", (isset($_POST['domnotnull']) ? ' checked="checked"' : ''), " /></td></tr>\n";			echo "<tr><th class=\"data left\">{$lang['strdefault']}</th>\n";			echo "<td class=\"data1\"><input name=\"domdefault\" size=\"32\" value=\"", 				htmlspecialchars($_POST['domdefault']), "\" /></td></tr>\n";			echo "<tr><th class=\"data left required\">{$lang['strowner']}</th>\n";			echo "<td class=\"data1\"><select name=\"domowner\">";			while (!$users->EOF) {				$uname = $users->fields['usename'];				echo "<option value=\"", htmlspecialchars($uname), "\"",					($uname == $_POST['domowner']) ? ' selected="selected"' : '', ">", htmlspecialchars($uname), "</option>\n";				$users->moveNext();			}			echo "</select></td></tr>\n";							echo "</table>\n";			echo "<p><input type=\"hidden\" name=\"action\" value=\"save_alter\" />\n";			echo "<input type=\"hidden\" name=\"domain\" value=\"", htmlspecialchars($_REQUEST['domain']), "\" />\n";			echo $misc->form;			echo "<input type=\"submit\" name=\"alter\" value=\"{$lang['stralter']}\" />\n";			echo "<input type=\"submit\" name=\"cancel\" value=\"{$lang['strcancel']}\" /></p>\n";			echo "</form>\n";		}		else echo "<p>{$lang['strnodata']}</p>\n";	}		/**	 * Confirm and then actually add a CHECK constraint	 */	function addCheck($confirm, $msg = '') {		global $data, $misc;		global $lang;		if (!isset($_POST['name'])) $_POST['name'] = '';		if (!isset($_POST['definition'])) $_POST['definition'] = '';		if ($confirm) {			$misc->printTrail('domain');			$misc->printTitle($lang['straddcheck'],'pg.constraint.check');			$misc->printMsg($msg);			echo "<form action=\"domains.php\" method=\"post\">\n";			echo "<table>\n";			echo "<tr><th class=\"data\">{$lang['strname']}</th>\n";			echo "<th class=\"data required\">{$lang['strdefinition']}</th></tr>\n";			echo "<tr><td class=\"data1\"><input name=\"name\" size=\"16\" maxlength=\"{$data->_maxNameLen}\" value=\"",				htmlspecialchars($_POST['name']), "\" /></td>\n";			echo "<td class=\"data1\">(<input name=\"definition\" size=\"32\" value=\"",				htmlspecialchars($_POST['definition']), "\" />)</td></tr>\n";			echo "</table>\n";			echo "<p><input type=\"hidden\" name=\"action\" value=\"save_add_check\" />\n";			echo "<input type=\"hidden\" name=\"domain\" value=\"", htmlspecialchars($_REQUEST['domain']), "\" />\n";			echo $misc->form;			echo "<input type=\"submit\" name=\"add\" value=\"{$lang['stradd']}\" />\n";			echo "<input type=\"submit\" name=\"cancel\" value=\"{$lang['strcancel']}\" /></p>\n";			echo "</form>\n";		}		else {			if (trim($_POST['definition']) == '')				addCheck(true, $lang['strcheckneedsdefinition']);			else {				$status = $data->addDomainCheckConstraint($_POST['domain'],					$_POST['definition'], $_POST['name']);				if ($status == 0)					doProperties($lang['strcheckadded']);				else					addCheck(true, $lang['strcheckaddedbad']);			}		}	}	/**	 * Show confirmation of drop constraint and perform actual drop	 */	function doDropConstraint($confirm, $msg = '') {		global $data, $misc;		global $lang;		if ($confirm) {			$misc->printTrail('domain');			$misc->printTitle($lang['strdrop'],'pg.constraint.drop');			$misc->printMsg($msg);						echo "<p>", sprintf($lang['strconfdropconstraint'], $misc->printVal($_REQUEST['constraint']), 				$misc->printVal($_REQUEST['domain'])), "</p>\n";				echo "<form action=\"domains.php\" method=\"post\">\n";			echo "<input type=\"hidden\" name=\"action\" value=\"drop_con\" />\n";			echo "<input type=\"hidden\" name=\"domain\" value=\"", htmlspecialchars($_REQUEST['domain']), "\" />\n";			echo "<input type=\"hidden\" name=\"constraint\" value=\"", htmlspecialchars($_REQUEST['constraint']), "\" />\n";			echo $misc->form;			echo "<p><input type=\"checkbox\" id=\"cascade\" name=\"cascade\" /> <label for=\"cascade\">{$lang['strcascade']}</label></p>\n";			echo "<input type=\"submit\" name=\"drop\" value=\"{$lang['strdrop']}\" />\n";			echo "<input type=\"submit\" name=\"cancel\" value=\"{$lang['strcancel']}\" />\n";			echo "</form>\n";		}		else {			$status = $data->dropDomainConstraint($_POST['domain'], $_POST['constraint'], isset($_POST['cascade']));			if ($status == 0)				doProperties($lang['strconstraintdropped']);			else				doDropConstraint(true, $lang['strconstraintdroppedbad']);		}			}		/**	 * Show properties for a domain.  Allow manipulating constraints as well.	 */	function doProperties($msg = '') {		global $data, $misc;		global $lang;			$misc->printTrail('domain');		$misc->printTitle($lang['strproperties'],'pg.domain');		$misc->printMsg($msg);				$domaindata = $data->getDomain($_REQUEST['domain']);				if ($domaindata->recordCount() > 0) {			// Show comment if any			if ($domaindata->fields['domcomment'] !== null)				echo "<p class=\"comment\">", $misc->printVal($domaindata->fields['domcomment']), "</p>\n";			// Display domain info			$domaindata->fields['domnotnull'] = $data->phpBool($domaindata->fields['domnotnull']);			echo "<table>\n";			echo "<tr><th class=\"data left\" style=\"width: 70px\">{$lang['strname']}</th>\n";			echo "<td class=\"data1\">", $misc->printVal($domaindata->fields['domname']), "</td></tr>\n";			echo "<tr><th class=\"data left\">{$lang['strtype']}</th>\n";			echo "<td class=\"data1\">", $misc->printVal($domaindata->fields['domtype']), "</td></tr>\n";			echo "<tr><th class=\"data left\">{$lang['strnotnull']}</th>\n";			echo "<td class=\"data1\">", ($domaindata->fields['domnotnull'] ? 'NOT NULL' : ''), "</td></tr>\n";			echo "<tr><th class=\"data left\">{$lang['strdefault']}</th>\n";			echo "<td class=\"data1\">", $misc->printVal($domaindata->fields['domdef']), "</td></tr>\n";			echo "<tr><th class=\"data left\">{$lang['strowner']}</th>\n";			echo "<td class=\"data1\">", $misc->printVal($domaindata->fields['domowner']), "</td></tr>\n";			echo "</table>\n";						// Display domain constraints			if ($data->hasDomainConstraints()) {				$domaincons = $data->getDomainConstraints($_REQUEST['domain']);				if ($domaincons->recordCount() > 0) {					echo "<h3>{$lang['strconstraints']}</h3>\n";					echo "<table>\n";					echo "<tr><th class=\"data\">{$lang['strname']}</th><th class=\"data\">{$lang['strdefinition']}</th><th class=\"data\">{$lang['stractions']}</th>\n";					$i = 0;										while (!$domaincons->EOF) {						$id = (($i % 2 ) == 0 ? '1' : '2');						echo "<tr class=\"data{$id}\"><td>", $misc->printVal($domaincons->fields['conname']), "</td>";						echo "<td>";						echo $misc->printVal($domaincons->fields['consrc']);						echo "</td>";						echo "<td class=\"opbutton{$id}\">";						echo "<a href=\"domains.php?action=confirm_drop_con&amp;{$misc->href}&amp;constraint=", urlencode($domaincons->fields['conname']),							"&amp;domain=", urlencode($_REQUEST['domain']), "&amp;type=", urlencode($domaincons->fields['contype']), "\">{$lang['strdrop']}</a></td></tr>\n";								$domaincons->moveNext();						$i++;					}										echo "</table>\n";				}			}		}		else echo "<p>{$lang['strnodata']}</p>\n";				echo "<ul class=\"navlink\">\n\t<li><a href=\"domains.php?action=confirm_drop&amp;{$misc->href}&amp;domain=", urlencode($_REQUEST['domain']),"\">{$lang['strdrop']}</a></li>\n";		if ($data->hasAlterDomains()) {			echo "\t<li><a href=\"domains.php?action=add_check&amp;{$misc->href}&amp;domain=", urlencode($_REQUEST['domain']),				"\">{$lang['straddcheck']}</a></li>\n";			echo "\t<li><a href=\"domains.php?action=alter&amp;{$misc->href}&amp;domain=", 				urlencode($_REQUEST['domain']), "\">{$lang['stralter']}</a></li>\n";		}		echo "</ul>\n";	}		/**	 * Show confirmation of drop and perform actual drop	 */	function doDrop($confirm) {		global $data, $misc;		global $lang;		if ($confirm) {			$misc->printTrail('domain');			$misc->printTitle($lang['strdrop'],'pg.domain.drop');						echo "<p>", sprintf($lang['strconfdropdomain'], $misc->printVal($_REQUEST['domain'])), "</p>\n";				echo "<form action=\"domains.php\" method=\"post\">\n";			echo "<p><input type=\"checkbox\" id=\"cascade\" name=\"cascade\" /><label for=\"cascade\">{$lang['strcascade']}</label></p>\n";			echo "<p><input type=\"hidden\" name=\"action\" value=\"drop\" />\n";			echo "<input type=\"hidden\" name=\"domain\" value=\"", htmlspecialchars($_REQUEST['domain']), "\" />\n";			echo $misc->form;			echo "<input type=\"submit\" name=\"drop\" value=\"{$lang['strdrop']}\" />\n";			echo "<input type=\"submit\" name=\"cancel\" value=\"{$lang['strcancel']}\" /></p>\n";			echo "</form>\n";		}		else {			$status = $data->dropDomain($_POST['domain'], isset($_POST['cascade']));			if ($status == 0)				doDefault($lang['strdomaindropped']);			else				doDefault($lang['strdomaindroppedbad']);		}			}		/**	 * Displays a screen where they can enter a new domain	 */	function doCreate($msg = '') {		global $data, $misc;		global $lang;				if (!isset($_POST['domname'])) $_POST['domname'] = '';		if (!isset($_POST['domtype'])) $_POST['domtype'] = '';		if (!isset($_POST['domlength'])) $_POST['domlength'] = '';		if (!isset($_POST['domarray'])) $_POST['domarray'] = '';		if (!isset($_POST['domdefault'])) $_POST['domdefault'] = '';		if (!isset($_POST['domcheck'])) $_POST['domcheck'] = '';		$types = $data->getTypes(true);				$misc->printTrail('schema');		$misc->printTitle($lang['strcreatedomain'],'pg.domain.create');		$misc->printMsg($msg);		echo "<form action=\"domains.php\" method=\"post\">\n";		echo "<table>\n";		echo "<tr><th class=\"data left required\" style=\"width: 70px\">{$lang['strname']}</th>\n";		echo "<td class=\"data1\"><input name=\"domname\" size=\"32\" maxlength=\"{$data->_maxNameLen}\" value=\"", 			htmlspecialchars($_POST['domname']), "\" /></td></tr>\n";		echo "<tr><th class=\"data left required\">{$lang['strtype']}</th>\n";		echo "<td class=\"data1\">\n";		// Output return type list				echo "<select name=\"domtype\">\n";		while (!$types->EOF) {			echo "<option value=\"", htmlspecialchars($types->fields['typname']), "\"", 				($types->fields['typname'] == $_POST['domtype']) ? ' selected="selected"' : '', ">",				$misc->printVal($types->fields['typname']), "</option>\n";			$types->moveNext();		}		echo "</select>\n";				// Type length		echo "<input type=\"text\" size=\"4\" name=\"domlength\" value=\"", htmlspecialchars($_POST['domlength']), "\" />";		// Output array type selector		echo "<select name=\"domarray\">\n";		echo "<option value=\"\"", ($_POST['domarray'] == '') ? ' selected="selected"' : '', "></option>\n";		echo "<option value=\"[]\"", ($_POST['domarray'] == '[]') ? ' selected="selected"' : '', ">[ ]</option>\n";		echo "</select></td></tr>\n";		echo "<tr><th class=\"data left\"><label for=\"domnotnull\">{$lang['strnotnull']}</label></th>\n";		echo "<td class=\"data1\"><input type=\"checkbox\" id=\"domnotnull\" name=\"domnotnull\"", 			(isset($_POST['domnotnull']) ? ' checked="checked"' : ''), " /></td></tr>\n";		echo "<tr><th class=\"data left\">{$lang['strdefault']}</th>\n";		echo "<td class=\"data1\"><input name=\"domdefault\" size=\"32\" value=\"", 			htmlspecialchars($_POST['domdefault']), "\" /></td></tr>\n";		if ($data->hasDomainConstraints()) {			echo "<tr><th class=\"data left\">{$lang['strconstraints']}</th>\n";			echo "<td class=\"data1\">CHECK (<input name=\"domcheck\" size=\"32\" value=\"", 				htmlspecialchars($_POST['domcheck']), "\" />)</td></tr>\n";		}		echo "</table>\n";		echo "<p><input type=\"hidden\" name=\"action\" value=\"save_create\" />\n";		echo $misc->form;		echo "<input type=\"submit\" value=\"{$lang['strcreate']}\" />\n";		echo "<input type=\"submit\" name=\"cancel\" value=\"{$lang['strcancel']}\" /></p>\n";		echo "</form>\n";	}		/**	 * Actually creates the new domain in the database	 */	function doSaveCreate() {		global $data, $lang;				if (!isset($_POST['domcheck'])) $_POST['domcheck'] = '';		// Check that they've given a name and a definition		if ($_POST['domname'] == '') doCreate($lang['strdomainneedsname']);		else {		 			$status = $data->createDomain($_POST['domname'], $_POST['domtype'], $_POST['domlength'], $_POST['domarray'] != '',																isset($_POST['domnotnull']), $_POST['domdefault'], $_POST['domcheck']);			if ($status == 0)				doDefault($lang['strdomaincreated']);			else				doCreate($lang['strdomaincreatedbad']);		}	}		/**	 * Show default list of domains in the database	 */	function doDefault($msg = '') {		global $data, $conf, $misc;		global $lang;				$misc->printTrail('schema');		$misc->printTabs('schema','domains');		$misc->printMsg($msg);				$domains = $data->getDomains();				$columns = array(			'domain' => array(				'title' => $lang['strdomain'],				'field' => field('domname'),				'url' => "domains.php?action=properties&amp;{$misc->href}&amp;",				'vars'  => array('domain' => 'domname'),			),			'type' => array(				'title' => $lang['strtype'],				'field' => field('domtype'),			),			'notnull' => array(				'title' => $lang['strnotnull'],				'field' => field('domnotnull'),				'type'  => 'bool',				'params'=> array('true' => 'NOT NULL', 'false' => ''),			),			'default' => array(				'title' => $lang['strdefault'],				'field' => field('domdef'),			),			'owner' => array(				'title' => $lang['strowner'],				'field' => field('domowner'),			),			'actions' => array(				'title' => $lang['stractions'],			),			'comment' => array(				'title' => $lang['strcomment'],				'field' => field('domcomment'),			),		);				$actions = array(			'alter' => array(				'title'	=> $lang['stralter'],				'url'	=> "domains.php?action=alter&amp;{$misc->href}&amp;",				'vars'	=> array('domain' => 'domname'),			),			'drop' => array(				'title'	=> $lang['strdrop'],				'url'	=> "domains.php?action=confirm_drop&amp;{$misc->href}&amp;",				'vars'	=> array('domain' => 'domname'),			),		);		if (!$data->hasAlterDomains()) unset($actions['alter']);				$misc->printTable($domains, $columns, $actions, $lang['strnodomains']);				echo "<p><a class=\"navlink\" href=\"domains.php?action=create&amp;{$misc->href}\">{$lang['strcreatedomain']}</a></p>\n";	}		/**	 * Generate XML for the browser tree.	 */	function doTree() {		global $misc, $data;				$domains = $data->getDomains();				$reqvars = $misc->getRequestVars('domain');				$attrs = array(			'text'   => field('domname'),			'icon'   => 'Domain',			'toolTip'=> field('domcomment'),			'action' => url('domains.php',							$reqvars,							array(								'action' => 'properties',								'domain' => field('domname')							)						)		);				$misc->printTreeXML($domains, $attrs);		exit;	}		if ($action == 'tree') doTree();	$misc->printHeader($lang['strdomains']);	$misc->printBody();	switch ($action) {		case 'add_check':			addCheck(true);			break;		case 'save_add_check':			if (isset($_POST['cancel'])) doProperties();			else addCheck(false);			break;		case 'drop_con':			if (isset($_POST['drop'])) doDropConstraint(false);			else doProperties();			break;		case 'confirm_drop_con':			doDropConstraint(true);			break;					case 'save_create':			if (isset($_POST['cancel'])) doDefault();			else doSaveCreate();			break;		case 'create':			doCreate();			break;		case 'drop':			if (isset($_POST['drop'])) doDrop(false);			else doDefault();			break;		case 'confirm_drop':			doDrop(true);			break;					case 'save_alter':			if (isset($_POST['alter'])) doSaveAlter();			else doProperties();			break;		case 'alter':			doAlter();			break;		case 'properties':			doProperties();			break;		default:			doDefault();			break;	}		$misc->printFooter();	?>
<?php/** * Class to represent a database connection * * $Id: Connection.php,v 1.15 2008/02/18 21:42:47 ioguix Exp $ */include_once('./classes/database/ADODB_base.php');class Connection {	var $conn;		// The backend platform.  Set to UNKNOWN by default.	var $platform = 'UNKNOWN';		/**	 * Creates a new connection.  Will actually make a database connection.	 * @param $fetchMode Defaults to associative.  Override for different behaviour	 */	function Connection($host, $port, $sslmode, $user, $password, $database, $fetchMode = ADODB_FETCH_ASSOC) {		$this->conn = &ADONewConnection('postgres7');		$this->conn->setFetchMode($fetchMode);		// Ignore host if null		if ($host === null || $host == '')			if ($port !== null && $port != '')				$pghost = ':'.$port;			else				$pghost = '';		else			$pghost = "{$host}:{$port}";		// Add sslmode to $pghost as needed                if (($sslmode == 'disable') || ($sslmode == 'allow') || ($sslmode == 'prefer') || ($sslmode == 'require')) {                        $pghost .= ':'.$sslmode;                } elseif ($sslmode == 'legacy') {                        $pghost .= ' requiressl=1';                }		$this->conn->connect($pghost, $user, $password, $database);	}	/**	 * Gets the name of the correct database driver to use.  As a side effect,	 * sets the platform.	 * @param (return-by-ref) $description A description of the database and version	 * @return The class name of the driver eg. Postgres84	 * @return null if version is < 7.4	 * @return -3 Database-specific failure	 */	function getDriver(&$description) {		// If we're on a recent enough PHP 5, and against PostgreSQL 7.4 or		// higher, we don't need to query for the version.  This gives a great		// speed up.						if (function_exists('pg_version')) {			$v = pg_version($this->conn->_connectionID);			if (isset($v['server'])) $version = $v['server'];					}				// If we didn't manage to get the version without a query, query...		if (!isset($version)) {			$adodb = new ADODB_base($this->conn);				$sql = "SELECT VERSION() AS version";			$field = $adodb->selectField($sql, 'version');				// Check the platform, if it's mingw, set it			if (preg_match('/ mingw /i', $field))				$this->platform = 'MINGW';				$params = explode(' ', $field);			if (!isset($params[1])) return -3;				$version = $params[1]; // eg. 8.4.4		}				$description = "PostgreSQL {$version}";		// Detect version and choose appropriate database driver		switch (substr($version,0,3)) {			case '8.4': return 'Postgres'; break;			case '8.3': return 'Postgres83'; break;			case '8.2': return 'Postgres82'; break;			case '8.1': return 'Postgres81'; break;			case '8.0':			case '7.5': return 'Postgres80'; break;			case '7.4': return 'Postgres74'; break;		}		/* All <7.4 versions are not supported */		// if major version is 7 or less and wasn't catch in the		// switch/case block, we have an unsupported version.		if ((int)substr($version, 0, 1) < 8)			return null;		// If unknown version, then default to latest driver		return 'Postgres';	}	/** 	 * Get the last error in the connection	 * @return Error string	 */	function getLastError() {				if (function_exists('pg_errormessage'))			return pg_errormessage($this->conn->_connectionID);		else			return pg_last_error($this->conn->_connectionID);	}}?>
<?php/** * PostgreSQL 8.0 support * * $Id: Postgres80.php,v 1.28 2007/12/12 04:11:10 xzilla Exp $ */include_once('./classes/database/Postgres81.php');class Postgres80 extends Postgres81 {	var $major_version = 8.0;	// Map of database encoding names to HTTP encoding names.  If a	// database encoding does not appear in this list, then its HTTP	// encoding name is the same as its database encoding name.	var $codemap = array(		'ALT' => 'CP866',		'EUC_CN' => 'GB2312',		'EUC_JP' => 'EUC-JP',		'EUC_KR' => 'EUC-KR',		'EUC_TW' => 'EUC-TW',		'ISO_8859_5' => 'ISO-8859-5',		'ISO_8859_6' => 'ISO-8859-6',		'ISO_8859_7' => 'ISO-8859-7',		'ISO_8859_8' => 'ISO-8859-8',		'JOHAB' => 'CP1361',		'KOI8' => 'KOI8-R',		'LATIN1' => 'ISO-8859-1',		'LATIN2' => 'ISO-8859-2',		'LATIN3' => 'ISO-8859-3',		'LATIN4' => 'ISO-8859-4',		// The following encoding map is a known error in PostgreSQL < 7.2		// See the constructor for Postgres72.		'LATIN5' => 'ISO-8859-5',		'LATIN6' => 'ISO-8859-10',		'LATIN7' => 'ISO-8859-13',		'LATIN8' => 'ISO-8859-14',		'LATIN9' => 'ISO-8859-15',		'LATIN10' => 'ISO-8859-16',		'SQL_ASCII' => 'US-ASCII',		'TCVN' => 'CP1258',		'UNICODE' => 'UTF-8',		'WIN' => 'CP1251',		'WIN874' => 'CP874',		'WIN1256' => 'CP1256'	);	/**	 * Constructor	 * @param $conn The database connection	 */	function Postgres80($conn) {		$this->Postgres81($conn);	}	// Help functions	function getHelpPages() {		include_once('./help/PostgresDoc80.php');		return $this->help_page;	}	// Database functions	/**	 * Return all database available on the server	 * @return A list of databases, sorted alphabetically	 */	function getDatabases($currentdatabase = NULL) {		global $conf, $misc;		$server_info = $misc->getServerInfo();		if (isset($conf['owned_only']) && $conf['owned_only'] && !$this->isSuperUser($server_info['username'])) {			$username = $server_info['username'];			$this->clean($username);			$clause = " AND pu.usename='{$username}'";		}		else $clause = '';		if ($currentdatabase != NULL) {			$this->clean($currentdatabase);			$orderby = "ORDER BY pdb.datname = '{$currentdatabase}' DESC, pdb.datname";		}		else			$orderby = "ORDER BY pdb.datname";		if (!$conf['show_system'])			$where = ' AND NOT pdb.datistemplate';		else			$where = ' AND pdb.datallowconn';		$sql = "SELECT pdb.datname AS datname, pu.usename AS datowner, pg_encoding_to_char(encoding) AS datencoding,                               (SELECT description FROM pg_description pd WHERE pdb.oid=pd.objoid) AS datcomment,                               (SELECT spcname FROM pg_catalog.pg_tablespace pt WHERE pt.oid=pdb.dattablespace) AS tablespace                        FROM pg_database pdb, pg_user pu			WHERE pdb.datdba = pu.usesysid			{$where}			{$clause}			{$orderby}";		return $this->selectSet($sql);	}	// Schema functions	/**	 * Return all schemas in the current database.	 * @return All schemas, sorted alphabetically	 */	function getSchemas() {		global $conf, $slony;		if (!$conf['show_system']) {			$where = "WHERE nspname NOT LIKE 'pg@_%' ESCAPE '@' AND nspname != 'information_schema'";			if (isset($slony) && $slony->isEnabled()) {				$temp = $slony->slony_schema;				$this->clean($temp);				$where .= " AND nspname != '{$temp}'";			}		}		else $where = "WHERE nspname !~ '^pg_t(emp_[0-9]+|oast)$'";		$sql = "			SELECT pn.nspname, pu.usename AS nspowner,				pg_catalog.obj_description(pn.oid, 'pg_namespace') AS nspcomment			FROM pg_catalog.pg_namespace pn				LEFT JOIN pg_catalog.pg_user pu ON (pn.nspowner = pu.usesysid)			{$where}			ORDER BY nspname";		return $this->selectSet($sql);	}	/**	 * Return all information relating to a schema	 * @param $schema The name of the schema	 * @return Schema information	 */	function getSchemaByName($schema) {		$this->clean($schema);		$sql = "			SELECT nspname, nspowner, u.usename AS ownername, nspacl,				pg_catalog.obj_description(pn.oid, 'pg_namespace') as nspcomment            FROM pg_catalog.pg_namespace pn            	LEFT JOIN pg_shadow as u ON pn.nspowner = u.usesysid			WHERE nspname='{$schema}'";		return $this->selectSet($sql);	}	// Table functions	/**	 * Protected method which alter a table	 * SHOULDN'T BE CALLED OUTSIDE OF A TRANSACTION	 * @param $tblrs The table recordSet returned by getTable()	 * @param $name The new name for the table	 * @param $owner The new owner for the table	 * @param $schema The new schema for the table	 * @param $comment The comment on the table	 * @param $tablespace The new tablespace for the table ('' means leave as is)	 * @return 0 success	 * @return -3 rename error	 * @return -4 comment error	 * @return -5 owner error	 * @return -6 tablespace error	 */	protected	function _alterTable($tblrs, $name, $owner, $schema, $comment, $tablespace) {		/* $schema not supported in pg80- */		// Comment		$status = $this->setComment('TABLE', '', $tblrs->fields['relname'], $comment);		if ($status != 0) return -4;		// Owner		$this->fieldClean($owner);		$status = $this->alterTableOwner($tblrs, $owner);		if ($status != 0) return -5;		// Tablespace		$this->fieldClean($tablespace);		$status = $this->alterTableTablespace($tblrs, $tablespace);			if ($status != 0) return -6;		// Rename		$this->fieldClean($name);		$status = $this->alterTableName($tblrs, $name);		if ($status != 0) return -3;		return 0;	}	// Constraint functions	/**	 * Returns a list of all constraints on a table,	 * including constraint name, definition, related col and referenced namespace,	 * table and col if needed	 * @param $table the table where we are looking for fk	 * @return a recordset	 */	function getConstraintsWithFields($table) {		$c_schema = $this->_schema;		$this->clean($c_schema);		$this->clean($table);		// get the max number of col used in a constraint for the table		$sql = "SELECT DISTINCT			max(SUBSTRING(array_dims(c.conkey) FROM '^\\\[.*:(.*)\\\]$')) as nb		FROM pg_catalog.pg_constraint AS c			JOIN pg_catalog.pg_class AS r ON (c.conrelid=r.oid)		    JOIN pg_catalog.pg_namespace AS ns ON (r.relnamespace=ns.oid)		WHERE			r.relname = '{$table}' AND ns.nspname='{$c_schema}'";		$rs = $this->selectSet($sql);		if ($rs->EOF) $max_col = 0;		else $max_col = $rs->fields['nb'];		$sql = '			SELECT				c.oid AS conid, c.contype, c.conname, pg_catalog.pg_get_constraintdef(c.oid, true) AS consrc,				ns1.nspname as p_schema, r1.relname as p_table, ns2.nspname as f_schema,				r2.relname as f_table, f1.attname as p_field, f1.attnum AS p_attnum, f2.attname as f_field,				f2.attnum AS f_attnum, pg_catalog.obj_description(c.oid, \'pg_constraint\') AS constcomment,				c.conrelid, c.confrelid			FROM				pg_catalog.pg_constraint AS c				JOIN pg_catalog.pg_class AS r1 ON (c.conrelid=r1.oid)				JOIN pg_catalog.pg_attribute AS f1 ON (f1.attrelid=r1.oid AND (f1.attnum=c.conkey[1]';		for ($i = 2; $i <= $rs->fields['nb']; $i++) {			$sql.= " OR f1.attnum=c.conkey[$i]";		}		$sql.= '))				JOIN pg_catalog.pg_namespace AS ns1 ON r1.relnamespace=ns1.oid				LEFT JOIN (					pg_catalog.pg_class AS r2 JOIN pg_catalog.pg_namespace AS ns2 ON (r2.relnamespace=ns2.oid)				) ON (c.confrelid=r2.oid)				LEFT JOIN pg_catalog.pg_attribute AS f2 ON					(f2.attrelid=r2.oid AND ((c.confkey[1]=f2.attnum AND c.conkey[1]=f1.attnum)';		for ($i = 2; $i <= $rs->fields['nb']; $i++)			$sql.= "OR (c.confkey[$i]=f2.attnum AND c.conkey[$i]=f1.attnum)";		$sql .= sprintf("))			WHERE				r1.relname = '%s' AND ns1.nspname='%s'			ORDER BY 1", $table, $c_schema);		return $this->selectSet($sql);	}	// View functions	/**	 * Protected method which alter a view	 * SHOULDN'T BE CALLED OUTSIDE OF A TRANSACTION	 * @param $vwrs The view recordSet returned by getView()	 * @param $name The new name for the view	 * @param $owner The new owner for the view	 * @param $comment The comment on the view	 * @return 0 success	 * @return -3 rename error	 * @return -4 comment error	 * @return -5 owner error	 */	protected    function _alterView($vwrs, $name, $owner, $schema, $comment) {    	/* $schema not supported in pg80- */    	$this->fieldArrayClean($vwrs->fields);		// Comment		if ($this->setComment('VIEW', $vwrs->fields['relname'], '', $comment) != 0)			return -4;		// Owner		$this->fieldClean($owner);		$status = $this->alterViewOwner($vwrs, $owner);		if ($status != 0) return -5;		// Rename		$this->fieldClean($name);		$status = $this->alterViewName($vwrs, $name);		if ($status != 0) return -3;		return 0;	}	// Sequence functions	/**	 * Protected method which alter a sequence	 * SHOULDN'T BE CALLED OUTSIDE OF A TRANSACTION	 * @param $seqrs The sequence recordSet returned by getSequence()	 * @param $name The new name for the sequence	 * @param $comment The comment on the sequence	 * @param $owner The new owner for the sequence	 * @param $schema The new schema for the sequence	 * @param $increment The increment	 * @param $minvalue The min value	 * @param $maxvalue The max value	 * @param $restartvalue The starting value	 * @param $cachevalue The cache value	 * @param $cycledvalue True if cycled, false otherwise	 * @param $startvalue The sequence start value when issueing a restart	 * @return 0 success	 * @return -3 rename error	 * @return -4 comment error	 * @return -5 owner error	 * @return -6 get sequence props error	 * @return -7 schema error	 */	protected	function _alterSequence($seqrs, $name, $comment, $owner, $schema, $increment,	$minvalue, $maxvalue, $restartvalue, $cachevalue, $cycledvalue, $startvalue) {		/* $schema not supported in pg80- */		$this->fieldArrayClean($seqrs->fields);		// Comment		$status = $this->setComment('SEQUENCE', $seqrs->fields['seqname'], '', $comment);		if ($status != 0)			return -4;		// Owner		$this->fieldClean($owner);		$status = $this->alterSequenceOwner($seqrs, $owner);		if ($status != 0)			return -5;		// Props		$this->clean($increment);		$this->clean($minvalue);		$this->clean($maxvalue);		$this->clean($restartvalue);		$this->clean($cachevalue);		$this->clean($cycledvalue);		$this->clean($startvalue);		$status = $this->alterSequenceProps($seqrs, $increment,	$minvalue,			$maxvalue, $restartvalue, $cachevalue, $cycledvalue, null);		if ($status != 0)			return -6;		// Rename		$this->fieldClean($name);		$status = $this->alterSequenceName($seqrs, $name);		if ($status != 0)			return -3;		return 0;	}	// Role, User/group functions	/**	 * Changes a user's password	 * @param $username The username	 * @param $password The new password	 * @return 0 success	 */	function changePassword($username, $password) {		$enc = $this->_encryptPassword($username, $password);		$this->fieldClean($username);		$this->clean($enc);		$sql = "ALTER USER \"{$username}\" WITH ENCRYPTED PASSWORD '{$enc}'";		return $this->execute($sql);	}	// Aggregate functions	/**	 * Gets all information for an aggregate	 * @param $name The name of the aggregate	 * @param $basetype The input data type of the aggregate	 * @return A recordset	 */	function getAggregate($name, $basetype) {		$c_schema = $this->_schema;		$this->clean($c_schema);		$this->clean($name);		$this->clean($basetype);		$sql = "			SELECT p.proname,				CASE p.proargtypes[0]					WHEN 'pg_catalog.\"any\"'::pg_catalog.regtype THEN NULL					ELSE pg_catalog.format_type(p.proargtypes[0], NULL)				END AS proargtypes, a.aggtransfn, format_type(a.aggtranstype, NULL) AS aggstype,				a.aggfinalfn, a.agginitval, u.usename, pg_catalog.obj_description(p.oid, 'pg_proc') AS aggrcomment			FROM pg_catalog.pg_proc p, pg_catalog.pg_namespace n, pg_catalog.pg_user u, pg_catalog.pg_aggregate a			WHERE n.oid = p.pronamespace AND p.proowner=u.usesysid AND p.oid=a.aggfnoid				AND p.proisagg AND n.nspname='{$c_schema}'				AND p.proname='{$name}'				AND CASE p.proargtypes[0]					WHEN 'pg_catalog.\"any\"'::pg_catalog.regtype THEN ''					ELSE pg_catalog.format_type(p.proargtypes[0], NULL)				END ='{$basetype}'";		return $this->selectSet($sql);	}	// Capabilities	function hasAggregateSortOp() { return false; }	function hasAlterTableSchema() { return false; }	function hasAutovacuum() { return false; }	function hasDisableTriggers() { return false; }	function hasFunctionAlterSchema() { return false; }	function hasPreparedXacts() { return false; }	function hasRoles() { return false; }	function hasAlterSequenceSchema() { return false; }	function hasServerAdminFuncs() { return false; }}?>
<?php	/**	 * Manage opclasss in a database	 *	 * $Id: opclasses.php,v 1.10 2007/08/31 18:30:11 ioguix Exp $	 */	// Include application functions	include_once('./libraries/lib.inc.php');		$action = (isset($_REQUEST['action'])) ? $_REQUEST['action'] : '';	if (!isset($msg)) $msg = '';	/**	 * Show default list of opclasss in the database	 */	function doDefault($msg = '') {		global $data, $conf, $misc;		global $lang;				$misc->printTrail('schema');		$misc->printTabs('schema','opclasses');		$misc->printMsg($msg);				$opclasses = $data->getOpClasses();				$columns = array(			'accessmethod' => array(				'title' => $lang['straccessmethod'],				'field' => field('amname'),			),			'opclass' => array(				'title' => $lang['strname'],				'field' => field('opcname'),			),			'type' => array(				'title' => $lang['strtype'],				'field' => field('opcintype'),			),			'default' => array(				'title' => $lang['strdefault'],				'field' => field('opcdefault'),				'type'  => 'yesno',			),			'comment' => array(				'title' => $lang['strcomment'],				'field' => field('opccomment'),			),		);				$actions = array();				$misc->printTable($opclasses, $columns, $actions, $lang['strnoopclasses']);	}		/**	 * Generate XML for the browser tree.	 */	function doTree() {		global $misc, $data;				$opclasses = $data->getOpClasses();				// OpClass prototype: "op_class/access_method"		$proto = concat(field('opcname'),'/',field('amname'));				$attrs = array(			'text'   => $proto,			'icon'   => 'OperatorClass',			'toolTip'=> field('opccomment'),		);				$misc->printTreeXML($opclasses, $attrs);		exit;	}		if ($action == 'tree') doTree();		$misc->printHeader($lang['stropclasses']);	$misc->printBody();	switch ($action) {		default:			doDefault();			break;	}		$misc->printFooter();?>
<?php	/**	 * Manage casts in a database	 *	 * $Id: casts.php,v 1.16 2007/09/25 16:08:05 ioguix Exp $	 */	// Include application functions	include_once('./libraries/lib.inc.php');		$action = (isset($_REQUEST['action'])) ? $_REQUEST['action'] : '';	if (!isset($msg)) $msg = '';	/**	 * Show default list of casts in the database	 */	function doDefault($msg = '') {		global $data, $misc, $database;		global $lang;		function renderCastContext($val) {			global $lang;			switch ($val) {				case 'e': return $lang['strno'];				case 'a': return $lang['strinassignment'];				default: return $lang['stryes'];			}		}				$misc->printTrail('database');		$misc->printTabs('database','casts');		$misc->printMsg($msg);				$casts = $data->getCasts();		$columns = array(			'source_type' => array(				'title' => $lang['strsourcetype'],				'field' => field('castsource'),			),			'target_type' => array(				'title' => $lang['strtargettype'],				'field' => field('casttarget'),			),			'function' => array(				'title' => $lang['strfunction'],				'field' => field('castfunc'),				'params'=> array('null' => $lang['strbinarycompat']),			),			'implicit' => array(				'title' => $lang['strimplicit'],				'field' => field('castcontext'),				'type'  => 'callback',				'params'=> array('function' => 'renderCastContext', 'align' => 'center'),			),			'comment' => array(				'title' => $lang['strcomment'],				'field' => field('castcomment'),			),		);		$actions = array();				$misc->printTable($casts, $columns, $actions, $lang['strnocasts']);	}	/**	 * Generate XML for the browser tree.	 */	function doTree() {		global $misc, $data;				$casts = $data->getCasts();				$proto = concat(field('castsource'), ' AS ', field('casttarget'));				$attrs = array(			'text'   => $proto,			'icon'   => 'Cast'		);				$misc->printTreeXML($casts, $attrs);		exit;	}		if ($action == 'tree') doTree();		$misc->printHeader($lang['strcasts']);	$misc->printBody();	switch ($action) {		case 'tree':			doTree();			break;		default:			doDefault();			break;	}		$misc->printFooter();?>
<?php	/**	 * Class to hold various commonly used functions	 *	 * $Id: Misc.php,v 1.171 2008/03/17 21:35:48 ioguix Exp $	 */	class Misc {		// Tracking string to include in HREFs		var $href;		// Tracking string to include in forms		var $form;		/* Constructor */		function Misc() {		}		/**		 * Checks if dumps are properly set up		 * @param $all (optional) True to check pg_dumpall, false to just check pg_dump		 * @return True, dumps are set up, false otherwise		 */		function isDumpEnabled($all = false) {			$info = $this->getServerInfo();			return !empty($info[$all ? 'pg_dumpall_path' : 'pg_dump_path']);		}		/**		 * Sets the href tracking variable		 */		function setHREF() {			$this->href = $this->getHREF();		}		/**		 * Get a href query string, excluding objects below the given object type (inclusive)		 */		function getHREF($exclude_from = null) {			$href = '';			if (isset($_REQUEST['server']) && $exclude_from != 'server') {				$href .= 'server=' . urlencode($_REQUEST['server']);				if (isset($_REQUEST['database']) && $exclude_from != 'database') {					$href .= '&amp;database=' . urlencode($_REQUEST['database']);					if (isset($_REQUEST['schema']) && $exclude_from != 'schema') {						$href .= '&amp;schema=' . urlencode($_REQUEST['schema']);					}				}			}			return $href;		}		/**		 * Sets the form tracking variable		 */		function setForm() {			$this->form = '';			if (isset($_REQUEST['server'])) {				$this->form .= "<input type=\"hidden\" name=\"server\" value=\"" . htmlspecialchars($_REQUEST['server']) . "\" />\n";				if (isset($_REQUEST['database'])) {					$this->form .= "<input type=\"hidden\" name=\"database\" value=\"" . htmlspecialchars($_REQUEST['database']) . "\" />\n";					if (isset($_REQUEST['schema'])) {						$this->form .= "<input type=\"hidden\" name=\"schema\" value=\"" . htmlspecialchars($_REQUEST['schema']) . "\" />\n";					}				}			}		}		/**		 * Render a value into HTML using formatting rules specified		 * by a type name and parameters.		 *		 * @param $str The string to change		 *		 * @param $type Field type (optional), this may be an internal PostgreSQL type, or:		 *			yesno    - same as bool, but renders as 'Yes' or 'No'.		 *			pre      - render in a <pre> block.		 *			nbsp     - replace all spaces with &nbsp;'s		 *			verbatim - render exactly as supplied, no escaping what-so-ever.		 *			callback - render using a callback function supplied in the 'function' param.		 *		 * @param $params Type parameters (optional), known parameters:		 *			null     - string to display if $str is null, or set to TRUE to use a default 'NULL' string,		 *			           otherwise nothing is rendered.		 *			clip     - if true, clip the value to a fixed length, and append an ellipsis...		 *			cliplen  - the maximum length when clip is enabled (defaults to $conf['max_chars'])		 *			ellipsis - the string to append to a clipped value (defaults to $lang['strellipsis'])		 *			tag      - an HTML element name to surround the value.		 *			class    - a class attribute to apply to any surrounding HTML element.		 *			align    - an align attribute ('left','right','center' etc.)		 *			true     - (type='bool') the representation of true.		 *			false    - (type='bool') the representation of false.		 *			function - (type='callback') a function name, accepts args ($str, $params) and returns a rendering.		 *			lineno   - prefix each line with a line number.		 *			map      - an associative array.		 *		 * @return The HTML rendered value		 */		function printVal($str, $type = null, $params = array()) {			global $lang, $conf, $data;			// Shortcircuit for a NULL value			if (is_null($str))				return isset($params['null'])						? ($params['null'] === true ? '<i>NULL</i>' : $params['null'])						: '';			if (isset($params['map']) && isset($params['map'][$str])) $str = $params['map'][$str];			// Clip the value if the 'clip' parameter is true.			if (isset($params['clip']) && $params['clip'] === true) {				$maxlen = isset($params['cliplen']) && is_integer($params['cliplen']) ? $params['cliplen'] : $conf['max_chars'];				$ellipsis = isset($params['ellipsis']) ? $params['ellipsis'] : $lang['strellipsis'];				if (strlen($str) > $maxlen) {					$str = substr($str, 0, $maxlen-1) . $ellipsis;				}			}			$out = '';			switch ($type) {				case 'int2':				case 'int4':				case 'int8':				case 'float4':				case 'float8':				case 'money':				case 'numeric':				case 'oid':				case 'xid':				case 'cid':				case 'tid':					$align = 'right';					$out = nl2br(htmlspecialchars($str));					break;				case 'yesno':					if (!isset($params['true'])) $params['true'] = $lang['stryes'];					if (!isset($params['false'])) $params['false'] = $lang['strno'];					// No break - fall through to boolean case.				case 'bool':				case 'boolean':					if (is_bool($str)) $str = $str ? 't' : 'f';					switch ($str) {						case 't':							$out = (isset($params['true']) ? $params['true'] : $lang['strtrue']);							$align = 'center';							break;						case 'f':							$out = (isset($params['false']) ? $params['false'] : $lang['strfalse']);							$align = 'center';							break;						default:							$out = htmlspecialchars($str);					}					break;				case 'bytea':					$tag = 'div';					$class = 'pre';					$out = $data->escapeBytea($str);					break;				case 'errormsg':					$tag = 'pre';					$class = 'error';					$out = htmlspecialchars($str);					break;				case 'pre':					$tag = 'pre';					$out = htmlspecialchars($str);					break;				case 'prenoescape':					$tag = 'pre';					$out = $str;					break;				case 'nbsp':					$out = nl2br(str_replace(' ', '&nbsp;', htmlspecialchars($str)));					break;				case 'verbatim':					$out = $str;					break;				case 'callback':					$out = $params['function']($str, $params);					break;				case 'prettysize':					if ($str == -1) 						$out = $lang['strnoaccess'];					else					{						$limit = 10 * 1024;						$mult = 1;						if ($str < $limit * $mult)							$out = $str.' '.$lang['strbytes'];						else						{							$mult *= 1024;							if ($str < $limit * $mult)								$out = floor(($str + $mult / 2) / $mult).' '.$lang['strkb'];							else							{								$mult *= 1024;								if ($str < $limit * $mult)									$out = floor(($str + $mult / 2) / $mult).' '.$lang['strmb'];								else								{									$mult *= 1024;									if ($str < $limit * $mult)										$out = floor(($str + $mult / 2) / $mult).' '.$lang['strgb'];									else									{										$mult *= 1024;										if ($str < $limit * $mult)											$out = floor(($str + $mult / 2) / $mult).' '.$lang['strtb'];									}								}							}						}					}					break;				case 'slonystatus':					switch ($str) {					case 'insync':						$out = $lang['strhealthy'];						break;					case 'outofsync':						$out = $lang['stroutofsync'];						break;					default:						$out = $lang['strunknown'];					}					break;				default:					// If the string contains at least one instance of >1 space in a row, a tab					// character, a space at the start of a line, or a space at the start of					// the whole string then render within a pre-formatted element (<pre>).					if (preg_match('/(^ |  |\t|\n )/m', $str)) {						$tag = 'pre';						$class = 'data';						$out = htmlspecialchars($str);					} else {						$out = nl2br(htmlspecialchars($str));					}			}			if (isset($params['class'])) $class = $params['class'];			if (isset($params['align'])) $align = $params['align'];			if (!isset($tag) && (isset($class) || isset($align))) $tag = 'div';			if (isset($tag)) {				$alignattr = isset($align) ? " style=\"text-align: {$align}\"" : '';				$classattr = isset($class) ? " class=\"{$class}\"" : '';				$out = "<{$tag}{$alignattr}{$classattr}>{$out}</{$tag}>";			}			// Add line numbers if 'lineno' param is true			if (isset($params['lineno']) && $params['lineno'] === true) {				$lines = explode("\n", $str);				$num = count($lines);				if ($num > 0) {					$temp = "<table>\n<tr><td class=\"{$class}\" style=\"vertical-align: top; padding-right: 10px;\"><pre class=\"{$class}\">";					for ($i = 1; $i <= $num; $i++) {						$temp .= $i . "\n";					}					$temp .= "</pre></td><td class=\"{$class}\" style=\"vertical-align: top;\">{$out}</td></tr></table>\n";					$out = $temp;				}				unset($lines);			}			return $out;		}		/**		 * A function to recursively strip slashes.  Used to		 * enforce magic_quotes_gpc being off.		 * @param &var The variable to strip		 */		function stripVar(&$var) {			if (is_array($var)) {				foreach($var as $k => $v) {					$this->stripVar($var[$k]);					/* magic_quotes_gpc escape keys as well ...*/					if (is_string($k)) {						$ek = stripslashes($k);						if ($ek !== $k) {							$var[$ek] = $var[$k];							unset($var[$k]);						}					}				}			}			else				$var = stripslashes($var);		}		/**		 * Print out the page heading and help link		 * @param $title Title, already escaped		 * @param $help (optional) The identifier for the help link		 */		function printTitle($title, $help = null) {			global $data, $lang;			echo "<h2>";			$this->printHelp($title, $help);			echo "</h2>\n";		}		/**		 * Print out a message		 * @param $msg The message to print		 */		function printMsg($msg) {			if ($msg != '') echo "<p class=\"message\">{$msg}</p>\n";		}		/**		 * Creates a database accessor		 */		function getDatabaseAccessor($database, $server_id = null) {			global $lang, $conf, $misc, $_connection;			$server_info = $this->getServerInfo($server_id);			// Perform extra security checks if this config option is set			if ($conf['extra_login_security']) {				// Disallowed logins if extra_login_security is enabled.				// These must be lowercase.				$bad_usernames = array('pgsql', 'postgres', 'root', 'administrator');				$username = strtolower($server_info['username']);				if ($server_info['password'] == '' || in_array($username, $bad_usernames)) {					unset($_SESSION['webdbLogin'][$_REQUEST['server']]);					$msg = $lang['strlogindisallowed'];					include('./login.php');					exit;				}			}			// Create the connection object and make the connection			$_connection = new Connection(				$server_info['host'],				$server_info['port'],				$server_info['sslmode'],				$server_info['username'],				$server_info['password'],				$database			);			// Get the name of the database driver we need to use.			// The description of the server is returned in $platform.			$_type = $_connection->getDriver($platform);			if ($_type === null) {				printf($lang['strpostgresqlversionnotsupported'], $postgresqlMinVer);				exit;			}			$this->setServerInfo('platform', $platform, $server_id);			$this->setServerInfo('pgVersion', $_connection->conn->pgVersion, $server_id);			// Create a database wrapper class for easy manipulation of the			// connection.			include_once('./classes/database/' . $_type . '.php');			$data = new $_type($_connection->conn);			$data->platform = $_connection->platform;			return $data;		}		/**		 * Prints the page header.  If global variable $_no_output is		 * set then no header is drawn.		 * @param $title The title of the page		 * @param $script script tag		 */		function printHeader($title = '', $script = null, $frameset = false) {			global $appName, $lang, $_no_output, $conf;			if (!isset($_no_output)) {				header("Content-Type: text/html; charset=" . $lang['appcharset']);				// Send XHTML headers, or regular XHTML strict headers				echo "<?xml version=\"1.0\" encoding=\"", htmlspecialchars($lang['appcharset']), "\"?>\n";				if ($frameset == true) {					echo "<!DOCTYPE html PUBLIC \"-//W3C//DTD XHTML 1.0 Frameset//EN\" \"http://www.w3.org/TR/xhtml1/DTD/xhtml1-frameset.dtd\">\n";				} else if (isset($conf['use_xhtml_strict']) && $conf['use_xhtml_strict']) {					echo "<!DOCTYPE html PUBLIC \"-//W3C//DTD XHTML 1.0 Strict//EN\" \"http://www.w3.org/TR/xhtml1/DTD/xhtml1-Strict.dtd\">\n";				} else {					echo "<!DOCTYPE html PUBLIC \"-//W3C//DTD XHTML 1.0 Transitional//EN\" \"http://www.w3.org/TR/xhtml1/DTD/xhtml1-transitional.dtd\">\n";				}				echo "<html xmlns=\"http://www.w3.org/1999/xhtml\" xml:lang=\"{$lang['applocale']}\" lang=\"{$lang['applocale']}\"";				if (strcasecmp($lang['applangdir'], 'ltr') != 0) echo " dir=\"", htmlspecialchars($lang['applangdir']), "\"";				echo ">\n";				echo "<head>\n";				echo "<meta http-equiv=\"Content-Type\" content=\"text/html; charset={$lang['appcharset']}\" />\n";				// Theme				echo "<link rel=\"stylesheet\" href=\"themes/{$conf['theme']}/global.css\" type=\"text/css\" />\n";				echo "<link rel=\"shortcut icon\" href=\"images/themes/{$conf['theme']}/Favicon.ico\" type=\"image/vnd.microsoft.icon\" />\n";				echo "<link rel=\"icon\" type=\"image/png\" href=\"images/themes/{$conf['theme']}/Introduction.png\" />\n";				echo "<title>", htmlspecialchars($appName);				if ($title != '') echo " - {$title}";				echo "</title>\n";				if ($script) echo "{$script}\n";				echo "</head>\n";			}		}		/**		 * Prints the page footer		 * @param $doBody True to output body tag, false otherwise		 */		function printFooter($doBody = true) {			global $_reload_browser, $_reload_drop_database;			global $lang, $_no_bottom_link;			if ($doBody) {				if (isset($_reload_browser)) $this->printReload(false);				elseif (isset($_reload_drop_database)) $this->printReload(true);				if (!isset($_no_bottom_link)) 					echo "<a href=\"#\" class=\"bottom_link\">".$lang['strgotoppage']."</a>";				echo "</body>\n";			}			echo "</html>\n";		}		/**		 * Prints the page body.		 * @param $doBody True to output body tag, false otherwise		 * @param $bodyClass - name of body class		 */		function printBody($bodyClass = '', $doBody = true ) {			global $_no_output;			if (!isset($_no_output)) {				if ($doBody) {					$bodyClass = htmlspecialchars($bodyClass);					echo "<body", ($bodyClass == '' ? '' : " class=\"{$bodyClass}\"");					echo ">\n";				}			}		}		/**		 * Outputs JavaScript code that will reload the browser		 * @param $database True if dropping a database, false otherwise		 */		function printReload($database) {			echo "<script type=\"text/javascript\">\n";			if ($database)				echo "\tparent.frames.browser.location.href=\"browser.php\";\n";			else				echo "\tparent.frames.browser.location.reload();\n";			echo "</script>\n";		}		/**		 * Display navigation tabs		 * @param $tabs An associative array of tabs definitions, see printNav() for an example.		 * @param $activetab The name of the tab to be highlighted.		 */		function printTabs($tabs, $activetab) {			global $misc, $conf, $data, $lang;			if (is_string($tabs)) {				$_SESSION['webdbLastTab'][$tabs] = $activetab;				$tabs = $this->getNavTabs($tabs);			}			echo "<table class=\"tabs\"><tr>\n";			#echo "<div class=\"tabs\">\n";			# FIXME: don't count hidden tabs			$width = (int)(100 / count($tabs)).'%';			foreach ($tabs as $tab_id => $tab) {				$active = ($tab_id == $activetab) ? ' active' : '';				if (!isset($tab['hide']) || $tab['hide'] !== true) {					$tablink = "<a" . $this->printActionUrl($tab, $_REQUEST, 'href') . ">";					if (isset($tab['icon']) && $icon = $this->icon($tab['icon']))						$tablink .= "<span class=\"icon\"><img src=\"{$icon}\" alt=\"{$tab['title']}\" /></span>";					$tablink .= "<span class=\"label\">{$tab['title']}</span></a>";					echo "<td style=\"width: {$width}\" class=\"tab{$active}\">";					#echo "<span class=\"tab{$active}\" style=\"white-space:nowrap;\">";					if (isset($tab['help']))						$this->printHelp($tablink, $tab['help']);					else						echo $tablink;					echo "</td>\n";					#echo "</span>\n";				}			}			echo "</tr></table>\n";			#echo "</div>\n";		}		/**		 * Retrieve the tab info for a specific tab bar.		 * @param $section The name of the tab bar.		 */		function getNavTabs($section) {			global $data, $lang, $conf, $slony;			$hide_advanced = ($conf['show_advanced'] === false);			switch ($section) {				case 'root':					return array (						'intro' => array (							'title' => $lang['strintroduction'],							'url'   => "intro.php",							'icon'  => 'Introduction',						),						'servers' => array (							'title' => $lang['strservers'],							'url'   => "servers.php",							'icon'  => 'Servers',						),					);				case 'server':				case 'report':					$server_info = $this->getServerInfo();					$hide_users = !$data->isSuperUser($server_info['username']);					$tmp = array (						'databases' => array (							'title' => $lang['strdatabases'],							'url'   => 'all_db.php',							'urlvars' => array('subject' => 'server'),							'help'  => 'pg.database',							'icon'  => 'Databases',						)					);					if ($data->hasRoles()) {						$tmp = array_merge($tmp, array(							'roles' => array (								'title' => $lang['strroles'],								'url'   => 'roles.php',								'urlvars' => array('subject' => 'server'),								'hide'  => $hide_users,								'help'  => 'pg.role',								'icon'  => 'Roles',							)						));					}					else {						$tmp = array_merge($tmp, array(							'users' => array (								'title' => $lang['strusers'],								'url'   => 'users.php',								'urlvars' => array('subject' => 'server'),								'hide'  => $hide_users,								'help'  => 'pg.user',								'icon'  => 'Users',							),							'groups' => array (								'title' => $lang['strgroups'],								'url'   => 'groups.php',								'urlvars' => array('subject' => 'server'),								'hide'  => $hide_users,								'help'  => 'pg.group',								'icon'  => 'UserGroups',							)						));					}					$tmp = array_merge($tmp, array(						'account' => array (							'title' => $lang['straccount'],							'url'   => $data->hasRoles() ? 'roles.php' : 'users.php',							'urlvars' => array('subject' => 'server', 'action' => 'account'),							'hide'  => !$hide_users,							'help'  => 'pg.role',							'icon'  => 'User',						),						'tablespaces' => array (							'title' => $lang['strtablespaces'],							'url'   => 'tablespaces.php',							'urlvars' => array('subject' => 'server'),							'hide'  => (!$data->hasTablespaces()),							'help'  => 'pg.tablespace',							'icon'  => 'Tablespaces',						),						'export' => array (							'title' => $lang['strexport'],							'url'   => 'all_db.php',							'urlvars' => array('subject' => 'server', 'action' => 'export'),							'hide'  => (!$this->isDumpEnabled()),							'icon'  => 'Export',						),						'reports' => array (							'title' => $lang['strreports'],							'url'   => 'reports.php',							'urlvars' => array('subject' => 'server'),							'hide' => !$conf['show_reports'],							'icon' => 'Reports',						),					));					return $tmp;					break;				case 'database':					$tabs = array (						'schemas' => array (							'title' => $lang['strschemas'],							'url'   => 'schemas.php',							'urlvars' => array('subject' => 'database'),							'help'  => 'pg.schema',							'icon'  => 'Schemas',						),						'sql' => array (							'title' => $lang['strsql'],							'url'   => 'database.php',							'urlvars' => array('subject' => 'database', 'action' => 'sql', 'new' => 1),							'help'  => 'pg.sql',							'tree'  => false,							'icon'  => 'SqlEditor'						),						'find' => array (							'title' => $lang['strfind'],							'url'   => 'database.php',							'urlvars' => array('subject' => 'database', 'action' => 'find'),							'tree'  => false,							'icon'  => 'Search'						),						'variables' => array (							'title' => $lang['strvariables'],							'url'   => 'database.php',							'urlvars' => array('subject' => 'database', 'action' => 'variables'),							'help'  => 'pg.variable',							'tree'  => false,							'icon'  => 'Variables',						),						'processes' => array (							'title' => $lang['strprocesses'],							'url'   => 'database.php',							'urlvars' => array('subject' => 'database', 'action' => 'processes'),							'help'  => 'pg.process',							'tree'  => false,							'icon'  => 'Processes',						),						'locks' => array (							'title' => $lang['strlocks'],							'url'   => 'database.php',							'urlvars' => array('subject' => 'database', 'action' => 'locks'),							'help'  => 'pg.locks',							'tree'  => false,							'icon'  => 'Key',						),						'admin' => array (							'title' => $lang['stradmin'],							'url'   => 'database.php',							'urlvars' => array('subject' => 'database', 'action' => 'admin'),							'tree'  => false,							'icon'  => 'Admin',						),						'privileges' => array (							'title' => $lang['strprivileges'],							'url'   => 'privileges.php',							'urlvars' => array('subject' => 'database'),							'hide'  => (!isset($data->privlist['database'])),							'help'  => 'pg.privilege',							'tree'  => false,							'icon'  => 'Privileges',						),						'languages' => array (							'title' => $lang['strlanguages'],							'url'   => 'languages.php',							'urlvars' => array('subject' => 'database'),							'hide'  => $hide_advanced,							'help'  => 'pg.language',							'icon'  => 'Languages',						),						'casts' => array (							'title' => $lang['strcasts'],							'url'   => 'casts.php',							'urlvars' => array('subject' => 'database'),							'hide'  => ($hide_advanced),							'help'  => 'pg.cast',							'icon'  => 'Casts',						),						'slony' => array (							'title' => 'Slony',							'url'   => 'plugin_slony.php',							'urlvars' => array('subject' => 'database', 'action' => 'clusters_properties'),							'hide'  => !isset($slony),							'help'  => '',							'icon'  => 'Replication',						),						'export' => array (							'title' => $lang['strexport'],							'url'   => 'database.php',							'urlvars' => array('subject' => 'database', 'action' => 'export'),							'hide'  => (!$this->isDumpEnabled()),							'tree'  => false,							'icon'  => 'Export',						),					);					return $tabs;				case 'schema':					$tabs = array (						'tables' => array (							'title' => $lang['strtables'],							'url'   => 'tables.php',							'urlvars' => array('subject' => 'schema'),							'help'  => 'pg.table',							'icon'  => 'Tables',						),						'views' => array (							'title' => $lang['strviews'],							'url'   => 'views.php',							'urlvars' => array('subject' => 'schema'),							'help'  => 'pg.view',							'icon'  => 'Views',						),						'sequences' => array (							'title' => $lang['strsequences'],							'url'   => 'sequences.php',							'urlvars' => array('subject' => 'schema'),							'help'  => 'pg.sequence',							'icon'  => 'Sequences',						),						'functions' => array (							'title' => $lang['strfunctions'],							'url'   => 'functions.php',							'urlvars' => array('subject' => 'schema'),							'help'  => 'pg.function',							'icon'  => 'Functions',						),						'fulltext' => array (							'title' => $lang['strfulltext'],							'url'   => 'fulltext.php',							'urlvars' => array('subject' => 'schema'),							'help'  => 'pg.fts',							'tree'  => true,							'icon'  => 'Fts',						),						'domains' => array (							'title' => $lang['strdomains'],							'url'   => 'domains.php',							'urlvars' => array('subject' => 'schema'),							'help'  => 'pg.domain',							'icon'  => 'Domains',						),						'aggregates' => array (							'title' => $lang['straggregates'],							'url'   => 'aggregates.php',							'urlvars' => array('subject' => 'schema'),							'hide'  => $hide_advanced,							'help'  => 'pg.aggregate',							'icon'  => 'Aggregates',						),						'types' => array (							'title' => $lang['strtypes'],							'url'   => 'types.php',							'urlvars' => array('subject' => 'schema'),							'hide'  => $hide_advanced,							'help'  => 'pg.type',							'icon'  => 'Types',						),						'operators' => array (							'title' => $lang['stroperators'],							'url'   => 'operators.php',							'urlvars' => array('subject' => 'schema'),							'hide'  => $hide_advanced,							'help'  => 'pg.operator',							'icon'  => 'Operators',						),						'opclasses' => array (							'title' => $lang['stropclasses'],							'url'   => 'opclasses.php',							'urlvars' => array('subject' => 'schema'),							'hide'  => $hide_advanced,							'help'  => 'pg.opclass',							'icon'  => 'OperatorClasses',						),						'conversions' => array (							'title' => $lang['strconversions'],							'url'   => 'conversions.php',							'urlvars' => array('subject' => 'schema'),							'hide'  => $hide_advanced,							'help'  => 'pg.conversion',							'icon'  => 'Conversions',						),						'privileges' => array (							'title' => $lang['strprivileges'],							'url'   => 'privileges.php',							'urlvars' => array('subject' => 'schema'),							'help'  => 'pg.privilege',							'tree'  => false,							'icon'  => 'Privileges',						),						'export' => array (							'title' => $lang['strexport'],							'url'   => 'schemas.php',							'urlvars' => array('subject' => 'schema', 'action' => 'export'),							'hide'  => (!$this->isDumpEnabled()),							'tree'  => false,							'icon'  => 'Export',						),					);					if (!$data->hasFTS()) unset($tabs['fulltext']);					return $tabs;				case 'table':					return array (						'columns' => array (							'title' => $lang['strcolumns'],							'url'   => 'tblproperties.php',							'urlvars' => array('subject' => 'table', 'table' => field('table')),							'icon'  => 'Columns',							'branch'=> true,						),						'indexes' => array (							'title' => $lang['strindexes'],							'url'   => 'indexes.php',							'urlvars' => array('subject' => 'table', 'table' => field('table')),							'help'  => 'pg.index',							'icon'  => 'Indexes',							'branch'=> true,						),						'constraints' => array (							'title' => $lang['strconstraints'],							'url'   => 'constraints.php',							'urlvars' => array('subject' => 'table', 'table' => field('table')),							'help'  => 'pg.constraint',							'icon'  => 'Constraints',							'branch'=> true,						),						'triggers' => array (							'title' => $lang['strtriggers'],							'url'   => 'triggers.php',							'urlvars' => array('subject' => 'table', 'table' => field('table')),							'help'  => 'pg.trigger',							'icon'  => 'Triggers',							'branch'=> true,						),						'rules' => array (							'title' => $lang['strrules'],							'url'   => 'rules.php',							'urlvars' => array('subject' => 'table', 'table' => field('table')),							'help'  => 'pg.rule',							'icon'  => 'Rules',							'branch'=> true,						),						'admin' => array (							'title' => $lang['stradmin'],							'url'   => 'tables.php',							'urlvars' => array('subject' => 'table', 'table' => field('table'), 'action' => 'admin'),							'icon'  => 'Admin',						),						'info' => array (							'title' => $lang['strinfo'],							'url'   => 'info.php',							'urlvars' => array('subject' => 'table', 'table' => field('table')),							'icon'  => 'Statistics',						),						'privileges' => array (							'title' => $lang['strprivileges'],							'url'   => 'privileges.php',							'urlvars' => array('subject' => 'table', 'table' => field('table')),							'help'  => 'pg.privilege',							'icon'  => 'Privileges',						),						'import' => array (							'title' => $lang['strimport'],							'url'   => 'tblproperties.php',							'urlvars' => array('subject' => 'table', 'table' => field('table'), 'action' => 'import'),							'icon'  => 'Import',							'hide'	=> false,						),						'export' => array (							'title' => $lang['strexport'],							'url'   => 'tblproperties.php',							'urlvars' => array('subject' => 'table', 'table' => field('table'), 'action' => 'export'),							'icon'  => 'Export',							'hide'	=> false,						),					);				case 'view':					return array (						'columns' => array (							'title' => $lang['strcolumns'],							'url'   => 'viewproperties.php',							'urlvars' => array('subject' => 'view', 'view' => field('view')),							'icon'  => 'Columns',							'branch'=> true,						),						'definition' => array (							'title' => $lang['strdefinition'],							'url'   => 'viewproperties.php',							'urlvars' => array('subject' => 'view', 'view' => field('view'), 'action' => 'definition'),							'icon'  => 'Definition'						),						'rules' => array (							'title' => $lang['strrules'],							'url'   => 'rules.php',							'urlvars' => array('subject' => 'view', 'view' => field('view')),							'help'  => 'pg.rule',							'icon'  => 'Rules',							'branch'=> true,						),						'privileges' => array (							'title' => $lang['strprivileges'],							'url'   => 'privileges.php',							'urlvars' => array('subject' => 'view', 'view' => field('view')),							'help'  => 'pg.privilege',							'icon'  => 'Privileges',						),						'export' => array (							'title' => $lang['strexport'],							'url'   => 'viewproperties.php',							'urlvars' => array('subject' => 'view', 'view' => field('view'), 'action' => 'export'),							'icon'  => 'Export',							'hide'	=> false,						),					);				case 'function':					return array (						'definition' => array (							'title' => $lang['strdefinition'],							'url'   => 'functions.php',							'urlvars' => array(									'subject' => 'function',									'function' => field('function'),									'function_oid' => field('function_oid'),									'action' => 'properties',								),							'icon'  => 'Definition',						),						'privileges' => array (							'title' => $lang['strprivileges'],							'url'   => 'privileges.php',							'urlvars' => array(									'subject' => 'function',									'function' => field('function'),									'function_oid' => field('function_oid'),								),							'icon'  => 'Privileges',						),					);				case 'aggregate':					return array (						'definition' => array (							'title' => $lang['strdefinition'],							'url'   => 'aggregates.php',							'urlvars' => array(									'subject' => 'aggregate',									'aggrname' => field('aggrname'),									'aggrtype' => field('aggrtype'),									'action' => 'properties',								),							'icon'  => 'Definition',						),					);				case 'role':					return array (						'definition' => array (							'title' => $lang['strdefinition'],							'url'   => 'roles.php',							'urlvars' => array(									'subject' => 'role',									'rolename' => field('rolename'),									'action' => 'properties',								),							'icon'  => 'Definition',						),					);				case 'popup':					return array (						'sql' => array (							'title' => $lang['strsql'],							'url'   => 'sqledit.php',							'urlvars' => array('subject' => 'schema', 'action' => 'sql'),							'help'  => 'pg.sql',							'icon'  => 'SqlEditor',						),						'find' => array (							'title' => $lang['strfind'],							'url'   => 'sqledit.php',							'urlvars' => array('subject' => 'schema', 'action' => 'find'),							'icon'  => 'Search',						),					);				case 'slony_cluster':					return array (						'properties' => array (							'title' => $lang['strproperties'],							'url'   => 'plugin_slony.php',							'urlvars' => array(									'subject' => 'slony_cluster',									'action' => 'cluster_properties',									'slony_cluster' => field('slony_cluster')								),							'help'  => '',							'tree'  => false,							'icon'  => 'Cluster',						),						'nodes' => array (							'title' => $lang['strnodes'],							'url'   => 'plugin_slony.php',							'urlvars' => array(									'subject' => 'slony_cluster',									'action' => 'nodes_properties',									'slony_cluster' => field('slony_cluster')								),							'branch' => 'nodes',							'help'  => '',							'icon'  => 'Nodes',						),						'sets' => array (							'title' => $lang['strrepsets'],							'url'   => 'plugin_slony.php',							'urlvars' => array(								'subject' => 'slony_cluster',								'action' => 'sets_properties',								'slony_cluster' => field('slony_cluster')							),							'branch' => 'sets',							'help'  => '',							'icon'  => 'ReplicationSets',						),					);				case 'column':					return array(						'properties' => array (							'title'		=> $lang['strcolprop'],							'url'		=> 'colproperties.php',							'urlvars'	=> array(								'subject' => 'column',								'table' => field('table'),								'column' => field('column')							),							'icon'		=> 'Column'						),						'privileges' => array (							'title' => $lang['strprivileges'],							'url'   => 'privileges.php',							'urlvars' => array(								'subject' => 'column',								'table' => field('table'),								'column' => field('column')							),							'help'  => 'pg.privilege',							'icon'  => 'Privileges',						)					);                case 'fulltext':                    return array (                        'ftsconfigs' => array (                            'title' => $lang['strftstabconfigs'],                            'url'   => 'fulltext.php',                            'urlvars' => array('subject' => 'schema'),                            'hide'  => !$data->hasFTS(),                            'help'  => 'pg.ftscfg',                            'tree'  => true,                            'icon'  => 'FtsCfg',                        ),                        'ftsdicts' => array (                            'title' => $lang['strftstabdicts'],                            'url'   => 'fulltext.php',                            'urlvars' => array('subject' => 'schema', 'action' => 'viewdicts'),                            'hide'  => !$data->hasFTS(),                            'help'  => 'pg.ftsdict',                            'tree'  => true,                            'icon'  => 'FtsDict',                        ),                        'ftsparsers' => array (                            'title' => $lang['strftstabparsers'],                            'url'   => 'fulltext.php',                            'urlvars' => array('subject' => 'schema', 'action' => 'viewparsers'),                            'hide'  => !$data->hasFTS(),                            'help'  => 'pg.ftsparser',                            'tree'  => true,                            'icon'  => 'FtsParser',                        ),                    );				default:					return array();			}		}		/**		 * Get the URL for the last active tab of a particular tab bar.		 */		function getLastTabURL($section) {			global $data;			$tabs = $this->getNavTabs($section);			if (isset($_SESSION['webdbLastTab'][$section]) && isset($tabs[$_SESSION['webdbLastTab'][$section]]))				$tab = $tabs[$_SESSION['webdbLastTab'][$section]];			else				$tab = reset($tabs);			return isset($tab['url']) ? $tab : null;		}		function printTopbar() {			global $lang, $conf, $appName, $appVersion, $appLangFiles;			$server_info = $this->getServerInfo();			echo "<div class=\"topbar\"><table style=\"width: 100%\"><tr><td>";			if ($server_info && isset($server_info['platform']) && isset($server_info['username'])) {				echo sprintf($lang['strtopbar'],					'<span class="platform">'.htmlspecialchars($server_info['platform']).'</span>',					'<span class="host">'.htmlspecialchars((empty($server_info['host'])) ? 'localhost':$server_info['host']).'</span>',					'<span class="port">'.htmlspecialchars($server_info['port']).'</span>',					'<span class="username">'.htmlspecialchars($server_info['username']).'</span>',					'<span class="date">'.date($lang['strtimefmt']).'</span>');			} else {				echo "<span class=\"appname\">$appName</span> <span class=\"version\">$appVersion</span>";			}			echo "</td>";			if (isset($_REQUEST['server'])) {				$sql_url = "sqledit.php?{$this->href}&amp;action=";				$sql_window_id = htmlspecialchars('sqledit:'.$_REQUEST['server']);				$history_url = "history.php?{$this->href}&amp;action=pophistory";				$history_window_id = htmlspecialchars('history:'.$_REQUEST['server']);				$logout_shared = isset($_SESSION['sharedUsername']) ?					' onclick="return confirm(\''. $lang['strconfdropcred']. '\')"':					'';				echo "<td style=\"text-align: right\">";				echo "<ul class=\"toplink\">\n\t<li><a class=\"toplink\" href=\"{$sql_url}sql\" target=\"sqledit\" onclick=\"window.open('{$sql_url}sql','{$sql_window_id}','toolbar=no,width=700,height=500,resizable=yes,scrollbars=yes').focus(); return false;\">{$lang['strsql']}</a></li>\n";				echo "\t<li><a class=\"toplink\" href=\"{$history_url}\" onclick=\"window.open('{$history_url}','{$history_window_id}','toolbar=no,width=800,height=600,resizable=yes,scrollbars=yes').focus(); return false;\">{$lang['strhistory']}</a></li>\n";				echo "\t<li><a class=\"toplink\" href=\"{$sql_url}find\" target=\"sqledit\" onclick=\"window.open('{$sql_url}find','{$sql_window_id}','toolbar=no,width=700,height=500,resizable=yes,scrollbars=yes').focus(); return false;\">{$lang['strfind']}</a></li>\n"; 				echo "\t<li><a class=\"toplink\" href=\"servers.php?action=logout&amp;logoutServer=".htmlspecialchars($server_info['host']).":".htmlspecialchars($server_info['port']).":".htmlspecialchars($server_info['sslmode'])."\"{$logout_shared}>{$lang['strlogout']}</a></li>\n"; 				echo "</ul>\n";				echo "</td>";			}/*			echo "<td style=\"text-align: right; width: 1%\">";			echo "<form method=\"get\"><select name=\"language\" onchange=\"this.form.submit()\">\n";			$language = isset($_SESSION['webdbLanguage']) ? $_SESSION['webdbLanguage'] : 'english';			foreach ($appLangFiles as $k => $v) {				echo "<option value=\"{$k}\"",					($k == $language) ? ' selected="selected"' : '',					">{$v}</option>\n";			}			echo "</select>\n";			echo "<noscript><input type=\"submit\" value=\"Set Language\"></noscript>\n";			foreach ($_GET as $key => $val) {				if ($key == 'language') continue;				echo "<input type=\"hidden\" name=\"$key\" value=\"", htmlspecialchars($val), "\" />\n";			}			echo "</form>\n";			echo "</td>";*/			echo "</tr></table></div>\n";		}		/**		 * Display a bread crumb trail.		 */		function printTrail($trail = array()) {			global $lang;			$this->printTopbar();			if (is_string($trail)) {				$trail = $this->getTrail($trail);			}			echo "<div class=\"trail\"><table><tr>";			foreach ($trail as $crumb) {				echo "<td class=\"crumb\">";				$crumblink = "<a";				if (isset($crumb['url']))					$crumblink .= ' href="' . $this->printVal($crumb['url'], 'nbsp') . '"';				if (isset($crumb['title']))					$crumblink .= " title=\"{$crumb['title']}\"";				$crumblink .= ">";				if (isset($crumb['title']))					$iconalt = $crumb['title'];				else					$iconalt = 'Database Root';				if (isset($crumb['icon']) && $icon = $this->icon($crumb['icon']))					$crumblink .= "<span class=\"icon\"><img src=\"{$icon}\" alt=\"{$iconalt}\" /></span>";				$crumblink .= "<span class=\"label\">" . htmlspecialchars($crumb['text']) . "</span></a>";				if (isset($crumb['help']))					$this->printHelp($crumblink, $crumb['help']);				else					echo $crumblink;				echo "{$lang['strseparator']}";				echo "</td>";			}			echo "</tr></table></div>\n";		}		/**		 * Create a bread crumb trail of the object hierarchy.		 * @param $object The type of object at the end of the trail.		 */		function getTrail($subject = null) {			global $lang, $conf, $data, $appName;			$trail = array();			$vars = '';			$done = false;			$trail['root'] = array(				'text'  => $appName,				'url'   => 'redirect.php?subject=root',				'icon'  => 'Introduction'			);			if ($subject == 'root') $done = true;			if (!$done) {				$vars = 'server='.urlencode($_REQUEST['server']).'&';				$server_info = $this->getServerInfo();				$trail['server'] = array(					'title' => $lang['strserver'],					'text'  => $server_info['desc'],					'url'   => "redirect.php?subject=server&{$vars}",					'help'  => 'pg.server',					'icon'  => 'Server'				);			}			if ($subject == 'server') $done = true;			if (isset($_REQUEST['report']) && !$done) {				$vars .= 'report='.urlencode($_REQUEST['report']).'&';				$trail['report'] = array(					'title' => $lang['strreport'],					'text'  => $_REQUEST['report'],					'url'   => "reports.php?subject=report&{$vars}",					'icon'  => 'Report'				);			}			if (isset($_REQUEST['database']) && !$done) {				$vars .= 'database='.urlencode($_REQUEST['database']).'&';				$trail['database'] = array(					'title' => $lang['strdatabase'],					'text'  => $_REQUEST['database'],					'url'   => "redirect.php?subject=database&{$vars}",					'help'  => 'pg.database',					'icon'  => 'Database'				);			} elseif (isset($_REQUEST['rolename']) && !$done) {				$vars .= "subject=role&action=properties&rolename=".urlencode($_REQUEST['rolename']);				$trail['role'] = array(					'title' => $lang['strrole'],					'text'  => $_REQUEST['rolename'],					'url'   => "redirect.php?{$vars}",					'help'  => 'pg.role',					'icon'  => 'Roles'				);			}			if ($subject == 'database' || $subject == 'role' || $subject == 'report') $done = true;			if (isset($_REQUEST['schema']) && !$done) {				$vars .= 'schema='.urlencode($_REQUEST['schema']).'&';				$trail['schema'] = array(					'title' => $lang['strschema'],					'text'  => $_REQUEST['schema'],					'url'   => "redirect.php?subject=schema&{$vars}",					'help'  => 'pg.schema',					'icon'  => 'Schema'				);			}			if ($subject == 'schema') $done = true;			if (isset($_REQUEST['slony_cluster']) && !$done) {				$vars .= 'slony_cluster='.urlencode($_REQUEST['slony_cluster']).'&';				$trail['slony_cluster'] = array(					'title' => 'Slony Cluster',					'text'  => $_REQUEST['slony_cluster'],					'url'   => "redirect.php?subject=slony_cluster&{$vars}",					'help'  => 'sl.cluster',					'icon'  => 'Cluster'				);			}			if ($subject == 'slony_cluster') $done = true;			if (isset($_REQUEST['table']) && !$done) {				$vars .= "table=".urlencode($_REQUEST['table']);				$trail['table'] = array(					'title' => $lang['strtable'],					'text'  => $_REQUEST['table'],					'url'   => "redirect.php?subject=table&{$vars}",					'help'  => 'pg.table',					'icon'  => 'Table'				);			} elseif (isset($_REQUEST['view']) && !$done) {				$vars .= "view=".urlencode($_REQUEST['view']);				$trail['view'] = array(					'title' => $lang['strview'],					'text'  => $_REQUEST['view'],					'url'   => "redirect.php?subject=view&{$vars}",					'help'  => 'pg.view',					'icon'  => 'View'				);			} elseif (isset($_REQUEST['ftscfg']) && !$done) {				$vars .= "action=viewconfig&ftscfg=".urlencode($_REQUEST['ftscfg']);				$trail['ftscfg'] = array(					'title' => $lang['strftsconfig'],					'text'  => $_REQUEST['ftscfg'],					'url'   => "fulltext.php?{$vars}",					'help'  => 'pg.ftscfg.example',					'icon'  => 'Fts'				);			}			if ($subject == 'table' || $subject == 'view' || $subject == 'ftscfg') $done = true;			if (!$done && !is_null($subject)) {				switch ($subject) {					case 'function':						$vars .= "{$subject}_oid=".urlencode($_REQUEST[$subject.'_oid']).'&';						$vars .= "subject={$subject}&{$subject}=".urlencode($_REQUEST[$subject]);						$trail[$subject] = array(							'title' => $lang['str'.$subject],							'text'  => $_REQUEST[$subject],							'url'   => "redirect.php?{$vars}",							'help'  => 'pg.function',							'icon'  => 'Function'						);						break;					case 'aggregate':						$vars .= "subject=aggregate&action=properties&aggrname=".urlencode($_REQUEST['aggrname']);						$vars .= "&aggrtype=".urlencode($_REQUEST['aggrtype']);						$trail[$subject] = array(							'title' => $lang['straggregate'],							'text'  => $_REQUEST['aggrname'],							'url'   => "redirect.php?{$vars}",							'help'  => 'pg.aggregate',							'icon'  => 'Aggregate'						);						break;					case 'slony_node':						$vars .= 'no_id='.urlencode($_REQUEST['no_id']).'&no_name='.urlencode($_REQUEST['no_name']);						$trail[$subject] = array(							'title' => 'Slony Node',							'text'  => $_REQUEST['no_name'],							'url'   => "redirect.php?{$vars}",							'help'  => 'sl.'.$subject,							'icon'  => 'Node'						);						break;					case 'slony_set':						$vars .= "{$subject}_id=".urlencode($_REQUEST[$subject]).'&';						$vars .= "subject={$subject}&{$subject}=".urlencode($_REQUEST[$subject]);						$trail[$subject] = array(							'title' => $lang['str'.$subject],							'text'  => $_REQUEST[$subject],							'url'   => "redirect.php?{$vars}",							'help'  => 'sl.'.$subject,							'icon'  => 'AvailableReplicationSet'						);						break;					case 'column':						$vars .= "&column=". urlencode($_REQUEST['column']) ."&subject=column";						$trail['column'] = array (							'title' => $lang['strcolumn'],							'text'  => $_REQUEST['column'],							'icon'	=> 'Column',							'url'   => "redirect.php?{$vars}"						);						break;					default:						if (isset($_REQUEST[$subject])) {							switch ($subject) {								case 'domain': $icon = 'Domain'; break;								case 'sequence': $icon = 'Sequence'; break;								case 'type': $icon = 'Type'; break;								case 'operator': $icon = 'Operator'; break;								default: $icon = null; break;							}							$trail[$subject] = array(								'title' => $lang['str'.$subject],								'text'  => $_REQUEST[$subject],								'help'  => 'pg.'.$subject,								'icon'  => $icon,							);						}				}			}			return $trail;		}		/**		 * Do multi-page navigation.  Displays the prev, next and page options.		 * @param $page the page currently viewed		 * @param $pages the maximum number of pages		 * @param $url the url to refer to with the page number inserted		 * @param $max_width the number of pages to make available at any one time (default = 20)		 */		function printPages($page, $pages, $url, $max_width = 20) {			global $lang;			$window = 10;			if ($page < 0 || $page > $pages) return;			if ($pages < 0) return;			if ($max_width <= 0) return;			if ($pages > 1) {				echo "<p style=\"text-align: center\">\n";				if ($page != 1) {					$temp = str_replace('%s', 1, $url);					echo "<a class=\"pagenav\" href=\"{$temp}\">{$lang['strfirst']}</a>\n";					$temp = str_replace('%s', $page - 1, $url);					echo "<a class=\"pagenav\" href=\"{$temp}\">{$lang['strprev']}</a>\n";				}				if ($page <= $window) {					$min_page = 1;					$max_page = min(2 * $window, $pages);				}				elseif ($page > $window && $pages >= $page + $window) {					$min_page = ($page - $window) + 1;					$max_page = $page + $window;				}				else {					$min_page = ($page - (2 * $window - ($pages - $page))) + 1;					$max_page = $pages;				}				// Make sure min_page is always at least 1				// and max_page is never greater than $pages				$min_page = max($min_page, 1);				$max_page = min($max_page, $pages);				for ($i = $min_page; $i <= $max_page; $i++) {					$temp = str_replace('%s', $i, $url);					if ($i != $page) echo "<a class=\"pagenav\" href=\"{$temp}\">$i</a>\n";					else echo "$i\n";				}				if ($page != $pages) {					$temp = str_replace('%s', $page + 1, $url);					echo "<a class=\"pagenav\" href=\"{$temp}\">{$lang['strnext']}</a>\n";					$temp = str_replace('%s', $pages, $url);					echo "<a class=\"pagenav\" href=\"{$temp}\">{$lang['strlast']}</a>\n";				}				echo "</p>\n";			}		}		/**		 * Displays link to the context help.		 * @param $str   - the string that the context help is related to (already escaped)		 * @param $help  - help section identifier		 */		function printHelp($str, $help) {			global $lang, $data;			echo $str;			if ($help) {				echo "<a class=\"help\" href=\"";				echo htmlspecialchars("help.php?help=".urlencode($help)."&server=".urlencode($_REQUEST['server']));				echo "\" title=\"{$lang['strhelp']}\" target=\"phppgadminhelp\">{$lang['strhelpicon']}</a>";			}		}		/**		 * Outputs JavaScript to set default focus		 * @param $object eg. forms[0].username		 */		function setFocus($object) {			echo "<script type=\"text/javascript\">\n";			echo "   document.{$object}.focus();\n";			echo "</script>\n";		}		/**		 * Outputs JavaScript to set the name of the browser window.		 * @param $name the window name		 * @param $addServer if true (default) then the server id is		 *        attached to the name.		 */		function setWindowName($name, $addServer = true) {			echo "<script type=\"text/javascript\">\n";			echo "//<![CDATA[\n";			echo "   window.name = '{$name}", ($addServer ? ':'.htmlspecialchars($_REQUEST['server']) : ''), "';\n";			echo "//]]>\n";			echo "</script>\n";		}		/**		 * Converts a PHP.INI size variable to bytes.  Taken from publically available		 * function by Chris DeRose, here: http://www.php.net/manual/en/configuration.directives.php#ini.file-uploads		 * @param $strIniSize The PHP.INI variable		 * @return size in bytes, false on failure		 */		function inisizeToBytes($strIniSize) {			// This function will take the string value of an ini 'size' parameter,			// and return a double (64-bit float) representing the number of bytes			// that the parameter represents. Or false if $strIniSize is unparseable.			$a_IniParts = array();			if (!is_string($strIniSize))				return false;			if (!preg_match ('/^(\d+)([bkm]*)$/i', $strIniSize,$a_IniParts))				return false;			$nSize = (double) $a_IniParts[1];			$strUnit = strtolower($a_IniParts[2]);			switch($strUnit) {				case 'm':					return ($nSize * (double) 1048576);				case 'k':					return ($nSize * (double) 1024);				case 'b':				default:					return $nSize;			}		}		/**		 * Display a URL given an action associative array.		 * @param $action An associative array of the follow properties:		 *			'url'  => The first part of the URL (before the ?)		 *			'urlvars' => Associative array of (URL variable => field name)		 *						these are appended to the URL		 *			'urlfn' => Function to apply to URL before display		 * @param $fields Field data from which 'urlfield' and 'vars' are obtained.		 * @param $attr If supplied then the URL will be quoted and prefixed with		 *				'$attr='.		 */		function printActionUrl(&$action, &$fields, $attr = null) {			$url = value($action['url'], $fields);			if ($url === false) return '';			if (!empty($action['urlvars'])) {				$urlvars = value($action['urlvars'], $fields);			} else {				$urlvars = array();			}			if (isset($urlvars['subject'])) {				$subject = value($urlvars['subject'], $fields);				if (isset($_REQUEST['server']) && $subject != 'root') {					$urlvars['server'] = $_REQUEST['server'];					if (isset($_REQUEST['database']) && $subject != 'server') {						$urlvars['database'] = $_REQUEST['database'];						if (isset($_REQUEST['schema']) && $subject != 'database') {							$urlvars['schema'] = $_REQUEST['schema'];						}					}				}			}			$sep = '?';			foreach ($urlvars as $var => $varfield) {				$url .= $sep . value_url($var, $fields) . '=' . value_url($varfield, $fields);				$sep = '&';			}			$url = htmlentities($url);			if ($attr !== null && $url != '')				return ' '.$attr.'="'.$url.'"';			else				return $url;		}		function getRequestVars($subject = '') {			$v = array();			if (!empty($subject))				$v['subject'] = $subject;			if (isset($_REQUEST['server']) && $subject != 'root') {				$v['server'] = $_REQUEST['server'];				if (isset($_REQUEST['database']) && $subject != 'server') {					$v['database'] = $_REQUEST['database'];					if (isset($_REQUEST['schema']) && $subject != 'database') {						$v['schema'] = $_REQUEST['schema'];					}				}			}			return $v;		}		function printUrlVars(&$vars, &$fields) {			foreach ($vars as $var => $varfield) {				echo "{$var}=", urlencode($fields[$varfield]), "&amp;";			}		}		/**		 * Display a table of data.		 * @param $tabledata A set of data to be formatted, as returned by $data->getDatabases() etc.		 * @param $columns   An associative array of columns to be displayed:		 *			$columns = array(		 *				column_id => array(		 *					'title' => Column heading,		 *					'field' => Field name for $tabledata->fields[...],		 *					'help'  => Help page for this column,		 *				), ...		 *			);		 * @param $actions   Actions that can be performed on each object:		 *			$actions = array(		 *				* multi action support		 *				* parameters are serialized for each entries and given in $_REQUEST['ma']		 *				'multiactions' => array(		 *					'keycols' => Associative array of (URL variable => field name), // fields included in the form		 *					'url' => URL submission,		 *					'default' => Default selected action in the form.		 *									if null, an empty action is added & selected		 *				),		 *				* actions *		 *				action_id => array(		 *					'title' => Action heading,		 *					'url'   => Static part of URL.  Often we rely		 *							   relative urls, usually the page itself (not '' !), or just a query string,		 *					'vars'  => Associative array of (URL variable => field name),		 *					'multiaction' => Name of the action to execute.		 *										Add this action to the multi action form		 *				), ...		 *			);		 * @param $nodata    (optional) Message to display if data set is empty.		 * @param $pre_fn    (optional) Name of a function to call for each row,		 *					 it will be passed two params: $rowdata and $actions,		 *					 it may be used to derive new fields or modify actions.		 *					 It can return an array of actions specific to the row,		 *					 or if nothing is returned then the standard actions are used.		 *					 (see tblproperties.php and constraints.php for examples)		 *					 The function must not must not store urls because		 *					 they are relative and won't work out of context.		 */		function printTable(&$tabledata, &$columns, &$actions, $nodata = null, $pre_fn = null) {			global $data, $conf, $misc, $lang;			if ($has_ma = isset($actions['multiactions']))				$ma = $actions['multiactions'];			unset($actions['multiactions']);			if ($tabledata->recordCount() > 0) {				// Remove the 'comment' column if they have been disabled				if (!$conf['show_comments']) {					unset($columns['comment']);				}				if (isset($columns['comment'])) {					// Uncomment this for clipped comments.					// TODO: This should be a user option.					//$columns['comment']['params']['clip'] = true;				}				if ($has_ma) {					echo "<script src=\"multiactionform.js\" type=\"text/javascript\"></script>\n";					echo "<form id=\"multi_form\" action=\"{$ma['url']}\" method=\"post\" enctype=\"multipart/form-data\">\n";					if (isset($ma['vars']))						foreach ($ma['vars'] as $k => $v)							echo "<input type=\"hidden\" name=\"$k\" value=\"$v\" />";				}				echo "<table>\n";				echo "<tr>\n";				// Display column headings				if ($has_ma) echo "<th></th>";				foreach ($columns as $column_id => $column) {					switch ($column_id) {						case 'actions':							if (sizeof($actions) > 0) echo "<th class=\"data\" colspan=\"", count($actions), "\">{$column['title']}</th>\n";							break;						default:							echo "<th class=\"data\">";							if (isset($column['help']))								$this->printHelp($column['title'], $column['help']);							else								echo $column['title'];							echo "</th>\n";							break;					}				}				echo "</tr>\n";				// Display table rows				$i = 0;				while (!$tabledata->EOF) {					$id = ($i % 2) + 1;					unset($alt_actions);					if (!is_null($pre_fn)) $alt_actions = $pre_fn($tabledata, $actions);					if (!isset($alt_actions)) $alt_actions =& $actions;					echo "<tr class=\"data{$id}\">\n";					if ($has_ma) {						foreach ($ma['keycols'] as $k => $v)							$a[$k] = $tabledata->fields[$v];						echo "<td>";						echo "<input type=\"checkbox\" name=\"ma[]\" value=\"". htmlentities(serialize($a)) ."\" />";						echo "</td>\n";					}					foreach ($columns as $column_id => $column) {						// Apply default values for missing parameters						if (isset($column['url']) && !isset($column['vars'])) $column['vars'] = array();						switch ($column_id) {							case 'actions':								foreach ($alt_actions as $action) {									if (isset($action['disable']) && $action['disable'] === true) {										echo "<td></td>\n";									} else {										echo "<td class=\"opbutton{$id}\">";										echo "<a href=\"{$action['url']}";										if ($action['url'] === '') echo '?';										$misc->printUrlVars($action['vars'], $tabledata->fields);										if (isset($action['target']))											echo "\" target=\"{$action['target']}";										echo "\">{$action['title']}</a></td>\n";									}								}								break;							default:								echo "<td>";								$val = value($column['field'], $tabledata->fields);								if (!is_null($val)) {									if (isset($column['url'])) {										echo "<a href=\"{$column['url']}";										$misc->printUrlVars($column['vars'], $tabledata->fields);										echo "\">";									}									$type = isset($column['type']) ? $column['type'] : null;									$params = isset($column['params']) ? $column['params'] : array();									echo $misc->printVal($val, $type, $params);									if (isset($column['url'])) echo "</a>";								}								echo "</td>\n";								break;						}					}					echo "</tr>\n";					$tabledata->moveNext();					$i++;				}				echo "</table>\n";				// Multi action table footer w/ options & [un]check'em all				if ($has_ma) {					// if default is not set or doesn't exist, set it to null					if (!isset($ma['default']) || !isset($actions[$ma['default']]))						$ma['default'] = null;					echo "<br />\n";					echo "<table>\n";					echo "<tr>\n";					echo "<th class=\"data\" style=\"text-align: left\" colspan=\"3\">{$lang['stractionsonmultiplelines']}</th>\n";					echo "</tr>\n";					echo "<tr class=\"row1\">\n";					echo "<td>";					echo "<a href=\"#\" onclick=\"javascript:checkAll(true);\">{$lang['strselectall']}</a> / ";					echo "<a href=\"#\" onclick=\"javascript:checkAll(false);\">{$lang['strunselectall']}</a></td>\n";					echo "<td>&nbsp;--->&nbsp;</td>\n";					echo "<td>\n";					echo "\t<select name=\"action\">\n";					if ($ma['default'] == null)						echo "\t\t<option value=\"\">--</option>\n";					foreach($actions as $k => $a)						if (isset($a['multiaction']))							echo "\t\t<option value=\"{$a['multiaction']}\"", ($ma['default']  == $k? ' selected="selected"': ''), ">{$a['title']}</option>\n";					echo "\t</select>\n";					echo "<input type=\"submit\" value=\"{$lang['strexecute']}\" />\n";					echo $misc->form;					echo "</td>\n";					echo "</tr>\n";					echo "</table>\n";					echo '</form>';				};				return true;			} else {				if (!is_null($nodata)) {					echo "<p>{$nodata}</p>\n";				}				return false;			}		}		/** Produce XML data for the browser tree		 * @param $treedata A set of records to populate the tree.		 * @param $attrs Attributes for tree items		 *        'text' - the text for the tree node		 *        'icon' - an icon for node		 *        'openIcon' - an alternative icon when the node is expanded		 *        'toolTip' - tool tip text for the node		 *        'action' - URL to visit when single clicking the node		 *        'iconAction' - URL to visit when single clicking the icon node		 *        'branch' - URL for child nodes (tree XML)		 *        'expand' - the action to return XML for the subtree		 *        'nodata' - message to display when node has no children		 *        'nohead' - suppress headers and opening <tree> tag		 *        'nofoot' - suppress closing </tree> tag		 */		function printTreeXML(&$treedata, &$attrs) {			global $conf, $lang;			if (!isset($attrs['nohead']) || $attrs['nohead'] === false) {				header("Content-Type: text/xml");				header("Cache-Control: no-cache");				echo "<?xml version=\"1.0\" encoding=\"", htmlspecialchars($lang['appcharset']), "\"?>\n";				echo "<tree>\n";			}			if ($treedata->recordCount() > 0) {				while (!$treedata->EOF) {					$rec =& $treedata->fields;					echo "<tree";					echo value_xml_attr('text', $attrs['text'], $rec);					echo value_xml_attr('action', $attrs['action'], $rec);					echo value_xml_attr('src', $attrs['branch'], $rec);					$icon = $this->icon(value($attrs['icon'], $rec));					echo value_xml_attr('icon', $icon, $rec);					echo value_xml_attr('iconaction', $attrs['iconAction'], $rec);					if (!empty($attrs['openicon'])) {						$icon = $this->icon(value($attrs['openIcon'], $rec));					}					echo value_xml_attr('openicon', $icon, $rec);					echo value_xml_attr('tooltip', $attrs['toolTip'], $rec);					echo " />\n";					$treedata->moveNext();				}			} else {				$msg = isset($attrs['nodata']) ? $attrs['nodata'] : $lang['strnoobjects'];				echo "<tree text=\"{$msg}\" onaction=\"tree.getSelected().getParent().reload()\" icon=\"", $this->icon('ObjectNotFound'), "\" />\n";			}			if (!isset($attrs['nofoot']) || $attrs['nofoot'] === false) {				echo "</tree>\n";			}		}		function adjustTabsForTree(&$tabs) {			include_once('./classes/ArrayRecordSet.php');			foreach ($tabs as $i => $tab) {				if ((isset($tab['hide']) && $tab['hide'] === true) || (isset($tab['tree']) && $tab['tree'] === false)) {					unset($tabs[$i]);				}			}			return new ArrayRecordSet($tabs);		}		function icon($icon) {			global $conf;			$path = "images/themes/{$conf['theme']}/{$icon}";			if (file_exists($path.'.png')) return $path.'.png';			if (file_exists($path.'.gif')) return $path.'.gif';			$path = "images/themes/default/{$icon}";			if (file_exists($path.'.png')) return $path.'.png';			if (file_exists($path.'.gif')) return $path.'.gif';			return '';		}		/**		 * Function to escape command line parameters		 * @param $str The string to escape		 * @return The escaped string		 */		function escapeShellArg($str) {			global $data, $lang;			if (strtoupper(substr(PHP_OS, 0, 3)) === 'WIN') {				// Due to annoying PHP bugs, shell arguments cannot be escaped				// (command simply fails), so we cannot allow complex objects				// to be dumped.				if (preg_match('/^[_.[:alnum:]]+$/', $str))					return $str;				else {					echo $lang['strcannotdumponwindows'];					exit;				}			}			else				return escapeshellarg($str);		}		/**		 * Function to escape command line programs		 * @param $str The string to escape		 * @return The escaped string		 */		function escapeShellCmd($str) {			global $data;			if (strtoupper(substr(PHP_OS, 0, 3)) === 'WIN') {				$data->fieldClean($str);				return '"' . $str . '"';			}			else				return escapeshellcmd($str);		}		/**		 * Get list of servers' groups if existing in the conf		 * @return a recordset of servers' groups		 */		function getServersGroups() {			global $conf, $lang;			$grps = array();						foreach ($conf['srv_groups'] as $i => $group) {				$grps[$i] = array(					'id' => $i,					'desc' => $group['desc'],				);							}						$grps['all'] = array(				'id' => 'all', 				'desc' => $lang['strallservers'],			);			include_once('./classes/ArrayRecordSet.php');			return new ArrayRecordSet($grps);		}				/**		 * Get list of servers		 * @param $recordset return as RecordSet suitable for printTable if true,		 *                   otherwise just return an array.		 * @param $group a group name to filter the returned servers using $conf[srv_groups]		 */		function getServers($recordset = false, $group = false) {			global $conf;			$logins = isset($_SESSION['webdbLogin']) && is_array($_SESSION['webdbLogin']) ? $_SESSION['webdbLogin'] : array();			$srvs = array();			if (($group !== false) and ($group !== 'all'))				$group = array_fill_keys(explode(',', $conf['srv_groups'][$group]['servers']), 1);						foreach($conf['servers'] as $idx => $info) {				$server_id = $info['host'].':'.$info['port'].':'.$info['sslmode'];				if (($group === false) 					or (isset($group[$idx]))					or ($group === 'all')				) {					$server_id = $info['host'].':'.$info['port'].':'.$info['sslmode'];										if (isset($logins[$server_id])) $srvs[$server_id] = $logins[$server_id];					else $srvs[$server_id] = $info;					$srvs[$server_id]['id'] = $server_id;				}			}			function _cmp_desc($a, $b) {				return strcmp($a['desc'], $b['desc']);			}			uasort($srvs, '_cmp_desc');			if ($recordset) {				include_once('./classes/ArrayRecordSet.php');				return new ArrayRecordSet($srvs);			}			return $srvs;		}		/**		 * Validate and retrieve information on a server.		 * If the parameter isn't supplied then the currently		 * connected server is returned.		 * @param $server_id A server identifier (host:port)		 * @return An associative array of server properties		 */		function getServerInfo($server_id = null) {			global $conf, $_reload_browser, $lang;			if ($server_id === null && isset($_REQUEST['server']))				$server_id = $_REQUEST['server'];			// Check for the server in the logged-in list			if (isset($_SESSION['webdbLogin'][$server_id]))				return $_SESSION['webdbLogin'][$server_id];			// Otherwise, look for it in the conf file			foreach($conf['servers'] as $idx => $info) {				if ($server_id == $info['host'].':'.$info['port'].':'.$info['sslmode']) {					// Automatically use shared credentials if available					if (!isset($info['username']) && isset($_SESSION['sharedUsername'])) {						$info['username'] = $_SESSION['sharedUsername'];						$info['password'] = $_SESSION['sharedPassword'];						$_reload_browser = true;						$this->setServerInfo(null, $info, $server_id);					}					return $info;				}			}			if ($server_id === null){				return null;			} else {				// Unable to find a matching server, are we being hacked?				echo $lang['strinvalidserverparam'];				exit;			}		}		/**		 * Set server information.		 * @param $key parameter name to set, or null to replace all		 *             params with the assoc-array in $value.		 * @param $value the new value, or null to unset the parameter		 * @param $server_id the server identifier, or null for current		 *                   server.		 */		function setServerInfo($key, $value, $server_id = null)		{			if ($server_id === null && isset($_REQUEST['server']))				$server_id = $_REQUEST['server'];			if ($key === null) {				if ($value === null)					unset($_SESSION['webdbLogin'][$server_id]);				else					$_SESSION['webdbLogin'][$server_id] = $value;			} else {				if ($value === null)					unset($_SESSION['webdbLogin'][$server_id][$key]);				else					$_SESSION['webdbLogin'][$server_id][$key] = $value;			}		}				/**		 * Set the current schema		 * @param $schema The schema name		 * @return 0 on success		 * @return $data->seSchema() on error		 */		function setCurrentSchema($schema) {			global $data;						$status = $data->setSchema($schema);			if($status != 0)				return $status;			$_REQUEST['schema'] = $schema;			$this->setHREF();			return 0;		}		/**		 * Save the given SQL script in the history 		 * of the database and server.		 * @param $script the SQL script to save.		 */		function saveScriptHistory($script) {			list($usec, $sec) = explode(' ', microtime());			$time = ((float)$usec + (float)$sec);			$_SESSION['history'][$_REQUEST['server']][$_REQUEST['database']]["$time"] = array(				'query' => $script,				'paginate' => (!isset($_REQUEST['paginate'])? 'f':'t'),				'queryid' => $time,			);		}			/*		 * Output dropdown list to select server and 		 * databases form the popups windows.		 * @param $onchange Javascript action to take when selections change.		 */			function printConnection($onchange) {			global $data, $lang, $misc;			echo "<table style=\"width: 100%\"><tr><td>\n";			echo "<label>";			$misc->printHelp($lang['strserver'], 'pg.server');			echo "</label>";			echo ": <select name=\"server\" {$onchange}>\n";						$servers = $misc->getServers();			foreach($servers as $info) {				if (empty($info['username'])) continue; // not logged on this server				echo "<option value=\"", htmlspecialchars($info['id']), "\"",					((isset($_REQUEST['server']) && $info['id'] == $_REQUEST['server'])) ? ' selected="selected"' : '', ">",					htmlspecialchars("{$info['desc']} ({$info['id']})"), "</option>\n";			}			echo "</select>\n</td><td style=\"text-align: right\">\n";						// Get the list of all databases			$databases = $data->getDatabases();			if ($databases->recordCount() > 0) {				echo "<label>";				$misc->printHelp($lang['strdatabase'], 'pg.database');				echo ": <select name=\"database\" {$onchange}>\n";								//if no database was selected, user should select one				if (!isset($_REQUEST['database']))					echo "<option value=\"\">--</option>\n";								while (!$databases->EOF) {					$dbname = $databases->fields['datname'];					echo "<option value=\"", htmlspecialchars($dbname), "\"",						((isset($_REQUEST['database']) && $dbname == $_REQUEST['database'])) ? ' selected="selected"' : '', ">",						htmlspecialchars($dbname), "</option>\n";					$databases->moveNext();				}				echo "</select></label>\n";			}			else {				$server_info = $misc->getServerInfo();				echo "<input type=\"hidden\" name=\"database\" value=\"", 					htmlspecialchars($server_info['defaultdb']), "\" />\n";			}						echo "</td></tr></table>\n";		}		/**		 * returns an array representing FKs definition for a table, sorted by fields		 * or by constraint.		 * @param $table The table to retrieve FK contraints from		 * @returns the array of FK definition:		 *   array(		 *     'byconstr' => array(		 *       constrain id => array(		 *         confrelid => foreign relation oid		 *         f_schema => foreign schema name		 *         f_table => foreign table name		 *         pattnums => array of parent's fields nums		 *         pattnames => array of parent's fields names		 *         fattnames => array of foreign attributes names		 *       )		 *     ),		 *     'byfield' => array(		 *       attribute num => array (constraint id, ...)		 *     ),		 *     'code' => HTML/js code to include in the page for auto-completion		 *   )		 **/		function getAutocompleteFKProperties($table) {			global $data;			$fksprops = array(				'byconstr' => array(),				'byfield' => array(),				'code' => ''			);			$constrs = $data->getConstraintsWithFields($table);			if (!$constrs->EOF) {				$conrelid = $constrs->fields['conrelid'];				while(!$constrs->EOF) {					if ($constrs->fields['contype'] == 'f') {						if (!isset($fksprops['byconstr'][$constrs->fields['conid']])) {							$fksprops['byconstr'][$constrs->fields['conid']] = array (								'confrelid' => $constrs->fields['confrelid'],								'f_table' => $constrs->fields['f_table'],								'f_schema' => $constrs->fields['f_schema'],								'pattnums' => array(),								'pattnames' => array(),								'fattnames' => array()							);						}						$fksprops['byconstr'][$constrs->fields['conid']]['pattnums'][] = $constrs->fields['p_attnum'];						$fksprops['byconstr'][$constrs->fields['conid']]['pattnames'][] = $constrs->fields['p_field'];						$fksprops['byconstr'][$constrs->fields['conid']]['fattnames'][] = $constrs->fields['f_field'];						if (!isset($fksprops['byfield'][$constrs->fields['p_attnum']]))							$fksprops['byfield'][$constrs->fields['p_attnum']] = array();						$fksprops['byfield'][$constrs->fields['p_attnum']][] = $constrs->fields['conid'];					}					$constrs->moveNext();				}				$fksprops['code'] = "<script type=\"text/javascript\">\n";				$fksprops['code'] .= "var constrs = {};\n";				foreach ($fksprops['byconstr'] as $conid => $props) {					$fksprops['code'] .= "constrs.constr_{$conid} = {\n";					$fksprops['code'] .= 'pattnums: ['. implode(',',$props['pattnums']) ."],\n";					$fksprops['code'] .= "f_table:'". addslashes(htmlentities($props['f_table'], ENT_QUOTES)) ."',\n";					$fksprops['code'] .= "f_schema:'". addslashes(htmlentities($props['f_schema'], ENT_QUOTES)) ."',\n";					$_ = '';					foreach ($props['pattnames'] as $n) {						$_ .= ",'". htmlentities($n, ENT_QUOTES) ."'";					}					$fksprops['code'] .= 'pattnames: ['. substr($_, 1) ."],\n";					$_ = '';					foreach ($props['fattnames'] as $n) {						$_ .= ",'". htmlentities($n, ENT_QUOTES) ."'";					}					$fksprops['code'] .= 'fattnames: ['. substr($_, 1) ."]\n";					$fksprops['code'] .= "};\n";				}				$fksprops['code'] .= "var attrs = {};\n";				foreach ($fksprops['byfield'] as $attnum => $cstrs ) {					$fksprops['code'] .= "attrs.attr_{$attnum} = [". implode(',', $fksprops['byfield'][$attnum]) ."];\n";				}				$fksprops['code'] .= "var table='". addslashes(htmlentities($table, ENT_QUOTES)) ."';";				$fksprops['code'] .= "var server='". htmlentities($_REQUEST['server']) ."';";				$fksprops['code'] .= "var database='". addslashes(htmlentities($_REQUEST['database'], ENT_QUOTES)) ."';";				$fksprops['code'] .= "</script>\n";				$fksprops['code'] .= '<div id="fkbg"></div>';				$fksprops['code'] .= '<div id="fklist"></div>';				$fksprops['code'] .= '<script src="libraries/js/jquery.js" type="text/javascript"></script>';				$fksprops['code'] .= '<script src="js/ac_insert_row.js" type="text/javascript"></script>';			}			else /* we have no foreign keys on this table */				return false;			return $fksprops;		}	}?>
<?php	/**	 * Manage schemas in a database	 *	 * $Id: schemas.php,v 1.22 2007/12/15 22:57:43 ioguix Exp $	 */	// Include application functions	include_once('./libraries/lib.inc.php');	$action = (isset($_REQUEST['action'])) ? $_REQUEST['action'] : '';	if (!isset($msg)) $msg = '';	/**	 * Show default list of schemas in the database	 */	function doDefault($msg = '') {		global $data, $misc, $conf;		global $lang;		$misc->printTrail('database');		$misc->printTabs('database','schemas');		$misc->printMsg($msg);		// Check that the DB actually supports schemas		$schemas = $data->getSchemas();		$columns = array(			'schema' => array(				'title' => $lang['strschema'],				'field' => field('nspname'),				'url'   => "redirect.php?subject=schema&amp;{$misc->href}&amp;",				'vars'  => array('schema' => 'nspname'),			),			'owner' => array(				'title' => $lang['strowner'],				'field' => field('nspowner'),			),			'actions' => array(				'title' => $lang['stractions'],			),			'comment' => array(				'title' => $lang['strcomment'],				'field' => field('nspcomment'),			),		);		$actions = array(			'multiactions' => array(				'keycols' => array('nsp' => 'nspname'),				'url' => 'schemas.php',			),			'drop' => array(				'title' => $lang['strdrop'],				'url'   => "schemas.php?action=drop&amp;{$misc->href}&amp;",				'vars'  => array('nsp' => 'nspname'),				'multiaction' => 'drop',			),			'privileges' => array(				'title' => $lang['strprivileges'],				'url'   => "privileges.php?subject=schema&amp;{$misc->href}&amp;",				'vars'  => array('schema' => 'nspname'),			),			'alter' => array(				'title' => $lang['stralter'],				'url'   => "schemas.php?action=alter&amp;{$misc->href}&amp;",				'vars'  => array('schema' => 'nspname'),			),		);		if (!$data->hasAlterSchema()) unset($actions['alter']);		$misc->printTable($schemas, $columns, $actions, $lang['strnoschemas']);		echo "<p><a class=\"navlink\" href=\"schemas.php?action=create&amp;{$misc->href}\">{$lang['strcreateschema']}</a></p>\n";	}	/**	 * Displays a screen where they can enter a new schema	 */	function doCreate($msg = '') {		global $data, $misc;		global $lang;		$server_info = $misc->getServerInfo();		if (!isset($_POST['formName'])) $_POST['formName'] = '';		if (!isset($_POST['formAuth'])) $_POST['formAuth'] = $server_info['username'];		if (!isset($_POST['formSpc'])) $_POST['formSpc'] = '';		if (!isset($_POST['formComment'])) $_POST['formComment'] = '';		// Fetch all users from the database		$users = $data->getUsers();		$misc->printTrail('database');		$misc->printTitle($lang['strcreateschema'],'pg.schema.create');		$misc->printMsg($msg);		echo "<form action=\"schemas.php\" method=\"post\">\n";		echo "<table style=\"width: 100%\">\n";		echo "\t<tr>\n\t\t<th class=\"data left required\">{$lang['strname']}</th>\n";		echo "\t\t<td class=\"data1\"><input name=\"formName\" size=\"32\" maxlength=\"{$data->_maxNameLen}\" value=\"",			htmlspecialchars($_POST['formName']), "\" /></td>\n\t</tr>\n";		// Owner		echo "\t<tr>\n\t\t<th class=\"data left required\">{$lang['strowner']}</th>\n";		echo "\t\t<td class=\"data1\">\n\t\t\t<select name=\"formAuth\">\n";		while (!$users->EOF) {			$uname = htmlspecialchars($users->fields['usename']);			echo "\t\t\t\t<option value=\"{$uname}\"",				($uname == $_POST['formAuth']) ? ' selected="selected"' : '', ">{$uname}</option>\n";			$users->moveNext();		}		echo "\t\t\t</select>\n\t\t</td>\n\t</tr>\n";		echo "\t<tr>\n\t\t<th class=\"data left\">{$lang['strcomment']}</th>\n";		echo "\t\t<td class=\"data1\"><textarea name=\"formComment\" rows=\"3\" cols=\"32\">",			htmlspecialchars($_POST['formComment']), "</textarea></td>\n\t</tr>\n";		echo "</table>\n";		echo "<p>\n";		echo "<input type=\"hidden\" name=\"action\" value=\"create\" />\n";		echo "<input type=\"hidden\" name=\"database\" value=\"", htmlspecialchars($_REQUEST['database']), "\" />\n";		echo $misc->form;		echo "<input type=\"submit\" name=\"create\" value=\"{$lang['strcreate']}\" />\n";		echo "<input type=\"submit\" name=\"cancel\" value=\"{$lang['strcancel']}\" />\n";		echo "</p>\n";		echo "</form>\n";	}	/**	 * Actually creates the new schema in the database	 */	function doSaveCreate() {		global $data, $lang, $_reload_browser;		// Check that they've given a name		if ($_POST['formName'] == '') doCreate($lang['strschemaneedsname']);		else {			$status = $data->createSchema($_POST['formName'], $_POST['formAuth'], $_POST['formComment']);			if ($status == 0) {				$_reload_browser = true;				doDefault($lang['strschemacreated']);			}			else				doCreate($lang['strschemacreatedbad']);		}	}	/**	 * Display a form to permit editing schema properies.	 * TODO: permit changing owner	 */	function doAlter($msg = '') {		global $data, $misc, $lang;		$misc->printTrail('schema');		$misc->printTitle($lang['stralter'],'pg.schema.alter');		$misc->printMsg($msg);		$schema = $data->getSchemaByName($_REQUEST['schema']);		if ($schema->recordCount() > 0) {			if (!isset($_POST['comment'])) $_POST['comment'] = $schema->fields['nspcomment'];			if (!isset($_POST['schema'])) $_POST['schema'] = $_REQUEST['schema'];			if (!isset($_POST['name'])) $_POST['name'] = $_REQUEST['schema'];			if (!isset($_POST['owner'])) $_POST['owner'] = $schema->fields['ownername'];			echo "<form action=\"schemas.php\" method=\"post\">\n";			echo "<table>\n";			echo "\t<tr>\n";			echo "\t\t<th class=\"data left required\">{$lang['strname']}</th>\n";			echo "\t\t<td class=\"data1\">";			echo "\t\t\t<input name=\"name\" size=\"32\" maxlength=\"{$data->_maxNameLen}\" value=\"",				htmlspecialchars($_POST['name']), "\" />\n";			echo "\t\t</td>\n";			echo "\t</tr>\n";			if ($data->hasAlterSchemaOwner()) {				$users = $data->getUsers();				echo "<tr><th class=\"data left required\">{$lang['strowner']}</th>\n";					echo "<td class=\"data2\"><select name=\"owner\">";					while (!$users->EOF) {						$uname = $users->fields['usename'];						echo "<option value=\"", htmlspecialchars($uname), "\"",						($uname == $_POST['owner']) ? ' selected="selected"' : '', ">", htmlspecialchars($uname), "</option>\n";						$users->moveNext();					}					echo "</select></td></tr>\n";			}			else 				echo "<input name=\"owner\" value=\"{$_POST['owner']}\" type=\"hidden\" />";			echo "\t<tr>\n";			echo "\t\t<th class=\"data\">{$lang['strcomment']}</th>\n";			echo "\t\t<td class=\"data1\"><textarea cols=\"32\" rows=\"3\"name=\"comment\">", htmlspecialchars($_POST['comment']), "</textarea></td>\n";			echo "\t</tr>\n";			echo "</table>\n";			echo "<p><input type=\"hidden\" name=\"action\" value=\"alter\" />\n";			echo "<input type=\"hidden\" name=\"schema\" value=\"", htmlspecialchars($_POST['schema']), "\" />\n";			echo $misc->form;			echo "<input type=\"submit\" name=\"alter\" value=\"{$lang['stralter']}\" />\n";			echo "<input type=\"submit\" name=\"cancel\" value=\"{$lang['strcancel']}\" /></p>\n";			echo "</form>\n";		} else {			echo "<p>{$lang['strnodata']}</p>\n";		}	}	/**	 * Save the form submission containing changes to a schema	 */	function doSaveAlter($msg = '') {		global $data, $misc, $lang, $_reload_browser;		$status = $data->updateSchema($_POST['schema'], $_POST['comment'], $_POST['name'], $_POST['owner']);		if ($status == 0) {			$_reload_browser = true;			doDefault($lang['strschemaaltered']);		}		else			doAlter($lang['strschemaalteredbad']);	}	/**	 * Show confirmation of drop and perform actual drop	 */	function doDrop($confirm) {		global $data, $misc;		global $lang, $_reload_browser;		if (empty($_REQUEST['nsp']) && empty($_REQUEST['ma'])) {			doDefault($lang['strspecifyschematodrop']);			exit();		}		if ($confirm) {			$misc->printTrail('schema');			$misc->printTitle($lang['strdrop'],'pg.schema.drop');			echo "<form action=\"schemas.php\" method=\"post\">\n";			//If multi drop			if (isset($_REQUEST['ma'])) {				foreach($_REQUEST['ma'] as $v) {					$a = unserialize(htmlspecialchars_decode($v, ENT_QUOTES));					echo '<p>', sprintf($lang['strconfdropschema'], $misc->printVal($a['nsp'])), "</p>\n";					echo '<input type="hidden" name="nsp[]" value="', htmlspecialchars($a['nsp']), "\" />\n";				}			}			else {				echo "<p>", sprintf($lang['strconfdropschema'], $misc->printVal($_REQUEST['nsp'])), "</p>\n";				echo "<input type=\"hidden\" name=\"nsp\" value=\"", htmlspecialchars($_REQUEST['nsp']), "\" />\n";			}			echo "<p><input type=\"checkbox\" id=\"cascade\" name=\"cascade\" /> <label for=\"cascade\">{$lang['strcascade']}</label></p>\n";			echo "<p><input type=\"hidden\" name=\"action\" value=\"drop\" />\n";			echo "<input type=\"hidden\" name=\"database\" value=\"", htmlspecialchars($_REQUEST['database']), "\" />\n";			echo $misc->form;			echo "<input type=\"submit\" name=\"drop\" value=\"{$lang['strdrop']}\" />\n";			echo "<input type=\"submit\" name=\"cancel\" value=\"{$lang['strcancel']}\" /></p>\n";			echo "</form>\n";		}		else {			if (is_array($_POST['nsp'])) {				$msg='';				$status = $data->beginTransaction();				if ($status == 0) {					foreach($_POST['nsp'] as $s) {						$status = $data->dropSchema($s, isset($_POST['cascade']));						if ($status == 0)							$msg.= sprintf('%s: %s<br />', htmlentities($s), $lang['strschemadropped']);						else {							$data->endTransaction();							doDefault(sprintf('%s%s: %s<br />', $msg, htmlentities($s), $lang['strschemadroppedbad']));							return;						}					}				}				if($data->endTransaction() == 0) {					// Everything went fine, back to the Default page....					$_reload_browser = true;					doDefault($msg);				}				else doDefault($lang['strschemadroppedbad']);			}			else{				$status = $data->dropSchema($_POST['nsp'], isset($_POST['cascade']));				if ($status == 0) {					$_reload_browser = true;					doDefault($lang['strschemadropped']);				}				else					doDefault($lang['strschemadroppedbad']);			}		}	}	/**	 * Displays options for database download	 */	function doExport($msg = '') {		global $data, $misc;		global $lang;		$misc->printTrail('schema');		$misc->printTabs('schema','export');		$misc->printMsg($msg);		echo "<form action=\"dbexport.php\" method=\"post\">\n";		echo "<table>\n";		echo "<tr><th class=\"data\">{$lang['strformat']}</th><th class=\"data\" colspan=\"2\">{$lang['stroptions']}</th></tr>\n";		// Data only		echo "<tr><th class=\"data left\" rowspan=\"2\">";		echo "<input type=\"radio\" id=\"what1\" name=\"what\" value=\"dataonly\" checked=\"checked\" /><label for=\"what1\">{$lang['strdataonly']}</label></th>\n";		echo "<td>{$lang['strformat']}</td>\n";		echo "<td><select name=\"d_format\">\n";		echo "<option value=\"copy\">COPY</option>\n";		echo "<option value=\"sql\">SQL</option>\n";		echo "</select>\n</td>\n</tr>\n";		echo "<tr><td><label for=\"d_oids\">{$lang['stroids']}</label></td><td><input type=\"checkbox\" id=\"d_oids\" name=\"d_oids\" /></td>\n</tr>\n";		// Structure only		echo "<tr><th class=\"data left\"><input type=\"radio\" id=\"what2\" name=\"what\" value=\"structureonly\" /><label for=\"what2\">{$lang['strstructureonly']}</label></th>\n";		echo "<td><label for=\"s_clean\">{$lang['strdrop']}</label></td><td><input type=\"checkbox\" id=\"s_clean\" name=\"s_clean\" /></td>\n</tr>\n";		// Structure and data		echo "<tr><th class=\"data left\" rowspan=\"3\">";		echo "<input type=\"radio\" id=\"what3\" name=\"what\" value=\"structureanddata\" /><label for=\"what3\">{$lang['strstructureanddata']}</label></th>\n";		echo "<td>{$lang['strformat']}</td>\n";		echo "<td><select name=\"sd_format\">\n";		echo "<option value=\"copy\">COPY</option>\n";		echo "<option value=\"sql\">SQL</option>\n";		echo "</select>\n</td>\n</tr>\n";		echo "<tr><td><label for=\"sd_clean\">{$lang['strdrop']}</label></td><td><input type=\"checkbox\" id=\"sd_clean\" name=\"sd_clean\" /></td>\n</tr>\n";		echo "<tr><td><label for=\"sd_oids\">{$lang['stroids']}</label></td><td><input type=\"checkbox\" id=\"sd_oids\" name=\"sd_oids\" /></td>\n</tr>\n";		echo "</table>\n";		echo "<h3>{$lang['stroptions']}</h3>\n";		echo "<p><input type=\"radio\" id=\"output1\" name=\"output\" value=\"show\" checked=\"checked\" /><label for=\"output1\">{$lang['strshow']}</label>\n";		echo "<br/><input type=\"radio\" id=\"output2\" name=\"output\" value=\"download\" /><label for=\"output2\">{$lang['strdownload']}</label>\n";		// MSIE cannot download gzip in SSL mode - it's just broken		if (!(strstr($_SERVER['HTTP_USER_AGENT'], 'MSIE') && isset($_SERVER['HTTPS']))) {			echo "<br /><input type=\"radio\" id=\"output3\" name=\"output\" value=\"gzipped\" /><label for=\"output3\">{$lang['strdownloadgzipped']}</label>\n";		}		echo "</p>\n";		echo "<p><input type=\"hidden\" name=\"action\" value=\"export\" />\n";		echo "<input type=\"hidden\" name=\"subject\" value=\"schema\" />\n";        echo "<input type=\"hidden\" name=\"database\" value=\"", htmlspecialchars($_REQUEST['database']), "\" />\n";        echo "<input type=\"hidden\" name=\"schema\" value=\"", htmlspecialchars($_REQUEST['schema']), "\" />\n";		echo $misc->form;		echo "<input type=\"submit\" value=\"{$lang['strexport']}\" /></p>\n";		echo "</form>\n";	}	/**	 * Generate XML for the browser tree.	 */	function doTree() {		global $misc, $data, $lang, $slony;		$schemas = $data->getSchemas();		$reqvars = $misc->getRequestVars('schema');		$attrs = array(			'text'   => field('nspname'),			'icon'   => 'Schema',			'toolTip'=> field('nspcomment'),			'action' => url('redirect.php',							$reqvars,							array(								'subject' => 'schema',								'schema'  => field('nspname')							)						),			'branch' => url('schemas.php',							$reqvars,							array(								'action'  => 'subtree',								'schema'  => field('nspname')							)						),		);		$misc->printTreeXML($schemas, $attrs);		exit;	}	function doSubTree() {		global $misc, $data, $lang;		$tabs = $misc->getNavTabs('schema');		$items = $misc->adjustTabsForTree($tabs);		$reqvars = $misc->getRequestVars('schema');		$attrs = array(			'text'   => noEscape(field('title')),			'icon'   => field('icon'),			'action' => url(field('url'),							$reqvars,							field('urlvars', array())						),			'branch' => url(field('url'),							$reqvars,							field('urlvars'),							array('action' => 'tree')						)		);		$misc->printTreeXML($items, $attrs);		exit;	}	if ($action == 'tree') doTree();	if ($action == 'subtree') doSubTree();	$misc->printHeader($lang['strschemas']);	$misc->printBody();	if (isset($_POST['cancel'])) $action = '';	switch ($action) {		case 'create':			if (isset($_POST['create'])) doSaveCreate();			else doCreate();			break;		case 'alter':			if (isset($_POST['alter'])) doSaveAlter();			else doAlter();			break;		case 'drop':			if (isset($_POST['drop'])) doDrop(false);			else doDrop(true);			break;		case 'export':			doExport();			break;		default:			doDefault();			break;	}	$misc->printFooter();?>
<?php	/**	 * List Columns properties in tables	 *	 * $Id: colproperties.php	 */	// Include application functions	include_once('./libraries/lib.inc.php');	$action = (isset($_REQUEST['action'])) ? $_REQUEST['action'] : '';	if (isset($_REQUEST['table']))		$tableName =& $_REQUEST['table'];	elseif (isset($_REQUEST['view']))		$tableName =& $_REQUEST['view'];	else 		die($lang['strnotableprovided']);	/**	 * Displays a screen where they can alter a column	 */	function doAlter($msg = '') {		global $data, $misc, $_reload_browser;		global $lang;		if (!isset($_REQUEST['stage'])) $_REQUEST['stage'] = 1;		switch ($_REQUEST['stage']) {			case 1:				$misc->printTrail('column');				$misc->printTitle($lang['stralter'], 'pg.column.alter'); 				$misc->printMsg($msg);				echo "<script src=\"tables.js\" type=\"text/javascript\"></script>";				echo "<form action=\"colproperties.php\" method=\"post\">\n";				// Output table header				echo "<table>\n";				echo "<tr><th class=\"data required\">{$lang['strname']}</th>\n";				if ($data->hasAlterColumnType()) {					echo "<th class=\"data required\" colspan=\"2\">{$lang['strtype']}</th>\n";					echo "<th class=\"data\">{$lang['strlength']}</th>\n";				}				else {					echo "<th class=\"data required\">{$lang['strtype']}</th>\n";				}				echo "<th class=\"data\">{$lang['strnotnull']}</th>\n<th class=\"data\">{$lang['strdefault']}</th>\n<th class=\"data\">{$lang['strcomment']}</th></tr>\n";				$column = $data->getTableAttributes($_REQUEST['table'], $_REQUEST['column']);				$column->fields['attnotnull'] = $data->phpBool($column->fields['attnotnull']);				// Upon first drawing the screen, load the existing column information				// from the database.				if (!isset($_REQUEST['default'])) {					$_REQUEST['field'] = $column->fields['attname'];					$_REQUEST['type'] = $column->fields['base_type'];					// Check to see if its' an array type...					// XXX: HACKY					if (substr($column->fields['base_type'], strlen($column->fields['base_type']) - 2) == '[]') {						$_REQUEST['type'] = substr($column->fields['base_type'], 0, strlen($column->fields['base_type']) - 2);						$_REQUEST['array'] = '[]';					}					else {						$_REQUEST['type'] = $column->fields['base_type'];						$_REQUEST['array'] = '';					}					// To figure out the length, look in the brackets :(					// XXX: HACKY					if ($column->fields['type'] != $column->fields['base_type'] && preg_match('/\\(([0-9, ]*)\\)/', $column->fields['type'], $bits)) {						$_REQUEST['length'] = $bits[1];					}					else						$_REQUEST['length'] = '';					$_REQUEST['default'] = $_REQUEST['olddefault'] = $column->fields['adsrc'];					if ($column->fields['attnotnull']) $_REQUEST['notnull'] = 'YES';					$_REQUEST['comment'] = $column->fields['comment'];				}								// Column name				echo "<tr><td><input name=\"field\" size=\"16\" maxlength=\"{$data->_maxNameLen}\" value=\"",					htmlspecialchars($_REQUEST['field']), "\" /></td>\n";									// Column type				$escaped_predef_types = array(); // the JS escaped array elements				if ($data->hasAlterColumnType()) {					// Fetch all available types					$types = $data->getTypes(true, false, true);					$types_for_js = array();										echo "<td><select name=\"type\" id=\"type\" onchange=\"checkLengths(document.getElementById('type').value,'');\">\n";									while (!$types->EOF) {						$typname = $types->fields['typname'];						$types_for_js[] = $typname;						echo "\t<option value=\"", htmlspecialchars($typname), "\"", ($typname == $_REQUEST['type']) ? ' selected="selected"' : '', ">",							$misc->printVal($typname), "</option>\n";						$types->moveNext();					}					echo "</select></td>\n";										// Output array type selector					echo "<td><select name=\"array\">\n";					echo "\t<option value=\"\"", ($_REQUEST['array'] == '') ? ' selected="selected"' : '', "></option>\n";					echo "\t<option value=\"[]\"", ($_REQUEST['array'] == '[]') ? ' selected="selected"' : '', ">[ ]</option>\n";					echo "</select></td>\n";					$predefined_size_types = array_intersect($data->predefined_size_types, $types_for_js);					foreach($predefined_size_types as $value) {						$escaped_predef_types[] = "'{$value}'";					}						echo "<td><input name=\"length\" id=\"lengths\" size=\"8\" value=\"",						htmlspecialchars($_REQUEST['length']), "\" /></td>\n";				} else {					// Otherwise draw the read-only type name					echo "<td>", $misc->printVal($data->formatType($column->fields['type'], $column->fields['atttypmod'])), "</td>\n";				}								echo "<td><input type=\"checkbox\" name=\"notnull\"", (isset($_REQUEST['notnull'])) ? ' checked="checked"' : '', " /></td>\n";				echo "<td><input name=\"default\" size=\"20\" value=\"", 					htmlspecialchars($_REQUEST['default']), "\" /></td>\n";				echo "<td><input name=\"comment\" size=\"40\" value=\"", 					htmlspecialchars($_REQUEST['comment']), "\" /></td></tr>\n";				echo "</table>\n";				echo "<p><input type=\"hidden\" name=\"action\" value=\"properties\" />\n";				echo "<input type=\"hidden\" name=\"stage\" value=\"2\" />\n";				echo $misc->form;				echo "<input type=\"hidden\" name=\"table\" value=\"", htmlspecialchars($_REQUEST['table']), "\" />\n";				echo "<input type=\"hidden\" name=\"column\" value=\"", htmlspecialchars($_REQUEST['column']), "\" />\n";				echo "<input type=\"hidden\" name=\"olddefault\" value=\"", htmlspecialchars($_REQUEST['olddefault']), "\" />\n";				if ($column->fields['attnotnull']) echo "<input type=\"hidden\" name=\"oldnotnull\" value=\"on\" />\n";				echo "<input type=\"hidden\" name=\"oldtype\" value=\"", htmlspecialchars($data->formatType($column->fields['type'], $column->fields['atttypmod'])), "\" />\n";				// Add hidden variables to suppress error notices if we don't support altering column type				if (!$data->hasAlterColumnType()) {					echo "<input type=\"hidden\" name=\"type\" value=\"", htmlspecialchars($_REQUEST['type']), "\" />\n";									echo "<input type=\"hidden\" name=\"length\" value=\"", htmlspecialchars($_REQUEST['length']), "\" />\n";									echo "<input type=\"hidden\" name=\"array\" value=\"", htmlspecialchars($_REQUEST['array']), "\" />\n";								}				echo "<input type=\"submit\" value=\"{$lang['stralter']}\" />\n";				echo "<input type=\"submit\" name=\"cancel\" value=\"{$lang['strcancel']}\" /></p>\n";				echo "</form>\n";				echo "<script type=\"text/javascript\">predefined_lengths = new Array(". implode(",",$escaped_predef_types) .");checkLengths(document.getElementById('type').value,'');</script>\n";						break;			case 2:				// Check inputs				if (trim($_REQUEST['field']) == '') {					$_REQUEST['stage'] = 1;					doAlter($lang['strcolneedsname']);					return;				}				if (!isset($_REQUEST['length'])) $_REQUEST['length'] = '';				$status = $data->alterColumn($_REQUEST['table'], $_REQUEST['column'], $_REQUEST['field'], 							     isset($_REQUEST['notnull']), isset($_REQUEST['oldnotnull']), 							     $_REQUEST['default'], $_REQUEST['olddefault'],							     $_REQUEST['type'], $_REQUEST['length'], $_REQUEST['array'], $_REQUEST['oldtype'],							     $_REQUEST['comment']);				if ($status == 0) {					if ($_REQUEST['column'] != $_REQUEST['field']) {						$_REQUEST['column'] = $_REQUEST['field'];						$_reload_browser = true;					}					doDefault($lang['strcolumnaltered']);				}				else {					$_REQUEST['stage'] = 1;					doAlter($lang['strcolumnalteredbad']);					return;				}				break;			default:				echo "<p>{$lang['strinvalidparam']}</p>\n";		}	}	/**	 * Show default list of columns in the table	 */	function doDefault($msg = '', $isTable = true) {		global $data, $conf, $misc, $tableName;		global $lang;		function attPre(&$rowdata) {			global $data;			$rowdata->fields['+type'] = $data->formatType($rowdata->fields['type'], $rowdata->fields['atttypmod']);		}				if (empty($_REQUEST['column']))			$msg.= "<br/>{$lang['strnoobjects']}";					$misc->printTrail('column');			//$misc->printTitle($lang['strcolprop']);			$misc->printTabs('column','properties');			$misc->printMsg($msg);		if (! empty($_REQUEST['column'])) {			// Get table			$tdata = $data->getTable($tableName);			// Get columns			$attrs = $data->getTableAttributes($tableName, $_REQUEST['column']);			// Show comment if any			if ($attrs->fields['comment'] !== null)				echo "<p class=\"comment\">", $misc->printVal($attrs->fields['comment']), "</p>\n";			$column = array(				'column' => array(					'title' => $lang['strcolumn'],					'field' => field('attname'),				),				'type' => array(					'title' => $lang['strtype'],					'field' => field('+type'),				)			);					if ($isTable) {				$column['notnull'] = array(					'title' => $lang['strnotnull'],					'field' => field('attnotnull'),					'type'  => 'bool',					'params'=> array('true' => 'NOT NULL', 'false' => '')				);				$column['default'] = array(					'title' => $lang['strdefault'],					'field' => field('adsrc'),				);			}			$actions=array();			$misc->printTable($attrs, $column, $actions, null, 'attPre');			echo "<br />\n";			echo "<ul class=\"navlink\">\n";			$f_attname = $_REQUEST['column'];			$f_table = $tableName;			$f_schema = $data->_schema;			$data->fieldClean($f_attname);			$data->fieldClean($f_table);			$data->fieldClean($f_schema);			$query_url = urlencode("SELECT \"{$f_attname}\", count(*) AS \"count\" FROM \"{$f_schema}\".\"{$f_table}\" GROUP BY \"{$f_attname}\" ORDER BY \"{$f_attname}\"") ;			if ($isTable) {				$return_url = urlencode("colproperties.php?{$misc->href}&amp;table=". urlencode($tableName)					."&amp;column=". urlencode($_REQUEST['column']));				/* Browse link */				/* FIXME browsing a col should somehow be a action so we don't				 * send an ugly SQL in the URL */				echo "\t<li><a href=\"display.php?{$misc->href}&amp;subject=column&amp;table=",					urlencode($_REQUEST['table']),					"&amp;column=", urlencode($_REQUEST['column']),					"&amp;return_url={$return_url}&amp;return_desc=", urlencode($lang['strback']), 					"&amp;query={$query_url}\">{$lang['strbrowse']}</a></li>\n";				/* Edit link */				echo "\t<li><a href=\"colproperties.php?action=properties&amp;{$misc->href}&amp;table=", urlencode($tableName),				    "&amp;column=", urlencode($_REQUEST['column']) . "\">{$lang['stralter']}</a></li>\n";									echo "\t<li><a href=\"tblproperties.php?action=confirm_drop&amp;{$misc->href}&amp;table=", urlencode($tableName),						"&amp;column=" . urlencode($_REQUEST['column']) . "\">{$lang['strdrop']}</a></li>\n";			} else {				$return_url = urlencode("colproperties.php?{$misc->href}&amp;view=". urlencode($tableName)					."&amp;column=". urlencode($_REQUEST['column']));				/* Browse link */				echo "\t<li><a href=\"display.php?{$misc->href}&amp;subject=column&amp;column=",					urlencode($_REQUEST['column']), "&amp;return_url={$return_url}&amp;return_desc=", urlencode($lang['strback']),					"&amp;query={$query_url}\">{$lang['strbrowse']}</a></li>\n";			}			echo "</ul>\n";		}	}	$misc->printHeader($lang['strtables'] . ' - ' . $tableName);	$misc->printBody();	if (isset($_REQUEST['view']))		doDefault(null, false);	else		switch ($action) {			case 'properties':				if (isset($_POST['cancel'])) doDefault();				else doAlter();				break;			default:				doDefault();				break;		}		$misc->printFooter();?>
<?php	/**	 * Manage conversions in a database	 *	 * $Id: conversions.php,v 1.15 2007/08/31 18:30:10 ioguix Exp $	 */	// Include application functions	include_once('./libraries/lib.inc.php');		$action = (isset($_REQUEST['action'])) ? $_REQUEST['action'] : '';	if (!isset($msg)) $msg = '';	/**	 * Show default list of conversions in the database	 */	function doDefault($msg = '') {		global $data, $conf, $misc, $database;		global $lang;		$misc->printTrail('schema');		$misc->printTabs('schema', 'conversions');		$misc->printMsg($msg);				$conversions = $data->getconversions();				$columns = array(			'conversion' => array(				'title' => $lang['strname'],				'field' => field('conname'),			),			'source_encoding' => array(				'title' => $lang['strsourceencoding'],				'field' => field('conforencoding'),			),			'target_encoding' => array(				'title' => $lang['strtargetencoding'],				'field' => field('contoencoding'),			),			'default' => array(				'title' => $lang['strdefault'],				'field' => field('condefault'),				'type'  => 'yesno',			),			'comment' => array(				'title' => $lang['strcomment'],				'field' => field('concomment'),			),		);				$actions = array();				$misc->printTable($conversions, $columns, $actions, $lang['strnoconversions']);	}		/**	 * Generate XML for the browser tree.	 */	function doTree() {		global $misc, $data;				$conversions = $data->getconversions();				$attrs = array(			'text'   => field('conname'),			'icon'   => 'Conversion',			'toolTip'=> field('concomment')		);				$misc->printTreeXML($conversions, $attrs);		exit;	}		if ($action == 'tree') doTree();		$misc->printHeader($lang['strconversions']);	$misc->printBody();	switch ($action) {		default:			doDefault();			break;	}		$misc->printFooter();?>
