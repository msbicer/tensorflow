<?php	/**	 * Manage conversions in a database	 *	 * $Id: conversions.php,v 1.15 2007/08/31 18:30:10 ioguix Exp $	 */	// Include application functions	include_once('./libraries/lib.inc.php');		$action = (isset($_REQUEST['action'])) ? $_REQUEST['action'] : '';	if (!isset($msg)) $msg = '';	/**	 * Show default list of conversions in the database	 */	function doDefault($msg = '') {		global $data, $conf, $misc, $database;		global $lang;		$misc->printTrail('schema');		$misc->printTabs('schema', 'conversions');		$misc->printMsg($msg);				$conversions = $data->getconversions();				$columns = array(			'conversion' => array(				'title' => $lang['strname'],				'field' => field('conname'),			),			'source_encoding' => array(				'title' => $lang['strsourceencoding'],				'field' => field('conforencoding'),			),			'target_encoding' => array(				'title' => $lang['strtargetencoding'],				'field' => field('contoencoding'),			),			'default' => array(				'title' => $lang['strdefault'],				'field' => field('condefault'),				'type'  => 'yesno',			),			'comment' => array(				'title' => $lang['strcomment'],				'field' => field('concomment'),			),		);				$actions = array();				$misc->printTable($conversions, $columns, $actions, $lang['strnoconversions']);	}		/**	 * Generate XML for the browser tree.	 */	function doTree() {		global $misc, $data;				$conversions = $data->getconversions();				$attrs = array(			'text'   => field('conname'),			'icon'   => 'Conversion',			'toolTip'=> field('concomment')		);				$misc->printTreeXML($conversions, $attrs);		exit;	}		if ($action == 'tree') doTree();		$misc->printHeader($lang['strconversions']);	$misc->printBody();	switch ($action) {		default:			doDefault();			break;	}		$misc->printFooter();?>
<?php	/**	 * List tables in a database	 *	 * $Id: tables.php,v 1.112 2008/06/16 22:38:46 ioguix Exp $	 */	// Include application functions	include_once('./libraries/lib.inc.php');	$action = (isset($_REQUEST['action'])) ? $_REQUEST['action'] : '';	/**	 * Displays a screen where they can enter a new table	 */	function doCreate($msg = '') {		global $data, $misc;		global $lang;		if (!isset($_REQUEST['stage'])) {			$_REQUEST['stage'] = 1;			$default_with_oids = $data->getDefaultWithOid();			if ($default_with_oids == 'off') $_REQUEST['withoutoids'] = 'on';		}		if (!isset($_REQUEST['name'])) $_REQUEST['name'] = '';		if (!isset($_REQUEST['fields'])) $_REQUEST['fields'] = '';		if (!isset($_REQUEST['tblcomment'])) $_REQUEST['tblcomment'] = '';		if (!isset($_REQUEST['spcname'])) $_REQUEST['spcname'] = '';		switch ($_REQUEST['stage']) {			case 1:				// Fetch all tablespaces from the database				if ($data->hasTablespaces()) $tablespaces = $data->getTablespaces();				$misc->printTrail('schema');				$misc->printTitle($lang['strcreatetable'], 'pg.table.create');				$misc->printMsg($msg);				echo "<form action=\"tables.php\" method=\"post\">\n";				echo "<table>\n";				echo "\t<tr>\n\t\t<th class=\"data left required\">{$lang['strname']}</th>\n";				echo "\t\t<td class=\"data\"><input name=\"name\" size=\"32\" maxlength=\"{$data->_maxNameLen}\" value=\"",					htmlspecialchars($_REQUEST['name']), "\" /></td>\n\t</tr>\n";				echo "\t<tr>\n\t\t<th class=\"data left required\">{$lang['strnumcols']}</th>\n";				echo "\t\t<td class=\"data\"><input name=\"fields\" size=\"5\" maxlength=\"{$data->_maxNameLen}\" value=\"",					htmlspecialchars($_REQUEST['fields']), "\" /></td>\n\t</tr>\n";				echo "\t<tr>\n\t\t<th class=\"data left\">{$lang['stroptions']}</th>\n";				echo "\t\t<td class=\"data\"><label for=\"withoutoids\"><input type=\"checkbox\" id=\"withoutoids\" name=\"withoutoids\"", isset($_REQUEST['withoutoids']) ? ' checked="checked"' : '', " />WITHOUT OIDS</label></td>\n\t</tr>\n";				// Tablespace (if there are any)				if ($data->hasTablespaces() && $tablespaces->recordCount() > 0) {					echo "\t<tr>\n\t\t<th class=\"data left\">{$lang['strtablespace']}</th>\n";					echo "\t\t<td class=\"data1\">\n\t\t\t<select name=\"spcname\">\n";					// Always offer the default (empty) option					echo "\t\t\t\t<option value=\"\"",						($_REQUEST['spcname'] == '') ? ' selected="selected"' : '', "></option>\n";					// Display all other tablespaces					while (!$tablespaces->EOF) {						$spcname = htmlspecialchars($tablespaces->fields['spcname']);						echo "\t\t\t\t<option value=\"{$spcname}\"",							($tablespaces->fields['spcname'] == $_REQUEST['spcname']) ? ' selected="selected"' : '', ">{$spcname}</option>\n";						$tablespaces->moveNext();					}					echo "\t\t\t</select>\n\t\t</td>\n\t</tr>\n";				}				echo "\t<tr>\n\t\t<th class=\"data left\">{$lang['strcomment']}</th>\n";				echo "\t\t<td><textarea name=\"tblcomment\" rows=\"3\" cols=\"32\">",					htmlspecialchars($_REQUEST['tblcomment']), "</textarea></td>\n\t</tr>\n";				echo "</table>\n";				echo "<p><input type=\"hidden\" name=\"action\" value=\"create\" />\n";				echo "<input type=\"hidden\" name=\"stage\" value=\"2\" />\n";				echo $misc->form;				echo "<input type=\"submit\" value=\"{$lang['strnext']}\" />\n";				echo "<input type=\"submit\" name=\"cancel\" value=\"{$lang['strcancel']}\" /></p>\n";				echo "</form>\n";				break;			case 2:				global $lang;				// Check inputs				$fields = trim($_REQUEST['fields']);				if (trim($_REQUEST['name']) == '') {					$_REQUEST['stage'] = 1;					doCreate($lang['strtableneedsname']);					return;				}				elseif ($fields == '' || !is_numeric($fields) || $fields != (int)$fields || $fields < 1)  {					$_REQUEST['stage'] = 1;					doCreate($lang['strtableneedscols']);					return;				}				$types = $data->getTypes(true, false, true);				$types_for_js = array();				$misc->printTrail('schema');				$misc->printTitle($lang['strcreatetable'], 'pg.table.create');				$misc->printMsg($msg);				echo "<script src=\"tables.js\" type=\"text/javascript\"></script>";				echo "<form action=\"tables.php\" method=\"post\">\n";				// Output table header				echo "<table>\n";				echo "\t<tr><th colspan=\"2\" class=\"data required\">{$lang['strcolumn']}</th><th colspan=\"2\" class=\"data required\">{$lang['strtype']}</th>";				echo "<th class=\"data\">{$lang['strlength']}</th><th class=\"data\">{$lang['strnotnull']}</th>";				echo "<th class=\"data\">{$lang['struniquekey']}</th><th class=\"data\">{$lang['strprimarykey']}</th>";				echo "<th class=\"data\">{$lang['strdefault']}</th><th class=\"data\">{$lang['strcomment']}</th></tr>\n";				for ($i = 0; $i < $_REQUEST['fields']; $i++) {					if (!isset($_REQUEST['field'][$i])) $_REQUEST['field'][$i] = '';					if (!isset($_REQUEST['length'][$i])) $_REQUEST['length'][$i] = '';					if (!isset($_REQUEST['default'][$i])) $_REQUEST['default'][$i] = '';					if (!isset($_REQUEST['colcomment'][$i])) $_REQUEST['colcomment'][$i] = '';					echo "\t<tr>\n\t\t<td>", $i + 1, ".&nbsp;</td>\n";					echo "\t\t<td><input name=\"field[{$i}]\" size=\"16\" maxlength=\"{$data->_maxNameLen}\" value=\"",						htmlspecialchars($_REQUEST['field'][$i]), "\" /></td>\n";					echo "\t\t<td>\n\t\t\t<select name=\"type[{$i}]\" id=\"types{$i}\" onchange=\"checkLengths(this.options[this.selectedIndex].value,{$i});\">\n";					// Output any "magic" types					foreach ($data->extraTypes as $v) {						$types_for_js[strtolower($v)] = 1;						echo "\t\t\t\t<option value=\"", htmlspecialchars($v), "\"",						(isset($_REQUEST['type'][$i]) && $v == $_REQUEST['type'][$i]) ? ' selected="selected"' : '', ">",							$misc->printVal($v), "</option>\n";					}					$types->moveFirst();					while (!$types->EOF) {						$typname = $types->fields['typname'];						$types_for_js[$typname] = 1;						echo "\t\t\t\t<option value=\"", htmlspecialchars($typname), "\"",						(isset($_REQUEST['type'][$i]) && $typname == $_REQUEST['type'][$i]) ? ' selected="selected"' : '', ">",							$misc->printVal($typname), "</option>\n";						$types->moveNext();					}					echo "\t\t\t</select>\n\t\t\n";					if($i==0) { // only define js types array once						$predefined_size_types = array_intersect($data->predefined_size_types,array_keys($types_for_js));						$escaped_predef_types = array(); // the JS escaped array elements						foreach($predefined_size_types as $value) {							$escaped_predef_types[] = "'{$value}'";						}						echo "<script type=\"text/javascript\">predefined_lengths = new Array(". implode(",",$escaped_predef_types) .");</script>\n\t</td>";					}					// Output array type selector					echo "\t\t<td>\n\t\t\t<select name=\"array[{$i}]\">\n";					echo "\t\t\t\t<option value=\"\"", (isset($_REQUEST['array'][$i]) && $_REQUEST['array'][$i] == '') ? ' selected="selected"' : '', "></option>\n";					echo "\t\t\t\t<option value=\"[]\"", (isset($_REQUEST['array'][$i]) && $_REQUEST['array'][$i] == '[]') ? ' selected="selected"' : '', ">[ ]</option>\n";					echo "\t\t\t</select>\n\t\t</td>\n";					echo "\t\t<td><input name=\"length[{$i}]\" id=\"lengths{$i}\" size=\"10\" value=\"",						htmlspecialchars($_REQUEST['length'][$i]), "\" /></td>\n";					echo "\t\t<td><input type=\"checkbox\" name=\"notnull[{$i}]\"", (isset($_REQUEST['notnull'][$i])) ? ' checked="checked"' : '', " /></td>\n";					echo "\t\t<td style=\"text-align: center\"><input type=\"checkbox\" name=\"uniquekey[{$i}]\""						.(isset($_REQUEST['uniquekey'][$i]) ? ' checked="checked"' :'')." /></td>\n";					echo "\t\t<td style=\"text-align: center\"><input type=\"checkbox\" name=\"primarykey[{$i}]\" "						.(isset($_REQUEST['primarykey'][$i]) ? ' checked="checked"' : '')						." /></td>\n";					echo "\t\t<td><input name=\"default[{$i}]\" size=\"20\" value=\"",						htmlspecialchars($_REQUEST['default'][$i]), "\" /></td>\n";					echo "\t\t<td><input name=\"colcomment[{$i}]\" size=\"40\" value=\"",						htmlspecialchars($_REQUEST['colcomment'][$i]), "\" />						<script type=\"text/javascript\">checkLengths(document.getElementById('types{$i}').value,{$i});</script>						</td>\n\t</tr>\n";				}				echo "</table>\n";				echo "<p><input type=\"hidden\" name=\"action\" value=\"create\" />\n";				echo "<input type=\"hidden\" name=\"stage\" value=\"3\" />\n";				echo $misc->form;				echo "<input type=\"hidden\" name=\"name\" value=\"", htmlspecialchars($_REQUEST['name']), "\" />\n";				echo "<input type=\"hidden\" name=\"fields\" value=\"", htmlspecialchars($_REQUEST['fields']), "\" />\n";				if (isset($_REQUEST['withoutoids'])) {					echo "<input type=\"hidden\" name=\"withoutoids\" value=\"true\" />\n";				}				echo "<input type=\"hidden\" name=\"tblcomment\" value=\"", htmlspecialchars($_REQUEST['tblcomment']), "\" />\n";				if (isset($_REQUEST['spcname'])) {					echo "<input type=\"hidden\" name=\"spcname\" value=\"", htmlspecialchars($_REQUEST['spcname']), "\" />\n";				}				echo "<input type=\"submit\" value=\"{$lang['strcreate']}\" />\n";				echo "<input type=\"submit\" name=\"cancel\" value=\"{$lang['strcancel']}\" /></p>\n";				echo "</form>\n";				break;			case 3:				global $data, $lang, $_reload_browser;				if (!isset($_REQUEST['notnull'])) $_REQUEST['notnull'] = array();				if (!isset($_REQUEST['uniquekey'])) $_REQUEST['uniquekey'] = array();				if (!isset($_REQUEST['primarykey'])) $_REQUEST['primarykey'] = array();				if (!isset($_REQUEST['length'])) $_REQUEST['length'] = array();				// Default tablespace to null if it isn't set				if (!isset($_REQUEST['spcname'])) $_REQUEST['spcname'] = null;				// Check inputs				$fields = trim($_REQUEST['fields']);				if (trim($_REQUEST['name']) == '') {					$_REQUEST['stage'] = 1;					doCreate($lang['strtableneedsname']);					return;				}				elseif ($fields == '' || !is_numeric($fields) || $fields != (int)$fields || $fields <= 0)  {					$_REQUEST['stage'] = 1;					doCreate($lang['strtableneedscols']);					return;				}				$status = $data->createTable($_REQUEST['name'], $_REQUEST['fields'], $_REQUEST['field'],								$_REQUEST['type'], $_REQUEST['array'], $_REQUEST['length'], $_REQUEST['notnull'], $_REQUEST['default'],								isset($_REQUEST['withoutoids']), $_REQUEST['colcomment'], $_REQUEST['tblcomment'], $_REQUEST['spcname'],								$_REQUEST['uniquekey'], $_REQUEST['primarykey']);				if ($status == 0) {					$_reload_browser = true;					doDefault($lang['strtablecreated']);				}				elseif ($status == -1) {					$_REQUEST['stage'] = 2;					doCreate($lang['strtableneedsfield']);					return;				}				else {					$_REQUEST['stage'] = 2;					doCreate($lang['strtablecreatedbad']);					return;				}				break;			default:				echo "<p>{$lang['strinvalidparam']}</p>\n";		}	}	/**	 * Dsiplay a screen where user can create a table from an existing one.	 * We don't have to check if pg supports schema cause create table like	 * is available under pg 7.4+ which has schema.	 */	function doCreateLike($confirm, $msg = '') {		global $data, $misc, $lang;		if (!$confirm) {			include_once('./classes/Gui.php');			if (!isset($_REQUEST['name'])) $_REQUEST['name'] = '';			if (!isset($_REQUEST['like'])) $_REQUEST['like'] = '';			if (!isset($_REQUEST['tablespace'])) $_REQUEST['tablespace'] = '';			$misc->printTrail('schema');		    $misc->printTitle($lang['strcreatetable'], 'pg.table.create');			$misc->printMsg($msg);			$tbltmp = $data->getTables(true);			$tbltmp = $tbltmp->getArray();			$tables = array();			$tblsel = '';			foreach ($tbltmp as $a) {				$data->fieldClean($a['nspname']);				$data->fieldClean($a['relname']);				$tables["\"{$a['nspname']}\".\"{$a['relname']}\""] = serialize(array('schema' => $a['nspname'], 'table' => $a['relname']));				if ($_REQUEST['like'] == $tables["\"{$a['nspname']}\".\"{$a['relname']}\""]) 					$tblsel = htmlspecialchars($tables["\"{$a['nspname']}\".\"{$a['relname']}\""]);			}			unset($tbltmp);			echo "<form action=\"tables.php\" method=\"post\">\n";			echo "<table>\n\t<tr>\n\t\t<th class=\"data left required\">{$lang['strname']}</th>\n";			echo "\t\t<td class=\"data\"><input name=\"name\" size=\"32\" maxlength=\"{$data->_maxNameLen}\" value=\"", htmlspecialchars($_REQUEST['name']), "\" /></td>\n\t</tr>\n";			echo "\t<tr>\n\t\t<th class=\"data left required\">{$lang['strcreatetablelikeparent']}</th>\n";			echo "\t\t<td class=\"data\">";			echo GUI::printCombo($tables, 'like', true, $tblsel, false);			echo "</td>\n\t</tr>\n";			if ($data->hasTablespaces()) {				$tblsp_ = $data->getTablespaces();				if ($tblsp_->recordCount() > 0) {					$tblsp_ = $tblsp_->getArray();					$tblsp = array();					foreach($tblsp_ as $a) $tblsp[$a['spcname']] = $a['spcname'];					echo "\t<tr>\n\t\t<th class=\"data left\">{$lang['strtablespace']}</th>\n";					echo "\t\t<td class=\"data\">";					echo GUI::printCombo($tblsp, 'tablespace', true, $_REQUEST['tablespace'], false);					echo "</td>\n\t</tr>\n";				}			}			echo "\t<tr>\n\t\t<th class=\"data left\">{$lang['stroptions']}</th>\n\t\t<td class=\"data\">";			echo "<label for=\"withdefaults\"><input type=\"checkbox\" id=\"withdefaults\" name=\"withdefaults\"",				isset($_REQUEST['withdefaults']) ? ' checked="checked"' : '',				"/>{$lang['strcreatelikewithdefaults']}</label>";			if ($data->hasCreateTableLikeWithConstraints()) {				echo "<br /><label for=\"withconstraints\"><input type=\"checkbox\" id=\"withconstraints\" name=\"withconstraints\"",					isset($_REQUEST['withconstraints']) ? ' checked="checked"' : '',					"/>{$lang['strcreatelikewithconstraints']}</label>";			}			if ($data->hasCreateTableLikeWithIndexes()) {				echo "<br /><label for=\"withindexes\"><input type=\"checkbox\" id=\"withindexes\" name=\"withindexes\"",					isset($_REQUEST['withindexes']) ? ' checked="checked"' : '',					"/>{$lang['strcreatelikewithindexes']}</label>";			}			echo "</td>\n\t</tr>\n";			echo "</table>";			echo "<input type=\"hidden\" name=\"action\" value=\"confcreatelike\" />\n";			echo $misc->form;			echo "<p><input type=\"submit\" value=\"{$lang['strcreate']}\" />\n";			echo "<input type=\"submit\" name=\"cancel\" value=\"{$lang['strcancel']}\" /></p>\n";			echo "</form>\n";		}		else {			global $_reload_browser;			if (trim($_REQUEST['name']) == '') {				doCreateLike(false, $lang['strtableneedsname']);				return;			}			if (trim($_REQUEST['like']) == '') {				doCreateLike(false, $lang['strtablelikeneedslike']);				return;			}			if (!isset($_REQUEST['tablespace'])) $_REQUEST['tablespace'] = '';			$status = $data->createTableLike($_REQUEST['name'], unserialize($_REQUEST['like']), isset($_REQUEST['withdefaults']),				isset($_REQUEST['withconstraints']), isset($_REQUEST['withindexes']), $_REQUEST['tablespace']);							if ($status == 0) {				$_reload_browser = true;				doDefault($lang['strtablecreated']);			}			else {				doCreateLike(false, $lang['strtablecreatedbad']);				return;			}		}	}	/**	 * Ask for select parameters and perform select	 */	function doSelectRows($confirm, $msg = '') {		global $data, $misc, $_no_output;		global $lang;		if ($confirm) {			$misc->printTrail('table');			$misc->printTitle($lang['strselect'], 'pg.sql.select');			$misc->printMsg($msg);			$attrs = $data->getTableAttributes($_REQUEST['table']);			echo "<form action=\"tables.php\" method=\"post\" id=\"selectform\">\n";			if ($attrs->recordCount() > 0) {				// JavaScript for select all feature				echo "<script type=\"text/javascript\">\n";				echo "//<![CDATA[\n";				echo "	function selectAll() {\n";				echo "		for (var i=0; i<document.getElementById('selectform').elements.length; i++) {\n";				echo "			var e = document.getElementById('selectform').elements[i];\n";				echo "			if (e.name.indexOf('show') == 0) e.checked = document.getElementById('selectform').selectall.checked;\n";				echo "		}\n";				echo "	}\n";				echo "//]]>\n";				echo "</script>\n";				echo "<table>\n";				// Output table header				echo "<tr><th class=\"data\">{$lang['strshow']}</th><th class=\"data\">{$lang['strcolumn']}</th>";				echo "<th class=\"data\">{$lang['strtype']}</th><th class=\"data\">{$lang['stroperator']}</th>";				echo "<th class=\"data\">{$lang['strvalue']}</th></tr>";				$i = 0;				while (!$attrs->EOF) {					$attrs->fields['attnotnull'] = $data->phpBool($attrs->fields['attnotnull']);					// Set up default value if there isn't one already					if (!isset($_REQUEST['values'][$attrs->fields['attname']]))						$_REQUEST['values'][$attrs->fields['attname']] = null;					if (!isset($_REQUEST['ops'][$attrs->fields['attname']]))						$_REQUEST['ops'][$attrs->fields['attname']] = null;					// Continue drawing row					$id = (($i % 2) == 0 ? '1' : '2');					echo "<tr class=\"data{$id}\">\n";					echo "<td style=\"white-space:nowrap;\">";					echo "<input type=\"checkbox\" name=\"show[", htmlspecialchars($attrs->fields['attname']), "]\"",						isset($_REQUEST['show'][$attrs->fields['attname']]) ? ' checked="checked"' : '', " /></td>";					echo "<td style=\"white-space:nowrap;\">", $misc->printVal($attrs->fields['attname']), "</td>";					echo "<td style=\"white-space:nowrap;\">", $misc->printVal($data->formatType($attrs->fields['type'], $attrs->fields['atttypmod'])), "</td>";					echo "<td style=\"white-space:nowrap;\">";					echo "<select name=\"ops[{$attrs->fields['attname']}]\">\n";					foreach (array_keys($data->selectOps) as $v) {						echo "<option value=\"", htmlspecialchars($v), "\"", ($v == $_REQUEST['ops'][$attrs->fields['attname']]) ? ' selected="selected"' : '',						">", htmlspecialchars($v), "</option>\n";					}					echo "</select>\n</td>\n";					echo "<td style=\"white-space:nowrap;\">", $data->printField("values[{$attrs->fields['attname']}]",						$_REQUEST['values'][$attrs->fields['attname']], $attrs->fields['type']), "</td>";					echo "</tr>\n";					$i++;					$attrs->moveNext();				}				// Select all checkbox				echo "<tr><td colspan=\"5\"><input type=\"checkbox\" id=\"selectall\" name=\"selectall\" onclick=\"javascript:selectAll()\" /><label for=\"selectall\">{$lang['strselectallfields']}</label></td>";				echo "</tr></table>\n";			}			else echo "<p>{$lang['strinvalidparam']}</p>\n";			echo "<p><input type=\"hidden\" name=\"action\" value=\"selectrows\" />\n";			echo "<input type=\"hidden\" name=\"table\" value=\"", htmlspecialchars($_REQUEST['table']), "\" />\n";			echo "<input type=\"hidden\" name=\"subject\" value=\"table\" />\n";			echo $misc->form;			echo "<input type=\"submit\" name=\"select\" value=\"{$lang['strselect']}\" />\n";			echo "<input type=\"submit\" name=\"cancel\" value=\"{$lang['strcancel']}\" /></p>\n";			echo "</form>\n";		}		else {			if (!isset($_POST['show'])) $_POST['show'] = array();			if (!isset($_POST['values'])) $_POST['values'] = array();			if (!isset($_POST['nulls'])) $_POST['nulls'] = array();			// Verify that they haven't supplied a value for unary operators			foreach ($_POST['ops'] as $k => $v) {				if ($data->selectOps[$v] == 'p' && $_POST['values'][$k] != '') {					doSelectRows(true, $lang['strselectunary']);					return;				}			}			if (sizeof($_POST['show']) == 0)				doSelectRows(true, $lang['strselectneedscol']);			else {				// Generate query SQL				$query = $data->getSelectSQL($_REQUEST['table'], array_keys($_POST['show']),					$_POST['values'], $_POST['ops']);				$_REQUEST['query'] = $query;				$_REQUEST['return_url'] = "tables.php?action=confselectrows&amp;{$misc->href}&amp;table={$_REQUEST['table']}";				$_REQUEST['return_desc'] = $lang['strback'];				$_no_output = true;				include('./display.php');				exit;			}		}	}	/**	 * Ask for insert parameters and then actually insert row	 */	function doInsertRow($confirm, $msg = '') {		global $data, $misc, $conf;		global $lang;		if ($confirm) {			$misc->printTrail('table');			$misc->printTitle($lang['strinsertrow'], 'pg.sql.insert');			$misc->printMsg($msg);			$attrs = $data->getTableAttributes($_REQUEST['table']);			if (($conf['autocomplete'] != 'disable')) {				$fksprops = $misc->getAutocompleteFKProperties($_REQUEST['table']);				if ($fksprops !== false)					echo $fksprops['code'];			}			else $fksprops = false;			echo "<form action=\"tables.php\" method=\"post\" id=\"ac_form\">\n";			if ($attrs->recordCount() > 0) {				echo "<table>\n";				// Output table header				echo "<tr><th class=\"data\">{$lang['strcolumn']}</th><th class=\"data\">{$lang['strtype']}</th>";				echo "<th class=\"data\">{$lang['strformat']}</th>";				echo "<th class=\"data\">{$lang['strnull']}</th><th class=\"data\">{$lang['strvalue']}</th></tr>";				$i = 0;				$fields = array();				while (!$attrs->EOF) {					$fields[$attrs->fields['attnum']] = $attrs->fields['attname'];					$attrs->fields['attnotnull'] = $data->phpBool($attrs->fields['attnotnull']);					// Set up default value if there isn't one already					if (!isset($_REQUEST['values'][$attrs->fields['attnum']]))						$_REQUEST['values'][$attrs->fields['attnum']] = $attrs->fields['adsrc'];					// Default format to 'VALUE' if there is no default,					// otherwise default to 'EXPRESSION'					if (!isset($_REQUEST['format'][$attrs->fields['attnum']]))						$_REQUEST['format'][$attrs->fields['attnum']] = ($attrs->fields['adsrc'] === null) ? 'VALUE' : 'EXPRESSION';					// Continue drawing row					$id = (($i % 2) == 0 ? '1' : '2');					echo "<tr class=\"data{$id}\">\n";					echo "<td style=\"white-space:nowrap;\">", $misc->printVal($attrs->fields['attname']), "</td>";					echo "<td style=\"white-space:nowrap;\">\n";					echo $misc->printVal($data->formatType($attrs->fields['type'], $attrs->fields['atttypmod']));					echo "<input type=\"hidden\" name=\"types[{$attrs->fields['attnum']}]\" value=\"",						htmlspecialchars($attrs->fields['type']), "\" /></td>";					echo "<td style=\"white-space:nowrap;\">\n";					echo "<select name=\"format[{$attrs->fields['attnum']}]\">\n";					echo "<option value=\"VALUE\"", ($_REQUEST['format'][$attrs->fields['attnum']] == 'VALUE') ? ' selected="selected"' : '', ">{$lang['strvalue']}</option>\n";					echo "<option value=\"EXPRESSION\"", ($_REQUEST['format'][$attrs->fields['attnum']] == 'EXPRESSION') ? ' selected="selected"' : '', ">{$lang['strexpression']}</option>\n";					echo "</select>\n</td>\n";					echo "<td style=\"white-space:nowrap;\">";					// Output null box if the column allows nulls (doesn't look at CHECKs or ASSERTIONS)					if (!$attrs->fields['attnotnull']) {						echo "<input type=\"checkbox\" name=\"nulls[{$attrs->fields['attnum']}]\"",							isset($_REQUEST['nulls'][$attrs->fields['attnum']]) ? ' checked="checked"' : '', " /></td>";					}					else {						echo "&nbsp;</td>";					}					echo "<td id=\"row_att_{$attrs->fields['attnum']}\" style=\"white-space:nowrap;\">";					if (($fksprops !== false) && isset($fksprops['byfield'][$attrs->fields['attnum']])) {						echo $data->printField("values[{$attrs->fields['attnum']}]", $_REQUEST['values'][$attrs->fields['attnum']], 'fktype'/*force FK*/,							array(								'id' => "attr_{$attrs->fields['attnum']}",								'autocomplete' => 'off'							)						);					}					else {						echo $data->printField("values[{$attrs->fields['attnum']}]", $_REQUEST['values'][$attrs->fields['attnum']], $attrs->fields['type']);					}					echo "</td>\n";					echo "</tr>\n";					$i++;					$attrs->moveNext();				}				echo "</table>\n";				if (!isset($_SESSION['counter'])) { $_SESSION['counter'] = 0; }				echo "<input type=\"hidden\" name=\"action\" value=\"insertrow\" />\n";				echo "<input type=\"hidden\" name=\"fields\" value=\"", htmlentities(serialize($fields),ENT_QUOTES) ,"\" />\n";				echo "<input type=\"hidden\" name=\"protection_counter\" value=\"".$_SESSION['counter']."\" />\n";				echo "<input type=\"hidden\" name=\"table\" value=\"", htmlspecialchars($_REQUEST['table']), "\" />\n";				echo "<p><input type=\"submit\" name=\"insert\" value=\"{$lang['strinsert']}\" />\n";				echo "<input type=\"submit\" name=\"insertandrepeat\" value=\"{$lang['strinsertandrepeat']}\" />\n";				echo "<input type=\"submit\" name=\"cancel\" value=\"{$lang['strcancel']}\" />\n";								if($fksprops !== false) {					if ($conf['autocomplete'] != 'default off')						echo "<input type=\"checkbox\" id=\"no_ac\" value=\"1\" checked=\"checked\" /><label for=\"no_ac\">{$lang['strac']}</label>\n";					else						echo "<input type=\"checkbox\" id=\"no_ac\" value=\"0\" /><label for=\"no_ac\">{$lang['strac']}</label>\n";				}				echo "</p>\n";			}			else { 				echo "<p>{$lang['strnofieldsforinsert']}</p>\n";				echo "<input type=\"submit\" name=\"cancel\" value=\"{$lang['strcancel']}\" />\n";			}			echo $misc->form;			echo "</form>\n";		}		else {			if (!isset($_POST['values'])) $_POST['values'] = array();			if (!isset($_POST['nulls'])) $_POST['nulls'] = array();			$_POST['fields'] = unserialize(htmlspecialchars_decode($_POST['fields'], ENT_QUOTES));			if ($_SESSION['counter']++ == $_POST['protection_counter']) {				$status = $data->insertRow($_POST['table'], $_POST['fields'], $_POST['values'],											$_POST['nulls'], $_POST['format'], $_POST['types']);				if ($status == 0) {					if (isset($_POST['insert']))						doDefault($lang['strrowinserted']);					else {						$_REQUEST['values'] = array();						$_REQUEST['nulls'] = array();						doInsertRow(true, $lang['strrowinserted']);					}				}				else					doInsertRow(true, $lang['strrowinsertedbad']);			} else				doInsertRow(true, $lang['strrowduplicate']);		}	}	/**	 * Show confirmation of empty and perform actual empty	 */	function doEmpty($confirm) {		global $data, $misc;		global $lang;		if (empty($_REQUEST['table']) && empty($_REQUEST['ma'])) {			doDefault($lang['strspecifytabletoempty']);			exit();		}		if ($confirm) {			if (isset($_REQUEST['ma'])) {				$misc->printTrail('schema');				$misc->printTitle($lang['strempty'],'pg.table.empty');				echo "<form action=\"tables.php\" method=\"post\">\n";				foreach ($_REQUEST['ma'] as $v) {					$a = unserialize(htmlspecialchars_decode($v, ENT_QUOTES));					echo "<p>", sprintf($lang['strconfemptytable'], $misc->printVal($a['table'])), "</p>\n";					printf('<input type="hidden" name="table[]" value="%s" />', htmlspecialchars($a['table']));				}			} // END mutli empty			else {				$misc->printTrail('table');				$misc->printTitle($lang['strempty'],'pg.table.empty');				echo "<p>", sprintf($lang['strconfemptytable'], $misc->printVal($_REQUEST['table'])), "</p>\n";				echo "<form action=\"tables.php\" method=\"post\">\n";				echo "<input type=\"hidden\" name=\"table\" value=\"", htmlspecialchars($_REQUEST['table']), "\" />\n";			} // END not mutli empty			echo "<input type=\"hidden\" name=\"action\" value=\"empty\" />\n";			echo $misc->form;			echo "<input type=\"submit\" name=\"empty\" value=\"{$lang['strempty']}\" /> <input type=\"submit\" name=\"cancel\" value=\"{$lang['strcancel']}\" />\n";			echo "</form>\n";		} // END if confirm		else { // Do Empty			if (is_array($_REQUEST['table'])) {				$msg='';				foreach($_REQUEST['table'] as $t) {					$status = $data->emptyTable($t);					if ($status == 0)						$msg.= sprintf('%s: %s<br />', htmlentities($t), $lang['strtableemptied']);					else {						doDefault(sprintf('%s%s: %s<br />', $msg, htmlentities($t), $lang['strtableemptiedbad']));						return;					}				}				doDefault($msg);			} // END mutli empty			else {				$status = $data->emptyTable($_POST['table']);				if ($status == 0)					doDefault($lang['strtableemptied']);				else					doDefault($lang['strtableemptiedbad']);			} // END not mutli empty		} // END do Empty	}	/**	 * Show confirmation of drop and perform actual drop	 */	function doDrop($confirm) {		global $data, $misc;		global $lang, $_reload_browser;		if (empty($_REQUEST['table']) && empty($_REQUEST['ma'])) {			doDefault($lang['strspecifytabletodrop']);			exit();		}		if ($confirm) {			//If multi drop			if (isset($_REQUEST['ma'])) {				$misc->printTrail('schema');				$misc->printTitle($lang['strdrop'], 'pg.table.drop');				echo "<form action=\"tables.php\" method=\"post\">\n";				foreach($_REQUEST['ma'] as $v) {					$a = unserialize(htmlspecialchars_decode($v, ENT_QUOTES));					echo "<p>", sprintf($lang['strconfdroptable'], $misc->printVal($a['table'])), "</p>\n";					printf('<input type="hidden" name="table[]" value="%s" />', htmlspecialchars($a['table']));				}			} else {				$misc->printTrail('table');				$misc->printTitle($lang['strdrop'], 'pg.table.drop');				echo "<p>", sprintf($lang['strconfdroptable'], $misc->printVal($_REQUEST['table'])), "</p>\n";				echo "<form action=\"tables.php\" method=\"post\">\n";				echo "<input type=\"hidden\" name=\"table\" value=\"", htmlspecialchars($_REQUEST['table']), "\" />\n";			}// END if multi drop			echo "<input type=\"hidden\" name=\"action\" value=\"drop\" />\n";			echo $misc->form;			echo "<p><input type=\"checkbox\" id=\"cascade\" name=\"cascade\" /> <label for=\"cascade\">{$lang['strcascade']}</label></p>\n";			echo "<input type=\"submit\" name=\"drop\" value=\"{$lang['strdrop']}\" />\n";			echo "<input type=\"submit\" name=\"cancel\" value=\"{$lang['strcancel']}\" />\n";			echo "</form>\n";		} // END confirm		else {			//If multi drop			if (is_array($_REQUEST['table'])) {				$msg='';				$status = $data->beginTransaction();				if ($status == 0) {					foreach($_REQUEST['table'] as $t) {						$status = $data->dropTable($t, isset($_POST['cascade']));						if ($status == 0)							$msg.= sprintf('%s: %s<br />', htmlentities($t), $lang['strtabledropped']);						else {							$data->endTransaction();							doDefault(sprintf('%s%s: %s<br />', $msg, htmlentities($t), $lang['strtabledroppedbad']));							return;						}					}				}				if($data->endTransaction() == 0) {					// Everything went fine, back to the Default page....					$_reload_browser = true;					doDefault($msg);				}				else doDefault($lang['strtabledroppedbad']);			} else {				$status = $data->dropTable($_POST['table'], isset($_POST['cascade']));				if ($status == 0) {					$_reload_browser = true;					doDefault($lang['strtabledropped']);				}				else					doDefault($lang['strtabledroppedbad']);			}		} // END DROP	}// END Function	/**	 * Show default list of tables in the database	 */	function doDefault($msg = '') {		global $data, $conf, $misc, $data;		global $lang;		$misc->printTrail('schema');		$misc->printTabs('schema','tables');		$misc->printMsg($msg);		$tables = $data->getTables();		$columns = array(			'table' => array(				'title' => $lang['strtable'],				'field' => field('relname'),				'url'		=> "redirect.php?subject=table&amp;{$misc->href}&amp;",				'vars'  => array('table' => 'relname'),			),			'owner' => array(				'title' => $lang['strowner'],				'field' => field('relowner'),			),			'tablespace' => array(				'title' => $lang['strtablespace'],				'field' => field('tablespace')			),			'tuples' => array(				'title' => $lang['strestimatedrowcount'],				'field' => field('reltuples'),				'type'  => 'numeric'			),			'actions' => array(				'title' => $lang['stractions'],			),			'comment' => array(				'title' => $lang['strcomment'],				'field' => field('relcomment'),			),		);		$actions = array(			'multiactions' => array(				'keycols' => array('table' => 'relname'),				'url' => 'tables.php',				'default' => 'analyze',			),			'browse' => array(				'title' => $lang['strbrowse'],				'url'   => "display.php?{$misc->href}&amp;subject=table&amp;return_url=".urlencode("tables.php?{$misc->href}")."&amp;return_desc=".urlencode($lang['strback'])."&amp;",				'vars'  => array('table' => 'relname'),			),			'select' => array(				'title' => $lang['strselect'],				'url'   => "tables.php?action=confselectrows&amp;{$misc->href}&amp;",				'vars'  => array('table' => 'relname'),			),			'insert' => array(				'title' => $lang['strinsert'],				'url'   => "tables.php?action=confinsertrow&amp;{$misc->href}&amp;",				'vars'  => array('table' => 'relname'),			),			'empty' => array(				'title' => $lang['strempty'],				'url'   => "tables.php?action=confirm_empty&amp;{$misc->href}&amp;",				'vars'  => array('table' => 'relname'),				'multiaction' => 'confirm_empty',			),			'alter' => array(				'title' => $lang['stralter'],				'url'	=> "tblproperties.php?action=confirm_alter&amp;{$misc->href}&amp;",				'vars'	=> array('table' => 'relname'),			),			'drop' => array(				'title' => $lang['strdrop'],				'url'   => "tables.php?action=confirm_drop&amp;{$misc->href}&amp;",				'vars'  => array('table' => 'relname'),				'multiaction' => 'confirm_drop',			),			'vacuum' => array(				'title' => $lang['strvacuum'],				'url'   => "tables.php?action=confirm_vacuum&amp;{$misc->href}&amp;",				'vars'  => array('table' => 'relname'),				'multiaction' => 'confirm_vacuum',			),			'analyze' => array(				'title' => $lang['stranalyze'],				'url'   => "tables.php?action=confirm_analyze&amp;{$misc->href}&amp;",				'vars'  => array('table' => 'relname'),				'multiaction' => 'confirm_analyze',			),			'reindex' => array(				'title' => $lang['strreindex'],				'url'   => "tables.php?action=confirm_reindex&amp;{$misc->href}&amp;",				'vars'  => array('table' => 'relname'),				'multiaction' => 'confirm_reindex',			),			//'cluster' TODO ?		);		if (!$data->hasTablespaces()) unset($columns['tablespace']);		$misc->printTable($tables, $columns, $actions, $lang['strnotables']);		echo "<ul class=\"navlink\">\n\t<li><a href=\"tables.php?action=create&amp;{$misc->href}\">{$lang['strcreatetable']}</a></li>\n";		if (($tables->recordCount() > 0) && $data->hasCreateTableLike())			echo "\t<li><a href=\"tables.php?action=createlike&amp;{$misc->href}\">{$lang['strcreatetablelike']}</a></li>\n";		echo "</ul>\n";	}		require('./admin.php');	/**	 * Generate XML for the browser tree.	 */	function doTree() {		global $misc, $data;		$tables = $data->getTables();		$reqvars = $misc->getRequestVars('table');		$attrs = array(			'text'   => field('relname'),			'icon'   => 'Table',			'iconAction' => url('display.php',							$reqvars,							array('table' => field('relname'))						),			'toolTip'=> field('relcomment'),			'action' => url('redirect.php',							$reqvars,							array('table' => field('relname'))						),			'branch' => url('tables.php',							$reqvars,							array (								'action' => 'subtree',								'table' => field('relname')							)						)		);		$misc->printTreeXML($tables, $attrs);		exit;	}	function doSubTree() {		global $misc, $data;		$tabs = $misc->getNavTabs('table');		$items = $misc->adjustTabsForTree($tabs);		$reqvars = $misc->getRequestVars('table');		$attrs = array(			'text'   => noEscape(field('title')),			'icon'   => field('icon'),			'action' => url(				field('url'),				$reqvars,				field('urlvars'),				array('table' => $_REQUEST['table'])			),			'branch' => ifempty(				field('branch'), '', url(					field('url'),					$reqvars,					array(						'action' => 'tree',						'table' => $_REQUEST['table']					)				)			),		);		$misc->printTreeXML($items, $attrs);		exit;	}	if ($action == 'tree') doTree();	if ($action == 'subtree') dosubTree();	$misc->printHeader($lang['strtables']);	$misc->printBody();	switch ($action) {		case 'create':			if (isset($_POST['cancel'])) doDefault();			else doCreate();			break;		case 'createlike':			doCreateLike(false);			break;		case 'confcreatelike':			if (isset($_POST['cancel'])) doDefault();			else doCreateLike(true);			break;		case 'selectrows':			if (!isset($_POST['cancel'])) doSelectRows(false);			else doDefault();			break;		case 'confselectrows':			doSelectRows(true);			break;		case 'insertrow':			if (!isset($_POST['cancel'])) doInsertRow(false);			else doDefault();			break;		case 'confinsertrow':			doInsertRow(true);			break;		case 'empty':			if (isset($_POST['empty'])) doEmpty(false);			else doDefault();			break;		case 'confirm_empty':			doEmpty(true);			break;		case 'drop':			if (isset($_POST['drop'])) doDrop(false);			else doDefault();			break;		case 'confirm_drop':			doDrop(true);			break;		default:			if (adminActions($action, 'table') === false) doDefault();			break;	}	$misc->printFooter();?>
<?php	/**	 * Manage sequences in a database	 *	 * $Id: sequences.php,v 1.49 2007/12/15 22:21:54 ioguix Exp $	 */	// Include application functions	include_once('./libraries/lib.inc.php');	$action = (isset($_REQUEST['action'])) ? $_REQUEST['action'] : '';	if (!isset($msg)) $msg = '';	/**	 * Display list of all sequences in the database/schema	 */	function doDefault($msg = '')	{		global $data, $conf, $misc;		global $lang;		$misc->printTrail('schema');		$misc->printTabs('schema', 'sequences');		$misc->printMsg($msg);		// Get all sequences		$sequences = $data->getSequences();		$columns = array(			'sequence' => array(				'title' => $lang['strsequence'],				'field' => field('seqname'),				'url'   => "sequences.php?action=properties&amp;{$misc->href}&amp;",				'vars'  => array('sequence' => 'seqname'),			),			'owner' => array(				'title' => $lang['strowner'],				'field' => field('seqowner'),			),			'actions' => array(				'title' => $lang['stractions'],			),			'comment' => array(				'title' => $lang['strcomment'],				'field' => field('seqcomment'),			),		);		$actions = array(			'multiactions' => array(				'keycols' => array('sequence' => 'seqname'),				'url' => 'sequences.php',			),			'alter' => array(				'title' => $lang['stralter'],				'url'   => "sequences.php?action=confirm_alter&amp;{$misc->href}&amp;subject=sequence&amp;",				'vars'  => array('sequence' => 'seqname'),			),			'drop' => array(				'title' => $lang['strdrop'],				'url'   => "sequences.php?action=confirm_drop&amp;{$misc->href}&amp;",				'vars'  => array('sequence' => 'seqname'),				'multiaction' => 'confirm_drop',			),			'privileges' => array(				'title' => $lang['strprivileges'],				'url'   => "privileges.php?{$misc->href}&amp;subject=sequence&amp;",				'vars'  => array('sequence' => 'seqname'),			),		);		$misc->printTable($sequences, $columns, $actions, $lang['strnosequences']);		echo "<p><a class=\"navlink\" href=\"sequences.php?action=create&amp;{$misc->href}\">{$lang['strcreatesequence']}</a></p>\n";	}	/**	 * Generate XML for the browser tree.	 */	function doTree() {		global $misc, $data;		$sequences = $data->getSequences();		$reqvars = $misc->getRequestVars('sequence');		$attrs = array(			'text'   => field('seqname'),			'icon'   => 'Sequence',			'toolTip'=> field('seqcomment'),			'action' => url('sequences.php',							$reqvars,							array (								'action' => 'properties',								'sequence' => field('seqname')							)						)		);		$misc->printTreeXML($sequences, $attrs);		exit;	}	/**	 * Display the properties of a sequence	 */	function doProperties($msg = '') {		global $data, $misc;		global $lang;		$misc->printTrail('sequence');		$misc->printTitle($lang['strproperties'],'pg.sequence');		$misc->printMsg($msg);		// Fetch the sequence information		$sequence = $data->getSequence($_REQUEST['sequence']);		if (is_object($sequence) && $sequence->recordCount() > 0) {			$sequence->fields['is_cycled'] = $data->phpBool($sequence->fields['is_cycled']);			$sequence->fields['is_called'] = $data->phpBool($sequence->fields['is_called']);			// Show comment if any			if ($sequence->fields['seqcomment'] !== null)				echo "<p class=\"comment\">", $misc->printVal($sequence->fields['seqcomment']), "</p>\n";			echo "<table border=\"0\">";			echo "<tr><th class=\"data\">{$lang['strname']}</th>";			if ($data->hasAlterSequenceStart()) {				echo "<th class=\"data\">{$lang['strstartvalue']}</th>";			}			echo "<th class=\"data\">{$lang['strlastvalue']}</th>";			echo "<th class=\"data\">{$lang['strincrementby']}</th>";			echo "<th class=\"data\">{$lang['strmaxvalue']}</th>";			echo "<th class=\"data\">{$lang['strminvalue']}</th>";			echo "<th class=\"data\">{$lang['strcachevalue']}</th>";			echo "<th class=\"data\">{$lang['strlogcount']}</th>";			echo "<th class=\"data\">{$lang['strcancycle']}</th>";			echo "<th class=\"data\">{$lang['striscalled']}</th></tr>";			echo "<tr>";			echo "<td class=\"data1\">", $misc->printVal($sequence->fields['seqname']), "</td>";			if ($data->hasAlterSequenceStart()) {				echo "<td class=\"data1\">", $misc->printVal($sequence->fields['start_value']), "</td>";			}			echo "<td class=\"data1\">", $misc->printVal($sequence->fields['last_value']), "</td>";			echo "<td class=\"data1\">", $misc->printVal($sequence->fields['increment_by']), "</td>";			echo "<td class=\"data1\">", $misc->printVal($sequence->fields['max_value']), "</td>";			echo "<td class=\"data1\">", $misc->printVal($sequence->fields['min_value']), "</td>";			echo "<td class=\"data1\">", $misc->printVal($sequence->fields['cache_value']), "</td>";			echo "<td class=\"data1\">", $misc->printVal($sequence->fields['log_cnt']), "</td>";			echo "<td class=\"data1\">", ($sequence->fields['is_cycled'] ? $lang['stryes'] : $lang['strno']), "</td>";			echo "<td class=\"data1\">", ($sequence->fields['is_called'] ? $lang['stryes'] : $lang['strno']), "</td>";			echo "</tr>";			echo "</table>";			echo "<ul class=\"navlink\">\n";			echo "\t<li><a href=\"sequences.php?action=confirm_alter&amp;{$misc->href}&amp;sequence=", urlencode($sequence->fields['seqname']), "\">{$lang['stralter']}</a></li>\n";			echo "\t<li><a href=\"sequences.php?action=confirm_setval&amp;{$misc->href}&amp;sequence=", urlencode($sequence->fields['seqname']), "\">{$lang['strsetval']}</a></li>\n";			echo "\t<li><a href=\"sequences.php?action=nextval&amp;{$misc->href}&amp;sequence=", urlencode($sequence->fields['seqname']), "\">{$lang['strnextval']}</a></li>\n";			if ($data->hasAlterSequenceStart()) {				echo "\t<li><a href=\"sequences.php?action=restart&amp;{$misc->href}&amp;sequence=", urlencode($sequence->fields['seqname']), "\">{$lang['strrestart']}</a></li>\n";			}			echo "\t<li><a href=\"sequences.php?action=reset&amp;{$misc->href}&amp;sequence=", urlencode($sequence->fields['seqname']), "\">{$lang['strreset']}</a></li>\n";			echo "\t<li><a href=\"sequences.php?{$misc->href}\">{$lang['strshowallsequences']}</a></li>\n</ul>\n";		}		else echo "<p>{$lang['strnodata']}</p>\n";	}	/**	 * Drop a sequence	 */	function doDrop($confirm, $msg = '') {		global $data, $misc;		global $lang;		if (empty($_REQUEST['sequence']) && empty($_REQUEST['ma'])) {			doDefault($lang['strspecifysequencetodrop']);			exit();		}				if ($confirm) {			$misc->printTrail('sequence');			$misc->printTitle($lang['strdrop'],'pg.sequence.drop');			$misc->printMsg($msg);						echo "<form action=\"sequences.php\" method=\"post\">\n";						//If multi drop			if (isset($_REQUEST['ma'])) {				foreach($_REQUEST['ma'] as $v) {					$a = unserialize(htmlspecialchars_decode($v, ENT_QUOTES));					echo "<p>", sprintf($lang['strconfdropsequence'], $misc->printVal($a['sequence'])), "</p>\n";					printf('<input type="hidden" name="sequence[]" value="%s" />', htmlspecialchars($a['sequence']));				}			} else {				echo "<p>", sprintf($lang['strconfdropsequence'], $misc->printVal($_REQUEST['sequence'])), "</p>\n";				echo "<input type=\"hidden\" name=\"sequence\" value=\"", htmlspecialchars($_REQUEST['sequence']), "\" />\n";			}			echo "<p><input type=\"checkbox\" id=\"cascade\" name=\"cascade\" /> <label for=\"cascade\">{$lang['strcascade']}</label></p>\n";			echo "<p><input type=\"hidden\" name=\"action\" value=\"drop\" />\n";			echo $misc->form;			echo "<input type=\"submit\" name=\"drop\" value=\"{$lang['strdrop']}\" />\n";			echo "<input type=\"submit\" name=\"cancel\" value=\"{$lang['strcancel']}\" /></p>\n";			echo "</form>\n";		}		else {			if (is_array($_POST['sequence'])) {				$msg='';				$status = $data->beginTransaction();				if ($status == 0) {					foreach($_POST['sequence'] as $s) {						$status = $data->dropSequence($s, isset($_POST['cascade']));						if ($status == 0)							$msg.= sprintf('%s: %s<br />', htmlentities($s), $lang['strsequencedropped']);						else {							$data->endTransaction();							doDefault(sprintf('%s%s: %s<br />', $msg, htmlentities($s), $lang['strsequencedroppedbad']));							return;						}					}				}				if($data->endTransaction() == 0) {					// Everything went fine, back to the Default page....					$_reload_browser = true;					doDefault($msg);				}				else doDefault($lang['strsequencedroppedbad']);			}			else{				$status = $data->dropSequence($_POST['sequence'], isset($_POST['cascade']));				if ($status == 0) {					$_reload_browser = true;					doDefault($lang['strsequencedropped']);				}				else					doDrop(true, $lang['strsequencedroppedbad']);			}		}	}	/**	 * Displays a screen where they can enter a new sequence	 */	function doCreateSequence($msg = '') {		global $data, $misc;		global $lang;		if (!isset($_POST['formSequenceName'])) $_POST['formSequenceName'] = '';		if (!isset($_POST['formIncrement'])) $_POST['formIncrement'] = '';		if (!isset($_POST['formMinValue'])) $_POST['formMinValue'] = '';		if (!isset($_POST['formMaxValue'])) $_POST['formMaxValue'] = '';		if (!isset($_POST['formStartValue'])) $_POST['formStartValue'] = '';		if (!isset($_POST['formCacheValue'])) $_POST['formCacheValue'] = '';		$misc->printTrail('schema');		$misc->printTitle($lang['strcreatesequence'],'pg.sequence.create');		$misc->printMsg($msg);		echo "<form action=\"sequences.php\" method=\"post\">\n";		echo "<table>\n";		echo "<tr><th class=\"data left required\">{$lang['strname']}</th>\n";		echo "<td class=\"data1\"><input name=\"formSequenceName\" size=\"32\" maxlength=\"{$data->_maxNameLen}\" value=\"",			htmlspecialchars($_POST['formSequenceName']), "\" /></td></tr>\n";		echo "<tr><th class=\"data left\">{$lang['strincrementby']}</th>\n";		echo "<td class=\"data1\"><input name=\"formIncrement\" size=\"5\" value=\"",			htmlspecialchars($_POST['formIncrement']), "\" /> </td></tr>\n";		echo "<tr><th class=\"data left\">{$lang['strminvalue']}</th>\n";		echo "<td class=\"data1\"><input name=\"formMinValue\" size=\"5\" value=\"",			htmlspecialchars($_POST['formMinValue']), "\" /></td></tr>\n";		echo "<tr><th class=\"data left\">{$lang['strmaxvalue']}</th>\n";		echo "<td class=\"data1\"><input name=\"formMaxValue\" size=\"5\" value=\"",			htmlspecialchars($_POST['formMaxValue']), "\" /></td></tr>\n";		echo "<tr><th class=\"data left\">{$lang['strstartvalue']}</th>\n";		echo "<td class=\"data1\"><input name=\"formStartValue\" size=\"5\" value=\"",			htmlspecialchars($_POST['formStartValue']), "\" /></td></tr>\n";		echo "<tr><th class=\"data left\">{$lang['strcachevalue']}</th>\n";		echo "<td class=\"data1\"><input name=\"formCacheValue\" size=\"5\" value=\"",			htmlspecialchars($_POST['formCacheValue']), "\" /></td></tr>\n";		echo "<tr><th class=\"data left\"><label for=\"formCycledValue\">{$lang['strcancycle']}</label></th>\n";		echo "<td class=\"data1\"><input type=\"checkbox\" id=\"formCycledValue\" name=\"formCycledValue\" ",			(isset($_POST['formCycledValue']) ? ' checked="checked"' : ''), " /></td></tr>\n";		echo "</table>\n";		echo "<p><input type=\"hidden\" name=\"action\" value=\"save_create_sequence\" />\n";		echo $misc->form;		echo "<input type=\"submit\" name=\"create\" value=\"{$lang['strcreate']}\" />\n";		echo "<input type=\"submit\" name=\"cancel\" value=\"{$lang['strcancel']}\" /></p>\n";		echo "</form>\n";	}	/**	 * Actually creates the new sequence in the database	 */	function doSaveCreateSequence() {		global $data;		global $lang;		// Check that they've given a name and at least one column		if ($_POST['formSequenceName'] == '') doCreateSequence($lang['strsequenceneedsname']);		else {			$status = $data->createSequence($_POST['formSequenceName'],				$_POST['formIncrement'], $_POST['formMinValue'],				$_POST['formMaxValue'], $_POST['formStartValue'],				$_POST['formCacheValue'], isset($_POST['formCycledValue']));			if ($status == 0) {				doDefault($lang['strsequencecreated']);			} else {				doCreateSequence($lang['strsequencecreatedbad']);			}		}	}	/**	 * Restarts a sequence	 */	function doRestart() {		global $data;		global $lang;		$status = $data->restartSequence($_REQUEST['sequence']);		if ($status == 0)			doProperties($lang['strsequencerestart']);		else			doProperties($lang['strsequencerestartbad']);	}	/**	 * Resets a sequence	 */	function doReset() {		global $data;		global $lang;		$status = $data->resetSequence($_REQUEST['sequence']);		if ($status == 0)			doProperties($lang['strsequencereset']);		else			doProperties($lang['strsequenceresetbad']);	}	/**	 * Set Nextval of a sequence	 */	function doNextval() {		global $data;		global $lang;		$status = $data->nextvalSequence($_REQUEST['sequence']);		if ($status == 0)			doProperties($lang['strsequencenextval']);		else			doProperties($lang['strsequencenextvalbad']);	}	/**	 * Function to save after 'setval'ing a sequence	 */	function doSaveSetval() {		global $data, $lang, $_reload_browser;		$status = $data->setvalSequence($_POST['sequence'], $_POST['nextvalue']);		if ($status == 0)			doProperties($lang['strsequencesetval']);		else			doProperties($lang['strsequencesetvalbad']);	}	/**	 * Function to allow 'setval'ing of a sequence	 */	function doSetval($msg = '') {		global $data, $misc;		global $lang;		$misc->printTrail('sequence');		$misc->printTitle($lang['strsetval'], 'pg.sequence');		$misc->printMsg($msg);		// Fetch the sequence information		$sequence = $data->getSequence($_REQUEST['sequence']);		if (is_object($sequence) && $sequence->recordCount() > 0) {			echo "<form action=\"sequences.php\" method=\"post\">\n";			echo "<table border=\"0\">";			echo "<tr><th class=\"data left required\">{$lang['strlastvalue']}</th>\n";			echo "<td class=\"data1\">";			echo "<input name=\"nextvalue\" size=\"32\" maxlength=\"{$data->_maxNameLen}\" value=\"",				$misc->printVal($sequence->fields['last_value']), "\" /></td></tr>\n";			echo "</table>\n";			echo "<p><input type=\"hidden\" name=\"action\" value=\"setval\" />\n";			echo "<input type=\"hidden\" name=\"sequence\" value=\"", htmlspecialchars($_REQUEST['sequence']), "\" />\n";			echo $misc->form;			echo "<input type=\"submit\" name=\"setval\" value=\"{$lang['strsetval']}\" />\n";			echo "<input type=\"submit\" name=\"cancel\" value=\"{$lang['strcancel']}\" /></p>\n";			echo "</form>\n";		}		else echo "<p>{$lang['strnodata']}</p>\n";	}	/**	 * Function to save after altering a sequence	 */	function doSaveAlter() {		global $data, $lang, $_reload_browser, $misc;		if (!isset($_POST['owner'])) $_POST['owner'] = null;		if (!isset($_POST['newschema'])) $_POST['newschema'] = null;		if (!isset($_POST['formIncrement'])) $_POST['formIncrement'] = null;		if (!isset($_POST['formMinValue'])) $_POST['formMinValue'] = null;		if (!isset($_POST['formMaxValue'])) $_POST['formMaxValue'] = null;		if (!isset($_POST['formStartValue'])) $_POST['formStartValue'] = null;		if (!isset($_POST['formRestartValue'])) $_POST['formRestartValue'] = null;		if (!isset($_POST['formCacheValue'])) $_POST['formCacheValue'] = null;		if (!isset($_POST['formCycledValue'])) $_POST['formCycledValue'] = null;		$status = $data->alterSequence($_POST['sequence'], $_POST['name'], $_POST['comment'], $_POST['owner'],			$_POST['newschema'], $_POST['formIncrement'], $_POST['formMinValue'], $_POST['formMaxValue'],			$_POST['formRestartValue'], $_POST['formCacheValue'], isset($_POST['formCycledValue']), $_POST['formStartValue']);		if ($status == 0) {			if ($_POST['sequence'] != $_POST['name']) {				// Jump them to the new view name				$_REQUEST['sequence'] = $_POST['name'];				// Force a browser reload				$_reload_browser = true;			}			if (!empty($_POST['newschema']) && ($_POST['newschema'] != $data->_schema)) {				// Jump them to the new sequence schema				$misc->setCurrentSchema($_POST['newschema']);				$_reload_browser = true;			 }			doProperties($lang['strsequencealtered']);		}		else			doProperties($lang['strsequencealteredbad']);	}	/**	 * Function to allow altering of a sequence	 */	function doAlter($msg = '') {		global $data, $misc;		global $lang;		$misc->printTrail('sequence');		$misc->printTitle($lang['stralter'], 'pg.sequence.alter');		$misc->printMsg($msg);		// Fetch the sequence information		$sequence = $data->getSequence($_REQUEST['sequence']);		if (is_object($sequence) && $sequence->recordCount() > 0) {			if (!isset($_POST['name'])) $_POST['name'] = $_REQUEST['sequence'];			if (!isset($_POST['comment'])) $_POST['comment'] = $sequence->fields['seqcomment'];			if (!isset($_POST['owner'])) $_POST['owner'] = $sequence->fields['seqowner'];			if (!isset($_POST['newschema'])) $_POST['newschema'] = $sequence->fields['nspname'];			// Handle Checkbox Value			$sequence->fields['is_cycled'] = $data->phpBool($sequence->fields['is_cycled']);			if ($sequence->fields['is_cycled']) $_POST['formCycledValue'] = 'on';			echo "<form action=\"sequences.php\" method=\"post\">\n";			echo "<table>\n";			echo "<tr><th class=\"data left required\">{$lang['strname']}</th>\n";			echo "<td class=\"data1\">";			echo "<input name=\"name\" size=\"32\" maxlength=\"{$data->_maxNameLen}\" value=\"",				htmlspecialchars($_POST['name']), "\" /></td></tr>\n";			$server_info = $misc->getServerInfo();			if ($data->isSuperUser($server_info['username'])) {				// Fetch all users				$users = $data->getUsers();				echo "<tr><th class=\"data left required\">{$lang['strowner']}</th>\n";				echo "<td class=\"data1\"><select name=\"owner\">";				while (!$users->EOF) {					$uname = $users->fields['usename'];					echo "<option value=\"", htmlspecialchars($uname), "\"",					($uname == $_POST['owner']) ? ' selected="selected"' : '', ">", htmlspecialchars($uname), "</option>\n";					$users->moveNext();				}				echo "</select></td></tr>\n";			}						if ($data->hasAlterSequenceSchema()) {				$schemas = $data->getSchemas();				echo "<tr><th class=\"data left required\">{$lang['strschema']}</th>\n";				echo "<td class=\"data1\"><select name=\"newschema\">";				while (!$schemas->EOF) {					$schema = $schemas->fields['nspname'];					echo "<option value=\"", htmlspecialchars($schema), "\"",						($schema == $_POST['newschema']) ? ' selected="selected"' : '', ">", htmlspecialchars($schema), "</option>\n";					$schemas->moveNext();				}			    echo "</select></td></tr>\n";			}			echo "<tr><th class=\"data left\">{$lang['strcomment']}</th>\n";			echo "<td class=\"data1\">";			echo "<textarea rows=\"3\" cols=\"32\" name=\"comment\">",				htmlspecialchars($_POST['comment']), "</textarea></td></tr>\n";			if ($data->hasAlterSequenceStart()) {				echo "<tr><th class=\"data left\">{$lang['strstartvalue']}</th>\n";				echo "<td class=\"data1\"><input name=\"formStartValue\" size=\"5\" value=\"",					htmlspecialchars($sequence->fields['start_value']), "\" /></td></tr>\n";			}			echo "<tr><th class=\"data left\">{$lang['strrestartvalue']}</th>\n";			echo "<td class=\"data1\"><input name=\"formRestartValue\" size=\"5\" value=\"",				htmlspecialchars($sequence->fields['last_value']), "\" /></td></tr>\n";			echo "<tr><th class=\"data left\">{$lang['strincrementby']}</th>\n";			echo "<td class=\"data1\"><input name=\"formIncrement\" size=\"5\" value=\"",				htmlspecialchars($sequence->fields['increment_by']), "\" /> </td></tr>\n";			echo "<tr><th class=\"data left\">{$lang['strmaxvalue']}</th>\n";			echo "<td class=\"data1\"><input name=\"formMaxValue\" size=\"5\" value=\"",				htmlspecialchars($sequence->fields['max_value']), "\" /></td></tr>\n";			echo "<tr><th class=\"data left\">{$lang['strminvalue']}</th>\n";			echo "<td class=\"data1\"><input name=\"formMinValue\" size=\"5\" value=\"",				htmlspecialchars($sequence->fields['min_value']), "\" /></td></tr>\n";			echo "<tr><th class=\"data left\">{$lang['strcachevalue']}</th>\n";			echo "<td class=\"data1\"><input name=\"formCacheValue\" size=\"5\" value=\"",				htmlspecialchars($sequence->fields['cache_value']), "\" /></td></tr>\n";			echo "<tr><th class=\"data left\"><label for=\"formCycledValue\">{$lang['strcancycle']}</label></th>\n";			echo "<td class=\"data1\"><input type=\"checkbox\" id=\"formCycledValue\" name=\"formCycledValue\" ",				( isset($_POST['formCycledValue']) ? ' checked="checked"' : ''), " /></td></tr>\n";			echo "</table>\n";			echo "<p><input type=\"hidden\" name=\"action\" value=\"alter\" />\n";			echo $misc->form;			echo "<input type=\"hidden\" name=\"sequence\" value=\"", htmlspecialchars($_REQUEST['sequence']), "\" />\n";			echo "<input type=\"submit\" name=\"alter\" value=\"{$lang['stralter']}\" />\n";			echo "<input type=\"submit\" name=\"cancel\" value=\"{$lang['strcancel']}\" /></p>\n";			echo "</form>\n";		}		else echo "<p>{$lang['strnodata']}</p>\n";	}	if ($action == 'tree') doTree();	// Print header	$misc->printHeader($lang['strsequences']);	$misc->printBody();	switch($action) {		case 'create':			doCreateSequence();			break;		case 'save_create_sequence':			if (isset($_POST['create'])) doSaveCreateSequence();			else doDefault();			break;		case 'properties':			doProperties();			break;		case 'drop':			if (isset($_POST['drop'])) doDrop(false);			else doDefault();			break;		case 'confirm_drop':			doDrop(true);			break;		case 'restart':			doRestart();			break;		case 'reset':			doReset();			break;		case 'nextval':			doNextval();			break;		case 'setval':			if (isset($_POST['setval'])) doSaveSetval();			else doDefault();			break;		case 'confirm_setval':			doSetval();			break;		case 'alter':			if (isset($_POST['alter'])) doSaveAlter();			else doDefault();			break;		case 'confirm_alter':			doAlter();			break;		default:			doDefault();			break;	}	// Print footer	$misc->printFooter();?>
<?php	/**	 * List triggers on a table	 *	 * $Id: triggers.php,v 1.37 2007/09/19 14:42:12 ioguix Exp $	 */	// Include application functions	include_once('./libraries/lib.inc.php');	include_once('./classes/class.select.php');		$action = (isset($_REQUEST['action'])) ? $_REQUEST['action'] : '';	/** 	 * Function to save after altering a trigger	 */	function doSaveAlter() {		global $data, $lang;				$status = $data->alterTrigger($_POST['table'], $_POST['trigger'], $_POST['name']);		if ($status == 0)			doDefault($lang['strtriggeraltered']);		else			doAlter($lang['strtriggeralteredbad']);	}	/**	 * Function to allow altering of a trigger	 */	function doAlter($msg = '') {		global $data, $misc;		global $lang;				$misc->printTrail('trigger');		$misc->printTitle($lang['stralter'],'pg.trigger.alter');		$misc->printMsg($msg);				$triggerdata = $data->getTrigger($_REQUEST['table'], $_REQUEST['trigger']);				if ($triggerdata->recordCount() > 0) {						if (!isset($_POST['name'])) $_POST['name'] = $triggerdata->fields['tgname'];						echo "<form action=\"triggers.php\" method=\"post\">\n";			echo "<table>\n";			echo "<tr><th class=\"data\">{$lang['strname']}</th>\n";			echo "<td class=\"data1\">";			echo "<input name=\"name\" size=\"32\" maxlength=\"{$data->_maxNameLen}\" value=\"", 				htmlspecialchars($_POST['name']), "\" />\n";			echo "</table>\n";			echo "<p><input type=\"hidden\" name=\"action\" value=\"alter\" />\n";			echo "<input type=\"hidden\" name=\"table\" value=\"", htmlspecialchars($_REQUEST['table']), "\" />\n";			echo "<input type=\"hidden\" name=\"trigger\" value=\"", htmlspecialchars($_REQUEST['trigger']), "\" />\n";			echo $misc->form;			echo "<input type=\"submit\" name=\"alter\" value=\"{$lang['strok']}\" />\n";			echo "<input type=\"submit\" name=\"cancel\" value=\"{$lang['strcancel']}\" /></p>\n";			echo "</form>\n";		}		else echo "<p>{$lang['strnodata']}</p>\n";	}		/**	 * Show confirmation of drop and perform actual drop	 */	function doDrop($confirm) {		global $data, $misc;		global $lang;		if ($confirm) {			$misc->printTrail('trigger');			$misc->printTitle($lang['strdrop'],'pg.trigger.drop');			echo "<p>", sprintf($lang['strconfdroptrigger'], $misc->printVal($_REQUEST['trigger']),				$misc->printVal($_REQUEST['table'])), "</p>\n";			echo "<form action=\"triggers.php\" method=\"post\">\n";			echo "<input type=\"hidden\" name=\"action\" value=\"drop\" />\n";			echo "<input type=\"hidden\" name=\"table\" value=\"", htmlspecialchars($_REQUEST['table']), "\" />\n";			echo "<input type=\"hidden\" name=\"trigger\" value=\"", htmlspecialchars($_REQUEST['trigger']), "\" />\n";			echo $misc->form;			echo "<p><input type=\"checkbox\" id=\"cascade\" name=\"cascade\" /> <label for=\"cascade\">{$lang['strcascade']}</label></p>\n";			echo "<input type=\"submit\" name=\"yes\" value=\"{$lang['stryes']}\" />\n";			echo "<input type=\"submit\" name=\"no\" value=\"{$lang['strno']}\" />\n";			echo "</form>\n";		}		else {			$status = $data->dropTrigger($_POST['trigger'], $_POST['table'], isset($_POST['cascade']));			if ($status == 0)				doDefault($lang['strtriggerdropped']);			else				doDefault($lang['strtriggerdroppedbad']);		}	}	/**	 * Show confirmation of enable trigger and perform enabling the trigger	 */	function doEnable($confirm) {		global $data, $misc;		global $lang;		if ($confirm) {			$misc->printTrail('trigger');			$misc->printTitle($lang['strenable'],'pg.table.alter');			echo "<p>", sprintf($lang['strconfenabletrigger'], $misc->printVal($_REQUEST['trigger']),				$misc->printVal($_REQUEST['table'])), "</p>\n";			echo "<form action=\"triggers.php\" method=\"post\">\n";			echo "<input type=\"hidden\" name=\"action\" value=\"enable\" />\n";			echo "<input type=\"hidden\" name=\"table\" value=\"", htmlspecialchars($_REQUEST['table']), "\" />\n";			echo "<input type=\"hidden\" name=\"trigger\" value=\"", htmlspecialchars($_REQUEST['trigger']), "\" />\n";			echo $misc->form;			echo "<input type=\"submit\" name=\"yes\" value=\"{$lang['stryes']}\" />\n";			echo "<input type=\"submit\" name=\"no\" value=\"{$lang['strno']}\" />\n";			echo "</form>\n";		}		else {			$status = $data->enableTrigger($_POST['trigger'], $_POST['table']);			if ($status == 0)				doDefault($lang['strtriggerenabled']);			else				doDefault($lang['strtriggerenabledbad']);		}	}	/**	 * Show confirmation of disable trigger and perform disabling the trigger	 */	function doDisable($confirm) {		global $data, $misc;		global $lang;		if ($confirm) {			$misc->printTrail('trigger');			$misc->printTitle($lang['strdisable'],'pg.table.alter');			echo "<p>", sprintf($lang['strconfdisabletrigger'], $misc->printVal($_REQUEST['trigger']),				$misc->printVal($_REQUEST['table'])), "</p>\n";			echo "<form action=\"triggers.php\" method=\"post\">\n";			echo "<input type=\"hidden\" name=\"action\" value=\"disable\" />\n";			echo "<input type=\"hidden\" name=\"table\" value=\"", htmlspecialchars($_REQUEST['table']), "\" />\n";			echo "<input type=\"hidden\" name=\"trigger\" value=\"", htmlspecialchars($_REQUEST['trigger']), "\" />\n";			echo $misc->form;			echo "<input type=\"submit\" name=\"yes\" value=\"{$lang['stryes']}\" />\n";			echo "<input type=\"submit\" name=\"no\" value=\"{$lang['strno']}\" />\n";			echo "</form>\n";		}		else {			$status = $data->disableTrigger($_POST['trigger'], $_POST['table']);			if ($status == 0)				doDefault($lang['strtriggerdisabled']);			else				doDefault($lang['strtriggerdisabledbad']);		}	}	/**	 * Let them create s.th.	 */	function doCreate($msg = '') {		global $data, $misc;		global $lang;				$misc->printTrail('table');		$misc->printTitle($lang['strcreatetrigger'],'pg.trigger.create');		$misc->printMsg($msg);				// Get all the functions that can be used in triggers		$funcs = $data->getTriggerFunctions();		if ($funcs->recordCount() == 0) {			doDefault($lang['strnofunctions']);			return;		}		/* Populate functions */		$sel0 = new XHTML_Select('formFunction');		while (!$funcs->EOF) {			$sel0->add(new XHTML_Option($funcs->fields['proname']));			$funcs->moveNext();		}		/* Populate times */		$sel1 = new XHTML_Select('formExecTime');		$sel1->set_data($data->triggerExecTimes);		/* Populate events */		$sel2 = new XHTML_Select('formEvent');		$sel2->set_data($data->triggerEvents);				/* Populate occurences */		$sel3 = new XHTML_Select('formFrequency');		$sel3->set_data($data->triggerFrequency);				echo "<form action=\"triggers.php\" method=\"post\">\n";		echo "<table>\n";		echo "<tr>\n";		echo "		<th class=\"data\">{$lang['strname']}</th>\n";		echo "		<th class=\"data\">{$lang['strwhen']}</th>\n";		echo "</tr>\n";		echo "<tr>\n";		echo "		<td class=\"data1\"> <input type=\"text\" name=\"formTriggerName\" size=\"32\" /></td>\n";		echo "		<td class=\"data1\"> ", $sel1->fetch(), "</td>\n";		echo "</tr>\n";		echo "<tr>\n";		echo "    <th class=\"data\">{$lang['strevent']}</th>\n";		echo "    <th class=\"data\">{$lang['strforeach']}</th>\n";		echo "</tr>\n";		echo "<tr>\n";		echo "     <td class=\"data1\"> ", $sel2->fetch(), "</td>\n";		echo "     <td class=\"data1\"> ", $sel3->fetch(), "</td>\n";		echo "</tr>\n";		echo "<tr><th class=\"data\"> {$lang['strfunction']}</th>\n";		echo "<th class=\"data\"> {$lang['strarguments']}</th></tr>\n";		echo "<tr><td class=\"data1\">", $sel0->fetch(), "</td>\n";		echo "<td class=\"data1\">(<input type=\"text\" name=\"formTriggerArgs\" size=\"32\" />)</td>\n";		echo "</tr></table>\n";		echo "<p><input type=\"submit\" value=\"{$lang['strcreate']}\" />\n";		echo "<input type=\"submit\" name=\"cancel\" value=\"{$lang['strcancel']}\" /></p>\n";		echo "<input type=\"hidden\" name=\"action\" value=\"save_create\" />\n";		echo "<input type=\"hidden\" name=\"table\" value=\"", htmlspecialchars($_REQUEST['table']), "\" />\n";		echo $misc->form;		echo "</form>\n";	}		/**	 * Actually creates the new trigger in the database	 */	function doSaveCreate() {		global $data;		global $lang;					// Check that they've given a name and a definition		if ($_POST['formFunction'] == '')			doCreate($lang['strtriggerneedsfunc']);		elseif ($_POST['formTriggerName'] == '')			doCreate($lang['strtriggerneedsname']);		elseif ($_POST['formEvent'] == '') 			doCreate();		else {		 			$status = $data->createTrigger($_POST['formTriggerName'], $_POST['table'],					$_POST['formFunction'], $_POST['formExecTime'], $_POST['formEvent'],					$_POST['formFrequency'], $_POST['formTriggerArgs']);			if ($status == 0)				doDefault($lang['strtriggercreated']);			else				doCreate($lang['strtriggercreatedbad']);		}	}		/**	 * List all the triggers on the table	 */	function doDefault($msg = '') {		global $data, $misc, $database;		global $lang;		function tgPre(&$rowdata) {			global $data, $lang;			// Nasty hack to support pre-7.4 PostgreSQL			$rowdata->fields['+tgdef'] = $rowdata->fields['tgdef'] !== null									? $rowdata->fields['tgdef']									: $data->getTriggerDef($rowdata->fields);		}				$misc->printTrail('table');		$misc->printTabs('table','triggers');		$misc->printMsg($msg);		$triggers = $data->getTriggers($_REQUEST['table']);		$columns = array(			'trigger' => array(				'title' => $lang['strname'],				'field' => field('tgname'),			),			'definition' => array(				'title' => $lang['strdefinition'],				'field' => field('+tgdef'),			),			'function' => array(				'title' => $lang['strfunction'],				'field' => field('proproto'),				'url' => "functions.php?action=properties&amp;server={$_REQUEST['server']}&amp;database={$_REQUEST['database']}&amp;",				'vars' => array(					'schema' => 'pronamespace',					'function' => 'proproto',					'function_oid' => 'prooid',				),			),			'actions' => array(				'title' => $lang['stractions'],			),		);		$actions = array(			'alter' => array(				'title' => $lang['stralter'],				'url'   => "triggers.php?action=confirm_alter&amp;{$misc->href}&amp;table=".urlencode($_REQUEST['table'])."&amp;",				'vars'  => array('trigger' => 'tgname'),			),			'drop' => array(				'title' => $lang['strdrop'],				'url'   => "triggers.php?action=confirm_drop&amp;{$misc->href}&amp;table=".urlencode($_REQUEST['table'])."&amp;",				'vars'  => array('trigger' => 'tgname'),			),		);		if($data->hasDisableTriggers()) {			if(!$data->phpBool($triggers->fields["tgenabled"])) {				$actions['enable'] = array(					'title' => $lang['strenable'],					'url'   => "triggers.php?action=confirm_enable&amp;{$misc->href}&amp;table=".urlencode($_REQUEST['table'])."&amp;",					'vars'  => array('trigger' => 'tgname'),				);			} else {				$actions['disable'] = array(					'title' => $lang['strdisable'],					'url'   => "triggers.php?action=confirm_disable&amp;{$misc->href}&amp;table=".urlencode($_REQUEST['table'])."&amp;",					'vars'  => array('trigger' => 'tgname'),				);			}		}		$misc->printTable($triggers, $columns, $actions, $lang['strnotriggers'], 'tgPre');				echo "<p><a class=\"navlink\" href=\"triggers.php?action=create&amp;{$misc->href}&amp;table=", urlencode($_REQUEST['table']), "\">{$lang['strcreatetrigger']}</a></p>\n";	}	function doTree() {		global $misc, $data;		$triggers = $data->getTriggers($_REQUEST['table']);		$reqvars = $misc->getRequestVars('table');				$attrs = array(			'text'   => field('tgname'),			'icon'   => 'Trigger',		);		$misc->printTreeXML($triggers, $attrs);		exit;	}	if ($action == 'tree') doTree();	$misc->printHeader($lang['strtables'] . ' - ' . $_REQUEST['table'] . ' - ' . $lang['strtriggers']);	$misc->printBody();	switch ($action) {		case 'alter':			if (isset($_POST['alter'])) doSaveAlter();			else doDefault();			break;		case 'confirm_alter':			doAlter();			break;		case 'confirm_enable':			doEnable(true);			break;		case 'confirm_disable':			doDisable(true);			break;		case 'save_create':			if (isset($_POST['cancel'])) doDefault();			else doSaveCreate();			break;		case 'create':			doCreate();			break;		case 'drop':			if (isset($_POST['yes'])) doDrop(false);			else doDefault();			break;		case 'confirm_drop':			doDrop(true);			break;		case 'enable':			if (isset($_POST['yes'])) doEnable(false);			else doDefault();			break;		case 'disable':			if (isset($_POST['yes'])) doDisable(false);			else doDefault();			break;		default:			doDefault();			break;	}		$misc->printFooter();?>
<?php	/**	 * Manage servers	 *	 * $Id: servers.php,v 1.12 2008/02/18 22:20:26 ioguix Exp $	 */	// Include application functions	$_no_db_connection = true;	include_once('./libraries/lib.inc.php');		$action = (isset($_REQUEST['action'])) ? $_REQUEST['action'] : '';	if (!isset($msg)) $msg = '';		function doLogout() {		global $misc, $lang, $_reload_browser;				$server_info = $misc->getServerInfo($_REQUEST['logoutServer']);		$misc->setServerInfo(null, null, $_REQUEST['logoutServer']);		unset($_SESSION['sharedUsername'], $_SESSION['sharedPassword']);		doDefault(sprintf($lang['strlogoutmsg'], $server_info['desc']));				$_reload_browser = true;	}	function doDefault($msg = '') {		global $conf, $misc;		global $lang;				$misc->printTabs('root','servers');		$misc->printMsg($msg);				$group = isset($_GET['group']) ? $_GET['group'] : false;				$servers = $misc->getServers(true, $group);				function svPre(&$rowdata, $actions) {			$actions['logout']['disable'] = empty($rowdata->fields['username']);			return $actions;		}				$columns = array(			'server' => array(				'title' => $lang['strserver'],				'field' => field('desc'),				'url'   => "redirect.php?subject=server&amp;",				'vars'  => array('server' => 'id'),			),			'host' => array(				'title' => $lang['strhost'],				'field' => field('host'),			),			'port' => array(				'title' => $lang['strport'],				'field' => field('port'),			),			'username' => array(				'title' => $lang['strusername'],				'field' => field('username'),			),			'actions' => array(				'title' => $lang['stractions'],			),		);				$actions = array(			'logout' => array(				'title' => $lang['strlogout'],				'url'   => "servers.php?action=logout&amp;",				'vars'  => array('logoutServer' => 'id'),			),		);				if (($group !== false) and isset($conf['srv_groups'][$group])) {			printf("<h2>{$lang['strgroupservers']}</h2>", htmlentities($conf['srv_groups'][$group]['desc']));			$actions['logout']['url'] .= "group=" . htmlentities($group) . "&amp;";		}				$misc->printTable($servers, $columns, $actions, $lang['strnoobjects'], 'svPre');				if (isset($conf['srv_groups'])) {			echo "<br /><ul class=\"navlink\">\n";			echo "\t<li><a href=\"servers.php\">{$lang['strallservers']}</a></li>\n";			foreach ($conf['srv_groups'] as $id => $grp) {				echo "\t<li><a href=\"servers.php?group={$id}\">", htmlentities($grp['desc']), "</a></li>\n";			}			echo "</ul>\n";					}	}		function doTree($group = false) {		global $misc;				$servers = $misc->getServers(true, $group);				$reqvars = $misc->getRequestVars('server');				$attrs = array(			'text'   => field('desc'),						// Show different icons for logged in/out			'icon'   => ifempty(field('username'), 'DisconnectedServer', 'Server'),						'toolTip'=> field('id'),						'action' => url('redirect.php',							$reqvars,							array('server' => field('id'))						),						// Only create a branch url if the user has			// logged into the server.			'branch' => ifempty(field('username'), false,							url('all_db.php',								$reqvars,								array(									'action' => 'tree',									'server' => field('id')								)							)						),		);				$misc->printTreeXML($servers, $attrs);		exit;	}		function doGroupsTree() {		global $misc;				$groups = $misc->getServersGroups();		function escape($fields) {			global $lang;			if ($fields['id'] === 'all') {				return $lang['strallservers'];			}			else return value(field('desc'), $fields, 'xml');		}		$attrs = array(			'text'   => noEscape(callback('escape')),			'icon'   => 'Servers',						'action' => url('servers.php',				array(					'group' => field('id')				)			),			'branch' => url('servers.php',				array(					'action' => 'tree',					'group' => field('id')				)			)		);				$misc->printTreeXML($groups, $attrs);		exit;	}		if ($action == 'tree') {		if (isset($_GET['group'])) doTree($_GET['group']);		else doTree(false);	}	if ($action == 'groupstree') doGroupsTree();		$misc->printHeader($lang['strservers']);	$misc->printBody();	$misc->printTrail('root');	switch ($action) {		case 'logout':			doLogout();			break;		default:			doDefault($msg);			break;	}	$misc->printFooter();?>
<?php	/**	 * List tables in a database	 *	 * $Id: tblproperties.php,v 1.92 2008/01/19 13:46:15 ioguix Exp $	 */	// Include application functions	include_once('./libraries/lib.inc.php');	$action = (isset($_REQUEST['action'])) ? $_REQUEST['action'] : '';	/**	 * Function to save after altering a table	 */	function doSaveAlter() {		global $data, $lang, $_reload_browser, $misc;		// For databases that don't allow owner change		if (!isset($_POST['owner'])) $_POST['owner'] = '';		// Default tablespace to null if it isn't set		if (!isset($_POST['tablespace'])) $_POST['tablespace'] = null;		if (!isset($_POST['newschema'])) $_POST['newschema'] = null;		$status = $data->alterTable($_POST['table'], $_POST['name'], $_POST['owner'], $_POST['newschema'], $_POST['comment'], $_POST['tablespace']);		if ($status == 0) {			// If table has been renamed, need to change to the new name and			// reload the browser frame.			if ($_POST['table'] != $_POST['name']) {				// Jump them to the new table name				$_REQUEST['table'] = $_POST['name'];				// Force a browser reload				$_reload_browser = true;			}			// If schema has changed, need to change to the new schema and reload the browser			if (!empty($_POST['newschema']) && ($_POST['newschema'] != $data->_schema)) {				// Jump them to the new sequence schema				$misc->setCurrentSchema($_POST['newschema']);				$_reload_browser = true;			 }			doDefault($lang['strtablealtered']);		}		else			doAlter($lang['strtablealteredbad']);	}	/**	 * Function to allow altering of a table	 */	function doAlter($msg = '') {		global $data, $misc;		global $lang;		$misc->printTrail('table');		$misc->printTitle($lang['stralter'], 'pg.table.alter');		$misc->printMsg($msg);		// Fetch table info		$table = $data->getTable($_REQUEST['table']);		// Fetch all users		$users = $data->getUsers();		// Fetch all tablespaces from the database		if ($data->hasTablespaces()) $tablespaces = $data->getTablespaces(true);		if ($table->recordCount() > 0) {			if (!isset($_POST['name'])) $_POST['name'] = $table->fields['relname'];			if (!isset($_POST['owner'])) $_POST['owner'] = $table->fields['relowner'];			if (!isset($_POST['newschema'])) $_POST['newschema'] = $table->fields['nspname'];			if (!isset($_POST['comment'])) $_POST['comment'] = $table->fields['relcomment'];			if ($data->hasTablespaces() && !isset($_POST['tablespace'])) $_POST['tablespace'] = $table->fields['tablespace'];			echo "<form action=\"tblproperties.php\" method=\"post\">\n";			echo "<table>\n";			echo "<tr><th class=\"data left required\">{$lang['strname']}</th>\n";			echo "<td class=\"data1\">";			echo "<input name=\"name\" size=\"32\" maxlength=\"{$data->_maxNameLen}\" value=\"",				htmlspecialchars($_POST['name'], ENT_QUOTES), "\" /></td></tr>\n";			$server_info = $misc->getServerInfo();			if ($data->isSuperUser($server_info['username'])) {				echo "<tr><th class=\"data left required\">{$lang['strowner']}</th>\n";				echo "<td class=\"data1\"><select name=\"owner\">";				while (!$users->EOF) {					$uname = $users->fields['usename'];					echo "<option value=\"", htmlspecialchars($uname), "\"",						($uname == $_POST['owner']) ? ' selected="selected"' : '', ">", htmlspecialchars($uname), "</option>\n";					$users->moveNext();				}				echo "</select></td></tr>\n";			}			if ($data->hasAlterTableSchema()) {				$schemas = $data->getSchemas();				echo "<tr><th class=\"data left required\">{$lang['strschema']}</th>\n";				echo "<td class=\"data1\"><select name=\"newschema\">";				while (!$schemas->EOF) {					$schema = $schemas->fields['nspname'];					echo "<option value=\"", htmlspecialchars($schema), "\"",						($schema == $_POST['newschema']) ? ' selected="selected"' : '', ">", htmlspecialchars($schema), "</option>\n";					$schemas->moveNext();				}			    echo "</select></td></tr>\n";			}			// Tablespace (if there are any)			if ($data->hasTablespaces() && $tablespaces->recordCount() > 0) {				echo "\t<tr>\n\t\t<th class=\"data left\">{$lang['strtablespace']}</th>\n";				echo "\t\t<td class=\"data1\">\n\t\t\t<select name=\"tablespace\">\n";				// Always offer the default (empty) option				echo "\t\t\t\t<option value=\"\"",					($_POST['tablespace'] == '') ? ' selected="selected"' : '', "></option>\n";				// Display all other tablespaces				while (!$tablespaces->EOF) {					$spcname = htmlspecialchars($tablespaces->fields['spcname']);					echo "\t\t\t\t<option value=\"{$spcname}\"",						($spcname == $_POST['tablespace']) ? ' selected="selected"' : '', ">{$spcname}</option>\n";					$tablespaces->moveNext();				}				echo "\t\t\t</select>\n\t\t</td>\n\t</tr>\n";			}			echo "<tr><th class=\"data left\">{$lang['strcomment']}</th>\n";			echo "<td class=\"data1\">";			echo "<textarea rows=\"3\" cols=\"32\" name=\"comment\">",				htmlspecialchars($_POST['comment']), "</textarea></td></tr>\n";			echo "</table>\n";			echo "<p><input type=\"hidden\" name=\"action\" value=\"alter\" />\n";			echo "<input type=\"hidden\" name=\"table\" value=\"", htmlspecialchars($_REQUEST['table']), "\" />\n";			echo $misc->form;			echo "<input type=\"submit\" name=\"alter\" value=\"{$lang['stralter']}\" />\n";			echo "<input type=\"submit\" name=\"cancel\" value=\"{$lang['strcancel']}\" /></p>\n";			echo "</form>\n";		}		else echo "<p>{$lang['strnodata']}</p>\n";	}	function doExport($msg = '') {		global $data, $misc;		global $lang;		// Determine whether or not the table has an object ID		$hasID = $data->hasObjectID($_REQUEST['table']);		$misc->printTrail('table');		$misc->printTabs('table','export');		$misc->printMsg($msg);		echo "<form action=\"dataexport.php\" method=\"post\">\n";		echo "<table>\n";		echo "<tr><th class=\"data\">{$lang['strformat']}</th><th class=\"data\" colspan=\"2\">{$lang['stroptions']}</th></tr>\n";		// Data only		echo "<tr><th class=\"data left\" rowspan=\"", ($hasID) ? 2 : 1, "\">";		echo "<input type=\"radio\" id=\"what1\" name=\"what\" value=\"dataonly\" checked=\"checked\" /><label for=\"what1\">{$lang['strdataonly']}</label></th>\n";		echo "<td>{$lang['strformat']}</td>\n";		echo "<td><select name=\"d_format\">\n";		echo "<option value=\"copy\">COPY</option>\n";		echo "<option value=\"sql\">SQL</option>\n";		echo "<option value=\"csv\">CSV</option>\n";		echo "<option value=\"tab\">{$lang['strtabbed']}</option>\n";		echo "<option value=\"html\">XHTML</option>\n";		echo "<option value=\"xml\">XML</option>\n";		echo "</select>\n</td>\n</tr>\n";		if ($hasID) {			echo "<tr><td><label for=\"d_oids\">{$lang['stroids']}</td><td><input type=\"checkbox\" id=\"d_oids\" name=\"d_oids\" /></td>\n</tr>\n";		}		// Structure only		echo "<tr><th class=\"data left\"><input type=\"radio\" id=\"what2\" name=\"what\" value=\"structureonly\" /><label for=\"what2\">{$lang['strstructureonly']}</label></th>\n";		echo "<td><label for=\"s_clean\">{$lang['strdrop']}</label></td><td><input type=\"checkbox\" id=\"s_clean\" name=\"s_clean\" /></td>\n</tr>\n";		// Structure and data		echo "<tr><th class=\"data left\" rowspan=\"", ($hasID) ? 3 : 2, "\">";		echo "<input type=\"radio\" id=\"what3\" name=\"what\" value=\"structureanddata\" /><label for=\"what3\">{$lang['strstructureanddata']}</label></th>\n";		echo "<td>{$lang['strformat']}</td>\n";		echo "<td><select name=\"sd_format\">\n";		echo "<option value=\"copy\">COPY</option>\n";		echo "<option value=\"sql\">SQL</option>\n";		echo "</select>\n</td>\n</tr>\n";		echo "<tr><td><label for=\"sd_clean\">{$lang['strdrop']}</label></td><td><input type=\"checkbox\" id=\"sd_clean\" name=\"sd_clean\" /></td>\n</tr>\n";		if ($hasID) {			echo "<tr><td><label for=\"sd_oids\">{$lang['stroids']}</label></td><td><input type=\"checkbox\" id=\"sd_oids\" name=\"sd_oids\" /></td>\n</tr>\n";		}		echo "</table>\n";		echo "<h3>{$lang['stroptions']}</h3>\n";		echo "<p><input type=\"radio\" id=\"output1\" name=\"output\" value=\"show\" checked=\"checked\" /><label for=\"output1\">{$lang['strshow']}</label>\n";		echo "<br/><input type=\"radio\" id=\"output2\" name=\"output\" value=\"download\" /><label for=\"output2\">{$lang['strdownload']}</label></p>\n";		echo "<p><input type=\"hidden\" name=\"action\" value=\"export\" />\n";		echo $misc->form;		echo "<input type=\"hidden\" name=\"subject\" value=\"table\" />\n";		echo "<input type=\"hidden\" name=\"table\" value=\"", htmlspecialchars($_REQUEST['table']), "\" />\n";		echo "<input type=\"submit\" value=\"{$lang['strexport']}\" /></p>\n";		echo "</form>\n";	}	function doImport($msg = '') {		global $data, $misc;		global $lang;		$misc->printTrail('table');		$misc->printTabs('table','import');		$misc->printMsg($msg);		// Check that file uploads are enabled		if (ini_get('file_uploads')) {			// Don't show upload option if max size of uploads is zero			$max_size = $misc->inisizeToBytes(ini_get('upload_max_filesize'));			if (is_double($max_size) && $max_size > 0) {				echo "<form action=\"dataimport.php\" method=\"post\" enctype=\"multipart/form-data\">\n";				echo "<table>\n";				echo "\t<tr>\n\t\t<th class=\"data left required\">{$lang['strformat']}</th>\n";				echo "\t\t<td><select name=\"format\">\n";				echo "\t\t\t<option value=\"auto\">{$lang['strauto']}</option>\n";				echo "\t\t\t<option value=\"csv\">CSV</option>\n";				echo "\t\t\t<option value=\"tab\">{$lang['strtabbed']}</option>\n";				if (function_exists('xml_parser_create')) {					echo "\t\t\t<option value=\"xml\">XML</option>\n";				}				echo "\t\t</select></td>\n\t</tr>\n";				echo "\t<tr>\n\t\t<th class=\"data left required\">{$lang['strallowednulls']}</th>\n";				echo "\t\t<td><label><input type=\"checkbox\" name=\"allowednulls[0]\" value=\"\\N\" checked=\"checked\" />{$lang['strbackslashn']}</label><br />\n";				echo "\t\t<label><input type=\"checkbox\" name=\"allowednulls[1]\" value=\"NULL\" />NULL</label><br />\n";				echo "\t\t<label><input type=\"checkbox\" name=\"allowednulls[2]\" value=\"\" />{$lang['stremptystring'] }</label></td>\n\t</tr>\n";				echo "\t<tr>\n\t\t<th class=\"data left required\">{$lang['strfile']}</th>\n";				echo "\t\t<td><input type=\"hidden\" name=\"MAX_FILE_SIZE\" value=\"{$max_size}\" />";				echo "<input type=\"file\" name=\"source\" /></td>\n\t</tr>\n";				echo "</table>\n";				echo "<p><input type=\"hidden\" name=\"action\" value=\"import\" />\n";				echo $misc->form;				echo "<input type=\"hidden\" name=\"table\" value=\"", htmlspecialchars($_REQUEST['table']), "\" />\n";				echo "<input type=\"submit\" value=\"{$lang['strimport']}\" /></p>\n";				echo "</form>\n";			}		}		else echo "<p>{$lang['strnouploads']}</p>\n";	}	/**	 * Displays a screen where they can add a column	 */	function doAddColumn($msg = '') {		global $data, $misc, $_reload_browser;		global $lang;		if (!isset($_REQUEST['stage'])) $_REQUEST['stage'] = 1;		switch ($_REQUEST['stage']) {			case 1:				// Set variable defaults				if (!isset($_POST['field'])) $_POST['field'] = '';				if (!isset($_POST['type'])) $_POST['type'] = '';				if (!isset($_POST['array'])) $_POST['array'] = '';				if (!isset($_POST['length'])) $_POST['length'] = '';				if (!isset($_POST['default'])) $_POST['default'] = '';				if (!isset($_POST['comment'])) $_POST['comment'] = '';				// Fetch all available types				$types = $data->getTypes(true, false, true);				$types_for_js = array();				$misc->printTrail('table');				$misc->printTitle($lang['straddcolumn'], 'pg.column.add');				$misc->printMsg($msg);				echo "<script src=\"tables.js\" type=\"text/javascript\"></script>";				echo "<form action=\"tblproperties.php\" method=\"post\">\n";				// Output table header				echo "<table>\n";				echo "<tr><th class=\"data required\">{$lang['strname']}</th>\n<th colspan=\"2\" class=\"data required\">{$lang['strtype']}</th>\n";				echo "<th class=\"data\">{$lang['strlength']}</th>\n";				if ($data->hasCreateFieldWithConstraints())					echo "<th class=\"data\">{$lang['strnotnull']}</th>\n<th class=\"data\">{$lang['strdefault']}</th>\n";				echo "<th class=\"data\">{$lang['strcomment']}</th></tr>\n";				echo "<tr><td><input name=\"field\" size=\"16\" maxlength=\"{$data->_maxNameLen}\" value=\"",					htmlspecialchars($_POST['field']), "\" /></td>\n";				echo "<td><select name=\"type\" id=\"type\" onchange=\"checkLengths(document.getElementById('type').value,'');\">\n";				// Output any "magic" types.  This came in with the alter column type so we'll check that				if ($data->hasMagicTypes()) {					foreach ($data->extraTypes as $v) {						$types_for_js[] = strtolower($v);						echo "\t<option value=\"", htmlspecialchars($v), "\"",						($v == $_POST['type']) ? ' selected="selected"' : '', ">",							$misc->printVal($v), "</option>\n";					}				}				while (!$types->EOF) {					$typname = $types->fields['typname'];					$types_for_js[] = $typname;					echo "\t<option value=\"", htmlspecialchars($typname), "\"", ($typname == $_POST['type']) ? ' selected="selected"' : '', ">",						$misc->printVal($typname), "</option>\n";					$types->moveNext();				}				echo "</select></td>\n";				// Output array type selector				echo "<td><select name=\"array\">\n";				echo "\t<option value=\"\"", ($_POST['array'] == '') ? ' selected="selected"' : '', "></option>\n";				echo "\t<option value=\"[]\"", ($_POST['array'] == '[]') ? ' selected="selected"' : '', ">[ ]</option>\n";				echo "</select></td>\n";				$predefined_size_types = array_intersect($data->predefined_size_types, $types_for_js);				$escaped_predef_types = array(); // the JS escaped array elements				foreach($predefined_size_types as $value) {					$escaped_predef_types[] = "'{$value}'";				}				echo "<td><input name=\"length\" id=\"lengths\" size=\"8\" value=\"",					htmlspecialchars($_POST['length']), "\" /></td>\n";				// Support for adding column with not null and default				if ($data->hasCreateFieldWithConstraints()) {					echo "<td><input type=\"checkbox\" name=\"notnull\"",						(isset($_REQUEST['notnull'])) ? ' checked="checked"' : '', " /></td>\n";					echo "<td><input name=\"default\" size=\"20\" value=\"",						htmlspecialchars($_POST['default']), "\" /></td>\n";				}				echo "<td><input name=\"comment\" size=\"40\" value=\"",					htmlspecialchars($_POST['comment']), "\" /></td></tr>\n";				echo "</table>\n";				echo "<p><input type=\"hidden\" name=\"action\" value=\"add_column\" />\n";				echo "<input type=\"hidden\" name=\"stage\" value=\"2\" />\n";				echo $misc->form;				echo "<input type=\"hidden\" name=\"table\" value=\"", htmlspecialchars($_REQUEST['table']), "\" />\n";				if (!$data->hasCreateFieldWithConstraints()) {					echo "<input type=\"hidden\" name=\"default\" value=\"\" />\n";				}				echo "<input type=\"submit\" value=\"{$lang['stradd']}\" />\n";				echo "<input type=\"submit\" name=\"cancel\" value=\"{$lang['strcancel']}\" /></p>\n";				echo "</form>\n";				echo "<script type=\"text/javascript\">predefined_lengths = new Array(". implode(",",$escaped_predef_types) .");checkLengths(document.getElementById('type').value,'');</script>\n";				break;			case 2:				// Check inputs				if (trim($_POST['field']) == '') {					$_REQUEST['stage'] = 1;					doAddColumn($lang['strcolneedsname']);					return;				}				if (!isset($_POST['length'])) $_POST['length'] = '';				$status = $data->addColumn($_POST['table'], $_POST['field'],							   $_POST['type'], $_POST['array'] != '', $_POST['length'], isset($_POST['notnull']),							   $_POST['default'], $_POST['comment']);				if ($status == 0) {					$_reload_browser = true;					doDefault($lang['strcolumnadded']);				}				else {					$_REQUEST['stage'] = 1;					doAddColumn($lang['strcolumnaddedbad']);					return;				}				break;			default:				echo "<p>{$lang['strinvalidparam']}</p>\n";		}	}	/**	 * Show confirmation of drop column and perform actual drop	 */	function doDrop($confirm) {		global $data, $database, $misc, $_reload_browser;		global $lang;		if ($confirm) {			$misc->printTrail('column');			$misc->printTitle($lang['strdrop'], 'pg.column.drop');            echo "<p>", sprintf($lang['strconfdropcolumn'], $misc->printVal($_REQUEST['column']),                    $misc->printVal($_REQUEST['table'])), "</p>\n";			echo "<form action=\"tblproperties.php\" method=\"post\">\n";			echo "<input type=\"hidden\" name=\"action\" value=\"drop\" />\n";			echo "<input type=\"hidden\" name=\"table\" value=\"", htmlspecialchars($_REQUEST['table']), "\" />\n";			echo "<input type=\"hidden\" name=\"column\" value=\"", htmlspecialchars($_REQUEST['column']), "\" />\n";			echo $misc->form;			echo "<p><input type=\"checkbox\" id=\"cascade\" name=\"cascade\"> <label for=\"cascade\">{$lang['strcascade']}</label></p>\n";			echo "<input type=\"submit\" name=\"drop\" value=\"{$lang['strdrop']}\" />\n";			echo "<input type=\"submit\" name=\"cancel\" value=\"{$lang['strcancel']}\" />\n";			echo "</form>\n";		}		else {			$status = $data->dropColumn($_POST['table'], $_POST['column'], isset($_POST['cascade']));			if ($status == 0) {				$_reload_browser = true;				doDefault($lang['strcolumndropped']);			}			else				doDefault($lang['strcolumndroppedbad']);		}	}	function doTree() {		global $misc, $data;		$columns = $data->getTableAttributes($_REQUEST['table']);		$reqvars = $misc->getRequestVars('column');		$attrs = array (			'text'   => field('attname'),			'action' => url('colproperties.php',							$reqvars,							array(								'table'		=> $_REQUEST['table'],								'column'	=> field('attname')							)						),			'icon'   => 'Column',			'iconAction' => url('display.php',								$reqvars,								array(									'table'		=> $_REQUEST['table'],									'column'	=> field('attname'),									'query'		=> replace(														'SELECT "%column%", count(*) AS "count" FROM "%table%" GROUP BY "%column%" ORDER BY "%column%"',														array (															'%column%' => field('attname'),															'%table%' => $_REQUEST['table']														)													)								)							),			'toolTip'=> field('comment')		);		$misc->printTreeXML($columns, $attrs);		exit;	}	if ($action == 'tree') doTree();	/**	 * Show default list of columns in the table	 */	function doDefault($msg = '') {		global $data, $conf, $misc;		global $lang;		function attPre(&$rowdata, $actions) {			global $data;			$rowdata->fields['+type'] = $data->formatType($rowdata->fields['type'], $rowdata->fields['atttypmod']);			$attname = $rowdata->fields['attname'];			$table = $_REQUEST['table'];			$data->fieldClean($attname);			$data->fieldClean($table);			$actions['browse']['url'] .= 'query=' . urlencode("SELECT \"{$attname}\", count(*) AS \"count\"				FROM \"{$table}\" GROUP BY \"{$attname}\" ORDER BY \"{$attname}\"") . '&amp;';			return $actions;		}		$misc->printTrail('table');		$misc->printTabs('table','columns');		$misc->printMsg($msg);		// Get table		$tdata = $data->getTable($_REQUEST['table']);		// Get columns		$attrs = $data->getTableAttributes($_REQUEST['table']);		// Get constraints keys		$ck = $data->getConstraintsWithFields($_REQUEST['table']);		// Show comment if any		if ($tdata->fields['relcomment'] !== null)			echo '<p class="comment">', $misc->printVal($tdata->fields['relcomment']), "</p>\n";		$columns = array(			'column' => array(				'title' => $lang['strcolumn'],				'field' => field('attname'),				'url'   => "colproperties.php?subject=column&amp;{$misc->href}&amp;table=".urlencode($_REQUEST['table'])."&amp;",				'vars'  => array('column' => 'attname'),			),			'type' => array(				'title' => $lang['strtype'],				'field' => field('+type'),			),			'notnull' => array(				'title' => $lang['strnotnull'],				'field' => field('attnotnull'),				'type'  => 'bool',				'params'=> array('true' => 'NOT NULL', 'false' => ''),			),			'default' => array(				'title' => $lang['strdefault'],				'field' => field('adsrc'),			),			'keyprop' => array(				'title' => $lang['strconstraints'],				'field' => field('attname'),				'type'  => 'callback',				'params'=> array(					'function' => 'cstrRender',					'keys' => $ck->getArray()				)			),			'actions' => array(				'title' => $lang['stractions'],			),			'comment' => array(				'title' => $lang['strcomment'],				'field' => field('comment'),			),		);		function cstrRender($s, $p) {			global $misc, $data;			$str ='';			foreach ($p['keys'] as $k => $c) {				if (is_null($p['keys'][$k]['consrc'])) {					$atts = $data->getAttributeNames($_REQUEST['table'], explode(' ', $p['keys'][$k]['indkey']));					$c['consrc'] = ($c['contype'] == 'u' ? "UNIQUE (" : "PRIMARY KEY (") . join(',', $atts) . ')';				}				if ($c['p_field'] == $s)					switch ($c['contype']) {						case 'p':							$str .= '<a href="constraints.php?'. $misc->href ."&amp;table=". urlencode($c['p_table']) ."&amp;schema=". urlencode($c['p_schema']) ."\"><img src=\"".								$misc->icon('PrimaryKey') .'" alt="[pk]" title="'. htmlentities($c['consrc']) .'" /></a>';						break;						case 'f':							$str .= '<a href="tblproperties.php?'. $misc->href ."&amp;table=". urlencode($c['f_table']) ."&amp;schema=". urlencode($c['f_schema']) ."\"><img src=\"".								$misc->icon('ForeignKey') .'" alt="[fk]" title="'. htmlentities($c['consrc']) .'" /></a>';						break;						case 'u':							$str .= '<a href="constraints.php?'. $misc->href ."&amp;table=". urlencode($c['p_table']) ."&amp;schema=". urlencode($c['p_schema']) ."\"><img src=\"".								$misc->icon('UniqueConstraint') .'" alt="[uniq]" title="'. htmlentities($c['consrc']) .'" /></a>';						break;						case 'c':							$str .= '<a href="constraints.php?'. $misc->href ."&amp;table=". urlencode($c['p_table']) ."&amp;schema=". urlencode($c['p_schema']) ."\"><img src=\"".								$misc->icon('CheckConstraint') .'" alt="[check]" title="'. htmlentities($c['consrc']) .'" /></a>';					}			}			return $str;		}		$return_url = urlencode("tblproperties.php?{$misc->href}&amp;table=". urlencode($_REQUEST['table']));		$actions = array(			'browse' => array(				'title' => $lang['strbrowse'],				'url' => "display.php?{$misc->href}&amp;subject=column&amp;return_url={$return_url}&amp;table=".urlencode($_REQUEST['table'])."&amp;return_desc=" . urlencode($lang['strback']) . '&amp;',				'vars' => array('column' => 'attname'),			),			'alter' => array(				'title' => $lang['stralter'],				'url'   => "colproperties.php?action=properties&amp;{$misc->href}&amp;table=".urlencode($_REQUEST['table'])."&amp;",				'vars'  => array('column' => 'attname'),			),			'privileges' => array(				'title' => $lang['strprivileges'],				'url'   => "privileges.php?subject=column&amp;{$misc->href}&amp;table=".urlencode($_REQUEST['table'])."&amp;",				'vars'  => array('column' => 'attname'),			),			'drop' => array(				'title' => $lang['strdrop'],				'url'   => "tblproperties.php?action=confirm_drop&amp;{$misc->href}&amp;table=".urlencode($_REQUEST['table'])."&amp;",				'vars'  => array('column' => 'attname'),			),		);		$misc->printTable($attrs, $columns, $actions, null, 'attPre');		echo "<ul class=\"navlink\">\n";		echo "\t<li><a href=\"display.php?{$misc->href}&amp;table=", urlencode($_REQUEST['table']), "&amp;subject=table&amp;return_url={$return_url}&amp;return_desc=",			urlencode($lang['strback']), "\">{$lang['strbrowse']}</a></li>\n";		echo "\t<li><a href=\"tables.php?action=confselectrows&amp;{$misc->href}&amp;table=", urlencode($_REQUEST['table']),"\">{$lang['strselect']}</a></li>\n";		echo "\t<li><a href=\"tables.php?action=confinsertrow&amp;{$misc->href}&amp;table=", urlencode($_REQUEST['table']),"\">{$lang['strinsert']}</a></li>\n";		echo "\t<li><a href=\"tables.php?action=confirm_empty&amp;{$misc->href}&amp;table=", urlencode($_REQUEST['table']),"\">{$lang['strempty']}</a></li>\n";		echo "\t<li><a href=\"tables.php?action=confirm_drop&amp;{$misc->href}&amp;table=", urlencode($_REQUEST['table']),"\">{$lang['strdrop']}</a></li>\n";		echo "\t<li><a href=\"tblproperties.php?action=add_column&amp;{$misc->href}&amp;table=", urlencode($_REQUEST['table']),"\">{$lang['straddcolumn']}</a></li>\n";		echo "\t<li><a href=\"tblproperties.php?action=confirm_alter&amp;{$misc->href}&amp;table=", urlencode($_REQUEST['table']),"\">{$lang['stralter']}</a></li>\n";		echo "</ul>\n";	}	$misc->printHeader($lang['strtables'] . ' - ' . $_REQUEST['table']);	$misc->printBody();	switch ($action) {		case 'alter':			if (isset($_POST['alter'])) doSaveAlter();			else doDefault();			break;		case 'confirm_alter':			doAlter();			break;		case 'import':			doImport();			break;		case 'export':			doExport();			break;		case 'add_column':			if (isset($_POST['cancel'])) doDefault();			else doAddColumn();			break;		case 'properties':			if (isset($_POST['cancel'])) doDefault();			else doProperties();			break;		case 'drop':			if (isset($_POST['drop'])) doDrop(false);			else doDefault();			break;		case 'confirm_drop':			doDrop(true);			break;		default:			doDefault();			break;	}	$misc->printFooter();?>
<?php/** * PostgreSQL 8.0 support * * $Id: Postgres80.php,v 1.28 2007/12/12 04:11:10 xzilla Exp $ */include_once('./classes/database/Postgres81.php');class Postgres80 extends Postgres81 {	var $major_version = 8.0;	// Map of database encoding names to HTTP encoding names.  If a	// database encoding does not appear in this list, then its HTTP	// encoding name is the same as its database encoding name.	var $codemap = array(		'ALT' => 'CP866',		'EUC_CN' => 'GB2312',		'EUC_JP' => 'EUC-JP',		'EUC_KR' => 'EUC-KR',		'EUC_TW' => 'EUC-TW',		'ISO_8859_5' => 'ISO-8859-5',		'ISO_8859_6' => 'ISO-8859-6',		'ISO_8859_7' => 'ISO-8859-7',		'ISO_8859_8' => 'ISO-8859-8',		'JOHAB' => 'CP1361',		'KOI8' => 'KOI8-R',		'LATIN1' => 'ISO-8859-1',		'LATIN2' => 'ISO-8859-2',		'LATIN3' => 'ISO-8859-3',		'LATIN4' => 'ISO-8859-4',		// The following encoding map is a known error in PostgreSQL < 7.2		// See the constructor for Postgres72.		'LATIN5' => 'ISO-8859-5',		'LATIN6' => 'ISO-8859-10',		'LATIN7' => 'ISO-8859-13',		'LATIN8' => 'ISO-8859-14',		'LATIN9' => 'ISO-8859-15',		'LATIN10' => 'ISO-8859-16',		'SQL_ASCII' => 'US-ASCII',		'TCVN' => 'CP1258',		'UNICODE' => 'UTF-8',		'WIN' => 'CP1251',		'WIN874' => 'CP874',		'WIN1256' => 'CP1256'	);	/**	 * Constructor	 * @param $conn The database connection	 */	function Postgres80($conn) {		$this->Postgres81($conn);	}	// Help functions	function getHelpPages() {		include_once('./help/PostgresDoc80.php');		return $this->help_page;	}	// Database functions	/**	 * Return all database available on the server	 * @return A list of databases, sorted alphabetically	 */	function getDatabases($currentdatabase = NULL) {		global $conf, $misc;		$server_info = $misc->getServerInfo();		if (isset($conf['owned_only']) && $conf['owned_only'] && !$this->isSuperUser($server_info['username'])) {			$username = $server_info['username'];			$this->clean($username);			$clause = " AND pu.usename='{$username}'";		}		else $clause = '';		if ($currentdatabase != NULL) {			$this->clean($currentdatabase);			$orderby = "ORDER BY pdb.datname = '{$currentdatabase}' DESC, pdb.datname";		}		else			$orderby = "ORDER BY pdb.datname";		if (!$conf['show_system'])			$where = ' AND NOT pdb.datistemplate';		else			$where = ' AND pdb.datallowconn';		$sql = "SELECT pdb.datname AS datname, pu.usename AS datowner, pg_encoding_to_char(encoding) AS datencoding,                               (SELECT description FROM pg_description pd WHERE pdb.oid=pd.objoid) AS datcomment,                               (SELECT spcname FROM pg_catalog.pg_tablespace pt WHERE pt.oid=pdb.dattablespace) AS tablespace                        FROM pg_database pdb, pg_user pu			WHERE pdb.datdba = pu.usesysid			{$where}			{$clause}			{$orderby}";		return $this->selectSet($sql);	}	// Schema functions	/**	 * Return all schemas in the current database.	 * @return All schemas, sorted alphabetically	 */	function getSchemas() {		global $conf, $slony;		if (!$conf['show_system']) {			$where = "WHERE nspname NOT LIKE 'pg@_%' ESCAPE '@' AND nspname != 'information_schema'";			if (isset($slony) && $slony->isEnabled()) {				$temp = $slony->slony_schema;				$this->clean($temp);				$where .= " AND nspname != '{$temp}'";			}		}		else $where = "WHERE nspname !~ '^pg_t(emp_[0-9]+|oast)$'";		$sql = "			SELECT pn.nspname, pu.usename AS nspowner,				pg_catalog.obj_description(pn.oid, 'pg_namespace') AS nspcomment			FROM pg_catalog.pg_namespace pn				LEFT JOIN pg_catalog.pg_user pu ON (pn.nspowner = pu.usesysid)			{$where}			ORDER BY nspname";		return $this->selectSet($sql);	}	/**	 * Return all information relating to a schema	 * @param $schema The name of the schema	 * @return Schema information	 */	function getSchemaByName($schema) {		$this->clean($schema);		$sql = "			SELECT nspname, nspowner, u.usename AS ownername, nspacl,				pg_catalog.obj_description(pn.oid, 'pg_namespace') as nspcomment            FROM pg_catalog.pg_namespace pn            	LEFT JOIN pg_shadow as u ON pn.nspowner = u.usesysid			WHERE nspname='{$schema}'";		return $this->selectSet($sql);	}	// Table functions	/**	 * Protected method which alter a table	 * SHOULDN'T BE CALLED OUTSIDE OF A TRANSACTION	 * @param $tblrs The table recordSet returned by getTable()	 * @param $name The new name for the table	 * @param $owner The new owner for the table	 * @param $schema The new schema for the table	 * @param $comment The comment on the table	 * @param $tablespace The new tablespace for the table ('' means leave as is)	 * @return 0 success	 * @return -3 rename error	 * @return -4 comment error	 * @return -5 owner error	 * @return -6 tablespace error	 */	protected	function _alterTable($tblrs, $name, $owner, $schema, $comment, $tablespace) {		/* $schema not supported in pg80- */		// Comment		$status = $this->setComment('TABLE', '', $tblrs->fields['relname'], $comment);		if ($status != 0) return -4;		// Owner		$this->fieldClean($owner);		$status = $this->alterTableOwner($tblrs, $owner);		if ($status != 0) return -5;		// Tablespace		$this->fieldClean($tablespace);		$status = $this->alterTableTablespace($tblrs, $tablespace);			if ($status != 0) return -6;		// Rename		$this->fieldClean($name);		$status = $this->alterTableName($tblrs, $name);		if ($status != 0) return -3;		return 0;	}	// Constraint functions	/**	 * Returns a list of all constraints on a table,	 * including constraint name, definition, related col and referenced namespace,	 * table and col if needed	 * @param $table the table where we are looking for fk	 * @return a recordset	 */	function getConstraintsWithFields($table) {		$c_schema = $this->_schema;		$this->clean($c_schema);		$this->clean($table);		// get the max number of col used in a constraint for the table		$sql = "SELECT DISTINCT			max(SUBSTRING(array_dims(c.conkey) FROM '^\\\[.*:(.*)\\\]$')) as nb		FROM pg_catalog.pg_constraint AS c			JOIN pg_catalog.pg_class AS r ON (c.conrelid=r.oid)		    JOIN pg_catalog.pg_namespace AS ns ON (r.relnamespace=ns.oid)		WHERE			r.relname = '{$table}' AND ns.nspname='{$c_schema}'";		$rs = $this->selectSet($sql);		if ($rs->EOF) $max_col = 0;		else $max_col = $rs->fields['nb'];		$sql = '			SELECT				c.oid AS conid, c.contype, c.conname, pg_catalog.pg_get_constraintdef(c.oid, true) AS consrc,				ns1.nspname as p_schema, r1.relname as p_table, ns2.nspname as f_schema,				r2.relname as f_table, f1.attname as p_field, f1.attnum AS p_attnum, f2.attname as f_field,				f2.attnum AS f_attnum, pg_catalog.obj_description(c.oid, \'pg_constraint\') AS constcomment,				c.conrelid, c.confrelid			FROM				pg_catalog.pg_constraint AS c				JOIN pg_catalog.pg_class AS r1 ON (c.conrelid=r1.oid)				JOIN pg_catalog.pg_attribute AS f1 ON (f1.attrelid=r1.oid AND (f1.attnum=c.conkey[1]';		for ($i = 2; $i <= $rs->fields['nb']; $i++) {			$sql.= " OR f1.attnum=c.conkey[$i]";		}		$sql.= '))				JOIN pg_catalog.pg_namespace AS ns1 ON r1.relnamespace=ns1.oid				LEFT JOIN (					pg_catalog.pg_class AS r2 JOIN pg_catalog.pg_namespace AS ns2 ON (r2.relnamespace=ns2.oid)				) ON (c.confrelid=r2.oid)				LEFT JOIN pg_catalog.pg_attribute AS f2 ON					(f2.attrelid=r2.oid AND ((c.confkey[1]=f2.attnum AND c.conkey[1]=f1.attnum)';		for ($i = 2; $i <= $rs->fields['nb']; $i++)			$sql.= "OR (c.confkey[$i]=f2.attnum AND c.conkey[$i]=f1.attnum)";		$sql .= sprintf("))			WHERE				r1.relname = '%s' AND ns1.nspname='%s'			ORDER BY 1", $table, $c_schema);		return $this->selectSet($sql);	}	// View functions	/**	 * Protected method which alter a view	 * SHOULDN'T BE CALLED OUTSIDE OF A TRANSACTION	 * @param $vwrs The view recordSet returned by getView()	 * @param $name The new name for the view	 * @param $owner The new owner for the view	 * @param $comment The comment on the view	 * @return 0 success	 * @return -3 rename error	 * @return -4 comment error	 * @return -5 owner error	 */	protected    function _alterView($vwrs, $name, $owner, $schema, $comment) {    	/* $schema not supported in pg80- */    	$this->fieldArrayClean($vwrs->fields);		// Comment		if ($this->setComment('VIEW', $vwrs->fields['relname'], '', $comment) != 0)			return -4;		// Owner		$this->fieldClean($owner);		$status = $this->alterViewOwner($vwrs, $owner);		if ($status != 0) return -5;		// Rename		$this->fieldClean($name);		$status = $this->alterViewName($vwrs, $name);		if ($status != 0) return -3;		return 0;	}	// Sequence functions	/**	 * Protected method which alter a sequence	 * SHOULDN'T BE CALLED OUTSIDE OF A TRANSACTION	 * @param $seqrs The sequence recordSet returned by getSequence()	 * @param $name The new name for the sequence	 * @param $comment The comment on the sequence	 * @param $owner The new owner for the sequence	 * @param $schema The new schema for the sequence	 * @param $increment The increment	 * @param $minvalue The min value	 * @param $maxvalue The max value	 * @param $restartvalue The starting value	 * @param $cachevalue The cache value	 * @param $cycledvalue True if cycled, false otherwise	 * @param $startvalue The sequence start value when issueing a restart	 * @return 0 success	 * @return -3 rename error	 * @return -4 comment error	 * @return -5 owner error	 * @return -6 get sequence props error	 * @return -7 schema error	 */	protected	function _alterSequence($seqrs, $name, $comment, $owner, $schema, $increment,	$minvalue, $maxvalue, $restartvalue, $cachevalue, $cycledvalue, $startvalue) {		/* $schema not supported in pg80- */		$this->fieldArrayClean($seqrs->fields);		// Comment		$status = $this->setComment('SEQUENCE', $seqrs->fields['seqname'], '', $comment);		if ($status != 0)			return -4;		// Owner		$this->fieldClean($owner);		$status = $this->alterSequenceOwner($seqrs, $owner);		if ($status != 0)			return -5;		// Props		$this->clean($increment);		$this->clean($minvalue);		$this->clean($maxvalue);		$this->clean($restartvalue);		$this->clean($cachevalue);		$this->clean($cycledvalue);		$this->clean($startvalue);		$status = $this->alterSequenceProps($seqrs, $increment,	$minvalue,			$maxvalue, $restartvalue, $cachevalue, $cycledvalue, null);		if ($status != 0)			return -6;		// Rename		$this->fieldClean($name);		$status = $this->alterSequenceName($seqrs, $name);		if ($status != 0)			return -3;		return 0;	}	// Role, User/group functions	/**	 * Changes a user's password	 * @param $username The username	 * @param $password The new password	 * @return 0 success	 */	function changePassword($username, $password) {		$enc = $this->_encryptPassword($username, $password);		$this->fieldClean($username);		$this->clean($enc);		$sql = "ALTER USER \"{$username}\" WITH ENCRYPTED PASSWORD '{$enc}'";		return $this->execute($sql);	}	// Aggregate functions	/**	 * Gets all information for an aggregate	 * @param $name The name of the aggregate	 * @param $basetype The input data type of the aggregate	 * @return A recordset	 */	function getAggregate($name, $basetype) {		$c_schema = $this->_schema;		$this->clean($c_schema);		$this->clean($name);		$this->clean($basetype);		$sql = "			SELECT p.proname,				CASE p.proargtypes[0]					WHEN 'pg_catalog.\"any\"'::pg_catalog.regtype THEN NULL					ELSE pg_catalog.format_type(p.proargtypes[0], NULL)				END AS proargtypes, a.aggtransfn, format_type(a.aggtranstype, NULL) AS aggstype,				a.aggfinalfn, a.agginitval, u.usename, pg_catalog.obj_description(p.oid, 'pg_proc') AS aggrcomment			FROM pg_catalog.pg_proc p, pg_catalog.pg_namespace n, pg_catalog.pg_user u, pg_catalog.pg_aggregate a			WHERE n.oid = p.pronamespace AND p.proowner=u.usesysid AND p.oid=a.aggfnoid				AND p.proisagg AND n.nspname='{$c_schema}'				AND p.proname='{$name}'				AND CASE p.proargtypes[0]					WHEN 'pg_catalog.\"any\"'::pg_catalog.regtype THEN ''					ELSE pg_catalog.format_type(p.proargtypes[0], NULL)				END ='{$basetype}'";		return $this->selectSet($sql);	}	// Capabilities	function hasAggregateSortOp() { return false; }	function hasAlterTableSchema() { return false; }	function hasAutovacuum() { return false; }	function hasDisableTriggers() { return false; }	function hasFunctionAlterSchema() { return false; }	function hasPreparedXacts() { return false; }	function hasRoles() { return false; }	function hasAlterSequenceSchema() { return false; }	function hasServerAdminFuncs() { return false; }}?>
<?php	/**	 * Manage users in a database cluster	 *	 * $Id: users.php,v 1.40 2008/02/25 17:20:44 xzilla Exp $	 */	// Include application functions	include_once('./libraries/lib.inc.php');	$action = (isset($_REQUEST['action'])) ? $_REQUEST['action'] : '';	if (!isset($msg)) $msg = '';			/**	 * If a user is not a superuser, then we have an 'account management' page	 * where they can change their password, etc.  We don't prevent them from	 * messing with the URL to gain access to other user admin stuff, because	 * the PostgreSQL permissions will prevent them changing anything anyway.	 */	function doAccount($msg = '') {		global $data, $misc;		global $lang;				$server_info = $misc->getServerInfo();				$userdata = $data->getUser($server_info['username']);		$_REQUEST['user'] = $server_info['username'];				$misc->printTrail('user');		$misc->printTabs('server','account');		$misc->printMsg($msg);		if ($userdata->recordCount() > 0) {			$userdata->fields['usesuper'] = $data->phpBool($userdata->fields['usesuper']);			$userdata->fields['usecreatedb'] = $data->phpBool($userdata->fields['usecreatedb']);			echo "<table>\n";			echo "<tr><th class=\"data\">{$lang['strusername']}</th><th class=\"data\">{$lang['strsuper']}</th><th class=\"data\">{$lang['strcreatedb']}</th><th class=\"data\">{$lang['strexpires']}</th>";			echo "<th class=\"data\">{$lang['strsessiondefaults']}</th>";			echo "</tr>\n";			echo "<tr>\n\t<td class=\"data1\">", $misc->printVal($userdata->fields['usename']), "</td>\n";			echo "\t<td class=\"data1\">", $misc->printVal($userdata->fields['usesuper'], 'yesno'), "</td>\n";			echo "\t<td class=\"data1\">", $misc->printVal($userdata->fields['usecreatedb'], 'yesno'), "</td>\n";			echo "\t<td class=\"data1\">", ($userdata->fields['useexpires'] == 'infinity' || is_null($userdata->fields['useexpires']) ? $lang['strnever'] : $misc->printVal($userdata->fields['useexpires'])), "</td>\n";			echo "\t<td class=\"data1\">", $misc->printVal($userdata->fields['useconfig']), "</td>\n";			echo "</tr>\n</table>\n";		}		else echo "<p>{$lang['strnodata']}</p>\n";				echo "<p><a class=\"navlink\" href=\"users.php?action=confchangepassword&amp;{$misc->href}\">{$lang['strchangepassword']}</a></p>\n";	}		/**	 * Show confirmation of change password and actually change password	 */	function doChangePassword($confirm, $msg = '') {		global $data, $misc;		global $lang, $conf;				$server_info = $misc->getServerInfo();				if ($confirm) {			$_REQUEST['user'] = $server_info['username'];			$misc->printTrail('user');			$misc->printTitle($lang['strchangepassword'],'pg.user.alter');			$misc->printMsg($msg);						if (!isset($_POST['password'])) $_POST['password'] = '';			if (!isset($_POST['confirm'])) $_POST['confirm'] = '';						echo "<form action=\"users.php\" method=\"post\">\n";			echo "<table>\n";			echo "\t<tr>\n\t\t<th class=\"data left required\">{$lang['strpassword']}</th>\n";			echo "\t\t<td><input type=\"password\" name=\"password\" size=\"32\" value=\"", 				htmlspecialchars($_POST['password']), "\" /></td>\n\t</tr>\n";			echo "\t<tr>\n\t\t<th class=\"data left required\">{$lang['strconfirm']}</th>\n";			echo "\t\t<td><input type=\"password\" name=\"confirm\" size=\"32\" value=\"\" /></td>\n\t</tr>\n";			echo "</table>\n";			echo "<p><input type=\"hidden\" name=\"action\" value=\"changepassword\" />\n";			echo $misc->form;			echo "<input type=\"submit\" name=\"ok\" value=\"{$lang['strok']}\" />\n";			echo "<input type=\"submit\" name=\"cancel\" value=\"{$lang['strcancel']}\" />\n";			echo "</p></form>\n";		}		else {			// Check that password is minimum length			if (strlen($_POST['password']) < $conf['min_password_length'])				doChangePassword(true, $lang['strpasswordshort']);			// Check that password matches confirmation password			elseif ($_POST['password'] != $_POST['confirm'])				doChangePassword(true, $lang['strpasswordconfirm']);			else {				$status = $data->changePassword($server_info['username'], 					$_POST['password']);				if ($status == 0)					doAccount($lang['strpasswordchanged']);				else					doAccount($lang['strpasswordchangedbad']);			}		}			}	/**	 * Function to allow editing of a user	 */	function doEdit($msg = '') {		global $data, $misc;		global $lang;			$misc->printTrail('user');		$misc->printTitle($lang['stralter'],'pg.user.alter');		$misc->printMsg($msg);				$userdata = $data->getUser($_REQUEST['username']);				if ($userdata->recordCount() > 0) {			$server_info = $misc->getServerInfo();			$canRename = $data->hasUserRename() && ($_REQUEST['username'] != $server_info['username']);			$userdata->fields['usesuper'] = $data->phpBool($userdata->fields['usesuper']);			$userdata->fields['usecreatedb'] = $data->phpBool($userdata->fields['usecreatedb']);			if (!isset($_POST['formExpires'])){				if ($canRename) $_POST['newname'] = $userdata->fields['usename'];				if ($userdata->fields['usesuper']) $_POST['formSuper'] = '';				if ($userdata->fields['usecreatedb']) $_POST['formCreateDB'] = '';				$_POST['formExpires'] = $userdata->fields['useexpires'] == 'infinity' ? '' : $userdata->fields['useexpires'];				$_POST['formPassword'] = '';			}					echo "<form action=\"users.php\" method=\"post\">\n";			echo "<table>\n";			echo "\t<tr>\n\t\t<th class=\"data left\">{$lang['strusername']}</th>\n";			echo "\t\t<td class=\"data1\">", ($canRename ? "<input name=\"newname\" size=\"15\" maxlength=\"{$data->_maxNameLen}\" value=\"" . htmlspecialchars($_POST['newname']) . "\" />" : $misc->printVal($userdata->fields['usename'])), "</td>\n\t</tr>\n";			echo "\t<tr>\n\t\t<th class=\"data left\"><label for=\"formSuper\">{$lang['strsuper']}</label></th>\n";			echo "\t\t<td class=\"data1\"><input type=\"checkbox\" id=\"formSuper\" name=\"formSuper\"", 				(isset($_POST['formSuper'])) ? ' checked="checked"' : '', " /></td>\n\t</tr>\n";			echo "\t<tr>\n\t\t<th class=\"data left\"><label for=\"formCreateDB\">{$lang['strcreatedb']}</label></th>\n";			echo "\t\t<td class=\"data1\"><input type=\"checkbox\" id=\"formCreateDB\" name=\"formCreateDB\"", 				(isset($_POST['formCreateDB'])) ? ' checked="checked"' : '', " /></td>\n\t</tr>\n";			echo "\t<tr>\n\t\t<th class=\"data left\">{$lang['strexpires']}</th>\n";			echo "\t\t<td class=\"data1\"><input size=\"16\" name=\"formExpires\" value=\"", htmlspecialchars($_POST['formExpires']), "\" /></td>\n\t</tr>\n";			echo "\t<tr>\n\t\t<th class=\"data left\">{$lang['strpassword']}</th>\n";			echo "\t\t<td class=\"data1\"><input type=\"password\" size=\"16\" name=\"formPassword\" value=\"", htmlspecialchars($_POST['formPassword']), "\" /></td>\n\t</tr>\n";			echo "\t<tr>\n\t\t<th class=\"data left\">{$lang['strconfirm']}</th>\n";			echo "\t\t<td class=\"data1\"><input type=\"password\" size=\"16\" name=\"formConfirm\" value=\"\" /></td>\n\t</tr>\n";			echo "</table>\n";			echo "<p><input type=\"hidden\" name=\"action\" value=\"save_edit\" />\n";			echo "<input type=\"hidden\" name=\"username\" value=\"", htmlspecialchars($_REQUEST['username']), "\" />\n";			echo $misc->form;			echo "<input type=\"submit\" name=\"alter\" value=\"{$lang['stralter']}\" />\n";			echo "<input type=\"submit\" name=\"cancel\" value=\"{$lang['strcancel']}\" /></p>\n";			echo "</form>\n";		}		else echo "<p>{$lang['strnodata']}</p>\n";	}		/** 	 * Function to save after editing a user	 */	function doSaveEdit() {		global $data, $lang;				// Check name and password		if (isset($_POST['newname']) && $_POST['newname'] == '')			doEdit($lang['struserneedsname']);		else if ($_POST['formPassword'] != $_POST['formConfirm'])			doEdit($lang['strpasswordconfirm']);		else {			if (isset($_POST['newname'])) $status = $data->setRenameUser($_POST['username'], $_POST['formPassword'], isset($_POST['formCreateDB']), isset($_POST['formSuper']), $_POST['formExpires'], $_POST['newname']);			else $status = $data->setUser($_POST['username'], $_POST['formPassword'], isset($_POST['formCreateDB']), isset($_POST['formSuper']), $_POST['formExpires']);			if ($status == 0)				doDefault($lang['struserupdated']);			else				doEdit($lang['struserupdatedbad']);		}	}	/**	 * Show confirmation of drop and perform actual drop	 */	function doDrop($confirm) {		global $data, $misc;		global $lang;		if ($confirm) {			$misc->printTrail('user');			$misc->printTitle($lang['strdrop'],'pg.user.drop');						echo "<p>", sprintf($lang['strconfdropuser'], $misc->printVal($_REQUEST['username'])), "</p>\n";							echo "<form action=\"users.php\" method=\"post\">\n";			echo "<p><input type=\"hidden\" name=\"action\" value=\"drop\" />\n";			echo "<input type=\"hidden\" name=\"username\" value=\"", htmlspecialchars($_REQUEST['username']), "\" />\n";			echo $misc->form;			echo "<input type=\"submit\" name=\"drop\" value=\"{$lang['strdrop']}\" />\n";			echo "<input type=\"submit\" name=\"cancel\" value=\"{$lang['strcancel']}\" /></p>\n";			echo "</form>\n";		}		else {			$status = $data->dropUser($_REQUEST['username']);			if ($status == 0)				doDefault($lang['struserdropped']);			else				doDefault($lang['struserdroppedbad']);		}			}		/**	 * Displays a screen where they can enter a new user	 */	function doCreate($msg = '') {		global $data, $misc, $username;		global $lang;				if (!isset($_POST['formUsername'])) $_POST['formUsername'] = '';		if (!isset($_POST['formPassword'])) $_POST['formPassword'] = '';		if (!isset($_POST['formConfirm'])) $_POST['formConfirm'] = '';		if (!isset($_POST['formExpires'])) $_POST['formExpires'] = '';				$misc->printTrail('server');		$misc->printTitle($lang['strcreateuser'],'pg.user.create');		$misc->printMsg($msg);		echo "<form action=\"users.php\" method=\"post\">\n";		echo "<table>\n";		echo "\t<tr>\n\t\t<th class=\"data left required\">{$lang['strusername']}</th>\n";		echo "\t\t<td class=\"data1\"><input size=\"15\" maxlength=\"{$data->_maxNameLen}\" name=\"formUsername\" value=\"", htmlspecialchars($_POST['formUsername']), "\" /></td>\n\t</tr>\n";		echo "\t<tr>\n\t\t<th class=\"data left\">{$lang['strpassword']}</th>\n";		echo "\t\t<td class=\"data1\"><input size=\"15\" type=\"password\" name=\"formPassword\" value=\"", htmlspecialchars($_POST['formPassword']), "\" /></td>\n\t</tr>\n";		echo "\t<tr>\n\t\t<th class=\"data left\">{$lang['strconfirm']}</th>\n";		echo "\t\t<td class=\"data1\"><input size=\"15\" type=\"password\" name=\"formConfirm\" value=\"", htmlspecialchars($_POST['formConfirm']), "\" /></td>\n\t</tr>\n";		echo "\t<tr>\n\t\t<th class=\"data left\"><label for=\"formSuper\">{$lang['strsuper']}</label></th>\n";		echo "\t\t<td class=\"data1\"><input type=\"checkbox\" id=\"formSuper\" name=\"formSuper\"", 			(isset($_POST['formSuper'])) ? ' checked="checked"' : '', " /></td>\n\t</tr>\n";		echo "\t<tr>\n\t\t<th class=\"data left\"><label for=\"formCreateDB\">{$lang['strcreatedb']}</label></th>\n";		echo "\t\t<td class=\"data1\"><input type=\"checkbox\" id=\"formCreateDB\" name=\"formCreateDB\"", 			(isset($_POST['formCreateDB'])) ? ' checked="checked"' : '', " /></td>\n\t</tr>\n";		echo "\t<tr>\n\t\t<th class=\"data left\">{$lang['strexpires']}</th>\n";		echo "\t\t<td class=\"data1\"><input size=\"30\" name=\"formExpires\" value=\"", htmlspecialchars($_POST['formExpires']), "\" /></td>\n\t</tr>\n";		echo "</table>\n";		echo "<p><input type=\"hidden\" name=\"action\" value=\"save_create\" />\n";		echo $misc->form;		echo "<input type=\"submit\" name=\"create\" value=\"{$lang['strcreate']}\" />\n";		echo "<input type=\"submit\" name=\"cancel\" value=\"{$lang['strcancel']}\" /></p>\n";		echo "</form>\n";	}		/**	 * Actually creates the new user in the database	 */	function doSaveCreate() {		global $data;		global $lang;		// Check data		if ($_POST['formUsername'] == '')			doCreate($lang['struserneedsname']);		else if ($_POST['formPassword'] != $_POST['formConfirm'])			doCreate($lang['strpasswordconfirm']);		else {					$status = $data->createUser($_POST['formUsername'], $_POST['formPassword'], 				isset($_POST['formCreateDB']), isset($_POST['formSuper']), $_POST['formExpires'], array());			if ($status == 0)				doDefault($lang['strusercreated']);			else				doCreate($lang['strusercreatedbad']);		}	}		/**	 * Show default list of users in the database	 */	function doDefault($msg = '') {		global $data, $misc;		global $lang;				function renderUseExpires($val) {			global $lang;			return $val == 'infinity' ? $lang['strnever'] : htmlspecialchars($val); 		}				$misc->printTrail('server');		$misc->printTabs('server','users');		$misc->printMsg($msg);				$users = $data->getUsers();				$columns = array(			'user' => array(				'title' => $lang['strusername'],				'field' => field('usename'),			),			'superuser' => array(				'title' => $lang['strsuper'],				'field' => field('usesuper'),				'type'  => 'yesno',			),			'createdb' => array(				'title' => $lang['strcreatedb'],				'field' => field('usecreatedb'),				'type'  => 'yesno',			),			'expires' => array(				'title' => $lang['strexpires'],				'field' => field('useexpires'),				'type'  => 'callback',				'params'=> array('function' => 'renderUseExpires', 'null' => $lang['strnever']),			),			'defaults' => array(				'title' => $lang['strsessiondefaults'],				'field' => field('useconfig'),			),			'actions' => array(				'title' => $lang['stractions'],			),		);				$actions = array(			'alter' => array(				'title' => $lang['stralter'],				'url'   => "users.php?action=edit&amp;{$misc->href}&amp;",				'vars'  => array('username' => 'usename'),			),			'drop' => array(				'title' => $lang['strdrop'],				'url'   => "users.php?action=confirm_drop&amp;{$misc->href}&amp;",				'vars'  => array('username' => 'usename'),			),		);				$misc->printTable($users, $columns, $actions, $lang['strnousers']);		echo "<p><a class=\"navlink\" href=\"users.php?action=create&amp;{$misc->href}\">{$lang['strcreateuser']}</a></p>\n";	}	$misc->printHeader($lang['strusers']);	$misc->printBody();	switch ($action) {		case 'changepassword':			if (isset($_REQUEST['ok'])) doChangePassword(false);			else doAccount();			break;		case 'confchangepassword':			doChangePassword(true);			break;					case 'account':			doAccount();			break;		case 'save_create':			if (isset($_REQUEST['cancel'])) doDefault();			else doSaveCreate();			break;		case 'create':						doCreate();			break;		case 'drop':			if (isset($_REQUEST['cancel'])) doDefault();			else doDrop(false);			break;		case 'confirm_drop':			doDrop(true);			break;		case 'save_edit':			if (isset($_REQUEST['cancel'])) doDefault();			else doSaveEdit();			break;		case 'edit':			doEdit();			break;		default:			doDefault();			break;	}		$misc->printFooter();?>
<?php	/**	 * Class to hold various commonly used functions	 *	 * $Id: Misc.php,v 1.171 2008/03/17 21:35:48 ioguix Exp $	 */	class Misc {		// Tracking string to include in HREFs		var $href;		// Tracking string to include in forms		var $form;		/* Constructor */		function Misc() {		}		/**		 * Checks if dumps are properly set up		 * @param $all (optional) True to check pg_dumpall, false to just check pg_dump		 * @return True, dumps are set up, false otherwise		 */		function isDumpEnabled($all = false) {			$info = $this->getServerInfo();			return !empty($info[$all ? 'pg_dumpall_path' : 'pg_dump_path']);		}		/**		 * Sets the href tracking variable		 */		function setHREF() {			$this->href = $this->getHREF();		}		/**		 * Get a href query string, excluding objects below the given object type (inclusive)		 */		function getHREF($exclude_from = null) {			$href = '';			if (isset($_REQUEST['server']) && $exclude_from != 'server') {				$href .= 'server=' . urlencode($_REQUEST['server']);				if (isset($_REQUEST['database']) && $exclude_from != 'database') {					$href .= '&amp;database=' . urlencode($_REQUEST['database']);					if (isset($_REQUEST['schema']) && $exclude_from != 'schema') {						$href .= '&amp;schema=' . urlencode($_REQUEST['schema']);					}				}			}			return $href;		}		/**		 * Sets the form tracking variable		 */		function setForm() {			$this->form = '';			if (isset($_REQUEST['server'])) {				$this->form .= "<input type=\"hidden\" name=\"server\" value=\"" . htmlspecialchars($_REQUEST['server']) . "\" />\n";				if (isset($_REQUEST['database'])) {					$this->form .= "<input type=\"hidden\" name=\"database\" value=\"" . htmlspecialchars($_REQUEST['database']) . "\" />\n";					if (isset($_REQUEST['schema'])) {						$this->form .= "<input type=\"hidden\" name=\"schema\" value=\"" . htmlspecialchars($_REQUEST['schema']) . "\" />\n";					}				}			}		}		/**		 * Render a value into HTML using formatting rules specified		 * by a type name and parameters.		 *		 * @param $str The string to change		 *		 * @param $type Field type (optional), this may be an internal PostgreSQL type, or:		 *			yesno    - same as bool, but renders as 'Yes' or 'No'.		 *			pre      - render in a <pre> block.		 *			nbsp     - replace all spaces with &nbsp;'s		 *			verbatim - render exactly as supplied, no escaping what-so-ever.		 *			callback - render using a callback function supplied in the 'function' param.		 *		 * @param $params Type parameters (optional), known parameters:		 *			null     - string to display if $str is null, or set to TRUE to use a default 'NULL' string,		 *			           otherwise nothing is rendered.		 *			clip     - if true, clip the value to a fixed length, and append an ellipsis...		 *			cliplen  - the maximum length when clip is enabled (defaults to $conf['max_chars'])		 *			ellipsis - the string to append to a clipped value (defaults to $lang['strellipsis'])		 *			tag      - an HTML element name to surround the value.		 *			class    - a class attribute to apply to any surrounding HTML element.		 *			align    - an align attribute ('left','right','center' etc.)		 *			true     - (type='bool') the representation of true.		 *			false    - (type='bool') the representation of false.		 *			function - (type='callback') a function name, accepts args ($str, $params) and returns a rendering.		 *			lineno   - prefix each line with a line number.		 *			map      - an associative array.		 *		 * @return The HTML rendered value		 */		function printVal($str, $type = null, $params = array()) {			global $lang, $conf, $data;			// Shortcircuit for a NULL value			if (is_null($str))				return isset($params['null'])						? ($params['null'] === true ? '<i>NULL</i>' : $params['null'])						: '';			if (isset($params['map']) && isset($params['map'][$str])) $str = $params['map'][$str];			// Clip the value if the 'clip' parameter is true.			if (isset($params['clip']) && $params['clip'] === true) {				$maxlen = isset($params['cliplen']) && is_integer($params['cliplen']) ? $params['cliplen'] : $conf['max_chars'];				$ellipsis = isset($params['ellipsis']) ? $params['ellipsis'] : $lang['strellipsis'];				if (strlen($str) > $maxlen) {					$str = substr($str, 0, $maxlen-1) . $ellipsis;				}			}			$out = '';			switch ($type) {				case 'int2':				case 'int4':				case 'int8':				case 'float4':				case 'float8':				case 'money':				case 'numeric':				case 'oid':				case 'xid':				case 'cid':				case 'tid':					$align = 'right';					$out = nl2br(htmlspecialchars($str));					break;				case 'yesno':					if (!isset($params['true'])) $params['true'] = $lang['stryes'];					if (!isset($params['false'])) $params['false'] = $lang['strno'];					// No break - fall through to boolean case.				case 'bool':				case 'boolean':					if (is_bool($str)) $str = $str ? 't' : 'f';					switch ($str) {						case 't':							$out = (isset($params['true']) ? $params['true'] : $lang['strtrue']);							$align = 'center';							break;						case 'f':							$out = (isset($params['false']) ? $params['false'] : $lang['strfalse']);							$align = 'center';							break;						default:							$out = htmlspecialchars($str);					}					break;				case 'bytea':					$tag = 'div';					$class = 'pre';					$out = $data->escapeBytea($str);					break;				case 'errormsg':					$tag = 'pre';					$class = 'error';					$out = htmlspecialchars($str);					break;				case 'pre':					$tag = 'pre';					$out = htmlspecialchars($str);					break;				case 'prenoescape':					$tag = 'pre';					$out = $str;					break;				case 'nbsp':					$out = nl2br(str_replace(' ', '&nbsp;', htmlspecialchars($str)));					break;				case 'verbatim':					$out = $str;					break;				case 'callback':					$out = $params['function']($str, $params);					break;				case 'prettysize':					if ($str == -1) 						$out = $lang['strnoaccess'];					else					{						$limit = 10 * 1024;						$mult = 1;						if ($str < $limit * $mult)							$out = $str.' '.$lang['strbytes'];						else						{							$mult *= 1024;							if ($str < $limit * $mult)								$out = floor(($str + $mult / 2) / $mult).' '.$lang['strkb'];							else							{								$mult *= 1024;								if ($str < $limit * $mult)									$out = floor(($str + $mult / 2) / $mult).' '.$lang['strmb'];								else								{									$mult *= 1024;									if ($str < $limit * $mult)										$out = floor(($str + $mult / 2) / $mult).' '.$lang['strgb'];									else									{										$mult *= 1024;										if ($str < $limit * $mult)											$out = floor(($str + $mult / 2) / $mult).' '.$lang['strtb'];									}								}							}						}					}					break;				case 'slonystatus':					switch ($str) {					case 'insync':						$out = $lang['strhealthy'];						break;					case 'outofsync':						$out = $lang['stroutofsync'];						break;					default:						$out = $lang['strunknown'];					}					break;				default:					// If the string contains at least one instance of >1 space in a row, a tab					// character, a space at the start of a line, or a space at the start of					// the whole string then render within a pre-formatted element (<pre>).					if (preg_match('/(^ |  |\t|\n )/m', $str)) {						$tag = 'pre';						$class = 'data';						$out = htmlspecialchars($str);					} else {						$out = nl2br(htmlspecialchars($str));					}			}			if (isset($params['class'])) $class = $params['class'];			if (isset($params['align'])) $align = $params['align'];			if (!isset($tag) && (isset($class) || isset($align))) $tag = 'div';			if (isset($tag)) {				$alignattr = isset($align) ? " style=\"text-align: {$align}\"" : '';				$classattr = isset($class) ? " class=\"{$class}\"" : '';				$out = "<{$tag}{$alignattr}{$classattr}>{$out}</{$tag}>";			}			// Add line numbers if 'lineno' param is true			if (isset($params['lineno']) && $params['lineno'] === true) {				$lines = explode("\n", $str);				$num = count($lines);				if ($num > 0) {					$temp = "<table>\n<tr><td class=\"{$class}\" style=\"vertical-align: top; padding-right: 10px;\"><pre class=\"{$class}\">";					for ($i = 1; $i <= $num; $i++) {						$temp .= $i . "\n";					}					$temp .= "</pre></td><td class=\"{$class}\" style=\"vertical-align: top;\">{$out}</td></tr></table>\n";					$out = $temp;				}				unset($lines);			}			return $out;		}		/**		 * A function to recursively strip slashes.  Used to		 * enforce magic_quotes_gpc being off.		 * @param &var The variable to strip		 */		function stripVar(&$var) {			if (is_array($var)) {				foreach($var as $k => $v) {					$this->stripVar($var[$k]);					/* magic_quotes_gpc escape keys as well ...*/					if (is_string($k)) {						$ek = stripslashes($k);						if ($ek !== $k) {							$var[$ek] = $var[$k];							unset($var[$k]);						}					}				}			}			else				$var = stripslashes($var);		}		/**		 * Print out the page heading and help link		 * @param $title Title, already escaped		 * @param $help (optional) The identifier for the help link		 */		function printTitle($title, $help = null) {			global $data, $lang;			echo "<h2>";			$this->printHelp($title, $help);			echo "</h2>\n";		}		/**		 * Print out a message		 * @param $msg The message to print		 */		function printMsg($msg) {			if ($msg != '') echo "<p class=\"message\">{$msg}</p>\n";		}		/**		 * Creates a database accessor		 */		function getDatabaseAccessor($database, $server_id = null) {			global $lang, $conf, $misc, $_connection;			$server_info = $this->getServerInfo($server_id);			// Perform extra security checks if this config option is set			if ($conf['extra_login_security']) {				// Disallowed logins if extra_login_security is enabled.				// These must be lowercase.				$bad_usernames = array('pgsql', 'postgres', 'root', 'administrator');				$username = strtolower($server_info['username']);				if ($server_info['password'] == '' || in_array($username, $bad_usernames)) {					unset($_SESSION['webdbLogin'][$_REQUEST['server']]);					$msg = $lang['strlogindisallowed'];					include('./login.php');					exit;				}			}			// Create the connection object and make the connection			$_connection = new Connection(				$server_info['host'],				$server_info['port'],				$server_info['sslmode'],				$server_info['username'],				$server_info['password'],				$database			);			// Get the name of the database driver we need to use.			// The description of the server is returned in $platform.			$_type = $_connection->getDriver($platform);			if ($_type === null) {				printf($lang['strpostgresqlversionnotsupported'], $postgresqlMinVer);				exit;			}			$this->setServerInfo('platform', $platform, $server_id);			$this->setServerInfo('pgVersion', $_connection->conn->pgVersion, $server_id);			// Create a database wrapper class for easy manipulation of the			// connection.			include_once('./classes/database/' . $_type . '.php');			$data = new $_type($_connection->conn);			$data->platform = $_connection->platform;			return $data;		}		/**		 * Prints the page header.  If global variable $_no_output is		 * set then no header is drawn.		 * @param $title The title of the page		 * @param $script script tag		 */		function printHeader($title = '', $script = null, $frameset = false) {			global $appName, $lang, $_no_output, $conf;			if (!isset($_no_output)) {				header("Content-Type: text/html; charset=" . $lang['appcharset']);				// Send XHTML headers, or regular XHTML strict headers				echo "<?xml version=\"1.0\" encoding=\"", htmlspecialchars($lang['appcharset']), "\"?>\n";				if ($frameset == true) {					echo "<!DOCTYPE html PUBLIC \"-//W3C//DTD XHTML 1.0 Frameset//EN\" \"http://www.w3.org/TR/xhtml1/DTD/xhtml1-frameset.dtd\">\n";				} else if (isset($conf['use_xhtml_strict']) && $conf['use_xhtml_strict']) {					echo "<!DOCTYPE html PUBLIC \"-//W3C//DTD XHTML 1.0 Strict//EN\" \"http://www.w3.org/TR/xhtml1/DTD/xhtml1-Strict.dtd\">\n";				} else {					echo "<!DOCTYPE html PUBLIC \"-//W3C//DTD XHTML 1.0 Transitional//EN\" \"http://www.w3.org/TR/xhtml1/DTD/xhtml1-transitional.dtd\">\n";				}				echo "<html xmlns=\"http://www.w3.org/1999/xhtml\" xml:lang=\"{$lang['applocale']}\" lang=\"{$lang['applocale']}\"";				if (strcasecmp($lang['applangdir'], 'ltr') != 0) echo " dir=\"", htmlspecialchars($lang['applangdir']), "\"";				echo ">\n";				echo "<head>\n";				echo "<meta http-equiv=\"Content-Type\" content=\"text/html; charset={$lang['appcharset']}\" />\n";				// Theme				echo "<link rel=\"stylesheet\" href=\"themes/{$conf['theme']}/global.css\" type=\"text/css\" />\n";				echo "<link rel=\"shortcut icon\" href=\"images/themes/{$conf['theme']}/Favicon.ico\" type=\"image/vnd.microsoft.icon\" />\n";				echo "<link rel=\"icon\" type=\"image/png\" href=\"images/themes/{$conf['theme']}/Introduction.png\" />\n";				echo "<title>", htmlspecialchars($appName);				if ($title != '') echo " - {$title}";				echo "</title>\n";				if ($script) echo "{$script}\n";				echo "</head>\n";			}		}		/**		 * Prints the page footer		 * @param $doBody True to output body tag, false otherwise		 */		function printFooter($doBody = true) {			global $_reload_browser, $_reload_drop_database;			global $lang, $_no_bottom_link;			if ($doBody) {				if (isset($_reload_browser)) $this->printReload(false);				elseif (isset($_reload_drop_database)) $this->printReload(true);				if (!isset($_no_bottom_link)) 					echo "<a href=\"#\" class=\"bottom_link\">".$lang['strgotoppage']."</a>";				echo "</body>\n";			}			echo "</html>\n";		}		/**		 * Prints the page body.		 * @param $doBody True to output body tag, false otherwise		 * @param $bodyClass - name of body class		 */		function printBody($bodyClass = '', $doBody = true ) {			global $_no_output;			if (!isset($_no_output)) {				if ($doBody) {					$bodyClass = htmlspecialchars($bodyClass);					echo "<body", ($bodyClass == '' ? '' : " class=\"{$bodyClass}\"");					echo ">\n";				}			}		}		/**		 * Outputs JavaScript code that will reload the browser		 * @param $database True if dropping a database, false otherwise		 */		function printReload($database) {			echo "<script type=\"text/javascript\">\n";			if ($database)				echo "\tparent.frames.browser.location.href=\"browser.php\";\n";			else				echo "\tparent.frames.browser.location.reload();\n";			echo "</script>\n";		}		/**		 * Display navigation tabs		 * @param $tabs An associative array of tabs definitions, see printNav() for an example.		 * @param $activetab The name of the tab to be highlighted.		 */		function printTabs($tabs, $activetab) {			global $misc, $conf, $data, $lang;			if (is_string($tabs)) {				$_SESSION['webdbLastTab'][$tabs] = $activetab;				$tabs = $this->getNavTabs($tabs);			}			echo "<table class=\"tabs\"><tr>\n";			#echo "<div class=\"tabs\">\n";			# FIXME: don't count hidden tabs			$width = (int)(100 / count($tabs)).'%';			foreach ($tabs as $tab_id => $tab) {				$active = ($tab_id == $activetab) ? ' active' : '';				if (!isset($tab['hide']) || $tab['hide'] !== true) {					$tablink = "<a" . $this->printActionUrl($tab, $_REQUEST, 'href') . ">";					if (isset($tab['icon']) && $icon = $this->icon($tab['icon']))						$tablink .= "<span class=\"icon\"><img src=\"{$icon}\" alt=\"{$tab['title']}\" /></span>";					$tablink .= "<span class=\"label\">{$tab['title']}</span></a>";					echo "<td style=\"width: {$width}\" class=\"tab{$active}\">";					#echo "<span class=\"tab{$active}\" style=\"white-space:nowrap;\">";					if (isset($tab['help']))						$this->printHelp($tablink, $tab['help']);					else						echo $tablink;					echo "</td>\n";					#echo "</span>\n";				}			}			echo "</tr></table>\n";			#echo "</div>\n";		}		/**		 * Retrieve the tab info for a specific tab bar.		 * @param $section The name of the tab bar.		 */		function getNavTabs($section) {			global $data, $lang, $conf, $slony;			$hide_advanced = ($conf['show_advanced'] === false);			switch ($section) {				case 'root':					return array (						'intro' => array (							'title' => $lang['strintroduction'],							'url'   => "intro.php",							'icon'  => 'Introduction',						),						'servers' => array (							'title' => $lang['strservers'],							'url'   => "servers.php",							'icon'  => 'Servers',						),					);				case 'server':				case 'report':					$server_info = $this->getServerInfo();					$hide_users = !$data->isSuperUser($server_info['username']);					$tmp = array (						'databases' => array (							'title' => $lang['strdatabases'],							'url'   => 'all_db.php',							'urlvars' => array('subject' => 'server'),							'help'  => 'pg.database',							'icon'  => 'Databases',						)					);					if ($data->hasRoles()) {						$tmp = array_merge($tmp, array(							'roles' => array (								'title' => $lang['strroles'],								'url'   => 'roles.php',								'urlvars' => array('subject' => 'server'),								'hide'  => $hide_users,								'help'  => 'pg.role',								'icon'  => 'Roles',							)						));					}					else {						$tmp = array_merge($tmp, array(							'users' => array (								'title' => $lang['strusers'],								'url'   => 'users.php',								'urlvars' => array('subject' => 'server'),								'hide'  => $hide_users,								'help'  => 'pg.user',								'icon'  => 'Users',							),							'groups' => array (								'title' => $lang['strgroups'],								'url'   => 'groups.php',								'urlvars' => array('subject' => 'server'),								'hide'  => $hide_users,								'help'  => 'pg.group',								'icon'  => 'UserGroups',							)						));					}					$tmp = array_merge($tmp, array(						'account' => array (							'title' => $lang['straccount'],							'url'   => $data->hasRoles() ? 'roles.php' : 'users.php',							'urlvars' => array('subject' => 'server', 'action' => 'account'),							'hide'  => !$hide_users,							'help'  => 'pg.role',							'icon'  => 'User',						),						'tablespaces' => array (							'title' => $lang['strtablespaces'],							'url'   => 'tablespaces.php',							'urlvars' => array('subject' => 'server'),							'hide'  => (!$data->hasTablespaces()),							'help'  => 'pg.tablespace',							'icon'  => 'Tablespaces',						),						'export' => array (							'title' => $lang['strexport'],							'url'   => 'all_db.php',							'urlvars' => array('subject' => 'server', 'action' => 'export'),							'hide'  => (!$this->isDumpEnabled()),							'icon'  => 'Export',						),						'reports' => array (							'title' => $lang['strreports'],							'url'   => 'reports.php',							'urlvars' => array('subject' => 'server'),							'hide' => !$conf['show_reports'],							'icon' => 'Reports',						),					));					return $tmp;					break;				case 'database':					$tabs = array (						'schemas' => array (							'title' => $lang['strschemas'],							'url'   => 'schemas.php',							'urlvars' => array('subject' => 'database'),							'help'  => 'pg.schema',							'icon'  => 'Schemas',						),						'sql' => array (							'title' => $lang['strsql'],							'url'   => 'database.php',							'urlvars' => array('subject' => 'database', 'action' => 'sql', 'new' => 1),							'help'  => 'pg.sql',							'tree'  => false,							'icon'  => 'SqlEditor'						),						'find' => array (							'title' => $lang['strfind'],							'url'   => 'database.php',							'urlvars' => array('subject' => 'database', 'action' => 'find'),							'tree'  => false,							'icon'  => 'Search'						),						'variables' => array (							'title' => $lang['strvariables'],							'url'   => 'database.php',							'urlvars' => array('subject' => 'database', 'action' => 'variables'),							'help'  => 'pg.variable',							'tree'  => false,							'icon'  => 'Variables',						),						'processes' => array (							'title' => $lang['strprocesses'],							'url'   => 'database.php',							'urlvars' => array('subject' => 'database', 'action' => 'processes'),							'help'  => 'pg.process',							'tree'  => false,							'icon'  => 'Processes',						),						'locks' => array (							'title' => $lang['strlocks'],							'url'   => 'database.php',							'urlvars' => array('subject' => 'database', 'action' => 'locks'),							'help'  => 'pg.locks',							'tree'  => false,							'icon'  => 'Key',						),						'admin' => array (							'title' => $lang['stradmin'],							'url'   => 'database.php',							'urlvars' => array('subject' => 'database', 'action' => 'admin'),							'tree'  => false,							'icon'  => 'Admin',						),						'privileges' => array (							'title' => $lang['strprivileges'],							'url'   => 'privileges.php',							'urlvars' => array('subject' => 'database'),							'hide'  => (!isset($data->privlist['database'])),							'help'  => 'pg.privilege',							'tree'  => false,							'icon'  => 'Privileges',						),						'languages' => array (							'title' => $lang['strlanguages'],							'url'   => 'languages.php',							'urlvars' => array('subject' => 'database'),							'hide'  => $hide_advanced,							'help'  => 'pg.language',							'icon'  => 'Languages',						),						'casts' => array (							'title' => $lang['strcasts'],							'url'   => 'casts.php',							'urlvars' => array('subject' => 'database'),							'hide'  => ($hide_advanced),							'help'  => 'pg.cast',							'icon'  => 'Casts',						),						'slony' => array (							'title' => 'Slony',							'url'   => 'plugin_slony.php',							'urlvars' => array('subject' => 'database', 'action' => 'clusters_properties'),							'hide'  => !isset($slony),							'help'  => '',							'icon'  => 'Replication',						),						'export' => array (							'title' => $lang['strexport'],							'url'   => 'database.php',							'urlvars' => array('subject' => 'database', 'action' => 'export'),							'hide'  => (!$this->isDumpEnabled()),							'tree'  => false,							'icon'  => 'Export',						),					);					return $tabs;				case 'schema':					$tabs = array (						'tables' => array (							'title' => $lang['strtables'],							'url'   => 'tables.php',							'urlvars' => array('subject' => 'schema'),							'help'  => 'pg.table',							'icon'  => 'Tables',						),						'views' => array (							'title' => $lang['strviews'],							'url'   => 'views.php',							'urlvars' => array('subject' => 'schema'),							'help'  => 'pg.view',							'icon'  => 'Views',						),						'sequences' => array (							'title' => $lang['strsequences'],							'url'   => 'sequences.php',							'urlvars' => array('subject' => 'schema'),							'help'  => 'pg.sequence',							'icon'  => 'Sequences',						),						'functions' => array (							'title' => $lang['strfunctions'],							'url'   => 'functions.php',							'urlvars' => array('subject' => 'schema'),							'help'  => 'pg.function',							'icon'  => 'Functions',						),						'fulltext' => array (							'title' => $lang['strfulltext'],							'url'   => 'fulltext.php',							'urlvars' => array('subject' => 'schema'),							'help'  => 'pg.fts',							'tree'  => true,							'icon'  => 'Fts',						),						'domains' => array (							'title' => $lang['strdomains'],							'url'   => 'domains.php',							'urlvars' => array('subject' => 'schema'),							'help'  => 'pg.domain',							'icon'  => 'Domains',						),						'aggregates' => array (							'title' => $lang['straggregates'],							'url'   => 'aggregates.php',							'urlvars' => array('subject' => 'schema'),							'hide'  => $hide_advanced,							'help'  => 'pg.aggregate',							'icon'  => 'Aggregates',						),						'types' => array (							'title' => $lang['strtypes'],							'url'   => 'types.php',							'urlvars' => array('subject' => 'schema'),							'hide'  => $hide_advanced,							'help'  => 'pg.type',							'icon'  => 'Types',						),						'operators' => array (							'title' => $lang['stroperators'],							'url'   => 'operators.php',							'urlvars' => array('subject' => 'schema'),							'hide'  => $hide_advanced,							'help'  => 'pg.operator',							'icon'  => 'Operators',						),						'opclasses' => array (							'title' => $lang['stropclasses'],							'url'   => 'opclasses.php',							'urlvars' => array('subject' => 'schema'),							'hide'  => $hide_advanced,							'help'  => 'pg.opclass',							'icon'  => 'OperatorClasses',						),						'conversions' => array (							'title' => $lang['strconversions'],							'url'   => 'conversions.php',							'urlvars' => array('subject' => 'schema'),							'hide'  => $hide_advanced,							'help'  => 'pg.conversion',							'icon'  => 'Conversions',						),						'privileges' => array (							'title' => $lang['strprivileges'],							'url'   => 'privileges.php',							'urlvars' => array('subject' => 'schema'),							'help'  => 'pg.privilege',							'tree'  => false,							'icon'  => 'Privileges',						),						'export' => array (							'title' => $lang['strexport'],							'url'   => 'schemas.php',							'urlvars' => array('subject' => 'schema', 'action' => 'export'),							'hide'  => (!$this->isDumpEnabled()),							'tree'  => false,							'icon'  => 'Export',						),					);					if (!$data->hasFTS()) unset($tabs['fulltext']);					return $tabs;				case 'table':					return array (						'columns' => array (							'title' => $lang['strcolumns'],							'url'   => 'tblproperties.php',							'urlvars' => array('subject' => 'table', 'table' => field('table')),							'icon'  => 'Columns',							'branch'=> true,						),						'indexes' => array (							'title' => $lang['strindexes'],							'url'   => 'indexes.php',							'urlvars' => array('subject' => 'table', 'table' => field('table')),							'help'  => 'pg.index',							'icon'  => 'Indexes',							'branch'=> true,						),						'constraints' => array (							'title' => $lang['strconstraints'],							'url'   => 'constraints.php',							'urlvars' => array('subject' => 'table', 'table' => field('table')),							'help'  => 'pg.constraint',							'icon'  => 'Constraints',							'branch'=> true,						),						'triggers' => array (							'title' => $lang['strtriggers'],							'url'   => 'triggers.php',							'urlvars' => array('subject' => 'table', 'table' => field('table')),							'help'  => 'pg.trigger',							'icon'  => 'Triggers',							'branch'=> true,						),						'rules' => array (							'title' => $lang['strrules'],							'url'   => 'rules.php',							'urlvars' => array('subject' => 'table', 'table' => field('table')),							'help'  => 'pg.rule',							'icon'  => 'Rules',							'branch'=> true,						),						'admin' => array (							'title' => $lang['stradmin'],							'url'   => 'tables.php',							'urlvars' => array('subject' => 'table', 'table' => field('table'), 'action' => 'admin'),							'icon'  => 'Admin',						),						'info' => array (							'title' => $lang['strinfo'],							'url'   => 'info.php',							'urlvars' => array('subject' => 'table', 'table' => field('table')),							'icon'  => 'Statistics',						),						'privileges' => array (							'title' => $lang['strprivileges'],							'url'   => 'privileges.php',							'urlvars' => array('subject' => 'table', 'table' => field('table')),							'help'  => 'pg.privilege',							'icon'  => 'Privileges',						),						'import' => array (							'title' => $lang['strimport'],							'url'   => 'tblproperties.php',							'urlvars' => array('subject' => 'table', 'table' => field('table'), 'action' => 'import'),							'icon'  => 'Import',							'hide'	=> false,						),						'export' => array (							'title' => $lang['strexport'],							'url'   => 'tblproperties.php',							'urlvars' => array('subject' => 'table', 'table' => field('table'), 'action' => 'export'),							'icon'  => 'Export',							'hide'	=> false,						),					);				case 'view':					return array (						'columns' => array (							'title' => $lang['strcolumns'],							'url'   => 'viewproperties.php',							'urlvars' => array('subject' => 'view', 'view' => field('view')),							'icon'  => 'Columns',							'branch'=> true,						),						'definition' => array (							'title' => $lang['strdefinition'],							'url'   => 'viewproperties.php',							'urlvars' => array('subject' => 'view', 'view' => field('view'), 'action' => 'definition'),							'icon'  => 'Definition'						),						'rules' => array (							'title' => $lang['strrules'],							'url'   => 'rules.php',							'urlvars' => array('subject' => 'view', 'view' => field('view')),							'help'  => 'pg.rule',							'icon'  => 'Rules',							'branch'=> true,						),						'privileges' => array (							'title' => $lang['strprivileges'],							'url'   => 'privileges.php',							'urlvars' => array('subject' => 'view', 'view' => field('view')),							'help'  => 'pg.privilege',							'icon'  => 'Privileges',						),						'export' => array (							'title' => $lang['strexport'],							'url'   => 'viewproperties.php',							'urlvars' => array('subject' => 'view', 'view' => field('view'), 'action' => 'export'),							'icon'  => 'Export',							'hide'	=> false,						),					);				case 'function':					return array (						'definition' => array (							'title' => $lang['strdefinition'],							'url'   => 'functions.php',							'urlvars' => array(									'subject' => 'function',									'function' => field('function'),									'function_oid' => field('function_oid'),									'action' => 'properties',								),							'icon'  => 'Definition',						),						'privileges' => array (							'title' => $lang['strprivileges'],							'url'   => 'privileges.php',							'urlvars' => array(									'subject' => 'function',									'function' => field('function'),									'function_oid' => field('function_oid'),								),							'icon'  => 'Privileges',						),					);				case 'aggregate':					return array (						'definition' => array (							'title' => $lang['strdefinition'],							'url'   => 'aggregates.php',							'urlvars' => array(									'subject' => 'aggregate',									'aggrname' => field('aggrname'),									'aggrtype' => field('aggrtype'),									'action' => 'properties',								),							'icon'  => 'Definition',						),					);				case 'role':					return array (						'definition' => array (							'title' => $lang['strdefinition'],							'url'   => 'roles.php',							'urlvars' => array(									'subject' => 'role',									'rolename' => field('rolename'),									'action' => 'properties',								),							'icon'  => 'Definition',						),					);				case 'popup':					return array (						'sql' => array (							'title' => $lang['strsql'],							'url'   => 'sqledit.php',							'urlvars' => array('subject' => 'schema', 'action' => 'sql'),							'help'  => 'pg.sql',							'icon'  => 'SqlEditor',						),						'find' => array (							'title' => $lang['strfind'],							'url'   => 'sqledit.php',							'urlvars' => array('subject' => 'schema', 'action' => 'find'),							'icon'  => 'Search',						),					);				case 'slony_cluster':					return array (						'properties' => array (							'title' => $lang['strproperties'],							'url'   => 'plugin_slony.php',							'urlvars' => array(									'subject' => 'slony_cluster',									'action' => 'cluster_properties',									'slony_cluster' => field('slony_cluster')								),							'help'  => '',							'tree'  => false,							'icon'  => 'Cluster',						),						'nodes' => array (							'title' => $lang['strnodes'],							'url'   => 'plugin_slony.php',							'urlvars' => array(									'subject' => 'slony_cluster',									'action' => 'nodes_properties',									'slony_cluster' => field('slony_cluster')								),							'branch' => 'nodes',							'help'  => '',							'icon'  => 'Nodes',						),						'sets' => array (							'title' => $lang['strrepsets'],							'url'   => 'plugin_slony.php',							'urlvars' => array(								'subject' => 'slony_cluster',								'action' => 'sets_properties',								'slony_cluster' => field('slony_cluster')							),							'branch' => 'sets',							'help'  => '',							'icon'  => 'ReplicationSets',						),					);				case 'column':					return array(						'properties' => array (							'title'		=> $lang['strcolprop'],							'url'		=> 'colproperties.php',							'urlvars'	=> array(								'subject' => 'column',								'table' => field('table'),								'column' => field('column')							),							'icon'		=> 'Column'						),						'privileges' => array (							'title' => $lang['strprivileges'],							'url'   => 'privileges.php',							'urlvars' => array(								'subject' => 'column',								'table' => field('table'),								'column' => field('column')							),							'help'  => 'pg.privilege',							'icon'  => 'Privileges',						)					);                case 'fulltext':                    return array (                        'ftsconfigs' => array (                            'title' => $lang['strftstabconfigs'],                            'url'   => 'fulltext.php',                            'urlvars' => array('subject' => 'schema'),                            'hide'  => !$data->hasFTS(),                            'help'  => 'pg.ftscfg',                            'tree'  => true,                            'icon'  => 'FtsCfg',                        ),                        'ftsdicts' => array (                            'title' => $lang['strftstabdicts'],                            'url'   => 'fulltext.php',                            'urlvars' => array('subject' => 'schema', 'action' => 'viewdicts'),                            'hide'  => !$data->hasFTS(),                            'help'  => 'pg.ftsdict',                            'tree'  => true,                            'icon'  => 'FtsDict',                        ),                        'ftsparsers' => array (                            'title' => $lang['strftstabparsers'],                            'url'   => 'fulltext.php',                            'urlvars' => array('subject' => 'schema', 'action' => 'viewparsers'),                            'hide'  => !$data->hasFTS(),                            'help'  => 'pg.ftsparser',                            'tree'  => true,                            'icon'  => 'FtsParser',                        ),                    );				default:					return array();			}		}		/**		 * Get the URL for the last active tab of a particular tab bar.		 */		function getLastTabURL($section) {			global $data;			$tabs = $this->getNavTabs($section);			if (isset($_SESSION['webdbLastTab'][$section]) && isset($tabs[$_SESSION['webdbLastTab'][$section]]))				$tab = $tabs[$_SESSION['webdbLastTab'][$section]];			else				$tab = reset($tabs);			return isset($tab['url']) ? $tab : null;		}		function printTopbar() {			global $lang, $conf, $appName, $appVersion, $appLangFiles;			$server_info = $this->getServerInfo();			echo "<div class=\"topbar\"><table style=\"width: 100%\"><tr><td>";			if ($server_info && isset($server_info['platform']) && isset($server_info['username'])) {				echo sprintf($lang['strtopbar'],					'<span class="platform">'.htmlspecialchars($server_info['platform']).'</span>',					'<span class="host">'.htmlspecialchars((empty($server_info['host'])) ? 'localhost':$server_info['host']).'</span>',					'<span class="port">'.htmlspecialchars($server_info['port']).'</span>',					'<span class="username">'.htmlspecialchars($server_info['username']).'</span>',					'<span class="date">'.date($lang['strtimefmt']).'</span>');			} else {				echo "<span class=\"appname\">$appName</span> <span class=\"version\">$appVersion</span>";			}			echo "</td>";			if (isset($_REQUEST['server'])) {				$sql_url = "sqledit.php?{$this->href}&amp;action=";				$sql_window_id = htmlspecialchars('sqledit:'.$_REQUEST['server']);				$history_url = "history.php?{$this->href}&amp;action=pophistory";				$history_window_id = htmlspecialchars('history:'.$_REQUEST['server']);				$logout_shared = isset($_SESSION['sharedUsername']) ?					' onclick="return confirm(\''. $lang['strconfdropcred']. '\')"':					'';				echo "<td style=\"text-align: right\">";				echo "<ul class=\"toplink\">\n\t<li><a class=\"toplink\" href=\"{$sql_url}sql\" target=\"sqledit\" onclick=\"window.open('{$sql_url}sql','{$sql_window_id}','toolbar=no,width=700,height=500,resizable=yes,scrollbars=yes').focus(); return false;\">{$lang['strsql']}</a></li>\n";				echo "\t<li><a class=\"toplink\" href=\"{$history_url}\" onclick=\"window.open('{$history_url}','{$history_window_id}','toolbar=no,width=800,height=600,resizable=yes,scrollbars=yes').focus(); return false;\">{$lang['strhistory']}</a></li>\n";				echo "\t<li><a class=\"toplink\" href=\"{$sql_url}find\" target=\"sqledit\" onclick=\"window.open('{$sql_url}find','{$sql_window_id}','toolbar=no,width=700,height=500,resizable=yes,scrollbars=yes').focus(); return false;\">{$lang['strfind']}</a></li>\n"; 				echo "\t<li><a class=\"toplink\" href=\"servers.php?action=logout&amp;logoutServer=".htmlspecialchars($server_info['host']).":".htmlspecialchars($server_info['port']).":".htmlspecialchars($server_info['sslmode'])."\"{$logout_shared}>{$lang['strlogout']}</a></li>\n"; 				echo "</ul>\n";				echo "</td>";			}/*			echo "<td style=\"text-align: right; width: 1%\">";			echo "<form method=\"get\"><select name=\"language\" onchange=\"this.form.submit()\">\n";			$language = isset($_SESSION['webdbLanguage']) ? $_SESSION['webdbLanguage'] : 'english';			foreach ($appLangFiles as $k => $v) {				echo "<option value=\"{$k}\"",					($k == $language) ? ' selected="selected"' : '',					">{$v}</option>\n";			}			echo "</select>\n";			echo "<noscript><input type=\"submit\" value=\"Set Language\"></noscript>\n";			foreach ($_GET as $key => $val) {				if ($key == 'language') continue;				echo "<input type=\"hidden\" name=\"$key\" value=\"", htmlspecialchars($val), "\" />\n";			}			echo "</form>\n";			echo "</td>";*/			echo "</tr></table></div>\n";		}		/**		 * Display a bread crumb trail.		 */		function printTrail($trail = array()) {			global $lang;			$this->printTopbar();			if (is_string($trail)) {				$trail = $this->getTrail($trail);			}			echo "<div class=\"trail\"><table><tr>";			foreach ($trail as $crumb) {				echo "<td class=\"crumb\">";				$crumblink = "<a";				if (isset($crumb['url']))					$crumblink .= ' href="' . $this->printVal($crumb['url'], 'nbsp') . '"';				if (isset($crumb['title']))					$crumblink .= " title=\"{$crumb['title']}\"";				$crumblink .= ">";				if (isset($crumb['title']))					$iconalt = $crumb['title'];				else					$iconalt = 'Database Root';				if (isset($crumb['icon']) && $icon = $this->icon($crumb['icon']))					$crumblink .= "<span class=\"icon\"><img src=\"{$icon}\" alt=\"{$iconalt}\" /></span>";				$crumblink .= "<span class=\"label\">" . htmlspecialchars($crumb['text']) . "</span></a>";				if (isset($crumb['help']))					$this->printHelp($crumblink, $crumb['help']);				else					echo $crumblink;				echo "{$lang['strseparator']}";				echo "</td>";			}			echo "</tr></table></div>\n";		}		/**		 * Create a bread crumb trail of the object hierarchy.		 * @param $object The type of object at the end of the trail.		 */		function getTrail($subject = null) {			global $lang, $conf, $data, $appName;			$trail = array();			$vars = '';			$done = false;			$trail['root'] = array(				'text'  => $appName,				'url'   => 'redirect.php?subject=root',				'icon'  => 'Introduction'			);			if ($subject == 'root') $done = true;			if (!$done) {				$vars = 'server='.urlencode($_REQUEST['server']).'&';				$server_info = $this->getServerInfo();				$trail['server'] = array(					'title' => $lang['strserver'],					'text'  => $server_info['desc'],					'url'   => "redirect.php?subject=server&{$vars}",					'help'  => 'pg.server',					'icon'  => 'Server'				);			}			if ($subject == 'server') $done = true;			if (isset($_REQUEST['report']) && !$done) {				$vars .= 'report='.urlencode($_REQUEST['report']).'&';				$trail['report'] = array(					'title' => $lang['strreport'],					'text'  => $_REQUEST['report'],					'url'   => "reports.php?subject=report&{$vars}",					'icon'  => 'Report'				);			}			if (isset($_REQUEST['database']) && !$done) {				$vars .= 'database='.urlencode($_REQUEST['database']).'&';				$trail['database'] = array(					'title' => $lang['strdatabase'],					'text'  => $_REQUEST['database'],					'url'   => "redirect.php?subject=database&{$vars}",					'help'  => 'pg.database',					'icon'  => 'Database'				);			} elseif (isset($_REQUEST['rolename']) && !$done) {				$vars .= "subject=role&action=properties&rolename=".urlencode($_REQUEST['rolename']);				$trail['role'] = array(					'title' => $lang['strrole'],					'text'  => $_REQUEST['rolename'],					'url'   => "redirect.php?{$vars}",					'help'  => 'pg.role',					'icon'  => 'Roles'				);			}			if ($subject == 'database' || $subject == 'role' || $subject == 'report') $done = true;			if (isset($_REQUEST['schema']) && !$done) {				$vars .= 'schema='.urlencode($_REQUEST['schema']).'&';				$trail['schema'] = array(					'title' => $lang['strschema'],					'text'  => $_REQUEST['schema'],					'url'   => "redirect.php?subject=schema&{$vars}",					'help'  => 'pg.schema',					'icon'  => 'Schema'				);			}			if ($subject == 'schema') $done = true;			if (isset($_REQUEST['slony_cluster']) && !$done) {				$vars .= 'slony_cluster='.urlencode($_REQUEST['slony_cluster']).'&';				$trail['slony_cluster'] = array(					'title' => 'Slony Cluster',					'text'  => $_REQUEST['slony_cluster'],					'url'   => "redirect.php?subject=slony_cluster&{$vars}",					'help'  => 'sl.cluster',					'icon'  => 'Cluster'				);			}			if ($subject == 'slony_cluster') $done = true;			if (isset($_REQUEST['table']) && !$done) {				$vars .= "table=".urlencode($_REQUEST['table']);				$trail['table'] = array(					'title' => $lang['strtable'],					'text'  => $_REQUEST['table'],					'url'   => "redirect.php?subject=table&{$vars}",					'help'  => 'pg.table',					'icon'  => 'Table'				);			} elseif (isset($_REQUEST['view']) && !$done) {				$vars .= "view=".urlencode($_REQUEST['view']);				$trail['view'] = array(					'title' => $lang['strview'],					'text'  => $_REQUEST['view'],					'url'   => "redirect.php?subject=view&{$vars}",					'help'  => 'pg.view',					'icon'  => 'View'				);			} elseif (isset($_REQUEST['ftscfg']) && !$done) {				$vars .= "action=viewconfig&ftscfg=".urlencode($_REQUEST['ftscfg']);				$trail['ftscfg'] = array(					'title' => $lang['strftsconfig'],					'text'  => $_REQUEST['ftscfg'],					'url'   => "fulltext.php?{$vars}",					'help'  => 'pg.ftscfg.example',					'icon'  => 'Fts'				);			}			if ($subject == 'table' || $subject == 'view' || $subject == 'ftscfg') $done = true;			if (!$done && !is_null($subject)) {				switch ($subject) {					case 'function':						$vars .= "{$subject}_oid=".urlencode($_REQUEST[$subject.'_oid']).'&';						$vars .= "subject={$subject}&{$subject}=".urlencode($_REQUEST[$subject]);						$trail[$subject] = array(							'title' => $lang['str'.$subject],							'text'  => $_REQUEST[$subject],							'url'   => "redirect.php?{$vars}",							'help'  => 'pg.function',							'icon'  => 'Function'						);						break;					case 'aggregate':						$vars .= "subject=aggregate&action=properties&aggrname=".urlencode($_REQUEST['aggrname']);						$vars .= "&aggrtype=".urlencode($_REQUEST['aggrtype']);						$trail[$subject] = array(							'title' => $lang['straggregate'],							'text'  => $_REQUEST['aggrname'],							'url'   => "redirect.php?{$vars}",							'help'  => 'pg.aggregate',							'icon'  => 'Aggregate'						);						break;					case 'slony_node':						$vars .= 'no_id='.urlencode($_REQUEST['no_id']).'&no_name='.urlencode($_REQUEST['no_name']);						$trail[$subject] = array(							'title' => 'Slony Node',							'text'  => $_REQUEST['no_name'],							'url'   => "redirect.php?{$vars}",							'help'  => 'sl.'.$subject,							'icon'  => 'Node'						);						break;					case 'slony_set':						$vars .= "{$subject}_id=".urlencode($_REQUEST[$subject]).'&';						$vars .= "subject={$subject}&{$subject}=".urlencode($_REQUEST[$subject]);						$trail[$subject] = array(							'title' => $lang['str'.$subject],							'text'  => $_REQUEST[$subject],							'url'   => "redirect.php?{$vars}",							'help'  => 'sl.'.$subject,							'icon'  => 'AvailableReplicationSet'						);						break;					case 'column':						$vars .= "&column=". urlencode($_REQUEST['column']) ."&subject=column";						$trail['column'] = array (							'title' => $lang['strcolumn'],							'text'  => $_REQUEST['column'],							'icon'	=> 'Column',							'url'   => "redirect.php?{$vars}"						);						break;					default:						if (isset($_REQUEST[$subject])) {							switch ($subject) {								case 'domain': $icon = 'Domain'; break;								case 'sequence': $icon = 'Sequence'; break;								case 'type': $icon = 'Type'; break;								case 'operator': $icon = 'Operator'; break;								default: $icon = null; break;							}							$trail[$subject] = array(								'title' => $lang['str'.$subject],								'text'  => $_REQUEST[$subject],								'help'  => 'pg.'.$subject,								'icon'  => $icon,							);						}				}			}			return $trail;		}		/**		 * Do multi-page navigation.  Displays the prev, next and page options.		 * @param $page the page currently viewed		 * @param $pages the maximum number of pages		 * @param $url the url to refer to with the page number inserted		 * @param $max_width the number of pages to make available at any one time (default = 20)		 */		function printPages($page, $pages, $url, $max_width = 20) {			global $lang;			$window = 10;			if ($page < 0 || $page > $pages) return;			if ($pages < 0) return;			if ($max_width <= 0) return;			if ($pages > 1) {				echo "<p style=\"text-align: center\">\n";				if ($page != 1) {					$temp = str_replace('%s', 1, $url);					echo "<a class=\"pagenav\" href=\"{$temp}\">{$lang['strfirst']}</a>\n";					$temp = str_replace('%s', $page - 1, $url);					echo "<a class=\"pagenav\" href=\"{$temp}\">{$lang['strprev']}</a>\n";				}				if ($page <= $window) {					$min_page = 1;					$max_page = min(2 * $window, $pages);				}				elseif ($page > $window && $pages >= $page + $window) {					$min_page = ($page - $window) + 1;					$max_page = $page + $window;				}				else {					$min_page = ($page - (2 * $window - ($pages - $page))) + 1;					$max_page = $pages;				}				// Make sure min_page is always at least 1				// and max_page is never greater than $pages				$min_page = max($min_page, 1);				$max_page = min($max_page, $pages);				for ($i = $min_page; $i <= $max_page; $i++) {					$temp = str_replace('%s', $i, $url);					if ($i != $page) echo "<a class=\"pagenav\" href=\"{$temp}\">$i</a>\n";					else echo "$i\n";				}				if ($page != $pages) {					$temp = str_replace('%s', $page + 1, $url);					echo "<a class=\"pagenav\" href=\"{$temp}\">{$lang['strnext']}</a>\n";					$temp = str_replace('%s', $pages, $url);					echo "<a class=\"pagenav\" href=\"{$temp}\">{$lang['strlast']}</a>\n";				}				echo "</p>\n";			}		}		/**		 * Displays link to the context help.		 * @param $str   - the string that the context help is related to (already escaped)		 * @param $help  - help section identifier		 */		function printHelp($str, $help) {			global $lang, $data;			echo $str;			if ($help) {				echo "<a class=\"help\" href=\"";				echo htmlspecialchars("help.php?help=".urlencode($help)."&server=".urlencode($_REQUEST['server']));				echo "\" title=\"{$lang['strhelp']}\" target=\"phppgadminhelp\">{$lang['strhelpicon']}</a>";			}		}		/**		 * Outputs JavaScript to set default focus		 * @param $object eg. forms[0].username		 */		function setFocus($object) {			echo "<script type=\"text/javascript\">\n";			echo "   document.{$object}.focus();\n";			echo "</script>\n";		}		/**		 * Outputs JavaScript to set the name of the browser window.		 * @param $name the window name		 * @param $addServer if true (default) then the server id is		 *        attached to the name.		 */		function setWindowName($name, $addServer = true) {			echo "<script type=\"text/javascript\">\n";			echo "//<![CDATA[\n";			echo "   window.name = '{$name}", ($addServer ? ':'.htmlspecialchars($_REQUEST['server']) : ''), "';\n";			echo "//]]>\n";			echo "</script>\n";		}		/**		 * Converts a PHP.INI size variable to bytes.  Taken from publically available		 * function by Chris DeRose, here: http://www.php.net/manual/en/configuration.directives.php#ini.file-uploads		 * @param $strIniSize The PHP.INI variable		 * @return size in bytes, false on failure		 */		function inisizeToBytes($strIniSize) {			// This function will take the string value of an ini 'size' parameter,			// and return a double (64-bit float) representing the number of bytes			// that the parameter represents. Or false if $strIniSize is unparseable.			$a_IniParts = array();			if (!is_string($strIniSize))				return false;			if (!preg_match ('/^(\d+)([bkm]*)$/i', $strIniSize,$a_IniParts))				return false;			$nSize = (double) $a_IniParts[1];			$strUnit = strtolower($a_IniParts[2]);			switch($strUnit) {				case 'm':					return ($nSize * (double) 1048576);				case 'k':					return ($nSize * (double) 1024);				case 'b':				default:					return $nSize;			}		}		/**		 * Display a URL given an action associative array.		 * @param $action An associative array of the follow properties:		 *			'url'  => The first part of the URL (before the ?)		 *			'urlvars' => Associative array of (URL variable => field name)		 *						these are appended to the URL		 *			'urlfn' => Function to apply to URL before display		 * @param $fields Field data from which 'urlfield' and 'vars' are obtained.		 * @param $attr If supplied then the URL will be quoted and prefixed with		 *				'$attr='.		 */		function printActionUrl(&$action, &$fields, $attr = null) {			$url = value($action['url'], $fields);			if ($url === false) return '';			if (!empty($action['urlvars'])) {				$urlvars = value($action['urlvars'], $fields);			} else {				$urlvars = array();			}			if (isset($urlvars['subject'])) {				$subject = value($urlvars['subject'], $fields);				if (isset($_REQUEST['server']) && $subject != 'root') {					$urlvars['server'] = $_REQUEST['server'];					if (isset($_REQUEST['database']) && $subject != 'server') {						$urlvars['database'] = $_REQUEST['database'];						if (isset($_REQUEST['schema']) && $subject != 'database') {							$urlvars['schema'] = $_REQUEST['schema'];						}					}				}			}			$sep = '?';			foreach ($urlvars as $var => $varfield) {				$url .= $sep . value_url($var, $fields) . '=' . value_url($varfield, $fields);				$sep = '&';			}			$url = htmlentities($url);			if ($attr !== null && $url != '')				return ' '.$attr.'="'.$url.'"';			else				return $url;		}		function getRequestVars($subject = '') {			$v = array();			if (!empty($subject))				$v['subject'] = $subject;			if (isset($_REQUEST['server']) && $subject != 'root') {				$v['server'] = $_REQUEST['server'];				if (isset($_REQUEST['database']) && $subject != 'server') {					$v['database'] = $_REQUEST['database'];					if (isset($_REQUEST['schema']) && $subject != 'database') {						$v['schema'] = $_REQUEST['schema'];					}				}			}			return $v;		}		function printUrlVars(&$vars, &$fields) {			foreach ($vars as $var => $varfield) {				echo "{$var}=", urlencode($fields[$varfield]), "&amp;";			}		}		/**		 * Display a table of data.		 * @param $tabledata A set of data to be formatted, as returned by $data->getDatabases() etc.		 * @param $columns   An associative array of columns to be displayed:		 *			$columns = array(		 *				column_id => array(		 *					'title' => Column heading,		 *					'field' => Field name for $tabledata->fields[...],		 *					'help'  => Help page for this column,		 *				), ...		 *			);		 * @param $actions   Actions that can be performed on each object:		 *			$actions = array(		 *				* multi action support		 *				* parameters are serialized for each entries and given in $_REQUEST['ma']		 *				'multiactions' => array(		 *					'keycols' => Associative array of (URL variable => field name), // fields included in the form		 *					'url' => URL submission,		 *					'default' => Default selected action in the form.		 *									if null, an empty action is added & selected		 *				),		 *				* actions *		 *				action_id => array(		 *					'title' => Action heading,		 *					'url'   => Static part of URL.  Often we rely		 *							   relative urls, usually the page itself (not '' !), or just a query string,		 *					'vars'  => Associative array of (URL variable => field name),		 *					'multiaction' => Name of the action to execute.		 *										Add this action to the multi action form		 *				), ...		 *			);		 * @param $nodata    (optional) Message to display if data set is empty.		 * @param $pre_fn    (optional) Name of a function to call for each row,		 *					 it will be passed two params: $rowdata and $actions,		 *					 it may be used to derive new fields or modify actions.		 *					 It can return an array of actions specific to the row,		 *					 or if nothing is returned then the standard actions are used.		 *					 (see tblproperties.php and constraints.php for examples)		 *					 The function must not must not store urls because		 *					 they are relative and won't work out of context.		 */		function printTable(&$tabledata, &$columns, &$actions, $nodata = null, $pre_fn = null) {			global $data, $conf, $misc, $lang;			if ($has_ma = isset($actions['multiactions']))				$ma = $actions['multiactions'];			unset($actions['multiactions']);			if ($tabledata->recordCount() > 0) {				// Remove the 'comment' column if they have been disabled				if (!$conf['show_comments']) {					unset($columns['comment']);				}				if (isset($columns['comment'])) {					// Uncomment this for clipped comments.					// TODO: This should be a user option.					//$columns['comment']['params']['clip'] = true;				}				if ($has_ma) {					echo "<script src=\"multiactionform.js\" type=\"text/javascript\"></script>\n";					echo "<form id=\"multi_form\" action=\"{$ma['url']}\" method=\"post\" enctype=\"multipart/form-data\">\n";					if (isset($ma['vars']))						foreach ($ma['vars'] as $k => $v)							echo "<input type=\"hidden\" name=\"$k\" value=\"$v\" />";				}				echo "<table>\n";				echo "<tr>\n";				// Display column headings				if ($has_ma) echo "<th></th>";				foreach ($columns as $column_id => $column) {					switch ($column_id) {						case 'actions':							if (sizeof($actions) > 0) echo "<th class=\"data\" colspan=\"", count($actions), "\">{$column['title']}</th>\n";							break;						default:							echo "<th class=\"data\">";							if (isset($column['help']))								$this->printHelp($column['title'], $column['help']);							else								echo $column['title'];							echo "</th>\n";							break;					}				}				echo "</tr>\n";				// Display table rows				$i = 0;				while (!$tabledata->EOF) {					$id = ($i % 2) + 1;					unset($alt_actions);					if (!is_null($pre_fn)) $alt_actions = $pre_fn($tabledata, $actions);					if (!isset($alt_actions)) $alt_actions =& $actions;					echo "<tr class=\"data{$id}\">\n";					if ($has_ma) {						foreach ($ma['keycols'] as $k => $v)							$a[$k] = $tabledata->fields[$v];						echo "<td>";						echo "<input type=\"checkbox\" name=\"ma[]\" value=\"". htmlentities(serialize($a)) ."\" />";						echo "</td>\n";					}					foreach ($columns as $column_id => $column) {						// Apply default values for missing parameters						if (isset($column['url']) && !isset($column['vars'])) $column['vars'] = array();						switch ($column_id) {							case 'actions':								foreach ($alt_actions as $action) {									if (isset($action['disable']) && $action['disable'] === true) {										echo "<td></td>\n";									} else {										echo "<td class=\"opbutton{$id}\">";										echo "<a href=\"{$action['url']}";										if ($action['url'] === '') echo '?';										$misc->printUrlVars($action['vars'], $tabledata->fields);										if (isset($action['target']))											echo "\" target=\"{$action['target']}";										echo "\">{$action['title']}</a></td>\n";									}								}								break;							default:								echo "<td>";								$val = value($column['field'], $tabledata->fields);								if (!is_null($val)) {									if (isset($column['url'])) {										echo "<a href=\"{$column['url']}";										$misc->printUrlVars($column['vars'], $tabledata->fields);										echo "\">";									}									$type = isset($column['type']) ? $column['type'] : null;									$params = isset($column['params']) ? $column['params'] : array();									echo $misc->printVal($val, $type, $params);									if (isset($column['url'])) echo "</a>";								}								echo "</td>\n";								break;						}					}					echo "</tr>\n";					$tabledata->moveNext();					$i++;				}				echo "</table>\n";				// Multi action table footer w/ options & [un]check'em all				if ($has_ma) {					// if default is not set or doesn't exist, set it to null					if (!isset($ma['default']) || !isset($actions[$ma['default']]))						$ma['default'] = null;					echo "<br />\n";					echo "<table>\n";					echo "<tr>\n";					echo "<th class=\"data\" style=\"text-align: left\" colspan=\"3\">{$lang['stractionsonmultiplelines']}</th>\n";					echo "</tr>\n";					echo "<tr class=\"row1\">\n";					echo "<td>";					echo "<a href=\"#\" onclick=\"javascript:checkAll(true);\">{$lang['strselectall']}</a> / ";					echo "<a href=\"#\" onclick=\"javascript:checkAll(false);\">{$lang['strunselectall']}</a></td>\n";					echo "<td>&nbsp;--->&nbsp;</td>\n";					echo "<td>\n";					echo "\t<select name=\"action\">\n";					if ($ma['default'] == null)						echo "\t\t<option value=\"\">--</option>\n";					foreach($actions as $k => $a)						if (isset($a['multiaction']))							echo "\t\t<option value=\"{$a['multiaction']}\"", ($ma['default']  == $k? ' selected="selected"': ''), ">{$a['title']}</option>\n";					echo "\t</select>\n";					echo "<input type=\"submit\" value=\"{$lang['strexecute']}\" />\n";					echo $misc->form;					echo "</td>\n";					echo "</tr>\n";					echo "</table>\n";					echo '</form>';				};				return true;			} else {				if (!is_null($nodata)) {					echo "<p>{$nodata}</p>\n";				}				return false;			}		}		/** Produce XML data for the browser tree		 * @param $treedata A set of records to populate the tree.		 * @param $attrs Attributes for tree items		 *        'text' - the text for the tree node		 *        'icon' - an icon for node		 *        'openIcon' - an alternative icon when the node is expanded		 *        'toolTip' - tool tip text for the node		 *        'action' - URL to visit when single clicking the node		 *        'iconAction' - URL to visit when single clicking the icon node		 *        'branch' - URL for child nodes (tree XML)		 *        'expand' - the action to return XML for the subtree		 *        'nodata' - message to display when node has no children		 *        'nohead' - suppress headers and opening <tree> tag		 *        'nofoot' - suppress closing </tree> tag		 */		function printTreeXML(&$treedata, &$attrs) {			global $conf, $lang;			if (!isset($attrs['nohead']) || $attrs['nohead'] === false) {				header("Content-Type: text/xml");				header("Cache-Control: no-cache");				echo "<?xml version=\"1.0\" encoding=\"", htmlspecialchars($lang['appcharset']), "\"?>\n";				echo "<tree>\n";			}			if ($treedata->recordCount() > 0) {				while (!$treedata->EOF) {					$rec =& $treedata->fields;					echo "<tree";					echo value_xml_attr('text', $attrs['text'], $rec);					echo value_xml_attr('action', $attrs['action'], $rec);					echo value_xml_attr('src', $attrs['branch'], $rec);					$icon = $this->icon(value($attrs['icon'], $rec));					echo value_xml_attr('icon', $icon, $rec);					echo value_xml_attr('iconaction', $attrs['iconAction'], $rec);					if (!empty($attrs['openicon'])) {						$icon = $this->icon(value($attrs['openIcon'], $rec));					}					echo value_xml_attr('openicon', $icon, $rec);					echo value_xml_attr('tooltip', $attrs['toolTip'], $rec);					echo " />\n";					$treedata->moveNext();				}			} else {				$msg = isset($attrs['nodata']) ? $attrs['nodata'] : $lang['strnoobjects'];				echo "<tree text=\"{$msg}\" onaction=\"tree.getSelected().getParent().reload()\" icon=\"", $this->icon('ObjectNotFound'), "\" />\n";			}			if (!isset($attrs['nofoot']) || $attrs['nofoot'] === false) {				echo "</tree>\n";			}		}		function adjustTabsForTree(&$tabs) {			include_once('./classes/ArrayRecordSet.php');			foreach ($tabs as $i => $tab) {				if ((isset($tab['hide']) && $tab['hide'] === true) || (isset($tab['tree']) && $tab['tree'] === false)) {					unset($tabs[$i]);				}			}			return new ArrayRecordSet($tabs);		}		function icon($icon) {			global $conf;			$path = "images/themes/{$conf['theme']}/{$icon}";			if (file_exists($path.'.png')) return $path.'.png';			if (file_exists($path.'.gif')) return $path.'.gif';			$path = "images/themes/default/{$icon}";			if (file_exists($path.'.png')) return $path.'.png';			if (file_exists($path.'.gif')) return $path.'.gif';			return '';		}		/**		 * Function to escape command line parameters		 * @param $str The string to escape		 * @return The escaped string		 */		function escapeShellArg($str) {			global $data, $lang;			if (strtoupper(substr(PHP_OS, 0, 3)) === 'WIN') {				// Due to annoying PHP bugs, shell arguments cannot be escaped				// (command simply fails), so we cannot allow complex objects				// to be dumped.				if (preg_match('/^[_.[:alnum:]]+$/', $str))					return $str;				else {					echo $lang['strcannotdumponwindows'];					exit;				}			}			else				return escapeshellarg($str);		}		/**		 * Function to escape command line programs		 * @param $str The string to escape		 * @return The escaped string		 */		function escapeShellCmd($str) {			global $data;			if (strtoupper(substr(PHP_OS, 0, 3)) === 'WIN') {				$data->fieldClean($str);				return '"' . $str . '"';			}			else				return escapeshellcmd($str);		}		/**		 * Get list of servers' groups if existing in the conf		 * @return a recordset of servers' groups		 */		function getServersGroups() {			global $conf, $lang;			$grps = array();						foreach ($conf['srv_groups'] as $i => $group) {				$grps[$i] = array(					'id' => $i,					'desc' => $group['desc'],				);							}						$grps['all'] = array(				'id' => 'all', 				'desc' => $lang['strallservers'],			);			include_once('./classes/ArrayRecordSet.php');			return new ArrayRecordSet($grps);		}				/**		 * Get list of servers		 * @param $recordset return as RecordSet suitable for printTable if true,		 *                   otherwise just return an array.		 * @param $group a group name to filter the returned servers using $conf[srv_groups]		 */		function getServers($recordset = false, $group = false) {			global $conf;			$logins = isset($_SESSION['webdbLogin']) && is_array($_SESSION['webdbLogin']) ? $_SESSION['webdbLogin'] : array();			$srvs = array();			if (($group !== false) and ($group !== 'all'))				$group = array_fill_keys(explode(',', $conf['srv_groups'][$group]['servers']), 1);						foreach($conf['servers'] as $idx => $info) {				$server_id = $info['host'].':'.$info['port'].':'.$info['sslmode'];				if (($group === false) 					or (isset($group[$idx]))					or ($group === 'all')				) {					$server_id = $info['host'].':'.$info['port'].':'.$info['sslmode'];										if (isset($logins[$server_id])) $srvs[$server_id] = $logins[$server_id];					else $srvs[$server_id] = $info;					$srvs[$server_id]['id'] = $server_id;				}			}			function _cmp_desc($a, $b) {				return strcmp($a['desc'], $b['desc']);			}			uasort($srvs, '_cmp_desc');			if ($recordset) {				include_once('./classes/ArrayRecordSet.php');				return new ArrayRecordSet($srvs);			}			return $srvs;		}		/**		 * Validate and retrieve information on a server.		 * If the parameter isn't supplied then the currently		 * connected server is returned.		 * @param $server_id A server identifier (host:port)		 * @return An associative array of server properties		 */		function getServerInfo($server_id = null) {			global $conf, $_reload_browser, $lang;			if ($server_id === null && isset($_REQUEST['server']))				$server_id = $_REQUEST['server'];			// Check for the server in the logged-in list			if (isset($_SESSION['webdbLogin'][$server_id]))				return $_SESSION['webdbLogin'][$server_id];			// Otherwise, look for it in the conf file			foreach($conf['servers'] as $idx => $info) {				if ($server_id == $info['host'].':'.$info['port'].':'.$info['sslmode']) {					// Automatically use shared credentials if available					if (!isset($info['username']) && isset($_SESSION['sharedUsername'])) {						$info['username'] = $_SESSION['sharedUsername'];						$info['password'] = $_SESSION['sharedPassword'];						$_reload_browser = true;						$this->setServerInfo(null, $info, $server_id);					}					return $info;				}			}			if ($server_id === null){				return null;			} else {				// Unable to find a matching server, are we being hacked?				echo $lang['strinvalidserverparam'];				exit;			}		}		/**		 * Set server information.		 * @param $key parameter name to set, or null to replace all		 *             params with the assoc-array in $value.		 * @param $value the new value, or null to unset the parameter		 * @param $server_id the server identifier, or null for current		 *                   server.		 */		function setServerInfo($key, $value, $server_id = null)		{			if ($server_id === null && isset($_REQUEST['server']))				$server_id = $_REQUEST['server'];			if ($key === null) {				if ($value === null)					unset($_SESSION['webdbLogin'][$server_id]);				else					$_SESSION['webdbLogin'][$server_id] = $value;			} else {				if ($value === null)					unset($_SESSION['webdbLogin'][$server_id][$key]);				else					$_SESSION['webdbLogin'][$server_id][$key] = $value;			}		}				/**		 * Set the current schema		 * @param $schema The schema name		 * @return 0 on success		 * @return $data->seSchema() on error		 */		function setCurrentSchema($schema) {			global $data;						$status = $data->setSchema($schema);			if($status != 0)				return $status;			$_REQUEST['schema'] = $schema;			$this->setHREF();			return 0;		}		/**		 * Save the given SQL script in the history 		 * of the database and server.		 * @param $script the SQL script to save.		 */		function saveScriptHistory($script) {			list($usec, $sec) = explode(' ', microtime());			$time = ((float)$usec + (float)$sec);			$_SESSION['history'][$_REQUEST['server']][$_REQUEST['database']]["$time"] = array(				'query' => $script,				'paginate' => (!isset($_REQUEST['paginate'])? 'f':'t'),				'queryid' => $time,			);		}			/*		 * Output dropdown list to select server and 		 * databases form the popups windows.		 * @param $onchange Javascript action to take when selections change.		 */			function printConnection($onchange) {			global $data, $lang, $misc;			echo "<table style=\"width: 100%\"><tr><td>\n";			echo "<label>";			$misc->printHelp($lang['strserver'], 'pg.server');			echo "</label>";			echo ": <select name=\"server\" {$onchange}>\n";						$servers = $misc->getServers();			foreach($servers as $info) {				if (empty($info['username'])) continue; // not logged on this server				echo "<option value=\"", htmlspecialchars($info['id']), "\"",					((isset($_REQUEST['server']) && $info['id'] == $_REQUEST['server'])) ? ' selected="selected"' : '', ">",					htmlspecialchars("{$info['desc']} ({$info['id']})"), "</option>\n";			}			echo "</select>\n</td><td style=\"text-align: right\">\n";						// Get the list of all databases			$databases = $data->getDatabases();			if ($databases->recordCount() > 0) {				echo "<label>";				$misc->printHelp($lang['strdatabase'], 'pg.database');				echo ": <select name=\"database\" {$onchange}>\n";								//if no database was selected, user should select one				if (!isset($_REQUEST['database']))					echo "<option value=\"\">--</option>\n";								while (!$databases->EOF) {					$dbname = $databases->fields['datname'];					echo "<option value=\"", htmlspecialchars($dbname), "\"",						((isset($_REQUEST['database']) && $dbname == $_REQUEST['database'])) ? ' selected="selected"' : '', ">",						htmlspecialchars($dbname), "</option>\n";					$databases->moveNext();				}				echo "</select></label>\n";			}			else {				$server_info = $misc->getServerInfo();				echo "<input type=\"hidden\" name=\"database\" value=\"", 					htmlspecialchars($server_info['defaultdb']), "\" />\n";			}						echo "</td></tr></table>\n";		}		/**		 * returns an array representing FKs definition for a table, sorted by fields		 * or by constraint.		 * @param $table The table to retrieve FK contraints from		 * @returns the array of FK definition:		 *   array(		 *     'byconstr' => array(		 *       constrain id => array(		 *         confrelid => foreign relation oid		 *         f_schema => foreign schema name		 *         f_table => foreign table name		 *         pattnums => array of parent's fields nums		 *         pattnames => array of parent's fields names		 *         fattnames => array of foreign attributes names		 *       )		 *     ),		 *     'byfield' => array(		 *       attribute num => array (constraint id, ...)		 *     ),		 *     'code' => HTML/js code to include in the page for auto-completion		 *   )		 **/		function getAutocompleteFKProperties($table) {			global $data;			$fksprops = array(				'byconstr' => array(),				'byfield' => array(),				'code' => ''			);			$constrs = $data->getConstraintsWithFields($table);			if (!$constrs->EOF) {				$conrelid = $constrs->fields['conrelid'];				while(!$constrs->EOF) {					if ($constrs->fields['contype'] == 'f') {						if (!isset($fksprops['byconstr'][$constrs->fields['conid']])) {							$fksprops['byconstr'][$constrs->fields['conid']] = array (								'confrelid' => $constrs->fields['confrelid'],								'f_table' => $constrs->fields['f_table'],								'f_schema' => $constrs->fields['f_schema'],								'pattnums' => array(),								'pattnames' => array(),								'fattnames' => array()							);						}						$fksprops['byconstr'][$constrs->fields['conid']]['pattnums'][] = $constrs->fields['p_attnum'];						$fksprops['byconstr'][$constrs->fields['conid']]['pattnames'][] = $constrs->fields['p_field'];						$fksprops['byconstr'][$constrs->fields['conid']]['fattnames'][] = $constrs->fields['f_field'];						if (!isset($fksprops['byfield'][$constrs->fields['p_attnum']]))							$fksprops['byfield'][$constrs->fields['p_attnum']] = array();						$fksprops['byfield'][$constrs->fields['p_attnum']][] = $constrs->fields['conid'];					}					$constrs->moveNext();				}				$fksprops['code'] = "<script type=\"text/javascript\">\n";				$fksprops['code'] .= "var constrs = {};\n";				foreach ($fksprops['byconstr'] as $conid => $props) {					$fksprops['code'] .= "constrs.constr_{$conid} = {\n";					$fksprops['code'] .= 'pattnums: ['. implode(',',$props['pattnums']) ."],\n";					$fksprops['code'] .= "f_table:'". addslashes(htmlentities($props['f_table'], ENT_QUOTES)) ."',\n";					$fksprops['code'] .= "f_schema:'". addslashes(htmlentities($props['f_schema'], ENT_QUOTES)) ."',\n";					$_ = '';					foreach ($props['pattnames'] as $n) {						$_ .= ",'". htmlentities($n, ENT_QUOTES) ."'";					}					$fksprops['code'] .= 'pattnames: ['. substr($_, 1) ."],\n";					$_ = '';					foreach ($props['fattnames'] as $n) {						$_ .= ",'". htmlentities($n, ENT_QUOTES) ."'";					}					$fksprops['code'] .= 'fattnames: ['. substr($_, 1) ."]\n";					$fksprops['code'] .= "};\n";				}				$fksprops['code'] .= "var attrs = {};\n";				foreach ($fksprops['byfield'] as $attnum => $cstrs ) {					$fksprops['code'] .= "attrs.attr_{$attnum} = [". implode(',', $fksprops['byfield'][$attnum]) ."];\n";				}				$fksprops['code'] .= "var table='". addslashes(htmlentities($table, ENT_QUOTES)) ."';";				$fksprops['code'] .= "var server='". htmlentities($_REQUEST['server']) ."';";				$fksprops['code'] .= "var database='". addslashes(htmlentities($_REQUEST['database'], ENT_QUOTES)) ."';";				$fksprops['code'] .= "</script>\n";				$fksprops['code'] .= '<div id="fkbg"></div>';				$fksprops['code'] .= '<div id="fklist"></div>';				$fksprops['code'] .= '<script src="libraries/js/jquery.js" type="text/javascript"></script>';				$fksprops['code'] .= '<script src="js/ac_insert_row.js" type="text/javascript"></script>';			}			else /* we have no foreign keys on this table */				return false;			return $fksprops;		}	}?>
<?php	/**	 * Manage databases within a server	 *	 * $Id: all_db.php,v 1.59 2007/10/17 21:40:19 ioguix Exp $	 */	// Include application functions	include_once('./libraries/lib.inc.php');	$action = (isset($_REQUEST['action'])) ? $_REQUEST['action'] : '';	if (!isset($msg)) $msg = '';	/**	 * Display a form for alter and perform actual alter	 */	function doAlter($confirm) {		global $data, $misc, $_reload_browser;		global $lang;		if ($confirm) {			$misc->printTrail('database');			$misc->printTitle($lang['stralter'], 'pg.database.alter');			echo "<form action=\"all_db.php\" method=\"post\">\n";			echo "<table>\n";			echo "<tr><th class=\"data left required\">{$lang['strname']}</th>\n";			echo "<td class=\"data1\">";			echo "<input name=\"newname\" size=\"32\" maxlength=\"{$data->_maxNameLen}\" value=\"",				htmlspecialchars($_REQUEST['alterdatabase']), "\" /></td></tr>\n";			$server_info = $misc->getServerInfo();			if ($data->hasAlterDatabaseOwner() && $data->isSuperUser($server_info['username'])) {				// Fetch all users				$rs = $data->getDatabaseOwner($_REQUEST['alterdatabase']);				$owner = isset($rs->fields['usename']) ? $rs->fields['usename'] : '';				$users = $data->getUsers();				echo "<tr><th class=\"data left required\">{$lang['strowner']}</th>\n";				echo "<td class=\"data1\"><select name=\"owner\">";				while (!$users->EOF) {					$uname = $users->fields['usename'];					echo "<option value=\"", htmlspecialchars($uname), "\"",						($uname == $owner) ? ' selected="selected"' : '', ">", htmlspecialchars($uname), "</option>\n";					$users->moveNext();				}				echo "</select></td></tr>\n";			}			if ($data->hasSharedComments()){				$rs = $data->getDatabaseComment($_REQUEST['alterdatabase']);				$comment = isset($rs->fields['description']) ? $rs->fields['description'] : '';				echo "<tr><th class=\"data left\">{$lang['strcomment']}</th>\n";				echo "<td class=\"data1\">";				echo "<textarea rows=\"3\" cols=\"32\" name=\"dbcomment\">",					htmlspecialchars($comment), "</textarea></td></tr>\n";			}			echo "</table>\n";			echo "<input type=\"hidden\" name=\"action\" value=\"alter\" />\n";			echo $misc->form;			echo "<input type=\"hidden\" name=\"oldname\" value=\"",				htmlspecialchars($_REQUEST['alterdatabase']), "\" />\n";			echo "<input type=\"submit\" name=\"alter\" value=\"{$lang['stralter']}\" />\n";			echo "<input type=\"submit\" name=\"cancel\" value=\"{$lang['strcancel']}\" />\n";			echo "</form>\n";		}		else {			if (!isset($_POST['owner'])) $_POST['owner'] = '';			if (!isset($_POST['dbcomment'])) $_POST['dbcomment'] = '';			if ($data->alterDatabase($_POST['oldname'], $_POST['newname'], $_POST['owner'], $_POST['dbcomment']) == 0) {				$_reload_browser = true;				doDefault($lang['strdatabasealtered']);			}			else				doDefault($lang['strdatabasealteredbad']);		}	}	/**	 * Show confirmation of drop and perform actual drop	 */	function doDrop($confirm) {		global $data, $misc;		global $lang, $_reload_drop_database;		if (empty($_REQUEST['dropdatabase']) && empty($_REQUEST['ma'])) {			doDefault($lang['strspecifydatabasetodrop']);			exit();		}		if ($confirm) {            $misc->printTrail('database');            $misc->printTitle($lang['strdrop'], 'pg.database.drop');	        echo "<form action=\"all_db.php\" method=\"post\">\n";            //If multi drop            if (isset($_REQUEST['ma'])) {			    foreach($_REQUEST['ma'] as $v) {			        $a = unserialize(htmlspecialchars_decode($v, ENT_QUOTES));				    echo "<p>", sprintf($lang['strconfdropdatabase'], $misc->printVal($a['database'])), "</p>\n";				    printf('<input type="hidden" name="dropdatabase[]" value="%s" />', htmlspecialchars($a['database']));			    }			} else {		            echo "<p>", sprintf($lang['strconfdropdatabase'], $misc->printVal($_REQUEST['dropdatabase'])), "</p>\n";			        echo "<input type=\"hidden\" name=\"dropdatabase\" value=\"", htmlspecialchars($_REQUEST['dropdatabase']), "\" />\n";            }// END if multi drop			echo "<input type=\"hidden\" name=\"action\" value=\"drop\" />\n";        	echo $misc->form;			echo "<input type=\"submit\" name=\"drop\" value=\"{$lang['strdrop']}\" />\n";			echo "<input type=\"submit\" name=\"cancel\" value=\"{$lang['strcancel']}\" />\n";			echo "</form>\n";		} // END confirm		else {            //If multi drop            if (is_array($_REQUEST['dropdatabase'])) {                $msg = '';                foreach($_REQUEST['dropdatabase'] as $d) {					$status = $data->dropDatabase($d);					if ($status == 0)						$msg.= sprintf('%s: %s<br />', htmlentities($d), $lang['strdatabasedropped']);					else {						doDefault(sprintf('%s%s: %s<br />', $msg, htmlentities($d), $lang['strdatabasedroppedbad']));						return;					}				}// Everything went fine, back to Default page...                $_reload_drop_database = true;                doDefault($msg);            } else {			    $status = $data->dropDatabase($_POST['dropdatabase']);			    if ($status == 0) {				    $_reload_drop_database = true;				    doDefault($lang['strdatabasedropped']);			    }			    else				    doDefault($lang['strdatabasedroppedbad']);            }		}//END DROP    }// END FUNCTION	/**	 * Displays a screen where they can enter a new database	 */	function doCreate($msg = '') {		global $data, $misc;		global $lang;		$misc->printTrail('server');		$misc->printTitle($lang['strcreatedatabase'], 'pg.database.create');		$misc->printMsg($msg);		if (!isset($_POST['formName'])) $_POST['formName'] = '';		// Default encoding is that in language file		if (!isset($_POST['formEncoding'])) {			if (isset($lang['appdbencoding']))				$_POST['formEncoding'] = $lang['appdbencoding'];			else				$_POST['formEncoding'] = '';		}		if (!isset($_POST['formTemplate'])) $_POST['formTemplate'] = 'template1';		if (!isset($_POST['formSpc'])) $_POST['formSpc'] = '';		if (!isset($_POST['formComment'])) $_POST['formComment'] = '';		// Fetch a list of databases in the cluster		$templatedbs = $data->getDatabases(false);		// Fetch all tablespaces from the database		if ($data->hasTablespaces()) $tablespaces = $data->getTablespaces();		echo "<form action=\"all_db.php\" method=\"post\">\n";		echo "<table>\n";		echo "\t<tr>\n\t\t<th class=\"data left required\">{$lang['strname']}</th>\n";		echo "\t\t<td class=\"data1\"><input name=\"formName\" size=\"32\" maxlength=\"{$data->_maxNameLen}\" value=\"",			htmlspecialchars($_POST['formName']), "\" /></td>\n\t</tr>\n";		echo "\t<tr>\n\t\t<th class=\"data left required\">{$lang['strtemplatedb']}</th>\n";		echo "\t\t<td class=\"data1\">\n";		echo "\t\t\t<select name=\"formTemplate\">\n";		// Always offer template0 and template1 		echo "\t\t\t\t<option value=\"template0\"",			($_POST['formTemplate'] == 'template0') ? ' selected="selected"' : '', ">template0</option>\n";		echo "\t\t\t\t<option value=\"template1\"",			($_POST['formTemplate'] == 'template1') ? ' selected="selected"' : '', ">template1</option>\n";		while (!$templatedbs->EOF) {			$dbname = htmlspecialchars($templatedbs->fields['datname']);			if ($dbname != 'template1') { 				// filter out for $conf[show_system] users so we dont get duplicates 				echo "\t\t\t\t<option value=\"{$dbname}\"",					($dbname == $_POST['formTemplate']) ? ' selected="selected"' : '', ">{$dbname}</option>\n";			}			$templatedbs->moveNext();		}		echo "\t\t\t</select>\n";		echo "\t\t</td>\n\t</tr>\n";		// ENCODING		echo "\t<tr>\n\t\t<th class=\"data left required\">{$lang['strencoding']}</th>\n";		echo "\t\t<td class=\"data1\">\n";		echo "\t\t\t<select name=\"formEncoding\">\n";		echo "\t\t\t\t<option value=\"\"></option>\n";		while (list ($key) = each ($data->codemap)) {		    echo "\t\t\t\t<option value=\"", htmlspecialchars($key), "\"",				($key == $_POST['formEncoding']) ? ' selected="selected"' : '', ">",				$misc->printVal($key), "</option>\n";		}		echo "\t\t\t</select>\n";		echo "\t\t</td>\n\t</tr>\n";		if ($data->hasDatabaseCollation()) {			if (!isset($_POST['formCollate'])) $_POST['formCollate'] = '';			if (!isset($_POST['formCType'])) $_POST['formCType'] = '';			// LC_COLLATE			echo "\t<tr>\n\t\t<th class=\"data left\">{$lang['strcollation']}</th>\n";			echo "\t\t<td class=\"data1\">\n";			echo "\t\t\t<input name=\"formCollate\" value=\"", htmlspecialchars($_POST['formCollate']), "\" />\n";			echo "\t\t</td>\n\t</tr>\n";			// LC_CTYPE			echo "\t<tr>\n\t\t<th class=\"data left\">{$lang['strctype']}</th>\n";			echo "\t\t<td class=\"data1\">\n";			echo "\t\t\t<input name=\"formCType\" value=\"", htmlspecialchars($_POST['formCType']), "\" />\n";			echo "\t\t</td>\n\t</tr>\n";		}		// Tablespace (if there are any)		if ($data->hasTablespaces() && $tablespaces->recordCount() > 0) {			echo "\t<tr>\n\t\t<th class=\"data left\">{$lang['strtablespace']}</th>\n";			echo "\t\t<td class=\"data1\">\n\t\t\t<select name=\"formSpc\">\n";			// Always offer the default (empty) option			echo "\t\t\t\t<option value=\"\"",				($_POST['formSpc'] == '') ? ' selected="selected"' : '', "></option>\n";			// Display all other tablespaces			while (!$tablespaces->EOF) {				$spcname = htmlspecialchars($tablespaces->fields['spcname']);				echo "\t\t\t\t<option value=\"{$spcname}\"",					($spcname == $_POST['formSpc']) ? ' selected="selected"' : '', ">{$spcname}</option>\n";				$tablespaces->moveNext();			}			echo "\t\t\t</select>\n\t\t</td>\n\t</tr>\n";		}		// Comments (if available)		if ($data->hasSharedComments()) {			echo "\t<tr>\n\t\t<th class=\"data left\">{$lang['strcomment']}</th>\n";			echo "\t\t<td><textarea name=\"formComment\" rows=\"3\" cols=\"32\">",				htmlspecialchars($_POST['formComment']), "</textarea></td>\n\t</tr>\n";		}		echo "</table>\n";		echo "<p><input type=\"hidden\" name=\"action\" value=\"save_create\" />\n";		echo $misc->form;		echo "<input type=\"submit\" value=\"{$lang['strcreate']}\" />\n";		echo "<input type=\"submit\" name=\"cancel\" value=\"{$lang['strcancel']}\" /></p>\n";		echo "</form>\n";	}	/**	 * Actually creates the new view in the database	 */	function doSaveCreate() {		global $data, $lang, $_reload_browser;		// Default tablespace to null if it isn't set		if (!isset($_POST['formSpc'])) $_POST['formSpc'] = null;		// Default comment to blank if it isn't set		if (!isset($_POST['formComment'])) $_POST['formComment'] = null;		// Default collate to blank if it isn't set		if (!isset($_POST['formCollate'])) $_POST['formCollate'] = null;		// Default ctype to blank if it isn't set		if (!isset($_POST['formCType'])) $_POST['formCType'] = null;		// Check that they've given a name and a definition		if ($_POST['formName'] == '') doCreate($lang['strdatabaseneedsname']);		else {			$status = $data->createDatabase($_POST['formName'], $_POST['formEncoding'], $_POST['formSpc'],				$_POST['formComment'], $_POST['formTemplate'], $_POST['formCollate'], $_POST['formCType']);			if ($status == 0) {				$_reload_browser = true;				doDefault($lang['strdatabasecreated']);			}			else				doCreate($lang['strdatabasecreatedbad']);		}	}	/**	 * Displays options for cluster download	 */	function doExport($msg = '') {		global $data, $misc;		global $lang;		$misc->printTrail('server');		$misc->printTabs('server','export');		$misc->printMsg($msg);		echo "<form action=\"dbexport.php\" method=\"post\">\n";		echo "<table>\n";		echo "<tr><th class=\"data\">{$lang['strformat']}</th><th class=\"data\">{$lang['stroptions']}</th></tr>\n";		// Data only		echo "<tr><th class=\"data left\" rowspan=\"2\">";		echo "<input type=\"radio\" id=\"what1\" name=\"what\" value=\"dataonly\" checked=\"checked\" /><label for=\"what1\">{$lang['strdataonly']}</label></th>\n";		echo "<td>{$lang['strformat']}\n";		echo "<select name=\"d_format\">\n";		echo "<option value=\"copy\">COPY</option>\n";		echo "<option value=\"sql\">SQL</option>\n";		echo "</select>\n</td>\n</tr>\n";		echo "<tr><td><input type=\"checkbox\" id=\"d_oids\" name=\"d_oids\" /><label for=\"d_oids\">{$lang['stroids']}</label></td>\n</tr>\n";		// Structure only		echo "<tr><th class=\"data left\"><input type=\"radio\" id=\"what2\" name=\"what\" value=\"structureonly\" /><label for=\"what2\">{$lang['strstructureonly']}</label></th>\n";		echo "<td><input type=\"checkbox\" id=\"s_clean\" name=\"s_clean\" /><label for=\"s_clean\">{$lang['strdrop']}</label></td>\n</tr>\n";		// Structure and data		echo "<tr><th class=\"data left\" rowspan=\"3\">";		echo "<input type=\"radio\" id=\"what3\" name=\"what\" value=\"structureanddata\" /><label for=\"what3\">{$lang['strstructureanddata']}</label></th>\n";		echo "<td>{$lang['strformat']}\n";		echo "<select name=\"sd_format\">\n";		echo "<option value=\"copy\">COPY</option>\n";		echo "<option value=\"sql\">SQL</option>\n";		echo "</select>\n</td>\n</tr>\n";		echo "<tr><td><input type=\"checkbox\" id=\"sd_clean\" name=\"sd_clean\" /><label for=\"sd_clean\">{$lang['strdrop']}</label></td>\n</tr>\n";		echo "<tr><td><input type=\"checkbox\" id=\"sd_oids\" name=\"sd_oids\" /><label for=\"sd_oids\">{$lang['stroids']}</label></td>\n</tr>\n";		echo "</table>\n";		echo "<h3>{$lang['stroptions']}</h3>\n";		echo "<p><input type=\"radio\" id=\"output1\" name=\"output\" value=\"show\" checked=\"checked\" /><label for=\"output1\">{$lang['strshow']}</label>\n";		echo "<br/><input type=\"radio\" id=\"output2\" name=\"output\" value=\"download\" /><label for=\"output2\">{$lang['strdownload']}</label></p>\n";		echo "<p><input type=\"hidden\" name=\"action\" value=\"export\" />\n";		echo "<input type=\"hidden\" name=\"subject\" value=\"server\" />\n";		echo $misc->form;		echo "<input type=\"submit\" value=\"{$lang['strexport']}\" /></p>\n";		echo "</form>\n";	}	/**	 * Show default list of databases in the server	 */	function doDefault($msg = '') {		global $data, $conf, $misc;		global $lang;		$misc->printTrail('server');		$misc->printTabs('server','databases');		$misc->printMsg($msg);		$databases = $data->getDatabases();		$columns = array(			'database' => array(				'title' => $lang['strdatabase'],				'field' => field('datname'),				'url'   => "redirect.php?subject=database&amp;{$misc->href}&amp;",				'vars'  => array('database' => 'datname'),			),			'owner' => array(				'title' => $lang['strowner'],				'field' => field('datowner'),			),			'encoding' => array(				'title' => $lang['strencoding'],				'field' => field('datencoding'),			),			'lc_collate' => array(				'title' => $lang['strcollation'],				'field' => field('datcollate'),			),			'lc_ctype' => array(				'title' => $lang['strctype'],				'field' => field('datctype'),			),			'tablespace' => array(				'title' => $lang['strtablespace'],				'field' => field('tablespace'),			),			'dbsize' => array(				'title' => $lang['strsize'],				'field' => field('dbsize'),				'type' => 'prettysize',			),			'actions' => array(				'title' => $lang['stractions'],			),			'comment' => array(				'title' => $lang['strcomment'],				'field' => field('datcomment'),			),		);		$actions = array(			'multiactions' => array(				'keycols' => array('database' => 'datname'),				'url' => 'all_db.php',				'default' => null,			),			'drop' => array(				'title' => $lang['strdrop'],				'url'   => "all_db.php?action=confirm_drop&amp;subject=database&amp;{$misc->href}&amp;",				'vars'  => array('dropdatabase' => 'datname'),				'multiaction' => 'confirm_drop',			),			'privileges' => array(				'title' => $lang['strprivileges'],				'url'   => "privileges.php?subject=database&amp;{$misc->href}&amp;",				'vars'  => array('database' => 'datname'),			)		);		if ($data->hasAlterDatabase() ) {			$actions['alter'] = array(				'title' => $lang['stralter'],				'url'   => "all_db.php?action=confirm_alter&amp;subject=database&amp;{$misc->href}&amp;",				'vars'  => array('alterdatabase' => 'datname')			);		}		if (!$data->hasTablespaces()) unset($columns['tablespace']);		if (!$data->hasServerAdminFuncs()) unset($columns['dbsize']);		if (!$data->hasDatabaseCollation()) unset($columns['lc_collate'], $columns['lc_ctype']);		if (!isset($data->privlist['database'])) unset($actions['privileges']);		$misc->printTable($databases, $columns, $actions, $lang['strnodatabases']);		echo "<p><a class=\"navlink\" href=\"all_db.php?action=create&amp;{$misc->href}\">{$lang['strcreatedatabase']}</a></p>\n";	}	function doTree() {		global $misc, $data, $lang;		$databases = $data->getDatabases();		$reqvars = $misc->getRequestVars('database');		$attrs = array(			'text'   => field('datname'),			'icon'   => 'Database',			'toolTip'=> field('datcomment'),			'action' => url('redirect.php',							$reqvars,							array('database' => field('datname'))						),			'branch' => url('database.php',							$reqvars,							array(								'action' => 'tree',								'database' => field('datname')							)						),		);		$misc->printTreeXML($databases, $attrs);		exit;	}	if ($action == 'tree') doTree();	$misc->printHeader($lang['strdatabases']);	$misc->printBody();	switch ($action) {		case 'export':			doExport();			break;		case 'save_create':			if (isset($_POST['cancel'])) doDefault();			else doSaveCreate();			break;		case 'create':			doCreate();			break;		case 'drop':			if (isset($_REQUEST['drop'])) doDrop(false);			else doDefault();			break;		case 'confirm_drop':			doDrop(true);			break;		case 'alter':			if (isset($_POST['oldname']) && isset($_POST['newname']) && !isset($_POST['cancel']) ) doAlter(false);			else doDefault();			break;		case 'confirm_alter':			doAlter(true);			break;		default:			doDefault();			break;	}	$misc->printFooter();?>
<?php/** * PostgreSQL 8.1 support * * $Id: Postgres81.php,v 1.21 2008/01/19 13:46:15 ioguix Exp $ */include_once('./classes/database/Postgres82.php');class Postgres81 extends Postgres82 {	var $major_version = 8.1;	// List of all legal privileges that can be applied to different types	// of objects.	var $privlist = array(		'table' => array('SELECT', 'INSERT', 'UPDATE', 'DELETE', 'RULE', 'REFERENCES', 'TRIGGER', 'ALL PRIVILEGES'),		'view' => array('SELECT', 'INSERT', 'UPDATE', 'DELETE', 'RULE', 'REFERENCES', 'TRIGGER', 'ALL PRIVILEGES'),		'sequence' => array('SELECT', 'UPDATE', 'ALL PRIVILEGES'),		'database' => array('CREATE', 'TEMPORARY', 'ALL PRIVILEGES'),		'function' => array('EXECUTE', 'ALL PRIVILEGES'),		'language' => array('USAGE', 'ALL PRIVILEGES'),		'schema' => array('CREATE', 'USAGE', 'ALL PRIVILEGES'),		'tablespace' => array('CREATE', 'ALL PRIVILEGES')	);	// List of characters in acl lists and the privileges they	// refer to.	var $privmap = array(		'r' => 'SELECT',		'w' => 'UPDATE',		'a' => 'INSERT',		'd' => 'DELETE',		'R' => 'RULE',		'x' => 'REFERENCES',		't' => 'TRIGGER',		'X' => 'EXECUTE',		'U' => 'USAGE',		'C' => 'CREATE',		'T' => 'TEMPORARY'	);	// Array of allowed index types	var $typIndexes = array('BTREE', 'RTREE', 'GIST', 'HASH');	/**	 * Constructor	 * @param $conn The database connection	 */	function Postgres81($conn) {		$this->Postgres82($conn);	}	// Help functions		function getHelpPages() {		include_once('./help/PostgresDoc81.php');		return $this->help_page;	}	// Database functions	/**	 * Returns all databases available on the server	 * @return A list of databases, sorted alphabetically	 */	function getDatabases($currentdatabase = NULL) {		global $conf, $misc;				$server_info = $misc->getServerInfo();				if (isset($conf['owned_only']) && $conf['owned_only'] && !$this->isSuperUser($server_info['username'])) {			$username = $server_info['username'];			$this->clean($username);			$clause = " AND pr.rolname='{$username}'";		}		else $clause = '';		if ($currentdatabase != NULL) {			$this->clean($currentdatabase);			$orderby = "ORDER BY pdb.datname = '{$currentdatabase}' DESC, pdb.datname";		}		else			$orderby = "ORDER BY pdb.datname";		if (!$conf['show_system'])			$where = ' AND NOT pdb.datistemplate';		else			$where = ' AND pdb.datallowconn';		$sql = "SELECT pdb.datname AS datname, pr.rolname AS datowner, pg_encoding_to_char(encoding) AS datencoding,                               (SELECT description FROM pg_catalog.pg_description pd WHERE pdb.oid=pd.objoid) AS datcomment,                               (SELECT spcname FROM pg_catalog.pg_tablespace pt WHERE pt.oid=pdb.dattablespace) AS tablespace,							   pg_catalog.pg_database_size(pdb.oid) as dbsize                         FROM pg_catalog.pg_database pdb LEFT JOIN pg_catalog.pg_roles pr ON (pdb.datdba = pr.oid)  						WHERE true 			{$where}			{$clause}			{$orderby}";		return $this->selectSet($sql);	}	/**	 * Alters a database	 * the multiple return vals are for postgres 8+ which support more functionality in alter database	 * @param $dbName The name of the database	 * @param $newName new name for the database	 * @param $newOwner The new owner for the database	 * @return 0 success	 * @return -1 transaction error	 * @return -2 owner error	 * @return -3 rename error	 */	function alterDatabase($dbName, $newName, $newOwner = '', $comment = '') {		$this->clean($dbName);		$this->clean($newName);		$this->clean($newOwner);		//ignore $comment, not supported pre 8.2					$status = $this->beginTransaction();		if ($status != 0) {			$this->rollbackTransaction();			return -1;		}		if ($dbName != $newName) {			$status = $this->alterDatabaseRename($dbName, $newName);			if ($status != 0) {				$this->rollbackTransaction();				return -3;			}		}		$status = $this->alterDatabaseOwner($newName, $newOwner);		if ($status != 0) {			$this->rollbackTransaction();			return -2;		}		return $this->endTransaction();	}	// Tablespace functions		/**	 * Retrieves a tablespace's information	 * @return A recordset	 */	function getTablespace($spcname) {		$this->clean($spcname);		$sql = "SELECT spcname, pg_catalog.pg_get_userbyid(spcowner) AS spcowner, spclocation					FROM pg_catalog.pg_tablespace WHERE spcname='{$spcname}'";		return $this->selectSet($sql);	}		/**	 * Retrieves information for all tablespaces	 * @param $all Include all tablespaces (necessary when moving objects back to the default space)	 * @return A recordset	 */	function getTablespaces($all = false) {		global $conf;				$sql = "SELECT spcname, pg_catalog.pg_get_userbyid(spcowner) AS spcowner, spclocation					FROM pg_catalog.pg_tablespace";		if (!$conf['show_system'] && !$all) {			$sql .= " WHERE spcname NOT LIKE 'pg\\\\_%'";	}			$sql .= " ORDER BY spcname";		return $this->selectSet($sql);	}	// Capabilities	function hasCreateTableLikeWithConstraints() {return false;}	function hasSharedComments() {return false;}	function hasConcurrentIndexBuild() {return false;}}?>
<?php	/**	 * Manage tablespaces in a database cluster	 *	 * $Id: tablespaces.php,v 1.16 2007/08/31 18:30:11 ioguix Exp $	 */	// Include application functions	include_once('./libraries/lib.inc.php');	$action = (isset($_REQUEST['action'])) ? $_REQUEST['action'] : '';	if (!isset($msg)) $msg = '';	/**	 * Function to allow altering of a tablespace	 */	function doAlter($msg = '') {		global $data, $misc;		global $lang;				$misc->printTrail('tablespace');		$misc->printTitle($lang['stralter'],'pg.tablespace.alter');		$misc->printMsg($msg);		// Fetch tablespace info				$tablespace = $data->getTablespace($_REQUEST['tablespace']);		// Fetch all users				$users = $data->getUsers();				if ($tablespace->recordCount() > 0) {						if (!isset($_POST['name'])) $_POST['name'] = $tablespace->fields['spcname'];			if (!isset($_POST['owner'])) $_POST['owner'] = $tablespace->fields['spcowner'];			if (!isset($_POST['comment'])) {				$_POST['comment'] = ($data->hasSharedComments()) ? $tablespace->fields['spccomment'] : '';			}						echo "<form action=\"tablespaces.php\" method=\"post\">\n";			echo $misc->form;			echo "<table>\n";			echo "<tr><th class=\"data left required\">{$lang['strname']}</th>\n";			echo "<td class=\"data1\">";			echo "<input name=\"name\" size=\"32\" maxlength=\"{$data->_maxNameLen}\" value=\"", 				htmlspecialchars($_POST['name']), "\" /></td></tr>\n";			echo "<tr><th class=\"data left required\">{$lang['strowner']}</th>\n";			echo "<td class=\"data1\"><select name=\"owner\">";			while (!$users->EOF) {				$uname = $users->fields['usename'];				echo "<option value=\"", htmlspecialchars($uname), "\"",					($uname == $_POST['owner']) ? ' selected="selected"' : '', ">", htmlspecialchars($uname), "</option>\n";				$users->moveNext();			}			echo "</select></td></tr>\n"; 			if ($data->hasSharedComments()){				echo "<tr><th class=\"data left\">{$lang['strcomment']}</th>\n";				echo "<td class=\"data1\">";				echo "<textarea rows=\"3\" cols=\"32\" name=\"comment\">",					htmlspecialchars($_POST['comment']), "</textarea></td></tr>\n";			}			echo "</table>\n";			echo "<p><input type=\"hidden\" name=\"action\" value=\"save_edit\" />\n";			echo "<input type=\"hidden\" name=\"tablespace\" value=\"", htmlspecialchars($_REQUEST['tablespace']), "\" />\n";			echo "<input type=\"submit\" name=\"alter\" value=\"{$lang['stralter']}\" />\n";			echo "<input type=\"submit\" name=\"cancel\" value=\"{$lang['strcancel']}\" /></p>\n";			echo "</form>\n";		}		else echo "<p>{$lang['strnodata']}</p>\n";	}	/** 	 * Function to save after altering a tablespace	 */	function doSaveAlter() {		global $data, $lang;		// Check data		if (trim($_POST['name']) == '')			doAlter($lang['strtablespaceneedsname']);		else {			$status = $data->alterTablespace($_POST['tablespace'], $_POST['name'], $_POST['owner'], $_POST['comment']);			if ($status == 0) {				// If tablespace has been renamed, need to change to the new name				if ($_POST['tablespace'] != $_POST['name']) {					// Jump them to the new table name					$_REQUEST['tablespace'] = $_POST['name'];				}				doDefault($lang['strtablespacealtered']);			}			else				doAlter($lang['strtablespacealteredbad']);		}	}	/**	 * Show confirmation of drop and perform actual drop	 */	function doDrop($confirm) {		global $data, $misc;		global $lang;		if ($confirm) {			$misc->printTrail('tablespace');			$misc->printTitle($lang['strdrop'],'pg.tablespace.drop');						echo "<p>", sprintf($lang['strconfdroptablespace'], $misc->printVal($_REQUEST['tablespace'])), "</p>\n";							echo "<form action=\"tablespaces.php\" method=\"post\">\n";			echo $misc->form;			echo "<input type=\"hidden\" name=\"action\" value=\"drop\" />\n";			echo "<input type=\"hidden\" name=\"tablespace\" value=\"", htmlspecialchars($_REQUEST['tablespace']), "\" />\n";			echo "<input type=\"submit\" name=\"drop\" value=\"{$lang['strdrop']}\" />\n";			echo "<input type=\"submit\" name=\"cancel\" value=\"{$lang['strcancel']}\" />\n";			echo "</form>\n";		}		else {			$status = $data->droptablespace($_REQUEST['tablespace']);			if ($status == 0)				doDefault($lang['strtablespacedropped']);			else				doDefault($lang['strtablespacedroppedbad']);		}			}		/**	 * Displays a screen where they can enter a new tablespace	 */	function doCreate($msg = '') {		global $data, $misc, $spcname;		global $lang;				$server_info = $misc->getServerInfo();				if (!isset($_POST['formSpcname'])) $_POST['formSpcname'] = '';		if (!isset($_POST['formOwner'])) $_POST['formOwner'] = $server_info['username'];		if (!isset($_POST['formLoc'])) $_POST['formLoc'] = '';		if (!isset($_POST['formComment'])) $_POST['formComment'] = '';		// Fetch all users		$users = $data->getUsers();				$misc->printTrail('server');		$misc->printTitle($lang['strcreatetablespace'],'pg.tablespace.create');		$misc->printMsg($msg);		echo "<form action=\"tablespaces.php\" method=\"post\">\n";		echo $misc->form;		echo "<table>\n";		echo "\t<tr>\n\t\t<th class=\"data left required\">{$lang['strname']}</th>\n";		echo "\t\t<td class=\"data1\"><input size=\"32\" name=\"formSpcname\" maxlength=\"{$data->_maxNameLen}\" value=\"", htmlspecialchars($_POST['formSpcname']), "\" /></td>\n\t</tr>\n";		echo "\t<tr>\n\t\t<th class=\"data left required\">{$lang['strowner']}</th>\n";		echo "\t\t<td class=\"data1\"><select name=\"formOwner\">\n";		while (!$users->EOF) {			$uname = $users->fields['usename'];			echo "\t\t\t<option value=\"", htmlspecialchars($uname), "\"",				($uname == $_POST['formOwner']) ? ' selected="selected"' : '', ">", htmlspecialchars($uname), "</option>\n";			$users->moveNext();		}		echo "\t\t</select></td>\n\t</tr>\n";						echo "\t<tr>\n\t\t<th class=\"data left required\">{$lang['strlocation']}</th>\n";		echo "\t\t<td class=\"data1\"><input size=\"32\" name=\"formLoc\" value=\"", htmlspecialchars($_POST['formLoc']), "\" /></td>\n\t</tr>\n";		// Comments (if available)		if ($data->hasSharedComments()) {			echo "\t<tr>\n\t\t<th class=\"data left\">{$lang['strcomment']}</th>\n";			echo "\t\t<td><textarea name=\"formComment\" rows=\"3\" cols=\"32\">", 				htmlspecialchars($_POST['formComment']), "</textarea></td>\n\t</tr>\n";		}		echo "</table>\n";		echo "<p><input type=\"hidden\" name=\"action\" value=\"save_create\" />\n";		echo "<input type=\"submit\" value=\"{$lang['strcreate']}\" />\n";		echo "<input type=\"submit\" name=\"cancel\" value=\"{$lang['strcancel']}\" /></p>\n";		echo "</form>\n";	}		/**	 * Actually creates the new tablespace in the cluster	 */	function doSaveCreate() {		global $data;		global $lang;		// Check data		if (trim($_POST['formSpcname']) == '')			doCreate($lang['strtablespaceneedsname']);		elseif (trim($_POST['formLoc']) == '')			doCreate($lang['strtablespaceneedsloc']);		else {			// Default comment to blank if it isn't set			if (!isset($_POST['formComment'])) $_POST['formComment'] = null;					$status = $data->createTablespace($_POST['formSpcname'], $_POST['formOwner'], $_POST['formLoc'], $_POST['formComment']);			if ($status == 0)				doDefault($lang['strtablespacecreated']);			else				doCreate($lang['strtablespacecreatedbad']);		}	}		/**	 * Show default list of tablespaces in the cluster	 */	function doDefault($msg = '') {		global $data, $misc;		global $lang;				$misc->printTrail('server');		$misc->printTabs('server','tablespaces');		$misc->printMsg($msg);				$tablespaces = $data->getTablespaces();		$columns = array(			'database' => array(				'title' => $lang['strname'],				'field' => field('spcname')			),			'owner' => array(				'title' => $lang['strowner'],				'field' => field('spcowner')			),			'location' => array(				'title' => $lang['strlocation'],				'field' => field('spclocation')			),			'actions' => array(				'title' => $lang['stractions']			)		);		if ($data->hasSharedComments()) {			$columns['comment'] = array(				'title' => $lang['strcomment'],				'field' => field('spccomment'),			);		}				$actions = array(			'alter' => array(				'title' => $lang['stralter'],				'url'   => "tablespaces.php?action=edit&amp;{$misc->href}&amp;",				'vars'  => array('tablespace' => 'spcname')			),			'drop' => array(				'title' => $lang['strdrop'],				'url'   => "tablespaces.php?action=confirm_drop&amp;{$misc->href}&amp;",				'vars'  => array('tablespace' => 'spcname')			),			'privileges' => array(				'title' => $lang['strprivileges'],				'url'   => "privileges.php?subject=tablespace&amp;{$misc->href}&amp;",				'vars'  => array('tablespace' => 'spcname')			)		);						$misc->printTable($tablespaces, $columns, $actions, $lang['strnotablespaces']);				echo "<p><a class=\"navlink\" href=\"tablespaces.php?action=create&amp;{$misc->href}\">{$lang['strcreatetablespace']}</a></p>\n";	}	$misc->printHeader($lang['strtablespaces']);	$misc->printBody();	switch ($action) {		case 'save_create':			if (isset($_REQUEST['cancel'])) doDefault();			else doSaveCreate();			break;		case 'create':						doCreate();			break;		case 'drop':			if (isset($_REQUEST['cancel'])) doDefault();			else doDrop(false);			break;		case 'confirm_drop':			doDrop(true);			break;		case 'save_edit':			if (isset($_REQUEST['cancel'])) doDefault();			else doSaveAlter();			break;		case 'edit':			doAlter();			break;		default:			doDefault();			break;	}		$misc->printFooter();?>
<?php	/**	 * Manage schemas in a database	 *	 * $Id: schemas.php,v 1.22 2007/12/15 22:57:43 ioguix Exp $	 */	// Include application functions	include_once('./libraries/lib.inc.php');	$action = (isset($_REQUEST['action'])) ? $_REQUEST['action'] : '';	if (!isset($msg)) $msg = '';	/**	 * Show default list of schemas in the database	 */	function doDefault($msg = '') {		global $data, $misc, $conf;		global $lang;		$misc->printTrail('database');		$misc->printTabs('database','schemas');		$misc->printMsg($msg);		// Check that the DB actually supports schemas		$schemas = $data->getSchemas();		$columns = array(			'schema' => array(				'title' => $lang['strschema'],				'field' => field('nspname'),				'url'   => "redirect.php?subject=schema&amp;{$misc->href}&amp;",				'vars'  => array('schema' => 'nspname'),			),			'owner' => array(				'title' => $lang['strowner'],				'field' => field('nspowner'),			),			'actions' => array(				'title' => $lang['stractions'],			),			'comment' => array(				'title' => $lang['strcomment'],				'field' => field('nspcomment'),			),		);		$actions = array(			'multiactions' => array(				'keycols' => array('nsp' => 'nspname'),				'url' => 'schemas.php',			),			'drop' => array(				'title' => $lang['strdrop'],				'url'   => "schemas.php?action=drop&amp;{$misc->href}&amp;",				'vars'  => array('nsp' => 'nspname'),				'multiaction' => 'drop',			),			'privileges' => array(				'title' => $lang['strprivileges'],				'url'   => "privileges.php?subject=schema&amp;{$misc->href}&amp;",				'vars'  => array('schema' => 'nspname'),			),			'alter' => array(				'title' => $lang['stralter'],				'url'   => "schemas.php?action=alter&amp;{$misc->href}&amp;",				'vars'  => array('schema' => 'nspname'),			),		);		if (!$data->hasAlterSchema()) unset($actions['alter']);		$misc->printTable($schemas, $columns, $actions, $lang['strnoschemas']);		echo "<p><a class=\"navlink\" href=\"schemas.php?action=create&amp;{$misc->href}\">{$lang['strcreateschema']}</a></p>\n";	}	/**	 * Displays a screen where they can enter a new schema	 */	function doCreate($msg = '') {		global $data, $misc;		global $lang;		$server_info = $misc->getServerInfo();		if (!isset($_POST['formName'])) $_POST['formName'] = '';		if (!isset($_POST['formAuth'])) $_POST['formAuth'] = $server_info['username'];		if (!isset($_POST['formSpc'])) $_POST['formSpc'] = '';		if (!isset($_POST['formComment'])) $_POST['formComment'] = '';		// Fetch all users from the database		$users = $data->getUsers();		$misc->printTrail('database');		$misc->printTitle($lang['strcreateschema'],'pg.schema.create');		$misc->printMsg($msg);		echo "<form action=\"schemas.php\" method=\"post\">\n";		echo "<table style=\"width: 100%\">\n";		echo "\t<tr>\n\t\t<th class=\"data left required\">{$lang['strname']}</th>\n";		echo "\t\t<td class=\"data1\"><input name=\"formName\" size=\"32\" maxlength=\"{$data->_maxNameLen}\" value=\"",			htmlspecialchars($_POST['formName']), "\" /></td>\n\t</tr>\n";		// Owner		echo "\t<tr>\n\t\t<th class=\"data left required\">{$lang['strowner']}</th>\n";		echo "\t\t<td class=\"data1\">\n\t\t\t<select name=\"formAuth\">\n";		while (!$users->EOF) {			$uname = htmlspecialchars($users->fields['usename']);			echo "\t\t\t\t<option value=\"{$uname}\"",				($uname == $_POST['formAuth']) ? ' selected="selected"' : '', ">{$uname}</option>\n";			$users->moveNext();		}		echo "\t\t\t</select>\n\t\t</td>\n\t</tr>\n";		echo "\t<tr>\n\t\t<th class=\"data left\">{$lang['strcomment']}</th>\n";		echo "\t\t<td class=\"data1\"><textarea name=\"formComment\" rows=\"3\" cols=\"32\">",			htmlspecialchars($_POST['formComment']), "</textarea></td>\n\t</tr>\n";		echo "</table>\n";		echo "<p>\n";		echo "<input type=\"hidden\" name=\"action\" value=\"create\" />\n";		echo "<input type=\"hidden\" name=\"database\" value=\"", htmlspecialchars($_REQUEST['database']), "\" />\n";		echo $misc->form;		echo "<input type=\"submit\" name=\"create\" value=\"{$lang['strcreate']}\" />\n";		echo "<input type=\"submit\" name=\"cancel\" value=\"{$lang['strcancel']}\" />\n";		echo "</p>\n";		echo "</form>\n";	}	/**	 * Actually creates the new schema in the database	 */	function doSaveCreate() {		global $data, $lang, $_reload_browser;		// Check that they've given a name		if ($_POST['formName'] == '') doCreate($lang['strschemaneedsname']);		else {			$status = $data->createSchema($_POST['formName'], $_POST['formAuth'], $_POST['formComment']);			if ($status == 0) {				$_reload_browser = true;				doDefault($lang['strschemacreated']);			}			else				doCreate($lang['strschemacreatedbad']);		}	}	/**	 * Display a form to permit editing schema properies.	 * TODO: permit changing owner	 */	function doAlter($msg = '') {		global $data, $misc, $lang;		$misc->printTrail('schema');		$misc->printTitle($lang['stralter'],'pg.schema.alter');		$misc->printMsg($msg);		$schema = $data->getSchemaByName($_REQUEST['schema']);		if ($schema->recordCount() > 0) {			if (!isset($_POST['comment'])) $_POST['comment'] = $schema->fields['nspcomment'];			if (!isset($_POST['schema'])) $_POST['schema'] = $_REQUEST['schema'];			if (!isset($_POST['name'])) $_POST['name'] = $_REQUEST['schema'];			if (!isset($_POST['owner'])) $_POST['owner'] = $schema->fields['ownername'];			echo "<form action=\"schemas.php\" method=\"post\">\n";			echo "<table>\n";			echo "\t<tr>\n";			echo "\t\t<th class=\"data left required\">{$lang['strname']}</th>\n";			echo "\t\t<td class=\"data1\">";			echo "\t\t\t<input name=\"name\" size=\"32\" maxlength=\"{$data->_maxNameLen}\" value=\"",				htmlspecialchars($_POST['name']), "\" />\n";			echo "\t\t</td>\n";			echo "\t</tr>\n";			if ($data->hasAlterSchemaOwner()) {				$users = $data->getUsers();				echo "<tr><th class=\"data left required\">{$lang['strowner']}</th>\n";					echo "<td class=\"data2\"><select name=\"owner\">";					while (!$users->EOF) {						$uname = $users->fields['usename'];						echo "<option value=\"", htmlspecialchars($uname), "\"",						($uname == $_POST['owner']) ? ' selected="selected"' : '', ">", htmlspecialchars($uname), "</option>\n";						$users->moveNext();					}					echo "</select></td></tr>\n";			}			else 				echo "<input name=\"owner\" value=\"{$_POST['owner']}\" type=\"hidden\" />";			echo "\t<tr>\n";			echo "\t\t<th class=\"data\">{$lang['strcomment']}</th>\n";			echo "\t\t<td class=\"data1\"><textarea cols=\"32\" rows=\"3\"name=\"comment\">", htmlspecialchars($_POST['comment']), "</textarea></td>\n";			echo "\t</tr>\n";			echo "</table>\n";			echo "<p><input type=\"hidden\" name=\"action\" value=\"alter\" />\n";			echo "<input type=\"hidden\" name=\"schema\" value=\"", htmlspecialchars($_POST['schema']), "\" />\n";			echo $misc->form;			echo "<input type=\"submit\" name=\"alter\" value=\"{$lang['stralter']}\" />\n";			echo "<input type=\"submit\" name=\"cancel\" value=\"{$lang['strcancel']}\" /></p>\n";			echo "</form>\n";		} else {			echo "<p>{$lang['strnodata']}</p>\n";		}	}	/**	 * Save the form submission containing changes to a schema	 */	function doSaveAlter($msg = '') {		global $data, $misc, $lang, $_reload_browser;		$status = $data->updateSchema($_POST['schema'], $_POST['comment'], $_POST['name'], $_POST['owner']);		if ($status == 0) {			$_reload_browser = true;			doDefault($lang['strschemaaltered']);		}		else			doAlter($lang['strschemaalteredbad']);	}	/**	 * Show confirmation of drop and perform actual drop	 */	function doDrop($confirm) {		global $data, $misc;		global $lang, $_reload_browser;		if (empty($_REQUEST['nsp']) && empty($_REQUEST['ma'])) {			doDefault($lang['strspecifyschematodrop']);			exit();		}		if ($confirm) {			$misc->printTrail('schema');			$misc->printTitle($lang['strdrop'],'pg.schema.drop');			echo "<form action=\"schemas.php\" method=\"post\">\n";			//If multi drop			if (isset($_REQUEST['ma'])) {				foreach($_REQUEST['ma'] as $v) {					$a = unserialize(htmlspecialchars_decode($v, ENT_QUOTES));					echo '<p>', sprintf($lang['strconfdropschema'], $misc->printVal($a['nsp'])), "</p>\n";					echo '<input type="hidden" name="nsp[]" value="', htmlspecialchars($a['nsp']), "\" />\n";				}			}			else {				echo "<p>", sprintf($lang['strconfdropschema'], $misc->printVal($_REQUEST['nsp'])), "</p>\n";				echo "<input type=\"hidden\" name=\"nsp\" value=\"", htmlspecialchars($_REQUEST['nsp']), "\" />\n";			}			echo "<p><input type=\"checkbox\" id=\"cascade\" name=\"cascade\" /> <label for=\"cascade\">{$lang['strcascade']}</label></p>\n";			echo "<p><input type=\"hidden\" name=\"action\" value=\"drop\" />\n";			echo "<input type=\"hidden\" name=\"database\" value=\"", htmlspecialchars($_REQUEST['database']), "\" />\n";			echo $misc->form;			echo "<input type=\"submit\" name=\"drop\" value=\"{$lang['strdrop']}\" />\n";			echo "<input type=\"submit\" name=\"cancel\" value=\"{$lang['strcancel']}\" /></p>\n";			echo "</form>\n";		}		else {			if (is_array($_POST['nsp'])) {				$msg='';				$status = $data->beginTransaction();				if ($status == 0) {					foreach($_POST['nsp'] as $s) {						$status = $data->dropSchema($s, isset($_POST['cascade']));						if ($status == 0)							$msg.= sprintf('%s: %s<br />', htmlentities($s), $lang['strschemadropped']);						else {							$data->endTransaction();							doDefault(sprintf('%s%s: %s<br />', $msg, htmlentities($s), $lang['strschemadroppedbad']));							return;						}					}				}				if($data->endTransaction() == 0) {					// Everything went fine, back to the Default page....					$_reload_browser = true;					doDefault($msg);				}				else doDefault($lang['strschemadroppedbad']);			}			else{				$status = $data->dropSchema($_POST['nsp'], isset($_POST['cascade']));				if ($status == 0) {					$_reload_browser = true;					doDefault($lang['strschemadropped']);				}				else					doDefault($lang['strschemadroppedbad']);			}		}	}	/**	 * Displays options for database download	 */	function doExport($msg = '') {		global $data, $misc;		global $lang;		$misc->printTrail('schema');		$misc->printTabs('schema','export');		$misc->printMsg($msg);		echo "<form action=\"dbexport.php\" method=\"post\">\n";		echo "<table>\n";		echo "<tr><th class=\"data\">{$lang['strformat']}</th><th class=\"data\" colspan=\"2\">{$lang['stroptions']}</th></tr>\n";		// Data only		echo "<tr><th class=\"data left\" rowspan=\"2\">";		echo "<input type=\"radio\" id=\"what1\" name=\"what\" value=\"dataonly\" checked=\"checked\" /><label for=\"what1\">{$lang['strdataonly']}</label></th>\n";		echo "<td>{$lang['strformat']}</td>\n";		echo "<td><select name=\"d_format\">\n";		echo "<option value=\"copy\">COPY</option>\n";		echo "<option value=\"sql\">SQL</option>\n";		echo "</select>\n</td>\n</tr>\n";		echo "<tr><td><label for=\"d_oids\">{$lang['stroids']}</label></td><td><input type=\"checkbox\" id=\"d_oids\" name=\"d_oids\" /></td>\n</tr>\n";		// Structure only		echo "<tr><th class=\"data left\"><input type=\"radio\" id=\"what2\" name=\"what\" value=\"structureonly\" /><label for=\"what2\">{$lang['strstructureonly']}</label></th>\n";		echo "<td><label for=\"s_clean\">{$lang['strdrop']}</label></td><td><input type=\"checkbox\" id=\"s_clean\" name=\"s_clean\" /></td>\n</tr>\n";		// Structure and data		echo "<tr><th class=\"data left\" rowspan=\"3\">";		echo "<input type=\"radio\" id=\"what3\" name=\"what\" value=\"structureanddata\" /><label for=\"what3\">{$lang['strstructureanddata']}</label></th>\n";		echo "<td>{$lang['strformat']}</td>\n";		echo "<td><select name=\"sd_format\">\n";		echo "<option value=\"copy\">COPY</option>\n";		echo "<option value=\"sql\">SQL</option>\n";		echo "</select>\n</td>\n</tr>\n";		echo "<tr><td><label for=\"sd_clean\">{$lang['strdrop']}</label></td><td><input type=\"checkbox\" id=\"sd_clean\" name=\"sd_clean\" /></td>\n</tr>\n";		echo "<tr><td><label for=\"sd_oids\">{$lang['stroids']}</label></td><td><input type=\"checkbox\" id=\"sd_oids\" name=\"sd_oids\" /></td>\n</tr>\n";		echo "</table>\n";		echo "<h3>{$lang['stroptions']}</h3>\n";		echo "<p><input type=\"radio\" id=\"output1\" name=\"output\" value=\"show\" checked=\"checked\" /><label for=\"output1\">{$lang['strshow']}</label>\n";		echo "<br/><input type=\"radio\" id=\"output2\" name=\"output\" value=\"download\" /><label for=\"output2\">{$lang['strdownload']}</label>\n";		// MSIE cannot download gzip in SSL mode - it's just broken		if (!(strstr($_SERVER['HTTP_USER_AGENT'], 'MSIE') && isset($_SERVER['HTTPS']))) {			echo "<br /><input type=\"radio\" id=\"output3\" name=\"output\" value=\"gzipped\" /><label for=\"output3\">{$lang['strdownloadgzipped']}</label>\n";		}		echo "</p>\n";		echo "<p><input type=\"hidden\" name=\"action\" value=\"export\" />\n";		echo "<input type=\"hidden\" name=\"subject\" value=\"schema\" />\n";        echo "<input type=\"hidden\" name=\"database\" value=\"", htmlspecialchars($_REQUEST['database']), "\" />\n";        echo "<input type=\"hidden\" name=\"schema\" value=\"", htmlspecialchars($_REQUEST['schema']), "\" />\n";		echo $misc->form;		echo "<input type=\"submit\" value=\"{$lang['strexport']}\" /></p>\n";		echo "</form>\n";	}	/**	 * Generate XML for the browser tree.	 */	function doTree() {		global $misc, $data, $lang, $slony;		$schemas = $data->getSchemas();		$reqvars = $misc->getRequestVars('schema');		$attrs = array(			'text'   => field('nspname'),			'icon'   => 'Schema',			'toolTip'=> field('nspcomment'),			'action' => url('redirect.php',							$reqvars,							array(								'subject' => 'schema',								'schema'  => field('nspname')							)						),			'branch' => url('schemas.php',							$reqvars,							array(								'action'  => 'subtree',								'schema'  => field('nspname')							)						),		);		$misc->printTreeXML($schemas, $attrs);		exit;	}	function doSubTree() {		global $misc, $data, $lang;		$tabs = $misc->getNavTabs('schema');		$items = $misc->adjustTabsForTree($tabs);		$reqvars = $misc->getRequestVars('schema');		$attrs = array(			'text'   => noEscape(field('title')),			'icon'   => field('icon'),			'action' => url(field('url'),							$reqvars,							field('urlvars', array())						),			'branch' => url(field('url'),							$reqvars,							field('urlvars'),							array('action' => 'tree')						)		);		$misc->printTreeXML($items, $attrs);		exit;	}	if ($action == 'tree') doTree();	if ($action == 'subtree') doSubTree();	$misc->printHeader($lang['strschemas']);	$misc->printBody();	if (isset($_POST['cancel'])) $action = '';	switch ($action) {		case 'create':			if (isset($_POST['create'])) doSaveCreate();			else doCreate();			break;		case 'alter':			if (isset($_POST['alter'])) doSaveAlter();			else doAlter();			break;		case 'drop':			if (isset($_POST['drop'])) doDrop(false);			else doDrop(true);			break;		case 'export':			doExport();			break;		default:			doDefault();			break;	}	$misc->printFooter();?>
