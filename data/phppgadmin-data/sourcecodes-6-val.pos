<?php	/**	 * List rules on a table OR view	 *	 * $Id: rules.php,v 1.33 2007/08/31 18:30:11 ioguix Exp $	 */	// Include application functions	include_once('./libraries/lib.inc.php');	$action = (isset($_REQUEST['action'])) ? $_REQUEST['action'] : '';	/**	 * Confirm and then actually create a rule	 */	function createRule($confirm, $msg = '') {		global $data, $misc;		global $lang;		if (!isset($_POST['name'])) $_POST['name'] = '';		if (!isset($_POST['event'])) $_POST['event'] = '';		if (!isset($_POST['where'])) $_POST['where'] = '';		if (!isset($_POST['type'])) $_POST['type'] = 'SOMETHING';		if (!isset($_POST['raction'])) $_POST['raction'] = '';		if ($confirm) {			$misc->printTrail($_REQUEST['subject']);			$misc->printTitle($lang['strcreaterule'],'pg.rule.create');			$misc->printMsg($msg);			echo "<form action=\"rules.php\" method=\"post\">\n";			echo "<table>\n";			echo "<tr><th class=\"data left required\">{$lang['strname']}</th>\n";			echo "<td class=\"data1\"><input name=\"name\" size=\"16\" maxlength=\"{$data->_maxNameLen}\" value=\"",				htmlspecialchars($_POST['name']), "\" /></td></tr>\n";			echo "<tr><th class=\"data left required\">{$lang['strevent']}</th>\n";			echo "<td class=\"data1\"><select name=\"event\">\n";			foreach ($data->rule_events as $v) {				echo "<option value=\"{$v}\"", ($v == $_POST['event']) ? ' selected="selected"' : '',				">{$v}</option>\n";			}			echo "</select></td></tr>\n";			echo "<tr><th class=\"data left\">{$lang['strwhere']}</th>\n";			echo "<td class=\"data1\"><input name=\"where\" size=\"32\" value=\"",				htmlspecialchars($_POST['where']), "\" /></td></tr>\n";			echo "<tr><th class=\"data left\"><label for=\"instead\">{$lang['strinstead']}</label></th>\n";			echo "<td class=\"data1\">";			echo "<input type=\"checkbox\" id=\"instead\" name=\"instead\" ", (isset($_POST['instead'])) ? ' checked="checked"' : '', " />\n";			echo "</td></tr>\n";			echo "<tr><th class=\"data left required\">{$lang['straction']}</th>\n";			echo "<td class=\"data1\">";			echo "<input type=\"radio\" id=\"type1\" name=\"type\" value=\"NOTHING\"", ($_POST['type'] == 'NOTHING') ? ' checked="checked"' : '', " /> <label for=\"type1\">NOTHING</label><br />\n";			echo "<input type=\"radio\" name=\"type\" value=\"SOMETHING\"", ($_POST['type'] == 'SOMETHING') ? ' checked="checked"' : '', " />\n";			echo "(<input name=\"raction\" size=\"32\" value=\"",				htmlspecialchars($_POST['raction']), "\" />)</td></tr>\n";			echo "</table>\n";			echo "<input type=\"hidden\" name=\"action\" value=\"save_create_rule\" />\n";			echo "<input type=\"hidden\" name=\"subject\" value=\"", htmlspecialchars($_REQUEST['subject']), "\" />\n";			echo "<input type=\"hidden\" name=\"", htmlspecialchars($_REQUEST['subject']),					"\" value=\"", htmlspecialchars($_REQUEST[$_REQUEST['subject']]), "\" />\n";			echo $misc->form;			echo "<p><input type=\"submit\" name=\"ok\" value=\"{$lang['strcreate']}\" />\n";			echo "<input type=\"submit\" name=\"cancel\" value=\"{$lang['strcancel']}\" /></p>\n";			echo "</form>\n";		}		else {			if (trim($_POST['name']) == '')				createRule(true, $lang['strruleneedsname']);			else {				$status = $data->createRule($_POST['name'],					$_POST['event'], $_POST[$_POST['subject']], $_POST['where'],					isset($_POST['instead']), $_POST['type'], $_POST['raction']);				if ($status == 0)					doDefault($lang['strrulecreated']);				else					createRule(true, $lang['strrulecreatedbad']);			}		}	}	/**	 * Show confirmation of drop and perform actual drop	 */	function doDrop($confirm) {		global $data, $misc;		global $lang;		if ($confirm) {			$misc->printTrail($_REQUEST['subject']);			$misc->printTitle($lang['strdrop'],'pg.rule.drop');						echo "<p>", sprintf($lang['strconfdroprule'], $misc->printVal($_REQUEST['rule']),				$misc->printVal($_REQUEST[$_REQUEST['reltype']])), "</p>\n";			echo "<form action=\"rules.php\" method=\"post\">\n";			echo "<input type=\"hidden\" name=\"action\" value=\"drop\" />\n";			echo "<input type=\"hidden\" name=\"subject\" value=\"", htmlspecialchars($_REQUEST['reltype']), "\" />\n";			echo "<input type=\"hidden\" name=\"", htmlspecialchars($_REQUEST['reltype']),					"\" value=\"", htmlspecialchars($_REQUEST[$_REQUEST['reltype']]), "\" />\n";			echo "<input type=\"hidden\" name=\"rule\" value=\"", htmlspecialchars($_REQUEST['rule']), "\" />\n";			echo $misc->form;			echo "<p><input type=\"checkbox\" id=\"cascade\" name=\"cascade\" /> <label for=\"cascade\">{$lang['strcascade']}</label></p>\n";			echo "<input type=\"submit\" name=\"yes\" value=\"{$lang['stryes']}\" />\n";			echo "<input type=\"submit\" name=\"no\" value=\"{$lang['strno']}\" />\n";			echo "</form>\n";		}		else {			$status = $data->dropRule($_POST['rule'], $_POST[$_POST['subject']], isset($_POST['cascade']));			if ($status == 0)				doDefault($lang['strruledropped']);			else				doDefault($lang['strruledroppedbad']);		}	}	/**	 * List all the rules on the table	 */	function doDefault($msg = '') {		global $data, $misc;		global $lang;		$misc->printTrail($_REQUEST['subject']);		$misc->printTabs($_REQUEST['subject'], 'rules');		$misc->printMsg($msg);		$rules = $data->getRules($_REQUEST[$_REQUEST['subject']]);		$columns = array(			'rule' => array(				'title' => $lang['strname'],				'field' => field('rulename'),			),			'definition' => array(				'title' => $lang['strdefinition'],				'field' => field('definition'),			),			'actions' => array(				'title' => $lang['stractions'],			),		);		$subject = urlencode($_REQUEST['subject']);		$object = urlencode($_REQUEST[$_REQUEST['subject']]);		$actions = array(			'drop' => array(				'title' => $lang['strdrop'],				'url'   => "rules.php?action=confirm_drop&amp;{$misc->href}&amp;reltype={$subject}&amp;{$subject}={$object}&amp;subject=rule&amp;",				'vars'  => array('rule' => 'rulename'),			),		);		$misc->printTable($rules, $columns, $actions, $lang['strnorules']);		echo "<p><a class=\"navlink\" href=\"rules.php?action=create_rule&amp;{$misc->href}&amp;{$subject}={$object}&amp;subject={$subject}\">{$lang['strcreaterule']}</a></p>\n";	}	function doTree() {		global $misc, $data;		$rules = $data->getRules($_REQUEST[$_REQUEST['subject']]);		$reqvars = $misc->getRequestVars($_REQUEST['subject']);		$attrs = array(			'text'   => field('rulename'),			'icon'   => 'Rule',		);		$misc->printTreeXML($rules, $attrs);		exit;	}	if ($action == 'tree') doTree();		// Different header if we're view rules or table rules	$misc->printHeader($_REQUEST[$_REQUEST['subject']] . ' - ' . $lang['strrules']);	$misc->printBody();	switch ($action) {		case 'create_rule':			createRule(true);			break;		case 'save_create_rule':			if (isset($_POST['cancel'])) doDefault();			else createRule(false);			break;		case 'drop':			if (isset($_POST['yes'])) doDrop(false);			else doDefault();			break;		case 'confirm_drop':			doDrop(true);			break;		default:			doDefault();			break;	}		$misc->printFooter();?>
<?php	/**	 * List Columns properties in tables	 *	 * $Id: colproperties.php	 */	// Include application functions	include_once('./libraries/lib.inc.php');	$action = (isset($_REQUEST['action'])) ? $_REQUEST['action'] : '';	if (isset($_REQUEST['table']))		$tableName =& $_REQUEST['table'];	elseif (isset($_REQUEST['view']))		$tableName =& $_REQUEST['view'];	else 		die($lang['strnotableprovided']);	/**	 * Displays a screen where they can alter a column	 */	function doAlter($msg = '') {		global $data, $misc, $_reload_browser;		global $lang;		if (!isset($_REQUEST['stage'])) $_REQUEST['stage'] = 1;		switch ($_REQUEST['stage']) {			case 1:				$misc->printTrail('column');				$misc->printTitle($lang['stralter'], 'pg.column.alter'); 				$misc->printMsg($msg);				echo "<script src=\"tables.js\" type=\"text/javascript\"></script>";				echo "<form action=\"colproperties.php\" method=\"post\">\n";				// Output table header				echo "<table>\n";				echo "<tr><th class=\"data required\">{$lang['strname']}</th>\n";				if ($data->hasAlterColumnType()) {					echo "<th class=\"data required\" colspan=\"2\">{$lang['strtype']}</th>\n";					echo "<th class=\"data\">{$lang['strlength']}</th>\n";				}				else {					echo "<th class=\"data required\">{$lang['strtype']}</th>\n";				}				echo "<th class=\"data\">{$lang['strnotnull']}</th>\n<th class=\"data\">{$lang['strdefault']}</th>\n<th class=\"data\">{$lang['strcomment']}</th></tr>\n";				$column = $data->getTableAttributes($_REQUEST['table'], $_REQUEST['column']);				$column->fields['attnotnull'] = $data->phpBool($column->fields['attnotnull']);				// Upon first drawing the screen, load the existing column information				// from the database.				if (!isset($_REQUEST['default'])) {					$_REQUEST['field'] = $column->fields['attname'];					$_REQUEST['type'] = $column->fields['base_type'];					// Check to see if its' an array type...					// XXX: HACKY					if (substr($column->fields['base_type'], strlen($column->fields['base_type']) - 2) == '[]') {						$_REQUEST['type'] = substr($column->fields['base_type'], 0, strlen($column->fields['base_type']) - 2);						$_REQUEST['array'] = '[]';					}					else {						$_REQUEST['type'] = $column->fields['base_type'];						$_REQUEST['array'] = '';					}					// To figure out the length, look in the brackets :(					// XXX: HACKY					if ($column->fields['type'] != $column->fields['base_type'] && preg_match('/\\(([0-9, ]*)\\)/', $column->fields['type'], $bits)) {						$_REQUEST['length'] = $bits[1];					}					else						$_REQUEST['length'] = '';					$_REQUEST['default'] = $_REQUEST['olddefault'] = $column->fields['adsrc'];					if ($column->fields['attnotnull']) $_REQUEST['notnull'] = 'YES';					$_REQUEST['comment'] = $column->fields['comment'];				}								// Column name				echo "<tr><td><input name=\"field\" size=\"16\" maxlength=\"{$data->_maxNameLen}\" value=\"",					htmlspecialchars($_REQUEST['field']), "\" /></td>\n";									// Column type				$escaped_predef_types = array(); // the JS escaped array elements				if ($data->hasAlterColumnType()) {					// Fetch all available types					$types = $data->getTypes(true, false, true);					$types_for_js = array();										echo "<td><select name=\"type\" id=\"type\" onchange=\"checkLengths(document.getElementById('type').value,'');\">\n";									while (!$types->EOF) {						$typname = $types->fields['typname'];						$types_for_js[] = $typname;						echo "\t<option value=\"", htmlspecialchars($typname), "\"", ($typname == $_REQUEST['type']) ? ' selected="selected"' : '', ">",							$misc->printVal($typname), "</option>\n";						$types->moveNext();					}					echo "</select></td>\n";										// Output array type selector					echo "<td><select name=\"array\">\n";					echo "\t<option value=\"\"", ($_REQUEST['array'] == '') ? ' selected="selected"' : '', "></option>\n";					echo "\t<option value=\"[]\"", ($_REQUEST['array'] == '[]') ? ' selected="selected"' : '', ">[ ]</option>\n";					echo "</select></td>\n";					$predefined_size_types = array_intersect($data->predefined_size_types, $types_for_js);					foreach($predefined_size_types as $value) {						$escaped_predef_types[] = "'{$value}'";					}						echo "<td><input name=\"length\" id=\"lengths\" size=\"8\" value=\"",						htmlspecialchars($_REQUEST['length']), "\" /></td>\n";				} else {					// Otherwise draw the read-only type name					echo "<td>", $misc->printVal($data->formatType($column->fields['type'], $column->fields['atttypmod'])), "</td>\n";				}								echo "<td><input type=\"checkbox\" name=\"notnull\"", (isset($_REQUEST['notnull'])) ? ' checked="checked"' : '', " /></td>\n";				echo "<td><input name=\"default\" size=\"20\" value=\"", 					htmlspecialchars($_REQUEST['default']), "\" /></td>\n";				echo "<td><input name=\"comment\" size=\"40\" value=\"", 					htmlspecialchars($_REQUEST['comment']), "\" /></td></tr>\n";				echo "</table>\n";				echo "<p><input type=\"hidden\" name=\"action\" value=\"properties\" />\n";				echo "<input type=\"hidden\" name=\"stage\" value=\"2\" />\n";				echo $misc->form;				echo "<input type=\"hidden\" name=\"table\" value=\"", htmlspecialchars($_REQUEST['table']), "\" />\n";				echo "<input type=\"hidden\" name=\"column\" value=\"", htmlspecialchars($_REQUEST['column']), "\" />\n";				echo "<input type=\"hidden\" name=\"olddefault\" value=\"", htmlspecialchars($_REQUEST['olddefault']), "\" />\n";				if ($column->fields['attnotnull']) echo "<input type=\"hidden\" name=\"oldnotnull\" value=\"on\" />\n";				echo "<input type=\"hidden\" name=\"oldtype\" value=\"", htmlspecialchars($data->formatType($column->fields['type'], $column->fields['atttypmod'])), "\" />\n";				// Add hidden variables to suppress error notices if we don't support altering column type				if (!$data->hasAlterColumnType()) {					echo "<input type=\"hidden\" name=\"type\" value=\"", htmlspecialchars($_REQUEST['type']), "\" />\n";									echo "<input type=\"hidden\" name=\"length\" value=\"", htmlspecialchars($_REQUEST['length']), "\" />\n";									echo "<input type=\"hidden\" name=\"array\" value=\"", htmlspecialchars($_REQUEST['array']), "\" />\n";								}				echo "<input type=\"submit\" value=\"{$lang['stralter']}\" />\n";				echo "<input type=\"submit\" name=\"cancel\" value=\"{$lang['strcancel']}\" /></p>\n";				echo "</form>\n";				echo "<script type=\"text/javascript\">predefined_lengths = new Array(". implode(",",$escaped_predef_types) .");checkLengths(document.getElementById('type').value,'');</script>\n";						break;			case 2:				// Check inputs				if (trim($_REQUEST['field']) == '') {					$_REQUEST['stage'] = 1;					doAlter($lang['strcolneedsname']);					return;				}				if (!isset($_REQUEST['length'])) $_REQUEST['length'] = '';				$status = $data->alterColumn($_REQUEST['table'], $_REQUEST['column'], $_REQUEST['field'], 							     isset($_REQUEST['notnull']), isset($_REQUEST['oldnotnull']), 							     $_REQUEST['default'], $_REQUEST['olddefault'],							     $_REQUEST['type'], $_REQUEST['length'], $_REQUEST['array'], $_REQUEST['oldtype'],							     $_REQUEST['comment']);				if ($status == 0) {					if ($_REQUEST['column'] != $_REQUEST['field']) {						$_REQUEST['column'] = $_REQUEST['field'];						$_reload_browser = true;					}					doDefault($lang['strcolumnaltered']);				}				else {					$_REQUEST['stage'] = 1;					doAlter($lang['strcolumnalteredbad']);					return;				}				break;			default:				echo "<p>{$lang['strinvalidparam']}</p>\n";		}	}	/**	 * Show default list of columns in the table	 */	function doDefault($msg = '', $isTable = true) {		global $data, $conf, $misc, $tableName;		global $lang;		function attPre(&$rowdata) {			global $data;			$rowdata->fields['+type'] = $data->formatType($rowdata->fields['type'], $rowdata->fields['atttypmod']);		}				if (empty($_REQUEST['column']))			$msg.= "<br/>{$lang['strnoobjects']}";					$misc->printTrail('column');			//$misc->printTitle($lang['strcolprop']);			$misc->printTabs('column','properties');			$misc->printMsg($msg);		if (! empty($_REQUEST['column'])) {			// Get table			$tdata = $data->getTable($tableName);			// Get columns			$attrs = $data->getTableAttributes($tableName, $_REQUEST['column']);			// Show comment if any			if ($attrs->fields['comment'] !== null)				echo "<p class=\"comment\">", $misc->printVal($attrs->fields['comment']), "</p>\n";			$column = array(				'column' => array(					'title' => $lang['strcolumn'],					'field' => field('attname'),				),				'type' => array(					'title' => $lang['strtype'],					'field' => field('+type'),				)			);					if ($isTable) {				$column['notnull'] = array(					'title' => $lang['strnotnull'],					'field' => field('attnotnull'),					'type'  => 'bool',					'params'=> array('true' => 'NOT NULL', 'false' => '')				);				$column['default'] = array(					'title' => $lang['strdefault'],					'field' => field('adsrc'),				);			}			$actions=array();			$misc->printTable($attrs, $column, $actions, null, 'attPre');			echo "<br />\n";			echo "<ul class=\"navlink\">\n";			$f_attname = $_REQUEST['column'];			$f_table = $tableName;			$f_schema = $data->_schema;			$data->fieldClean($f_attname);			$data->fieldClean($f_table);			$data->fieldClean($f_schema);			$query_url = urlencode("SELECT \"{$f_attname}\", count(*) AS \"count\" FROM \"{$f_schema}\".\"{$f_table}\" GROUP BY \"{$f_attname}\" ORDER BY \"{$f_attname}\"") ;			if ($isTable) {				$return_url = urlencode("colproperties.php?{$misc->href}&amp;table=". urlencode($tableName)					."&amp;column=". urlencode($_REQUEST['column']));				/* Browse link */				/* FIXME browsing a col should somehow be a action so we don't				 * send an ugly SQL in the URL */				echo "\t<li><a href=\"display.php?{$misc->href}&amp;subject=column&amp;table=",					urlencode($_REQUEST['table']),					"&amp;column=", urlencode($_REQUEST['column']),					"&amp;return_url={$return_url}&amp;return_desc=", urlencode($lang['strback']), 					"&amp;query={$query_url}\">{$lang['strbrowse']}</a></li>\n";				/* Edit link */				echo "\t<li><a href=\"colproperties.php?action=properties&amp;{$misc->href}&amp;table=", urlencode($tableName),				    "&amp;column=", urlencode($_REQUEST['column']) . "\">{$lang['stralter']}</a></li>\n";									echo "\t<li><a href=\"tblproperties.php?action=confirm_drop&amp;{$misc->href}&amp;table=", urlencode($tableName),						"&amp;column=" . urlencode($_REQUEST['column']) . "\">{$lang['strdrop']}</a></li>\n";			} else {				$return_url = urlencode("colproperties.php?{$misc->href}&amp;view=". urlencode($tableName)					."&amp;column=". urlencode($_REQUEST['column']));				/* Browse link */				echo "\t<li><a href=\"display.php?{$misc->href}&amp;subject=column&amp;column=",					urlencode($_REQUEST['column']), "&amp;return_url={$return_url}&amp;return_desc=", urlencode($lang['strback']),					"&amp;query={$query_url}\">{$lang['strbrowse']}</a></li>\n";			}			echo "</ul>\n";		}	}	$misc->printHeader($lang['strtables'] . ' - ' . $tableName);	$misc->printBody();	if (isset($_REQUEST['view']))		doDefault(null, false);	else		switch ($action) {			case 'properties':				if (isset($_POST['cancel'])) doDefault();				else doAlter();				break;			default:				doDefault();				break;		}		$misc->printFooter();?>
<?php	/**	 * Manage fulltext configurations, dictionaries and mappings	 *	 * $Id: fulltext.php,v 1.6 2008/03/17 21:35:48 ioguix Exp $	 */	// Include application functions	include_once('./libraries/lib.inc.php');	$action = (isset($_REQUEST['action'])) ? $_REQUEST['action'] : '';	if (!isset($msg)) $msg = '';	function doDefault($msg = '') {		global $data, $misc;		global $lang;		$misc->printTrail('schema');		$misc->printTabs('schema','fulltext');		$misc->printTabs('fulltext','ftsconfigs');		$misc->printMsg($msg);		$cfgs = $data->getFtsConfigurations(false);		$columns = array(			'configuration' => array(				'title' => $lang['strftsconfig'],				'field' => field('name'),				'url'   => "fulltext.php?action=viewconfig&amp;{$misc->href}&amp;",				'vars'	=> array('ftscfg' => 'name'),			),			'schema' => array(				'title' => $lang['strschema'],				'field' => field('schema'),			),			'actions' => array(				'title' => $lang['stractions'],			),			'comment' => array(				'title' => $lang['strcomment'],				'field' => field('comment'),			),		);		$actions = array(			'drop' => array(				'title' => $lang['strdrop'],				'url'   => "fulltext.php?action=dropconfig&amp;{$misc->href}&amp;",				'vars'  => array('ftscfg' => 'name'),			),			'alter' => array(				'title' => $lang['stralter'],				'url'   => "fulltext.php?action=alterconfig&amp;{$misc->href}&amp;",				'vars'  => array('ftscfg' => 'name'),			),		);		$misc->printTable($cfgs, $columns, $actions, $lang['strftsnoconfigs']);		echo "<ul class=\"navlink\">\n";		echo "\t<li><a href=\"fulltext.php?action=createconfig&amp;{$misc->href}\">{$lang['strftscreateconfig']}</a></li>\n";		echo "</ul>\n";	}	function doDropConfig($confirm) {		global $data, $data, $misc;		global $lang, $_reload_browser;		if ($confirm) {			$misc->printTrail('ftscfg');			$misc->printTitle($lang['strdrop'], 'pg.ftscfg.drop');			echo "<p>", sprintf($lang['strconfdropftsconfig'], $misc->printVal($_REQUEST['ftscfg'])), "</p>\n";			echo "<form action=\"fulltext.php\" method=\"post\">\n";			echo "<p><input type=\"checkbox\" id=\"cascade\" name=\"cascade\" /> <label for=\"cascade\">{$lang['strcascade']}</label></p>\n";			echo "<p><input type=\"hidden\" name=\"action\" value=\"dropconfig\" />\n";			echo "<input type=\"hidden\" name=\"database\" value=\"", htmlspecialchars($_REQUEST['database']), "\" />\n";			echo "<input type=\"hidden\" name=\"ftscfg\" value=\"", htmlspecialchars($_REQUEST['ftscfg']), "\" />\n";			echo $misc->form;			echo "<input type=\"submit\" name=\"drop\" value=\"{$lang['strdrop']}\" />\n";			echo "<input type=\"submit\" name=\"cancel\" value=\"{$lang['strcancel']}\" /></p>\n";			echo "</form>\n";		}		else {			$status = $data->dropFtsConfiguration($_POST['ftscfg'], isset($_POST['cascade']));			if ($status == 0) {				$_reload_browser = true;				doDefault($lang['strftsconfigdropped']);			}			else				doDefault($lang['strftsconfigdroppedbad']);		}	}	function doDropDict($confirm) {		global $data, $data, $misc;		global $lang, $_reload_browser;		if ($confirm) {			$misc->printTrail('ftscfg'); // TODO: change to smth related to dictionary			$misc->printTitle($lang['strdrop'], 'pg.ftsdict.drop');			echo "<p>", sprintf($lang['strconfdropftsdict'], $misc->printVal($_REQUEST['ftsdict'])), "</p>\n";			echo "<form action=\"fulltext.php\" method=\"post\">\n";			echo "<p><input type=\"checkbox\" id=\"cascade\" name=\"cascade\" /> <label for=\"cascade\">{$lang['strcascade']}</label></p>\n";			echo "<p><input type=\"hidden\" name=\"action\" value=\"dropdict\" />\n";			echo "<input type=\"hidden\" name=\"database\" value=\"", htmlspecialchars($_REQUEST['database']), "\" />\n";			echo "<input type=\"hidden\" name=\"ftsdict\" value=\"", htmlspecialchars($_REQUEST['ftsdict']), "\" />\n";			//echo "<input type=\"hidden\" name=\"ftscfg\" value=\"", htmlspecialchars($_REQUEST['ftscfg']), "\" />\n";			echo "<input type=\"hidden\" name=\"prev_action\" value=\"viewdicts\" /></p>\n";			echo $misc->form;			echo "<input type=\"submit\" name=\"drop\" value=\"{$lang['strdrop']}\" />\n";			echo "<input type=\"submit\" name=\"cancel\" value=\"{$lang['strcancel']}\" /></p>\n";			echo "</form>\n";		}		else {			$status = $data->dropFtsDictionary($_POST['ftsdict'], isset($_POST['cascade']));			if ($status == 0) {				$_reload_browser = true;				doViewDicts($lang['strftsdictdropped']);			}			else				doViewDicts($lang['strftsdictdroppedbad']);		}	}	/**	 * Displays a screen where one can enter a new FTS configuration	 */	function doCreateConfig($msg = '') {		global $data, $misc;		global $lang;		include_once('./classes/Gui.php');		$server_info = $misc->getServerInfo();		if (!isset($_POST['formName'])) $_POST['formName'] = '';		if (!isset($_POST['formParser'])) $_POST['formParser'] = '';		if (!isset($_POST['formTemplate'])) $_POST['formTemplate'] = '';		if (!isset($_POST['formWithMap'])) $_POST['formWithMap'] = '';		if (!isset($_POST['formComment'])) $_POST['formComment'] = '';		// Fetch all FTS configurations from the database		$ftscfgs = $data->getFtsConfigurations();		// Fetch all FTS parsers from the database		$ftsparsers = $data->getFtsParsers();		$misc->printTrail('schema');		$misc->printTitle($lang['strftscreateconfig'], 'pg.ftscfg.create');		$misc->printMsg($msg);		echo "<form action=\"fulltext.php\" method=\"post\">\n";		echo "<table>\n";		/* conf name */		echo "\t<tr>\n\t\t<th class=\"data left required\">{$lang['strname']}</th>\n";		echo "\t\t<td class=\"data1\"><input name=\"formName\" size=\"32\" maxlength=\"{$data->_maxNameLen}\" value=\"",			htmlspecialchars($_POST['formName']), "\" /></td>\n\t</tr>\n";		// Template		echo "\t<tr>\n\t\t<th class=\"data left\">{$lang['strftstemplate']}</th>\n";		echo "\t\t<td class=\"data1\">";		$tpls = array();		$tplsel = '';		while (!$ftscfgs->EOF) {			$data->fieldClean($ftscfgs->fields['schema']);			$data->fieldClean($ftscfgs->fields['name']);			$tplname = $ftscfgs->fields['schema'] .'.'. $ftscfgs->fields['name'];			$tpls[$tplname] = serialize(array(				'name' => $ftscfgs->fields['name'],				'schema' => $ftscfgs->fields['schema']			));			if ($_POST['formTemplate'] == $tpls[$tplname]) {				$tplsel = htmlspecialchars($tpls[$tplname]);			}			$ftscfgs->moveNext();		}		echo GUI::printCombo($tpls, 'formTemplate', true, $tplsel, false);		echo "\n\t\t</td>\n\t</tr>\n";		// Parser		echo "\t<tr>\n\t\t<th class=\"data left\">{$lang['strftsparser']}</th>\n";		echo "\t\t<td class=\"data1\">\n";		$ftsparsers_ = array();		$ftsparsel = '';		while (!$ftsparsers->EOF) {			$data->fieldClean($ftsparsers->fields['schema']);			$data->fieldClean($ftsparsers->fields['name']);			$parsername = $ftsparsers->fields['schema'] .'.'. $ftsparsers->fields['name'];						$ftsparsers_[$parsername] = serialize(array(				'parser' => $ftsparsers->fields['name'],				'schema' => $ftsparsers->fields['schema']			));			if ($_POST['formParser'] == $ftsparsers_[$parsername]) {				$ftsparsel = htmlspecialchars($ftsparsers_[$parsername]);			}			$ftsparsers->moveNext();		}		echo GUI::printCombo($ftsparsers_, 'formParser', true, $ftsparsel, false);		echo "\n\t\t</td>\n\t</tr>\n";		// Comment		echo "\t<tr>\n\t\t<th class=\"data left\">{$lang['strcomment']}</th>\n";		echo "\t\t<td class=\"data1\"><textarea name=\"formComment\" rows=\"3\" cols=\"32\">",			htmlspecialchars($_POST['formComment']), "</textarea></td>\n\t</tr>\n";		echo "</table>\n";		echo "<p>\n";		echo "<input type=\"hidden\" name=\"action\" value=\"createconfig\" />\n";		echo "<input type=\"hidden\" name=\"database\" value=\"", htmlspecialchars($_REQUEST['database']), "\" />\n";		echo $misc->form;		echo "<input type=\"submit\" name=\"create\" value=\"{$lang['strcreate']}\" />\n";		echo "<input type=\"submit\" name=\"cancel\" value=\"{$lang['strcancel']}\" />\n";		echo "</p>\n";		echo "</form>\n";	}	/**	 * Actually creates the new FTS configuration in the database	 */	function doSaveCreateConfig() {		global $data, $lang, $_reload_browser;		$err = '';		// Check that they've given a name		if ($_POST['formName'] == '') $err .= "{$lang['strftsconfigneedsname']}<br />";				if (($_POST['formParser'] != '') && ($_POST['formTemplate'] != ''))  $err .= "{$lang['strftscantparsercopy']}<br />";		if ($err != '') return doCreateConfig($err);		if ($_POST['formParser'] != '') $formParser = unserialize($_POST['formParser']);		else $formParser = '';		if ($_POST['formTemplate'] != '') $formTemplate = unserialize($_POST['formTemplate']);		else $formTemplate = '';		$status = $data->createFtsConfiguration($_POST['formName'], $formParser, $formTemplate, $_POST['formComment']);		if ($status == 0) {			$_reload_browser = true;			doDefault($lang['strftsconfigcreated']);		}		else			doCreateConfig($lang['strftsconfigcreatedbad']);	}	/**	 * Display a form to permit editing FTS configuration properies.	 */	function doAlterConfig($msg = '') {		global $data, $misc, $lang;		$misc->printTrail('ftscfg');		$misc->printTitle($lang['stralter'], 'pg.ftscfg.alter');		$misc->printMsg($msg);		$ftscfg = $data->getFtsConfigurationByName($_REQUEST['ftscfg']);		if ($ftscfg->recordCount() > 0) {			if (!isset($_POST['formComment'])) $_POST['formComment'] = $ftscfg->fields['comment'];			if (!isset($_POST['ftscfg'])) $_POST['ftscfg'] = $_REQUEST['ftscfg'];			if (!isset($_POST['formName'])) $_POST['formName'] = $_REQUEST['ftscfg'];			if (!isset($_POST['formParser'])) $_POST['formParser'] = '';			// Fetch all FTS parsers from the database			$ftsparsers = $data->getFtsParsers();			echo "<form action=\"fulltext.php\" method=\"post\">\n";			echo "<table>\n";			echo "\t<tr>\n";			echo "\t\t<th class=\"data left required\">{$lang['strname']}</th>\n";			echo "\t\t<td class=\"data1\">";			echo "\t\t\t<input name=\"formName\" size=\"32\" maxlength=\"{$data->_maxNameLen}\" value=\"",				htmlspecialchars($_POST['formName']), "\" />\n";			echo "\t\t</td>\n";			echo "\t</tr>\n";			// Comment			echo "\t<tr>\n";			echo "\t\t<th class=\"data\">{$lang['strcomment']}</th>\n";			echo "\t\t<td class=\"data1\"><textarea cols=\"32\" rows=\"3\"name=\"formComment\">", htmlspecialchars($_POST['formComment']), "</textarea></td>\n";			echo "\t</tr>\n";			echo "</table>\n";			echo "<p><input type=\"hidden\" name=\"action\" value=\"alterconfig\" />\n";			echo "<input type=\"hidden\" name=\"ftscfg\" value=\"", htmlspecialchars($_POST['ftscfg']), "\" />\n";			echo $misc->form;			echo "<input type=\"submit\" name=\"alter\" value=\"{$lang['stralter']}\" />\n";			echo "<input type=\"submit\" name=\"cancel\" value=\"{$lang['strcancel']}\" /></p>\n";			echo "</form>\n";		} else {			echo "<p>{$lang['strnodata']}</p>\n";		}	}	/**	 * Save the form submission containing changes to a FTS configuration	 */	function doSaveAlterConfig() {		global $data, $misc, $lang;		$status = $data->updateFtsConfiguration($_POST['ftscfg'], $_POST['formComment'], $_POST['formName']);		if ($status == 0)			doDefault($lang['strftsconfigaltered']);		else			doAlterConfig($lang['strftsconfigalteredbad']);	}	/**	 * View list of FTS parsers	 */	function doViewParsers($msg = '') {		global $data, $misc;		global $lang;		$misc->printTrail('schema');		$misc->printTabs('schema','fulltext');		$misc->printTabs('fulltext','ftsparsers');		$misc->printMsg($msg);		$parsers = $data->getFtsParsers(false);		$columns = array(			'schema' => array(				'title' => $lang['strschema'],				'field' => field('schema'),			),			'name' => array(				'title' => $lang['strname'],				'field' => field('name'),			),			'comment' => array(				'title' => $lang['strcomment'],				'field' => field('comment'),			),		);		$actions = array();		$misc->printTable($parsers, $columns, $actions, $lang['strftsnoparsers']);		//TODO: create parser		//echo "<ul class=\"navlink\">\n";		//echo "\t<li><a href=\"#\">{$lang['strftscreateparser']}</a></li>\n";		//echo "</ul>\n";	}	/**	 * View list of FTS dictionaries	 */	function doViewDicts($msg = '') {		global $data, $misc;		global $lang;		$misc->printTrail('schema');		$misc->printTabs('schema','fulltext');		$misc->printTabs('fulltext','ftsdicts');		$misc->printMsg($msg);		$dicts = $data->getFtsDictionaries(false);		$columns = array(			'schema' => array(				'title' => $lang['strschema'],				'field' => field('schema'),			),			'name' => array(				'title' => $lang['strname'],				'field' => field('name'),			),			'actions' => array(				'title' => $lang['stractions'],			),			'comment' => array(				'title' => $lang['strcomment'],				'field' => field('comment'),			),		);		$actions = array(			'drop' => array(				'title' => $lang['strdrop'],				'url'   => "fulltext.php?action=dropdict&amp;{$misc->href}&amp;",				'vars'  => array('ftsdict' => 'name'),			),			'alter' => array(				'title' => $lang['stralter'],				'url'   => "fulltext.php?action=alterdict&amp;{$misc->href}&amp;",				'vars'  => array('ftsdict' => 'name'),			),		);		$misc->printTable($dicts, $columns, $actions, $lang['strftsnodicts']);		echo "<ul class=\"navlink\">\n";		echo "\t<li><a href=\"fulltext.php?action=createdict&amp;{$misc->href}&amp;\">{$lang['strftscreatedict']}</a></li>\n";		echo "</ul>\n";	}	/**	 * View details of FTS configuration given	 */	function doViewConfig($ftscfg, $msg = '') {		global $data, $misc;		global $lang;		$misc->printTrail('ftscfg');		$misc->printTabs('schema','fulltext');		$misc->printTabs('fulltext','ftsconfigs');		$misc->printMsg($msg);		echo "<h3>{$lang['strftsconfigmap']}</h3>\n";		$map = $data->getFtsConfigurationMap($ftscfg);		$columns = array(			'name' => array(				'title' => $lang['strftsmapping'],				'field' => field('name'),			),			'dictionaries' => array(				'title' => $lang['strftsdicts'],				'field' => field('dictionaries'),			),			'actions' => array(				'title' => $lang['stractions'],			),			'comment' => array(				'title' => $lang['strcomment'],				'field' => field('description'),			),		);		$actions = array(			'drop' => array(				'title' => $lang['strdrop'],				'url'   => "fulltext.php?action=dropmapping&amp;{$misc->href}&amp;",				'vars'  => array('mapping' => 'name', 'ftscfg' => 'cfgname'),				'multiaction' => 'dropmapping',			),			'alter' => array(				'title' => $lang['stralter'],				'url'   => "fulltext.php?action=altermapping&amp;{$misc->href}&amp;",				'vars'  => array('mapping' => 'name', 'ftscfg' => 'cfgname'),			),			'multiactions' => array(				'keycols' => array('mapping' => 'name'),				'url' => 'fulltext.php',				'default' => null,				'vars'  => array('ftscfg' => $ftscfg),			),		);		$misc->printTable($map, $columns, $actions, $lang['strftsemptymap']);		echo "<ul class=\"navlink\">\n";		echo "\t<li><a href=\"fulltext.php?action=addmapping&amp;{$misc->href}&ftscfg={$ftscfg}\">{$lang['strftsaddmapping']}</a></li>\n";		echo "</ul>\n";	}	/**	 * Displays a screen where one can enter a details of a new FTS dictionary	 */	function doCreateDict($msg = '') {		global $data, $misc;		global $lang;		include_once('./classes/Gui.php');		$server_info = $misc->getServerInfo();		if (!isset($_POST['formName'])) $_POST['formName'] = '';		if(!isset($_POST['formIsTemplate'])) $_POST['formIsTemplate'] = false;		if (!isset($_POST['formTemplate'])) $_POST['formTemplate'] = '';		if (!isset($_POST['formLexize'])) $_POST['formLexize'] = '';		if (!isset($_POST['formInit'])) $_POST['formInit'] = '';		if (!isset($_POST['formOption'])) $_POST['formOption'] = '';		if (!isset($_POST['formComment'])) $_POST['formComment'] = '';		// Fetch all FTS dictionaries from the database		$ftstpls = $data->getFtsDictionaryTemplates();		$misc->printTrail('schema');		// TODO: create doc links		$misc->printTitle($lang['strftscreatedict'], 'pg.ftsdict.create');		$misc->printMsg($msg);		echo "<form action=\"fulltext.php\" method=\"post\">\n";		echo "<table>\n";		echo "\t<tr>\n\t\t<th class=\"data left required\">{$lang['strname']}</th>\n";		echo "\t\t<td class=\"data1\"><input name=\"formName\" size=\"32\" maxlength=\"{$data->_maxNameLen}\" value=\"",			htmlspecialchars($_POST['formName']), "\" />&nbsp;",			"<input type=\"checkbox\" name=\"formIsTemplate\" id=\"formIsTemplate\"", $_POST['formIsTemplate'] ? ' checked="checked" ' : '', " />\n",			"<label for=\"formIsTemplate\">{$lang['strftscreatedicttemplate']}</label></td>\n\t</tr>\n";		// Template		echo "\t<tr>\n\t\t<th class=\"data left\">{$lang['strftstemplate']}</th>\n";		echo "\t\t<td class=\"data1\">";		$tpls = array();		$tplsel = '';		while (!$ftstpls->EOF) {			$data->fieldClean($ftstpls->fields['schema']);			$data->fieldClean($ftstpls->fields['name']);			$tplname = $ftstpls->fields['schema'] .'.'. $ftstpls->fields['name'];			$tpls[$tplname] = serialize(array(				'name' => $ftstpls->fields['name'],				'schema' => $ftstpls->fields['schema']			));			if ($_POST['formTemplate'] == $tpls[$tplname]) {				$tplsel = htmlspecialchars($tpls[$tplname]);			}			$ftstpls->moveNext();		}		echo GUI::printCombo($tpls, 'formTemplate', true, $tplsel, false);		echo "\n\t\t</td>\n\t</tr>\n";		// TODO: what about maxlengths?		// Lexize		echo "\t<tr>\n\t\t<th class=\"data left\">{$lang['strftslexize']}</th>\n";		echo "\t\t<td class=\"data1\"><input name=\"formLexize\" size=\"32\" maxlength=\"1000\" value=\"",			htmlspecialchars($_POST['formLexize']), "\" ", isset($_POST['formIsTemplate']) ? '' : ' disabled="disabled" ',			"/></td>\n\t</tr>\n";		// Init		echo "\t<tr>\n\t\t<th class=\"data left\">{$lang['strftsinit']}</th>\n";		echo "\t\t<td class=\"data1\"><input name=\"formInit\" size=\"32\" maxlength=\"1000\" value=\"",			htmlspecialchars($_POST['formInit']), "\"", @$_POST['formIsTemplate'] ? '' : ' disabled="disabled" ',			"/></td>\n\t</tr>\n";		// Option		echo "\t<tr>\n\t\t<th class=\"data left\">{$lang['strftsoptionsvalues']}</th>\n";		echo "\t\t<td class=\"data1\"><input name=\"formOption\" size=\"32\" maxlength=\"1000\" value=\"",			htmlspecialchars($_POST['formOption']), "\" /></td>\n\t</tr>\n";		// Comment		echo "\t<tr>\n\t\t<th class=\"data left\">{$lang['strcomment']}</th>\n";		echo "\t\t<td class=\"data1\"><textarea name=\"formComment\" rows=\"3\" cols=\"32\">",			htmlspecialchars($_POST['formComment']), "</textarea></td>\n\t</tr>\n";		echo "</table>\n";		echo "<p>\n";		echo "<input type=\"hidden\" name=\"action\" value=\"createdict\" />\n";		echo "<input type=\"hidden\" name=\"database\" value=\"", htmlspecialchars($_REQUEST['database']), "\" />\n";		echo $misc->form;		echo "<input type=\"submit\" name=\"create\" value=\"{$lang['strcreate']}\" />\n";		echo "<input type=\"submit\" name=\"cancel\" value=\"{$lang['strcancel']}\" />\n";		echo "</p>\n";		echo "</form>\n",			"<script type=\"text/javascript\">								function templateOpts() {					isTpl = document.getElementsByName('formIsTemplate')[0].checked;					document.getElementsByName('formTemplate')[0].disabled = isTpl;					document.getElementsByName('formOption')[0].disabled = isTpl;					document.getElementsByName('formLexize')[0].disabled = !isTpl;					document.getElementsByName('formInit')[0].disabled = !isTpl;				}								document.getElementsByName('formIsTemplate')[0].onchange = templateOpts;				templateOpts();			</script>\n";	}	/**	 * Actually creates the new FTS dictionary in the database	 */	function doSaveCreateDict() {		global $data, $lang, $_reload_browser;		// Check that they've given a name		if ($_POST['formName'] == '') doCreateDict($lang['strftsdictneedsname']);		else {			if(!isset($_POST['formIsTemplate'])) $_POST['formIsTemplate'] = false;			if(isset($_POST['formTemplate']))				$formTemplate = unserialize($_POST['formTemplate']);			else				$formTemplate = '';			if(!isset($_POST['formLexize'])) $_POST['formLexize'] = '';			if(!isset($_POST['formInit'])) $_POST['formInit'] = '';			if(!isset($_POST['formOption'])) $_POST['formOption'] = '';						$status = $data->createFtsDictionary($_POST['formName'], $_POST['formIsTemplate'],				$formTemplate, $_POST['formLexize'],				$_POST['formInit'], $_POST['formOption'], $_POST['formComment']			);						if ($status == 0) {				$_reload_browser = true;				doViewDicts($lang['strftsdictcreated']);			}			else				doCreateDict($lang['strftsdictcreatedbad']);		}	}	/**	 * Display a form to permit editing FTS dictionary properies.	 */	function doAlterDict($msg = '') {		global $data, $misc, $lang;		$misc->printTrail('ftscfg'); // TODO: change to smth related to dictionary		$misc->printTitle($lang['stralter'], 'pg.ftsdict.alter');		$misc->printMsg($msg);		$ftsdict = $data->getFtsDictionaryByName($_REQUEST['ftsdict']);		if ($ftsdict->recordCount() > 0) {			if (!isset($_POST['formComment'])) $_POST['formComment'] = $ftsdict->fields['comment'];			if (!isset($_POST['ftsdict'])) $_POST['ftsdict'] = $_REQUEST['ftsdict'];			if (!isset($_POST['formName'])) $_POST['formName'] = $_REQUEST['ftsdict'];			echo "<form action=\"fulltext.php\" method=\"post\">\n";			echo "<table>\n";			echo "\t<tr>\n";			echo "\t\t<th class=\"data left required\">{$lang['strname']}</th>\n";			echo "\t\t<td class=\"data1\">";			echo "\t\t\t<input name=\"formName\" size=\"32\" maxlength=\"{$data->_maxNameLen}\" value=\"",				htmlspecialchars($_POST['formName']), "\" />\n";			echo "\t\t</td>\n";			echo "\t</tr>\n";			// Comment			echo "\t<tr>\n";			echo "\t\t<th class=\"data\">{$lang['strcomment']}</th>\n";			echo "\t\t<td class=\"data1\"><textarea cols=\"32\" rows=\"3\"name=\"formComment\">", htmlspecialchars($_POST['formComment']), "</textarea></td>\n";			echo "\t</tr>\n";			echo "</table>\n";			echo "<p><input type=\"hidden\" name=\"action\" value=\"alterdict\" />\n";			echo "<input type=\"hidden\" name=\"ftsdict\" value=\"", htmlspecialchars($_POST['ftsdict']), "\" />\n";			echo "<input type=\"hidden\" name=\"prev_action\" value=\"viewdicts\" /></p>\n";			echo $misc->form;			echo "<input type=\"submit\" name=\"alter\" value=\"{$lang['stralter']}\" />\n";			echo "<input type=\"submit\" name=\"cancel\" value=\"{$lang['strcancel']}\" /></p>\n";			echo "</form>\n";		} else {			echo "<p>{$lang['strnodata']}</p>\n";		}	}	/**	 * Save the form submission containing changes to a FTS dictionary	 */	function doSaveAlterDict() {		global $data, $misc, $lang;		$status = $data->updateFtsDictionary($_POST['ftsdict'], $_POST['formComment'], $_POST['formName']);		if ($status == 0)			doViewDicts($lang['strftsdictaltered']);		else			doAlterDict($lang['strftsdictalteredbad']);	}	/**	 * Show confirmation of drop and perform actual drop of FTS mapping	 */	function doDropMapping($confirm) {		global $data, $misc;		global $lang, $_reload_drop_database;		if (empty($_REQUEST['mapping']) && empty($_REQUEST['ma'])) {			doDefault($lang['strftsspecifymappingtodrop']);			return;		}		if (empty($_REQUEST['ftscfg'])) {			doDefault($lang['strftsspecifyconfigtoalter']);			return;		}		if ($confirm) {			$misc->printTrail('ftscfg'); // TODO: proper breadcrumbs			$misc->printTitle($lang['strdrop'], 'pg.ftscfg.alter');			echo "<form action=\"fulltext.php\" method=\"post\">\n";			// Case of multiaction drop			if (isset($_REQUEST['ma'])) {				foreach($_REQUEST['ma'] as $v) {					$a = unserialize(htmlspecialchars_decode($v, ENT_QUOTES));					echo "<p>", sprintf($lang['strconfdropftsmapping'], $misc->printVal($a['mapping']), $misc->printVal($_REQUEST['ftscfg'])), "</p>\n";					printf('<input type="hidden" name="mapping[]" value="%s" />', htmlspecialchars($a['mapping']));				}			} else {				echo "<p>", sprintf($lang['strconfdropftsmapping'], $misc->printVal($_REQUEST['mapping']), $misc->printVal($_REQUEST['ftscfg'])), "</p>\n";				echo "<input type=\"hidden\" name=\"mapping\" value=\"", htmlspecialchars($_REQUEST['mapping']), "\" />\n";			}			echo "<input type=\"hidden\" name=\"ftscfg\" value=\"{$_REQUEST['ftscfg']}\" />\n";			echo "<input type=\"hidden\" name=\"action\" value=\"dropmapping\" />\n";            echo "<input type=\"hidden\" name=\"prev_action\" value=\"viewconfig\" /></p>\n";            			echo $misc->form;			echo "<input type=\"submit\" name=\"drop\" value=\"{$lang['strdrop']}\" />\n";			echo "<input type=\"submit\" name=\"cancel\" value=\"{$lang['strcancel']}\" />\n";			echo "</form>\n";		} else {			// Case of multiaction drop			if (is_array($_REQUEST['mapping'])) {				$status = $data->changeFtsMapping($_REQUEST['ftscfg'], $_REQUEST['mapping'], 'drop');				if ($status != 0) {					doViewConfig($_REQUEST['ftscfg'], $lang['strftsmappingdroppedbad']);					return;				}				doViewConfig($_REQUEST['ftscfg'], $lang['strftsmappingdropped']);			} else {				$status = $data->changeFtsMapping($_REQUEST['ftscfg'], array($_REQUEST['mapping']), 'drop');				if ($status == 0) {					doViewConfig($_REQUEST['ftscfg'], $lang['strftsmappingdropped']);				} else {					doViewConfig($_REQUEST['ftscfg'], $lang['strftsmappingdroppedbad']);				}			}		}	}	function doAlterMapping($msg = '') {		global $data, $misc, $lang;		$misc->printTrail('ftscfg');		$misc->printTitle($lang['stralter'], 'pg.ftscfg.alter');		$misc->printMsg($msg);		$ftsdicts = $data->getFtsDictionaries();		if ($ftsdicts->recordCount() > 0) {			if (!isset($_POST['formMapping'])) $_POST['formMapping'] = @$_REQUEST['mapping'];			if (!isset($_POST['formDictionary'])) $_POST['formDictionary'] = '';			if (!isset($_POST['ftscfg'])) $_POST['ftscfg'] = $_REQUEST['ftscfg'];			echo "<form action=\"fulltext.php\" method=\"post\">\n";			echo "<table>\n";			echo "\t<tr>\n";			echo "\t\t<th class=\"data left required\">{$lang['strftsmapping']}</th>\n";			echo "\t\t<td class=\"data1\">";			// Case of multiaction drop			if (isset($_REQUEST['ma'])) {				$ma_mappings = array();				$ma_mappings_names = array();				foreach($_REQUEST['ma'] as $v) {					$a = unserialize(htmlspecialchars_decode($v, ENT_QUOTES));					printf('<input type="hidden" name="formMapping[]" value="%s" />', htmlspecialchars($a['mapping']));					$ma_mappings[] = $data->getFtsMappingByName($_POST['ftscfg'], $a['mapping']);					$ma_mappings_names[] = $a['mapping'];				}				echo implode(", ", $ma_mappings_names);			} else {				$mapping = $data->getFtsMappingByName($_POST['ftscfg'], $_POST['formMapping']);				echo $mapping->fields['name'];				echo "<input type=\"hidden\" name=\"formMapping\" value=\"", htmlspecialchars($_POST['formMapping']), "\" />\n";			}			echo "\t\t</td>\n";			echo "\t</tr>\n";			// Dictionary			echo "\t<tr>\n";			echo "\t\t<th class=\"data left required\">{$lang['strftsdict']}</th>\n";			echo "\t\t<td class=\"data1\">";			echo "\t\t\t<select name=\"formDictionary\">\n";			while (!$ftsdicts->EOF) {				$ftsdict = htmlspecialchars($ftsdicts->fields['name']);				echo "\t\t\t\t<option value=\"{$ftsdict}\"",					($ftsdict == $_POST['formDictionary'] || $ftsdict == @$mapping->fields['dictionaries'] || $ftsdict == @$ma_mappings[0]->fields['dictionaries']) ? ' selected="selected"' : '', ">{$ftsdict}</option>\n";				$ftsdicts->moveNext();			}			echo "\t\t</td>\n";			echo "\t</tr>\n";			echo "</table>\n";			echo "<p><input type=\"hidden\" name=\"action\" value=\"altermapping\" />\n";			echo "<input type=\"hidden\" name=\"ftscfg\" value=\"", htmlspecialchars($_POST['ftscfg']), "\" />\n";            echo "<input type=\"hidden\" name=\"prev_action\" value=\"viewconfig\" /></p>\n";            			echo $misc->form;			echo "<input type=\"submit\" name=\"alter\" value=\"{$lang['stralter']}\" />\n";			echo "<input type=\"submit\" name=\"cancel\" value=\"{$lang['strcancel']}\" /></p>\n";			echo "</form>\n";		} else {			echo "<p>{$lang['strftsnodictionaries']}</p>\n";		}	}	/**	 * Save the form submission containing changes to a FTS mapping	 */	function doSaveAlterMapping() {		global $data, $misc, $lang;		$mappingArray = (is_array($_POST['formMapping']) ? $_POST['formMapping'] : array($_POST['formMapping']));		$status = $data->changeFtsMapping($_POST['ftscfg'], $mappingArray, 'alter', $_POST['formDictionary']);		if ($status == 0)			doViewConfig($_POST['ftscfg'], $lang['strftsmappingaltered']);		else			doAlterMapping($lang['strftsmappingalteredbad']);	}	/**	 * Show the form to enter parameters of a new FTS mapping	 */	function doAddMapping($msg = '') {		global $data, $misc, $lang;		$misc->printTrail('ftscfg');		$misc->printTitle($lang['stralter'], 'pg.ftscfg.alter');		$misc->printMsg($msg);		$ftsdicts = $data->getFtsDictionaries();		if ($ftsdicts->recordCount() > 0) {			if (!isset($_POST['formMapping'])) $_POST['formMapping'] = '';			if (!isset($_POST['formDictionary'])) $_POST['formDictionary'] = '';			if (!isset($_POST['ftscfg'])) $_POST['ftscfg'] = $_REQUEST['ftscfg'];			$mappings = $data->getFtsMappings($_POST['ftscfg']);			echo "<form action=\"fulltext.php\" method=\"post\">\n";			echo "<table>\n";			echo "\t<tr>\n";			echo "\t\t<th class=\"data left required\">{$lang['strftsmapping']}</th>\n";			echo "\t\t<td class=\"data1\">";			echo "\t\t\t<select name=\"formMapping\">\n";			while (!$mappings->EOF) {				$mapping = htmlspecialchars($mappings->fields['name']);				$mapping_desc = htmlspecialchars($mappings->fields['description']);				echo "\t\t\t\t<option value=\"{$mapping}\"",					$mapping == $_POST['formMapping'] ? ' selected="selected"' : '', ">{$mapping}", $mapping_desc ? " - {$mapping_desc}" : "", "</option>\n";				$mappings->moveNext();			}			echo "\t\t</td>\n";			echo "\t</tr>\n";			// Dictionary			echo "\t<tr>\n";			echo "\t\t<th class=\"data left required\">{$lang['strftsdict']}</th>\n";			echo "\t\t<td class=\"data1\">";			echo "\t\t\t<select name=\"formDictionary\">\n";			while (!$ftsdicts->EOF) {				$ftsdict = htmlspecialchars($ftsdicts->fields['name']);				echo "\t\t\t\t<option value=\"{$ftsdict}\"",					$ftsdict == $_POST['formDictionary'] ? ' selected="selected"' : '', ">{$ftsdict}</option>\n";				$ftsdicts->moveNext();			}			echo "\t\t</td>\n";			echo "\t</tr>\n";			echo "</table>\n";			echo "<p><input type=\"hidden\" name=\"action\" value=\"addmapping\" />\n";			echo "<input type=\"hidden\" name=\"ftscfg\" value=\"", htmlspecialchars($_POST['ftscfg']), "\" />\n";			echo "<input type=\"hidden\" name=\"prev_action\" value=\"viewconfig\" /></p>\n";			echo $misc->form;			echo "<input type=\"submit\" name=\"add\" value=\"{$lang['stradd']}\" />\n";			echo "<input type=\"submit\" name=\"cancel\" value=\"{$lang['strcancel']}\" /></p>\n";			echo "</form>\n";		} else {			echo "<p>{$lang['strftsnodictionaries']}</p>\n";		}	}	/**	 * Save the form submission containing parameters of a new FTS mapping	 */	function doSaveAddMapping() {		global $data, $misc, $lang;		$mappingArray = (is_array($_POST['formMapping']) ? $_POST['formMapping'] : array($_POST['formMapping']));		$status = $data->changeFtsMapping($_POST['ftscfg'], $mappingArray, 'add', $_POST['formDictionary']);		if ($status == 0)			doViewConfig($_POST['ftscfg'], $lang['strftsmappingadded']);		else			doAddMapping($lang['strftsmappingaddedbad']);	}	/**	 * Generate XML for the browser tree.	 */	function doTree() {		global $misc, $data, $lang, $slony;		$tabs = $misc->getNavTabs('fulltext');		$items = $misc->adjustTabsForTree($tabs);		$reqvars = $misc->getRequestVars('ftscfg');		$attrs = array(			'text'   => noEscape(field('title')),			'icon'   => field('icon'),			'action' => url('fulltext.php',				$reqvars,				field('urlvars')			),			'branch' => url('fulltext.php',				$reqvars,				array(					'action'  => 'subtree',					'what'  => field('icon') // IZ: yeah, it's ugly, but I do not want to change navigation tabs arrays				)			),		);		$misc->printTreeXML($items, $attrs);		exit;	}	function doSubTree($what) {		global $misc, $data, $lang;		switch($what) {			case 'FtsCfg':				$items = $data->getFtsConfigurations(false);				$urlvars = array('action' => 'viewconfig', 'ftscfg' => field('name'));				break;			case 'FtsDict':				$items = $data->getFtsDictionaries(false);				$urlvars = array('action' => 'viewdicts');				break;			case 'FtsParser':				$items = $data->getFtsParsers(false);				$urlvars = array('action' => 'viewparsers');				break;			default:				exit;		}		$reqvars = $misc->getRequestVars('ftscfg');		$attrs = array(			'text'   => noEscape(field('name')),			'icon'   => $what,			'toolTip'=> field('comment'),			'action' => url('fulltext.php',				$reqvars,				$urlvars			),			'branch' => ifempty(field('branch'),				'',				url('fulltext.php',					$reqvars,					array(						'action'  => 'subtree',						'ftscfg'  => field('name')					)				)			),		);		$misc->printTreeXML($items, $attrs);		exit;	}	if ($action == 'tree') doTree();	if ($action == 'subtree') doSubTree($_REQUEST['what']);	$misc->printHeader($lang['strschemas']);	$misc->printBody();	if (isset($_POST['cancel'])) {		if (isset($_POST['prev_action'])) {			$action = $_POST['prev_action'];		} else {			$action = '';		}	}	switch ($action) {		case 'createconfig':			if (isset($_POST['create'])) doSaveCreateConfig();			else doCreateConfig();			break;		case 'alterconfig':			if (isset($_POST['alter'])) doSaveAlterConfig();			else doAlterConfig();			break;		case 'dropconfig':			if (isset($_POST['drop'])) doDropConfig(false);			else doDropConfig(true);			break;		case 'viewconfig':			doViewConfig($_REQUEST['ftscfg']);			break;		case 'viewparsers':			doViewParsers();			break;		case 'viewdicts':			doViewDicts();			break;		case 'createdict':			if (isset($_POST['create'])) doSaveCreateDict();			else doCreateDict();			break;		case 'alterdict':			if (isset($_POST['alter'])) doSaveAlterDict();			else doAlterDict();			break;		case 'dropdict':			if (isset($_POST['drop'])) doDropDict(false);			else doDropDict(true);			break;		case 'dropmapping':			if (isset($_POST['drop'])) doDropMapping(false);			else doDropMapping(true);			break;		case 'altermapping':			if (isset($_POST['alter'])) doSaveAlterMapping();			else doAlterMapping();			break;		case 'addmapping':			if (isset($_POST['add'])) doSaveAddMapping();			else doAddMapping();			break;		default:			doDefault();			break;	}	$misc->printFooter();?>
<?php	/**	 * List indexes on a table	 *	 * $Id: indexes.php,v 1.46 2008/01/08 22:50:29 xzilla Exp $	 */	// Include application functions	include_once('./libraries/lib.inc.php');	include_once('./classes/class.select.php');			$action = (isset($_REQUEST['action'])) ? $_REQUEST['action'] : '';	/**	 * Show confirmation of cluster index and perform actual cluster	 */	function doClusterIndex($confirm) {		global $data, $misc, $action;		global $lang;		if ($confirm) {			// Default analyze to on			$_REQUEST['analyze'] = true;						$misc->printTrail('index');			$misc->printTitle($lang['strclusterindex'],'pg.index.cluster');			echo "<p>", sprintf($lang['strconfcluster'], $misc->printVal($_REQUEST['index'])), "</p>\n";			echo "<form action=\"indexes.php\" method=\"post\">\n";			echo "<p><input type=\"checkbox\" id=\"analyze\" name=\"analyze\"", (isset($_REQUEST['analyze']) ? ' checked="checked"' : ''), " /><label for=\"analyze\">{$lang['stranalyze']}</label></p>\n";			echo "<input type=\"hidden\" name=\"action\" value=\"cluster_index\" />\n";			echo "<input type=\"hidden\" name=\"table\" value=\"", htmlspecialchars($_REQUEST['table']), "\" />\n";			echo "<input type=\"hidden\" name=\"index\" value=\"", htmlspecialchars($_REQUEST['index']), "\" />\n";			echo $misc->form;			echo "<input type=\"submit\" name=\"cluster\" value=\"{$lang['strclusterindex']}\" />\n";			echo "<input type=\"submit\" name=\"cancel\" value=\"{$lang['strcancel']}\" />\n";			echo "</form>\n";		}		else {			$status = $data->clusterIndex($_POST['table'], $_POST['index']);			if ($status == 0)				if (isset($_POST['analyze'])){					$status = $data->analyzeDB($_POST['table']);					if ($status == 0)						doDefault($lang['strclusteredgood'] . ' ' . $lang['stranalyzegood']);					else						doDefault($lang['stranalyzebad']);				} else					doDefault($lang['strclusteredgood']);			else				doDefault($lang['strclusteredbad']);		}	}	function doReindex() {		global $data, $lang;		$status = $data->reindex('INDEX', $_REQUEST['index']);		if ($status == 0)			doDefault($lang['strreindexgood']);		else			doDefault($lang['strreindexbad']);	}	/**	 * Displays a screen where they can enter a new index	 */	function doCreateIndex($msg = '') {		global $data, $misc;		global $lang;		if (!isset($_POST['formIndexName'])) $_POST['formIndexName'] = '';		if (!isset($_POST['formIndexType'])) $_POST['formIndexType'] = null;		if (!isset($_POST['formCols'])) $_POST['formCols'] = '';		if (!isset($_POST['formWhere'])) $_POST['formWhere'] = '';		if (!isset($_POST['formSpc'])) $_POST['formSpc'] = '';		$attrs = $data->getTableAttributes($_REQUEST['table']);		// Fetch all tablespaces from the database		if ($data->hasTablespaces()) $tablespaces = $data->getTablespaces();				$misc->printTrail('table');		$misc->printTitle($lang['strcreateindex'],'pg.index.create');		$misc->printMsg($msg);		$selColumns = new XHTML_select("TableColumnList",true,10);		$selColumns->set_style("width: 10em;");		if ($attrs->recordCount() > 0) {			while (!$attrs->EOF) {				$selColumns->add(new XHTML_Option($attrs->fields['attname']));				$attrs->moveNext();			}		}		$selIndex = new XHTML_select("IndexColumnList[]", true, 10);		$selIndex->set_style("width: 10em;");		$selIndex->set_attribute("id", "IndexColumnList");		$buttonAdd    = new XHTML_Button("add", ">>");		$buttonAdd->set_attribute("onclick", "buttonPressed(this);");		$buttonAdd->set_attribute("type", "button");		$buttonRemove = new XHTML_Button("remove", "<<");		$buttonRemove->set_attribute("onclick", "buttonPressed(this);");				$buttonRemove->set_attribute("type", "button");		echo "<form onsubmit=\"doSelectAll();\" name=\"formIndex\" action=\"indexes.php\" method=\"post\">\n";		echo "<table>\n";		echo "<tr><th class=\"data required\" colspan=\"3\">{$lang['strindexname']}</th></tr>";		echo "<tr>";		echo "<td class=\"data1\" colspan=\"3\"><input type=\"text\" name=\"formIndexName\" size=\"32\" maxlength=\"{$data->_maxNameLen}\" value=\"", 			htmlspecialchars($_POST['formIndexName']), "\" /></td></tr>";		echo "<tr><th class=\"data\">{$lang['strtablecolumnlist']}</th><th class=\"data\">&nbsp;</th>";		echo "<th class=\"data required\">{$lang['strindexcolumnlist']}</th></tr>\n";		echo "<tr><td class=\"data1\">" . $selColumns->fetch() . "</td>\n";		echo "<td class=\"data1\">" . $buttonRemove->fetch() . $buttonAdd->fetch() . "</td>";		echo "<td class=\"data1\">" . $selIndex->fetch() . "</td></tr>\n";		echo "</table>\n";		echo "<table> \n";		echo "<tr>";		echo "<th class=\"data left required\" scope=\"row\">{$lang['strindextype']}</th>";		echo "<td class=\"data1\"><select name=\"formIndexType\">";		foreach ($data->typIndexes as $v) {			echo "<option value=\"", htmlspecialchars($v), "\"",				($v == $_POST['formIndexType']) ? ' selected="selected"' : '', ">", htmlspecialchars($v), "</option>\n";		}		echo "</select></td></tr>\n";						echo "<tr>";		echo "<th class=\"data left\" scope=\"row\"><label for=\"formUnique\">{$lang['strunique']}</label></th>";		echo "<td class=\"data1\"><input type=\"checkbox\" id=\"formUnique\" name=\"formUnique\"", (isset($_POST['formUnique']) ? 'checked="checked"' : ''), " /></td>";		echo "</tr>";		echo "<tr>";		echo "<th class=\"data left\" scope=\"row\">{$lang['strwhere']}</th>";		echo "<td class=\"data1\">(<input name=\"formWhere\" size=\"32\" maxlength=\"{$data->_maxNameLen}\" value=\"", 			htmlspecialchars($_POST['formWhere']), "\" />)</td>";		echo "</tr>";				// Tablespace (if there are any)		if ($data->hasTablespaces() && $tablespaces->recordCount() > 0) {			echo "\t<tr>\n\t\t<th class=\"data left\">{$lang['strtablespace']}</th>\n";			echo "\t\t<td class=\"data1\">\n\t\t\t<select name=\"formSpc\">\n";			// Always offer the default (empty) option			echo "\t\t\t\t<option value=\"\"",				($_POST['formSpc'] == '') ? ' selected="selected"' : '', "></option>\n";			// Display all other tablespaces			while (!$tablespaces->EOF) {				$spcname = htmlspecialchars($tablespaces->fields['spcname']);				echo "\t\t\t\t<option value=\"{$spcname}\"",					($spcname == $_POST['formSpc']) ? ' selected="selected"' : '', ">{$spcname}</option>\n";				$tablespaces->moveNext();			}			echo "\t\t\t</select>\n\t\t</td>\n\t</tr>\n";		}		if ($data->hasConcurrentIndexBuild()) {			echo "<tr>";			echo "<th class=\"data left\" scope=\"row\"><label for=\"formConcur\">{$lang['strconcurrently']}</label></th>";			echo "<td class=\"data1\"><input type=\"checkbox\" id=\"formConcur\" name=\"formConcur\"", (isset($_POST['formConcur']) ? 'checked="checked"' : ''), " /></td>";			echo "</tr>";		}			echo "</table>";		echo "<p><input type=\"hidden\" name=\"action\" value=\"save_create_index\" />\n";		echo $misc->form;		echo "<input type=\"hidden\" name=\"table\" value=\"", htmlspecialchars($_REQUEST['table']), "\" />\n";		echo "<input type=\"submit\" value=\"{$lang['strcreate']}\" />\n";		echo "<input type=\"submit\" name=\"cancel\" value=\"{$lang['strcancel']}\" /></p>\n";		echo "</form>\n";	}	/**	 * Actually creates the new index in the database	 * @@ Note: this function can't handle columns with commas in them	 */	function doSaveCreateIndex() {		global $data;		global $lang;				// Handle databases that don't have partial indexes		if (!isset($_POST['formWhere'])) $_POST['formWhere'] = '';		// Default tablespace to null if it isn't set		if (!isset($_POST['formSpc'])) $_POST['formSpc'] = null;				// Check that they've given a name and at least one column		if ($_POST['formIndexName'] == '') doCreateIndex($lang['strindexneedsname']);		elseif (!isset($_POST['IndexColumnList']) || $_POST['IndexColumnList'] == '') doCreateIndex($lang['strindexneedscols']);		else {			$status = $data->createIndex($_POST['formIndexName'], $_POST['table'], $_POST['IndexColumnList'], 				$_POST['formIndexType'], isset($_POST['formUnique']), $_POST['formWhere'], $_POST['formSpc'], 				isset($_POST['formConcur']));			if ($status == 0)				doDefault($lang['strindexcreated']);			else				doCreateIndex($lang['strindexcreatedbad']);		}	}	/**	 * Show confirmation of drop index and perform actual drop	 */	function doDropIndex($confirm) {		global $data, $misc;		global $lang;		if ($confirm) {			$misc->printTrail('index');			$misc->printTitle($lang['strdrop'],'pg.index.drop');			echo "<p>", sprintf($lang['strconfdropindex'], $misc->printVal($_REQUEST['index'])), "</p>\n";			echo "<form action=\"indexes.php\" method=\"post\">\n";			echo "<input type=\"hidden\" name=\"action\" value=\"drop_index\" />\n";			echo "<input type=\"hidden\" name=\"table\" value=\"", htmlspecialchars($_REQUEST['table']), "\" />\n";			echo "<input type=\"hidden\" name=\"index\" value=\"", htmlspecialchars($_REQUEST['index']), "\" />\n";			echo $misc->form;			echo "<p><input type=\"checkbox\" id=\"cascade\" name=\"cascade\" /> <label for=\"cascade\">{$lang['strcascade']}</label></p>\n";			echo "<input type=\"submit\" name=\"drop\" value=\"{$lang['strdrop']}\" />\n";			echo "<input type=\"submit\" name=\"cancel\" value=\"{$lang['strcancel']}\" />\n";			echo "</form>\n";		}		else {			$status = $data->dropIndex($_POST['index'], isset($_POST['cascade']));			if ($status == 0)				doDefault($lang['strindexdropped']);			else				doDefault($lang['strindexdroppedbad']);		}	}	function doDefault($msg = '') {		global $data, $misc;		global $lang;				function indPre(&$rowdata, $actions) {			global $data, $lang;						if ($data->phpBool($rowdata->fields['indisprimary'])) {				$rowdata->fields['+constraints'] = $lang['strprimarykey'];				$actions['drop']['disable'] = true;			}			elseif ($data->phpBool($rowdata->fields['indisunique'])) {				$rowdata->fields['+constraints'] = $lang['struniquekey'];				$actions['drop']['disable'] = true;			}			else				$rowdata->fields['+constraints'] = '';						return $actions;		}				$misc->printTrail('table');		$misc->printTabs('table','indexes');		$misc->printMsg($msg);		$indexes = $data->getIndexes($_REQUEST['table']);				$columns = array(			'index' => array(				'title' => $lang['strname'],				'field' => field('indname'),			),			'definition' => array(				'title' => $lang['strdefinition'],				'field' => field('inddef'),			),			'constraints' => array(				'title' => $lang['strconstraints'],				'field' => field('+constraints'),				'type'  => 'verbatim',				'params'=> array('align' => 'center'),			),			'clustered' => array(				'title' => $lang['strclustered'],				'field' => field('indisclustered'),				'type'  => 'yesno',			),			'actions' => array(				'title' => $lang['stractions'],			),			'comment' => array(				'title' => $lang['strcomment'],				'field' => field('idxcomment'),			),		);				$actions = array(			'cluster' => array(				'title' => $lang['strclusterindex'],				'url'   => "indexes.php?action=confirm_cluster_index&amp;{$misc->href}&amp;table=".urlencode($_REQUEST['table'])."&amp;",				'vars'  => array('index' => 'indname'),			),			'reindex' => array(				'title' => $lang['strreindex'],				'url'   => "indexes.php?action=reindex&amp;{$misc->href}&amp;table=".urlencode($_REQUEST['table'])."&amp;",				'vars'  => array('index' => 'indname'),			),			'drop' => array(				'title' => $lang['strdrop'],				'url'   => "indexes.php?action=confirm_drop_index&amp;{$misc->href}&amp;table=".urlencode($_REQUEST['table'])."&amp;",				'vars'  => array('index' => 'indname'),			),		);				$misc->printTable($indexes, $columns, $actions, $lang['strnoindexes'], 'indPre');				echo "<p><a class=\"navlink\" href=\"indexes.php?action=create_index&amp;{$misc->href}&amp;table=", 			urlencode($_REQUEST['table']), "\">{$lang['strcreateindex']}</a></p>\n";			}	function doTree() {		global $misc, $data;		$indexes = $data->getIndexes($_REQUEST['table']);		$reqvars = $misc->getRequestVars('table');		function getIcon($f) {			if ($f['indisprimary'] == 't')				return 'PrimaryKey';			if ($f['indisunique'] == 't')				return 'UniqueConstraint';			return 'Index';		}		$attrs = array(			'text'   => field('indname'),			'icon'   => callback('getIcon'),		);		$misc->printTreeXML($indexes, $attrs);		exit;	}	if ($action == 'tree') doTree();	$misc->printHeader($lang['strindexes'], "<script src=\"indexes.js\" type=\"text/javascript\"></script>");	if ($action == 'create_index' || $action == 'save_create_index')		echo "<body onload=\"init();\">";	else		$misc->printBody();	switch ($action) {		case 'cluster_index':			if (isset($_POST['cluster'])) doClusterIndex(false);			else doDefault();			break;		case 'confirm_cluster_index':			doClusterIndex(true);			break;		case 'reindex':			doReindex();			break;		case 'save_create_index':			if (isset($_POST['cancel'])) doDefault();			else doSaveCreateIndex();			break;		case 'create_index':			doCreateIndex();			break;		case 'drop_index':			if (isset($_POST['drop'])) doDropIndex(false);			else doDefault();			break;		case 'confirm_drop_index':			doDropIndex(true);			break;		default:			doDefault();			break;	}	$misc->printFooter();?>
<?php	/**	 * Alternative SQL editing window	 *	 * $Id: history.php,v 1.3 2008/01/10 19:37:07 xzilla Exp $	 */	// Include application functions	include_once('./libraries/lib.inc.php');	$action = (isset($_REQUEST['action'])) ? $_REQUEST['action'] : '';	function doDefault() {		global $misc, $lang;		$onchange = "onchange=\"location.href='history.php?server=' + encodeURI(server.options[server.selectedIndex].value) + '&amp;database=' + encodeURI(database.options[database.selectedIndex].value) + '&amp;'\"";		$misc->printHeader($lang['strhistory']);				// Bring to the front always		echo "<body onload=\"window.focus();\">\n";			echo "<form action=\"history.php\" method=\"post\">\n";		$misc->printConnection($onchange);		echo "</form><br />";			if (!isset($_REQUEST['database'])) {			echo "<p>{$lang['strnodatabaseselected']}</p>\n";			return;		}					if (isset($_SESSION['history'][$_REQUEST['server']][$_REQUEST['database']])) {			include_once('classes/ArrayRecordSet.php');						   			$history = new ArrayRecordSet($_SESSION['history'][$_REQUEST['server']][$_REQUEST['database']]);						$columns = array(				'query' => array(					'title' => $lang['strsql'],					'field' => field('query'),				),				'paginate' => array(					'title' => $lang['strpaginate'],					'field' => field('paginate'),					'type' => 'yesno',				),				'actions' => array(					'title' => $lang['stractions'],				),			);			$actions = array(				'run' => array(					'title' => $lang['strexecute'],					'url'   => "sql.php?{$misc->href}&amp;nohistory=t&amp;",					'vars'  => array('query' => 'query', 'paginate' => 'paginate'),					'target' => 'detail',				),				'remove' => array(					'title' => $lang['strdelete'],					'url'   => "history.php?{$misc->href}&amp;action=confdelhistory&amp;",					'vars'  => array('queryid' => 'queryid'),				),			);			$misc->printTable($history, $columns, $actions, $lang['strnohistory']);		}		else echo "<p>{$lang['strnohistory']}</p>\n";		echo "<ul class=\"navlink\">\n";		if (isset($_SESSION['history'][$_REQUEST['server']][$_REQUEST['database']]) 				&& count($_SESSION['history'][$_REQUEST['server']][$_REQUEST['database']]))			echo "\t<li><a href=\"history.php?action=confclearhistory&amp;{$misc->href}\">{$lang['strclearhistory']}</a></li>\n";		echo "\t<li><a href=\"history.php?action=history&amp;{$misc->href}\">{$lang['strrefresh']}</a></li>\n</ul>\n";	}	function doDelHistory($qid, $confirm) {		global $misc, $lang;		if ($confirm) {			$misc->printHeader($lang['strhistory']);        		// Bring to the front always	        	echo "<body onload=\"window.focus();\">\n";						echo "<h3>{$lang['strdelhistory']}</h3>\n";			echo "<p>{$lang['strconfdelhistory']}</p>\n";			echo "<pre>", htmlentities($_SESSION['history'][$_REQUEST['server']][$_REQUEST['database']][$qid]['query']), "</pre>";			echo "<form action=\"history.php\" method=\"post\">\n";			echo "<input type=\"hidden\" name=\"action\" value=\"delhistory\" />\n";			echo "<input type=\"hidden\" name=\"queryid\" value=\"$qid\" />\n";			echo $misc->form;			echo "<input type=\"submit\" name=\"yes\" value=\"{$lang['stryes']}\" />\n";			echo "<input type=\"submit\" name=\"no\" value=\"{$lang['strno']}\" />\n";			echo "</form>\n";		}		else			unset($_SESSION['history'][$_REQUEST['server']][$_REQUEST['database']][$qid]);	}       	function doClearHistory($confirm) {		global $misc, $lang;		if ($confirm) {			$misc->printHeader($lang['strhistory']);        		// Bring to the front always	        	echo "<body onload=\"window.focus();\">\n";			echo "<h3>{$lang['strclearhistory']}</h3>\n";			echo "<p>{$lang['strconfclearhistory']}</p>\n";			echo "<form action=\"history.php\" method=\"post\">\n";			echo "<input type=\"hidden\" name=\"action\" value=\"clearhistory\" />\n";			echo $misc->form;			echo "<input type=\"submit\" name=\"yes\" value=\"{$lang['stryes']}\" />\n";			echo "<input type=\"submit\" name=\"no\" value=\"{$lang['strno']}\" />\n";			echo "</form>\n";		}		else			unset($_SESSION['history'][$_REQUEST['server']][$_REQUEST['database']]);	}																																									switch ($action) {		case 'confdelhistory':			doDelHistory($_REQUEST['queryid'], true);			break;		case 'delhistory':			if (isset($_POST['yes'])) doDelHistory($_REQUEST['queryid'], false);			doDefault();			break;		case 'confclearhistory':			doClearHistory(true);			break;		case 'clearhistory':			if (isset($_POST['yes'])) doClearHistory(false);			doDefault();			break;		default:			doDefault();	}																						// Set the name of the window	$misc->setWindowName('history');	$misc->printFooter();	?>
<?php	/**	 * Manage sequences in a database	 *	 * $Id: sequences.php,v 1.49 2007/12/15 22:21:54 ioguix Exp $	 */	// Include application functions	include_once('./libraries/lib.inc.php');	$action = (isset($_REQUEST['action'])) ? $_REQUEST['action'] : '';	if (!isset($msg)) $msg = '';	/**	 * Display list of all sequences in the database/schema	 */	function doDefault($msg = '')	{		global $data, $conf, $misc;		global $lang;		$misc->printTrail('schema');		$misc->printTabs('schema', 'sequences');		$misc->printMsg($msg);		// Get all sequences		$sequences = $data->getSequences();		$columns = array(			'sequence' => array(				'title' => $lang['strsequence'],				'field' => field('seqname'),				'url'   => "sequences.php?action=properties&amp;{$misc->href}&amp;",				'vars'  => array('sequence' => 'seqname'),			),			'owner' => array(				'title' => $lang['strowner'],				'field' => field('seqowner'),			),			'actions' => array(				'title' => $lang['stractions'],			),			'comment' => array(				'title' => $lang['strcomment'],				'field' => field('seqcomment'),			),		);		$actions = array(			'multiactions' => array(				'keycols' => array('sequence' => 'seqname'),				'url' => 'sequences.php',			),			'alter' => array(				'title' => $lang['stralter'],				'url'   => "sequences.php?action=confirm_alter&amp;{$misc->href}&amp;subject=sequence&amp;",				'vars'  => array('sequence' => 'seqname'),			),			'drop' => array(				'title' => $lang['strdrop'],				'url'   => "sequences.php?action=confirm_drop&amp;{$misc->href}&amp;",				'vars'  => array('sequence' => 'seqname'),				'multiaction' => 'confirm_drop',			),			'privileges' => array(				'title' => $lang['strprivileges'],				'url'   => "privileges.php?{$misc->href}&amp;subject=sequence&amp;",				'vars'  => array('sequence' => 'seqname'),			),		);		$misc->printTable($sequences, $columns, $actions, $lang['strnosequences']);		echo "<p><a class=\"navlink\" href=\"sequences.php?action=create&amp;{$misc->href}\">{$lang['strcreatesequence']}</a></p>\n";	}	/**	 * Generate XML for the browser tree.	 */	function doTree() {		global $misc, $data;		$sequences = $data->getSequences();		$reqvars = $misc->getRequestVars('sequence');		$attrs = array(			'text'   => field('seqname'),			'icon'   => 'Sequence',			'toolTip'=> field('seqcomment'),			'action' => url('sequences.php',							$reqvars,							array (								'action' => 'properties',								'sequence' => field('seqname')							)						)		);		$misc->printTreeXML($sequences, $attrs);		exit;	}	/**	 * Display the properties of a sequence	 */	function doProperties($msg = '') {		global $data, $misc;		global $lang;		$misc->printTrail('sequence');		$misc->printTitle($lang['strproperties'],'pg.sequence');		$misc->printMsg($msg);		// Fetch the sequence information		$sequence = $data->getSequence($_REQUEST['sequence']);		if (is_object($sequence) && $sequence->recordCount() > 0) {			$sequence->fields['is_cycled'] = $data->phpBool($sequence->fields['is_cycled']);			$sequence->fields['is_called'] = $data->phpBool($sequence->fields['is_called']);			// Show comment if any			if ($sequence->fields['seqcomment'] !== null)				echo "<p class=\"comment\">", $misc->printVal($sequence->fields['seqcomment']), "</p>\n";			echo "<table border=\"0\">";			echo "<tr><th class=\"data\">{$lang['strname']}</th>";			if ($data->hasAlterSequenceStart()) {				echo "<th class=\"data\">{$lang['strstartvalue']}</th>";			}			echo "<th class=\"data\">{$lang['strlastvalue']}</th>";			echo "<th class=\"data\">{$lang['strincrementby']}</th>";			echo "<th class=\"data\">{$lang['strmaxvalue']}</th>";			echo "<th class=\"data\">{$lang['strminvalue']}</th>";			echo "<th class=\"data\">{$lang['strcachevalue']}</th>";			echo "<th class=\"data\">{$lang['strlogcount']}</th>";			echo "<th class=\"data\">{$lang['strcancycle']}</th>";			echo "<th class=\"data\">{$lang['striscalled']}</th></tr>";			echo "<tr>";			echo "<td class=\"data1\">", $misc->printVal($sequence->fields['seqname']), "</td>";			if ($data->hasAlterSequenceStart()) {				echo "<td class=\"data1\">", $misc->printVal($sequence->fields['start_value']), "</td>";			}			echo "<td class=\"data1\">", $misc->printVal($sequence->fields['last_value']), "</td>";			echo "<td class=\"data1\">", $misc->printVal($sequence->fields['increment_by']), "</td>";			echo "<td class=\"data1\">", $misc->printVal($sequence->fields['max_value']), "</td>";			echo "<td class=\"data1\">", $misc->printVal($sequence->fields['min_value']), "</td>";			echo "<td class=\"data1\">", $misc->printVal($sequence->fields['cache_value']), "</td>";			echo "<td class=\"data1\">", $misc->printVal($sequence->fields['log_cnt']), "</td>";			echo "<td class=\"data1\">", ($sequence->fields['is_cycled'] ? $lang['stryes'] : $lang['strno']), "</td>";			echo "<td class=\"data1\">", ($sequence->fields['is_called'] ? $lang['stryes'] : $lang['strno']), "</td>";			echo "</tr>";			echo "</table>";			echo "<ul class=\"navlink\">\n";			echo "\t<li><a href=\"sequences.php?action=confirm_alter&amp;{$misc->href}&amp;sequence=", urlencode($sequence->fields['seqname']), "\">{$lang['stralter']}</a></li>\n";			echo "\t<li><a href=\"sequences.php?action=confirm_setval&amp;{$misc->href}&amp;sequence=", urlencode($sequence->fields['seqname']), "\">{$lang['strsetval']}</a></li>\n";			echo "\t<li><a href=\"sequences.php?action=nextval&amp;{$misc->href}&amp;sequence=", urlencode($sequence->fields['seqname']), "\">{$lang['strnextval']}</a></li>\n";			if ($data->hasAlterSequenceStart()) {				echo "\t<li><a href=\"sequences.php?action=restart&amp;{$misc->href}&amp;sequence=", urlencode($sequence->fields['seqname']), "\">{$lang['strrestart']}</a></li>\n";			}			echo "\t<li><a href=\"sequences.php?action=reset&amp;{$misc->href}&amp;sequence=", urlencode($sequence->fields['seqname']), "\">{$lang['strreset']}</a></li>\n";			echo "\t<li><a href=\"sequences.php?{$misc->href}\">{$lang['strshowallsequences']}</a></li>\n</ul>\n";		}		else echo "<p>{$lang['strnodata']}</p>\n";	}	/**	 * Drop a sequence	 */	function doDrop($confirm, $msg = '') {		global $data, $misc;		global $lang;		if (empty($_REQUEST['sequence']) && empty($_REQUEST['ma'])) {			doDefault($lang['strspecifysequencetodrop']);			exit();		}				if ($confirm) {			$misc->printTrail('sequence');			$misc->printTitle($lang['strdrop'],'pg.sequence.drop');			$misc->printMsg($msg);						echo "<form action=\"sequences.php\" method=\"post\">\n";						//If multi drop			if (isset($_REQUEST['ma'])) {				foreach($_REQUEST['ma'] as $v) {					$a = unserialize(htmlspecialchars_decode($v, ENT_QUOTES));					echo "<p>", sprintf($lang['strconfdropsequence'], $misc->printVal($a['sequence'])), "</p>\n";					printf('<input type="hidden" name="sequence[]" value="%s" />', htmlspecialchars($a['sequence']));				}			} else {				echo "<p>", sprintf($lang['strconfdropsequence'], $misc->printVal($_REQUEST['sequence'])), "</p>\n";				echo "<input type=\"hidden\" name=\"sequence\" value=\"", htmlspecialchars($_REQUEST['sequence']), "\" />\n";			}			echo "<p><input type=\"checkbox\" id=\"cascade\" name=\"cascade\" /> <label for=\"cascade\">{$lang['strcascade']}</label></p>\n";			echo "<p><input type=\"hidden\" name=\"action\" value=\"drop\" />\n";			echo $misc->form;			echo "<input type=\"submit\" name=\"drop\" value=\"{$lang['strdrop']}\" />\n";			echo "<input type=\"submit\" name=\"cancel\" value=\"{$lang['strcancel']}\" /></p>\n";			echo "</form>\n";		}		else {			if (is_array($_POST['sequence'])) {				$msg='';				$status = $data->beginTransaction();				if ($status == 0) {					foreach($_POST['sequence'] as $s) {						$status = $data->dropSequence($s, isset($_POST['cascade']));						if ($status == 0)							$msg.= sprintf('%s: %s<br />', htmlentities($s), $lang['strsequencedropped']);						else {							$data->endTransaction();							doDefault(sprintf('%s%s: %s<br />', $msg, htmlentities($s), $lang['strsequencedroppedbad']));							return;						}					}				}				if($data->endTransaction() == 0) {					// Everything went fine, back to the Default page....					$_reload_browser = true;					doDefault($msg);				}				else doDefault($lang['strsequencedroppedbad']);			}			else{				$status = $data->dropSequence($_POST['sequence'], isset($_POST['cascade']));				if ($status == 0) {					$_reload_browser = true;					doDefault($lang['strsequencedropped']);				}				else					doDrop(true, $lang['strsequencedroppedbad']);			}		}	}	/**	 * Displays a screen where they can enter a new sequence	 */	function doCreateSequence($msg = '') {		global $data, $misc;		global $lang;		if (!isset($_POST['formSequenceName'])) $_POST['formSequenceName'] = '';		if (!isset($_POST['formIncrement'])) $_POST['formIncrement'] = '';		if (!isset($_POST['formMinValue'])) $_POST['formMinValue'] = '';		if (!isset($_POST['formMaxValue'])) $_POST['formMaxValue'] = '';		if (!isset($_POST['formStartValue'])) $_POST['formStartValue'] = '';		if (!isset($_POST['formCacheValue'])) $_POST['formCacheValue'] = '';		$misc->printTrail('schema');		$misc->printTitle($lang['strcreatesequence'],'pg.sequence.create');		$misc->printMsg($msg);		echo "<form action=\"sequences.php\" method=\"post\">\n";		echo "<table>\n";		echo "<tr><th class=\"data left required\">{$lang['strname']}</th>\n";		echo "<td class=\"data1\"><input name=\"formSequenceName\" size=\"32\" maxlength=\"{$data->_maxNameLen}\" value=\"",			htmlspecialchars($_POST['formSequenceName']), "\" /></td></tr>\n";		echo "<tr><th class=\"data left\">{$lang['strincrementby']}</th>\n";		echo "<td class=\"data1\"><input name=\"formIncrement\" size=\"5\" value=\"",			htmlspecialchars($_POST['formIncrement']), "\" /> </td></tr>\n";		echo "<tr><th class=\"data left\">{$lang['strminvalue']}</th>\n";		echo "<td class=\"data1\"><input name=\"formMinValue\" size=\"5\" value=\"",			htmlspecialchars($_POST['formMinValue']), "\" /></td></tr>\n";		echo "<tr><th class=\"data left\">{$lang['strmaxvalue']}</th>\n";		echo "<td class=\"data1\"><input name=\"formMaxValue\" size=\"5\" value=\"",			htmlspecialchars($_POST['formMaxValue']), "\" /></td></tr>\n";		echo "<tr><th class=\"data left\">{$lang['strstartvalue']}</th>\n";		echo "<td class=\"data1\"><input name=\"formStartValue\" size=\"5\" value=\"",			htmlspecialchars($_POST['formStartValue']), "\" /></td></tr>\n";		echo "<tr><th class=\"data left\">{$lang['strcachevalue']}</th>\n";		echo "<td class=\"data1\"><input name=\"formCacheValue\" size=\"5\" value=\"",			htmlspecialchars($_POST['formCacheValue']), "\" /></td></tr>\n";		echo "<tr><th class=\"data left\"><label for=\"formCycledValue\">{$lang['strcancycle']}</label></th>\n";		echo "<td class=\"data1\"><input type=\"checkbox\" id=\"formCycledValue\" name=\"formCycledValue\" ",			(isset($_POST['formCycledValue']) ? ' checked="checked"' : ''), " /></td></tr>\n";		echo "</table>\n";		echo "<p><input type=\"hidden\" name=\"action\" value=\"save_create_sequence\" />\n";		echo $misc->form;		echo "<input type=\"submit\" name=\"create\" value=\"{$lang['strcreate']}\" />\n";		echo "<input type=\"submit\" name=\"cancel\" value=\"{$lang['strcancel']}\" /></p>\n";		echo "</form>\n";	}	/**	 * Actually creates the new sequence in the database	 */	function doSaveCreateSequence() {		global $data;		global $lang;		// Check that they've given a name and at least one column		if ($_POST['formSequenceName'] == '') doCreateSequence($lang['strsequenceneedsname']);		else {			$status = $data->createSequence($_POST['formSequenceName'],				$_POST['formIncrement'], $_POST['formMinValue'],				$_POST['formMaxValue'], $_POST['formStartValue'],				$_POST['formCacheValue'], isset($_POST['formCycledValue']));			if ($status == 0) {				doDefault($lang['strsequencecreated']);			} else {				doCreateSequence($lang['strsequencecreatedbad']);			}		}	}	/**	 * Restarts a sequence	 */	function doRestart() {		global $data;		global $lang;		$status = $data->restartSequence($_REQUEST['sequence']);		if ($status == 0)			doProperties($lang['strsequencerestart']);		else			doProperties($lang['strsequencerestartbad']);	}	/**	 * Resets a sequence	 */	function doReset() {		global $data;		global $lang;		$status = $data->resetSequence($_REQUEST['sequence']);		if ($status == 0)			doProperties($lang['strsequencereset']);		else			doProperties($lang['strsequenceresetbad']);	}	/**	 * Set Nextval of a sequence	 */	function doNextval() {		global $data;		global $lang;		$status = $data->nextvalSequence($_REQUEST['sequence']);		if ($status == 0)			doProperties($lang['strsequencenextval']);		else			doProperties($lang['strsequencenextvalbad']);	}	/**	 * Function to save after 'setval'ing a sequence	 */	function doSaveSetval() {		global $data, $lang, $_reload_browser;		$status = $data->setvalSequence($_POST['sequence'], $_POST['nextvalue']);		if ($status == 0)			doProperties($lang['strsequencesetval']);		else			doProperties($lang['strsequencesetvalbad']);	}	/**	 * Function to allow 'setval'ing of a sequence	 */	function doSetval($msg = '') {		global $data, $misc;		global $lang;		$misc->printTrail('sequence');		$misc->printTitle($lang['strsetval'], 'pg.sequence');		$misc->printMsg($msg);		// Fetch the sequence information		$sequence = $data->getSequence($_REQUEST['sequence']);		if (is_object($sequence) && $sequence->recordCount() > 0) {			echo "<form action=\"sequences.php\" method=\"post\">\n";			echo "<table border=\"0\">";			echo "<tr><th class=\"data left required\">{$lang['strlastvalue']}</th>\n";			echo "<td class=\"data1\">";			echo "<input name=\"nextvalue\" size=\"32\" maxlength=\"{$data->_maxNameLen}\" value=\"",				$misc->printVal($sequence->fields['last_value']), "\" /></td></tr>\n";			echo "</table>\n";			echo "<p><input type=\"hidden\" name=\"action\" value=\"setval\" />\n";			echo "<input type=\"hidden\" name=\"sequence\" value=\"", htmlspecialchars($_REQUEST['sequence']), "\" />\n";			echo $misc->form;			echo "<input type=\"submit\" name=\"setval\" value=\"{$lang['strsetval']}\" />\n";			echo "<input type=\"submit\" name=\"cancel\" value=\"{$lang['strcancel']}\" /></p>\n";			echo "</form>\n";		}		else echo "<p>{$lang['strnodata']}</p>\n";	}	/**	 * Function to save after altering a sequence	 */	function doSaveAlter() {		global $data, $lang, $_reload_browser, $misc;		if (!isset($_POST['owner'])) $_POST['owner'] = null;		if (!isset($_POST['newschema'])) $_POST['newschema'] = null;		if (!isset($_POST['formIncrement'])) $_POST['formIncrement'] = null;		if (!isset($_POST['formMinValue'])) $_POST['formMinValue'] = null;		if (!isset($_POST['formMaxValue'])) $_POST['formMaxValue'] = null;		if (!isset($_POST['formStartValue'])) $_POST['formStartValue'] = null;		if (!isset($_POST['formRestartValue'])) $_POST['formRestartValue'] = null;		if (!isset($_POST['formCacheValue'])) $_POST['formCacheValue'] = null;		if (!isset($_POST['formCycledValue'])) $_POST['formCycledValue'] = null;		$status = $data->alterSequence($_POST['sequence'], $_POST['name'], $_POST['comment'], $_POST['owner'],			$_POST['newschema'], $_POST['formIncrement'], $_POST['formMinValue'], $_POST['formMaxValue'],			$_POST['formRestartValue'], $_POST['formCacheValue'], isset($_POST['formCycledValue']), $_POST['formStartValue']);		if ($status == 0) {			if ($_POST['sequence'] != $_POST['name']) {				// Jump them to the new view name				$_REQUEST['sequence'] = $_POST['name'];				// Force a browser reload				$_reload_browser = true;			}			if (!empty($_POST['newschema']) && ($_POST['newschema'] != $data->_schema)) {				// Jump them to the new sequence schema				$misc->setCurrentSchema($_POST['newschema']);				$_reload_browser = true;			 }			doProperties($lang['strsequencealtered']);		}		else			doProperties($lang['strsequencealteredbad']);	}	/**	 * Function to allow altering of a sequence	 */	function doAlter($msg = '') {		global $data, $misc;		global $lang;		$misc->printTrail('sequence');		$misc->printTitle($lang['stralter'], 'pg.sequence.alter');		$misc->printMsg($msg);		// Fetch the sequence information		$sequence = $data->getSequence($_REQUEST['sequence']);		if (is_object($sequence) && $sequence->recordCount() > 0) {			if (!isset($_POST['name'])) $_POST['name'] = $_REQUEST['sequence'];			if (!isset($_POST['comment'])) $_POST['comment'] = $sequence->fields['seqcomment'];			if (!isset($_POST['owner'])) $_POST['owner'] = $sequence->fields['seqowner'];			if (!isset($_POST['newschema'])) $_POST['newschema'] = $sequence->fields['nspname'];			// Handle Checkbox Value			$sequence->fields['is_cycled'] = $data->phpBool($sequence->fields['is_cycled']);			if ($sequence->fields['is_cycled']) $_POST['formCycledValue'] = 'on';			echo "<form action=\"sequences.php\" method=\"post\">\n";			echo "<table>\n";			echo "<tr><th class=\"data left required\">{$lang['strname']}</th>\n";			echo "<td class=\"data1\">";			echo "<input name=\"name\" size=\"32\" maxlength=\"{$data->_maxNameLen}\" value=\"",				htmlspecialchars($_POST['name']), "\" /></td></tr>\n";			$server_info = $misc->getServerInfo();			if ($data->isSuperUser($server_info['username'])) {				// Fetch all users				$users = $data->getUsers();				echo "<tr><th class=\"data left required\">{$lang['strowner']}</th>\n";				echo "<td class=\"data1\"><select name=\"owner\">";				while (!$users->EOF) {					$uname = $users->fields['usename'];					echo "<option value=\"", htmlspecialchars($uname), "\"",					($uname == $_POST['owner']) ? ' selected="selected"' : '', ">", htmlspecialchars($uname), "</option>\n";					$users->moveNext();				}				echo "</select></td></tr>\n";			}						if ($data->hasAlterSequenceSchema()) {				$schemas = $data->getSchemas();				echo "<tr><th class=\"data left required\">{$lang['strschema']}</th>\n";				echo "<td class=\"data1\"><select name=\"newschema\">";				while (!$schemas->EOF) {					$schema = $schemas->fields['nspname'];					echo "<option value=\"", htmlspecialchars($schema), "\"",						($schema == $_POST['newschema']) ? ' selected="selected"' : '', ">", htmlspecialchars($schema), "</option>\n";					$schemas->moveNext();				}			    echo "</select></td></tr>\n";			}			echo "<tr><th class=\"data left\">{$lang['strcomment']}</th>\n";			echo "<td class=\"data1\">";			echo "<textarea rows=\"3\" cols=\"32\" name=\"comment\">",				htmlspecialchars($_POST['comment']), "</textarea></td></tr>\n";			if ($data->hasAlterSequenceStart()) {				echo "<tr><th class=\"data left\">{$lang['strstartvalue']}</th>\n";				echo "<td class=\"data1\"><input name=\"formStartValue\" size=\"5\" value=\"",					htmlspecialchars($sequence->fields['start_value']), "\" /></td></tr>\n";			}			echo "<tr><th class=\"data left\">{$lang['strrestartvalue']}</th>\n";			echo "<td class=\"data1\"><input name=\"formRestartValue\" size=\"5\" value=\"",				htmlspecialchars($sequence->fields['last_value']), "\" /></td></tr>\n";			echo "<tr><th class=\"data left\">{$lang['strincrementby']}</th>\n";			echo "<td class=\"data1\"><input name=\"formIncrement\" size=\"5\" value=\"",				htmlspecialchars($sequence->fields['increment_by']), "\" /> </td></tr>\n";			echo "<tr><th class=\"data left\">{$lang['strmaxvalue']}</th>\n";			echo "<td class=\"data1\"><input name=\"formMaxValue\" size=\"5\" value=\"",				htmlspecialchars($sequence->fields['max_value']), "\" /></td></tr>\n";			echo "<tr><th class=\"data left\">{$lang['strminvalue']}</th>\n";			echo "<td class=\"data1\"><input name=\"formMinValue\" size=\"5\" value=\"",				htmlspecialchars($sequence->fields['min_value']), "\" /></td></tr>\n";			echo "<tr><th class=\"data left\">{$lang['strcachevalue']}</th>\n";			echo "<td class=\"data1\"><input name=\"formCacheValue\" size=\"5\" value=\"",				htmlspecialchars($sequence->fields['cache_value']), "\" /></td></tr>\n";			echo "<tr><th class=\"data left\"><label for=\"formCycledValue\">{$lang['strcancycle']}</label></th>\n";			echo "<td class=\"data1\"><input type=\"checkbox\" id=\"formCycledValue\" name=\"formCycledValue\" ",				( isset($_POST['formCycledValue']) ? ' checked="checked"' : ''), " /></td></tr>\n";			echo "</table>\n";			echo "<p><input type=\"hidden\" name=\"action\" value=\"alter\" />\n";			echo $misc->form;			echo "<input type=\"hidden\" name=\"sequence\" value=\"", htmlspecialchars($_REQUEST['sequence']), "\" />\n";			echo "<input type=\"submit\" name=\"alter\" value=\"{$lang['stralter']}\" />\n";			echo "<input type=\"submit\" name=\"cancel\" value=\"{$lang['strcancel']}\" /></p>\n";			echo "</form>\n";		}		else echo "<p>{$lang['strnodata']}</p>\n";	}	if ($action == 'tree') doTree();	// Print header	$misc->printHeader($lang['strsequences']);	$misc->printBody();	switch($action) {		case 'create':			doCreateSequence();			break;		case 'save_create_sequence':			if (isset($_POST['create'])) doSaveCreateSequence();			else doDefault();			break;		case 'properties':			doProperties();			break;		case 'drop':			if (isset($_POST['drop'])) doDrop(false);			else doDefault();			break;		case 'confirm_drop':			doDrop(true);			break;		case 'restart':			doRestart();			break;		case 'reset':			doReset();			break;		case 'nextval':			doNextval();			break;		case 'setval':			if (isset($_POST['setval'])) doSaveSetval();			else doDefault();			break;		case 'confirm_setval':			doSetval();			break;		case 'alter':			if (isset($_POST['alter'])) doSaveAlter();			else doDefault();			break;		case 'confirm_alter':			doAlter();			break;		default:			doDefault();			break;	}	// Print footer	$misc->printFooter();?>
<?php	/**	 * Common relation browsing function that can be used for views,	 * tables, reports, arbitrary queries, etc. to avoid code duplication.	 * @param $query The SQL SELECT string to execute	 * @param $count The same SQL query, but only retrieves the count of the rows (AS total)	 * @param $return_url The return URL	 * @param $return_desc The return link name	 * @param $page The current page	 *	 * $Id: display.php,v 1.68 2008/04/14 12:44:27 ioguix Exp $	 */	// Prevent timeouts on large exports (non-safe mode only)	if (!ini_get('safe_mode')) set_time_limit(0);	// Include application functions	include_once('./libraries/lib.inc.php');	global $conf, $lang;	$action = (isset($_REQUEST['action'])) ? $_REQUEST['action'] : '';	/**	 * Show confirmation of edit and perform actual update	 */	function doEditRow($confirm, $msg = '') {		global $data, $misc, $conf;		global $lang;		if (is_array($_REQUEST['key']))           $key = $_REQUEST['key'];        else           $key = unserialize($_REQUEST['key']);		if ($confirm) {			$misc->printTrail($_REQUEST['subject']);			$misc->printTitle($lang['streditrow']);			$misc->printMsg($msg);			$attrs = $data->getTableAttributes($_REQUEST['table']);			$rs = $data->browseRow($_REQUEST['table'], $key);			if (($conf['autocomplete'] != 'disable')) {				$fksprops = $misc->getAutocompleteFKProperties($_REQUEST['table']);				if ($fksprops !== false)					echo $fksprops['code'];			}			else $fksprops = false;			echo "<form action=\"display.php\" method=\"post\" id=\"ac_form\">\n";			$elements = 0;			$error = true;						if ($rs->recordCount() == 1 && $attrs->recordCount() > 0) {				echo "<table>\n";				// Output table header				echo "<tr><th class=\"data\">{$lang['strcolumn']}</th><th class=\"data\">{$lang['strtype']}</th>";				echo "<th class=\"data\">{$lang['strformat']}</th>\n";				echo "<th class=\"data\">{$lang['strnull']}</th><th class=\"data\">{$lang['strvalue']}</th></tr>";				$i = 0;				while (!$attrs->EOF) {					$attrs->fields['attnotnull'] = $data->phpBool($attrs->fields['attnotnull']);					$id = (($i % 2) == 0 ? '1' : '2');										// Initialise variables					if (!isset($_REQUEST['format'][$attrs->fields['attname']]))						$_REQUEST['format'][$attrs->fields['attname']] = 'VALUE';										echo "<tr class=\"data{$id}\">\n";					echo "<td style=\"white-space:nowrap;\">", $misc->printVal($attrs->fields['attname']), "</td>";					echo "<td style=\"white-space:nowrap;\">\n";					echo $misc->printVal($data->formatType($attrs->fields['type'], $attrs->fields['atttypmod']));					echo "<input type=\"hidden\" name=\"types[", htmlspecialchars($attrs->fields['attname']), "]\" value=\"", 						htmlspecialchars($attrs->fields['type']), "\" /></td>";					$elements++;					echo "<td style=\"white-space:nowrap;\">\n";					echo "<select name=\"format[", htmlspecialchars($attrs->fields['attname']), "]\">\n";					echo "<option value=\"VALUE\"", ($_REQUEST['format'][$attrs->fields['attname']] == 'VALUE') ? ' selected="selected"' : '', ">{$lang['strvalue']}</option>\n";					echo "<option value=\"EXPRESSION\"", ($_REQUEST['format'][$attrs->fields['attname']] == 'EXPRESSION') ? ' selected="selected"' : '', ">{$lang['strexpression']}</option>\n";					echo "</select>\n</td>\n";					$elements++;					echo "<td style=\"white-space:nowrap;\">";					// Output null box if the column allows nulls (doesn't look at CHECKs or ASSERTIONS)					if (!$attrs->fields['attnotnull']) {						// Set initial null values						if ($_REQUEST['action'] == 'confeditrow' && $rs->fields[$attrs->fields['attname']] === null) {							$_REQUEST['nulls'][$attrs->fields['attname']] = 'on';						}						echo "<input type=\"checkbox\" name=\"nulls[{$attrs->fields['attname']}]\"",							isset($_REQUEST['nulls'][$attrs->fields['attname']]) ? ' checked="checked"' : '', " /></td>\n";						$elements++;					}					else						echo "&nbsp;</td>";					echo "<td id=\"row_att_{$attrs->fields['attnum']}\" style=\"white-space:nowrap;\">";					$extras = array();					// If the column allows nulls, then we put a JavaScript action on the data field to unset the					// NULL checkbox as soon as anything is entered in the field.  We use the $elements variable to 					// keep track of which element offset we're up to.  We can't refer to the null checkbox by name					// as it contains '[' and ']' characters.					if (!$attrs->fields['attnotnull']) {						$extras['onChange'] = 'elements[' . ($elements - 1) . '].checked = false;';					}					if (($fksprops !== false) && isset($fksprops['byfield'][$attrs->fields['attnum']])) {						$extras['id'] = "attr_{$attrs->fields['attnum']}";						$extras['autocomplete'] = 'off';					}					echo $data->printField("values[{$attrs->fields['attname']}]", $rs->fields[$attrs->fields['attname']], $attrs->fields['type'], $extras);					echo "</td>";					$elements++;					echo "</tr>\n";					$i++;					$attrs->moveNext();				}				echo "</table>\n";				$error = false;			}			elseif ($rs->recordCount() != 1) {				echo "<p>{$lang['strrownotunique']}</p>\n";							}			else {				echo "<p>{$lang['strinvalidparam']}</p>\n";			}			echo "<input type=\"hidden\" name=\"action\" value=\"editrow\" />\n";			echo $misc->form;			if (isset($_REQUEST['table']))				echo "<input type=\"hidden\" name=\"table\" value=\"", htmlspecialchars($_REQUEST['table']), "\" />\n";			if (isset($_REQUEST['subject']))				echo "<input type=\"hidden\" name=\"subject\" value=\"", htmlspecialchars($_REQUEST['subject']), "\" />\n";			if (isset($_REQUEST['query']))				echo "<input type=\"hidden\" name=\"query\" value=\"", htmlspecialchars($_REQUEST['query']), "\" />\n";			if (isset($_REQUEST['count']))				echo "<input type=\"hidden\" name=\"count\" value=\"", htmlspecialchars($_REQUEST['count']), "\" />\n";			if (isset($_REQUEST['return_url']))				echo "<input type=\"hidden\" name=\"return_url\" value=\"", htmlspecialchars($_REQUEST['return_url']), "\" />\n";			if (isset($_REQUEST['return_desc']))				echo "<input type=\"hidden\" name=\"return_desc\" value=\"", htmlspecialchars($_REQUEST['return_desc']), "\" />\n";			echo "<input type=\"hidden\" name=\"page\" value=\"", htmlspecialchars($_REQUEST['page']), "\" />\n";			echo "<input type=\"hidden\" name=\"sortkey\" value=\"", htmlspecialchars($_REQUEST['sortkey']), "\" />\n";			echo "<input type=\"hidden\" name=\"sortdir\" value=\"", htmlspecialchars($_REQUEST['sortdir']), "\" />\n";			echo "<input type=\"hidden\" name=\"strings\" value=\"", htmlspecialchars($_REQUEST['strings']), "\" />\n";			echo "<input type=\"hidden\" name=\"key\" value=\"", htmlspecialchars(serialize($key)), "\" />\n";			echo "<p>";			if (!$error) echo "<input type=\"submit\" name=\"save\" value=\"{$lang['strsave']}\" />\n";			echo "<input type=\"submit\" name=\"cancel\" value=\"{$lang['strcancel']}\" />\n";			if($fksprops !== false) {				if ($conf['autocomplete'] != 'default off')					echo "<input type=\"checkbox\" id=\"no_ac\" value=\"1\" checked=\"checked\" /><label for=\"no_ac\">{$lang['strac']}</label>\n";				else					echo "<input type=\"checkbox\" id=\"no_ac\" value=\"0\" /><label for=\"no_ac\">{$lang['strac']}</label>\n";			}			echo "</p>\n";			echo "</form>\n";		}		else {			if (!isset($_POST['values'])) $_POST['values'] = array();			if (!isset($_POST['nulls'])) $_POST['nulls'] = array();						$status = $data->editRow($_POST['table'], $_POST['values'], $_POST['nulls'], 				$_POST['format'], $_POST['types'], unserialize($_POST['key']));			if ($status == 0)				doBrowse($lang['strrowupdated']);			elseif ($status == -2)				doEditRow(true, $lang['strrownotunique']);			else				doEditRow(true, $lang['strrowupdatedbad']);		}	}		/**	 * Show confirmation of drop and perform actual drop	 */	function doDelRow($confirm) {		global $data, $misc;		global $lang;		if ($confirm) {			$misc->printTrail($_REQUEST['subject']);			$misc->printTitle($lang['strdeleterow']);			echo "<p>{$lang['strconfdeleterow']}</p>\n";						echo "<form action=\"display.php\" method=\"post\">\n";			echo "<input type=\"hidden\" name=\"action\" value=\"delrow\" />\n";			echo $misc->form;			if (isset($_REQUEST['table']))				echo "<input type=\"hidden\" name=\"table\" value=\"", htmlspecialchars($_REQUEST['table']), "\" />\n";			if (isset($_REQUEST['subject']))				echo "<input type=\"hidden\" name=\"subject\" value=\"", htmlspecialchars($_REQUEST['subject']), "\" />\n";			if (isset($_REQUEST['query']))				echo "<input type=\"hidden\" name=\"query\" value=\"", htmlspecialchars($_REQUEST['query']), "\" />\n";			if (isset($_REQUEST['count']))				echo "<input type=\"hidden\" name=\"count\" value=\"", htmlspecialchars($_REQUEST['count']), "\" />\n";			if (isset($_REQUEST['return_url']))				echo "<input type=\"hidden\" name=\"return_url\" value=\"", htmlspecialchars($_REQUEST['return_url']), "\" />\n";			if (isset($_REQUEST['return_desc']))				echo "<input type=\"hidden\" name=\"return_desc\" value=\"", htmlspecialchars($_REQUEST['return_desc']), "\" />\n";			echo "<input type=\"hidden\" name=\"page\" value=\"", htmlspecialchars($_REQUEST['page']), "\" />\n";			echo "<input type=\"hidden\" name=\"sortkey\" value=\"", htmlspecialchars($_REQUEST['sortkey']), "\" />\n";			echo "<input type=\"hidden\" name=\"sortdir\" value=\"", htmlspecialchars($_REQUEST['sortdir']), "\" />\n";			echo "<input type=\"hidden\" name=\"strings\" value=\"", htmlspecialchars($_REQUEST['strings']), "\" />\n";			echo "<input type=\"hidden\" name=\"key\" value=\"", htmlspecialchars(serialize($_REQUEST['key'])), "\" />\n";			echo "<input type=\"submit\" name=\"yes\" value=\"{$lang['stryes']}\" />\n";			echo "<input type=\"submit\" name=\"no\" value=\"{$lang['strno']}\" />\n";			echo "</form>\n";		}		else {			$status = $data->deleteRow($_POST['table'], unserialize($_POST['key']));			if ($status == 0)				doBrowse($lang['strrowdeleted']);			elseif ($status == -2)				doBrowse($lang['strrownotunique']);			else							doBrowse($lang['strrowdeletedbad']);		}			}		/* build & return the FK information data structure 	 * used when deciding if a field should have a FK link or not*/	function &getFKInfo() {		global $data, $misc, $lang;		 		// Get the foreign key(s) information from the current table		$fkey_information = array('byconstr' => array(), 'byfield' => array());		if (isset($_REQUEST['table'])) {			$constraints = $data->getConstraintsWithFields($_REQUEST['table']);			if ($constraints->recordCount() > 0) {				/* build the common parts of the url for the FK  */				$fk_return_url = "{$misc->href}&amp;subject=table&amp;table=". urlencode($_REQUEST['table']);				if (isset($_REQUEST['page'])) $fk_return_url .= "&amp;page=" . urlencode($_REQUEST['page']);				if (isset($_REQUEST['query'])) $fk_return_url .= "&amp;query=" . urlencode($_REQUEST['query']);				if (isset($_REQUEST['search_path'])) $fk_return_url .= "&amp;search_path=" . urlencode($_REQUEST['search_path']);				/* yes, we double urlencode fk_return_url so parameters here don't 				 * overwrite real one when included in the final url */				$fkey_information['common_url'] = $misc->getHREF('schema') .'&amp;subject=table&amp;return_url=display.php?'					. urlencode($fk_return_url) .'&amp;return_desc='. urlencode($lang['strback']);				/* build the FK constraints data structure */				while (!$constraints->EOF) {					$constr =& $constraints->fields;					if ($constr['contype'] == 'f') {						if (!isset($fkey_information['byconstr'][$constr['conid']])) {							$fkey_information['byconstr'][$constr['conid']] = array (								'url_data' => 'table='. urlencode($constr['f_table']) .'&amp;schema='. urlencode($constr['f_schema']),								'fkeys' => array(),								'consrc' => $constr['consrc']							);						}						$fkey_information['byconstr'][$constr['conid']]['fkeys'][$constr['p_field']] = $constr['f_field'];						if (!isset($fkey_information['byfield'][$constr['p_field']]))							$fkey_information['byfield'][$constr['p_field']] = array();						$fkey_information['byfield'][$constr['p_field']][] = $constr['conid'];					}					$constraints->moveNext();				}			}		}		return $fkey_information;	}	/* Print table header cells 	 * @param $sortLink must be urlencoded already	 * */	function printTableHeaderCells(&$rs, $sortLink, $withOid) {		global $misc, $data, $conf;		$j = 0;		foreach ($rs->fields as $k => $v) {			if (($k === $data->id) && ( !($withOid && $conf['show_oids']) )) {				$j++;				continue;			}			$finfo = $rs->fetchField($j);			if ($sortLink === false) {				echo "<th class=\"data\">", $misc->printVal($finfo->name), "</th>\n";			}			else {				echo "<th class=\"data\"><a href=\"display.php?{$sortLink}&amp;sortkey=", ($j + 1), "&amp;sortdir=";				// Sort direction opposite to current direction, unless it's currently ''				echo ($_REQUEST['sortdir'] == 'asc' && $_REQUEST['sortkey'] == ($j + 1)) ? 'desc' : 'asc';				echo "&amp;strings=", urlencode($_REQUEST['strings']), 					"&amp;page=" . urlencode($_REQUEST['page']), "\">", 					$misc->printVal($finfo->name), "</a></th>\n";			}			$j++;		}		reset($rs->fields);	}	/* Print data-row cells */	function printTableRowCells(&$rs, &$fkey_information, $withOid) {		global $data, $misc, $conf;		$j = 0;				if (!isset($_REQUEST['strings'])) $_REQUEST['strings'] = 'collapsed';		foreach ($rs->fields as $k => $v) {			$finfo = $rs->fetchField($j++);			if (($k === $data->id) && ( !($withOid && $conf['show_oids']) )) continue;			elseif ($v !== null && $v == '') echo "<td>&nbsp;</td>";			else {				echo "<td style=\"white-space:nowrap;\">";				if (($v !== null) && isset($fkey_information['byfield'][$k])) {					foreach ($fkey_information['byfield'][$k] as $conid) {						$query_params = $fkey_information['byconstr'][$conid]['url_data'];						foreach ($fkey_information['byconstr'][$conid]['fkeys'] as $p_field => $f_field) {							$query_params .= '&amp;'. urlencode("fkey[{$f_field}]") .'='. urlencode($rs->fields[$p_field]);						}						/* $fkey_information['common_url'] is already urlencoded */						$query_params .= '&amp;'. $fkey_information['common_url'];						echo "<div style=\"display:inline-block;\">";						echo "<a class=\"fk fk_". htmlentities($conid) ."\" href=\"display.php?{$query_params}\">";						echo "<img src=\"".$misc->icon('ForeignKey')."\" style=\"vertical-align:middle;\" alt=\"[fk]\" title=\""							. htmlentities($fkey_information['byconstr'][$conid]['consrc'])							."\" />";						echo "</a>";						echo "</div>";					}					echo $misc->printVal($v, $finfo->type, array('null' => true, 'clip' => ($_REQUEST['strings']=='collapsed'), 'class' => 'fk_value'));				} else {					echo $misc->printVal($v, $finfo->type, array('null' => true, 'clip' => ($_REQUEST['strings']=='collapsed')));				}				echo "</td>";			}		}	}	/* Print the FK row, used in ajax requests */	function doBrowseFK() {		global $data, $misc, $lang;		$ops = array();		foreach($_REQUEST['fkey'] as $x => $y) {			$ops[$x] = '=';		}		$query = $data->getSelectSQL($_REQUEST['table'], array(), $_REQUEST['fkey'], $ops);		$_REQUEST['query'] = $query;		$fkinfo =& getFKInfo();		$max_pages = 1;		// Retrieve page from query.  $max_pages is returned by reference.		$rs = $data->browseQuery('SELECT', $_REQUEST['table'], $_REQUEST['query'],  			null, null, 1, 1, $max_pages);		echo "<a href=\"\" style=\"display:table-cell;\" class=\"fk_delete\"><img alt=\"[delete]\" src=\"". $misc->icon('Delete') ."\" /></a>\n";		echo "<div style=\"display:table-cell;\">";		if (is_object($rs) && $rs->recordCount() > 0) {			/* we are browsing a referenced table here			 * we should show OID if show_oids is true			 * so we give true to withOid in functions bellow			 * as 3rd paramter */					echo "<table><tr>";				printTableHeaderCells($rs, false, true);			echo "</tr>";			echo "<tr class=\"data1\">\n";				printTableRowCells($rs, $fkinfo, true);			echo "</tr>\n";			echo "</table>\n";		}		else			echo $lang['strnodata'];		echo "</div>";		exit;	}	/** 	 * Displays requested data	 */	function doBrowse($msg = '') {		global $data, $conf, $misc, $lang;		$save_history = false;		// If current page is not set, default to first page		if (!isset($_REQUEST['page']))			$_REQUEST['page'] = 1;		if (!isset($_REQUEST['nohistory']))			$save_history = true;				if (isset($_REQUEST['subject'])) {			$subject = $_REQUEST['subject'];			if (isset($_REQUEST[$subject])) $object = $_REQUEST[$subject];		}		else {			$subject = '';		}		$misc->printTrail(isset($subject) ? $subject : 'database');		/* This code is used when browsing FK in pure-xHTML (without js) */		if (isset($_REQUEST['fkey'])) {			$ops = array();			foreach($_REQUEST['fkey'] as $x => $y) {				$ops[$x] = '=';			}			$query = $data->getSelectSQL($_REQUEST['table'], array(), $_REQUEST['fkey'], $ops);			$_REQUEST['query'] = $query;		}				if (isset($object)) {			if (isset($_REQUEST['query'])) {				$_SESSION['sqlquery'] = $_REQUEST['query'];				$misc->printTitle($lang['strselect']);				$type = 'SELECT';			} else {				$misc->printTitle($lang['strbrowse']);				$type = 'TABLE';			}		} else {			$misc->printTitle($lang['strqueryresults']);			$type = 'QUERY';		}		$misc->printMsg($msg);		// If 'sortkey' is not set, default to ''		if (!isset($_REQUEST['sortkey'])) $_REQUEST['sortkey'] = '';		// If 'sortdir' is not set, default to ''		if (!isset($_REQUEST['sortdir'])) $_REQUEST['sortdir'] = '';			// If 'strings' is not set, default to collapsed 		if (!isset($_REQUEST['strings'])) $_REQUEST['strings'] = 'collapsed';			// Fetch unique row identifier, if this is a table browse request.		if (isset($object))			$key = $data->getRowIdentifier($object);		else			$key = array();				// Set the schema search path		if (isset($_REQUEST['search_path'])) {			if ($data->setSearchPath(array_map('trim',explode(',',$_REQUEST['search_path']))) != 0) {				return;			}		}		// Retrieve page from query.  $max_pages is returned by reference.		$rs = $data->browseQuery($type, 			isset($object) ? $object : null, 			isset($_REQUEST['query']) ? $_REQUEST['query'] : null, 			$_REQUEST['sortkey'], $_REQUEST['sortdir'], $_REQUEST['page'],			$conf['max_rows'], $max_pages);		$fkey_information =& getFKInfo();		// Build strings for GETs		$gets = $misc->href;		if (isset($object)) $gets .= "&amp;" . urlencode($subject) . '=' . urlencode($object);		if (isset($subject)) $gets .= "&amp;subject=" . urlencode($subject);		if (isset($_REQUEST['query'])) $gets .= "&amp;query=" . urlencode($_REQUEST['query']);		if (isset($_REQUEST['count'])) $gets .= "&amp;count=" . urlencode($_REQUEST['count']);		if (isset($_REQUEST['return_url'])) $gets .= "&amp;return_url=" . urlencode($_REQUEST['return_url']);		if (isset($_REQUEST['return_desc'])) $gets .= "&amp;return_desc=" . urlencode($_REQUEST['return_desc']);		if (isset($_REQUEST['search_path'])) $gets .= "&amp;search_path=" . urlencode($_REQUEST['search_path']);		if (isset($_REQUEST['table'])) $gets .= "&amp;table=" . urlencode($_REQUEST['table']);				// This string just contains sort info		$getsort = "sortkey=" . urlencode($_REQUEST['sortkey']) .			"&amp;sortdir=" . urlencode($_REQUEST['sortdir']);		if ($save_history && is_object($rs) && ($type == 'QUERY')) //{			$misc->saveScriptHistory($_REQUEST['query']);		if (is_object($rs) && $rs->recordCount() > 0) {			// Show page navigation			$misc->printPages($_REQUEST['page'], $max_pages, "display.php?page=%s&amp;{$gets}&amp;{$getsort}&amp;nohistory=t&amp;strings=" . urlencode($_REQUEST['strings']));			echo "<table id=\"data\">\n<tr>";			// Check that the key is actually in the result set.  This can occur for select			// operations where the key fields aren't part of the select.  XXX:  We should			// be able to support this, somehow.			foreach ($key as $v) {				// If a key column is not found in the record set, then we				// can't use the key.				if (!in_array($v, array_keys($rs->fields))) {					$key = array();					break;				}			}			// Display edit and delete actions if we have a key			if (sizeof($key) > 0)				echo "<th colspan=\"2\" class=\"data\">{$lang['stractions']}</th>\n";			/* we show OIDs only if we are in TABLE or SELECT type browsing */			printTableHeaderCells($rs, $gets, isset($object));			echo "</tr>\n";			$i = 0;					reset($rs->fields);			while (!$rs->EOF) {				$id = (($i % 2) == 0 ? '1' : '2');				echo "<tr class=\"data{$id}\">\n";				// Display edit and delete links if we have a key				if (sizeof($key) > 0) {					$key_str = '';					$has_nulls = false;					foreach ($key as $v) {						if ($rs->fields[$v] === null) {							$has_nulls = true;							break;						}						if ($key_str != '') $key_str .= '&amp;';						$key_str .= urlencode("key[{$v}]") . '=' . urlencode($rs->fields[$v]);					}					if ($has_nulls) {						echo "<td colspan=\"2\">&nbsp;</td>\n";					} else {						echo "<td class=\"opbutton{$id}\"><a href=\"display.php?action=confeditrow&amp;strings=", 							urlencode($_REQUEST['strings']), "&amp;page=", 							urlencode($_REQUEST['page']), "&amp;{$key_str}&amp;{$gets}&amp;{$getsort}\">{$lang['stredit']}</a></td>\n";						echo "<td class=\"opbutton{$id}\"><a href=\"display.php?action=confdelrow&amp;strings=", 							urlencode($_REQUEST['strings']), "&amp;page=", 							urlencode($_REQUEST['page']), "&amp;{$key_str}&amp;{$gets}&amp;{$getsort}\">{$lang['strdelete']}</a></td>\n";					}				}				print printTableRowCells($rs, $fkey_information, isset($object));				echo "</tr>\n";				$rs->moveNext();				$i++;			}			echo "</table>\n";			echo "<p>", $rs->recordCount(), " {$lang['strrows']}</p>\n";			// Show page navigation			$misc->printPages($_REQUEST['page'], $max_pages, "display.php?page=%s&amp;{$gets}&amp;{$getsort}&amp;strings=" . urlencode($_REQUEST['strings']));		}		else echo "<p>{$lang['strnodata']}</p>\n";		// Navigation links			echo "<ul class=\"navlink\">\n";		// Return		if (isset($_REQUEST['return_url']) && isset($_REQUEST['return_desc']))			echo "\t<li><a href=\"{$_REQUEST['return_url']}\">{$_REQUEST['return_desc']}</a></li>\n";		// Edit SQL link		if (isset($_REQUEST['query']))			echo "\t<li><a href=\"database.php?{$misc->href}&amp;action=sql&amp;paginate=on&amp;query=",				urlencode($_REQUEST['query']), "\">{$lang['streditsql']}</a></li>\n";		// Expand/Collapse		if ($_REQUEST['strings'] == 'expanded')			echo "\t<li><a href=\"display.php?{$gets}&amp;{$getsort}&amp;strings=collapsed&amp;page=", 				urlencode($_REQUEST['page']), "\">{$lang['strcollapse']}</a></li>\n";		else			echo "\t<li><a href=\"display.php?{$gets}&amp;{$getsort}&amp;strings=expanded&amp;page=", 				urlencode($_REQUEST['page']), "\">{$lang['strexpand']}</a></li>\n";		// Create report		if (isset($_REQUEST['query']) && ($subject !== 'report') && $conf['show_reports'] && isset($rs) && is_object($rs) && $rs->recordCount() > 0)			echo "\t<li><a href=\"reports.php?{$misc->href}&amp;action=create&amp;report_sql=",				urlencode($_REQUEST['query']), "&amp;paginate=", (isset($_REQUEST['paginate'])? urlencode($_REQUEST['paginate']):'f'), "\">{$lang['strcreatereport']}</a></li>\n";		// Create view and download		if (isset($_REQUEST['query']) && isset($rs) && is_object($rs) && $rs->recordCount() > 0) {			// Report views don't set a schema, so we need to disable create view in that case			if (isset($_REQUEST['schema'])) 				echo "\t<li><a href=\"views.php?action=create&amp;formDefinition=",					urlencode($_REQUEST['query']), "&amp;{$misc->href}\">{$lang['strcreateview']}</a></li>\n";			echo "\t<li><a href=\"dataexport.php?query=", urlencode($_REQUEST['query']);			if (isset($_REQUEST['search_path']))				echo "&amp;search_path=", urlencode($_REQUEST['search_path']);			echo "&amp;{$misc->href}\">{$lang['strdownload']}</a></li>\n";		}		// Insert		if (isset($object) && (isset($subject) && $subject == 'table'))			echo "\t<li><a href=\"tables.php?action=confinsertrow&amp;table=",				urlencode($object), "&amp;{$misc->href}\">{$lang['strinsert']}</a></li>\n";		// Refresh		echo "\t<li><a href=\"display.php?{$gets}&amp;{$getsort}&amp;strings=", urlencode($_REQUEST['strings']), 			"&amp;page=" . urlencode($_REQUEST['page']),			"\">{$lang['strrefresh']}</a></li>\n";		echo "</ul>\n";	}	/* shortcuts: this function exit the script for ajax purpose */	if ($action == 'dobrowsefk') {		doBrowseFK();	}	$scripts  = "<script src=\"libraries/js/jquery.js\" type=\"text/javascript\"></script>\n";	$scripts .= "<script src=\"js/display.js\" type=\"text/javascript\"></script>";	$scripts .= "<script type=\"text/javascript\">\n";	$scripts .= "var Display = {\n";	$scripts .= "errmsg: '". str_replace("'", "\'", $lang['strconnectionfail']) ."'\n";	$scripts .= "};\n";	$scripts .= "</script>\n";	// If a table is specified, then set the title differently	if (isset($_REQUEST['subject']) && isset($_REQUEST[$_REQUEST['subject']]))		$misc->printHeader($lang['strtables'], $scripts);	else			$misc->printHeader($lang['strqueryresults']);	$misc->printBody();	switch ($action) {		case 'editrow':			if (isset($_POST['save'])) doEditRow(false);			else doBrowse();			break;		case 'confeditrow':			doEditRow(true);			break;		case 'delrow':			if (isset($_POST['yes'])) doDelRow(false);			else doBrowse();			break;		case 'confdelrow':			doDelRow(true);			break;		default:			doBrowse();			break;	}	$misc->printFooter();?>
<?php	include_once('./libraries/lib.inc.php');	if(isset($_POST['offset']))		$offset = " OFFSET {$_POST['offset']}";	else {		$_POST['offset'] = 0;		$offset = " OFFSET 0";	}	$keynames = array();	foreach ($_POST['fkeynames'] as $k => $v) {		$fkeynames[$k] = html_entity_decode($v, ENT_QUOTES);	}	$keyspos = array_combine($fkeynames, $_POST['keys']);	$f_schema = html_entity_decode($_POST['f_schema'], ENT_QUOTES);	$data->fieldClean($f_schema);	$f_table = html_entity_decode($_POST['f_table'], ENT_QUOTES);	$data->fieldClean($f_table);	$f_attname = $fkeynames[$_POST['fattpos'][0]];	$data->fieldClean($f_attname);	$q = "SELECT *		FROM \"{$f_schema}\".\"{$f_table}\"		WHERE \"{$f_attname}\"::text LIKE '{$_POST['fvalue']}%'		ORDER BY \"{$f_attname}\" LIMIT 12 {$offset};";	$res = $data->selectSet($q);	if (!$res->EOF) {		echo "<table class=\"ac_values\">";		echo '<tr>';		foreach (array_keys($res->fields) as $h) {			echo '<th>';			if (in_array($h, $fkeynames))				echo '<img src="'. $misc->icon('ForeignKey') .'" alt="[referenced key]" />';			echo htmlentities($h), '</th>';					}		echo "</tr>\n";		$i=0;		while ((!$res->EOF) && ($i < 11)) {			echo "<tr class=\"acline\">";			foreach ($res->fields as $n => $v) {				if (in_array($n, $fkeynames))					echo "<td><a href=\"javascript:void(0)\" class=\"fkval\" name=\"{$keyspos[$n]}\">",htmlentities($v), "</a></td>";				else					echo "<td><a href=\"javascript:void(0)\">", htmlentities($v), "</a></td>";			}			echo "</tr>\n";			$i++;			$res->moveNext();		}				echo "</table>\n";		$page_tests='';		$js = "<script type=\"text/javascript\">\n";				if ($_POST['offset']) {			echo "<a href=\"javascript:void(0)\" id=\"fkprev\">&lt;&lt; Prev</a>";			$js.= "fkl_hasprev=true;\n";		}		else			$js.= "fkl_hasprev=false;\n";		if ($res->recordCount() == 12) {			$js.= "fkl_hasnext=true;\n";			echo "&nbsp;&nbsp;&nbsp;<a href=\"javascript:void(0)\" id=\"fknext\">Next &gt;&gt;</a>";		}		else			$js.= "fkl_hasnext=false;\n";				echo $js ."</script>";	}	else {		printf("<p>{$lang['strnofkref']}</p>", "\"{$_POST['f_schema']}\".\"{$_POST['f_table']}\".\"{$fkeynames[$_POST['fattpos']]}\"");		if ($_POST['offset'])			echo "<a href=\"javascript:void(0)\" class=\"fkprev\">Prev &lt;&lt;</a>";	}?>
<?php	/**	 * Manage schemas within a database	 *	 * $Id: database.php,v 1.104 2007/11/30 06:04:43 xzilla Exp $	 */	// Include application functions	include_once('./libraries/lib.inc.php');	$action = (isset($_REQUEST['action'])) ? $_REQUEST['action'] : '';	if (!isset($msg)) $msg = '';	$scripts = '';	function _highlight($string, $term) {		return str_replace($term, "<b>{$term}</b>", $string);	}		/**	 * Sends a signal to a process	 */	function doSignal() {		global $data, $lang;		$status = $data->sendSignal($_REQUEST['procpid'], $_REQUEST['signal']);		if ($status == 0)			doProcesses($lang['strsignalsent']);		else			doProcesses($lang['strsignalsentbad']);	}	/**	 * Searches for a named database object	 */	function doFind($confirm = true, $msg = '') {		global $data, $misc;		global $lang, $conf;		if (!isset($_REQUEST['term'])) $_REQUEST['term'] = '';		if (!isset($_REQUEST['filter'])) $_REQUEST['filter'] = '';		$misc->printTrail('database');		$misc->printTabs('database','find');		$misc->printMsg($msg);				echo "<form action=\"database.php\" method=\"post\">\n";		echo "<p><input name=\"term\" value=\"", htmlspecialchars($_REQUEST['term']), 			"\" size=\"32\" maxlength=\"{$data->_maxNameLen}\" />\n";		// Output list of filters.  This is complex due to all the 'has' and 'conf' feature possibilities		echo "<select name=\"filter\">\n";		echo "\t<option value=\"\"", ($_REQUEST['filter'] == '') ? ' selected="selected"' : '', ">{$lang['strallobjects']}</option>\n";		echo "\t<option value=\"SCHEMA\"", ($_REQUEST['filter'] == 'SCHEMA') ? ' selected="selected"' : '', ">{$lang['strschemas']}</option>\n";		echo "\t<option value=\"TABLE\"", ($_REQUEST['filter'] == 'TABLE') ? ' selected="selected"' : '', ">{$lang['strtables']}</option>\n";		echo "\t<option value=\"VIEW\"", ($_REQUEST['filter'] == 'VIEW') ? ' selected="selected"' : '', ">{$lang['strviews']}</option>\n";		echo "\t<option value=\"SEQUENCE\"", ($_REQUEST['filter'] == 'SEQUENCE') ? ' selected="selected"' : '', ">{$lang['strsequences']}</option>\n";		echo "\t<option value=\"COLUMN\"", ($_REQUEST['filter'] == 'COLUMN') ? ' selected="selected"' : '', ">{$lang['strcolumns']}</option>\n";		echo "\t<option value=\"RULE\"", ($_REQUEST['filter'] == 'RULE') ? ' selected="selected"' : '', ">{$lang['strrules']}</option>\n";		echo "\t<option value=\"INDEX\"", ($_REQUEST['filter'] == 'INDEX') ? ' selected="selected"' : '', ">{$lang['strindexes']}</option>\n";		echo "\t<option value=\"TRIGGER\"", ($_REQUEST['filter'] == 'TRIGGER') ? ' selected="selected"' : '', ">{$lang['strtriggers']}</option>\n";		echo "\t<option value=\"CONSTRAINT\"", ($_REQUEST['filter'] == 'CONSTRAINT') ? ' selected="selected"' : '', ">{$lang['strconstraints']}</option>\n";		echo "\t<option value=\"FUNCTION\"", ($_REQUEST['filter'] == 'FUNCTION') ? ' selected="selected"' : '', ">{$lang['strfunctions']}</option>\n";		echo "\t<option value=\"DOMAIN\"", ($_REQUEST['filter'] == 'DOMAIN') ? ' selected="selected"' : '', ">{$lang['strdomains']}</option>\n";		if ($conf['show_advanced']) {			echo "\t<option value=\"AGGREGATE\"", ($_REQUEST['filter'] == 'AGGREGATE') ? ' selected="selected"' : '', ">{$lang['straggregates']}</option>\n";			echo "\t<option value=\"TYPE\"", ($_REQUEST['filter'] == 'TYPE') ? ' selected="selected"' : '', ">{$lang['strtypes']}</option>\n";			echo "\t<option value=\"OPERATOR\"", ($_REQUEST['filter'] == 'OPERATOR') ? ' selected="selected"' : '', ">{$lang['stroperators']}</option>\n";			echo "\t<option value=\"OPCLASS\"", ($_REQUEST['filter'] == 'OPCLASS') ? ' selected="selected"' : '', ">{$lang['stropclasses']}</option>\n";			echo "\t<option value=\"CONVERSION\"", ($_REQUEST['filter'] == 'CONVERSION') ? ' selected="selected"' : '', ">{$lang['strconversions']}</option>\n";			echo "\t<option value=\"LANGUAGE\"", ($_REQUEST['filter'] == 'LANGUAGE') ? ' selected="selected"' : '', ">{$lang['strlanguages']}</option>\n";		}		echo "</select>\n";		echo "<input type=\"submit\" value=\"{$lang['strfind']}\" />\n";		echo $misc->form;		echo "<input type=\"hidden\" name=\"action\" value=\"find\" /></p>\n";		echo "</form>\n";				// Default focus		$misc->setFocus('forms[0].term');		// If a search term has been specified, then perform the search		// and display the results, grouped by object type		if ($_REQUEST['term'] != '') {			$rs = $data->findObject($_REQUEST['term'], $_REQUEST['filter']);			if ($rs->recordCount() > 0) {				$curr = '';				while (!$rs->EOF) {					// Output a new header if the current type has changed, but not if it's just changed the rule type					if ($rs->fields['type'] != $curr) {						// Short-circuit in the case of changing from table rules to view rules; table cols to view cols;						// table constraints to domain constraints						if ($rs->fields['type'] == 'RULEVIEW' && $curr == 'RULETABLE') {							$curr = $rs->fields['type'];						}						elseif ($rs->fields['type'] == 'COLUMNVIEW' && $curr == 'COLUMNTABLE') {							$curr = $rs->fields['type'];						}						elseif ($rs->fields['type'] == 'CONSTRAINTTABLE' && $curr == 'CONSTRAINTDOMAIN') {							$curr = $rs->fields['type'];						}						else {							if ($curr != '') echo "</ul>\n";							$curr = $rs->fields['type'];							echo "<h3>";							switch ($curr) {								case 'SCHEMA':									echo $lang['strschemas'];									break;								case 'TABLE':									echo $lang['strtables'];									break;								case 'VIEW':									echo $lang['strviews'];									break;								case 'SEQUENCE':									echo $lang['strsequences'];									break;								case 'COLUMNTABLE':								case 'COLUMNVIEW':									echo $lang['strcolumns'];									break;								case 'INDEX':									echo $lang['strindexes'];									break;								case 'CONSTRAINTTABLE':								case 'CONSTRAINTDOMAIN':									echo $lang['strconstraints'];									break;								case 'TRIGGER':									echo $lang['strtriggers'];									break;								case 'RULETABLE':								case 'RULEVIEW':									echo $lang['strrules'];									break;								case 'FUNCTION':									echo $lang['strfunctions'];									break;								case 'TYPE':									echo $lang['strtypes'];									break;								case 'DOMAIN':									echo $lang['strdomains'];									break;								case 'OPERATOR':									echo $lang['stroperators'];									break;								case 'CONVERSION':									echo $lang['strconversions'];									break;								case 'LANGUAGE':									echo $lang['strlanguages'];									break;								case 'AGGREGATE':									echo $lang['straggregates'];									break;								case 'OPCLASS':									echo $lang['stropclasses'];									break;							}							echo "</h3>";							echo "<ul>\n";						}					}										switch ($curr) {						case 'SCHEMA':													echo "<li><a href=\"redirect.php?subject=schema&amp;{$misc->href}&amp;schema=", $misc->printVal($rs->fields['name']), "\">", _highlight($misc->printVal($rs->fields['name']), $_REQUEST['term']), "</a></li>\n";							break;						case 'TABLE':							echo "<li>";							echo "<a href=\"tables.php?subject=schema&amp;{$misc->href}&amp;schema=", urlencode($rs->fields['schemaname']), "\">", $misc->printVal($rs->fields['schemaname']), "</a>.";							echo "<a href=\"redirect.php?subject=table&amp;{$misc->href}&amp;schema=", urlencode($rs->fields['schemaname']), "&amp;table=", 								urlencode($rs->fields['name']), "\">", _highlight($misc->printVal($rs->fields['name']), $_REQUEST['term']), "</a></li>\n";							break;						case 'VIEW':							echo "<li>";							echo "<a href=\"views.php?subject=schema&amp;{$misc->href}&amp;schema=", urlencode($rs->fields['schemaname']), "\">", $misc->printVal($rs->fields['schemaname']), "</a>.";							echo "<a href=\"redirect.php?subject=view&amp;{$misc->href}&amp;schema=", urlencode($rs->fields['schemaname']), "&amp;view=", 								urlencode($rs->fields['name']), "\">", _highlight($misc->printVal($rs->fields['name']), $_REQUEST['term']), "</a></li>\n";							break;						case 'SEQUENCE':							echo "<li>";							echo "<a href=\"sequences.php?subject=schema&amp;{$misc->href}&amp;schema=", urlencode($rs->fields['schemaname']), "\">", $misc->printVal($rs->fields['schemaname']), "</a>.";							echo "<a href=\"sequences.php?subject=sequence&amp;action=properties&amp;{$misc->href}&amp;schema=", urlencode($rs->fields['schemaname']), 								"&amp;sequence=", urlencode($rs->fields['name']), "\">", _highlight($misc->printVal($rs->fields['name']), $_REQUEST['term']), "</a></li>\n";							break;						case 'COLUMNTABLE':							echo "<li>";							echo "<a href=\"redirect.php?subject=schema&amp;{$misc->href}&amp;schema=", urlencode($rs->fields['schemaname']), "\">", $misc->printVal($rs->fields['schemaname']), "</a>.";							echo "<a href=\"tblproperties.php?subject=table&amp;{$misc->href}&amp;table=", urlencode($rs->fields['relname']), "&amp;schema=", urlencode($rs->fields['schemaname']), "\">", $misc->printVal($rs->fields['relname']), "</a>.";							echo "<a href=\"colproperties.php?{$misc->href}&amp;schema=", urlencode($rs->fields['schemaname']), "&amp;table=", 								urlencode($rs->fields['relname']), "&amp;column=", urlencode($rs->fields['name']), "\">", 								_highlight($misc->printVal($rs->fields['name']), $_REQUEST['term']), "</a></li>\n";							break;						case 'COLUMNVIEW':							echo "<li>";							echo "<a href=\"redirect.php?subject=schema&amp;{$misc->href}&amp;schema=", urlencode($rs->fields['schemaname']), "\">", $misc->printVal($rs->fields['schemaname']), "</a>.";							echo "<a href=\"viewproperties.php?subject=view&amp;{$misc->href}&amp;view=", urlencode($rs->fields['relname']), "&amp;schema=", urlencode($rs->fields['schemaname']), "\">", $misc->printVal($rs->fields['relname']), "</a>.";							echo "<a href=\"colproperties.php?{$misc->href}&amp;schema=", urlencode($rs->fields['schemaname']), "&amp;view=", 								urlencode($rs->fields['relname']), "&amp;column=", urlencode($rs->fields['name']), "\">", 								_highlight($misc->printVal($rs->fields['name']), $_REQUEST['term']), "</a></li>\n";							break;						case 'INDEX':							echo "<li>";							echo "<a href=\"redirect.php?subject=schema&amp;{$misc->href}&amp;schema=", urlencode($rs->fields['schemaname']), "\">", $misc->printVal($rs->fields['schemaname']), "</a>.";							echo "<a href=\"redirect.php?subject=table&amp;{$misc->href}&amp;table=", urlencode($rs->fields['relname']), "&amp;schema=", urlencode($rs->fields['schemaname']), "\">", $misc->printVal($rs->fields['relname']), "</a>.";							echo "<a href=\"indexes.php?{$misc->href}&amp;schema=", urlencode($rs->fields['schemaname']), "&amp;table=", urlencode($rs->fields['relname']), "\">", _highlight($misc->printVal($rs->fields['name']), $_REQUEST['term']), "</a></li>\n";							break;						case 'CONSTRAINTTABLE':							echo "<li>";							echo "<a href=\"redirect.php?subject=schema&amp;{$misc->href}&amp;schema=", urlencode($rs->fields['schemaname']), "\">", $misc->printVal($rs->fields['schemaname']), "</a>.";							echo "<a href=\"redirect.php?subject=table&amp;{$misc->href}&amp;table=", urlencode($rs->fields['relname']), "&amp;schema=", urlencode($rs->fields['schemaname']), "\">", $misc->printVal($rs->fields['relname']), "</a>.";							echo "<a href=\"constraints.php?{$misc->href}&amp;schema=", urlencode($rs->fields['schemaname']), "&amp;table=", 								urlencode($rs->fields['relname']), "\">", _highlight($misc->printVal($rs->fields['name']), $_REQUEST['term']), "</a></li>\n";							break;						case 'CONSTRAINTDOMAIN':							echo "<li>";							echo "<a href=\"domains.php?subject=schema&amp;{$misc->href}&amp;schema=", urlencode($rs->fields['schemaname']), "\">", $misc->printVal($rs->fields['schemaname']), "</a>.";							echo "<a href=\"domains.php?action=properties&amp;{$misc->href}&amp;schema=", urlencode($rs->fields['schemaname']), "&amp;domain=", urlencode($rs->fields['relname']), "\">", 								$misc->printVal($rs->fields['relname']), '.', _highlight($misc->printVal($rs->fields['name']), $_REQUEST['term']), "</a></li>\n";							break;						case 'TRIGGER':							echo "<li>";							echo "<a href=\"redirect.php?subject=schema&amp;{$misc->href}&amp;schema=", urlencode($rs->fields['schemaname']), "\">", $misc->printVal($rs->fields['schemaname']), "</a>.";							echo "<a href=\"redirect.php?subject=table&amp;{$misc->href}&amp;table=", urlencode($rs->fields['relname']), "&amp;schema=", urlencode($rs->fields['schemaname']), "\">", $misc->printVal($rs->fields['relname']), "</a>.";							echo "<a href=\"triggers.php?{$misc->href}&amp;schema=", urlencode($rs->fields['schemaname']), "&amp;table=", urlencode($rs->fields['relname']), "\">", 								_highlight($misc->printVal($rs->fields['name']), $_REQUEST['term']), "</a></li>\n";							break;						case 'RULETABLE':							echo "<li>";							echo "<a href=\"redirect.php?subject=schema&amp;{$misc->href}&amp;schema=", urlencode($rs->fields['schemaname']), "\">", $misc->printVal($rs->fields['schemaname']), "</a>.";							echo "<a href=\"redirect.php?subject=table&amp;{$misc->href}&amp;table=", urlencode($rs->fields['relname']), "&amp;schema=", urlencode($rs->fields['schemaname']), "\">", $misc->printVal($rs->fields['relname']), "</a>.";							echo "<a href=\"rules.php?subject=table&amp;{$misc->href}&amp;schema=", urlencode($rs->fields['schemaname']), "&amp;reltype=table&amp;table=", 								urlencode($rs->fields['relname']), "\">", _highlight($misc->printVal($rs->fields['name']), $_REQUEST['term']), "</a></li>\n";							break;						case 'RULEVIEW':							echo "<li>";							echo "<a href=\"redirect.php?subject=schema&amp;{$misc->href}&amp;schema=", urlencode($rs->fields['schemaname']), "\">", $misc->printVal($rs->fields['schemaname']), "</a>.";							echo "<a href=\"redirect.php?subject=view&amp;{$misc->href}&amp;view=", urlencode($rs->fields['relname']), "&amp;schema=", urlencode($rs->fields['schemaname']), "\">", $misc->printVal($rs->fields['relname']), "</a>.";							echo "<a href=\"rules.php?subject=view&amp;{$misc->href}&amp;schema=", urlencode($rs->fields['schemaname']), "&amp;reltype=view&amp;view=", 								urlencode($rs->fields['relname']), "\">", _highlight($misc->printVal($rs->fields['name']), $_REQUEST['term']), "</a></li>\n";							break;						case 'FUNCTION':							echo "<li>";							echo "<a href=\"functions.php?subject=schema&amp;{$misc->href}&amp;schema=", urlencode($rs->fields['schemaname']), "\">", $misc->printVal($rs->fields['schemaname']), "</a>.";							echo "<a href=\"functions.php?action=properties&amp;{$misc->href}&amp;schema=", urlencode($rs->fields['schemaname']), "&amp;function=", 								urlencode($rs->fields['name']), "&amp;function_oid=", urlencode($rs->fields['oid']), "\">", 								_highlight($misc->printVal($rs->fields['name']), $_REQUEST['term']), "</a></li>\n";							break;						case 'TYPE':							echo "<li>";							echo "<a href=\"types.php?subject=schema&amp;{$misc->href}&amp;schema=", urlencode($rs->fields['schemaname']), "\">", $misc->printVal($rs->fields['schemaname']), "</a>.";							echo "<a href=\"types.php?action=properties&amp;{$misc->href}&amp;schema=", urlencode($rs->fields['schemaname']), "&amp;type=", 								urlencode($rs->fields['name']), "\">", _highlight($misc->printVal($rs->fields['name']), $_REQUEST['term']), "</a></li>\n";							break;						case 'DOMAIN':							echo "<li>";							echo "<a href=\"domains.php?subject=schema&amp;{$misc->href}&amp;schema=", urlencode($rs->fields['schemaname']), "\">", $misc->printVal($rs->fields['schemaname']), "</a>.";							echo "<a href=\"domains.php?action=properties&amp;{$misc->href}&amp;schema=", urlencode($rs->fields['schemaname']), "&amp;domain=", 								urlencode($rs->fields['name']), "\">", _highlight($misc->printVal($rs->fields['name']), $_REQUEST['term']), "</a></li>\n";							break;						case 'OPERATOR':							echo "<li>";							echo "<a href=\"operators.php?subject=schema&amp;{$misc->href}&amp;schema=", urlencode($rs->fields['schemaname']), "\">", $misc->printVal($rs->fields['schemaname']), "</a>.";							echo "<a href=\"operators.php?action=properties&amp;{$misc->href}&amp;schema=", urlencode($rs->fields['schemaname']), "&amp;operator=", 								urlencode($rs->fields['name']), "&amp;operator_oid=", urlencode($rs->fields['oid']) ,"\">", _highlight($misc->printVal($rs->fields['name']), $_REQUEST['term']), "</a></li>\n";							break;						case 'CONVERSION':							echo "<li>";							echo "<a href=\"conversions.php?subject=schema&amp;{$misc->href}&amp;schema=", urlencode($rs->fields['schemaname']), "\">", $misc->printVal($rs->fields['schemaname']), "</a>.";							echo "<a href=\"conversions.php?{$misc->href}&amp;schema=", urlencode($rs->fields['schemaname']), 								"\">", _highlight($misc->printVal($rs->fields['name']), $_REQUEST['term']), "</a></li>\n";							break;						case 'LANGUAGE':							echo "<li><a href=\"languages.php?{$misc->href}\">", _highlight($misc->printVal($rs->fields['name']), $_REQUEST['term']), "</a></li>\n";							break;						case 'AGGREGATE':							echo "<li>";							echo "<a href=\"aggregates.php?subject=schema&amp;{$misc->href}&amp;schema=", urlencode($rs->fields['schemaname']), "\">", $misc->printVal($rs->fields['schemaname']), "</a>.";							echo "<a href=\"aggregates.php?{$misc->href}&amp;schema=", urlencode($rs->fields['schemaname']), "\">",								_highlight($misc->printVal($rs->fields['name']), $_REQUEST['term']), "</a></li>\n";							break;						case 'OPCLASS':							echo "<li>";							echo "<a href=\"redirect.php?subject=schema&amp;{$misc->href}&amp;schema=", urlencode($rs->fields['schemaname']), "\">", $misc->printVal($rs->fields['schemaname']), "</a>.";							echo "<a href=\"opclasses.php?{$misc->href}&amp;schema=", urlencode($rs->fields['schemaname']), "\">",								_highlight($misc->printVal($rs->fields['name']), $_REQUEST['term']), "</a></li>\n";							break;					}					$rs->moveNext();					}							echo "</ul>\n";								echo "<p>", $rs->recordCount(), " ", $lang['strobjects'], "</p>\n";			}			else echo "<p>{$lang['strnoobjects']}</p>\n";		}			}	/**	 * Displays options for database download	 */	function doExport($msg = '') {		global $data, $misc;		global $lang;		$misc->printTrail('database');		$misc->printTabs('database','export');		$misc->printMsg($msg);		echo "<form action=\"dbexport.php\" method=\"post\">\n";		echo "<table>\n";		echo "<tr><th class=\"data\">{$lang['strformat']}</th><th class=\"data\" colspan=\"2\">{$lang['stroptions']}</th></tr>\n";		// Data only		echo "<tr><th class=\"data left\" rowspan=\"2\">";		echo "<input type=\"radio\" id=\"what1\" name=\"what\" value=\"dataonly\" checked=\"checked\" /><label for=\"what1\">{$lang['strdataonly']}</label></th>\n";		echo "<td>{$lang['strformat']}</td>\n";		echo "<td><select name=\"d_format\">\n";		echo "<option value=\"copy\">COPY</option>\n";		echo "<option value=\"sql\">SQL</option>\n";		echo "</select>\n</td>\n</tr>\n";		echo "<tr><td><label for=\"d_oids\">{$lang['stroids']}</label></td><td><input type=\"checkbox\" id=\"d_oids\" name=\"d_oids\" /></td>\n</tr>\n";		// Structure only		echo "<tr><th class=\"data left\"><input type=\"radio\" id=\"what2\" name=\"what\" value=\"structureonly\" /><label for=\"what2\">{$lang['strstructureonly']}</label></th>\n";		echo "<td><label for=\"s_clean\">{$lang['strdrop']}</label></td><td><input type=\"checkbox\" id=\"s_clean\" name=\"s_clean\" /></td>\n</tr>\n";		// Structure and data		echo "<tr><th class=\"data left\" rowspan=\"3\">";		echo "<input type=\"radio\" id=\"what3\" name=\"what\" value=\"structureanddata\" /><label for=\"what3\">{$lang['strstructureanddata']}</label></th>\n";		echo "<td>{$lang['strformat']}</td>\n";		echo "<td><select name=\"sd_format\">\n";		echo "<option value=\"copy\">COPY</option>\n";		echo "<option value=\"sql\">SQL</option>\n";		echo "</select>\n</td>\n</tr>\n";		echo "<tr><td><label for=\"sd_clean\">{$lang['strdrop']}</label></td><td><input type=\"checkbox\" id=\"sd_clean\" name=\"sd_clean\" /></td>\n</tr>\n";		echo "<tr><td><label for=\"sd_oids\">{$lang['stroids']}</label></td><td><input type=\"checkbox\" id=\"sd_oids\" name=\"sd_oids\" /></td>\n</tr>\n";		echo "</table>\n";				echo "<h3>{$lang['stroptions']}</h3>\n";		echo "<p><input type=\"radio\" id=\"output1\" name=\"output\" value=\"show\" checked=\"checked\" /><label for=\"output1\">{$lang['strshow']}</label>\n";		echo "<br/><input type=\"radio\" id=\"output2\" name=\"output\" value=\"download\" /><label for=\"output2\">{$lang['strdownload']}</label>\n";		// MSIE cannot download gzip in SSL mode - it's just broken		if (!(strstr($_SERVER['HTTP_USER_AGENT'], 'MSIE') && isset($_SERVER['HTTPS']))) {			echo "<br /><input type=\"radio\" id=\"output3\" name=\"output\" value=\"gzipped\" /><label for=\"output3\">{$lang['strdownloadgzipped']}</label>\n";		}		echo "</p>\n";		echo "<p><input type=\"hidden\" name=\"action\" value=\"export\" />\n";		echo "<input type=\"hidden\" name=\"subject\" value=\"database\" />\n";		echo $misc->form;		echo "<input type=\"submit\" value=\"{$lang['strexport']}\" /></p>\n";		echo "</form>\n";	}		/**	 * Show the current status of all database variables	 */	function doVariables() {		global $data, $misc;		global $lang;		// Fetch the variables from the database		$variables = $data->getVariables();			$misc->printTrail('database');		$misc->printTabs('database','variables');		$columns = array(			'variable' => array(				'title' => $lang['strname'],				'field' => field('name'),			),			'value' => array(				'title' => $lang['strsetting'],				'field' => field('setting'),			),		);				$actions = array();				$misc->printTable($variables, $columns, $actions, $lang['strnodata']);	}	/**	 * Show all current database connections and any queries they	 * are running.	 */	function doProcesses($msg = '') {		global $data, $misc;		global $lang;		$misc->printTrail('database');		$misc->printTabs('database','processes');		$misc->printMsg($msg);		if (strlen($msg) === 0) {			echo "<br /><a id=\"control\" href=\"\"><img src=\"".$misc->icon('Refresh')."\" alt=\"{$lang['strrefresh']}\" title=\"{$lang['strrefresh']}\"/>&nbsp;{$lang['strrefresh']}</a>";		}		echo "<div id=\"data_block\">";		currentProcesses();		echo "</div>";	}		function currentProcesses($isAjax = false) {		global $data, $misc, $lang;				// Display prepared transactions		if($data->hasPreparedXacts()) {			echo "<h3>{$lang['strpreparedxacts']}</h3>\n";			$prep_xacts = $data->getPreparedXacts($_REQUEST['database']);					$columns = array(				'transaction' => array(					'title' => $lang['strxactid'],					'field' => field('transaction'),				),				'gid' => array(					'title' => $lang['strgid'],					'field' => field('gid'),				),				'prepared' => array(					'title' => $lang['strstarttime'],					'field' => field('prepared'),				),				'owner' => array(					'title' => $lang['strowner'],					'field' => field('owner'),				),			);			$actions = array();			$misc->printTable($prep_xacts, $columns, $actions, $lang['strnodata']);		}		// Fetch the processes from the database		echo "<h3>{$lang['strprocesses']}</h3>\n";		$processes = $data->getProcesses($_REQUEST['database']);						$columns = array(			'user' => array(				'title' => $lang['strusername'],				'field' => field('usename'),			),			'process' => array(				'title' => $lang['strprocess'],				'field' => field('procpid'),			),			'query' => array(				'title' => $lang['strsql'],				'field' => field('current_query'),			),			'start_time' => array(				'title' => $lang['strstarttime'],				'field' => field('query_start'),			),		);		// Build possible actions for our process list		$columns['actions'] = array('title' => $lang['stractions']);					$actions = array(			'cancel' => array(				'title' => $lang['strcancel'],				'url'   => "database.php?action=signal&amp;signal=CANCEL&amp;{$misc->href}&amp;",				'vars'  => array('procpid' => 'procpid')			),			'kill' => array(				'title' => $lang['strkill'],				'url'   => "database.php?action=signal&amp;signal=KILL&amp;{$misc->href}&amp;",				'vars'  => array('procpid' => 'procpid')			)		);			// Remove actions where not supported		if (!$data->hasQueryKill()) unset($actions['kill']);		if (!$data->hasQueryCancel()) unset($actions['cancel']);		if (count($actions) == 0) unset($columns['actions']);			// Remove query start time for <7.4		if (!isset($processes->fields['query_start'])) unset($columns['start_time']);		$misc->printTable($processes, $columns, $actions, $lang['strnodata']);				if ($isAjax) exit;	}	function currentLocks($isAjax = false) {		global $data, $misc, $lang;		// Get the info from the pg_locks view		$variables = $data->getLocks();		$columns = array(			'namespace' => array(				'title' => $lang['strschema'],				'field' => field('nspname'),			),			'tablename' => array(				'title' => $lang['strtablename'],				'field' => field('tablename'),			),			'vxid' => array(				'title' => $lang['strvirtualtransaction'],				'field' => field('virtualtransaction'),			),			'transactionid' => array(				'title' => $lang['strtransaction'],				'field' => field('transaction'),			),			'processid' => array(				'title' => $lang['strprocessid'],				'field' => field('pid'),			),			'mode' => array(				'title' => $lang['strmode'],				'field' => field('mode'),			),			'granted' => array(				'title' => $lang['strislockheld'],				'field' => field('granted'),				'type'  => 'yesno',			),		);		if (!$data->hasVirtualTransactionId()) unset($columns['vxid']);		$actions = array();		$misc->printTable($variables, $columns, $actions, $lang['strnodata']);				if ($isAjax) exit;	}		/**	 * Show the existing table locks in the current database	 */	function doLocks() {		global $data, $misc;		global $lang;		$misc->printTrail('database');		$misc->printTabs('database','locks');		echo "<br /><a id=\"control\" href=\"\"><img src=\"".$misc->icon('Refresh')."\" alt=\"{$lang['strrefresh']}\" title=\"{$lang['strrefresh']}\"/>&nbsp;{$lang['strrefresh']}</a>";		echo "<div id=\"data_block\">";		currentLocks();		echo "</div>";	}	/**	 * Allow execution of arbitrary SQL statements on a database	 */	function doSQL() {		global $data, $misc;		global $lang;		if ((!isset($_SESSION['sqlquery'])) || isset($_REQUEST['new'])) $_SESSION['sqlquery'] = '';		$misc->printTrail('database');		$misc->printTabs('database','sql');		echo "<p>{$lang['strentersql']}</p>\n";		echo "<form action=\"sql.php\" method=\"post\" enctype=\"multipart/form-data\">\n";		echo "<p>{$lang['strsql']}<br />\n";		echo "<textarea style=\"width:100%;\" rows=\"20\" cols=\"50\" name=\"query\">",			htmlspecialchars($_SESSION['sqlquery']), "</textarea></p>\n";		// Check that file uploads are enabled		if (ini_get('file_uploads')) {			// Don't show upload option if max size of uploads is zero			$max_size = $misc->inisizeToBytes(ini_get('upload_max_filesize'));			if (is_double($max_size) && $max_size > 0) {				echo "<p><input type=\"hidden\" name=\"MAX_FILE_SIZE\" value=\"{$max_size}\" />\n";				echo "<label for=\"script\">{$lang['struploadscript']}</label> <input id=\"script\" name=\"script\" type=\"file\" /></p>\n";			}		}		echo "<p><input type=\"checkbox\" id=\"paginate\" name=\"paginate\"", (isset($_REQUEST['paginate']) ? ' checked="checked"' : ''), " /><label for=\"paginate\">{$lang['strpaginate']}</label></p>\n";		echo "<p><input type=\"submit\" value=\"{$lang['strexecute']}\" />\n";		echo $misc->form;		echo "<input type=\"reset\" value=\"{$lang['strreset']}\" /></p>\n";		echo "</form>\n";		// Default focus		$misc->setFocus('forms[0].query');	}	function doTree() {		global $misc, $data, $lang, $slony;		$reqvars = $misc->getRequestVars('database');		$tabs = $misc->getNavTabs('database');		$items = $misc->adjustTabsForTree($tabs);		$attrs = array(			'text'   => noEscape(field('title')),			'icon'   => field('icon'),			'action' => url(field('url'),							$reqvars,							field('urlvars', array())						),			'branch' => url(field('url'),							$reqvars,							field('urlvars'),							array('action' => 'tree')						),		);				$misc->printTreeXML($items, $attrs);		exit;	}	require('./admin.php');	/* shortcuts: these functions exit the script */	if ($action == 'tree') doTree();	if ($action == 'refresh_locks') currentLocks(true);	if ($action == 'refresh_processes') currentProcesses(true);	/* normal flow */	if ($action == 'locks' or $action == 'processes') {		$scripts  = "<script src=\"libraries/js/jquery.js\" type=\"text/javascript\"></script>\n";		$scripts .= "<script src=\"js/database.js\" type=\"text/javascript\"></script>";		$refreshTime = $conf['ajax_refresh'] * 1000;		$scripts .= "<script type=\"text/javascript\">\n";		$scripts .= "var Database = {\n";		$scripts .= "ajax_time_refresh: {$refreshTime},\n";		$scripts .= "str_start: {text:'{$lang['strstart']}',icon: '". $misc->icon('Execute') ."'},\n";		$scripts .= "str_stop: {text:'{$lang['strstop']}',icon: '". $misc->icon('Stop') ."'},\n";		$scripts .= "load_icon: '". $misc->icon('Loading') ."',\n";		$scripts .= "server:'{$_REQUEST['server']}',\n";		$scripts .= "dbname:'{$_REQUEST['database']}',\n";		$scripts .= "action:'refresh_{$action}',\n";		$scripts .= "errmsg: '". str_replace("'", "\'", $lang['strconnectionfail']) ."'\n";		$scripts .= "};\n";		$scripts .= "</script>\n";	}	$misc->printHeader($lang['strdatabase'], $scripts);	$misc->printBody();	switch ($action) {		case 'find':			if (isset($_REQUEST['term'])) doFind(false);			else doFind(true);			break;		case 'sql':			doSQL();			break;		case 'variables':			doVariables();			break;		case 'processes':			doProcesses();			break;		case 'locks':			doLocks();			break;		case 'export':			doExport();			break;		case 'signal':			doSignal();			break;		default:			if (adminActions($action, 'database') === false) doSQL();			break;	}	$misc->printFooter();?>
<?php	/**	 * Manage privileges in a database	 *	 * $Id: privileges.php,v 1.45 2007/09/13 13:41:01 ioguix Exp $	 */	// Include application functions	include_once('./libraries/lib.inc.php');		$action = (isset($_REQUEST['action'])) ? $_REQUEST['action'] : '';	if (!isset($msg)) $msg = '';	/**	 * Grant permissions on an object to a user	 * @param $confirm To show entry screen	 * @param $mode 'grant' or 'revoke'	 * @param $msg (optional) A message to show	 */	function doAlter($confirm, $mode, $msg = '') {		global $data, $misc;		global $lang;		if (!isset($_REQUEST['username'])) $_REQUEST['username'] = array();		if (!isset($_REQUEST['groupname'])) $_REQUEST['groupname'] = array();		if (!isset($_REQUEST['privilege'])) $_REQUEST['privilege'] = array();			if ($confirm) {			// Get users from the database			$users = $data->getUsers();			// Get groups from the database			$groups = $data->getGroups();					$misc->printTrail($_REQUEST['subject']);						switch ($mode) {				case 'grant':					$misc->printTitle($lang['strgrant'],'pg.privilege.grant');					break;				case 'revoke':					$misc->printTitle($lang['strrevoke'],'pg.privilege.revoke');					break;			}			$misc->printMsg($msg);						echo "<form action=\"privileges.php\" method=\"post\">\n";			echo "<table>\n";			echo "<tr><th class=\"data left\">{$lang['strusers']}</th>\n";			echo "<td class=\"data1\"><select name=\"username[]\" multiple=\"multiple\" size=\"", min(6, $users->recordCount()), "\">\n";			while (!$users->EOF) {				$uname = htmlspecialchars($users->fields['usename']);				echo "<option value=\"{$uname}\"",					in_array($users->fields['usename'], $_REQUEST['username']) ? ' selected="selected"' : '', ">{$uname}</option>\n";				$users->moveNext();			}			echo "</select></td></tr>\n";			echo "<tr><th class=\"data left\">{$lang['strgroups']}</th>\n";			echo "<td class=\"data1\">\n";			echo "<input type=\"checkbox\" id=\"public\" name=\"public\"", (isset($_REQUEST['public']) ? ' checked="checked"' : ''), " /><label for=\"public\">PUBLIC</label>\n";			// Only show groups if there are groups!			if ($groups->recordCount() > 0) {				echo "<br /><select name=\"groupname[]\" multiple=\"multiple\" size=\"", min(6, $groups->recordCount()), "\">\n";				while (!$groups->EOF) {					$gname = htmlspecialchars($groups->fields['groname']);					echo "<option value=\"{$gname}\"",						in_array($groups->fields['groname'], $_REQUEST['groupname']) ? ' selected="selected"' : '', ">{$gname}</option>\n";					$groups->moveNext();				}				echo "</select>\n";			}			echo "</td></tr>\n";			echo "<tr><th class=\"data left required\">{$lang['strprivileges']}</th>\n";			echo "<td class=\"data1\">\n";			foreach ($data->privlist[$_REQUEST['subject']] as $v) {				$v = htmlspecialchars($v);				echo "<input type=\"checkbox\" id=\"privilege[$v]\" name=\"privilege[$v]\"", 							isset($_REQUEST['privilege'][$v]) ? ' checked="checked"' : '', " /><label for=\"privilege[$v]\">{$v}</label><br />\n";			}			echo "</td></tr>\n";			// Grant option			if ($data->hasGrantOption()) {				echo "<tr><th class=\"data left\">{$lang['stroptions']}</th>\n";				echo "<td class=\"data1\">\n";				if ($mode == 'grant') {					echo "<input type=\"checkbox\" id=\"grantoption\" name=\"grantoption\"", 								isset($_REQUEST['grantoption']) ? ' checked="checked"' : '', " /><label for=\"grantoption\">GRANT OPTION</label>\n";				}				elseif ($mode == 'revoke') {					echo "<input type=\"checkbox\" id=\"grantoption\" name=\"grantoption\"", 								isset($_REQUEST['grantoption']) ? ' checked="checked"' : '', " /><label for=\"grantoption\">GRANT OPTION FOR</label><br />\n";					echo "<input type=\"checkbox\" id=\"cascade\" name=\"cascade\"", 								isset($_REQUEST['cascade']) ? ' checked="checked"' : '', " /><label for=\"cascade\">CASCADE</label><br />\n";				}				echo "</td></tr>\n";			}			echo "</table>\n";			echo "<p><input type=\"hidden\" name=\"action\" value=\"save\" />\n";			echo "<input type=\"hidden\" name=\"mode\" value=\"", htmlspecialchars($mode), "\" />\n";			echo "<input type=\"hidden\" name=\"subject\" value=\"", htmlspecialchars($_REQUEST['subject']), "\" />\n";			if (isset($_REQUEST[$_REQUEST['subject'].'_oid']))				echo "<input type=\"hidden\" name=\"", htmlspecialchars($_REQUEST['subject'].'_oid'),					"\" value=\"", htmlspecialchars($_REQUEST[$_REQUEST['subject'].'_oid']), "\" />\n";			echo "<input type=\"hidden\" name=\"", htmlspecialchars($_REQUEST['subject']),				"\" value=\"", htmlspecialchars($_REQUEST[$_REQUEST['subject']]), "\" />\n";			if ($_REQUEST['subject'] == 'column')				echo "<input type=\"hidden\" name=\"table\" value=\"",					htmlspecialchars($_REQUEST['table']), "\" />\n";			echo $misc->form;			if ($mode == 'grant')				echo "<input type=\"submit\" name=\"grant\" value=\"{$lang['strgrant']}\" />\n";			elseif ($mode == 'revoke')				echo "<input type=\"submit\" name=\"revoke\" value=\"{$lang['strrevoke']}\" />\n";			echo "<input type=\"submit\" name=\"cancel\" value=\"{$lang['strcancel']}\" /></p>";			echo "</form>\n";		}		else {			// Determine whether object should be ref'd by name or oid.			if (isset($_REQUEST[$_REQUEST['subject'].'_oid']))				$object = $_REQUEST[$_REQUEST['subject'].'_oid'];			else				$object = $_REQUEST[$_REQUEST['subject']];			if (isset($_REQUEST['table'])) $table = $_REQUEST['table'];			else $table = null;			$status = $data->setPrivileges(($mode == 'grant') ? 'GRANT' : 'REVOKE', $_REQUEST['subject'], $object,				isset($_REQUEST['public']), $_REQUEST['username'], $_REQUEST['groupname'], array_keys($_REQUEST['privilege']),				isset($_REQUEST['grantoption']), isset($_REQUEST['cascade']), $table);			if ($status == 0)				doDefault($lang['strgranted']);			elseif ($status == -3 || $status == -4)				doAlter(true, $_REQUEST['mode'], $lang['strgrantbad']);			else				doAlter(true, $_REQUEST['mode'], $lang['strgrantfailed']);		}	}	/**	 * Show permissions on a database, namespace, relation, language or function	 */	function doDefault($msg = '') {		global $data, $misc, $database;		global $lang;		$misc->printTrail($_REQUEST['subject']);				# @@@FIXME: This switch is just a temporary solution,		# need a better way, maybe every type of object should		# have a tab bar???		switch ($_REQUEST['subject']) {			case 'server':			case 'database':			case 'schema':			case 'table':			case 'column':			case 'view':				$misc->printTabs($_REQUEST['subject'], 'privileges');				break;			default:				$misc->printTitle($lang['strprivileges'], 'pg.privilege');		}		$misc->printMsg($msg);		// Determine whether object should be ref'd by name or oid.		if (isset($_REQUEST[$_REQUEST['subject'].'_oid']))			$object = $_REQUEST[$_REQUEST['subject'].'_oid'];		else			$object = $_REQUEST[$_REQUEST['subject']];				// Get the privileges on the object, given its type		if ($_REQUEST['subject'] == 'column')			$privileges = $data->getPrivileges($object, 'column', $_REQUEST['table']);		else			$privileges = $data->getPrivileges($object, $_REQUEST['subject']);		if (sizeof($privileges) > 0) {			echo "<table>\n";			if ($data->hasRoles())				echo "<tr><th class=\"data\">{$lang['strrole']}</th>";			else				echo "<tr><th class=\"data\">{$lang['strtype']}</th><th class=\"data\">{$lang['struser']}/{$lang['strgroup']}</th>";			foreach ($data->privlist[$_REQUEST['subject']] as $v2) {				// Skip over ALL PRIVILEGES				if ($v2 == 'ALL PRIVILEGES') continue;				echo "<th class=\"data\">{$v2}</th>\n";			}			if ($data->hasGrantOption()) {				echo "<th class=\"data\">{$lang['strgrantor']}</th>";			}			echo "</tr>\n";			// Loop over privileges, outputting them			$i = 0;			foreach ($privileges as $v) {				$id = (($i % 2) == 0 ? '1' : '2');				echo "<tr class=\"data{$id}\">\n";				if (!$data->hasRoles())					echo "<td>", $misc->printVal($v[0]), "</td>\n";				echo "<td>", $misc->printVal($v[1]), "</td>\n";				foreach ($data->privlist[$_REQUEST['subject']] as $v2) {					// Skip over ALL PRIVILEGES					if ($v2 == 'ALL PRIVILEGES') continue;					echo "<td>";					if (in_array($v2, $v[2]))						echo $lang['stryes'];					else						echo $lang['strno'];					// If we have grant option for this, end mark					if ($data->hasGrantOption() && in_array($v2, $v[4])) echo $lang['strasterisk'];					echo "</td>\n";				}				if ($data->hasGrantOption()) {					echo "<td>", $misc->printVal($v[3]), "</td>\n";				}				echo "</tr>\n";				$i++;			}			echo "</table>";		}		else {			echo "<p>{$lang['strnoprivileges']}</p>\n";		}				// Links for granting to a user or group		switch ($_REQUEST['subject']) {			case 'table':			case 'view':			case 'sequence':			case 'function':			case 'tablespace':				$allurl = "{$_REQUEST['subject']}s.php";				$alltxt = $lang["strshowall{$_REQUEST['subject']}s"];				break;			case 'schema':				$allurl = "database.php";				$alltxt = $lang["strshowallschemas"];				break;			case 'database':				$allurl = 'all_db.php';				$alltxt = $lang['strshowalldatabases'];				break;		}				$subject = htmlspecialchars(urlencode($_REQUEST['subject']));		$object = htmlspecialchars(urlencode($_REQUEST[$_REQUEST['subject']]));				if ($_REQUEST['subject'] == 'function') {			$objectoid = $_REQUEST[$_REQUEST['subject'].'_oid'];			$alterurl = "privileges.php?action=alter&amp;{$misc->href}&amp;{$subject}={$object}&amp;{$subject}_oid={$objectoid}&amp;subject={$subject}&amp;mode=";		}		else if ($_REQUEST['subject'] == 'column') {			$alterurl = "privileges.php?action=alter&amp;{$misc->href}&amp;{$subject}={$object}"				."&amp;subject={$subject}&amp;table=". urlencode($_REQUEST['table']) ."&amp;mode=";		}		else {			$alterurl = "privileges.php?action=alter&amp;{$misc->href}&amp;{$subject}={$object}&amp;subject={$subject}&amp;mode=";		}			echo "<ul class=\"navlink\">\n\t<li><a href=\"{$alterurl}grant\">{$lang['strgrant']}</a></li>\n";		echo "\t<li><a href=\"{$alterurl}revoke\">{$lang['strrevoke']}</a></li>\n";		if (isset($allurl))			echo "\t<li><a href=\"{$allurl}?{$misc->href}\">{$alltxt}</a></li>\n";				echo "</ul>\n";	}	$misc->printHeader($lang['strprivileges']);	$misc->printBody();	switch ($action) {		case 'save':			if (isset($_REQUEST['cancel'])) doDefault();			else doAlter(false, $_REQUEST['mode']);			break;		case 'alter':			doAlter(true, $_REQUEST['mode']);			break;		default:			doDefault();			break;	}		$misc->printFooter();	?>
<?php	/**	 * Manage languages in a database	 *	 * $Id: languages.php,v 1.13 2007/08/31 18:30:11 ioguix Exp $	 */	// Include application functions	include_once('./libraries/lib.inc.php');		$action = (isset($_REQUEST['action'])) ? $_REQUEST['action'] : '';	if (!isset($msg)) $msg = '';	/**	 * Show default list of languages in the database	 */	function doDefault($msg = '') {		global $data, $misc, $database;		global $lang;				$misc->printTrail('database');		$misc->printTabs('database','languages');		$misc->printMsg($msg);				$languages = $data->getLanguages();		$columns = array(			'language' => array(				'title' => $lang['strname'],				'field' => field('lanname'),			),			'trusted' => array(				'title' => $lang['strtrusted'],				'field' => field('lanpltrusted'),				'type'  => 'yesno',			),			'function' => array(				'title' => $lang['strfunction'],				'field' => field('lanplcallf'),			),		);		$actions = array();		$misc->printTable($languages, $columns, $actions, $lang['strnolanguages']);	}	/**	 * Generate XML for the browser tree.	 */	function doTree() {		global $misc, $data;				$languages = $data->getLanguages();				$attrs = array(			'text'   => field('lanname'),			'icon'   => 'Language'		);				$misc->printTreeXML($languages, $attrs);		exit;	}		if ($action == 'tree') doTree();		$misc->printHeader($lang['strlanguages']);	$misc->printBody();	switch ($action) {		default:			doDefault();			break;	}		$misc->printFooter();?>
<?php	/**	 * Process an arbitrary SQL query - tricky!  The main problem is that	 * unless we implement a full SQL parser, there's no way of knowing	 * how many SQL statements have been strung together with semi-colons	 * @param $_SESSION['sqlquery'] The SQL query string to execute	 *	 * $Id: sql.php,v 1.43 2008/01/10 20:19:27 xzilla Exp $	 */	// Prevent timeouts on large exports (non-safe mode only)	if (!ini_get('safe_mode')) set_time_limit(0);	// Include application functions	include_once('./libraries/lib.inc.php');	/**	 * This is a callback function to display the result of each separate query	 * @param ADORecordSet $rs The recordset returned by the script execetor	 */	function sqlCallback($query, $rs, $lineno) {		global $data, $misc, $lang, $_connection;		// Check if $rs is false, if so then there was a fatal error		if ($rs === false) {			echo htmlspecialchars($_FILES['script']['name']), ':', $lineno, ': ', nl2br(htmlspecialchars($_connection->getLastError())), "<br/>\n";		}		else {			// Print query results			switch (pg_result_status($rs)) {				case PGSQL_TUPLES_OK:					// If rows returned, then display the results					$num_fields = pg_numfields($rs);					echo "<p><table>\n<tr>";					for ($k = 0; $k < $num_fields; $k++) {						echo "<th class=\"data\">", $misc->printVal(pg_fieldname($rs, $k)), "</th>";					}							$i = 0;					$row = pg_fetch_row($rs);					while ($row !== false) {						$id = (($i % 2) == 0 ? '1' : '2');						echo "<tr class=\"data{$id}\">\n";						foreach ($row as $k => $v) {							echo "<td style=\"white-space:nowrap;\">", $misc->printVal($v, pg_fieldtype($rs, $k), array('null' => true)), "</td>";						}													echo "</tr>\n";						$row = pg_fetch_row($rs);						$i++;					};					echo "</table><br/>\n";					echo $i, " {$lang['strrows']}</p>\n";					break;				case PGSQL_COMMAND_OK:					// If we have the command completion tag					if (version_compare(phpversion(), '4.3', '>=')) {						echo htmlspecialchars(pg_result_status($rs, PGSQL_STATUS_STRING)), "<br/>\n";					}					// Otherwise if any rows have been affected					elseif ($data->conn->Affected_Rows() > 0) {						echo $data->conn->Affected_Rows(), " {$lang['strrowsaff']}<br/>\n";					}					// Otherwise output nothing...					break;				case PGSQL_EMPTY_QUERY:					break;				default:					break;			}		}	}	// We need to store the query in a session for editing purposes	// We avoid GPC vars to avoid truncating long queries	// If we came from a report, we need to look up the query	if (isset($_REQUEST['subject']) && $_REQUEST['subject'] == 'report' ) {		global $data, $misc;		include_once('./classes/Reports.php');		$reportsdb = new Reports($status);		$report = $reportsdb->getReport($_REQUEST['reportid']);		$_SESSION['sqlquery'] = $report->fields['report_sql'];		} 	elseif (isset($_POST['query'])) {		// Or maybe we came from an sql form		$_SESSION['sqlquery'] = $_POST['query'];	} else {		echo "could not find the query!!";	}		// Pagination maybe set by a get link that has it as FALSE,	// if that's the case, unset the variable.	if (isset($_REQUEST['paginate']) && $_REQUEST['paginate'] == 'f') {		unset($_REQUEST['paginate']);		unset($_POST['paginate']);		unset($_GET['paginate']);	}	// Check to see if pagination has been specified. In that case, send to display	// script for pagination	/* if a file is given or the request is an explain, do not paginate */	if (isset($_REQUEST['paginate']) && !(isset($_FILES['script']) && $_FILES['script']['size'] > 0)			&& (preg_match('/^\s*explain/i', $_SESSION['sqlquery']) == 0)) {		include('./display.php');		exit;	}		$subject = isset($_REQUEST['subject'])? $_REQUEST['subject'] : '';	$misc->printHeader($lang['strqueryresults']);	$misc->printBody();	$misc->printTrail('database');	$misc->printTitle($lang['strqueryresults']);	// Set the schema search path	if (isset($_REQUEST['search_path'])) {		if ($data->setSearchPath(array_map('trim',explode(',',$_REQUEST['search_path']))) != 0) {			$misc->printFooter();			exit;		}	}	// May as well try to time the query	if (function_exists('microtime')) {		list($usec, $sec) = explode(' ', microtime());		$start_time = ((float)$usec + (float)$sec);	}	else $start_time = null;	// Execute the query.  If it's a script upload, special handling is necessary	if (isset($_FILES['script']) && $_FILES['script']['size'] > 0)		$data->executeScript('script', 'sqlCallback');	else {		// Set fetch mode to NUM so that duplicate field names are properly returned		$data->conn->setFetchMode(ADODB_FETCH_NUM);		$rs = $data->conn->Execute($_SESSION['sqlquery']);		// $rs will only be an object if there is no error		if (is_object($rs)) {			// Request was run, saving it in history			if(!isset($_REQUEST['nohistory']))				$misc->saveScriptHistory($_SESSION['sqlquery']);			// Now, depending on what happened do various things				// First, if rows returned, then display the results			if ($rs->recordCount() > 0) {				echo "<table>\n<tr>";				foreach ($rs->fields as $k => $v) {					$finfo = $rs->fetchField($k);					echo "<th class=\"data\">", $misc->printVal($finfo->name), "</th>";				}                                echo "</tr>\n";					$i = 0;						while (!$rs->EOF) {					$id = (($i % 2) == 0 ? '1' : '2');					echo "<tr class=\"data{$id}\">\n";					foreach ($rs->fields as $k => $v) {						$finfo = $rs->fetchField($k);						echo "<td style=\"white-space:nowrap;\">", $misc->printVal($v, $finfo->type, array('null' => true)), "</td>";					}												echo "</tr>\n";					$rs->moveNext();					$i++;				}				echo "</table>\n";				echo "<p>", $rs->recordCount(), " {$lang['strrows']}</p>\n";			}			// Otherwise if any rows have been affected			elseif ($data->conn->Affected_Rows() > 0) {				echo "<p>", $data->conn->Affected_Rows(), " {$lang['strrowsaff']}</p>\n";			}			// Otherwise nodata to print			else echo '<p>', $lang['strnodata'], "</p>\n";		}	}	// May as well try to time the query	if ($start_time !== null) {		list($usec, $sec) = explode(' ', microtime());		$end_time = ((float)$usec + (float)$sec);			// Get duration in milliseconds, round to 3dp's			$duration = number_format(($end_time - $start_time) * 1000, 3);	}	else $duration = null;	// Reload the browser as we may have made schema changes	$_reload_browser = true;	// Display duration if we know it	if ($duration !== null) {		echo "<p>", sprintf($lang['strruntime'], $duration), "</p>\n";	}		echo "<p>{$lang['strsqlexecuted']}</p>\n";				echo "<ul class=\"navlink\">\n";		// Return	if (isset($_REQUEST['return_url']) && isset($_REQUEST['return_desc']))		echo "\t<li><a href=\"{$_REQUEST['return_url']}\">{$_REQUEST['return_desc']}</a></li>\n";	// Edit			echo "\t<li><a href=\"database.php?database=", urlencode($_REQUEST['database']),		"&amp;server=", urlencode($_REQUEST['server']), "&amp;action=sql\">{$lang['streditsql']}</a></li>\n";					// Create report	if (($subject !== 'report') && $conf['show_reports'] && isset($rs) && is_object($rs) && $rs->recordCount() > 0)		echo "\t<li><a href=\"reports.php?{$misc->href}&amp;action=create&amp;report_sql=",			urlencode($_SESSION['sqlquery']), "\">{$lang['strcreatereport']}</a></li>\n";		// Create view and download	if (isset($_SESSION['sqlquery']) && isset($rs) && is_object($rs) && $rs->recordCount() > 0) {		// Report views don't set a schema, so we need to disable create view in that case		if (isset($_REQUEST['schema'])) 			echo "\t<li><a href=\"views.php?action=create&amp;formDefinition=",				urlencode($_SESSION['sqlquery']), "&amp;{$misc->href}\">{$lang['strcreateview']}</a></li>\n";		echo "\t<li><a href=\"dataexport.php?query=", urlencode($_SESSION['sqlquery']);		if (isset($_REQUEST['search_path']))			echo "&amp;search_path=", urlencode($_REQUEST['search_path']);		echo "&amp;{$misc->href}\">{$lang['strdownload']}</a></li>\n";	}	echo "</ul>\n";		$misc->printFooter();?>
<?php/** * PostgreSQL 8.1 support * * $Id: Postgres81.php,v 1.21 2008/01/19 13:46:15 ioguix Exp $ */include_once('./classes/database/Postgres82.php');class Postgres81 extends Postgres82 {	var $major_version = 8.1;	// List of all legal privileges that can be applied to different types	// of objects.	var $privlist = array(		'table' => array('SELECT', 'INSERT', 'UPDATE', 'DELETE', 'RULE', 'REFERENCES', 'TRIGGER', 'ALL PRIVILEGES'),		'view' => array('SELECT', 'INSERT', 'UPDATE', 'DELETE', 'RULE', 'REFERENCES', 'TRIGGER', 'ALL PRIVILEGES'),		'sequence' => array('SELECT', 'UPDATE', 'ALL PRIVILEGES'),		'database' => array('CREATE', 'TEMPORARY', 'ALL PRIVILEGES'),		'function' => array('EXECUTE', 'ALL PRIVILEGES'),		'language' => array('USAGE', 'ALL PRIVILEGES'),		'schema' => array('CREATE', 'USAGE', 'ALL PRIVILEGES'),		'tablespace' => array('CREATE', 'ALL PRIVILEGES')	);	// List of characters in acl lists and the privileges they	// refer to.	var $privmap = array(		'r' => 'SELECT',		'w' => 'UPDATE',		'a' => 'INSERT',		'd' => 'DELETE',		'R' => 'RULE',		'x' => 'REFERENCES',		't' => 'TRIGGER',		'X' => 'EXECUTE',		'U' => 'USAGE',		'C' => 'CREATE',		'T' => 'TEMPORARY'	);	// Array of allowed index types	var $typIndexes = array('BTREE', 'RTREE', 'GIST', 'HASH');	/**	 * Constructor	 * @param $conn The database connection	 */	function Postgres81($conn) {		$this->Postgres82($conn);	}	// Help functions		function getHelpPages() {		include_once('./help/PostgresDoc81.php');		return $this->help_page;	}	// Database functions	/**	 * Returns all databases available on the server	 * @return A list of databases, sorted alphabetically	 */	function getDatabases($currentdatabase = NULL) {		global $conf, $misc;				$server_info = $misc->getServerInfo();				if (isset($conf['owned_only']) && $conf['owned_only'] && !$this->isSuperUser($server_info['username'])) {			$username = $server_info['username'];			$this->clean($username);			$clause = " AND pr.rolname='{$username}'";		}		else $clause = '';		if ($currentdatabase != NULL) {			$this->clean($currentdatabase);			$orderby = "ORDER BY pdb.datname = '{$currentdatabase}' DESC, pdb.datname";		}		else			$orderby = "ORDER BY pdb.datname";		if (!$conf['show_system'])			$where = ' AND NOT pdb.datistemplate';		else			$where = ' AND pdb.datallowconn';		$sql = "SELECT pdb.datname AS datname, pr.rolname AS datowner, pg_encoding_to_char(encoding) AS datencoding,                               (SELECT description FROM pg_catalog.pg_description pd WHERE pdb.oid=pd.objoid) AS datcomment,                               (SELECT spcname FROM pg_catalog.pg_tablespace pt WHERE pt.oid=pdb.dattablespace) AS tablespace,							   pg_catalog.pg_database_size(pdb.oid) as dbsize                         FROM pg_catalog.pg_database pdb LEFT JOIN pg_catalog.pg_roles pr ON (pdb.datdba = pr.oid)  						WHERE true 			{$where}			{$clause}			{$orderby}";		return $this->selectSet($sql);	}	/**	 * Alters a database	 * the multiple return vals are for postgres 8+ which support more functionality in alter database	 * @param $dbName The name of the database	 * @param $newName new name for the database	 * @param $newOwner The new owner for the database	 * @return 0 success	 * @return -1 transaction error	 * @return -2 owner error	 * @return -3 rename error	 */	function alterDatabase($dbName, $newName, $newOwner = '', $comment = '') {		$this->clean($dbName);		$this->clean($newName);		$this->clean($newOwner);		//ignore $comment, not supported pre 8.2					$status = $this->beginTransaction();		if ($status != 0) {			$this->rollbackTransaction();			return -1;		}		if ($dbName != $newName) {			$status = $this->alterDatabaseRename($dbName, $newName);			if ($status != 0) {				$this->rollbackTransaction();				return -3;			}		}		$status = $this->alterDatabaseOwner($newName, $newOwner);		if ($status != 0) {			$this->rollbackTransaction();			return -2;		}		return $this->endTransaction();	}	// Tablespace functions		/**	 * Retrieves a tablespace's information	 * @return A recordset	 */	function getTablespace($spcname) {		$this->clean($spcname);		$sql = "SELECT spcname, pg_catalog.pg_get_userbyid(spcowner) AS spcowner, spclocation					FROM pg_catalog.pg_tablespace WHERE spcname='{$spcname}'";		return $this->selectSet($sql);	}		/**	 * Retrieves information for all tablespaces	 * @param $all Include all tablespaces (necessary when moving objects back to the default space)	 * @return A recordset	 */	function getTablespaces($all = false) {		global $conf;				$sql = "SELECT spcname, pg_catalog.pg_get_userbyid(spcowner) AS spcowner, spclocation					FROM pg_catalog.pg_tablespace";		if (!$conf['show_system'] && !$all) {			$sql .= " WHERE spcname NOT LIKE 'pg\\\\_%'";	}			$sql .= " ORDER BY spcname";		return $this->selectSet($sql);	}	// Capabilities	function hasCreateTableLikeWithConstraints() {return false;}	function hasSharedComments() {return false;}	function hasConcurrentIndexBuild() {return false;}}?>
