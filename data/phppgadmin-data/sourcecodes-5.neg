<?php	/**	 * Manage servers	 *	 * $Id: servers.php,v 1.12 2008/02/18 22:20:26 ioguix Exp $	 */	// Include application functions	$_no_db_connection = true;	include_once('./libraries/lib.inc.php');		$action = (isset($_REQUEST['action'])) ? $_REQUEST['action'] : '';	if (!isset($msg)) $msg = '';		function doLogout() {		global $misc, $lang, $_reload_browser;				$server_info = $misc->getServerInfo($_REQUEST['logoutServer']);		$misc->setServerInfo(null, null, $_REQUEST['logoutServer']);		unset($_SESSION['sharedUsername'], $_SESSION['sharedPassword']);		doDefault(sprintf($lang['strlogoutmsg'], $server_info['desc']));				$_reload_browser = true;	}	function doDefault($msg = '') {		global $conf, $misc;		global $lang;				$misc->printTabs('root','servers');		$misc->printMsg($msg);				$group = isset($_GET['group']) ? $_GET['group'] : false;				$servers = $misc->getServers(true, $group);				function svPre(&$rowdata, $actions) {			$actions['logout']['disable'] = empty($rowdata->fields['username']);			return $actions;		}				$columns = array(			'server' => array(				'title' => $lang['strserver'],				'field' => field('desc'),				'url'   => "redirect.php?subject=server&amp;",				'vars'  => array('server' => 'id'),			),			'host' => array(				'title' => $lang['strhost'],				'field' => field('host'),			),			'port' => array(				'title' => $lang['strport'],				'field' => field('port'),			),			'username' => array(				'title' => $lang['strusername'],				'field' => field('username'),			),			'actions' => array(				'title' => $lang['stractions'],			),		);				$actions = array(			'logout' => array(				'title' => $lang['strlogout'],				'url'   => "servers.php?action=logout&amp;",				'vars'  => array('logoutServer' => 'id'),			),		);				if (($group !== false) and isset($conf['srv_groups'][$group])) {			printf("<h2>{$lang['strgroupservers']}</h2>", htmlentities($conf['srv_groups'][$group]['desc']));			$actions['logout']['url'] .= "group=" . htmlentities($group) . "&amp;";		}				$misc->printTable($servers, $columns, $actions, $lang['strnoobjects'], 'svPre');				if (isset($conf['srv_groups'])) {			echo "<br /><ul class=\"navlink\">\n";			echo "\t<li><a href=\"servers.php\">{$lang['strallservers']}</a></li>\n";			foreach ($conf['srv_groups'] as $id => $grp) {				echo "\t<li><a href=\"servers.php?group={$id}\">", htmlentities($grp['desc']), "</a></li>\n";			}			echo "</ul>\n";					}	}		function doTree($group = false) {		global $misc;				$servers = $misc->getServers(true, $group);				$reqvars = $misc->getRequestVars('server');				$attrs = array(			'text'   => field('desc'),						// Show different icons for logged in/out			'icon'   => ifempty(field('username'), 'DisconnectedServer', 'Server'),						'toolTip'=> field('id'),						'action' => url('redirect.php',							$reqvars,							array('server' => field('id'))						),						// Only create a branch url if the user has			// logged into the server.			'branch' => ifempty(field('username'), false,							url('all_db.php',								$reqvars,								array(									'action' => 'tree',									'server' => field('id')								)							)						),		);				$misc->printTreeXML($servers, $attrs);		exit;	}		function doGroupsTree() {		global $misc;				$groups = $misc->getServersGroups();		function escape($fields) {			global $lang;			if ($fields['id'] === 'all') {				return $lang['strallservers'];			}			else return value(field('desc'), $fields, 'xml');		}		$attrs = array(			'text'   => noEscape(callback('escape')),			'icon'   => 'Servers',						'action' => url('servers.php',				array(					'group' => field('id')				)			),			'branch' => url('servers.php',				array(					'action' => 'tree',					'group' => field('id')				)			)		);				$misc->printTreeXML($groups, $attrs);		exit;	}		if ($action == 'tree') {		if (isset($_GET['group'])) doTree($_GET['group']);		else doTree(false);	}	if ($action == 'groupstree') doGroupsTree();		$misc->printHeader($lang['strservers']);	$misc->printBody();	$misc->printTrail('root');	switch ($action) {		case 'logout':			doLogout();			break;		default:			doDefault($msg);			break;	}	$misc->printFooter();?>
<?php	include_once('./libraries/lib.inc.php');	if(isset($_POST['offset']))		$offset = " OFFSET {$_POST['offset']}";	else {		$_POST['offset'] = 0;		$offset = " OFFSET 0";	}	$keynames = array();	foreach ($_POST['fkeynames'] as $k => $v) {		$fkeynames[$k] = html_entity_decode($v, ENT_QUOTES);	}	$keyspos = array_combine($fkeynames, $_POST['keys']);	$f_schema = html_entity_decode($_POST['f_schema'], ENT_QUOTES);	$data->fieldClean($f_schema);	$f_table = html_entity_decode($_POST['f_table'], ENT_QUOTES);	$data->fieldClean($f_table);	$f_attname = $fkeynames[$_POST['fattpos'][0]];	$data->fieldClean($f_attname);	$q = "SELECT *		FROM \"{$f_schema}\".\"{$f_table}\"		WHERE \"{$f_attname}\"::text LIKE '{$_POST['fvalue']}%'		ORDER BY \"{$f_attname}\" LIMIT 12 {$offset};";	$res = $data->selectSet($q);	if (!$res->EOF) {		echo "<table class=\"ac_values\">";		echo '<tr>';		foreach (array_keys($res->fields) as $h) {			echo '<th>';			if (in_array($h, $fkeynames))				echo '<img src="'. $misc->icon('ForeignKey') .'" alt="[referenced key]" />';			echo htmlentities($h), '</th>';					}		echo "</tr>\n";		$i=0;		while ((!$res->EOF) && ($i < 11)) {			echo "<tr class=\"acline\">";			foreach ($res->fields as $n => $v) {				if (in_array($n, $fkeynames))					echo "<td><a href=\"javascript:void(0)\" class=\"fkval\" name=\"{$keyspos[$n]}\">",htmlentities($v), "</a></td>";				else					echo "<td><a href=\"javascript:void(0)\">", htmlentities($v), "</a></td>";			}			echo "</tr>\n";			$i++;			$res->moveNext();		}				echo "</table>\n";		$page_tests='';		$js = "<script type=\"text/javascript\">\n";				if ($_POST['offset']) {			echo "<a href=\"javascript:void(0)\" id=\"fkprev\">&lt;&lt; Prev</a>";			$js.= "fkl_hasprev=true;\n";		}		else			$js.= "fkl_hasprev=false;\n";		if ($res->recordCount() == 12) {			$js.= "fkl_hasnext=true;\n";			echo "&nbsp;&nbsp;&nbsp;<a href=\"javascript:void(0)\" id=\"fknext\">Next &gt;&gt;</a>";		}		else			$js.= "fkl_hasnext=false;\n";				echo $js ."</script>";	}	else {		printf("<p>{$lang['strnofkref']}</p>", "\"{$_POST['f_schema']}\".\"{$_POST['f_table']}\".\"{$fkeynames[$_POST['fattpos']]}\"");		if ($_POST['offset'])			echo "<a href=\"javascript:void(0)\" class=\"fkprev\">Prev &lt;&lt;</a>";	}?>
<?php	/**	 * List rules on a table OR view	 *	 * $Id: rules.php,v 1.33 2007/08/31 18:30:11 ioguix Exp $	 */	// Include application functions	include_once('./libraries/lib.inc.php');	$action = (isset($_REQUEST['action'])) ? $_REQUEST['action'] : '';	/**	 * Confirm and then actually create a rule	 */	function createRule($confirm, $msg = '') {		global $data, $misc;		global $lang;		if (!isset($_POST['name'])) $_POST['name'] = '';		if (!isset($_POST['event'])) $_POST['event'] = '';		if (!isset($_POST['where'])) $_POST['where'] = '';		if (!isset($_POST['type'])) $_POST['type'] = 'SOMETHING';		if (!isset($_POST['raction'])) $_POST['raction'] = '';		if ($confirm) {			$misc->printTrail($_REQUEST['subject']);			$misc->printTitle($lang['strcreaterule'],'pg.rule.create');			$misc->printMsg($msg);			echo "<form action=\"rules.php\" method=\"post\">\n";			echo "<table>\n";			echo "<tr><th class=\"data left required\">{$lang['strname']}</th>\n";			echo "<td class=\"data1\"><input name=\"name\" size=\"16\" maxlength=\"{$data->_maxNameLen}\" value=\"",				htmlspecialchars($_POST['name']), "\" /></td></tr>\n";			echo "<tr><th class=\"data left required\">{$lang['strevent']}</th>\n";			echo "<td class=\"data1\"><select name=\"event\">\n";			foreach ($data->rule_events as $v) {				echo "<option value=\"{$v}\"", ($v == $_POST['event']) ? ' selected="selected"' : '',				">{$v}</option>\n";			}			echo "</select></td></tr>\n";			echo "<tr><th class=\"data left\">{$lang['strwhere']}</th>\n";			echo "<td class=\"data1\"><input name=\"where\" size=\"32\" value=\"",				htmlspecialchars($_POST['where']), "\" /></td></tr>\n";			echo "<tr><th class=\"data left\"><label for=\"instead\">{$lang['strinstead']}</label></th>\n";			echo "<td class=\"data1\">";			echo "<input type=\"checkbox\" id=\"instead\" name=\"instead\" ", (isset($_POST['instead'])) ? ' checked="checked"' : '', " />\n";			echo "</td></tr>\n";			echo "<tr><th class=\"data left required\">{$lang['straction']}</th>\n";			echo "<td class=\"data1\">";			echo "<input type=\"radio\" id=\"type1\" name=\"type\" value=\"NOTHING\"", ($_POST['type'] == 'NOTHING') ? ' checked="checked"' : '', " /> <label for=\"type1\">NOTHING</label><br />\n";			echo "<input type=\"radio\" name=\"type\" value=\"SOMETHING\"", ($_POST['type'] == 'SOMETHING') ? ' checked="checked"' : '', " />\n";			echo "(<input name=\"raction\" size=\"32\" value=\"",				htmlspecialchars($_POST['raction']), "\" />)</td></tr>\n";			echo "</table>\n";			echo "<input type=\"hidden\" name=\"action\" value=\"save_create_rule\" />\n";			echo "<input type=\"hidden\" name=\"subject\" value=\"", htmlspecialchars($_REQUEST['subject']), "\" />\n";			echo "<input type=\"hidden\" name=\"", htmlspecialchars($_REQUEST['subject']),					"\" value=\"", htmlspecialchars($_REQUEST[$_REQUEST['subject']]), "\" />\n";			echo $misc->form;			echo "<p><input type=\"submit\" name=\"ok\" value=\"{$lang['strcreate']}\" />\n";			echo "<input type=\"submit\" name=\"cancel\" value=\"{$lang['strcancel']}\" /></p>\n";			echo "</form>\n";		}		else {			if (trim($_POST['name']) == '')				createRule(true, $lang['strruleneedsname']);			else {				$status = $data->createRule($_POST['name'],					$_POST['event'], $_POST[$_POST['subject']], $_POST['where'],					isset($_POST['instead']), $_POST['type'], $_POST['raction']);				if ($status == 0)					doDefault($lang['strrulecreated']);				else					createRule(true, $lang['strrulecreatedbad']);			}		}	}	/**	 * Show confirmation of drop and perform actual drop	 */	function doDrop($confirm) {		global $data, $misc;		global $lang;		if ($confirm) {			$misc->printTrail($_REQUEST['subject']);			$misc->printTitle($lang['strdrop'],'pg.rule.drop');						echo "<p>", sprintf($lang['strconfdroprule'], $misc->printVal($_REQUEST['rule']),				$misc->printVal($_REQUEST[$_REQUEST['reltype']])), "</p>\n";			echo "<form action=\"rules.php\" method=\"post\">\n";			echo "<input type=\"hidden\" name=\"action\" value=\"drop\" />\n";			echo "<input type=\"hidden\" name=\"subject\" value=\"", htmlspecialchars($_REQUEST['reltype']), "\" />\n";			echo "<input type=\"hidden\" name=\"", htmlspecialchars($_REQUEST['reltype']),					"\" value=\"", htmlspecialchars($_REQUEST[$_REQUEST['reltype']]), "\" />\n";			echo "<input type=\"hidden\" name=\"rule\" value=\"", htmlspecialchars($_REQUEST['rule']), "\" />\n";			echo $misc->form;			echo "<p><input type=\"checkbox\" id=\"cascade\" name=\"cascade\" /> <label for=\"cascade\">{$lang['strcascade']}</label></p>\n";			echo "<input type=\"submit\" name=\"yes\" value=\"{$lang['stryes']}\" />\n";			echo "<input type=\"submit\" name=\"no\" value=\"{$lang['strno']}\" />\n";			echo "</form>\n";		}		else {			$status = $data->dropRule($_POST['rule'], $_POST[$_POST['subject']], isset($_POST['cascade']));			if ($status == 0)				doDefault($lang['strruledropped']);			else				doDefault($lang['strruledroppedbad']);		}	}	/**	 * List all the rules on the table	 */	function doDefault($msg = '') {		global $data, $misc;		global $lang;		$misc->printTrail($_REQUEST['subject']);		$misc->printTabs($_REQUEST['subject'], 'rules');		$misc->printMsg($msg);		$rules = $data->getRules($_REQUEST[$_REQUEST['subject']]);		$columns = array(			'rule' => array(				'title' => $lang['strname'],				'field' => field('rulename'),			),			'definition' => array(				'title' => $lang['strdefinition'],				'field' => field('definition'),			),			'actions' => array(				'title' => $lang['stractions'],			),		);		$subject = urlencode($_REQUEST['subject']);		$object = urlencode($_REQUEST[$_REQUEST['subject']]);		$actions = array(			'drop' => array(				'title' => $lang['strdrop'],				'url'   => "rules.php?action=confirm_drop&amp;{$misc->href}&amp;reltype={$subject}&amp;{$subject}={$object}&amp;subject=rule&amp;",				'vars'  => array('rule' => 'rulename'),			),		);		$misc->printTable($rules, $columns, $actions, $lang['strnorules']);		echo "<p><a class=\"navlink\" href=\"rules.php?action=create_rule&amp;{$misc->href}&amp;{$subject}={$object}&amp;subject={$subject}\">{$lang['strcreaterule']}</a></p>\n";	}	function doTree() {		global $misc, $data;		$rules = $data->getRules($_REQUEST[$_REQUEST['subject']]);		$reqvars = $misc->getRequestVars($_REQUEST['subject']);		$attrs = array(			'text'   => field('rulename'),			'icon'   => 'Rule',		);		$misc->printTreeXML($rules, $attrs);		exit;	}	if ($action == 'tree') doTree();		// Different header if we're view rules or table rules	$misc->printHeader($_REQUEST[$_REQUEST['subject']] . ' - ' . $lang['strrules']);	$misc->printBody();	switch ($action) {		case 'create_rule':			createRule(true);			break;		case 'save_create_rule':			if (isset($_POST['cancel'])) doDefault();			else createRule(false);			break;		case 'drop':			if (isset($_POST['yes'])) doDrop(false);			else doDefault();			break;		case 'confirm_drop':			doDrop(true);			break;		default:			doDefault();			break;	}		$misc->printFooter();?>
<?php	/**	 * Manage opclasss in a database	 *	 * $Id: opclasses.php,v 1.10 2007/08/31 18:30:11 ioguix Exp $	 */	// Include application functions	include_once('./libraries/lib.inc.php');		$action = (isset($_REQUEST['action'])) ? $_REQUEST['action'] : '';	if (!isset($msg)) $msg = '';	/**	 * Show default list of opclasss in the database	 */	function doDefault($msg = '') {		global $data, $conf, $misc;		global $lang;				$misc->printTrail('schema');		$misc->printTabs('schema','opclasses');		$misc->printMsg($msg);				$opclasses = $data->getOpClasses();				$columns = array(			'accessmethod' => array(				'title' => $lang['straccessmethod'],				'field' => field('amname'),			),			'opclass' => array(				'title' => $lang['strname'],				'field' => field('opcname'),			),			'type' => array(				'title' => $lang['strtype'],				'field' => field('opcintype'),			),			'default' => array(				'title' => $lang['strdefault'],				'field' => field('opcdefault'),				'type'  => 'yesno',			),			'comment' => array(				'title' => $lang['strcomment'],				'field' => field('opccomment'),			),		);				$actions = array();				$misc->printTable($opclasses, $columns, $actions, $lang['strnoopclasses']);	}		/**	 * Generate XML for the browser tree.	 */	function doTree() {		global $misc, $data;				$opclasses = $data->getOpClasses();				// OpClass prototype: "op_class/access_method"		$proto = concat(field('opcname'),'/',field('amname'));				$attrs = array(			'text'   => $proto,			'icon'   => 'OperatorClass',			'toolTip'=> field('opccomment'),		);				$misc->printTreeXML($opclasses, $attrs);		exit;	}		if ($action == 'tree') doTree();		$misc->printHeader($lang['stropclasses']);	$misc->printBody();	switch ($action) {		default:			doDefault();			break;	}		$misc->printFooter();?>
<?php	/**	 * Manage domains in a database	 *	 * $Id: domains.php,v 1.34 2007/09/13 13:41:01 ioguix Exp $	 */	// Include application functions	include_once('./libraries/lib.inc.php');		$action = (isset($_REQUEST['action'])) ? $_REQUEST['action'] : '';	if (!isset($msg)) $msg = '';		/** 	 * Function to save after altering a domain	 */	function doSaveAlter() {		global $data, $lang;				$status = $data->alterDomain($_POST['domain'], $_POST['domdefault'], 			isset($_POST['domnotnull']), $_POST['domowner']);		if ($status == 0)			doProperties($lang['strdomainaltered']);		else			doAlter($lang['strdomainalteredbad']);	}	/**	 * Allow altering a domain	 */	function doAlter($msg = '') {		global $data, $misc;		global $lang;			$misc->printTrail('domain');		$misc->printTitle($lang['stralter'],'pg.domain.alter');		$misc->printMsg($msg);				// Fetch domain info		$domaindata = $data->getDomain($_REQUEST['domain']);		// Fetch all users		$users = $data->getUsers();				if ($domaindata->recordCount() > 0) {			if (!isset($_POST['domname'])) {								$_POST['domtype'] = $domaindata->fields['domtype'];				$_POST['domdefault'] = $domaindata->fields['domdef'];				$domaindata->fields['domnotnull'] = $data->phpBool($domaindata->fields['domnotnull']);				if ($domaindata->fields['domnotnull']) $_POST['domnotnull'] = 'on';				$_POST['domowner'] = $domaindata->fields['domowner'];			}						// Display domain info			echo "<form action=\"domains.php\" method=\"post\">\n";			echo "<table>\n";			echo "<tr><th class=\"data left required\" style=\"width: 70px\">{$lang['strname']}</th>\n";			echo "<td class=\"data1\">", $misc->printVal($domaindata->fields['domname']), "</td></tr>\n";			echo "<tr><th class=\"data left required\">{$lang['strtype']}</th>\n";			echo "<td class=\"data1\">", $misc->printVal($domaindata->fields['domtype']), "</td></tr>\n";			echo "<tr><th class=\"data left\"><label for=\"domnotnull\">{$lang['strnotnull']}</label></th>\n";			echo "<td class=\"data1\"><input type=\"checkbox\" id=\"domnotnull\" name=\"domnotnull\"", (isset($_POST['domnotnull']) ? ' checked="checked"' : ''), " /></td></tr>\n";			echo "<tr><th class=\"data left\">{$lang['strdefault']}</th>\n";			echo "<td class=\"data1\"><input name=\"domdefault\" size=\"32\" value=\"", 				htmlspecialchars($_POST['domdefault']), "\" /></td></tr>\n";			echo "<tr><th class=\"data left required\">{$lang['strowner']}</th>\n";			echo "<td class=\"data1\"><select name=\"domowner\">";			while (!$users->EOF) {				$uname = $users->fields['usename'];				echo "<option value=\"", htmlspecialchars($uname), "\"",					($uname == $_POST['domowner']) ? ' selected="selected"' : '', ">", htmlspecialchars($uname), "</option>\n";				$users->moveNext();			}			echo "</select></td></tr>\n";							echo "</table>\n";			echo "<p><input type=\"hidden\" name=\"action\" value=\"save_alter\" />\n";			echo "<input type=\"hidden\" name=\"domain\" value=\"", htmlspecialchars($_REQUEST['domain']), "\" />\n";			echo $misc->form;			echo "<input type=\"submit\" name=\"alter\" value=\"{$lang['stralter']}\" />\n";			echo "<input type=\"submit\" name=\"cancel\" value=\"{$lang['strcancel']}\" /></p>\n";			echo "</form>\n";		}		else echo "<p>{$lang['strnodata']}</p>\n";	}		/**	 * Confirm and then actually add a CHECK constraint	 */	function addCheck($confirm, $msg = '') {		global $data, $misc;		global $lang;		if (!isset($_POST['name'])) $_POST['name'] = '';		if (!isset($_POST['definition'])) $_POST['definition'] = '';		if ($confirm) {			$misc->printTrail('domain');			$misc->printTitle($lang['straddcheck'],'pg.constraint.check');			$misc->printMsg($msg);			echo "<form action=\"domains.php\" method=\"post\">\n";			echo "<table>\n";			echo "<tr><th class=\"data\">{$lang['strname']}</th>\n";			echo "<th class=\"data required\">{$lang['strdefinition']}</th></tr>\n";			echo "<tr><td class=\"data1\"><input name=\"name\" size=\"16\" maxlength=\"{$data->_maxNameLen}\" value=\"",				htmlspecialchars($_POST['name']), "\" /></td>\n";			echo "<td class=\"data1\">(<input name=\"definition\" size=\"32\" value=\"",				htmlspecialchars($_POST['definition']), "\" />)</td></tr>\n";			echo "</table>\n";			echo "<p><input type=\"hidden\" name=\"action\" value=\"save_add_check\" />\n";			echo "<input type=\"hidden\" name=\"domain\" value=\"", htmlspecialchars($_REQUEST['domain']), "\" />\n";			echo $misc->form;			echo "<input type=\"submit\" name=\"add\" value=\"{$lang['stradd']}\" />\n";			echo "<input type=\"submit\" name=\"cancel\" value=\"{$lang['strcancel']}\" /></p>\n";			echo "</form>\n";		}		else {			if (trim($_POST['definition']) == '')				addCheck(true, $lang['strcheckneedsdefinition']);			else {				$status = $data->addDomainCheckConstraint($_POST['domain'],					$_POST['definition'], $_POST['name']);				if ($status == 0)					doProperties($lang['strcheckadded']);				else					addCheck(true, $lang['strcheckaddedbad']);			}		}	}	/**	 * Show confirmation of drop constraint and perform actual drop	 */	function doDropConstraint($confirm, $msg = '') {		global $data, $misc;		global $lang;		if ($confirm) {			$misc->printTrail('domain');			$misc->printTitle($lang['strdrop'],'pg.constraint.drop');			$misc->printMsg($msg);						echo "<p>", sprintf($lang['strconfdropconstraint'], $misc->printVal($_REQUEST['constraint']), 				$misc->printVal($_REQUEST['domain'])), "</p>\n";				echo "<form action=\"domains.php\" method=\"post\">\n";			echo "<input type=\"hidden\" name=\"action\" value=\"drop_con\" />\n";			echo "<input type=\"hidden\" name=\"domain\" value=\"", htmlspecialchars($_REQUEST['domain']), "\" />\n";			echo "<input type=\"hidden\" name=\"constraint\" value=\"", htmlspecialchars($_REQUEST['constraint']), "\" />\n";			echo $misc->form;			echo "<p><input type=\"checkbox\" id=\"cascade\" name=\"cascade\" /> <label for=\"cascade\">{$lang['strcascade']}</label></p>\n";			echo "<input type=\"submit\" name=\"drop\" value=\"{$lang['strdrop']}\" />\n";			echo "<input type=\"submit\" name=\"cancel\" value=\"{$lang['strcancel']}\" />\n";			echo "</form>\n";		}		else {			$status = $data->dropDomainConstraint($_POST['domain'], $_POST['constraint'], isset($_POST['cascade']));			if ($status == 0)				doProperties($lang['strconstraintdropped']);			else				doDropConstraint(true, $lang['strconstraintdroppedbad']);		}			}		/**	 * Show properties for a domain.  Allow manipulating constraints as well.	 */	function doProperties($msg = '') {		global $data, $misc;		global $lang;			$misc->printTrail('domain');		$misc->printTitle($lang['strproperties'],'pg.domain');		$misc->printMsg($msg);				$domaindata = $data->getDomain($_REQUEST['domain']);				if ($domaindata->recordCount() > 0) {			// Show comment if any			if ($domaindata->fields['domcomment'] !== null)				echo "<p class=\"comment\">", $misc->printVal($domaindata->fields['domcomment']), "</p>\n";			// Display domain info			$domaindata->fields['domnotnull'] = $data->phpBool($domaindata->fields['domnotnull']);			echo "<table>\n";			echo "<tr><th class=\"data left\" style=\"width: 70px\">{$lang['strname']}</th>\n";			echo "<td class=\"data1\">", $misc->printVal($domaindata->fields['domname']), "</td></tr>\n";			echo "<tr><th class=\"data left\">{$lang['strtype']}</th>\n";			echo "<td class=\"data1\">", $misc->printVal($domaindata->fields['domtype']), "</td></tr>\n";			echo "<tr><th class=\"data left\">{$lang['strnotnull']}</th>\n";			echo "<td class=\"data1\">", ($domaindata->fields['domnotnull'] ? 'NOT NULL' : ''), "</td></tr>\n";			echo "<tr><th class=\"data left\">{$lang['strdefault']}</th>\n";			echo "<td class=\"data1\">", $misc->printVal($domaindata->fields['domdef']), "</td></tr>\n";			echo "<tr><th class=\"data left\">{$lang['strowner']}</th>\n";			echo "<td class=\"data1\">", $misc->printVal($domaindata->fields['domowner']), "</td></tr>\n";			echo "</table>\n";						// Display domain constraints			if ($data->hasDomainConstraints()) {				$domaincons = $data->getDomainConstraints($_REQUEST['domain']);				if ($domaincons->recordCount() > 0) {					echo "<h3>{$lang['strconstraints']}</h3>\n";					echo "<table>\n";					echo "<tr><th class=\"data\">{$lang['strname']}</th><th class=\"data\">{$lang['strdefinition']}</th><th class=\"data\">{$lang['stractions']}</th>\n";					$i = 0;										while (!$domaincons->EOF) {						$id = (($i % 2 ) == 0 ? '1' : '2');						echo "<tr class=\"data{$id}\"><td>", $misc->printVal($domaincons->fields['conname']), "</td>";						echo "<td>";						echo $misc->printVal($domaincons->fields['consrc']);						echo "</td>";						echo "<td class=\"opbutton{$id}\">";						echo "<a href=\"domains.php?action=confirm_drop_con&amp;{$misc->href}&amp;constraint=", urlencode($domaincons->fields['conname']),							"&amp;domain=", urlencode($_REQUEST['domain']), "&amp;type=", urlencode($domaincons->fields['contype']), "\">{$lang['strdrop']}</a></td></tr>\n";								$domaincons->moveNext();						$i++;					}										echo "</table>\n";				}			}		}		else echo "<p>{$lang['strnodata']}</p>\n";				echo "<ul class=\"navlink\">\n\t<li><a href=\"domains.php?action=confirm_drop&amp;{$misc->href}&amp;domain=", urlencode($_REQUEST['domain']),"\">{$lang['strdrop']}</a></li>\n";		if ($data->hasAlterDomains()) {			echo "\t<li><a href=\"domains.php?action=add_check&amp;{$misc->href}&amp;domain=", urlencode($_REQUEST['domain']),				"\">{$lang['straddcheck']}</a></li>\n";			echo "\t<li><a href=\"domains.php?action=alter&amp;{$misc->href}&amp;domain=", 				urlencode($_REQUEST['domain']), "\">{$lang['stralter']}</a></li>\n";		}		echo "</ul>\n";	}		/**	 * Show confirmation of drop and perform actual drop	 */	function doDrop($confirm) {		global $data, $misc;		global $lang;		if ($confirm) {			$misc->printTrail('domain');			$misc->printTitle($lang['strdrop'],'pg.domain.drop');						echo "<p>", sprintf($lang['strconfdropdomain'], $misc->printVal($_REQUEST['domain'])), "</p>\n";				echo "<form action=\"domains.php\" method=\"post\">\n";			echo "<p><input type=\"checkbox\" id=\"cascade\" name=\"cascade\" /><label for=\"cascade\">{$lang['strcascade']}</label></p>\n";			echo "<p><input type=\"hidden\" name=\"action\" value=\"drop\" />\n";			echo "<input type=\"hidden\" name=\"domain\" value=\"", htmlspecialchars($_REQUEST['domain']), "\" />\n";			echo $misc->form;			echo "<input type=\"submit\" name=\"drop\" value=\"{$lang['strdrop']}\" />\n";			echo "<input type=\"submit\" name=\"cancel\" value=\"{$lang['strcancel']}\" /></p>\n";			echo "</form>\n";		}		else {			$status = $data->dropDomain($_POST['domain'], isset($_POST['cascade']));			if ($status == 0)				doDefault($lang['strdomaindropped']);			else				doDefault($lang['strdomaindroppedbad']);		}			}		/**	 * Displays a screen where they can enter a new domain	 */	function doCreate($msg = '') {		global $data, $misc;		global $lang;				if (!isset($_POST['domname'])) $_POST['domname'] = '';		if (!isset($_POST['domtype'])) $_POST['domtype'] = '';		if (!isset($_POST['domlength'])) $_POST['domlength'] = '';		if (!isset($_POST['domarray'])) $_POST['domarray'] = '';		if (!isset($_POST['domdefault'])) $_POST['domdefault'] = '';		if (!isset($_POST['domcheck'])) $_POST['domcheck'] = '';		$types = $data->getTypes(true);				$misc->printTrail('schema');		$misc->printTitle($lang['strcreatedomain'],'pg.domain.create');		$misc->printMsg($msg);		echo "<form action=\"domains.php\" method=\"post\">\n";		echo "<table>\n";		echo "<tr><th class=\"data left required\" style=\"width: 70px\">{$lang['strname']}</th>\n";		echo "<td class=\"data1\"><input name=\"domname\" size=\"32\" maxlength=\"{$data->_maxNameLen}\" value=\"", 			htmlspecialchars($_POST['domname']), "\" /></td></tr>\n";		echo "<tr><th class=\"data left required\">{$lang['strtype']}</th>\n";		echo "<td class=\"data1\">\n";		// Output return type list				echo "<select name=\"domtype\">\n";		while (!$types->EOF) {			echo "<option value=\"", htmlspecialchars($types->fields['typname']), "\"", 				($types->fields['typname'] == $_POST['domtype']) ? ' selected="selected"' : '', ">",				$misc->printVal($types->fields['typname']), "</option>\n";			$types->moveNext();		}		echo "</select>\n";				// Type length		echo "<input type=\"text\" size=\"4\" name=\"domlength\" value=\"", htmlspecialchars($_POST['domlength']), "\" />";		// Output array type selector		echo "<select name=\"domarray\">\n";		echo "<option value=\"\"", ($_POST['domarray'] == '') ? ' selected="selected"' : '', "></option>\n";		echo "<option value=\"[]\"", ($_POST['domarray'] == '[]') ? ' selected="selected"' : '', ">[ ]</option>\n";		echo "</select></td></tr>\n";		echo "<tr><th class=\"data left\"><label for=\"domnotnull\">{$lang['strnotnull']}</label></th>\n";		echo "<td class=\"data1\"><input type=\"checkbox\" id=\"domnotnull\" name=\"domnotnull\"", 			(isset($_POST['domnotnull']) ? ' checked="checked"' : ''), " /></td></tr>\n";		echo "<tr><th class=\"data left\">{$lang['strdefault']}</th>\n";		echo "<td class=\"data1\"><input name=\"domdefault\" size=\"32\" value=\"", 			htmlspecialchars($_POST['domdefault']), "\" /></td></tr>\n";		if ($data->hasDomainConstraints()) {			echo "<tr><th class=\"data left\">{$lang['strconstraints']}</th>\n";			echo "<td class=\"data1\">CHECK (<input name=\"domcheck\" size=\"32\" value=\"", 				htmlspecialchars($_POST['domcheck']), "\" />)</td></tr>\n";		}		echo "</table>\n";		echo "<p><input type=\"hidden\" name=\"action\" value=\"save_create\" />\n";		echo $misc->form;		echo "<input type=\"submit\" value=\"{$lang['strcreate']}\" />\n";		echo "<input type=\"submit\" name=\"cancel\" value=\"{$lang['strcancel']}\" /></p>\n";		echo "</form>\n";	}		/**	 * Actually creates the new domain in the database	 */	function doSaveCreate() {		global $data, $lang;				if (!isset($_POST['domcheck'])) $_POST['domcheck'] = '';		// Check that they've given a name and a definition		if ($_POST['domname'] == '') doCreate($lang['strdomainneedsname']);		else {		 			$status = $data->createDomain($_POST['domname'], $_POST['domtype'], $_POST['domlength'], $_POST['domarray'] != '',																isset($_POST['domnotnull']), $_POST['domdefault'], $_POST['domcheck']);			if ($status == 0)				doDefault($lang['strdomaincreated']);			else				doCreate($lang['strdomaincreatedbad']);		}	}		/**	 * Show default list of domains in the database	 */	function doDefault($msg = '') {		global $data, $conf, $misc;		global $lang;				$misc->printTrail('schema');		$misc->printTabs('schema','domains');		$misc->printMsg($msg);				$domains = $data->getDomains();				$columns = array(			'domain' => array(				'title' => $lang['strdomain'],				'field' => field('domname'),				'url' => "domains.php?action=properties&amp;{$misc->href}&amp;",				'vars'  => array('domain' => 'domname'),			),			'type' => array(				'title' => $lang['strtype'],				'field' => field('domtype'),			),			'notnull' => array(				'title' => $lang['strnotnull'],				'field' => field('domnotnull'),				'type'  => 'bool',				'params'=> array('true' => 'NOT NULL', 'false' => ''),			),			'default' => array(				'title' => $lang['strdefault'],				'field' => field('domdef'),			),			'owner' => array(				'title' => $lang['strowner'],				'field' => field('domowner'),			),			'actions' => array(				'title' => $lang['stractions'],			),			'comment' => array(				'title' => $lang['strcomment'],				'field' => field('domcomment'),			),		);				$actions = array(			'alter' => array(				'title'	=> $lang['stralter'],				'url'	=> "domains.php?action=alter&amp;{$misc->href}&amp;",				'vars'	=> array('domain' => 'domname'),			),			'drop' => array(				'title'	=> $lang['strdrop'],				'url'	=> "domains.php?action=confirm_drop&amp;{$misc->href}&amp;",				'vars'	=> array('domain' => 'domname'),			),		);		if (!$data->hasAlterDomains()) unset($actions['alter']);				$misc->printTable($domains, $columns, $actions, $lang['strnodomains']);				echo "<p><a class=\"navlink\" href=\"domains.php?action=create&amp;{$misc->href}\">{$lang['strcreatedomain']}</a></p>\n";	}		/**	 * Generate XML for the browser tree.	 */	function doTree() {		global $misc, $data;				$domains = $data->getDomains();				$reqvars = $misc->getRequestVars('domain');				$attrs = array(			'text'   => field('domname'),			'icon'   => 'Domain',			'toolTip'=> field('domcomment'),			'action' => url('domains.php',							$reqvars,							array(								'action' => 'properties',								'domain' => field('domname')							)						)		);				$misc->printTreeXML($domains, $attrs);		exit;	}		if ($action == 'tree') doTree();	$misc->printHeader($lang['strdomains']);	$misc->printBody();	switch ($action) {		case 'add_check':			addCheck(true);			break;		case 'save_add_check':			if (isset($_POST['cancel'])) doProperties();			else addCheck(false);			break;		case 'drop_con':			if (isset($_POST['drop'])) doDropConstraint(false);			else doProperties();			break;		case 'confirm_drop_con':			doDropConstraint(true);			break;					case 'save_create':			if (isset($_POST['cancel'])) doDefault();			else doSaveCreate();			break;		case 'create':			doCreate();			break;		case 'drop':			if (isset($_POST['drop'])) doDrop(false);			else doDefault();			break;		case 'confirm_drop':			doDrop(true);			break;					case 'save_alter':			if (isset($_POST['alter'])) doSaveAlter();			else doProperties();			break;		case 'alter':			doAlter();			break;		case 'properties':			doProperties();			break;		default:			doDefault();			break;	}		$misc->printFooter();	?>
<?php/** * Class to represent a database connection * * $Id: Connection.php,v 1.15 2008/02/18 21:42:47 ioguix Exp $ */include_once('./classes/database/ADODB_base.php');class Connection {	var $conn;		// The backend platform.  Set to UNKNOWN by default.	var $platform = 'UNKNOWN';		/**	 * Creates a new connection.  Will actually make a database connection.	 * @param $fetchMode Defaults to associative.  Override for different behaviour	 */	function Connection($host, $port, $sslmode, $user, $password, $database, $fetchMode = ADODB_FETCH_ASSOC) {		$this->conn = &ADONewConnection('postgres7');		$this->conn->setFetchMode($fetchMode);		// Ignore host if null		if ($host === null || $host == '')			if ($port !== null && $port != '')				$pghost = ':'.$port;			else				$pghost = '';		else			$pghost = "{$host}:{$port}";		// Add sslmode to $pghost as needed                if (($sslmode == 'disable') || ($sslmode == 'allow') || ($sslmode == 'prefer') || ($sslmode == 'require')) {                        $pghost .= ':'.$sslmode;                } elseif ($sslmode == 'legacy') {                        $pghost .= ' requiressl=1';                }		$this->conn->connect($pghost, $user, $password, $database);	}	/**	 * Gets the name of the correct database driver to use.  As a side effect,	 * sets the platform.	 * @param (return-by-ref) $description A description of the database and version	 * @return The class name of the driver eg. Postgres84	 * @return null if version is < 7.4	 * @return -3 Database-specific failure	 */	function getDriver(&$description) {		// If we're on a recent enough PHP 5, and against PostgreSQL 7.4 or		// higher, we don't need to query for the version.  This gives a great		// speed up.						if (function_exists('pg_version')) {			$v = pg_version($this->conn->_connectionID);			if (isset($v['server'])) $version = $v['server'];					}				// If we didn't manage to get the version without a query, query...		if (!isset($version)) {			$adodb = new ADODB_base($this->conn);				$sql = "SELECT VERSION() AS version";			$field = $adodb->selectField($sql, 'version');				// Check the platform, if it's mingw, set it			if (preg_match('/ mingw /i', $field))				$this->platform = 'MINGW';				$params = explode(' ', $field);			if (!isset($params[1])) return -3;				$version = $params[1]; // eg. 8.4.4		}				$description = "PostgreSQL {$version}";		// Detect version and choose appropriate database driver		switch (substr($version,0,3)) {			case '8.4': return 'Postgres'; break;			case '8.3': return 'Postgres83'; break;			case '8.2': return 'Postgres82'; break;			case '8.1': return 'Postgres81'; break;			case '8.0':			case '7.5': return 'Postgres80'; break;			case '7.4': return 'Postgres74'; break;		}		/* All <7.4 versions are not supported */		// if major version is 7 or less and wasn't catch in the		// switch/case block, we have an unsupported version.		if ((int)substr($version, 0, 1) < 8)			return null;		// If unknown version, then default to latest driver		return 'Postgres';	}	/** 	 * Get the last error in the connection	 * @return Error string	 */	function getLastError() {				if (function_exists('pg_errormessage'))			return pg_errormessage($this->conn->_connectionID);		else			return pg_last_error($this->conn->_connectionID);	}}?>
<?php/** * PostgreSQL 8.1 support * * $Id: Postgres81.php,v 1.21 2008/01/19 13:46:15 ioguix Exp $ */include_once('./classes/database/Postgres82.php');class Postgres81 extends Postgres82 {	var $major_version = 8.1;	// List of all legal privileges that can be applied to different types	// of objects.	var $privlist = array(		'table' => array('SELECT', 'INSERT', 'UPDATE', 'DELETE', 'RULE', 'REFERENCES', 'TRIGGER', 'ALL PRIVILEGES'),		'view' => array('SELECT', 'INSERT', 'UPDATE', 'DELETE', 'RULE', 'REFERENCES', 'TRIGGER', 'ALL PRIVILEGES'),		'sequence' => array('SELECT', 'UPDATE', 'ALL PRIVILEGES'),		'database' => array('CREATE', 'TEMPORARY', 'ALL PRIVILEGES'),		'function' => array('EXECUTE', 'ALL PRIVILEGES'),		'language' => array('USAGE', 'ALL PRIVILEGES'),		'schema' => array('CREATE', 'USAGE', 'ALL PRIVILEGES'),		'tablespace' => array('CREATE', 'ALL PRIVILEGES')	);	// List of characters in acl lists and the privileges they	// refer to.	var $privmap = array(		'r' => 'SELECT',		'w' => 'UPDATE',		'a' => 'INSERT',		'd' => 'DELETE',		'R' => 'RULE',		'x' => 'REFERENCES',		't' => 'TRIGGER',		'X' => 'EXECUTE',		'U' => 'USAGE',		'C' => 'CREATE',		'T' => 'TEMPORARY'	);	// Array of allowed index types	var $typIndexes = array('BTREE', 'RTREE', 'GIST', 'HASH');	/**	 * Constructor	 * @param $conn The database connection	 */	function Postgres81($conn) {		$this->Postgres82($conn);	}	// Help functions		function getHelpPages() {		include_once('./help/PostgresDoc81.php');		return $this->help_page;	}	// Database functions	/**	 * Returns all databases available on the server	 * @return A list of databases, sorted alphabetically	 */	function getDatabases($currentdatabase = NULL) {		global $conf, $misc;				$server_info = $misc->getServerInfo();				if (isset($conf['owned_only']) && $conf['owned_only'] && !$this->isSuperUser($server_info['username'])) {			$username = $server_info['username'];			$this->clean($username);			$clause = " AND pr.rolname='{$username}'";		}		else $clause = '';		if ($currentdatabase != NULL) {			$this->clean($currentdatabase);			$orderby = "ORDER BY pdb.datname = '{$currentdatabase}' DESC, pdb.datname";		}		else			$orderby = "ORDER BY pdb.datname";		if (!$conf['show_system'])			$where = ' AND NOT pdb.datistemplate';		else			$where = ' AND pdb.datallowconn';		$sql = "SELECT pdb.datname AS datname, pr.rolname AS datowner, pg_encoding_to_char(encoding) AS datencoding,                               (SELECT description FROM pg_catalog.pg_description pd WHERE pdb.oid=pd.objoid) AS datcomment,                               (SELECT spcname FROM pg_catalog.pg_tablespace pt WHERE pt.oid=pdb.dattablespace) AS tablespace,							   pg_catalog.pg_database_size(pdb.oid) as dbsize                         FROM pg_catalog.pg_database pdb LEFT JOIN pg_catalog.pg_roles pr ON (pdb.datdba = pr.oid)  						WHERE true 			{$where}			{$clause}			{$orderby}";		return $this->selectSet($sql);	}	/**	 * Alters a database	 * the multiple return vals are for postgres 8+ which support more functionality in alter database	 * @param $dbName The name of the database	 * @param $newName new name for the database	 * @param $newOwner The new owner for the database	 * @return 0 success	 * @return -1 transaction error	 * @return -2 owner error	 * @return -3 rename error	 */	function alterDatabase($dbName, $newName, $newOwner = '', $comment = '') {		$this->clean($dbName);		$this->clean($newName);		$this->clean($newOwner);		//ignore $comment, not supported pre 8.2					$status = $this->beginTransaction();		if ($status != 0) {			$this->rollbackTransaction();			return -1;		}		if ($dbName != $newName) {			$status = $this->alterDatabaseRename($dbName, $newName);			if ($status != 0) {				$this->rollbackTransaction();				return -3;			}		}		$status = $this->alterDatabaseOwner($newName, $newOwner);		if ($status != 0) {			$this->rollbackTransaction();			return -2;		}		return $this->endTransaction();	}	// Tablespace functions		/**	 * Retrieves a tablespace's information	 * @return A recordset	 */	function getTablespace($spcname) {		$this->clean($spcname);		$sql = "SELECT spcname, pg_catalog.pg_get_userbyid(spcowner) AS spcowner, spclocation					FROM pg_catalog.pg_tablespace WHERE spcname='{$spcname}'";		return $this->selectSet($sql);	}		/**	 * Retrieves information for all tablespaces	 * @param $all Include all tablespaces (necessary when moving objects back to the default space)	 * @return A recordset	 */	function getTablespaces($all = false) {		global $conf;				$sql = "SELECT spcname, pg_catalog.pg_get_userbyid(spcowner) AS spcowner, spclocation					FROM pg_catalog.pg_tablespace";		if (!$conf['show_system'] && !$all) {			$sql .= " WHERE spcname NOT LIKE 'pg\\\\_%'";	}			$sql .= " ORDER BY spcname";		return $this->selectSet($sql);	}	// Capabilities	function hasCreateTableLikeWithConstraints() {return false;}	function hasSharedComments() {return false;}	function hasConcurrentIndexBuild() {return false;}}?>
<?php	/**	 * List extra information on a table	 *	 * $Id: info.php,v 1.14 2007/05/28 17:30:32 ioguix Exp $	 */	// Include application functions	include_once('./libraries/lib.inc.php');	$action = (isset($_REQUEST['action'])) ? $_REQUEST['action'] : '';	/**	 * List all the information on the table	 */	function doDefault($msg = '') {		global $data, $misc;		global $lang;		$misc->printTrail('table');		$misc->printTabs('table','info');		$misc->printMsg($msg);		// common params for printVal		$shownull = array('null' => true);		// Fetch info		$referrers = $data->getReferrers($_REQUEST['table']);		$parents = $data->getTableParents($_REQUEST['table']);		$children = $data->getTableChildren($_REQUEST['table']);		$tablestatstups = $data->getStatsTableTuples($_REQUEST['table']);		$tablestatsio = $data->getStatsTableIO($_REQUEST['table']);		$indexstatstups = $data->getStatsIndexTuples($_REQUEST['table']);		$indexstatsio = $data->getStatsIndexIO($_REQUEST['table']);        		// Check that there is some info		if (($referrers === -99 || ($referrers !== -99 && $referrers->recordCount() == 0)) 				&& $parents->recordCount() == 0 && $children->recordCount() == 0				&& ($tablestatstups->recordCount() == 0 && $tablestatsio->recordCount() == 0				&& $indexstatstups->recordCount() == 0 && $indexstatsio->recordCount() == 0)) {			$misc->printMsg($lang['strnoinfo']);		}		else {			// Referring foreign tables			if ($referrers !== -99 && $referrers->recordCount() > 0) {				echo "<h3>{$lang['strreferringtables']}</h3>\n";				echo "<table>\n";				echo "\t<tr>\n\t\t";				echo "<th class=\"data\">{$lang['strschema']}</th>";				echo "<th class=\"data\">{$lang['strtable']}</th>";				echo "<th class=\"data\">{$lang['strname']}</th><th class=\"data\">{$lang['strdefinition']}</th>";				echo "<th class=\"data\">{$lang['stractions']}</th>\n";				echo "\t</tr>\n";				$i = 0;								while (!$referrers->EOF) {					$id = ( ($i % 2 ) == 0 ? '1' : '2' );					echo "\t<tr class=\"data{$id}\">\n\t\t";					echo "<td>", $misc->printVal($referrers->fields['nspname']), "</td>";					echo "<td>", $misc->printVal($referrers->fields['relname']), "</td>";					echo "<td>", $misc->printVal($referrers->fields['conname']), "</td>";					echo "<td>", $misc->printVal($referrers->fields['consrc']), "</td>";					echo "<td class=\"opbutton{$id}\"><a href=\"constraints.php?{$misc->href}", 						"&amp;schema=", urlencode($referrers->fields['nspname']),						"&amp;table=", urlencode($referrers->fields['relname']), "\">{$lang['strproperties']}</a></td>\n";					echo "\t</tr>\n";					$referrers->movenext();					$i++;				}					echo "</table>\n";			}						// Parent tables			if ($parents->recordCount() > 0) {				echo "<h3>{$lang['strparenttables']}</h3>\n";				echo "<table>\n";				echo "\t<tr>\n\t\t";				echo "<th class=\"data\">{$lang['strschema']}</th>";				echo "\t\t<th class=\"data\">{$lang['strtable']}</th>";							echo "<th class=\"data\">{$lang['stractions']}</th>\n";				echo "\t</tr>\n";				$i = 0;								while (!$parents->EOF) {					$id = ( ($i % 2 ) == 0 ? '1' : '2' );					echo "\t<tr class=\"data{$id}\">\n";					echo "\t\t<td>", $misc->printVal($parents->fields['nspname']), "</td>";					echo "<td>", $misc->printVal($parents->fields['relname']), "</td>";					echo "<td class=\"opbutton{$id}\"><a href=\"tblproperties.php?{$misc->href}",						"&amp;schema=", urlencode($parents->fields['nspname']),						"&amp;table=", urlencode($parents->fields['relname']), "\">{$lang['strproperties']}</a></td>\n";					echo "\t</tr>\n";					$parents->movenext();					$i++;				}					echo "</table>\n";			}				// Child tables			if ($children->recordCount() > 0) {				echo "<h3>{$lang['strchildtables']}</h3>\n";				echo "<table>\n";				echo "\t<tr>\n";				echo "<th class=\"data\">{$lang['strschema']}</th>";				echo "\t\t<th class=\"data\">{$lang['strtable']}</th>";							echo "<th class=\"data\">{$lang['stractions']}</th>\n";				echo "\t</tr>\n";				$i = 0;								while (!$children->EOF) {					$id = ( ($i % 2 ) == 0 ? '1' : '2' );					echo "\t<tr class=\"data{$id}\">\n";					echo "\t\t<td>", $misc->printVal($children->fields['nspname']), "</td>";					echo "<td>", $misc->printVal($children->fields['relname']), "</td>";					echo "<td class=\"opbutton{$id}\"><a href=\"tblproperties.php?{$misc->href}",						"&amp;schema=", urlencode($children->fields['nspname']),						"&amp;table=", urlencode($children->fields['relname']), "\">{$lang['strproperties']}</a></td>\n";					echo "\t</tr>\n";					$children->movenext();					$i++;				}					echo "</table>\n";			}			// Row performance			if ($tablestatstups->recordCount() > 0) {				echo "<h3>{$lang['strrowperf']}</h3>\n";				echo "<table>\n";				echo "\t<tr>\n";				echo "\t\t<th class=\"data\" colspan=\"2\">{$lang['strsequential']}</th>\n";				echo "\t\t<th class=\"data\" colspan=\"2\">{$lang['strindex']}</th>\n";				echo "\t\t<th class=\"data\" colspan=\"3\">{$lang['strrows2']}</th>\n";				echo "\t</tr>\n";				echo "\t<tr>\n";				echo "\t\t<th class=\"data\">{$lang['strscan']}</th>\n";				echo "\t\t<th class=\"data\">{$lang['strread']}</th>\n";				echo "\t\t<th class=\"data\">{$lang['strscan']}</th>\n";				echo "\t\t<th class=\"data\">{$lang['strfetch']}</th>\n";				echo "\t\t<th class=\"data\">{$lang['strinsert']}</th>\n";				echo "\t\t<th class=\"data\">{$lang['strupdate']}</th>\n";				echo "\t\t<th class=\"data\">{$lang['strdelete']}</th>\n";				echo "\t</tr>\n";				$i = 0;								while (!$tablestatstups->EOF) {					$id = ( ($i % 2 ) == 0 ? '1' : '2' );					echo "\t<tr class=\"data{$id}\">\n";					echo "\t\t<td>", $misc->printVal($tablestatstups->fields['seq_scan'], 'int4', $shownull), "</td>\n";					echo "\t\t<td>", $misc->printVal($tablestatstups->fields['seq_tup_read'], 'int4', $shownull), "</td>\n";					echo "\t\t<td>", $misc->printVal($tablestatstups->fields['idx_scan'], 'int4', $shownull), "</td>\n";					echo "\t\t<td>", $misc->printVal($tablestatstups->fields['idx_tup_fetch'], 'int4', $shownull), "</td>\n";					echo "\t\t<td>", $misc->printVal($tablestatstups->fields['n_tup_ins'], 'int4', $shownull), "</td>\n";					echo "\t\t<td>", $misc->printVal($tablestatstups->fields['n_tup_upd'], 'int4', $shownull), "</td>\n";					echo "\t\t<td>", $misc->printVal($tablestatstups->fields['n_tup_del'], 'int4', $shownull), "</td>\n";					echo "\t</tr>\n";					$tablestatstups->movenext();					$i++;				}					echo "</table>\n";			}			// I/O performance			if ($tablestatsio->recordCount() > 0) {				echo "<h3>{$lang['strioperf']}</h3>\n";				echo "<table>\n";				echo "\t<tr>\n";				echo "\t\t<th class=\"data\" colspan=\"3\">{$lang['strheap']}</th>\n";				echo "\t\t<th class=\"data\" colspan=\"3\">{$lang['strindex']}</th>\n";				echo "\t\t<th class=\"data\" colspan=\"3\">{$lang['strtoast']}</th>\n";				echo "\t\t<th class=\"data\" colspan=\"3\">{$lang['strtoastindex']}</th>\n";				echo "\t</tr>\n";				echo "\t<tr>\n";				echo "\t\t<th class=\"data\">{$lang['strdisk']}</th>\n";				echo "\t\t<th class=\"data\">{$lang['strcache']}</th>\n";				echo "\t\t<th class=\"data\">{$lang['strpercent']}</th>\n";				echo "\t\t<th class=\"data\">{$lang['strdisk']}</th>\n";				echo "\t\t<th class=\"data\">{$lang['strcache']}</th>\n";				echo "\t\t<th class=\"data\">{$lang['strpercent']}</th>\n";				echo "\t\t<th class=\"data\">{$lang['strdisk']}</th>\n";				echo "\t\t<th class=\"data\">{$lang['strcache']}</th>\n";				echo "\t\t<th class=\"data\">{$lang['strpercent']}</th>\n";				echo "\t\t<th class=\"data\">{$lang['strdisk']}</th>\n";				echo "\t\t<th class=\"data\">{$lang['strcache']}</th>\n";				echo "\t\t<th class=\"data\">{$lang['strpercent']}</th>\n";				echo "\t</tr>\n";				$i = 0;								while (!$tablestatsio->EOF) {					$id = ( ($i % 2 ) == 0 ? '1' : '2' );					echo "\t<tr class=\"data{$id}\">\n";					$total = $tablestatsio->fields['heap_blks_hit'] + $tablestatsio->fields['heap_blks_read'];					if ($total > 0)	$percentage = round(($tablestatsio->fields['heap_blks_hit'] / $total) * 100);					else $percentage = 0;					echo "\t\t<td>", $misc->printVal($tablestatsio->fields['heap_blks_read'], 'int4', $shownull), "</td>\n";					echo "\t\t<td>", $misc->printVal($tablestatsio->fields['heap_blks_hit'], 'int4', $shownull), "</td>\n";					echo "\t\t<td>({$percentage}{$lang['strpercent']})</td>\n";					$total = $tablestatsio->fields['idx_blks_hit'] + $tablestatsio->fields['idx_blks_read'];					if ($total > 0)	$percentage = round(($tablestatsio->fields['idx_blks_hit'] / $total) * 100);					else $percentage = 0;					echo "\t\t<td>", $misc->printVal($tablestatsio->fields['idx_blks_read'], 'int4', $shownull), "</td>\n";					echo "\t\t<td>", $misc->printVal($tablestatsio->fields['idx_blks_hit'], 'int4', $shownull), "</td>\n";					echo "\t\t<td>({$percentage}{$lang['strpercent']})</td>\n";					$total = $tablestatsio->fields['toast_blks_hit'] + $tablestatsio->fields['toast_blks_read'];					if ($total > 0)	$percentage = round(($tablestatsio->fields['toast_blks_hit'] / $total) * 100);					else $percentage = 0;					echo "\t\t<td>", $misc->printVal($tablestatsio->fields['toast_blks_read'], 'int4', $shownull), "</td>\n";					echo "\t\t<td>", $misc->printVal($tablestatsio->fields['toast_blks_hit'], 'int4', $shownull), "</td>\n";					echo "\t\t<td>({$percentage}{$lang['strpercent']})</td>\n";					$total = $tablestatsio->fields['tidx_blks_hit'] + $tablestatsio->fields['tidx_blks_read'];					if ($total > 0)	$percentage = round(($tablestatsio->fields['tidx_blks_hit'] / $total) * 100);					else $percentage = 0;					echo "\t\t<td>", $misc->printVal($tablestatsio->fields['tidx_blks_read'], 'int4', $shownull), "</td>\n";					echo "\t\t<td>", $misc->printVal($tablestatsio->fields['tidx_blks_hit'], 'int4', $shownull), "</td>\n";					echo "\t\t<td>({$percentage}{$lang['strpercent']})</td>\n";					echo "\t</tr>\n";					$tablestatsio->movenext();					$i++;				}					echo "</table>\n";			}			// Index row performance			if ($indexstatstups->recordCount() > 0) {				echo "<h3>{$lang['stridxrowperf']}</h3>\n";				echo "<table>\n";				echo "\t<tr>\n";				echo "\t\t<th class=\"data\">{$lang['strindex']}</th>\n";				echo "\t\t<th class=\"data\">{$lang['strscan']}</th>\n";				echo "\t\t<th class=\"data\">{$lang['strread']}</th>\n";				echo "\t\t<th class=\"data\">{$lang['strfetch']}</th>\n";				echo "\t</tr>\n";				$i = 0;								while (!$indexstatstups->EOF) {					$id = ( ($i % 2 ) == 0 ? '1' : '2' );					echo "\t<tr class=\"data{$id}\">\n";					echo "\t\t<td>", $misc->printVal($indexstatstups->fields['indexrelname']), "</td>\n";					echo "\t\t<td>", $misc->printVal($indexstatstups->fields['idx_scan'], 'int4', $shownull), "</td>\n";					echo "\t\t<td>", $misc->printVal($indexstatstups->fields['idx_tup_read'], 'int4', $shownull), "</td>\n";					echo "\t\t<td>", $misc->printVal($indexstatstups->fields['idx_tup_fetch'], 'int4', $shownull), "</td>\n";					echo "\t</tr>\n";					$indexstatstups->movenext();					$i++;				}					echo "</table>\n";			}			// Index I/0 performance			if ($indexstatsio->recordCount() > 0) {				echo "<h3>{$lang['stridxioperf']}</h3>\n";				echo "<table>\n";				echo "\t<tr>\n";				echo "\t\t<th class=\"data\">{$lang['strindex']}</th>\n";				echo "\t\t<th class=\"data\">{$lang['strdisk']}</th>\n";				echo "\t\t<th class=\"data\">{$lang['strcache']}</th>\n";				echo "\t\t<th class=\"data\">{$lang['strpercent']}</th>\n";				echo "\t</tr>\n";				$i = 0;								while (!$indexstatsio->EOF) {					$id = ( ($i % 2 ) == 0 ? '1' : '2' );					echo "\t<tr class=\"data{$id}\">\n";					$total = $indexstatsio->fields['idx_blks_hit'] + $indexstatsio->fields['idx_blks_read'];					if ($total > 0)	$percentage = round(($indexstatsio->fields['idx_blks_hit'] / $total) * 100);					else $percentage = 0;					echo "\t\t<td>", $misc->printVal($indexstatsio->fields['indexrelname']), "</td>\n";					echo "\t\t<td>", $misc->printVal($indexstatsio->fields['idx_blks_read'], 'int4', $shownull), "</td>\n";					echo "\t\t<td>", $misc->printVal($indexstatsio->fields['idx_blks_hit'], 'int4', $shownull), "</td>\n";					echo "\t\t<td>({$percentage}{$lang['strpercent']})</td>\n";					echo "\t</tr>\n";					$indexstatsio->movenext();					$i++;				}					echo "</table>\n";			}		}	}	$misc->printHeader($lang['strtables'] . ' - ' . $_REQUEST['table'] . ' - ' . $lang['strinfo']);	$misc->printBody();		switch ($action) {		default:			doDefault();			break;	}		$misc->printFooter();?>
<?php	$script = ''; // init global value script		/**	 * Show confirmation of cluster and perform cluster	 */	function doCluster($type, $confirm=false) {		global $script, $data, $misc, $lang;		if (($type == 'table') && empty($_REQUEST['table']) && empty($_REQUEST['ma'])) {			doDefault($lang['strspecifytabletocluster']);			return;		}		if ($confirm) {			if (isset($_REQUEST['ma'])) {				$misc->printTrail('schema');				$misc->printTitle($lang['strclusterindex'], 'pg.index.cluster');				echo "<form action=\"{$script}\" method=\"post\">\n";				foreach($_REQUEST['ma'] as $v) {					$a = unserialize(htmlspecialchars_decode($v, ENT_QUOTES));					echo "<p>", sprintf($lang['strconfclustertable'], $misc->printVal($a['table'])), "</p>\n";					echo "<input type=\"hidden\" name=\"table[]\" value=\"", htmlspecialchars($a['table']), "\" />\n";				}			} // END if multi cluster			else {				$misc->printTrail($type);				$misc->printTitle($lang['strclusterindex'], 'pg.index.cluster');								echo "<form action=\"{$script}\" method=\"post\">\n";								if ($type == 'table') {					echo "<p>", sprintf($lang['strconfclustertable'], $misc->printVal($_REQUEST['object'])), "</p>\n";					echo "<input type=\"hidden\" name=\"table\" value=\"", htmlspecialchars($_REQUEST['object']), "\" />\n";				}				else {					echo "<p>", sprintf($lang['strconfclusterdatabase'], $misc->printVal($_REQUEST['object'])), "</p>\n";					echo "<input type=\"hidden\" name=\"table\" value=\"\" />\n";				}			}			echo "<input type=\"hidden\" name=\"action\" value=\"cluster\" />\n";						echo $misc->form;			echo "<input type=\"submit\" name=\"cluster\" value=\"{$lang['strcluster']}\" />\n"; //TODO			echo "<input type=\"submit\" name=\"cancel\" value=\"{$lang['strcancel']}\" />\n";			echo "</form>\n";		} // END single cluster		else {			//If multi table cluster			if ($type == 'table') { // cluster one or more table				if (is_array($_REQUEST['table'])) {					$msg='';					foreach($_REQUEST['table'] as $o) {						$status = $data->clusterIndex($o);						if ($status == 0)							$msg.= sprintf('%s: %s<br />', htmlentities($o), $lang['strclusteredgood']);						else {							doDefault($type, sprintf('%s%s: %s<br />', $msg, htmlentities($o), $lang['strclusteredbad']));							return;						}					}					 // Everything went fine, back to the Default page....					 doDefault($msg);				}				else {					$status = $data->clusterIndex($_REQUEST['object']);					if ($status == 0) {						doAdmin($type, $lang['strclusteredgood']);					}					else						doAdmin($type, $lang['strclusteredbad']);				}			}			else { // Cluster all tables in database				$status = $data->clusterIndex();				if ($status == 0) {					doAdmin($type, $lang['strclusteredgood']);				}				else					doAdmin($type, $lang['strclusteredbad']);			}		}	}		/**	 * Show confirmation of reindex and perform reindex	 */	function doReindex($type, $confirm=false) {		global $script, $data, $misc, $lang, $_reload_browser;		if (($type == 'table') && empty($_REQUEST['table']) && empty($_REQUEST['ma'])) {			doDefault($lang['strspecifytabletoreindex']);			return;		}		if ($confirm) {			if (isset($_REQUEST['ma'])) {				$misc->printTrail('schema');				$misc->printTitle($lang['strreindex'], 'pg.reindex');				echo "<form action=\"{$script}\" method=\"post\">\n";				foreach($_REQUEST['ma'] as $v) {					$a = unserialize(htmlspecialchars_decode($v, ENT_QUOTES));					echo "<p>", sprintf($lang['strconfreindextable'], $misc->printVal($a['table'])), "</p>\n";					echo "<input type=\"hidden\" name=\"table[]\" value=\"", htmlspecialchars($a['table']), "\" />\n";				}			} // END if multi reindex			else {				$misc->printTrail($type);				$misc->printTitle($lang['strreindex'], 'pg.reindex');								echo "<form action=\"{$script}\" method=\"post\">\n";								if ($type == 'table') {					echo "<p>", sprintf($lang['strconfreindextable'], $misc->printVal($_REQUEST['object'])), "</p>\n";					echo "<input type=\"hidden\" name=\"table\" value=\"", htmlspecialchars($_REQUEST['object']), "\" />\n";				}				else {					echo "<p>", sprintf($lang['strconfreindexdatabase'], $misc->printVal($_REQUEST['object'])), "</p>\n";					echo "<input type=\"hidden\" name=\"table\" value=\"\" />\n";				}			}			echo "<input type=\"hidden\" name=\"action\" value=\"reindex\" />\n";						if ($data->hasForceReindex())				echo "<p><input type=\"checkbox\" id=\"reindex_force\" name=\"reindex_force\" /><label for=\"reindex_force\">{$lang['strforce']}</label></p>\n";						echo $misc->form;			echo "<input type=\"submit\" name=\"reindex\" value=\"{$lang['strreindex']}\" />\n"; //TODO			echo "<input type=\"submit\" name=\"cancel\" value=\"{$lang['strcancel']}\" />\n";			echo "</form>\n";		} // END single reindex		else {			//If multi table reindex			if (($type == 'table') && is_array($_REQUEST['table'])) {				$msg='';				foreach($_REQUEST['table'] as $o) {					$status = $data->reindex(strtoupper($type), $o, isset($_REQUEST['reindex_force']));					if ($status == 0)						$msg.= sprintf('%s: %s<br />', htmlentities($o), $lang['strreindexgood']);					else {						doDefault($type, sprintf('%s%s: %s<br />', $msg, htmlentities($o), $lang['strreindexbad']));						return;					}				}				 // Everything went fine, back to the Default page....				 $_reload_browser = true;				 doDefault($msg);			}			else {				$status = $data->reindex(strtoupper($type), $_REQUEST['object'], isset($_REQUEST['reindex_force']));				if ($status == 0) {					$_reload_browser = true;					doAdmin($type, $lang['strreindexgood']);				}				else					doAdmin($type, $lang['strreindexbad']);			}		}	}		/**	 * Show confirmation of analyze and perform analyze	 */	function doAnalyze($type, $confirm=false) {		global $script, $data, $misc, $lang, $_reload_browser;		if (($type == 'table') && empty($_REQUEST['table']) && empty($_REQUEST['ma'])) {			doDefault($lang['strspecifytabletoanalyze']);			return;		}		if ($confirm) {			if (isset($_REQUEST['ma'])) {				$misc->printTrail('schema');				$misc->printTitle($lang['stranalyze'], 'pg.analyze');				echo "<form action=\"{$script}\" method=\"post\">\n";				foreach($_REQUEST['ma'] as $v) {					$a = unserialize(htmlspecialchars_decode($v, ENT_QUOTES));					echo "<p>", sprintf($lang['strconfanalyzetable'], $misc->printVal($a['table'])), "</p>\n";					echo "<input type=\"hidden\" name=\"table[]\" value=\"", htmlspecialchars($a['table']), "\" />\n";				}			} // END if multi analyze			else {				$misc->printTrail($type);				$misc->printTitle($lang['stranalyze'], 'pg.analyze');								echo "<form action=\"{$script}\" method=\"post\">\n";								if ($type == 'table') {					echo "<p>", sprintf($lang['strconfanalyzetable'], $misc->printVal($_REQUEST['object'])), "</p>\n";					echo "<input type=\"hidden\" name=\"table\" value=\"", htmlspecialchars($_REQUEST['object']), "\" />\n";				}				else {					echo "<p>", sprintf($lang['strconfanalyzedatabase'], $misc->printVal($_REQUEST['object'])), "</p>\n";					echo "<input type=\"hidden\" name=\"table\" value=\"\" />\n";				}			}			echo "<input type=\"hidden\" name=\"action\" value=\"analyze\" />\n";			echo $misc->form;			echo "<input type=\"submit\" name=\"analyze\" value=\"{$lang['stranalyze']}\" />\n"; //TODO			echo "<input type=\"submit\" name=\"cancel\" value=\"{$lang['strcancel']}\" />\n";			echo "</form>\n";		} // END single analyze		else {			//If multi table analyze			if (($type == 'table') && is_array($_REQUEST['table'])) {				$msg='';				foreach($_REQUEST['table'] as $o) {					$status = $data->analyzeDB($o);					if ($status == 0)						$msg.= sprintf('%s: %s<br />', htmlentities($o), $lang['stranalyzegood']);					else {						doDefault($type, sprintf('%s%s: %s<br />', $msg, htmlentities($o), $lang['stranalyzebad']));						return;					}				}				 // Everything went fine, back to the Default page....				 $_reload_browser = true;				 doDefault($msg);			}			else {				//we must pass table here. When empty, analyze the whole db				$status = $data->analyzeDB($_REQUEST['table']);				if ($status == 0) {					$_reload_browser = true;					doAdmin($type, $lang['stranalyzegood']);				}				else					doAdmin($type, $lang['stranalyzebad']);			}		}	}	/**	 * Show confirmation of vacuum and perform actual vacuum	 */	function doVacuum($type, $confirm = false) {		global $script, $data, $misc, $lang, $_reload_browser;		if (($type == 'table') && empty($_REQUEST['table']) && empty($_REQUEST['ma'])) {			doDefault($lang['strspecifytabletovacuum']);			return;		}		if ($confirm) {			if (isset($_REQUEST['ma'])) {				$misc->printTrail('schema');				$misc->printTitle($lang['strvacuum'], 'pg.vacuum');				echo "<form action=\"{$script}\" method=\"post\">\n";				foreach($_REQUEST['ma'] as $v) {					$a = unserialize(htmlspecialchars_decode($v, ENT_QUOTES));					echo "<p>", sprintf($lang['strconfvacuumtable'], $misc->printVal($a['table'])), "</p>\n";					echo "<input type=\"hidden\" name=\"table[]\" value=\"", htmlspecialchars($a['table']), "\" />\n";				}			} // END if multi vacuum			else {				$misc->printTrail($type);				$misc->printTitle($lang['strvacuum'], 'pg.vacuum');				echo "<form action=\"{$script}\" method=\"post\">\n";								if ($type == 'table') {					echo "<p>", sprintf($lang['strconfvacuumtable'], $misc->printVal($_REQUEST['object'])), "</p>\n";					echo "<input type=\"hidden\" name=\"table\" value=\"", htmlspecialchars($_REQUEST['object']), "\" />\n";				}				else {					echo "<p>", sprintf($lang['strconfvacuumdatabase'], $misc->printVal($_REQUEST['object'])), "</p>\n";					echo "<input type=\"hidden\" name=\"table\" value=\"\" />\n";				}			}			echo "<input type=\"hidden\" name=\"action\" value=\"vacuum\" />\n";			echo $misc->form;			echo "<p><input type=\"checkbox\" id=\"vacuum_full\" name=\"vacuum_full\" /> <label for=\"vacuum_full\">{$lang['strfull']}</label></p>\n";			echo "<p><input type=\"checkbox\" id=\"vacuum_analyze\" name=\"vacuum_analyze\" /> <label for=\"vacuum_analyze\">{$lang['stranalyze']}</label></p>\n";			echo "<p><input type=\"checkbox\" id=\"vacuum_freeze\" name=\"vacuum_freeze\" /><label for=\"vacuum_freeze\">{$lang['strfreeze']}</label></p>\n";			echo "<input type=\"submit\" name=\"vacuum\" value=\"{$lang['strvacuum']}\" />\n";			echo "<input type=\"submit\" name=\"cancel\" value=\"{$lang['strcancel']}\" />\n";			echo "</form>\n";		} // END single vacuum		else {			//If multi drop			if (is_array($_REQUEST['table'])) {				$msg='';				foreach($_REQUEST['table'] as $t) {					$status = $data->vacuumDB($t, isset($_REQUEST['vacuum_analyze']), isset($_REQUEST['vacuum_full']), isset($_REQUEST['vacuum_freeze']));					if ($status == 0)						$msg.= sprintf('%s: %s<br />', htmlentities($t), $lang['strvacuumgood']);					else {						doDefault($type, sprintf('%s%s: %s<br />', $msg, htmlentities($t), $lang['strvacuumbad']));						return;					}				}				 // Everything went fine, back to the Default page....				 $_reload_browser = true;				 doDefault($msg);			}			else {				//we must pass table here. When empty, vacuum the whole db				$status = $data->vacuumDB($_REQUEST['table'], isset($_REQUEST['vacuum_analyze']), isset($_REQUEST['vacuum_full']), isset($_REQUEST['vacuum_freeze']));				if ($status == 0) {					$_reload_browser = true;					doAdmin($type, $lang['strvacuumgood']);				}				else					doAdmin($type, $lang['strvacuumbad']);			}		}	}	/**	 * Add or Edit autovacuum params and save them	 */	function doEditAutovacuum($type, $confirm, $msg='') {		global $script, $data, $misc, $lang;				if (empty($_REQUEST['table'])) {			doAdmin($type, '', $lang['strspecifyeditvacuumtable']);			return;		}				$script = ($type == 'database')? 'database.php' : 'tables.php';				if ($confirm) {			$misc->printTrail($type);			$misc->printTitle(sprintf($lang['streditvacuumtable'], $misc->printVal($_REQUEST['table'])));			$misc->printMsg(sprintf($msg, $misc->printVal($_REQUEST['table'])));			if (empty($_REQUEST['table'])) {				doAdmin($type, '', $lang['strspecifyeditvacuumtable']);				return;			}						$old_val = $data->getTableAutovacuum($_REQUEST['table']);			$defaults = $data->getAutovacuum();			$old_val = $old_val->fields;			if (isset($old_val['autovacuum_enabled']) and ($old_val['autovacuum_enabled'] == 'off')) {				$enabled = '';				$disabled = 'checked="checked"';			}			else {				$enabled = 'checked="checked"';				$disabled = '';			}			if (!isset($old_val['autovacuum_vacuum_threshold'])) $old_val['autovacuum_vacuum_threshold'] = '';			if (!isset($old_val['autovacuum_vacuum_scale_factor'])) $old_val['autovacuum_vacuum_scale_factor'] = '';			if (!isset($old_val['autovacuum_analyze_threshold'])) $old_val['autovacuum_analyze_threshold'] = '';			if (!isset($old_val['autovacuum_analyze_scale_factor'])) $old_val['autovacuum_analyze_scale_factor'] = '';			if (!isset($old_val['autovacuum_vacuum_cost_delay'])) $old_val['autovacuum_vacuum_cost_delay'] = '';			if (!isset($old_val['autovacuum_vacuum_cost_limit'])) $old_val['autovacuum_vacuum_cost_limit'] = '';			echo "<form action=\"{$script}\" method=\"post\">\n";			echo $misc->form;			echo "<input type=\"hidden\" name=\"action\" value=\"editautovac\" />\n";			echo "<input type=\"hidden\" name=\"table\" value=\"", htmlspecialchars($_REQUEST['table']), "\" />\n";			echo "<br />\n<br />\n<table>\n";			echo "\t<tr><td>&nbsp;</td>\n";			echo "<th class=\"data\">{$lang['strnewvalues']}</th><th class=\"data\">{$lang['strdefaultvalues']}</th></tr>\n";			echo "\t<tr><th class=\"data left\">{$lang['strenable']}</th>\n";			echo "<td class=\"data1\">\n";			echo "<label for=\"on\">on</label><input type=\"radio\" name=\"autovacuum_enabled\" id=\"on\" value=\"on\" {$enabled} />\n";			echo "<label for=\"off\">off</label><input type=\"radio\" name=\"autovacuum_enabled\" id=\"off\" value=\"off\" {$disabled} /></td>\n";			echo "<th class=\"data left\">{$defaults['autovacuum']}</th></tr>\n";			echo "\t<tr><th class=\"data left\">{$lang['strvacuumbasethreshold']}</th>\n";			echo "<td class=\"data1\"><input type=\"text\" name=\"autovacuum_vacuum_threshold\" value=\"{$old_val['autovacuum_vacuum_threshold']}\" /></td>\n";			echo "<th class=\"data left\">{$defaults['autovacuum_vacuum_threshold']}</th></tr>\n";			echo "\t<tr><th class=\"data left\">{$lang['strvacuumscalefactor']}</th>\n";			echo "<td class=\"data1\"><input type=\"text\" name=\"autovacuum_vacuum_scale_factor\" value=\"{$old_val['autovacuum_vacuum_scale_factor']}\" /></td>\n";			echo "<th class=\"data left\">{$defaults['autovacuum_vacuum_scale_factor']}</th></tr>\n";			echo "\t<tr><th class=\"data left\">{$lang['stranalybasethreshold']}</th>\n";			echo "<td class=\"data1\"><input type=\"text\" name=\"autovacuum_analyze_threshold\" value=\"{$old_val['autovacuum_analyze_threshold']}\" /></td>\n";			echo "<th class=\"data left\">{$defaults['autovacuum_analyze_threshold']}</th></tr>\n";			echo "\t<tr><th class=\"data left\">{$lang['stranalyzescalefactor']}</th>\n";			echo "<td class=\"data1\"><input type=\"text\" name=\"autovacuum_analyze_scale_factor\" value=\"{$old_val['autovacuum_analyze_scale_factor']}\" /></td>\n";			echo "<th class=\"data left\">{$defaults['autovacuum_analyze_scale_factor']}</th></tr>\n";			echo "\t<tr><th class=\"data left\">{$lang['strvacuumcostdelay']}</th>\n";			echo "<td class=\"data1\"><input type=\"text\" name=\"autovacuum_vacuum_cost_delay\" value=\"{$old_val['autovacuum_vacuum_cost_delay']}\" /></td>\n";			echo "<th class=\"data left\">{$defaults['autovacuum_vacuum_cost_delay']}</th></tr>\n";			echo "\t<tr><th class=\"data left\">{$lang['strvacuumcostlimit']}</th>\n";			echo "<td class=\"datat1\"><input type=\"text\" name=\"autovacuum_vacuum_cost_limit\" value=\"{$old_val['autovacuum_vacuum_cost_limit']}\" /></td>\n";			echo "<th class=\"data left\">{$defaults['autovacuum_vacuum_cost_limit']}</th></tr>\n";			echo "</table>\n";			echo "<br />";			echo "<br />";			echo "<input type=\"submit\" name=\"save\" value=\"{$lang['strsave']}\" />\n";			echo "<input type=\"submit\" name=\"cancel\" value=\"{$lang['strcancel']}\" /></p>\n";			echo "</form>\n";		}		else {			$status = $data->saveAutovacuum($_REQUEST['table'], $_POST['autovacuum_enabled'], $_POST['autovacuum_vacuum_threshold'], 				$_POST['autovacuum_vacuum_scale_factor'], $_POST['autovacuum_analyze_threshold'], $_POST['autovacuum_analyze_scale_factor'],				$_POST['autovacuum_vacuum_cost_delay'], $_POST['autovacuum_vacuum_cost_limit']);						if ($status == 0)				doAdmin($type, '', sprintf($lang['strsetvacuumtablesaved'], $_REQUEST['table']));			else				doEditAutovacuum($type, true, $lang['strsetvacuumtablefail']);		}	}		/**	 * confirm drop autovacuum params for a table and drop it	 */	function doDropAutovacuum($type, $confirm) {		global $script, $data, $misc, $lang;		if (empty($_REQUEST['table'])) {			doAdmin($type, '', $lang['strspecifydelvacuumtable']);			return;		}				if ($confirm) {			$misc->printTrail($type);			$misc->printTabs($type,'admin');						$script = ($type == 'database')? 'database.php' : 'tables.php';			printf("<p>{$lang['strdelvacuumtable']}</p>\n", 				$misc->printVal("\"{$_GET['schema']}"."{$_GET['table']}\""));			echo "<form style=\"float: left\" action=\"{$script}\" method=\"post\">\n";			echo "<input type=\"hidden\" name=\"action\" value=\"delautovac\" />\n";			echo $misc->form;			echo "<input type=\"hidden\" name=\"table\" value=\"", htmlspecialchars($_REQUEST['table']), "\" />\n";			echo "<input type=\"hidden\" name=\"rel\" value=\"", htmlspecialchars(serialize(array($_REQUEST['schema'], $_REQUEST['table']))), "\" />\n";			echo "<input type=\"submit\" name=\"yes\" value=\"{$lang['stryes']}\" />\n";			echo "</form>\n";						echo "<form action=\"{$script}\" method=\"post\">\n";			echo "<input type=\"hidden\" name=\"action\" value=\"admin\" />\n";			echo "<input type=\"hidden\" name=\"table\" value=\"", htmlspecialchars($_REQUEST['table']), "\" />\n";			echo $misc->form;			echo "<input type=\"submit\" name=\"no\" value=\"{$lang['strno']}\" />\n";			echo "</form>\n";		}		else {						$status = $data->dropAutovacuum($_POST['table']);						if ($status == 0) {				doAdmin($type, '', sprintf($lang['strvacuumtablereset'], $misc->printVal($_POST['table'])));			}			else				doAdmin($type, '', sprintf($lang['strdelvacuumtablefail'], $misc->printVal($_POST['table'])));		}	}	/**	 * database/table administration and tuning tasks	 *	 * $Id: admin.php	 */		function doAdmin($type, $msg = '') {		global $script, $data, $misc, $lang;			$misc->printTrail($type);		$misc->printTabs($type,'admin');		$misc->printMsg($msg);				if ($type == 'database')			printf("<p>{$lang['stradminondatabase']}</p>\n", $misc->printVal($_REQUEST['object']));		else			printf("<p>{$lang['stradminontable']}</p>\n", $misc->printVal($_REQUEST['object']));				echo "<table style=\"width: 50%\">\n";		echo "<tr>\n";		echo "<th class=\"data\">";		$misc->printHelp($lang['strvacuum'],'pg.admin.vacuum')."</th>\n";		echo "</th>";		echo "<th class=\"data\">";		$misc->printHelp($lang['stranalyze'],'pg.admin.analyze');		echo "</th>";		if ($data->hasRecluster()){			echo "<th class=\"data\">";			$misc->printHelp($lang['strclusterindex'],'pg.index.cluster');			echo "</th>";		}		echo "<th class=\"data\">";		$misc->printHelp($lang['strreindex'],'pg.index.reindex');		echo "</th>";		echo "</tr>";			// Vacuum		echo "<tr class=\"row1\">\n";		echo "<td style=\"text-align: center; vertical-align: bottom\">\n";		echo "<form action=\"{$script}\" method=\"post\">\n";				echo "<p><input type=\"hidden\" name=\"action\" value=\"confirm_vacuum\" />\n";		echo $misc->form;		if ($type == 'table') {			echo "<input type=\"hidden\" name=\"table\" value=\"", htmlspecialchars($_REQUEST['object']), "\" />\n";			echo "<input type=\"hidden\" name=\"subject\" value=\"table\" />\n";		}		echo "<input type=\"submit\" value=\"{$lang['strvacuum']}\" /></p>\n";		echo "</form>\n";										echo "</td>\n";		// Analyze		echo "<td style=\"text-align: center; vertical-align: bottom\">\n";		echo "<form action=\"{$script}\" method=\"post\">\n";		echo "<p><input type=\"hidden\" name=\"action\" value=\"confirm_analyze\" />\n";		echo $misc->form;		if ($type == 'table') {			echo "<input type=\"hidden\" name=\"table\" value=\"", htmlspecialchars($_REQUEST['object']), "\" />\n";			echo "<input type=\"hidden\" name=\"subject\" value=\"table\" />\n";		}		echo "<input type=\"submit\" value=\"{$lang['stranalyze']}\" /></p>\n";		echo "</form>\n";		echo "</td>\n";				// Cluster		if ($data->hasRecluster()){			$disabled = '';			echo "<td style=\"text-align: center; vertical-align: bottom\">\n";			echo "<form action=\"{$script}\" method=\"post\">\n";			echo $misc->form;			if ($type == 'table') {				echo "<input type=\"hidden\" name=\"table\" value=\"", htmlspecialchars($_REQUEST['object']), "\" />\n";				echo "<input type=\"hidden\" name=\"subject\" value=\"table\" />\n";				if (!$data->alreadyClustered($_REQUEST['object'])) {					$disabled = 'disabled="disabled" ';					echo "{$lang['strnoclusteravailable']}<br />";				}			}			echo "<p><input type=\"hidden\" name=\"action\" value=\"confirm_cluster\" />\n";			echo "<input type=\"submit\" value=\"{$lang['strclusterindex']}\" $disabled/></p>\n";			echo "</form>\n";			echo "</td>\n";		}				// Reindex		echo "<td style=\"text-align: center; vertical-align: bottom\">\n";		echo "<form action=\"{$script}\" method=\"post\">\n";		echo "<p><input type=\"hidden\" name=\"action\" value=\"confirm_reindex\" />\n";		echo $misc->form;		if ($type == 'table') {			echo "<input type=\"hidden\" name=\"table\" value=\"", htmlspecialchars($_REQUEST['object']), "\" />\n";			echo "<input type=\"hidden\" name=\"subject\" value=\"table\" />\n";		}		echo "<input type=\"submit\" value=\"{$lang['strreindex']}\" /></p>\n";		echo "</form>\n";		echo "</td>\n";		echo "</tr>\n";		echo "</table>\n";		// Autovacuum		if($data->hasAutovacuum()) {			// get defaults values for autovacuum			$defaults = $data->getAutovacuum();			// Fetch the autovacuum properties from the database or table if != ''			if ($type == 'table') $autovac = $data->getTableAutovacuum($_REQUEST['table']);			else $autovac = $data->getTableAutovacuum();			echo "<br /><br /><h2>{$lang['strvacuumpertable']}</h2>";			echo '<p>' . (($defaults['autovacuum'] == 'on') ? $lang['strturnedon'] : $lang['strturnedoff'] ) . '</p>';			echo "<p class=\"message\">{$lang['strnotdefaultinred']}</p>";						function enlight($f, $p) {				if ( isset($f[$p[0]]) and ($f[$p[0]] != $p[1]))					return "<span style=\"color:#F33;font-weight:bold\">". htmlspecialchars($f[$p[0]]) ."</span>";				return htmlspecialchars($p[1]);			}						$columns = array(				'namespace' => array(					'title' => $lang['strschema'],					'field' => field('nspname'),					'url'   => "redirect.php?subject=schema&amp;{$misc->href}&amp;",					'vars'  => array('schema' => 'nspname'),				),					'relname' => array(					'title' => $lang['strtable'],					'field' => field('relname'),					'url'	=> "redirect.php?subject=table&amp;{$misc->href}&amp;",					'vars'  => array('table' => 'relname', 'schema' => 'nspname'),				),				'autovacuum_enabled' => array(					'title' => $lang['strenabled'],					'field' => callback('enlight', array('autovacuum_enabled', $defaults['autovacuum'])),					'type' => 'verbatim'				),				'autovacuum_vacuum_threshold' => array(					'title' => $lang['strvacuumbasethreshold'],					'field' => callback('enlight', array('autovacuum_vacuum_threshold', $defaults['autovacuum_vacuum_threshold'])),					'type' => 'verbatim'				),				'autovacuum_vacuum_scale_factor' => array(					'title' => $lang['strvacuumscalefactor'],					'field' => callback('enlight', array('autovacuum_vacuum_scale_factor', $defaults['autovacuum_vacuum_scale_factor'])),					'type' => 'verbatim'				),				'autovacuum_analyze_threshold' => array(					'title' => $lang['stranalybasethreshold'],					'field' => callback('enlight', array('autovacuum_analyze_threshold', $defaults['autovacuum_analyze_threshold'])),					'type' => 'verbatim'				),				'autovacuum_analyze_scale_factor' => array(					'title' => $lang['stranalyzescalefactor'],					'field' => callback('enlight', array('autovacuum_analyze_scale_factor', $defaults['autovacuum_analyze_scale_factor'])),					'type' => 'verbatim'				),				'autovacuum_vacuum_cost_delay' => array(					'title' => $lang['strvacuumcostdelay'],					'field' => concat(callback('enlight', array('autovacuum_vacuum_cost_delay', $defaults['autovacuum_vacuum_cost_delay'])), 'ms'),					'type' => 'verbatim'				),				'autovacuum_vacuum_cost_limit' => array(					'title' => $lang['strvacuumcostlimit'],					'field' => callback('enlight', array('autovacuum_vacuum_cost_limit', $defaults['autovacuum_vacuum_cost_limit'])),					'type' => 'verbatim'				),			);						// Maybe we need to check permissions here?			$columns['actions'] = array('title' => $lang['stractions']);			$actions = array(				'edit' => array(					'title' => $lang['stredit'],					'url'   => "{$script}?action=confeditautovac&amp;{$misc->href}&amp;subject={$type}&amp;",					'vars'  => array(						'schema' => 'nspname',						'table' => 'relname'					)				),				'delete' => array(					'title' => $lang['strdelete'],					'url'   => "{$script}?action=confdelautovac&amp;{$misc->href}&amp;subject={$type}&amp;",					'vars'  => array(						'schema' => 'nspname',						'table' => 'relname'					)				)			);						if ($type == 'table') {				unset($actions['edit']['vars']['schema'], 					$actions['delete']['vars']['schema'],					$columns['namespace'],					$columns['relname']				);			}			$misc->printTable($autovac, $columns, $actions, $lang['strnovacuumconf']);						if (($type == 'table') and ($autovac->recordCount() == 0)) {				echo "<br />";				echo "<a href=\"tables.php?action=confeditautovac&amp;{$misc->href}&amp;table=", htmlspecialchars($_REQUEST['table'])					,"\">{$lang['straddvacuumtable']}</a>";			}		}	}		function adminActions($action, $type) {		global $script;				if ($type == 'database') {			$_REQUEST['object'] = $_REQUEST['database'];			$script = 'database.php';		}		else {			// $_REQUEST['table'] is no set if we are in the schema page			$_REQUEST['object'] = (isset($_REQUEST['table']) ? $_REQUEST['table']:'');			$script = 'tables.php';		}		switch ($action) {			case 'confirm_cluster':				doCluster($type, true);				break;			case 'confirm_reindex':				doReindex($type, true);				break;			case 'confirm_analyze':				doAnalyze($type, true);				break;			case 'confirm_vacuum':				doVacuum($type, true);				break;			case 'cluster':				if (isset($_POST['cluster'])) doCluster($type);				// if multi-action from table canceled: back to the schema default page				else if (($type == 'table') && is_array($_REQUEST['object']) ) doDefault();				else doAdmin($type);				break;			case 'reindex':				if (isset($_POST['reindex'])) doReindex($type);				// if multi-action from table canceled: back to the schema default page				else if (($type == 'table') && is_array($_REQUEST['object']) ) doDefault();				else doAdmin($type);				break;			case 'analyze':				if (isset($_POST['analyze'])) doAnalyze($type);				// if multi-action from table canceled: back to the schema default page				else if (($type == 'table') && is_array($_REQUEST['object']) ) doDefault();				else doAdmin($type);				break;			case 'vacuum':				if (isset($_POST['vacuum'])) doVacuum($type);				// if multi-action from table canceled: back to the schema default page				else if (($type == 'table') && is_array($_REQUEST['object']) ) doDefault();				else doAdmin($type);				break;			case 'admin':				doAdmin($type);				break;			case 'confeditautovac':				doEditAutovacuum($type, true);				break;			case 'confdelautovac':				doDropAutovacuum($type, true);				break;			case 'confaddautovac':				doAddAutovacuum(true);				break;			case 'editautovac':				if (isset($_POST['save'])) doEditAutovacuum($type, false);				else doAdmin($type);				break;			case 'delautovac':				doDropAutovacuum($type, false);				break;			default:				return false;		}		return true;	}?>
<?php	/**	 * Manage aggregates in a database	 *	 * $Id: aggregates.php,v 1.27 2008/01/19 13:46:15 ioguix Exp $	 */	// Include application functions	include_once('./libraries/lib.inc.php');		$action = (isset($_REQUEST['action'])) ? $_REQUEST['action'] : '';	if (!isset($msg)) $msg = '';	/**	 * Actually creates the new aggregate in the database	 */	function doSaveCreate() {		global $data, $lang, $_reload_browser;		// Check inputs		if (trim($_REQUEST['name']) == '') {			doCreate($lang['straggrneedsname']);			return;		}		else if (trim($_REQUEST['basetype']) == '') {			doCreate($lang['straggrneedsbasetype']);			return;		}		else if (trim($_REQUEST['sfunc']) == '') {			doCreate($lang['straggrneedssfunc']);			return;		}		else if (trim($_REQUEST['stype']) == '') {			doCreate($lang['straggrneedsstype']);			return;		}		$status = $data->createAggregate($_REQUEST['name'], $_REQUEST['basetype'], $_REQUEST['sfunc'], $_REQUEST['stype'], 		$_REQUEST['ffunc'], $_REQUEST['initcond'], $_REQUEST['sortop'], $_REQUEST['aggrcomment']);					if ($status == 0) {			$_reload_browser = true;			doDefault($lang['straggrcreated']);		}		else {			doCreate($lang['straggrcreatedbad']);		}	}		/**	 * Displays a screen for create a new aggregate function	 */	function doCreate($msg = '') {		global $data, $misc;		global $lang;		if (!isset($_REQUEST['name'])) $_REQUEST['name'] = '';		if (!isset($_REQUEST['basetype'])) $_REQUEST['basetype'] = '';		if (!isset($_REQUEST['sfunc'])) $_REQUEST['sfunc'] = '';		if (!isset($_REQUEST['stype'])) $_REQUEST['stype'] = '';		if (!isset($_REQUEST['ffunc'])) $_REQUEST['ffunc'] = '';		if (!isset($_REQUEST['initcond'])) $_REQUEST['initcond'] = '';		if (!isset($_REQUEST['sortop'])) $_REQUEST['sortop'] = '';		if (!isset($_REQUEST['aggrcomment'])) $_REQUEST['aggrcomment'] = '';		$misc->printTrail('schema');		$misc->printTitle($lang['strcreateaggregate'], 'pg.aggregate.create');		$misc->printMsg($msg);						echo "<form action=\"aggregates.php\" method=\"post\">\n";		echo "<table>\n";		echo "\t<tr>\n\t\t<th class=\"data left required\">{$lang['strname']}</th>\n";		echo "\t\t<td class=\"data\"><input name=\"name\" size=\"32\" maxlength=\"{$data->_maxNameLen}\" value=\"", 			htmlspecialchars($_REQUEST['name']), "\" /></td>\n\t</tr>\n";		echo "\t<tr>\n\t\t<th class=\"data left required\">{$lang['straggrbasetype']}</th>\n";		echo "\t\t<td class=\"data\"><input name=\"basetype\" size=\"32\" maxlength=\"{$data->_maxNameLen}\" value=\"", 			htmlspecialchars($_REQUEST['basetype']), "\" /></td>\n\t</tr>\n";		echo "\t<tr>\n\t\t<th class=\"data left required\">{$lang['straggrsfunc']}</th>\n";		echo "\t\t<td class=\"data\"><input name=\"sfunc\" size=\"32\" maxlength=\"{$data->_maxNameLen}\" value=\"", 			htmlspecialchars($_REQUEST['sfunc']), "\" /></td>\n\t</tr>\n";		echo "\t<tr>\n\t\t<th class=\"data left required\">{$lang['straggrstype']}</th>\n";		echo "\t\t<td class=\"data\"><input name=\"stype\" size=\"32\" maxlength=\"{$data->_maxNameLen}\" value=\"", 			htmlspecialchars($_REQUEST['stype']), "\" /></td>\n\t</tr>\n";		echo "\t<tr>\n\t\t<th class=\"data left\">{$lang['straggrffunc']}</th>\n";		echo "\t\t<td class=\"data\"><input name=\"ffunc\" size=\"32\" maxlength=\"{$data->_maxNameLen}\" value=\"", 			htmlspecialchars($_REQUEST['ffunc']), "\" /></td>\n\t</tr>\n";		echo "\t<tr>\n\t\t<th class=\"data left\">{$lang['straggrinitcond']}</th>\n";		echo "\t\t<td class=\"data\"><input name=\"initcond\" size=\"32\" maxlength=\"{$data->_maxNameLen}\" value=\"", 			htmlspecialchars($_REQUEST['initcond']), "\" /></td>\n\t</tr>\n";		echo "\t<tr>\n\t\t<th class=\"data left\">{$lang['straggrsortop']}</th>\n";		echo "\t\t<td class=\"data\"><input name=\"sortop\" size=\"32\" maxlength=\"{$data->_maxNameLen}\" value=\"", 			htmlspecialchars($_REQUEST['sortop']), "\" /></td>\n\t</tr>\n";		echo "\t<tr>\n\t\t<th class=\"data left\">{$lang['strcomment']}</th>\n";		echo "\t\t<td><textarea name=\"aggrcomment\" rows=\"3\" cols=\"32\">", 			htmlspecialchars($_REQUEST['aggrcomment']), "</textarea></td>\n\t</tr>\n";		echo "</table>\n";		echo "<p><input type=\"hidden\" name=\"action\" value=\"save_create\" />\n";		echo $misc->form;		echo "<input type=\"submit\" value=\"{$lang['strcreate']}\" />\n";		echo "<input type=\"submit\" name=\"cancel\" value=\"{$lang['strcancel']}\" /></p>\n";		echo "</form>\n";	}	/** 	 * Function to save after altering an aggregate 	 */	function doSaveAlter() {		global $data, $lang;		// Check inputs 		if (trim($_REQUEST['aggrname']) == '') { 			doAlter($lang['straggrneedsname']); 			return; 		} 		$status = $data->alterAggregate($_REQUEST['aggrname'], $_REQUEST['aggrtype'], $_REQUEST['aggrowner'], 			$_REQUEST['aggrschema'], $_REQUEST['aggrcomment'], $_REQUEST['newaggrname'], $_REQUEST['newaggrowner'], 			$_REQUEST['newaggrschema'], $_REQUEST['newaggrcomment']);		if ($status == 0)			doDefault($lang['straggraltered']);		else {			doAlter($lang['straggralteredbad']);			return;		}	}	/**	 * Function to allow editing an aggregate function	 */	function doAlter($msg = '') {		global $data, $misc;		global $lang;		$misc->printTrail('aggregate');		$misc->printTitle($lang['stralter'], 'pg.aggregate.alter');		$misc->printMsg($msg);		echo "<form action=\"aggregates.php\" method=\"post\">\n";		$aggrdata = $data->getAggregate($_REQUEST['aggrname'], $_REQUEST['aggrtype']);		if($aggrdata->recordCount() > 0 ) {			// Output table header			echo "<table>\n";			echo "\t<tr>\n\t\t<th class=\"data required\">{$lang['strname']}</th>";			echo "<th class=\"data required\">{$lang['strowner']}</th>";			echo "<th class=\"data required\">{$lang['strschema']}</th>\n\t</tr>\n";			// Display aggregate's name, owner and schema			echo "\t<tr>\n\t\t<td><input name=\"newaggrname\" size=\"32\" maxlength=\"32\" value=\"", htmlspecialchars($_REQUEST['aggrname']), "\" /></td>";			echo "<td><input name=\"newaggrowner\" size=\"32\" maxlength=\"32\" value=\"", htmlspecialchars($aggrdata->fields['usename']), "\" /></td>";			echo "<td><input name=\"newaggrschema\" size=\"32\" maxlength=\"32\" value=\"", htmlspecialchars($_REQUEST['schema']), "\" /></td>\n\t</tr>\n";			echo "\t<tr>\n\t\t<th class=\"data left\">{$lang['strcomment']}</th>\n";			echo "\t\t<td><textarea name=\"newaggrcomment\" rows=\"3\" cols=\"32\">", 				htmlspecialchars($aggrdata->fields['aggrcomment']), "</textarea></td>\n\t</tr>\n";			echo "</table>\n";			echo "<p><input type=\"hidden\" name=\"action\" value=\"save_alter\" />\n";			echo $misc->form;			echo "<input type=\"hidden\" name=\"aggrname\" value=\"", htmlspecialchars($_REQUEST['aggrname']), "\" />\n";			echo "<input type=\"hidden\" name=\"aggrtype\" value=\"", htmlspecialchars($_REQUEST['aggrtype']), "\" />\n";			echo "<input type=\"hidden\" name=\"aggrowner\" value=\"", htmlspecialchars($aggrdata->fields['usename']), "\" />\n";			echo "<input type=\"hidden\" name=\"aggrschema\" value=\"", htmlspecialchars($_REQUEST['schema']), "\" />\n";			echo "<input type=\"hidden\" name=\"aggrcomment\" value=\"", htmlspecialchars($aggrdata->fields['aggrcomment']), "\" />\n";			echo "<input type=\"submit\" name=\"alter\" value=\"{$lang['stralter']}\" />\n";			echo "<input type=\"submit\" name=\"cancel\" value=\"{$lang['strcancel']}\" /></p>\n";		} else {			echo "<p>{$lang['strnodata']}</p>\n";			echo "<input type=\"submit\" name=\"cancel\" value=\"{$lang['strback']}\" /></p>\n";		}			echo "</form>\n";							}	/**	 * Show confirmation of drop and perform actual drop of the aggregate function selected	 */	function doDrop($confirm) {		global $data, $misc;		global $lang, $_reload_browser;		if ($confirm) {			$misc->printTrail('aggregate');			$misc->printTitle($lang['strdrop'], 'pg.aggregate.drop');			echo "<p>", sprintf($lang['strconfdropaggregate'], htmlspecialchars($_REQUEST['aggrname'])), "</p>\n";			echo "<form action=\"aggregates.php\" method=\"post\">\n";			echo "<p><input type=\"checkbox\" id=\"cascade\" name=\"cascade\" /> <label for=\"cascade\">{$lang['strcascade']}</label></p>\n";			echo "<p><input type=\"hidden\" name=\"action\" value=\"drop\" />\n";			echo "<input type=\"hidden\" name=\"aggrname\" value=\"", htmlspecialchars($_REQUEST['aggrname']), "\" />\n";			echo "<input type=\"hidden\" name=\"aggrtype\" value=\"", htmlspecialchars($_REQUEST['aggrtype']), "\" />\n";			echo $misc->form;			echo "<input type=\"submit\" name=\"drop\" value=\"{$lang['strdrop']}\" />\n";			echo "<input type=\"submit\" name=\"cancel\" value=\"{$lang['strcancel']}\" /></p>\n";			echo "</form>\n";		}		else {			$status = $data->dropAggregate($_POST['aggrname'], $_POST['aggrtype'], isset($_POST['cascade']));			if ($status == 0) {				$_reload_browser = true;				doDefault($lang['straggregatedropped']);			}			else				doDefault($lang['straggregatedroppedbad']);		}	}	/**	 * Show the properties of an aggregate	 */	function doProperties($msg = '') {		global $data, $misc;		global $lang;		$misc->printTrail('aggregate');		$misc->printTitle($lang['strproperties'],'pg.aggregate');		$misc->printMsg($msg);		$aggrdata = $data->getAggregate($_REQUEST['aggrname'], $_REQUEST['aggrtype']);		if($aggrdata->recordCount() > 0 ) {			// Display aggregate's info			echo "<table>\n";			echo "<tr>\n\t<th class=\"data left\">{$lang['strname']}</th>\n";			echo "\t<td class=\"data1\">", htmlspecialchars($_REQUEST['aggrname']), "</td>\n</tr>\n";			echo "<tr>\n\t<th class=\"data left\">{$lang['straggrbasetype']}</th>\n";			echo "\t<td class=\"data1\">", htmlspecialchars($_REQUEST['aggrtype']), "</td>\n</tr>\n";			echo "<tr>\n\t<th class=\"data left\">{$lang['straggrsfunc']}</th>\n";			echo "\t<td class=\"data1\">", htmlspecialchars($aggrdata->fields['aggtransfn']), "</td>\n</tr>\n";			echo "<tr>\n\t<th class=\"data left\">{$lang['straggrstype']}</th>\n";			echo "\t<td class=\"data1\">", htmlspecialchars($aggrdata->fields['aggstype']), "</td>\n</tr>\n";			echo "<tr>\n\t<th class=\"data left\">{$lang['straggrffunc']}</th>\n";			echo "\t<td class=\"data1\">", htmlspecialchars($aggrdata->fields['aggfinalfn']), "</td>\n</tr>\n";			echo "<tr>\n\t<th class=\"data left\">{$lang['straggrinitcond']}</th>\n";			echo "\t<td class=\"data1\">", htmlspecialchars($aggrdata->fields['agginitval']), "</td>\n</tr>\n";			if($data->hasAggregateSortOp()) {				echo "<tr>\n\t<th class=\"data left\">{$lang['straggrsortop']}</th>\n";				echo "\t<td class=\"data1\">", htmlspecialchars($aggrdata->fields['aggsortop']), "</td>\n</tr>\n";			}			echo "<tr>\n\t<th class=\"data left\">{$lang['strowner']}</th>\n";			echo "\t<td class=\"data1\">", htmlspecialchars($aggrdata->fields['usename']), "</td>\n</tr>\n";			echo "<tr>\n\t<th class=\"data left\">{$lang['strcomment']}</th>\n";			echo "\t<td class=\"data1\">", $misc->printVal($aggrdata->fields['aggrcomment']), "</td>\n</tr>\n";			echo "</table>\n";		}		else echo "<p>{$lang['strnodata']}</p>\n";		echo "<ul class=\"navlink\">\n\t<li><a class=\"navlink\" href=\"aggregates.php?{$misc->href}\">{$lang['straggrshowall']}</a></li>\n";		if ($data->hasAlterAggregate()) {		echo "\t<li><a class=\"navlink\" href=\"aggregates.php?action=alter&amp;{$misc->href}&amp;aggrname=", 			urlencode($_REQUEST['aggrname']), "&amp;aggrtype=", urlencode($_REQUEST['aggrtype']), "\">{$lang['stralter']}</a></li>\n";		}		echo "\t<li><a class=\"navlink\" href=\"aggregates.php?action=confirm_drop&amp;{$misc->href}&amp;aggrname=",			urlencode($_REQUEST['aggrname']), "&amp;aggrtype=", urlencode($_REQUEST['aggrtype']), "\">{$lang['strdrop']}</a></li>\n</ul>\n";	}	/**	 * Show default list of aggregate functions in the database	 */	function doDefault($msg = '') {		global $data, $conf, $misc;			global $lang;		$misc->printTrail('schema');		$misc->printTabs('schema', 'aggregates');		$misc->printMsg($msg);				$aggregates = $data->getAggregates();		$columns = array(			'aggrname' => array(				'title' => $lang['strname'],				'field' => field('proname'),				'url'   => "redirect.php?subject=aggregate&amp;action=properties&amp;{$misc->href}&amp;",				'vars'  => array('aggrname' => 'proname', 'aggrtype' => 'proargtypes'),			),			'aggrtype' => array(				'title' => $lang['strtype'],				'field' => field('proargtypes'),			),			'aggrtransfn' => array(				'title' => $lang['straggrsfunc'],				'field' => field('aggtransfn'),			),						'owner' => array(				'title' => $lang['strowner'],				'field' => field('usename'),			),						'actions' => array(				'title' => $lang['stractions'],			),						'comment' => array(				'title' => $lang['strcomment'],				'field' => field('aggrcomment'),			),		);				$actions = array(			'alter' => array(				'title' => $lang['stralter'],				'url'   => "aggregates.php?action=alter&amp;{$misc->href}&amp;",				'vars'  => array('aggrname' => 'proname', 'aggrtype' => 'proargtypes'),			),			'drop' => array(				'title' => $lang['strdrop'],				'url'   => "aggregates.php?action=confirm_drop&amp;{$misc->href}&amp;",				'vars'  => array('aggrname' => 'proname', 'aggrtype' => 'proargtypes'),			)		);		if (!$data->hasAlterAggregate()) unset($actions['alter']);		$misc->printTable($aggregates, $columns, $actions, $lang['strnoaggregates']);				echo "<p><a class=\"navlink\" href=\"aggregates.php?action=create&amp;{$misc->href}\">{$lang['strcreateaggregate']}</a></p>\n";	}	/**	 * Generate XML for the browser tree.	 */	function doTree() {		global $misc, $data;				$aggregates = $data->getAggregates();		$proto = concat(field('proname'), ' (', field('proargtypes'), ')');		$reqvars = $misc->getRequestVars('aggregate');				$attrs = array(			'text'    => $proto,			'icon'    => 'Aggregate',			'toolTip' => field('aggcomment'),			'action'  => url('redirect.php',				$reqvars,				array(					'action' => 'properties',					'aggrname' => field('proname'),					'aggrtype' => field('proargtypes')				)			)		);				$misc->printTreeXML($aggregates, $attrs);		exit;	}		if ($action == 'tree') doTree();		$misc->printHeader($lang['straggregates']);	$misc->printBody();	switch ($action) {		case 'create':			doCreate();			break;		case 'save_create':			if (isset($_POST['cancel'])) doDefault();			else doSaveCreate();			break;		case 'alter':			doAlter();			break;		case 'save_alter':			if (isset($_POST['alter'])) doSaveAlter();			else doProperties();			break;		case 'drop':			if (isset($_POST['drop'])) doDrop(false);			else doDefault();			break;		case 'confirm_drop':			doDrop(true);			break;		default:			doDefault();			break;		case 'properties':			doProperties();			break;	}	$misc->printFooter();?>
<?php/** * A class that implements the DB interface for Postgres * Note: This class uses ADODB and returns RecordSets. * * $Id: Postgres74.php,v 1.72 2008/02/20 21:06:18 ioguix Exp $ */include_once('./classes/database/Postgres80.php');class Postgres74 extends Postgres80 {	var $major_version = 7.4;	// List of all legal privileges that can be applied to different types	// of objects.	var $privlist = array(		'table' => array('SELECT', 'INSERT', 'UPDATE', 'DELETE', 'RULE', 'REFERENCES', 'TRIGGER', 'ALL PRIVILEGES'),		'view' => array('SELECT', 'INSERT', 'UPDATE', 'DELETE', 'RULE', 'REFERENCES', 'TRIGGER', 'ALL PRIVILEGES'),		'sequence' => array('SELECT', 'UPDATE', 'ALL PRIVILEGES'),		'database' => array('CREATE', 'TEMPORARY', 'ALL PRIVILEGES'),		'function' => array('EXECUTE', 'ALL PRIVILEGES'),		'language' => array('USAGE', 'ALL PRIVILEGES'),		'schema' => array('CREATE', 'USAGE', 'ALL PRIVILEGES')	);	/**	 * Constructor	 * @param $conn The database connection	 */	function Postgres74($conn) {		$this->Postgres80($conn);	}	// Help functions	function getHelpPages() {		include_once('./help/PostgresDoc74.php');		return $this->help_page;	}	// Database functions	/**	 * Alters a database	 * the multiple return vals are for postgres 8+ which support more functionality in alter database	 * @param $dbName The name of the database	 * @param $newName new name for the database	 * @param $newOwner The new owner for the database	 * @return 0 success	 * @return -1 transaction error	 * @return -2 owner error	 * @return -3 rename error	 */	function alterDatabase($dbName, $newName, $newOwner = '', $comment = '') {		//ignore $newowner, not supported pre 8.0		//ignore $comment, not supported pre 8.2		$this->clean($dbName);		$this->clean($newName);		$status = $this->alterDatabaseRename($dbName, $newName);		if ($status != 0) return -3;		else return 0;	}	/**	 * Return all database available on the server	 * @return A list of databases, sorted alphabetically	 */	function getDatabases($currentdatabase = NULL) {		global $conf, $misc;		$server_info = $misc->getServerInfo();		if (isset($conf['owned_only']) && $conf['owned_only'] && !$this->isSuperUser($server_info['username'])) {			$username = $server_info['username'];			$this->clean($username);			$clause = " AND pu.usename='{$username}'";		}		else $clause = '';		if ($currentdatabase != NULL) {			$this->clean($currentdatabase);			$orderby = "ORDER BY pdb.datname = '{$currentdatabase}' DESC, pdb.datname";		}		else			$orderby = "ORDER BY pdb.datname";		if (!$conf['show_system'])			$where = ' AND NOT pdb.datistemplate';		else			$where = ' AND pdb.datallowconn';		$sql = "SELECT pdb.datname AS datname, pu.usename AS datowner, pg_encoding_to_char(encoding) AS datencoding,                               (SELECT description FROM pg_description pd WHERE pdb.oid=pd.objoid) AS datcomment                        FROM pg_database pdb, pg_user pu			WHERE pdb.datdba = pu.usesysid			{$where}			{$clause}			{$orderby}";		return $this->selectSet($sql);	}	// Table functions	/**	 * Protected method which alter a table	 * SHOULDN'T BE CALLED OUTSIDE OF A TRANSACTION	 * @param $tblrs The table recordSet returned by getTable()	 * @param $name The new name for the table	 * @param $owner The new owner for the table	 * @param $schema The new schema for the table	 * @param $comment The comment on the table	 * @param $tablespace The new tablespace for the table ('' means leave as is)	 * @return 0 success	 * @return -3 rename error	 * @return -4 comment error	 * @return -5 owner error	 */	protected	function _alterTable($tblrs, $name, $owner, $schema, $comment, $tablespace) {		/* $schema and tablespace not supported in pg74- */		$this->fieldArrayClean($tblrs->fields);		// Comment		$status = $this->setComment('TABLE', '', $tblrs->fields['relname'], $comment);		if ($status != 0) return -4;		// Owner		$this->fieldClean($owner);		$status = $this->alterTableOwner($tblrs, $owner);		if ($status != 0) return -5;		// Rename		$this->fieldClean($name);		$status = $this->alterTableName($tblrs, $name);		if ($status != 0) return -3;		return 0;	}	/**	 * Alters a column in a table OR view	 * @param $table The table in which the column resides	 * @param $column The column to alter	 * @param $name The new name for the column	 * @param $notnull (boolean) True if not null, false otherwise	 * @param $oldnotnull (boolean) True if column is already not null, false otherwise	 * @param $default The new default for the column	 * @param $olddefault The old default for the column	 * @param $type The new type for the column	 * @param $array True if array type, false otherwise	 * @param $length The optional size of the column (ie. 30 for varchar(30))	 * @param $oldtype The old type for the column	 * @param $comment Comment for the column	 * @return 0 success	 * @return -2 set not null error	 * @return -3 set default error	 * @return -4 rename column error	 * @return -5 comment error	 * @return -6 transaction error	 */	function alterColumn($table, $column, $name, $notnull, $oldnotnull, $default, $olddefault,	$type, $length, $array, $oldtype, $comment)	{		$status = $this->beginTransaction();		if ($status != 0) return -1;		// @@ NEED TO HANDLE "NESTED" TRANSACTION HERE		if ($notnull != $oldnotnull) {			$status = $this->setColumnNull($table, $column, !$notnull);			if ($status != 0) {				$this->rollbackTransaction();				return -2;			}		}		// Set default, if it has changed		if ($default != $olddefault) {			if ($default == '')				$status = $this->dropColumnDefault($table, $column);			else				$status = $this->setColumnDefault($table, $column, $default);			if ($status != 0) {				$this->rollbackTransaction();				return -3;			}		}		// Rename the column, if it has been changed		if ($column != $name) {			$status = $this->renameColumn($table, $column, $name);			if ($status != 0) {				$this->rollbackTransaction();				return -4;			}		}		// The $name and $table parameters must be cleaned for the setComment function.                  // It's ok to do that here since this is the last time these variables are used.		$this->fieldClean($name);		$this->fieldClean($table);		$status = $this->setComment('COLUMN', $name, $table, $comment);		if ($status != 0) {			$this->rollbackTransaction();			return -5;		}		return $this->endTransaction();	}	/**	 * Returns table information	 * @param $table The name of the table	 * @return A recordset	 */	function getTable($table) {		$c_schema = $this->_schema;		$this->clean($c_schema);		$this->clean($table);		$sql = "			SELECT			  c.relname, n.nspname, u.usename AS relowner,			  pg_catalog.obj_description(c.oid, 'pg_class') AS relcomment			FROM pg_catalog.pg_class c			     LEFT JOIN pg_catalog.pg_user u ON u.usesysid = c.relowner			     LEFT JOIN pg_catalog.pg_namespace n ON n.oid = c.relnamespace			WHERE c.relkind = 'r'				AND n.nspname = '{$c_schema}'			    AND c.relname = '{$table}'";		return $this->selectSet($sql);	}	/**	 * Return all tables in current database (and schema)	 * @param $all True to fetch all tables, false for just in current schema	 * @return All tables, sorted alphabetically	 */	function getTables($all = false) {		$c_schema = $this->_schema;		$this->clean($c_schema);		if ($all) {			// Exclude pg_catalog and information_schema tables			$sql = "SELECT schemaname AS nspname, tablename AS relname, tableowner AS relowner					FROM pg_catalog.pg_tables					WHERE schemaname NOT IN ('pg_catalog', 'information_schema', 'pg_toast')					ORDER BY schemaname, tablename";		} else {			$sql = "SELECT c.relname, pg_catalog.pg_get_userbyid(c.relowner) AS relowner,						pg_catalog.obj_description(c.oid, 'pg_class') AS relcomment,						reltuples::bigint					FROM pg_catalog.pg_class c					LEFT JOIN pg_catalog.pg_namespace n ON n.oid = c.relnamespace					WHERE c.relkind = 'r'					AND nspname='{$c_schema}'					ORDER BY c.relname";		}		return $this->selectSet($sql);	}	/**	 * Returns the current default_with_oids setting	 * @return default_with_oids setting	 */	function getDefaultWithOid() {		// 8.0 is the first release to have this setting		// Prior releases don't have this setting... oids always activated		return 'on';		}	// Sequence functions	/**	 * Returns all sequences in the current database	 * @return A recordset	 */	function getSequences($all = false) {		$c_schema = $this->_schema;		$this->clean($c_schema);		if ($all) {			// Exclude pg_catalog and information_schema tables			$sql = "SELECT n.nspname, c.relname AS seqname, u.usename AS seqowner				FROM pg_catalog.pg_class c, pg_catalog.pg_user u, pg_catalog.pg_namespace n				WHERE c.relowner=u.usesysid AND c.relnamespace=n.oid				AND c.relkind = 'S'				AND n.nspname NOT IN ('pg_catalog', 'information_schema', 'pg_toast')				ORDER BY nspname, seqname";		} else {			$sql = "SELECT c.relname AS seqname, u.usename AS seqowner, pg_catalog.obj_description(c.oid, 'pg_class') AS seqcomment				FROM pg_catalog.pg_class c, pg_catalog.pg_user u, pg_catalog.pg_namespace n				WHERE c.relowner=u.usesysid AND c.relnamespace=n.oid				AND c.relkind = 'S' AND n.nspname='{$c_schema}' ORDER BY seqname";		}		return $this->selectSet( $sql );		}	// Function functions	/**	 * Returns all details for a particular function	 * @param $func The name of the function to retrieve	 * @return Function info	 */	function getFunction($function_oid) {		$this->clean($function_oid);		$sql = "		SELECT			pc.oid AS prooid,			proname,			pg_catalog.pg_get_userbyid(proowner) AS proowner,			nspname as proschema,			lanname as prolanguage,			pg_catalog.format_type(prorettype, NULL) as proresult,			prosrc,			probin,			proretset,			proisstrict,			provolatile,			prosecdef,			pg_catalog.oidvectortypes(pc.proargtypes) AS proarguments,			pg_catalog.obj_description(pc.oid, 'pg_proc') AS procomment		FROM			pg_catalog.pg_proc pc, pg_catalog.pg_language pl, pg_catalog.pg_namespace n		WHERE			pc.oid = '$function_oid'::oid			AND pc.prolang = pl.oid			AND n.oid = pc.pronamespace		";		return $this->selectSet($sql);	}	// Capabilities	function hasAlterColumnType() { return false; }	function hasCreateFieldWithConstraints() { return false; }	function hasAlterDatabaseOwner() { return false; }	function hasAlterSchemaOwner() { return false; }	function hasFunctionAlterOwner() { return false; }	function hasNamedParams() { return false; }	function hasQueryCancel() { return false; }	function hasTablespaces() { return false; }	function hasMagicTypes() { return false; }}?>
<?php	/**	 * List reports in a database	 *	 * $Id: reports.php,v 1.34 2008/01/09 00:19:10 ioguix Exp $	 */	// Include application functions	include_once('./libraries/lib.inc.php');	$action = (isset($_REQUEST['action'])) ? $_REQUEST['action'] : '';	/**	 * Displays a screen where they can edit a report	 */	function doEdit($msg = '') {		global $data, $reportsdb, $misc;		global $lang;		// If it's a first, load then get the data from the database		$report = $reportsdb->getReport($_REQUEST['report_id']);		if ($_REQUEST['action'] == 'edit') {						$_POST['report_name'] = $report->fields['report_name'];			$_POST['db_name'] = $report->fields['db_name'];			$_POST['descr'] = $report->fields['descr'];			$_POST['report_sql'] = $report->fields['report_sql'];			if ($report->fields['paginate'] == 't') {				$_POST['paginate'] = TRUE;			}		}		// Get a list of available databases		$databases = $data->getDatabases();		$_REQUEST['report'] = $report->fields['report_name'];		$misc->printTrail('report');		$misc->printTitle($lang['stredit']);		$misc->printMsg($msg);		echo "<form action=\"reports.php\" method=\"post\">\n";		echo $misc->form;		echo "<table style=\"width: 100%\">\n";		echo "<tr><th class=\"data left required\">{$lang['strname']}</th>\n";		echo "<td class=\"data1\"><input name=\"report_name\" size=\"32\" maxlength=\"{$data->_maxNameLen}\" value=\"",			htmlspecialchars($_POST['report_name']), "\" /></td></tr>\n";		echo "<tr><th class=\"data left required\">{$lang['strdatabase']}</th>\n";		echo "<td class=\"data1\"><select name=\"db_name\">\n";		while (!$databases->EOF) {			$dbname = $databases->fields['datname'];			echo "<option value=\"", htmlspecialchars($dbname), "\"",			($dbname == $_POST['db_name']) ? ' selected="selected"' : '', ">",				htmlspecialchars($dbname), "</option>\n";			$databases->moveNext();		}		echo "</select></td></tr>\n";		echo "<tr><th class=\"data left\">{$lang['strcomment']}</th>\n";		echo "<td class=\"data1\"><textarea style=\"width:100%;\" rows=\"5\" cols=\"50\" name=\"descr\">",			htmlspecialchars($_POST['descr']), "</textarea></td></tr>\n";		echo "<tr><th class=\"data left required\">{$lang['strsql']}</th>\n";		echo "<td class=\"data1\"><textarea style=\"width:100%;\" rows=\"15\" cols=\"50\" name=\"report_sql\">",			htmlspecialchars($_POST['report_sql']), "</textarea></td></tr>\n";		echo "</table>\n";		echo "<label for=\"paginate\"><input type=\"checkbox\" id=\"paginate\" name=\"paginate\"", (isset($_POST['paginate']) ? ' checked="checked"' : ''), " />&nbsp;{$lang['strpaginate']}</label>\n";		echo "<p><input type=\"hidden\" name=\"action\" value=\"save_edit\" />\n";		echo "<input type=\"submit\" value=\"{$lang['strsave']}\" />\n";		echo "<input type=\"submit\" name=\"cancel\" value=\"{$lang['strcancel']}\" /></p>\n";		echo "<input type=\"hidden\" name=\"report_id\" value=\"{$report->fields['report_id']}\" />\n";		echo "</form>\n";	}	/**	 * Saves changes to a report	 */	function doSaveEdit() {		global $reportsdb, $lang;		if (!isset($_POST['report_name'])) $_POST['report_name'] = '';		if (!isset($_POST['db_name'])) $_POST['db_name'] = '';		if (!isset($_POST['descr'])) $_POST['descr'] = '';		if (!isset($_POST['report_sql'])) $_POST['report_sql'] = '';		// Check that they've given a name and a definition		if ($_POST['report_name'] == '') doEdit($lang['strreportneedsname']);		elseif ($_POST['report_sql'] == '') doEdit($lang['strreportneedsdef']);		else {			$status = $reportsdb->alterReport($_POST['report_id'], $_POST['report_name'], $_POST['db_name'],								$_POST['descr'], $_POST['report_sql'], isset($_POST['paginate']));			if ($status == 0)				doDefault($lang['strreportcreated']);			else				doEdit($lang['strreportcreatedbad']);		}	}	/**	 * Display read-only properties of a report	 */	function doProperties($msg = '') {		global $data, $reportsdb, $misc;		global $lang;		$report = $reportsdb->getReport($_REQUEST['report_id']);		$_REQUEST['report'] = $report->fields['report_name'];		$misc->printTrail('report');		$misc->printTitle($lang['strproperties']);		$misc->printMsg($msg);		if ($report->recordCount() == 1) {			echo "<table>\n";			echo "<tr><th class=\"data left\">{$lang['strname']}</th>\n";			echo "<td class=\"data1\">", $misc->printVal($report->fields['report_name']), "</td></tr>\n";			echo "<tr><th class=\"data left\">{$lang['strdatabase']}</th>\n";			echo "<td class=\"data1\">", $misc->printVal($report->fields['db_name']), "</td></tr>\n";			echo "<tr><th class=\"data left\">{$lang['strcomment']}</th>\n";			echo "<td class=\"data1\">", $misc->printVal($report->fields['descr']), "</td></tr>\n";			echo "<tr><th class=\"data left\">{$lang['strsql']}</th>\n";			echo "<td class=\"data1\">", $misc->printVal($report->fields['report_sql']), "</td></tr>\n";			echo "</table>\n";		}		else echo "<p>{$lang['strinvalidparam']}</p>\n";		echo "<ul class=\"navlink\">\n\t<li><a href=\"reports.php?{$misc->href}\">{$lang['strshowallreports']}</a></li>\n";		echo "\t<li><a href=\"reports.php?action=edit&amp;{$misc->href}&amp;report_id={$report->fields['report_id']}\">{$lang['stredit']}</a></li>\n</ul>\n";	}	/**	 * Displays a screen where they can enter a new report	 */	function doCreate($msg = '') {		global $data, $reportsdb, $misc;		global $lang;		if (!isset($_REQUEST['report_name'])) $_REQUEST['report_name'] = '';		if (!isset($_REQUEST['db_name'])) $_REQUEST['db_name'] = '';		if (!isset($_REQUEST['descr'])) $_REQUEST['descr'] = '';		if (!isset($_REQUEST['report_sql'])) $_REQUEST['report_sql'] = '';		if (isset($_REQUEST['database'])) {			$_REQUEST['db_name'] = $_REQUEST['database'];			unset($_REQUEST['database']);			$misc->setForm();		}				$databases = $data->getDatabases();		$misc->printTrail('server');		$misc->printTitle($lang['strcreatereport']);		$misc->printMsg($msg);		echo "<form action=\"reports.php\" method=\"post\">\n";		echo $misc->form;		echo "<table style=\"width: 100%\">\n";		echo "<tr><th class=\"data left required\">{$lang['strname']}</th>\n";		echo "<td class=\"data1\"><input name=\"report_name\" size=\"32\" maxlength=\"{$data->_maxNameLen}\" value=\"",			htmlspecialchars($_REQUEST['report_name']), "\" /></td></tr>\n";		echo "<tr><th class=\"data left required\">{$lang['strdatabase']}</th>\n";		echo "<td class=\"data1\"><select name=\"db_name\">\n";		while (!$databases->EOF) {			$dbname = $databases->fields['datname'];			echo "<option value=\"", htmlspecialchars($dbname), "\"",			($dbname == $_REQUEST['db_name']) ? ' selected="selected"' : '', ">",				htmlspecialchars($dbname), "</option>\n";			$databases->moveNext();		}		echo "</select></td></tr>\n";		echo "<tr><th class=\"data left\">{$lang['strcomment']}</th>\n";		echo "<td class=\"data1\"><textarea style=\"width:100%;\" rows=\"5\" cols=\"50\" name=\"descr\">",			htmlspecialchars($_REQUEST['descr']), "</textarea></td></tr>\n";		echo "<tr><th class=\"data left required\">{$lang['strsql']}</th>\n";		echo "<td class=\"data1\"><textarea style=\"width:100%;\" rows=\"15\" cols=\"50\" name=\"report_sql\">",			htmlspecialchars($_REQUEST['report_sql']), "</textarea></td></tr>\n";		echo "</table>\n";		echo "<label for=\"paginate\"><input type=\"checkbox\" id=\"paginate\" name=\"paginate\"", (isset($_REQUEST['paginate']) ? ' checked="checked"' : ''), " />&nbsp;{$lang['strpaginate']}</label>\n";		echo "<p><input type=\"hidden\" name=\"action\" value=\"save_create\" />\n";		echo "<input type=\"submit\" value=\"{$lang['strsave']}\" />\n";		echo "<input type=\"submit\" name=\"cancel\" value=\"{$lang['strcancel']}\" /></p>\n";		echo "</form>\n";	}	/**	 * Actually creates the new report in the database	 */	function doSaveCreate() {		global $reportsdb, $lang;		if (!isset($_POST['report_name'])) $_POST['report_name'] = '';		if (!isset($_POST['db_name'])) $_POST['db_name'] = '';		if (!isset($_POST['descr'])) $_POST['descr'] = '';		if (!isset($_POST['report_sql'])) $_POST['report_sql'] = '';		// Check that they've given a name and a definition		if ($_POST['report_name'] == '') doCreate($lang['strreportneedsname']);		elseif ($_POST['report_sql'] == '') doCreate($lang['strreportneedsdef']);		else {			$status = $reportsdb->createReport($_POST['report_name'], $_POST['db_name'],								$_POST['descr'], $_POST['report_sql'], isset($_POST['paginate']));			if ($status == 0)				doDefault($lang['strreportcreated']);			else				doCreate($lang['strreportcreatedbad']);		}	}	/**	 * Show confirmation of drop and perform actual drop	 */	function doDrop($confirm) {		global $reportsdb, $misc;		global $lang;		if ($confirm) {			// Fetch report from the database			$report = $reportsdb->getReport($_REQUEST['report_id']);			$_REQUEST['report'] = $report->fields['report_name'];			$misc->printTrail('report');			$misc->printTitle($lang['strdrop']);			echo "<p>", sprintf($lang['strconfdropreport'], $misc->printVal($report->fields['report_name'])), "</p>\n";			echo "<form action=\"reports.php\" method=\"post\">\n";			echo $misc->form;			echo "<input type=\"hidden\" name=\"action\" value=\"drop\" />\n";			echo "<input type=\"hidden\" name=\"report_id\" value=\"", htmlspecialchars($_REQUEST['report_id']), "\" />\n";			echo "<input type=\"submit\" name=\"drop\" value=\"{$lang['strdrop']}\" />\n";			echo "<input type=\"submit\" name=\"cancel\" value=\"{$lang['strcancel']}\" />\n";			echo "</form>\n";		}		else {			$status = $reportsdb->dropReport($_POST['report_id']);			if ($status == 0)				doDefault($lang['strreportdropped']);			else				doDefault($lang['strreportdroppedbad']);		}	}	/**	 * Show default list of reports in the database	 */	function doDefault($msg = '') {		global $data, $misc, $reportsdb;		global $lang;		$misc->printTrail('server');		$misc->printTabs('server','reports');		$misc->printMsg($msg);				$reports = $reportsdb->getReports();		$columns = array(			'report' => array(				'title' => $lang['strreport'],				'field' => field('report_name'),				'url'   => "reports.php?action=properties&amp;{$misc->href}&amp;",				'vars'  => array('report_id' => 'report_id'),			),			'database' => array(				'title' => $lang['strdatabase'],				'field' => field('db_name'),			),			'created' => array(				'title' => $lang['strcreated'],				'field' => field('date_created'),			),			'actions' => array(				'title' => $lang['stractions'],			),			'comment' => array(				'title' => $lang['strcomment'],				'field' => field('descr'),			),		);				$return_url = urlencode("reports.php?{$misc->href}");				$actions = array(			'run' => array(				'title' => $lang['strexecute'],				'url'   => "sql.php?subject=report&amp;{$misc->href}&amp;return_url={$return_url}&amp;return_desc=".urlencode($lang['strback'])."&amp;",				'vars'  => array('report' => 'report_name', 'database' => 'db_name', 'reportid' => 'report_id', 'paginate' => 'paginate'),			),			'edit' => array(				'title' => $lang['stredit'],				'url'   => "reports.php?action=edit&amp;{$misc->href}&amp;",				'vars'  => array('report_id' => 'report_id'),			),			'drop' => array(				'title' => $lang['strdrop'],				'url'   => "reports.php?action=confirm_drop&amp;{$misc->href}&amp;",				'vars'  => array('report_id' => 'report_id'),			),		);				$misc->printTable($reports, $columns, $actions, $lang['strnoreports']);				echo "<p><a class=\"navlink\" href=\"reports.php?action=create&amp;{$misc->href}\">{$lang['strcreatereport']}</a></p>\n";	}		$misc->printHeader($lang['strreports']);	$misc->printBody();	// Create a database accessor for the reports database	include_once('./classes/Reports.php');	$reportsdb = new Reports($status);	if ($status != 0) {		$misc->printTrail('server');		$misc->printTabs('server','reports');		$misc->printMsg($lang['strnoreportsdb']);	}	else {		switch ($action) {			case 'save_edit':				if (isset($_POST['cancel'])) doDefault();				else doSaveEdit();				break;			case 'edit':				doEdit();				break;			case 'properties':				doProperties();				break;			case 'save_create':				if (isset($_POST['cancel'])) doDefault();				else doSaveCreate();				break;			case 'create':				doCreate();				break;			case 'drop':				if (isset($_POST['drop'])) doDrop(false);				else doDefault();				break;			case 'confirm_drop':				doDrop(true);				break;			default:				doDefault();				break;		}	}	$misc->printFooter();?>
<?php/** * PostgreSQL 8.4 support * * $Id: Postgres82.php,v 1.10 2007/12/28 16:21:25 ioguix Exp $ */include_once('./classes/database/Postgres.php');class Postgres84 extends Postgres {	var $major_version = 8.4;	// List of all legal privileges that can be applied to different types	// of objects.	var $privlist = array(  		'table' => array('SELECT', 'INSERT', 'UPDATE', 'DELETE', 'REFERENCES', 'TRIGGER', 'ALL PRIVILEGES'),  		'view' => array('SELECT', 'INSERT', 'UPDATE', 'DELETE', 'REFERENCES', 'TRIGGER', 'ALL PRIVILEGES'),  		'sequence' => array('SELECT', 'UPDATE', 'ALL PRIVILEGES'),  		'database' => array('CREATE', 'TEMPORARY', 'CONNECT', 'ALL PRIVILEGES'),  		'function' => array('EXECUTE', 'ALL PRIVILEGES'),  		'language' => array('USAGE', 'ALL PRIVILEGES'),  		'schema' => array('CREATE', 'USAGE', 'ALL PRIVILEGES'),  		'tablespace' => array('CREATE', 'ALL PRIVILEGES'),		'column' => array('SELECT', 'INSERT', 'UPDATE', 'REFERENCES','ALL PRIVILEGES')	);	/**	 * Constructor	 * @param $conn The database connection	 */	function Postgres84($conn) {		$this->Postgres($conn);	}	// Help functions	function getHelpPages() {		include_once('./help/PostgresDoc84.php');		return $this->help_page;	}	// Databse functions	/**	 * Grabs a list of triggers on a table	 * @param $table The name of a table whose triggers to retrieve	 * @return A recordset	 */	function getTriggers($table = '') {		$c_schema = $this->_schema;		$this->clean($c_schema);		$this->clean($table);		$sql = "SELECT				t.tgname, pg_catalog.pg_get_triggerdef(t.oid) AS tgdef,				CASE WHEN t.tgenabled = 'D' THEN FALSE ELSE TRUE END AS tgenabled, p.oid AS prooid,				p.proname || ' (' || pg_catalog.oidvectortypes(p.proargtypes) || ')' AS proproto,				ns.nspname AS pronamespace			FROM pg_catalog.pg_trigger t, pg_catalog.pg_proc p, pg_catalog.pg_namespace ns			WHERE t.tgrelid = (SELECT oid FROM pg_catalog.pg_class WHERE relname='{$table}'				AND relnamespace=(SELECT oid FROM pg_catalog.pg_namespace WHERE nspname='{$c_schema}'))				AND (NOT tgisconstraint OR NOT EXISTS						(SELECT 1 FROM pg_catalog.pg_depend d    JOIN pg_catalog.pg_constraint c							ON (d.refclassid = c.tableoid AND d.refobjid = c.oid)						WHERE d.classid = t.tableoid AND d.objid = t.oid AND d.deptype = 'i' AND c.contype = 'f'))				AND p.oid=t.tgfoid				AND p.pronamespace = ns.oid";		return $this->selectSet($sql);	}	/**	 * Searches all system catalogs to find objects that match a certain name.	 * @param $term The search term	 * @param $filter The object type to restrict to ('' means no restriction)	 * @return A recordset	 */	function findObject($term, $filter) {		global $conf;		// Escape search term for ILIKE match		$term = str_replace('_', '\\_', $term);		$term = str_replace('%', '\\%', $term);		$this->clean($term);		$this->clean($filter);		// Exclude system relations if necessary		if (!$conf['show_system']) {			// XXX: The mention of information_schema here is in the wrong place, but			// it's the quickest fix to exclude the info schema from 7.4			$where = " AND pn.nspname NOT LIKE 'pg\\\\_%' AND pn.nspname != 'information_schema'";			$lan_where = "AND pl.lanispl";		}		else {			$where = '';			$lan_where = '';	}		// Apply outer filter		$sql = '';		if ($filter != '') {			$sql = "SELECT * FROM (";		}		$sql .= "			SELECT 'SCHEMA' AS type, oid, NULL AS schemaname, NULL AS relname, nspname AS name				FROM pg_catalog.pg_namespace pn WHERE nspname ILIKE '%{$term}%' {$where}			UNION ALL			SELECT CASE WHEN relkind='r' THEN 'TABLE' WHEN relkind='v' THEN 'VIEW' WHEN relkind='S' THEN 'SEQUENCE' END, pc.oid,				pn.nspname, NULL, pc.relname FROM pg_catalog.pg_class pc, pg_catalog.pg_namespace pn				WHERE pc.relnamespace=pn.oid AND relkind IN ('r', 'v', 'S') AND relname ILIKE '%{$term}%' {$where}			UNION ALL			SELECT CASE WHEN pc.relkind='r' THEN 'COLUMNTABLE' ELSE 'COLUMNVIEW' END, NULL, pn.nspname, pc.relname, pa.attname FROM pg_catalog.pg_class pc, pg_catalog.pg_namespace pn,				pg_catalog.pg_attribute pa WHERE pc.relnamespace=pn.oid AND pc.oid=pa.attrelid				AND pa.attname ILIKE '%{$term}%' AND pa.attnum > 0 AND NOT pa.attisdropped AND pc.relkind IN ('r', 'v') {$where}			UNION ALL			SELECT 'FUNCTION', pp.oid, pn.nspname, NULL, pp.proname || '(' || pg_catalog.oidvectortypes(pp.proargtypes) || ')' FROM pg_catalog.pg_proc pp, pg_catalog.pg_namespace pn				WHERE pp.pronamespace=pn.oid AND NOT pp.proisagg AND pp.proname ILIKE '%{$term}%' {$where}			UNION ALL			SELECT 'INDEX', NULL, pn.nspname, pc.relname, pc2.relname FROM pg_catalog.pg_class pc, pg_catalog.pg_namespace pn,				pg_catalog.pg_index pi, pg_catalog.pg_class pc2 WHERE pc.relnamespace=pn.oid AND pc.oid=pi.indrelid				AND pi.indexrelid=pc2.oid				AND NOT EXISTS (					SELECT 1 FROM pg_catalog.pg_depend d JOIN pg_catalog.pg_constraint c					ON (d.refclassid = c.tableoid AND d.refobjid = c.oid)					WHERE d.classid = pc2.tableoid AND d.objid = pc2.oid AND d.deptype = 'i' AND c.contype IN ('u', 'p')				)				AND pc2.relname ILIKE '%{$term}%' {$where}			UNION ALL			SELECT 'CONSTRAINTTABLE', NULL, pn.nspname, pc.relname, pc2.conname FROM pg_catalog.pg_class pc, pg_catalog.pg_namespace pn,				pg_catalog.pg_constraint pc2 WHERE pc.relnamespace=pn.oid AND pc.oid=pc2.conrelid AND pc2.conrelid != 0				AND CASE WHEN pc2.contype IN ('f', 'c') THEN TRUE ELSE NOT EXISTS (					SELECT 1 FROM pg_catalog.pg_depend d JOIN pg_catalog.pg_constraint c					ON (d.refclassid = c.tableoid AND d.refobjid = c.oid)					WHERE d.classid = pc2.tableoid AND d.objid = pc2.oid AND d.deptype = 'i' AND c.contype IN ('u', 'p')				) END				AND pc2.conname ILIKE '%{$term}%' {$where}			UNION ALL			SELECT 'CONSTRAINTDOMAIN', pt.oid, pn.nspname, pt.typname, pc.conname FROM pg_catalog.pg_type pt, pg_catalog.pg_namespace pn,				pg_catalog.pg_constraint pc WHERE pt.typnamespace=pn.oid AND pt.oid=pc.contypid AND pc.contypid != 0				AND pc.conname ILIKE '%{$term}%' {$where}			UNION ALL			SELECT 'TRIGGER', NULL, pn.nspname, pc.relname, pt.tgname FROM pg_catalog.pg_class pc, pg_catalog.pg_namespace pn,				pg_catalog.pg_trigger pt WHERE pc.relnamespace=pn.oid AND pc.oid=pt.tgrelid					AND (NOT pt.tgisconstraint OR NOT EXISTS					(SELECT 1 FROM pg_catalog.pg_depend d JOIN pg_catalog.pg_constraint c					ON (d.refclassid = c.tableoid AND d.refobjid = c.oid)					WHERE d.classid = pt.tableoid AND d.objid = pt.oid AND d.deptype = 'i' AND c.contype = 'f'))				AND pt.tgname ILIKE '%{$term}%' {$where}			UNION ALL			SELECT 'RULETABLE', NULL, pn.nspname AS schemaname, c.relname AS tablename, r.rulename FROM pg_catalog.pg_rewrite r				JOIN pg_catalog.pg_class c ON c.oid = r.ev_class				LEFT JOIN pg_catalog.pg_namespace pn ON pn.oid = c.relnamespace				WHERE c.relkind='r' AND r.rulename != '_RETURN' AND r.rulename ILIKE '%{$term}%' {$where}			UNION ALL			SELECT 'RULEVIEW', NULL, pn.nspname AS schemaname, c.relname AS tablename, r.rulename FROM pg_catalog.pg_rewrite r				JOIN pg_catalog.pg_class c ON c.oid = r.ev_class				LEFT JOIN pg_catalog.pg_namespace pn ON pn.oid = c.relnamespace				WHERE c.relkind='v' AND r.rulename != '_RETURN' AND r.rulename ILIKE '%{$term}%' {$where}		";		// Add advanced objects if show_advanced is set		if ($conf['show_advanced']) {			$sql .= "				UNION ALL				SELECT CASE WHEN pt.typtype='d' THEN 'DOMAIN' ELSE 'TYPE' END, pt.oid, pn.nspname, NULL,					pt.typname FROM pg_catalog.pg_type pt, pg_catalog.pg_namespace pn					WHERE pt.typnamespace=pn.oid AND typname ILIKE '%{$term}%'					AND (pt.typrelid = 0 OR (SELECT c.relkind = 'c' FROM pg_catalog.pg_class c WHERE c.oid = pt.typrelid))					{$where}			 	UNION ALL				SELECT 'OPERATOR', po.oid, pn.nspname, NULL, po.oprname FROM pg_catalog.pg_operator po, pg_catalog.pg_namespace pn					WHERE po.oprnamespace=pn.oid AND oprname ILIKE '%{$term}%' {$where}				UNION ALL				SELECT 'CONVERSION', pc.oid, pn.nspname, NULL, pc.conname FROM pg_catalog.pg_conversion pc,					pg_catalog.pg_namespace pn WHERE pc.connamespace=pn.oid AND conname ILIKE '%{$term}%' {$where}				UNION ALL				SELECT 'LANGUAGE', pl.oid, NULL, NULL, pl.lanname FROM pg_catalog.pg_language pl					WHERE lanname ILIKE '%{$term}%' {$lan_where}				UNION ALL				SELECT DISTINCT ON (p.proname) 'AGGREGATE', p.oid, pn.nspname, NULL, p.proname FROM pg_catalog.pg_proc p					LEFT JOIN pg_catalog.pg_namespace pn ON p.pronamespace=pn.oid					WHERE p.proisagg AND p.proname ILIKE '%{$term}%' {$where}				UNION ALL				SELECT DISTINCT ON (po.opcname) 'OPCLASS', po.oid, pn.nspname, NULL, po.opcname FROM pg_catalog.pg_opclass po,					pg_catalog.pg_namespace pn WHERE po.opcnamespace=pn.oid					AND po.opcname ILIKE '%{$term}%' {$where}			";		}		// Otherwise just add domains		else {			$sql .= "				UNION ALL				SELECT 'DOMAIN', pt.oid, pn.nspname, NULL,					pt.typname FROM pg_catalog.pg_type pt, pg_catalog.pg_namespace pn					WHERE pt.typnamespace=pn.oid AND pt.typtype='d' AND typname ILIKE '%{$term}%'					AND (pt.typrelid = 0 OR (SELECT c.relkind = 'c' FROM pg_catalog.pg_class c WHERE c.oid = pt.typrelid))					{$where}			";		}		if ($filter != '') {			// We use like to make RULE, CONSTRAINT and COLUMN searches work			$sql .= ") AS sub WHERE type LIKE '{$filter}%' ";		}		$sql .= "ORDER BY type, schemaname, relname, name";		return $this->selectSet($sql);	}	// Capabilities}?>
<?php	/**	 * Manage functions in a database	 *	 * $Id: functions.php,v 1.78 2008/01/08 22:50:29 xzilla Exp $	 */	// Include application functions	include_once('./libraries/lib.inc.php');	$action = (isset($_REQUEST['action'])) ? $_REQUEST['action'] : '';	if (!isset($msg)) $msg = '';	/**	 * Function to save after editing a function	 */	function doSaveEdit() {		global $data, $lang, $misc, $_reload_browser;		$fnlang = strtolower($_POST['original_lang']);		if ($fnlang == 'c') {			$def = array($_POST['formObjectFile'], $_POST['formLinkSymbol']);		} else if ($fnlang == 'internal'){			$def = $_POST['formLinkSymbol'];		} else {			$def = $_POST['formDefinition'];		}		if(!$data->hasFunctionAlterSchema()) $_POST['formFuncSchema'] = '';		$status = $data->setFunction($_POST['function_oid'], $_POST['original_function'], $_POST['formFunction'],			$_POST['original_arguments'], $_POST['original_returns'], $def,			$_POST['original_lang'], $_POST['formProperties'], isset($_POST['original_setof']),			$_POST['original_owner'],  $_POST['formFuncOwn'], $_POST['original_schema'],			$_POST['formFuncSchema'], isset($_POST['formCost']) ? $_POST['formCost'] : null,			isset($_POST['formRows']) ? $_POST['formRows'] : 0, $_POST['formComment']);		if ($status == 0) {			// If function has had schema altered, need to change to the new schema			// and reload the browser frame.			if (!empty($_POST['formFuncSchema']) && ($_POST['formFuncSchema'] != $_POST['original_schema'])) {				// Jump them to the new function schema				$_REQUEST['schema'] = $_POST['formFuncSchema'];				$misc->href = "server={$_REQUEST['server']}&amp;database={$_REQUEST['database']}&amp;schema={$_REQUEST['schema']}";				// Force a browser reload				$_reload_browser = true;			 }			doProperties($lang['strfunctionupdated']);		} else {			doEdit($lang['strfunctionupdatedbad']);		}	}	/**	 * Function to allow editing of a Function	 */	function doEdit($msg = '') {		global $data, $misc;		global $lang;		$misc->printTrail('function');		$misc->printTitle($lang['stralter'],'pg.function.alter');		$misc->printMsg($msg);		$fndata = $data->getFunction($_REQUEST['function_oid']);		if ($fndata->recordCount() > 0) {			$fndata->fields['proretset'] = $data->phpBool($fndata->fields['proretset']);			// Initialise variables			if (!isset($_POST['formDefinition'])) $_POST['formDefinition'] = $fndata->fields['prosrc'];			if (!isset($_POST['formProperties'])) $_POST['formProperties'] = $data->getFunctionProperties($fndata->fields);			if (!isset($_POST['formFunction'])) $_POST['formFunction'] = $fndata->fields['proname'];			if (!isset($_POST['formComment'])) $_POST['formComment'] = $fndata->fields['procomment'];			if (!isset($_POST['formObjectFile'])) $_POST['formObjectFile'] = $fndata->fields['probin'];			if (!isset($_POST['formLinkSymbol'])) $_POST['formLinkSymbol'] = $fndata->fields['prosrc'];			if (!isset($_POST['formFuncOwn'])) $_POST['formFuncOwn'] = $fndata->fields['proowner'];			if (!isset($_POST['formFuncSchema'])) $_POST['formFuncSchema'] = $fndata->fields['proschema'];			if ($data->hasFunctionCosting()) {				if (!isset($_POST['formCost'])) $_POST['formCost'] = $fndata->fields['procost'];				if (!isset($_POST['formRows'])) $_POST['formRows'] = $fndata->fields['prorows'];			}			// Deal with named parameters			if ($data->hasNamedParams()) {				$args_arr = explode(', ', $fndata->fields['proarguments']);				$names_arr = $data->phpArray($fndata->fields['proargnames']);				$args = '';				$i = 0;				for ($i = 0; $i < sizeof($args_arr); $i++) {					if ($i != 0) $args .= ', ';					if (isset($names_arr[$i]) && $names_arr[$i] != '') {						$data->fieldClean($names_arr[$i]);						$args .= '"' . $names_arr[$i] . '" ';					}					$args .= $args_arr[$i];				}			}			else {				$args = $fndata->fields['proarguments'];			}			$func_full = $fndata->fields['proname'] . "(". $fndata->fields['proarguments'] .")";			echo "<form action=\"functions.php\" method=\"post\">\n";			echo "<table style=\"width: 90%\">\n";			echo "<tr>\n";			echo "<th class=\"data required\">{$lang['strschema']}</th>\n";			echo "<th class=\"data required\">{$lang['strfunction']}</th>\n";			echo "<th class=\"data\">{$lang['strarguments']}</th>\n";			echo "<th class=\"data required\">{$lang['strreturns']}</th>\n";			echo "<th class=\"data required\">{$lang['strproglanguage']}</th>\n";			echo "</tr>\n";			echo "<tr>\n";			echo "<td class=\"data1\">";			echo "<input type=\"hidden\" name=\"original_schema\" value=\"", htmlspecialchars($fndata->fields['proschema']),"\" />\n";			if ($data->hasFunctionAlterSchema()) {				$schemas = $data->getSchemas();				echo "<select name=\"formFuncSchema\">";				while (!$schemas->EOF) {					$schema = $schemas->fields['nspname'];					echo "<option value=\"", htmlspecialchars($schema), "\"",						($schema == $_POST['formFuncSchema']) ? ' selected="selected"' : '', ">", htmlspecialchars($schema), "</option>\n";					$schemas->moveNext();				}			    echo "</select>\n";			}			else echo $fndata->fields['proschema'];			echo "</td>\n";			echo "<td class=\"data1\">";			echo "<input type=\"hidden\" name=\"original_function\" value=\"", htmlspecialchars($fndata->fields['proname']),"\" />\n";			echo "<input name=\"formFunction\" style=\"width: 100%\" maxlength=\"{$data->_maxNameLen}\" value=\"", htmlspecialchars($_POST['formFunction']), "\" />";			echo "</td>\n";			echo "<td class=\"data1\">", $misc->printVal($args), "\n";			echo "<input type=\"hidden\" name=\"original_arguments\" value=\"",htmlspecialchars($args),"\" />\n";			echo "</td>\n";			echo "<td class=\"data1\">";			if ($fndata->fields['proretset']) echo "setof ";			echo $misc->printVal($fndata->fields['proresult']), "\n";			echo "<input type=\"hidden\" name=\"original_returns\" value=\"", htmlspecialchars($fndata->fields['proresult']), "\" />\n";			if ($fndata->fields['proretset'])				echo "<input type=\"hidden\" name=\"original_setof\" value=\"yes\" />\n";			echo "</td>\n";			echo "<td class=\"data1\">", $misc->printVal($fndata->fields['prolanguage']), "\n";			echo "<input type=\"hidden\" name=\"original_lang\" value=\"", htmlspecialchars($fndata->fields['prolanguage']), "\" />\n";			echo "</td>\n";			echo "</tr>\n";			$fnlang = strtolower($fndata->fields['prolanguage']);			if ($fnlang == 'c') {				echo "<tr><th class=\"data required\" colspan=\"2\">{$lang['strobjectfile']}</th>\n";				echo "<th class=\"data\" colspan=\"2\">{$lang['strlinksymbol']}</th></tr>\n";				echo "<tr><td class=\"data1\" colspan=\"2\"><input type=\"text\" name=\"formObjectFile\" style=\"width:100%\" value=\"",					htmlspecialchars($_POST['formObjectFile']), "\" /></td>\n";				echo "<td class=\"data1\" colspan=\"2\"><input type=\"text\" name=\"formLinkSymbol\" style=\"width:100%\" value=\"",					htmlspecialchars($_POST['formLinkSymbol']), "\" /></td></tr>\n";			} else if ($fnlang == 'internal') {				echo "<tr><th class=\"data\" colspan=\"5\">{$lang['strlinksymbol']}</th></tr>\n";				echo "<tr><td class=\"data1\" colspan=\"5\"><input type=\"text\" name=\"formLinkSymbol\" style=\"width:100%\" value=\"",					htmlspecialchars($_POST['formLinkSymbol']), "\" /></td></tr>\n";			} else {				echo "<tr><th class=\"data required\" colspan=\"5\">{$lang['strdefinition']}</th></tr>\n";				echo "<tr><td class=\"data1\" colspan=\"5\"><textarea style=\"width:100%;\" rows=\"20\" cols=\"50\" name=\"formDefinition\">",					htmlspecialchars($_POST['formDefinition']), "</textarea></td></tr>\n";			}			// Display function comment			echo "<tr><th class=\"data\" colspan=\"5\">{$lang['strcomment']}</th></tr>\n";			echo "<tr><td class=\"data1\" colspan=\"5\"><textarea style=\"width:100%;\" name=\"formComment\" rows=\"3\" cols=\"50\">",				htmlspecialchars($_POST['formComment']), "</textarea></td></tr>\n";			// Display function cost options			if ($data->hasFunctionCosting()) {				echo "<tr><th class=\"data required\" colspan=\"5\">{$lang['strfunctioncosting']}</th></tr>\n";				echo "<td class=\"data1\" colspan=\"2\">{$lang['strexecutioncost']}: <input name=\"formCost\" size=\"16\" value=\"".					htmlspecialchars($_POST['formCost']) ."\" /></td>";				echo "<td class=\"data1\" colspan=\"2\">{$lang['strresultrows']}: <input name=\"formRows\" size=\"16\" value=\"",					htmlspecialchars($_POST['formRows']) ,"\"", (!$fndata->fields['proretset']) ? 'disabled' : '', "/></td>";			}			// Display function properties			if (is_array($data->funcprops) && sizeof($data->funcprops) > 0) {				echo "<tr><th class=\"data\" colspan=\"5\">{$lang['strproperties']}</th></tr>\n";				echo "<tr><td class=\"data1\" colspan=\"5\">\n";				$i = 0;				foreach ($data->funcprops as $k => $v) {					echo "<select name=\"formProperties[{$i}]\">\n";					foreach ($v as $p) {						echo "<option value=\"", htmlspecialchars($p), "\"",							($p == $_POST['formProperties'][$i]) ? ' selected="selected"' : '',							">", $misc->printVal($p), "</option>\n";					}					echo "</select><br />\n";					$i++;				}				echo "</td></tr>\n";			}                        // function owner                        if ($data->hasFunctionAlterOwner()) {		            $users = $data->getUsers();                            echo "<tr><td class=\"data1\" colspan=\"5\">{$lang['strowner']}: <select name=\"formFuncOwn\">";				while (!$users->EOF) {					$uname = $users->fields['usename'];					echo "<option value=\"", htmlspecialchars($uname), "\"",						($uname == $_POST['formFuncOwn']) ? ' selected="selected"' : '', ">", htmlspecialchars($uname), "</option>\n";					$users->moveNext();				}				echo "</select>\n";			    echo "<input type=\"hidden\" name=\"original_owner\" value=\"", htmlspecialchars($fndata->fields['proowner']),"\" />\n";                            echo "</td></tr>\n";                        }			echo "</table>\n";			echo "<p><input type=\"hidden\" name=\"action\" value=\"save_edit\" />\n";			echo "<input type=\"hidden\" name=\"function\" value=\"", htmlspecialchars($_REQUEST['function']), "\" />\n";			echo "<input type=\"hidden\" name=\"function_oid\" value=\"", htmlspecialchars($_REQUEST['function_oid']), "\" />\n";			echo $misc->form;			echo "<input type=\"submit\" value=\"{$lang['stralter']}\" />\n";			echo "<input type=\"submit\" name=\"cancel\" value=\"{$lang['strcancel']}\" /></p>\n";			echo "</form>\n";		}		else echo "<p>{$lang['strnodata']}</p>\n";	}	/**	 * Show read only properties of a function	 */	function doProperties($msg = '') {		global $data, $misc;		global $lang;		$misc->printTrail('function');		$misc->printTitle($lang['strproperties'],'pg.function');		$misc->printMsg($msg);		$funcdata = $data->getFunction($_REQUEST['function_oid']);		if ($funcdata->recordCount() > 0) {			// Deal with named parameters			if ($data->hasNamedParams()) {				$args_arr = explode(', ', $funcdata->fields['proarguments']);				$names_arr = $data->phpArray($funcdata->fields['proargnames']);				$args = '';				$i = 0;				for ($i = 0; $i < sizeof($args_arr); $i++) {					if ($i != 0) $args .= ', ';					if (isset($names_arr[$i]) && $names_arr[$i] != '') {						$data->fieldClean($names_arr[$i]);						$args .= '"' . $names_arr[$i] . '" ';					}					$args .= $args_arr[$i];				}			}			else {				$args = $funcdata->fields['proarguments'];			}			// Show comment if any			if ($funcdata->fields['procomment'] !== null)				echo "<p class=\"comment\">", $misc->printVal($funcdata->fields['procomment']), "</p>\n";			$funcdata->fields['proretset'] = $data->phpBool($funcdata->fields['proretset']);			$func_full = $funcdata->fields['proname'] . "(". $funcdata->fields['proarguments'] .")";			echo "<table style=\"width: 90%\">\n";			echo "<tr><th class=\"data\">{$lang['strfunction']}</th>\n";			echo "<th class=\"data\">{$lang['strarguments']}</th>\n";			echo "<th class=\"data\">{$lang['strreturns']}</th>\n";			echo "<th class=\"data\">{$lang['strproglanguage']}</th></tr>\n";			echo "<tr><td class=\"data1\">", $misc->printVal($funcdata->fields['proname']), "</td>\n";			echo "<td class=\"data1\">", $misc->printVal($args), "</td>\n";			echo "<td class=\"data1\">";			if ($funcdata->fields['proretset']) echo "setof ";			echo $misc->printVal($funcdata->fields['proresult']), "</td>\n";			echo "<td class=\"data1\">", $misc->printVal($funcdata->fields['prolanguage']), "</td></tr>\n";			$fnlang = strtolower($funcdata->fields['prolanguage']);			if ($fnlang == 'c') {				echo "<tr><th class=\"data\" colspan=\"2\">{$lang['strobjectfile']}</th>\n";				echo "<th class=\"data\" colspan=\"2\">{$lang['strlinksymbol']}</th></tr>\n";				echo "<tr><td class=\"data1\" colspan=\"2\">", $misc->printVal($funcdata->fields['probin']), "</td>\n";				echo "<td class=\"data1\" colspan=\"2\">", $misc->printVal($funcdata->fields['prosrc']), "</td></tr>\n";			} else if ($fnlang == 'internal') {				echo "<tr><th class=\"data\" colspan=\"4\">{$lang['strlinksymbol']}</th></tr>\n";				echo "<tr><td class=\"data1\" colspan=\"4\">", $misc->printVal($funcdata->fields['prosrc']), "</td></tr>\n";			} else {				include_once('./libraries/highlight.php');				echo "<tr><th class=\"data\" colspan=\"4\">{$lang['strdefinition']}</th></tr>\n";				// Check to see if we have syntax highlighting for this language				if (isset($data->langmap[$funcdata->fields['prolanguage']])) {					$temp = syntax_highlight(htmlspecialchars($funcdata->fields['prosrc']), $data->langmap[$funcdata->fields['prolanguage']]);					$tag = 'prenoescape';				}				else {					$temp = $funcdata->fields['prosrc'];					$tag = 'pre';				}				echo "<tr><td class=\"data1\" colspan=\"4\">", $misc->printVal($temp, $tag, array('lineno' => true, 'class' => 'data1')), "</td></tr>\n";			}			// Display function cost options			if ($data->hasFunctionCosting()) {				echo "<tr><th class=\"data required\" colspan=\"4\">{$lang['strfunctioncosting']}</th></tr>\n";				echo "<td class=\"data1\" colspan=\"2\">{$lang['strexecutioncost']}: ", $misc->printVal($funcdata->fields['procost']), " </td>";				echo "<td class=\"data1\" colspan=\"2\">{$lang['strresultrows']}: ", $misc->printVal($funcdata->fields['prorows']), " </td>";			}			// Show flags			if (is_array($data->funcprops) && sizeof($data->funcprops) > 0) {				// Fetch an array of the function properties				$funcprops = $data->getFunctionProperties($funcdata->fields);				echo "<tr><th class=\"data\" colspan=\"4\">{$lang['strproperties']}</th></tr>\n";				echo "<tr><td class=\"data1\" colspan=\"4\">\n";				foreach ($funcprops as $v) {					echo $misc->printVal($v), "<br />\n";				}				echo "</td></tr>\n";			}                        echo "<tr><td class=\"data1\" colspan=\"5\">{$lang['strowner']}: ", htmlspecialchars($funcdata->fields['proowner']),"\n";                        echo "</td></tr>\n";			echo "</table>\n";		}		else echo "<p>{$lang['strnodata']}</p>\n";		echo "<ul class=\"navlink\">\n\t<li><a href=\"functions.php?{$misc->href}\">{$lang['strshowallfunctions']}</a></li>\n";		echo "\t<li><a href=\"functions.php?action=edit&amp;{$misc->href}&amp;function=",			urlencode($_REQUEST['function']), "&amp;function_oid=", urlencode($_REQUEST['function_oid']), "\">{$lang['stralter']}</a></li>\n";		echo "\t<li><a href=\"functions.php?action=confirm_drop&amp;{$misc->href}&amp;function=",			urlencode($func_full), "&amp;function_oid=", $_REQUEST['function_oid'], "\">{$lang['strdrop']}</a></li>\n</ul>";	}	/**	 * Show confirmation of drop and perform actual drop	 */	function doDrop($confirm) {		global $data, $misc;		global $lang, $_reload_browser;		if (empty($_REQUEST['function']) && empty($_REQUEST['ma'])) {			doDefault($lang['strspecifyfunctiontodrop']);			exit();		}		if ($confirm) {			$misc->printTrail('schema');			$misc->printTitle($lang['strdrop'],'pg.function.drop');			echo "<form action=\"functions.php\" method=\"post\">\n";			//If multi drop			if (isset($_REQUEST['ma'])) {				foreach($_REQUEST['ma'] as $v) {					$a = unserialize(htmlspecialchars_decode($v, ENT_QUOTES));					echo "<p>", sprintf($lang['strconfdropfunction'], $misc->printVal($a['function'])), "</p>\n";					echo '<input type="hidden" name="function[]" value="', htmlspecialchars($a['function']), "\" />\n";					echo "<input type=\"hidden\" name=\"function_oid[]\" value=\"", htmlspecialchars($a['function_oid']), "\" />\n";				}			}			else {				echo "<p>", sprintf($lang['strconfdropfunction'], $misc->printVal($_REQUEST['function'])), "</p>\n";				echo "<input type=\"hidden\" name=\"function\" value=\"", htmlspecialchars($_REQUEST['function']), "\" />\n";				echo "<input type=\"hidden\" name=\"function_oid\" value=\"", htmlspecialchars($_REQUEST['function_oid']), "\" />\n";			}			echo "<input type=\"hidden\" name=\"action\" value=\"drop\" />\n";			echo $misc->form;			echo "<p><input type=\"checkbox\" id=\"cascade\" name=\"cascade\" /><label for=\"cascade\">{$lang['strcascade']}</label></p>\n";			echo "<input type=\"submit\" name=\"drop\" value=\"{$lang['strdrop']}\" />\n";			echo "<input type=\"submit\" name=\"cancel\" value=\"{$lang['strcancel']}\" />\n";			echo "</form>\n";		}		else {			if (is_array($_POST['function_oid'])) {				$msg='';				$status = $data->beginTransaction();				if ($status == 0) {					foreach($_POST['function_oid'] as $k => $s) {						$status = $data->dropFunction($s, isset($_POST['cascade']));						if ($status == 0)							$msg.= sprintf('%s: %s<br />', htmlentities($_POST['function'][$k]), $lang['strfunctiondropped']);						else {							$data->endTransaction();							doDefault(sprintf('%s%s: %s<br />', $msg, htmlentities($_POST['function'][$k]), $lang['strfunctiondroppedbad']));							return;						}					}				}				if($data->endTransaction() == 0) {					// Everything went fine, back to the Default page....					$_reload_browser = true;					doDefault($msg);				}				else doDefault($lang['strfunctiondroppedbad']);			}			else{				$status = $data->dropFunction($_POST['function_oid'], isset($_POST['cascade']));				if ($status == 0) {					$_reload_browser = true;					doDefault($lang['strfunctiondropped']);				}				else {					doDefault($lang['strfunctiondroppedbad']);				}			}		}	}	/**	 * Displays a screen where they can enter a new function	 */	function doCreate($msg = '',$szJS="") {		global $data, $misc;		global $lang;		$misc->printTrail('schema');		if (!isset($_POST['formFunction'])) $_POST['formFunction'] = '';		if (!isset($_POST['formArguments'])) $_POST['formArguments'] = '';		if (!isset($_POST['formReturns'])) $_POST['formReturns'] = '';		if (!isset($_POST['formLanguage'])) $_POST['formLanguage'] = isset($_REQUEST['language']) ? $_REQUEST['language'] : 'sql';		if (!isset($_POST['formDefinition'])) $_POST['formDefinition'] = '';		if (!isset($_POST['formObjectFile'])) $_POST['formObjectFile'] = '';		if (!isset($_POST['formLinkSymbol'])) $_POST['formLinkSymbol'] = '';		if (!isset($_POST['formProperties'])) $_POST['formProperties'] = $data->defaultprops;		if (!isset($_POST['formSetOf'])) $_POST['formSetOf'] = '';		if (!isset($_POST['formArray'])) $_POST['formArray'] = '';		if (!isset($_POST['formCost'])) $_POST['formCost'] = '';		if (!isset($_POST['formRows'])) $_POST['formRows'] = '';		if (!isset($_POST['formComment'])) $_POST['formComment'] = '';		$types = $data->getTypes(true, true, true);		$langs = $data->getLanguages(true);		$fnlang = strtolower($_POST['formLanguage']);		switch ($fnlang) {			case 'c':				$misc->printTitle($lang['strcreatecfunction'],'pg.function.create.c');				break;			case 'internal':				$misc->printTitle($lang['strcreateinternalfunction'],'pg.function.create.internal');				break;			default:				$misc->printTitle($lang['strcreateplfunction'],'pg.function.create.pl');				break;		}		$misc->printMsg($msg);		// Create string for return type list		$szTypes = "";		while (!$types->EOF) {			$szSelected = "";			if($types->fields['typname'] == $_POST['formReturns']) {				$szSelected = " selected=\"selected\"";			}			/* this variable is include in the JS code bellow, so we need to ENT_QUOTES */			$szTypes .= "<option value=\"". htmlspecialchars($types->fields['typname'], ENT_QUOTES) ."\"{$szSelected}>";			$szTypes .= htmlspecialchars($types->fields['typname'], ENT_QUOTES) ."</option>";			$types->moveNext();		}		$szFunctionName = "<td class=\"data1\"><input name=\"formFunction\" size=\"16\" maxlength=\"{$data->_maxNameLen}\" value=\"".			htmlspecialchars($_POST['formFunction']) ."\" /></td>";		$szArguments = "<td class=\"data1\"><input name=\"formArguments\" style=\"width:100%;\" size=\"16\" value=\"".			htmlspecialchars($_POST['formArguments']) ."\" /></td>";		$szSetOfSelected = "";		$szNotSetOfSelected = "";		if($_POST['formSetOf'] == '') {			$szNotSetOfSelected = " selected=\"selected\"";		} else if($_POST['formSetOf'] == 'SETOF') {			$szSetOfSelected = " selected=\"selected\"";		}		$szReturns = "<td class=\"data1\" colspan=\"2\">";		$szReturns .= "<select name=\"formSetOf\">";		$szReturns .= "<option value=\"\"{$szNotSetOfSelected}></option>";		$szReturns .= "<option value=\"SETOF\"{$szSetOfSelected}>SETOF</option>";		$szReturns .= "</select>";		$szReturns .= "<select name=\"formReturns\">".$szTypes."</select>";		// Create string array type selector		$szArraySelected = "";		$szNotArraySelected = "";		if($_POST['formArray'] == '') {			$szNotArraySelected = " selected=\"selected\"";		} else if($_POST['formArray'] == '[]') {			$szArraySelected = " selected=\"selected\"";		}		$szReturns .= "<select name=\"formArray\">";		$szReturns .= "<option value=\"\"{$szNotArraySelected}></option>";		$szReturns .= "<option value=\"[]\"{$szArraySelected}>[ ]</option>";		$szReturns .= "</select>\n</td>";		// Create string for language		$szLanguage = "<td class=\"data1\">";		if ($fnlang == 'c' || $fnlang == 'internal') {			$szLanguage .=  $_POST['formLanguage'] . "\n";			$szLanguage .= "<input type=\"hidden\" name=\"formLanguage\" value=\"{$_POST['formLanguage']}\" />\n";		}		else {			$szLanguage .= "<select name=\"formLanguage\">\n";			while (!$langs->EOF) {				$szSelected = '';				if($langs->fields['lanname'] == $_POST['formLanguage']) {					$szSelected = ' selected="selected"';				}				if (strtolower($langs->fields['lanname']) != 'c' && strtolower($langs->fields['lanname']) != 'internal')					$szLanguage .= "<option value=\"". htmlspecialchars($langs->fields['lanname']). "\"{$szSelected}>\n".						$misc->printVal($langs->fields['lanname']) ."</option>";				$langs->moveNext();			}			$szLanguage .= "</select>\n";		}		$szLanguage .= "</td>";		$szJSArguments = "<tr><th class=\"data\" colspan=\"7\">{$lang['strarguments']}</th></tr>";		$arrayModes = array("IN","OUT","INOUT");		$szModes = "<select name=\"formArgModes[]\" style=\"width:100%;\">";		foreach($arrayModes as $pV) {			$szModes .= "<option value=\"{$pV}\">{$pV}</option>";		}		$szModes .= "</select>";		$szArgReturns = "<select name=\"formArgArray[]\">";		$szArgReturns .= "<option value=\"\"></option>";		$szArgReturns .= "<option value=\"[]\">[]</option>";		$szArgReturns .= "</select>";		if(!empty($conf['theme'])) {			$szImgPath = "images/themes/{$conf['theme']}";		} else {			$szImgPath = "images/themes/default";		}		if(empty($msg)) {			$szJSTRArg = "<script type=\"text/javascript\" >addArg();</script>\n";		} else {			$szJSTRArg = "";		}		$szJSAddTR = "<tr id=\"parent_add_tr\" onclick=\"addArg();\" onmouseover=\"this.style.cursor='pointer'\">\n<td style=\"text-align: right\" colspan=\"6\" class=\"data3\"><table><tr><td class=\"data3\"><img src=\"{$szImgPath}/AddArguments.png\" alt=\"Add Argument\" /></td><td class=\"data3\"><span style=\"font-size: 8pt\">{$lang['strargadd']}</span></td></tr></table></td>\n</tr>\n";		echo "<script src=\"functions.js\" type=\"text/javascript\"></script>		<script type=\"text/javascript\">			//<![CDATA[			var g_types_select = '<select name=\"formArgType[]\">{$szTypes}</select>{$szArgReturns}';			var g_modes_select = '{$szModes}';			var g_name = '';			var g_lang_strargremove = '", htmlspecialchars($lang["strargremove"], ENT_QUOTES) ,"';			var g_lang_strargnoargs = '", htmlspecialchars($lang["strargnoargs"], ENT_QUOTES) ,"';			var g_lang_strargenableargs = '", htmlspecialchars($lang["strargenableargs"], ENT_QUOTES) ,"';			var g_lang_strargnorowabove = '", htmlspecialchars($lang["strargnorowabove"], ENT_QUOTES) ,"';			var g_lang_strargnorowbelow = '", htmlspecialchars($lang["strargnorowbelow"], ENT_QUOTES) ,"';			var g_lang_strargremoveconfirm = '", htmlspecialchars($lang["strargremoveconfirm"], ENT_QUOTES) ,"';			var g_lang_strargraise = '", htmlspecialchars($lang["strargraise"], ENT_QUOTES) ,"';			var g_lang_strarglower = '", htmlspecialchars($lang["strarglower"], ENT_QUOTES) ,"';			//]]>		</script>		";		echo "<form action=\"functions.php\" method=\"post\">\n";		echo "<table><tbody id=\"args_table\">\n";		echo "<tr><th class=\"data required\">{$lang['strname']}</th>\n";		echo "<th class=\"data required\" colspan=\"2\">{$lang['strreturns']}</th>\n";		echo "<th class=\"data required\">{$lang['strproglanguage']}</th></tr>\n";		echo "<tr>\n";		echo "{$szFunctionName}\n";		echo "{$szReturns}\n";		echo "{$szLanguage}\n";		echo "</tr>\n";		echo "{$szJSArguments}\n";		echo "<tr>\n";		echo "<th class=\"data required\">{$lang['strargmode']}</th>\n";		echo "<th class=\"data required\">{$lang['strname']}</th>\n";		echo "<th class=\"data required\" colspan=\"2\">{$lang['strargtype']}</th>\n";		echo "</tr>\n";		echo "{$szJSAddTR}\n";		if ($fnlang == 'c') {			echo "<tr><th class=\"data required\" colspan=\"2\">{$lang['strobjectfile']}</th>\n";			echo "<th class=\"data\" colspan=\"2\">{$lang['strlinksymbol']}</th></tr>\n";			echo "<tr><td class=\"data1\" colspan=\"2\"><input type=\"text\" name=\"formObjectFile\" style=\"width:100%\" value=\"",				htmlspecialchars($_POST['formObjectFile']), "\" /></td>\n";			echo "<td class=\"data1\" colspan=\"2\"><input type=\"text\" name=\"formLinkSymbol\" style=\"width:100%\" value=\"",				htmlspecialchars($_POST['formLinkSymbol']), "\" /></td></tr>\n";		} else if ($fnlang == 'internal') {			echo "<tr><th class=\"data\" colspan=\"4\">{$lang['strlinksymbol']}</th></tr>\n";			echo "<tr><td class=\"data1\" colspan=\"4\"><input type=\"text\" name=\"formLinkSymbol\" style=\"width:100%\" value=\"",				htmlspecialchars($_POST['formLinkSymbol']), "\" /></td></tr>\n";		} else {			echo "<tr><th class=\"data required\" colspan=\"4\">{$lang['strdefinition']}</th></tr>\n";			echo "<tr><td class=\"data1\" colspan=\"4\"><textarea style=\"width:100%;\" rows=\"20\" cols=\"50\" name=\"formDefinition\">",				htmlspecialchars($_POST['formDefinition']), "</textarea></td></tr>\n";		}				// Display function comment		echo "<tr><th class=\"data\" colspan=\"4\">{$lang['strcomment']}</th></tr>\n";		echo "<tr><td class=\"data1\" colspan=\"4\"><textarea style=\"width:100%;\" name=\"formComment\" rows=\"3\" cols=\"50\">",			htmlspecialchars($_POST['formComment']), "</textarea></td></tr>\n";		// Display function cost options		if ($data->hasFunctionCosting()) {			echo "<tr><th class=\"data required\" colspan=\"4\">{$lang['strfunctioncosting']}</th></tr>\n";			echo "<td class=\"data1\" colspan=\"2\">{$lang['strexecutioncost']}: <input name=\"formCost\" size=\"16\" value=\"".				htmlspecialchars($_POST['formCost']) ."\" /></td>";			echo "<td class=\"data1\" colspan=\"2\">{$lang['strresultrows']}: <input name=\"formRows\" size=\"16\" value=\"".				htmlspecialchars($_POST['formRows']) ."\" /></td>";		}		// Display function properties		if (is_array($data->funcprops) && sizeof($data->funcprops) > 0) {			echo "<tr><th class=\"data required\" colspan=\"4\">{$lang['strproperties']}</th></tr>\n";			echo "<tr><td class=\"data1\" colspan=\"4\">\n";			$i = 0;			foreach ($data->funcprops as $k => $v) {				echo "<select name=\"formProperties[{$i}]\">\n";				foreach ($v as $p) {					echo "<option value=\"", htmlspecialchars($p), "\"",						($p == $_POST['formProperties'][$i]) ? ' selected="selected"' : '',						">", $misc->printVal($p), "</option>\n";				}				echo "</select><br />\n";				$i++;			}			echo "</td></tr>\n";		}		echo "</tbody></table>\n";		echo $szJSTRArg;		echo "<p><input type=\"hidden\" name=\"action\" value=\"save_create\" />\n";		echo $misc->form;		echo "<input type=\"submit\" value=\"{$lang['strcreate']}\" />\n";		echo "<input type=\"submit\" name=\"cancel\" value=\"{$lang['strcancel']}\" /></p>\n";		echo "</form>\n";		echo $szJS;	}	/**	 * Actually creates the new function in the database	 */	function doSaveCreate() {		global $data, $lang;		$fnlang = strtolower($_POST['formLanguage']);		if ($fnlang == 'c') {			$def = array($_POST['formObjectFile'], $_POST['formLinkSymbol']);		} else if ($fnlang == 'internal'){			$def = $_POST['formLinkSymbol'];		} else {			$def = $_POST['formDefinition'];		}		$szJS = '';		echo "<script src=\"functions.js\" type=\"text/javascript\"></script>";		echo "<script type=\"text/javascript\">". buildJSData() .'</script>';		if(!empty($_POST['formArgName'])) {			$szJS = buildJSRows(buildFunctionArguments($_POST));		} else {			$szJS = "<script type=\"text/javascript\" src=\"functions.js\">noArgsRebuild(addArg());</script>";		}		$cost = (isset($_POST['formCost'])) ? $_POST['formCost'] : null;		if ($cost == '' || !is_numeric($cost) || $cost != (int)$cost || $cost < 0)  {			$cost = null;		}		$rows = (isset($_POST['formRows'])) ? $_POST['formRows'] : null;		if ($rows == '' || !is_numeric($rows) || $rows != (int)$rows )  {			$rows = null;		}		// Check that they've given a name and a definition		if ($_POST['formFunction'] == '') doCreate($lang['strfunctionneedsname'],$szJS);		elseif ($fnlang != 'internal' && !$def) doCreate($lang['strfunctionneedsdef'],$szJS);		else {			// Append array symbol to type if chosen			$status = $data->createFunction($_POST['formFunction'], empty($_POST['nojs'])? buildFunctionArguments($_POST) : $_POST['formArguments'],					$_POST['formReturns'] . $_POST['formArray'] , $def , $_POST['formLanguage'],					$_POST['formProperties'], $_POST['formSetOf'] == 'SETOF',					$cost, $rows, $_POST['formComment'], false);			if ($status == 0)				doDefault($lang['strfunctioncreated']);			else {				doCreate($lang['strfunctioncreatedbad'],$szJS);			}		}	}	/**	 * Build out the function arguments string	 */	function buildFunctionArguments($arrayVars) {		if(isset($_POST['formArgName'])) {			$arrayArgs = array();			foreach($arrayVars['formArgName'] as $pK => $pV) {				$arrayArgs[] = $arrayVars['formArgModes'][$pK] .' '. trim($pV) .' '. trim($arrayVars['formArgType'][$pK]) . $arrayVars['formArgArray'][$pK];			}			return implode(",", $arrayArgs);		}		return '';	}	/**	 * Build out JS to re-create table rows for arguments	 */	function buildJSRows($szArgs) {		$arrayModes = array('IN','OUT','INOUT');		$arrayArgs = explode(',',$szArgs);		$arrayProperArgs = array();		$nC = 0;		$szReturn = '';		foreach($arrayArgs as $pV) {			$arrayWords = explode(' ',$pV);			if(in_array($arrayWords[0],$arrayModes)===true) {				$szMode = $arrayWords[0];				array_shift($arrayWords);			}			$szArgName = array_shift($arrayWords);			if(strpos($arrayWords[count($arrayWords)-1],'[]')===false) {				$szArgType = implode(" ",$arrayWords);				$bArgIsArray = "false";			} else {				$szArgType = str_replace('[]','',implode(' ',$arrayWords));				$bArgIsArray = "true";			}			$arrayProperArgs[] = array($szMode,$szArgName,$szArgType,$bArgIsArray);			$szReturn .= "<script type=\"text/javascript\">RebuildArgTR('{$szMode}','{$szArgName}','{$szArgType}',new Boolean({$bArgIsArray}));</script>";			$nC++;		}		return $szReturn;	}	function buildJSData() {		global $data;		$arrayModes = array('IN','OUT','INOUT');		$arrayTypes = $data->getTypes(true, true, true);		$arrayPTypes = array();		$arrayPModes = array();		$szTypes = '';		while (!$arrayTypes->EOF) {			$arrayPTypes[] = "'". $arrayTypes->fields['typname'] ."'";			$arrayTypes->moveNext();		}		foreach($arrayModes as $pV) {			$arrayPModes[] = "'{$pV}'";		}		$szTypes = 'g_main_types = new Array('. implode(',', $arrayPTypes) .');';		$szModes = 'g_main_modes = new Array('. implode(',', $arrayPModes) .');';		return $szTypes . $szModes;	}	/**	 * Show default list of functions in the database	 */	function doDefault($msg = '') {		global $data, $conf, $misc, $func;		global $lang;		$misc->printTrail('schema');		$misc->printTabs('schema','functions');		$misc->printMsg($msg);		$funcs = $data->getFunctions();		$columns = array(			'function' => array(				'title' => $lang['strfunction'],				'field' => field('proproto'),				'type'  => 'verbatim',				'url'   => "redirect.php?subject=function&amp;action=properties&amp;{$misc->href}&amp;",				'vars'  => array('function' => 'proproto', 'function_oid' => 'prooid'),			),			'returns' => array(				'title' => $lang['strreturns'],				'field' => field('proreturns'),				'type'  => 'verbatim',			),			'owner' => array(				'title' => $lang['strowner'],				'field' => field('proowner'),			),			'proglanguage' => array(				'title' => $lang['strproglanguage'],				'field' => field('prolanguage'),			),			'actions' => array(				'title' => $lang['stractions'],			),			'comment' => array(				'title' => $lang['strcomment'],				'field' => field('procomment'),			),		);		$actions = array(			'multiactions' => array(				'keycols' => array('function' => 'proproto', 'function_oid' => 'prooid'),				'url' => 'functions.php',			),			'alter' => array(				'title' => $lang['stralter'],				'url'   => "functions.php?action=edit&amp;{$misc->href}&amp;",				'vars'  => array('function' => 'proproto', 'function_oid' => 'prooid'),			),			'drop' => array(				'title' => $lang['strdrop'],				'url'   => "functions.php?action=confirm_drop&amp;{$misc->href}&amp;",				'vars'  => array('function' => 'proproto', 'function_oid' => 'prooid'),				'multiaction' => 'confirm_drop',			),			'privileges' => array(				'title' => $lang['strprivileges'],				'url'   => "privileges.php?{$misc->href}&amp;subject=function&amp;",				'vars'  => array('function' => 'proproto', 'function_oid' => 'prooid'),			),		);		$misc->printTable($funcs, $columns, $actions, $lang['strnofunctions']);		echo "<ul class=\"navlink\">\n\t<li><a href=\"functions.php?action=create&amp;{$misc->href}\">{$lang['strcreateplfunction']}</a></li>\n";		echo "\t<li><a href=\"functions.php?action=create&amp;language=internal&amp;{$misc->href}\">{$lang['strcreateinternalfunction']}</a></li>\n";		echo "\t<li><a href=\"functions.php?action=create&amp;language=C&amp;{$misc->href}\">{$lang['strcreatecfunction']}</a></li>\n</ul>\n";	}	/**	 * Generate XML for the browser tree.	 */	function doTree() {		global $misc, $data;		$funcs = $data->getFunctions();		$proto = concat(field('proname'),' (',field('proarguments'),')');		$reqvars = $misc->getRequestVars('function');		$attrs = array(			'text'    => $proto,			'icon'    => 'Function',			'toolTip' => field('procomment'),			'action'  => url('redirect.php',							$reqvars,							array(								'action' => 'properties',								'function' => $proto,								'function_oid' => field('prooid')							)						)		);		$misc->printTreeXML($funcs, $attrs);		exit;	}	if ($action == 'tree') doTree();	$misc->printHeader($lang['strfunctions']);	$misc->printBody();	switch ($action) {		case 'save_create':			if (isset($_POST['cancel'])) doDefault();			else doSaveCreate();			break;		case 'create':			doCreate();			break;		case 'drop':			if (isset($_POST['drop'])) doDrop(false);			else doDefault();			break;		case 'confirm_drop':			doDrop(true);			break;		case 'save_edit':			if (isset($_POST['cancel'])) doDefault();			else doSaveEdit();			break;		case 'edit':			doEdit();			break;		case 'properties':			doProperties();			break;		default:			doDefault();			break;	}	$misc->printFooter();?>
<?php	/**	 * List tables in a database	 *	 * $Id: tables.php,v 1.112 2008/06/16 22:38:46 ioguix Exp $	 */	// Include application functions	include_once('./libraries/lib.inc.php');	$action = (isset($_REQUEST['action'])) ? $_REQUEST['action'] : '';	/**	 * Displays a screen where they can enter a new table	 */	function doCreate($msg = '') {		global $data, $misc;		global $lang;		if (!isset($_REQUEST['stage'])) {			$_REQUEST['stage'] = 1;			$default_with_oids = $data->getDefaultWithOid();			if ($default_with_oids == 'off') $_REQUEST['withoutoids'] = 'on';		}		if (!isset($_REQUEST['name'])) $_REQUEST['name'] = '';		if (!isset($_REQUEST['fields'])) $_REQUEST['fields'] = '';		if (!isset($_REQUEST['tblcomment'])) $_REQUEST['tblcomment'] = '';		if (!isset($_REQUEST['spcname'])) $_REQUEST['spcname'] = '';		switch ($_REQUEST['stage']) {			case 1:				// Fetch all tablespaces from the database				if ($data->hasTablespaces()) $tablespaces = $data->getTablespaces();				$misc->printTrail('schema');				$misc->printTitle($lang['strcreatetable'], 'pg.table.create');				$misc->printMsg($msg);				echo "<form action=\"tables.php\" method=\"post\">\n";				echo "<table>\n";				echo "\t<tr>\n\t\t<th class=\"data left required\">{$lang['strname']}</th>\n";				echo "\t\t<td class=\"data\"><input name=\"name\" size=\"32\" maxlength=\"{$data->_maxNameLen}\" value=\"",					htmlspecialchars($_REQUEST['name']), "\" /></td>\n\t</tr>\n";				echo "\t<tr>\n\t\t<th class=\"data left required\">{$lang['strnumcols']}</th>\n";				echo "\t\t<td class=\"data\"><input name=\"fields\" size=\"5\" maxlength=\"{$data->_maxNameLen}\" value=\"",					htmlspecialchars($_REQUEST['fields']), "\" /></td>\n\t</tr>\n";				echo "\t<tr>\n\t\t<th class=\"data left\">{$lang['stroptions']}</th>\n";				echo "\t\t<td class=\"data\"><label for=\"withoutoids\"><input type=\"checkbox\" id=\"withoutoids\" name=\"withoutoids\"", isset($_REQUEST['withoutoids']) ? ' checked="checked"' : '', " />WITHOUT OIDS</label></td>\n\t</tr>\n";				// Tablespace (if there are any)				if ($data->hasTablespaces() && $tablespaces->recordCount() > 0) {					echo "\t<tr>\n\t\t<th class=\"data left\">{$lang['strtablespace']}</th>\n";					echo "\t\t<td class=\"data1\">\n\t\t\t<select name=\"spcname\">\n";					// Always offer the default (empty) option					echo "\t\t\t\t<option value=\"\"",						($_REQUEST['spcname'] == '') ? ' selected="selected"' : '', "></option>\n";					// Display all other tablespaces					while (!$tablespaces->EOF) {						$spcname = htmlspecialchars($tablespaces->fields['spcname']);						echo "\t\t\t\t<option value=\"{$spcname}\"",							($tablespaces->fields['spcname'] == $_REQUEST['spcname']) ? ' selected="selected"' : '', ">{$spcname}</option>\n";						$tablespaces->moveNext();					}					echo "\t\t\t</select>\n\t\t</td>\n\t</tr>\n";				}				echo "\t<tr>\n\t\t<th class=\"data left\">{$lang['strcomment']}</th>\n";				echo "\t\t<td><textarea name=\"tblcomment\" rows=\"3\" cols=\"32\">",					htmlspecialchars($_REQUEST['tblcomment']), "</textarea></td>\n\t</tr>\n";				echo "</table>\n";				echo "<p><input type=\"hidden\" name=\"action\" value=\"create\" />\n";				echo "<input type=\"hidden\" name=\"stage\" value=\"2\" />\n";				echo $misc->form;				echo "<input type=\"submit\" value=\"{$lang['strnext']}\" />\n";				echo "<input type=\"submit\" name=\"cancel\" value=\"{$lang['strcancel']}\" /></p>\n";				echo "</form>\n";				break;			case 2:				global $lang;				// Check inputs				$fields = trim($_REQUEST['fields']);				if (trim($_REQUEST['name']) == '') {					$_REQUEST['stage'] = 1;					doCreate($lang['strtableneedsname']);					return;				}				elseif ($fields == '' || !is_numeric($fields) || $fields != (int)$fields || $fields < 1)  {					$_REQUEST['stage'] = 1;					doCreate($lang['strtableneedscols']);					return;				}				$types = $data->getTypes(true, false, true);				$types_for_js = array();				$misc->printTrail('schema');				$misc->printTitle($lang['strcreatetable'], 'pg.table.create');				$misc->printMsg($msg);				echo "<script src=\"tables.js\" type=\"text/javascript\"></script>";				echo "<form action=\"tables.php\" method=\"post\">\n";				// Output table header				echo "<table>\n";				echo "\t<tr><th colspan=\"2\" class=\"data required\">{$lang['strcolumn']}</th><th colspan=\"2\" class=\"data required\">{$lang['strtype']}</th>";				echo "<th class=\"data\">{$lang['strlength']}</th><th class=\"data\">{$lang['strnotnull']}</th>";				echo "<th class=\"data\">{$lang['struniquekey']}</th><th class=\"data\">{$lang['strprimarykey']}</th>";				echo "<th class=\"data\">{$lang['strdefault']}</th><th class=\"data\">{$lang['strcomment']}</th></tr>\n";				for ($i = 0; $i < $_REQUEST['fields']; $i++) {					if (!isset($_REQUEST['field'][$i])) $_REQUEST['field'][$i] = '';					if (!isset($_REQUEST['length'][$i])) $_REQUEST['length'][$i] = '';					if (!isset($_REQUEST['default'][$i])) $_REQUEST['default'][$i] = '';					if (!isset($_REQUEST['colcomment'][$i])) $_REQUEST['colcomment'][$i] = '';					echo "\t<tr>\n\t\t<td>", $i + 1, ".&nbsp;</td>\n";					echo "\t\t<td><input name=\"field[{$i}]\" size=\"16\" maxlength=\"{$data->_maxNameLen}\" value=\"",						htmlspecialchars($_REQUEST['field'][$i]), "\" /></td>\n";					echo "\t\t<td>\n\t\t\t<select name=\"type[{$i}]\" id=\"types{$i}\" onchange=\"checkLengths(this.options[this.selectedIndex].value,{$i});\">\n";					// Output any "magic" types					foreach ($data->extraTypes as $v) {						$types_for_js[strtolower($v)] = 1;						echo "\t\t\t\t<option value=\"", htmlspecialchars($v), "\"",						(isset($_REQUEST['type'][$i]) && $v == $_REQUEST['type'][$i]) ? ' selected="selected"' : '', ">",							$misc->printVal($v), "</option>\n";					}					$types->moveFirst();					while (!$types->EOF) {						$typname = $types->fields['typname'];						$types_for_js[$typname] = 1;						echo "\t\t\t\t<option value=\"", htmlspecialchars($typname), "\"",						(isset($_REQUEST['type'][$i]) && $typname == $_REQUEST['type'][$i]) ? ' selected="selected"' : '', ">",							$misc->printVal($typname), "</option>\n";						$types->moveNext();					}					echo "\t\t\t</select>\n\t\t\n";					if($i==0) { // only define js types array once						$predefined_size_types = array_intersect($data->predefined_size_types,array_keys($types_for_js));						$escaped_predef_types = array(); // the JS escaped array elements						foreach($predefined_size_types as $value) {							$escaped_predef_types[] = "'{$value}'";						}						echo "<script type=\"text/javascript\">predefined_lengths = new Array(". implode(",",$escaped_predef_types) .");</script>\n\t</td>";					}					// Output array type selector					echo "\t\t<td>\n\t\t\t<select name=\"array[{$i}]\">\n";					echo "\t\t\t\t<option value=\"\"", (isset($_REQUEST['array'][$i]) && $_REQUEST['array'][$i] == '') ? ' selected="selected"' : '', "></option>\n";					echo "\t\t\t\t<option value=\"[]\"", (isset($_REQUEST['array'][$i]) && $_REQUEST['array'][$i] == '[]') ? ' selected="selected"' : '', ">[ ]</option>\n";					echo "\t\t\t</select>\n\t\t</td>\n";					echo "\t\t<td><input name=\"length[{$i}]\" id=\"lengths{$i}\" size=\"10\" value=\"",						htmlspecialchars($_REQUEST['length'][$i]), "\" /></td>\n";					echo "\t\t<td><input type=\"checkbox\" name=\"notnull[{$i}]\"", (isset($_REQUEST['notnull'][$i])) ? ' checked="checked"' : '', " /></td>\n";					echo "\t\t<td style=\"text-align: center\"><input type=\"checkbox\" name=\"uniquekey[{$i}]\""						.(isset($_REQUEST['uniquekey'][$i]) ? ' checked="checked"' :'')." /></td>\n";					echo "\t\t<td style=\"text-align: center\"><input type=\"checkbox\" name=\"primarykey[{$i}]\" "						.(isset($_REQUEST['primarykey'][$i]) ? ' checked="checked"' : '')						." /></td>\n";					echo "\t\t<td><input name=\"default[{$i}]\" size=\"20\" value=\"",						htmlspecialchars($_REQUEST['default'][$i]), "\" /></td>\n";					echo "\t\t<td><input name=\"colcomment[{$i}]\" size=\"40\" value=\"",						htmlspecialchars($_REQUEST['colcomment'][$i]), "\" />						<script type=\"text/javascript\">checkLengths(document.getElementById('types{$i}').value,{$i});</script>						</td>\n\t</tr>\n";				}				echo "</table>\n";				echo "<p><input type=\"hidden\" name=\"action\" value=\"create\" />\n";				echo "<input type=\"hidden\" name=\"stage\" value=\"3\" />\n";				echo $misc->form;				echo "<input type=\"hidden\" name=\"name\" value=\"", htmlspecialchars($_REQUEST['name']), "\" />\n";				echo "<input type=\"hidden\" name=\"fields\" value=\"", htmlspecialchars($_REQUEST['fields']), "\" />\n";				if (isset($_REQUEST['withoutoids'])) {					echo "<input type=\"hidden\" name=\"withoutoids\" value=\"true\" />\n";				}				echo "<input type=\"hidden\" name=\"tblcomment\" value=\"", htmlspecialchars($_REQUEST['tblcomment']), "\" />\n";				if (isset($_REQUEST['spcname'])) {					echo "<input type=\"hidden\" name=\"spcname\" value=\"", htmlspecialchars($_REQUEST['spcname']), "\" />\n";				}				echo "<input type=\"submit\" value=\"{$lang['strcreate']}\" />\n";				echo "<input type=\"submit\" name=\"cancel\" value=\"{$lang['strcancel']}\" /></p>\n";				echo "</form>\n";				break;			case 3:				global $data, $lang, $_reload_browser;				if (!isset($_REQUEST['notnull'])) $_REQUEST['notnull'] = array();				if (!isset($_REQUEST['uniquekey'])) $_REQUEST['uniquekey'] = array();				if (!isset($_REQUEST['primarykey'])) $_REQUEST['primarykey'] = array();				if (!isset($_REQUEST['length'])) $_REQUEST['length'] = array();				// Default tablespace to null if it isn't set				if (!isset($_REQUEST['spcname'])) $_REQUEST['spcname'] = null;				// Check inputs				$fields = trim($_REQUEST['fields']);				if (trim($_REQUEST['name']) == '') {					$_REQUEST['stage'] = 1;					doCreate($lang['strtableneedsname']);					return;				}				elseif ($fields == '' || !is_numeric($fields) || $fields != (int)$fields || $fields <= 0)  {					$_REQUEST['stage'] = 1;					doCreate($lang['strtableneedscols']);					return;				}				$status = $data->createTable($_REQUEST['name'], $_REQUEST['fields'], $_REQUEST['field'],								$_REQUEST['type'], $_REQUEST['array'], $_REQUEST['length'], $_REQUEST['notnull'], $_REQUEST['default'],								isset($_REQUEST['withoutoids']), $_REQUEST['colcomment'], $_REQUEST['tblcomment'], $_REQUEST['spcname'],								$_REQUEST['uniquekey'], $_REQUEST['primarykey']);				if ($status == 0) {					$_reload_browser = true;					doDefault($lang['strtablecreated']);				}				elseif ($status == -1) {					$_REQUEST['stage'] = 2;					doCreate($lang['strtableneedsfield']);					return;				}				else {					$_REQUEST['stage'] = 2;					doCreate($lang['strtablecreatedbad']);					return;				}				break;			default:				echo "<p>{$lang['strinvalidparam']}</p>\n";		}	}	/**	 * Dsiplay a screen where user can create a table from an existing one.	 * We don't have to check if pg supports schema cause create table like	 * is available under pg 7.4+ which has schema.	 */	function doCreateLike($confirm, $msg = '') {		global $data, $misc, $lang;		if (!$confirm) {			include_once('./classes/Gui.php');			if (!isset($_REQUEST['name'])) $_REQUEST['name'] = '';			if (!isset($_REQUEST['like'])) $_REQUEST['like'] = '';			if (!isset($_REQUEST['tablespace'])) $_REQUEST['tablespace'] = '';			$misc->printTrail('schema');		    $misc->printTitle($lang['strcreatetable'], 'pg.table.create');			$misc->printMsg($msg);			$tbltmp = $data->getTables(true);			$tbltmp = $tbltmp->getArray();			$tables = array();			$tblsel = '';			foreach ($tbltmp as $a) {				$data->fieldClean($a['nspname']);				$data->fieldClean($a['relname']);				$tables["\"{$a['nspname']}\".\"{$a['relname']}\""] = serialize(array('schema' => $a['nspname'], 'table' => $a['relname']));				if ($_REQUEST['like'] == $tables["\"{$a['nspname']}\".\"{$a['relname']}\""]) 					$tblsel = htmlspecialchars($tables["\"{$a['nspname']}\".\"{$a['relname']}\""]);			}			unset($tbltmp);			echo "<form action=\"tables.php\" method=\"post\">\n";			echo "<table>\n\t<tr>\n\t\t<th class=\"data left required\">{$lang['strname']}</th>\n";			echo "\t\t<td class=\"data\"><input name=\"name\" size=\"32\" maxlength=\"{$data->_maxNameLen}\" value=\"", htmlspecialchars($_REQUEST['name']), "\" /></td>\n\t</tr>\n";			echo "\t<tr>\n\t\t<th class=\"data left required\">{$lang['strcreatetablelikeparent']}</th>\n";			echo "\t\t<td class=\"data\">";			echo GUI::printCombo($tables, 'like', true, $tblsel, false);			echo "</td>\n\t</tr>\n";			if ($data->hasTablespaces()) {				$tblsp_ = $data->getTablespaces();				if ($tblsp_->recordCount() > 0) {					$tblsp_ = $tblsp_->getArray();					$tblsp = array();					foreach($tblsp_ as $a) $tblsp[$a['spcname']] = $a['spcname'];					echo "\t<tr>\n\t\t<th class=\"data left\">{$lang['strtablespace']}</th>\n";					echo "\t\t<td class=\"data\">";					echo GUI::printCombo($tblsp, 'tablespace', true, $_REQUEST['tablespace'], false);					echo "</td>\n\t</tr>\n";				}			}			echo "\t<tr>\n\t\t<th class=\"data left\">{$lang['stroptions']}</th>\n\t\t<td class=\"data\">";			echo "<label for=\"withdefaults\"><input type=\"checkbox\" id=\"withdefaults\" name=\"withdefaults\"",				isset($_REQUEST['withdefaults']) ? ' checked="checked"' : '',				"/>{$lang['strcreatelikewithdefaults']}</label>";			if ($data->hasCreateTableLikeWithConstraints()) {				echo "<br /><label for=\"withconstraints\"><input type=\"checkbox\" id=\"withconstraints\" name=\"withconstraints\"",					isset($_REQUEST['withconstraints']) ? ' checked="checked"' : '',					"/>{$lang['strcreatelikewithconstraints']}</label>";			}			if ($data->hasCreateTableLikeWithIndexes()) {				echo "<br /><label for=\"withindexes\"><input type=\"checkbox\" id=\"withindexes\" name=\"withindexes\"",					isset($_REQUEST['withindexes']) ? ' checked="checked"' : '',					"/>{$lang['strcreatelikewithindexes']}</label>";			}			echo "</td>\n\t</tr>\n";			echo "</table>";			echo "<input type=\"hidden\" name=\"action\" value=\"confcreatelike\" />\n";			echo $misc->form;			echo "<p><input type=\"submit\" value=\"{$lang['strcreate']}\" />\n";			echo "<input type=\"submit\" name=\"cancel\" value=\"{$lang['strcancel']}\" /></p>\n";			echo "</form>\n";		}		else {			global $_reload_browser;			if (trim($_REQUEST['name']) == '') {				doCreateLike(false, $lang['strtableneedsname']);				return;			}			if (trim($_REQUEST['like']) == '') {				doCreateLike(false, $lang['strtablelikeneedslike']);				return;			}			if (!isset($_REQUEST['tablespace'])) $_REQUEST['tablespace'] = '';			$status = $data->createTableLike($_REQUEST['name'], unserialize($_REQUEST['like']), isset($_REQUEST['withdefaults']),				isset($_REQUEST['withconstraints']), isset($_REQUEST['withindexes']), $_REQUEST['tablespace']);							if ($status == 0) {				$_reload_browser = true;				doDefault($lang['strtablecreated']);			}			else {				doCreateLike(false, $lang['strtablecreatedbad']);				return;			}		}	}	/**	 * Ask for select parameters and perform select	 */	function doSelectRows($confirm, $msg = '') {		global $data, $misc, $_no_output;		global $lang;		if ($confirm) {			$misc->printTrail('table');			$misc->printTitle($lang['strselect'], 'pg.sql.select');			$misc->printMsg($msg);			$attrs = $data->getTableAttributes($_REQUEST['table']);			echo "<form action=\"tables.php\" method=\"post\" id=\"selectform\">\n";			if ($attrs->recordCount() > 0) {				// JavaScript for select all feature				echo "<script type=\"text/javascript\">\n";				echo "//<![CDATA[\n";				echo "	function selectAll() {\n";				echo "		for (var i=0; i<document.getElementById('selectform').elements.length; i++) {\n";				echo "			var e = document.getElementById('selectform').elements[i];\n";				echo "			if (e.name.indexOf('show') == 0) e.checked = document.getElementById('selectform').selectall.checked;\n";				echo "		}\n";				echo "	}\n";				echo "//]]>\n";				echo "</script>\n";				echo "<table>\n";				// Output table header				echo "<tr><th class=\"data\">{$lang['strshow']}</th><th class=\"data\">{$lang['strcolumn']}</th>";				echo "<th class=\"data\">{$lang['strtype']}</th><th class=\"data\">{$lang['stroperator']}</th>";				echo "<th class=\"data\">{$lang['strvalue']}</th></tr>";				$i = 0;				while (!$attrs->EOF) {					$attrs->fields['attnotnull'] = $data->phpBool($attrs->fields['attnotnull']);					// Set up default value if there isn't one already					if (!isset($_REQUEST['values'][$attrs->fields['attname']]))						$_REQUEST['values'][$attrs->fields['attname']] = null;					if (!isset($_REQUEST['ops'][$attrs->fields['attname']]))						$_REQUEST['ops'][$attrs->fields['attname']] = null;					// Continue drawing row					$id = (($i % 2) == 0 ? '1' : '2');					echo "<tr class=\"data{$id}\">\n";					echo "<td style=\"white-space:nowrap;\">";					echo "<input type=\"checkbox\" name=\"show[", htmlspecialchars($attrs->fields['attname']), "]\"",						isset($_REQUEST['show'][$attrs->fields['attname']]) ? ' checked="checked"' : '', " /></td>";					echo "<td style=\"white-space:nowrap;\">", $misc->printVal($attrs->fields['attname']), "</td>";					echo "<td style=\"white-space:nowrap;\">", $misc->printVal($data->formatType($attrs->fields['type'], $attrs->fields['atttypmod'])), "</td>";					echo "<td style=\"white-space:nowrap;\">";					echo "<select name=\"ops[{$attrs->fields['attname']}]\">\n";					foreach (array_keys($data->selectOps) as $v) {						echo "<option value=\"", htmlspecialchars($v), "\"", ($v == $_REQUEST['ops'][$attrs->fields['attname']]) ? ' selected="selected"' : '',						">", htmlspecialchars($v), "</option>\n";					}					echo "</select>\n</td>\n";					echo "<td style=\"white-space:nowrap;\">", $data->printField("values[{$attrs->fields['attname']}]",						$_REQUEST['values'][$attrs->fields['attname']], $attrs->fields['type']), "</td>";					echo "</tr>\n";					$i++;					$attrs->moveNext();				}				// Select all checkbox				echo "<tr><td colspan=\"5\"><input type=\"checkbox\" id=\"selectall\" name=\"selectall\" onclick=\"javascript:selectAll()\" /><label for=\"selectall\">{$lang['strselectallfields']}</label></td>";				echo "</tr></table>\n";			}			else echo "<p>{$lang['strinvalidparam']}</p>\n";			echo "<p><input type=\"hidden\" name=\"action\" value=\"selectrows\" />\n";			echo "<input type=\"hidden\" name=\"table\" value=\"", htmlspecialchars($_REQUEST['table']), "\" />\n";			echo "<input type=\"hidden\" name=\"subject\" value=\"table\" />\n";			echo $misc->form;			echo "<input type=\"submit\" name=\"select\" value=\"{$lang['strselect']}\" />\n";			echo "<input type=\"submit\" name=\"cancel\" value=\"{$lang['strcancel']}\" /></p>\n";			echo "</form>\n";		}		else {			if (!isset($_POST['show'])) $_POST['show'] = array();			if (!isset($_POST['values'])) $_POST['values'] = array();			if (!isset($_POST['nulls'])) $_POST['nulls'] = array();			// Verify that they haven't supplied a value for unary operators			foreach ($_POST['ops'] as $k => $v) {				if ($data->selectOps[$v] == 'p' && $_POST['values'][$k] != '') {					doSelectRows(true, $lang['strselectunary']);					return;				}			}			if (sizeof($_POST['show']) == 0)				doSelectRows(true, $lang['strselectneedscol']);			else {				// Generate query SQL				$query = $data->getSelectSQL($_REQUEST['table'], array_keys($_POST['show']),					$_POST['values'], $_POST['ops']);				$_REQUEST['query'] = $query;				$_REQUEST['return_url'] = "tables.php?action=confselectrows&amp;{$misc->href}&amp;table={$_REQUEST['table']}";				$_REQUEST['return_desc'] = $lang['strback'];				$_no_output = true;				include('./display.php');				exit;			}		}	}	/**	 * Ask for insert parameters and then actually insert row	 */	function doInsertRow($confirm, $msg = '') {		global $data, $misc, $conf;		global $lang;		if ($confirm) {			$misc->printTrail('table');			$misc->printTitle($lang['strinsertrow'], 'pg.sql.insert');			$misc->printMsg($msg);			$attrs = $data->getTableAttributes($_REQUEST['table']);			if (($conf['autocomplete'] != 'disable')) {				$fksprops = $misc->getAutocompleteFKProperties($_REQUEST['table']);				if ($fksprops !== false)					echo $fksprops['code'];			}			else $fksprops = false;			echo "<form action=\"tables.php\" method=\"post\" id=\"ac_form\">\n";			if ($attrs->recordCount() > 0) {				echo "<table>\n";				// Output table header				echo "<tr><th class=\"data\">{$lang['strcolumn']}</th><th class=\"data\">{$lang['strtype']}</th>";				echo "<th class=\"data\">{$lang['strformat']}</th>";				echo "<th class=\"data\">{$lang['strnull']}</th><th class=\"data\">{$lang['strvalue']}</th></tr>";				$i = 0;				$fields = array();				while (!$attrs->EOF) {					$fields[$attrs->fields['attnum']] = $attrs->fields['attname'];					$attrs->fields['attnotnull'] = $data->phpBool($attrs->fields['attnotnull']);					// Set up default value if there isn't one already					if (!isset($_REQUEST['values'][$attrs->fields['attnum']]))						$_REQUEST['values'][$attrs->fields['attnum']] = $attrs->fields['adsrc'];					// Default format to 'VALUE' if there is no default,					// otherwise default to 'EXPRESSION'					if (!isset($_REQUEST['format'][$attrs->fields['attnum']]))						$_REQUEST['format'][$attrs->fields['attnum']] = ($attrs->fields['adsrc'] === null) ? 'VALUE' : 'EXPRESSION';					// Continue drawing row					$id = (($i % 2) == 0 ? '1' : '2');					echo "<tr class=\"data{$id}\">\n";					echo "<td style=\"white-space:nowrap;\">", $misc->printVal($attrs->fields['attname']), "</td>";					echo "<td style=\"white-space:nowrap;\">\n";					echo $misc->printVal($data->formatType($attrs->fields['type'], $attrs->fields['atttypmod']));					echo "<input type=\"hidden\" name=\"types[{$attrs->fields['attnum']}]\" value=\"",						htmlspecialchars($attrs->fields['type']), "\" /></td>";					echo "<td style=\"white-space:nowrap;\">\n";					echo "<select name=\"format[{$attrs->fields['attnum']}]\">\n";					echo "<option value=\"VALUE\"", ($_REQUEST['format'][$attrs->fields['attnum']] == 'VALUE') ? ' selected="selected"' : '', ">{$lang['strvalue']}</option>\n";					echo "<option value=\"EXPRESSION\"", ($_REQUEST['format'][$attrs->fields['attnum']] == 'EXPRESSION') ? ' selected="selected"' : '', ">{$lang['strexpression']}</option>\n";					echo "</select>\n</td>\n";					echo "<td style=\"white-space:nowrap;\">";					// Output null box if the column allows nulls (doesn't look at CHECKs or ASSERTIONS)					if (!$attrs->fields['attnotnull']) {						echo "<input type=\"checkbox\" name=\"nulls[{$attrs->fields['attnum']}]\"",							isset($_REQUEST['nulls'][$attrs->fields['attnum']]) ? ' checked="checked"' : '', " /></td>";					}					else {						echo "&nbsp;</td>";					}					echo "<td id=\"row_att_{$attrs->fields['attnum']}\" style=\"white-space:nowrap;\">";					if (($fksprops !== false) && isset($fksprops['byfield'][$attrs->fields['attnum']])) {						echo $data->printField("values[{$attrs->fields['attnum']}]", $_REQUEST['values'][$attrs->fields['attnum']], 'fktype'/*force FK*/,							array(								'id' => "attr_{$attrs->fields['attnum']}",								'autocomplete' => 'off'							)						);					}					else {						echo $data->printField("values[{$attrs->fields['attnum']}]", $_REQUEST['values'][$attrs->fields['attnum']], $attrs->fields['type']);					}					echo "</td>\n";					echo "</tr>\n";					$i++;					$attrs->moveNext();				}				echo "</table>\n";				if (!isset($_SESSION['counter'])) { $_SESSION['counter'] = 0; }				echo "<input type=\"hidden\" name=\"action\" value=\"insertrow\" />\n";				echo "<input type=\"hidden\" name=\"fields\" value=\"", htmlentities(serialize($fields),ENT_QUOTES) ,"\" />\n";				echo "<input type=\"hidden\" name=\"protection_counter\" value=\"".$_SESSION['counter']."\" />\n";				echo "<input type=\"hidden\" name=\"table\" value=\"", htmlspecialchars($_REQUEST['table']), "\" />\n";				echo "<p><input type=\"submit\" name=\"insert\" value=\"{$lang['strinsert']}\" />\n";				echo "<input type=\"submit\" name=\"insertandrepeat\" value=\"{$lang['strinsertandrepeat']}\" />\n";				echo "<input type=\"submit\" name=\"cancel\" value=\"{$lang['strcancel']}\" />\n";								if($fksprops !== false) {					if ($conf['autocomplete'] != 'default off')						echo "<input type=\"checkbox\" id=\"no_ac\" value=\"1\" checked=\"checked\" /><label for=\"no_ac\">{$lang['strac']}</label>\n";					else						echo "<input type=\"checkbox\" id=\"no_ac\" value=\"0\" /><label for=\"no_ac\">{$lang['strac']}</label>\n";				}				echo "</p>\n";			}			else { 				echo "<p>{$lang['strnofieldsforinsert']}</p>\n";				echo "<input type=\"submit\" name=\"cancel\" value=\"{$lang['strcancel']}\" />\n";			}			echo $misc->form;			echo "</form>\n";		}		else {			if (!isset($_POST['values'])) $_POST['values'] = array();			if (!isset($_POST['nulls'])) $_POST['nulls'] = array();			$_POST['fields'] = unserialize(htmlspecialchars_decode($_POST['fields'], ENT_QUOTES));			if ($_SESSION['counter']++ == $_POST['protection_counter']) {				$status = $data->insertRow($_POST['table'], $_POST['fields'], $_POST['values'],											$_POST['nulls'], $_POST['format'], $_POST['types']);				if ($status == 0) {					if (isset($_POST['insert']))						doDefault($lang['strrowinserted']);					else {						$_REQUEST['values'] = array();						$_REQUEST['nulls'] = array();						doInsertRow(true, $lang['strrowinserted']);					}				}				else					doInsertRow(true, $lang['strrowinsertedbad']);			} else				doInsertRow(true, $lang['strrowduplicate']);		}	}	/**	 * Show confirmation of empty and perform actual empty	 */	function doEmpty($confirm) {		global $data, $misc;		global $lang;		if (empty($_REQUEST['table']) && empty($_REQUEST['ma'])) {			doDefault($lang['strspecifytabletoempty']);			exit();		}		if ($confirm) {			if (isset($_REQUEST['ma'])) {				$misc->printTrail('schema');				$misc->printTitle($lang['strempty'],'pg.table.empty');				echo "<form action=\"tables.php\" method=\"post\">\n";				foreach ($_REQUEST['ma'] as $v) {					$a = unserialize(htmlspecialchars_decode($v, ENT_QUOTES));					echo "<p>", sprintf($lang['strconfemptytable'], $misc->printVal($a['table'])), "</p>\n";					printf('<input type="hidden" name="table[]" value="%s" />', htmlspecialchars($a['table']));				}			} // END mutli empty			else {				$misc->printTrail('table');				$misc->printTitle($lang['strempty'],'pg.table.empty');				echo "<p>", sprintf($lang['strconfemptytable'], $misc->printVal($_REQUEST['table'])), "</p>\n";				echo "<form action=\"tables.php\" method=\"post\">\n";				echo "<input type=\"hidden\" name=\"table\" value=\"", htmlspecialchars($_REQUEST['table']), "\" />\n";			} // END not mutli empty			echo "<input type=\"hidden\" name=\"action\" value=\"empty\" />\n";			echo $misc->form;			echo "<input type=\"submit\" name=\"empty\" value=\"{$lang['strempty']}\" /> <input type=\"submit\" name=\"cancel\" value=\"{$lang['strcancel']}\" />\n";			echo "</form>\n";		} // END if confirm		else { // Do Empty			if (is_array($_REQUEST['table'])) {				$msg='';				foreach($_REQUEST['table'] as $t) {					$status = $data->emptyTable($t);					if ($status == 0)						$msg.= sprintf('%s: %s<br />', htmlentities($t), $lang['strtableemptied']);					else {						doDefault(sprintf('%s%s: %s<br />', $msg, htmlentities($t), $lang['strtableemptiedbad']));						return;					}				}				doDefault($msg);			} // END mutli empty			else {				$status = $data->emptyTable($_POST['table']);				if ($status == 0)					doDefault($lang['strtableemptied']);				else					doDefault($lang['strtableemptiedbad']);			} // END not mutli empty		} // END do Empty	}	/**	 * Show confirmation of drop and perform actual drop	 */	function doDrop($confirm) {		global $data, $misc;		global $lang, $_reload_browser;		if (empty($_REQUEST['table']) && empty($_REQUEST['ma'])) {			doDefault($lang['strspecifytabletodrop']);			exit();		}		if ($confirm) {			//If multi drop			if (isset($_REQUEST['ma'])) {				$misc->printTrail('schema');				$misc->printTitle($lang['strdrop'], 'pg.table.drop');				echo "<form action=\"tables.php\" method=\"post\">\n";				foreach($_REQUEST['ma'] as $v) {					$a = unserialize(htmlspecialchars_decode($v, ENT_QUOTES));					echo "<p>", sprintf($lang['strconfdroptable'], $misc->printVal($a['table'])), "</p>\n";					printf('<input type="hidden" name="table[]" value="%s" />', htmlspecialchars($a['table']));				}			} else {				$misc->printTrail('table');				$misc->printTitle($lang['strdrop'], 'pg.table.drop');				echo "<p>", sprintf($lang['strconfdroptable'], $misc->printVal($_REQUEST['table'])), "</p>\n";				echo "<form action=\"tables.php\" method=\"post\">\n";				echo "<input type=\"hidden\" name=\"table\" value=\"", htmlspecialchars($_REQUEST['table']), "\" />\n";			}// END if multi drop			echo "<input type=\"hidden\" name=\"action\" value=\"drop\" />\n";			echo $misc->form;			echo "<p><input type=\"checkbox\" id=\"cascade\" name=\"cascade\" /> <label for=\"cascade\">{$lang['strcascade']}</label></p>\n";			echo "<input type=\"submit\" name=\"drop\" value=\"{$lang['strdrop']}\" />\n";			echo "<input type=\"submit\" name=\"cancel\" value=\"{$lang['strcancel']}\" />\n";			echo "</form>\n";		} // END confirm		else {			//If multi drop			if (is_array($_REQUEST['table'])) {				$msg='';				$status = $data->beginTransaction();				if ($status == 0) {					foreach($_REQUEST['table'] as $t) {						$status = $data->dropTable($t, isset($_POST['cascade']));						if ($status == 0)							$msg.= sprintf('%s: %s<br />', htmlentities($t), $lang['strtabledropped']);						else {							$data->endTransaction();							doDefault(sprintf('%s%s: %s<br />', $msg, htmlentities($t), $lang['strtabledroppedbad']));							return;						}					}				}				if($data->endTransaction() == 0) {					// Everything went fine, back to the Default page....					$_reload_browser = true;					doDefault($msg);				}				else doDefault($lang['strtabledroppedbad']);			} else {				$status = $data->dropTable($_POST['table'], isset($_POST['cascade']));				if ($status == 0) {					$_reload_browser = true;					doDefault($lang['strtabledropped']);				}				else					doDefault($lang['strtabledroppedbad']);			}		} // END DROP	}// END Function	/**	 * Show default list of tables in the database	 */	function doDefault($msg = '') {		global $data, $conf, $misc, $data;		global $lang;		$misc->printTrail('schema');		$misc->printTabs('schema','tables');		$misc->printMsg($msg);		$tables = $data->getTables();		$columns = array(			'table' => array(				'title' => $lang['strtable'],				'field' => field('relname'),				'url'		=> "redirect.php?subject=table&amp;{$misc->href}&amp;",				'vars'  => array('table' => 'relname'),			),			'owner' => array(				'title' => $lang['strowner'],				'field' => field('relowner'),			),			'tablespace' => array(				'title' => $lang['strtablespace'],				'field' => field('tablespace')			),			'tuples' => array(				'title' => $lang['strestimatedrowcount'],				'field' => field('reltuples'),				'type'  => 'numeric'			),			'actions' => array(				'title' => $lang['stractions'],			),			'comment' => array(				'title' => $lang['strcomment'],				'field' => field('relcomment'),			),		);		$actions = array(			'multiactions' => array(				'keycols' => array('table' => 'relname'),				'url' => 'tables.php',				'default' => 'analyze',			),			'browse' => array(				'title' => $lang['strbrowse'],				'url'   => "display.php?{$misc->href}&amp;subject=table&amp;return_url=".urlencode("tables.php?{$misc->href}")."&amp;return_desc=".urlencode($lang['strback'])."&amp;",				'vars'  => array('table' => 'relname'),			),			'select' => array(				'title' => $lang['strselect'],				'url'   => "tables.php?action=confselectrows&amp;{$misc->href}&amp;",				'vars'  => array('table' => 'relname'),			),			'insert' => array(				'title' => $lang['strinsert'],				'url'   => "tables.php?action=confinsertrow&amp;{$misc->href}&amp;",				'vars'  => array('table' => 'relname'),			),			'empty' => array(				'title' => $lang['strempty'],				'url'   => "tables.php?action=confirm_empty&amp;{$misc->href}&amp;",				'vars'  => array('table' => 'relname'),				'multiaction' => 'confirm_empty',			),			'alter' => array(				'title' => $lang['stralter'],				'url'	=> "tblproperties.php?action=confirm_alter&amp;{$misc->href}&amp;",				'vars'	=> array('table' => 'relname'),			),			'drop' => array(				'title' => $lang['strdrop'],				'url'   => "tables.php?action=confirm_drop&amp;{$misc->href}&amp;",				'vars'  => array('table' => 'relname'),				'multiaction' => 'confirm_drop',			),			'vacuum' => array(				'title' => $lang['strvacuum'],				'url'   => "tables.php?action=confirm_vacuum&amp;{$misc->href}&amp;",				'vars'  => array('table' => 'relname'),				'multiaction' => 'confirm_vacuum',			),			'analyze' => array(				'title' => $lang['stranalyze'],				'url'   => "tables.php?action=confirm_analyze&amp;{$misc->href}&amp;",				'vars'  => array('table' => 'relname'),				'multiaction' => 'confirm_analyze',			),			'reindex' => array(				'title' => $lang['strreindex'],				'url'   => "tables.php?action=confirm_reindex&amp;{$misc->href}&amp;",				'vars'  => array('table' => 'relname'),				'multiaction' => 'confirm_reindex',			),			//'cluster' TODO ?		);		if (!$data->hasTablespaces()) unset($columns['tablespace']);		$misc->printTable($tables, $columns, $actions, $lang['strnotables']);		echo "<ul class=\"navlink\">\n\t<li><a href=\"tables.php?action=create&amp;{$misc->href}\">{$lang['strcreatetable']}</a></li>\n";		if (($tables->recordCount() > 0) && $data->hasCreateTableLike())			echo "\t<li><a href=\"tables.php?action=createlike&amp;{$misc->href}\">{$lang['strcreatetablelike']}</a></li>\n";		echo "</ul>\n";	}		require('./admin.php');	/**	 * Generate XML for the browser tree.	 */	function doTree() {		global $misc, $data;		$tables = $data->getTables();		$reqvars = $misc->getRequestVars('table');		$attrs = array(			'text'   => field('relname'),			'icon'   => 'Table',			'iconAction' => url('display.php',							$reqvars,							array('table' => field('relname'))						),			'toolTip'=> field('relcomment'),			'action' => url('redirect.php',							$reqvars,							array('table' => field('relname'))						),			'branch' => url('tables.php',							$reqvars,							array (								'action' => 'subtree',								'table' => field('relname')							)						)		);		$misc->printTreeXML($tables, $attrs);		exit;	}	function doSubTree() {		global $misc, $data;		$tabs = $misc->getNavTabs('table');		$items = $misc->adjustTabsForTree($tabs);		$reqvars = $misc->getRequestVars('table');		$attrs = array(			'text'   => noEscape(field('title')),			'icon'   => field('icon'),			'action' => url(				field('url'),				$reqvars,				field('urlvars'),				array('table' => $_REQUEST['table'])			),			'branch' => ifempty(				field('branch'), '', url(					field('url'),					$reqvars,					array(						'action' => 'tree',						'table' => $_REQUEST['table']					)				)			),		);		$misc->printTreeXML($items, $attrs);		exit;	}	if ($action == 'tree') doTree();	if ($action == 'subtree') dosubTree();	$misc->printHeader($lang['strtables']);	$misc->printBody();	switch ($action) {		case 'create':			if (isset($_POST['cancel'])) doDefault();			else doCreate();			break;		case 'createlike':			doCreateLike(false);			break;		case 'confcreatelike':			if (isset($_POST['cancel'])) doDefault();			else doCreateLike(true);			break;		case 'selectrows':			if (!isset($_POST['cancel'])) doSelectRows(false);			else doDefault();			break;		case 'confselectrows':			doSelectRows(true);			break;		case 'insertrow':			if (!isset($_POST['cancel'])) doInsertRow(false);			else doDefault();			break;		case 'confinsertrow':			doInsertRow(true);			break;		case 'empty':			if (isset($_POST['empty'])) doEmpty(false);			else doDefault();			break;		case 'confirm_empty':			doEmpty(true);			break;		case 'drop':			if (isset($_POST['drop'])) doDrop(false);			else doDefault();			break;		case 'confirm_drop':			doDrop(true);			break;		default:			if (adminActions($action, 'table') === false) doDefault();			break;	}	$misc->printFooter();?>
<?php	/**	 * Common relation browsing function that can be used for views,	 * tables, reports, arbitrary queries, etc. to avoid code duplication.	 * @param $query The SQL SELECT string to execute	 * @param $count The same SQL query, but only retrieves the count of the rows (AS total)	 * @param $return_url The return URL	 * @param $return_desc The return link name	 * @param $page The current page	 *	 * $Id: display.php,v 1.68 2008/04/14 12:44:27 ioguix Exp $	 */	// Prevent timeouts on large exports (non-safe mode only)	if (!ini_get('safe_mode')) set_time_limit(0);	// Include application functions	include_once('./libraries/lib.inc.php');	global $conf, $lang;	$action = (isset($_REQUEST['action'])) ? $_REQUEST['action'] : '';	/**	 * Show confirmation of edit and perform actual update	 */	function doEditRow($confirm, $msg = '') {		global $data, $misc, $conf;		global $lang;		if (is_array($_REQUEST['key']))           $key = $_REQUEST['key'];        else           $key = unserialize($_REQUEST['key']);		if ($confirm) {			$misc->printTrail($_REQUEST['subject']);			$misc->printTitle($lang['streditrow']);			$misc->printMsg($msg);			$attrs = $data->getTableAttributes($_REQUEST['table']);			$rs = $data->browseRow($_REQUEST['table'], $key);			if (($conf['autocomplete'] != 'disable')) {				$fksprops = $misc->getAutocompleteFKProperties($_REQUEST['table']);				if ($fksprops !== false)					echo $fksprops['code'];			}			else $fksprops = false;			echo "<form action=\"display.php\" method=\"post\" id=\"ac_form\">\n";			$elements = 0;			$error = true;						if ($rs->recordCount() == 1 && $attrs->recordCount() > 0) {				echo "<table>\n";				// Output table header				echo "<tr><th class=\"data\">{$lang['strcolumn']}</th><th class=\"data\">{$lang['strtype']}</th>";				echo "<th class=\"data\">{$lang['strformat']}</th>\n";				echo "<th class=\"data\">{$lang['strnull']}</th><th class=\"data\">{$lang['strvalue']}</th></tr>";				$i = 0;				while (!$attrs->EOF) {					$attrs->fields['attnotnull'] = $data->phpBool($attrs->fields['attnotnull']);					$id = (($i % 2) == 0 ? '1' : '2');										// Initialise variables					if (!isset($_REQUEST['format'][$attrs->fields['attname']]))						$_REQUEST['format'][$attrs->fields['attname']] = 'VALUE';										echo "<tr class=\"data{$id}\">\n";					echo "<td style=\"white-space:nowrap;\">", $misc->printVal($attrs->fields['attname']), "</td>";					echo "<td style=\"white-space:nowrap;\">\n";					echo $misc->printVal($data->formatType($attrs->fields['type'], $attrs->fields['atttypmod']));					echo "<input type=\"hidden\" name=\"types[", htmlspecialchars($attrs->fields['attname']), "]\" value=\"", 						htmlspecialchars($attrs->fields['type']), "\" /></td>";					$elements++;					echo "<td style=\"white-space:nowrap;\">\n";					echo "<select name=\"format[", htmlspecialchars($attrs->fields['attname']), "]\">\n";					echo "<option value=\"VALUE\"", ($_REQUEST['format'][$attrs->fields['attname']] == 'VALUE') ? ' selected="selected"' : '', ">{$lang['strvalue']}</option>\n";					echo "<option value=\"EXPRESSION\"", ($_REQUEST['format'][$attrs->fields['attname']] == 'EXPRESSION') ? ' selected="selected"' : '', ">{$lang['strexpression']}</option>\n";					echo "</select>\n</td>\n";					$elements++;					echo "<td style=\"white-space:nowrap;\">";					// Output null box if the column allows nulls (doesn't look at CHECKs or ASSERTIONS)					if (!$attrs->fields['attnotnull']) {						// Set initial null values						if ($_REQUEST['action'] == 'confeditrow' && $rs->fields[$attrs->fields['attname']] === null) {							$_REQUEST['nulls'][$attrs->fields['attname']] = 'on';						}						echo "<input type=\"checkbox\" name=\"nulls[{$attrs->fields['attname']}]\"",							isset($_REQUEST['nulls'][$attrs->fields['attname']]) ? ' checked="checked"' : '', " /></td>\n";						$elements++;					}					else						echo "&nbsp;</td>";					echo "<td id=\"row_att_{$attrs->fields['attnum']}\" style=\"white-space:nowrap;\">";					$extras = array();					// If the column allows nulls, then we put a JavaScript action on the data field to unset the					// NULL checkbox as soon as anything is entered in the field.  We use the $elements variable to 					// keep track of which element offset we're up to.  We can't refer to the null checkbox by name					// as it contains '[' and ']' characters.					if (!$attrs->fields['attnotnull']) {						$extras['onChange'] = 'elements[' . ($elements - 1) . '].checked = false;';					}					if (($fksprops !== false) && isset($fksprops['byfield'][$attrs->fields['attnum']])) {						$extras['id'] = "attr_{$attrs->fields['attnum']}";						$extras['autocomplete'] = 'off';					}					echo $data->printField("values[{$attrs->fields['attname']}]", $rs->fields[$attrs->fields['attname']], $attrs->fields['type'], $extras);					echo "</td>";					$elements++;					echo "</tr>\n";					$i++;					$attrs->moveNext();				}				echo "</table>\n";				$error = false;			}			elseif ($rs->recordCount() != 1) {				echo "<p>{$lang['strrownotunique']}</p>\n";							}			else {				echo "<p>{$lang['strinvalidparam']}</p>\n";			}			echo "<input type=\"hidden\" name=\"action\" value=\"editrow\" />\n";			echo $misc->form;			if (isset($_REQUEST['table']))				echo "<input type=\"hidden\" name=\"table\" value=\"", htmlspecialchars($_REQUEST['table']), "\" />\n";			if (isset($_REQUEST['subject']))				echo "<input type=\"hidden\" name=\"subject\" value=\"", htmlspecialchars($_REQUEST['subject']), "\" />\n";			if (isset($_REQUEST['query']))				echo "<input type=\"hidden\" name=\"query\" value=\"", htmlspecialchars($_REQUEST['query']), "\" />\n";			if (isset($_REQUEST['count']))				echo "<input type=\"hidden\" name=\"count\" value=\"", htmlspecialchars($_REQUEST['count']), "\" />\n";			if (isset($_REQUEST['return_url']))				echo "<input type=\"hidden\" name=\"return_url\" value=\"", htmlspecialchars($_REQUEST['return_url']), "\" />\n";			if (isset($_REQUEST['return_desc']))				echo "<input type=\"hidden\" name=\"return_desc\" value=\"", htmlspecialchars($_REQUEST['return_desc']), "\" />\n";			echo "<input type=\"hidden\" name=\"page\" value=\"", htmlspecialchars($_REQUEST['page']), "\" />\n";			echo "<input type=\"hidden\" name=\"sortkey\" value=\"", htmlspecialchars($_REQUEST['sortkey']), "\" />\n";			echo "<input type=\"hidden\" name=\"sortdir\" value=\"", htmlspecialchars($_REQUEST['sortdir']), "\" />\n";			echo "<input type=\"hidden\" name=\"strings\" value=\"", htmlspecialchars($_REQUEST['strings']), "\" />\n";			echo "<input type=\"hidden\" name=\"key\" value=\"", htmlspecialchars(serialize($key)), "\" />\n";			echo "<p>";			if (!$error) echo "<input type=\"submit\" name=\"save\" value=\"{$lang['strsave']}\" />\n";			echo "<input type=\"submit\" name=\"cancel\" value=\"{$lang['strcancel']}\" />\n";			if($fksprops !== false) {				if ($conf['autocomplete'] != 'default off')					echo "<input type=\"checkbox\" id=\"no_ac\" value=\"1\" checked=\"checked\" /><label for=\"no_ac\">{$lang['strac']}</label>\n";				else					echo "<input type=\"checkbox\" id=\"no_ac\" value=\"0\" /><label for=\"no_ac\">{$lang['strac']}</label>\n";			}			echo "</p>\n";			echo "</form>\n";		}		else {			if (!isset($_POST['values'])) $_POST['values'] = array();			if (!isset($_POST['nulls'])) $_POST['nulls'] = array();						$status = $data->editRow($_POST['table'], $_POST['values'], $_POST['nulls'], 				$_POST['format'], $_POST['types'], unserialize($_POST['key']));			if ($status == 0)				doBrowse($lang['strrowupdated']);			elseif ($status == -2)				doEditRow(true, $lang['strrownotunique']);			else				doEditRow(true, $lang['strrowupdatedbad']);		}	}		/**	 * Show confirmation of drop and perform actual drop	 */	function doDelRow($confirm) {		global $data, $misc;		global $lang;		if ($confirm) {			$misc->printTrail($_REQUEST['subject']);			$misc->printTitle($lang['strdeleterow']);			echo "<p>{$lang['strconfdeleterow']}</p>\n";						echo "<form action=\"display.php\" method=\"post\">\n";			echo "<input type=\"hidden\" name=\"action\" value=\"delrow\" />\n";			echo $misc->form;			if (isset($_REQUEST['table']))				echo "<input type=\"hidden\" name=\"table\" value=\"", htmlspecialchars($_REQUEST['table']), "\" />\n";			if (isset($_REQUEST['subject']))				echo "<input type=\"hidden\" name=\"subject\" value=\"", htmlspecialchars($_REQUEST['subject']), "\" />\n";			if (isset($_REQUEST['query']))				echo "<input type=\"hidden\" name=\"query\" value=\"", htmlspecialchars($_REQUEST['query']), "\" />\n";			if (isset($_REQUEST['count']))				echo "<input type=\"hidden\" name=\"count\" value=\"", htmlspecialchars($_REQUEST['count']), "\" />\n";			if (isset($_REQUEST['return_url']))				echo "<input type=\"hidden\" name=\"return_url\" value=\"", htmlspecialchars($_REQUEST['return_url']), "\" />\n";			if (isset($_REQUEST['return_desc']))				echo "<input type=\"hidden\" name=\"return_desc\" value=\"", htmlspecialchars($_REQUEST['return_desc']), "\" />\n";			echo "<input type=\"hidden\" name=\"page\" value=\"", htmlspecialchars($_REQUEST['page']), "\" />\n";			echo "<input type=\"hidden\" name=\"sortkey\" value=\"", htmlspecialchars($_REQUEST['sortkey']), "\" />\n";			echo "<input type=\"hidden\" name=\"sortdir\" value=\"", htmlspecialchars($_REQUEST['sortdir']), "\" />\n";			echo "<input type=\"hidden\" name=\"strings\" value=\"", htmlspecialchars($_REQUEST['strings']), "\" />\n";			echo "<input type=\"hidden\" name=\"key\" value=\"", htmlspecialchars(serialize($_REQUEST['key'])), "\" />\n";			echo "<input type=\"submit\" name=\"yes\" value=\"{$lang['stryes']}\" />\n";			echo "<input type=\"submit\" name=\"no\" value=\"{$lang['strno']}\" />\n";			echo "</form>\n";		}		else {			$status = $data->deleteRow($_POST['table'], unserialize($_POST['key']));			if ($status == 0)				doBrowse($lang['strrowdeleted']);			elseif ($status == -2)				doBrowse($lang['strrownotunique']);			else							doBrowse($lang['strrowdeletedbad']);		}			}		/* build & return the FK information data structure 	 * used when deciding if a field should have a FK link or not*/	function &getFKInfo() {		global $data, $misc, $lang;		 		// Get the foreign key(s) information from the current table		$fkey_information = array('byconstr' => array(), 'byfield' => array());		if (isset($_REQUEST['table'])) {			$constraints = $data->getConstraintsWithFields($_REQUEST['table']);			if ($constraints->recordCount() > 0) {				/* build the common parts of the url for the FK  */				$fk_return_url = "{$misc->href}&amp;subject=table&amp;table=". urlencode($_REQUEST['table']);				if (isset($_REQUEST['page'])) $fk_return_url .= "&amp;page=" . urlencode($_REQUEST['page']);				if (isset($_REQUEST['query'])) $fk_return_url .= "&amp;query=" . urlencode($_REQUEST['query']);				if (isset($_REQUEST['search_path'])) $fk_return_url .= "&amp;search_path=" . urlencode($_REQUEST['search_path']);				/* yes, we double urlencode fk_return_url so parameters here don't 				 * overwrite real one when included in the final url */				$fkey_information['common_url'] = $misc->getHREF('schema') .'&amp;subject=table&amp;return_url=display.php?'					. urlencode($fk_return_url) .'&amp;return_desc='. urlencode($lang['strback']);				/* build the FK constraints data structure */				while (!$constraints->EOF) {					$constr =& $constraints->fields;					if ($constr['contype'] == 'f') {						if (!isset($fkey_information['byconstr'][$constr['conid']])) {							$fkey_information['byconstr'][$constr['conid']] = array (								'url_data' => 'table='. urlencode($constr['f_table']) .'&amp;schema='. urlencode($constr['f_schema']),								'fkeys' => array(),								'consrc' => $constr['consrc']							);						}						$fkey_information['byconstr'][$constr['conid']]['fkeys'][$constr['p_field']] = $constr['f_field'];						if (!isset($fkey_information['byfield'][$constr['p_field']]))							$fkey_information['byfield'][$constr['p_field']] = array();						$fkey_information['byfield'][$constr['p_field']][] = $constr['conid'];					}					$constraints->moveNext();				}			}		}		return $fkey_information;	}	/* Print table header cells 	 * @param $sortLink must be urlencoded already	 * */	function printTableHeaderCells(&$rs, $sortLink, $withOid) {		global $misc, $data, $conf;		$j = 0;		foreach ($rs->fields as $k => $v) {			if (($k === $data->id) && ( !($withOid && $conf['show_oids']) )) {				$j++;				continue;			}			$finfo = $rs->fetchField($j);			if ($sortLink === false) {				echo "<th class=\"data\">", $misc->printVal($finfo->name), "</th>\n";			}			else {				echo "<th class=\"data\"><a href=\"display.php?{$sortLink}&amp;sortkey=", ($j + 1), "&amp;sortdir=";				// Sort direction opposite to current direction, unless it's currently ''				echo ($_REQUEST['sortdir'] == 'asc' && $_REQUEST['sortkey'] == ($j + 1)) ? 'desc' : 'asc';				echo "&amp;strings=", urlencode($_REQUEST['strings']), 					"&amp;page=" . urlencode($_REQUEST['page']), "\">", 					$misc->printVal($finfo->name), "</a></th>\n";			}			$j++;		}		reset($rs->fields);	}	/* Print data-row cells */	function printTableRowCells(&$rs, &$fkey_information, $withOid) {		global $data, $misc, $conf;		$j = 0;				if (!isset($_REQUEST['strings'])) $_REQUEST['strings'] = 'collapsed';		foreach ($rs->fields as $k => $v) {			$finfo = $rs->fetchField($j++);			if (($k === $data->id) && ( !($withOid && $conf['show_oids']) )) continue;			elseif ($v !== null && $v == '') echo "<td>&nbsp;</td>";			else {				echo "<td style=\"white-space:nowrap;\">";				if (($v !== null) && isset($fkey_information['byfield'][$k])) {					foreach ($fkey_information['byfield'][$k] as $conid) {						$query_params = $fkey_information['byconstr'][$conid]['url_data'];						foreach ($fkey_information['byconstr'][$conid]['fkeys'] as $p_field => $f_field) {							$query_params .= '&amp;'. urlencode("fkey[{$f_field}]") .'='. urlencode($rs->fields[$p_field]);						}						/* $fkey_information['common_url'] is already urlencoded */						$query_params .= '&amp;'. $fkey_information['common_url'];						echo "<div style=\"display:inline-block;\">";						echo "<a class=\"fk fk_". htmlentities($conid) ."\" href=\"display.php?{$query_params}\">";						echo "<img src=\"".$misc->icon('ForeignKey')."\" style=\"vertical-align:middle;\" alt=\"[fk]\" title=\""							. htmlentities($fkey_information['byconstr'][$conid]['consrc'])							."\" />";						echo "</a>";						echo "</div>";					}					echo $misc->printVal($v, $finfo->type, array('null' => true, 'clip' => ($_REQUEST['strings']=='collapsed'), 'class' => 'fk_value'));				} else {					echo $misc->printVal($v, $finfo->type, array('null' => true, 'clip' => ($_REQUEST['strings']=='collapsed')));				}				echo "</td>";			}		}	}	/* Print the FK row, used in ajax requests */	function doBrowseFK() {		global $data, $misc, $lang;		$ops = array();		foreach($_REQUEST['fkey'] as $x => $y) {			$ops[$x] = '=';		}		$query = $data->getSelectSQL($_REQUEST['table'], array(), $_REQUEST['fkey'], $ops);		$_REQUEST['query'] = $query;		$fkinfo =& getFKInfo();		$max_pages = 1;		// Retrieve page from query.  $max_pages is returned by reference.		$rs = $data->browseQuery('SELECT', $_REQUEST['table'], $_REQUEST['query'],  			null, null, 1, 1, $max_pages);		echo "<a href=\"\" style=\"display:table-cell;\" class=\"fk_delete\"><img alt=\"[delete]\" src=\"". $misc->icon('Delete') ."\" /></a>\n";		echo "<div style=\"display:table-cell;\">";		if (is_object($rs) && $rs->recordCount() > 0) {			/* we are browsing a referenced table here			 * we should show OID if show_oids is true			 * so we give true to withOid in functions bellow			 * as 3rd paramter */					echo "<table><tr>";				printTableHeaderCells($rs, false, true);			echo "</tr>";			echo "<tr class=\"data1\">\n";				printTableRowCells($rs, $fkinfo, true);			echo "</tr>\n";			echo "</table>\n";		}		else			echo $lang['strnodata'];		echo "</div>";		exit;	}	/** 	 * Displays requested data	 */	function doBrowse($msg = '') {		global $data, $conf, $misc, $lang;		$save_history = false;		// If current page is not set, default to first page		if (!isset($_REQUEST['page']))			$_REQUEST['page'] = 1;		if (!isset($_REQUEST['nohistory']))			$save_history = true;				if (isset($_REQUEST['subject'])) {			$subject = $_REQUEST['subject'];			if (isset($_REQUEST[$subject])) $object = $_REQUEST[$subject];		}		else {			$subject = '';		}		$misc->printTrail(isset($subject) ? $subject : 'database');		/* This code is used when browsing FK in pure-xHTML (without js) */		if (isset($_REQUEST['fkey'])) {			$ops = array();			foreach($_REQUEST['fkey'] as $x => $y) {				$ops[$x] = '=';			}			$query = $data->getSelectSQL($_REQUEST['table'], array(), $_REQUEST['fkey'], $ops);			$_REQUEST['query'] = $query;		}				if (isset($object)) {			if (isset($_REQUEST['query'])) {				$_SESSION['sqlquery'] = $_REQUEST['query'];				$misc->printTitle($lang['strselect']);				$type = 'SELECT';			} else {				$misc->printTitle($lang['strbrowse']);				$type = 'TABLE';			}		} else {			$misc->printTitle($lang['strqueryresults']);			$type = 'QUERY';		}		$misc->printMsg($msg);		// If 'sortkey' is not set, default to ''		if (!isset($_REQUEST['sortkey'])) $_REQUEST['sortkey'] = '';		// If 'sortdir' is not set, default to ''		if (!isset($_REQUEST['sortdir'])) $_REQUEST['sortdir'] = '';			// If 'strings' is not set, default to collapsed 		if (!isset($_REQUEST['strings'])) $_REQUEST['strings'] = 'collapsed';			// Fetch unique row identifier, if this is a table browse request.		if (isset($object))			$key = $data->getRowIdentifier($object);		else			$key = array();				// Set the schema search path		if (isset($_REQUEST['search_path'])) {			if ($data->setSearchPath(array_map('trim',explode(',',$_REQUEST['search_path']))) != 0) {				return;			}		}		// Retrieve page from query.  $max_pages is returned by reference.		$rs = $data->browseQuery($type, 			isset($object) ? $object : null, 			isset($_REQUEST['query']) ? $_REQUEST['query'] : null, 			$_REQUEST['sortkey'], $_REQUEST['sortdir'], $_REQUEST['page'],			$conf['max_rows'], $max_pages);		$fkey_information =& getFKInfo();		// Build strings for GETs		$gets = $misc->href;		if (isset($object)) $gets .= "&amp;" . urlencode($subject) . '=' . urlencode($object);		if (isset($subject)) $gets .= "&amp;subject=" . urlencode($subject);		if (isset($_REQUEST['query'])) $gets .= "&amp;query=" . urlencode($_REQUEST['query']);		if (isset($_REQUEST['count'])) $gets .= "&amp;count=" . urlencode($_REQUEST['count']);		if (isset($_REQUEST['return_url'])) $gets .= "&amp;return_url=" . urlencode($_REQUEST['return_url']);		if (isset($_REQUEST['return_desc'])) $gets .= "&amp;return_desc=" . urlencode($_REQUEST['return_desc']);		if (isset($_REQUEST['search_path'])) $gets .= "&amp;search_path=" . urlencode($_REQUEST['search_path']);		if (isset($_REQUEST['table'])) $gets .= "&amp;table=" . urlencode($_REQUEST['table']);				// This string just contains sort info		$getsort = "sortkey=" . urlencode($_REQUEST['sortkey']) .			"&amp;sortdir=" . urlencode($_REQUEST['sortdir']);		if ($save_history && is_object($rs) && ($type == 'QUERY')) //{			$misc->saveScriptHistory($_REQUEST['query']);		if (is_object($rs) && $rs->recordCount() > 0) {			// Show page navigation			$misc->printPages($_REQUEST['page'], $max_pages, "display.php?page=%s&amp;{$gets}&amp;{$getsort}&amp;nohistory=t&amp;strings=" . urlencode($_REQUEST['strings']));			echo "<table id=\"data\">\n<tr>";			// Check that the key is actually in the result set.  This can occur for select			// operations where the key fields aren't part of the select.  XXX:  We should			// be able to support this, somehow.			foreach ($key as $v) {				// If a key column is not found in the record set, then we				// can't use the key.				if (!in_array($v, array_keys($rs->fields))) {					$key = array();					break;				}			}			// Display edit and delete actions if we have a key			if (sizeof($key) > 0)				echo "<th colspan=\"2\" class=\"data\">{$lang['stractions']}</th>\n";			/* we show OIDs only if we are in TABLE or SELECT type browsing */			printTableHeaderCells($rs, $gets, isset($object));			echo "</tr>\n";			$i = 0;					reset($rs->fields);			while (!$rs->EOF) {				$id = (($i % 2) == 0 ? '1' : '2');				echo "<tr class=\"data{$id}\">\n";				// Display edit and delete links if we have a key				if (sizeof($key) > 0) {					$key_str = '';					$has_nulls = false;					foreach ($key as $v) {						if ($rs->fields[$v] === null) {							$has_nulls = true;							break;						}						if ($key_str != '') $key_str .= '&amp;';						$key_str .= urlencode("key[{$v}]") . '=' . urlencode($rs->fields[$v]);					}					if ($has_nulls) {						echo "<td colspan=\"2\">&nbsp;</td>\n";					} else {						echo "<td class=\"opbutton{$id}\"><a href=\"display.php?action=confeditrow&amp;strings=", 							urlencode($_REQUEST['strings']), "&amp;page=", 							urlencode($_REQUEST['page']), "&amp;{$key_str}&amp;{$gets}&amp;{$getsort}\">{$lang['stredit']}</a></td>\n";						echo "<td class=\"opbutton{$id}\"><a href=\"display.php?action=confdelrow&amp;strings=", 							urlencode($_REQUEST['strings']), "&amp;page=", 							urlencode($_REQUEST['page']), "&amp;{$key_str}&amp;{$gets}&amp;{$getsort}\">{$lang['strdelete']}</a></td>\n";					}				}				print printTableRowCells($rs, $fkey_information, isset($object));				echo "</tr>\n";				$rs->moveNext();				$i++;			}			echo "</table>\n";			echo "<p>", $rs->recordCount(), " {$lang['strrows']}</p>\n";			// Show page navigation			$misc->printPages($_REQUEST['page'], $max_pages, "display.php?page=%s&amp;{$gets}&amp;{$getsort}&amp;strings=" . urlencode($_REQUEST['strings']));		}		else echo "<p>{$lang['strnodata']}</p>\n";		// Navigation links			echo "<ul class=\"navlink\">\n";		// Return		if (isset($_REQUEST['return_url']) && isset($_REQUEST['return_desc']))			echo "\t<li><a href=\"{$_REQUEST['return_url']}\">{$_REQUEST['return_desc']}</a></li>\n";		// Edit SQL link		if (isset($_REQUEST['query']))			echo "\t<li><a href=\"database.php?{$misc->href}&amp;action=sql&amp;paginate=on&amp;query=",				urlencode($_REQUEST['query']), "\">{$lang['streditsql']}</a></li>\n";		// Expand/Collapse		if ($_REQUEST['strings'] == 'expanded')			echo "\t<li><a href=\"display.php?{$gets}&amp;{$getsort}&amp;strings=collapsed&amp;page=", 				urlencode($_REQUEST['page']), "\">{$lang['strcollapse']}</a></li>\n";		else			echo "\t<li><a href=\"display.php?{$gets}&amp;{$getsort}&amp;strings=expanded&amp;page=", 				urlencode($_REQUEST['page']), "\">{$lang['strexpand']}</a></li>\n";		// Create report		if (isset($_REQUEST['query']) && ($subject !== 'report') && $conf['show_reports'] && isset($rs) && is_object($rs) && $rs->recordCount() > 0)			echo "\t<li><a href=\"reports.php?{$misc->href}&amp;action=create&amp;report_sql=",				urlencode($_REQUEST['query']), "&amp;paginate=", (isset($_REQUEST['paginate'])? urlencode($_REQUEST['paginate']):'f'), "\">{$lang['strcreatereport']}</a></li>\n";		// Create view and download		if (isset($_REQUEST['query']) && isset($rs) && is_object($rs) && $rs->recordCount() > 0) {			// Report views don't set a schema, so we need to disable create view in that case			if (isset($_REQUEST['schema'])) 				echo "\t<li><a href=\"views.php?action=create&amp;formDefinition=",					urlencode($_REQUEST['query']), "&amp;{$misc->href}\">{$lang['strcreateview']}</a></li>\n";			echo "\t<li><a href=\"dataexport.php?query=", urlencode($_REQUEST['query']);			if (isset($_REQUEST['search_path']))				echo "&amp;search_path=", urlencode($_REQUEST['search_path']);			echo "&amp;{$misc->href}\">{$lang['strdownload']}</a></li>\n";		}		// Insert		if (isset($object) && (isset($subject) && $subject == 'table'))			echo "\t<li><a href=\"tables.php?action=confinsertrow&amp;table=",				urlencode($object), "&amp;{$misc->href}\">{$lang['strinsert']}</a></li>\n";		// Refresh		echo "\t<li><a href=\"display.php?{$gets}&amp;{$getsort}&amp;strings=", urlencode($_REQUEST['strings']), 			"&amp;page=" . urlencode($_REQUEST['page']),			"\">{$lang['strrefresh']}</a></li>\n";		echo "</ul>\n";	}	/* shortcuts: this function exit the script for ajax purpose */	if ($action == 'dobrowsefk') {		doBrowseFK();	}	$scripts  = "<script src=\"libraries/js/jquery.js\" type=\"text/javascript\"></script>\n";	$scripts .= "<script src=\"js/display.js\" type=\"text/javascript\"></script>";	$scripts .= "<script type=\"text/javascript\">\n";	$scripts .= "var Display = {\n";	$scripts .= "errmsg: '". str_replace("'", "\'", $lang['strconnectionfail']) ."'\n";	$scripts .= "};\n";	$scripts .= "</script>\n";	// If a table is specified, then set the title differently	if (isset($_REQUEST['subject']) && isset($_REQUEST[$_REQUEST['subject']]))		$misc->printHeader($lang['strtables'], $scripts);	else			$misc->printHeader($lang['strqueryresults']);	$misc->printBody();	switch ($action) {		case 'editrow':			if (isset($_POST['save'])) doEditRow(false);			else doBrowse();			break;		case 'confeditrow':			doEditRow(true);			break;		case 'delrow':			if (isset($_POST['yes'])) doDelRow(false);			else doBrowse();			break;		case 'confdelrow':			doDelRow(true);			break;		default:			doBrowse();			break;	}	$misc->printFooter();?>
<?php	/**	 * Manage tablespaces in a database cluster	 *	 * $Id: tablespaces.php,v 1.16 2007/08/31 18:30:11 ioguix Exp $	 */	// Include application functions	include_once('./libraries/lib.inc.php');	$action = (isset($_REQUEST['action'])) ? $_REQUEST['action'] : '';	if (!isset($msg)) $msg = '';	/**	 * Function to allow altering of a tablespace	 */	function doAlter($msg = '') {		global $data, $misc;		global $lang;				$misc->printTrail('tablespace');		$misc->printTitle($lang['stralter'],'pg.tablespace.alter');		$misc->printMsg($msg);		// Fetch tablespace info				$tablespace = $data->getTablespace($_REQUEST['tablespace']);		// Fetch all users				$users = $data->getUsers();				if ($tablespace->recordCount() > 0) {						if (!isset($_POST['name'])) $_POST['name'] = $tablespace->fields['spcname'];			if (!isset($_POST['owner'])) $_POST['owner'] = $tablespace->fields['spcowner'];			if (!isset($_POST['comment'])) {				$_POST['comment'] = ($data->hasSharedComments()) ? $tablespace->fields['spccomment'] : '';			}						echo "<form action=\"tablespaces.php\" method=\"post\">\n";			echo $misc->form;			echo "<table>\n";			echo "<tr><th class=\"data left required\">{$lang['strname']}</th>\n";			echo "<td class=\"data1\">";			echo "<input name=\"name\" size=\"32\" maxlength=\"{$data->_maxNameLen}\" value=\"", 				htmlspecialchars($_POST['name']), "\" /></td></tr>\n";			echo "<tr><th class=\"data left required\">{$lang['strowner']}</th>\n";			echo "<td class=\"data1\"><select name=\"owner\">";			while (!$users->EOF) {				$uname = $users->fields['usename'];				echo "<option value=\"", htmlspecialchars($uname), "\"",					($uname == $_POST['owner']) ? ' selected="selected"' : '', ">", htmlspecialchars($uname), "</option>\n";				$users->moveNext();			}			echo "</select></td></tr>\n"; 			if ($data->hasSharedComments()){				echo "<tr><th class=\"data left\">{$lang['strcomment']}</th>\n";				echo "<td class=\"data1\">";				echo "<textarea rows=\"3\" cols=\"32\" name=\"comment\">",					htmlspecialchars($_POST['comment']), "</textarea></td></tr>\n";			}			echo "</table>\n";			echo "<p><input type=\"hidden\" name=\"action\" value=\"save_edit\" />\n";			echo "<input type=\"hidden\" name=\"tablespace\" value=\"", htmlspecialchars($_REQUEST['tablespace']), "\" />\n";			echo "<input type=\"submit\" name=\"alter\" value=\"{$lang['stralter']}\" />\n";			echo "<input type=\"submit\" name=\"cancel\" value=\"{$lang['strcancel']}\" /></p>\n";			echo "</form>\n";		}		else echo "<p>{$lang['strnodata']}</p>\n";	}	/** 	 * Function to save after altering a tablespace	 */	function doSaveAlter() {		global $data, $lang;		// Check data		if (trim($_POST['name']) == '')			doAlter($lang['strtablespaceneedsname']);		else {			$status = $data->alterTablespace($_POST['tablespace'], $_POST['name'], $_POST['owner'], $_POST['comment']);			if ($status == 0) {				// If tablespace has been renamed, need to change to the new name				if ($_POST['tablespace'] != $_POST['name']) {					// Jump them to the new table name					$_REQUEST['tablespace'] = $_POST['name'];				}				doDefault($lang['strtablespacealtered']);			}			else				doAlter($lang['strtablespacealteredbad']);		}	}	/**	 * Show confirmation of drop and perform actual drop	 */	function doDrop($confirm) {		global $data, $misc;		global $lang;		if ($confirm) {			$misc->printTrail('tablespace');			$misc->printTitle($lang['strdrop'],'pg.tablespace.drop');						echo "<p>", sprintf($lang['strconfdroptablespace'], $misc->printVal($_REQUEST['tablespace'])), "</p>\n";							echo "<form action=\"tablespaces.php\" method=\"post\">\n";			echo $misc->form;			echo "<input type=\"hidden\" name=\"action\" value=\"drop\" />\n";			echo "<input type=\"hidden\" name=\"tablespace\" value=\"", htmlspecialchars($_REQUEST['tablespace']), "\" />\n";			echo "<input type=\"submit\" name=\"drop\" value=\"{$lang['strdrop']}\" />\n";			echo "<input type=\"submit\" name=\"cancel\" value=\"{$lang['strcancel']}\" />\n";			echo "</form>\n";		}		else {			$status = $data->droptablespace($_REQUEST['tablespace']);			if ($status == 0)				doDefault($lang['strtablespacedropped']);			else				doDefault($lang['strtablespacedroppedbad']);		}			}		/**	 * Displays a screen where they can enter a new tablespace	 */	function doCreate($msg = '') {		global $data, $misc, $spcname;		global $lang;				$server_info = $misc->getServerInfo();				if (!isset($_POST['formSpcname'])) $_POST['formSpcname'] = '';		if (!isset($_POST['formOwner'])) $_POST['formOwner'] = $server_info['username'];		if (!isset($_POST['formLoc'])) $_POST['formLoc'] = '';		if (!isset($_POST['formComment'])) $_POST['formComment'] = '';		// Fetch all users		$users = $data->getUsers();				$misc->printTrail('server');		$misc->printTitle($lang['strcreatetablespace'],'pg.tablespace.create');		$misc->printMsg($msg);		echo "<form action=\"tablespaces.php\" method=\"post\">\n";		echo $misc->form;		echo "<table>\n";		echo "\t<tr>\n\t\t<th class=\"data left required\">{$lang['strname']}</th>\n";		echo "\t\t<td class=\"data1\"><input size=\"32\" name=\"formSpcname\" maxlength=\"{$data->_maxNameLen}\" value=\"", htmlspecialchars($_POST['formSpcname']), "\" /></td>\n\t</tr>\n";		echo "\t<tr>\n\t\t<th class=\"data left required\">{$lang['strowner']}</th>\n";		echo "\t\t<td class=\"data1\"><select name=\"formOwner\">\n";		while (!$users->EOF) {			$uname = $users->fields['usename'];			echo "\t\t\t<option value=\"", htmlspecialchars($uname), "\"",				($uname == $_POST['formOwner']) ? ' selected="selected"' : '', ">", htmlspecialchars($uname), "</option>\n";			$users->moveNext();		}		echo "\t\t</select></td>\n\t</tr>\n";						echo "\t<tr>\n\t\t<th class=\"data left required\">{$lang['strlocation']}</th>\n";		echo "\t\t<td class=\"data1\"><input size=\"32\" name=\"formLoc\" value=\"", htmlspecialchars($_POST['formLoc']), "\" /></td>\n\t</tr>\n";		// Comments (if available)		if ($data->hasSharedComments()) {			echo "\t<tr>\n\t\t<th class=\"data left\">{$lang['strcomment']}</th>\n";			echo "\t\t<td><textarea name=\"formComment\" rows=\"3\" cols=\"32\">", 				htmlspecialchars($_POST['formComment']), "</textarea></td>\n\t</tr>\n";		}		echo "</table>\n";		echo "<p><input type=\"hidden\" name=\"action\" value=\"save_create\" />\n";		echo "<input type=\"submit\" value=\"{$lang['strcreate']}\" />\n";		echo "<input type=\"submit\" name=\"cancel\" value=\"{$lang['strcancel']}\" /></p>\n";		echo "</form>\n";	}		/**	 * Actually creates the new tablespace in the cluster	 */	function doSaveCreate() {		global $data;		global $lang;		// Check data		if (trim($_POST['formSpcname']) == '')			doCreate($lang['strtablespaceneedsname']);		elseif (trim($_POST['formLoc']) == '')			doCreate($lang['strtablespaceneedsloc']);		else {			// Default comment to blank if it isn't set			if (!isset($_POST['formComment'])) $_POST['formComment'] = null;					$status = $data->createTablespace($_POST['formSpcname'], $_POST['formOwner'], $_POST['formLoc'], $_POST['formComment']);			if ($status == 0)				doDefault($lang['strtablespacecreated']);			else				doCreate($lang['strtablespacecreatedbad']);		}	}		/**	 * Show default list of tablespaces in the cluster	 */	function doDefault($msg = '') {		global $data, $misc;		global $lang;				$misc->printTrail('server');		$misc->printTabs('server','tablespaces');		$misc->printMsg($msg);				$tablespaces = $data->getTablespaces();		$columns = array(			'database' => array(				'title' => $lang['strname'],				'field' => field('spcname')			),			'owner' => array(				'title' => $lang['strowner'],				'field' => field('spcowner')			),			'location' => array(				'title' => $lang['strlocation'],				'field' => field('spclocation')			),			'actions' => array(				'title' => $lang['stractions']			)		);		if ($data->hasSharedComments()) {			$columns['comment'] = array(				'title' => $lang['strcomment'],				'field' => field('spccomment'),			);		}				$actions = array(			'alter' => array(				'title' => $lang['stralter'],				'url'   => "tablespaces.php?action=edit&amp;{$misc->href}&amp;",				'vars'  => array('tablespace' => 'spcname')			),			'drop' => array(				'title' => $lang['strdrop'],				'url'   => "tablespaces.php?action=confirm_drop&amp;{$misc->href}&amp;",				'vars'  => array('tablespace' => 'spcname')			),			'privileges' => array(				'title' => $lang['strprivileges'],				'url'   => "privileges.php?subject=tablespace&amp;{$misc->href}&amp;",				'vars'  => array('tablespace' => 'spcname')			)		);						$misc->printTable($tablespaces, $columns, $actions, $lang['strnotablespaces']);				echo "<p><a class=\"navlink\" href=\"tablespaces.php?action=create&amp;{$misc->href}\">{$lang['strcreatetablespace']}</a></p>\n";	}	$misc->printHeader($lang['strtablespaces']);	$misc->printBody();	switch ($action) {		case 'save_create':			if (isset($_REQUEST['cancel'])) doDefault();			else doSaveCreate();			break;		case 'create':						doCreate();			break;		case 'drop':			if (isset($_REQUEST['cancel'])) doDefault();			else doDrop(false);			break;		case 'confirm_drop':			doDrop(true);			break;		case 'save_edit':			if (isset($_REQUEST['cancel'])) doDefault();			else doSaveAlter();			break;		case 'edit':			doAlter();			break;		default:			doDefault();			break;	}		$misc->printFooter();?>
<?php	/**	 * German language file for phpPgAdmin.  Use this as a basis	 *	 * @maintainer Laurenz Albe <laurenz.albe@wien.gv.at>	 *     * $Id: german.php,v 1.30 2008/02/18 23:06:51 ioguix Exp $	 */	// Language and character set	$lang['applang'] = 'Deutsch';	$lang['appcharset'] = 'UTF-8';	$lang['applocale'] = 'de_DE';	$lang['appdbencoding'] = 'LATIN1';	$lang['applangdir'] = 'ltr';	// Welcome	$lang['strintro'] = 'Willkommen bei phpPgAdmin.';	$lang['strppahome'] = 'phpPgAdmin Homepage';	$lang['strpgsqlhome'] = 'PostgreSQL Homepage';	$lang['strpgsqlhome_url'] = 'http://www.postgresql.org/';	$lang['strlocaldocs'] = 'PostgreSQL Dokumentation (lokal)';	$lang['strreportbug'] = 'Fehler melden';	$lang['strviewfaq'] = 'Online-FAQ ansehen';	$lang['strviewfaq_url'] = 'http://phppgadmin.sourceforge.net/?page=faq';		// Basic strings	$lang['strlogin'] = 'Anmelden';	$lang['strloginfailed'] = 'Anmeldung fehlgeschlagen';	$lang['strlogindisallowed'] = 'Anmeldung aus Sicherheitsgründen verweigert.';	$lang['strserver'] = 'Server';	$lang['strservers'] = 'Server';	$lang['strintroduction'] = 'Einführung';	$lang['strhost'] = 'Host';	$lang['strport'] = 'Port';	$lang['strlogout'] = 'Abmelden';	$lang['strowner'] = 'Besitzer';	$lang['straction'] = 'Aktion';	$lang['stractions'] = 'Aktionen';	$lang['strname'] = 'Name';	$lang['strdefinition'] = 'Definition';	$lang['strproperties'] = 'Eigenschaften';	$lang['strbrowse'] = 'Durchsuchen';	$lang['strenable'] = 'Einschalten';	$lang['strdisable'] = 'Ausschalten';	$lang['strdrop'] = 'Löschen';	$lang['strdropped'] = 'Gelöscht';	$lang['strnull'] = 'Null';	$lang['strnotnull'] = 'Nicht Null';	$lang['strprev'] = '< Zurück';	$lang['strnext'] = 'Weiter >';	$lang['strfirst'] = '<< Anfang';	$lang['strlast'] = 'Ende >>';	$lang['strfailed'] = 'Fehlgeschlagen';	$lang['strcreate'] = 'Erstellen';	$lang['strcreated'] = 'Erstellt';	$lang['strcomment'] = 'Kommentar';	$lang['strlength'] = 'Länge';	$lang['strdefault'] = 'Standardwert';	$lang['stralter'] = 'Ändern';	$lang['strok'] = 'OK';	$lang['strcancel'] = 'Abbrechen';	$lang['strac'] = 'Automatische Vervollständigung einschalten';	$lang['strsave'] = 'Speichern';	$lang['strreset'] = 'Zurücksetzen';	$lang['strinsert'] = 'Einfügen';	$lang['strselect'] = 'Abfrage';	$lang['strdelete'] = 'Löschen';	$lang['strupdate'] = 'Ändern';	$lang['strreferences'] = 'Verweise';	$lang['stryes'] = 'Ja';	$lang['strno'] = 'Nein';	$lang['strtrue'] = 'WAHR';	$lang['strfalse'] = 'FALSCH';	$lang['stredit'] = 'Bearbeiten';	$lang['strcolumn'] = 'Spalte';	$lang['strcolumns'] = 'Spalten';	$lang['strrows'] = 'Datensätze';	$lang['strrowsaff'] = 'Datensätze betroffen.';	$lang['strobjects'] = 'Objekt(e)';	$lang['strback'] = 'Zurück';	$lang['strqueryresults'] = 'Abfrageergebnis';	$lang['strshow'] = 'Anzeigen';	$lang['strempty'] = 'Leeren';	$lang['strlanguage'] = 'Sprache';	$lang['strencoding'] = 'Zeichenkodierung';	$lang['strvalue'] = 'Wert';	$lang['strunique'] = 'Eindeutig';	$lang['strprimary'] = 'Primär';	$lang['strexport'] = 'Exportieren';	$lang['strimport'] = 'Importieren';	$lang['strallowednulls'] = 'NULL-Zeichen erlaubt';	$lang['strbackslashn'] = '\N';	$lang['stremptystring'] = 'Leere Zeichenkette / Leere Spalte';	$lang['strsql'] = 'SQL';	$lang['stradmin'] = 'Admin';	$lang['strvacuum'] = 'Bereinigen';	$lang['stranalyze'] = 'Analysieren';	$lang['strclusterindex'] = 'Cluster';	$lang['strclustered'] = 'Geclustert?';	$lang['strreindex'] = 'Reindexieren';	$lang['strexecute'] = 'Ausführen';	$lang['stradd'] = 'Hinzufügen';	$lang['strevent'] = 'Ereignis';	$lang['strwhere'] = 'Bedingung';	$lang['strinstead'] = 'Tu stattdessen';	$lang['strwhen'] = 'Wann';	$lang['strformat'] = 'Format';	$lang['strdata'] = 'Daten';	$lang['strconfirm'] = 'Bestätigen';	$lang['strexpression'] = 'Ausdruck';	$lang['strellipsis'] = '...';	$lang['strseparator'] = ': ';	$lang['strexpand'] = 'Aufklappen';	$lang['strcollapse'] = 'Zuklappen';	$lang['strfind'] = 'Suchen';	$lang['stroptions'] = 'Optionen';	$lang['strrefresh'] = 'Aktualisieren';	$lang['strdownload'] = 'Herunterladen';	$lang['strdownloadgzipped'] = 'gzip-komprimiert herunterladen';	$lang['strinfo'] = 'Info';	$lang['stroids'] = 'OIDs';	$lang['stradvanced'] = 'Erweitert';	$lang['strvariables'] = 'Variable';	$lang['strprocess'] = 'Prozess';	$lang['strprocesses'] = 'Prozesse';	$lang['strsetting'] = 'Einstellung';	$lang['streditsql'] = 'SQL bearbeiten';	$lang['strruntime'] = 'Laufzeit gesamt: %s ms';	$lang['strpaginate'] = 'Ergebnisse seitenweise anzeigen';	$lang['struploadscript'] = 'oder laden Sie ein SQL-Script hoch:';	$lang['strstarttime'] = 'Beginnzeitpunkt';	$lang['strfile'] = 'Datei';	$lang['strfileimported'] = 'Datei importiert.';	$lang['strtrycred'] = 'Diese Anmeldedaten für alle Server verwenden';	$lang['strconfdropcred']  = 'Aus Sicherheitsgründen werden gemeinsamme Anmeldedaten beim Abmelden gelöscht. Sind Sie sicher, dass sie sich abmelden wollen?';	$lang['stractionsonmultiplelines'] = 'Mehrzeilige Aktionen';	$lang['strselectall'] = 'Alle auswählen';	$lang['strunselectall'] = 'Alle abwählen';	$lang['strlocale'] = 'Spracheinstellung';	// User-supplied SQL history	$lang['strhistory'] = 'Befehlsspeicher';	$lang['strnohistory'] = 'Kein Befehlsspeicher.';	$lang['strclearhistory'] = 'Befehlsspeicher löschen';	$lang['strdelhistory'] = 'Aus dem Befehlsspeicher löschen';	$lang['strconfdelhistory'] = 'Diese Abfrage wirklich aus dem Befehlsspeicher löschen?';	$lang['strconfclearhistory'] = 'Befehlsspeicher wirklich löschen?';	$lang['strnodatabaseselected'] = 'Bitte wählen Sie eine Datenbank aus.';	// Database sizes	$lang['strsize'] = 'Größe';	$lang['strbytes'] = 'Bytes';	$lang['strkb'] = 'kB';	$lang['strmb'] = 'MB';	$lang['strgb'] = 'GB';	$lang['strtb'] = 'TB';	// Error handling	$lang['strnoframes'] = 'Diese Anwendung funktioniert am besten mit einem Browser, der Frames beherrscht, kann aber mit dem untenstehenden Link auch ohne Frames verwendet werden.';	$lang['strnoframeslink'] = 'Ohne Frames arbeiten';	$lang['strbadconfig'] = 'Ihre config.inc.php ist nicht aktuell. Sie müssen sie aus der config.inc.php-dist neu erzeugen.';	$lang['strnotloaded'] = 'Ihre PHP-Installation unterstützt PostgreSQL nicht. Sie müssen PHP unter Verwendung der Konfigurationsoption --with-pgsql neu kompilieren.';	$lang['strpostgresqlversionnotsupported'] = 'Ihre PostgreSQL-Version wird nicht unterstützt. Bitte stellen Sie Ihre Datenbank auf Version %s oder eine neuere Version um.';	$lang['strbadschema'] = 'Ungültiges Schema angegeben.';	$lang['strbadencoding'] = 'Kann die Client-Zeichenkodierung nicht in der Datenbank setzen.';	$lang['strsqlerror'] = 'SQL-Fehler:';	$lang['strinstatement'] = 'In der Anweisung:';	$lang['strinvalidparam'] = 'Unzulässige Script-Parameter.';	$lang['strnodata'] = 'Keine Datensätze gefunden.';	$lang['strnoobjects'] = 'Keine Objekte gefunden.';	$lang['strrownotunique'] = 'Dieser Datensatz hat keine eindeutige Spalte.';	$lang['strnoreportsdb'] = 'Sie haben die Berichtsdatenbank nicht angelegt. In der Datei INSTALL finden Sie Anweisungen dafür.';	$lang['strnouploads'] = 'Das Hochladen von Dateien ist ausgeschaltet.';	$lang['strimporterror'] = 'Importfehler.';	$lang['strimporterror-fileformat'] = 'Importfehler: Dateiformat konnte nicht automatisch bestimmt werden.';	$lang['strimporterrorline'] = 'Importfehler in Zeile %s.';	$lang['strimporterrorline-badcolumnnum'] = 'Importfehler in Zeile %s: die Zeile hat nicht die richtige Anzahl von Spalten.';	$lang['strimporterror-uploadedfile'] = 'Importfehler: die Datei konnte nicht auf den Server geladen werden';	$lang['strcannotdumponwindows'] = 'Das Ablegen von komplizierten Tabellen- und Schemanamen wird auf Windows nicht unterstützt.';	$lang['strinvalidserverparam'] = 'Es wurde versucht, mit einem ungültigen Server-Parameter eine Verbindung herzustellen. Möglicherweise versucht jemand, in Ihr System einzubrechen.'; 	$lang['strnoserversupplied'] = 'Kein Server angegeben!';	// Tables	$lang['strtable'] = 'Tabelle';	$lang['strtables'] = 'Tabellen';	$lang['strshowalltables'] = 'Alle Tabellen anzeigen';	$lang['strnotables'] = 'Keine Tabellen gefunden.';	$lang['strnotable'] = 'Keine Tabelle gefunden.';	$lang['strcreatetable'] = 'Neue Tabelle erstellen';	$lang['strcreatetablelike'] = 'Neue Tabelle als Kopie einer bestehenden anlegen';	$lang['strcreatetablelikeparent'] = 'Ursprüngliche Tabelle';	$lang['strcreatelikewithdefaults'] = 'DEFAULT-Werte mitkopieren';	$lang['strcreatelikewithconstraints'] = 'Constraints mitkopieren';	$lang['strcreatelikewithindexes'] = 'Indizes mitkopieren';	$lang['strtablename'] = 'Tabellenname';	$lang['strtableneedsname'] = 'Sie müssen für die Tabelle einen Namen angeben.';	$lang['strtablelikeneedslike'] = 'Sie müssen eine Tabelle angeben, deren Spaltendefinitionen kopiert werden sollen.';	$lang['strtableneedsfield'] = 'Sie müssen mindestens eine Spalte angeben.';	$lang['strtableneedscols'] = 'Sie müssen eine zulässige Anzahl von Spalten angeben.';	$lang['strtablecreated'] = 'Tabelle erstellt.';	$lang['strtablecreatedbad'] = 'Erstellen der Tabelle fehlgeschlagen.';	$lang['strconfdroptable'] = 'Sind Sie sicher, dass Sie die Tabelle "%s" löschen möchten?';	$lang['strtabledropped'] = 'Tabelle gelöscht.';	$lang['strtabledroppedbad'] = 'Löschen der Tabelle fehlgeschlagen.';	$lang['strconfemptytable'] = 'Sind Sie sicher, dass Sie den Inhalt der Tabelle "%s" löschen möchten?';	$lang['strtableemptied'] = 'Tabelleninhalt gelöscht.';	$lang['strtableemptiedbad'] = 'Löschen des Tabelleninhaltes fehlgeschlagen.';	$lang['strinsertrow'] = 'Datensatz einfügen';	$lang['strrowinserted'] = 'Datensatz eingefügt.';	$lang['strrowinsertedbad'] = 'Einfügen des Datensatzes fehlgeschlagen.';	$lang['strrowduplicate'] = 'Einfügen des Datensatzes fehlgeschlagen: es wurde versucht, ein Duplikat einzufügen.';	$lang['streditrow'] = 'Datensatz bearbeiten';	$lang['strrowupdated'] = 'Datensatz geändert.';	$lang['strrowupdatedbad'] = 'Ändern des Datensatzes fehlgeschlagen.';	$lang['strdeleterow'] = 'Datensatz löschen';	$lang['strconfdeleterow'] = 'Sind Sie sicher, dass Sie diesen Datensatz löschen möchten?';	$lang['strrowdeleted'] = 'Datensatz gelöscht.';	$lang['strrowdeletedbad'] = 'Löschen des Datensatzes fehlgeschlagen.';	$lang['strinsertandrepeat'] = 'Einfügen und Wiederholen';	$lang['strnumcols'] = 'Anzahl der Spalten';	$lang['strcolneedsname'] = 'Sie müssen einen Namen für die Spalte angeben';	$lang['strselectallfields'] = 'Alle Felder auswählen';	$lang['strselectneedscol'] = 'Sie müssen mindestens eine Spalte anzeigen lassen.';	$lang['strselectunary'] = 'Unäre Operatoren können keine Werte haben.';	$lang['strcolumnaltered'] = 'Spalte geändert.';	$lang['strcolumnalteredbad'] = 'Ändern der Spalte fehlgeschlagen.';	$lang['strconfdropcolumn'] = 'Sind Sie sicher, dass Sie die Spalte "%s" aus der Tabelle "%s" löschen möchten?';	$lang['strcolumndropped'] = 'Spalte gelöscht.';	$lang['strcolumndroppedbad'] = 'Löschen der Spalte fehlgschlagen.';	$lang['straddcolumn'] = 'Spalte hinzufügen';	$lang['strcolumnadded'] = 'Spalte hinzugefügt.';	$lang['strcolumnaddedbad'] = 'Hinzufügen der Spalte fehlgeschlagen.';	$lang['strcascade'] = 'CASCADE';	$lang['strtablealtered'] = 'Tabelle geändert.';	$lang['strtablealteredbad'] = 'Ändern der Tabelle fehlgeschlagen.';	$lang['strdataonly'] = 'Nur die Daten';	$lang['strstructureonly'] = 'Nur die Struktur';	$lang['strstructureanddata'] = 'Struktur und Daten';	$lang['strtabbed'] = 'Mit Tabluatoren';	$lang['strauto'] = 'Automatisch';	$lang['strconfvacuumtable'] = 'Sind sie sicher, dass Sie VACUUM auf "%s" ausführen wollen?';	$lang['strconfanalyzetable'] = 'Sind sie sicher, dass Sie ANALYZE auf "%s" ausführen wollen?';	$lang['strestimatedrowcount'] = 'Geschätzte Anzahl von Datensätzen';	$lang['strspecifytabletoanalyze'] = 'Sie müssen mindestens eine Tabelle angeben, die analysiert werden soll.';	$lang['strspecifytabletoempty'] = 'Sie müssen mindestens eine Tabelle angeben, deren Inhalt gelöscht werden soll.';	$lang['strspecifytabletodrop'] = 'Sie müssen mindestens eine Tabelle angeben, die gelöscht werden soll.';	$lang['strspecifytabletovacuum'] = 'Sie müssen mindestens eine Tabelle angeben, die bereinigt werden soll.';	// Columns	$lang['strcolprop'] = 'Spalteneigenschaften';	$lang['strnotableprovided'] = 'Keine Tabelle angegeben!';			// Users	$lang['struser'] = 'Benutzer';	$lang['strusers'] = 'Benutzer';	$lang['strusername'] = 'Benutzername';	$lang['strpassword'] = 'Passwort';	$lang['strsuper'] = 'Superuser?';	$lang['strcreatedb'] = 'Datenbank erstellen?';	$lang['strexpires'] = 'Gültig bis';	$lang['strsessiondefaults'] = 'Standardwerte für Datenbanksitzungen';	$lang['strnousers'] = 'Keine Benutzer gefunden.';	$lang['struserupdated'] = 'Benutzer geändert.';	$lang['struserupdatedbad'] = 'Ändern des Benutzers fehlgeschlagen.';	$lang['strshowallusers'] = 'Alle Benutzer anzeigen';	$lang['strcreateuser'] = 'Benutzer anlegen';	$lang['struserneedsname'] = 'Sie müssen einen Namen für den Benutzer angeben.';	$lang['strusercreated'] = 'Benutzer angelegt.';	$lang['strusercreatedbad'] = 'Anlegen des Benutzers fehlgeschlagen.';	$lang['strconfdropuser'] = 'Sind Sie sicher, dass Sie den Benutzer "%s" löschen möchten?';	$lang['struserdropped'] = 'Benutzer gelöscht.';	$lang['struserdroppedbad'] = 'Löschen des Benutzers fehlgeschlagen.';	$lang['straccount'] = 'Benutzerkonto';	$lang['strchangepassword'] = 'Passwort ändern';	$lang['strpasswordchanged'] = 'Passwort geändert.';	$lang['strpasswordchangedbad'] = 'Ändern des Passwortes fehlgeschlagen.';	$lang['strpasswordshort'] = 'Passwort ist zu kurz.';	$lang['strpasswordconfirm'] = 'Passwort und Passwortbestätigung stimmen nicht überein.';		// Groups	$lang['strgroup'] = 'Gruppe';	$lang['strgroups'] = 'Gruppen';	$lang['strshowallgroups'] = 'Alle Gruppen anzeigen';	$lang['strnogroup'] = 'Gruppe nicht gefunden.';	$lang['strnogroups'] = 'Keine Gruppe gefunden.';	$lang['strcreategroup'] = 'Gruppe anlegen';	$lang['strgroupneedsname'] = 'Sie müssen für die Gruppe einen Namen angeben.';	$lang['strgroupcreated'] = 'Gruppe angelegt.';	$lang['strgroupcreatedbad'] = 'Anlegen der Gruppe fehlgeschlagen.';		$lang['strconfdropgroup'] = 'Sind Sie sicher, dass Sie die Gruppe "%s" löschen möchten?';	$lang['strgroupdropped'] = 'Gruppe gelöscht.';	$lang['strgroupdroppedbad'] = 'Löschen der Gruppe fehlgeschlagen.';	$lang['strmembers'] = 'Mitglieder';	$lang['strmemberof'] = 'Mitglied von';	$lang['stradminmembers'] = 'Administrative Mitglieder';	$lang['straddmember'] = 'Mitglied hinzufügen';	$lang['strmemberadded'] = 'Mitglied hinzugefügt.';	$lang['strmemberaddedbad'] = 'Hinzufügen des Mitglieds fehlgeschlagen.';	$lang['strdropmember'] = 'Mitglied löschen';	$lang['strconfdropmember'] = 'Sind Sie sicher, dass Sie das Mitglied "%s" aus der Gruppe "%s" löschen wollen?';	$lang['strmemberdropped'] = 'Mitglied gelöscht.';	$lang['strmemberdroppedbad'] = 'Löschen des Mitglieds fehlgeschlagen.';	// Roles	$lang['strrole'] = 'Rolle';	$lang['strroles'] = 'Rollen';	$lang['strshowallroles'] = 'Alle Rollen anzeigen';	$lang['strnoroles'] = 'Keine Rollen gefunden.';	$lang['strinheritsprivs'] = 'Rechte vererben?';	$lang['strcreaterole'] = 'Rolle anlegen';	$lang['strcancreaterole'] = 'Darf Rollen anlegen?';	$lang['strrolecreated'] = 'Rolle angelegt.';	$lang['strrolecreatedbad'] = 'Anlegen der Rolle fehlgeschlagen.';	$lang['strrolealtered'] = 'Rolle geändert.';	$lang['strrolealteredbad'] = 'Ändern der Rolle fehlgeschlagen.';	$lang['strcanlogin'] = 'Darf sich anmelden?';	$lang['strconnlimit'] = 'Maximalzahl an Datenbankverbindungen';	$lang['strdroprole'] = 'Rolle löschen';	$lang['strconfdroprole'] = 'Sind Sie sicher, dass Sie die Rolle "%s" löschen möchten?';	$lang['strroledropped'] = 'Rolle gelöscht.';	$lang['strroledroppedbad'] = 'Löschen der Rolle fehlgeschlagen.';	$lang['strnolimit'] = 'Unbeschränkt';	$lang['strnever'] = 'Nie';	$lang['strroleneedsname'] = 'Sie müssen für die Rolle einen Namen angeben.';	// Privileges	$lang['strprivilege'] = 'Recht';	$lang['strprivileges'] = 'Rechte';	$lang['strnoprivileges'] = 'Für dieses Objekt gelten die Standard-Eigentümerrechte.';	$lang['strgrant'] = 'Rechte erteilen';	$lang['strrevoke'] = 'Rechte entziehen';	$lang['strgranted'] = 'Rechte geändert.';	$lang['strgrantfailed'] = 'Ändern der Rechte fehlgeschlagen.';	$lang['strgrantbad'] = 'Sie müssen mindestens einen Benutzer oder eine Gruppe und mindestens ein Recht angeben.';	$lang['strgrantor'] = 'Recht vergeben von';	$lang['strasterisk'] = '*';	// Databases	$lang['strdatabase'] = 'Datenbank';	$lang['strdatabases'] = 'Datenbanken';	$lang['strshowalldatabases'] = 'Alle Datenbanken anzeigen';	$lang['strnodatabases'] = 'Keine Datenbanken gefunden.';	$lang['strcreatedatabase'] = 'Datenbank erstellen';	$lang['strdatabasename'] = 'Datenbankname';	$lang['strdatabaseneedsname'] = 'Sie müssen für die Datenbank einen Namen angeben.';	$lang['strdatabasecreated'] = 'Datenbank erstellt.';	$lang['strdatabasecreatedbad'] = 'Erstellen der Datenbank fehlgeschlagen.';	$lang['strconfdropdatabase'] = 'Sind Sie sicher, dass Sie die Datenbank "%s" löschen möchten?';	$lang['strdatabasedropped'] = 'Datenbank gelöscht.';	$lang['strdatabasedroppedbad'] = 'Löschen der Datenbank fehlgeschlagen.';	$lang['strentersql'] = 'Auszuführende SQL-Anweisungen hier eingeben:';	$lang['strsqlexecuted'] = 'SQL-Anweisungen ausgeführt.';	$lang['strvacuumgood'] = 'Tabellenbereinigung abgeschlossen.';	$lang['strvacuumbad'] = 'Tabellenbereinigung fehlgeschlagen.';	$lang['stranalyzegood'] = 'Analyse abgeschlossen.';	$lang['stranalyzebad'] = 'Analyse fehlgeschlagen.';	$lang['strreindexgood'] = 'Neuindexierung abgeschlossen.';	$lang['strreindexbad'] = 'Neuindexierung fehlgeschlagen.';	$lang['strfull'] = 'Mit Reorganisation';	$lang['strfreeze'] = 'Aggressives "Einfrieren"';	$lang['strforce'] = 'Erzwingen';	$lang['strsignalsent'] = 'Signal gesendet.';	$lang['strsignalsentbad'] = 'Senden des Signales fehlgeschlagen.';	$lang['strallobjects'] = 'Alle Objekte';	$lang['strdatabasealtered'] = 'Datenbank geändert.';	$lang['strdatabasealteredbad'] = 'Ändern der Datenbank fehlgeschlagen.';	$lang['strspecifydatabasetodrop'] = 'Sie müssen mindestens eine Datenbank angeben, die gelöscht werden soll.';	// Views	$lang['strview'] = 'Sicht';	$lang['strviews'] = 'Sichten';	$lang['strshowallviews'] = 'Alle Sichten anzeigen';	$lang['strnoview'] = 'Keine Sicht gefunden.';	$lang['strnoviews'] = 'Keine Sichten gefunden.';	$lang['strcreateview'] = 'Sicht erstellen';	$lang['strviewname'] = 'Name der Sicht';	$lang['strviewneedsname'] = 'Sie müssen für die Sicht einen Namen angeben.';	$lang['strviewneedsdef'] = 'Sie müssen für die Sicht eine Definition angeben.';	$lang['strviewneedsfields'] = 'Sie müssen die Spalten angeben, die sie in der Sicht haben wollen.';	$lang['strviewcreated'] = 'Sicht erstellt.';	$lang['strviewcreatedbad'] = 'Erstellen der Sicht fehlgeschlagen.';	$lang['strconfdropview'] = 'Sind Sie sicher, dass Sie die Sicht "%s" löschen möchten?';	$lang['strviewdropped'] = 'Sicht gelöscht.';	$lang['strviewdroppedbad'] = 'Löschen der Sicht fehlgeschlagen.';	$lang['strviewupdated'] = 'Sicht geändert.';	$lang['strviewupdatedbad'] = 'Ändern der Sicht fehlgeschlagen.';	$lang['strviewlink'] = 'Verbindende Schlüssel';	$lang['strviewconditions'] = 'Zusätzliche Bedingungen';	$lang['strcreateviewwiz'] = 'Sicht mit dem Assistenten erstellen';	$lang['strrenamedupfields'] = 'Doppelte Spalten umbenennen';	$lang['strdropdupfields'] = 'Doppelte Spalten entfernen';	$lang['strerrordupfields'] = 'Fehler bei den doppelten Spalten';	$lang['strviewaltered'] = 'Sicht geändert.';	$lang['strviewalteredbad'] = 'Ändern der Sicht fehlgeschlagen.';	$lang['strspecifyviewtodrop'] = 'Sie müssen mindestens eine Sicht angeben, die gelöscht werden soll.';	// Sequences	$lang['strsequence'] = 'Sequenz';	$lang['strsequences'] = 'Sequenzen';	$lang['strshowallsequences'] = 'Alle Sequenzen anzeigen';	$lang['strnosequence'] = 'Keine Sequenz gefunden.';	$lang['strnosequences'] = 'Keine Sequenzen gefunden.';	$lang['strcreatesequence'] = 'Sequenz erstellen';	$lang['strlastvalue'] = 'Letzter Wert';	$lang['strincrementby'] = 'Erhöhen um';		$lang['strstartvalue'] = 'Startwert';	$lang['strmaxvalue'] = 'Maximalwert';	$lang['strminvalue'] = 'Minimalwert';	$lang['strcachevalue'] = 'Anzahl Werte im Cache';	$lang['strlogcount'] = 'WAL-Zähler (log_cnt)';	$lang['strcancycle'] = 'Zyklisch?';	$lang['striscalled'] = 'Wird erhöht werden, wenn der nächste Wert angefordert wird (is_called)?';	$lang['strsequenceneedsname'] = 'Sie müssen für die Sequenz einen Namen angeben.';	$lang['strsequencecreated'] = 'Sequenz erstellt.';	$lang['strsequencecreatedbad'] = 'Erstellen der Sequenz fehlgeschlagen.';	$lang['strconfdropsequence'] = 'Sind Sie sicher, dass die die Sequenz "%s" löschen möchten?';	$lang['strsequencedropped'] = 'Sequenz gelöscht.';	$lang['strsequencedroppedbad'] = 'Löschen der Sequenz fehlgeschlagen.';	$lang['strsequencereset'] = 'Sequenz zurückgesetzt.';	$lang['strsequenceresetbad'] = 'Rücksetzen der Sequenz fehlgeschlagen.'; 	$lang['strsequencealtered'] = 'Sequenz geändert.'; 	$lang['strsequencealteredbad'] = 'Ändern der Sequenz fehlgeschlagen.'; 	$lang['strsetval'] = 'Wert setzen'; 	$lang['strsequencesetval'] = 'Sequenzwert gesetzt.'; 	$lang['strsequencesetvalbad'] = 'Setzen des Sequenzwertes fehlgeschlagen.'; 	$lang['strnextval'] = 'Wert erhöhen'; 	$lang['strsequencenextval'] = 'Sequenzwert erhöht.'; 	$lang['strsequencenextvalbad'] = 'Erhöhen des Sequenzwertes fehlgeschlagen.';	$lang['strspecifysequencetodrop'] = 'Sie müssen mindestens eine Sequenz angeben, die gelöscht werden soll.';		// Indexes	$lang['strindex'] = 'Index';	$lang['strindexes'] = 'Indizes';	$lang['strindexname'] = 'Indexname';	$lang['strshowallindexes'] = 'Alle Indizes anzeigen';	$lang['strnoindex'] = 'Kein Index gefunden.';	$lang['strnoindexes'] = 'Keine Indizes gefunden.';	$lang['strcreateindex'] = 'Index erstellen';	$lang['strtabname'] = 'Tabellenname';	$lang['strcolumnname'] = 'Spaltenname';	$lang['strindexneedsname'] = 'Sie müssen für den Index einen Namen angeben.';	$lang['strindexneedscols'] = 'Sie müssen eine zulässige Anzahl an Spalten angeben.';	$lang['strindexcreated'] = 'Index erstellt.';	$lang['strindexcreatedbad'] = 'Erstellen des Index fehlgeschlagen.';	$lang['strconfdropindex'] = 'Sind Sie sicher, dass sie den Index "%s" löschen möchten?';	$lang['strindexdropped'] = 'Index gelöscht.';	$lang['strindexdroppedbad'] = 'Löschen des Index fehlgeschlagen.';	$lang['strkeyname'] = 'Schlüsselname';	$lang['struniquekey'] = 'Eindeutiger Schlüssel';	$lang['strprimarykey'] = 'Primärerschlüssel'; 	$lang['strindextype'] = 'Typ des Index';	$lang['strtablecolumnlist'] = 'Spalten in der Tabelle';	$lang['strindexcolumnlist'] = 'Spalten im Index';	$lang['strconfcluster'] = 'Sind Sie sicher, dass Sie "%s" clustern wollen?';	$lang['strclusteredgood'] = 'Clustern abgeschlossen.';	$lang['strclusteredbad'] = 'Clustern fehlgeschlagen.';	// Rules	$lang['strrules'] = 'Regeln';	$lang['strrule'] = 'Regel';	$lang['strshowallrules'] = 'Alle Regeln anzeigen';	$lang['strnorule'] = 'Keine Regel gefunden.';	$lang['strnorules'] = 'Keine Regeln gefunden.';	$lang['strcreaterule'] = 'Regel erstellen';	$lang['strrulename'] = 'Regelname';	$lang['strruleneedsname'] = 'Sie müssen für die Regel einen Namen angeben.';	$lang['strrulecreated'] = 'Regel erstellt.';	$lang['strrulecreatedbad'] = 'Erstellen der Regel fehlgeschlagen.';	$lang['strconfdroprule'] = 'Sind Sie sicher, dass Sie die Regel "%s" in der Tabelle "%s" löschen möchten?';	$lang['strruledropped'] = 'Regel gelöscht.';	$lang['strruledroppedbad'] = 'Löschen der Regel fehlgeschlagen.';	// Constraints	$lang['strconstraint'] = 'Constraint';	$lang['strconstraints'] = 'Constraints';	$lang['strshowallconstraints'] = 'Alle Constraints anzeigen';	$lang['strnoconstraints'] = 'Keine Constraints gefunden.';	$lang['strcreateconstraint'] = 'Constraint erstellen';	$lang['strconstraintcreated'] = 'Constraint erstellt.';	$lang['strconstraintcreatedbad'] = 'Erstellen des Constraints fehlgeschlagen.';	$lang['strconfdropconstraint'] = 'Sind Sie sicher, dass Sie den Constraint "%s" in der Tabelle "%s" löschen möchten?';	$lang['strconstraintdropped'] = 'Constraint gelöscht.';	$lang['strconstraintdroppedbad'] = 'Löschen des Constraints fehlgeschlagen.';	$lang['straddcheck'] = 'Check-Constraint hinzufügen';	$lang['strcheckneedsdefinition'] = 'Ein Check-Constraint braucht eine Definition.';	$lang['strcheckadded'] = 'Check-Constraint hinzugefügt.';	$lang['strcheckaddedbad'] = 'Hinzufügen des Check-Constraints fehlgeschlagen.';	$lang['straddpk'] = 'Primärschlüssel hinzufügen';	$lang['strpkneedscols'] = 'Ein Primärschlüssel benötigt mindestens eine Spalte.';	$lang['strpkadded'] = 'Primärschlüssel hinzugefügt.';	$lang['strpkaddedbad'] = 'Hinzufügen des Primärschlüssels fehlgeschlagen.';	$lang['stradduniq'] = 'Eindeutigen Schlüssel hinzufügen';	$lang['struniqneedscols'] = 'Ein eindeutiger Schlüssel benötigt mindestens eine Spalte.';	$lang['struniqadded'] = 'Eindeutiger Schlüssel hinzugefügt.';	$lang['struniqaddedbad'] = 'Hinzufügen eines eindeutigen Schlüssels fehlgeschlagen.';	$lang['straddfk'] = 'Fremdschlüssel hinzufügen';	$lang['strfkneedscols'] = 'Ein Fremdschlüssel benötigt mindestens eine Spalte.';	$lang['strfkneedstarget'] = 'Ein Fremdschlüssel benötigt eine Zieltabelle.';	$lang['strfkadded'] = 'Fremdschlüssel hinzugefügt.';	$lang['strfkaddedbad'] = 'Hinzufügen eines Fremdschlüssels fehlgeschlagen.';	$lang['strfktarget'] = 'Zieltabelle';	$lang['strfkcolumnlist'] = 'Spalten im Schlüssel';	$lang['strondelete'] = 'ON DELETE';	$lang['stronupdate'] = 'ON UPDATE';	// Functions	$lang['strfunction'] = 'Funktion';	$lang['strfunctions'] = 'Funktionen';	$lang['strshowallfunctions'] = 'Alle Funktionen anzeigen';	$lang['strnofunction'] = 'Keine Funktion gefunden.';	$lang['strnofunctions'] = 'Keine Funktionen gefunden.';	$lang['strcreateplfunction'] = 'SQL/PL-Funktion erstellen';	$lang['strcreateinternalfunction'] = 'Interne Funktion erstellen';	$lang['strcreatecfunction'] = 'C-Funktion erstellen';	$lang['strfunctionname'] = 'Funktionsname';	$lang['strreturns'] = 'Rückgabetyp';	$lang['strproglanguage'] = 'Programmiersprache';	$lang['strfunctionneedsname'] = 'Sie müssen für die Funktion einen Namen angeben.';	$lang['strfunctionneedsdef'] = 'Sie müssen für die Funktion eine Definition angeben.';	$lang['strfunctioncreated'] = 'Funktion erstellt.';	$lang['strfunctioncreatedbad'] = 'Erstellen der Funktion fehlgeschlagen.';	$lang['strconfdropfunction'] = 'Sind Sie sicher, dass sie die Funktion "%s" löschen möchten?';	$lang['strfunctiondropped'] = 'Funktion gelöscht.';	$lang['strfunctiondroppedbad'] = 'Löschen der Funktion fehlgeschlagen.';	$lang['strfunctionupdated'] = 'Funktion geändert.';	$lang['strfunctionupdatedbad'] = 'Ändern der Funktion fehlgeschlagen.';	$lang['strobjectfile'] = 'Objektdatei';	$lang['strlinksymbol'] = 'Link-Symbol';	$lang['strarguments'] = 'Funktionsargumente';	$lang['strargmode'] = 'Richtung';	$lang['strargtype'] = 'Datentyp';	$lang['strargadd'] = 'Weiteres Argument hinzufügen';	$lang['strargremove'] = 'Dieses Argument entfernen';	$lang['strargnoargs'] = 'Diese Funktion kann nur ohne Argumente aufgerufen werden.';	$lang['strargenableargs'] = 'Diese Funktion kann mit Argumenten aufgerufen werden.';	$lang['strargnorowabove'] = 'Oberhalb dieser Spalte muss eine weitere Spalte sein.';	$lang['strargnorowbelow'] = 'Unterhalb dieser Spalte muss eine weitere Spalte sein.';	$lang['strargraise'] = 'Hinaufschieben.';	$lang['strarglower'] = 'Hinunterschieben.';	$lang['strargremoveconfirm'] = 'Sind Sie sicher, dass Sie dieses Argument entfernen wollen? Das kann nicht rückgängig gemacht werden.';	$lang['strfunctioncosting'] = 'Ausführungskosten';	$lang['strresultrows'] = 'Geschätzte Anzahl der Ergebniszeilen';	$lang['strexecutioncost'] = 'Geschätzte Ausführungskosten';	$lang['strspecifyfunctiontodrop'] = 'Sie müssen mindestens eine Funktion angeben, die gelöscht werden soll.';	// Triggers	$lang['strtrigger'] = 'Trigger';	$lang['strtriggers'] = 'Trigger';	$lang['strshowalltriggers'] = 'Alle Trigger anzeigen';	$lang['strnotrigger'] = 'Kein Trigger gefunden.';	$lang['strnotriggers'] = 'Keine Trigger gefunden.';	$lang['strcreatetrigger'] = 'Trigger erstellen';	$lang['strtriggerneedsname'] = 'Sie müssen für den Trigger einen Namen angeben.';	$lang['strtriggerneedsfunc'] = 'Sie müssen für den Trigger eine Funktion angeben.';	$lang['strtriggercreated'] = 'Trigger erstellt.';	$lang['strtriggercreatedbad'] = 'Erstellen des Triggers fehlgeschlagen.';	$lang['strconfdroptrigger'] = 'Sind Sie sicher, dass Sie den Trigger "%s" auf der Tabelle "%s" löschen möchten?';	$lang['strconfenabletrigger'] = 'Sind Sie sicher, dass Sie den Trigger "%s" auf der Tabelle "%s" aktivieren möchten?';	$lang['strconfdisabletrigger'] = 'Sind Sie sicher, dass Sie den Trigger "%s" auf der Tabelle "%s" deaktivieren möchten?';	$lang['strtriggerdropped'] = 'Trigger gelöscht.';	$lang['strtriggerdroppedbad'] = 'Löschen des Triggers fehlgeschlagen.';	$lang['strtriggerenabled'] = 'Trigger aktiviert.';	$lang['strtriggerenabledbad'] = 'Aktivieren des Triggers fehlgeschlagen.';	$lang['strtriggerdisabled'] = 'Trigger deaktiviert.';	$lang['strtriggerdisabledbad'] = 'Deaktivieren des Triggers fehlgeschlagen.';	$lang['strtriggeraltered'] = 'Trigger geändert.';	$lang['strtriggeralteredbad'] = 'Ändern des Triggers fehlgeschlagen.';	$lang['strforeach'] = 'Für alle';	// Types	$lang['strtype'] = 'Datentyp';	$lang['strtypes'] = 'Datentypen';	$lang['strshowalltypes'] = 'Alle Datentypen anzeigen';	$lang['strnotype'] = 'Kein Datentyp gefunden.';	$lang['strnotypes'] = 'Keine Datentypen gefunden.';	$lang['strcreatetype'] = 'Datentyp erstellen';	$lang['strcreatecomptype'] = 'Zusammengesetzten Typ erstellen';	$lang['strcreateenumtype'] = 'Aufzählungstyp erstellen';	$lang['strtypeneedsfield'] = 'Sie müssen mindestens ein Feld angeben.';	$lang['strtypeneedsvalue'] = 'Sie müssen mindestens einen Wert angeben.';	$lang['strtypeneedscols'] = 'Sie müssen eine gültige Anzahl von Spalten angeben.';	$lang['strtypeneedsvals'] = 'Sie müssen eine gültige Anzahl von Werten angeben.';	$lang['strinputfn'] = 'Eingabefunktion';	$lang['stroutputfn'] = 'Ausgabefunktion';	$lang['strpassbyval'] = 'Übergabe "by value"?';	$lang['stralignment'] = 'Alignment';	$lang['strelement'] = 'Element';	$lang['strdelimiter'] = 'Trennzeichen';	$lang['strstorage'] = 'Speicherung';	$lang['strfield'] = 'Spalte';	$lang['strnumfields'] = 'Anzahl Spalten';	$lang['strnumvalues'] = 'Anzahl Werte';	$lang['strtypeneedsname'] = 'Sie müssen einen Namen für den Datentyp angeben.';	$lang['strtypeneedslen'] = 'Sie müssen eine Länge für den Datentyp angeben.';	$lang['strtypecreated'] = 'Datentyp erstellt.';	$lang['strtypecreatedbad'] = 'Erstellen des Datentypen fehlgeschlagen.';	$lang['strconfdroptype'] = 'Sind Sie sicher, dass Sie den Datentyp "%s" löschen möchten?';	$lang['strtypedropped'] = 'Datentyp gelöscht.';	$lang['strtypedroppedbad'] = 'Löschen des Datentyps fehlgeschlagen.';	$lang['strflavor'] = 'Art';	$lang['strbasetype'] = 'Basis-Typ';	$lang['strcompositetype'] = 'Zusammengesetzt';	$lang['strpseudotype'] = 'Pseudo';	$lang['strenum'] = 'Aufzählend';	$lang['strenumvalues'] = 'Wert';	// Schemas	$lang['strschema'] = 'Schema';	$lang['strschemas'] = 'Schemata';	$lang['strshowallschemas'] = 'Alle Schemata anzeigen';	$lang['strnoschema'] = 'Kein Schema gefunden.';	$lang['strnoschemas'] = 'Keine Schemata gefunden.';	$lang['strcreateschema'] = 'Schema erstellen';	$lang['strschemaname'] = 'Name des Schema';	$lang['strschemaneedsname'] = 'Sie müssen für das Schema einen Namen angeben.';	$lang['strschemacreated'] = 'Schema erstellt.';	$lang['strschemacreatedbad'] = 'Erstellen des Schemas fehlgeschlagen.';	$lang['strconfdropschema'] = 'Sind Sie sicher, dass sie das Schema "%s" löschen möchten?';	$lang['strschemadropped'] = 'Schema gelöscht.';	$lang['strschemadroppedbad'] = 'Löschen des Schemas fehlgeschlagen';	$lang['strschemaaltered'] = 'Schema geändert.';	$lang['strschemaalteredbad'] = 'Ändern des Schemas fehlgeschlagen.';	$lang['strsearchpath'] = 'Schemasuchpfad';	$lang['strspecifyschematodrop'] = 'Sie müssen mindestens ein Schema angeben, das gelöscht werden soll.';	// Reports	$lang['strreport'] = 'Bericht';	$lang['strreports'] = 'Berichte';	$lang['strshowallreports'] = 'Alle Berichte anzeigen';	$lang['strnoreports'] = 'Keine Berichte gefunden.';	$lang['strcreatereport'] = 'Bericht erstellen.';	$lang['strreportdropped'] = 'Bericht gelöscht.';	$lang['strreportdroppedbad'] = 'Löschen des Berichtes fehlgeschlagen.';	$lang['strconfdropreport'] = 'Sind Sie sicher, dass Sie den Bericht "%s" löschen wollen?';	$lang['strreportneedsname'] = 'Sie müssen für den Bericht einen Namen angeben.';	$lang['strreportneedsdef'] = 'Sie müssen eine SQL-Abfrage für den Bericht eingeben.';	$lang['strreportcreated'] = 'Bericht gespeichert.';	$lang['strreportcreatedbad'] = 'Speichern des Berichtes fehlgeschlagen.';	// Domains	$lang['strdomain'] = 'Domäne';	$lang['strdomains'] = 'Domänen';	$lang['strshowalldomains'] = 'Alle Domänen anzeigen';	$lang['strnodomains'] = 'Keine Domänen gefunden.';	$lang['strcreatedomain'] = 'Domäne erstellen';	$lang['strdomaindropped'] = 'Domäne gelöscht.';	$lang['strdomaindroppedbad'] = 'Löschen der Domäne fehlgeschlagen.';	$lang['strconfdropdomain'] = 'Sind Sie sicher, dass Sie die Domäne "%s" löschen wollen?';	$lang['strdomainneedsname'] = 'Sie müssen einen Namen für die Domäne angeben.';	$lang['strdomaincreated'] = 'Domäne erstellt.';	$lang['strdomaincreatedbad'] = 'Erstellen der Domäne fehlgeschlagen.';	$lang['strdomainaltered'] = 'Domäne geändert.';	$lang['strdomainalteredbad'] = 'Ändern der Domäne fehlgeschlagen.';		// Operators	$lang['stroperator'] = 'Operator';	$lang['stroperators'] = 'Operatoren';	$lang['strshowalloperators'] = 'Alle Operatoren anzeigen';	$lang['strnooperator'] = 'Kein Operator gefunden.';	$lang['strnooperators'] = 'Keine Operatoren gefunden.';	$lang['strcreateoperator'] = 'Operator erstellen';	$lang['strleftarg'] = 'Typ des linken Arguments';	$lang['strrightarg'] = 'Typ des rechter Arguments';	$lang['strcommutator'] = 'Kommutator';	$lang['strnegator'] = 'Negator';	$lang['strrestrict'] = 'Funktion zur Schätzung der Restriktions-Selektivität';	$lang['strjoin'] = 'Funktion zur Schätzung der Join-Selektivität';	$lang['strhashes'] = 'Unterstützt Hash-Joins';	$lang['strmerges'] = 'Unterstützt Merge-Joins';	$lang['strleftsort'] = 'Kleiner-Operator zum Sortieren der linken Seite';	$lang['strrightsort'] = 'Kleiner-Operator zum Sortieren der rechten Seite';	$lang['strlessthan'] = 'Kleiner-Operator';	$lang['strgreaterthan'] = 'Größer-Operator';	$lang['stroperatorneedsname'] = 'Sie müssen einen Namen für den Operator angeben.';	$lang['stroperatorcreated'] = 'Operator erstellt.';	$lang['stroperatorcreatedbad'] = 'Erstellen des Operators fehlgeschlagen.';	$lang['strconfdropoperator'] = 'Sind Sie sicher, dass Sie den Operator "%s" löschen wollen?';	$lang['stroperatordropped'] = 'Operator gelöscht.';	$lang['stroperatordroppedbad'] = 'Löschen des Operators fehlgeschlagen.';	// Casts	$lang['strcasts'] = 'Typumwandlungen';	$lang['strnocasts'] = 'Keine Typumwandlungen gefunden.';	$lang['strsourcetype'] = 'Ursprungs-Datentyp';	$lang['strtargettype'] = 'Ziel-Datentyp';	$lang['strimplicit'] = 'Implizit';	$lang['strinassignment'] = 'Bei Zuweisungen';	$lang['strbinarycompat'] = '(Binärkompatibel)';		// Conversions	$lang['strconversions'] = 'Konvertierungen';	$lang['strnoconversions'] = 'Keine Konvertierungen gefunden.';	$lang['strsourceencoding'] = 'Ursprungs-Zeichenkodierung';	$lang['strtargetencoding'] = 'Ziel-Zeichenkodierung';		// Languages	$lang['strlanguages'] = 'Programmiersprachen';	$lang['strnolanguages'] = 'Keine Sprachen gefunden.';	$lang['strtrusted'] = 'Vertrauenswürdig';		// Info	$lang['strnoinfo'] = 'Keine Informationen vorhanden.';	$lang['strreferringtables'] = 'Tabellen, die mit Fremdschlüsseln auf diese Tabelle verweisen';	$lang['strparenttables'] = 'Elterntabellen';	$lang['strchildtables'] = 'Kindtabellen';	// Aggregates	$lang['straggregate'] = 'Aggregatsfunktion';	$lang['straggregates'] = 'Aggregatsfunktionen';	$lang['strnoaggregates'] = 'Keine Aggregatsfunktionen gefunden.';	$lang['stralltypes'] = '(Alle Typen)';	$lang['strcreateaggregate'] = 'Aggregatsfunktion erstellen';	$lang['straggrbasetype'] = 'Eingabedatentyp';	$lang['straggrsfunc'] = 'Zustandsübergangsfunktion';	$lang['straggrstype'] = 'Datentyp für den Zustandswert';	$lang['straggrffunc'] = 'Ergebnisfunktion';	$lang['straggrinitcond'] = 'Zustandswert zu Beginn';	$lang['straggrsortop'] = 'Operator für Sortierung';	$lang['strconfdropaggregate'] = 'Sind Sie sicher, dass Sie die Aggregatsfunktion "%s" löschen wollen?';	$lang['straggregatedropped'] = 'Aggregatsfunktion gelöscht.';	$lang['straggregatedroppedbad'] = 'Löschen der Aggregatsfunktion fehlgeschlagen.';	$lang['straggraltered'] = 'Aggregatsfunktion geändert.';	$lang['straggralteredbad'] = 'Ändern der Aggregatsfunktion fehlgeschlagen.';	$lang['straggrneedsname'] = 'Sie müssen einen Namen für die Aggregatsfunktion angeben.';	$lang['straggrneedsbasetype'] = 'Sie müssen den Eingabedatentyp für die Aggregatsfunktion angeben.';	$lang['straggrneedssfunc'] = 'Sie müssen den Namen der Zustandsübergangsfunktion für die Aggregatsfunktion angeben.';	$lang['straggrneedsstype'] = 'Sie müssen den Datentyp für den Zustandswert der Aggregatsfunktion angeben.';	$lang['straggrcreated'] = 'Aggregatsfunktion erstellt.';	$lang['straggrcreatedbad'] = 'Erstellen der Aggregatsfunktion fehlgeschlagen.';	$lang['straggrshowall'] = 'Alle Aggregatsfunktionen anzeigen';	// Operator Classes	$lang['stropclasses'] = 'Operatorklassen';	$lang['strnoopclasses'] = 'Keine Operatorklassen gefunden.';	$lang['straccessmethod'] = 'Zugriffsmethode';	// Stats and performance	$lang['strrowperf'] = 'Zeilen-Performance';	$lang['strioperf'] = 'E/A Performance';	$lang['stridxrowperf'] = 'Index-Zeilen-Performance';	$lang['stridxioperf'] = 'Index-E/A-Performance';	$lang['strpercent'] = '%';	$lang['strsequential'] = 'Sequentiell';	$lang['strscan'] = 'Durchsuchen';	$lang['strread'] = 'Lesen';	$lang['strfetch'] = 'Holen';	$lang['strheap'] = 'Heap';	$lang['strtoast'] = 'TOAST';	$lang['strtoastindex'] = 'TOAST-Index';	$lang['strcache'] = 'Zwischenspeicher';	$lang['strdisk'] = 'Festplatte';	$lang['strrows2'] = 'Zeilen';	// Tablespaces	$lang['strtablespace'] = 'Tablespace';	$lang['strtablespaces'] = 'Tablespaces';	$lang['strshowalltablespaces'] = 'Alle Tablespaces anzeigen';	$lang['strnotablespaces'] = 'Keine Tablespaces gefunden.';	$lang['strcreatetablespace'] = 'Tablespace erstellen';	$lang['strlocation'] = 'Pfad';	$lang['strtablespaceneedsname'] = 'Sie müssen einen Namen für den Tablespace angeben.';	$lang['strtablespaceneedsloc'] = 'Sie müssen ein Verzeichnis angeben, in dem Sie den Tablespace erstellen möchten.';	$lang['strtablespacecreated'] = 'Tablespace erstellt.';	$lang['strtablespacecreatedbad'] = 'Erstellen des Tablespace fehlgeschlagen.';	$lang['strconfdroptablespace'] = 'Sind Sie sicher, dass Sie den Tablespace "%s" löschen wollen?';	$lang['strtablespacedropped'] = 'Tablespace gelöscht.';	$lang['strtablespacedroppedbad'] = 'Löschen des Tablespace fehlgeschlagen.';	$lang['strtablespacealtered'] = 'Tablespace geändert.';	$lang['strtablespacealteredbad'] = 'Ändern des Tablespace fehlgeschlagen.';	// Slony clusters	$lang['strcluster'] = 'Cluster';	$lang['strnoclusters'] = 'Keine Cluster gefunden.';	$lang['strconfdropcluster'] = 'Sind Sie sicher, dass Sie den Cluster "%s" löschen möchten?';	$lang['strclusterdropped'] = 'Cluster gelöscht.';	$lang['strclusterdroppedbad'] = 'Löschen des Clusters fehlgeschlagen.';	$lang['strinitcluster'] = 'Cluster initialisieren';	$lang['strclustercreated'] = 'Cluster initialisiert.';	$lang['strclustercreatedbad'] = 'Initialisierung des Clusters fehlgeschlagen.';	$lang['strclusterneedsname'] = 'Sie müssen einen Namen für den Cluster angeben.';	$lang['strclusterneedsnodeid'] = 'Sie müssen eine ID für den lokalen Cluster-Knoten angeben.';	// Slony nodes	$lang['strnodes'] = 'Cluster-Knoten';	$lang['strnonodes'] = 'Keine Cluster-Knoten gefunden.';	$lang['strcreatenode'] = 'Cluster-Knoten erstellen';	$lang['strid'] = 'ID';	$lang['stractive'] = 'Aktiv';	$lang['strnodecreated'] = 'Cluster-Knoten erstellt.';	$lang['strnodecreatedbad'] = 'Erstellen des Cluster-Knotens fehlgeschlagen.';	$lang['strconfdropnode'] = 'Sind Sie sicher, dass Sie Cluster-Knoten "%s" löschen möchten?';	$lang['strnodedropped'] = 'Cluster-Knoten gelöscht.';	$lang['strnodedroppedbad'] = 'Löschen des Cluster-Knotens fehlgeschlagen.';	$lang['strfailover'] = 'Übernahme';	$lang['strnodefailedover'] = 'Cluster-Knoten übernommen.';	$lang['strnodefailedoverbad'] = 'Übernahme des Cluster-Knotens fehlgeschlagen.';	$lang['strstatus'] = 'Status';		$lang['strhealthy'] = 'Gesund';	$lang['stroutofsync'] = 'Nicht Synchronisiert';	$lang['strunknown'] = 'Unbekannt';		// Slony paths		$lang['strpaths'] = 'Kommunikationspfade';	$lang['strnopaths'] = 'Keine Kommunikationspfade gefunden.';	$lang['strcreatepath'] = 'Kommunikationspfad erstellen';	$lang['strnodename'] = 'Name des Cluster-Knotens';	$lang['strnodeid'] = 'ID des Cluster-Knotens';	$lang['strconninfo'] = 'Connection-String';	$lang['strconnretry'] = 'Wartezeit vor erneutem Verbindungsversuch in Sekunden';	$lang['strpathneedsconninfo'] = 'Sie müssen einen Connection-String für den Kommunikationspfad angeben.';	$lang['strpathneedsconnretry'] = 'Sie müssen die Wartezeit vor einem erneuten Verbindungsversuch angeben.';	$lang['strpathcreated'] = 'Kommunikationspfad erstellt.';	$lang['strpathcreatedbad'] = 'Erstellen des Kommunikationspfades fehlgeschlagen.';	$lang['strconfdroppath'] = 'Sind Sie sicher, dass Sie den Kommunikationspfad "%s" löschen möchten?';	$lang['strpathdropped'] = 'Kommunikationspfad gelöscht.';	$lang['strpathdroppedbad'] = 'Löschen des Kommunikationspfades fehlgeschlagen.';	// Slony listens	$lang['strlistens'] = 'Zuhörer';	$lang['strnolistens'] = 'Keine Zuhörer gefunden.';	$lang['strcreatelisten'] = 'Zuhörer erstellen';	$lang['strlistencreated'] = 'Zuhörer erstellt.';	$lang['strlistencreatedbad'] = 'Erstellen des Zuhörers fehlgeschlagen.';	$lang['strconfdroplisten'] = 'Sind Sie sicher, dass Sie Zuhörer "%s" löschen möchten?';	$lang['strlistendropped'] = 'Zuhörer gelöscht.';	$lang['strlistendroppedbad'] = 'Löschen des Zuhörers fehlgeschlagen.';	// Slony replication sets	$lang['strrepsets'] = 'Replikationsgruppe';	$lang['strnorepsets'] = 'Keine Replikationsgruppen gefunden.';	$lang['strcreaterepset'] = 'Replikationsgruppe erstellen';	$lang['strrepsetcreated'] = 'Replikationsgruppe erstellt.';	$lang['strrepsetcreatedbad'] = 'Erstellen der Replikationsgruppe fehlgeschlagen.';	$lang['strconfdroprepset'] = 'Sind Sie sicher, dass Sie Replikationsgruppe "%s" löschen möchten?';	$lang['strrepsetdropped'] = 'Replikationsgruppe gelöscht.';	$lang['strrepsetdroppedbad'] = 'Löschen der Replikationsgruppe fehlgeschlagen.';	$lang['strmerge'] = 'Vereinigen';	$lang['strmergeinto'] = 'Vereinigen mit';	$lang['strrepsetmerged'] = 'Replikationsgruppen vereinige.';	$lang['strrepsetmergedbad'] = 'Vereinigung der Replikationsgruppen fehlgeschlagen.';	$lang['strmove'] = 'Verschieben';	$lang['strneworigin'] = 'Neuer Usrprung';	$lang['strrepsetmoved'] = 'Replikationsgruppe verschoben.';	$lang['strrepsetmovedbad'] = 'Verschieben der Replikationsgruppe fehlgeschlagen.';	$lang['strnewrepset'] = 'Neue Replikationsgruppe';	$lang['strlock'] = 'Sperren';	$lang['strlocked'] = 'Gesperrt';	$lang['strunlock'] = 'Entsperren';	$lang['strconflockrepset'] = 'Sind Sie sicher, dass Sie Replikationsgruppe "%s" sperren möchten?';	$lang['strrepsetlocked'] = 'Replikationsgruppe gesperrt.';	$lang['strrepsetlockedbad'] = 'Sperren der Replikationsgruppe fehlgeschlagen.';	$lang['strconfunlockrepset'] = 'Sind Sie sicher, dass Sie Replikationsgruppe "%s" entsperren möchten?';	$lang['strrepsetunlocked'] = 'Replikationsgruppe entsperrt.';	$lang['strrepsetunlockedbad'] = 'Entsperren der Replikationsgruppe fehlgeschlagen.';	$lang['stronlyonnode'] = 'Nur auf dem Cluster-Knoten';	$lang['strddlscript'] = 'DDL-Script';	$lang['strscriptneedsbody'] = 'Sie müssen ein Script angeben, das auf allen Cluster-Knoten ausgeführt werden soll.';	$lang['strscriptexecuted'] = 'DDL-Script für die Replikationsgruppe ausgeführt.';	$lang['strscriptexecutedbad'] = 'Ausführung des DDL-Scripts für die Replikationsgruppe fehlgeschlagen.';	$lang['strtabletriggerstoretain'] = 'Die folgenden Trigger werden von Slony NICHT deaktiviert:';	// Slony tables in replication sets	$lang['straddtable'] = 'Tabelle hinzufügen';	$lang['strtableneedsuniquekey'] = 'Damit eine Tabelle hinzugefügt werden kann, muss sie einen Primärschlüssel oder einen eindeutigen Schlüssel besitzen.';	$lang['strtableaddedtorepset'] = 'Tabelle zu Replikationsgruppe hinzugefügt.';	$lang['strtableaddedtorepsetbad'] = 'Hinzufügen der Tabelle zur Replikationsgruppe fehlgeschlagen.';	$lang['strconfremovetablefromrepset'] = 'Sind Sie sicher, dass Sie die Tabelle "%s" aus der Replikationsgruppe "%s" entfernen möchten?';	$lang['strtableremovedfromrepset'] = 'Tabelle aus Replikationsgruppe entfernt.';	$lang['strtableremovedfromrepsetbad'] = 'Entfernen der Tabelle aus der Replikationsgruppe fehlgeschlagen.';	// Slony sequences in replication sets	$lang['straddsequence'] = 'Sequenz hinzufügen';	$lang['strsequenceaddedtorepset'] = 'Sequenz zu Replikationsgruppe hinzugefügt.';	$lang['strsequenceaddedtorepsetbad'] = 'Hinzufügen der Sequenz zur Replikationsgruppe fehlgeschlagen.';	$lang['strconfremovesequencefromrepset'] = 'Sind Sie sicher, dass Sie die Sequenz "%s" aus der Replikationsgruppe "%s" entfernen möchten?';	$lang['strsequenceremovedfromrepset'] = 'Sequenz aus Replikationsgruppe entfernt.';	$lang['strsequenceremovedfromrepsetbad'] = 'Entfernen der Sequenz aus der Replikationsgruppe fehlgeschlagen.';	// Slony subscriptions	$lang['strsubscriptions'] = 'Abonnements';	$lang['strnosubscriptions'] = 'Keine Abonnements gefunden.';	// Miscellaneous	$lang['strtopbar'] = '%s läuft auf %s:%s -- Sie sind als "%s" angemeldet, %s';	$lang['strtimefmt'] = 'D, j. n. Y, G:i';	$lang['strhelp'] = 'Hilfe';	$lang['strhelpicon'] = '?';	$lang['strhelppagebrowser'] = 'Browser für Hilfeseiten';	$lang['strselecthelppage'] = 'Hilfeseite auswählen';	$lang['strinvalidhelppage'] = 'Ungültige Hilfeseite.';	$lang['strlogintitle'] = 'Bei %s anmelden';	$lang['strlogoutmsg'] = 'Von %s abgemendet';	$lang['strloading'] = 'Lade...';	$lang['strerrorloading'] = 'Fehler beim Laden';	$lang['strclicktoreload'] = 'Klicken Sie zum Neuladen';	// Autovacuum	$lang['strautovacuum'] = 'Autovacuum';	$lang['strturnedon'] = 'Eingeschaltet';	$lang['strturnedoff'] = 'Ausgeschaltet';	$lang['strenabled'] = 'Aktiviert';	$lang['strvacuumbasethreshold'] = 'Autovacuum-Schwellwert';	$lang['strvacuumscalefactor'] = 'Autovacuum-Skalierungsfaktor';	$lang['stranalybasethreshold'] = 'Analyze-Schwellwert';	$lang['stranalyzescalefactor'] = 'Analyze-Skalierungsfaktor';	$lang['strvacuumcostdelay'] = 'Pause nach Erreichen des Autovacuum-Kostenlimits';	$lang['strvacuumcostlimit'] = 'Autovacuum-Kostenlimits';	// Table-level Locks	$lang['strlocks'] = 'Sperren';	$lang['strtransaction'] = 'Transaktions-ID';	$lang['strvirtualtransaction'] = 'Virtuelle Transaktions-ID';	$lang['strprocessid'] = 'Prozess-ID';	$lang['strmode'] = 'Art der Sperre';	$lang['strislockheld'] = 'Sperre gewährt?';	// Prepared transactions	$lang['strpreparedxacts'] = 'Vorbereitete verteilte Transaktionen';	$lang['strxactid'] = 'Transaktions-ID';	$lang['strgid'] = 'Globale ID';		// Fulltext search	$lang['strfulltext'] = 'Volltextsuche';	$lang['strftsconfig'] = 'Volltextsuch-Konfiguration';	$lang['strftsconfigs'] = 'Konfigurationen';	$lang['strftscreateconfig'] = 'Volltextsuch-Konfiguration erstellen';	$lang['strftscreatedict'] = 'Wörterbuch erstellen';	$lang['strftscreatedicttemplate'] = 'Wörterbuch-Blaupause erstellen';	$lang['strftscreateparser'] = 'Parser erstellen';	$lang['strftsnoconfigs'] = 'Keine Volltextsuch-Konfigurationen gefunden.';	$lang['strftsconfigdropped'] = 'Volltextsuch-Konfiguration gelöscht.';	$lang['strftsconfigdroppedbad'] = 'Löschen der Volltextsuch-Konfiguration fehlgeschlagen.';	$lang['strconfdropftsconfig'] = 'Sind Sie sicher, dass Sie die Volltextsuch-Konfiguration "%s" löschen möchten?';	$lang['strconfdropftsdict'] = 'Sind Sie sicher, dass Sie das Wörterbuch "%s" löschen möchten?';	$lang['strconfdropftsmapping'] = 'Sind Sie sicher, dass Sie die Zuordnung "%s" der Volltextsuch-Konfiguration "%s" löschen möchten?';	$lang['strftstemplate'] = 'Blaupause';	$lang['strftsparser'] = 'Parser';	$lang['strftsconfigneedsname'] = 'Sie müssen für die Volltextsuch-Konfiguration einen Namen angeben.';	$lang['strftsconfigcreated'] = 'Volltextsuch-Konfiguration erstellt.';	$lang['strftsconfigcreatedbad'] = 'Erstellen der Volltextsuch-Konfiguration fehlgeschlagen.';	$lang['strftsmapping'] = 'Zuordnung';	$lang['strftsdicts'] = 'Wörterbücher';	$lang['strftsdict'] = 'Wörterbuch';	$lang['strftsemptymap'] = 'Leere Zuordnung für Volltextsuch-Konfiguration.';	$lang['strftswithmap'] = 'Mit Zuordnung';	$lang['strftsmakedefault'] = 'Als Standardwert für die angegebene Spracheinstellung festlegen';	$lang['strftsconfigaltered'] = 'Volltextsuch-Konfiguration geändert.';	$lang['strftsconfigalteredbad'] = 'Ändern der Volltextsuch-Konfiguration fehlgeschlagen.';	$lang['strftsconfigmap'] = 'Zuordnung für Volltextsuch-Konfiguration';	$lang['strftsparsers'] = 'Parsers für Volltextsuch-Konfiguration';	$lang['strftsnoparsers'] = 'Keine Parsers für Volltextsuch-Konfiguration vorhanden';	$lang['strftsnodicts'] = 'Keine Wörterbücher für die Volltextsuche vorhanden.';	$lang['strftsdictcreated'] = 'Wörterbuch für die Volltextsuche erstellt.';	$lang['strftsdictcreatedbad'] = 'Erstellen des Wörterbuches für die Volltextsuche fehlgeschlagen.';	$lang['strftslexize'] = 'Funktion zum Zerlegen in Lexeme';	$lang['strftsinit'] = 'Initialisierungsfunktion';	$lang['strftsoptionsvalues'] = 'Optionen und Werte';	$lang['strftsdictneedsname'] = 'Sie müssen für das Volltextsuch-Wörterbuch einen Namen angeben.';	$lang['strftsdictdropped'] = 'Wörterbuches für die Volltextsuche gelöscht.';	$lang['strftsdictdroppedbad'] = 'Löschen des Wörterbuches für die Volltextsuche fehlgeschlagen.';	$lang['strftsdictaltered'] = 'Wörterbuches für die Volltextsuche geändert.';	$lang['strftsdictalteredbad'] = 'Ändern des Wörterbuches für die Volltextsuche fehlgeschlagen.';	$lang['strftsaddmapping'] = 'Neue Zuordnung hinzufügen';	$lang['strftsspecifymappingtodrop'] = 'Sie müssen mindestens eine Zuordnung angeben, die gelöscht werden soll.';	$lang['strftsspecifyconfigtoalter'] = 'Sie müssen eine Volltextsuch-Konfiguration angeben, die geändert werden soll';	$lang['strftsmappingdropped'] = 'Volltextsuch-Zuordnung gelöscht.';	$lang['strftsmappingdroppedbad'] = 'Löschen der Volltextsuch-Zuordnung fehlgeschlagen.';	$lang['strftsnodictionaries'] = 'Keine Wörterbücher gefunden.';	$lang['strftsmappingaltered'] = 'Volltextsuch-Zuordnung geändert.';	$lang['strftsmappingalteredbad'] = 'Ändern der Volltextsuch-Zuordnung fehlgeschlagen.';	$lang['strftsmappingadded'] = 'Volltextsuch-Zuordnung hinzugefügt.';	$lang['strftsmappingaddedbad'] = 'Hinzufügen der Volltextsuch-Zuordnung fehlgeschlagen.';	$lang['strftstabconfigs'] = 'Volltextsuch-Konfigurationen';	$lang['strftstabdicts'] = 'Wörterbücher';	$lang['strftstabparsers'] = 'Parser';?>
<?php	/**	 * Manage sequences in a database	 *	 * $Id: sequences.php,v 1.49 2007/12/15 22:21:54 ioguix Exp $	 */	// Include application functions	include_once('./libraries/lib.inc.php');	$action = (isset($_REQUEST['action'])) ? $_REQUEST['action'] : '';	if (!isset($msg)) $msg = '';	/**	 * Display list of all sequences in the database/schema	 */	function doDefault($msg = '')	{		global $data, $conf, $misc;		global $lang;		$misc->printTrail('schema');		$misc->printTabs('schema', 'sequences');		$misc->printMsg($msg);		// Get all sequences		$sequences = $data->getSequences();		$columns = array(			'sequence' => array(				'title' => $lang['strsequence'],				'field' => field('seqname'),				'url'   => "sequences.php?action=properties&amp;{$misc->href}&amp;",				'vars'  => array('sequence' => 'seqname'),			),			'owner' => array(				'title' => $lang['strowner'],				'field' => field('seqowner'),			),			'actions' => array(				'title' => $lang['stractions'],			),			'comment' => array(				'title' => $lang['strcomment'],				'field' => field('seqcomment'),			),		);		$actions = array(			'multiactions' => array(				'keycols' => array('sequence' => 'seqname'),				'url' => 'sequences.php',			),			'alter' => array(				'title' => $lang['stralter'],				'url'   => "sequences.php?action=confirm_alter&amp;{$misc->href}&amp;subject=sequence&amp;",				'vars'  => array('sequence' => 'seqname'),			),			'drop' => array(				'title' => $lang['strdrop'],				'url'   => "sequences.php?action=confirm_drop&amp;{$misc->href}&amp;",				'vars'  => array('sequence' => 'seqname'),				'multiaction' => 'confirm_drop',			),			'privileges' => array(				'title' => $lang['strprivileges'],				'url'   => "privileges.php?{$misc->href}&amp;subject=sequence&amp;",				'vars'  => array('sequence' => 'seqname'),			),		);		$misc->printTable($sequences, $columns, $actions, $lang['strnosequences']);		echo "<p><a class=\"navlink\" href=\"sequences.php?action=create&amp;{$misc->href}\">{$lang['strcreatesequence']}</a></p>\n";	}	/**	 * Generate XML for the browser tree.	 */	function doTree() {		global $misc, $data;		$sequences = $data->getSequences();		$reqvars = $misc->getRequestVars('sequence');		$attrs = array(			'text'   => field('seqname'),			'icon'   => 'Sequence',			'toolTip'=> field('seqcomment'),			'action' => url('sequences.php',							$reqvars,							array (								'action' => 'properties',								'sequence' => field('seqname')							)						)		);		$misc->printTreeXML($sequences, $attrs);		exit;	}	/**	 * Display the properties of a sequence	 */	function doProperties($msg = '') {		global $data, $misc;		global $lang;		$misc->printTrail('sequence');		$misc->printTitle($lang['strproperties'],'pg.sequence');		$misc->printMsg($msg);		// Fetch the sequence information		$sequence = $data->getSequence($_REQUEST['sequence']);		if (is_object($sequence) && $sequence->recordCount() > 0) {			$sequence->fields['is_cycled'] = $data->phpBool($sequence->fields['is_cycled']);			$sequence->fields['is_called'] = $data->phpBool($sequence->fields['is_called']);			// Show comment if any			if ($sequence->fields['seqcomment'] !== null)				echo "<p class=\"comment\">", $misc->printVal($sequence->fields['seqcomment']), "</p>\n";			echo "<table border=\"0\">";			echo "<tr><th class=\"data\">{$lang['strname']}</th>";			if ($data->hasAlterSequenceStart()) {				echo "<th class=\"data\">{$lang['strstartvalue']}</th>";			}			echo "<th class=\"data\">{$lang['strlastvalue']}</th>";			echo "<th class=\"data\">{$lang['strincrementby']}</th>";			echo "<th class=\"data\">{$lang['strmaxvalue']}</th>";			echo "<th class=\"data\">{$lang['strminvalue']}</th>";			echo "<th class=\"data\">{$lang['strcachevalue']}</th>";			echo "<th class=\"data\">{$lang['strlogcount']}</th>";			echo "<th class=\"data\">{$lang['strcancycle']}</th>";			echo "<th class=\"data\">{$lang['striscalled']}</th></tr>";			echo "<tr>";			echo "<td class=\"data1\">", $misc->printVal($sequence->fields['seqname']), "</td>";			if ($data->hasAlterSequenceStart()) {				echo "<td class=\"data1\">", $misc->printVal($sequence->fields['start_value']), "</td>";			}			echo "<td class=\"data1\">", $misc->printVal($sequence->fields['last_value']), "</td>";			echo "<td class=\"data1\">", $misc->printVal($sequence->fields['increment_by']), "</td>";			echo "<td class=\"data1\">", $misc->printVal($sequence->fields['max_value']), "</td>";			echo "<td class=\"data1\">", $misc->printVal($sequence->fields['min_value']), "</td>";			echo "<td class=\"data1\">", $misc->printVal($sequence->fields['cache_value']), "</td>";			echo "<td class=\"data1\">", $misc->printVal($sequence->fields['log_cnt']), "</td>";			echo "<td class=\"data1\">", ($sequence->fields['is_cycled'] ? $lang['stryes'] : $lang['strno']), "</td>";			echo "<td class=\"data1\">", ($sequence->fields['is_called'] ? $lang['stryes'] : $lang['strno']), "</td>";			echo "</tr>";			echo "</table>";			echo "<ul class=\"navlink\">\n";			echo "\t<li><a href=\"sequences.php?action=confirm_alter&amp;{$misc->href}&amp;sequence=", urlencode($sequence->fields['seqname']), "\">{$lang['stralter']}</a></li>\n";			echo "\t<li><a href=\"sequences.php?action=confirm_setval&amp;{$misc->href}&amp;sequence=", urlencode($sequence->fields['seqname']), "\">{$lang['strsetval']}</a></li>\n";			echo "\t<li><a href=\"sequences.php?action=nextval&amp;{$misc->href}&amp;sequence=", urlencode($sequence->fields['seqname']), "\">{$lang['strnextval']}</a></li>\n";			if ($data->hasAlterSequenceStart()) {				echo "\t<li><a href=\"sequences.php?action=restart&amp;{$misc->href}&amp;sequence=", urlencode($sequence->fields['seqname']), "\">{$lang['strrestart']}</a></li>\n";			}			echo "\t<li><a href=\"sequences.php?action=reset&amp;{$misc->href}&amp;sequence=", urlencode($sequence->fields['seqname']), "\">{$lang['strreset']}</a></li>\n";			echo "\t<li><a href=\"sequences.php?{$misc->href}\">{$lang['strshowallsequences']}</a></li>\n</ul>\n";		}		else echo "<p>{$lang['strnodata']}</p>\n";	}	/**	 * Drop a sequence	 */	function doDrop($confirm, $msg = '') {		global $data, $misc;		global $lang;		if (empty($_REQUEST['sequence']) && empty($_REQUEST['ma'])) {			doDefault($lang['strspecifysequencetodrop']);			exit();		}				if ($confirm) {			$misc->printTrail('sequence');			$misc->printTitle($lang['strdrop'],'pg.sequence.drop');			$misc->printMsg($msg);						echo "<form action=\"sequences.php\" method=\"post\">\n";						//If multi drop			if (isset($_REQUEST['ma'])) {				foreach($_REQUEST['ma'] as $v) {					$a = unserialize(htmlspecialchars_decode($v, ENT_QUOTES));					echo "<p>", sprintf($lang['strconfdropsequence'], $misc->printVal($a['sequence'])), "</p>\n";					printf('<input type="hidden" name="sequence[]" value="%s" />', htmlspecialchars($a['sequence']));				}			} else {				echo "<p>", sprintf($lang['strconfdropsequence'], $misc->printVal($_REQUEST['sequence'])), "</p>\n";				echo "<input type=\"hidden\" name=\"sequence\" value=\"", htmlspecialchars($_REQUEST['sequence']), "\" />\n";			}			echo "<p><input type=\"checkbox\" id=\"cascade\" name=\"cascade\" /> <label for=\"cascade\">{$lang['strcascade']}</label></p>\n";			echo "<p><input type=\"hidden\" name=\"action\" value=\"drop\" />\n";			echo $misc->form;			echo "<input type=\"submit\" name=\"drop\" value=\"{$lang['strdrop']}\" />\n";			echo "<input type=\"submit\" name=\"cancel\" value=\"{$lang['strcancel']}\" /></p>\n";			echo "</form>\n";		}		else {			if (is_array($_POST['sequence'])) {				$msg='';				$status = $data->beginTransaction();				if ($status == 0) {					foreach($_POST['sequence'] as $s) {						$status = $data->dropSequence($s, isset($_POST['cascade']));						if ($status == 0)							$msg.= sprintf('%s: %s<br />', htmlentities($s), $lang['strsequencedropped']);						else {							$data->endTransaction();							doDefault(sprintf('%s%s: %s<br />', $msg, htmlentities($s), $lang['strsequencedroppedbad']));							return;						}					}				}				if($data->endTransaction() == 0) {					// Everything went fine, back to the Default page....					$_reload_browser = true;					doDefault($msg);				}				else doDefault($lang['strsequencedroppedbad']);			}			else{				$status = $data->dropSequence($_POST['sequence'], isset($_POST['cascade']));				if ($status == 0) {					$_reload_browser = true;					doDefault($lang['strsequencedropped']);				}				else					doDrop(true, $lang['strsequencedroppedbad']);			}		}	}	/**	 * Displays a screen where they can enter a new sequence	 */	function doCreateSequence($msg = '') {		global $data, $misc;		global $lang;		if (!isset($_POST['formSequenceName'])) $_POST['formSequenceName'] = '';		if (!isset($_POST['formIncrement'])) $_POST['formIncrement'] = '';		if (!isset($_POST['formMinValue'])) $_POST['formMinValue'] = '';		if (!isset($_POST['formMaxValue'])) $_POST['formMaxValue'] = '';		if (!isset($_POST['formStartValue'])) $_POST['formStartValue'] = '';		if (!isset($_POST['formCacheValue'])) $_POST['formCacheValue'] = '';		$misc->printTrail('schema');		$misc->printTitle($lang['strcreatesequence'],'pg.sequence.create');		$misc->printMsg($msg);		echo "<form action=\"sequences.php\" method=\"post\">\n";		echo "<table>\n";		echo "<tr><th class=\"data left required\">{$lang['strname']}</th>\n";		echo "<td class=\"data1\"><input name=\"formSequenceName\" size=\"32\" maxlength=\"{$data->_maxNameLen}\" value=\"",			htmlspecialchars($_POST['formSequenceName']), "\" /></td></tr>\n";		echo "<tr><th class=\"data left\">{$lang['strincrementby']}</th>\n";		echo "<td class=\"data1\"><input name=\"formIncrement\" size=\"5\" value=\"",			htmlspecialchars($_POST['formIncrement']), "\" /> </td></tr>\n";		echo "<tr><th class=\"data left\">{$lang['strminvalue']}</th>\n";		echo "<td class=\"data1\"><input name=\"formMinValue\" size=\"5\" value=\"",			htmlspecialchars($_POST['formMinValue']), "\" /></td></tr>\n";		echo "<tr><th class=\"data left\">{$lang['strmaxvalue']}</th>\n";		echo "<td class=\"data1\"><input name=\"formMaxValue\" size=\"5\" value=\"",			htmlspecialchars($_POST['formMaxValue']), "\" /></td></tr>\n";		echo "<tr><th class=\"data left\">{$lang['strstartvalue']}</th>\n";		echo "<td class=\"data1\"><input name=\"formStartValue\" size=\"5\" value=\"",			htmlspecialchars($_POST['formStartValue']), "\" /></td></tr>\n";		echo "<tr><th class=\"data left\">{$lang['strcachevalue']}</th>\n";		echo "<td class=\"data1\"><input name=\"formCacheValue\" size=\"5\" value=\"",			htmlspecialchars($_POST['formCacheValue']), "\" /></td></tr>\n";		echo "<tr><th class=\"data left\"><label for=\"formCycledValue\">{$lang['strcancycle']}</label></th>\n";		echo "<td class=\"data1\"><input type=\"checkbox\" id=\"formCycledValue\" name=\"formCycledValue\" ",			(isset($_POST['formCycledValue']) ? ' checked="checked"' : ''), " /></td></tr>\n";		echo "</table>\n";		echo "<p><input type=\"hidden\" name=\"action\" value=\"save_create_sequence\" />\n";		echo $misc->form;		echo "<input type=\"submit\" name=\"create\" value=\"{$lang['strcreate']}\" />\n";		echo "<input type=\"submit\" name=\"cancel\" value=\"{$lang['strcancel']}\" /></p>\n";		echo "</form>\n";	}	/**	 * Actually creates the new sequence in the database	 */	function doSaveCreateSequence() {		global $data;		global $lang;		// Check that they've given a name and at least one column		if ($_POST['formSequenceName'] == '') doCreateSequence($lang['strsequenceneedsname']);		else {			$status = $data->createSequence($_POST['formSequenceName'],				$_POST['formIncrement'], $_POST['formMinValue'],				$_POST['formMaxValue'], $_POST['formStartValue'],				$_POST['formCacheValue'], isset($_POST['formCycledValue']));			if ($status == 0) {				doDefault($lang['strsequencecreated']);			} else {				doCreateSequence($lang['strsequencecreatedbad']);			}		}	}	/**	 * Restarts a sequence	 */	function doRestart() {		global $data;		global $lang;		$status = $data->restartSequence($_REQUEST['sequence']);		if ($status == 0)			doProperties($lang['strsequencerestart']);		else			doProperties($lang['strsequencerestartbad']);	}	/**	 * Resets a sequence	 */	function doReset() {		global $data;		global $lang;		$status = $data->resetSequence($_REQUEST['sequence']);		if ($status == 0)			doProperties($lang['strsequencereset']);		else			doProperties($lang['strsequenceresetbad']);	}	/**	 * Set Nextval of a sequence	 */	function doNextval() {		global $data;		global $lang;		$status = $data->nextvalSequence($_REQUEST['sequence']);		if ($status == 0)			doProperties($lang['strsequencenextval']);		else			doProperties($lang['strsequencenextvalbad']);	}	/**	 * Function to save after 'setval'ing a sequence	 */	function doSaveSetval() {		global $data, $lang, $_reload_browser;		$status = $data->setvalSequence($_POST['sequence'], $_POST['nextvalue']);		if ($status == 0)			doProperties($lang['strsequencesetval']);		else			doProperties($lang['strsequencesetvalbad']);	}	/**	 * Function to allow 'setval'ing of a sequence	 */	function doSetval($msg = '') {		global $data, $misc;		global $lang;		$misc->printTrail('sequence');		$misc->printTitle($lang['strsetval'], 'pg.sequence');		$misc->printMsg($msg);		// Fetch the sequence information		$sequence = $data->getSequence($_REQUEST['sequence']);		if (is_object($sequence) && $sequence->recordCount() > 0) {			echo "<form action=\"sequences.php\" method=\"post\">\n";			echo "<table border=\"0\">";			echo "<tr><th class=\"data left required\">{$lang['strlastvalue']}</th>\n";			echo "<td class=\"data1\">";			echo "<input name=\"nextvalue\" size=\"32\" maxlength=\"{$data->_maxNameLen}\" value=\"",				$misc->printVal($sequence->fields['last_value']), "\" /></td></tr>\n";			echo "</table>\n";			echo "<p><input type=\"hidden\" name=\"action\" value=\"setval\" />\n";			echo "<input type=\"hidden\" name=\"sequence\" value=\"", htmlspecialchars($_REQUEST['sequence']), "\" />\n";			echo $misc->form;			echo "<input type=\"submit\" name=\"setval\" value=\"{$lang['strsetval']}\" />\n";			echo "<input type=\"submit\" name=\"cancel\" value=\"{$lang['strcancel']}\" /></p>\n";			echo "</form>\n";		}		else echo "<p>{$lang['strnodata']}</p>\n";	}	/**	 * Function to save after altering a sequence	 */	function doSaveAlter() {		global $data, $lang, $_reload_browser, $misc;		if (!isset($_POST['owner'])) $_POST['owner'] = null;		if (!isset($_POST['newschema'])) $_POST['newschema'] = null;		if (!isset($_POST['formIncrement'])) $_POST['formIncrement'] = null;		if (!isset($_POST['formMinValue'])) $_POST['formMinValue'] = null;		if (!isset($_POST['formMaxValue'])) $_POST['formMaxValue'] = null;		if (!isset($_POST['formStartValue'])) $_POST['formStartValue'] = null;		if (!isset($_POST['formRestartValue'])) $_POST['formRestartValue'] = null;		if (!isset($_POST['formCacheValue'])) $_POST['formCacheValue'] = null;		if (!isset($_POST['formCycledValue'])) $_POST['formCycledValue'] = null;		$status = $data->alterSequence($_POST['sequence'], $_POST['name'], $_POST['comment'], $_POST['owner'],			$_POST['newschema'], $_POST['formIncrement'], $_POST['formMinValue'], $_POST['formMaxValue'],			$_POST['formRestartValue'], $_POST['formCacheValue'], isset($_POST['formCycledValue']), $_POST['formStartValue']);		if ($status == 0) {			if ($_POST['sequence'] != $_POST['name']) {				// Jump them to the new view name				$_REQUEST['sequence'] = $_POST['name'];				// Force a browser reload				$_reload_browser = true;			}			if (!empty($_POST['newschema']) && ($_POST['newschema'] != $data->_schema)) {				// Jump them to the new sequence schema				$misc->setCurrentSchema($_POST['newschema']);				$_reload_browser = true;			 }			doProperties($lang['strsequencealtered']);		}		else			doProperties($lang['strsequencealteredbad']);	}	/**	 * Function to allow altering of a sequence	 */	function doAlter($msg = '') {		global $data, $misc;		global $lang;		$misc->printTrail('sequence');		$misc->printTitle($lang['stralter'], 'pg.sequence.alter');		$misc->printMsg($msg);		// Fetch the sequence information		$sequence = $data->getSequence($_REQUEST['sequence']);		if (is_object($sequence) && $sequence->recordCount() > 0) {			if (!isset($_POST['name'])) $_POST['name'] = $_REQUEST['sequence'];			if (!isset($_POST['comment'])) $_POST['comment'] = $sequence->fields['seqcomment'];			if (!isset($_POST['owner'])) $_POST['owner'] = $sequence->fields['seqowner'];			if (!isset($_POST['newschema'])) $_POST['newschema'] = $sequence->fields['nspname'];			// Handle Checkbox Value			$sequence->fields['is_cycled'] = $data->phpBool($sequence->fields['is_cycled']);			if ($sequence->fields['is_cycled']) $_POST['formCycledValue'] = 'on';			echo "<form action=\"sequences.php\" method=\"post\">\n";			echo "<table>\n";			echo "<tr><th class=\"data left required\">{$lang['strname']}</th>\n";			echo "<td class=\"data1\">";			echo "<input name=\"name\" size=\"32\" maxlength=\"{$data->_maxNameLen}\" value=\"",				htmlspecialchars($_POST['name']), "\" /></td></tr>\n";			$server_info = $misc->getServerInfo();			if ($data->isSuperUser($server_info['username'])) {				// Fetch all users				$users = $data->getUsers();				echo "<tr><th class=\"data left required\">{$lang['strowner']}</th>\n";				echo "<td class=\"data1\"><select name=\"owner\">";				while (!$users->EOF) {					$uname = $users->fields['usename'];					echo "<option value=\"", htmlspecialchars($uname), "\"",					($uname == $_POST['owner']) ? ' selected="selected"' : '', ">", htmlspecialchars($uname), "</option>\n";					$users->moveNext();				}				echo "</select></td></tr>\n";			}						if ($data->hasAlterSequenceSchema()) {				$schemas = $data->getSchemas();				echo "<tr><th class=\"data left required\">{$lang['strschema']}</th>\n";				echo "<td class=\"data1\"><select name=\"newschema\">";				while (!$schemas->EOF) {					$schema = $schemas->fields['nspname'];					echo "<option value=\"", htmlspecialchars($schema), "\"",						($schema == $_POST['newschema']) ? ' selected="selected"' : '', ">", htmlspecialchars($schema), "</option>\n";					$schemas->moveNext();				}			    echo "</select></td></tr>\n";			}			echo "<tr><th class=\"data left\">{$lang['strcomment']}</th>\n";			echo "<td class=\"data1\">";			echo "<textarea rows=\"3\" cols=\"32\" name=\"comment\">",				htmlspecialchars($_POST['comment']), "</textarea></td></tr>\n";			if ($data->hasAlterSequenceStart()) {				echo "<tr><th class=\"data left\">{$lang['strstartvalue']}</th>\n";				echo "<td class=\"data1\"><input name=\"formStartValue\" size=\"5\" value=\"",					htmlspecialchars($sequence->fields['start_value']), "\" /></td></tr>\n";			}			echo "<tr><th class=\"data left\">{$lang['strrestartvalue']}</th>\n";			echo "<td class=\"data1\"><input name=\"formRestartValue\" size=\"5\" value=\"",				htmlspecialchars($sequence->fields['last_value']), "\" /></td></tr>\n";			echo "<tr><th class=\"data left\">{$lang['strincrementby']}</th>\n";			echo "<td class=\"data1\"><input name=\"formIncrement\" size=\"5\" value=\"",				htmlspecialchars($sequence->fields['increment_by']), "\" /> </td></tr>\n";			echo "<tr><th class=\"data left\">{$lang['strmaxvalue']}</th>\n";			echo "<td class=\"data1\"><input name=\"formMaxValue\" size=\"5\" value=\"",				htmlspecialchars($sequence->fields['max_value']), "\" /></td></tr>\n";			echo "<tr><th class=\"data left\">{$lang['strminvalue']}</th>\n";			echo "<td class=\"data1\"><input name=\"formMinValue\" size=\"5\" value=\"",				htmlspecialchars($sequence->fields['min_value']), "\" /></td></tr>\n";			echo "<tr><th class=\"data left\">{$lang['strcachevalue']}</th>\n";			echo "<td class=\"data1\"><input name=\"formCacheValue\" size=\"5\" value=\"",				htmlspecialchars($sequence->fields['cache_value']), "\" /></td></tr>\n";			echo "<tr><th class=\"data left\"><label for=\"formCycledValue\">{$lang['strcancycle']}</label></th>\n";			echo "<td class=\"data1\"><input type=\"checkbox\" id=\"formCycledValue\" name=\"formCycledValue\" ",				( isset($_POST['formCycledValue']) ? ' checked="checked"' : ''), " /></td></tr>\n";			echo "</table>\n";			echo "<p><input type=\"hidden\" name=\"action\" value=\"alter\" />\n";			echo $misc->form;			echo "<input type=\"hidden\" name=\"sequence\" value=\"", htmlspecialchars($_REQUEST['sequence']), "\" />\n";			echo "<input type=\"submit\" name=\"alter\" value=\"{$lang['stralter']}\" />\n";			echo "<input type=\"submit\" name=\"cancel\" value=\"{$lang['strcancel']}\" /></p>\n";			echo "</form>\n";		}		else echo "<p>{$lang['strnodata']}</p>\n";	}	if ($action == 'tree') doTree();	// Print header	$misc->printHeader($lang['strsequences']);	$misc->printBody();	switch($action) {		case 'create':			doCreateSequence();			break;		case 'save_create_sequence':			if (isset($_POST['create'])) doSaveCreateSequence();			else doDefault();			break;		case 'properties':			doProperties();			break;		case 'drop':			if (isset($_POST['drop'])) doDrop(false);			else doDefault();			break;		case 'confirm_drop':			doDrop(true);			break;		case 'restart':			doRestart();			break;		case 'reset':			doReset();			break;		case 'nextval':			doNextval();			break;		case 'setval':			if (isset($_POST['setval'])) doSaveSetval();			else doDefault();			break;		case 'confirm_setval':			doSetval();			break;		case 'alter':			if (isset($_POST['alter'])) doSaveAlter();			else doDefault();			break;		case 'confirm_alter':			doAlter();			break;		default:			doDefault();			break;	}	// Print footer	$misc->printFooter();?>
<?php	/**	 * Manage languages in a database	 *	 * $Id: languages.php,v 1.13 2007/08/31 18:30:11 ioguix Exp $	 */	// Include application functions	include_once('./libraries/lib.inc.php');		$action = (isset($_REQUEST['action'])) ? $_REQUEST['action'] : '';	if (!isset($msg)) $msg = '';	/**	 * Show default list of languages in the database	 */	function doDefault($msg = '') {		global $data, $misc, $database;		global $lang;				$misc->printTrail('database');		$misc->printTabs('database','languages');		$misc->printMsg($msg);				$languages = $data->getLanguages();		$columns = array(			'language' => array(				'title' => $lang['strname'],				'field' => field('lanname'),			),			'trusted' => array(				'title' => $lang['strtrusted'],				'field' => field('lanpltrusted'),				'type'  => 'yesno',			),			'function' => array(				'title' => $lang['strfunction'],				'field' => field('lanplcallf'),			),		);		$actions = array();		$misc->printTable($languages, $columns, $actions, $lang['strnolanguages']);	}	/**	 * Generate XML for the browser tree.	 */	function doTree() {		global $misc, $data;				$languages = $data->getLanguages();				$attrs = array(			'text'   => field('lanname'),			'icon'   => 'Language'		);				$misc->printTreeXML($languages, $attrs);		exit;	}		if ($action == 'tree') doTree();		$misc->printHeader($lang['strlanguages']);	$misc->printBody();	switch ($action) {		default:			doDefault();			break;	}		$misc->printFooter();?>
<?php	/**	 * Manage schemas in a database	 *	 * $Id: schemas.php,v 1.22 2007/12/15 22:57:43 ioguix Exp $	 */	// Include application functions	include_once('./libraries/lib.inc.php');	$action = (isset($_REQUEST['action'])) ? $_REQUEST['action'] : '';	if (!isset($msg)) $msg = '';	/**	 * Show default list of schemas in the database	 */	function doDefault($msg = '') {		global $data, $misc, $conf;		global $lang;		$misc->printTrail('database');		$misc->printTabs('database','schemas');		$misc->printMsg($msg);		// Check that the DB actually supports schemas		$schemas = $data->getSchemas();		$columns = array(			'schema' => array(				'title' => $lang['strschema'],				'field' => field('nspname'),				'url'   => "redirect.php?subject=schema&amp;{$misc->href}&amp;",				'vars'  => array('schema' => 'nspname'),			),			'owner' => array(				'title' => $lang['strowner'],				'field' => field('nspowner'),			),			'actions' => array(				'title' => $lang['stractions'],			),			'comment' => array(				'title' => $lang['strcomment'],				'field' => field('nspcomment'),			),		);		$actions = array(			'multiactions' => array(				'keycols' => array('nsp' => 'nspname'),				'url' => 'schemas.php',			),			'drop' => array(				'title' => $lang['strdrop'],				'url'   => "schemas.php?action=drop&amp;{$misc->href}&amp;",				'vars'  => array('nsp' => 'nspname'),				'multiaction' => 'drop',			),			'privileges' => array(				'title' => $lang['strprivileges'],				'url'   => "privileges.php?subject=schema&amp;{$misc->href}&amp;",				'vars'  => array('schema' => 'nspname'),			),			'alter' => array(				'title' => $lang['stralter'],				'url'   => "schemas.php?action=alter&amp;{$misc->href}&amp;",				'vars'  => array('schema' => 'nspname'),			),		);		if (!$data->hasAlterSchema()) unset($actions['alter']);		$misc->printTable($schemas, $columns, $actions, $lang['strnoschemas']);		echo "<p><a class=\"navlink\" href=\"schemas.php?action=create&amp;{$misc->href}\">{$lang['strcreateschema']}</a></p>\n";	}	/**	 * Displays a screen where they can enter a new schema	 */	function doCreate($msg = '') {		global $data, $misc;		global $lang;		$server_info = $misc->getServerInfo();		if (!isset($_POST['formName'])) $_POST['formName'] = '';		if (!isset($_POST['formAuth'])) $_POST['formAuth'] = $server_info['username'];		if (!isset($_POST['formSpc'])) $_POST['formSpc'] = '';		if (!isset($_POST['formComment'])) $_POST['formComment'] = '';		// Fetch all users from the database		$users = $data->getUsers();		$misc->printTrail('database');		$misc->printTitle($lang['strcreateschema'],'pg.schema.create');		$misc->printMsg($msg);		echo "<form action=\"schemas.php\" method=\"post\">\n";		echo "<table style=\"width: 100%\">\n";		echo "\t<tr>\n\t\t<th class=\"data left required\">{$lang['strname']}</th>\n";		echo "\t\t<td class=\"data1\"><input name=\"formName\" size=\"32\" maxlength=\"{$data->_maxNameLen}\" value=\"",			htmlspecialchars($_POST['formName']), "\" /></td>\n\t</tr>\n";		// Owner		echo "\t<tr>\n\t\t<th class=\"data left required\">{$lang['strowner']}</th>\n";		echo "\t\t<td class=\"data1\">\n\t\t\t<select name=\"formAuth\">\n";		while (!$users->EOF) {			$uname = htmlspecialchars($users->fields['usename']);			echo "\t\t\t\t<option value=\"{$uname}\"",				($uname == $_POST['formAuth']) ? ' selected="selected"' : '', ">{$uname}</option>\n";			$users->moveNext();		}		echo "\t\t\t</select>\n\t\t</td>\n\t</tr>\n";		echo "\t<tr>\n\t\t<th class=\"data left\">{$lang['strcomment']}</th>\n";		echo "\t\t<td class=\"data1\"><textarea name=\"formComment\" rows=\"3\" cols=\"32\">",			htmlspecialchars($_POST['formComment']), "</textarea></td>\n\t</tr>\n";		echo "</table>\n";		echo "<p>\n";		echo "<input type=\"hidden\" name=\"action\" value=\"create\" />\n";		echo "<input type=\"hidden\" name=\"database\" value=\"", htmlspecialchars($_REQUEST['database']), "\" />\n";		echo $misc->form;		echo "<input type=\"submit\" name=\"create\" value=\"{$lang['strcreate']}\" />\n";		echo "<input type=\"submit\" name=\"cancel\" value=\"{$lang['strcancel']}\" />\n";		echo "</p>\n";		echo "</form>\n";	}	/**	 * Actually creates the new schema in the database	 */	function doSaveCreate() {		global $data, $lang, $_reload_browser;		// Check that they've given a name		if ($_POST['formName'] == '') doCreate($lang['strschemaneedsname']);		else {			$status = $data->createSchema($_POST['formName'], $_POST['formAuth'], $_POST['formComment']);			if ($status == 0) {				$_reload_browser = true;				doDefault($lang['strschemacreated']);			}			else				doCreate($lang['strschemacreatedbad']);		}	}	/**	 * Display a form to permit editing schema properies.	 * TODO: permit changing owner	 */	function doAlter($msg = '') {		global $data, $misc, $lang;		$misc->printTrail('schema');		$misc->printTitle($lang['stralter'],'pg.schema.alter');		$misc->printMsg($msg);		$schema = $data->getSchemaByName($_REQUEST['schema']);		if ($schema->recordCount() > 0) {			if (!isset($_POST['comment'])) $_POST['comment'] = $schema->fields['nspcomment'];			if (!isset($_POST['schema'])) $_POST['schema'] = $_REQUEST['schema'];			if (!isset($_POST['name'])) $_POST['name'] = $_REQUEST['schema'];			if (!isset($_POST['owner'])) $_POST['owner'] = $schema->fields['ownername'];			echo "<form action=\"schemas.php\" method=\"post\">\n";			echo "<table>\n";			echo "\t<tr>\n";			echo "\t\t<th class=\"data left required\">{$lang['strname']}</th>\n";			echo "\t\t<td class=\"data1\">";			echo "\t\t\t<input name=\"name\" size=\"32\" maxlength=\"{$data->_maxNameLen}\" value=\"",				htmlspecialchars($_POST['name']), "\" />\n";			echo "\t\t</td>\n";			echo "\t</tr>\n";			if ($data->hasAlterSchemaOwner()) {				$users = $data->getUsers();				echo "<tr><th class=\"data left required\">{$lang['strowner']}</th>\n";					echo "<td class=\"data2\"><select name=\"owner\">";					while (!$users->EOF) {						$uname = $users->fields['usename'];						echo "<option value=\"", htmlspecialchars($uname), "\"",						($uname == $_POST['owner']) ? ' selected="selected"' : '', ">", htmlspecialchars($uname), "</option>\n";						$users->moveNext();					}					echo "</select></td></tr>\n";			}			else 				echo "<input name=\"owner\" value=\"{$_POST['owner']}\" type=\"hidden\" />";			echo "\t<tr>\n";			echo "\t\t<th class=\"data\">{$lang['strcomment']}</th>\n";			echo "\t\t<td class=\"data1\"><textarea cols=\"32\" rows=\"3\"name=\"comment\">", htmlspecialchars($_POST['comment']), "</textarea></td>\n";			echo "\t</tr>\n";			echo "</table>\n";			echo "<p><input type=\"hidden\" name=\"action\" value=\"alter\" />\n";			echo "<input type=\"hidden\" name=\"schema\" value=\"", htmlspecialchars($_POST['schema']), "\" />\n";			echo $misc->form;			echo "<input type=\"submit\" name=\"alter\" value=\"{$lang['stralter']}\" />\n";			echo "<input type=\"submit\" name=\"cancel\" value=\"{$lang['strcancel']}\" /></p>\n";			echo "</form>\n";		} else {			echo "<p>{$lang['strnodata']}</p>\n";		}	}	/**	 * Save the form submission containing changes to a schema	 */	function doSaveAlter($msg = '') {		global $data, $misc, $lang, $_reload_browser;		$status = $data->updateSchema($_POST['schema'], $_POST['comment'], $_POST['name'], $_POST['owner']);		if ($status == 0) {			$_reload_browser = true;			doDefault($lang['strschemaaltered']);		}		else			doAlter($lang['strschemaalteredbad']);	}	/**	 * Show confirmation of drop and perform actual drop	 */	function doDrop($confirm) {		global $data, $misc;		global $lang, $_reload_browser;		if (empty($_REQUEST['nsp']) && empty($_REQUEST['ma'])) {			doDefault($lang['strspecifyschematodrop']);			exit();		}		if ($confirm) {			$misc->printTrail('schema');			$misc->printTitle($lang['strdrop'],'pg.schema.drop');			echo "<form action=\"schemas.php\" method=\"post\">\n";			//If multi drop			if (isset($_REQUEST['ma'])) {				foreach($_REQUEST['ma'] as $v) {					$a = unserialize(htmlspecialchars_decode($v, ENT_QUOTES));					echo '<p>', sprintf($lang['strconfdropschema'], $misc->printVal($a['nsp'])), "</p>\n";					echo '<input type="hidden" name="nsp[]" value="', htmlspecialchars($a['nsp']), "\" />\n";				}			}			else {				echo "<p>", sprintf($lang['strconfdropschema'], $misc->printVal($_REQUEST['nsp'])), "</p>\n";				echo "<input type=\"hidden\" name=\"nsp\" value=\"", htmlspecialchars($_REQUEST['nsp']), "\" />\n";			}			echo "<p><input type=\"checkbox\" id=\"cascade\" name=\"cascade\" /> <label for=\"cascade\">{$lang['strcascade']}</label></p>\n";			echo "<p><input type=\"hidden\" name=\"action\" value=\"drop\" />\n";			echo "<input type=\"hidden\" name=\"database\" value=\"", htmlspecialchars($_REQUEST['database']), "\" />\n";			echo $misc->form;			echo "<input type=\"submit\" name=\"drop\" value=\"{$lang['strdrop']}\" />\n";			echo "<input type=\"submit\" name=\"cancel\" value=\"{$lang['strcancel']}\" /></p>\n";			echo "</form>\n";		}		else {			if (is_array($_POST['nsp'])) {				$msg='';				$status = $data->beginTransaction();				if ($status == 0) {					foreach($_POST['nsp'] as $s) {						$status = $data->dropSchema($s, isset($_POST['cascade']));						if ($status == 0)							$msg.= sprintf('%s: %s<br />', htmlentities($s), $lang['strschemadropped']);						else {							$data->endTransaction();							doDefault(sprintf('%s%s: %s<br />', $msg, htmlentities($s), $lang['strschemadroppedbad']));							return;						}					}				}				if($data->endTransaction() == 0) {					// Everything went fine, back to the Default page....					$_reload_browser = true;					doDefault($msg);				}				else doDefault($lang['strschemadroppedbad']);			}			else{				$status = $data->dropSchema($_POST['nsp'], isset($_POST['cascade']));				if ($status == 0) {					$_reload_browser = true;					doDefault($lang['strschemadropped']);				}				else					doDefault($lang['strschemadroppedbad']);			}		}	}	/**	 * Displays options for database download	 */	function doExport($msg = '') {		global $data, $misc;		global $lang;		$misc->printTrail('schema');		$misc->printTabs('schema','export');		$misc->printMsg($msg);		echo "<form action=\"dbexport.php\" method=\"post\">\n";		echo "<table>\n";		echo "<tr><th class=\"data\">{$lang['strformat']}</th><th class=\"data\" colspan=\"2\">{$lang['stroptions']}</th></tr>\n";		// Data only		echo "<tr><th class=\"data left\" rowspan=\"2\">";		echo "<input type=\"radio\" id=\"what1\" name=\"what\" value=\"dataonly\" checked=\"checked\" /><label for=\"what1\">{$lang['strdataonly']}</label></th>\n";		echo "<td>{$lang['strformat']}</td>\n";		echo "<td><select name=\"d_format\">\n";		echo "<option value=\"copy\">COPY</option>\n";		echo "<option value=\"sql\">SQL</option>\n";		echo "</select>\n</td>\n</tr>\n";		echo "<tr><td><label for=\"d_oids\">{$lang['stroids']}</label></td><td><input type=\"checkbox\" id=\"d_oids\" name=\"d_oids\" /></td>\n</tr>\n";		// Structure only		echo "<tr><th class=\"data left\"><input type=\"radio\" id=\"what2\" name=\"what\" value=\"structureonly\" /><label for=\"what2\">{$lang['strstructureonly']}</label></th>\n";		echo "<td><label for=\"s_clean\">{$lang['strdrop']}</label></td><td><input type=\"checkbox\" id=\"s_clean\" name=\"s_clean\" /></td>\n</tr>\n";		// Structure and data		echo "<tr><th class=\"data left\" rowspan=\"3\">";		echo "<input type=\"radio\" id=\"what3\" name=\"what\" value=\"structureanddata\" /><label for=\"what3\">{$lang['strstructureanddata']}</label></th>\n";		echo "<td>{$lang['strformat']}</td>\n";		echo "<td><select name=\"sd_format\">\n";		echo "<option value=\"copy\">COPY</option>\n";		echo "<option value=\"sql\">SQL</option>\n";		echo "</select>\n</td>\n</tr>\n";		echo "<tr><td><label for=\"sd_clean\">{$lang['strdrop']}</label></td><td><input type=\"checkbox\" id=\"sd_clean\" name=\"sd_clean\" /></td>\n</tr>\n";		echo "<tr><td><label for=\"sd_oids\">{$lang['stroids']}</label></td><td><input type=\"checkbox\" id=\"sd_oids\" name=\"sd_oids\" /></td>\n</tr>\n";		echo "</table>\n";		echo "<h3>{$lang['stroptions']}</h3>\n";		echo "<p><input type=\"radio\" id=\"output1\" name=\"output\" value=\"show\" checked=\"checked\" /><label for=\"output1\">{$lang['strshow']}</label>\n";		echo "<br/><input type=\"radio\" id=\"output2\" name=\"output\" value=\"download\" /><label for=\"output2\">{$lang['strdownload']}</label>\n";		// MSIE cannot download gzip in SSL mode - it's just broken		if (!(strstr($_SERVER['HTTP_USER_AGENT'], 'MSIE') && isset($_SERVER['HTTPS']))) {			echo "<br /><input type=\"radio\" id=\"output3\" name=\"output\" value=\"gzipped\" /><label for=\"output3\">{$lang['strdownloadgzipped']}</label>\n";		}		echo "</p>\n";		echo "<p><input type=\"hidden\" name=\"action\" value=\"export\" />\n";		echo "<input type=\"hidden\" name=\"subject\" value=\"schema\" />\n";        echo "<input type=\"hidden\" name=\"database\" value=\"", htmlspecialchars($_REQUEST['database']), "\" />\n";        echo "<input type=\"hidden\" name=\"schema\" value=\"", htmlspecialchars($_REQUEST['schema']), "\" />\n";		echo $misc->form;		echo "<input type=\"submit\" value=\"{$lang['strexport']}\" /></p>\n";		echo "</form>\n";	}	/**	 * Generate XML for the browser tree.	 */	function doTree() {		global $misc, $data, $lang, $slony;		$schemas = $data->getSchemas();		$reqvars = $misc->getRequestVars('schema');		$attrs = array(			'text'   => field('nspname'),			'icon'   => 'Schema',			'toolTip'=> field('nspcomment'),			'action' => url('redirect.php',							$reqvars,							array(								'subject' => 'schema',								'schema'  => field('nspname')							)						),			'branch' => url('schemas.php',							$reqvars,							array(								'action'  => 'subtree',								'schema'  => field('nspname')							)						),		);		$misc->printTreeXML($schemas, $attrs);		exit;	}	function doSubTree() {		global $misc, $data, $lang;		$tabs = $misc->getNavTabs('schema');		$items = $misc->adjustTabsForTree($tabs);		$reqvars = $misc->getRequestVars('schema');		$attrs = array(			'text'   => noEscape(field('title')),			'icon'   => field('icon'),			'action' => url(field('url'),							$reqvars,							field('urlvars', array())						),			'branch' => url(field('url'),							$reqvars,							field('urlvars'),							array('action' => 'tree')						)		);		$misc->printTreeXML($items, $attrs);		exit;	}	if ($action == 'tree') doTree();	if ($action == 'subtree') doSubTree();	$misc->printHeader($lang['strschemas']);	$misc->printBody();	if (isset($_POST['cancel'])) $action = '';	switch ($action) {		case 'create':			if (isset($_POST['create'])) doSaveCreate();			else doCreate();			break;		case 'alter':			if (isset($_POST['alter'])) doSaveAlter();			else doAlter();			break;		case 'drop':			if (isset($_POST['drop'])) doDrop(false);			else doDrop(true);			break;		case 'export':			doExport();			break;		default:			doDefault();			break;	}	$misc->printFooter();?>
<?php	/**	 * Alternative SQL editing window	 *	 * $Id: history.php,v 1.3 2008/01/10 19:37:07 xzilla Exp $	 */	// Include application functions	include_once('./libraries/lib.inc.php');	$action = (isset($_REQUEST['action'])) ? $_REQUEST['action'] : '';	function doDefault() {		global $misc, $lang;		$onchange = "onchange=\"location.href='history.php?server=' + encodeURI(server.options[server.selectedIndex].value) + '&amp;database=' + encodeURI(database.options[database.selectedIndex].value) + '&amp;'\"";		$misc->printHeader($lang['strhistory']);				// Bring to the front always		echo "<body onload=\"window.focus();\">\n";			echo "<form action=\"history.php\" method=\"post\">\n";		$misc->printConnection($onchange);		echo "</form><br />";			if (!isset($_REQUEST['database'])) {			echo "<p>{$lang['strnodatabaseselected']}</p>\n";			return;		}					if (isset($_SESSION['history'][$_REQUEST['server']][$_REQUEST['database']])) {			include_once('classes/ArrayRecordSet.php');						   			$history = new ArrayRecordSet($_SESSION['history'][$_REQUEST['server']][$_REQUEST['database']]);						$columns = array(				'query' => array(					'title' => $lang['strsql'],					'field' => field('query'),				),				'paginate' => array(					'title' => $lang['strpaginate'],					'field' => field('paginate'),					'type' => 'yesno',				),				'actions' => array(					'title' => $lang['stractions'],				),			);			$actions = array(				'run' => array(					'title' => $lang['strexecute'],					'url'   => "sql.php?{$misc->href}&amp;nohistory=t&amp;",					'vars'  => array('query' => 'query', 'paginate' => 'paginate'),					'target' => 'detail',				),				'remove' => array(					'title' => $lang['strdelete'],					'url'   => "history.php?{$misc->href}&amp;action=confdelhistory&amp;",					'vars'  => array('queryid' => 'queryid'),				),			);			$misc->printTable($history, $columns, $actions, $lang['strnohistory']);		}		else echo "<p>{$lang['strnohistory']}</p>\n";		echo "<ul class=\"navlink\">\n";		if (isset($_SESSION['history'][$_REQUEST['server']][$_REQUEST['database']]) 				&& count($_SESSION['history'][$_REQUEST['server']][$_REQUEST['database']]))			echo "\t<li><a href=\"history.php?action=confclearhistory&amp;{$misc->href}\">{$lang['strclearhistory']}</a></li>\n";		echo "\t<li><a href=\"history.php?action=history&amp;{$misc->href}\">{$lang['strrefresh']}</a></li>\n</ul>\n";	}	function doDelHistory($qid, $confirm) {		global $misc, $lang;		if ($confirm) {			$misc->printHeader($lang['strhistory']);        		// Bring to the front always	        	echo "<body onload=\"window.focus();\">\n";						echo "<h3>{$lang['strdelhistory']}</h3>\n";			echo "<p>{$lang['strconfdelhistory']}</p>\n";			echo "<pre>", htmlentities($_SESSION['history'][$_REQUEST['server']][$_REQUEST['database']][$qid]['query']), "</pre>";			echo "<form action=\"history.php\" method=\"post\">\n";			echo "<input type=\"hidden\" name=\"action\" value=\"delhistory\" />\n";			echo "<input type=\"hidden\" name=\"queryid\" value=\"$qid\" />\n";			echo $misc->form;			echo "<input type=\"submit\" name=\"yes\" value=\"{$lang['stryes']}\" />\n";			echo "<input type=\"submit\" name=\"no\" value=\"{$lang['strno']}\" />\n";			echo "</form>\n";		}		else			unset($_SESSION['history'][$_REQUEST['server']][$_REQUEST['database']][$qid]);	}       	function doClearHistory($confirm) {		global $misc, $lang;		if ($confirm) {			$misc->printHeader($lang['strhistory']);        		// Bring to the front always	        	echo "<body onload=\"window.focus();\">\n";			echo "<h3>{$lang['strclearhistory']}</h3>\n";			echo "<p>{$lang['strconfclearhistory']}</p>\n";			echo "<form action=\"history.php\" method=\"post\">\n";			echo "<input type=\"hidden\" name=\"action\" value=\"clearhistory\" />\n";			echo $misc->form;			echo "<input type=\"submit\" name=\"yes\" value=\"{$lang['stryes']}\" />\n";			echo "<input type=\"submit\" name=\"no\" value=\"{$lang['strno']}\" />\n";			echo "</form>\n";		}		else			unset($_SESSION['history'][$_REQUEST['server']][$_REQUEST['database']]);	}																																									switch ($action) {		case 'confdelhistory':			doDelHistory($_REQUEST['queryid'], true);			break;		case 'delhistory':			if (isset($_POST['yes'])) doDelHistory($_REQUEST['queryid'], false);			doDefault();			break;		case 'confclearhistory':			doClearHistory(true);			break;		case 'clearhistory':			if (isset($_POST['yes'])) doClearHistory(false);			doDefault();			break;		default:			doDefault();	}																						// Set the name of the window	$misc->setWindowName('history');	$misc->printFooter();	?>
<?php	/**	 * Manage fulltext configurations, dictionaries and mappings	 *	 * $Id: fulltext.php,v 1.6 2008/03/17 21:35:48 ioguix Exp $	 */	// Include application functions	include_once('./libraries/lib.inc.php');	$action = (isset($_REQUEST['action'])) ? $_REQUEST['action'] : '';	if (!isset($msg)) $msg = '';	function doDefault($msg = '') {		global $data, $misc;		global $lang;		$misc->printTrail('schema');		$misc->printTabs('schema','fulltext');		$misc->printTabs('fulltext','ftsconfigs');		$misc->printMsg($msg);		$cfgs = $data->getFtsConfigurations(false);		$columns = array(			'configuration' => array(				'title' => $lang['strftsconfig'],				'field' => field('name'),				'url'   => "fulltext.php?action=viewconfig&amp;{$misc->href}&amp;",				'vars'	=> array('ftscfg' => 'name'),			),			'schema' => array(				'title' => $lang['strschema'],				'field' => field('schema'),			),			'actions' => array(				'title' => $lang['stractions'],			),			'comment' => array(				'title' => $lang['strcomment'],				'field' => field('comment'),			),		);		$actions = array(			'drop' => array(				'title' => $lang['strdrop'],				'url'   => "fulltext.php?action=dropconfig&amp;{$misc->href}&amp;",				'vars'  => array('ftscfg' => 'name'),			),			'alter' => array(				'title' => $lang['stralter'],				'url'   => "fulltext.php?action=alterconfig&amp;{$misc->href}&amp;",				'vars'  => array('ftscfg' => 'name'),			),		);		$misc->printTable($cfgs, $columns, $actions, $lang['strftsnoconfigs']);		echo "<ul class=\"navlink\">\n";		echo "\t<li><a href=\"fulltext.php?action=createconfig&amp;{$misc->href}\">{$lang['strftscreateconfig']}</a></li>\n";		echo "</ul>\n";	}	function doDropConfig($confirm) {		global $data, $data, $misc;		global $lang, $_reload_browser;		if ($confirm) {			$misc->printTrail('ftscfg');			$misc->printTitle($lang['strdrop'], 'pg.ftscfg.drop');			echo "<p>", sprintf($lang['strconfdropftsconfig'], $misc->printVal($_REQUEST['ftscfg'])), "</p>\n";			echo "<form action=\"fulltext.php\" method=\"post\">\n";			echo "<p><input type=\"checkbox\" id=\"cascade\" name=\"cascade\" /> <label for=\"cascade\">{$lang['strcascade']}</label></p>\n";			echo "<p><input type=\"hidden\" name=\"action\" value=\"dropconfig\" />\n";			echo "<input type=\"hidden\" name=\"database\" value=\"", htmlspecialchars($_REQUEST['database']), "\" />\n";			echo "<input type=\"hidden\" name=\"ftscfg\" value=\"", htmlspecialchars($_REQUEST['ftscfg']), "\" />\n";			echo $misc->form;			echo "<input type=\"submit\" name=\"drop\" value=\"{$lang['strdrop']}\" />\n";			echo "<input type=\"submit\" name=\"cancel\" value=\"{$lang['strcancel']}\" /></p>\n";			echo "</form>\n";		}		else {			$status = $data->dropFtsConfiguration($_POST['ftscfg'], isset($_POST['cascade']));			if ($status == 0) {				$_reload_browser = true;				doDefault($lang['strftsconfigdropped']);			}			else				doDefault($lang['strftsconfigdroppedbad']);		}	}	function doDropDict($confirm) {		global $data, $data, $misc;		global $lang, $_reload_browser;		if ($confirm) {			$misc->printTrail('ftscfg'); // TODO: change to smth related to dictionary			$misc->printTitle($lang['strdrop'], 'pg.ftsdict.drop');			echo "<p>", sprintf($lang['strconfdropftsdict'], $misc->printVal($_REQUEST['ftsdict'])), "</p>\n";			echo "<form action=\"fulltext.php\" method=\"post\">\n";			echo "<p><input type=\"checkbox\" id=\"cascade\" name=\"cascade\" /> <label for=\"cascade\">{$lang['strcascade']}</label></p>\n";			echo "<p><input type=\"hidden\" name=\"action\" value=\"dropdict\" />\n";			echo "<input type=\"hidden\" name=\"database\" value=\"", htmlspecialchars($_REQUEST['database']), "\" />\n";			echo "<input type=\"hidden\" name=\"ftsdict\" value=\"", htmlspecialchars($_REQUEST['ftsdict']), "\" />\n";			//echo "<input type=\"hidden\" name=\"ftscfg\" value=\"", htmlspecialchars($_REQUEST['ftscfg']), "\" />\n";			echo "<input type=\"hidden\" name=\"prev_action\" value=\"viewdicts\" /></p>\n";			echo $misc->form;			echo "<input type=\"submit\" name=\"drop\" value=\"{$lang['strdrop']}\" />\n";			echo "<input type=\"submit\" name=\"cancel\" value=\"{$lang['strcancel']}\" /></p>\n";			echo "</form>\n";		}		else {			$status = $data->dropFtsDictionary($_POST['ftsdict'], isset($_POST['cascade']));			if ($status == 0) {				$_reload_browser = true;				doViewDicts($lang['strftsdictdropped']);			}			else				doViewDicts($lang['strftsdictdroppedbad']);		}	}	/**	 * Displays a screen where one can enter a new FTS configuration	 */	function doCreateConfig($msg = '') {		global $data, $misc;		global $lang;		include_once('./classes/Gui.php');		$server_info = $misc->getServerInfo();		if (!isset($_POST['formName'])) $_POST['formName'] = '';		if (!isset($_POST['formParser'])) $_POST['formParser'] = '';		if (!isset($_POST['formTemplate'])) $_POST['formTemplate'] = '';		if (!isset($_POST['formWithMap'])) $_POST['formWithMap'] = '';		if (!isset($_POST['formComment'])) $_POST['formComment'] = '';		// Fetch all FTS configurations from the database		$ftscfgs = $data->getFtsConfigurations();		// Fetch all FTS parsers from the database		$ftsparsers = $data->getFtsParsers();		$misc->printTrail('schema');		$misc->printTitle($lang['strftscreateconfig'], 'pg.ftscfg.create');		$misc->printMsg($msg);		echo "<form action=\"fulltext.php\" method=\"post\">\n";		echo "<table>\n";		/* conf name */		echo "\t<tr>\n\t\t<th class=\"data left required\">{$lang['strname']}</th>\n";		echo "\t\t<td class=\"data1\"><input name=\"formName\" size=\"32\" maxlength=\"{$data->_maxNameLen}\" value=\"",			htmlspecialchars($_POST['formName']), "\" /></td>\n\t</tr>\n";		// Template		echo "\t<tr>\n\t\t<th class=\"data left\">{$lang['strftstemplate']}</th>\n";		echo "\t\t<td class=\"data1\">";		$tpls = array();		$tplsel = '';		while (!$ftscfgs->EOF) {			$data->fieldClean($ftscfgs->fields['schema']);			$data->fieldClean($ftscfgs->fields['name']);			$tplname = $ftscfgs->fields['schema'] .'.'. $ftscfgs->fields['name'];			$tpls[$tplname] = serialize(array(				'name' => $ftscfgs->fields['name'],				'schema' => $ftscfgs->fields['schema']			));			if ($_POST['formTemplate'] == $tpls[$tplname]) {				$tplsel = htmlspecialchars($tpls[$tplname]);			}			$ftscfgs->moveNext();		}		echo GUI::printCombo($tpls, 'formTemplate', true, $tplsel, false);		echo "\n\t\t</td>\n\t</tr>\n";		// Parser		echo "\t<tr>\n\t\t<th class=\"data left\">{$lang['strftsparser']}</th>\n";		echo "\t\t<td class=\"data1\">\n";		$ftsparsers_ = array();		$ftsparsel = '';		while (!$ftsparsers->EOF) {			$data->fieldClean($ftsparsers->fields['schema']);			$data->fieldClean($ftsparsers->fields['name']);			$parsername = $ftsparsers->fields['schema'] .'.'. $ftsparsers->fields['name'];						$ftsparsers_[$parsername] = serialize(array(				'parser' => $ftsparsers->fields['name'],				'schema' => $ftsparsers->fields['schema']			));			if ($_POST['formParser'] == $ftsparsers_[$parsername]) {				$ftsparsel = htmlspecialchars($ftsparsers_[$parsername]);			}			$ftsparsers->moveNext();		}		echo GUI::printCombo($ftsparsers_, 'formParser', true, $ftsparsel, false);		echo "\n\t\t</td>\n\t</tr>\n";		// Comment		echo "\t<tr>\n\t\t<th class=\"data left\">{$lang['strcomment']}</th>\n";		echo "\t\t<td class=\"data1\"><textarea name=\"formComment\" rows=\"3\" cols=\"32\">",			htmlspecialchars($_POST['formComment']), "</textarea></td>\n\t</tr>\n";		echo "</table>\n";		echo "<p>\n";		echo "<input type=\"hidden\" name=\"action\" value=\"createconfig\" />\n";		echo "<input type=\"hidden\" name=\"database\" value=\"", htmlspecialchars($_REQUEST['database']), "\" />\n";		echo $misc->form;		echo "<input type=\"submit\" name=\"create\" value=\"{$lang['strcreate']}\" />\n";		echo "<input type=\"submit\" name=\"cancel\" value=\"{$lang['strcancel']}\" />\n";		echo "</p>\n";		echo "</form>\n";	}	/**	 * Actually creates the new FTS configuration in the database	 */	function doSaveCreateConfig() {		global $data, $lang, $_reload_browser;		$err = '';		// Check that they've given a name		if ($_POST['formName'] == '') $err .= "{$lang['strftsconfigneedsname']}<br />";				if (($_POST['formParser'] != '') && ($_POST['formTemplate'] != ''))  $err .= "{$lang['strftscantparsercopy']}<br />";		if ($err != '') return doCreateConfig($err);		if ($_POST['formParser'] != '') $formParser = unserialize($_POST['formParser']);		else $formParser = '';		if ($_POST['formTemplate'] != '') $formTemplate = unserialize($_POST['formTemplate']);		else $formTemplate = '';		$status = $data->createFtsConfiguration($_POST['formName'], $formParser, $formTemplate, $_POST['formComment']);		if ($status == 0) {			$_reload_browser = true;			doDefault($lang['strftsconfigcreated']);		}		else			doCreateConfig($lang['strftsconfigcreatedbad']);	}	/**	 * Display a form to permit editing FTS configuration properies.	 */	function doAlterConfig($msg = '') {		global $data, $misc, $lang;		$misc->printTrail('ftscfg');		$misc->printTitle($lang['stralter'], 'pg.ftscfg.alter');		$misc->printMsg($msg);		$ftscfg = $data->getFtsConfigurationByName($_REQUEST['ftscfg']);		if ($ftscfg->recordCount() > 0) {			if (!isset($_POST['formComment'])) $_POST['formComment'] = $ftscfg->fields['comment'];			if (!isset($_POST['ftscfg'])) $_POST['ftscfg'] = $_REQUEST['ftscfg'];			if (!isset($_POST['formName'])) $_POST['formName'] = $_REQUEST['ftscfg'];			if (!isset($_POST['formParser'])) $_POST['formParser'] = '';			// Fetch all FTS parsers from the database			$ftsparsers = $data->getFtsParsers();			echo "<form action=\"fulltext.php\" method=\"post\">\n";			echo "<table>\n";			echo "\t<tr>\n";			echo "\t\t<th class=\"data left required\">{$lang['strname']}</th>\n";			echo "\t\t<td class=\"data1\">";			echo "\t\t\t<input name=\"formName\" size=\"32\" maxlength=\"{$data->_maxNameLen}\" value=\"",				htmlspecialchars($_POST['formName']), "\" />\n";			echo "\t\t</td>\n";			echo "\t</tr>\n";			// Comment			echo "\t<tr>\n";			echo "\t\t<th class=\"data\">{$lang['strcomment']}</th>\n";			echo "\t\t<td class=\"data1\"><textarea cols=\"32\" rows=\"3\"name=\"formComment\">", htmlspecialchars($_POST['formComment']), "</textarea></td>\n";			echo "\t</tr>\n";			echo "</table>\n";			echo "<p><input type=\"hidden\" name=\"action\" value=\"alterconfig\" />\n";			echo "<input type=\"hidden\" name=\"ftscfg\" value=\"", htmlspecialchars($_POST['ftscfg']), "\" />\n";			echo $misc->form;			echo "<input type=\"submit\" name=\"alter\" value=\"{$lang['stralter']}\" />\n";			echo "<input type=\"submit\" name=\"cancel\" value=\"{$lang['strcancel']}\" /></p>\n";			echo "</form>\n";		} else {			echo "<p>{$lang['strnodata']}</p>\n";		}	}	/**	 * Save the form submission containing changes to a FTS configuration	 */	function doSaveAlterConfig() {		global $data, $misc, $lang;		$status = $data->updateFtsConfiguration($_POST['ftscfg'], $_POST['formComment'], $_POST['formName']);		if ($status == 0)			doDefault($lang['strftsconfigaltered']);		else			doAlterConfig($lang['strftsconfigalteredbad']);	}	/**	 * View list of FTS parsers	 */	function doViewParsers($msg = '') {		global $data, $misc;		global $lang;		$misc->printTrail('schema');		$misc->printTabs('schema','fulltext');		$misc->printTabs('fulltext','ftsparsers');		$misc->printMsg($msg);		$parsers = $data->getFtsParsers(false);		$columns = array(			'schema' => array(				'title' => $lang['strschema'],				'field' => field('schema'),			),			'name' => array(				'title' => $lang['strname'],				'field' => field('name'),			),			'comment' => array(				'title' => $lang['strcomment'],				'field' => field('comment'),			),		);		$actions = array();		$misc->printTable($parsers, $columns, $actions, $lang['strftsnoparsers']);		//TODO: create parser		//echo "<ul class=\"navlink\">\n";		//echo "\t<li><a href=\"#\">{$lang['strftscreateparser']}</a></li>\n";		//echo "</ul>\n";	}	/**	 * View list of FTS dictionaries	 */	function doViewDicts($msg = '') {		global $data, $misc;		global $lang;		$misc->printTrail('schema');		$misc->printTabs('schema','fulltext');		$misc->printTabs('fulltext','ftsdicts');		$misc->printMsg($msg);		$dicts = $data->getFtsDictionaries(false);		$columns = array(			'schema' => array(				'title' => $lang['strschema'],				'field' => field('schema'),			),			'name' => array(				'title' => $lang['strname'],				'field' => field('name'),			),			'actions' => array(				'title' => $lang['stractions'],			),			'comment' => array(				'title' => $lang['strcomment'],				'field' => field('comment'),			),		);		$actions = array(			'drop' => array(				'title' => $lang['strdrop'],				'url'   => "fulltext.php?action=dropdict&amp;{$misc->href}&amp;",				'vars'  => array('ftsdict' => 'name'),			),			'alter' => array(				'title' => $lang['stralter'],				'url'   => "fulltext.php?action=alterdict&amp;{$misc->href}&amp;",				'vars'  => array('ftsdict' => 'name'),			),		);		$misc->printTable($dicts, $columns, $actions, $lang['strftsnodicts']);		echo "<ul class=\"navlink\">\n";		echo "\t<li><a href=\"fulltext.php?action=createdict&amp;{$misc->href}&amp;\">{$lang['strftscreatedict']}</a></li>\n";		echo "</ul>\n";	}	/**	 * View details of FTS configuration given	 */	function doViewConfig($ftscfg, $msg = '') {		global $data, $misc;		global $lang;		$misc->printTrail('ftscfg');		$misc->printTabs('schema','fulltext');		$misc->printTabs('fulltext','ftsconfigs');		$misc->printMsg($msg);		echo "<h3>{$lang['strftsconfigmap']}</h3>\n";		$map = $data->getFtsConfigurationMap($ftscfg);		$columns = array(			'name' => array(				'title' => $lang['strftsmapping'],				'field' => field('name'),			),			'dictionaries' => array(				'title' => $lang['strftsdicts'],				'field' => field('dictionaries'),			),			'actions' => array(				'title' => $lang['stractions'],			),			'comment' => array(				'title' => $lang['strcomment'],				'field' => field('description'),			),		);		$actions = array(			'drop' => array(				'title' => $lang['strdrop'],				'url'   => "fulltext.php?action=dropmapping&amp;{$misc->href}&amp;",				'vars'  => array('mapping' => 'name', 'ftscfg' => 'cfgname'),				'multiaction' => 'dropmapping',			),			'alter' => array(				'title' => $lang['stralter'],				'url'   => "fulltext.php?action=altermapping&amp;{$misc->href}&amp;",				'vars'  => array('mapping' => 'name', 'ftscfg' => 'cfgname'),			),			'multiactions' => array(				'keycols' => array('mapping' => 'name'),				'url' => 'fulltext.php',				'default' => null,				'vars'  => array('ftscfg' => $ftscfg),			),		);		$misc->printTable($map, $columns, $actions, $lang['strftsemptymap']);		echo "<ul class=\"navlink\">\n";		echo "\t<li><a href=\"fulltext.php?action=addmapping&amp;{$misc->href}&ftscfg={$ftscfg}\">{$lang['strftsaddmapping']}</a></li>\n";		echo "</ul>\n";	}	/**	 * Displays a screen where one can enter a details of a new FTS dictionary	 */	function doCreateDict($msg = '') {		global $data, $misc;		global $lang;		include_once('./classes/Gui.php');		$server_info = $misc->getServerInfo();		if (!isset($_POST['formName'])) $_POST['formName'] = '';		if(!isset($_POST['formIsTemplate'])) $_POST['formIsTemplate'] = false;		if (!isset($_POST['formTemplate'])) $_POST['formTemplate'] = '';		if (!isset($_POST['formLexize'])) $_POST['formLexize'] = '';		if (!isset($_POST['formInit'])) $_POST['formInit'] = '';		if (!isset($_POST['formOption'])) $_POST['formOption'] = '';		if (!isset($_POST['formComment'])) $_POST['formComment'] = '';		// Fetch all FTS dictionaries from the database		$ftstpls = $data->getFtsDictionaryTemplates();		$misc->printTrail('schema');		// TODO: create doc links		$misc->printTitle($lang['strftscreatedict'], 'pg.ftsdict.create');		$misc->printMsg($msg);		echo "<form action=\"fulltext.php\" method=\"post\">\n";		echo "<table>\n";		echo "\t<tr>\n\t\t<th class=\"data left required\">{$lang['strname']}</th>\n";		echo "\t\t<td class=\"data1\"><input name=\"formName\" size=\"32\" maxlength=\"{$data->_maxNameLen}\" value=\"",			htmlspecialchars($_POST['formName']), "\" />&nbsp;",			"<input type=\"checkbox\" name=\"formIsTemplate\" id=\"formIsTemplate\"", $_POST['formIsTemplate'] ? ' checked="checked" ' : '', " />\n",			"<label for=\"formIsTemplate\">{$lang['strftscreatedicttemplate']}</label></td>\n\t</tr>\n";		// Template		echo "\t<tr>\n\t\t<th class=\"data left\">{$lang['strftstemplate']}</th>\n";		echo "\t\t<td class=\"data1\">";		$tpls = array();		$tplsel = '';		while (!$ftstpls->EOF) {			$data->fieldClean($ftstpls->fields['schema']);			$data->fieldClean($ftstpls->fields['name']);			$tplname = $ftstpls->fields['schema'] .'.'. $ftstpls->fields['name'];			$tpls[$tplname] = serialize(array(				'name' => $ftstpls->fields['name'],				'schema' => $ftstpls->fields['schema']			));			if ($_POST['formTemplate'] == $tpls[$tplname]) {				$tplsel = htmlspecialchars($tpls[$tplname]);			}			$ftstpls->moveNext();		}		echo GUI::printCombo($tpls, 'formTemplate', true, $tplsel, false);		echo "\n\t\t</td>\n\t</tr>\n";		// TODO: what about maxlengths?		// Lexize		echo "\t<tr>\n\t\t<th class=\"data left\">{$lang['strftslexize']}</th>\n";		echo "\t\t<td class=\"data1\"><input name=\"formLexize\" size=\"32\" maxlength=\"1000\" value=\"",			htmlspecialchars($_POST['formLexize']), "\" ", isset($_POST['formIsTemplate']) ? '' : ' disabled="disabled" ',			"/></td>\n\t</tr>\n";		// Init		echo "\t<tr>\n\t\t<th class=\"data left\">{$lang['strftsinit']}</th>\n";		echo "\t\t<td class=\"data1\"><input name=\"formInit\" size=\"32\" maxlength=\"1000\" value=\"",			htmlspecialchars($_POST['formInit']), "\"", @$_POST['formIsTemplate'] ? '' : ' disabled="disabled" ',			"/></td>\n\t</tr>\n";		// Option		echo "\t<tr>\n\t\t<th class=\"data left\">{$lang['strftsoptionsvalues']}</th>\n";		echo "\t\t<td class=\"data1\"><input name=\"formOption\" size=\"32\" maxlength=\"1000\" value=\"",			htmlspecialchars($_POST['formOption']), "\" /></td>\n\t</tr>\n";		// Comment		echo "\t<tr>\n\t\t<th class=\"data left\">{$lang['strcomment']}</th>\n";		echo "\t\t<td class=\"data1\"><textarea name=\"formComment\" rows=\"3\" cols=\"32\">",			htmlspecialchars($_POST['formComment']), "</textarea></td>\n\t</tr>\n";		echo "</table>\n";		echo "<p>\n";		echo "<input type=\"hidden\" name=\"action\" value=\"createdict\" />\n";		echo "<input type=\"hidden\" name=\"database\" value=\"", htmlspecialchars($_REQUEST['database']), "\" />\n";		echo $misc->form;		echo "<input type=\"submit\" name=\"create\" value=\"{$lang['strcreate']}\" />\n";		echo "<input type=\"submit\" name=\"cancel\" value=\"{$lang['strcancel']}\" />\n";		echo "</p>\n";		echo "</form>\n",			"<script type=\"text/javascript\">								function templateOpts() {					isTpl = document.getElementsByName('formIsTemplate')[0].checked;					document.getElementsByName('formTemplate')[0].disabled = isTpl;					document.getElementsByName('formOption')[0].disabled = isTpl;					document.getElementsByName('formLexize')[0].disabled = !isTpl;					document.getElementsByName('formInit')[0].disabled = !isTpl;				}								document.getElementsByName('formIsTemplate')[0].onchange = templateOpts;				templateOpts();			</script>\n";	}	/**	 * Actually creates the new FTS dictionary in the database	 */	function doSaveCreateDict() {		global $data, $lang, $_reload_browser;		// Check that they've given a name		if ($_POST['formName'] == '') doCreateDict($lang['strftsdictneedsname']);		else {			if(!isset($_POST['formIsTemplate'])) $_POST['formIsTemplate'] = false;			if(isset($_POST['formTemplate']))				$formTemplate = unserialize($_POST['formTemplate']);			else				$formTemplate = '';			if(!isset($_POST['formLexize'])) $_POST['formLexize'] = '';			if(!isset($_POST['formInit'])) $_POST['formInit'] = '';			if(!isset($_POST['formOption'])) $_POST['formOption'] = '';						$status = $data->createFtsDictionary($_POST['formName'], $_POST['formIsTemplate'],				$formTemplate, $_POST['formLexize'],				$_POST['formInit'], $_POST['formOption'], $_POST['formComment']			);						if ($status == 0) {				$_reload_browser = true;				doViewDicts($lang['strftsdictcreated']);			}			else				doCreateDict($lang['strftsdictcreatedbad']);		}	}	/**	 * Display a form to permit editing FTS dictionary properies.	 */	function doAlterDict($msg = '') {		global $data, $misc, $lang;		$misc->printTrail('ftscfg'); // TODO: change to smth related to dictionary		$misc->printTitle($lang['stralter'], 'pg.ftsdict.alter');		$misc->printMsg($msg);		$ftsdict = $data->getFtsDictionaryByName($_REQUEST['ftsdict']);		if ($ftsdict->recordCount() > 0) {			if (!isset($_POST['formComment'])) $_POST['formComment'] = $ftsdict->fields['comment'];			if (!isset($_POST['ftsdict'])) $_POST['ftsdict'] = $_REQUEST['ftsdict'];			if (!isset($_POST['formName'])) $_POST['formName'] = $_REQUEST['ftsdict'];			echo "<form action=\"fulltext.php\" method=\"post\">\n";			echo "<table>\n";			echo "\t<tr>\n";			echo "\t\t<th class=\"data left required\">{$lang['strname']}</th>\n";			echo "\t\t<td class=\"data1\">";			echo "\t\t\t<input name=\"formName\" size=\"32\" maxlength=\"{$data->_maxNameLen}\" value=\"",				htmlspecialchars($_POST['formName']), "\" />\n";			echo "\t\t</td>\n";			echo "\t</tr>\n";			// Comment			echo "\t<tr>\n";			echo "\t\t<th class=\"data\">{$lang['strcomment']}</th>\n";			echo "\t\t<td class=\"data1\"><textarea cols=\"32\" rows=\"3\"name=\"formComment\">", htmlspecialchars($_POST['formComment']), "</textarea></td>\n";			echo "\t</tr>\n";			echo "</table>\n";			echo "<p><input type=\"hidden\" name=\"action\" value=\"alterdict\" />\n";			echo "<input type=\"hidden\" name=\"ftsdict\" value=\"", htmlspecialchars($_POST['ftsdict']), "\" />\n";			echo "<input type=\"hidden\" name=\"prev_action\" value=\"viewdicts\" /></p>\n";			echo $misc->form;			echo "<input type=\"submit\" name=\"alter\" value=\"{$lang['stralter']}\" />\n";			echo "<input type=\"submit\" name=\"cancel\" value=\"{$lang['strcancel']}\" /></p>\n";			echo "</form>\n";		} else {			echo "<p>{$lang['strnodata']}</p>\n";		}	}	/**	 * Save the form submission containing changes to a FTS dictionary	 */	function doSaveAlterDict() {		global $data, $misc, $lang;		$status = $data->updateFtsDictionary($_POST['ftsdict'], $_POST['formComment'], $_POST['formName']);		if ($status == 0)			doViewDicts($lang['strftsdictaltered']);		else			doAlterDict($lang['strftsdictalteredbad']);	}	/**	 * Show confirmation of drop and perform actual drop of FTS mapping	 */	function doDropMapping($confirm) {		global $data, $misc;		global $lang, $_reload_drop_database;		if (empty($_REQUEST['mapping']) && empty($_REQUEST['ma'])) {			doDefault($lang['strftsspecifymappingtodrop']);			return;		}		if (empty($_REQUEST['ftscfg'])) {			doDefault($lang['strftsspecifyconfigtoalter']);			return;		}		if ($confirm) {			$misc->printTrail('ftscfg'); // TODO: proper breadcrumbs			$misc->printTitle($lang['strdrop'], 'pg.ftscfg.alter');			echo "<form action=\"fulltext.php\" method=\"post\">\n";			// Case of multiaction drop			if (isset($_REQUEST['ma'])) {				foreach($_REQUEST['ma'] as $v) {					$a = unserialize(htmlspecialchars_decode($v, ENT_QUOTES));					echo "<p>", sprintf($lang['strconfdropftsmapping'], $misc->printVal($a['mapping']), $misc->printVal($_REQUEST['ftscfg'])), "</p>\n";					printf('<input type="hidden" name="mapping[]" value="%s" />', htmlspecialchars($a['mapping']));				}			} else {				echo "<p>", sprintf($lang['strconfdropftsmapping'], $misc->printVal($_REQUEST['mapping']), $misc->printVal($_REQUEST['ftscfg'])), "</p>\n";				echo "<input type=\"hidden\" name=\"mapping\" value=\"", htmlspecialchars($_REQUEST['mapping']), "\" />\n";			}			echo "<input type=\"hidden\" name=\"ftscfg\" value=\"{$_REQUEST['ftscfg']}\" />\n";			echo "<input type=\"hidden\" name=\"action\" value=\"dropmapping\" />\n";            echo "<input type=\"hidden\" name=\"prev_action\" value=\"viewconfig\" /></p>\n";            			echo $misc->form;			echo "<input type=\"submit\" name=\"drop\" value=\"{$lang['strdrop']}\" />\n";			echo "<input type=\"submit\" name=\"cancel\" value=\"{$lang['strcancel']}\" />\n";			echo "</form>\n";		} else {			// Case of multiaction drop			if (is_array($_REQUEST['mapping'])) {				$status = $data->changeFtsMapping($_REQUEST['ftscfg'], $_REQUEST['mapping'], 'drop');				if ($status != 0) {					doViewConfig($_REQUEST['ftscfg'], $lang['strftsmappingdroppedbad']);					return;				}				doViewConfig($_REQUEST['ftscfg'], $lang['strftsmappingdropped']);			} else {				$status = $data->changeFtsMapping($_REQUEST['ftscfg'], array($_REQUEST['mapping']), 'drop');				if ($status == 0) {					doViewConfig($_REQUEST['ftscfg'], $lang['strftsmappingdropped']);				} else {					doViewConfig($_REQUEST['ftscfg'], $lang['strftsmappingdroppedbad']);				}			}		}	}	function doAlterMapping($msg = '') {		global $data, $misc, $lang;		$misc->printTrail('ftscfg');		$misc->printTitle($lang['stralter'], 'pg.ftscfg.alter');		$misc->printMsg($msg);		$ftsdicts = $data->getFtsDictionaries();		if ($ftsdicts->recordCount() > 0) {			if (!isset($_POST['formMapping'])) $_POST['formMapping'] = @$_REQUEST['mapping'];			if (!isset($_POST['formDictionary'])) $_POST['formDictionary'] = '';			if (!isset($_POST['ftscfg'])) $_POST['ftscfg'] = $_REQUEST['ftscfg'];			echo "<form action=\"fulltext.php\" method=\"post\">\n";			echo "<table>\n";			echo "\t<tr>\n";			echo "\t\t<th class=\"data left required\">{$lang['strftsmapping']}</th>\n";			echo "\t\t<td class=\"data1\">";			// Case of multiaction drop			if (isset($_REQUEST['ma'])) {				$ma_mappings = array();				$ma_mappings_names = array();				foreach($_REQUEST['ma'] as $v) {					$a = unserialize(htmlspecialchars_decode($v, ENT_QUOTES));					printf('<input type="hidden" name="formMapping[]" value="%s" />', htmlspecialchars($a['mapping']));					$ma_mappings[] = $data->getFtsMappingByName($_POST['ftscfg'], $a['mapping']);					$ma_mappings_names[] = $a['mapping'];				}				echo implode(", ", $ma_mappings_names);			} else {				$mapping = $data->getFtsMappingByName($_POST['ftscfg'], $_POST['formMapping']);				echo $mapping->fields['name'];				echo "<input type=\"hidden\" name=\"formMapping\" value=\"", htmlspecialchars($_POST['formMapping']), "\" />\n";			}			echo "\t\t</td>\n";			echo "\t</tr>\n";			// Dictionary			echo "\t<tr>\n";			echo "\t\t<th class=\"data left required\">{$lang['strftsdict']}</th>\n";			echo "\t\t<td class=\"data1\">";			echo "\t\t\t<select name=\"formDictionary\">\n";			while (!$ftsdicts->EOF) {				$ftsdict = htmlspecialchars($ftsdicts->fields['name']);				echo "\t\t\t\t<option value=\"{$ftsdict}\"",					($ftsdict == $_POST['formDictionary'] || $ftsdict == @$mapping->fields['dictionaries'] || $ftsdict == @$ma_mappings[0]->fields['dictionaries']) ? ' selected="selected"' : '', ">{$ftsdict}</option>\n";				$ftsdicts->moveNext();			}			echo "\t\t</td>\n";			echo "\t</tr>\n";			echo "</table>\n";			echo "<p><input type=\"hidden\" name=\"action\" value=\"altermapping\" />\n";			echo "<input type=\"hidden\" name=\"ftscfg\" value=\"", htmlspecialchars($_POST['ftscfg']), "\" />\n";            echo "<input type=\"hidden\" name=\"prev_action\" value=\"viewconfig\" /></p>\n";            			echo $misc->form;			echo "<input type=\"submit\" name=\"alter\" value=\"{$lang['stralter']}\" />\n";			echo "<input type=\"submit\" name=\"cancel\" value=\"{$lang['strcancel']}\" /></p>\n";			echo "</form>\n";		} else {			echo "<p>{$lang['strftsnodictionaries']}</p>\n";		}	}	/**	 * Save the form submission containing changes to a FTS mapping	 */	function doSaveAlterMapping() {		global $data, $misc, $lang;		$mappingArray = (is_array($_POST['formMapping']) ? $_POST['formMapping'] : array($_POST['formMapping']));		$status = $data->changeFtsMapping($_POST['ftscfg'], $mappingArray, 'alter', $_POST['formDictionary']);		if ($status == 0)			doViewConfig($_POST['ftscfg'], $lang['strftsmappingaltered']);		else			doAlterMapping($lang['strftsmappingalteredbad']);	}	/**	 * Show the form to enter parameters of a new FTS mapping	 */	function doAddMapping($msg = '') {		global $data, $misc, $lang;		$misc->printTrail('ftscfg');		$misc->printTitle($lang['stralter'], 'pg.ftscfg.alter');		$misc->printMsg($msg);		$ftsdicts = $data->getFtsDictionaries();		if ($ftsdicts->recordCount() > 0) {			if (!isset($_POST['formMapping'])) $_POST['formMapping'] = '';			if (!isset($_POST['formDictionary'])) $_POST['formDictionary'] = '';			if (!isset($_POST['ftscfg'])) $_POST['ftscfg'] = $_REQUEST['ftscfg'];			$mappings = $data->getFtsMappings($_POST['ftscfg']);			echo "<form action=\"fulltext.php\" method=\"post\">\n";			echo "<table>\n";			echo "\t<tr>\n";			echo "\t\t<th class=\"data left required\">{$lang['strftsmapping']}</th>\n";			echo "\t\t<td class=\"data1\">";			echo "\t\t\t<select name=\"formMapping\">\n";			while (!$mappings->EOF) {				$mapping = htmlspecialchars($mappings->fields['name']);				$mapping_desc = htmlspecialchars($mappings->fields['description']);				echo "\t\t\t\t<option value=\"{$mapping}\"",					$mapping == $_POST['formMapping'] ? ' selected="selected"' : '', ">{$mapping}", $mapping_desc ? " - {$mapping_desc}" : "", "</option>\n";				$mappings->moveNext();			}			echo "\t\t</td>\n";			echo "\t</tr>\n";			// Dictionary			echo "\t<tr>\n";			echo "\t\t<th class=\"data left required\">{$lang['strftsdict']}</th>\n";			echo "\t\t<td class=\"data1\">";			echo "\t\t\t<select name=\"formDictionary\">\n";			while (!$ftsdicts->EOF) {				$ftsdict = htmlspecialchars($ftsdicts->fields['name']);				echo "\t\t\t\t<option value=\"{$ftsdict}\"",					$ftsdict == $_POST['formDictionary'] ? ' selected="selected"' : '', ">{$ftsdict}</option>\n";				$ftsdicts->moveNext();			}			echo "\t\t</td>\n";			echo "\t</tr>\n";			echo "</table>\n";			echo "<p><input type=\"hidden\" name=\"action\" value=\"addmapping\" />\n";			echo "<input type=\"hidden\" name=\"ftscfg\" value=\"", htmlspecialchars($_POST['ftscfg']), "\" />\n";			echo "<input type=\"hidden\" name=\"prev_action\" value=\"viewconfig\" /></p>\n";			echo $misc->form;			echo "<input type=\"submit\" name=\"add\" value=\"{$lang['stradd']}\" />\n";			echo "<input type=\"submit\" name=\"cancel\" value=\"{$lang['strcancel']}\" /></p>\n";			echo "</form>\n";		} else {			echo "<p>{$lang['strftsnodictionaries']}</p>\n";		}	}	/**	 * Save the form submission containing parameters of a new FTS mapping	 */	function doSaveAddMapping() {		global $data, $misc, $lang;		$mappingArray = (is_array($_POST['formMapping']) ? $_POST['formMapping'] : array($_POST['formMapping']));		$status = $data->changeFtsMapping($_POST['ftscfg'], $mappingArray, 'add', $_POST['formDictionary']);		if ($status == 0)			doViewConfig($_POST['ftscfg'], $lang['strftsmappingadded']);		else			doAddMapping($lang['strftsmappingaddedbad']);	}	/**	 * Generate XML for the browser tree.	 */	function doTree() {		global $misc, $data, $lang, $slony;		$tabs = $misc->getNavTabs('fulltext');		$items = $misc->adjustTabsForTree($tabs);		$reqvars = $misc->getRequestVars('ftscfg');		$attrs = array(			'text'   => noEscape(field('title')),			'icon'   => field('icon'),			'action' => url('fulltext.php',				$reqvars,				field('urlvars')			),			'branch' => url('fulltext.php',				$reqvars,				array(					'action'  => 'subtree',					'what'  => field('icon') // IZ: yeah, it's ugly, but I do not want to change navigation tabs arrays				)			),		);		$misc->printTreeXML($items, $attrs);		exit;	}	function doSubTree($what) {		global $misc, $data, $lang;		switch($what) {			case 'FtsCfg':				$items = $data->getFtsConfigurations(false);				$urlvars = array('action' => 'viewconfig', 'ftscfg' => field('name'));				break;			case 'FtsDict':				$items = $data->getFtsDictionaries(false);				$urlvars = array('action' => 'viewdicts');				break;			case 'FtsParser':				$items = $data->getFtsParsers(false);				$urlvars = array('action' => 'viewparsers');				break;			default:				exit;		}		$reqvars = $misc->getRequestVars('ftscfg');		$attrs = array(			'text'   => noEscape(field('name')),			'icon'   => $what,			'toolTip'=> field('comment'),			'action' => url('fulltext.php',				$reqvars,				$urlvars			),			'branch' => ifempty(field('branch'),				'',				url('fulltext.php',					$reqvars,					array(						'action'  => 'subtree',						'ftscfg'  => field('name')					)				)			),		);		$misc->printTreeXML($items, $attrs);		exit;	}	if ($action == 'tree') doTree();	if ($action == 'subtree') doSubTree($_REQUEST['what']);	$misc->printHeader($lang['strschemas']);	$misc->printBody();	if (isset($_POST['cancel'])) {		if (isset($_POST['prev_action'])) {			$action = $_POST['prev_action'];		} else {			$action = '';		}	}	switch ($action) {		case 'createconfig':			if (isset($_POST['create'])) doSaveCreateConfig();			else doCreateConfig();			break;		case 'alterconfig':			if (isset($_POST['alter'])) doSaveAlterConfig();			else doAlterConfig();			break;		case 'dropconfig':			if (isset($_POST['drop'])) doDropConfig(false);			else doDropConfig(true);			break;		case 'viewconfig':			doViewConfig($_REQUEST['ftscfg']);			break;		case 'viewparsers':			doViewParsers();			break;		case 'viewdicts':			doViewDicts();			break;		case 'createdict':			if (isset($_POST['create'])) doSaveCreateDict();			else doCreateDict();			break;		case 'alterdict':			if (isset($_POST['alter'])) doSaveAlterDict();			else doAlterDict();			break;		case 'dropdict':			if (isset($_POST['drop'])) doDropDict(false);			else doDropDict(true);			break;		case 'dropmapping':			if (isset($_POST['drop'])) doDropMapping(false);			else doDropMapping(true);			break;		case 'altermapping':			if (isset($_POST['alter'])) doSaveAlterMapping();			else doAlterMapping();			break;		case 'addmapping':			if (isset($_POST['add'])) doSaveAddMapping();			else doAddMapping();			break;		default:			doDefault();			break;	}	$misc->printFooter();?>
<?php	/**	 * Function library read in upon startup	 *	 * $Id: lib.inc.php,v 1.123 2008/04/06 01:10:35 xzilla Exp $	 */	include_once('./libraries/decorator.inc.php');	include_once('./lang/translations.php');	// Set error reporting level to max	error_reporting(E_ALL); 	// Application name	$appName = 'phpPgAdmin';	// Application version	$appVersion = '5.0';	// PostgreSQL and PHP minimum version	$postgresqlMinVer = '7.4';	$phpMinVer = '5.0';	// Check the version of PHP	if (version_compare(phpversion(), $phpMinVer, '<'))		exit(sprintf('Version of PHP not supported. Please upgrade to version %s or later.', $phpMinVer));	// Check to see if the configuration file exists, if not, explain	if (file_exists('conf/config.inc.php')) {		$conf = array();		include('./conf/config.inc.php');	}	else {		echo 'Configuration error: Copy conf/config.inc.php-dist to conf/config.inc.php and edit appropriately.';		exit;	}	// Configuration file version.  If this is greater than that in config.inc.php, then	// the app will refuse to run.  This and $conf['version'] should be incremented whenever	// backwards incompatible changes are made to config.inc.php-dist.	$conf['base_version'] = 16;	// Always include english.php, since it's the master language file	if (!isset($conf['default_lang'])) $conf['default_lang'] = 'english';	$lang = array();	require_once('./lang/recoded/english.php');	// Create Misc class references	require_once('./classes/Misc.php');	$misc = new Misc();	// Start session (if not auto-started)	if (!ini_get('session.auto_start')) {		session_name('PPA_ID');		session_start();	}	// Do basic PHP configuration checks	if (ini_get('magic_quotes_gpc')) {		$misc->stripVar($_GET);		$misc->stripVar($_POST);		$misc->stripVar($_COOKIE);		$misc->stripVar($_REQUEST);	}	// This has to be deferred until after stripVar above	$misc->setHREF();	$misc->setForm();	// Enforce PHP environment	ini_set('magic_quotes_runtime', 0);	ini_set('magic_quotes_sybase', 0);	ini_set('arg_separator.output', '&amp;');	// If login action is set, then set session variables	if (isset($_POST['loginServer']) && isset($_POST['loginUsername']) &&		isset($_POST['loginPassword_'.md5($_POST['loginServer'])])) {		$_server_info = $misc->getServerInfo($_POST['loginServer']);		$_server_info['username'] = $_POST['loginUsername'];		$_server_info['password'] = $_POST['loginPassword_'.md5($_POST['loginServer'])];		$misc->setServerInfo(null, $_server_info, $_POST['loginServer']);		// Check for shared credentials		if (isset($_POST['loginShared'])) {			$_SESSION['sharedUsername'] = $_POST['loginUsername'];			$_SESSION['sharedPassword'] = $_POST['loginPassword_'.md5($_POST['loginServer'])];		}		$_reload_browser = true;	}	/* select the theme */	unset($_theme);	$conf['theme'] = 'default';	// 1. Check for the theme from a request var	if (isset($_REQUEST['theme']) && is_file("./themes/{$_REQUEST['theme']}/global.css")) {		/* save the selected theme in cookie for a year */		setcookie('ppaTheme', $_REQUEST['theme'], time()+31536000);		$_theme = $_SESSION['ppaTheme'] = $conf['theme'] = $_REQUEST['theme'];	}	// 2. Check for theme session var	if (!isset($_theme) && isset($_SESSION['ppaTheme']) && is_file("./themes/{$_SESSION['ppaTheme']}/global.css")) {		$conf['theme']  = $_SESSION['ppaTheme'];	}	// 3. Check for theme in cookie var	if (!isset($_theme) && isset($_COOKIE['ppaTheme']) && is_file("./themes/{$_COOKIE['ppaTheme']}/global.css")) {		$conf['theme']  = $_COOKIE['ppaTheme'];	}	// Determine language file to import:	unset($_language);	// 1. Check for the language from a request var	if (isset($_REQUEST['language']) && isset($appLangFiles[$_REQUEST['language']])) {		/* save the selected language in cookie for a year */		setcookie('webdbLanguage', $_REQUEST['language'], time()+31536000);		$_language = $_REQUEST['language'];	}	// 2. Check for language session var	if (!isset($_language) && isset($_SESSION['webdbLanguage']) && isset($appLangFiles[$_SESSION['webdbLanguage']])) {		$_language = $_SESSION['webdbLanguage'];	}	// 3. Check for language in cookie var	if (!isset($_language) && isset($_COOKIE['webdbLanguage']) && isset($appLangFiles[$_COOKIE['webdbLanguage']])) {		$_language  = $_COOKIE['webdbLanguage'];	}	// 4. Check for acceptable languages in HTTP_ACCEPT_LANGUAGE var	if (!isset($_language) && $conf['default_lang'] == 'auto' && isset($_SERVER['HTTP_ACCEPT_LANGUAGE'])) {		// extract acceptable language tags		// (http://www.w3.org/Protocols/rfc2616/rfc2616-sec14.html#sec14.4)		preg_match_all('/\s*([a-z]{1,8}(?:-[a-z]{1,8})*)(?:;q=([01](?:.[0-9]{0,3})?))?\s*(?:,|$)/', strtolower($_SERVER['HTTP_ACCEPT_LANGUAGE']), $_m, PREG_SET_ORDER);		foreach($_m as $_l) {  // $_l[1] = language tag, [2] = quality			if (!isset($_l[2])) $_l[2] = 1;  // Default quality to 1			if ($_l[2] > 0 && $_l[2] <= 1 && isset($availableLanguages[$_l[1]])) {				// Build up array of (quality => language_file)				$_acceptLang[$_l[2]] = $availableLanguages[$_l[1]];			}		}		unset($_m);		unset($_l);		if (isset($_acceptLang)) {			// Sort acceptable languages by quality			krsort($_acceptLang, SORT_NUMERIC);			$_language = reset($_acceptLang);			unset($_acceptLang);		}	}	// 5. Otherwise resort to the default set in the config file	if (!isset($_language) && $conf['default_lang'] != 'auto' && isset($appLangFiles[$conf['default_lang']])) {		$_language = $conf['default_lang'];	}	// Import the language file	if (isset($_language)) {		include("./lang/recoded/{$_language}.php");		$_SESSION['webdbLanguage'] = $_language;	}	// Check for config file version mismatch	if (!isset($conf['version']) || $conf['base_version'] > $conf['version']) {		echo $lang['strbadconfig'];		exit;	}	// Check database support is properly compiled in	if (!function_exists('pg_connect')) {		echo $lang['strnotloaded'];		exit;	}	// Create data accessor object, if necessary	if (!isset($_no_db_connection)) {		if (!isset($_REQUEST['server'])) {			echo $lang['strnoserversupplied'];			exit;	    }		$_server_info = $misc->getServerInfo();		/* starting with PostgreSQL 9.0, we can set the application name */		if(isset($_server_info['pgVersion']) && $_server_info['pgVersion'] >= 9)			putenv("PGOPTIONS=--application_name={$appName}_{$appVersion}");		// Redirect to the login form if not logged in		if (!isset($_server_info['username'])) {			include('./login.php');			exit;		}		// Connect to the current database, or if one is not specified		// then connect to the default database.		if (isset($_REQUEST['database']))			$_curr_db = $_REQUEST['database'];		else			$_curr_db = $_server_info['defaultdb'];		include_once('./classes/database/Connection.php');		// Connect to database and set the global $data variable		$data = $misc->getDatabaseAccessor($_curr_db);		// If schema is defined and database supports schemas, then set the		// schema explicitly.		if (isset($_REQUEST['database']) && isset($_REQUEST['schema'])) {			$status = $data->setSchema($_REQUEST['schema']);			if ($status != 0) {				echo $lang['strbadschema'];				exit;			}		}		// Get database encoding		$dbEncoding = $data->getDatabaseEncoding();		// Set client encoding to database encoding		if ($dbEncoding != '') {			// Explicitly change client encoding if it's different to server encoding.			if (function_exists('pg_client_encoding'))				$currEncoding = pg_client_encoding($data->conn->_connectionID);			elseif (function_exists('pg_clientencoding'))				$currEncoding = pg_clientencoding($data->conn->_connectionID);			else				$currEncoding = null;			if ($currEncoding != $dbEncoding) {				$status = $data->setClientEncoding($dbEncoding);				if ($status != 0 && $status != -99) {					echo $lang['strbadencoding'];					exit;				}			}			// Override $lang['appcharset']			if (isset($data->codemap[$dbEncoding]))				$lang['appcharset'] = $data->codemap[$dbEncoding];			else				$lang['appcharset'] = $dbEncoding;		}		// Load Slony if required		if ($_server_info['slony_support']) {			include('./classes/plugins/Slony.php');			$slony = new Slony();		}	}	if (!function_exists("htmlspecialchars_decode")) {		function htmlspecialchars_decode($string, $quote_style = ENT_COMPAT) {			return strtr($string, array_flip(get_html_translation_table(HTML_SPECIALCHARS, $quote_style)));		}	}?>
<?php	/**	 * List views in a database	 *	 * $Id: viewproperties.php,v 1.34 2007/12/11 14:17:17 ioguix Exp $	 */	// Include application functions	include_once('./libraries/lib.inc.php');	$action = (isset($_REQUEST['action'])) ? $_REQUEST['action'] : '';	/** 	 * Function to save after editing a view	 */	function doSaveEdit() {		global $data, $lang;				$status = $data->setView($_POST['view'], $_POST['formDefinition'], $_POST['formComment']);		if ($status == 0)			doDefinition($lang['strviewupdated']);		else			doEdit($lang['strviewupdatedbad']);	}		/**	 * Function to allow editing of a view	 */	function doEdit($msg = '') {		global $data, $misc;		global $lang;				$misc->printTrail('view');		$misc->printTitle($lang['stredit'],'pg.view.alter');		$misc->printMsg($msg);				$viewdata = $data->getView($_REQUEST['view']);				if ($viewdata->recordCount() > 0) {						if (!isset($_POST['formDefinition'])) {				$_POST['formDefinition'] = $viewdata->fields['vwdefinition'];				$_POST['formComment'] = $viewdata->fields['relcomment'];			}						echo "<form action=\"viewproperties.php\" method=\"post\">\n";			echo "<table style=\"width: 100%\">\n";			echo "\t<tr>\n\t\t<th class=\"data left required\">{$lang['strdefinition']}</th>\n";			echo "\t\t<td class=\"data1\"><textarea style=\"width: 100%;\" rows=\"20\" cols=\"50\" name=\"formDefinition\">", 				htmlspecialchars($_POST['formDefinition']), "</textarea></td>\n\t</tr>\n";			echo "\t<tr>\n\t\t<th class=\"data left\">{$lang['strcomment']}</th>\n";			echo "\t\t<td class=\"data1\"><textarea rows=\"3\" cols=\"32\" name=\"formComment\">", 				htmlspecialchars($_POST['formComment']), "</textarea></td>\n\t</tr>\n";			echo "</table>\n";			echo "<p><input type=\"hidden\" name=\"action\" value=\"save_edit\" />\n";			echo "<input type=\"hidden\" name=\"view\" value=\"", htmlspecialchars($_REQUEST['view']), "\" />\n";			echo $misc->form;			echo "<input type=\"submit\" value=\"{$lang['stralter']}\" />\n";			echo "<input type=\"submit\" name=\"cancel\" value=\"{$lang['strcancel']}\" /></p>\n";			echo "</form>\n";		}		else echo "<p>{$lang['strnodata']}</p>\n";	}	/** 	 * Allow the dumping of the data "in" a view	 * NOTE:: PostgreSQL doesn't currently support dumping the data in a view 	 *        so I have disabled the data related parts for now. In the future 	 *        we should allow it conditionally if it becomes supported.  This is 	 *        a SMOP since it is based on pg_dump version not backend version. 	 */	function doExport($msg = '') {		global $data, $misc;		global $lang;		$misc->printTrail('view');		$misc->printTabs('view','export');		$misc->printMsg($msg);		echo "<form action=\"dataexport.php\" method=\"post\">\n";		echo "<table>\n";		echo "<tr><th class=\"data\">{$lang['strformat']}</th><th class=\"data\" colspan=\"2\">{$lang['stroptions']}</th></tr>\n";		// Data only		echo "<!--\n";		echo "<tr><th class=\"data left\">";		echo "<input type=\"radio\" id=\"what1\" name=\"what\" value=\"dataonly\" /><label for=\"what1\">{$lang['strdataonly']}</label></th>\n";		echo "<td>{$lang['strformat']}</td>\n";		echo "<td><select name=\"d_format\" >\n";		echo "<option value=\"copy\">COPY</option>\n";		echo "<option value=\"sql\">SQL</option>\n";		echo "<option value=\"csv\">CSV</option>\n";		echo "<option value=\"tab\">{$lang['strtabbed']}</option>\n";		echo "<option value=\"html\">XHTML</option>\n";		echo "<option value=\"xml\">XML</option>\n";		echo "</select>\n</td>\n</tr>\n";		echo "-->\n";		// Structure only		echo "<tr><th class=\"data left\"><input type=\"radio\" id=\"what2\" name=\"what\" value=\"structureonly\" checked=\"checked\" /><label for=\"what2\">{$lang['strstructureonly']}</label></th>\n";		echo "<td><label for=\"s_clean\">{$lang['strdrop']}</label></td><td><input type=\"checkbox\" id=\"s_clean\" name=\"s_clean\" /></td>\n</tr>\n";		// Structure and data		echo "<!--\n";		echo "<tr><th class=\"data left\" rowspan=\"2\">";		echo "<input type=\"radio\" id=\"what3\" name=\"what\" value=\"structureanddata\" /><label for=\"what3\">{$lang['strstructureanddata']}</label></th>\n";		echo "<td>{$lang['strformat']}</td>\n";		echo "<td><select name=\"sd_format\">\n";		echo "<option value=\"copy\">COPY</option>\n";		echo "<option value=\"sql\">SQL</option>\n";		echo "</select>\n</td>\n</tr>\n";		echo "<td><label for=\"sd_clean\">{$lang['strdrop']}</label></td><td><input type=\"checkbox\" id=\"sd_clean\" name=\"sd_clean\" /></td>\n</tr>\n";		echo "-->\n";		echo "</table>\n";				echo "<h3>{$lang['stroptions']}</h3>\n";		echo "<p><input type=\"radio\" id=\"output1\" name=\"output\" value=\"show\" checked=\"checked\" /><label for=\"output1\">{$lang['strshow']}</label>\n";		echo "<br/><input type=\"radio\" id=\"output2\" name=\"output\" value=\"download\" /><label for=\"output2\">{$lang['strdownload']}</label></p>\n";		echo "<p><input type=\"hidden\" name=\"action\" value=\"export\" />\n";		echo $misc->form;		echo "<input type=\"hidden\" name=\"subject\" value=\"view\" />\n";		echo "<input type=\"hidden\" name=\"view\" value=\"", htmlspecialchars($_REQUEST['view']), "\" />\n";		echo "<input type=\"submit\" value=\"{$lang['strexport']}\" /></p>\n";		echo "</form>\n";	}	/**	 * Show definition for a view	 */	function doDefinition($msg = '') {		global $data, $misc;		global $lang;			// Get view		$vdata = $data->getView($_REQUEST['view']);		$misc->printTrail('view');		$misc->printTabs('view','definition');		$misc->printMsg($msg);				if ($vdata->recordCount() > 0) {			// Show comment if any			if ($vdata->fields['relcomment'] !== null)				echo "<p class=\"comment\">", $misc->printVal($vdata->fields['relcomment']), "</p>\n";			echo "<table style=\"width: 100%\">\n";			echo "<tr><th class=\"data\">{$lang['strdefinition']}</th></tr>\n";			echo "<tr><td class=\"data1\">", $misc->printVal($vdata->fields['vwdefinition']), "</td></tr>\n";			echo "</table>\n";		}		else echo "<p>{$lang['strnodata']}</p>\n";				echo "<p><a class=\"navlink\" href=\"viewproperties.php?action=edit&amp;{$misc->href}&amp;view=", 			urlencode($_REQUEST['view']), "\">{$lang['stralter']}</a></p>\n";	}	/**	 * Displays a screen where they can alter a column in a view	 */	function doProperties($msg = '') {		global $data, $misc;		global $lang;		if (!isset($_REQUEST['stage'])) $_REQUEST['stage'] = 1;		switch ($_REQUEST['stage']) {			case 1:				global $lang;				$misc->printTrail('column');				$misc->printTitle($lang['stralter'],'pg.column.alter'); 				$misc->printMsg($msg);				echo "<form action=\"viewproperties.php\" method=\"post\">\n";				// Output view header				echo "<table>\n";				echo "<tr><th class=\"data required\">{$lang['strname']}</th><th class=\"data required\">{$lang['strtype']}</th>";				echo "<th class=\"data\">{$lang['strdefault']}</th><th class=\"data\">{$lang['strcomment']}</th></tr>";				$column = $data->getTableAttributes($_REQUEST['view'], $_REQUEST['column']);				if (!isset($_REQUEST['default'])) {					$_REQUEST['field'] = $column->fields['attname'];					$_REQUEST['default'] = $_REQUEST['olddefault'] = $column->fields['adsrc'];					$_REQUEST['comment'] = $column->fields['comment'];				}				echo "<tr><td><input name=\"field\" size=\"32\" value=\"",					htmlspecialchars($_REQUEST['field']), "\" /></td>";								echo "<td>", $misc->printVal($data->formatType($column->fields['type'], $column->fields['atttypmod'])), "</td>";				echo "<td><input name=\"default\" size=\"20\" value=\"", 					htmlspecialchars($_REQUEST['default']), "\" /></td>";				echo "<td><input name=\"comment\" size=\"32\" value=\"", 					htmlspecialchars($_REQUEST['comment']), "\" /></td>";								echo "</table>\n";				echo "<p><input type=\"hidden\" name=\"action\" value=\"properties\" />\n";				echo "<input type=\"hidden\" name=\"stage\" value=\"2\" />\n";				echo $misc->form;				echo "<input type=\"hidden\" name=\"view\" value=\"", htmlspecialchars($_REQUEST['view']), "\" />\n";				echo "<input type=\"hidden\" name=\"column\" value=\"", htmlspecialchars($_REQUEST['column']), "\" />\n";				echo "<input type=\"hidden\" name=\"olddefault\" value=\"", htmlspecialchars($_REQUEST['olddefault']), "\" />\n";				echo "<input type=\"submit\" value=\"{$lang['stralter']}\" />\n";				echo "<input type=\"submit\" name=\"cancel\" value=\"{$lang['strcancel']}\" /></p>\n";				echo "</form>\n";												break;			case 2:				global $data, $lang;				// Check inputs				if (trim($_REQUEST['field']) == '') {					$_REQUEST['stage'] = 1;					doProperties($lang['strcolneedsname']);					return;				}								// Alter the view column				$status = $data->alterColumn($_REQUEST['view'], $_REQUEST['column'], $_REQUEST['field'], 							     false, false, $_REQUEST['default'], $_REQUEST['olddefault'],							     '', '', '', '', $_REQUEST['comment']);				if ($status == 0)					doDefault($lang['strcolumnaltered']);				else {					$_REQUEST['stage'] = 1;					doProperties($lang['strcolumnalteredbad']);					return;				}				break;			default:				echo "<p>{$lang['strinvalidparam']}</p>\n";		}	}	function doAlter($confirm = false, $msg = '') {		if ($confirm) {			global $data, $misc, $lang;			$misc->printTrail('view');			$misc->printTitle($lang['stralter'], 'pg.view.alter');			$misc->printMsg($msg);			// Fetch view info			$view = $data->getView($_REQUEST['view']);			if ($view->recordCount() > 0) {				if (!isset($_POST['name'])) $_POST['name'] = $view->fields['relname'];	            if (!isset($_POST['owner'])) $_POST['owner'] = $view->fields['relowner'];	            if (!isset($_POST['newschema'])) $_POST['newschema'] = $view->fields['nspname'];				if (!isset($_POST['comment'])) $_POST['comment'] = $view->fields['relcomment'];				echo "<form action=\"viewproperties.php\" method=\"post\">\n";				echo "<table>\n";	            echo "<tr><th class=\"data left required\">{$lang['strname']}</th>\n";				echo "<td class=\"data1\">";				echo "<input name=\"name\" size=\"32\" maxlength=\"{$data->_maxNameLen}\" value=\"",					htmlspecialchars($_POST['name']), "\" /></td></tr>\n";				$server_info = $misc->getServerInfo();				if ($data->isSuperUser($server_info['username'])) {					// Fetch all users					$users = $data->getUsers();					echo "<tr><th class=\"data left required\">{$lang['strowner']}</th>\n";					echo "<td class=\"data1\"><select name=\"owner\">";					while (!$users->EOF) {						$uname = $users->fields['usename'];						echo "<option value=\"", htmlspecialchars($uname), "\"",						($uname == $_POST['owner']) ? ' selected="selected"' : '', ">", htmlspecialchars($uname), "</option>\n";						$users->moveNext();					}					echo "</select></td></tr>\n";				}				if ($data->hasAlterTableSchema()) {					$schemas = $data->getSchemas();					echo "<tr><th class=\"data left required\">{$lang['strschema']}</th>\n";					echo "<td class=\"data1\"><select name=\"newschema\">";					while (!$schemas->EOF) {						$schema = $schemas->fields['nspname'];						echo "<option value=\"", htmlspecialchars($schema), "\"",							($schema == $_POST['newschema']) ? ' selected="selected"' : '', ">", htmlspecialchars($schema), "</option>\n";						$schemas->moveNext();					}					echo "</select></td></tr>\n";				}								echo "<tr><th class=\"data left\">{$lang['strcomment']}</th>\n";				echo "<td class=\"data1\">";				echo "<textarea rows=\"3\" cols=\"32\" name=\"comment\">",	                htmlspecialchars($_POST['comment']), "</textarea></td></tr>\n";				echo "</table>\n";				echo "<input type=\"hidden\" name=\"action\" value=\"alter\" />\n";				echo "<input type=\"hidden\" name=\"view\" value=\"", htmlspecialchars($_REQUEST['view']), "\" />\n";				echo $misc->form;				echo "<p><input type=\"submit\" name=\"alter\" value=\"{$lang['stralter']}\" />\n";	            echo "<input type=\"submit\" name=\"cancel\" value=\"{$lang['strcancel']}\" /></p>\n";				echo "</form>\n";			}			else echo "<p>{$lang['strnodata']}</p>\n";		}		else{			global $data, $lang, $_reload_browser, $misc;			// For databases that don't allow owner change	        if (!isset($_POST['owner'])) $_POST['owner'] = '';	        if (!isset($_POST['newschema'])) $_POST['newschema'] = null;			$status = $data->alterView($_POST['view'], $_POST['name'], $_POST['owner'], $_POST['newschema'], $_POST['comment']);			if ($status == 0) {				// If view has been renamed, need to change to the new name and				// reload the browser frame.				if ($_POST['view'] != $_POST['name']) {					// Jump them to the new view name					$_REQUEST['view'] = $_POST['name'];	                // Force a browser reload					$_reload_browser = true;				}				// If schema has changed, need to change to the new schema and reload the browser				if (!empty($_POST['newschema']) && ($_POST['newschema'] != $data->_schema)) {					// Jump them to the new sequence schema					$misc->setCurrentSchema($_POST['newschema']);					$_reload_browser = true;				}				doDefault($lang['strviewaltered']);			}			else doAlter(true, $lang['strviewalteredbad']);		}	}	function doTree () {		global $misc, $data;		$reqvars = $misc->getRequestVars('column');		$columns = $data->getTableAttributes($_REQUEST['view']);				$attrs = array (			'text'   => field('attname'),			'action' => url('colproperties.php',							$reqvars,							array(								'view'     => $_REQUEST['view'],								'column'    => field('attname')							)						),			'icon'   => 'Column',			'iconAction' => url('display.php',							$reqvars,							array(								'view'     => $_REQUEST['view'],								'column'    => field('attname'),								'query'     => replace(									'SELECT "%column%", count(*) AS "count" FROM %view% GROUP BY "%column%" ORDER BY "%column%"',									array (										'%column%' => field('attname'),										'%view%' => $_REQUEST['view']									)								)							)			),			'toolTip'=> field('comment')		);		$misc->printTreeXML($columns, $attrs);		exit;	}	if ($action == 'tree') doTree();	/**	 * Show view definition and virtual columns	 */	function doDefault($msg = '') {		global $data, $misc;		global $lang;				function attPre(&$rowdata) {			global $data;			$rowdata->fields['+type'] = $data->formatType($rowdata->fields['type'], $rowdata->fields['atttypmod']);		}				$misc->printTrail('view');		$misc->printTabs('view','columns');		$misc->printMsg($msg);		// Get view		$vdata = $data->getView($_REQUEST['view']);		// Get columns (using same method for getting a view)		$attrs = $data->getTableAttributes($_REQUEST['view']);				// Show comment if any		if ($vdata->fields['relcomment'] !== null)			echo "<p class=\"comment\">", $misc->printVal($vdata->fields['relcomment']), "</p>\n";		$columns = array(			'column' => array(				'title' => $lang['strcolumn'],				'field' => field('attname'),			),			'type' => array(				'title' => $lang['strtype'],				'field' => field('+type'),			),			'default' => array(				'title' => $lang['strdefault'],				'field' => field('adsrc'),			),			'actions' => array(				'title' => $lang['stractions'],			),			'comment' => array(				'title' => $lang['strcomment'],				'field' => field('comment'),			),		);				$actions = array(			'alter' => array(				'title' => $lang['stralter'],				'url'   => "viewproperties.php?action=properties&amp;{$misc->href}&amp;view=".urlencode($_REQUEST['view'])."&amp;",				'vars'  => array('column' => 'attname'),			),		);				$misc->printTable($attrs, $columns, $actions, null, 'attPre');			echo "<br />\n";		echo "<ul class=\"navlink\">\n";		$return_url = urlencode("viewproperties.php?{$misc->href}&amp;view=" . urlencode($_REQUEST['view']));		echo "\t<li><a href=\"display.php?{$misc->href}&amp;view=", urlencode($_REQUEST['view']), "&amp;subject=view&amp;return_url={$return_url}&amp;return_desc=",			urlencode($lang['strback']), "\">{$lang['strbrowse']}</a></li>\n";		echo "\t<li><a href=\"views.php?action=confselectrows&amp;{$misc->href}&amp;view=", urlencode($_REQUEST['view']),"\">{$lang['strselect']}</a></li>\n";		echo "\t<li><a href=\"views.php?action=confirm_drop&amp;{$misc->href}&amp;view=", urlencode($_REQUEST['view']),"\">{$lang['strdrop']}</a></li>\n";		echo "\t<li><a href=\"viewproperties.php?action=confirm_alter&amp;{$misc->href}&amp;view=", urlencode($_REQUEST['view']),"\">{$lang['stralter']}</a></li>\n";		echo "</ul>\n";	}	$misc->printHeader($lang['strviews'] . ' - ' . $_REQUEST['view']);	$misc->printBody();	switch ($action) {		case 'save_edit':			if (isset($_POST['cancel'])) doDefinition();			else doSaveEdit();			break;		case 'edit':			doEdit();			break;		case 'export':			doExport();			break;		case 'definition':			doDefinition();			break;		case 'properties':			if (isset($_POST['cancel'])) doDefault();			else doProperties();			break;		case 'alter':			if (isset($_POST['alter'])) doAlter(false);			else doDefault();			break;		case 'confirm_alter':			doAlter(true);			break;		case 'drop':			if (isset($_POST['drop'])) doDrop(false);			else doDefault();			break;		case 'confirm_drop':			doDrop(true);			break;		default:			doDefault();			break;	}		$misc->printFooter();?>
<?php	/**	 * Manage privileges in a database	 *	 * $Id: privileges.php,v 1.45 2007/09/13 13:41:01 ioguix Exp $	 */	// Include application functions	include_once('./libraries/lib.inc.php');		$action = (isset($_REQUEST['action'])) ? $_REQUEST['action'] : '';	if (!isset($msg)) $msg = '';	/**	 * Grant permissions on an object to a user	 * @param $confirm To show entry screen	 * @param $mode 'grant' or 'revoke'	 * @param $msg (optional) A message to show	 */	function doAlter($confirm, $mode, $msg = '') {		global $data, $misc;		global $lang;		if (!isset($_REQUEST['username'])) $_REQUEST['username'] = array();		if (!isset($_REQUEST['groupname'])) $_REQUEST['groupname'] = array();		if (!isset($_REQUEST['privilege'])) $_REQUEST['privilege'] = array();			if ($confirm) {			// Get users from the database			$users = $data->getUsers();			// Get groups from the database			$groups = $data->getGroups();					$misc->printTrail($_REQUEST['subject']);						switch ($mode) {				case 'grant':					$misc->printTitle($lang['strgrant'],'pg.privilege.grant');					break;				case 'revoke':					$misc->printTitle($lang['strrevoke'],'pg.privilege.revoke');					break;			}			$misc->printMsg($msg);						echo "<form action=\"privileges.php\" method=\"post\">\n";			echo "<table>\n";			echo "<tr><th class=\"data left\">{$lang['strusers']}</th>\n";			echo "<td class=\"data1\"><select name=\"username[]\" multiple=\"multiple\" size=\"", min(6, $users->recordCount()), "\">\n";			while (!$users->EOF) {				$uname = htmlspecialchars($users->fields['usename']);				echo "<option value=\"{$uname}\"",					in_array($users->fields['usename'], $_REQUEST['username']) ? ' selected="selected"' : '', ">{$uname}</option>\n";				$users->moveNext();			}			echo "</select></td></tr>\n";			echo "<tr><th class=\"data left\">{$lang['strgroups']}</th>\n";			echo "<td class=\"data1\">\n";			echo "<input type=\"checkbox\" id=\"public\" name=\"public\"", (isset($_REQUEST['public']) ? ' checked="checked"' : ''), " /><label for=\"public\">PUBLIC</label>\n";			// Only show groups if there are groups!			if ($groups->recordCount() > 0) {				echo "<br /><select name=\"groupname[]\" multiple=\"multiple\" size=\"", min(6, $groups->recordCount()), "\">\n";				while (!$groups->EOF) {					$gname = htmlspecialchars($groups->fields['groname']);					echo "<option value=\"{$gname}\"",						in_array($groups->fields['groname'], $_REQUEST['groupname']) ? ' selected="selected"' : '', ">{$gname}</option>\n";					$groups->moveNext();				}				echo "</select>\n";			}			echo "</td></tr>\n";			echo "<tr><th class=\"data left required\">{$lang['strprivileges']}</th>\n";			echo "<td class=\"data1\">\n";			foreach ($data->privlist[$_REQUEST['subject']] as $v) {				$v = htmlspecialchars($v);				echo "<input type=\"checkbox\" id=\"privilege[$v]\" name=\"privilege[$v]\"", 							isset($_REQUEST['privilege'][$v]) ? ' checked="checked"' : '', " /><label for=\"privilege[$v]\">{$v}</label><br />\n";			}			echo "</td></tr>\n";			// Grant option			if ($data->hasGrantOption()) {				echo "<tr><th class=\"data left\">{$lang['stroptions']}</th>\n";				echo "<td class=\"data1\">\n";				if ($mode == 'grant') {					echo "<input type=\"checkbox\" id=\"grantoption\" name=\"grantoption\"", 								isset($_REQUEST['grantoption']) ? ' checked="checked"' : '', " /><label for=\"grantoption\">GRANT OPTION</label>\n";				}				elseif ($mode == 'revoke') {					echo "<input type=\"checkbox\" id=\"grantoption\" name=\"grantoption\"", 								isset($_REQUEST['grantoption']) ? ' checked="checked"' : '', " /><label for=\"grantoption\">GRANT OPTION FOR</label><br />\n";					echo "<input type=\"checkbox\" id=\"cascade\" name=\"cascade\"", 								isset($_REQUEST['cascade']) ? ' checked="checked"' : '', " /><label for=\"cascade\">CASCADE</label><br />\n";				}				echo "</td></tr>\n";			}			echo "</table>\n";			echo "<p><input type=\"hidden\" name=\"action\" value=\"save\" />\n";			echo "<input type=\"hidden\" name=\"mode\" value=\"", htmlspecialchars($mode), "\" />\n";			echo "<input type=\"hidden\" name=\"subject\" value=\"", htmlspecialchars($_REQUEST['subject']), "\" />\n";			if (isset($_REQUEST[$_REQUEST['subject'].'_oid']))				echo "<input type=\"hidden\" name=\"", htmlspecialchars($_REQUEST['subject'].'_oid'),					"\" value=\"", htmlspecialchars($_REQUEST[$_REQUEST['subject'].'_oid']), "\" />\n";			echo "<input type=\"hidden\" name=\"", htmlspecialchars($_REQUEST['subject']),				"\" value=\"", htmlspecialchars($_REQUEST[$_REQUEST['subject']]), "\" />\n";			if ($_REQUEST['subject'] == 'column')				echo "<input type=\"hidden\" name=\"table\" value=\"",					htmlspecialchars($_REQUEST['table']), "\" />\n";			echo $misc->form;			if ($mode == 'grant')				echo "<input type=\"submit\" name=\"grant\" value=\"{$lang['strgrant']}\" />\n";			elseif ($mode == 'revoke')				echo "<input type=\"submit\" name=\"revoke\" value=\"{$lang['strrevoke']}\" />\n";			echo "<input type=\"submit\" name=\"cancel\" value=\"{$lang['strcancel']}\" /></p>";			echo "</form>\n";		}		else {			// Determine whether object should be ref'd by name or oid.			if (isset($_REQUEST[$_REQUEST['subject'].'_oid']))				$object = $_REQUEST[$_REQUEST['subject'].'_oid'];			else				$object = $_REQUEST[$_REQUEST['subject']];			if (isset($_REQUEST['table'])) $table = $_REQUEST['table'];			else $table = null;			$status = $data->setPrivileges(($mode == 'grant') ? 'GRANT' : 'REVOKE', $_REQUEST['subject'], $object,				isset($_REQUEST['public']), $_REQUEST['username'], $_REQUEST['groupname'], array_keys($_REQUEST['privilege']),				isset($_REQUEST['grantoption']), isset($_REQUEST['cascade']), $table);			if ($status == 0)				doDefault($lang['strgranted']);			elseif ($status == -3 || $status == -4)				doAlter(true, $_REQUEST['mode'], $lang['strgrantbad']);			else				doAlter(true, $_REQUEST['mode'], $lang['strgrantfailed']);		}	}	/**	 * Show permissions on a database, namespace, relation, language or function	 */	function doDefault($msg = '') {		global $data, $misc, $database;		global $lang;		$misc->printTrail($_REQUEST['subject']);				# @@@FIXME: This switch is just a temporary solution,		# need a better way, maybe every type of object should		# have a tab bar???		switch ($_REQUEST['subject']) {			case 'server':			case 'database':			case 'schema':			case 'table':			case 'column':			case 'view':				$misc->printTabs($_REQUEST['subject'], 'privileges');				break;			default:				$misc->printTitle($lang['strprivileges'], 'pg.privilege');		}		$misc->printMsg($msg);		// Determine whether object should be ref'd by name or oid.		if (isset($_REQUEST[$_REQUEST['subject'].'_oid']))			$object = $_REQUEST[$_REQUEST['subject'].'_oid'];		else			$object = $_REQUEST[$_REQUEST['subject']];				// Get the privileges on the object, given its type		if ($_REQUEST['subject'] == 'column')			$privileges = $data->getPrivileges($object, 'column', $_REQUEST['table']);		else			$privileges = $data->getPrivileges($object, $_REQUEST['subject']);		if (sizeof($privileges) > 0) {			echo "<table>\n";			if ($data->hasRoles())				echo "<tr><th class=\"data\">{$lang['strrole']}</th>";			else				echo "<tr><th class=\"data\">{$lang['strtype']}</th><th class=\"data\">{$lang['struser']}/{$lang['strgroup']}</th>";			foreach ($data->privlist[$_REQUEST['subject']] as $v2) {				// Skip over ALL PRIVILEGES				if ($v2 == 'ALL PRIVILEGES') continue;				echo "<th class=\"data\">{$v2}</th>\n";			}			if ($data->hasGrantOption()) {				echo "<th class=\"data\">{$lang['strgrantor']}</th>";			}			echo "</tr>\n";			// Loop over privileges, outputting them			$i = 0;			foreach ($privileges as $v) {				$id = (($i % 2) == 0 ? '1' : '2');				echo "<tr class=\"data{$id}\">\n";				if (!$data->hasRoles())					echo "<td>", $misc->printVal($v[0]), "</td>\n";				echo "<td>", $misc->printVal($v[1]), "</td>\n";				foreach ($data->privlist[$_REQUEST['subject']] as $v2) {					// Skip over ALL PRIVILEGES					if ($v2 == 'ALL PRIVILEGES') continue;					echo "<td>";					if (in_array($v2, $v[2]))						echo $lang['stryes'];					else						echo $lang['strno'];					// If we have grant option for this, end mark					if ($data->hasGrantOption() && in_array($v2, $v[4])) echo $lang['strasterisk'];					echo "</td>\n";				}				if ($data->hasGrantOption()) {					echo "<td>", $misc->printVal($v[3]), "</td>\n";				}				echo "</tr>\n";				$i++;			}			echo "</table>";		}		else {			echo "<p>{$lang['strnoprivileges']}</p>\n";		}				// Links for granting to a user or group		switch ($_REQUEST['subject']) {			case 'table':			case 'view':			case 'sequence':			case 'function':			case 'tablespace':				$allurl = "{$_REQUEST['subject']}s.php";				$alltxt = $lang["strshowall{$_REQUEST['subject']}s"];				break;			case 'schema':				$allurl = "database.php";				$alltxt = $lang["strshowallschemas"];				break;			case 'database':				$allurl = 'all_db.php';				$alltxt = $lang['strshowalldatabases'];				break;		}				$subject = htmlspecialchars(urlencode($_REQUEST['subject']));		$object = htmlspecialchars(urlencode($_REQUEST[$_REQUEST['subject']]));				if ($_REQUEST['subject'] == 'function') {			$objectoid = $_REQUEST[$_REQUEST['subject'].'_oid'];			$alterurl = "privileges.php?action=alter&amp;{$misc->href}&amp;{$subject}={$object}&amp;{$subject}_oid={$objectoid}&amp;subject={$subject}&amp;mode=";		}		else if ($_REQUEST['subject'] == 'column') {			$alterurl = "privileges.php?action=alter&amp;{$misc->href}&amp;{$subject}={$object}"				."&amp;subject={$subject}&amp;table=". urlencode($_REQUEST['table']) ."&amp;mode=";		}		else {			$alterurl = "privileges.php?action=alter&amp;{$misc->href}&amp;{$subject}={$object}&amp;subject={$subject}&amp;mode=";		}			echo "<ul class=\"navlink\">\n\t<li><a href=\"{$alterurl}grant\">{$lang['strgrant']}</a></li>\n";		echo "\t<li><a href=\"{$alterurl}revoke\">{$lang['strrevoke']}</a></li>\n";		if (isset($allurl))			echo "\t<li><a href=\"{$allurl}?{$misc->href}\">{$alltxt}</a></li>\n";				echo "</ul>\n";	}	$misc->printHeader($lang['strprivileges']);	$misc->printBody();	switch ($action) {		case 'save':			if (isset($_REQUEST['cancel'])) doDefault();			else doAlter(false, $_REQUEST['mode']);			break;		case 'alter':			doAlter(true, $_REQUEST['mode']);			break;		default:			doDefault();			break;	}		$misc->printFooter();	?>
<?php	/**	 * Manage casts in a database	 *	 * $Id: casts.php,v 1.16 2007/09/25 16:08:05 ioguix Exp $	 */	// Include application functions	include_once('./libraries/lib.inc.php');		$action = (isset($_REQUEST['action'])) ? $_REQUEST['action'] : '';	if (!isset($msg)) $msg = '';	/**	 * Show default list of casts in the database	 */	function doDefault($msg = '') {		global $data, $misc, $database;		global $lang;		function renderCastContext($val) {			global $lang;			switch ($val) {				case 'e': return $lang['strno'];				case 'a': return $lang['strinassignment'];				default: return $lang['stryes'];			}		}				$misc->printTrail('database');		$misc->printTabs('database','casts');		$misc->printMsg($msg);				$casts = $data->getCasts();		$columns = array(			'source_type' => array(				'title' => $lang['strsourcetype'],				'field' => field('castsource'),			),			'target_type' => array(				'title' => $lang['strtargettype'],				'field' => field('casttarget'),			),			'function' => array(				'title' => $lang['strfunction'],				'field' => field('castfunc'),				'params'=> array('null' => $lang['strbinarycompat']),			),			'implicit' => array(				'title' => $lang['strimplicit'],				'field' => field('castcontext'),				'type'  => 'callback',				'params'=> array('function' => 'renderCastContext', 'align' => 'center'),			),			'comment' => array(				'title' => $lang['strcomment'],				'field' => field('castcomment'),			),		);		$actions = array();				$misc->printTable($casts, $columns, $actions, $lang['strnocasts']);	}	/**	 * Generate XML for the browser tree.	 */	function doTree() {		global $misc, $data;				$casts = $data->getCasts();				$proto = concat(field('castsource'), ' AS ', field('casttarget'));				$attrs = array(			'text'   => $proto,			'icon'   => 'Cast'		);				$misc->printTreeXML($casts, $attrs);		exit;	}		if ($action == 'tree') doTree();		$misc->printHeader($lang['strcasts']);	$misc->printBody();	switch ($action) {		case 'tree':			doTree();			break;		default:			doDefault();			break;	}		$misc->printFooter();?>
<?php/** * PostgreSQL 8.2 support * * $Id: Postgres82.php,v 1.10 2007/12/28 16:21:25 ioguix Exp $ */include_once('./classes/database/Postgres83.php');class Postgres82 extends Postgres83 {	var $major_version = 8.2;	// Select operators	var $selectOps = array('=' => 'i', '!=' => 'i', '<' => 'i', '>' => 'i', '<=' => 'i', '>=' => 'i', '<<' => 'i', '>>' => 'i', '<<=' => 'i', '>>=' => 'i',		'LIKE' => 'i', 'NOT LIKE' => 'i', 'ILIKE' => 'i', 'NOT ILIKE' => 'i', 'SIMILAR TO' => 'i',		'NOT SIMILAR TO' => 'i', '~' => 'i', '!~' => 'i', '~*' => 'i', '!~*' => 'i',		'IS NULL' => 'p', 'IS NOT NULL' => 'p', 'IN' => 'x', 'NOT IN' => 'x');	/**	 * Constructor	 * @param $conn The database connection	 */	function Postgres82($conn) {		$this->Postgres($conn);	}	// Help functions	function getHelpPages() {		include_once('./help/PostgresDoc82.php');		return $this->help_page;	}	// Database functions	/**	 * Returns table locks information in the current database	 * @return A recordset	 */	function getLocks() {		global $conf;		if (!$conf['show_system'])			$where = "AND pn.nspname NOT LIKE 'pg\\\\_%'";		else			$where = "AND nspname !~ '^pg_t(emp_[0-9]+|oast)$'";		$sql = "SELECT pn.nspname, pc.relname AS tablename, pl.transaction, pl.pid, pl.mode, pl.granted		FROM pg_catalog.pg_locks pl, pg_catalog.pg_class pc, pg_catalog.pg_namespace pn		WHERE pl.relation = pc.oid AND pc.relnamespace=pn.oid {$where}		ORDER BY nspname,tablename";		return $this->selectSet($sql);	}	// Sequence functions	/**	 * Rename a sequence	 * @param $seqrs The sequence RecordSet returned by getSequence()	 * @param $name The new name for the sequence	 * @return 0 success	 */	function alterSequenceName($seqrs, $name) {		/* vars are cleaned in _alterSequence */		if (!empty($name) && ($seqrs->fields['seqname'] != $name)) {			$f_schema = $this->_schema;			$this->fieldClean($f_schema);			$sql = "ALTER TABLE \"{$f_schema}\".\"{$seqrs->fields['seqname']}\" RENAME TO \"{$name}\"";			$status = $this->execute($sql);			if ($status == 0)				$seqrs->fields['seqname'] = $name;			else				return $status;		}		return 0;		}	// View functions	/**	 * Rename a view	 * @param $vwrs The view recordSet returned by getView()	 * @param $name The new view's name	 * @return -1 Failed	 * @return 0 success	 */	function alterViewName($vwrs, $name) {		// Rename (only if name has changed)		/* $vwrs and $name are cleaned in _alterView */		if (!empty($name) && ($name != $vwrs->fields['relname'])) {			$f_schema = $this->_schema;			$this->fieldClean($f_schema);			$sql = "ALTER TABLE \"{$f_schema}\".\"{$vwrs->fields['relname']}\" RENAME TO \"{$name}\"";			$status =  $this->execute($sql);			if ($status == 0)				$vwrs->fields['relname'] = $name;			else				return $status;		}		return 0;	}	// Trigger functions	/**	 * Grabs a list of triggers on a table	 * @param $table The name of a table whose triggers to retrieve	 * @return A recordset	 */	function getTriggers($table = '') {		$c_schema = $this->_schema;		$this->clean($c_schema);		$this->clean($table);		$sql = "SELECT				t.tgname, pg_catalog.pg_get_triggerdef(t.oid) AS tgdef, t.tgenabled, p.oid AS prooid,				p.proname || ' (' || pg_catalog.oidvectortypes(p.proargtypes) || ')' AS proproto,				ns.nspname AS pronamespace			FROM pg_catalog.pg_trigger t, pg_catalog.pg_proc p, pg_catalog.pg_namespace ns			WHERE t.tgrelid = (SELECT oid FROM pg_catalog.pg_class WHERE relname='{$table}'				AND relnamespace=(SELECT oid FROM pg_catalog.pg_namespace WHERE nspname='{$c_schema}'))				AND (NOT tgisconstraint OR NOT EXISTS						(SELECT 1 FROM pg_catalog.pg_depend d    JOIN pg_catalog.pg_constraint c							ON (d.refclassid = c.tableoid AND d.refobjid = c.oid)						WHERE d.classid = t.tableoid AND d.objid = t.oid AND d.deptype = 'i' AND c.contype = 'f'))				AND p.oid=t.tgfoid				AND p.pronamespace = ns.oid";		return $this->selectSet($sql);		}	// Function functions	/**	 * Returns all details for a particular function	 * @param $func The name of the function to retrieve	 * @return Function info	 */	function getFunction($function_oid) {		$this->clean($function_oid);		$sql = "SELECT					pc.oid AS prooid,					proname,					pg_catalog.pg_get_userbyid(proowner) AS proowner,					nspname as proschema,					lanname as prolanguage,					pg_catalog.format_type(prorettype, NULL) as proresult,					prosrc,					probin,					proretset,					proisstrict,					provolatile,					prosecdef,					pg_catalog.oidvectortypes(pc.proargtypes) AS proarguments,					proargnames AS proargnames,					pg_catalog.obj_description(pc.oid, 'pg_proc') AS procomment				FROM					pg_catalog.pg_proc pc, pg_catalog.pg_language pl, pg_catalog.pg_namespace pn				WHERE					pc.oid = '{$function_oid}'::oid					AND pc.prolang = pl.oid					AND pc.pronamespace = pn.oid				";		return $this->selectSet($sql);	}	/**	 * Creates a new function.	 * @param $funcname The name of the function to create	 * @param $args A comma separated string of types	 * @param $returns The return type	 * @param $definition The definition for the new function	 * @param $language The language the function is written for	 * @param $flags An array of optional flags	 * @param $setof True if it returns a set, false otherwise	 * @param $rows number of rows planner should estimate will be returned     * @param $cost cost the planner should use in the function execution step	 * @param $comment The comment on the function	 * @param $replace (optional) True if OR REPLACE, false for normal	 * @return 0 success	 * @return -1 create function failed	 * @return -4 set comment failed	 */	function createFunction($funcname, $args, $returns, $definition, $language, $flags, $setof, $cost, $rows, $comment, $replace = false) {				// Begin a transaction		$status = $this->beginTransaction();		if ($status != 0) {			$this->rollbackTransaction();			return -1;		}				$f_schema = $this->_schema;		$this->fieldClean($f_schema);		$this->fieldClean($funcname);		$this->clean($args);		$this->fieldClean($language);		$this->arrayClean($flags);		$sql = "CREATE";		if ($replace) $sql .= " OR REPLACE";		$sql .= " FUNCTION \"{$f_schema}\".\"{$funcname}\" (";		if ($args != '')			$sql .= $args;		// For some reason, the returns field cannot have quotes...		$sql .= ") RETURNS ";		if ($setof) $sql .= "SETOF ";		$sql .= "{$returns} AS ";		if (is_array($definition)) {			$this->arrayClean($definition);			$sql .= "'" . $definition[0] . "'";			if ($definition[1]) {				$sql .= ",'" . $definition[1] . "'";			}		} else {			$this->clean($definition);			$sql .= "'" . $definition . "'";	}		$sql .= " LANGUAGE \"{$language}\"";		// Add flags		foreach ($flags as  $v) {			// Skip default flags			if ($v == '') continue;			else $sql .= "\n{$v}";		}		$status = $this->execute($sql);		if ($status != 0) {			$this->rollbackTransaction();			return -3;		}		/* set the comment */		$status = $this->setComment('FUNCTION', "\"{$funcname}\"({$args})", null, $comment);		if ($status != 0) {			$this->rollbackTransaction();			return -4;		}		return $this->endTransaction();	}	// Index functions	/**	 * Clusters an index	 * @param $index The name of the index	 * @param $table The table the index is on	 * @return 0 success	 */	function clusterIndex($table='', $index='') {		$sql = 'CLUSTER';				// We don't bother with a transaction here, as there's no point rolling		// back an expensive cluster if a cheap analyze fails for whatever reason				if (!empty($table)) {			$f_schema = $this->_schema;			$this->fieldClean($f_schema);			$this->fieldClean($table);						if (!empty($index)) {				$this->fieldClean($index);				$sql .= " \"{$index}\" ON \"{$f_schema}\".\"{$table}\"";			}			else {				$sql .= " \"{$f_schema}\".\"{$table}\"";			}		}		return $this->execute($sql);	}	// Operator functions	/**	 * Returns all details for a particular operator	 * @param $operator_oid The oid of the operator	 * @return Function info	 */	function getOperator($operator_oid) {		$this->clean($operator_oid);		$sql = "			SELECT				po.oid, po.oprname,				oprleft::pg_catalog.regtype AS oprleftname,				oprright::pg_catalog.regtype AS oprrightname,				oprresult::pg_catalog.regtype AS resultname,				po.oprcanhash,				oprcom::pg_catalog.regoperator AS oprcom,				oprnegate::pg_catalog.regoperator AS oprnegate,				oprlsortop::pg_catalog.regoperator AS oprlsortop,				oprrsortop::pg_catalog.regoperator AS oprrsortop,				oprltcmpop::pg_catalog.regoperator AS oprltcmpop,				oprgtcmpop::pg_catalog.regoperator AS oprgtcmpop,				po.oprcode::pg_catalog.regproc AS oprcode,				po.oprrest::pg_catalog.regproc AS oprrest,				po.oprjoin::pg_catalog.regproc AS oprjoin			FROM				pg_catalog.pg_operator po			WHERE				po.oid='{$operator_oid}'		";		return $this->selectSet($sql);	}	// Operator Class functions	/**	 * Gets all opclasses	 * @return A recordset	 */	function getOpClasses() {		$c_schema = $this->_schema;		$this->clean($c_schema);		$sql = "			SELECT				pa.amname,				po.opcname,				po.opcintype::pg_catalog.regtype AS opcintype,				po.opcdefault,				pg_catalog.obj_description(po.oid, 'pg_opclass') AS opccomment			FROM				pg_catalog.pg_opclass po, pg_catalog.pg_am pa, pg_catalog.pg_namespace pn			WHERE				po.opcamid=pa.oid				AND po.opcnamespace=pn.oid				AND pn.nspname='{$c_schema}'			ORDER BY 1,2		";		return $this->selectSet($sql);	}	// Capabilities	function hasCreateTableLikeWithIndexes() {return false;}	function hasEnumTypes() {return false;}	function hasFTS() {return false;}	function hasFunctionCosting() {return false;}	function hasFunctionGUC() {return false;}	function hasVirtualTransactionId() {return false;}}?>
<?php	/**	 * Manage databases within a server	 *	 * $Id: all_db.php,v 1.59 2007/10/17 21:40:19 ioguix Exp $	 */	// Include application functions	include_once('./libraries/lib.inc.php');	$action = (isset($_REQUEST['action'])) ? $_REQUEST['action'] : '';	if (!isset($msg)) $msg = '';	/**	 * Display a form for alter and perform actual alter	 */	function doAlter($confirm) {		global $data, $misc, $_reload_browser;		global $lang;		if ($confirm) {			$misc->printTrail('database');			$misc->printTitle($lang['stralter'], 'pg.database.alter');			echo "<form action=\"all_db.php\" method=\"post\">\n";			echo "<table>\n";			echo "<tr><th class=\"data left required\">{$lang['strname']}</th>\n";			echo "<td class=\"data1\">";			echo "<input name=\"newname\" size=\"32\" maxlength=\"{$data->_maxNameLen}\" value=\"",				htmlspecialchars($_REQUEST['alterdatabase']), "\" /></td></tr>\n";			$server_info = $misc->getServerInfo();			if ($data->hasAlterDatabaseOwner() && $data->isSuperUser($server_info['username'])) {				// Fetch all users				$rs = $data->getDatabaseOwner($_REQUEST['alterdatabase']);				$owner = isset($rs->fields['usename']) ? $rs->fields['usename'] : '';				$users = $data->getUsers();				echo "<tr><th class=\"data left required\">{$lang['strowner']}</th>\n";				echo "<td class=\"data1\"><select name=\"owner\">";				while (!$users->EOF) {					$uname = $users->fields['usename'];					echo "<option value=\"", htmlspecialchars($uname), "\"",						($uname == $owner) ? ' selected="selected"' : '', ">", htmlspecialchars($uname), "</option>\n";					$users->moveNext();				}				echo "</select></td></tr>\n";			}			if ($data->hasSharedComments()){				$rs = $data->getDatabaseComment($_REQUEST['alterdatabase']);				$comment = isset($rs->fields['description']) ? $rs->fields['description'] : '';				echo "<tr><th class=\"data left\">{$lang['strcomment']}</th>\n";				echo "<td class=\"data1\">";				echo "<textarea rows=\"3\" cols=\"32\" name=\"dbcomment\">",					htmlspecialchars($comment), "</textarea></td></tr>\n";			}			echo "</table>\n";			echo "<input type=\"hidden\" name=\"action\" value=\"alter\" />\n";			echo $misc->form;			echo "<input type=\"hidden\" name=\"oldname\" value=\"",				htmlspecialchars($_REQUEST['alterdatabase']), "\" />\n";			echo "<input type=\"submit\" name=\"alter\" value=\"{$lang['stralter']}\" />\n";			echo "<input type=\"submit\" name=\"cancel\" value=\"{$lang['strcancel']}\" />\n";			echo "</form>\n";		}		else {			if (!isset($_POST['owner'])) $_POST['owner'] = '';			if (!isset($_POST['dbcomment'])) $_POST['dbcomment'] = '';			if ($data->alterDatabase($_POST['oldname'], $_POST['newname'], $_POST['owner'], $_POST['dbcomment']) == 0) {				$_reload_browser = true;				doDefault($lang['strdatabasealtered']);			}			else				doDefault($lang['strdatabasealteredbad']);		}	}	/**	 * Show confirmation of drop and perform actual drop	 */	function doDrop($confirm) {		global $data, $misc;		global $lang, $_reload_drop_database;		if (empty($_REQUEST['dropdatabase']) && empty($_REQUEST['ma'])) {			doDefault($lang['strspecifydatabasetodrop']);			exit();		}		if ($confirm) {            $misc->printTrail('database');            $misc->printTitle($lang['strdrop'], 'pg.database.drop');	        echo "<form action=\"all_db.php\" method=\"post\">\n";            //If multi drop            if (isset($_REQUEST['ma'])) {			    foreach($_REQUEST['ma'] as $v) {			        $a = unserialize(htmlspecialchars_decode($v, ENT_QUOTES));				    echo "<p>", sprintf($lang['strconfdropdatabase'], $misc->printVal($a['database'])), "</p>\n";				    printf('<input type="hidden" name="dropdatabase[]" value="%s" />', htmlspecialchars($a['database']));			    }			} else {		            echo "<p>", sprintf($lang['strconfdropdatabase'], $misc->printVal($_REQUEST['dropdatabase'])), "</p>\n";			        echo "<input type=\"hidden\" name=\"dropdatabase\" value=\"", htmlspecialchars($_REQUEST['dropdatabase']), "\" />\n";            }// END if multi drop			echo "<input type=\"hidden\" name=\"action\" value=\"drop\" />\n";        	echo $misc->form;			echo "<input type=\"submit\" name=\"drop\" value=\"{$lang['strdrop']}\" />\n";			echo "<input type=\"submit\" name=\"cancel\" value=\"{$lang['strcancel']}\" />\n";			echo "</form>\n";		} // END confirm		else {            //If multi drop            if (is_array($_REQUEST['dropdatabase'])) {                $msg = '';                foreach($_REQUEST['dropdatabase'] as $d) {					$status = $data->dropDatabase($d);					if ($status == 0)						$msg.= sprintf('%s: %s<br />', htmlentities($d), $lang['strdatabasedropped']);					else {						doDefault(sprintf('%s%s: %s<br />', $msg, htmlentities($d), $lang['strdatabasedroppedbad']));						return;					}				}// Everything went fine, back to Default page...                $_reload_drop_database = true;                doDefault($msg);            } else {			    $status = $data->dropDatabase($_POST['dropdatabase']);			    if ($status == 0) {				    $_reload_drop_database = true;				    doDefault($lang['strdatabasedropped']);			    }			    else				    doDefault($lang['strdatabasedroppedbad']);            }		}//END DROP    }// END FUNCTION	/**	 * Displays a screen where they can enter a new database	 */	function doCreate($msg = '') {		global $data, $misc;		global $lang;		$misc->printTrail('server');		$misc->printTitle($lang['strcreatedatabase'], 'pg.database.create');		$misc->printMsg($msg);		if (!isset($_POST['formName'])) $_POST['formName'] = '';		// Default encoding is that in language file		if (!isset($_POST['formEncoding'])) {			if (isset($lang['appdbencoding']))				$_POST['formEncoding'] = $lang['appdbencoding'];			else				$_POST['formEncoding'] = '';		}		if (!isset($_POST['formTemplate'])) $_POST['formTemplate'] = 'template1';		if (!isset($_POST['formSpc'])) $_POST['formSpc'] = '';		if (!isset($_POST['formComment'])) $_POST['formComment'] = '';		// Fetch a list of databases in the cluster		$templatedbs = $data->getDatabases(false);		// Fetch all tablespaces from the database		if ($data->hasTablespaces()) $tablespaces = $data->getTablespaces();		echo "<form action=\"all_db.php\" method=\"post\">\n";		echo "<table>\n";		echo "\t<tr>\n\t\t<th class=\"data left required\">{$lang['strname']}</th>\n";		echo "\t\t<td class=\"data1\"><input name=\"formName\" size=\"32\" maxlength=\"{$data->_maxNameLen}\" value=\"",			htmlspecialchars($_POST['formName']), "\" /></td>\n\t</tr>\n";		echo "\t<tr>\n\t\t<th class=\"data left required\">{$lang['strtemplatedb']}</th>\n";		echo "\t\t<td class=\"data1\">\n";		echo "\t\t\t<select name=\"formTemplate\">\n";		// Always offer template0 and template1 		echo "\t\t\t\t<option value=\"template0\"",			($_POST['formTemplate'] == 'template0') ? ' selected="selected"' : '', ">template0</option>\n";		echo "\t\t\t\t<option value=\"template1\"",			($_POST['formTemplate'] == 'template1') ? ' selected="selected"' : '', ">template1</option>\n";		while (!$templatedbs->EOF) {			$dbname = htmlspecialchars($templatedbs->fields['datname']);			if ($dbname != 'template1') { 				// filter out for $conf[show_system] users so we dont get duplicates 				echo "\t\t\t\t<option value=\"{$dbname}\"",					($dbname == $_POST['formTemplate']) ? ' selected="selected"' : '', ">{$dbname}</option>\n";			}			$templatedbs->moveNext();		}		echo "\t\t\t</select>\n";		echo "\t\t</td>\n\t</tr>\n";		// ENCODING		echo "\t<tr>\n\t\t<th class=\"data left required\">{$lang['strencoding']}</th>\n";		echo "\t\t<td class=\"data1\">\n";		echo "\t\t\t<select name=\"formEncoding\">\n";		echo "\t\t\t\t<option value=\"\"></option>\n";		while (list ($key) = each ($data->codemap)) {		    echo "\t\t\t\t<option value=\"", htmlspecialchars($key), "\"",				($key == $_POST['formEncoding']) ? ' selected="selected"' : '', ">",				$misc->printVal($key), "</option>\n";		}		echo "\t\t\t</select>\n";		echo "\t\t</td>\n\t</tr>\n";		if ($data->hasDatabaseCollation()) {			if (!isset($_POST['formCollate'])) $_POST['formCollate'] = '';			if (!isset($_POST['formCType'])) $_POST['formCType'] = '';			// LC_COLLATE			echo "\t<tr>\n\t\t<th class=\"data left\">{$lang['strcollation']}</th>\n";			echo "\t\t<td class=\"data1\">\n";			echo "\t\t\t<input name=\"formCollate\" value=\"", htmlspecialchars($_POST['formCollate']), "\" />\n";			echo "\t\t</td>\n\t</tr>\n";			// LC_CTYPE			echo "\t<tr>\n\t\t<th class=\"data left\">{$lang['strctype']}</th>\n";			echo "\t\t<td class=\"data1\">\n";			echo "\t\t\t<input name=\"formCType\" value=\"", htmlspecialchars($_POST['formCType']), "\" />\n";			echo "\t\t</td>\n\t</tr>\n";		}		// Tablespace (if there are any)		if ($data->hasTablespaces() && $tablespaces->recordCount() > 0) {			echo "\t<tr>\n\t\t<th class=\"data left\">{$lang['strtablespace']}</th>\n";			echo "\t\t<td class=\"data1\">\n\t\t\t<select name=\"formSpc\">\n";			// Always offer the default (empty) option			echo "\t\t\t\t<option value=\"\"",				($_POST['formSpc'] == '') ? ' selected="selected"' : '', "></option>\n";			// Display all other tablespaces			while (!$tablespaces->EOF) {				$spcname = htmlspecialchars($tablespaces->fields['spcname']);				echo "\t\t\t\t<option value=\"{$spcname}\"",					($spcname == $_POST['formSpc']) ? ' selected="selected"' : '', ">{$spcname}</option>\n";				$tablespaces->moveNext();			}			echo "\t\t\t</select>\n\t\t</td>\n\t</tr>\n";		}		// Comments (if available)		if ($data->hasSharedComments()) {			echo "\t<tr>\n\t\t<th class=\"data left\">{$lang['strcomment']}</th>\n";			echo "\t\t<td><textarea name=\"formComment\" rows=\"3\" cols=\"32\">",				htmlspecialchars($_POST['formComment']), "</textarea></td>\n\t</tr>\n";		}		echo "</table>\n";		echo "<p><input type=\"hidden\" name=\"action\" value=\"save_create\" />\n";		echo $misc->form;		echo "<input type=\"submit\" value=\"{$lang['strcreate']}\" />\n";		echo "<input type=\"submit\" name=\"cancel\" value=\"{$lang['strcancel']}\" /></p>\n";		echo "</form>\n";	}	/**	 * Actually creates the new view in the database	 */	function doSaveCreate() {		global $data, $lang, $_reload_browser;		// Default tablespace to null if it isn't set		if (!isset($_POST['formSpc'])) $_POST['formSpc'] = null;		// Default comment to blank if it isn't set		if (!isset($_POST['formComment'])) $_POST['formComment'] = null;		// Default collate to blank if it isn't set		if (!isset($_POST['formCollate'])) $_POST['formCollate'] = null;		// Default ctype to blank if it isn't set		if (!isset($_POST['formCType'])) $_POST['formCType'] = null;		// Check that they've given a name and a definition		if ($_POST['formName'] == '') doCreate($lang['strdatabaseneedsname']);		else {			$status = $data->createDatabase($_POST['formName'], $_POST['formEncoding'], $_POST['formSpc'],				$_POST['formComment'], $_POST['formTemplate'], $_POST['formCollate'], $_POST['formCType']);			if ($status == 0) {				$_reload_browser = true;				doDefault($lang['strdatabasecreated']);			}			else				doCreate($lang['strdatabasecreatedbad']);		}	}	/**	 * Displays options for cluster download	 */	function doExport($msg = '') {		global $data, $misc;		global $lang;		$misc->printTrail('server');		$misc->printTabs('server','export');		$misc->printMsg($msg);		echo "<form action=\"dbexport.php\" method=\"post\">\n";		echo "<table>\n";		echo "<tr><th class=\"data\">{$lang['strformat']}</th><th class=\"data\">{$lang['stroptions']}</th></tr>\n";		// Data only		echo "<tr><th class=\"data left\" rowspan=\"2\">";		echo "<input type=\"radio\" id=\"what1\" name=\"what\" value=\"dataonly\" checked=\"checked\" /><label for=\"what1\">{$lang['strdataonly']}</label></th>\n";		echo "<td>{$lang['strformat']}\n";		echo "<select name=\"d_format\">\n";		echo "<option value=\"copy\">COPY</option>\n";		echo "<option value=\"sql\">SQL</option>\n";		echo "</select>\n</td>\n</tr>\n";		echo "<tr><td><input type=\"checkbox\" id=\"d_oids\" name=\"d_oids\" /><label for=\"d_oids\">{$lang['stroids']}</label></td>\n</tr>\n";		// Structure only		echo "<tr><th class=\"data left\"><input type=\"radio\" id=\"what2\" name=\"what\" value=\"structureonly\" /><label for=\"what2\">{$lang['strstructureonly']}</label></th>\n";		echo "<td><input type=\"checkbox\" id=\"s_clean\" name=\"s_clean\" /><label for=\"s_clean\">{$lang['strdrop']}</label></td>\n</tr>\n";		// Structure and data		echo "<tr><th class=\"data left\" rowspan=\"3\">";		echo "<input type=\"radio\" id=\"what3\" name=\"what\" value=\"structureanddata\" /><label for=\"what3\">{$lang['strstructureanddata']}</label></th>\n";		echo "<td>{$lang['strformat']}\n";		echo "<select name=\"sd_format\">\n";		echo "<option value=\"copy\">COPY</option>\n";		echo "<option value=\"sql\">SQL</option>\n";		echo "</select>\n</td>\n</tr>\n";		echo "<tr><td><input type=\"checkbox\" id=\"sd_clean\" name=\"sd_clean\" /><label for=\"sd_clean\">{$lang['strdrop']}</label></td>\n</tr>\n";		echo "<tr><td><input type=\"checkbox\" id=\"sd_oids\" name=\"sd_oids\" /><label for=\"sd_oids\">{$lang['stroids']}</label></td>\n</tr>\n";		echo "</table>\n";		echo "<h3>{$lang['stroptions']}</h3>\n";		echo "<p><input type=\"radio\" id=\"output1\" name=\"output\" value=\"show\" checked=\"checked\" /><label for=\"output1\">{$lang['strshow']}</label>\n";		echo "<br/><input type=\"radio\" id=\"output2\" name=\"output\" value=\"download\" /><label for=\"output2\">{$lang['strdownload']}</label></p>\n";		echo "<p><input type=\"hidden\" name=\"action\" value=\"export\" />\n";		echo "<input type=\"hidden\" name=\"subject\" value=\"server\" />\n";		echo $misc->form;		echo "<input type=\"submit\" value=\"{$lang['strexport']}\" /></p>\n";		echo "</form>\n";	}	/**	 * Show default list of databases in the server	 */	function doDefault($msg = '') {		global $data, $conf, $misc;		global $lang;		$misc->printTrail('server');		$misc->printTabs('server','databases');		$misc->printMsg($msg);		$databases = $data->getDatabases();		$columns = array(			'database' => array(				'title' => $lang['strdatabase'],				'field' => field('datname'),				'url'   => "redirect.php?subject=database&amp;{$misc->href}&amp;",				'vars'  => array('database' => 'datname'),			),			'owner' => array(				'title' => $lang['strowner'],				'field' => field('datowner'),			),			'encoding' => array(				'title' => $lang['strencoding'],				'field' => field('datencoding'),			),			'lc_collate' => array(				'title' => $lang['strcollation'],				'field' => field('datcollate'),			),			'lc_ctype' => array(				'title' => $lang['strctype'],				'field' => field('datctype'),			),			'tablespace' => array(				'title' => $lang['strtablespace'],				'field' => field('tablespace'),			),			'dbsize' => array(				'title' => $lang['strsize'],				'field' => field('dbsize'),				'type' => 'prettysize',			),			'actions' => array(				'title' => $lang['stractions'],			),			'comment' => array(				'title' => $lang['strcomment'],				'field' => field('datcomment'),			),		);		$actions = array(			'multiactions' => array(				'keycols' => array('database' => 'datname'),				'url' => 'all_db.php',				'default' => null,			),			'drop' => array(				'title' => $lang['strdrop'],				'url'   => "all_db.php?action=confirm_drop&amp;subject=database&amp;{$misc->href}&amp;",				'vars'  => array('dropdatabase' => 'datname'),				'multiaction' => 'confirm_drop',			),			'privileges' => array(				'title' => $lang['strprivileges'],				'url'   => "privileges.php?subject=database&amp;{$misc->href}&amp;",				'vars'  => array('database' => 'datname'),			)		);		if ($data->hasAlterDatabase() ) {			$actions['alter'] = array(				'title' => $lang['stralter'],				'url'   => "all_db.php?action=confirm_alter&amp;subject=database&amp;{$misc->href}&amp;",				'vars'  => array('alterdatabase' => 'datname')			);		}		if (!$data->hasTablespaces()) unset($columns['tablespace']);		if (!$data->hasServerAdminFuncs()) unset($columns['dbsize']);		if (!$data->hasDatabaseCollation()) unset($columns['lc_collate'], $columns['lc_ctype']);		if (!isset($data->privlist['database'])) unset($actions['privileges']);		$misc->printTable($databases, $columns, $actions, $lang['strnodatabases']);		echo "<p><a class=\"navlink\" href=\"all_db.php?action=create&amp;{$misc->href}\">{$lang['strcreatedatabase']}</a></p>\n";	}	function doTree() {		global $misc, $data, $lang;		$databases = $data->getDatabases();		$reqvars = $misc->getRequestVars('database');		$attrs = array(			'text'   => field('datname'),			'icon'   => 'Database',			'toolTip'=> field('datcomment'),			'action' => url('redirect.php',							$reqvars,							array('database' => field('datname'))						),			'branch' => url('database.php',							$reqvars,							array(								'action' => 'tree',								'database' => field('datname')							)						),		);		$misc->printTreeXML($databases, $attrs);		exit;	}	if ($action == 'tree') doTree();	$misc->printHeader($lang['strdatabases']);	$misc->printBody();	switch ($action) {		case 'export':			doExport();			break;		case 'save_create':			if (isset($_POST['cancel'])) doDefault();			else doSaveCreate();			break;		case 'create':			doCreate();			break;		case 'drop':			if (isset($_REQUEST['drop'])) doDrop(false);			else doDefault();			break;		case 'confirm_drop':			doDrop(true);			break;		case 'alter':			if (isset($_POST['oldname']) && isset($_POST['newname']) && !isset($_POST['cancel']) ) doAlter(false);			else doDefault();			break;		case 'confirm_alter':			doAlter(true);			break;		default:			doDefault();			break;	}	$misc->printFooter();?>
<?php	/**	 * Manage users in a database cluster	 *	 * $Id: users.php,v 1.40 2008/02/25 17:20:44 xzilla Exp $	 */	// Include application functions	include_once('./libraries/lib.inc.php');	$action = (isset($_REQUEST['action'])) ? $_REQUEST['action'] : '';	if (!isset($msg)) $msg = '';			/**	 * If a user is not a superuser, then we have an 'account management' page	 * where they can change their password, etc.  We don't prevent them from	 * messing with the URL to gain access to other user admin stuff, because	 * the PostgreSQL permissions will prevent them changing anything anyway.	 */	function doAccount($msg = '') {		global $data, $misc;		global $lang;				$server_info = $misc->getServerInfo();				$userdata = $data->getUser($server_info['username']);		$_REQUEST['user'] = $server_info['username'];				$misc->printTrail('user');		$misc->printTabs('server','account');		$misc->printMsg($msg);		if ($userdata->recordCount() > 0) {			$userdata->fields['usesuper'] = $data->phpBool($userdata->fields['usesuper']);			$userdata->fields['usecreatedb'] = $data->phpBool($userdata->fields['usecreatedb']);			echo "<table>\n";			echo "<tr><th class=\"data\">{$lang['strusername']}</th><th class=\"data\">{$lang['strsuper']}</th><th class=\"data\">{$lang['strcreatedb']}</th><th class=\"data\">{$lang['strexpires']}</th>";			echo "<th class=\"data\">{$lang['strsessiondefaults']}</th>";			echo "</tr>\n";			echo "<tr>\n\t<td class=\"data1\">", $misc->printVal($userdata->fields['usename']), "</td>\n";			echo "\t<td class=\"data1\">", $misc->printVal($userdata->fields['usesuper'], 'yesno'), "</td>\n";			echo "\t<td class=\"data1\">", $misc->printVal($userdata->fields['usecreatedb'], 'yesno'), "</td>\n";			echo "\t<td class=\"data1\">", ($userdata->fields['useexpires'] == 'infinity' || is_null($userdata->fields['useexpires']) ? $lang['strnever'] : $misc->printVal($userdata->fields['useexpires'])), "</td>\n";			echo "\t<td class=\"data1\">", $misc->printVal($userdata->fields['useconfig']), "</td>\n";			echo "</tr>\n</table>\n";		}		else echo "<p>{$lang['strnodata']}</p>\n";				echo "<p><a class=\"navlink\" href=\"users.php?action=confchangepassword&amp;{$misc->href}\">{$lang['strchangepassword']}</a></p>\n";	}		/**	 * Show confirmation of change password and actually change password	 */	function doChangePassword($confirm, $msg = '') {		global $data, $misc;		global $lang, $conf;				$server_info = $misc->getServerInfo();				if ($confirm) {			$_REQUEST['user'] = $server_info['username'];			$misc->printTrail('user');			$misc->printTitle($lang['strchangepassword'],'pg.user.alter');			$misc->printMsg($msg);						if (!isset($_POST['password'])) $_POST['password'] = '';			if (!isset($_POST['confirm'])) $_POST['confirm'] = '';						echo "<form action=\"users.php\" method=\"post\">\n";			echo "<table>\n";			echo "\t<tr>\n\t\t<th class=\"data left required\">{$lang['strpassword']}</th>\n";			echo "\t\t<td><input type=\"password\" name=\"password\" size=\"32\" value=\"", 				htmlspecialchars($_POST['password']), "\" /></td>\n\t</tr>\n";			echo "\t<tr>\n\t\t<th class=\"data left required\">{$lang['strconfirm']}</th>\n";			echo "\t\t<td><input type=\"password\" name=\"confirm\" size=\"32\" value=\"\" /></td>\n\t</tr>\n";			echo "</table>\n";			echo "<p><input type=\"hidden\" name=\"action\" value=\"changepassword\" />\n";			echo $misc->form;			echo "<input type=\"submit\" name=\"ok\" value=\"{$lang['strok']}\" />\n";			echo "<input type=\"submit\" name=\"cancel\" value=\"{$lang['strcancel']}\" />\n";			echo "</p></form>\n";		}		else {			// Check that password is minimum length			if (strlen($_POST['password']) < $conf['min_password_length'])				doChangePassword(true, $lang['strpasswordshort']);			// Check that password matches confirmation password			elseif ($_POST['password'] != $_POST['confirm'])				doChangePassword(true, $lang['strpasswordconfirm']);			else {				$status = $data->changePassword($server_info['username'], 					$_POST['password']);				if ($status == 0)					doAccount($lang['strpasswordchanged']);				else					doAccount($lang['strpasswordchangedbad']);			}		}			}	/**	 * Function to allow editing of a user	 */	function doEdit($msg = '') {		global $data, $misc;		global $lang;			$misc->printTrail('user');		$misc->printTitle($lang['stralter'],'pg.user.alter');		$misc->printMsg($msg);				$userdata = $data->getUser($_REQUEST['username']);				if ($userdata->recordCount() > 0) {			$server_info = $misc->getServerInfo();			$canRename = $data->hasUserRename() && ($_REQUEST['username'] != $server_info['username']);			$userdata->fields['usesuper'] = $data->phpBool($userdata->fields['usesuper']);			$userdata->fields['usecreatedb'] = $data->phpBool($userdata->fields['usecreatedb']);			if (!isset($_POST['formExpires'])){				if ($canRename) $_POST['newname'] = $userdata->fields['usename'];				if ($userdata->fields['usesuper']) $_POST['formSuper'] = '';				if ($userdata->fields['usecreatedb']) $_POST['formCreateDB'] = '';				$_POST['formExpires'] = $userdata->fields['useexpires'] == 'infinity' ? '' : $userdata->fields['useexpires'];				$_POST['formPassword'] = '';			}					echo "<form action=\"users.php\" method=\"post\">\n";			echo "<table>\n";			echo "\t<tr>\n\t\t<th class=\"data left\">{$lang['strusername']}</th>\n";			echo "\t\t<td class=\"data1\">", ($canRename ? "<input name=\"newname\" size=\"15\" maxlength=\"{$data->_maxNameLen}\" value=\"" . htmlspecialchars($_POST['newname']) . "\" />" : $misc->printVal($userdata->fields['usename'])), "</td>\n\t</tr>\n";			echo "\t<tr>\n\t\t<th class=\"data left\"><label for=\"formSuper\">{$lang['strsuper']}</label></th>\n";			echo "\t\t<td class=\"data1\"><input type=\"checkbox\" id=\"formSuper\" name=\"formSuper\"", 				(isset($_POST['formSuper'])) ? ' checked="checked"' : '', " /></td>\n\t</tr>\n";			echo "\t<tr>\n\t\t<th class=\"data left\"><label for=\"formCreateDB\">{$lang['strcreatedb']}</label></th>\n";			echo "\t\t<td class=\"data1\"><input type=\"checkbox\" id=\"formCreateDB\" name=\"formCreateDB\"", 				(isset($_POST['formCreateDB'])) ? ' checked="checked"' : '', " /></td>\n\t</tr>\n";			echo "\t<tr>\n\t\t<th class=\"data left\">{$lang['strexpires']}</th>\n";			echo "\t\t<td class=\"data1\"><input size=\"16\" name=\"formExpires\" value=\"", htmlspecialchars($_POST['formExpires']), "\" /></td>\n\t</tr>\n";			echo "\t<tr>\n\t\t<th class=\"data left\">{$lang['strpassword']}</th>\n";			echo "\t\t<td class=\"data1\"><input type=\"password\" size=\"16\" name=\"formPassword\" value=\"", htmlspecialchars($_POST['formPassword']), "\" /></td>\n\t</tr>\n";			echo "\t<tr>\n\t\t<th class=\"data left\">{$lang['strconfirm']}</th>\n";			echo "\t\t<td class=\"data1\"><input type=\"password\" size=\"16\" name=\"formConfirm\" value=\"\" /></td>\n\t</tr>\n";			echo "</table>\n";			echo "<p><input type=\"hidden\" name=\"action\" value=\"save_edit\" />\n";			echo "<input type=\"hidden\" name=\"username\" value=\"", htmlspecialchars($_REQUEST['username']), "\" />\n";			echo $misc->form;			echo "<input type=\"submit\" name=\"alter\" value=\"{$lang['stralter']}\" />\n";			echo "<input type=\"submit\" name=\"cancel\" value=\"{$lang['strcancel']}\" /></p>\n";			echo "</form>\n";		}		else echo "<p>{$lang['strnodata']}</p>\n";	}		/** 	 * Function to save after editing a user	 */	function doSaveEdit() {		global $data, $lang;				// Check name and password		if (isset($_POST['newname']) && $_POST['newname'] == '')			doEdit($lang['struserneedsname']);		else if ($_POST['formPassword'] != $_POST['formConfirm'])			doEdit($lang['strpasswordconfirm']);		else {			if (isset($_POST['newname'])) $status = $data->setRenameUser($_POST['username'], $_POST['formPassword'], isset($_POST['formCreateDB']), isset($_POST['formSuper']), $_POST['formExpires'], $_POST['newname']);			else $status = $data->setUser($_POST['username'], $_POST['formPassword'], isset($_POST['formCreateDB']), isset($_POST['formSuper']), $_POST['formExpires']);			if ($status == 0)				doDefault($lang['struserupdated']);			else				doEdit($lang['struserupdatedbad']);		}	}	/**	 * Show confirmation of drop and perform actual drop	 */	function doDrop($confirm) {		global $data, $misc;		global $lang;		if ($confirm) {			$misc->printTrail('user');			$misc->printTitle($lang['strdrop'],'pg.user.drop');						echo "<p>", sprintf($lang['strconfdropuser'], $misc->printVal($_REQUEST['username'])), "</p>\n";							echo "<form action=\"users.php\" method=\"post\">\n";			echo "<p><input type=\"hidden\" name=\"action\" value=\"drop\" />\n";			echo "<input type=\"hidden\" name=\"username\" value=\"", htmlspecialchars($_REQUEST['username']), "\" />\n";			echo $misc->form;			echo "<input type=\"submit\" name=\"drop\" value=\"{$lang['strdrop']}\" />\n";			echo "<input type=\"submit\" name=\"cancel\" value=\"{$lang['strcancel']}\" /></p>\n";			echo "</form>\n";		}		else {			$status = $data->dropUser($_REQUEST['username']);			if ($status == 0)				doDefault($lang['struserdropped']);			else				doDefault($lang['struserdroppedbad']);		}			}		/**	 * Displays a screen where they can enter a new user	 */	function doCreate($msg = '') {		global $data, $misc, $username;		global $lang;				if (!isset($_POST['formUsername'])) $_POST['formUsername'] = '';		if (!isset($_POST['formPassword'])) $_POST['formPassword'] = '';		if (!isset($_POST['formConfirm'])) $_POST['formConfirm'] = '';		if (!isset($_POST['formExpires'])) $_POST['formExpires'] = '';				$misc->printTrail('server');		$misc->printTitle($lang['strcreateuser'],'pg.user.create');		$misc->printMsg($msg);		echo "<form action=\"users.php\" method=\"post\">\n";		echo "<table>\n";		echo "\t<tr>\n\t\t<th class=\"data left required\">{$lang['strusername']}</th>\n";		echo "\t\t<td class=\"data1\"><input size=\"15\" maxlength=\"{$data->_maxNameLen}\" name=\"formUsername\" value=\"", htmlspecialchars($_POST['formUsername']), "\" /></td>\n\t</tr>\n";		echo "\t<tr>\n\t\t<th class=\"data left\">{$lang['strpassword']}</th>\n";		echo "\t\t<td class=\"data1\"><input size=\"15\" type=\"password\" name=\"formPassword\" value=\"", htmlspecialchars($_POST['formPassword']), "\" /></td>\n\t</tr>\n";		echo "\t<tr>\n\t\t<th class=\"data left\">{$lang['strconfirm']}</th>\n";		echo "\t\t<td class=\"data1\"><input size=\"15\" type=\"password\" name=\"formConfirm\" value=\"", htmlspecialchars($_POST['formConfirm']), "\" /></td>\n\t</tr>\n";		echo "\t<tr>\n\t\t<th class=\"data left\"><label for=\"formSuper\">{$lang['strsuper']}</label></th>\n";		echo "\t\t<td class=\"data1\"><input type=\"checkbox\" id=\"formSuper\" name=\"formSuper\"", 			(isset($_POST['formSuper'])) ? ' checked="checked"' : '', " /></td>\n\t</tr>\n";		echo "\t<tr>\n\t\t<th class=\"data left\"><label for=\"formCreateDB\">{$lang['strcreatedb']}</label></th>\n";		echo "\t\t<td class=\"data1\"><input type=\"checkbox\" id=\"formCreateDB\" name=\"formCreateDB\"", 			(isset($_POST['formCreateDB'])) ? ' checked="checked"' : '', " /></td>\n\t</tr>\n";		echo "\t<tr>\n\t\t<th class=\"data left\">{$lang['strexpires']}</th>\n";		echo "\t\t<td class=\"data1\"><input size=\"30\" name=\"formExpires\" value=\"", htmlspecialchars($_POST['formExpires']), "\" /></td>\n\t</tr>\n";		echo "</table>\n";		echo "<p><input type=\"hidden\" name=\"action\" value=\"save_create\" />\n";		echo $misc->form;		echo "<input type=\"submit\" name=\"create\" value=\"{$lang['strcreate']}\" />\n";		echo "<input type=\"submit\" name=\"cancel\" value=\"{$lang['strcancel']}\" /></p>\n";		echo "</form>\n";	}		/**	 * Actually creates the new user in the database	 */	function doSaveCreate() {		global $data;		global $lang;		// Check data		if ($_POST['formUsername'] == '')			doCreate($lang['struserneedsname']);		else if ($_POST['formPassword'] != $_POST['formConfirm'])			doCreate($lang['strpasswordconfirm']);		else {					$status = $data->createUser($_POST['formUsername'], $_POST['formPassword'], 				isset($_POST['formCreateDB']), isset($_POST['formSuper']), $_POST['formExpires'], array());			if ($status == 0)				doDefault($lang['strusercreated']);			else				doCreate($lang['strusercreatedbad']);		}	}		/**	 * Show default list of users in the database	 */	function doDefault($msg = '') {		global $data, $misc;		global $lang;				function renderUseExpires($val) {			global $lang;			return $val == 'infinity' ? $lang['strnever'] : htmlspecialchars($val); 		}				$misc->printTrail('server');		$misc->printTabs('server','users');		$misc->printMsg($msg);				$users = $data->getUsers();				$columns = array(			'user' => array(				'title' => $lang['strusername'],				'field' => field('usename'),			),			'superuser' => array(				'title' => $lang['strsuper'],				'field' => field('usesuper'),				'type'  => 'yesno',			),			'createdb' => array(				'title' => $lang['strcreatedb'],				'field' => field('usecreatedb'),				'type'  => 'yesno',			),			'expires' => array(				'title' => $lang['strexpires'],				'field' => field('useexpires'),				'type'  => 'callback',				'params'=> array('function' => 'renderUseExpires', 'null' => $lang['strnever']),			),			'defaults' => array(				'title' => $lang['strsessiondefaults'],				'field' => field('useconfig'),			),			'actions' => array(				'title' => $lang['stractions'],			),		);				$actions = array(			'alter' => array(				'title' => $lang['stralter'],				'url'   => "users.php?action=edit&amp;{$misc->href}&amp;",				'vars'  => array('username' => 'usename'),			),			'drop' => array(				'title' => $lang['strdrop'],				'url'   => "users.php?action=confirm_drop&amp;{$misc->href}&amp;",				'vars'  => array('username' => 'usename'),			),		);				$misc->printTable($users, $columns, $actions, $lang['strnousers']);		echo "<p><a class=\"navlink\" href=\"users.php?action=create&amp;{$misc->href}\">{$lang['strcreateuser']}</a></p>\n";	}	$misc->printHeader($lang['strusers']);	$misc->printBody();	switch ($action) {		case 'changepassword':			if (isset($_REQUEST['ok'])) doChangePassword(false);			else doAccount();			break;		case 'confchangepassword':			doChangePassword(true);			break;					case 'account':			doAccount();			break;		case 'save_create':			if (isset($_REQUEST['cancel'])) doDefault();			else doSaveCreate();			break;		case 'create':						doCreate();			break;		case 'drop':			if (isset($_REQUEST['cancel'])) doDefault();			else doDrop(false);			break;		case 'confirm_drop':			doDrop(true);			break;		case 'save_edit':			if (isset($_REQUEST['cancel'])) doDefault();			else doSaveEdit();			break;		case 'edit':			doEdit();			break;		default:			doDefault();			break;	}		$misc->printFooter();?>
<?php/** * PostgreSQL 8.0 support * * $Id: Postgres80.php,v 1.28 2007/12/12 04:11:10 xzilla Exp $ */include_once('./classes/database/Postgres81.php');class Postgres80 extends Postgres81 {	var $major_version = 8.0;	// Map of database encoding names to HTTP encoding names.  If a	// database encoding does not appear in this list, then its HTTP	// encoding name is the same as its database encoding name.	var $codemap = array(		'ALT' => 'CP866',		'EUC_CN' => 'GB2312',		'EUC_JP' => 'EUC-JP',		'EUC_KR' => 'EUC-KR',		'EUC_TW' => 'EUC-TW',		'ISO_8859_5' => 'ISO-8859-5',		'ISO_8859_6' => 'ISO-8859-6',		'ISO_8859_7' => 'ISO-8859-7',		'ISO_8859_8' => 'ISO-8859-8',		'JOHAB' => 'CP1361',		'KOI8' => 'KOI8-R',		'LATIN1' => 'ISO-8859-1',		'LATIN2' => 'ISO-8859-2',		'LATIN3' => 'ISO-8859-3',		'LATIN4' => 'ISO-8859-4',		// The following encoding map is a known error in PostgreSQL < 7.2		// See the constructor for Postgres72.		'LATIN5' => 'ISO-8859-5',		'LATIN6' => 'ISO-8859-10',		'LATIN7' => 'ISO-8859-13',		'LATIN8' => 'ISO-8859-14',		'LATIN9' => 'ISO-8859-15',		'LATIN10' => 'ISO-8859-16',		'SQL_ASCII' => 'US-ASCII',		'TCVN' => 'CP1258',		'UNICODE' => 'UTF-8',		'WIN' => 'CP1251',		'WIN874' => 'CP874',		'WIN1256' => 'CP1256'	);	/**	 * Constructor	 * @param $conn The database connection	 */	function Postgres80($conn) {		$this->Postgres81($conn);	}	// Help functions	function getHelpPages() {		include_once('./help/PostgresDoc80.php');		return $this->help_page;	}	// Database functions	/**	 * Return all database available on the server	 * @return A list of databases, sorted alphabetically	 */	function getDatabases($currentdatabase = NULL) {		global $conf, $misc;		$server_info = $misc->getServerInfo();		if (isset($conf['owned_only']) && $conf['owned_only'] && !$this->isSuperUser($server_info['username'])) {			$username = $server_info['username'];			$this->clean($username);			$clause = " AND pu.usename='{$username}'";		}		else $clause = '';		if ($currentdatabase != NULL) {			$this->clean($currentdatabase);			$orderby = "ORDER BY pdb.datname = '{$currentdatabase}' DESC, pdb.datname";		}		else			$orderby = "ORDER BY pdb.datname";		if (!$conf['show_system'])			$where = ' AND NOT pdb.datistemplate';		else			$where = ' AND pdb.datallowconn';		$sql = "SELECT pdb.datname AS datname, pu.usename AS datowner, pg_encoding_to_char(encoding) AS datencoding,                               (SELECT description FROM pg_description pd WHERE pdb.oid=pd.objoid) AS datcomment,                               (SELECT spcname FROM pg_catalog.pg_tablespace pt WHERE pt.oid=pdb.dattablespace) AS tablespace                        FROM pg_database pdb, pg_user pu			WHERE pdb.datdba = pu.usesysid			{$where}			{$clause}			{$orderby}";		return $this->selectSet($sql);	}	// Schema functions	/**	 * Return all schemas in the current database.	 * @return All schemas, sorted alphabetically	 */	function getSchemas() {		global $conf, $slony;		if (!$conf['show_system']) {			$where = "WHERE nspname NOT LIKE 'pg@_%' ESCAPE '@' AND nspname != 'information_schema'";			if (isset($slony) && $slony->isEnabled()) {				$temp = $slony->slony_schema;				$this->clean($temp);				$where .= " AND nspname != '{$temp}'";			}		}		else $where = "WHERE nspname !~ '^pg_t(emp_[0-9]+|oast)$'";		$sql = "			SELECT pn.nspname, pu.usename AS nspowner,				pg_catalog.obj_description(pn.oid, 'pg_namespace') AS nspcomment			FROM pg_catalog.pg_namespace pn				LEFT JOIN pg_catalog.pg_user pu ON (pn.nspowner = pu.usesysid)			{$where}			ORDER BY nspname";		return $this->selectSet($sql);	}	/**	 * Return all information relating to a schema	 * @param $schema The name of the schema	 * @return Schema information	 */	function getSchemaByName($schema) {		$this->clean($schema);		$sql = "			SELECT nspname, nspowner, u.usename AS ownername, nspacl,				pg_catalog.obj_description(pn.oid, 'pg_namespace') as nspcomment            FROM pg_catalog.pg_namespace pn            	LEFT JOIN pg_shadow as u ON pn.nspowner = u.usesysid			WHERE nspname='{$schema}'";		return $this->selectSet($sql);	}	// Table functions	/**	 * Protected method which alter a table	 * SHOULDN'T BE CALLED OUTSIDE OF A TRANSACTION	 * @param $tblrs The table recordSet returned by getTable()	 * @param $name The new name for the table	 * @param $owner The new owner for the table	 * @param $schema The new schema for the table	 * @param $comment The comment on the table	 * @param $tablespace The new tablespace for the table ('' means leave as is)	 * @return 0 success	 * @return -3 rename error	 * @return -4 comment error	 * @return -5 owner error	 * @return -6 tablespace error	 */	protected	function _alterTable($tblrs, $name, $owner, $schema, $comment, $tablespace) {		/* $schema not supported in pg80- */		// Comment		$status = $this->setComment('TABLE', '', $tblrs->fields['relname'], $comment);		if ($status != 0) return -4;		// Owner		$this->fieldClean($owner);		$status = $this->alterTableOwner($tblrs, $owner);		if ($status != 0) return -5;		// Tablespace		$this->fieldClean($tablespace);		$status = $this->alterTableTablespace($tblrs, $tablespace);			if ($status != 0) return -6;		// Rename		$this->fieldClean($name);		$status = $this->alterTableName($tblrs, $name);		if ($status != 0) return -3;		return 0;	}	// Constraint functions	/**	 * Returns a list of all constraints on a table,	 * including constraint name, definition, related col and referenced namespace,	 * table and col if needed	 * @param $table the table where we are looking for fk	 * @return a recordset	 */	function getConstraintsWithFields($table) {		$c_schema = $this->_schema;		$this->clean($c_schema);		$this->clean($table);		// get the max number of col used in a constraint for the table		$sql = "SELECT DISTINCT			max(SUBSTRING(array_dims(c.conkey) FROM '^\\\[.*:(.*)\\\]$')) as nb		FROM pg_catalog.pg_constraint AS c			JOIN pg_catalog.pg_class AS r ON (c.conrelid=r.oid)		    JOIN pg_catalog.pg_namespace AS ns ON (r.relnamespace=ns.oid)		WHERE			r.relname = '{$table}' AND ns.nspname='{$c_schema}'";		$rs = $this->selectSet($sql);		if ($rs->EOF) $max_col = 0;		else $max_col = $rs->fields['nb'];		$sql = '			SELECT				c.oid AS conid, c.contype, c.conname, pg_catalog.pg_get_constraintdef(c.oid, true) AS consrc,				ns1.nspname as p_schema, r1.relname as p_table, ns2.nspname as f_schema,				r2.relname as f_table, f1.attname as p_field, f1.attnum AS p_attnum, f2.attname as f_field,				f2.attnum AS f_attnum, pg_catalog.obj_description(c.oid, \'pg_constraint\') AS constcomment,				c.conrelid, c.confrelid			FROM				pg_catalog.pg_constraint AS c				JOIN pg_catalog.pg_class AS r1 ON (c.conrelid=r1.oid)				JOIN pg_catalog.pg_attribute AS f1 ON (f1.attrelid=r1.oid AND (f1.attnum=c.conkey[1]';		for ($i = 2; $i <= $rs->fields['nb']; $i++) {			$sql.= " OR f1.attnum=c.conkey[$i]";		}		$sql.= '))				JOIN pg_catalog.pg_namespace AS ns1 ON r1.relnamespace=ns1.oid				LEFT JOIN (					pg_catalog.pg_class AS r2 JOIN pg_catalog.pg_namespace AS ns2 ON (r2.relnamespace=ns2.oid)				) ON (c.confrelid=r2.oid)				LEFT JOIN pg_catalog.pg_attribute AS f2 ON					(f2.attrelid=r2.oid AND ((c.confkey[1]=f2.attnum AND c.conkey[1]=f1.attnum)';		for ($i = 2; $i <= $rs->fields['nb']; $i++)			$sql.= "OR (c.confkey[$i]=f2.attnum AND c.conkey[$i]=f1.attnum)";		$sql .= sprintf("))			WHERE				r1.relname = '%s' AND ns1.nspname='%s'			ORDER BY 1", $table, $c_schema);		return $this->selectSet($sql);	}	// View functions	/**	 * Protected method which alter a view	 * SHOULDN'T BE CALLED OUTSIDE OF A TRANSACTION	 * @param $vwrs The view recordSet returned by getView()	 * @param $name The new name for the view	 * @param $owner The new owner for the view	 * @param $comment The comment on the view	 * @return 0 success	 * @return -3 rename error	 * @return -4 comment error	 * @return -5 owner error	 */	protected    function _alterView($vwrs, $name, $owner, $schema, $comment) {    	/* $schema not supported in pg80- */    	$this->fieldArrayClean($vwrs->fields);		// Comment		if ($this->setComment('VIEW', $vwrs->fields['relname'], '', $comment) != 0)			return -4;		// Owner		$this->fieldClean($owner);		$status = $this->alterViewOwner($vwrs, $owner);		if ($status != 0) return -5;		// Rename		$this->fieldClean($name);		$status = $this->alterViewName($vwrs, $name);		if ($status != 0) return -3;		return 0;	}	// Sequence functions	/**	 * Protected method which alter a sequence	 * SHOULDN'T BE CALLED OUTSIDE OF A TRANSACTION	 * @param $seqrs The sequence recordSet returned by getSequence()	 * @param $name The new name for the sequence	 * @param $comment The comment on the sequence	 * @param $owner The new owner for the sequence	 * @param $schema The new schema for the sequence	 * @param $increment The increment	 * @param $minvalue The min value	 * @param $maxvalue The max value	 * @param $restartvalue The starting value	 * @param $cachevalue The cache value	 * @param $cycledvalue True if cycled, false otherwise	 * @param $startvalue The sequence start value when issueing a restart	 * @return 0 success	 * @return -3 rename error	 * @return -4 comment error	 * @return -5 owner error	 * @return -6 get sequence props error	 * @return -7 schema error	 */	protected	function _alterSequence($seqrs, $name, $comment, $owner, $schema, $increment,	$minvalue, $maxvalue, $restartvalue, $cachevalue, $cycledvalue, $startvalue) {		/* $schema not supported in pg80- */		$this->fieldArrayClean($seqrs->fields);		// Comment		$status = $this->setComment('SEQUENCE', $seqrs->fields['seqname'], '', $comment);		if ($status != 0)			return -4;		// Owner		$this->fieldClean($owner);		$status = $this->alterSequenceOwner($seqrs, $owner);		if ($status != 0)			return -5;		// Props		$this->clean($increment);		$this->clean($minvalue);		$this->clean($maxvalue);		$this->clean($restartvalue);		$this->clean($cachevalue);		$this->clean($cycledvalue);		$this->clean($startvalue);		$status = $this->alterSequenceProps($seqrs, $increment,	$minvalue,			$maxvalue, $restartvalue, $cachevalue, $cycledvalue, null);		if ($status != 0)			return -6;		// Rename		$this->fieldClean($name);		$status = $this->alterSequenceName($seqrs, $name);		if ($status != 0)			return -3;		return 0;	}	// Role, User/group functions	/**	 * Changes a user's password	 * @param $username The username	 * @param $password The new password	 * @return 0 success	 */	function changePassword($username, $password) {		$enc = $this->_encryptPassword($username, $password);		$this->fieldClean($username);		$this->clean($enc);		$sql = "ALTER USER \"{$username}\" WITH ENCRYPTED PASSWORD '{$enc}'";		return $this->execute($sql);	}	// Aggregate functions	/**	 * Gets all information for an aggregate	 * @param $name The name of the aggregate	 * @param $basetype The input data type of the aggregate	 * @return A recordset	 */	function getAggregate($name, $basetype) {		$c_schema = $this->_schema;		$this->clean($c_schema);		$this->clean($name);		$this->clean($basetype);		$sql = "			SELECT p.proname,				CASE p.proargtypes[0]					WHEN 'pg_catalog.\"any\"'::pg_catalog.regtype THEN NULL					ELSE pg_catalog.format_type(p.proargtypes[0], NULL)				END AS proargtypes, a.aggtransfn, format_type(a.aggtranstype, NULL) AS aggstype,				a.aggfinalfn, a.agginitval, u.usename, pg_catalog.obj_description(p.oid, 'pg_proc') AS aggrcomment			FROM pg_catalog.pg_proc p, pg_catalog.pg_namespace n, pg_catalog.pg_user u, pg_catalog.pg_aggregate a			WHERE n.oid = p.pronamespace AND p.proowner=u.usesysid AND p.oid=a.aggfnoid				AND p.proisagg AND n.nspname='{$c_schema}'				AND p.proname='{$name}'				AND CASE p.proargtypes[0]					WHEN 'pg_catalog.\"any\"'::pg_catalog.regtype THEN ''					ELSE pg_catalog.format_type(p.proargtypes[0], NULL)				END ='{$basetype}'";		return $this->selectSet($sql);	}	// Capabilities	function hasAggregateSortOp() { return false; }	function hasAlterTableSchema() { return false; }	function hasAutovacuum() { return false; }	function hasDisableTriggers() { return false; }	function hasFunctionAlterSchema() { return false; }	function hasPreparedXacts() { return false; }	function hasRoles() { return false; }	function hasAlterSequenceSchema() { return false; }	function hasServerAdminFuncs() { return false; }}?>
<?php	/**	 * Manage conversions in a database	 *	 * $Id: conversions.php,v 1.15 2007/08/31 18:30:10 ioguix Exp $	 */	// Include application functions	include_once('./libraries/lib.inc.php');		$action = (isset($_REQUEST['action'])) ? $_REQUEST['action'] : '';	if (!isset($msg)) $msg = '';	/**	 * Show default list of conversions in the database	 */	function doDefault($msg = '') {		global $data, $conf, $misc, $database;		global $lang;		$misc->printTrail('schema');		$misc->printTabs('schema', 'conversions');		$misc->printMsg($msg);				$conversions = $data->getconversions();				$columns = array(			'conversion' => array(				'title' => $lang['strname'],				'field' => field('conname'),			),			'source_encoding' => array(				'title' => $lang['strsourceencoding'],				'field' => field('conforencoding'),			),			'target_encoding' => array(				'title' => $lang['strtargetencoding'],				'field' => field('contoencoding'),			),			'default' => array(				'title' => $lang['strdefault'],				'field' => field('condefault'),				'type'  => 'yesno',			),			'comment' => array(				'title' => $lang['strcomment'],				'field' => field('concomment'),			),		);				$actions = array();				$misc->printTable($conversions, $columns, $actions, $lang['strnoconversions']);	}		/**	 * Generate XML for the browser tree.	 */	function doTree() {		global $misc, $data;				$conversions = $data->getconversions();				$attrs = array(			'text'   => field('conname'),			'icon'   => 'Conversion',			'toolTip'=> field('concomment')		);				$misc->printTreeXML($conversions, $attrs);		exit;	}		if ($action == 'tree') doTree();		$misc->printHeader($lang['strconversions']);	$misc->printBody();	switch ($action) {		default:			doDefault();			break;	}		$misc->printFooter();?>
