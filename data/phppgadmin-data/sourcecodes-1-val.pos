<?php	/**	 * Manage databases within a server	 *	 * $Id: all_db.php,v 1.59 2007/10/17 21:40:19 ioguix Exp $	 */	// Include application functions	include_once('./libraries/lib.inc.php');	$action = (isset($_REQUEST['action'])) ? $_REQUEST['action'] : '';	if (!isset($msg)) $msg = '';	/**	 * Display a form for alter and perform actual alter	 */	function doAlter($confirm) {		global $data, $misc, $_reload_browser;		global $lang;		if ($confirm) {			$misc->printTrail('database');			$misc->printTitle($lang['stralter'], 'pg.database.alter');			echo "<form action=\"all_db.php\" method=\"post\">\n";			echo "<table>\n";			echo "<tr><th class=\"data left required\">{$lang['strname']}</th>\n";			echo "<td class=\"data1\">";			echo "<input name=\"newname\" size=\"32\" maxlength=\"{$data->_maxNameLen}\" value=\"",				htmlspecialchars($_REQUEST['alterdatabase']), "\" /></td></tr>\n";			$server_info = $misc->getServerInfo();			if ($data->hasAlterDatabaseOwner() && $data->isSuperUser($server_info['username'])) {				// Fetch all users				$rs = $data->getDatabaseOwner($_REQUEST['alterdatabase']);				$owner = isset($rs->fields['usename']) ? $rs->fields['usename'] : '';				$users = $data->getUsers();				echo "<tr><th class=\"data left required\">{$lang['strowner']}</th>\n";				echo "<td class=\"data1\"><select name=\"owner\">";				while (!$users->EOF) {					$uname = $users->fields['usename'];					echo "<option value=\"", htmlspecialchars($uname), "\"",						($uname == $owner) ? ' selected="selected"' : '', ">", htmlspecialchars($uname), "</option>\n";					$users->moveNext();				}				echo "</select></td></tr>\n";			}			if ($data->hasSharedComments()){				$rs = $data->getDatabaseComment($_REQUEST['alterdatabase']);				$comment = isset($rs->fields['description']) ? $rs->fields['description'] : '';				echo "<tr><th class=\"data left\">{$lang['strcomment']}</th>\n";				echo "<td class=\"data1\">";				echo "<textarea rows=\"3\" cols=\"32\" name=\"dbcomment\">",					htmlspecialchars($comment), "</textarea></td></tr>\n";			}			echo "</table>\n";			echo "<input type=\"hidden\" name=\"action\" value=\"alter\" />\n";			echo $misc->form;			echo "<input type=\"hidden\" name=\"oldname\" value=\"",				htmlspecialchars($_REQUEST['alterdatabase']), "\" />\n";			echo "<input type=\"submit\" name=\"alter\" value=\"{$lang['stralter']}\" />\n";			echo "<input type=\"submit\" name=\"cancel\" value=\"{$lang['strcancel']}\" />\n";			echo "</form>\n";		}		else {			if (!isset($_POST['owner'])) $_POST['owner'] = '';			if (!isset($_POST['dbcomment'])) $_POST['dbcomment'] = '';			if ($data->alterDatabase($_POST['oldname'], $_POST['newname'], $_POST['owner'], $_POST['dbcomment']) == 0) {				$_reload_browser = true;				doDefault($lang['strdatabasealtered']);			}			else				doDefault($lang['strdatabasealteredbad']);		}	}	/**	 * Show confirmation of drop and perform actual drop	 */	function doDrop($confirm) {		global $data, $misc;		global $lang, $_reload_drop_database;		if (empty($_REQUEST['dropdatabase']) && empty($_REQUEST['ma'])) {			doDefault($lang['strspecifydatabasetodrop']);			exit();		}		if ($confirm) {            $misc->printTrail('database');            $misc->printTitle($lang['strdrop'], 'pg.database.drop');	        echo "<form action=\"all_db.php\" method=\"post\">\n";            //If multi drop            if (isset($_REQUEST['ma'])) {			    foreach($_REQUEST['ma'] as $v) {			        $a = unserialize(htmlspecialchars_decode($v, ENT_QUOTES));				    echo "<p>", sprintf($lang['strconfdropdatabase'], $misc->printVal($a['database'])), "</p>\n";				    printf('<input type="hidden" name="dropdatabase[]" value="%s" />', htmlspecialchars($a['database']));			    }			} else {		            echo "<p>", sprintf($lang['strconfdropdatabase'], $misc->printVal($_REQUEST['dropdatabase'])), "</p>\n";			        echo "<input type=\"hidden\" name=\"dropdatabase\" value=\"", htmlspecialchars($_REQUEST['dropdatabase']), "\" />\n";            }// END if multi drop			echo "<input type=\"hidden\" name=\"action\" value=\"drop\" />\n";        	echo $misc->form;			echo "<input type=\"submit\" name=\"drop\" value=\"{$lang['strdrop']}\" />\n";			echo "<input type=\"submit\" name=\"cancel\" value=\"{$lang['strcancel']}\" />\n";			echo "</form>\n";		} // END confirm		else {            //If multi drop            if (is_array($_REQUEST['dropdatabase'])) {                $msg = '';                foreach($_REQUEST['dropdatabase'] as $d) {					$status = $data->dropDatabase($d);					if ($status == 0)						$msg.= sprintf('%s: %s<br />', htmlentities($d), $lang['strdatabasedropped']);					else {						doDefault(sprintf('%s%s: %s<br />', $msg, htmlentities($d), $lang['strdatabasedroppedbad']));						return;					}				}// Everything went fine, back to Default page...                $_reload_drop_database = true;                doDefault($msg);            } else {			    $status = $data->dropDatabase($_POST['dropdatabase']);			    if ($status == 0) {				    $_reload_drop_database = true;				    doDefault($lang['strdatabasedropped']);			    }			    else				    doDefault($lang['strdatabasedroppedbad']);            }		}//END DROP    }// END FUNCTION	/**	 * Displays a screen where they can enter a new database	 */	function doCreate($msg = '') {		global $data, $misc;		global $lang;		$misc->printTrail('server');		$misc->printTitle($lang['strcreatedatabase'], 'pg.database.create');		$misc->printMsg($msg);		if (!isset($_POST['formName'])) $_POST['formName'] = '';		// Default encoding is that in language file		if (!isset($_POST['formEncoding'])) {			if (isset($lang['appdbencoding']))				$_POST['formEncoding'] = $lang['appdbencoding'];			else				$_POST['formEncoding'] = '';		}		if (!isset($_POST['formTemplate'])) $_POST['formTemplate'] = 'template1';		if (!isset($_POST['formSpc'])) $_POST['formSpc'] = '';		if (!isset($_POST['formComment'])) $_POST['formComment'] = '';		// Fetch a list of databases in the cluster		$templatedbs = $data->getDatabases(false);		// Fetch all tablespaces from the database		if ($data->hasTablespaces()) $tablespaces = $data->getTablespaces();		echo "<form action=\"all_db.php\" method=\"post\">\n";		echo "<table>\n";		echo "\t<tr>\n\t\t<th class=\"data left required\">{$lang['strname']}</th>\n";		echo "\t\t<td class=\"data1\"><input name=\"formName\" size=\"32\" maxlength=\"{$data->_maxNameLen}\" value=\"",			htmlspecialchars($_POST['formName']), "\" /></td>\n\t</tr>\n";		echo "\t<tr>\n\t\t<th class=\"data left required\">{$lang['strtemplatedb']}</th>\n";		echo "\t\t<td class=\"data1\">\n";		echo "\t\t\t<select name=\"formTemplate\">\n";		// Always offer template0 and template1 		echo "\t\t\t\t<option value=\"template0\"",			($_POST['formTemplate'] == 'template0') ? ' selected="selected"' : '', ">template0</option>\n";		echo "\t\t\t\t<option value=\"template1\"",			($_POST['formTemplate'] == 'template1') ? ' selected="selected"' : '', ">template1</option>\n";		while (!$templatedbs->EOF) {			$dbname = htmlspecialchars($templatedbs->fields['datname']);			if ($dbname != 'template1') { 				// filter out for $conf[show_system] users so we dont get duplicates 				echo "\t\t\t\t<option value=\"{$dbname}\"",					($dbname == $_POST['formTemplate']) ? ' selected="selected"' : '', ">{$dbname}</option>\n";			}			$templatedbs->moveNext();		}		echo "\t\t\t</select>\n";		echo "\t\t</td>\n\t</tr>\n";		// ENCODING		echo "\t<tr>\n\t\t<th class=\"data left required\">{$lang['strencoding']}</th>\n";		echo "\t\t<td class=\"data1\">\n";		echo "\t\t\t<select name=\"formEncoding\">\n";		echo "\t\t\t\t<option value=\"\"></option>\n";		while (list ($key) = each ($data->codemap)) {		    echo "\t\t\t\t<option value=\"", htmlspecialchars($key), "\"",				($key == $_POST['formEncoding']) ? ' selected="selected"' : '', ">",				$misc->printVal($key), "</option>\n";		}		echo "\t\t\t</select>\n";		echo "\t\t</td>\n\t</tr>\n";		if ($data->hasDatabaseCollation()) {			if (!isset($_POST['formCollate'])) $_POST['formCollate'] = '';			if (!isset($_POST['formCType'])) $_POST['formCType'] = '';			// LC_COLLATE			echo "\t<tr>\n\t\t<th class=\"data left\">{$lang['strcollation']}</th>\n";			echo "\t\t<td class=\"data1\">\n";			echo "\t\t\t<input name=\"formCollate\" value=\"", htmlspecialchars($_POST['formCollate']), "\" />\n";			echo "\t\t</td>\n\t</tr>\n";			// LC_CTYPE			echo "\t<tr>\n\t\t<th class=\"data left\">{$lang['strctype']}</th>\n";			echo "\t\t<td class=\"data1\">\n";			echo "\t\t\t<input name=\"formCType\" value=\"", htmlspecialchars($_POST['formCType']), "\" />\n";			echo "\t\t</td>\n\t</tr>\n";		}		// Tablespace (if there are any)		if ($data->hasTablespaces() && $tablespaces->recordCount() > 0) {			echo "\t<tr>\n\t\t<th class=\"data left\">{$lang['strtablespace']}</th>\n";			echo "\t\t<td class=\"data1\">\n\t\t\t<select name=\"formSpc\">\n";			// Always offer the default (empty) option			echo "\t\t\t\t<option value=\"\"",				($_POST['formSpc'] == '') ? ' selected="selected"' : '', "></option>\n";			// Display all other tablespaces			while (!$tablespaces->EOF) {				$spcname = htmlspecialchars($tablespaces->fields['spcname']);				echo "\t\t\t\t<option value=\"{$spcname}\"",					($spcname == $_POST['formSpc']) ? ' selected="selected"' : '', ">{$spcname}</option>\n";				$tablespaces->moveNext();			}			echo "\t\t\t</select>\n\t\t</td>\n\t</tr>\n";		}		// Comments (if available)		if ($data->hasSharedComments()) {			echo "\t<tr>\n\t\t<th class=\"data left\">{$lang['strcomment']}</th>\n";			echo "\t\t<td><textarea name=\"formComment\" rows=\"3\" cols=\"32\">",				htmlspecialchars($_POST['formComment']), "</textarea></td>\n\t</tr>\n";		}		echo "</table>\n";		echo "<p><input type=\"hidden\" name=\"action\" value=\"save_create\" />\n";		echo $misc->form;		echo "<input type=\"submit\" value=\"{$lang['strcreate']}\" />\n";		echo "<input type=\"submit\" name=\"cancel\" value=\"{$lang['strcancel']}\" /></p>\n";		echo "</form>\n";	}	/**	 * Actually creates the new view in the database	 */	function doSaveCreate() {		global $data, $lang, $_reload_browser;		// Default tablespace to null if it isn't set		if (!isset($_POST['formSpc'])) $_POST['formSpc'] = null;		// Default comment to blank if it isn't set		if (!isset($_POST['formComment'])) $_POST['formComment'] = null;		// Default collate to blank if it isn't set		if (!isset($_POST['formCollate'])) $_POST['formCollate'] = null;		// Default ctype to blank if it isn't set		if (!isset($_POST['formCType'])) $_POST['formCType'] = null;		// Check that they've given a name and a definition		if ($_POST['formName'] == '') doCreate($lang['strdatabaseneedsname']);		else {			$status = $data->createDatabase($_POST['formName'], $_POST['formEncoding'], $_POST['formSpc'],				$_POST['formComment'], $_POST['formTemplate'], $_POST['formCollate'], $_POST['formCType']);			if ($status == 0) {				$_reload_browser = true;				doDefault($lang['strdatabasecreated']);			}			else				doCreate($lang['strdatabasecreatedbad']);		}	}	/**	 * Displays options for cluster download	 */	function doExport($msg = '') {		global $data, $misc;		global $lang;		$misc->printTrail('server');		$misc->printTabs('server','export');		$misc->printMsg($msg);		echo "<form action=\"dbexport.php\" method=\"post\">\n";		echo "<table>\n";		echo "<tr><th class=\"data\">{$lang['strformat']}</th><th class=\"data\">{$lang['stroptions']}</th></tr>\n";		// Data only		echo "<tr><th class=\"data left\" rowspan=\"2\">";		echo "<input type=\"radio\" id=\"what1\" name=\"what\" value=\"dataonly\" checked=\"checked\" /><label for=\"what1\">{$lang['strdataonly']}</label></th>\n";		echo "<td>{$lang['strformat']}\n";		echo "<select name=\"d_format\">\n";		echo "<option value=\"copy\">COPY</option>\n";		echo "<option value=\"sql\">SQL</option>\n";		echo "</select>\n</td>\n</tr>\n";		echo "<tr><td><input type=\"checkbox\" id=\"d_oids\" name=\"d_oids\" /><label for=\"d_oids\">{$lang['stroids']}</label></td>\n</tr>\n";		// Structure only		echo "<tr><th class=\"data left\"><input type=\"radio\" id=\"what2\" name=\"what\" value=\"structureonly\" /><label for=\"what2\">{$lang['strstructureonly']}</label></th>\n";		echo "<td><input type=\"checkbox\" id=\"s_clean\" name=\"s_clean\" /><label for=\"s_clean\">{$lang['strdrop']}</label></td>\n</tr>\n";		// Structure and data		echo "<tr><th class=\"data left\" rowspan=\"3\">";		echo "<input type=\"radio\" id=\"what3\" name=\"what\" value=\"structureanddata\" /><label for=\"what3\">{$lang['strstructureanddata']}</label></th>\n";		echo "<td>{$lang['strformat']}\n";		echo "<select name=\"sd_format\">\n";		echo "<option value=\"copy\">COPY</option>\n";		echo "<option value=\"sql\">SQL</option>\n";		echo "</select>\n</td>\n</tr>\n";		echo "<tr><td><input type=\"checkbox\" id=\"sd_clean\" name=\"sd_clean\" /><label for=\"sd_clean\">{$lang['strdrop']}</label></td>\n</tr>\n";		echo "<tr><td><input type=\"checkbox\" id=\"sd_oids\" name=\"sd_oids\" /><label for=\"sd_oids\">{$lang['stroids']}</label></td>\n</tr>\n";		echo "</table>\n";		echo "<h3>{$lang['stroptions']}</h3>\n";		echo "<p><input type=\"radio\" id=\"output1\" name=\"output\" value=\"show\" checked=\"checked\" /><label for=\"output1\">{$lang['strshow']}</label>\n";		echo "<br/><input type=\"radio\" id=\"output2\" name=\"output\" value=\"download\" /><label for=\"output2\">{$lang['strdownload']}</label></p>\n";		echo "<p><input type=\"hidden\" name=\"action\" value=\"export\" />\n";		echo "<input type=\"hidden\" name=\"subject\" value=\"server\" />\n";		echo $misc->form;		echo "<input type=\"submit\" value=\"{$lang['strexport']}\" /></p>\n";		echo "</form>\n";	}	/**	 * Show default list of databases in the server	 */	function doDefault($msg = '') {		global $data, $conf, $misc;		global $lang;		$misc->printTrail('server');		$misc->printTabs('server','databases');		$misc->printMsg($msg);		$databases = $data->getDatabases();		$columns = array(			'database' => array(				'title' => $lang['strdatabase'],				'field' => field('datname'),				'url'   => "redirect.php?subject=database&amp;{$misc->href}&amp;",				'vars'  => array('database' => 'datname'),			),			'owner' => array(				'title' => $lang['strowner'],				'field' => field('datowner'),			),			'encoding' => array(				'title' => $lang['strencoding'],				'field' => field('datencoding'),			),			'lc_collate' => array(				'title' => $lang['strcollation'],				'field' => field('datcollate'),			),			'lc_ctype' => array(				'title' => $lang['strctype'],				'field' => field('datctype'),			),			'tablespace' => array(				'title' => $lang['strtablespace'],				'field' => field('tablespace'),			),			'dbsize' => array(				'title' => $lang['strsize'],				'field' => field('dbsize'),				'type' => 'prettysize',			),			'actions' => array(				'title' => $lang['stractions'],			),			'comment' => array(				'title' => $lang['strcomment'],				'field' => field('datcomment'),			),		);		$actions = array(			'multiactions' => array(				'keycols' => array('database' => 'datname'),				'url' => 'all_db.php',				'default' => null,			),			'drop' => array(				'title' => $lang['strdrop'],				'url'   => "all_db.php?action=confirm_drop&amp;subject=database&amp;{$misc->href}&amp;",				'vars'  => array('dropdatabase' => 'datname'),				'multiaction' => 'confirm_drop',			),			'privileges' => array(				'title' => $lang['strprivileges'],				'url'   => "privileges.php?subject=database&amp;{$misc->href}&amp;",				'vars'  => array('database' => 'datname'),			)		);		if ($data->hasAlterDatabase() ) {			$actions['alter'] = array(				'title' => $lang['stralter'],				'url'   => "all_db.php?action=confirm_alter&amp;subject=database&amp;{$misc->href}&amp;",				'vars'  => array('alterdatabase' => 'datname')			);		}		if (!$data->hasTablespaces()) unset($columns['tablespace']);		if (!$data->hasServerAdminFuncs()) unset($columns['dbsize']);		if (!$data->hasDatabaseCollation()) unset($columns['lc_collate'], $columns['lc_ctype']);		if (!isset($data->privlist['database'])) unset($actions['privileges']);		$misc->printTable($databases, $columns, $actions, $lang['strnodatabases']);		echo "<p><a class=\"navlink\" href=\"all_db.php?action=create&amp;{$misc->href}\">{$lang['strcreatedatabase']}</a></p>\n";	}	function doTree() {		global $misc, $data, $lang;		$databases = $data->getDatabases();		$reqvars = $misc->getRequestVars('database');		$attrs = array(			'text'   => field('datname'),			'icon'   => 'Database',			'toolTip'=> field('datcomment'),			'action' => url('redirect.php',							$reqvars,							array('database' => field('datname'))						),			'branch' => url('database.php',							$reqvars,							array(								'action' => 'tree',								'database' => field('datname')							)						),		);		$misc->printTreeXML($databases, $attrs);		exit;	}	if ($action == 'tree') doTree();	$misc->printHeader($lang['strdatabases']);	$misc->printBody();	switch ($action) {		case 'export':			doExport();			break;		case 'save_create':			if (isset($_POST['cancel'])) doDefault();			else doSaveCreate();			break;		case 'create':			doCreate();			break;		case 'drop':			if (isset($_REQUEST['drop'])) doDrop(false);			else doDefault();			break;		case 'confirm_drop':			doDrop(true);			break;		case 'alter':			if (isset($_POST['oldname']) && isset($_POST['newname']) && !isset($_POST['cancel']) ) doAlter(false);			else doDefault();			break;		case 'confirm_alter':			doAlter(true);			break;		default:			doDefault();			break;	}	$misc->printFooter();?>
<?php	/**	 * Manage languages in a database	 *	 * $Id: languages.php,v 1.13 2007/08/31 18:30:11 ioguix Exp $	 */	// Include application functions	include_once('./libraries/lib.inc.php');		$action = (isset($_REQUEST['action'])) ? $_REQUEST['action'] : '';	if (!isset($msg)) $msg = '';	/**	 * Show default list of languages in the database	 */	function doDefault($msg = '') {		global $data, $misc, $database;		global $lang;				$misc->printTrail('database');		$misc->printTabs('database','languages');		$misc->printMsg($msg);				$languages = $data->getLanguages();		$columns = array(			'language' => array(				'title' => $lang['strname'],				'field' => field('lanname'),			),			'trusted' => array(				'title' => $lang['strtrusted'],				'field' => field('lanpltrusted'),				'type'  => 'yesno',			),			'function' => array(				'title' => $lang['strfunction'],				'field' => field('lanplcallf'),			),		);		$actions = array();		$misc->printTable($languages, $columns, $actions, $lang['strnolanguages']);	}	/**	 * Generate XML for the browser tree.	 */	function doTree() {		global $misc, $data;				$languages = $data->getLanguages();				$attrs = array(			'text'   => field('lanname'),			'icon'   => 'Language'		);				$misc->printTreeXML($languages, $attrs);		exit;	}		if ($action == 'tree') doTree();		$misc->printHeader($lang['strlanguages']);	$misc->printBody();	switch ($action) {		default:			doDefault();			break;	}		$misc->printFooter();?>
<?php	/**	 * List tables in a database	 *	 * $Id: tblproperties.php,v 1.92 2008/01/19 13:46:15 ioguix Exp $	 */	// Include application functions	include_once('./libraries/lib.inc.php');	$action = (isset($_REQUEST['action'])) ? $_REQUEST['action'] : '';	/**	 * Function to save after altering a table	 */	function doSaveAlter() {		global $data, $lang, $_reload_browser, $misc;		// For databases that don't allow owner change		if (!isset($_POST['owner'])) $_POST['owner'] = '';		// Default tablespace to null if it isn't set		if (!isset($_POST['tablespace'])) $_POST['tablespace'] = null;		if (!isset($_POST['newschema'])) $_POST['newschema'] = null;		$status = $data->alterTable($_POST['table'], $_POST['name'], $_POST['owner'], $_POST['newschema'], $_POST['comment'], $_POST['tablespace']);		if ($status == 0) {			// If table has been renamed, need to change to the new name and			// reload the browser frame.			if ($_POST['table'] != $_POST['name']) {				// Jump them to the new table name				$_REQUEST['table'] = $_POST['name'];				// Force a browser reload				$_reload_browser = true;			}			// If schema has changed, need to change to the new schema and reload the browser			if (!empty($_POST['newschema']) && ($_POST['newschema'] != $data->_schema)) {				// Jump them to the new sequence schema				$misc->setCurrentSchema($_POST['newschema']);				$_reload_browser = true;			 }			doDefault($lang['strtablealtered']);		}		else			doAlter($lang['strtablealteredbad']);	}	/**	 * Function to allow altering of a table	 */	function doAlter($msg = '') {		global $data, $misc;		global $lang;		$misc->printTrail('table');		$misc->printTitle($lang['stralter'], 'pg.table.alter');		$misc->printMsg($msg);		// Fetch table info		$table = $data->getTable($_REQUEST['table']);		// Fetch all users		$users = $data->getUsers();		// Fetch all tablespaces from the database		if ($data->hasTablespaces()) $tablespaces = $data->getTablespaces(true);		if ($table->recordCount() > 0) {			if (!isset($_POST['name'])) $_POST['name'] = $table->fields['relname'];			if (!isset($_POST['owner'])) $_POST['owner'] = $table->fields['relowner'];			if (!isset($_POST['newschema'])) $_POST['newschema'] = $table->fields['nspname'];			if (!isset($_POST['comment'])) $_POST['comment'] = $table->fields['relcomment'];			if ($data->hasTablespaces() && !isset($_POST['tablespace'])) $_POST['tablespace'] = $table->fields['tablespace'];			echo "<form action=\"tblproperties.php\" method=\"post\">\n";			echo "<table>\n";			echo "<tr><th class=\"data left required\">{$lang['strname']}</th>\n";			echo "<td class=\"data1\">";			echo "<input name=\"name\" size=\"32\" maxlength=\"{$data->_maxNameLen}\" value=\"",				htmlspecialchars($_POST['name'], ENT_QUOTES), "\" /></td></tr>\n";			$server_info = $misc->getServerInfo();			if ($data->isSuperUser($server_info['username'])) {				echo "<tr><th class=\"data left required\">{$lang['strowner']}</th>\n";				echo "<td class=\"data1\"><select name=\"owner\">";				while (!$users->EOF) {					$uname = $users->fields['usename'];					echo "<option value=\"", htmlspecialchars($uname), "\"",						($uname == $_POST['owner']) ? ' selected="selected"' : '', ">", htmlspecialchars($uname), "</option>\n";					$users->moveNext();				}				echo "</select></td></tr>\n";			}			if ($data->hasAlterTableSchema()) {				$schemas = $data->getSchemas();				echo "<tr><th class=\"data left required\">{$lang['strschema']}</th>\n";				echo "<td class=\"data1\"><select name=\"newschema\">";				while (!$schemas->EOF) {					$schema = $schemas->fields['nspname'];					echo "<option value=\"", htmlspecialchars($schema), "\"",						($schema == $_POST['newschema']) ? ' selected="selected"' : '', ">", htmlspecialchars($schema), "</option>\n";					$schemas->moveNext();				}			    echo "</select></td></tr>\n";			}			// Tablespace (if there are any)			if ($data->hasTablespaces() && $tablespaces->recordCount() > 0) {				echo "\t<tr>\n\t\t<th class=\"data left\">{$lang['strtablespace']}</th>\n";				echo "\t\t<td class=\"data1\">\n\t\t\t<select name=\"tablespace\">\n";				// Always offer the default (empty) option				echo "\t\t\t\t<option value=\"\"",					($_POST['tablespace'] == '') ? ' selected="selected"' : '', "></option>\n";				// Display all other tablespaces				while (!$tablespaces->EOF) {					$spcname = htmlspecialchars($tablespaces->fields['spcname']);					echo "\t\t\t\t<option value=\"{$spcname}\"",						($spcname == $_POST['tablespace']) ? ' selected="selected"' : '', ">{$spcname}</option>\n";					$tablespaces->moveNext();				}				echo "\t\t\t</select>\n\t\t</td>\n\t</tr>\n";			}			echo "<tr><th class=\"data left\">{$lang['strcomment']}</th>\n";			echo "<td class=\"data1\">";			echo "<textarea rows=\"3\" cols=\"32\" name=\"comment\">",				htmlspecialchars($_POST['comment']), "</textarea></td></tr>\n";			echo "</table>\n";			echo "<p><input type=\"hidden\" name=\"action\" value=\"alter\" />\n";			echo "<input type=\"hidden\" name=\"table\" value=\"", htmlspecialchars($_REQUEST['table']), "\" />\n";			echo $misc->form;			echo "<input type=\"submit\" name=\"alter\" value=\"{$lang['stralter']}\" />\n";			echo "<input type=\"submit\" name=\"cancel\" value=\"{$lang['strcancel']}\" /></p>\n";			echo "</form>\n";		}		else echo "<p>{$lang['strnodata']}</p>\n";	}	function doExport($msg = '') {		global $data, $misc;		global $lang;		// Determine whether or not the table has an object ID		$hasID = $data->hasObjectID($_REQUEST['table']);		$misc->printTrail('table');		$misc->printTabs('table','export');		$misc->printMsg($msg);		echo "<form action=\"dataexport.php\" method=\"post\">\n";		echo "<table>\n";		echo "<tr><th class=\"data\">{$lang['strformat']}</th><th class=\"data\" colspan=\"2\">{$lang['stroptions']}</th></tr>\n";		// Data only		echo "<tr><th class=\"data left\" rowspan=\"", ($hasID) ? 2 : 1, "\">";		echo "<input type=\"radio\" id=\"what1\" name=\"what\" value=\"dataonly\" checked=\"checked\" /><label for=\"what1\">{$lang['strdataonly']}</label></th>\n";		echo "<td>{$lang['strformat']}</td>\n";		echo "<td><select name=\"d_format\">\n";		echo "<option value=\"copy\">COPY</option>\n";		echo "<option value=\"sql\">SQL</option>\n";		echo "<option value=\"csv\">CSV</option>\n";		echo "<option value=\"tab\">{$lang['strtabbed']}</option>\n";		echo "<option value=\"html\">XHTML</option>\n";		echo "<option value=\"xml\">XML</option>\n";		echo "</select>\n</td>\n</tr>\n";		if ($hasID) {			echo "<tr><td><label for=\"d_oids\">{$lang['stroids']}</td><td><input type=\"checkbox\" id=\"d_oids\" name=\"d_oids\" /></td>\n</tr>\n";		}		// Structure only		echo "<tr><th class=\"data left\"><input type=\"radio\" id=\"what2\" name=\"what\" value=\"structureonly\" /><label for=\"what2\">{$lang['strstructureonly']}</label></th>\n";		echo "<td><label for=\"s_clean\">{$lang['strdrop']}</label></td><td><input type=\"checkbox\" id=\"s_clean\" name=\"s_clean\" /></td>\n</tr>\n";		// Structure and data		echo "<tr><th class=\"data left\" rowspan=\"", ($hasID) ? 3 : 2, "\">";		echo "<input type=\"radio\" id=\"what3\" name=\"what\" value=\"structureanddata\" /><label for=\"what3\">{$lang['strstructureanddata']}</label></th>\n";		echo "<td>{$lang['strformat']}</td>\n";		echo "<td><select name=\"sd_format\">\n";		echo "<option value=\"copy\">COPY</option>\n";		echo "<option value=\"sql\">SQL</option>\n";		echo "</select>\n</td>\n</tr>\n";		echo "<tr><td><label for=\"sd_clean\">{$lang['strdrop']}</label></td><td><input type=\"checkbox\" id=\"sd_clean\" name=\"sd_clean\" /></td>\n</tr>\n";		if ($hasID) {			echo "<tr><td><label for=\"sd_oids\">{$lang['stroids']}</label></td><td><input type=\"checkbox\" id=\"sd_oids\" name=\"sd_oids\" /></td>\n</tr>\n";		}		echo "</table>\n";		echo "<h3>{$lang['stroptions']}</h3>\n";		echo "<p><input type=\"radio\" id=\"output1\" name=\"output\" value=\"show\" checked=\"checked\" /><label for=\"output1\">{$lang['strshow']}</label>\n";		echo "<br/><input type=\"radio\" id=\"output2\" name=\"output\" value=\"download\" /><label for=\"output2\">{$lang['strdownload']}</label></p>\n";		echo "<p><input type=\"hidden\" name=\"action\" value=\"export\" />\n";		echo $misc->form;		echo "<input type=\"hidden\" name=\"subject\" value=\"table\" />\n";		echo "<input type=\"hidden\" name=\"table\" value=\"", htmlspecialchars($_REQUEST['table']), "\" />\n";		echo "<input type=\"submit\" value=\"{$lang['strexport']}\" /></p>\n";		echo "</form>\n";	}	function doImport($msg = '') {		global $data, $misc;		global $lang;		$misc->printTrail('table');		$misc->printTabs('table','import');		$misc->printMsg($msg);		// Check that file uploads are enabled		if (ini_get('file_uploads')) {			// Don't show upload option if max size of uploads is zero			$max_size = $misc->inisizeToBytes(ini_get('upload_max_filesize'));			if (is_double($max_size) && $max_size > 0) {				echo "<form action=\"dataimport.php\" method=\"post\" enctype=\"multipart/form-data\">\n";				echo "<table>\n";				echo "\t<tr>\n\t\t<th class=\"data left required\">{$lang['strformat']}</th>\n";				echo "\t\t<td><select name=\"format\">\n";				echo "\t\t\t<option value=\"auto\">{$lang['strauto']}</option>\n";				echo "\t\t\t<option value=\"csv\">CSV</option>\n";				echo "\t\t\t<option value=\"tab\">{$lang['strtabbed']}</option>\n";				if (function_exists('xml_parser_create')) {					echo "\t\t\t<option value=\"xml\">XML</option>\n";				}				echo "\t\t</select></td>\n\t</tr>\n";				echo "\t<tr>\n\t\t<th class=\"data left required\">{$lang['strallowednulls']}</th>\n";				echo "\t\t<td><label><input type=\"checkbox\" name=\"allowednulls[0]\" value=\"\\N\" checked=\"checked\" />{$lang['strbackslashn']}</label><br />\n";				echo "\t\t<label><input type=\"checkbox\" name=\"allowednulls[1]\" value=\"NULL\" />NULL</label><br />\n";				echo "\t\t<label><input type=\"checkbox\" name=\"allowednulls[2]\" value=\"\" />{$lang['stremptystring'] }</label></td>\n\t</tr>\n";				echo "\t<tr>\n\t\t<th class=\"data left required\">{$lang['strfile']}</th>\n";				echo "\t\t<td><input type=\"hidden\" name=\"MAX_FILE_SIZE\" value=\"{$max_size}\" />";				echo "<input type=\"file\" name=\"source\" /></td>\n\t</tr>\n";				echo "</table>\n";				echo "<p><input type=\"hidden\" name=\"action\" value=\"import\" />\n";				echo $misc->form;				echo "<input type=\"hidden\" name=\"table\" value=\"", htmlspecialchars($_REQUEST['table']), "\" />\n";				echo "<input type=\"submit\" value=\"{$lang['strimport']}\" /></p>\n";				echo "</form>\n";			}		}		else echo "<p>{$lang['strnouploads']}</p>\n";	}	/**	 * Displays a screen where they can add a column	 */	function doAddColumn($msg = '') {		global $data, $misc, $_reload_browser;		global $lang;		if (!isset($_REQUEST['stage'])) $_REQUEST['stage'] = 1;		switch ($_REQUEST['stage']) {			case 1:				// Set variable defaults				if (!isset($_POST['field'])) $_POST['field'] = '';				if (!isset($_POST['type'])) $_POST['type'] = '';				if (!isset($_POST['array'])) $_POST['array'] = '';				if (!isset($_POST['length'])) $_POST['length'] = '';				if (!isset($_POST['default'])) $_POST['default'] = '';				if (!isset($_POST['comment'])) $_POST['comment'] = '';				// Fetch all available types				$types = $data->getTypes(true, false, true);				$types_for_js = array();				$misc->printTrail('table');				$misc->printTitle($lang['straddcolumn'], 'pg.column.add');				$misc->printMsg($msg);				echo "<script src=\"tables.js\" type=\"text/javascript\"></script>";				echo "<form action=\"tblproperties.php\" method=\"post\">\n";				// Output table header				echo "<table>\n";				echo "<tr><th class=\"data required\">{$lang['strname']}</th>\n<th colspan=\"2\" class=\"data required\">{$lang['strtype']}</th>\n";				echo "<th class=\"data\">{$lang['strlength']}</th>\n";				if ($data->hasCreateFieldWithConstraints())					echo "<th class=\"data\">{$lang['strnotnull']}</th>\n<th class=\"data\">{$lang['strdefault']}</th>\n";				echo "<th class=\"data\">{$lang['strcomment']}</th></tr>\n";				echo "<tr><td><input name=\"field\" size=\"16\" maxlength=\"{$data->_maxNameLen}\" value=\"",					htmlspecialchars($_POST['field']), "\" /></td>\n";				echo "<td><select name=\"type\" id=\"type\" onchange=\"checkLengths(document.getElementById('type').value,'');\">\n";				// Output any "magic" types.  This came in with the alter column type so we'll check that				if ($data->hasMagicTypes()) {					foreach ($data->extraTypes as $v) {						$types_for_js[] = strtolower($v);						echo "\t<option value=\"", htmlspecialchars($v), "\"",						($v == $_POST['type']) ? ' selected="selected"' : '', ">",							$misc->printVal($v), "</option>\n";					}				}				while (!$types->EOF) {					$typname = $types->fields['typname'];					$types_for_js[] = $typname;					echo "\t<option value=\"", htmlspecialchars($typname), "\"", ($typname == $_POST['type']) ? ' selected="selected"' : '', ">",						$misc->printVal($typname), "</option>\n";					$types->moveNext();				}				echo "</select></td>\n";				// Output array type selector				echo "<td><select name=\"array\">\n";				echo "\t<option value=\"\"", ($_POST['array'] == '') ? ' selected="selected"' : '', "></option>\n";				echo "\t<option value=\"[]\"", ($_POST['array'] == '[]') ? ' selected="selected"' : '', ">[ ]</option>\n";				echo "</select></td>\n";				$predefined_size_types = array_intersect($data->predefined_size_types, $types_for_js);				$escaped_predef_types = array(); // the JS escaped array elements				foreach($predefined_size_types as $value) {					$escaped_predef_types[] = "'{$value}'";				}				echo "<td><input name=\"length\" id=\"lengths\" size=\"8\" value=\"",					htmlspecialchars($_POST['length']), "\" /></td>\n";				// Support for adding column with not null and default				if ($data->hasCreateFieldWithConstraints()) {					echo "<td><input type=\"checkbox\" name=\"notnull\"",						(isset($_REQUEST['notnull'])) ? ' checked="checked"' : '', " /></td>\n";					echo "<td><input name=\"default\" size=\"20\" value=\"",						htmlspecialchars($_POST['default']), "\" /></td>\n";				}				echo "<td><input name=\"comment\" size=\"40\" value=\"",					htmlspecialchars($_POST['comment']), "\" /></td></tr>\n";				echo "</table>\n";				echo "<p><input type=\"hidden\" name=\"action\" value=\"add_column\" />\n";				echo "<input type=\"hidden\" name=\"stage\" value=\"2\" />\n";				echo $misc->form;				echo "<input type=\"hidden\" name=\"table\" value=\"", htmlspecialchars($_REQUEST['table']), "\" />\n";				if (!$data->hasCreateFieldWithConstraints()) {					echo "<input type=\"hidden\" name=\"default\" value=\"\" />\n";				}				echo "<input type=\"submit\" value=\"{$lang['stradd']}\" />\n";				echo "<input type=\"submit\" name=\"cancel\" value=\"{$lang['strcancel']}\" /></p>\n";				echo "</form>\n";				echo "<script type=\"text/javascript\">predefined_lengths = new Array(". implode(",",$escaped_predef_types) .");checkLengths(document.getElementById('type').value,'');</script>\n";				break;			case 2:				// Check inputs				if (trim($_POST['field']) == '') {					$_REQUEST['stage'] = 1;					doAddColumn($lang['strcolneedsname']);					return;				}				if (!isset($_POST['length'])) $_POST['length'] = '';				$status = $data->addColumn($_POST['table'], $_POST['field'],							   $_POST['type'], $_POST['array'] != '', $_POST['length'], isset($_POST['notnull']),							   $_POST['default'], $_POST['comment']);				if ($status == 0) {					$_reload_browser = true;					doDefault($lang['strcolumnadded']);				}				else {					$_REQUEST['stage'] = 1;					doAddColumn($lang['strcolumnaddedbad']);					return;				}				break;			default:				echo "<p>{$lang['strinvalidparam']}</p>\n";		}	}	/**	 * Show confirmation of drop column and perform actual drop	 */	function doDrop($confirm) {		global $data, $database, $misc, $_reload_browser;		global $lang;		if ($confirm) {			$misc->printTrail('column');			$misc->printTitle($lang['strdrop'], 'pg.column.drop');            echo "<p>", sprintf($lang['strconfdropcolumn'], $misc->printVal($_REQUEST['column']),                    $misc->printVal($_REQUEST['table'])), "</p>\n";			echo "<form action=\"tblproperties.php\" method=\"post\">\n";			echo "<input type=\"hidden\" name=\"action\" value=\"drop\" />\n";			echo "<input type=\"hidden\" name=\"table\" value=\"", htmlspecialchars($_REQUEST['table']), "\" />\n";			echo "<input type=\"hidden\" name=\"column\" value=\"", htmlspecialchars($_REQUEST['column']), "\" />\n";			echo $misc->form;			echo "<p><input type=\"checkbox\" id=\"cascade\" name=\"cascade\"> <label for=\"cascade\">{$lang['strcascade']}</label></p>\n";			echo "<input type=\"submit\" name=\"drop\" value=\"{$lang['strdrop']}\" />\n";			echo "<input type=\"submit\" name=\"cancel\" value=\"{$lang['strcancel']}\" />\n";			echo "</form>\n";		}		else {			$status = $data->dropColumn($_POST['table'], $_POST['column'], isset($_POST['cascade']));			if ($status == 0) {				$_reload_browser = true;				doDefault($lang['strcolumndropped']);			}			else				doDefault($lang['strcolumndroppedbad']);		}	}	function doTree() {		global $misc, $data;		$columns = $data->getTableAttributes($_REQUEST['table']);		$reqvars = $misc->getRequestVars('column');		$attrs = array (			'text'   => field('attname'),			'action' => url('colproperties.php',							$reqvars,							array(								'table'		=> $_REQUEST['table'],								'column'	=> field('attname')							)						),			'icon'   => 'Column',			'iconAction' => url('display.php',								$reqvars,								array(									'table'		=> $_REQUEST['table'],									'column'	=> field('attname'),									'query'		=> replace(														'SELECT "%column%", count(*) AS "count" FROM "%table%" GROUP BY "%column%" ORDER BY "%column%"',														array (															'%column%' => field('attname'),															'%table%' => $_REQUEST['table']														)													)								)							),			'toolTip'=> field('comment')		);		$misc->printTreeXML($columns, $attrs);		exit;	}	if ($action == 'tree') doTree();	/**	 * Show default list of columns in the table	 */	function doDefault($msg = '') {		global $data, $conf, $misc;		global $lang;		function attPre(&$rowdata, $actions) {			global $data;			$rowdata->fields['+type'] = $data->formatType($rowdata->fields['type'], $rowdata->fields['atttypmod']);			$attname = $rowdata->fields['attname'];			$table = $_REQUEST['table'];			$data->fieldClean($attname);			$data->fieldClean($table);			$actions['browse']['url'] .= 'query=' . urlencode("SELECT \"{$attname}\", count(*) AS \"count\"				FROM \"{$table}\" GROUP BY \"{$attname}\" ORDER BY \"{$attname}\"") . '&amp;';			return $actions;		}		$misc->printTrail('table');		$misc->printTabs('table','columns');		$misc->printMsg($msg);		// Get table		$tdata = $data->getTable($_REQUEST['table']);		// Get columns		$attrs = $data->getTableAttributes($_REQUEST['table']);		// Get constraints keys		$ck = $data->getConstraintsWithFields($_REQUEST['table']);		// Show comment if any		if ($tdata->fields['relcomment'] !== null)			echo '<p class="comment">', $misc->printVal($tdata->fields['relcomment']), "</p>\n";		$columns = array(			'column' => array(				'title' => $lang['strcolumn'],				'field' => field('attname'),				'url'   => "colproperties.php?subject=column&amp;{$misc->href}&amp;table=".urlencode($_REQUEST['table'])."&amp;",				'vars'  => array('column' => 'attname'),			),			'type' => array(				'title' => $lang['strtype'],				'field' => field('+type'),			),			'notnull' => array(				'title' => $lang['strnotnull'],				'field' => field('attnotnull'),				'type'  => 'bool',				'params'=> array('true' => 'NOT NULL', 'false' => ''),			),			'default' => array(				'title' => $lang['strdefault'],				'field' => field('adsrc'),			),			'keyprop' => array(				'title' => $lang['strconstraints'],				'field' => field('attname'),				'type'  => 'callback',				'params'=> array(					'function' => 'cstrRender',					'keys' => $ck->getArray()				)			),			'actions' => array(				'title' => $lang['stractions'],			),			'comment' => array(				'title' => $lang['strcomment'],				'field' => field('comment'),			),		);		function cstrRender($s, $p) {			global $misc, $data;			$str ='';			foreach ($p['keys'] as $k => $c) {				if (is_null($p['keys'][$k]['consrc'])) {					$atts = $data->getAttributeNames($_REQUEST['table'], explode(' ', $p['keys'][$k]['indkey']));					$c['consrc'] = ($c['contype'] == 'u' ? "UNIQUE (" : "PRIMARY KEY (") . join(',', $atts) . ')';				}				if ($c['p_field'] == $s)					switch ($c['contype']) {						case 'p':							$str .= '<a href="constraints.php?'. $misc->href ."&amp;table=". urlencode($c['p_table']) ."&amp;schema=". urlencode($c['p_schema']) ."\"><img src=\"".								$misc->icon('PrimaryKey') .'" alt="[pk]" title="'. htmlentities($c['consrc']) .'" /></a>';						break;						case 'f':							$str .= '<a href="tblproperties.php?'. $misc->href ."&amp;table=". urlencode($c['f_table']) ."&amp;schema=". urlencode($c['f_schema']) ."\"><img src=\"".								$misc->icon('ForeignKey') .'" alt="[fk]" title="'. htmlentities($c['consrc']) .'" /></a>';						break;						case 'u':							$str .= '<a href="constraints.php?'. $misc->href ."&amp;table=". urlencode($c['p_table']) ."&amp;schema=". urlencode($c['p_schema']) ."\"><img src=\"".								$misc->icon('UniqueConstraint') .'" alt="[uniq]" title="'. htmlentities($c['consrc']) .'" /></a>';						break;						case 'c':							$str .= '<a href="constraints.php?'. $misc->href ."&amp;table=". urlencode($c['p_table']) ."&amp;schema=". urlencode($c['p_schema']) ."\"><img src=\"".								$misc->icon('CheckConstraint') .'" alt="[check]" title="'. htmlentities($c['consrc']) .'" /></a>';					}			}			return $str;		}		$return_url = urlencode("tblproperties.php?{$misc->href}&amp;table=". urlencode($_REQUEST['table']));		$actions = array(			'browse' => array(				'title' => $lang['strbrowse'],				'url' => "display.php?{$misc->href}&amp;subject=column&amp;return_url={$return_url}&amp;table=".urlencode($_REQUEST['table'])."&amp;return_desc=" . urlencode($lang['strback']) . '&amp;',				'vars' => array('column' => 'attname'),			),			'alter' => array(				'title' => $lang['stralter'],				'url'   => "colproperties.php?action=properties&amp;{$misc->href}&amp;table=".urlencode($_REQUEST['table'])."&amp;",				'vars'  => array('column' => 'attname'),			),			'privileges' => array(				'title' => $lang['strprivileges'],				'url'   => "privileges.php?subject=column&amp;{$misc->href}&amp;table=".urlencode($_REQUEST['table'])."&amp;",				'vars'  => array('column' => 'attname'),			),			'drop' => array(				'title' => $lang['strdrop'],				'url'   => "tblproperties.php?action=confirm_drop&amp;{$misc->href}&amp;table=".urlencode($_REQUEST['table'])."&amp;",				'vars'  => array('column' => 'attname'),			),		);		$misc->printTable($attrs, $columns, $actions, null, 'attPre');		echo "<ul class=\"navlink\">\n";		echo "\t<li><a href=\"display.php?{$misc->href}&amp;table=", urlencode($_REQUEST['table']), "&amp;subject=table&amp;return_url={$return_url}&amp;return_desc=",			urlencode($lang['strback']), "\">{$lang['strbrowse']}</a></li>\n";		echo "\t<li><a href=\"tables.php?action=confselectrows&amp;{$misc->href}&amp;table=", urlencode($_REQUEST['table']),"\">{$lang['strselect']}</a></li>\n";		echo "\t<li><a href=\"tables.php?action=confinsertrow&amp;{$misc->href}&amp;table=", urlencode($_REQUEST['table']),"\">{$lang['strinsert']}</a></li>\n";		echo "\t<li><a href=\"tables.php?action=confirm_empty&amp;{$misc->href}&amp;table=", urlencode($_REQUEST['table']),"\">{$lang['strempty']}</a></li>\n";		echo "\t<li><a href=\"tables.php?action=confirm_drop&amp;{$misc->href}&amp;table=", urlencode($_REQUEST['table']),"\">{$lang['strdrop']}</a></li>\n";		echo "\t<li><a href=\"tblproperties.php?action=add_column&amp;{$misc->href}&amp;table=", urlencode($_REQUEST['table']),"\">{$lang['straddcolumn']}</a></li>\n";		echo "\t<li><a href=\"tblproperties.php?action=confirm_alter&amp;{$misc->href}&amp;table=", urlencode($_REQUEST['table']),"\">{$lang['stralter']}</a></li>\n";		echo "</ul>\n";	}	$misc->printHeader($lang['strtables'] . ' - ' . $_REQUEST['table']);	$misc->printBody();	switch ($action) {		case 'alter':			if (isset($_POST['alter'])) doSaveAlter();			else doDefault();			break;		case 'confirm_alter':			doAlter();			break;		case 'import':			doImport();			break;		case 'export':			doExport();			break;		case 'add_column':			if (isset($_POST['cancel'])) doDefault();			else doAddColumn();			break;		case 'properties':			if (isset($_POST['cancel'])) doDefault();			else doProperties();			break;		case 'drop':			if (isset($_POST['drop'])) doDrop(false);			else doDefault();			break;		case 'confirm_drop':			doDrop(true);			break;		default:			doDefault();			break;	}	$misc->printFooter();?>
<?php	/**	 * Manage fulltext configurations, dictionaries and mappings	 *	 * $Id: fulltext.php,v 1.6 2008/03/17 21:35:48 ioguix Exp $	 */	// Include application functions	include_once('./libraries/lib.inc.php');	$action = (isset($_REQUEST['action'])) ? $_REQUEST['action'] : '';	if (!isset($msg)) $msg = '';	function doDefault($msg = '') {		global $data, $misc;		global $lang;		$misc->printTrail('schema');		$misc->printTabs('schema','fulltext');		$misc->printTabs('fulltext','ftsconfigs');		$misc->printMsg($msg);		$cfgs = $data->getFtsConfigurations(false);		$columns = array(			'configuration' => array(				'title' => $lang['strftsconfig'],				'field' => field('name'),				'url'   => "fulltext.php?action=viewconfig&amp;{$misc->href}&amp;",				'vars'	=> array('ftscfg' => 'name'),			),			'schema' => array(				'title' => $lang['strschema'],				'field' => field('schema'),			),			'actions' => array(				'title' => $lang['stractions'],			),			'comment' => array(				'title' => $lang['strcomment'],				'field' => field('comment'),			),		);		$actions = array(			'drop' => array(				'title' => $lang['strdrop'],				'url'   => "fulltext.php?action=dropconfig&amp;{$misc->href}&amp;",				'vars'  => array('ftscfg' => 'name'),			),			'alter' => array(				'title' => $lang['stralter'],				'url'   => "fulltext.php?action=alterconfig&amp;{$misc->href}&amp;",				'vars'  => array('ftscfg' => 'name'),			),		);		$misc->printTable($cfgs, $columns, $actions, $lang['strftsnoconfigs']);		echo "<ul class=\"navlink\">\n";		echo "\t<li><a href=\"fulltext.php?action=createconfig&amp;{$misc->href}\">{$lang['strftscreateconfig']}</a></li>\n";		echo "</ul>\n";	}	function doDropConfig($confirm) {		global $data, $data, $misc;		global $lang, $_reload_browser;		if ($confirm) {			$misc->printTrail('ftscfg');			$misc->printTitle($lang['strdrop'], 'pg.ftscfg.drop');			echo "<p>", sprintf($lang['strconfdropftsconfig'], $misc->printVal($_REQUEST['ftscfg'])), "</p>\n";			echo "<form action=\"fulltext.php\" method=\"post\">\n";			echo "<p><input type=\"checkbox\" id=\"cascade\" name=\"cascade\" /> <label for=\"cascade\">{$lang['strcascade']}</label></p>\n";			echo "<p><input type=\"hidden\" name=\"action\" value=\"dropconfig\" />\n";			echo "<input type=\"hidden\" name=\"database\" value=\"", htmlspecialchars($_REQUEST['database']), "\" />\n";			echo "<input type=\"hidden\" name=\"ftscfg\" value=\"", htmlspecialchars($_REQUEST['ftscfg']), "\" />\n";			echo $misc->form;			echo "<input type=\"submit\" name=\"drop\" value=\"{$lang['strdrop']}\" />\n";			echo "<input type=\"submit\" name=\"cancel\" value=\"{$lang['strcancel']}\" /></p>\n";			echo "</form>\n";		}		else {			$status = $data->dropFtsConfiguration($_POST['ftscfg'], isset($_POST['cascade']));			if ($status == 0) {				$_reload_browser = true;				doDefault($lang['strftsconfigdropped']);			}			else				doDefault($lang['strftsconfigdroppedbad']);		}	}	function doDropDict($confirm) {		global $data, $data, $misc;		global $lang, $_reload_browser;		if ($confirm) {			$misc->printTrail('ftscfg'); // TODO: change to smth related to dictionary			$misc->printTitle($lang['strdrop'], 'pg.ftsdict.drop');			echo "<p>", sprintf($lang['strconfdropftsdict'], $misc->printVal($_REQUEST['ftsdict'])), "</p>\n";			echo "<form action=\"fulltext.php\" method=\"post\">\n";			echo "<p><input type=\"checkbox\" id=\"cascade\" name=\"cascade\" /> <label for=\"cascade\">{$lang['strcascade']}</label></p>\n";			echo "<p><input type=\"hidden\" name=\"action\" value=\"dropdict\" />\n";			echo "<input type=\"hidden\" name=\"database\" value=\"", htmlspecialchars($_REQUEST['database']), "\" />\n";			echo "<input type=\"hidden\" name=\"ftsdict\" value=\"", htmlspecialchars($_REQUEST['ftsdict']), "\" />\n";			//echo "<input type=\"hidden\" name=\"ftscfg\" value=\"", htmlspecialchars($_REQUEST['ftscfg']), "\" />\n";			echo "<input type=\"hidden\" name=\"prev_action\" value=\"viewdicts\" /></p>\n";			echo $misc->form;			echo "<input type=\"submit\" name=\"drop\" value=\"{$lang['strdrop']}\" />\n";			echo "<input type=\"submit\" name=\"cancel\" value=\"{$lang['strcancel']}\" /></p>\n";			echo "</form>\n";		}		else {			$status = $data->dropFtsDictionary($_POST['ftsdict'], isset($_POST['cascade']));			if ($status == 0) {				$_reload_browser = true;				doViewDicts($lang['strftsdictdropped']);			}			else				doViewDicts($lang['strftsdictdroppedbad']);		}	}	/**	 * Displays a screen where one can enter a new FTS configuration	 */	function doCreateConfig($msg = '') {		global $data, $misc;		global $lang;		include_once('./classes/Gui.php');		$server_info = $misc->getServerInfo();		if (!isset($_POST['formName'])) $_POST['formName'] = '';		if (!isset($_POST['formParser'])) $_POST['formParser'] = '';		if (!isset($_POST['formTemplate'])) $_POST['formTemplate'] = '';		if (!isset($_POST['formWithMap'])) $_POST['formWithMap'] = '';		if (!isset($_POST['formComment'])) $_POST['formComment'] = '';		// Fetch all FTS configurations from the database		$ftscfgs = $data->getFtsConfigurations();		// Fetch all FTS parsers from the database		$ftsparsers = $data->getFtsParsers();		$misc->printTrail('schema');		$misc->printTitle($lang['strftscreateconfig'], 'pg.ftscfg.create');		$misc->printMsg($msg);		echo "<form action=\"fulltext.php\" method=\"post\">\n";		echo "<table>\n";		/* conf name */		echo "\t<tr>\n\t\t<th class=\"data left required\">{$lang['strname']}</th>\n";		echo "\t\t<td class=\"data1\"><input name=\"formName\" size=\"32\" maxlength=\"{$data->_maxNameLen}\" value=\"",			htmlspecialchars($_POST['formName']), "\" /></td>\n\t</tr>\n";		// Template		echo "\t<tr>\n\t\t<th class=\"data left\">{$lang['strftstemplate']}</th>\n";		echo "\t\t<td class=\"data1\">";		$tpls = array();		$tplsel = '';		while (!$ftscfgs->EOF) {			$data->fieldClean($ftscfgs->fields['schema']);			$data->fieldClean($ftscfgs->fields['name']);			$tplname = $ftscfgs->fields['schema'] .'.'. $ftscfgs->fields['name'];			$tpls[$tplname] = serialize(array(				'name' => $ftscfgs->fields['name'],				'schema' => $ftscfgs->fields['schema']			));			if ($_POST['formTemplate'] == $tpls[$tplname]) {				$tplsel = htmlspecialchars($tpls[$tplname]);			}			$ftscfgs->moveNext();		}		echo GUI::printCombo($tpls, 'formTemplate', true, $tplsel, false);		echo "\n\t\t</td>\n\t</tr>\n";		// Parser		echo "\t<tr>\n\t\t<th class=\"data left\">{$lang['strftsparser']}</th>\n";		echo "\t\t<td class=\"data1\">\n";		$ftsparsers_ = array();		$ftsparsel = '';		while (!$ftsparsers->EOF) {			$data->fieldClean($ftsparsers->fields['schema']);			$data->fieldClean($ftsparsers->fields['name']);			$parsername = $ftsparsers->fields['schema'] .'.'. $ftsparsers->fields['name'];						$ftsparsers_[$parsername] = serialize(array(				'parser' => $ftsparsers->fields['name'],				'schema' => $ftsparsers->fields['schema']			));			if ($_POST['formParser'] == $ftsparsers_[$parsername]) {				$ftsparsel = htmlspecialchars($ftsparsers_[$parsername]);			}			$ftsparsers->moveNext();		}		echo GUI::printCombo($ftsparsers_, 'formParser', true, $ftsparsel, false);		echo "\n\t\t</td>\n\t</tr>\n";		// Comment		echo "\t<tr>\n\t\t<th class=\"data left\">{$lang['strcomment']}</th>\n";		echo "\t\t<td class=\"data1\"><textarea name=\"formComment\" rows=\"3\" cols=\"32\">",			htmlspecialchars($_POST['formComment']), "</textarea></td>\n\t</tr>\n";		echo "</table>\n";		echo "<p>\n";		echo "<input type=\"hidden\" name=\"action\" value=\"createconfig\" />\n";		echo "<input type=\"hidden\" name=\"database\" value=\"", htmlspecialchars($_REQUEST['database']), "\" />\n";		echo $misc->form;		echo "<input type=\"submit\" name=\"create\" value=\"{$lang['strcreate']}\" />\n";		echo "<input type=\"submit\" name=\"cancel\" value=\"{$lang['strcancel']}\" />\n";		echo "</p>\n";		echo "</form>\n";	}	/**	 * Actually creates the new FTS configuration in the database	 */	function doSaveCreateConfig() {		global $data, $lang, $_reload_browser;		$err = '';		// Check that they've given a name		if ($_POST['formName'] == '') $err .= "{$lang['strftsconfigneedsname']}<br />";				if (($_POST['formParser'] != '') && ($_POST['formTemplate'] != ''))  $err .= "{$lang['strftscantparsercopy']}<br />";		if ($err != '') return doCreateConfig($err);		if ($_POST['formParser'] != '') $formParser = unserialize($_POST['formParser']);		else $formParser = '';		if ($_POST['formTemplate'] != '') $formTemplate = unserialize($_POST['formTemplate']);		else $formTemplate = '';		$status = $data->createFtsConfiguration($_POST['formName'], $formParser, $formTemplate, $_POST['formComment']);		if ($status == 0) {			$_reload_browser = true;			doDefault($lang['strftsconfigcreated']);		}		else			doCreateConfig($lang['strftsconfigcreatedbad']);	}	/**	 * Display a form to permit editing FTS configuration properies.	 */	function doAlterConfig($msg = '') {		global $data, $misc, $lang;		$misc->printTrail('ftscfg');		$misc->printTitle($lang['stralter'], 'pg.ftscfg.alter');		$misc->printMsg($msg);		$ftscfg = $data->getFtsConfigurationByName($_REQUEST['ftscfg']);		if ($ftscfg->recordCount() > 0) {			if (!isset($_POST['formComment'])) $_POST['formComment'] = $ftscfg->fields['comment'];			if (!isset($_POST['ftscfg'])) $_POST['ftscfg'] = $_REQUEST['ftscfg'];			if (!isset($_POST['formName'])) $_POST['formName'] = $_REQUEST['ftscfg'];			if (!isset($_POST['formParser'])) $_POST['formParser'] = '';			// Fetch all FTS parsers from the database			$ftsparsers = $data->getFtsParsers();			echo "<form action=\"fulltext.php\" method=\"post\">\n";			echo "<table>\n";			echo "\t<tr>\n";			echo "\t\t<th class=\"data left required\">{$lang['strname']}</th>\n";			echo "\t\t<td class=\"data1\">";			echo "\t\t\t<input name=\"formName\" size=\"32\" maxlength=\"{$data->_maxNameLen}\" value=\"",				htmlspecialchars($_POST['formName']), "\" />\n";			echo "\t\t</td>\n";			echo "\t</tr>\n";			// Comment			echo "\t<tr>\n";			echo "\t\t<th class=\"data\">{$lang['strcomment']}</th>\n";			echo "\t\t<td class=\"data1\"><textarea cols=\"32\" rows=\"3\"name=\"formComment\">", htmlspecialchars($_POST['formComment']), "</textarea></td>\n";			echo "\t</tr>\n";			echo "</table>\n";			echo "<p><input type=\"hidden\" name=\"action\" value=\"alterconfig\" />\n";			echo "<input type=\"hidden\" name=\"ftscfg\" value=\"", htmlspecialchars($_POST['ftscfg']), "\" />\n";			echo $misc->form;			echo "<input type=\"submit\" name=\"alter\" value=\"{$lang['stralter']}\" />\n";			echo "<input type=\"submit\" name=\"cancel\" value=\"{$lang['strcancel']}\" /></p>\n";			echo "</form>\n";		} else {			echo "<p>{$lang['strnodata']}</p>\n";		}	}	/**	 * Save the form submission containing changes to a FTS configuration	 */	function doSaveAlterConfig() {		global $data, $misc, $lang;		$status = $data->updateFtsConfiguration($_POST['ftscfg'], $_POST['formComment'], $_POST['formName']);		if ($status == 0)			doDefault($lang['strftsconfigaltered']);		else			doAlterConfig($lang['strftsconfigalteredbad']);	}	/**	 * View list of FTS parsers	 */	function doViewParsers($msg = '') {		global $data, $misc;		global $lang;		$misc->printTrail('schema');		$misc->printTabs('schema','fulltext');		$misc->printTabs('fulltext','ftsparsers');		$misc->printMsg($msg);		$parsers = $data->getFtsParsers(false);		$columns = array(			'schema' => array(				'title' => $lang['strschema'],				'field' => field('schema'),			),			'name' => array(				'title' => $lang['strname'],				'field' => field('name'),			),			'comment' => array(				'title' => $lang['strcomment'],				'field' => field('comment'),			),		);		$actions = array();		$misc->printTable($parsers, $columns, $actions, $lang['strftsnoparsers']);		//TODO: create parser		//echo "<ul class=\"navlink\">\n";		//echo "\t<li><a href=\"#\">{$lang['strftscreateparser']}</a></li>\n";		//echo "</ul>\n";	}	/**	 * View list of FTS dictionaries	 */	function doViewDicts($msg = '') {		global $data, $misc;		global $lang;		$misc->printTrail('schema');		$misc->printTabs('schema','fulltext');		$misc->printTabs('fulltext','ftsdicts');		$misc->printMsg($msg);		$dicts = $data->getFtsDictionaries(false);		$columns = array(			'schema' => array(				'title' => $lang['strschema'],				'field' => field('schema'),			),			'name' => array(				'title' => $lang['strname'],				'field' => field('name'),			),			'actions' => array(				'title' => $lang['stractions'],			),			'comment' => array(				'title' => $lang['strcomment'],				'field' => field('comment'),			),		);		$actions = array(			'drop' => array(				'title' => $lang['strdrop'],				'url'   => "fulltext.php?action=dropdict&amp;{$misc->href}&amp;",				'vars'  => array('ftsdict' => 'name'),			),			'alter' => array(				'title' => $lang['stralter'],				'url'   => "fulltext.php?action=alterdict&amp;{$misc->href}&amp;",				'vars'  => array('ftsdict' => 'name'),			),		);		$misc->printTable($dicts, $columns, $actions, $lang['strftsnodicts']);		echo "<ul class=\"navlink\">\n";		echo "\t<li><a href=\"fulltext.php?action=createdict&amp;{$misc->href}&amp;\">{$lang['strftscreatedict']}</a></li>\n";		echo "</ul>\n";	}	/**	 * View details of FTS configuration given	 */	function doViewConfig($ftscfg, $msg = '') {		global $data, $misc;		global $lang;		$misc->printTrail('ftscfg');		$misc->printTabs('schema','fulltext');		$misc->printTabs('fulltext','ftsconfigs');		$misc->printMsg($msg);		echo "<h3>{$lang['strftsconfigmap']}</h3>\n";		$map = $data->getFtsConfigurationMap($ftscfg);		$columns = array(			'name' => array(				'title' => $lang['strftsmapping'],				'field' => field('name'),			),			'dictionaries' => array(				'title' => $lang['strftsdicts'],				'field' => field('dictionaries'),			),			'actions' => array(				'title' => $lang['stractions'],			),			'comment' => array(				'title' => $lang['strcomment'],				'field' => field('description'),			),		);		$actions = array(			'drop' => array(				'title' => $lang['strdrop'],				'url'   => "fulltext.php?action=dropmapping&amp;{$misc->href}&amp;",				'vars'  => array('mapping' => 'name', 'ftscfg' => 'cfgname'),				'multiaction' => 'dropmapping',			),			'alter' => array(				'title' => $lang['stralter'],				'url'   => "fulltext.php?action=altermapping&amp;{$misc->href}&amp;",				'vars'  => array('mapping' => 'name', 'ftscfg' => 'cfgname'),			),			'multiactions' => array(				'keycols' => array('mapping' => 'name'),				'url' => 'fulltext.php',				'default' => null,				'vars'  => array('ftscfg' => $ftscfg),			),		);		$misc->printTable($map, $columns, $actions, $lang['strftsemptymap']);		echo "<ul class=\"navlink\">\n";		echo "\t<li><a href=\"fulltext.php?action=addmapping&amp;{$misc->href}&ftscfg={$ftscfg}\">{$lang['strftsaddmapping']}</a></li>\n";		echo "</ul>\n";	}	/**	 * Displays a screen where one can enter a details of a new FTS dictionary	 */	function doCreateDict($msg = '') {		global $data, $misc;		global $lang;		include_once('./classes/Gui.php');		$server_info = $misc->getServerInfo();		if (!isset($_POST['formName'])) $_POST['formName'] = '';		if(!isset($_POST['formIsTemplate'])) $_POST['formIsTemplate'] = false;		if (!isset($_POST['formTemplate'])) $_POST['formTemplate'] = '';		if (!isset($_POST['formLexize'])) $_POST['formLexize'] = '';		if (!isset($_POST['formInit'])) $_POST['formInit'] = '';		if (!isset($_POST['formOption'])) $_POST['formOption'] = '';		if (!isset($_POST['formComment'])) $_POST['formComment'] = '';		// Fetch all FTS dictionaries from the database		$ftstpls = $data->getFtsDictionaryTemplates();		$misc->printTrail('schema');		// TODO: create doc links		$misc->printTitle($lang['strftscreatedict'], 'pg.ftsdict.create');		$misc->printMsg($msg);		echo "<form action=\"fulltext.php\" method=\"post\">\n";		echo "<table>\n";		echo "\t<tr>\n\t\t<th class=\"data left required\">{$lang['strname']}</th>\n";		echo "\t\t<td class=\"data1\"><input name=\"formName\" size=\"32\" maxlength=\"{$data->_maxNameLen}\" value=\"",			htmlspecialchars($_POST['formName']), "\" />&nbsp;",			"<input type=\"checkbox\" name=\"formIsTemplate\" id=\"formIsTemplate\"", $_POST['formIsTemplate'] ? ' checked="checked" ' : '', " />\n",			"<label for=\"formIsTemplate\">{$lang['strftscreatedicttemplate']}</label></td>\n\t</tr>\n";		// Template		echo "\t<tr>\n\t\t<th class=\"data left\">{$lang['strftstemplate']}</th>\n";		echo "\t\t<td class=\"data1\">";		$tpls = array();		$tplsel = '';		while (!$ftstpls->EOF) {			$data->fieldClean($ftstpls->fields['schema']);			$data->fieldClean($ftstpls->fields['name']);			$tplname = $ftstpls->fields['schema'] .'.'. $ftstpls->fields['name'];			$tpls[$tplname] = serialize(array(				'name' => $ftstpls->fields['name'],				'schema' => $ftstpls->fields['schema']			));			if ($_POST['formTemplate'] == $tpls[$tplname]) {				$tplsel = htmlspecialchars($tpls[$tplname]);			}			$ftstpls->moveNext();		}		echo GUI::printCombo($tpls, 'formTemplate', true, $tplsel, false);		echo "\n\t\t</td>\n\t</tr>\n";		// TODO: what about maxlengths?		// Lexize		echo "\t<tr>\n\t\t<th class=\"data left\">{$lang['strftslexize']}</th>\n";		echo "\t\t<td class=\"data1\"><input name=\"formLexize\" size=\"32\" maxlength=\"1000\" value=\"",			htmlspecialchars($_POST['formLexize']), "\" ", isset($_POST['formIsTemplate']) ? '' : ' disabled="disabled" ',			"/></td>\n\t</tr>\n";		// Init		echo "\t<tr>\n\t\t<th class=\"data left\">{$lang['strftsinit']}</th>\n";		echo "\t\t<td class=\"data1\"><input name=\"formInit\" size=\"32\" maxlength=\"1000\" value=\"",			htmlspecialchars($_POST['formInit']), "\"", @$_POST['formIsTemplate'] ? '' : ' disabled="disabled" ',			"/></td>\n\t</tr>\n";		// Option		echo "\t<tr>\n\t\t<th class=\"data left\">{$lang['strftsoptionsvalues']}</th>\n";		echo "\t\t<td class=\"data1\"><input name=\"formOption\" size=\"32\" maxlength=\"1000\" value=\"",			htmlspecialchars($_POST['formOption']), "\" /></td>\n\t</tr>\n";		// Comment		echo "\t<tr>\n\t\t<th class=\"data left\">{$lang['strcomment']}</th>\n";		echo "\t\t<td class=\"data1\"><textarea name=\"formComment\" rows=\"3\" cols=\"32\">",			htmlspecialchars($_POST['formComment']), "</textarea></td>\n\t</tr>\n";		echo "</table>\n";		echo "<p>\n";		echo "<input type=\"hidden\" name=\"action\" value=\"createdict\" />\n";		echo "<input type=\"hidden\" name=\"database\" value=\"", htmlspecialchars($_REQUEST['database']), "\" />\n";		echo $misc->form;		echo "<input type=\"submit\" name=\"create\" value=\"{$lang['strcreate']}\" />\n";		echo "<input type=\"submit\" name=\"cancel\" value=\"{$lang['strcancel']}\" />\n";		echo "</p>\n";		echo "</form>\n",			"<script type=\"text/javascript\">								function templateOpts() {					isTpl = document.getElementsByName('formIsTemplate')[0].checked;					document.getElementsByName('formTemplate')[0].disabled = isTpl;					document.getElementsByName('formOption')[0].disabled = isTpl;					document.getElementsByName('formLexize')[0].disabled = !isTpl;					document.getElementsByName('formInit')[0].disabled = !isTpl;				}								document.getElementsByName('formIsTemplate')[0].onchange = templateOpts;				templateOpts();			</script>\n";	}	/**	 * Actually creates the new FTS dictionary in the database	 */	function doSaveCreateDict() {		global $data, $lang, $_reload_browser;		// Check that they've given a name		if ($_POST['formName'] == '') doCreateDict($lang['strftsdictneedsname']);		else {			if(!isset($_POST['formIsTemplate'])) $_POST['formIsTemplate'] = false;			if(isset($_POST['formTemplate']))				$formTemplate = unserialize($_POST['formTemplate']);			else				$formTemplate = '';			if(!isset($_POST['formLexize'])) $_POST['formLexize'] = '';			if(!isset($_POST['formInit'])) $_POST['formInit'] = '';			if(!isset($_POST['formOption'])) $_POST['formOption'] = '';						$status = $data->createFtsDictionary($_POST['formName'], $_POST['formIsTemplate'],				$formTemplate, $_POST['formLexize'],				$_POST['formInit'], $_POST['formOption'], $_POST['formComment']			);						if ($status == 0) {				$_reload_browser = true;				doViewDicts($lang['strftsdictcreated']);			}			else				doCreateDict($lang['strftsdictcreatedbad']);		}	}	/**	 * Display a form to permit editing FTS dictionary properies.	 */	function doAlterDict($msg = '') {		global $data, $misc, $lang;		$misc->printTrail('ftscfg'); // TODO: change to smth related to dictionary		$misc->printTitle($lang['stralter'], 'pg.ftsdict.alter');		$misc->printMsg($msg);		$ftsdict = $data->getFtsDictionaryByName($_REQUEST['ftsdict']);		if ($ftsdict->recordCount() > 0) {			if (!isset($_POST['formComment'])) $_POST['formComment'] = $ftsdict->fields['comment'];			if (!isset($_POST['ftsdict'])) $_POST['ftsdict'] = $_REQUEST['ftsdict'];			if (!isset($_POST['formName'])) $_POST['formName'] = $_REQUEST['ftsdict'];			echo "<form action=\"fulltext.php\" method=\"post\">\n";			echo "<table>\n";			echo "\t<tr>\n";			echo "\t\t<th class=\"data left required\">{$lang['strname']}</th>\n";			echo "\t\t<td class=\"data1\">";			echo "\t\t\t<input name=\"formName\" size=\"32\" maxlength=\"{$data->_maxNameLen}\" value=\"",				htmlspecialchars($_POST['formName']), "\" />\n";			echo "\t\t</td>\n";			echo "\t</tr>\n";			// Comment			echo "\t<tr>\n";			echo "\t\t<th class=\"data\">{$lang['strcomment']}</th>\n";			echo "\t\t<td class=\"data1\"><textarea cols=\"32\" rows=\"3\"name=\"formComment\">", htmlspecialchars($_POST['formComment']), "</textarea></td>\n";			echo "\t</tr>\n";			echo "</table>\n";			echo "<p><input type=\"hidden\" name=\"action\" value=\"alterdict\" />\n";			echo "<input type=\"hidden\" name=\"ftsdict\" value=\"", htmlspecialchars($_POST['ftsdict']), "\" />\n";			echo "<input type=\"hidden\" name=\"prev_action\" value=\"viewdicts\" /></p>\n";			echo $misc->form;			echo "<input type=\"submit\" name=\"alter\" value=\"{$lang['stralter']}\" />\n";			echo "<input type=\"submit\" name=\"cancel\" value=\"{$lang['strcancel']}\" /></p>\n";			echo "</form>\n";		} else {			echo "<p>{$lang['strnodata']}</p>\n";		}	}	/**	 * Save the form submission containing changes to a FTS dictionary	 */	function doSaveAlterDict() {		global $data, $misc, $lang;		$status = $data->updateFtsDictionary($_POST['ftsdict'], $_POST['formComment'], $_POST['formName']);		if ($status == 0)			doViewDicts($lang['strftsdictaltered']);		else			doAlterDict($lang['strftsdictalteredbad']);	}	/**	 * Show confirmation of drop and perform actual drop of FTS mapping	 */	function doDropMapping($confirm) {		global $data, $misc;		global $lang, $_reload_drop_database;		if (empty($_REQUEST['mapping']) && empty($_REQUEST['ma'])) {			doDefault($lang['strftsspecifymappingtodrop']);			return;		}		if (empty($_REQUEST['ftscfg'])) {			doDefault($lang['strftsspecifyconfigtoalter']);			return;		}		if ($confirm) {			$misc->printTrail('ftscfg'); // TODO: proper breadcrumbs			$misc->printTitle($lang['strdrop'], 'pg.ftscfg.alter');			echo "<form action=\"fulltext.php\" method=\"post\">\n";			// Case of multiaction drop			if (isset($_REQUEST['ma'])) {				foreach($_REQUEST['ma'] as $v) {					$a = unserialize(htmlspecialchars_decode($v, ENT_QUOTES));					echo "<p>", sprintf($lang['strconfdropftsmapping'], $misc->printVal($a['mapping']), $misc->printVal($_REQUEST['ftscfg'])), "</p>\n";					printf('<input type="hidden" name="mapping[]" value="%s" />', htmlspecialchars($a['mapping']));				}			} else {				echo "<p>", sprintf($lang['strconfdropftsmapping'], $misc->printVal($_REQUEST['mapping']), $misc->printVal($_REQUEST['ftscfg'])), "</p>\n";				echo "<input type=\"hidden\" name=\"mapping\" value=\"", htmlspecialchars($_REQUEST['mapping']), "\" />\n";			}			echo "<input type=\"hidden\" name=\"ftscfg\" value=\"{$_REQUEST['ftscfg']}\" />\n";			echo "<input type=\"hidden\" name=\"action\" value=\"dropmapping\" />\n";            echo "<input type=\"hidden\" name=\"prev_action\" value=\"viewconfig\" /></p>\n";            			echo $misc->form;			echo "<input type=\"submit\" name=\"drop\" value=\"{$lang['strdrop']}\" />\n";			echo "<input type=\"submit\" name=\"cancel\" value=\"{$lang['strcancel']}\" />\n";			echo "</form>\n";		} else {			// Case of multiaction drop			if (is_array($_REQUEST['mapping'])) {				$status = $data->changeFtsMapping($_REQUEST['ftscfg'], $_REQUEST['mapping'], 'drop');				if ($status != 0) {					doViewConfig($_REQUEST['ftscfg'], $lang['strftsmappingdroppedbad']);					return;				}				doViewConfig($_REQUEST['ftscfg'], $lang['strftsmappingdropped']);			} else {				$status = $data->changeFtsMapping($_REQUEST['ftscfg'], array($_REQUEST['mapping']), 'drop');				if ($status == 0) {					doViewConfig($_REQUEST['ftscfg'], $lang['strftsmappingdropped']);				} else {					doViewConfig($_REQUEST['ftscfg'], $lang['strftsmappingdroppedbad']);				}			}		}	}	function doAlterMapping($msg = '') {		global $data, $misc, $lang;		$misc->printTrail('ftscfg');		$misc->printTitle($lang['stralter'], 'pg.ftscfg.alter');		$misc->printMsg($msg);		$ftsdicts = $data->getFtsDictionaries();		if ($ftsdicts->recordCount() > 0) {			if (!isset($_POST['formMapping'])) $_POST['formMapping'] = @$_REQUEST['mapping'];			if (!isset($_POST['formDictionary'])) $_POST['formDictionary'] = '';			if (!isset($_POST['ftscfg'])) $_POST['ftscfg'] = $_REQUEST['ftscfg'];			echo "<form action=\"fulltext.php\" method=\"post\">\n";			echo "<table>\n";			echo "\t<tr>\n";			echo "\t\t<th class=\"data left required\">{$lang['strftsmapping']}</th>\n";			echo "\t\t<td class=\"data1\">";			// Case of multiaction drop			if (isset($_REQUEST['ma'])) {				$ma_mappings = array();				$ma_mappings_names = array();				foreach($_REQUEST['ma'] as $v) {					$a = unserialize(htmlspecialchars_decode($v, ENT_QUOTES));					printf('<input type="hidden" name="formMapping[]" value="%s" />', htmlspecialchars($a['mapping']));					$ma_mappings[] = $data->getFtsMappingByName($_POST['ftscfg'], $a['mapping']);					$ma_mappings_names[] = $a['mapping'];				}				echo implode(", ", $ma_mappings_names);			} else {				$mapping = $data->getFtsMappingByName($_POST['ftscfg'], $_POST['formMapping']);				echo $mapping->fields['name'];				echo "<input type=\"hidden\" name=\"formMapping\" value=\"", htmlspecialchars($_POST['formMapping']), "\" />\n";			}			echo "\t\t</td>\n";			echo "\t</tr>\n";			// Dictionary			echo "\t<tr>\n";			echo "\t\t<th class=\"data left required\">{$lang['strftsdict']}</th>\n";			echo "\t\t<td class=\"data1\">";			echo "\t\t\t<select name=\"formDictionary\">\n";			while (!$ftsdicts->EOF) {				$ftsdict = htmlspecialchars($ftsdicts->fields['name']);				echo "\t\t\t\t<option value=\"{$ftsdict}\"",					($ftsdict == $_POST['formDictionary'] || $ftsdict == @$mapping->fields['dictionaries'] || $ftsdict == @$ma_mappings[0]->fields['dictionaries']) ? ' selected="selected"' : '', ">{$ftsdict}</option>\n";				$ftsdicts->moveNext();			}			echo "\t\t</td>\n";			echo "\t</tr>\n";			echo "</table>\n";			echo "<p><input type=\"hidden\" name=\"action\" value=\"altermapping\" />\n";			echo "<input type=\"hidden\" name=\"ftscfg\" value=\"", htmlspecialchars($_POST['ftscfg']), "\" />\n";            echo "<input type=\"hidden\" name=\"prev_action\" value=\"viewconfig\" /></p>\n";            			echo $misc->form;			echo "<input type=\"submit\" name=\"alter\" value=\"{$lang['stralter']}\" />\n";			echo "<input type=\"submit\" name=\"cancel\" value=\"{$lang['strcancel']}\" /></p>\n";			echo "</form>\n";		} else {			echo "<p>{$lang['strftsnodictionaries']}</p>\n";		}	}	/**	 * Save the form submission containing changes to a FTS mapping	 */	function doSaveAlterMapping() {		global $data, $misc, $lang;		$mappingArray = (is_array($_POST['formMapping']) ? $_POST['formMapping'] : array($_POST['formMapping']));		$status = $data->changeFtsMapping($_POST['ftscfg'], $mappingArray, 'alter', $_POST['formDictionary']);		if ($status == 0)			doViewConfig($_POST['ftscfg'], $lang['strftsmappingaltered']);		else			doAlterMapping($lang['strftsmappingalteredbad']);	}	/**	 * Show the form to enter parameters of a new FTS mapping	 */	function doAddMapping($msg = '') {		global $data, $misc, $lang;		$misc->printTrail('ftscfg');		$misc->printTitle($lang['stralter'], 'pg.ftscfg.alter');		$misc->printMsg($msg);		$ftsdicts = $data->getFtsDictionaries();		if ($ftsdicts->recordCount() > 0) {			if (!isset($_POST['formMapping'])) $_POST['formMapping'] = '';			if (!isset($_POST['formDictionary'])) $_POST['formDictionary'] = '';			if (!isset($_POST['ftscfg'])) $_POST['ftscfg'] = $_REQUEST['ftscfg'];			$mappings = $data->getFtsMappings($_POST['ftscfg']);			echo "<form action=\"fulltext.php\" method=\"post\">\n";			echo "<table>\n";			echo "\t<tr>\n";			echo "\t\t<th class=\"data left required\">{$lang['strftsmapping']}</th>\n";			echo "\t\t<td class=\"data1\">";			echo "\t\t\t<select name=\"formMapping\">\n";			while (!$mappings->EOF) {				$mapping = htmlspecialchars($mappings->fields['name']);				$mapping_desc = htmlspecialchars($mappings->fields['description']);				echo "\t\t\t\t<option value=\"{$mapping}\"",					$mapping == $_POST['formMapping'] ? ' selected="selected"' : '', ">{$mapping}", $mapping_desc ? " - {$mapping_desc}" : "", "</option>\n";				$mappings->moveNext();			}			echo "\t\t</td>\n";			echo "\t</tr>\n";			// Dictionary			echo "\t<tr>\n";			echo "\t\t<th class=\"data left required\">{$lang['strftsdict']}</th>\n";			echo "\t\t<td class=\"data1\">";			echo "\t\t\t<select name=\"formDictionary\">\n";			while (!$ftsdicts->EOF) {				$ftsdict = htmlspecialchars($ftsdicts->fields['name']);				echo "\t\t\t\t<option value=\"{$ftsdict}\"",					$ftsdict == $_POST['formDictionary'] ? ' selected="selected"' : '', ">{$ftsdict}</option>\n";				$ftsdicts->moveNext();			}			echo "\t\t</td>\n";			echo "\t</tr>\n";			echo "</table>\n";			echo "<p><input type=\"hidden\" name=\"action\" value=\"addmapping\" />\n";			echo "<input type=\"hidden\" name=\"ftscfg\" value=\"", htmlspecialchars($_POST['ftscfg']), "\" />\n";			echo "<input type=\"hidden\" name=\"prev_action\" value=\"viewconfig\" /></p>\n";			echo $misc->form;			echo "<input type=\"submit\" name=\"add\" value=\"{$lang['stradd']}\" />\n";			echo "<input type=\"submit\" name=\"cancel\" value=\"{$lang['strcancel']}\" /></p>\n";			echo "</form>\n";		} else {			echo "<p>{$lang['strftsnodictionaries']}</p>\n";		}	}	/**	 * Save the form submission containing parameters of a new FTS mapping	 */	function doSaveAddMapping() {		global $data, $misc, $lang;		$mappingArray = (is_array($_POST['formMapping']) ? $_POST['formMapping'] : array($_POST['formMapping']));		$status = $data->changeFtsMapping($_POST['ftscfg'], $mappingArray, 'add', $_POST['formDictionary']);		if ($status == 0)			doViewConfig($_POST['ftscfg'], $lang['strftsmappingadded']);		else			doAddMapping($lang['strftsmappingaddedbad']);	}	/**	 * Generate XML for the browser tree.	 */	function doTree() {		global $misc, $data, $lang, $slony;		$tabs = $misc->getNavTabs('fulltext');		$items = $misc->adjustTabsForTree($tabs);		$reqvars = $misc->getRequestVars('ftscfg');		$attrs = array(			'text'   => noEscape(field('title')),			'icon'   => field('icon'),			'action' => url('fulltext.php',				$reqvars,				field('urlvars')			),			'branch' => url('fulltext.php',				$reqvars,				array(					'action'  => 'subtree',					'what'  => field('icon') // IZ: yeah, it's ugly, but I do not want to change navigation tabs arrays				)			),		);		$misc->printTreeXML($items, $attrs);		exit;	}	function doSubTree($what) {		global $misc, $data, $lang;		switch($what) {			case 'FtsCfg':				$items = $data->getFtsConfigurations(false);				$urlvars = array('action' => 'viewconfig', 'ftscfg' => field('name'));				break;			case 'FtsDict':				$items = $data->getFtsDictionaries(false);				$urlvars = array('action' => 'viewdicts');				break;			case 'FtsParser':				$items = $data->getFtsParsers(false);				$urlvars = array('action' => 'viewparsers');				break;			default:				exit;		}		$reqvars = $misc->getRequestVars('ftscfg');		$attrs = array(			'text'   => noEscape(field('name')),			'icon'   => $what,			'toolTip'=> field('comment'),			'action' => url('fulltext.php',				$reqvars,				$urlvars			),			'branch' => ifempty(field('branch'),				'',				url('fulltext.php',					$reqvars,					array(						'action'  => 'subtree',						'ftscfg'  => field('name')					)				)			),		);		$misc->printTreeXML($items, $attrs);		exit;	}	if ($action == 'tree') doTree();	if ($action == 'subtree') doSubTree($_REQUEST['what']);	$misc->printHeader($lang['strschemas']);	$misc->printBody();	if (isset($_POST['cancel'])) {		if (isset($_POST['prev_action'])) {			$action = $_POST['prev_action'];		} else {			$action = '';		}	}	switch ($action) {		case 'createconfig':			if (isset($_POST['create'])) doSaveCreateConfig();			else doCreateConfig();			break;		case 'alterconfig':			if (isset($_POST['alter'])) doSaveAlterConfig();			else doAlterConfig();			break;		case 'dropconfig':			if (isset($_POST['drop'])) doDropConfig(false);			else doDropConfig(true);			break;		case 'viewconfig':			doViewConfig($_REQUEST['ftscfg']);			break;		case 'viewparsers':			doViewParsers();			break;		case 'viewdicts':			doViewDicts();			break;		case 'createdict':			if (isset($_POST['create'])) doSaveCreateDict();			else doCreateDict();			break;		case 'alterdict':			if (isset($_POST['alter'])) doSaveAlterDict();			else doAlterDict();			break;		case 'dropdict':			if (isset($_POST['drop'])) doDropDict(false);			else doDropDict(true);			break;		case 'dropmapping':			if (isset($_POST['drop'])) doDropMapping(false);			else doDropMapping(true);			break;		case 'altermapping':			if (isset($_POST['alter'])) doSaveAlterMapping();			else doAlterMapping();			break;		case 'addmapping':			if (isset($_POST['add'])) doSaveAddMapping();			else doAddMapping();			break;		default:			doDefault();			break;	}	$misc->printFooter();?>
<?php	/**	 * Manage casts in a database	 *	 * $Id: casts.php,v 1.16 2007/09/25 16:08:05 ioguix Exp $	 */	// Include application functions	include_once('./libraries/lib.inc.php');		$action = (isset($_REQUEST['action'])) ? $_REQUEST['action'] : '';	if (!isset($msg)) $msg = '';	/**	 * Show default list of casts in the database	 */	function doDefault($msg = '') {		global $data, $misc, $database;		global $lang;		function renderCastContext($val) {			global $lang;			switch ($val) {				case 'e': return $lang['strno'];				case 'a': return $lang['strinassignment'];				default: return $lang['stryes'];			}		}				$misc->printTrail('database');		$misc->printTabs('database','casts');		$misc->printMsg($msg);				$casts = $data->getCasts();		$columns = array(			'source_type' => array(				'title' => $lang['strsourcetype'],				'field' => field('castsource'),			),			'target_type' => array(				'title' => $lang['strtargettype'],				'field' => field('casttarget'),			),			'function' => array(				'title' => $lang['strfunction'],				'field' => field('castfunc'),				'params'=> array('null' => $lang['strbinarycompat']),			),			'implicit' => array(				'title' => $lang['strimplicit'],				'field' => field('castcontext'),				'type'  => 'callback',				'params'=> array('function' => 'renderCastContext', 'align' => 'center'),			),			'comment' => array(				'title' => $lang['strcomment'],				'field' => field('castcomment'),			),		);		$actions = array();				$misc->printTable($casts, $columns, $actions, $lang['strnocasts']);	}	/**	 * Generate XML for the browser tree.	 */	function doTree() {		global $misc, $data;				$casts = $data->getCasts();				$proto = concat(field('castsource'), ' AS ', field('casttarget'));				$attrs = array(			'text'   => $proto,			'icon'   => 'Cast'		);				$misc->printTreeXML($casts, $attrs);		exit;	}		if ($action == 'tree') doTree();		$misc->printHeader($lang['strcasts']);	$misc->printBody();	switch ($action) {		case 'tree':			doTree();			break;		default:			doDefault();			break;	}		$misc->printFooter();?>
<?php/** * PostgreSQL 8.0 support * * $Id: Postgres80.php,v 1.28 2007/12/12 04:11:10 xzilla Exp $ */include_once('./classes/database/Postgres81.php');class Postgres80 extends Postgres81 {	var $major_version = 8.0;	// Map of database encoding names to HTTP encoding names.  If a	// database encoding does not appear in this list, then its HTTP	// encoding name is the same as its database encoding name.	var $codemap = array(		'ALT' => 'CP866',		'EUC_CN' => 'GB2312',		'EUC_JP' => 'EUC-JP',		'EUC_KR' => 'EUC-KR',		'EUC_TW' => 'EUC-TW',		'ISO_8859_5' => 'ISO-8859-5',		'ISO_8859_6' => 'ISO-8859-6',		'ISO_8859_7' => 'ISO-8859-7',		'ISO_8859_8' => 'ISO-8859-8',		'JOHAB' => 'CP1361',		'KOI8' => 'KOI8-R',		'LATIN1' => 'ISO-8859-1',		'LATIN2' => 'ISO-8859-2',		'LATIN3' => 'ISO-8859-3',		'LATIN4' => 'ISO-8859-4',		// The following encoding map is a known error in PostgreSQL < 7.2		// See the constructor for Postgres72.		'LATIN5' => 'ISO-8859-5',		'LATIN6' => 'ISO-8859-10',		'LATIN7' => 'ISO-8859-13',		'LATIN8' => 'ISO-8859-14',		'LATIN9' => 'ISO-8859-15',		'LATIN10' => 'ISO-8859-16',		'SQL_ASCII' => 'US-ASCII',		'TCVN' => 'CP1258',		'UNICODE' => 'UTF-8',		'WIN' => 'CP1251',		'WIN874' => 'CP874',		'WIN1256' => 'CP1256'	);	/**	 * Constructor	 * @param $conn The database connection	 */	function Postgres80($conn) {		$this->Postgres81($conn);	}	// Help functions	function getHelpPages() {		include_once('./help/PostgresDoc80.php');		return $this->help_page;	}	// Database functions	/**	 * Return all database available on the server	 * @return A list of databases, sorted alphabetically	 */	function getDatabases($currentdatabase = NULL) {		global $conf, $misc;		$server_info = $misc->getServerInfo();		if (isset($conf['owned_only']) && $conf['owned_only'] && !$this->isSuperUser($server_info['username'])) {			$username = $server_info['username'];			$this->clean($username);			$clause = " AND pu.usename='{$username}'";		}		else $clause = '';		if ($currentdatabase != NULL) {			$this->clean($currentdatabase);			$orderby = "ORDER BY pdb.datname = '{$currentdatabase}' DESC, pdb.datname";		}		else			$orderby = "ORDER BY pdb.datname";		if (!$conf['show_system'])			$where = ' AND NOT pdb.datistemplate';		else			$where = ' AND pdb.datallowconn';		$sql = "SELECT pdb.datname AS datname, pu.usename AS datowner, pg_encoding_to_char(encoding) AS datencoding,                               (SELECT description FROM pg_description pd WHERE pdb.oid=pd.objoid) AS datcomment,                               (SELECT spcname FROM pg_catalog.pg_tablespace pt WHERE pt.oid=pdb.dattablespace) AS tablespace                        FROM pg_database pdb, pg_user pu			WHERE pdb.datdba = pu.usesysid			{$where}			{$clause}			{$orderby}";		return $this->selectSet($sql);	}	// Schema functions	/**	 * Return all schemas in the current database.	 * @return All schemas, sorted alphabetically	 */	function getSchemas() {		global $conf, $slony;		if (!$conf['show_system']) {			$where = "WHERE nspname NOT LIKE 'pg@_%' ESCAPE '@' AND nspname != 'information_schema'";			if (isset($slony) && $slony->isEnabled()) {				$temp = $slony->slony_schema;				$this->clean($temp);				$where .= " AND nspname != '{$temp}'";			}		}		else $where = "WHERE nspname !~ '^pg_t(emp_[0-9]+|oast)$'";		$sql = "			SELECT pn.nspname, pu.usename AS nspowner,				pg_catalog.obj_description(pn.oid, 'pg_namespace') AS nspcomment			FROM pg_catalog.pg_namespace pn				LEFT JOIN pg_catalog.pg_user pu ON (pn.nspowner = pu.usesysid)			{$where}			ORDER BY nspname";		return $this->selectSet($sql);	}	/**	 * Return all information relating to a schema	 * @param $schema The name of the schema	 * @return Schema information	 */	function getSchemaByName($schema) {		$this->clean($schema);		$sql = "			SELECT nspname, nspowner, u.usename AS ownername, nspacl,				pg_catalog.obj_description(pn.oid, 'pg_namespace') as nspcomment            FROM pg_catalog.pg_namespace pn            	LEFT JOIN pg_shadow as u ON pn.nspowner = u.usesysid			WHERE nspname='{$schema}'";		return $this->selectSet($sql);	}	// Table functions	/**	 * Protected method which alter a table	 * SHOULDN'T BE CALLED OUTSIDE OF A TRANSACTION	 * @param $tblrs The table recordSet returned by getTable()	 * @param $name The new name for the table	 * @param $owner The new owner for the table	 * @param $schema The new schema for the table	 * @param $comment The comment on the table	 * @param $tablespace The new tablespace for the table ('' means leave as is)	 * @return 0 success	 * @return -3 rename error	 * @return -4 comment error	 * @return -5 owner error	 * @return -6 tablespace error	 */	protected	function _alterTable($tblrs, $name, $owner, $schema, $comment, $tablespace) {		/* $schema not supported in pg80- */		// Comment		$status = $this->setComment('TABLE', '', $tblrs->fields['relname'], $comment);		if ($status != 0) return -4;		// Owner		$this->fieldClean($owner);		$status = $this->alterTableOwner($tblrs, $owner);		if ($status != 0) return -5;		// Tablespace		$this->fieldClean($tablespace);		$status = $this->alterTableTablespace($tblrs, $tablespace);			if ($status != 0) return -6;		// Rename		$this->fieldClean($name);		$status = $this->alterTableName($tblrs, $name);		if ($status != 0) return -3;		return 0;	}	// Constraint functions	/**	 * Returns a list of all constraints on a table,	 * including constraint name, definition, related col and referenced namespace,	 * table and col if needed	 * @param $table the table where we are looking for fk	 * @return a recordset	 */	function getConstraintsWithFields($table) {		$c_schema = $this->_schema;		$this->clean($c_schema);		$this->clean($table);		// get the max number of col used in a constraint for the table		$sql = "SELECT DISTINCT			max(SUBSTRING(array_dims(c.conkey) FROM '^\\\[.*:(.*)\\\]$')) as nb		FROM pg_catalog.pg_constraint AS c			JOIN pg_catalog.pg_class AS r ON (c.conrelid=r.oid)		    JOIN pg_catalog.pg_namespace AS ns ON (r.relnamespace=ns.oid)		WHERE			r.relname = '{$table}' AND ns.nspname='{$c_schema}'";		$rs = $this->selectSet($sql);		if ($rs->EOF) $max_col = 0;		else $max_col = $rs->fields['nb'];		$sql = '			SELECT				c.oid AS conid, c.contype, c.conname, pg_catalog.pg_get_constraintdef(c.oid, true) AS consrc,				ns1.nspname as p_schema, r1.relname as p_table, ns2.nspname as f_schema,				r2.relname as f_table, f1.attname as p_field, f1.attnum AS p_attnum, f2.attname as f_field,				f2.attnum AS f_attnum, pg_catalog.obj_description(c.oid, \'pg_constraint\') AS constcomment,				c.conrelid, c.confrelid			FROM				pg_catalog.pg_constraint AS c				JOIN pg_catalog.pg_class AS r1 ON (c.conrelid=r1.oid)				JOIN pg_catalog.pg_attribute AS f1 ON (f1.attrelid=r1.oid AND (f1.attnum=c.conkey[1]';		for ($i = 2; $i <= $rs->fields['nb']; $i++) {			$sql.= " OR f1.attnum=c.conkey[$i]";		}		$sql.= '))				JOIN pg_catalog.pg_namespace AS ns1 ON r1.relnamespace=ns1.oid				LEFT JOIN (					pg_catalog.pg_class AS r2 JOIN pg_catalog.pg_namespace AS ns2 ON (r2.relnamespace=ns2.oid)				) ON (c.confrelid=r2.oid)				LEFT JOIN pg_catalog.pg_attribute AS f2 ON					(f2.attrelid=r2.oid AND ((c.confkey[1]=f2.attnum AND c.conkey[1]=f1.attnum)';		for ($i = 2; $i <= $rs->fields['nb']; $i++)			$sql.= "OR (c.confkey[$i]=f2.attnum AND c.conkey[$i]=f1.attnum)";		$sql .= sprintf("))			WHERE				r1.relname = '%s' AND ns1.nspname='%s'			ORDER BY 1", $table, $c_schema);		return $this->selectSet($sql);	}	// View functions	/**	 * Protected method which alter a view	 * SHOULDN'T BE CALLED OUTSIDE OF A TRANSACTION	 * @param $vwrs The view recordSet returned by getView()	 * @param $name The new name for the view	 * @param $owner The new owner for the view	 * @param $comment The comment on the view	 * @return 0 success	 * @return -3 rename error	 * @return -4 comment error	 * @return -5 owner error	 */	protected    function _alterView($vwrs, $name, $owner, $schema, $comment) {    	/* $schema not supported in pg80- */    	$this->fieldArrayClean($vwrs->fields);		// Comment		if ($this->setComment('VIEW', $vwrs->fields['relname'], '', $comment) != 0)			return -4;		// Owner		$this->fieldClean($owner);		$status = $this->alterViewOwner($vwrs, $owner);		if ($status != 0) return -5;		// Rename		$this->fieldClean($name);		$status = $this->alterViewName($vwrs, $name);		if ($status != 0) return -3;		return 0;	}	// Sequence functions	/**	 * Protected method which alter a sequence	 * SHOULDN'T BE CALLED OUTSIDE OF A TRANSACTION	 * @param $seqrs The sequence recordSet returned by getSequence()	 * @param $name The new name for the sequence	 * @param $comment The comment on the sequence	 * @param $owner The new owner for the sequence	 * @param $schema The new schema for the sequence	 * @param $increment The increment	 * @param $minvalue The min value	 * @param $maxvalue The max value	 * @param $restartvalue The starting value	 * @param $cachevalue The cache value	 * @param $cycledvalue True if cycled, false otherwise	 * @param $startvalue The sequence start value when issueing a restart	 * @return 0 success	 * @return -3 rename error	 * @return -4 comment error	 * @return -5 owner error	 * @return -6 get sequence props error	 * @return -7 schema error	 */	protected	function _alterSequence($seqrs, $name, $comment, $owner, $schema, $increment,	$minvalue, $maxvalue, $restartvalue, $cachevalue, $cycledvalue, $startvalue) {		/* $schema not supported in pg80- */		$this->fieldArrayClean($seqrs->fields);		// Comment		$status = $this->setComment('SEQUENCE', $seqrs->fields['seqname'], '', $comment);		if ($status != 0)			return -4;		// Owner		$this->fieldClean($owner);		$status = $this->alterSequenceOwner($seqrs, $owner);		if ($status != 0)			return -5;		// Props		$this->clean($increment);		$this->clean($minvalue);		$this->clean($maxvalue);		$this->clean($restartvalue);		$this->clean($cachevalue);		$this->clean($cycledvalue);		$this->clean($startvalue);		$status = $this->alterSequenceProps($seqrs, $increment,	$minvalue,			$maxvalue, $restartvalue, $cachevalue, $cycledvalue, null);		if ($status != 0)			return -6;		// Rename		$this->fieldClean($name);		$status = $this->alterSequenceName($seqrs, $name);		if ($status != 0)			return -3;		return 0;	}	// Role, User/group functions	/**	 * Changes a user's password	 * @param $username The username	 * @param $password The new password	 * @return 0 success	 */	function changePassword($username, $password) {		$enc = $this->_encryptPassword($username, $password);		$this->fieldClean($username);		$this->clean($enc);		$sql = "ALTER USER \"{$username}\" WITH ENCRYPTED PASSWORD '{$enc}'";		return $this->execute($sql);	}	// Aggregate functions	/**	 * Gets all information for an aggregate	 * @param $name The name of the aggregate	 * @param $basetype The input data type of the aggregate	 * @return A recordset	 */	function getAggregate($name, $basetype) {		$c_schema = $this->_schema;		$this->clean($c_schema);		$this->clean($name);		$this->clean($basetype);		$sql = "			SELECT p.proname,				CASE p.proargtypes[0]					WHEN 'pg_catalog.\"any\"'::pg_catalog.regtype THEN NULL					ELSE pg_catalog.format_type(p.proargtypes[0], NULL)				END AS proargtypes, a.aggtransfn, format_type(a.aggtranstype, NULL) AS aggstype,				a.aggfinalfn, a.agginitval, u.usename, pg_catalog.obj_description(p.oid, 'pg_proc') AS aggrcomment			FROM pg_catalog.pg_proc p, pg_catalog.pg_namespace n, pg_catalog.pg_user u, pg_catalog.pg_aggregate a			WHERE n.oid = p.pronamespace AND p.proowner=u.usesysid AND p.oid=a.aggfnoid				AND p.proisagg AND n.nspname='{$c_schema}'				AND p.proname='{$name}'				AND CASE p.proargtypes[0]					WHEN 'pg_catalog.\"any\"'::pg_catalog.regtype THEN ''					ELSE pg_catalog.format_type(p.proargtypes[0], NULL)				END ='{$basetype}'";		return $this->selectSet($sql);	}	// Capabilities	function hasAggregateSortOp() { return false; }	function hasAlterTableSchema() { return false; }	function hasAutovacuum() { return false; }	function hasDisableTriggers() { return false; }	function hasFunctionAlterSchema() { return false; }	function hasPreparedXacts() { return false; }	function hasRoles() { return false; }	function hasAlterSequenceSchema() { return false; }	function hasServerAdminFuncs() { return false; }}?>
<?php/** * PostgreSQL 8.1 support * * $Id: Postgres81.php,v 1.21 2008/01/19 13:46:15 ioguix Exp $ */include_once('./classes/database/Postgres82.php');class Postgres81 extends Postgres82 {	var $major_version = 8.1;	// List of all legal privileges that can be applied to different types	// of objects.	var $privlist = array(		'table' => array('SELECT', 'INSERT', 'UPDATE', 'DELETE', 'RULE', 'REFERENCES', 'TRIGGER', 'ALL PRIVILEGES'),		'view' => array('SELECT', 'INSERT', 'UPDATE', 'DELETE', 'RULE', 'REFERENCES', 'TRIGGER', 'ALL PRIVILEGES'),		'sequence' => array('SELECT', 'UPDATE', 'ALL PRIVILEGES'),		'database' => array('CREATE', 'TEMPORARY', 'ALL PRIVILEGES'),		'function' => array('EXECUTE', 'ALL PRIVILEGES'),		'language' => array('USAGE', 'ALL PRIVILEGES'),		'schema' => array('CREATE', 'USAGE', 'ALL PRIVILEGES'),		'tablespace' => array('CREATE', 'ALL PRIVILEGES')	);	// List of characters in acl lists and the privileges they	// refer to.	var $privmap = array(		'r' => 'SELECT',		'w' => 'UPDATE',		'a' => 'INSERT',		'd' => 'DELETE',		'R' => 'RULE',		'x' => 'REFERENCES',		't' => 'TRIGGER',		'X' => 'EXECUTE',		'U' => 'USAGE',		'C' => 'CREATE',		'T' => 'TEMPORARY'	);	// Array of allowed index types	var $typIndexes = array('BTREE', 'RTREE', 'GIST', 'HASH');	/**	 * Constructor	 * @param $conn The database connection	 */	function Postgres81($conn) {		$this->Postgres82($conn);	}	// Help functions		function getHelpPages() {		include_once('./help/PostgresDoc81.php');		return $this->help_page;	}	// Database functions	/**	 * Returns all databases available on the server	 * @return A list of databases, sorted alphabetically	 */	function getDatabases($currentdatabase = NULL) {		global $conf, $misc;				$server_info = $misc->getServerInfo();				if (isset($conf['owned_only']) && $conf['owned_only'] && !$this->isSuperUser($server_info['username'])) {			$username = $server_info['username'];			$this->clean($username);			$clause = " AND pr.rolname='{$username}'";		}		else $clause = '';		if ($currentdatabase != NULL) {			$this->clean($currentdatabase);			$orderby = "ORDER BY pdb.datname = '{$currentdatabase}' DESC, pdb.datname";		}		else			$orderby = "ORDER BY pdb.datname";		if (!$conf['show_system'])			$where = ' AND NOT pdb.datistemplate';		else			$where = ' AND pdb.datallowconn';		$sql = "SELECT pdb.datname AS datname, pr.rolname AS datowner, pg_encoding_to_char(encoding) AS datencoding,                               (SELECT description FROM pg_catalog.pg_description pd WHERE pdb.oid=pd.objoid) AS datcomment,                               (SELECT spcname FROM pg_catalog.pg_tablespace pt WHERE pt.oid=pdb.dattablespace) AS tablespace,							   pg_catalog.pg_database_size(pdb.oid) as dbsize                         FROM pg_catalog.pg_database pdb LEFT JOIN pg_catalog.pg_roles pr ON (pdb.datdba = pr.oid)  						WHERE true 			{$where}			{$clause}			{$orderby}";		return $this->selectSet($sql);	}	/**	 * Alters a database	 * the multiple return vals are for postgres 8+ which support more functionality in alter database	 * @param $dbName The name of the database	 * @param $newName new name for the database	 * @param $newOwner The new owner for the database	 * @return 0 success	 * @return -1 transaction error	 * @return -2 owner error	 * @return -3 rename error	 */	function alterDatabase($dbName, $newName, $newOwner = '', $comment = '') {		$this->clean($dbName);		$this->clean($newName);		$this->clean($newOwner);		//ignore $comment, not supported pre 8.2					$status = $this->beginTransaction();		if ($status != 0) {			$this->rollbackTransaction();			return -1;		}		if ($dbName != $newName) {			$status = $this->alterDatabaseRename($dbName, $newName);			if ($status != 0) {				$this->rollbackTransaction();				return -3;			}		}		$status = $this->alterDatabaseOwner($newName, $newOwner);		if ($status != 0) {			$this->rollbackTransaction();			return -2;		}		return $this->endTransaction();	}	// Tablespace functions		/**	 * Retrieves a tablespace's information	 * @return A recordset	 */	function getTablespace($spcname) {		$this->clean($spcname);		$sql = "SELECT spcname, pg_catalog.pg_get_userbyid(spcowner) AS spcowner, spclocation					FROM pg_catalog.pg_tablespace WHERE spcname='{$spcname}'";		return $this->selectSet($sql);	}		/**	 * Retrieves information for all tablespaces	 * @param $all Include all tablespaces (necessary when moving objects back to the default space)	 * @return A recordset	 */	function getTablespaces($all = false) {		global $conf;				$sql = "SELECT spcname, pg_catalog.pg_get_userbyid(spcowner) AS spcowner, spclocation					FROM pg_catalog.pg_tablespace";		if (!$conf['show_system'] && !$all) {			$sql .= " WHERE spcname NOT LIKE 'pg\\\\_%'";	}			$sql .= " ORDER BY spcname";		return $this->selectSet($sql);	}	// Capabilities	function hasCreateTableLikeWithConstraints() {return false;}	function hasSharedComments() {return false;}	function hasConcurrentIndexBuild() {return false;}}?>
<?php	/**	 * Process an arbitrary SQL query - tricky!  The main problem is that	 * unless we implement a full SQL parser, there's no way of knowing	 * how many SQL statements have been strung together with semi-colons	 * @param $_SESSION['sqlquery'] The SQL query string to execute	 *	 * $Id: sql.php,v 1.43 2008/01/10 20:19:27 xzilla Exp $	 */	// Prevent timeouts on large exports (non-safe mode only)	if (!ini_get('safe_mode')) set_time_limit(0);	// Include application functions	include_once('./libraries/lib.inc.php');	/**	 * This is a callback function to display the result of each separate query	 * @param ADORecordSet $rs The recordset returned by the script execetor	 */	function sqlCallback($query, $rs, $lineno) {		global $data, $misc, $lang, $_connection;		// Check if $rs is false, if so then there was a fatal error		if ($rs === false) {			echo htmlspecialchars($_FILES['script']['name']), ':', $lineno, ': ', nl2br(htmlspecialchars($_connection->getLastError())), "<br/>\n";		}		else {			// Print query results			switch (pg_result_status($rs)) {				case PGSQL_TUPLES_OK:					// If rows returned, then display the results					$num_fields = pg_numfields($rs);					echo "<p><table>\n<tr>";					for ($k = 0; $k < $num_fields; $k++) {						echo "<th class=\"data\">", $misc->printVal(pg_fieldname($rs, $k)), "</th>";					}							$i = 0;					$row = pg_fetch_row($rs);					while ($row !== false) {						$id = (($i % 2) == 0 ? '1' : '2');						echo "<tr class=\"data{$id}\">\n";						foreach ($row as $k => $v) {							echo "<td style=\"white-space:nowrap;\">", $misc->printVal($v, pg_fieldtype($rs, $k), array('null' => true)), "</td>";						}													echo "</tr>\n";						$row = pg_fetch_row($rs);						$i++;					};					echo "</table><br/>\n";					echo $i, " {$lang['strrows']}</p>\n";					break;				case PGSQL_COMMAND_OK:					// If we have the command completion tag					if (version_compare(phpversion(), '4.3', '>=')) {						echo htmlspecialchars(pg_result_status($rs, PGSQL_STATUS_STRING)), "<br/>\n";					}					// Otherwise if any rows have been affected					elseif ($data->conn->Affected_Rows() > 0) {						echo $data->conn->Affected_Rows(), " {$lang['strrowsaff']}<br/>\n";					}					// Otherwise output nothing...					break;				case PGSQL_EMPTY_QUERY:					break;				default:					break;			}		}	}	// We need to store the query in a session for editing purposes	// We avoid GPC vars to avoid truncating long queries	// If we came from a report, we need to look up the query	if (isset($_REQUEST['subject']) && $_REQUEST['subject'] == 'report' ) {		global $data, $misc;		include_once('./classes/Reports.php');		$reportsdb = new Reports($status);		$report = $reportsdb->getReport($_REQUEST['reportid']);		$_SESSION['sqlquery'] = $report->fields['report_sql'];		} 	elseif (isset($_POST['query'])) {		// Or maybe we came from an sql form		$_SESSION['sqlquery'] = $_POST['query'];	} else {		echo "could not find the query!!";	}		// Pagination maybe set by a get link that has it as FALSE,	// if that's the case, unset the variable.	if (isset($_REQUEST['paginate']) && $_REQUEST['paginate'] == 'f') {		unset($_REQUEST['paginate']);		unset($_POST['paginate']);		unset($_GET['paginate']);	}	// Check to see if pagination has been specified. In that case, send to display	// script for pagination	/* if a file is given or the request is an explain, do not paginate */	if (isset($_REQUEST['paginate']) && !(isset($_FILES['script']) && $_FILES['script']['size'] > 0)			&& (preg_match('/^\s*explain/i', $_SESSION['sqlquery']) == 0)) {		include('./display.php');		exit;	}		$subject = isset($_REQUEST['subject'])? $_REQUEST['subject'] : '';	$misc->printHeader($lang['strqueryresults']);	$misc->printBody();	$misc->printTrail('database');	$misc->printTitle($lang['strqueryresults']);	// Set the schema search path	if (isset($_REQUEST['search_path'])) {		if ($data->setSearchPath(array_map('trim',explode(',',$_REQUEST['search_path']))) != 0) {			$misc->printFooter();			exit;		}	}	// May as well try to time the query	if (function_exists('microtime')) {		list($usec, $sec) = explode(' ', microtime());		$start_time = ((float)$usec + (float)$sec);	}	else $start_time = null;	// Execute the query.  If it's a script upload, special handling is necessary	if (isset($_FILES['script']) && $_FILES['script']['size'] > 0)		$data->executeScript('script', 'sqlCallback');	else {		// Set fetch mode to NUM so that duplicate field names are properly returned		$data->conn->setFetchMode(ADODB_FETCH_NUM);		$rs = $data->conn->Execute($_SESSION['sqlquery']);		// $rs will only be an object if there is no error		if (is_object($rs)) {			// Request was run, saving it in history			if(!isset($_REQUEST['nohistory']))				$misc->saveScriptHistory($_SESSION['sqlquery']);			// Now, depending on what happened do various things				// First, if rows returned, then display the results			if ($rs->recordCount() > 0) {				echo "<table>\n<tr>";				foreach ($rs->fields as $k => $v) {					$finfo = $rs->fetchField($k);					echo "<th class=\"data\">", $misc->printVal($finfo->name), "</th>";				}                                echo "</tr>\n";					$i = 0;						while (!$rs->EOF) {					$id = (($i % 2) == 0 ? '1' : '2');					echo "<tr class=\"data{$id}\">\n";					foreach ($rs->fields as $k => $v) {						$finfo = $rs->fetchField($k);						echo "<td style=\"white-space:nowrap;\">", $misc->printVal($v, $finfo->type, array('null' => true)), "</td>";					}												echo "</tr>\n";					$rs->moveNext();					$i++;				}				echo "</table>\n";				echo "<p>", $rs->recordCount(), " {$lang['strrows']}</p>\n";			}			// Otherwise if any rows have been affected			elseif ($data->conn->Affected_Rows() > 0) {				echo "<p>", $data->conn->Affected_Rows(), " {$lang['strrowsaff']}</p>\n";			}			// Otherwise nodata to print			else echo '<p>', $lang['strnodata'], "</p>\n";		}	}	// May as well try to time the query	if ($start_time !== null) {		list($usec, $sec) = explode(' ', microtime());		$end_time = ((float)$usec + (float)$sec);			// Get duration in milliseconds, round to 3dp's			$duration = number_format(($end_time - $start_time) * 1000, 3);	}	else $duration = null;	// Reload the browser as we may have made schema changes	$_reload_browser = true;	// Display duration if we know it	if ($duration !== null) {		echo "<p>", sprintf($lang['strruntime'], $duration), "</p>\n";	}		echo "<p>{$lang['strsqlexecuted']}</p>\n";				echo "<ul class=\"navlink\">\n";		// Return	if (isset($_REQUEST['return_url']) && isset($_REQUEST['return_desc']))		echo "\t<li><a href=\"{$_REQUEST['return_url']}\">{$_REQUEST['return_desc']}</a></li>\n";	// Edit			echo "\t<li><a href=\"database.php?database=", urlencode($_REQUEST['database']),		"&amp;server=", urlencode($_REQUEST['server']), "&amp;action=sql\">{$lang['streditsql']}</a></li>\n";					// Create report	if (($subject !== 'report') && $conf['show_reports'] && isset($rs) && is_object($rs) && $rs->recordCount() > 0)		echo "\t<li><a href=\"reports.php?{$misc->href}&amp;action=create&amp;report_sql=",			urlencode($_SESSION['sqlquery']), "\">{$lang['strcreatereport']}</a></li>\n";		// Create view and download	if (isset($_SESSION['sqlquery']) && isset($rs) && is_object($rs) && $rs->recordCount() > 0) {		// Report views don't set a schema, so we need to disable create view in that case		if (isset($_REQUEST['schema'])) 			echo "\t<li><a href=\"views.php?action=create&amp;formDefinition=",				urlencode($_SESSION['sqlquery']), "&amp;{$misc->href}\">{$lang['strcreateview']}</a></li>\n";		echo "\t<li><a href=\"dataexport.php?query=", urlencode($_SESSION['sqlquery']);		if (isset($_REQUEST['search_path']))			echo "&amp;search_path=", urlencode($_REQUEST['search_path']);		echo "&amp;{$misc->href}\">{$lang['strdownload']}</a></li>\n";	}	echo "</ul>\n";		$misc->printFooter();?>
<?php	/**	 * Common relation browsing function that can be used for views,	 * tables, reports, arbitrary queries, etc. to avoid code duplication.	 * @param $query The SQL SELECT string to execute	 * @param $count The same SQL query, but only retrieves the count of the rows (AS total)	 * @param $return_url The return URL	 * @param $return_desc The return link name	 * @param $page The current page	 *	 * $Id: display.php,v 1.68 2008/04/14 12:44:27 ioguix Exp $	 */	// Prevent timeouts on large exports (non-safe mode only)	if (!ini_get('safe_mode')) set_time_limit(0);	// Include application functions	include_once('./libraries/lib.inc.php');	global $conf, $lang;	$action = (isset($_REQUEST['action'])) ? $_REQUEST['action'] : '';	/**	 * Show confirmation of edit and perform actual update	 */	function doEditRow($confirm, $msg = '') {		global $data, $misc, $conf;		global $lang;		if (is_array($_REQUEST['key']))           $key = $_REQUEST['key'];        else           $key = unserialize($_REQUEST['key']);		if ($confirm) {			$misc->printTrail($_REQUEST['subject']);			$misc->printTitle($lang['streditrow']);			$misc->printMsg($msg);			$attrs = $data->getTableAttributes($_REQUEST['table']);			$rs = $data->browseRow($_REQUEST['table'], $key);			if (($conf['autocomplete'] != 'disable')) {				$fksprops = $misc->getAutocompleteFKProperties($_REQUEST['table']);				if ($fksprops !== false)					echo $fksprops['code'];			}			else $fksprops = false;			echo "<form action=\"display.php\" method=\"post\" id=\"ac_form\">\n";			$elements = 0;			$error = true;						if ($rs->recordCount() == 1 && $attrs->recordCount() > 0) {				echo "<table>\n";				// Output table header				echo "<tr><th class=\"data\">{$lang['strcolumn']}</th><th class=\"data\">{$lang['strtype']}</th>";				echo "<th class=\"data\">{$lang['strformat']}</th>\n";				echo "<th class=\"data\">{$lang['strnull']}</th><th class=\"data\">{$lang['strvalue']}</th></tr>";				$i = 0;				while (!$attrs->EOF) {					$attrs->fields['attnotnull'] = $data->phpBool($attrs->fields['attnotnull']);					$id = (($i % 2) == 0 ? '1' : '2');										// Initialise variables					if (!isset($_REQUEST['format'][$attrs->fields['attname']]))						$_REQUEST['format'][$attrs->fields['attname']] = 'VALUE';										echo "<tr class=\"data{$id}\">\n";					echo "<td style=\"white-space:nowrap;\">", $misc->printVal($attrs->fields['attname']), "</td>";					echo "<td style=\"white-space:nowrap;\">\n";					echo $misc->printVal($data->formatType($attrs->fields['type'], $attrs->fields['atttypmod']));					echo "<input type=\"hidden\" name=\"types[", htmlspecialchars($attrs->fields['attname']), "]\" value=\"", 						htmlspecialchars($attrs->fields['type']), "\" /></td>";					$elements++;					echo "<td style=\"white-space:nowrap;\">\n";					echo "<select name=\"format[", htmlspecialchars($attrs->fields['attname']), "]\">\n";					echo "<option value=\"VALUE\"", ($_REQUEST['format'][$attrs->fields['attname']] == 'VALUE') ? ' selected="selected"' : '', ">{$lang['strvalue']}</option>\n";					echo "<option value=\"EXPRESSION\"", ($_REQUEST['format'][$attrs->fields['attname']] == 'EXPRESSION') ? ' selected="selected"' : '', ">{$lang['strexpression']}</option>\n";					echo "</select>\n</td>\n";					$elements++;					echo "<td style=\"white-space:nowrap;\">";					// Output null box if the column allows nulls (doesn't look at CHECKs or ASSERTIONS)					if (!$attrs->fields['attnotnull']) {						// Set initial null values						if ($_REQUEST['action'] == 'confeditrow' && $rs->fields[$attrs->fields['attname']] === null) {							$_REQUEST['nulls'][$attrs->fields['attname']] = 'on';						}						echo "<input type=\"checkbox\" name=\"nulls[{$attrs->fields['attname']}]\"",							isset($_REQUEST['nulls'][$attrs->fields['attname']]) ? ' checked="checked"' : '', " /></td>\n";						$elements++;					}					else						echo "&nbsp;</td>";					echo "<td id=\"row_att_{$attrs->fields['attnum']}\" style=\"white-space:nowrap;\">";					$extras = array();					// If the column allows nulls, then we put a JavaScript action on the data field to unset the					// NULL checkbox as soon as anything is entered in the field.  We use the $elements variable to 					// keep track of which element offset we're up to.  We can't refer to the null checkbox by name					// as it contains '[' and ']' characters.					if (!$attrs->fields['attnotnull']) {						$extras['onChange'] = 'elements[' . ($elements - 1) . '].checked = false;';					}					if (($fksprops !== false) && isset($fksprops['byfield'][$attrs->fields['attnum']])) {						$extras['id'] = "attr_{$attrs->fields['attnum']}";						$extras['autocomplete'] = 'off';					}					echo $data->printField("values[{$attrs->fields['attname']}]", $rs->fields[$attrs->fields['attname']], $attrs->fields['type'], $extras);					echo "</td>";					$elements++;					echo "</tr>\n";					$i++;					$attrs->moveNext();				}				echo "</table>\n";				$error = false;			}			elseif ($rs->recordCount() != 1) {				echo "<p>{$lang['strrownotunique']}</p>\n";							}			else {				echo "<p>{$lang['strinvalidparam']}</p>\n";			}			echo "<input type=\"hidden\" name=\"action\" value=\"editrow\" />\n";			echo $misc->form;			if (isset($_REQUEST['table']))				echo "<input type=\"hidden\" name=\"table\" value=\"", htmlspecialchars($_REQUEST['table']), "\" />\n";			if (isset($_REQUEST['subject']))				echo "<input type=\"hidden\" name=\"subject\" value=\"", htmlspecialchars($_REQUEST['subject']), "\" />\n";			if (isset($_REQUEST['query']))				echo "<input type=\"hidden\" name=\"query\" value=\"", htmlspecialchars($_REQUEST['query']), "\" />\n";			if (isset($_REQUEST['count']))				echo "<input type=\"hidden\" name=\"count\" value=\"", htmlspecialchars($_REQUEST['count']), "\" />\n";			if (isset($_REQUEST['return_url']))				echo "<input type=\"hidden\" name=\"return_url\" value=\"", htmlspecialchars($_REQUEST['return_url']), "\" />\n";			if (isset($_REQUEST['return_desc']))				echo "<input type=\"hidden\" name=\"return_desc\" value=\"", htmlspecialchars($_REQUEST['return_desc']), "\" />\n";			echo "<input type=\"hidden\" name=\"page\" value=\"", htmlspecialchars($_REQUEST['page']), "\" />\n";			echo "<input type=\"hidden\" name=\"sortkey\" value=\"", htmlspecialchars($_REQUEST['sortkey']), "\" />\n";			echo "<input type=\"hidden\" name=\"sortdir\" value=\"", htmlspecialchars($_REQUEST['sortdir']), "\" />\n";			echo "<input type=\"hidden\" name=\"strings\" value=\"", htmlspecialchars($_REQUEST['strings']), "\" />\n";			echo "<input type=\"hidden\" name=\"key\" value=\"", htmlspecialchars(serialize($key)), "\" />\n";			echo "<p>";			if (!$error) echo "<input type=\"submit\" name=\"save\" value=\"{$lang['strsave']}\" />\n";			echo "<input type=\"submit\" name=\"cancel\" value=\"{$lang['strcancel']}\" />\n";			if($fksprops !== false) {				if ($conf['autocomplete'] != 'default off')					echo "<input type=\"checkbox\" id=\"no_ac\" value=\"1\" checked=\"checked\" /><label for=\"no_ac\">{$lang['strac']}</label>\n";				else					echo "<input type=\"checkbox\" id=\"no_ac\" value=\"0\" /><label for=\"no_ac\">{$lang['strac']}</label>\n";			}			echo "</p>\n";			echo "</form>\n";		}		else {			if (!isset($_POST['values'])) $_POST['values'] = array();			if (!isset($_POST['nulls'])) $_POST['nulls'] = array();						$status = $data->editRow($_POST['table'], $_POST['values'], $_POST['nulls'], 				$_POST['format'], $_POST['types'], unserialize($_POST['key']));			if ($status == 0)				doBrowse($lang['strrowupdated']);			elseif ($status == -2)				doEditRow(true, $lang['strrownotunique']);			else				doEditRow(true, $lang['strrowupdatedbad']);		}	}		/**	 * Show confirmation of drop and perform actual drop	 */	function doDelRow($confirm) {		global $data, $misc;		global $lang;		if ($confirm) {			$misc->printTrail($_REQUEST['subject']);			$misc->printTitle($lang['strdeleterow']);			echo "<p>{$lang['strconfdeleterow']}</p>\n";						echo "<form action=\"display.php\" method=\"post\">\n";			echo "<input type=\"hidden\" name=\"action\" value=\"delrow\" />\n";			echo $misc->form;			if (isset($_REQUEST['table']))				echo "<input type=\"hidden\" name=\"table\" value=\"", htmlspecialchars($_REQUEST['table']), "\" />\n";			if (isset($_REQUEST['subject']))				echo "<input type=\"hidden\" name=\"subject\" value=\"", htmlspecialchars($_REQUEST['subject']), "\" />\n";			if (isset($_REQUEST['query']))				echo "<input type=\"hidden\" name=\"query\" value=\"", htmlspecialchars($_REQUEST['query']), "\" />\n";			if (isset($_REQUEST['count']))				echo "<input type=\"hidden\" name=\"count\" value=\"", htmlspecialchars($_REQUEST['count']), "\" />\n";			if (isset($_REQUEST['return_url']))				echo "<input type=\"hidden\" name=\"return_url\" value=\"", htmlspecialchars($_REQUEST['return_url']), "\" />\n";			if (isset($_REQUEST['return_desc']))				echo "<input type=\"hidden\" name=\"return_desc\" value=\"", htmlspecialchars($_REQUEST['return_desc']), "\" />\n";			echo "<input type=\"hidden\" name=\"page\" value=\"", htmlspecialchars($_REQUEST['page']), "\" />\n";			echo "<input type=\"hidden\" name=\"sortkey\" value=\"", htmlspecialchars($_REQUEST['sortkey']), "\" />\n";			echo "<input type=\"hidden\" name=\"sortdir\" value=\"", htmlspecialchars($_REQUEST['sortdir']), "\" />\n";			echo "<input type=\"hidden\" name=\"strings\" value=\"", htmlspecialchars($_REQUEST['strings']), "\" />\n";			echo "<input type=\"hidden\" name=\"key\" value=\"", htmlspecialchars(serialize($_REQUEST['key'])), "\" />\n";			echo "<input type=\"submit\" name=\"yes\" value=\"{$lang['stryes']}\" />\n";			echo "<input type=\"submit\" name=\"no\" value=\"{$lang['strno']}\" />\n";			echo "</form>\n";		}		else {			$status = $data->deleteRow($_POST['table'], unserialize($_POST['key']));			if ($status == 0)				doBrowse($lang['strrowdeleted']);			elseif ($status == -2)				doBrowse($lang['strrownotunique']);			else							doBrowse($lang['strrowdeletedbad']);		}			}		/* build & return the FK information data structure 	 * used when deciding if a field should have a FK link or not*/	function &getFKInfo() {		global $data, $misc, $lang;		 		// Get the foreign key(s) information from the current table		$fkey_information = array('byconstr' => array(), 'byfield' => array());		if (isset($_REQUEST['table'])) {			$constraints = $data->getConstraintsWithFields($_REQUEST['table']);			if ($constraints->recordCount() > 0) {				/* build the common parts of the url for the FK  */				$fk_return_url = "{$misc->href}&amp;subject=table&amp;table=". urlencode($_REQUEST['table']);				if (isset($_REQUEST['page'])) $fk_return_url .= "&amp;page=" . urlencode($_REQUEST['page']);				if (isset($_REQUEST['query'])) $fk_return_url .= "&amp;query=" . urlencode($_REQUEST['query']);				if (isset($_REQUEST['search_path'])) $fk_return_url .= "&amp;search_path=" . urlencode($_REQUEST['search_path']);				/* yes, we double urlencode fk_return_url so parameters here don't 				 * overwrite real one when included in the final url */				$fkey_information['common_url'] = $misc->getHREF('schema') .'&amp;subject=table&amp;return_url=display.php?'					. urlencode($fk_return_url) .'&amp;return_desc='. urlencode($lang['strback']);				/* build the FK constraints data structure */				while (!$constraints->EOF) {					$constr =& $constraints->fields;					if ($constr['contype'] == 'f') {						if (!isset($fkey_information['byconstr'][$constr['conid']])) {							$fkey_information['byconstr'][$constr['conid']] = array (								'url_data' => 'table='. urlencode($constr['f_table']) .'&amp;schema='. urlencode($constr['f_schema']),								'fkeys' => array(),								'consrc' => $constr['consrc']							);						}						$fkey_information['byconstr'][$constr['conid']]['fkeys'][$constr['p_field']] = $constr['f_field'];						if (!isset($fkey_information['byfield'][$constr['p_field']]))							$fkey_information['byfield'][$constr['p_field']] = array();						$fkey_information['byfield'][$constr['p_field']][] = $constr['conid'];					}					$constraints->moveNext();				}			}		}		return $fkey_information;	}	/* Print table header cells 	 * @param $sortLink must be urlencoded already	 * */	function printTableHeaderCells(&$rs, $sortLink, $withOid) {		global $misc, $data, $conf;		$j = 0;		foreach ($rs->fields as $k => $v) {			if (($k === $data->id) && ( !($withOid && $conf['show_oids']) )) {				$j++;				continue;			}			$finfo = $rs->fetchField($j);			if ($sortLink === false) {				echo "<th class=\"data\">", $misc->printVal($finfo->name), "</th>\n";			}			else {				echo "<th class=\"data\"><a href=\"display.php?{$sortLink}&amp;sortkey=", ($j + 1), "&amp;sortdir=";				// Sort direction opposite to current direction, unless it's currently ''				echo ($_REQUEST['sortdir'] == 'asc' && $_REQUEST['sortkey'] == ($j + 1)) ? 'desc' : 'asc';				echo "&amp;strings=", urlencode($_REQUEST['strings']), 					"&amp;page=" . urlencode($_REQUEST['page']), "\">", 					$misc->printVal($finfo->name), "</a></th>\n";			}			$j++;		}		reset($rs->fields);	}	/* Print data-row cells */	function printTableRowCells(&$rs, &$fkey_information, $withOid) {		global $data, $misc, $conf;		$j = 0;				if (!isset($_REQUEST['strings'])) $_REQUEST['strings'] = 'collapsed';		foreach ($rs->fields as $k => $v) {			$finfo = $rs->fetchField($j++);			if (($k === $data->id) && ( !($withOid && $conf['show_oids']) )) continue;			elseif ($v !== null && $v == '') echo "<td>&nbsp;</td>";			else {				echo "<td style=\"white-space:nowrap;\">";				if (($v !== null) && isset($fkey_information['byfield'][$k])) {					foreach ($fkey_information['byfield'][$k] as $conid) {						$query_params = $fkey_information['byconstr'][$conid]['url_data'];						foreach ($fkey_information['byconstr'][$conid]['fkeys'] as $p_field => $f_field) {							$query_params .= '&amp;'. urlencode("fkey[{$f_field}]") .'='. urlencode($rs->fields[$p_field]);						}						/* $fkey_information['common_url'] is already urlencoded */						$query_params .= '&amp;'. $fkey_information['common_url'];						echo "<div style=\"display:inline-block;\">";						echo "<a class=\"fk fk_". htmlentities($conid) ."\" href=\"display.php?{$query_params}\">";						echo "<img src=\"".$misc->icon('ForeignKey')."\" style=\"vertical-align:middle;\" alt=\"[fk]\" title=\""							. htmlentities($fkey_information['byconstr'][$conid]['consrc'])							."\" />";						echo "</a>";						echo "</div>";					}					echo $misc->printVal($v, $finfo->type, array('null' => true, 'clip' => ($_REQUEST['strings']=='collapsed'), 'class' => 'fk_value'));				} else {					echo $misc->printVal($v, $finfo->type, array('null' => true, 'clip' => ($_REQUEST['strings']=='collapsed')));				}				echo "</td>";			}		}	}	/* Print the FK row, used in ajax requests */	function doBrowseFK() {		global $data, $misc, $lang;		$ops = array();		foreach($_REQUEST['fkey'] as $x => $y) {			$ops[$x] = '=';		}		$query = $data->getSelectSQL($_REQUEST['table'], array(), $_REQUEST['fkey'], $ops);		$_REQUEST['query'] = $query;		$fkinfo =& getFKInfo();		$max_pages = 1;		// Retrieve page from query.  $max_pages is returned by reference.		$rs = $data->browseQuery('SELECT', $_REQUEST['table'], $_REQUEST['query'],  			null, null, 1, 1, $max_pages);		echo "<a href=\"\" style=\"display:table-cell;\" class=\"fk_delete\"><img alt=\"[delete]\" src=\"". $misc->icon('Delete') ."\" /></a>\n";		echo "<div style=\"display:table-cell;\">";		if (is_object($rs) && $rs->recordCount() > 0) {			/* we are browsing a referenced table here			 * we should show OID if show_oids is true			 * so we give true to withOid in functions bellow			 * as 3rd paramter */					echo "<table><tr>";				printTableHeaderCells($rs, false, true);			echo "</tr>";			echo "<tr class=\"data1\">\n";				printTableRowCells($rs, $fkinfo, true);			echo "</tr>\n";			echo "</table>\n";		}		else			echo $lang['strnodata'];		echo "</div>";		exit;	}	/** 	 * Displays requested data	 */	function doBrowse($msg = '') {		global $data, $conf, $misc, $lang;		$save_history = false;		// If current page is not set, default to first page		if (!isset($_REQUEST['page']))			$_REQUEST['page'] = 1;		if (!isset($_REQUEST['nohistory']))			$save_history = true;				if (isset($_REQUEST['subject'])) {			$subject = $_REQUEST['subject'];			if (isset($_REQUEST[$subject])) $object = $_REQUEST[$subject];		}		else {			$subject = '';		}		$misc->printTrail(isset($subject) ? $subject : 'database');		/* This code is used when browsing FK in pure-xHTML (without js) */		if (isset($_REQUEST['fkey'])) {			$ops = array();			foreach($_REQUEST['fkey'] as $x => $y) {				$ops[$x] = '=';			}			$query = $data->getSelectSQL($_REQUEST['table'], array(), $_REQUEST['fkey'], $ops);			$_REQUEST['query'] = $query;		}				if (isset($object)) {			if (isset($_REQUEST['query'])) {				$_SESSION['sqlquery'] = $_REQUEST['query'];				$misc->printTitle($lang['strselect']);				$type = 'SELECT';			} else {				$misc->printTitle($lang['strbrowse']);				$type = 'TABLE';			}		} else {			$misc->printTitle($lang['strqueryresults']);			$type = 'QUERY';		}		$misc->printMsg($msg);		// If 'sortkey' is not set, default to ''		if (!isset($_REQUEST['sortkey'])) $_REQUEST['sortkey'] = '';		// If 'sortdir' is not set, default to ''		if (!isset($_REQUEST['sortdir'])) $_REQUEST['sortdir'] = '';			// If 'strings' is not set, default to collapsed 		if (!isset($_REQUEST['strings'])) $_REQUEST['strings'] = 'collapsed';			// Fetch unique row identifier, if this is a table browse request.		if (isset($object))			$key = $data->getRowIdentifier($object);		else			$key = array();				// Set the schema search path		if (isset($_REQUEST['search_path'])) {			if ($data->setSearchPath(array_map('trim',explode(',',$_REQUEST['search_path']))) != 0) {				return;			}		}		// Retrieve page from query.  $max_pages is returned by reference.		$rs = $data->browseQuery($type, 			isset($object) ? $object : null, 			isset($_REQUEST['query']) ? $_REQUEST['query'] : null, 			$_REQUEST['sortkey'], $_REQUEST['sortdir'], $_REQUEST['page'],			$conf['max_rows'], $max_pages);		$fkey_information =& getFKInfo();		// Build strings for GETs		$gets = $misc->href;		if (isset($object)) $gets .= "&amp;" . urlencode($subject) . '=' . urlencode($object);		if (isset($subject)) $gets .= "&amp;subject=" . urlencode($subject);		if (isset($_REQUEST['query'])) $gets .= "&amp;query=" . urlencode($_REQUEST['query']);		if (isset($_REQUEST['count'])) $gets .= "&amp;count=" . urlencode($_REQUEST['count']);		if (isset($_REQUEST['return_url'])) $gets .= "&amp;return_url=" . urlencode($_REQUEST['return_url']);		if (isset($_REQUEST['return_desc'])) $gets .= "&amp;return_desc=" . urlencode($_REQUEST['return_desc']);		if (isset($_REQUEST['search_path'])) $gets .= "&amp;search_path=" . urlencode($_REQUEST['search_path']);		if (isset($_REQUEST['table'])) $gets .= "&amp;table=" . urlencode($_REQUEST['table']);				// This string just contains sort info		$getsort = "sortkey=" . urlencode($_REQUEST['sortkey']) .			"&amp;sortdir=" . urlencode($_REQUEST['sortdir']);		if ($save_history && is_object($rs) && ($type == 'QUERY')) //{			$misc->saveScriptHistory($_REQUEST['query']);		if (is_object($rs) && $rs->recordCount() > 0) {			// Show page navigation			$misc->printPages($_REQUEST['page'], $max_pages, "display.php?page=%s&amp;{$gets}&amp;{$getsort}&amp;nohistory=t&amp;strings=" . urlencode($_REQUEST['strings']));			echo "<table id=\"data\">\n<tr>";			// Check that the key is actually in the result set.  This can occur for select			// operations where the key fields aren't part of the select.  XXX:  We should			// be able to support this, somehow.			foreach ($key as $v) {				// If a key column is not found in the record set, then we				// can't use the key.				if (!in_array($v, array_keys($rs->fields))) {					$key = array();					break;				}			}			// Display edit and delete actions if we have a key			if (sizeof($key) > 0)				echo "<th colspan=\"2\" class=\"data\">{$lang['stractions']}</th>\n";			/* we show OIDs only if we are in TABLE or SELECT type browsing */			printTableHeaderCells($rs, $gets, isset($object));			echo "</tr>\n";			$i = 0;					reset($rs->fields);			while (!$rs->EOF) {				$id = (($i % 2) == 0 ? '1' : '2');				echo "<tr class=\"data{$id}\">\n";				// Display edit and delete links if we have a key				if (sizeof($key) > 0) {					$key_str = '';					$has_nulls = false;					foreach ($key as $v) {						if ($rs->fields[$v] === null) {							$has_nulls = true;							break;						}						if ($key_str != '') $key_str .= '&amp;';						$key_str .= urlencode("key[{$v}]") . '=' . urlencode($rs->fields[$v]);					}					if ($has_nulls) {						echo "<td colspan=\"2\">&nbsp;</td>\n";					} else {						echo "<td class=\"opbutton{$id}\"><a href=\"display.php?action=confeditrow&amp;strings=", 							urlencode($_REQUEST['strings']), "&amp;page=", 							urlencode($_REQUEST['page']), "&amp;{$key_str}&amp;{$gets}&amp;{$getsort}\">{$lang['stredit']}</a></td>\n";						echo "<td class=\"opbutton{$id}\"><a href=\"display.php?action=confdelrow&amp;strings=", 							urlencode($_REQUEST['strings']), "&amp;page=", 							urlencode($_REQUEST['page']), "&amp;{$key_str}&amp;{$gets}&amp;{$getsort}\">{$lang['strdelete']}</a></td>\n";					}				}				print printTableRowCells($rs, $fkey_information, isset($object));				echo "</tr>\n";				$rs->moveNext();				$i++;			}			echo "</table>\n";			echo "<p>", $rs->recordCount(), " {$lang['strrows']}</p>\n";			// Show page navigation			$misc->printPages($_REQUEST['page'], $max_pages, "display.php?page=%s&amp;{$gets}&amp;{$getsort}&amp;strings=" . urlencode($_REQUEST['strings']));		}		else echo "<p>{$lang['strnodata']}</p>\n";		// Navigation links			echo "<ul class=\"navlink\">\n";		// Return		if (isset($_REQUEST['return_url']) && isset($_REQUEST['return_desc']))			echo "\t<li><a href=\"{$_REQUEST['return_url']}\">{$_REQUEST['return_desc']}</a></li>\n";		// Edit SQL link		if (isset($_REQUEST['query']))			echo "\t<li><a href=\"database.php?{$misc->href}&amp;action=sql&amp;paginate=on&amp;query=",				urlencode($_REQUEST['query']), "\">{$lang['streditsql']}</a></li>\n";		// Expand/Collapse		if ($_REQUEST['strings'] == 'expanded')			echo "\t<li><a href=\"display.php?{$gets}&amp;{$getsort}&amp;strings=collapsed&amp;page=", 				urlencode($_REQUEST['page']), "\">{$lang['strcollapse']}</a></li>\n";		else			echo "\t<li><a href=\"display.php?{$gets}&amp;{$getsort}&amp;strings=expanded&amp;page=", 				urlencode($_REQUEST['page']), "\">{$lang['strexpand']}</a></li>\n";		// Create report		if (isset($_REQUEST['query']) && ($subject !== 'report') && $conf['show_reports'] && isset($rs) && is_object($rs) && $rs->recordCount() > 0)			echo "\t<li><a href=\"reports.php?{$misc->href}&amp;action=create&amp;report_sql=",				urlencode($_REQUEST['query']), "&amp;paginate=", (isset($_REQUEST['paginate'])? urlencode($_REQUEST['paginate']):'f'), "\">{$lang['strcreatereport']}</a></li>\n";		// Create view and download		if (isset($_REQUEST['query']) && isset($rs) && is_object($rs) && $rs->recordCount() > 0) {			// Report views don't set a schema, so we need to disable create view in that case			if (isset($_REQUEST['schema'])) 				echo "\t<li><a href=\"views.php?action=create&amp;formDefinition=",					urlencode($_REQUEST['query']), "&amp;{$misc->href}\">{$lang['strcreateview']}</a></li>\n";			echo "\t<li><a href=\"dataexport.php?query=", urlencode($_REQUEST['query']);			if (isset($_REQUEST['search_path']))				echo "&amp;search_path=", urlencode($_REQUEST['search_path']);			echo "&amp;{$misc->href}\">{$lang['strdownload']}</a></li>\n";		}		// Insert		if (isset($object) && (isset($subject) && $subject == 'table'))			echo "\t<li><a href=\"tables.php?action=confinsertrow&amp;table=",				urlencode($object), "&amp;{$misc->href}\">{$lang['strinsert']}</a></li>\n";		// Refresh		echo "\t<li><a href=\"display.php?{$gets}&amp;{$getsort}&amp;strings=", urlencode($_REQUEST['strings']), 			"&amp;page=" . urlencode($_REQUEST['page']),			"\">{$lang['strrefresh']}</a></li>\n";		echo "</ul>\n";	}	/* shortcuts: this function exit the script for ajax purpose */	if ($action == 'dobrowsefk') {		doBrowseFK();	}	$scripts  = "<script src=\"libraries/js/jquery.js\" type=\"text/javascript\"></script>\n";	$scripts .= "<script src=\"js/display.js\" type=\"text/javascript\"></script>";	$scripts .= "<script type=\"text/javascript\">\n";	$scripts .= "var Display = {\n";	$scripts .= "errmsg: '". str_replace("'", "\'", $lang['strconnectionfail']) ."'\n";	$scripts .= "};\n";	$scripts .= "</script>\n";	// If a table is specified, then set the title differently	if (isset($_REQUEST['subject']) && isset($_REQUEST[$_REQUEST['subject']]))		$misc->printHeader($lang['strtables'], $scripts);	else			$misc->printHeader($lang['strqueryresults']);	$misc->printBody();	switch ($action) {		case 'editrow':			if (isset($_POST['save'])) doEditRow(false);			else doBrowse();			break;		case 'confeditrow':			doEditRow(true);			break;		case 'delrow':			if (isset($_POST['yes'])) doDelRow(false);			else doBrowse();			break;		case 'confdelrow':			doDelRow(true);			break;		default:			doBrowse();			break;	}	$misc->printFooter();?>
<?php	/**	 * List reports in a database	 *	 * $Id: reports.php,v 1.34 2008/01/09 00:19:10 ioguix Exp $	 */	// Include application functions	include_once('./libraries/lib.inc.php');	$action = (isset($_REQUEST['action'])) ? $_REQUEST['action'] : '';	/**	 * Displays a screen where they can edit a report	 */	function doEdit($msg = '') {		global $data, $reportsdb, $misc;		global $lang;		// If it's a first, load then get the data from the database		$report = $reportsdb->getReport($_REQUEST['report_id']);		if ($_REQUEST['action'] == 'edit') {						$_POST['report_name'] = $report->fields['report_name'];			$_POST['db_name'] = $report->fields['db_name'];			$_POST['descr'] = $report->fields['descr'];			$_POST['report_sql'] = $report->fields['report_sql'];			if ($report->fields['paginate'] == 't') {				$_POST['paginate'] = TRUE;			}		}		// Get a list of available databases		$databases = $data->getDatabases();		$_REQUEST['report'] = $report->fields['report_name'];		$misc->printTrail('report');		$misc->printTitle($lang['stredit']);		$misc->printMsg($msg);		echo "<form action=\"reports.php\" method=\"post\">\n";		echo $misc->form;		echo "<table style=\"width: 100%\">\n";		echo "<tr><th class=\"data left required\">{$lang['strname']}</th>\n";		echo "<td class=\"data1\"><input name=\"report_name\" size=\"32\" maxlength=\"{$data->_maxNameLen}\" value=\"",			htmlspecialchars($_POST['report_name']), "\" /></td></tr>\n";		echo "<tr><th class=\"data left required\">{$lang['strdatabase']}</th>\n";		echo "<td class=\"data1\"><select name=\"db_name\">\n";		while (!$databases->EOF) {			$dbname = $databases->fields['datname'];			echo "<option value=\"", htmlspecialchars($dbname), "\"",			($dbname == $_POST['db_name']) ? ' selected="selected"' : '', ">",				htmlspecialchars($dbname), "</option>\n";			$databases->moveNext();		}		echo "</select></td></tr>\n";		echo "<tr><th class=\"data left\">{$lang['strcomment']}</th>\n";		echo "<td class=\"data1\"><textarea style=\"width:100%;\" rows=\"5\" cols=\"50\" name=\"descr\">",			htmlspecialchars($_POST['descr']), "</textarea></td></tr>\n";		echo "<tr><th class=\"data left required\">{$lang['strsql']}</th>\n";		echo "<td class=\"data1\"><textarea style=\"width:100%;\" rows=\"15\" cols=\"50\" name=\"report_sql\">",			htmlspecialchars($_POST['report_sql']), "</textarea></td></tr>\n";		echo "</table>\n";		echo "<label for=\"paginate\"><input type=\"checkbox\" id=\"paginate\" name=\"paginate\"", (isset($_POST['paginate']) ? ' checked="checked"' : ''), " />&nbsp;{$lang['strpaginate']}</label>\n";		echo "<p><input type=\"hidden\" name=\"action\" value=\"save_edit\" />\n";		echo "<input type=\"submit\" value=\"{$lang['strsave']}\" />\n";		echo "<input type=\"submit\" name=\"cancel\" value=\"{$lang['strcancel']}\" /></p>\n";		echo "<input type=\"hidden\" name=\"report_id\" value=\"{$report->fields['report_id']}\" />\n";		echo "</form>\n";	}	/**	 * Saves changes to a report	 */	function doSaveEdit() {		global $reportsdb, $lang;		if (!isset($_POST['report_name'])) $_POST['report_name'] = '';		if (!isset($_POST['db_name'])) $_POST['db_name'] = '';		if (!isset($_POST['descr'])) $_POST['descr'] = '';		if (!isset($_POST['report_sql'])) $_POST['report_sql'] = '';		// Check that they've given a name and a definition		if ($_POST['report_name'] == '') doEdit($lang['strreportneedsname']);		elseif ($_POST['report_sql'] == '') doEdit($lang['strreportneedsdef']);		else {			$status = $reportsdb->alterReport($_POST['report_id'], $_POST['report_name'], $_POST['db_name'],								$_POST['descr'], $_POST['report_sql'], isset($_POST['paginate']));			if ($status == 0)				doDefault($lang['strreportcreated']);			else				doEdit($lang['strreportcreatedbad']);		}	}	/**	 * Display read-only properties of a report	 */	function doProperties($msg = '') {		global $data, $reportsdb, $misc;		global $lang;		$report = $reportsdb->getReport($_REQUEST['report_id']);		$_REQUEST['report'] = $report->fields['report_name'];		$misc->printTrail('report');		$misc->printTitle($lang['strproperties']);		$misc->printMsg($msg);		if ($report->recordCount() == 1) {			echo "<table>\n";			echo "<tr><th class=\"data left\">{$lang['strname']}</th>\n";			echo "<td class=\"data1\">", $misc->printVal($report->fields['report_name']), "</td></tr>\n";			echo "<tr><th class=\"data left\">{$lang['strdatabase']}</th>\n";			echo "<td class=\"data1\">", $misc->printVal($report->fields['db_name']), "</td></tr>\n";			echo "<tr><th class=\"data left\">{$lang['strcomment']}</th>\n";			echo "<td class=\"data1\">", $misc->printVal($report->fields['descr']), "</td></tr>\n";			echo "<tr><th class=\"data left\">{$lang['strsql']}</th>\n";			echo "<td class=\"data1\">", $misc->printVal($report->fields['report_sql']), "</td></tr>\n";			echo "</table>\n";		}		else echo "<p>{$lang['strinvalidparam']}</p>\n";		echo "<ul class=\"navlink\">\n\t<li><a href=\"reports.php?{$misc->href}\">{$lang['strshowallreports']}</a></li>\n";		echo "\t<li><a href=\"reports.php?action=edit&amp;{$misc->href}&amp;report_id={$report->fields['report_id']}\">{$lang['stredit']}</a></li>\n</ul>\n";	}	/**	 * Displays a screen where they can enter a new report	 */	function doCreate($msg = '') {		global $data, $reportsdb, $misc;		global $lang;		if (!isset($_REQUEST['report_name'])) $_REQUEST['report_name'] = '';		if (!isset($_REQUEST['db_name'])) $_REQUEST['db_name'] = '';		if (!isset($_REQUEST['descr'])) $_REQUEST['descr'] = '';		if (!isset($_REQUEST['report_sql'])) $_REQUEST['report_sql'] = '';		if (isset($_REQUEST['database'])) {			$_REQUEST['db_name'] = $_REQUEST['database'];			unset($_REQUEST['database']);			$misc->setForm();		}				$databases = $data->getDatabases();		$misc->printTrail('server');		$misc->printTitle($lang['strcreatereport']);		$misc->printMsg($msg);		echo "<form action=\"reports.php\" method=\"post\">\n";		echo $misc->form;		echo "<table style=\"width: 100%\">\n";		echo "<tr><th class=\"data left required\">{$lang['strname']}</th>\n";		echo "<td class=\"data1\"><input name=\"report_name\" size=\"32\" maxlength=\"{$data->_maxNameLen}\" value=\"",			htmlspecialchars($_REQUEST['report_name']), "\" /></td></tr>\n";		echo "<tr><th class=\"data left required\">{$lang['strdatabase']}</th>\n";		echo "<td class=\"data1\"><select name=\"db_name\">\n";		while (!$databases->EOF) {			$dbname = $databases->fields['datname'];			echo "<option value=\"", htmlspecialchars($dbname), "\"",			($dbname == $_REQUEST['db_name']) ? ' selected="selected"' : '', ">",				htmlspecialchars($dbname), "</option>\n";			$databases->moveNext();		}		echo "</select></td></tr>\n";		echo "<tr><th class=\"data left\">{$lang['strcomment']}</th>\n";		echo "<td class=\"data1\"><textarea style=\"width:100%;\" rows=\"5\" cols=\"50\" name=\"descr\">",			htmlspecialchars($_REQUEST['descr']), "</textarea></td></tr>\n";		echo "<tr><th class=\"data left required\">{$lang['strsql']}</th>\n";		echo "<td class=\"data1\"><textarea style=\"width:100%;\" rows=\"15\" cols=\"50\" name=\"report_sql\">",			htmlspecialchars($_REQUEST['report_sql']), "</textarea></td></tr>\n";		echo "</table>\n";		echo "<label for=\"paginate\"><input type=\"checkbox\" id=\"paginate\" name=\"paginate\"", (isset($_REQUEST['paginate']) ? ' checked="checked"' : ''), " />&nbsp;{$lang['strpaginate']}</label>\n";		echo "<p><input type=\"hidden\" name=\"action\" value=\"save_create\" />\n";		echo "<input type=\"submit\" value=\"{$lang['strsave']}\" />\n";		echo "<input type=\"submit\" name=\"cancel\" value=\"{$lang['strcancel']}\" /></p>\n";		echo "</form>\n";	}	/**	 * Actually creates the new report in the database	 */	function doSaveCreate() {		global $reportsdb, $lang;		if (!isset($_POST['report_name'])) $_POST['report_name'] = '';		if (!isset($_POST['db_name'])) $_POST['db_name'] = '';		if (!isset($_POST['descr'])) $_POST['descr'] = '';		if (!isset($_POST['report_sql'])) $_POST['report_sql'] = '';		// Check that they've given a name and a definition		if ($_POST['report_name'] == '') doCreate($lang['strreportneedsname']);		elseif ($_POST['report_sql'] == '') doCreate($lang['strreportneedsdef']);		else {			$status = $reportsdb->createReport($_POST['report_name'], $_POST['db_name'],								$_POST['descr'], $_POST['report_sql'], isset($_POST['paginate']));			if ($status == 0)				doDefault($lang['strreportcreated']);			else				doCreate($lang['strreportcreatedbad']);		}	}	/**	 * Show confirmation of drop and perform actual drop	 */	function doDrop($confirm) {		global $reportsdb, $misc;		global $lang;		if ($confirm) {			// Fetch report from the database			$report = $reportsdb->getReport($_REQUEST['report_id']);			$_REQUEST['report'] = $report->fields['report_name'];			$misc->printTrail('report');			$misc->printTitle($lang['strdrop']);			echo "<p>", sprintf($lang['strconfdropreport'], $misc->printVal($report->fields['report_name'])), "</p>\n";			echo "<form action=\"reports.php\" method=\"post\">\n";			echo $misc->form;			echo "<input type=\"hidden\" name=\"action\" value=\"drop\" />\n";			echo "<input type=\"hidden\" name=\"report_id\" value=\"", htmlspecialchars($_REQUEST['report_id']), "\" />\n";			echo "<input type=\"submit\" name=\"drop\" value=\"{$lang['strdrop']}\" />\n";			echo "<input type=\"submit\" name=\"cancel\" value=\"{$lang['strcancel']}\" />\n";			echo "</form>\n";		}		else {			$status = $reportsdb->dropReport($_POST['report_id']);			if ($status == 0)				doDefault($lang['strreportdropped']);			else				doDefault($lang['strreportdroppedbad']);		}	}	/**	 * Show default list of reports in the database	 */	function doDefault($msg = '') {		global $data, $misc, $reportsdb;		global $lang;		$misc->printTrail('server');		$misc->printTabs('server','reports');		$misc->printMsg($msg);				$reports = $reportsdb->getReports();		$columns = array(			'report' => array(				'title' => $lang['strreport'],				'field' => field('report_name'),				'url'   => "reports.php?action=properties&amp;{$misc->href}&amp;",				'vars'  => array('report_id' => 'report_id'),			),			'database' => array(				'title' => $lang['strdatabase'],				'field' => field('db_name'),			),			'created' => array(				'title' => $lang['strcreated'],				'field' => field('date_created'),			),			'actions' => array(				'title' => $lang['stractions'],			),			'comment' => array(				'title' => $lang['strcomment'],				'field' => field('descr'),			),		);				$return_url = urlencode("reports.php?{$misc->href}");				$actions = array(			'run' => array(				'title' => $lang['strexecute'],				'url'   => "sql.php?subject=report&amp;{$misc->href}&amp;return_url={$return_url}&amp;return_desc=".urlencode($lang['strback'])."&amp;",				'vars'  => array('report' => 'report_name', 'database' => 'db_name', 'reportid' => 'report_id', 'paginate' => 'paginate'),			),			'edit' => array(				'title' => $lang['stredit'],				'url'   => "reports.php?action=edit&amp;{$misc->href}&amp;",				'vars'  => array('report_id' => 'report_id'),			),			'drop' => array(				'title' => $lang['strdrop'],				'url'   => "reports.php?action=confirm_drop&amp;{$misc->href}&amp;",				'vars'  => array('report_id' => 'report_id'),			),		);				$misc->printTable($reports, $columns, $actions, $lang['strnoreports']);				echo "<p><a class=\"navlink\" href=\"reports.php?action=create&amp;{$misc->href}\">{$lang['strcreatereport']}</a></p>\n";	}		$misc->printHeader($lang['strreports']);	$misc->printBody();	// Create a database accessor for the reports database	include_once('./classes/Reports.php');	$reportsdb = new Reports($status);	if ($status != 0) {		$misc->printTrail('server');		$misc->printTabs('server','reports');		$misc->printMsg($lang['strnoreportsdb']);	}	else {		switch ($action) {			case 'save_edit':				if (isset($_POST['cancel'])) doDefault();				else doSaveEdit();				break;			case 'edit':				doEdit();				break;			case 'properties':				doProperties();				break;			case 'save_create':				if (isset($_POST['cancel'])) doDefault();				else doSaveCreate();				break;			case 'create':				doCreate();				break;			case 'drop':				if (isset($_POST['drop'])) doDrop(false);				else doDefault();				break;			case 'confirm_drop':				doDrop(true);				break;			default:				doDefault();				break;		}	}	$misc->printFooter();?>
<?php/** * PostgreSQL 8.4 support * * $Id: Postgres82.php,v 1.10 2007/12/28 16:21:25 ioguix Exp $ */include_once('./classes/database/Postgres.php');class Postgres84 extends Postgres {	var $major_version = 8.4;	// List of all legal privileges that can be applied to different types	// of objects.	var $privlist = array(  		'table' => array('SELECT', 'INSERT', 'UPDATE', 'DELETE', 'REFERENCES', 'TRIGGER', 'ALL PRIVILEGES'),  		'view' => array('SELECT', 'INSERT', 'UPDATE', 'DELETE', 'REFERENCES', 'TRIGGER', 'ALL PRIVILEGES'),  		'sequence' => array('SELECT', 'UPDATE', 'ALL PRIVILEGES'),  		'database' => array('CREATE', 'TEMPORARY', 'CONNECT', 'ALL PRIVILEGES'),  		'function' => array('EXECUTE', 'ALL PRIVILEGES'),  		'language' => array('USAGE', 'ALL PRIVILEGES'),  		'schema' => array('CREATE', 'USAGE', 'ALL PRIVILEGES'),  		'tablespace' => array('CREATE', 'ALL PRIVILEGES'),		'column' => array('SELECT', 'INSERT', 'UPDATE', 'REFERENCES','ALL PRIVILEGES')	);	/**	 * Constructor	 * @param $conn The database connection	 */	function Postgres84($conn) {		$this->Postgres($conn);	}	// Help functions	function getHelpPages() {		include_once('./help/PostgresDoc84.php');		return $this->help_page;	}	// Databse functions	/**	 * Grabs a list of triggers on a table	 * @param $table The name of a table whose triggers to retrieve	 * @return A recordset	 */	function getTriggers($table = '') {		$c_schema = $this->_schema;		$this->clean($c_schema);		$this->clean($table);		$sql = "SELECT				t.tgname, pg_catalog.pg_get_triggerdef(t.oid) AS tgdef,				CASE WHEN t.tgenabled = 'D' THEN FALSE ELSE TRUE END AS tgenabled, p.oid AS prooid,				p.proname || ' (' || pg_catalog.oidvectortypes(p.proargtypes) || ')' AS proproto,				ns.nspname AS pronamespace			FROM pg_catalog.pg_trigger t, pg_catalog.pg_proc p, pg_catalog.pg_namespace ns			WHERE t.tgrelid = (SELECT oid FROM pg_catalog.pg_class WHERE relname='{$table}'				AND relnamespace=(SELECT oid FROM pg_catalog.pg_namespace WHERE nspname='{$c_schema}'))				AND (NOT tgisconstraint OR NOT EXISTS						(SELECT 1 FROM pg_catalog.pg_depend d    JOIN pg_catalog.pg_constraint c							ON (d.refclassid = c.tableoid AND d.refobjid = c.oid)						WHERE d.classid = t.tableoid AND d.objid = t.oid AND d.deptype = 'i' AND c.contype = 'f'))				AND p.oid=t.tgfoid				AND p.pronamespace = ns.oid";		return $this->selectSet($sql);	}	/**	 * Searches all system catalogs to find objects that match a certain name.	 * @param $term The search term	 * @param $filter The object type to restrict to ('' means no restriction)	 * @return A recordset	 */	function findObject($term, $filter) {		global $conf;		// Escape search term for ILIKE match		$term = str_replace('_', '\\_', $term);		$term = str_replace('%', '\\%', $term);		$this->clean($term);		$this->clean($filter);		// Exclude system relations if necessary		if (!$conf['show_system']) {			// XXX: The mention of information_schema here is in the wrong place, but			// it's the quickest fix to exclude the info schema from 7.4			$where = " AND pn.nspname NOT LIKE 'pg\\\\_%' AND pn.nspname != 'information_schema'";			$lan_where = "AND pl.lanispl";		}		else {			$where = '';			$lan_where = '';	}		// Apply outer filter		$sql = '';		if ($filter != '') {			$sql = "SELECT * FROM (";		}		$sql .= "			SELECT 'SCHEMA' AS type, oid, NULL AS schemaname, NULL AS relname, nspname AS name				FROM pg_catalog.pg_namespace pn WHERE nspname ILIKE '%{$term}%' {$where}			UNION ALL			SELECT CASE WHEN relkind='r' THEN 'TABLE' WHEN relkind='v' THEN 'VIEW' WHEN relkind='S' THEN 'SEQUENCE' END, pc.oid,				pn.nspname, NULL, pc.relname FROM pg_catalog.pg_class pc, pg_catalog.pg_namespace pn				WHERE pc.relnamespace=pn.oid AND relkind IN ('r', 'v', 'S') AND relname ILIKE '%{$term}%' {$where}			UNION ALL			SELECT CASE WHEN pc.relkind='r' THEN 'COLUMNTABLE' ELSE 'COLUMNVIEW' END, NULL, pn.nspname, pc.relname, pa.attname FROM pg_catalog.pg_class pc, pg_catalog.pg_namespace pn,				pg_catalog.pg_attribute pa WHERE pc.relnamespace=pn.oid AND pc.oid=pa.attrelid				AND pa.attname ILIKE '%{$term}%' AND pa.attnum > 0 AND NOT pa.attisdropped AND pc.relkind IN ('r', 'v') {$where}			UNION ALL			SELECT 'FUNCTION', pp.oid, pn.nspname, NULL, pp.proname || '(' || pg_catalog.oidvectortypes(pp.proargtypes) || ')' FROM pg_catalog.pg_proc pp, pg_catalog.pg_namespace pn				WHERE pp.pronamespace=pn.oid AND NOT pp.proisagg AND pp.proname ILIKE '%{$term}%' {$where}			UNION ALL			SELECT 'INDEX', NULL, pn.nspname, pc.relname, pc2.relname FROM pg_catalog.pg_class pc, pg_catalog.pg_namespace pn,				pg_catalog.pg_index pi, pg_catalog.pg_class pc2 WHERE pc.relnamespace=pn.oid AND pc.oid=pi.indrelid				AND pi.indexrelid=pc2.oid				AND NOT EXISTS (					SELECT 1 FROM pg_catalog.pg_depend d JOIN pg_catalog.pg_constraint c					ON (d.refclassid = c.tableoid AND d.refobjid = c.oid)					WHERE d.classid = pc2.tableoid AND d.objid = pc2.oid AND d.deptype = 'i' AND c.contype IN ('u', 'p')				)				AND pc2.relname ILIKE '%{$term}%' {$where}			UNION ALL			SELECT 'CONSTRAINTTABLE', NULL, pn.nspname, pc.relname, pc2.conname FROM pg_catalog.pg_class pc, pg_catalog.pg_namespace pn,				pg_catalog.pg_constraint pc2 WHERE pc.relnamespace=pn.oid AND pc.oid=pc2.conrelid AND pc2.conrelid != 0				AND CASE WHEN pc2.contype IN ('f', 'c') THEN TRUE ELSE NOT EXISTS (					SELECT 1 FROM pg_catalog.pg_depend d JOIN pg_catalog.pg_constraint c					ON (d.refclassid = c.tableoid AND d.refobjid = c.oid)					WHERE d.classid = pc2.tableoid AND d.objid = pc2.oid AND d.deptype = 'i' AND c.contype IN ('u', 'p')				) END				AND pc2.conname ILIKE '%{$term}%' {$where}			UNION ALL			SELECT 'CONSTRAINTDOMAIN', pt.oid, pn.nspname, pt.typname, pc.conname FROM pg_catalog.pg_type pt, pg_catalog.pg_namespace pn,				pg_catalog.pg_constraint pc WHERE pt.typnamespace=pn.oid AND pt.oid=pc.contypid AND pc.contypid != 0				AND pc.conname ILIKE '%{$term}%' {$where}			UNION ALL			SELECT 'TRIGGER', NULL, pn.nspname, pc.relname, pt.tgname FROM pg_catalog.pg_class pc, pg_catalog.pg_namespace pn,				pg_catalog.pg_trigger pt WHERE pc.relnamespace=pn.oid AND pc.oid=pt.tgrelid					AND (NOT pt.tgisconstraint OR NOT EXISTS					(SELECT 1 FROM pg_catalog.pg_depend d JOIN pg_catalog.pg_constraint c					ON (d.refclassid = c.tableoid AND d.refobjid = c.oid)					WHERE d.classid = pt.tableoid AND d.objid = pt.oid AND d.deptype = 'i' AND c.contype = 'f'))				AND pt.tgname ILIKE '%{$term}%' {$where}			UNION ALL			SELECT 'RULETABLE', NULL, pn.nspname AS schemaname, c.relname AS tablename, r.rulename FROM pg_catalog.pg_rewrite r				JOIN pg_catalog.pg_class c ON c.oid = r.ev_class				LEFT JOIN pg_catalog.pg_namespace pn ON pn.oid = c.relnamespace				WHERE c.relkind='r' AND r.rulename != '_RETURN' AND r.rulename ILIKE '%{$term}%' {$where}			UNION ALL			SELECT 'RULEVIEW', NULL, pn.nspname AS schemaname, c.relname AS tablename, r.rulename FROM pg_catalog.pg_rewrite r				JOIN pg_catalog.pg_class c ON c.oid = r.ev_class				LEFT JOIN pg_catalog.pg_namespace pn ON pn.oid = c.relnamespace				WHERE c.relkind='v' AND r.rulename != '_RETURN' AND r.rulename ILIKE '%{$term}%' {$where}		";		// Add advanced objects if show_advanced is set		if ($conf['show_advanced']) {			$sql .= "				UNION ALL				SELECT CASE WHEN pt.typtype='d' THEN 'DOMAIN' ELSE 'TYPE' END, pt.oid, pn.nspname, NULL,					pt.typname FROM pg_catalog.pg_type pt, pg_catalog.pg_namespace pn					WHERE pt.typnamespace=pn.oid AND typname ILIKE '%{$term}%'					AND (pt.typrelid = 0 OR (SELECT c.relkind = 'c' FROM pg_catalog.pg_class c WHERE c.oid = pt.typrelid))					{$where}			 	UNION ALL				SELECT 'OPERATOR', po.oid, pn.nspname, NULL, po.oprname FROM pg_catalog.pg_operator po, pg_catalog.pg_namespace pn					WHERE po.oprnamespace=pn.oid AND oprname ILIKE '%{$term}%' {$where}				UNION ALL				SELECT 'CONVERSION', pc.oid, pn.nspname, NULL, pc.conname FROM pg_catalog.pg_conversion pc,					pg_catalog.pg_namespace pn WHERE pc.connamespace=pn.oid AND conname ILIKE '%{$term}%' {$where}				UNION ALL				SELECT 'LANGUAGE', pl.oid, NULL, NULL, pl.lanname FROM pg_catalog.pg_language pl					WHERE lanname ILIKE '%{$term}%' {$lan_where}				UNION ALL				SELECT DISTINCT ON (p.proname) 'AGGREGATE', p.oid, pn.nspname, NULL, p.proname FROM pg_catalog.pg_proc p					LEFT JOIN pg_catalog.pg_namespace pn ON p.pronamespace=pn.oid					WHERE p.proisagg AND p.proname ILIKE '%{$term}%' {$where}				UNION ALL				SELECT DISTINCT ON (po.opcname) 'OPCLASS', po.oid, pn.nspname, NULL, po.opcname FROM pg_catalog.pg_opclass po,					pg_catalog.pg_namespace pn WHERE po.opcnamespace=pn.oid					AND po.opcname ILIKE '%{$term}%' {$where}			";		}		// Otherwise just add domains		else {			$sql .= "				UNION ALL				SELECT 'DOMAIN', pt.oid, pn.nspname, NULL,					pt.typname FROM pg_catalog.pg_type pt, pg_catalog.pg_namespace pn					WHERE pt.typnamespace=pn.oid AND pt.typtype='d' AND typname ILIKE '%{$term}%'					AND (pt.typrelid = 0 OR (SELECT c.relkind = 'c' FROM pg_catalog.pg_class c WHERE c.oid = pt.typrelid))					{$where}			";		}		if ($filter != '') {			// We use like to make RULE, CONSTRAINT and COLUMN searches work			$sql .= ") AS sub WHERE type LIKE '{$filter}%' ";		}		$sql .= "ORDER BY type, schemaname, relname, name";		return $this->selectSet($sql);	}	// Capabilities}?>
<?php	/**	 * Manage sequences in a database	 *	 * $Id: sequences.php,v 1.49 2007/12/15 22:21:54 ioguix Exp $	 */	// Include application functions	include_once('./libraries/lib.inc.php');	$action = (isset($_REQUEST['action'])) ? $_REQUEST['action'] : '';	if (!isset($msg)) $msg = '';	/**	 * Display list of all sequences in the database/schema	 */	function doDefault($msg = '')	{		global $data, $conf, $misc;		global $lang;		$misc->printTrail('schema');		$misc->printTabs('schema', 'sequences');		$misc->printMsg($msg);		// Get all sequences		$sequences = $data->getSequences();		$columns = array(			'sequence' => array(				'title' => $lang['strsequence'],				'field' => field('seqname'),				'url'   => "sequences.php?action=properties&amp;{$misc->href}&amp;",				'vars'  => array('sequence' => 'seqname'),			),			'owner' => array(				'title' => $lang['strowner'],				'field' => field('seqowner'),			),			'actions' => array(				'title' => $lang['stractions'],			),			'comment' => array(				'title' => $lang['strcomment'],				'field' => field('seqcomment'),			),		);		$actions = array(			'multiactions' => array(				'keycols' => array('sequence' => 'seqname'),				'url' => 'sequences.php',			),			'alter' => array(				'title' => $lang['stralter'],				'url'   => "sequences.php?action=confirm_alter&amp;{$misc->href}&amp;subject=sequence&amp;",				'vars'  => array('sequence' => 'seqname'),			),			'drop' => array(				'title' => $lang['strdrop'],				'url'   => "sequences.php?action=confirm_drop&amp;{$misc->href}&amp;",				'vars'  => array('sequence' => 'seqname'),				'multiaction' => 'confirm_drop',			),			'privileges' => array(				'title' => $lang['strprivileges'],				'url'   => "privileges.php?{$misc->href}&amp;subject=sequence&amp;",				'vars'  => array('sequence' => 'seqname'),			),		);		$misc->printTable($sequences, $columns, $actions, $lang['strnosequences']);		echo "<p><a class=\"navlink\" href=\"sequences.php?action=create&amp;{$misc->href}\">{$lang['strcreatesequence']}</a></p>\n";	}	/**	 * Generate XML for the browser tree.	 */	function doTree() {		global $misc, $data;		$sequences = $data->getSequences();		$reqvars = $misc->getRequestVars('sequence');		$attrs = array(			'text'   => field('seqname'),			'icon'   => 'Sequence',			'toolTip'=> field('seqcomment'),			'action' => url('sequences.php',							$reqvars,							array (								'action' => 'properties',								'sequence' => field('seqname')							)						)		);		$misc->printTreeXML($sequences, $attrs);		exit;	}	/**	 * Display the properties of a sequence	 */	function doProperties($msg = '') {		global $data, $misc;		global $lang;		$misc->printTrail('sequence');		$misc->printTitle($lang['strproperties'],'pg.sequence');		$misc->printMsg($msg);		// Fetch the sequence information		$sequence = $data->getSequence($_REQUEST['sequence']);		if (is_object($sequence) && $sequence->recordCount() > 0) {			$sequence->fields['is_cycled'] = $data->phpBool($sequence->fields['is_cycled']);			$sequence->fields['is_called'] = $data->phpBool($sequence->fields['is_called']);			// Show comment if any			if ($sequence->fields['seqcomment'] !== null)				echo "<p class=\"comment\">", $misc->printVal($sequence->fields['seqcomment']), "</p>\n";			echo "<table border=\"0\">";			echo "<tr><th class=\"data\">{$lang['strname']}</th>";			if ($data->hasAlterSequenceStart()) {				echo "<th class=\"data\">{$lang['strstartvalue']}</th>";			}			echo "<th class=\"data\">{$lang['strlastvalue']}</th>";			echo "<th class=\"data\">{$lang['strincrementby']}</th>";			echo "<th class=\"data\">{$lang['strmaxvalue']}</th>";			echo "<th class=\"data\">{$lang['strminvalue']}</th>";			echo "<th class=\"data\">{$lang['strcachevalue']}</th>";			echo "<th class=\"data\">{$lang['strlogcount']}</th>";			echo "<th class=\"data\">{$lang['strcancycle']}</th>";			echo "<th class=\"data\">{$lang['striscalled']}</th></tr>";			echo "<tr>";			echo "<td class=\"data1\">", $misc->printVal($sequence->fields['seqname']), "</td>";			if ($data->hasAlterSequenceStart()) {				echo "<td class=\"data1\">", $misc->printVal($sequence->fields['start_value']), "</td>";			}			echo "<td class=\"data1\">", $misc->printVal($sequence->fields['last_value']), "</td>";			echo "<td class=\"data1\">", $misc->printVal($sequence->fields['increment_by']), "</td>";			echo "<td class=\"data1\">", $misc->printVal($sequence->fields['max_value']), "</td>";			echo "<td class=\"data1\">", $misc->printVal($sequence->fields['min_value']), "</td>";			echo "<td class=\"data1\">", $misc->printVal($sequence->fields['cache_value']), "</td>";			echo "<td class=\"data1\">", $misc->printVal($sequence->fields['log_cnt']), "</td>";			echo "<td class=\"data1\">", ($sequence->fields['is_cycled'] ? $lang['stryes'] : $lang['strno']), "</td>";			echo "<td class=\"data1\">", ($sequence->fields['is_called'] ? $lang['stryes'] : $lang['strno']), "</td>";			echo "</tr>";			echo "</table>";			echo "<ul class=\"navlink\">\n";			echo "\t<li><a href=\"sequences.php?action=confirm_alter&amp;{$misc->href}&amp;sequence=", urlencode($sequence->fields['seqname']), "\">{$lang['stralter']}</a></li>\n";			echo "\t<li><a href=\"sequences.php?action=confirm_setval&amp;{$misc->href}&amp;sequence=", urlencode($sequence->fields['seqname']), "\">{$lang['strsetval']}</a></li>\n";			echo "\t<li><a href=\"sequences.php?action=nextval&amp;{$misc->href}&amp;sequence=", urlencode($sequence->fields['seqname']), "\">{$lang['strnextval']}</a></li>\n";			if ($data->hasAlterSequenceStart()) {				echo "\t<li><a href=\"sequences.php?action=restart&amp;{$misc->href}&amp;sequence=", urlencode($sequence->fields['seqname']), "\">{$lang['strrestart']}</a></li>\n";			}			echo "\t<li><a href=\"sequences.php?action=reset&amp;{$misc->href}&amp;sequence=", urlencode($sequence->fields['seqname']), "\">{$lang['strreset']}</a></li>\n";			echo "\t<li><a href=\"sequences.php?{$misc->href}\">{$lang['strshowallsequences']}</a></li>\n</ul>\n";		}		else echo "<p>{$lang['strnodata']}</p>\n";	}	/**	 * Drop a sequence	 */	function doDrop($confirm, $msg = '') {		global $data, $misc;		global $lang;		if (empty($_REQUEST['sequence']) && empty($_REQUEST['ma'])) {			doDefault($lang['strspecifysequencetodrop']);			exit();		}				if ($confirm) {			$misc->printTrail('sequence');			$misc->printTitle($lang['strdrop'],'pg.sequence.drop');			$misc->printMsg($msg);						echo "<form action=\"sequences.php\" method=\"post\">\n";						//If multi drop			if (isset($_REQUEST['ma'])) {				foreach($_REQUEST['ma'] as $v) {					$a = unserialize(htmlspecialchars_decode($v, ENT_QUOTES));					echo "<p>", sprintf($lang['strconfdropsequence'], $misc->printVal($a['sequence'])), "</p>\n";					printf('<input type="hidden" name="sequence[]" value="%s" />', htmlspecialchars($a['sequence']));				}			} else {				echo "<p>", sprintf($lang['strconfdropsequence'], $misc->printVal($_REQUEST['sequence'])), "</p>\n";				echo "<input type=\"hidden\" name=\"sequence\" value=\"", htmlspecialchars($_REQUEST['sequence']), "\" />\n";			}			echo "<p><input type=\"checkbox\" id=\"cascade\" name=\"cascade\" /> <label for=\"cascade\">{$lang['strcascade']}</label></p>\n";			echo "<p><input type=\"hidden\" name=\"action\" value=\"drop\" />\n";			echo $misc->form;			echo "<input type=\"submit\" name=\"drop\" value=\"{$lang['strdrop']}\" />\n";			echo "<input type=\"submit\" name=\"cancel\" value=\"{$lang['strcancel']}\" /></p>\n";			echo "</form>\n";		}		else {			if (is_array($_POST['sequence'])) {				$msg='';				$status = $data->beginTransaction();				if ($status == 0) {					foreach($_POST['sequence'] as $s) {						$status = $data->dropSequence($s, isset($_POST['cascade']));						if ($status == 0)							$msg.= sprintf('%s: %s<br />', htmlentities($s), $lang['strsequencedropped']);						else {							$data->endTransaction();							doDefault(sprintf('%s%s: %s<br />', $msg, htmlentities($s), $lang['strsequencedroppedbad']));							return;						}					}				}				if($data->endTransaction() == 0) {					// Everything went fine, back to the Default page....					$_reload_browser = true;					doDefault($msg);				}				else doDefault($lang['strsequencedroppedbad']);			}			else{				$status = $data->dropSequence($_POST['sequence'], isset($_POST['cascade']));				if ($status == 0) {					$_reload_browser = true;					doDefault($lang['strsequencedropped']);				}				else					doDrop(true, $lang['strsequencedroppedbad']);			}		}	}	/**	 * Displays a screen where they can enter a new sequence	 */	function doCreateSequence($msg = '') {		global $data, $misc;		global $lang;		if (!isset($_POST['formSequenceName'])) $_POST['formSequenceName'] = '';		if (!isset($_POST['formIncrement'])) $_POST['formIncrement'] = '';		if (!isset($_POST['formMinValue'])) $_POST['formMinValue'] = '';		if (!isset($_POST['formMaxValue'])) $_POST['formMaxValue'] = '';		if (!isset($_POST['formStartValue'])) $_POST['formStartValue'] = '';		if (!isset($_POST['formCacheValue'])) $_POST['formCacheValue'] = '';		$misc->printTrail('schema');		$misc->printTitle($lang['strcreatesequence'],'pg.sequence.create');		$misc->printMsg($msg);		echo "<form action=\"sequences.php\" method=\"post\">\n";		echo "<table>\n";		echo "<tr><th class=\"data left required\">{$lang['strname']}</th>\n";		echo "<td class=\"data1\"><input name=\"formSequenceName\" size=\"32\" maxlength=\"{$data->_maxNameLen}\" value=\"",			htmlspecialchars($_POST['formSequenceName']), "\" /></td></tr>\n";		echo "<tr><th class=\"data left\">{$lang['strincrementby']}</th>\n";		echo "<td class=\"data1\"><input name=\"formIncrement\" size=\"5\" value=\"",			htmlspecialchars($_POST['formIncrement']), "\" /> </td></tr>\n";		echo "<tr><th class=\"data left\">{$lang['strminvalue']}</th>\n";		echo "<td class=\"data1\"><input name=\"formMinValue\" size=\"5\" value=\"",			htmlspecialchars($_POST['formMinValue']), "\" /></td></tr>\n";		echo "<tr><th class=\"data left\">{$lang['strmaxvalue']}</th>\n";		echo "<td class=\"data1\"><input name=\"formMaxValue\" size=\"5\" value=\"",			htmlspecialchars($_POST['formMaxValue']), "\" /></td></tr>\n";		echo "<tr><th class=\"data left\">{$lang['strstartvalue']}</th>\n";		echo "<td class=\"data1\"><input name=\"formStartValue\" size=\"5\" value=\"",			htmlspecialchars($_POST['formStartValue']), "\" /></td></tr>\n";		echo "<tr><th class=\"data left\">{$lang['strcachevalue']}</th>\n";		echo "<td class=\"data1\"><input name=\"formCacheValue\" size=\"5\" value=\"",			htmlspecialchars($_POST['formCacheValue']), "\" /></td></tr>\n";		echo "<tr><th class=\"data left\"><label for=\"formCycledValue\">{$lang['strcancycle']}</label></th>\n";		echo "<td class=\"data1\"><input type=\"checkbox\" id=\"formCycledValue\" name=\"formCycledValue\" ",			(isset($_POST['formCycledValue']) ? ' checked="checked"' : ''), " /></td></tr>\n";		echo "</table>\n";		echo "<p><input type=\"hidden\" name=\"action\" value=\"save_create_sequence\" />\n";		echo $misc->form;		echo "<input type=\"submit\" name=\"create\" value=\"{$lang['strcreate']}\" />\n";		echo "<input type=\"submit\" name=\"cancel\" value=\"{$lang['strcancel']}\" /></p>\n";		echo "</form>\n";	}	/**	 * Actually creates the new sequence in the database	 */	function doSaveCreateSequence() {		global $data;		global $lang;		// Check that they've given a name and at least one column		if ($_POST['formSequenceName'] == '') doCreateSequence($lang['strsequenceneedsname']);		else {			$status = $data->createSequence($_POST['formSequenceName'],				$_POST['formIncrement'], $_POST['formMinValue'],				$_POST['formMaxValue'], $_POST['formStartValue'],				$_POST['formCacheValue'], isset($_POST['formCycledValue']));			if ($status == 0) {				doDefault($lang['strsequencecreated']);			} else {				doCreateSequence($lang['strsequencecreatedbad']);			}		}	}	/**	 * Restarts a sequence	 */	function doRestart() {		global $data;		global $lang;		$status = $data->restartSequence($_REQUEST['sequence']);		if ($status == 0)			doProperties($lang['strsequencerestart']);		else			doProperties($lang['strsequencerestartbad']);	}	/**	 * Resets a sequence	 */	function doReset() {		global $data;		global $lang;		$status = $data->resetSequence($_REQUEST['sequence']);		if ($status == 0)			doProperties($lang['strsequencereset']);		else			doProperties($lang['strsequenceresetbad']);	}	/**	 * Set Nextval of a sequence	 */	function doNextval() {		global $data;		global $lang;		$status = $data->nextvalSequence($_REQUEST['sequence']);		if ($status == 0)			doProperties($lang['strsequencenextval']);		else			doProperties($lang['strsequencenextvalbad']);	}	/**	 * Function to save after 'setval'ing a sequence	 */	function doSaveSetval() {		global $data, $lang, $_reload_browser;		$status = $data->setvalSequence($_POST['sequence'], $_POST['nextvalue']);		if ($status == 0)			doProperties($lang['strsequencesetval']);		else			doProperties($lang['strsequencesetvalbad']);	}	/**	 * Function to allow 'setval'ing of a sequence	 */	function doSetval($msg = '') {		global $data, $misc;		global $lang;		$misc->printTrail('sequence');		$misc->printTitle($lang['strsetval'], 'pg.sequence');		$misc->printMsg($msg);		// Fetch the sequence information		$sequence = $data->getSequence($_REQUEST['sequence']);		if (is_object($sequence) && $sequence->recordCount() > 0) {			echo "<form action=\"sequences.php\" method=\"post\">\n";			echo "<table border=\"0\">";			echo "<tr><th class=\"data left required\">{$lang['strlastvalue']}</th>\n";			echo "<td class=\"data1\">";			echo "<input name=\"nextvalue\" size=\"32\" maxlength=\"{$data->_maxNameLen}\" value=\"",				$misc->printVal($sequence->fields['last_value']), "\" /></td></tr>\n";			echo "</table>\n";			echo "<p><input type=\"hidden\" name=\"action\" value=\"setval\" />\n";			echo "<input type=\"hidden\" name=\"sequence\" value=\"", htmlspecialchars($_REQUEST['sequence']), "\" />\n";			echo $misc->form;			echo "<input type=\"submit\" name=\"setval\" value=\"{$lang['strsetval']}\" />\n";			echo "<input type=\"submit\" name=\"cancel\" value=\"{$lang['strcancel']}\" /></p>\n";			echo "</form>\n";		}		else echo "<p>{$lang['strnodata']}</p>\n";	}	/**	 * Function to save after altering a sequence	 */	function doSaveAlter() {		global $data, $lang, $_reload_browser, $misc;		if (!isset($_POST['owner'])) $_POST['owner'] = null;		if (!isset($_POST['newschema'])) $_POST['newschema'] = null;		if (!isset($_POST['formIncrement'])) $_POST['formIncrement'] = null;		if (!isset($_POST['formMinValue'])) $_POST['formMinValue'] = null;		if (!isset($_POST['formMaxValue'])) $_POST['formMaxValue'] = null;		if (!isset($_POST['formStartValue'])) $_POST['formStartValue'] = null;		if (!isset($_POST['formRestartValue'])) $_POST['formRestartValue'] = null;		if (!isset($_POST['formCacheValue'])) $_POST['formCacheValue'] = null;		if (!isset($_POST['formCycledValue'])) $_POST['formCycledValue'] = null;		$status = $data->alterSequence($_POST['sequence'], $_POST['name'], $_POST['comment'], $_POST['owner'],			$_POST['newschema'], $_POST['formIncrement'], $_POST['formMinValue'], $_POST['formMaxValue'],			$_POST['formRestartValue'], $_POST['formCacheValue'], isset($_POST['formCycledValue']), $_POST['formStartValue']);		if ($status == 0) {			if ($_POST['sequence'] != $_POST['name']) {				// Jump them to the new view name				$_REQUEST['sequence'] = $_POST['name'];				// Force a browser reload				$_reload_browser = true;			}			if (!empty($_POST['newschema']) && ($_POST['newschema'] != $data->_schema)) {				// Jump them to the new sequence schema				$misc->setCurrentSchema($_POST['newschema']);				$_reload_browser = true;			 }			doProperties($lang['strsequencealtered']);		}		else			doProperties($lang['strsequencealteredbad']);	}	/**	 * Function to allow altering of a sequence	 */	function doAlter($msg = '') {		global $data, $misc;		global $lang;		$misc->printTrail('sequence');		$misc->printTitle($lang['stralter'], 'pg.sequence.alter');		$misc->printMsg($msg);		// Fetch the sequence information		$sequence = $data->getSequence($_REQUEST['sequence']);		if (is_object($sequence) && $sequence->recordCount() > 0) {			if (!isset($_POST['name'])) $_POST['name'] = $_REQUEST['sequence'];			if (!isset($_POST['comment'])) $_POST['comment'] = $sequence->fields['seqcomment'];			if (!isset($_POST['owner'])) $_POST['owner'] = $sequence->fields['seqowner'];			if (!isset($_POST['newschema'])) $_POST['newschema'] = $sequence->fields['nspname'];			// Handle Checkbox Value			$sequence->fields['is_cycled'] = $data->phpBool($sequence->fields['is_cycled']);			if ($sequence->fields['is_cycled']) $_POST['formCycledValue'] = 'on';			echo "<form action=\"sequences.php\" method=\"post\">\n";			echo "<table>\n";			echo "<tr><th class=\"data left required\">{$lang['strname']}</th>\n";			echo "<td class=\"data1\">";			echo "<input name=\"name\" size=\"32\" maxlength=\"{$data->_maxNameLen}\" value=\"",				htmlspecialchars($_POST['name']), "\" /></td></tr>\n";			$server_info = $misc->getServerInfo();			if ($data->isSuperUser($server_info['username'])) {				// Fetch all users				$users = $data->getUsers();				echo "<tr><th class=\"data left required\">{$lang['strowner']}</th>\n";				echo "<td class=\"data1\"><select name=\"owner\">";				while (!$users->EOF) {					$uname = $users->fields['usename'];					echo "<option value=\"", htmlspecialchars($uname), "\"",					($uname == $_POST['owner']) ? ' selected="selected"' : '', ">", htmlspecialchars($uname), "</option>\n";					$users->moveNext();				}				echo "</select></td></tr>\n";			}						if ($data->hasAlterSequenceSchema()) {				$schemas = $data->getSchemas();				echo "<tr><th class=\"data left required\">{$lang['strschema']}</th>\n";				echo "<td class=\"data1\"><select name=\"newschema\">";				while (!$schemas->EOF) {					$schema = $schemas->fields['nspname'];					echo "<option value=\"", htmlspecialchars($schema), "\"",						($schema == $_POST['newschema']) ? ' selected="selected"' : '', ">", htmlspecialchars($schema), "</option>\n";					$schemas->moveNext();				}			    echo "</select></td></tr>\n";			}			echo "<tr><th class=\"data left\">{$lang['strcomment']}</th>\n";			echo "<td class=\"data1\">";			echo "<textarea rows=\"3\" cols=\"32\" name=\"comment\">",				htmlspecialchars($_POST['comment']), "</textarea></td></tr>\n";			if ($data->hasAlterSequenceStart()) {				echo "<tr><th class=\"data left\">{$lang['strstartvalue']}</th>\n";				echo "<td class=\"data1\"><input name=\"formStartValue\" size=\"5\" value=\"",					htmlspecialchars($sequence->fields['start_value']), "\" /></td></tr>\n";			}			echo "<tr><th class=\"data left\">{$lang['strrestartvalue']}</th>\n";			echo "<td class=\"data1\"><input name=\"formRestartValue\" size=\"5\" value=\"",				htmlspecialchars($sequence->fields['last_value']), "\" /></td></tr>\n";			echo "<tr><th class=\"data left\">{$lang['strincrementby']}</th>\n";			echo "<td class=\"data1\"><input name=\"formIncrement\" size=\"5\" value=\"",				htmlspecialchars($sequence->fields['increment_by']), "\" /> </td></tr>\n";			echo "<tr><th class=\"data left\">{$lang['strmaxvalue']}</th>\n";			echo "<td class=\"data1\"><input name=\"formMaxValue\" size=\"5\" value=\"",				htmlspecialchars($sequence->fields['max_value']), "\" /></td></tr>\n";			echo "<tr><th class=\"data left\">{$lang['strminvalue']}</th>\n";			echo "<td class=\"data1\"><input name=\"formMinValue\" size=\"5\" value=\"",				htmlspecialchars($sequence->fields['min_value']), "\" /></td></tr>\n";			echo "<tr><th class=\"data left\">{$lang['strcachevalue']}</th>\n";			echo "<td class=\"data1\"><input name=\"formCacheValue\" size=\"5\" value=\"",				htmlspecialchars($sequence->fields['cache_value']), "\" /></td></tr>\n";			echo "<tr><th class=\"data left\"><label for=\"formCycledValue\">{$lang['strcancycle']}</label></th>\n";			echo "<td class=\"data1\"><input type=\"checkbox\" id=\"formCycledValue\" name=\"formCycledValue\" ",				( isset($_POST['formCycledValue']) ? ' checked="checked"' : ''), " /></td></tr>\n";			echo "</table>\n";			echo "<p><input type=\"hidden\" name=\"action\" value=\"alter\" />\n";			echo $misc->form;			echo "<input type=\"hidden\" name=\"sequence\" value=\"", htmlspecialchars($_REQUEST['sequence']), "\" />\n";			echo "<input type=\"submit\" name=\"alter\" value=\"{$lang['stralter']}\" />\n";			echo "<input type=\"submit\" name=\"cancel\" value=\"{$lang['strcancel']}\" /></p>\n";			echo "</form>\n";		}		else echo "<p>{$lang['strnodata']}</p>\n";	}	if ($action == 'tree') doTree();	// Print header	$misc->printHeader($lang['strsequences']);	$misc->printBody();	switch($action) {		case 'create':			doCreateSequence();			break;		case 'save_create_sequence':			if (isset($_POST['create'])) doSaveCreateSequence();			else doDefault();			break;		case 'properties':			doProperties();			break;		case 'drop':			if (isset($_POST['drop'])) doDrop(false);			else doDefault();			break;		case 'confirm_drop':			doDrop(true);			break;		case 'restart':			doRestart();			break;		case 'reset':			doReset();			break;		case 'nextval':			doNextval();			break;		case 'setval':			if (isset($_POST['setval'])) doSaveSetval();			else doDefault();			break;		case 'confirm_setval':			doSetval();			break;		case 'alter':			if (isset($_POST['alter'])) doSaveAlter();			else doDefault();			break;		case 'confirm_alter':			doAlter();			break;		default:			doDefault();			break;	}	// Print footer	$misc->printFooter();?>
<?php/** * PostgreSQL 8.3 support * * $Id: Postgres82.php,v 1.10 2007/12/28 16:21:25 ioguix Exp $ */include_once('./classes/database/Postgres.php');class Postgres83 extends Postgres {	var $major_version = 8.3;	// List of all legal privileges that can be applied to different types	// of objects.	var $privlist = array(  		'table' => array('SELECT', 'INSERT', 'UPDATE', 'DELETE', 'REFERENCES', 'TRIGGER', 'ALL PRIVILEGES'),  		'view' => array('SELECT', 'INSERT', 'UPDATE', 'DELETE', 'REFERENCES', 'TRIGGER', 'ALL PRIVILEGES'),  		'sequence' => array('SELECT', 'UPDATE', 'ALL PRIVILEGES'),  		'database' => array('CREATE', 'TEMPORARY', 'CONNECT', 'ALL PRIVILEGES'),  		'function' => array('EXECUTE', 'ALL PRIVILEGES'),  		'language' => array('USAGE', 'ALL PRIVILEGES'),  		'schema' => array('CREATE', 'USAGE', 'ALL PRIVILEGES'),  		'tablespace' => array('CREATE', 'ALL PRIVILEGES')	);	// List of characters in acl lists and the privileges they	// refer to.	var $privmap = array(		'r' => 'SELECT',		'w' => 'UPDATE',		'a' => 'INSERT',  		'd' => 'DELETE',  		'R' => 'RULE',  		'x' => 'REFERENCES',  		't' => 'TRIGGER',  		'X' => 'EXECUTE',  		'U' => 'USAGE', 		'C' => 'CREATE',  		'T' => 'TEMPORARY',  		'c' => 'CONNECT'	);	/**	 * Constructor	 * @param $conn The database connection	 */	function Postgres83($conn) {		$this->Postgres($conn);	}	// Help functions	function getHelpPages() {		include_once('./help/PostgresDoc83.php');		return $this->help_page;	}	// Databse functions	/**	 * Return all database available on the server	 * @param $currentdatabase database name that should be on top of the resultset	 * 	 * @return A list of databases, sorted alphabetically	 */	function getDatabases($currentdatabase = NULL) {		global $conf, $misc;		$server_info = $misc->getServerInfo();		if (isset($conf['owned_only']) && $conf['owned_only'] && !$this->isSuperUser($server_info['username'])) {			$username = $server_info['username'];			$this->clean($username);			$clause = " AND pr.rolname='{$username}'";		}		else $clause = '';		if ($currentdatabase != NULL) {			$this->clean($currentdatabase);			$orderby = "ORDER BY pdb.datname = '{$currentdatabase}' DESC, pdb.datname";		}		else			$orderby = "ORDER BY pdb.datname";		if (!$conf['show_system'])			$where = ' AND NOT pdb.datistemplate';		else			$where = ' AND pdb.datallowconn';		$sql = "			SELECT pdb.datname AS datname, pr.rolname AS datowner, pg_encoding_to_char(encoding) AS datencoding,				(SELECT description FROM pg_catalog.pg_shdescription pd WHERE pdb.oid=pd.objoid) AS datcomment,				(SELECT spcname FROM pg_catalog.pg_tablespace pt WHERE pt.oid=pdb.dattablespace) AS tablespace,				pg_catalog.pg_database_size(pdb.oid) as dbsize			FROM pg_catalog.pg_database pdb LEFT JOIN pg_catalog.pg_roles pr ON (pdb.datdba = pr.oid)			WHERE true				{$where}				{$clause}			{$orderby}";		return $this->selectSet($sql);	}	// Administration functions	/**	 * Returns all available autovacuum per table information.	 * @return A recordset	 */	function getTableAutovacuum($table='') {		$sql = '';		if ($table !== '') {			$this->clean($table);			$c_schema = $this->_schema;			$this->clean($c_schema);			$sql = "				SELECT vacrelid, nspname, relname, 					CASE enabled 						WHEN 't' THEN 'on' 						ELSE 'off' 					END AS autovacuum_enabled, vac_base_thresh AS autovacuum_vacuum_threshold,					vac_scale_factor AS autovacuum_vacuum_scale_factor, anl_base_thresh AS autovacuum_analyze_threshold, 					anl_scale_factor AS autovacuum_analyze_scale_factor, vac_cost_delay AS autovacuum_vacuum_cost_delay, 					vac_cost_limit AS autovacuum_vacuum_cost_limit				FROM pg_autovacuum AS a					join pg_class AS c on (c.oid=a.vacrelid)					join pg_namespace AS n on (n.oid=c.relnamespace)				WHERE c.relname = '{$table}' AND n.nspname = '{$c_schema}'				ORDER BY nspname, relname			";		}		else {			$sql = "				SELECT vacrelid, nspname, relname, 					CASE enabled 						WHEN 't' THEN 'on' 						ELSE 'off' 					END AS autovacuum_enabled, vac_base_thresh AS autovacuum_vacuum_threshold,					vac_scale_factor AS autovacuum_vacuum_scale_factor, anl_base_thresh AS autovacuum_analyze_threshold, 					anl_scale_factor AS autovacuum_analyze_scale_factor, vac_cost_delay AS autovacuum_vacuum_cost_delay, 					vac_cost_limit AS autovacuum_vacuum_cost_limit				FROM pg_autovacuum AS a					join pg_class AS c on (c.oid=a.vacrelid)					join pg_namespace AS n on (n.oid=c.relnamespace)				ORDER BY nspname, relname			";		}		return $this->selectSet($sql);	}		function saveAutovacuum($table, $vacenabled, $vacthreshold, $vacscalefactor, $anathresold, 		$anascalefactor, $vaccostdelay, $vaccostlimit) 	{		$defaults = $this->getAutovacuum();		$c_schema = $this->_schema;		$this->clean($c_schema);		$this->clean($table);				$rs = $this->selectSet("			SELECT c.oid 			FROM pg_catalog.pg_class AS c 				LEFT JOIN pg_catalog.pg_namespace AS n ON (n.oid=c.relnamespace)			WHERE 				c.relname = '{$table}' AND n.nspname = '{$c_schema}'		");				if ($rs->EOF)			return -1;					$toid = $rs->fields('oid');		unset ($rs);					if (empty($_POST['autovacuum_vacuum_threshold']))			$_POST['autovacuum_vacuum_threshold'] = $defaults['autovacuum_vacuum_threshold'];				if (empty($_POST['autovacuum_vacuum_scale_factor']))			$_POST['autovacuum_vacuum_scale_factor'] = $defaults['autovacuum_vacuum_scale_factor'];				if (empty($_POST['autovacuum_analyze_threshold']))			$_POST['autovacuum_analyze_threshold'] = $defaults['autovacuum_analyze_threshold'];				if (empty($_POST['autovacuum_analyze_scale_factor']))			$_POST['autovacuum_analyze_scale_factor'] = $defaults['autovacuum_analyze_scale_factor'];				if (empty($_POST['autovacuum_vacuum_cost_delay']))			$_POST['autovacuum_vacuum_cost_delay'] = $defaults['autovacuum_vacuum_cost_delay'];				if (empty($_POST['autovacuum_vacuum_cost_limit']))			$_POST['autovacuum_vacuum_cost_limit'] = $defaults['autovacuum_vacuum_cost_limit'];				if (empty($_POST['vacuum_freeze_min_age']))			$_POST['vacuum_freeze_min_age'] = $defaults['vacuum_freeze_min_age'];				if (empty($_POST['autovacuum_freeze_max_age']))			$_POST['autovacuum_freeze_max_age'] = $defaults['autovacuum_freeze_max_age'];				$rs = $this->selectSet("SELECT vacrelid 			FROM \"pg_catalog\".\"pg_autovacuum\" 			WHERE vacrelid = {$toid};");				$status = -1; // ini		if (isset($rs->fields['vacrelid']) and ($rs->fields['vacrelid'] == $toid)) {			// table exists in pg_autovacuum, UPDATE			$sql = sprintf("UPDATE \"pg_catalog\".\"pg_autovacuum\" SET 						enabled = '%s',						vac_base_thresh = %s,						vac_scale_factor = %s,						anl_base_thresh = %s,						anl_scale_factor = %s,						vac_cost_delay = %s,						vac_cost_limit = %s,						freeze_min_age = %s,						freeze_max_age = %s					WHERE vacrelid = {$toid};				",				($_POST['autovacuum_enabled'] == 'on')? 't':'f',				$_POST['autovacuum_vacuum_threshold'],				$_POST['autovacuum_vacuum_scale_factor'],				$_POST['autovacuum_analyze_threshold'],				$_POST['autovacuum_analyze_scale_factor'],				$_POST['autovacuum_vacuum_cost_delay'],				$_POST['autovacuum_vacuum_cost_limit'],				$_POST['vacuum_freeze_min_age'],				$_POST['autovacuum_freeze_max_age']			);			$status = $this->execute($sql);		}		else {			// table doesn't exists in pg_autovacuum, INSERT			$sql = sprintf("INSERT INTO \"pg_catalog\".\"pg_autovacuum\" 				VALUES (%s, '%s', %s, %s, %s, %s, %s, %s, %s, %s )				WHERE 					c.relname = '{$table}' AND n.nspname = '{$c_schema}';",				$toid,				($_POST['autovacuum_enabled'] == 'on')? 't':'f',				$_POST['autovacuum_vacuum_threshold'],				$_POST['autovacuum_vacuum_scale_factor'],				$_POST['autovacuum_analyze_threshold'],				$_POST['autovacuum_analyze_scale_factor'],				$_POST['autovacuum_vacuum_cost_delay'],				$_POST['autovacuum_vacuum_cost_limit'],				$_POST['vacuum_freeze_min_age'],				$_POST['autovacuum_freeze_max_age']			);			$status = $this->execute($sql);		}				return $status;	}	function dropAutovacuum($table) {		$c_schema = $this->_schema;		$this->clean($c_schema);		$this->clean($table);				$rs = $this->selectSet("			SELECT c.oid 			FROM pg_catalog.pg_class AS c 				LEFT JOIN pg_catalog.pg_namespace AS n ON (n.oid=c.relnamespace)			WHERE 				c.relname = '{$table}' AND n.nspname = '{$c_schema}'		");				return $this->deleteRow('pg_autovacuum', array('vacrelid' => $rs->fields['oid']), 'pg_catalog');	}		// Sequence functions		/**	 * Alter a sequence's properties	 * @param $seqrs The sequence RecordSet returned by getSequence()	 * @param $increment The sequence incremental value	 * @param $minvalue The sequence minimum value	 * @param $maxvalue The sequence maximum value	 * @param $restartvalue The sequence current value	 * @param $cachevalue The sequence cache value	 * @param $cycledvalue Sequence can cycle ?	 * @param $startvalue The sequence start value when issueing a restart (ignored)	 * @return 0 success	 */	function alterSequenceProps($seqrs, $increment,	$minvalue, $maxvalue,								$restartvalue, $cachevalue, $cycledvalue, $startvalue) {		$sql = '';		/* vars are cleaned in _alterSequence */		if (!empty($increment) && ($increment != $seqrs->fields['increment_by'])) $sql .= " INCREMENT {$increment}";		if (!empty($minvalue) && ($minvalue != $seqrs->fields['min_value'])) $sql .= " MINVALUE {$minvalue}";		if (!empty($maxvalue) && ($maxvalue != $seqrs->fields['max_value'])) $sql .= " MAXVALUE {$maxvalue}";		if (!empty($restartvalue) && ($restartvalue != $seqrs->fields['last_value'])) $sql .= " RESTART {$restartvalue}";		if (!empty($cachevalue) && ($cachevalue != $seqrs->fields['cache_value'])) $sql .= " CACHE {$cachevalue}";		// toggle cycle yes/no		if (!is_null($cycledvalue))	$sql .= (!$cycledvalue ? ' NO ' : '') . " CYCLE";		if ($sql != '') {			$f_schema = $this->_schema;			$this->fieldClean($f_schema);			$sql = "ALTER SEQUENCE \"{$f_schema}\".\"{$seqrs->fields['seqname']}\" {$sql}";			return $this->execute($sql);		}		return 0;	}	/**	 * Alter a sequence's owner	 * @param $seqrs The sequence RecordSet returned by getSequence()	 * @param $name The new owner for the sequence	 * @return 0 success	 */	function alterSequenceOwner($seqrs, $owner) {		// If owner has been changed, then do the alteration.  We are		// careful to avoid this generally as changing owner is a		// superuser only function.		/* vars are cleaned in _alterSequence */		if (!empty($owner) && ($seqrs->fields['seqowner'] != $owner)) {			$f_schema = $this->_schema;			$this->fieldClean($f_schema);			$sql = "ALTER TABLE \"{$f_schema}\".\"{$seqrs->fields['seqname']}\" OWNER TO \"{$owner}\"";			return $this->execute($sql);		}		return 0;	}	function hasQueryKill() { return false; }	function hasDatabaseCollation() { return false; }	function hasAlterSequenceStart() { return false; }}?>
