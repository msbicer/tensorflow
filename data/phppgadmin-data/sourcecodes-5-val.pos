<?php	/**	 * Manage groups in a database cluster	 *	 * $Id: groups.php,v 1.27 2007/08/31 18:30:11 ioguix Exp $	 */	// Include application functions	include_once('./libraries/lib.inc.php');	$action = (isset($_REQUEST['action'])) ? $_REQUEST['action'] : '';	if (!isset($msg)) $msg = '';	/**	 * Add user to a group	 */	function doAddMember() {		global $data, $misc;		global $lang;		$status = $data->addGroupMember($_REQUEST['group'], $_REQUEST['user']);		if ($status == 0)			doProperties($lang['strmemberadded']);		else			doProperties($lang['strmemberaddedbad']);	}		/**	 * Show confirmation of drop user from group and perform actual drop	 */	function doDropMember($confirm) {		global $data, $misc;		global $lang;		if ($confirm) { 			$misc->printTrail('group');			$misc->printTitle($lang['strdropmember'],'pg.group.alter');						echo "<p>", sprintf($lang['strconfdropmember'], $misc->printVal($_REQUEST['user']), $misc->printVal($_REQUEST['group'])), "</p>\n";						echo "<form action=\"groups.php\" method=\"post\">\n";			echo $misc->form;			echo "<input type=\"hidden\" name=\"action\" value=\"drop_member\" />\n";			echo "<input type=\"hidden\" name=\"group\" value=\"", htmlspecialchars($_REQUEST['group']), "\" />\n";			echo "<input type=\"hidden\" name=\"user\" value=\"", htmlspecialchars($_REQUEST['user']), "\" />\n";			echo "<input type=\"submit\" name=\"drop\" value=\"{$lang['strdrop']}\" />\n";			echo "<input type=\"submit\" name=\"cancel\" value=\"{$lang['strcancel']}\" />\n";			echo "</form>\n";		}		else {			$status = $data->dropGroupMember($_REQUEST['group'], $_REQUEST['user']);			if ($status == 0)				doProperties($lang['strmemberdropped']);			else				doDropMember(true, $lang['strmemberdroppedbad']);		}			}		/**	 * Show read only properties for a group	 */	function doProperties($msg = '') {		global $data, $misc;		global $lang;			if (!isset($_POST['user'])) $_POST['user'] = '';			$misc->printTrail('group');		$misc->printTitle($lang['strproperties'],'pg.group');		$misc->printMsg($msg);				$groupdata = $data->getGroup($_REQUEST['group']);		$users = $data->getUsers();				if ($groupdata->recordCount() > 0) {			echo "<table>\n";           	echo "<tr><th class=\"data\">{$lang['strmembers']}</th><th class=\"data\">{$lang['stractions']}</th></tr>\n";           	$i = 0;           	while (!$groupdata->EOF) {					$id = (($i % 2) == 0 ? '1' : '2');            	echo "<tr class=\"data{$id}\"><td>", $misc->printVal($groupdata->fields['usename']), "</td>\n";					echo "<td class=\"opbutton{$id}\"><a href=\"groups.php?action=confirm_drop_member&{$misc->href}&group=",						urlencode($_REQUEST['group']), "&user=", urlencode($groupdata->fields['usename']), "\">{$lang['strdrop']}</a></td>\n";            	echo "</tr>\n";            	$groupdata->moveNext();           	}			echo "</table>\n";		}		else echo "<p>{$lang['strnousers']}</p>\n";		// Display form for adding a user to the group					echo "<form action=\"groups.php\" method=\"post\">\n";		echo "<select name=\"user\">";		while (!$users->EOF) {			$uname = $misc->printVal($users->fields['usename']);			echo "<option value=\"{$uname}\"",				($uname == $_POST['user']) ? ' selected="selected"' : '', ">{$uname}</option>\n";			$users->moveNext();		}		echo "</select>\n";		echo "<input type=\"submit\" value=\"{$lang['straddmember']}\" />\n";		echo $misc->form;		echo "<input type=\"hidden\" name=\"group\" value=\"", htmlspecialchars($_REQUEST['group']), "\" />\n";		echo "<input type=\"hidden\" name=\"action\" value=\"add_member\" />\n";		echo "</form>\n";				echo "<p><a class=\"navlink\" href=\"groups.php?{$misc->href}\">{$lang['strshowallgroups']}</a></p>\n";	}		/**	 * Show confirmation of drop and perform actual drop	 */	function doDrop($confirm) {		global $data, $misc;		global $lang;		if ($confirm) {			$misc->printTrail('group');			$misc->printTitle($lang['strdrop'],'pg.group.drop');						echo "<p>", sprintf($lang['strconfdropgroup'], $misc->printVal($_REQUEST['group'])), "</p>\n";						echo "<form action=\"groups.php\" method=\"post\">\n";			echo $misc->form;			echo "<input type=\"hidden\" name=\"action\" value=\"drop\" />\n";			echo "<input type=\"hidden\" name=\"group\" value=\"", htmlspecialchars($_REQUEST['group']), "\" />\n";			echo "<input type=\"submit\" name=\"drop\" value=\"{$lang['strdrop']}\" />\n";			echo "<input type=\"submit\" name=\"cancel\" value=\"{$lang['strcancel']}\" />\n";			echo "</form>\n";		}		else {			$status = $data->dropGroup($_REQUEST['group']);			if ($status == 0)				doDefault($lang['strgroupdropped']);			else				doDefault($lang['strgroupdroppedbad']);		}			}		/**	 * Displays a screen where they can enter a new group	 */	function doCreate($msg = '') {		global $data, $misc;		global $lang;				if (!isset($_POST['name'])) $_POST['name'] = '';		if (!isset($_POST['members'])) $_POST['members'] = array();		// Fetch a list of all users in the cluster		$users = $data->getUsers();				$misc->printTrail('server');		$misc->printTitle($lang['strcreategroup'],'pg.group.create');		$misc->printMsg($msg);		echo "<form action=\"\" method=\"post\">\n";		echo $misc->form;		echo "<table>\n";		echo "\t<tr>\n\t\t<th class=\"data left required\">{$lang['strname']}</th>\n";		echo "\t\t<td class=\"data\"><input size=\"32\" maxlength=\"{$data->_maxNameLen}\" name=\"name\" value=\"", htmlspecialchars($_POST['name']), "\" /></td>\n\t</tr>\n";		if ($users->recordCount() > 0) {			echo "\t<tr>\n\t\t<th class=\"data left\">{$lang['strmembers']}</th>\n";			echo "\t\t<td class=\"data\">\n";			echo "\t\t\t<select name=\"members[]\" multiple=\"multiple\" size=\"", min(40, $users->recordCount()), "\">\n";			while (!$users->EOF) {				$username = $users->fields['usename'];				echo "\t\t\t\t<option value=\"{$username}\"",						(in_array($username, $_POST['members']) ? ' selected="selected"' : ''), ">", $misc->printVal($username), "</option>\n";				$users->moveNext();			}			echo "\t\t\t</select>\n";			echo "\t\t</td>\n\t</tr>\n";			}		echo "</table>\n";		echo "<p><input type=\"hidden\" name=\"action\" value=\"save_create\" />\n";		echo "<input type=\"submit\" value=\"{$lang['strcreate']}\" />\n";		echo "<input type=\"submit\" name=\"cancel\" value=\"{$lang['strcancel']}\" /></p>\n";		echo "</form>\n";	}		/**	 * Actually creates the new group in the database	 */	function doSaveCreate() {		global $data;		global $lang;		if (!isset($_POST['members'])) $_POST['members'] = array();		// Check form vars		if (trim($_POST['name']) == '')			doCreate($lang['strgroupneedsname']);		else {					$status = $data->createGroup($_POST['name'], $_POST['members']);			if ($status == 0)				doDefault($lang['strgroupcreated']);			else				doCreate($lang['strgroupcreatedbad']);		}	}		/**	 * Show default list of groups in the database	 */	function doDefault($msg = '') {		global $data, $misc;		global $lang;				$misc->printTrail('server');		$misc->printTabs('server','groups');		$misc->printMsg($msg);				$groups = $data->getGroups();				$columns = array(			'group' => array(				'title' => $lang['strgroup'],				'field' => field('groname'),				'url'   => "groups.php?action=properties&amp;{$misc->href}&amp;",				'vars'  => array('group' => 'groname'),			),			'actions' => array(				'title' => $lang['stractions'],			),		);				$actions = array(			'drop' => array(				'title' => $lang['strdrop'],				'url'   => "groups.php?action=confirm_drop&amp;{$misc->href}&amp;",				'vars'  => array('group' => 'groname'),			),		);				$misc->printTable($groups, $columns, $actions, $lang['strnogroups']);				echo "<p><a class=\"navlink\" href=\"groups.php?action=create&amp;{$misc->href}\">{$lang['strcreategroup']}</a></p>\n";	}	$misc->printHeader($lang['strgroups']);	$misc->printBody();	switch ($action) {		case 'add_member':			doAddMember();			break;		case 'drop_member':			if (isset($_REQUEST['drop'])) doDropMember(false);			else doProperties();			break;		case 'confirm_drop_member':			doDropMember(true);			break;					case 'save_create':			if (isset($_REQUEST['cancel'])) doDefault();			else doSaveCreate();			break;		case 'create':			doCreate();			break;		case 'drop':			if (isset($_REQUEST['drop'])) doDrop(false);			else doDefault();			break;		case 'confirm_drop':			doDrop(true);			break;					case 'save_edit':			doSaveEdit();			break;		case 'edit':			doEdit();			break;		case 'properties':			doProperties();			break;		default:			doDefault();			break;	}		$misc->printFooter();?>
<?php	/**	 * Class to hold various commonly used functions	 *	 * $Id: Misc.php,v 1.171 2008/03/17 21:35:48 ioguix Exp $	 */	class Misc {		// Tracking string to include in HREFs		var $href;		// Tracking string to include in forms		var $form;		/* Constructor */		function Misc() {		}		/**		 * Checks if dumps are properly set up		 * @param $all (optional) True to check pg_dumpall, false to just check pg_dump		 * @return True, dumps are set up, false otherwise		 */		function isDumpEnabled($all = false) {			$info = $this->getServerInfo();			return !empty($info[$all ? 'pg_dumpall_path' : 'pg_dump_path']);		}		/**		 * Sets the href tracking variable		 */		function setHREF() {			$this->href = $this->getHREF();		}		/**		 * Get a href query string, excluding objects below the given object type (inclusive)		 */		function getHREF($exclude_from = null) {			$href = '';			if (isset($_REQUEST['server']) && $exclude_from != 'server') {				$href .= 'server=' . urlencode($_REQUEST['server']);				if (isset($_REQUEST['database']) && $exclude_from != 'database') {					$href .= '&amp;database=' . urlencode($_REQUEST['database']);					if (isset($_REQUEST['schema']) && $exclude_from != 'schema') {						$href .= '&amp;schema=' . urlencode($_REQUEST['schema']);					}				}			}			return $href;		}		/**		 * Sets the form tracking variable		 */		function setForm() {			$this->form = '';			if (isset($_REQUEST['server'])) {				$this->form .= "<input type=\"hidden\" name=\"server\" value=\"" . htmlspecialchars($_REQUEST['server']) . "\" />\n";				if (isset($_REQUEST['database'])) {					$this->form .= "<input type=\"hidden\" name=\"database\" value=\"" . htmlspecialchars($_REQUEST['database']) . "\" />\n";					if (isset($_REQUEST['schema'])) {						$this->form .= "<input type=\"hidden\" name=\"schema\" value=\"" . htmlspecialchars($_REQUEST['schema']) . "\" />\n";					}				}			}		}		/**		 * Render a value into HTML using formatting rules specified		 * by a type name and parameters.		 *		 * @param $str The string to change		 *		 * @param $type Field type (optional), this may be an internal PostgreSQL type, or:		 *			yesno    - same as bool, but renders as 'Yes' or 'No'.		 *			pre      - render in a <pre> block.		 *			nbsp     - replace all spaces with &nbsp;'s		 *			verbatim - render exactly as supplied, no escaping what-so-ever.		 *			callback - render using a callback function supplied in the 'function' param.		 *		 * @param $params Type parameters (optional), known parameters:		 *			null     - string to display if $str is null, or set to TRUE to use a default 'NULL' string,		 *			           otherwise nothing is rendered.		 *			clip     - if true, clip the value to a fixed length, and append an ellipsis...		 *			cliplen  - the maximum length when clip is enabled (defaults to $conf['max_chars'])		 *			ellipsis - the string to append to a clipped value (defaults to $lang['strellipsis'])		 *			tag      - an HTML element name to surround the value.		 *			class    - a class attribute to apply to any surrounding HTML element.		 *			align    - an align attribute ('left','right','center' etc.)		 *			true     - (type='bool') the representation of true.		 *			false    - (type='bool') the representation of false.		 *			function - (type='callback') a function name, accepts args ($str, $params) and returns a rendering.		 *			lineno   - prefix each line with a line number.		 *			map      - an associative array.		 *		 * @return The HTML rendered value		 */		function printVal($str, $type = null, $params = array()) {			global $lang, $conf, $data;			// Shortcircuit for a NULL value			if (is_null($str))				return isset($params['null'])						? ($params['null'] === true ? '<i>NULL</i>' : $params['null'])						: '';			if (isset($params['map']) && isset($params['map'][$str])) $str = $params['map'][$str];			// Clip the value if the 'clip' parameter is true.			if (isset($params['clip']) && $params['clip'] === true) {				$maxlen = isset($params['cliplen']) && is_integer($params['cliplen']) ? $params['cliplen'] : $conf['max_chars'];				$ellipsis = isset($params['ellipsis']) ? $params['ellipsis'] : $lang['strellipsis'];				if (strlen($str) > $maxlen) {					$str = substr($str, 0, $maxlen-1) . $ellipsis;				}			}			$out = '';			switch ($type) {				case 'int2':				case 'int4':				case 'int8':				case 'float4':				case 'float8':				case 'money':				case 'numeric':				case 'oid':				case 'xid':				case 'cid':				case 'tid':					$align = 'right';					$out = nl2br(htmlspecialchars($str));					break;				case 'yesno':					if (!isset($params['true'])) $params['true'] = $lang['stryes'];					if (!isset($params['false'])) $params['false'] = $lang['strno'];					// No break - fall through to boolean case.				case 'bool':				case 'boolean':					if (is_bool($str)) $str = $str ? 't' : 'f';					switch ($str) {						case 't':							$out = (isset($params['true']) ? $params['true'] : $lang['strtrue']);							$align = 'center';							break;						case 'f':							$out = (isset($params['false']) ? $params['false'] : $lang['strfalse']);							$align = 'center';							break;						default:							$out = htmlspecialchars($str);					}					break;				case 'bytea':					$tag = 'div';					$class = 'pre';					$out = $data->escapeBytea($str);					break;				case 'errormsg':					$tag = 'pre';					$class = 'error';					$out = htmlspecialchars($str);					break;				case 'pre':					$tag = 'pre';					$out = htmlspecialchars($str);					break;				case 'prenoescape':					$tag = 'pre';					$out = $str;					break;				case 'nbsp':					$out = nl2br(str_replace(' ', '&nbsp;', htmlspecialchars($str)));					break;				case 'verbatim':					$out = $str;					break;				case 'callback':					$out = $params['function']($str, $params);					break;				case 'prettysize':					if ($str == -1) 						$out = $lang['strnoaccess'];					else					{						$limit = 10 * 1024;						$mult = 1;						if ($str < $limit * $mult)							$out = $str.' '.$lang['strbytes'];						else						{							$mult *= 1024;							if ($str < $limit * $mult)								$out = floor(($str + $mult / 2) / $mult).' '.$lang['strkb'];							else							{								$mult *= 1024;								if ($str < $limit * $mult)									$out = floor(($str + $mult / 2) / $mult).' '.$lang['strmb'];								else								{									$mult *= 1024;									if ($str < $limit * $mult)										$out = floor(($str + $mult / 2) / $mult).' '.$lang['strgb'];									else									{										$mult *= 1024;										if ($str < $limit * $mult)											$out = floor(($str + $mult / 2) / $mult).' '.$lang['strtb'];									}								}							}						}					}					break;				case 'slonystatus':					switch ($str) {					case 'insync':						$out = $lang['strhealthy'];						break;					case 'outofsync':						$out = $lang['stroutofsync'];						break;					default:						$out = $lang['strunknown'];					}					break;				default:					// If the string contains at least one instance of >1 space in a row, a tab					// character, a space at the start of a line, or a space at the start of					// the whole string then render within a pre-formatted element (<pre>).					if (preg_match('/(^ |  |\t|\n )/m', $str)) {						$tag = 'pre';						$class = 'data';						$out = htmlspecialchars($str);					} else {						$out = nl2br(htmlspecialchars($str));					}			}			if (isset($params['class'])) $class = $params['class'];			if (isset($params['align'])) $align = $params['align'];			if (!isset($tag) && (isset($class) || isset($align))) $tag = 'div';			if (isset($tag)) {				$alignattr = isset($align) ? " style=\"text-align: {$align}\"" : '';				$classattr = isset($class) ? " class=\"{$class}\"" : '';				$out = "<{$tag}{$alignattr}{$classattr}>{$out}</{$tag}>";			}			// Add line numbers if 'lineno' param is true			if (isset($params['lineno']) && $params['lineno'] === true) {				$lines = explode("\n", $str);				$num = count($lines);				if ($num > 0) {					$temp = "<table>\n<tr><td class=\"{$class}\" style=\"vertical-align: top; padding-right: 10px;\"><pre class=\"{$class}\">";					for ($i = 1; $i <= $num; $i++) {						$temp .= $i . "\n";					}					$temp .= "</pre></td><td class=\"{$class}\" style=\"vertical-align: top;\">{$out}</td></tr></table>\n";					$out = $temp;				}				unset($lines);			}			return $out;		}		/**		 * A function to recursively strip slashes.  Used to		 * enforce magic_quotes_gpc being off.		 * @param &var The variable to strip		 */		function stripVar(&$var) {			if (is_array($var)) {				foreach($var as $k => $v) {					$this->stripVar($var[$k]);					/* magic_quotes_gpc escape keys as well ...*/					if (is_string($k)) {						$ek = stripslashes($k);						if ($ek !== $k) {							$var[$ek] = $var[$k];							unset($var[$k]);						}					}				}			}			else				$var = stripslashes($var);		}		/**		 * Print out the page heading and help link		 * @param $title Title, already escaped		 * @param $help (optional) The identifier for the help link		 */		function printTitle($title, $help = null) {			global $data, $lang;			echo "<h2>";			$this->printHelp($title, $help);			echo "</h2>\n";		}		/**		 * Print out a message		 * @param $msg The message to print		 */		function printMsg($msg) {			if ($msg != '') echo "<p class=\"message\">{$msg}</p>\n";		}		/**		 * Creates a database accessor		 */		function getDatabaseAccessor($database, $server_id = null) {			global $lang, $conf, $misc, $_connection;			$server_info = $this->getServerInfo($server_id);			// Perform extra security checks if this config option is set			if ($conf['extra_login_security']) {				// Disallowed logins if extra_login_security is enabled.				// These must be lowercase.				$bad_usernames = array('pgsql', 'postgres', 'root', 'administrator');				$username = strtolower($server_info['username']);				if ($server_info['password'] == '' || in_array($username, $bad_usernames)) {					unset($_SESSION['webdbLogin'][$_REQUEST['server']]);					$msg = $lang['strlogindisallowed'];					include('./login.php');					exit;				}			}			// Create the connection object and make the connection			$_connection = new Connection(				$server_info['host'],				$server_info['port'],				$server_info['sslmode'],				$server_info['username'],				$server_info['password'],				$database			);			// Get the name of the database driver we need to use.			// The description of the server is returned in $platform.			$_type = $_connection->getDriver($platform);			if ($_type === null) {				printf($lang['strpostgresqlversionnotsupported'], $postgresqlMinVer);				exit;			}			$this->setServerInfo('platform', $platform, $server_id);			$this->setServerInfo('pgVersion', $_connection->conn->pgVersion, $server_id);			// Create a database wrapper class for easy manipulation of the			// connection.			include_once('./classes/database/' . $_type . '.php');			$data = new $_type($_connection->conn);			$data->platform = $_connection->platform;			return $data;		}		/**		 * Prints the page header.  If global variable $_no_output is		 * set then no header is drawn.		 * @param $title The title of the page		 * @param $script script tag		 */		function printHeader($title = '', $script = null, $frameset = false) {			global $appName, $lang, $_no_output, $conf;			if (!isset($_no_output)) {				header("Content-Type: text/html; charset=" . $lang['appcharset']);				// Send XHTML headers, or regular XHTML strict headers				echo "<?xml version=\"1.0\" encoding=\"", htmlspecialchars($lang['appcharset']), "\"?>\n";				if ($frameset == true) {					echo "<!DOCTYPE html PUBLIC \"-//W3C//DTD XHTML 1.0 Frameset//EN\" \"http://www.w3.org/TR/xhtml1/DTD/xhtml1-frameset.dtd\">\n";				} else if (isset($conf['use_xhtml_strict']) && $conf['use_xhtml_strict']) {					echo "<!DOCTYPE html PUBLIC \"-//W3C//DTD XHTML 1.0 Strict//EN\" \"http://www.w3.org/TR/xhtml1/DTD/xhtml1-Strict.dtd\">\n";				} else {					echo "<!DOCTYPE html PUBLIC \"-//W3C//DTD XHTML 1.0 Transitional//EN\" \"http://www.w3.org/TR/xhtml1/DTD/xhtml1-transitional.dtd\">\n";				}				echo "<html xmlns=\"http://www.w3.org/1999/xhtml\" xml:lang=\"{$lang['applocale']}\" lang=\"{$lang['applocale']}\"";				if (strcasecmp($lang['applangdir'], 'ltr') != 0) echo " dir=\"", htmlspecialchars($lang['applangdir']), "\"";				echo ">\n";				echo "<head>\n";				echo "<meta http-equiv=\"Content-Type\" content=\"text/html; charset={$lang['appcharset']}\" />\n";				// Theme				echo "<link rel=\"stylesheet\" href=\"themes/{$conf['theme']}/global.css\" type=\"text/css\" />\n";				echo "<link rel=\"shortcut icon\" href=\"images/themes/{$conf['theme']}/Favicon.ico\" type=\"image/vnd.microsoft.icon\" />\n";				echo "<link rel=\"icon\" type=\"image/png\" href=\"images/themes/{$conf['theme']}/Introduction.png\" />\n";				echo "<title>", htmlspecialchars($appName);				if ($title != '') echo " - {$title}";				echo "</title>\n";				if ($script) echo "{$script}\n";				echo "</head>\n";			}		}		/**		 * Prints the page footer		 * @param $doBody True to output body tag, false otherwise		 */		function printFooter($doBody = true) {			global $_reload_browser, $_reload_drop_database;			global $lang, $_no_bottom_link;			if ($doBody) {				if (isset($_reload_browser)) $this->printReload(false);				elseif (isset($_reload_drop_database)) $this->printReload(true);				if (!isset($_no_bottom_link)) 					echo "<a href=\"#\" class=\"bottom_link\">".$lang['strgotoppage']."</a>";				echo "</body>\n";			}			echo "</html>\n";		}		/**		 * Prints the page body.		 * @param $doBody True to output body tag, false otherwise		 * @param $bodyClass - name of body class		 */		function printBody($bodyClass = '', $doBody = true ) {			global $_no_output;			if (!isset($_no_output)) {				if ($doBody) {					$bodyClass = htmlspecialchars($bodyClass);					echo "<body", ($bodyClass == '' ? '' : " class=\"{$bodyClass}\"");					echo ">\n";				}			}		}		/**		 * Outputs JavaScript code that will reload the browser		 * @param $database True if dropping a database, false otherwise		 */		function printReload($database) {			echo "<script type=\"text/javascript\">\n";			if ($database)				echo "\tparent.frames.browser.location.href=\"browser.php\";\n";			else				echo "\tparent.frames.browser.location.reload();\n";			echo "</script>\n";		}		/**		 * Display navigation tabs		 * @param $tabs An associative array of tabs definitions, see printNav() for an example.		 * @param $activetab The name of the tab to be highlighted.		 */		function printTabs($tabs, $activetab) {			global $misc, $conf, $data, $lang;			if (is_string($tabs)) {				$_SESSION['webdbLastTab'][$tabs] = $activetab;				$tabs = $this->getNavTabs($tabs);			}			echo "<table class=\"tabs\"><tr>\n";			#echo "<div class=\"tabs\">\n";			# FIXME: don't count hidden tabs			$width = (int)(100 / count($tabs)).'%';			foreach ($tabs as $tab_id => $tab) {				$active = ($tab_id == $activetab) ? ' active' : '';				if (!isset($tab['hide']) || $tab['hide'] !== true) {					$tablink = "<a" . $this->printActionUrl($tab, $_REQUEST, 'href') . ">";					if (isset($tab['icon']) && $icon = $this->icon($tab['icon']))						$tablink .= "<span class=\"icon\"><img src=\"{$icon}\" alt=\"{$tab['title']}\" /></span>";					$tablink .= "<span class=\"label\">{$tab['title']}</span></a>";					echo "<td style=\"width: {$width}\" class=\"tab{$active}\">";					#echo "<span class=\"tab{$active}\" style=\"white-space:nowrap;\">";					if (isset($tab['help']))						$this->printHelp($tablink, $tab['help']);					else						echo $tablink;					echo "</td>\n";					#echo "</span>\n";				}			}			echo "</tr></table>\n";			#echo "</div>\n";		}		/**		 * Retrieve the tab info for a specific tab bar.		 * @param $section The name of the tab bar.		 */		function getNavTabs($section) {			global $data, $lang, $conf, $slony;			$hide_advanced = ($conf['show_advanced'] === false);			switch ($section) {				case 'root':					return array (						'intro' => array (							'title' => $lang['strintroduction'],							'url'   => "intro.php",							'icon'  => 'Introduction',						),						'servers' => array (							'title' => $lang['strservers'],							'url'   => "servers.php",							'icon'  => 'Servers',						),					);				case 'server':				case 'report':					$server_info = $this->getServerInfo();					$hide_users = !$data->isSuperUser($server_info['username']);					$tmp = array (						'databases' => array (							'title' => $lang['strdatabases'],							'url'   => 'all_db.php',							'urlvars' => array('subject' => 'server'),							'help'  => 'pg.database',							'icon'  => 'Databases',						)					);					if ($data->hasRoles()) {						$tmp = array_merge($tmp, array(							'roles' => array (								'title' => $lang['strroles'],								'url'   => 'roles.php',								'urlvars' => array('subject' => 'server'),								'hide'  => $hide_users,								'help'  => 'pg.role',								'icon'  => 'Roles',							)						));					}					else {						$tmp = array_merge($tmp, array(							'users' => array (								'title' => $lang['strusers'],								'url'   => 'users.php',								'urlvars' => array('subject' => 'server'),								'hide'  => $hide_users,								'help'  => 'pg.user',								'icon'  => 'Users',							),							'groups' => array (								'title' => $lang['strgroups'],								'url'   => 'groups.php',								'urlvars' => array('subject' => 'server'),								'hide'  => $hide_users,								'help'  => 'pg.group',								'icon'  => 'UserGroups',							)						));					}					$tmp = array_merge($tmp, array(						'account' => array (							'title' => $lang['straccount'],							'url'   => $data->hasRoles() ? 'roles.php' : 'users.php',							'urlvars' => array('subject' => 'server', 'action' => 'account'),							'hide'  => !$hide_users,							'help'  => 'pg.role',							'icon'  => 'User',						),						'tablespaces' => array (							'title' => $lang['strtablespaces'],							'url'   => 'tablespaces.php',							'urlvars' => array('subject' => 'server'),							'hide'  => (!$data->hasTablespaces()),							'help'  => 'pg.tablespace',							'icon'  => 'Tablespaces',						),						'export' => array (							'title' => $lang['strexport'],							'url'   => 'all_db.php',							'urlvars' => array('subject' => 'server', 'action' => 'export'),							'hide'  => (!$this->isDumpEnabled()),							'icon'  => 'Export',						),						'reports' => array (							'title' => $lang['strreports'],							'url'   => 'reports.php',							'urlvars' => array('subject' => 'server'),							'hide' => !$conf['show_reports'],							'icon' => 'Reports',						),					));					return $tmp;					break;				case 'database':					$tabs = array (						'schemas' => array (							'title' => $lang['strschemas'],							'url'   => 'schemas.php',							'urlvars' => array('subject' => 'database'),							'help'  => 'pg.schema',							'icon'  => 'Schemas',						),						'sql' => array (							'title' => $lang['strsql'],							'url'   => 'database.php',							'urlvars' => array('subject' => 'database', 'action' => 'sql', 'new' => 1),							'help'  => 'pg.sql',							'tree'  => false,							'icon'  => 'SqlEditor'						),						'find' => array (							'title' => $lang['strfind'],							'url'   => 'database.php',							'urlvars' => array('subject' => 'database', 'action' => 'find'),							'tree'  => false,							'icon'  => 'Search'						),						'variables' => array (							'title' => $lang['strvariables'],							'url'   => 'database.php',							'urlvars' => array('subject' => 'database', 'action' => 'variables'),							'help'  => 'pg.variable',							'tree'  => false,							'icon'  => 'Variables',						),						'processes' => array (							'title' => $lang['strprocesses'],							'url'   => 'database.php',							'urlvars' => array('subject' => 'database', 'action' => 'processes'),							'help'  => 'pg.process',							'tree'  => false,							'icon'  => 'Processes',						),						'locks' => array (							'title' => $lang['strlocks'],							'url'   => 'database.php',							'urlvars' => array('subject' => 'database', 'action' => 'locks'),							'help'  => 'pg.locks',							'tree'  => false,							'icon'  => 'Key',						),						'admin' => array (							'title' => $lang['stradmin'],							'url'   => 'database.php',							'urlvars' => array('subject' => 'database', 'action' => 'admin'),							'tree'  => false,							'icon'  => 'Admin',						),						'privileges' => array (							'title' => $lang['strprivileges'],							'url'   => 'privileges.php',							'urlvars' => array('subject' => 'database'),							'hide'  => (!isset($data->privlist['database'])),							'help'  => 'pg.privilege',							'tree'  => false,							'icon'  => 'Privileges',						),						'languages' => array (							'title' => $lang['strlanguages'],							'url'   => 'languages.php',							'urlvars' => array('subject' => 'database'),							'hide'  => $hide_advanced,							'help'  => 'pg.language',							'icon'  => 'Languages',						),						'casts' => array (							'title' => $lang['strcasts'],							'url'   => 'casts.php',							'urlvars' => array('subject' => 'database'),							'hide'  => ($hide_advanced),							'help'  => 'pg.cast',							'icon'  => 'Casts',						),						'slony' => array (							'title' => 'Slony',							'url'   => 'plugin_slony.php',							'urlvars' => array('subject' => 'database', 'action' => 'clusters_properties'),							'hide'  => !isset($slony),							'help'  => '',							'icon'  => 'Replication',						),						'export' => array (							'title' => $lang['strexport'],							'url'   => 'database.php',							'urlvars' => array('subject' => 'database', 'action' => 'export'),							'hide'  => (!$this->isDumpEnabled()),							'tree'  => false,							'icon'  => 'Export',						),					);					return $tabs;				case 'schema':					$tabs = array (						'tables' => array (							'title' => $lang['strtables'],							'url'   => 'tables.php',							'urlvars' => array('subject' => 'schema'),							'help'  => 'pg.table',							'icon'  => 'Tables',						),						'views' => array (							'title' => $lang['strviews'],							'url'   => 'views.php',							'urlvars' => array('subject' => 'schema'),							'help'  => 'pg.view',							'icon'  => 'Views',						),						'sequences' => array (							'title' => $lang['strsequences'],							'url'   => 'sequences.php',							'urlvars' => array('subject' => 'schema'),							'help'  => 'pg.sequence',							'icon'  => 'Sequences',						),						'functions' => array (							'title' => $lang['strfunctions'],							'url'   => 'functions.php',							'urlvars' => array('subject' => 'schema'),							'help'  => 'pg.function',							'icon'  => 'Functions',						),						'fulltext' => array (							'title' => $lang['strfulltext'],							'url'   => 'fulltext.php',							'urlvars' => array('subject' => 'schema'),							'help'  => 'pg.fts',							'tree'  => true,							'icon'  => 'Fts',						),						'domains' => array (							'title' => $lang['strdomains'],							'url'   => 'domains.php',							'urlvars' => array('subject' => 'schema'),							'help'  => 'pg.domain',							'icon'  => 'Domains',						),						'aggregates' => array (							'title' => $lang['straggregates'],							'url'   => 'aggregates.php',							'urlvars' => array('subject' => 'schema'),							'hide'  => $hide_advanced,							'help'  => 'pg.aggregate',							'icon'  => 'Aggregates',						),						'types' => array (							'title' => $lang['strtypes'],							'url'   => 'types.php',							'urlvars' => array('subject' => 'schema'),							'hide'  => $hide_advanced,							'help'  => 'pg.type',							'icon'  => 'Types',						),						'operators' => array (							'title' => $lang['stroperators'],							'url'   => 'operators.php',							'urlvars' => array('subject' => 'schema'),							'hide'  => $hide_advanced,							'help'  => 'pg.operator',							'icon'  => 'Operators',						),						'opclasses' => array (							'title' => $lang['stropclasses'],							'url'   => 'opclasses.php',							'urlvars' => array('subject' => 'schema'),							'hide'  => $hide_advanced,							'help'  => 'pg.opclass',							'icon'  => 'OperatorClasses',						),						'conversions' => array (							'title' => $lang['strconversions'],							'url'   => 'conversions.php',							'urlvars' => array('subject' => 'schema'),							'hide'  => $hide_advanced,							'help'  => 'pg.conversion',							'icon'  => 'Conversions',						),						'privileges' => array (							'title' => $lang['strprivileges'],							'url'   => 'privileges.php',							'urlvars' => array('subject' => 'schema'),							'help'  => 'pg.privilege',							'tree'  => false,							'icon'  => 'Privileges',						),						'export' => array (							'title' => $lang['strexport'],							'url'   => 'schemas.php',							'urlvars' => array('subject' => 'schema', 'action' => 'export'),							'hide'  => (!$this->isDumpEnabled()),							'tree'  => false,							'icon'  => 'Export',						),					);					if (!$data->hasFTS()) unset($tabs['fulltext']);					return $tabs;				case 'table':					return array (						'columns' => array (							'title' => $lang['strcolumns'],							'url'   => 'tblproperties.php',							'urlvars' => array('subject' => 'table', 'table' => field('table')),							'icon'  => 'Columns',							'branch'=> true,						),						'indexes' => array (							'title' => $lang['strindexes'],							'url'   => 'indexes.php',							'urlvars' => array('subject' => 'table', 'table' => field('table')),							'help'  => 'pg.index',							'icon'  => 'Indexes',							'branch'=> true,						),						'constraints' => array (							'title' => $lang['strconstraints'],							'url'   => 'constraints.php',							'urlvars' => array('subject' => 'table', 'table' => field('table')),							'help'  => 'pg.constraint',							'icon'  => 'Constraints',							'branch'=> true,						),						'triggers' => array (							'title' => $lang['strtriggers'],							'url'   => 'triggers.php',							'urlvars' => array('subject' => 'table', 'table' => field('table')),							'help'  => 'pg.trigger',							'icon'  => 'Triggers',							'branch'=> true,						),						'rules' => array (							'title' => $lang['strrules'],							'url'   => 'rules.php',							'urlvars' => array('subject' => 'table', 'table' => field('table')),							'help'  => 'pg.rule',							'icon'  => 'Rules',							'branch'=> true,						),						'admin' => array (							'title' => $lang['stradmin'],							'url'   => 'tables.php',							'urlvars' => array('subject' => 'table', 'table' => field('table'), 'action' => 'admin'),							'icon'  => 'Admin',						),						'info' => array (							'title' => $lang['strinfo'],							'url'   => 'info.php',							'urlvars' => array('subject' => 'table', 'table' => field('table')),							'icon'  => 'Statistics',						),						'privileges' => array (							'title' => $lang['strprivileges'],							'url'   => 'privileges.php',							'urlvars' => array('subject' => 'table', 'table' => field('table')),							'help'  => 'pg.privilege',							'icon'  => 'Privileges',						),						'import' => array (							'title' => $lang['strimport'],							'url'   => 'tblproperties.php',							'urlvars' => array('subject' => 'table', 'table' => field('table'), 'action' => 'import'),							'icon'  => 'Import',							'hide'	=> false,						),						'export' => array (							'title' => $lang['strexport'],							'url'   => 'tblproperties.php',							'urlvars' => array('subject' => 'table', 'table' => field('table'), 'action' => 'export'),							'icon'  => 'Export',							'hide'	=> false,						),					);				case 'view':					return array (						'columns' => array (							'title' => $lang['strcolumns'],							'url'   => 'viewproperties.php',							'urlvars' => array('subject' => 'view', 'view' => field('view')),							'icon'  => 'Columns',							'branch'=> true,						),						'definition' => array (							'title' => $lang['strdefinition'],							'url'   => 'viewproperties.php',							'urlvars' => array('subject' => 'view', 'view' => field('view'), 'action' => 'definition'),							'icon'  => 'Definition'						),						'rules' => array (							'title' => $lang['strrules'],							'url'   => 'rules.php',							'urlvars' => array('subject' => 'view', 'view' => field('view')),							'help'  => 'pg.rule',							'icon'  => 'Rules',							'branch'=> true,						),						'privileges' => array (							'title' => $lang['strprivileges'],							'url'   => 'privileges.php',							'urlvars' => array('subject' => 'view', 'view' => field('view')),							'help'  => 'pg.privilege',							'icon'  => 'Privileges',						),						'export' => array (							'title' => $lang['strexport'],							'url'   => 'viewproperties.php',							'urlvars' => array('subject' => 'view', 'view' => field('view'), 'action' => 'export'),							'icon'  => 'Export',							'hide'	=> false,						),					);				case 'function':					return array (						'definition' => array (							'title' => $lang['strdefinition'],							'url'   => 'functions.php',							'urlvars' => array(									'subject' => 'function',									'function' => field('function'),									'function_oid' => field('function_oid'),									'action' => 'properties',								),							'icon'  => 'Definition',						),						'privileges' => array (							'title' => $lang['strprivileges'],							'url'   => 'privileges.php',							'urlvars' => array(									'subject' => 'function',									'function' => field('function'),									'function_oid' => field('function_oid'),								),							'icon'  => 'Privileges',						),					);				case 'aggregate':					return array (						'definition' => array (							'title' => $lang['strdefinition'],							'url'   => 'aggregates.php',							'urlvars' => array(									'subject' => 'aggregate',									'aggrname' => field('aggrname'),									'aggrtype' => field('aggrtype'),									'action' => 'properties',								),							'icon'  => 'Definition',						),					);				case 'role':					return array (						'definition' => array (							'title' => $lang['strdefinition'],							'url'   => 'roles.php',							'urlvars' => array(									'subject' => 'role',									'rolename' => field('rolename'),									'action' => 'properties',								),							'icon'  => 'Definition',						),					);				case 'popup':					return array (						'sql' => array (							'title' => $lang['strsql'],							'url'   => 'sqledit.php',							'urlvars' => array('subject' => 'schema', 'action' => 'sql'),							'help'  => 'pg.sql',							'icon'  => 'SqlEditor',						),						'find' => array (							'title' => $lang['strfind'],							'url'   => 'sqledit.php',							'urlvars' => array('subject' => 'schema', 'action' => 'find'),							'icon'  => 'Search',						),					);				case 'slony_cluster':					return array (						'properties' => array (							'title' => $lang['strproperties'],							'url'   => 'plugin_slony.php',							'urlvars' => array(									'subject' => 'slony_cluster',									'action' => 'cluster_properties',									'slony_cluster' => field('slony_cluster')								),							'help'  => '',							'tree'  => false,							'icon'  => 'Cluster',						),						'nodes' => array (							'title' => $lang['strnodes'],							'url'   => 'plugin_slony.php',							'urlvars' => array(									'subject' => 'slony_cluster',									'action' => 'nodes_properties',									'slony_cluster' => field('slony_cluster')								),							'branch' => 'nodes',							'help'  => '',							'icon'  => 'Nodes',						),						'sets' => array (							'title' => $lang['strrepsets'],							'url'   => 'plugin_slony.php',							'urlvars' => array(								'subject' => 'slony_cluster',								'action' => 'sets_properties',								'slony_cluster' => field('slony_cluster')							),							'branch' => 'sets',							'help'  => '',							'icon'  => 'ReplicationSets',						),					);				case 'column':					return array(						'properties' => array (							'title'		=> $lang['strcolprop'],							'url'		=> 'colproperties.php',							'urlvars'	=> array(								'subject' => 'column',								'table' => field('table'),								'column' => field('column')							),							'icon'		=> 'Column'						),						'privileges' => array (							'title' => $lang['strprivileges'],							'url'   => 'privileges.php',							'urlvars' => array(								'subject' => 'column',								'table' => field('table'),								'column' => field('column')							),							'help'  => 'pg.privilege',							'icon'  => 'Privileges',						)					);                case 'fulltext':                    return array (                        'ftsconfigs' => array (                            'title' => $lang['strftstabconfigs'],                            'url'   => 'fulltext.php',                            'urlvars' => array('subject' => 'schema'),                            'hide'  => !$data->hasFTS(),                            'help'  => 'pg.ftscfg',                            'tree'  => true,                            'icon'  => 'FtsCfg',                        ),                        'ftsdicts' => array (                            'title' => $lang['strftstabdicts'],                            'url'   => 'fulltext.php',                            'urlvars' => array('subject' => 'schema', 'action' => 'viewdicts'),                            'hide'  => !$data->hasFTS(),                            'help'  => 'pg.ftsdict',                            'tree'  => true,                            'icon'  => 'FtsDict',                        ),                        'ftsparsers' => array (                            'title' => $lang['strftstabparsers'],                            'url'   => 'fulltext.php',                            'urlvars' => array('subject' => 'schema', 'action' => 'viewparsers'),                            'hide'  => !$data->hasFTS(),                            'help'  => 'pg.ftsparser',                            'tree'  => true,                            'icon'  => 'FtsParser',                        ),                    );				default:					return array();			}		}		/**		 * Get the URL for the last active tab of a particular tab bar.		 */		function getLastTabURL($section) {			global $data;			$tabs = $this->getNavTabs($section);			if (isset($_SESSION['webdbLastTab'][$section]) && isset($tabs[$_SESSION['webdbLastTab'][$section]]))				$tab = $tabs[$_SESSION['webdbLastTab'][$section]];			else				$tab = reset($tabs);			return isset($tab['url']) ? $tab : null;		}		function printTopbar() {			global $lang, $conf, $appName, $appVersion, $appLangFiles;			$server_info = $this->getServerInfo();			echo "<div class=\"topbar\"><table style=\"width: 100%\"><tr><td>";			if ($server_info && isset($server_info['platform']) && isset($server_info['username'])) {				echo sprintf($lang['strtopbar'],					'<span class="platform">'.htmlspecialchars($server_info['platform']).'</span>',					'<span class="host">'.htmlspecialchars((empty($server_info['host'])) ? 'localhost':$server_info['host']).'</span>',					'<span class="port">'.htmlspecialchars($server_info['port']).'</span>',					'<span class="username">'.htmlspecialchars($server_info['username']).'</span>',					'<span class="date">'.date($lang['strtimefmt']).'</span>');			} else {				echo "<span class=\"appname\">$appName</span> <span class=\"version\">$appVersion</span>";			}			echo "</td>";			if (isset($_REQUEST['server'])) {				$sql_url = "sqledit.php?{$this->href}&amp;action=";				$sql_window_id = htmlspecialchars('sqledit:'.$_REQUEST['server']);				$history_url = "history.php?{$this->href}&amp;action=pophistory";				$history_window_id = htmlspecialchars('history:'.$_REQUEST['server']);				$logout_shared = isset($_SESSION['sharedUsername']) ?					' onclick="return confirm(\''. $lang['strconfdropcred']. '\')"':					'';				echo "<td style=\"text-align: right\">";				echo "<ul class=\"toplink\">\n\t<li><a class=\"toplink\" href=\"{$sql_url}sql\" target=\"sqledit\" onclick=\"window.open('{$sql_url}sql','{$sql_window_id}','toolbar=no,width=700,height=500,resizable=yes,scrollbars=yes').focus(); return false;\">{$lang['strsql']}</a></li>\n";				echo "\t<li><a class=\"toplink\" href=\"{$history_url}\" onclick=\"window.open('{$history_url}','{$history_window_id}','toolbar=no,width=800,height=600,resizable=yes,scrollbars=yes').focus(); return false;\">{$lang['strhistory']}</a></li>\n";				echo "\t<li><a class=\"toplink\" href=\"{$sql_url}find\" target=\"sqledit\" onclick=\"window.open('{$sql_url}find','{$sql_window_id}','toolbar=no,width=700,height=500,resizable=yes,scrollbars=yes').focus(); return false;\">{$lang['strfind']}</a></li>\n"; 				echo "\t<li><a class=\"toplink\" href=\"servers.php?action=logout&amp;logoutServer=".htmlspecialchars($server_info['host']).":".htmlspecialchars($server_info['port']).":".htmlspecialchars($server_info['sslmode'])."\"{$logout_shared}>{$lang['strlogout']}</a></li>\n"; 				echo "</ul>\n";				echo "</td>";			}/*			echo "<td style=\"text-align: right; width: 1%\">";			echo "<form method=\"get\"><select name=\"language\" onchange=\"this.form.submit()\">\n";			$language = isset($_SESSION['webdbLanguage']) ? $_SESSION['webdbLanguage'] : 'english';			foreach ($appLangFiles as $k => $v) {				echo "<option value=\"{$k}\"",					($k == $language) ? ' selected="selected"' : '',					">{$v}</option>\n";			}			echo "</select>\n";			echo "<noscript><input type=\"submit\" value=\"Set Language\"></noscript>\n";			foreach ($_GET as $key => $val) {				if ($key == 'language') continue;				echo "<input type=\"hidden\" name=\"$key\" value=\"", htmlspecialchars($val), "\" />\n";			}			echo "</form>\n";			echo "</td>";*/			echo "</tr></table></div>\n";		}		/**		 * Display a bread crumb trail.		 */		function printTrail($trail = array()) {			global $lang;			$this->printTopbar();			if (is_string($trail)) {				$trail = $this->getTrail($trail);			}			echo "<div class=\"trail\"><table><tr>";			foreach ($trail as $crumb) {				echo "<td class=\"crumb\">";				$crumblink = "<a";				if (isset($crumb['url']))					$crumblink .= ' href="' . $this->printVal($crumb['url'], 'nbsp') . '"';				if (isset($crumb['title']))					$crumblink .= " title=\"{$crumb['title']}\"";				$crumblink .= ">";				if (isset($crumb['title']))					$iconalt = $crumb['title'];				else					$iconalt = 'Database Root';				if (isset($crumb['icon']) && $icon = $this->icon($crumb['icon']))					$crumblink .= "<span class=\"icon\"><img src=\"{$icon}\" alt=\"{$iconalt}\" /></span>";				$crumblink .= "<span class=\"label\">" . htmlspecialchars($crumb['text']) . "</span></a>";				if (isset($crumb['help']))					$this->printHelp($crumblink, $crumb['help']);				else					echo $crumblink;				echo "{$lang['strseparator']}";				echo "</td>";			}			echo "</tr></table></div>\n";		}		/**		 * Create a bread crumb trail of the object hierarchy.		 * @param $object The type of object at the end of the trail.		 */		function getTrail($subject = null) {			global $lang, $conf, $data, $appName;			$trail = array();			$vars = '';			$done = false;			$trail['root'] = array(				'text'  => $appName,				'url'   => 'redirect.php?subject=root',				'icon'  => 'Introduction'			);			if ($subject == 'root') $done = true;			if (!$done) {				$vars = 'server='.urlencode($_REQUEST['server']).'&';				$server_info = $this->getServerInfo();				$trail['server'] = array(					'title' => $lang['strserver'],					'text'  => $server_info['desc'],					'url'   => "redirect.php?subject=server&{$vars}",					'help'  => 'pg.server',					'icon'  => 'Server'				);			}			if ($subject == 'server') $done = true;			if (isset($_REQUEST['report']) && !$done) {				$vars .= 'report='.urlencode($_REQUEST['report']).'&';				$trail['report'] = array(					'title' => $lang['strreport'],					'text'  => $_REQUEST['report'],					'url'   => "reports.php?subject=report&{$vars}",					'icon'  => 'Report'				);			}			if (isset($_REQUEST['database']) && !$done) {				$vars .= 'database='.urlencode($_REQUEST['database']).'&';				$trail['database'] = array(					'title' => $lang['strdatabase'],					'text'  => $_REQUEST['database'],					'url'   => "redirect.php?subject=database&{$vars}",					'help'  => 'pg.database',					'icon'  => 'Database'				);			} elseif (isset($_REQUEST['rolename']) && !$done) {				$vars .= "subject=role&action=properties&rolename=".urlencode($_REQUEST['rolename']);				$trail['role'] = array(					'title' => $lang['strrole'],					'text'  => $_REQUEST['rolename'],					'url'   => "redirect.php?{$vars}",					'help'  => 'pg.role',					'icon'  => 'Roles'				);			}			if ($subject == 'database' || $subject == 'role' || $subject == 'report') $done = true;			if (isset($_REQUEST['schema']) && !$done) {				$vars .= 'schema='.urlencode($_REQUEST['schema']).'&';				$trail['schema'] = array(					'title' => $lang['strschema'],					'text'  => $_REQUEST['schema'],					'url'   => "redirect.php?subject=schema&{$vars}",					'help'  => 'pg.schema',					'icon'  => 'Schema'				);			}			if ($subject == 'schema') $done = true;			if (isset($_REQUEST['slony_cluster']) && !$done) {				$vars .= 'slony_cluster='.urlencode($_REQUEST['slony_cluster']).'&';				$trail['slony_cluster'] = array(					'title' => 'Slony Cluster',					'text'  => $_REQUEST['slony_cluster'],					'url'   => "redirect.php?subject=slony_cluster&{$vars}",					'help'  => 'sl.cluster',					'icon'  => 'Cluster'				);			}			if ($subject == 'slony_cluster') $done = true;			if (isset($_REQUEST['table']) && !$done) {				$vars .= "table=".urlencode($_REQUEST['table']);				$trail['table'] = array(					'title' => $lang['strtable'],					'text'  => $_REQUEST['table'],					'url'   => "redirect.php?subject=table&{$vars}",					'help'  => 'pg.table',					'icon'  => 'Table'				);			} elseif (isset($_REQUEST['view']) && !$done) {				$vars .= "view=".urlencode($_REQUEST['view']);				$trail['view'] = array(					'title' => $lang['strview'],					'text'  => $_REQUEST['view'],					'url'   => "redirect.php?subject=view&{$vars}",					'help'  => 'pg.view',					'icon'  => 'View'				);			} elseif (isset($_REQUEST['ftscfg']) && !$done) {				$vars .= "action=viewconfig&ftscfg=".urlencode($_REQUEST['ftscfg']);				$trail['ftscfg'] = array(					'title' => $lang['strftsconfig'],					'text'  => $_REQUEST['ftscfg'],					'url'   => "fulltext.php?{$vars}",					'help'  => 'pg.ftscfg.example',					'icon'  => 'Fts'				);			}			if ($subject == 'table' || $subject == 'view' || $subject == 'ftscfg') $done = true;			if (!$done && !is_null($subject)) {				switch ($subject) {					case 'function':						$vars .= "{$subject}_oid=".urlencode($_REQUEST[$subject.'_oid']).'&';						$vars .= "subject={$subject}&{$subject}=".urlencode($_REQUEST[$subject]);						$trail[$subject] = array(							'title' => $lang['str'.$subject],							'text'  => $_REQUEST[$subject],							'url'   => "redirect.php?{$vars}",							'help'  => 'pg.function',							'icon'  => 'Function'						);						break;					case 'aggregate':						$vars .= "subject=aggregate&action=properties&aggrname=".urlencode($_REQUEST['aggrname']);						$vars .= "&aggrtype=".urlencode($_REQUEST['aggrtype']);						$trail[$subject] = array(							'title' => $lang['straggregate'],							'text'  => $_REQUEST['aggrname'],							'url'   => "redirect.php?{$vars}",							'help'  => 'pg.aggregate',							'icon'  => 'Aggregate'						);						break;					case 'slony_node':						$vars .= 'no_id='.urlencode($_REQUEST['no_id']).'&no_name='.urlencode($_REQUEST['no_name']);						$trail[$subject] = array(							'title' => 'Slony Node',							'text'  => $_REQUEST['no_name'],							'url'   => "redirect.php?{$vars}",							'help'  => 'sl.'.$subject,							'icon'  => 'Node'						);						break;					case 'slony_set':						$vars .= "{$subject}_id=".urlencode($_REQUEST[$subject]).'&';						$vars .= "subject={$subject}&{$subject}=".urlencode($_REQUEST[$subject]);						$trail[$subject] = array(							'title' => $lang['str'.$subject],							'text'  => $_REQUEST[$subject],							'url'   => "redirect.php?{$vars}",							'help'  => 'sl.'.$subject,							'icon'  => 'AvailableReplicationSet'						);						break;					case 'column':						$vars .= "&column=". urlencode($_REQUEST['column']) ."&subject=column";						$trail['column'] = array (							'title' => $lang['strcolumn'],							'text'  => $_REQUEST['column'],							'icon'	=> 'Column',							'url'   => "redirect.php?{$vars}"						);						break;					default:						if (isset($_REQUEST[$subject])) {							switch ($subject) {								case 'domain': $icon = 'Domain'; break;								case 'sequence': $icon = 'Sequence'; break;								case 'type': $icon = 'Type'; break;								case 'operator': $icon = 'Operator'; break;								default: $icon = null; break;							}							$trail[$subject] = array(								'title' => $lang['str'.$subject],								'text'  => $_REQUEST[$subject],								'help'  => 'pg.'.$subject,								'icon'  => $icon,							);						}				}			}			return $trail;		}		/**		 * Do multi-page navigation.  Displays the prev, next and page options.		 * @param $page the page currently viewed		 * @param $pages the maximum number of pages		 * @param $url the url to refer to with the page number inserted		 * @param $max_width the number of pages to make available at any one time (default = 20)		 */		function printPages($page, $pages, $url, $max_width = 20) {			global $lang;			$window = 10;			if ($page < 0 || $page > $pages) return;			if ($pages < 0) return;			if ($max_width <= 0) return;			if ($pages > 1) {				echo "<p style=\"text-align: center\">\n";				if ($page != 1) {					$temp = str_replace('%s', 1, $url);					echo "<a class=\"pagenav\" href=\"{$temp}\">{$lang['strfirst']}</a>\n";					$temp = str_replace('%s', $page - 1, $url);					echo "<a class=\"pagenav\" href=\"{$temp}\">{$lang['strprev']}</a>\n";				}				if ($page <= $window) {					$min_page = 1;					$max_page = min(2 * $window, $pages);				}				elseif ($page > $window && $pages >= $page + $window) {					$min_page = ($page - $window) + 1;					$max_page = $page + $window;				}				else {					$min_page = ($page - (2 * $window - ($pages - $page))) + 1;					$max_page = $pages;				}				// Make sure min_page is always at least 1				// and max_page is never greater than $pages				$min_page = max($min_page, 1);				$max_page = min($max_page, $pages);				for ($i = $min_page; $i <= $max_page; $i++) {					$temp = str_replace('%s', $i, $url);					if ($i != $page) echo "<a class=\"pagenav\" href=\"{$temp}\">$i</a>\n";					else echo "$i\n";				}				if ($page != $pages) {					$temp = str_replace('%s', $page + 1, $url);					echo "<a class=\"pagenav\" href=\"{$temp}\">{$lang['strnext']}</a>\n";					$temp = str_replace('%s', $pages, $url);					echo "<a class=\"pagenav\" href=\"{$temp}\">{$lang['strlast']}</a>\n";				}				echo "</p>\n";			}		}		/**		 * Displays link to the context help.		 * @param $str   - the string that the context help is related to (already escaped)		 * @param $help  - help section identifier		 */		function printHelp($str, $help) {			global $lang, $data;			echo $str;			if ($help) {				echo "<a class=\"help\" href=\"";				echo htmlspecialchars("help.php?help=".urlencode($help)."&server=".urlencode($_REQUEST['server']));				echo "\" title=\"{$lang['strhelp']}\" target=\"phppgadminhelp\">{$lang['strhelpicon']}</a>";			}		}		/**		 * Outputs JavaScript to set default focus		 * @param $object eg. forms[0].username		 */		function setFocus($object) {			echo "<script type=\"text/javascript\">\n";			echo "   document.{$object}.focus();\n";			echo "</script>\n";		}		/**		 * Outputs JavaScript to set the name of the browser window.		 * @param $name the window name		 * @param $addServer if true (default) then the server id is		 *        attached to the name.		 */		function setWindowName($name, $addServer = true) {			echo "<script type=\"text/javascript\">\n";			echo "//<![CDATA[\n";			echo "   window.name = '{$name}", ($addServer ? ':'.htmlspecialchars($_REQUEST['server']) : ''), "';\n";			echo "//]]>\n";			echo "</script>\n";		}		/**		 * Converts a PHP.INI size variable to bytes.  Taken from publically available		 * function by Chris DeRose, here: http://www.php.net/manual/en/configuration.directives.php#ini.file-uploads		 * @param $strIniSize The PHP.INI variable		 * @return size in bytes, false on failure		 */		function inisizeToBytes($strIniSize) {			// This function will take the string value of an ini 'size' parameter,			// and return a double (64-bit float) representing the number of bytes			// that the parameter represents. Or false if $strIniSize is unparseable.			$a_IniParts = array();			if (!is_string($strIniSize))				return false;			if (!preg_match ('/^(\d+)([bkm]*)$/i', $strIniSize,$a_IniParts))				return false;			$nSize = (double) $a_IniParts[1];			$strUnit = strtolower($a_IniParts[2]);			switch($strUnit) {				case 'm':					return ($nSize * (double) 1048576);				case 'k':					return ($nSize * (double) 1024);				case 'b':				default:					return $nSize;			}		}		/**		 * Display a URL given an action associative array.		 * @param $action An associative array of the follow properties:		 *			'url'  => The first part of the URL (before the ?)		 *			'urlvars' => Associative array of (URL variable => field name)		 *						these are appended to the URL		 *			'urlfn' => Function to apply to URL before display		 * @param $fields Field data from which 'urlfield' and 'vars' are obtained.		 * @param $attr If supplied then the URL will be quoted and prefixed with		 *				'$attr='.		 */		function printActionUrl(&$action, &$fields, $attr = null) {			$url = value($action['url'], $fields);			if ($url === false) return '';			if (!empty($action['urlvars'])) {				$urlvars = value($action['urlvars'], $fields);			} else {				$urlvars = array();			}			if (isset($urlvars['subject'])) {				$subject = value($urlvars['subject'], $fields);				if (isset($_REQUEST['server']) && $subject != 'root') {					$urlvars['server'] = $_REQUEST['server'];					if (isset($_REQUEST['database']) && $subject != 'server') {						$urlvars['database'] = $_REQUEST['database'];						if (isset($_REQUEST['schema']) && $subject != 'database') {							$urlvars['schema'] = $_REQUEST['schema'];						}					}				}			}			$sep = '?';			foreach ($urlvars as $var => $varfield) {				$url .= $sep . value_url($var, $fields) . '=' . value_url($varfield, $fields);				$sep = '&';			}			$url = htmlentities($url);			if ($attr !== null && $url != '')				return ' '.$attr.'="'.$url.'"';			else				return $url;		}		function getRequestVars($subject = '') {			$v = array();			if (!empty($subject))				$v['subject'] = $subject;			if (isset($_REQUEST['server']) && $subject != 'root') {				$v['server'] = $_REQUEST['server'];				if (isset($_REQUEST['database']) && $subject != 'server') {					$v['database'] = $_REQUEST['database'];					if (isset($_REQUEST['schema']) && $subject != 'database') {						$v['schema'] = $_REQUEST['schema'];					}				}			}			return $v;		}		function printUrlVars(&$vars, &$fields) {			foreach ($vars as $var => $varfield) {				echo "{$var}=", urlencode($fields[$varfield]), "&amp;";			}		}		/**		 * Display a table of data.		 * @param $tabledata A set of data to be formatted, as returned by $data->getDatabases() etc.		 * @param $columns   An associative array of columns to be displayed:		 *			$columns = array(		 *				column_id => array(		 *					'title' => Column heading,		 *					'field' => Field name for $tabledata->fields[...],		 *					'help'  => Help page for this column,		 *				), ...		 *			);		 * @param $actions   Actions that can be performed on each object:		 *			$actions = array(		 *				* multi action support		 *				* parameters are serialized for each entries and given in $_REQUEST['ma']		 *				'multiactions' => array(		 *					'keycols' => Associative array of (URL variable => field name), // fields included in the form		 *					'url' => URL submission,		 *					'default' => Default selected action in the form.		 *									if null, an empty action is added & selected		 *				),		 *				* actions *		 *				action_id => array(		 *					'title' => Action heading,		 *					'url'   => Static part of URL.  Often we rely		 *							   relative urls, usually the page itself (not '' !), or just a query string,		 *					'vars'  => Associative array of (URL variable => field name),		 *					'multiaction' => Name of the action to execute.		 *										Add this action to the multi action form		 *				), ...		 *			);		 * @param $nodata    (optional) Message to display if data set is empty.		 * @param $pre_fn    (optional) Name of a function to call for each row,		 *					 it will be passed two params: $rowdata and $actions,		 *					 it may be used to derive new fields or modify actions.		 *					 It can return an array of actions specific to the row,		 *					 or if nothing is returned then the standard actions are used.		 *					 (see tblproperties.php and constraints.php for examples)		 *					 The function must not must not store urls because		 *					 they are relative and won't work out of context.		 */		function printTable(&$tabledata, &$columns, &$actions, $nodata = null, $pre_fn = null) {			global $data, $conf, $misc, $lang;			if ($has_ma = isset($actions['multiactions']))				$ma = $actions['multiactions'];			unset($actions['multiactions']);			if ($tabledata->recordCount() > 0) {				// Remove the 'comment' column if they have been disabled				if (!$conf['show_comments']) {					unset($columns['comment']);				}				if (isset($columns['comment'])) {					// Uncomment this for clipped comments.					// TODO: This should be a user option.					//$columns['comment']['params']['clip'] = true;				}				if ($has_ma) {					echo "<script src=\"multiactionform.js\" type=\"text/javascript\"></script>\n";					echo "<form id=\"multi_form\" action=\"{$ma['url']}\" method=\"post\" enctype=\"multipart/form-data\">\n";					if (isset($ma['vars']))						foreach ($ma['vars'] as $k => $v)							echo "<input type=\"hidden\" name=\"$k\" value=\"$v\" />";				}				echo "<table>\n";				echo "<tr>\n";				// Display column headings				if ($has_ma) echo "<th></th>";				foreach ($columns as $column_id => $column) {					switch ($column_id) {						case 'actions':							if (sizeof($actions) > 0) echo "<th class=\"data\" colspan=\"", count($actions), "\">{$column['title']}</th>\n";							break;						default:							echo "<th class=\"data\">";							if (isset($column['help']))								$this->printHelp($column['title'], $column['help']);							else								echo $column['title'];							echo "</th>\n";							break;					}				}				echo "</tr>\n";				// Display table rows				$i = 0;				while (!$tabledata->EOF) {					$id = ($i % 2) + 1;					unset($alt_actions);					if (!is_null($pre_fn)) $alt_actions = $pre_fn($tabledata, $actions);					if (!isset($alt_actions)) $alt_actions =& $actions;					echo "<tr class=\"data{$id}\">\n";					if ($has_ma) {						foreach ($ma['keycols'] as $k => $v)							$a[$k] = $tabledata->fields[$v];						echo "<td>";						echo "<input type=\"checkbox\" name=\"ma[]\" value=\"". htmlentities(serialize($a)) ."\" />";						echo "</td>\n";					}					foreach ($columns as $column_id => $column) {						// Apply default values for missing parameters						if (isset($column['url']) && !isset($column['vars'])) $column['vars'] = array();						switch ($column_id) {							case 'actions':								foreach ($alt_actions as $action) {									if (isset($action['disable']) && $action['disable'] === true) {										echo "<td></td>\n";									} else {										echo "<td class=\"opbutton{$id}\">";										echo "<a href=\"{$action['url']}";										if ($action['url'] === '') echo '?';										$misc->printUrlVars($action['vars'], $tabledata->fields);										if (isset($action['target']))											echo "\" target=\"{$action['target']}";										echo "\">{$action['title']}</a></td>\n";									}								}								break;							default:								echo "<td>";								$val = value($column['field'], $tabledata->fields);								if (!is_null($val)) {									if (isset($column['url'])) {										echo "<a href=\"{$column['url']}";										$misc->printUrlVars($column['vars'], $tabledata->fields);										echo "\">";									}									$type = isset($column['type']) ? $column['type'] : null;									$params = isset($column['params']) ? $column['params'] : array();									echo $misc->printVal($val, $type, $params);									if (isset($column['url'])) echo "</a>";								}								echo "</td>\n";								break;						}					}					echo "</tr>\n";					$tabledata->moveNext();					$i++;				}				echo "</table>\n";				// Multi action table footer w/ options & [un]check'em all				if ($has_ma) {					// if default is not set or doesn't exist, set it to null					if (!isset($ma['default']) || !isset($actions[$ma['default']]))						$ma['default'] = null;					echo "<br />\n";					echo "<table>\n";					echo "<tr>\n";					echo "<th class=\"data\" style=\"text-align: left\" colspan=\"3\">{$lang['stractionsonmultiplelines']}</th>\n";					echo "</tr>\n";					echo "<tr class=\"row1\">\n";					echo "<td>";					echo "<a href=\"#\" onclick=\"javascript:checkAll(true);\">{$lang['strselectall']}</a> / ";					echo "<a href=\"#\" onclick=\"javascript:checkAll(false);\">{$lang['strunselectall']}</a></td>\n";					echo "<td>&nbsp;--->&nbsp;</td>\n";					echo "<td>\n";					echo "\t<select name=\"action\">\n";					if ($ma['default'] == null)						echo "\t\t<option value=\"\">--</option>\n";					foreach($actions as $k => $a)						if (isset($a['multiaction']))							echo "\t\t<option value=\"{$a['multiaction']}\"", ($ma['default']  == $k? ' selected="selected"': ''), ">{$a['title']}</option>\n";					echo "\t</select>\n";					echo "<input type=\"submit\" value=\"{$lang['strexecute']}\" />\n";					echo $misc->form;					echo "</td>\n";					echo "</tr>\n";					echo "</table>\n";					echo '</form>';				};				return true;			} else {				if (!is_null($nodata)) {					echo "<p>{$nodata}</p>\n";				}				return false;			}		}		/** Produce XML data for the browser tree		 * @param $treedata A set of records to populate the tree.		 * @param $attrs Attributes for tree items		 *        'text' - the text for the tree node		 *        'icon' - an icon for node		 *        'openIcon' - an alternative icon when the node is expanded		 *        'toolTip' - tool tip text for the node		 *        'action' - URL to visit when single clicking the node		 *        'iconAction' - URL to visit when single clicking the icon node		 *        'branch' - URL for child nodes (tree XML)		 *        'expand' - the action to return XML for the subtree		 *        'nodata' - message to display when node has no children		 *        'nohead' - suppress headers and opening <tree> tag		 *        'nofoot' - suppress closing </tree> tag		 */		function printTreeXML(&$treedata, &$attrs) {			global $conf, $lang;			if (!isset($attrs['nohead']) || $attrs['nohead'] === false) {				header("Content-Type: text/xml");				header("Cache-Control: no-cache");				echo "<?xml version=\"1.0\" encoding=\"", htmlspecialchars($lang['appcharset']), "\"?>\n";				echo "<tree>\n";			}			if ($treedata->recordCount() > 0) {				while (!$treedata->EOF) {					$rec =& $treedata->fields;					echo "<tree";					echo value_xml_attr('text', $attrs['text'], $rec);					echo value_xml_attr('action', $attrs['action'], $rec);					echo value_xml_attr('src', $attrs['branch'], $rec);					$icon = $this->icon(value($attrs['icon'], $rec));					echo value_xml_attr('icon', $icon, $rec);					echo value_xml_attr('iconaction', $attrs['iconAction'], $rec);					if (!empty($attrs['openicon'])) {						$icon = $this->icon(value($attrs['openIcon'], $rec));					}					echo value_xml_attr('openicon', $icon, $rec);					echo value_xml_attr('tooltip', $attrs['toolTip'], $rec);					echo " />\n";					$treedata->moveNext();				}			} else {				$msg = isset($attrs['nodata']) ? $attrs['nodata'] : $lang['strnoobjects'];				echo "<tree text=\"{$msg}\" onaction=\"tree.getSelected().getParent().reload()\" icon=\"", $this->icon('ObjectNotFound'), "\" />\n";			}			if (!isset($attrs['nofoot']) || $attrs['nofoot'] === false) {				echo "</tree>\n";			}		}		function adjustTabsForTree(&$tabs) {			include_once('./classes/ArrayRecordSet.php');			foreach ($tabs as $i => $tab) {				if ((isset($tab['hide']) && $tab['hide'] === true) || (isset($tab['tree']) && $tab['tree'] === false)) {					unset($tabs[$i]);				}			}			return new ArrayRecordSet($tabs);		}		function icon($icon) {			global $conf;			$path = "images/themes/{$conf['theme']}/{$icon}";			if (file_exists($path.'.png')) return $path.'.png';			if (file_exists($path.'.gif')) return $path.'.gif';			$path = "images/themes/default/{$icon}";			if (file_exists($path.'.png')) return $path.'.png';			if (file_exists($path.'.gif')) return $path.'.gif';			return '';		}		/**		 * Function to escape command line parameters		 * @param $str The string to escape		 * @return The escaped string		 */		function escapeShellArg($str) {			global $data, $lang;			if (strtoupper(substr(PHP_OS, 0, 3)) === 'WIN') {				// Due to annoying PHP bugs, shell arguments cannot be escaped				// (command simply fails), so we cannot allow complex objects				// to be dumped.				if (preg_match('/^[_.[:alnum:]]+$/', $str))					return $str;				else {					echo $lang['strcannotdumponwindows'];					exit;				}			}			else				return escapeshellarg($str);		}		/**		 * Function to escape command line programs		 * @param $str The string to escape		 * @return The escaped string		 */		function escapeShellCmd($str) {			global $data;			if (strtoupper(substr(PHP_OS, 0, 3)) === 'WIN') {				$data->fieldClean($str);				return '"' . $str . '"';			}			else				return escapeshellcmd($str);		}		/**		 * Get list of servers' groups if existing in the conf		 * @return a recordset of servers' groups		 */		function getServersGroups() {			global $conf, $lang;			$grps = array();						foreach ($conf['srv_groups'] as $i => $group) {				$grps[$i] = array(					'id' => $i,					'desc' => $group['desc'],				);							}						$grps['all'] = array(				'id' => 'all', 				'desc' => $lang['strallservers'],			);			include_once('./classes/ArrayRecordSet.php');			return new ArrayRecordSet($grps);		}				/**		 * Get list of servers		 * @param $recordset return as RecordSet suitable for printTable if true,		 *                   otherwise just return an array.		 * @param $group a group name to filter the returned servers using $conf[srv_groups]		 */		function getServers($recordset = false, $group = false) {			global $conf;			$logins = isset($_SESSION['webdbLogin']) && is_array($_SESSION['webdbLogin']) ? $_SESSION['webdbLogin'] : array();			$srvs = array();			if (($group !== false) and ($group !== 'all'))				$group = array_fill_keys(explode(',', $conf['srv_groups'][$group]['servers']), 1);						foreach($conf['servers'] as $idx => $info) {				$server_id = $info['host'].':'.$info['port'].':'.$info['sslmode'];				if (($group === false) 					or (isset($group[$idx]))					or ($group === 'all')				) {					$server_id = $info['host'].':'.$info['port'].':'.$info['sslmode'];										if (isset($logins[$server_id])) $srvs[$server_id] = $logins[$server_id];					else $srvs[$server_id] = $info;					$srvs[$server_id]['id'] = $server_id;				}			}			function _cmp_desc($a, $b) {				return strcmp($a['desc'], $b['desc']);			}			uasort($srvs, '_cmp_desc');			if ($recordset) {				include_once('./classes/ArrayRecordSet.php');				return new ArrayRecordSet($srvs);			}			return $srvs;		}		/**		 * Validate and retrieve information on a server.		 * If the parameter isn't supplied then the currently		 * connected server is returned.		 * @param $server_id A server identifier (host:port)		 * @return An associative array of server properties		 */		function getServerInfo($server_id = null) {			global $conf, $_reload_browser, $lang;			if ($server_id === null && isset($_REQUEST['server']))				$server_id = $_REQUEST['server'];			// Check for the server in the logged-in list			if (isset($_SESSION['webdbLogin'][$server_id]))				return $_SESSION['webdbLogin'][$server_id];			// Otherwise, look for it in the conf file			foreach($conf['servers'] as $idx => $info) {				if ($server_id == $info['host'].':'.$info['port'].':'.$info['sslmode']) {					// Automatically use shared credentials if available					if (!isset($info['username']) && isset($_SESSION['sharedUsername'])) {						$info['username'] = $_SESSION['sharedUsername'];						$info['password'] = $_SESSION['sharedPassword'];						$_reload_browser = true;						$this->setServerInfo(null, $info, $server_id);					}					return $info;				}			}			if ($server_id === null){				return null;			} else {				// Unable to find a matching server, are we being hacked?				echo $lang['strinvalidserverparam'];				exit;			}		}		/**		 * Set server information.		 * @param $key parameter name to set, or null to replace all		 *             params with the assoc-array in $value.		 * @param $value the new value, or null to unset the parameter		 * @param $server_id the server identifier, or null for current		 *                   server.		 */		function setServerInfo($key, $value, $server_id = null)		{			if ($server_id === null && isset($_REQUEST['server']))				$server_id = $_REQUEST['server'];			if ($key === null) {				if ($value === null)					unset($_SESSION['webdbLogin'][$server_id]);				else					$_SESSION['webdbLogin'][$server_id] = $value;			} else {				if ($value === null)					unset($_SESSION['webdbLogin'][$server_id][$key]);				else					$_SESSION['webdbLogin'][$server_id][$key] = $value;			}		}				/**		 * Set the current schema		 * @param $schema The schema name		 * @return 0 on success		 * @return $data->seSchema() on error		 */		function setCurrentSchema($schema) {			global $data;						$status = $data->setSchema($schema);			if($status != 0)				return $status;			$_REQUEST['schema'] = $schema;			$this->setHREF();			return 0;		}		/**		 * Save the given SQL script in the history 		 * of the database and server.		 * @param $script the SQL script to save.		 */		function saveScriptHistory($script) {			list($usec, $sec) = explode(' ', microtime());			$time = ((float)$usec + (float)$sec);			$_SESSION['history'][$_REQUEST['server']][$_REQUEST['database']]["$time"] = array(				'query' => $script,				'paginate' => (!isset($_REQUEST['paginate'])? 'f':'t'),				'queryid' => $time,			);		}			/*		 * Output dropdown list to select server and 		 * databases form the popups windows.		 * @param $onchange Javascript action to take when selections change.		 */			function printConnection($onchange) {			global $data, $lang, $misc;			echo "<table style=\"width: 100%\"><tr><td>\n";			echo "<label>";			$misc->printHelp($lang['strserver'], 'pg.server');			echo "</label>";			echo ": <select name=\"server\" {$onchange}>\n";						$servers = $misc->getServers();			foreach($servers as $info) {				if (empty($info['username'])) continue; // not logged on this server				echo "<option value=\"", htmlspecialchars($info['id']), "\"",					((isset($_REQUEST['server']) && $info['id'] == $_REQUEST['server'])) ? ' selected="selected"' : '', ">",					htmlspecialchars("{$info['desc']} ({$info['id']})"), "</option>\n";			}			echo "</select>\n</td><td style=\"text-align: right\">\n";						// Get the list of all databases			$databases = $data->getDatabases();			if ($databases->recordCount() > 0) {				echo "<label>";				$misc->printHelp($lang['strdatabase'], 'pg.database');				echo ": <select name=\"database\" {$onchange}>\n";								//if no database was selected, user should select one				if (!isset($_REQUEST['database']))					echo "<option value=\"\">--</option>\n";								while (!$databases->EOF) {					$dbname = $databases->fields['datname'];					echo "<option value=\"", htmlspecialchars($dbname), "\"",						((isset($_REQUEST['database']) && $dbname == $_REQUEST['database'])) ? ' selected="selected"' : '', ">",						htmlspecialchars($dbname), "</option>\n";					$databases->moveNext();				}				echo "</select></label>\n";			}			else {				$server_info = $misc->getServerInfo();				echo "<input type=\"hidden\" name=\"database\" value=\"", 					htmlspecialchars($server_info['defaultdb']), "\" />\n";			}						echo "</td></tr></table>\n";		}		/**		 * returns an array representing FKs definition for a table, sorted by fields		 * or by constraint.		 * @param $table The table to retrieve FK contraints from		 * @returns the array of FK definition:		 *   array(		 *     'byconstr' => array(		 *       constrain id => array(		 *         confrelid => foreign relation oid		 *         f_schema => foreign schema name		 *         f_table => foreign table name		 *         pattnums => array of parent's fields nums		 *         pattnames => array of parent's fields names		 *         fattnames => array of foreign attributes names		 *       )		 *     ),		 *     'byfield' => array(		 *       attribute num => array (constraint id, ...)		 *     ),		 *     'code' => HTML/js code to include in the page for auto-completion		 *   )		 **/		function getAutocompleteFKProperties($table) {			global $data;			$fksprops = array(				'byconstr' => array(),				'byfield' => array(),				'code' => ''			);			$constrs = $data->getConstraintsWithFields($table);			if (!$constrs->EOF) {				$conrelid = $constrs->fields['conrelid'];				while(!$constrs->EOF) {					if ($constrs->fields['contype'] == 'f') {						if (!isset($fksprops['byconstr'][$constrs->fields['conid']])) {							$fksprops['byconstr'][$constrs->fields['conid']] = array (								'confrelid' => $constrs->fields['confrelid'],								'f_table' => $constrs->fields['f_table'],								'f_schema' => $constrs->fields['f_schema'],								'pattnums' => array(),								'pattnames' => array(),								'fattnames' => array()							);						}						$fksprops['byconstr'][$constrs->fields['conid']]['pattnums'][] = $constrs->fields['p_attnum'];						$fksprops['byconstr'][$constrs->fields['conid']]['pattnames'][] = $constrs->fields['p_field'];						$fksprops['byconstr'][$constrs->fields['conid']]['fattnames'][] = $constrs->fields['f_field'];						if (!isset($fksprops['byfield'][$constrs->fields['p_attnum']]))							$fksprops['byfield'][$constrs->fields['p_attnum']] = array();						$fksprops['byfield'][$constrs->fields['p_attnum']][] = $constrs->fields['conid'];					}					$constrs->moveNext();				}				$fksprops['code'] = "<script type=\"text/javascript\">\n";				$fksprops['code'] .= "var constrs = {};\n";				foreach ($fksprops['byconstr'] as $conid => $props) {					$fksprops['code'] .= "constrs.constr_{$conid} = {\n";					$fksprops['code'] .= 'pattnums: ['. implode(',',$props['pattnums']) ."],\n";					$fksprops['code'] .= "f_table:'". addslashes(htmlentities($props['f_table'], ENT_QUOTES)) ."',\n";					$fksprops['code'] .= "f_schema:'". addslashes(htmlentities($props['f_schema'], ENT_QUOTES)) ."',\n";					$_ = '';					foreach ($props['pattnames'] as $n) {						$_ .= ",'". htmlentities($n, ENT_QUOTES) ."'";					}					$fksprops['code'] .= 'pattnames: ['. substr($_, 1) ."],\n";					$_ = '';					foreach ($props['fattnames'] as $n) {						$_ .= ",'". htmlentities($n, ENT_QUOTES) ."'";					}					$fksprops['code'] .= 'fattnames: ['. substr($_, 1) ."]\n";					$fksprops['code'] .= "};\n";				}				$fksprops['code'] .= "var attrs = {};\n";				foreach ($fksprops['byfield'] as $attnum => $cstrs ) {					$fksprops['code'] .= "attrs.attr_{$attnum} = [". implode(',', $fksprops['byfield'][$attnum]) ."];\n";				}				$fksprops['code'] .= "var table='". addslashes(htmlentities($table, ENT_QUOTES)) ."';";				$fksprops['code'] .= "var server='". htmlentities($_REQUEST['server']) ."';";				$fksprops['code'] .= "var database='". addslashes(htmlentities($_REQUEST['database'], ENT_QUOTES)) ."';";				$fksprops['code'] .= "</script>\n";				$fksprops['code'] .= '<div id="fkbg"></div>';				$fksprops['code'] .= '<div id="fklist"></div>';				$fksprops['code'] .= '<script src="libraries/js/jquery.js" type="text/javascript"></script>';				$fksprops['code'] .= '<script src="js/ac_insert_row.js" type="text/javascript"></script>';			}			else /* we have no foreign keys on this table */				return false;			return $fksprops;		}	}?>
<?php	/**	 * Manage operators in a database	 *	 * $Id: operators.php,v 1.29 2007/08/31 18:30:11 ioguix Exp $	 */	// Include application functions	include_once('./libraries/lib.inc.php');		$action = (isset($_REQUEST['action'])) ? $_REQUEST['action'] : '';	if (!isset($msg)) $msg = '';	/**	 * Show read only properties for an operator	 */	function doProperties($msg = '') {		global $data, $misc;		global $lang;		$misc->printTrail('operator');		$misc->printTitle($lang['strproperties'],'pg.operator');		$misc->printMsg($msg);				$oprdata = $data->getOperator($_REQUEST['operator_oid']);		$oprdata->fields['oprcanhash'] = $data->phpBool($oprdata->fields['oprcanhash']);		if ($oprdata->recordCount() > 0) {			echo "<table>\n";			echo "<tr><th class=\"data left\">{$lang['strname']}</th>\n";			echo "<td class=\"data1\">", $misc->printVal($oprdata->fields['oprname']), "</td></tr>\n";			echo "<tr><th class=\"data left\">{$lang['strleftarg']}</th>\n";			echo "<td class=\"data1\">", $misc->printVal($oprdata->fields['oprleftname']), "</td></tr>\n";			echo "<tr><th class=\"data left\">{$lang['strrightarg']}</th>\n";			echo "<td class=\"data1\">", $misc->printVal($oprdata->fields['oprrightname']), "</td></tr>\n";			echo "<tr><th class=\"data left\">{$lang['strcommutator']}</th>\n";			echo "<td class=\"data1\">", $misc->printVal($oprdata->fields['oprcom']), "</td></tr>\n";			echo "<tr><th class=\"data left\">{$lang['strnegator']}</th>\n";			echo "<td class=\"data1\">", $misc->printVal($oprdata->fields['oprnegate']), "</td></tr>\n";			echo "<tr><th class=\"data left\">{$lang['strjoin']}</th>\n";			echo "<td class=\"data1\">", $misc->printVal($oprdata->fields['oprjoin']), "</td></tr>\n";			echo "<tr><th class=\"data left\">{$lang['strhashes']}</th>\n";			echo "<td class=\"data1\">", ($oprdata->fields['oprcanhash']) ? $lang['stryes'] : $lang['strno'], "</td></tr>\n";			/* these field only exists in 8.2 and before in pg_catalog */			if (isset($oprdata->fields['oprlsortop'])) {				echo "<tr><th class=\"data left\">{$lang['strmerges']}</th>\n";				echo "<td class=\"data1\">", ($oprdata->fields['oprlsortop'] !== '0' && $oprdata->fields['oprrsortop'] !== '0') ? $lang['stryes'] : $lang['strno'], "</td></tr>\n";				echo "<tr><th class=\"data left\">{$lang['strrestrict']}</th>\n";				echo "<td class=\"data1\">", $misc->printVal($oprdata->fields['oprrest']), "</td></tr>\n";				echo "<tr><th class=\"data left\">{$lang['strleftsort']}</th>\n";				echo "<td class=\"data1\">", $misc->printVal($oprdata->fields['oprlsortop']), "</td></tr>\n";				echo "<tr><th class=\"data left\">{$lang['strrightsort']}</th>\n";				echo "<td class=\"data1\">", $misc->printVal($oprdata->fields['oprrsortop']), "</td></tr>\n";				echo "<tr><th class=\"data left\">{$lang['strlessthan']}</th>\n";				echo "<td class=\"data1\">", $misc->printVal($oprdata->fields['oprltcmpop']), "</td></tr>\n";				echo "<tr><th class=\"data left\">{$lang['strgreaterthan']}</th>\n";				echo "<td class=\"data1\">", $misc->printVal($oprdata->fields['oprgtcmpop']), "</td></tr>\n";			}			else {				echo "<tr><th class=\"data left\">{$lang['strmerges']}</th>\n";				echo "<td class=\"data1\">", $data->phpBool($oprdata->fields['oprcanmerge']) ? $lang['stryes'] : $lang['strno'], "</td></tr>\n";			}			echo "</table>\n";			echo "<p><a class=\"navlink\" href=\"operators.php?{$misc->href}\">{$lang['strshowalloperators']}</a></p>\n";		}		else			doDefault($lang['strinvalidparam']);	}	/**	 * Show confirmation of drop and perform actual drop	 */	function doDrop($confirm) {		global $data, $misc;		global $lang;		if ($confirm) {			$misc->printTrail('operator');			$misc->printTitle($lang['strdrop'], 'pg.operator.drop');						echo "<p>", sprintf($lang['strconfdropoperator'], $misc->printVal($_REQUEST['operator'])), "</p>\n";							echo "<form action=\"operators.php\" method=\"post\">\n";			echo "<p><input type=\"checkbox\" id=\"cascade\" name=\"cascade\" /> <label for=\"cascade\">{$lang['strcascade']}</label></p>\n";			echo "<p><input type=\"hidden\" name=\"action\" value=\"drop\" />\n";			echo "<input type=\"hidden\" name=\"operator\" value=\"", htmlspecialchars($_REQUEST['operator']), "\" />\n";			echo "<input type=\"hidden\" name=\"operator_oid\" value=\"", htmlspecialchars($_REQUEST['operator_oid']), "\" />\n";			echo $misc->form;			echo "<input type=\"submit\" name=\"drop\" value=\"{$lang['strdrop']}\" />\n";			echo "<input type=\"submit\" name=\"cancel\" value=\"{$lang['strcancel']}\" /></p>\n";			echo "</form>\n";		}		else {			$status = $data->dropOperator($_POST['operator_oid'], isset($_POST['cascade']));			if ($status == 0)				doDefault($lang['stroperatordropped']);			else				doDefault($lang['stroperatordroppedbad']);		}			}		/**	 * Show default list of operators in the database	 */	function doDefault($msg = '') {		global $data, $conf, $misc;		global $lang;				$misc->printTrail('schema');		$misc->printTabs('schema','operators');		$misc->printMsg($msg);				$operators = $data->getOperators();		$columns = array(			'operator' => array(				'title' => $lang['stroperator'],				'field' => field('oprname'),				'url'   => "operators.php?action=properties&amp;{$misc->href}&amp;",				'vars'  => array('operator' => 'oprname', 'operator_oid' => 'oid'),			),			'leftarg' => array(				'title' => $lang['strleftarg'],				'field' => field('oprleftname'),			),			'rightarg' => array(				'title' => $lang['strrightarg'],				'field' => field('oprrightname'),			),			'returns' => array(				'title' => $lang['strreturns'],				'field' => field('resultname'),			),			'actions' => array(				'title' => $lang['stractions'],			),			'comment' => array(				'title' => $lang['strcomment'],				'field' => field('oprcomment'),			),		);		$actions = array(			'drop' => array(				'title' => $lang['strdrop'],				'url'   => "operators.php?action=confirm_drop&amp;{$misc->href}&amp;",				'vars'  => array('operator' => 'oprname', 'operator_oid' => 'oid'),			),		);				$misc->printTable($operators, $columns, $actions, $lang['strnooperators']);		//		echo "<p><a class=\"navlink\" href=\"operators.php?action=create&amp;{$misc->href}\">{$lang['strcreateoperator']}</a></p>\n";	}	/**	 * Generate XML for the browser tree.	 */	function doTree() {		global $misc, $data;				$operators = $data->getOperators();				// Operator prototype: "type operator type"		$proto = concat(field('oprleftname'), ' ', field('oprname'), ' ', field('oprrightname'));				$reqvars = $misc->getRequestVars('operator');				$attrs = array(			'text'   => $proto,			'icon'   => 'Operator',			'toolTip'=> field('oprcomment'),			'action' => url('operators.php',							$reqvars,							array(								'action'  => 'properties',								'operator' => $proto,								'operator_oid' => field('oid')							)						)		);				$misc->printTreeXML($operators, $attrs);		exit;	}		if ($action == 'tree') doTree();		$misc->printHeader($lang['stroperators']);	$misc->printBody();	switch ($action) {		case 'save_create':			if (isset($_POST['cancel'])) doDefault();			else doSaveCreate();			break;		case 'create':			doCreate();			break;		case 'drop':			if (isset($_POST['cancel'])) doDefault();			else doDrop(false);			break;		case 'confirm_drop':			doDrop(true);			break;					case 'properties':			doProperties();			break;		default:			doDefault();			break;	}		$misc->printFooter();?>
<?php	/**	 * List indexes on a table	 *	 * $Id: indexes.php,v 1.46 2008/01/08 22:50:29 xzilla Exp $	 */	// Include application functions	include_once('./libraries/lib.inc.php');	include_once('./classes/class.select.php');			$action = (isset($_REQUEST['action'])) ? $_REQUEST['action'] : '';	/**	 * Show confirmation of cluster index and perform actual cluster	 */	function doClusterIndex($confirm) {		global $data, $misc, $action;		global $lang;		if ($confirm) {			// Default analyze to on			$_REQUEST['analyze'] = true;						$misc->printTrail('index');			$misc->printTitle($lang['strclusterindex'],'pg.index.cluster');			echo "<p>", sprintf($lang['strconfcluster'], $misc->printVal($_REQUEST['index'])), "</p>\n";			echo "<form action=\"indexes.php\" method=\"post\">\n";			echo "<p><input type=\"checkbox\" id=\"analyze\" name=\"analyze\"", (isset($_REQUEST['analyze']) ? ' checked="checked"' : ''), " /><label for=\"analyze\">{$lang['stranalyze']}</label></p>\n";			echo "<input type=\"hidden\" name=\"action\" value=\"cluster_index\" />\n";			echo "<input type=\"hidden\" name=\"table\" value=\"", htmlspecialchars($_REQUEST['table']), "\" />\n";			echo "<input type=\"hidden\" name=\"index\" value=\"", htmlspecialchars($_REQUEST['index']), "\" />\n";			echo $misc->form;			echo "<input type=\"submit\" name=\"cluster\" value=\"{$lang['strclusterindex']}\" />\n";			echo "<input type=\"submit\" name=\"cancel\" value=\"{$lang['strcancel']}\" />\n";			echo "</form>\n";		}		else {			$status = $data->clusterIndex($_POST['table'], $_POST['index']);			if ($status == 0)				if (isset($_POST['analyze'])){					$status = $data->analyzeDB($_POST['table']);					if ($status == 0)						doDefault($lang['strclusteredgood'] . ' ' . $lang['stranalyzegood']);					else						doDefault($lang['stranalyzebad']);				} else					doDefault($lang['strclusteredgood']);			else				doDefault($lang['strclusteredbad']);		}	}	function doReindex() {		global $data, $lang;		$status = $data->reindex('INDEX', $_REQUEST['index']);		if ($status == 0)			doDefault($lang['strreindexgood']);		else			doDefault($lang['strreindexbad']);	}	/**	 * Displays a screen where they can enter a new index	 */	function doCreateIndex($msg = '') {		global $data, $misc;		global $lang;		if (!isset($_POST['formIndexName'])) $_POST['formIndexName'] = '';		if (!isset($_POST['formIndexType'])) $_POST['formIndexType'] = null;		if (!isset($_POST['formCols'])) $_POST['formCols'] = '';		if (!isset($_POST['formWhere'])) $_POST['formWhere'] = '';		if (!isset($_POST['formSpc'])) $_POST['formSpc'] = '';		$attrs = $data->getTableAttributes($_REQUEST['table']);		// Fetch all tablespaces from the database		if ($data->hasTablespaces()) $tablespaces = $data->getTablespaces();				$misc->printTrail('table');		$misc->printTitle($lang['strcreateindex'],'pg.index.create');		$misc->printMsg($msg);		$selColumns = new XHTML_select("TableColumnList",true,10);		$selColumns->set_style("width: 10em;");		if ($attrs->recordCount() > 0) {			while (!$attrs->EOF) {				$selColumns->add(new XHTML_Option($attrs->fields['attname']));				$attrs->moveNext();			}		}		$selIndex = new XHTML_select("IndexColumnList[]", true, 10);		$selIndex->set_style("width: 10em;");		$selIndex->set_attribute("id", "IndexColumnList");		$buttonAdd    = new XHTML_Button("add", ">>");		$buttonAdd->set_attribute("onclick", "buttonPressed(this);");		$buttonAdd->set_attribute("type", "button");		$buttonRemove = new XHTML_Button("remove", "<<");		$buttonRemove->set_attribute("onclick", "buttonPressed(this);");				$buttonRemove->set_attribute("type", "button");		echo "<form onsubmit=\"doSelectAll();\" name=\"formIndex\" action=\"indexes.php\" method=\"post\">\n";		echo "<table>\n";		echo "<tr><th class=\"data required\" colspan=\"3\">{$lang['strindexname']}</th></tr>";		echo "<tr>";		echo "<td class=\"data1\" colspan=\"3\"><input type=\"text\" name=\"formIndexName\" size=\"32\" maxlength=\"{$data->_maxNameLen}\" value=\"", 			htmlspecialchars($_POST['formIndexName']), "\" /></td></tr>";		echo "<tr><th class=\"data\">{$lang['strtablecolumnlist']}</th><th class=\"data\">&nbsp;</th>";		echo "<th class=\"data required\">{$lang['strindexcolumnlist']}</th></tr>\n";		echo "<tr><td class=\"data1\">" . $selColumns->fetch() . "</td>\n";		echo "<td class=\"data1\">" . $buttonRemove->fetch() . $buttonAdd->fetch() . "</td>";		echo "<td class=\"data1\">" . $selIndex->fetch() . "</td></tr>\n";		echo "</table>\n";		echo "<table> \n";		echo "<tr>";		echo "<th class=\"data left required\" scope=\"row\">{$lang['strindextype']}</th>";		echo "<td class=\"data1\"><select name=\"formIndexType\">";		foreach ($data->typIndexes as $v) {			echo "<option value=\"", htmlspecialchars($v), "\"",				($v == $_POST['formIndexType']) ? ' selected="selected"' : '', ">", htmlspecialchars($v), "</option>\n";		}		echo "</select></td></tr>\n";						echo "<tr>";		echo "<th class=\"data left\" scope=\"row\"><label for=\"formUnique\">{$lang['strunique']}</label></th>";		echo "<td class=\"data1\"><input type=\"checkbox\" id=\"formUnique\" name=\"formUnique\"", (isset($_POST['formUnique']) ? 'checked="checked"' : ''), " /></td>";		echo "</tr>";		echo "<tr>";		echo "<th class=\"data left\" scope=\"row\">{$lang['strwhere']}</th>";		echo "<td class=\"data1\">(<input name=\"formWhere\" size=\"32\" maxlength=\"{$data->_maxNameLen}\" value=\"", 			htmlspecialchars($_POST['formWhere']), "\" />)</td>";		echo "</tr>";				// Tablespace (if there are any)		if ($data->hasTablespaces() && $tablespaces->recordCount() > 0) {			echo "\t<tr>\n\t\t<th class=\"data left\">{$lang['strtablespace']}</th>\n";			echo "\t\t<td class=\"data1\">\n\t\t\t<select name=\"formSpc\">\n";			// Always offer the default (empty) option			echo "\t\t\t\t<option value=\"\"",				($_POST['formSpc'] == '') ? ' selected="selected"' : '', "></option>\n";			// Display all other tablespaces			while (!$tablespaces->EOF) {				$spcname = htmlspecialchars($tablespaces->fields['spcname']);				echo "\t\t\t\t<option value=\"{$spcname}\"",					($spcname == $_POST['formSpc']) ? ' selected="selected"' : '', ">{$spcname}</option>\n";				$tablespaces->moveNext();			}			echo "\t\t\t</select>\n\t\t</td>\n\t</tr>\n";		}		if ($data->hasConcurrentIndexBuild()) {			echo "<tr>";			echo "<th class=\"data left\" scope=\"row\"><label for=\"formConcur\">{$lang['strconcurrently']}</label></th>";			echo "<td class=\"data1\"><input type=\"checkbox\" id=\"formConcur\" name=\"formConcur\"", (isset($_POST['formConcur']) ? 'checked="checked"' : ''), " /></td>";			echo "</tr>";		}			echo "</table>";		echo "<p><input type=\"hidden\" name=\"action\" value=\"save_create_index\" />\n";		echo $misc->form;		echo "<input type=\"hidden\" name=\"table\" value=\"", htmlspecialchars($_REQUEST['table']), "\" />\n";		echo "<input type=\"submit\" value=\"{$lang['strcreate']}\" />\n";		echo "<input type=\"submit\" name=\"cancel\" value=\"{$lang['strcancel']}\" /></p>\n";		echo "</form>\n";	}	/**	 * Actually creates the new index in the database	 * @@ Note: this function can't handle columns with commas in them	 */	function doSaveCreateIndex() {		global $data;		global $lang;				// Handle databases that don't have partial indexes		if (!isset($_POST['formWhere'])) $_POST['formWhere'] = '';		// Default tablespace to null if it isn't set		if (!isset($_POST['formSpc'])) $_POST['formSpc'] = null;				// Check that they've given a name and at least one column		if ($_POST['formIndexName'] == '') doCreateIndex($lang['strindexneedsname']);		elseif (!isset($_POST['IndexColumnList']) || $_POST['IndexColumnList'] == '') doCreateIndex($lang['strindexneedscols']);		else {			$status = $data->createIndex($_POST['formIndexName'], $_POST['table'], $_POST['IndexColumnList'], 				$_POST['formIndexType'], isset($_POST['formUnique']), $_POST['formWhere'], $_POST['formSpc'], 				isset($_POST['formConcur']));			if ($status == 0)				doDefault($lang['strindexcreated']);			else				doCreateIndex($lang['strindexcreatedbad']);		}	}	/**	 * Show confirmation of drop index and perform actual drop	 */	function doDropIndex($confirm) {		global $data, $misc;		global $lang;		if ($confirm) {			$misc->printTrail('index');			$misc->printTitle($lang['strdrop'],'pg.index.drop');			echo "<p>", sprintf($lang['strconfdropindex'], $misc->printVal($_REQUEST['index'])), "</p>\n";			echo "<form action=\"indexes.php\" method=\"post\">\n";			echo "<input type=\"hidden\" name=\"action\" value=\"drop_index\" />\n";			echo "<input type=\"hidden\" name=\"table\" value=\"", htmlspecialchars($_REQUEST['table']), "\" />\n";			echo "<input type=\"hidden\" name=\"index\" value=\"", htmlspecialchars($_REQUEST['index']), "\" />\n";			echo $misc->form;			echo "<p><input type=\"checkbox\" id=\"cascade\" name=\"cascade\" /> <label for=\"cascade\">{$lang['strcascade']}</label></p>\n";			echo "<input type=\"submit\" name=\"drop\" value=\"{$lang['strdrop']}\" />\n";			echo "<input type=\"submit\" name=\"cancel\" value=\"{$lang['strcancel']}\" />\n";			echo "</form>\n";		}		else {			$status = $data->dropIndex($_POST['index'], isset($_POST['cascade']));			if ($status == 0)				doDefault($lang['strindexdropped']);			else				doDefault($lang['strindexdroppedbad']);		}	}	function doDefault($msg = '') {		global $data, $misc;		global $lang;				function indPre(&$rowdata, $actions) {			global $data, $lang;						if ($data->phpBool($rowdata->fields['indisprimary'])) {				$rowdata->fields['+constraints'] = $lang['strprimarykey'];				$actions['drop']['disable'] = true;			}			elseif ($data->phpBool($rowdata->fields['indisunique'])) {				$rowdata->fields['+constraints'] = $lang['struniquekey'];				$actions['drop']['disable'] = true;			}			else				$rowdata->fields['+constraints'] = '';						return $actions;		}				$misc->printTrail('table');		$misc->printTabs('table','indexes');		$misc->printMsg($msg);		$indexes = $data->getIndexes($_REQUEST['table']);				$columns = array(			'index' => array(				'title' => $lang['strname'],				'field' => field('indname'),			),			'definition' => array(				'title' => $lang['strdefinition'],				'field' => field('inddef'),			),			'constraints' => array(				'title' => $lang['strconstraints'],				'field' => field('+constraints'),				'type'  => 'verbatim',				'params'=> array('align' => 'center'),			),			'clustered' => array(				'title' => $lang['strclustered'],				'field' => field('indisclustered'),				'type'  => 'yesno',			),			'actions' => array(				'title' => $lang['stractions'],			),			'comment' => array(				'title' => $lang['strcomment'],				'field' => field('idxcomment'),			),		);				$actions = array(			'cluster' => array(				'title' => $lang['strclusterindex'],				'url'   => "indexes.php?action=confirm_cluster_index&amp;{$misc->href}&amp;table=".urlencode($_REQUEST['table'])."&amp;",				'vars'  => array('index' => 'indname'),			),			'reindex' => array(				'title' => $lang['strreindex'],				'url'   => "indexes.php?action=reindex&amp;{$misc->href}&amp;table=".urlencode($_REQUEST['table'])."&amp;",				'vars'  => array('index' => 'indname'),			),			'drop' => array(				'title' => $lang['strdrop'],				'url'   => "indexes.php?action=confirm_drop_index&amp;{$misc->href}&amp;table=".urlencode($_REQUEST['table'])."&amp;",				'vars'  => array('index' => 'indname'),			),		);				$misc->printTable($indexes, $columns, $actions, $lang['strnoindexes'], 'indPre');				echo "<p><a class=\"navlink\" href=\"indexes.php?action=create_index&amp;{$misc->href}&amp;table=", 			urlencode($_REQUEST['table']), "\">{$lang['strcreateindex']}</a></p>\n";			}	function doTree() {		global $misc, $data;		$indexes = $data->getIndexes($_REQUEST['table']);		$reqvars = $misc->getRequestVars('table');		function getIcon($f) {			if ($f['indisprimary'] == 't')				return 'PrimaryKey';			if ($f['indisunique'] == 't')				return 'UniqueConstraint';			return 'Index';		}		$attrs = array(			'text'   => field('indname'),			'icon'   => callback('getIcon'),		);		$misc->printTreeXML($indexes, $attrs);		exit;	}	if ($action == 'tree') doTree();	$misc->printHeader($lang['strindexes'], "<script src=\"indexes.js\" type=\"text/javascript\"></script>");	if ($action == 'create_index' || $action == 'save_create_index')		echo "<body onload=\"init();\">";	else		$misc->printBody();	switch ($action) {		case 'cluster_index':			if (isset($_POST['cluster'])) doClusterIndex(false);			else doDefault();			break;		case 'confirm_cluster_index':			doClusterIndex(true);			break;		case 'reindex':			doReindex();			break;		case 'save_create_index':			if (isset($_POST['cancel'])) doDefault();			else doSaveCreateIndex();			break;		case 'create_index':			doCreateIndex();			break;		case 'drop_index':			if (isset($_POST['drop'])) doDropIndex(false);			else doDefault();			break;		case 'confirm_drop_index':			doDropIndex(true);			break;		default:			doDefault();			break;	}	$misc->printFooter();?>
<?php	/**	 * Manage roles in a database cluster	 *	 * $Id: roles.php,v 1.13 2008/03/21 15:32:57 xzilla Exp $	 */	// Include application functions	include_once('./libraries/lib.inc.php');	$action = (isset($_REQUEST['action'])) ? $_REQUEST['action'] : '';	if (!isset($msg)) $msg = '';		/**	 * Displays a screen for create a new role	 */	function doCreate($msg = '') {		global $data, $misc, $username;		global $lang;				if (!isset($_POST['formRolename'])) $_POST['formRolename'] = '';		if (!isset($_POST['formPassword'])) $_POST['formPassword'] = '';		if (!isset($_POST['formConfirm'])) $_POST['formConfirm'] = '';		if (!isset($_POST['formConnLimit'])) $_POST['formConnLimit'] = '';		if (!isset($_POST['formExpires'])) $_POST['formExpires'] = '';		if (!isset($_POST['memberof'])) $_POST['memberof'] = array();		if (!isset($_POST['members'])) $_POST['members'] = array();		if (!isset($_POST['adminmembers'])) $_POST['adminmembers'] = array();			$misc->printTrail('role');		$misc->printTitle($lang['strcreaterole'],'pg.role.create');		$misc->printMsg($msg);		echo "<form action=\"roles.php\" method=\"post\">\n";		echo "<table>\n";		echo "\t<tr>\n\t\t<th class=\"data left required\" style=\"width: 130px\">{$lang['strname']}</th>\n";		echo "\t\t<td class=\"data1\"><input size=\"15\" maxlength=\"{$data->_maxNameLen}\" name=\"formRolename\" value=\"", htmlspecialchars($_POST['formRolename']), "\" /></td>\n\t</tr>\n";		echo "\t<tr>\n\t\t<th class=\"data left\">{$lang['strpassword']}</th>\n";		echo "\t\t<td class=\"data1\"><input size=\"15\" type=\"password\" name=\"formPassword\" value=\"", htmlspecialchars($_POST['formPassword']), "\" /></td>\n\t</tr>\n";		echo "\t<tr>\n\t\t<th class=\"data left\">{$lang['strconfirm']}</th>\n";		echo "\t\t<td class=\"data1\"><input size=\"15\" type=\"password\" name=\"formConfirm\" value=\"", htmlspecialchars($_POST['formConfirm']), "\" /></td>\n\t</tr>\n";		echo "\t<tr>\n\t\t<th class=\"data left\"><label for=\"formSuper\">{$lang['strsuper']}</label></th>\n";		echo "\t\t<td class=\"data1\"><input type=\"checkbox\" id=\"formSuper\" name=\"formSuper\"", 			(isset($_POST['formSuper'])) ? ' checked="checked"' : '', " /></td>\n\t</tr>\n";		echo "\t<tr>\n\t\t<th class=\"data left\"><label for=\"formCreateDB\">{$lang['strcreatedb']}</label></th>\n";		echo "\t\t<td class=\"data1\"><input type=\"checkbox\" id=\"formCreateDB\" name=\"formCreateDB\"", 			(isset($_POST['formCreateDB'])) ? ' checked="checked"' : '', " /></td>\n\t</tr>\n";		echo "\t<tr>\n\t\t<th class=\"data left\"><label for=\"formCreateRole\">{$lang['strcancreaterole']}</label></th>\n";		echo "\t\t<td class=\"data1\"><input type=\"checkbox\" id=\"formCreateRole\" name=\"formCreateRole\"", 			(isset($_POST['formCreateRole'])) ? ' checked="checked"' : '', " /></td>\n\t</tr>\n";		echo "\t<tr>\n\t\t<th class=\"data left\"><label for=\"formInherits\">{$lang['strinheritsprivs']}</label></th>\n";		echo "\t\t<td class=\"data1\"><input type=\"checkbox\" id=\"formInherits\" name=\"formInherits\"", 			(isset($_POST['formInherits'])) ? ' checked="checked"' : '', " /></td>\n\t</tr>\n";		echo "\t<tr>\n\t\t<th class=\"data left\"><label for=\"formCanLogin\">{$lang['strcanlogin']}</label></th>\n";		echo "\t\t<td class=\"data1\"><input type=\"checkbox\" id=\"formCanLogin\" name=\"formCanLogin\"", 			(isset($_POST['formCanLogin'])) ? ' checked="checked"' : '', " /></td>\n\t</tr>\n";					echo "\t<tr>\n\t\t<th class=\"data left\">{$lang['strconnlimit']}</th>\n";		echo "\t\t<td class=\"data1\"><input size=\"4\" name=\"formConnLimit\" value=\"", htmlspecialchars($_POST['formConnLimit']), "\" /></td>\n\t</tr>\n";		echo "\t<tr>\n\t\t<th class=\"data left\">{$lang['strexpires']}</th>\n";		echo "\t\t<td class=\"data1\"><input size=\"23\" name=\"formExpires\" value=\"", htmlspecialchars($_POST['formExpires']), "\" /></td>\n\t</tr>\n";				$roles = $data->getRoles();		if ($roles->recordCount() > 0) {			echo "\t<tr>\n\t\t<th class=\"data left\">{$lang['strmemberof']}</th>\n";			echo "\t\t<td class=\"data\">\n";			echo "\t\t\t<select name=\"memberof[]\" multiple=\"multiple\" size=\"", min(20, $roles->recordCount()), "\">\n";			while (!$roles->EOF) {				$rolename = $roles->fields['rolname'];				echo "\t\t\t\t<option value=\"{$rolename}\"",				(in_array($rolename, $_POST['memberof']) ? ' selected="selected"' : ''), ">", $misc->printVal($rolename), "</option>\n";				$roles->moveNext();			}			echo "\t\t\t</select>\n";			echo "\t\t</td>\n\t</tr>\n";						$roles->moveFirst();			echo "\t<tr>\n\t\t<th class=\"data left\">{$lang['strmembers']}</th>\n";			echo "\t\t<td class=\"data\">\n";			echo "\t\t\t<select name=\"members[]\" multiple=\"multiple\" size=\"", min(20, $roles->recordCount()), "\">\n";			while (!$roles->EOF) {				$rolename = $roles->fields['rolname'];				echo "\t\t\t\t<option value=\"{$rolename}\"",				(in_array($rolename, $_POST['members']) ? ' selected="selected"' : ''), ">", $misc->printVal($rolename), "</option>\n";				$roles->moveNext();			}			echo "\t\t\t</select>\n";			echo "\t\t</td>\n\t</tr>\n";			$roles->moveFirst();			echo "\t<tr>\n\t\t<th class=\"data left\">{$lang['stradminmembers']}</th>\n";			echo "\t\t<td class=\"data\">\n";			echo "\t\t\t<select name=\"adminmembers[]\" multiple=\"multiple\" size=\"", min(20, $roles->recordCount()), "\">\n";			while (!$roles->EOF) {				$rolename = $roles->fields['rolname'];				echo "\t\t\t\t<option value=\"{$rolename}\"",				(in_array($rolename, $_POST['adminmembers']) ? ' selected="selected"' : ''), ">", $misc->printVal($rolename), "</option>\n";				$roles->moveNext();			}			echo "\t\t\t</select>\n";			echo "\t\t</td>\n\t</tr>\n";		}				echo "</table>\n";		echo "<p><input type=\"hidden\" name=\"action\" value=\"save_create\" />\n";		echo $misc->form;		echo "<input type=\"submit\" name=\"create\" value=\"{$lang['strcreate']}\" />\n";		echo "<input type=\"submit\" name=\"cancel\" value=\"{$lang['strcancel']}\" /></p>\n";		echo "</form>\n";	}		/**	 * Actually creates the new role in the database	 */	function doSaveCreate() {		global $data, $lang;		if(!isset($_POST['memberof'])) $_POST['memberof'] = array();		if(!isset($_POST['members'])) $_POST['members'] = array();		if(!isset($_POST['adminmembers'])) $_POST['adminmembers'] = array();				// Check data		if ($_POST['formRolename'] == '')			doCreate($lang['strroleneedsname']);		else if ($_POST['formPassword'] != $_POST['formConfirm'])			doCreate($lang['strpasswordconfirm']);		else {					$status = $data->createRole($_POST['formRolename'], $_POST['formPassword'], isset($_POST['formSuper']), 				isset($_POST['formCreateDB']), isset($_POST['formCreateRole']), isset($_POST['formInherits']), 				isset($_POST['formCanLogin']), $_POST['formConnLimit'], $_POST['formExpires'], $_POST['memberof'], $_POST['members'],				$_POST['adminmembers']);			if ($status == 0)				doDefault($lang['strrolecreated']);			else				doCreate($lang['strrolecreatedbad']);		}	}		/**	 * Function to allow alter a role	 */	function doAlter($msg = '') {		global $data, $misc;		global $lang;		$misc->printTrail('role');		$misc->printTitle($lang['stralter'],'pg.role.alter');		$misc->printMsg($msg);						$roledata = $data->getRole($_REQUEST['rolename']);				if ($roledata->recordCount() > 0) {			$server_info = $misc->getServerInfo();			$canRename = $data->hasUserRename() && ($_REQUEST['rolename'] != $server_info['username']);			$roledata->fields['rolsuper'] = $data->phpBool($roledata->fields['rolsuper']);			$roledata->fields['rolcreatedb'] = $data->phpBool($roledata->fields['rolcreatedb']);			$roledata->fields['rolcreaterole'] = $data->phpBool($roledata->fields['rolcreaterole']);			$roledata->fields['rolinherit'] = $data->phpBool($roledata->fields['rolinherit']);			$roledata->fields['rolcanlogin'] = $data->phpBool($roledata->fields['rolcanlogin']);			if (!isset($_POST['formExpires'])){				if ($canRename) $_POST['formNewRoleName'] = $roledata->fields['rolname'];				if ($roledata->fields['rolsuper']) $_POST['formSuper'] = '';				if ($roledata->fields['rolcreatedb']) $_POST['formCreateDB'] = '';				if ($roledata->fields['rolcreaterole']) $_POST['formCreateRole'] = '';				if ($roledata->fields['rolinherit']) $_POST['formInherits'] = '';				if ($roledata->fields['rolcanlogin']) $_POST['formCanLogin'] = '';				$_POST['formConnLimit'] = $roledata->fields['rolconnlimit'] == '-1' ? '' : $roledata->fields['rolconnlimit'];				$_POST['formExpires'] = $roledata->fields['rolvaliduntil'] == 'infinity' ? '' : $roledata->fields['rolvaliduntil'];				$_POST['formPassword'] = '';			}					echo "<form action=\"roles.php\" method=\"post\">\n";			echo "<table>\n";			echo "\t<tr>\n\t\t<th class=\"data left\" style=\"width: 130px\">{$lang['strname']}</th>\n";			echo "\t\t<td class=\"data1\">", ($canRename ? "<input name=\"formNewRoleName\" size=\"15\" maxlength=\"{$data->_maxNameLen}\" value=\"" . htmlspecialchars($_POST['formNewRoleName']) . "\" />" : $misc->printVal($roledata->fields['rolname'])), "</td>\n\t</tr>\n";			echo "\t<tr>\n\t\t<th class=\"data left\">{$lang['strpassword']}</th>\n";			echo "\t\t<td class=\"data1\"><input type=\"password\" size=\"15\" name=\"formPassword\" value=\"", htmlspecialchars($_POST['formPassword']), "\" /></td>\n\t</tr>\n";			echo "\t<tr>\n\t\t<th class=\"data left\">{$lang['strconfirm']}</th>\n";			echo "\t\t<td class=\"data1\"><input type=\"password\" size=\"15\" name=\"formConfirm\" value=\"\" /></td>\n\t</tr>\n";			echo "\t<tr>\n\t\t<th class=\"data left\"><label for=\"formSuper\">{$lang['strsuper']}</label></th>\n";			echo "\t\t<td class=\"data1\"><input type=\"checkbox\" id=\"formSuper\" name=\"formSuper\"", 				(isset($_POST['formSuper'])) ? ' checked="checked"' : '', " /></td>\n\t</tr>\n";			echo "\t<tr>\n\t\t<th class=\"data left\"><label for=\"formCreateDB\">{$lang['strcreatedb']}</label></th>\n";			echo "\t\t<td class=\"data1\"><input type=\"checkbox\" id=\"formCreateDB\" name=\"formCreateDB\"", 				(isset($_POST['formCreateDB'])) ? ' checked="checked"' : '', " /></td>\n\t</tr>\n";			echo "\t<tr>\n\t\t<th class=\"data left\"><label for=\"formCreateRole\">{$lang['strcancreaterole']}</label></th>\n";			echo "\t\t<td class=\"data1\"><input type=\"checkbox\" id=\"formCreateRole\" name=\"formCreateRole\"", 				(isset($_POST['formCreateRole'])) ? ' checked="checked"' : '', " /></td>\n\t</tr>\n";			echo "\t<tr>\n\t\t<th class=\"data left\"><label for=\"formInherits\">{$lang['strinheritsprivs']}</label></th>\n";			echo "\t\t<td class=\"data1\"><input type=\"checkbox\" id=\"formInherits\" name=\"formInherits\"", 				(isset($_POST['formInherits'])) ? ' checked="checked"' : '', " /></td>\n\t</tr>\n";			echo "\t<tr>\n\t\t<th class=\"data left\"><label for=\"formCanLogin\">{$lang['strcanlogin']}</label></th>\n";			echo "\t\t<td class=\"data1\"><input type=\"checkbox\" id=\"formCanLogin\" name=\"formCanLogin\"", 				(isset($_POST['formCanLogin'])) ? ' checked="checked"' : '', " /></td>\n\t</tr>\n";			echo "\t<tr>\n\t\t<th class=\"data left\">{$lang['strconnlimit']}</th>\n";			echo "\t\t<td class=\"data1\"><input size=\"4\" name=\"formConnLimit\" value=\"", htmlspecialchars($_POST['formConnLimit']), "\" /></td>\n\t</tr>\n";			echo "\t<tr>\n\t\t<th class=\"data left\">{$lang['strexpires']}</th>\n";			echo "\t\t<td class=\"data1\"><input size=\"23\" name=\"formExpires\" value=\"", htmlspecialchars($_POST['formExpires']), "\" /></td>\n\t</tr>\n";			if (!isset($_POST['memberof']))			{				$memberof = $data->getMemberOf($_REQUEST['rolename']);				if ($memberof->recordCount() > 0) {					$i = 0;					while (!$memberof->EOF) {						$_POST['memberof'][$i++] = $memberof->fields['rolname'];						$memberof->moveNext();					}				}				else					$_POST['memberof'] = array();				$memberofold = implode(',', $_POST['memberof']);			}			if (!isset($_POST['members']))			{				$members = $data->getMembers($_REQUEST['rolename']);				if ($members->recordCount() > 0) {					$i = 0;					while (!$members->EOF) {						$_POST['members'][$i++] = $members->fields['rolname'];						$members->moveNext();					}				}				else					$_POST['members'] = array();				$membersold = implode(',', $_POST['members']);			}			if (!isset($_POST['adminmembers']))			{				$adminmembers = $data->getMembers($_REQUEST['rolename'], 't');				if ($adminmembers->recordCount() > 0) {					$i = 0;					while (!$adminmembers->EOF) {						$_POST['adminmembers'][$i++] = $adminmembers->fields['rolname'];						$adminmembers->moveNext();					}				}				else					$_POST['adminmembers'] = array();				$adminmembersold = implode(',', $_POST['adminmembers']);			}						$roles = $data->getRoles($_REQUEST['rolename']);			if ($roles->recordCount() > 0) {				echo "\t<tr>\n\t\t<th class=\"data left\">{$lang['strmemberof']}</th>\n";				echo "\t\t<td class=\"data\">\n";				echo "\t\t\t<select name=\"memberof[]\" multiple=\"multiple\" size=\"", min(20, $roles->recordCount()), "\">\n";				while (!$roles->EOF) {					$rolename = $roles->fields['rolname'];					echo "\t\t\t\t<option value=\"{$rolename}\"",					(in_array($rolename, $_POST['memberof']) ? ' selected="selected"' : ''), ">", $misc->printVal($rolename), "</option>\n";					$roles->moveNext();				}				echo "\t\t\t</select>\n";				echo "\t\t</td>\n\t</tr>\n";							$roles->moveFirst();				echo "\t<tr>\n\t\t<th class=\"data left\">{$lang['strmembers']}</th>\n";				echo "\t\t<td class=\"data\">\n";				echo "\t\t\t<select name=\"members[]\" multiple=\"multiple\" size=\"", min(20, $roles->recordCount()), "\">\n";				while (!$roles->EOF) {					$rolename = $roles->fields['rolname'];					echo "\t\t\t\t<option value=\"{$rolename}\"",					(in_array($rolename, $_POST['members']) ? ' selected="selected"' : ''), ">", $misc->printVal($rolename), "</option>\n";					$roles->moveNext();				}				echo "\t\t\t</select>\n";				echo "\t\t</td>\n\t</tr>\n";				$roles->moveFirst();				echo "\t<tr>\n\t\t<th class=\"data left\">{$lang['stradminmembers']}</th>\n";				echo "\t\t<td class=\"data\">\n";				echo "\t\t\t<select name=\"adminmembers[]\" multiple=\"multiple\" size=\"", min(20, $roles->recordCount()), "\">\n";				while (!$roles->EOF) {					$rolename = $roles->fields['rolname'];					echo "\t\t\t\t<option value=\"{$rolename}\"",					(in_array($rolename, $_POST['adminmembers']) ? ' selected="selected"' : ''), ">", $misc->printVal($rolename), "</option>\n";					$roles->moveNext();				}				echo "\t\t\t</select>\n";				echo "\t\t</td>\n\t</tr>\n";			}			echo "</table>\n";			echo "<p><input type=\"hidden\" name=\"action\" value=\"save_alter\" />\n";			echo "<input type=\"hidden\" name=\"rolename\" value=\"", htmlspecialchars($_REQUEST['rolename']), "\" />\n";			echo "<input type=\"hidden\" name=\"memberofold\" value=\"", isset($_POST['memberofold']) ? $_POST['memberofold'] : htmlspecialchars($memberofold), "\" />\n";			echo "<input type=\"hidden\" name=\"membersold\" value=\"", isset($_POST['membersold']) ? $_POST['membersold'] : htmlspecialchars($membersold), "\" />\n";			echo "<input type=\"hidden\" name=\"adminmembersold\" value=\"", isset($_POST['adminmembersold']) ? $_POST['adminmembersold'] : htmlspecialchars($adminmembersold), "\" />\n";			echo $misc->form;			echo "<input type=\"submit\" name=\"alter\" value=\"{$lang['stralter']}\" />\n";			echo "<input type=\"submit\" name=\"cancel\" value=\"{$lang['strcancel']}\" /></p>\n";			echo "</form>\n";		}		else echo "<p>{$lang['strnodata']}</p>\n";	}		/** 	 * Function to save after editing a role	 */	function doSaveAlter() {		global $data, $lang;		if(!isset($_POST['memberof'])) $_POST['memberof'] = array();		if(!isset($_POST['members'])) $_POST['members'] = array();		if(!isset($_POST['adminmembers'])) $_POST['adminmembers'] = array();		// Check name and password		if (isset($_POST['formNewRoleName']) && $_POST['formNewRoleName'] == '')			doAlter($lang['strroleneedsname']);		else if ($_POST['formPassword'] != $_POST['formConfirm'])			doAlter($lang['strpasswordconfirm']);		else {			if (isset($_POST['formNewRoleName'])) $status = $data->setRenameRole($_POST['rolename'], $_POST['formPassword'], isset($_POST['formSuper']), isset($_POST['formCreateDB']), isset($_POST['formCreateRole']), isset($_POST['formInherits']), isset($_POST['formCanLogin']), $_POST['formConnLimit'], $_POST['formExpires'], $_POST['memberof'], $_POST['members'], $_POST['adminmembers'], $_POST['memberofold'], $_POST['membersold'], $_POST['adminmembersold'], $_POST['formNewRoleName']);			else $status = $data->setRole($_POST['rolename'], $_POST['formPassword'], isset($_POST['formSuper']), isset($_POST['formCreateDB']), isset($_POST['formCreateRole']), isset($_POST['formInherits']), isset($_POST['formCanLogin']), $_POST['formConnLimit'], $_POST['formExpires'], $_POST['memberof'], $_POST['members'], $_POST['adminmembers'], $_POST['memberofold'], $_POST['membersold'], $_POST['adminmembersold']);			if ($status == 0)				doDefault($lang['strrolealtered']);			else				doAlter($lang['strrolealteredbad']);		}	}	/**	 * Show confirmation of drop a role and perform actual drop	 */	function doDrop($confirm) {		global $data, $misc;		global $lang;		if ($confirm) {			$misc->printTrail('role');			$misc->printTitle($lang['strdroprole'],'pg.role.drop');						echo "<p>", sprintf($lang['strconfdroprole'], $misc->printVal($_REQUEST['rolename'])), "</p>\n";							echo "<form action=\"roles.php\" method=\"post\">\n";			echo "<p><input type=\"hidden\" name=\"action\" value=\"drop\" />\n";			echo "<input type=\"hidden\" name=\"rolename\" value=\"", htmlspecialchars($_REQUEST['rolename']), "\" />\n";			echo $misc->form;			echo "<input type=\"submit\" name=\"drop\" value=\"{$lang['strdrop']}\" />\n";			echo "<input type=\"submit\" name=\"cancel\" value=\"{$lang['strcancel']}\" /></p>\n";			echo "</form>\n";		}		else {			$status = $data->dropRole($_REQUEST['rolename']);			if ($status == 0)				doDefault($lang['strroledropped']);			else				doDefault($lang['strroledroppedbad']);		}			}		/**	 * Show the properties of a role	 */	function doProperties($msg = '') {		global $data, $misc;		global $lang;		$misc->printTrail('role');		$misc->printTitle($lang['strproperties'],'pg.role');		$misc->printMsg($msg);					$roledata = $data->getRole($_REQUEST['rolename']);		if($roledata->recordCount() > 0 ) {			$roledata->fields['rolsuper'] = $data->phpBool($roledata->fields['rolsuper']);			$roledata->fields['rolcreatedb'] = $data->phpBool($roledata->fields['rolcreatedb']);			$roledata->fields['rolcreaterole'] = $data->phpBool($roledata->fields['rolcreaterole']);			$roledata->fields['rolinherit'] = $data->phpBool($roledata->fields['rolinherit']);			$roledata->fields['rolcanlogin'] = $data->phpBool($roledata->fields['rolcanlogin']);			echo "<table>\n";			echo "\t<tr>\n\t\t<th class=\"data\" style=\"width: 130px\">Description</th>\n";			echo "\t\t<th class=\"data\" style=\"width: 120\">Value</th>\n\t</tr>\n";			echo "\t<tr>\n\t\t<td class=\"data1\">{$lang['strname']}</td>\n";			echo "\t\t<td class=\"data1\">", htmlspecialchars($_REQUEST['rolename']), "</td>\n\t</tr>\n";			echo "\t<tr>\n\t\t<td class=\"data2\">{$lang['strsuper']}</td>\n";			echo "\t\t<td class=\"data2\">", (($roledata->fields['rolsuper']) ? $lang['stryes'] : $lang['strno']), "</td>\n\t</tr>\n";			echo "\t<tr>\n\t\t<td class=\"data1\">{$lang['strcreatedb']}</td>\n";			echo "\t\t<td class=\"data1\">", (($roledata->fields['rolcreatedb']) ? $lang['stryes'] : $lang['strno']), "</td>\n";			echo "\t<tr>\n\t\t<td class=\"data2\">{$lang['strcancreaterole']}</td>\n";			echo "\t\t<td class=\"data2\">", (($roledata->fields['rolcreaterole']) ? $lang['stryes'] : $lang['strno']), "</td>\n";			echo "\t<tr>\n\t\t<td class=\"data1\">{$lang['strinheritsprivs']}</td>\n";			echo "\t\t<td class=\"data1\">", (($roledata->fields['rolinherit']) ? $lang['stryes'] : $lang['strno']), "</td>\n";			echo "\t<tr>\n\t\t<td class=\"data2\">{$lang['strcanlogin']}</td>\n";			echo "\t\t<td class=\"data2\">", (($roledata->fields['rolcanlogin']) ? $lang['stryes'] : $lang['strno']), "</td>\n";			echo "\t<tr>\n\t\t<td class=\"data1\">{$lang['strconnlimit']}</td>\n";			echo "\t\t<td class=\"data1\">", ($roledata->fields['rolconnlimit'] == '-1' ? $lang['strnolimit'] : $misc->printVal($roledata->fields['rolconnlimit'])), "</td>\n";			echo "\t<tr>\n\t\t<td class=\"data2\">{$lang['strexpires']}</td>\n";			echo "\t\t<td class=\"data2\">", ($roledata->fields['rolvaliduntil'] == 'infinity' || is_null($roledata->fields['rolvaliduntil']) ? $lang['strnever'] : $misc->printVal($roledata->fields['rolvaliduntil'])), "</td>\n";			echo "\t<tr>\n\t\t<td class=\"data1\">{$lang['strsessiondefaults']}</td>\n";			echo "\t\t<td class=\"data1\">", $misc->printVal($roledata->fields['rolconfig']), "</td>\n";			echo "\t<tr>\n\t\t<td class=\"data2\">{$lang['strmemberof']}</td>\n";			echo "\t\t<td class=\"data2\">";			$memberof = $data->getMemberOf($_REQUEST['rolename']);			if ($memberof->recordCount() > 0) {					while (!$memberof->EOF) {					echo $misc->printVal($memberof->fields['rolname']), "<br />\n";					$memberof->moveNext();				}			}			echo "</td>\n\t</tr>\n";			echo "\t<tr>\n\t\t<td class=\"data1\">{$lang['strmembers']}</td>\n";			echo "\t\t<td class=\"data1\">";			$members = $data->getMembers($_REQUEST['rolename']);			if ($members->recordCount() > 0) {				while (!$members->EOF) {					echo $misc->printVal($members->fields['rolname']), "<br />\n";					$members->moveNext();				}			}			echo "</td>\n\t</tr>\n";			echo "\t<tr>\n\t\t<td class=\"data2\">{$lang['stradminmembers']}</td>\n";			echo "\t\t<td class=\"data2\">";			$adminmembers = $data->getMembers($_REQUEST['rolename'], 't');			if ($adminmembers->recordCount() > 0) {				while (!$adminmembers->EOF) {					echo $misc->printVal($adminmembers->fields['rolname']), "<br />\n";					$adminmembers->moveNext();				}			}			echo "</td>\n\t</tr>\n";			echo "</table>\n";		}		else echo "<p>{$lang['strnodata']}</p>\n";		echo "<ul class=\"navlink\">\n\t<li><a href=\"roles.php?{$misc->href}\">{$lang['strshowallroles']}</a></li>\n";		echo "\t<li><a href=\"roles.php?action=alter&amp;{$misc->href}&amp;rolename=", 			urlencode($_REQUEST['rolename']), "\">{$lang['stralter']}</a></li>\n";		echo "\t<li><a href=\"roles.php?action=confirm_drop&amp;{$misc->href}&amp;rolename=",			urlencode($_REQUEST['rolename']), "\">{$lang['strdrop']}</li>\n</ul>\n";	}	/**	 * If a role is not a superuser role, then we have an 'account management'	 * page for change his password, etc.  We don't prevent them from	 * messing with the URL to gain access to other role admin stuff, because	 * the PostgreSQL permissions will prevent them changing anything anyway.	 */	function doAccount($msg = '') {		global $data, $misc;		global $lang;				$server_info = $misc->getServerInfo();				$roledata = $data->getRole($server_info['username']);		$_REQUEST['rolename'] = $server_info['username'];				$misc->printTrail('role');		$misc->printTabs('server','account');		$misc->printMsg($msg);		if ($roledata->recordCount() > 0) {			$roledata->fields['rolsuper'] = $data->phpBool($roledata->fields['rolsuper']);			$roledata->fields['rolcreatedb'] = $data->phpBool($roledata->fields['rolcreatedb']);			$roledata->fields['rolcreaterole'] = $data->phpBool($roledata->fields['rolcreaterole']);			$roledata->fields['rolinherit'] = $data->phpBool($roledata->fields['rolinherit']);			echo "<table>\n";			echo "\t<tr>\n\t\t<th class=\"data\">{$lang['strname']}</th>\n";			echo "\t\t<th class=\"data\">{$lang['strsuper']}</th>\n";			echo "\t\t<th class=\"data\">{$lang['strcreatedb']}</th>\n";			echo "\t\t<th class=\"data\">{$lang['strcancreaterole']}</th>\n";			echo "\t\t<th class=\"data\">{$lang['strinheritsprivs']}</th>\n";			echo "\t\t<th class=\"data\">{$lang['strconnlimit']}</th>\n";			echo "\t\t<th class=\"data\">{$lang['strexpires']}</th>\n";			echo "\t\t<th class=\"data\">{$lang['strsessiondefaults']}</th>\n";			echo "\t</tr>\n";			echo "\t<tr>\n\t\t<td class=\"data1\">", $misc->printVal($roledata->fields['rolname']), "</td>\n";			echo "\t\t<td class=\"data1\">", $misc->printVal($roledata->fields['rolsuper'], 'yesno'), "</td>\n";			echo "\t\t<td class=\"data1\">", $misc->printVal($roledata->fields['rolcreatedb'], 'yesno'), "</td>\n";			echo "\t\t<td class=\"data1\">", $misc->printVal($roledata->fields['rolcreaterole'], 'yesno'), "</td>\n";			echo "\t\t<td class=\"data1\">", $misc->printVal($roledata->fields['rolinherit'], 'yesno'), "</td>\n";			echo "\t\t<td class=\"data1\">", ($roledata->fields['rolconnlimit'] == '-1' ? $lang['strnolimit'] : $misc->printVal($roledata->fields['rolconnlimit'])), "</td>\n";			echo "\t\t<td class=\"data1\">", ($roledata->fields['rolvaliduntil'] == 'infinity' || is_null($roledata->fields['rolvaliduntil']) ? $lang['strnever'] : $misc->printVal($roledata->fields['rolvaliduntil'])), "</td>\n";			echo "\t\t<td class=\"data1\">", $misc->printVal($roledata->fields['rolconfig']), "</td>\n";			echo "\t</tr>\n</table>\n";		}		else echo "<p>{$lang['strnodata']}</p>\n";				echo "<p><a class=\"navlink\" href=\"roles.php?action=confchangepassword&amp;{$misc->href}\">{$lang['strchangepassword']}</a></p>\n";	}		/**	 * Show confirmation of change password and actually change password	 */	function doChangePassword($confirm, $msg = '') {		global $data, $misc;		global $lang, $conf;				$server_info = $misc->getServerInfo();				if ($confirm) {			$_REQUEST['rolename'] = $server_info['username'];			$misc->printTrail('role');			$misc->printTitle($lang['strchangepassword'],'pg.role.alter');			$misc->printMsg($msg);						if (!isset($_POST['password'])) $_POST['password'] = '';			if (!isset($_POST['confirm'])) $_POST['confirm'] = '';						echo "<form action=\"roles.php\" method=\"post\">\n";			echo "<table>\n";			echo "\t<tr>\n\t\t<th class=\"data left required\">{$lang['strpassword']}</th>\n";			echo "\t\t<td><input type=\"password\" name=\"password\" size=\"32\" value=\"", 				htmlspecialchars($_POST['password']), "\" /></td>\n\t</tr>\n";			echo "\t<tr>\n\t\t<th class=\"data left required\">{$lang['strconfirm']}</th>\n";			echo "\t\t<td><input type=\"password\" name=\"confirm\" size=\"32\" value=\"\" /></td>\n\t</tr>\n";			echo "</table>\n";			echo "<p><input type=\"hidden\" name=\"action\" value=\"changepassword\" />\n";			echo $misc->form;			echo "<input type=\"submit\" name=\"ok\" value=\"{$lang['strok']}\" />\n";			echo "<input type=\"submit\" name=\"cancel\" value=\"{$lang['strcancel']}\" />\n";			echo "</p></form>\n";		}		else {			// Check that password is minimum length			if (strlen($_POST['password']) < $conf['min_password_length'])				doChangePassword(true, $lang['strpasswordshort']);			// Check that password matches confirmation password			elseif ($_POST['password'] != $_POST['confirm'])				doChangePassword(true, $lang['strpasswordconfirm']);			else {				$status = $data->changePassword($server_info['username'], $_POST['password']);				if ($status == 0)					doAccount($lang['strpasswordchanged']);				else					doAccount($lang['strpasswordchangedbad']);			}		}			}	/**	 * Show default list of roles in the database	 */	function doDefault($msg = '') {		global $data, $misc;		global $lang;				function renderRoleConnLimit($val) {			global $lang;			return $val == '-1' ? $lang['strnolimit'] : htmlspecialchars($val); 		}				function renderRoleExpires($val) {			global $lang;			return $val == 'infinity' ? $lang['strnever'] : htmlspecialchars($val); 		}				$misc->printTrail('server');		$misc->printTabs('server','roles');		$misc->printMsg($msg);				$roles = $data->getRoles();				$columns = array(			'role' => array(				'title' => $lang['strrole'],				'field' => field('rolname'),				'url'   => "redirect.php?subject=role&amp;action=properties&amp;{$misc->href}&amp;",				'vars'  => array('rolename' => 'rolname'),			),			'superuser' => array(				'title' => $lang['strsuper'],				'field' => field('rolsuper'),				'type'  => 'yesno',			),			'createdb' => array(				'title' => $lang['strcreatedb'],				'field' => field('rolcreatedb'),				'type'  => 'yesno',			),			'createrole' => array(				'title' => $lang['strcancreaterole'],				'field' => field('rolcreaterole'),				'type'  => 'yesno',			),			'inherits' => array(				'title' => $lang['strinheritsprivs'],				'field' => field('rolinherit'),				'type'  => 'yesno',			),			'canloging' => array(				'title' => $lang['strcanlogin'],				'field' => field('rolcanlogin'),				'type'  => 'yesno',			),			'connlimit' => array(				'title'	=> $lang['strconnlimit'],				'field'	=> field('rolconnlimit'),				'type'	=> 'callback',				'params'=> array('function' => 'renderRoleConnLimit')			),			'expires' => array(				'title' => $lang['strexpires'],				'field' => field('rolvaliduntil'),				'type'  => 'callback',				'params'=> array('function' => 'renderRoleExpires', 'null' => $lang['strnever']),			),			'actions' => array(				'title' => $lang['stractions'],			),		);				$actions = array(			'alter' => array(				'title' => $lang['stralter'],				'url'   => "roles.php?action=alter&amp;{$misc->href}&amp;",				'vars'  => array('rolename' => 'rolname'),			),			'drop' => array(				'title' => $lang['strdrop'],				'url'   => "roles.php?action=confirm_drop&amp;{$misc->href}&amp;",				'vars'  => array('rolename' => 'rolname'),			),		);				$misc->printTable($roles, $columns, $actions, $lang['strnoroles']);		echo "<p><a class=\"navlink\" href=\"roles.php?action=create&amp;{$misc->href}\">{$lang['strcreaterole']}</a></p>\n";	}	$misc->printHeader($lang['strroles']);	$misc->printBody();	switch ($action) {		case 'create':			doCreate();			break;		case 'save_create':			if (isset($_POST['create'])) doSaveCreate();			else doDefault();			break;		case 'alter':			doAlter();			break;		case 'save_alter':			if (isset($_POST['alter'])) doSaveAlter();			else doDefault();			break;		case 'confirm_drop':			doDrop(true);			break;		case 'drop':			if (isset($_POST['drop'])) doDrop(false);			else doDefault();			break;		case 'properties':			doProperties();			break;		case 'confchangepassword':			doChangePassword(true);			break;					case 'changepassword':			if (isset($_REQUEST['ok'])) doChangePassword(false);			else doAccount();			break;		case 'account':			doAccount();			break;		default:			doDefault();	}		$misc->printFooter();?>
<?php/** * PostgreSQL 8.3 support * * $Id: Postgres82.php,v 1.10 2007/12/28 16:21:25 ioguix Exp $ */include_once('./classes/database/Postgres.php');class Postgres83 extends Postgres {	var $major_version = 8.3;	// List of all legal privileges that can be applied to different types	// of objects.	var $privlist = array(  		'table' => array('SELECT', 'INSERT', 'UPDATE', 'DELETE', 'REFERENCES', 'TRIGGER', 'ALL PRIVILEGES'),  		'view' => array('SELECT', 'INSERT', 'UPDATE', 'DELETE', 'REFERENCES', 'TRIGGER', 'ALL PRIVILEGES'),  		'sequence' => array('SELECT', 'UPDATE', 'ALL PRIVILEGES'),  		'database' => array('CREATE', 'TEMPORARY', 'CONNECT', 'ALL PRIVILEGES'),  		'function' => array('EXECUTE', 'ALL PRIVILEGES'),  		'language' => array('USAGE', 'ALL PRIVILEGES'),  		'schema' => array('CREATE', 'USAGE', 'ALL PRIVILEGES'),  		'tablespace' => array('CREATE', 'ALL PRIVILEGES')	);	// List of characters in acl lists and the privileges they	// refer to.	var $privmap = array(		'r' => 'SELECT',		'w' => 'UPDATE',		'a' => 'INSERT',  		'd' => 'DELETE',  		'R' => 'RULE',  		'x' => 'REFERENCES',  		't' => 'TRIGGER',  		'X' => 'EXECUTE',  		'U' => 'USAGE', 		'C' => 'CREATE',  		'T' => 'TEMPORARY',  		'c' => 'CONNECT'	);	/**	 * Constructor	 * @param $conn The database connection	 */	function Postgres83($conn) {		$this->Postgres($conn);	}	// Help functions	function getHelpPages() {		include_once('./help/PostgresDoc83.php');		return $this->help_page;	}	// Databse functions	/**	 * Return all database available on the server	 * @param $currentdatabase database name that should be on top of the resultset	 * 	 * @return A list of databases, sorted alphabetically	 */	function getDatabases($currentdatabase = NULL) {		global $conf, $misc;		$server_info = $misc->getServerInfo();		if (isset($conf['owned_only']) && $conf['owned_only'] && !$this->isSuperUser($server_info['username'])) {			$username = $server_info['username'];			$this->clean($username);			$clause = " AND pr.rolname='{$username}'";		}		else $clause = '';		if ($currentdatabase != NULL) {			$this->clean($currentdatabase);			$orderby = "ORDER BY pdb.datname = '{$currentdatabase}' DESC, pdb.datname";		}		else			$orderby = "ORDER BY pdb.datname";		if (!$conf['show_system'])			$where = ' AND NOT pdb.datistemplate';		else			$where = ' AND pdb.datallowconn';		$sql = "			SELECT pdb.datname AS datname, pr.rolname AS datowner, pg_encoding_to_char(encoding) AS datencoding,				(SELECT description FROM pg_catalog.pg_shdescription pd WHERE pdb.oid=pd.objoid) AS datcomment,				(SELECT spcname FROM pg_catalog.pg_tablespace pt WHERE pt.oid=pdb.dattablespace) AS tablespace,				pg_catalog.pg_database_size(pdb.oid) as dbsize			FROM pg_catalog.pg_database pdb LEFT JOIN pg_catalog.pg_roles pr ON (pdb.datdba = pr.oid)			WHERE true				{$where}				{$clause}			{$orderby}";		return $this->selectSet($sql);	}	// Administration functions	/**	 * Returns all available autovacuum per table information.	 * @return A recordset	 */	function getTableAutovacuum($table='') {		$sql = '';		if ($table !== '') {			$this->clean($table);			$c_schema = $this->_schema;			$this->clean($c_schema);			$sql = "				SELECT vacrelid, nspname, relname, 					CASE enabled 						WHEN 't' THEN 'on' 						ELSE 'off' 					END AS autovacuum_enabled, vac_base_thresh AS autovacuum_vacuum_threshold,					vac_scale_factor AS autovacuum_vacuum_scale_factor, anl_base_thresh AS autovacuum_analyze_threshold, 					anl_scale_factor AS autovacuum_analyze_scale_factor, vac_cost_delay AS autovacuum_vacuum_cost_delay, 					vac_cost_limit AS autovacuum_vacuum_cost_limit				FROM pg_autovacuum AS a					join pg_class AS c on (c.oid=a.vacrelid)					join pg_namespace AS n on (n.oid=c.relnamespace)				WHERE c.relname = '{$table}' AND n.nspname = '{$c_schema}'				ORDER BY nspname, relname			";		}		else {			$sql = "				SELECT vacrelid, nspname, relname, 					CASE enabled 						WHEN 't' THEN 'on' 						ELSE 'off' 					END AS autovacuum_enabled, vac_base_thresh AS autovacuum_vacuum_threshold,					vac_scale_factor AS autovacuum_vacuum_scale_factor, anl_base_thresh AS autovacuum_analyze_threshold, 					anl_scale_factor AS autovacuum_analyze_scale_factor, vac_cost_delay AS autovacuum_vacuum_cost_delay, 					vac_cost_limit AS autovacuum_vacuum_cost_limit				FROM pg_autovacuum AS a					join pg_class AS c on (c.oid=a.vacrelid)					join pg_namespace AS n on (n.oid=c.relnamespace)				ORDER BY nspname, relname			";		}		return $this->selectSet($sql);	}		function saveAutovacuum($table, $vacenabled, $vacthreshold, $vacscalefactor, $anathresold, 		$anascalefactor, $vaccostdelay, $vaccostlimit) 	{		$defaults = $this->getAutovacuum();		$c_schema = $this->_schema;		$this->clean($c_schema);		$this->clean($table);				$rs = $this->selectSet("			SELECT c.oid 			FROM pg_catalog.pg_class AS c 				LEFT JOIN pg_catalog.pg_namespace AS n ON (n.oid=c.relnamespace)			WHERE 				c.relname = '{$table}' AND n.nspname = '{$c_schema}'		");				if ($rs->EOF)			return -1;					$toid = $rs->fields('oid');		unset ($rs);					if (empty($_POST['autovacuum_vacuum_threshold']))			$_POST['autovacuum_vacuum_threshold'] = $defaults['autovacuum_vacuum_threshold'];				if (empty($_POST['autovacuum_vacuum_scale_factor']))			$_POST['autovacuum_vacuum_scale_factor'] = $defaults['autovacuum_vacuum_scale_factor'];				if (empty($_POST['autovacuum_analyze_threshold']))			$_POST['autovacuum_analyze_threshold'] = $defaults['autovacuum_analyze_threshold'];				if (empty($_POST['autovacuum_analyze_scale_factor']))			$_POST['autovacuum_analyze_scale_factor'] = $defaults['autovacuum_analyze_scale_factor'];				if (empty($_POST['autovacuum_vacuum_cost_delay']))			$_POST['autovacuum_vacuum_cost_delay'] = $defaults['autovacuum_vacuum_cost_delay'];				if (empty($_POST['autovacuum_vacuum_cost_limit']))			$_POST['autovacuum_vacuum_cost_limit'] = $defaults['autovacuum_vacuum_cost_limit'];				if (empty($_POST['vacuum_freeze_min_age']))			$_POST['vacuum_freeze_min_age'] = $defaults['vacuum_freeze_min_age'];				if (empty($_POST['autovacuum_freeze_max_age']))			$_POST['autovacuum_freeze_max_age'] = $defaults['autovacuum_freeze_max_age'];				$rs = $this->selectSet("SELECT vacrelid 			FROM \"pg_catalog\".\"pg_autovacuum\" 			WHERE vacrelid = {$toid};");				$status = -1; // ini		if (isset($rs->fields['vacrelid']) and ($rs->fields['vacrelid'] == $toid)) {			// table exists in pg_autovacuum, UPDATE			$sql = sprintf("UPDATE \"pg_catalog\".\"pg_autovacuum\" SET 						enabled = '%s',						vac_base_thresh = %s,						vac_scale_factor = %s,						anl_base_thresh = %s,						anl_scale_factor = %s,						vac_cost_delay = %s,						vac_cost_limit = %s,						freeze_min_age = %s,						freeze_max_age = %s					WHERE vacrelid = {$toid};				",				($_POST['autovacuum_enabled'] == 'on')? 't':'f',				$_POST['autovacuum_vacuum_threshold'],				$_POST['autovacuum_vacuum_scale_factor'],				$_POST['autovacuum_analyze_threshold'],				$_POST['autovacuum_analyze_scale_factor'],				$_POST['autovacuum_vacuum_cost_delay'],				$_POST['autovacuum_vacuum_cost_limit'],				$_POST['vacuum_freeze_min_age'],				$_POST['autovacuum_freeze_max_age']			);			$status = $this->execute($sql);		}		else {			// table doesn't exists in pg_autovacuum, INSERT			$sql = sprintf("INSERT INTO \"pg_catalog\".\"pg_autovacuum\" 				VALUES (%s, '%s', %s, %s, %s, %s, %s, %s, %s, %s )				WHERE 					c.relname = '{$table}' AND n.nspname = '{$c_schema}';",				$toid,				($_POST['autovacuum_enabled'] == 'on')? 't':'f',				$_POST['autovacuum_vacuum_threshold'],				$_POST['autovacuum_vacuum_scale_factor'],				$_POST['autovacuum_analyze_threshold'],				$_POST['autovacuum_analyze_scale_factor'],				$_POST['autovacuum_vacuum_cost_delay'],				$_POST['autovacuum_vacuum_cost_limit'],				$_POST['vacuum_freeze_min_age'],				$_POST['autovacuum_freeze_max_age']			);			$status = $this->execute($sql);		}				return $status;	}	function dropAutovacuum($table) {		$c_schema = $this->_schema;		$this->clean($c_schema);		$this->clean($table);				$rs = $this->selectSet("			SELECT c.oid 			FROM pg_catalog.pg_class AS c 				LEFT JOIN pg_catalog.pg_namespace AS n ON (n.oid=c.relnamespace)			WHERE 				c.relname = '{$table}' AND n.nspname = '{$c_schema}'		");				return $this->deleteRow('pg_autovacuum', array('vacrelid' => $rs->fields['oid']), 'pg_catalog');	}		// Sequence functions		/**	 * Alter a sequence's properties	 * @param $seqrs The sequence RecordSet returned by getSequence()	 * @param $increment The sequence incremental value	 * @param $minvalue The sequence minimum value	 * @param $maxvalue The sequence maximum value	 * @param $restartvalue The sequence current value	 * @param $cachevalue The sequence cache value	 * @param $cycledvalue Sequence can cycle ?	 * @param $startvalue The sequence start value when issueing a restart (ignored)	 * @return 0 success	 */	function alterSequenceProps($seqrs, $increment,	$minvalue, $maxvalue,								$restartvalue, $cachevalue, $cycledvalue, $startvalue) {		$sql = '';		/* vars are cleaned in _alterSequence */		if (!empty($increment) && ($increment != $seqrs->fields['increment_by'])) $sql .= " INCREMENT {$increment}";		if (!empty($minvalue) && ($minvalue != $seqrs->fields['min_value'])) $sql .= " MINVALUE {$minvalue}";		if (!empty($maxvalue) && ($maxvalue != $seqrs->fields['max_value'])) $sql .= " MAXVALUE {$maxvalue}";		if (!empty($restartvalue) && ($restartvalue != $seqrs->fields['last_value'])) $sql .= " RESTART {$restartvalue}";		if (!empty($cachevalue) && ($cachevalue != $seqrs->fields['cache_value'])) $sql .= " CACHE {$cachevalue}";		// toggle cycle yes/no		if (!is_null($cycledvalue))	$sql .= (!$cycledvalue ? ' NO ' : '') . " CYCLE";		if ($sql != '') {			$f_schema = $this->_schema;			$this->fieldClean($f_schema);			$sql = "ALTER SEQUENCE \"{$f_schema}\".\"{$seqrs->fields['seqname']}\" {$sql}";			return $this->execute($sql);		}		return 0;	}	/**	 * Alter a sequence's owner	 * @param $seqrs The sequence RecordSet returned by getSequence()	 * @param $name The new owner for the sequence	 * @return 0 success	 */	function alterSequenceOwner($seqrs, $owner) {		// If owner has been changed, then do the alteration.  We are		// careful to avoid this generally as changing owner is a		// superuser only function.		/* vars are cleaned in _alterSequence */		if (!empty($owner) && ($seqrs->fields['seqowner'] != $owner)) {			$f_schema = $this->_schema;			$this->fieldClean($f_schema);			$sql = "ALTER TABLE \"{$f_schema}\".\"{$seqrs->fields['seqname']}\" OWNER TO \"{$owner}\"";			return $this->execute($sql);		}		return 0;	}	function hasQueryKill() { return false; }	function hasDatabaseCollation() { return false; }	function hasAlterSequenceStart() { return false; }}?>
<?php	/**	 * List constraints on a table	 *	 * $Id: constraints.php,v 1.56 2007/12/31 16:46:07 xzilla Exp $	 */	// Include application functions	include_once('./libraries/lib.inc.php');	include_once('./classes/class.select.php');	$action = (isset($_REQUEST['action'])) ? $_REQUEST['action'] : '';	/**	 * Confirm and then actually add a FOREIGN KEY constraint	 */	function addForeignKey($stage, $msg = '') {		global $data, $misc;		global $lang;		if (!isset($_POST['name'])) $_POST['name'] = '';		if (!isset($_POST['target'])) $_POST['target'] = '';		switch ($stage) {			case 2:				// Check that they've given at least one source column				if (!isset($_REQUEST['SourceColumnList']) && (!isset($_POST['IndexColumnList']) || !is_array($_POST['IndexColumnList']) || sizeof($_POST['IndexColumnList']) == 0))					addForeignKey(1, $lang['strfkneedscols']);				else { 					// Copy the IndexColumnList variable from stage 1					if (isset($_REQUEST['IndexColumnList']) && !isset($_REQUEST['SourceColumnList']))						$_REQUEST['SourceColumnList'] = serialize($_REQUEST['IndexColumnList']);					// Initialise variables					if (!isset($_POST['upd_action'])) $_POST['upd_action'] = null;					if (!isset($_POST['del_action'])) $_POST['del_action'] = null;					if (!isset($_POST['match'])) $_POST['match'] = null;					if (!isset($_POST['deferrable'])) $_POST['deferrable'] = null;					if (!isset($_POST['initially'])) $_POST['initially'] = null;					$_REQUEST['target'] = unserialize($_REQUEST['target']);					$misc->printTrail('table');					$misc->printTitle($lang['straddfk'],'pg.constraint.foreign_key');					$misc->printMsg($msg);					// Unserialize target and fetch appropriate table. This is a bit messy					// because the table could be in another schema.					$data->setSchema($_REQUEST['target']['schemaname']);					$attrs = $data->getTableAttributes($_REQUEST['target']['tablename']);					$data->setSchema($_REQUEST['schema']);					$selColumns = new XHTML_select('TableColumnList', true, 10);					$selColumns->set_style('width: 15em;');					if ($attrs->recordCount() > 0) {						while (!$attrs->EOF) {							$selColumns->add(new XHTML_Option($attrs->fields['attname']));							$attrs->moveNext();						}					}					$selIndex = new XHTML_select('IndexColumnList[]', true, 10);					$selIndex->set_style('width: 15em;');					$selIndex->set_attribute('id', 'IndexColumnList');					$buttonAdd = new XHTML_Button('add', '>>');					$buttonAdd->set_attribute('onclick', 'buttonPressed(this);');					$buttonAdd->set_attribute('type', 'button');					$buttonRemove = new XHTML_Button('remove', '<<');					$buttonRemove->set_attribute('onclick', 'buttonPressed(this);');					$buttonRemove->set_attribute('type', 'button');					echo "<form onsubmit=\"doSelectAll();\" name=\"formIndex\" action=\"constraints.php\" method=\"post\">\n";					echo "<table>\n";					echo "<tr><th class=\"data\" colspan=\"3\">{$lang['strfktarget']}</th></tr>";					echo "<tr><th class=\"data\">{$lang['strtablecolumnlist']}</th><th class=\"data\">&nbsp;</th><th class=data>{$lang['strfkcolumnlist']}</th></tr>\n";					echo "<tr><td class=\"data1\">" . $selColumns->fetch() . "</td>\n";					echo "<td class=\"data1\" style=\"text-align: center\">" . $buttonRemove->fetch() . $buttonAdd->fetch() . "</td>";					echo "<td class=\"data1\">" . $selIndex->fetch() . "</td></tr>\n";					echo "<tr><th class=\"data\" colspan=\"3\">{$lang['stractions']}</th></tr>";					echo "<tr>";					echo "<td class=\"data1\" colspan=\"3\">\n";					// ON SELECT actions					echo "{$lang['stronupdate']} <select name=\"upd_action\">";					foreach ($data->fkactions as $v)						echo "<option value=\"{$v}\"", ($_POST['upd_action'] == $v) ? ' selected="selected"' : '', ">{$v}</option>\n";					echo "</select><br />\n";					// ON DELETE actions					echo "{$lang['strondelete']} <select name=\"del_action\">";					foreach ($data->fkactions as $v)						echo "<option value=\"{$v}\"", ($_POST['del_action'] == $v) ? ' selected="selected"' : '', ">{$v}</option>\n";					echo "</select><br />\n";					// MATCH options					echo "<select name=\"match\">";					foreach ($data->fkmatches as $v)						echo "<option value=\"{$v}\"", ($_POST['match'] == $v) ? ' selected="selected"' : '', ">{$v}</option>\n";					echo "</select><br />\n";					// DEFERRABLE options					echo "<select name=\"deferrable\">";					foreach ($data->fkdeferrable as $v)						echo "<option value=\"{$v}\"", ($_POST['deferrable'] == $v) ? ' selected="selected"' : '', ">{$v}</option>\n";					echo "</select><br />\n";					// INITIALLY options					echo "<select name=\"initially\">";					foreach ($data->fkinitial as $v)						echo "<option value=\"{$v}\"", ($_POST['initially'] == $v) ? ' selected="selected"' : '', ">{$v}</option>\n";					echo "</select>\n";					echo "</td></tr>\n";					echo "</table>\n";					echo "<p><input type=\"hidden\" name=\"action\" value=\"save_add_foreign_key\" />\n";					echo $misc->form;					echo "<input type=\"hidden\" name=\"table\" value=\"", htmlspecialchars($_REQUEST['table']), "\" />\n";					echo "<input type=\"hidden\" name=\"name\" value=\"", htmlspecialchars($_REQUEST['name']), "\" />\n";					echo "<input type=\"hidden\" name=\"target\" value=\"", htmlspecialchars(serialize($_REQUEST['target'])), "\" />\n";					echo "<input type=\"hidden\" name=\"SourceColumnList\" value=\"", htmlspecialchars($_REQUEST['SourceColumnList']), "\" />\n";					echo "<input type=\"hidden\" name=\"stage\" value=\"3\" />\n";					echo "<input type=\"submit\" value=\"{$lang['stradd']}\" />\n";					echo "<input type=\"submit\" name=\"cancel\" value=\"{$lang['strcancel']}\" /></p>\n";					echo "</form>\n";				}				break;			case 3:				// Unserialize target				$_POST['target'] = unserialize($_POST['target']);				// Check that they've given at least one column				if (isset($_POST['SourceColumnList'])) $temp = unserialize($_POST['SourceColumnList']);				if (!isset($_POST['IndexColumnList']) || !is_array($_POST['IndexColumnList'])						|| sizeof($_POST['IndexColumnList']) == 0 || !isset($temp)						|| !is_array($temp) || sizeof($temp) == 0) addForeignKey(2, $lang['strfkneedscols']);				else {					$status = $data->addForeignKey($_POST['table'], $_POST['target']['schemaname'], $_POST['target']['tablename'],						unserialize($_POST['SourceColumnList']), $_POST['IndexColumnList'], $_POST['upd_action'], $_POST['del_action'],						$_POST['match'], $_POST['deferrable'], $_POST['initially'], $_POST['name']);					if ($status == 0)						doDefault($lang['strfkadded']);					else						addForeignKey(2, $lang['strfkaddedbad']);				}				break;			default:				$misc->printTrail('table');				$misc->printTitle($lang['straddfk'],'pg.constraint.foreign_key');				$misc->printMsg($msg);				$attrs = $data->getTableAttributes($_REQUEST['table']);				$tables = $data->getTables(true);				$selColumns = new XHTML_select('TableColumnList', true, 10);				$selColumns->set_style('width: 15em;');				if ($attrs->recordCount() > 0) {					while (!$attrs->EOF) {						$selColumns->add(new XHTML_Option($attrs->fields['attname']));						$attrs->moveNext();					}				}				$selIndex = new XHTML_select('IndexColumnList[]', true, 10);				$selIndex->set_style('width: 15em;');				$selIndex->set_attribute('id', 'IndexColumnList');				$buttonAdd = new XHTML_Button('add', '>>');				$buttonAdd->set_attribute('onclick', 'buttonPressed(this);');				$buttonAdd->set_attribute('type', 'button');				$buttonRemove = new XHTML_Button('remove', '<<');				$buttonRemove->set_attribute('onclick', 'buttonPressed(this);');				$buttonRemove->set_attribute('type', 'button');				echo "<form onsubmit=\"doSelectAll();\" name=\"formIndex\" action=\"constraints.php\" method=\"post\">\n";				echo "<table>\n";				echo "<tr><th class=\"data\" colspan=\"3\">{$lang['strname']}</th></tr>\n";				echo "<tr><td class=\"data1\" colspan=\"3\"><input type=\"text\" name=\"name\" size=\"32\" maxlength=\"{$data->_maxNameLen}\" /></td></tr>\n";				echo "<tr><th class=\"data\">{$lang['strtablecolumnlist']}</th><th class=\"data\">&nbsp;</th><th class=\"data required\">{$lang['strfkcolumnlist']}</th></tr>\n";				echo "<tr><td class=\"data1\">" . $selColumns->fetch() . "</td>\n";				echo "<td class=\"data1\" style=\"text-align: center\">" . $buttonRemove->fetch() . $buttonAdd->fetch() . "</td>\n";				echo "<td class=data1>" . $selIndex->fetch() . "</td></tr>\n";				echo "<tr><th class=\"data\" colspan=\"3\">{$lang['strfktarget']}</th></tr>";				echo "<tr>";				echo "<td class=\"data1\" colspan=\"3\"><select name=\"target\">";				while (!$tables->EOF) {					$key = array('schemaname' => $tables->fields['nspname'], 'tablename' => $tables->fields['relname']);					$key = serialize($key);					echo "<option value=\"", htmlspecialchars($key), "\">";					if ($tables->fields['nspname'] != $_REQUEST['schema']) {							echo htmlspecialchars($tables->fields['nspname']), '.';					}					echo htmlspecialchars($tables->fields['relname']), "</option>\n";					$tables->moveNext();				}				echo "</select>\n";				echo "</td></tr>";				echo "</table>\n";				echo "<p><input type=\"hidden\" name=\"action\" value=\"save_add_foreign_key\" />\n";				echo $misc->form;				echo "<input type=\"hidden\" name=\"table\" value=\"", htmlspecialchars($_REQUEST['table']), "\" />\n";				echo "<input type=\"hidden\" name=\"stage\" value=\"2\" />\n";				echo "<input type=\"submit\" value=\"{$lang['stradd']}\" />\n";				echo "<input type=\"submit\" name=\"cancel\" value=\"{$lang['strcancel']}\" /></p>\n";				echo "</form>\n";				break;		}	}	/**	 * Confirm and then actually add a PRIMARY KEY or UNIQUE constraint	 */	function addPrimaryOrUniqueKey($type, $confirm, $msg = '') {		global $data, $misc;		global $lang;		if (!isset($_POST['name'])) $_POST['name'] = '';		if ($confirm) {			if (!isset($_POST['name'])) $_POST['name'] = '';			if (!isset($_POST['tablespace'])) $_POST['tablespace'] = '';			$misc->printTrail('table');			switch ($type) {				case 'primary':					$misc->printTitle($lang['straddpk'],'pg.constraint.primary_key');					break;				case 'unique':					$misc->printTitle($lang['stradduniq'],'pg.constraint.unique_key');					break;				default:					doDefault($lang['strinvalidparam']);					return;			}			$misc->printMsg($msg);			$attrs = $data->getTableAttributes($_REQUEST['table']);			// Fetch all tablespaces from the database			if ($data->hasTablespaces()) $tablespaces = $data->getTablespaces();			$selColumns = new XHTML_select('TableColumnList', true, 10);			$selColumns->set_style('width: 15em;');			if ($attrs->recordCount() > 0) {				while (!$attrs->EOF) {					$selColumns->add(new XHTML_Option($attrs->fields['attname']));					$attrs->moveNext();				}			}			$selIndex = new XHTML_select('IndexColumnList[]', true, 10);			$selIndex->set_style('width: 15em;');			$selIndex->set_attribute('id', 'IndexColumnList');			$buttonAdd = new XHTML_Button('add', '>>');			$buttonAdd->set_attribute('onclick', 'buttonPressed(this);');			$buttonAdd->set_attribute('type', 'button');			$buttonRemove = new XHTML_Button('remove', '<<');			$buttonRemove->set_attribute('onclick', 'buttonPressed(this);');			$buttonRemove->set_attribute('type', 'button');			echo "<form onsubmit=\"doSelectAll();\" name=\"formIndex\" action=\"constraints.php\" method=\"post\">\n";			echo "<table>\n";			echo "<tr><th class=\"data\" colspan=\"3\">{$lang['strname']}</th></tr>";			echo "<tr>";			echo "<td class=\"data1\" colspan=\"3\"><input type=\"text\" name=\"name\" value=\"", htmlspecialchars($_POST['name']),				"\" size=\"32\" maxlength=\"{$data->_maxNameLen}\" /></td></tr>";			echo "<tr><th class=\"data\">{$lang['strtablecolumnlist']}</th><th class=\"data\">&nbsp;</th><th class=\"data required\">{$lang['strindexcolumnlist']}</th></tr>\n";			echo "<tr><td class=\"data1\">" . $selColumns->fetch() . "</td>\n";			echo "<td class=\"data1\" style=\"text-align: center\">" . $buttonRemove->fetch() . $buttonAdd->fetch() . "</td>";			echo "<td class=data1>" . $selIndex->fetch() . "</td></tr>\n";			// Tablespace (if there are any)			if ($data->hasTablespaces() && $tablespaces->recordCount() > 0) {				echo "<tr><th class=\"data\" colspan=\"3\">{$lang['strtablespace']}</th></tr>";				echo "<tr><td class=\"data1\" colspan=\"3\"><select name=\"tablespace\">\n";				// Always offer the default (empty) option				echo "\t\t\t\t<option value=\"\"",					($_POST['tablespace'] == '') ? ' selected="selected"' : '', "></option>\n";				// Display all other tablespaces				while (!$tablespaces->EOF) {					$spcname = htmlspecialchars($tablespaces->fields['spcname']);					echo "\t\t\t\t<option value=\"{$spcname}\"",						($spcname == $_POST['tablespace']) ? ' selected="selected"' : '', ">{$spcname}</option>\n";					$tablespaces->moveNext();				}				echo "</select></td></tr>\n";			}			echo "</table>\n";			echo "<p><input type=\"hidden\" name=\"action\" value=\"save_add_primary_key\" />\n";			echo $misc->form;			echo "<input type=\"hidden\" name=\"table\" value=\"", htmlspecialchars($_REQUEST['table']), "\" />\n";			echo "<input type=\"hidden\" name=\"type\" value=\"", htmlspecialchars($type), "\" />\n";			echo "<input type=\"submit\" value=\"{$lang['stradd']}\" />\n";			echo "<input type=\"submit\" name=\"cancel\" value=\"{$lang['strcancel']}\" /></p>\n";			echo "</form>\n";		}		else {			// Default tablespace to empty if it isn't set			if (!isset($_POST['tablespace'])) $_POST['tablespace'] = '';			if ($_POST['type'] == 'primary') {				// Check that they've given at least one column				if (!isset($_POST['IndexColumnList']) || !is_array($_POST['IndexColumnList'])						|| sizeof($_POST['IndexColumnList']) == 0) addPrimaryOrUniqueKey($_POST['type'], true, $lang['strpkneedscols']);				else {					$status = $data->addPrimaryKey($_POST['table'], $_POST['IndexColumnList'], $_POST['name'], $_POST['tablespace']);					if ($status == 0)						doDefault($lang['strpkadded']);					else						addPrimaryOrUniqueKey($_POST['type'], true, $lang['strpkaddedbad']);				}			}			elseif ($_POST['type'] == 'unique') {				// Check that they've given at least one column				if (!isset($_POST['IndexColumnList']) || !is_array($_POST['IndexColumnList'])						|| sizeof($_POST['IndexColumnList']) == 0) addPrimaryOrUniqueKey($_POST['type'], true, $lang['struniqneedscols']);				else {					$status = $data->addUniqueKey($_POST['table'], $_POST['IndexColumnList'], $_POST['name'], $_POST['tablespace']);					if ($status == 0)						doDefault($lang['struniqadded']);					else						addPrimaryOrUniqueKey($_POST['type'], true, $lang['struniqaddedbad']);				}			}			else doDefault($lang['strinvalidparam']);		}	}	/**	 * Confirm and then actually add a CHECK constraint	 */	function addCheck($confirm, $msg = '') {		global $data, $misc;		global $lang;		if (!isset($_POST['name'])) $_POST['name'] = '';		if (!isset($_POST['definition'])) $_POST['definition'] = '';		if ($confirm) {			$misc->printTrail('table');			$misc->printTitle($lang['straddcheck'],'pg.constraint.check');			$misc->printMsg($msg);			echo "<form action=\"constraints.php\" method=\"post\">\n";			echo "<table>\n";			echo "<tr><th class=\"data\">{$lang['strname']}</th>\n";			echo "<th class=\"data required\">{$lang['strdefinition']}</th></tr>\n";			echo "<tr><td class=\"data1\"><input name=\"name\" size=\"16\" maxlength=\"{$data->_maxNameLen}\" value=\"",				htmlspecialchars($_POST['name']), "\" /></td>\n";			echo "<td class=\"data1\">(<input name=\"definition\" size=\"32\" value=\"",				htmlspecialchars($_POST['definition']), "\" />)</td></tr>\n";			echo "</table>\n";			echo "<input type=\"hidden\" name=\"action\" value=\"save_add_check\" />\n";			echo "<input type=\"hidden\" name=\"table\" value=\"", htmlspecialchars($_REQUEST['table']), "\" />\n";			echo $misc->form;			echo "<p><input type=\"submit\" name=\"ok\" value=\"{$lang['stradd']}\" />\n";			echo "<input type=\"submit\" name=\"cancel\" value=\"{$lang['strcancel']}\" /></p>\n";			echo "</form>\n";		}		else {			if (trim($_POST['definition']) == '')				addCheck(true, $lang['strcheckneedsdefinition']);			else {				$status = $data->addCheckConstraint($_POST['table'],					$_POST['definition'], $_POST['name']);				if ($status == 0)					doDefault($lang['strcheckadded']);				else					addCheck(true, $lang['strcheckaddedbad']);			}		}	}	/**	 * Show confirmation of drop and perform actual drop	 */	function doDrop($confirm) {		global $data, $misc;		global $lang;		if ($confirm) {			$misc->printTrail('constraint');			$misc->printTitle($lang['strdrop'],'pg.constraint.drop');			echo "<p>", sprintf($lang['strconfdropconstraint'], $misc->printVal($_REQUEST['constraint']),				$misc->printVal($_REQUEST['table'])), "</p>\n";			echo "<form action=\"constraints.php\" method=\"post\">\n";			echo "<input type=\"hidden\" name=\"action\" value=\"drop\" />\n";			echo "<input type=\"hidden\" name=\"table\" value=\"", htmlspecialchars($_REQUEST['table']), "\" />\n";			echo "<input type=\"hidden\" name=\"constraint\" value=\"", htmlspecialchars($_REQUEST['constraint']), "\" />\n";			echo "<input type=\"hidden\" name=\"type\" value=\"", htmlspecialchars($_REQUEST['type']), "\" />\n";			echo $misc->form;			echo "<p><input type=\"checkbox\" id=\"cascade\" name=\"cascade\" /> <label for=\"cascade\">{$lang['strcascade']}</label></p>\n";			echo "<input type=\"submit\" name=\"drop\" value=\"{$lang['strdrop']}\" />\n";			echo "<input type=\"submit\" name=\"cancel\" value=\"{$lang['strcancel']}\" />\n";			echo "</form>\n";		}		else {			$status = $data->dropConstraint($_POST['constraint'], $_POST['table'], $_POST['type'], isset($_POST['cascade']));			if ($status == 0)				doDefault($lang['strconstraintdropped']);			else				doDefault($lang['strconstraintdroppedbad']);		}	}	/**	 * List all the constraints on the table	 */	function doDefault($msg = '') {		global $data, $misc, $lang;		function cnPre(&$rowdata) {			global $data;			if (is_null($rowdata->fields['consrc'])) {				$atts = $data->getAttributeNames($_REQUEST['table'], explode(' ', $rowdata->fields['indkey']));				$rowdata->fields['+definition'] = ($rowdata->fields['contype'] == 'u' ? "UNIQUE (" : "PRIMARY KEY (") . join(',', $atts) . ')';			} else {				$rowdata->fields['+definition'] = $rowdata->fields['consrc'];			}		}		$misc->printTrail('table');		$misc->printTabs('table','constraints');		$misc->printMsg($msg);		$constraints = $data->getConstraints($_REQUEST['table']);		$columns = array(			'constraint' => array(				'title' => $lang['strname'],				'field' => field('conname'),			),			'definition' => array(				'title' => $lang['strdefinition'],				'field' => field('+definition'),				'type'  => 'pre',			),			'actions' => array(				'title' => $lang['stractions'],			),			'comment' => array(				'title' => $lang['strcomment'],				'field' => field('constcomment'),			),		);		$actions = array(			'drop' => array(				'title' => $lang['strdrop'],				'url'   => "constraints.php?action=confirm_drop&amp;{$misc->href}&amp;table=".urlencode($_REQUEST['table'])."&amp;",				'vars'  => array('constraint' => 'conname', 'type' => 'contype'),			),		);		$misc->printTable($constraints, $columns, $actions, $lang['strnoconstraints'], 'cnPre');		echo "<ul class=\"navlink\">\n\t<li><a href=\"constraints.php?action=add_check&amp;{$misc->href}&amp;table=", urlencode($_REQUEST['table']),			"\">{$lang['straddcheck']}</a></li>\n";		echo "\t<li><a href=\"constraints.php?action=add_unique_key&amp;{$misc->href}&amp;table=", urlencode($_REQUEST['table']),			"\">{$lang['stradduniq']}</a></li>\n";		echo "\t<li><a href=\"constraints.php?action=add_primary_key&amp;{$misc->href}&amp;table=", urlencode($_REQUEST['table']),			"\">{$lang['straddpk']}</a></li>\n";		echo "\t<li><a href=\"constraints.php?action=add_foreign_key&amp;{$misc->href}&amp;table=", urlencode($_REQUEST['table']),			"\">{$lang['straddfk']}</a></li>\n</ul>\n";	}	function doTree() {		global $misc, $data;		$constraints = $data->getConstraints($_REQUEST['table']);		$reqvars = $misc->getRequestVars('schema');		function getIcon($f) {			switch($f['contype']) {				case 'u':					return 'UniqueConstraint';				case 'c':					return 'CheckConstraint';				case 'f':					return 'ForeignKey';				case 'p':					return 'PrimaryKey';			}		}		$attrs = array(			'text'   => field('conname'),			'icon'   => callback('getIcon'),		);		$misc->printTreeXML($constraints, $attrs);		exit;	}	if ($action == 'tree') doTree();	$misc->printHeader($lang['strtables'] . ' - ' . $_REQUEST['table'] . ' - ' . $lang['strconstraints'],		"<script src=\"indexes.js\" type=\"text/javascript\"></script>");	if ($action == 'add_unique_key' || $action == 'save_add_unique_key'			|| $action == 'add_primary_key' || $action == 'save_add_primary_key'			|| $action == 'add_foreign_key' || $action == 'save_add_foreign_key')		echo "<body onload=\"init();\">";	else		$misc->printBody();	switch ($action) {		case 'add_foreign_key':			addForeignKey(1);			break;		case 'save_add_foreign_key':			if (isset($_POST['cancel'])) doDefault();			else addForeignKey($_REQUEST['stage']);			break;		case 'add_unique_key':			addPrimaryOrUniqueKey('unique', true);			break;		case 'save_add_unique_key':			if (isset($_POST['cancel'])) doDefault();			else addPrimaryOrUniqueKey('unique', false);			break;		case 'add_primary_key':			addPrimaryOrUniqueKey('primary', true);			break;		case 'save_add_primary_key':			if (isset($_POST['cancel'])) doDefault();			else addPrimaryOrUniqueKey('primary', false);			break;		case 'add_check':			addCheck(true);			break;		case 'save_add_check':			if (isset($_POST['cancel'])) doDefault();			else addCheck(false);			break;		case 'save_create':			doSaveCreate();			break;		case 'create':			doCreate();			break;		case 'drop':			if (isset($_POST['drop'])) doDrop(false);			else doDefault();			break;		case 'confirm_drop':			doDrop(true);			break;		default:			doDefault();			break;	}	$misc->printFooter();?>
<?php	/**	 * Manage types in a database	 *	 * $Id: types.php,v 1.42 2007/11/30 15:25:23 soranzo Exp $	 */	// Include application functions	include_once('./libraries/lib.inc.php');		$action = (isset($_REQUEST['action'])) ? $_REQUEST['action'] : '';	if (!isset($msg)) $msg = '';	/**	 * Show read only properties for a type	 */	function doProperties($msg = '') {		global $data, $misc;		global $lang;		// Get type (using base name)		$typedata = $data->getType($_REQUEST['type']);		$misc->printTrail('type');		$misc->printTitle($lang['strproperties'], 'pg.type');		$misc->printMsg($msg);				function attPre(&$rowdata) {			global $data;			$rowdata->fields['+type'] = $data->formatType($rowdata->fields['type'], $rowdata->fields['atttypmod']);		}				if ($typedata->recordCount() > 0) {			$vals = false;			switch ($typedata->fields['typtype']) {			case 'c':				$attrs = $data->getTableAttributes($_REQUEST['type']);								$columns = array(					'field' => array(						'title' => $lang['strfield'],						'field' => field('attname'),					),					'type' => array(						'title' => $lang['strtype'],						'field' => field('+type'),					),					'comment' => array(						'title' => $lang['strcomment'],						'field' => field('comment'),					)				);								$actions = array();								$misc->printTable($attrs, $columns, $actions, null, 'attPre');								break;			case 'e':				$vals = $data->getEnumValues($typedata->fields['typname']);			default:				$byval = $data->phpBool($typedata->fields['typbyval']);				echo "<table>\n";				echo "<tr><th class=\"data left\">{$lang['strname']}</th>\n";				echo "<td class=\"data1\">", $misc->printVal($typedata->fields['typname']), "</td></tr>\n";				echo "<tr><th class=\"data left\">{$lang['strinputfn']}</th>\n";				echo "<td class=\"data1\">", $misc->printVal($typedata->fields['typin']), "</td></tr>\n";				echo "<tr><th class=\"data left\">{$lang['stroutputfn']}</th>\n";				echo "<td class=\"data1\">", $misc->printVal($typedata->fields['typout']), "</td></tr>\n";				echo "<tr><th class=\"data left\">{$lang['strlength']}</th>\n";				echo "<td class=\"data1\">", $misc->printVal($typedata->fields['typlen']), "</td></tr>\n";				echo "<tr><th class=\"data left\">{$lang['strpassbyval']}</th>\n";				echo "<td class=\"data1\">", ($byval) ? $lang['stryes'] : $lang['strno'], "</td></tr>\n";				echo "<tr><th class=\"data left\">{$lang['stralignment']}</th>\n";				echo "<td class=\"data1\">", $misc->printVal($typedata->fields['typalign']), "</td></tr>\n";				if ($data->hasEnumTypes() && $vals) {					$vals = $vals->getArray();					$nbVals = count($vals);					echo "<tr>\n\t<th class=\"data left\" rowspan=\"$nbVals\">{$lang['strenumvalues']}</th>\n";					echo "<td class=\"data2\">{$vals[0]['enumval']}</td></tr>\n";					for ($i=1; $i < $nbVals; $i++)						echo "<td class=\"data", 2-($i%2), "\">{$vals[$i]['enumval']}</td></tr>\n";				}				echo "</table>\n";			}			echo "<p><a class=\"navlink\" href=\"types.php?{$misc->href}\">{$lang['strshowalltypes']}</a></p>\n";		} else			doDefault($lang['strinvalidparam']);	}		/**	 * Show confirmation of drop and perform actual drop	 */	function doDrop($confirm) {		global $data, $misc;		global $lang;		if ($confirm) {			$misc->printTrail('type');			$misc->printTitle($lang['strdrop'], 'pg.type.drop');			echo "<p>", sprintf($lang['strconfdroptype'], $misc->printVal($_REQUEST['type'])), "</p>\n";			echo "<form action=\"types.php\" method=\"post\">\n";			echo "<p><input type=\"checkbox\" id=\"cascade\" name=\"cascade\" /> <label for=\"cascade\">{$lang['strcascade']}</label></p>\n";			echo "<p><input type=\"hidden\" name=\"action\" value=\"drop\" />\n";			echo "<input type=\"hidden\" name=\"type\" value=\"", htmlspecialchars($_REQUEST['type']), "\" />\n";			echo $misc->form;			echo "<input type=\"submit\" name=\"drop\" value=\"{$lang['strdrop']}\" />\n";			echo "<input type=\"submit\" name=\"cancel\" value=\"{$lang['strcancel']}\" /></p>\n";			echo "</form>\n";		}		else {			$status = $data->dropType($_POST['type'], isset($_POST['cascade']));			if ($status == 0)				doDefault($lang['strtypedropped']);			else				doDefault($lang['strtypedroppedbad']);		}			}	/**	 * Displays a screen where they can enter a new composite type	 */	function doCreateComposite($msg = '') {		global $data, $misc;		global $lang;		if (!isset($_REQUEST['stage'])) $_REQUEST['stage'] = 1;		if (!isset($_REQUEST['name'])) $_REQUEST['name'] = '';		if (!isset($_REQUEST['fields'])) $_REQUEST['fields'] = '';		if (!isset($_REQUEST['typcomment'])) $_REQUEST['typcomment'] = '';		switch ($_REQUEST['stage']) {			case 1:				$misc->printTrail('type');				$misc->printTitle($lang['strcreatecomptype'], 'pg.type.create');				$misc->printMsg($msg);								echo "<form action=\"types.php\" method=\"post\">\n";				echo "<table>\n";				echo "\t<tr>\n\t\t<th class=\"data left required\">{$lang['strname']}</th>\n";				echo "\t\t<td class=\"data\"><input name=\"name\" size=\"32\" maxlength=\"{$data->_maxNameLen}\" value=\"", 					htmlspecialchars($_REQUEST['name']), "\" /></td>\n\t</tr>\n";				echo "\t<tr>\n\t\t<th class=\"data left required\">{$lang['strnumfields']}</th>\n";				echo "\t\t<td class=\"data\"><input name=\"fields\" size=\"5\" maxlength=\"{$data->_maxNameLen}\" value=\"", 					htmlspecialchars($_REQUEST['fields']), "\" /></td>\n\t</tr>\n";				echo "\t<tr>\n\t\t<th class=\"data left\">{$lang['strcomment']}</th>\n";				echo "\t\t<td><textarea name=\"typcomment\" rows=\"3\" cols=\"32\">", 					htmlspecialchars($_REQUEST['typcomment']), "</textarea></td>\n\t</tr>\n";				echo "</table>\n";				echo "<p><input type=\"hidden\" name=\"action\" value=\"create_comp\" />\n";				echo "<input type=\"hidden\" name=\"stage\" value=\"2\" />\n";				echo $misc->form;				echo "<input type=\"submit\" value=\"{$lang['strnext']}\" />\n";				echo "<input type=\"submit\" name=\"cancel\" value=\"{$lang['strcancel']}\" /></p>\n";				echo "</form>\n";				break;			case 2:				global $lang;				// Check inputs				$fields = trim($_REQUEST['fields']);				if (trim($_REQUEST['name']) == '') {					$_REQUEST['stage'] = 1;					doCreateComposite($lang['strtypeneedsname']);					return;				}				elseif ($fields == '' || !is_numeric($fields) || $fields != (int)$fields || $fields < 1)  {					$_REQUEST['stage'] = 1;					doCreateComposite($lang['strtypeneedscols']);					return;				}				$types = $data->getTypes(true, false, true);				$misc->printTrail('schema');				$misc->printTitle($lang['strcreatecomptype'], 'pg.type.create');				$misc->printMsg($msg);				echo "<form action=\"types.php\" method=\"post\">\n";				// Output table header				echo "<table>\n";				echo "\t<tr><th colspan=\"2\" class=\"data required\">{$lang['strfield']}</th><th colspan=\"2\" class=\"data required\">{$lang['strtype']}</th>";				echo"<th class=\"data\">{$lang['strlength']}</th><th class=\"data\">{$lang['strcomment']}</th></tr>\n";								for ($i = 0; $i < $_REQUEST['fields']; $i++) {					if (!isset($_REQUEST['field'][$i])) $_REQUEST['field'][$i] = '';					if (!isset($_REQUEST['length'][$i])) $_REQUEST['length'][$i] = '';					if (!isset($_REQUEST['colcomment'][$i])) $_REQUEST['colcomment'][$i] = '';					echo "\t<tr>\n\t\t<td>", $i + 1, ".&nbsp;</td>\n";					echo "\t\t<td><input name=\"field[{$i}]\" size=\"16\" maxlength=\"{$data->_maxNameLen}\" value=\"",						htmlspecialchars($_REQUEST['field'][$i]), "\" /></td>\n";					echo "\t\t<td>\n\t\t\t<select name=\"type[{$i}]\">\n";					$types->moveFirst();					while (!$types->EOF) {						$typname = $types->fields['typname'];						echo "\t\t\t\t<option value=\"", htmlspecialchars($typname), "\"",						(isset($_REQUEST['type'][$i]) && $typname == $_REQUEST['type'][$i]) ? ' selected="selected"' : '', ">",							$misc->printVal($typname), "</option>\n";						$types->moveNext();					}					echo "\t\t\t</select>\n\t\t</td>\n";										// Output array type selector					echo "\t\t<td>\n\t\t\t<select name=\"array[{$i}]\">\n";					echo "\t\t\t\t<option value=\"\"", (isset($_REQUEST['array'][$i]) && $_REQUEST['array'][$i] == '') ? ' selected="selected"' : '', "></option>\n";					echo "\t\t\t\t<option value=\"[]\"", (isset($_REQUEST['array'][$i]) && $_REQUEST['array'][$i] == '[]') ? ' selected="selected"' : '', ">[ ]</option>\n";					echo "\t\t\t</select>\n\t\t</td>\n";										echo "\t\t<td><input name=\"length[{$i}]\" size=\"10\" value=\"", 						htmlspecialchars($_REQUEST['length'][$i]), "\" /></td>\n";					echo "\t\t<td><input name=\"colcomment[{$i}]\" size=\"40\" value=\"", 						htmlspecialchars($_REQUEST['colcomment'][$i]), "\" /></td>\n\t</tr>\n";				}					echo "</table>\n";				echo "<p><input type=\"hidden\" name=\"action\" value=\"create_comp\" />\n";				echo "<input type=\"hidden\" name=\"stage\" value=\"3\" />\n";				echo $misc->form;				echo "<input type=\"hidden\" name=\"name\" value=\"", htmlspecialchars($_REQUEST['name']), "\" />\n";				echo "<input type=\"hidden\" name=\"fields\" value=\"", htmlspecialchars($_REQUEST['fields']), "\" />\n";				echo "<input type=\"hidden\" name=\"typcomment\" value=\"", htmlspecialchars($_REQUEST['typcomment']), "\" />\n";				echo "<input type=\"submit\" value=\"{$lang['strcreate']}\" />\n";				echo "<input type=\"submit\" name=\"cancel\" value=\"{$lang['strcancel']}\" /></p>\n";				echo "</form>\n";												break;			case 3:				global $data, $lang;				// Check inputs				$fields = trim($_REQUEST['fields']);				if (trim($_REQUEST['name']) == '') {					$_REQUEST['stage'] = 1;					doCreateComposite($lang['strtypeneedsname']);					return;				}				elseif ($fields == '' || !is_numeric($fields) || $fields != (int)$fields || $fields <= 0)  {					$_REQUEST['stage'] = 1;					doCreateComposite($lang['strtypeneedscols']);						return;				}								$status = $data->createCompositeType($_REQUEST['name'], $_REQUEST['fields'], $_REQUEST['field'],								$_REQUEST['type'], $_REQUEST['array'], $_REQUEST['length'], $_REQUEST['colcomment'], 								$_REQUEST['typcomment']);				if ($status == 0)					doDefault($lang['strtypecreated']);				elseif ($status == -1) {					$_REQUEST['stage'] = 2;					doCreateComposite($lang['strtypeneedsfield']);					return;				}				else {					$_REQUEST['stage'] = 2;					doCreateComposite($lang['strtypecreatedbad']);					return;				}				break;			default:				echo "<p>{$lang['strinvalidparam']}</p>\n";		}	}	/**	 * Displays a screen where they can enter a new enum type	 */	function doCreateEnum($msg = '') {		global $data, $misc;		global $lang;		if (!isset($_REQUEST['stage'])) $_REQUEST['stage'] = 1;		if (!isset($_REQUEST['name'])) $_REQUEST['name'] = '';		if (!isset($_REQUEST['values'])) $_REQUEST['values'] = '';		if (!isset($_REQUEST['typcomment'])) $_REQUEST['typcomment'] = '';		switch ($_REQUEST['stage']) {			case 1:				$misc->printTrail('type');				$misc->printTitle($lang['strcreateenumtype'], 'pg.type.create');				$misc->printMsg($msg);								echo "<form action=\"types.php\" method=\"post\">\n";				echo "<table>\n";				echo "\t<tr>\n\t\t<th class=\"data left required\">{$lang['strname']}</th>\n";				echo "\t\t<td class=\"data\"><input name=\"name\" size=\"32\" maxlength=\"{$data->_maxNameLen}\" value=\"", 					htmlspecialchars($_REQUEST['name']), "\" /></td>\n\t</tr>\n";				echo "\t<tr>\n\t\t<th class=\"data left required\">{$lang['strnumvalues']}</th>\n";				echo "\t\t<td class=\"data\"><input name=\"values\" size=\"5\" maxlength=\"{$data->_maxNameLen}\" value=\"", 					htmlspecialchars($_REQUEST['values']), "\" /></td>\n\t</tr>\n";				echo "\t<tr>\n\t\t<th class=\"data left\">{$lang['strcomment']}</th>\n";				echo "\t\t<td><textarea name=\"typcomment\" rows=\"3\" cols=\"32\">", 					htmlspecialchars($_REQUEST['typcomment']), "</textarea></td>\n\t</tr>\n";				echo "</table>\n";				echo "<p><input type=\"hidden\" name=\"action\" value=\"create_enum\" />\n";				echo "<input type=\"hidden\" name=\"stage\" value=\"2\" />\n";				echo $misc->form;				echo "<input type=\"submit\" value=\"{$lang['strnext']}\" />\n";				echo "<input type=\"submit\" name=\"cancel\" value=\"{$lang['strcancel']}\" /></p>\n";				echo "</form>\n";				break;			case 2:				global $lang;				// Check inputs				$values = trim($_REQUEST['values']);				if (trim($_REQUEST['name']) == '') {					$_REQUEST['stage'] = 1;					doCreateEnum($lang['strtypeneedsname']);					return;				}				elseif ($values == '' || !is_numeric($values) || $values != (int)$values || $values < 1)  {					$_REQUEST['stage'] = 1;					doCreateEnum($lang['strtypeneedsvals']);					return;				}				$misc->printTrail('schema');				$misc->printTitle($lang['strcreateenumtype'], 'pg.type.create');				$misc->printMsg($msg);				echo "<form action=\"types.php\" method=\"post\">\n";				// Output table header				echo "<table>\n";				echo "\t<tr><th colspan=\"2\" class=\"data required\">{$lang['strvalue']}</th></tr>\n";								for ($i = 0; $i < $_REQUEST['values']; $i++) {					if (!isset($_REQUEST['value'][$i])) $_REQUEST['value'][$i] = '';					echo "\t<tr>\n\t\t<td>", $i + 1, ".&nbsp;</td>\n";					echo "\t\t<td><input name=\"value[{$i}]\" size=\"16\" maxlength=\"{$data->_maxNameLen}\" value=\"",						htmlspecialchars($_REQUEST['value'][$i]), "\" /></td>\n\t</tr>\n";				}					echo "</table>\n";				echo "<p><input type=\"hidden\" name=\"action\" value=\"create_enum\" />\n";				echo "<input type=\"hidden\" name=\"stage\" value=\"3\" />\n";				echo $misc->form;				echo "<input type=\"hidden\" name=\"name\" value=\"", htmlspecialchars($_REQUEST['name']), "\" />\n";				echo "<input type=\"hidden\" name=\"values\" value=\"", htmlspecialchars($_REQUEST['values']), "\" />\n";				echo "<input type=\"hidden\" name=\"typcomment\" value=\"", htmlspecialchars($_REQUEST['typcomment']), "\" />\n";				echo "<input type=\"submit\" value=\"{$lang['strcreate']}\" />\n";				echo "<input type=\"submit\" name=\"cancel\" value=\"{$lang['strcancel']}\" /></p>\n";				echo "</form>\n";				break;			case 3:				global $data, $lang;				// Check inputs				$values = trim($_REQUEST['values']);				if (trim($_REQUEST['name']) == '') {					$_REQUEST['stage'] = 1;					doCreateEnum($lang['strtypeneedsname']);					return;				}				elseif ($values == '' || !is_numeric($values) || $values != (int)$values || $values <= 0)  {					$_REQUEST['stage'] = 1;					doCreateEnum($lang['strtypeneedsvals']);						return;				}				$status = $data->createEnumType($_REQUEST['name'], $_REQUEST['value'], $_REQUEST['typcomment']);				if ($status == 0)					doDefault($lang['strtypecreated']);				elseif ($status == -1) {					$_REQUEST['stage'] = 2;					doCreateEnum($lang['strtypeneedsvalue']);					return;				}				else {					$_REQUEST['stage'] = 2;					doCreateEnum($lang['strtypecreatedbad']);					return;				}				break;			default:				echo "<p>{$lang['strinvalidparam']}</p>\n";		}	}	/**	 * Displays a screen where they can enter a new type	 */	function doCreate($msg = '') {		global $data, $misc;		global $lang;		if (!isset($_POST['typname'])) $_POST['typname'] = '';		if (!isset($_POST['typin'])) $_POST['typin'] = '';		if (!isset($_POST['typout'])) $_POST['typout'] = '';		if (!isset($_POST['typlen'])) $_POST['typlen'] = '';		if (!isset($_POST['typdef'])) $_POST['typdef'] = '';		if (!isset($_POST['typelem'])) $_POST['typelem'] = '';		if (!isset($_POST['typdelim'])) $_POST['typdelim'] = '';		if (!isset($_POST['typalign'])) $_POST['typalign'] = $data->typAlignDef;		if (!isset($_POST['typstorage'])) $_POST['typstorage'] = $data->typStorageDef;		// Retrieve all functions and types in the database		$funcs = $data->getFunctions(true);		$types = $data->getTypes(true);		$misc->printTrail('schema');		$misc->printTitle($lang['strcreatetype'], 'pg.type.create');		$misc->printMsg($msg);		echo "<form action=\"types.php\" method=\"post\">\n";		echo "<table>\n";		echo "<tr><th class=\"data left required\">{$lang['strname']}</th>\n";		echo "<td class=\"data1\"><input name=\"typname\" size=\"32\" maxlength=\"{$data->_maxNameLen}\" value=\"",			htmlspecialchars($_POST['typname']), "\" /></td></tr>\n";		echo "<tr><th class=\"data left required\">{$lang['strinputfn']}</th>\n";		echo "<td class=\"data1\"><select name=\"typin\">";		while (!$funcs->EOF) {			$proname = htmlspecialchars($funcs->fields['proname']);			echo "<option value=\"{$proname}\"",				($proname == $_POST['typin']) ? ' selected="selected"' : '', ">{$proname}</option>\n";			$funcs->moveNext();		}		echo "</select></td></tr>\n";		echo "<tr><th class=\"data left required\">{$lang['stroutputfn']}</th>\n";		echo "<td class=\"data1\"><select name=\"typout\">";		$funcs->moveFirst();		while (!$funcs->EOF) {			$proname = htmlspecialchars($funcs->fields['proname']);			echo "<option value=\"{$proname}\"",				($proname == $_POST['typout']) ? ' selected="selected"' : '', ">{$proname}</option>\n";			$funcs->moveNext();		}		echo "</select></td></tr>\n";		echo "<tr><th class=\"data left" . (version_compare($data->major_version, '7.4', '<') ? ' required' : '') . "\">{$lang['strlength']}</th>\n";		echo "<td class=\"data1\"><input name=\"typlen\" size=\"8\" value=\"",			htmlspecialchars($_POST['typlen']), "\" /></td></tr>";		echo "<tr><th class=\"data left\">{$lang['strdefault']}</th>\n";		echo "<td class=\"data1\"><input name=\"typdef\" size=\"8\" value=\"",			htmlspecialchars($_POST['typdef']), "\" /></td></tr>";		echo "<tr><th class=\"data left\">{$lang['strelement']}</th>\n";		echo "<td class=\"data1\"><select name=\"typelem\">";		echo "<option value=\"\"></option>\n";		while (!$types->EOF) {			$currname = htmlspecialchars($types->fields['typname']);			echo "<option value=\"{$currname}\"",				($currname == $_POST['typelem']) ? ' selected="selected"' : '', ">{$currname}</option>\n";			$types->moveNext();		}		echo "</select></td></tr>\n";		echo "<tr><th class=\"data left\">{$lang['strdelimiter']}</th>\n";		echo "<td class=\"data1\"><input name=\"typdelim\" size=\"1\" maxlength=\"1\" value=\"",			htmlspecialchars($_POST['typdelim']), "\" /></td></tr>";		echo "<tr><th class=\"data left\"><label for=\"typbyval\">{$lang['strpassbyval']}</label></th>\n";		echo "<td class=\"data1\"><input type=\"checkbox\" id=\"typbyval\" name=\"typbyval\"", 			isset($_POST['typbyval']) ? ' checked="checked"' : '', " /></td></tr>";		echo "<tr><th class=\"data left\">{$lang['stralignment']}</th>\n";		echo "<td class=\"data1\"><select name=\"typalign\">";		foreach ($data->typAligns as $v) {			echo "<option value=\"{$v}\"",				($v == $_POST['typalign']) ? ' selected="selected"' : '', ">{$v}</option>\n";		}		echo "</select></td></tr>\n";		echo "<tr><th class=\"data left\">{$lang['strstorage']}</th>\n";		echo "<td class=\"data1\"><select name=\"typstorage\">";		foreach ($data->typStorages as $v) {			echo "<option value=\"{$v}\"",				($v == $_POST['typstorage']) ? ' selected="selected"' : '', ">{$v}</option>\n";		}		echo "</select></td></tr>\n";		echo "</table>\n";		echo "<p><input type=\"hidden\" name=\"action\" value=\"save_create\" />\n";		echo $misc->form;		echo "<input type=\"submit\" value=\"{$lang['strcreate']}\" />\n";		echo "<input type=\"submit\" name=\"cancel\" value=\"{$lang['strcancel']}\" /></p>\n";		echo "</form>\n";	}		/**	 * Actually creates the new type in the database	 */	function doSaveCreate() {		global $data;		global $lang;		// Check that they've given a name and a length.		// Note: We're assuming they've given in and out functions here		// which might be unwise...		if ($_POST['typname'] == '') doCreate($lang['strtypeneedsname']);		elseif ($_POST['typlen'] == '') doCreate($lang['strtypeneedslen']);		else {		 			$status = $data->createType(				$_POST['typname'],				$_POST['typin'],				$_POST['typout'],				$_POST['typlen'],				$_POST['typdef'],				$_POST['typelem'],				$_POST['typdelim'],				isset($_POST['typbyval']),				$_POST['typalign'],				$_POST['typstorage']			);			if ($status == 0)				doDefault($lang['strtypecreated']);			else				doCreate($lang['strtypecreatedbad']);		}	}		/**	 * Show default list of types in the database	 */	function doDefault($msg = '') {		global $data, $conf, $misc;		global $lang;		$misc->printTrail('schema');		$misc->printTabs('schema','types');		$misc->printMsg($msg);				$types = $data->getTypes();		$columns = array(			'type' => array(				'title' => $lang['strtype'],				'field' => field('typname'),				'url'   => "types.php?action=properties&amp;{$misc->href}&amp;",				'vars'  => array('type' => 'basename'),			),			'owner' => array(				'title' => $lang['strowner'],				'field' => field('typowner'),			),			'flavour' => array(				'title' => $lang['strflavor'],				'field' => field('typtype'),				'type'  => 'verbatim',				'params'=> array(					'map' => array(						'b' => $lang['strbasetype'],						'c' => $lang['strcompositetype'],						'd' => $lang['strdomain'],						'p' => $lang['strpseudotype'],						'e' => $lang['strenum'],					),					'align' => 'center',				),			),			'actions' => array(				'title' => $lang['stractions'],			),			'comment' => array(				'title' => $lang['strcomment'],				'field' => field('typcomment'),			),		);				if (!isset($types->fields['typtype'])) unset($columns['flavour']);		$actions = array(			'drop' => array(				'title' => $lang['strdrop'],				'url'   => "types.php?action=confirm_drop&amp;{$misc->href}&amp;",				'vars'  => array('type' => 'basename'),			),		);				$misc->printTable($types, $columns, $actions, $lang['strnotypes']);		echo "<ul class=\"navlink\">\n\t<li><a href=\"types.php?action=create&amp;{$misc->href}\">{$lang['strcreatetype']}</a></li>\n";		echo "\t<li><a href=\"types.php?action=create_comp&amp;{$misc->href}\">{$lang['strcreatecomptype']}</a></li>\n";		if ($data->hasEnumTypes())			echo "\t<li><a href=\"types.php?action=create_enum&amp;{$misc->href}\">{$lang['strcreateenumtype']}</a></li>\n";		echo "</ul>\n";	}		/**	 * Generate XML for the browser tree.	 */	function doTree() {		global $misc, $data;				$types = $data->getTypes();				$reqvars = $misc->getRequestVars('type');				$attrs = array(			'text'   => field('typname'),			'icon'   => 'Type',			'toolTip'=> field('typcomment'),			'action' => url('types.php',							$reqvars,							array(								'action' => 'properties',								'type'   => field('basename')							)						)		);				$misc->printTreeXML($types, $attrs);		exit;	}		if ($action == 'tree') doTree();		$misc->printHeader($lang['strtypes']);	$misc->printBody();	switch ($action) {		case 'create_comp':			if (isset($_POST['cancel'])) doDefault();			else doCreateComposite();			break;		case 'create_enum':			if (isset($_POST['cancel'])) doDefault();			else doCreateEnum();			break;		case 'save_create':			if (isset($_POST['cancel'])) doDefault();			else doSaveCreate();			break;		case 'create':			doCreate();			break;		case 'drop':			if (isset($_POST['cancel'])) doDefault();			else doDrop(false);			break;		case 'confirm_drop':			doDrop(true);			break;					case 'properties':			doProperties();			break;		default:			doDefault();			break;	}		$misc->printFooter();?>
<?php	/**	 * List tables in a database	 *	 * $Id: tblproperties.php,v 1.92 2008/01/19 13:46:15 ioguix Exp $	 */	// Include application functions	include_once('./libraries/lib.inc.php');	$action = (isset($_REQUEST['action'])) ? $_REQUEST['action'] : '';	/**	 * Function to save after altering a table	 */	function doSaveAlter() {		global $data, $lang, $_reload_browser, $misc;		// For databases that don't allow owner change		if (!isset($_POST['owner'])) $_POST['owner'] = '';		// Default tablespace to null if it isn't set		if (!isset($_POST['tablespace'])) $_POST['tablespace'] = null;		if (!isset($_POST['newschema'])) $_POST['newschema'] = null;		$status = $data->alterTable($_POST['table'], $_POST['name'], $_POST['owner'], $_POST['newschema'], $_POST['comment'], $_POST['tablespace']);		if ($status == 0) {			// If table has been renamed, need to change to the new name and			// reload the browser frame.			if ($_POST['table'] != $_POST['name']) {				// Jump them to the new table name				$_REQUEST['table'] = $_POST['name'];				// Force a browser reload				$_reload_browser = true;			}			// If schema has changed, need to change to the new schema and reload the browser			if (!empty($_POST['newschema']) && ($_POST['newschema'] != $data->_schema)) {				// Jump them to the new sequence schema				$misc->setCurrentSchema($_POST['newschema']);				$_reload_browser = true;			 }			doDefault($lang['strtablealtered']);		}		else			doAlter($lang['strtablealteredbad']);	}	/**	 * Function to allow altering of a table	 */	function doAlter($msg = '') {		global $data, $misc;		global $lang;		$misc->printTrail('table');		$misc->printTitle($lang['stralter'], 'pg.table.alter');		$misc->printMsg($msg);		// Fetch table info		$table = $data->getTable($_REQUEST['table']);		// Fetch all users		$users = $data->getUsers();		// Fetch all tablespaces from the database		if ($data->hasTablespaces()) $tablespaces = $data->getTablespaces(true);		if ($table->recordCount() > 0) {			if (!isset($_POST['name'])) $_POST['name'] = $table->fields['relname'];			if (!isset($_POST['owner'])) $_POST['owner'] = $table->fields['relowner'];			if (!isset($_POST['newschema'])) $_POST['newschema'] = $table->fields['nspname'];			if (!isset($_POST['comment'])) $_POST['comment'] = $table->fields['relcomment'];			if ($data->hasTablespaces() && !isset($_POST['tablespace'])) $_POST['tablespace'] = $table->fields['tablespace'];			echo "<form action=\"tblproperties.php\" method=\"post\">\n";			echo "<table>\n";			echo "<tr><th class=\"data left required\">{$lang['strname']}</th>\n";			echo "<td class=\"data1\">";			echo "<input name=\"name\" size=\"32\" maxlength=\"{$data->_maxNameLen}\" value=\"",				htmlspecialchars($_POST['name'], ENT_QUOTES), "\" /></td></tr>\n";			$server_info = $misc->getServerInfo();			if ($data->isSuperUser($server_info['username'])) {				echo "<tr><th class=\"data left required\">{$lang['strowner']}</th>\n";				echo "<td class=\"data1\"><select name=\"owner\">";				while (!$users->EOF) {					$uname = $users->fields['usename'];					echo "<option value=\"", htmlspecialchars($uname), "\"",						($uname == $_POST['owner']) ? ' selected="selected"' : '', ">", htmlspecialchars($uname), "</option>\n";					$users->moveNext();				}				echo "</select></td></tr>\n";			}			if ($data->hasAlterTableSchema()) {				$schemas = $data->getSchemas();				echo "<tr><th class=\"data left required\">{$lang['strschema']}</th>\n";				echo "<td class=\"data1\"><select name=\"newschema\">";				while (!$schemas->EOF) {					$schema = $schemas->fields['nspname'];					echo "<option value=\"", htmlspecialchars($schema), "\"",						($schema == $_POST['newschema']) ? ' selected="selected"' : '', ">", htmlspecialchars($schema), "</option>\n";					$schemas->moveNext();				}			    echo "</select></td></tr>\n";			}			// Tablespace (if there are any)			if ($data->hasTablespaces() && $tablespaces->recordCount() > 0) {				echo "\t<tr>\n\t\t<th class=\"data left\">{$lang['strtablespace']}</th>\n";				echo "\t\t<td class=\"data1\">\n\t\t\t<select name=\"tablespace\">\n";				// Always offer the default (empty) option				echo "\t\t\t\t<option value=\"\"",					($_POST['tablespace'] == '') ? ' selected="selected"' : '', "></option>\n";				// Display all other tablespaces				while (!$tablespaces->EOF) {					$spcname = htmlspecialchars($tablespaces->fields['spcname']);					echo "\t\t\t\t<option value=\"{$spcname}\"",						($spcname == $_POST['tablespace']) ? ' selected="selected"' : '', ">{$spcname}</option>\n";					$tablespaces->moveNext();				}				echo "\t\t\t</select>\n\t\t</td>\n\t</tr>\n";			}			echo "<tr><th class=\"data left\">{$lang['strcomment']}</th>\n";			echo "<td class=\"data1\">";			echo "<textarea rows=\"3\" cols=\"32\" name=\"comment\">",				htmlspecialchars($_POST['comment']), "</textarea></td></tr>\n";			echo "</table>\n";			echo "<p><input type=\"hidden\" name=\"action\" value=\"alter\" />\n";			echo "<input type=\"hidden\" name=\"table\" value=\"", htmlspecialchars($_REQUEST['table']), "\" />\n";			echo $misc->form;			echo "<input type=\"submit\" name=\"alter\" value=\"{$lang['stralter']}\" />\n";			echo "<input type=\"submit\" name=\"cancel\" value=\"{$lang['strcancel']}\" /></p>\n";			echo "</form>\n";		}		else echo "<p>{$lang['strnodata']}</p>\n";	}	function doExport($msg = '') {		global $data, $misc;		global $lang;		// Determine whether or not the table has an object ID		$hasID = $data->hasObjectID($_REQUEST['table']);		$misc->printTrail('table');		$misc->printTabs('table','export');		$misc->printMsg($msg);		echo "<form action=\"dataexport.php\" method=\"post\">\n";		echo "<table>\n";		echo "<tr><th class=\"data\">{$lang['strformat']}</th><th class=\"data\" colspan=\"2\">{$lang['stroptions']}</th></tr>\n";		// Data only		echo "<tr><th class=\"data left\" rowspan=\"", ($hasID) ? 2 : 1, "\">";		echo "<input type=\"radio\" id=\"what1\" name=\"what\" value=\"dataonly\" checked=\"checked\" /><label for=\"what1\">{$lang['strdataonly']}</label></th>\n";		echo "<td>{$lang['strformat']}</td>\n";		echo "<td><select name=\"d_format\">\n";		echo "<option value=\"copy\">COPY</option>\n";		echo "<option value=\"sql\">SQL</option>\n";		echo "<option value=\"csv\">CSV</option>\n";		echo "<option value=\"tab\">{$lang['strtabbed']}</option>\n";		echo "<option value=\"html\">XHTML</option>\n";		echo "<option value=\"xml\">XML</option>\n";		echo "</select>\n</td>\n</tr>\n";		if ($hasID) {			echo "<tr><td><label for=\"d_oids\">{$lang['stroids']}</td><td><input type=\"checkbox\" id=\"d_oids\" name=\"d_oids\" /></td>\n</tr>\n";		}		// Structure only		echo "<tr><th class=\"data left\"><input type=\"radio\" id=\"what2\" name=\"what\" value=\"structureonly\" /><label for=\"what2\">{$lang['strstructureonly']}</label></th>\n";		echo "<td><label for=\"s_clean\">{$lang['strdrop']}</label></td><td><input type=\"checkbox\" id=\"s_clean\" name=\"s_clean\" /></td>\n</tr>\n";		// Structure and data		echo "<tr><th class=\"data left\" rowspan=\"", ($hasID) ? 3 : 2, "\">";		echo "<input type=\"radio\" id=\"what3\" name=\"what\" value=\"structureanddata\" /><label for=\"what3\">{$lang['strstructureanddata']}</label></th>\n";		echo "<td>{$lang['strformat']}</td>\n";		echo "<td><select name=\"sd_format\">\n";		echo "<option value=\"copy\">COPY</option>\n";		echo "<option value=\"sql\">SQL</option>\n";		echo "</select>\n</td>\n</tr>\n";		echo "<tr><td><label for=\"sd_clean\">{$lang['strdrop']}</label></td><td><input type=\"checkbox\" id=\"sd_clean\" name=\"sd_clean\" /></td>\n</tr>\n";		if ($hasID) {			echo "<tr><td><label for=\"sd_oids\">{$lang['stroids']}</label></td><td><input type=\"checkbox\" id=\"sd_oids\" name=\"sd_oids\" /></td>\n</tr>\n";		}		echo "</table>\n";		echo "<h3>{$lang['stroptions']}</h3>\n";		echo "<p><input type=\"radio\" id=\"output1\" name=\"output\" value=\"show\" checked=\"checked\" /><label for=\"output1\">{$lang['strshow']}</label>\n";		echo "<br/><input type=\"radio\" id=\"output2\" name=\"output\" value=\"download\" /><label for=\"output2\">{$lang['strdownload']}</label></p>\n";		echo "<p><input type=\"hidden\" name=\"action\" value=\"export\" />\n";		echo $misc->form;		echo "<input type=\"hidden\" name=\"subject\" value=\"table\" />\n";		echo "<input type=\"hidden\" name=\"table\" value=\"", htmlspecialchars($_REQUEST['table']), "\" />\n";		echo "<input type=\"submit\" value=\"{$lang['strexport']}\" /></p>\n";		echo "</form>\n";	}	function doImport($msg = '') {		global $data, $misc;		global $lang;		$misc->printTrail('table');		$misc->printTabs('table','import');		$misc->printMsg($msg);		// Check that file uploads are enabled		if (ini_get('file_uploads')) {			// Don't show upload option if max size of uploads is zero			$max_size = $misc->inisizeToBytes(ini_get('upload_max_filesize'));			if (is_double($max_size) && $max_size > 0) {				echo "<form action=\"dataimport.php\" method=\"post\" enctype=\"multipart/form-data\">\n";				echo "<table>\n";				echo "\t<tr>\n\t\t<th class=\"data left required\">{$lang['strformat']}</th>\n";				echo "\t\t<td><select name=\"format\">\n";				echo "\t\t\t<option value=\"auto\">{$lang['strauto']}</option>\n";				echo "\t\t\t<option value=\"csv\">CSV</option>\n";				echo "\t\t\t<option value=\"tab\">{$lang['strtabbed']}</option>\n";				if (function_exists('xml_parser_create')) {					echo "\t\t\t<option value=\"xml\">XML</option>\n";				}				echo "\t\t</select></td>\n\t</tr>\n";				echo "\t<tr>\n\t\t<th class=\"data left required\">{$lang['strallowednulls']}</th>\n";				echo "\t\t<td><label><input type=\"checkbox\" name=\"allowednulls[0]\" value=\"\\N\" checked=\"checked\" />{$lang['strbackslashn']}</label><br />\n";				echo "\t\t<label><input type=\"checkbox\" name=\"allowednulls[1]\" value=\"NULL\" />NULL</label><br />\n";				echo "\t\t<label><input type=\"checkbox\" name=\"allowednulls[2]\" value=\"\" />{$lang['stremptystring'] }</label></td>\n\t</tr>\n";				echo "\t<tr>\n\t\t<th class=\"data left required\">{$lang['strfile']}</th>\n";				echo "\t\t<td><input type=\"hidden\" name=\"MAX_FILE_SIZE\" value=\"{$max_size}\" />";				echo "<input type=\"file\" name=\"source\" /></td>\n\t</tr>\n";				echo "</table>\n";				echo "<p><input type=\"hidden\" name=\"action\" value=\"import\" />\n";				echo $misc->form;				echo "<input type=\"hidden\" name=\"table\" value=\"", htmlspecialchars($_REQUEST['table']), "\" />\n";				echo "<input type=\"submit\" value=\"{$lang['strimport']}\" /></p>\n";				echo "</form>\n";			}		}		else echo "<p>{$lang['strnouploads']}</p>\n";	}	/**	 * Displays a screen where they can add a column	 */	function doAddColumn($msg = '') {		global $data, $misc, $_reload_browser;		global $lang;		if (!isset($_REQUEST['stage'])) $_REQUEST['stage'] = 1;		switch ($_REQUEST['stage']) {			case 1:				// Set variable defaults				if (!isset($_POST['field'])) $_POST['field'] = '';				if (!isset($_POST['type'])) $_POST['type'] = '';				if (!isset($_POST['array'])) $_POST['array'] = '';				if (!isset($_POST['length'])) $_POST['length'] = '';				if (!isset($_POST['default'])) $_POST['default'] = '';				if (!isset($_POST['comment'])) $_POST['comment'] = '';				// Fetch all available types				$types = $data->getTypes(true, false, true);				$types_for_js = array();				$misc->printTrail('table');				$misc->printTitle($lang['straddcolumn'], 'pg.column.add');				$misc->printMsg($msg);				echo "<script src=\"tables.js\" type=\"text/javascript\"></script>";				echo "<form action=\"tblproperties.php\" method=\"post\">\n";				// Output table header				echo "<table>\n";				echo "<tr><th class=\"data required\">{$lang['strname']}</th>\n<th colspan=\"2\" class=\"data required\">{$lang['strtype']}</th>\n";				echo "<th class=\"data\">{$lang['strlength']}</th>\n";				if ($data->hasCreateFieldWithConstraints())					echo "<th class=\"data\">{$lang['strnotnull']}</th>\n<th class=\"data\">{$lang['strdefault']}</th>\n";				echo "<th class=\"data\">{$lang['strcomment']}</th></tr>\n";				echo "<tr><td><input name=\"field\" size=\"16\" maxlength=\"{$data->_maxNameLen}\" value=\"",					htmlspecialchars($_POST['field']), "\" /></td>\n";				echo "<td><select name=\"type\" id=\"type\" onchange=\"checkLengths(document.getElementById('type').value,'');\">\n";				// Output any "magic" types.  This came in with the alter column type so we'll check that				if ($data->hasMagicTypes()) {					foreach ($data->extraTypes as $v) {						$types_for_js[] = strtolower($v);						echo "\t<option value=\"", htmlspecialchars($v), "\"",						($v == $_POST['type']) ? ' selected="selected"' : '', ">",							$misc->printVal($v), "</option>\n";					}				}				while (!$types->EOF) {					$typname = $types->fields['typname'];					$types_for_js[] = $typname;					echo "\t<option value=\"", htmlspecialchars($typname), "\"", ($typname == $_POST['type']) ? ' selected="selected"' : '', ">",						$misc->printVal($typname), "</option>\n";					$types->moveNext();				}				echo "</select></td>\n";				// Output array type selector				echo "<td><select name=\"array\">\n";				echo "\t<option value=\"\"", ($_POST['array'] == '') ? ' selected="selected"' : '', "></option>\n";				echo "\t<option value=\"[]\"", ($_POST['array'] == '[]') ? ' selected="selected"' : '', ">[ ]</option>\n";				echo "</select></td>\n";				$predefined_size_types = array_intersect($data->predefined_size_types, $types_for_js);				$escaped_predef_types = array(); // the JS escaped array elements				foreach($predefined_size_types as $value) {					$escaped_predef_types[] = "'{$value}'";				}				echo "<td><input name=\"length\" id=\"lengths\" size=\"8\" value=\"",					htmlspecialchars($_POST['length']), "\" /></td>\n";				// Support for adding column with not null and default				if ($data->hasCreateFieldWithConstraints()) {					echo "<td><input type=\"checkbox\" name=\"notnull\"",						(isset($_REQUEST['notnull'])) ? ' checked="checked"' : '', " /></td>\n";					echo "<td><input name=\"default\" size=\"20\" value=\"",						htmlspecialchars($_POST['default']), "\" /></td>\n";				}				echo "<td><input name=\"comment\" size=\"40\" value=\"",					htmlspecialchars($_POST['comment']), "\" /></td></tr>\n";				echo "</table>\n";				echo "<p><input type=\"hidden\" name=\"action\" value=\"add_column\" />\n";				echo "<input type=\"hidden\" name=\"stage\" value=\"2\" />\n";				echo $misc->form;				echo "<input type=\"hidden\" name=\"table\" value=\"", htmlspecialchars($_REQUEST['table']), "\" />\n";				if (!$data->hasCreateFieldWithConstraints()) {					echo "<input type=\"hidden\" name=\"default\" value=\"\" />\n";				}				echo "<input type=\"submit\" value=\"{$lang['stradd']}\" />\n";				echo "<input type=\"submit\" name=\"cancel\" value=\"{$lang['strcancel']}\" /></p>\n";				echo "</form>\n";				echo "<script type=\"text/javascript\">predefined_lengths = new Array(". implode(",",$escaped_predef_types) .");checkLengths(document.getElementById('type').value,'');</script>\n";				break;			case 2:				// Check inputs				if (trim($_POST['field']) == '') {					$_REQUEST['stage'] = 1;					doAddColumn($lang['strcolneedsname']);					return;				}				if (!isset($_POST['length'])) $_POST['length'] = '';				$status = $data->addColumn($_POST['table'], $_POST['field'],							   $_POST['type'], $_POST['array'] != '', $_POST['length'], isset($_POST['notnull']),							   $_POST['default'], $_POST['comment']);				if ($status == 0) {					$_reload_browser = true;					doDefault($lang['strcolumnadded']);				}				else {					$_REQUEST['stage'] = 1;					doAddColumn($lang['strcolumnaddedbad']);					return;				}				break;			default:				echo "<p>{$lang['strinvalidparam']}</p>\n";		}	}	/**	 * Show confirmation of drop column and perform actual drop	 */	function doDrop($confirm) {		global $data, $database, $misc, $_reload_browser;		global $lang;		if ($confirm) {			$misc->printTrail('column');			$misc->printTitle($lang['strdrop'], 'pg.column.drop');            echo "<p>", sprintf($lang['strconfdropcolumn'], $misc->printVal($_REQUEST['column']),                    $misc->printVal($_REQUEST['table'])), "</p>\n";			echo "<form action=\"tblproperties.php\" method=\"post\">\n";			echo "<input type=\"hidden\" name=\"action\" value=\"drop\" />\n";			echo "<input type=\"hidden\" name=\"table\" value=\"", htmlspecialchars($_REQUEST['table']), "\" />\n";			echo "<input type=\"hidden\" name=\"column\" value=\"", htmlspecialchars($_REQUEST['column']), "\" />\n";			echo $misc->form;			echo "<p><input type=\"checkbox\" id=\"cascade\" name=\"cascade\"> <label for=\"cascade\">{$lang['strcascade']}</label></p>\n";			echo "<input type=\"submit\" name=\"drop\" value=\"{$lang['strdrop']}\" />\n";			echo "<input type=\"submit\" name=\"cancel\" value=\"{$lang['strcancel']}\" />\n";			echo "</form>\n";		}		else {			$status = $data->dropColumn($_POST['table'], $_POST['column'], isset($_POST['cascade']));			if ($status == 0) {				$_reload_browser = true;				doDefault($lang['strcolumndropped']);			}			else				doDefault($lang['strcolumndroppedbad']);		}	}	function doTree() {		global $misc, $data;		$columns = $data->getTableAttributes($_REQUEST['table']);		$reqvars = $misc->getRequestVars('column');		$attrs = array (			'text'   => field('attname'),			'action' => url('colproperties.php',							$reqvars,							array(								'table'		=> $_REQUEST['table'],								'column'	=> field('attname')							)						),			'icon'   => 'Column',			'iconAction' => url('display.php',								$reqvars,								array(									'table'		=> $_REQUEST['table'],									'column'	=> field('attname'),									'query'		=> replace(														'SELECT "%column%", count(*) AS "count" FROM "%table%" GROUP BY "%column%" ORDER BY "%column%"',														array (															'%column%' => field('attname'),															'%table%' => $_REQUEST['table']														)													)								)							),			'toolTip'=> field('comment')		);		$misc->printTreeXML($columns, $attrs);		exit;	}	if ($action == 'tree') doTree();	/**	 * Show default list of columns in the table	 */	function doDefault($msg = '') {		global $data, $conf, $misc;		global $lang;		function attPre(&$rowdata, $actions) {			global $data;			$rowdata->fields['+type'] = $data->formatType($rowdata->fields['type'], $rowdata->fields['atttypmod']);			$attname = $rowdata->fields['attname'];			$table = $_REQUEST['table'];			$data->fieldClean($attname);			$data->fieldClean($table);			$actions['browse']['url'] .= 'query=' . urlencode("SELECT \"{$attname}\", count(*) AS \"count\"				FROM \"{$table}\" GROUP BY \"{$attname}\" ORDER BY \"{$attname}\"") . '&amp;';			return $actions;		}		$misc->printTrail('table');		$misc->printTabs('table','columns');		$misc->printMsg($msg);		// Get table		$tdata = $data->getTable($_REQUEST['table']);		// Get columns		$attrs = $data->getTableAttributes($_REQUEST['table']);		// Get constraints keys		$ck = $data->getConstraintsWithFields($_REQUEST['table']);		// Show comment if any		if ($tdata->fields['relcomment'] !== null)			echo '<p class="comment">', $misc->printVal($tdata->fields['relcomment']), "</p>\n";		$columns = array(			'column' => array(				'title' => $lang['strcolumn'],				'field' => field('attname'),				'url'   => "colproperties.php?subject=column&amp;{$misc->href}&amp;table=".urlencode($_REQUEST['table'])."&amp;",				'vars'  => array('column' => 'attname'),			),			'type' => array(				'title' => $lang['strtype'],				'field' => field('+type'),			),			'notnull' => array(				'title' => $lang['strnotnull'],				'field' => field('attnotnull'),				'type'  => 'bool',				'params'=> array('true' => 'NOT NULL', 'false' => ''),			),			'default' => array(				'title' => $lang['strdefault'],				'field' => field('adsrc'),			),			'keyprop' => array(				'title' => $lang['strconstraints'],				'field' => field('attname'),				'type'  => 'callback',				'params'=> array(					'function' => 'cstrRender',					'keys' => $ck->getArray()				)			),			'actions' => array(				'title' => $lang['stractions'],			),			'comment' => array(				'title' => $lang['strcomment'],				'field' => field('comment'),			),		);		function cstrRender($s, $p) {			global $misc, $data;			$str ='';			foreach ($p['keys'] as $k => $c) {				if (is_null($p['keys'][$k]['consrc'])) {					$atts = $data->getAttributeNames($_REQUEST['table'], explode(' ', $p['keys'][$k]['indkey']));					$c['consrc'] = ($c['contype'] == 'u' ? "UNIQUE (" : "PRIMARY KEY (") . join(',', $atts) . ')';				}				if ($c['p_field'] == $s)					switch ($c['contype']) {						case 'p':							$str .= '<a href="constraints.php?'. $misc->href ."&amp;table=". urlencode($c['p_table']) ."&amp;schema=". urlencode($c['p_schema']) ."\"><img src=\"".								$misc->icon('PrimaryKey') .'" alt="[pk]" title="'. htmlentities($c['consrc']) .'" /></a>';						break;						case 'f':							$str .= '<a href="tblproperties.php?'. $misc->href ."&amp;table=". urlencode($c['f_table']) ."&amp;schema=". urlencode($c['f_schema']) ."\"><img src=\"".								$misc->icon('ForeignKey') .'" alt="[fk]" title="'. htmlentities($c['consrc']) .'" /></a>';						break;						case 'u':							$str .= '<a href="constraints.php?'. $misc->href ."&amp;table=". urlencode($c['p_table']) ."&amp;schema=". urlencode($c['p_schema']) ."\"><img src=\"".								$misc->icon('UniqueConstraint') .'" alt="[uniq]" title="'. htmlentities($c['consrc']) .'" /></a>';						break;						case 'c':							$str .= '<a href="constraints.php?'. $misc->href ."&amp;table=". urlencode($c['p_table']) ."&amp;schema=". urlencode($c['p_schema']) ."\"><img src=\"".								$misc->icon('CheckConstraint') .'" alt="[check]" title="'. htmlentities($c['consrc']) .'" /></a>';					}			}			return $str;		}		$return_url = urlencode("tblproperties.php?{$misc->href}&amp;table=". urlencode($_REQUEST['table']));		$actions = array(			'browse' => array(				'title' => $lang['strbrowse'],				'url' => "display.php?{$misc->href}&amp;subject=column&amp;return_url={$return_url}&amp;table=".urlencode($_REQUEST['table'])."&amp;return_desc=" . urlencode($lang['strback']) . '&amp;',				'vars' => array('column' => 'attname'),			),			'alter' => array(				'title' => $lang['stralter'],				'url'   => "colproperties.php?action=properties&amp;{$misc->href}&amp;table=".urlencode($_REQUEST['table'])."&amp;",				'vars'  => array('column' => 'attname'),			),			'privileges' => array(				'title' => $lang['strprivileges'],				'url'   => "privileges.php?subject=column&amp;{$misc->href}&amp;table=".urlencode($_REQUEST['table'])."&amp;",				'vars'  => array('column' => 'attname'),			),			'drop' => array(				'title' => $lang['strdrop'],				'url'   => "tblproperties.php?action=confirm_drop&amp;{$misc->href}&amp;table=".urlencode($_REQUEST['table'])."&amp;",				'vars'  => array('column' => 'attname'),			),		);		$misc->printTable($attrs, $columns, $actions, null, 'attPre');		echo "<ul class=\"navlink\">\n";		echo "\t<li><a href=\"display.php?{$misc->href}&amp;table=", urlencode($_REQUEST['table']), "&amp;subject=table&amp;return_url={$return_url}&amp;return_desc=",			urlencode($lang['strback']), "\">{$lang['strbrowse']}</a></li>\n";		echo "\t<li><a href=\"tables.php?action=confselectrows&amp;{$misc->href}&amp;table=", urlencode($_REQUEST['table']),"\">{$lang['strselect']}</a></li>\n";		echo "\t<li><a href=\"tables.php?action=confinsertrow&amp;{$misc->href}&amp;table=", urlencode($_REQUEST['table']),"\">{$lang['strinsert']}</a></li>\n";		echo "\t<li><a href=\"tables.php?action=confirm_empty&amp;{$misc->href}&amp;table=", urlencode($_REQUEST['table']),"\">{$lang['strempty']}</a></li>\n";		echo "\t<li><a href=\"tables.php?action=confirm_drop&amp;{$misc->href}&amp;table=", urlencode($_REQUEST['table']),"\">{$lang['strdrop']}</a></li>\n";		echo "\t<li><a href=\"tblproperties.php?action=add_column&amp;{$misc->href}&amp;table=", urlencode($_REQUEST['table']),"\">{$lang['straddcolumn']}</a></li>\n";		echo "\t<li><a href=\"tblproperties.php?action=confirm_alter&amp;{$misc->href}&amp;table=", urlencode($_REQUEST['table']),"\">{$lang['stralter']}</a></li>\n";		echo "</ul>\n";	}	$misc->printHeader($lang['strtables'] . ' - ' . $_REQUEST['table']);	$misc->printBody();	switch ($action) {		case 'alter':			if (isset($_POST['alter'])) doSaveAlter();			else doDefault();			break;		case 'confirm_alter':			doAlter();			break;		case 'import':			doImport();			break;		case 'export':			doExport();			break;		case 'add_column':			if (isset($_POST['cancel'])) doDefault();			else doAddColumn();			break;		case 'properties':			if (isset($_POST['cancel'])) doDefault();			else doProperties();			break;		case 'drop':			if (isset($_POST['drop'])) doDrop(false);			else doDefault();			break;		case 'confirm_drop':			doDrop(true);			break;		default:			doDefault();			break;	}	$misc->printFooter();?>
<?php	/**	 * List triggers on a table	 *	 * $Id: triggers.php,v 1.37 2007/09/19 14:42:12 ioguix Exp $	 */	// Include application functions	include_once('./libraries/lib.inc.php');	include_once('./classes/class.select.php');		$action = (isset($_REQUEST['action'])) ? $_REQUEST['action'] : '';	/** 	 * Function to save after altering a trigger	 */	function doSaveAlter() {		global $data, $lang;				$status = $data->alterTrigger($_POST['table'], $_POST['trigger'], $_POST['name']);		if ($status == 0)			doDefault($lang['strtriggeraltered']);		else			doAlter($lang['strtriggeralteredbad']);	}	/**	 * Function to allow altering of a trigger	 */	function doAlter($msg = '') {		global $data, $misc;		global $lang;				$misc->printTrail('trigger');		$misc->printTitle($lang['stralter'],'pg.trigger.alter');		$misc->printMsg($msg);				$triggerdata = $data->getTrigger($_REQUEST['table'], $_REQUEST['trigger']);				if ($triggerdata->recordCount() > 0) {						if (!isset($_POST['name'])) $_POST['name'] = $triggerdata->fields['tgname'];						echo "<form action=\"triggers.php\" method=\"post\">\n";			echo "<table>\n";			echo "<tr><th class=\"data\">{$lang['strname']}</th>\n";			echo "<td class=\"data1\">";			echo "<input name=\"name\" size=\"32\" maxlength=\"{$data->_maxNameLen}\" value=\"", 				htmlspecialchars($_POST['name']), "\" />\n";			echo "</table>\n";			echo "<p><input type=\"hidden\" name=\"action\" value=\"alter\" />\n";			echo "<input type=\"hidden\" name=\"table\" value=\"", htmlspecialchars($_REQUEST['table']), "\" />\n";			echo "<input type=\"hidden\" name=\"trigger\" value=\"", htmlspecialchars($_REQUEST['trigger']), "\" />\n";			echo $misc->form;			echo "<input type=\"submit\" name=\"alter\" value=\"{$lang['strok']}\" />\n";			echo "<input type=\"submit\" name=\"cancel\" value=\"{$lang['strcancel']}\" /></p>\n";			echo "</form>\n";		}		else echo "<p>{$lang['strnodata']}</p>\n";	}		/**	 * Show confirmation of drop and perform actual drop	 */	function doDrop($confirm) {		global $data, $misc;		global $lang;		if ($confirm) {			$misc->printTrail('trigger');			$misc->printTitle($lang['strdrop'],'pg.trigger.drop');			echo "<p>", sprintf($lang['strconfdroptrigger'], $misc->printVal($_REQUEST['trigger']),				$misc->printVal($_REQUEST['table'])), "</p>\n";			echo "<form action=\"triggers.php\" method=\"post\">\n";			echo "<input type=\"hidden\" name=\"action\" value=\"drop\" />\n";			echo "<input type=\"hidden\" name=\"table\" value=\"", htmlspecialchars($_REQUEST['table']), "\" />\n";			echo "<input type=\"hidden\" name=\"trigger\" value=\"", htmlspecialchars($_REQUEST['trigger']), "\" />\n";			echo $misc->form;			echo "<p><input type=\"checkbox\" id=\"cascade\" name=\"cascade\" /> <label for=\"cascade\">{$lang['strcascade']}</label></p>\n";			echo "<input type=\"submit\" name=\"yes\" value=\"{$lang['stryes']}\" />\n";			echo "<input type=\"submit\" name=\"no\" value=\"{$lang['strno']}\" />\n";			echo "</form>\n";		}		else {			$status = $data->dropTrigger($_POST['trigger'], $_POST['table'], isset($_POST['cascade']));			if ($status == 0)				doDefault($lang['strtriggerdropped']);			else				doDefault($lang['strtriggerdroppedbad']);		}	}	/**	 * Show confirmation of enable trigger and perform enabling the trigger	 */	function doEnable($confirm) {		global $data, $misc;		global $lang;		if ($confirm) {			$misc->printTrail('trigger');			$misc->printTitle($lang['strenable'],'pg.table.alter');			echo "<p>", sprintf($lang['strconfenabletrigger'], $misc->printVal($_REQUEST['trigger']),				$misc->printVal($_REQUEST['table'])), "</p>\n";			echo "<form action=\"triggers.php\" method=\"post\">\n";			echo "<input type=\"hidden\" name=\"action\" value=\"enable\" />\n";			echo "<input type=\"hidden\" name=\"table\" value=\"", htmlspecialchars($_REQUEST['table']), "\" />\n";			echo "<input type=\"hidden\" name=\"trigger\" value=\"", htmlspecialchars($_REQUEST['trigger']), "\" />\n";			echo $misc->form;			echo "<input type=\"submit\" name=\"yes\" value=\"{$lang['stryes']}\" />\n";			echo "<input type=\"submit\" name=\"no\" value=\"{$lang['strno']}\" />\n";			echo "</form>\n";		}		else {			$status = $data->enableTrigger($_POST['trigger'], $_POST['table']);			if ($status == 0)				doDefault($lang['strtriggerenabled']);			else				doDefault($lang['strtriggerenabledbad']);		}	}	/**	 * Show confirmation of disable trigger and perform disabling the trigger	 */	function doDisable($confirm) {		global $data, $misc;		global $lang;		if ($confirm) {			$misc->printTrail('trigger');			$misc->printTitle($lang['strdisable'],'pg.table.alter');			echo "<p>", sprintf($lang['strconfdisabletrigger'], $misc->printVal($_REQUEST['trigger']),				$misc->printVal($_REQUEST['table'])), "</p>\n";			echo "<form action=\"triggers.php\" method=\"post\">\n";			echo "<input type=\"hidden\" name=\"action\" value=\"disable\" />\n";			echo "<input type=\"hidden\" name=\"table\" value=\"", htmlspecialchars($_REQUEST['table']), "\" />\n";			echo "<input type=\"hidden\" name=\"trigger\" value=\"", htmlspecialchars($_REQUEST['trigger']), "\" />\n";			echo $misc->form;			echo "<input type=\"submit\" name=\"yes\" value=\"{$lang['stryes']}\" />\n";			echo "<input type=\"submit\" name=\"no\" value=\"{$lang['strno']}\" />\n";			echo "</form>\n";		}		else {			$status = $data->disableTrigger($_POST['trigger'], $_POST['table']);			if ($status == 0)				doDefault($lang['strtriggerdisabled']);			else				doDefault($lang['strtriggerdisabledbad']);		}	}	/**	 * Let them create s.th.	 */	function doCreate($msg = '') {		global $data, $misc;		global $lang;				$misc->printTrail('table');		$misc->printTitle($lang['strcreatetrigger'],'pg.trigger.create');		$misc->printMsg($msg);				// Get all the functions that can be used in triggers		$funcs = $data->getTriggerFunctions();		if ($funcs->recordCount() == 0) {			doDefault($lang['strnofunctions']);			return;		}		/* Populate functions */		$sel0 = new XHTML_Select('formFunction');		while (!$funcs->EOF) {			$sel0->add(new XHTML_Option($funcs->fields['proname']));			$funcs->moveNext();		}		/* Populate times */		$sel1 = new XHTML_Select('formExecTime');		$sel1->set_data($data->triggerExecTimes);		/* Populate events */		$sel2 = new XHTML_Select('formEvent');		$sel2->set_data($data->triggerEvents);				/* Populate occurences */		$sel3 = new XHTML_Select('formFrequency');		$sel3->set_data($data->triggerFrequency);				echo "<form action=\"triggers.php\" method=\"post\">\n";		echo "<table>\n";		echo "<tr>\n";		echo "		<th class=\"data\">{$lang['strname']}</th>\n";		echo "		<th class=\"data\">{$lang['strwhen']}</th>\n";		echo "</tr>\n";		echo "<tr>\n";		echo "		<td class=\"data1\"> <input type=\"text\" name=\"formTriggerName\" size=\"32\" /></td>\n";		echo "		<td class=\"data1\"> ", $sel1->fetch(), "</td>\n";		echo "</tr>\n";		echo "<tr>\n";		echo "    <th class=\"data\">{$lang['strevent']}</th>\n";		echo "    <th class=\"data\">{$lang['strforeach']}</th>\n";		echo "</tr>\n";		echo "<tr>\n";		echo "     <td class=\"data1\"> ", $sel2->fetch(), "</td>\n";		echo "     <td class=\"data1\"> ", $sel3->fetch(), "</td>\n";		echo "</tr>\n";		echo "<tr><th class=\"data\"> {$lang['strfunction']}</th>\n";		echo "<th class=\"data\"> {$lang['strarguments']}</th></tr>\n";		echo "<tr><td class=\"data1\">", $sel0->fetch(), "</td>\n";		echo "<td class=\"data1\">(<input type=\"text\" name=\"formTriggerArgs\" size=\"32\" />)</td>\n";		echo "</tr></table>\n";		echo "<p><input type=\"submit\" value=\"{$lang['strcreate']}\" />\n";		echo "<input type=\"submit\" name=\"cancel\" value=\"{$lang['strcancel']}\" /></p>\n";		echo "<input type=\"hidden\" name=\"action\" value=\"save_create\" />\n";		echo "<input type=\"hidden\" name=\"table\" value=\"", htmlspecialchars($_REQUEST['table']), "\" />\n";		echo $misc->form;		echo "</form>\n";	}		/**	 * Actually creates the new trigger in the database	 */	function doSaveCreate() {		global $data;		global $lang;					// Check that they've given a name and a definition		if ($_POST['formFunction'] == '')			doCreate($lang['strtriggerneedsfunc']);		elseif ($_POST['formTriggerName'] == '')			doCreate($lang['strtriggerneedsname']);		elseif ($_POST['formEvent'] == '') 			doCreate();		else {		 			$status = $data->createTrigger($_POST['formTriggerName'], $_POST['table'],					$_POST['formFunction'], $_POST['formExecTime'], $_POST['formEvent'],					$_POST['formFrequency'], $_POST['formTriggerArgs']);			if ($status == 0)				doDefault($lang['strtriggercreated']);			else				doCreate($lang['strtriggercreatedbad']);		}	}		/**	 * List all the triggers on the table	 */	function doDefault($msg = '') {		global $data, $misc, $database;		global $lang;		function tgPre(&$rowdata) {			global $data, $lang;			// Nasty hack to support pre-7.4 PostgreSQL			$rowdata->fields['+tgdef'] = $rowdata->fields['tgdef'] !== null									? $rowdata->fields['tgdef']									: $data->getTriggerDef($rowdata->fields);		}				$misc->printTrail('table');		$misc->printTabs('table','triggers');		$misc->printMsg($msg);		$triggers = $data->getTriggers($_REQUEST['table']);		$columns = array(			'trigger' => array(				'title' => $lang['strname'],				'field' => field('tgname'),			),			'definition' => array(				'title' => $lang['strdefinition'],				'field' => field('+tgdef'),			),			'function' => array(				'title' => $lang['strfunction'],				'field' => field('proproto'),				'url' => "functions.php?action=properties&amp;server={$_REQUEST['server']}&amp;database={$_REQUEST['database']}&amp;",				'vars' => array(					'schema' => 'pronamespace',					'function' => 'proproto',					'function_oid' => 'prooid',				),			),			'actions' => array(				'title' => $lang['stractions'],			),		);		$actions = array(			'alter' => array(				'title' => $lang['stralter'],				'url'   => "triggers.php?action=confirm_alter&amp;{$misc->href}&amp;table=".urlencode($_REQUEST['table'])."&amp;",				'vars'  => array('trigger' => 'tgname'),			),			'drop' => array(				'title' => $lang['strdrop'],				'url'   => "triggers.php?action=confirm_drop&amp;{$misc->href}&amp;table=".urlencode($_REQUEST['table'])."&amp;",				'vars'  => array('trigger' => 'tgname'),			),		);		if($data->hasDisableTriggers()) {			if(!$data->phpBool($triggers->fields["tgenabled"])) {				$actions['enable'] = array(					'title' => $lang['strenable'],					'url'   => "triggers.php?action=confirm_enable&amp;{$misc->href}&amp;table=".urlencode($_REQUEST['table'])."&amp;",					'vars'  => array('trigger' => 'tgname'),				);			} else {				$actions['disable'] = array(					'title' => $lang['strdisable'],					'url'   => "triggers.php?action=confirm_disable&amp;{$misc->href}&amp;table=".urlencode($_REQUEST['table'])."&amp;",					'vars'  => array('trigger' => 'tgname'),				);			}		}		$misc->printTable($triggers, $columns, $actions, $lang['strnotriggers'], 'tgPre');				echo "<p><a class=\"navlink\" href=\"triggers.php?action=create&amp;{$misc->href}&amp;table=", urlencode($_REQUEST['table']), "\">{$lang['strcreatetrigger']}</a></p>\n";	}	function doTree() {		global $misc, $data;		$triggers = $data->getTriggers($_REQUEST['table']);		$reqvars = $misc->getRequestVars('table');				$attrs = array(			'text'   => field('tgname'),			'icon'   => 'Trigger',		);		$misc->printTreeXML($triggers, $attrs);		exit;	}	if ($action == 'tree') doTree();	$misc->printHeader($lang['strtables'] . ' - ' . $_REQUEST['table'] . ' - ' . $lang['strtriggers']);	$misc->printBody();	switch ($action) {		case 'alter':			if (isset($_POST['alter'])) doSaveAlter();			else doDefault();			break;		case 'confirm_alter':			doAlter();			break;		case 'confirm_enable':			doEnable(true);			break;		case 'confirm_disable':			doDisable(true);			break;		case 'save_create':			if (isset($_POST['cancel'])) doDefault();			else doSaveCreate();			break;		case 'create':			doCreate();			break;		case 'drop':			if (isset($_POST['yes'])) doDrop(false);			else doDefault();			break;		case 'confirm_drop':			doDrop(true);			break;		case 'enable':			if (isset($_POST['yes'])) doEnable(false);			else doDefault();			break;		case 'disable':			if (isset($_POST['yes'])) doDisable(false);			else doDefault();			break;		default:			doDefault();			break;	}		$misc->printFooter();?>
<?php	/**	 * List Columns properties in tables	 *	 * $Id: colproperties.php	 */	// Include application functions	include_once('./libraries/lib.inc.php');	$action = (isset($_REQUEST['action'])) ? $_REQUEST['action'] : '';	if (isset($_REQUEST['table']))		$tableName =& $_REQUEST['table'];	elseif (isset($_REQUEST['view']))		$tableName =& $_REQUEST['view'];	else 		die($lang['strnotableprovided']);	/**	 * Displays a screen where they can alter a column	 */	function doAlter($msg = '') {		global $data, $misc, $_reload_browser;		global $lang;		if (!isset($_REQUEST['stage'])) $_REQUEST['stage'] = 1;		switch ($_REQUEST['stage']) {			case 1:				$misc->printTrail('column');				$misc->printTitle($lang['stralter'], 'pg.column.alter'); 				$misc->printMsg($msg);				echo "<script src=\"tables.js\" type=\"text/javascript\"></script>";				echo "<form action=\"colproperties.php\" method=\"post\">\n";				// Output table header				echo "<table>\n";				echo "<tr><th class=\"data required\">{$lang['strname']}</th>\n";				if ($data->hasAlterColumnType()) {					echo "<th class=\"data required\" colspan=\"2\">{$lang['strtype']}</th>\n";					echo "<th class=\"data\">{$lang['strlength']}</th>\n";				}				else {					echo "<th class=\"data required\">{$lang['strtype']}</th>\n";				}				echo "<th class=\"data\">{$lang['strnotnull']}</th>\n<th class=\"data\">{$lang['strdefault']}</th>\n<th class=\"data\">{$lang['strcomment']}</th></tr>\n";				$column = $data->getTableAttributes($_REQUEST['table'], $_REQUEST['column']);				$column->fields['attnotnull'] = $data->phpBool($column->fields['attnotnull']);				// Upon first drawing the screen, load the existing column information				// from the database.				if (!isset($_REQUEST['default'])) {					$_REQUEST['field'] = $column->fields['attname'];					$_REQUEST['type'] = $column->fields['base_type'];					// Check to see if its' an array type...					// XXX: HACKY					if (substr($column->fields['base_type'], strlen($column->fields['base_type']) - 2) == '[]') {						$_REQUEST['type'] = substr($column->fields['base_type'], 0, strlen($column->fields['base_type']) - 2);						$_REQUEST['array'] = '[]';					}					else {						$_REQUEST['type'] = $column->fields['base_type'];						$_REQUEST['array'] = '';					}					// To figure out the length, look in the brackets :(					// XXX: HACKY					if ($column->fields['type'] != $column->fields['base_type'] && preg_match('/\\(([0-9, ]*)\\)/', $column->fields['type'], $bits)) {						$_REQUEST['length'] = $bits[1];					}					else						$_REQUEST['length'] = '';					$_REQUEST['default'] = $_REQUEST['olddefault'] = $column->fields['adsrc'];					if ($column->fields['attnotnull']) $_REQUEST['notnull'] = 'YES';					$_REQUEST['comment'] = $column->fields['comment'];				}								// Column name				echo "<tr><td><input name=\"field\" size=\"16\" maxlength=\"{$data->_maxNameLen}\" value=\"",					htmlspecialchars($_REQUEST['field']), "\" /></td>\n";									// Column type				$escaped_predef_types = array(); // the JS escaped array elements				if ($data->hasAlterColumnType()) {					// Fetch all available types					$types = $data->getTypes(true, false, true);					$types_for_js = array();										echo "<td><select name=\"type\" id=\"type\" onchange=\"checkLengths(document.getElementById('type').value,'');\">\n";									while (!$types->EOF) {						$typname = $types->fields['typname'];						$types_for_js[] = $typname;						echo "\t<option value=\"", htmlspecialchars($typname), "\"", ($typname == $_REQUEST['type']) ? ' selected="selected"' : '', ">",							$misc->printVal($typname), "</option>\n";						$types->moveNext();					}					echo "</select></td>\n";										// Output array type selector					echo "<td><select name=\"array\">\n";					echo "\t<option value=\"\"", ($_REQUEST['array'] == '') ? ' selected="selected"' : '', "></option>\n";					echo "\t<option value=\"[]\"", ($_REQUEST['array'] == '[]') ? ' selected="selected"' : '', ">[ ]</option>\n";					echo "</select></td>\n";					$predefined_size_types = array_intersect($data->predefined_size_types, $types_for_js);					foreach($predefined_size_types as $value) {						$escaped_predef_types[] = "'{$value}'";					}						echo "<td><input name=\"length\" id=\"lengths\" size=\"8\" value=\"",						htmlspecialchars($_REQUEST['length']), "\" /></td>\n";				} else {					// Otherwise draw the read-only type name					echo "<td>", $misc->printVal($data->formatType($column->fields['type'], $column->fields['atttypmod'])), "</td>\n";				}								echo "<td><input type=\"checkbox\" name=\"notnull\"", (isset($_REQUEST['notnull'])) ? ' checked="checked"' : '', " /></td>\n";				echo "<td><input name=\"default\" size=\"20\" value=\"", 					htmlspecialchars($_REQUEST['default']), "\" /></td>\n";				echo "<td><input name=\"comment\" size=\"40\" value=\"", 					htmlspecialchars($_REQUEST['comment']), "\" /></td></tr>\n";				echo "</table>\n";				echo "<p><input type=\"hidden\" name=\"action\" value=\"properties\" />\n";				echo "<input type=\"hidden\" name=\"stage\" value=\"2\" />\n";				echo $misc->form;				echo "<input type=\"hidden\" name=\"table\" value=\"", htmlspecialchars($_REQUEST['table']), "\" />\n";				echo "<input type=\"hidden\" name=\"column\" value=\"", htmlspecialchars($_REQUEST['column']), "\" />\n";				echo "<input type=\"hidden\" name=\"olddefault\" value=\"", htmlspecialchars($_REQUEST['olddefault']), "\" />\n";				if ($column->fields['attnotnull']) echo "<input type=\"hidden\" name=\"oldnotnull\" value=\"on\" />\n";				echo "<input type=\"hidden\" name=\"oldtype\" value=\"", htmlspecialchars($data->formatType($column->fields['type'], $column->fields['atttypmod'])), "\" />\n";				// Add hidden variables to suppress error notices if we don't support altering column type				if (!$data->hasAlterColumnType()) {					echo "<input type=\"hidden\" name=\"type\" value=\"", htmlspecialchars($_REQUEST['type']), "\" />\n";									echo "<input type=\"hidden\" name=\"length\" value=\"", htmlspecialchars($_REQUEST['length']), "\" />\n";									echo "<input type=\"hidden\" name=\"array\" value=\"", htmlspecialchars($_REQUEST['array']), "\" />\n";								}				echo "<input type=\"submit\" value=\"{$lang['stralter']}\" />\n";				echo "<input type=\"submit\" name=\"cancel\" value=\"{$lang['strcancel']}\" /></p>\n";				echo "</form>\n";				echo "<script type=\"text/javascript\">predefined_lengths = new Array(". implode(",",$escaped_predef_types) .");checkLengths(document.getElementById('type').value,'');</script>\n";						break;			case 2:				// Check inputs				if (trim($_REQUEST['field']) == '') {					$_REQUEST['stage'] = 1;					doAlter($lang['strcolneedsname']);					return;				}				if (!isset($_REQUEST['length'])) $_REQUEST['length'] = '';				$status = $data->alterColumn($_REQUEST['table'], $_REQUEST['column'], $_REQUEST['field'], 							     isset($_REQUEST['notnull']), isset($_REQUEST['oldnotnull']), 							     $_REQUEST['default'], $_REQUEST['olddefault'],							     $_REQUEST['type'], $_REQUEST['length'], $_REQUEST['array'], $_REQUEST['oldtype'],							     $_REQUEST['comment']);				if ($status == 0) {					if ($_REQUEST['column'] != $_REQUEST['field']) {						$_REQUEST['column'] = $_REQUEST['field'];						$_reload_browser = true;					}					doDefault($lang['strcolumnaltered']);				}				else {					$_REQUEST['stage'] = 1;					doAlter($lang['strcolumnalteredbad']);					return;				}				break;			default:				echo "<p>{$lang['strinvalidparam']}</p>\n";		}	}	/**	 * Show default list of columns in the table	 */	function doDefault($msg = '', $isTable = true) {		global $data, $conf, $misc, $tableName;		global $lang;		function attPre(&$rowdata) {			global $data;			$rowdata->fields['+type'] = $data->formatType($rowdata->fields['type'], $rowdata->fields['atttypmod']);		}				if (empty($_REQUEST['column']))			$msg.= "<br/>{$lang['strnoobjects']}";					$misc->printTrail('column');			//$misc->printTitle($lang['strcolprop']);			$misc->printTabs('column','properties');			$misc->printMsg($msg);		if (! empty($_REQUEST['column'])) {			// Get table			$tdata = $data->getTable($tableName);			// Get columns			$attrs = $data->getTableAttributes($tableName, $_REQUEST['column']);			// Show comment if any			if ($attrs->fields['comment'] !== null)				echo "<p class=\"comment\">", $misc->printVal($attrs->fields['comment']), "</p>\n";			$column = array(				'column' => array(					'title' => $lang['strcolumn'],					'field' => field('attname'),				),				'type' => array(					'title' => $lang['strtype'],					'field' => field('+type'),				)			);					if ($isTable) {				$column['notnull'] = array(					'title' => $lang['strnotnull'],					'field' => field('attnotnull'),					'type'  => 'bool',					'params'=> array('true' => 'NOT NULL', 'false' => '')				);				$column['default'] = array(					'title' => $lang['strdefault'],					'field' => field('adsrc'),				);			}			$actions=array();			$misc->printTable($attrs, $column, $actions, null, 'attPre');			echo "<br />\n";			echo "<ul class=\"navlink\">\n";			$f_attname = $_REQUEST['column'];			$f_table = $tableName;			$f_schema = $data->_schema;			$data->fieldClean($f_attname);			$data->fieldClean($f_table);			$data->fieldClean($f_schema);			$query_url = urlencode("SELECT \"{$f_attname}\", count(*) AS \"count\" FROM \"{$f_schema}\".\"{$f_table}\" GROUP BY \"{$f_attname}\" ORDER BY \"{$f_attname}\"") ;			if ($isTable) {				$return_url = urlencode("colproperties.php?{$misc->href}&amp;table=". urlencode($tableName)					."&amp;column=". urlencode($_REQUEST['column']));				/* Browse link */				/* FIXME browsing a col should somehow be a action so we don't				 * send an ugly SQL in the URL */				echo "\t<li><a href=\"display.php?{$misc->href}&amp;subject=column&amp;table=",					urlencode($_REQUEST['table']),					"&amp;column=", urlencode($_REQUEST['column']),					"&amp;return_url={$return_url}&amp;return_desc=", urlencode($lang['strback']), 					"&amp;query={$query_url}\">{$lang['strbrowse']}</a></li>\n";				/* Edit link */				echo "\t<li><a href=\"colproperties.php?action=properties&amp;{$misc->href}&amp;table=", urlencode($tableName),				    "&amp;column=", urlencode($_REQUEST['column']) . "\">{$lang['stralter']}</a></li>\n";									echo "\t<li><a href=\"tblproperties.php?action=confirm_drop&amp;{$misc->href}&amp;table=", urlencode($tableName),						"&amp;column=" . urlencode($_REQUEST['column']) . "\">{$lang['strdrop']}</a></li>\n";			} else {				$return_url = urlencode("colproperties.php?{$misc->href}&amp;view=". urlencode($tableName)					."&amp;column=". urlencode($_REQUEST['column']));				/* Browse link */				echo "\t<li><a href=\"display.php?{$misc->href}&amp;subject=column&amp;column=",					urlencode($_REQUEST['column']), "&amp;return_url={$return_url}&amp;return_desc=", urlencode($lang['strback']),					"&amp;query={$query_url}\">{$lang['strbrowse']}</a></li>\n";			}			echo "</ul>\n";		}	}	$misc->printHeader($lang['strtables'] . ' - ' . $tableName);	$misc->printBody();	if (isset($_REQUEST['view']))		doDefault(null, false);	else		switch ($action) {			case 'properties':				if (isset($_POST['cancel'])) doDefault();				else doAlter();				break;			default:				doDefault();				break;		}		$misc->printFooter();?>
<?php	/**	 * Process an arbitrary SQL query - tricky!  The main problem is that	 * unless we implement a full SQL parser, there's no way of knowing	 * how many SQL statements have been strung together with semi-colons	 * @param $_SESSION['sqlquery'] The SQL query string to execute	 *	 * $Id: sql.php,v 1.43 2008/01/10 20:19:27 xzilla Exp $	 */	// Prevent timeouts on large exports (non-safe mode only)	if (!ini_get('safe_mode')) set_time_limit(0);	// Include application functions	include_once('./libraries/lib.inc.php');	/**	 * This is a callback function to display the result of each separate query	 * @param ADORecordSet $rs The recordset returned by the script execetor	 */	function sqlCallback($query, $rs, $lineno) {		global $data, $misc, $lang, $_connection;		// Check if $rs is false, if so then there was a fatal error		if ($rs === false) {			echo htmlspecialchars($_FILES['script']['name']), ':', $lineno, ': ', nl2br(htmlspecialchars($_connection->getLastError())), "<br/>\n";		}		else {			// Print query results			switch (pg_result_status($rs)) {				case PGSQL_TUPLES_OK:					// If rows returned, then display the results					$num_fields = pg_numfields($rs);					echo "<p><table>\n<tr>";					for ($k = 0; $k < $num_fields; $k++) {						echo "<th class=\"data\">", $misc->printVal(pg_fieldname($rs, $k)), "</th>";					}							$i = 0;					$row = pg_fetch_row($rs);					while ($row !== false) {						$id = (($i % 2) == 0 ? '1' : '2');						echo "<tr class=\"data{$id}\">\n";						foreach ($row as $k => $v) {							echo "<td style=\"white-space:nowrap;\">", $misc->printVal($v, pg_fieldtype($rs, $k), array('null' => true)), "</td>";						}													echo "</tr>\n";						$row = pg_fetch_row($rs);						$i++;					};					echo "</table><br/>\n";					echo $i, " {$lang['strrows']}</p>\n";					break;				case PGSQL_COMMAND_OK:					// If we have the command completion tag					if (version_compare(phpversion(), '4.3', '>=')) {						echo htmlspecialchars(pg_result_status($rs, PGSQL_STATUS_STRING)), "<br/>\n";					}					// Otherwise if any rows have been affected					elseif ($data->conn->Affected_Rows() > 0) {						echo $data->conn->Affected_Rows(), " {$lang['strrowsaff']}<br/>\n";					}					// Otherwise output nothing...					break;				case PGSQL_EMPTY_QUERY:					break;				default:					break;			}		}	}	// We need to store the query in a session for editing purposes	// We avoid GPC vars to avoid truncating long queries	// If we came from a report, we need to look up the query	if (isset($_REQUEST['subject']) && $_REQUEST['subject'] == 'report' ) {		global $data, $misc;		include_once('./classes/Reports.php');		$reportsdb = new Reports($status);		$report = $reportsdb->getReport($_REQUEST['reportid']);		$_SESSION['sqlquery'] = $report->fields['report_sql'];		} 	elseif (isset($_POST['query'])) {		// Or maybe we came from an sql form		$_SESSION['sqlquery'] = $_POST['query'];	} else {		echo "could not find the query!!";	}		// Pagination maybe set by a get link that has it as FALSE,	// if that's the case, unset the variable.	if (isset($_REQUEST['paginate']) && $_REQUEST['paginate'] == 'f') {		unset($_REQUEST['paginate']);		unset($_POST['paginate']);		unset($_GET['paginate']);	}	// Check to see if pagination has been specified. In that case, send to display	// script for pagination	/* if a file is given or the request is an explain, do not paginate */	if (isset($_REQUEST['paginate']) && !(isset($_FILES['script']) && $_FILES['script']['size'] > 0)			&& (preg_match('/^\s*explain/i', $_SESSION['sqlquery']) == 0)) {		include('./display.php');		exit;	}		$subject = isset($_REQUEST['subject'])? $_REQUEST['subject'] : '';	$misc->printHeader($lang['strqueryresults']);	$misc->printBody();	$misc->printTrail('database');	$misc->printTitle($lang['strqueryresults']);	// Set the schema search path	if (isset($_REQUEST['search_path'])) {		if ($data->setSearchPath(array_map('trim',explode(',',$_REQUEST['search_path']))) != 0) {			$misc->printFooter();			exit;		}	}	// May as well try to time the query	if (function_exists('microtime')) {		list($usec, $sec) = explode(' ', microtime());		$start_time = ((float)$usec + (float)$sec);	}	else $start_time = null;	// Execute the query.  If it's a script upload, special handling is necessary	if (isset($_FILES['script']) && $_FILES['script']['size'] > 0)		$data->executeScript('script', 'sqlCallback');	else {		// Set fetch mode to NUM so that duplicate field names are properly returned		$data->conn->setFetchMode(ADODB_FETCH_NUM);		$rs = $data->conn->Execute($_SESSION['sqlquery']);		// $rs will only be an object if there is no error		if (is_object($rs)) {			// Request was run, saving it in history			if(!isset($_REQUEST['nohistory']))				$misc->saveScriptHistory($_SESSION['sqlquery']);			// Now, depending on what happened do various things				// First, if rows returned, then display the results			if ($rs->recordCount() > 0) {				echo "<table>\n<tr>";				foreach ($rs->fields as $k => $v) {					$finfo = $rs->fetchField($k);					echo "<th class=\"data\">", $misc->printVal($finfo->name), "</th>";				}                                echo "</tr>\n";					$i = 0;						while (!$rs->EOF) {					$id = (($i % 2) == 0 ? '1' : '2');					echo "<tr class=\"data{$id}\">\n";					foreach ($rs->fields as $k => $v) {						$finfo = $rs->fetchField($k);						echo "<td style=\"white-space:nowrap;\">", $misc->printVal($v, $finfo->type, array('null' => true)), "</td>";					}												echo "</tr>\n";					$rs->moveNext();					$i++;				}				echo "</table>\n";				echo "<p>", $rs->recordCount(), " {$lang['strrows']}</p>\n";			}			// Otherwise if any rows have been affected			elseif ($data->conn->Affected_Rows() > 0) {				echo "<p>", $data->conn->Affected_Rows(), " {$lang['strrowsaff']}</p>\n";			}			// Otherwise nodata to print			else echo '<p>', $lang['strnodata'], "</p>\n";		}	}	// May as well try to time the query	if ($start_time !== null) {		list($usec, $sec) = explode(' ', microtime());		$end_time = ((float)$usec + (float)$sec);			// Get duration in milliseconds, round to 3dp's			$duration = number_format(($end_time - $start_time) * 1000, 3);	}	else $duration = null;	// Reload the browser as we may have made schema changes	$_reload_browser = true;	// Display duration if we know it	if ($duration !== null) {		echo "<p>", sprintf($lang['strruntime'], $duration), "</p>\n";	}		echo "<p>{$lang['strsqlexecuted']}</p>\n";				echo "<ul class=\"navlink\">\n";		// Return	if (isset($_REQUEST['return_url']) && isset($_REQUEST['return_desc']))		echo "\t<li><a href=\"{$_REQUEST['return_url']}\">{$_REQUEST['return_desc']}</a></li>\n";	// Edit			echo "\t<li><a href=\"database.php?database=", urlencode($_REQUEST['database']),		"&amp;server=", urlencode($_REQUEST['server']), "&amp;action=sql\">{$lang['streditsql']}</a></li>\n";					// Create report	if (($subject !== 'report') && $conf['show_reports'] && isset($rs) && is_object($rs) && $rs->recordCount() > 0)		echo "\t<li><a href=\"reports.php?{$misc->href}&amp;action=create&amp;report_sql=",			urlencode($_SESSION['sqlquery']), "\">{$lang['strcreatereport']}</a></li>\n";		// Create view and download	if (isset($_SESSION['sqlquery']) && isset($rs) && is_object($rs) && $rs->recordCount() > 0) {		// Report views don't set a schema, so we need to disable create view in that case		if (isset($_REQUEST['schema'])) 			echo "\t<li><a href=\"views.php?action=create&amp;formDefinition=",				urlencode($_SESSION['sqlquery']), "&amp;{$misc->href}\">{$lang['strcreateview']}</a></li>\n";		echo "\t<li><a href=\"dataexport.php?query=", urlencode($_SESSION['sqlquery']);		if (isset($_REQUEST['search_path']))			echo "&amp;search_path=", urlencode($_REQUEST['search_path']);		echo "&amp;{$misc->href}\">{$lang['strdownload']}</a></li>\n";	}	echo "</ul>\n";		$misc->printFooter();?>
<?php	/**	 * Manage schemas within a database	 *	 * $Id: database.php,v 1.104 2007/11/30 06:04:43 xzilla Exp $	 */	// Include application functions	include_once('./libraries/lib.inc.php');	$action = (isset($_REQUEST['action'])) ? $_REQUEST['action'] : '';	if (!isset($msg)) $msg = '';	$scripts = '';	function _highlight($string, $term) {		return str_replace($term, "<b>{$term}</b>", $string);	}		/**	 * Sends a signal to a process	 */	function doSignal() {		global $data, $lang;		$status = $data->sendSignal($_REQUEST['procpid'], $_REQUEST['signal']);		if ($status == 0)			doProcesses($lang['strsignalsent']);		else			doProcesses($lang['strsignalsentbad']);	}	/**	 * Searches for a named database object	 */	function doFind($confirm = true, $msg = '') {		global $data, $misc;		global $lang, $conf;		if (!isset($_REQUEST['term'])) $_REQUEST['term'] = '';		if (!isset($_REQUEST['filter'])) $_REQUEST['filter'] = '';		$misc->printTrail('database');		$misc->printTabs('database','find');		$misc->printMsg($msg);				echo "<form action=\"database.php\" method=\"post\">\n";		echo "<p><input name=\"term\" value=\"", htmlspecialchars($_REQUEST['term']), 			"\" size=\"32\" maxlength=\"{$data->_maxNameLen}\" />\n";		// Output list of filters.  This is complex due to all the 'has' and 'conf' feature possibilities		echo "<select name=\"filter\">\n";		echo "\t<option value=\"\"", ($_REQUEST['filter'] == '') ? ' selected="selected"' : '', ">{$lang['strallobjects']}</option>\n";		echo "\t<option value=\"SCHEMA\"", ($_REQUEST['filter'] == 'SCHEMA') ? ' selected="selected"' : '', ">{$lang['strschemas']}</option>\n";		echo "\t<option value=\"TABLE\"", ($_REQUEST['filter'] == 'TABLE') ? ' selected="selected"' : '', ">{$lang['strtables']}</option>\n";		echo "\t<option value=\"VIEW\"", ($_REQUEST['filter'] == 'VIEW') ? ' selected="selected"' : '', ">{$lang['strviews']}</option>\n";		echo "\t<option value=\"SEQUENCE\"", ($_REQUEST['filter'] == 'SEQUENCE') ? ' selected="selected"' : '', ">{$lang['strsequences']}</option>\n";		echo "\t<option value=\"COLUMN\"", ($_REQUEST['filter'] == 'COLUMN') ? ' selected="selected"' : '', ">{$lang['strcolumns']}</option>\n";		echo "\t<option value=\"RULE\"", ($_REQUEST['filter'] == 'RULE') ? ' selected="selected"' : '', ">{$lang['strrules']}</option>\n";		echo "\t<option value=\"INDEX\"", ($_REQUEST['filter'] == 'INDEX') ? ' selected="selected"' : '', ">{$lang['strindexes']}</option>\n";		echo "\t<option value=\"TRIGGER\"", ($_REQUEST['filter'] == 'TRIGGER') ? ' selected="selected"' : '', ">{$lang['strtriggers']}</option>\n";		echo "\t<option value=\"CONSTRAINT\"", ($_REQUEST['filter'] == 'CONSTRAINT') ? ' selected="selected"' : '', ">{$lang['strconstraints']}</option>\n";		echo "\t<option value=\"FUNCTION\"", ($_REQUEST['filter'] == 'FUNCTION') ? ' selected="selected"' : '', ">{$lang['strfunctions']}</option>\n";		echo "\t<option value=\"DOMAIN\"", ($_REQUEST['filter'] == 'DOMAIN') ? ' selected="selected"' : '', ">{$lang['strdomains']}</option>\n";		if ($conf['show_advanced']) {			echo "\t<option value=\"AGGREGATE\"", ($_REQUEST['filter'] == 'AGGREGATE') ? ' selected="selected"' : '', ">{$lang['straggregates']}</option>\n";			echo "\t<option value=\"TYPE\"", ($_REQUEST['filter'] == 'TYPE') ? ' selected="selected"' : '', ">{$lang['strtypes']}</option>\n";			echo "\t<option value=\"OPERATOR\"", ($_REQUEST['filter'] == 'OPERATOR') ? ' selected="selected"' : '', ">{$lang['stroperators']}</option>\n";			echo "\t<option value=\"OPCLASS\"", ($_REQUEST['filter'] == 'OPCLASS') ? ' selected="selected"' : '', ">{$lang['stropclasses']}</option>\n";			echo "\t<option value=\"CONVERSION\"", ($_REQUEST['filter'] == 'CONVERSION') ? ' selected="selected"' : '', ">{$lang['strconversions']}</option>\n";			echo "\t<option value=\"LANGUAGE\"", ($_REQUEST['filter'] == 'LANGUAGE') ? ' selected="selected"' : '', ">{$lang['strlanguages']}</option>\n";		}		echo "</select>\n";		echo "<input type=\"submit\" value=\"{$lang['strfind']}\" />\n";		echo $misc->form;		echo "<input type=\"hidden\" name=\"action\" value=\"find\" /></p>\n";		echo "</form>\n";				// Default focus		$misc->setFocus('forms[0].term');		// If a search term has been specified, then perform the search		// and display the results, grouped by object type		if ($_REQUEST['term'] != '') {			$rs = $data->findObject($_REQUEST['term'], $_REQUEST['filter']);			if ($rs->recordCount() > 0) {				$curr = '';				while (!$rs->EOF) {					// Output a new header if the current type has changed, but not if it's just changed the rule type					if ($rs->fields['type'] != $curr) {						// Short-circuit in the case of changing from table rules to view rules; table cols to view cols;						// table constraints to domain constraints						if ($rs->fields['type'] == 'RULEVIEW' && $curr == 'RULETABLE') {							$curr = $rs->fields['type'];						}						elseif ($rs->fields['type'] == 'COLUMNVIEW' && $curr == 'COLUMNTABLE') {							$curr = $rs->fields['type'];						}						elseif ($rs->fields['type'] == 'CONSTRAINTTABLE' && $curr == 'CONSTRAINTDOMAIN') {							$curr = $rs->fields['type'];						}						else {							if ($curr != '') echo "</ul>\n";							$curr = $rs->fields['type'];							echo "<h3>";							switch ($curr) {								case 'SCHEMA':									echo $lang['strschemas'];									break;								case 'TABLE':									echo $lang['strtables'];									break;								case 'VIEW':									echo $lang['strviews'];									break;								case 'SEQUENCE':									echo $lang['strsequences'];									break;								case 'COLUMNTABLE':								case 'COLUMNVIEW':									echo $lang['strcolumns'];									break;								case 'INDEX':									echo $lang['strindexes'];									break;								case 'CONSTRAINTTABLE':								case 'CONSTRAINTDOMAIN':									echo $lang['strconstraints'];									break;								case 'TRIGGER':									echo $lang['strtriggers'];									break;								case 'RULETABLE':								case 'RULEVIEW':									echo $lang['strrules'];									break;								case 'FUNCTION':									echo $lang['strfunctions'];									break;								case 'TYPE':									echo $lang['strtypes'];									break;								case 'DOMAIN':									echo $lang['strdomains'];									break;								case 'OPERATOR':									echo $lang['stroperators'];									break;								case 'CONVERSION':									echo $lang['strconversions'];									break;								case 'LANGUAGE':									echo $lang['strlanguages'];									break;								case 'AGGREGATE':									echo $lang['straggregates'];									break;								case 'OPCLASS':									echo $lang['stropclasses'];									break;							}							echo "</h3>";							echo "<ul>\n";						}					}										switch ($curr) {						case 'SCHEMA':													echo "<li><a href=\"redirect.php?subject=schema&amp;{$misc->href}&amp;schema=", $misc->printVal($rs->fields['name']), "\">", _highlight($misc->printVal($rs->fields['name']), $_REQUEST['term']), "</a></li>\n";							break;						case 'TABLE':							echo "<li>";							echo "<a href=\"tables.php?subject=schema&amp;{$misc->href}&amp;schema=", urlencode($rs->fields['schemaname']), "\">", $misc->printVal($rs->fields['schemaname']), "</a>.";							echo "<a href=\"redirect.php?subject=table&amp;{$misc->href}&amp;schema=", urlencode($rs->fields['schemaname']), "&amp;table=", 								urlencode($rs->fields['name']), "\">", _highlight($misc->printVal($rs->fields['name']), $_REQUEST['term']), "</a></li>\n";							break;						case 'VIEW':							echo "<li>";							echo "<a href=\"views.php?subject=schema&amp;{$misc->href}&amp;schema=", urlencode($rs->fields['schemaname']), "\">", $misc->printVal($rs->fields['schemaname']), "</a>.";							echo "<a href=\"redirect.php?subject=view&amp;{$misc->href}&amp;schema=", urlencode($rs->fields['schemaname']), "&amp;view=", 								urlencode($rs->fields['name']), "\">", _highlight($misc->printVal($rs->fields['name']), $_REQUEST['term']), "</a></li>\n";							break;						case 'SEQUENCE':							echo "<li>";							echo "<a href=\"sequences.php?subject=schema&amp;{$misc->href}&amp;schema=", urlencode($rs->fields['schemaname']), "\">", $misc->printVal($rs->fields['schemaname']), "</a>.";							echo "<a href=\"sequences.php?subject=sequence&amp;action=properties&amp;{$misc->href}&amp;schema=", urlencode($rs->fields['schemaname']), 								"&amp;sequence=", urlencode($rs->fields['name']), "\">", _highlight($misc->printVal($rs->fields['name']), $_REQUEST['term']), "</a></li>\n";							break;						case 'COLUMNTABLE':							echo "<li>";							echo "<a href=\"redirect.php?subject=schema&amp;{$misc->href}&amp;schema=", urlencode($rs->fields['schemaname']), "\">", $misc->printVal($rs->fields['schemaname']), "</a>.";							echo "<a href=\"tblproperties.php?subject=table&amp;{$misc->href}&amp;table=", urlencode($rs->fields['relname']), "&amp;schema=", urlencode($rs->fields['schemaname']), "\">", $misc->printVal($rs->fields['relname']), "</a>.";							echo "<a href=\"colproperties.php?{$misc->href}&amp;schema=", urlencode($rs->fields['schemaname']), "&amp;table=", 								urlencode($rs->fields['relname']), "&amp;column=", urlencode($rs->fields['name']), "\">", 								_highlight($misc->printVal($rs->fields['name']), $_REQUEST['term']), "</a></li>\n";							break;						case 'COLUMNVIEW':							echo "<li>";							echo "<a href=\"redirect.php?subject=schema&amp;{$misc->href}&amp;schema=", urlencode($rs->fields['schemaname']), "\">", $misc->printVal($rs->fields['schemaname']), "</a>.";							echo "<a href=\"viewproperties.php?subject=view&amp;{$misc->href}&amp;view=", urlencode($rs->fields['relname']), "&amp;schema=", urlencode($rs->fields['schemaname']), "\">", $misc->printVal($rs->fields['relname']), "</a>.";							echo "<a href=\"colproperties.php?{$misc->href}&amp;schema=", urlencode($rs->fields['schemaname']), "&amp;view=", 								urlencode($rs->fields['relname']), "&amp;column=", urlencode($rs->fields['name']), "\">", 								_highlight($misc->printVal($rs->fields['name']), $_REQUEST['term']), "</a></li>\n";							break;						case 'INDEX':							echo "<li>";							echo "<a href=\"redirect.php?subject=schema&amp;{$misc->href}&amp;schema=", urlencode($rs->fields['schemaname']), "\">", $misc->printVal($rs->fields['schemaname']), "</a>.";							echo "<a href=\"redirect.php?subject=table&amp;{$misc->href}&amp;table=", urlencode($rs->fields['relname']), "&amp;schema=", urlencode($rs->fields['schemaname']), "\">", $misc->printVal($rs->fields['relname']), "</a>.";							echo "<a href=\"indexes.php?{$misc->href}&amp;schema=", urlencode($rs->fields['schemaname']), "&amp;table=", urlencode($rs->fields['relname']), "\">", _highlight($misc->printVal($rs->fields['name']), $_REQUEST['term']), "</a></li>\n";							break;						case 'CONSTRAINTTABLE':							echo "<li>";							echo "<a href=\"redirect.php?subject=schema&amp;{$misc->href}&amp;schema=", urlencode($rs->fields['schemaname']), "\">", $misc->printVal($rs->fields['schemaname']), "</a>.";							echo "<a href=\"redirect.php?subject=table&amp;{$misc->href}&amp;table=", urlencode($rs->fields['relname']), "&amp;schema=", urlencode($rs->fields['schemaname']), "\">", $misc->printVal($rs->fields['relname']), "</a>.";							echo "<a href=\"constraints.php?{$misc->href}&amp;schema=", urlencode($rs->fields['schemaname']), "&amp;table=", 								urlencode($rs->fields['relname']), "\">", _highlight($misc->printVal($rs->fields['name']), $_REQUEST['term']), "</a></li>\n";							break;						case 'CONSTRAINTDOMAIN':							echo "<li>";							echo "<a href=\"domains.php?subject=schema&amp;{$misc->href}&amp;schema=", urlencode($rs->fields['schemaname']), "\">", $misc->printVal($rs->fields['schemaname']), "</a>.";							echo "<a href=\"domains.php?action=properties&amp;{$misc->href}&amp;schema=", urlencode($rs->fields['schemaname']), "&amp;domain=", urlencode($rs->fields['relname']), "\">", 								$misc->printVal($rs->fields['relname']), '.', _highlight($misc->printVal($rs->fields['name']), $_REQUEST['term']), "</a></li>\n";							break;						case 'TRIGGER':							echo "<li>";							echo "<a href=\"redirect.php?subject=schema&amp;{$misc->href}&amp;schema=", urlencode($rs->fields['schemaname']), "\">", $misc->printVal($rs->fields['schemaname']), "</a>.";							echo "<a href=\"redirect.php?subject=table&amp;{$misc->href}&amp;table=", urlencode($rs->fields['relname']), "&amp;schema=", urlencode($rs->fields['schemaname']), "\">", $misc->printVal($rs->fields['relname']), "</a>.";							echo "<a href=\"triggers.php?{$misc->href}&amp;schema=", urlencode($rs->fields['schemaname']), "&amp;table=", urlencode($rs->fields['relname']), "\">", 								_highlight($misc->printVal($rs->fields['name']), $_REQUEST['term']), "</a></li>\n";							break;						case 'RULETABLE':							echo "<li>";							echo "<a href=\"redirect.php?subject=schema&amp;{$misc->href}&amp;schema=", urlencode($rs->fields['schemaname']), "\">", $misc->printVal($rs->fields['schemaname']), "</a>.";							echo "<a href=\"redirect.php?subject=table&amp;{$misc->href}&amp;table=", urlencode($rs->fields['relname']), "&amp;schema=", urlencode($rs->fields['schemaname']), "\">", $misc->printVal($rs->fields['relname']), "</a>.";							echo "<a href=\"rules.php?subject=table&amp;{$misc->href}&amp;schema=", urlencode($rs->fields['schemaname']), "&amp;reltype=table&amp;table=", 								urlencode($rs->fields['relname']), "\">", _highlight($misc->printVal($rs->fields['name']), $_REQUEST['term']), "</a></li>\n";							break;						case 'RULEVIEW':							echo "<li>";							echo "<a href=\"redirect.php?subject=schema&amp;{$misc->href}&amp;schema=", urlencode($rs->fields['schemaname']), "\">", $misc->printVal($rs->fields['schemaname']), "</a>.";							echo "<a href=\"redirect.php?subject=view&amp;{$misc->href}&amp;view=", urlencode($rs->fields['relname']), "&amp;schema=", urlencode($rs->fields['schemaname']), "\">", $misc->printVal($rs->fields['relname']), "</a>.";							echo "<a href=\"rules.php?subject=view&amp;{$misc->href}&amp;schema=", urlencode($rs->fields['schemaname']), "&amp;reltype=view&amp;view=", 								urlencode($rs->fields['relname']), "\">", _highlight($misc->printVal($rs->fields['name']), $_REQUEST['term']), "</a></li>\n";							break;						case 'FUNCTION':							echo "<li>";							echo "<a href=\"functions.php?subject=schema&amp;{$misc->href}&amp;schema=", urlencode($rs->fields['schemaname']), "\">", $misc->printVal($rs->fields['schemaname']), "</a>.";							echo "<a href=\"functions.php?action=properties&amp;{$misc->href}&amp;schema=", urlencode($rs->fields['schemaname']), "&amp;function=", 								urlencode($rs->fields['name']), "&amp;function_oid=", urlencode($rs->fields['oid']), "\">", 								_highlight($misc->printVal($rs->fields['name']), $_REQUEST['term']), "</a></li>\n";							break;						case 'TYPE':							echo "<li>";							echo "<a href=\"types.php?subject=schema&amp;{$misc->href}&amp;schema=", urlencode($rs->fields['schemaname']), "\">", $misc->printVal($rs->fields['schemaname']), "</a>.";							echo "<a href=\"types.php?action=properties&amp;{$misc->href}&amp;schema=", urlencode($rs->fields['schemaname']), "&amp;type=", 								urlencode($rs->fields['name']), "\">", _highlight($misc->printVal($rs->fields['name']), $_REQUEST['term']), "</a></li>\n";							break;						case 'DOMAIN':							echo "<li>";							echo "<a href=\"domains.php?subject=schema&amp;{$misc->href}&amp;schema=", urlencode($rs->fields['schemaname']), "\">", $misc->printVal($rs->fields['schemaname']), "</a>.";							echo "<a href=\"domains.php?action=properties&amp;{$misc->href}&amp;schema=", urlencode($rs->fields['schemaname']), "&amp;domain=", 								urlencode($rs->fields['name']), "\">", _highlight($misc->printVal($rs->fields['name']), $_REQUEST['term']), "</a></li>\n";							break;						case 'OPERATOR':							echo "<li>";							echo "<a href=\"operators.php?subject=schema&amp;{$misc->href}&amp;schema=", urlencode($rs->fields['schemaname']), "\">", $misc->printVal($rs->fields['schemaname']), "</a>.";							echo "<a href=\"operators.php?action=properties&amp;{$misc->href}&amp;schema=", urlencode($rs->fields['schemaname']), "&amp;operator=", 								urlencode($rs->fields['name']), "&amp;operator_oid=", urlencode($rs->fields['oid']) ,"\">", _highlight($misc->printVal($rs->fields['name']), $_REQUEST['term']), "</a></li>\n";							break;						case 'CONVERSION':							echo "<li>";							echo "<a href=\"conversions.php?subject=schema&amp;{$misc->href}&amp;schema=", urlencode($rs->fields['schemaname']), "\">", $misc->printVal($rs->fields['schemaname']), "</a>.";							echo "<a href=\"conversions.php?{$misc->href}&amp;schema=", urlencode($rs->fields['schemaname']), 								"\">", _highlight($misc->printVal($rs->fields['name']), $_REQUEST['term']), "</a></li>\n";							break;						case 'LANGUAGE':							echo "<li><a href=\"languages.php?{$misc->href}\">", _highlight($misc->printVal($rs->fields['name']), $_REQUEST['term']), "</a></li>\n";							break;						case 'AGGREGATE':							echo "<li>";							echo "<a href=\"aggregates.php?subject=schema&amp;{$misc->href}&amp;schema=", urlencode($rs->fields['schemaname']), "\">", $misc->printVal($rs->fields['schemaname']), "</a>.";							echo "<a href=\"aggregates.php?{$misc->href}&amp;schema=", urlencode($rs->fields['schemaname']), "\">",								_highlight($misc->printVal($rs->fields['name']), $_REQUEST['term']), "</a></li>\n";							break;						case 'OPCLASS':							echo "<li>";							echo "<a href=\"redirect.php?subject=schema&amp;{$misc->href}&amp;schema=", urlencode($rs->fields['schemaname']), "\">", $misc->printVal($rs->fields['schemaname']), "</a>.";							echo "<a href=\"opclasses.php?{$misc->href}&amp;schema=", urlencode($rs->fields['schemaname']), "\">",								_highlight($misc->printVal($rs->fields['name']), $_REQUEST['term']), "</a></li>\n";							break;					}					$rs->moveNext();					}							echo "</ul>\n";								echo "<p>", $rs->recordCount(), " ", $lang['strobjects'], "</p>\n";			}			else echo "<p>{$lang['strnoobjects']}</p>\n";		}			}	/**	 * Displays options for database download	 */	function doExport($msg = '') {		global $data, $misc;		global $lang;		$misc->printTrail('database');		$misc->printTabs('database','export');		$misc->printMsg($msg);		echo "<form action=\"dbexport.php\" method=\"post\">\n";		echo "<table>\n";		echo "<tr><th class=\"data\">{$lang['strformat']}</th><th class=\"data\" colspan=\"2\">{$lang['stroptions']}</th></tr>\n";		// Data only		echo "<tr><th class=\"data left\" rowspan=\"2\">";		echo "<input type=\"radio\" id=\"what1\" name=\"what\" value=\"dataonly\" checked=\"checked\" /><label for=\"what1\">{$lang['strdataonly']}</label></th>\n";		echo "<td>{$lang['strformat']}</td>\n";		echo "<td><select name=\"d_format\">\n";		echo "<option value=\"copy\">COPY</option>\n";		echo "<option value=\"sql\">SQL</option>\n";		echo "</select>\n</td>\n</tr>\n";		echo "<tr><td><label for=\"d_oids\">{$lang['stroids']}</label></td><td><input type=\"checkbox\" id=\"d_oids\" name=\"d_oids\" /></td>\n</tr>\n";		// Structure only		echo "<tr><th class=\"data left\"><input type=\"radio\" id=\"what2\" name=\"what\" value=\"structureonly\" /><label for=\"what2\">{$lang['strstructureonly']}</label></th>\n";		echo "<td><label for=\"s_clean\">{$lang['strdrop']}</label></td><td><input type=\"checkbox\" id=\"s_clean\" name=\"s_clean\" /></td>\n</tr>\n";		// Structure and data		echo "<tr><th class=\"data left\" rowspan=\"3\">";		echo "<input type=\"radio\" id=\"what3\" name=\"what\" value=\"structureanddata\" /><label for=\"what3\">{$lang['strstructureanddata']}</label></th>\n";		echo "<td>{$lang['strformat']}</td>\n";		echo "<td><select name=\"sd_format\">\n";		echo "<option value=\"copy\">COPY</option>\n";		echo "<option value=\"sql\">SQL</option>\n";		echo "</select>\n</td>\n</tr>\n";		echo "<tr><td><label for=\"sd_clean\">{$lang['strdrop']}</label></td><td><input type=\"checkbox\" id=\"sd_clean\" name=\"sd_clean\" /></td>\n</tr>\n";		echo "<tr><td><label for=\"sd_oids\">{$lang['stroids']}</label></td><td><input type=\"checkbox\" id=\"sd_oids\" name=\"sd_oids\" /></td>\n</tr>\n";		echo "</table>\n";				echo "<h3>{$lang['stroptions']}</h3>\n";		echo "<p><input type=\"radio\" id=\"output1\" name=\"output\" value=\"show\" checked=\"checked\" /><label for=\"output1\">{$lang['strshow']}</label>\n";		echo "<br/><input type=\"radio\" id=\"output2\" name=\"output\" value=\"download\" /><label for=\"output2\">{$lang['strdownload']}</label>\n";		// MSIE cannot download gzip in SSL mode - it's just broken		if (!(strstr($_SERVER['HTTP_USER_AGENT'], 'MSIE') && isset($_SERVER['HTTPS']))) {			echo "<br /><input type=\"radio\" id=\"output3\" name=\"output\" value=\"gzipped\" /><label for=\"output3\">{$lang['strdownloadgzipped']}</label>\n";		}		echo "</p>\n";		echo "<p><input type=\"hidden\" name=\"action\" value=\"export\" />\n";		echo "<input type=\"hidden\" name=\"subject\" value=\"database\" />\n";		echo $misc->form;		echo "<input type=\"submit\" value=\"{$lang['strexport']}\" /></p>\n";		echo "</form>\n";	}		/**	 * Show the current status of all database variables	 */	function doVariables() {		global $data, $misc;		global $lang;		// Fetch the variables from the database		$variables = $data->getVariables();			$misc->printTrail('database');		$misc->printTabs('database','variables');		$columns = array(			'variable' => array(				'title' => $lang['strname'],				'field' => field('name'),			),			'value' => array(				'title' => $lang['strsetting'],				'field' => field('setting'),			),		);				$actions = array();				$misc->printTable($variables, $columns, $actions, $lang['strnodata']);	}	/**	 * Show all current database connections and any queries they	 * are running.	 */	function doProcesses($msg = '') {		global $data, $misc;		global $lang;		$misc->printTrail('database');		$misc->printTabs('database','processes');		$misc->printMsg($msg);		if (strlen($msg) === 0) {			echo "<br /><a id=\"control\" href=\"\"><img src=\"".$misc->icon('Refresh')."\" alt=\"{$lang['strrefresh']}\" title=\"{$lang['strrefresh']}\"/>&nbsp;{$lang['strrefresh']}</a>";		}		echo "<div id=\"data_block\">";		currentProcesses();		echo "</div>";	}		function currentProcesses($isAjax = false) {		global $data, $misc, $lang;				// Display prepared transactions		if($data->hasPreparedXacts()) {			echo "<h3>{$lang['strpreparedxacts']}</h3>\n";			$prep_xacts = $data->getPreparedXacts($_REQUEST['database']);					$columns = array(				'transaction' => array(					'title' => $lang['strxactid'],					'field' => field('transaction'),				),				'gid' => array(					'title' => $lang['strgid'],					'field' => field('gid'),				),				'prepared' => array(					'title' => $lang['strstarttime'],					'field' => field('prepared'),				),				'owner' => array(					'title' => $lang['strowner'],					'field' => field('owner'),				),			);			$actions = array();			$misc->printTable($prep_xacts, $columns, $actions, $lang['strnodata']);		}		// Fetch the processes from the database		echo "<h3>{$lang['strprocesses']}</h3>\n";		$processes = $data->getProcesses($_REQUEST['database']);						$columns = array(			'user' => array(				'title' => $lang['strusername'],				'field' => field('usename'),			),			'process' => array(				'title' => $lang['strprocess'],				'field' => field('procpid'),			),			'query' => array(				'title' => $lang['strsql'],				'field' => field('current_query'),			),			'start_time' => array(				'title' => $lang['strstarttime'],				'field' => field('query_start'),			),		);		// Build possible actions for our process list		$columns['actions'] = array('title' => $lang['stractions']);					$actions = array(			'cancel' => array(				'title' => $lang['strcancel'],				'url'   => "database.php?action=signal&amp;signal=CANCEL&amp;{$misc->href}&amp;",				'vars'  => array('procpid' => 'procpid')			),			'kill' => array(				'title' => $lang['strkill'],				'url'   => "database.php?action=signal&amp;signal=KILL&amp;{$misc->href}&amp;",				'vars'  => array('procpid' => 'procpid')			)		);			// Remove actions where not supported		if (!$data->hasQueryKill()) unset($actions['kill']);		if (!$data->hasQueryCancel()) unset($actions['cancel']);		if (count($actions) == 0) unset($columns['actions']);			// Remove query start time for <7.4		if (!isset($processes->fields['query_start'])) unset($columns['start_time']);		$misc->printTable($processes, $columns, $actions, $lang['strnodata']);				if ($isAjax) exit;	}	function currentLocks($isAjax = false) {		global $data, $misc, $lang;		// Get the info from the pg_locks view		$variables = $data->getLocks();		$columns = array(			'namespace' => array(				'title' => $lang['strschema'],				'field' => field('nspname'),			),			'tablename' => array(				'title' => $lang['strtablename'],				'field' => field('tablename'),			),			'vxid' => array(				'title' => $lang['strvirtualtransaction'],				'field' => field('virtualtransaction'),			),			'transactionid' => array(				'title' => $lang['strtransaction'],				'field' => field('transaction'),			),			'processid' => array(				'title' => $lang['strprocessid'],				'field' => field('pid'),			),			'mode' => array(				'title' => $lang['strmode'],				'field' => field('mode'),			),			'granted' => array(				'title' => $lang['strislockheld'],				'field' => field('granted'),				'type'  => 'yesno',			),		);		if (!$data->hasVirtualTransactionId()) unset($columns['vxid']);		$actions = array();		$misc->printTable($variables, $columns, $actions, $lang['strnodata']);				if ($isAjax) exit;	}		/**	 * Show the existing table locks in the current database	 */	function doLocks() {		global $data, $misc;		global $lang;		$misc->printTrail('database');		$misc->printTabs('database','locks');		echo "<br /><a id=\"control\" href=\"\"><img src=\"".$misc->icon('Refresh')."\" alt=\"{$lang['strrefresh']}\" title=\"{$lang['strrefresh']}\"/>&nbsp;{$lang['strrefresh']}</a>";		echo "<div id=\"data_block\">";		currentLocks();		echo "</div>";	}	/**	 * Allow execution of arbitrary SQL statements on a database	 */	function doSQL() {		global $data, $misc;		global $lang;		if ((!isset($_SESSION['sqlquery'])) || isset($_REQUEST['new'])) $_SESSION['sqlquery'] = '';		$misc->printTrail('database');		$misc->printTabs('database','sql');		echo "<p>{$lang['strentersql']}</p>\n";		echo "<form action=\"sql.php\" method=\"post\" enctype=\"multipart/form-data\">\n";		echo "<p>{$lang['strsql']}<br />\n";		echo "<textarea style=\"width:100%;\" rows=\"20\" cols=\"50\" name=\"query\">",			htmlspecialchars($_SESSION['sqlquery']), "</textarea></p>\n";		// Check that file uploads are enabled		if (ini_get('file_uploads')) {			// Don't show upload option if max size of uploads is zero			$max_size = $misc->inisizeToBytes(ini_get('upload_max_filesize'));			if (is_double($max_size) && $max_size > 0) {				echo "<p><input type=\"hidden\" name=\"MAX_FILE_SIZE\" value=\"{$max_size}\" />\n";				echo "<label for=\"script\">{$lang['struploadscript']}</label> <input id=\"script\" name=\"script\" type=\"file\" /></p>\n";			}		}		echo "<p><input type=\"checkbox\" id=\"paginate\" name=\"paginate\"", (isset($_REQUEST['paginate']) ? ' checked="checked"' : ''), " /><label for=\"paginate\">{$lang['strpaginate']}</label></p>\n";		echo "<p><input type=\"submit\" value=\"{$lang['strexecute']}\" />\n";		echo $misc->form;		echo "<input type=\"reset\" value=\"{$lang['strreset']}\" /></p>\n";		echo "</form>\n";		// Default focus		$misc->setFocus('forms[0].query');	}	function doTree() {		global $misc, $data, $lang, $slony;		$reqvars = $misc->getRequestVars('database');		$tabs = $misc->getNavTabs('database');		$items = $misc->adjustTabsForTree($tabs);		$attrs = array(			'text'   => noEscape(field('title')),			'icon'   => field('icon'),			'action' => url(field('url'),							$reqvars,							field('urlvars', array())						),			'branch' => url(field('url'),							$reqvars,							field('urlvars'),							array('action' => 'tree')						),		);				$misc->printTreeXML($items, $attrs);		exit;	}	require('./admin.php');	/* shortcuts: these functions exit the script */	if ($action == 'tree') doTree();	if ($action == 'refresh_locks') currentLocks(true);	if ($action == 'refresh_processes') currentProcesses(true);	/* normal flow */	if ($action == 'locks' or $action == 'processes') {		$scripts  = "<script src=\"libraries/js/jquery.js\" type=\"text/javascript\"></script>\n";		$scripts .= "<script src=\"js/database.js\" type=\"text/javascript\"></script>";		$refreshTime = $conf['ajax_refresh'] * 1000;		$scripts .= "<script type=\"text/javascript\">\n";		$scripts .= "var Database = {\n";		$scripts .= "ajax_time_refresh: {$refreshTime},\n";		$scripts .= "str_start: {text:'{$lang['strstart']}',icon: '". $misc->icon('Execute') ."'},\n";		$scripts .= "str_stop: {text:'{$lang['strstop']}',icon: '". $misc->icon('Stop') ."'},\n";		$scripts .= "load_icon: '". $misc->icon('Loading') ."',\n";		$scripts .= "server:'{$_REQUEST['server']}',\n";		$scripts .= "dbname:'{$_REQUEST['database']}',\n";		$scripts .= "action:'refresh_{$action}',\n";		$scripts .= "errmsg: '". str_replace("'", "\'", $lang['strconnectionfail']) ."'\n";		$scripts .= "};\n";		$scripts .= "</script>\n";	}	$misc->printHeader($lang['strdatabase'], $scripts);	$misc->printBody();	switch ($action) {		case 'find':			if (isset($_REQUEST['term'])) doFind(false);			else doFind(true);			break;		case 'sql':			doSQL();			break;		case 'variables':			doVariables();			break;		case 'processes':			doProcesses();			break;		case 'locks':			doLocks();			break;		case 'export':			doExport();			break;		case 'signal':			doSignal();			break;		default:			if (adminActions($action, 'database') === false) doSQL();			break;	}	$misc->printFooter();?>
