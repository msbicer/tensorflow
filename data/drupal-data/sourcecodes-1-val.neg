<?php// $Id$/** * Implementation of hook_install(). */function dblog_install() {  // Create tables.  drupal_install_schema('dblog');}/** * Implementation of hook_uninstall(). */function dblog_uninstall() {  // Remove tables.  drupal_uninstall_schema('dblog');}/** * Implementation of hook_schema(). */function dblog_schema() {  $schema['watchdog'] = array(    'description' => 'Table that contains logs of all system events.',    'fields' => array(      'wid' => array(        'type' => 'serial',        'not null' => TRUE,        'description' => 'Primary Key: Unique watchdog event ID.',      ),      'uid' => array(        'type' => 'int',        'not null' => TRUE,        'default' => 0,        'description' => 'The {users}.uid of the user who triggered the event.',      ),      'type' => array(        'type' => 'varchar',        'length' => 16,        'not null' => TRUE,        'default' => '',        'description' => 'Type of log message, for example "user" or "page not found."',      ),      'message' => array(        'type' => 'text',        'not null' => TRUE,        'size' => 'big',        'description' => 'Text of log message to be passed into the t() function.',      ),      'variables' => array(        'type' => 'text',        'not null' => TRUE,        'size' => 'big',        'description' => 'Serialized array of variables that match the message string and that is passed into the t() function.',      ),      'severity' => array(        'type' => 'int',        'unsigned' => TRUE,        'not null' => TRUE,        'default' => 0,        'size' => 'tiny',        'description' => 'The severity level of the event; ranges from 0 (Emergency) to 7 (Debug)',      ),      'link' => array(        'type' => 'varchar',        'length' => 255,        'not null' => TRUE,        'default' => '',        'description' => 'Link to view the result of the event.',      ),      'location'  => array(        'type' => 'text',        'not null' => TRUE,        'description' => 'URL of the origin of the event.',      ),      'referer' => array(        'type' => 'text',        'not null' => FALSE,        'description' => 'URL of referring page.',      ),      'hostname' => array(        'type' => 'varchar',        'length' => 128,        'not null' => TRUE,        'default' => '',        'description' => 'Hostname of the user who triggered the event.',      ),      'timestamp' => array(        'type' => 'int',        'not null' => TRUE,        'default' => 0,        'description' => 'Unix timestamp of when event occurred.',      ),    ),    'primary key' => array('wid'),    'indexes' => array('type' => array('type')),  );  return $schema;}/** * @defgroup updates-6.x-extra Extra database logging updates for 6.x * @{ *//** * Allow longer referrers. */function dblog_update_6000() {  $ret = array();  db_change_field($ret, 'watchdog', 'referer', 'referer', array('type' => 'text', 'not null' => FALSE));  return $ret;}/** * @} End of "defgroup updates-6.x-extra" * The next series of updates should start at 7000. */
<?php// $Id$/** * Implementation of hook_install(). */function profile_install() {  // Create tables.  drupal_install_schema('profile');}/** * Implementation of hook_uninstall(). */function profile_uninstall() {  // Remove tables  drupal_uninstall_schema('profile');  variable_del('profile_block_author_fields');}/** * Implementation of hook_schema(). */function profile_schema() {  $schema['profile_fields'] = array(    'description' => 'Stores profile field information.',    'fields' => array(      'fid' => array(        'type' => 'serial',        'not null' => TRUE,        'description' => 'Primary Key: Unique profile field ID.',      ),      'title' => array(        'type' => 'varchar',        'length' => 255,        'not null' => FALSE,        'description' => 'Title of the field shown to the end user.',      ),      'name' => array(        'type' => 'varchar',        'length' => 128,        'not null' => TRUE,        'default' => '',        'description' => 'Internal name of the field used in the form HTML and URLs.',      ),      'explanation' => array(        'type' => 'text',        'not null' => FALSE,        'description' => 'Explanation of the field to end users.',      ),      'category' => array(        'type' => 'varchar',        'length' => 255,        'not null' => FALSE,        'description' => 'Profile category that the field will be grouped under.',      ),      'page' => array(        'type' => 'varchar',        'length' => 255,        'not null' => FALSE,        'description' => "Title of page used for browsing by the field's value",      ),      'type' => array(        'type' => 'varchar',        'length' => 128,        'not null' => FALSE,        'description' => 'Type of form field.',      ),      'weight' => array(        'type' => 'int',        'not null' => TRUE,        'default' => 0,        'size' => 'tiny',        'description' => 'Weight of field in relation to other profile fields.',      ),      'required' => array(        'type' => 'int',        'not null' => TRUE,        'default' => 0,        'size' => 'tiny',        'description' => 'Whether the user is required to enter a value. (0 = no, 1 = yes)',      ),      'register' => array(        'type' => 'int',        'not null' => TRUE,        'default' => 0,        'size' => 'tiny',        'description' => 'Whether the field is visible in the user registration form. (1 = yes, 0 = no)',      ),      'visibility' => array(        'type' => 'int',        'not null' => TRUE,        'default' => 0,        'size' => 'tiny',        'description' => 'The level of visibility for the field. (0 = hidden, 1 = private, 2 = public on profile but not member list pages, 3 = public on profile and list pages)',      ),      'autocomplete' => array(        'type' => 'int',        'not null' => TRUE,        'default' => 0,        'size' => 'tiny',        'description' => 'Whether form auto-completion is enabled. (0 = disabled, 1 = enabled)',      ),      'options' => array(        'type' => 'text',        'not null' => FALSE,        'description' => 'List of options to be used in a list selection field.',      ),    ),    'indexes' => array('category' => array('category')),    'unique keys' => array('name' => array('name')),    'primary key' => array('fid'),  );  $schema['profile_values'] = array(    'description' => 'Stores values for profile fields.',    'fields' => array(      'fid' => array(        'type' => 'int',        'unsigned' => TRUE,        'not null' => TRUE,        'default' => 0,        'description' => 'The {profile_fields}.fid of the field.',      ),      'uid' => array(        'type' => 'int',        'unsigned' => TRUE,        'not null' => TRUE,        'default' => 0,        'description' => 'The {users}.uid of the profile user.',      ),      'value' => array(        'type' => 'text',        'not null' => FALSE,        'description' => 'The value for the field.',      ),    ),    'primary key' => array('uid', 'fid'),    'indexes' => array(      'fid' => array('fid'),    ),  );  return $schema;}
<?php// $Id$/** * @file aggregator-summary-items.tpl.php * Default theme implementation to present feeds as list items. * * Each iteration generates a single feed source or category. * * Available variables: * - $title: Title of the feed or category. * - $summary_list: Unordered list of linked feed items generated through *   theme_item_list(). * - $source_url: URL to the local source or category. * * @see template_preprocess() * @see template_preprocess_aggregator_summary-items() */?><h2><?php print $title; ?></h2><?php print $summary_list; ?><div class="links">  <a href="<?php print $source_url; ?>"><?php print t('More'); ?></a></div>
<?php// $Id$/** * @file * User page callbacks for the comment module. *//** * Form builder; generate a comment editing form. * * @param $cid *   ID of the comment to be edited. * @ingroup forms */function comment_edit($cid) {  global $user;  $comment = db_fetch_object(db_query('SELECT c.*, u.uid, u.name AS registered_name, u.data FROM {comments} c INNER JOIN {users} u ON c.uid = u.uid WHERE c.cid = %d', $cid));  $comment = drupal_unpack($comment);  $comment->name = $comment->uid ? $comment->registered_name : $comment->name;  if (comment_access('edit', $comment)) {    return comment_form_box((array)$comment);  }  else {    drupal_access_denied();  }}/** * This function is responsible for generating a comment reply form. * There are several cases that have to be handled, including: *   - replies to comments *   - replies to nodes *   - attempts to reply to nodes that can no longer accept comments *   - respecting access permissions ('access comments', 'post comments', etc.) * * The node or comment that is being replied to must appear above the comment * form to provide the user context while authoring the comment. * * @param $node *   Every comment belongs to a node. This is that node. * * @param $pid *   Some comments are replies to other comments. In those cases, $pid is the parent *   comment's cid. * * @return *   The rendered parent node or comment plus the new comment form. */function comment_reply($node, $pid = NULL) {  // Set the breadcrumb trail.  drupal_set_breadcrumb(array(l(t('Home'), NULL), l($node->title, 'node/'. $node->nid)));  $op = isset($_POST['op']) ? $_POST['op'] : '';  $output = '';  if (user_access('access comments')) {    // The user is previewing a comment prior to submitting it.    if ($op == t('Preview')) {      if (user_access('post comments')) {        $output .= comment_form_box(array('pid' => $pid, 'nid' => $node->nid), NULL);      }      else {        drupal_set_message(t('You are not authorized to post comments.'), 'error');        drupal_goto("node/$node->nid");      }    }    else {      // $pid indicates that this is a reply to a comment.      if ($pid) {        // load the comment whose cid = $pid        if ($comment = db_fetch_object(db_query('SELECT c.*, u.uid, u.name AS registered_name, u.signature, u.signature_format, u.picture, u.data FROM {comments} c INNER JOIN {users} u ON c.uid = u.uid WHERE c.cid = %d AND c.status = %d', $pid, COMMENT_PUBLISHED))) {          // If that comment exists, make sure that the current comment and the parent comment both          // belong to the same parent node.          if ($comment->nid != $node->nid) {            // Attempting to reply to a comment not belonging to the current nid.            drupal_set_message(t('The comment you are replying to does not exist.'), 'error');            drupal_goto("node/$node->nid");          }          // Display the parent comment          $comment = drupal_unpack($comment);          $comment->name = $comment->uid ? $comment->registered_name : $comment->name;          $output .= theme('comment_view', $comment, $node);        }        else {          drupal_set_message(t('The comment you are replying to does not exist.'), 'error');          drupal_goto("node/$node->nid");        }      }      // This is the case where the comment is in response to a node. Display the node.      else if (user_access('access content')) {        $output .= node_view($node);      }      // Should we show the reply box?      if (node_comment_mode($node->nid) != COMMENT_NODE_READ_WRITE) {        drupal_set_message(t("This discussion is closed: you can't post new comments."), 'error');        drupal_goto("node/$node->nid");      }      else if (user_access('post comments')) {        $output .= comment_form_box(array('pid' => $pid, 'nid' => $node->nid), t('Reply'));      }      else {        drupal_set_message(t('You are not authorized to post comments.'), 'error');        drupal_goto("node/$node->nid");      }    }  }  else {    drupal_set_message(t('You are not authorized to view comments.'), 'error');    drupal_goto("node/$node->nid");  }  return $output;}
<?php// $Id$/** * @file * User page callback file for the user module. *//** * Menu callback; Retrieve a JSON object containing autocomplete suggestions for existing users. */function user_autocomplete($string = '') {  $matches = array();  if ($string) {    $result = db_query_range("SELECT name FROM {users} WHERE LOWER(name) LIKE LOWER('%s%%')", $string, 0, 10);    while ($user = db_fetch_object($result)) {      $matches[$user->name] = check_plain($user->name);    }  }  drupal_json($matches);}/** * Form builder; Request a password reset. * * @ingroup forms * @see user_pass_validate() * @see user_pass_submit() */function user_pass() {  $form['name'] = array(    '#type' => 'textfield',    '#title' => t('Username or e-mail address'),    '#size' => 60,    '#maxlength' => max(USERNAME_MAX_LENGTH, EMAIL_MAX_LENGTH),    '#required' => TRUE,  );  $form['submit'] = array('#type' => 'submit', '#value' => t('E-mail new password'));  return $form;}function user_pass_validate($form, &$form_state) {  $name = trim($form_state['values']['name']);    // Blocked accounts cannot request a new password,  // check provided username and email against access rules.  if (drupal_is_denied('user', $name) || drupal_is_denied('mail', $name)) {    form_set_error('name', t('%name is not allowed to request a new password.', array('%name' => $name)));  }  // Try to load by email.  $account = user_load(array('mail' => $name, 'status' => 1));  if (!$account) {    // No success, try to load by name.    $account = user_load(array('name' => $name, 'status' => 1));  }  if (isset($account->uid)) {    form_set_value(array('#parents' => array('account')), $account, $form_state);  }  else {    form_set_error('name', t('Sorry, %name is not recognized as a user name or an e-mail address.', array('%name' => $name)));  }}function user_pass_submit($form, &$form_state) {  global $language;  $account = $form_state['values']['account'];  // Mail one time login URL and instructions using current language.  _user_mail_notify('password_reset', $account, $language);  watchdog('user', 'Password reset instructions mailed to %name at %email.', array('%name' => $account->name, '%email' => $account->mail));  drupal_set_message(t('Further instructions have been sent to your e-mail address.'));  $form_state['redirect'] = 'user';  return;}/** * Menu callback; process one time login link and redirects to the user page on success. */function user_pass_reset(&$form_state, $uid, $timestamp, $hashed_pass, $action = NULL) {  global $user;  // Check if the user is already logged in. The back button is often the culprit here.  if ($user->uid) {    drupal_set_message(t('You have already used this one-time login link. It is not necessary to use this link to login anymore. You are already logged in.'));    drupal_goto();  }  else {    // Time out, in seconds, until login URL expires. 24 hours = 86400 seconds.    $timeout = 86400;    $current = time();    // Some redundant checks for extra security ?    if ($timestamp < $current && $account = user_load(array('uid' => $uid, 'status' => 1)) ) {      // Deny one-time login to blocked accounts.      if (drupal_is_denied('user', $account->name) || drupal_is_denied('mail', $account->mail)) {        drupal_set_message(t('You have tried to use a one-time login for an account which has been blocked.'), 'error');        drupal_goto();      }      // No time out for first time login.      if ($account->login && $current - $timestamp > $timeout) {        drupal_set_message(t('You have tried to use a one-time login link that has expired. Please request a new one using the form below.'));        drupal_goto('user/password');      }      else if ($account->uid && $timestamp > $account->login && $timestamp < $current && $hashed_pass == user_pass_rehash($account->pass, $timestamp, $account->login)) {        // First stage is a confirmation form, then login        if ($action == 'login') {          watchdog('user', 'User %name used one-time login link at time %timestamp.', array('%name' => $account->name, '%timestamp' => $timestamp));          // Set the new user.          $user = $account;          // user_authenticate_finalize() also updates the login timestamp of the          // user, which invalidates further use of the one-time login link.          user_authenticate_finalize($form_state['values']);          drupal_set_message(t('You have just used your one-time login link. It is no longer necessary to use this link to login. Please change your password.'));          drupal_goto('user/'. $user->uid .'/edit');        }        else {          $form['message'] = array('#value' => t('<p>This is a one-time login for %user_name and will expire on %expiration_date.</p><p>Click on this button to login to the site and change your password.</p>', array('%user_name' => $account->name, '%expiration_date' => format_date($timestamp + $timeout))));          $form['help'] = array('#value' => '<p>'. t('This login can be used only once.') .'</p>');          $form['submit'] = array('#type' => 'submit', '#value' => t('Log in'));          $form['#action'] = url("user/reset/$uid/$timestamp/$hashed_pass/login");          return $form;        }      }      else {        drupal_set_message(t('You have tried to use a one-time login link which has either been used or is no longer valid. Please request a new one using the form below.'));        drupal_goto('user/password');      }    }    else {      // Deny access, no more clues.      // Everything will be in the watchdog's URL for the administrator to check.      drupal_access_denied();    }  }}/** * Menu callback; logs the current user out, and redirects to the home page. */function user_logout() {  global $user;  watchdog('user', 'Session closed for %name.', array('%name' => $user->name));  // Destroy the current session:  session_destroy();  // Only variables can be passed by reference workaround.  $null = NULL;  user_module_invoke('logout', $null, $user);  // Load the anonymous user  $user = drupal_anonymous_user();  drupal_goto();}/** * Menu callback; Displays a user or user profile page. */function user_view($account) {  drupal_set_title(check_plain($account->name));  // Retrieve all profile fields and attach to $account->content.  user_build_content($account);  // To theme user profiles, copy modules/user/user_profile.tpl.php  // to your theme directory, and edit it as instructed in that file's comments.  return theme('user_profile', $account);}/** * Process variables for user-profile.tpl.php. * * The $variables array contains the following arguments: * - $account * * @see user-picture.tpl.php */function template_preprocess_user_profile(&$variables) {  $variables['profile'] = array();  // Sort sections by weight  uasort($variables['account']->content, 'element_sort');  // Provide keyed variables so themers can print each section independantly.  foreach (element_children($variables['account']->content) as $key) {    $variables['profile'][$key] = drupal_render($variables['account']->content[$key]);  }  // Collect all profiles to make it easier to print all items at once.  $variables['user_profile'] = implode($variables['profile']);}/** * Process variables for user-profile-item.tpl.php. * * The $variables array contains the following arguments: * - $element * * @see user-profile-item.tpl.php */function template_preprocess_user_profile_item(&$variables) {  $variables['title'] = $variables['element']['#title'];  $variables['value'] = $variables['element']['#value'];  $variables['attributes'] = '';  if (isset($variables['element']['#attributes'])) {    $variables['attributes'] = drupal_attributes($variables['element']['#attributes']);  }}/** * Process variables for user-profile-category.tpl.php. * * The $variables array contains the following arguments: * - $element * * @see user-profile-category.tpl.php */function template_preprocess_user_profile_category(&$variables) {  $variables['title'] = check_plain($variables['element']['#title']);  $variables['profile_items'] = $variables['element']['#children'];  $variables['attributes'] = '';  if (isset($variables['element']['#attributes'])) {    $variables['attributes'] = drupal_attributes($variables['element']['#attributes']);  }}/** * Form builder; Present the form to edit a given user or profile category. * * @ingroup forms * @see user_edit_validate() * @see user_edit_submit() */function user_edit($account, $category = 'account') {  drupal_set_title(check_plain($account->name));  return drupal_get_form('user_profile_form', $account, $category);}/** * Form builder; edit a user account or one of their profile categories. * * @ingroup forms * @see user_profile_form_validate() * @see user_profile_form_submit() * @see user_edit_delete_submit() */function user_profile_form($form_state, $account, $category = 'account') {  $edit = (empty($form_state['values'])) ? (array)$account : $form_state['values'];  $form = _user_forms($edit, $account, $category);  $form['_category'] = array('#type' => 'value', '#value' => $category);  $form['_account'] = array('#type' => 'value', '#value' => $account);  $form['submit'] = array('#type' => 'submit', '#value' => t('Save'), '#weight' => 30);  if (user_access('administer users')) {    $form['delete'] = array(      '#type' => 'submit',      '#value' => t('Delete'),      '#weight' => 31,      '#submit' => array('user_edit_delete_submit'),    );  }  $form['#attributes']['enctype'] = 'multipart/form-data';  return $form;}/** * Validation function for the user account and profile editing form. */function user_profile_form_validate($form, &$form_state) {  user_module_invoke('validate', $form_state['values'], $form_state['values']['_account'], $form_state['values']['_category']);  // Validate input to ensure that non-privileged users can't alter protected data.  if ((!user_access('administer users') && array_intersect(array_keys($form_state['values']), array('uid', 'init', 'session'))) || (!user_access('administer permissions') && isset($form_state['values']['roles']))) {    watchdog('security', 'Detected malicious attempt to alter protected user fields.', array(), WATCHDOG_WARNING);    // set this to a value type field    form_set_error('category', t('Detected malicious attempt to alter protected user fields.'));  }}/** * Submit function for the user account and profile editing form. */function user_profile_form_submit($form, &$form_state) {  $account = $form_state['values']['_account'];  $category = $form_state['values']['_category'];  unset($form_state['values']['_account'], $form_state['values']['op'], $form_state['values']['submit'], $form_state['values']['delete'], $form_state['values']['form_token'], $form_state['values']['form_id'], $form_state['values']['_category']);  user_module_invoke('submit', $form_state['values'], $account, $category);  user_save($account, $form_state['values'], $category);  // Clear the page cache because pages can contain usernames and/or profile information:  cache_clear_all();  drupal_set_message(t('The changes have been saved.'));  return;}/** * Submit function for the 'Delete' button on the user edit form. */function user_edit_delete_submit($form, &$form_state) {  $destination = '';  if (isset($_REQUEST['destination'])) {    $destination = drupal_get_destination();    unset($_REQUEST['destination']);  }  // Note: We redirect from user/uid/edit to user/uid/delete to make the tabs disappear.  $form_state['redirect'] = array("user/". $form_state['values']['_account']->uid ."/delete", $destination);}/** * Form builder; confirm form for user deletion. * * @ingroup forms * @see user_confirm_delete_submit() */function user_confirm_delete(&$form_state, $account) {  $form['_account'] = array('#type' => 'value', '#value' => $account);  return confirm_form($form,    t('Are you sure you want to delete the account %name?', array('%name' => $account->name)),    'user/'. $account->uid,    t('All submissions made by this user will be attributed to the anonymous account. This action cannot be undone.'),    t('Delete'), t('Cancel'));}/** * Submit function for the confirm form for user deletion. */function user_confirm_delete_submit($form, &$form_state) {  user_delete($form_state['values'], $form_state['values']['_account']->uid);  drupal_set_message(t('%name has been deleted.', array('%name' => $form_state['values']['_account']->name)));  if (!isset($_REQUEST['destination'])) {    $form_state['redirect'] = 'admin/user/user';  }}function user_edit_validate($form, &$form_state) {  user_module_invoke('validate', $form_state['values'], $form_state['values']['_account'], $form_state['values']['_category']);  // Validate input to ensure that non-privileged users can't alter protected data.  if ((!user_access('administer users') && array_intersect(array_keys($form_state['values']), array('uid', 'init', 'session'))) || (!user_access('administer permissions') && isset($form_state['values']['roles']))) {    watchdog('security', 'Detected malicious attempt to alter protected user fields.', array(), WATCHDOG_WARNING);    // set this to a value type field    form_set_error('category', t('Detected malicious attempt to alter protected user fields.'));  }}function user_edit_submit($form, &$form_state) {  $account = $form_state['values']['_account'];  $category = $form_state['values']['_category'];  unset($form_state['values']['_account'], $form_state['values']['op'], $form_state['values']['submit'], $form_state['values']['delete'], $form_state['values']['form_token'], $form_state['values']['form_id'], $form_state['values']['_category']);  user_module_invoke('submit', $form_state['values'], $account, $category);  user_save($account, $form_state['values'], $category);  // Clear the page cache because pages can contain usernames and/or profile information:  cache_clear_all();  drupal_set_message(t('The changes have been saved.'));  return;}/** * Access callback for path /user. * * Displays user profile if user is logged in, or login form for anonymous * users. */function user_page() {  global $user;  if ($user->uid) {    menu_set_active_item('user/'. $user->uid);    return menu_execute_active_handler();  }  else {    return drupal_get_form('user_login');  }}
<?php// $Id$/** * @file * Admin page callbacks for the statistics module. *//** * Menu callback; presents the "recent hits" page. */function statistics_recent_hits() {  $header = array(    array('data' => t('Timestamp'), 'field' => 'a.timestamp', 'sort' => 'desc'),    array('data' => t('Page'), 'field' => 'a.path'),    array('data' => t('User'), 'field' => 'u.name'),    array('data' => t('Operations'))  );  $sql = 'SELECT a.aid, a.path, a.title, a.uid, u.name, a.timestamp FROM {accesslog} a LEFT JOIN {users} u ON u.uid = a.uid'. tablesort_sql($header);  $result = pager_query($sql, 30);  $rows = array();  while ($log = db_fetch_object($result)) {    $rows[] = array(      array('data' => format_date($log->timestamp, 'small'), 'class' => 'nowrap'),      _statistics_format_item($log->title, $log->path),      theme('username', $log),      l(t('details'), "admin/reports/access/$log->aid"));  }  if (empty($rows)) {    $rows[] = array(array('data' => t('No statistics available.'), 'colspan' => 4));  }  $output = theme('table', $header, $rows);  $output .= theme('pager', NULL, 30, 0);  return $output;}/** * Menu callback; presents the "top pages" page. */function statistics_top_pages() {  // MAX(title) avoids having empty node titles which otherwise causes duplicates in the top pages list  $sql = "SELECT COUNT(path) AS hits, path, MAX(title) AS title, AVG(timer) AS average_time, SUM(timer) AS total_time FROM {accesslog} GROUP BY path";  $sql_cnt = "SELECT COUNT(DISTINCT(path)) FROM {accesslog}";  $header = array(    array('data' => t('Hits'), 'field' => 'hits', 'sort' => 'desc'),    array('data' => t('Page'), 'field' => 'path'),    array('data' => t('Average page generation time'), 'field' => 'average_time'),    array('data' => t('Total page generation time'), 'field' => 'total_time')  );  $sql .= tablesort_sql($header);  $result = pager_query($sql, 30, 0, $sql_cnt);  $rows = array();  while ($page = db_fetch_object($result)) {    $rows[] = array($page->hits, _statistics_format_item($page->title, $page->path), t('%time ms', array('%time' => round($page->average_time))), format_interval(round($page->total_time / 1000)));  }  if (empty($rows)) {    $rows[] = array(array('data' => t('No statistics available.'), 'colspan' => 4));  }  drupal_set_title(t('Top pages in the past %interval', array('%interval' => format_interval(variable_get('statistics_flush_accesslog_timer', 259200)))));  $output = theme('table', $header, $rows);  $output .= theme('pager', NULL, 30, 0);  return $output;}/** * Menu callback; presents the "top visitors" page. */function statistics_top_visitors() {  $header = array(    array('data' => t('Hits'), 'field' => 'hits', 'sort' => 'desc'),    array('data' => t('Visitor'), 'field' => 'u.name'),    array('data' => t('Total page generation time'), 'field' => 'total'),    array('data' => t('Operations'))  );  $sql = "SELECT COUNT(a.uid) AS hits, a.uid, u.name, a.hostname, SUM(a.timer) AS total, ac.aid FROM {accesslog} a LEFT JOIN {access} ac ON ac.type = 'host' AND LOWER(a.hostname) LIKE (ac.mask) LEFT JOIN {users} u ON a.uid = u.uid GROUP BY a.hostname, a.uid, u.name, ac.aid". tablesort_sql($header);  $sql_cnt = "SELECT COUNT(DISTINCT(CONCAT(uid, hostname))) FROM {accesslog}";  $result = pager_query($sql, 30, 0, $sql_cnt);  $rows = array();  while ($account = db_fetch_object($result)) {    $qs = drupal_get_destination();    $ban_link = $account->aid ? l(t('unban'), "admin/user/rules/delete/$account->aid", array('query' => $qs)) : l(t('ban'), "admin/user/rules/add/$account->hostname/host", array('query' => $qs));    $rows[] = array($account->hits, ($account->uid ? theme('username', $account) : $account->hostname), format_interval(round($account->total / 1000)), $ban_link);  }  if (empty($rows)) {    $rows[] = array(array('data' => t('No statistics available.'), 'colspan' => 4));  }  drupal_set_title(t('Top visitors in the past %interval', array('%interval' => format_interval(variable_get('statistics_flush_accesslog_timer', 259200)))));  $output = theme('table', $header, $rows);  $output .= theme('pager', NULL, 30, 0);  return $output;}/** * Menu callback; presents the "referrer" page. */function statistics_top_referrers() {  $query = "SELECT url, COUNT(url) AS hits, MAX(timestamp) AS last FROM {accesslog} WHERE url NOT LIKE '%%%s%%' AND url <> '' GROUP BY url";  $query_cnt = "SELECT COUNT(DISTINCT(url)) FROM {accesslog} WHERE url <> '' AND url NOT LIKE '%%%s%%'";  drupal_set_title(t('Top referrers in the past %interval', array('%interval' => format_interval(variable_get('statistics_flush_accesslog_timer', 259200)))));  $header = array(    array('data' => t('Hits'), 'field' => 'hits', 'sort' => 'desc'),    array('data' => t('Url'), 'field' => 'url'),    array('data' => t('Last visit'), 'field' => 'last'),  );  $query .= tablesort_sql($header);  $result = pager_query($query, 30, 0, $query_cnt, $_SERVER['HTTP_HOST']);  $rows = array();  while ($referrer = db_fetch_object($result)) {    $rows[] = array($referrer->hits, _statistics_link($referrer->url), t('@time ago', array('@time' => format_interval(time() - $referrer->last))));  }  if (empty($rows)) {    $rows[] = array(array('data' => t('No statistics available.'), 'colspan' => 3));  }  $output = theme('table', $header, $rows);  $output .= theme('pager', NULL, 30, 0);  return $output;}/** * Menu callback; Displays recent page accesses. */function statistics_access_log($aid) {  $result = db_query('SELECT a.*, u.name FROM {accesslog} a LEFT JOIN {users} u ON a.uid = u.uid WHERE aid = %d', $aid);  if ($access = db_fetch_object($result)) {    $rows[] = array(      array('data' => t('URL'), 'header' => TRUE),      l(url($access->path, array('absolute' => TRUE)), $access->path)    );    // It is safe to avoid filtering $access->title through check_plain because    // it comes from drupal_get_title().    $rows[] = array(      array('data' => t('Title'), 'header' => TRUE),      $access->title    );    $rows[] = array(      array('data' => t('Referrer'), 'header' => TRUE),      ($access->url ? l($access->url, $access->url) : '')    );    $rows[] = array(      array('data' => t('Date'), 'header' => TRUE),      format_date($access->timestamp, 'large')    );    $rows[] = array(      array('data' => t('User'), 'header' => TRUE),      theme('username', $access)    );    $rows[] = array(      array('data' => t('Hostname'), 'header' => TRUE),      check_plain($access->hostname)    );    return theme('table', array(), $rows);  }  else {    drupal_not_found();  }}/** * Form builder; Configure access logging. * * @ingroup forms * @see system_settings_form() */function statistics_access_logging_settings() {  // Access log settings:  $options = array('1' => t('Enabled'), '0' => t('Disabled'));  $form['access'] = array(    '#type' => 'fieldset',    '#title' => t('Access log settings'));  $form['access']['statistics_enable_access_log'] = array(    '#type' => 'radios',    '#title' => t('Enable access log'),    '#default_value' => variable_get('statistics_enable_access_log', 0),    '#options' => $options,    '#description' => t('Log each page access. Required for referrer statistics.'));  $period = drupal_map_assoc(array(3600, 10800, 21600, 32400, 43200, 86400, 172800, 259200, 604800, 1209600, 2419200, 4838400, 9676800), 'format_interval');  $form['access']['statistics_flush_accesslog_timer'] = array(    '#type' => 'select',    '#title' => t('Discard access logs older than'),    '#default_value'   => variable_get('statistics_flush_accesslog_timer', 259200),    '#options' => $period,    '#description' => t('Older access log entries (including referrer statistics) will be automatically discarded. (Requires a correctly configured <a href="@cron">cron maintenance task</a>.)', array('@cron' => url('admin/reports/status'))));  // count content views settings  $form['content'] = array(    '#type' => 'fieldset',    '#title' => t('Content viewing counter settings'));  $form['content']['statistics_count_content_views'] = array(    '#type' => 'radios',    '#title' => t('Count content views'),    '#default_value' => variable_get('statistics_count_content_views', 0),    '#options' => $options,    '#description' => t('Increment a counter each time content is viewed.'));  return system_settings_form($form);}
<?php// $Id$/** * @file * Functions to aid in the creation of sortable tables. * * All tables created with a call to theme('table') have the option of having * column headers that the user can click on to sort the table by that column. *//** * Initialize the table sort context. */function tablesort_init($header) {  $ts = tablesort_get_order($header);  $ts['sort'] = tablesort_get_sort($header);  $ts['query_string'] = tablesort_get_querystring();  return $ts;}/** * Create an SQL sort clause. * * This function produces the ORDER BY clause to insert in your SQL queries, * assuring that the returned database table rows match the sort order chosen * by the user. * * @param $header *   An array of column headers in the format described in theme_table(). * @param $before *   An SQL string to insert after ORDER BY and before the table sorting code. *   Useful for sorting by important attributes like "sticky" first. * @return *   An SQL string to append to the end of a query. * * @ingroup database */function tablesort_sql($header, $before = '') {  $ts = tablesort_init($header);  if ($ts['sql']) {    // Based on code from db_escape_table(), but this can also contain a dot.    $field = preg_replace('/[^A-Za-z0-9_.]+/', '', $ts['sql']);    // Sort order can only be ASC or DESC.    $sort = drupal_strtoupper($ts['sort']);    $sort = in_array($sort, array('ASC', 'DESC')) ? $sort : '';    return " ORDER BY $before $field $sort";  }}/** * Format a column header. * * If the cell in question is the column header for the current sort criterion, * it gets special formatting. All possible sort criteria become links. * * @param $cell *   The cell to format. * @param $header *   An array of column headers in the format described in theme_table(). * @param $ts *   The current table sort context as returned from tablesort_init(). * @return *   A properly formatted cell, ready for _theme_table_cell(). */function tablesort_header($cell, $header, $ts) {  // Special formatting for the currently sorted column header.  if (is_array($cell) && isset($cell['field'])) {    $title = t('sort by @s', array('@s' => $cell['data']));    if ($cell['data'] == $ts['name']) {      $ts['sort'] = (($ts['sort'] == 'asc') ? 'desc' : 'asc');      if (isset($cell['class'])) {        $cell['class'] .= ' active';      }      else {        $cell['class'] = 'active';      }      $image = theme('tablesort_indicator', $ts['sort']);    }    else {      // If the user clicks a different header, we want to sort ascending initially.      $ts['sort'] = 'asc';      $image = '';    }    if (!empty($ts['query_string'])) {      $ts['query_string'] = '&'. $ts['query_string'];    }    $cell['data'] = l($cell['data'] . $image, $_GET['q'], array('attributes' => array('title' => $title), 'query' => 'sort='. $ts['sort'] .'&order='. urlencode($cell['data']) . $ts['query_string'], 'html' => TRUE));    unset($cell['field'], $cell['sort']);  }  return $cell;}/** * Format a table cell. * * Adds a class attribute to all cells in the currently active column. * * @param $cell *   The cell to format. * @param $header *   An array of column headers in the format described in theme_table(). * @param $ts *   The current table sort context as returned from tablesort_init(). * @param $i *   The index of the cell's table column. * @return *   A properly formatted cell, ready for _theme_table_cell(). */function tablesort_cell($cell, $header, $ts, $i) {  if (isset($header[$i]['data']) && $header[$i]['data'] == $ts['name'] && !empty($header[$i]['field'])) {    if (is_array($cell)) {      if (isset($cell['class'])) {        $cell['class'] .= ' active';      }      else {        $cell['class'] = 'active';      }    }    else {      $cell = array('data' => $cell, 'class' => 'active');    }  }  return $cell;}/** * Compose a query string to append to table sorting requests. * * @return *   A query string that consists of all components of the current page request *   except for those pertaining to table sorting. */function tablesort_get_querystring() {  return drupal_query_string_encode($_REQUEST, array_merge(array('q', 'sort', 'order', 'pass'), array_keys($_COOKIE)));}/** * Determine the current sort criterion. * * @param $headers *   An array of column headers in the format described in theme_table(). * @return *   An associative array describing the criterion, containing the keys: *   - "name": The localized title of the table column. *   - "sql": The name of the database field to sort on. */function tablesort_get_order($headers) {  $order = isset($_GET['order']) ? $_GET['order'] : '';  foreach ($headers as $header) {    if (isset($header['data']) && $order == $header['data']) {      return array('name' => $header['data'], 'sql' => isset($header['field']) ? $header['field'] : '');    }    if (isset($header['sort']) && ($header['sort'] == 'asc' || $header['sort'] == 'desc')) {      $default = array('name' => $header['data'], 'sql' => isset($header['field']) ? $header['field'] : '');    }  }  if (isset($default)) {    return $default;  }  else {    // The first column specified is initial 'order by' field unless otherwise specified    if (is_array($headers[0])) {      $headers[0] += array('data' => NULL, 'field' => NULL);      return array('name' => $headers[0]['data'], 'sql' => $headers[0]['field']);    }    else {      return array('name' => $headers[0]);    }  }}/** * Determine the current sort direction. * * @param $headers *   An array of column headers in the format described in theme_table(). * @return *   The current sort direction ("asc" or "desc"). */function tablesort_get_sort($headers) {  if (isset($_GET['sort'])) {    return ($_GET['sort'] == 'desc') ? 'desc' : 'asc';  }  // User has not specified a sort. Use default if specified; otherwise use "asc".  else {    foreach ($headers as $header) {      if (is_array($header) && array_key_exists('sort', $header)) {        return $header['sort'];      }    }  }  return 'asc';}
<?php// $Id$/** * @file * Configuration system that lets administrators modify the workings of the site. *//** * The current system version. */define('VERSION', '6.16');/** * Core API compatibility. */define('DRUPAL_CORE_COMPATIBILITY', '6.x');/** * Minimum supported version of PHP. */define('DRUPAL_MINIMUM_PHP',    '4.3.5');/** * Minimum recommended value of PHP memory_limit. */define('DRUPAL_MINIMUM_PHP_MEMORY_LIMIT',    '16M');/** * Minimum supported version of MySQL, if it is used. */define('DRUPAL_MINIMUM_MYSQL',  '4.1.1');/** * Minimum supported version of PostgreSQL, if it is used. */define('DRUPAL_MINIMUM_PGSQL',  '7.4');/** * Maximum age of temporary files in seconds. */define('DRUPAL_MAXIMUM_TEMP_FILE_AGE', 21600);/** * Implementation of hook_help(). */function system_help($path, $arg) {  global $base_url;  switch ($path) {    case 'admin/help#system':      $output = '<p>'. t('The system module is at the foundation of your Drupal website, and provides basic but extensible functionality for use by other modules and themes. Some integral elements of Drupal are contained in and managed by the system module, including caching, enabling or disabling of modules and themes, preparing and displaying the administrative page, and configuring fundamental site settings. A number of key system maintenance operations are also part of the system module.') .'</p>';      $output .= '<p>'. t('The system module provides:') .'</p>';      $output .= '<ul><li>'. t('support for enabling and disabling <a href="@modules">modules</a>. Drupal comes packaged with a number of core modules; each module provides a discrete set of features and may be enabled depending on the needs of your site. A wide array of additional modules contributed by members of the Drupal community are available for download at the <a href="@drupal-modules">Drupal.org module page</a>.', array('@modules' => url('admin/build/modules'), '@drupal-modules' => 'http://drupal.org/project/modules')) .'</li>';      $output .= '<li>'. t('support for enabling and disabling <a href="@themes">themes</a>, which determine the design and presentation of your site. Drupal comes packaged with several core themes and additional contributed themes are available at the <a href="@drupal-themes">Drupal.org theme page</a>.', array('@themes' => url('admin/build/themes'), '@drupal-themes' => 'http://drupal.org/project/themes')) .'</li>';      $output .= '<li>'. t('a robust <a href="@cache-settings">caching system</a> that allows the efficient re-use of previously-constructed web pages and web page components. Drupal stores the pages requested by anonymous users in a compressed format; depending on your site configuration and the amount of your web traffic tied to anonymous visitors, Drupal\'s caching system may significantly increase the speed of your site.', array('@cache-settings' => url('admin/settings/performance'))) .'</li>';      $output .= '<li>'. t('a set of routine administrative operations that rely on a correctly-configured <a href="@cron">cron maintenance task</a> to run automatically. A number of other modules, including the feed aggregator, ping module and search also rely on <a href="@cron">cron maintenance tasks</a>. For more information, see the online handbook entry for <a href="@handbook">configuring cron jobs</a>.', array('@cron' => url('admin/reports/status'), '@handbook' => 'http://drupal.org/cron')) .'</li>';      $output .= '<li>'. t('basic configuration options for your site, including <a href="@date-settings">date and time settings</a>, <a href="@file-system">file system settings</a>, <a href="@clean-url">clean URL support</a>, <a href="@site-info">site name and other information</a>, and a <a href="@site-maintenance">site maintenance</a> function for taking your site temporarily off-line.', array('@date-settings' => url('admin/settings/date-time'), '@file-system' => url('admin/settings/file-system'), '@clean-url' => url('admin/settings/clean-urls'), '@site-info' => url('admin/settings/site-information'), '@site-maintenance' => url('admin/settings/site-maintenance'))) .'</li></ul>';      $output .= '<p>'. t('For more information, see the online handbook entry for <a href="@system">System module</a>.', array('@system' => 'http://drupal.org/handbook/modules/system/')) .'</p>';      return $output;    case 'admin':      return '<p>'. t('Welcome to the administration section. Here you may control how your site functions.') .'</p>';    case 'admin/by-module':      return '<p>'. t('This page shows you all available administration tasks for each module.') .'</p>';    case 'admin/build/themes':      $output = '<p>'. t('Select which themes are available to your users and specify the default theme. To configure site-wide display settings, click the "configure" task above. Alternatively, to override these settings in a specific theme, click the "configure" link for that theme. Note that different themes may have different regions available for displaying content; for consistency in presentation, you may wish to enable only one theme.') .'</p>';      $output .= '<p>'. t('To change the appearance of your site, a number of <a href="@themes">contributed themes</a> are available.', array('@themes' => 'http://drupal.org/project/themes')) .'</p>';      return $output;    case 'admin/build/themes/settings/'. $arg[4]:      $reference = explode('.', $arg[4], 2);      $theme = array_pop($reference);      return '<p>'. t('These options control the display settings for the <code>%template</code> theme. When your site is displayed using this theme, these settings will be used. By clicking "Reset to defaults," you can choose to use the <a href="@global">global settings</a> for this theme.', array('%template' => $theme, '@global' => url('admin/build/themes/settings'))) .'</p>';    case 'admin/build/themes/settings':      return '<p>'. t('These options control the default display settings for your entire site, across all themes. Unless they have been overridden by a specific theme, these settings will be used.') .'</p>';    case 'admin/build/modules':      $output = '<p>'. t('Modules are plugins that extend Drupal\'s core functionality. Enable modules by selecting the <em>Enabled</em> checkboxes below and clicking the <em>Save configuration</em> button. Once a module is enabled, new <a href="@permissions">permissions</a> may be available. To reduce server load, modules with their <em>Throttle</em> checkbox selected are temporarily disabled when your site becomes extremely busy. (Note that the <em>Throttle</em> checkbox is only available if the Throttle module is enabled.)', array('@permissions' => url('admin/user/permissions')));      if (module_exists('throttle')) {        $output .= ' '. t('The auto-throttle functionality must be enabled on the <a href="@throttle">throttle configuration page</a> after having enabled the throttle module.', array('@throttle' => url('admin/settings/throttle')));      }      $output .= '</p>';      $output .= '<p>'. t('It is important that <a href="@update-php">update.php</a> is run every time a module is updated to a newer version.', array('@update-php' => $base_url .'/update.php')) .'</p>';      $output .= '<p>'. t('You can find all administration tasks belonging to a particular module on the <a href="@by-module">administration by module page</a>.', array('@by-module' => url('admin/by-module'))) .'</p>';      $output .= '<p>'. t('To extend the functionality of your site, a number of <a href="@modules">contributed modules</a> are available.', array('@modules' => 'http://drupal.org/project/modules')) .'</p>';      $output .= '<p>'. t('To clear all caches, click the button on the <a href="@performance">Performance page</a>.', array('@performance' => url('admin/settings/performance', array('fragment' => 'edit-clear')))) .'</p>';      return $output;    case 'admin/build/modules/uninstall':      return '<p>'. t('The uninstall process removes all data related to a module. To uninstall a module, you must first disable it. Not all modules support this feature.') .'</p>';    case 'admin/build/block/configure':      if ($arg[4] == 'system' && $arg[5] == 0) {        return '<p>'. t('The <em>Powered by Drupal</em> block is an optional link to the home page of the Drupal project. While there is absolutely no requirement that sites feature this link, it may be used to show support for Drupal.') .'</p>';      }      break;    case 'admin/settings/actions':    case 'admin/settings/actions/manage':      $output = '<p>'. t('Actions are individual tasks that the system can do, such as unpublishing a piece of content or banning a user. Modules, such as the trigger module, can fire these actions when certain system events happen; for example, when a new post is added or when a user logs in. Modules may also provide additional actions.') .'</p>';      $output .= '<p>'. t('There are two types of actions: simple and advanced. Simple actions do not require any additional configuration, and are listed here automatically. Advanced actions can do more than simple actions; for example, send an e-mail to a specified address, or check for certain words within a piece of content. These actions need to be created and configured first before they may be used. To create an advanced action, select the action from the drop-down below and click the <em>Create</em> button.') .'</p>';      if (module_exists('trigger')) {        $output .= '<p>'. t('You may proceed to the <a href="@url">Triggers</a> page to assign these actions to system events.', array('@url' => url('admin/build/trigger'))) .'</p>';      }      return $output;    case 'admin/settings/actions/configure':      return t('An advanced action offers additional configuration options which may be filled out below. Changing the <em>Description</em> field is recommended, in order to better identify the precise action taking place. This description will be displayed in modules such as the trigger module when assigning actions to system events, so it is best if it is as descriptive as possible (for example, "Send e-mail to Moderation Team" rather than simply "Send e-mail").');    case 'admin/reports/status':      return '<p>'. t("Here you can find a short overview of your site's parameters as well as any problems detected with your installation. It may be useful to copy and paste this information into support requests filed on drupal.org's support forums and project issue queues.") .'</p>';  }}/** * Implementation of hook_theme(). */function system_theme() {  return array_merge(drupal_common_theme(), array(    'system_theme_select_form' => array(      'arguments' => array('form' => NULL),      'file' => 'system.admin.inc',    ),    'system_themes_form' => array(      'arguments' => array('form' => NULL),      'file' => 'system.admin.inc',    ),    'system_modules' => array(      'arguments' => array('form' => NULL),      'file' => 'system.admin.inc',    ),    'system_modules_uninstall' => array(      'arguments' => array('form' => NULL),      'file' => 'system.admin.inc',    ),    'status_report' => array(      'arguments' => array('requirements' => NULL),      'file' => 'system.admin.inc',    ),    'admin_page' => array(      'arguments' => array('blocks' => NULL),      'file' => 'system.admin.inc',    ),    'admin_block' => array(      'arguments' => array('block' => NULL),      'file' => 'system.admin.inc',    ),    'admin_block_content' => array(      'arguments' => array('content' => NULL),      'file' => 'system.admin.inc',    ),    'system_admin_by_module' => array(      'arguments' => array('menu_items' => NULL),      'file' => 'system.admin.inc',    ),    'system_powered_by' => array(      'arguments' => array('image_path' => NULL),    ),  ));}/** * Implementation of hook_perm(). */function system_perm() {  return array('administer site configuration', 'access administration pages', 'administer actions', 'access site reports', 'select different theme', 'administer files');}/** * Implementation of hook_elements(). */function system_elements() {  // Top level form  $type['form'] = array('#method' => 'post', '#action' => request_uri());  // Inputs  $type['submit'] = array('#input' => TRUE, '#name' => 'op', '#button_type' => 'submit', '#executes_submit_callback' => TRUE, '#process' => array('form_expand_ahah'));  $type['button'] = array('#input' => TRUE, '#name' => 'op', '#button_type' => 'submit', '#executes_submit_callback' => FALSE, '#process' => array('form_expand_ahah'));  $type['image_button'] = array('#input' => TRUE, '#button_type' => 'submit', '#executes_submit_callback' => TRUE, '#process' => array('form_expand_ahah'), '#return_value' => TRUE, '#has_garbage_value' => TRUE, '#src' => NULL);  $type['textfield'] = array('#input' => TRUE, '#size' => 60, '#maxlength' => 128, '#autocomplete_path' => FALSE, '#process' => array('form_expand_ahah'));  $type['password'] = array('#input' => TRUE, '#size' => 60, '#maxlength' => 128, '#process' => array('form_expand_ahah'));  $type['password_confirm'] = array('#input' => TRUE, '#process' => array('expand_password_confirm'));  $type['textarea'] = array('#input' => TRUE, '#cols' => 60, '#rows' => 5, '#resizable' => TRUE, '#process' => array('form_expand_ahah'));  $type['radios'] = array('#input' => TRUE, '#process' => array('expand_radios'));  $type['radio'] = array('#input' => TRUE, '#default_value' => NULL, '#process' => array('form_expand_ahah'));  $type['checkboxes'] = array('#input' => TRUE, '#process' => array('expand_checkboxes'), '#tree' => TRUE);  $type['checkbox'] = array('#input' => TRUE, '#return_value' => 1, '#process' => array('form_expand_ahah'));  $type['select'] = array('#input' => TRUE, '#size' => 0, '#multiple' => FALSE, '#process' => array('form_expand_ahah'));  $type['weight'] = array('#input' => TRUE, '#delta' => 10, '#default_value' => 0, '#process' => array('process_weight', 'form_expand_ahah'));  $type['date'] = array('#input' => TRUE, '#process' => array('expand_date'), '#element_validate' => array('date_validate'));  $type['file'] = array('#input' => TRUE, '#size' => 60);  // Form structure  $type['item'] = array('#value' => '');  $type['hidden'] = array('#input' => TRUE, '#process' => array('form_expand_ahah'));  $type['value'] = array('#input' => TRUE);  $type['markup'] = array('#prefix' => '', '#suffix' => '');  $type['fieldset'] = array('#collapsible' => FALSE, '#collapsed' => FALSE, '#value' => NULL, '#process' => array('form_expand_ahah'));  $type['token'] = array('#input' => TRUE);  return $type;}/** * Implementation of hook_menu(). */function system_menu() {  $items['system/files'] = array(    'title' => 'File download',    'page callback' => 'file_download',    'access callback' => TRUE,    'type' => MENU_CALLBACK,  );  $items['admin'] = array(    'title' => 'Administer',    'access arguments' => array('access administration pages'),    'page callback' => 'system_main_admin_page',    'weight' => 9,    'file' => 'system.admin.inc',  );  $items['admin/compact'] = array(    'title' => 'Compact mode',    'page callback' => 'system_admin_compact_page',    'access arguments' => array('access administration pages'),    'type' => MENU_CALLBACK,    'file' => 'system.admin.inc',  );  $items['admin/by-task'] = array(    'title' => 'By task',    'page callback' => 'system_main_admin_page',    'access arguments' => array('access administration pages'),    'file' => 'system.admin.inc',    'type' => MENU_DEFAULT_LOCAL_TASK,  );  $items['admin/by-module'] = array(    'title' => 'By module',    'page callback' => 'system_admin_by_module',    'access arguments' => array('access administration pages'),    'file' => 'system.admin.inc',    'type' => MENU_LOCAL_TASK,    'weight' => 2,  );  $items['admin/content'] = array(    'title' => 'Content management',    'description' => "Manage your site's content.",    'position' => 'left',    'weight' => -10,    'page callback' => 'system_admin_menu_block_page',    'access arguments' => array('access administration pages'),    'file' => 'system.admin.inc',  );  // menu items that are basically just menu blocks  $items['admin/settings'] = array(    'title' => 'Site configuration',    'description' => 'Adjust basic site configuration options.',    'position' => 'right',    'weight' => -5,    'page callback' => 'system_settings_overview',    'access arguments' => array('access administration pages'),    'file' => 'system.admin.inc',  );  $items['admin/build'] = array(    'title' => 'Site building',    'description' => 'Control how your site looks and feels.',    'position' => 'right',    'weight' => -10,    'page callback' => 'system_admin_menu_block_page',    'access arguments' => array('access administration pages'),    'file' => 'system.admin.inc',  );  $items['admin/settings/admin'] = array(    'title' => 'Administration theme',    'description' => 'Settings for how your administrative pages should look.',    'position' => 'left',    'page callback' => 'drupal_get_form',    'page arguments' => array('system_admin_theme_settings'),    'access arguments' => array('administer site configuration'),    'block callback' => 'system_admin_theme_settings',    'file' => 'system.admin.inc',  );  // Themes:  $items['admin/build/themes'] = array(    'title' => 'Themes',    'description' => 'Change which theme your site uses or allows users to set.',    'page callback' => 'drupal_get_form',    'page arguments' => array('system_themes_form', NULL),    'access arguments' => array('administer site configuration'),    'file' => 'system.admin.inc',  );  $items['admin/build/themes/select'] = array(    'title' => 'List',    'description' => 'Select the default theme.',    'type' => MENU_DEFAULT_LOCAL_TASK,    'weight' => -1,  );  $items['admin/build/themes/settings'] = array(    'title' => 'Configure',    'page arguments' => array('system_theme_settings'),    'access arguments' => array('administer site configuration'),    'type' => MENU_LOCAL_TASK,  );  // Theme configuration subtabs  $items['admin/build/themes/settings/global'] = array(    'title' => 'Global settings',    'type' => MENU_DEFAULT_LOCAL_TASK,    'weight' => -1,  );  foreach (list_themes() as $theme) {    $items['admin/build/themes/settings/'. $theme->name] = array(      'title' => $theme->info['name'],      'page arguments' => array('system_theme_settings', $theme->name),      'type' => MENU_LOCAL_TASK,      'access callback' => '_system_themes_access',      'access arguments' => array($theme),    );  }  // Modules:  $items['admin/build/modules'] = array(    'title' => 'Modules',    'description' => 'Enable or disable add-on modules for your site.',    'page callback' => 'drupal_get_form',    'page arguments' => array('system_modules'),    'access arguments' => array('administer site configuration'),    'file' => 'system.admin.inc',  );  $items['admin/build/modules/list'] = array(    'title' => 'List',    'type' => MENU_DEFAULT_LOCAL_TASK,  );  $items['admin/build/modules/list/confirm'] = array(    'title' => 'List',    'access arguments' => array('administer site configuration'),    'type' => MENU_CALLBACK,  );  $items['admin/build/modules/uninstall'] = array(    'title' => 'Uninstall',    'page arguments' => array('system_modules_uninstall'),    'access arguments' => array('administer site configuration'),    'type' => MENU_LOCAL_TASK,  );  $items['admin/build/modules/uninstall/confirm'] = array(    'title' => 'Uninstall',    'access arguments' => array('administer site configuration'),    'type' => MENU_CALLBACK,  );  // Actions:  $items['admin/settings/actions'] = array(    'title' => 'Actions',    'description' => 'Manage the actions defined for your site.',    'access arguments' => array('administer actions'),    'page callback' => 'system_actions_manage'  );  $items['admin/settings/actions/manage'] = array(    'title' => 'Manage actions',    'description' => 'Manage the actions defined for your site.',    'page callback' => 'system_actions_manage',    'type' => MENU_DEFAULT_LOCAL_TASK,    'weight' => -2,  );  $items['admin/settings/actions/configure'] = array(    'title' => 'Configure an advanced action',    'page callback' => 'drupal_get_form',    'page arguments' => array('system_actions_configure'),    'access arguments' => array('administer actions'),    'type' => MENU_CALLBACK,  );  $items['admin/settings/actions/delete/%actions'] = array(    'title' => 'Delete action',    'description' => 'Delete an action.',    'page callback' => 'drupal_get_form',    'page arguments' => array('system_actions_delete_form', 4),    'access arguments' => array('administer actions'),    'type' => MENU_CALLBACK,  );  $items['admin/settings/actions/orphan'] = array(    'title' => 'Remove orphans',    'page callback' => 'system_actions_remove_orphans',    'access arguments' => array('administer actions'),    'type' => MENU_CALLBACK,  );  // Settings:  $items['admin/settings/site-information'] = array(    'title' => 'Site information',    'description' => 'Change basic site information, such as the site name, slogan, e-mail address, mission, front page and more.',    'page callback' => 'drupal_get_form',    'page arguments' => array('system_site_information_settings'),    'access arguments' => array('administer site configuration'),    'file' => 'system.admin.inc',  );  $items['admin/settings/error-reporting'] = array(    'title' => 'Error reporting',    'description' => 'Control how Drupal deals with errors including 403/404 errors as well as PHP error reporting.',    'page callback' => 'drupal_get_form',    'page arguments' => array('system_error_reporting_settings'),    'access arguments' => array('administer site configuration'),    'file' => 'system.admin.inc',  );  $items['admin/settings/logging'] = array(    'title' => 'Logging and alerts',    'description' => "Settings for logging and alerts modules. Various modules can route Drupal's system events to different destination, such as syslog, database, email, ...etc.",    'page callback' => 'system_logging_overview',    'access arguments' => array('administer site configuration'),    'file' => 'system.admin.inc',  );  $items['admin/settings/performance'] = array(    'title' => 'Performance',    'description' => 'Enable or disable page caching for anonymous users and set CSS and JS bandwidth optimization options.',    'page callback' => 'drupal_get_form',    'page arguments' => array('system_performance_settings'),    'access arguments' => array('administer site configuration'),    'file' => 'system.admin.inc',  );  $items['admin/settings/file-system'] = array(    'title' => 'File system',    'description' => 'Tell Drupal where to store uploaded files and how they are accessed.',    'page callback' => 'drupal_get_form',    'page arguments' => array('system_file_system_settings'),    'access arguments' => array('administer site configuration'),    'file' => 'system.admin.inc',  );  $items['admin/settings/image-toolkit'] = array(    'title' => 'Image toolkit',    'description' => 'Choose which image toolkit to use if you have installed optional toolkits.',    'page callback' => 'drupal_get_form',    'page arguments' => array('system_image_toolkit_settings'),    'access arguments' => array('administer site configuration'),    'file' => 'system.admin.inc',  );  $items['admin/content/rss-publishing'] = array(    'title' => 'RSS publishing',    'description' => 'Configure the number of items per feed and whether feeds should be titles/teasers/full-text.',    'page callback' => 'drupal_get_form',    'page arguments' => array('system_rss_feeds_settings'),    'access arguments' => array('administer site configuration'),    'file' => 'system.admin.inc',  );  $items['admin/settings/date-time'] = array(    'title' => 'Date and time',    'description' => "Settings for how Drupal displays date and time, as well as the system's default timezone.",    'page callback' => 'drupal_get_form',    'page arguments' => array('system_date_time_settings'),    'access arguments' => array('administer site configuration'),    'file' => 'system.admin.inc',  );  $items['admin/settings/date-time/lookup'] = array(    'title' => 'Date and time lookup',    'type' => MENU_CALLBACK,    'page callback' => 'system_date_time_lookup',    'access arguments' => array('administer site configuration'),    'file' => 'system.admin.inc',  );  $items['admin/settings/site-maintenance'] = array(    'title' => 'Site maintenance',    'description' => 'Take the site off-line for maintenance or bring it back online.',    'page callback' => 'drupal_get_form',    'page arguments' => array('system_site_maintenance_settings'),    'access arguments' => array('administer site configuration'),    'file' => 'system.admin.inc',  );  $items['admin/settings/clean-urls'] = array(    'title' => 'Clean URLs',    'description' => 'Enable or disable clean URLs for your site.',    'page callback' => 'drupal_get_form',    'page arguments' => array('system_clean_url_settings'),    'access arguments' => array('administer site configuration'),    'file' => 'system.admin.inc',  );  $items['admin/settings/clean-urls/check'] = array(    'title' => 'Clean URL check',    'page callback' => 'drupal_json',    'page arguments' => array(array('status' => TRUE)),    'access callback' => TRUE,    'type' => MENU_CALLBACK,  );  // Reports:  $items['admin/reports'] = array(    'title' => 'Reports',    'description' => 'View reports from system logs and other status information.',    'page callback' => 'system_admin_menu_block_page',    'access arguments' => array('access site reports'),    'weight' => 5,    'position' => 'left',    'file' => 'system.admin.inc',  );  $items['admin/reports/status'] = array(    'title' => 'Status report',    'description' => "Get a status report about your site's operation and any detected problems.",    'page callback' => 'system_status',    'weight' => 10,    'access arguments' => array('administer site configuration'),    'file' => 'system.admin.inc',  );  $items['admin/reports/status/run-cron'] = array(    'title' => 'Run cron',    'page callback' => 'system_run_cron',    'access arguments' => array('administer site configuration'),    'type' => MENU_CALLBACK,    'file' => 'system.admin.inc',  );  $items['admin/reports/status/php'] = array(    'title' => 'PHP',    'page callback' => 'system_php',    'access arguments' => array('administer site configuration'),    'type' => MENU_CALLBACK,    'file' => 'system.admin.inc',  );  $items['admin/reports/status/sql'] = array(    'title' => 'SQL',    'page callback' => 'system_sql',    'access arguments' => array('administer site configuration'),    'type' => MENU_CALLBACK,    'file' => 'system.admin.inc',  );  // Default page for batch operations  $items['batch'] = array(    'page callback' => 'system_batch_page',    'access callback' => TRUE,    'type' => MENU_CALLBACK,    'file' => 'system.admin.inc',  );  return $items;}/** * Menu item access callback - only admin or enabled themes can be accessed. */function _system_themes_access($theme) {  return user_access('administer site configuration') && ($theme->status || $theme->name == variable_get('admin_theme', '0'));}/** * Implementation of hook_init(). */function system_init() {  // Use the administrative theme if the user is looking at a page in the admin/* path.  if (arg(0) == 'admin' || (variable_get('node_admin_theme', '0') && arg(0) == 'node' && (arg(1) == 'add' || arg(2) == 'edit'))) {    global $custom_theme;    $custom_theme = variable_get('admin_theme', '0');    drupal_add_css(drupal_get_path('module', 'system') .'/admin.css', 'module');  }  // Add the CSS for this module.  drupal_add_css(drupal_get_path('module', 'system') .'/defaults.css', 'module');  drupal_add_css(drupal_get_path('module', 'system') .'/system.css', 'module');  drupal_add_css(drupal_get_path('module', 'system') .'/system-menus.css', 'module');}/** * Implementation of hook_user(). * * Allows users to individually set their theme and time zone. */function system_user($type, $edit, &$user, $category = NULL) {  if ($type == 'form' && $category == 'account') {    $form['theme_select'] = system_theme_select_form(t('Selecting a different theme will change the look and feel of the site.'), isset($edit['theme']) ? $edit['theme'] : NULL, 2);    if (variable_get('configurable_timezones', 1)) {      $zones = _system_zonelist();      $form['timezone'] = array(        '#type' => 'fieldset',        '#title' => t('Locale settings'),        '#weight' => 6,        '#collapsible' => TRUE,      );      $form['timezone']['timezone'] = array(        '#type' => 'select',        '#title' => t('Time zone'),        '#default_value' => strlen($edit['timezone']) ? $edit['timezone'] : variable_get('date_default_timezone', 0),        '#options' => $zones,        '#description' => t('Select your current local time. Dates and times throughout this site will be displayed using this time zone.'),      );    }    return $form;  }}/** * Implementation of hook_block(). * * Generate a block with a promotional link to Drupal.org. */function system_block($op = 'list', $delta = 0, $edit = NULL) {  switch ($op) {    case 'list':      $blocks[0] = array(        'info' => t('Powered by Drupal'),        'weight' => '10',         // Not worth caching.        'cache' => BLOCK_NO_CACHE,      );      return $blocks;    case 'configure':      // Compile a list of fields to show      $form['wrapper']['color'] = array(        '#type' => 'select',        '#title' => t('Badge color'),        '#default_value' => variable_get('drupal_badge_color', 'powered-blue'),        '#options' => array('powered-black' => t('Black'), 'powered-blue' => t('Blue'), 'powered-gray' => t('Gray')),      );      $form['wrapper']['size'] = array(        '#type' => 'select',        '#title' => t('Badge size'),        '#default_value' => variable_get('drupal_badge_size', '80x15'),        '#options' => array('80x15' => t('Small'), '88x31' => t('Medium'), '135x42' => t('Large')),      );      return $form;    case 'save':      variable_set('drupal_badge_color', $edit['color']);      variable_set('drupal_badge_size', $edit['size']);      break;    case 'view':      $image_path = 'misc/'. variable_get('drupal_badge_color', 'powered-blue') .'-'. variable_get('drupal_badge_size', '80x15') .'.png';      $block['subject'] = NULL; // Don't display a title      $block['content'] = theme('system_powered_by', $image_path);      return $block;  }}/** * Provide a single block on the administration overview page. * * @param $item *   The menu item to be displayed. */function system_admin_menu_block($item) {  $content = array();  if (!isset($item['mlid'])) {    $item += db_fetch_array(db_query("SELECT mlid, menu_name FROM {menu_links} ml WHERE ml.router_path = '%s' AND module = 'system'", $item['path']));  }  $result = db_query("    SELECT m.load_functions, m.to_arg_functions, m.access_callback, m.access_arguments, m.page_callback, m.page_arguments, m.title, m.title_callback, m.title_arguments, m.type, m.description, ml.*    FROM {menu_links} ml    LEFT JOIN {menu_router} m ON ml.router_path = m.path    WHERE ml.plid = %d AND ml.menu_name = '%s' AND hidden = 0", $item['mlid'], $item['menu_name']);  while ($item = db_fetch_array($result)) {    _menu_link_translate($item);    if (!$item['access']) {      continue;    }    // The link 'description' either derived from the hook_menu 'description' or    // entered by the user via menu module is saved as the title attribute.    if (!empty($item['localized_options']['attributes']['title'])) {      $item['description'] = $item['localized_options']['attributes']['title'];    }    // Prepare for sorting as in function _menu_tree_check_access().    // The weight is offset so it is always positive, with a uniform 5-digits.    $content[(50000 + $item['weight']) .' '. drupal_strtolower($item['title']) .' '. $item['mlid']] = $item;  }  ksort($content);  return $content;}/** * Process admin theme form submissions. */function system_admin_theme_submit($form, &$form_state) {  // If we're changing themes, make sure the theme has its blocks initialized.  if ($form_state['values']['admin_theme'] && $form_state['values']['admin_theme'] != variable_get('admin_theme', '0')) {    $result = db_result(db_query("SELECT COUNT(*) FROM {blocks} WHERE theme = '%s'", $form_state['values']['admin_theme']));    if (!$result) {      system_initialize_theme_blocks($form_state['values']['admin_theme']);    }  }}/** * Returns a fieldset containing the theme select form. * * @param $description *    description of the fieldset * @param $default_value *    default value of theme radios * @param $weight *    weight of the fieldset * @return *    a form array */function system_theme_select_form($description = '', $default_value = '', $weight = 0) {  if (user_access('select different theme')) {    $enabled = array();    $themes = list_themes();    foreach ($themes as $theme) {      if ($theme->status) {        $enabled[] = $theme;      }    }    if (count($enabled) > 1) {      ksort($enabled);      $form['themes'] = array(        '#type' => 'fieldset',        '#title' => t('Theme configuration'),        '#description' => $description,        '#collapsible' => TRUE,        '#theme' => 'system_theme_select_form'      );      foreach ($enabled as $info) {        // For the default theme, revert to an empty string so the user's theme updates when the site theme is changed.        $info->key = $info->name == variable_get('theme_default', 'garland') ? '' : $info->name;        $screenshot = NULL;        $theme_key = $info->name;        while ($theme_key) {          if (file_exists($themes[$theme_key]->info['screenshot'])) {            $screenshot = $themes[$theme_key]->info['screenshot'];            break;          }          $theme_key = isset($themes[$theme_key]->info['base theme']) ? $themes[$theme_key]->info['base theme'] : NULL;        }        $screenshot = $screenshot ? theme('image', $screenshot, t('Screenshot for %theme theme', array('%theme' => $info->name)), '', array('class' => 'screenshot'), FALSE) : t('no screenshot');        $form['themes'][$info->key]['screenshot'] = array('#value' => $screenshot);        $form['themes'][$info->key]['description'] = array('#type' => 'item', '#title' => $info->name, '#value' => dirname($info->filename) . ($info->name == variable_get('theme_default', 'garland') ? '<br /> <em>'. t('(site default theme)') .'</em>' : ''));        $options[$info->key] = '';      }      $form['themes']['theme'] = array('#type' => 'radios', '#options' => $options, '#default_value' => $default_value ? $default_value : '');      $form['#weight'] = $weight;      return $form;    }  }}/** * Checks the existence of the directory specified in $form_element. This * function is called from the system_settings form to check both the * file_directory_path and file_directory_temp directories. If validation * fails, the form element is flagged with an error from within the * file_check_directory function. * * @param $form_element *   The form element containing the name of the directory to check. */function system_check_directory($form_element) {  file_check_directory($form_element['#value'], FILE_CREATE_DIRECTORY, $form_element['#parents'][0]);  return $form_element;}/** * Retrieves the current status of an array of files in the system table. * * @param $files *   An array of files to check. * @param $type *   The type of the files. */function system_get_files_database(&$files, $type) {  // Extract current files from database.  $result = db_query("SELECT filename, name, type, status, throttle, schema_version FROM {system} WHERE type = '%s'", $type);  while ($file = db_fetch_object($result)) {    if (isset($files[$file->name]) && is_object($files[$file->name])) {      $file->old_filename = $file->filename;      foreach ($file as $key => $value) {        if (!isset($files[$file->name]) || !isset($files[$file->name]->$key)) {          $files[$file->name]->$key = $value;        }      }    }  }}/** * Prepare defaults for themes. * * @return *   An array of default themes settings. */function system_theme_default() {  return array(    'regions' => array(      'left' => 'Left sidebar',      'right' => 'Right sidebar',      'content' => 'Content',      'header' => 'Header',      'footer' => 'Footer',    ),    'description' => '',    'features' => array(      'comment_user_picture',      'favicon',      'mission',      'logo',      'name',      'node_user_picture',      'search',      'slogan',      'primary_links',      'secondary_links',    ),    'stylesheets' => array(      'all' => array('style.css')    ),    'scripts' => array('script.js'),    'screenshot' => 'screenshot.png',    'php' => DRUPAL_MINIMUM_PHP,  );}/** * Collect data about all currently available themes. * * @return *   Array of all available themes and their data. */function system_theme_data() {  // Scan the installation theme .info files and their engines.  $themes = _system_theme_data();  // Extract current files from database.  system_get_files_database($themes, 'theme');  db_query("DELETE FROM {system} WHERE type = 'theme'");  foreach ($themes as $theme) {    if (!isset($theme->owner)) {      $theme->owner = '';    }    db_query("INSERT INTO {system} (name, owner, info, type, filename, status, throttle, bootstrap) VALUES ('%s', '%s', '%s', '%s', '%s', %d, %d, %d)", $theme->name, $theme->owner, serialize($theme->info), 'theme', $theme->filename, isset($theme->status) ? $theme->status : 0, 0, 0);  }  return $themes;}/** * Helper function to scan and collect theme .info data and their engines. * * @return *   An associative array of themes information. */function _system_theme_data() {  static $themes_info = array();  if (empty($themes_info)) {    // Find themes    $themes = drupal_system_listing('\.info$', 'themes');    // Find theme engines    $engines = drupal_system_listing('\.engine$', 'themes/engines');    $defaults = system_theme_default();    $sub_themes = array();    // Read info files for each theme    foreach ($themes as $key => $theme) {      $themes[$key]->info = drupal_parse_info_file($theme->filename) + $defaults;      // Invoke hook_system_info_alter() to give installed modules a chance to      // modify the data in the .info files if necessary.      drupal_alter('system_info', $themes[$key]->info, $themes[$key]);      if (!empty($themes[$key]->info['base theme'])) {        $sub_themes[] = $key;      }      if (empty($themes[$key]->info['engine'])) {        $filename = dirname($themes[$key]->filename) .'/'. $themes[$key]->name .'.theme';        if (file_exists($filename)) {          $themes[$key]->owner = $filename;          $themes[$key]->prefix = $key;        }      }      else {        $engine = $themes[$key]->info['engine'];        if (isset($engines[$engine])) {          $themes[$key]->owner = $engines[$engine]->filename;          $themes[$key]->prefix = $engines[$engine]->name;          $themes[$key]->template = TRUE;        }      }      // Give the stylesheets proper path information.      $pathed_stylesheets = array();      foreach ($themes[$key]->info['stylesheets'] as $media => $stylesheets) {        foreach ($stylesheets as $stylesheet) {          $pathed_stylesheets[$media][$stylesheet] = dirname($themes[$key]->filename) .'/'. $stylesheet;        }      }      $themes[$key]->info['stylesheets'] = $pathed_stylesheets;      // Give the scripts proper path information.      $scripts = array();      foreach ($themes[$key]->info['scripts'] as $script) {        $scripts[$script] = dirname($themes[$key]->filename) .'/'. $script;      }      $themes[$key]->info['scripts'] = $scripts;      // Give the screenshot proper path information.      if (!empty($themes[$key]->info['screenshot'])) {        $themes[$key]->info['screenshot'] = dirname($themes[$key]->filename) .'/'. $themes[$key]->info['screenshot'];      }    }    // Now that we've established all our master themes, go back and fill in    // data for subthemes.    foreach ($sub_themes as $key) {      $themes[$key]->base_themes = system_find_base_themes($themes, $key);      // Don't proceed if there was a problem with the root base theme.      if (!current($themes[$key]->base_themes)) {        continue;      }      $base_key = key($themes[$key]->base_themes);      foreach (array_keys($themes[$key]->base_themes) as $base_theme) {        $themes[$base_theme]->sub_themes[$key] = $themes[$key]->info['name'];      }      // Copy the 'owner' and 'engine' over if the top level theme uses a      // theme engine.      if (isset($themes[$base_key]->owner)) {        if (isset($themes[$base_key]->info['engine'])) {          $themes[$key]->info['engine'] = $themes[$base_key]->info['engine'];          $themes[$key]->owner = $themes[$base_key]->owner;          $themes[$key]->prefix = $themes[$base_key]->prefix;        }        else {          $themes[$key]->prefix = $key;        }      }    }    $themes_info = $themes;  }  return $themes_info;}/** * Find all the base themes for the specified theme. * * Themes can inherit templates and function implementations from earlier themes. * * @param $themes *   An array of available themes. * @param $key *   The name of the theme whose base we are looking for. * @param $used_keys *   A recursion parameter preventing endless loops. * @return *   Returns an array of all of the theme's ancestors; the first element's value *   will be NULL if an error occurred. */function system_find_base_themes($themes, $key, $used_keys = array()) {  $base_key = $themes[$key]->info['base theme'];  // Does the base theme exist?  if (!isset($themes[$base_key])) {    return array($base_key => NULL);  }  $current_base_theme = array($base_key => $themes[$base_key]->info['name']);  // Is the base theme itself a child of another theme?  if (isset($themes[$base_key]->info['base theme'])) {    // Do we already know the base themes of this theme?    if (isset($themes[$base_key]->base_themes)) {      return $themes[$base_key]->base_themes + $current_base_theme;    }    // Prevent loops.    if (!empty($used_keys[$base_key])) {      return array($base_key => NULL);    }    $used_keys[$base_key] = TRUE;    return system_find_base_themes($themes, $base_key, $used_keys) + $current_base_theme;  }  // If we get here, then this is our parent theme.  return $current_base_theme;}/** * This function has been deprecated in favor of system_find_base_themes(). * * Recursive function to find the top level base theme. Themes can inherit * templates and function implementations from earlier themes. * * @param $themes *   An array of available themes. * @param $key *   The name of the theme whose base we are looking for. * @param $used_keys *   A recursion parameter preventing endless loops. * @return *   Returns the top level parent that has no ancestor or returns NULL if there isn't a valid parent. */function system_find_base_theme($themes, $key, $used_keys = array()) {  $base_key = $themes[$key]->info['base theme'];  // Does the base theme exist?  if (!isset($themes[$base_key])) {    return NULL;  }  // Is the base theme itself a child of another theme?  if (isset($themes[$base_key]->info['base theme'])) {    // Prevent loops.    if (!empty($used_keys[$base_key])) {      return NULL;    }    $used_keys[$base_key] = TRUE;    return system_find_base_theme($themes, $base_key, $used_keys);  }  // If we get here, then this is our parent theme.  return $base_key;}/** * Get a list of available regions from a specified theme. * * @param $theme_key *   The name of a theme. * @return *   An array of regions in the form $region['name'] = 'description'. */function system_region_list($theme_key) {  static $list = array();  if (!array_key_exists($theme_key, $list)) {    $info = unserialize(db_result(db_query("SELECT info FROM {system} WHERE type = 'theme' AND name = '%s'", $theme_key)));    $list[$theme_key] = array_map('t', $info['regions']);  }  return $list[$theme_key];}/** * Get the name of the default region for a given theme. * * @param $theme *   The name of a theme. * @return *   A string that is the region name. */function system_default_region($theme) {  $regions = array_keys(system_region_list($theme));  return isset($regions[0]) ? $regions[0] : '';}/** * Assign an initial, default set of blocks for a theme. * * This function is called the first time a new theme is enabled. The new theme * gets a copy of the default theme's blocks, with the difference that if a * particular region isn't available in the new theme, the block is assigned * to the new theme's default region. * * @param $theme *   The name of a theme. */function system_initialize_theme_blocks($theme) {  // Initialize theme's blocks if none already registered.  if (!(db_result(db_query("SELECT COUNT(*) FROM {blocks} WHERE theme = '%s'", $theme)))) {    $default_theme = variable_get('theme_default', 'garland');    $regions = system_region_list($theme);    $result = db_query("SELECT * FROM {blocks} WHERE theme = '%s'", $default_theme);    while ($block = db_fetch_array($result)) {      // If the region isn't supported by the theme, assign the block to the theme's default region.      if (!array_key_exists($block['region'], $regions)) {        $block['region'] = system_default_region($theme);      }      db_query("INSERT INTO {blocks} (module, delta, theme, status, weight, region, visibility, pages, custom, throttle, cache) VALUES ('%s', '%s', '%s', %d, %d, '%s', %d, '%s', %d, %d, %d)",          $block['module'], $block['delta'], $theme, $block['status'], $block['weight'], $block['region'], $block['visibility'], $block['pages'], $block['custom'], $block['throttle'], $block['cache']);    }  }}/** * Add default buttons to a form and set its prefix. * * @ingroup forms * @see system_settings_form_submit() * @param $form *   An associative array containing the structure of the form. * @return *   The form structure. */function system_settings_form($form) {  $form['buttons']['submit'] = array('#type' => 'submit', '#value' => t('Save configuration') );  $form['buttons']['reset'] = array('#type' => 'submit', '#value' => t('Reset to defaults') );  if (!empty($_POST) && form_get_errors()) {    drupal_set_message(t('The settings have not been saved because of the errors.'), 'error');  }  $form['#submit'][] = 'system_settings_form_submit';  $form['#theme'] = 'system_settings_form';  return $form;}/** * Execute the system_settings_form. * * If you want node type configure style handling of your checkboxes, * add an array_filter value to your form. */function system_settings_form_submit($form, &$form_state) {  $op = isset($form_state['values']['op']) ? $form_state['values']['op'] : '';  // Exclude unnecessary elements.  unset($form_state['values']['submit'], $form_state['values']['reset'], $form_state['values']['form_id'], $form_state['values']['op'], $form_state['values']['form_token'], $form_state['values']['form_build_id']);  foreach ($form_state['values'] as $key => $value) {    if ($op == t('Reset to defaults')) {      variable_del($key);    }    else {      if (is_array($value) && isset($form_state['values']['array_filter'])) {        $value = array_keys(array_filter($value));      }      variable_set($key, $value);    }  }  if ($op == t('Reset to defaults')) {    drupal_set_message(t('The configuration options have been reset to their default values.'));  }  else {    drupal_set_message(t('The configuration options have been saved.'));  }  cache_clear_all();  drupal_rebuild_theme_registry();}/** * Helper function to sort requirements. */function _system_sort_requirements($a, $b) {  if (!isset($a['weight'])) {    if (!isset($b['weight'])) {      return strcmp($a['title'], $b['title']);    }    return -$b['weight'];  }  return isset($b['weight']) ? $a['weight'] - $b['weight'] : $a['weight'];}/** * Implementation of hook_node_type(). * * Updates theme settings after a node type change. */function system_node_type($op, $info) {  if ($op == 'update' && !empty($info->old_type) && $info->type != $info->old_type) {    $old = 'toggle_node_info_'. $info->old_type;    $new = 'toggle_node_info_'. $info->type;    $theme_settings = variable_get('theme_settings', array());    if (isset($theme_settings[$old])) {      $theme_settings[$new] = $theme_settings[$old];      unset($theme_settings[$old]);      variable_set('theme_settings', $theme_settings);    }  }}/** * Output a confirmation form * * This function returns a complete form for confirming an action. A link is * offered to go back to the item that is being changed in case the user changes * his/her mind. * * If the submit handler for this form is invoked, the user successfully * confirmed the action. You should never directly inspect $_POST to see if an * action was confirmed. * * @ingroup forms * @param $form *   Additional elements to inject into the form, for example hidden elements. * @param $question *   The question to ask the user (e.g. "Are you sure you want to delete the *   block <em>foo</em>?"). * @param $path *   The page to go to if the user denies the action. *   Can be either a drupal path, or an array with the keys 'path', 'query', 'fragment'. * @param $description *   Additional text to display (defaults to "This action cannot be undone."). * @param $yes *   A caption for the button which confirms the action (e.g. "Delete", *   "Replace", ...). * @param $no *   A caption for the link which denies the action (e.g. "Cancel"). * @param $name *   The internal name used to refer to the confirmation item. * @return *   The form. */function confirm_form($form, $question, $path, $description = NULL, $yes = NULL, $no = NULL, $name = 'confirm') {  $description = isset($description) ? $description : t('This action cannot be undone.');  // Prepare cancel link  $query = $fragment = NULL;  if (is_array($path)) {    $query = isset($path['query']) ? $path['query'] : NULL;    $fragment = isset($path['fragment']) ? $path['fragment'] : NULL;    $path = isset($path['path']) ? $path['path'] : NULL;  }  $cancel = l($no ? $no : t('Cancel'), $path, array('query' => $query, 'fragment' => $fragment));  drupal_set_title($question);  // Confirm form fails duplication check, as the form values rarely change -- so skip it.  $form['#skip_duplicate_check'] = TRUE;  $form['#attributes'] = array('class' => 'confirmation');  $form['description'] = array('#value' => $description);  $form[$name] = array('#type' => 'hidden', '#value' => 1);  $form['actions'] = array('#prefix' => '<div class="container-inline">', '#suffix' => '</div>');  $form['actions']['submit'] = array('#type' => 'submit', '#value' => $yes ? $yes : t('Confirm'));  $form['actions']['cancel'] = array('#value' => $cancel);  $form['#theme'] = 'confirm_form';  return $form;}/** * Determine if a user is in compact mode. */function system_admin_compact_mode() {  global $user;  return (isset($user->admin_compact_mode)) ? $user->admin_compact_mode : variable_get('admin_compact_mode', FALSE);}/** * Generate a list of tasks offered by a specified module. * * @param $module *   Module name. * @return *   An array of task links. */function system_get_module_admin_tasks($module) {  static $items;  $admin_access = user_access('administer permissions');  $admin_tasks = array();  if (!isset($items)) {    $result = db_query("       SELECT m.load_functions, m.to_arg_functions, m.access_callback, m.access_arguments, m.page_callback, m.page_arguments, m.title, m.title_callback, m.title_arguments, m.type, ml.*       FROM {menu_links} ml INNER JOIN {menu_router} m ON ml.router_path = m.path WHERE ml.link_path LIKE 'admin/%' AND hidden >= 0 AND module = 'system' AND m.number_parts > 2");    $items = array();    while ($item = db_fetch_array($result)) {      _menu_link_translate($item);      if ($item['access']) {        $items[$item['router_path']] = $item;      }    }  }  $admin_tasks = array();  $admin_task_count = 0;  // Check for permissions.  if (module_hook($module, 'perm') && $admin_access) {    $admin_tasks[-1] = l(t('Configure permissions'), 'admin/user/permissions', array('fragment' => 'module-'. $module));  }  // Check for menu items that are admin links.  if ($menu = module_invoke($module, 'menu')) {    foreach (array_keys($menu) as $path) {      if (isset($items[$path])) {        $admin_tasks[$items[$path]['title'] . $admin_task_count ++] = l($items[$path]['title'], $path);      }    }  }  return $admin_tasks;}/** * Implementation of hook_cron(). * * Remove older rows from flood and batch table. Remove old temporary files. */function system_cron() {  // Cleanup the flood.  db_query('DELETE FROM {flood} WHERE timestamp < %d', time() - 3600);  // Cleanup the batch table.  db_query('DELETE FROM {batch} WHERE timestamp < %d', time() - 864000);  // Remove temporary files that are older than DRUPAL_MAXIMUM_TEMP_FILE_AGE.  $result = db_query('SELECT * FROM {files} WHERE status = %d and timestamp < %d', FILE_STATUS_TEMPORARY, time() - DRUPAL_MAXIMUM_TEMP_FILE_AGE);  while ($file = db_fetch_object($result)) {    if (file_exists($file->filepath)) {      // If files that exist cannot be deleted, continue so the database remains      // consistent.      if (!file_delete($file->filepath)) {        watchdog('file system', 'Could not delete temporary file "%path" during garbage collection', array('%path' => $file->filepath), 'error');        continue;      }    }    db_query('DELETE FROM {files} WHERE fid = %d', $file->fid);  }  $core = array('cache', 'cache_block', 'cache_filter', 'cache_page', 'cache_form', 'cache_menu');  $cache_tables = array_merge(module_invoke_all('flush_caches'), $core);  foreach ($cache_tables as $table) {    cache_clear_all(NULL, $table);  }}/** * Implementation of hook_hook_info(). */function system_hook_info() {  return array(    'system' => array(      'cron' => array(        'run' => array(          'runs when' => t('When cron runs'),        ),      ),    ),  );}/** * Implementation of hook_action_info(). */function system_action_info() {  return array(    'system_message_action' => array(      'type' => 'system',      'description' => t('Display a message to the user'),      'configurable' => TRUE,      'hooks' => array(        'nodeapi' => array('view', 'insert', 'update', 'delete'),        'comment' => array('view', 'insert', 'update', 'delete'),        'user' => array('view', 'insert', 'update', 'delete', 'login'),        'taxonomy' => array('insert', 'update', 'delete'),      ),    ),    'system_send_email_action' => array(      'description' => t('Send e-mail'),      'type' => 'system',      'configurable' => TRUE,      'hooks' => array(        'nodeapi' => array('view', 'insert', 'update', 'delete'),        'comment' => array('view', 'insert', 'update', 'delete'),        'user' => array('view', 'insert', 'update', 'delete', 'login'),        'taxonomy' => array('insert', 'update', 'delete'),      )    ),    'system_goto_action' => array(      'description' => t('Redirect to URL'),      'type' => 'system',      'configurable' => TRUE,      'hooks' => array(        'nodeapi' => array('view', 'insert', 'update', 'delete'),        'comment' => array('view', 'insert', 'update', 'delete'),        'user' => array('view', 'insert', 'update', 'delete', 'login'),      )    )  );}/** * Menu callback. Display an overview of available and configured actions. */function system_actions_manage() {  $output = '';  $actions = actions_list();  actions_synchronize($actions);  $actions_map = actions_actions_map($actions);  $options = array(t('Choose an advanced action'));  $unconfigurable = array();  foreach ($actions_map as $key => $array) {    if ($array['configurable']) {      $options[$key] = $array['description'] .'...';    }    else {      $unconfigurable[] = $array;    }  }  $row = array();  $instances_present = db_fetch_object(db_query("SELECT aid FROM {actions} WHERE parameters <> ''"));  $header = array(    array('data' => t('Action type'), 'field' => 'type'),    array('data' => t('Description'), 'field' => 'description'),    array('data' => $instances_present ? t('Operations') : '', 'colspan' => '2')  );  $sql = 'SELECT * FROM {actions}';  $result = pager_query($sql . tablesort_sql($header), 50);  while ($action = db_fetch_object($result)) {    $row[] = array(      array('data' => $action->type),      array('data' => $action->description),      array('data' => $action->parameters ? l(t('configure'), "admin/settings/actions/configure/$action->aid") : ''),      array('data' => $action->parameters ? l(t('delete'), "admin/settings/actions/delete/$action->aid") : '')    );  }  if ($row) {    $pager = theme('pager', NULL, 50, 0);    if (!empty($pager)) {      $row[] = array(array('data' => $pager, 'colspan' => '3'));    }    $output .= '<h3>'. t('Actions available to Drupal:') .'</h3>';    $output .= theme('table', $header, $row);  }  if ($actions_map) {    $output .= drupal_get_form('system_actions_manage_form', $options);  }  return $output;}/** * Define the form for the actions overview page. * * @see system_actions_manage_form_submit() * @ingroup forms * @param $form_state *   An associative array containing the current state of the form; not used. * @param $options *   An array of configurable actions. * @return *   Form definition. */function system_actions_manage_form($form_state, $options = array()) {  $form['parent'] = array(    '#type' => 'fieldset',    '#title' => t('Make a new advanced action available'),    '#prefix' => '<div class="container-inline">',    '#suffix' => '</div>',  );  $form['parent']['action'] = array(    '#type' => 'select',    '#default_value' => '',    '#options' => $options,    '#description' => '',  );  $form['parent']['buttons']['submit'] = array(    '#type' => 'submit',    '#value' => t('Create'),  );  return $form;}/** * Process system_actions_manage form submissions. */function system_actions_manage_form_submit($form, &$form_state) {  if ($form_state['values']['action']) {    $form_state['redirect'] = 'admin/settings/actions/configure/'. $form_state['values']['action'];  }}/** * Menu callback. Create the form for configuration of a single action. * * We provide the "Description" field. The rest of the form * is provided by the action. We then provide the Save button. * Because we are combining unknown form elements with the action * configuration form, we use actions_ prefix on our elements. * * @see system_actions_configure_validate() * @see system_actions_configure_submit() * @param $action *   md5 hash of action ID or an integer. If it's an md5 hash, we *   are creating a new instance. If it's an integer, we're editing *   an existing instance. * @return *   Form definition. */function system_actions_configure($form_state, $action = NULL) {  if ($action === NULL) {    drupal_goto('admin/settings/actions');  }  $actions_map = actions_actions_map(actions_list());  $edit = array();  // Numeric action denotes saved instance of a configurable action;  // else we are creating a new action instance.  if (is_numeric($action)) {    $aid = $action;    // Load stored parameter values from database.    $data = db_fetch_object(db_query("SELECT * FROM {actions} WHERE aid = '%s'", $aid));    $edit['actions_description'] = $data->description;    $edit['actions_type'] = $data->type;    $function = $data->callback;    $action = md5($data->callback);    $params = unserialize($data->parameters);    if ($params) {      foreach ($params as $name => $val) {        $edit[$name] = $val;      }    }  }  else {    $function = $actions_map[$action]['callback'];    $edit['actions_description'] = $actions_map[$action]['description'];    $edit['actions_type'] = $actions_map[$action]['type'];  }  $form['actions_description'] = array(    '#type' => 'textfield',    '#title' => t('Description'),    '#default_value' => $edit['actions_description'],    '#maxlength' => '255',    '#description' => t('A unique description for this advanced action. This description will be displayed in the interface of modules that integrate with actions, such as Trigger module.'),    '#weight' => -10  );  $action_form = $function .'_form';  $form = array_merge($form, $action_form($edit));  $form['actions_type'] = array(    '#type' => 'value',    '#value' => $edit['actions_type'],  );  $form['actions_action'] = array(    '#type' => 'hidden',    '#value' => $action,  );  // $aid is set when configuring an existing action instance.  if (isset($aid)) {    $form['actions_aid'] = array(      '#type' => 'hidden',      '#value' => $aid,    );  }  $form['actions_configured'] = array(    '#type' => 'hidden',    '#value' => '1',  );  $form['buttons']['submit'] = array(    '#type' => 'submit',    '#value' => t('Save'),    '#weight' => 13  );  return $form;}/** * Validate system_actions_configure form submissions. */function system_actions_configure_validate($form, $form_state) {  $function = actions_function_lookup($form_state['values']['actions_action']) .'_validate';  // Hand off validation to the action.  if (function_exists($function)) {    $function($form, $form_state);  }}/** * Process system_actions_configure form submissions. */function system_actions_configure_submit($form, &$form_state) {  $function = actions_function_lookup($form_state['values']['actions_action']);  $submit_function = $function .'_submit';  // Action will return keyed array of values to store.  $params = $submit_function($form, $form_state);  $aid = isset($form_state['values']['actions_aid']) ? $form_state['values']['actions_aid'] : NULL;  actions_save($function, $form_state['values']['actions_type'], $params, $form_state['values']['actions_description'], $aid);  drupal_set_message(t('The action has been successfully saved.'));  $form_state['redirect'] = 'admin/settings/actions/manage';}/** * Create the form for confirmation of deleting an action. * * @ingroup forms * @see system_actions_delete_form_submit() */function system_actions_delete_form($form_state, $action) {  $form['aid'] = array(    '#type' => 'hidden',    '#value' => $action->aid,  );  return confirm_form($form,    t('Are you sure you want to delete the action %action?', array('%action' => $action->description)),    'admin/settings/actions/manage',    t('This cannot be undone.'),    t('Delete'), t('Cancel')  );}/** * Process system_actions_delete form submissions. * * Post-deletion operations for action deletion. */function system_actions_delete_form_submit($form, &$form_state) {  $aid = $form_state['values']['aid'];  $action = actions_load($aid);  actions_delete($aid);  $description = check_plain($action->description);  watchdog('user', 'Deleted action %aid (%action)', array('%aid' => $aid, '%action' => $description));  drupal_set_message(t('Action %action was deleted', array('%action' => $description)));  $form_state['redirect'] = 'admin/settings/actions/manage';}/** * Post-deletion operations for deleting action orphans. * * @param $orphaned *   An array of orphaned actions. */function system_action_delete_orphans_post($orphaned) {  foreach ($orphaned as $callback) {    drupal_set_message(t("Deleted orphaned action (%action).", array('%action' => $callback)));  }}/** * Remove actions that are in the database but not supported by any enabled module. */function system_actions_remove_orphans() {  actions_synchronize(actions_list(), TRUE);  drupal_goto('admin/settings/actions/manage');}/** * Return a form definition so the Send email action can be configured. * * @see system_send_email_action_validate() * @see system_send_email_action_submit() * @param $context *   Default values (if we are editing an existing action instance). * @return *   Form definition. */function system_send_email_action_form($context) {  // Set default values for form.  if (!isset($context['recipient'])) {    $context['recipient'] = '';  }  if (!isset($context['subject'])) {    $context['subject'] = '';  }  if (!isset($context['message'])) {    $context['message'] = '';  }  $form['recipient'] = array(    '#type' => 'textfield',    '#title' => t('Recipient'),    '#default_value' => $context['recipient'],    '#maxlength' => '254',    '#description' => t('The email address to which the message should be sent OR enter %author if you would like to send an e-mail to the author of the original post.', array('%author' => '%author')),  );  $form['subject'] = array(    '#type' => 'textfield',    '#title' => t('Subject'),    '#default_value' => $context['subject'],    '#maxlength' => '254',    '#description' => t('The subject of the message.'),  );  $form['message'] = array(    '#type' => 'textarea',    '#title' => t('Message'),    '#default_value' => $context['message'],    '#cols' => '80',    '#rows' => '20',    '#description' => t('The message that should be sent. You may include the following variables: %site_name, %username, %node_url, %node_type, %title, %teaser, %body. Not all variables will be available in all contexts.'),  );  return $form;}/** * Validate system_send_email_action form submissions. */function system_send_email_action_validate($form, $form_state) {  $form_values = $form_state['values'];  // Validate the configuration form.  if (!valid_email_address($form_values['recipient']) && $form_values['recipient'] != '%author') {    // We want the literal %author placeholder to be emphasized in the error message.    form_set_error('recipient', t('Please enter a valid email address or %author.', array('%author' => '%author')));  }}/** * Process system_send_email_action form submissions. */function system_send_email_action_submit($form, $form_state) {  $form_values = $form_state['values'];  // Process the HTML form to store configuration. The keyed array that  // we return will be serialized to the database.  $params = array(    'recipient' => $form_values['recipient'],    'subject'   => $form_values['subject'],    'message'   => $form_values['message'],  );  return $params;}/** * Implementation of a configurable Drupal action. Sends an email. */function system_send_email_action($object, $context) {  global $user;  switch ($context['hook']) {    case 'nodeapi':      // Because this is not an action of type 'node' the node      // will not be passed as $object, but it will still be available      // in $context.      $node = $context['node'];      break;    // The comment hook provides nid, in $context.    case 'comment':      $comment = $context['comment'];      $node = node_load($comment->nid);      break;    case 'user':      // Because this is not an action of type 'user' the user      // object is not passed as $object, but it will still be available      // in $context.      $account = $context['account'];      if (isset($context['node'])) {        $node = $context['node'];      }      elseif ($context['recipient'] == '%author') {        // If we don't have a node, we don't have a node author.        watchdog('error', 'Cannot use %author token in this context.');        return;      }      break;    default:      // We are being called directly.      $node = $object;  }  $recipient = $context['recipient'];  if (isset($node)) {    if (!isset($account)) {      $account = user_load(array('uid' => $node->uid));    }    if ($recipient == '%author') {      $recipient = $account->mail;    }  }  if (!isset($account)) {    $account = $user;  }  $language = user_preferred_language($account);  $params = array('account' => $account, 'object' => $object, 'context' => $context);  if (isset($node)) {    $params['node'] = $node;  }  if (drupal_mail('system', 'action_send_email', $recipient, $language, $params)) {    watchdog('action', 'Sent email to %recipient', array('%recipient' => $recipient));  }  else {    watchdog('error', 'Unable to send email to %recipient', array('%recipient' => $recipient));  }}/** * Implementation of hook_mail(). */function system_mail($key, &$message, $params) {  $account = $params['account'];  $context = $params['context'];  $variables = array(    '%site_name' => variable_get('site_name', 'Drupal'),    '%username' => $account->name,  );  if ($context['hook'] == 'taxonomy') {    $object = $params['object'];    $vocabulary = taxonomy_vocabulary_load($object->vid);    $variables += array(      '%term_name' => $object->name,      '%term_description' => $object->description,      '%term_id' => $object->tid,      '%vocabulary_name' => $vocabulary->name,      '%vocabulary_description' => $vocabulary->description,      '%vocabulary_id' => $vocabulary->vid,    );  }  // Node-based variable translation is only available if we have a node.  if (isset($params['node'])) {    $node = $params['node'];    $variables += array(      '%uid' => $node->uid,      '%node_url' => url('node/'. $node->nid, array('absolute' => TRUE)),      '%node_type' => node_get_types('name', $node),      '%title' => $node->title,      '%teaser' => $node->teaser,      '%body' => $node->body,    );  }  $subject = strtr($context['subject'], $variables);  $body = strtr($context['message'], $variables);  $message['subject'] .= str_replace(array("\r", "\n"), '', $subject);  $message['body'][] = drupal_html_to_text($body);}function system_message_action_form($context) {  $form['message'] = array(    '#type' => 'textarea',    '#title' => t('Message'),    '#default_value' => isset($context['message']) ? $context['message'] : '',    '#required' => TRUE,    '#rows' => '8',    '#description' => t('The message to be displayed to the current user. You may include the following variables: %site_name, %username, %node_url, %node_type, %title, %teaser, %body. Not all variables will be available in all contexts.'),  );  return $form;}function system_message_action_submit($form, $form_state) {  return array('message' => $form_state['values']['message']);}/** * A configurable Drupal action. Sends a message to the current user's screen. */function system_message_action(&$object, $context = array()) {  global $user;  $variables = array(    '%site_name' => variable_get('site_name', 'Drupal'),    '%username' => $user->name ? $user->name : variable_get('anonymous', t('Anonymous')),  );  // This action can be called in any context, but if placeholders  // are used a node object must be present to be the source  // of substituted text.  switch ($context['hook']) {    case 'nodeapi':      // Because this is not an action of type 'node' the node      // will not be passed as $object, but it will still be available      // in $context.      $node = $context['node'];      break;    // The comment hook also provides the node, in context.    case 'comment':      $comment = $context['comment'];      $node = node_load($comment->nid);      break;    case 'taxonomy':      $vocabulary = taxonomy_vocabulary_load($object->vid);      $variables = array_merge($variables, array(        '%term_name' => $object->name,        '%term_description' => $object->description,        '%term_id' => $object->tid,        '%vocabulary_name' => $vocabulary->name,        '%vocabulary_description' => $vocabulary->description,        '%vocabulary_id' => $vocabulary->vid,        )      );      break;    default:      // We are being called directly.      $node = $object;  }  if (isset($node) && is_object($node)) {    $variables = array_merge($variables, array(      '%uid' => $node->uid,      '%node_url' => url('node/'. $node->nid, array('absolute' => TRUE)),      '%node_type' => check_plain(node_get_types('name', $node)),      '%title' => filter_xss($node->title),      '%teaser' => filter_xss($node->teaser),      '%body' => filter_xss($node->body),      )    );  }  $context['message'] = strtr($context['message'], $variables);  drupal_set_message($context['message']);}/** * Implementation of a configurable Drupal action. Redirect user to a URL. */function system_goto_action_form($context) {  $form['url'] = array(    '#type' => 'textfield',    '#title' => t('URL'),    '#description' => t('The URL to which the user should be redirected. This can be an internal URL like node/1234 or an external URL like http://drupal.org.'),    '#default_value' => isset($context['url']) ? $context['url'] : '',    '#required' => TRUE,  );  return $form;}function system_goto_action_submit($form, $form_state) {  return array(    'url' => $form_state['values']['url']  );}function system_goto_action($object, $context) {  drupal_goto($context['url']);}/** * Generate an array of time zones and their local time&date. */function _system_zonelist() {  $timestamp = time();  $zonelist = array(-11, -10, -9.5, -9, -8, -7, -6, -5, -4.5, -4, -3.5, -3, -2.5, -2, -1, 0, 1, 2, 3, 3.5, 4, 5, 5.5, 5.75, 6, 6.5, 7, 8, 9, 9.5, 10, 10.5, 11, 11.5, 12, 12.75, 13, 14);  $zones = array();  foreach ($zonelist as $offset) {    $zone = $offset * 3600;    $zones[$zone] = format_date($timestamp, 'custom', variable_get('date_format_long', 'l, F j, Y - H:i') .' O', $zone);  }  return $zones;}/** * Checks whether the server is capable of issuing HTTP requests. * * The function sets the drupal_http_request_fail system variable to TRUE if * drupal_http_request() does not work and then the system status report page * will contain an error. * * @return *  TRUE if this installation can issue HTTP requests. */function system_check_http_request() {  // Try to get the content of the front page via drupal_http_request().  $result = drupal_http_request(url('', array('absolute' => TRUE)));  // We only care that we get a http response - this means that Drupal  // can make a http request.  $works = isset($result->code) && ($result->code >= 100) && ($result->code < 600);  variable_set('drupal_http_request_fails', !$works);  return $works;}/** * Format the Powered by Drupal text. * * @ingroup themeable */function theme_system_powered_by($image_path) {  $image = theme('image', $image_path, t('Powered by Drupal, an open source content management system'), t('Powered by Drupal, an open source content management system'));  return l($image, 'http://drupal.org', array('html' => TRUE, 'absolute' => TRUE, 'external' => TRUE));}
<?php// $Id$/** * @file comment.tpl.php * Default theme implementation for comments. * * Available variables: * - $author: Comment author. Can be link or plain text. * - $content: Body of the post. * - $date: Date and time of posting. * - $links: Various operational links. * - $new: New comment marker. * - $picture: Authors picture. * - $signature: Authors signature. * - $status: Comment status. Possible values are: *   comment-unpublished, comment-published or comment-preview. * - $submitted: By line with date and time. * - $title: Linked title. * * These two variables are provided for context. * - $comment: Full comment object. * - $node: Node object the comments are attached to. * * @see template_preprocess_comment() * @see theme_comment() */?><div class="comment<?php print ($comment->new) ? ' comment-new' : ''; print ' '. $status ?> clear-block">  <?php print $picture ?>  <?php if ($comment->new): ?>    <span class="new"><?php print $new ?></span>  <?php endif; ?>  <h3><?php print $title ?></h3>  <div class="submitted">    <?php print $submitted ?>  </div>  <div class="content">    <?php print $content ?>    <?php if ($signature): ?>    <div class="user-signature clear-block">      <?php print $signature ?>    </div>    <?php endif; ?>  </div>  <?php print $links ?></div>
<?php// $Id$?><div id="node-<?php print $node->nid; ?>" class="node<?php if ($sticky) { print ' sticky'; } ?><?php if (!$status) { print ' node-unpublished'; } ?>"><?php print $picture ?><?php if ($page == 0): ?>  <h2><a href="<?php print $node_url ?>" title="<?php print $title ?>"><?php print $title ?></a></h2><?php endif; ?>  <?php if ($submitted): ?>    <span class="submitted"><?php print $submitted; ?></span>  <?php endif; ?>  <div class="content clear-block">    <?php print $content ?>  </div>  <div class="clear-block">    <div class="meta">    <?php if ($taxonomy): ?>      <div class="terms"><?php print $terms ?></div>    <?php endif;?>    </div>    <?php if ($links): ?>      <div class="links"><?php print $links; ?></div>    <?php endif; ?>  </div></div>
<?php// $Id$/** * @file * API for loading and interacting with Drupal modules. *//** * Load all the modules that have been enabled in the system table. */function module_load_all() {  foreach (module_list(TRUE, FALSE) as $module) {    drupal_load('module', $module);  }}/** * Call a function repeatedly with each module in turn as an argument. */function module_iterate($function, $argument = '') {  foreach (module_list() as $name) {    $function($name, $argument);  }}/** * Collect a list of all loaded modules. During the bootstrap, return only * vital modules. See bootstrap.inc * * @param $refresh *   Whether to force the module list to be regenerated (such as after the *   administrator has changed the system settings). * @param $bootstrap *   Whether to return the reduced set of modules loaded in "bootstrap mode" *   for cached pages. See bootstrap.inc. * @param $sort *   By default, modules are ordered by weight and filename, settings this option *   to TRUE, module list will be ordered by module name. * @param $fixed_list *   (Optional) Override the module list with the given modules. Stays until the *   next call with $refresh = TRUE. * @return *   An associative array whose keys and values are the names of all loaded *   modules. */function module_list($refresh = FALSE, $bootstrap = TRUE, $sort = FALSE, $fixed_list = NULL) {  static $list, $sorted_list;  if ($refresh || $fixed_list) {    $list = array();    $sorted_list = NULL;    if ($fixed_list) {      foreach ($fixed_list as $name => $module) {        drupal_get_filename('module', $name, $module['filename']);        $list[$name] = $name;      }    }    else {      if ($bootstrap) {        $result = db_query("SELECT name, filename, throttle FROM {system} WHERE type = 'module' AND status = 1 AND bootstrap = 1 ORDER BY weight ASC, filename ASC");      }      else {        $result = db_query("SELECT name, filename, throttle FROM {system} WHERE type = 'module' AND status = 1 ORDER BY weight ASC, filename ASC");      }      while ($module = db_fetch_object($result)) {        if (file_exists($module->filename)) {          // Determine the current throttle status and see if the module should be          // loaded based on server load. We have to directly access the throttle          // variables, since throttle.module may not be loaded yet.          $throttle = ($module->throttle && variable_get('throttle_level', 0) > 0);          if (!$throttle) {            drupal_get_filename('module', $module->name, $module->filename);            $list[$module->name] = $module->name;          }        }      }    }  }  if ($sort) {    if (!isset($sorted_list)) {      $sorted_list = $list;      ksort($sorted_list);    }    return $sorted_list;  }  return $list;}/** * Rebuild the database cache of module files. * * @return *   The array of filesystem objects used to rebuild the cache. */function module_rebuild_cache() {  // Get current list of modules  $files = drupal_system_listing('\.module$', 'modules', 'name', 0);  // Extract current files from database.  system_get_files_database($files, 'module');  ksort($files);  // Set defaults for module info  $defaults = array(    'dependencies' => array(),    'dependents' => array(),    'description' => '',    'version' => NULL,    'php' => DRUPAL_MINIMUM_PHP,  );  foreach ($files as $filename => $file) {    // Look for the info file.    $file->info = drupal_parse_info_file(dirname($file->filename) .'/'. $file->name .'.info');    // Skip modules that don't provide info.    if (empty($file->info)) {      unset($files[$filename]);      continue;    }    // Merge in defaults and save.    $files[$filename]->info = $file->info + $defaults;    // Invoke hook_system_info_alter() to give installed modules a chance to    // modify the data in the .info files if necessary.    drupal_alter('system_info', $files[$filename]->info, $files[$filename]);    // Log the critical hooks implemented by this module.    $bootstrap = 0;    foreach (bootstrap_hooks() as $hook) {      if (module_hook($file->name, $hook)) {        $bootstrap = 1;        break;      }    }    // Update the contents of the system table:    if (isset($file->status) || (isset($file->old_filename) && $file->old_filename != $file->filename)) {      db_query("UPDATE {system} SET info = '%s', name = '%s', filename = '%s', bootstrap = %d WHERE filename = '%s'", serialize($files[$filename]->info), $file->name, $file->filename, $bootstrap, $file->old_filename);    }    else {      // This is a new module.      $files[$filename]->status = 0;      $files[$filename]->throttle = 0;      db_query("INSERT INTO {system} (name, info, type, filename, status, throttle, bootstrap) VALUES ('%s', '%s', '%s', '%s', %d, %d, %d)", $file->name, serialize($files[$filename]->info), 'module', $file->filename, 0, 0, $bootstrap);    }  }  $files = _module_build_dependencies($files);  return $files;}/** * Find dependencies any level deep and fill in dependents information too. * * If module A depends on B which in turn depends on C then this function will * add C to the list of modules A depends on. This will be repeated until * module A has a list of all modules it depends on. If it depends on itself, * called a circular dependency, that's marked by adding a nonexistent module, * called -circular- to this list of modules. Because this does not exist, * it'll be impossible to switch module A on. * * Also we fill in a dependents array in $file->info. Using the names above, * the dependents array of module B lists A. * * @param $files *   The array of filesystem objects used to rebuild the cache. * @return *   The same array with dependencies and dependents added where applicable. */function _module_build_dependencies($files) {  do {    $new_dependency = FALSE;    foreach ($files as $filename => $file) {      // We will modify this object (module A, see doxygen for module A, B, C).      $file = &$files[$filename];      if (isset($file->info['dependencies']) && is_array($file->info['dependencies'])) {        foreach ($file->info['dependencies'] as $dependency_name) {          // This is a nonexistent module.          if ($dependency_name == '-circular-' || !isset($files[$dependency_name])) {            continue;          }          // $dependency_name is module B (again, see doxygen).          $files[$dependency_name]->info['dependents'][$filename] = $filename;          $dependency = $files[$dependency_name];          if (isset($dependency->info['dependencies']) && is_array($dependency->info['dependencies'])) {            // Let's find possible C modules.            foreach ($dependency->info['dependencies'] as $candidate) {              if (array_search($candidate, $file->info['dependencies']) === FALSE) {                // Is this a circular dependency?                if ($candidate == $filename) {                  // As a module name can not contain dashes, this makes                  // impossible to switch on the module.                  $candidate = '-circular-';                  // Do not display the message or add -circular- more than once.                  if (array_search($candidate, $file->info['dependencies']) !== FALSE) {                    continue;                  }                  drupal_set_message(t('%module is part of a circular dependency. This is not supported and you will not be able to switch it on.', array('%module' => $file->info['name'])), 'error');                }                else {                  // We added a new dependency to module A. The next loop will                  // be able to use this as "B module" thus finding even                  // deeper dependencies.                  $new_dependency = TRUE;                }                $file->info['dependencies'][] = $candidate;              }            }          }        }      }      // Don't forget to break the reference.      unset($file);    }  } while ($new_dependency);  return $files;}/** * Determine whether a given module exists. * * @param $module *   The name of the module (without the .module extension). * @return *   TRUE if the module is both installed and enabled. */function module_exists($module) {  $list = module_list();  return array_key_exists($module, $list);}/** * Load a module's installation hooks. */function module_load_install($module) {  // Make sure the installation API is available  include_once './includes/install.inc';  module_load_include('install', $module);}/** * Load a module include file. *  * Examples: * @code *   // Load node.admin.inc from the node module. *   module_load_include('inc', 'node', 'node.admin'); *   // Load content_types.inc from the node module. *   module_load_include('inc', 'node', 'content_types');   * @endcode *  * Do not use this function to load an install file. Use module_load_install() * instead. * * @param $type *   The include file's type (file extension). * @param $module *   The module to which the include file belongs. * @param $name *   Optionally, specify the base file name (without the $type extension).  *   If not set, $module is used. */function module_load_include($type, $module, $name = NULL) {  if (empty($name)) {    $name = $module;  }  $file = './'. drupal_get_path('module', $module) ."/$name.$type";  if (is_file($file)) {    require_once $file;  }  else {    return FALSE;  }}/** * Load an include file for each of the modules that have been enabled in * the system table. */function module_load_all_includes($type, $name = NULL) {  $modules = module_list();  foreach ($modules as $module) {    module_load_include($type, $module, $name);  }}/** * Enable a given list of modules. * * @param $module_list *   An array of module names. */function module_enable($module_list) {  $invoke_modules = array();  foreach ($module_list as $module) {    $existing = db_fetch_object(db_query("SELECT status FROM {system} WHERE type = '%s' AND name = '%s'", 'module', $module));    if ($existing->status == 0) {      module_load_install($module);      db_query("UPDATE {system} SET status = %d, throttle = %d WHERE type = '%s' AND name = '%s'", 1, 0, 'module', $module);      drupal_load('module', $module);      $invoke_modules[] = $module;    }  }  if (!empty($invoke_modules)) {    // Refresh the module list to include the new enabled module.    module_list(TRUE, FALSE);    // Force to regenerate the stored list of hook implementations.    module_implements('', FALSE, TRUE);  }  foreach ($invoke_modules as $module) {    module_invoke($module, 'enable');    // Check if node_access table needs rebuilding.    // We check for the existence of node_access_needs_rebuild() since    // at install time, module_enable() could be called while node.module    // is not enabled yet.    if (function_exists('node_access_needs_rebuild') && !node_access_needs_rebuild() && module_hook($module, 'node_grants')) {      node_access_needs_rebuild(TRUE);    }  }}/** * Disable a given set of modules. * * @param $module_list *   An array of module names. */function module_disable($module_list) {  $invoke_modules = array();  foreach ($module_list as $module) {    if (module_exists($module)) {      // Check if node_access table needs rebuilding.      if (!node_access_needs_rebuild() && module_hook($module, 'node_grants')) {        node_access_needs_rebuild(TRUE);      }      module_load_install($module);      module_invoke($module, 'disable');      db_query("UPDATE {system} SET status = %d, throttle = %d WHERE type = '%s' AND name = '%s'", 0, 0, 'module', $module);      $invoke_modules[] = $module;    }  }  if (!empty($invoke_modules)) {    // Refresh the module list to exclude the disabled modules.    module_list(TRUE, FALSE);    // Force to regenerate the stored list of hook implementations.    module_implements('', FALSE, TRUE);  }  // If there remains no more node_access module, rebuilding will be  // straightforward, we can do it right now.  if (node_access_needs_rebuild() && count(module_implements('node_grants')) == 0) {    node_access_rebuild();  }}/** * @defgroup hooks Hooks * @{ * Allow modules to interact with the Drupal core. * * Drupal's module system is based on the concept of "hooks". A hook is a PHP * function that is named foo_bar(), where "foo" is the name of the module * (whose filename is thus foo.module) and "bar" is the name of the hook. Each * hook has a defined set of parameters and a specified result type. * * To extend Drupal, a module need simply implement a hook. When Drupal wishes * to allow intervention from modules, it determines which modules implement a * hook and calls that hook in all enabled modules that implement it. * * The available hooks to implement are explained here in the Hooks section of * the developer documentation. The string "hook" is used as a placeholder for * the module name in the hook definitions. For example, if the module file is * called example.module, then hook_help() as implemented by that module would * be defined as example_help(). *//** * Determine whether a module implements a hook. * * @param $module *   The name of the module (without the .module extension). * @param $hook *   The name of the hook (e.g. "help" or "menu"). * @return *   TRUE if the module is both installed and enabled, and the hook is *   implemented in that module. */function module_hook($module, $hook) {  return function_exists($module .'_'. $hook);}/** * Determine which modules are implementing a hook. * * @param $hook *   The name of the hook (e.g. "help" or "menu"). * @param $sort *   By default, modules are ordered by weight and filename, settings this option *   to TRUE, module list will be ordered by module name. * @param $refresh *   For internal use only: Whether to force the stored list of hook *   implementations to be regenerated (such as after enabling a new module, *   before processing hook_enable). * @return *   An array with the names of the modules which are implementing this hook. */function module_implements($hook, $sort = FALSE, $refresh = FALSE) {  static $implementations;  if ($refresh) {    $implementations = array();    return;  }  if (!isset($implementations[$hook])) {    $implementations[$hook] = array();    $list = module_list(FALSE, TRUE, $sort);    foreach ($list as $module) {      if (module_hook($module, $hook)) {        $implementations[$hook][] = $module;      }    }  }  // The explicit cast forces a copy to be made. This is needed because  // $implementations[$hook] is only a reference to an element of  // $implementations and if there are nested foreaches (due to nested node  // API calls, for example), they would both manipulate the same array's  // references, which causes some modules' hooks not to be called.  // See also http://www.zend.com/zend/art/ref-count.php.  return (array)$implementations[$hook];}/** * Invoke a hook in a particular module. * * @param $module *   The name of the module (without the .module extension). * @param $hook *   The name of the hook to invoke. * @param ... *   Arguments to pass to the hook implementation. * @return *   The return value of the hook implementation. */function module_invoke() {  $args = func_get_args();  $module = $args[0];  $hook = $args[1];  unset($args[0], $args[1]);  $function = $module .'_'. $hook;  if (module_hook($module, $hook)) {    return call_user_func_array($function, $args);  }}/** * Invoke a hook in all enabled modules that implement it. * * @param $hook *   The name of the hook to invoke. * @param ... *   Arguments to pass to the hook. * @return *   An array of return values of the hook implementations. If modules return *   arrays from their implementations, those are merged into one array. */function module_invoke_all() {  $args = func_get_args();  $hook = $args[0];  unset($args[0]);  $return = array();  foreach (module_implements($hook) as $module) {    $function = $module .'_'. $hook;    $result = call_user_func_array($function, $args);    if (isset($result) && is_array($result)) {      $return = array_merge_recursive($return, $result);    }    else if (isset($result)) {      $return[] = $result;    }  }  return $return;}/** * @} End of "defgroup hooks". *//** * Array of modules required by core. */function drupal_required_modules() {  return array('block', 'filter', 'node', 'system', 'user');}
<?php// $Id$/** * @file * Page callbacks for adding, editing, deleting, and revisions management for content. *//** * Menu callback; presents the node editing form, or redirects to delete confirmation. */function node_page_edit($node) {  drupal_set_title(check_plain($node->title));  return drupal_get_form($node->type .'_node_form', $node);}function node_add_page() {  $item = menu_get_item();  $content = system_admin_menu_block($item);  return theme('node_add_list', $content);}/** * Display the list of available node types for node creation. * * @ingroup themeable */function theme_node_add_list($content) {  $output = '';  if ($content) {    $output = '<dl class="node-type-list">';    foreach ($content as $item) {      $output .= '<dt>'. l($item['title'], $item['href'], $item['localized_options']) .'</dt>';            $output .= '<dd>'. filter_xss_admin($item['description']) .'</dd>';    }    $output .= '</dl>';  }  return $output;}/** * Present a node submission form or a set of links to such forms. */function node_add($type) {  global $user;  $types = node_get_types();  $type = isset($type) ? str_replace('-', '_', $type) : NULL;  // If a node type has been specified, validate its existence.  if (isset($types[$type]) && node_access('create', $type)) {    // Initialize settings:    $node = array('uid' => $user->uid, 'name' => (isset($user->name) ? $user->name : ''), 'type' => $type, 'language' => '');    drupal_set_title(t('Create @name', array('@name' => $types[$type]->name)));    $output = drupal_get_form($type .'_node_form', $node);  }  return $output;}function node_form_validate($form, &$form_state) {  node_validate($form_state['values'], $form);}function node_object_prepare(&$node) {  // Set up default values, if required.  $node_options = variable_get('node_options_'. $node->type, array('status', 'promote'));  // If this is a new node, fill in the default values.  if (!isset($node->nid)) {    foreach (array('status', 'promote', 'sticky') as $key) {      $node->$key = in_array($key, $node_options);    }    global $user;    $node->uid = $user->uid;    $node->created = time();  }  else {    $node->date = format_date($node->created, 'custom', 'Y-m-d H:i:s O');    // Remove the log message from the original node object.    $node->log = NULL;  }  // Always use the default revision setting.  $node->revision = in_array('revision', $node_options);  node_invoke($node, 'prepare');  node_invoke_nodeapi($node, 'prepare');}/** * Generate the node add/edit form array. */function node_form(&$form_state, $node) {  global $user;  if (isset($form_state['node'])) {    $node = $form_state['node'] + (array)$node;  }  if (isset($form_state['node_preview'])) {    $form['#prefix'] = $form_state['node_preview'];  }  $node = (object)$node;  foreach (array('body', 'title', 'format') as $key) {    if (!isset($node->$key)) {      $node->$key = NULL;    }  }  if (!isset($form_state['node_preview'])) {    node_object_prepare($node);  }  else {    $node->build_mode = NODE_BUILD_PREVIEW;  }  // Set the id of the top-level form tag  $form['#id'] = 'node-form';  // Basic node information.  // These elements are just values so they are not even sent to the client.  foreach (array('nid', 'vid', 'uid', 'created', 'type', 'language') as $key) {    $form[$key] = array(      '#type' => 'value',      '#value' => isset($node->$key) ? $node->$key : NULL,    );  }  // Changed must be sent to the client, for later overwrite error checking.  $form['changed'] = array(    '#type' => 'hidden',    '#default_value' => isset($node->changed) ? $node->changed : NULL,  );  // Get the node-specific bits.  if ($extra = node_invoke($node, 'form', $form_state)) {    $form = array_merge_recursive($form, $extra);  }  if (!isset($form['title']['#weight'])) {    $form['title']['#weight'] = -5;  }  $form['#node'] = $node;  // Add a log field if the "Create new revision" option is checked, or if the  // current user has the ability to check that option.  if (!empty($node->revision) || user_access('administer nodes')) {    $form['revision_information'] = array(      '#type' => 'fieldset',      '#title' => t('Revision information'),      '#collapsible' => TRUE,      // Collapsed by default when "Create new revision" is unchecked      '#collapsed' => !$node->revision,      '#weight' => 20,    );    $form['revision_information']['revision'] = array(      '#access' => user_access('administer nodes'),      '#type' => 'checkbox',      '#title' => t('Create new revision'),      '#default_value' => $node->revision,    );    $form['revision_information']['log'] = array(      '#type' => 'textarea',      '#title' => t('Log message'),      '#default_value' => (isset($node->log) ? $node->log : ''),      '#rows' => 2,      '#description' => t('An explanation of the additions or updates being made to help other authors understand your motivations.'),    );  }  // Node author information for administrators  $form['author'] = array(    '#type' => 'fieldset',    '#access' => user_access('administer nodes'),    '#title' => t('Authoring information'),    '#collapsible' => TRUE,    '#collapsed' => TRUE,    '#weight' => 20,  );  $form['author']['name'] = array(    '#type' => 'textfield',    '#title' => t('Authored by'),    '#maxlength' => 60,    '#autocomplete_path' => 'user/autocomplete',    '#default_value' => $node->name ? $node->name : '',    '#weight' => -1,    '#description' => t('Leave blank for %anonymous.', array('%anonymous' => variable_get('anonymous', t('Anonymous')))),  );  $form['author']['date'] = array(    '#type' => 'textfield',    '#title' => t('Authored on'),    '#maxlength' => 25,    '#description' => t('Format: %time. Leave blank to use the time of form submission.', array('%time' => !empty($node->date) ? $node->date : format_date($node->created, 'custom', 'Y-m-d H:i:s O'))),  );  if (isset($node->date)) {    $form['author']['date']['#default_value'] = $node->date;  }  // Node options for administrators  $form['options'] = array(    '#type' => 'fieldset',    '#access' => user_access('administer nodes'),    '#title' => t('Publishing options'),    '#collapsible' => TRUE,    '#collapsed' => TRUE,    '#weight' => 25,  );  $form['options']['status'] = array(    '#type' => 'checkbox',    '#title' => t('Published'),    '#default_value' => $node->status,  );  $form['options']['promote'] = array(    '#type' => 'checkbox',    '#title' => t('Promoted to front page'),    '#default_value' => $node->promote,  );  $form['options']['sticky'] = array(    '#type' => 'checkbox',    '#title' => t('Sticky at top of lists'),    '#default_value' => $node->sticky,  );  // These values are used when the user has no administrator access.  foreach (array('uid', 'created') as $key) {    $form[$key] = array(      '#type' => 'value',      '#value' => $node->$key,    );  }  // Add the buttons.  $form['buttons'] = array();  $form['buttons']['submit'] = array(    '#type' => 'submit',    '#access' => !variable_get('node_preview', 0) || (!form_get_errors() && isset($form_state['node_preview'])),    '#value' => t('Save'),    '#weight' => 5,    '#submit' => array('node_form_submit'),  );  $form['buttons']['preview'] = array(    '#type' => 'submit',    '#value' => t('Preview'),    '#weight' => 10,    '#submit' => array('node_form_build_preview'),  );  if (!empty($node->nid) && node_access('delete', $node)) {    $form['buttons']['delete'] = array(      '#type' => 'submit',      '#value' => t('Delete'),      '#weight' => 15,      '#submit' => array('node_form_delete_submit'),    );  }  $form['#validate'][] = 'node_form_validate';  $form['#theme'] = array($node->type .'_node_form', 'node_form');  return $form;}/** * Return a node body field, with format and teaser. */function node_body_field(&$node, $label, $word_count) {  // Check if we need to restore the teaser at the beginning of the body.  $include = !isset($node->teaser) || ($node->teaser == substr($node->body, 0, strlen($node->teaser)));  $form = array(    '#after_build' => array('node_teaser_js', 'node_teaser_include_verify'));  $form['#prefix'] = '<div class="body-field-wrapper">';  $form['#suffix'] = '</div>';  $form['teaser_js'] = array(    '#type' => 'textarea',    '#rows' => 10,    '#teaser' => 'edit-body',    '#teaser_checkbox' => 'edit-teaser-include',    '#disabled' => TRUE,  );  $form['teaser_include'] = array(    '#type' => 'checkbox',    '#title' => t('Show summary in full view'),    '#default_value' => $include,    '#prefix' => '<div class="teaser-checkbox">',    '#suffix' => '</div>',  );  $form['body'] = array(    '#type' => 'textarea',    '#title' => check_plain($label),    '#default_value' => $include ? $node->body : ($node->teaser . $node->body),    '#rows' => 20,    '#required' => ($word_count > 0),  );  $form['format'] = filter_form($node->format);  return $form;}/** * Button sumit function: handle the 'Delete' button on the node form. */function node_form_delete_submit($form, &$form_state) {  $destination = '';  if (isset($_REQUEST['destination'])) {    $destination = drupal_get_destination();    unset($_REQUEST['destination']);  }  $node = $form['#node'];  $form_state['redirect'] = array('node/'. $node->nid .'/delete', $destination);}function node_form_build_preview($form, &$form_state) {  $node = node_form_submit_build_node($form, $form_state);  $form_state['node_preview'] = node_preview($node);}/** * Present a node submission form. * * @ingroup themeable */function theme_node_form($form) {  $output = "\n<div class=\"node-form\">\n";  // Admin form fields and submit buttons must be rendered first, because  // they need to go to the bottom of the form, and so should not be part of  // the catch-all call to drupal_render().  $admin = '';  if (isset($form['author'])) {    $admin .= "    <div class=\"authored\">\n";    $admin .= drupal_render($form['author']);    $admin .= "    </div>\n";  }  if (isset($form['options'])) {    $admin .= "    <div class=\"options\">\n";    $admin .= drupal_render($form['options']);    $admin .= "    </div>\n";  }  $buttons = drupal_render($form['buttons']);  // Everything else gets rendered here, and is displayed before the admin form  // field and the submit buttons.  $output .= "  <div class=\"standard\">\n";  $output .= drupal_render($form);  $output .= "  </div>\n";  if (!empty($admin)) {    $output .= "  <div class=\"admin\">\n";    $output .= $admin;    $output .= "  </div>\n";  }  $output .= $buttons;  $output .= "</div>\n";  return $output;}/** * Generate a node preview. */function node_preview($node) {  if (node_access('create', $node) || node_access('update', $node)) {    // Load the user's name when needed.    if (isset($node->name)) {      // The use of isset() is mandatory in the context of user IDs, because      // user ID 0 denotes the anonymous user.      if ($user = user_load(array('name' => $node->name))) {        $node->uid = $user->uid;        $node->picture = $user->picture;      }      else {        $node->uid = 0; // anonymous user      }    }    else if ($node->uid) {      $user = user_load(array('uid' => $node->uid));      $node->name = $user->name;      $node->picture = $user->picture;    }    $node->changed = time();    // Extract a teaser, if it hasn't been set (e.g. by a module-provided    // 'teaser' form item).    if (!isset($node->teaser)) {      $node->teaser = empty($node->body) ? '' : node_teaser($node->body, $node->format);      // Chop off the teaser from the body if needed.      if (!$node->teaser_include && $node->teaser == substr($node->body, 0, strlen($node->teaser))) {        $node->body = substr($node->body, strlen($node->teaser));      }    }    // Display a preview of the node.    // Previewing alters $node so it needs to be cloned.    if (!form_get_errors()) {      $cloned_node = drupal_clone($node);      $cloned_node->build_mode = NODE_BUILD_PREVIEW;      $output = theme('node_preview', $cloned_node);    }    drupal_set_title(t('Preview'));    return $output;  }}/** * Display a node preview for display during node creation and editing. * * @param $node *   The node object which is being previewed. * * @ingroup themeable */function theme_node_preview($node) {  $output = '<div class="preview">';  $preview_trimmed_version = FALSE;  // Do we need to preview trimmed version of post as well as full version?  if (isset($node->teaser) && isset($node->body)) {    $teaser = trim($node->teaser);    $body = trim(str_replace('<!--break-->', '', $node->body));    // Preview trimmed version if teaser and body will appear different;    // also (edge case) if both teaser and body have been specified by the user    // and are actually the same.    if ($teaser != $body || ($body && strpos($node->body, '<!--break-->') === 0)) {      $preview_trimmed_version = TRUE;    }  }  if ($preview_trimmed_version) {    drupal_set_message(t('The trimmed version of your post shows what your post looks like when promoted to the main page or when exported for syndication.<span class="no-js"> You can insert the delimiter "&lt;!--break--&gt;" (without the quotes) to fine-tune where your post gets split.</span>'));    $output .= '<h3>'. t('Preview trimmed version') .'</h3>';    $output .= node_view(drupal_clone($node), 1, FALSE, 0);    $output .= '<h3>'. t('Preview full version') .'</h3>';    $output .= node_view($node, 0, FALSE, 0);  }  else {    $output .= node_view($node, 0, FALSE, 0);  }  $output .= "</div>\n";  return $output;}function node_form_submit($form, &$form_state) {  global $user;  $node = node_form_submit_build_node($form, $form_state);  $insert = empty($node->nid);  node_save($node);  $node_link = l(t('view'), 'node/'. $node->nid);  $watchdog_args = array('@type' => $node->type, '%title' => $node->title);  $t_args = array('@type' => node_get_types('name', $node), '%title' => $node->title);  if ($insert) {    watchdog('content', '@type: added %title.', $watchdog_args, WATCHDOG_NOTICE, $node_link);    drupal_set_message(t('@type %title has been created.', $t_args));  }  else {    watchdog('content', '@type: updated %title.', $watchdog_args, WATCHDOG_NOTICE, $node_link);    drupal_set_message(t('@type %title has been updated.', $t_args));  }  if ($node->nid) {    unset($form_state['rebuild']);    $form_state['nid'] = $node->nid;    $form_state['redirect'] = 'node/'. $node->nid;  }  else {    // In the unlikely case something went wrong on save, the node will be    // rebuilt and node form redisplayed the same way as in preview.    drupal_set_message(t('The post could not be saved.'), 'error');  }}/** * Build a node by processing submitted form values and prepare for a form rebuild. */function node_form_submit_build_node($form, &$form_state) {  // Unset any button-level handlers, execute all the form-level submit  // functions to process the form values into an updated node.  unset($form_state['submit_handlers']);  form_execute_handlers('submit', $form, $form_state);  $node = node_submit($form_state['values']);  $form_state['node'] = (array)$node;  $form_state['rebuild'] = TRUE;  return $node;}/** * Menu callback -- ask for confirmation of node deletion */function node_delete_confirm(&$form_state, $node) {  $form['nid'] = array(    '#type' => 'value',    '#value' => $node->nid,  );  return confirm_form($form,    t('Are you sure you want to delete %title?', array('%title' => $node->title)),    isset($_GET['destination']) ? $_GET['destination'] : 'node/'. $node->nid,    t('This action cannot be undone.'),    t('Delete'),    t('Cancel')  );}/** * Execute node deletion */function node_delete_confirm_submit($form, &$form_state) {  if ($form_state['values']['confirm']) {    node_delete($form_state['values']['nid']);  }  $form_state['redirect'] = '<front>';}/** * Generate an overview table of older revisions of a node. */function node_revision_overview($node) {  drupal_set_title(t('Revisions for %title', array('%title' => $node->title)));  $header = array(t('Revision'), array('data' => t('Operations'), 'colspan' => 2));  $revisions = node_revision_list($node);  $rows = array();  $revert_permission = FALSE;  if ((user_access('revert revisions') || user_access('administer nodes')) && node_access('update', $node)) {    $revert_permission = TRUE;  }  $delete_permission = FALSE;  if ((user_access('delete revisions') || user_access('administer nodes')) && node_access('delete', $node)) {    $delete_permission = TRUE;  }  foreach ($revisions as $revision) {    $row = array();    $operations = array();    if ($revision->current_vid > 0) {      $row[] = array('data' => t('!date by !username', array('!date' => l(format_date($revision->timestamp, 'small'), "node/$node->nid"), '!username' => theme('username', $revision)))                               . (($revision->log != '') ? '<p class="revision-log">'. filter_xss($revision->log) .'</p>' : ''),                     'class' => 'revision-current');      $operations[] = array('data' => theme('placeholder', t('current revision')), 'class' => 'revision-current', 'colspan' => 2);    }    else {      $row[] = t('!date by !username', array('!date' => l(format_date($revision->timestamp, 'small'), "node/$node->nid/revisions/$revision->vid/view"), '!username' => theme('username', $revision)))               . (($revision->log != '') ? '<p class="revision-log">'. filter_xss($revision->log) .'</p>' : '');      if ($revert_permission) {        $operations[] = l(t('revert'), "node/$node->nid/revisions/$revision->vid/revert");      }      if ($delete_permission) {        $operations[] = l(t('delete'), "node/$node->nid/revisions/$revision->vid/delete");      }    }    $rows[] = array_merge($row, $operations);  }  return theme('table', $header, $rows);}/** * Ask for confirmation of the reversion to prevent against CSRF attacks. */function node_revision_revert_confirm($form_state, $node_revision) {  $form['#node_revision'] = $node_revision;  return confirm_form($form, t('Are you sure you want to revert to the revision from %revision-date?', array('%revision-date' => format_date($node_revision->revision_timestamp))), 'node/'. $node_revision->nid .'/revisions', '', t('Revert'), t('Cancel'));}function node_revision_revert_confirm_submit($form, &$form_state) {  $node_revision = $form['#node_revision'];  $node_revision->revision = 1;  $node_revision->log = t('Copy of the revision from %date.', array('%date' => format_date($node_revision->revision_timestamp)));  if (module_exists('taxonomy')) {    $node_revision->taxonomy = array_keys($node_revision->taxonomy);  }  node_save($node_revision);  watchdog('content', '@type: reverted %title revision %revision.', array('@type' => $node_revision->type, '%title' => $node_revision->title, '%revision' => $node_revision->vid));  drupal_set_message(t('@type %title has been reverted back to the revision from %revision-date.', array('@type' => node_get_types('name', $node_revision), '%title' => $node_revision->title, '%revision-date' => format_date($node_revision->revision_timestamp))));  $form_state['redirect'] = 'node/'. $node_revision->nid .'/revisions';}function node_revision_delete_confirm($form_state, $node_revision) {  $form['#node_revision'] = $node_revision;  return confirm_form($form, t('Are you sure you want to delete the revision from %revision-date?', array('%revision-date' => format_date($node_revision->revision_timestamp))), 'node/'. $node_revision->nid .'/revisions', t('This action cannot be undone.'), t('Delete'), t('Cancel'));}function node_revision_delete_confirm_submit($form, &$form_state) {  $node_revision = $form['#node_revision'];  db_query("DELETE FROM {node_revisions} WHERE nid = %d AND vid = %d", $node_revision->nid, $node_revision->vid);  node_invoke_nodeapi($node_revision, 'delete revision');  watchdog('content', '@type: deleted %title revision %revision.', array('@type' => $node_revision->type, '%title' => $node_revision->title, '%revision' => $node_revision->vid));  drupal_set_message(t('Revision from %revision-date of @type %title has been deleted.', array('%revision-date' => format_date($node_revision->revision_timestamp), '@type' => node_get_types('name', $node_revision), '%title' => $node_revision->title)));  $form_state['redirect'] = 'node/'. $node_revision->nid;  if (db_result(db_query('SELECT COUNT(vid) FROM {node_revisions} WHERE nid = %d', $node_revision->nid)) > 1) {    $form_state['redirect'] .= '/revisions';  }}
<?php// $Id$/** * @file * This is the actions engine for executing stored actions. *//** * Perform a given list of actions by executing their callback functions. * * Given the IDs of actions to perform, find out what the callbacks * for the actions are by querying the database. Then call each callback * using the function call $function($object, $context, $a1, $a2) * where $function is the name of a function written in compliance with * the action specification; that is, foo($object, $context). * * @param $action_ids *   The ID of the action to perform. Can be a single action ID or an array *   of IDs. IDs of instances will be numeric; IDs of singletons will be *   function names. * @param $object *   Parameter that will be passed along to the callback. Typically the *   object that the action will act on; a node, user or comment object. *   If the action does not act on an object, pass a dummy object. This *   is necessary to support PHP 4 object referencing. * @param $context *   Parameter that will be passed along to the callback. $context is a *   keyed array containing extra information about what is currently *   happening at the time of the call. Typically $context['hook'] and *   $context['op'] will tell which hook-op combination resulted in this *   call to actions_do(). * @param $a1 *   Parameter that will be passed along to the callback. * @param $a2 *   Parameter that will be passed along to the callback. * * @return *   An associative array containing the result of the function that *   performs the action, keyed on action ID. */function actions_do($action_ids, &$object, $context = NULL, $a1 = NULL, $a2 = NULL) {  // $stack tracks the number of recursive calls.  static $stack;  $stack++;  if ($stack > variable_get('actions_max_stack', 35)) {    watchdog('actions', 'Stack overflow: too many calls to actions_do(). Aborting to prevent infinite recursion.', array(), WATCHDOG_ERROR);    return;  }  $actions = array();  $available_actions = actions_list();  $result = array();  if (is_array($action_ids)) {    $where = array();    $where_values = array();    foreach ($action_ids as $action_id) {      if (is_numeric($action_id)) {        $where[] = "OR aid = '%s'";        $where_values[] = $action_id;      }      elseif (isset($available_actions[$action_id])) {        $actions[$action_id] = $available_actions[$action_id];      }    }    // When we have action instances we must go to the database to    // retrieve instance data.    if ($where) {      $where_clause = implode(' ', $where);      // Strip off leading 'OR '.      $where_clause = '('. strstr($where_clause, " ") .')';      $result_db = db_query('SELECT * FROM {actions} WHERE '. $where_clause, $where_values);      while ($action = db_fetch_object($result_db)) {        $actions[$action->aid] = $action->parameters ? unserialize($action->parameters) : array();        $actions[$action->aid]['callback'] = $action->callback;        $actions[$action->aid]['type'] = $action->type;      }    }    // Fire actions, in no particular order.    foreach ($actions as $action_id => $params) {      if (is_numeric($action_id)) { // Configurable actions need parameters.        $function = $params['callback'];        $context = array_merge($context, $params);        $result[$action_id] = $function($object, $context, $a1, $a2);      }      // Singleton action; $action_id is the function name.      else {        $result[$action_id] = $action_id($object, $context, $a1, $a2);      }    }  }  // Optimized execution of single action.  else {    // If it's a configurable action, retrieve stored parameters.    if (is_numeric($action_ids)) {      $action = db_fetch_object(db_query("SELECT * FROM {actions} WHERE aid = '%s'", $action_ids));      $function = $action->callback;      $context = array_merge($context, unserialize($action->parameters));      $result[$action_ids] = $function($object, $context, $a1, $a2);    }    // Singleton action; $action_ids is the function name.    else {      $result[$action_ids] = $action_ids($object, $context, $a1, $a2);    }  }  $stack--;  return $result;}/** * Discover all action functions by invoking hook_action_info(). * * @code * mymodule_action_info() { *   return array( *     'mymodule_functiondescription_action' => array( *       'type' => 'node', *       'description' => t('Save node'), *       'configurable' => FALSE, *       'hooks' => array( *         'nodeapi' => array('delete', 'insert', 'update', 'view'), *         'comment' => array('delete', 'insert', 'update', 'view'), *       ) *     ) *   ); * } * @endcode * * The description is used in presenting possible actions to the user for * configuration. The type is used to present these actions in a logical * grouping and to denote context. Some types are 'node', 'user', 'comment', * and 'system'. If an action is configurable it will provide form, * validation and submission functions. The hooks the action supports * are declared in the 'hooks' array. * * @param $reset *   Reset the action info static cache. * * @return *   An associative array keyed on function name. The value of each key is *   an array containing information about the action, such as type of *   action and description of the action, e.g., * *   @code *   $actions['node_publish_action'] = array( *     'type' => 'node', *     'description' => t('Publish post'), *     'configurable' => FALSE, *     'hooks' => array( *       'nodeapi' => array('presave', 'insert', 'update', 'view'), *       'comment' => array('delete', 'insert', 'update', 'view'), *     ), *   ); *   @endcode */function actions_list($reset = FALSE) {  static $actions;  if (!isset($actions) || $reset) {    $actions = module_invoke_all('action_info');    drupal_alter('action_info', $actions);  }  // See module_implements for explanations of this cast.  return (array)$actions;}/** * Retrieves all action instances from the database. * * Compare with actions_list(), which gathers actions by invoking * hook_action_info(). The actions returned by this function and the actions * returned by actions_list() are partially synchronized. Non-configurable * actions from hook_action_info() implementations are put into the database * when actions_synchronize() is called, which happens when * admin/settings/actions is visited. Configurable actions are not added to * the database until they are configured in the user interface, in which case * a database row is created for each configuration of each action. * * @return *   Associative array keyed by action ID. Each value is an *   associative array with keys 'callback', 'description', 'type' and *   'configurable'. */function actions_get_all_actions() {  $actions = array();  $result = db_query("SELECT * FROM {actions}");  while ($action = db_fetch_object($result)) {    $actions[$action->aid] = array(      'callback' => $action->callback,      'description' => $action->description,      'type' => $action->type,      'configurable' => (bool) $action->parameters,    );  }  return $actions;}/** * Create an associative array keyed by md5 hashes of function names. * * Hashes are used to prevent actual function names from going out into * HTML forms and coming back. * * @param $actions *   An associative array with function names as keys and associative *   arrays with keys 'description', 'type', etc. as values. Generally *   the output of actions_list() or actions_get_all_actions() is given *   as input to this function. * * @return *   An associative array keyed on md5 hash of function name. The value of *   each key is an associative array of function, description, and type *   for the action. */function actions_actions_map($actions) {  $actions_map = array();  foreach ($actions as $callback => $array) {    $key = md5($callback);    $actions_map[$key]['callback']     = isset($array['callback']) ? $array['callback'] : $callback;    $actions_map[$key]['description']  = $array['description'];    $actions_map[$key]['type']         = $array['type'];    $actions_map[$key]['configurable'] = $array['configurable'];  }  return $actions_map;}/** * Given an md5 hash of a function name, return the function name. * * Faster than actions_actions_map() when you only need the function name. * * @param $hash *   MD5 hash of a function name * * @return *   Function name */function actions_function_lookup($hash) {  $actions_list = actions_list();  foreach ($actions_list as $function => $array) {    if (md5($function) == $hash) {      return $function;    }  }  // Must be an instance; must check database.  $aid = db_result(db_query("SELECT aid FROM {actions} WHERE MD5(aid) = '%s' AND parameters <> ''", $hash));  return $aid;}/** * Synchronize actions that are provided by modules. * * They are synchronized with actions that are stored in the actions table. * This is necessary so that actions that do not require configuration can * receive action IDs. This is not necessarily the best approach, * but it is the most straightforward. */function actions_synchronize($actions_in_code = array(), $delete_orphans = FALSE) {  if (!$actions_in_code) {    $actions_in_code = actions_list(TRUE);  }  $actions_in_db = array();  $result = db_query("SELECT * FROM {actions} WHERE parameters = ''");  while ($action = db_fetch_object($result)) {    $actions_in_db[$action->callback] = array('aid' => $action->aid, 'description' => $action->description);  }  // Go through all the actions provided by modules.  foreach ($actions_in_code as $callback => $array) {    // Ignore configurable actions since their instances get put in    // when the user adds the action.    if (!$array['configurable']) {      // If we already have an action ID for this action, no need to assign aid.      if (array_key_exists($callback, $actions_in_db)) {        unset($actions_in_db[$callback]);      }      else {        // This is a new singleton that we don't have an aid for; assign one.        db_query("INSERT INTO {actions} (aid, type, callback, parameters, description) VALUES ('%s', '%s', '%s', '%s', '%s')", $callback, $array['type'], $callback, '', $array['description']);        watchdog('actions', "Action '%action' added.", array('%action' => filter_xss_admin($array['description'])));      }    }  }  // Any actions that we have left in $actions_in_db are orphaned.  if ($actions_in_db) {    $orphaned = array();    $placeholder = array();    foreach ($actions_in_db as $callback => $array) {      $orphaned[] = $callback;      $placeholder[] = "'%s'";    }    $orphans = implode(', ', $orphaned);    if ($delete_orphans) {      $placeholders = implode(', ', $placeholder);      $results = db_query("SELECT a.aid, a.description FROM {actions} a WHERE callback IN ($placeholders)", $orphaned);      while ($action = db_fetch_object($results)) {        actions_delete($action->aid);        watchdog('actions', "Removed orphaned action '%action' from database.", array('%action' => filter_xss_admin($action->description)));      }    }    else {      $link = l(t('Remove orphaned actions'), 'admin/settings/actions/orphan');      $count = count($actions_in_db);      watchdog('actions', format_plural($count, 'One orphaned action (%orphans) exists in the actions table. !link', '@count orphaned actions (%orphans) exist in the actions table. !link'), array('@count' => $count, '%orphans' => $orphans, '!link' => $link), WATCHDOG_WARNING);    }  }}/** * Save an action and its associated user-supplied parameter values to the database. * * @param $function *   The name of the function to be called when this action is performed. * @param $type *   The type of action, to describe grouping and/or context, e.g., 'node', *   'user', 'comment', or 'system'. * @param $params *   An associative array with parameter names as keys and parameter values *   as values. * @param $desc *   A user-supplied description of this particular action, e.g., 'Send *   e-mail to Jim'. * @param $aid *   The ID of this action. If omitted, a new action is created. * * @return *   The ID of the action. */function actions_save($function, $type, $params, $desc, $aid = NULL) {  $serialized = serialize($params);  if ($aid) {    db_query("UPDATE {actions} SET callback = '%s', type = '%s', parameters = '%s', description = '%s' WHERE aid = '%s'", $function, $type, $serialized, $desc, $aid);    watchdog('actions', 'Action %action saved.', array('%action' => $desc));  }  else {    // aid is the callback for singleton actions so we need to keep a    // separate table for numeric aids.    db_query('INSERT INTO {actions_aid} VALUES (default)');    $aid = db_last_insert_id('actions_aid', 'aid');    db_query("INSERT INTO {actions} (aid, callback, type, parameters, description) VALUES ('%s', '%s', '%s', '%s', '%s')", $aid, $function, $type, $serialized, $desc);    watchdog('actions', 'Action %action created.', array('%action' => $desc));  }  return $aid;}/** * Retrieve a single action from the database. * * @param $aid *   integer The ID of the action to retrieve. * * @return *   The appropriate action row from the database as an object. */function actions_load($aid) {  return db_fetch_object(db_query("SELECT * FROM {actions} WHERE aid = '%s'", $aid));}/** * Delete a single action from the database. * * @param $aid *   integer The ID of the action to delete. */function actions_delete($aid) {  db_query("DELETE FROM {actions} WHERE aid = '%s'", $aid);  module_invoke_all('actions_delete', $aid);}
<?php// $Id$?>  <div class="comment<?php print ' '. $status; ?>">    <?php if ($picture) {    print $picture;  } ?><h3 class="title"><?php print $title; ?></h3><?php if ($new != '') { ?><span class="new"><?php print $new; ?></span><?php } ?>    <div class="submitted"><?php print $submitted; ?></div>    <div class="content">     <?php print $content; ?>     <?php if ($signature): ?>      <div class="clear-block">       <div></div>       <?php print $signature ?>      </div>     <?php endif; ?>    </div>    <div class="links">&raquo; <?php print $links; ?></div>  </div>
<?php// $Id$/** * @file * Admin page callbacks for the book module. *//** * Returns an administrative overview of all books. */function book_admin_overview() {  $rows = array();  foreach (book_get_books() as $book) {    $rows[] = array(l($book['title'], $book['href'], $book['options']), l(t('edit order and titles'), "admin/content/book/". $book['nid']));  }  $headers = array(t('Book'), t('Operations'));  return theme('table', $headers, $rows);}/** * Builds and returns the book settings form. * * @see book_admin_settings_validate() * * @ingroup forms */function book_admin_settings() {  $types = node_get_types('names');  $form['book_allowed_types'] = array(    '#type' => 'checkboxes',    '#title' => t('Allowed book outline types'),    '#default_value' => variable_get('book_allowed_types', array('book')),    '#options' => $types,    '#description' => t('Select content types which users with the %add-perm permission will be allowed to add to the book hierarchy. Users with the %outline-perm permission can add all content types.', array('%add-perm' => t('add content to books'),  '%outline-perm' => t('administer book outlines'))),    '#required' => TRUE,  );  $form['book_child_type'] = array(    '#type' => 'radios',    '#title' => t('Default child page type'),    '#default_value' => variable_get('book_child_type', 'book'),    '#options' => $types,    '#description' => t('The content type for the %add-child link must be one of those selected as an allowed book outline type.', array('%add-child' => t('Add child page'))),    '#required' => TRUE,  );  $form['array_filter'] = array('#type' => 'value', '#value' => TRUE);  $form['#validate'][] = 'book_admin_settings_validate';  return system_settings_form($form);}/** * Validate the book settings form. * * @see book_admin_settings() */function book_admin_settings_validate($form, &$form_state) {  $child_type = $form_state['values']['book_child_type'];  if (empty($form_state['values']['book_allowed_types'][$child_type])) {    form_set_error('book_child_type', t('The content type for the %add-child link must be one of those selected as an allowed book outline type.', array('%add-child' => t('Add child page'))));  }}/** * Build the form to administrate the hierarchy of a single book. * * @see book_admin_edit_submit() * * @ingroup forms. */function book_admin_edit($form_state, $node) {  drupal_set_title(check_plain($node->title));  $form = array();  $form['#node'] = $node;  _book_admin_table($node, $form);  $form['save'] = array(    '#type' => 'submit',    '#value' => t('Save book pages'),  );  return $form;}/** * Check that the book has not been changed while using the form. * * @see book_admin_edit() */function book_admin_edit_validate($form, &$form_state) {  if ($form_state['values']['tree_hash'] != $form_state['values']['tree_current_hash']) {    form_set_error('', t('This book has been modified by another user, the changes could not be saved.'));    $form_state['rebuild'] = TRUE;  }}/** * Handle submission of the book administrative page form. * * This function takes care to save parent menu items before their children. * Saving menu items in the incorrect order can break the menu tree. * * @see book_admin_edit() * @see menu_overview_form_submit() */function book_admin_edit_submit($form, &$form_state) {  // Save elements in the same order as defined in post rather than the form.  // This ensures parents are updated before their children, preventing orphans.  $order = array_flip(array_keys($form['#post']['table']));  $form['table'] = array_merge($order, $form['table']);  foreach (element_children($form['table']) as $key) {    if ($form['table'][$key]['#item']) {      $row = $form['table'][$key];      $values = $form_state['values']['table'][$key];      // Update menu item if moved.      if ($row['plid']['#default_value'] != $values['plid'] || $row['weight']['#default_value'] != $values['weight']) {        $row['#item']['plid'] = $values['plid'];        $row['#item']['weight'] = $values['weight'];        menu_link_save($row['#item']);      }      // Update the title if changed.      if ($row['title']['#default_value'] != $values['title']) {        $node = node_load($values['nid'], FALSE);        $node->title = $values['title'];        $node->book['link_title'] = $values['title'];        $node->revision = 1;        $node->log = t('Title changed from %original to %current.', array('%original' => $node->title, '%current' => $values['title']));        node_save($node);        watchdog('content', 'book: updated %title.', array('%title' => $node->title), WATCHDOG_NOTICE, l(t('view'), 'node/'. $node->nid));      }    }  }  drupal_set_message(t('Updated book %title.', array('%title' => $form['#node']->title)));}/** * Build the table portion of the form for the book administration page. * * @see book_admin_edit() */function _book_admin_table($node, &$form) {  $form['table'] = array(    '#theme' => 'book_admin_table',    '#tree' => TRUE,  );  $tree = book_menu_subtree_data($node->book);  $tree = array_shift($tree); // Do not include the book item itself.  if ($tree['below']) {    $hash = sha1(serialize($tree['below']));    // Store the hash value as a hidden form element so that we can detect    // if another user changed the book hierarchy.    $form['tree_hash'] = array(      '#type' => 'hidden',      '#default_value' => $hash,    );    $form['tree_current_hash'] = array(      '#type' => 'value',      '#value' => $hash,    );    _book_admin_table_tree($tree['below'], $form['table']);  }}/** * Recursive helper to build the main table in the book administration page form. * * @see book_admin_edit() */function _book_admin_table_tree($tree, &$form) {  foreach ($tree as $data) {    $form['book-admin-'. $data['link']['nid']] = array(      '#item' => $data['link'],      'nid' => array('#type' => 'value', '#value' => $data['link']['nid']),      'depth' => array('#type' => 'value', '#value' => $data['link']['depth']),      'href' => array('#type' => 'value', '#value' => $data['link']['href']),      'title' => array(        '#type' => 'textfield',        '#default_value' => $data['link']['link_title'],        '#maxlength' => 255,        '#size' => 40,      ),      'weight' => array(        '#type' => 'weight',        '#default_value' => $data['link']['weight'],        '#delta' => 15,      ),      'plid' => array(        '#type' => 'textfield',        '#default_value' => $data['link']['plid'],        '#size' => 6,      ),      'mlid' => array(        '#type' => 'hidden',        '#default_value' => $data['link']['mlid'],      ),    );    if ($data['below']) {      _book_admin_table_tree($data['below'], $form);    }  }  return $form;}/** * Theme function for the book administration page form. * * @ingroup themeable * @see book_admin_table() */function theme_book_admin_table($form) {  drupal_add_tabledrag('book-outline', 'match', 'parent', 'book-plid', 'book-plid', 'book-mlid', TRUE, MENU_MAX_DEPTH - 2);  drupal_add_tabledrag('book-outline', 'order', 'sibling', 'book-weight');  $header = array(t('Title'), t('Weight'), t('Parent'), array('data' => t('Operations'), 'colspan' => '3'));  $rows = array();  $destination = drupal_get_destination();  $access = user_access('administer nodes');  foreach (element_children($form) as $key) {    $nid = $form[$key]['nid']['#value'];    $href = $form[$key]['href']['#value'];    // Add special classes to be used with tabledrag.js.    $form[$key]['plid']['#attributes']['class'] = 'book-plid';    $form[$key]['mlid']['#attributes']['class'] = 'book-mlid';    $form[$key]['weight']['#attributes']['class'] = 'book-weight';    $data = array(      theme('indentation', $form[$key]['depth']['#value'] - 2) . drupal_render($form[$key]['title']),      drupal_render($form[$key]['weight']),      drupal_render($form[$key]['plid']) . drupal_render($form[$key]['mlid']),      l(t('view'), $href),      $access ? l(t('edit'), 'node/'. $nid .'/edit', array('query' => $destination)) : '&nbsp',      $access ? l(t('delete'), 'node/'. $nid .'/delete', array('query' => $destination) )  : '&nbsp',    );    $row = array('data' => $data);    if (isset($form[$key]['#attributes'])) {      $row = array_merge($row, $form[$key]['#attributes']);    }    $row['class'] = empty($row['class']) ? 'draggable' : $row['class'] .' draggable';    $rows[] = $row;  }  return theme('table', $header, $rows, array('id' => 'book-outline'));}
<?php// $Id$/** * @file * The "Update status" module checks for available updates of Drupal core and * any installed contributed modules and themes. It warns site administrators * if newer releases are available via the system status report * (admin/reports/status), the module and theme pages, and optionally via email. *//** * URL to check for updates, if a given project doesn't define its own. */define('UPDATE_DEFAULT_URL', 'http://updates.drupal.org/release-history');// These are internally used constants for this code, do not modify./** * Project is missing security update(s). */define('UPDATE_NOT_SECURE', 1);/** * Current release has been unpublished and is no longer available. */define('UPDATE_REVOKED', 2);/** * Current release is no longer supported by the project maintainer. */define('UPDATE_NOT_SUPPORTED', 3);/** * Project has a new release available, but it is not a security release. */define('UPDATE_NOT_CURRENT', 4);/** * Project is up to date. */define('UPDATE_CURRENT', 5);/** * Project's status cannot be checked. */define('UPDATE_NOT_CHECKED', -1);/** * No available update data was found for project. */define('UPDATE_UNKNOWN', -2);/** * There was a failure fetching available update data for this project. */define('UPDATE_NOT_FETCHED', -3);/** * Maximum number of attempts to fetch available update data from a given host. */define('UPDATE_MAX_FETCH_ATTEMPTS', 2);/** * Implementation of hook_help(). */function update_help($path, $arg) {  switch ($path) {    case 'admin/reports/updates':      $output = '<p>'. t('Here you can find information about available updates for your installed modules and themes. Note that each module or theme is part of a "project", which may or may not have the same name, and might include multiple modules or themes within it.') .'</p>';      $output .= '<p>'. t('To extend the functionality or to change the look of your site, a number of contributed <a href="@modules">modules</a> and <a href="@themes">themes</a> are available.', array('@modules' => 'http://drupal.org/project/modules', '@themes' => 'http://drupal.org/project/themes')) .'</p>';      return $output;    case 'admin/build/themes':    case 'admin/build/modules':      include_once './includes/install.inc';      $status = update_requirements('runtime');      foreach (array('core', 'contrib') as $report_type) {        $type = 'update_'. $report_type;        if (isset($status[$type]['severity'])) {          if ($status[$type]['severity'] == REQUIREMENT_ERROR) {            drupal_set_message($status[$type]['description'], 'error');          }          elseif ($status[$type]['severity'] == REQUIREMENT_WARNING) {            drupal_set_message($status[$type]['description'], 'warning');          }        }      }      return '<p>'. t('See the <a href="@available_updates">available updates</a> page for information on installed modules and themes with new versions released.', array('@available_updates' => url('admin/reports/updates'))) .'</p>';    case 'admin/reports/updates/settings':    case 'admin/reports/status':      // These two pages don't need additional nagging.      break;    case 'admin/help#update':      $output = '<p>'. t("The Update status module periodically checks for new versions of your site's software (including contributed modules and themes), and alerts you to available updates.") .'</p>';      $output .= '<p>'. t('The <a href="@update-report">report of available updates</a> will alert you when new releases are available for download. You may configure options for update checking frequency and notifications at the <a href="@update-settings">Update status module settings page</a>.', array('@update-report' => url('admin/reports/updates'), '@update-settings' => url('admin/reports/updates/settings'))) .'</p>';      $output .= '<p>'. t('Please note that in order to provide this information, anonymous usage statistics are sent to drupal.org. If desired, you may disable the Update status module from the <a href="@modules">module administration page</a>.', array('@modules' => url('admin/build/modules'))) .'</p>';      $output .= '<p>'. t('For more information, see the online handbook entry for <a href="@update">Update status module</a>.', array('@update' => 'http://drupal.org/handbook/modules/update')) .'</p>';      return $output;    default:      // Otherwise, if we're on *any* admin page and there's a security      // update missing, print an error message about it.      if (arg(0) == 'admin' && strpos($path, '#') === FALSE          && user_access('administer site configuration')) {        include_once './includes/install.inc';        $status = update_requirements('runtime');        foreach (array('core', 'contrib') as $report_type) {          $type = 'update_'. $report_type;          if (isset($status[$type])              && isset($status[$type]['reason'])              && $status[$type]['reason'] === UPDATE_NOT_SECURE) {            drupal_set_message($status[$type]['description'], 'error');          }        }      }  }}/** * Implementation of hook_menu(). */function update_menu() {  $items = array();  $items['admin/reports/updates'] = array(    'title' => 'Available updates',    'description' => 'Get a status report about available updates for your installed modules and themes.',    'page callback' => 'update_status',    'access arguments' => array('administer site configuration'),    'file' => 'update.report.inc',    'weight' => 10,  );  $items['admin/reports/updates/list'] = array(    'title' => 'List',    'page callback' => 'update_status',    'access arguments' => array('administer site configuration'),    'file' => 'update.report.inc',    'type' => MENU_DEFAULT_LOCAL_TASK,  );  $items['admin/reports/updates/settings'] = array(    'title' => 'Settings',    'page callback' => 'drupal_get_form',    'page arguments' => array('update_settings'),    'access arguments' => array('administer site configuration'),    'file' => 'update.settings.inc',    'type' => MENU_LOCAL_TASK,  );  $items['admin/reports/updates/check'] = array(    'title' => 'Manual update check',    'page callback' => 'update_manual_status',    'access arguments' => array('administer site configuration'),    'file' => 'update.fetch.inc',    'type' => MENU_CALLBACK,  );  return $items;}/** * Implementation of the hook_theme() registry. */function update_theme() {  return array(    'update_settings' => array(      'arguments' => array('form' => NULL),    ),    'update_report' => array(      'arguments' => array('data' => NULL),    ),    'update_version' => array(      'arguments' => array('version' => NULL, 'tag' => NULL, 'class' => NULL),    ),  );}/** * Implementation of hook_requirements(). * * @return *   An array describing the status of the site regarding available updates. *   If there is no update data, only one record will be returned, indicating *   that the status of core can't be determined. If data is available, there *   will be two records: one for core, and another for all of contrib *   (assuming there are any contributed modules or themes enabled on the *   site). In addition to the fields expected by hook_requirements ('value', *   'severity', and optionally 'description'), this array will contain a *   'reason' attribute, which is an integer constant to indicate why the *   given status is being returned (UPDATE_NOT_SECURE, UPDATE_NOT_CURRENT, or *   UPDATE_UNKNOWN). This is used for generating the appropriate e-mail *   notification messages during update_cron(), and might be useful for other *   modules that invoke update_requirements() to find out if the site is up *   to date or not. * * @see _update_message_text() * @see _update_cron_notify() */function update_requirements($phase) {  if ($phase == 'runtime') {    if ($available = update_get_available(FALSE)) {      module_load_include('inc', 'update', 'update.compare');      $data = update_calculate_project_data($available);      // First, populate the requirements for core:      $requirements['update_core'] = _update_requirement_check($data['drupal'], 'core');      // We don't want to check drupal a second time.      unset($data['drupal']);      if (!empty($data)) {        // Now, sort our $data array based on each project's status. The        // status constants are numbered in the right order of precedence, so        // we just need to make sure the projects are sorted in ascending        // order of status, and we can look at the first project we find.        uasort($data, '_update_project_status_sort');        $first_project = reset($data);        $requirements['update_contrib'] = _update_requirement_check($first_project, 'contrib');      }    }    else {      $requirements['update_core']['title'] = t('Drupal core update status');      $requirements['update_core']['value'] = t('No update data available');      $requirements['update_core']['severity'] = REQUIREMENT_WARNING;      $requirements['update_core']['reason'] = UPDATE_UNKNOWN;      $requirements['update_core']['description'] = _update_no_data();    }    return $requirements;  }}/** * Private helper method to fill in the requirements array. * * This is shared for both core and contrib to generate the right elements in * the array for hook_requirements(). * * @param $project *  Array of information about the project we're testing as returned by *  update_calculate_project_data(). * @param $type *  What kind of project is this ('core' or 'contrib'). * * @return *  An array to be included in the nested $requirements array. * * @see hook_requirements() * @see update_requirements() * @see update_calculate_project_data() */function _update_requirement_check($project, $type) {  $requirement = array();  if ($type == 'core') {    $requirement['title'] = t('Drupal core update status');  }  else {    $requirement['title'] = t('Module and theme update status');  }  $status = $project['status'];  if ($status != UPDATE_CURRENT) {    $requirement['reason'] = $status;    $requirement['description'] = _update_message_text($type, $status, TRUE);    $requirement['severity'] = REQUIREMENT_ERROR;  }  switch ($status) {    case UPDATE_NOT_SECURE:      $requirement_label = t('Not secure!');      break;    case UPDATE_REVOKED:      $requirement_label = t('Revoked!');      break;    case UPDATE_NOT_SUPPORTED:      $requirement_label = t('Unsupported release');      break;    case UPDATE_NOT_CURRENT:      $requirement_label = t('Out of date');      $requirement['severity'] = REQUIREMENT_WARNING;      break;    case UPDATE_UNKNOWN:    case UPDATE_NOT_CHECKED:    case UPDATE_NOT_FETCHED:      $requirement_label = isset($project['reason']) ? $project['reason'] : t('Can not determine status');      $requirement['severity'] = REQUIREMENT_WARNING;      break;    default:      $requirement_label = t('Up to date');  }  if ($status != UPDATE_CURRENT && $type == 'core' && isset($project['recommended'])) {    $requirement_label .= ' '. t('(version @version available)', array('@version' => $project['recommended']));  }  $requirement['value'] = l($requirement_label, 'admin/reports/updates');  return $requirement;}/** * Implementation of hook_cron(). */function update_cron() {  $frequency = variable_get('update_check_frequency', 1);  $interval = 60 * 60 * 24 * $frequency;  // Cron should check for updates if there is no update data cached or if the  // configured update interval has elapsed.  if (!_update_cache_get('update_available_releases') || ((time() - variable_get('update_last_check', 0)) > $interval)) {    update_refresh();    _update_cron_notify();  }}/** * Implementation of hook_form_alter(). * * Adds a submit handler to the system modules and themes forms, so that if a * site admin saves either form, we invalidate the cache of available updates. * * @see update_invalidate_cache() */function update_form_alter(&$form, $form_state, $form_id) {  if ($form_id == 'system_modules' || $form_id == 'system_themes_form' ) {    $form['#submit'][] = 'update_invalidate_cache';  }}/** * Prints a warning message when there is no data about available updates. */function _update_no_data() {  $destination = drupal_get_destination();  return t('No information is available about potential new releases for currently installed modules and themes. To check for updates, you may need to <a href="@run_cron">run cron</a> or you can <a href="@check_manually">check manually</a>. Please note that checking for available updates can take a long time, so please be patient.', array(    '@run_cron' => url('admin/reports/status/run-cron', array('query' => $destination)),    '@check_manually' => url('admin/reports/updates/check', array('query' => $destination)),  ));}/** * Internal helper to try to get the update information from the cache * if possible, and to refresh the cache when necessary. * * In addition to checking the cache lifetime, this function also ensures that * there are no .info files for enabled modules or themes that have a newer * modification timestamp than the last time we checked for available update * data. If any .info file was modified, it almost certainly means a new * version of something was installed. Without fresh available update data, * the logic in update_calculate_project_data() will be wrong and produce * confusing, bogus results. * * @param $refresh *   Boolean to indicate if this method should refresh the cache automatically *   if there's no data. * * @see update_refresh() * @see update_get_projects() */function update_get_available($refresh = FALSE) {  module_load_include('inc', 'update', 'update.compare');  $available = array();  // First, make sure that none of the .info files have a change time  // newer than the last time we checked for available updates.  $needs_refresh = FALSE;  $last_check = variable_get('update_last_check', 0);  $projects = update_get_projects();  foreach ($projects as $key => $project) {    if ($project['info']['_info_file_ctime'] > $last_check) {      $needs_refresh = TRUE;      break;    }  }  if (!$needs_refresh && ($cache = _update_cache_get('update_available_releases')) && $cache->expire > time()) {    $available = $cache->data;  }  elseif ($needs_refresh || $refresh) {    // If we need to refresh due to a newer .info file, ignore the argument    // and force the refresh (e.g., even for update_requirements()) to prevent    // bogus results.    $available = update_refresh();  }  return $available;}/** * Wrapper to load the include file and then refresh the release data. */function update_refresh() {  module_load_include('inc', 'update', 'update.fetch');  return _update_refresh();}/** * Implementation of hook_mail(). * * Constructs the email notification message when the site is out of date. * * @param $key *   Unique key to indicate what message to build, always 'status_notify'. * @param $message *   Reference to the message array being built. * @param $params *   Array of parameters to indicate what kind of text to include in the *   message body. This is a keyed array of message type ('core' or 'contrib') *   as the keys, and the status reason constant (UPDATE_NOT_SECURE, etc) for *   the values. * * @see drupal_mail() * @see _update_cron_notify() * @see _update_message_text() */function update_mail($key, &$message, $params) {  $language = $message['language'];  $langcode = $language->language;  $message['subject'] .= t('New release(s) available for !site_name', array('!site_name' => variable_get('site_name', 'Drupal')), $langcode);  foreach ($params as $msg_type => $msg_reason) {    $message['body'][] = _update_message_text($msg_type, $msg_reason, FALSE, $language);  }  $message['body'][] = t('See the available updates page for more information:', array(), $langcode) ."\n". url('admin/reports/updates', array('absolute' => TRUE, 'language' => $language));}/** * Helper function to return the appropriate message text when the site is out * of date or missing a security update. * * These error messages are shared by both update_requirements() for the * site-wide status report at admin/reports/status and in the body of the * notification emails generated by update_cron(). * * @param $msg_type *   String to indicate what kind of message to generate. Can be either *   'core' or 'contrib'. * @param $msg_reason *   Integer constant specifying why message is generated. * @param $report_link *   Boolean that controls if a link to the updates report should be added. * @param $language *   An optional language object to use. * @return *   The properly translated error message for the given key. */function _update_message_text($msg_type, $msg_reason, $report_link = FALSE, $language = NULL) {  $langcode = isset($language) ? $language->language : NULL;  $text = '';  switch ($msg_reason) {    case UPDATE_NOT_SECURE:      if ($msg_type == 'core') {        $text = t('There is a security update available for your version of Drupal. To ensure the security of your server, you should update immediately!', array(), $langcode);      }      else {        $text = t('There are security updates available for one or more of your modules or themes. To ensure the security of your server, you should update immediately!', array(), $langcode);      }      break;    case UPDATE_REVOKED:      if ($msg_type == 'core') {        $text = t('Your version of Drupal has been revoked and is no longer available for download. Upgrading is strongly recommended!', array(), $langcode);      }      else {        $text = t('The installed version of at least one of your modules or themes has been revoked and is no longer available for download. Upgrading or disabling is strongly recommended!', array(), $langcode);      }      break;    case UPDATE_NOT_SUPPORTED:      if ($msg_type == 'core') {        $text = t('Your version of Drupal is no longer supported. Upgrading is strongly recommended!', array(), $langcode);      }      else {        $text = t('The installed version of at least one of your modules or themes is no longer supported. Upgrading or disabling is strongly recommended! Please see the project homepage for more details.', array(), $langcode);      }      break;    case UPDATE_NOT_CURRENT:      if ($msg_type == 'core') {        $text = t('There are updates available for your version of Drupal. To ensure the proper functioning of your site, you should update as soon as possible.', array(), $langcode);      }      else {        $text = t('There are updates available for one or more of your modules or themes. To ensure the proper functioning of your site, you should update as soon as possible.', array(), $langcode);      }      break;    case UPDATE_UNKNOWN:    case UPDATE_NOT_CHECKED:    case UPDATE_NOT_FETCHED:      if ($msg_type == 'core') {        $text = t('There was a problem determining the status of available updates for your version of Drupal.', array(), $langcode);      }      else {        $text = t('There was a problem determining the status of available updates for one or more of your modules or themes.', array(), $langcode);      }      break;  }  if ($report_link) {    $text .= ' '. t('See the <a href="@available_updates">available updates</a> page for more information.', array('@available_updates' => url('admin/reports/updates', array('language' => $language))), $langcode);  }  return $text;}/** * Private sort function to order projects based on their status. * * @see update_requirements() * @see uasort() */function _update_project_status_sort($a, $b) {  // The status constants are numerically in the right order, so we can  // usually subtract the two to compare in the order we want. However,  // negative status values should be treated as if they are huge, since we  // always want them at the bottom of the list.  $a_status = $a['status'] > 0 ? $a['status'] : (-10 * $a['status']);  $b_status = $b['status'] > 0 ? $b['status'] : (-10 * $b['status']);  return $a_status - $b_status;}/** * @defgroup update_status_cache Private update status cache system * @{ * * We specifically do NOT use the core cache API for saving the fetched data * about available updates. It is vitally important that this cache is only * cleared when we're populating it after successfully fetching new available * update data. Usage of the core cache API results in all sorts of potential * problems that would result in attempting to fetch available update data all * the time, including if a site has a "minimum cache lifetime" (which is both * a minimum and a maximum) defined, or if a site uses memcache or another * plug-able cache system that assumes volatile caches. * * Update module still uses the {cache_update} table, but instead of using * cache_set(), cache_get(), and cache_clear_all(), there are private helper * functions that implement these same basic tasks but ensure that the cache * is not prematurely cleared, and that the data is always stored in the * database, even if memcache or another cache backend is in use. *//** * Store data in the private update status cache table. * * Note: this function completely ignores the {cache_update}.headers field * since that is meaningless for the kinds of data we're caching. * * @param $cid *   The cache ID to save the data with. * @param $data *   The data to store. * @param $expire *   One of the following values: *   - CACHE_PERMANENT: Indicates that the item should never be removed except *     by explicitly using _update_cache_clear() or update_invalidate_cache(). *   - A Unix timestamp: Indicates that the item should be kept at least until *     the given time, after which it will be invalidated. */function _update_cache_set($cid, $data, $expire) {  $serialized = 0;  if (is_object($data) || is_array($data)) {    $data = serialize($data);    $serialized = 1;  }  $created = time();  db_query("UPDATE {cache_update} SET data = %b, created = %d, expire = %d, serialized = %d WHERE cid = '%s'", $data, $created, $expire, $serialized, $cid);  if (!db_affected_rows()) {    @db_query("INSERT INTO {cache_update} (cid, data, created, expire, serialized) VALUES ('%s', %b, %d, %d, %d)", $cid, $data, $created, $expire, $serialized);  }}/** * Retrieve data from the private update status cache table. * * @param $cid *   The cache ID to retrieve. * @return *   The data for the given cache ID, or NULL if the ID was not found. */function _update_cache_get($cid) {  $cache = db_fetch_object(db_query("SELECT data, created, expire, serialized FROM {cache_update} WHERE cid = '%s'", $cid));  if (isset($cache->data)) {    $cache->data = db_decode_blob($cache->data);    if ($cache->serialized) {      $cache->data = unserialize($cache->data);    }  }  return $cache;}/** * Invalidates specific cached data relating to update status. * * @param $cid *   Optional cache ID of the record to clear from the private update module *   cache. If empty, all records will be cleared from the table. */function _update_cache_clear($cid = NULL) {  if (empty($cid)) {    db_query("TRUNCATE TABLE {cache_update}");  }  else {    db_query("DELETE FROM {cache_update} WHERE cid = '%s'", $cid);  }}/** * Implementation of hook_flush_caches(). * * Called from update.php (among others) to flush the caches. * Since we're running update.php, we are likely to install a new version of * something, in which case, we want to check for available update data again. * However, because we have our own caching system, we need to directly clear * the database table ourselves at this point and return nothing, for example, * on sites that use memcache where cache_clear_all() won't know how to purge * this data. * * However, we only want to do this from update.php, since otherwise, we'd * lose all the available update data on every cron run. So, we specifically * check if the site is in MAINTENANCE_MODE == 'update' (which indicates * update.php is running, not update module... alas for overloaded names). */function update_flush_caches() {  if (defined('MAINTENANCE_MODE') && MAINTENANCE_MODE == 'update') {    _update_cache_clear();  }  return array();}/** * Invalidates all cached data relating to update status. */function update_invalidate_cache() {  _update_cache_clear();}/** * @} End of "defgroup update_status_cache". */
<?php// $Id$/** * @file * Additional filter for PHP input. *//** * Implementation of hook_help(). */function php_help($path, $arg) {  switch ($path) {    case 'admin/help#php':      $output = '<p>'. t('The PHP filter adds the ability to include PHP code in posts. PHP is a general-purpose scripting language widely-used for web development; the content management system used by this website has been developed using PHP.') .'</p>';      $output .= '<p>'. t('Through the PHP filter, users with the proper permission may include custom PHP code within a page of the site. While this is a powerful and flexible feature if used by a trusted user with PHP experience, it is a significant and dangerous security risk in the hands of a malicious user. Even a trusted user may accidentally compromise the site by entering malformed or incorrect PHP code. Only the most trusted users should be granted permission to use the PHP filter, and all PHP code added through the PHP filter should be carefully examined before use.') .'</p>';      $output .= '<p>'. t('<a href="@drupal">Drupal.org</a> offers <a href="@php-snippets">some example PHP snippets</a>, or you can create your own with some PHP experience and knowledge of the Drupal system.', array('@drupal' => url('http://drupal.org'), '@php-snippets' => url('http://drupal.org/handbook/customization/php-snippets'))) .'</p>';      $output .= '<p>'. t('For more information, see the online handbook entry for <a href="@php">PHP module</a>.', array('@php' => 'http://drupal.org/handbook/modules/php/')) .'</p>';      return $output;  }}/** * Implementation of hook_filter_tips(). */function php_filter_tips($delta, $format, $long = false) {  global $base_url;  if ($delta == 0) {    switch ($long) {      case 0:        return t('You may post PHP code. You should include &lt;?php ?&gt; tags.');      case 1:        $output = '<h4>'. t('Using custom PHP code') .'</h4>';        $output .= '<p>'. t('Custom PHP code may be embedded in some types of site content, including posts and blocks. While embedding PHP code inside a post or block is a powerful and flexible feature when used by a trusted user with PHP experience, it is a significant and dangerous security risk when used improperly. Even a small mistake when posting PHP code may accidentally compromise your site.') .'</p>';        $output .= '<p>'. t('If you are unfamiliar with PHP, SQL, or Drupal, avoid using custom PHP code within posts. Experimenting with PHP may corrupt your database, render your site inoperable, or significantly compromise security.') .'</p>';        $output .= '<p>'. t('Notes:') .'</p>';        $output .= '<ul><li>'. t('Remember to double-check each line for syntax and logic errors <strong>before</strong> saving.') .'</li>';        $output .= '<li>'. t('Statements must be correctly terminated with semicolons.') .'</li>';        $output .= '<li>'. t('Global variables used within your PHP code retain their values after your script executes.') .'</li>';        $output .= '<li>'. t('<code>register_globals</code> is <strong>turned off</strong>. If you need to use forms, understand and use the functions in <a href="@formapi">the Drupal Form API</a>.', array('@formapi' => url('http://api.drupal.org/api/group/form_api/6'))) .'</li>';        $output .= '<li>'. t('Use a <code>print</code> or <code>return</code> statement in your code to output content.') .'</li>';        $output .= '<li>'. t('Develop and test your PHP code using a separate test script and sample database before deploying on a production site.') .'</li>';        $output .= '<li>'. t('Consider including your custom PHP code within a site-specific module or <code>template.php</code> file rather than embedding it directly into a post or block.') .'</li>';        $output .= '<li>'. t('Be aware that the ability to embed PHP code within content is provided by the PHP Filter module. If this module is disabled or deleted, then blocks and posts with embedded PHP may display, rather than execute, the PHP code.') .'</li></ul>';        $output .= '<p>'. t('A basic example: <em>Creating a "Welcome" block that greets visitors with a simple message.</em>') .'</p>';        $output .= '<ul><li>'. t('<p>Add a custom block to your site, named "Welcome". With its input format set to "PHP code" (or another format supporting PHP input), add the following in the Block body:</p><pre>print t(\'Welcome visitor! Thank you for visiting.\');</pre>') .'</li>';        $output .= '<li>'. t('<p>To display the name of a registered user, use this instead:</p><pre>global $user;if ($user->uid) {  print t(\'Welcome @name! Thank you for visiting.\', array(\'@name\' => $user->name));}else {  print t(\'Welcome visitor! Thank you for visiting.\');}</pre>') .'</li></ul>';        $output .= '<p>'. t('<a href="@drupal">Drupal.org</a> offers <a href="@php-snippets">some example PHP snippets</a>, or you can create your own with some PHP experience and knowledge of the Drupal system.', array('@drupal' => url('http://drupal.org'), '@php-snippets' => url('http://drupal.org/handbook/customization/php-snippets'))) .'</p>';        return $output;    }  }}/** * Implementation of hook_filter(). Contains a basic PHP evaluator. * * Executes PHP code. Use with care. */function php_filter($op, $delta = 0, $format = -1, $text = '') {  switch ($op) {    case 'list':      return array(0 => t('PHP evaluator'));    case 'no cache':      // No caching for the PHP evaluator.      return $delta == 0;    case 'description':      return t('Executes a piece of PHP code. The usage of this filter should be restricted to administrators only!');    case 'process':      return drupal_eval($text);    default:      return $text;  }}
<?php// $Id$/** * Implementation of hook_schema(). */function node_schema() {  $schema['node'] = array(    'description' => 'The base table for nodes.',    'fields' => array(      'nid' => array(        'description' => 'The primary identifier for a node.',        'type' => 'serial',        'unsigned' => TRUE,        'not null' => TRUE),      'vid' => array(        'description' => 'The current {node_revisions}.vid version identifier.',        'type' => 'int',        'unsigned' => TRUE,        'not null' => TRUE,        'default' => 0),      'type' => array(        'description' => 'The {node_type}.type of this node.',        'type' => 'varchar',        'length' => 32,        'not null' => TRUE,        'default' => ''),      'language' => array(        'description' => 'The {languages}.language of this node.',        'type' => 'varchar',        'length' => 12,        'not null' => TRUE,        'default' => ''),      'title' => array(        'description' => 'The title of this node, always treated as non-markup plain text.',        'type' => 'varchar',        'length' => 255,        'not null' => TRUE,        'default' => ''),      'uid' => array(        'description' => 'The {users}.uid that owns this node; initially, this is the user that created it.',        'type' => 'int',        'not null' => TRUE,        'default' => 0),      'status' => array(        'description' => 'Boolean indicating whether the node is published (visible to non-administrators).',        'type' => 'int',        'not null' => TRUE,        'default' => 1),      'created' => array(        'description' => 'The Unix timestamp when the node was created.',        'type' => 'int',        'not null' => TRUE,        'default' => 0),      'changed' => array(        'description' => 'The Unix timestamp when the node was most recently saved.',        'type' => 'int',        'not null' => TRUE,        'default' => 0),      'comment' => array(        'description' => 'Whether comments are allowed on this node: 0 = no, 1 = read only, 2 = read/write.',        'type' => 'int',        'not null' => TRUE,        'default' => 0),      'promote' => array(        'description' => 'Boolean indicating whether the node should be displayed on the front page.',        'type' => 'int',        'not null' => TRUE,        'default' => 0),      'moderate' => array(        'description' => 'Previously, a boolean indicating whether the node was "in moderation"; mostly no longer used.',        'type' => 'int',        'not null' => TRUE,        'default' => 0),      'sticky' => array(        'description' => 'Boolean indicating whether the node should be displayed at the top of lists in which it appears.',        'type' => 'int',        'not null' => TRUE,        'default' => 0),      'tnid' => array(        'description' => 'The translation set id for this node, which equals the node id of the source post in each set.',        'type' => 'int',        'unsigned' => TRUE,        'not null' => TRUE,        'default' => 0),      'translate' => array(        'description' => 'A boolean indicating whether this translation page needs to be updated.',        'type' => 'int',        'not null' => TRUE,        'default' => 0),      ),    'indexes' => array(      'node_changed'        => array('changed'),      'node_created'        => array('created'),      'node_moderate'       => array('moderate'),      'node_promote_status' => array('promote', 'status'),      'node_status_type'    => array('status', 'type', 'nid'),      'node_title_type'     => array('title', array('type', 4)),      'node_type'           => array(array('type', 4)),      'uid'                 => array('uid'),      'tnid'                => array('tnid'),      'translate'           => array('translate'),      ),    'unique keys' => array(      'vid'     => array('vid')      ),    'primary key' => array('nid'),    );  $schema['node_access'] = array(    'description' => 'Identifies which realm/grant pairs a user must possess in order to view, update, or delete specific nodes.',    'fields' => array(      'nid' => array(        'description' => 'The {node}.nid this record affects.',        'type' => 'int',        'unsigned' => TRUE,        'not null' => TRUE,        'default' => 0),      'gid' => array(        'description' => "The grant ID a user must possess in the specified realm to gain this row's privileges on the node.",        'type' => 'int',        'unsigned' => TRUE,        'not null' => TRUE,        'default' => 0),      'realm' => array(        'description' => 'The realm in which the user must possess the grant ID. Each node access node can define one or more realms.',        'type' => 'varchar',        'length' => 255,        'not null' => TRUE,        'default' => ''),      'grant_view' => array(        'description' => 'Boolean indicating whether a user with the realm/grant pair can view this node.',        'type' => 'int',        'unsigned' => TRUE,        'not null' => TRUE,        'default' => 0,        'size' => 'tiny'),      'grant_update' => array(        'description' => 'Boolean indicating whether a user with the realm/grant pair can edit this node.',        'type' => 'int',        'unsigned' => TRUE,        'not null' => TRUE,        'default' => 0,        'size' => 'tiny'),      'grant_delete' => array(        'description' => 'Boolean indicating whether a user with the realm/grant pair can delete this node.',        'type' => 'int',        'unsigned' => TRUE,        'not null' => TRUE,        'default' => 0,        'size' => 'tiny')      ),    'primary key' => array('nid', 'gid', 'realm'),    );  $schema['node_counter'] = array(    'description' => 'Access statistics for {node}s.',    'fields' => array(      'nid' => array(        'description' => 'The {node}.nid for these statistics.',        'type' => 'int',        'not null' => TRUE,        'default' => 0),      'totalcount' => array(        'description' => 'The total number of times the {node} has been viewed.',        'type' => 'int',        'unsigned' => TRUE,        'not null' => TRUE,        'default' => 0,        'size' => 'big'),      'daycount' => array(        'description' => 'The total number of times the {node} has been viewed today.',        'type' => 'int',        'unsigned' => TRUE,        'not null' => TRUE,        'default' => 0,        'size' => 'medium'),      'timestamp' => array(        'description' => 'The most recent time the {node} has been viewed.',        'type' => 'int',        'unsigned' => TRUE,        'not null' => TRUE,        'default' => 0)      ),    'primary key' => array('nid'),    );  $schema['node_revisions'] = array(    'description' => 'Stores information about each saved version of a {node}.',    'fields' => array(      'nid' => array(        'description' => 'The {node} this version belongs to.',        'type' => 'int',        'unsigned' => TRUE,        'not null' => TRUE,        'default' => 0),      'vid' => array(        'description' => 'The primary identifier for this version.',        'type' => 'serial',        'unsigned' => TRUE,        'not null' => TRUE),      'uid' => array(        'description' => 'The {users}.uid that created this version.',        'type' => 'int',        'not null' => TRUE,        'default' => 0),      'title' => array(        'description' => 'The title of this version.',        'type' => 'varchar',        'length' => 255,        'not null' => TRUE,        'default' => ''),      'body' => array(        'description' => 'The body of this version.',        'type' => 'text',        'not null' => TRUE,        'size' => 'big'),      'teaser' => array(        'description' => 'The teaser of this version.',        'type' => 'text',        'not null' => TRUE,        'size' => 'big'),      'log' => array(        'description' => 'The log entry explaining the changes in this version.',        'type' => 'text',        'not null' => TRUE,        'size' => 'big'),      'timestamp' => array(        'description' => 'A Unix timestamp indicating when this version was created.',        'type' => 'int',        'not null' => TRUE,        'default' => 0),      'format' => array(        'description' => "The input format used by this version's body.",        'type' => 'int',        'not null' => TRUE,        'default' => 0)      ),    'indexes' => array(      'nid' => array('nid'),      'uid' => array('uid')      ),    'primary key' => array('vid'),    );  $schema['node_type'] = array(    'description' => 'Stores information about all defined {node} types.',    'fields' => array(      'type' => array(        'description' => 'The machine-readable name of this type.',        'type' => 'varchar',        'length' => 32,        'not null' => TRUE),      'name' => array(        'description' => 'The human-readable name of this type.',        'type' => 'varchar',        'length' => 255,        'not null' => TRUE,        'default' => ''),      'module' => array(        'description' => 'The base string used to construct callbacks corresponding to this node type.',        'type' => 'varchar',        'length' => 255,        'not null' => TRUE),      'description'    => array(        'description' => 'A brief description of this type.',        'type' => 'text',        'not null' => TRUE,        'size' => 'medium'),      'help' => array(        'description' => 'Help information shown to the user when creating a {node} of this type.',        'type' => 'text',        'not null' => TRUE,        'size' => 'medium'),      'has_title' => array(        'description' => 'Boolean indicating whether this type uses the {node}.title field.',        'type' => 'int',        'unsigned' => TRUE,        'not null' => TRUE,        'size' => 'tiny'),      'title_label' => array(        'description' => 'The label displayed for the title field on the edit form.',        'type' => 'varchar',        'length' => 255,        'not null' => TRUE,        'default' => ''),      'has_body' => array(        'description' => 'Boolean indicating whether this type uses the {node_revisions}.body field.',        'type' => 'int',        'unsigned' => TRUE,        'not null' => TRUE,        'size' => 'tiny'),      'body_label' => array(        'description' => 'The label displayed for the body field on the edit form.',        'type' => 'varchar',        'length' => 255,        'not null' => TRUE,        'default' => ''),      'min_word_count' => array(        'description' => 'The minimum number of words the body must contain.',        'type' => 'int',        'unsigned' => TRUE,        'not null' => TRUE,        'size' => 'small'),      'custom' => array(        'description' => 'A boolean indicating whether this type is defined by a module (FALSE) or by a user via a module like the Content Construction Kit (TRUE).',        'type' => 'int',        'not null' => TRUE,        'default' => 0,        'size' => 'tiny'),      'modified' => array(        'description' => 'A boolean indicating whether this type has been modified by an administrator; currently not used in any way.',        'type' => 'int',        'not null' => TRUE,        'default' => 0,        'size' => 'tiny'),      'locked' => array(        'description' => 'A boolean indicating whether the administrator can change the machine name of this type.',        'type' => 'int',        'not null' => TRUE,        'default' => 0,        'size' => 'tiny'),      'orig_type' => array(        'description' => 'The original machine-readable name of this node type. This may be different from the current type name if the locked field is 0.',        'type' => 'varchar',        'length' => 255,        'not null' => TRUE,        'default' => '')      ),    'primary key' => array('type'),    );  return $schema;}
<?php// $Id$/** * @file * Drupal XML-RPC library. Based on the IXR - The Incutio XML-RPC Library - (c) Incutio Ltd 2002-2005 * Version 1.7 (beta) - Simon Willison, 23rd May 2005 * Site:   http://scripts.incutio.com/xmlrpc/ * Manual: http://scripts.incutio.com/xmlrpc/manual.php * This version is made available under the GNU GPL License *//** * Recursively turn a data structure into objects with 'data' and 'type' attributes. * * @param $data *   The data structure. * @param  $type *   Optional type assign to $data. * @return *   Object. */function xmlrpc_value($data, $type = FALSE) {  $xmlrpc_value = new stdClass();  $xmlrpc_value->data = $data;  if (!$type) {    $type = xmlrpc_value_calculate_type($xmlrpc_value);  }  $xmlrpc_value->type = $type;  if ($type == 'struct') {    // Turn all the values in the array into new xmlrpc_values    foreach ($xmlrpc_value->data as $key => $value) {      $xmlrpc_value->data[$key] = xmlrpc_value($value);    }  }  if ($type == 'array') {    for ($i = 0, $j = count($xmlrpc_value->data); $i < $j; $i++) {      $xmlrpc_value->data[$i] = xmlrpc_value($xmlrpc_value->data[$i]);    }  }  return $xmlrpc_value;}/** * Map PHP type to XML-RPC type. * * @param $xmlrpc_value *   Variable whose type should be mapped. * @return *   XML-RPC type as string. * @see *   http://www.xmlrpc.com/spec#scalars */function xmlrpc_value_calculate_type(&$xmlrpc_value) {  // http://www.php.net/gettype: Never use gettype() to test for a certain type [...] Instead, use the is_* functions.  if (is_bool($xmlrpc_value->data)) {    return 'boolean';  }  if (is_double($xmlrpc_value->data)) {    return 'double';  }  if (is_int($xmlrpc_value->data)) {      return 'int';  }  if (is_array($xmlrpc_value->data)) {    // empty or integer-indexed arrays are 'array', string-indexed arrays 'struct'    return empty($xmlrpc_value->data) || range(0, count($xmlrpc_value->data) - 1) === array_keys($xmlrpc_value->data) ? 'array' : 'struct';  }  if (is_object($xmlrpc_value->data)) {    if ($xmlrpc_value->data->is_date) {      return 'date';    }    if ($xmlrpc_value->data->is_base64) {      return 'base64';    }    $xmlrpc_value->data = get_object_vars($xmlrpc_value->data);    return 'struct';  }  // default  return 'string';}/** * Generate XML representing the given value. * * @param $xmlrpc_value * @return *   XML representation of value. */function xmlrpc_value_get_xml($xmlrpc_value) {  switch ($xmlrpc_value->type) {    case 'boolean':      return '<boolean>'. (($xmlrpc_value->data) ? '1' : '0') .'</boolean>';      break;    case 'int':      return '<int>'. $xmlrpc_value->data .'</int>';      break;    case 'double':      return '<double>'. $xmlrpc_value->data .'</double>';      break;    case 'string':      // Note: we don't escape apostrophes because of the many blogging clients      // that don't support numerical entities (and XML in general) properly.      return '<string>'. htmlspecialchars($xmlrpc_value->data) .'</string>';      break;    case 'array':      $return = '<array><data>'."\n";      foreach ($xmlrpc_value->data as $item) {        $return .= '  <value>'. xmlrpc_value_get_xml($item) ."</value>\n";      }      $return .= '</data></array>';      return $return;      break;    case 'struct':      $return = '<struct>'."\n";      foreach ($xmlrpc_value->data as $name => $value) {        $return .= "  <member><name>". check_plain($name) ."</name><value>";        $return .= xmlrpc_value_get_xml($value) ."</value></member>\n";      }      $return .= '</struct>';      return $return;      break;    case 'date':      return xmlrpc_date_get_xml($xmlrpc_value->data);      break;    case 'base64':      return xmlrpc_base64_get_xml($xmlrpc_value->data);      break;  }  return FALSE;}/** * Construct an object representing an XML-RPC message. * * @param $message *   String containing XML as defined at http://www.xmlrpc.com/spec * @return *   Object */function xmlrpc_message($message) {  $xmlrpc_message = new stdClass();  $xmlrpc_message->array_structs = array();   // The stack used to keep track of the current array/struct  $xmlrpc_message->array_structs_types = array(); // The stack used to keep track of if things are structs or array  $xmlrpc_message->current_struct_name = array();  // A stack as well  $xmlrpc_message->message = $message;  return $xmlrpc_message;}/** * Parse an XML-RPC message. If parsing fails, the faultCode and faultString * will be added to the message object. * * @param $xmlrpc_message *   Object generated by xmlrpc_message() * @return *   TRUE if parsing succeeded; FALSE otherwise */function xmlrpc_message_parse(&$xmlrpc_message) {  // First remove the XML declaration  $xmlrpc_message->message = preg_replace('/<\?xml(.*)?\?'.'>/', '', $xmlrpc_message->message);  if (trim($xmlrpc_message->message) == '') {    return FALSE;  }  $xmlrpc_message->_parser = xml_parser_create();  // Set XML parser to take the case of tags into account.  xml_parser_set_option($xmlrpc_message->_parser, XML_OPTION_CASE_FOLDING, FALSE);  // Set XML parser callback functions  xml_set_element_handler($xmlrpc_message->_parser, 'xmlrpc_message_tag_open', 'xmlrpc_message_tag_close');  xml_set_character_data_handler($xmlrpc_message->_parser, 'xmlrpc_message_cdata');  xmlrpc_message_set($xmlrpc_message);  if (!xml_parse($xmlrpc_message->_parser, $xmlrpc_message->message)) {    return FALSE;  }  xml_parser_free($xmlrpc_message->_parser);  // Grab the error messages, if any  $xmlrpc_message = xmlrpc_message_get();  if ($xmlrpc_message->messagetype == 'fault') {    $xmlrpc_message->fault_code = $xmlrpc_message->params[0]['faultCode'];    $xmlrpc_message->fault_string = $xmlrpc_message->params[0]['faultString'];  }  return TRUE;}/** * Store a copy of the $xmlrpc_message object temporarily. * * @param $value *   Object * @return *   The most recently stored $xmlrpc_message */function xmlrpc_message_set($value = NULL) {  static $xmlrpc_message;  if ($value) {    $xmlrpc_message = $value;  }  return $xmlrpc_message;}function xmlrpc_message_get() {  return xmlrpc_message_set();}function xmlrpc_message_tag_open($parser, $tag, $attr) {  $xmlrpc_message = xmlrpc_message_get();  $xmlrpc_message->current_tag_contents = '';  $xmlrpc_message->last_open = $tag;  switch ($tag) {    case 'methodCall':    case 'methodResponse':    case 'fault':      $xmlrpc_message->messagetype = $tag;      break;    // Deal with stacks of arrays and structs    case 'data':      $xmlrpc_message->array_structs_types[] = 'array';      $xmlrpc_message->array_structs[] = array();      break;    case 'struct':      $xmlrpc_message->array_structs_types[] = 'struct';      $xmlrpc_message->array_structs[] = array();      break;  }  xmlrpc_message_set($xmlrpc_message);}function xmlrpc_message_cdata($parser, $cdata) {  $xmlrpc_message = xmlrpc_message_get();  $xmlrpc_message->current_tag_contents .= $cdata;  xmlrpc_message_set($xmlrpc_message);}function xmlrpc_message_tag_close($parser, $tag) {  $xmlrpc_message = xmlrpc_message_get();  $value_flag = FALSE;  switch ($tag) {    case 'int':    case 'i4':      $value = (int)trim($xmlrpc_message->current_tag_contents);      $value_flag = TRUE;      break;    case 'double':      $value = (double)trim($xmlrpc_message->current_tag_contents);      $value_flag = TRUE;      break;    case 'string':      $value = $xmlrpc_message->current_tag_contents;      $value_flag = TRUE;      break;    case 'dateTime.iso8601':      $value = xmlrpc_date(trim($xmlrpc_message->current_tag_contents));      // $value = $iso->getTimestamp();      $value_flag = TRUE;      break;    case 'value':      // If no type is indicated, the type is string      // We take special care for empty values      if (trim($xmlrpc_message->current_tag_contents) != '' || (isset($xmlrpc_message->last_open) && ($xmlrpc_message->last_open == 'value'))) {        $value = (string)$xmlrpc_message->current_tag_contents;        $value_flag = TRUE;      }      unset($xmlrpc_message->last_open);      break;    case 'boolean':      $value = (boolean)trim($xmlrpc_message->current_tag_contents);      $value_flag = TRUE;      break;    case 'base64':      $value = base64_decode(trim($xmlrpc_message->current_tag_contents));      $value_flag = TRUE;      break;    // Deal with stacks of arrays and structs    case 'data':    case 'struct':      $value = array_pop($xmlrpc_message->array_structs );      array_pop($xmlrpc_message->array_structs_types);      $value_flag = TRUE;      break;    case 'member':      array_pop($xmlrpc_message->current_struct_name);      break;    case 'name':      $xmlrpc_message->current_struct_name[] = trim($xmlrpc_message->current_tag_contents);      break;    case 'methodName':      $xmlrpc_message->methodname = trim($xmlrpc_message->current_tag_contents);      break;  }  if ($value_flag) {    if (count($xmlrpc_message->array_structs ) > 0) {      // Add value to struct or array      if ($xmlrpc_message->array_structs_types[count($xmlrpc_message->array_structs_types)-1] == 'struct') {        // Add to struct        $xmlrpc_message->array_structs [count($xmlrpc_message->array_structs )-1][$xmlrpc_message->current_struct_name[count($xmlrpc_message->current_struct_name)-1]] = $value;      }      else {        // Add to array        $xmlrpc_message->array_structs [count($xmlrpc_message->array_structs )-1][] = $value;      }    }    else {      // Just add as a parameter      $xmlrpc_message->params[] = $value;    }  }  if (!in_array($tag, array("data", "struct", "member"))) {    $xmlrpc_message->current_tag_contents = '';  }  xmlrpc_message_set($xmlrpc_message);}/** * Construct an object representing an XML-RPC request * * @param $method *   The name of the method to be called * @param $args *   An array of parameters to send with the method. * @return *   Object */function xmlrpc_request($method, $args) {  $xmlrpc_request = new stdClass();  $xmlrpc_request->method = $method;  $xmlrpc_request->args = $args;  $xmlrpc_request->xml = <<<EOD<?xml version="1.0"?><methodCall><methodName>{$xmlrpc_request->method}</methodName><params>EOD;  foreach ($xmlrpc_request->args as $arg) {    $xmlrpc_request->xml .= '<param><value>';    $v = xmlrpc_value($arg);    $xmlrpc_request->xml .= xmlrpc_value_get_xml($v);    $xmlrpc_request->xml .= "</value></param>\n";  }  $xmlrpc_request->xml .= '</params></methodCall>';  return $xmlrpc_request;}function xmlrpc_error($code = NULL, $message = NULL, $reset = FALSE) {  static $xmlrpc_error;  if (isset($code)) {    $xmlrpc_error = new stdClass();    $xmlrpc_error->is_error = TRUE;    $xmlrpc_error->code = $code;    $xmlrpc_error->message = $message;  }  elseif ($reset) {    $xmlrpc_error = NULL;  }  return $xmlrpc_error;}function xmlrpc_error_get_xml($xmlrpc_error) {  return <<<EOD<methodResponse>  <fault>  <value>    <struct>    <member>      <name>faultCode</name>      <value><int>{$xmlrpc_error->code}</int></value>    </member>    <member>      <name>faultString</name>      <value><string>{$xmlrpc_error->message}</string></value>    </member>    </struct>  </value>  </fault></methodResponse>EOD;}function xmlrpc_date($time) {  $xmlrpc_date = new stdClass();  $xmlrpc_date->is_date = TRUE;  // $time can be a PHP timestamp or an ISO one  if (is_numeric($time)) {    $xmlrpc_date->year = gmdate('Y', $time);    $xmlrpc_date->month = gmdate('m', $time);    $xmlrpc_date->day = gmdate('d', $time);    $xmlrpc_date->hour = gmdate('H', $time);    $xmlrpc_date->minute = gmdate('i', $time);    $xmlrpc_date->second = gmdate('s', $time);    $xmlrpc_date->iso8601 = gmdate('Ymd\TH:i:s', $time);  }  else {    $xmlrpc_date->iso8601 = $time;    $time = str_replace(array('-', ':'), '', $time);    $xmlrpc_date->year = substr($time, 0, 4);    $xmlrpc_date->month = substr($time, 4, 2);    $xmlrpc_date->day = substr($time, 6, 2);    $xmlrpc_date->hour = substr($time, 9, 2);    $xmlrpc_date->minute = substr($time, 11, 2);    $xmlrpc_date->second = substr($time, 13, 2);  }  return $xmlrpc_date;}function xmlrpc_date_get_xml($xmlrpc_date) {  return '<dateTime.iso8601>'. $xmlrpc_date->year . $xmlrpc_date->month . $xmlrpc_date->day .'T'. $xmlrpc_date->hour .':'. $xmlrpc_date->minute .':'. $xmlrpc_date->second .'</dateTime.iso8601>';}function xmlrpc_base64($data) {  $xmlrpc_base64 = new stdClass();  $xmlrpc_base64->is_base64 = TRUE;  $xmlrpc_base64->data = $data;  return $xmlrpc_base64;}function xmlrpc_base64_get_xml($xmlrpc_base64) {  return '<base64>'. base64_encode($xmlrpc_base64->data) .'</base64>';}/** * Execute an XML remote procedural call. This is private function; call xmlrpc() * in common.inc instead of this function. * * @return *   A $xmlrpc_message object if the call succeeded; FALSE if the call failed */function _xmlrpc() {  $args = func_get_args();  $url = array_shift($args);  xmlrpc_clear_error();  if (is_array($args[0])) {    $method = 'system.multicall';    $multicall_args = array();    foreach ($args[0] as $call) {      $multicall_args[] = array('methodName' => array_shift($call), 'params' => $call);    }    $args = array($multicall_args);  }  else {    $method = array_shift($args);  }  $xmlrpc_request = xmlrpc_request($method, $args);  $result = drupal_http_request($url, array("Content-Type" => "text/xml"), 'POST', $xmlrpc_request->xml);  if ($result->code != 200) {    xmlrpc_error($result->code, $result->error);    return FALSE;  }  $message = xmlrpc_message($result->data);  // Now parse what we've got back  if (!xmlrpc_message_parse($message)) {    // XML error    xmlrpc_error(-32700, t('Parse error. Not well formed'));    return FALSE;  }  // Is the message a fault?  if ($message->messagetype == 'fault') {    xmlrpc_error($message->fault_code, $message->fault_string);    return FALSE;  }  // Message must be OK  return $message->params[0];}/** * Returns the last XML-RPC client error number */function xmlrpc_errno() {  $error = xmlrpc_error();  return ($error != NULL ? $error->code : NULL);}/** * Returns the last XML-RPC client error message */function xmlrpc_error_msg() {  $error = xmlrpc_error();  return ($error != NULL ? $error->message : NULL);}/** * Clears any previous error. */function xmlrpc_clear_error() {  xmlrpc_error(NULL, NULL, TRUE);}
<?php// $Id$?><!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.0 Strict//EN" "http://www.w3.org/TR/xhtml1/DTD/xhtml1-strict.dtd"><html xmlns="http://www.w3.org/1999/xhtml" lang="<?php print $language->language ?>" xml:lang="<?php print $language->language ?>" dir="<?php print $language->dir ?>"><head>  <?php print $head ?>  <title><?php print $head_title ?></title>  <?php print $styles ?>  <?php print $scripts ?>  <script type="text/javascript"><?php /* Needed to avoid Flash of Unstyle Content in IE */ ?> </script></head><body><table border="0" cellpadding="0" cellspacing="0" id="header">  <tr>    <td id="logo">      <?php if ($logo) { ?><a href="<?php print $front_page ?>" title="<?php print t('Home') ?>"><img src="<?php print $logo ?>" alt="<?php print t('Home') ?>" /></a><?php } ?>      <?php if ($site_name) { ?><h1 class='site-name'><a href="<?php print $front_page ?>" title="<?php print t('Home') ?>"><?php print $site_name ?></a></h1><?php } ?>      <?php if ($site_slogan) { ?><div class='site-slogan'><?php print $site_slogan ?></div><?php } ?>    </td>    <td id="menu">      <?php if (isset($secondary_links)) { ?><?php print theme('links', $secondary_links, array('class' => 'links', 'id' => 'subnavlist')) ?><?php } ?>      <?php if (isset($primary_links)) { ?><?php print theme('links', $primary_links, array('class' => 'links', 'id' => 'navlist')) ?><?php } ?>      <?php print $search_box ?>    </td>  </tr>  <tr>    <td colspan="2"><div><?php print $header ?></div></td>  </tr></table><table border="0" cellpadding="0" cellspacing="0" id="content">  <tr>    <?php if ($left) { ?><td id="sidebar-left">      <?php print $left ?>    </td><?php } ?>    <td valign="top">      <?php if ($mission) { ?><div id="mission"><?php print $mission ?></div><?php } ?>      <div id="main">        <?php print $breadcrumb ?>        <h1 class="title"><?php print $title ?></h1>        <div class="tabs"><?php print $tabs ?></div>        <?php if ($show_messages) { print $messages; } ?>        <?php print $help ?>        <?php print $content; ?>        <?php print $feed_icons; ?>      </div>    </td>    <?php if ($right) { ?><td id="sidebar-right">      <?php print $right ?>    </td><?php } ?>  </tr></table><div id="footer">  <?php print $footer_message ?>  <?php print $footer ?></div><?php print $closure ?></body></html>
<?php// $Id$/** * @file *   Add language handling functionality and enables the translation of the *   user interface to languages other than English. * *   When enabled, multiple languages can be set up. The site interface *   can be displayed in different languages, as well as nodes can have languages *   assigned. The setup of languages and translations is completely web based. *   Gettext portable object files are supported. */// ---------------------------------------------------------------------------------// Hook implementations/** * Implementation of hook_help(). */function locale_help($path, $arg) {  switch ($path) {    case 'admin/help#locale':      $output = '<p>'. t('The locale module allows your Drupal site to be presented in languages other than the default English, a defining feature of multi-lingual websites. The locale module works by examining text as it is about to be displayed: when a translation of the text is available in the language to be displayed, the translation is displayed rather than the original text. When a translation is unavailable, the original text is displayed, and then stored for later review by a translator.') .'</p>';      $output .= '<p>'. t('Beyond translation of the Drupal interface, the locale module provides a feature set tailored to the needs of a multi-lingual site. Language negotiation allows your site to automatically change language based on the domain or path used for each request. Users may (optionally) select their preferred language on their <em>My account</em> page, and your site can be configured to honor a web browser\'s preferred language settings. Your site content can be created in (and translated to) any enabled language, and each post may have a language-appropriate alias for each of its translations. The locale module works in concert with the <a href="@content-help">content translation module</a> to manage translated content.', array('@content-help' => url('admin/help/translation'))) .'</p>';      $output .= '<p>'. t('Translations may be provided by:') .'</p>';      $output .= '<ul><li>'. t("translating the original text via the locale module's integrated web interface, or") .'</li>';      $output .= '<li>'. t('importing files from a set of existing translations, known as a translation package. A translation package enables the display of a specific version of Drupal in a specific language, and contain files in the Gettext Portable Object (<em>.po</em>) format. Although not all languages are available for every version of Drupal, translation packages for many languages are available for download from the <a href="@translations">Drupal translation page</a>.', array('@translations' => 'http://drupal.org/project/translations')) .'</li></ul>';      $output .= '<p>'. t('If an existing translation package does not meet your needs, the Gettext Portable Object (<em>.po</em>) files within a package may be modified, or new <em>.po</em> files may be created, using a desktop Gettext editor. The locale module\'s <a href="@import">import</a> feature allows the translated strings from a new or modified <em>.po</em> file to be added to your site. The locale module\'s <a href="@export">export</a> feature generates files from your site\'s translated strings, that can either be shared with others or edited offline by a Gettext translation editor.', array('@import' => url('admin/build/translate/import'), '@export' => url('admin/build/translate/export'))) .'</p>';      $output .= '<p>'. t('For more information, see the online handbook entry for <a href="@locale">Locale module</a>.', array('@locale' => 'http://drupal.org/handbook/modules/locale/')) .'</p>';      return $output;    case 'admin/settings/language':      $output = '<p>'. t("This page provides an overview of your site's enabled languages. If multiple languages are available and enabled, the text on your site interface may be translated, registered users may select their preferred language on the <em>My account</em> page, and site authors may indicate a specific language when creating posts. The site's default language is used for anonymous visitors and for users who have not selected a preferred language.") .'</p>';      $output .= '<p>'. t('For each language available on the site, use the <em>edit</em> link to configure language details, including name, an optional language-specific path or domain, and whether the language is natively presented either left-to-right or right-to-left. These languages also appear in the <em>Language</em> selection when creating a post of a content type with multilingual support.') .'</p>';      $output .= '<p>'. t('Use the <a href="@add-language">add language page</a> to enable additional languages (and automatically import files from a translation package, if available), the <a href="@search">translate interface page</a> to locate strings for manual translation, or the <a href="@import">import page</a> to add translations from individual <em>.po</em> files. A number of contributed translation packages containing <em>.po</em> files are available on the <a href="@translations">Drupal.org translations page</a>.', array('@add-language' => url('admin/settings/language/add'), '@search' => url('admin/build/translate/search'), '@import' => url('admin/build/translate/import'), '@translations' => 'http://drupal.org/project/translations')) .'</p>';      return $output;    case 'admin/settings/language/add':      return '<p>'. t('Add all languages to be supported by your site. If your desired language is not available in the <em>Language name</em> drop-down, click <em>Custom language</em> and provide a language code and other details manually. When providing a language code manually, be sure to enter a standardized language code, since this code may be used by browsers to determine an appropriate display language.') .'</p>';    case 'admin/settings/language/configure':      $output = '<p>'. t("Language negotiation settings determine the site's presentation language. Available options include:") .'</p>';      $output .= '<ul><li>'. t('<strong>None.</strong> The default language is used for site presentation, though users may (optionally) select a preferred language on the <em>My Account</em> page. (User language preferences will be used for site e-mails, if available.)') .'</li>';      $output .= '<li>'. t('<strong>Path prefix only.</strong> The presentation language is determined by examining the path for a language code or other custom string that matches the path prefix (if any) specified for each language. If a suitable prefix is not identified, the default language is used. <em>Example: "example.com/de/contact" sets presentation language to German based on the use of "de" within the path.</em>') .'</li>';      $output .= '<li>'. t("<strong>Path prefix with language fallback.</strong> The presentation language is determined by examining the path for a language code or other custom string that matches the path prefix (if any) specified for each language. If a suitable prefix is not identified, the display language is determined by the user's language preferences from the <em>My Account</em> page, or by the browser's language settings. If a presentation language cannot be determined, the default language is used.") .'</li>';      $output .= '<li>'. t('<strong>Domain name only.</strong> The presentation language is determined by examining the domain used to access the site, and comparing it to the language domain (if any) specified for each language. If a match is not identified, the default language is used. <em>Example: "http://de.example.com/contact" sets presentation language to German based on the use of "http://de.example.com" in the domain.</em>') .'</li></ul>';      $output .= '<p>'. t('The path prefix or domain name for a language may be set by editing the <a href="@languages">available languages</a>. In the absence of an appropriate match, the site is displayed in the <a href="@languages">default language</a>.', array('@languages' => url('admin/settings/language'))) .'</p>';      return $output;    case 'admin/build/translate':      $output = '<p>'. t('This page provides an overview of available translatable strings. Drupal displays translatable strings in text groups; modules may define additional text groups containing other translatable strings. Because text groups provide a method of grouping related strings, they are often used to focus translation efforts on specific areas of the Drupal interface.') .'</p>';      $output .= '<p>'. t('Review the <a href="@languages">languages page</a> for more information on adding support for additional languages.', array('@languages' => url('admin/settings/language'))) .'</p>';      return $output;    case 'admin/build/translate/import':      $output = '<p>'. t('This page imports the translated strings contained in an individual Gettext Portable Object (<em>.po</em>) file. Normally distributed as part of a translation package (each translation package may contain several <em>.po</em> files), a <em>.po</em> file may need to be imported after off-line editing in a Gettext translation editor. Importing an individual <em>.po</em> file may be a lengthy process.') .'</p>';      $output .= '<p>'. t('Note that the <em>.po</em> files within a translation package are imported automatically (if available) when new modules or themes are enabled, or as new languages are added. Since this page only allows the import of one <em>.po</em> file at a time, it may be simpler to download and extract a translation package into your Drupal installation directory and <a href="@language-add">add the language</a> (which automatically imports all <em>.po</em> files within the package). Translation packages are available for download on the <a href="@translations">Drupal translation page</a>.', array('@language-add' => url('admin/settings/language/add'), '@translations' => 'http://drupal.org/project/translations')) .'</p>';      return $output;    case 'admin/build/translate/export':      return '<p>'. t('This page exports the translated strings used by your site. An export file may be in Gettext Portable Object (<em>.po</em>) form, which includes both the original string and the translation (used to share translations with others), or in Gettext Portable Object Template (<em>.pot</em>) form, which includes the original strings only (used to create new translations with a Gettext translation editor).') .'</p>';    case 'admin/build/translate/search':      return '<p>'. t('This page allows a translator to search for specific translated and untranslated strings, and is used when creating or editing translations. (Note: For translation tasks involving many strings, it may be more convenient to <a href="@export">export</a> strings for off-line editing in a desktop Gettext translation editor.) Searches may be limited to strings found within a specific text group or in a specific language.', array('@export' => url('admin/build/translate/export'))) .'</p>';    case 'admin/build/block/configure':      if ($arg[4] == 'locale' && $arg[5] == 0) {        return '<p>'. t('This block is only shown if <a href="@languages">at least two languages are enabled</a> and <a href="@configuration">language negotiation</a> is set to something other than <em>None</em>.', array('@languages' => url('admin/settings/language'), '@configuration' => url('admin/settings/language/configure'))) .'</p>';      }      break;  }}/** * Implementation of hook_menu(). * * Locale module only provides administrative menu items, so all * menu items are invoked through locale_inc_callback(). */function locale_menu() {  // Manage languages  $items['admin/settings/language'] = array(    'title' => 'Languages',    'description' => 'Configure languages for content and the user interface.',    'page callback' => 'locale_inc_callback',    'page arguments' => array('drupal_get_form', 'locale_languages_overview_form'),    'access arguments' => array('administer languages'),  );  $items['admin/settings/language/overview'] = array(    'title' => 'List',    'weight' => 0,    'type' => MENU_DEFAULT_LOCAL_TASK,  );  $items['admin/settings/language/add'] = array(    'title' => 'Add language',    'page callback' => 'locale_inc_callback',    'page arguments' => array('locale_languages_add_screen'), // two forms concatenated    'access arguments' => array('administer languages'),    'weight' => 5,    'type' => MENU_LOCAL_TASK,  );  $items['admin/settings/language/configure'] = array(    'title' => 'Configure',    'page callback' => 'locale_inc_callback',    'page arguments' => array('drupal_get_form', 'locale_languages_configure_form'),    'access arguments' => array('administer languages'),    'weight' => 10,    'type' => MENU_LOCAL_TASK,  );  $items['admin/settings/language/edit/%'] = array(    'title' => 'Edit language',    'page callback' => 'locale_inc_callback',    'page arguments' => array('drupal_get_form', 'locale_languages_edit_form', 4),    'access arguments' => array('administer languages'),    'type' => MENU_CALLBACK,  );  $items['admin/settings/language/delete/%'] = array(    'title' => 'Confirm',    'page callback' => 'locale_inc_callback',    'page arguments' => array('drupal_get_form', 'locale_languages_delete_form', 4),    'access arguments' => array('administer languages'),    'type' => MENU_CALLBACK,  );  // Translation functionality  $items['admin/build/translate'] = array(    'title' => 'Translate interface',    'description' => 'Translate the built in interface and optionally other text.',    'page callback' => 'locale_inc_callback',    'page arguments' => array('locale_translate_overview_screen'), // not a form, just a table    'access arguments' => array('translate interface'),  );  $items['admin/build/translate/overview'] = array(    'title' => 'Overview',    'weight' => 0,    'type' => MENU_DEFAULT_LOCAL_TASK,  );  $items['admin/build/translate/search'] = array(    'title' => 'Search',    'weight' => 10,    'type' => MENU_LOCAL_TASK,    'page callback' => 'locale_inc_callback',    'page arguments' => array('locale_translate_seek_screen'), // search results and form concatenated    'access arguments' => array('translate interface'),  );  $items['admin/build/translate/import'] = array(    'title' => 'Import',    'page callback' => 'locale_inc_callback',    'page arguments' => array('drupal_get_form', 'locale_translate_import_form'),    'access arguments' => array('translate interface'),    'weight' => 20,    'type' => MENU_LOCAL_TASK,  );  $items['admin/build/translate/export'] = array(    'title' => 'Export',    'page callback' => 'locale_inc_callback',    'page arguments' => array('locale_translate_export_screen'), // possibly multiple forms concatenated    'access arguments' => array('translate interface'),    'weight' => 30,    'type' => MENU_LOCAL_TASK,  );  $items['admin/build/translate/edit/%'] = array(    'title' => 'Edit string',    'page callback' => 'locale_inc_callback',    'page arguments' => array('drupal_get_form', 'locale_translate_edit_form', 4),    'access arguments' => array('translate interface'),    'type' => MENU_CALLBACK,  );  $items['admin/build/translate/delete/%'] = array(    'title' => 'Delete string',    'page callback' => 'locale_inc_callback',    'page arguments' => array('locale_translate_delete_page', 4),    'access arguments' => array('translate interface'),    'type' => MENU_CALLBACK,  );  return $items;}/** * Wrapper function to be able to set callbacks in locale.inc */function locale_inc_callback() {  $args = func_get_args();  $function = array_shift($args);  include_once './includes/locale.inc';  return call_user_func_array($function, $args);}/** * Implementation of hook_perm(). */function locale_perm() {  return array('administer languages', 'translate interface');}/** * Implementation of hook_locale(). */function locale_locale($op = 'groups') {  switch ($op) {    case 'groups':      return array('default' => t('Built-in interface'));  }}/** * Implementation of hook_user(). */function locale_user($type, $edit, &$user, $category = NULL) {  global $language;  // If we have more then one language and either creating a user on the  // admin interface or edit the user, show the language selector.  if (variable_get('language_count', 1) > 1 && ($type == 'register' && user_access('administer users') || $type == 'form' && $category == 'account' )) {    $languages = language_list('enabled');    $languages = $languages[1];    // If the user is being created, we set the user language to the page language.    $user_preferred_language = $user ? user_preferred_language($user) : $language;    $names = array();    foreach ($languages as $langcode => $item) {      $name = t($item->name);      $names[check_plain($langcode)] = check_plain($name . ($item->native != $name ? ' ('. $item->native .')' : ''));    }    $form['locale'] = array(      '#type' => 'fieldset',      '#title' => t('Language settings'),      '#weight' => 1,    );    // Get language negotiation settings.    $mode = variable_get('language_negotiation', LANGUAGE_NEGOTIATION_NONE);    $form['locale']['language'] = array(      '#type' => (count($names) <= 5 ? 'radios' : 'select'),      '#title' => t('Language'),      '#default_value' => check_plain($user_preferred_language->language),      '#options' => $names,      '#description' => ($mode == LANGUAGE_NEGOTIATION_PATH) ? t("This account's default language for e-mails, and preferred language for site presentation.") : t("This account's default language for e-mails."),    );    return $form;  }}/** * Implementation of hook_form_alter(). Adds language fields to forms. */function locale_form_alter(&$form, $form_state, $form_id) {  switch ($form_id) {    // Language field for paths    case 'path_admin_form':      $form['language'] = array(        '#type' => 'select',        '#title' => t('Language'),        '#options' => array('' => t('All languages')) + locale_language_list('name'),        '#default_value' => $form['language']['#value'],        '#weight' => -10,        '#description' => t('A path alias set for a specific language will always be used when displaying this page in that language, and takes precedence over path aliases set for <em>All languages</em>.'),      );      break;    // Language setting for content types    case 'node_type_form':      if (isset($form['identity']['type'])) {        $form['workflow']['language_content_type'] = array(          '#type' => 'radios',          '#title' => t('Multilingual support'),          '#default_value' => variable_get('language_content_type_'. $form['#node_type']->type, 0),          '#options' => array(t('Disabled'), t('Enabled')),          '#description' => t('Enable multilingual support for this content type. If enabled, a language selection field will be added to the editing form, allowing you to select from one of the <a href="!languages">enabled languages</a>. If disabled, new posts are saved with the default language. Existing content will not be affected by changing this option.', array('!languages' => url('admin/settings/language'))),        );      }      break;    // Language field for nodes    default:      if (isset($form['#id']) && $form['#id'] == 'node-form') {        if (isset($form['#node']->type) && variable_get('language_content_type_'. $form['#node']->type, 0)) {          $form['language'] = array(            '#type' => 'select',            '#title' => t('Language'),            '#default_value' => (isset($form['#node']->language) ? $form['#node']->language : ''),            '#options' => array('' => t('Language neutral')) + locale_language_list('name'),          );        }        // Node type without language selector: assign the default for new nodes        elseif (!isset($form['#node']->nid)) {          $default = language_default();          $form['language'] = array(            '#type' => 'value',            '#value' => $default->language          );        }      }  }}/** * Implementation of hook_theme() */function locale_theme() {  return array(    'locale_languages_overview_form' => array(      'arguments' => array('form' => array()),    ),  );}/** * Implementation of hook_node_type(). */function locale_node_type($op, $info) {  if ($op == 'delete') {    variable_del('language_content_type_'. $info->type);  }}// ---------------------------------------------------------------------------------// Locale core functionality/** * Provides interface translation services. * * This function is called from t() to translate a string if needed. * * @param $string *   A string to look up translation for. If omitted, all the *   cached strings will be returned in all languages already *   used on the page. * @param $langcode *   Language code to use for the lookup. * @param $reset *   Set to TRUE to reset the in-memory cache. */function locale($string = NULL, $langcode = NULL, $reset = FALSE) {  global $language;  static $locale_t;  if ($reset) {    // Reset in-memory cache.    $locale_t = NULL;  }  if (!isset($string)) {    // Return all cached strings if no string was specified    return $locale_t;  }  $langcode = isset($langcode) ? $langcode : $language->language;  // Store database cached translations in a static var.  if (!isset($locale_t[$langcode])) {    $locale_t[$langcode] = array();    // Disabling the usage of string caching allows a module to watch for    // the exact list of strings used on a page. From a performance    // perspective that is a really bad idea, so we have no user    // interface for this. Be careful when turning this option off!    if (variable_get('locale_cache_strings', 1) == 1) {      if ($cache = cache_get('locale:'. $langcode, 'cache')) {        $locale_t[$langcode] = $cache->data;      }      elseif (lock_acquire('locale_cache_' . $langcode)) {        // Refresh database stored cache of translations for given language.        // We only store short strings used in current version, to improve        // performance and consume less memory.        $result = db_query("SELECT s.source, t.translation, t.language FROM {locales_source} s LEFT JOIN {locales_target} t ON s.lid = t.lid AND t.language = '%s' WHERE s.textgroup = 'default' AND s.version = '%s' AND LENGTH(s.source) < 75", $langcode, VERSION);        while ($data = db_fetch_object($result)) {          $locale_t[$langcode][$data->source] = (empty($data->translation) ? TRUE : $data->translation);        }        cache_set('locale:'. $langcode, $locale_t[$langcode]);        lock_release('locale_cache_' . $langcode);      }    }  }  // If we have the translation cached, skip checking the database  if (!isset($locale_t[$langcode][$string])) {    // We do not have this translation cached, so get it from the DB.    $translation = db_fetch_object(db_query("SELECT s.lid, t.translation, s.version FROM {locales_source} s LEFT JOIN {locales_target} t ON s.lid = t.lid AND t.language = '%s' WHERE s.source = '%s' AND s.textgroup = 'default'", $langcode, $string));    if ($translation) {      // We have the source string at least.      // Cache translation string or TRUE if no translation exists.      $locale_t[$langcode][$string] = (empty($translation->translation) ? TRUE : $translation->translation);      if ($translation->version != VERSION) {        // This is the first use of this string under current Drupal version. Save version        // and clear cache, to include the string into caching next time. Saved version is        // also a string-history information for later pruning of the tables.        db_query("UPDATE {locales_source} SET version = '%s' WHERE lid = %d", VERSION, $translation->lid);        cache_clear_all('locale:', 'cache', TRUE);      }    }    else {      // We don't have the source string, cache this as untranslated.      db_query("INSERT INTO {locales_source} (location, source, textgroup, version) VALUES ('%s', '%s', 'default', '%s')", request_uri(), $string, VERSION);      $locale_t[$langcode][$string] = TRUE;      // Clear locale cache so this string can be added in a later request.      cache_clear_all('locale:', 'cache', TRUE);    }  }  return ($locale_t[$langcode][$string] === TRUE ? $string : $locale_t[$langcode][$string]);}/** * Returns plural form index for a specific number. * * The index is computed from the formula of this language. * * @param $count *   Number to return plural for. * @param $langcode *   Optional language code to translate to a language other than *   what is used to display the page. */function locale_get_plural($count, $langcode = NULL) {  global $language;  static $locale_formula, $plurals = array();  $langcode = $langcode ? $langcode : $language->language;  if (!isset($plurals[$langcode][$count])) {    if (!isset($locale_formula)) {      $language_list = language_list();      $locale_formula[$langcode] = $language_list[$langcode]->formula;    }    if ($locale_formula[$langcode]) {      $n = $count;      $plurals[$langcode][$count] = @eval('return intval('. $locale_formula[$langcode] .');');      return $plurals[$langcode][$count];    }    else {      $plurals[$langcode][$count] = -1;      return -1;    }  }  return $plurals[$langcode][$count];}/** * Returns a language name */function locale_language_name($lang) {  static $list = NULL;  if (!isset($list)) {    $list = locale_language_list();  }  return ($lang && isset($list[$lang])) ? $list[$lang] : t('All');}/** * Returns array of language names * * @param $field *   'name' => names in current language, localized *   'native' => native names * @param $all *   Boolean to return all languages or only enabled ones */function locale_language_list($field = 'name', $all = FALSE) {  if ($all) {    $languages = language_list();  }  else {    $languages = language_list('enabled');    $languages = $languages[1];  }  $list = array();  foreach ($languages as $language) {    $list[$language->language] = ($field == 'name') ? t($language->name) : $language->$field;  }  return $list;}/** * Imports translations when new modules or themes are installed or enabled. * * This function will either import translation for the component change * right away, or start a batch if more files need to be imported. * * @param $components *   An array of component (theme and/or module) names to import *   translations for. */function locale_system_update($components) {  include_once 'includes/locale.inc';  if ($batch = locale_batch_by_component($components)) {    batch_set($batch);  }}/** * Update JavaScript translation file, if required, and add it to the page. * * This function checks all JavaScript files currently added via drupal_add_js() * and invokes parsing if they have not yet been parsed for Drupal.t() * and Drupal.formatPlural() calls. Also refreshes the JavaScript translation * file if necessary, and adds it to the page. */function locale_update_js_files() {  global $language;  $dir = file_create_path(variable_get('locale_js_directory', 'languages'));  $parsed = variable_get('javascript_parsed', array());  // The first three parameters are NULL in order to get an array with all  // scopes. This is necessary to prevent recreation of JS translation files  // when new files are added for example in the footer.  $javascript = drupal_add_js(NULL, NULL, NULL);  $files = $new_files = FALSE;  foreach ($javascript as $scope) {    foreach ($scope as $type => $data) {      if ($type != 'setting' && $type != 'inline') {        foreach ($data as $filepath => $info) {          $files = TRUE;          if (!in_array($filepath, $parsed)) {            // Don't parse our own translations files.            if (substr($filepath, 0, strlen($dir)) != $dir) {              locale_inc_callback('_locale_parse_js_file', $filepath);              $parsed[] = $filepath;              $new_files = TRUE;            }          }        }      }    }  }  // If there are any new source files we parsed, invalidate existing  // JavaScript translation files for all languages, adding the refresh  // flags into the existing array.  if ($new_files) {    $parsed += locale_inc_callback('_locale_invalidate_js');  }  // If necessary, rebuild the translation file for the current language.  if (!empty($parsed['refresh:'. $language->language])) {    // Don't clear the refresh flag on failure, so that another try will    // be performed later.    if (locale_inc_callback('_locale_rebuild_js')) {      unset($parsed['refresh:'. $language->language]);    }    // Store any changes after refresh was attempted.    variable_set('javascript_parsed', $parsed);  }  // If no refresh was attempted, but we have new source files, we need  // to store them too. This occurs if current page is in English.  else if ($new_files) {    variable_set('javascript_parsed', $parsed);  }  // Add the translation JavaScript file to the page.  if ($files && !empty($language->javascript)) {    drupal_add_js($dir .'/'. $language->language .'_'. $language->javascript .'.js', 'core');  }}// ---------------------------------------------------------------------------------// Language switcher block/** * Implementation of hook_block(). * Displays a language switcher. Translation links may be provided by other modules. */function locale_block($op = 'list', $delta = 0) {  if ($op == 'list') {    $block[0]['info'] = t('Language switcher');    // Not worth caching.    $block[0]['cache'] = BLOCK_NO_CACHE;    return $block;  }  // Only show if we have at least two languages and language dependent  // web addresses, so we can actually link to other language versions.  elseif ($op == 'view' && variable_get('language_count', 1) > 1 && variable_get('language_negotiation', LANGUAGE_NEGOTIATION_NONE) != LANGUAGE_NEGOTIATION_NONE) {    $path = drupal_is_front_page() ? '<front>' : $_GET['q'];    $languages = language_list('enabled');    $links = array();    foreach ($languages[1] as $language) {      $links[$language->language] = array(        'href'       => $path,        'title'      => $language->native,        'language'   => $language,        'attributes' => array('class' => 'language-link'),      );    }    // Allow modules to provide translations for specific links.    // A translation link may need to point to a different path or use    // a translated link text before going through l(), which will just    // handle the path aliases.    drupal_alter('translation_link', $links, $path);    $block['subject'] = t('Languages');    $block['content'] = theme('links', $links, array());    return $block;  }}
<?php// $Id$/** * @file Batch processing API for processes to run in multiple HTTP requests. *//** * State-based dispatcher for the batch processing page. */function _batch_page() {  $batch =& batch_get();  // Retrieve the current state of batch from db.  if (isset($_REQUEST['id']) && $data = db_result(db_query("SELECT batch FROM {batch} WHERE bid = %d AND token = '%s'", $_REQUEST['id'], drupal_get_token($_REQUEST['id'])))) {    $batch = unserialize($data);  }  else {    return FALSE;  }  // Register database update for end of processing.  register_shutdown_function('_batch_shutdown');  $op = isset($_REQUEST['op']) ? $_REQUEST['op'] : '';  $output = NULL;  switch ($op) {    case 'start':      $output = _batch_start();      break;    case 'do':      // JS-version AJAX callback.      _batch_do();      break;    case 'do_nojs':      // Non-JS progress page.      $output = _batch_progress_page_nojs();      break;    case 'finished':      $output = _batch_finished();      break;  }  return $output;}/** * Initiate the batch processing */function _batch_start() {  // Choose between the JS and non-JS version.  // JS-enabled users are identified through the 'has_js' cookie set in drupal.js.  // If the user did not visit any JS enabled page during his browser session,  // he gets the non-JS version...  if (isset($_COOKIE['has_js']) && $_COOKIE['has_js']) {    return _batch_progress_page_js();  }  else {    return _batch_progress_page_nojs();  }}/** * Batch processing page with JavaScript support. */function _batch_progress_page_js() {  $batch = batch_get();  // The first batch set gets to set the page title  // and the initialization and error messages.  $current_set = _batch_current_set();  drupal_set_title($current_set['title']);  drupal_add_js('misc/progress.js', 'core', 'header', FALSE, FALSE);  $url = url($batch['url'], array('query' => array('id' => $batch['id'])));  $js_setting = array(    'batch' => array(      'errorMessage' => $current_set['error_message'] .'<br/>'. $batch['error_message'],      'initMessage' => $current_set['init_message'],      'uri' => $url,    ),  );  drupal_add_js($js_setting, 'setting');  drupal_add_js('misc/batch.js', 'core', 'header', FALSE, FALSE);  $output = '<div id="progress"></div>';  return $output;}/** * Do one pass of execution and inform back the browser about progression * (used for JavaScript-mode only). */function _batch_do() {  // HTTP POST required  if ($_SERVER['REQUEST_METHOD'] != 'POST') {    drupal_set_message(t('HTTP POST is required.'), 'error');    drupal_set_title(t('Error'));    return '';  }  // Perform actual processing.  list($percentage, $message) = _batch_process();  drupal_json(array('status' => TRUE, 'percentage' => $percentage, 'message' => $message));}/** * Batch processing page without JavaScript support. */function _batch_progress_page_nojs() {  $batch =& batch_get();  $current_set = _batch_current_set();  drupal_set_title($current_set['title']);  $new_op = 'do_nojs';  if (!isset($batch['running'])) {    // This is the first page so we return some output immediately.    $percentage = 0;    $message = $current_set['init_message'];    $batch['running'] = TRUE;  }  else {    // This is one of the later requests: do some processing first.    // Error handling: if PHP dies due to a fatal error (e.g. non-existant    // function), it will output whatever is in the output buffer,    // followed by the error message.    ob_start();    $fallback = $current_set['error_message'] .'<br/>'. $batch['error_message'];    $fallback = theme('maintenance_page', $fallback, FALSE, FALSE);    // We strip the end of the page using a marker in the template, so any    // additional HTML output by PHP shows up inside the page rather than    // below it. While this causes invalid HTML, the same would be true if    // we didn't, as content is not allowed to appear after </html> anyway.    list($fallback) = explode('<!--partial-->', $fallback);    print $fallback;    // Perform actual processing.    list($percentage, $message) = _batch_process($batch);    if ($percentage == 100) {      $new_op = 'finished';    }    // PHP did not die : remove the fallback output.    ob_end_clean();  }  $url = url($batch['url'], array('query' => array('id' => $batch['id'], 'op' => $new_op)));  drupal_set_html_head('<meta http-equiv="Refresh" content="0; URL='. $url .'">');  $output = theme('progress_bar', $percentage, $message);  return $output;}/** * Advance batch processing for 1 second (or process the whole batch if it * was not set for progressive execution - e.g forms submitted by drupal_execute). */function _batch_process() {  $batch =& batch_get();  $current_set =& _batch_current_set();  $set_changed = TRUE;  if ($batch['progressive']) {    timer_start('batch_processing');  }  while (!$current_set['success']) {    // If this is the first time we iterate this batch set in the current    // request, we check if it requires an additional file for functions    // definitions.    if ($set_changed && isset($current_set['file']) && is_file($current_set['file'])) {      include_once($current_set['file']);    }    $finished = 1;    $task_message = '';    if ((list($function, $args) = reset($current_set['operations'])) && function_exists($function)) {      // Build the 'context' array, execute the function call,      // and retrieve the user message.      $batch_context = array('sandbox' => &$current_set['sandbox'], 'results' => &$current_set['results'], 'finished' => &$finished, 'message' => &$task_message);      // Process the current operation.      call_user_func_array($function, array_merge($args, array(&$batch_context)));    }    if ($finished == 1) {      // Make sure this step isn't counted double when computing $current.      $finished = 0;      // Remove the operation and clear the sandbox.      array_shift($current_set['operations']);      $current_set['sandbox'] = array();    }    // If the batch set is completed, browse through the remaining sets,    // executing 'control sets' (stored form submit handlers) along the way -    // this might in turn insert new batch sets.    // Stop when we find a set that actually has operations.    $set_changed = FALSE;    $old_set = $current_set;    while (empty($current_set['operations']) && ($current_set['success'] = TRUE) && _batch_next_set()) {      $current_set =& _batch_current_set();      $set_changed = TRUE;    }    // At this point, either $current_set is a 'real' batch set (has operations),    // or all sets have been completed.    // If we're in progressive mode, stop after 1 second.    if ($batch['progressive'] && timer_read('batch_processing') > 1000) {      break;    }  }  if ($batch['progressive']) {    // Gather progress information.    // Reporting 100% progress will cause the whole batch to be considered    // processed. If processing was paused right after moving to a new set,    // we have to use the info from the new (unprocessed) one.    if ($set_changed && isset($current_set['operations'])) {      // Processing will continue with a fresh batch set.      $remaining = count($current_set['operations']);      $total = $current_set['total'];      $progress_message = $current_set['init_message'];      $task_message = '';    }    else {      $remaining = count($old_set['operations']);      $total = $old_set['total'];      $progress_message = $old_set['progress_message'];    }    $current    = $total - $remaining + $finished;    $percentage = $total ? floor($current / $total * 100) : 100;    $values = array(      '@remaining'  => $remaining,      '@total'      => $total,      '@current'    => floor($current),      '@percentage' => $percentage,      );    $message = strtr($progress_message, $values) .'<br/>';    $message .= $task_message ? $task_message : '&nbsp';    return array($percentage, $message);  }  else {    // If we're not in progressive mode, the whole batch has been processed by now.    return _batch_finished();  }}/** * Retrieve the batch set being currently processed. */function &_batch_current_set() {  $batch =& batch_get();  return $batch['sets'][$batch['current_set']];}/** * Move execution to the next batch set if any, executing the stored * form _submit handlers along the way (thus possibly inserting * additional batch sets). */function _batch_next_set() {  $batch =& batch_get();  if (isset($batch['sets'][$batch['current_set'] + 1])) {    $batch['current_set']++;    $current_set =& _batch_current_set();    if (isset($current_set['form_submit']) && ($function = $current_set['form_submit']) && function_exists($function)) {      // We use our stored copies of $form and $form_state, to account for      // possible alteration by the submit handlers.      $function($batch['form'], $batch['form_state']);    }    return TRUE;  }}/** * End the batch processing: * Call the 'finished' callbacks to allow custom handling of results, * and resolve page redirection. */function _batch_finished() {  $batch =& batch_get();  // Execute the 'finished' callbacks for each batch set.  foreach ($batch['sets'] as $key => $batch_set) {    if (isset($batch_set['finished'])) {      // Check if the set requires an additional file for functions definitions.      if (isset($batch_set['file']) && is_file($batch_set['file'])) {        include_once($batch_set['file']);      }      if (function_exists($batch_set['finished'])) {        $batch_set['finished']($batch_set['success'], $batch_set['results'], $batch_set['operations']);      }    }  }  // Cleanup the batch table and unset the global $batch variable.  if ($batch['progressive']) {    db_query("DELETE FROM {batch} WHERE bid = %d", $batch['id']);  }  $_batch = $batch;  $batch = NULL;  // Redirect if needed.  if ($_batch['progressive']) {    // Put back the 'destination' that was saved in batch_process().    if (isset($_batch['destination'])) {      $_REQUEST['destination'] = $_batch['destination'];    }    // Use $_batch['form_state']['redirect'], or $_batch['redirect'],    // or $_batch['source_page'].    if (isset($_batch['form_state']['redirect'])) {      $redirect = $_batch['form_state']['redirect'];    }    elseif (isset($_batch['redirect'])) {      $redirect = $_batch['redirect'];    }    else {      $redirect = $_batch['source_page'];    }    // Let drupal_redirect_form handle redirection logic.    $form = isset($batch['form']) ? $batch['form'] : array();    if (empty($_batch['form_state']['rebuild']) && empty($_batch['form_state']['storage'])) {      drupal_redirect_form($form, $redirect);    }    // We get here if $form['#redirect'] was FALSE, or if the form is a    // multi-step form. We save the final $form_state value to be retrieved    // by drupal_get_form, and we redirect to the originating page.    $_SESSION['batch_form_state'] = $_batch['form_state'];    drupal_goto($_batch['source_page']);  }}/** * Shutdown function: store the batch data for next request, * or clear the table if the batch is finished. */function _batch_shutdown() {  if ($batch = batch_get()) {    db_query("UPDATE {batch} SET batch = '%s' WHERE bid = %d", serialize($batch), $batch['id']);  }}
<?php// $Id$/** * Sets the body-tag class attribute. * * Adds 'sidebar-left', 'sidebar-right' or 'sidebars' classes as needed. */function phptemplate_body_class($left, $right) {  if ($left != '' && $right != '') {    $class = 'sidebars';  }  else {    if ($left != '') {      $class = 'sidebar-left';    }    if ($right != '') {      $class = 'sidebar-right';    }  }  if (isset($class)) {    print ' class="'. $class .'"';  }}/** * Return a themed breadcrumb trail. * * @param $breadcrumb *   An array containing the breadcrumb links. * @return a string containing the breadcrumb output. */function phptemplate_breadcrumb($breadcrumb) {  if (!empty($breadcrumb)) {    return '<div class="breadcrumb">'. implode('  ', $breadcrumb) .'</div>';  }}/** * Override or insert PHPTemplate variables into the templates. */function phptemplate_preprocess_page(&$vars) {  $vars['tabs2'] = menu_secondary_local_tasks();  // Hook into color.module  if (module_exists('color')) {    _color_page_alter($vars);  }}/** * Add a "Comments" heading above comments except on forum pages. */function garland_preprocess_comment_wrapper(&$vars) {  if ($vars['content'] && $vars['node']->type != 'forum') {    $vars['content'] = '<h2 class="comments">'. t('Comments') .'</h2>'.  $vars['content'];  }}/** * Returns the rendered local tasks. The default implementation renders * them as tabs. Overridden to split the secondary tasks. * * @ingroup themeable */function phptemplate_menu_local_tasks() {  return menu_primary_local_tasks();}function phptemplate_comment_submitted($comment) {  return t('!datetime  !username',    array(      '!username' => theme('username', $comment),      '!datetime' => format_date($comment->timestamp)    ));}function phptemplate_node_submitted($node) {  return t('!datetime  !username',    array(      '!username' => theme('username', $node),      '!datetime' => format_date($node->created),    ));}/** * Generates IE CSS links for LTR and RTL languages. */function phptemplate_get_ie_styles() {  global $language;  $iecss = '<link type="text/css" rel="stylesheet" media="all" href="'. base_path() . path_to_theme() .'/fix-ie.css" />';  if ($language->direction == LANGUAGE_RTL) {    $iecss .= '<style type="text/css" media="all">@import "'. base_path() . path_to_theme() .'/fix-ie-rtl.css";</style>';  }  return $iecss;}
<?php// $Id$/** * @file * Code required only when fetching information about available updates. *//** * Callback to manually check the update status without cron. */function update_manual_status() {  if (_update_refresh()) {    drupal_set_message(t('Attempted to fetch information about all available new releases and updates.'));  }  else {    drupal_set_message(t('Unable to fetch any information about available new releases and updates.'), 'error');  }  drupal_goto('admin/reports/updates');}/** * Fetch project info via XML from a central server. */function _update_refresh() {  static $fail = array();  global $base_url;  module_load_include('inc', 'update', 'update.compare');  // Since we're fetching new available update data, we want to clear  // our cache of both the projects we care about, and the current update  // status of the site. We do *not* want to clear the cache of available  // releases just yet, since that data (even if it's stale) can be useful  // during update_get_projects(); for example, to modules that implement  // hook_system_info_alter() such as cvs_deploy.  _update_cache_clear('update_project_projects');  _update_cache_clear('update_project_data');  $available = array();  $data = array();  $site_key = md5($base_url . drupal_get_private_key());  $projects = update_get_projects();  // Now that we have the list of projects, we should also clear our cache of  // available release data, since even if we fail to fetch new data, we need  // to clear out the stale data at this point.  _update_cache_clear('update_available_releases');  $max_fetch_attempts = variable_get('update_max_fetch_attempts', UPDATE_MAX_FETCH_ATTEMPTS);    foreach ($projects as $key => $project) {    $url = _update_build_fetch_url($project, $site_key);    $fetch_url_base = _update_get_fetch_url_base($project);    if (empty($fail[$fetch_url_base]) || count($fail[$fetch_url_base]) < $max_fetch_attempts) {      $xml = drupal_http_request($url);      if (isset($xml->data)) {        $data[] = $xml->data;      }      else {        // Connection likely broken; prepare to give up.        $fail[$fetch_url_base][$key] = 1;      }    }    else {      // Didn't bother trying to fetch.      $fail[$fetch_url_base][$key] = 1;    }  }  if ($data) {    $parser = new update_xml_parser;    $available = $parser->parse($data);  }  if (!empty($available) && is_array($available)) {    // Record the projects where we failed to fetch data.    foreach ($fail as $fetch_url_base => $failures) {      foreach ($failures as $key => $value) {        $available[$key]['project_status'] = 'not-fetched';      }    }    $frequency = variable_get('update_check_frequency', 1);    _update_cache_set('update_available_releases', $available, time() + (60 * 60 * 24 * $frequency));    watchdog('update', 'Attempted to fetch information about all available new releases and updates.', array(), WATCHDOG_NOTICE, l(t('view'), 'admin/reports/updates'));  }  else {    watchdog('update', 'Unable to fetch any information about available new releases and updates.', array(), WATCHDOG_ERROR, l(t('view'), 'admin/reports/updates'));  }  // Whether this worked or not, we did just (try to) check for updates.  variable_set('update_last_check', time());  return $available;}/** * Generates the URL to fetch information about project updates. * * This figures out the right URL to use, based on the project's .info file * and the global defaults. Appends optional query arguments when the site is * configured to report usage stats. * * @param $project *   The array of project information from update_get_projects(). * @param $site_key *   The anonymous site key hash (optional). * * @see update_refresh() * @see update_get_projects() */function _update_build_fetch_url($project, $site_key = '') {  $name = $project['name'];  $url = _update_get_fetch_url_base($project);  $url .= '/'. $name .'/'. DRUPAL_CORE_COMPATIBILITY;  // Only append a site_key and the version information if we have a site_key  // in the first place, and if this is not a disabled module or theme. We do  // not want to record usage statistics for disabled code.  if (!empty($site_key) && (strpos($project['project_type'], 'disabled') === FALSE)) {    $url .= (strpos($url, '?') === TRUE) ? '&' : '?';    $url .= 'site_key=';    $url .= rawurlencode($site_key);    if (!empty($project['info']['version'])) {      $url .= '&version=';      $url .= rawurlencode($project['info']['version']);    }  }  return $url;}/** * Return the base of the URL to fetch available update data for a project. * * @param $project *   The array of project information from update_get_projects(). * @return *   The base of the URL used for fetching available update data. This does *   not include the path elements to specify a particular project, version, *   site_key, etc. * * @see _update_build_fetch_url() */function _update_get_fetch_url_base($project) {  return isset($project['info']['project status url']) ? $project['info']['project status url'] : variable_get('update_fetch_url', UPDATE_DEFAULT_URL);}/** * Perform any notifications that should be done once cron fetches new data. * * This method checks the status of the site using the new data and depending * on the configuration of the site, notifies administrators via email if there * are new releases or missing security updates. * * @see update_requirements() */function _update_cron_notify() {  include_once './includes/install.inc';  $status = update_requirements('runtime');  $params = array();  $notify_all = (variable_get('update_notification_threshold', 'all') == 'all');  foreach (array('core', 'contrib') as $report_type) {    $type = 'update_'. $report_type;    if (isset($status[$type]['severity'])        && ($status[$type]['severity'] == REQUIREMENT_ERROR || ($notify_all && $status[$type]['reason'] == UPDATE_NOT_CURRENT))) {      $params[$report_type] = $status[$type]['reason'];    }  }  if (!empty($params)) {    $notify_list = variable_get('update_notify_emails', '');    if (!empty($notify_list)) {      $default_language = language_default();      foreach ($notify_list as $target) {        if ($target_user = user_load(array('mail' => $target))) {          $target_language = user_preferred_language($target_user);        }        else {          $target_language = $default_language;        }        drupal_mail('update', 'status_notify', $target, $target_language, $params);      }    }  }}/** * XML Parser object to read Drupal's release history info files. * This uses PHP4's lame XML parsing, but it works. */class update_xml_parser {  var $projects = array();  var $current_project;  var $current_release;  var $current_term;  var $current_tag;  var $current_object;  /**   * Parse an array of XML data files.   */  function parse($data) {    foreach ($data as $datum) {      $parser = xml_parser_create();      xml_set_object($parser, $this);      xml_set_element_handler($parser, 'start', 'end');      xml_set_character_data_handler($parser, "data");      xml_parse($parser, $datum);      xml_parser_free($parser);    }    return $this->projects;  }  function start($parser, $name, $attr) {    $this->current_tag = $name;    switch ($name) {      case 'PROJECT':        unset($this->current_object);        $this->current_project = array();        $this->current_object = &$this->current_project;        break;      case 'RELEASE':        unset($this->current_object);        $this->current_release = array();        $this->current_object = &$this->current_release;        break;      case 'TERM':        unset($this->current_object);        $this->current_term = array();        $this->current_object = &$this->current_term;        break;    }  }  function end($parser, $name) {    switch ($name) {      case 'PROJECT':        unset($this->current_object);        $this->projects[$this->current_project['short_name']] = $this->current_project;        $this->current_project = array();        break;      case 'RELEASE':        unset($this->current_object);        $this->current_project['releases'][$this->current_release['version']] = $this->current_release;        break;      case 'RELEASES':        $this->current_object = &$this->current_project;        break;      case 'TERM':        unset($this->current_object);        $term_name = $this->current_term['name'];        if (!isset($this->current_release['terms'])) {          $this->current_release['terms'] = array();        }        if (!isset($this->current_release['terms'][$term_name])) {          $this->current_release['terms'][$term_name] = array();        }        $this->current_release['terms'][$term_name][] = $this->current_term['value'];        break;      case 'TERMS':        $this->current_object = &$this->current_release;        break;      default:        $this->current_object[strtolower($this->current_tag)] = trim($this->current_object[strtolower($this->current_tag)]);        $this->current_tag = '';    }  }  function data($parser, $data) {    if ($this->current_tag && !in_array($this->current_tag, array('PROJECT', 'RELEASE', 'RELEASES', 'TERM', 'TERMS'))) {      $tag = strtolower($this->current_tag);      if (isset($this->current_object[$tag])) {        $this->current_object[$tag] .= $data;      }      else {        $this->current_object[$tag] = $data;      }    }  }}
<?php// $Id$/** * Return data from the persistent cache. Data may be stored as either plain text or as serialized data. * cache_get will automatically return unserialized objects and arrays. * * @param $cid *   The cache ID of the data to retrieve. * @param $table *   The table $table to store the data in. Valid core values are 'cache_filter', *   'cache_menu', 'cache_page', or 'cache' for the default cache. */function cache_get($cid, $table = 'cache') {  global $user;  // Garbage collection necessary when enforcing a minimum cache lifetime  $cache_flush = variable_get('cache_flush_'. $table, 0);  if ($cache_flush && ($cache_flush + variable_get('cache_lifetime', 0) <= time())) {    // Reset the variable immediately to prevent a meltdown in heavy load situations.    variable_set('cache_flush_'. $table, 0);    // Time to flush old cache data    db_query("DELETE FROM {". $table ."} WHERE expire != %d AND expire <= %d", CACHE_PERMANENT, $cache_flush);  }  $cache = db_fetch_object(db_query("SELECT data, created, headers, expire, serialized FROM {". $table ."} WHERE cid = '%s'", $cid));  if (isset($cache->data)) {    // If the data is permanent or we're not enforcing a minimum cache lifetime    // always return the cached data.    if ($cache->expire == CACHE_PERMANENT || !variable_get('cache_lifetime', 0)) {      $cache->data = db_decode_blob($cache->data);      if ($cache->serialized) {        $cache->data = unserialize($cache->data);      }    }    // If enforcing a minimum cache lifetime, validate that the data is    // currently valid for this user before we return it by making sure the    // cache entry was created before the timestamp in the current session's    // cache timer. The cache variable is loaded into the $user object by    // sess_read() in session.inc.    else {      if ($user->cache > $cache->created) {        // This cache data is too old and thus not valid for us, ignore it.        return 0;      }      else {        $cache->data = db_decode_blob($cache->data);        if ($cache->serialized) {          $cache->data = unserialize($cache->data);        }      }    }    return $cache;  }  return 0;}/** * Store data in the persistent cache. * * The persistent cache is split up into four database * tables. Contributed modules can add additional tables. * * 'cache_page': This table stores generated pages for anonymous * users. This is the only table affected by the page cache setting on * the administrator panel. * * 'cache_menu': Stores the cachable part of the users' menus. * * 'cache_filter': Stores filtered pieces of content. This table is * periodically cleared of stale entries by cron. * * 'cache': Generic cache storage table. * * The reasons for having several tables are as follows: * * - smaller tables allow for faster selects and inserts * - we try to put fast changing cache items and rather static *   ones into different tables. The effect is that only the fast *   changing tables will need a lot of writes to disk. The more *   static tables will also be better cachable with MySQL's query cache * * @param $cid *   The cache ID of the data to store. * @param $data *   The data to store in the cache. Complex data types will be automatically serialized before insertion. *   Strings will be stored as plain text and not serialized. * @param $table *   The table $table to store the data in. Valid core values are 'cache_filter', *   'cache_menu', 'cache_page', or 'cache'. * @param $expire *   One of the following values: *   - CACHE_PERMANENT: Indicates that the item should never be removed unless *     explicitly told to using cache_clear_all() with a cache ID. *   - CACHE_TEMPORARY: Indicates that the item should be removed at the next *     general cache wipe. *   - A Unix timestamp: Indicates that the item should be kept at least until *     the given time, after which it behaves like CACHE_TEMPORARY. * @param $headers *   A string containing HTTP header information for cached pages. */function cache_set($cid, $data, $table = 'cache', $expire = CACHE_PERMANENT, $headers = NULL) {  $serialized = 0;  if (is_object($data) || is_array($data)) {    $data = serialize($data);    $serialized = 1;  }  $created = time();  db_query("UPDATE {". $table ."} SET data = %b, created = %d, expire = %d, headers = '%s', serialized = %d WHERE cid = '%s'", $data, $created, $expire, $headers, $serialized, $cid);  if (!db_affected_rows()) {    @db_query("INSERT INTO {". $table ."} (cid, data, created, expire, headers, serialized) VALUES ('%s', %b, %d, %d, '%s', %d)", $cid, $data, $created, $expire, $headers, $serialized);  }}/** * * Expire data from the cache. If called without arguments, expirable * entries will be cleared from the cache_page and cache_block tables. * * @param $cid *   If set, the cache ID to delete. Otherwise, all cache entries that can *   expire are deleted. * * @param $table *   If set, the table $table to delete from. Mandatory *   argument if $cid is set. * * @param $wildcard *   If $wildcard is TRUE, cache IDs starting with $cid are deleted in *   addition to the exact cache ID specified by $cid.  If $wildcard is *   TRUE and $cid is '*' then the entire table $table is emptied. */function cache_clear_all($cid = NULL, $table = NULL, $wildcard = FALSE) {  global $user;  if (!isset($cid) && !isset($table)) {    // Clear the block cache first, so stale data will    // not end up in the page cache.    cache_clear_all(NULL, 'cache_block');    cache_clear_all(NULL, 'cache_page');    return;  }  if (empty($cid)) {    if (variable_get('cache_lifetime', 0)) {      // We store the time in the current user's $user->cache variable which      // will be saved into the sessions table by sess_write(). We then      // simulate that the cache was flushed for this user by not returning      // cached data that was cached before the timestamp.      $user->cache = time();      $cache_flush = variable_get('cache_flush_'. $table, 0);      if ($cache_flush == 0) {        // This is the first request to clear the cache, start a timer.        variable_set('cache_flush_'. $table, time());      }      else if (time() > ($cache_flush + variable_get('cache_lifetime', 0))) {        // Clear the cache for everyone, cache_lifetime seconds have        // passed since the first request to clear the cache.        db_query("DELETE FROM {". $table ."} WHERE expire != %d AND expire < %d", CACHE_PERMANENT, time());        variable_set('cache_flush_'. $table, 0);      }    }    else {      // No minimum cache lifetime, flush all temporary cache entries now.      db_query("DELETE FROM {". $table ."} WHERE expire != %d AND expire < %d", CACHE_PERMANENT, time());    }  }  else {    if ($wildcard) {      if ($cid == '*') {        db_query("TRUNCATE TABLE {". $table ."}");      }      else {        db_query("DELETE FROM {". $table ."} WHERE cid LIKE '%s%%'", $cid);      }    }    else {      db_query("DELETE FROM {". $table ."} WHERE cid = '%s'", $cid);    }  }}
<?php// $Id$/** * @file * User session handling functions. */function sess_open($save_path, $session_name) {  return TRUE;}function sess_close() {  return TRUE;}function sess_read($key) {  global $user;  // Write and Close handlers are called after destructing objects since PHP 5.0.5  // Thus destructors can use sessions but session handler can't use objects.  // So we are moving session closure before destructing objects.  register_shutdown_function('session_write_close');  // Handle the case of first time visitors and clients that don't store cookies (eg. web crawlers).  if (!isset($_COOKIE[session_name()])) {    $user = drupal_anonymous_user();    return '';  }  // Otherwise, if the session is still active, we have a record of the client's session in the database.  $user = db_fetch_object(db_query("SELECT u.*, s.* FROM {users} u INNER JOIN {sessions} s ON u.uid = s.uid WHERE s.sid = '%s'", $key));  // We found the client's session record and they are an authenticated,  // active user.  if ($user && $user->uid > 0 && $user->status == 1) {    // This is done to unserialize the data member of $user    $user = drupal_unpack($user);    // Add roles element to $user    $user->roles = array();    $user->roles[DRUPAL_AUTHENTICATED_RID] = 'authenticated user';    $result = db_query("SELECT r.rid, r.name FROM {role} r INNER JOIN {users_roles} ur ON ur.rid = r.rid WHERE ur.uid = %d", $user->uid);    while ($role = db_fetch_object($result)) {      $user->roles[$role->rid] = $role->name;    }  }  // We didn't find the client's record (session has expired), or they are  // blocked, or they are an anonymous user.  else {    $session = isset($user->session) ? $user->session : '';    $user = drupal_anonymous_user($session);  }  return $user->session;}function sess_write($key, $value) {  global $user;  // If saving of session data is disabled or if the client doesn't have a session,  // and one isn't being created ($value), do nothing. This keeps crawlers out of  // the session table. This reduces memory and server load, and gives more useful  // statistics. We can't eliminate anonymous session table rows without breaking  // the throttle module and the "Who's Online" block.  if (!session_save_session() || ($user->uid == 0 && empty($_COOKIE[session_name()]) && empty($value))) {    return TRUE;  }  db_query("UPDATE {sessions} SET uid = %d, cache = %d, hostname = '%s', session = '%s', timestamp = %d WHERE sid = '%s'", $user->uid, isset($user->cache) ? $user->cache : '', ip_address(), $value, time(), $key);  if (db_affected_rows()) {    // Last access time is updated no more frequently than once every 180 seconds.    // This reduces contention in the users table.    if ($user->uid && time() - $user->access > variable_get('session_write_interval', 180)) {      db_query("UPDATE {users} SET access = %d WHERE uid = %d", time(), $user->uid);    }  }  else {    // If this query fails, another parallel request probably got here first.    // In that case, any session data generated in this request is discarded.    @db_query("INSERT INTO {sessions} (sid, uid, cache, hostname, session, timestamp) VALUES ('%s', %d, %d, '%s', '%s', %d)", $key, $user->uid, isset($user->cache) ? $user->cache : '', ip_address(), $value, time());  }  return TRUE;}/** * Called when an anonymous user becomes authenticated or vice-versa. */function sess_regenerate() {  $old_session_id = session_id();  // We code around http://bugs.php.net/bug.php?id=32802 by destroying  // the session cookie by setting expiration in the past (a negative  // value).  This issue only arises in PHP versions before 4.4.0,  // regardless of the Drupal configuration.  // TODO: remove this when we require at least PHP 4.4.0  if (isset($_COOKIE[session_name()])) {    setcookie(session_name(), '', time() - 42000, '/');  }  session_regenerate_id();  db_query("UPDATE {sessions} SET sid = '%s' WHERE sid = '%s'", session_id(), $old_session_id);}/** * Counts how many users have sessions. Can count either anonymous sessions or authenticated sessions. * * @param int $timestamp *   A Unix timestamp representing a point of time in the past. *   The default is 0, which counts all existing sessions. * @param boolean $anonymous *   TRUE counts only anonymous users. *   FALSE counts only authenticated users. * @return  int *   The number of users with sessions. */function sess_count($timestamp = 0, $anonymous = true) {  $query = $anonymous ? ' AND uid = 0' : ' AND uid > 0';  return db_result(db_query('SELECT COUNT(sid) AS count FROM {sessions} WHERE timestamp >= %d'. $query, $timestamp));}/** * Called by PHP session handling with the PHP session ID to end a user's session. * * @param  string $sid *   the session id */function sess_destroy_sid($sid) {  db_query("DELETE FROM {sessions} WHERE sid = '%s'", $sid);}/** * End a specific user's session * * @param  string $uid *   the user id */function sess_destroy_uid($uid) {  db_query('DELETE FROM {sessions} WHERE uid = %d', $uid);}function sess_gc($lifetime) {  // Be sure to adjust 'php_value session.gc_maxlifetime' to a large enough  // value. For example, if you want user sessions to stay in your database  // for three weeks before deleting them, you need to set gc_maxlifetime  // to '1814400'. At that value, only after a user doesn't log in after  // three weeks (1814400 seconds) will his/her session be removed.  db_query("DELETE FROM {sessions} WHERE timestamp < %d", time() - $lifetime);  return TRUE;}/** * Determine whether to save session data of the current request. * * This function allows the caller to temporarily disable writing of session data, * should the request end while performing potentially dangerous operations, such as * manipulating the global $user object.  See http://drupal.org/node/218104 for usage * * @param $status *   Disables writing of session data when FALSE, (re-)enables writing when TRUE. * @return *   FALSE if writing session data has been disabled. Otherwise, TRUE. */function session_save_session($status = NULL) {  static $save_session = TRUE;  if (isset($status)) {    $save_session = $status;  }  return ($save_session);}
<?php// $Id$/** * @file profile-listing.tpl.php * Default theme implementation for displaying a user and their profile data * for member listing pages. * * @see profile-wrapper.tpl.php *      where all the data is collected and printed out. * * Available variables: * - $picture: Image configured for the account linking to the users page. * - $name: User's account name linking to the users page. * - $profile: Keyed array of all profile fields that are set as visible *   in member list pages (configured by site administrators). It also needs *   to have a value in order to be present. * * Each $field in $profile contains: * - $field->title: Title of the profile field. * - $field->value: Value of the profile field. * - $field->type: Type of the profile field, i.e., checkbox, textfield, *   textarea, selection, list, url or date. * * Since $profile is keyed, a direct print of the field is possible. Not * all accounts may have a value for a profile so do a check first. If a field * of "last_name" was set for the site, the following can be used. * *  <?php if (isset($profile['last_name'])): ?> *    <div class="field last-name"> *      <?php print $profile['last_name']->title; ?>:<br /> *      <?php print $profile['last_name']->value; ?> *    </div> *  <?php endif; ?> * * @see template_preprocess_profile_listing() */?><div class="profile">  <?php print $picture; ?>  <div class="name">    <?php print $name; ?>  </div>  <?php foreach ($profile as $field) : ?>    <div class="field">      <?php print $field->value; ?>    </div>  <?php endforeach; ?></div>
<?php// $Id$/** * @file * OpenID utility functions. */// Diffie-Hellman Key Exchange Default Value.define('OPENID_DH_DEFAULT_MOD', '155172898181473697471232257763715539915724801'.       '966915404479707795314057629378541917580651227423698188993727816152646631'.       '438561595825688188889951272158842675419950341258706556549803580104870537'.       '681476726513255747040765857479291291572334510643245094715007229621094194'.       '349783925984760375594985848253359305585439638443');// Constants for Diffie-Hellman key exchange computations.define('OPENID_DH_DEFAULT_GEN', '2');define('OPENID_SHA1_BLOCKSIZE', 64);define('OPENID_RAND_SOURCE', '/dev/urandom');// OpenID namespace URLsdefine('OPENID_NS_2_0', 'http://specs.openid.net/auth/2.0');define('OPENID_NS_1_1', 'http://openid.net/signon/1.1');define('OPENID_NS_1_0', 'http://openid.net/signon/1.0');/** * Performs an HTTP 302 redirect (for the 1.x protocol). */function openid_redirect_http($url, $message) {  $query = array();  foreach ($message as $key => $val) {    $query[] = $key .'='. urlencode($val);  }  $sep = (strpos($url, '?') === FALSE) ? '?' : '&';  header('Location: '. $url . $sep . implode('&', $query), TRUE, 302);  exit;}/** * Creates a js auto-submit redirect for (for the 2.x protocol) */function openid_redirect($url, $message) {  $output = '<html><head><title>'. t('OpenID redirect') ."</title></head>\n<body>";  $output .= drupal_get_form('openid_redirect_form', $url, $message);  $output .= '<script type="text/javascript">document.getElementById("openid-redirect-form").submit();</script>';  $output .= "</body></html>\n";  print $output;  exit;}function openid_redirect_form(&$form_state, $url, $message) {  $form = array();  $form['#action'] = $url;  $form['#method'] = "post";  foreach ($message as $key => $value) {    $form[$key] = array(      '#type' => 'hidden',      '#name' => $key,      '#value' => $value,    );  }  $form['submit'] = array(    '#type' => 'submit',    '#prefix' => '<noscript>',    '#suffix' => '</noscript>',    '#value' => t('Send'),  );  return $form;}/** * Determine if the given identifier is an XRI ID. */function _openid_is_xri($identifier) {  // Strip the xri:// scheme from the identifier if present.  if (strpos(strtolower($identifier), 'xri://') !== FALSE) {    $identifier = substr($identifier, 6);  }  // Test whether the identifier starts with an XRI global context symbol or (.  $firstchar = substr($identifier, 0, 1);  if (strpos("=@+$!(", $firstchar) !== FALSE) {    return TRUE;  }  return FALSE;}/** * Normalize the given identifier as per spec. */function _openid_normalize($identifier) {  if (_openid_is_xri($identifier)) {    return _openid_normalize_xri($identifier);  }  else {    return _openid_normalize_url($identifier);  }}function _openid_normalize_xri($xri) {  $normalized_xri = $xri;  if (stristr($xri, 'xri://') !== FALSE) {    $normalized_xri = substr($xri, 6);  }  return $normalized_xri;}function _openid_normalize_url($url) {  $normalized_url = $url;  if (stristr($url, '://') === FALSE) {    $normalized_url = 'http://'. $url;  }  // Strip the fragment and fragment delimiter if present.  $normalized_url = strtok($normalized_url, '#');  if (substr_count($normalized_url, '/') < 3) {    $normalized_url .= '/';  }  return $normalized_url;}/** * Create a serialized message packet as per spec: $key:$value\n . */function _openid_create_message($data) {  $serialized = '';  foreach ($data as $key => $value) {    if ((strpos($key, ':') !== FALSE) || (strpos($key, "\n") !== FALSE) || (strpos($value, "\n") !== FALSE)) {      return null;    }    $serialized .= "$key:$value\n";  }  return $serialized;}/** * Encode a message from _openid_create_message for HTTP Post */function _openid_encode_message($message) {  $encoded_message = '';  $items = explode("\n", $message);  foreach ($items as $item) {    $parts = explode(':', $item, 2);    if (count($parts) == 2) {      if ($encoded_message != '') {        $encoded_message .= '&';      }      $encoded_message .= rawurlencode(trim($parts[0])) .'='. rawurlencode(trim($parts[1]));    }  }  return $encoded_message;}/** * Convert a direct communication message * into an associative array. */function _openid_parse_message($message) {  $parsed_message = array();  $items = explode("\n", $message);  foreach ($items as $item) {    $parts = explode(':', $item, 2);    if (count($parts) == 2) {      $parsed_message[$parts[0]] = $parts[1];    }  }  return $parsed_message;}/** * Return a nonce value - formatted per OpenID spec. */function _openid_nonce() {  // YYYY-MM-DDThh:mm:ssTZD UTC, plus some optional extra unique chars  return gmstrftime('%Y-%m-%dT%H:%M:%S%Z') .    chr(mt_rand(0, 25) + 65) .    chr(mt_rand(0, 25) + 65) .    chr(mt_rand(0, 25) + 65) .    chr(mt_rand(0, 25) + 65);}/** * Pull the href attribute out of an html link element. */function _openid_link_href($rel, $html) {  $rel = preg_quote($rel);  preg_match('|<link\s+rel=["\'](.*)'. $rel .'(.*)["\'](.*)/?>|iUs', $html, $matches);  if (isset($matches[3])) {    preg_match('|href=["\']([^"]+)["\']|iU', $matches[3], $href);    return trim($href[1]);  }  return FALSE;}/** * Pull the http-equiv attribute out of an html meta element */function _openid_meta_httpequiv($equiv, $html) {  preg_match('|<meta\s+http-equiv=["\']'. $equiv .'["\'](.*)/?>|iUs', $html, $matches);  if (isset($matches[1])) {    preg_match('|content=["\']([^"]+)["\']|iUs', $matches[1], $content);    if (isset($content[1])) {      return $content[1];    }  }  return FALSE;}/** * Sign certain keys in a message * @param $association - object loaded from openid_association or openid_server_association table *              - important fields are ->assoc_type and ->mac_key * @param $message_array - array of entire message about to be sent * @param $keys_to_sign - keys in the message to include in signature (without *  'openid.' appended) */function _openid_signature($association, $message_array, $keys_to_sign) {  $signature = '';  $sign_data = array();  foreach ($keys_to_sign as $key) {    if (isset($message_array['openid.'. $key])) {      $sign_data[$key] = $message_array['openid.'. $key];    }  }  $message = _openid_create_message($sign_data);  $secret = base64_decode($association->mac_key);  $signature = _openid_hmac($secret, $message);  return base64_encode($signature);}function _openid_hmac($key, $text) {  if (strlen($key) > OPENID_SHA1_BLOCKSIZE) {    $key = _openid_sha1($key, true);  }  $key = str_pad($key, OPENID_SHA1_BLOCKSIZE, chr(0x00));  $ipad = str_repeat(chr(0x36), OPENID_SHA1_BLOCKSIZE);  $opad = str_repeat(chr(0x5c), OPENID_SHA1_BLOCKSIZE);  $hash1 = _openid_sha1(($key ^ $ipad) . $text, true);  $hmac = _openid_sha1(($key ^ $opad) . $hash1, true);  return $hmac;}function _openid_sha1($text) {  $hex = sha1($text);  $raw = '';  for ($i = 0; $i < 40; $i += 2) {    $hexcode = substr($hex, $i, 2);    $charcode = (int)base_convert($hexcode, 16, 10);    $raw .= chr($charcode);  }  return $raw;}function _openid_dh_base64_to_long($str) {  $b64 = base64_decode($str);  return _openid_dh_binary_to_long($b64);}function _openid_dh_long_to_base64($str) {  return base64_encode(_openid_dh_long_to_binary($str));}function _openid_dh_binary_to_long($str) {  $bytes = array_merge(unpack('C*', $str));  $n = 0;  foreach ($bytes as $byte) {    $n = bcmul($n, pow(2, 8));    $n = bcadd($n, $byte);  }  return $n;}function _openid_dh_long_to_binary($long) {  $cmp = bccomp($long, 0);  if ($cmp < 0) {    return FALSE;  }  if ($cmp == 0) {    return "\x00";  }  $bytes = array();  while (bccomp($long, 0) > 0) {    array_unshift($bytes, bcmod($long, 256));    $long = bcdiv($long, pow(2, 8));  }  if ($bytes && ($bytes[0] > 127)) {    array_unshift($bytes, 0);  }  $string = '';  foreach ($bytes as $byte) {    $string .= pack('C', $byte);  }  return $string;}function _openid_dh_xorsecret($shared, $secret) {  $dh_shared_str = _openid_dh_long_to_binary($shared);  $sha1_dh_shared = _openid_sha1($dh_shared_str);  $xsecret = "";  for ($i = 0; $i < strlen($secret); $i++) {    $xsecret .= chr(ord($secret[$i]) ^ ord($sha1_dh_shared[$i]));  }  return $xsecret;}function _openid_dh_rand($stop) {  static $duplicate_cache = array();  // Used as the key for the duplicate cache  $rbytes = _openid_dh_long_to_binary($stop);  if (array_key_exists($rbytes, $duplicate_cache)) {    list($duplicate, $nbytes) = $duplicate_cache[$rbytes];  }  else {    if ($rbytes[0] == "\x00") {      $nbytes = strlen($rbytes) - 1;    }    else {      $nbytes = strlen($rbytes);    }    $mxrand = bcpow(256, $nbytes);    // If we get a number less than this, then it is in the    // duplicated range.    $duplicate = bcmod($mxrand, $stop);    if (count($duplicate_cache) > 10) {      $duplicate_cache = array();    }    $duplicate_cache[$rbytes] = array($duplicate, $nbytes);  }  do {    $bytes = "\x00". _openid_get_bytes($nbytes);    $n = _openid_dh_binary_to_long($bytes);    // Keep looping if this value is in the low duplicated range.  } while (bccomp($n, $duplicate) < 0);  return bcmod($n, $stop);}function _openid_get_bytes($num_bytes) {  static $f = null;  $bytes = '';  if (!isset($f)) {    $f = @fopen(OPENID_RAND_SOURCE, "r");  }  if (!$f) {    // pseudorandom used    $bytes = '';    for ($i = 0; $i < $num_bytes; $i += 4) {      $bytes .= pack('L', mt_rand());    }    $bytes = substr($bytes, 0, $num_bytes);  }  else {    $bytes = fread($f, $num_bytes);  }  return $bytes;}function _openid_response($str = NULL) {  $data = array();    if (isset($_SERVER['REQUEST_METHOD'])) {    $data = _openid_get_params($_SERVER['QUERY_STRING']);    if ($_SERVER['REQUEST_METHOD'] == 'POST') {      $str = file_get_contents('php://input');      $post = array();      if ($str !== false) {        $post = _openid_get_params($str);      }      $data = array_merge($data, $post);    }  }  return $data;}function _openid_get_params($str) {  $chunks = explode("&", $str);  $data = array();  foreach ($chunks as $chunk) {    $parts = explode("=", $chunk, 2);    if (count($parts) == 2) {      list($k, $v) = $parts;      $data[$k] = urldecode($v);    }  }  return $data;}/** * Provide bcpowmod support for PHP4. */if (!function_exists('bcpowmod')) {  function bcpowmod($base, $exp, $mod) {    $square = bcmod($base, $mod);    $result = 1;    while (bccomp($exp, 0) > 0) {      if (bcmod($exp, 2)) {        $result = bcmod(bcmul($result, $square), $mod);      }      $square = bcmod(bcmul($square, $square), $mod);      $exp = bcdiv($exp, 2);    }    return $result;  }}
<?php// $Id$/** * The main entry point for XML-RPC requests. * * @param $callbacks *   Array of external XML-RPC method names with the callbacks they map to. */function xmlrpc_server($callbacks) {  $xmlrpc_server = new stdClass();  // Define built-in XML-RPC method names  $defaults = array(      'system.multicall' => 'xmlrpc_server_multicall',    array(      'system.methodSignature',      'xmlrpc_server_method_signature',      array('array', 'string'),      'Returns an array describing the return type and required parameters of a method.'    ),    array(      'system.getCapabilities',      'xmlrpc_server_get_capabilities',      array('struct'),      'Returns a struct describing the XML-RPC specifications supported by this server.'    ),    array(      'system.listMethods',      'xmlrpc_server_list_methods',      array('array'),      'Returns an array of available methods on this server.'),    array(      'system.methodHelp',      'xmlrpc_server_method_help',      array('string', 'string'),      'Returns a documentation string for the specified method.')  );  // We build an array of all method names by combining the built-ins  // with those defined by modules implementing the _xmlrpc hook.  // Built-in methods are overridable.  foreach (array_merge($defaults, (array)$callbacks) as $key => $callback) {    // we could check for is_array($callback)    if (is_int($key)) {      $method = $callback[0];      $xmlrpc_server->callbacks[$method] = $callback[1];      $xmlrpc_server->signatures[$method] = $callback[2];      $xmlrpc_server->help[$method] = $callback[3];    }    else {      $xmlrpc_server->callbacks[$key] = $callback;      $xmlrpc_server->signatures[$key] = '';      $xmlrpc_server->help[$key] = '';    }  }  $data = file_get_contents('php://input');  if (!$data) {    die('XML-RPC server accepts POST requests only.');  }  $xmlrpc_server->message = xmlrpc_message($data);  if (!xmlrpc_message_parse($xmlrpc_server->message)) {    xmlrpc_server_error(-32700, t('Parse error. Request not well formed.'));  }  if ($xmlrpc_server->message->messagetype != 'methodCall') {    xmlrpc_server_error(-32600, t('Server error. Invalid XML-RPC. Request must be a methodCall.'));  }  if (!isset($xmlrpc_server->message->params)) {    $xmlrpc_server->message->params = array();  }  xmlrpc_server_set($xmlrpc_server);  $result = xmlrpc_server_call($xmlrpc_server, $xmlrpc_server->message->methodname, $xmlrpc_server->message->params);  if (is_object($result) && !empty($result->is_error)) {    xmlrpc_server_error($result);  }  // Encode the result  $r = xmlrpc_value($result);  // Create the XML  $xml = '<methodResponse>  <params>  <param>    <value>'.    xmlrpc_value_get_xml($r)    .'</value>  </param>  </params></methodResponse>';  // Send it  xmlrpc_server_output($xml);}/** * Throw an XML-RPC error. * * @param $error *   an error object OR integer error code * @param $message *   description of error, used only if integer error code was passed */function xmlrpc_server_error($error, $message = FALSE) {  if ($message && !is_object($error)) {    $error = xmlrpc_error($error, $message);  }  xmlrpc_server_output(xmlrpc_error_get_xml($error));}function xmlrpc_server_output($xml) {  $xml = '<?xml version="1.0"?>'."\n". $xml;  header('Connection: close');  header('Content-Length: '. strlen($xml));  header('Content-Type: text/xml');  header('Date: '. date('r'));  echo $xml;  exit;}/** * Store a copy of the request temporarily. * * @param $xmlrpc_server *   Request object created by xmlrpc_server(). */function xmlrpc_server_set($xmlrpc_server = NULL) {  static $server;  if (!isset($server)) {    $server = $xmlrpc_server;  }  return $server;}// Retrieve the stored request.function xmlrpc_server_get() {  return xmlrpc_server_set();}/** * Dispatch the request and any parameters to the appropriate handler. * * @param $xmlrpc_server * @param $methodname *   The external XML-RPC method name, e.g. 'system.methodHelp' * @param $args *   Array containing any parameters that were sent along with the request. */function xmlrpc_server_call($xmlrpc_server, $methodname, $args) {  // Make sure parameters are in an array  if ($args && !is_array($args)) {    $args = array($args);  }  // Has this method been mapped to a Drupal function by us or by modules?  if (!isset($xmlrpc_server->callbacks[$methodname])) {    return xmlrpc_error(-32601, t('Server error. Requested method @methodname not specified.', array("@methodname" => $xmlrpc_server->message->methodname)));  }  $method = $xmlrpc_server->callbacks[$methodname];  $signature = $xmlrpc_server->signatures[$methodname];  // If the method has a signature, validate the request against the signature  if (is_array($signature)) {    $ok = TRUE;    $return_type = array_shift($signature);    // Check the number of arguments    if (count($args) != count($signature)) {      return xmlrpc_error(-32602, t('Server error. Wrong number of method parameters.'));    }    // Check the argument types    foreach ($signature as $key => $type) {      $arg = $args[$key];      switch ($type) {        case 'int':        case 'i4':          if (is_array($arg) || !is_int($arg)) {            $ok = FALSE;          }          break;        case 'base64':        case 'string':          if (!is_string($arg)) {            $ok = FALSE;          }          break;        case 'boolean':          if ($arg !== FALSE && $arg !== TRUE) {            $ok = FALSE;          }          break;        case 'float':        case 'double':          if (!is_float($arg)) {            $ok = FALSE;          }          break;        case 'date':        case 'dateTime.iso8601':          if (!$arg->is_date) {            $ok = FALSE;          }          break;      }      if (!$ok) {        return xmlrpc_error(-32602, t('Server error. Invalid method parameters.'));      }    }  }  if (!function_exists($method)) {    return xmlrpc_error(-32601, t('Server error. Requested function @method does not exist.', array("@method" => $method)));  }  // Call the mapped function  return call_user_func_array($method, $args);}function xmlrpc_server_multicall($methodcalls) {  // See http://www.xmlrpc.com/discuss/msgReader$1208  $return = array();  $xmlrpc_server = xmlrpc_server_get();  foreach ($methodcalls as $call) {    $ok = TRUE;    if (!isset($call['methodName']) || !isset($call['params'])) {      $result = xmlrpc_error(3, t('Invalid syntax for system.multicall.'));      $ok = FALSE;    }    $method = $call['methodName'];    $params = $call['params'];    if ($method == 'system.multicall') {      $result = xmlrpc_error(-32600, t('Recursive calls to system.multicall are forbidden.'));    }    elseif ($ok) {      $result = xmlrpc_server_call($xmlrpc_server, $method, $params);    }    if ($result->is_error) {      $return[] = array(        'faultCode' => $result->code,        'faultString' => $result->message      );    }    else {      $return[] = $result;    }  }  return $return;}/** * XML-RPC method system.listMethods maps to this function. */function xmlrpc_server_list_methods() {  $xmlrpc_server = xmlrpc_server_get();  return array_keys($xmlrpc_server->callbacks);}/** * XML-RPC method system.getCapabilities maps to this function. * See http://groups.yahoo.com/group/xml-rpc/message/2897 */function xmlrpc_server_get_capabilities() {  return array(    'xmlrpc' => array(      'specUrl' => 'http://www.xmlrpc.com/spec',      'specVersion' => 1    ),    'faults_interop' => array(      'specUrl' => 'http://xmlrpc-epi.sourceforge.net/specs/rfc.fault_codes.php',      'specVersion' => 20010516    ),    'system.multicall' => array(      'specUrl' => 'http://www.xmlrpc.com/discuss/msgReader$1208',      'specVersion' => 1    ),    'introspection' => array(    'specUrl' => 'http://scripts.incutio.com/xmlrpc/introspection.html',    'specVersion' => 1    )  );}/** * XML-RPC method system.methodSignature maps to this function. * * @param $methodname *   Name of method for which we return a method signature. * @return array *   An array of types representing the method signature of the *   function that the methodname maps to. The methodSignature of *   this function is 'array', 'string' because it takes an array *   and returns a string. */function xmlrpc_server_method_signature($methodname) {  $xmlrpc_server = xmlrpc_server_get();  if (!isset($xmlrpc_server->callbacks[$methodname])) {    return xmlrpc_error(-32601, t('Server error. Requested method @methodname not specified.', array("@methodname" => $methodname)));  }  if (!is_array($xmlrpc_server->signatures[$methodname])) {    return xmlrpc_error(-32601, t('Server error. Requested method @methodname signature not specified.', array("@methodname" => $methodname)));  }  // We array of types  $return = array();  foreach ($xmlrpc_server->signatures[$methodname] as $type) {    $return[] = $type;  }  return $return;}/** * XML-RPC method system.methodHelp maps to this function. * * @param $method *   Name of method for which we return a help string. */function xmlrpc_server_method_help($method) {  $xmlrpc_server = xmlrpc_server_get();  return $xmlrpc_server->help[$method];}
<?php// $Id$/** * Implementation of hook_install(). */function statistics_install() {  // Create tables.  drupal_install_schema('statistics');}/** * Changes session ID  field to VARCHAR(64) to add support for SHA-1 hashes. */function statistics_update_1000() {  $ret = array();  switch ($GLOBALS['db_type']) {    case 'mysql':    case 'mysqli':      $ret[] = update_sql("ALTER TABLE {accesslog} CHANGE COLUMN sid sid varchar(64) NOT NULL default ''");      break;    case 'pgsql':      db_change_column($ret, 'accesslog', 'sid', 'sid', 'varchar(64)', array('not null' => TRUE, 'default' => "''"));      break;  }  return $ret;}/** * Implementation of hook_uninstall(). */function statistics_uninstall() {  // Remove tables.  drupal_uninstall_schema('statistics');  variable_del('statistics_count_content_views');  variable_del('statistics_enable_access_log');  variable_del('statistics_flush_accesslog_timer');  variable_del('statistics_day_timestamp');  variable_del('statistics_block_top_day_num');  variable_del('statistics_block_top_all_num');  variable_del('statistics_block_top_last_num');}/** * Implementation of hook_schema(). */function statistics_schema() {  $schema['accesslog'] = array(    'description' => 'Stores site access information for statistics.',    'fields' => array(      'aid' => array(        'type' => 'serial',        'not null' => TRUE,        'description' => 'Primary Key: Unique accesslog ID.',      ),      'sid' => array(        'type' => 'varchar',        'length' => 64,        'not null' => TRUE,        'default' => '',        'description' => 'Browser session ID of user that visited page.',      ),      'title' => array(        'type' => 'varchar',        'length' => 255,        'not null' => FALSE,        'description' => 'Title of page visited.',      ),      'path' => array(        'type' => 'varchar',        'length' => 255,        'not null' => FALSE,        'description' => 'Internal path to page visited (relative to Drupal root.)',      ),      'url' => array(        'type' => 'text',        'not null' => FALSE,        'description' => 'Referrer URI.',      ),      'hostname' => array(        'type' => 'varchar',        'length' => 128,        'not null' => FALSE,        'description' => 'Hostname of user that visited the page.',      ),      'uid' => array(        'type' => 'int',        'unsigned' => TRUE,        'not null' => FALSE,        'default' => 0,        'description' => 'User {users}.uid that visited the page.',      ),      'timer' => array(        'type' => 'int',        'unsigned' => TRUE,        'not null' => TRUE,        'default' => 0,        'description' => 'Time in milliseconds that the page took to load.',      ),      'timestamp' => array(        'type' => 'int',        'unsigned' => TRUE,        'not null' => TRUE,        'default' => 0,        'description' => 'Timestamp of when the page was visited.',      ),    ),    'indexes' => array(      'accesslog_timestamp' => array('timestamp'),      'uid' => array('uid'),    ),    'primary key' => array('aid'),  );  return $schema;}/** * @defgroup updates-6.x-extra Extra statistics updates for 6.x * @{ *//** * Allow longer referrers. */function statistics_update_6000() {  $ret = array();  db_change_field($ret, 'accesslog', 'url', 'url', array('type' => 'text', 'not null' => FALSE));  return $ret;}/** * @} End of "defgroup updates-6.x-extra" * The next series of updates should start at 7000. */
<?php// $Id$/** * @file * User page callbacks for the book module. *//** * Menu callback; prints a listing of all books. */function book_render() {  $book_list = array();  foreach (book_get_books() as $book) {    $book_list[] = l($book['title'], $book['href'], $book['options']);  }  return theme('item_list', $book_list);}/** * Menu callback; Generates various representation of a book page and its children. * * The function delegates the generation of output to helper functions. * The function name is derived by prepending 'book_export_' to the * given output type. So, e.g., a type of 'html' results in a call to * the function book_export_html(). * * @param $type *   A string encoding the type of output requested. The following *   types are currently supported in book module: * *   - html: HTML (printer friendly output) * *   Other types may be supported in contributed modules. * @param $nid *   An integer representing the node id (nid) of the node to export * @return *   A string representing the node and its children in the book hierarchy *   in a format determined by the $type parameter. */function book_export($type, $nid) {  $type = drupal_strtolower($type);  $export_function = 'book_export_'. $type;  if (function_exists($export_function)) {    print call_user_func($export_function, $nid);  }  else {    drupal_set_message(t('Unknown export format.'));    drupal_not_found();  }}/** * This function is called by book_export() to generate HTML for export. * * The given node is /embedded to its absolute depth in a top level * section/. For example, a child node with depth 2 in the hierarchy * is contained in (otherwise empty) &lt;div&gt; elements * corresponding to depth 0 and depth 1. This is intended to support * WYSIWYG output - e.g., level 3 sections always look like level 3 * sections, no matter their depth relative to the node selected to be * exported as printer-friendly HTML. * * @param $nid *   An integer representing the node id (nid) of the node to export. * @return *   A string containing HTML representing the node and its children in *   the book hierarchy. */function book_export_html($nid) {  if (user_access('access printer-friendly version')) {    $export_data = array();    $node = node_load($nid);    if (isset($node->book)) {      $tree = book_menu_subtree_data($node->book);      $contents = book_export_traverse($tree, 'book_node_export');    }    return theme('book_export_html', $node->title, $contents, $node->book['depth']);  }  else {    drupal_access_denied();  }}/** * Menu callback; show the outline form for a single node. */function book_outline($node) {  drupal_set_title(check_plain($node->title));  return drupal_get_form('book_outline_form', $node);}/** * Build the form to handle all book outline operations via the outline tab. * * @see book_outline_form_submit() * @see book_remove_button_submit() * * @ingroup forms */function book_outline_form(&$form_state, $node) {  if (!isset($node->book)) {    // The node is not part of any book yet - set default options.    $node->book = _book_link_defaults($node->nid);  }  else {    $node->book['original_bid'] = $node->book['bid'];  }  // Find the depth limit for the parent select.  if (!isset($node->book['parent_depth_limit'])) {    $node->book['parent_depth_limit'] = _book_parent_depth_limit($node->book);  }  $form['#node'] = $node;  $form['#id'] = 'book-outline';  _book_add_form_elements($form, $node);  $form['book']['#collapsible'] = FALSE;  $form['update'] = array(    '#type' => 'submit',    '#value' => $node->book['original_bid'] ? t('Update book outline') : t('Add to book outline'),    '#weight' => 15,  );  $form['remove'] = array(    '#type' => 'submit',    '#value' => t('Remove from book outline'),    '#access' => $node->nid != $node->book['bid'] && $node->book['bid'],    '#weight' => 20,    '#submit' => array('book_remove_button_submit'),  );  return $form;}/** * Button submit function to redirect to removal confirm form. * * @see book_outline_form() */function book_remove_button_submit($form, &$form_state) {  $form_state['redirect'] = 'node/'. $form['#node']->nid .'/outline/remove';}/** * Handles book outline form submissions from the outline tab. * * @see book_outline_form() */function book_outline_form_submit($form, &$form_state) {  $node = $form['#node'];  $form_state['redirect'] = "node/". $node->nid;  $book_link = $form_state['values']['book'];  if (!$book_link['bid']) {    drupal_set_message(t('No changes were made'));    return;  }  $book_link['menu_name'] = book_menu_name($book_link['bid']);  $node->book = $book_link;  if (_book_update_outline($node)) {    if ($node->book['parent_mismatch']) {      // This will usually only happen when JS is disabled.      drupal_set_message(t('The post has been added to the selected book. You may now position it relative to other pages.'));      $form_state['redirect'] = "node/". $node->nid ."/outline";    }    else {      drupal_set_message(t('The book outline has been updated.'));    }  }  else {    drupal_set_message(t('There was an error adding the post to the book.'), 'error');  }}/** * Menu callback; builds a form to confirm removal of a node from the book. * * @see book_remove_form_submit() * * @ingroup forms */function book_remove_form(&$form_state, $node) {  $form['#node'] = $node;  $title = array('%title' => $node->title);  if ($node->book['has_children']) {    $description = t('%title has associated child pages, which will be relocated automatically to maintain their connection to the book. To recreate the hierarchy (as it was before removing this page), %title may be added again using the Outline tab, and each of its former child pages will need to be relocated manually.', $title);  }  else {    $description = t('%title may be added to hierarchy again using the Outline tab.', $title);  }  return confirm_form($form, t('Are you sure you want to remove %title from the book hierarchy?', $title), 'node/'. $node->nid, $description, t('Remove'));}/** * Confirm form submit function to remove a node from the book. * * @see book_remove_form() */function book_remove_form_submit($form, &$form_state) {  $node = $form['#node'];  if ($node->nid != $node->book['bid']) {    // Only allowed when this is not a book (top-level page).    menu_link_delete($node->book['mlid']);    db_query('DELETE FROM {book} WHERE nid = %d', $node->nid);    drupal_set_message(t('The post has been removed from the book.'));  }  $form_state['redirect'] = 'node/'. $node->nid;}/** * AJAX callback to replace the book parent select options. * * This function is called when the selected book is changed.  It updates the * cached form (either the node form or the book outline form) and returns * rendered output to be used to replace the select containing the possible * parent pages in the newly selected book. * * @param $build_id *   The form's build_id. * @param $bid *   A bid from from among those in the form's book select. * @return *   Prints the replacement HTML in JSON format. */function book_form_update() {  $bid = $_POST['book']['bid'];  if ($form = form_get_cache($_POST['form_build_id'], $form_state)) {    // Validate the bid.    if (isset($form['book']['bid']['#options'][$bid])) {      $book_link = $form['#node']->book;      $book_link['bid'] = $bid;      // Get the new options and update the cache.      $form['book']['plid'] = _book_parent_select($book_link);      form_set_cache($_POST['form_build_id'], $form, $form_state);      // Build and render the new select element, then return it in JSON format.      $form_state = array();      $form['#post'] = array();      $form = form_builder($form['form_id']['#value'] , $form, $form_state);      $output = drupal_render($form['book']['plid']);      drupal_json(array('status' => TRUE, 'data' => $output));    }    else {      drupal_json(array('status' => FALSE, 'data' => ''));    }  }  else {    drupal_json(array('status' => FALSE, 'data' => ''));  }  exit();}
<?php// $Id$/** * Compose and optionally send an e-mail message. * * Sending an e-mail works with defining an e-mail template (subject, text * and possibly e-mail headers) and the replacement values to use in the * appropriate places in the template. Processed e-mail templates are * requested from hook_mail() from the module sending the e-mail. Any module * can modify the composed e-mail message array using hook_mail_alter(). * Finally drupal_mail_send() sends the e-mail, which can be reused * if the exact same composed e-mail is to be sent to multiple recipients. * * Finding out what language to send the e-mail with needs some consideration. * If you send e-mail to a user, her preferred language should be fine, so * use user_preferred_language(). If you send email based on form values * filled on the page, there are two additional choices if you are not * sending the e-mail to a user on the site. You can either use the language * used to generate the page ($language global variable) or the site default * language. See language_default(). The former is good if sending e-mail to * the person filling the form, the later is good if you send e-mail to an * address previously set up (like contact addresses in a contact form). * * Taking care of always using the proper language is even more important * when sending e-mails in a row to multiple users. Hook_mail() abstracts * whether the mail text comes from an administrator setting or is * static in the source code. It should also deal with common mail tokens, * only receiving $params which are unique to the actual e-mail at hand. * * An example: * * @code *   function example_notify($accounts) { *     foreach ($accounts as $account) { *       $params['account'] = $account; *       // example_mail() will be called based on the first drupal_mail() parameter. *       drupal_mail('example', 'notice', $account->mail, user_preferred_language($account), $params); *     } *   } * *   function example_mail($key, &$message, $params) { *     $language = $message['language']; *     $variables = user_mail_tokens($params['account'], $language); *     switch($key) { *       case 'notice': *         $message['subject'] = t('Notification from !site', $variables, $language->language); *         $message['body'][] = t("Dear !username\n\nThere is new content available on the site.", $variables, $language->language); *         break; *     } *   } * @endcode * * @param $module *   A module name to invoke hook_mail() on. The {$module}_mail() hook will be *   called to complete the $message structure which will already contain common *   defaults. * @param $key *   A key to identify the e-mail sent. The final e-mail id for e-mail altering *   will be {$module}_{$key}. * @param $to *   The e-mail address or addresses where the message will be sent to. The *   formatting of this string must comply with RFC 2822. Some examples are: *    user@example.com *    user@example.com, anotheruser@example.com *    User <user@example.com> *    User <user@example.com>, Another User <anotheruser@example.com> * @param $language *   Language object to use to compose the e-mail. * @param $params *   Optional parameters to build the e-mail. * @param $from *   Sets From to this value, if given. * @param $send *   Send the message directly, without calling drupal_mail_send() manually. * @return *   The $message array structure containing all details of the *   message. If already sent ($send = TRUE), then the 'result' element *   will contain the success indicator of the e-mail, failure being already *   written to the watchdog. (Success means nothing more than the message being *   accepted at php-level, which still doesn't guarantee it to be delivered.) */function drupal_mail($module, $key, $to, $language, $params = array(), $from = NULL, $send = TRUE) {  $default_from = variable_get('site_mail', ini_get('sendmail_from'));  // Bundle up the variables into a structured array for altering.  $message = array(    'id'       => $module .'_'. $key,    'to'       => $to,    'from'     => isset($from) ? $from : $default_from,    'language' => $language,    'params'   => $params,    'subject'  => '',    'body'     => array()  );  // Build the default headers  $headers = array(    'MIME-Version'              => '1.0',    'Content-Type'              => 'text/plain; charset=UTF-8; format=flowed; delsp=yes',    'Content-Transfer-Encoding' => '8Bit',    'X-Mailer'                  => 'Drupal'  );  if ($default_from) {    // To prevent e-mail from looking like spam, the addresses in the Sender and    // Return-Path headers should have a domain authorized to use the originating    // SMTP server. Errors-To is redundant, but shouldn't hurt.    $headers['From'] = $headers['Sender'] = $headers['Return-Path'] = $headers['Errors-To'] = $default_from;  }  if ($from) {    $headers['From'] = $from;  }  $message['headers'] = $headers;  // Build the e-mail (get subject and body, allow additional headers) by  // invoking hook_mail() on this module. We cannot use module_invoke() as  // we need to have $message by reference in hook_mail().  if (function_exists($function = $module .'_mail')) {    $function($key, $message, $params);  }  // Invoke hook_mail_alter() to allow all modules to alter the resulting e-mail.  drupal_alter('mail', $message);  // Concatenate and wrap the e-mail body.  $message['body'] = is_array($message['body']) ? drupal_wrap_mail(implode("\n\n", $message['body'])) : drupal_wrap_mail($message['body']);  // Optionally send e-mail.  if ($send) {    $message['result'] = drupal_mail_send($message);    // Log errors    if (!$message['result']) {      watchdog('mail', 'Error sending e-mail (from %from to %to).', array('%from' => $message['from'], '%to' => $message['to']), WATCHDOG_ERROR);      drupal_set_message(t('Unable to send e-mail. Please contact the site administrator if the problem persists.'), 'error');    }  }  return $message;}/** * Send an e-mail message, using Drupal variables and default settings. * More information in the <a href="http://php.net/manual/en/function.mail.php"> * PHP function reference for mail()</a>. See drupal_mail() for information on * how $message is composed. * * @param $message *  Message array with at least the following elements: *   - id *      A unique identifier of the e-mail type. Examples: 'contact_user_copy', *      'user_password_reset'. *   - to *      The mail address or addresses where the message will be sent to. The *      formatting of this string must comply with RFC 2822. Some examples are: *       user@example.com *       user@example.com, anotheruser@example.com *       User <user@example.com> *       User <user@example.com>, Another User <anotheruser@example.com> *   - subject *      Subject of the e-mail to be sent. This must not contain any newline *      characters, or the mail may not be sent properly. *   - body *      Message to be sent. Accepts both CRLF and LF line-endings. *      E-mail bodies must be wrapped. You can use drupal_wrap_mail() for *      smart plain text wrapping. *   - headers *      Associative array containing all mail headers. * @return *   Returns TRUE if the mail was successfully accepted for delivery, *   FALSE otherwise. */function drupal_mail_send($message) {  // Allow for a custom mail backend.  if (variable_get('smtp_library', '') && file_exists(variable_get('smtp_library', ''))) {    include_once './'. variable_get('smtp_library', '');    return drupal_mail_wrapper($message);  }  else {    $mimeheaders = array();    foreach ($message['headers'] as $name => $value) {      $mimeheaders[] = $name .': '. mime_header_encode($value);    }    return mail(      $message['to'],      mime_header_encode($message['subject']),      // Note: e-mail uses CRLF for line-endings, but PHP's API requires LF.      // They will appear correctly in the actual e-mail that is sent.      str_replace("\r", '', $message['body']),      // For headers, PHP's API suggests that we use CRLF normally,      // but some MTAs incorrecly replace LF with CRLF. See #234403.      join("\n", $mimeheaders)    );  }}/** * Perform format=flowed soft wrapping for mail (RFC 3676). * * We use delsp=yes wrapping, but only break non-spaced languages when * absolutely necessary to avoid compatibility issues. * * We deliberately use LF rather than CRLF, see drupal_mail(). * * @param $text *   The plain text to process. * @param $indent (optional) *   A string to indent the text with. Only '>' characters are repeated on *   subsequent wrapped lines. Others are replaced by spaces. */function drupal_wrap_mail($text, $indent = '') {  // Convert CRLF into LF.  $text = str_replace("\r", '', $text);  // See if soft-wrapping is allowed.  $clean_indent = _drupal_html_to_text_clean($indent);  $soft = strpos($clean_indent, ' ') === FALSE;  // Check if the string has line breaks.  if (strpos($text, "\n") !== FALSE) {    // Remove trailing spaces to make existing breaks hard.    $text = preg_replace('/ +\n/m', "\n", $text);    // Wrap each line at the needed width.    $lines = explode("\n", $text);    array_walk($lines, '_drupal_wrap_mail_line', array('soft' => $soft, 'length' => strlen($indent)));    $text = implode("\n", $lines);  }  else {    // Wrap this line.    _drupal_wrap_mail_line($text, 0, array('soft' => $soft, 'length' => strlen($indent)));  }  // Empty lines with nothing but spaces.  $text = preg_replace('/^ +\n/m', "\n", $text);  // Space-stuff special lines.  $text = preg_replace('/^(>| |From)/m', ' $1', $text);  // Apply indentation. We only include non-'>' indentation on the first line.  $text = $indent . substr(preg_replace('/^/m', $clean_indent, $text), strlen($indent));  return $text;}/** * Transform an HTML string into plain text, preserving the structure of the * markup. Useful for preparing the body of a node to be sent by e-mail. * * The output will be suitable for use as 'format=flowed; delsp=yes' text * (RFC 3676) and can be passed directly to drupal_mail() for sending. * * We deliberately use LF rather than CRLF, see drupal_mail(). * * This function provides suitable alternatives for the following tags: * <a> <em> <i> <strong> <b> <br> <p> <blockquote> <ul> <ol> <li> <dl> <dt> * <dd> <h1> <h2> <h3> <h4> <h5> <h6> <hr> * * @param $string *   The string to be transformed. * @param $allowed_tags (optional) *   If supplied, a list of tags that will be transformed. If omitted, all *   all supported tags are transformed. * @return *   The transformed string. */function drupal_html_to_text($string, $allowed_tags = NULL) {  // Cache list of supported tags.  static $supported_tags;  if (empty($supported_tags)) {    $supported_tags = array('a', 'em', 'i', 'strong', 'b', 'br', 'p', 'blockquote', 'ul', 'ol', 'li', 'dl', 'dt', 'dd', 'h1', 'h2', 'h3', 'h4', 'h5', 'h6', 'hr');  }  // Make sure only supported tags are kept.  $allowed_tags = isset($allowed_tags) ? array_intersect($supported_tags, $allowed_tags) : $supported_tags;  // Make sure tags, entities and attributes are well-formed and properly nested.  $string = _filter_htmlcorrector(filter_xss($string, $allowed_tags));  // Apply inline styles.  $string = preg_replace('!</?(em|i)((?> +)[^>]*)?>!i', '/', $string);  $string = preg_replace('!</?(strong|b)((?> +)[^>]*)?>!i', '*', $string);  // Replace inline <a> tags with the text of link and a footnote.  // 'See <a href="http://drupal.org">the Drupal site</a>' becomes  // 'See the Drupal site [1]' with the URL included as a footnote.  _drupal_html_to_mail_urls(NULL, TRUE);  $pattern = '@(<a[^>]+?href="([^"]*)"[^>]*?>(.+?)</a>)@i';  $string = preg_replace_callback($pattern, '_drupal_html_to_mail_urls', $string);  $urls = _drupal_html_to_mail_urls();  $footnotes = '';  if (count($urls)) {    $footnotes .= "\n";    for ($i = 0, $max = count($urls); $i < $max; $i++) {      $footnotes .= '['. ($i + 1) .'] '. $urls[$i] ."\n";    }  }  // Split tags from text.  $split = preg_split('/<([^>]+?)>/', $string, -1, PREG_SPLIT_DELIM_CAPTURE);  // Note: PHP ensures the array consists of alternating delimiters and literals  // and begins and ends with a literal (inserting $null as required).  $tag = FALSE; // Odd/even counter (tag or no tag)  $casing = NULL; // Case conversion function  $output = '';  $indent = array(); // All current indentation string chunks  $lists = array(); // Array of counters for opened lists  foreach ($split as $value) {    $chunk = NULL; // Holds a string ready to be formatted and output.    // Process HTML tags (but don't output any literally).    if ($tag) {      list($tagname) = explode(' ', strtolower($value), 2);      switch ($tagname) {        // List counters        case 'ul':          array_unshift($lists, '*');          break;        case 'ol':          array_unshift($lists, 1);          break;        case '/ul':        case '/ol':          array_shift($lists);          $chunk = ''; // Ensure blank new-line.          break;        // Quotation/list markers, non-fancy headers        case 'blockquote':          // Format=flowed indentation cannot be mixed with lists.          $indent[] = count($lists) ? ' "' : '>';          break;        case 'li':          $indent[] = is_numeric($lists[0]) ? ' '. $lists[0]++ .') ' : ' * ';          break;        case 'dd':          $indent[] = '    ';          break;        case 'h3':          $indent[] = '.... ';          break;        case 'h4':          $indent[] = '.. ';          break;        case '/blockquote':          if (count($lists)) {            // Append closing quote for inline quotes (immediately).            $output = rtrim($output, "> \n") ."\"\n";            $chunk = ''; // Ensure blank new-line.          }          // Fall-through        case '/li':        case '/dd':          array_pop($indent);          break;        case '/h3':        case '/h4':          array_pop($indent);        case '/h5':        case '/h6':          $chunk = ''; // Ensure blank new-line.          break;        // Fancy headers        case 'h1':          $indent[] = '======== ';          $casing = 'drupal_strtoupper';          break;        case 'h2':          $indent[] = '-------- ';          $casing = 'drupal_strtoupper';          break;        case '/h1':        case '/h2':          $casing = NULL;          // Pad the line with dashes.          $output = _drupal_html_to_text_pad($output, ($tagname == '/h1') ? '=' : '-', ' ');          array_pop($indent);          $chunk = ''; // Ensure blank new-line.          break;        // Horizontal rulers        case 'hr':          // Insert immediately.          $output .= drupal_wrap_mail('', implode('', $indent)) ."\n";          $output = _drupal_html_to_text_pad($output, '-');          break;        // Paragraphs and definition lists        case '/p':        case '/dl':          $chunk = ''; // Ensure blank new-line.          break;      }    }    // Process blocks of text.    else {      // Convert inline HTML text to plain text.      $value = trim(preg_replace('/\s+/', ' ', decode_entities($value)));      if (strlen($value)) {        $chunk = $value;      }    }    // See if there is something waiting to be output.    if (isset($chunk)) {      // Apply any necessary case conversion.      if (isset($casing)) {        $chunk = $casing($chunk);      }      // Format it and apply the current indentation.      $output .= drupal_wrap_mail($chunk, implode('', $indent)) ."\n";      // Remove non-quotation markers from indentation.      $indent = array_map('_drupal_html_to_text_clean', $indent);    }    $tag = !$tag;  }  return $output . $footnotes;}/** * Helper function for array_walk in drupal_wrap_mail(). * * Wraps words on a single line. */function _drupal_wrap_mail_line(&$line, $key, $values) {  // Use soft-breaks only for purely quoted or unindented text.  $line = wordwrap($line, 77 - $values['length'], $values['soft'] ? "  \n" : "\n");  // Break really long words at the maximum width allowed.  $line = wordwrap($line, 996 - $values['length'], $values['soft'] ? " \n" : "\n");}/** * Helper function for drupal_html_to_text(). * * Keeps track of URLs and replaces them with placeholder tokens. */function _drupal_html_to_mail_urls($match = NULL, $reset = FALSE) {  global $base_url, $base_path;  static $urls = array(), $regexp;  if ($reset) {    // Reset internal URL list.    $urls = array();  }  else {    if (empty($regexp)) {      $regexp = '@^'. preg_quote($base_path, '@') .'@';    }    if ($match) {      list(, , $url, $label) = $match;      // Ensure all URLs are absolute.      $urls[] = strpos($url, '://') ? $url : preg_replace($regexp, $base_url .'/', $url);      return $label .' ['. count($urls) .']';    }  }  return $urls;}/** * Helper function for drupal_wrap_mail() and drupal_html_to_text(). * * Replace all non-quotation markers from a given piece of indentation with spaces. */function _drupal_html_to_text_clean($indent) {  return preg_replace('/[^>]/', ' ', $indent);}/** * Helper function for drupal_html_to_text(). * * Pad the last line with the given character. */function _drupal_html_to_text_pad($text, $pad, $prefix = '') {  // Remove last line break.  $text = substr($text, 0, -1);  // Calculate needed padding space and add it.  if (($p = strrpos($text, "\n")) === FALSE) {    $p = -1;  }  $n = max(0, 79 - (strlen($text) - $p));  // Add prefix and padding, and restore linebreak.  return $text . $prefix . str_repeat($pad, $n - strlen($prefix)) ."\n";}
<?php// $Id$/** * @file * API for manipulating images. *//** * @defgroup image Image toolkits * @{ * Drupal's image toolkits provide an abstraction layer for common image file * manipulations like scaling, cropping, and rotating. The abstraction frees * module authors from the need to support multiple image libraries, and it * allows site administrators to choose the library that's best for them. * * PHP includes the GD library by default so a GD toolkit is installed with * Drupal. Other toolkits like ImageMagic are available from contrib modules. * GD works well for small images, but using it with larger files may cause PHP * to run out of memory. In contrast the ImageMagick library does not suffer * from this problem, but it requires the ISP to have installed additional * software. * * Image toolkits are installed by copying the image.ToolkitName.inc file into * Drupal's includes directory. The toolkit must then be enabled using the * admin/settings/image-toolkit form. * * Only one toolkit maybe selected at a time. If a module author wishes to call * a specific toolkit they can check that it is installed by calling * image_get_available_toolkits(), and then calling its functions directly. *//** * Return a list of available toolkits. * * @return *   An array of toolkit name => descriptive title. */function image_get_available_toolkits() {  $toolkits = file_scan_directory('includes', 'image\..*\.inc$');  $output = array();  foreach ($toolkits as $file => $toolkit) {    include_once "./$file";    $function = str_replace('.', '_', $toolkit->name) .'_info';    if (function_exists($function)) {      $info = $function();      $output[$info['name']] = $info['title'];    }  }  return $output;}/** * Retrieve the name of the currently used toolkit. * * @return *   String containing the name of the selected toolkit, or FALSE on error. */function image_get_toolkit() {  static $toolkit;  if (!$toolkit) {    $toolkit = variable_get('image_toolkit', 'gd');    $toolkit_file = './includes/image.'. $toolkit .'.inc';    if (isset($toolkit) && file_exists($toolkit_file)) {      include_once $toolkit_file;    }    elseif (!image_gd_check_settings()) {      $toolkit = FALSE;    }  }  return $toolkit;}/** * Invokes the given method using the currently selected toolkit. * * @param $method *   A string containing the method to invoke. * @param $params *   An optional array of parameters to pass to the toolkit method. * @return *   Mixed values (typically Boolean indicating successful operation). */function image_toolkit_invoke($method, $params = array()) {  if ($toolkit = image_get_toolkit()) {    $function = 'image_'. $toolkit .'_'. $method;    if (function_exists($function)) {      return call_user_func_array($function, $params);    }    else {      watchdog('php', 'The selected image handling toolkit %toolkit can not correctly process %function.', array('%toolkit' => $toolkit, '%function' => $function), WATCHDOG_ERROR);      return FALSE;    }  }}/** * Get details about an image. * * Drupal only supports GIF, JPG and PNG file formats. * * @return *   FALSE, if the file could not be found or is not an image. Otherwise, a *   keyed array containing information about the image: *    'width'     - Width in pixels. *    'height'    - Height in pixels. *    'extension' - Commonly used file extension for the image. *    'mime_type' - MIME type ('image/jpeg', 'image/gif', 'image/png'). *    'file_size' - File size in bytes. */function image_get_info($file) {  if (!is_file($file)) {    return FALSE;  }  $details = FALSE;  $data = @getimagesize($file);  $file_size = @filesize($file);  if (isset($data) && is_array($data)) {    $extensions = array('1' => 'gif', '2' => 'jpg', '3' => 'png');    $extension = array_key_exists($data[2], $extensions) ?  $extensions[$data[2]] : '';    $details = array('width'     => $data[0],                     'height'    => $data[1],                     'extension' => $extension,                     'file_size' => $file_size,                     'mime_type' => $data['mime']);  }  return $details;}/** * Scales an image to the exact width and height given. Achieves the * target aspect ratio by cropping the original image equally on both * sides, or equally on the top and bottom.  This function is, for * example, useful to create uniform sized avatars from larger images. * * The resulting image always has the exact target dimensions. * * @param $source *   The file path of the source image. * @param $destination *   The file path of the destination image. * @param $width *   The target width, in pixels. * @param $height *   The target height, in pixels. * @return *   TRUE or FALSE, based on success. */function image_scale_and_crop($source, $destination, $width, $height) {  $info = image_get_info($source);  $scale = max($width / $info['width'], $height / $info['height']);  $x = round(($info['width'] * $scale - $width) / 2);  $y = round(($info['height'] * $scale - $height) / 2);  if (image_toolkit_invoke('resize', array($source, $destination, $info['width'] * $scale, $info['height'] * $scale))) {    return image_toolkit_invoke('crop', array($destination, $destination, $x, $y, $width, $height));  }  return FALSE;}/** * Scales an image to the given width and height while maintaining aspect * ratio. * * The resulting image can be smaller for one or both target dimensions. * * @param $source *   The file path of the source image. * @param $destination *   The file path of the destination image. * @param $width *   The target width, in pixels. * @param $height *   The target height, in pixels. * @return *   TRUE or FALSE, based on success. */function image_scale($source, $destination, $width, $height) {  $info = image_get_info($source);  // Don't scale up.  if ($width >= $info['width'] && $height >= $info['height']) {    return FALSE;  }  $aspect = $info['height'] / $info['width'];  if ($aspect < $height / $width) {    $width = (int)min($width, $info['width']);    $height = (int)round($width * $aspect);  }  else {    $height = (int)min($height, $info['height']);    $width = (int)round($height / $aspect);  }  return image_toolkit_invoke('resize', array($source, $destination, $width, $height));}/** * Resize an image to the given dimensions (ignoring aspect ratio). * * @param $source *   The file path of the source image. * @param $destination *   The file path of the destination image. * @param $width *   The target width, in pixels. * @param $height *   The target height, in pixels.  * @return *   TRUE or FALSE, based on success. */function image_resize($source, $destination, $width, $height) {  return image_toolkit_invoke('resize', array($source, $destination, $width, $height));}/** * Rotate an image by the given number of degrees. * * @param $source *   The file path of the source image. * @param $destination *   The file path of the destination image. * @param $degrees *   The number of (clockwise) degrees to rotate the image. * @param $background *   An hexidecimal integer specifying the background color to use for the *   uncovered area of the image after the rotation. E.g. 0x000000 for black, *   0xff00ff for magenta, and 0xffffff for white. * @return *   TRUE or FALSE, based on success. */function image_rotate($source, $destination, $degrees, $background = 0x000000) {  return image_toolkit_invoke('rotate', array($source, $destination, $degrees, $background));}/** * Crop an image to the rectangle specified by the given rectangle. * * @param $source *   The file path of the source image. * @param $destination *   The file path of the destination image. * @param $x *   The top left co-ordinate, in pixels, of the crop area (x axis value). * @param $y *   The top left co-ordinate, in pixels, of the crop area (y axis value). * @param $width *   The target width, in pixels. * @param $height *   The target height, in pixels. * @return *   TRUE or FALSE, based on success. */function image_crop($source, $destination, $x, $y, $width, $height) {  return image_toolkit_invoke('crop', array($source, $destination, $x, $y, $width, $height));}/** * @} End of "defgroup image". */
<?php// $Id$/** * @file * Administrative page callbacks for menu module. *//** * Menu callback which shows an overview page of all the custom menus and their descriptions. */function menu_overview_page() {  $result = db_query("SELECT * FROM {menu_custom} ORDER BY title");  $content = array();  while ($menu = db_fetch_array($result)) {    $menu['href'] = 'admin/build/menu-customize/'. $menu['menu_name'];    $menu['localized_options'] = array();    $menu['description'] = filter_xss_admin($menu['description']);    $content[] = $menu;  }  return theme('admin_block_content', $content);}/** * Form for editing an entire menu tree at once. * * Shows for one menu the menu items accessible to the current user and * relevant operations. */function menu_overview_form(&$form_state, $menu) {  global $menu_admin;  $sql = "    SELECT m.load_functions, m.to_arg_functions, m.access_callback, m.access_arguments, m.page_callback, m.page_arguments, m.title, m.title_callback, m.title_arguments, m.type, m.description, ml.*    FROM {menu_links} ml LEFT JOIN {menu_router} m ON m.path = ml.router_path    WHERE ml.menu_name = '%s'    ORDER BY p1 ASC, p2 ASC, p3 ASC, p4 ASC, p5 ASC, p6 ASC, p7 ASC, p8 ASC, p9 ASC";  $result = db_query($sql, $menu['menu_name']);  $tree = menu_tree_data($result);  $node_links = array();  menu_tree_collect_node_links($tree, $node_links);  // We indicate that a menu administrator is running the menu access check.  $menu_admin = TRUE;  menu_tree_check_access($tree, $node_links);  $menu_admin = FALSE;  $form = _menu_overview_tree_form($tree);  $form['#menu'] =  $menu;  if (element_children($form)) {    $form['submit'] = array(      '#type' => 'submit',      '#value' => t('Save configuration'),    );  }  else {    $form['empty_menu'] = array('#value' => t('There are no menu items yet.'));  }  return $form;}/** * Recursive helper function for menu_overview_form(). */function _menu_overview_tree_form($tree) {  static $form = array('#tree' => TRUE);  foreach ($tree as $data) {    $title = '';    $item = $data['link'];    // Don't show callbacks; these have $item['hidden'] < 0.    if ($item && $item['hidden'] >= 0) {      $mlid = 'mlid:'. $item['mlid'];      $form[$mlid]['#item'] = $item;      $form[$mlid]['#attributes'] = $item['hidden'] ? array('class' => 'menu-disabled') : array('class' => 'menu-enabled');      $form[$mlid]['title']['#value'] = l($item['title'], $item['href'], $item['localized_options']) . ($item['hidden'] ? ' ('. t('disabled') .')' : '');      $form[$mlid]['hidden'] = array(        '#type' => 'checkbox',        '#default_value' => !$item['hidden'],      );      $form[$mlid]['expanded'] = array(        '#type' => 'checkbox',        '#default_value' => $item['expanded'],      );      $form[$mlid]['weight'] = array(        '#type' => 'weight',        '#delta' => 50,        '#default_value' => isset($form_state[$mlid]['weight']) ? $form_state[$mlid]['weight'] : $item['weight'],      );      $form[$mlid]['mlid'] = array(        '#type' => 'hidden',        '#value' => $item['mlid'],      );      $form[$mlid]['plid'] = array(        '#type' => 'textfield',        '#default_value' => isset($form_state[$mlid]['plid']) ? $form_state[$mlid]['plid'] : $item['plid'],        '#size' => 6,      );      // Build a list of operations.      $operations = array();      $operations['edit'] = l(t('edit'), 'admin/build/menu/item/'. $item['mlid'] .'/edit');      // Only items created by the menu module can be deleted.      if ($item['module'] == 'menu' || $item['updated'] == 1) {        $operations['delete'] = l(t('delete'), 'admin/build/menu/item/'. $item['mlid'] .'/delete');      }      // Set the reset column.      elseif ($item['module'] == 'system' && $item['customized']) {        $operations['reset'] = l(t('reset'), 'admin/build/menu/item/'. $item['mlid'] .'/reset');      }      $form[$mlid]['operations'] = array();      foreach ($operations as $op => $value) {        $form[$mlid]['operations'][$op] = array('#value' => $value);      }    }    if ($data['below']) {      _menu_overview_tree_form($data['below']);    }  }  return $form;}/** * Submit handler for the menu overview form. * * This function takes great care in saving parent items first, then items * underneath them. Saving items in the incorrect order can break the menu tree. * * @see menu_overview_form() */function menu_overview_form_submit($form, &$form_state) {  // When dealing with saving menu items, the order in which these items are  // saved is critical. If a changed child item is saved before its parent,  // the child item could be saved with an invalid path past its immediate  // parent. To prevent this, save items in the form in the same order they  // are sent by $_POST, ensuring parents are saved first, then their children.  // See http://drupal.org/node/181126#comment-632270  $order = array_flip(array_keys($form['#post'])); // Get the $_POST order.  $form = array_merge($order, $form); // Update our original form with the new order.  $updated_items = array();  $fields = array('expanded', 'weight', 'plid');  foreach (element_children($form) as $mlid) {    if (isset($form[$mlid]['#item'])) {      $element = $form[$mlid];      // Update any fields that have changed in this menu item.      foreach ($fields as $field) {        if ($element[$field]['#value'] != $element[$field]['#default_value']) {          $element['#item'][$field] = $element[$field]['#value'];          $updated_items[$mlid] = $element['#item'];        }      }      // Hidden is a special case, the value needs to be reversed.      if ($element['hidden']['#value'] != $element['hidden']['#default_value']) {        $element['#item']['hidden'] = !$element['hidden']['#value'];        $updated_items[$mlid] = $element['#item'];      }    }  }  // Save all our changed items to the database.  foreach ($updated_items as $item) {    $item['customized'] = 1;    menu_link_save($item);  }}/** * Theme the menu overview form into a table. * * @ingroup themeable */function theme_menu_overview_form($form) {  drupal_add_tabledrag('menu-overview', 'match', 'parent', 'menu-plid', 'menu-plid', 'menu-mlid', TRUE, MENU_MAX_DEPTH - 1);  drupal_add_tabledrag('menu-overview', 'order', 'sibling', 'menu-weight');  $header = array(    t('Menu item'),    array('data' => t('Enabled'), 'class' => 'checkbox'),    array('data' => t('Expanded'), 'class' => 'checkbox'),    t('Weight'),    array('data' => t('Operations'), 'colspan' => '3'),  );  $rows = array();  foreach (element_children($form) as $mlid) {    if (isset($form[$mlid]['hidden'])) {      $element = &$form[$mlid];      // Build a list of operations.      $operations = array();      foreach (element_children($element['operations']) as $op) {        $operations[] = drupal_render($element['operations'][$op]);      }      while (count($operations) < 2) {        $operations[] = '';      }      // Add special classes to be used for tabledrag.js.      $element['plid']['#attributes']['class'] = 'menu-plid';      $element['mlid']['#attributes']['class'] = 'menu-mlid';      $element['weight']['#attributes']['class'] = 'menu-weight';      // Change the parent field to a hidden. This allows any value but hides the field.      $element['plid']['#type'] = 'hidden';      $row = array();      $row[] = theme('indentation', $element['#item']['depth'] - 1) . drupal_render($element['title']);      $row[] = array('data' => drupal_render($element['hidden']), 'class' => 'checkbox');      $row[] = array('data' => drupal_render($element['expanded']), 'class' => 'checkbox');      $row[] = drupal_render($element['weight']) . drupal_render($element['plid']) . drupal_render($element['mlid']);      $row = array_merge($row, $operations);      $row = array_merge(array('data' => $row), $element['#attributes']);      $row['class'] = !empty($row['class']) ? $row['class'] .' draggable' : 'draggable';      $rows[] = $row;    }  }  $output = '';  if ($rows) {    $output .= theme('table', $header, $rows, array('id' => 'menu-overview'));  }  $output .= drupal_render($form);  return $output;}/** * Menu callback; Build the menu link editing form. */function menu_edit_item(&$form_state, $type, $item, $menu) {  $form['menu'] = array(    '#type' => 'fieldset',    '#title' => t('Menu settings'),    '#collapsible' => FALSE,    '#tree' => TRUE,    '#weight' => -2,    '#attributes' => array('class' => 'menu-item-form'),    '#item' => $item,  );  if ($type == 'add' || empty($item)) {    // This is an add form, initialize the menu link.    $item = array('link_title' => '', 'mlid' => 0, 'plid' => 0, 'menu_name' => $menu['menu_name'], 'weight' => 0, 'link_path' => '', 'options' => array(), 'module' => 'menu', 'expanded' => 0, 'hidden' => 0, 'has_children' => 0);  }  foreach (array('link_path', 'mlid', 'module', 'has_children', 'options') as $key) {    $form['menu'][$key] = array('#type' => 'value', '#value' => $item[$key]);  }  // Any item created or edited via this interface is considered "customized".  $form['menu']['customized'] = array('#type' => 'value', '#value' => 1);  $form['menu']['original_item'] = array('#type' => 'value', '#value' => $item);  $path = $item['link_path'];  if (isset($item['options']['query'])) {    $path .= '?'. $item['options']['query'];  }  if (isset($item['options']['fragment'])) {    $path .= '#'. $item['options']['fragment'];  }  if ($item['module'] == 'menu') {    $form['menu']['link_path'] = array(      '#type' => 'textfield',      '#title' => t('Path'),      '#default_value' => $path,      '#description' => t('The path this menu item links to. This can be an internal Drupal path such as %add-node or an external URL such as %drupal. Enter %front to link to the front page.', array('%front' => '<front>', '%add-node' => 'node/add', '%drupal' => 'http://drupal.org')),      '#required' => TRUE,    );    $form['delete'] = array(      '#type' => 'submit',      '#value' => t('Delete'),      '#access' => $item['mlid'],      '#submit' => array('menu_item_delete_submit'),      '#weight' => 10,    );  }  else {    $form['menu']['_path'] = array(      '#type' => 'item',      '#title' => t('Path'),      '#description' => l($item['link_title'], $item['href'], $item['options']),    );  }  $form['menu']['link_title'] = array('#type' => 'textfield',    '#title' => t('Menu link title'),    '#default_value' => $item['link_title'],    '#description' => t('The link text corresponding to this item that should appear in the menu.'),    '#required' => TRUE,  );  $form['menu']['description'] = array(    '#type' => 'textarea',    '#title' => t('Description'),    '#default_value' => isset($item['options']['attributes']['title']) ? $item['options']['attributes']['title'] : '',    '#rows' => 1,    '#description' => t('The description displayed when hovering over a menu item.'),  );  $form['menu']['enabled'] = array(    '#type' => 'checkbox',    '#title' => t('Enabled'),    '#default_value' => !$item['hidden'],    '#description' => t('Menu items that are not enabled will not be listed in any menu.'),  );  $form['menu']['expanded'] = array(    '#type' => 'checkbox',    '#title' => t('Expanded'),    '#default_value' => $item['expanded'],    '#description' => t('If selected and this menu item has children, the menu will always appear expanded.'),  );  // Generate a list of possible parents (not including this item or descendants).  $options = menu_parent_options(menu_get_menus(), $item);  $default = $item['menu_name'] .':'. $item['plid'];  if (!isset($options[$default])) {    $default = 'navigation:0';  }  $form['menu']['parent'] = array(    '#type' => 'select',    '#title' => t('Parent item'),    '#default_value' => $default,    '#options' => $options,    '#description' => t('The maximum depth for an item and all its children is fixed at !maxdepth. Some menu items may not be available as parents if selecting them would exceed this limit.', array('!maxdepth' => MENU_MAX_DEPTH)),    '#attributes' => array('class' => 'menu-title-select'),  );  $form['menu']['weight'] = array(    '#type' => 'weight',    '#title' => t('Weight'),    '#delta' => 50,    '#default_value' => $item['weight'],    '#description' => t('Optional. In the menu, the heavier items will sink and the lighter items will be positioned nearer the top.'),  );  $form['submit'] = array('#type' => 'submit', '#value' => t('Save'));  return $form;}/** * Validate form values for a menu link being added or edited. */function menu_edit_item_validate($form, &$form_state) {  $item = &$form_state['values']['menu'];  $normal_path = drupal_get_normal_path($item['link_path']);  if ($item['link_path'] != $normal_path) {    drupal_set_message(t('The menu system stores system paths only, but will use the URL alias for display. %link_path has been stored as %normal_path', array('%link_path' => $item['link_path'], '%normal_path' => $normal_path)));    $item['link_path'] = $normal_path;  }  if (!menu_path_is_external($item['link_path'])) {    $parsed_link = parse_url($item['link_path']);    if (isset($parsed_link['query'])) {      $item['options']['query'] = $parsed_link['query'];    }    if (isset($parsed_link['fragment'])) {      $item['options']['fragment'] = $parsed_link['fragment'];    }    if ($item['link_path'] != $parsed_link['path']) {      $item['link_path'] = $parsed_link['path'];    }  }  if (!trim($item['link_path']) || !menu_valid_path($item)) {    form_set_error('link_path', t("The path '@link_path' is either invalid or you do not have access to it.", array('@link_path' => $item['link_path'])));  }}/** * Submit function for the delete button on the menu item editing form. */function menu_item_delete_submit($form, &$form_state) {  $form_state['redirect'] = 'admin/build/menu/item/'. $form_state['values']['menu']['mlid'] .'/delete';}/** * Process menu and menu item add/edit form submissions. */function menu_edit_item_submit($form, &$form_state) {  $item = &$form_state['values']['menu'];  // The value of "hidden" is the opposite of the value  // supplied by the "enabled" checkbox.  $item['hidden'] = (int) !$item['enabled'];  unset($item['enabled']);  $item['options']['attributes']['title'] = $item['description'];  list($item['menu_name'], $item['plid']) = explode(':', $item['parent']);  if (!menu_link_save($item)) {    drupal_set_message(t('There was an error saving the menu link.'), 'error');  }  $form_state['redirect'] = 'admin/build/menu-customize/'. $item['menu_name'];}/** * Menu callback; Build the form that handles the adding/editing of a custom menu. */function menu_edit_menu(&$form_state, $type, $menu = array()) {  if ($type == 'edit') {    $form['menu_name'] = array('#type' => 'value', '#value' => $menu['menu_name']);    $form['#insert'] = FALSE;    $form['delete'] = array(      '#type' => 'submit',      '#value' => t('Delete'),      '#access' => !in_array($menu['menu_name'], menu_list_system_menus()),      '#submit' => array('menu_custom_delete_submit'),      '#weight' => 10,    );  }  else {    $menu = array('menu_name' => '', 'title' => '', 'description' => '');    $form['menu_name'] = array(      '#type' => 'textfield',      '#title' => t('Menu name'),      '#maxsize' => MENU_MAX_MENU_NAME_LENGTH_UI,      '#description' => t('The machine-readable name of this menu. This text will be used for constructing the URL of the <em>menu overview</em> page for this menu. This name must contain only lowercase letters, numbers, and hyphens, and must be unique.'),      '#required' => TRUE,    );    $form['#insert'] = TRUE;  }  $form['#title'] = $menu['title'];  $form['title'] = array(    '#type' => 'textfield',    '#title' => t('Title'),    '#default_value' => $menu['title'],    '#required' => TRUE,  );  $form['description'] = array(    '#type' => 'textarea',    '#title' => t('Description'),    '#default_value' => $menu['description'],  );  $form['submit'] = array(    '#type' => 'submit',    '#value' => t('Save'),  );  return $form;}/** * Submit function for the 'Delete' button on the menu editing form. */function menu_custom_delete_submit($form, &$form_state) {  $form_state['redirect'] = 'admin/build/menu-customize/'. $form_state['values']['menu_name'] .'/delete';}/** * Menu callback; check access and get a confirm form for deletion of a custom menu. */function menu_delete_menu_page($menu) {  // System-defined menus may not be deleted.  if (in_array($menu['menu_name'], menu_list_system_menus())) {    drupal_access_denied();    return;  }  return drupal_get_form('menu_delete_menu_confirm', $menu);}/** * Build a confirm form for deletion of a custom menu. */function menu_delete_menu_confirm(&$form_state, $menu) {  $form['#menu'] = $menu;  $caption = '';  $num_links = db_result(db_query("SELECT COUNT(*) FROM {menu_links} WHERE menu_name = '%s'", $menu['menu_name']));  if ($num_links) {    $caption .= '<p>'. format_plural($num_links, '<strong>Warning:</strong> There is currently 1 menu item in %title. It will be deleted (system-defined items will be reset).', '<strong>Warning:</strong> There are currently @count menu items in %title. They will be deleted (system-defined items will be reset).', array('%title' => $menu['title'])) .'</p>';  }  $caption .= '<p>'. t('This action cannot be undone.') .'</p>';  return confirm_form($form, t('Are you sure you want to delete the custom menu %title?', array('%title' => $menu['title'])), 'admin/build/menu-customize/'. $menu['menu_name'], $caption, t('Delete'));}/** * Delete a custom menu and all items in it. */function menu_delete_menu_confirm_submit($form, &$form_state) {  $menu = $form['#menu'];  $form_state['redirect'] = 'admin/build/menu';  // System-defined menus may not be deleted - only menus defined by this module.  if (in_array($menu['menu_name'], menu_list_system_menus())  || !db_result(db_query("SELECT COUNT(*) FROM {menu_custom} WHERE menu_name = '%s'", $menu['menu_name']))) {    return;  }  // Reset all the menu links defined by the system via hook_menu.  $result = db_query("SELECT * FROM {menu_links} ml INNER JOIN {menu_router} m ON ml.router_path = m.path WHERE ml.menu_name = '%s' AND ml.module = 'system' ORDER BY m.number_parts ASC", $menu['menu_name']);  while ($item = db_fetch_array($result)) {    menu_reset_item($item);  }  // Delete all links to the overview page for this menu.  $result = db_query("SELECT mlid FROM {menu_links} ml WHERE ml.link_path = '%s'", 'admin/build/menu-customize/'. $menu['menu_name']);  while ($m = db_fetch_array($result)) {    menu_link_delete($m['mlid']);  }  // Delete all the links in the menu and the menu from the list of custom menus.  db_query("DELETE FROM {menu_links} WHERE menu_name = '%s'", $menu['menu_name']);  db_query("DELETE FROM {menu_custom} WHERE menu_name = '%s'", $menu['menu_name']);  // Delete all the blocks for this menu.  db_query("DELETE FROM {blocks} WHERE module = 'menu' AND delta = '%s'", $menu['menu_name']);  db_query("DELETE FROM {blocks_roles} WHERE module = 'menu' AND delta = '%s'", $menu['menu_name']);  menu_cache_clear_all();  cache_clear_all();  $t_args = array('%title' => $menu['title']);  drupal_set_message(t('The custom menu %title has been deleted.', $t_args));  watchdog('menu', 'Deleted custom menu %title and all its menu items.', $t_args, WATCHDOG_NOTICE);}/** * Validates the human and machine-readable names when adding or editing a menu. */function menu_edit_menu_validate($form, &$form_state) {  $item = $form_state['values'];  if (preg_match('/[^a-z0-9-]/', $item['menu_name'])) {    form_set_error('menu_name', t('The menu name may only consist of lowercase letters, numbers, and hyphens.'));  }  if (strlen($item['menu_name']) > MENU_MAX_MENU_NAME_LENGTH_UI) {    form_set_error('menu_name', format_plural(MENU_MAX_MENU_NAME_LENGTH_UI, "The menu name can't be longer than 1 character.", "The menu name can't be longer than @count characters."));  }  if ($form['#insert']) {    // We will add 'menu-' to the menu name to help avoid name-space conflicts.    $item['menu_name'] = 'menu-'. $item['menu_name'];    if (db_result(db_query("SELECT menu_name FROM {menu_custom} WHERE menu_name = '%s'", $item['menu_name'])) ||      db_result(db_query_range("SELECT menu_name FROM {menu_links} WHERE menu_name = '%s'", $item['menu_name'], 0, 1))) {      form_set_error('menu_name', t('The menu already exists.'));    }  }}/** * Submit function for adding or editing a custom menu. */function menu_edit_menu_submit($form, &$form_state) {  $menu = $form_state['values'];  $path = 'admin/build/menu-customize/';  if ($form['#insert']) {    // Add 'menu-' to the menu name to help avoid name-space conflicts.    $menu['menu_name'] = 'menu-'. $menu['menu_name'];    $link['link_title'] = $menu['title'];    $link['link_path'] = $path . $menu['menu_name'];    $link['router_path'] = $path .'%';    $link['module'] = 'menu';    $link['plid'] = db_result(db_query("SELECT mlid FROM {menu_links} WHERE link_path = '%s' AND module = '%s'", 'admin/build/menu', 'system'));    menu_link_save($link);    db_query("INSERT INTO {menu_custom} (menu_name, title, description) VALUES ('%s', '%s', '%s')", $menu['menu_name'], $menu['title'], $menu['description']);  }  else {    db_query("UPDATE {menu_custom} SET title = '%s', description = '%s' WHERE menu_name = '%s'", $menu['title'], $menu['description'], $menu['menu_name']);    $result = db_query("SELECT mlid FROM {menu_links} WHERE link_path = '%s'", $path . $menu['menu_name']);    while ($m = db_fetch_array($result)) {      $link = menu_link_load($m['mlid']);      $link['link_title'] = $menu['title'];      menu_link_save($link);    }  }  $form_state['redirect'] = $path . $menu['menu_name'];}/** * Menu callback; Check access and present a confirm form for deleting a menu link. */function menu_item_delete_page($item) {  // Links defined via hook_menu may not be deleted. Updated items are an  // exception, as they can be broken.  if ($item['module'] == 'system' && !$item['updated']) {    drupal_access_denied();    return;  }  return drupal_get_form('menu_item_delete_form', $item);}/** * Build a confirm form for deletion of a single menu link. */function menu_item_delete_form(&$form_state, $item) {  $form['#item'] = $item;  return confirm_form($form, t('Are you sure you want to delete the custom menu item %item?', array('%item' => $item['link_title'])), 'admin/build/menu-customize/'. $item['menu_name']);}/** * Process menu delete form submissions. */function menu_item_delete_form_submit($form, &$form_state) {  $item = $form['#item'];  menu_link_delete($item['mlid']);  $t_args = array('%title' => $item['link_title']);  drupal_set_message(t('The menu item %title has been deleted.', $t_args));  watchdog('menu', 'Deleted menu item %title.', $t_args, WATCHDOG_NOTICE);  $form_state['redirect'] = 'admin/build/menu-customize/'. $item['menu_name'];}/** * Menu callback; reset a single modified item. */function menu_reset_item_confirm(&$form_state, $item) {  $form['item'] = array('#type' => 'value', '#value' => $item);  return confirm_form($form, t('Are you sure you want to reset the item %item to its default values?', array('%item' => $item['link_title'])), 'admin/build/menu-customize/'. $item['menu_name'], t('Any customizations will be lost. This action cannot be undone.'), t('Reset'));}/** * Process menu reset item form submissions. */function menu_reset_item_confirm_submit($form, &$form_state) {  $item = $form_state['values']['item'];  $new_item = menu_reset_item($item);  drupal_set_message(t('The menu item was reset to its default settings.'));  $form_state['redirect'] = 'admin/build/menu-customize/'. $new_item['menu_name'];}/** * Menu callback; Build the form presenting menu configuration options. */function menu_configure() {  $form['intro'] = array(    '#type' => 'item',    '#value' => t('The menu module allows on-the-fly creation of menu links in the content authoring forms. The following option sets the default menu in which a new link will be added.'),  );  $menu_options = menu_get_menus();  $form['menu_default_node_menu'] = array(    '#type' => 'select',    '#title' => t('Default menu for content'),    '#default_value' => variable_get('menu_default_node_menu', 'primary-links'),    '#options' => $menu_options,    '#description' => t('Choose the menu to be the default in the menu options in the content authoring form.'),  );  $primary = variable_get('menu_primary_links_source', 'primary-links');  $primary_options = array_merge($menu_options, array('' => t('No primary links')));  $form['menu_primary_links_source'] = array(    '#type' => 'select',    '#title' => t('Source for the primary links'),    '#default_value' => $primary,    '#options' => $primary_options,    '#tree' => FALSE,    '#description' => t('Select what should be displayed as the primary links.'),  );  $secondary_options = array_merge($menu_options, array('' => t('No secondary links')));  $form["menu_secondary_links_source"] = array(    '#type' => 'select',    '#title' => t('Source for the secondary links'),    '#default_value' => variable_get('menu_secondary_links_source', 'secondary-links'),    '#options' => $secondary_options,    '#tree' => FALSE,    '#description' => t('Select what should be displayed as the secondary links. You can choose the same menu for secondary links as for primary links (currently %primary). If you do this, the children of the active primary menu link will be displayed as secondary links.', array('%primary' => $primary_options[$primary])),  );  return system_settings_form($form);}
<?php// $Id$/** * @file * The theme system, which controls the output of Drupal. * * The theme system allows for nearly all output of the Drupal system to be * customized by user themes. * * @ingroup themeable *//** * @name Content markers * @{ * Markers used by theme_mark() and node_mark() to designate content. * @see theme_mark(), node_mark() */define('MARK_READ',    0);define('MARK_NEW',     1);define('MARK_UPDATED', 2);/** * @} End of "Content markers". *//** * Initialize the theme system by loading the theme. */function init_theme() {  global $theme, $user, $custom_theme, $theme_key;  // If $theme is already set, assume the others are set, too, and do nothing  if (isset($theme)) {    return;  }  drupal_bootstrap(DRUPAL_BOOTSTRAP_DATABASE);  $themes = list_themes();  // Only select the user selected theme if it is available in the  // list of enabled themes.  $theme = !empty($user->theme) && !empty($themes[$user->theme]->status) ? $user->theme : variable_get('theme_default', 'garland');  // Allow modules to override the present theme... only select custom theme  // if it is available in the list of installed themes.  $theme = $custom_theme && $themes[$custom_theme] ? $custom_theme : $theme;  // Store the identifier for retrieving theme settings with.  $theme_key = $theme;  // Find all our ancestor themes and put them in an array.  $base_theme = array();  $ancestor = $theme;  while ($ancestor && isset($themes[$ancestor]->base_theme)) {    $base_theme[] = $new_base_theme = $themes[$themes[$ancestor]->base_theme];    $ancestor = $themes[$ancestor]->base_theme;  }  _init_theme($themes[$theme], array_reverse($base_theme));}/** * Initialize the theme system given already loaded information. This * function is useful to initialize a theme when no database is present. * * @param $theme *   An object with the following information: *     filename *       The .info file for this theme. The 'path' to *       the theme will be in this file's directory. (Required) *     owner *       The path to the .theme file or the .engine file to load for *       the theme. (Required) *     stylesheet *       The primary stylesheet for the theme. (Optional) *     engine *       The name of theme engine to use. (Optional) * @param $base_theme *    An optional array of objects that represent the 'base theme' if the *    theme is meant to be derivative of another theme. It requires *    the same information as the $theme object. It should be in *    'oldest first' order, meaning the top level of the chain will *    be first. * @param $registry_callback *   The callback to invoke to set the theme registry. */function _init_theme($theme, $base_theme = array(), $registry_callback = '_theme_load_registry') {  global $theme_info, $base_theme_info, $theme_engine, $theme_path;  $theme_info = $theme;  $base_theme_info = $base_theme;  $theme_path = dirname($theme->filename);  // Prepare stylesheets from this theme as well as all ancestor themes.  // We work it this way so that we can have child themes override parent  // theme stylesheets easily.  $final_stylesheets = array();  // Grab stylesheets from base theme  foreach ($base_theme as $base) {    if (!empty($base->stylesheets)) {      foreach ($base->stylesheets as $media => $stylesheets) {        foreach ($stylesheets as $name => $stylesheet) {          $final_stylesheets[$media][$name] = $stylesheet;        }      }    }  }  // Add stylesheets used by this theme.  if (!empty($theme->stylesheets)) {    foreach ($theme->stylesheets as $media => $stylesheets) {      foreach ($stylesheets as $name => $stylesheet) {        $final_stylesheets[$media][$name] = $stylesheet;      }    }  }  // And now add the stylesheets properly  foreach ($final_stylesheets as $media => $stylesheets) {    foreach ($stylesheets as $stylesheet) {      drupal_add_css($stylesheet, 'theme', $media);    }  }  // Do basically the same as the above for scripts  $final_scripts = array();  // Grab scripts from base theme  foreach ($base_theme as $base) {    if (!empty($base->scripts)) {      foreach ($base->scripts as $name => $script) {        $final_scripts[$name] = $script;      }    }  }  // Add scripts used by this theme.  if (!empty($theme->scripts)) {    foreach ($theme->scripts as $name => $script) {      $final_scripts[$name] = $script;    }  }  // Add scripts used by this theme.  foreach ($final_scripts as $script) {    drupal_add_js($script, 'theme');  }  $theme_engine = NULL;  // Initialize the theme.  if (isset($theme->engine)) {    // Include the engine.    include_once './'. $theme->owner;    $theme_engine = $theme->engine;    if (function_exists($theme_engine .'_init')) {      foreach ($base_theme as $base) {        call_user_func($theme_engine .'_init', $base);      }      call_user_func($theme_engine .'_init', $theme);    }  }  else {    // include non-engine theme files    foreach ($base_theme as $base) {      // Include the theme file or the engine.      if (!empty($base->owner)) {        include_once './'. $base->owner;      }    }    // and our theme gets one too.    if (!empty($theme->owner)) {      include_once './'. $theme->owner;    }  }  $registry_callback($theme, $base_theme, $theme_engine);}/** * Retrieve the stored theme registry. If the theme registry is already * in memory it will be returned; otherwise it will attempt to load the * registry from cache. If this fails, it will construct the registry and * cache it. */function theme_get_registry($registry = NULL) {  static $theme_registry = NULL;  if (isset($registry)) {    $theme_registry = $registry;  }  return $theme_registry;}/** * Store the theme registry in memory. */function _theme_set_registry($registry) {  // Pass through for setting of static variable.  return theme_get_registry($registry);}/** * Get the theme_registry cache from the database; if it doesn't exist, build * it. * * @param $theme *   The loaded $theme object. * @param $base_theme *   An array of loaded $theme objects representing the ancestor themes in *   oldest first order. * @param theme_engine *   The name of the theme engine. */function _theme_load_registry($theme, $base_theme = NULL, $theme_engine = NULL) {  // Check the theme registry cache; if it exists, use it.  $cache = cache_get("theme_registry:$theme->name", 'cache');  if (isset($cache->data)) {    $registry = $cache->data;  }  else {    // If not, build one and cache it.    $registry = _theme_build_registry($theme, $base_theme, $theme_engine);    _theme_save_registry($theme, $registry);  }  _theme_set_registry($registry);}/** * Write the theme_registry cache into the database. */function _theme_save_registry($theme, $registry) {  cache_set("theme_registry:$theme->name", $registry);}/** * Force the system to rebuild the theme registry; this should be called * when modules are added to the system, or when a dynamic system needs * to add more theme hooks. */function drupal_rebuild_theme_registry() {  cache_clear_all('theme_registry', 'cache', TRUE);}/** * Process a single invocation of the theme hook. $type will be one * of 'module', 'theme_engine', 'base_theme_engine', 'theme', or 'base_theme' * and it tells us some important information. * * Because $cache is a reference, the cache will be continually * expanded upon; new entries will replace old entries in the * array_merge, but we are careful to ensure some data is carried * forward, such as the arguments a theme hook needs. * * An override flag can be set for preprocess functions. When detected the * cached preprocessors for the hook will not be merged with the newly set. * This can be useful to themes and theme engines by giving them more control * over how and when the preprocess functions are run. */function _theme_process_registry(&$cache, $name, $type, $theme, $path) {  $result = array();  $function = $name .'_theme';  if (function_exists($function)) {    $result = $function($cache, $type, $theme, $path);    foreach ($result as $hook => $info) {      $result[$hook]['type'] = $type;      $result[$hook]['theme path'] = $path;      // if function and file are left out, default to standard naming      // conventions.      if (!isset($info['template']) && !isset($info['function'])) {        $result[$hook]['function'] = ($type == 'module' ? 'theme_' : $name .'_') . $hook;      }      // Make sure include files is set so we don't generate notices later.      if (!isset($info['include files'])) {        $result[$hook]['include files'] = array();      }      // If a path is set in the info, use what was set. Otherwise use the      // default path. This is mostly so system.module can declare theme      // functions on behalf of core .include files.      // All files are included to be safe. Conditionally included      // files can prevent them from getting registered.      if (isset($info['file']) && !isset($info['path'])) {        // First, check to see if the fully qualified file exists.        $filename = './'. $path .'/'. $info['file'];        if (file_exists($filename)) {          require_once $filename;          $result[$hook]['include files'][] = $filename;        }        else {          $filename = './'. $info['file'];          if (file_exists($filename)) {            require_once $filename;            $result[$hook]['include files'][] = $filename;          }        }      }      elseif (isset($info['file']) && isset($info['path'])) {        $filename = './'. $info['path'] .'/'. $info['file'];        if (file_exists($filename)) {          require_once $filename;          $result[$hook]['include files'][] = $filename;        }      }      if (isset($info['template']) && !isset($info['path'])) {        $result[$hook]['template'] = $path .'/'. $info['template'];      }      // If 'arguments' have been defined previously, carry them forward.      // This should happen if a theme overrides a Drupal defined theme      // function, for example.      if (!isset($info['arguments']) && isset($cache[$hook])) {        $result[$hook]['arguments'] = $cache[$hook]['arguments'];      }      // Likewise with theme paths. These are used for template naming suggestions.      // Theme implementations can occur in multiple paths. Suggestions should follow.      if (!isset($info['theme paths']) && isset($cache[$hook])) {        $result[$hook]['theme paths'] = $cache[$hook]['theme paths'];      }      // Check for sub-directories.      $result[$hook]['theme paths'][] = isset($info['path']) ? $info['path'] : $path;      // Check for default _preprocess_ functions. Ensure arrayness.      if (!isset($info['preprocess functions']) || !is_array($info['preprocess functions'])) {        $info['preprocess functions'] = array();        $prefixes = array();        if ($type == 'module') {          // Default preprocessor prefix.          $prefixes[] = 'template';          // Add all modules so they can intervene with their own preprocessors. This allows them          // to provide preprocess functions even if they are not the owner of the current hook.          $prefixes += module_list();        }        elseif ($type == 'theme_engine' || $type == 'base_theme_engine') {          // Theme engines get an extra set that come before the normally named preprocessors.          $prefixes[] = $name .'_engine';          // The theme engine also registers on behalf of the theme. The theme or engine name can be used.          $prefixes[] = $name;          $prefixes[] = $theme;        }        else {          // This applies when the theme manually registers their own preprocessors.          $prefixes[] = $name;        }        foreach ($prefixes as $prefix) {          if (function_exists($prefix .'_preprocess')) {            $info['preprocess functions'][] = $prefix .'_preprocess';          }          if (function_exists($prefix .'_preprocess_'. $hook)) {            $info['preprocess functions'][] = $prefix .'_preprocess_'. $hook;          }          if (!empty($info['original hook']) && function_exists($prefix .'_preprocess_'. $info['original hook'])) {            $info['preprocess functions'][] = $prefix .'_preprocess_'. $info['original hook'];          }        }      }      // Check for the override flag and prevent the cached preprocess functions from being used.      // This allows themes or theme engines to remove preprocessors set earlier in the registry build.      if (!empty($info['override preprocess functions'])) {        // Flag not needed inside the registry.        unset($result[$hook]['override preprocess functions']);      }      elseif (isset($cache[$hook]['preprocess functions']) && is_array($cache[$hook]['preprocess functions'])) {        $info['preprocess functions'] = array_merge($cache[$hook]['preprocess functions'], $info['preprocess functions']);      }      elseif (isset($info['original hook']) && isset($cache[$info['original hook']]['preprocess functions']) && is_array($cache[$info['original hook']]['preprocess functions'])) {        $info['preprocess functions'] = array_merge($cache[$info['original hook']]['preprocess functions'], $info['preprocess functions']);      }      $result[$hook]['preprocess functions'] = $info['preprocess functions'];    }    // Merge the newly created theme hooks into the existing cache.    $cache = array_merge($cache, $result);  }  // Let themes have preprocess functions even if they didn't register a template.  if ($type == 'theme' || $type == 'base_theme') {    foreach ($cache as $hook => $info) {      // Check only if it's a template and not registered by the theme or engine.      if (!empty($info['template']) && empty($result[$hook])) {        if (!isset($info['preprocess functions'])) {          $cache[$hook]['preprocess functions'] = array();        }        if (function_exists($name .'_preprocess')) {          $cache[$hook]['preprocess functions'][] = $name .'_preprocess';        }        if (function_exists($name .'_preprocess_'. $hook)) {          $cache[$hook]['preprocess functions'][] = $name .'_preprocess_'. $hook;        }        // Ensure uniqueness.        $cache[$hook]['preprocess functions'] = array_unique($cache[$hook]['preprocess functions']);      }    }  }}/** * Rebuild the hook theme_registry cache. * * @param $theme *   The loaded $theme object. * @param $base_theme *   An array of loaded $theme objects representing the ancestor themes in *   oldest first order. * @param theme_engine *   The name of the theme engine. */function _theme_build_registry($theme, $base_theme, $theme_engine) {  $cache = array();  // First, process the theme hooks advertised by modules. This will  // serve as the basic registry.  foreach (module_implements('theme') as $module) {    _theme_process_registry($cache, $module, 'module', $module, drupal_get_path('module', $module));  }  // Process each base theme.  foreach ($base_theme as $base) {    // If the base theme uses a theme engine, process its hooks.    $base_path = dirname($base->filename);    if ($theme_engine) {      _theme_process_registry($cache, $theme_engine, 'base_theme_engine', $base->name, $base_path);    }    _theme_process_registry($cache, $base->name, 'base_theme', $base->name, $base_path);  }  // And then the same thing, but for the theme.  if ($theme_engine) {    _theme_process_registry($cache, $theme_engine, 'theme_engine', $theme->name, dirname($theme->filename));  }  // Finally, hooks provided by the theme itself.  _theme_process_registry($cache, $theme->name, 'theme', $theme->name, dirname($theme->filename));  // Let modules alter the registry  drupal_alter('theme_registry', $cache);  return $cache;}/** * Provides a list of currently available themes. * * If the database is active then it will be retrieved from the database. * Otherwise it will retrieve a new list. * * @param $refresh *   Whether to reload the list of themes from the database. * @return *   An array of the currently available themes. */function list_themes($refresh = FALSE) {  static $list = array();  if ($refresh) {    $list = array();  }  if (empty($list)) {    $list = array();    $themes = array();    // Extract from the database only when it is available.    // Also check that the site is not in the middle of an install or update.    if (db_is_active() && !defined('MAINTENANCE_MODE')) {      $result = db_query("SELECT * FROM {system} WHERE type = '%s'", 'theme');      while ($theme = db_fetch_object($result)) {        if (file_exists($theme->filename)) {          $theme->info = unserialize($theme->info);          $themes[] = $theme;        }      }    }    else {      // Scan the installation when the database should not be read.      $themes = _system_theme_data();    }    foreach ($themes as $theme) {      foreach ($theme->info['stylesheets'] as $media => $stylesheets) {        foreach ($stylesheets as $stylesheet => $path) {          $theme->stylesheets[$media][$stylesheet] = $path;        }      }      foreach ($theme->info['scripts'] as $script => $path) {        if (file_exists($path)) {          $theme->scripts[$script] = $path;        }      }      if (isset($theme->info['engine'])) {        $theme->engine = $theme->info['engine'];      }      if (isset($theme->info['base theme'])) {        $theme->base_theme = $theme->info['base theme'];      }      // Status is normally retrieved from the database. Add zero values when      // read from the installation directory to prevent notices.      if (!isset($theme->status)) {        $theme->status = 0;      }      $list[$theme->name] = $theme;    }  }  return $list;}/** * Generate the themed output. * * All requests for theme hooks must go through this function. It examines * the request and routes it to the appropriate theme function. The theme * registry is checked to determine which implementation to use, which may * be a function or a template. * * If the implementation is a function, it is executed and its return value * passed along. * * If the implementation is a template, the arguments are converted to a * $variables array. This array is then modified by the module implementing * the hook, theme engine (if applicable) and the theme. The following * functions may be used to modify the $variables array. They are processed in * this order when available: * * - template_preprocess(&$variables) *   This sets a default set of variables for all template implementations. * * - template_preprocess_HOOK(&$variables) *   This is the first preprocessor called specific to the hook; it should be *   implemented by the module that registers it. * * - MODULE_preprocess(&$variables) *   This will be called for all templates; it should only be used if there *   is a real need. It's purpose is similar to template_preprocess(). * * - MODULE_preprocess_HOOK(&$variables) *   This is for modules that want to alter or provide extra variables for *   theming hooks not registered to itself. For example, if a module named *   "foo" wanted to alter the $submitted variable for the hook "node" a *   preprocess function of foo_preprocess_node() can be created to intercept *   and alter the variable. * * - ENGINE_engine_preprocess(&$variables) *   This function should only be implemented by theme engines and exists *   so that it can set necessary variables for all hooks. * * - ENGINE_engine_preprocess_HOOK(&$variables) *   This is the same as the previous function, but it is called for a single *   theming hook. * * - ENGINE_preprocess(&$variables) *   This is meant to be used by themes that utilize a theme engine. It is *   provided so that the preprocessor is not locked into a specific theme. *   This makes it easy to share and transport code but theme authors must be *   careful to prevent fatal re-declaration errors when using sub-themes that *   have their own preprocessor named exactly the same as its base theme. In *   the default theme engine (PHPTemplate), sub-themes will load their own *   template.php file in addition to the one used for its parent theme. This *   increases the risk for these errors. A good practice is to use the engine *   name for the base theme and the theme name for the sub-themes to minimize *   this possibility. * * - ENGINE_preprocess_HOOK(&$variables) *   The same applies from the previous function, but it is called for a *   specific hook. * * - THEME_preprocess(&$variables) *   These functions are based upon the raw theme; they should primarily be *   used by themes that do not use an engine or by sub-themes. It serves the *   same purpose as ENGINE_preprocess(). * * - THEME_preprocess_HOOK(&$variables) *   The same applies from the previous function, but it is called for a *   specific hook. * * There are two special variables that these hooks can set: *   'template_file' and 'template_files'. These will be merged together *   to form a list of 'suggested' alternate template files to use, in *   reverse order of priority. template_file will always be a higher *   priority than items in template_files. theme() will then look for these *   files, one at a time, and use the first one *   that exists. * @param $hook *   The name of the theme function to call. May be an array, in which *   case the first hook that actually has an implementation registered *   will be used. This can be used to choose 'fallback' theme implementations, *   so that if the specific theme hook isn't implemented anywhere, a more *   generic one will be used. This can allow themes to create specific theme *   implementations for named objects. * @param ... *   Additional arguments to pass along to the theme function. * @return *   An HTML string that generates the themed output. */function theme() {  $args = func_get_args();  $hook = array_shift($args);  static $hooks = NULL;  if (!isset($hooks)) {    init_theme();    $hooks = theme_get_registry();  }  if (is_array($hook)) {    foreach ($hook as $candidate) {      if (isset($hooks[$candidate])) {        break;      }    }    $hook = $candidate;  }  if (!isset($hooks[$hook])) {    return;  }  $info = $hooks[$hook];  global $theme_path;  $temp = $theme_path;  // point path_to_theme() to the currently used theme path:  $theme_path = $hooks[$hook]['theme path'];  // Include a file if the theme function or preprocess function is held elsewhere.  if (!empty($info['include files'])) {    foreach ($info['include files'] as $include_file) {      include_once($include_file);    }  }  // Handle compatibility with theme_registry_alters to prevent failures.  if (!empty($info['file'])) {    static $included_files = array();    $include_file = $info['file'];    if (!empty($info['path'])) {      $include_file = $info['path'] .'/'. $include_file;    }    if (empty($included_files[$include_file])) {      // Statically cache files we've already tried to include so we don't      // run unnecessary file_exists calls.      $included_files[$include_file] = TRUE;      if (file_exists('./'. $include_file)) {        include_once('./'. $include_file);      }    }  }  if (isset($info['function'])) {    // The theme call is a function.    $output = call_user_func_array($info['function'], $args);  }  else {    // The theme call is a template.    $variables = array(      'template_files' => array()    );    if (!empty($info['arguments'])) {      $count = 0;      foreach ($info['arguments'] as $name => $default) {        $variables[$name] = isset($args[$count]) ? $args[$count] : $default;        $count++;      }    }    // default render function and extension.    $render_function = 'theme_render_template';    $extension = '.tpl.php';    // Run through the theme engine variables, if necessary    global $theme_engine;    if (isset($theme_engine)) {      // If theme or theme engine is implementing this, it may have      // a different extension and a different renderer.      if ($hooks[$hook]['type'] != 'module') {        if (function_exists($theme_engine .'_render_template')) {          $render_function = $theme_engine .'_render_template';        }        $extension_function = $theme_engine .'_extension';        if (function_exists($extension_function)) {          $extension = $extension_function();        }      }    }    if (isset($info['preprocess functions']) && is_array($info['preprocess functions'])) {      // This construct ensures that we can keep a reference through      // call_user_func_array.      $args = array(&$variables, $hook);      foreach ($info['preprocess functions'] as $preprocess_function) {        if (function_exists($preprocess_function)) {          call_user_func_array($preprocess_function, $args);        }      }    }    // Get suggestions for alternate templates out of the variables    // that were set. This lets us dynamically choose a template    // from a list. The order is FILO, so this array is ordered from    // least appropriate first to most appropriate last.    $suggestions = array();    if (isset($variables['template_files'])) {      $suggestions = $variables['template_files'];    }    if (isset($variables['template_file'])) {      $suggestions[] = $variables['template_file'];    }    if ($suggestions) {      $template_file = drupal_discover_template($info['theme paths'], $suggestions, $extension);    }    if (empty($template_file)) {      $template_file = $hooks[$hook]['template'] . $extension;      if (isset($hooks[$hook]['path'])) {        $template_file = $hooks[$hook]['path'] .'/'. $template_file;      }    }    $output = $render_function($template_file, $variables);  }  // restore path_to_theme()  $theme_path = $temp;  // Add final markup to the full page.  if ($hook == 'page' || $hook == 'book_export_html') {    $output = drupal_final_markup($output);  }  return $output;}/** * Choose which template file to actually render. These are all suggested * templates from themes and modules. Theming implementations can occur on * multiple levels. All paths are checked to account for this. */function drupal_discover_template($paths, $suggestions, $extension = '.tpl.php') {  global $theme_engine;  // Remove slashes or null to prevent files from being included from  // an unexpected location (especially on Windows servers).  $extension = str_replace(array("/", "\\", "\0"), '', $extension);  // Loop through all paths and suggestions in FIFO order.  $suggestions = array_reverse($suggestions);  $paths = array_reverse($paths);  foreach ($suggestions as $suggestion) {    if (!empty($suggestion)) {      $suggestion = str_replace(array("/", "\\", "\0"), '', $suggestion);      foreach ($paths as $path) {        if (file_exists($file = $path .'/'. $suggestion . $extension)) {          return $file;        }      }    }  }}/** * Return the path to the current themed element. * * It can point to the active theme or the module handling a themed implementation. * For example, when invoked within the scope of a theming call it will depend * on where the theming function is handled. If implemented from a module, it * will point to the module. If implemented from the active theme, it will point * to the active theme. When called outside the scope of a theming call, it will * always point to the active theme. */function path_to_theme() {  global $theme_path;  if (!isset($theme_path)) {    init_theme();  }  return $theme_path;}/** * Find overridden theme functions. Called by themes and/or theme engines to * easily discover theme functions. * * @param $cache *   The existing cache of theme hooks to test against. * @param $prefixes *   An array of prefixes to test, in reverse order of importance. * * @return $templates *   The functions found, suitable for returning from hook_theme; */function drupal_find_theme_functions($cache, $prefixes) {  $templates = array();  $functions = get_defined_functions();  foreach ($cache as $hook => $info) {    foreach ($prefixes as $prefix) {      if (!empty($info['pattern'])) {        $matches = preg_grep('/^'. $prefix .'_'. $info['pattern'] .'/', $functions['user']);        if ($matches) {          foreach ($matches as $match) {            $new_hook = str_replace($prefix .'_', '', $match);            $templates[$new_hook] = array(              'function' => $match,              'arguments' => $info['arguments'],              'original hook' => $hook,              'include files' => $info['include files'],            );          }        }      }      if (function_exists($prefix .'_'. $hook)) {        $templates[$hook] = array(          'function' => $prefix .'_'. $hook,          'include files' => $info['include files'],        );        // Ensure that the pattern is maintained from base themes to its sub-themes.        // Each sub-theme will have their functions scanned so the pattern must be        // held for subsequent runs.        if (isset($info['pattern'])) {          $templates[$hook]['pattern'] = $info['pattern'];        }        // Also ensure that the 'file' property is maintained, because it probably        // contains the preprocess.      }    }  }  return $templates;}/** * Find overridden theme templates. Called by themes and/or theme engines to * easily discover templates. * * @param $cache *   The existing cache of theme hooks to test against. * @param $extension *   The extension that these templates will have. * @param $path *   The path to search. */function drupal_find_theme_templates($cache, $extension, $path) {  $templates = array();  // Collect paths to all sub-themes grouped by base themes. These will be  // used for filtering. This allows base themes to have sub-themes in its  // folder hierarchy without affecting the base themes template discovery.  $theme_paths = array();  foreach (list_themes() as $theme_info) {    if (!empty($theme_info->base_theme)) {      $theme_paths[$theme_info->base_theme][$theme_info->name] = dirname($theme_info->filename);    }  }  foreach ($theme_paths as $basetheme => $subthemes) {    foreach ($subthemes as $subtheme => $subtheme_path) {      if (isset($theme_paths[$subtheme])) {        $theme_paths[$basetheme] = array_merge($theme_paths[$basetheme], $theme_paths[$subtheme]);      }    }  }  global $theme;  $subtheme_paths = isset($theme_paths[$theme]) ? $theme_paths[$theme] : array();  // Escape the periods in the extension.  $regex = str_replace('.', '\.', $extension) .'$';  // Because drupal_system_listing works the way it does, we check for real  // templates separately from checking for patterns.  $files = drupal_system_listing($regex, $path, 'name', 0);  foreach ($files as $template => $file) {    // Ignore sub-theme templates for the current theme.    if (strpos($file->filename, str_replace($subtheme_paths, '', $file->filename)) !== 0) {      continue;    }    // Chop off the remaining extensions if there are any. $template already    // has the rightmost extension removed, but there might still be more,    // such as with .tpl.php, which still has .tpl in $template at this point.    if (($pos = strpos($template, '.')) !== FALSE) {      $template = substr($template, 0, $pos);    }    // Transform - in filenames to _ to match function naming scheme    // for the purposes of searching.    $hook = strtr($template, '-', '_');    if (isset($cache[$hook])) {      $templates[$hook] = array(        'template' => $template,        'path' => dirname($file->filename),        'include files' => $cache[$hook]['include files'],      );    }    // Ensure that the pattern is maintained from base themes to its sub-themes.    // Each sub-theme will have their templates scanned so the pattern must be    // held for subsequent runs.    if (isset($cache[$hook]['pattern'])) {      $templates[$hook]['pattern'] = $cache[$hook]['pattern'];    }  }  $patterns = array_keys($files);  foreach ($cache as $hook => $info) {    if (!empty($info['pattern'])) {      // Transform _ in pattern to - to match file naming scheme      // for the purposes of searching.      $pattern = strtr($info['pattern'], '_', '-');      $matches = preg_grep('/^'. $pattern .'/', $patterns);      if ($matches) {        foreach ($matches as $match) {          $file = substr($match, 0, strpos($match, '.'));          // Put the underscores back in for the hook name and register this pattern.          $templates[strtr($file, '-', '_')] = array(            'template' => $file,            'path' => dirname($files[$match]->filename),            'arguments' => $info['arguments'],            'original hook' => $hook,            'include files' => $info['include files'],          );        }      }    }  }  return $templates;}/** * Retrieve an associative array containing the settings for a theme. * * The final settings are arrived at by merging the default settings, * the site-wide settings, and the settings defined for the specific theme. * If no $key was specified, only the site-wide theme defaults are retrieved. * * The default values for each of settings are also defined in this function. * To add new settings, add their default values here, and then add form elements * to system_theme_settings() in system.module. * * @param $key *  The template/style value for a given theme. * * @return *   An associative array containing theme settings. */function theme_get_settings($key = NULL) {  $defaults = array(    'mission'                       =>  '',    'default_logo'                  =>  1,    'logo_path'                     =>  '',    'default_favicon'               =>  1,    'favicon_path'                  =>  '',    'primary_links'                 =>  1,    'secondary_links'               =>  1,    'toggle_logo'                   =>  1,    'toggle_favicon'                =>  1,    'toggle_name'                   =>  1,    'toggle_search'                 =>  1,    'toggle_slogan'                 =>  0,    'toggle_mission'                =>  1,    'toggle_node_user_picture'      =>  0,    'toggle_comment_user_picture'   =>  0,    'toggle_primary_links'          =>  1,    'toggle_secondary_links'        =>  1,  );  if (module_exists('node')) {    foreach (node_get_types() as $type => $name) {      $defaults['toggle_node_info_'. $type] = 1;    }  }  $settings = array_merge($defaults, variable_get('theme_settings', array()));  if ($key) {    $settings = array_merge($settings, variable_get(str_replace('/', '_', 'theme_'. $key .'_settings'), array()));  }  // Only offer search box if search.module is enabled.  if (!module_exists('search') || !user_access('search content')) {    $settings['toggle_search'] = 0;  }  return $settings;}/** * Retrieve a setting for the current theme. * This function is designed for use from within themes & engines * to determine theme settings made in the admin interface. * * Caches values for speed (use $refresh = TRUE to refresh cache) * * @param $setting_name *  The name of the setting to be retrieved. * * @param $refresh *  Whether to reload the cache of settings. * * @return *   The value of the requested setting, NULL if the setting does not exist. */function theme_get_setting($setting_name, $refresh = FALSE) {  global $theme_key;  static $settings;  if (empty($settings) || $refresh) {    $settings = theme_get_settings($theme_key);    $themes = list_themes();    $theme_object = $themes[$theme_key];    if ($settings['mission'] == '') {      $settings['mission'] = variable_get('site_mission', '');    }    if (!$settings['toggle_mission']) {      $settings['mission'] = '';    }    if ($settings['toggle_logo']) {      if ($settings['default_logo']) {        $settings['logo'] = base_path() . dirname($theme_object->filename) .'/logo.png';      }      elseif ($settings['logo_path']) {        $settings['logo'] = base_path() . $settings['logo_path'];      }    }    if ($settings['toggle_favicon']) {      if ($settings['default_favicon']) {        if (file_exists($favicon = dirname($theme_object->filename) .'/favicon.ico')) {          $settings['favicon'] = base_path() . $favicon;        }        else {          $settings['favicon'] = base_path() .'misc/favicon.ico';        }      }      elseif ($settings['favicon_path']) {        $settings['favicon'] = base_path() . $settings['favicon_path'];      }      else {        $settings['toggle_favicon'] = FALSE;      }    }  }  return isset($settings[$setting_name]) ? $settings[$setting_name] : NULL;}/** * Render a system default template, which is essentially a PHP template. * * @param $template_file *   The filename of the template to render. Note that this will overwrite *   anything stored in $variables['template_file'] if using a preprocess hook. * @param $variables *   A keyed array of variables that will appear in the output. * * @return *   The output generated by the template. */function theme_render_template($template_file, $variables) {  extract($variables, EXTR_SKIP);  // Extract the variables to a local namespace  ob_start();                      // Start output buffering  include "./$template_file";      // Include the template file  $contents = ob_get_contents();   // Get the contents of the buffer  ob_end_clean();                  // End buffering and discard  return $contents;                // Return the contents}/** * @defgroup themeable Default theme implementations * @{ * Functions and templates that present output to the user, and can be * implemented by themes. * * Drupal's presentation layer is a pluggable system known as the theme * layer. Each theme can take control over most of Drupal's output, and * has complete control over the CSS. * * Inside Drupal, the theme layer is utilized by the use of the theme() * function, which is passed the name of a component (the theme hook) * and several arguments. For example, theme('table', $header, $rows); * Additionally, the theme() function can take an array of theme * hooks, which can be used to provide 'fallback' implementations to * allow for more specific control of output. For example, the function: * theme(array('table__foo', 'table'), $header, $rows) would look to see if * 'table__foo' is registered anywhere; if it is not, it would 'fall back' * to the generic 'table' implementation. This can be used to attach specific * theme functions to named objects, allowing the themer more control over * specific types of output. * * As of Drupal 6, every theme hook is required to be registered by the * module that owns it, so that Drupal can tell what to do with it and * to make it simple for themes to identify and override the behavior * for these calls. * * The theme hooks are registered via hook_theme(), which returns an * array of arrays with information about the hook. It describes the * arguments the function or template will need, and provides * defaults for the template in case they are not filled in. If the default * implementation is a function, by convention it is named theme_HOOK(). * * Each module should provide a default implementation for theme_hooks that * it registers. This implementation may be either a function or a template; * if it is a function it must be specified via hook_theme(). By convention, * default implementations of theme hooks are named theme_HOOK. Default * template implementations are stored in the module directory. * * Drupal's default template renderer is a simple PHP parsing engine that * includes the template and stores the output. Drupal's theme engines * can provide alternate template engines, such as XTemplate, Smarty and * PHPTal. The most common template engine is PHPTemplate (included with * Drupal and implemented in phptemplate.engine, which uses Drupal's default * template renderer. * * In order to create theme-specific implementations of these hooks, * themes can implement their own version of theme hooks, either as functions * or templates. These implementations will be used instead of the default * implementation. If using a pure .theme without an engine, the .theme is * required to implement its own version of hook_theme() to tell Drupal what * it is implementing; themes utilizing an engine will have their well-named * theming functions automatically registered for them. While this can vary * based upon the theme engine, the standard set by phptemplate is that theme * functions should be named either phptemplate_HOOK or THEMENAME_HOOK. For * example, for Drupal's default theme (Garland) to implement the 'table' hook, * the phptemplate.engine would find phptemplate_table() or garland_table(). * The ENGINE_HOOK() syntax is preferred, as this can be used by sub-themes * (which are themes that share code but use different stylesheets). * * The theme system is described and defined in theme.inc. * * @see theme() * @see hook_theme() *//** * Formats text for emphasized display in a placeholder inside a sentence. * Used automatically by t(). * * @param $text *   The text to format (plain-text). * @return *   The formatted text (html). */function theme_placeholder($text) {  return '<em>'. check_plain($text) .'</em>';}/** * Return a themed set of status and/or error messages. The messages are grouped * by type. * * @param $display *   (optional) Set to 'status' or 'error' to display only messages of that type. * * @return *   A string containing the messages. */function theme_status_messages($display = NULL) {  $output = '';  foreach (drupal_get_messages($display) as $type => $messages) {    $output .= "<div class=\"messages $type\">\n";    if (count($messages) > 1) {      $output .= " <ul>\n";      foreach ($messages as $message) {        $output .= '  <li>'. $message ."</li>\n";      }      $output .= " </ul>\n";    }    else {      $output .= $messages[0];    }    $output .= "</div>\n";  }  return $output;}/** * Return a themed set of links. * * @param $links *   A keyed array of links to be themed. * @param $attributes *   A keyed array of attributes * @return *   A string containing an unordered list of links. */function theme_links($links, $attributes = array('class' => 'links')) {  global $language;  $output = '';  if (count($links) > 0) {    $output = '<ul'. drupal_attributes($attributes) .'>';    $num_links = count($links);    $i = 1;    foreach ($links as $key => $link) {      $class = $key;      // Add first, last and active classes to the list of links to help out themers.      if ($i == 1) {        $class .= ' first';      }      if ($i == $num_links) {        $class .= ' last';      }      if (isset($link['href']) && ($link['href'] == $_GET['q'] || ($link['href'] == '<front>' && drupal_is_front_page()))          && (empty($link['language']) || $link['language']->language == $language->language)) {        $class .= ' active';      }      $output .= '<li'. drupal_attributes(array('class' => $class)) .'>';      if (isset($link['href'])) {        // Pass in $link as $options, they share the same keys.        $output .= l($link['title'], $link['href'], $link);      }      else if (!empty($link['title'])) {        // Some links are actually not links, but we wrap these in <span> for adding title and class attributes        if (empty($link['html'])) {          $link['title'] = check_plain($link['title']);        }        $span_attributes = '';        if (isset($link['attributes'])) {          $span_attributes = drupal_attributes($link['attributes']);        }        $output .= '<span'. $span_attributes .'>'. $link['title'] .'</span>';      }      $i++;      $output .= "</li>\n";    }    $output .= '</ul>';  }  return $output;}/** * Return a themed image. * * @param $path *   Either the path of the image file (relative to base_path()) or a full URL. * @param $alt *   The alternative text for text-based browsers. * @param $title *   The title text is displayed when the image is hovered in some popular browsers. * @param $attributes *   Associative array of attributes to be placed in the img tag. * @param $getsize *   If set to TRUE, the image's dimension are fetched and added as width/height attributes. * @return *   A string containing the image tag. */function theme_image($path, $alt = '', $title = '', $attributes = NULL, $getsize = TRUE) {  if (!$getsize || (is_file($path) && (list($width, $height, $type, $image_attributes) = @getimagesize($path)))) {    $attributes = drupal_attributes($attributes);    $url = (url($path) == $path) ? $path : (base_path() . $path);    return '<img src="'. check_url($url) .'" alt="'. check_plain($alt) .'" title="'. check_plain($title) .'" '. (isset($image_attributes) ? $image_attributes : '') . $attributes .' />';  }}/** * Return a themed breadcrumb trail. * * @param $breadcrumb *   An array containing the breadcrumb links. * @return a string containing the breadcrumb output. */function theme_breadcrumb($breadcrumb) {  if (!empty($breadcrumb)) {    return '<div class="breadcrumb">'. implode('  ', $breadcrumb) .'</div>';  }}/** * Return a themed help message. * * @return a string containing the helptext for the current page. */function theme_help() {  if ($help = menu_get_active_help()) {    return '<div class="help">'. $help .'</div>';  }}/** * Return a themed submenu, typically displayed under the tabs. * * @param $links *   An array of links. */function theme_submenu($links) {  return '<div class="submenu">'. implode(' | ', $links) .'</div>';}/** * Return a themed table. * * @param $header *   An array containing the table headers. Each element of the array can be *   either a localized string or an associative array with the following keys: *   - "data": The localized title of the table column. *   - "field": The database field represented in the table column (required if *     user is to be able to sort on this column). *   - "sort": A default sort order for this column ("asc" or "desc"). *   - Any HTML attributes, such as "colspan", to apply to the column header cell. * @param $rows *   An array of table rows. Every row is an array of cells, or an associative *   array with the following keys: *   - "data": an array of cells *   - Any HTML attributes, such as "class", to apply to the table row. * *   Each cell can be either a string or an associative array with the following keys: *   - "data": The string to display in the table cell. *   - "header": Indicates this cell is a header. *   - Any HTML attributes, such as "colspan", to apply to the table cell. * *   Here's an example for $rows: *   @code *   $rows = array( *     // Simple row *     array( *       'Cell 1', 'Cell 2', 'Cell 3' *     ), *     // Row with attributes on the row and some of its cells. *     array( *       'data' => array('Cell 1', array('data' => 'Cell 2', 'colspan' => 2)), 'class' => 'funky' *     ) *   ); *   @endcode * * @param $attributes *   An array of HTML attributes to apply to the table tag. * @param $caption *   A localized string to use for the <caption> tag. * @return *   An HTML string representing the table. */function theme_table($header, $rows, $attributes = array(), $caption = NULL) {  // Add sticky headers, if applicable.  if (count($header)) {    drupal_add_js('misc/tableheader.js');    // Add 'sticky-enabled' class to the table to identify it for JS.    // This is needed to target tables constructed by this function.    $attributes['class'] = empty($attributes['class']) ? 'sticky-enabled' : ($attributes['class'] .' sticky-enabled');  }  $output = '<table'. drupal_attributes($attributes) .">\n";  if (isset($caption)) {    $output .= '<caption>'. $caption ."</caption>\n";  }  // Format the table header:  if (count($header)) {    $ts = tablesort_init($header);    // HTML requires that the thead tag has tr tags in it followed by tbody    // tags. Using ternary operator to check and see if we have any rows.    $output .= (count($rows) ? ' <thead><tr>' : ' <tr>');    foreach ($header as $cell) {      $cell = tablesort_header($cell, $header, $ts);      $output .= _theme_table_cell($cell, TRUE);    }    // Using ternary operator to close the tags based on whether or not there are rows    $output .= (count($rows) ? " </tr></thead>\n" : "</tr>\n");  }  else {    $ts = array();  }  // Format the table rows:  if (count($rows)) {    $output .= "<tbody>\n";    $flip = array('even' => 'odd', 'odd' => 'even');    $class = 'even';    foreach ($rows as $number => $row) {      $attributes = array();      // Check if we're dealing with a simple or complex row      if (isset($row['data'])) {        foreach ($row as $key => $value) {          if ($key == 'data') {            $cells = $value;          }          else {            $attributes[$key] = $value;          }        }      }      else {        $cells = $row;      }      if (count($cells)) {        // Add odd/even class        $class = $flip[$class];        if (isset($attributes['class'])) {          $attributes['class'] .= ' '. $class;        }        else {          $attributes['class'] = $class;        }        // Build row        $output .= ' <tr'. drupal_attributes($attributes) .'>';        $i = 0;        foreach ($cells as $cell) {          $cell = tablesort_cell($cell, $header, $ts, $i++);          $output .= _theme_table_cell($cell);        }        $output .= " </tr>\n";      }    }    $output .= "</tbody>\n";  }  $output .= "</table>\n";  return $output;}/** * Returns a header cell for tables that have a select all functionality. */function theme_table_select_header_cell() {  drupal_add_js('misc/tableselect.js');  return array('class' => 'select-all');}/** * Return a themed sort icon. * * @param $style *   Set to either asc or desc. This sets which icon to show. * @return *   A themed sort icon. */function theme_tablesort_indicator($style) {  if ($style == "asc") {    return theme('image', 'misc/arrow-asc.png', t('sort icon'), t('sort ascending'));  }  else {    return theme('image', 'misc/arrow-desc.png', t('sort icon'), t('sort descending'));  }}/** * Return a themed box. * * @param $title *   The subject of the box. * @param $content *   The content of the box. * @param $region *   The region in which the box is displayed. * @return *   A string containing the box output. */function theme_box($title, $content, $region = 'main') {  $output = '<h2 class="title">'. $title .'</h2><div>'. $content .'</div>';  return $output;}/** * Return a themed marker, useful for marking new or updated * content. * * @param $type *   Number representing the marker type to display * @see MARK_NEW, MARK_UPDATED, MARK_READ * @return *   A string containing the marker. */function theme_mark($type = MARK_NEW) {  global $user;  if ($user->uid) {    if ($type == MARK_NEW) {      return ' <span class="marker">'. t('new') .'</span>';    }    else if ($type == MARK_UPDATED) {      return ' <span class="marker">'. t('updated') .'</span>';    }  }}/** * Return a themed list of items. * * @param $items *   An array of items to be displayed in the list. If an item is a string, *   then it is used as is. If an item is an array, then the "data" element of *   the array is used as the contents of the list item. If an item is an array *   with a "children" element, those children are displayed in a nested list. *   All other elements are treated as attributes of the list item element. * @param $title *   The title of the list. * @param $type *   The type of list to return (e.g. "ul", "ol") * @param $attributes *   The attributes applied to the list element. * @return *   A string containing the list output. */function theme_item_list($items = array(), $title = NULL, $type = 'ul', $attributes = NULL) {  $output = '<div class="item-list">';  if (isset($title)) {    $output .= '<h3>'. $title .'</h3>';  }  if (!empty($items)) {    $output .= "<$type". drupal_attributes($attributes) .'>';    $num_items = count($items);    foreach ($items as $i => $item) {      $attributes = array();      $children = array();      if (is_array($item)) {        foreach ($item as $key => $value) {          if ($key == 'data') {            $data = $value;          }          elseif ($key == 'children') {            $children = $value;          }          else {            $attributes[$key] = $value;          }        }      }      else {        $data = $item;      }      if (count($children) > 0) {        $data .= theme_item_list($children, NULL, $type, $attributes); // Render nested list      }      if ($i == 0) {        $attributes['class'] = empty($attributes['class']) ? 'first' : ($attributes['class'] .' first');      }      if ($i == $num_items - 1) {        $attributes['class'] = empty($attributes['class']) ? 'last' : ($attributes['class'] .' last');      }      $output .= '<li'. drupal_attributes($attributes) .'>'. $data ."</li>\n";    }    $output .= "</$type>";  }  $output .= '</div>';  return $output;}/** * Returns code that emits the 'more help'-link. */function theme_more_help_link($url) {  return '<div class="more-help-link">'. t('[<a href="@link">more help...</a>]', array('@link' => check_url($url))) .'</div>';}/** * Return code that emits an XML icon. * * For most use cases, this function has been superseded by theme_feed_icon(). * * @see theme_feed_icon() * @param $url *   The url of the feed. */function theme_xml_icon($url) {  if ($image = theme('image', 'misc/xml.png', t('XML feed'), t('XML feed'))) {    return '<a href="'. check_url($url) .'" class="xml-icon">'. $image .'</a>';  }}/** * Return code that emits an feed icon. * * @param $url *   The url of the feed. * @param $title *   A descriptive title of the feed.  */function theme_feed_icon($url, $title) {  if ($image = theme('image', 'misc/feed.png', t('Syndicate content'), $title)) {    return '<a href="'. check_url($url) .'" class="feed-icon">'. $image .'</a>';  }}/** * Returns code that emits the 'more' link used on blocks. * * @param $url *   The url of the main page * @param $title *   A descriptive verb for the link, like 'Read more' */function theme_more_link($url, $title) {  return '<div class="more-link">'. t('<a href="@link" title="@title">more</a>', array('@link' => check_url($url), '@title' => $title)) .'</div>';}/** * Execute hook_footer() which is run at the end of the page right before the * close of the body tag. * * @param $main (optional) *   Whether the current page is the front page of the site. * @return *   A string containing the results of the hook_footer() calls. */function theme_closure($main = 0) {  $footer = module_invoke_all('footer', $main);  return implode("\n", $footer) . drupal_get_js('footer');}/** * Return a set of blocks available for the current user. * * @param $region *   Which set of blocks to retrieve. * @return *   A string containing the themed blocks for this region. */function theme_blocks($region) {  $output = '';  if ($list = block_list($region)) {    foreach ($list as $key => $block) {      // $key == <i>module</i>_<i>delta</i>      $output .= theme('block', $block);    }  }  // Add any content assigned to this region through drupal_set_content() calls.  $output .= drupal_get_content($region);  return $output;}/** * Format a username. * * @param $object *   The user object to format, usually returned from user_load(). * @return *   A string containing an HTML link to the user's page if the passed object *   suggests that this is a site user. Otherwise, only the username is returned. */function theme_username($object) {  if ($object->uid && $object->name) {    // Shorten the name when it is too long or it will break many tables.    if (drupal_strlen($object->name) > 20) {      $name = drupal_substr($object->name, 0, 15) .'...';    }    else {      $name = $object->name;    }    if (user_access('access user profiles')) {      $output = l($name, 'user/'. $object->uid, array('attributes' => array('title' => t('View user profile.'))));    }    else {      $output = check_plain($name);    }  }  else if ($object->name) {    // Sometimes modules display content composed by people who are    // not registered members of the site (e.g. mailing list or news    // aggregator modules). This clause enables modules to display    // the true author of the content.    if (!empty($object->homepage)) {      $output = l($object->name, $object->homepage, array('attributes' => array('rel' => 'nofollow')));    }    else {      $output = check_plain($object->name);    }    $output .= ' ('. t('not verified') .')';  }  else {    $output = check_plain(variable_get('anonymous', t('Anonymous')));  }  return $output;}/** * Return a themed progress bar. * * @param $percent *   The percentage of the progress. * @param $message *   A string containing information to be displayed. * @return *   A themed HTML string representing the progress bar. */function theme_progress_bar($percent, $message) {  $output = '<div id="progress" class="progress">';  $output .= '<div class="bar"><div class="filled" style="width: '. $percent .'%"></div></div>';  $output .= '<div class="percentage">'. $percent .'%</div>';  $output .= '<div class="message">'. $message .'</div>';  $output .= '</div>';  return $output;}/** * Create a standard indentation div. Used for drag and drop tables. * * @param $size *   Optional. The number of indentations to create. * @return *   A string containing indentations. */function theme_indentation($size = 1) {  $output = '';  for ($n = 0; $n < $size; $n++) {    $output .= '<div class="indentation">&nbsp;</div>';  }  return $output;}/** * @} End of "defgroup themeable". */function _theme_table_cell($cell, $header = FALSE) {  $attributes = '';  if (is_array($cell)) {    $data = isset($cell['data']) ? $cell['data'] : '';    $header |= isset($cell['header']);    unset($cell['data']);    unset($cell['header']);    $attributes = drupal_attributes($cell);  }  else {    $data = $cell;  }  if ($header) {    $output = "<th$attributes>$data</th>";  }  else {    $output = "<td$attributes>$data</td>";  }  return $output;}/** * Adds a default set of helper variables for preprocess functions and * templates. This comes in before any other preprocess function which makes * it possible to be used in default theme implementations (non-overriden * theme functions). */function template_preprocess(&$variables, $hook) {  global $user;  static $count = array();  // Track run count for each hook to provide zebra striping.  // See "template_preprocess_block()" which provides the same feature specific to blocks.  $count[$hook] = isset($count[$hook]) && is_int($count[$hook]) ? $count[$hook] : 1;  $variables['zebra'] = ($count[$hook] % 2) ? 'odd' : 'even';  $variables['id'] = $count[$hook]++;  // Tell all templates where they are located.  $variables['directory'] = path_to_theme();  // Set default variables that depend on the database.  $variables['is_admin']            = FALSE;  $variables['is_front']            = FALSE;  $variables['logged_in']           = FALSE;  if ($variables['db_is_active'] = db_is_active()  && !defined('MAINTENANCE_MODE')) {    // Check for administrators.    if (user_access('access administration pages')) {      $variables['is_admin'] = TRUE;    }    // Flag front page status.    $variables['is_front'] = drupal_is_front_page();    // Tell all templates by which kind of user they're viewed.    $variables['logged_in'] = ($user->uid > 0);    // Provide user object to all templates    $variables['user'] = $user;  }}/** * Process variables for page.tpl.php * * Most themes utilize their own copy of page.tpl.php. The default is located * inside "modules/system/page.tpl.php". Look in there for the full list of * variables. * * Uses the arg() function to generate a series of page template suggestions * based on the current path. * * Any changes to variables in this preprocessor should also be changed inside * template_preprocess_maintenance_page() to keep all them consistent. * * The $variables array contains the following arguments: * - $content * - $show_blocks * * @see page.tpl.php */function template_preprocess_page(&$variables) {  // Add favicon  if (theme_get_setting('toggle_favicon')) {    drupal_set_html_head('<link rel="shortcut icon" href="'. check_url(theme_get_setting('favicon')) .'" type="image/x-icon" />');  }  global $theme;  // Populate all block regions.  $regions = system_region_list($theme);  // Load all region content assigned via blocks.  foreach (array_keys($regions) as $region) {    // Prevent left and right regions from rendering blocks when 'show_blocks' == FALSE.    if (!(!$variables['show_blocks'] && ($region == 'left' || $region == 'right'))) {      $blocks = theme('blocks', $region);    }    else {      $blocks = '';    }    // Assign region to a region variable.    isset($variables[$region]) ? $variables[$region] .= $blocks : $variables[$region] = $blocks;  }  // Set up layout variable.  $variables['layout'] = 'none';  if (!empty($variables['left'])) {    $variables['layout'] = 'left';  }  if (!empty($variables['right'])) {    $variables['layout'] = ($variables['layout'] == 'left') ? 'both' : 'right';  }  // Set mission when viewing the frontpage.  if (drupal_is_front_page()) {    $mission = filter_xss_admin(theme_get_setting('mission'));  }  // Construct page title  if (drupal_get_title()) {    $head_title = array(strip_tags(drupal_get_title()), variable_get('site_name', 'Drupal'));  }  else {    $head_title = array(variable_get('site_name', 'Drupal'));    if (variable_get('site_slogan', '')) {      $head_title[] = variable_get('site_slogan', '');    }  }  $variables['head_title']        = implode(' | ', $head_title);  $variables['base_path']         = base_path();  $variables['front_page']        = url();  $variables['breadcrumb']        = theme('breadcrumb', drupal_get_breadcrumb());  $variables['feed_icons']        = drupal_get_feeds();  $variables['footer_message']    = filter_xss_admin(variable_get('site_footer', FALSE));  $variables['head']              = drupal_get_html_head();  $variables['help']              = theme('help');  $variables['language']          = $GLOBALS['language'];  $variables['language']->dir     = $GLOBALS['language']->direction ? 'rtl' : 'ltr';  $variables['logo']              = theme_get_setting('logo');  $variables['messages']          = $variables['show_messages'] ? theme('status_messages') : '';  $variables['mission']           = isset($mission) ? $mission : '';  $variables['primary_links']     = theme_get_setting('toggle_primary_links') ? menu_primary_links() : array();  $variables['secondary_links']   = theme_get_setting('toggle_secondary_links') ? menu_secondary_links() : array();  $variables['search_box']        = (theme_get_setting('toggle_search') ? drupal_get_form('search_theme_form') : '');  $variables['site_name']         = (theme_get_setting('toggle_name') ? filter_xss_admin(variable_get('site_name', 'Drupal')) : '');  $variables['site_slogan']       = (theme_get_setting('toggle_slogan') ? filter_xss_admin(variable_get('site_slogan', '')) : '');  $variables['css']               = drupal_add_css();  $variables['styles']            = drupal_get_css();  $variables['scripts']           = drupal_get_js();  $variables['tabs']              = theme('menu_local_tasks');  $variables['title']             = drupal_get_title();  // Closure should be filled last.  $variables['closure']           = theme('closure');  if ($node = menu_get_object()) {    $variables['node'] = $node;  }  // Compile a list of classes that are going to be applied to the body element.  // This allows advanced theming based on context (home page, node of certain type, etc.).  $body_classes = array();  // Add a class that tells us whether we're on the front page or not.  $body_classes[] = $variables['is_front'] ? 'front' : 'not-front';  // Add a class that tells us whether the page is viewed by an authenticated user or not.  $body_classes[] = $variables['logged_in'] ? 'logged-in' : 'not-logged-in';  // Add arg(0) to make it possible to theme the page depending on the current page  // type (e.g. node, admin, user, etc.). To avoid illegal characters in the class,  // we're removing everything disallowed. We are not using 'a-z' as that might leave  // in certain international characters (e.g. German umlauts).  $body_classes[] = preg_replace('![^abcdefghijklmnopqrstuvwxyz0-9-_]+!s', '', 'page-'. form_clean_id(drupal_strtolower(arg(0))));  // If on an individual node page, add the node type.  if (isset($variables['node']) && $variables['node']->type) {    $body_classes[] = 'node-type-'. form_clean_id($variables['node']->type);  }  // Add information about the number of sidebars.  if ($variables['layout'] == 'both') {    $body_classes[] = 'two-sidebars';  }  elseif ($variables['layout'] == 'none') {    $body_classes[] = 'no-sidebars';  }  else {    $body_classes[] = 'one-sidebar sidebar-'. $variables['layout'];  }  // Implode with spaces.  $variables['body_classes'] = implode(' ', $body_classes);  // Build a list of suggested template files in order of specificity. One  // suggestion is made for every element of the current path, though  // numeric elements are not carried to subsequent suggestions. For example,  // http://www.example.com/node/1/edit would result in the following  // suggestions:  //  // page-node-edit.tpl.php  // page-node-1.tpl.php  // page-node.tpl.php  // page.tpl.php  $i = 0;  $suggestion = 'page';  $suggestions = array();  while ($arg = arg($i++)) {    $arg = str_replace(array("/", "\\", "\0"), '', $arg);    $suggestions[] = $suggestion .'-'. $arg;    if (!is_numeric($arg)) {      $suggestion .= '-'. $arg;    }  }  if (drupal_is_front_page()) {    $suggestions[] = 'page-front';  }  if ($suggestions) {    $variables['template_files'] = $suggestions;  }}/** * Process variables for node.tpl.php * * Most themes utilize their own copy of node.tpl.php. The default is located * inside "modules/node/node.tpl.php". Look in there for the full list of * variables. * * The $variables array contains the following arguments: * - $node * - $teaser * - $page * * @see node.tpl.php */function template_preprocess_node(&$variables) {  $node = $variables['node'];  if (module_exists('taxonomy')) {    $variables['taxonomy'] = taxonomy_link('taxonomy terms', $node);  }  else {    $variables['taxonomy'] = array();  }  if ($variables['teaser'] && $node->teaser) {    $variables['content'] = $node->teaser;  }  elseif (isset($node->body)) {    $variables['content'] = $node->body;  }  else {    $variables['content'] = '';  }  $variables['date']      = format_date($node->created);  $variables['links']     = !empty($node->links) ? theme('links', $node->links, array('class' => 'links inline')) : '';  $variables['name']      = theme('username', $node);  $variables['node_url']  = url('node/'. $node->nid);  $variables['terms']     = theme('links', $variables['taxonomy'], array('class' => 'links inline'));  $variables['title']     = check_plain($node->title);  // Flatten the node object's member fields.  $variables = array_merge((array)$node, $variables);  // Display info only on certain node types.  if (theme_get_setting('toggle_node_info_'. $node->type)) {    $variables['submitted'] = theme('node_submitted', $node);    $variables['picture'] = theme_get_setting('toggle_node_user_picture') ? theme('user_picture', $node) : '';  }  else {    $variables['submitted'] = '';    $variables['picture'] = '';  }  // Clean up name so there are no underscores.  $variables['template_files'][] = 'node-'. $node->type;}/** * Process variables for block.tpl.php * * Prepare the values passed to the theme_block function to be passed * into a pluggable template engine. Uses block properties to generate a * series of template file suggestions. If none are found, the default * block.tpl.php is used. * * Most themes utilize their own copy of block.tpl.php. The default is located * inside "modules/system/block.tpl.php". Look in there for the full list of * variables. * * The $variables array contains the following arguments: * - $block * * @see block.tpl.php */function template_preprocess_block(&$variables) {  static $block_counter = array();  // All blocks get an independent counter for each region.  if (!isset($block_counter[$variables['block']->region])) {    $block_counter[$variables['block']->region] = 1;  }  // Same with zebra striping.  $variables['block_zebra'] = ($block_counter[$variables['block']->region] % 2) ? 'odd' : 'even';  $variables['block_id'] = $block_counter[$variables['block']->region]++;  $variables['template_files'][] = 'block-'. $variables['block']->region;  $variables['template_files'][] = 'block-'. $variables['block']->module;  $variables['template_files'][] = 'block-'. $variables['block']->module .'-'. $variables['block']->delta;}
<?php// $Id$/** * @file forum-topic-navigation.tpl.php * Default theme implementation to display the topic navigation string at the * bottom of all forum topics. * * Available variables: * * - $prev: The node ID of the previous post. * - $prev_url: The URL of the previous post. * - $prev_title: The title of the previous post. * * - $next: The node ID of the next post. * - $next_url: The URL of the next post. * - $next_title: The title of the next post. * * - $node: The raw node currently being viewed. Contains unsafe data *   and any data in this must be cleaned before presenting. * * @see template_preprocess_forum_topic_navigation() * @see theme_forum_topic_navigation() */?><?php if ($prev || $next): ?>  <div class="forum-topic-navigation clear-block">    <?php if ($prev): ?>      <a href="<?php print $prev_url; ?>" class="topic-previous" title="<?php print t('Go to previous forum topic') ?>"> <?php print $prev_title ?></a>    <?php endif; ?>    <?php if ($next): ?>      <a href="<?php print $next_url; ?>" class="topic-next" title="<?php print t('Go to next forum topic') ?>"><?php print $next_title ?> </a>    <?php endif; ?>  </div><?php endif; ?>
<?php// $Id$/** * Implementation of hook_schema(). */function user_schema() {  $schema['access'] = array(    'description' => 'Stores site access rules.',    'fields' => array(      'aid' => array(        'type' => 'serial',        'not null' => TRUE,        'description' => 'Primary Key: Unique access ID.',      ),      'mask' => array(        'type' => 'varchar',        'length' => 255,        'not null' => TRUE,        'default' => '',        'description' => 'Text mask used for filtering access.',      ),      'type' => array(        'type' => 'varchar',        'length' => 255,        'not null' => TRUE,        'default' => '',        'description' => 'Type of access rule: name, mail or host.',      ),      'status' => array(        'type' => 'int',        'not null' => TRUE,        'default' => 0,        'size' => 'tiny',        'description' => 'Whether rule is to allow(1) or deny(0) access.',      ),    ),    'primary key' => array('aid'),  );  $schema['authmap'] = array(    'description' => 'Stores distributed authentication mapping.',    'fields' => array(      'aid' => array(        'description' => 'Primary Key: Unique authmap ID.',        'type' => 'serial',        'unsigned' => TRUE,        'not null' => TRUE,      ),      'uid' => array(        'type' => 'int',        'not null' => TRUE,        'default' => 0,        'description' => "User's {users}.uid.",      ),      'authname' => array(        'type' => 'varchar',        'length' => 128,        'not null' => TRUE,        'default' => '',        'description' => 'Unique authentication name.',      ),      'module' => array(        'type' => 'varchar',        'length' => 128,        'not null' => TRUE,        'default' => '',        'description' => 'Module which is controlling the authentication.',      ),    ),    'unique keys' => array('authname' => array('authname')),    'primary key' => array('aid'),  );  $schema['permission'] = array(    'description' => 'Stores permissions for users.',    'fields' => array(      'pid' => array(        'type' => 'serial',        'not null' => TRUE,        'description' => 'Primary Key: Unique permission ID.',      ),      'rid' => array(        'type' => 'int',        'unsigned' => TRUE,        'not null' => TRUE,        'default' => 0,        'description' => 'The {role}.rid to which the permissions are assigned.',      ),      'perm' => array(        'type' => 'text',        'not null' => FALSE,        'size' => 'big',        'description' => 'List of permissions being assigned.',      ),      'tid' => array(        'type' => 'int',        'unsigned' => TRUE,        'not null' => TRUE,        'default' => 0,        'description' => 'Originally intended for taxonomy-based permissions, but never used.',      ),    ),    'primary key' => array('pid'),    'indexes' => array('rid' => array('rid')),  );  $schema['role'] = array(    'description' => 'Stores user roles.',    'fields' => array(      'rid' => array(        'type' => 'serial',        'unsigned' => TRUE,        'not null' => TRUE,        'description' => 'Primary Key: Unique role id.',      ),      'name' => array(        'type' => 'varchar',        'length' => 64,        'not null' => TRUE,        'default' => '',        'description' => 'Unique role name.',      ),    ),    'unique keys' => array('name' => array('name')),    'primary key' => array('rid'),  );  $schema['users'] = array(    'description' => 'Stores user data.',    'fields' => array(      'uid' => array(        'type' => 'serial',        'unsigned' => TRUE,        'not null' => TRUE,        'description' => 'Primary Key: Unique user ID.',      ),      'name' => array(        'type' => 'varchar',        'length' => 60,        'not null' => TRUE,        'default' => '',        'description' => 'Unique user name.',      ),      'pass' => array(        'type' => 'varchar',        'length' => 32,        'not null' => TRUE,        'default' => '',        'description' => "User's password (md5 hash).",      ),      'mail' => array(        'type' => 'varchar',        'length' => 64,        'not null' => FALSE,        'default' => '',        'description' => "User's email address.",      ),      'mode' => array(        'type' => 'int',        'not null' => TRUE,        'default' => 0,        'size' => 'tiny',        'description' => 'Per-user comment display mode (threaded vs. flat), used by the {comment} module.',      ),      'sort' => array(        'type' => 'int',        'not null' => FALSE,        'default' => 0,        'size' => 'tiny',        'description' => 'Per-user comment sort order (newest vs. oldest first), used by the {comment} module.',      ),      'threshold' => array(        'type' => 'int',        'not null' => FALSE,        'default' => 0,        'size' => 'tiny',        'description' => 'Previously used by the {comment} module for per-user preferences; no longer used.',      ),      'theme' => array(        'type' => 'varchar',        'length' => 255,        'not null' => TRUE,        'default' => '',        'description' => "User's default theme.",      ),      'signature' => array(        'type' => 'varchar',        'length' => 255,        'not null' => TRUE,        'default' => '',        'description' => "User's signature.",      ),      'signature_format' => array(        'type' => 'int',        'size' => 'small',        'not null' => TRUE,        'default' => 0,        'description' => 'The {filter_formats}.format of the signature.',      ),      'created' => array(        'type' => 'int',        'not null' => TRUE,        'default' => 0,        'description' => 'Timestamp for when user was created.',      ),      'access' => array(        'type' => 'int',        'not null' => TRUE,        'default' => 0,        'description' => 'Timestamp for previous time user accessed the site.',      ),      'login' => array(        'type' => 'int',        'not null' => TRUE,        'default' => 0,        'description' => "Timestamp for user's last login.",      ),      'status' => array(        'type' => 'int',        'not null' => TRUE,        'default' => 0,        'size' => 'tiny',        'description' => 'Whether the user is active(1) or blocked(0).',      ),      'timezone' => array(        'type' => 'varchar',        'length' => 8,        'not null' => FALSE,        'description' => "User's timezone.",      ),      'language' => array(        'type' => 'varchar',        'length' => 12,        'not null' => TRUE,        'default' => '',        'description' => "User's default language.",      ),      'picture' => array(        'type' => 'varchar',        'length' => 255,        'not null' => TRUE,        'default' => '',        'description' => "Path to the user's uploaded picture.",      ),      'init' => array(        'type' => 'varchar',        'length' => 64,        'not null' => FALSE,        'default' => '',        'description' => 'Email address used for initial account creation.',      ),      'data' => array(        'type' => 'text',        'not null' => FALSE,        'size' => 'big',        'description' => 'A serialized array of name value pairs that are related to the user. Any form values posted during user edit are stored and are loaded into the $user object during user_load(). Use of this field is discouraged and it will likely disappear in a future version of Drupal.',      ),    ),    'indexes' => array(      'access' => array('access'),      'created' => array('created'),      'mail' => array('mail'),    ),    'unique keys' => array(      'name' => array('name'),    ),    'primary key' => array('uid'),  );  $schema['users_roles'] = array(    'description' => 'Maps users to roles.',    'fields' => array(      'uid' => array(        'type' => 'int',        'unsigned' => TRUE,        'not null' => TRUE,        'default' => 0,        'description' => 'Primary Key: {users}.uid for user.',      ),      'rid' => array(        'type' => 'int',        'unsigned' => TRUE,        'not null' => TRUE,        'default' => 0,        'description' => 'Primary Key: {role}.rid for role.',      ),    ),    'primary key' => array('uid', 'rid'),    'indexes' => array(      'rid' => array('rid'),    ),  );  return $schema;}
<?php// $Id$define('SCHEMA_UNINSTALLED', -1);define('SCHEMA_INSTALLED', 0);define('REQUIREMENT_INFO', -1);define('REQUIREMENT_OK', 0);define('REQUIREMENT_WARNING', 1);define('REQUIREMENT_ERROR', 2);define('FILE_EXIST',          1);define('FILE_READABLE',       2);define('FILE_WRITABLE',       4);define('FILE_EXECUTABLE',     8);define('FILE_NOT_EXIST',      16);define('FILE_NOT_READABLE',   32);define('FILE_NOT_WRITABLE',   64);define('FILE_NOT_EXECUTABLE', 128);/** * Initialize the update system by loading all installed module's .install files. */function drupal_load_updates() {  foreach (drupal_get_installed_schema_version(NULL, FALSE, TRUE) as $module => $schema_version) {    if ($schema_version > -1) {      module_load_install($module);    }  }}/** * Returns an array of available schema versions for a module. * * @param $module *   A module name. * @return *   If the module has updates, an array of available updates sorted by version.  *   Otherwise, FALSE. */function drupal_get_schema_versions($module) {  $updates = array();  $functions = get_defined_functions();  foreach ($functions['user'] as $function) {    if (strpos($function, $module .'_update_') === 0) {      $version = substr($function, strlen($module .'_update_'));      if (is_numeric($version)) {        $updates[] = $version;      }    }  }  if (count($updates) == 0) {    return FALSE;  }  sort($updates, SORT_NUMERIC);  return $updates;}/** * Returns the currently installed schema version for a module. * * @param $module *   A module name. * @param $reset *   Set to TRUE after modifying the system table. * @param $array *   Set to TRUE if you want to get information about all modules in the *   system. * @return *   The currently installed schema version. */function drupal_get_installed_schema_version($module, $reset = FALSE, $array = FALSE) {  static $versions = array();  if ($reset) {    $versions = array();  }  if (!$versions) {    $versions = array();    $result = db_query("SELECT name, schema_version FROM {system} WHERE type = '%s'", 'module');    while ($row = db_fetch_object($result)) {      $versions[$row->name] = $row->schema_version;    }  }  return $array ? $versions : $versions[$module];}/** * Update the installed version information for a module. * * @param $module *   A module name. * @param $version *   The new schema version. */function drupal_set_installed_schema_version($module, $version) {  db_query("UPDATE {system} SET schema_version = %d WHERE name = '%s'", $version, $module);}/** * Loads the profile definition, extracting the profile's defined name. * * @return *   The name defined in the profile's _profile_details() hook. */function drupal_install_profile_name() {  global $profile;  static $name = NULL;  if (!isset($name)) {    // Load profile details.    $function = $profile .'_profile_details';    if (function_exists($function)) {      $details = $function();    }    $name = isset($details['name']) ? $details['name'] : 'Drupal';  }  return $name;}/** * Auto detect the base_url with PHP predefined variables. * * @param $file *   The name of the file calling this function so we can strip it out of *   the URI when generating the base_url. * * @return *   The auto-detected $base_url that should be configured in settings.php */function drupal_detect_baseurl($file = 'install.php') {  global $profile;  $proto = $_SERVER['HTTPS'] ? 'https://' : 'http://';  $host = $_SERVER['SERVER_NAME'];  $port = ($_SERVER['SERVER_PORT'] == 80 ? '' : ':'. $_SERVER['SERVER_PORT']);  $uri = preg_replace("/\?.*/", '', $_SERVER['REQUEST_URI']);  $dir = str_replace("/$file", '', $uri);  return "$proto$host$port$dir";}/** * Detect all databases supported by Drupal that are compiled into the current * PHP installation. * * @return *  An array of database types compiled into PHP. */function drupal_detect_database_types() {  $databases = array();  foreach (array('mysql', 'mysqli', 'pgsql') as $type) {    if (file_exists('./includes/install.'. $type .'.inc')) {      include_once './includes/install.'. $type .'.inc';      $function = $type .'_is_available';      if ($function()) {        $databases[$type] = $type;      }    }  }  return $databases;}/** * Read settings.php into a buffer line by line, changing values specified in * $settings array, then over-writing the old settings.php file. * * @param $settings *   An array of settings that need to be updated. */function drupal_rewrite_settings($settings = array(), $prefix = '') {  $default_settings = './sites/default/default.settings.php';  $settings_file = './'. conf_path(FALSE, TRUE) .'/'. $prefix .'settings.php';  // Build list of setting names and insert the values into the global namespace.  $keys = array();  foreach ($settings as $setting => $data) {    $GLOBALS[$setting] = $data['value'];    $keys[] = $setting;  }  $buffer = NULL;  $first = TRUE;  if ($fp = fopen($default_settings, 'r')) {    // Step line by line through settings.php.    while (!feof($fp)) {      $line = fgets($fp);      if ($first && substr($line, 0, 5) != '<?php') {        $buffer = "<?php\n\n";      }      $first = FALSE;      // Check for constants.      if (substr($line, 0, 7) == 'define(') {        preg_match('/define\(\s*[\'"]([A-Z_-]+)[\'"]\s*,(.*?)\);/', $line, $variable);        if (in_array($variable[1], $keys)) {          $setting = $settings[$variable[1]];          $buffer .= str_replace($variable[2], " '". $setting['value'] ."'", $line);          unset($settings[$variable[1]]);          unset($settings[$variable[2]]);        }        else {          $buffer .= $line;        }      }      // Check for variables.      elseif (substr($line, 0, 1) == '$') {        preg_match('/\$([^ ]*) /', $line, $variable);        if (in_array($variable[1], $keys)) {          // Write new value to settings.php in the following format:          //    $'setting' = 'value'; // 'comment'          $setting = $settings[$variable[1]];          $buffer .= '$'. $variable[1] ." = '". $setting['value'] ."';". (!empty($setting['comment']) ? ' // '. $setting['comment'] ."\n" : "\n");          unset($settings[$variable[1]]);        }        else {          $buffer .= $line;        }      }      else {        $buffer .= $line;      }    }    fclose($fp);    // Add required settings that were missing from settings.php.    foreach ($settings as $setting => $data) {      if ($data['required']) {        $buffer .= "\$$setting = '". $data['value'] ."';\n";      }    }    $fp = fopen($settings_file, 'w');    if ($fp && fwrite($fp, $buffer) === FALSE) {      drupal_set_message(st('Failed to modify %settings, please verify the file permissions.', array('%settings' => $settings_file)), 'error');    }  }  else {    drupal_set_message(st('Failed to open %settings, please verify the file permissions.', array('%settings' => $default_settings)), 'error');  }}/** * Get list of all .install files. * * @param $module_list *   An array of modules to search for their .install files. */function drupal_get_install_files($module_list = array()) {  $installs = array();  foreach ($module_list as $module) {    $installs = array_merge($installs, drupal_system_listing($module .'.install$', 'modules'));  }  return $installs;}/** * Verify a profile for installation. * * @param profile *   Name of profile to verify. * @param locale *   Name of locale used (if any). * @return *   The list of modules to install. */function drupal_verify_profile($profile, $locale) {  include_once './includes/file.inc';  include_once './includes/common.inc';  $profile_file = "./profiles/$profile/$profile.profile";  if (!isset($profile) || !file_exists($profile_file)) {    install_no_profile_error();  }  require_once($profile_file);  // Get a list of modules required by this profile.  $function = $profile .'_profile_modules';  $module_list = array_merge(drupal_required_modules(), $function(), ($locale != 'en' && !empty($locale) ? array('locale') : array()));  // Get a list of modules that exist in Drupal's assorted subdirectories.  $present_modules = array();  foreach (drupal_system_listing('\.module$', 'modules', 'name', 0) as $present_module) {    $present_modules[] = $present_module->name;  }  // Verify that all of the profile's required modules are present.  $missing_modules = array_diff($module_list, $present_modules);  if (count($missing_modules)) {    foreach ($missing_modules as $module) {      drupal_set_message(st('The %module module is required but was not found. Please move it into the <em>modules</em> subdirectory.', array('%module' => $module)), 'error');    }  }  else {    return $module_list;  }}/** * Calls the install function and updates the system table for a given list of * modules. * * @param module_list *   The modules to install. */function drupal_install_modules($module_list = array()) {  $files = module_rebuild_cache();  $module_list = array_flip(array_values($module_list));  do {    $moved = FALSE;    foreach ($module_list as $module => $weight) {      $file = $files[$module];      if (isset($file->info['dependencies']) && is_array($file->info['dependencies'])) {        foreach ($file->info['dependencies'] as $dependency) {          if (isset($module_list[$dependency]) && $module_list[$module] < $module_list[$dependency] +1) {            $module_list[$module] = $module_list[$dependency] +1;            $moved = TRUE;          }        }      }    }  } while ($moved);  asort($module_list);  $module_list = array_keys($module_list);  array_filter($module_list, '_drupal_install_module');  module_enable($module_list);}/** * Callback to install an individual profile module. * * Used during installation to install modules one at a time and then * enable them, or to install a number of modules at one time * from admin/build/modules. */function _drupal_install_module($module) {  if (drupal_get_installed_schema_version($module, TRUE) == SCHEMA_UNINSTALLED) {    module_load_install($module);    module_invoke($module, 'install');    $versions = drupal_get_schema_versions($module);    drupal_set_installed_schema_version($module, $versions ? max($versions) : SCHEMA_INSTALLED);    return TRUE;  }}/** * Callback to install the system module. * * Separated from the installation of other modules so core system * functions can be made available while other modules are installed. */function drupal_install_system() {  $system_path = dirname(drupal_get_filename('module', 'system', NULL));  require_once './'. $system_path .'/system.install';  module_invoke('system', 'install');  $system_versions = drupal_get_schema_versions('system');  $system_version = $system_versions ? max($system_versions) : SCHEMA_INSTALLED;  db_query("INSERT INTO {system} (filename, name, type, owner, status, throttle, bootstrap, schema_version) VALUES('%s', '%s', '%s', '%s', %d, %d, %d, %d)", $system_path .'/system.module', 'system', 'module', '', 1, 0, 0, $system_version);  // Now that we've installed things properly, bootstrap the full Drupal environment  drupal_bootstrap(DRUPAL_BOOTSTRAP_FULL);  module_rebuild_cache();}/** * Calls the uninstall function and updates the system table for a given module. * * @param $module *   The module to uninstall. */function drupal_uninstall_module($module) {  // First, retrieve all the module's menu paths from db.  drupal_load('module', $module);  $paths = module_invoke($module, 'menu');  // Uninstall the module(s).  module_load_install($module);  module_invoke($module, 'uninstall');  // Now remove the menu links for all paths declared by this module.  if (!empty($paths)) {    $paths = array_keys($paths);    // Clean out the names of load functions.    foreach ($paths as $index => $path) {      $parts = explode('/', $path, MENU_MAX_PARTS);      foreach ($parts as $k => $part) {        if (preg_match('/^%[a-z_]*$/', $part)) {          $parts[$k] = '%';        }      }      $paths[$index] = implode('/', $parts);    }    $placeholders = implode(', ', array_fill(0, count($paths), "'%s'"));    $result = db_query('SELECT * FROM {menu_links} WHERE router_path IN ('. $placeholders .') AND external = 0 ORDER BY depth DESC', $paths);    // Remove all such items. Starting from those with the greatest depth will    // minimize the amount of re-parenting done by menu_link_delete().    while ($item = db_fetch_array($result)) {      _menu_delete_item($item, TRUE);    }  }  drupal_set_installed_schema_version($module, SCHEMA_UNINSTALLED);}/** * Verify the state of the specified file. * * @param $file *   The file to check for. * @param $mask *   An optional bitmask created from various FILE_* constants. * @param $type *   The type of file. Can be file (default), dir, or link. * @return *   TRUE on success or FALSE on failure. A message is set for the latter. */function drupal_verify_install_file($file, $mask = NULL, $type = 'file') {  $return = TRUE;  // Check for files that shouldn't be there.  if (isset($mask) && ($mask & FILE_NOT_EXIST) && file_exists($file)) {    return FALSE;  }  // Verify that the file is the type of file it is supposed to be.  if (isset($type) && file_exists($file)) {    $check = 'is_'. $type;    if (!function_exists($check) || !$check($file)) {      $return = FALSE;    }  }  // Verify file permissions.  if (isset($mask)) {    $masks = array(FILE_EXIST, FILE_READABLE, FILE_WRITABLE, FILE_EXECUTABLE, FILE_NOT_READABLE, FILE_NOT_WRITABLE, FILE_NOT_EXECUTABLE);    foreach ($masks as $current_mask) {      if ($mask & $current_mask) {        switch ($current_mask) {          case FILE_EXIST:            if (!file_exists($file)) {              if ($type == 'dir') {                drupal_install_mkdir($file, $mask);              }              if (!file_exists($file)) {                $return = FALSE;              }            }            break;          case FILE_READABLE:            if (!is_readable($file) && !drupal_install_fix_file($file, $mask)) {              $return = FALSE;            }            break;          case FILE_WRITABLE:            if (!is_writable($file) && !drupal_install_fix_file($file, $mask)) {              $return = FALSE;            }            break;          case FILE_EXECUTABLE:            if (!is_executable($file) && !drupal_install_fix_file($file, $mask)) {              $return = FALSE;            }            break;          case FILE_NOT_READABLE:            if (is_readable($file) && !drupal_install_fix_file($file, $mask)) {              $return = FALSE;            }            break;          case FILE_NOT_WRITABLE:            if (is_writable($file) && !drupal_install_fix_file($file, $mask)) {              $return = FALSE;            }            break;          case FILE_NOT_EXECUTABLE:            if (is_executable($file) && !drupal_install_fix_file($file, $mask)) {              $return = FALSE;            }            break;        }      }    }  }  return $return;}/** * Create a directory with specified permissions. * * @param file *  The name of the directory to create; * @param mask *  The permissions of the directory to create. * @param $message *  (optional) Whether to output messages. Defaults to TRUE. * * @return *  TRUE/FALSE whether or not the directory was successfully created. */function drupal_install_mkdir($file, $mask, $message = TRUE) {  $mod = 0;  $masks = array(FILE_READABLE, FILE_WRITABLE, FILE_EXECUTABLE, FILE_NOT_READABLE, FILE_NOT_WRITABLE, FILE_NOT_EXECUTABLE);  foreach ($masks as $m) {    if ($mask & $m) {      switch ($m) {        case FILE_READABLE:          $mod += 444;          break;        case FILE_WRITABLE:          $mod += 222;          break;        case FILE_EXECUTABLE:          $mod += 111;          break;      }    }  }  if (@mkdir($file, intval("0$mod", 8))) {    return TRUE;  }  else {    return FALSE;  }}/** * Attempt to fix file permissions. * * The general approach here is that, because we do not know the security * setup of the webserver, we apply our permission changes to all three * digits of the file permission (i.e. user, group and all). * * To ensure that the values behave as expected (and numbers don't carry * from one digit to the next) we do the calculation on the octal value * using bitwise operations. This lets us remove, for example, 0222 from * 0700 and get the correct value of 0500. * * @param $file *  The name of the file with permissions to fix. * @param $mask *  The desired permissions for the file. * @param $message *  (optional) Whether to output messages. Defaults to TRUE. * * @return *  TRUE/FALSE whether or not we were able to fix the file's permissions. */function drupal_install_fix_file($file, $mask, $message = TRUE) {  $mod = fileperms($file) & 0777;  $masks = array(FILE_READABLE, FILE_WRITABLE, FILE_EXECUTABLE, FILE_NOT_READABLE, FILE_NOT_WRITABLE, FILE_NOT_EXECUTABLE);  // FILE_READABLE, FILE_WRITABLE, and FILE_EXECUTABLE permission strings  // can theoretically be 0400, 0200, and 0100 respectively, but to be safe  // we set all three access types in case the administrator intends to  // change the owner of settings.php after installation.  foreach ($masks as $m) {    if ($mask & $m) {      switch ($m) {        case FILE_READABLE:          if (!is_readable($file)) {            $mod |= 0444;          }          break;        case FILE_WRITABLE:          if (!is_writable($file)) {            $mod |= 0222;          }          break;        case FILE_EXECUTABLE:          if (!is_executable($file)) {            $mod |= 0111;          }          break;        case FILE_NOT_READABLE:          if (is_readable($file)) {            $mod &= ~0444;          }          break;        case FILE_NOT_WRITABLE:          if (is_writable($file)) {            $mod &= ~0222;          }          break;        case FILE_NOT_EXECUTABLE:          if (is_executable($file)) {            $mod &= ~0111;          }          break;      }    }  }  // chmod() will work if the web server is running as owner of the file.  // If PHP safe_mode is enabled the currently executing script must also  // have the same owner.  if (@chmod($file, $mod)) {    return TRUE;  }  else {    return FALSE;  }}/** * Send the user to a different installer page. This issues an on-site HTTP * redirect. Messages (and errors) are erased. * * @param $path *   An installer path. */function install_goto($path) {  global $base_url;  header('Location: '. $base_url .'/'. $path);  header('Cache-Control: no-cache'); // Not a permanent redirect.  exit();}/** * Hardcoded function for doing the equivalent of t() during * the install process, when database, theme, and localization * system is possibly not yet available. */function st($string, $args = array()) {  static $locale_strings = NULL;  global $profile, $install_locale;  if (!isset($locale_strings)) {    $locale_strings = array();    $filename = './profiles/'. $profile .'/translations/'. $install_locale .'.po';    if (file_exists($filename)) {      require_once './includes/locale.inc';      $file = (object) array('filepath' => $filename);      _locale_import_read_po('mem-store', $file);      $locale_strings = _locale_import_one_string('mem-report');    }  }  require_once './includes/theme.inc';  // Transform arguments before inserting them  foreach ($args as $key => $value) {    switch ($key[0]) {      // Escaped only      case '@':        $args[$key] = check_plain($value);        break;      // Escaped and placeholder      case '%':      default:        $args[$key] = '<em>'. check_plain($value) .'</em>';        break;      // Pass-through      case '!':    }  }  return strtr((!empty($locale_strings[$string]) ? $locale_strings[$string] : $string), $args);}/** * Check a profile's requirements. * * @param profile *   Name of profile to check. */function drupal_check_profile($profile) {  include_once './includes/file.inc';  $profile_file = "./profiles/$profile/$profile.profile";  if (!isset($profile) || !file_exists($profile_file)) {    install_no_profile_error();  }  require_once($profile_file);  // Get a list of modules required by this profile.  $function = $profile .'_profile_modules';  $module_list = array_unique(array_merge(drupal_required_modules(), $function()));  // Get a list of all .install files.  $installs = drupal_get_install_files($module_list);  // Collect requirement testing results  $requirements = array();  foreach ($installs as $install) {    require_once $install->filename;    if (module_hook($install->name, 'requirements')) {      $requirements = array_merge($requirements, module_invoke($install->name, 'requirements', 'install'));    }  }  return $requirements;}/** * Extract highest severity from requirements array. */function drupal_requirements_severity(&$requirements) {  $severity = REQUIREMENT_OK;  foreach ($requirements as $requirement) {    if (isset($requirement['severity'])) {      $severity = max($severity, $requirement['severity']);    }  }  return $severity;}/** * Check a module's requirements. */function drupal_check_module($module) {  // Include install file  $install = drupal_get_install_files(array($module));  if (isset($install[$module])) {    require_once $install[$module]->filename;    // Check requirements    $requirements = module_invoke($module, 'requirements', 'install');    if (is_array($requirements) && drupal_requirements_severity($requirements) == REQUIREMENT_ERROR) {      // Print any error messages      foreach ($requirements as $requirement) {        if (isset($requirement['severity']) && $requirement['severity'] == REQUIREMENT_ERROR) {          $message = $requirement['description'];          if (isset($requirement['value']) && $requirement['value']) {            $message .= ' ('. t('Currently using !item !version', array('!item' => $requirement['title'], '!version' => $requirement['value'])) .')';          }          drupal_set_message($message, 'error');        }      }      return FALSE;    }  }  return TRUE;}
<?php// $Id$/** * @file * A database-mediated implementation of a locking mechanism. *//** * @defgroup lock Functions to coordinate long-running operations across requests. * @{ * In most environments, multiple Drupal page requests (a.k.a. threads or * processes) will execute in parallel. This leads to potential conflicts or * race conditions when two requests execute the same code at the same time. A * common example of this is a rebuild like menu_rebuild() where we invoke many * hook implementations to get and process data from all active modules, and * then delete the current data in the database to insert the new afterwards. * * This is a cooperative, advisory lock system. Any long-running operation * that could potentially be attempted in parallel by multiple requests should * try to acquire a lock before proceeding. By obtaiing a lock, one request * notifies any other requests that a specific opertation is in progress which * must not be executed in parallel. * * To use this API, pick a unique name for the lock. A sensible choice is the * name of the function performing the operation. A very simple example use of * this API: * @code * function mymodule_long_operation() { *   if (lock_acquire('mymodule_long_operation')) { *     // Do the long operation here. *     // ... *     lock_release('mymodule_long_operation'); *   } * } * @endcode * * If a function acquires a lock it should always release it when the * operation is complete by calling lock_release(), as in the example. * * A function that has acquired a lock may attempt to renew a lock (extend the * duration of the lock) by calling lock_acquire() again during the operation. * Failure to renew a lock is indicative that another request has acquired * the lock, and that the current operation may need to be aborted. * * If a function fails to acquire a lock it may either immediately return, or * it may call lock_wait() if the rest of the current page request requires * that the operation in question be complete.  After lock_wait() returns, * the function may again attempt to acquire the lock, or may simply allow the * page request to proceed on the  assumption that a parallel request completed * the operation. * * lock_acquire() and lock_wait() will automatically break (delete) a lock * whose duration has exceeded the timeout specified when it was acquired. * * A function that has acquired a lock may attempt to renew a lock (extend the * duration of the lock) by calling lock_acquire() again during the operation. * Failure to renew a lock is indicative that another request has acquired * the lock, and that the current operation may need to be aborted. * * Alternative implementations of this API (such as APC) may be substituted * by setting the 'lock_inc' variable to an alternate include filepath.  Since * this is an API intended to support alternative implementations, code using * this API should never rely upon specific implementation details (for example * no code should look for or directly modify a lock in the {semaphore} table). *//** * Initialize the locking system. */function lock_init() {  global $locks;  $locks = array();}/** * Helper function to get this request's unique id. */function _lock_id() {  static $lock_id;  if (!isset($lock_id)) {    // Assign a unique id.    $lock_id = uniqid(mt_rand(), TRUE);    // We only register a shutdown function if a lock is used.    register_shutdown_function('lock_release_all', $lock_id);  }  return $lock_id;}/** * Acquire (or renew) a lock, but do not block if it fails. * * @param $name *   The name of the lock. * @param $timeout *   A number of seconds (float) before the lock expires. * @return *   TRUE if the lock was acquired, FALSE if it failed. */function lock_acquire($name, $timeout = 30.0) {  global $locks;  // Insure that the timeout is at least 1 ms.  $timeout = max($timeout, 0.001);  list($usec, $sec) = explode(' ', microtime());  $expire = (float)$usec + (float)$sec + $timeout;  if (isset($locks[$name])) {    // Try to extend the expiration of a lock we already acquired.    if (!db_result(db_query("UPDATE {semaphore} SET expire = %f WHERE name = '%s' AND value = '%s'", $expire, $name, _lock_id()))) {      // The lock was broken.      unset($locks[$name]);    }  }  else {    // Optimistically try to acquire the lock, then retry once if it fails.    // The first time through the loop cannot be a retry.    $retry = FALSE;    // We always want to do this code at least once.    do {      if (@db_query("INSERT INTO {semaphore} (name, value, expire) VALUES ('%s', '%s', %f)", $name, _lock_id(), $expire)) {        // We track all acquired locks in the global variable.        $locks[$name] = TRUE;        // We never need to try again.        $retry = FALSE;      }      else {        // Suppress the error. If this is our first pass through the loop,        // then $retry is FALSE. In this case, the insert must have failed        // meaning some other request acquired the lock but did not release it.        // We decide whether to retry by checking lock_may_be_available()        // Since this will break the lock in case it is expired.        $retry = $retry ? FALSE : lock_may_be_available($name);      }      // We only retry in case the first attempt failed, but we then broke      // an expired lock.    } while ($retry);  }  return isset($locks[$name]);}/** * Check if lock acquired by a different process may be available. * * If an existing lock has expired, it is removed. * * @param $name *   The name of the lock. * @return *   TRUE if there is no lock or it was removed, FALSE otherwise. */function lock_may_be_available($name) {  $lock = db_fetch_array(db_query("SELECT expire, value FROM {semaphore} WHERE name = '%s'", $name));  if (!$lock) {    return TRUE;  }  $expire = (float) $lock['expire'];  list($usec, $sec) = explode(' ', microtime());  $now = (float)$usec + (float)$sec;  if ($now > $lock['expire']) {    // We check two conditions to prevent a race condition where another    // request acquired the lock and set a new expire time.  We add a small    // number to $expire to avoid errors with float to string conversion.    db_query("DELETE FROM {semaphore} WHERE name = '%s' AND value = '%s' AND expire <= %f", $name, $lock['value'], 0.0001 + $expire);    return (bool)db_affected_rows();  }  return FALSE;}/** * Wait for a lock to be available. * * This function may be called in a request that fails to acquire a desired * lock. This will block further execution until the lock is available or the * specified delay in seconds is reached.  This should not be used with locks * that are acquired very frequently, since the lock is likely to be acquired * again by a different request during the sleep(). * * @param $name *   The name of the lock. * @param $delay *   The maximum number of seconds to wait, as an integer. * @return *   TRUE if the lock holds, FALSE if it is available. */function lock_wait($name, $delay = 30) {  while ($delay--) {    // This function should only be called by a request that failed to get a    // lock, so we sleep first to give the parallel request a chance to finish    // and release the lock.    sleep(1);    if (lock_may_be_available($name)) {      // No longer need to wait.      return FALSE;    }  }  // The caller must still wait longer to get the lock.  return TRUE;}/** * Release a lock previously acquired by lock_acquire(). * * This will release the named lock if it is still held by the current request. * * @param $name *   The name of the lock. */function lock_release($name) {  global $locks;  unset($locks[$name]);  db_query("DELETE FROM {semaphore} WHERE name = '%s' AND value = '%s'", $name, _lock_id());}/** * Release all previously acquired locks. */function lock_release_all($lock_id = NULL) {  global $locks;  $locks = array();  if (empty($lock_id)) {    $lock_id = _lock_id();  }  db_query("DELETE FROM {semaphore} WHERE value = '%s'", _lock_id());}/** * @} End of "defgroup locks". */
<?php// $Id$/** * Form API callback to validate the upload settings form. */function upload_admin_settings_validate($form, &$form_state) {  if (($form_state['values']['upload_max_resolution'] != '0')) {    if (!preg_match('/^[0-9]+x[0-9]+$/', $form_state['values']['upload_max_resolution'])) {      form_set_error('upload_max_resolution', t('The maximum allowed image size expressed as WIDTHxHEIGHT (e.g. 640x480). Set to 0 for no restriction.'));    }  }  $default_uploadsize = $form_state['values']['upload_uploadsize_default'];  $default_usersize = $form_state['values']['upload_usersize_default'];  $exceed_max_msg = t('Your PHP settings limit the maximum file size per upload to %size.', array('%size' => format_size(file_upload_max_size()))) .'<br/>';  $more_info = t("Depending on your server environment, these settings may be changed in the system-wide php.ini file, a php.ini file in your Drupal root directory, in your Drupal site's settings.php file, or in the .htaccess file in your Drupal root directory.");  if (!is_numeric($default_uploadsize) || ($default_uploadsize <= 0)) {    form_set_error('upload_uploadsize_default', t('The %role file size limit must be a number and greater than zero.', array('%role' => t('default'))));  }  if (!is_numeric($default_usersize) || ($default_usersize <= 0)) {    form_set_error('upload_usersize_default', t('The %role file size limit must be a number and greater than zero.', array('%role' => t('default'))));  }  if ($default_uploadsize * 1024 * 1024 > file_upload_max_size()) {    form_set_error('upload_uploadsize_default', $exceed_max_msg . $more_info);    $more_info = '';  }  if ($default_uploadsize > $default_usersize) {    form_set_error('upload_uploadsize_default', t('The %role maximum file size per upload is greater than the total file size allowed per user', array('%role' => t('default'))));  }  foreach ($form_state['values']['roles'] as $rid => $role) {    $uploadsize = $form_state['values']['upload_uploadsize_'. $rid];    $usersize = $form_state['values']['upload_usersize_'. $rid];    if (!is_numeric($uploadsize) || ($uploadsize <= 0)) {      form_set_error('upload_uploadsize_'. $rid, t('The %role file size limit must be a number and greater than zero.', array('%role' => $role)));    }    if (!is_numeric($usersize) || ($usersize <= 0)) {      form_set_error('upload_usersize_'. $rid, t('The %role file size limit must be a number and greater than zero.', array('%role' => $role)));    }    if ($uploadsize * 1024 * 1024 > file_upload_max_size()) {      form_set_error('upload_uploadsize_'. $rid, $exceed_max_msg . $more_info);      $more_info = '';    }    if ($uploadsize > $usersize) {      form_set_error('upload_uploadsize_'. $rid, t('The %role maximum file size per upload is greater than the total file size allowed per user', array('%role' => $role)));    }  }}/** * Menu callback for the upload settings form. */function upload_admin_settings() {  $upload_extensions_default = variable_get('upload_extensions_default', 'jpg jpeg gif png txt doc xls pdf ppt pps odt ods odp');  $upload_uploadsize_default = variable_get('upload_uploadsize_default', 1);  $upload_usersize_default = variable_get('upload_usersize_default', 1);  $form['settings_general'] = array(    '#type' => 'fieldset',    '#title' => t('General settings'),    '#collapsible' => TRUE,  );  $form['settings_general']['upload_max_resolution'] = array(    '#type' => 'textfield',    '#title' => t('Maximum resolution for uploaded images'),    '#default_value' => variable_get('upload_max_resolution', 0),    '#size' => 15,    '#maxlength' => 10,    '#description' => t('The maximum allowed image size (e.g. 640x480). Set to 0 for no restriction. If an <a href="!image-toolkit-link">image toolkit</a> is installed, files exceeding this value will be scaled down to fit.', array('!image-toolkit-link' => url('admin/settings/image-toolkit'))),    '#field_suffix' => '<kbd>'. t('WIDTHxHEIGHT') .'</kbd>'  );  $form['settings_general']['upload_list_default'] = array(    '#type' => 'select',    '#title' => t('List files by default'),    '#default_value' => variable_get('upload_list_default', 1),    '#options' => array(0 => t('No'), 1 => t('Yes')),    '#description' => t('Display attached files when viewing a post.'),  );  $form['settings_general']['upload_extensions_default'] = array(    '#type' => 'textfield',    '#title' => t('Default permitted file extensions'),    '#default_value' => $upload_extensions_default,    '#maxlength' => 255,    '#description' => t('Default extensions that users can upload. Separate extensions with a space and do not include the leading dot.'),  );  $form['settings_general']['upload_uploadsize_default'] = array(    '#type' => 'textfield',    '#title' => t('Default maximum file size per upload'),    '#default_value' => $upload_uploadsize_default,    '#size' => 5,    '#maxlength' => 5,    '#description' => t('The default maximum file size a user can upload. If an image is uploaded and a maximum resolution is set, the size will be checked after the file has been resized.'),    '#field_suffix' => t('MB'),  );  $form['settings_general']['upload_usersize_default'] = array(    '#type' => 'textfield',    '#title' => t('Default total file size per user'),    '#default_value' => $upload_usersize_default,    '#size' => 5,    '#maxlength' => 5,    '#description' => t('The default maximum size of all files a user can have on the site.'),    '#field_suffix' => t('MB'),  );  $form['settings_general']['upload_max_size'] = array('#value' => '<p>'. t('Your PHP settings limit the maximum file size per upload to %size.', array('%size' => format_size(file_upload_max_size()))) .'</p>');  $roles = user_roles(FALSE, 'upload files');  $form['roles'] = array('#type' => 'value', '#value' => $roles);  foreach ($roles as $rid => $role) {    $form['settings_role_'. $rid] = array(      '#type' => 'fieldset',      '#title' => t('Settings for @role', array('@role' => $role)),      '#collapsible' => TRUE,      '#collapsed' => TRUE,    );    $form['settings_role_'. $rid]['upload_extensions_'. $rid] = array(      '#type' => 'textfield',      '#title' => t('Permitted file extensions'),      '#default_value' => variable_get('upload_extensions_'. $rid, $upload_extensions_default),      '#maxlength' => 255,      '#description' => t('Extensions that users in this role can upload. Separate extensions with a space and do not include the leading dot.'),    );    $form['settings_role_'. $rid]['upload_uploadsize_'. $rid] = array(      '#type' => 'textfield',      '#title' => t('Maximum file size per upload'),      '#default_value' => variable_get('upload_uploadsize_'. $rid, $upload_uploadsize_default),      '#size' => 5,      '#maxlength' => 5,      '#description' => t('The maximum size of a file a user can upload. If an image is uploaded and a maximum resolution is set, the size will be checked after the file has been resized.'),      '#field_suffix' => t('MB'),    );    $form['settings_role_'. $rid]['upload_usersize_'. $rid] = array(      '#type' => 'textfield',      '#title' => t('Total file size per user'),      '#default_value' => variable_get('upload_usersize_'. $rid, $upload_usersize_default),      '#size' => 5,      '#maxlength' => 5,      '#description' => t('The maximum size of all files a user can have on the site.'),      '#field_suffix' => t('MB'),    );  }  $form['#validate'] = array('upload_admin_settings_validate');  return system_settings_form($form);}
