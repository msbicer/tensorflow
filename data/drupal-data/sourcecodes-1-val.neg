<?php// $Id$// PostgreSQL specific install functions/** * Check if PostgreSQL is available. * * @return *  TRUE/FALSE */function pgsql_is_available() {  return function_exists('pg_connect');}/** * Check if we can connect to PostgreSQL. * * @return *  TRUE/FALSE */function drupal_test_pgsql($url, &$success) {  if (!pgsql_is_available()) {    drupal_set_message(st('PHP PostgreSQL support not enabled.'), 'error');    return FALSE;  }  $url = parse_url($url);  $conn_string = '';  // Decode url-encoded information in the db connection string  if (isset($url['user'])) {    $conn_string .= ' user='. urldecode($url['user']);  }  if (isset($url['pass'])) {    $conn_string .= ' password='. urldecode($url['pass']);  }  if (isset($url['host'])) {    $conn_string .= ' host='. urldecode($url['host']);  }  if (isset($url['path'])) {    $conn_string .= ' dbname='. substr(urldecode($url['path']), 1);  }  if (isset($url['port'])) {    $conn_string .= ' port='. urldecode($url['port']);  }  // Test connecting to the database.  $connection = @pg_connect($conn_string);  if (!$connection) {    drupal_set_message(st('Failed to connect to your PostgreSQL database server. PostgreSQL reports the following message: %error.<ul><li>Are you sure you have the correct username and password?</li><li>Are you sure that you have typed the correct database hostname?</li><li>Are you sure that the database server is running?</li><li>Are you sure you typed the correct database name?</li></ul>For more help, see the <a href="http://drupal.org/node/258">Installation and upgrading handbook</a>. If you are unsure what these terms mean you should probably contact your hosting provider.', array('%error' => 'Connection failed. See log file for failure reason')), 'error');    return FALSE;  }  $success = array('CONNECT');  // Test CREATE.  $query = 'CREATE TABLE drupal_install_test (id integer NOT NULL)';  $result = pg_query($connection, $query);  if ($error = pg_result_error($result)) {    drupal_set_message(st('Failed to create a test table on your PostgreSQL database server with the command %query. PostgreSQL reports the following message: %error.<ul><li>Are you sure the configured username has the necessary PostgreSQL permissions to create tables in the database?</li></ul>For more help, see the <a href="http://drupal.org/node/258">Installation and upgrading handbook</a>. If you are unsure what these terms mean you should probably contact your hosting provider.', array('%query' => $query, '%error' => $error)), 'error');    return FALSE;  }  $err = FALSE;  $success[] = 'SELECT';  $success[] = 'CREATE';  // Test INSERT.  $query = 'INSERT INTO drupal_install_test (id) VALUES (1)';  $result = pg_query($connection, $query);  if ($error = pg_result_error($result)) {    drupal_set_message(st('Failed to insert a value into a test table on your PostgreSQL database server. We tried inserting a value with the command %query and PostgreSQL reported the following error: %error.', array('%query' => $query, '%error' => $error)), 'error');    $err = TRUE;  }  else {    $success[] = 'INSERT';  }  // Test UPDATE.  $query = 'UPDATE drupal_install_test SET id = 2';  $result = pg_query($connection, $query);  if ($error = pg_result_error($result)) {    drupal_set_message(st('Failed to update a value in a test table on your PostgreSQL database server. We tried updating a value with the command %query and PostgreSQL reported the following error: %error.', array('%query' => $query, '%error' => $error)), 'error');    $err = TRUE;  }  else {    $success[] = 'UPDATE';  }  // Test LOCK.  $query = 'BEGIN; LOCK drupal_install_test IN SHARE ROW EXCLUSIVE MODE';  $result = pg_query($connection, $query);  if ($error = pg_result_error($result)) {    drupal_set_message(st('Failed to lock a test table on your PostgreSQL database server. We tried locking a table with the command %query and PostgreSQL reported the following error: %error.', array('%query' => $query, '%error' => $error)), 'error');    $err = TRUE;  }  else {    $success[] = 'LOCK';  }  // Test UNLOCK, which is done automatically upon transaction end in PostgreSQL  $query = 'COMMIT';  $result = pg_query($connection, $query);  if ($error = pg_result_error()) {    drupal_set_message(st('Failed to unlock a test table on your PostgreSQL database server. We tried unlocking a table with the command %query and PostgreSQL reported the following error: %error.', array('%query' => $query, '%error' => $error)), 'error');    $err = TRUE;  }  else {    $success[] = 'UNLOCK';  }  // Test DELETE.  $query = 'DELETE FROM drupal_install_test';  $result = pg_query($connection, $query);  if ($error = pg_result_error()) {    drupal_set_message(st('Failed to delete a value from a test table on your PostgreSQL database server. We tried deleting a value with the command %query and PostgreSQL reported the following error: %error.', array('%query' => $query, '%error' => $error)), 'error');    $err = TRUE;  }  else {    $success[] = 'DELETE';  }  // Test DROP.  $query = 'DROP TABLE drupal_install_test';  $result = pg_query($connection, $query);  if ($error = pg_result_error()) {    drupal_set_message(st('Failed to drop a test table from your PostgreSQL database server. We tried dropping a table with the command %query and PostgreSQL reported the following error %error.', array('%query' => $query, '%error' => $error)), 'error');    $err = TRUE;  }  else {    $success[] = 'DROP';  }  if ($err) {    return FALSE;  }  pg_close($connection);  return TRUE;}
<?php// $Id$/** * @file * Drupal site-specific configuration file. * * IMPORTANT NOTE: * This file may have been set to read-only by the Drupal installation * program. If you make changes to this file, be sure to protect it again * after making your modifications. Failure to remove write permissions * to this file is a security risk. * * The configuration file to be loaded is based upon the rules below. * * The configuration directory will be discovered by stripping the * website's hostname from left to right and pathname from right to * left. The first configuration file found will be used and any * others will be ignored. If no other configuration file is found * then the default configuration file at 'sites/default' will be used. * * For example, for a fictitious site installed at * http://www.drupal.org/mysite/test/, the 'settings.php' * is searched in the following directories: * *  1. sites/www.drupal.org.mysite.test *  2. sites/drupal.org.mysite.test *  3. sites/org.mysite.test * *  4. sites/www.drupal.org.mysite *  5. sites/drupal.org.mysite *  6. sites/org.mysite * *  7. sites/www.drupal.org *  8. sites/drupal.org *  9. sites/org * * 10. sites/default * * If you are installing on a non-standard port number, prefix the * hostname with that number. For example, * http://www.drupal.org:8080/mysite/test/ could be loaded from * sites/8080.www.drupal.org.mysite.test/. *//** * Database settings: * * Note that the $db_url variable gets parsed using PHP's built-in * URL parser (i.e. using the "parse_url()" function) so make sure * not to confuse the parser. If your username, password * or database name contain characters used to delineate * $db_url parts, you can escape them via URI hex encodings: * *   : = %3a   / = %2f   @ = %40 *   + = %2b   ( = %28   ) = %29 *   ? = %3f   = = %3d   & = %26 * * To specify multiple connections to be used in your site (i.e. for * complex custom modules) you can also specify an associative array * of $db_url variables with the 'default' element used until otherwise * requested. * * You can optionally set prefixes for some or all database table names * by using the $db_prefix setting. If a prefix is specified, the table * name will be prepended with its value. Be sure to use valid database * characters only, usually alphanumeric and underscore. If no prefixes * are desired, leave it as an empty string ''. * * To have all database names prefixed, set $db_prefix as a string: * *   $db_prefix = 'main_'; * * To provide prefixes for specific tables, set $db_prefix as an array. * The array's keys are the table names and the values are the prefixes. * The 'default' element holds the prefix for any tables not specified * elsewhere in the array. Example: * *   $db_prefix = array( *     'default'   => 'main_', *     'users'     => 'shared_', *     'sessions'  => 'shared_', *     'role'      => 'shared_', *     'authmap'   => 'shared_', *   ); * * Database URL format: *   $db_url = 'mysql://username:password@localhost/databasename'; *   $db_url = 'mysqli://username:password@localhost/databasename'; *   $db_url = 'pgsql://username:password@localhost/databasename'; */$db_url = 'mysql://username:password@localhost/databasename';$db_prefix = '';/** * Access control for update.php script * * If you are updating your Drupal installation using the update.php script * being not logged in as administrator, you will need to modify the access * check statement below. Change the FALSE to a TRUE to disable the access * check. After finishing the upgrade, be sure to open this file again * and change the TRUE back to a FALSE! */$update_free_access = FALSE;/** * Base URL (optional). * * If you are experiencing issues with different site domains, * uncomment the Base URL statement below (remove the leading hash sign) * and fill in the absolute URL to your Drupal installation. * * You might also want to force users to use a given domain. * See the .htaccess file for more information. * * Examples: *   $base_url = 'http://www.example.com'; *   $base_url = 'http://www.example.com:8888'; *   $base_url = 'http://www.example.com/drupal'; *   $base_url = 'https://www.example.com:8888/drupal'; * * It is not allowed to have a trailing slash; Drupal will add it * for you. */# $base_url = 'http://www.example.com';  // NO trailing slash!/** * PHP settings: * * To see what PHP settings are possible, including whether they can * be set at runtime (ie., when ini_set() occurs), read the PHP * documentation at http://www.php.net/manual/en/ini.php#ini.list * and take a look at the .htaccess file to see which non-runtime * settings are used there. Settings defined here should not be * duplicated there so as to avoid conflict issues. */ini_set('arg_separator.output',     '&amp;');ini_set('magic_quotes_runtime',     0);ini_set('magic_quotes_sybase',      0);ini_set('session.cache_expire',     200000);ini_set('session.cache_limiter',    'none');ini_set('session.cookie_lifetime',  2000000);ini_set('session.gc_maxlifetime',   200000);ini_set('session.save_handler',     'user');ini_set('session.use_cookies',      1);ini_set('session.use_only_cookies', 1);ini_set('session.use_trans_sid',    0);ini_set('url_rewriter.tags',        '');/** * If you encounter a situation where users post a large amount of text, and * the result is stripped out upon viewing but can still be edited, Drupal's * output filter may not have sufficient memory to process it. If you * experience this issue, you may wish to uncomment the following two lines * and increase the limits of these variables. For more information, see * http://php.net/manual/en/pcre.configuration.php. */# ini_set('pcre.backtrack_limit', 200000);# ini_set('pcre.recursion_limit', 200000);/** * Drupal automatically generates a unique session cookie name for each site * based on on its full domain name. If you have multiple domains pointing at * the same Drupal site, you can either redirect them all to a single domain * (see comment in .htaccess), or uncomment the line below and specify their * shared base domain. Doing so assures that users remain logged in as they * cross between your various domains. */# $cookie_domain = 'example.com';/** * Variable overrides: * * To override specific entries in the 'variable' table for this site, * set them here. You usually don't need to use this feature. This is * useful in a configuration file for a vhost or directory, rather than * the default settings.php. Any configuration setting from the 'variable' * table can be given a new value. Note that any values you provide in * these variable overrides will not be modifiable from the Drupal * administration interface. * * Remove the leading hash signs to enable. */# $conf = array(#   'site_name' => 'My Drupal site',#   'theme_default' => 'minnelli',#   'anonymous' => 'Visitor',/** * A custom theme can be set for the off-line page. This applies when the site * is explicitly set to off-line mode through the administration page or when * the database is inactive due to an error. It can be set through the * 'maintenance_theme' key. The template file should also be copied into the * theme. It is located inside 'modules/system/maintenance-page.tpl.php'. * Note: This setting does not apply to installation and update pages. */#   'maintenance_theme' => 'minnelli',/** * reverse_proxy accepts a boolean value. * * Enable this setting to determine the correct IP address of the remote * client by examining information stored in the X-Forwarded-For headers. * X-Forwarded-For headers are a standard mechanism for identifying client * systems connecting through a reverse proxy server, such as Squid or * Pound. Reverse proxy servers are often used to enhance the performance * of heavily visited sites and may also provide other site caching, * security or encryption benefits. If this Drupal installation operates * behind a reverse proxy, this setting should be enabled so that correct * IP address information is captured in Drupal's session management, * logging, statistics and access management systems; if you are unsure * about this setting, do not have a reverse proxy, or Drupal operates in * a shared hosting environment, this setting should be set to disabled. */#   'reverse_proxy' => TRUE,/** * reverse_proxy accepts an array of IP addresses. * * Each element of this array is the IP address of any of your reverse * proxies. Filling this array Drupal will trust the information stored * in the X-Forwarded-For headers only if Remote IP address is one of * these, that is the request reaches the web server from one of your * reverse proxies. Otherwise, the client could directly connect to * your web server spoofing the X-Forwarded-For headers. */#   'reverse_proxy_addresses' => array('a.b.c.d', ...),# );/** * String overrides: * * To override specific strings on your site with or without enabling locale * module, add an entry to this list. This functionality allows you to change * a small number of your site's default English language interface strings. * * Remove the leading hash signs to enable. */# $conf['locale_custom_strings_en'] = array(#   'forum'      => 'Discussion board',#   '@count min' => '@count minutes',# );
<?php// $Id$/** * @file box.tpl.php * * Theme implementation to display a box. * * Available variables: * - $title: Box title. * - $content: Box content. * * @see template_preprocess() */?><div class="box"><?php if ($title): ?>  <h2><?php print $title ?></h2><?php endif; ?>  <div class="content"><?php print $content ?></div></div>
<?php// $Id$/** * @file * User page callbacks for the statistics module. */function statistics_node_tracker() {  if ($node = node_load(arg(1))) {    $header = array(        array('data' => t('Time'), 'field' => 'a.timestamp', 'sort' => 'desc'),        array('data' => t('Referrer'), 'field' => 'a.url'),        array('data' => t('User'), 'field' => 'u.name'),        array('data' => t('Operations')));    $result = pager_query("SELECT a.aid, a.timestamp, a.url, a.uid, u.name FROM {accesslog} a LEFT JOIN {users} u ON a.uid = u.uid WHERE a.path = 'node/%d' OR a.path LIKE 'node/%d/%%'". tablesort_sql($header), 30, 0, NULL, $node->nid, $node->nid);    $rows = array();    while ($log = db_fetch_object($result)) {      $rows[] = array(        array('data' => format_date($log->timestamp, 'small'), 'class' => 'nowrap'),        _statistics_link($log->url),        theme('username', $log),        l(t('details'), "admin/reports/access/$log->aid"));    }    if (empty($rows)) {      $rows[] = array(array('data' => t('No statistics available.'), 'colspan' => 4));    }    drupal_set_title(check_plain($node->title));    $output = theme('table', $header, $rows);    $output .= theme('pager', NULL, 30, 0);    return $output;  }  else {    drupal_not_found();  }}function statistics_user_tracker() {  if ($account = user_load(array('uid' => arg(1)))) {    $header = array(        array('data' => t('Timestamp'), 'field' => 'timestamp', 'sort' => 'desc'),        array('data' => t('Page'), 'field' => 'path'),        array('data' => t('Operations')));    $result = pager_query('SELECT aid, timestamp, path, title FROM {accesslog} WHERE uid = %d'. tablesort_sql($header), 30, 0, NULL, $account->uid);    $rows = array();    while ($log = db_fetch_object($result)) {      $rows[] = array(        array('data' => format_date($log->timestamp, 'small'), 'class' => 'nowrap'),        _statistics_format_item($log->title, $log->path),        l(t('details'), "admin/reports/access/$log->aid"));    }    if (empty($rows)) {      $rows[] = array(array('data' => t('No statistics available.'), 'colspan' => 3));    }    drupal_set_title(check_plain($account->name));    $output = theme('table', $header, $rows);    $output .= theme('pager', NULL, 30, 0);    return $output;  }  else {    drupal_not_found();  }}
<?php// $Id$/** * @file user-profile-category.tpl.php * Default theme implementation to present profile categories (groups of * profile items). * * Categories are defined when configuring user profile fields for the site. * It can also be defined by modules. All profile items for a category will be * output through the $profile_items variable. * * @see user-profile-item.tpl.php *      where each profile item is rendered. It is implemented as a definition *      list by default. * @see user-profile.tpl.php *      where all items and categories are collected and printed out. * * Available variables: * - $title: Category title for the group of items. * - $profile_items: All the items for the group rendered through *   user-profile-item.tpl.php. * - $attributes: HTML attributes. Usually renders classes. * * @see template_preprocess_user_profile_category() */?><?php if ($title) : ?>  <h3><?php print $title; ?></h3><?php endif; ?><dl<?php print $attributes; ?>>  <?php print $profile_items; ?></dl>
<?php// $Id$/** * @file block.tpl.php * * Theme implementation to display a block. * * Available variables: * - $block->subject: Block title. * - $block->content: Block content. * - $block->module: Module that generated the block. * - $block->delta: This is a numeric id connected to each module. * - $block->region: The block region embedding the current block. * * Helper variables: * - $block_zebra: Outputs 'odd' and 'even' dependent on each block region. * - $zebra: Same output as $block_zebra but independent of any block region. * - $block_id: Counter dependent on each block region. * - $id: Same output as $block_id but independent of any block region. * - $is_front: Flags true when presented in the front page. * - $logged_in: Flags true when the current user is a logged-in member. * - $is_admin: Flags true when the current user is an administrator. * * @see template_preprocess() * @see template_preprocess_block() */?><div id="block-<?php print $block->module .'-'. $block->delta; ?>" class="block block-<?php print $block->module ?>"><?php if ($block->subject): ?>  <h2><?php print $block->subject ?></h2><?php endif;?>  <div class="content">    <?php print $block->content ?>  </div></div>
<?php// $Id$/** * @file * Code required only for the update status settings form. *//** * Form builder for the update settings tab. */function update_settings() {  $form = array();  $notify_emails = variable_get('update_notify_emails', array());  $form['update_notify_emails'] = array(    '#type' => 'textarea',    '#title' => t('E-mail addresses to notify when updates are available'),    '#rows' => 4,    '#default_value' => implode("\n", $notify_emails),    '#description' => t('Whenever your site checks for available updates and finds new releases, it can notify a list of users via e-mail. Put each address on a separate line. If blank, no e-mails will be sent.'),  );  $form['update_check_frequency'] = array(    '#type' => 'radios',    '#title' => t('Check for updates'),    '#default_value' => variable_get('update_check_frequency', 1),    '#options' => array(      '1' => t('Daily'),      '7' => t('Weekly'),    ),    '#description' => t('Select how frequently you want to automatically check for new releases of your currently installed modules and themes.'),  );  $form['update_notification_threshold'] = array(    '#type' => 'radios',    '#title' => t('E-mail notification threshold'),    '#default_value' => variable_get('update_notification_threshold', 'all'),    '#options' => array(      'all' => t('All newer versions'),      'security' => t('Only security updates'),    ),    '#description' => t('You can choose to send e-mail only if a security update is available, or to be notified about all newer versions. If there are updates available of Drupal core or any of your installed modules and themes, your site will always print a message on the <a href="@status_report">status report</a> page, and will also display an error message on administration pages if there is a security update.', array('@status_report' => url('admin/reports/status')))  );  $form = system_settings_form($form);  // Custom valiation callback for the email notification setting.  $form['#validate'][] = 'update_settings_validate';  // We need to call our own submit callback first, not the one from  // system_settings_form(), so that we can process and save the emails.  unset($form['#submit']);  return $form;}/** * Validation callback for the settings form. * * Validates the email addresses and ensures the field is formatted correctly. */function update_settings_validate($form, &$form_state) {  if (!empty($form_state['values']['update_notify_emails'])) {    $valid = array();    $invalid = array();    foreach (explode("\n", trim($form_state['values']['update_notify_emails'])) as $email) {      $email = trim($email);      if (!empty($email)) {        if (valid_email_address($email)) {          $valid[] = $email;        }        else {          $invalid[] = $email;        }      }    }    if (empty($invalid)) {      $form_state['notify_emails'] = $valid;    }    elseif (count($invalid) == 1) {      form_set_error('update_notify_emails', t('%email is not a valid e-mail address.', array('%email' => reset($invalid))));    }    else {      form_set_error('update_notify_emails', t('%emails are not valid e-mail addresses.', array('%emails' => implode(', ', $invalid))));    }  }}/** * Submit handler for the settings tab. */function update_settings_submit($form, $form_state) {  $op = $form_state['values']['op'];  if ($op == t('Reset to defaults')) {    unset($form_state['notify_emails']);  }  else {    if (empty($form_state['notify_emails'])) {      variable_del('update_notify_emails');    }    else {      variable_set('update_notify_emails', $form_state['notify_emails']);    }    unset($form_state['notify_emails']);    unset($form_state['values']['update_notify_emails']);  }  system_settings_form_submit($form, $form_state);}
<?php// $Id$$info = array(  // Pre-defined color schemes.  'schemes' => array(    '#0072b9,#027ac6,#2385c2,#5ab5ee,#494949' => t('Blue Lagoon (Default)'),    '#464849,#2f416f,#2a2b2d,#5d6779,#494949' => t('Ash'),    '#55c0e2,#000000,#085360,#007e94,#696969' => t('Aquamarine'),    '#d5b048,#6c420e,#331900,#971702,#494949' => t('Belgian Chocolate'),    '#3f3f3f,#336699,#6598cb,#6598cb,#000000' => t('Bluemarine'),    '#d0cb9a,#917803,#efde01,#e6fb2d,#494949' => t('Citrus Blast'),    '#0f005c,#434f8c,#4d91ff,#1a1575,#000000' => t('Cold Day'),    '#c9c497,#0c7a00,#03961e,#7be000,#494949' => t('Greenbeam'),    '#ffe23d,#a9290a,#fc6d1d,#a30f42,#494949' => t('Mediterrano'),    '#788597,#3f728d,#a9adbc,#d4d4d4,#707070' => t('Mercury'),    '#5b5fa9,#5b5faa,#0a2352,#9fa8d5,#494949' => t('Nocturnal'),    '#7db323,#6a9915,#b5d52a,#7db323,#191a19' => t('Olivia'),    '#12020b,#1b1a13,#f391c6,#f41063,#898080' => t('Pink Plastic'),    '#b7a0ba,#c70000,#a1443a,#f21107,#515d52' => t('Shiny Tomato'),    '#18583d,#1b5f42,#34775a,#52bf90,#2d2d2d' => t('Teal Top'),  ),  // Images to copy over.  'copy' => array(    'images/menu-collapsed.gif',    'images/menu-collapsed-rtl.gif',    'images/menu-expanded.gif',    'images/menu-leaf.gif',  ),  // CSS files (excluding @import) to rewrite with new color scheme.  'css' => array(    'style.css',  ),  // Coordinates of gradient (x, y, width, height).  'gradient' => array(0, 37, 760, 121),  // Color areas to fill (x, y, width, height).  'fill' => array(    'base' => array(0, 0, 760, 568),    'link' => array(107, 533, 41, 23),  ),  // Coordinates of all the theme slices (x, y, width, height)  // with their filename as used in the stylesheet.  'slices' => array(    'images/body.png'                      => array(0, 37, 1, 280),    'images/bg-bar.png'                    => array(202, 530, 76, 14),    'images/bg-bar-white.png'              => array(202, 506, 76, 14),    'images/bg-tab.png'                    => array(107, 533, 41, 23),    'images/bg-navigation.png'             => array(0, 0, 7, 37),    'images/bg-content-left.png'           => array(40, 117, 50, 352),    'images/bg-content-right.png'          => array(510, 117, 50, 352),    'images/bg-content.png'                => array(299, 117, 7, 200),    'images/bg-navigation-item.png'        => array(32, 37, 17, 12),    'images/bg-navigation-item-hover.png'  => array(54, 37, 17, 12),    'images/gradient-inner.png'            => array(646, 307, 112, 42),    'logo.png'                             => array(622, 51, 64, 73),    'screenshot.png'                       => array(0, 37, 400, 240),  ),  // Reference color used for blending. Matches the base.png's colors.  'blend_target' => '#ffffff',  // Preview files.  'preview_image' => 'color/preview.png',  'preview_css' => 'color/preview.css',  // Base file for image generation.  'base_image' => 'color/base.png',);
<?php// $Id$?>  <div class="block block-<?php print $block->module; ?>" id="block-<?php print $block->module; ?>-<?php print $block->delta; ?>">    <h2 class="title"><?php print $block->subject; ?></h2>    <div class="content"><?php print $block->content; ?></div> </div>
<?php// $Id$/** * @file forum-submitted.tpl.php * Default theme implementation to format a simple string indicated when and * by whom a topic was submitted. * * Available variables: * * - $author: The author of the post. * - $time: How long ago the post was created. * - $topic: An object with the raw data of the post. Unsafe, be sure *   to clean this data before printing. * * @see template_preprocess_forum_submitted() * @see theme_forum_submitted() */?><?php if ($time): ?>  <?php print t(  '@time ago<br />by !author', array(    '@time' => $time,    '!author' => $author,    )); ?><?php else: ?>  <?php print t('n/a'); ?><?php endif; ?>
<?php// $Id$/** * @file * PHP page for handling incoming XML-RPC requests from clients. */include_once './includes/bootstrap.inc';drupal_bootstrap(DRUPAL_BOOTSTRAP_FULL);include_once './includes/xmlrpc.inc';include_once './includes/xmlrpcs.inc';xmlrpc_server(module_invoke_all('xmlrpc'));
<?php// $Id$/** * @file * Administrative page for handling updates from one Drupal version to another. * * Point your browser to "http://www.example.com/update.php" and follow the * instructions. * * If you are not logged in as administrator, you will need to modify the access * check statement inside your settings.php file. After finishing the upgrade, * be sure to open settings.php again, and change it back to its original state! *//** * Global flag to identify update.php run, and so avoid various unwanted * operations, such as hook_init() and hook_exit() invokes, css/js preprocessing * and translation, and solve some theming issues. This flag is checked on several * places in Drupal code (not just update.php). */define('MAINTENANCE_MODE', 'update');/** * Add a column to a database using syntax appropriate for PostgreSQL. * Save result of SQL commands in $ret array. * * Note: when you add a column with NOT NULL and you are not sure if there are * already rows in the table, you MUST also add DEFAULT. Otherwise PostgreSQL * won't work when the table is not empty, and db_add_column() will fail. * To have an empty string as the default, you must use: 'default' => "''" * in the $attributes array. If NOT NULL and DEFAULT are set the PostgreSQL * version will set values of the added column in old rows to the * DEFAULT value. * * @param $ret *   Array to which results will be added. * @param $table *   Name of the table, without {} * @param $column *   Name of the column * @param $type *   Type of column * @param $attributes *   Additional optional attributes. Recognized attributes: *     not null => TRUE|FALSE *     default  => NULL|FALSE|value (the value must be enclosed in '' marks) * @return *   nothing, but modifies $ret parameter. */function db_add_column(&$ret, $table, $column, $type, $attributes = array()) {  if (array_key_exists('not null', $attributes) and $attributes['not null']) {    $not_null = 'NOT NULL';  }  if (array_key_exists('default', $attributes)) {    if (is_null($attributes['default'])) {      $default_val = 'NULL';      $default = 'default NULL';    }    elseif ($attributes['default'] === FALSE) {      $default = '';    }    else {      $default_val = "$attributes[default]";      $default = "default $attributes[default]";    }  }  $ret[] = update_sql("ALTER TABLE {". $table ."} ADD $column $type");  if (!empty($default)) {    $ret[] = update_sql("ALTER TABLE {". $table ."} ALTER $column SET $default");  }  if (!empty($not_null)) {    if (!empty($default)) {      $ret[] = update_sql("UPDATE {". $table ."} SET $column = $default_val");    }    $ret[] = update_sql("ALTER TABLE {". $table ."} ALTER $column SET NOT NULL");  }}/** * Change a column definition using syntax appropriate for PostgreSQL. * Save result of SQL commands in $ret array. * * Remember that changing a column definition involves adding a new column * and dropping an old one. This means that any indices, primary keys and * sequences from serial-type columns are dropped and might need to be * recreated. * * @param $ret *   Array to which results will be added. * @param $table *   Name of the table, without {} * @param $column *   Name of the column to change * @param $column_new *   New name for the column (set to the same as $column if you don't want to change the name) * @param $type *   Type of column * @param $attributes *   Additional optional attributes. Recognized attributes: *     not null => TRUE|FALSE *     default  => NULL|FALSE|value (with or without '', it won't be added) * @return *   nothing, but modifies $ret parameter. */function db_change_column(&$ret, $table, $column, $column_new, $type, $attributes = array()) {  if (array_key_exists('not null', $attributes) and $attributes['not null']) {    $not_null = 'NOT NULL';  }  if (array_key_exists('default', $attributes)) {    if (is_null($attributes['default'])) {      $default_val = 'NULL';      $default = 'default NULL';    }    elseif ($attributes['default'] === FALSE) {      $default = '';    }    else {      $default_val = "$attributes[default]";      $default = "default $attributes[default]";    }  }  $ret[] = update_sql("ALTER TABLE {". $table ."} RENAME $column TO ". $column ."_old");  $ret[] = update_sql("ALTER TABLE {". $table ."} ADD $column_new $type");  $ret[] = update_sql("UPDATE {". $table ."} SET $column_new = ". $column ."_old");  if ($default) { $ret[] = update_sql("ALTER TABLE {". $table ."} ALTER $column_new SET $default"); }  if ($not_null) { $ret[] = update_sql("ALTER TABLE {". $table ."} ALTER $column_new SET NOT NULL"); }  $ret[] = update_sql("ALTER TABLE {". $table ."} DROP ". $column ."_old");}/** * Perform one update and store the results which will later be displayed on * the finished page. * * An update function can force the current and all later updates for this * module to abort by returning a $ret array with an element like: * $ret['#abort'] = array('success' => FALSE, 'query' => 'What went wrong'); * The schema version will not be updated in this case, and all the * aborted updates will continue to appear on update.php as updates that * have not yet been run. * * @param $module *   The module whose update will be run. * @param $number *   The update number to run. * @param $context *   The batch context array */function update_do_one($module, $number, &$context) {  // If updates for this module have been aborted  // in a previous step, go no further.  if (!empty($context['results'][$module]['#abort'])) {    return;  }  $function = $module .'_update_'. $number;  if (function_exists($function)) {    $ret = $function($context['sandbox']);  }  if (isset($ret['#finished'])) {    $context['finished'] = $ret['#finished'];    unset($ret['#finished']);  }  if (!isset($context['results'][$module])) {    $context['results'][$module] = array();  }  if (!isset($context['results'][$module][$number])) {    $context['results'][$module][$number] = array();  }  $context['results'][$module][$number] = array_merge($context['results'][$module][$number], $ret);  if (!empty($ret['#abort'])) {    $context['results'][$module]['#abort'] = TRUE;  }  // Record the schema update if it was completed successfully.  if ($context['finished'] == 1 && empty($context['results'][$module]['#abort'])) {    drupal_set_installed_schema_version($module, $number);  }  $context['message'] = 'Updating '. check_plain($module) .' module';}function update_selection_page() {  $output = '<p>The version of Drupal you are updating from has been automatically detected. You can select a different version, but you should not need to.</p>';  $output .= '<p>Click Update to start the update process.</p>';  drupal_set_title('Drupal database update');  $output .= drupal_get_form('update_script_selection_form');  update_task_list('select');  return $output;}function update_script_selection_form() {  $form = array();  $form['start'] = array(    '#tree' => TRUE,    '#type' => 'fieldset',    '#title' => 'Select versions',    '#collapsible' => TRUE,    '#collapsed' => TRUE,  );  // Ensure system.module's updates appear first  $form['start']['system'] = array();  $modules = drupal_get_installed_schema_version(NULL, FALSE, TRUE);  foreach ($modules as $module => $schema_version) {    $updates = drupal_get_schema_versions($module);    // Skip incompatible module updates completely, otherwise test schema versions.    if (!update_check_incompatibility($module) && $updates !== FALSE && $schema_version >= 0) {      // module_invoke returns NULL for nonexisting hooks, so if no updates      // are removed, it will == 0.      $last_removed = module_invoke($module, 'update_last_removed');      if ($schema_version < $last_removed) {        $form['start'][$module] = array(          '#value'  => '<em>'. $module .'</em> module can not be updated. Its schema version is '. $schema_version .'. Updates up to and including '. $last_removed .' have been removed in this release. In order to update <em>'. $module .'</em> module, you will first <a href="http://drupal.org/upgrade">need to upgrade</a> to the last version in which these updates were available.',          '#prefix' => '<div class="warning">',          '#suffix' => '</div>',        );        $form['start']['#collapsed'] = FALSE;        continue;      }      $updates = drupal_map_assoc($updates);      $updates[] = 'No updates available';      $default = $schema_version;      foreach (array_keys($updates) as $update) {        if ($update > $schema_version) {          $default = $update;          break;        }      }      $form['start'][$module] = array(        '#type' => 'select',        '#title' => $module .' module',        '#default_value' => $default,        '#options' => $updates,      );    }  }  $form['has_js'] = array(    '#type' => 'hidden',    '#default_value' => FALSE,  );  $form['submit'] = array(    '#type' => 'submit',    '#value' => 'Update',  );  return $form;}function update_batch() {  global $base_url;  $operations = array();  // Set the installed version so updates start at the correct place.  foreach ($_POST['start'] as $module => $version) {    drupal_set_installed_schema_version($module, $version - 1);    $updates = drupal_get_schema_versions($module);    $max_version = max($updates);    if ($version <= $max_version) {      foreach ($updates as $update) {        if ($update >= $version) {          $operations[] = array('update_do_one', array($module, $update));        }      }    }  }  $batch = array(    'operations' => $operations,    'title' => 'Updating',    'init_message' => 'Starting updates',    'error_message' => 'An unrecoverable error has occurred. You can find the error message below. It is advised to copy it to the clipboard for reference.',    'finished' => 'update_finished',  );  batch_set($batch);  batch_process($base_url .'/update.php?op=results', $base_url .'/update.php');}function update_finished($success, $results, $operations) {  // clear the caches in case the data has been updated.  drupal_flush_all_caches();  $_SESSION['update_results'] = $results;  $_SESSION['update_success'] = $success;  $_SESSION['updates_remaining'] = $operations;}function update_results_page() {  drupal_set_title('Drupal database update');  // NOTE: we can't use l() here because the URL would point to 'update.php?q=admin'.  $links[] = '<a href="'. base_path() .'">Main page</a>';  $links[] = '<a href="'. base_path() .'?q=admin">Administration pages</a>';  update_task_list();  // Report end result  if (module_exists('dblog')) {    $log_message = ' All errors have been <a href="'. base_path() .'?q=admin/reports/dblog">logged</a>.';  }  else {    $log_message = ' All errors have been logged.';  }  if ($_SESSION['update_success']) {    $output = '<p>Updates were attempted. If you see no failures below, you may proceed happily to the <a href="'. base_path() .'?q=admin">administration pages</a>. Otherwise, you may need to update your database manually.'. $log_message .'</p>';  }  else {    list($module, $version) = array_pop(reset($_SESSION['updates_remaining']));    $output = '<p class="error">The update process was aborted prematurely while running <strong>update #'. $version .' in '. $module .'.module</strong>.'. $log_message;    if (module_exists('dblog')) {      $output .= ' You may need to check the <code>watchdog</code> database table manually.';    }    $output .= '</p>';  }  if (!empty($GLOBALS['update_free_access'])) {    $output .= "<p><strong>Reminder: don't forget to set the <code>\$update_free_access</code> value in your <code>settings.php</code> file back to <code>FALSE</code>.</strong></p>";  }  $output .= theme('item_list', $links);  // Output a list of queries executed  if (!empty($_SESSION['update_results'])) {    $output .= '<div id="update-results">';    $output .= '<h2>The following queries were executed</h2>';    foreach ($_SESSION['update_results'] as $module => $updates) {      $output .= '<h3>'. $module .' module</h3>';      foreach ($updates as $number => $queries) {        if ($number != '#abort') {          $output .= '<h4>Update #'. $number .'</h4>';          $output .= '<ul>';          foreach ($queries as $query) {            if ($query['success']) {              $output .= '<li class="success">'. $query['query'] .'</li>';            }            else {              $output .= '<li class="failure"><strong>Failed:</strong> '. $query['query'] .'</li>';            }          }          if (!count($queries)) {            $output .= '<li class="none">No queries</li>';          }        }        $output .= '</ul>';      }    }    $output .= '</div>';  }  unset($_SESSION['update_results']);  unset($_SESSION['update_success']);  return $output;}function update_info_page() {  // Change query-strings on css/js files to enforce reload for all users.  _drupal_flush_css_js();  // Flush the cache of all data for the update status module.  if (db_table_exists('cache_update')) {    cache_clear_all('*', 'cache_update', TRUE);  }  update_task_list('info');  drupal_set_title('Drupal database update');  $token = drupal_get_token('update');  $output = '<p>Use this utility to update your database whenever a new release of Drupal or a module is installed.</p><p>For more detailed information, see the <a href="http://drupal.org/node/258">Installation and upgrading handbook</a>. If you are unsure what these terms mean you should probably contact your hosting provider.</p>';  $output .= "<ol>\n";  $output .= "<li><strong>Back up your database</strong>. This process will change your database values and in case of emergency you may need to revert to a backup.</li>\n";  $output .= "<li><strong>Back up your code</strong>. Hint: when backing up module code, do not leave that backup in the 'modules' or 'sites/*/modules' directories as this may confuse Drupal's auto-discovery mechanism.</li>\n";  $output .= '<li>Put your site into <a href="'. base_path() .'?q=admin/settings/site-maintenance">maintenance mode</a>.</li>'."\n";  $output .= "<li>Install your new files in the appropriate location, as described in the handbook.</li>\n";  $output .= "</ol>\n";  $output .= "<p>When you have performed the steps above, you may proceed.</p>\n";  $output .= '<form method="post" action="update.php?op=selection&amp;token='. $token .'"><p><input type="submit" value="Continue" /></p></form>';  $output .= "\n";  return $output;}function update_access_denied_page() {  drupal_set_title('Access denied');  return '<p>Access denied. You are not authorized to access this page. Please log in as the admin user (the first user you created). If you cannot log in, you will have to edit <code>settings.php</code> to bypass this access check. To do this:</p><ol> <li>With a text editor find the settings.php file on your system. From the main Drupal directory that you installed all the files into, go to <code>sites/your_site_name</code> if such directory exists, or else to <code>sites/default</code> which applies otherwise.</li> <li>There is a line inside your settings.php file that says <code>$update_free_access = FALSE;</code>. Change it to <code>$update_free_access = TRUE;</code>.</li> <li>As soon as the update.php script is done, you must change the settings.php file back to its original form with <code>$update_free_access = FALSE;</code>.</li> <li>To avoid having this problem in future, remember to log in to your website as the admin user (the user you first created) before you backup your database at the beginning of the update process.</li></ol>';}/** * Create the batch table. * * This is part of the Drupal 5.x to 6.x migration. */function update_create_batch_table() {  // If batch table exists, update is not necessary  if (db_table_exists('batch')) {    return;  }  $schema['batch'] = array(    'fields' => array(      'bid'       => array('type' => 'serial', 'unsigned' => TRUE, 'not null' => TRUE),      'token'     => array('type' => 'varchar', 'length' => 64, 'not null' => TRUE),      'timestamp' => array('type' => 'int', 'not null' => TRUE),      'batch'     => array('type' => 'text', 'not null' => FALSE, 'size' => 'big')    ),    'primary key' => array('bid'),    'indexes' => array('token' => array('token')),  );  $ret = array();  db_create_table($ret, 'batch', $schema['batch']);  return $ret;}/** * Disable anything in the {system} table that is not compatible with the * current version of Drupal core. */function update_fix_compatibility() {  $ret = array();  $incompatible = array();  $query = db_query("SELECT name, type, status FROM {system} WHERE status = 1 AND type IN ('module','theme')");  while ($result = db_fetch_object($query)) {    if (update_check_incompatibility($result->name, $result->type)) {      $incompatible[] = $result->name;    }  }  if (!empty($incompatible)) {    $ret[] = update_sql("UPDATE {system} SET status = 0 WHERE name IN ('". implode("','", $incompatible) ."')");  }  return $ret;}/** * Helper function to test compatibility of a module or theme. */function update_check_incompatibility($name, $type = 'module') {  static $themes, $modules;  // Store values of expensive functions for future use.  if (empty($themes) || empty($modules)) {    $themes = _system_theme_data();    $modules = module_rebuild_cache();  }  if ($type == 'module' && isset($modules[$name])) {    $file = $modules[$name];  }  else if ($type == 'theme' && isset($themes[$name])) {    $file = $themes[$name];  }  if (!isset($file)      || !isset($file->info['core'])      || $file->info['core'] != DRUPAL_CORE_COMPATIBILITY      || version_compare(phpversion(), $file->info['php']) < 0) {    return TRUE;  }  return FALSE;}/** * Perform Drupal 5.x to 6.x updates that are required for update.php * to function properly. * * This function runs when update.php is run the first time for 6.x, * even before updates are selected or performed.  It is important * that if updates are not ultimately performed that no changes are * made which make it impossible to continue using the prior version. * Just adding columns is safe.  However, renaming the * system.description column to owner is not.  Therefore, we add the * system.owner column and leave it to system_update_6008() to copy * the data from description and remove description. The same for * renaming locales_target.locale to locales_target.language, which * will be finished by locale_update_6002(). */function update_fix_d6_requirements() {  $ret = array();  if (drupal_get_installed_schema_version('system') < 6000 && !variable_get('update_d6_requirements', FALSE)) {    $spec = array('type' => 'int', 'size' => 'small', 'default' => 0, 'not null' => TRUE);    db_add_field($ret, 'cache', 'serialized', $spec);    db_add_field($ret, 'cache_filter', 'serialized', $spec);    db_add_field($ret, 'cache_page', 'serialized', $spec);    db_add_field($ret, 'cache_menu', 'serialized', $spec);    db_add_field($ret, 'system', 'info', array('type' => 'text'));    db_add_field($ret, 'system', 'owner', array('type' => 'varchar', 'length' => 255, 'not null' => TRUE, 'default' => ''));    if (db_table_exists('locales_target')) {      db_add_field($ret, 'locales_target', 'language', array('type' => 'varchar', 'length' => 12, 'not null' => TRUE, 'default' => ''));    }    if (db_table_exists('locales_source')) {      db_add_field($ret, 'locales_source', 'textgroup', array('type' => 'varchar', 'length' => 255, 'not null' => TRUE, 'default' => 'default'));      db_add_field($ret, 'locales_source', 'version', array('type' => 'varchar', 'length' => 20, 'not null' => TRUE, 'default' => 'none'));    }    variable_set('update_d6_requirements', TRUE);    // Create the cache_block table. See system_update_6027() for more details.    $schema['cache_block'] = array(      'fields' => array(        'cid'        => array('type' => 'varchar', 'length' => 255, 'not null' => TRUE, 'default' => ''),        'data'       => array('type' => 'blob', 'not null' => FALSE, 'size' => 'big'),        'expire'     => array('type' => 'int', 'not null' => TRUE, 'default' => 0),        'created'    => array('type' => 'int', 'not null' => TRUE, 'default' => 0),        'headers'    => array('type' => 'text', 'not null' => FALSE),        'serialized' => array('type' => 'int', 'size' => 'small', 'not null' => TRUE, 'default' => 0)      ),      'indexes' => array('expire' => array('expire')),      'primary key' => array('cid'),    );    db_create_table($ret, 'cache_block', $schema['cache_block']);  }  return $ret;}/** * Add the update task list to the current page. */function update_task_list($active = NULL) {  // Default list of tasks.  $tasks = array(    'info' => 'Overview',    'select' => 'Select updates',    'run' => 'Run updates',    'finished' => 'Review log',  );  drupal_set_content('left', theme('task_list', $tasks, $active));}/** * Check update requirements and report any errors. */function update_check_requirements() {  // Check the system module requirements only.  $requirements = module_invoke('system', 'requirements', 'update');  $severity = drupal_requirements_severity($requirements);  // If there are issues, report them.  if ($severity != REQUIREMENT_OK) {    foreach ($requirements as $requirement) {      if (isset($requirement['severity']) && $requirement['severity'] != REQUIREMENT_OK) {        $message = isset($requirement['description']) ? $requirement['description'] : '';        if (isset($requirement['value']) && $requirement['value']) {          $message .= ' (Currently using '. $requirement['title'] .' '. $requirement['value'] .')';        }        drupal_set_message($message, 'warning');      }    }  }}// Some unavoidable errors happen because the database is not yet up-to-date.// Our custom error handler is not yet installed, so we just suppress them.ini_set('display_errors', FALSE);require_once './includes/bootstrap.inc';// We only load DRUPAL_BOOTSTRAP_CONFIGURATION for the update requirements// check to avoid reaching the PHP memory limit.$op = isset($_REQUEST['op']) ? $_REQUEST['op'] : '';if (empty($op)) {  // Minimum load of components.  drupal_bootstrap(DRUPAL_BOOTSTRAP_CONFIGURATION);  require_once './includes/install.inc';  require_once './includes/file.inc';  require_once './modules/system/system.install';  // Load module basics.  include_once './includes/module.inc';  $module_list['system']['filename'] = 'modules/system/system.module';  $module_list['filter']['filename'] = 'modules/filter/filter.module';  module_list(TRUE, FALSE, FALSE, $module_list);  drupal_load('module', 'system');  drupal_load('module', 'filter');  // Set up $language, since the installer components require it.  drupal_init_language();  // Set up theme system for the maintenance page.  drupal_maintenance_theme();  // Check the update requirements for Drupal.  update_check_requirements();  // Display the warning messages (if any) in a dedicated maintenance page,  // or redirect to the update information page if no message.  $messages = drupal_set_message();  if (!empty($messages['warning'])) {    drupal_maintenance_theme();    print theme('update_page', '<form method="post" action="update.php?op=info"><input type="submit" value="Continue" /></form>', FALSE);    exit;  }  install_goto('update.php?op=info');}drupal_bootstrap(DRUPAL_BOOTSTRAP_FULL);drupal_maintenance_theme();// This must happen *after* drupal_bootstrap(), since it calls// variable_(get|set), which only works after a full bootstrap.update_create_batch_table();// Turn error reporting back on. From now on, only fatal errors (which are// not passed through the error handler) will cause a message to be printed.ini_set('display_errors', TRUE);// Access check:if (!empty($update_free_access) || $user->uid == 1) {  include_once './includes/install.inc';  include_once './includes/batch.inc';  drupal_load_updates();  update_fix_d6_requirements();  update_fix_compatibility();  $op = isset($_REQUEST['op']) ? $_REQUEST['op'] : '';  switch ($op) {    case 'selection':      if (isset($_GET['token']) && $_GET['token'] == drupal_get_token('update')) {        $output = update_selection_page();        break;      }    case 'Update':      if (isset($_GET['token']) && $_GET['token'] == drupal_get_token('update')) {        update_batch();        break;      }    // update.php ops    case 'info':      $output = update_info_page();      break;    case 'results':      $output = update_results_page();      break;    // Regular batch ops : defer to batch processing API    default:      update_task_list('run');      $output = _batch_page();      break;  }}else {  $output = update_access_denied_page();}if (isset($output) && $output) {  // We defer the display of messages until all updates are done.  $progress_page = ($batch = batch_get()) && isset($batch['running']);  print theme('update_page', $output, !$progress_page);}
<?php// $Id$/** * @file search-block-form.tpl.php * Default theme implementation for displaying a search form within a block region. * * Available variables: * - $search_form: The complete search form ready for print. * - $search: Array of keyed search elements. Can be used to print each form *   element separately. * * Default keys within $search: * - $search['search_block_form']: Text input area wrapped in a div. * - $search['submit']: Form submit button. * - $search['hidden']: Hidden form elements. Used to validate forms when submitted. * * Since $search is keyed, a direct print of the form element is possible. * Modules can add to the search form so it is recommended to check for their * existance before printing. The default keys will always exist. * *   <?php if (isset($search['extra_field'])): ?> *     <div class="extra-field"> *       <?php print $search['extra_field']; ?> *     </div> *   <?php endif; ?> * * To check for all available data within $search, use the code below. * *   <?php print '<pre>'. check_plain(print_r($search, 1)) .'</pre>'; ?> * * @see template_preprocess_search_block_form() */?><div class="container-inline">  <?php print $search_form; ?></div>
<?php// $Id$// MySQLi specific install functions/** * Check if MySQLi is available. * * @return *  TRUE/FALSE */function mysqli_is_available() {  return function_exists('mysqli_connect');}/** * Check if we can connect to MySQL. * * @return *  TRUE/FALSE */function drupal_test_mysqli($url, &$success) {  if (!mysqli_is_available()) {    drupal_set_message(st('PHP MySQLi support not enabled.'), 'error');    return FALSE;  }  $url = parse_url($url);  // Decode url-encoded information in the db connection string.  $url['user'] = urldecode($url['user']);  $url['pass'] = isset($url['pass']) ? urldecode($url['pass']) : '';  $url['host'] = urldecode($url['host']);  $url['path'] = urldecode($url['path']);  $connection = mysqli_init();  @mysqli_real_connect($connection, $url['host'], $url['user'], $url['pass'], substr($url['path'], 1), $url['port'], NULL, MYSQLI_CLIENT_FOUND_ROWS);  if (mysqli_connect_errno() >= 2000 || mysqli_connect_errno() == 1045) {    drupal_set_message(st('Failed to connect to your MySQL database server. MySQL reports the following message: %error.<ul><li>Are you sure you have the correct username and password?</li><li>Are you sure that you have typed the correct database hostname?</li><li>Are you sure that the database server is running?</li></ul>For more help, see the <a href="http://drupal.org/node/258">Installation and upgrading handbook</a>. If you are unsure what these terms mean you should probably contact your hosting provider.', array('%error' => mysqli_connect_error())), 'error');    return FALSE;  }  // Test selecting the database.  if (mysqli_connect_errno() > 0) {    drupal_set_message(st('Failed to select your database on your MySQL database server, which means the connection username and password are valid, but there is a problem accessing your data. MySQL reports the following message: %error.<ul><li>Are you sure you have the correct database name?</li><li>Are you sure the database exists?</li><li>Are you sure the username has permission to access the database?</li></ul>For more help, see the <a href="http://drupal.org/node/258">Installation and upgrading handbook</a>. If you are unsure what these terms mean you should probably contact your hosting provider.', array('%error' => mysqli_connect_error())), 'error');    return FALSE;  }  $success = array('CONNECT');  // Test CREATE.  $query = 'CREATE TABLE drupal_install_test (id int NULL)';  $result = mysqli_query($connection, $query);  if ($error = mysqli_error($connection)) {    drupal_set_message(st('Failed to create a test table on your MySQL database server with the command %query. MySQL reports the following message: %error.<ul><li>Are you sure the configured username has the necessary MySQL permissions to create tables in the database?</li></ul>For more help, see the <a href="http://drupal.org/node/258">Installation and upgrading handbook</a>. If you are unsure what these terms mean you should probably contact your hosting provider.', array('%query' => $query, '%error' => $error)), 'error');    return FALSE;  }  $err = FALSE;  $success[] = 'SELECT';  $success[] = 'CREATE';  // Test INSERT.  $query = 'INSERT INTO drupal_install_test (id) VALUES (1)';  $result = mysqli_query($connection, $query);  if ($error = mysqli_error($connection)) {    drupal_set_message(st('Failed to insert a value into a test table on your MySQL database server. We tried inserting a value with the command %query and MySQL reported the following error: %error.', array('%query' => $query, '%error' => $error)), 'error');    $err = TRUE;  }  else {    $success[] = 'INSERT';  }  // Test UPDATE.  $query = 'UPDATE drupal_install_test SET id = 2';  $result = mysqli_query($connection, $query);  if ($error = mysqli_error($connection)) {    drupal_set_message(st('Failed to update a value in a test table on your MySQL database server. We tried updating a value with the command %query and MySQL reported the following error: %error.', array('%query' => $query, '%error' => $error)), 'error');    $err = TRUE;  }  else {    $success[] = 'UPDATE';  }  // Test DELETE.  $query = 'DELETE FROM drupal_install_test';  $result = mysqli_query($connection, $query);  if ($error = mysqli_error($connection)) {    drupal_set_message(st('Failed to delete a value from a test table on your MySQL database server. We tried deleting a value with the command %query and MySQL reported the following error: %error.', array('%query' => $query, '%error' => $error)), 'error');    $err = TRUE;  }  else {    $success[] = 'DELETE';  }  // Test DROP.  $query = 'DROP TABLE drupal_install_test';  $result = mysqli_query($connection, $query);  if ($error = mysqli_error($connection)) {    drupal_set_message(st('Failed to drop a test table from your MySQL database server. We tried dropping a table with the command %query and MySQL reported the following error %error.', array('%query' => $query, '%error' => $error)), 'error');    $err = TRUE;  }  else {    $success[] = 'DROP';  }  if ($err) {    return FALSE;  }  mysqli_close($connection);  return TRUE;}
<?php// $Id$/** * @file * Database interface code for MySQL database servers using the mysqli client libraries. mysqli is included in PHP 5 by default and allows developers to use the advanced features of MySQL 4.1.x, 5.0.x and beyond. */ // Maintainers of this file should consult: // http://www.php.net/manual/en/ref.mysqli.php/** * @ingroup database * @{ */// Include functions shared between mysql and mysqli.require_once './includes/database.mysql-common.inc';/** * Report database status. */function db_status_report($phase) {  $t = get_t();  $version = db_version();  $form['mysql'] = array(    'title' => $t('MySQL database'),    'value' => ($phase == 'runtime') ? l($version, 'admin/reports/status/sql') : $version,  );  if (version_compare($version, DRUPAL_MINIMUM_MYSQL) < 0) {    $form['mysql']['severity'] = REQUIREMENT_ERROR;    $form['mysql']['description'] = $t('Your MySQL Server is too old. Drupal requires at least MySQL %version.', array('%version' => DRUPAL_MINIMUM_MYSQL));  }  return $form;}/** * Returns the version of the database server currently in use. * * @return Database server version */function db_version() {  global $active_db;  list($version) = explode('-', mysqli_get_server_info($active_db));  return $version;}/** * Initialise a database connection. * * Note that mysqli does not support persistent connections. */function db_connect($url) {  // Check if MySQLi support is present in PHP  if (!function_exists('mysqli_init') && !extension_loaded('mysqli')) {    _db_error_page('Unable to use the MySQLi database because the MySQLi extension for PHP is not installed. Check your <code>php.ini</code> to see how you can enable it.');  }  $url = parse_url($url);  // Decode url-encoded information in the db connection string  $url['user'] = urldecode($url['user']);  // Test if database url has a password.  $url['pass'] = isset($url['pass']) ? urldecode($url['pass']) : '';  $url['host'] = urldecode($url['host']);  $url['path'] = urldecode($url['path']);  if (!isset($url['port'])) {    $url['port'] = NULL;  }  $connection = mysqli_init();  @mysqli_real_connect($connection, $url['host'], $url['user'], $url['pass'], substr($url['path'], 1), $url['port'], NULL, MYSQLI_CLIENT_FOUND_ROWS);  if (mysqli_connect_errno() > 0) {    _db_error_page(mysqli_connect_error());  }  // Force UTF-8.  mysqli_query($connection, 'SET NAMES "utf8"');  return $connection;}/** * Helper function for db_query(). */function _db_query($query, $debug = 0) {  global $active_db, $queries, $user;  if (variable_get('dev_query', 0)) {    list($usec, $sec) = explode(' ', microtime());    $timer = (float)$usec + (float)$sec;    // If devel.module query logging is enabled, prepend a comment with the username and calling function    // to the SQL string. This is useful when running mysql's SHOW PROCESSLIST to learn what exact    // code is issueing the slow query.    $bt = debug_backtrace();    // t() may not be available yet so we don't wrap 'Anonymous'    $name = $user->uid ? $user->name : variable_get('anonymous', 'Anonymous');    // str_replace() to prevent SQL injection via username or anonymous name.    $name = str_replace(array('*', '/'), '', $name);    $query = '/* '. $name .' : '. $bt[2]['function'] .' */ '. $query;  }  $result = mysqli_query($active_db, $query);  if (variable_get('dev_query', 0)) {    $query = $bt[2]['function'] ."\n". $query;    list($usec, $sec) = explode(' ', microtime());    $stop = (float)$usec + (float)$sec;    $diff = $stop - $timer;    $queries[] = array($query, $diff);  }  if ($debug) {    print '<p>query: '. $query .'<br />error:'. mysqli_error($active_db) .'</p>';  }  if (!mysqli_errno($active_db)) {    return $result;  }  else {    // Indicate to drupal_error_handler that this is a database error.    ${DB_ERROR} = TRUE;    trigger_error(check_plain(mysqli_error($active_db) ."\nquery: ". $query), E_USER_WARNING);    return FALSE;  }}/** * Fetch one result row from the previous query as an object. * * @param $result *   A database query result resource, as returned from db_query(). * @return *   An object representing the next row of the result, or FALSE. The attributes *   of this object are the table fields selected by the query. */function db_fetch_object($result) {  if ($result) {    $object = mysqli_fetch_object($result);    return isset($object) ? $object : FALSE;  }}/** * Fetch one result row from the previous query as an array. * * @param $result *   A database query result resource, as returned from db_query(). * @return *   An associative array representing the next row of the result, or FALSE. *   The keys of this object are the names of the table fields selected by the *   query, and the values are the field values for this result row. */function db_fetch_array($result) {  if ($result) {    $array = mysqli_fetch_array($result, MYSQLI_ASSOC);    return isset($array) ? $array : FALSE;  }}/** * Return an individual result field from the previous query. * * Only use this function if exactly one field is being selected; otherwise, * use db_fetch_object() or db_fetch_array(). * * @param $result *   A database query result resource, as returned from db_query(). * @return *   The resulting field or FALSE. */function db_result($result) {  if ($result && mysqli_num_rows($result) > 0) {    // The mysqli_fetch_row function has an optional second parameter $row    // but that can't be used for compatibility with Oracle, DB2, etc.    $array = mysqli_fetch_row($result);    return $array[0];  }  return FALSE;}/** * Determine whether the previous query caused an error. */function db_error() {  global $active_db;  return mysqli_errno($active_db);}/** * Determine the number of rows changed by the preceding query. */function db_affected_rows() {  global $active_db; /* mysqli connection resource */  return mysqli_affected_rows($active_db);}/** * Runs a limited-range query in the active database. * * Use this as a substitute for db_query() when a subset of the query is to be * returned. * User-supplied arguments to the query should be passed in as separate parameters * so that they can be properly escaped to avoid SQL injection attacks. * * @param $query *   A string containing an SQL query. * @param ... *   A variable number of arguments which are substituted into the query *   using printf() syntax. The query arguments can be enclosed in one *   array instead. *   Valid %-modifiers are: %s, %d, %f, %b (binary data, do not enclose *   in '') and %%. * *   NOTE: using this syntax will cast NULL and FALSE values to decimal 0, *   and TRUE values to decimal 1. * * @param $from *   The first result row to return. * @param $count *   The maximum number of result rows to return. * @return *   A database query result resource, or FALSE if the query was not executed *   correctly. */function db_query_range($query) {  $args = func_get_args();  $count = array_pop($args);  $from = array_pop($args);  array_shift($args);  $query = db_prefix_tables($query);  if (isset($args[0]) and is_array($args[0])) { // 'All arguments in one array' syntax    $args = $args[0];  }  _db_query_callback($args, TRUE);  $query = preg_replace_callback(DB_QUERY_REGEXP, '_db_query_callback', $query);  $query .= ' LIMIT '. (int)$from .', '. (int)$count;  return _db_query($query);}/** * Runs a SELECT query and stores its results in a temporary table. * * Use this as a substitute for db_query() when the results need to stored * in a temporary table. Temporary tables exist for the duration of the page * request. * User-supplied arguments to the query should be passed in as separate parameters * so that they can be properly escaped to avoid SQL injection attacks. * * Note that if you need to know how many results were returned, you should do * a SELECT COUNT(*) on the temporary table afterwards. db_affected_rows() does * not give consistent result across different database types in this case. * * @param $query *   A string containing a normal SELECT SQL query. * @param ... *   A variable number of arguments which are substituted into the query *   using printf() syntax. The query arguments can be enclosed in one *   array instead. *   Valid %-modifiers are: %s, %d, %f, %b (binary data, do not enclose *   in '') and %%. * *   NOTE: using this syntax will cast NULL and FALSE values to decimal 0, *   and TRUE values to decimal 1. * * @param $table *   The name of the temporary table to select into. This name will not be *   prefixed as there is no risk of collision. * @return *   A database query result resource, or FALSE if the query was not executed *   correctly. */function db_query_temporary($query) {  $args = func_get_args();  $tablename = array_pop($args);  array_shift($args);  $query = preg_replace('/^SELECT/i', 'CREATE TEMPORARY TABLE '. $tablename .' Engine=HEAP SELECT', db_prefix_tables($query));  if (isset($args[0]) and is_array($args[0])) { // 'All arguments in one array' syntax    $args = $args[0];  }  _db_query_callback($args, TRUE);  $query = preg_replace_callback(DB_QUERY_REGEXP, '_db_query_callback', $query);  return _db_query($query);}/** * Returns a properly formatted Binary Large Object value. * * @param $data *   Data to encode. * @return *  Encoded data. */function db_encode_blob($data) {  global $active_db;  return "'". mysqli_real_escape_string($active_db, $data) ."'";}/** * Returns text from a Binary Large OBject value. * * @param $data *   Data to decode. * @return *  Decoded data. */function db_decode_blob($data) {  return $data;}/** * Prepare user input for use in a database query, preventing SQL injection attacks. */function db_escape_string($text) {  global $active_db;  return mysqli_real_escape_string($active_db, $text);}/** * Lock a table. */function db_lock_table($table) {  db_query('LOCK TABLES {'. db_escape_table($table) .'} WRITE');}/** * Unlock all locked tables. */function db_unlock_tables() {  db_query('UNLOCK TABLES');}/** * Check if a table exists. */function db_table_exists($table) {  return (bool) db_fetch_object(db_query("SHOW TABLES LIKE '{". db_escape_table($table) ."}'"));}/** * Check if a column exists in the given table. */function db_column_exists($table, $column) {  return (bool) db_fetch_object(db_query("SHOW COLUMNS FROM {". db_escape_table($table) ."} LIKE '". db_escape_table($column) ."'"));}/** * @} End of "ingroup database". */
<?php// $Id$/** * @file * Admin page callbacks for the comment module. *//** * Menu callback; present an administrative comment listing. */function comment_admin($type = 'new') {  $edit = $_POST;  if (isset($edit['operation']) && ($edit['operation'] == 'delete') && isset($edit['comments']) && $edit['comments']) {    return drupal_get_form('comment_multiple_delete_confirm');  }  else {    return drupal_get_form('comment_admin_overview', $type, arg(4));  }}/** * Form builder; Builds the comment overview form for the admin. * * @param $type *   Not used. * @param $arg *   Current path's fourth component deciding the form type (Published comments/Approval queue) * @return *   The form structure. * @ingroup forms * @see comment_admin_overview_validate() * @see comment_admin_overview_submit() * @see theme_comment_admin_overview() */function comment_admin_overview($type = 'new', $arg) {  // build an 'Update options' form  $form['options'] = array(    '#type' => 'fieldset', '#title' => t('Update options'),    '#prefix' => '<div class="container-inline">', '#suffix' => '</div>'  );  $options = array();  foreach (comment_operations($arg == 'approval' ? 'publish' : 'unpublish') as $key => $value) {    $options[$key] = $value[0];  }  $form['options']['operation'] = array('#type' => 'select', '#options' => $options, '#default_value' => 'publish');  $form['options']['submit'] = array('#type' => 'submit', '#value' => t('Update'));  // load the comments that we want to display  $status = ($arg == 'approval') ? COMMENT_NOT_PUBLISHED : COMMENT_PUBLISHED;  $form['header'] = array('#type' => 'value', '#value' => array(    theme('table_select_header_cell'),    array('data' => t('Subject'), 'field' => 'subject'),    array('data' => t('Author'), 'field' => 'name'),    array('data' => t('Posted in'), 'field' => 'node_title'),    array('data' => t('Time'), 'field' => 'timestamp', 'sort' => 'desc'),    array('data' => t('Operations'))  ));  $result = pager_query('SELECT c.subject, c.nid, c.cid, c.comment, c.timestamp, c.status, c.name, c.homepage, u.name AS registered_name, u.uid, n.title as node_title FROM {comments} c INNER JOIN {users} u ON u.uid = c.uid INNER JOIN {node} n ON n.nid = c.nid WHERE c.status = %d'. tablesort_sql($form['header']['#value']), 50, 0, NULL, $status);  // build a table listing the appropriate comments  $destination = drupal_get_destination();  while ($comment = db_fetch_object($result)) {    $comments[$comment->cid] = '';    $comment->name = $comment->uid ? $comment->registered_name : $comment->name;    $form['subject'][$comment->cid] = array('#value' => l($comment->subject, 'node/'. $comment->nid, array('attributes' => array('title' => truncate_utf8($comment->comment, 128)), 'fragment' => 'comment-'. $comment->cid)));    $form['username'][$comment->cid] = array('#value' => theme('username', $comment));    $form['node_title'][$comment->cid] = array('#value' => l($comment->node_title, 'node/'. $comment->nid));    $form['timestamp'][$comment->cid] = array('#value' => format_date($comment->timestamp, 'small'));    $form['operations'][$comment->cid] = array('#value' => l(t('edit'), 'comment/edit/'. $comment->cid, array('query' => $destination)));  }  $form['comments'] = array('#type' => 'checkboxes', '#options' => isset($comments) ? $comments: array());  $form['pager'] = array('#value' => theme('pager', NULL, 50, 0));  return $form;}/** * Validate comment_admin_overview form submissions. * * We can't execute any 'Update options' if no comments were selected. */function comment_admin_overview_validate($form, &$form_state) {  $form_state['values']['comments'] = array_diff($form_state['values']['comments'], array(0));  if (count($form_state['values']['comments']) == 0) {    form_set_error('', t('Please select one or more comments to perform the update on.'));  }}/** * Process comment_admin_overview form submissions. * * Execute the chosen 'Update option' on the selected comments, such as * publishing, unpublishing or deleting. */function comment_admin_overview_submit($form, &$form_state) {  $operations = comment_operations();  if (!empty($operations[$form_state['values']['operation']][1])) {    // extract the appropriate database query operation    $query = $operations[$form_state['values']['operation']][1];    foreach ($form_state['values']['comments'] as $cid => $value) {      if ($value) {        // perform the update action, then refresh node statistics        db_query($query, $cid);        $comment = _comment_load($cid);        _comment_update_node_statistics($comment->nid);        // Allow modules to respond to the updating of a comment.        comment_invoke_comment($comment, $form_state['values']['operation']);        // Add an entry to the watchdog log.        watchdog('content', 'Comment: updated %subject.', array('%subject' => $comment->subject), WATCHDOG_NOTICE, l(t('view'), 'node/'. $comment->nid, array('fragment' => 'comment-'. $comment->cid)));      }    }    cache_clear_all();    drupal_set_message(t('The update has been performed.'));    $form_state['redirect'] = 'admin/content/comment';  }}/** * Theme the comment admin form. * * @param $form *   An associative array containing the structure of the form. * @ingroup themeable */function theme_comment_admin_overview($form) {  $output = drupal_render($form['options']);  if (isset($form['subject']) && is_array($form['subject'])) {    foreach (element_children($form['subject']) as $key) {      $row = array();      $row[] = drupal_render($form['comments'][$key]);      $row[] = drupal_render($form['subject'][$key]);      $row[] = drupal_render($form['username'][$key]);      $row[] = drupal_render($form['node_title'][$key]);      $row[] = drupal_render($form['timestamp'][$key]);      $row[] = drupal_render($form['operations'][$key]);      $rows[] = $row;    }  }  else {    $rows[] = array(array('data' => t('No comments available.'), 'colspan' => '6'));  }  $output .= theme('table', $form['header']['#value'], $rows);  if ($form['pager']['#value']) {    $output .= drupal_render($form['pager']);  }  $output .= drupal_render($form);  return $output;}/** * List the selected comments and verify that the admin really wants to delete * them. * * @param $form_state *   An associative array containing the current state of the form. * @return *   TRUE if the comments should be deleted, FALSE otherwise. * @ingroup forms * @see comment_multiple_delete_confirm_submit() */function comment_multiple_delete_confirm(&$form_state) {  $edit = $form_state['post'];  $form['comments'] = array('#prefix' => '<ul>', '#suffix' => '</ul>', '#tree' => TRUE);  // array_filter() returns only elements with actual values  $comment_counter = 0;  foreach (array_filter($edit['comments']) as $cid => $value) {    $comment = _comment_load($cid);    if (is_object($comment) && is_numeric($comment->cid)) {      $subject = db_result(db_query('SELECT subject FROM {comments} WHERE cid = %d', $cid));      $form['comments'][$cid] = array('#type' => 'hidden', '#value' => $cid, '#prefix' => '<li>', '#suffix' => check_plain($subject) .'</li>');      $comment_counter++;    }  }  $form['operation'] = array('#type' => 'hidden', '#value' => 'delete');  if (!$comment_counter) {    drupal_set_message(t('There do not appear to be any comments to delete or your selected comment was deleted by another administrator.'));    drupal_goto('admin/content/comment');  }  else {    return confirm_form($form,                        t('Are you sure you want to delete these comments and all their children?'),                        'admin/content/comment', t('This action cannot be undone.'),                        t('Delete comments'), t('Cancel'));  }}/** * Process comment_multiple_delete_confirm form submissions. * * Perform the actual comment deletion. */function comment_multiple_delete_confirm_submit($form, &$form_state) {  if ($form_state['values']['confirm']) {    foreach ($form_state['values']['comments'] as $cid => $value) {      $comment = _comment_load($cid);      _comment_delete_thread($comment);      _comment_update_node_statistics($comment->nid);    }    cache_clear_all();    drupal_set_message(t('The comments have been deleted.'));  }  $form_state['redirect'] = 'admin/content/comment';}/** * Menu callback; delete a comment. * * @param $cid *   The comment do be deleted. */function comment_delete($cid = NULL) {  $comment = db_fetch_object(db_query('SELECT c.*, u.name AS registered_name, u.uid FROM {comments} c INNER JOIN {users} u ON u.uid = c.uid WHERE c.cid = %d', $cid));  $comment->name = $comment->uid ? $comment->registered_name : $comment->name;  $output = '';  if (is_object($comment) && is_numeric($comment->cid)) {    $output = drupal_get_form('comment_confirm_delete', $comment);  }  else {    drupal_set_message(t('The comment no longer exists.'));  }  return $output;}/** * Form builder; Builds the confirmation form for deleting a single comment. * * @ingroup forms * @see comment_confirm_delete_submit() */function comment_confirm_delete(&$form_state, $comment) {  $form = array();  $form['#comment'] = $comment;  return confirm_form(    $form,    t('Are you sure you want to delete the comment %title?', array('%title' => $comment->subject)),    'node/'. $comment->nid,    t('Any replies to this comment will be lost. This action cannot be undone.'),    t('Delete'),    t('Cancel'),    'comment_confirm_delete');}/** * Process comment_confirm_delete form submissions. */function comment_confirm_delete_submit($form, &$form_state) {  drupal_set_message(t('The comment and all its replies have been deleted.'));  $comment = $form['#comment'];  // Delete comment and its replies.  _comment_delete_thread($comment);  _comment_update_node_statistics($comment->nid);  // Clear the cache so an anonymous user sees that his comment was deleted.  cache_clear_all();  $form_state['redirect'] = "node/$comment->nid";}/** * Perform the actual deletion of a comment and all its replies. * * @param $comment *   An associative array describing the comment to be deleted. */function _comment_delete_thread($comment) {  if (!is_object($comment) || !is_numeric($comment->cid)) {    watchdog('content', 'Cannot delete non-existent comment.', array(), WATCHDOG_WARNING);    return;  }  // Delete the comment:  db_query('DELETE FROM {comments} WHERE cid = %d', $comment->cid);  watchdog('content', 'Comment: deleted %subject.', array('%subject' => $comment->subject));  comment_invoke_comment($comment, 'delete');  // Delete the comment's replies  $result = db_query('SELECT c.*, u.name AS registered_name, u.uid FROM {comments} c INNER JOIN {users} u ON u.uid = c.uid WHERE pid = %d', $comment->cid);  while ($comment = db_fetch_object($result)) {    $comment->name = $comment->uid ? $comment->registered_name : $comment->name;    _comment_delete_thread($comment);  }}
<?php// $Id$/** * @file book-export-html.tpl.php * Default theme implementation for printed version of book outline. * * Available variables: * - $title: Top level node title. * - $head: Header tags. * - $language: Language code. e.g. "en" for english. * - $language_rtl: TRUE or FALSE depending on right to left language scripts. * - $base_url: URL to home page. * - $content: Nodes within the current outline rendered through *   book-node-export-html.tpl.php. * * @see template_preprocess_book_export_html() */?><!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.0 Transitional//EN" "http://www.w3.org/TR/xhtml1/DTD/xhtml1-transitional.dtd"><html xmlns="http://www.w3.org/1999/xhtml" lang="<?php print $language->language; ?>" xml:lang="<?php print $language->language; ?>">  <head>    <?php print $head; ?>    <title><?php print $title; ?></title>    <base href="<?php print $base_url; ?>" />    <link type="text/css" rel="stylesheet" href="misc/print.css" />    <?php if ($language_rtl): ?>      <link type="text/css" rel="stylesheet" href="misc/print-rtl.css" />    <?php endif; ?>  </head>  <body>    <?php    /**     * The given node is /embedded to its absolute depth in a top level     * section/. For example, a child node with depth 2 in the hierarchy is     * contained in (otherwise empty) &lt;div&gt; elements corresponding to     * depth 0 and depth 1. This is intended to support WYSIWYG output - e.g.,     * level 3 sections always look like level 3 sections, no matter their     * depth relative to the node selected to be exported as printer-friendly     * HTML.     */    $div_close = '';    ?>    <?php for ($i = 1; $i < $depth; $i++) : ?>      <div class="section-<?php print $i; ?>">      <?php $div_close .= '</div>'; ?>    <?php endfor; ?>    <?php print $contents; ?>    <?php print $div_close; ?>  </body></html>
<?php// $Id$?>  <div class="node<?php if ($sticky) { print " sticky"; } ?><?php if (!$status) { print " node-unpublished"; } ?>">    <?php if ($picture) {      print $picture;    }?>    <?php if ($page == 0) { ?><h2 class="title"><a href="<?php print $node_url?>"><?php print $title?></a></h2><?php }; ?>    <span class="submitted"><?php print $submitted?></span>    <div class="taxonomy"><?php print $terms?></div>    <div class="content"><?php print $content?></div>    <?php if ($links) { ?><div class="links">&raquo; <?php print $links?></div><?php }; ?>  </div>
<?php// $Id$/** * @file poll-results-block.tpl.php * Display the poll results in a block. * * Variables available: * - $title: The title of the poll. * - $results: The results of the poll. * - $votes: The total results in the poll. * - $links: Links in the poll. * - $nid: The nid of the poll * - $cancel_form: A form to cancel the user's vote, if allowed. * - $raw_links: The raw array of links. Should be run through theme('links') *   if used. * - $vote: The choice number of the current user's vote. * * @see template_preprocess_poll_results() */?><div class="poll">  <div class="title"><?php print $title ?></div>  <?php print $results ?>  <div class="total">    <?php print t('Total votes: @votes', array('@votes' => $votes)); ?>  </div></div><div class="links"><?php print $links; ?></div>
<?php// $Id$/** * @file book-node-export-html.tpl.php * Default theme implementation for rendering a single node in a printer * friendly outline. * * @see book-node-export-html.tpl.php * Where it is collected and printed out. * * Available variables: * - $depth: Depth of the current node inside the outline. * - $title: Node title. * - $content: Node content. * - $children: All the child nodes recursively rendered through this file. * * @see template_preprocess_book_node_export_html() */?><div id="node-<?php print $node->nid; ?>" class="section-<?php print $depth; ?>">  <h1 class="book-heading"><?php print $title; ?></h1>  <?php print $content; ?>  <?php print $children; ?></div>
<?php// $Id$/** * @file poll-results-block.tpl.php * Display the poll results in a block. * * Variables available: * - $title: The title of the poll. * - $results: The results of the poll. * - $votes: The total results in the poll. * - $links: Links in the poll. * - $nid: The nid of the poll * - $cancel_form: A form to cancel the user's vote, if allowed. * - $raw_links: The raw array of links. * - $vote: The choice number of the current user's vote. * * @see template_preprocess_poll_results() */?><div class="poll">  <?php print $results; ?>  <div class="total">    <?php print t('Total votes: @votes', array('@votes' => $votes)); ?>  </div>  <?php if (!empty($cancel_form)): ?>    <?php print $cancel_form; ?>  <?php endif; ?></div>
