<?php// $Id$/** * @file aggregator-summary-item.tpl.php * Default theme implementation to present a linked feed item for summaries. * * Available variables: * - $feed_url: Link to originating feed. * - $feed_title: Title of feed. * - $feed_age: Age of remote feed. * - $source_url: Link to remote source. * - $source_title: Locally set title for the source. * * @see template_preprocess() * @see template_preprocess_aggregator_summary_item() */?><a href="<?php print $feed_url; ?>"><?php print $feed_title; ?></a> <span class="age"><?php print $feed_age; ?></span><?php if ($source_url) : ?>, <span class="source"><a href="<?php print $source_url; ?>"><?php print $source_title; ?></a></span><?php endif; ?>
<?php// $Id$/** * A stub cache implementation to be used during the installation * process when database access is not yet available. Because Drupal's * caching system never requires that cached data be present, these * stub functions can short-circuit the process and sidestep the * need for any persistent storage. Obviously, using this cache * implementation during normal operations would have a negative impact * on performance. */function cache_get($key, $table = 'cache') {  return FALSE;}function cache_set($cid, $data, $table = 'cache', $expire = CACHE_PERMANENT, $headers = NULL) {  return;}function cache_clear_all($cid = NULL, $table = NULL, $wildcard = FALSE) {  return;}
<?php// $Id$/** * @file * Code required only for the update status settings form. *//** * Form builder for the update settings tab. */function update_settings() {  $form = array();  $notify_emails = variable_get('update_notify_emails', array());  $form['update_notify_emails'] = array(    '#type' => 'textarea',    '#title' => t('E-mail addresses to notify when updates are available'),    '#rows' => 4,    '#default_value' => implode("\n", $notify_emails),    '#description' => t('Whenever your site checks for available updates and finds new releases, it can notify a list of users via e-mail. Put each address on a separate line. If blank, no e-mails will be sent.'),  );  $form['update_check_frequency'] = array(    '#type' => 'radios',    '#title' => t('Check for updates'),    '#default_value' => variable_get('update_check_frequency', 1),    '#options' => array(      '1' => t('Daily'),      '7' => t('Weekly'),    ),    '#description' => t('Select how frequently you want to automatically check for new releases of your currently installed modules and themes.'),  );  $form['update_notification_threshold'] = array(    '#type' => 'radios',    '#title' => t('E-mail notification threshold'),    '#default_value' => variable_get('update_notification_threshold', 'all'),    '#options' => array(      'all' => t('All newer versions'),      'security' => t('Only security updates'),    ),    '#description' => t('You can choose to send e-mail only if a security update is available, or to be notified about all newer versions. If there are updates available of Drupal core or any of your installed modules and themes, your site will always print a message on the <a href="@status_report">status report</a> page, and will also display an error message on administration pages if there is a security update.', array('@status_report' => url('admin/reports/status')))  );  $form = system_settings_form($form);  // Custom valiation callback for the email notification setting.  $form['#validate'][] = 'update_settings_validate';  // We need to call our own submit callback first, not the one from  // system_settings_form(), so that we can process and save the emails.  unset($form['#submit']);  return $form;}/** * Validation callback for the settings form. * * Validates the email addresses and ensures the field is formatted correctly. */function update_settings_validate($form, &$form_state) {  if (!empty($form_state['values']['update_notify_emails'])) {    $valid = array();    $invalid = array();    foreach (explode("\n", trim($form_state['values']['update_notify_emails'])) as $email) {      $email = trim($email);      if (!empty($email)) {        if (valid_email_address($email)) {          $valid[] = $email;        }        else {          $invalid[] = $email;        }      }    }    if (empty($invalid)) {      $form_state['notify_emails'] = $valid;    }    elseif (count($invalid) == 1) {      form_set_error('update_notify_emails', t('%email is not a valid e-mail address.', array('%email' => reset($invalid))));    }    else {      form_set_error('update_notify_emails', t('%emails are not valid e-mail addresses.', array('%emails' => implode(', ', $invalid))));    }  }}/** * Submit handler for the settings tab. */function update_settings_submit($form, $form_state) {  $op = $form_state['values']['op'];  if ($op == t('Reset to defaults')) {    unset($form_state['notify_emails']);  }  else {    if (empty($form_state['notify_emails'])) {      variable_del('update_notify_emails');    }    else {      variable_set('update_notify_emails', $form_state['notify_emails']);    }    unset($form_state['notify_emails']);    unset($form_state['values']['update_notify_emails']);  }  system_settings_form_submit($form, $form_state);}
<?php// $Id$/** * Implementation of hook_install(). */function blogapi_install() {  // Create tables.  drupal_install_schema('blogapi');}/** * Implementation of hook_uninstall(). */function blogapi_uninstall() {  // Remove tables.  drupal_uninstall_schema('blogapi');}/** * Implementation of hook_schema(). */function blogapi_schema() {  //This table was introduced in Drupal 6.4  $schema['blogapi_files'] = array(    'description' => 'Stores information for files uploaded via the blogapi.',    'fields' => array(      'fid' => array(        'description' => 'Primary Key: Unique file ID.',        'type' => 'serial',      ),      'uid' => array(        'description' => 'The {users}.uid of the user who is associated with the file.',        'type' => 'int',        'unsigned' => TRUE,        'not null' => TRUE,        'default' => 0),      'filepath' => array(        'description' => 'Path of the file relative to Drupal root.',        'type' => 'varchar',        'length' => 255,        'not null' => TRUE,        'default' => ''),      'filesize' => array(        'description' => 'The size of the file in bytes.',        'type' => 'int',        'unsigned' => TRUE,        'not null' => TRUE,        'default' => 0),    ),    'primary key' => array('fid'),    'indexes' => array(      'uid' => array('uid'),    ),  );  return $schema;}/** * @defgroup updates-5.x-to-6.x Blog API updates from 5.x to 6.x * @{ *//** * Inform users about the new permission. */function blogapi_update_6000() {  drupal_set_message("Blog API module does not depend on blog module's permissions anymore, but provides its own 'administer content with blog api' permission instead. Until <a href=\"". url('admin/user/permissions', array('fragment' => 'module-blogapi')) .'">this permission is assigned</a> to at least one user role, only the site administrator will be able to use Blog API features.');  return array();}/** * Add blogapi_files table to enable size restriction for BlogAPI file uploads. * * This table was introduced in Drupal 6.4. */function blogapi_update_6001() {    $schema['blogapi_files'] = array(    'description' => 'Stores information for files uploaded via the blogapi.',    'fields' => array(      'fid' => array(        'description' => 'Primary Key: Unique file ID.',        'type' => 'serial',      ),      'uid' => array(        'description' => 'The {users}.uid of the user who is associated with the file.',        'type' => 'int',        'unsigned' => TRUE,        'not null' => TRUE,        'default' => 0),      'filepath' => array(        'description' => 'Path of the file relative to Drupal root.',        'type' => 'varchar',        'length' => 255,        'not null' => TRUE,        'default' => ''),      'filesize' => array(        'description' => 'The size of the file in bytes.',        'type' => 'int',        'unsigned' => TRUE,        'not null' => TRUE,        'default' => 0),    ),    'primary key' => array('fid'),    'indexes' => array(      'uid' => array('uid'),    ),  );  $ret = array();  if (!db_table_exists('blogapi_files')) {    db_create_table($ret, 'blogapi_files', $schema['blogapi_files']);  }  return $ret;}/** * @} End of "defgroup updates-5.x-to-6.x" * The next series of updates should start at 7000. */
<?php// $Id$/** * @file search-result.tpl.php * Default theme implementation for displaying a single search result. * * This template renders a single search result and is collected into * search-results.tpl.php. This and the parent template are * dependent to one another sharing the markup for definition lists. * * Available variables: * - $url: URL of the result. * - $title: Title of the result. * - $snippet: A small preview of the result. Does not apply to user searches. * - $info: String of all the meta information ready for print. Does not apply *   to user searches. * - $info_split: Contains same data as $info, split into a keyed array. * - $type: The type of search, e.g., "node" or "user". * * Default keys within $info_split: * - $info_split['type']: Node type. * - $info_split['user']: Author of the node linked to users profile. Depends *   on permission. * - $info_split['date']: Last update of the node. Short formatted. * - $info_split['comment']: Number of comments output as "% comments", % *   being the count. Depends on comment.module. * - $info_split['upload']: Number of attachments output as "% attachments", % *   being the count. Depends on upload.module. * * Since $info_split is keyed, a direct print of the item is possible. * This array does not apply to user searches so it is recommended to check * for their existance before printing. The default keys of 'type', 'user' and * 'date' always exist for node searches. Modules may provide other data. * *   <?php if (isset($info_split['comment'])) : ?> *     <span class="info-comment"> *       <?php print $info_split['comment']; ?> *     </span> *   <?php endif; ?> * * To check for all available data within $info_split, use the code below. * *   <?php print '<pre>'. check_plain(print_r($info_split, 1)) .'</pre>'; ?> * * @see template_preprocess_search_result() */?><dt class="title">  <a href="<?php print $url; ?>"><?php print $title; ?></a></dt><dd>  <?php if ($snippet) : ?>    <p class="search-snippet"><?php print $snippet; ?></p>  <?php endif; ?>  <?php if ($info) : ?>  <p class="search-info"><?php print $info; ?></p>  <?php endif; ?></dd>
<?php// $Id$/** * @file forums.tpl.php * Default theme implementation to display a forum which may contain forum * containers as well as forum topics. * * Variables available: * - $links: An array of links that allow a user to post new forum topics. *   It may also contain a string telling a user they must log in in order *   to post. * - $forums: The forums to display (as processed by forum-list.tpl.php) * - $topics: The topics to display (as processed by forum-topic-list.tpl.php) * - $forums_defined: A flag to indicate that the forums are configured. * * @see template_preprocess_forums() * @see theme_forums() */?><?php if ($forums_defined): ?><div id="forum">  <?php print theme('links', $links); ?>  <?php print $forums; ?>  <?php print $topics; ?></div><?php endif; ?>
<?php// $Id$?>  <div class="node<?php if ($sticky) { print " sticky"; } ?><?php if (!$status) { print " node-unpublished"; } ?>">    <?php if ($picture) {      print $picture;    }?>    <?php if ($page == 0) { ?><h2 class="title"><a href="<?php print $node_url?>"><?php print $title?></a></h2><?php }; ?>    <span class="submitted"><?php print $submitted?></span>    <div class="taxonomy"><?php print $terms?></div>    <div class="content"><?php print $content?></div>    <?php if ($links) { ?><div class="links">&raquo; <?php print $links?></div><?php }; ?>  </div>
<?php// $Id$/** * @file book-all-books-block.tpl.php * Default theme implementation for rendering book outlines within a block. * This template is used only when the block is configured to "show block on * all pages" which presents Multiple independent books on all pages. * * Available variables: * - $book_menus: Array of book outlines rendered as an unordered list. It is *   keyed to the parent book ID which is also the ID of the parent node *   containing an entire outline. * * @see template_preprocess_book_all_books_block() */?><?php foreach ($book_menus as $book_id => $menu) : ?><div id="book-block-menu-<?php print $book_id; ?>" class="book-block-menu">  <?php print $menu; ?></div><?php endforeach; ?>
<?php// $Id$?>  <div class="block block-<?php print $block->module; ?>" id="block-<?php print $block->module; ?>-<?php print $block->delta; ?>">    <h2 class="title"><?php print $block->subject; ?></h2>    <div class="content"><?php print $block->content; ?></div> </div>
<?php// $Id$/** * @file * The PHP page that serves all page requests on a Drupal installation. * * The routines here dispatch control to the appropriate handler, which then * prints the appropriate page. * * All Drupal code is released under the GNU General Public License. * See COPYRIGHT.txt and LICENSE.txt. */require_once './includes/bootstrap.inc';drupal_bootstrap(DRUPAL_BOOTSTRAP_FULL);$return = menu_execute_active_handler();// Menu status constants are integers; page content is a string.if (is_int($return)) {  switch ($return) {    case MENU_NOT_FOUND:      drupal_not_found();      break;    case MENU_ACCESS_DENIED:      drupal_access_denied();      break;    case MENU_SITE_OFFLINE:      drupal_site_offline();      break;  }}elseif (isset($return)) {  // Print any value (including an empty string) except NULL or undefined:  print theme('page', $return);}drupal_page_footer();
<?php/* $Id$ */function color_requirements($phase) {  $requirements = array();  if ($phase == 'runtime') {    // Check GD library    if (function_exists('imagegd2')) {      $info = gd_info();      $requirements['gd'] = array(        'value' => $info['GD Version'],      );      // Check PNG support      if (function_exists('imagecreatefrompng')) {        $requirements['gd']['severity'] = REQUIREMENT_OK;      }      else {        $requirements['gd']['severity'] = REQUIREMENT_ERROR;        $requirements['gd']['description'] = t('The GD library for PHP is enabled, but was compiled without PNG support. Please check the <a href="@url">PHP image documentation</a> for information on how to correct this.', array('@url' => 'http://www.php.net/manual/en/ref.image.php'));      }    }    else {      $requirements['gd'] = array(        'value' => t('Not installed'),        'severity' => REQUIREMENT_ERROR,        'description' => t('The GD library for PHP is missing or outdated. Please check the <a href="@url">PHP image documentation</a> for information on how to correct this.', array('@url' => 'http://www.php.net/manual/en/ref.image.php')),      );    }    $requirements['gd']['title'] = t('GD library');  }  return $requirements;}
<?php// $Id$/** * @file * Admin page callbacks for the throttle module. *//** * Form builder; Configure the throttle system. * * @ingroup forms * @see system_settings_form() * @see throttle_admin_settings_validate() */function throttle_admin_settings() {  $probabilities = array(0 => '100%', 1 => '50%', 2 => '33.3%', 3 => '25%', 4 => '20%', 5 => '16.6%', 7 => '12.5%', 9 => '10%', 19 => '5%', 99 => '1%', 199 => '.5%', 399 => '.25%', 989 => '.1%');  $form['throttle_anonymous'] = array(    '#type' => 'textfield',    '#title' => t('Auto-throttle on anonymous users'),    '#default_value' => variable_get('throttle_anonymous', 0),    '#size' => 5,    '#maxlength' => 6,    '#description' => t('The congestion control throttle can be automatically enabled when the number of anonymous users currently visiting your site exceeds the specified threshold. For example, to start the throttle when your site has 250 anonymous users online at once, enter \'250\' in this field. Leave this value blank or set to "0" if you do not wish to auto-throttle on anonymous users. You can inspect the current number of anonymous users using the "Who\'s online" block.')  );  $form['throttle_user'] = array(    '#type' => 'textfield',    '#title' => t('Auto-throttle on authenticated users'),    '#default_value' => variable_get('throttle_user', 0),    '#size' => 5,    '#maxlength' => 6,    '#description' => t('The congestion control throttle can be automatically enabled when the number of authenticated users currently visiting your site exceeds the specified threshold. For example, to start the throttle when your site has 50 registered users online at once, enter \'50\' in this field. Leave this value blank or set to "0" if you do not wish to auto-throttle on authenticated users. You can inspect the current number of authenticated users using the "Who\'s online" block.')  );  $form['throttle_probability_limiter'] = array(    '#type' => 'select',    '#title' => t('Auto-throttle probability limiter'),    '#default_value' => variable_get('throttle_probability_limiter', 9),    '#options' => $probabilities,    '#description' => t('The auto-throttle probability limiter is an efficiency mechanism to statistically reduce the overhead of the auto-throttle. The limiter is expressed as a percentage of page views, so for example if set to the default of 10% we only perform the extra database queries to update the throttle status 1 out of every 10 page views. The busier your site, the lower you should set the limiter value.')  );  $form['#validate'] = array('throttle_admin_settings_validate');  return system_settings_form($form);}function throttle_admin_settings_validate($form, &$form_state) {  if (!is_numeric($form_state['values']['throttle_anonymous']) || $form_state['values']['throttle_anonymous'] < 0) {    form_set_error('throttle_anonymous', t("%value is not a valid auto-throttle setting. Please enter a positive numeric value.", array('%value' => $form_state['values']['throttle_anonymous'])));  }  if (!is_numeric($form_state['values']['throttle_user']) || $form_state['values']['throttle_user'] < 0) {    form_set_error('throttle_user', t("%value is not a valid auto-throttle setting. Please enter a positive numeric value.", array('%value' => $form_state['values']['throttle_user'])));  }}
<?php// $Id$/** * @file * PHP page for handling incoming XML-RPC requests from clients. */include_once './includes/bootstrap.inc';drupal_bootstrap(DRUPAL_BOOTSTRAP_FULL);include_once './includes/xmlrpc.inc';include_once './includes/xmlrpcs.inc';xmlrpc_server(module_invoke_all('xmlrpc'));
<?php// $Id$/** * @file user-profile.tpl.php * Default theme implementation to present all user profile data. * * This template is used when viewing a registered member's profile page, * e.g., example.com/user/123. 123 being the users ID. * * By default, all user profile data is printed out with the $user_profile * variable. If there is a need to break it up you can use $profile instead. * It is keyed to the name of each category or other data attached to the * account. If it is a category it will contain all the profile items. By * default $profile['summary'] is provided which contains data on the user's * history. Other data can be included by modules. $profile['user_picture'] is * available by default showing the account picture. * * Also keep in mind that profile items and their categories can be defined by * site administrators. They are also available within $profile. For example, * if a site is configured with a category of "contact" with * fields for of addresses, phone numbers and other related info, then doing a * straight print of $profile['contact'] will output everything in the * category. This is useful for altering source order and adding custom * markup for the group. * * To check for all available data within $profile, use the code below. * @code *   print '<pre>'. check_plain(print_r($profile, 1)) .'</pre>'; * @endcode * * Available variables: *   - $user_profile: All user profile data. Ready for print. *   - $profile: Keyed array of profile categories and their items or other data *     provided by modules. * * @see user-profile-category.tpl.php *   Where the html is handled for the group. * @see user-profile-item.tpl.php *   Where the html is handled for each item in the group. * @see template_preprocess_user_profile() */?><div class="profile">  <?php print $user_profile; ?></div>
<?php// $Id$/** * @file book-export-html.tpl.php * Default theme implementation for printed version of book outline. * * Available variables: * - $title: Top level node title. * - $head: Header tags. * - $language: Language code. e.g. "en" for english. * - $language_rtl: TRUE or FALSE depending on right to left language scripts. * - $base_url: URL to home page. * - $content: Nodes within the current outline rendered through *   book-node-export-html.tpl.php. * * @see template_preprocess_book_export_html() */?><!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.0 Transitional//EN" "http://www.w3.org/TR/xhtml1/DTD/xhtml1-transitional.dtd"><html xmlns="http://www.w3.org/1999/xhtml" lang="<?php print $language->language; ?>" xml:lang="<?php print $language->language; ?>">  <head>    <?php print $head; ?>    <title><?php print $title; ?></title>    <base href="<?php print $base_url; ?>" />    <link type="text/css" rel="stylesheet" href="misc/print.css" />    <?php if ($language_rtl): ?>      <link type="text/css" rel="stylesheet" href="misc/print-rtl.css" />    <?php endif; ?>  </head>  <body>    <?php    /**     * The given node is /embedded to its absolute depth in a top level     * section/. For example, a child node with depth 2 in the hierarchy is     * contained in (otherwise empty) &lt;div&gt; elements corresponding to     * depth 0 and depth 1. This is intended to support WYSIWYG output - e.g.,     * level 3 sections always look like level 3 sections, no matter their     * depth relative to the node selected to be exported as printer-friendly     * HTML.     */    $div_close = '';    ?>    <?php for ($i = 1; $i < $depth; $i++) : ?>      <div class="section-<?php print $i; ?>">      <?php $div_close .= '</div>'; ?>    <?php endfor; ?>    <?php print $contents; ?>    <?php print $div_close; ?>  </body></html>
<?php// $Id$/** * @file * Functions shared between mysql and mysqli database engines. *//** * Runs a basic query in the active database. * * User-supplied arguments to the query should be passed in as separate * parameters so that they can be properly escaped to avoid SQL injection * attacks. * * @param $query *   A string containing an SQL query. * @param ... *   A variable number of arguments which are substituted into the query *   using printf() syntax. Instead of a variable number of query arguments, *   you may also pass a single array containing the query arguments. * *   Valid %-modifiers are: %s, %d, %f, %b (binary data, do not enclose *   in '') and %%. * *   NOTE: using this syntax will cast NULL and FALSE values to decimal 0, *   and TRUE values to decimal 1. * * @return *   A database query result resource, or FALSE if the query was not *   executed correctly. */function db_query($query) {  $args = func_get_args();  array_shift($args);  $query = db_prefix_tables($query);  if (isset($args[0]) and is_array($args[0])) { // 'All arguments in one array' syntax    $args = $args[0];  }  _db_query_callback($args, TRUE);  $query = preg_replace_callback(DB_QUERY_REGEXP, '_db_query_callback', $query);  return _db_query($query);}/** * @ingroup schemaapi * @{ *//** * Generate SQL to create a new table from a Drupal schema definition. * * @param $name *   The name of the table to create. * @param $table *   A Schema API table definition array. * @return *   An array of SQL statements to create the table. */function db_create_table_sql($name, $table) {  if (empty($table['mysql_suffix'])) {    $table['mysql_suffix'] = "/*!40100 DEFAULT CHARACTER SET UTF8 */";  }  $sql = "CREATE TABLE {". $name ."} (\n";  // Add the SQL statement for each field.  foreach ($table['fields'] as $field_name => $field) {    $sql .= _db_create_field_sql($field_name, _db_process_field($field)) .", \n";  }  // Process keys & indexes.  $keys = _db_create_keys_sql($table);  if (count($keys)) {    $sql .= implode(", \n", $keys) .", \n";  }  // Remove the last comma and space.  $sql = substr($sql, 0, -3) ."\n) ";  $sql .= $table['mysql_suffix'];  return array($sql);}function _db_create_keys_sql($spec) {  $keys = array();  if (!empty($spec['primary key'])) {    $keys[] = 'PRIMARY KEY ('. _db_create_key_sql($spec['primary key']) .')';  }  if (!empty($spec['unique keys'])) {    foreach ($spec['unique keys'] as $key => $fields) {      $keys[] = 'UNIQUE KEY '. $key .' ('. _db_create_key_sql($fields) .')';    }  }  if (!empty($spec['indexes'])) {    foreach ($spec['indexes'] as $index => $fields) {      $keys[] = 'INDEX '. $index .' ('. _db_create_key_sql($fields) .')';    }  }  return $keys;}function _db_create_key_sql($fields) {  $ret = array();  foreach ($fields as $field) {    if (is_array($field)) {      $ret[] = $field[0] .'('. $field[1] .')';    }    else {      $ret[] = $field;    }  }  return implode(', ', $ret);}/** * Set database-engine specific properties for a field. * * @param $field *   A field description array, as specified in the schema documentation. */function _db_process_field($field) {  if (!isset($field['size'])) {    $field['size'] = 'normal';  }  // Set the correct database-engine specific datatype.  if (!isset($field['mysql_type'])) {    $map = db_type_map();    $field['mysql_type'] = $map[$field['type'] .':'. $field['size']];  }  if ($field['type'] == 'serial') {    $field['auto_increment'] = TRUE;  }  return $field;}/** * Create an SQL string for a field to be used in table creation or alteration. * * Before passing a field out of a schema definition into this function it has * to be processed by _db_process_field(). * * @param $name *    Name of the field. * @param $spec *    The field specification, as per the schema data structure format. */function _db_create_field_sql($name, $spec) {  $sql = "`". $name ."` ". $spec['mysql_type'];  if (in_array($spec['type'], array('varchar', 'char', 'text')) && isset($spec['length'])) {    $sql .= '('. $spec['length'] .')';  }  elseif (isset($spec['precision']) && isset($spec['scale'])) {    $sql .= '('. $spec['precision'] .', '. $spec['scale'] .')';  }  if (!empty($spec['unsigned'])) {    $sql .= ' unsigned';  }  if (!empty($spec['not null'])) {    $sql .= ' NOT NULL';  }  if (!empty($spec['auto_increment'])) {    $sql .= ' auto_increment';  }  if (isset($spec['default'])) {    if (is_string($spec['default'])) {      $spec['default'] = "'". $spec['default'] ."'";    }    $sql .= ' DEFAULT '. $spec['default'];  }  if (empty($spec['not null']) && !isset($spec['default'])) {    $sql .= ' DEFAULT NULL';  }  return $sql;}/** * This maps a generic data type in combination with its data size * to the engine-specific data type. */function db_type_map() {  // Put :normal last so it gets preserved by array_flip.  This makes  // it much easier for modules (such as schema.module) to map  // database types back into schema types.  $map = array(    'varchar:normal'  => 'VARCHAR',    'char:normal'     => 'CHAR',    'text:tiny'       => 'TINYTEXT',    'text:small'      => 'TINYTEXT',    'text:medium'     => 'MEDIUMTEXT',    'text:big'        => 'LONGTEXT',    'text:normal'     => 'TEXT',    'serial:tiny'     => 'TINYINT',    'serial:small'    => 'SMALLINT',    'serial:medium'   => 'MEDIUMINT',    'serial:big'      => 'BIGINT',    'serial:normal'   => 'INT',    'int:tiny'        => 'TINYINT',    'int:small'       => 'SMALLINT',    'int:medium'      => 'MEDIUMINT',    'int:big'         => 'BIGINT',    'int:normal'      => 'INT',    'float:tiny'      => 'FLOAT',    'float:small'     => 'FLOAT',    'float:medium'    => 'FLOAT',    'float:big'       => 'DOUBLE',    'float:normal'    => 'FLOAT',    'numeric:normal'  => 'DECIMAL',    'blob:big'        => 'LONGBLOB',    'blob:normal'     => 'BLOB',    'datetime:normal' => 'DATETIME',  );  return $map;}/** * Rename a table. * * @param $ret *   Array to which query results will be added. * @param $table *   The table to be renamed. * @param $new_name *   The new name for the table. */function db_rename_table(&$ret, $table, $new_name) {  $ret[] = update_sql('ALTER TABLE {'. $table .'} RENAME TO {'. $new_name .'}');}/** * Drop a table. * * @param $ret *   Array to which query results will be added. * @param $table *   The table to be dropped. */function db_drop_table(&$ret, $table) {  $ret[] = update_sql('DROP TABLE {'. $table .'}');}/** * Add a new field to a table. * * @param $ret *   Array to which query results will be added. * @param $table *   Name of the table to be altered. * @param $field *   Name of the field to be added. * @param $spec *   The field specification array, as taken from a schema definition. *   The specification may also contain the key 'initial', the newly *   created field will be set to the value of the key in all rows. *   This is most useful for creating NOT NULL columns with no default *   value in existing tables. * @param $keys_new *   Optional keys and indexes specification to be created on the *   table along with adding the field. The format is the same as a *   table specification but without the 'fields' element.  If you are *   adding a type 'serial' field, you MUST specify at least one key *   or index including it in this array. @see db_change_field for more *   explanation why. */function db_add_field(&$ret, $table, $field, $spec, $keys_new = array()) {  $fixnull = FALSE;  if (!empty($spec['not null']) && !isset($spec['default'])) {    $fixnull = TRUE;    $spec['not null'] = FALSE;  }  $query = 'ALTER TABLE {'. $table .'} ADD ';  $query .= _db_create_field_sql($field, _db_process_field($spec));  if (count($keys_new)) {    $query .= ', ADD '. implode(', ADD ', _db_create_keys_sql($keys_new));  }  $ret[] = update_sql($query);  if (isset($spec['initial'])) {    // All this because update_sql does not support %-placeholders.    $sql = 'UPDATE {'. $table .'} SET '. $field .' = '. db_type_placeholder($spec['type']);    $result = db_query($sql, $spec['initial']);    $ret[] = array('success' => $result !== FALSE, 'query' => check_plain($sql .' ('. $spec['initial'] .')'));  }  if ($fixnull) {    $spec['not null'] = TRUE;    db_change_field($ret, $table, $field, $field, $spec);  }}/** * Drop a field. * * @param $ret *   Array to which query results will be added. * @param $table *   The table to be altered. * @param $field *   The field to be dropped. */function db_drop_field(&$ret, $table, $field) {  $ret[] = update_sql('ALTER TABLE {'. $table .'} DROP '. $field);}/** * Set the default value for a field. * * @param $ret *   Array to which query results will be added. * @param $table *   The table to be altered. * @param $field *   The field to be altered. * @param $default *   Default value to be set. NULL for 'default NULL'. */function db_field_set_default(&$ret, $table, $field, $default) {  if ($default === NULL) {    $default = 'NULL';  }  else {    $default = is_string($default) ? "'$default'" : $default;  }  $ret[] = update_sql('ALTER TABLE {'. $table .'} ALTER COLUMN '. $field .' SET DEFAULT '. $default);}/** * Set a field to have no default value. * * @param $ret *   Array to which query results will be added. * @param $table *   The table to be altered. * @param $field *   The field to be altered. */function db_field_set_no_default(&$ret, $table, $field) {  $ret[] = update_sql('ALTER TABLE {'. $table .'} ALTER COLUMN '. $field .' DROP DEFAULT');}/** * Add a primary key. * * @param $ret *   Array to which query results will be added. * @param $table *   The table to be altered. * @param $fields *   Fields for the primary key. */function db_add_primary_key(&$ret, $table, $fields) {  $ret[] = update_sql('ALTER TABLE {'. $table .'} ADD PRIMARY KEY ('.    _db_create_key_sql($fields) .')');}/** * Drop the primary key. * * @param $ret *   Array to which query results will be added. * @param $table *   The table to be altered. */function db_drop_primary_key(&$ret, $table) {  $ret[] = update_sql('ALTER TABLE {'. $table .'} DROP PRIMARY KEY');}/** * Add a unique key. * * @param $ret *   Array to which query results will be added. * @param $table *   The table to be altered. * @param $name *   The name of the key. * @param $fields *   An array of field names. */function db_add_unique_key(&$ret, $table, $name, $fields) {  $ret[] = update_sql('ALTER TABLE {'. $table .'} ADD UNIQUE KEY '.    $name .' ('. _db_create_key_sql($fields) .')');}/** * Drop a unique key. * * @param $ret *   Array to which query results will be added. * @param $table *   The table to be altered. * @param $name *   The name of the key. */function db_drop_unique_key(&$ret, $table, $name) {  $ret[] = update_sql('ALTER TABLE {'. $table .'} DROP KEY '. $name);}/** * Add an index. * * @param $ret *   Array to which query results will be added. * @param $table *   The table to be altered. * @param $name *   The name of the index. * @param $fields *   An array of field names. */function db_add_index(&$ret, $table, $name, $fields) {  $query = 'ALTER TABLE {'. $table .'} ADD INDEX '. $name .' ('. _db_create_key_sql($fields) .')';  $ret[] = update_sql($query);}/** * Drop an index. * * @param $ret *   Array to which query results will be added. * @param $table *   The table to be altered. * @param $name *   The name of the index. */function db_drop_index(&$ret, $table, $name) {  $ret[] = update_sql('ALTER TABLE {'. $table .'} DROP INDEX '. $name);}/** * Change a field definition. * * IMPORTANT NOTE: To maintain database portability, you have to explicitly * recreate all indices and primary keys that are using the changed field. * * That means that you have to drop all affected keys and indexes with * db_drop_{primary_key,unique_key,index}() before calling db_change_field(). * To recreate the keys and indices, pass the key definitions as the * optional $keys_new argument directly to db_change_field(). * * For example, suppose you have: * @code * $schema['foo'] = array( *   'fields' => array( *     'bar' => array('type' => 'int', 'not null' => TRUE) *   ), *   'primary key' => array('bar') * ); * @endcode * and you want to change foo.bar to be type serial, leaving it as the * primary key.  The correct sequence is: * @code * db_drop_primary_key($ret, 'foo'); * db_change_field($ret, 'foo', 'bar', 'bar', *   array('type' => 'serial', 'not null' => TRUE), *   array('primary key' => array('bar'))); * @endcode * * The reasons for this are due to the different database engines: * * On PostgreSQL, changing a field definition involves adding a new field * and dropping an old one which* causes any indices, primary keys and * sequences (from serial-type fields) that use the changed field to be dropped. * * On MySQL, all type 'serial' fields must be part of at least one key * or index as soon as they are created.  You cannot use * db_add_{primary_key,unique_key,index}() for this purpose because * the ALTER TABLE command will fail to add the column without a key * or index specification.  The solution is to use the optional * $keys_new argument to create the key or index at the same time as * field. * * You could use db_add_{primary_key,unique_key,index}() in all cases * unless you are converting a field to be type serial. You can use * the $keys_new argument in all cases. * * @param $ret *   Array to which query results will be added. * @param $table *   Name of the table. * @param $field *   Name of the field to change. * @param $field_new *   New name for the field (set to the same as $field if you don't want to change the name). * @param $spec *   The field specification for the new field. * @param $keys_new *   Optional keys and indexes specification to be created on the *   table along with changing the field. The format is the same as a *   table specification but without the 'fields' element. */function db_change_field(&$ret, $table, $field, $field_new, $spec, $keys_new = array()) {  $sql = 'ALTER TABLE {'. $table .'} CHANGE `'. $field .'` '.    _db_create_field_sql($field_new, _db_process_field($spec));  if (count($keys_new)) {    $sql .= ', ADD '. implode(', ADD ', _db_create_keys_sql($keys_new));  }  $ret[] = update_sql($sql);}/** * Returns the last insert id. * * @param $table *   The name of the table you inserted into. * @param $field *   The name of the autoincrement field. */function db_last_insert_id($table, $field) {  return db_result(db_query('SELECT LAST_INSERT_ID()'));}
<?php// $Id$/** * @file box.tpl.php * * Theme implementation to display a box. * * Available variables: * - $title: Box title. * - $content: Box content. * * @see template_preprocess() */?><div class="box"><?php if ($title): ?>  <h2><?php print $title ?></h2><?php endif; ?>  <div class="content"><?php print $content ?></div></div>
<?php// $Id$/** * @file profile-block.tpl.php * Default theme implementation for displaying a users profile within a * block. It only shows in relation to a node displayed as a full page. * * Available variables: * - $picture: Image configured for the account linking to the users page. * - $profile: Keyed array of all profile fields that have a value. * * Each $field in $profile contains: * - $field->title: Title of the profile field. * - $field->value: Value of the profile field. * - $field->type: Type of the profile field, i.e., checkbox, textfield, *   textarea, selection, list, url or date. * * Since $profile is keyed, a direct print of the field is possible. Not * all accounts may have a value for a profile so do a check first. If a field * of "last_name" was set for the site, the following can be used. * *  <?php if (isset($profile['last_name'])): ?> *    <div class="field last-name"> *      <?php print $profile['last_name']->title; ?>:<br /> *      <?php print $profile['last_name']->value; ?> *    </div> *  <?php endif; ?> * * @see template_preprocess_profile_block() */?><?php print $picture; ?><?php foreach ($profile as $field) : ?>  <p>    <?php if ($field->type != 'checkbox') : ?>      <strong><?php print $field->title; ?></strong><br />    <?php endif; ?>    <?php print $field->value; ?>  </p><?php endforeach; ?>
<?php// $Id$/** * @file search-theme-form.tpl.php * Default theme implementation for displaying a search form directly into the * theme layout. Not to be confused with the search block or the search page. * * Available variables: * - $search_form: The complete search form ready for print. * - $search: Array of keyed search elements. Can be used to print each form *   element separately. * * Default keys within $search: * - $search['search_theme_form']: Text input area wrapped in a div. * - $search['submit']: Form submit button. * - $search['hidden']: Hidden form elements. Used to validate forms when submitted. * * Since $search is keyed, a direct print of the form element is possible. * Modules can add to the search form so it is recommended to check for their * existance before printing. The default keys will always exist. * *   <?php if (isset($search['extra_field'])): ?> *     <div class="extra-field"> *       <?php print $search['extra_field']; ?> *     </div> *   <?php endif; ?> * * To check for all available data within $search, use the code below. * *   <?php print '<pre>'. check_plain(print_r($search, 1)) .'</pre>'; ?> * * @see template_preprocess_search_theme_form() */?><div id="search" class="container-inline">  <?php print $search_form; ?></div>
<?php// $Id$/** * Implementation of hook_install(). */function trigger_install() {  // Create tables.  drupal_install_schema('trigger');  // Do initial synchronization of actions in code and the database.  actions_synchronize(actions_list());}/** * Implementation of hook_uninstall(). */function trigger_uninstall() {  // Remove tables.  drupal_uninstall_schema('trigger');}/** * Implementation of hook_schema(). */function trigger_schema() {  $schema['trigger_assignments'] = array(    'description' => 'Maps trigger to hook and operation assignments from trigger.module.',    'fields' => array(      'hook' => array(        'type' => 'varchar',        'length' => 32,        'not null' => TRUE,        'default' => '',        'description' => 'Primary Key: The name of the internal Drupal hook upon which an action is firing; for example, nodeapi.',      ),      'op' => array(        'type' => 'varchar',        'length' => 32,        'not null' => TRUE,        'default' => '',        'description' => 'Primary Key: The specific operation of the hook upon which an action is firing: for example, presave.',      ),      'aid' => array(        'type' => 'varchar',        'length' => 255,        'not null' => TRUE,        'default' => '',        'description' => "Primary Key: Action's {actions}.aid.",      ),      'weight' => array(        'type' => 'int',        'not null' => TRUE,        'default' => 0,        'description' => 'The weight of the trigger assignment in relation to other triggers.',      ),    ),    'primary key' => array('hook', 'op', 'aid'),  );  return $schema;}
<?php// $Id$// Global variables to track parsing state$xrds_open_elements = array();$xrds_services = array();$xrds_current_service = array();/** * Main entry point for parsing XRDS documents */function xrds_parse($xml) {  global $xrds_services;  $parser = xml_parser_create_ns();  xml_set_element_handler($parser, '_xrds_element_start', '_xrds_element_end');  xml_set_character_data_handler($parser, '_xrds_cdata');  xml_parse($parser, $xml);  xml_parser_free($parser);  return $xrds_services;}/** * Parser callback functions */function _xrds_element_start(&$parser, $name, $attribs) {  global $xrds_open_elements;  $xrds_open_elements[] = _xrds_strip_namespace($name);}function _xrds_element_end(&$parser, $name) {  global $xrds_open_elements, $xrds_services, $xrds_current_service;  $name = _xrds_strip_namespace($name);  if ($name == 'SERVICE') {    if (in_array(OPENID_NS_2_0 .'/signon', $xrds_current_service['types']) ||        in_array(OPENID_NS_2_0 .'/server', $xrds_current_service['types'])) {      $xrds_current_service['version'] = 2;    }    elseif (in_array(OPENID_NS_1_1, $xrds_current_service['types']) ||            in_array(OPENID_NS_1_0, $xrds_current_service['types'])) {      $xrds_current_service['version'] = 1;    }    if (!empty($xrds_current_service['version'])) {      $xrds_services[] = $xrds_current_service;    }    $xrds_current_service = array();  }  array_pop($xrds_open_elements);}function _xrds_cdata(&$parser, $data) {  global $xrds_open_elements, $xrds_services, $xrds_current_service;  $path = strtoupper(implode('/', $xrds_open_elements));  switch ($path) {    case 'XRDS/XRD/SERVICE/TYPE':      $xrds_current_service['types'][] = $data;      break;    case 'XRDS/XRD/SERVICE/URI':      $xrds_current_service['uri'] = $data;      break;    case 'XRDS/XRD/SERVICE/DELEGATE':      $xrds_current_service['delegate'] = $data;      break;    case 'XRDS/XRD/SERVICE/LOCALID':      $xrds_current_service['localid'] = $data;      break;  }}function _xrds_strip_namespace($name) {  // Strip namespacing.  $pos = strrpos($name, ':');  if ($pos !== FALSE) {    $name = substr($name, $pos + 1, strlen($name));  }  return $name;}
