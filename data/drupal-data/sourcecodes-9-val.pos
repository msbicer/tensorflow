<?php// $Id$/** * @file user-picture.tpl.php * Default theme implementation to present an picture configured for the * user's account. * * Available variables: * - $picture: Image set by the user or the site's default. Will be linked *   depending on the viewer's permission to view the users profile page. * - $account: Array of account information. Potentially unsafe. Be sure to *   check_plain() before use. * * @see template_preprocess_user_picture() */?><div class="picture">  <?php print $picture; ?></div>
<?php// $Id$/** * @file forum-submitted.tpl.php * Default theme implementation to format a simple string indicated when and * by whom a topic was submitted. * * Available variables: * * - $author: The author of the post. * - $time: How long ago the post was created. * - $topic: An object with the raw data of the post. Unsafe, be sure *   to clean this data before printing. * * @see template_preprocess_forum_submitted() * @see theme_forum_submitted() */?><?php if ($time): ?>  <?php print t(  '@time ago<br />by !author', array(    '@time' => $time,    '!author' => $author,    )); ?><?php else: ?>  <?php print t('n/a'); ?><?php endif; ?>
<?php// $Id$/** * @file user-profile-item.tpl.php * Default theme implementation to present profile items (values from user * account profile fields or modules). * * This template is used to loop through and render each field configured * for the user's account. It can also be the data from modules. The output is * grouped by categories. * * @see user-profile-category.tpl.php *      for the parent markup. Implemented as a definition list by default. * @see user-profile.tpl.php *      where all items and categories are collected and printed out. * * Available variables: * - $title: Field title for the profile item. * - $value: User defined value for the profile item or data from a module. * - $attributes: HTML attributes. Usually renders classes. * * @see template_preprocess_user_profile_item() */?><dt<?php print $attributes; ?>><?php print $title; ?></dt><dd<?php print $attributes; ?>><?php print $value; ?></dd>
<?php// $Id$/** * @file aggregator-item.tpl.php * Default theme implementation to format an individual feed item for display * on the aggregator page. * * Available variables: * - $feed_url: URL to the originating feed item. * - $feed_title: Title of the feed item. * - $source_url: Link to the local source section. * - $source_title: Title of the remote source. * - $source_date: Date the feed was posted on the remote source. * - $content: Feed item content. * - $categories: Linked categories assigned to the feed. * * @see template_preprocess() * @see template_preprocess_aggregator_item() */?><div class="feed-item">  <h3 class="feed-item-title">    <a href="<?php print $feed_url; ?>"><?php print $feed_title; ?></a>  </h3>  <div class="feed-item-meta">  <?php if ($source_url) : ?>    <a href="<?php print $source_url; ?>" class="feed-item-source"><?php print $source_title; ?></a> -  <?php endif; ?>    <span class="feed-item-date"><?php print $source_date; ?></span>  </div><?php if ($content) : ?>  <div class="feed-item-body">    <?php print $content; ?>  </div><?php endif; ?><?php if ($categories) : ?>  <div class="feed-item-categories">    <?php print t('Categories'); ?>: <?php print implode(', ', $categories); ?>  </div><?php endif ;?></div>
<?php// $Id$/** * @file * Database interface code for MySQL database servers. *//** * @ingroup database * @{ */// Include functions shared between mysql and mysqli.require_once './includes/database.mysql-common.inc';/** * Report database status. */function db_status_report($phase) {  $t = get_t();  $version = db_version();  $form['mysql'] = array(    'title' => $t('MySQL database'),    'value' => ($phase == 'runtime') ? l($version, 'admin/reports/status/sql') : $version,  );  if (version_compare($version, DRUPAL_MINIMUM_MYSQL) < 0) {    $form['mysql']['severity'] = REQUIREMENT_ERROR;    $form['mysql']['description'] = $t('Your MySQL Server is too old. Drupal requires at least MySQL %version.', array('%version' => DRUPAL_MINIMUM_MYSQL));  }  return $form;}/** * Returns the version of the database server currently in use. * * @return Database server version */function db_version() {  list($version) = explode('-', mysql_get_server_info());  return $version;}/** * Initialize a database connection. */function db_connect($url) {  $url = parse_url($url);  // Check if MySQL support is present in PHP  if (!function_exists('mysql_connect')) {    _db_error_page('Unable to use the MySQL database because the MySQL extension for PHP is not installed. Check your <code>php.ini</code> to see how you can enable it.');  }  // Decode url-encoded information in the db connection string  $url['user'] = urldecode($url['user']);  // Test if database url has a password.  $url['pass'] = isset($url['pass']) ? urldecode($url['pass']) : '';  $url['host'] = urldecode($url['host']);  $url['path'] = urldecode($url['path']);  // Allow for non-standard MySQL port.  if (isset($url['port'])) {    $url['host'] = $url['host'] .':'. $url['port'];  }  // - TRUE makes mysql_connect() always open a new link, even if  //   mysql_connect() was called before with the same parameters.  //   This is important if you are using two databases on the same  //   server.  // - 2 means CLIENT_FOUND_ROWS: return the number of found  //   (matched) rows, not the number of affected rows.  $connection = @mysql_connect($url['host'], $url['user'], $url['pass'], TRUE, 2);  if (!$connection || !mysql_select_db(substr($url['path'], 1))) {    // Show error screen otherwise    _db_error_page(mysql_error());  }  // Force UTF-8.  mysql_query('SET NAMES "utf8"', $connection);  return $connection;}/** * Helper function for db_query(). */function _db_query($query, $debug = 0) {  global $active_db, $queries, $user;  if (variable_get('dev_query', 0)) {    list($usec, $sec) = explode(' ', microtime());    $timer = (float)$usec + (float)$sec;    // If devel.module query logging is enabled, prepend a comment with the username and calling function    // to the SQL string. This is useful when running mysql's SHOW PROCESSLIST to learn what exact    // code is issueing the slow query.    $bt = debug_backtrace();    // t() may not be available yet so we don't wrap 'Anonymous'.    $name = $user->uid ? $user->name : variable_get('anonymous', 'Anonymous');    // str_replace() to prevent SQL injection via username or anonymous name.    $name = str_replace(array('*', '/'), '', $name);    $query = '/* '. $name .' : '. $bt[2]['function'] .' */ '. $query;  }  $result = mysql_query($query, $active_db);  if (variable_get('dev_query', 0)) {    $query = $bt[2]['function'] ."\n". $query;    list($usec, $sec) = explode(' ', microtime());    $stop = (float)$usec + (float)$sec;    $diff = $stop - $timer;    $queries[] = array($query, $diff);  }  if ($debug) {    print '<p>query: '. $query .'<br />error:'. mysql_error($active_db) .'</p>';  }  if (!mysql_errno($active_db)) {    return $result;  }  else {    // Indicate to drupal_error_handler that this is a database error.    ${DB_ERROR} = TRUE;    trigger_error(check_plain(mysql_error($active_db) ."\nquery: ". $query), E_USER_WARNING);    return FALSE;  }}/** * Fetch one result row from the previous query as an object. * * @param $result *   A database query result resource, as returned from db_query(). * @return *   An object representing the next row of the result, or FALSE. The attributes *   of this object are the table fields selected by the query. */function db_fetch_object($result) {  if ($result) {    return mysql_fetch_object($result);  }}/** * Fetch one result row from the previous query as an array. * * @param $result *   A database query result resource, as returned from db_query(). * @return *   An associative array representing the next row of the result, or FALSE. *   The keys of this object are the names of the table fields selected by the *   query, and the values are the field values for this result row. */function db_fetch_array($result) {  if ($result) {    return mysql_fetch_array($result, MYSQL_ASSOC);  }}/** * Return an individual result field from the previous query. * * Only use this function if exactly one field is being selected; otherwise, * use db_fetch_object() or db_fetch_array(). * * @param $result *   A database query result resource, as returned from db_query(). * @return *   The resulting field or FALSE. */function db_result($result) {  if ($result && mysql_num_rows($result) > 0) {    // The mysql_fetch_row function has an optional second parameter $row    // but that can't be used for compatibility with Oracle, DB2, etc.    $array = mysql_fetch_row($result);    return $array[0];  }  return FALSE;}/** * Determine whether the previous query caused an error. */function db_error() {  global $active_db;  return mysql_errno($active_db);}/** * Determine the number of rows changed by the preceding query. */function db_affected_rows() {  global $active_db;  return mysql_affected_rows($active_db);}/** * Runs a limited-range query in the active database. * * Use this as a substitute for db_query() when a subset of the query is to be * returned. * User-supplied arguments to the query should be passed in as separate parameters * so that they can be properly escaped to avoid SQL injection attacks. * * @param $query *   A string containing an SQL query. * @param ... *   A variable number of arguments which are substituted into the query *   using printf() syntax. The query arguments can be enclosed in one *   array instead. *   Valid %-modifiers are: %s, %d, %f, %b (binary data, do not enclose *   in '') and %%. * *   NOTE: using this syntax will cast NULL and FALSE values to decimal 0, *   and TRUE values to decimal 1. * * @param $from *   The first result row to return. * @param $count *   The maximum number of result rows to return. * @return *   A database query result resource, or FALSE if the query was not executed *   correctly. */function db_query_range($query) {  $args = func_get_args();  $count = array_pop($args);  $from = array_pop($args);  array_shift($args);  $query = db_prefix_tables($query);  if (isset($args[0]) and is_array($args[0])) { // 'All arguments in one array' syntax    $args = $args[0];  }  _db_query_callback($args, TRUE);  $query = preg_replace_callback(DB_QUERY_REGEXP, '_db_query_callback', $query);  $query .= ' LIMIT '. (int)$from .', '. (int)$count;  return _db_query($query);}/** * Runs a SELECT query and stores its results in a temporary table. * * Use this as a substitute for db_query() when the results need to stored * in a temporary table. Temporary tables exist for the duration of the page * request. * User-supplied arguments to the query should be passed in as separate parameters * so that they can be properly escaped to avoid SQL injection attacks. * * Note that if you need to know how many results were returned, you should do * a SELECT COUNT(*) on the temporary table afterwards. db_affected_rows() does * not give consistent result across different database types in this case. * * @param $query *   A string containing a normal SELECT SQL query. * @param ... *   A variable number of arguments which are substituted into the query *   using printf() syntax. The query arguments can be enclosed in one *   array instead. *   Valid %-modifiers are: %s, %d, %f, %b (binary data, do not enclose *   in '') and %%. * *   NOTE: using this syntax will cast NULL and FALSE values to decimal 0, *   and TRUE values to decimal 1. * * @param $table *   The name of the temporary table to select into. This name will not be *   prefixed as there is no risk of collision. * @return *   A database query result resource, or FALSE if the query was not executed *   correctly. */function db_query_temporary($query) {  $args = func_get_args();  $tablename = array_pop($args);  array_shift($args);  $query = preg_replace('/^SELECT/i', 'CREATE TEMPORARY TABLE '. $tablename .' Engine=HEAP SELECT', db_prefix_tables($query));  if (isset($args[0]) and is_array($args[0])) { // 'All arguments in one array' syntax    $args = $args[0];  }  _db_query_callback($args, TRUE);  $query = preg_replace_callback(DB_QUERY_REGEXP, '_db_query_callback', $query);  return _db_query($query);}/** * Returns a properly formatted Binary Large OBject value. * * @param $data *   Data to encode. * @return *  Encoded data. */function db_encode_blob($data) {  global $active_db;  return "'". mysql_real_escape_string($data, $active_db) ."'";}/** * Returns text from a Binary Large Object value. * * @param $data *   Data to decode. * @return *  Decoded data. */function db_decode_blob($data) {  return $data;}/** * Prepare user input for use in a database query, preventing SQL injection attacks. */function db_escape_string($text) {  global $active_db;  return mysql_real_escape_string($text, $active_db);}/** * Lock a table. */function db_lock_table($table) {  db_query('LOCK TABLES {'. db_escape_table($table) .'} WRITE');}/** * Unlock all locked tables. */function db_unlock_tables() {  db_query('UNLOCK TABLES');}/** * Check if a table exists. */function db_table_exists($table) {  return (bool) db_fetch_object(db_query("SHOW TABLES LIKE '{". db_escape_table($table) ."}'"));}/** * Check if a column exists in the given table. */function db_column_exists($table, $column) {  return (bool) db_fetch_object(db_query("SHOW COLUMNS FROM {". db_escape_table($table) ."} LIKE '". db_escape_table($column) ."'"));}/** * @} End of "ingroup database". */
<?php// $Id$$info = array(  // Pre-defined color schemes.  'schemes' => array(    '#0072b9,#027ac6,#2385c2,#5ab5ee,#494949' => t('Blue Lagoon (Default)'),    '#464849,#2f416f,#2a2b2d,#5d6779,#494949' => t('Ash'),    '#55c0e2,#000000,#085360,#007e94,#696969' => t('Aquamarine'),    '#d5b048,#6c420e,#331900,#971702,#494949' => t('Belgian Chocolate'),    '#3f3f3f,#336699,#6598cb,#6598cb,#000000' => t('Bluemarine'),    '#d0cb9a,#917803,#efde01,#e6fb2d,#494949' => t('Citrus Blast'),    '#0f005c,#434f8c,#4d91ff,#1a1575,#000000' => t('Cold Day'),    '#c9c497,#0c7a00,#03961e,#7be000,#494949' => t('Greenbeam'),    '#ffe23d,#a9290a,#fc6d1d,#a30f42,#494949' => t('Mediterrano'),    '#788597,#3f728d,#a9adbc,#d4d4d4,#707070' => t('Mercury'),    '#5b5fa9,#5b5faa,#0a2352,#9fa8d5,#494949' => t('Nocturnal'),    '#7db323,#6a9915,#b5d52a,#7db323,#191a19' => t('Olivia'),    '#12020b,#1b1a13,#f391c6,#f41063,#898080' => t('Pink Plastic'),    '#b7a0ba,#c70000,#a1443a,#f21107,#515d52' => t('Shiny Tomato'),    '#18583d,#1b5f42,#34775a,#52bf90,#2d2d2d' => t('Teal Top'),  ),  // Images to copy over.  'copy' => array(    '../images/menu-collapsed.gif',    '../images/menu-collapsed-rtl.gif',    '../images/menu-expanded.gif',    '../images/menu-leaf.gif',  ),  // CSS files (excluding @import) to rewrite with new color scheme.  'css' => array(    '../style.css',  ),  // Coordinates of gradient (x, y, width, height).  'gradient' => array(0, 37, 760, 121),  // Color areas to fill (x, y, width, height).  'fill' => array(    'base' => array(0, 0, 760, 568),    'link' => array(107, 533, 41, 23),  ),  // Coordinates of all the theme slices (x, y, width, height)  // with their filename as used in the stylesheet.  'slices' => array(    '../images/body.png'                      => array(0, 37, 1, 280),    '../images/bg-bar.png'                    => array(202, 530, 76, 14),    '../images/bg-bar-white.png'              => array(202, 506, 76, 14),    '../images/bg-tab.png'                    => array(107, 533, 41, 23),    '../images/bg-navigation.png'             => array(0, 0, 7, 37),    '../images/bg-content-left.png'           => array(40, 117, 50, 352),    '../images/bg-content-right.png'          => array(510, 117, 50, 352),    '../images/bg-content.png'                => array(299, 117, 7, 200),    '../images/bg-navigation-item.png'        => array(32, 37, 17, 12),    '../images/bg-navigation-item-hover.png'  => array(54, 37, 17, 12),    '../images/gradient-inner.png'            => array(646, 307, 112, 42),    'logo.png'                                => array(622, 51, 64, 73),    'screenshot.png'                          => array(0, 37, 400, 240),  ),  // Reference color used for blending. Matches the base.png's colors.  'blend_target' => '#ffffff',  // Preview files.  'preview_image' => 'color/preview.png',  'preview_css' => '../color/preview.css',  // Base file for image generation.  'base_image' => 'color/base.png',);
<?php// $Id$/** * A stub cache implementation to be used during the installation * process when database access is not yet available. Because Drupal's * caching system never requires that cached data be present, these * stub functions can short-circuit the process and sidestep the * need for any persistent storage. Obviously, using this cache * implementation during normal operations would have a negative impact * on performance. */function cache_get($key, $table = 'cache') {  return FALSE;}function cache_set($cid, $data, $table = 'cache', $expire = CACHE_PERMANENT, $headers = NULL) {  return;}function cache_clear_all($cid = NULL, $table = NULL, $wildcard = FALSE) {  return;}
<?php// $Id$/** * @file aggregator-summary-item.tpl.php * Default theme implementation to present a linked feed item for summaries. * * Available variables: * - $feed_url: Link to originating feed. * - $feed_title: Title of feed. * - $feed_age: Age of remote feed. * - $source_url: Link to remote source. * - $source_title: Locally set title for the source. * * @see template_preprocess() * @see template_preprocess_aggregator_summary_item() */?><a href="<?php print $feed_url; ?>"><?php print $feed_title; ?></a> <span class="age"><?php print $feed_age; ?></span><?php if ($source_url) : ?>, <span class="source"><a href="<?php print $source_url; ?>"><?php print $source_title; ?></a></span><?php endif; ?>
<?php// $Id$/** * @file book-node-export-html.tpl.php * Default theme implementation for rendering a single node in a printer * friendly outline. * * @see book-node-export-html.tpl.php * Where it is collected and printed out. * * Available variables: * - $depth: Depth of the current node inside the outline. * - $title: Node title. * - $content: Node content. * - $children: All the child nodes recursively rendered through this file. * * @see template_preprocess_book_node_export_html() */?><div id="node-<?php print $node->nid; ?>" class="section-<?php print $depth; ?>">  <h1 class="book-heading"><?php print $title; ?></h1>  <?php print $content; ?>  <?php print $children; ?></div>
<?php// $Id$/** * @file user-profile-category.tpl.php * Default theme implementation to present profile categories (groups of * profile items). * * Categories are defined when configuring user profile fields for the site. * It can also be defined by modules. All profile items for a category will be * output through the $profile_items variable. * * @see user-profile-item.tpl.php *      where each profile item is rendered. It is implemented as a definition *      list by default. * @see user-profile.tpl.php *      where all items and categories are collected and printed out. * * Available variables: * - $title: Category title for the group of items. * - $profile_items: All the items for the group rendered through *   user-profile-item.tpl.php. * - $attributes: HTML attributes. Usually renders classes. * * @see template_preprocess_user_profile_category() */?><?php if ($title) : ?>  <h3><?php print $title; ?></h3><?php endif; ?><dl<?php print $attributes; ?>>  <?php print $profile_items; ?></dl>
<?php// $Id$/** * @file * User page callbacks for the statistics module. */function statistics_node_tracker() {  if ($node = node_load(arg(1))) {    $header = array(        array('data' => t('Time'), 'field' => 'a.timestamp', 'sort' => 'desc'),        array('data' => t('Referrer'), 'field' => 'a.url'),        array('data' => t('User'), 'field' => 'u.name'),        array('data' => t('Operations')));    $result = pager_query("SELECT a.aid, a.timestamp, a.url, a.uid, u.name FROM {accesslog} a LEFT JOIN {users} u ON a.uid = u.uid WHERE a.path = 'node/%d' OR a.path LIKE 'node/%d/%%'". tablesort_sql($header), 30, 0, NULL, $node->nid, $node->nid);    $rows = array();    while ($log = db_fetch_object($result)) {      $rows[] = array(        array('data' => format_date($log->timestamp, 'small'), 'class' => 'nowrap'),        _statistics_link($log->url),        theme('username', $log),        l(t('details'), "admin/reports/access/$log->aid"));    }    if (empty($rows)) {      $rows[] = array(array('data' => t('No statistics available.'), 'colspan' => 4));    }    drupal_set_title(check_plain($node->title));    $output = theme('table', $header, $rows);    $output .= theme('pager', NULL, 30, 0);    return $output;  }  else {    drupal_not_found();  }}function statistics_user_tracker() {  if ($account = user_load(array('uid' => arg(1)))) {    $header = array(        array('data' => t('Timestamp'), 'field' => 'timestamp', 'sort' => 'desc'),        array('data' => t('Page'), 'field' => 'path'),        array('data' => t('Operations')));    $result = pager_query('SELECT aid, timestamp, path, title FROM {accesslog} WHERE uid = %d'. tablesort_sql($header), 30, 0, NULL, $account->uid);    $rows = array();    while ($log = db_fetch_object($result)) {      $rows[] = array(        array('data' => format_date($log->timestamp, 'small'), 'class' => 'nowrap'),        _statistics_format_item($log->title, $log->path),        l(t('details'), "admin/reports/access/$log->aid"));    }    if (empty($rows)) {      $rows[] = array(array('data' => t('No statistics available.'), 'colspan' => 3));    }    drupal_set_title(check_plain($account->name));    $output = theme('table', $header, $rows);    $output .= theme('pager', NULL, 30, 0);    return $output;  }  else {    drupal_not_found();  }}
<?php// $Id$/** * Implementation of hook_install(). */function blogapi_install() {  // Create tables.  drupal_install_schema('blogapi');}/** * Implementation of hook_uninstall(). */function blogapi_uninstall() {  // Remove tables.  drupal_uninstall_schema('blogapi');}/** * Implementation of hook_schema(). */function blogapi_schema() {  //This table was introduced in Drupal 6.4  $schema['blogapi_files'] = array(    'description' => 'Stores information for files uploaded via the blogapi.',    'fields' => array(      'fid' => array(        'description' => 'Primary Key: Unique file ID.',        'type' => 'serial',      ),      'uid' => array(        'description' => 'The {users}.uid of the user who is associated with the file.',        'type' => 'int',        'unsigned' => TRUE,        'not null' => TRUE,        'default' => 0),      'filepath' => array(        'description' => 'Path of the file relative to Drupal root.',        'type' => 'varchar',        'length' => 255,        'not null' => TRUE,        'default' => ''),      'filesize' => array(        'description' => 'The size of the file in bytes.',        'type' => 'int',        'unsigned' => TRUE,        'not null' => TRUE,        'default' => 0),    ),    'primary key' => array('fid'),    'indexes' => array(      'uid' => array('uid'),    ),  );  return $schema;}/** * @defgroup updates-5.x-to-6.x Blog API updates from 5.x to 6.x * @{ *//** * Inform users about the new permission. */function blogapi_update_6000() {  drupal_set_message("Blog API module does not depend on blog module's permissions anymore, but provides its own 'administer content with blog api' permission instead. Until <a href=\"". url('admin/user/permissions', array('fragment' => 'module-blogapi')) .'">this permission is assigned</a> to at least one user role, only the site administrator will be able to use Blog API features.');  return array();}/** * Add blogapi_files table to enable size restriction for BlogAPI file uploads. * * This table was introduced in Drupal 6.4. */function blogapi_update_6001() {    $schema['blogapi_files'] = array(    'description' => 'Stores information for files uploaded via the blogapi.',    'fields' => array(      'fid' => array(        'description' => 'Primary Key: Unique file ID.',        'type' => 'serial',      ),      'uid' => array(        'description' => 'The {users}.uid of the user who is associated with the file.',        'type' => 'int',        'unsigned' => TRUE,        'not null' => TRUE,        'default' => 0),      'filepath' => array(        'description' => 'Path of the file relative to Drupal root.',        'type' => 'varchar',        'length' => 255,        'not null' => TRUE,        'default' => ''),      'filesize' => array(        'description' => 'The size of the file in bytes.',        'type' => 'int',        'unsigned' => TRUE,        'not null' => TRUE,        'default' => 0),    ),    'primary key' => array('fid'),    'indexes' => array(      'uid' => array('uid'),    ),  );  $ret = array();  if (!db_table_exists('blogapi_files')) {    db_create_table($ret, 'blogapi_files', $schema['blogapi_files']);  }  return $ret;}/** * @} End of "defgroup updates-5.x-to-6.x" * The next series of updates should start at 7000. */
<?php// $Id$$info = array(  // Pre-defined color schemes.  'schemes' => array(    '#0072b9,#027ac6,#2385c2,#5ab5ee,#494949' => t('Blue Lagoon (Default)'),    '#464849,#2f416f,#2a2b2d,#5d6779,#494949' => t('Ash'),    '#55c0e2,#000000,#085360,#007e94,#696969' => t('Aquamarine'),    '#d5b048,#6c420e,#331900,#971702,#494949' => t('Belgian Chocolate'),    '#3f3f3f,#336699,#6598cb,#6598cb,#000000' => t('Bluemarine'),    '#d0cb9a,#917803,#efde01,#e6fb2d,#494949' => t('Citrus Blast'),    '#0f005c,#434f8c,#4d91ff,#1a1575,#000000' => t('Cold Day'),    '#c9c497,#0c7a00,#03961e,#7be000,#494949' => t('Greenbeam'),    '#ffe23d,#a9290a,#fc6d1d,#a30f42,#494949' => t('Mediterrano'),    '#788597,#3f728d,#a9adbc,#d4d4d4,#707070' => t('Mercury'),    '#5b5fa9,#5b5faa,#0a2352,#9fa8d5,#494949' => t('Nocturnal'),    '#7db323,#6a9915,#b5d52a,#7db323,#191a19' => t('Olivia'),    '#12020b,#1b1a13,#f391c6,#f41063,#898080' => t('Pink Plastic'),    '#b7a0ba,#c70000,#a1443a,#f21107,#515d52' => t('Shiny Tomato'),    '#18583d,#1b5f42,#34775a,#52bf90,#2d2d2d' => t('Teal Top'),  ),  // Images to copy over.  'copy' => array(    'images/menu-collapsed.gif',    'images/menu-collapsed-rtl.gif',    'images/menu-expanded.gif',    'images/menu-leaf.gif',  ),  // CSS files (excluding @import) to rewrite with new color scheme.  'css' => array(    'style.css',  ),  // Coordinates of gradient (x, y, width, height).  'gradient' => array(0, 37, 760, 121),  // Color areas to fill (x, y, width, height).  'fill' => array(    'base' => array(0, 0, 760, 568),    'link' => array(107, 533, 41, 23),  ),  // Coordinates of all the theme slices (x, y, width, height)  // with their filename as used in the stylesheet.  'slices' => array(    'images/body.png'                      => array(0, 37, 1, 280),    'images/bg-bar.png'                    => array(202, 530, 76, 14),    'images/bg-bar-white.png'              => array(202, 506, 76, 14),    'images/bg-tab.png'                    => array(107, 533, 41, 23),    'images/bg-navigation.png'             => array(0, 0, 7, 37),    'images/bg-content-left.png'           => array(40, 117, 50, 352),    'images/bg-content-right.png'          => array(510, 117, 50, 352),    'images/bg-content.png'                => array(299, 117, 7, 200),    'images/bg-navigation-item.png'        => array(32, 37, 17, 12),    'images/bg-navigation-item-hover.png'  => array(54, 37, 17, 12),    'images/gradient-inner.png'            => array(646, 307, 112, 42),    'logo.png'                             => array(622, 51, 64, 73),    'screenshot.png'                       => array(0, 37, 400, 240),  ),  // Reference color used for blending. Matches the base.png's colors.  'blend_target' => '#ffffff',  // Preview files.  'preview_image' => 'color/preview.png',  'preview_css' => 'color/preview.css',  // Base file for image generation.  'base_image' => 'color/base.png',);
<?php// $Id$/** * Implementation of hook_install(). */function trigger_install() {  // Create tables.  drupal_install_schema('trigger');  // Do initial synchronization of actions in code and the database.  actions_synchronize(actions_list());}/** * Implementation of hook_uninstall(). */function trigger_uninstall() {  // Remove tables.  drupal_uninstall_schema('trigger');}/** * Implementation of hook_schema(). */function trigger_schema() {  $schema['trigger_assignments'] = array(    'description' => 'Maps trigger to hook and operation assignments from trigger.module.',    'fields' => array(      'hook' => array(        'type' => 'varchar',        'length' => 32,        'not null' => TRUE,        'default' => '',        'description' => 'Primary Key: The name of the internal Drupal hook upon which an action is firing; for example, nodeapi.',      ),      'op' => array(        'type' => 'varchar',        'length' => 32,        'not null' => TRUE,        'default' => '',        'description' => 'Primary Key: The specific operation of the hook upon which an action is firing: for example, presave.',      ),      'aid' => array(        'type' => 'varchar',        'length' => 255,        'not null' => TRUE,        'default' => '',        'description' => "Primary Key: Action's {actions}.aid.",      ),      'weight' => array(        'type' => 'int',        'not null' => TRUE,        'default' => 0,        'description' => 'The weight of the trigger assignment in relation to other triggers.',      ),    ),    'primary key' => array('hook', 'op', 'aid'),  );  return $schema;}
<?php// $Id$?>  <div class="block block-<?php print $block->module; ?>" id="block-<?php print $block->module; ?>-<?php print $block->delta; ?>">    <h2 class="title"><?php print $block->subject; ?></h2>    <div class="content"><?php print $block->content; ?></div> </div>
<?php// $Id$/** * @file * Page callback file for the blog module. *//** * Menu callback; displays a Drupal page containing recent blog entries of a given user. */function blog_page_user($account) {  global $user;  drupal_set_title($title = t("@name's blog", array('@name' => $account->name)));  $items = array();  if (($account->uid == $user->uid) && user_access('create blog entries')) {    $items[] = l(t('Post new blog entry.'), "node/add/blog");  }  else if ($account->uid == $user->uid) {    $items[] = t('You are not allowed to post a new blog entry.');  }  $output = theme('item_list', $items);  $result = pager_query(db_rewrite_sql("SELECT n.nid, n.sticky, n.created FROM {node} n WHERE n.type = 'blog' AND n.uid = %d AND n.status = 1 ORDER BY n.sticky DESC, n.created DESC"), variable_get('default_nodes_main', 10), 0, NULL, $account->uid);  $has_posts = FALSE;    while ($node = db_fetch_object($result)) {    $output .= node_view(node_load($node->nid), 1);    $has_posts = TRUE;  }    if ($has_posts) {    $output .= theme('pager', NULL, variable_get('default_nodes_main', 10));  }  else {    if ($account->uid == $user->uid) {      drupal_set_message(t('You have not created any blog entries.'));    }    else {      drupal_set_message(t('!author has not created any blog entries.', array('!author' => theme('username', $account))));    }  }  drupal_add_feed(url('blog/'. $account->uid .'/feed'), t('RSS - !title', array('!title' => $title)));  return $output;}/** * Menu callback; displays a Drupal page containing recent blog entries of all users. */function blog_page_last() {  global $user;  $output = '';  $items = array();  if (user_access('create blog entries')) {    $items[] = l(t('Create new blog entry.'), "node/add/blog");  }  $output = theme('item_list', $items);  $result = pager_query(db_rewrite_sql("SELECT n.nid, n.created FROM {node} n WHERE n.type = 'blog' AND n.status = 1 ORDER BY n.sticky DESC, n.created DESC"), variable_get('default_nodes_main', 10));  $has_posts = FALSE;  while ($node = db_fetch_object($result)) {    $output .= node_view(node_load($node->nid), 1);    $has_posts = TRUE;  }    if ($has_posts) {    $output .= theme('pager', NULL, variable_get('default_nodes_main', 10));  }  else {    drupal_set_message(t('No blog entries have been created.'));  }  drupal_add_feed(url('blog/feed'), t('RSS - blogs'));  return $output;}/** * Menu callback; displays an RSS feed containing recent blog entries of a given user. */function blog_feed_user($account) {  $result = db_query_range(db_rewrite_sql("SELECT n.nid, n.created FROM {node} n  WHERE n.type = 'blog' AND n.uid = %d AND n.status = 1 ORDER BY n.created DESC"), $account->uid, 0, variable_get('feed_default_items', 10));  $channel['title'] = t("!name's blog", array('!name' => $account->name));  $channel['link'] = url('blog/'. $account->uid, array('absolute' => TRUE));  $items = array();  while ($row = db_fetch_object($result)) {    $items[] = $row->nid;  }  node_feed($items, $channel);}/** * Menu callback; displays an RSS feed containing recent blog entries of all users. */function blog_feed_last() {  $result = db_query_range(db_rewrite_sql("SELECT n.nid, n.created FROM {node} n WHERE n.type = 'blog' AND n.status = 1 ORDER BY n.created DESC"), 0, variable_get('feed_default_items', 10));  $channel['title'] = t('!site_name blogs', array('!site_name' => variable_get('site_name', 'Drupal')));  $channel['link'] = url('blog', array('absolute' => TRUE));  $items = array();  while ($row = db_fetch_object($result)) {    $items[] = $row->nid;  }  node_feed($items, $channel);}
<?php// $Id$/** * @file * User page callbacks for the poll module. *//** * Menu callback to provide a simple list of all polls available. */function poll_page() {  // List all polls.  $sql = db_rewrite_sql("SELECT n.nid, n.title, p.active, n.created, SUM(c.chvotes) AS votes FROM {node} n INNER JOIN {poll} p ON n.nid = p.nid INNER JOIN {poll_choices} c ON n.nid = c.nid WHERE n.status = 1 GROUP BY n.nid, n.title, p.active, n.created ORDER BY n.created DESC");  // Count all polls for the pager.  $count_sql = db_rewrite_sql('SELECT COUNT(*) FROM {node} n INNER JOIN {poll} p ON n.nid = p.nid WHERE n.status = 1');  $result = pager_query($sql, 15, 0, $count_sql);  $output = '<ul>';  while ($node = db_fetch_object($result)) {    $output .= '<li>'. l($node->title, "node/$node->nid") .' - '. format_plural($node->votes, '1 vote', '@count votes') .' - '. ($node->active ? t('open') : t('closed')) .'</li>';  }  $output .= '</ul>';  $output .= theme("pager", NULL, 15);  return $output;}/** * Callback for the 'votes' tab for polls you can see other votes on */function poll_votes($node) {  drupal_set_title(check_plain($node->title));  $output = t('This table lists all the recorded votes for this poll. If anonymous users are allowed to vote, they will be identified by the IP address of the computer they used when they voted.');  $header[] = array('data' => t('Visitor'), 'field' => 'u.name');  $header[] = array('data' => t('Vote'), 'field' => 'pv.chorder');  $result = pager_query("SELECT pv.chorder, pv.uid, pv.hostname, u.name FROM {poll_votes} pv LEFT JOIN {users} u ON pv.uid = u.uid WHERE pv.nid = %d". tablesort_sql($header), 20, 0, NULL, $node->nid);  $rows = array();  while ($vote = db_fetch_object($result)) {    $rows[] = array(      $vote->name ? theme('username', $vote) : check_plain($vote->hostname),      check_plain($node->choice[$vote->chorder]['chtext']));  }  $output .= theme('table', $header, $rows);  $output .= theme('pager', NULL, 20, 0);  return $output;}/** * Callback for the 'results' tab for polls you can vote on */function poll_results($node) {  drupal_set_title(check_plain($node->title));  $node->show_results = TRUE;  return node_show($node, 0);}
<?php// $Id$// MySQLi specific install functions/** * Check if MySQLi is available. * * @return *  TRUE/FALSE */function mysqli_is_available() {  return function_exists('mysqli_connect');}/** * Check if we can connect to MySQL. * * @return *  TRUE/FALSE */function drupal_test_mysqli($url, &$success) {  if (!mysqli_is_available()) {    drupal_set_message(st('PHP MySQLi support not enabled.'), 'error');    return FALSE;  }  $url = parse_url($url);  // Decode url-encoded information in the db connection string.  $url['user'] = urldecode($url['user']);  $url['pass'] = isset($url['pass']) ? urldecode($url['pass']) : '';  $url['host'] = urldecode($url['host']);  $url['path'] = urldecode($url['path']);  $connection = mysqli_init();  @mysqli_real_connect($connection, $url['host'], $url['user'], $url['pass'], substr($url['path'], 1), $url['port'], NULL, MYSQLI_CLIENT_FOUND_ROWS);  if (mysqli_connect_errno() >= 2000 || mysqli_connect_errno() == 1045) {    drupal_set_message(st('Failed to connect to your MySQL database server. MySQL reports the following message: %error.<ul><li>Are you sure you have the correct username and password?</li><li>Are you sure that you have typed the correct database hostname?</li><li>Are you sure that the database server is running?</li></ul>For more help, see the <a href="http://drupal.org/node/258">Installation and upgrading handbook</a>. If you are unsure what these terms mean you should probably contact your hosting provider.', array('%error' => mysqli_connect_error())), 'error');    return FALSE;  }  // Test selecting the database.  if (mysqli_connect_errno() > 0) {    drupal_set_message(st('Failed to select your database on your MySQL database server, which means the connection username and password are valid, but there is a problem accessing your data. MySQL reports the following message: %error.<ul><li>Are you sure you have the correct database name?</li><li>Are you sure the database exists?</li><li>Are you sure the username has permission to access the database?</li></ul>For more help, see the <a href="http://drupal.org/node/258">Installation and upgrading handbook</a>. If you are unsure what these terms mean you should probably contact your hosting provider.', array('%error' => mysqli_connect_error())), 'error');    return FALSE;  }  $success = array('CONNECT');  // Test CREATE.  $query = 'CREATE TABLE drupal_install_test (id int NULL)';  $result = mysqli_query($connection, $query);  if ($error = mysqli_error($connection)) {    drupal_set_message(st('Failed to create a test table on your MySQL database server with the command %query. MySQL reports the following message: %error.<ul><li>Are you sure the configured username has the necessary MySQL permissions to create tables in the database?</li></ul>For more help, see the <a href="http://drupal.org/node/258">Installation and upgrading handbook</a>. If you are unsure what these terms mean you should probably contact your hosting provider.', array('%query' => $query, '%error' => $error)), 'error');    return FALSE;  }  $err = FALSE;  $success[] = 'SELECT';  $success[] = 'CREATE';  // Test INSERT.  $query = 'INSERT INTO drupal_install_test (id) VALUES (1)';  $result = mysqli_query($connection, $query);  if ($error = mysqli_error($connection)) {    drupal_set_message(st('Failed to insert a value into a test table on your MySQL database server. We tried inserting a value with the command %query and MySQL reported the following error: %error.', array('%query' => $query, '%error' => $error)), 'error');    $err = TRUE;  }  else {    $success[] = 'INSERT';  }  // Test UPDATE.  $query = 'UPDATE drupal_install_test SET id = 2';  $result = mysqli_query($connection, $query);  if ($error = mysqli_error($connection)) {    drupal_set_message(st('Failed to update a value in a test table on your MySQL database server. We tried updating a value with the command %query and MySQL reported the following error: %error.', array('%query' => $query, '%error' => $error)), 'error');    $err = TRUE;  }  else {    $success[] = 'UPDATE';  }  // Test DELETE.  $query = 'DELETE FROM drupal_install_test';  $result = mysqli_query($connection, $query);  if ($error = mysqli_error($connection)) {    drupal_set_message(st('Failed to delete a value from a test table on your MySQL database server. We tried deleting a value with the command %query and MySQL reported the following error: %error.', array('%query' => $query, '%error' => $error)), 'error');    $err = TRUE;  }  else {    $success[] = 'DELETE';  }  // Test DROP.  $query = 'DROP TABLE drupal_install_test';  $result = mysqli_query($connection, $query);  if ($error = mysqli_error($connection)) {    drupal_set_message(st('Failed to drop a test table from your MySQL database server. We tried dropping a table with the command %query and MySQL reported the following error %error.', array('%query' => $query, '%error' => $error)), 'error');    $err = TRUE;  }  else {    $success[] = 'DROP';  }  if ($err) {    return FALSE;  }  mysqli_close($connection);  return TRUE;}
<?php// $Id$/** * @file poll-results-block.tpl.php * Display the poll results in a block. * * Variables available: * - $title: The title of the poll. * - $results: The results of the poll. * - $votes: The total results in the poll. * - $links: Links in the poll. * - $nid: The nid of the poll * - $cancel_form: A form to cancel the user's vote, if allowed. * - $raw_links: The raw array of links. * - $vote: The choice number of the current user's vote. * * @see template_preprocess_poll_results() */?><div class="poll">  <?php print $results; ?>  <div class="total">    <?php print t('Total votes: @votes', array('@votes' => $votes)); ?>  </div>  <?php if (!empty($cancel_form)): ?>    <?php print $cancel_form; ?>  <?php endif; ?></div>
<?php// $Id$// MySQL specific install functions/** * Check if MySQL is available. * * @return *  TRUE/FALSE */function mysql_is_available() {  return function_exists('mysql_connect');}/** * Check if we can connect to MySQL. * * @return *  TRUE/FALSE */function drupal_test_mysql($url, &$success) {  if (!mysql_is_available()) {    drupal_set_message(st('PHP MySQL support not enabled.'), 'error');    return FALSE;  }  $url = parse_url($url);  // Decode url-encoded information in the db connection string.  $url['user'] = urldecode($url['user']);  $url['pass'] = isset($url['pass']) ? urldecode($url['pass']) : '';  $url['host'] = urldecode($url['host']);  $url['path'] = urldecode($url['path']);  // Allow for non-standard MySQL port.  if (isset($url['port'])) {    $url['host'] = $url['host'] .':'. $url['port'];  }  // Test connecting to the database.  $connection = @mysql_connect($url['host'], $url['user'], $url['pass'], TRUE, 2);  if (!$connection) {    drupal_set_message(st('Failed to connect to your MySQL database server. MySQL reports the following message: %error.<ul><li>Are you sure you have the correct username and password?</li><li>Are you sure that you have typed the correct database hostname?</li><li>Are you sure that the database server is running?</li></ul>For more help, see the <a href="http://drupal.org/node/258">Installation and upgrading handbook</a>. If you are unsure what these terms mean you should probably contact your hosting provider.', array('%error' => mysql_error())), 'error');    return FALSE;  }  // Test selecting the database.  if (!mysql_select_db(substr($url['path'], 1))) {    drupal_set_message(st('Failed to select your database on your MySQL database server, which means the connection username and password are valid, but there is a problem accessing your data. MySQL reports the following message: %error.<ul><li>Are you sure you have the correct database name?</li><li>Are you sure the database exists?</li><li>Are you sure the username has permission to access the database?</li></ul>For more help, see the <a href="http://drupal.org/node/258">Installation and upgrading handbook</a>. If you are unsure what these terms mean you should probably contact your hosting provider.', array('%error' => mysql_error())), 'error');    return FALSE;  }  $success = array('CONNECT');  // Test CREATE.  $query = 'CREATE TABLE drupal_install_test (id int NULL)';  $result = mysql_query($query);  if ($error = mysql_error()) {    drupal_set_message(st('Failed to create a test table on your MySQL database server with the command %query. MySQL reports the following message: %error.<ul><li>Are you sure the configured username has the necessary MySQL permissions to create tables in the database?</li></ul>For more help, see the <a href="http://drupal.org/node/258">Installation and upgrading handbook</a>. If you are unsure what these terms mean you should probably contact your hosting provider.', array('%query' => $query, '%error' => $error)), 'error');    return FALSE;  }  $err = FALSE;  $success[] = 'SELECT';  $success[] = 'CREATE';  // Test INSERT.  $query = 'INSERT INTO drupal_install_test (id) VALUES (1)';  $result = mysql_query($query);  if ($error = mysql_error()) {    drupal_set_message(st('Failed to insert a value into a test table on your MySQL database server. We tried inserting a value with the command %query and MySQL reported the following error: %error.', array('%query' => $query, '%error' => $error)), 'error');    $err = TRUE;  }  else {    $success[] = 'INSERT';  }  // Test UPDATE.  $query = 'UPDATE drupal_install_test SET id = 2';  $result = mysql_query($query);  if ($error = mysql_error()) {    drupal_set_message(st('Failed to update a value in a test table on your MySQL database server. We tried updating a value with the command %query and MySQL reported the following error: %error.', array('%query' => $query, '%error' => $error)), 'error');    $err = TRUE;  }  else {    $success[] = 'UPDATE';  }  // Test DELETE.  $query = 'DELETE FROM drupal_install_test';  $result = mysql_query($query);  if ($error = mysql_error()) {    drupal_set_message(st('Failed to delete a value from a test table on your MySQL database server. We tried deleting a value with the command %query and MySQL reported the following error: %error.', array('%query' => $query, '%error' => $error)), 'error');    $err = TRUE;  }  else {    $success[] = 'DELETE';  }  // Test DROP.  $query = 'DROP TABLE drupal_install_test';  $result = mysql_query($query);  if ($error = mysql_error()) {    drupal_set_message(st('Failed to drop a test table from your MySQL database server. We tried dropping a table with the command %query and MySQL reported the following error %error.', array('%query' => $query, '%error' => $error)), 'error');    $err = TRUE;  }  else {    $success[] = 'DROP';  }  if ($err) {    return FALSE;  }  mysql_close($connection);  return TRUE;}
<?php// $Id$/** * @file * Administrative page for handling updates from one Drupal version to another. * * Point your browser to "http://www.example.com/update.php" and follow the * instructions. * * If you are not logged in as administrator, you will need to modify the access * check statement inside your settings.php file. After finishing the upgrade, * be sure to open settings.php again, and change it back to its original state! *//** * Global flag to identify update.php run, and so avoid various unwanted * operations, such as hook_init() and hook_exit() invokes, css/js preprocessing * and translation, and solve some theming issues. This flag is checked on several * places in Drupal code (not just update.php). */define('MAINTENANCE_MODE', 'update');/** * Add a column to a database using syntax appropriate for PostgreSQL. * Save result of SQL commands in $ret array. * * Note: when you add a column with NOT NULL and you are not sure if there are * already rows in the table, you MUST also add DEFAULT. Otherwise PostgreSQL * won't work when the table is not empty, and db_add_column() will fail. * To have an empty string as the default, you must use: 'default' => "''" * in the $attributes array. If NOT NULL and DEFAULT are set the PostgreSQL * version will set values of the added column in old rows to the * DEFAULT value. * * @param $ret *   Array to which results will be added. * @param $table *   Name of the table, without {} * @param $column *   Name of the column * @param $type *   Type of column * @param $attributes *   Additional optional attributes. Recognized attributes: *     not null => TRUE|FALSE *     default  => NULL|FALSE|value (the value must be enclosed in '' marks) * @return *   nothing, but modifies $ret parameter. */function db_add_column(&$ret, $table, $column, $type, $attributes = array()) {  if (array_key_exists('not null', $attributes) and $attributes['not null']) {    $not_null = 'NOT NULL';  }  if (array_key_exists('default', $attributes)) {    if (is_null($attributes['default'])) {      $default_val = 'NULL';      $default = 'default NULL';    }    elseif ($attributes['default'] === FALSE) {      $default = '';    }    else {      $default_val = "$attributes[default]";      $default = "default $attributes[default]";    }  }  $ret[] = update_sql("ALTER TABLE {". $table ."} ADD $column $type");  if (!empty($default)) {    $ret[] = update_sql("ALTER TABLE {". $table ."} ALTER $column SET $default");  }  if (!empty($not_null)) {    if (!empty($default)) {      $ret[] = update_sql("UPDATE {". $table ."} SET $column = $default_val");    }    $ret[] = update_sql("ALTER TABLE {". $table ."} ALTER $column SET NOT NULL");  }}/** * Change a column definition using syntax appropriate for PostgreSQL. * Save result of SQL commands in $ret array. * * Remember that changing a column definition involves adding a new column * and dropping an old one. This means that any indices, primary keys and * sequences from serial-type columns are dropped and might need to be * recreated. * * @param $ret *   Array to which results will be added. * @param $table *   Name of the table, without {} * @param $column *   Name of the column to change * @param $column_new *   New name for the column (set to the same as $column if you don't want to change the name) * @param $type *   Type of column * @param $attributes *   Additional optional attributes. Recognized attributes: *     not null => TRUE|FALSE *     default  => NULL|FALSE|value (with or without '', it won't be added) * @return *   nothing, but modifies $ret parameter. */function db_change_column(&$ret, $table, $column, $column_new, $type, $attributes = array()) {  if (array_key_exists('not null', $attributes) and $attributes['not null']) {    $not_null = 'NOT NULL';  }  if (array_key_exists('default', $attributes)) {    if (is_null($attributes['default'])) {      $default_val = 'NULL';      $default = 'default NULL';    }    elseif ($attributes['default'] === FALSE) {      $default = '';    }    else {      $default_val = "$attributes[default]";      $default = "default $attributes[default]";    }  }  $ret[] = update_sql("ALTER TABLE {". $table ."} RENAME $column TO ". $column ."_old");  $ret[] = update_sql("ALTER TABLE {". $table ."} ADD $column_new $type");  $ret[] = update_sql("UPDATE {". $table ."} SET $column_new = ". $column ."_old");  if ($default) { $ret[] = update_sql("ALTER TABLE {". $table ."} ALTER $column_new SET $default"); }  if ($not_null) { $ret[] = update_sql("ALTER TABLE {". $table ."} ALTER $column_new SET NOT NULL"); }  $ret[] = update_sql("ALTER TABLE {". $table ."} DROP ". $column ."_old");}/** * Perform one update and store the results which will later be displayed on * the finished page. * * An update function can force the current and all later updates for this * module to abort by returning a $ret array with an element like: * $ret['#abort'] = array('success' => FALSE, 'query' => 'What went wrong'); * The schema version will not be updated in this case, and all the * aborted updates will continue to appear on update.php as updates that * have not yet been run. * * @param $module *   The module whose update will be run. * @param $number *   The update number to run. * @param $context *   The batch context array */function update_do_one($module, $number, &$context) {  // If updates for this module have been aborted  // in a previous step, go no further.  if (!empty($context['results'][$module]['#abort'])) {    return;  }  $function = $module .'_update_'. $number;  if (function_exists($function)) {    $ret = $function($context['sandbox']);  }  if (isset($ret['#finished'])) {    $context['finished'] = $ret['#finished'];    unset($ret['#finished']);  }  if (!isset($context['results'][$module])) {    $context['results'][$module] = array();  }  if (!isset($context['results'][$module][$number])) {    $context['results'][$module][$number] = array();  }  $context['results'][$module][$number] = array_merge($context['results'][$module][$number], $ret);  if (!empty($ret['#abort'])) {    $context['results'][$module]['#abort'] = TRUE;  }  // Record the schema update if it was completed successfully.  if ($context['finished'] == 1 && empty($context['results'][$module]['#abort'])) {    drupal_set_installed_schema_version($module, $number);  }  $context['message'] = 'Updating '. check_plain($module) .' module';}function update_selection_page() {  $output = '<p>The version of Drupal you are updating from has been automatically detected. You can select a different version, but you should not need to.</p>';  $output .= '<p>Click Update to start the update process.</p>';  drupal_set_title('Drupal database update');  $output .= drupal_get_form('update_script_selection_form');  update_task_list('select');  return $output;}function update_script_selection_form() {  $form = array();  $form['start'] = array(    '#tree' => TRUE,    '#type' => 'fieldset',    '#title' => 'Select versions',    '#collapsible' => TRUE,    '#collapsed' => TRUE,  );  // Ensure system.module's updates appear first  $form['start']['system'] = array();  $modules = drupal_get_installed_schema_version(NULL, FALSE, TRUE);  foreach ($modules as $module => $schema_version) {    $updates = drupal_get_schema_versions($module);    // Skip incompatible module updates completely, otherwise test schema versions.    if (!update_check_incompatibility($module) && $updates !== FALSE && $schema_version >= 0) {      // module_invoke returns NULL for nonexisting hooks, so if no updates      // are removed, it will == 0.      $last_removed = module_invoke($module, 'update_last_removed');      if ($schema_version < $last_removed) {        $form['start'][$module] = array(          '#value'  => '<em>'. $module .'</em> module can not be updated. Its schema version is '. $schema_version .'. Updates up to and including '. $last_removed .' have been removed in this release. In order to update <em>'. $module .'</em> module, you will first <a href="http://drupal.org/upgrade">need to upgrade</a> to the last version in which these updates were available.',          '#prefix' => '<div class="warning">',          '#suffix' => '</div>',        );        $form['start']['#collapsed'] = FALSE;        continue;      }      $updates = drupal_map_assoc($updates);      $updates[] = 'No updates available';      $default = $schema_version;      foreach (array_keys($updates) as $update) {        if ($update > $schema_version) {          $default = $update;          break;        }      }      $form['start'][$module] = array(        '#type' => 'select',        '#title' => $module .' module',        '#default_value' => $default,        '#options' => $updates,      );    }  }  $form['has_js'] = array(    '#type' => 'hidden',    '#default_value' => FALSE,  );  $form['submit'] = array(    '#type' => 'submit',    '#value' => 'Update',  );  return $form;}function update_batch() {  global $base_url;  $operations = array();  // Set the installed version so updates start at the correct place.  foreach ($_POST['start'] as $module => $version) {    drupal_set_installed_schema_version($module, $version - 1);    $updates = drupal_get_schema_versions($module);    $max_version = max($updates);    if ($version <= $max_version) {      foreach ($updates as $update) {        if ($update >= $version) {          $operations[] = array('update_do_one', array($module, $update));        }      }    }  }  $batch = array(    'operations' => $operations,    'title' => 'Updating',    'init_message' => 'Starting updates',    'error_message' => 'An unrecoverable error has occurred. You can find the error message below. It is advised to copy it to the clipboard for reference.',    'finished' => 'update_finished',  );  batch_set($batch);  batch_process($base_url .'/update.php?op=results', $base_url .'/update.php');}function update_finished($success, $results, $operations) {  // clear the caches in case the data has been updated.  drupal_flush_all_caches();  $_SESSION['update_results'] = $results;  $_SESSION['update_success'] = $success;  $_SESSION['updates_remaining'] = $operations;}function update_results_page() {  drupal_set_title('Drupal database update');  // NOTE: we can't use l() here because the URL would point to 'update.php?q=admin'.  $links[] = '<a href="'. base_path() .'">Main page</a>';  $links[] = '<a href="'. base_path() .'?q=admin">Administration pages</a>';  update_task_list();  // Report end result  if (module_exists('dblog')) {    $log_message = ' All errors have been <a href="'. base_path() .'?q=admin/reports/dblog">logged</a>.';  }  else {    $log_message = ' All errors have been logged.';  }  if ($_SESSION['update_success']) {    $output = '<p>Updates were attempted. If you see no failures below, you may proceed happily to the <a href="'. base_path() .'?q=admin">administration pages</a>. Otherwise, you may need to update your database manually.'. $log_message .'</p>';  }  else {    list($module, $version) = array_pop(reset($_SESSION['updates_remaining']));    $output = '<p class="error">The update process was aborted prematurely while running <strong>update #'. $version .' in '. $module .'.module</strong>.'. $log_message;    if (module_exists('dblog')) {      $output .= ' You may need to check the <code>watchdog</code> database table manually.';    }    $output .= '</p>';  }  if (!empty($GLOBALS['update_free_access'])) {    $output .= "<p><strong>Reminder: don't forget to set the <code>\$update_free_access</code> value in your <code>settings.php</code> file back to <code>FALSE</code>.</strong></p>";  }  $output .= theme('item_list', $links);  // Output a list of queries executed  if (!empty($_SESSION['update_results'])) {    $output .= '<div id="update-results">';    $output .= '<h2>The following queries were executed</h2>';    foreach ($_SESSION['update_results'] as $module => $updates) {      $output .= '<h3>'. $module .' module</h3>';      foreach ($updates as $number => $queries) {        if ($number != '#abort') {          $output .= '<h4>Update #'. $number .'</h4>';          $output .= '<ul>';          foreach ($queries as $query) {            if ($query['success']) {              $output .= '<li class="success">'. $query['query'] .'</li>';            }            else {              $output .= '<li class="failure"><strong>Failed:</strong> '. $query['query'] .'</li>';            }          }          if (!count($queries)) {            $output .= '<li class="none">No queries</li>';          }        }        $output .= '</ul>';      }    }    $output .= '</div>';  }  unset($_SESSION['update_results']);  unset($_SESSION['update_success']);  return $output;}function update_info_page() {  // Change query-strings on css/js files to enforce reload for all users.  _drupal_flush_css_js();  // Flush the cache of all data for the update status module.  if (db_table_exists('cache_update')) {    cache_clear_all('*', 'cache_update', TRUE);  }  update_task_list('info');  drupal_set_title('Drupal database update');  $token = drupal_get_token('update');  $output = '<p>Use this utility to update your database whenever a new release of Drupal or a module is installed.</p><p>For more detailed information, see the <a href="http://drupal.org/node/258">Installation and upgrading handbook</a>. If you are unsure what these terms mean you should probably contact your hosting provider.</p>';  $output .= "<ol>\n";  $output .= "<li><strong>Back up your database</strong>. This process will change your database values and in case of emergency you may need to revert to a backup.</li>\n";  $output .= "<li><strong>Back up your code</strong>. Hint: when backing up module code, do not leave that backup in the 'modules' or 'sites/*/modules' directories as this may confuse Drupal's auto-discovery mechanism.</li>\n";  $output .= '<li>Put your site into <a href="'. base_path() .'?q=admin/settings/site-maintenance">maintenance mode</a>.</li>'."\n";  $output .= "<li>Install your new files in the appropriate location, as described in the handbook.</li>\n";  $output .= "</ol>\n";  $output .= "<p>When you have performed the steps above, you may proceed.</p>\n";  $output .= '<form method="post" action="update.php?op=selection&amp;token='. $token .'"><p><input type="submit" value="Continue" /></p></form>';  $output .= "\n";  return $output;}function update_access_denied_page() {  drupal_set_title('Access denied');  return '<p>Access denied. You are not authorized to access this page. Please log in as the admin user (the first user you created). If you cannot log in, you will have to edit <code>settings.php</code> to bypass this access check. To do this:</p><ol> <li>With a text editor find the settings.php file on your system. From the main Drupal directory that you installed all the files into, go to <code>sites/your_site_name</code> if such directory exists, or else to <code>sites/default</code> which applies otherwise.</li> <li>There is a line inside your settings.php file that says <code>$update_free_access = FALSE;</code>. Change it to <code>$update_free_access = TRUE;</code>.</li> <li>As soon as the update.php script is done, you must change the settings.php file back to its original form with <code>$update_free_access = FALSE;</code>.</li> <li>To avoid having this problem in future, remember to log in to your website as the admin user (the user you first created) before you backup your database at the beginning of the update process.</li></ol>';}/** * Create the batch table. * * This is part of the Drupal 5.x to 6.x migration. */function update_create_batch_table() {  // If batch table exists, update is not necessary  if (db_table_exists('batch')) {    return;  }  $schema['batch'] = array(    'fields' => array(      'bid'       => array('type' => 'serial', 'unsigned' => TRUE, 'not null' => TRUE),      'token'     => array('type' => 'varchar', 'length' => 64, 'not null' => TRUE),      'timestamp' => array('type' => 'int', 'not null' => TRUE),      'batch'     => array('type' => 'text', 'not null' => FALSE, 'size' => 'big')    ),    'primary key' => array('bid'),    'indexes' => array('token' => array('token')),  );  $ret = array();  db_create_table($ret, 'batch', $schema['batch']);  return $ret;}/** * Disable anything in the {system} table that is not compatible with the * current version of Drupal core. */function update_fix_compatibility() {  $ret = array();  $incompatible = array();  $query = db_query("SELECT name, type, status FROM {system} WHERE status = 1 AND type IN ('module','theme')");  while ($result = db_fetch_object($query)) {    if (update_check_incompatibility($result->name, $result->type)) {      $incompatible[] = $result->name;    }  }  if (!empty($incompatible)) {    $ret[] = update_sql("UPDATE {system} SET status = 0 WHERE name IN ('". implode("','", $incompatible) ."')");  }  return $ret;}/** * Helper function to test compatibility of a module or theme. */function update_check_incompatibility($name, $type = 'module') {  static $themes, $modules;  // Store values of expensive functions for future use.  if (empty($themes) || empty($modules)) {    $themes = _system_theme_data();    $modules = module_rebuild_cache();  }  if ($type == 'module' && isset($modules[$name])) {    $file = $modules[$name];  }  else if ($type == 'theme' && isset($themes[$name])) {    $file = $themes[$name];  }  if (!isset($file)      || !isset($file->info['core'])      || $file->info['core'] != DRUPAL_CORE_COMPATIBILITY      || version_compare(phpversion(), $file->info['php']) < 0) {    return TRUE;  }  return FALSE;}/** * Perform Drupal 5.x to 6.x updates that are required for update.php * to function properly. * * This function runs when update.php is run the first time for 6.x, * even before updates are selected or performed.  It is important * that if updates are not ultimately performed that no changes are * made which make it impossible to continue using the prior version. * Just adding columns is safe.  However, renaming the * system.description column to owner is not.  Therefore, we add the * system.owner column and leave it to system_update_6008() to copy * the data from description and remove description. The same for * renaming locales_target.locale to locales_target.language, which * will be finished by locale_update_6002(). */function update_fix_d6_requirements() {  $ret = array();  if (drupal_get_installed_schema_version('system') < 6000 && !variable_get('update_d6_requirements', FALSE)) {    $spec = array('type' => 'int', 'size' => 'small', 'default' => 0, 'not null' => TRUE);    db_add_field($ret, 'cache', 'serialized', $spec);    db_add_field($ret, 'cache_filter', 'serialized', $spec);    db_add_field($ret, 'cache_page', 'serialized', $spec);    db_add_field($ret, 'cache_menu', 'serialized', $spec);    db_add_field($ret, 'system', 'info', array('type' => 'text'));    db_add_field($ret, 'system', 'owner', array('type' => 'varchar', 'length' => 255, 'not null' => TRUE, 'default' => ''));    if (db_table_exists('locales_target')) {      db_add_field($ret, 'locales_target', 'language', array('type' => 'varchar', 'length' => 12, 'not null' => TRUE, 'default' => ''));    }    if (db_table_exists('locales_source')) {      db_add_field($ret, 'locales_source', 'textgroup', array('type' => 'varchar', 'length' => 255, 'not null' => TRUE, 'default' => 'default'));      db_add_field($ret, 'locales_source', 'version', array('type' => 'varchar', 'length' => 20, 'not null' => TRUE, 'default' => 'none'));    }    variable_set('update_d6_requirements', TRUE);    // Create the cache_block table. See system_update_6027() for more details.    $schema['cache_block'] = array(      'fields' => array(        'cid'        => array('type' => 'varchar', 'length' => 255, 'not null' => TRUE, 'default' => ''),        'data'       => array('type' => 'blob', 'not null' => FALSE, 'size' => 'big'),        'expire'     => array('type' => 'int', 'not null' => TRUE, 'default' => 0),        'created'    => array('type' => 'int', 'not null' => TRUE, 'default' => 0),        'headers'    => array('type' => 'text', 'not null' => FALSE),        'serialized' => array('type' => 'int', 'size' => 'small', 'not null' => TRUE, 'default' => 0)      ),      'indexes' => array('expire' => array('expire')),      'primary key' => array('cid'),    );    db_create_table($ret, 'cache_block', $schema['cache_block']);  }  return $ret;}/** * Add the update task list to the current page. */function update_task_list($active = NULL) {  // Default list of tasks.  $tasks = array(    'info' => 'Overview',    'select' => 'Select updates',    'run' => 'Run updates',    'finished' => 'Review log',  );  drupal_set_content('left', theme('task_list', $tasks, $active));}/** * Check update requirements and report any errors. */function update_check_requirements() {  // Check the system module requirements only.  $requirements = module_invoke('system', 'requirements', 'update');  $severity = drupal_requirements_severity($requirements);  // If there are issues, report them.  if ($severity != REQUIREMENT_OK) {    foreach ($requirements as $requirement) {      if (isset($requirement['severity']) && $requirement['severity'] != REQUIREMENT_OK) {        $message = isset($requirement['description']) ? $requirement['description'] : '';        if (isset($requirement['value']) && $requirement['value']) {          $message .= ' (Currently using '. $requirement['title'] .' '. $requirement['value'] .')';        }        drupal_set_message($message, 'warning');      }    }  }}// Some unavoidable errors happen because the database is not yet up-to-date.// Our custom error handler is not yet installed, so we just suppress them.ini_set('display_errors', FALSE);require_once './includes/bootstrap.inc';// We only load DRUPAL_BOOTSTRAP_CONFIGURATION for the update requirements// check to avoid reaching the PHP memory limit.$op = isset($_REQUEST['op']) ? $_REQUEST['op'] : '';if (empty($op)) {  // Minimum load of components.  drupal_bootstrap(DRUPAL_BOOTSTRAP_CONFIGURATION);  require_once './includes/install.inc';  require_once './includes/file.inc';  require_once './modules/system/system.install';  // Load module basics.  include_once './includes/module.inc';  $module_list['system']['filename'] = 'modules/system/system.module';  $module_list['filter']['filename'] = 'modules/filter/filter.module';  module_list(TRUE, FALSE, FALSE, $module_list);  drupal_load('module', 'system');  drupal_load('module', 'filter');  // Set up $language, since the installer components require it.  drupal_init_language();  // Set up theme system for the maintenance page.  drupal_maintenance_theme();  // Check the update requirements for Drupal.  update_check_requirements();  // Display the warning messages (if any) in a dedicated maintenance page,  // or redirect to the update information page if no message.  $messages = drupal_set_message();  if (!empty($messages['warning'])) {    drupal_maintenance_theme();    print theme('update_page', '<form method="post" action="update.php?op=info"><input type="submit" value="Continue" /></form>', FALSE);    exit;  }  install_goto('update.php?op=info');}drupal_bootstrap(DRUPAL_BOOTSTRAP_FULL);drupal_maintenance_theme();// This must happen *after* drupal_bootstrap(), since it calls// variable_(get|set), which only works after a full bootstrap.update_create_batch_table();// Turn error reporting back on. From now on, only fatal errors (which are// not passed through the error handler) will cause a message to be printed.ini_set('display_errors', TRUE);// Access check:if (!empty($update_free_access) || $user->uid == 1) {  include_once './includes/install.inc';  include_once './includes/batch.inc';  drupal_load_updates();  update_fix_d6_requirements();  update_fix_compatibility();  $op = isset($_REQUEST['op']) ? $_REQUEST['op'] : '';  switch ($op) {    case 'selection':      if (isset($_GET['token']) && $_GET['token'] == drupal_get_token('update')) {        $output = update_selection_page();        break;      }    case 'Update':      if (isset($_GET['token']) && $_GET['token'] == drupal_get_token('update')) {        update_batch();        break;      }    // update.php ops    case 'info':      $output = update_info_page();      break;    case 'results':      $output = update_results_page();      break;    // Regular batch ops : defer to batch processing API    default:      update_task_list('run');      $output = _batch_page();      break;  }}else {  $output = update_access_denied_page();}if (isset($output) && $output) {  // We defer the display of messages until all updates are done.  $progress_page = ($batch = batch_get()) && isset($batch['running']);  print theme('update_page', $output, !$progress_page);}
