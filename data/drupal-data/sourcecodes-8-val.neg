<?php// $Id$/** * @file * Handles incoming requests to fire off regularly-scheduled tasks (cron jobs). */include_once './includes/bootstrap.inc';drupal_bootstrap(DRUPAL_BOOTSTRAP_FULL);drupal_cron_run();
<?php// $Id$/** * @file * Page callback file for the blog module. *//** * Menu callback; displays a Drupal page containing recent blog entries of a given user. */function blog_page_user($account) {  global $user;  drupal_set_title($title = t("@name's blog", array('@name' => $account->name)));  $items = array();  if (($account->uid == $user->uid) && user_access('create blog entries')) {    $items[] = l(t('Post new blog entry.'), "node/add/blog");  }  else if ($account->uid == $user->uid) {    $items[] = t('You are not allowed to post a new blog entry.');  }  $output = theme('item_list', $items);  $result = pager_query(db_rewrite_sql("SELECT n.nid, n.sticky, n.created FROM {node} n WHERE n.type = 'blog' AND n.uid = %d AND n.status = 1 ORDER BY n.sticky DESC, n.created DESC"), variable_get('default_nodes_main', 10), 0, NULL, $account->uid);  $has_posts = FALSE;    while ($node = db_fetch_object($result)) {    $output .= node_view(node_load($node->nid), 1);    $has_posts = TRUE;  }    if ($has_posts) {    $output .= theme('pager', NULL, variable_get('default_nodes_main', 10));  }  else {    if ($account->uid == $user->uid) {      drupal_set_message(t('You have not created any blog entries.'));    }    else {      drupal_set_message(t('!author has not created any blog entries.', array('!author' => theme('username', $account))));    }  }  drupal_add_feed(url('blog/'. $account->uid .'/feed'), t('RSS - !title', array('!title' => $title)));  return $output;}/** * Menu callback; displays a Drupal page containing recent blog entries of all users. */function blog_page_last() {  global $user;  $output = '';  $items = array();  if (user_access('create blog entries')) {    $items[] = l(t('Create new blog entry.'), "node/add/blog");  }  $output = theme('item_list', $items);  $result = pager_query(db_rewrite_sql("SELECT n.nid, n.created FROM {node} n WHERE n.type = 'blog' AND n.status = 1 ORDER BY n.sticky DESC, n.created DESC"), variable_get('default_nodes_main', 10));  $has_posts = FALSE;  while ($node = db_fetch_object($result)) {    $output .= node_view(node_load($node->nid), 1);    $has_posts = TRUE;  }    if ($has_posts) {    $output .= theme('pager', NULL, variable_get('default_nodes_main', 10));  }  else {    drupal_set_message(t('No blog entries have been created.'));  }  drupal_add_feed(url('blog/feed'), t('RSS - blogs'));  return $output;}/** * Menu callback; displays an RSS feed containing recent blog entries of a given user. */function blog_feed_user($account) {  $result = db_query_range(db_rewrite_sql("SELECT n.nid, n.created FROM {node} n  WHERE n.type = 'blog' AND n.uid = %d AND n.status = 1 ORDER BY n.created DESC"), $account->uid, 0, variable_get('feed_default_items', 10));  $channel['title'] = t("!name's blog", array('!name' => $account->name));  $channel['link'] = url('blog/'. $account->uid, array('absolute' => TRUE));  $items = array();  while ($row = db_fetch_object($result)) {    $items[] = $row->nid;  }  node_feed($items, $channel);}/** * Menu callback; displays an RSS feed containing recent blog entries of all users. */function blog_feed_last() {  $result = db_query_range(db_rewrite_sql("SELECT n.nid, n.created FROM {node} n WHERE n.type = 'blog' AND n.status = 1 ORDER BY n.created DESC"), 0, variable_get('feed_default_items', 10));  $channel['title'] = t('!site_name blogs', array('!site_name' => variable_get('site_name', 'Drupal')));  $channel['link'] = url('blog', array('absolute' => TRUE));  $items = array();  while ($row = db_fetch_object($result)) {    $items[] = $row->nid;  }  node_feed($items, $channel);}
<?php// $Id$/** * @file * Alerts other sites that your site has been updated. *//** * Implementation of hook_help(). */function ping_help($path, $arg) {  switch ($path) {    case 'admin/help#ping':      $output = '<p>'. t('The ping module is useful for notifying interested sites that your site has changed. It automatically sends notifications, or "pings", to the <a href="@external-http-pingomatic-com">pingomatic</a> service about new or updated content. In turn, <a href="@external-http-pingomatic-com">pingomatic</a> notifies other popular services, including weblogs.com, Technorati, blo.gs, BlogRolling, Feedster.com, and Moreover.', array('@external-http-pingomatic-com' => 'http://pingomatic.com/')) .'</p>';      $output .= '<p>'. t('The ping module requires a correctly configured <a href="@cron">cron maintenance task</a>.', array('@cron' => url('admin/reports/status'))) .'</p>';      $output .= '<p>'. t('For more information, see the online handbook entry for <a href="@ping">Ping module</a>.', array('@ping' => 'http://drupal.org/handbook/modules/ping/')) .'</p>';      return $output;  }}/** * Implementation of hook_cron(). * * Fire off notifications of updates to remote sites. */function ping_cron() {  global $base_url;  if (variable_get('site_name', 0)) {    $cron_last = variable_get('cron_last', time());    // Query changed first since usually changed >= created.    if (db_result(db_query('SELECT COUNT(*) FROM {node} WHERE status = 1 AND changed > %d', $cron_last)) || db_result(db_query('SELECT COUNT(*) FROM {node} WHERE status = 1 AND created > %d', $cron_last))) {      _ping_notify(variable_get('site_name', ''), $base_url);    }  }}/** * Call hook_ping() in all modules to notify remote sites that there is * new content at this one. */function _ping_notify($name, $url) {  module_invoke_all('ping', $name, $url);}/** * Implementation of hook_ping(). * * Notifies pingomatic.com, blo.gs, and technorati.com of changes at this site. */function ping_ping($name = '', $url = '') {  $result = xmlrpc('http://rpc.pingomatic.com', 'weblogUpdates.ping', $name, $url);  if ($result === FALSE) {    watchdog('directory ping', 'Failed to notify pingomatic.com (site).', array(), WATCHDOG_WARNING);  }}
<?php// $Id$/** * @file * Allows configuration of congestion control auto-throttle mechanism. */function throttle_menu() {  $items['admin/settings/throttle'] = array(    'title' => 'Throttle',    'description' => 'Control how your site cuts out content during heavy load.',    'page callback' => 'drupal_get_form',    'page arguments' => array('throttle_admin_settings'),    'access arguments' => array('administer site configuration'),    'file' => 'throttle.admin.inc',  );  return $items;}/** * Determine the current load on the site. * * Call the throttle_status() function from your own modules, themes, blocks, * etc. as follows: * *   $throttle = module_invoke('throttle', 'status'); * * to determine the current throttle status. Use module_invoke() so the * call will still work if the throttle module is disabled. For example, in * your theme you might choose to disable pictures when your site is too busy * (reducing bandwidth), or in your modules you might choose to disable * some complicated logic when your site is too busy (reducing CPU utilization). * * @return *   0 or 1. 0 means that the throttle is currently disabled. 1 means that *   the throttle is currently enabled. When the throttle is enabled, CPU *   and bandwidth intensive functionality should be disabled. */function throttle_status() {  return variable_get('throttle_level', 0);}/** * Implementation of hook_exit(). * * Changes the current throttle level based on page hits. */function throttle_exit() {  // The following logic determines what the current throttle level should  //  be, and can be disabled by the admin. If enabled, the mt_rand() function  //  returns a number between 0 and N, N being specified by the admin. If  //  0 is returned, the throttle logic is run, adding two additional database  //  queries. Otherwise, the following logic is skipped. This mechanism is  //  referred to in the admin page as the 'probability limiter', roughly  //  limiting throttle related database calls to 1 in N.  if (!mt_rand(0, variable_get('throttle_probability_limiter', 9))) {    // Count users with activity in the past n seconds.    // This value is defined in the user module Who's Online block.    $time_period = variable_get('user_block_seconds_online', 900);    // When determining throttle status in your own module or theme, use    // $throttle = module_invoke('throttle', 'status');    // as that will still work when throttle.module is disabled.    // Clearly here the module is enabled so we call throttle_status() directly.    $throttle = throttle_status();    if ($max_guests = variable_get('throttle_anonymous', 0)) {      $guests = sess_count(time() - $time_period, TRUE);    }    else {      $guests = 0;    }    if ($max_users = variable_get('throttle_user', 0)) {      $users = sess_count(time() - $time_period, FALSE);    }    else {      $users = 0;    }    // update the throttle status    $message = '';    if ($max_users && $users > $max_users) {      if (!$throttle) {        variable_set('throttle_level', 1);        $message = format_plural($users,                                 '1 user accessing site; throttle enabled.',                                 '@count users accessing site; throttle enabled.');      }    }    elseif ($max_guests && $guests > $max_guests) {      if (!$throttle) {        variable_set('throttle_level', 1);        $message = format_plural($guests,                                 '1 guest accessing site; throttle enabled.',                                 '@count guests accessing site; throttle enabled.');      }    }    else {      if ($throttle) {        variable_set('throttle_level', 0);        // Note: unorthodox format_plural() usage due to Gettext plural limitations.        $message = format_plural($users, '1 user', '@count users') .', ';        $message .= format_plural($guests, '1 guest accessing site; throttle disabled', '@count guests accessing site; throttle disabled');      }    }    if ($message) {      cache_clear_all();      watchdog('throttle', 'Throttle: %message', array('%message' => $message));    }  }}/** * Implementation of hook_help(). */function throttle_help($path, $arg) {  switch ($path) {    case 'admin/help#throttle':      $output = '<p>'. t('The throttle module provides a congestion control mechanism that automatically adjusts to a surge in incoming traffic. If your site is referenced by a popular website, or experiences a "Denial of Service" (DoS) attack, your webserver might become overwhelmed. The throttle mechanism is utilized by modules to temporarily disable CPU-intensive functionality, increasing performance. For instance, via the throttle module, modules may choose to disable resource-intensive blocks or the code within the site theme may temporarily disable user pictures in posts.') .'</p>';      $output .= '<p>'. t('The congestion control throttle can be automatically enabled when the number of anonymous or authenticated users currently visiting the site exceeds a specified threshold.') .'</p>';      $output .= '<p>'. t('For more information, see the online handbook entry for <a href="@throttle">Throttle module</a>.', array('@throttle' => 'http://drupal.org/handbook/modules/throttle/')) .'</p>';      return $output;    case 'admin/settings/throttle':      return '<p>'. t('The throttle module provides a congestion control mechanism that automatically adjusts to a surge in incoming traffic. If your site is referenced by a popular website, or experiences a "Denial of Service" (DoS) attack, your webserver might become overwhelmed. The throttle mechanism is utilized by modules to temporarily disable CPU-intensive functionality, increasing performance.') .'</p>';  }}
<?php// $Id$/** * @file block-admin-display-form.tpl.php * Default theme implementation to configure blocks. * * Available variables: * - $block_regions: An array of regions. Keyed by name with the title as value. * - $block_listing: An array of blocks keyed by region and then delta. * - $form_submit: Form submit button. * - $throttle: TRUE or FALSE depending on throttle module being enabled. * * Each $block_listing[$region] contains an array of blocks for that region. * * Each $data in $block_listing[$region] contains: * - $data->region_title: Region title for the listed block. * - $data->block_title: Block title. * - $data->region_select: Drop-down menu for assigning a region. * - $data->weight_select: Drop-down menu for setting weights. * - $data->throttle_check: Checkbox to enable throttling. * - $data->configure_link: Block configuration link. * - $data->delete_link: For deleting user added blocks. * * @see template_preprocess_block_admin_display_form() * @see theme_block_admin_display() */?><?php  // Add table javascript.  drupal_add_js('misc/tableheader.js');  drupal_add_js(drupal_get_path('module', 'block') .'/block.js');  foreach ($block_regions as $region => $title) {    drupal_add_tabledrag('blocks', 'match', 'sibling', 'block-region-select', 'block-region-'. $region, NULL, FALSE);    drupal_add_tabledrag('blocks', 'order', 'sibling', 'block-weight', 'block-weight-'. $region);  }?><table id="blocks" class="sticky-enabled">  <thead>    <tr>      <th><?php print t('Block'); ?></th>      <th><?php print t('Region'); ?></th>      <th><?php print t('Weight'); ?></th>      <?php if ($throttle): ?>        <th><?php print t('Throttle'); ?></th>      <?php endif; ?>      <th colspan="2"><?php print t('Operations'); ?></th>    </tr>  </thead>  <tbody>    <?php $row = 0; ?>    <?php foreach ($block_regions as $region => $title): ?>      <tr class="region region-<?php print $region?>">        <td colspan="<?php print $throttle ? '6' : '5'; ?>" class="region"><?php print $title; ?></td>      </tr>      <tr class="region-message region-<?php print $region?>-message <?php print empty($block_listing[$region]) ? 'region-empty' : 'region-populated'; ?>">        <td colspan="<?php print $throttle ? '6' : '5'; ?>"><em><?php print t('No blocks in this region'); ?></em></td>      </tr>      <?php foreach ($block_listing[$region] as $delta => $data): ?>      <tr class="draggable <?php print $row % 2 == 0 ? 'odd' : 'even'; ?><?php print $data->row_class ? ' '. $data->row_class : ''; ?>">        <td class="block"><?php print $data->block_title; ?></td>        <td><?php print $data->region_select; ?></td>        <td><?php print $data->weight_select; ?></td>        <?php if ($throttle): ?>          <td><?php print $data->throttle_check; ?></td>        <?php endif; ?>        <td><?php print $data->configure_link; ?></td>        <td><?php print $data->delete_link; ?></td>      </tr>      <?php $row++; ?>      <?php endforeach; ?>    <?php endforeach; ?>  </tbody></table><?php print $form_submit; ?>
<?php// $Id$/** * @file * Functions shared between mysql and mysqli database engines. *//** * Runs a basic query in the active database. * * User-supplied arguments to the query should be passed in as separate * parameters so that they can be properly escaped to avoid SQL injection * attacks. * * @param $query *   A string containing an SQL query. * @param ... *   A variable number of arguments which are substituted into the query *   using printf() syntax. Instead of a variable number of query arguments, *   you may also pass a single array containing the query arguments. * *   Valid %-modifiers are: %s, %d, %f, %b (binary data, do not enclose *   in '') and %%. * *   NOTE: using this syntax will cast NULL and FALSE values to decimal 0, *   and TRUE values to decimal 1. * * @return *   A database query result resource, or FALSE if the query was not *   executed correctly. */function db_query($query) {  $args = func_get_args();  array_shift($args);  $query = db_prefix_tables($query);  if (isset($args[0]) and is_array($args[0])) { // 'All arguments in one array' syntax    $args = $args[0];  }  _db_query_callback($args, TRUE);  $query = preg_replace_callback(DB_QUERY_REGEXP, '_db_query_callback', $query);  return _db_query($query);}/** * @ingroup schemaapi * @{ *//** * Generate SQL to create a new table from a Drupal schema definition. * * @param $name *   The name of the table to create. * @param $table *   A Schema API table definition array. * @return *   An array of SQL statements to create the table. */function db_create_table_sql($name, $table) {  if (empty($table['mysql_suffix'])) {    $table['mysql_suffix'] = "/*!40100 DEFAULT CHARACTER SET UTF8 */";  }  $sql = "CREATE TABLE {". $name ."} (\n";  // Add the SQL statement for each field.  foreach ($table['fields'] as $field_name => $field) {    $sql .= _db_create_field_sql($field_name, _db_process_field($field)) .", \n";  }  // Process keys & indexes.  $keys = _db_create_keys_sql($table);  if (count($keys)) {    $sql .= implode(", \n", $keys) .", \n";  }  // Remove the last comma and space.  $sql = substr($sql, 0, -3) ."\n) ";  $sql .= $table['mysql_suffix'];  return array($sql);}function _db_create_keys_sql($spec) {  $keys = array();  if (!empty($spec['primary key'])) {    $keys[] = 'PRIMARY KEY ('. _db_create_key_sql($spec['primary key']) .')';  }  if (!empty($spec['unique keys'])) {    foreach ($spec['unique keys'] as $key => $fields) {      $keys[] = 'UNIQUE KEY '. $key .' ('. _db_create_key_sql($fields) .')';    }  }  if (!empty($spec['indexes'])) {    foreach ($spec['indexes'] as $index => $fields) {      $keys[] = 'INDEX '. $index .' ('. _db_create_key_sql($fields) .')';    }  }  return $keys;}function _db_create_key_sql($fields) {  $ret = array();  foreach ($fields as $field) {    if (is_array($field)) {      $ret[] = $field[0] .'('. $field[1] .')';    }    else {      $ret[] = $field;    }  }  return implode(', ', $ret);}/** * Set database-engine specific properties for a field. * * @param $field *   A field description array, as specified in the schema documentation. */function _db_process_field($field) {  if (!isset($field['size'])) {    $field['size'] = 'normal';  }  // Set the correct database-engine specific datatype.  if (!isset($field['mysql_type'])) {    $map = db_type_map();    $field['mysql_type'] = $map[$field['type'] .':'. $field['size']];  }  if ($field['type'] == 'serial') {    $field['auto_increment'] = TRUE;  }  return $field;}/** * Create an SQL string for a field to be used in table creation or alteration. * * Before passing a field out of a schema definition into this function it has * to be processed by _db_process_field(). * * @param $name *    Name of the field. * @param $spec *    The field specification, as per the schema data structure format. */function _db_create_field_sql($name, $spec) {  $sql = "`". $name ."` ". $spec['mysql_type'];  if (in_array($spec['type'], array('varchar', 'char', 'text')) && isset($spec['length'])) {    $sql .= '('. $spec['length'] .')';  }  elseif (isset($spec['precision']) && isset($spec['scale'])) {    $sql .= '('. $spec['precision'] .', '. $spec['scale'] .')';  }  if (!empty($spec['unsigned'])) {    $sql .= ' unsigned';  }  if (!empty($spec['not null'])) {    $sql .= ' NOT NULL';  }  if (!empty($spec['auto_increment'])) {    $sql .= ' auto_increment';  }  if (isset($spec['default'])) {    if (is_string($spec['default'])) {      $spec['default'] = "'". $spec['default'] ."'";    }    $sql .= ' DEFAULT '. $spec['default'];  }  if (empty($spec['not null']) && !isset($spec['default'])) {    $sql .= ' DEFAULT NULL';  }  return $sql;}/** * This maps a generic data type in combination with its data size * to the engine-specific data type. */function db_type_map() {  // Put :normal last so it gets preserved by array_flip.  This makes  // it much easier for modules (such as schema.module) to map  // database types back into schema types.  $map = array(    'varchar:normal'  => 'VARCHAR',    'char:normal'     => 'CHAR',    'text:tiny'       => 'TINYTEXT',    'text:small'      => 'TINYTEXT',    'text:medium'     => 'MEDIUMTEXT',    'text:big'        => 'LONGTEXT',    'text:normal'     => 'TEXT',    'serial:tiny'     => 'TINYINT',    'serial:small'    => 'SMALLINT',    'serial:medium'   => 'MEDIUMINT',    'serial:big'      => 'BIGINT',    'serial:normal'   => 'INT',    'int:tiny'        => 'TINYINT',    'int:small'       => 'SMALLINT',    'int:medium'      => 'MEDIUMINT',    'int:big'         => 'BIGINT',    'int:normal'      => 'INT',    'float:tiny'      => 'FLOAT',    'float:small'     => 'FLOAT',    'float:medium'    => 'FLOAT',    'float:big'       => 'DOUBLE',    'float:normal'    => 'FLOAT',    'numeric:normal'  => 'DECIMAL',    'blob:big'        => 'LONGBLOB',    'blob:normal'     => 'BLOB',    'datetime:normal' => 'DATETIME',  );  return $map;}/** * Rename a table. * * @param $ret *   Array to which query results will be added. * @param $table *   The table to be renamed. * @param $new_name *   The new name for the table. */function db_rename_table(&$ret, $table, $new_name) {  $ret[] = update_sql('ALTER TABLE {'. $table .'} RENAME TO {'. $new_name .'}');}/** * Drop a table. * * @param $ret *   Array to which query results will be added. * @param $table *   The table to be dropped. */function db_drop_table(&$ret, $table) {  $ret[] = update_sql('DROP TABLE {'. $table .'}');}/** * Add a new field to a table. * * @param $ret *   Array to which query results will be added. * @param $table *   Name of the table to be altered. * @param $field *   Name of the field to be added. * @param $spec *   The field specification array, as taken from a schema definition. *   The specification may also contain the key 'initial', the newly *   created field will be set to the value of the key in all rows. *   This is most useful for creating NOT NULL columns with no default *   value in existing tables. * @param $keys_new *   Optional keys and indexes specification to be created on the *   table along with adding the field. The format is the same as a *   table specification but without the 'fields' element.  If you are *   adding a type 'serial' field, you MUST specify at least one key *   or index including it in this array. @see db_change_field for more *   explanation why. */function db_add_field(&$ret, $table, $field, $spec, $keys_new = array()) {  $fixnull = FALSE;  if (!empty($spec['not null']) && !isset($spec['default'])) {    $fixnull = TRUE;    $spec['not null'] = FALSE;  }  $query = 'ALTER TABLE {'. $table .'} ADD ';  $query .= _db_create_field_sql($field, _db_process_field($spec));  if (count($keys_new)) {    $query .= ', ADD '. implode(', ADD ', _db_create_keys_sql($keys_new));  }  $ret[] = update_sql($query);  if (isset($spec['initial'])) {    // All this because update_sql does not support %-placeholders.    $sql = 'UPDATE {'. $table .'} SET '. $field .' = '. db_type_placeholder($spec['type']);    $result = db_query($sql, $spec['initial']);    $ret[] = array('success' => $result !== FALSE, 'query' => check_plain($sql .' ('. $spec['initial'] .')'));  }  if ($fixnull) {    $spec['not null'] = TRUE;    db_change_field($ret, $table, $field, $field, $spec);  }}/** * Drop a field. * * @param $ret *   Array to which query results will be added. * @param $table *   The table to be altered. * @param $field *   The field to be dropped. */function db_drop_field(&$ret, $table, $field) {  $ret[] = update_sql('ALTER TABLE {'. $table .'} DROP '. $field);}/** * Set the default value for a field. * * @param $ret *   Array to which query results will be added. * @param $table *   The table to be altered. * @param $field *   The field to be altered. * @param $default *   Default value to be set. NULL for 'default NULL'. */function db_field_set_default(&$ret, $table, $field, $default) {  if ($default === NULL) {    $default = 'NULL';  }  else {    $default = is_string($default) ? "'$default'" : $default;  }  $ret[] = update_sql('ALTER TABLE {'. $table .'} ALTER COLUMN '. $field .' SET DEFAULT '. $default);}/** * Set a field to have no default value. * * @param $ret *   Array to which query results will be added. * @param $table *   The table to be altered. * @param $field *   The field to be altered. */function db_field_set_no_default(&$ret, $table, $field) {  $ret[] = update_sql('ALTER TABLE {'. $table .'} ALTER COLUMN '. $field .' DROP DEFAULT');}/** * Add a primary key. * * @param $ret *   Array to which query results will be added. * @param $table *   The table to be altered. * @param $fields *   Fields for the primary key. */function db_add_primary_key(&$ret, $table, $fields) {  $ret[] = update_sql('ALTER TABLE {'. $table .'} ADD PRIMARY KEY ('.    _db_create_key_sql($fields) .')');}/** * Drop the primary key. * * @param $ret *   Array to which query results will be added. * @param $table *   The table to be altered. */function db_drop_primary_key(&$ret, $table) {  $ret[] = update_sql('ALTER TABLE {'. $table .'} DROP PRIMARY KEY');}/** * Add a unique key. * * @param $ret *   Array to which query results will be added. * @param $table *   The table to be altered. * @param $name *   The name of the key. * @param $fields *   An array of field names. */function db_add_unique_key(&$ret, $table, $name, $fields) {  $ret[] = update_sql('ALTER TABLE {'. $table .'} ADD UNIQUE KEY '.    $name .' ('. _db_create_key_sql($fields) .')');}/** * Drop a unique key. * * @param $ret *   Array to which query results will be added. * @param $table *   The table to be altered. * @param $name *   The name of the key. */function db_drop_unique_key(&$ret, $table, $name) {  $ret[] = update_sql('ALTER TABLE {'. $table .'} DROP KEY '. $name);}/** * Add an index. * * @param $ret *   Array to which query results will be added. * @param $table *   The table to be altered. * @param $name *   The name of the index. * @param $fields *   An array of field names. */function db_add_index(&$ret, $table, $name, $fields) {  $query = 'ALTER TABLE {'. $table .'} ADD INDEX '. $name .' ('. _db_create_key_sql($fields) .')';  $ret[] = update_sql($query);}/** * Drop an index. * * @param $ret *   Array to which query results will be added. * @param $table *   The table to be altered. * @param $name *   The name of the index. */function db_drop_index(&$ret, $table, $name) {  $ret[] = update_sql('ALTER TABLE {'. $table .'} DROP INDEX '. $name);}/** * Change a field definition. * * IMPORTANT NOTE: To maintain database portability, you have to explicitly * recreate all indices and primary keys that are using the changed field. * * That means that you have to drop all affected keys and indexes with * db_drop_{primary_key,unique_key,index}() before calling db_change_field(). * To recreate the keys and indices, pass the key definitions as the * optional $keys_new argument directly to db_change_field(). * * For example, suppose you have: * @code * $schema['foo'] = array( *   'fields' => array( *     'bar' => array('type' => 'int', 'not null' => TRUE) *   ), *   'primary key' => array('bar') * ); * @endcode * and you want to change foo.bar to be type serial, leaving it as the * primary key.  The correct sequence is: * @code * db_drop_primary_key($ret, 'foo'); * db_change_field($ret, 'foo', 'bar', 'bar', *   array('type' => 'serial', 'not null' => TRUE), *   array('primary key' => array('bar'))); * @endcode * * The reasons for this are due to the different database engines: * * On PostgreSQL, changing a field definition involves adding a new field * and dropping an old one which* causes any indices, primary keys and * sequences (from serial-type fields) that use the changed field to be dropped. * * On MySQL, all type 'serial' fields must be part of at least one key * or index as soon as they are created.  You cannot use * db_add_{primary_key,unique_key,index}() for this purpose because * the ALTER TABLE command will fail to add the column without a key * or index specification.  The solution is to use the optional * $keys_new argument to create the key or index at the same time as * field. * * You could use db_add_{primary_key,unique_key,index}() in all cases * unless you are converting a field to be type serial. You can use * the $keys_new argument in all cases. * * @param $ret *   Array to which query results will be added. * @param $table *   Name of the table. * @param $field *   Name of the field to change. * @param $field_new *   New name for the field (set to the same as $field if you don't want to change the name). * @param $spec *   The field specification for the new field. * @param $keys_new *   Optional keys and indexes specification to be created on the *   table along with changing the field. The format is the same as a *   table specification but without the 'fields' element. */function db_change_field(&$ret, $table, $field, $field_new, $spec, $keys_new = array()) {  $sql = 'ALTER TABLE {'. $table .'} CHANGE `'. $field .'` '.    _db_create_field_sql($field_new, _db_process_field($spec));  if (count($keys_new)) {    $sql .= ', ADD '. implode(', ADD ', _db_create_keys_sql($keys_new));  }  $ret[] = update_sql($sql);}/** * Returns the last insert id. * * @param $table *   The name of the table you inserted into. * @param $field *   The name of the autoincrement field. */function db_last_insert_id($table, $field) {  return db_result(db_query('SELECT LAST_INSERT_ID()'));}
<?php// $Id$?><!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.0 Transitional//EN" "http://www.w3.org/TR/xhtml1/DTD/xhtml1-transitional.dtd"><html xmlns="http://www.w3.org/1999/xhtml" lang="<?php print $language->language ?>" xml:lang="<?php print $language->language ?>" dir="<?php print $language->dir ?>"><head>  <meta http-equiv="Content-Style-Type" content="text/css" />  <?php print $head ?>  <title><?php print $head_title ?></title>  <?php print $styles ?>  <?php print $scripts ?></head><body><div class="hide"><a href="#content" title="<?php print t('Skip navigation') ?>." accesskey="2"><?php print t('Skip navigation') ?></a>.</div><table id="primary-menu" summary="Navigation elements." border="0" cellpadding="0" cellspacing="0" width="100%">  <tr>    <td id="home" width="10%">      <?php if ($logo) : ?>        <a href="<?php print $front_page ?>" title="<?php print t('Home') ?>"><img src="<?php print($logo) ?>" alt="<?php print t('Home') ?>" border="0" /></a>      <?php endif; ?>    </td>    <td id="site-info" width="20%">      <?php if ($site_name) : ?>        <div class='site-name'><a href="<?php print $front_page ?>" title="<?php print t('Home') ?>"><?php print($site_name) ?></a></div>      <?php endif;?>      <?php if ($site_slogan) : ?>        <div class='site-slogan'><?php print($site_slogan) ?></div>      <?php endif;?>    </td>    <td class="primary-links" width="70%" align="center" valign="middle">      <?php print theme('links', $primary_links, array('class' => 'links', 'id' => 'navlist')) ?>    </td>  </tr></table><table id="secondary-menu" summary="Navigation elements." border="0" cellpadding="0" cellspacing="0" width="100%">  <tr>    <td class="secondary-links" width="75%"  align="center" valign="middle">      <?php print theme('links', $secondary_links, array('class' => 'links', 'id' => 'subnavlist')) ?>    </td>    <td width="25%" align="center" valign="middle">      <?php print $search_box ?>    </td>  </tr>  <tr>    <td colspan="2"><div><?php print $header ?></div></td>  </tr></table><table id="content" border="0" cellpadding="15" cellspacing="0" width="100%">  <tr>    <?php if ($left != ""): ?>    <td id="sidebar-left">      <?php print $left ?>    </td>    <?php endif; ?>    <td valign="top">      <?php if ($mission != ""): ?>      <div id="mission"><?php print $mission ?></div>      <?php endif; ?>      <div id="main">        <?php if ($title != ""): ?>          <?php print $breadcrumb ?>          <h1 class="title"><?php print $title ?></h1>          <?php if ($tabs != ""): ?>            <div class="tabs"><?php print $tabs ?></div>          <?php endif; ?>        <?php endif; ?>        <?php if ($show_messages && $messages != ""): ?>          <?php print $messages ?>        <?php endif; ?>        <?php if ($help != ""): ?>            <div id="help"><?php print $help ?></div>        <?php endif; ?>      <!-- start main content -->      <?php print $content; ?>      <?php print $feed_icons; ?>      <!-- end main content -->      </div><!-- main -->    </td>    <?php if ($right != ""): ?>    <td id="sidebar-right">      <?php print $right ?>    </td>    <?php endif; ?>  </tr></table><table id="footer-menu" summary="Navigation elements." border="0" cellpadding="0" cellspacing="0" width="100%">  <tr>    <td align="center" valign="middle">    <?php if (isset($primary_links)) : ?>      <?php print theme('links', $primary_links, array('class' => 'links primary-links')) ?>    <?php endif; ?>    <?php if (isset($secondary_links)) : ?>      <?php print theme('links', $secondary_links, array('class' => 'links secondary-links')) ?>    <?php endif; ?>    </td>  </tr></table><?php if ($footer_message || $footer) : ?><div id="footer-message">    <?php print $footer_message . $footer;?></div><?php endif; ?><?php print $closure;?></body></html>
<?php// $Id$/** * @file user-profile-category.tpl.php * Default theme implementation to present profile categories (groups of * profile items). * * Categories are defined when configuring user profile fields for the site. * It can also be defined by modules. All profile items for a category will be * output through the $profile_items variable. * * @see user-profile-item.tpl.php *      where each profile item is rendered. It is implemented as a definition *      list by default. * @see user-profile.tpl.php *      where all items and categories are collected and printed out. * * Available variables: * - $title: Category title for the group of items. * - $profile_items: All the items for the group rendered through *   user-profile-item.tpl.php. * - $attributes: HTML attributes. Usually renders classes. * * @see template_preprocess_user_profile_category() */?><?php if ($title) : ?>  <h3><?php print $title; ?></h3><?php endif; ?><dl<?php print $attributes; ?>>  <?php print $profile_items; ?></dl>
<?php// $Id$/** * @file poll-bar-block.tpl.php * Display the bar for a single choice in a poll * * Variables available: * - $title: The title of the poll. * - $votes: The number of votes for this choice * - $total_votes: The number of votes for this choice * - $percentage: The percentage of votes for this choice. * - $vote: The choice number of the current user's vote. * - $voted: Set to TRUE if the user voted for this choice. * * @see template_preprocess_poll_bar() */?><div class="text"><?php print $title; ?></div><div class="bar">  <div style="width: <?php print $percentage; ?>%;" class="foreground"></div></div><div class="percent">  <?php print $percentage; ?>%</div>
<?php// $Id$/** * @file comment-wrapper.tpl.php * Default theme implementation to wrap comments. * * Available variables: * - $content: All comments for a given page. Also contains sorting controls *   and comment forms if the site is configured for it. * * The following variables are provided for contextual information. * - $node: Node object the comments are attached to. * The constants below the variables show the possible values and should be * used for comparison. * - $display_mode *   - COMMENT_MODE_FLAT_COLLAPSED *   - COMMENT_MODE_FLAT_EXPANDED *   - COMMENT_MODE_THREADED_COLLAPSED *   - COMMENT_MODE_THREADED_EXPANDED * - $display_order *   - COMMENT_ORDER_NEWEST_FIRST *   - COMMENT_ORDER_OLDEST_FIRST * - $comment_controls_state *   - COMMENT_CONTROLS_ABOVE *   - COMMENT_CONTROLS_BELOW *   - COMMENT_CONTROLS_ABOVE_BELOW *   - COMMENT_CONTROLS_HIDDEN * * @see template_preprocess_comment_wrapper() * @see theme_comment_wrapper() */?><div id="comments">  <?php print $content; ?></div>
<?php// $Id$/** * @file user-profile.tpl.php * Default theme implementation to present all user profile data. * * This template is used when viewing a registered member's profile page, * e.g., example.com/user/123. 123 being the users ID. * * By default, all user profile data is printed out with the $user_profile * variable. If there is a need to break it up you can use $profile instead. * It is keyed to the name of each category or other data attached to the * account. If it is a category it will contain all the profile items. By * default $profile['summary'] is provided which contains data on the user's * history. Other data can be included by modules. $profile['user_picture'] is * available by default showing the account picture. * * Also keep in mind that profile items and their categories can be defined by * site administrators. They are also available within $profile. For example, * if a site is configured with a category of "contact" with * fields for of addresses, phone numbers and other related info, then doing a * straight print of $profile['contact'] will output everything in the * category. This is useful for altering source order and adding custom * markup for the group. * * To check for all available data within $profile, use the code below. * @code *   print '<pre>'. check_plain(print_r($profile, 1)) .'</pre>'; * @endcode * * Available variables: *   - $user_profile: All user profile data. Ready for print. *   - $profile: Keyed array of profile categories and their items or other data *     provided by modules. * * @see user-profile-category.tpl.php *   Where the html is handled for the group. * @see user-profile-item.tpl.php *   Where the html is handled for each item in the group. * @see template_preprocess_user_profile() */?><div class="profile">  <?php print $user_profile; ?></div>
<?php// $Id$/** * @file search-results.tpl.php * Default theme implementation for displaying search results. * * This template collects each invocation of theme_search_result(). This and * the child template are dependant to one another sharing the markup for * definition lists. * * Note that modules may implement their own search type and theme function * completely bypassing this template. * * Available variables: * - $search_results: All results as it is rendered through *   search-result.tpl.php * - $type: The type of search, e.g., "node" or "user". * * * @see template_preprocess_search_results() */?><dl class="search-results <?php print $type; ?>-results">  <?php print $search_results; ?></dl><?php print $pager; ?>
<?php// $Id$?><div class="comment<?php print ' '. $status; ?>">  <?php if ($picture) : ?>    <?php print $picture ?>  <?php endif; ?>  <h3 class="title"><?php print $title ?></h3>  <div class="submitted"><?php print $submitted ?><?php if ($comment->new) : ?><span class="new"> *<?php print $new ?></span><?php endif; ?></div>  <div class="content">    <?php print $content ?>    <?php if ($signature): ?>      <div class="clear-block">        <div></div>        <?php print $signature ?>      </div>    <?php endif; ?>  </div>  <!-- BEGIN: links -->  <div class="links">&raquo; <?php print $links ?></div>  <!-- END: links --></div>
<?php// $Id$$info = array(  // Pre-defined color schemes.  'schemes' => array(    '#0072b9,#027ac6,#2385c2,#5ab5ee,#494949' => t('Blue Lagoon (Default)'),    '#464849,#2f416f,#2a2b2d,#5d6779,#494949' => t('Ash'),    '#55c0e2,#000000,#085360,#007e94,#696969' => t('Aquamarine'),    '#d5b048,#6c420e,#331900,#971702,#494949' => t('Belgian Chocolate'),    '#3f3f3f,#336699,#6598cb,#6598cb,#000000' => t('Bluemarine'),    '#d0cb9a,#917803,#efde01,#e6fb2d,#494949' => t('Citrus Blast'),    '#0f005c,#434f8c,#4d91ff,#1a1575,#000000' => t('Cold Day'),    '#c9c497,#0c7a00,#03961e,#7be000,#494949' => t('Greenbeam'),    '#ffe23d,#a9290a,#fc6d1d,#a30f42,#494949' => t('Mediterrano'),    '#788597,#3f728d,#a9adbc,#d4d4d4,#707070' => t('Mercury'),    '#5b5fa9,#5b5faa,#0a2352,#9fa8d5,#494949' => t('Nocturnal'),    '#7db323,#6a9915,#b5d52a,#7db323,#191a19' => t('Olivia'),    '#12020b,#1b1a13,#f391c6,#f41063,#898080' => t('Pink Plastic'),    '#b7a0ba,#c70000,#a1443a,#f21107,#515d52' => t('Shiny Tomato'),    '#18583d,#1b5f42,#34775a,#52bf90,#2d2d2d' => t('Teal Top'),  ),  // Images to copy over.  'copy' => array(    '../images/menu-collapsed.gif',    '../images/menu-collapsed-rtl.gif',    '../images/menu-expanded.gif',    '../images/menu-leaf.gif',  ),  // CSS files (excluding @import) to rewrite with new color scheme.  'css' => array(    '../style.css',  ),  // Coordinates of gradient (x, y, width, height).  'gradient' => array(0, 37, 760, 121),  // Color areas to fill (x, y, width, height).  'fill' => array(    'base' => array(0, 0, 760, 568),    'link' => array(107, 533, 41, 23),  ),  // Coordinates of all the theme slices (x, y, width, height)  // with their filename as used in the stylesheet.  'slices' => array(    '../images/body.png'                      => array(0, 37, 1, 280),    '../images/bg-bar.png'                    => array(202, 530, 76, 14),    '../images/bg-bar-white.png'              => array(202, 506, 76, 14),    '../images/bg-tab.png'                    => array(107, 533, 41, 23),    '../images/bg-navigation.png'             => array(0, 0, 7, 37),    '../images/bg-content-left.png'           => array(40, 117, 50, 352),    '../images/bg-content-right.png'          => array(510, 117, 50, 352),    '../images/bg-content.png'                => array(299, 117, 7, 200),    '../images/bg-navigation-item.png'        => array(32, 37, 17, 12),    '../images/bg-navigation-item-hover.png'  => array(54, 37, 17, 12),    '../images/gradient-inner.png'            => array(646, 307, 112, 42),    'logo.png'                                => array(622, 51, 64, 73),    'screenshot.png'                          => array(0, 37, 400, 240),  ),  // Reference color used for blending. Matches the base.png's colors.  'blend_target' => '#ffffff',  // Preview files.  'preview_image' => 'color/preview.png',  'preview_css' => '../color/preview.css',  // Base file for image generation.  'base_image' => 'color/base.png',);
<?php// $Id$/** * @file aggregator-feed-source.tpl.php * Default theme implementation to present the source of the feed. * * The contents are render above feed listings when browsing source feeds. * For example, "example.com/aggregator/sources/1". * * Available variables: * - $source_icon: Feed icon linked to the source. Rendered through *   theme_feed_icon(). * - $source_image: Image set by the feed source. * - $source_description: Description set by the feed source. * - $source_url: URL to the feed source. * - $last_checked: How long ago the feed was checked locally. * * @see template_preprocess() * @see template_preprocess_aggregator_feed_source() */?><div class="feed-source">  <?php print $source_icon; ?>  <?php print $source_image; ?>  <div class="feed-description">    <?php print $source_description; ?>  </div>  <div class="feed-url">    <em><?php print t('URL:'); ?></em> <a href="<?php print $source_url; ?>"><?php print $source_url; ?></a>  </div>  <div class="feed-updated">    <em><?php print t('Updated:'); ?></em> <?php print $last_checked; ?>  </div></div>
<?php// $Id$?><div class="<?php print "block block-$block->module" ?>" id="<?php print "block-$block->module-$block->delta"; ?>">  <div class="title"><h3><?php print $block->subject ?></h3></div>  <div class="content"><?php print $block->content ?></div></div>
<?php// $Id$// PostgreSQL specific install functions/** * Check if PostgreSQL is available. * * @return *  TRUE/FALSE */function pgsql_is_available() {  return function_exists('pg_connect');}/** * Check if we can connect to PostgreSQL. * * @return *  TRUE/FALSE */function drupal_test_pgsql($url, &$success) {  if (!pgsql_is_available()) {    drupal_set_message(st('PHP PostgreSQL support not enabled.'), 'error');    return FALSE;  }  $url = parse_url($url);  $conn_string = '';  // Decode url-encoded information in the db connection string  if (isset($url['user'])) {    $conn_string .= ' user='. urldecode($url['user']);  }  if (isset($url['pass'])) {    $conn_string .= ' password='. urldecode($url['pass']);  }  if (isset($url['host'])) {    $conn_string .= ' host='. urldecode($url['host']);  }  if (isset($url['path'])) {    $conn_string .= ' dbname='. substr(urldecode($url['path']), 1);  }  if (isset($url['port'])) {    $conn_string .= ' port='. urldecode($url['port']);  }  // Test connecting to the database.  $connection = @pg_connect($conn_string);  if (!$connection) {    drupal_set_message(st('Failed to connect to your PostgreSQL database server. PostgreSQL reports the following message: %error.<ul><li>Are you sure you have the correct username and password?</li><li>Are you sure that you have typed the correct database hostname?</li><li>Are you sure that the database server is running?</li><li>Are you sure you typed the correct database name?</li></ul>For more help, see the <a href="http://drupal.org/node/258">Installation and upgrading handbook</a>. If you are unsure what these terms mean you should probably contact your hosting provider.', array('%error' => 'Connection failed. See log file for failure reason')), 'error');    return FALSE;  }  $success = array('CONNECT');  // Test CREATE.  $query = 'CREATE TABLE drupal_install_test (id integer NOT NULL)';  $result = pg_query($connection, $query);  if ($error = pg_result_error($result)) {    drupal_set_message(st('Failed to create a test table on your PostgreSQL database server with the command %query. PostgreSQL reports the following message: %error.<ul><li>Are you sure the configured username has the necessary PostgreSQL permissions to create tables in the database?</li></ul>For more help, see the <a href="http://drupal.org/node/258">Installation and upgrading handbook</a>. If you are unsure what these terms mean you should probably contact your hosting provider.', array('%query' => $query, '%error' => $error)), 'error');    return FALSE;  }  $err = FALSE;  $success[] = 'SELECT';  $success[] = 'CREATE';  // Test INSERT.  $query = 'INSERT INTO drupal_install_test (id) VALUES (1)';  $result = pg_query($connection, $query);  if ($error = pg_result_error($result)) {    drupal_set_message(st('Failed to insert a value into a test table on your PostgreSQL database server. We tried inserting a value with the command %query and PostgreSQL reported the following error: %error.', array('%query' => $query, '%error' => $error)), 'error');    $err = TRUE;  }  else {    $success[] = 'INSERT';  }  // Test UPDATE.  $query = 'UPDATE drupal_install_test SET id = 2';  $result = pg_query($connection, $query);  if ($error = pg_result_error($result)) {    drupal_set_message(st('Failed to update a value in a test table on your PostgreSQL database server. We tried updating a value with the command %query and PostgreSQL reported the following error: %error.', array('%query' => $query, '%error' => $error)), 'error');    $err = TRUE;  }  else {    $success[] = 'UPDATE';  }  // Test LOCK.  $query = 'BEGIN; LOCK drupal_install_test IN SHARE ROW EXCLUSIVE MODE';  $result = pg_query($connection, $query);  if ($error = pg_result_error($result)) {    drupal_set_message(st('Failed to lock a test table on your PostgreSQL database server. We tried locking a table with the command %query and PostgreSQL reported the following error: %error.', array('%query' => $query, '%error' => $error)), 'error');    $err = TRUE;  }  else {    $success[] = 'LOCK';  }  // Test UNLOCK, which is done automatically upon transaction end in PostgreSQL  $query = 'COMMIT';  $result = pg_query($connection, $query);  if ($error = pg_result_error()) {    drupal_set_message(st('Failed to unlock a test table on your PostgreSQL database server. We tried unlocking a table with the command %query and PostgreSQL reported the following error: %error.', array('%query' => $query, '%error' => $error)), 'error');    $err = TRUE;  }  else {    $success[] = 'UNLOCK';  }  // Test DELETE.  $query = 'DELETE FROM drupal_install_test';  $result = pg_query($connection, $query);  if ($error = pg_result_error()) {    drupal_set_message(st('Failed to delete a value from a test table on your PostgreSQL database server. We tried deleting a value with the command %query and PostgreSQL reported the following error: %error.', array('%query' => $query, '%error' => $error)), 'error');    $err = TRUE;  }  else {    $success[] = 'DELETE';  }  // Test DROP.  $query = 'DROP TABLE drupal_install_test';  $result = pg_query($connection, $query);  if ($error = pg_result_error()) {    drupal_set_message(st('Failed to drop a test table from your PostgreSQL database server. We tried dropping a table with the command %query and PostgreSQL reported the following error %error.', array('%query' => $query, '%error' => $error)), 'error');    $err = TRUE;  }  else {    $success[] = 'DROP';  }  if ($err) {    return FALSE;  }  pg_close($connection);  return TRUE;}
<?php// $Id$/** * @file comment-folded.tpl.php * Default theme implementation for folded comments. * * Available variables: * - $title: Linked title to full comment. * - $new: New comment marker. * - $author: Comment author. Can be link or plain text. * - $date: Date and time of posting. * - $comment: Full comment object. * * @see template_preprocess_comment_folded() * @see theme_comment_folded() */?><div class="comment-folded">  <span class="subject"><?php print $title .' '. $new; ?></span><span class="credit"><?php print t('by') .' '. $author; ?></span></div>
<?php// $Id$/** * @file * GD2 toolkit for image manipulation within Drupal. *//** * @ingroup image * @{ *//** * Retrieve information about the toolkit. */function image_gd_info() {  return array('name' => 'gd', 'title' => t('GD2 image manipulation toolkit'));}/** * Retrieve settings for the GD2 toolkit. */function image_gd_settings() {  if (image_gd_check_settings()) {    $form = array();    $form['status'] = array(      '#value' => t('The GD toolkit is installed and working properly.')    );    $form['image_jpeg_quality'] = array(      '#type' => 'textfield',      '#title' => t('JPEG quality'),      '#description' => t('Define the image quality for JPEG manipulations. Ranges from 0 to 100. Higher values mean better image quality but bigger files.'),      '#size' => 10,      '#maxlength' => 3,      '#default_value' => variable_get('image_jpeg_quality', 75),      '#field_suffix' => t('%'),    );    $form['#element_validate'] = array('image_gd_settings_validate');        return $form;  }  else {    form_set_error('image_toolkit', t('The GD image toolkit requires that the GD module for PHP be installed and configured properly. For more information see <a href="@url">PHP\'s image documentation</a>.', array('@url' => 'http://php.net/image')));    return FALSE;  }}/** * Validate the submitted GD settings. */function image_gd_settings_validate($form, &$form_state) {  // Validate image quality range.  $value = $form_state['values']['image_jpeg_quality'];  if (!is_numeric($value) || $value < 0 || $value > 100) {    form_set_error('image_jpeg_quality', t('JPEG quality must be a number between 0 and 100.'));  }}/** * Verify GD2 settings (that the right version is actually installed). * * @return *   A boolean indicating if the GD toolkit is avaiable on this machine. */function image_gd_check_settings() {  if ($check = get_extension_funcs('gd')) {    if (in_array('imagegd2', $check)) {      // GD2 support is available.      return TRUE;    }  }  return FALSE;}/** * Scale an image to the specified size using GD. */function image_gd_resize($source, $destination, $width, $height) {  if (!file_exists($source)) {    return FALSE;  }  $info = image_get_info($source);  if (!$info) {    return FALSE;  }  $im = image_gd_open($source, $info['extension']);  if (!$im) {    return FALSE;  }  $res = imagecreatetruecolor($width, $height);  if ($info['extension'] == 'png') {    $transparency = imagecolorallocatealpha($res, 0, 0, 0, 127);    imagealphablending($res, FALSE);    imagefilledrectangle($res, 0, 0, $width, $height, $transparency);    imagealphablending($res, TRUE);    imagesavealpha($res, TRUE);  }  elseif ($info['extension'] == 'gif') {    // If we have a specific transparent color.    $transparency_index = imagecolortransparent($im);    if ($transparency_index >= 0) {      // Get the original image's transparent color's RGB values.      $transparent_color = imagecolorsforindex($im, $transparency_index);      // Allocate the same color in the new image resource.      $transparency_index = imagecolorallocate($res, $transparent_color['red'], $transparent_color['green'], $transparent_color['blue']);      // Completely fill the background of the new image with allocated color.      imagefill($res, 0, 0, $transparency_index);      // Set the background color for new image to transparent.      imagecolortransparent($res, $transparency_index);      // Find number of colors in the images palette.      $number_colors = imagecolorstotal($im);      // Convert from true color to palette to fix transparency issues.      imagetruecolortopalette($res, TRUE, $number_colors);    }  }  imagecopyresampled($res, $im, 0, 0, 0, 0, $width, $height, $info['width'], $info['height']);  $result = image_gd_close($res, $destination, $info['extension']);  imagedestroy($res);  imagedestroy($im);  return $result;}/** * Rotate an image the given number of degrees. */function image_gd_rotate($source, $destination, $degrees, $background = 0x000000) {  if (!function_exists('imageRotate')) {    return FALSE;  }  $info = image_get_info($source);  if (!$info) {    return FALSE;  }  $im = image_gd_open($source, $info['extension']);  if (!$im) {    return FALSE;  }  $res = imageRotate($im, $degrees, $background);  $result = image_gd_close($res, $destination, $info['extension']);  return $result;}/** * Crop an image using the GD toolkit. */function image_gd_crop($source, $destination, $x, $y, $width, $height) {  $info = image_get_info($source);  if (!$info) {    return FALSE;  }  $im = image_gd_open($source, $info['extension']);  $res = imageCreateTrueColor($width, $height);  imageCopy($res, $im, 0, 0, $x, $y, $width, $height);  $result = image_gd_close($res, $destination, $info['extension']);  imageDestroy($res);  imageDestroy($im);  return $result;}/** * GD helper function to create an image resource from a file. * * @param $file *   A string file path where the iamge should be saved. * @param $extension *   A string containing one of the following extensions: gif, jpg, jpeg, png. * @return *   An image resource, or FALSE on error. */function image_gd_open($file, $extension) {  $extension = str_replace('jpg', 'jpeg', $extension);  $open_func = 'imageCreateFrom'. $extension;  if (!function_exists($open_func)) {    return FALSE;  }  return $open_func($file);}/** * GD helper to write an image resource to a destination file. * * @param $res *   An image resource created with image_gd_open(). * @param $destination *   A string file path where the iamge should be saved. * @param $extension *   A string containing one of the following extensions: gif, jpg, jpeg, png. * @return *   Boolean indicating success. */function image_gd_close($res, $destination, $extension) {  $extension = str_replace('jpg', 'jpeg', $extension);  $close_func = 'image'. $extension;  if (!function_exists($close_func)) {    return FALSE;  }  if ($extension == 'jpeg') {    return $close_func($res, $destination, variable_get('image_jpeg_quality', 75));  }  else {    return $close_func($res, $destination);  }}/** * @} End of "ingroup image". */
<?php// $Id$// Global variables to track parsing state$xrds_open_elements = array();$xrds_services = array();$xrds_current_service = array();/** * Main entry point for parsing XRDS documents */function xrds_parse($xml) {  global $xrds_services;  $parser = xml_parser_create_ns();  xml_set_element_handler($parser, '_xrds_element_start', '_xrds_element_end');  xml_set_character_data_handler($parser, '_xrds_cdata');  xml_parse($parser, $xml);  xml_parser_free($parser);  return $xrds_services;}/** * Parser callback functions */function _xrds_element_start(&$parser, $name, $attribs) {  global $xrds_open_elements;  $xrds_open_elements[] = _xrds_strip_namespace($name);}function _xrds_element_end(&$parser, $name) {  global $xrds_open_elements, $xrds_services, $xrds_current_service;  $name = _xrds_strip_namespace($name);  if ($name == 'SERVICE') {    if (in_array(OPENID_NS_2_0 .'/signon', $xrds_current_service['types']) ||        in_array(OPENID_NS_2_0 .'/server', $xrds_current_service['types'])) {      $xrds_current_service['version'] = 2;    }    elseif (in_array(OPENID_NS_1_1, $xrds_current_service['types']) ||            in_array(OPENID_NS_1_0, $xrds_current_service['types'])) {      $xrds_current_service['version'] = 1;    }    if (!empty($xrds_current_service['version'])) {      $xrds_services[] = $xrds_current_service;    }    $xrds_current_service = array();  }  array_pop($xrds_open_elements);}function _xrds_cdata(&$parser, $data) {  global $xrds_open_elements, $xrds_services, $xrds_current_service;  $path = strtoupper(implode('/', $xrds_open_elements));  switch ($path) {    case 'XRDS/XRD/SERVICE/TYPE':      $xrds_current_service['types'][] = $data;      break;    case 'XRDS/XRD/SERVICE/URI':      $xrds_current_service['uri'] = $data;      break;    case 'XRDS/XRD/SERVICE/DELEGATE':      $xrds_current_service['delegate'] = $data;      break;    case 'XRDS/XRD/SERVICE/LOCALID':      $xrds_current_service['localid'] = $data;      break;  }}function _xrds_strip_namespace($name) {  // Strip namespacing.  $pos = strrpos($name, ':');  if ($pos !== FALSE) {    $name = substr($name, $pos + 1, strlen($name));  }  return $name;}
<?php// $Id$/** * @file book-all-books-block.tpl.php * Default theme implementation for rendering book outlines within a block. * This template is used only when the block is configured to "show block on * all pages" which presents Multiple independent books on all pages. * * Available variables: * - $book_menus: Array of book outlines rendered as an unordered list. It is *   keyed to the parent book ID which is also the ID of the parent node *   containing an entire outline. * * @see template_preprocess_book_all_books_block() */?><?php foreach ($book_menus as $book_id => $menu) : ?><div id="book-block-menu-<?php print $book_id; ?>" class="book-block-menu">  <?php print $menu; ?></div><?php endforeach; ?>
