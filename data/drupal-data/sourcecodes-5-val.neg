<?php// $Id$/** * @file poll-vote.tpl.php * Voting form for a poll. * * - $choice: The radio buttons for the choices in the poll. * - $title: The title of the poll. * - $block: True if this is being displayed as a block. * - $vote: The vote button * - $rest: Anything else in the form that may have been added via *   form_alter hooks. * * @see template_preprocess_poll_vote() */?><div class="poll">  <div class="vote-form">    <div class="choices">      <?php if ($block): ?>        <div class="title"><?php print $title; ?>:</div>      <?php endif; ?>      <?php print $choice; ?>    </div>    <?php print $vote; ?>  </div>  <?php // This is the 'rest' of the form, in case items have been added. ?>  <?php print $rest ?></div>
<?php// $Id$/** * @file * User page callbacks for the aggregator module. *//** * Menu callback; displays the most recent items gathered from any feed. * * @return *   The items HTML. */function aggregator_page_last() {  drupal_add_feed(url('aggregator/rss'), variable_get('site_name', 'Drupal') .' '. t('aggregator'));  $items = aggregator_feed_items_load('SELECT i.*, f.title AS ftitle, f.link AS flink FROM {aggregator_item} i INNER JOIN {aggregator_feed} f ON i.fid = f.fid ORDER BY i.timestamp DESC, i.iid DESC');  return _aggregator_page_list($items, arg(1));}/** * Menu callback; displays all the items captured from a particular feed. * * If there are two arguments then this function is the categorize form. * * @param $arg1 *   If there are two arguments then $arg1 is $form_state. Otherwise, $arg1 is $feed. * @param $arg2 *   If there are two arguments then $arg2 is feed. * @return *   The items HTML. */function aggregator_page_source($arg1, $arg2 = NULL) {  // If there are two arguments then this function is the categorize form, and  // $arg1 is $form_state and $arg2 is $feed. Otherwise, $arg1 is $feed.  $feed = is_array($arg2) ? $arg2 : $arg1;  $feed = (object)$feed;  drupal_set_title(check_plain($feed->title));  $feed_source = theme('aggregator_feed_source', $feed);  // It is safe to include the fid in the query because it's loaded from the  // database by aggregator_feed_load.  $items = aggregator_feed_items_load('SELECT * FROM {aggregator_item} WHERE fid = '. $feed->fid .' ORDER BY timestamp DESC, iid DESC');  return _aggregator_page_list($items, arg(3), $feed_source);}/** * Menu callback; displays all the items aggregated in a particular category. * * If there are two arguments then this function is called as a form. * * @param $arg1 *   If there are two arguments then $arg1 is $form_state. Otherwise, $arg1 is $category. * @param $arg2 *   If there are two arguments then $arg2 is $category. * @return *   The items HTML. */function aggregator_page_category($arg1, $arg2 = NULL) {  // If there are two arguments then we are called as a form, $arg1 is  // $form_state and $arg2 is $category. Otherwise, $arg1 is $category.  $category = is_array($arg2) ? $arg2 : $arg1;  drupal_add_feed(url('aggregator/rss/'. $category['cid']), variable_get('site_name', 'Drupal') .' '. t('aggregator - @title', array('@title' => $category['title'])));  // It is safe to include the cid in the query because it's loaded from the  // database by aggregator_category_load.  $items = aggregator_feed_items_load('SELECT i.*, f.title AS ftitle, f.link AS flink FROM {aggregator_category_item} c LEFT JOIN {aggregator_item} i ON c.iid = i.iid LEFT JOIN {aggregator_feed} f ON i.fid = f.fid WHERE cid = '. $category['cid'] .' ORDER BY timestamp DESC, i.iid DESC');  return _aggregator_page_list($items, arg(3));}/** * Load feed items by passing a SQL query. * * @param $sql *   The query to be executed. * @return *   An array of the feed items. */function aggregator_feed_items_load($sql) {  $items = array();  if (isset($sql)) {    $result = pager_query($sql, 20);    while ($item = db_fetch_object($result)) {      $result_category = db_query('SELECT c.title, c.cid FROM {aggregator_category_item} ci LEFT JOIN {aggregator_category} c ON ci.cid = c.cid WHERE ci.iid = %d ORDER BY c.title', $item->iid);      $item->categories = array();      while ($item_categories = db_fetch_object($result_category)) {        $item->categories[] = $item_categories;      }      $items[$item->iid] = $item;    }  }  return $items;}/** * Prints an aggregator page listing a number of feed items. * * Various menu callbacks use this function to print their feeds. * * @param $items *   The items to be listed. * @param $op *   Which form should be added to the items. Only 'categorize' is now recognized. * @param $feed_source *   The feed source URL. * @return *   The items HTML. */function _aggregator_page_list($items, $op, $feed_source = '') {  if (user_access('administer news feeds') && ($op == 'categorize')) {    // Get form data.    $output = aggregator_categorize_items($items, $feed_source);  }  else {    // Assemble themed output.    $output = $feed_source;    foreach ($items as $item) {      $output .= theme('aggregator_item', $item);    }    $output = theme('aggregator_wrapper', $output);  }  return $output;}/** * Form builder; build the page list form. * * @param $items *   An array of the feed items. * @param $feed_source *   The feed source URL. * @return *   The form structure. * @ingroup forms * @see aggregator_categorize_items_validate() * @see aggregator_categorize_items_submit() */function aggregator_categorize_items($items, $feed_source = '') {  $form['#submit'][] = 'aggregator_categorize_items_submit';  $form['#validate'][] = 'aggregator_categorize_items_validate';  $form['#theme'] = 'aggregator_categorize_items';  $form['feed_source'] = array('#value' => $feed_source);  $categories = array();  $done = FALSE;  $form['items'] = array();  $form['categories'] = array('#tree' => TRUE);  foreach ($items as $item) {    $form['items'][$item->iid] = array('#value' => theme('aggregator_item', $item));    $form['categories'][$item->iid] = array();    $categories_result = db_query('SELECT c.cid, c.title, ci.iid FROM {aggregator_category} c LEFT JOIN {aggregator_category_item} ci ON c.cid = ci.cid AND ci.iid = %d', $item->iid);    $selected = array();    while ($category = db_fetch_object($categories_result)) {      if (!$done) {        $categories[$category->cid] = check_plain($category->title);      }      if ($category->iid) {        $selected[] = $category->cid;      }    }    $done = TRUE;    $form['categories'][$item->iid] = array(      '#type' => variable_get('aggregator_category_selector', 'checkboxes'),      '#default_value' => $selected,      '#options' => $categories,      '#size' => 10,      '#multiple' => TRUE    );  }  $form['submit'] = array('#type' => 'submit', '#value' => t('Save categories'));  return $form;}/** * Validate aggregator_categorize_items form submissions. */function aggregator_categorize_items_validate($form, &$form_state) {  if (!user_access('administer news feeds')) {    form_error($form, t('You are not allowed to categorize this feed item.'));  }}/** * Process aggregator_categorize_items form submissions. */function aggregator_categorize_items_submit($form, &$form_state) {  if (!empty($form_state['values']['categories'])) {    foreach ($form_state['values']['categories'] as $iid => $selection) {      db_query('DELETE FROM {aggregator_category_item} WHERE iid = %d', $iid);      foreach ($selection as $cid) {        if ($cid) {          db_query('INSERT INTO {aggregator_category_item} (cid, iid) VALUES (%d, %d)', $cid, $iid);        }      }    }  }  drupal_set_message(t('The categories have been saved.'));}/** * Theme the page list form for assigning categories. * * @param $form *   An associative array containing the structure of the form. * @return *   The output HTML. * @ingroup themeable */function theme_aggregator_categorize_items($form) {  $output = drupal_render($form['feed_source']);  $rows = array();  if ($form['items']) {    foreach (element_children($form['items']) as $key) {      if (is_array($form['items'][$key])) {        $rows[] = array(          drupal_render($form['items'][$key]),          array('data' => drupal_render($form['categories'][$key]), 'class' => 'categorize-item'),        );      }    }  }  $output .= theme('table', array('', t('Categorize')), $rows);  $output .= drupal_render($form['submit']);  $output .= drupal_render($form);  return theme('aggregator_wrapper', $output);}/** * Process variables for aggregator-wrapper.tpl.php. * * @see aggregator-wrapper.tpl.php */function template_preprocess_aggregator_wrapper(&$variables) {  $variables['pager'] = theme('pager', NULL, 20, 0);}/** * Process variables for aggregator-item.tpl.php. * * @see aggregator-item.tpl.php */function template_preprocess_aggregator_item(&$variables) {  $item = $variables['item'];  $variables['feed_url'] = check_url($item->link);  $variables['feed_title'] = check_plain($item->title);  $variables['content'] = aggregator_filter_xss($item->description);  $variables['source_url'] = '';  $variables['source_title'] = '';  if (isset($item->ftitle) && isset($item->fid)) {    $variables['source_url'] = url("aggregator/sources/$item->fid");    $variables['source_title'] = check_plain($item->ftitle);  }  if (date('Ymd', $item->timestamp) == date('Ymd')) {    $variables['source_date'] = t('%ago ago', array('%ago' => format_interval(time() - $item->timestamp)));  }  else {    $variables['source_date'] = format_date($item->timestamp, 'custom', variable_get('date_format_medium', 'D, m/d/Y - H:i'));  }  $variables['categories'] = array();  foreach ($item->categories as $category) {    $variables['categories'][$category->cid] = l($category->title, 'aggregator/categories/'. $category->cid);  }}/** * Menu callback; displays all the feeds used by the aggregator. */function aggregator_page_sources() {  $result = db_query('SELECT f.fid, f.title, f.description, f.image, MAX(i.timestamp) AS last FROM {aggregator_feed} f LEFT JOIN {aggregator_item} i ON f.fid = i.fid GROUP BY f.fid, f.title, f.description, f.image ORDER BY last DESC, f.title');  $output = '';  while ($feed = db_fetch_object($result)) {    // Most recent items:    $summary_items = array();    if (variable_get('aggregator_summary_items', 3)) {      $items = db_query_range('SELECT i.title, i.timestamp, i.link FROM {aggregator_item} i WHERE i.fid = %d ORDER BY i.timestamp DESC', $feed->fid, 0, variable_get('aggregator_summary_items', 3));      while ($item = db_fetch_object($items)) {        $summary_items[] = theme('aggregator_summary_item', $item);      }    }    $feed->url = url('aggregator/sources/'. $feed->fid);    $output .= theme('aggregator_summary_items', $summary_items, $feed);  }  $output .= theme('feed_icon', url('aggregator/opml'), t('OPML feed'));  return theme('aggregator_wrapper', $output);}/** * Menu callback; displays all the categories used by the aggregator. */function aggregator_page_categories() {  $result = db_query('SELECT c.cid, c.title, c.description FROM {aggregator_category} c LEFT JOIN {aggregator_category_item} ci ON c.cid = ci.cid LEFT JOIN {aggregator_item} i ON ci.iid = i.iid GROUP BY c.cid, c.title, c.description');  $output = '';  while ($category = db_fetch_object($result)) {    if (variable_get('aggregator_summary_items', 3)) {      $summary_items = array();      $items = db_query_range('SELECT i.title, i.timestamp, i.link, f.title as feed_title, f.link as feed_link FROM {aggregator_category_item} ci LEFT JOIN {aggregator_item} i ON i.iid = ci.iid LEFT JOIN {aggregator_feed} f ON i.fid = f.fid WHERE ci.cid = %d ORDER BY i.timestamp DESC', $category->cid, 0, variable_get('aggregator_summary_items', 3));      while ($item = db_fetch_object($items)) {        $summary_items[] = theme('aggregator_summary_item', $item);      }    }    $category->url = url('aggregator/categories/'. $category->cid);    $output .= theme('aggregator_summary_items', $summary_items, $category);  }  return theme('aggregator_wrapper', $output);}/** * Menu callback; generate an RSS 0.92 feed of aggregator items or categories. */function aggregator_page_rss() {  $result = NULL;  // arg(2) is the passed cid, only select for that category  if (arg(2)) {    $category = db_fetch_object(db_query('SELECT cid, title FROM {aggregator_category} WHERE cid = %d', arg(2)));    $sql = 'SELECT i.*, f.title AS ftitle, f.link AS flink FROM {aggregator_category_item} c LEFT JOIN {aggregator_item} i ON c.iid = i.iid LEFT JOIN {aggregator_feed} f ON i.fid = f.fid WHERE cid = %d ORDER BY timestamp DESC, i.iid DESC';    $result = db_query_range($sql, $category->cid, 0, variable_get('feed_default_items', 10));  }  // or, get the default aggregator items  else {    $category = NULL;    $sql = 'SELECT i.*, f.title AS ftitle, f.link AS flink FROM {aggregator_item} i INNER JOIN {aggregator_feed} f ON i.fid = f.fid ORDER BY i.timestamp DESC, i.iid DESC';    $result = db_query_range($sql, 0, variable_get('feed_default_items', 10));  }  $feeds = array();  while ($item = db_fetch_object($result)) {    $feeds[] = $item;  }  return theme('aggregator_page_rss', $feeds, $category);}/** * Theme the RSS output. * * @param $feeds *   An array of the feeds to theme. * @param $category *   A common category, if any, for all the feeds. * @ingroup themeable */function theme_aggregator_page_rss($feeds, $category = NULL) {  drupal_set_header('Content-Type: application/rss+xml; charset=utf-8');  $items = '';  $feed_length = variable_get('feed_item_length', 'teaser');  foreach ($feeds as $feed) {    switch ($feed_length) {      case 'teaser':        $teaser = node_teaser($feed->description);        if ($teaser != $feed->description) {          $teaser .= '<p><a href="'. check_url($feed->link) .'">'. t('read more') ."</a></p>\n";        }        $feed->description = $teaser;        break;      case 'title':        $feed->description = '';        break;    }    $items .= format_rss_item($feed->ftitle .': '. $feed->title, $feed->link, $feed->description, array('pubDate' => date('r', $feed->timestamp)));  }  $site_name = variable_get('site_name', 'Drupal');  $url = url((isset($category) ? 'aggregator/categories/'. $category->cid : 'aggregator'), array('absolute' => TRUE));  $description = isset($category) ? t('@site_name - aggregated feeds in category @title', array('@site_name' => $site_name, '@title' => $category->title)) : t('@site_name - aggregated feeds', array('@site_name' => $site_name));  $output = "<?xml version=\"1.0\" encoding=\"utf-8\"?>\n";  $output .= "<rss version=\"2.0\">\n";  $output .= format_rss_channel(t('@site_name aggregator', array('@site_name' => $site_name)), $url, $description, $items);  $output .= "</rss>\n";  print $output;}/** * Menu callback; generates an OPML representation of all feeds. * * @param $cid *   If set, feeds are exported only from a category with this ID. Otherwise, all feeds are exported. * @return *   The output XML. */function aggregator_page_opml($cid = NULL) {  if ($cid) {    $result = db_query('SELECT f.title, f.url FROM {aggregator_feed} f LEFT JOIN {aggregator_category_feed} c on f.fid = c.fid WHERE c.cid = %d ORDER BY title', $cid);  }  else {    $result = db_query('SELECT * FROM {aggregator_feed} ORDER BY title');  }  $feeds = array();  while ($item = db_fetch_object($result)) {    $feeds[] = $item;  }  return theme('aggregator_page_opml', $feeds);}/** * Theme the OPML feed output. * * @param $feeds *   An array of the feeds to theme. * @ingroup themeable */function theme_aggregator_page_opml($feeds) {  drupal_set_header('Content-Type: text/xml; charset=utf-8');  $output = "<?xml version=\"1.0\" encoding=\"utf-8\"?>\n";  $output .= "<opml version=\"1.1\">\n";  $output .= "<head>\n";  $output .= '<title>'. check_plain(variable_get('site_name', 'Drupal')) ."</title>\n";  $output .= '<dateModified>'. gmdate('r') ."</dateModified>\n";  $output .= "</head>\n";  $output .= "<body>\n";  foreach ($feeds as $feed) {    $output .= '<outline text="'. check_plain($feed->title) .'" xmlUrl="'. check_url($feed->url) ."\" />\n";  }  $output .= "</body>\n";  $output .= "</opml>\n";  print $output;}/** * Process variables for aggregator-summary-items.tpl.php. * * @see aggregator-summary-item.tpl.php */function template_preprocess_aggregator_summary_items(&$variables) {  $variables['title'] = check_plain($variables['source']->title);  $variables['summary_list'] = theme('item_list', $variables['summary_items']);  $variables['source_url'] = $variables['source']->url;}/** * Process variables for aggregator-summary-item.tpl.php. * * @see aggregator-summary-item.tpl.php */function template_preprocess_aggregator_summary_item(&$variables) {  $item = $variables['item'];  $variables['feed_url'] = check_url($item->link);  $variables['feed_title'] = check_plain($item->title);  $variables['feed_age'] = t('%age old', array('%age' => format_interval(time() - $item->timestamp)));  $variables['source_url'] = '';  $variables['source_title'] = '';  if (!empty($item->feed_link)) {    $variables['source_url'] = check_url($item->feed_link);    $variables['source_title'] = check_plain($item->feed_title);  }}/** * Process variables for aggregator-feed-source.tpl.php. * * @see aggregator-feed-source.tpl.php */function template_preprocess_aggregator_feed_source(&$variables) {  $feed = $variables['feed'];  $variables['source_icon'] = theme('feed_icon', $feed->url, t('!title feed', array('!title' => $feed->title)));  $variables['source_image'] = $feed->image;  $variables['source_description'] = aggregator_filter_xss($feed->description);  $variables['source_url'] = check_url(url($feed->link, array('absolute' => TRUE)));  if ($feed->checked) {    $variables['last_checked'] = t('@time ago', array('@time' => format_interval(time() - $feed->checked)));  }  else {    $variables['last_checked'] = t('never');  }  if (user_access('administer news feeds')) {    $variables['last_checked'] = l($variables['last_checked'], 'admin/content/aggregator');  }}
<?php// $Id$/** * @file * User page callbacks for the statistics module. */function statistics_node_tracker() {  if ($node = node_load(arg(1))) {    $header = array(        array('data' => t('Time'), 'field' => 'a.timestamp', 'sort' => 'desc'),        array('data' => t('Referrer'), 'field' => 'a.url'),        array('data' => t('User'), 'field' => 'u.name'),        array('data' => t('Operations')));    $result = pager_query("SELECT a.aid, a.timestamp, a.url, a.uid, u.name FROM {accesslog} a LEFT JOIN {users} u ON a.uid = u.uid WHERE a.path = 'node/%d' OR a.path LIKE 'node/%d/%%'". tablesort_sql($header), 30, 0, NULL, $node->nid, $node->nid);    $rows = array();    while ($log = db_fetch_object($result)) {      $rows[] = array(        array('data' => format_date($log->timestamp, 'small'), 'class' => 'nowrap'),        _statistics_link($log->url),        theme('username', $log),        l(t('details'), "admin/reports/access/$log->aid"));    }    if (empty($rows)) {      $rows[] = array(array('data' => t('No statistics available.'), 'colspan' => 4));    }    drupal_set_title(check_plain($node->title));    $output = theme('table', $header, $rows);    $output .= theme('pager', NULL, 30, 0);    return $output;  }  else {    drupal_not_found();  }}function statistics_user_tracker() {  if ($account = user_load(array('uid' => arg(1)))) {    $header = array(        array('data' => t('Timestamp'), 'field' => 'timestamp', 'sort' => 'desc'),        array('data' => t('Page'), 'field' => 'path'),        array('data' => t('Operations')));    $result = pager_query('SELECT aid, timestamp, path, title FROM {accesslog} WHERE uid = %d'. tablesort_sql($header), 30, 0, NULL, $account->uid);    $rows = array();    while ($log = db_fetch_object($result)) {      $rows[] = array(        array('data' => format_date($log->timestamp, 'small'), 'class' => 'nowrap'),        _statistics_format_item($log->title, $log->path),        l(t('details'), "admin/reports/access/$log->aid"));    }    if (empty($rows)) {      $rows[] = array(array('data' => t('No statistics available.'), 'colspan' => 3));    }    drupal_set_title(check_plain($account->name));    $output = theme('table', $header, $rows);    $output .= theme('pager', NULL, 30, 0);    return $output;  }  else {    drupal_not_found();  }}
<?php// $Id$/** * @file block-admin-display-form.tpl.php * Default theme implementation to configure blocks. * * Available variables: * - $block_regions: An array of regions. Keyed by name with the title as value. * - $block_listing: An array of blocks keyed by region and then delta. * - $form_submit: Form submit button. * - $throttle: TRUE or FALSE depending on throttle module being enabled. * * Each $block_listing[$region] contains an array of blocks for that region. * * Each $data in $block_listing[$region] contains: * - $data->region_title: Region title for the listed block. * - $data->block_title: Block title. * - $data->region_select: Drop-down menu for assigning a region. * - $data->weight_select: Drop-down menu for setting weights. * - $data->throttle_check: Checkbox to enable throttling. * - $data->configure_link: Block configuration link. * - $data->delete_link: For deleting user added blocks. * * @see template_preprocess_block_admin_display_form() * @see theme_block_admin_display() */?><?php  // Add table javascript.  drupal_add_js('misc/tableheader.js');  drupal_add_js(drupal_get_path('module', 'block') .'/block.js');  foreach ($block_regions as $region => $title) {    drupal_add_tabledrag('blocks', 'match', 'sibling', 'block-region-select', 'block-region-'. $region, NULL, FALSE);    drupal_add_tabledrag('blocks', 'order', 'sibling', 'block-weight', 'block-weight-'. $region);  }?><table id="blocks" class="sticky-enabled">  <thead>    <tr>      <th><?php print t('Block'); ?></th>      <th><?php print t('Region'); ?></th>      <th><?php print t('Weight'); ?></th>      <?php if ($throttle): ?>        <th><?php print t('Throttle'); ?></th>      <?php endif; ?>      <th colspan="2"><?php print t('Operations'); ?></th>    </tr>  </thead>  <tbody>    <?php $row = 0; ?>    <?php foreach ($block_regions as $region => $title): ?>      <tr class="region region-<?php print $region?>">        <td colspan="<?php print $throttle ? '6' : '5'; ?>" class="region"><?php print $title; ?></td>      </tr>      <tr class="region-message region-<?php print $region?>-message <?php print empty($block_listing[$region]) ? 'region-empty' : 'region-populated'; ?>">        <td colspan="<?php print $throttle ? '6' : '5'; ?>"><em><?php print t('No blocks in this region'); ?></em></td>      </tr>      <?php foreach ($block_listing[$region] as $delta => $data): ?>      <tr class="draggable <?php print $row % 2 == 0 ? 'odd' : 'even'; ?><?php print $data->row_class ? ' '. $data->row_class : ''; ?>">        <td class="block"><?php print $data->block_title; ?></td>        <td><?php print $data->region_select; ?></td>        <td><?php print $data->weight_select; ?></td>        <?php if ($throttle): ?>          <td><?php print $data->throttle_check; ?></td>        <?php endif; ?>        <td><?php print $data->configure_link; ?></td>        <td><?php print $data->delete_link; ?></td>      </tr>      <?php $row++; ?>      <?php endforeach; ?>    <?php endforeach; ?>  </tbody></table><?php print $form_submit; ?>
<?php// $Id$?><div class="comment<?php print ' '. $status; ?>">  <?php if ($picture) : ?>    <?php print $picture ?>  <?php endif; ?>  <h3 class="title"><?php print $title ?></h3>  <div class="submitted"><?php print $submitted ?><?php if ($comment->new) : ?><span class="new"> *<?php print $new ?></span><?php endif; ?></div>  <div class="content">    <?php print $content ?>    <?php if ($signature): ?>      <div class="clear-block">        <div></div>        <?php print $signature ?>      </div>    <?php endif; ?>  </div>  <!-- BEGIN: links -->  <div class="links">&raquo; <?php print $links ?></div>  <!-- END: links --></div>
<?php// $Id$/** * @file * GD2 toolkit for image manipulation within Drupal. *//** * @ingroup image * @{ *//** * Retrieve information about the toolkit. */function image_gd_info() {  return array('name' => 'gd', 'title' => t('GD2 image manipulation toolkit'));}/** * Retrieve settings for the GD2 toolkit. */function image_gd_settings() {  if (image_gd_check_settings()) {    $form = array();    $form['status'] = array(      '#value' => t('The GD toolkit is installed and working properly.')    );    $form['image_jpeg_quality'] = array(      '#type' => 'textfield',      '#title' => t('JPEG quality'),      '#description' => t('Define the image quality for JPEG manipulations. Ranges from 0 to 100. Higher values mean better image quality but bigger files.'),      '#size' => 10,      '#maxlength' => 3,      '#default_value' => variable_get('image_jpeg_quality', 75),      '#field_suffix' => t('%'),    );    $form['#element_validate'] = array('image_gd_settings_validate');        return $form;  }  else {    form_set_error('image_toolkit', t('The GD image toolkit requires that the GD module for PHP be installed and configured properly. For more information see <a href="@url">PHP\'s image documentation</a>.', array('@url' => 'http://php.net/image')));    return FALSE;  }}/** * Validate the submitted GD settings. */function image_gd_settings_validate($form, &$form_state) {  // Validate image quality range.  $value = $form_state['values']['image_jpeg_quality'];  if (!is_numeric($value) || $value < 0 || $value > 100) {    form_set_error('image_jpeg_quality', t('JPEG quality must be a number between 0 and 100.'));  }}/** * Verify GD2 settings (that the right version is actually installed). * * @return *   A boolean indicating if the GD toolkit is avaiable on this machine. */function image_gd_check_settings() {  if ($check = get_extension_funcs('gd')) {    if (in_array('imagegd2', $check)) {      // GD2 support is available.      return TRUE;    }  }  return FALSE;}/** * Scale an image to the specified size using GD. */function image_gd_resize($source, $destination, $width, $height) {  if (!file_exists($source)) {    return FALSE;  }  $info = image_get_info($source);  if (!$info) {    return FALSE;  }  $im = image_gd_open($source, $info['extension']);  if (!$im) {    return FALSE;  }  $res = imagecreatetruecolor($width, $height);  if ($info['extension'] == 'png') {    $transparency = imagecolorallocatealpha($res, 0, 0, 0, 127);    imagealphablending($res, FALSE);    imagefilledrectangle($res, 0, 0, $width, $height, $transparency);    imagealphablending($res, TRUE);    imagesavealpha($res, TRUE);  }  elseif ($info['extension'] == 'gif') {    // If we have a specific transparent color.    $transparency_index = imagecolortransparent($im);    if ($transparency_index >= 0) {      // Get the original image's transparent color's RGB values.      $transparent_color = imagecolorsforindex($im, $transparency_index);      // Allocate the same color in the new image resource.      $transparency_index = imagecolorallocate($res, $transparent_color['red'], $transparent_color['green'], $transparent_color['blue']);      // Completely fill the background of the new image with allocated color.      imagefill($res, 0, 0, $transparency_index);      // Set the background color for new image to transparent.      imagecolortransparent($res, $transparency_index);      // Find number of colors in the images palette.      $number_colors = imagecolorstotal($im);      // Convert from true color to palette to fix transparency issues.      imagetruecolortopalette($res, TRUE, $number_colors);    }  }  imagecopyresampled($res, $im, 0, 0, 0, 0, $width, $height, $info['width'], $info['height']);  $result = image_gd_close($res, $destination, $info['extension']);  imagedestroy($res);  imagedestroy($im);  return $result;}/** * Rotate an image the given number of degrees. */function image_gd_rotate($source, $destination, $degrees, $background = 0x000000) {  if (!function_exists('imageRotate')) {    return FALSE;  }  $info = image_get_info($source);  if (!$info) {    return FALSE;  }  $im = image_gd_open($source, $info['extension']);  if (!$im) {    return FALSE;  }  $res = imageRotate($im, $degrees, $background);  $result = image_gd_close($res, $destination, $info['extension']);  return $result;}/** * Crop an image using the GD toolkit. */function image_gd_crop($source, $destination, $x, $y, $width, $height) {  $info = image_get_info($source);  if (!$info) {    return FALSE;  }  $im = image_gd_open($source, $info['extension']);  $res = imageCreateTrueColor($width, $height);  imageCopy($res, $im, 0, 0, $x, $y, $width, $height);  $result = image_gd_close($res, $destination, $info['extension']);  imageDestroy($res);  imageDestroy($im);  return $result;}/** * GD helper function to create an image resource from a file. * * @param $file *   A string file path where the iamge should be saved. * @param $extension *   A string containing one of the following extensions: gif, jpg, jpeg, png. * @return *   An image resource, or FALSE on error. */function image_gd_open($file, $extension) {  $extension = str_replace('jpg', 'jpeg', $extension);  $open_func = 'imageCreateFrom'. $extension;  if (!function_exists($open_func)) {    return FALSE;  }  return $open_func($file);}/** * GD helper to write an image resource to a destination file. * * @param $res *   An image resource created with image_gd_open(). * @param $destination *   A string file path where the iamge should be saved. * @param $extension *   A string containing one of the following extensions: gif, jpg, jpeg, png. * @return *   Boolean indicating success. */function image_gd_close($res, $destination, $extension) {  $extension = str_replace('jpg', 'jpeg', $extension);  $close_func = 'image'. $extension;  if (!function_exists($close_func)) {    return FALSE;  }  if ($extension == 'jpeg') {    return $close_func($res, $destination, variable_get('image_jpeg_quality', 75));  }  else {    return $close_func($res, $destination);  }}/** * @} End of "ingroup image". */
<?php// $Id$/** * @file * Admin page callbacks for the comment module. *//** * Menu callback; present an administrative comment listing. */function comment_admin($type = 'new') {  $edit = $_POST;  if (isset($edit['operation']) && ($edit['operation'] == 'delete') && isset($edit['comments']) && $edit['comments']) {    return drupal_get_form('comment_multiple_delete_confirm');  }  else {    return drupal_get_form('comment_admin_overview', $type, arg(4));  }}/** * Form builder; Builds the comment overview form for the admin. * * @param $type *   Not used. * @param $arg *   Current path's fourth component deciding the form type (Published comments/Approval queue) * @return *   The form structure. * @ingroup forms * @see comment_admin_overview_validate() * @see comment_admin_overview_submit() * @see theme_comment_admin_overview() */function comment_admin_overview($type = 'new', $arg) {  // build an 'Update options' form  $form['options'] = array(    '#type' => 'fieldset', '#title' => t('Update options'),    '#prefix' => '<div class="container-inline">', '#suffix' => '</div>'  );  $options = array();  foreach (comment_operations($arg == 'approval' ? 'publish' : 'unpublish') as $key => $value) {    $options[$key] = $value[0];  }  $form['options']['operation'] = array('#type' => 'select', '#options' => $options, '#default_value' => 'publish');  $form['options']['submit'] = array('#type' => 'submit', '#value' => t('Update'));  // load the comments that we want to display  $status = ($arg == 'approval') ? COMMENT_NOT_PUBLISHED : COMMENT_PUBLISHED;  $form['header'] = array('#type' => 'value', '#value' => array(    theme('table_select_header_cell'),    array('data' => t('Subject'), 'field' => 'subject'),    array('data' => t('Author'), 'field' => 'name'),    array('data' => t('Posted in'), 'field' => 'node_title'),    array('data' => t('Time'), 'field' => 'timestamp', 'sort' => 'desc'),    array('data' => t('Operations'))  ));  $result = pager_query('SELECT c.subject, c.nid, c.cid, c.comment, c.timestamp, c.status, c.name, c.homepage, u.name AS registered_name, u.uid, n.title as node_title FROM {comments} c INNER JOIN {users} u ON u.uid = c.uid INNER JOIN {node} n ON n.nid = c.nid WHERE c.status = %d'. tablesort_sql($form['header']['#value']), 50, 0, NULL, $status);  // build a table listing the appropriate comments  $destination = drupal_get_destination();  while ($comment = db_fetch_object($result)) {    $comments[$comment->cid] = '';    $comment->name = $comment->uid ? $comment->registered_name : $comment->name;    $form['subject'][$comment->cid] = array('#value' => l($comment->subject, 'node/'. $comment->nid, array('attributes' => array('title' => truncate_utf8($comment->comment, 128)), 'fragment' => 'comment-'. $comment->cid)));    $form['username'][$comment->cid] = array('#value' => theme('username', $comment));    $form['node_title'][$comment->cid] = array('#value' => l($comment->node_title, 'node/'. $comment->nid));    $form['timestamp'][$comment->cid] = array('#value' => format_date($comment->timestamp, 'small'));    $form['operations'][$comment->cid] = array('#value' => l(t('edit'), 'comment/edit/'. $comment->cid, array('query' => $destination)));  }  $form['comments'] = array('#type' => 'checkboxes', '#options' => isset($comments) ? $comments: array());  $form['pager'] = array('#value' => theme('pager', NULL, 50, 0));  return $form;}/** * Validate comment_admin_overview form submissions. * * We can't execute any 'Update options' if no comments were selected. */function comment_admin_overview_validate($form, &$form_state) {  $form_state['values']['comments'] = array_diff($form_state['values']['comments'], array(0));  if (count($form_state['values']['comments']) == 0) {    form_set_error('', t('Please select one or more comments to perform the update on.'));  }}/** * Process comment_admin_overview form submissions. * * Execute the chosen 'Update option' on the selected comments, such as * publishing, unpublishing or deleting. */function comment_admin_overview_submit($form, &$form_state) {  $operations = comment_operations();  if (!empty($operations[$form_state['values']['operation']][1])) {    // extract the appropriate database query operation    $query = $operations[$form_state['values']['operation']][1];    foreach ($form_state['values']['comments'] as $cid => $value) {      if ($value) {        // perform the update action, then refresh node statistics        db_query($query, $cid);        $comment = _comment_load($cid);        _comment_update_node_statistics($comment->nid);        // Allow modules to respond to the updating of a comment.        comment_invoke_comment($comment, $form_state['values']['operation']);        // Add an entry to the watchdog log.        watchdog('content', 'Comment: updated %subject.', array('%subject' => $comment->subject), WATCHDOG_NOTICE, l(t('view'), 'node/'. $comment->nid, array('fragment' => 'comment-'. $comment->cid)));      }    }    cache_clear_all();    drupal_set_message(t('The update has been performed.'));    $form_state['redirect'] = 'admin/content/comment';  }}/** * Theme the comment admin form. * * @param $form *   An associative array containing the structure of the form. * @ingroup themeable */function theme_comment_admin_overview($form) {  $output = drupal_render($form['options']);  if (isset($form['subject']) && is_array($form['subject'])) {    foreach (element_children($form['subject']) as $key) {      $row = array();      $row[] = drupal_render($form['comments'][$key]);      $row[] = drupal_render($form['subject'][$key]);      $row[] = drupal_render($form['username'][$key]);      $row[] = drupal_render($form['node_title'][$key]);      $row[] = drupal_render($form['timestamp'][$key]);      $row[] = drupal_render($form['operations'][$key]);      $rows[] = $row;    }  }  else {    $rows[] = array(array('data' => t('No comments available.'), 'colspan' => '6'));  }  $output .= theme('table', $form['header']['#value'], $rows);  if ($form['pager']['#value']) {    $output .= drupal_render($form['pager']);  }  $output .= drupal_render($form);  return $output;}/** * List the selected comments and verify that the admin really wants to delete * them. * * @param $form_state *   An associative array containing the current state of the form. * @return *   TRUE if the comments should be deleted, FALSE otherwise. * @ingroup forms * @see comment_multiple_delete_confirm_submit() */function comment_multiple_delete_confirm(&$form_state) {  $edit = $form_state['post'];  $form['comments'] = array('#prefix' => '<ul>', '#suffix' => '</ul>', '#tree' => TRUE);  // array_filter() returns only elements with actual values  $comment_counter = 0;  foreach (array_filter($edit['comments']) as $cid => $value) {    $comment = _comment_load($cid);    if (is_object($comment) && is_numeric($comment->cid)) {      $subject = db_result(db_query('SELECT subject FROM {comments} WHERE cid = %d', $cid));      $form['comments'][$cid] = array('#type' => 'hidden', '#value' => $cid, '#prefix' => '<li>', '#suffix' => check_plain($subject) .'</li>');      $comment_counter++;    }  }  $form['operation'] = array('#type' => 'hidden', '#value' => 'delete');  if (!$comment_counter) {    drupal_set_message(t('There do not appear to be any comments to delete or your selected comment was deleted by another administrator.'));    drupal_goto('admin/content/comment');  }  else {    return confirm_form($form,                        t('Are you sure you want to delete these comments and all their children?'),                        'admin/content/comment', t('This action cannot be undone.'),                        t('Delete comments'), t('Cancel'));  }}/** * Process comment_multiple_delete_confirm form submissions. * * Perform the actual comment deletion. */function comment_multiple_delete_confirm_submit($form, &$form_state) {  if ($form_state['values']['confirm']) {    foreach ($form_state['values']['comments'] as $cid => $value) {      $comment = _comment_load($cid);      _comment_delete_thread($comment);      _comment_update_node_statistics($comment->nid);    }    cache_clear_all();    drupal_set_message(t('The comments have been deleted.'));  }  $form_state['redirect'] = 'admin/content/comment';}/** * Menu callback; delete a comment. * * @param $cid *   The comment do be deleted. */function comment_delete($cid = NULL) {  $comment = db_fetch_object(db_query('SELECT c.*, u.name AS registered_name, u.uid FROM {comments} c INNER JOIN {users} u ON u.uid = c.uid WHERE c.cid = %d', $cid));  $comment->name = $comment->uid ? $comment->registered_name : $comment->name;  $output = '';  if (is_object($comment) && is_numeric($comment->cid)) {    $output = drupal_get_form('comment_confirm_delete', $comment);  }  else {    drupal_set_message(t('The comment no longer exists.'));  }  return $output;}/** * Form builder; Builds the confirmation form for deleting a single comment. * * @ingroup forms * @see comment_confirm_delete_submit() */function comment_confirm_delete(&$form_state, $comment) {  $form = array();  $form['#comment'] = $comment;  return confirm_form(    $form,    t('Are you sure you want to delete the comment %title?', array('%title' => $comment->subject)),    'node/'. $comment->nid,    t('Any replies to this comment will be lost. This action cannot be undone.'),    t('Delete'),    t('Cancel'),    'comment_confirm_delete');}/** * Process comment_confirm_delete form submissions. */function comment_confirm_delete_submit($form, &$form_state) {  drupal_set_message(t('The comment and all its replies have been deleted.'));  $comment = $form['#comment'];  // Delete comment and its replies.  _comment_delete_thread($comment);  _comment_update_node_statistics($comment->nid);  // Clear the cache so an anonymous user sees that his comment was deleted.  cache_clear_all();  $form_state['redirect'] = "node/$comment->nid";}/** * Perform the actual deletion of a comment and all its replies. * * @param $comment *   An associative array describing the comment to be deleted. */function _comment_delete_thread($comment) {  if (!is_object($comment) || !is_numeric($comment->cid)) {    watchdog('content', 'Cannot delete non-existent comment.', array(), WATCHDOG_WARNING);    return;  }  // Delete the comment:  db_query('DELETE FROM {comments} WHERE cid = %d', $comment->cid);  watchdog('content', 'Comment: deleted %subject.', array('%subject' => $comment->subject));  comment_invoke_comment($comment, 'delete');  // Delete the comment's replies  $result = db_query('SELECT c.*, u.name AS registered_name, u.uid FROM {comments} c INNER JOIN {users} u ON u.uid = c.uid WHERE pid = %d', $comment->cid);  while ($comment = db_fetch_object($result)) {    $comment->name = $comment->uid ? $comment->registered_name : $comment->name;    _comment_delete_thread($comment);  }}
<?php// $Id$/** * @file search-block-form.tpl.php * Default theme implementation for displaying a search form within a block region. * * Available variables: * - $search_form: The complete search form ready for print. * - $search: Array of keyed search elements. Can be used to print each form *   element separately. * * Default keys within $search: * - $search['search_block_form']: Text input area wrapped in a div. * - $search['submit']: Form submit button. * - $search['hidden']: Hidden form elements. Used to validate forms when submitted. * * Since $search is keyed, a direct print of the form element is possible. * Modules can add to the search form so it is recommended to check for their * existance before printing. The default keys will always exist. * *   <?php if (isset($search['extra_field'])): ?> *     <div class="extra-field"> *       <?php print $search['extra_field']; ?> *     </div> *   <?php endif; ?> * * To check for all available data within $search, use the code below. * *   <?php print '<pre>'. check_plain(print_r($search, 1)) .'</pre>'; ?> * * @see template_preprocess_search_block_form() */?><div class="container-inline">  <?php print $search_form; ?></div>
<?php// $Id$/** * @file * Handles incoming requests to fire off regularly-scheduled tasks (cron jobs). */include_once './includes/bootstrap.inc';drupal_bootstrap(DRUPAL_BOOTSTRAP_FULL);drupal_cron_run();
<?php// $Id$/** * @file poll-results-block.tpl.php * Display the poll results in a block. * * Variables available: * - $title: The title of the poll. * - $results: The results of the poll. * - $votes: The total results in the poll. * - $links: Links in the poll. * - $nid: The nid of the poll * - $cancel_form: A form to cancel the user's vote, if allowed. * - $raw_links: The raw array of links. * - $vote: The choice number of the current user's vote. * * @see template_preprocess_poll_results() */?><div class="poll">  <?php print $results; ?>  <div class="total">    <?php print t('Total votes: @votes', array('@votes' => $votes)); ?>  </div>  <?php if (!empty($cancel_form)): ?>    <?php print $cancel_form; ?>  <?php endif; ?></div>
<?php// $Id$/** * @file user-picture.tpl.php * Default theme implementation to present an picture configured for the * user's account. * * Available variables: * - $picture: Image set by the user or the site's default. Will be linked *   depending on the viewer's permission to view the users profile page. * - $account: Array of account information. Potentially unsafe. Be sure to *   check_plain() before use. * * @see template_preprocess_user_picture() */?><div class="picture">  <?php print $picture; ?></div>
<?php// $Id$?><div class="box">  <?php if ($title): ?>  <h2 class="title"><?php print $title ?></h2>  <?php endif; ?>  <div class="content"><?php print $content ?></div></div>
<?php// $Id$/** * @file * Admin page callbacks for the throttle module. *//** * Form builder; Configure the throttle system. * * @ingroup forms * @see system_settings_form() * @see throttle_admin_settings_validate() */function throttle_admin_settings() {  $probabilities = array(0 => '100%', 1 => '50%', 2 => '33.3%', 3 => '25%', 4 => '20%', 5 => '16.6%', 7 => '12.5%', 9 => '10%', 19 => '5%', 99 => '1%', 199 => '.5%', 399 => '.25%', 989 => '.1%');  $form['throttle_anonymous'] = array(    '#type' => 'textfield',    '#title' => t('Auto-throttle on anonymous users'),    '#default_value' => variable_get('throttle_anonymous', 0),    '#size' => 5,    '#maxlength' => 6,    '#description' => t('The congestion control throttle can be automatically enabled when the number of anonymous users currently visiting your site exceeds the specified threshold. For example, to start the throttle when your site has 250 anonymous users online at once, enter \'250\' in this field. Leave this value blank or set to "0" if you do not wish to auto-throttle on anonymous users. You can inspect the current number of anonymous users using the "Who\'s online" block.')  );  $form['throttle_user'] = array(    '#type' => 'textfield',    '#title' => t('Auto-throttle on authenticated users'),    '#default_value' => variable_get('throttle_user', 0),    '#size' => 5,    '#maxlength' => 6,    '#description' => t('The congestion control throttle can be automatically enabled when the number of authenticated users currently visiting your site exceeds the specified threshold. For example, to start the throttle when your site has 50 registered users online at once, enter \'50\' in this field. Leave this value blank or set to "0" if you do not wish to auto-throttle on authenticated users. You can inspect the current number of authenticated users using the "Who\'s online" block.')  );  $form['throttle_probability_limiter'] = array(    '#type' => 'select',    '#title' => t('Auto-throttle probability limiter'),    '#default_value' => variable_get('throttle_probability_limiter', 9),    '#options' => $probabilities,    '#description' => t('The auto-throttle probability limiter is an efficiency mechanism to statistically reduce the overhead of the auto-throttle. The limiter is expressed as a percentage of page views, so for example if set to the default of 10% we only perform the extra database queries to update the throttle status 1 out of every 10 page views. The busier your site, the lower you should set the limiter value.')  );  $form['#validate'] = array('throttle_admin_settings_validate');  return system_settings_form($form);}function throttle_admin_settings_validate($form, &$form_state) {  if (!is_numeric($form_state['values']['throttle_anonymous']) || $form_state['values']['throttle_anonymous'] < 0) {    form_set_error('throttle_anonymous', t("%value is not a valid auto-throttle setting. Please enter a positive numeric value.", array('%value' => $form_state['values']['throttle_anonymous'])));  }  if (!is_numeric($form_state['values']['throttle_user']) || $form_state['values']['throttle_user'] < 0) {    form_set_error('throttle_user', t("%value is not a valid auto-throttle setting. Please enter a positive numeric value.", array('%value' => $form_state['values']['throttle_user'])));  }}
<?php// $Id$/** * @file profile-wrapper.tpl.php * Default theme implementation for wrapping member listings and their * profiles. * * This template is used when viewing a list of users. It can be a general * list for viewing all users with the url of "example.com/profile" or when * viewing a set of users who share a specific value for a profile such * as "example.com/profile/country/belgium". * * Available variables: * - $content: User account profiles iterated through profile-listing.tpl.php. * - $current_field: The named field being browsed. Provided here for context. *   The above example would result in "last_name". An alternate template name *   is also based on this, e.g., "profile-wrapper-last_name.tpl.php". * * @see template_preprocess_profile_wrapper() */?><div id="profile">  <?php print $content; ?></div>
<?php// $Id$/** * A stub cache implementation to be used during the installation * process when database access is not yet available. Because Drupal's * caching system never requires that cached data be present, these * stub functions can short-circuit the process and sidestep the * need for any persistent storage. Obviously, using this cache * implementation during normal operations would have a negative impact * on performance. */function cache_get($key, $table = 'cache') {  return FALSE;}function cache_set($cid, $data, $table = 'cache', $expire = CACHE_PERMANENT, $headers = NULL) {  return;}function cache_clear_all($cid = NULL, $table = NULL, $wildcard = FALSE) {  return;}
<?php// $Id$?><!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.0 Transitional//EN" "http://www.w3.org/TR/xhtml1/DTD/xhtml1-transitional.dtd"><html xmlns="http://www.w3.org/1999/xhtml" lang="<?php print $language->language ?>" xml:lang="<?php print $language->language ?>" dir="<?php print $language->dir ?>"><head>  <meta http-equiv="Content-Style-Type" content="text/css" />  <?php print $head ?>  <title><?php print $head_title ?></title>  <?php print $styles ?>  <?php print $scripts ?></head><body><div class="hide"><a href="#content" title="<?php print t('Skip navigation') ?>." accesskey="2"><?php print t('Skip navigation') ?></a>.</div><table id="primary-menu" summary="Navigation elements." border="0" cellpadding="0" cellspacing="0" width="100%">  <tr>    <td id="home" width="10%">      <?php if ($logo) : ?>        <a href="<?php print $front_page ?>" title="<?php print t('Home') ?>"><img src="<?php print($logo) ?>" alt="<?php print t('Home') ?>" border="0" /></a>      <?php endif; ?>    </td>    <td id="site-info" width="20%">      <?php if ($site_name) : ?>        <div class='site-name'><a href="<?php print $front_page ?>" title="<?php print t('Home') ?>"><?php print($site_name) ?></a></div>      <?php endif;?>      <?php if ($site_slogan) : ?>        <div class='site-slogan'><?php print($site_slogan) ?></div>      <?php endif;?>    </td>    <td class="primary-links" width="70%" align="center" valign="middle">      <?php print theme('links', $primary_links, array('class' => 'links', 'id' => 'navlist')) ?>    </td>  </tr></table><table id="secondary-menu" summary="Navigation elements." border="0" cellpadding="0" cellspacing="0" width="100%">  <tr>    <td class="secondary-links" width="75%"  align="center" valign="middle">      <?php print theme('links', $secondary_links, array('class' => 'links', 'id' => 'subnavlist')) ?>    </td>    <td width="25%" align="center" valign="middle">      <?php print $search_box ?>    </td>  </tr>  <tr>    <td colspan="2"><div><?php print $header ?></div></td>  </tr></table><table id="content" border="0" cellpadding="15" cellspacing="0" width="100%">  <tr>    <?php if ($left != ""): ?>    <td id="sidebar-left">      <?php print $left ?>    </td>    <?php endif; ?>    <td valign="top">      <?php if ($mission != ""): ?>      <div id="mission"><?php print $mission ?></div>      <?php endif; ?>      <div id="main">        <?php if ($title != ""): ?>          <?php print $breadcrumb ?>          <h1 class="title"><?php print $title ?></h1>          <?php if ($tabs != ""): ?>            <div class="tabs"><?php print $tabs ?></div>          <?php endif; ?>        <?php endif; ?>        <?php if ($show_messages && $messages != ""): ?>          <?php print $messages ?>        <?php endif; ?>        <?php if ($help != ""): ?>            <div id="help"><?php print $help ?></div>        <?php endif; ?>      <!-- start main content -->      <?php print $content; ?>      <?php print $feed_icons; ?>      <!-- end main content -->      </div><!-- main -->    </td>    <?php if ($right != ""): ?>    <td id="sidebar-right">      <?php print $right ?>    </td>    <?php endif; ?>  </tr></table><table id="footer-menu" summary="Navigation elements." border="0" cellpadding="0" cellspacing="0" width="100%">  <tr>    <td align="center" valign="middle">    <?php if (isset($primary_links)) : ?>      <?php print theme('links', $primary_links, array('class' => 'links primary-links')) ?>    <?php endif; ?>    <?php if (isset($secondary_links)) : ?>      <?php print theme('links', $secondary_links, array('class' => 'links secondary-links')) ?>    <?php endif; ?>    </td>  </tr></table><?php if ($footer_message || $footer) : ?><div id="footer-message">    <?php print $footer_message . $footer;?></div><?php endif; ?><?php print $closure;?></body></html>
<?php// $Id$/** * @file * The PHP page that serves all page requests on a Drupal installation. * * The routines here dispatch control to the appropriate handler, which then * prints the appropriate page. * * All Drupal code is released under the GNU General Public License. * See COPYRIGHT.txt and LICENSE.txt. */require_once './includes/bootstrap.inc';drupal_bootstrap(DRUPAL_BOOTSTRAP_FULL);$return = menu_execute_active_handler();// Menu status constants are integers; page content is a string.if (is_int($return)) {  switch ($return) {    case MENU_NOT_FOUND:      drupal_not_found();      break;    case MENU_ACCESS_DENIED:      drupal_access_denied();      break;    case MENU_SITE_OFFLINE:      drupal_site_offline();      break;  }}elseif (isset($return)) {  // Print any value (including an empty string) except NULL or undefined:  print theme('page', $return);}drupal_page_footer();
<?php// $Id$/** * @file comment-folded.tpl.php * Default theme implementation for folded comments. * * Available variables: * - $title: Linked title to full comment. * - $new: New comment marker. * - $author: Comment author. Can be link or plain text. * - $date: Date and time of posting. * - $comment: Full comment object. * * @see template_preprocess_comment_folded() * @see theme_comment_folded() */?><div class="comment-folded">  <span class="subject"><?php print $title .' '. $new; ?></span><span class="credit"><?php print t('by') .' '. $author; ?></span></div>
<?php// $Id$/** * @file * Alerts other sites that your site has been updated. *//** * Implementation of hook_help(). */function ping_help($path, $arg) {  switch ($path) {    case 'admin/help#ping':      $output = '<p>'. t('The ping module is useful for notifying interested sites that your site has changed. It automatically sends notifications, or "pings", to the <a href="@external-http-pingomatic-com">pingomatic</a> service about new or updated content. In turn, <a href="@external-http-pingomatic-com">pingomatic</a> notifies other popular services, including weblogs.com, Technorati, blo.gs, BlogRolling, Feedster.com, and Moreover.', array('@external-http-pingomatic-com' => 'http://pingomatic.com/')) .'</p>';      $output .= '<p>'. t('The ping module requires a correctly configured <a href="@cron">cron maintenance task</a>.', array('@cron' => url('admin/reports/status'))) .'</p>';      $output .= '<p>'. t('For more information, see the online handbook entry for <a href="@ping">Ping module</a>.', array('@ping' => 'http://drupal.org/handbook/modules/ping/')) .'</p>';      return $output;  }}/** * Implementation of hook_cron(). * * Fire off notifications of updates to remote sites. */function ping_cron() {  global $base_url;  if (variable_get('site_name', 0)) {    $cron_last = variable_get('cron_last', time());    // Query changed first since usually changed >= created.    if (db_result(db_query('SELECT COUNT(*) FROM {node} WHERE status = 1 AND changed > %d', $cron_last)) || db_result(db_query('SELECT COUNT(*) FROM {node} WHERE status = 1 AND created > %d', $cron_last))) {      _ping_notify(variable_get('site_name', ''), $base_url);    }  }}/** * Call hook_ping() in all modules to notify remote sites that there is * new content at this one. */function _ping_notify($name, $url) {  module_invoke_all('ping', $name, $url);}/** * Implementation of hook_ping(). * * Notifies pingomatic.com, blo.gs, and technorati.com of changes at this site. */function ping_ping($name = '', $url = '') {  $result = xmlrpc('http://rpc.pingomatic.com', 'weblogUpdates.ping', $name, $url);  if ($result === FALSE) {    watchdog('directory ping', 'Failed to notify pingomatic.com (site).', array(), WATCHDOG_WARNING);  }}
<?php// $Id$/** * @file comment-wrapper.tpl.php * Default theme implementation to wrap comments. * * Available variables: * - $content: All comments for a given page. Also contains sorting controls *   and comment forms if the site is configured for it. * * The following variables are provided for contextual information. * - $node: Node object the comments are attached to. * The constants below the variables show the possible values and should be * used for comparison. * - $display_mode *   - COMMENT_MODE_FLAT_COLLAPSED *   - COMMENT_MODE_FLAT_EXPANDED *   - COMMENT_MODE_THREADED_COLLAPSED *   - COMMENT_MODE_THREADED_EXPANDED * - $display_order *   - COMMENT_ORDER_NEWEST_FIRST *   - COMMENT_ORDER_OLDEST_FIRST * - $comment_controls_state *   - COMMENT_CONTROLS_ABOVE *   - COMMENT_CONTROLS_BELOW *   - COMMENT_CONTROLS_ABOVE_BELOW *   - COMMENT_CONTROLS_HIDDEN * * @see template_preprocess_comment_wrapper() * @see theme_comment_wrapper() */?><div id="comments">  <?php print $content; ?></div>
<?php// $Id$/** * @file forums.tpl.php * Default theme implementation to display a forum which may contain forum * containers as well as forum topics. * * Variables available: * - $links: An array of links that allow a user to post new forum topics. *   It may also contain a string telling a user they must log in in order *   to post. * - $forums: The forums to display (as processed by forum-list.tpl.php) * - $topics: The topics to display (as processed by forum-topic-list.tpl.php) * - $forums_defined: A flag to indicate that the forums are configured. * * @see template_preprocess_forums() * @see theme_forums() */?><?php if ($forums_defined): ?><div id="forum">  <?php print theme('links', $links); ?>  <?php print $forums; ?>  <?php print $topics; ?></div><?php endif; ?>
