<?php// $Id$/** * @file * Admin page callback file for the user module. */function user_admin($callback_arg = '') {  $op = isset($_POST['op']) ? $_POST['op'] : $callback_arg;  switch ($op) {    case t('Create new account'):    case 'create':      $output = drupal_get_form('user_register');      break;    default:      if (!empty($_POST['accounts']) && isset($_POST['operation']) && ($_POST['operation'] == 'delete')) {        $output = drupal_get_form('user_multiple_delete_confirm');      }      else {        $output = drupal_get_form('user_filter_form');        $output .= drupal_get_form('user_admin_account');      }  }  return $output;}/** * Form builder; Return form for user administration filters. * * @ingroup forms * @see user_filter_form_submit() */function user_filter_form() {  $session = &$_SESSION['user_overview_filter'];  $session = is_array($session) ? $session : array();  $filters = user_filters();  $i = 0;  $form['filters'] = array(    '#type' => 'fieldset',    '#title' => t('Show only users where'),    '#theme' => 'user_filters',  );  foreach ($session as $filter) {    list($type, $value) = $filter;    // Merge an array of arrays into one if necessary.    $options = $type == 'permission' ? call_user_func_array('array_merge', $filters[$type]['options']) : $filters[$type]['options'];    $params = array('%property' => $filters[$type]['title'] , '%value' => $options[$value]);    if ($i++ > 0) {      $form['filters']['current'][] = array('#value' => t('<em>and</em> where <strong>%property</strong> is <strong>%value</strong>', $params));    }    else {      $form['filters']['current'][] = array('#value' => t('<strong>%property</strong> is <strong>%value</strong>', $params));    }  }  foreach ($filters as $key => $filter) {    $names[$key] = $filter['title'];    $form['filters']['status'][$key] = array(      '#type' => 'select',      '#options' => $filter['options'],    );  }  $form['filters']['filter'] = array(    '#type' => 'radios',    '#options' => $names,  );  $form['filters']['buttons']['submit'] = array(    '#type' => 'submit',    '#value' => (count($session) ? t('Refine') : t('Filter')),  );  if (count($session)) {    $form['filters']['buttons']['undo'] = array(      '#type' => 'submit',      '#value' => t('Undo'),    );    $form['filters']['buttons']['reset'] = array(      '#type' => 'submit',      '#value' => t('Reset'),    );  }  drupal_add_js('misc/form.js', 'core');  return $form;}/** * Process result from user administration filter form. */function user_filter_form_submit($form, &$form_state) {  $op = $form_state['values']['op'];  $filters = user_filters();  switch ($op) {    case t('Filter'): case t('Refine'):      if (isset($form_state['values']['filter'])) {        $filter = $form_state['values']['filter'];        // Merge an array of arrays into one if necessary.        $options = $filter == 'permission' ? call_user_func_array('array_merge', $filters[$filter]['options']) : $filters[$filter]['options'];        if (isset($options[$form_state['values'][$filter]])) {          $_SESSION['user_overview_filter'][] = array($filter, $form_state['values'][$filter]);        }      }      break;    case t('Undo'):      array_pop($_SESSION['user_overview_filter']);      break;    case t('Reset'):      $_SESSION['user_overview_filter'] = array();      break;    case t('Update'):      return;  }  $form_state['redirect'] = 'admin/user/user';  return;}/** * Form builder; User administration page. * * @ingroup forms * @see user_admin_account_validate() * @see user_admin_account_submit() */function user_admin_account() {  $filter = user_build_filter_query();  $header = array(    array(),    array('data' => t('Username'), 'field' => 'u.name'),    array('data' => t('Status'), 'field' => 'u.status'),    t('Roles'),    array('data' => t('Member for'), 'field' => 'u.created', 'sort' => 'desc'),    array('data' => t('Last access'), 'field' => 'u.access'),    t('Operations')  );  if ($filter['join'] != "") {    $sql = 'SELECT DISTINCT u.uid, u.name, u.status, u.created, u.access FROM {users} u LEFT JOIN {users_roles} ur ON u.uid = ur.uid '. $filter['join'] .' WHERE u.uid != 0 '. $filter['where'];    $query_count = 'SELECT COUNT(DISTINCT u.uid) FROM {users} u LEFT JOIN {users_roles} ur ON u.uid = ur.uid '. $filter['join'] .' WHERE u.uid != 0 '. $filter['where'];  }  else {    $sql = 'SELECT u.uid, u.name, u.status, u.created, u.access FROM {users} u WHERE u.uid != 0 '. $filter['where'];    $query_count = 'SELECT COUNT(u.uid) FROM {users} u WHERE u.uid != 0 '. $filter['where'];  }    $sql .= tablesort_sql($header);  $result = pager_query($sql, 50, 0, $query_count, $filter['args']);  $form['options'] = array(    '#type' => 'fieldset',    '#title' => t('Update options'),    '#prefix' => '<div class="container-inline">',    '#suffix' => '</div>',  );  $options = array();  foreach (module_invoke_all('user_operations') as $operation => $array) {    $options[$operation] = $array['label'];  }  $form['options']['operation'] = array(    '#type' => 'select',    '#options' => $options,    '#default_value' => 'unblock',  );  $form['options']['submit'] = array(    '#type' => 'submit',    '#value' => t('Update'),  );  $destination = drupal_get_destination();  $status = array(t('blocked'), t('active'));  $roles = user_roles(TRUE);  $accounts = array();  while ($account = db_fetch_object($result)) {    $accounts[$account->uid] = '';    $form['name'][$account->uid] = array('#value' => theme('username', $account));    $form['status'][$account->uid] =  array('#value' => $status[$account->status]);    $users_roles = array();    $roles_result = db_query('SELECT rid FROM {users_roles} WHERE uid = %d', $account->uid);    while ($user_role = db_fetch_object($roles_result)) {      $users_roles[] = $roles[$user_role->rid];    }    asort($users_roles);    $form['roles'][$account->uid][0] = array('#value' => theme('item_list', $users_roles));    $form['member_for'][$account->uid] = array('#value' => format_interval(time() - $account->created));    $form['last_access'][$account->uid] =  array('#value' => $account->access ? t('@time ago', array('@time' => format_interval(time() - $account->access))) : t('never'));    $form['operations'][$account->uid] = array('#value' => l(t('edit'), "user/$account->uid/edit", array('query' => $destination)));  }  $form['accounts'] = array(    '#type' => 'checkboxes',    '#options' => $accounts  );  $form['pager'] = array('#value' => theme('pager', NULL, 50, 0));  return $form;}/** * Submit the user administration update form. */function user_admin_account_submit($form, &$form_state) {  $operations = module_invoke_all('user_operations', $form_state);  $operation = $operations[$form_state['values']['operation']];  // Filter out unchecked accounts.  $accounts = array_filter($form_state['values']['accounts']);  if ($function = $operation['callback']) {    // Add in callback arguments if present.    if (isset($operation['callback arguments'])) {      $args = array_merge(array($accounts), $operation['callback arguments']);    }    else {      $args = array($accounts);    }    call_user_func_array($function, $args);    drupal_set_message(t('The update has been performed.'));  }}function user_admin_account_validate($form, &$form_state) {  $form_state['values']['accounts'] = array_filter($form_state['values']['accounts']);  if (count($form_state['values']['accounts']) == 0) {    form_set_error('', t('No users selected.'));  }}/** * Form builder; Configure user settings for this site. * * @ingroup forms * @see system_settings_form() */function user_admin_settings() {  // User registration settings.  $form['registration'] = array('#type' => 'fieldset', '#title' => t('User registration settings'));  $form['registration']['user_register'] = array('#type' => 'radios', '#title' => t('Public registrations'), '#default_value' => variable_get('user_register', 1), '#options' => array(t('Only site administrators can create new user accounts.'), t('Visitors can create accounts and no administrator approval is required.'), t('Visitors can create accounts but administrator approval is required.')));  $form['registration']['user_email_verification'] = array('#type' => 'checkbox', '#title' => t('Require e-mail verification when a visitor creates an account'), '#default_value' => variable_get('user_email_verification', TRUE), '#description' => t('If this box is checked, new users will be required to validate their e-mail address prior to logging into the site, and will be assigned a system-generated password. With it unchecked, users will be logged in immediately upon registering, and may select their own passwords during registration.'));  $form['registration']['user_registration_help'] = array('#type' => 'textarea', '#title' => t('User registration guidelines'), '#default_value' => variable_get('user_registration_help', ''), '#description' => t('This text is displayed at the top of the user registration form and is useful for helping or instructing your users.'));  // User e-mail settings.  $form['email'] = array(    '#type' => 'fieldset',    '#title' => t('User e-mail settings'),    '#description' => t('Drupal sends emails whenever new users register on your site, and optionally, may also notify users after other account actions. Using a simple set of content templates, notification e-mails can be customized to fit the specific needs of your site.'),  );  // These email tokens are shared for all settings, so just define  // the list once to help ensure they stay in sync.  $email_token_help = t('Available variables are:') .' !username, !site, !password, !uri, !uri_brief, !mailto, !date, !login_uri, !edit_uri, !login_url.';  $form['email']['admin_created'] = array(    '#type' => 'fieldset',    '#title' => t('Welcome, new user created by administrator'),    '#collapsible' => TRUE,    '#collapsed' => (variable_get('user_register', 1) != 0),    '#description' => t('Customize welcome e-mail messages sent to new member accounts created by an administrator.') .' '. $email_token_help,  );  $form['email']['admin_created']['user_mail_register_admin_created_subject'] = array(    '#type' => 'textfield',    '#title' => t('Subject'),    '#default_value' => _user_mail_text('register_admin_created_subject'),    '#maxlength' => 180,  );  $form['email']['admin_created']['user_mail_register_admin_created_body'] = array(    '#type' => 'textarea',    '#title' => t('Body'),    '#default_value' => _user_mail_text('register_admin_created_body'),    '#rows' => 15,  );  $form['email']['no_approval_required'] = array(    '#type' => 'fieldset',    '#title' => t('Welcome, no approval required'),    '#collapsible' => TRUE,    '#collapsed' => (variable_get('user_register', 1) != 1),    '#description' => t('Customize welcome e-mail messages sent to new members upon registering, when no administrator approval is required.') .' '. $email_token_help  );  $form['email']['no_approval_required']['user_mail_register_no_approval_required_subject'] = array(    '#type' => 'textfield',    '#title' => t('Subject'),    '#default_value' => _user_mail_text('register_no_approval_required_subject'),    '#maxlength' => 180,  );  $form['email']['no_approval_required']['user_mail_register_no_approval_required_body'] = array(    '#type' => 'textarea',    '#title' => t('Body'),    '#default_value' => _user_mail_text('register_no_approval_required_body'),    '#rows' => 15,  );  $form['email']['pending_approval'] = array(    '#type' => 'fieldset',    '#title' => t('Welcome, awaiting administrator approval'),    '#collapsible' => TRUE,    '#collapsed' => (variable_get('user_register', 1) != 2),    '#description' => t('Customize welcome e-mail messages sent to new members upon registering, when administrative approval is required.') .' '. $email_token_help,  );  $form['email']['pending_approval']['user_mail_register_pending_approval_subject'] = array(    '#type' => 'textfield',    '#title' => t('Subject'),    '#default_value' => _user_mail_text('register_pending_approval_subject'),    '#maxlength' => 180,  );  $form['email']['pending_approval']['user_mail_register_pending_approval_body'] = array(    '#type' => 'textarea',    '#title' => t('Body'),    '#default_value' => _user_mail_text('register_pending_approval_body'),    '#rows' => 8,  );  $form['email']['password_reset'] = array(    '#type' => 'fieldset',    '#title' => t('Password recovery email'),    '#collapsible' => TRUE,    '#collapsed' => TRUE,    '#description' => t('Customize e-mail messages sent to users who request a new password.') .' '. $email_token_help,  );  $form['email']['password_reset']['user_mail_password_reset_subject'] = array(    '#type' => 'textfield',    '#title' => t('Subject'),    '#default_value' => _user_mail_text('password_reset_subject'),    '#maxlength' => 180,  );  $form['email']['password_reset']['user_mail_password_reset_body'] = array(    '#type' => 'textarea',    '#title' => t('Body'),    '#default_value' => _user_mail_text('password_reset_body'),    '#rows' => 12,  );  $form['email']['activated'] = array(    '#type' => 'fieldset',    '#title' => t('Account activation email'),    '#collapsible' => TRUE,    '#collapsed' => TRUE,    '#description' => t('Enable and customize e-mail messages sent to users upon account activation (when an administrator activates an account of a user who has already registered, on a site where administrative approval is required).') .' '. $email_token_help,  );  $form['email']['activated']['user_mail_status_activated_notify'] = array(    '#type' => 'checkbox',    '#title' => t('Notify user when account is activated.'),    '#default_value' => variable_get('user_mail_status_activated_notify', TRUE),  );  $form['email']['activated']['user_mail_status_activated_subject'] = array(    '#type' => 'textfield',    '#title' => t('Subject'),    '#default_value' => _user_mail_text('status_activated_subject'),    '#maxlength' => 180,  );  $form['email']['activated']['user_mail_status_activated_body'] = array(    '#type' => 'textarea',    '#title' => t('Body'),    '#default_value' => _user_mail_text('status_activated_body'),    '#rows' => 15,  );  $form['email']['blocked'] = array(    '#type' => 'fieldset',    '#title' => t('Account blocked email'),    '#collapsible' => TRUE,    '#collapsed' => TRUE,    '#description' => t('Enable and customize e-mail messages sent to users when their accounts are blocked.') .' '. $email_token_help,  );  $form['email']['blocked']['user_mail_status_blocked_notify'] = array(    '#type' => 'checkbox',    '#title' => t('Notify user when account is blocked.'),    '#default_value' => variable_get('user_mail_status_blocked_notify', FALSE),  );  $form['email']['blocked']['user_mail_status_blocked_subject'] = array(    '#type' => 'textfield',    '#title' => t('Subject'),    '#default_value' => _user_mail_text('status_blocked_subject'),    '#maxlength' => 180,  );  $form['email']['blocked']['user_mail_status_blocked_body'] = array(    '#type' => 'textarea',    '#title' => t('Body'),    '#default_value' => _user_mail_text('status_blocked_body'),    '#rows' => 3,  );  $form['email']['deleted'] = array(    '#type' => 'fieldset',    '#title' => t('Account deleted email'),    '#collapsible' => TRUE,    '#collapsed' => TRUE,    '#description' => t('Enable and customize e-mail messages sent to users when their accounts are deleted.') .' '. $email_token_help,  );  $form['email']['deleted']['user_mail_status_deleted_notify'] = array(    '#type' => 'checkbox',    '#title' => t('Notify user when account is deleted.'),    '#default_value' => variable_get('user_mail_status_deleted_notify', FALSE),  );  $form['email']['deleted']['user_mail_status_deleted_subject'] = array(    '#type' => 'textfield',    '#title' => t('Subject'),    '#default_value' => _user_mail_text('status_deleted_subject'),    '#maxlength' => 180,  );  $form['email']['deleted']['user_mail_status_deleted_body'] = array(    '#type' => 'textarea',    '#title' => t('Body'),    '#default_value' => _user_mail_text('status_deleted_body'),    '#rows' => 3,  );  // User signatures.  $form['signatures'] = array(    '#type' => 'fieldset',    '#title' => t('Signatures'),  );  $form['signatures']['user_signatures'] = array(    '#type' => 'radios',    '#title' => t('Signature support'),    '#default_value' => variable_get('user_signatures', 0),    '#options' => array(t('Disabled'), t('Enabled')),  );  // If picture support is enabled, check whether the picture directory exists:  if (variable_get('user_pictures', 0)) {    $picture_path = file_create_path(variable_get('user_picture_path', 'pictures'));    file_check_directory($picture_path, 1, 'user_picture_path');  }  $form['pictures'] = array(    '#type' => 'fieldset',    '#title' => t('Pictures'),  );  $picture_support = variable_get('user_pictures', 0);  $form['pictures']['user_pictures'] = array(    '#type' => 'radios',    '#title' => t('Picture support'),    '#default_value' => $picture_support,    '#options' => array(t('Disabled'), t('Enabled')),    '#prefix' => '<div class="user-admin-picture-radios">',    '#suffix' => '</div>',  );  drupal_add_js(drupal_get_path('module', 'user') .'/user.js');  // If JS is enabled, and the radio is defaulting to off, hide all  // the settings on page load via .css using the js-hide class so  // that there's no flicker.  $css_class = 'user-admin-picture-settings';  if (!$picture_support) {    $css_class .= ' js-hide';  }  $form['pictures']['settings'] = array(    '#prefix' => '<div class="'. $css_class .'">',    '#suffix' => '</div>',  );  $form['pictures']['settings']['user_picture_path'] = array(    '#type' => 'textfield',    '#title' => t('Picture image path'),    '#default_value' => variable_get('user_picture_path', 'pictures'),    '#size' => 30,    '#maxlength' => 255,    '#description' => t('Subdirectory in the directory %dir where pictures will be stored.', array('%dir' => file_directory_path() .'/')),  );  $form['pictures']['settings']['user_picture_default'] = array(    '#type' => 'textfield',    '#title' => t('Default picture'),    '#default_value' => variable_get('user_picture_default', ''),    '#size' => 30,    '#maxlength' => 255,    '#description' => t('URL of picture to display for users with no custom picture selected. Leave blank for none.'),  );  $form['pictures']['settings']['user_picture_dimensions'] = array(    '#type' => 'textfield',    '#title' => t('Picture maximum dimensions'),    '#default_value' => variable_get('user_picture_dimensions', '85x85'),    '#size' => 15,    '#maxlength' => 10,    '#description' => t('Maximum dimensions for pictures, in pixels.'),  );  $form['pictures']['settings']['user_picture_file_size'] = array(    '#type' => 'textfield',    '#title' => t('Picture maximum file size'),    '#default_value' => variable_get('user_picture_file_size', '30'),    '#size' => 15,    '#maxlength' => 10,    '#description' => t('Maximum file size for pictures, in kB.'),  );  $form['pictures']['settings']['user_picture_guidelines'] = array(    '#type' => 'textarea',    '#title' => t('Picture guidelines'),    '#default_value' => variable_get('user_picture_guidelines', ''),    '#description' => t("This text is displayed at the picture upload form in addition to the default guidelines. It's useful for helping or instructing your users."),  );  return system_settings_form($form);}/** * Menu callback: administer permissions. * * @ingroup forms * @see user_admin_perm_submit() * @see theme_user_admin_perm() */function user_admin_perm($form_state, $rid = NULL) {  if (is_numeric($rid)) {    $result = db_query('SELECT r.rid, p.perm FROM {role} r LEFT JOIN {permission} p ON r.rid = p.rid WHERE r.rid = %d', $rid);  }  else {    $result = db_query('SELECT r.rid, p.perm FROM {role} r LEFT JOIN {permission} p ON r.rid = p.rid ORDER BY name');  }  // Compile role array:  // Add a comma at the end so when searching for a permission, we can  // always search for "$perm," to make sure we do not confuse  // permissions that are substrings of each other.  while ($role = db_fetch_object($result)) {    $role_permissions[$role->rid] = $role->perm .',';  }  // Retrieve role names for columns.  $role_names = user_roles();  if (is_numeric($rid)) {    $role_names = array($rid => $role_names[$rid]);  }  // Render role/permission overview:  $options = array();  foreach (module_list(FALSE, FALSE, TRUE) as $module) {    if ($permissions = module_invoke($module, 'perm')) {      $form['permission'][] = array(        '#value' => $module,      );      asort($permissions);      foreach ($permissions as $perm) {        $options[$perm] = '';        $form['permission'][$perm] = array('#value' => t($perm));        foreach ($role_names as $rid => $name) {          // Builds arrays for checked boxes for each role          if (strpos($role_permissions[$rid], $perm .',') !== FALSE) {            $status[$rid][] = $perm;          }        }      }    }  }  // Have to build checkboxes here after checkbox arrays are built  foreach ($role_names as $rid => $name) {    $form['checkboxes'][$rid] = array('#type' => 'checkboxes', '#options' => $options, '#default_value' => isset($status[$rid]) ? $status[$rid] : array());    $form['role_names'][$rid] = array('#value' => $name, '#tree' => TRUE);  }  $form['submit'] = array('#type' => 'submit', '#value' => t('Save permissions'));  return $form;}function user_admin_perm_submit($form, &$form_state) {  // Save permissions:  $result = db_query('SELECT * FROM {role}');  while ($role = db_fetch_object($result)) {    if (isset($form_state['values'][$role->rid])) {      // Delete, so if we clear every checkbox we reset that role;      // otherwise permissions are active and denied everywhere.      db_query('DELETE FROM {permission} WHERE rid = %d', $role->rid);      $form_state['values'][$role->rid] = array_filter($form_state['values'][$role->rid]);      if (count($form_state['values'][$role->rid])) {        db_query("INSERT INTO {permission} (rid, perm) VALUES (%d, '%s')", $role->rid, implode(', ', array_keys($form_state['values'][$role->rid])));      }    }  }  drupal_set_message(t('The changes have been saved.'));  // Clear the cached pages  cache_clear_all();}/** * Theme the administer permissions page. * * @ingroup themeable */function theme_user_admin_perm($form) {  $roles = user_roles();  foreach (element_children($form['permission']) as $key) {    // Don't take form control structures    if (is_array($form['permission'][$key])) {      $row = array();      // Module name      if (is_numeric($key)) {        $row[] = array('data' => t('@module module', array('@module' => drupal_render($form['permission'][$key]))), 'class' => 'module', 'id' => 'module-'. $form['permission'][$key]['#value'], 'colspan' => count($form['role_names']) + 1);      }      else {        $row[] = array('data' => drupal_render($form['permission'][$key]), 'class' => 'permission');        foreach (element_children($form['checkboxes']) as $rid) {          if (is_array($form['checkboxes'][$rid])) {            $row[] = array('data' => drupal_render($form['checkboxes'][$rid][$key]), 'class' => 'checkbox', 'title' => $roles[$rid] .' : '. t($key));          }        }      }      $rows[] = $row;    }  }  $header[] = (t('Permission'));  foreach (element_children($form['role_names']) as $rid) {    if (is_array($form['role_names'][$rid])) {      $header[] = array('data' => drupal_render($form['role_names'][$rid]), 'class' => 'checkbox');    }  }  $output = theme('table', $header, $rows, array('id' => 'permissions'));  $output .= drupal_render($form);  return $output;}/** * Menu callback: administer roles. * * @ingroup forms * @see user_admin_role_validate() * @see user_admin_role_submit() * @see theme_user_admin_new_role() */function user_admin_role() {  $rid = arg(4);  if ($rid) {    if ($rid == DRUPAL_ANONYMOUS_RID || $rid == DRUPAL_AUTHENTICATED_RID) {      drupal_goto('admin/user/roles');    }    // Display the edit role form.    $role = db_fetch_object(db_query('SELECT * FROM {role} WHERE rid = %d', $rid));    $form['name'] = array(      '#type' => 'textfield',      '#title' => t('Role name'),      '#default_value' => $role->name,      '#size' => 30,      '#required' => TRUE,      '#maxlength' => 64,      '#description' => t('The name for this role. Example: "moderator", "editorial board", "site architect".'),    );    $form['rid'] = array(      '#type' => 'value',      '#value' => $rid,    );    $form['submit'] = array(      '#type' => 'submit',      '#value' => t('Save role'),    );    $form['delete'] = array(      '#type' => 'submit',      '#value' => t('Delete role'),    );  }  else {    $form['name'] = array(      '#type' => 'textfield',      '#size' => 32,      '#maxlength' => 64,    );    $form['submit'] = array(      '#type' => 'submit',      '#value' => t('Add role'),    );    $form['#submit'][] = 'user_admin_role_submit';    $form['#validate'][] = 'user_admin_role_validate';  }  return $form;}function user_admin_role_validate($form, &$form_state) {  if ($form_state['values']['name']) {    if ($form_state['values']['op'] == t('Save role')) {      if (db_result(db_query("SELECT COUNT(*) FROM {role} WHERE name = '%s' AND rid != %d", $form_state['values']['name'], $form_state['values']['rid']))) {        form_set_error('name', t('The role name %name already exists. Please choose another role name.', array('%name' => $form_state['values']['name'])));      }    }    else if ($form_state['values']['op'] == t('Add role')) {      if (db_result(db_query("SELECT COUNT(*) FROM {role} WHERE name = '%s'", $form_state['values']['name']))) {        form_set_error('name', t('The role name %name already exists. Please choose another role name.', array('%name' => $form_state['values']['name'])));      }    }  }  else {    form_set_error('name', t('You must specify a valid role name.'));  }}function user_admin_role_submit($form, &$form_state) {  if ($form_state['values']['op'] == t('Save role')) {    db_query("UPDATE {role} SET name = '%s' WHERE rid = %d", $form_state['values']['name'], $form_state['values']['rid']);    drupal_set_message(t('The role has been renamed.'));  }  else if ($form_state['values']['op'] == t('Delete role')) {    db_query('DELETE FROM {role} WHERE rid = %d', $form_state['values']['rid']);    db_query('DELETE FROM {permission} WHERE rid = %d', $form_state['values']['rid']);    // Update the users who have this role set:    db_query('DELETE FROM {users_roles} WHERE rid = %d', $form_state['values']['rid']);    drupal_set_message(t('The role has been deleted.'));  }  else if ($form_state['values']['op'] == t('Add role')) {    db_query("INSERT INTO {role} (name) VALUES ('%s')", $form_state['values']['name']);    drupal_set_message(t('The role has been added.'));  }  $form_state['redirect'] = 'admin/user/roles';  return;}/** * Menu callback: list all access rules */function user_admin_access_check() {  $output = drupal_get_form('user_admin_check_user');  $output .= drupal_get_form('user_admin_check_mail');  $output .= drupal_get_form('user_admin_check_host');  return $output;}/** * Menu callback: add an access rule. */function user_admin_access_add($mask = NULL, $type = NULL) {  $edit = array();  $edit['aid'] = 0;  $edit['mask'] = $mask;  $edit['type'] = $type;  return drupal_get_form('user_admin_access_add_form', $edit, t('Add rule'));}/** * Menu callback: edit an access rule. */function user_admin_access_edit($aid = 0) {  $edit = db_fetch_array(db_query('SELECT aid, type, status, mask FROM {access} WHERE aid = %d', $aid));  return drupal_get_form('user_admin_access_edit_form', $edit, t('Save rule'));}/** * Form builder; Configure access rules. * * @ingroup forms */function user_admin_access_form(&$form_state, $edit, $submit) {  $form = array();  $form['aid'] = array(    '#type' => 'value',    '#value' => $edit['aid'],  );  $form['status'] = array(    '#type' => 'radios',    '#title' => t('Access type'),    '#default_value' => isset($edit['status']) ? $edit['status'] : 0,    '#options' => array('1' => t('Allow'), '0' => t('Deny')),  );  $type_options = array('user' => t('Username'), 'mail' => t('E-mail'), 'host' => t('Host'));  $form['type'] = array(    '#type' => 'radios',    '#title' => t('Rule type'),    '#default_value' => (isset($type_options[$edit['type']]) ? $edit['type'] : 'user'),    '#options' => $type_options,  );  $form['mask'] = array(    '#type' => 'textfield',    '#title' => t('Mask'),    '#size' => 30,    '#maxlength' => 64,    '#default_value' => $edit['mask'],    '#description' => '%: '. t('Matches any number of characters, even zero characters') .'.<br />_: '. t('Matches exactly one character.'),    '#required' => TRUE,  );  $form['submit'] = array('#type' => 'submit', '#value' => $submit);  $form['#submit'] = array('user_admin_access_form_submit');  return $form;}/** * Submit callback for user_admin_access_form(). */function user_admin_access_form_submit($form, &$form_state) {  $edit = $form_state['values'];  if ($edit['aid']) {    db_query("UPDATE {access} SET mask = '%s', type = '%s', status = '%s' WHERE aid = %d", $edit['mask'], $edit['type'], $edit['status'], $edit['aid']);    drupal_set_message(t('The access rule has been saved.'));  }  else {    db_query("INSERT INTO {access} (mask, type, status) VALUES ('%s', '%s', %d)", $edit['mask'], $edit['type'], $edit['status']);    drupal_set_message(t('The access rule has been added.'));  }  $form_state['redirect'] = 'admin/user/rules';}function user_admin_access_check_validate($form, &$form_state) {  if (empty($form_state['values']['test'])) {    form_set_error($form_state['values']['type'], t('No value entered. Please enter a test string and try again.'));  }}function user_admin_check_user() {  $form['user'] = array('#type' => 'fieldset', '#title' => t('Username'));  $form['user']['test'] = array('#type' => 'textfield', '#title' => '', '#description' => t('Enter a username to check if it will be denied or allowed.'), '#size' => 30, '#maxlength' => USERNAME_MAX_LENGTH);  $form['user']['type'] = array('#type' => 'hidden', '#value' => 'user');  $form['user']['submit'] = array('#type' => 'submit', '#value' => t('Check username'));  $form['#submit'][] = 'user_admin_access_check_submit';  $form['#validate'][] = 'user_admin_access_check_validate';  $form['#theme'] = 'user_admin_access_check';  return $form;}function user_admin_check_mail() {  $form['mail'] = array('#type' => 'fieldset', '#title' => t('E-mail'));  $form['mail']['test'] = array('#type' => 'textfield', '#title' => '', '#description' => t('Enter an e-mail address to check if it will be denied or allowed.'), '#size' => 30, '#maxlength' => EMAIL_MAX_LENGTH);  $form['mail']['type'] = array('#type' => 'hidden', '#value' => 'mail');  $form['mail']['submit'] = array('#type' => 'submit', '#value' => t('Check e-mail'));  $form['#submit'][] = 'user_admin_access_check_submit';  $form['#validate'][] = 'user_admin_access_check_validate';  $form['#theme'] = 'user_admin_access_check';  return $form;}function user_admin_check_host() {  $form['host'] = array('#type' => 'fieldset', '#title' => t('Hostname'));  $form['host']['test'] = array('#type' => 'textfield', '#title' => '', '#description' => t('Enter a hostname or IP address to check if it will be denied or allowed.'), '#size' => 30, '#maxlength' => 64);  $form['host']['type'] = array('#type' => 'hidden', '#value' => 'host');  $form['host']['submit'] = array('#type' => 'submit', '#value' => t('Check hostname'));  $form['#submit'][] = 'user_admin_access_check_submit';  $form['#validate'][] = 'user_admin_access_check_validate';  $form['#theme'] = 'user_admin_access_check';  return $form;}function user_admin_access_check_submit($form, &$form_state) {  switch ($form_state['values']['type']) {    case 'user':      if (drupal_is_denied('user', $form_state['values']['test'])) {        drupal_set_message(t('The username %name is not allowed.', array('%name' => $form_state['values']['test'])));      }      else {        drupal_set_message(t('The username %name is allowed.', array('%name' => $form_state['values']['test'])));      }      break;    case 'mail':      if (drupal_is_denied('mail', $form_state['values']['test'])) {        drupal_set_message(t('The e-mail address %mail is not allowed.', array('%mail' => $form_state['values']['test'])));      }      else {        drupal_set_message(t('The e-mail address %mail is allowed.', array('%mail' => $form_state['values']['test'])));      }      break;    case 'host':      if (drupal_is_denied('host', $form_state['values']['test'])) {        drupal_set_message(t('The hostname %host is not allowed.', array('%host' => $form_state['values']['test'])));      }      else {        drupal_set_message(t('The hostname %host is allowed.', array('%host' => $form_state['values']['test'])));      }      break;    default:      break;  }}/** * Menu callback: delete an access rule * * @ingroup forms * @see user_admin_access_delete_confirm_submit() */function user_admin_access_delete_confirm($form_state, $aid = 0) {  $access_types = array('user' => t('username'), 'mail' => t('e-mail'), 'host' => t('host'));  $edit = db_fetch_object(db_query('SELECT aid, type, status, mask FROM {access} WHERE aid = %d', $aid));  $form = array();  $form['aid'] = array('#type' => 'hidden', '#value' => $aid);  $output = confirm_form($form,                  t('Are you sure you want to delete the @type rule for %rule?', array('@type' => $access_types[$edit->type], '%rule' => $edit->mask)),                  'admin/user/rules',                  t('This action cannot be undone.'),                  t('Delete'),                  t('Cancel'));  return $output;}function user_admin_access_delete_confirm_submit($form, &$form_state) {  db_query('DELETE FROM {access} WHERE aid = %d', $form_state['values']['aid']);  drupal_set_message(t('The access rule has been deleted.'));  $form_state['redirect'] = 'admin/user/rules';  return;}/** * Menu callback: list all access rules */function user_admin_access() {  $header = array(array('data' => t('Access type'), 'field' => 'status'), array('data' => t('Rule type'), 'field' => 'type'), array('data' => t('Mask'), 'field' => 'mask'), array('data' => t('Operations'), 'colspan' => 2));  $result = db_query("SELECT aid, type, status, mask FROM {access}". tablesort_sql($header));  $access_types = array('user' => t('username'), 'mail' => t('e-mail'), 'host' => t('host'));  $rows = array();  while ($rule = db_fetch_object($result)) {    $rows[] = array($rule->status ? t('allow') : t('deny'), $access_types[$rule->type], $rule->mask, l(t('edit'), 'admin/user/rules/edit/'. $rule->aid), l(t('delete'), 'admin/user/rules/delete/'. $rule->aid));  }  if (empty($rows)) {    $rows[] = array(array('data' => '<em>'. t('There are currently no access rules.') .'</em>', 'colspan' => 5));  }  return theme('table', $header, $rows);}/** * Theme user administration overview. * * @ingroup themeable */function theme_user_admin_account($form) {  // Overview table:  $header = array(    theme('table_select_header_cell'),    array('data' => t('Username'), 'field' => 'u.name'),    array('data' => t('Status'), 'field' => 'u.status'),    t('Roles'),    array('data' => t('Member for'), 'field' => 'u.created', 'sort' => 'desc'),    array('data' => t('Last access'), 'field' => 'u.access'),    t('Operations')  );  $output = drupal_render($form['options']);  if (isset($form['name']) && is_array($form['name'])) {    foreach (element_children($form['name']) as $key) {      $rows[] = array(        drupal_render($form['accounts'][$key]),        drupal_render($form['name'][$key]),        drupal_render($form['status'][$key]),        drupal_render($form['roles'][$key]),        drupal_render($form['member_for'][$key]),        drupal_render($form['last_access'][$key]),        drupal_render($form['operations'][$key]),      );    }  }  else {    $rows[] = array(array('data' => t('No users available.'), 'colspan' => '7'));  }  $output .= theme('table', $header, $rows);  if ($form['pager']['#value']) {    $output .= drupal_render($form['pager']);  }  $output .= drupal_render($form);  return $output;}/** * Theme the new-role form. * * @ingroup themeable */function theme_user_admin_new_role($form) {  $header = array(t('Name'), array('data' => t('Operations'), 'colspan' => 2));  foreach (user_roles() as $rid => $name) {    $edit_permissions = l(t('edit permissions'), 'admin/user/permissions/'. $rid);    if (!in_array($rid, array(DRUPAL_ANONYMOUS_RID, DRUPAL_AUTHENTICATED_RID))) {      $rows[] = array($name, l(t('edit role'), 'admin/user/roles/edit/'. $rid), $edit_permissions);    }    else {      $rows[] = array($name, t('locked'), $edit_permissions);    }  }  $rows[] = array(drupal_render($form['name']), array('data' => drupal_render($form['submit']), 'colspan' => 2));  $output = drupal_render($form);  $output .= theme('table', $header, $rows);  return $output;}/** * Theme user administration filter form. * * @ingroup themeable */function theme_user_filter_form($form) {  $output = '<div id="user-admin-filter">';  $output .= drupal_render($form['filters']);  $output .= '</div>';  $output .= drupal_render($form);  return $output;}/** * Theme user administration filter selector. * * @ingroup themeable */function theme_user_filters($form) {  $output = '<ul class="clear-block">';  if (!empty($form['current'])) {    foreach (element_children($form['current']) as $key) {      $output .= '<li>'. drupal_render($form['current'][$key]) .'</li>';    }  }  $output .= '<li><dl class="multiselect">'. (!empty($form['current']) ? '<dt><em>'. t('and') .'</em> '. t('where') .'</dt>' : '') .'<dd class="a">';  foreach (element_children($form['filter']) as $key) {    $output .= drupal_render($form['filter'][$key]);  }  $output .= '</dd>';  $output .= '<dt>'. t('is') .'</dt><dd class="b">';  foreach (element_children($form['status']) as $key) {    $output .= drupal_render($form['status'][$key]);  }  $output .= '</dd>';  $output .= '</dl>';  $output .= '<div class="container-inline" id="user-admin-buttons">'. drupal_render($form['buttons']) .'</div>';  $output .= '</li></ul>';  return $output;}
<?php// $Id$/** * @file * Admin page callbacks for the help module. *//** * Menu callback; prints a page listing a glossary of Drupal terminology. */function help_main() {  // Add CSS  drupal_add_css(drupal_get_path('module', 'help') .'/help.css', 'module', 'all', FALSE);  $output = '<h2>'. t('Help topics') .'</h2><p>'. t('Help is available on the following items:') .'</p>'. help_links_as_list();  return $output;}/** * Menu callback; prints a page listing general help for a module. */function help_page($name) {  $output = '';  if (module_hook($name, 'help')) {    $module = drupal_parse_info_file(drupal_get_path('module', $name) .'/'. $name .'.info');    drupal_set_title($module['name']);    $temp = module_invoke($name, 'help', "admin/help#$name", drupal_help_arg());    if (empty($temp)) {      $output .= t("No help is available for module %module.", array('%module' => $module['name']));    }    else {      $output .= $temp;    }    // Only print list of administration pages if the module in question has    // any such pages associated to it.    $admin_tasks = system_get_module_admin_tasks($name);    if (!empty($admin_tasks)) {      ksort($admin_tasks);      $output .= theme('item_list', $admin_tasks, t('@module administration pages', array('@module' => $module['name'])));    }  }  return $output;}function help_links_as_list() {  $empty_arg = drupal_help_arg();  $module_info = module_rebuild_cache();  $modules = array();  foreach (module_implements('help', TRUE) as $module) {    if (module_invoke($module, 'help', "admin/help#$module", $empty_arg)) {      $modules[$module] = $module_info[$module]->info['name'];    }  }  asort($modules);  // Output pretty four-column list  $count = count($modules);  $break = ceil($count / 4);  $output = '<div class="clear-block"><div class="help-items"><ul>';  $i = 0;  foreach ($modules as $module => $name) {    $output .= '<li>'. l($name, 'admin/help/'. $module) .'</li>';    if (($i + 1) % $break == 0 && ($i + 1) != $count) {      $output .= '</ul></div><div class="help-items'. ($i + 1 == $break * 3 ? ' help-items-last' : '') .'"><ul>';    }    $i++;  }  $output .= '</ul></div></div>';  return $output;}
<?php// $Id$/** * @file * Administrative page callbacks for menu module. *//** * Menu callback which shows an overview page of all the custom menus and their descriptions. */function menu_overview_page() {  $result = db_query("SELECT * FROM {menu_custom} ORDER BY title");  $content = array();  while ($menu = db_fetch_array($result)) {    $menu['href'] = 'admin/build/menu-customize/'. $menu['menu_name'];    $menu['localized_options'] = array();    $menu['description'] = filter_xss_admin($menu['description']);    $content[] = $menu;  }  return theme('admin_block_content', $content);}/** * Form for editing an entire menu tree at once. * * Shows for one menu the menu items accessible to the current user and * relevant operations. */function menu_overview_form(&$form_state, $menu) {  global $menu_admin;  $sql = "    SELECT m.load_functions, m.to_arg_functions, m.access_callback, m.access_arguments, m.page_callback, m.page_arguments, m.title, m.title_callback, m.title_arguments, m.type, m.description, ml.*    FROM {menu_links} ml LEFT JOIN {menu_router} m ON m.path = ml.router_path    WHERE ml.menu_name = '%s'    ORDER BY p1 ASC, p2 ASC, p3 ASC, p4 ASC, p5 ASC, p6 ASC, p7 ASC, p8 ASC, p9 ASC";  $result = db_query($sql, $menu['menu_name']);  $tree = menu_tree_data($result);  $node_links = array();  menu_tree_collect_node_links($tree, $node_links);  // We indicate that a menu administrator is running the menu access check.  $menu_admin = TRUE;  menu_tree_check_access($tree, $node_links);  $menu_admin = FALSE;  $form = _menu_overview_tree_form($tree);  $form['#menu'] =  $menu;  if (element_children($form)) {    $form['submit'] = array(      '#type' => 'submit',      '#value' => t('Save configuration'),    );  }  else {    $form['empty_menu'] = array('#value' => t('There are no menu items yet.'));  }  return $form;}/** * Recursive helper function for menu_overview_form(). */function _menu_overview_tree_form($tree) {  static $form = array('#tree' => TRUE);  foreach ($tree as $data) {    $title = '';    $item = $data['link'];    // Don't show callbacks; these have $item['hidden'] < 0.    if ($item && $item['hidden'] >= 0) {      $mlid = 'mlid:'. $item['mlid'];      $form[$mlid]['#item'] = $item;      $form[$mlid]['#attributes'] = $item['hidden'] ? array('class' => 'menu-disabled') : array('class' => 'menu-enabled');      $form[$mlid]['title']['#value'] = l($item['title'], $item['href'], $item['localized_options']) . ($item['hidden'] ? ' ('. t('disabled') .')' : '');      $form[$mlid]['hidden'] = array(        '#type' => 'checkbox',        '#default_value' => !$item['hidden'],      );      $form[$mlid]['expanded'] = array(        '#type' => 'checkbox',        '#default_value' => $item['expanded'],      );      $form[$mlid]['weight'] = array(        '#type' => 'weight',        '#delta' => 50,        '#default_value' => isset($form_state[$mlid]['weight']) ? $form_state[$mlid]['weight'] : $item['weight'],      );      $form[$mlid]['mlid'] = array(        '#type' => 'hidden',        '#value' => $item['mlid'],      );      $form[$mlid]['plid'] = array(        '#type' => 'textfield',        '#default_value' => isset($form_state[$mlid]['plid']) ? $form_state[$mlid]['plid'] : $item['plid'],        '#size' => 6,      );      // Build a list of operations.      $operations = array();      $operations['edit'] = l(t('edit'), 'admin/build/menu/item/'. $item['mlid'] .'/edit');      // Only items created by the menu module can be deleted.      if ($item['module'] == 'menu' || $item['updated'] == 1) {        $operations['delete'] = l(t('delete'), 'admin/build/menu/item/'. $item['mlid'] .'/delete');      }      // Set the reset column.      elseif ($item['module'] == 'system' && $item['customized']) {        $operations['reset'] = l(t('reset'), 'admin/build/menu/item/'. $item['mlid'] .'/reset');      }      $form[$mlid]['operations'] = array();      foreach ($operations as $op => $value) {        $form[$mlid]['operations'][$op] = array('#value' => $value);      }    }    if ($data['below']) {      _menu_overview_tree_form($data['below']);    }  }  return $form;}/** * Submit handler for the menu overview form. * * This function takes great care in saving parent items first, then items * underneath them. Saving items in the incorrect order can break the menu tree. * * @see menu_overview_form() */function menu_overview_form_submit($form, &$form_state) {  // When dealing with saving menu items, the order in which these items are  // saved is critical. If a changed child item is saved before its parent,  // the child item could be saved with an invalid path past its immediate  // parent. To prevent this, save items in the form in the same order they  // are sent by $_POST, ensuring parents are saved first, then their children.  // See http://drupal.org/node/181126#comment-632270  $order = array_flip(array_keys($form['#post'])); // Get the $_POST order.  $form = array_merge($order, $form); // Update our original form with the new order.  $updated_items = array();  $fields = array('expanded', 'weight', 'plid');  foreach (element_children($form) as $mlid) {    if (isset($form[$mlid]['#item'])) {      $element = $form[$mlid];      // Update any fields that have changed in this menu item.      foreach ($fields as $field) {        if ($element[$field]['#value'] != $element[$field]['#default_value']) {          $element['#item'][$field] = $element[$field]['#value'];          $updated_items[$mlid] = $element['#item'];        }      }      // Hidden is a special case, the value needs to be reversed.      if ($element['hidden']['#value'] != $element['hidden']['#default_value']) {        $element['#item']['hidden'] = !$element['hidden']['#value'];        $updated_items[$mlid] = $element['#item'];      }    }  }  // Save all our changed items to the database.  foreach ($updated_items as $item) {    $item['customized'] = 1;    menu_link_save($item);  }}/** * Theme the menu overview form into a table. * * @ingroup themeable */function theme_menu_overview_form($form) {  drupal_add_tabledrag('menu-overview', 'match', 'parent', 'menu-plid', 'menu-plid', 'menu-mlid', TRUE, MENU_MAX_DEPTH - 1);  drupal_add_tabledrag('menu-overview', 'order', 'sibling', 'menu-weight');  $header = array(    t('Menu item'),    array('data' => t('Enabled'), 'class' => 'checkbox'),    array('data' => t('Expanded'), 'class' => 'checkbox'),    t('Weight'),    array('data' => t('Operations'), 'colspan' => '3'),  );  $rows = array();  foreach (element_children($form) as $mlid) {    if (isset($form[$mlid]['hidden'])) {      $element = &$form[$mlid];      // Build a list of operations.      $operations = array();      foreach (element_children($element['operations']) as $op) {        $operations[] = drupal_render($element['operations'][$op]);      }      while (count($operations) < 2) {        $operations[] = '';      }      // Add special classes to be used for tabledrag.js.      $element['plid']['#attributes']['class'] = 'menu-plid';      $element['mlid']['#attributes']['class'] = 'menu-mlid';      $element['weight']['#attributes']['class'] = 'menu-weight';      // Change the parent field to a hidden. This allows any value but hides the field.      $element['plid']['#type'] = 'hidden';      $row = array();      $row[] = theme('indentation', $element['#item']['depth'] - 1) . drupal_render($element['title']);      $row[] = array('data' => drupal_render($element['hidden']), 'class' => 'checkbox');      $row[] = array('data' => drupal_render($element['expanded']), 'class' => 'checkbox');      $row[] = drupal_render($element['weight']) . drupal_render($element['plid']) . drupal_render($element['mlid']);      $row = array_merge($row, $operations);      $row = array_merge(array('data' => $row), $element['#attributes']);      $row['class'] = !empty($row['class']) ? $row['class'] .' draggable' : 'draggable';      $rows[] = $row;    }  }  $output = '';  if ($rows) {    $output .= theme('table', $header, $rows, array('id' => 'menu-overview'));  }  $output .= drupal_render($form);  return $output;}/** * Menu callback; Build the menu link editing form. */function menu_edit_item(&$form_state, $type, $item, $menu) {  $form['menu'] = array(    '#type' => 'fieldset',    '#title' => t('Menu settings'),    '#collapsible' => FALSE,    '#tree' => TRUE,    '#weight' => -2,    '#attributes' => array('class' => 'menu-item-form'),    '#item' => $item,  );  if ($type == 'add' || empty($item)) {    // This is an add form, initialize the menu link.    $item = array('link_title' => '', 'mlid' => 0, 'plid' => 0, 'menu_name' => $menu['menu_name'], 'weight' => 0, 'link_path' => '', 'options' => array(), 'module' => 'menu', 'expanded' => 0, 'hidden' => 0, 'has_children' => 0);  }  foreach (array('link_path', 'mlid', 'module', 'has_children', 'options') as $key) {    $form['menu'][$key] = array('#type' => 'value', '#value' => $item[$key]);  }  // Any item created or edited via this interface is considered "customized".  $form['menu']['customized'] = array('#type' => 'value', '#value' => 1);  $form['menu']['original_item'] = array('#type' => 'value', '#value' => $item);  $path = $item['link_path'];  if (isset($item['options']['query'])) {    $path .= '?'. $item['options']['query'];  }  if (isset($item['options']['fragment'])) {    $path .= '#'. $item['options']['fragment'];  }  if ($item['module'] == 'menu') {    $form['menu']['link_path'] = array(      '#type' => 'textfield',      '#title' => t('Path'),      '#default_value' => $path,      '#description' => t('The path this menu item links to. This can be an internal Drupal path such as %add-node or an external URL such as %drupal. Enter %front to link to the front page.', array('%front' => '<front>', '%add-node' => 'node/add', '%drupal' => 'http://drupal.org')),      '#required' => TRUE,    );    $form['delete'] = array(      '#type' => 'submit',      '#value' => t('Delete'),      '#access' => $item['mlid'],      '#submit' => array('menu_item_delete_submit'),      '#weight' => 10,    );  }  else {    $form['menu']['_path'] = array(      '#type' => 'item',      '#title' => t('Path'),      '#description' => l($item['link_title'], $item['href'], $item['options']),    );  }  $form['menu']['link_title'] = array('#type' => 'textfield',    '#title' => t('Menu link title'),    '#default_value' => $item['link_title'],    '#description' => t('The link text corresponding to this item that should appear in the menu.'),    '#required' => TRUE,  );  $form['menu']['description'] = array(    '#type' => 'textarea',    '#title' => t('Description'),    '#default_value' => isset($item['options']['attributes']['title']) ? $item['options']['attributes']['title'] : '',    '#rows' => 1,    '#description' => t('The description displayed when hovering over a menu item.'),  );  $form['menu']['enabled'] = array(    '#type' => 'checkbox',    '#title' => t('Enabled'),    '#default_value' => !$item['hidden'],    '#description' => t('Menu items that are not enabled will not be listed in any menu.'),  );  $form['menu']['expanded'] = array(    '#type' => 'checkbox',    '#title' => t('Expanded'),    '#default_value' => $item['expanded'],    '#description' => t('If selected and this menu item has children, the menu will always appear expanded.'),  );  // Generate a list of possible parents (not including this item or descendants).  $options = menu_parent_options(menu_get_menus(), $item);  $default = $item['menu_name'] .':'. $item['plid'];  if (!isset($options[$default])) {    $default = 'navigation:0';  }  $form['menu']['parent'] = array(    '#type' => 'select',    '#title' => t('Parent item'),    '#default_value' => $default,    '#options' => $options,    '#description' => t('The maximum depth for an item and all its children is fixed at !maxdepth. Some menu items may not be available as parents if selecting them would exceed this limit.', array('!maxdepth' => MENU_MAX_DEPTH)),    '#attributes' => array('class' => 'menu-title-select'),  );  $form['menu']['weight'] = array(    '#type' => 'weight',    '#title' => t('Weight'),    '#delta' => 50,    '#default_value' => $item['weight'],    '#description' => t('Optional. In the menu, the heavier items will sink and the lighter items will be positioned nearer the top.'),  );  $form['submit'] = array('#type' => 'submit', '#value' => t('Save'));  return $form;}/** * Validate form values for a menu link being added or edited. */function menu_edit_item_validate($form, &$form_state) {  $item = &$form_state['values']['menu'];  $normal_path = drupal_get_normal_path($item['link_path']);  if ($item['link_path'] != $normal_path) {    drupal_set_message(t('The menu system stores system paths only, but will use the URL alias for display. %link_path has been stored as %normal_path', array('%link_path' => $item['link_path'], '%normal_path' => $normal_path)));    $item['link_path'] = $normal_path;  }  if (!menu_path_is_external($item['link_path'])) {    $parsed_link = parse_url($item['link_path']);    if (isset($parsed_link['query'])) {      $item['options']['query'] = $parsed_link['query'];    }    if (isset($parsed_link['fragment'])) {      $item['options']['fragment'] = $parsed_link['fragment'];    }    if ($item['link_path'] != $parsed_link['path']) {      $item['link_path'] = $parsed_link['path'];    }  }  if (!trim($item['link_path']) || !menu_valid_path($item)) {    form_set_error('link_path', t("The path '@link_path' is either invalid or you do not have access to it.", array('@link_path' => $item['link_path'])));  }}/** * Submit function for the delete button on the menu item editing form. */function menu_item_delete_submit($form, &$form_state) {  $form_state['redirect'] = 'admin/build/menu/item/'. $form_state['values']['menu']['mlid'] .'/delete';}/** * Process menu and menu item add/edit form submissions. */function menu_edit_item_submit($form, &$form_state) {  $item = &$form_state['values']['menu'];  // The value of "hidden" is the opposite of the value  // supplied by the "enabled" checkbox.  $item['hidden'] = (int) !$item['enabled'];  unset($item['enabled']);  $item['options']['attributes']['title'] = $item['description'];  list($item['menu_name'], $item['plid']) = explode(':', $item['parent']);  if (!menu_link_save($item)) {    drupal_set_message(t('There was an error saving the menu link.'), 'error');  }  $form_state['redirect'] = 'admin/build/menu-customize/'. $item['menu_name'];}/** * Menu callback; Build the form that handles the adding/editing of a custom menu. */function menu_edit_menu(&$form_state, $type, $menu = array()) {  if ($type == 'edit') {    $form['menu_name'] = array('#type' => 'value', '#value' => $menu['menu_name']);    $form['#insert'] = FALSE;    $form['delete'] = array(      '#type' => 'submit',      '#value' => t('Delete'),      '#access' => !in_array($menu['menu_name'], menu_list_system_menus()),      '#submit' => array('menu_custom_delete_submit'),      '#weight' => 10,    );  }  else {    $menu = array('menu_name' => '', 'title' => '', 'description' => '');    $form['menu_name'] = array(      '#type' => 'textfield',      '#title' => t('Menu name'),      '#maxsize' => MENU_MAX_MENU_NAME_LENGTH_UI,      '#description' => t('The machine-readable name of this menu. This text will be used for constructing the URL of the <em>menu overview</em> page for this menu. This name must contain only lowercase letters, numbers, and hyphens, and must be unique.'),      '#required' => TRUE,    );    $form['#insert'] = TRUE;  }  $form['#title'] = $menu['title'];  $form['title'] = array(    '#type' => 'textfield',    '#title' => t('Title'),    '#default_value' => $menu['title'],    '#required' => TRUE,  );  $form['description'] = array(    '#type' => 'textarea',    '#title' => t('Description'),    '#default_value' => $menu['description'],  );  $form['submit'] = array(    '#type' => 'submit',    '#value' => t('Save'),  );  return $form;}/** * Submit function for the 'Delete' button on the menu editing form. */function menu_custom_delete_submit($form, &$form_state) {  $form_state['redirect'] = 'admin/build/menu-customize/'. $form_state['values']['menu_name'] .'/delete';}/** * Menu callback; check access and get a confirm form for deletion of a custom menu. */function menu_delete_menu_page($menu) {  // System-defined menus may not be deleted.  if (in_array($menu['menu_name'], menu_list_system_menus())) {    drupal_access_denied();    return;  }  return drupal_get_form('menu_delete_menu_confirm', $menu);}/** * Build a confirm form for deletion of a custom menu. */function menu_delete_menu_confirm(&$form_state, $menu) {  $form['#menu'] = $menu;  $caption = '';  $num_links = db_result(db_query("SELECT COUNT(*) FROM {menu_links} WHERE menu_name = '%s'", $menu['menu_name']));  if ($num_links) {    $caption .= '<p>'. format_plural($num_links, '<strong>Warning:</strong> There is currently 1 menu item in %title. It will be deleted (system-defined items will be reset).', '<strong>Warning:</strong> There are currently @count menu items in %title. They will be deleted (system-defined items will be reset).', array('%title' => $menu['title'])) .'</p>';  }  $caption .= '<p>'. t('This action cannot be undone.') .'</p>';  return confirm_form($form, t('Are you sure you want to delete the custom menu %title?', array('%title' => $menu['title'])), 'admin/build/menu-customize/'. $menu['menu_name'], $caption, t('Delete'));}/** * Delete a custom menu and all items in it. */function menu_delete_menu_confirm_submit($form, &$form_state) {  $menu = $form['#menu'];  $form_state['redirect'] = 'admin/build/menu';  // System-defined menus may not be deleted - only menus defined by this module.  if (in_array($menu['menu_name'], menu_list_system_menus())  || !db_result(db_query("SELECT COUNT(*) FROM {menu_custom} WHERE menu_name = '%s'", $menu['menu_name']))) {    return;  }  // Reset all the menu links defined by the system via hook_menu.  $result = db_query("SELECT * FROM {menu_links} ml INNER JOIN {menu_router} m ON ml.router_path = m.path WHERE ml.menu_name = '%s' AND ml.module = 'system' ORDER BY m.number_parts ASC", $menu['menu_name']);  while ($item = db_fetch_array($result)) {    menu_reset_item($item);  }  // Delete all links to the overview page for this menu.  $result = db_query("SELECT mlid FROM {menu_links} ml WHERE ml.link_path = '%s'", 'admin/build/menu-customize/'. $menu['menu_name']);  while ($m = db_fetch_array($result)) {    menu_link_delete($m['mlid']);  }  // Delete all the links in the menu and the menu from the list of custom menus.  db_query("DELETE FROM {menu_links} WHERE menu_name = '%s'", $menu['menu_name']);  db_query("DELETE FROM {menu_custom} WHERE menu_name = '%s'", $menu['menu_name']);  // Delete all the blocks for this menu.  db_query("DELETE FROM {blocks} WHERE module = 'menu' AND delta = '%s'", $menu['menu_name']);  db_query("DELETE FROM {blocks_roles} WHERE module = 'menu' AND delta = '%s'", $menu['menu_name']);  menu_cache_clear_all();  cache_clear_all();  $t_args = array('%title' => $menu['title']);  drupal_set_message(t('The custom menu %title has been deleted.', $t_args));  watchdog('menu', 'Deleted custom menu %title and all its menu items.', $t_args, WATCHDOG_NOTICE);}/** * Validates the human and machine-readable names when adding or editing a menu. */function menu_edit_menu_validate($form, &$form_state) {  $item = $form_state['values'];  if (preg_match('/[^a-z0-9-]/', $item['menu_name'])) {    form_set_error('menu_name', t('The menu name may only consist of lowercase letters, numbers, and hyphens.'));  }  if (strlen($item['menu_name']) > MENU_MAX_MENU_NAME_LENGTH_UI) {    form_set_error('menu_name', format_plural(MENU_MAX_MENU_NAME_LENGTH_UI, "The menu name can't be longer than 1 character.", "The menu name can't be longer than @count characters."));  }  if ($form['#insert']) {    // We will add 'menu-' to the menu name to help avoid name-space conflicts.    $item['menu_name'] = 'menu-'. $item['menu_name'];    if (db_result(db_query("SELECT menu_name FROM {menu_custom} WHERE menu_name = '%s'", $item['menu_name'])) ||      db_result(db_query_range("SELECT menu_name FROM {menu_links} WHERE menu_name = '%s'", $item['menu_name'], 0, 1))) {      form_set_error('menu_name', t('The menu already exists.'));    }  }}/** * Submit function for adding or editing a custom menu. */function menu_edit_menu_submit($form, &$form_state) {  $menu = $form_state['values'];  $path = 'admin/build/menu-customize/';  if ($form['#insert']) {    // Add 'menu-' to the menu name to help avoid name-space conflicts.    $menu['menu_name'] = 'menu-'. $menu['menu_name'];    $link['link_title'] = $menu['title'];    $link['link_path'] = $path . $menu['menu_name'];    $link['router_path'] = $path .'%';    $link['module'] = 'menu';    $link['plid'] = db_result(db_query("SELECT mlid FROM {menu_links} WHERE link_path = '%s' AND module = '%s'", 'admin/build/menu', 'system'));    menu_link_save($link);    db_query("INSERT INTO {menu_custom} (menu_name, title, description) VALUES ('%s', '%s', '%s')", $menu['menu_name'], $menu['title'], $menu['description']);  }  else {    db_query("UPDATE {menu_custom} SET title = '%s', description = '%s' WHERE menu_name = '%s'", $menu['title'], $menu['description'], $menu['menu_name']);    $result = db_query("SELECT mlid FROM {menu_links} WHERE link_path = '%s'", $path . $menu['menu_name']);    while ($m = db_fetch_array($result)) {      $link = menu_link_load($m['mlid']);      $link['link_title'] = $menu['title'];      menu_link_save($link);    }  }  $form_state['redirect'] = $path . $menu['menu_name'];}/** * Menu callback; Check access and present a confirm form for deleting a menu link. */function menu_item_delete_page($item) {  // Links defined via hook_menu may not be deleted. Updated items are an  // exception, as they can be broken.  if ($item['module'] == 'system' && !$item['updated']) {    drupal_access_denied();    return;  }  return drupal_get_form('menu_item_delete_form', $item);}/** * Build a confirm form for deletion of a single menu link. */function menu_item_delete_form(&$form_state, $item) {  $form['#item'] = $item;  return confirm_form($form, t('Are you sure you want to delete the custom menu item %item?', array('%item' => $item['link_title'])), 'admin/build/menu-customize/'. $item['menu_name']);}/** * Process menu delete form submissions. */function menu_item_delete_form_submit($form, &$form_state) {  $item = $form['#item'];  menu_link_delete($item['mlid']);  $t_args = array('%title' => $item['link_title']);  drupal_set_message(t('The menu item %title has been deleted.', $t_args));  watchdog('menu', 'Deleted menu item %title.', $t_args, WATCHDOG_NOTICE);  $form_state['redirect'] = 'admin/build/menu-customize/'. $item['menu_name'];}/** * Menu callback; reset a single modified item. */function menu_reset_item_confirm(&$form_state, $item) {  $form['item'] = array('#type' => 'value', '#value' => $item);  return confirm_form($form, t('Are you sure you want to reset the item %item to its default values?', array('%item' => $item['link_title'])), 'admin/build/menu-customize/'. $item['menu_name'], t('Any customizations will be lost. This action cannot be undone.'), t('Reset'));}/** * Process menu reset item form submissions. */function menu_reset_item_confirm_submit($form, &$form_state) {  $item = $form_state['values']['item'];  $new_item = menu_reset_item($item);  drupal_set_message(t('The menu item was reset to its default settings.'));  $form_state['redirect'] = 'admin/build/menu-customize/'. $new_item['menu_name'];}/** * Menu callback; Build the form presenting menu configuration options. */function menu_configure() {  $form['intro'] = array(    '#type' => 'item',    '#value' => t('The menu module allows on-the-fly creation of menu links in the content authoring forms. The following option sets the default menu in which a new link will be added.'),  );  $menu_options = menu_get_menus();  $form['menu_default_node_menu'] = array(    '#type' => 'select',    '#title' => t('Default menu for content'),    '#default_value' => variable_get('menu_default_node_menu', 'primary-links'),    '#options' => $menu_options,    '#description' => t('Choose the menu to be the default in the menu options in the content authoring form.'),  );  $primary = variable_get('menu_primary_links_source', 'primary-links');  $primary_options = array_merge($menu_options, array('' => t('No primary links')));  $form['menu_primary_links_source'] = array(    '#type' => 'select',    '#title' => t('Source for the primary links'),    '#default_value' => $primary,    '#options' => $primary_options,    '#tree' => FALSE,    '#description' => t('Select what should be displayed as the primary links.'),  );  $secondary_options = array_merge($menu_options, array('' => t('No secondary links')));  $form["menu_secondary_links_source"] = array(    '#type' => 'select',    '#title' => t('Source for the secondary links'),    '#default_value' => variable_get('menu_secondary_links_source', 'secondary-links'),    '#options' => $secondary_options,    '#tree' => FALSE,    '#description' => t('Select what should be displayed as the secondary links. You can choose the same menu for secondary links as for primary links (currently %primary). If you do this, the children of the active primary menu link will be displayed as secondary links.', array('%primary' => $primary_options[$primary])),  );  return system_settings_form($form);}
<?php// $Id$/** * Implementation of hook_install(). */function menu_install() {  // Create tables.  drupal_install_schema('menu');    $t = get_t();  db_query("INSERT INTO {menu_custom} (menu_name, title, description) VALUES ('%s', '%s', '%s')", 'navigation', $t('Navigation'), $t('The navigation menu is provided by Drupal and is the main interactive menu for any site. It is usually the only menu that contains personalized links for authenticated users, and is often not even visible to anonymous users.'));  db_query("INSERT INTO {menu_custom} (menu_name, title, description) VALUES ('%s', '%s', '%s')", 'primary-links', $t('Primary links'), $t('Primary links are often used at the theme layer to show the major sections of a site. A typical representation for primary links would be tabs along the top.'));  db_query("INSERT INTO {menu_custom} (menu_name, title, description) VALUES ('%s', '%s', '%s')", 'secondary-links', $t('Secondary links'), $t('Secondary links are often used for pages like legal notices, contact details, and other secondary navigation items that play a lesser role than primary links'));}/** * Implementation of hook_uninstall(). */function menu_uninstall() {  // Remove tables.  drupal_uninstall_schema('menu');  menu_rebuild();}/** * Implementation of hook_schema(). */function menu_schema() {  $schema['menu_custom'] = array(    'description' => 'Holds definitions for top-level custom menus (for example, Primary Links).',    'fields' => array(      'menu_name' => array(        'type' => 'varchar',        'length' => 32,        'not null' => TRUE,        'default' => '',        'description' => 'Primary Key: Unique key for menu. This is used as a block delta so length is 32.',      ),      'title' => array(        'type' => 'varchar',        'length' => 255,        'not null' => TRUE,        'default' => '',        'description' => 'Menu title; displayed at top of block.',      ),      'description' => array(        'type' => 'text',        'not null' => FALSE,        'description' => 'Menu description.',      ),    ),    'primary key' => array('menu_name'),  );  return $schema;}
<?php// $Id$/** * Implementation of hook_install(). */function statistics_install() {  // Create tables.  drupal_install_schema('statistics');}/** * Changes session ID  field to VARCHAR(64) to add support for SHA-1 hashes. */function statistics_update_1000() {  $ret = array();  switch ($GLOBALS['db_type']) {    case 'mysql':    case 'mysqli':      $ret[] = update_sql("ALTER TABLE {accesslog} CHANGE COLUMN sid sid varchar(64) NOT NULL default ''");      break;    case 'pgsql':      db_change_column($ret, 'accesslog', 'sid', 'sid', 'varchar(64)', array('not null' => TRUE, 'default' => "''"));      break;  }  return $ret;}/** * Implementation of hook_uninstall(). */function statistics_uninstall() {  // Remove tables.  drupal_uninstall_schema('statistics');  variable_del('statistics_count_content_views');  variable_del('statistics_enable_access_log');  variable_del('statistics_flush_accesslog_timer');  variable_del('statistics_day_timestamp');  variable_del('statistics_block_top_day_num');  variable_del('statistics_block_top_all_num');  variable_del('statistics_block_top_last_num');}/** * Implementation of hook_schema(). */function statistics_schema() {  $schema['accesslog'] = array(    'description' => 'Stores site access information for statistics.',    'fields' => array(      'aid' => array(        'type' => 'serial',        'not null' => TRUE,        'description' => 'Primary Key: Unique accesslog ID.',      ),      'sid' => array(        'type' => 'varchar',        'length' => 64,        'not null' => TRUE,        'default' => '',        'description' => 'Browser session ID of user that visited page.',      ),      'title' => array(        'type' => 'varchar',        'length' => 255,        'not null' => FALSE,        'description' => 'Title of page visited.',      ),      'path' => array(        'type' => 'varchar',        'length' => 255,        'not null' => FALSE,        'description' => 'Internal path to page visited (relative to Drupal root.)',      ),      'url' => array(        'type' => 'text',        'not null' => FALSE,        'description' => 'Referrer URI.',      ),      'hostname' => array(        'type' => 'varchar',        'length' => 128,        'not null' => FALSE,        'description' => 'Hostname of user that visited the page.',      ),      'uid' => array(        'type' => 'int',        'unsigned' => TRUE,        'not null' => FALSE,        'default' => 0,        'description' => 'User {users}.uid that visited the page.',      ),      'timer' => array(        'type' => 'int',        'unsigned' => TRUE,        'not null' => TRUE,        'default' => 0,        'description' => 'Time in milliseconds that the page took to load.',      ),      'timestamp' => array(        'type' => 'int',        'unsigned' => TRUE,        'not null' => TRUE,        'default' => 0,        'description' => 'Timestamp of when the page was visited.',      ),    ),    'indexes' => array(      'accesslog_timestamp' => array('timestamp'),      'uid' => array('uid'),    ),    'primary key' => array('aid'),  );  return $schema;}/** * @defgroup updates-6.x-extra Extra statistics updates for 6.x * @{ *//** * Allow longer referrers. */function statistics_update_6000() {  $ret = array();  db_change_field($ret, 'accesslog', 'url', 'url', array('type' => 'text', 'not null' => FALSE));  return $ret;}/** * @} End of "defgroup updates-6.x-extra" * The next series of updates should start at 7000. */
<?php// $Id$/** * Compose and optionally send an e-mail message. * * Sending an e-mail works with defining an e-mail template (subject, text * and possibly e-mail headers) and the replacement values to use in the * appropriate places in the template. Processed e-mail templates are * requested from hook_mail() from the module sending the e-mail. Any module * can modify the composed e-mail message array using hook_mail_alter(). * Finally drupal_mail_send() sends the e-mail, which can be reused * if the exact same composed e-mail is to be sent to multiple recipients. * * Finding out what language to send the e-mail with needs some consideration. * If you send e-mail to a user, her preferred language should be fine, so * use user_preferred_language(). If you send email based on form values * filled on the page, there are two additional choices if you are not * sending the e-mail to a user on the site. You can either use the language * used to generate the page ($language global variable) or the site default * language. See language_default(). The former is good if sending e-mail to * the person filling the form, the later is good if you send e-mail to an * address previously set up (like contact addresses in a contact form). * * Taking care of always using the proper language is even more important * when sending e-mails in a row to multiple users. Hook_mail() abstracts * whether the mail text comes from an administrator setting or is * static in the source code. It should also deal with common mail tokens, * only receiving $params which are unique to the actual e-mail at hand. * * An example: * * @code *   function example_notify($accounts) { *     foreach ($accounts as $account) { *       $params['account'] = $account; *       // example_mail() will be called based on the first drupal_mail() parameter. *       drupal_mail('example', 'notice', $account->mail, user_preferred_language($account), $params); *     } *   } * *   function example_mail($key, &$message, $params) { *     $language = $message['language']; *     $variables = user_mail_tokens($params['account'], $language); *     switch($key) { *       case 'notice': *         $message['subject'] = t('Notification from !site', $variables, $language->language); *         $message['body'][] = t("Dear !username\n\nThere is new content available on the site.", $variables, $language->language); *         break; *     } *   } * @endcode * * @param $module *   A module name to invoke hook_mail() on. The {$module}_mail() hook will be *   called to complete the $message structure which will already contain common *   defaults. * @param $key *   A key to identify the e-mail sent. The final e-mail id for e-mail altering *   will be {$module}_{$key}. * @param $to *   The e-mail address or addresses where the message will be sent to. The *   formatting of this string must comply with RFC 2822. Some examples are: *    user@example.com *    user@example.com, anotheruser@example.com *    User <user@example.com> *    User <user@example.com>, Another User <anotheruser@example.com> * @param $language *   Language object to use to compose the e-mail. * @param $params *   Optional parameters to build the e-mail. * @param $from *   Sets From to this value, if given. * @param $send *   Send the message directly, without calling drupal_mail_send() manually. * @return *   The $message array structure containing all details of the *   message. If already sent ($send = TRUE), then the 'result' element *   will contain the success indicator of the e-mail, failure being already *   written to the watchdog. (Success means nothing more than the message being *   accepted at php-level, which still doesn't guarantee it to be delivered.) */function drupal_mail($module, $key, $to, $language, $params = array(), $from = NULL, $send = TRUE) {  $default_from = variable_get('site_mail', ini_get('sendmail_from'));  // Bundle up the variables into a structured array for altering.  $message = array(    'id'       => $module .'_'. $key,    'to'       => $to,    'from'     => isset($from) ? $from : $default_from,    'language' => $language,    'params'   => $params,    'subject'  => '',    'body'     => array()  );  // Build the default headers  $headers = array(    'MIME-Version'              => '1.0',    'Content-Type'              => 'text/plain; charset=UTF-8; format=flowed; delsp=yes',    'Content-Transfer-Encoding' => '8Bit',    'X-Mailer'                  => 'Drupal'  );  if ($default_from) {    // To prevent e-mail from looking like spam, the addresses in the Sender and    // Return-Path headers should have a domain authorized to use the originating    // SMTP server. Errors-To is redundant, but shouldn't hurt.    $headers['From'] = $headers['Sender'] = $headers['Return-Path'] = $headers['Errors-To'] = $default_from;  }  if ($from) {    $headers['From'] = $from;  }  $message['headers'] = $headers;  // Build the e-mail (get subject and body, allow additional headers) by  // invoking hook_mail() on this module. We cannot use module_invoke() as  // we need to have $message by reference in hook_mail().  if (function_exists($function = $module .'_mail')) {    $function($key, $message, $params);  }  // Invoke hook_mail_alter() to allow all modules to alter the resulting e-mail.  drupal_alter('mail', $message);  // Concatenate and wrap the e-mail body.  $message['body'] = is_array($message['body']) ? drupal_wrap_mail(implode("\n\n", $message['body'])) : drupal_wrap_mail($message['body']);  // Optionally send e-mail.  if ($send) {    $message['result'] = drupal_mail_send($message);    // Log errors    if (!$message['result']) {      watchdog('mail', 'Error sending e-mail (from %from to %to).', array('%from' => $message['from'], '%to' => $message['to']), WATCHDOG_ERROR);      drupal_set_message(t('Unable to send e-mail. Please contact the site administrator if the problem persists.'), 'error');    }  }  return $message;}/** * Send an e-mail message, using Drupal variables and default settings. * More information in the <a href="http://php.net/manual/en/function.mail.php"> * PHP function reference for mail()</a>. See drupal_mail() for information on * how $message is composed. * * @param $message *  Message array with at least the following elements: *   - id *      A unique identifier of the e-mail type. Examples: 'contact_user_copy', *      'user_password_reset'. *   - to *      The mail address or addresses where the message will be sent to. The *      formatting of this string must comply with RFC 2822. Some examples are: *       user@example.com *       user@example.com, anotheruser@example.com *       User <user@example.com> *       User <user@example.com>, Another User <anotheruser@example.com> *   - subject *      Subject of the e-mail to be sent. This must not contain any newline *      characters, or the mail may not be sent properly. *   - body *      Message to be sent. Accepts both CRLF and LF line-endings. *      E-mail bodies must be wrapped. You can use drupal_wrap_mail() for *      smart plain text wrapping. *   - headers *      Associative array containing all mail headers. * @return *   Returns TRUE if the mail was successfully accepted for delivery, *   FALSE otherwise. */function drupal_mail_send($message) {  // Allow for a custom mail backend.  if (variable_get('smtp_library', '') && file_exists(variable_get('smtp_library', ''))) {    include_once './'. variable_get('smtp_library', '');    return drupal_mail_wrapper($message);  }  else {    $mimeheaders = array();    foreach ($message['headers'] as $name => $value) {      $mimeheaders[] = $name .': '. mime_header_encode($value);    }    return mail(      $message['to'],      mime_header_encode($message['subject']),      // Note: e-mail uses CRLF for line-endings, but PHP's API requires LF.      // They will appear correctly in the actual e-mail that is sent.      str_replace("\r", '', $message['body']),      // For headers, PHP's API suggests that we use CRLF normally,      // but some MTAs incorrecly replace LF with CRLF. See #234403.      join("\n", $mimeheaders)    );  }}/** * Perform format=flowed soft wrapping for mail (RFC 3676). * * We use delsp=yes wrapping, but only break non-spaced languages when * absolutely necessary to avoid compatibility issues. * * We deliberately use LF rather than CRLF, see drupal_mail(). * * @param $text *   The plain text to process. * @param $indent (optional) *   A string to indent the text with. Only '>' characters are repeated on *   subsequent wrapped lines. Others are replaced by spaces. */function drupal_wrap_mail($text, $indent = '') {  // Convert CRLF into LF.  $text = str_replace("\r", '', $text);  // See if soft-wrapping is allowed.  $clean_indent = _drupal_html_to_text_clean($indent);  $soft = strpos($clean_indent, ' ') === FALSE;  // Check if the string has line breaks.  if (strpos($text, "\n") !== FALSE) {    // Remove trailing spaces to make existing breaks hard.    $text = preg_replace('/ +\n/m', "\n", $text);    // Wrap each line at the needed width.    $lines = explode("\n", $text);    array_walk($lines, '_drupal_wrap_mail_line', array('soft' => $soft, 'length' => strlen($indent)));    $text = implode("\n", $lines);  }  else {    // Wrap this line.    _drupal_wrap_mail_line($text, 0, array('soft' => $soft, 'length' => strlen($indent)));  }  // Empty lines with nothing but spaces.  $text = preg_replace('/^ +\n/m', "\n", $text);  // Space-stuff special lines.  $text = preg_replace('/^(>| |From)/m', ' $1', $text);  // Apply indentation. We only include non-'>' indentation on the first line.  $text = $indent . substr(preg_replace('/^/m', $clean_indent, $text), strlen($indent));  return $text;}/** * Transform an HTML string into plain text, preserving the structure of the * markup. Useful for preparing the body of a node to be sent by e-mail. * * The output will be suitable for use as 'format=flowed; delsp=yes' text * (RFC 3676) and can be passed directly to drupal_mail() for sending. * * We deliberately use LF rather than CRLF, see drupal_mail(). * * This function provides suitable alternatives for the following tags: * <a> <em> <i> <strong> <b> <br> <p> <blockquote> <ul> <ol> <li> <dl> <dt> * <dd> <h1> <h2> <h3> <h4> <h5> <h6> <hr> * * @param $string *   The string to be transformed. * @param $allowed_tags (optional) *   If supplied, a list of tags that will be transformed. If omitted, all *   all supported tags are transformed. * @return *   The transformed string. */function drupal_html_to_text($string, $allowed_tags = NULL) {  // Cache list of supported tags.  static $supported_tags;  if (empty($supported_tags)) {    $supported_tags = array('a', 'em', 'i', 'strong', 'b', 'br', 'p', 'blockquote', 'ul', 'ol', 'li', 'dl', 'dt', 'dd', 'h1', 'h2', 'h3', 'h4', 'h5', 'h6', 'hr');  }  // Make sure only supported tags are kept.  $allowed_tags = isset($allowed_tags) ? array_intersect($supported_tags, $allowed_tags) : $supported_tags;  // Make sure tags, entities and attributes are well-formed and properly nested.  $string = _filter_htmlcorrector(filter_xss($string, $allowed_tags));  // Apply inline styles.  $string = preg_replace('!</?(em|i)((?> +)[^>]*)?>!i', '/', $string);  $string = preg_replace('!</?(strong|b)((?> +)[^>]*)?>!i', '*', $string);  // Replace inline <a> tags with the text of link and a footnote.  // 'See <a href="http://drupal.org">the Drupal site</a>' becomes  // 'See the Drupal site [1]' with the URL included as a footnote.  _drupal_html_to_mail_urls(NULL, TRUE);  $pattern = '@(<a[^>]+?href="([^"]*)"[^>]*?>(.+?)</a>)@i';  $string = preg_replace_callback($pattern, '_drupal_html_to_mail_urls', $string);  $urls = _drupal_html_to_mail_urls();  $footnotes = '';  if (count($urls)) {    $footnotes .= "\n";    for ($i = 0, $max = count($urls); $i < $max; $i++) {      $footnotes .= '['. ($i + 1) .'] '. $urls[$i] ."\n";    }  }  // Split tags from text.  $split = preg_split('/<([^>]+?)>/', $string, -1, PREG_SPLIT_DELIM_CAPTURE);  // Note: PHP ensures the array consists of alternating delimiters and literals  // and begins and ends with a literal (inserting $null as required).  $tag = FALSE; // Odd/even counter (tag or no tag)  $casing = NULL; // Case conversion function  $output = '';  $indent = array(); // All current indentation string chunks  $lists = array(); // Array of counters for opened lists  foreach ($split as $value) {    $chunk = NULL; // Holds a string ready to be formatted and output.    // Process HTML tags (but don't output any literally).    if ($tag) {      list($tagname) = explode(' ', strtolower($value), 2);      switch ($tagname) {        // List counters        case 'ul':          array_unshift($lists, '*');          break;        case 'ol':          array_unshift($lists, 1);          break;        case '/ul':        case '/ol':          array_shift($lists);          $chunk = ''; // Ensure blank new-line.          break;        // Quotation/list markers, non-fancy headers        case 'blockquote':          // Format=flowed indentation cannot be mixed with lists.          $indent[] = count($lists) ? ' "' : '>';          break;        case 'li':          $indent[] = is_numeric($lists[0]) ? ' '. $lists[0]++ .') ' : ' * ';          break;        case 'dd':          $indent[] = '    ';          break;        case 'h3':          $indent[] = '.... ';          break;        case 'h4':          $indent[] = '.. ';          break;        case '/blockquote':          if (count($lists)) {            // Append closing quote for inline quotes (immediately).            $output = rtrim($output, "> \n") ."\"\n";            $chunk = ''; // Ensure blank new-line.          }          // Fall-through        case '/li':        case '/dd':          array_pop($indent);          break;        case '/h3':        case '/h4':          array_pop($indent);        case '/h5':        case '/h6':          $chunk = ''; // Ensure blank new-line.          break;        // Fancy headers        case 'h1':          $indent[] = '======== ';          $casing = 'drupal_strtoupper';          break;        case 'h2':          $indent[] = '-------- ';          $casing = 'drupal_strtoupper';          break;        case '/h1':        case '/h2':          $casing = NULL;          // Pad the line with dashes.          $output = _drupal_html_to_text_pad($output, ($tagname == '/h1') ? '=' : '-', ' ');          array_pop($indent);          $chunk = ''; // Ensure blank new-line.          break;        // Horizontal rulers        case 'hr':          // Insert immediately.          $output .= drupal_wrap_mail('', implode('', $indent)) ."\n";          $output = _drupal_html_to_text_pad($output, '-');          break;        // Paragraphs and definition lists        case '/p':        case '/dl':          $chunk = ''; // Ensure blank new-line.          break;      }    }    // Process blocks of text.    else {      // Convert inline HTML text to plain text.      $value = trim(preg_replace('/\s+/', ' ', decode_entities($value)));      if (strlen($value)) {        $chunk = $value;      }    }    // See if there is something waiting to be output.    if (isset($chunk)) {      // Apply any necessary case conversion.      if (isset($casing)) {        $chunk = $casing($chunk);      }      // Format it and apply the current indentation.      $output .= drupal_wrap_mail($chunk, implode('', $indent)) ."\n";      // Remove non-quotation markers from indentation.      $indent = array_map('_drupal_html_to_text_clean', $indent);    }    $tag = !$tag;  }  return $output . $footnotes;}/** * Helper function for array_walk in drupal_wrap_mail(). * * Wraps words on a single line. */function _drupal_wrap_mail_line(&$line, $key, $values) {  // Use soft-breaks only for purely quoted or unindented text.  $line = wordwrap($line, 77 - $values['length'], $values['soft'] ? "  \n" : "\n");  // Break really long words at the maximum width allowed.  $line = wordwrap($line, 996 - $values['length'], $values['soft'] ? " \n" : "\n");}/** * Helper function for drupal_html_to_text(). * * Keeps track of URLs and replaces them with placeholder tokens. */function _drupal_html_to_mail_urls($match = NULL, $reset = FALSE) {  global $base_url, $base_path;  static $urls = array(), $regexp;  if ($reset) {    // Reset internal URL list.    $urls = array();  }  else {    if (empty($regexp)) {      $regexp = '@^'. preg_quote($base_path, '@') .'@';    }    if ($match) {      list(, , $url, $label) = $match;      // Ensure all URLs are absolute.      $urls[] = strpos($url, '://') ? $url : preg_replace($regexp, $base_url .'/', $url);      return $label .' ['. count($urls) .']';    }  }  return $urls;}/** * Helper function for drupal_wrap_mail() and drupal_html_to_text(). * * Replace all non-quotation markers from a given piece of indentation with spaces. */function _drupal_html_to_text_clean($indent) {  return preg_replace('/[^>]/', ' ', $indent);}/** * Helper function for drupal_html_to_text(). * * Pad the last line with the given character. */function _drupal_html_to_text_pad($text, $pad, $prefix = '') {  // Remove last line break.  $text = substr($text, 0, -1);  // Calculate needed padding space and add it.  if (($p = strrpos($text, "\n")) === FALSE) {    $p = -1;  }  $n = max(0, 79 - (strlen($text) - $p));  // Add prefix and padding, and restore linebreak.  return $text . $prefix . str_repeat($pad, $n - strlen($prefix)) ."\n";}
<?php// $Id$/** * @file * Administrative page callbacks for the path module. *//** * Return a listing of all defined URL aliases. * When filter key passed, perform a standard search on the given key, * and return the list of matching URL aliases. */function path_admin_overview($keys = NULL) {  // Add the filter form above the overview table.  $output = drupal_get_form('path_admin_filter_form', $keys);  // Enable language column if locale is enabled or if we have any alias with language  $count = db_result(db_query("SELECT COUNT(*) FROM {url_alias} WHERE language != ''"));  $multilanguage = (module_exists('locale') || $count);  if ($keys) {    // Replace wildcards with MySQL/PostgreSQL wildcards.    $keys = preg_replace('!\*+!', '%', $keys);    $sql = "SELECT * FROM {url_alias} WHERE dst LIKE '%%%s%%'";  }  else {    $sql = 'SELECT * FROM {url_alias}';  }  $header = array(    array('data' => t('Alias'), 'field' => 'dst', 'sort' => 'asc'),    array('data' => t('System'), 'field' => 'src'),    array('data' => t('Operations'), 'colspan' => '2')  );  if ($multilanguage) {    $header[3] = $header[2];    $header[2] = array('data' => t('Language'), 'field' => 'language');  }  $sql .= tablesort_sql($header);  $result = pager_query($sql, 50, 0 , NULL, $keys);  $rows = array();  $destination = drupal_get_destination();  while ($data = db_fetch_object($result)) {    $row = array(check_plain($data->dst), check_plain($data->src), l(t('edit'), "admin/build/path/edit/$data->pid", array('query' => $destination)), l(t('delete'), "admin/build/path/delete/$data->pid", array('query' => $destination)));    if ($multilanguage) {      $row[4] = $row[3];      $row[3] = $row[2];      $row[2] = module_invoke('locale', 'language_name', $data->language);    }    $rows[] = $row;  }  if (empty($rows)) {    $empty_message = $keys ? t('No URL aliases found.') : t('No URL aliases available.') ;    $rows[] = array(array('data' => $empty_message, 'colspan' => ($multilanguage ? 5 : 4)));  }  $output .= theme('table', $header, $rows);  $output .= theme('pager', NULL, 50, 0);  return $output;}/** * Menu callback; handles pages for creating and editing URL aliases. */function path_admin_edit($pid = 0) {  if ($pid) {    $alias = path_load($pid);    drupal_set_title(check_plain($alias['dst']));    $output = drupal_get_form('path_admin_form', $alias);  }  else {    $output = drupal_get_form('path_admin_form');  }  return $output;}/** * Return a form for editing or creating an individual URL alias. * * @ingroup forms * @see path_admin_form_validate() * @see path_admin_form_submit() */function path_admin_form(&$form_state, $edit = array('src' => '', 'dst' => '', 'language' => '', 'pid' => NULL)) {  $form['#alias'] = $edit;  $form['src'] = array(    '#type' => 'textfield',    '#title' => t('Existing system path'),    '#default_value' => $edit['src'],    '#maxlength' => 128,    '#size' => 45,    '#description' => t('Specify the existing path you wish to alias. For example: node/28, forum/1, taxonomy/term/1+2.'),    '#field_prefix' => url(NULL, array('absolute' => TRUE)) . (variable_get('clean_url', 0) ? '' : '?q='),    '#required' => TRUE,  );  $form['dst'] = array(    '#type' => 'textfield',    '#title' => t('Path alias'),    '#default_value' => $edit['dst'],    '#maxlength' => 128,    '#size' => 45,    '#description' => t('Specify an alternative path by which this data can be accessed. For example, type "about" when writing an about page. Use a relative path and don\'t add a trailing slash or the URL alias won\'t work.'),    '#field_prefix' => url(NULL, array('absolute' => TRUE)) . (variable_get('clean_url', 0) ? '' : '?q='),    '#required' => TRUE,  );  // This will be a hidden value unless locale module is enabled  $form['language'] = array(    '#type' => 'value',    '#value' => $edit['language']  );  if ($edit['pid']) {    $form['pid'] = array('#type' => 'hidden', '#value' => $edit['pid']);    $form['submit'] = array('#type' => 'submit', '#value' => t('Update alias'));  }  else {    $form['submit'] = array('#type' => 'submit', '#value' => t('Create new alias'));  }  return $form;}/** * Verify that a new URL alias is valid */function path_admin_form_validate($form, &$form_state) {  $src = $form_state['values']['src'];  $dst = $form_state['values']['dst'];  $pid = isset($form_state['values']['pid']) ? $form_state['values']['pid'] : 0;  // Language is only set if locale module is enabled, otherwise save for all languages.  $language = isset($form_state['values']['language']) ? $form_state['values']['language'] : '';  if (db_result(db_query("SELECT COUNT(dst) FROM {url_alias} WHERE pid != %d AND dst = '%s' AND language = '%s'", $pid, $dst, $language))) {    form_set_error('dst', t('The alias %alias is already in use in this language.', array('%alias' => $dst)));  }  $item = menu_get_item($src);  if (!$item || !$item['access']) {    form_set_error('src', t("The path '@link_path' is either invalid or you do not have access to it.", array('@link_path' => $src)));  }}/** * Save a new URL alias to the database. */function path_admin_form_submit($form, &$form_state) {  // Language is only set if locale module is enabled  path_set_alias($form_state['values']['src'], $form_state['values']['dst'], isset($form_state['values']['pid']) ? $form_state['values']['pid'] : 0, isset($form_state['values']['language']) ? $form_state['values']['language'] : '');  drupal_set_message(t('The alias has been saved.'));  $form_state['redirect'] = 'admin/build/path';  return;}/** * Menu callback; confirms deleting an URL alias */function path_admin_delete_confirm($form_state, $pid) {  $path = path_load($pid);  if (user_access('administer url aliases')) {    $form['pid'] = array('#type' => 'value', '#value' => $pid);    $output = confirm_form($form,      t('Are you sure you want to delete path alias %title?', array('%title' => $path['dst'])),      isset($_GET['destination']) ? $_GET['destination'] : 'admin/build/path');  }  return $output;}/** * Execute URL alias deletion */function path_admin_delete_confirm_submit($form, &$form_state) {  if ($form_state['values']['confirm']) {    path_admin_delete($form_state['values']['pid']);    $form_state['redirect'] = 'admin/build/path';    return;  }}/** * Return a form to filter URL aliases. * * @ingroup forms * @see path_admin_filter_form_submit() */function path_admin_filter_form(&$form_state, $keys = '') {  $form['#attributes'] = array('class' => 'search-form');  $form['basic'] = array('#type' => 'fieldset',    '#title' => t('Filter aliases')  );  $form['basic']['inline'] = array('#prefix' => '<div class="container-inline">', '#suffix' => '</div>');  $form['basic']['inline']['filter'] = array(    '#type' => 'textfield',    '#title' => '',    '#default_value' => $keys,    '#maxlength' => 128,    '#size' => 25,  );  $form['basic']['inline']['submit'] = array(    '#type' => 'submit',    '#value' => t('Filter'),    '#submit' => array('path_admin_filter_form_submit_filter'),    );  if ($keys) {    $form['basic']['inline']['reset'] = array(      '#type' => 'submit',      '#value' => t('Reset'),      '#submit' => array('path_admin_filter_form_submit_reset'),    );  }  return $form;}/** * Process filter form submission when the Filter button is pressed. */function path_admin_filter_form_submit_filter($form, &$form_state) {  $form_state['redirect'] = 'admin/build/path/list/'. trim($form_state['values']['filter']);}/** * Process filter form submission when the Reset button is pressed. */function path_admin_filter_form_submit_reset($form, &$form_state) {  $form_state['redirect'] = 'admin/build/path/list';}/** * Helper function for grabbing filter keys. */function path_admin_filter_get_keys() {  // Extract keys as remainder of path  $path = explode('/', $_GET['q'], 5);  return count($path) == 5 ? $path[4] : '';}
<?php// $Id$/** * Implementation of hook_install(). */function contact_install() {  // Create tables.  drupal_install_schema('contact');}/** * Implementation of hook_uninstall(). */function contact_uninstall() {  // Remove tables.  drupal_uninstall_schema('contact');  variable_del('contact_default_status');  variable_del('contact_form_information');  variable_del('contact_hourly_threshold');}/** * Implementation of hook_schema(). */function contact_schema() {  $schema['contact'] = array(    'description' => 'Contact form category settings.',    'fields' => array(      'cid' => array(        'type' => 'serial',        'unsigned' => TRUE,        'not null' => TRUE,        'description' => 'Primary Key: Unique category ID.',      ),      'category' => array(        'type' => 'varchar',        'length' => 255,        'not null' => TRUE,        'default' => '',        'description' => 'Category name.',      ),      'recipients' => array(        'type' => 'text',        'not null' => TRUE,        'size' => 'big',        'description' => 'Comma-separated list of recipient e-mail addresses.',      ),      'reply' => array(        'type' => 'text',        'not null' => TRUE,        'size' => 'big',        'description' => 'Text of the auto-reply message.',      ),      'weight' => array(        'type' => 'int',        'not null' => TRUE,        'default' => 0,        'size' => 'tiny',        'description' => "The category's weight.",      ),      'selected' => array(        'type' => 'int',        'not null' => TRUE,        'default' => 0,        'size' => 'tiny',        'description' => 'Flag to indicate whether or not category is selected by default. (1 = Yes, 0 = No)',      ),    ),    'primary key' => array('cid'),    'unique keys' => array(      'category' => array('category'),    ),    'indexes' => array(      'list' => array('weight', 'category'),    ),  );  return $schema;}
<?php// $Id$/** * @file * Theming for maintenance pages. *//** * Sets up the theming system for site installs, updates and when the site is * in off-line mode. It also applies when the database is unavailable. * * Minnelli is always used for the initial install and update operations. In * other cases, "settings.php" must have a "maintenance_theme" key set for the * $conf variable in order to change the maintenance theme. */function _drupal_maintenance_theme() {  global $theme, $theme_key;  // If $theme is already set, assume the others are set too, and do nothing.  if (isset($theme)) {    return;  }  require_once './includes/path.inc';  require_once './includes/theme.inc';  require_once './includes/common.inc';  require_once './includes/unicode.inc';  require_once './includes/file.inc';  require_once './includes/module.inc';  require_once './includes/database.inc';  unicode_check();  // Install and update pages are treated differently to prevent theming overrides.  if (defined('MAINTENANCE_MODE') && (MAINTENANCE_MODE == 'install' || MAINTENANCE_MODE == 'update')) {    $theme = 'minnelli';  }  else {    if (!db_is_active()) {      // Because we are operating in a crippled environment, we need to      // bootstrap just enough to allow hook invocations to work.      $module_list['system']['filename'] = 'modules/system/system.module';      $module_list['filter']['filename'] = 'modules/filter/filter.module';      module_list(TRUE, FALSE, FALSE, $module_list);      drupal_load('module', 'system');      drupal_load('module', 'filter');    }    $theme = variable_get('maintenance_theme', 'minnelli');  }  $themes = list_themes();  // Store the identifier for retrieving theme settings with.  $theme_key = $theme;  // Find all our ancestor themes and put them in an array.  $base_theme = array();  $ancestor = $theme;  while ($ancestor && isset($themes[$ancestor]->base_theme)) {    $base_theme[] = $new_base_theme = $themes[$themes[$ancestor]->base_theme];    $ancestor = $themes[$ancestor]->base_theme;  }  _init_theme($themes[$theme], array_reverse($base_theme), '_theme_load_offline_registry');  // These are usually added from system_init() -except maintenance.css.  // When the database is inactive it's not called so we add it here.  drupal_add_css(drupal_get_path('module', 'system') .'/defaults.css', 'module');  drupal_add_css(drupal_get_path('module', 'system') .'/system.css', 'module');  drupal_add_css(drupal_get_path('module', 'system') .'/system-menus.css', 'module');  drupal_add_css(drupal_get_path('module', 'system') .'/maintenance.css', 'module');}/** * This builds the registry when the site needs to bypass any database calls. */function _theme_load_offline_registry($theme, $base_theme = NULL, $theme_engine = NULL) {  $registry = _theme_build_registry($theme, $base_theme, $theme_engine);  _theme_set_registry($registry);}/** * Return a themed list of maintenance tasks to perform. * * @ingroup themeable */function theme_task_list($items, $active = NULL) {  $done = isset($items[$active]) || $active == NULL;  $output = '<ol class="task-list">';  foreach ($items as $k => $item) {    if ($active == $k) {      $class = 'active';      $done = false;    }    else {      $class = $done ? 'done' : '';    }    $output .= '<li class="'. $class .'">'. $item .'</li>';  }  $output .= '</ol>';  return $output;}/** * Generate a themed installation page. * * Note: this function is not themeable. * * @param $content *   The page content to show. */function theme_install_page($content) {  drupal_set_header('Content-Type: text/html; charset=utf-8');  // Assign content.  $variables['content'] = $content;  // Delay setting the message variable so it can be processed below.  $variables['show_messages'] = FALSE;  // The maintenance preprocess function is recycled here.  template_preprocess_maintenance_page($variables);  // Special handling of error messages  $messages = drupal_set_message();  if (isset($messages['error'])) {    $title = count($messages['error']) > 1 ? st('The following errors must be resolved before you can continue the installation process') : st('The following error must be resolved before you can continue the installation process');    $variables['messages'] .= '<h3>'. $title .':</h3>';    $variables['messages'] .= theme('status_messages', 'error');    $variables['content'] .= '<p>'. st('Please check the error messages and <a href="!url">try again</a>.', array('!url' => check_url(request_uri()))) .'</p>';  }  // Special handling of warning messages  if (isset($messages['warning'])) {    $title = count($messages['warning']) > 1 ? st('The following installation warnings should be carefully reviewed') : st('The following installation warning should be carefully reviewed');    $variables['messages'] .= '<h4>'. $title .':</h4>';    $variables['messages'] .= theme('status_messages', 'warning');  }  // Special handling of status messages  if (isset($messages['status'])) {    $title = count($messages['status']) > 1 ? st('The following installation warnings should be carefully reviewed, but in most cases may be safely ignored') : st('The following installation warning should be carefully reviewed, but in most cases may be safely ignored');    $variables['messages'] .= '<h4>'. $title .':</h4>';    $variables['messages'] .= theme('status_messages', 'status');  }  // This was called as a theme hook (not template), so we need to  // fix path_to_theme() for the template, to point at the actual  // theme rather than system module as owner of the hook.  global $theme_path;  $theme_path = 'themes/garland';  return theme_render_template('themes/garland/maintenance-page.tpl.php', $variables);}/** * Generate a themed update page. * * Note: this function is not themeable. * * @param $content *   The page content to show. * @param $show_messages *   Whether to output status and error messages. *   FALSE can be useful to postpone the messages to a subsequent page. */function theme_update_page($content, $show_messages = TRUE) {  // Set required headers.  drupal_set_header('Content-Type: text/html; charset=utf-8');  // Assign content and show message flag.  $variables['content'] = $content;  $variables['show_messages'] = $show_messages;  // The maintenance preprocess function is recycled here.  template_preprocess_maintenance_page($variables);  // Special handling of warning messages.  $messages = drupal_set_message();  if (isset($messages['warning'])) {    $title = count($messages['warning']) > 1 ? 'The following update warnings should be carefully reviewed before continuing' : 'The following update warning should be carefully reviewed before continuing';    $variables['messages'] .= '<h4>'. $title .':</h4>';    $variables['messages'] .= theme('status_messages', 'warning');  }  // This was called as a theme hook (not template), so we need to  // fix path_to_theme() for the template, to point at the actual  // theme rather than system module as owner of the hook.  global $theme_path;  $theme_path = 'themes/garland';  return theme_render_template('themes/garland/maintenance-page.tpl.php', $variables);}/** * The variables generated here is a mirror of template_preprocess_page(). * This preprocessor will run it's course when theme_maintenance_page() is * invoked. It is also used in theme_install_page() and theme_update_page() to * keep all the variables consistent. * * An alternate template file of "maintenance-page-offline.tpl.php" can be * used when the database is offline to hide errors and completely replace the * content. * * The $variables array contains the following arguments: * - $content * - $show_blocks * * @see maintenance-page.tpl.php */function template_preprocess_maintenance_page(&$variables) {  // Add favicon  if (theme_get_setting('toggle_favicon')) {    drupal_set_html_head('<link rel="shortcut icon" href="'. check_url(theme_get_setting('favicon')) .'" type="image/x-icon" />');  }  global $theme;  // Retrieve the theme data to list all available regions.  $theme_data = _system_theme_data();  $regions = $theme_data[$theme]->info['regions'];  // Get all region content set with drupal_set_content().  foreach (array_keys($regions) as $region) {    // Assign region to a region variable.    $region_content = drupal_get_content($region);    isset($variables[$region]) ? $variables[$region] .= $region_content : $variables[$region] = $region_content;  }  // Setup layout variable.  $variables['layout'] = 'none';  if (!empty($variables['left'])) {    $variables['layout'] = 'left';  }  if (!empty($variables['right'])) {    $variables['layout'] = ($variables['layout'] == 'left') ? 'both' : 'right';  }  // Construct page title  if (drupal_get_title()) {    $head_title = array(strip_tags(drupal_get_title()), variable_get('site_name', 'Drupal'));  }  else {    $head_title = array(variable_get('site_name', 'Drupal'));    if (variable_get('site_slogan', '')) {      $head_title[] = variable_get('site_slogan', '');    }  }  $variables['head_title']        = implode(' | ', $head_title);  $variables['base_path']         = base_path();  $variables['breadcrumb']        = '';  $variables['feed_icons']        = '';  $variables['footer_message']    = filter_xss_admin(variable_get('site_footer', FALSE));  $variables['head']              = drupal_get_html_head();  $variables['help']              = '';  $variables['language']          = $GLOBALS['language'];  $variables['language']->dir     = $GLOBALS['language']->direction ? 'rtl' : 'ltr';  $variables['logo']              = theme_get_setting('logo');  $variables['messages']          = $variables['show_messages'] ? theme('status_messages') : '';  $variables['mission']           = '';  $variables['primary_links']     = array();  $variables['secondary_links']   = array();  $variables['search_box']        = '';  $variables['site_name']         = (theme_get_setting('toggle_name') ? variable_get('site_name', 'Drupal') : '');  $variables['site_slogan']       = (theme_get_setting('toggle_slogan') ? variable_get('site_slogan', '') : '');  $variables['css']               = drupal_add_css();  $variables['styles']            = drupal_get_css();  $variables['scripts']           = drupal_get_js();  $variables['tabs']              = '';  $variables['title']             = drupal_get_title();  $variables['closure']           = '';  // Compile a list of classes that are going to be applied to the body element.  $body_classes = array();  $body_classes[] = 'in-maintenance';  if (isset($variables['db_is_active']) && !$variables['db_is_active']) {    $body_classes[] = 'db-offline';  }  if ($variables['layout'] == 'both') {    $body_classes[] = 'two-sidebars';  }  elseif ($variables['layout'] == 'none') {    $body_classes[] = 'no-sidebars';  }  else {    $body_classes[] = 'one-sidebar sidebar-'. $variables['layout'];  }  $variables['body_classes'] = implode(' ', $body_classes);  // Dead databases will show error messages so supplying this template will  // allow themers to override the page and the content completely.  if (isset($variables['db_is_active']) && !$variables['db_is_active']) {    $variables['template_file'] = 'maintenance-page-offline';  }}
<?php// $Id$/** * @file *   Manages content translations. * *   Translations are managed in sets of posts, which represent the same *   information in different languages. Only content types for which the *   administrator explicitly enabled translations could have translations *   associated. Translations are managed in sets with exactly one source *   post per set. The source post is used to translate to different *   languages, so if the source post is significantly updated, the *   editor can decide to mark all translations outdated. * *   The node table stores the values used by this module: *    - 'tnid' is the translation set id, which equals the node id *      of the source post. *    - 'translate' is a flag, either indicating that the translation *      is up to date (0) or needs to be updated (1). *//** * Identifies a content type which has translation support enabled. */define('TRANSLATION_ENABLED', 2);/** * Implementation of hook_help(). */function translation_help($path, $arg) {  switch ($path) {    case 'admin/help#translation':      $output = '<p>'. t('The content translation module allows content to be translated into different languages. Working with the <a href="@locale">locale module</a> (which manages enabled languages and provides translation for the site interface), the content translation module is key to creating and maintaining translated site content.', array('@locale' => url('admin/help/locale'))) .'</p>';      $output .= '<p>'. t('Configuring content translation and translation-enabled content types:') .'</p>';      $output .= '<ul><li>'. t('Assign the <em>translate content</em> permission to the appropriate user roles at the <a href="@permissions">Permissions configuration page</a>.', array('@permissions' => url('admin/user/permissions'))) .'</li>';      $output .= '<li>'. t('Add and enable desired languages at the <a href="@languages">Languages configuration page</a>.', array('@languages' => url('admin/settings/language'))) .'</li>';      $output .= '<li>'. t('Determine which <a href="@content-types">content types</a> should support translation features. To enable translation support for a content type, edit the type and at the <em>Multilingual support</em> drop down, select <em>Enabled, with translation</em>. (<em>Multilingual support</em> is located within <em>Workflow settings</em>.) Be sure to save each content type after enabling multilingual support.', array('@content-types' => url('admin/content/types'))) .'</li></ul>';      $output .= '<p>'. t('Working with translation-enabled content types:') .'</p>';      $output .= '<ul><li>'. t('Use the <em>Language</em> drop down to select the appropriate language when creating or editing posts.') .'</li>';      $output .= '<li>'. t('Provide new or edit current translations for existing posts via the <em>Translation</em> tab. Only visible while viewing a post as a user with the <em>translate content</em> permission, this tab allows translations to be added or edited using a specialized editing form that also displays the content being translated.') .'</li>';      $output .= '<li>'. t('Update translations as needed, so that they accurately reflect changes in the content of the original post. The translation status flag provides a simple method for tracking outdated translations. After editing a post, for example, select the <em>Flag translations as outdated</em> check box to mark all of its translations as outdated and in need of revision. Individual translations may be marked for revision by selecting the <em>This translation needs to be updated</em> check box on the translation editing form.') .'</li>';      $output .= '<li>'. t('The <a href="@content-node">Content management administration page</a> displays the language of each post, and also allows filtering by language or translation status.', array('@content-node' => url('admin/content/node'))) .'</li></ul>';      $output .= '<p>'. t('Use the <a href="@blocks">language switcher block</a> provided by locale module to allow users to select a language. If available, both the site interface and site content are presented in the language selected.', array('@blocks' => url('admin/build/block'))) .'</p>';      $output .= '<p>'. t('For more information, see the online handbook entry for <a href="@translation">Translation module</a>.', array('@translation' => 'http://drupal.org/handbook/modules/translation/')) .'</p>';      return $output;    case 'node/%/translate':      $output = '<p>'. t('Translations of a piece of content are managed with translation sets. Each translation set has one source post and any number of translations in any of the <a href="!languages">enabled languages</a>. All translations are tracked to be up to date or outdated based on whether the source post was modified significantly.', array('!languages' => url('admin/settings/language'))) .'</p>';      return $output;  }}/** * Implementation of hook_menu(). */function translation_menu() {  $items = array();  $items['node/%node/translate'] = array(    'title' => 'Translate',    'page callback' => 'translation_node_overview',    'page arguments' => array(1),    'access callback' => '_translation_tab_access',    'access arguments' => array(1),    'type' => MENU_LOCAL_TASK,    'weight' => 2,    'file' => 'translation.pages.inc',  );  return $items;}/** * Menu access callback. * * Only display translation tab for node types, which have translation enabled * and where the current node is not language neutral (which should span * all languages). */function _translation_tab_access($node) {  return !empty($node->language) && translation_supported_type($node->type) && node_access('view', $node) && user_access('translate content');}/** * Implementation of hook_perm(). */function translation_perm() {  return array('translate content');}/** * Implementation of hook_form_alter(). * * - Add translation option to content type form. * - Alters language fields on node forms when a translation *   is about to be created. */function translation_form_alter(&$form, $form_state, $form_id) {  if ($form_id == 'node_type_form') {    // Add translation option to content type form.    $form['workflow']['language_content_type']['#options'][TRANSLATION_ENABLED] = t('Enabled, with translation');    // Description based on text from locale.module.    $form['workflow']['language_content_type']['#description'] = t('Enable multilingual support for this content type. If enabled, a language selection field will be added to the editing form, allowing you to select from one of the <a href="!languages">enabled languages</a>. You can also turn on translation for this content type, which lets you have content translated to any of the enabled languages. If disabled, new posts are saved with the default language. Existing content will not be affected by changing this option.', array('!languages' => url('admin/settings/language')));  }  elseif (isset($form['#id']) && $form['#id'] == 'node-form' && translation_supported_type($form['#node']->type)) {    $node = $form['#node'];    if (!empty($node->translation_source)) {      // We are creating a translation. Add values and lock language field.      $form['translation_source'] = array('#type' => 'value', '#value' => $node->translation_source);      $form['language']['#disabled'] = TRUE;    }    elseif (!empty($node->nid) && !empty($node->tnid)) {      // Disable languages for existing translations, so it is not possible to switch this      // node to some language which is already in the translation set. Also remove the      // language neutral option.      unset($form['language']['#options']['']);      foreach (translation_node_get_translations($node->tnid) as $translation) {        if ($translation->nid != $node->nid) {          unset($form['language']['#options'][$translation->language]);        }      }      // Add translation values and workflow options.      $form['tnid'] = array('#type' => 'value', '#value' => $node->tnid);      $form['translation'] = array(        '#type' => 'fieldset',        '#title' => t('Translation settings'),        '#access' => user_access('translate content'),        '#collapsible' => TRUE,        '#collapsed' => !$node->translate,        '#tree' => TRUE,        '#weight' => 30,      );      if ($node->tnid == $node->nid) {        // This is the source node of the translation        $form['translation']['retranslate'] = array(          '#type' => 'checkbox',          '#title' => t('Flag translations as outdated'),          '#default_value' => 0,          '#description' => t('If you made a significant change, which means translations should be updated, you can flag all translations of this post as outdated. This will not change any other property of those posts, like whether they are published or not.'),        );        $form['translation']['status'] = array('#type' => 'value', '#value' => 0);      }      else {        $form['translation']['status'] = array(          '#type' => 'checkbox',          '#title' => t('This translation needs to be updated'),          '#default_value' => $node->translate,          '#description' => t('When this option is checked, this translation needs to be updated because the source post has changed. Uncheck when the translation is up to date again.'),        );      }    }  }}/** * Implementation of hook_link(). * * Display translation links with native language names, if this node * is part of a translation set. */function translation_link($type, $node = NULL, $teaser = FALSE) {  $links = array();  if ($type == 'node' && ($node->tnid) && $translations = translation_node_get_translations($node->tnid)) {    // Do not show link to the same node.    unset($translations[$node->language]);    $languages = language_list();    foreach ($languages as $langcode => $language) {      if (isset($translations[$langcode])) {        $links["node_translation_$langcode"] = array(          'title' => $language->native,          'href' => 'node/'. $translations[$langcode]->nid,          'language' => $language,          'attributes' => array('title' => $translations[$langcode]->title, 'class' => 'translation-link')        );      }    }  }  return $links;}/** * Implementation of hook_nodeapi(). * * Manages translation information for nodes. */function translation_nodeapi(&$node, $op, $teaser, $page) {  // Only act if we are dealing with a content type supporting translations.  if (!translation_supported_type($node->type)) {    return;  }  switch ($op) {    case 'prepare':      if (empty($node->nid) && user_access('translate content') && isset($_GET['translation']) && isset($_GET['language']) && is_numeric($_GET['translation'])) {        $translation_source = node_load($_GET['translation']);        if (empty($translation_source) || !node_access('view', $translation_source)) {          // Source node not found or no access to view. We should not check          // for edit access, since the translator might not have permissions          // to edit the source node but should still be able to translate.          return;        }        $language_list = language_list();        if (!isset($language_list[$_GET['language']]) || ($translation_source->language == $_GET['language'])) {          // If not supported language, or same language as source node, break.          return;        }        // Populate fields based on source node.        $node->language = $_GET['language'];        $node->translation_source = $translation_source;        $node->title = $translation_source->title;        // If user has no access to the filter used for the body, Drupal core        // does not let the edit form to appear, so we should avoid exposing        // the source text here too.        $node->body = filter_access($translation_source->format) ? $translation_source->body : '';        // Let every module add custom translated fields.        node_invoke_nodeapi($node, 'prepare translation');      }      break;    case 'insert':      if (!empty($node->translation_source)) {        if ($node->translation_source->tnid) {          // Add node to existing translation set.          $tnid = $node->translation_source->tnid;        }        else {          // Create new translation set, using nid from the source node.          $tnid = $node->translation_source->nid;          db_query("UPDATE {node} SET tnid = %d, translate = %d WHERE nid = %d", $tnid, 0, $node->translation_source->nid);        }        db_query("UPDATE {node} SET tnid = %d, translate = %d WHERE nid = %d", $tnid, 0, $node->nid);      }      break;    case 'update':      if (isset($node->translation) && $node->translation && !empty($node->language) && $node->tnid) {        // Update translation information.        db_query("UPDATE {node} SET tnid = %d, translate = %d WHERE nid = %d", $node->tnid, $node->translation['status'], $node->nid);        if (!empty($node->translation['retranslate'])) {          // This is the source node, asking to mark all translations outdated.          db_query("UPDATE {node} SET translate = 1 WHERE tnid = %d AND nid != %d", $node->tnid, $node->nid);        }      }      break;    case 'delete':      translation_remove_from_set($node);      break;  }}/** * Remove a node from its translation set (if any) * and update the set accordingly. */function translation_remove_from_set($node) {  if (isset($node->tnid)) {    if (db_result(db_query('SELECT COUNT(*) FROM {node} WHERE tnid = %d', $node->tnid)) == 1) {      // There is only one node left in the set: remove the set altogether.      db_query('UPDATE {node} SET tnid = 0, translate = 0 WHERE tnid = %d', $node->tnid);    }    else {      db_query('UPDATE {node} SET tnid = 0, translate = 0 WHERE nid = %d', $node->nid);      // If the node being removed was the source of the translation set,      // we pick a new source - preferably one that is up to date.      if ($node->tnid == $node->nid) {        $new_tnid = db_result(db_query('SELECT nid FROM {node} WHERE tnid = %d ORDER BY translate ASC, nid ASC', $node->tnid));        db_query('UPDATE {node} SET tnid = %d WHERE tnid = %d', $new_tnid, $node->tnid);      }    }  }}/** * Get all nodes in a translation set, represented by $tnid. * * @param $tnid *   The translation source nid of the translation set, the identifier *   of the node used to derive all translations in the set. * @return *   Array of partial node objects (nid, title, language) representing *   all nodes in the translation set, in effect all translations *   of node $tnid, including node $tnid itself. Because these are *   partial nodes, you need to node_load() the full node, if you *   need more properties. The array is indexed by language code. */function translation_node_get_translations($tnid) {  static $translations = array();  if (is_numeric($tnid) && $tnid) {    if (!isset($translations[$tnid])) {      $translations[$tnid] = array();      $result = db_query(db_rewrite_sql('SELECT n.nid, n.title, n.language FROM {node} n WHERE n.tnid = %d'), $tnid);      while ($node = db_fetch_object($result)) {        $translations[$tnid][$node->language] = $node;      }    }    return $translations[$tnid];  }}/** * Returns whether the given content type has support for translations. * * @return *   Boolean value. */function translation_supported_type($type) {  return variable_get('language_content_type_'. $type, 0) == TRANSLATION_ENABLED;}/** * Return paths of all translations of a node, based on * its Drupal path. * * @param $path *   A Drupal path, for example node/432. * @return *   An array of paths of translations of the node accessible *   to the current user keyed with language codes. */function translation_path_get_translations($path) {  $paths = array();  // Check for a node related path, and for its translations.  if ((preg_match("!^node/([0-9]+)(/.+|)$!", $path, $matches)) && ($node = node_load((int)$matches[1])) && !empty($node->tnid)) {    foreach (translation_node_get_translations($node->tnid) as $language => $translation_node) {      $paths[$language] = 'node/'. $translation_node->nid . $matches[2];    }  }  return $paths;}/** * Implementation of hook_translation_link_alter(). * * Replaces links with pointers to translated versions of the content. */function translation_translation_link_alter(&$links, $path) {  if ($paths = translation_path_get_translations($path)) {    foreach ($links as $langcode => $link) {      if (isset($paths[$langcode])) {        // Translation in a different node.        $links[$langcode]['href'] = $paths[$langcode];      }      else {        // No translation in this language, or no permission to view.        unset($links[$langcode]);      }    }  }}
<?php// $Id$/** * @file * Enables the use of personal and site-wide contact forms. *//** * Implementation of hook_help(). */function contact_help($path, $arg) {  switch ($path) {    case 'admin/help#contact':      $output = '<p>'. t('The contact module facilitates communication via e-mail, by allowing your site\'s visitors to contact one another (personal contact forms), and by providing a simple way to direct messages to a set of administrator-defined recipients (the <a href="@contact">contact page</a>). With either form, users specify a subject, write their message, and (optionally) have a copy of their message sent to their own e-mail address.', array('@contact' => url('contact'))) .'</p>';      $output .= '<p>'. t("Personal contact forms allow users to be contacted via e-mail, while keeping recipient e-mail addresses private. Users may enable or disable their personal contact forms by editing their <em>My account</em> page. If enabled, a <em>Contact</em> tab leading to their personal contact form is available on their user profile. Site administrators have access to all personal contact forms (even if they have been disabled). The <em>Contact</em> tab is only visible when viewing another user's profile (users do not see their own <em>Contact</em> tab).") .'</p>';      $output .= '<p>'. t('The <a href="@contact">contact page</a> provides a simple form for visitors to leave comments, feedback, or other requests. Messages are routed by selecting a category from a list of administrator-defined options; each category has its own set of e-mail recipients. Common categories for a business site include, for example, "Website feedback" (messages are forwarded to web site administrators) and "Product information" (messages are forwarded to members of the sales department). The actual e-mail addresses defined within a category are not displayed. Only users in roles with the <em>access site-wide contact form</em> permission may access the <a href="@contact">contact page</a>.', array('@contact' => url('contact'))) .'</p>';      $output .= '<p>'. t('A link to your site\'s <a href="@contact">contact page</a> from the main <em>Navigation</em> menu is created, but is disabled by default. Create a similar link on another menu by adding a menu item pointing to the path "contact"', array('@contact' => url('contact'))) .'</p>';      $output .= '<p>'. t('Customize the <a href="@contact">contact page</a> with additional information (like physical location, mailing address, and telephone number) using the <a href="@contact-settings">contact form settings page</a>. The <a href="@contact-settings">settings page</a> also provides configuration options for the maximum number of contact form submissions a user may perform per hour, and the default status of users\' personal contact forms.', array('@contact-settings' => url('admin/build/contact/settings'), '@contact' => url('contact'))) .'</p>';      $output .= '<p>'. t('For more information, see the online handbook entry for <a href="@contact">Contact module</a>.', array('@contact' => url('http://drupal.org/handbook/modules/contact/', array('absolute' => TRUE)))) .'</p>';      return $output;    case 'admin/build/contact':      $output = '<p>'. t('This page lets you set up <a href="@form">your site-wide contact form</a>. To do so, add one or more categories. You can associate different recipients with each category to route e-mails to different people. For example, you can route website feedback to the webmaster and direct product information requests to the sales department. On the <a href="@settings">settings page</a>, you can customize the information shown above the contact form. This can be useful to provide additional contact information such as your postal address and telephone number.', array('@settings' => url('admin/build/contact/settings'), '@form' => url('contact'))) .'</p>';      if (!module_exists('menu')) {        $menu_note = t('The menu item can be customized and configured only once the menu module has been <a href="@modules-page">enabled</a>.', array('@modules-page' => url('admin/settings/modules')));      }      else {        $menu_note = '';      }      $output .= '<p>'. t('The contact module also adds a <a href="@menu-settings">menu item</a> (disabled by default) to the navigation block.', array('@menu-settings' => url('admin/build/menu'))) .' '. $menu_note .'</p>';      return $output;  }}/** * Implementation of hook_perm */function contact_perm() {  return array('access site-wide contact form', 'administer site-wide contact form');}/** * Implementation of hook_menu(). */function contact_menu() {  $items['admin/build/contact'] = array(    'title' => 'Contact form',    'description' => 'Create a system contact form and set up categories for the form to use.',    'page callback' => 'contact_admin_categories',    'access arguments' => array('administer site-wide contact form'),    'file' => 'contact.admin.inc',  );  $items['admin/build/contact/list'] = array(    'title' => 'List',    'page callback' => 'contact_admin_categories',    'type' => MENU_DEFAULT_LOCAL_TASK,    'file' => 'contact.admin.inc',  );  $items['admin/build/contact/add'] = array(    'title' => 'Add category',    'page callback' => 'drupal_get_form',    'page arguments' => array('contact_admin_edit', 3),    'access arguments' => array('administer site-wide contact form'),    'type' => MENU_LOCAL_TASK,    'weight' => 1,    'file' => 'contact.admin.inc',  );  $items['admin/build/contact/edit/%contact'] = array(    'title' => 'Edit contact category',    'page callback' => 'drupal_get_form',    'page arguments' => array('contact_admin_edit', 3, 4),    'access arguments' => array('administer site-wide contact form'),    'type' => MENU_CALLBACK,    'file' => 'contact.admin.inc',  );  $items['admin/build/contact/delete/%contact'] = array(    'title' => 'Delete contact',    'page callback' => 'drupal_get_form',    'page arguments' => array('contact_admin_delete', 4),    'access arguments' => array('administer site-wide contact form'),    'type' => MENU_CALLBACK,    'file' => 'contact.admin.inc',  );  $items['admin/build/contact/settings'] = array(    'title' => 'Settings',    'page callback' => 'drupal_get_form',    'page arguments' => array('contact_admin_settings'),    'access arguments' => array('administer site-wide contact form'),    'type' => MENU_LOCAL_TASK,    'weight' => 2,    'file' => 'contact.admin.inc',  );  $items['contact'] = array(    'title' => 'Contact',    'page callback' => 'contact_site_page',    'access arguments' => array('access site-wide contact form'),    'type' => MENU_SUGGESTED_ITEM,    'file' => 'contact.pages.inc',  );  $items['user/%user/contact'] = array(    'title' => 'Contact',    'page callback' => 'contact_user_page',    'page arguments' => array(1),    'type' => MENU_LOCAL_TASK,    'access callback' => '_contact_user_tab_access',    'access arguments' => array(1),    'weight' => 2,    'file' => 'contact.pages.inc',  );  return $items;}/** * Menu access callback for a user's personal contact form. * * @param $account *   A user account object. * @return *   TRUE if the current user has access to the requested user's contact form, *   or FALSE otherwise. */function _contact_user_tab_access($account) {  global $user;  // Anonymous users cannot use or have contact forms.  if (!$user->uid || !$account->uid) {    return FALSE;  }  // User administrators should always have access to personal contact forms.  if (user_access('administer users')) {    return TRUE;  }  // Users may not contact themselves.  if ($user->uid == $account->uid) {    return FALSE;  }  // If the requested user has disabled their contact form, or this preference  // has not yet been saved, do not allow users to contact them.  if (empty($account->contact)) {    return FALSE;  }  return TRUE;}/** * Load the data for a single contact category. */function contact_load($cid) {  $contact = db_fetch_array(db_query("SELECT * FROM {contact} WHERE cid = %d", $cid));  return empty($contact) ? FALSE : $contact;}/** * Implementation of hook_user(). * * Allows the user the option of enabling/disabling his personal contact form. */function contact_user($type, &$edit, &$user, $category = NULL) {  if ($type == 'form' && $category == 'account') {    $form['contact'] = array('#type' => 'fieldset',      '#title' => t('Contact settings'),      '#weight' => 5,      '#collapsible' => TRUE,    );    $form['contact']['contact'] = array('#type' => 'checkbox',      '#title' => t('Personal contact form'),      '#default_value' => !empty($edit['contact']) ? $edit['contact'] : FALSE,      '#description' => t('Allow other users to contact you by e-mail via <a href="@url">your personal contact form</a>. Note that while your e-mail address is not made public to other members of the community, privileged users such as site administrators are able to contact you even if you choose not to enable this feature.', array('@url' => url("user/$user->uid/contact"))),    );    return $form;  }  elseif ($type == 'validate') {    return array('contact' => isset($edit['contact']) ? $edit['contact'] : FALSE);  }  elseif ($type == 'insert') {    $edit['contact'] = variable_get('contact_default_status', 1);  }}/** * Implementation of hook_mail(). */function contact_mail($key, &$message, $params) {  $language = $message['language'];  switch ($key) {    case 'page_mail':    case 'page_copy':      $contact = $params['contact'];      $message['subject'] .= t('[!category] !subject', array('!category' => $contact['category'], '!subject' => $params['subject']), $language->language);      $message['body'][] = t("!name sent a message using the contact form at !form.", array('!name' => $params['name'], '!form' => url($_GET['q'], array('absolute' => TRUE, 'language' => $language))), $language->language);      $message['body'][] = $params['message'];      break;    case 'page_autoreply':      $contact = $params['contact'];      $message['subject'] .= t('[!category] !subject', array('!category' => $contact['category'], '!subject' => $params['subject']), $language->language);      $message['body'][] = $contact['reply'];      break;    case 'user_mail':    case 'user_copy':      $user = $params['user'];      $account = $params['account'];      $message['subject'] .= '['. variable_get('site_name', 'Drupal') .'] '. $params['subject'];      $message['body'][] = "$account->name,";      $message['body'][] = t("!name (!name-url) has sent you a message via your contact form (!form-url) at !site.", array('!name' => $user->name, '!name-url' => url("user/$user->uid", array('absolute' => TRUE, 'language' => $language)), '!form-url' => url($_GET['q'], array('absolute' => TRUE, 'language' => $language)), '!site' => variable_get('site_name', 'Drupal')), $language->language);      $message['body'][] = t("If you don't want to receive such e-mails, you can change your settings at !url.", array('!url' => url("user/$account->uid", array('absolute' => TRUE, 'language' => $language))), $language->language);      $message['body'][] = t('Message:', NULL, $language->language);      $message['body'][] = $params['message'];      break;  }}
<?php// $Id$/** * @file * Manages displaying online help. *//** * Implementation of hook_menu(). */function help_menu() {  $items['admin/help'] = array(    'title' => 'Help',    'page callback' => 'help_main',    'access arguments' => array('access administration pages'),    'weight' => 9,    'file' => 'help.admin.inc',  );  foreach (module_implements('help', TRUE) as $module) {    $items['admin/help/'. $module] = array(      'title' => $module,      'page callback' => 'help_page',      'page arguments' => array(2),      'access arguments' => array('access administration pages'),      'type' => MENU_CALLBACK,      'file' => 'help.admin.inc',    );  }  return $items;}/** * Implementation of hook_help(). */function help_help($path, $arg) {  switch ($path) {    case 'admin/help':      $output = '<p>'. t('This guide provides context sensitive help on the use and configuration of <a href="@drupal">Drupal</a> and its modules, and is a supplement to the more extensive online <a href="@handbook">Drupal handbook</a>. The online handbook may contain more up-to-date information, is annotated with helpful user-contributed comments, and serves as the definitive reference point for all Drupal documentation.', array('@drupal' => 'http://drupal.org', '@handbook' => 'http://drupal.org/handbook')) .'</p>';      return $output;    case 'admin/help#help':      $output = '<p>'. t('The help module provides context sensitive help on the use and configuration of <a href="@drupal">Drupal</a> and its modules, and is a supplement to the more extensive online <a href="@handbook">Drupal handbook</a>. The online handbook may contain more up-to-date information, is annotated with helpful user-contributed comments, and serves as the definitive reference point for all Drupal documentation.', array('@drupal' => 'http://drupal.org', '@handbook' => 'http://drupal.org/handbook')) .'</p>';      $output .= '<p>'. t('For more information, see the online handbook entry for <a href="@help">Help module</a>.', array('@help' => 'http://drupal.org/handbook/modules/help/')) .'</p>';      return $output;  }}
<?php// $Id$/** * Implementation of hook_install(). */function update_install() {  // Create cache table.  drupal_install_schema('update');  // Remove stale variables from update_status 5.x contrib, if any.  _update_remove_update_status_variables();}/** * Implementation of hook_uninstall(). */function update_uninstall() {  // Remove cache table.  drupal_uninstall_schema('update');  // Clear any variables that might be in use  $variables = array(    'update_check_frequency',    'update_fetch_url',    'update_last_check',    'update_notification_threshold',    'update_notify_emails',  );  foreach ($variables as $variable) {    variable_del($variable);  }  menu_rebuild();}/** * Implementation of hook_schema(). */function update_schema() {  $schema['cache_update'] = drupal_get_schema_unprocessed('system', 'cache');  $schema['cache_update']['description'] = 'Cache table for the Update module to store information about available releases, fetched from central server.';  return $schema;}/** * Private helper to clear out stale variables from update_status 5.x contrib. * * @see update_install() * @see update_update_6000() */function _update_remove_update_status_variables() {  variable_del('update_status_settings');  variable_del('update_status_notify_emails');  variable_del('update_status_check_frequency');  variable_del('update_status_notification_threshold');  variable_del('update_status_last');  variable_del('update_status_fetch_url');}/** * Clear out stale variables from update_status. */function update_update_6000() {  _update_remove_update_status_variables();  return array();}
<?php// $Id$?><div id="block-<?php print $block->module .'-'. $block->delta; ?>" class="clear-block block block-<?php print $block->module ?>"><?php if (!empty($block->subject)): ?>  <h2><?php print $block->subject ?></h2><?php endif;?>  <div class="content"><?php print $block->content ?></div></div>
<?php// $Id$/** * @file * Admin page callbacks for the contact module. *//** * Categories/list tab. */function contact_admin_categories() {  $result = db_query('SELECT cid, category, recipients, selected FROM {contact} ORDER BY weight, category');  $rows = array();  while ($category = db_fetch_object($result)) {    $rows[] = array(check_plain($category->category), check_plain($category->recipients), ($category->selected ? t('Yes') : t('No')), l(t('edit'), 'admin/build/contact/edit/'. $category->cid), l(t('delete'), 'admin/build/contact/delete/'. $category->cid));  }  $header = array(t('Category'), t('Recipients'), t('Selected'), array('data' => t('Operations'), 'colspan' => 2));  return theme('table', $header, $rows);}/** * Category edit page. */function contact_admin_edit($form_state = array(), $op, $contact = NULL) {  if (empty($contact) || $op == 'add') {    $contact = array(      'category' => '',      'recipients' => '',      'reply' => '',      'weight' => 0,      'selected' => 0,      'cid' => NULL,    );  }  $form['contact_op'] = array('#type' => 'value', '#value' => $op);  $form['category'] = array('#type' => 'textfield',    '#title' => t('Category'),    '#maxlength' => 255,    '#default_value' => $contact['category'],    '#description' => t("Example: 'website feedback' or 'product information'."),    '#required' => TRUE,  );  $form['recipients'] = array('#type' => 'textarea',    '#title' => t('Recipients'),    '#default_value' => $contact['recipients'],    '#description' => t("Example: 'webmaster@example.com' or 'sales@example.com,support@example.com'. To specify multiple recipients, separate each e-mail address with a comma."),    '#required' => TRUE,  );  $form['reply'] = array('#type' => 'textarea',    '#title' => t('Auto-reply'),    '#default_value' => $contact['reply'],    '#description' => t('Optional auto-reply. Leave empty if you do not want to send the user an auto-reply message.'),  );  $form['weight'] = array('#type' => 'weight',    '#title' => t('Weight'),    '#default_value' => $contact['weight'],    '#description' => t('When listing categories, those with lighter (smaller) weights get listed before categories with heavier (larger) weights. Categories with equal weights are sorted alphabetically.'),  );  $form['selected'] = array('#type' => 'select',    '#title' => t('Selected'),    '#options' => array('0' => t('No'), '1' => t('Yes')),    '#default_value' => $contact['selected'],    '#description' => t('Set this to <em>Yes</em> if you would like this category to be selected by default.'),  );  $form['cid'] = array('#type' => 'value',    '#value' => $contact['cid'],  );  $form['submit'] = array('#type' => 'submit',    '#value' => t('Save'),  );  return $form;}/** * Validate the contact category edit page form submission. */function contact_admin_edit_validate($form, &$form_state) {  if (empty($form_state['values']['category'])) {    form_set_error('category', t('You must enter a category.'));  }  if (empty($form_state['values']['recipients'])) {    form_set_error('recipients', t('You must enter one or more recipients.'));  }  else {    $recipients = explode(',', $form_state['values']['recipients']);    foreach ($recipients as $recipient) {      if (!valid_email_address(trim($recipient))) {        form_set_error('recipients', t('%recipient is an invalid e-mail address.', array('%recipient' => $recipient)));      }    }  }}/** * Process the contact category edit page form submission. */function contact_admin_edit_submit($form, &$form_state) {  if ($form_state['values']['selected']) {    // Unselect all other contact categories.    db_query('UPDATE {contact} SET selected = 0');  }  $recipients = explode(',', $form_state['values']['recipients']);  foreach ($recipients as $key => $recipient) {    // E-mail address validation has already been done in _validate.    $recipients[$key] = trim($recipient);  }  $form_state['values']['recipients'] = implode(',', $recipients);  if (empty($form_state['values']['cid']) || $form_state['values']['contact_op'] == 'add') {    drupal_write_record('contact', $form_state['values']);    drupal_set_message(t('Category %category has been added.', array('%category' => $form_state['values']['category'])));    watchdog('mail', 'Contact form: category %category added.', array('%category' => $form_state['values']['category']), WATCHDOG_NOTICE, l(t('view'), 'admin/build/contact'));  }  else {    drupal_write_record('contact', $form_state['values'], 'cid');    drupal_set_message(t('Category %category has been updated.', array('%category' => $form_state['values']['category'])));    watchdog('mail', 'Contact form: category %category updated.', array('%category' => $form_state['values']['category']), WATCHDOG_NOTICE, l(t('view'), 'admin/build/contact'));  }  $form_state['redirect'] = 'admin/build/contact';  return;}/** * Category delete page. */function contact_admin_delete(&$form_state, $contact) {  $form['contact'] = array(    '#type' => 'value',    '#value' => $contact,  );  return confirm_form($form, t('Are you sure you want to delete %category?', array('%category' => $contact['category'])), 'admin/build/contact', t('This action cannot be undone.'), t('Delete'), t('Cancel'));}/** * Process category delete form submission. */function contact_admin_delete_submit($form, &$form_state) {  $contact = $form_state['values']['contact'];  db_query("DELETE FROM {contact} WHERE cid = %d", $contact['cid']);  drupal_set_message(t('Category %category has been deleted.', array('%category' => $contact['category'])));  watchdog('mail', 'Contact form: category %category deleted.', array('%category' => $contact['category']), WATCHDOG_NOTICE);  $form_state['redirect'] = 'admin/build/contact';  return;}function contact_admin_settings() {  $form['contact_form_information'] = array('#type' => 'textarea',    '#title' => t('Additional information'),    '#default_value' => variable_get('contact_form_information', t('You can leave a message using the contact form below.')),    '#description' => t('Information to show on the <a href="@form">contact page</a>. Can be anything from submission guidelines to your postal address or telephone number.', array('@form' => url('contact'))),  );  $form['contact_hourly_threshold'] = array('#type' => 'select',    '#title' => t('Hourly threshold'),    '#options' => drupal_map_assoc(array(1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 20, 30, 40, 50)),    '#default_value' => variable_get('contact_hourly_threshold', 3),    '#description' => t('The maximum number of contact form submissions a user can perform per hour.'),  );  $form['contact_default_status'] = array(    '#type' => 'checkbox',    '#title' => t('Enable personal contact form by default'),    '#default_value' => variable_get('contact_default_status', 1),    '#description' => t('Default status of the personal contact form for new users.'),  );  return system_settings_form($form);}
<?php// $Id$/** * @file * Additional filter for PHP input. *//** * Implementation of hook_help(). */function php_help($path, $arg) {  switch ($path) {    case 'admin/help#php':      $output = '<p>'. t('The PHP filter adds the ability to include PHP code in posts. PHP is a general-purpose scripting language widely-used for web development; the content management system used by this website has been developed using PHP.') .'</p>';      $output .= '<p>'. t('Through the PHP filter, users with the proper permission may include custom PHP code within a page of the site. While this is a powerful and flexible feature if used by a trusted user with PHP experience, it is a significant and dangerous security risk in the hands of a malicious user. Even a trusted user may accidentally compromise the site by entering malformed or incorrect PHP code. Only the most trusted users should be granted permission to use the PHP filter, and all PHP code added through the PHP filter should be carefully examined before use.') .'</p>';      $output .= '<p>'. t('<a href="@drupal">Drupal.org</a> offers <a href="@php-snippets">some example PHP snippets</a>, or you can create your own with some PHP experience and knowledge of the Drupal system.', array('@drupal' => url('http://drupal.org'), '@php-snippets' => url('http://drupal.org/handbook/customization/php-snippets'))) .'</p>';      $output .= '<p>'. t('For more information, see the online handbook entry for <a href="@php">PHP module</a>.', array('@php' => 'http://drupal.org/handbook/modules/php/')) .'</p>';      return $output;  }}/** * Implementation of hook_filter_tips(). */function php_filter_tips($delta, $format, $long = false) {  global $base_url;  if ($delta == 0) {    switch ($long) {      case 0:        return t('You may post PHP code. You should include &lt;?php ?&gt; tags.');      case 1:        $output = '<h4>'. t('Using custom PHP code') .'</h4>';        $output .= '<p>'. t('Custom PHP code may be embedded in some types of site content, including posts and blocks. While embedding PHP code inside a post or block is a powerful and flexible feature when used by a trusted user with PHP experience, it is a significant and dangerous security risk when used improperly. Even a small mistake when posting PHP code may accidentally compromise your site.') .'</p>';        $output .= '<p>'. t('If you are unfamiliar with PHP, SQL, or Drupal, avoid using custom PHP code within posts. Experimenting with PHP may corrupt your database, render your site inoperable, or significantly compromise security.') .'</p>';        $output .= '<p>'. t('Notes:') .'</p>';        $output .= '<ul><li>'. t('Remember to double-check each line for syntax and logic errors <strong>before</strong> saving.') .'</li>';        $output .= '<li>'. t('Statements must be correctly terminated with semicolons.') .'</li>';        $output .= '<li>'. t('Global variables used within your PHP code retain their values after your script executes.') .'</li>';        $output .= '<li>'. t('<code>register_globals</code> is <strong>turned off</strong>. If you need to use forms, understand and use the functions in <a href="@formapi">the Drupal Form API</a>.', array('@formapi' => url('http://api.drupal.org/api/group/form_api/6'))) .'</li>';        $output .= '<li>'. t('Use a <code>print</code> or <code>return</code> statement in your code to output content.') .'</li>';        $output .= '<li>'. t('Develop and test your PHP code using a separate test script and sample database before deploying on a production site.') .'</li>';        $output .= '<li>'. t('Consider including your custom PHP code within a site-specific module or <code>template.php</code> file rather than embedding it directly into a post or block.') .'</li>';        $output .= '<li>'. t('Be aware that the ability to embed PHP code within content is provided by the PHP Filter module. If this module is disabled or deleted, then blocks and posts with embedded PHP may display, rather than execute, the PHP code.') .'</li></ul>';        $output .= '<p>'. t('A basic example: <em>Creating a "Welcome" block that greets visitors with a simple message.</em>') .'</p>';        $output .= '<ul><li>'. t('<p>Add a custom block to your site, named "Welcome". With its input format set to "PHP code" (or another format supporting PHP input), add the following in the Block body:</p><pre>print t(\'Welcome visitor! Thank you for visiting.\');</pre>') .'</li>';        $output .= '<li>'. t('<p>To display the name of a registered user, use this instead:</p><pre>global $user;if ($user->uid) {  print t(\'Welcome @name! Thank you for visiting.\', array(\'@name\' => $user->name));}else {  print t(\'Welcome visitor! Thank you for visiting.\');}</pre>') .'</li></ul>';        $output .= '<p>'. t('<a href="@drupal">Drupal.org</a> offers <a href="@php-snippets">some example PHP snippets</a>, or you can create your own with some PHP experience and knowledge of the Drupal system.', array('@drupal' => url('http://drupal.org'), '@php-snippets' => url('http://drupal.org/handbook/customization/php-snippets'))) .'</p>';        return $output;    }  }}/** * Implementation of hook_filter(). Contains a basic PHP evaluator. * * Executes PHP code. Use with care. */function php_filter($op, $delta = 0, $format = -1, $text = '') {  switch ($op) {    case 'list':      return array(0 => t('PHP evaluator'));    case 'no cache':      // No caching for the PHP evaluator.      return $delta == 0;    case 'description':      return t('Executes a piece of PHP code. The usage of this filter should be restricted to administrators only!');    case 'process':      return drupal_eval($text);    default:      return $text;  }}
<?php// $Id$/** * @file maintenance-page.tpl.php * * Theme implementation to display a single Drupal page while off-line. * * All the available variables are mirrored in page.tpl.php. Some may be left * blank but they are provided for consistency. * * * @see template_preprocess() * @see template_preprocess_maintenance_page() */?><!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.0 Strict//EN"  "http://www.w3.org/TR/xhtml1/DTD/xhtml1-strict.dtd"><html xmlns="http://www.w3.org/1999/xhtml" xml:lang="<?php print $language->language ?>" lang="<?php print $language->language ?>" dir="<?php print $language->dir ?>"><head>  <?php print $head; ?>  <title><?php print $head_title; ?></title>  <?php print $styles; ?>  <?php print $scripts; ?>  <script type="text/javascript"><?php /* Needed to avoid Flash of Unstyled Content in IE */ ?> </script></head><body class="<?php print $body_classes; ?>">  <div id="page">    <div id="header">      <div id="logo-title">        <?php if (!empty($logo)): ?>          <a href="<?php print $base_path; ?>" title="<?php print t('Home'); ?>" rel="home" id="logo">            <img src="<?php print $logo; ?>" alt="<?php print t('Home'); ?>" />          </a>        <?php endif; ?>        <div id="name-and-slogan">          <?php if (!empty($site_name)): ?>            <h1 id="site-name">              <a href="<?php print $base_path ?>" title="<?php print t('Home'); ?>" rel="home"><span><?php print $site_name; ?></span></a>            </h1>          <?php endif; ?>          <?php if (!empty($site_slogan)): ?>            <div id="site-slogan"><?php print $site_slogan; ?></div>          <?php endif; ?>        </div> <!-- /name-and-slogan -->      </div> <!-- /logo-title -->      <?php if (!empty($header)): ?>        <div id="header-region">          <?php print $header; ?>        </div>      <?php endif; ?>    </div> <!-- /header -->    <div id="container" class="clear-block">      <?php if (!empty($left)): ?>        <div id="sidebar-left" class="column sidebar">          <?php print $left; ?>        </div> <!-- /sidebar-left -->      <?php endif; ?>      <div id="main" class="column"><div id="main-squeeze">        <div id="content">          <?php if (!empty($title)): ?><h1 class="title" id="page-title"><?php print $title; ?></h1><?php endif; ?>          <?php if (!empty($messages)): print $messages; endif; ?>          <div id="content-content" class="clear-block">            <?php print $content; ?>          </div> <!-- /content-content -->        </div> <!-- /content -->      </div></div> <!-- /main-squeeze /main -->      <?php if (!empty($right)): ?>        <div id="sidebar-right" class="column sidebar">          <?php print $right; ?>        </div> <!-- /sidebar-right -->      <?php endif; ?>    </div> <!-- /container -->    <div id="footer-wrapper">      <div id="footer">        <?php print $footer_message; ?>        <?php if (!empty($footer)): print $footer; endif; ?>      </div> <!-- /footer -->    </div> <!-- /footer-wrapper -->  </div> <!-- /page --></body></html>
<?php// $Id$/** * @file * Enables functions to be stored and executed at a later time when * triggered by other modules or by one of Drupal's core API hooks. *//** * Implementation of hook_help(). */function trigger_help($path, $arg) {  $explanation = '<p>'. t('Triggers are system events, such as when new content is added or when a user logs in. Trigger module combines these triggers with actions (functional tasks), such as unpublishing content or e-mailing an administrator. The <a href="@url">Actions settings page</a> contains a list of existing actions and provides the ability to create and configure additional actions.', array('@url' => url('admin/settings/actions'))) .'</p>';  switch ($path) {    case 'admin/build/trigger/comment':      return $explanation .'<p>'. t('Below you can assign actions to run when certain comment-related triggers happen. For example, you could promote a post to the front page when a comment is added.') .'</p>';    case 'admin/build/trigger/node':      return $explanation .'<p>'. t('Below you can assign actions to run when certain content-related triggers happen. For example, you could send an e-mail to an administrator when a post is created or updated.') .'</p>';    case 'admin/build/trigger/cron':      return $explanation .'<p>'. t('Below you can assign actions to run during each pass of a <a href="@cron">cron maintenance task</a>.', array('@cron' => url('admin/reports/status'))) .'</p>';    case 'admin/build/trigger/taxonomy':      return $explanation .'<p>'. t('Below you can assign actions to run when certain taxonomy-related triggers happen. For example, you could send an e-mail to an administrator when a term is deleted.') .'</p>';    case 'admin/build/trigger/user':      return $explanation .'<p>'. t("Below you can assign actions to run when certain user-related triggers happen. For example, you could send an e-mail to an administrator when a user account is deleted.") .'</p>';    case 'admin/help#trigger':      $output = '<p>'. t('The Trigger module provides the ability to trigger <a href="@actions">actions</a> upon system events, such as when new content is added or when a user logs in.', array('@actions' => url('admin/settings/actions'))) .'</p>';      $output .= '<p>'. t('The combination of actions and triggers can perform many useful tasks, such as e-mailing an administrator if a user account is deleted, or automatically unpublishing comments that contain certain words. By default, there are five "contexts" of events (Comments, Content, Cron, Taxonomy, and Users), but more may be added by additional modules.') .'</p>';      $output .= '<p>'. t('For more information, see the online handbook entry for <a href="@trigger">Trigger module</a>.', array('@trigger' => 'http://drupal.org/handbook/modules/trigger/')) .'</p>';      return $output;  }}/** * Implementation of hook_menu(). */function trigger_menu() {  $items['admin/build/trigger'] = array(    'title' => 'Triggers',    'description' => 'Tell Drupal when to execute actions.',    'page callback' => 'trigger_assign',    'access callback' => 'trigger_access_check',    'access arguments' => array('node'),    'file' => 'trigger.admin.inc',  );  // We don't use a menu wildcard here because these are tabs,  // not invisible items.  $items['admin/build/trigger/node'] = array(    'title' => 'Content',    'page callback' => 'trigger_assign',    'page arguments' => array('node'),    'access callback' => 'trigger_access_check',    'access arguments' => array('node'),    'type' => MENU_LOCAL_TASK,    'file' => 'trigger.admin.inc',  );  $items['admin/build/trigger/user'] = array(    'title' => 'Users',    'page callback' => 'trigger_assign',    'page arguments' => array('user'),    'access callback' => 'trigger_access_check',    'access arguments' => array('user'),    'type' => MENU_LOCAL_TASK,    'file' => 'trigger.admin.inc',  );  $items['admin/build/trigger/comment'] = array(    'title' => 'Comments',    'page callback' => 'trigger_assign',    'page arguments' => array('comment'),    'access callback' => 'trigger_access_check',    'access arguments' => array('comment'),    'type' => MENU_LOCAL_TASK,    'file' => 'trigger.admin.inc',  );  $items['admin/build/trigger/taxonomy'] = array(    'title' => 'Taxonomy',    'page callback' => 'trigger_assign',    'page arguments' => array('taxonomy'),    'access callback' => 'trigger_access_check',    'access arguments' => array('taxonomy'),    'type' => MENU_LOCAL_TASK,    'file' => 'trigger.admin.inc',  );  $items['admin/build/trigger/cron'] = array(    'title' => 'Cron',    'page callback' => 'trigger_assign',    'page arguments' => array('cron'),    'access arguments' => array('administer actions'),    'type' => MENU_LOCAL_TASK,    'file' => 'trigger.admin.inc',  );  // We want contributed modules to be able to describe  // their hooks and have actions assignable to them.  $hooks = module_invoke_all('hook_info');  foreach ($hooks as $module => $hook) {    // We've already done these.    if (in_array($module, array('node', 'comment', 'user', 'system', 'taxonomy'))) {      continue;    }    $info = db_result(db_query("SELECT info FROM {system} WHERE name = '%s'", $module));    $info = unserialize($info);    $nice_name = $info['name'];    $items["admin/build/trigger/$module"] = array(      'title' => $nice_name,      'page callback' => 'trigger_assign',      'page arguments' => array($module),      'access arguments' => array($module),      'type' => MENU_LOCAL_TASK,      'file' => 'trigger.admin.inc',    );  }  $items['admin/build/trigger/unassign'] = array(    'title' => 'Unassign',    'description' => 'Unassign an action from a trigger.',    'page callback' => 'drupal_get_form',    'page arguments' => array('trigger_unassign'),    'access arguments' => array('administer actions'),    'type' => MENU_CALLBACK,    'file' => 'trigger.admin.inc',  );  return $items;}/** * Access callback for menu system. */function trigger_access_check($module) {  return (module_exists($module) && user_access('administer actions'));}/** * Get the aids of actions to be executed for a hook-op combination. * * @param $hook *   The name of the hook being fired. * @param $op *   The name of the operation being executed. Defaults to an empty string *   because some hooks (e.g., hook_cron()) do not have operations. * @return *   An array of action IDs. */function _trigger_get_hook_aids($hook, $op = '') {  $aids = array();  $result = db_query("SELECT aa.aid, a.type FROM {trigger_assignments} aa LEFT JOIN {actions} a ON aa.aid = a.aid WHERE aa.hook = '%s' AND aa.op = '%s' ORDER BY weight", $hook, $op);  while ($action = db_fetch_object($result)) {    $aids[$action->aid]['type'] = $action->type;  }  return $aids;}/** * Implementation of hook_theme(). */function trigger_theme() {  return array(    'trigger_display' => array(      'arguments' => array('element'),      'file' => 'trigger.admin.inc',    ),  );}/** * Implementation of hook_forms(). We reuse code by using the * same assignment form definition for each node-op combination. */function trigger_forms() {  $hooks = module_invoke_all('hook_info');  foreach ($hooks as $module => $info) {    foreach ($hooks[$module] as $hook => $ops) {      foreach ($ops as $op => $description) {        $forms['trigger_'. $hook .'_'. $op .'_assign_form'] = array('callback' => 'trigger_assign_form');      }    }  }  return $forms;}/** * When an action is called in a context that does not match its type, * the object that the action expects must be retrieved. For example, when * an action that works on users is called during the node hook, the * user object is not available since the node hook doesn't pass it. * So here we load the object the action expects. * * @param $type *   The type of action that is about to be called. * @param $node *   The node that was passed via the nodeapi hook. * @return *   The object expected by the action that is about to be called. */function _trigger_normalize_node_context($type, $node) {  switch ($type) {    // If an action that works on comments is being called in a node context,    // the action is expecting a comment object. But we do not know which comment    // to give it. The first? The most recent? All of them? So comment actions    // in a node context are not supported.    // An action that works on users is being called in a node context.    // Load the user object of the node's author.    case 'user':      return user_load(array('uid' => $node->uid));  }}/** * Implementation of hook_nodeapi(). */function trigger_nodeapi(&$node, $op, $a3, $a4) {  // Keep objects for reuse so that changes actions make to objects can persist.  static $objects;  // Prevent recursion by tracking which operations have already been called.  static $recursion;  // Support a subset of operations.  if (!in_array($op, array('view', 'update', 'presave', 'insert', 'delete')) || isset($recursion[$op])) {    return;  }  $recursion[$op] = TRUE;  $aids = _trigger_get_hook_aids('nodeapi', $op);  if (!$aids) {    return;  }  $context = array(    'hook' => 'nodeapi',    'op' => $op,  );  // We need to get the expected object if the action's type is not 'node'.  // We keep the object in $objects so we can reuse it if we have multiple actions  // that make changes to an object.  foreach ($aids as $aid => $action_info) {    if ($action_info['type'] != 'node') {      if (!isset($objects[$action_info['type']])) {        $objects[$action_info['type']] = _trigger_normalize_node_context($action_info['type'], $node);      }      // Since we know about the node, we pass that info along to the action.      $context['node'] = $node;      $result = actions_do($aid, $objects[$action_info['type']], $context, $a3, $a4);    }    else {      actions_do($aid, $node, $context, $a3, $a4);    }  }}/** * When an action is called in a context that does not match its type, * the object that the action expects must be retrieved. For example, when * an action that works on nodes is called during the comment hook, the * node object is not available since the comment hook doesn't pass it. * So here we load the object the action expects. * * @param $type *   The type of action that is about to be called. * @param $comment *   The comment that was passed via the comment hook. * @return *   The object expected by the action that is about to be called. */function _trigger_normalize_comment_context($type, $comment) {  switch ($type) {    // An action that works with nodes is being called in a comment context.    case 'node':      return node_load(is_array($comment) ? $comment['nid'] : $comment->nid);    // An action that works on users is being called in a comment context.    case 'user':      return user_load(array('uid' => is_array($comment) ? $comment['uid'] : $comment->uid));  }}/** * Implementation of hook_comment(). */function trigger_comment($a1, $op) {  // Keep objects for reuse so that changes actions make to objects can persist.  static $objects;  // We support a subset of operations.  if (!in_array($op, array('insert', 'update', 'delete', 'view'))) {    return;  }  $aids = _trigger_get_hook_aids('comment', $op);  $context = array(    'hook' => 'comment',    'op' => $op,  );  // We need to get the expected object if the action's type is not 'comment'.  // We keep the object in $objects so we can reuse it if we have multiple actions  // that make changes to an object.  foreach ($aids as $aid => $action_info) {    if ($action_info['type'] != 'comment') {      if (!isset($objects[$action_info['type']])) {        $objects[$action_info['type']] = _trigger_normalize_comment_context($action_info['type'], $a1);      }      // Since we know about the comment, we pass it along to the action      // in case it wants to peek at it.      $context['comment'] = (object) $a1;      actions_do($aid, $objects[$action_info['type']], $context);    }    else {      $comment = (object) $a1;      actions_do($aid, $comment, $context);    }  }}/** * Implementation of hook_cron(). */function trigger_cron() {  $aids = _trigger_get_hook_aids('cron', 'run');  $context = array(    'hook' => 'cron',    'op' => 'run',  );  // Cron does not act on any specific object.  $object = NULL;  actions_do(array_keys($aids), $object, $context);}/** * When an action is called in a context that does not match its type, * the object that the action expects must be retrieved. For example, when * an action that works on nodes is called during the user hook, the * node object is not available since the user hook doesn't pass it. * So here we load the object the action expects. * * @param $type *   The type of action that is about to be called. * @param $account *   The account object that was passed via the user hook. * @return *   The object expected by the action that is about to be called. */function _trigger_normalize_user_context($type, $account) {  switch ($type) {    // If an action that works on comments is being called in a user context,    // the action is expecting a comment object. But we have no way of    // determining the appropriate comment object to pass. So comment    // actions in a user context are not supported.    // An action that works with nodes is being called in a user context.    // If a single node is being viewed, return the node.    case 'node':      // If we are viewing an individual node, return the node.      if ((arg(0) == 'node') && is_numeric(arg(1)) && (arg(2) == NULL)) {        return node_load(array('nid' => arg(1)));      }  }}/** * Implementation of hook_user(). */function trigger_user($op, &$edit, &$account, $category = NULL) {  // Keep objects for reuse so that changes actions make to objects can persist.  static $objects;  // We support a subset of operations.  if (!in_array($op, array('login', 'logout', 'insert', 'update', 'delete', 'view'))) {    return;  }  $aids = _trigger_get_hook_aids('user', $op);  $context = array(    'hook' => 'user',    'op' => $op,    'form_values' => &$edit,  );  foreach ($aids as $aid => $action_info) {    if ($action_info['type'] != 'user') {      if (!isset($objects[$action_info['type']])) {        $objects[$action_info['type']] = _trigger_normalize_user_context($action_info['type'], $account);      }      $context['account'] = $account;      actions_do($aid, $objects[$action_info['type']], $context);    }    else {      actions_do($aid, $account, $context, $category);    }  }}/** * Implementation of hook_taxonomy(). */function trigger_taxonomy($op, $type, $array) {  if ($type != 'term') {    return;  }  $aids = _trigger_get_hook_aids('taxonomy', $op);  $context = array(    'hook' => 'taxonomy',    'op' => $op  );  foreach ($aids as $aid => $action_info) {    $taxonomy_object = (object) $array;    actions_do($aid, $taxonomy_object, $context);  }}/** * Often we generate a select field of all actions. This function * generates the options for that select. * * @param $type *   One of 'node', 'user', 'comment'. * @return *   Array keyed by action ID. */function trigger_options($type = 'all') {  $options = array(t('Choose an action'));  foreach (actions_actions_map(actions_get_all_actions()) as $aid => $action) {    $options[$action['type']][$aid] = $action['description'];  }  if ($type == 'all') {    return $options;  }  else {    return $options[$type];  }}/** * Implementation of hook_actions_delete(). * * Remove all trigger entries for the given action, when deleted. */function trigger_actions_delete($aid) {  db_query("DELETE FROM {trigger_assignments} WHERE aid = '%s'", $aid);}
<?php// $Id$/** * @file * Functions to handle paths in Drupal, including path aliasing. * * These functions are not loaded for cached pages, but modules that need * to use them in hook_init() or hook exit() can make them available, by * executing "drupal_bootstrap(DRUPAL_BOOTSTRAP_PATH);". *//** * Initialize the $_GET['q'] variable to the proper normal path. */function drupal_init_path() {  if (!empty($_GET['q'])) {    $_GET['q'] = drupal_get_normal_path(trim($_GET['q'], '/'));  }  else {    $_GET['q'] = drupal_get_normal_path(variable_get('site_frontpage', 'node'));  }}/** * Given an alias, return its Drupal system URL if one exists. Given a Drupal * system URL return one of its aliases if such a one exists. Otherwise, * return FALSE. * * @param $action *   One of the following values: *   - wipe: delete the alias cache. *   - alias: return an alias for a given Drupal system path (if one exists). *   - source: return the Drupal system URL for a path alias (if one exists). * @param $path *   The path to investigate for corresponding aliases or system URLs. * @param $path_language *   Optional language code to search the path with. Defaults to the page language. *   If there's no path defined for that language it will search paths without *   language. * * @return *   Either a Drupal system path, an aliased path, or FALSE if no path was *   found. */function drupal_lookup_path($action, $path = '', $path_language = '') {  global $language;  // $map is an array with language keys, holding arrays of Drupal paths to alias relations  static $map = array(), $no_src = array(), $count;  $path_language = $path_language ? $path_language : $language->language;  // Use $count to avoid looking up paths in subsequent calls if there simply are no aliases  if (!isset($count)) {    $count = db_result(db_query('SELECT COUNT(pid) FROM {url_alias}'));  }  if ($action == 'wipe') {    $map = array();    $no_src = array();    $count = NULL;  }  elseif ($count > 0 && $path != '') {    if ($action == 'alias') {      if (isset($map[$path_language][$path])) {        return $map[$path_language][$path];      }      // Get the most fitting result falling back with alias without language      $alias = db_result(db_query("SELECT dst FROM {url_alias} WHERE src = '%s' AND language IN('%s', '') ORDER BY language DESC, pid DESC", $path, $path_language));      $map[$path_language][$path] = $alias;      return $alias;    }    // Check $no_src for this $path in case we've already determined that there    // isn't a path that has this alias    elseif ($action == 'source' && !isset($no_src[$path_language][$path])) {      // Look for the value $path within the cached $map      $src = '';      if (!isset($map[$path_language]) || !($src = array_search($path, $map[$path_language]))) {        // Get the most fitting result falling back with alias without language        if ($src = db_result(db_query("SELECT src FROM {url_alias} WHERE dst = '%s' AND language IN('%s', '') ORDER BY language DESC, pid DESC", $path, $path_language))) {          $map[$path_language][$src] = $path;        }        else {          // We can't record anything into $map because we do not have a valid          // index and there is no need because we have not learned anything          // about any Drupal path. Thus cache to $no_src.          $no_src[$path_language][$path] = TRUE;        }      }      return $src;    }  }  return FALSE;}/** * Given an internal Drupal path, return the alias set by the administrator. * * @param $path *   An internal Drupal path. * @param $path_language *   An optional language code to look up the path in. * * @return *   An aliased path if one was found, or the original path if no alias was *   found. */function drupal_get_path_alias($path, $path_language = '') {  $result = $path;  if ($alias = drupal_lookup_path('alias', $path, $path_language)) {    $result = $alias;  }  return $result;}/** * Given a path alias, return the internal path it represents. * * @param $path *   A Drupal path alias. * @param $path_language *   An optional language code to look up the path in. * * @return *   The internal path represented by the alias, or the original alias if no *   internal path was found. */function drupal_get_normal_path($path, $path_language = '') {  $result = $path;  if ($src = drupal_lookup_path('source', $path, $path_language)) {    $result = $src;  }  if (function_exists('custom_url_rewrite_inbound')) {    // Modules may alter the inbound request path by reference.    custom_url_rewrite_inbound($result, $path, $path_language);  }  return $result;}/** * Return a component of the current Drupal path. * * When viewing a page at the path "admin/content/types", for example, arg(0) * would return "admin", arg(1) would return "content", and arg(2) would return * "types". * * Avoid use of this function where possible, as resulting code is hard to read. * Instead, attempt to use named arguments in menu callback functions. See the * explanation in menu.inc for how to construct callbacks that take arguments. * * @param $index *   The index of the component, where each component is separated by a '/' *   (forward-slash), and where the first component has an index of 0 (zero). * * @return *   The component specified by $index, or NULL if the specified component was *   not found. */function arg($index = NULL, $path = NULL) {  static $arguments;  if (!isset($path)) {    $path = $_GET['q'];  }  if (!isset($arguments[$path])) {    $arguments[$path] = explode('/', $path);  }  if (!isset($index)) {    return $arguments[$path];  }  if (isset($arguments[$path][$index])) {    return $arguments[$path][$index];  }}/** * Get the title of the current page, for display on the page and in the title bar. * * @return *   The current page's title. */function drupal_get_title() {  $title = drupal_set_title();  // during a bootstrap, menu.inc is not included and thus we cannot provide a title  if (!isset($title) && function_exists('menu_get_active_title')) {    $title = check_plain(menu_get_active_title());  }  return $title;}/** * Set the title of the current page, for display on the page and in the title bar. * * @param $title *   Optional string value to assign to the page title; or if set to NULL *   (default), leaves the current title unchanged. * * @return *   The updated title of the current page. */function drupal_set_title($title = NULL) {  static $stored_title;  if (isset($title)) {    $stored_title = $title;  }  return $stored_title;}/** * Check if the current page is the front page. * * @return *   Boolean value: TRUE if the current page is the front page; FALSE if otherwise. */function drupal_is_front_page() {  // As drupal_init_path updates $_GET['q'] with the 'site_frontpage' path,  // we can check it against the 'site_frontpage' variable.  return $_GET['q'] == drupal_get_normal_path(variable_get('site_frontpage', 'node'));}/** * Check if a path matches any pattern in a set of patterns. * * @param $path *   The path to match. * @param $patterns *   String containing a set of patterns separated by \n, \r or \r\n. * * @return *   1 if there is a match, 0 if there is not a match. */function drupal_match_path($path, $patterns) {  static $regexps;  if (!isset($regexps[$patterns])) {    $regexps[$patterns] = '/^('. preg_replace(array('/(\r\n?|\n)/', '/\\\\\*/', '/(^|\|)\\\\<front\\\\>($|\|)/'), array('|', '.*', '\1'. preg_quote(variable_get('site_frontpage', 'node'), '/') .'\2'), preg_quote($patterns, '/')) .')$/';  }  return preg_match($regexps[$patterns], $path);}
<?php// $Id$/** * @file * Framework for handling filtering of content. */// This is a special format ID which means "use the default format". This value// can be passed to the filter APIs as a format ID: this is equivalent to not// passing an explicit format at all.define('FILTER_FORMAT_DEFAULT', 0);define('FILTER_HTML_STRIP', 1);define('FILTER_HTML_ESCAPE', 2);/** * Implementation of hook_help(). */function filter_help($path, $arg) {  switch ($path) {    case 'admin/help#filter':      $output = '<p>'. t("The filter module allows administrators to configure text input formats for use on your site. An input format defines the HTML tags, codes, and other input allowed in both content and comments, and is a key feature in guarding against potentially damaging input from malicious users. Two input formats included by default are <em>Filtered HTML</em> (which allows only an administrator-approved subset of HTML tags) and <em>Full HTML</em> (which allows the full set of HTML tags). Additional input formats may be created by an administrator.") .'</p>';      $output .= '<p>'. t('Each input format uses filters to manipulate text, and most input formats apply several different filters to text in a specific order. Each filter is designed for a specific purpose, and generally either adds, removes or transforms elements within user-entered text before it is displayed. A filter does not change the actual content of a post, but instead, modifies it temporarily before it is displayed. A filter may remove unapproved HTML tags, for instance, while another automatically adds HTML to make links referenced in text clickable.') .'</p>';      $output .= '<p>'. t('Users can choose between the available input formats when creating or editing content. Administrators can configure which input formats are available to which user roles, as well as choose a default input format.') .'</p>';      $output .= '<p>'. t('For more information, see the online handbook entry for <a href="@filter">Filter module</a>.', array('@filter' => 'http://drupal.org/handbook/modules/filter/')) .'</p>';      return $output;    case 'admin/settings/filters':      $output = '<p>'. t('<em>Input formats</em> define a way of processing user-supplied text in Drupal. Each input format uses filters to manipulate text, and most input formats apply several different filters to text, in a specific order. Each filter is designed to accomplish a specific purpose, and generally either removes elements from or adds elements to text before it is displayed. Users can choose between the available input formats when submitting content.') .'</p>';      $output .= '<p>'. t('Use the list below to configure which input formats are available to which roles, as well as choose a default input format (used for imported content, for example). The default format is always available to users. All input formats are available to users in a role with the "administer filters" permission.') .'</p>';      return $output;    case 'admin/settings/filters/%':      return '<p>'. t('Every <em>filter</em> performs one particular change on the user input, for example stripping out malicious HTML or making URLs clickable. Choose which filters you want to apply to text in this input format. If you notice some filters are causing conflicts in the output, you can <a href="@rearrange">rearrange them</a>.', array('@rearrange' => url('admin/settings/filters/'. $arg[3] .'/order'))) .'</p>';    case 'admin/settings/filters/%/configure':      return '<p>'. t('If you cannot find the settings for a certain filter, make sure you have enabled it on the <a href="@url">view tab</a> first.', array('@url' => url('admin/settings/filters/'. $arg[3]))) .'</p>';    case 'admin/settings/filters/%/order':      $output = '<p>'. t('Because of the flexible filtering system, you might encounter a situation where one filter prevents another from doing its job. For example: a word in an URL gets converted into a glossary term, before the URL can be converted to a clickable link. When this happens, rearrange the order of the filters.') .'</p>';      $output .= '<p>'. t("Filters are executed from top-to-bottom. To change the order of the filters, modify the values in the <em>Weight</em> column or grab a drag-and-drop handle under the <em>Name</em> column and drag filters to new locations in the list. (Grab a handle by clicking and holding the mouse while hovering over a handle icon.) Remember that your changes will not be saved until you click the <em>Save configuration</em> button at the bottom of the page.") .'</p>';      return $output;  }}/** * Implementation of hook_theme() */function filter_theme() {  return array(    'filter_admin_overview' => array(      'arguments' => array('form' => NULL),      'file' => 'filter.admin.inc',    ),    'filter_admin_order' => array(      'arguments' => array('form' => NULL),      'file' => 'filter.admin.inc',    ),    'filter_tips' => array(      'arguments' => array('tips' => NULL, 'long' => FALSE, 'extra' => ''),      'file' => 'filter.pages.inc',    ),    'filter_tips_more_info' => array(      'arguments' => array(),    ),  );}/** * Implementation of hook_menu(). */function filter_menu() {  $items['admin/settings/filters'] = array(    'title' => 'Input formats',    'description' => 'Configure how content input by users is filtered, including allowed HTML tags. Also allows enabling of module-provided filters.',    'page callback' => 'drupal_get_form',    'page arguments' => array('filter_admin_overview'),    'access arguments' => array('administer filters'),    'file' => 'filter.admin.inc',  );  $items['admin/settings/filters/list'] = array(    'title' => 'List',    'type' => MENU_DEFAULT_LOCAL_TASK,  );  $items['admin/settings/filters/add'] = array(    'title' => 'Add input format',    'page callback' => 'filter_admin_format_page',    'access arguments' => array('administer filters'),    'type' => MENU_LOCAL_TASK,    'weight' => 1,    'file' => 'filter.admin.inc',  );  $items['admin/settings/filters/delete'] = array(    'title' => 'Delete input format',    'page callback' => 'drupal_get_form',    'page arguments' => array('filter_admin_delete'),    'access arguments' => array('administer filters'),    'type' => MENU_CALLBACK,    'file' => 'filter.admin.inc',  );  $items['filter/tips'] = array(    'title' => 'Compose tips',    'page callback' => 'filter_tips_long',    'access callback' => TRUE,    'type' => MENU_SUGGESTED_ITEM,    'file' => 'filter.pages.inc',  );  $items['admin/settings/filters/%filter_format'] = array(    'type' => MENU_CALLBACK,    'title callback' => 'filter_admin_format_title',    'title arguments' => array(3),    'page callback' => 'filter_admin_format_page',    'page arguments' => array(3),    'access arguments' => array('administer filters'),    'file' => 'filter.admin.inc',  );  $items['admin/settings/filters/%filter_format/edit'] = array(    'title' => 'Edit',    'type' => MENU_DEFAULT_LOCAL_TASK,    'weight' => 0,    'file' => 'filter.admin.inc',  );  $items['admin/settings/filters/%filter_format/configure'] = array(    'title' => 'Configure',    'page callback' => 'filter_admin_configure_page',    'page arguments' => array(3),    'access arguments' => array('administer filters'),    'type' => MENU_LOCAL_TASK,    'weight' => 1,    'file' => 'filter.admin.inc',  );  $items['admin/settings/filters/%filter_format/order'] = array(    'title' => 'Rearrange',    'page callback' => 'filter_admin_order_page',    'page arguments' => array(3),    'access arguments' => array('administer filters'),    'type' => MENU_LOCAL_TASK,    'weight' => 2,    'file' => 'filter.admin.inc',  );  return $items;}function filter_format_load($arg) {  return filter_formats($arg);}/** * Display a filter format form title. */function filter_admin_format_title($format) {  return $format->name;}/** * Implementation of hook_perm(). */function filter_perm() {  return array('administer filters');}/** * Implementation of hook_cron(). * * Expire outdated filter cache entries */function filter_cron() {  cache_clear_all(NULL, 'cache_filter');}/** * Implementation of hook_filter_tips(). */function filter_filter_tips($delta, $format, $long = FALSE) {  global $base_url;  switch ($delta) {    case 0:      if (variable_get("filter_html_$format", FILTER_HTML_STRIP) == FILTER_HTML_STRIP) {        if ($allowed_html = variable_get("allowed_html_$format", '<a> <em> <strong> <cite> <code> <ul> <ol> <li> <dl> <dt> <dd>')) {          switch ($long) {            case 0:              return t('Allowed HTML tags: @tags', array('@tags' => $allowed_html));            case 1:              $output = '<p>'. t('Allowed HTML tags: @tags', array('@tags' => $allowed_html)) .'</p>';              if (!variable_get("filter_html_help_$format", 1)) {                return $output;              }              $output .= t('<p>This site allows HTML content. While learning all of HTML may feel intimidating, learning how to use a very small number of the most basic HTML "tags" is very easy. This table provides examples for each tag that is enabled on this site.</p><p>For more information see W3C\'s <a href="http://www.w3.org/TR/html/">HTML Specifications</a> or use your favorite search engine to find other sites that explain HTML.</p>');              $tips = array(                'a' => array( t('Anchors are used to make links to other pages.'), '<a href="'. $base_url .'">'. variable_get('site_name', 'Drupal') .'</a>'),                'br' => array( t('By default line break tags are automatically added, so use this tag to add additional ones. Use of this tag is different because it is not used with an open/close pair like all the others. Use the extra " /" inside the tag to maintain XHTML 1.0 compatibility'), t('Text with <br />line break')),                'p' => array( t('By default paragraph tags are automatically added, so use this tag to add additional ones.'), '<p>'. t('Paragraph one.') .'</p> <p>'. t('Paragraph two.') .'</p>'),                'strong' => array( t('Strong'), '<strong>'. t('Strong') .'</strong>'),                'em' => array( t('Emphasized'), '<em>'. t('Emphasized') .'</em>'),                'cite' => array( t('Cited'), '<cite>'. t('Cited') .'</cite>'),                'code' => array( t('Coded text used to show programming source code'), '<code>'. t('Coded') .'</code>'),                'b' => array( t('Bolded'), '<b>'. t('Bolded') .'</b>'),                'u' => array( t('Underlined'), '<u>'. t('Underlined') .'</u>'),                'i' => array( t('Italicized'), '<i>'. t('Italicized') .'</i>'),                'sup' => array( t('Superscripted'), t('<sup>Super</sup>scripted')),                'sub' => array( t('Subscripted'), t('<sub>Sub</sub>scripted')),                'pre' => array( t('Preformatted'), '<pre>'. t('Preformatted') .'</pre>'),                'abbr' => array( t('Abbreviation'), t('<abbr title="Abbreviation">Abbrev.</abbr>')),                'acronym' => array( t('Acronym'), t('<acronym title="Three-Letter Acronym">TLA</acronym>')),                'blockquote' => array( t('Block quoted'), '<blockquote>'. t('Block quoted') .'</blockquote>'),                'q' => array( t('Quoted inline'), '<q>'. t('Quoted inline') .'</q>'),                // Assumes and describes tr, td, th.                'table' => array( t('Table'), '<table> <tr><th>'. t('Table header') .'</th></tr> <tr><td>'. t('Table cell') .'</td></tr> </table>'),                'tr' => NULL, 'td' => NULL, 'th' => NULL,                'del' => array( t('Deleted'), '<del>'. t('Deleted') .'</del>'),                'ins' => array( t('Inserted'), '<ins>'. t('Inserted') .'</ins>'),                 // Assumes and describes li.                'ol' => array( t('Ordered list - use the &lt;li&gt; to begin each list item'), '<ol> <li>'. t('First item') .'</li> <li>'. t('Second item') .'</li> </ol>'),                'ul' => array( t('Unordered list - use the &lt;li&gt; to begin each list item'), '<ul> <li>'. t('First item') .'</li> <li>'. t('Second item') .'</li> </ul>'),                'li' => NULL,                // Assumes and describes dt and dd.                'dl' => array( t('Definition lists are similar to other HTML lists. &lt;dl&gt; begins the definition list, &lt;dt&gt; begins the definition term and &lt;dd&gt; begins the definition description.'), '<dl> <dt>'. t('First term') .'</dt> <dd>'. t('First definition') .'</dd> <dt>'. t('Second term') .'</dt> <dd>'. t('Second definition') .'</dd> </dl>'),                'dt' => NULL, 'dd' => NULL,                'h1' => array( t('Header'), '<h1>'. t('Title') .'</h1>'),                'h2' => array( t('Header'), '<h2>'. t('Subtitle') .'</h2>'),                'h3' => array( t('Header'), '<h3>'. t('Subtitle three') .'</h3>'),                'h4' => array( t('Header'), '<h4>'. t('Subtitle four') .'</h4>'),                'h5' => array( t('Header'), '<h5>'. t('Subtitle five') .'</h5>'),                'h6' => array( t('Header'), '<h6>'. t('Subtitle six') .'</h6>')              );              $header = array(t('Tag Description'), t('You Type'), t('You Get'));              preg_match_all('/<([a-z0-9]+)[^a-z0-9]/i', $allowed_html, $out);              foreach ($out[1] as $tag) {                if (array_key_exists($tag, $tips)) {                  if ($tips[$tag]) {                    $rows[] = array(                      array('data' => $tips[$tag][0], 'class' => 'description'),                      array('data' => '<code>'. check_plain($tips[$tag][1]) .'</code>', 'class' => 'type'),                      array('data' => $tips[$tag][1], 'class' => 'get')                    );                  }                }                else {                  $rows[] = array(                    array('data' => t('No help provided for tag %tag.', array('%tag' => $tag)), 'class' => 'description', 'colspan' => 3),                  );                }              }              $output .= theme('table', $header, $rows);              $output .= t('<p>Most unusual characters can be directly entered without any problems.</p><p>If you do encounter problems, try using HTML character entities. A common example looks like &amp;amp; for an ampersand &amp; character. For a full list of entities see HTML\'s <a href="http://www.w3.org/TR/html4/sgml/entities.html">entities</a> page. Some of the available characters include:</p>');              $entities = array(                array( t('Ampersand'), '&amp;'),                array( t('Greater than'), '&gt;'),                array( t('Less than'), '&lt;'),                array( t('Quotation mark'), '&quot;'),              );              $header = array(t('Character Description'), t('You Type'), t('You Get'));              unset($rows);              foreach ($entities as $entity) {                $rows[] = array(                  array('data' => $entity[0], 'class' => 'description'),                  array('data' => '<code>'. check_plain($entity[1]) .'</code>', 'class' => 'type'),                  array('data' => $entity[1], 'class' => 'get')                );              }              $output .= theme('table', $header, $rows);              return $output;          }        }        else {          return t('No HTML tags allowed');        }      }      break;    case 1:      switch ($long) {        case 0:          return t('Lines and paragraphs break automatically.');        case 1:          return t('Lines and paragraphs are automatically recognized. The &lt;br /&gt; line break, &lt;p&gt; paragraph and &lt;/p&gt; close paragraph tags are inserted automatically. If paragraphs are not recognized simply add a couple blank lines.');      }      break;    case 2:      return t('Web page addresses and e-mail addresses turn into links automatically.');  }}/** * Retrieve a list of input formats. */function filter_formats($index = NULL) {  global $user;  static $formats;  // Administrators can always use all input formats.  $all = user_access('administer filters');  if (!isset($formats)) {    $formats = array();    $query = 'SELECT * FROM {filter_formats}';    // Build query for selecting the format(s) based on the user's roles.    $args = array();    if (!$all) {      $where = array();      foreach ($user->roles as $rid => $role) {        $where[] = "roles LIKE '%%,%d,%%'";        $args[] = $rid;      }      $query .= ' WHERE '. implode(' OR ', $where) .' OR format = %d';      $args[] = variable_get('filter_default_format', 1);    }    $result = db_query($query, $args);    while ($format = db_fetch_object($result)) {      $formats[$format->format] = $format;    }  }  if (isset($index)) {    return isset($formats[$index]) ? $formats[$index] : FALSE;  }  return $formats;}/** * Build a list of all filters. */function filter_list_all() {  $filters = array();  foreach (module_list() as $module) {    $list = module_invoke($module, 'filter', 'list');    if (isset($list) && is_array($list)) {      foreach ($list as $delta => $name) {        $filters[$module .'/'. $delta] = (object)array('module' => $module, 'delta' => $delta, 'name' => $name);      }    }  }  uasort($filters, '_filter_list_cmp');  return $filters;}/** * Helper function for sorting the filter list by filter name. */function _filter_list_cmp($a, $b) {  return strcmp($a->name, $b->name);}/** * Resolve a format id, including the default format. */function filter_resolve_format($format) {  return $format == FILTER_FORMAT_DEFAULT ? variable_get('filter_default_format', 1) : $format;}/** * Check if text in a certain input format is allowed to be cached. */function filter_format_allowcache($format) {  static $cache = array();  $format = filter_resolve_format($format);  if (!isset($cache[$format])) {    $cache[$format] = db_result(db_query('SELECT cache FROM {filter_formats} WHERE format = %d', $format));  }  return $cache[$format];}/** * Retrieve a list of filters for a certain format. */function filter_list_format($format) {  static $filters = array();  if (!isset($filters[$format])) {    $result = db_query("SELECT * FROM {filters} WHERE format = %d ORDER BY weight, module, delta", $format);    if (db_affected_rows($result) == 0 && !db_result(db_query("SELECT 1 FROM {filter_formats} WHERE format = %d", $format))) {      // The format has no filters and does not exist, use the default input      // format.      $filters[$format] = filter_list_format(variable_get('filter_default_format', 1));    }    else {      $filters[$format] = array();      while ($filter = db_fetch_object($result)) {        $list = module_invoke($filter->module, 'filter', 'list');        if (isset($list) && is_array($list) && isset($list[$filter->delta])) {          $filter->name = $list[$filter->delta];          $filters[$format][$filter->module .'/'. $filter->delta] = $filter;        }      }    }  }  return $filters[$format];}/** * @name Filtering functions * @{ * Modules which need to have content filtered can use these functions to * interact with the filter system. * * For more info, see the hook_filter() documentation. * * Note: because filters can inject JavaScript or execute PHP code, security is * vital here. When a user supplies a $format, you should validate it with * filter_access($format) before accepting/using it. This is normally done in * the validation stage of the node system. You should for example never make a * preview of content in a disallowed format. *//** * Run all the enabled filters on a piece of text. * * @param $text *    The text to be filtered. * @param $format *    The format of the text to be filtered. Specify FILTER_FORMAT_DEFAULT for *    the default format. * @param $check *    Whether to check the $format with filter_access() first. Defaults to TRUE. *    Note that this will check the permissions of the current user, so you *    should specify $check = FALSE when viewing other people's content. When *    showing content that is not (yet) stored in the database (eg. upon preview), *    set to TRUE so the user's permissions are checked. */function check_markup($text, $format = FILTER_FORMAT_DEFAULT, $check = TRUE) {  // When $check = TRUE, do an access check on $format.  if (isset($text) && (!$check || filter_access($format))) {    $format = filter_resolve_format($format);    // Check for a cached version of this piece of text.    $cache_id = $format .':'. md5($text);    if ($cached = cache_get($cache_id, 'cache_filter')) {      return $cached->data;    }    // See if caching is allowed for this format.    $cache = filter_format_allowcache($format);    // Convert all Windows and Mac newlines to a single newline,    // so filters only need to deal with one possibility.    $text = str_replace(array("\r\n", "\r"), "\n", $text);    // Get a complete list of filters, ordered properly.    $filters = filter_list_format($format);    // Give filters the chance to escape HTML-like data such as code or formulas.    foreach ($filters as $filter) {      $text = module_invoke($filter->module, 'filter', 'prepare', $filter->delta, $format, $text, $cache_id);    }    // Perform filtering.    foreach ($filters as $filter) {      $text = module_invoke($filter->module, 'filter', 'process', $filter->delta, $format, $text, $cache_id);    }    // Store in cache with a minimum expiration time of 1 day.    if ($cache) {      cache_set($cache_id, $text, 'cache_filter', time() + (60 * 60 * 24));    }  }  else {    $text = t('n/a');  }  return $text;}/** * Generate a selector for choosing a format in a form. * * @ingroup forms * @see filter_form_validate() * @param $value *   The ID of the format that is currently selected. * @param $weight *   The weight of the input format. * @param $parents *   Required when defining multiple input formats on a single node or having a different parent than 'format'. * @return *   HTML for the form element. */function filter_form($value = FILTER_FORMAT_DEFAULT, $weight = NULL, $parents = array('format')) {  $value = filter_resolve_format($value);  $formats = filter_formats();  $extra = theme('filter_tips_more_info');  if (count($formats) > 1) {    $form = array(      '#type' => 'fieldset',      '#title' => t('Input format'),      '#collapsible' => TRUE,      '#collapsed' => TRUE,      '#weight' => $weight,      '#element_validate' => array('filter_form_validate'),    );    // Multiple formats available: display radio buttons with tips.    foreach ($formats as $format) {      // Generate the parents as the autogenerator does, so we will have a      // unique id for each radio button.      $parents_for_id = array_merge($parents, array($format->format));      $form[$format->format] = array(        '#type' => 'radio',        '#title' => $format->name,        '#default_value' => $value,        '#return_value' => $format->format,        '#parents' => $parents,        '#description' => theme('filter_tips', _filter_tips($format->format, FALSE)),        '#id' => form_clean_id('edit-'. implode('-', $parents_for_id)),      );    }  }  else {    // Only one format available: use a hidden form item and only show tips.    $format = array_shift($formats);    $form[$format->format] = array('#type' => 'value', '#value' => $format->format, '#parents' => $parents);    $tips = _filter_tips(variable_get('filter_default_format', 1), FALSE);    $form['format']['guidelines'] = array(      '#title' => t('Formatting guidelines'),      '#value' => theme('filter_tips', $tips, FALSE, $extra),    );  }  $form[] = array('#value' => $extra);  return $form;}function filter_form_validate($form) {  foreach (element_children($form) as $key) {    if ($form[$key]['#value'] == $form[$key]['#return_value']) {      return;    }  }  form_error($form, t('An illegal choice has been detected. Please contact the site administrator.'));  watchdog('form', 'Illegal choice %choice in %name element.', array('%choice' => $form[$key]['#value'], '%name' => empty($form['#title']) ? $form['#parents'][0] : $form['#title']), WATCHDOG_ERROR);}/** * Returns TRUE if the user is allowed to access this format. */function filter_access($format) {  $format = filter_resolve_format($format);  if (user_access('administer filters') || ($format == variable_get('filter_default_format', 1))) {    return TRUE;  }  else {    $formats = filter_formats();    return isset($formats[$format]);  }}/** * @} End of "Filtering functions". *//** * Helper function for fetching filter tips. */function _filter_tips($format, $long = FALSE) {  if ($format == -1) {    $formats = filter_formats();  }  else {    $formats = array(db_fetch_object(db_query("SELECT * FROM {filter_formats} WHERE format = %d", $format)));  }  $tips = array();  foreach ($formats as $format) {    $filters = filter_list_format($format->format);    $tips[$format->name] = array();    foreach ($filters as $id => $filter) {      if ($tip = module_invoke($filter->module, 'filter_tips', $filter->delta, $format->format, $long)) {        $tips[$format->name][] = array('tip' => $tip, 'id' => $id);      }    }  }  return $tips;}/** * Format a link to the more extensive filter tips. * * @ingroup themeable */function theme_filter_tips_more_info() {  return '<p>'. l(t('More information about formatting options'), 'filter/tips') .'</p>';}/** * @name Standard filters * @{ * Filters implemented by the filter.module. *//** * Implementation of hook_filter(). Contains a basic set of essential filters. * - HTML filter: *     Validates user-supplied HTML, transforming it as necessary. * - Line break converter: *     Converts newlines into paragraph and break tags. * - URL and e-mail address filter: *     Converts newlines into paragraph and break tags. */function filter_filter($op, $delta = 0, $format = -1, $text = '') {  switch ($op) {    case 'list':      return array(0 => t('HTML filter'), 1 => t('Line break converter'), 2 => t('URL filter'), 3 => t('HTML corrector'));    case 'description':      switch ($delta) {        case 0:          return t('Allows you to restrict whether users can post HTML and which tags to filter out. It will also remove harmful content such as JavaScript events, JavaScript URLs and CSS styles from those tags that are not removed.');        case 1:          return t('Converts line breaks into HTML (i.e. &lt;br&gt; and &lt;p&gt; tags).');        case 2:          return t('Turns web and e-mail addresses into clickable links.');        case 3:          return t('Corrects faulty and chopped off HTML in postings.');        default:          return;      }    case 'process':      switch ($delta) {        case 0:          return _filter_html($text, $format);        case 1:          return _filter_autop($text);        case 2:          return _filter_url($text, $format);        case 3:          return _filter_htmlcorrector($text);        default:          return $text;      }    case 'settings':      switch ($delta) {        case 0:          return _filter_html_settings($format);        case 2:          return _filter_url_settings($format);        default:          return;      }    default:      return $text;  }}/** * Settings for the HTML filter. */function _filter_html_settings($format) {  $form['filter_html'] = array(    '#type' => 'fieldset',    '#title' => t('HTML filter'),    '#collapsible' => TRUE,  );  $form['filter_html']["filter_html_$format"] = array(    '#type' => 'radios',    '#title' => t('Filter HTML tags'),    '#default_value' => variable_get("filter_html_$format", FILTER_HTML_STRIP),    '#options' => array(FILTER_HTML_STRIP => t('Strip disallowed tags'), FILTER_HTML_ESCAPE => t('Escape all tags')),    '#description' => t('How to deal with HTML tags in user-contributed content. If set to "Strip disallowed tags", dangerous tags are removed (see below). If set to "Escape tags", all HTML is escaped and presented as it was typed.'),  );  $form['filter_html']["allowed_html_$format"] = array(    '#type' => 'textfield',    '#title' => t('Allowed HTML tags'),    '#default_value' => variable_get("allowed_html_$format", '<a> <em> <strong> <cite> <code> <ul> <ol> <li> <dl> <dt> <dd>'),    '#size' => 64,    '#maxlength' => 1024,    '#description' => t('If "Strip disallowed tags" is selected, optionally specify tags which should not be stripped. JavaScript event attributes are always stripped.'),  );  $form['filter_html']["filter_html_help_$format"] = array(    '#type' => 'checkbox',    '#title' => t('Display HTML help'),    '#default_value' => variable_get("filter_html_help_$format", 1),    '#description' => t('If enabled, Drupal will display some basic HTML help in the long filter tips.'),  );  $form['filter_html']["filter_html_nofollow_$format"] = array(    '#type' => 'checkbox',    '#title' => t('Spam link deterrent'),    '#default_value' => variable_get("filter_html_nofollow_$format", FALSE),    '#description' => t('If enabled, Drupal will add rel="nofollow" to all links, as a measure to reduce the effectiveness of spam links. Note: this will also prevent valid links from being followed by search engines, therefore it is likely most effective when enabled for anonymous users.'),  );  return $form;}/** * HTML filter. Provides filtering of input into accepted HTML. */function _filter_html($text, $format) {  if (variable_get("filter_html_$format", FILTER_HTML_STRIP) == FILTER_HTML_STRIP) {    $allowed_tags = preg_split('/\s+|<|>/', variable_get("allowed_html_$format", '<a> <em> <strong> <cite> <code> <ul> <ol> <li> <dl> <dt> <dd>'), -1, PREG_SPLIT_NO_EMPTY);    $text = filter_xss($text, $allowed_tags);  }  if (variable_get("filter_html_$format", FILTER_HTML_STRIP) == FILTER_HTML_ESCAPE) {    // Escape HTML    $text = check_plain($text);  }  if (variable_get("filter_html_nofollow_$format", FALSE)) {    $text = preg_replace('/<a([^>]+)>/i', '<a\\1 rel="nofollow">', $text);  }  return trim($text);}/** * Settings for URL filter. */function _filter_url_settings($format) {  $form['filter_urlfilter'] = array(    '#type' => 'fieldset',    '#title' => t('URL filter'),    '#collapsible' => TRUE,  );  $form['filter_urlfilter']['filter_url_length_'. $format] = array(    '#type' => 'textfield',    '#title' => t('Maximum link text length'),    '#default_value' => variable_get('filter_url_length_'. $format, 72),    '#maxlength' => 4,    '#description' => t('URLs longer than this number of characters will be truncated to prevent long strings that break formatting. The link itself will be retained; just the text portion of the link will be truncated.'),  );  return $form;}/** * URL filter. Automatically converts text web addresses (URLs, e-mail addresses, * ftp links, etc.) into hyperlinks. */function _filter_url($text, $format) {  // Pass length to regexp callback  _filter_url_trim(NULL, variable_get('filter_url_length_'. $format, 72));  $text = ' '. $text .' ';  // Match absolute URLs.  $text = preg_replace_callback("`(<p>|<li>|<br\s*/?>|[ \n\r\t\(])((http://|https://|ftp://|mailto:|smb://|afp://|file://|gopher://|news://|ssl://|sslv2://|sslv3://|tls://|tcp://|udp://)([a-zA-Z0-9@:%_+*~#?&=.,/;-]*[a-zA-Z0-9@:%_+*~#&=/;-]))([.,?!]*?)(?=(</p>|</li>|<br\s*/?>|[ \n\r\t\)]))`i", '_filter_url_parse_full_links', $text);  // Match e-mail addresses.  $text = preg_replace("`(<p>|<li>|<br\s*/?>|[ \n\r\t\(])([A-Za-z0-9._-]+@[A-Za-z0-9._+-]+\.[A-Za-z]{2,4})([.,?!]*?)(?=(</p>|</li>|<br\s*/?>|[ \n\r\t\)]))`i", '\1<a href="mailto:\2">\2</a>\3', $text);  // Match www domains/addresses.  $text = preg_replace_callback("`(<p>|<li>|[ \n\r\t\(])(www\.[a-zA-Z0-9@:%_+*~#?&=.,/;-]*[a-zA-Z0-9@:%_+~#\&=/;-])([.,?!]*?)(?=(</p>|</li>|<br\s*/?>|[ \n\r\t\)]))`i", '_filter_url_parse_partial_links', $text);  $text = substr($text, 1, -1);  return $text;}/** * Scan input and make sure that all HTML tags are properly closed and nested. */function _filter_htmlcorrector($text) {  // Prepare tag lists.  static $no_nesting, $single_use;  if (!isset($no_nesting)) {    // Tags which cannot be nested but are typically left unclosed.    $no_nesting = drupal_map_assoc(array('li', 'p'));    // Single use tags in HTML4    $single_use = drupal_map_assoc(array('base', 'meta', 'link', 'hr', 'br', 'param', 'img', 'area', 'input', 'col', 'frame'));  }  // Properly entify angles.  $text = preg_replace('!<([^a-zA-Z/])!', '&lt;\1', $text);  // Split tags from text.  $split = preg_split('/<([^>]+?)>/', $text, -1, PREG_SPLIT_DELIM_CAPTURE);  // Note: PHP ensures the array consists of alternating delimiters and literals  // and begins and ends with a literal (inserting $null as required).  $tag = false; // Odd/even counter. Tag or no tag.  $stack = array();  $output = '';  foreach ($split as $value) {    // Process HTML tags.    if ($tag) {      list($tagname) = explode(' ', strtolower($value), 2);      // Closing tag      if ($tagname{0} == '/') {        $tagname = substr($tagname, 1);        // Discard XHTML closing tags for single use tags.        if (!isset($single_use[$tagname])) {          // See if we possibly have a matching opening tag on the stack.          if (in_array($tagname, $stack)) {            // Close other tags lingering first.            do {              $output .= '</'. $stack[0] .'>';            } while (array_shift($stack) != $tagname);          }          // Otherwise, discard it.        }      }      // Opening tag      else {        // See if we have an identical 'no nesting' tag already open and close it if found.        if (count($stack) && ($stack[0] == $tagname) && isset($no_nesting[$stack[0]])) {          $output .= '</'. array_shift($stack) .'>';        }        // Push non-single-use tags onto the stack        if (!isset($single_use[$tagname])) {          array_unshift($stack, $tagname);        }        // Add trailing slash to single-use tags as per X(HT)ML.        else {          $value = rtrim($value, ' /') .' /';        }        $output .= '<'. $value .'>';      }    }    else {      // Passthrough all text.      $output .= $value;    }    $tag = !$tag;  }  // Close remaining tags.  while (count($stack) > 0) {    $output .= '</'. array_shift($stack) .'>';  }  return $output;}/** * Make links out of absolute URLs. */function _filter_url_parse_full_links($match) {  $match[2] = decode_entities($match[2]);  $caption = check_plain(_filter_url_trim($match[2]));  $match[2] = check_url($match[2]);  return $match[1] .'<a href="'. $match[2] .'" title="'. $match[2] .'">'. $caption .'</a>'. $match[5];}/** * Make links out of domain names starting with "www." */function _filter_url_parse_partial_links($match) {  $match[2] = decode_entities($match[2]);  $caption = check_plain(_filter_url_trim($match[2]));  $match[2] = check_plain($match[2]);  return $match[1] .'<a href="http://'. $match[2] .'" title="'. $match[2] .'">'. $caption .'</a>'. $match[3];}/** * Shortens long URLs to http://www.example.com/long/url... */function _filter_url_trim($text, $length = NULL) {  static $_length;  if ($length !== NULL) {    $_length = $length;  }  // Use +3 for '...' string length.  if (strlen($text) > $_length + 3) {    $text = substr($text, 0, $_length) .'...';  }  return $text;}/** * Convert line breaks into <p> and <br> in an intelligent fashion. * Based on: http://photomatt.net/scripts/autop */function _filter_autop($text) {  // All block level tags  $block = '(?:table|thead|tfoot|caption|colgroup|tbody|tr|td|th|div|dl|dd|dt|ul|ol|li|pre|select|form|blockquote|address|p|h[1-6]|hr)';  // Split at <pre>, <script>, <style> and </pre>, </script>, </style> tags.  // We don't apply any processing to the contents of these tags to avoid messing  // up code. We look for matched pairs and allow basic nesting. For example:  // "processed <pre> ignored <script> ignored </script> ignored </pre> processed"  $chunks = preg_split('@(</?(?:pre|script|style|object)[^>]*>)@i', $text, -1, PREG_SPLIT_DELIM_CAPTURE);  // Note: PHP ensures the array consists of alternating delimiters and literals  // and begins and ends with a literal (inserting NULL as required).  $ignore = FALSE;  $ignoretag = '';  $output = '';  foreach ($chunks as $i => $chunk) {    if ($i % 2) {      // Opening or closing tag?      $open = ($chunk[1] != '/');      list($tag) = split('[ >]', substr($chunk, 2 - $open), 2);      if (!$ignore) {        if ($open) {          $ignore = TRUE;          $ignoretag = $tag;        }      }      // Only allow a matching tag to close it.      else if (!$open && $ignoretag == $tag) {        $ignore = FALSE;        $ignoretag = '';      }    }    else if (!$ignore) {      $chunk = preg_replace('|\n*$|', '', $chunk) ."\n\n"; // just to make things a little easier, pad the end      $chunk = preg_replace('|<br />\s*<br />|', "\n\n", $chunk);      $chunk = preg_replace('!(<'. $block .'[^>]*>)!', "\n$1", $chunk); // Space things out a little      $chunk = preg_replace('!(</'. $block .'>)!', "$1\n\n", $chunk); // Space things out a little      $chunk = preg_replace("/\n\n+/", "\n\n", $chunk); // take care of duplicates      $chunk = preg_replace('/\n?(.+?)(?:\n\s*\n|\z)/s', "<p>$1</p>\n", $chunk); // make paragraphs, including one at the end      $chunk = preg_replace("|<p>(<li.+?)</p>|", "$1", $chunk); // problem with nested lists      $chunk = preg_replace('|<p><blockquote([^>]*)>|i', "<blockquote$1><p>", $chunk);      $chunk = str_replace('</blockquote></p>', '</p></blockquote>', $chunk);      $chunk = preg_replace('|<p>\s*</p>\n?|', '', $chunk); // under certain strange conditions it could create a P of entirely whitespace      $chunk = preg_replace('!<p>\s*(</?'. $block .'[^>]*>)!', "$1", $chunk);      $chunk = preg_replace('!(</?'. $block .'[^>]*>)\s*</p>!', "$1", $chunk);      $chunk = preg_replace('|(?<!<br />)\s*\n|', "<br />\n", $chunk); // make line breaks      $chunk = preg_replace('!(</?'. $block .'[^>]*>)\s*<br />!', "$1", $chunk);      $chunk = preg_replace('!<br />(\s*</?(?:p|li|div|th|pre|td|ul|ol)>)!', '$1', $chunk);      $chunk = preg_replace('/&([^#])(?![A-Za-z0-9]{1,8};)/', '&amp;$1', $chunk);    }    $output .= $chunk;  }  return $output;}/** * Very permissive XSS/HTML filter for admin-only use. * * Use only for fields where it is impractical to use the * whole filter system, but where some (mainly inline) mark-up * is desired (so check_plain() is not acceptable). * * Allows all tags that can be used inside an HTML body, save * for scripts and styles. */function filter_xss_admin($string) {  return filter_xss($string, array('a', 'abbr', 'acronym', 'address', 'b', 'bdo', 'big', 'blockquote', 'br', 'caption', 'cite', 'code', 'col', 'colgroup', 'dd', 'del', 'dfn', 'div', 'dl', 'dt', 'em', 'h1', 'h2', 'h3', 'h4', 'h5', 'h6', 'hr', 'i', 'img', 'ins', 'kbd', 'li', 'ol', 'p', 'pre', 'q', 'samp', 'small', 'span', 'strong', 'sub', 'sup', 'table', 'tbody', 'td', 'tfoot', 'th', 'thead', 'tr', 'tt', 'ul', 'var'));}/** * Filters XSS. Based on kses by Ulf Harnhammar, see * http://sourceforge.net/projects/kses * * For examples of various XSS attacks, see: * http://ha.ckers.org/xss.html * * This code does four things: * - Removes characters and constructs that can trick browsers * - Makes sure all HTML entities are well-formed * - Makes sure all HTML tags and attributes are well-formed * - Makes sure no HTML tags contain URLs with a disallowed protocol (e.g. javascript:) * * @param $string *   The string with raw HTML in it. It will be stripped of everything that can cause *   an XSS attack. * @param $allowed_tags *   An array of allowed tags. */function filter_xss($string, $allowed_tags = array('a', 'em', 'strong', 'cite', 'code', 'ul', 'ol', 'li', 'dl', 'dt', 'dd')) {  // Only operate on valid UTF-8 strings. This is necessary to prevent cross  // site scripting issues on Internet Explorer 6.  if (!drupal_validate_utf8($string)) {    return '';  }  // Store the input format  _filter_xss_split($allowed_tags, TRUE);  // Remove NUL characters (ignored by some browsers)  $string = str_replace(chr(0), '', $string);  // Remove Netscape 4 JS entities  $string = preg_replace('%&\s*\{[^}]*(\}\s*;?|$)%', '', $string);  // Defuse all HTML entities  $string = str_replace('&', '&amp;', $string);  // Change back only well-formed entities in our whitelist  // Decimal numeric entities  $string = preg_replace('/&amp;#([0-9]+;)/', '&#\1', $string);  // Hexadecimal numeric entities  $string = preg_replace('/&amp;#[Xx]0*((?:[0-9A-Fa-f]{2})+;)/', '&#x\1', $string);  // Named entities  $string = preg_replace('/&amp;([A-Za-z][A-Za-z0-9]*;)/', '&\1', $string);  return preg_replace_callback('%    (    <(?=[^a-zA-Z!/])  # a lone <    |                 # or    <[^>]*(>|$)       # a string that starts with a <, up until the > or the end of the string    |                 # or    >                 # just a >    )%x', '_filter_xss_split', $string);}/** * Processes an HTML tag. * * @param @m *   An array with various meaning depending on the value of $store. *   If $store is TRUE then the array contains the allowed tags. *   If $store is FALSE then the array has one element, the HTML tag to process. * @param $store *   Whether to store $m. * @return *   If the element isn't allowed, an empty string. Otherwise, the cleaned up *   version of the HTML element. */function _filter_xss_split($m, $store = FALSE) {  static $allowed_html;  if ($store) {    $allowed_html = array_flip($m);    return;  }  $string = $m[1];  if (substr($string, 0, 1) != '<') {    // We matched a lone ">" character    return '&gt;';  }  else if (strlen($string) == 1) {    // We matched a lone "<" character    return '&lt;';  }  if (!preg_match('%^<\s*(/\s*)?([a-zA-Z0-9]+)([^>]*)>?$%', $string, $matches)) {    // Seriously malformed    return '';  }  $slash = trim($matches[1]);  $elem = &$matches[2];  $attrlist = &$matches[3];  if (!isset($allowed_html[strtolower($elem)])) {    // Disallowed HTML element    return '';  }  if ($slash != '') {    return "</$elem>";  }  // Is there a closing XHTML slash at the end of the attributes?  // In PHP 5.1.0+ we could count the changes, currently we need a separate match  $xhtml_slash = preg_match('%\s?/\s*$%', $attrlist) ? ' /' : '';  $attrlist = preg_replace('%(\s?)/\s*$%', '\1', $attrlist);  // Clean up attributes  $attr2 = implode(' ', _filter_xss_attributes($attrlist));  $attr2 = preg_replace('/[<>]/', '', $attr2);  $attr2 = strlen($attr2) ? ' '. $attr2 : '';  return "<$elem$attr2$xhtml_slash>";}/** * Processes a string of HTML attributes. * * @return *   Cleaned up version of the HTML attributes. */function _filter_xss_attributes($attr) {  $attrarr = array();  $mode = 0;  $attrname = '';  while (strlen($attr) != 0) {    // Was the last operation successful?    $working = 0;    switch ($mode) {      case 0:        // Attribute name, href for instance        if (preg_match('/^([-a-zA-Z]+)/', $attr, $match)) {          $attrname = strtolower($match[1]);          $skip = ($attrname == 'style' || substr($attrname, 0, 2) == 'on');          $working = $mode = 1;          $attr = preg_replace('/^[-a-zA-Z]+/', '', $attr);        }        break;      case 1:        // Equals sign or valueless ("selected")        if (preg_match('/^\s*=\s*/', $attr)) {          $working = 1; $mode = 2;          $attr = preg_replace('/^\s*=\s*/', '', $attr);          break;        }        if (preg_match('/^\s+/', $attr)) {          $working = 1; $mode = 0;          if (!$skip) {            $attrarr[] = $attrname;          }          $attr = preg_replace('/^\s+/', '', $attr);        }        break;      case 2:        // Attribute value, a URL after href= for instance        if (preg_match('/^"([^"]*)"(\s+|$)/', $attr, $match)) {          $thisval = filter_xss_bad_protocol($match[1]);          if (!$skip) {            $attrarr[] = "$attrname=\"$thisval\"";          }          $working = 1;          $mode = 0;          $attr = preg_replace('/^"[^"]*"(\s+|$)/', '', $attr);          break;        }        if (preg_match("/^'([^']*)'(\s+|$)/", $attr, $match)) {          $thisval = filter_xss_bad_protocol($match[1]);          if (!$skip) {            $attrarr[] = "$attrname='$thisval'";;          }          $working = 1; $mode = 0;          $attr = preg_replace("/^'[^']*'(\s+|$)/", '', $attr);          break;        }        if (preg_match("%^([^\s\"']+)(\s+|$)%", $attr, $match)) {          $thisval = filter_xss_bad_protocol($match[1]);          if (!$skip) {            $attrarr[] = "$attrname=\"$thisval\"";          }          $working = 1; $mode = 0;          $attr = preg_replace("%^[^\s\"']+(\s+|$)%", '', $attr);        }        break;    }    if ($working == 0) {      // not well formed, remove and try again      $attr = preg_replace('/        ^        (        "[^"]*("|$)     # - a string that starts with a double quote, up until the next double quote or the end of the string        |               # or        \'[^\']*(\'|$)| # - a string that starts with a quote, up until the next quote or the end of the string        |               # or        \S              # - a non-whitespace character        )*              # any number of the above three        \s*             # any number of whitespaces        /x', '', $attr);      $mode = 0;    }  }  // the attribute list ends with a valueless attribute like "selected"  if ($mode == 1) {    $attrarr[] = $attrname;  }  return $attrarr;}/** * Processes an HTML attribute value and ensures it does not contain an URL * with a disallowed protocol (e.g. javascript:) * * @param $string *   The string with the attribute value. * @param $decode *   Whether to decode entities in the $string. Set to FALSE if the $string *   is in plain text, TRUE otherwise. Defaults to TRUE. * @return *   Cleaned up and HTML-escaped version of $string. */function filter_xss_bad_protocol($string, $decode = TRUE) {  static $allowed_protocols;  if (!isset($allowed_protocols)) {    $allowed_protocols = array_flip(variable_get('filter_allowed_protocols', array('http', 'https', 'ftp', 'news', 'nntp', 'telnet', 'mailto', 'irc', 'ssh', 'sftp', 'webcal', 'rtsp')));  }  // Get the plain text representation of the attribute value (i.e. its meaning).  if ($decode) {    $string = decode_entities($string);  }  // Iteratively remove any invalid protocol found.  do {    $before = $string;    $colonpos = strpos($string, ':');    if ($colonpos > 0) {      // We found a colon, possibly a protocol. Verify.      $protocol = substr($string, 0, $colonpos);      // If a colon is preceded by a slash, question mark or hash, it cannot      // possibly be part of the URL scheme. This must be a relative URL,      // which inherits the (safe) protocol of the base document.      if (preg_match('![/?#]!', $protocol)) {        break;      }      // Per RFC2616, section 3.2.3 (URI Comparison) scheme comparison must be case-insensitive      // Check if this is a disallowed protocol.      if (!isset($allowed_protocols[strtolower($protocol)])) {        $string = substr($string, $colonpos + 1);      }    }  } while ($before != $string);  return check_plain($string);}/** * @} End of "Standard filters". */
<?php// $Id$/** * Implementation of hook_install(). */function dblog_install() {  // Create tables.  drupal_install_schema('dblog');}/** * Implementation of hook_uninstall(). */function dblog_uninstall() {  // Remove tables.  drupal_uninstall_schema('dblog');}/** * Implementation of hook_schema(). */function dblog_schema() {  $schema['watchdog'] = array(    'description' => 'Table that contains logs of all system events.',    'fields' => array(      'wid' => array(        'type' => 'serial',        'not null' => TRUE,        'description' => 'Primary Key: Unique watchdog event ID.',      ),      'uid' => array(        'type' => 'int',        'not null' => TRUE,        'default' => 0,        'description' => 'The {users}.uid of the user who triggered the event.',      ),      'type' => array(        'type' => 'varchar',        'length' => 16,        'not null' => TRUE,        'default' => '',        'description' => 'Type of log message, for example "user" or "page not found."',      ),      'message' => array(        'type' => 'text',        'not null' => TRUE,        'size' => 'big',        'description' => 'Text of log message to be passed into the t() function.',      ),      'variables' => array(        'type' => 'text',        'not null' => TRUE,        'size' => 'big',        'description' => 'Serialized array of variables that match the message string and that is passed into the t() function.',      ),      'severity' => array(        'type' => 'int',        'unsigned' => TRUE,        'not null' => TRUE,        'default' => 0,        'size' => 'tiny',        'description' => 'The severity level of the event; ranges from 0 (Emergency) to 7 (Debug)',      ),      'link' => array(        'type' => 'varchar',        'length' => 255,        'not null' => TRUE,        'default' => '',        'description' => 'Link to view the result of the event.',      ),      'location'  => array(        'type' => 'text',        'not null' => TRUE,        'description' => 'URL of the origin of the event.',      ),      'referer' => array(        'type' => 'text',        'not null' => FALSE,        'description' => 'URL of referring page.',      ),      'hostname' => array(        'type' => 'varchar',        'length' => 128,        'not null' => TRUE,        'default' => '',        'description' => 'Hostname of the user who triggered the event.',      ),      'timestamp' => array(        'type' => 'int',        'not null' => TRUE,        'default' => 0,        'description' => 'Unix timestamp of when event occurred.',      ),    ),    'primary key' => array('wid'),    'indexes' => array('type' => array('type')),  );  return $schema;}/** * @defgroup updates-6.x-extra Extra database logging updates for 6.x * @{ *//** * Allow longer referrers. */function dblog_update_6000() {  $ret = array();  db_change_field($ret, 'watchdog', 'referer', 'referer', array('type' => 'text', 'not null' => FALSE));  return $ret;}/** * @} End of "defgroup updates-6.x-extra" * The next series of updates should start at 7000. */
<?php// $Id$/** * @file * User page callbacks for the forum module. *//** * Menu callback; prints a forum listing. */function forum_page($tid = 0) {  if (!is_numeric($tid)) {    return MENU_NOT_FOUND;  }  $tid = (int)$tid;  $topics = '';  $forum_per_page = variable_get('forum_per_page', 25);  $sortby = variable_get('forum_order', 1);  $forums = forum_get_forums($tid);  $parents = taxonomy_get_parents_all($tid);  if ($tid && !in_array($tid, variable_get('forum_containers', array()))) {    $topics = forum_get_topics($tid, $sortby, $forum_per_page);  }  return theme('forums', $forums, $topics, $parents, $tid, $sortby, $forum_per_page);}
<?php// $Id$/** * @file * User page callbacks for the comment module. *//** * Form builder; generate a comment editing form. * * @param $cid *   ID of the comment to be edited. * @ingroup forms */function comment_edit($cid) {  global $user;  $comment = db_fetch_object(db_query('SELECT c.*, u.uid, u.name AS registered_name, u.data FROM {comments} c INNER JOIN {users} u ON c.uid = u.uid WHERE c.cid = %d', $cid));  $comment = drupal_unpack($comment);  $comment->name = $comment->uid ? $comment->registered_name : $comment->name;  if (comment_access('edit', $comment)) {    return comment_form_box((array)$comment);  }  else {    drupal_access_denied();  }}/** * This function is responsible for generating a comment reply form. * There are several cases that have to be handled, including: *   - replies to comments *   - replies to nodes *   - attempts to reply to nodes that can no longer accept comments *   - respecting access permissions ('access comments', 'post comments', etc.) * * The node or comment that is being replied to must appear above the comment * form to provide the user context while authoring the comment. * * @param $node *   Every comment belongs to a node. This is that node. * * @param $pid *   Some comments are replies to other comments. In those cases, $pid is the parent *   comment's cid. * * @return *   The rendered parent node or comment plus the new comment form. */function comment_reply($node, $pid = NULL) {  // Set the breadcrumb trail.  drupal_set_breadcrumb(array(l(t('Home'), NULL), l($node->title, 'node/'. $node->nid)));  $op = isset($_POST['op']) ? $_POST['op'] : '';  $output = '';  if (user_access('access comments')) {    // The user is previewing a comment prior to submitting it.    if ($op == t('Preview')) {      if (user_access('post comments')) {        $output .= comment_form_box(array('pid' => $pid, 'nid' => $node->nid), NULL);      }      else {        drupal_set_message(t('You are not authorized to post comments.'), 'error');        drupal_goto("node/$node->nid");      }    }    else {      // $pid indicates that this is a reply to a comment.      if ($pid) {        // load the comment whose cid = $pid        if ($comment = db_fetch_object(db_query('SELECT c.*, u.uid, u.name AS registered_name, u.signature, u.signature_format, u.picture, u.data FROM {comments} c INNER JOIN {users} u ON c.uid = u.uid WHERE c.cid = %d AND c.status = %d', $pid, COMMENT_PUBLISHED))) {          // If that comment exists, make sure that the current comment and the parent comment both          // belong to the same parent node.          if ($comment->nid != $node->nid) {            // Attempting to reply to a comment not belonging to the current nid.            drupal_set_message(t('The comment you are replying to does not exist.'), 'error');            drupal_goto("node/$node->nid");          }          // Display the parent comment          $comment = drupal_unpack($comment);          $comment->name = $comment->uid ? $comment->registered_name : $comment->name;          $output .= theme('comment_view', $comment, $node);        }        else {          drupal_set_message(t('The comment you are replying to does not exist.'), 'error');          drupal_goto("node/$node->nid");        }      }      // This is the case where the comment is in response to a node. Display the node.      else if (user_access('access content')) {        $output .= node_view($node);      }      // Should we show the reply box?      if (node_comment_mode($node->nid) != COMMENT_NODE_READ_WRITE) {        drupal_set_message(t("This discussion is closed: you can't post new comments."), 'error');        drupal_goto("node/$node->nid");      }      else if (user_access('post comments')) {        $output .= comment_form_box(array('pid' => $pid, 'nid' => $node->nid), t('Reply'));      }      else {        drupal_set_message(t('You are not authorized to post comments.'), 'error');        drupal_goto("node/$node->nid");      }    }  }  else {    drupal_set_message(t('You are not authorized to view comments.'), 'error');    drupal_goto("node/$node->nid");  }  return $output;}
<?php// $Id$/** * Sets the body-tag class attribute. * * Adds 'sidebar-left', 'sidebar-right' or 'sidebars' classes as needed. */function phptemplate_body_class($left, $right) {  if ($left != '' && $right != '') {    $class = 'sidebars';  }  else {    if ($left != '') {      $class = 'sidebar-left';    }    if ($right != '') {      $class = 'sidebar-right';    }  }  if (isset($class)) {    print ' class="'. $class .'"';  }}/** * Return a themed breadcrumb trail. * * @param $breadcrumb *   An array containing the breadcrumb links. * @return a string containing the breadcrumb output. */function phptemplate_breadcrumb($breadcrumb) {  if (!empty($breadcrumb)) {    return '<div class="breadcrumb">'. implode('  ', $breadcrumb) .'</div>';  }}/** * Override or insert PHPTemplate variables into the templates. */function phptemplate_preprocess_page(&$vars) {  $vars['tabs2'] = menu_secondary_local_tasks();  // Hook into color.module  if (module_exists('color')) {    _color_page_alter($vars);  }}/** * Add a "Comments" heading above comments except on forum pages. */function garland_preprocess_comment_wrapper(&$vars) {  if ($vars['content'] && $vars['node']->type != 'forum') {    $vars['content'] = '<h2 class="comments">'. t('Comments') .'</h2>'.  $vars['content'];  }}/** * Returns the rendered local tasks. The default implementation renders * them as tabs. Overridden to split the secondary tasks. * * @ingroup themeable */function phptemplate_menu_local_tasks() {  return menu_primary_local_tasks();}function phptemplate_comment_submitted($comment) {  return t('!datetime  !username',    array(      '!username' => theme('username', $comment),      '!datetime' => format_date($comment->timestamp)    ));}function phptemplate_node_submitted($node) {  return t('!datetime  !username',    array(      '!username' => theme('username', $node),      '!datetime' => format_date($node->created),    ));}/** * Generates IE CSS links for LTR and RTL languages. */function phptemplate_get_ie_styles() {  global $language;  $iecss = '<link type="text/css" rel="stylesheet" media="all" href="'. base_path() . path_to_theme() .'/fix-ie.css" />';  if ($language->direction == LANGUAGE_RTL) {    $iecss .= '<style type="text/css" media="all">@import "'. base_path() . path_to_theme() .'/fix-ie-rtl.css";</style>';  }  return $iecss;}
<?php// $Id$/** * @file * Enables your site to capture votes on different topics in the form of multiple * choice questions. *//** * Implementation of hook_help(). */function poll_help($path, $arg) {  switch ($path) {    case 'admin/help#poll':      $output = '<p>'. t('The poll module can be used to create simple polls for site users. A poll is a simple, multiple choice questionnaire which displays the cumulative results of the answers to the poll. Having polls on the site is a good way to receive feedback from community members.') .'</p>';      $output .= '<p>'. t('When creating a poll, enter the question being posed, as well as the potential choices (and beginning vote counts for each choice). The status and duration (length of time the poll remains active for new votes) can also be specified. Use the <a href="@poll">poll</a> menu item to view all current polls. To vote in or view the results of a specific poll, click on the poll itself.', array('@poll' => url('poll'))) .'</p>';      $output .= '<p>'. t('For more information, see the online handbook entry for <a href="@poll">Poll module</a>.', array('@poll' => 'http://drupal.org/handbook/modules/poll/')) .'</p>';      return $output;  }}/** * Implementation of hook_init(). */function poll_init() {  drupal_add_css(drupal_get_path('module', 'poll') .'/poll.css');}/** * Implementation of hook_theme() */function poll_theme() {  return array(    'poll_vote' => array(      'template' => 'poll-vote',      'arguments' => array('form' => NULL),    ),    'poll_choices' => array(      'arguments' => array('form' => NULL),    ),    'poll_results' => array(      'template' => 'poll-results',      'arguments' => array('raw_title' => NULL, 'results' => NULL, 'votes' => NULL, 'raw_links' => NULL, 'block' => NULL, 'nid' => NULL, 'vote' => NULL),    ),    'poll_bar' => array(      'template' => 'poll-bar',      'arguments' => array('title' => NULL, 'votes' => NULL, 'total_votes' => NULL, 'vote' => NULL, 'block' => NULL),    ),  );}/** * Implementation of hook_perm(). */function poll_perm() {  return array('create poll content', 'delete own poll content', 'delete any poll content', 'edit any poll content', 'edit own poll content', 'vote on polls', 'cancel own vote', 'inspect all votes');}/** * Implementation of hook_access(). */function poll_access($op, $node, $account) {  switch ($op) {    case 'create':      return user_access('create poll content', $account) ? TRUE : NULL;    case 'update':      return user_access('edit any poll content', $account) || (user_access('edit own poll content', $account) && ($node->uid == $account->uid)) ? TRUE : NULL;    case 'delete':      return user_access('delete any poll content', $account) || (user_access('delete own poll content', $account) && ($node->uid == $account->uid)) ? TRUE : NULL;  }}/** * Implementation of hook_menu(). */function poll_menu() {  $items['poll'] = array(    'title' => 'Polls',    'page callback' => 'poll_page',    'access arguments' => array('access content'),    'type' => MENU_SUGGESTED_ITEM,    'file' => 'poll.pages.inc',  );  $items['node/%node/votes'] = array(    'title' => 'Votes',    'page callback' => 'poll_votes',    'page arguments' => array(1),    'access callback' => '_poll_menu_access',    'access arguments' => array(1, 'inspect all votes', FALSE),    'weight' => 3,    'type' => MENU_LOCAL_TASK,    'file' => 'poll.pages.inc',  );  $items['node/%node/results'] = array(    'title' => 'Results',    'page callback' => 'poll_results',    'page arguments' => array(1),    'access callback' => '_poll_menu_access',    'access arguments' => array(1, 'access content', TRUE),    'weight' => 3,    'type' => MENU_LOCAL_TASK,    'file' => 'poll.pages.inc',  );  $items['poll/js'] = array(    'title' => 'Javascript Choice Form',    'page callback' => 'poll_choice_js',    'access arguments' => array('access content'),    'type' => MENU_CALLBACK,  );  return $items;}/** * Callback function to see if a node is acceptable for poll menu items. */function _poll_menu_access($node, $perm, $inspect_allowvotes) {  return user_access($perm) && ($node->type == 'poll') && ($node->allowvotes || !$inspect_allowvotes);}/** * Implementation of hook_block(). * * Generates a block containing the latest poll. */function poll_block($op = 'list', $delta = 0) {  if (user_access('access content')) {    if ($op == 'list') {      $blocks[0]['info'] = t('Most recent poll');      return $blocks;    }    else if ($op == 'view') {      // Retrieve the latest poll.      $sql = db_rewrite_sql("SELECT MAX(n.created) FROM {node} n INNER JOIN {poll} p ON p.nid = n.nid WHERE n.status = 1 AND p.active = 1");      $timestamp = db_result(db_query($sql));      if ($timestamp) {        $poll = node_load(array('type' => 'poll', 'created' => $timestamp, 'status' => 1));        if ($poll->nid) {          $poll = poll_view($poll, TRUE, FALSE, TRUE);        }      }      $block['subject'] = t('Poll');      $block['content'] = drupal_render($poll->content);      return $block;    }  }}/** * Implementation of hook_cron(). * * Closes polls that have exceeded their allowed runtime. */function poll_cron() {  $result = db_query('SELECT p.nid FROM {poll} p INNER JOIN {node} n ON p.nid = n.nid WHERE (n.created + p.runtime) < '. time() .' AND p.active = 1 AND p.runtime != 0');  while ($poll = db_fetch_object($result)) {    db_query("UPDATE {poll} SET active = 0 WHERE nid = %d", $poll->nid);  }}/** * Implementation of hook_node_info(). */function poll_node_info() {  return array(    'poll' => array(      'name' => t('Poll'),      'module' => 'poll',      'description' => t('A <em>poll</em> is a question with a set of possible responses. A <em>poll</em>, once created, automatically provides a simple running count of the number of votes received for each response.'),      'title_label' => t('Question'),      'has_body' => FALSE,    )  );}/** * Implementation of hook_form(). */function poll_form(&$node, $form_state) {  global $user;  $admin = user_access('administer nodes') || user_access('edit any poll content') || (user_access('edit own poll content') && $user->uid == $node->uid);  $type = node_get_types('type', $node);  $form = array(    '#cache' => TRUE,  );  $form['title'] = array(    '#type' => 'textfield',    '#title' => check_plain($type->title_label),    '#required' => TRUE,    '#default_value' => $node->title,    '#weight' => -5,  );  if (isset($form_state['choice_count'])) {    $choice_count = $form_state['choice_count'];  }  else {    $choice_count = max(2, empty($node->choice) ? 2 : count($node->choice));  }  // Add a wrapper for the choices and more button.  $form['choice_wrapper'] = array(    '#tree' => FALSE,    '#weight' => -4,    '#prefix' => '<div class="clear-block" id="poll-choice-wrapper">',    '#suffix' => '</div>',  );  // Container for just the poll choices.  $form['choice_wrapper']['choice'] = array(    '#prefix' => '<div id="poll-choices">',    '#suffix' => '</div>',    '#theme' => 'poll_choices',  );  // Add the current choices to the form.  for ($delta = 0; $delta < $choice_count; $delta++) {    $text = isset($node->choice[$delta]['chtext']) ? $node->choice[$delta]['chtext'] : '';    $votes = isset($node->choice[$delta]['chvotes']) ? $node->choice[$delta]['chvotes'] : 0;    $form['choice_wrapper']['choice'][$delta] = _poll_choice_form($delta, $text, $votes);  }  // We name our button 'poll_more' to avoid conflicts with other modules using  // AHAH-enabled buttons with the id 'more'.  $form['choice_wrapper']['poll_more'] = array(    '#type' => 'submit',    '#value' => t('More choices'),    '#description' => t("If the amount of boxes above isn't enough, click here to add more choices."),    '#weight' => 1,    '#submit' => array('poll_more_choices_submit'), // If no javascript action.    '#ahah' => array(      'path' => 'poll/js',      'wrapper' => 'poll-choices',      'method' => 'replace',      'effect' => 'fade',    ),  );  // Poll attributes  $_duration = array(0 => t('Unlimited')) + drupal_map_assoc(array(86400, 172800, 345600, 604800, 1209600, 2419200, 4838400, 9676800, 31536000), "format_interval");  $_active = array(0 => t('Closed'), 1 => t('Active'));  if ($admin) {    $form['settings'] = array(      '#type' => 'fieldset',      '#collapsible' => TRUE,      '#title' => t('Poll settings'),      '#weight' => -3,    );    $form['settings']['active'] = array(      '#type' => 'radios',      '#title' => t('Poll status'),      '#default_value' => isset($node->active) ? $node->active : 1,      '#options' => $_active,      '#description' => t('When a poll is closed, visitors can no longer vote for it.')    );  }  $form['settings']['runtime'] = array(    '#type' => 'select',    '#title' => t('Poll duration'),    '#default_value' => isset($node->runtime) ? $node->runtime : 0,    '#options' => $_duration,    '#description' => t('After this period, the poll will be closed automatically.'),  );  return $form;}/** * Submit handler to add more choices to a poll form. This handler is used when * javascript is not available. It makes changes to the form state and the * entire form is rebuilt during the page reload. */function poll_more_choices_submit($form, &$form_state) {  // Set the form to rebuild and run submit handlers.  node_form_submit_build_node($form, $form_state);  // Make the changes we want to the form state.  if ($form_state['values']['poll_more']) {    $n = $_GET['q'] == 'poll/js' ? 1 : 5;    $form_state['choice_count'] = count($form_state['values']['choice']) + $n;  }}function _poll_choice_form($delta, $value = '', $votes = 0) {  $admin = user_access('administer nodes');  $form = array(    '#tree' => TRUE,  );  // We'll manually set the #parents property of these fields so that  // their values appear in the $form_state['values']['choice'] array.  $form['chtext'] = array(    '#type' => 'textfield',    '#title' => t('Choice @n', array('@n' => ($delta + 1))),    '#default_value' => $value,    '#parents' => array('choice', $delta, 'chtext'),  );  if ($admin) {    $form['chvotes'] = array(      '#type' => 'textfield',      '#title' => t('Votes for choice @n', array('@n' => ($delta + 1))),      '#default_value' => $votes,      '#size' => 5,      '#maxlength' => 7,      '#parents' => array('choice', $delta, 'chvotes'),    );  }  return $form;}/** * Menu callback for AHAH additions. */function poll_choice_js() {  include_once 'modules/node/node.pages.inc';  $form_state = array('storage' => NULL, 'submitted' => FALSE);  $form_build_id = $_POST['form_build_id'];  // Get the form from the cache.  $form = form_get_cache($form_build_id, $form_state);  $args = $form['#parameters'];  $form_id = array_shift($args);  // We will run some of the submit handlers so we need to disable redirecting.  $form['#redirect'] = FALSE;  // We need to process the form, prepare for that by setting a few internals  // variables.  $form['#post'] = $_POST;  $form['#programmed'] = FALSE;  $form_state['post'] = $_POST;  // Build, validate and if possible, submit the form.  drupal_process_form($form_id, $form, $form_state);  // This call recreates the form relying solely on the form_state that the  // drupal_process_form set up.  $form = drupal_rebuild_form($form_id, $form_state, $args, $form_build_id);  // Render the new output.  $choice_form = $form['choice_wrapper']['choice'];  unset($choice_form['#prefix'], $choice_form['#suffix']); // Prevent duplicate wrappers.  $output = theme('status_messages') . drupal_render($choice_form);  drupal_json(array('status' => TRUE, 'data' => $output));}/** * Renumbers fields and creates a teaser when a poll node is submitted. */function poll_node_form_submit(&$form, &$form_state) {  // Renumber fields  $form_state['values']['choice'] = array_values($form_state['values']['choice']);  $form_state['values']['teaser'] = poll_teaser((object)$form_state['values']);}/** * Implementation of hook_validate(). */function poll_validate($node) {  if (isset($node->title)) {    // Check for at least two options and validate amount of votes:    $realchoices = 0;    // Renumber fields    $node->choice = array_values($node->choice);    foreach ($node->choice as $i => $choice) {      if ($choice['chtext'] != '') {        $realchoices++;      }      if (isset($choice['chvotes']) && $choice['chvotes'] < 0) {        form_set_error("choice][$i][chvotes", t('Negative values are not allowed.'));      }    }    if ($realchoices < 2) {      form_set_error("choice][$realchoices][chtext", t('You must fill in at least two choices.'));    }  }}/** * Implementation of hook_load(). */function poll_load($node) {  global $user;  $poll = db_fetch_object(db_query("SELECT runtime, active FROM {poll} WHERE nid = %d", $node->nid));  // Load the appropriate choices into the $poll object.  $result = db_query("SELECT chtext, chvotes, chorder FROM {poll_choices} WHERE nid = %d ORDER BY chorder", $node->nid);  while ($choice = db_fetch_array($result)) {    $poll->choice[$choice['chorder']] = $choice;  }  // Determine whether or not this user is allowed to vote.  $poll->allowvotes = FALSE;  if (user_access('vote on polls') && $poll->active) {    if ($user->uid) {      $result = db_fetch_object(db_query('SELECT chorder FROM {poll_votes} WHERE nid = %d AND uid = %d', $node->nid, $user->uid));    }    else {      $result = db_fetch_object(db_query("SELECT chorder FROM {poll_votes} WHERE nid = %d AND hostname = '%s'", $node->nid, ip_address()));    }    if (isset($result->chorder)) {      $poll->vote = $result->chorder;    }    else {      $poll->vote = -1;      $poll->allowvotes = TRUE;    }  }  return $poll;}/** * Implementation of hook_insert(). */function poll_insert($node) {  if (!user_access('administer nodes')) {    // Make sure all votes are 0 initially    foreach ($node->choice as $i => $choice) {      $node->choice[$i]['chvotes'] = 0;    }    $node->active = 1;  }  db_query("INSERT INTO {poll} (nid, runtime, active) VALUES (%d, %d, %d)", $node->nid, $node->runtime, $node->active);  $i = 0;  foreach ($node->choice as $choice) {    if ($choice['chtext'] != '') {      db_query("INSERT INTO {poll_choices} (nid, chtext, chvotes, chorder) VALUES (%d, '%s', %d, %d)", $node->nid, $choice['chtext'], $choice['chvotes'], $i++);    }  }}/** * Implementation of hook_update(). */function poll_update($node) {  // Update poll settings.  db_query('UPDATE {poll} SET runtime = %d, active = %d WHERE nid = %d', $node->runtime, $node->active, $node->nid);  // Clean poll choices.  db_query('DELETE FROM {poll_choices} WHERE nid = %d', $node->nid);  // Poll choices come in the same order with the same numbers as they are in  // the database, but some might have an empty title, which signifies that  // they should be removed. We remove all votes to the removed options, so  // people who voted on them can vote again.  $new_chorder = 0;  foreach ($node->choice as $old_chorder => $choice) {    $chvotes = isset($choice['chvotes']) ? (int)$choice['chvotes'] : 0;    $chtext = $choice['chtext'];    if (!empty($chtext)) {      db_query("INSERT INTO {poll_choices} (nid, chtext, chvotes, chorder) VALUES (%d, '%s', %d, %d)", $node->nid, $chtext, $chvotes, $new_chorder);      if ($new_chorder != $old_chorder) {        // We can only remove items in the middle, not add, so        // new_chorder is always <= old_chorder, making this safe.        db_query("UPDATE {poll_votes} SET chorder = %d WHERE nid = %d AND chorder = %d", $new_chorder, $node->nid, $old_chorder);      }      $new_chorder++;    }    else {      db_query("DELETE FROM {poll_votes} WHERE nid = %d AND chorder = %d", $node->nid, $old_chorder);    }  }}/** * Implementation of hook_delete(). */function poll_delete($node) {  db_query("DELETE FROM {poll} WHERE nid = %d", $node->nid);  db_query("DELETE FROM {poll_choices} WHERE nid = %d", $node->nid);  db_query("DELETE FROM {poll_votes} WHERE nid = %d", $node->nid);}/** * Implementation of hook_view(). * * @param $block *   An extra parameter that adapts the hook to display a block-ready *   rendering of the poll. */function poll_view($node, $teaser = FALSE, $page = FALSE, $block = FALSE) {  global $user;  $output = '';  // Special display for side-block  if ($block) {    // No 'read more' link    $node->readmore = FALSE;    $links = module_invoke_all('link', 'node', $node, 1);    $links[] = array('title' => t('Older polls'), 'href' => 'poll', 'attributes' => array('title' => t('View the list of polls on this site.')));    if ($node->allowvotes && $block) {      $links[] = array('title' => t('Results'), 'href' => 'node/'. $node->nid .'/results', 'attributes' => array('title' => t('View the current poll results.')));    }    $node->links = $links;  }  if (!empty($node->allowvotes) && ($block || empty($node->show_results))) {    $node->content['body'] = array(      '#value' => drupal_get_form('poll_view_voting', $node, $block),    );  }  else {    $node->content['body'] = array(      '#value' => poll_view_results($node, $teaser, $page, $block),    );  }  return $node;}/** * Creates a simple teaser that lists all the choices. * * This is primarily used for RSS. */function poll_teaser($node) {  $teaser = NULL;  if (is_array($node->choice)) {    foreach ($node->choice as $k => $choice) {      if ($choice['chtext'] != '') {        $teaser .= '* '. check_plain($choice['chtext']) ."\n";      }    }  }  return $teaser;}/** * Generates the voting form for a poll. * * @ingroup forms * @see poll_vote() * @see phptemplate_preprocess_poll_vote() */function poll_view_voting(&$form_state, $node, $block) {  if ($node->choice) {    $list = array();    foreach ($node->choice as $i => $choice) {      $list[$i] = check_plain($choice['chtext']);    }    $form['choice'] = array(      '#type' => 'radios',      '#default_value' => -1,      '#options' => $list,    );  }  $form['vote'] = array(    '#type' => 'submit',    '#value' => t('Vote'),    '#submit' => array('poll_vote'),  );  // Store the node so we can get to it in submit functions.  $form['#node'] = $node;  $form['#block'] = $block;  // Set form caching because we could have multiple of these forms on  // the same page, and we want to ensure the right one gets picked.  $form['#cache'] = TRUE;  // Provide a more cleanly named voting form theme.  $form['#theme'] = 'poll_vote';  return $form;}/** * Validation function for processing votes */function poll_view_voting_validate($form, &$form_state) {  if ($form_state['values']['choice'] == -1) {    form_set_error( 'choice', t('Your vote could not be recorded because you did not select any of the choices.'));  }}/** * Submit handler for processing a vote */function poll_vote($form, &$form_state) {  $node = $form['#node'];  $choice = $form_state['values']['choice'];  global $user;  if ($user->uid) {    db_query('INSERT INTO {poll_votes} (nid, chorder, uid) VALUES (%d, %d, %d)', $node->nid, $choice, $user->uid);  }  else {    db_query("INSERT INTO {poll_votes} (nid, chorder, hostname) VALUES (%d, %d, '%s')", $node->nid, $choice, ip_address());  }  // Add one to the votes.  db_query("UPDATE {poll_choices} SET chvotes = chvotes + 1 WHERE nid = %d AND chorder = %d", $node->nid, $choice);  cache_clear_all();  drupal_set_message(t('Your vote was recorded.'));  // Return the user to whatever page they voted from.}/** * Themes the voting form for a poll. * * Inputs: $form */function template_preprocess_poll_vote(&$variables) {  $form = $variables['form'];  $variables['choice'] = drupal_render($form['choice']);  $variables['title'] = check_plain($form['#node']->title);  $variables['vote'] = drupal_render($form['vote']);  $variables['rest'] = drupal_render($form);  $variables['block'] = $form['#block'];  // If this is a block, allow a different tpl.php to be used.  if ($variables['block']) {    $variables['template_files'][] = 'poll-vote-block';  }}/** * Generates a graphical representation of the results of a poll. */function poll_view_results(&$node, $teaser, $page, $block) {  // Count the votes and find the maximum  $total_votes = 0;  $max_votes = 0;  foreach ($node->choice as $choice) {    if (isset($choice['chvotes'])) {      $total_votes += $choice['chvotes'];      $max_votes = max($max_votes, $choice['chvotes']);    }  }  $poll_results = '';  foreach ($node->choice as $i => $choice) {    if (!empty($choice['chtext'])) {      $chvotes = isset($choice['chvotes']) ? $choice['chvotes'] : NULL;      $poll_results .= theme('poll_bar', $choice['chtext'], $chvotes, $total_votes, isset($node->vote) && $node->vote == $i, $block);    }  }  return theme('poll_results', $node->title, $poll_results, $total_votes, isset($node->links) ? $node->links : array(), $block, $node->nid, isset($node->vote) ? $node->vote : NULL);}/** * Theme the admin poll form for choices. * * @ingroup themeable */function theme_poll_choices($form) {  // Change the button title to reflect the behavior when using JavaScript.  drupal_add_js('if (Drupal.jsEnabled) { $(document).ready(function() { $("#edit-poll-more").val("'. t('Add another choice') .'"); }); }', 'inline');  $rows = array();  $headers = array(    t('Choice'),    t('Vote count'),  );  foreach (element_children($form) as $key) {    // No need to print the field title every time.    unset($form[$key]['chtext']['#title'], $form[$key]['chvotes']['#title']);    // Build the table row.    $row = array(      'data' => array(        array('data' => drupal_render($form[$key]['chtext']), 'class' => 'poll-chtext'),        array('data' => drupal_render($form[$key]['chvotes']), 'class' => 'poll-chvotes'),      ),    );    // Add additional attributes to the row, such as a class for this row.    if (isset($form[$key]['#attributes'])) {      $row = array_merge($row, $form[$key]['#attributes']);    }    $rows[] = $row;  }  $output = theme('table', $headers, $rows);  $output .= drupal_render($form);  return $output;}/** * Preprocess the poll_results theme hook. * * Inputs: $raw_title, $results, $votes, $raw_links, $block, $nid, $vote. The * $raw_* inputs to this are naturally unsafe; often safe versions are * made to simply overwrite the raw version, but in this case it seems likely * that the title and the links may be overridden by the theme layer, so they * are left in with a different name for that purpose. * * @see poll-results.tpl.php * @see poll-results-block.tpl.php * @see theme_poll_results() */function template_preprocess_poll_results(&$variables) {  $variables['links'] = theme('links', $variables['raw_links']);  if (isset($variables['vote']) && $variables['vote'] > -1 && user_access('cancel own vote')) {    $variables['cancel_form'] = drupal_get_form('poll_cancel_form', $variables['nid']);  }  $variables['title'] = check_plain($variables['raw_title']);  // If this is a block, allow a different tpl.php to be used.  if ($variables['block']) {    $variables['template_files'][] = 'poll-results-block';  }}/** * Preprocess the poll_bar theme hook. * * Inputs: $title, $votes, $total_votes, $voted, $block * * @see poll-bar.tpl.php * @see poll-bar-block.tpl.php * @see theme_poll_bar() */function template_preprocess_poll_bar(&$variables) {  if ($variables['block']) {    $variables['template_files'][] = 'poll-bar-block';  }  $variables['title'] = check_plain($variables['title']);  $variables['percentage'] = round($variables['votes'] * 100 / max($variables['total_votes'], 1));}/** * Builds the cancel form for a poll. * * @ingroup forms * @see poll_cancel() */function poll_cancel_form(&$form_state, $nid) {  // Store the nid so we can get to it in submit functions.  $form['#nid'] = $nid;  $form['submit'] = array(    '#type' => 'submit',    '#value' => t('Cancel your vote'),    '#submit' => array('poll_cancel')  );  $form['#cache'] = TRUE;  return $form;}/** * Submit callback for poll_cancel_form */function poll_cancel($form, &$form_state) {  $node = node_load($form['#nid']);  global $user;  if ($user->uid) {    db_query('DELETE FROM {poll_votes} WHERE nid = %d and uid = %d', $node->nid, $user->uid);  }  else {    db_query("DELETE FROM {poll_votes} WHERE nid = %d and hostname = '%s'", $node->nid, ip_address());  }  // Subtract from the votes.  db_query("UPDATE {poll_choices} SET chvotes = chvotes - 1 WHERE nid = %d AND chorder = %d", $node->nid, $node->vote);}/** * Implementation of hook_user(). */function poll_user($op, &$edit, &$user) {  if ($op == 'delete') {    db_query('UPDATE {poll_votes} SET uid = 0 WHERE uid = %d', $user->uid);  }}
<?php// $Id$/** * Implementation of hook_install(). */function search_install() {  // Create tables.  drupal_install_schema('search');}/** * Implementation of hook_uninstall(). */function search_uninstall() {  // Remove tables.  drupal_uninstall_schema('search');  variable_del('minimum_word_size');  variable_del('overlap_cjk');  variable_del('search_cron_limit');}/** * Implementation of hook_schema(). */function search_schema() {  $schema['search_dataset'] = array(    'description' => 'Stores items that will be searched.',    'fields' => array(      'sid' => array(        'type' => 'int',        'unsigned' => TRUE,        'not null' => TRUE,        'default' => 0,        'description' => 'Search item ID, e.g. node ID for nodes.',      ),      'type' => array(        'type' => 'varchar',        'length' => 16,        'not null' => FALSE,        'description' => 'Type of item, e.g. node.',      ),      'data' => array(        'type' => 'text',        'not null' => TRUE,        'size' => 'big',        'description' => 'List of space-separated words from the item.',      ),      'reindex' => array(        'type' => 'int',        'unsigned' => TRUE,        'not null' => TRUE,        'default' => 0,        'description' => 'Set to force node reindexing.',      ),    ),    'unique keys' => array('sid_type' => array('sid', 'type')),  );  $schema['search_index'] = array(    'description' => 'Stores the search index, associating words, items and scores.',    'fields' => array(      'word' => array(        'type' => 'varchar',        'length' => 50,        'not null' => TRUE,        'default' => '',        'description' => 'The {search_total}.word that is associated with the search item.',      ),      'sid' => array(        'type' => 'int',        'unsigned' => TRUE,        'not null' => TRUE,        'default' => 0,        'description' => 'The {search_dataset}.sid of the searchable item to which the word belongs.',      ),      'type' => array(        'type' => 'varchar',        'length' => 16,        'not null' => FALSE,        'description' => 'The {search_dataset}.type of the searchable item to which the word belongs.',      ),      'score' => array(        'type' => 'float',        'not null' => FALSE,        'description' => 'The numeric score of the word, higher being more important.',      ),    ),    'indexes' => array(      'sid_type' => array('sid', 'type'),      'word' => array('word')    ),    'unique keys' => array('word_sid_type' => array('word', 'sid', 'type')),  );  $schema['search_total'] = array(    'description' => 'Stores search totals for words.',    'fields' => array(      'word' => array(        'description' => 'Primary Key: Unique word in the search index.',        'type' => 'varchar',        'length' => 50,        'not null' => TRUE,        'default' => '',      ),      'count' => array(        'description' => "The count of the word in the index using Zipf's law to equalize the probability distribution.",        'type' => 'float',        'not null' => FALSE,      ),    ),    'primary key' => array('word'),  );  $schema['search_node_links'] = array(    'description' => 'Stores items (like nodes) that link to other nodes, used to improve search scores for nodes that are frequently linked to.',    'fields' => array(      'sid' => array(        'type' => 'int',        'unsigned' => TRUE,        'not null' => TRUE,        'default' => 0,        'description' => 'The {search_dataset}.sid of the searchable item containing the link to the node.',      ),      'type' => array(        'type' => 'varchar',        'length' => 16,        'not null' => TRUE,        'default' => '',        'description' => 'The {search_dataset}.type of the searchable item containing the link to the node.',      ),      'nid' => array(        'type' => 'int',        'unsigned' => TRUE,        'not null' => TRUE,        'default' => 0,        'description' => 'The {node}.nid that this item links to.',      ),      'caption' => array(        'type' => 'text',        'size' => 'big',        'not null' => FALSE,        'description' => 'The text used to link to the {node}.nid.',      ),    ),    'primary key' => array('sid', 'type', 'nid'),    'indexes' => array('nid' => array('nid')),  );  return $schema;}
<?php// $Id$/** * @file * Enable threaded discussions about general topics. *//** * Implementation of hook_help(). */function forum_help($path, $arg) {  switch ($path) {    case 'admin/help#forum':      $output = '<p>'. t('The forum module lets you create threaded discussion forums with functionality similar to other message board systems. Forums are useful because they allow community members to discuss topics with one another while ensuring those conversations are archived for later reference. The <a href="@create-topic">forum topic</a> menu item (under <em>Create content</em> on the Navigation menu) creates the initial post of a new threaded discussion, or thread.', array('@create-topic' => url('node/add/forum'))) .'</p>';      $output .= '<p>'. t('A threaded discussion occurs as people leave comments on a forum topic (or on other comments within that topic). A forum topic is contained within a forum, which may hold many similar or related forum topics. Forums are (optionally) nested within a container, which may hold many similar or related forums. Both containers and forums may be nested within other containers and forums, and provide structure for your message board. By carefully planning this structure, you make it easier for users to find and comment on a specific forum topic.') .'</p>';      $output .= '<p>'. t('When administering a forum, note that:') .'</p>';      $output .= '<ul><li>'. t('a forum topic (and all of its comments) may be moved between forums by selecting a different forum while editing a forum topic.') .'</li>';      $output .= '<li>'. t('when moving a forum topic between forums, the <em>Leave shadow copy</em> option creates a link in the original forum pointing to the new location.') .'</li>';      $output .= '<li>'. t('selecting <em>Read only</em> under <em>Comment settings</em> while editing a forum topic will lock (prevent new comments) on the thread.') .'</li>';      $output .= '<li>'. t('selecting <em>Disabled</em> under <em>Comment settings</em> while editing a forum topic will hide all existing comments on the thread, and prevent new ones.') .'</li></ul>';      $output .= '<p>'. t('For more information, see the online handbook entry for <a href="@forum">Forum module</a>.', array('@forum' => 'http://drupal.org/handbook/modules/forum/')) .'</p>';      return $output;    case 'admin/content/forum':      return '<p>'. t('This page displays a list of existing forums and containers. Containers (optionally) hold forums, and forums hold forum topics (a forum topic is the initial post to a threaded discussion). To provide structure, both containers and forums may be placed inside other containers and forums. To rearrange forums and containers, grab a drag-and-drop handle under the <em>Name</em> column and drag the forum or container to a new location in the list. (Grab a handle by clicking and holding the mouse while hovering over a handle icon.) Remember that your changes will not be saved until you click the <em>Save</em> button at the bottom of the page.') .'</p>';    case 'admin/content/forum/add/container':      return '<p>'. t('By grouping related or similar forums, containers help organize forums. For example, a container named "Food" may hold two forums named "Fruit" and "Vegetables", respectively.') .'</p>';    case 'admin/content/forum/add/forum':      return '<p>'. t('A forum holds related or similar forum topics (a forum topic is the initial post to a threaded discussion). For example, a forum named "Fruit" may contain forum topics titled "Apples" and "Bananas", respectively.') .'</p>';    case 'admin/content/forum/settings':      return '<p>'. t('These settings allow you to adjust the display of your forum topics. The content types available for use within a forum may be selected by editing the <em>Content types</em> on the <a href="@forum-vocabulary">forum vocabulary page</a>.', array('@forum-vocabulary' => url('admin/content/taxonomy/edit/vocabulary/'. variable_get('forum_nav_vocabulary', '')))) .'</p>';  }}/** * Implementation of hook_theme() */function forum_theme() {  return array(    'forums' => array(      'template' => 'forums',      'arguments' => array('forums' => NULL, 'topics' => NULL, 'parents' => NULL, 'tid' => NULL, 'sortby' => NULL, 'forum_per_page' => NULL),    ),    'forum_list' => array(      'template' => 'forum-list',      'arguments' => array('forums' => NULL, 'parents' => NULL, 'tid' => NULL),    ),    'forum_topic_list' => array(      'template' => 'forum-topic-list',      'arguments' => array('tid' => NULL, 'topics' => NULL, 'sortby' => NULL, 'forum_per_page' => NULL),    ),    'forum_icon' => array(      'template' => 'forum-icon',      'arguments' => array('new_posts' => NULL, 'num_posts' => 0, 'comment_mode' => 0, 'sticky' => 0),    ),    'forum_topic_navigation' => array(      'template' => 'forum-topic-navigation',      'arguments' => array('node' => NULL),    ),    'forum_submitted' => array(      'template' => 'forum-submitted',      'arguments' => array('topic' => NULL),    ),  );}/** * Fetch a forum term. * * @param $tid *   The ID of the term which should be loaded. * * @return *   An associative array containing the term data or FALSE if the term cannot be loaded, or is not part of the forum vocabulary. */function forum_term_load($tid) {  $result = db_query(db_rewrite_sql('SELECT t.tid, t.vid, t.name, t.description, t.weight FROM {term_data} t WHERE t.tid = %d AND t.vid = %d', 't', 'tid'), $tid, variable_get('forum_nav_vocabulary', ''));  return db_fetch_array($result);}/** * Implementation of hook_menu(). */function forum_menu() {  $items['forum'] = array(    'title' => 'Forums',    'page callback' => 'forum_page',    'access arguments' => array('access content'),    'type' => MENU_SUGGESTED_ITEM,    'file' => 'forum.pages.inc',  );  $items['admin/content/forum'] = array(    'title' => 'Forums',    'description' => 'Control forums and their hierarchy and change forum settings.',    'page callback' => 'drupal_get_form',    'page arguments' => array('forum_overview'),    'access arguments' => array('administer forums'),    'file' => 'forum.admin.inc',  );  $items['admin/content/forum/list'] = array(    'title' => 'List',    'type' => MENU_DEFAULT_LOCAL_TASK,    'weight' => -10,  );  $items['admin/content/forum/add/container'] = array(    'title' => 'Add container',    'page callback' => 'forum_form_main',    'page arguments' => array('container'),    'access arguments' => array('administer forums'),    'type' => MENU_LOCAL_TASK,    'parent' => 'admin/content/forum',    'file' => 'forum.admin.inc',  );  $items['admin/content/forum/add/forum'] = array(    'title' => 'Add forum',    'page callback' => 'forum_form_main',    'page arguments' => array('forum'),    'access arguments' => array('administer forums'),    'type' => MENU_LOCAL_TASK,    'parent' => 'admin/content/forum',    'file' => 'forum.admin.inc',  );  $items['admin/content/forum/settings'] = array(    'title' => 'Settings',    'page callback' => 'drupal_get_form',    'page arguments' => array('forum_admin_settings'),    'access arguments' => array('administer forums'),    'weight' => 5,    'type' => MENU_LOCAL_TASK,    'parent' => 'admin/content/forum',    'file' => 'forum.admin.inc',  );  $items['admin/content/forum/edit/%forum_term'] = array(    'page callback' => 'forum_form_main',    'access arguments' => array('administer forums'),    'type' => MENU_CALLBACK,    'file' => 'forum.admin.inc',  );  $items['admin/content/forum/edit/container/%forum_term'] = array(    'title' => 'Edit container',    'page callback' => 'forum_form_main',    'page arguments' => array('container', 5),    'access arguments' => array('administer forums'),    'type' => MENU_CALLBACK,    'file' => 'forum.admin.inc',  );  $items['admin/content/forum/edit/forum/%forum_term'] = array(    'title' => 'Edit forum',    'page callback' => 'forum_form_main',    'page arguments' => array('forum', 5),    'access arguments' => array('administer forums'),    'type' => MENU_CALLBACK,    'file' => 'forum.admin.inc',  );  return $items;}/** * Implementation of hook_init(). */function forum_init() {  drupal_add_css(drupal_get_path('module', 'forum') .'/forum.css');}/** * Implementation of hook_nodeapi(). */function forum_nodeapi(&$node, $op, $teaser, $page) {  // We are going to return if $node->type is not one of the node  // types assigned to the forum vocabulary.  If forum_nav_vocabulary  // is undefined or the vocabulary does not exist, it clearly cannot  // be assigned to $node->type, so return to avoid E_ALL warnings.  $vid = variable_get('forum_nav_vocabulary', '');  $vocabulary = taxonomy_vocabulary_load($vid);  if (empty($vocabulary)) {    return;  }  // Operate only on node types assigned for the forum vocabulary.  if (!in_array($node->type, $vocabulary->nodes)) {    return;  }  switch ($op) {    case 'view':      if ($page && taxonomy_node_get_terms_by_vocabulary($node, $vid) && $tree = taxonomy_get_tree($vid)) {        // Get the forum terms from the (cached) tree        foreach ($tree as $term) {          $forum_terms[] = $term->tid;        }        foreach ($node->taxonomy as $term_id => $term) {          if (in_array($term_id, $forum_terms)) {            $node->tid = $term_id;          }        }        // Breadcrumb navigation        $breadcrumb[] = l(t('Home'), NULL);        $breadcrumb[] = l($vocabulary->name, 'forum');        if ($parents = taxonomy_get_parents_all($node->tid)) {          $parents = array_reverse($parents);          foreach ($parents as $p) {            $breadcrumb[] = l($p->name, 'forum/'. $p->tid);          }        }        drupal_set_breadcrumb($breadcrumb);        if (!$teaser) {          $node->content['forum_navigation'] = array(            '#value' => theme('forum_topic_navigation', $node),            '#weight' => 100,          );        }      }      break;    case 'prepare':      if (empty($node->nid)) {        // New topic        $node->taxonomy[arg(3)]->vid = $vid;        $node->taxonomy[arg(3)]->tid = arg(3);      }      break;    // Check in particular that only a "leaf" term in the associated taxonomy    // vocabulary is selected, not a "container" term.    case 'validate':      if ($node->taxonomy) {        // Extract the node's proper topic ID.        $vocabulary = $vid;        $containers = variable_get('forum_containers', array());        foreach ($node->taxonomy as $term) {          if (db_result(db_query('SELECT COUNT(*) FROM {term_data} WHERE tid = %d AND vid = %d', $term, $vocabulary))) {            if (in_array($term, $containers)) {              $term = taxonomy_get_term($term);              form_set_error('taxonomy', t('The item %forum is only a container for forums. Please select one of the forums below it.', array('%forum' => $term->name)));            }          }        }      }      break;    // Assign forum taxonomy when adding a topic from within a forum.    case 'presave':      // Make sure all fields are set properly:      $node->icon = !empty($node->icon) ? $node->icon : '';      if ($node->taxonomy && $tree = taxonomy_get_tree($vid)) {        // Get the forum terms from the (cached) tree if we have a taxonomy.        foreach ($tree as $term) {          $forum_terms[] = $term->tid;        }        foreach ($node->taxonomy as $term_id) {          if (in_array($term_id, $forum_terms)) {            $node->tid = $term_id;          }        }        $old_tid = db_result(db_query_range("SELECT t.tid FROM {term_node} t INNER JOIN {node} n ON t.vid = n.vid WHERE n.nid = %d ORDER BY t.vid DESC", $node->nid, 0, 1));        if ($old_tid && isset($node->tid) && ($node->tid != $old_tid) && !empty($node->shadow)) {          // A shadow copy needs to be created. Retain new term and add old term.          $node->taxonomy[] = $old_tid;        }      }      break;    case 'update':      if (empty($node->revision) && db_result(db_query('SELECT tid FROM {forum} WHERE nid=%d', $node->nid))) {        if (!empty($node->tid)) {          db_query('UPDATE {forum} SET tid = %d WHERE vid = %d', $node->tid, $node->vid);        }        // The node is removed from the forum.        else {          db_query('DELETE FROM {forum} WHERE nid = %d', $node->nid);        }        break;      }      // Deliberate no break -- for new revisions and for previously unassigned terms we need an insert.    case 'insert':      if (!empty($node->tid)) {        db_query('INSERT INTO {forum} (tid, vid, nid) VALUES (%d, %d, %d)', $node->tid, $node->vid, $node->nid);      }      break;    case 'delete':      db_query('DELETE FROM {forum} WHERE nid = %d', $node->nid);      break;    case 'load':      return db_fetch_array(db_query('SELECT tid AS forum_tid FROM {forum} WHERE vid = %d', $node->vid));  }  return;}/** * Implementation of hook_node_info(). */function forum_node_info() {  return array(    'forum' => array(      'name' => t('Forum topic'),      'module' => 'forum',      'description' => t('A <em>forum topic</em> is the initial post to a new discussion thread within a forum.'),      'title_label' => t('Subject'),    )  );}/** * Implementation of hook_access(). */function forum_access($op, $node, $account) {  switch ($op) {    case 'create':      return user_access('create forum topics', $account) ? TRUE : NULL;    case 'update':      return user_access('edit any forum topic', $account) || (user_access('edit own forum topics', $account) && ($account->uid == $node->uid)) ? TRUE : NULL;    case 'delete':      return user_access('delete any forum topic', $account) || (user_access('delete own forum topics', $account) && ($account->uid == $node->uid)) ? TRUE : NULL;  }}/** * Implementation of hook_perm(). */function forum_perm() {  return array('create forum topics', 'delete own forum topics', 'delete any forum topic', 'edit own forum topics', 'edit any forum topic', 'administer forums');}/** * Implementation of hook_taxonomy(). */function forum_taxonomy($op, $type, $term = NULL) {  if ($op == 'delete' && $term['vid'] == variable_get('forum_nav_vocabulary', '')) {    switch ($type) {      case 'term':        $results = db_query('SELECT tn.nid FROM {term_node} tn WHERE tn.tid = %d', $term['tid']);        while ($node = db_fetch_object($results)) {          // node_delete will also remove any association with non-forum vocabularies.          node_delete($node->nid);        }        // For containers, remove the tid from the forum_containers variable.        $containers = variable_get('forum_containers', array());        $key = array_search($term['tid'], $containers);        if ($key !== FALSE) {          unset($containers[$key]);        }        variable_set('forum_containers', $containers);        break;      case 'vocabulary':        variable_del('forum_nav_vocabulary');    }  }}/** * Implementation of hook_form_alter(). */function forum_form_alter(&$form, $form_state, $form_id) {  $vid = variable_get('forum_nav_vocabulary', '');  if (isset($form['vid']) && $form['vid']['#value'] == $vid) {    // Hide critical options from forum vocabulary.    if ($form_id == 'taxonomy_form_vocabulary') {      $form['help_forum_vocab'] = array(        '#value' => t('This is the designated forum vocabulary. Some of the normal vocabulary options have been removed.'),        '#weight' => -1,      );      $form['content_types']['nodes']['#required'] = TRUE;      $form['hierarchy'] = array('#type' => 'value', '#value' => 1);      $form['settings']['required'] = array('#type' => 'value', '#value' => FALSE);      $form['settings']['relations'] = array('#type' => 'value', '#value' => FALSE);      $form['settings']['tags'] = array('#type' => 'value', '#value' => FALSE);      $form['settings']['multiple'] = array('#type' => 'value', '#value' => FALSE);      unset($form['delete']);    }    // Hide multiple parents select from forum terms.    elseif ($form_id == 'taxonomy_form_term') {      $form['advanced']['parent']['#access'] = FALSE;    }  }  if ($form_id == 'forum_node_form') {    // Make the vocabulary required for 'real' forum-nodes.    $vid = variable_get('forum_nav_vocabulary', '');    $form['taxonomy'][$vid]['#required'] = TRUE;    $form['taxonomy'][$vid]['#options'][''] = t('- Please choose -');  }}/** * Implementation of hook_load(). */function forum_load($node) {  $forum = db_fetch_object(db_query('SELECT * FROM {forum} WHERE vid = %d', $node->vid));  return $forum;}/** * Implementation of hook_block(). * * Generates a block containing the currently active forum topics and the * most recently added forum topics. */function forum_block($op = 'list', $delta = 0, $edit = array()) {  switch ($op) {    case 'list':      $blocks[0]['info'] = t('Active forum topics');      $blocks[1]['info'] = t('New forum topics');      return $blocks;    case 'configure':      $form['forum_block_num_'. $delta] = array('#type' => 'select', '#title' => t('Number of topics'), '#default_value' => variable_get('forum_block_num_'. $delta, '5'), '#options' => drupal_map_assoc(array(2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20)));      return $form;    case 'save':      variable_set('forum_block_num_'. $delta, $edit['forum_block_num_'. $delta]);      break;    case 'view':      if (user_access('access content')) {        switch ($delta) {          case 0:            $title = t('Active forum topics');            $sql = db_rewrite_sql("SELECT n.nid, n.title, l.comment_count, l.last_comment_timestamp FROM {node} n INNER JOIN {term_node} tn ON tn.vid = n.vid INNER JOIN {term_data} td ON td.tid = tn.tid INNER JOIN {node_comment_statistics} l ON n.nid = l.nid WHERE n.status = 1 AND td.vid = %d ORDER BY l.last_comment_timestamp DESC");            $result = db_query_range($sql, variable_get('forum_nav_vocabulary', ''), 0, variable_get('forum_block_num_0', '5'));            $content = node_title_list($result);            break;          case 1:            $title = t('New forum topics');            $sql = db_rewrite_sql("SELECT n.nid, n.title, l.comment_count FROM {node} n INNER JOIN {term_node} tn ON tn.vid = n.vid INNER JOIN {term_data} td ON td.tid = tn.tid INNER JOIN {node_comment_statistics} l ON n.nid = l.nid WHERE n.status = 1 AND td.vid = %d ORDER BY n.nid DESC");            $result = db_query_range($sql, variable_get('forum_nav_vocabulary', ''), 0, variable_get('forum_block_num_1', '5'));            $content = node_title_list($result);            break;        }        if (!empty($content)) {          $block['subject'] = $title;          $block['content'] = $content . theme('more_link', url('forum'), t('Read the latest forum topics.'));          return $block;        }      }  }}/** * Implementation of hook_form(). */function forum_form(&$node, $form_state) {  $type = node_get_types('type', $node);  $form['title'] = array('#type' => 'textfield', '#title' => check_plain($type->title_label), '#default_value' => !empty($node->title) ? $node->title : '', '#required' => TRUE, '#weight' => -5);  if (!empty($node->nid)) {    $vid = variable_get('forum_nav_vocabulary', '');    $forum_terms = taxonomy_node_get_terms_by_vocabulary($node, $vid);    // if editing, give option to leave shadows    $shadow = (count($forum_terms) > 1);    $form['shadow'] = array('#type' => 'checkbox', '#title' => t('Leave shadow copy'), '#default_value' => $shadow, '#description' => t('If you move this topic, you can leave a link in the old forum to the new forum.'));  }  $form['body_field'] = node_body_field($node, $type->body_label, 1);  $form['#submit'][] = 'forum_submit';  // Assign the forum topic submit handler.  return $form;}/** * Implementation of hook_term_path(). */function forum_term_path($term) {  return 'forum/'. $term->tid;}/** * Returns a list of all forums for a given taxonomy id * * Forum objects contain the following fields * -num_topics Number of topics in the forum * -num_posts Total number of posts in all topics * -last_post Most recent post for the forum * * @param $tid *   Taxonomy ID of the vocabulary that holds the forum list. * @return *   Array of object containing the forum information. */function forum_get_forums($tid = 0) {  $forums = array();  $vid = variable_get('forum_nav_vocabulary', '');  $_forums = taxonomy_get_tree($vid, $tid);  if (count($_forums)) {    $counts = array();    $sql = "SELECT r.tid, COUNT(n.nid) AS topic_count, SUM(l.comment_count) AS comment_count FROM {node} n INNER JOIN {node_comment_statistics} l ON n.nid = l.nid INNER JOIN {term_node} r ON n.vid = r.vid WHERE n.status = 1 GROUP BY r.tid";    $sql = db_rewrite_sql($sql);    $_counts = db_query($sql);    while ($count = db_fetch_object($_counts)) {      $counts[$count->tid] = $count;    }  }  foreach ($_forums as $forum) {    if (in_array($forum->tid, variable_get('forum_containers', array()))) {      $forum->container = 1;    }    if (!empty($counts[$forum->tid])) {      $forum->num_topics = $counts[$forum->tid]->topic_count;      $forum->num_posts = $counts[$forum->tid]->topic_count + $counts[$forum->tid]->comment_count;    }    else {      $forum->num_topics = 0;      $forum->num_posts = 0;    }    // This query does not use full ANSI syntax since MySQL 3.x does not support    // table1 INNER JOIN table2 INNER JOIN table3 ON table2_criteria ON table3_criteria    // used to join node_comment_statistics to users.    $sql = "SELECT ncs.last_comment_timestamp, IF (ncs.last_comment_uid != 0, u2.name, ncs.last_comment_name) AS last_comment_name, ncs.last_comment_uid FROM {node} n INNER JOIN {users} u1 ON n.uid = u1.uid INNER JOIN {term_node} tn ON n.vid = tn.vid INNER JOIN {node_comment_statistics} ncs ON n.nid = ncs.nid INNER JOIN {users} u2 ON ncs.last_comment_uid=u2.uid WHERE n.status = 1 AND tn.tid = %d ORDER BY ncs.last_comment_timestamp DESC";    $sql = db_rewrite_sql($sql);    $topic = db_fetch_object(db_query_range($sql, $forum->tid, 0, 1));    $last_post = new stdClass();    if (!empty($topic->last_comment_timestamp)) {      $last_post->timestamp = $topic->last_comment_timestamp;      $last_post->name = $topic->last_comment_name;      $last_post->uid = $topic->last_comment_uid;    }    $forum->last_post = $last_post;    $forums[$forum->tid] = $forum;  }  return $forums;}/** * Calculate the number of nodes the user has not yet read and are newer * than NODE_NEW_LIMIT. */function _forum_topics_unread($term, $uid) {  $sql = "SELECT COUNT(n.nid) FROM {node} n INNER JOIN {term_node} tn ON n.vid = tn.vid AND tn.tid = %d LEFT JOIN {history} h ON n.nid = h.nid AND h.uid = %d WHERE n.status = 1 AND n.created > %d AND h.nid IS NULL";  $sql = db_rewrite_sql($sql);  return db_result(db_query($sql, $term, $uid, NODE_NEW_LIMIT));}function forum_get_topics($tid, $sortby, $forum_per_page) {  global $user, $forum_topic_list_header;  $forum_topic_list_header = array(    NULL,    array('data' => t('Topic'), 'field' => 'n.title'),    array('data' => t('Replies'), 'field' => 'l.comment_count'),    array('data' => t('Created'), 'field' => 'n.created'),    array('data' => t('Last reply'), 'field' => 'l.last_comment_timestamp'),  );  $order = _forum_get_topic_order($sortby);  for ($i = 0; $i < count($forum_topic_list_header); $i++) {    if ($forum_topic_list_header[$i]['field'] == $order['field']) {      $forum_topic_list_header[$i]['sort'] = $order['sort'];    }  }  $term = taxonomy_get_term($tid);  $sql = db_rewrite_sql("SELECT n.nid, r.tid, n.title, n.type, n.sticky, u.name, u.uid, n.created AS timestamp, n.comment AS comment_mode, l.last_comment_timestamp, IF(l.last_comment_uid != 0, cu.name, l.last_comment_name) AS last_comment_name, l.last_comment_uid, l.comment_count AS num_comments, f.tid AS forum_tid FROM {node_comment_statistics} l INNER JOIN {node} n ON n.nid = l.nid INNER JOIN {users} cu ON l.last_comment_uid = cu.uid INNER JOIN {term_node} r ON n.vid = r.vid INNER JOIN {users} u ON n.uid = u.uid INNER JOIN {forum} f ON n.vid = f.vid WHERE n.status = 1 AND r.tid = %d");  $sql .= tablesort_sql($forum_topic_list_header, 'n.sticky DESC,');  $sql .= ', n.created DESC';  // Always add a secondary sort order so that the news forum topics are on top.  $sql_count = db_rewrite_sql("SELECT COUNT(n.nid) FROM {node} n INNER JOIN {term_node} r ON n.vid = r.vid AND r.tid = %d WHERE n.status = 1");  $result = pager_query($sql, $forum_per_page, 0, $sql_count, $tid);  $topics = array();  while ($topic = db_fetch_object($result)) {    if ($user->uid) {      // folder is new if topic is new or there are new comments since last visit      if ($topic->tid != $tid) {        $topic->new = 0;      }      else {        $history = _forum_user_last_visit($topic->nid);        $topic->new_replies = comment_num_new($topic->nid, $history);        $topic->new = $topic->new_replies || ($topic->timestamp > $history);      }    }    else {      // Do not track "new replies" status for topics if the user is anonymous.      $topic->new_replies = 0;      $topic->new = 0;    }    if ($topic->num_comments > 0) {      $last_reply = new stdClass();      $last_reply->timestamp = $topic->last_comment_timestamp;      $last_reply->name = $topic->last_comment_name;      $last_reply->uid = $topic->last_comment_uid;      $topic->last_reply = $last_reply;    }    $topics[] = $topic;  }  return $topics;}/** * Finds the first unread node for a given forum. */function _forum_new($tid) {  global $user;  $sql = "SELECT n.nid FROM {node} n LEFT JOIN {history} h ON n.nid = h.nid AND h.uid = %d INNER JOIN {term_node} r ON n.nid = r.nid AND r.tid = %d WHERE n.status = 1 AND h.nid IS NULL AND n.created > %d ORDER BY created";  $sql = db_rewrite_sql($sql);  $nid = db_result(db_query_range($sql, $user->uid, $tid, NODE_NEW_LIMIT, 0, 1));  return $nid ? $nid : 0;}/** * Process variables for forums.tpl.php * * The $variables array contains the following arguments: * - $forums * - $topics * - $parents * - $tid * - $sortby * - $forum_per_page * * @see forums.tpl.php */function template_preprocess_forums(&$variables) {  global $user;  $vid = variable_get('forum_nav_vocabulary', '');  $vocabulary = taxonomy_vocabulary_load($vid);  $title = !empty($vocabulary->name) ? $vocabulary->name : '';  // Breadcrumb navigation:  $breadcrumb[] = l(t('Home'), NULL);  if ($variables['tid']) {    $breadcrumb[] = l($vocabulary->name, 'forum');  }  if ($variables['parents']) {    $variables['parents'] = array_reverse($variables['parents']);    foreach ($variables['parents'] as $p) {      if ($p->tid == $variables['tid']) {        $title = $p->name;      }      else {        $breadcrumb[] = l($p->name, 'forum/'. $p->tid);      }    }  }  drupal_set_breadcrumb($breadcrumb);  drupal_set_title(check_plain($title));  if ($variables['forums_defined'] = count($variables['forums']) || count($variables['parents'])) {    // Format the "post new content" links listing.    $forum_types = array();    // Loop through all node types for forum vocabulary.    foreach ($vocabulary->nodes as $type) {      // Check if the current user has the 'create' permission for this node type.      if (node_access('create', $type)) {        // Fetch the "General" name of the content type;        // Push the link with title and url to the array.        $forum_types[$type] = array('title' => t('Post new @node_type', array('@node_type' => node_get_types('name', $type))), 'href' => 'node/add/'. str_replace('_', '-', $type) .'/'. $variables['tid']);      }    }    if (empty($forum_types)) {      // The user is logged-in; but denied access to create any new forum content type.      if ($user->uid) {        $forum_types['disallowed'] = array('title' => t('You are not allowed to post new content in the forum.'));      }      // The user is not logged-in; and denied access to create any new forum content type.      else {        $forum_types['login'] = array('title' => t('<a href="@login">Login</a> to post new content in the forum.', array('@login' => url('user/login', array('query' => drupal_get_destination())))), 'html' => TRUE);      }    }    $variables['links'] = $forum_types;    if (!empty($variables['forums'])) {      $variables['forums'] = theme('forum_list', $variables['forums'], $variables['parents'], $variables['tid']);    }    else {      $variables['forums'] = '';    }    if ($variables['tid'] && !in_array($variables['tid'], variable_get('forum_containers', array()))) {      $variables['topics'] = theme('forum_topic_list', $variables['tid'], $variables['topics'], $variables['sortby'], $variables['forum_per_page']);      drupal_add_feed(url('taxonomy/term/'. $variables['tid'] .'/0/feed'), 'RSS - '. $title);    }    else {      $variables['topics'] = '';    }    // Provide separate template suggestions based on what's being output. Topic id is also accounted for.    // Check both variables to be safe then the inverse. Forums with topic ID's take precedence.    if ($variables['forums'] && !$variables['topics']) {      $variables['template_files'][] = 'forums-containers';      $variables['template_files'][] = 'forums-'. $variables['tid'];      $variables['template_files'][] = 'forums-containers-'. $variables['tid'];    }    elseif (!$variables['forums'] && $variables['topics']) {      $variables['template_files'][] = 'forums-topics';      $variables['template_files'][] = 'forums-'. $variables['tid'];      $variables['template_files'][] = 'forums-topics-'. $variables['tid'];    }    else {      $variables['template_files'][] = 'forums-'. $variables['tid'];    }  }  else {    drupal_set_title(t('No forums defined'));    $variables['links'] = array();    $variables['forums'] = '';    $variables['topics'] = '';  }}/** * Process variables to format a forum listing. * * $variables contains the following information: * - $forums * - $parents * - $tid * * @see forum-list.tpl.php * @see theme_forum_list() */function template_preprocess_forum_list(&$variables) {  global $user;  $row = 0;  // Sanitize each forum so that the template can safely print the data.  foreach ($variables['forums'] as $id => $forum) {    $variables['forums'][$id]->description = !empty($forum->description) ? filter_xss_admin($forum->description) : '';    $variables['forums'][$id]->link = url("forum/$forum->tid");    $variables['forums'][$id]->name = check_plain($forum->name);    $variables['forums'][$id]->is_container = !empty($forum->container);    $variables['forums'][$id]->zebra = $row % 2 == 0 ? 'odd' : 'even';    $row++;    $variables['forums'][$id]->new_text = '';    $variables['forums'][$id]->new_url = '';    $variables['forums'][$id]->new_topics = 0;    $variables['forums'][$id]->old_topics = $forum->num_topics;    if ($user->uid) {      $variables['forums'][$id]->new_topics = _forum_topics_unread($forum->tid, $user->uid);      if ($variables['forums'][$id]->new_topics) {        $variables['forums'][$id]->new_text = format_plural($variables['forums'][$id]->new_topics, '1 new', '@count new');        $variables['forums'][$id]->new_url = url("forum/$forum->tid", array('fragment' => 'new'));      }      $variables['forums'][$id]->old_topics = $forum->num_topics - $variables['forums'][$id]->new_topics;    }    $variables['forums'][$id]->last_reply = theme('forum_submitted', $forum->last_post);  }  // Give meaning to $tid for themers. $tid actually stands for term id.  $variables['forum_id'] = $variables['tid'];  unset($variables['tid']);}/** * Preprocess variables to format the topic listing. * * $variables contains the following data: * - $tid * - $topics * - $sortby * - $forum_per_page * * @see forum-topic-list.tpl.php * @see theme_forum_topic_list() */function template_preprocess_forum_topic_list(&$variables) {  global $forum_topic_list_header;  // Create the tablesorting header.  $ts = tablesort_init($forum_topic_list_header);  $header = '';  foreach ($forum_topic_list_header as $cell) {    $cell = tablesort_header($cell, $forum_topic_list_header, $ts);    $header .= _theme_table_cell($cell, TRUE);  }  $variables['header'] = $header;  if (!empty($variables['topics'])) {    $row = 0;    foreach ($variables['topics'] as $id => $topic) {      $variables['topics'][$id]->icon = theme('forum_icon', $topic->new, $topic->num_comments, $topic->comment_mode, $topic->sticky);      $variables['topics'][$id]->zebra = $row % 2 == 0 ? 'odd' : 'even';      $row++;      // We keep the actual tid in forum table, if it's different from the      // current tid then it means the topic appears in two forums, one of      // them is a shadow copy.      if ($topic->forum_tid != $variables['tid']) {        $variables['topics'][$id]->moved = TRUE;        $variables['topics'][$id]->title = check_plain($topic->title);        $variables['topics'][$id]->message = l(t('This topic has been moved'), "forum/$topic->forum_tid");      }      else {        $variables['topics'][$id]->moved = FALSE;        $variables['topics'][$id]->title = l($topic->title, "node/$topic->nid");        $variables['topics'][$id]->message = '';      }      $variables['topics'][$id]->created = theme('forum_submitted', $topic);      $variables['topics'][$id]->last_reply = theme('forum_submitted', isset($topic->last_reply) ? $topic->last_reply : NULL);      $variables['topics'][$id]->new_text = '';      $variables['topics'][$id]->new_url = '';      if ($topic->new_replies) {        $variables['topics'][$id]->new_text = format_plural($topic->new_replies, '1 new', '@count new');        $variables['topics'][$id]->new_url = url("node/$topic->nid", array('query' => comment_new_page_count($topic->num_comments, $topic->new_replies, $topic), 'fragment' => 'new'));      }    }  }  else {    // Make this safe for the template    $variables['topics'] = array();  }  // Give meaning to $tid for themers. $tid actually stands for term id.  $variables['topic_id'] = $variables['tid'];  unset($variables['tid']);  $variables['pager'] = theme('pager', NULL, $variables['forum_per_page'], 0);}/** * Process variables to format the icon for each individual topic. * * $variables contains the following data: * - $new_posts * - $num_posts = 0 * - $comment_mode = 0 * - $sticky = 0 * * @see forum-icon.tpl.php * @see theme_forum_icon() */function template_preprocess_forum_icon(&$variables) {  $variables['hot_threshold'] = variable_get('forum_hot_topic', 15);  if ($variables['num_posts'] > $variables['hot_threshold']) {    $variables['icon'] = $variables['new_posts'] ? 'hot-new' : 'hot';  }  else {    $variables['icon'] = $variables['new_posts'] ? 'new' : 'default';  }  if ($variables['comment_mode'] == COMMENT_NODE_READ_ONLY || $variables['comment_mode'] == COMMENT_NODE_DISABLED) {    $variables['icon'] = 'closed';  }  if ($variables['sticky'] == 1) {    $variables['icon'] = 'sticky';  }}/** * Preprocess variables to format the next/previous forum topic navigation links. * * $variables contains $node. * * @see forum-topic-navigation.tpl.php * @see theme_forum_topic_navigation() */function template_preprocess_forum_topic_navigation(&$variables) {  $output = '';  // get previous and next topic  $sql = "SELECT n.nid, n.title, n.sticky, l.comment_count, l.last_comment_timestamp FROM {node} n INNER JOIN {node_comment_statistics} l ON n.nid = l.nid INNER JOIN {term_node} r ON n.nid = r.nid AND r.tid = %d WHERE n.status = 1 ORDER BY n.sticky DESC, ". _forum_get_topic_order_sql(variable_get('forum_order', 1));  $result = db_query(db_rewrite_sql($sql), isset($variables['node']->tid) ? $variables['node']->tid : 0);  $stop = $variables['prev'] = $variables['next'] = 0;  while ($topic = db_fetch_object($result)) {    if ($stop == 1) {      $variables['next'] = $topic->nid;      $variables['next_title'] = check_plain($topic->title);      $variables['next_url'] = url("node/$topic->nid");      break;    }    if ($topic->nid == $variables['node']->nid) {      $stop = 1;    }    else {      $variables['prev'] = $topic->nid;      $variables['prev_title'] = check_plain($topic->title);      $variables['prev_url'] = url("node/$topic->nid");    }  }}/** * Process variables to format submission info for display in the forum list and topic list. * * $variables will contain: $topic * * @see forum-submitted.tpl.php * @see theme_forum_submitted() */function template_preprocess_forum_submitted(&$variables) {  $variables['author'] = isset($variables['topic']->uid) ? theme('username', $variables['topic']) : '';  $variables['time'] = isset($variables['topic']->timestamp) ? format_interval(time() - $variables['topic']->timestamp) : '';}function _forum_user_last_visit($nid) {  global $user;  static $history = array();  if (empty($history)) {    $result = db_query('SELECT nid, timestamp FROM {history} WHERE uid = %d', $user->uid);    while ($t = db_fetch_object($result)) {      $history[$t->nid] = $t->timestamp > NODE_NEW_LIMIT ? $t->timestamp : NODE_NEW_LIMIT;    }  }  return isset($history[$nid]) ? $history[$nid] : NODE_NEW_LIMIT;}function _forum_get_topic_order($sortby) {  switch ($sortby) {    case 1:      return array('field' => 'l.last_comment_timestamp', 'sort' => 'desc');      break;    case 2:      return array('field' => 'l.last_comment_timestamp', 'sort' => 'asc');      break;    case 3:      return array('field' => 'l.comment_count', 'sort' => 'desc');      break;    case 4:      return array('field' => 'l.comment_count', 'sort' => 'asc');      break;  }}function _forum_get_topic_order_sql($sortby) {  $order = _forum_get_topic_order($sortby);  return $order['field'] .' '. strtoupper($order['sort']);}
<?php// $Id$/** * @file * User page callbacks for the profile module. *//** * Menu callback; display a list of user information. */function profile_browse() {  // Ensure that the path is converted to 3 levels always.  list(, $name, $value) = array_pad(explode('/', $_GET['q'], 3), 3, '');  $field = db_fetch_object(db_query("SELECT DISTINCT(fid), type, title, page, visibility FROM {profile_fields} WHERE name = '%s'", $name));  if ($name && $field->fid) {    // Only allow browsing of fields that have a page title set.    if (empty($field->page)) {      drupal_not_found();      return;    }    // Do not allow browsing of private and hidden fields by non-admins.    if (!user_access('administer users') && ($field->visibility == PROFILE_PRIVATE || $field->visibility == PROFILE_HIDDEN)) {      drupal_access_denied();      return;    }    // Compile a list of fields to show.    $fields = array();    $result = db_query('SELECT name, title, type, weight, page FROM {profile_fields} WHERE fid != %d AND visibility = %d ORDER BY weight', $field->fid, PROFILE_PUBLIC_LISTINGS);    while ($record = db_fetch_object($result)) {      $fields[] = $record;    }    // Determine what query to use:    $arguments = array($field->fid);    switch ($field->type) {      case 'checkbox':        $query = 'v.value = 1';        break;      case 'textfield':      case 'selection':        $query = "v.value = '%s'";        $arguments[] = $value;        break;      case 'list':        $query = "v.value LIKE '%%%s%%'";        $arguments[] = $value;        break;      default:        drupal_not_found();        return;    }    // Extract the affected users:    $result = pager_query("SELECT u.uid, u.access FROM {users} u INNER JOIN {profile_values} v ON u.uid = v.uid WHERE v.fid = %d AND $query AND u.access != 0 AND u.status != 0 ORDER BY u.access DESC", 20, 0, NULL, $arguments);    $content = '';    while ($account = db_fetch_object($result)) {      $account = user_load(array('uid' => $account->uid));      $profile = _profile_update_user_fields($fields, $account);      $content .= theme('profile_listing', $account, $profile);    }    $output = theme('profile_wrapper', $content);    $output .= theme('pager', NULL, 20);    if ($field->type == 'selection' || $field->type == 'list' || $field->type == 'textfield') {      $title = strtr(check_plain($field->page), array('%value' => theme('placeholder', $value)));    }    else {      $title = check_plain($field->page);    }    drupal_set_title($title);    return $output;  }  else if ($name && !$field->fid) {    drupal_not_found();  }  else {    // Compile a list of fields to show.    $fields = array();    $result = db_query('SELECT name, title, type, weight, page FROM {profile_fields} WHERE visibility = %d ORDER BY category, weight', PROFILE_PUBLIC_LISTINGS);    while ($record = db_fetch_object($result)) {      $fields[] = $record;    }    // Extract the affected users:    $result = pager_query('SELECT uid, access FROM {users} WHERE uid > 0 AND status != 0 AND access != 0 ORDER BY access DESC', 20, 0, NULL);    $content = '';    while ($account = db_fetch_object($result)) {      $account = user_load(array('uid' => $account->uid));      $profile = _profile_update_user_fields($fields, $account);      $content .= theme('profile_listing', $account, $profile);    }    $output = theme('profile_wrapper', $content);    $output .= theme('pager', NULL, 20);    drupal_set_title(t('User list'));    return $output;  }}/** * Callback to allow autocomplete of profile text fields. */function profile_autocomplete($field, $string) {  $matches = array();  if (db_result(db_query("SELECT COUNT(*) FROM {profile_fields} WHERE fid = %d AND autocomplete = 1", $field))) {    $result = db_query_range("SELECT value FROM {profile_values} WHERE fid = %d AND LOWER(value) LIKE LOWER('%s%%') GROUP BY value ORDER BY value ASC", $field, $string, 0, 10);    while ($data = db_fetch_object($result)) {      $matches[$data->value] = check_plain($data->value);    }  }  drupal_json($matches);}
<?php// $Id$/** * @file * Admin page callbacks for the statistics module. *//** * Menu callback; presents the "recent hits" page. */function statistics_recent_hits() {  $header = array(    array('data' => t('Timestamp'), 'field' => 'a.timestamp', 'sort' => 'desc'),    array('data' => t('Page'), 'field' => 'a.path'),    array('data' => t('User'), 'field' => 'u.name'),    array('data' => t('Operations'))  );  $sql = 'SELECT a.aid, a.path, a.title, a.uid, u.name, a.timestamp FROM {accesslog} a LEFT JOIN {users} u ON u.uid = a.uid'. tablesort_sql($header);  $result = pager_query($sql, 30);  $rows = array();  while ($log = db_fetch_object($result)) {    $rows[] = array(      array('data' => format_date($log->timestamp, 'small'), 'class' => 'nowrap'),      _statistics_format_item($log->title, $log->path),      theme('username', $log),      l(t('details'), "admin/reports/access/$log->aid"));  }  if (empty($rows)) {    $rows[] = array(array('data' => t('No statistics available.'), 'colspan' => 4));  }  $output = theme('table', $header, $rows);  $output .= theme('pager', NULL, 30, 0);  return $output;}/** * Menu callback; presents the "top pages" page. */function statistics_top_pages() {  // MAX(title) avoids having empty node titles which otherwise causes duplicates in the top pages list  $sql = "SELECT COUNT(path) AS hits, path, MAX(title) AS title, AVG(timer) AS average_time, SUM(timer) AS total_time FROM {accesslog} GROUP BY path";  $sql_cnt = "SELECT COUNT(DISTINCT(path)) FROM {accesslog}";  $header = array(    array('data' => t('Hits'), 'field' => 'hits', 'sort' => 'desc'),    array('data' => t('Page'), 'field' => 'path'),    array('data' => t('Average page generation time'), 'field' => 'average_time'),    array('data' => t('Total page generation time'), 'field' => 'total_time')  );  $sql .= tablesort_sql($header);  $result = pager_query($sql, 30, 0, $sql_cnt);  $rows = array();  while ($page = db_fetch_object($result)) {    $rows[] = array($page->hits, _statistics_format_item($page->title, $page->path), t('%time ms', array('%time' => round($page->average_time))), format_interval(round($page->total_time / 1000)));  }  if (empty($rows)) {    $rows[] = array(array('data' => t('No statistics available.'), 'colspan' => 4));  }  drupal_set_title(t('Top pages in the past %interval', array('%interval' => format_interval(variable_get('statistics_flush_accesslog_timer', 259200)))));  $output = theme('table', $header, $rows);  $output .= theme('pager', NULL, 30, 0);  return $output;}/** * Menu callback; presents the "top visitors" page. */function statistics_top_visitors() {  $header = array(    array('data' => t('Hits'), 'field' => 'hits', 'sort' => 'desc'),    array('data' => t('Visitor'), 'field' => 'u.name'),    array('data' => t('Total page generation time'), 'field' => 'total'),    array('data' => t('Operations'))  );  $sql = "SELECT COUNT(a.uid) AS hits, a.uid, u.name, a.hostname, SUM(a.timer) AS total, ac.aid FROM {accesslog} a LEFT JOIN {access} ac ON ac.type = 'host' AND LOWER(a.hostname) LIKE (ac.mask) LEFT JOIN {users} u ON a.uid = u.uid GROUP BY a.hostname, a.uid, u.name, ac.aid". tablesort_sql($header);  $sql_cnt = "SELECT COUNT(DISTINCT(CONCAT(uid, hostname))) FROM {accesslog}";  $result = pager_query($sql, 30, 0, $sql_cnt);  $rows = array();  while ($account = db_fetch_object($result)) {    $qs = drupal_get_destination();    $ban_link = $account->aid ? l(t('unban'), "admin/user/rules/delete/$account->aid", array('query' => $qs)) : l(t('ban'), "admin/user/rules/add/$account->hostname/host", array('query' => $qs));    $rows[] = array($account->hits, ($account->uid ? theme('username', $account) : $account->hostname), format_interval(round($account->total / 1000)), $ban_link);  }  if (empty($rows)) {    $rows[] = array(array('data' => t('No statistics available.'), 'colspan' => 4));  }  drupal_set_title(t('Top visitors in the past %interval', array('%interval' => format_interval(variable_get('statistics_flush_accesslog_timer', 259200)))));  $output = theme('table', $header, $rows);  $output .= theme('pager', NULL, 30, 0);  return $output;}/** * Menu callback; presents the "referrer" page. */function statistics_top_referrers() {  $query = "SELECT url, COUNT(url) AS hits, MAX(timestamp) AS last FROM {accesslog} WHERE url NOT LIKE '%%%s%%' AND url <> '' GROUP BY url";  $query_cnt = "SELECT COUNT(DISTINCT(url)) FROM {accesslog} WHERE url <> '' AND url NOT LIKE '%%%s%%'";  drupal_set_title(t('Top referrers in the past %interval', array('%interval' => format_interval(variable_get('statistics_flush_accesslog_timer', 259200)))));  $header = array(    array('data' => t('Hits'), 'field' => 'hits', 'sort' => 'desc'),    array('data' => t('Url'), 'field' => 'url'),    array('data' => t('Last visit'), 'field' => 'last'),  );  $query .= tablesort_sql($header);  $result = pager_query($query, 30, 0, $query_cnt, $_SERVER['HTTP_HOST']);  $rows = array();  while ($referrer = db_fetch_object($result)) {    $rows[] = array($referrer->hits, _statistics_link($referrer->url), t('@time ago', array('@time' => format_interval(time() - $referrer->last))));  }  if (empty($rows)) {    $rows[] = array(array('data' => t('No statistics available.'), 'colspan' => 3));  }  $output = theme('table', $header, $rows);  $output .= theme('pager', NULL, 30, 0);  return $output;}/** * Menu callback; Displays recent page accesses. */function statistics_access_log($aid) {  $result = db_query('SELECT a.*, u.name FROM {accesslog} a LEFT JOIN {users} u ON a.uid = u.uid WHERE aid = %d', $aid);  if ($access = db_fetch_object($result)) {    $rows[] = array(      array('data' => t('URL'), 'header' => TRUE),      l(url($access->path, array('absolute' => TRUE)), $access->path)    );    // It is safe to avoid filtering $access->title through check_plain because    // it comes from drupal_get_title().    $rows[] = array(      array('data' => t('Title'), 'header' => TRUE),      $access->title    );    $rows[] = array(      array('data' => t('Referrer'), 'header' => TRUE),      ($access->url ? l($access->url, $access->url) : '')    );    $rows[] = array(      array('data' => t('Date'), 'header' => TRUE),      format_date($access->timestamp, 'large')    );    $rows[] = array(      array('data' => t('User'), 'header' => TRUE),      theme('username', $access)    );    $rows[] = array(      array('data' => t('Hostname'), 'header' => TRUE),      check_plain($access->hostname)    );    return theme('table', array(), $rows);  }  else {    drupal_not_found();  }}/** * Form builder; Configure access logging. * * @ingroup forms * @see system_settings_form() */function statistics_access_logging_settings() {  // Access log settings:  $options = array('1' => t('Enabled'), '0' => t('Disabled'));  $form['access'] = array(    '#type' => 'fieldset',    '#title' => t('Access log settings'));  $form['access']['statistics_enable_access_log'] = array(    '#type' => 'radios',    '#title' => t('Enable access log'),    '#default_value' => variable_get('statistics_enable_access_log', 0),    '#options' => $options,    '#description' => t('Log each page access. Required for referrer statistics.'));  $period = drupal_map_assoc(array(3600, 10800, 21600, 32400, 43200, 86400, 172800, 259200, 604800, 1209600, 2419200, 4838400, 9676800), 'format_interval');  $form['access']['statistics_flush_accesslog_timer'] = array(    '#type' => 'select',    '#title' => t('Discard access logs older than'),    '#default_value'   => variable_get('statistics_flush_accesslog_timer', 259200),    '#options' => $period,    '#description' => t('Older access log entries (including referrer statistics) will be automatically discarded. (Requires a correctly configured <a href="@cron">cron maintenance task</a>.)', array('@cron' => url('admin/reports/status'))));  // count content views settings  $form['content'] = array(    '#type' => 'fieldset',    '#title' => t('Content viewing counter settings'));  $form['content']['statistics_count_content_views'] = array(    '#type' => 'radios',    '#title' => t('Count content views'),    '#default_value' => variable_get('statistics_count_content_views', 0),    '#options' => $options,    '#description' => t('Increment a counter each time content is viewed.'));  return system_settings_form($form);}
<?php// $Id$/** * Implementation of hook_enable(). */function comment_enable() {  // Insert records into the node_comment_statistics for nodes that are missing.  db_query("INSERT INTO {node_comment_statistics} (nid, last_comment_timestamp, last_comment_name, last_comment_uid, comment_count) SELECT n.nid, n.changed, NULL, n.uid, 0 FROM {node} n LEFT JOIN {node_comment_statistics} c ON n.nid = c.nid WHERE c.comment_count IS NULL");}/** * Changed node_comment_statistics to use node->changed to avoid future timestamps. */function comment_update_1() {  // Change any future last comment timestamps to now.  db_query('UPDATE {node_comment_statistics} SET last_comment_timestamp = %d WHERE last_comment_timestamp > %d', time(), time());  // Unstuck node indexing timestamp if needed.  if (($last = variable_get('node_cron_last', FALSE)) !== FALSE) {    variable_set('node_cron_last', min(time(), $last));  }  return array();}function comment_update_6001() {  $ret[] = update_sql("ALTER TABLE {comments} DROP score");  $ret[] = update_sql("ALTER TABLE {comments} DROP users");  return $ret;}/** * Changed comment settings from global to per-node -- copy global * settings to all node types. */function comment_update_6002() {  // Comment module might not be enabled when this is run, but we need the  // constants defined by the module for this update.  drupal_load('module', 'comment');  $settings = array(    'comment_default_mode' => COMMENT_MODE_THREADED_EXPANDED,    'comment_default_order' => COMMENT_ORDER_NEWEST_FIRST,    'comment_default_per_page' => 50,    'comment_controls' => COMMENT_CONTROLS_HIDDEN,    'comment_anonymous' => COMMENT_ANONYMOUS_MAYNOT_CONTACT,    'comment_subject_field' => 1,    'comment_preview' => COMMENT_PREVIEW_REQUIRED,    'comment_form_location' => COMMENT_FORM_SEPARATE_PAGE,  );  $types = node_get_types();  foreach ($settings as $setting => $default) {    $value = variable_get($setting, $default);    foreach ($types as $type => $object) {      variable_set($setting .'_'. $type, $value);    }    variable_del($setting);  }  return array(array('success' => TRUE, 'query' => 'Global comment settings copied to all node types.'));}/** * Add index to parent ID field. */function comment_update_6003() {  $ret = array();  db_add_index($ret, 'comments', 'pid', array('pid'));  return $ret;}/** * Implementation of hook_schema(). */function comment_schema() {  $schema['comments'] = array(    'description' => 'Stores comments and associated data.',    'fields' => array(      'cid' => array(        'type' => 'serial',        'not null' => TRUE,        'description' => 'Primary Key: Unique comment ID.',      ),      'pid' => array(        'type' => 'int',        'not null' => TRUE,        'default' => 0,        'description' => 'The {comments}.cid to which this comment is a reply. If set to 0, this comment is not a reply to an existing comment.',      ),      'nid' => array(        'type' => 'int',        'not null' => TRUE,        'default' => 0,        'description' => 'The {node}.nid to which this comment is a reply.',      ),      'uid' => array(        'type' => 'int',        'not null' => TRUE,        'default' => 0,        'description' => 'The {users}.uid who authored the comment. If set to 0, this comment was created by an anonymous user.',      ),      'subject' => array(        'type' => 'varchar',        'length' => 64,        'not null' => TRUE,        'default' => '',        'description' => 'The comment title.',      ),      'comment' => array(        'type' => 'text',        'not null' => TRUE,        'size' => 'big',        'description' => 'The comment body.',      ),      'hostname' => array(        'type' => 'varchar',        'length' => 128,        'not null' => TRUE,        'default' => '',        'description' => "The author's host name.",      ),      'timestamp' => array(        'type' => 'int',        'not null' => TRUE,        'default' => 0,        'description' => 'The time that the comment was created, or last edited by its author, as a Unix timestamp.',      ),      'status' => array(        'type' => 'int',        'unsigned' => TRUE,        'not null' => TRUE,        'default' => 0,        'size' => 'tiny',        'description' => 'The published status of a comment. (0 = Published, 1 = Not Published)',      ),      'format' => array(        'type' => 'int',        'size' => 'small',        'not null' => TRUE,        'default' => 0,        'description' => 'The {filter_formats}.format of the comment body.',      ),      'thread' => array(        'type' => 'varchar',        'length' => 255,        'not null' => TRUE,        'description' => "The vancode representation of the comment's place in a thread.",      ),      'name' => array(        'type' => 'varchar',        'length' => 60,        'not null' => FALSE,        'description' => "The comment author's name. Uses {users}.name if the user is logged in, otherwise uses the value typed into the comment form.",      ),      'mail' => array(        'type' => 'varchar',        'length' => 64,        'not null' => FALSE,        'description' => "The comment author's e-mail address from the comment form, if user is anonymous, and the 'Anonymous users may/must leave their contact information' setting is turned on.",      ),      'homepage' => array(        'type' => 'varchar',        'length' => 255,        'not null' => FALSE,        'description' => "The comment author's home page address from the comment form, if user is anonymous, and the 'Anonymous users may/must leave their contact information' setting is turned on.",      )    ),    'indexes' => array(      'pid'    => array('pid'),      'nid'    => array('nid'),      'status' => array('status'), // This index is probably unused    ),    'primary key' => array('cid'),  );  $schema['node_comment_statistics'] = array(    'description' => 'Maintains statistics of node and comments posts to show "new" and "updated" flags.',    'fields' => array(      'nid' => array(        'type' => 'int',        'unsigned' => TRUE,        'not null' => TRUE,        'default' => 0,        'description' => 'The {node}.nid for which the statistics are compiled.',      ),      'last_comment_timestamp' => array(        'type' => 'int',        'not null' => TRUE,        'default' => 0,        'description' => 'The Unix timestamp of the last comment that was posted within this node, from {comments}.timestamp.',      ),      'last_comment_name' => array(        'type' => 'varchar',        'length' => 60,        'not null' => FALSE,        'description' => 'The name of the latest author to post a comment on this node, from {comments}.name.',      ),      'last_comment_uid' => array(        'type' => 'int',        'not null' => TRUE,        'default' => 0,        'description' => 'The user ID of the latest author to post a comment on this node, from {comments}.uid.',      ),      'comment_count' => array(        'type' => 'int',        'unsigned' => TRUE,        'not null' => TRUE,        'default' => 0,        'description' => 'The total number of comments on this node.',      ),    ),    'primary key' => array('nid'),    'indexes' => array(      'node_comment_timestamp' => array('last_comment_timestamp')    ),  );  return $schema;}
<?php// $Id$/** * Test and report Drupal installation requirements. * * @param $phase *   The current system installation phase. * @return *   An array of system requirements. */function system_requirements($phase) {  $requirements = array();  // Ensure translations don't break at install time  $t = get_t();  // Report Drupal version  if ($phase == 'runtime') {    $requirements['drupal'] = array(      'title' => $t('Drupal'),      'value' => VERSION,      'severity' => REQUIREMENT_INFO,      'weight' => -10,    );  }  // Web server information.  $software = $_SERVER['SERVER_SOFTWARE'];  $requirements['webserver'] = array(    'title' => $t('Web server'),    'value' => $software,  );  // Test PHP version  $requirements['php'] = array(    'title' => $t('PHP'),    'value' => ($phase == 'runtime') ? l(phpversion(), 'admin/reports/status/php') : phpversion(),  );  if (version_compare(phpversion(), DRUPAL_MINIMUM_PHP) < 0) {    $requirements['php']['description'] = $t('Your PHP installation is too old. Drupal requires at least PHP %version.', array('%version' => DRUPAL_MINIMUM_PHP));    $requirements['php']['severity'] = REQUIREMENT_ERROR;  }  // Test PHP register_globals setting.  $requirements['php_register_globals'] = array(    'title' => $t('PHP register globals'),  );  $register_globals = trim(ini_get('register_globals'));  // Unfortunately, ini_get() may return many different values, and we can't  // be certain which values mean 'on', so we instead check for 'not off'  // since we never want to tell the user that their site is secure  // (register_globals off), when it is in fact on. We can only guarantee  // register_globals is off if the value returned is 'off', '', or 0.  if (!empty($register_globals) && strtolower($register_globals) != 'off') {    $requirements['php_register_globals']['description'] = $t('<em>register_globals</em> is enabled. Drupal requires this configuration directive to be disabled. Your site may not be secure when <em>register_globals</em> is enabled. The PHP manual has instructions for <a href="http://php.net/configuration.changes">how to change configuration settings</a>.');    $requirements['php_register_globals']['severity'] = REQUIREMENT_ERROR;    $requirements['php_register_globals']['value'] = $t("Enabled ('@value')", array('@value' => $register_globals));  }  else {    $requirements['php_register_globals']['value'] = $t('Disabled');  }  // Test PHP memory_limit  $memory_limit = ini_get('memory_limit');  $requirements['php_memory_limit'] = array(    'title' => $t('PHP memory limit'),    'value' => $memory_limit == -1 ? t('-1 (Unlimited)') : $memory_limit,  );  if ($memory_limit && $memory_limit != -1 && parse_size($memory_limit) < parse_size(DRUPAL_MINIMUM_PHP_MEMORY_LIMIT)) {    $description = '';    if ($phase == 'install') {      $description = $t('Consider increasing your PHP memory limit to %memory_minimum_limit to help prevent errors in the installation process.', array('%memory_minimum_limit' => DRUPAL_MINIMUM_PHP_MEMORY_LIMIT));    }    elseif ($phase == 'update') {      $description = $t('Consider increasing your PHP memory limit to %memory_minimum_limit to help prevent errors in the update process.', array('%memory_minimum_limit' => DRUPAL_MINIMUM_PHP_MEMORY_LIMIT));    }    elseif ($phase == 'runtime') {      $description = $t('Depending on your configuration, Drupal can run with a %memory_limit PHP memory limit. However, a %memory_minimum_limit PHP memory limit or above is recommended, especially if your site uses additional custom or contributed modules.', array('%memory_limit' => $memory_limit, '%memory_minimum_limit' => DRUPAL_MINIMUM_PHP_MEMORY_LIMIT));    }    if (!empty($description)) {      if ($php_ini_path = get_cfg_var('cfg_file_path')) {        $description .= ' '. $t('Increase the memory limit by editing the memory_limit parameter in the file %configuration-file and then restart your web server (or contact your system administrator or hosting provider for assistance).', array('%configuration-file' => $php_ini_path));      }      else {        $description .= ' '. $t('Contact your system administrator or hosting provider for assistance with increasing your PHP memory limit.');      }      $requirements['php_memory_limit']['description'] = $description .' '. $t('See the <a href="@url">Drupal requirements</a> for more information.', array('@url' => 'http://drupal.org/requirements'));      $requirements['php_memory_limit']['severity'] = REQUIREMENT_WARNING;    }  }  // Test DB version  global $db_type;  if (function_exists('db_status_report')) {    $requirements += db_status_report($phase);  }  // Test settings.php file writability  if ($phase == 'runtime') {    $conf_dir = drupal_verify_install_file(conf_path(), FILE_NOT_WRITABLE, 'dir');    $conf_file = drupal_verify_install_file(conf_path() .'/settings.php', FILE_EXIST|FILE_READABLE|FILE_NOT_WRITABLE);    if (!$conf_dir || !$conf_file) {      $requirements['settings.php'] = array(        'value' => $t('Not protected'),        'severity' => REQUIREMENT_ERROR,        'description' => '',      );      if (!$conf_dir) {        $requirements['settings.php']['description'] .= $t('The directory %file is not protected from modifications and poses a security risk. You must change the directory\'s permissions to be non-writable. ', array('%file' => conf_path()));      }      if (!$conf_file) {        $requirements['settings.php']['description'] .= $t('The file %file is not protected from modifications and poses a security risk. You must change the file\'s permissions to be non-writable.', array('%file' => conf_path() .'/settings.php'));      }    }    else {      $requirements['settings.php'] = array(        'value' => $t('Protected'),      );    }    $requirements['settings.php']['title'] = $t('Configuration file');  }  // Report cron status.  if ($phase == 'runtime') {    // Cron warning threshold defaults to two days.    $threshold_warning = variable_get('cron_threshold_warning', 172800);    // Cron error threshold defaults to two weeks.    $threshold_error = variable_get('cron_threshold_error', 1209600);    // Cron configuration help text.    $help = $t('For more information, see the online handbook entry for <a href="@cron-handbook">configuring cron jobs</a>.', array('@cron-handbook' => 'http://drupal.org/cron'));    // Determine when cron last ran. If never, use the install time to    // determine the warning or error status.    $cron_last = variable_get('cron_last', NULL);    $never_run = FALSE;    if (!is_numeric($cron_last)) {      $never_run = TRUE;      $cron_last = variable_get('install_time', 0);    }    // Determine severity based on time since cron last ran.    $severity = REQUIREMENT_OK;    if (time() - $cron_last > $threshold_error) {      $severity = REQUIREMENT_ERROR;    }    else if ($never_run || (time() - $cron_last > $threshold_warning)) {      $severity = REQUIREMENT_WARNING;    }    // If cron hasn't been run, and the user is viewing the main    // administration page, instead of an error, we display a helpful reminder    // to configure cron jobs.    if ($never_run && $severity != REQUIREMENT_ERROR && $_GET['q'] == 'admin' && user_access('administer site configuration')) {      drupal_set_message($t('Cron has not run. Please visit the <a href="@status">status report</a> for more information.', array('@status' => url('admin/reports/status'))));    }    // Set summary and description based on values determined above.    if ($never_run) {      $summary = $t('Never run');      $description = $t('Cron has not run.') .' '. $help;    }    else {      $summary = $t('Last run !time ago', array('!time' => format_interval(time() - $cron_last)));      $description = '';      if ($severity != REQUIREMENT_OK) {        $description = $t('Cron has not run recently.') .' '. $help;      }    }    $requirements['cron'] = array(      'title' => $t('Cron maintenance tasks'),      'severity' => $severity,      'value' => $summary,      'description' => $description .' '. $t('You can <a href="@cron">run cron manually</a>.', array('@cron' => url('admin/reports/status/run-cron'))),    );  }  // Test files directory  $directory = file_directory_path();  $requirements['file system'] = array(    'title' => $t('File system'),  );  // For installer, create the directory if possible.  if ($phase == 'install' && !is_dir($directory) && @mkdir($directory)) {    @chmod($directory, 0775); // Necessary for non-webserver users.  }  $is_writable = is_writable($directory);  $is_directory = is_dir($directory);  if (!$is_writable || !$is_directory) {    $description = '';    $requirements['file system']['value'] = $t('Not writable');    if (!$is_directory) {      $error = $t('The directory %directory does not exist.', array('%directory' => $directory));    }    else {      $error = $t('The directory %directory is not writable.', array('%directory' => $directory));    }    // The files directory requirement check is done only during install and runtime.    if ($phase == 'runtime') {      $description = $error .' '. $t('You may need to set the correct directory at the <a href="@admin-file-system">file system settings page</a> or change the current directory\'s permissions so that it is writable.', array('@admin-file-system' => url('admin/settings/file-system')));    }    elseif ($phase == 'install') {      // For the installer UI, we need different wording. 'value' will      // be treated as version, so provide none there.      $description = $error .' '. $t('An automated attempt to create this directory failed, possibly due to a permissions problem. To proceed with the installation, either create the directory and modify its permissions manually, or ensure that the installer has the permissions to create it automatically. For more information, please see INSTALL.txt or the <a href="@handbook_url">on-line handbook</a>.', array('@handbook_url' => 'http://drupal.org/server-permissions'));      $requirements['file system']['value'] = '';    }    if (!empty($description)) {      $requirements['file system']['description'] = $description;      $requirements['file system']['severity'] = REQUIREMENT_ERROR;    }  }  else {    if (variable_get('file_downloads', FILE_DOWNLOADS_PUBLIC) == FILE_DOWNLOADS_PUBLIC) {      $requirements['file system']['value'] = $t('Writable (<em>public</em> download method)');    }    else {      $requirements['file system']['value'] = $t('Writable (<em>private</em> download method)');    }  }  // See if updates are available in update.php.  if ($phase == 'runtime') {    $requirements['update'] = array(      'title' => $t('Database updates'),      'severity' => REQUIREMENT_OK,      'value' => $t('Up to date'),    );    // Check installed modules.    foreach (module_list() as $module) {      $updates = drupal_get_schema_versions($module);      if ($updates !== FALSE) {        $default = drupal_get_installed_schema_version($module);        if (max($updates) > $default) {          $requirements['update']['severity'] = REQUIREMENT_ERROR;          $requirements['update']['value'] = $t('Out of date');          $requirements['update']['description'] = $t('Some modules have database schema updates to install. You should run the <a href="@update">database update script</a> immediately.', array('@update' => base_path() .'update.php'));          break;        }      }    }  }  // Verify the update.php access setting  if ($phase == 'runtime') {    if (!empty($GLOBALS['update_free_access'])) {      $requirements['update access'] = array(        'value' => $t('Not protected'),        'severity' => REQUIREMENT_ERROR,        'description' => $t('The update.php script is accessible to everyone without authentication check, which is a security risk. You must change the $update_free_access value in your settings.php back to FALSE.'),      );    }    else {      $requirements['update access'] = array(        'value' => $t('Protected'),      );    }    $requirements['update access']['title'] = $t('Access to update.php');  }  // Test Unicode library  include_once './includes/unicode.inc';  $requirements = array_merge($requirements, unicode_requirements());  if ($phase == 'runtime') {    // Check for update status module.    if (!module_exists('update')) {      $requirements['update status'] = array(        'value' => $t('Not enabled'),        'severity' => REQUIREMENT_WARNING,        'description' => $t('Update notifications are not enabled. It is <strong>highly recommended</strong> that you enable the update status module from the <a href="@module">module administration page</a> in order to stay up-to-date on new releases. For more information please read the <a href="@update">Update status handbook page</a>.', array('@update' => 'http://drupal.org/handbook/modules/update', '@module' => url('admin/build/modules'))),      );    }    else {      $requirements['update status'] = array(        'value' => $t('Enabled'),      );    }    $requirements['update status']['title'] = $t('Update notifications');    // Check that Drupal can issue HTTP requests.    if (variable_get('drupal_http_request_fails', TRUE) && !system_check_http_request()) {      $requirements['http requests'] = array(        'title' => $t('HTTP request status'),        'value' => $t('Fails'),        'severity' => REQUIREMENT_ERROR,        'description' => $t('Your system or network configuration does not allow Drupal to access web pages, resulting in reduced functionality. This could be due to your webserver configuration or PHP settings, and should be resolved in order to download information about available updates, fetch aggregator feeds, sign in via OpenID, or use other network-dependent services.'),      );    }  }  return $requirements;}/** * Implementation of hook_install(). */function system_install() {  if ($GLOBALS['db_type'] == 'pgsql') {    // We create some custom types and functions using global names instead of    // prefixing them like we do with table names. If this function is ever    // called again (for example, by the test framework when creating prefixed    // test databases), the global names will already exist. We therefore avoid    // trying to create them again in that case.    // Create unsigned types.    if (!db_result(db_query("SELECT COUNT(*) FROM pg_constraint WHERE conname = 'int_unsigned_check'"))) {      db_query("CREATE DOMAIN int_unsigned integer CHECK (VALUE >= 0)");    }    if (!db_result(db_query("SELECT COUNT(*) FROM pg_constraint WHERE conname = 'smallint_unsigned_check'"))) {      db_query("CREATE DOMAIN smallint_unsigned smallint CHECK (VALUE >= 0)");    }    if (!db_result(db_query("SELECT COUNT(*) FROM pg_constraint WHERE conname = 'bigint_unsigned_check'"))) {      db_query("CREATE DOMAIN bigint_unsigned bigint CHECK (VALUE >= 0)");    }    // Create functions.    db_query('CREATE OR REPLACE FUNCTION "greatest"(numeric, numeric) RETURNS numeric AS      \'SELECT CASE WHEN (($1 > $2) OR ($2 IS NULL)) THEN $1 ELSE $2 END;\'      LANGUAGE \'sql\''    );    db_query('CREATE OR REPLACE FUNCTION "greatest"(numeric, numeric, numeric) RETURNS numeric AS      \'SELECT greatest($1, greatest($2, $3));\'      LANGUAGE \'sql\''    );    if (!db_result(db_query("SELECT COUNT(*) FROM pg_proc WHERE proname = 'rand'"))) {      db_query('CREATE OR REPLACE FUNCTION "rand"() RETURNS float AS        \'SELECT random();\'        LANGUAGE \'sql\''      );    }    if (!db_result(db_query("SELECT COUNT(*) FROM pg_proc WHERE proname = 'concat'"))) {      db_query('CREATE OR REPLACE FUNCTION "concat"(text, text) RETURNS text AS        \'SELECT $1 || $2;\'        LANGUAGE \'sql\''      );    }    db_query('CREATE OR REPLACE FUNCTION "if"(boolean, text, text) RETURNS text AS      \'SELECT CASE WHEN $1 THEN $2 ELSE $3 END;\'      LANGUAGE \'sql\''    );    db_query('CREATE OR REPLACE FUNCTION "if"(boolean, integer, integer) RETURNS integer AS      \'SELECT CASE WHEN $1 THEN $2 ELSE $3 END;\'      LANGUAGE \'sql\''    );  }  // Create tables.  $modules = array('system', 'filter', 'block', 'user', 'node', 'comment', 'taxonomy');  foreach ($modules as $module) {    drupal_install_schema($module);  }  // Clear out module list and hook implementation statics before calling  // system_theme_data().  module_list(TRUE, FALSE);  module_implements('', FALSE, TRUE);  // Load system theme data appropriately.  system_theme_data();  // Inserting uid 0 here confuses MySQL -- the next user might be created as  // uid 2 which is not what we want. So we insert the first user here, the  // anonymous user. uid is 1 here for now, but very soon it will be changed  // to 0.  db_query("INSERT INTO {users} (name, mail) VALUES('%s', '%s')", '', '');  // We need some placeholders here as name and mail are uniques and data is  // presumed to be a serialized array. Install will change uid 1 immediately  // anyways. So we insert the superuser here, the uid is 2 here for now, but  // very soon it will be changed to 1.  db_query("INSERT INTO {users} (name, mail, created, data) VALUES('%s', '%s', %d, '%s')", 'placeholder-for-uid-1', 'placeholder-for-uid-1', time(), serialize(array()));  // This sets the above two users uid 0 (anonymous). We avoid an explicit 0  // otherwise MySQL might insert the next auto_increment value.  db_query("UPDATE {users} SET uid = uid - uid WHERE name = '%s'", '');  // This sets uid 1 (superuser). We skip uid 2 but that's not a big problem.  db_query("UPDATE {users} SET uid = 1 WHERE name = '%s'", 'placeholder-for-uid-1');  db_query("INSERT INTO {role} (name) VALUES ('%s')", 'anonymous user');  db_query("INSERT INTO {role} (name) VALUES ('%s')", 'authenticated user');  db_query("INSERT INTO {permission} (rid, perm, tid) VALUES (%d, '%s', %d)", 1, 'access content', 0);  db_query("INSERT INTO {permission} (rid, perm, tid) VALUES (%d, '%s', %d)", 2, 'access comments, access content, post comments, post comments without approval', 0);  db_query("INSERT INTO {variable} (name, value) VALUES ('%s', '%s')", 'theme_default', 's:7:"garland";');  db_query("UPDATE {system} SET status = %d WHERE type = '%s' AND name = '%s'", 1, 'theme', 'garland');  db_query("INSERT INTO {blocks} (module, delta, theme, status, weight, region, pages, cache) VALUES ('%s', '%s', '%s', %d, %d, '%s', '%s', %d)", 'user', '0', 'garland', 1, 0, 'left', '', -1);  db_query("INSERT INTO {blocks} (module, delta, theme, status, weight, region, pages, cache) VALUES ('%s', '%s', '%s', %d, %d, '%s', '%s', %d)", 'user', '1', 'garland', 1, 0, 'left', '', -1);  db_query("INSERT INTO {blocks} (module, delta, theme, status, weight, region, pages, cache) VALUES ('%s', '%s', '%s', %d, %d, '%s', '%s', %d)", 'system', '0', 'garland', 1, 10, 'footer', '', -1);  db_query("INSERT INTO {node_access} (nid, gid, realm, grant_view, grant_update, grant_delete) VALUES (%d, %d, '%s', %d, %d, %d)", 0, 0, 'all', 1, 0, 0);  // Add input formats.  db_query("INSERT INTO {filter_formats} (name, roles, cache) VALUES ('%s', '%s', %d)", 'Filtered HTML', ',1,2,', 1);  db_query("INSERT INTO {filter_formats} (name, roles, cache) VALUES ('%s', '%s', %d)", 'Full HTML', '', 1);  // Enable filters for each input format.  // Filtered HTML:  // URL filter.  db_query("INSERT INTO {filters} (format, module, delta, weight) VALUES (%d, '%s', %d, %d)", 1, 'filter', 2, 0);  // HTML filter.  db_query("INSERT INTO {filters} (format, module, delta, weight) VALUES (%d, '%s', %d, %d)", 1, 'filter', 0, 1);  // Line break filter.  db_query("INSERT INTO {filters} (format, module, delta, weight) VALUES (%d, '%s', %d, %d)", 1, 'filter', 1, 2);  // HTML corrector filter.  db_query("INSERT INTO {filters} (format, module, delta, weight) VALUES (%d, '%s', %d, %d)", 1, 'filter', 3, 10);  // Full HTML:  // URL filter.  db_query("INSERT INTO {filters} (format, module, delta, weight) VALUES (%d, '%s', %d, %d)", 2, 'filter', 2, 0);  // Line break filter.  db_query("INSERT INTO {filters} (format, module, delta, weight) VALUES (%d, '%s', %d, %d)", 2, 'filter', 1, 1);  // HTML corrector filter.  db_query("INSERT INTO {filters} (format, module, delta, weight) VALUES (%d, '%s', %d, %d)", 2, 'filter', 3, 10);  db_query("INSERT INTO {variable} (name, value) VALUES ('%s','%s')", 'filter_html_1', 'i:1;');  db_query("INSERT INTO {variable} (name, value) VALUES ('%s', '%s')", 'node_options_forum', 'a:1:{i:0;s:6:"status";}');}/** * Implementation of hook_schema(). */function system_schema() {  // NOTE: {variable} needs to be created before all other tables, as  // some database drivers, e.g. Oracle and DB2, will require variable_get()  // and variable_set() for overcoming some database specific limitations.  $schema['variable'] = array(    'description' => 'Named variable/value pairs created by Drupal core or any other module or theme. All variables are cached in memory at the start of every Drupal request so developers should not be careless about what is stored here.',    'fields' => array(      'name' => array(        'description' => 'The name of the variable.',        'type' => 'varchar',        'length' => 128,        'not null' => TRUE,        'default' => ''),      'value' => array(        'description' => 'The value of the variable.',        'type' => 'text',        'not null' => TRUE,        'size' => 'big'),      ),    'primary key' => array('name'),    );  $schema['actions'] = array(    'description' => 'Stores action information.',    'fields' => array(      'aid' => array(        'description' => 'Primary Key: Unique actions ID.',        'type' => 'varchar',        'length' => 255,        'not null' => TRUE,        'default' => '0'),      'type' => array(        'description' => 'The object that that action acts on (node, user, comment, system or custom types.)',        'type' => 'varchar',        'length' => 32,        'not null' => TRUE,        'default' => ''),      'callback' => array(        'description' => 'The callback function that executes when the action runs.',        'type' => 'varchar',        'length' => 255,        'not null' => TRUE,        'default' => ''),      'parameters' => array(        'description' => 'Parameters to be passed to the callback function.',        'type' => 'text',        'not null' => TRUE,        'size' => 'big'),      'description' => array(        'description' => 'Description of the action.',        'type' => 'varchar',        'length' => 255,        'not null' => TRUE,        'default' => '0'),      ),    'primary key' => array('aid'),    );  $schema['actions_aid'] = array(    'description' => 'Stores action IDs for non-default actions.',    'fields' => array(      'aid' => array(        'description' => 'Primary Key: Unique actions ID.',        'type' => 'serial',        'unsigned' => TRUE,        'not null' => TRUE),      ),    'primary key' => array('aid'),    );  $schema['batch'] = array(    'description' => t('Stores details about batches (processes that run in multiple HTTP requests).'),    'fields' => array(      'bid' => array(        'description' => 'Primary Key: Unique batch ID.',        'type' => 'serial',        'unsigned' => TRUE,        'not null' => TRUE),      'token' => array(        'description' => "A string token generated against the current user's session id and the batch id, used to ensure that only the user who submitted the batch can effectively access it.",        'type' => 'varchar',        'length' => 64,        'not null' => TRUE),      'timestamp' => array(        'description' => 'A Unix timestamp indicating when this batch was submitted for processing. Stale batches are purged at cron time.',        'type' => 'int',        'not null' => TRUE),      'batch' => array(        'description' => 'A serialized array containing the processing data for the batch.',        'type' => 'text',        'not null' => FALSE,        'size' => 'big')      ),    'primary key' => array('bid'),    'indexes' => array('token' => array('token')),    );  $schema['cache'] = array(    'description' => 'Generic cache table for caching things not separated out into their own tables. Contributed modules may also use this to store cached items.',    'fields' => array(      'cid' => array(        'description' => 'Primary Key: Unique cache ID.',        'type' => 'varchar',        'length' => 255,        'not null' => TRUE,        'default' => ''),      'data' => array(        'description' => 'A collection of data to cache.',        'type' => 'blob',        'not null' => FALSE,        'size' => 'big'),      'expire' => array(        'description' => 'A Unix timestamp indicating when the cache entry should expire, or 0 for never.',        'type' => 'int',        'not null' => TRUE,        'default' => 0),      'created' => array(        'description' => 'A Unix timestamp indicating when the cache entry was created.',        'type' => 'int',        'not null' => TRUE,        'default' => 0),      'headers' => array(        'description' => 'Any custom HTTP headers to be added to cached data.',        'type' => 'text',        'not null' => FALSE),      'serialized' => array(        'description' => 'A flag to indicate whether content is serialized (1) or not (0).',        'type' => 'int',        'size' => 'small',        'not null' => TRUE,        'default' => 0)      ),    'indexes' => array('expire' => array('expire')),    'primary key' => array('cid'),    );  $schema['cache_form'] = $schema['cache'];  $schema['cache_form']['description'] = 'Cache table for the form system to store recently built forms and their storage data, to be used in subsequent page requests.';  $schema['cache_page'] = $schema['cache'];  $schema['cache_page']['description'] = 'Cache table used to store compressed pages for anonymous users, if page caching is enabled.';  $schema['cache_menu'] = $schema['cache'];  $schema['cache_menu']['description'] = 'Cache table for the menu system to store router information as well as generated link trees for various menu/page/user combinations.';  $schema['files'] = array(    'description' => 'Stores information for uploaded files.',    'fields' => array(      'fid' => array(        'description' => 'Primary Key: Unique files ID.',        'type' => 'serial',        'unsigned' => TRUE,        'not null' => TRUE),      'uid' => array(        'description' => 'The {users}.uid of the user who is associated with the file.',        'type' => 'int',        'unsigned' => TRUE,        'not null' => TRUE,        'default' => 0),      'filename' => array(        'description' => 'Name of the file.',        'type' => 'varchar',        'length' => 255,        'not null' => TRUE,        'default' => ''),      'filepath' => array(        'description' => 'Path of the file relative to Drupal root.',        'type' => 'varchar',        'length' => 255,        'not null' => TRUE,        'default' => ''),      'filemime' => array(        'description' => 'The file MIME type.',        'type' => 'varchar',        'length' => 255,        'not null' => TRUE,        'default' => ''),      'filesize' => array(        'description' => 'The size of the file in bytes.',        'type' => 'int',        'unsigned' => TRUE,        'not null' => TRUE,        'default' => 0),      'status' => array(        'description' => 'A flag indicating whether file is temporary (1) or permanent (0).',        'type' => 'int',        'not null' => TRUE,        'default' => 0),      'timestamp' => array(        'description' => 'UNIX timestamp for when the file was added.',        'type' => 'int',        'unsigned' => TRUE,        'not null' => TRUE,        'default' => 0),      ),    'indexes' => array(      'uid' => array('uid'),      'status' => array('status'),      'timestamp' => array('timestamp'),      ),    'primary key' => array('fid'),    );  $schema['flood'] = array(    'description' => 'Flood controls the threshold of events, such as the number of contact attempts.',    'fields' => array(      'fid' => array(        'description' => 'Unique flood event ID.',        'type' => 'serial',        'not null' => TRUE),      'event' => array(        'description' => 'Name of event (e.g. contact).',        'type' => 'varchar',        'length' => 64,        'not null' => TRUE,        'default' => ''),      'hostname' => array(        'description' => 'Hostname of the visitor.',        'type' => 'varchar',        'length' => 128,        'not null' => TRUE,        'default' => ''),      'timestamp' => array(        'description' => 'Timestamp of the event.',        'type' => 'int',        'not null' => TRUE,        'default' => 0)      ),    'primary key' => array('fid'),    'indexes' => array(      'allow' => array('event', 'hostname', 'timestamp'),    ),    );  $schema['history'] = array(    'description' => 'A record of which {users} have read which {node}s.',    'fields' => array(      'uid' => array(        'description' => 'The {users}.uid that read the {node} nid.',        'type' => 'int',        'not null' => TRUE,        'default' => 0),      'nid' => array(        'description' => 'The {node}.nid that was read.',        'type' => 'int',        'not null' => TRUE,        'default' => 0),      'timestamp' => array(        'description' => 'The Unix timestamp at which the read occurred.',        'type' => 'int',        'not null' => TRUE,        'default' => 0)      ),    'primary key' => array('uid', 'nid'),    'indexes' => array(      'nid' => array('nid'),    ),    );  $schema['menu_router'] = array(    'description' => 'Maps paths to various callbacks (access, page and title)',    'fields' => array(      'path' => array(        'description' => 'Primary Key: the Drupal path this entry describes',        'type' => 'varchar',        'length' => 255,        'not null' => TRUE,        'default' => ''),      'load_functions' => array(        'description' => 'A serialized array of function names (like node_load) to be called to load an object corresponding to a part of the current path.',        'type' => 'text',        'not null' => TRUE,),      'to_arg_functions' => array(        'description' => 'A serialized array of function names (like user_uid_optional_to_arg) to be called to replace a part of the router path with another string.',        'type' => 'text',        'not null' => TRUE,),      'access_callback' => array(        'description' => 'The callback which determines the access to this router path. Defaults to user_access.',        'type' => 'varchar',        'length' => 255,        'not null' => TRUE,        'default' => ''),      'access_arguments' => array(        'description' => 'A serialized array of arguments for the access callback.',        'type' => 'text',        'not null' => FALSE),      'page_callback' => array(        'description' => 'The name of the function that renders the page.',        'type' => 'varchar',        'length' => 255,        'not null' => TRUE,        'default' => ''),      'page_arguments' => array(        'description' => 'A serialized array of arguments for the page callback.',        'type' => 'text',        'not null' => FALSE),      'fit' => array(        'description' => 'A numeric representation of how specific the path is.',        'type' => 'int',        'not null' => TRUE,        'default' => 0),      'number_parts' => array(        'description' => 'Number of parts in this router path.',        'type' => 'int',        'not null' => TRUE,        'default' => 0,        'size' => 'small'),      'tab_parent' => array(        'description' => 'Only for local tasks (tabs) - the router path of the parent page (which may also be a local task).',        'type' => 'varchar',        'length' => 255,        'not null' => TRUE,        'default' => ''),      'tab_root' => array(        'description' => 'Router path of the closest non-tab parent page. For pages that are not local tasks, this will be the same as the path.',        'type' => 'varchar',        'length' => 255,        'not null' => TRUE,        'default' => ''),      'title' => array(        'description' => 'The title for the current page, or the title for the tab if this is a local task.',        'type' => 'varchar',        'length' => 255,        'not null' => TRUE,        'default' => ''),      'title_callback' => array(        'description' => 'A function which will alter the title. Defaults to t()',        'type' => 'varchar',        'length' => 255,        'not null' => TRUE,        'default' => ''),      'title_arguments' => array(        'description' => 'A serialized array of arguments for the title callback. If empty, the title will be used as the sole argument for the title callback.',        'type' => 'varchar',        'length' => 255,        'not null' => TRUE,        'default' => ''),      'type' => array(        'description' => 'Numeric representation of the type of the menu item, like MENU_LOCAL_TASK.',        'type' => 'int',        'not null' => TRUE,        'default' => 0),      'block_callback' => array(        'description' => 'Name of a function used to render the block on the system administration page for this item.',        'type' => 'varchar',        'length' => 255,        'not null' => TRUE,        'default' => ''),      'description' => array(        'description' => 'A description of this item.',        'type' => 'text',        'not null' => TRUE),      'position' => array(        'description' => 'The position of the block (left or right) on the system administration page for this item.',        'type' => 'varchar',        'length' => 255,        'not null' => TRUE,        'default' => ''),      'weight' => array(        'description' => 'Weight of the element. Lighter weights are higher up, heavier weights go down.',        'type' => 'int',        'not null' => TRUE,        'default' => 0),      'file' => array(        'description' => 'The file to include for this element, usually the page callback function lives in this file.',        'type' => 'text',        'size' => 'medium')      ),    'indexes' => array(      'fit' => array('fit'),      'tab_parent' => array('tab_parent'),      'tab_root_weight_title' => array(array('tab_root', 64), 'weight', 'title'),            ),    'primary key' => array('path'),    );  $schema['menu_links'] = array(    'description' => 'Contains the individual links within a menu.',    'fields' => array(     'menu_name' => array(        'description' => "The menu name. All links with the same menu name (such as 'navigation') are part of the same menu.",        'type' => 'varchar',        'length' => 32,        'not null' => TRUE,        'default' => ''),      'mlid' => array(        'description' => 'The menu link ID (mlid) is the integer primary key.',        'type' => 'serial',        'unsigned' => TRUE,        'not null' => TRUE),      'plid' => array(        'description' => 'The parent link ID (plid) is the mlid of the link above in the hierarchy, or zero if the link is at the top level in its menu.',        'type' => 'int',        'unsigned' => TRUE,        'not null' => TRUE,        'default' => 0),      'link_path' => array(        'description' => 'The Drupal path or external path this link points to.',        'type' => 'varchar',        'length' => 255,        'not null' => TRUE,        'default' => ''),      'router_path' => array(        'description' => 'For links corresponding to a Drupal path (external = 0), this connects the link to a {menu_router}.path for joins.',        'type' => 'varchar',        'length' => 255,        'not null' => TRUE,        'default' => ''),      'link_title' => array(      'description' => 'The text displayed for the link, which may be modified by a title callback stored in {menu_router}.',        'type' => 'varchar',        'length' => 255,        'not null' => TRUE,        'default' => ''),      'options' => array(        'description' => 'A serialized array of options to be passed to the url() or l() function, such as a query string or HTML attributes.',        'type' => 'text',        'not null' => FALSE),      'module' => array(        'description' => 'The name of the module that generated this link.',        'type' => 'varchar',        'length' => 255,        'not null' => TRUE,        'default' => 'system'),      'hidden' => array(        'description' => 'A flag for whether the link should be rendered in menus. (1 = a disabled menu item that may be shown on admin screens, -1 = a menu callback, 0 = a normal, visible link)',        'type' => 'int',        'not null' => TRUE,        'default' => 0,        'size' => 'small'),      'external' => array(        'description' => 'A flag to indicate if the link points to a full URL starting with a protocol, like http:// (1 = external, 0 = internal).',        'type' => 'int',        'not null' => TRUE,        'default' => 0,        'size' => 'small'),      'has_children' => array(        'description' => 'Flag indicating whether any links have this link as a parent (1 = children exist, 0 = no children).',        'type' => 'int',        'not null' => TRUE,        'default' => 0,        'size' => 'small'),      'expanded' => array(        'description' => 'Flag for whether this link should be rendered as expanded in menus - expanded links always have their child links displayed, instead of only when the link is in the active trail (1 = expanded, 0 = not expanded)',        'type' => 'int',        'not null' => TRUE,        'default' => 0,        'size' => 'small'),      'weight' => array(        'description' => 'Link weight among links in the same menu at the same depth.',        'type' => 'int',        'not null' => TRUE,        'default' => 0),      'depth' => array(        'description' => 'The depth relative to the top level. A link with plid == 0 will have depth == 1.',        'type' => 'int',        'not null' => TRUE,        'default' => 0,        'size' => 'small'),      'customized' => array(        'description' => 'A flag to indicate that the user has manually created or edited the link (1 = customized, 0 = not customized).',        'type' => 'int',        'not null' => TRUE,        'default' => 0,        'size' => 'small'),      'p1' => array(        'description' => 'The first mlid in the materialized path. If N = depth, then pN must equal the mlid. If depth > 1 then p(N-1) must equal the plid. All pX where X > depth must equal zero. The columns p1 .. p9 are also called the parents.',        'type' => 'int',        'unsigned' => TRUE,        'not null' => TRUE,        'default' => 0),      'p2' => array(        'description' => 'The second mlid in the materialized path. See p1.',        'type' => 'int',        'unsigned' => TRUE,        'not null' => TRUE,        'default' => 0),      'p3' => array(        'description' => 'The third mlid in the materialized path. See p1.',        'type' => 'int',        'unsigned' => TRUE,        'not null' => TRUE,        'default' => 0),      'p4' => array(        'description' => 'The fourth mlid in the materialized path. See p1.',        'type' => 'int',        'unsigned' => TRUE,        'not null' => TRUE,        'default' => 0),      'p5' => array(        'description' => 'The fifth mlid in the materialized path. See p1.',        'type' => 'int',        'unsigned' => TRUE,        'not null' => TRUE,        'default' => 0),      'p6' => array(        'description' => 'The sixth mlid in the materialized path. See p1.',        'type' => 'int',        'unsigned' => TRUE,        'not null' => TRUE,        'default' => 0),      'p7' => array(        'description' => 'The seventh mlid in the materialized path. See p1.',        'type' => 'int',        'unsigned' => TRUE,        'not null' => TRUE,        'default' => 0),      'p8' => array(        'description' => 'The eighth mlid in the materialized path. See p1.',        'type' => 'int',        'unsigned' => TRUE,        'not null' => TRUE,        'default' => 0),      'p9' => array(        'description' => 'The ninth mlid in the materialized path. See p1.',        'type' => 'int',        'unsigned' => TRUE,        'not null' => TRUE,        'default' => 0),      'updated' => array(        'description' => 'Flag that indicates that this link was generated during the update from Drupal 5.',        'type' => 'int',        'not null' => TRUE,        'default' => 0,        'size' => 'small'),      ),    'indexes' => array(      'path_menu' => array(array('link_path', 128), 'menu_name'),      'menu_plid_expand_child' => array(        'menu_name', 'plid', 'expanded', 'has_children'),      'menu_parents' => array(        'menu_name', 'p1', 'p2', 'p3', 'p4', 'p5', 'p6', 'p7', 'p8', 'p9'),      'router_path' => array(array('router_path', 128)),      ),    'primary key' => array('mlid'),    );  $schema['semaphore'] = array(    'description' => 'Table for holding semaphores, locks, flags, etc. that cannot be stored as Drupal variables since they must not be cached.',    'fields' => array(      'name' => array(        'description' => 'Primary Key: Unique name.',        'type' => 'varchar',        'length' => 255,        'not null' => TRUE,        'default' => ''),      'value' => array(        'description' => 'A value.',        'type' => 'varchar',        'length' => 255,        'not null' => TRUE,        'default' => ''),      'expire' => array(        'description' => 'A Unix timestamp with microseconds indicating when the semaphore should expire.',        'type' => 'float',        'size' => 'big',        'not null' => TRUE),      ),    'indexes' => array('expire' => array('expire')),    'primary key' => array('name'),    );  $schema['sessions'] = array(    'description' => "Drupal's session handlers read and write into the sessions table. Each record represents a user session, either anonymous or authenticated.",    'fields' => array(      'uid' => array(        'description' => 'The {users}.uid corresponding to a session, or 0 for anonymous user.',        'type' => 'int',        'unsigned' => TRUE,        'not null' => TRUE),      'sid' => array(        'description' => "Primary key: A session ID. The value is generated by PHP's Session API.",        'type' => 'varchar',        'length' => 64,        'not null' => TRUE,        'default' => ''),      'hostname' => array(        'description' => 'The IP address that last used this session ID (sid).',        'type' => 'varchar',        'length' => 128,        'not null' => TRUE,        'default' => ''),      'timestamp' => array(        'description' => 'The Unix timestamp when this session last requested a page. Old records are purged by PHP automatically.',        'type' => 'int',        'not null' => TRUE,        'default' => 0),      'cache' => array(        'description' => "The time of this user's last post. This is used when the site has specified a minimum_cache_lifetime. See cache_get().",        'type' => 'int',        'not null' => TRUE,        'default' => 0),      'session' => array(        'description' => 'The serialized contents of $_SESSION, an array of name/value pairs that persists across page requests by this session ID. Drupal loads $_SESSION from here at the start of each request and saves it at the end.',        'type' => 'text',        'not null' => FALSE,        'size' => 'big')      ),    'primary key' => array('sid'),    'indexes' => array(      'timestamp' => array('timestamp'),      'uid' => array('uid')      ),    );  $schema['system'] = array(    'description' => "A list of all modules, themes, and theme engines that are or have been installed in Drupal's file system.",    'fields' => array(      'filename' => array(        'description' => 'The path of the primary file for this item, relative to the Drupal root; e.g. modules/node/node.module.',        'type' => 'varchar',        'length' => 255,        'not null' => TRUE,        'default' => ''),      'name' => array(        'description' => 'The name of the item; e.g. node.',        'type' => 'varchar',        'length' => 255,        'not null' => TRUE,        'default' => ''),      'type' => array(        'description' => 'The type of the item, either module, theme, or theme_engine.',        'type' => 'varchar',        'length' => 255,        'not null' => TRUE,        'default' => ''),      'owner' => array(        'description' => "A theme's 'parent'. Can be either a theme or an engine.",        'type' => 'varchar',        'length' => 255,        'not null' => TRUE,        'default' => ''),      'status' => array(        'description' => 'Boolean indicating whether or not this item is enabled.',        'type' => 'int',        'not null' => TRUE,        'default' => 0),      'throttle' => array(        'description' => 'Boolean indicating whether this item is disabled when the throttle.module disables throttleable items.',        'type' => 'int',        'not null' => TRUE,        'default' => 0,        'size' => 'tiny'),      'bootstrap' => array(        'description' => "Boolean indicating whether this module is loaded during Drupal's early bootstrapping phase (e.g. even before the page cache is consulted).",        'type' => 'int',        'not null' => TRUE,        'default' => 0),      'schema_version' => array(        'description' => "The module's database schema version number. -1 if the module is not installed (its tables do not exist); 0 or the largest N of the module's hook_update_N() function that has either been run or existed when the module was first installed.",        'type' => 'int',        'not null' => TRUE,        'default' => -1,        'size' => 'small'),      'weight' => array(        'description' => "The order in which this module's hooks should be invoked relative to other modules. Equal-weighted modules are ordered by name.",        'type' => 'int',        'not null' => TRUE,        'default' => 0),      'info' => array(        'description' => "A serialized array containing information from the module's .info file; keys can include name, description, package, version, core, dependencies, dependents, and php.",        'type' => 'text',        'not null' => FALSE)      ),    'primary key' => array('filename'),    'indexes' =>      array(        'modules' => array(array('type', 12), 'status', 'weight', 'filename'),        'bootstrap' => array(array('type', 12), 'status', 'bootstrap', 'weight', 'filename'),        'type_name' => array(array('type', 12), 'name'),      ),    );  $schema['url_alias'] = array(    'description' => 'A list of URL aliases for Drupal paths; a user may visit either the source or destination path.',    'fields' => array(      'pid' => array(        'description' => 'A unique path alias identifier.',        'type' => 'serial',        'unsigned' => TRUE,        'not null' => TRUE),      'src' => array(        'description' => 'The Drupal path this alias is for; e.g. node/12.',        'type' => 'varchar',        'length' => 128,        'not null' => TRUE,        'default' => ''),      'dst' => array(        'description' => 'The alias for this path; e.g. title-of-the-story.',        'type' => 'varchar',        'length' => 128,        'not null' => TRUE,        'default' => ''),      'language' => array(        'description' => 'The language this alias is for; if blank, the alias will be used for unknown languages. Each Drupal path can have an alias for each supported language.',        'type' => 'varchar',        'length' => 12,        'not null' => TRUE,        'default' => '')      ),    'unique keys' => array('dst_language_pid' => array('dst', 'language', 'pid')),    'primary key' => array('pid'),    'indexes' => array('src_language_pid' => array('src', 'language', 'pid')),    );  return $schema;}// Updates for core.function system_update_last_removed() {  return 1021;}/** * @defgroup updates-5.x-extra Extra system updates for 5.x * @{ *//** * Add index on users created column. */function system_update_1022() {  $ret = array();  db_add_index($ret, 'users', 'created', array('created'));  // Also appears as system_update_6004(). Ensure we don't update twice.  variable_set('system_update_1022', TRUE);  return $ret;}/** * @} End of "defgroup updates-5.x-extra" *//** * @defgroup updates-5.x-to-6.x System updates from 5.x to 6.x * @{ *//** * Remove auto_increment from {boxes} to allow adding custom blocks with * visibility settings. */function system_update_6000() {  $ret = array();  switch ($GLOBALS['db_type']) {    case 'mysql':    case 'mysqli':      $max = (int)db_result(db_query('SELECT MAX(bid) FROM {boxes}'));      $ret[] = update_sql('ALTER TABLE {boxes} CHANGE COLUMN bid bid int NOT NULL');      $ret[] = update_sql("REPLACE INTO {sequences} VALUES ('{boxes}_bid', $max)");      break;  }  return $ret;}/** * Add version id column to {term_node} to allow taxonomy module to use revisions. */function system_update_6001() {  $ret = array();  // Add vid to term-node relation.  The schema says it is unsigned.  db_add_field($ret, 'term_node', 'vid', array('type' => 'int', 'unsigned' => TRUE, 'not null' => TRUE, 'default' => 0));  db_drop_primary_key($ret, 'term_node');  db_add_primary_key($ret, 'term_node', array('vid', 'tid', 'nid'));  db_add_index($ret, 'term_node', 'vid', array('vid'));  db_query('UPDATE {term_node} SET vid = (SELECT vid FROM {node} n WHERE {term_node}.nid = n.nid)');  return $ret;}/** * Increase the maximum length of variable names from 48 to 128. */function system_update_6002() {  $ret = array();  db_drop_primary_key($ret, 'variable');  db_change_field($ret, 'variable', 'name', 'name', array('type' => 'varchar', 'length' => 128, 'not null' => TRUE, 'default' => ''));  db_add_primary_key($ret, 'variable', array('name'));  return $ret;}/** * Add index on comments status column. */function system_update_6003() {  $ret = array();  db_add_index($ret, 'comments', 'status', array('status'));  return $ret;}/** * This update used to add an index on users created column (#127941). * However, system_update_1022() does the same thing.  This update * tried to detect if 1022 had already run but failed to do so, * resulting in an "index already exists" error. * * Adding the index here is never necessary.  Sites installed before * 1022 will run 1022, getting the update.  Sites installed on/after 1022 * got the index when the table was first created.  Therefore, this * function is now a no-op. */function system_update_6004() {  return array();}/** * Add language to url_alias table and modify indexes. */function system_update_6005() {  $ret = array();  switch ($GLOBALS['db_type']) {    case 'pgsql':      db_add_column($ret, 'url_alias', 'language', 'varchar(12)', array('default' => "''", 'not null' => TRUE));      // As of system.install:1.85 (before the new language      // subsystem), new installs got a unique key named      // url_alias_dst_key on url_alias.dst.  Unfortunately,      // system_update_162 created a unique key inconsistently named      // url_alias_dst_idx on url_alias.dst (keys should have the _key      // suffix, indexes the _idx suffix).  Therefore, sites installed      // before system_update_162 have a unique key with a different      // name than sites installed after system_update_162().  Now, we      // want to drop the unique key on dst which may have either one      // of two names and create a new unique key on (dst, language).      // There is no way to know which key name exists so we have to      // drop both, causing an SQL error.  Thus, we just hide the      // error and only report the update_sql results that work.      $err = error_reporting(0);      $ret1 = update_sql('DROP INDEX {url_alias}_dst_idx');      if ($ret1['success']) {  $ret[] = $ret1;      }      $ret1 = array();      db_drop_unique_key($ret, 'url_alias', 'dst');      foreach ($ret1 as $r) {  if ($r['success']) {    $ret[] = $r;  }      }      error_reporting($err);      $ret[] = update_sql('CREATE UNIQUE INDEX {url_alias}_dst_language_idx ON {url_alias}(dst, language)');      break;    case 'mysql':    case 'mysqli':      $ret[] = update_sql("ALTER TABLE {url_alias} ADD language varchar(12) NOT NULL default ''");      $ret[] = update_sql("ALTER TABLE {url_alias} DROP INDEX dst");      $ret[] = update_sql("ALTER TABLE {url_alias} ADD UNIQUE dst_language (dst, language)");      break;  }  return $ret;}/** * Drop useless indices on node_counter table. */function system_update_6006() {  $ret = array();  switch ($GLOBALS['db_type']) {    case 'pgsql':      $ret[] = update_sql('DROP INDEX {node_counter}_daycount_idx');      $ret[] = update_sql('DROP INDEX {node_counter}_totalcount_idx');      $ret[] = update_sql('DROP INDEX {node_counter}_timestamp_idx');      break;    case 'mysql':    case 'mysqli':      $ret[] = update_sql("ALTER TABLE {node_counter} DROP INDEX daycount");      $ret[] = update_sql("ALTER TABLE {node_counter} DROP INDEX totalcount");      $ret[] = update_sql("ALTER TABLE {node_counter} DROP INDEX timestamp");      break;  }  return $ret;}/** * Change the severity column in the watchdog table to the new values. */function system_update_6007() {  $ret = array();  $ret[] = update_sql("UPDATE {watchdog} SET severity = ". WATCHDOG_NOTICE ." WHERE severity = 0");  $ret[] = update_sql("UPDATE {watchdog} SET severity = ". WATCHDOG_WARNING ." WHERE severity = 1");  $ret[] = update_sql("UPDATE {watchdog} SET severity = ". WATCHDOG_ERROR ." WHERE severity = 2");  return $ret;}/** * Add info files to themes.  The info and owner columns are added by * update_fix_d6_requirements() in update.php to avoid a large number * of error messages from update.php.  All we need to do here is copy * description to owner and then drop description. */function system_update_6008() {  $ret = array();  $ret[] = update_sql('UPDATE {system} SET owner = description');  db_drop_field($ret, 'system', 'description');  // Rebuild system table contents.  module_rebuild_cache();  system_theme_data();  return $ret;}/** * The PHP filter is now a separate module. */function system_update_6009() {  $ret = array();  // If any input format used the Drupal 5 PHP filter.  if (db_result(db_query("SELECT COUNT(format) FROM {filters} WHERE module = 'filter' AND delta = 1"))) {    // Enable the PHP filter module.    $ret[] = update_sql("UPDATE {system} SET status = 1 WHERE name = 'php' AND type = 'module'");    // Update the input filters.    $ret[] = update_sql("UPDATE {filters} SET delta = 0, module = 'php' WHERE module = 'filter' AND delta = 1");  }  // With the removal of the PHP evaluator filter, the deltas of the line break  // and URL filter have changed.  $ret[] = update_sql("UPDATE {filters} SET delta = 1 WHERE module = 'filter' AND delta = 2");  $ret[] = update_sql("UPDATE {filters} SET delta = 2 WHERE module = 'filter' AND delta = 3");  return $ret;}/** * Add variable replacement for watchdog messages. * * The variables field is NOT NULL and does not have a default value. * Existing log messages should not be translated in the new system, * so we insert 'N;' (serialize(NULL)) as the temporary default but * then remove the default value to match the schema. */function system_update_6010() {  $ret = array();  db_add_field($ret, 'watchdog', 'variables', array('type' => 'text', 'size' => 'big', 'not null' => TRUE, 'initial' => 'N;'));  return $ret;}/** * Add language support to nodes */function system_update_6011() {  $ret = array();  switch ($GLOBALS['db_type']) {    case 'pgsql':      db_add_column($ret, 'node', 'language', 'varchar(12)', array('default' => "''", 'not null' => TRUE));      break;    case 'mysql':    case 'mysqli':      $ret[] = update_sql("ALTER TABLE {node} ADD language varchar(12) NOT NULL default ''");      break;  }  return $ret;}/** * Add serialized field to cache tables.  This is now handled directly * by update.php, so this function is a no-op. */function system_update_6012() {  return array();}/** * Rebuild cache data for theme system changes */function system_update_6013() {  // Rebuild system table contents.  module_rebuild_cache();  system_theme_data();  return array(array('success' => TRUE, 'query' => 'Cache rebuilt.'));}/** * Record that the installer is done, so it is not * possible to run the installer on upgraded sites. */function system_update_6014() {  variable_set('install_task', 'done');  return array(array('success' => TRUE, 'query' => "variable_set('install_task')"));}/** * Add the form cache table. */function system_update_6015() {  $ret = array();  switch ($GLOBALS['db_type']) {    case 'pgsql':      $ret[] = update_sql("CREATE TABLE {cache_form} (        cid varchar(255) NOT NULL default '',        data bytea,        expire int NOT NULL default '0',        created int NOT NULL default '0',        headers text,        serialized smallint NOT NULL default '0',        PRIMARY KEY (cid)    )");      $ret[] = update_sql("CREATE INDEX {cache_form}_expire_idx ON {cache_form} (expire)");      break;    case 'mysql':    case 'mysqli':      $ret[] = update_sql("CREATE TABLE {cache_form} (        cid varchar(255) NOT NULL default '',        data longblob,        expire int NOT NULL default '0',        created int NOT NULL default '0',        headers text,        serialized int(1) NOT NULL default '0',        PRIMARY KEY (cid),        INDEX expire (expire)      ) /*!40100 DEFAULT CHARACTER SET UTF8 */ ");      break;  }  return $ret;}/** * Make {node}'s primary key be nid, change nid,vid to a unique key. * Add primary keys to block, filters, flood, permission, and term_relation. */function system_update_6016() {  $ret = array();  switch ($GLOBALS['db_type']) {    case 'pgsql':      $ret[] = update_sql("ALTER TABLE {node} ADD CONSTRAINT {node}_nid_vid_key UNIQUE (nid, vid)");      db_add_column($ret, 'blocks', 'bid', 'serial');      $ret[] = update_sql("ALTER TABLE {blocks} ADD PRIMARY KEY (bid)");      db_add_column($ret, 'filters', 'fid', 'serial');      $ret[] = update_sql("ALTER TABLE {filters} ADD PRIMARY KEY (fid)");      db_add_column($ret, 'flood', 'fid', 'serial');      $ret[] = update_sql("ALTER TABLE {flood} ADD PRIMARY KEY (fid)");      db_add_column($ret, 'permission', 'pid', 'serial');      $ret[] = update_sql("ALTER TABLE {permission} ADD PRIMARY KEY (pid)");      db_add_column($ret, 'term_relation', 'trid', 'serial');      $ret[] = update_sql("ALTER TABLE {term_relation} ADD PRIMARY KEY (trid)");      db_add_column($ret, 'term_synonym', 'tsid', 'serial');      $ret[] = update_sql("ALTER TABLE {term_synonym} ADD PRIMARY KEY (tsid)");      break;    case 'mysql':    case 'mysqli':      $ret[] = update_sql('ALTER TABLE {node} ADD UNIQUE KEY nid_vid (nid, vid)');      $ret[] = update_sql("ALTER TABLE {blocks} ADD bid int NOT NULL AUTO_INCREMENT PRIMARY KEY");      $ret[] = update_sql("ALTER TABLE {filters} ADD fid int NOT NULL AUTO_INCREMENT PRIMARY KEY");      $ret[] = update_sql("ALTER TABLE {flood} ADD fid int NOT NULL AUTO_INCREMENT PRIMARY KEY");      $ret[] = update_sql("ALTER TABLE {permission} ADD pid int NOT NULL AUTO_INCREMENT PRIMARY KEY");      $ret[] = update_sql("ALTER TABLE {term_relation} ADD trid int NOT NULL AUTO_INCREMENT PRIMARY KEY");      $ret[] = update_sql("ALTER TABLE {term_synonym} ADD tsid int NOT NULL AUTO_INCREMENT PRIMARY KEY");      break;  }  return $ret;}/** * Rename settings related to user.module email notifications. */function system_update_6017() {  $ret = array();  // Maps old names to new ones.  $var_names = array(    'admin'    => 'register_admin_created',    'approval' => 'register_pending_approval',    'welcome'  => 'register_no_approval_required',    'pass'     => 'password_reset',  );  foreach ($var_names as $old => $new) {    foreach (array('_subject', '_body') as $suffix) {      $old_name = 'user_mail_'. $old . $suffix;      $new_name = 'user_mail_'. $new . $suffix;      if ($old_val = variable_get($old_name, FALSE)) {        variable_set($new_name, $old_val);        variable_del($old_name);        $ret[] = array('success' => TRUE, 'query' => "variable_set($new_name)");        $ret[] = array('success' => TRUE, 'query' => "variable_del($old_name)");        if ($old_name == 'user_mail_approval_body') {          drupal_set_message('Saving an old value of the welcome message body for users that are pending administrator approval. However, you should consider modifying this text, since Drupal can now be configured to automatically notify users and send them their login information when their accounts are approved. See the <a href="'. url('admin/user/settings') .'">User settings</a> page for details.');        }      }    }  }  return $ret;}/** * Add HTML corrector to HTML formats or replace the old module if it was in use. */function system_update_6018() {  $ret = array();  // Disable htmlcorrector.module, if it exists and replace its filter.  if (module_exists('htmlcorrector')) {    module_disable(array('htmlcorrector'));    $ret[] = update_sql("UPDATE {filter_formats} SET module = 'filter', delta = 3 WHERE module = 'htmlcorrector'");    $ret[] = array('success' => TRUE, 'query' => 'HTML Corrector module was disabled; this functionality has now been added to core.');    return $ret;  }  // Otherwise, find any format with 'HTML' in its name and add the filter at the end.  $result = db_query("SELECT format, name FROM {filter_formats} WHERE name LIKE '%HTML%'");  while ($format = db_fetch_object($result)) {    $weight = db_result(db_query("SELECT MAX(weight) FROM {filters} WHERE format = %d", $format->format));    db_query("INSERT INTO {filters} (format, module, delta, weight) VALUES (%d, '%s', %d, %d)", $format->format, 'filter', 3, max(10, $weight + 1));    $ret[] = array('success' => TRUE, 'query' => "HTML corrector filter added to the '". $format->name ."' input format.");  }  return $ret;}/** * Reconcile small differences in the previous, manually created mysql * and pgsql schemas so they are the same and can be represented by a * single schema structure. * * Note that the mysql and pgsql cases make different changes.  This * is because each schema needs to be tweaked in different ways to * conform to the new schema structure.  Also, since they operate on * tables defined by many optional core modules which may not ever * have been installed, they must test each table for existence.  If * the modules are first installed after this update exists the tables * will be created from the schema structure and will start out * correct. */function system_update_6019() {  $ret = array();  switch ($GLOBALS['db_type']) {    case 'pgsql':      // Remove default ''.      if (db_table_exists('aggregator_feed')) {        db_field_set_no_default($ret, 'aggregator_feed', 'description');        db_field_set_no_default($ret, 'aggregator_feed', 'image');      }      db_field_set_no_default($ret, 'blocks', 'pages');      if (db_table_exists('contact')) {        db_field_set_no_default($ret, 'contact', 'recipients');        db_field_set_no_default($ret, 'contact', 'reply');      }      db_field_set_no_default($ret, 'watchdog', 'location');      db_field_set_no_default($ret, 'node_revisions', 'body');      db_field_set_no_default($ret, 'node_revisions', 'teaser');      db_field_set_no_default($ret, 'node_revisions', 'log');      // Update from pgsql 'float' (which means 'double precision') to      // schema 'float' (which in pgsql means 'real').      if (db_table_exists('search_index')) {        db_change_field($ret, 'search_index', 'score', 'score', array('type' => 'float'));      }      if (db_table_exists('search_total')) {        db_change_field($ret, 'search_total', 'count', 'count', array('type' => 'float'));      }      // Replace unique index dst_language with a unique constraint.  The      // result is the same but the unique key fits our current schema      // structure.  Also, the postgres documentation implies that      // unique constraints are preferable to unique indexes.  See      // http://www.postgresql.org/docs/8.2/interactive/indexes-unique.html.      if (db_table_exists('url_alias')) {        db_drop_index($ret, 'url_alias', 'dst_language');        db_add_unique_key($ret, 'url_alias', 'dst_language',          array('dst', 'language'));      }      // Fix term_node pkey: mysql and pgsql code had different orders.      if (db_table_exists('term_node')) {        db_drop_primary_key($ret, 'term_node');        db_add_primary_key($ret, 'term_node', array('vid', 'tid', 'nid'));      }      // Make boxes.bid unsigned.      db_drop_primary_key($ret, 'boxes');      db_change_field($ret, 'boxes', 'bid', 'bid', array('type' => 'serial', 'unsigned' => TRUE, 'not null' => TRUE), array('primary key' => array('bid')));      // Fix primary key      db_drop_primary_key($ret, 'node');      db_add_primary_key($ret, 'node', array('nid'));      break;    case 'mysql':    case 'mysqli':      // Rename key 'link' to 'url'.      if (db_table_exists('aggregator_feed')) {        db_drop_unique_key($ret, 'aggregator_feed', 'link');        db_add_unique_key($ret, 'aggregator_feed', 'url', array('url'));      }      // Change to size => small.      if (db_table_exists('boxes')) {        db_change_field($ret, 'boxes', 'format', 'format', array('type' => 'int', 'size' => 'small', 'not null' => TRUE, 'default' => 0));      }      // Change to size => small.      // Rename index 'lid' to 'nid'.      if (db_table_exists('comments')) {        db_change_field($ret, 'comments', 'format', 'format', array('type' => 'int', 'size' => 'small', 'not null' => TRUE, 'default' => 0));        db_drop_index($ret, 'comments', 'lid');        db_add_index($ret, 'comments', 'nid', array('nid'));      }      // Change to size => small.      db_change_field($ret, 'cache', 'serialized', 'serialized', array('type' => 'int', 'size' => 'small', 'not null' => TRUE, 'default' => 0));      db_change_field($ret, 'cache_filter', 'serialized', 'serialized', array('type' => 'int', 'size' => 'small', 'not null' => TRUE, 'default' => 0));      db_change_field($ret, 'cache_page', 'serialized', 'serialized', array('type' => 'int', 'size' => 'small', 'not null' => TRUE, 'default' => 0));      db_change_field($ret, 'cache_form', 'serialized', 'serialized', array('type' => 'int', 'size' => 'small', 'not null' => TRUE, 'default' => 0));      // Remove default => 0, set auto increment.      $new_uid = 1 + db_result(db_query('SELECT MAX(uid) FROM {users}'));      $ret[] = update_sql('UPDATE {users} SET uid = '. $new_uid .' WHERE uid = 0');      db_drop_primary_key($ret, 'users');      db_change_field($ret, 'users', 'uid', 'uid', array('type' => 'serial', 'unsigned' => TRUE, 'not null' => TRUE), array('primary key' => array('uid')));      $ret[] = update_sql('UPDATE {users} SET uid = 0 WHERE uid = '. $new_uid);      // Special field names.      $map = array('node_revisions' => 'vid');      // Make sure these tables have proper auto_increment fields.      foreach (array('boxes', 'files', 'node', 'node_revisions') as $table) {        $field = isset($map[$table]) ? $map[$table] : $table[0] .'id';        db_drop_primary_key($ret, $table);        db_change_field($ret, $table, $field, $field, array('type' => 'serial', 'unsigned' => TRUE, 'not null' => TRUE), array('primary key' => array($field)));      }      break;  }  return $ret;}/** * Create the tables for the new menu system. */function system_update_6020() {  $ret = array();  $schema['menu_router'] = array(    'fields' => array(      'path'             => array('type' => 'varchar', 'length' => 255, 'not null' => TRUE, 'default' => ''),      'load_functions'   => array('type' => 'varchar', 'length' => 255, 'not null' => TRUE, 'default' => ''),      'to_arg_functions' => array('type' => 'varchar', 'length' => 255, 'not null' => TRUE, 'default' => ''),      'access_callback'  => array('type' => 'varchar', 'length' => 255, 'not null' => TRUE, 'default' => ''),      'access_arguments' => array('type' => 'text', 'not null' => FALSE),      'page_callback'    => array('type' => 'varchar', 'length' => 255, 'not null' => TRUE, 'default' => ''),      'page_arguments'   => array('type' => 'text', 'not null' => FALSE),      'fit'              => array('type' => 'int', 'not null' => TRUE, 'default' => 0),      'number_parts'     => array('type' => 'int', 'not null' => TRUE, 'default' => 0, 'size' => 'small'),      'tab_parent'       => array('type' => 'varchar', 'length' => 255, 'not null' => TRUE, 'default' => ''),      'tab_root'         => array('type' => 'varchar', 'length' => 255, 'not null' => TRUE, 'default' => ''),      'title'            => array('type' => 'varchar', 'length' => 255, 'not null' => TRUE, 'default' => ''),      'title_callback'   => array('type' => 'varchar', 'length' => 255, 'not null' => TRUE, 'default' => ''),      'title_arguments'  => array('type' => 'varchar', 'length' => 255, 'not null' => TRUE, 'default' => ''),      'type'             => array('type' => 'int', 'not null' => TRUE, 'default' => 0),      'block_callback'   => array('type' => 'varchar', 'length' => 255, 'not null' => TRUE, 'default' => ''),      'description'      => array('type' => 'text', 'not null' => TRUE),      'position'         => array('type' => 'varchar', 'length' => 255, 'not null' => TRUE, 'default' => ''),      'weight'           => array('type' => 'int', 'not null' => TRUE, 'default' => 0),      'file'             => array('type' => 'text', 'size' => 'medium')    ),    'indexes' => array(      'fit'        => array('fit'),      'tab_parent' => array('tab_parent')    ),    'primary key' => array('path'),  );  $schema['menu_links'] = array(    'fields' => array(      'menu_name'    => array('type' => 'varchar', 'length' => 32, 'not null' => TRUE, 'default' => ''),      'mlid'         => array('type' => 'serial', 'unsigned' => TRUE, 'not null' => TRUE),      'plid'         => array('type' => 'int', 'unsigned' => TRUE, 'not null' => TRUE, 'default' => 0),      'link_path'    => array('type' => 'varchar', 'length' => 255, 'not null' => TRUE, 'default' => ''),      'router_path'  => array('type' => 'varchar', 'length' => 255, 'not null' => TRUE, 'default' => ''),      'link_title'   => array('type' => 'varchar', 'length' => 255, 'not null' => TRUE, 'default' => ''),      'options'      => array('type' => 'text', 'not null' => FALSE),      'module'       => array('type' => 'varchar', 'length' => 255, 'not null' => TRUE, 'default' => 'system'),      'hidden'       => array('type' => 'int', 'not null' => TRUE, 'default' => 0, 'size' => 'small'),      'external'     => array('type' => 'int', 'not null' => TRUE, 'default' => 0, 'size' => 'small'),      'has_children' => array('type' => 'int', 'not null' => TRUE, 'default' => 0, 'size' => 'small'),      'expanded'     => array('type' => 'int', 'not null' => TRUE, 'default' => 0, 'size' => 'small'),      'weight'       => array('type' => 'int', 'not null' => TRUE, 'default' => 0),      'depth'        => array('type' => 'int', 'not null' => TRUE, 'default' => 0, 'size' => 'small'),      'customized'   => array('type' => 'int', 'not null' => TRUE, 'default' => 0, 'size' => 'small'),      'p1'           => array('type' => 'int', 'unsigned' => TRUE, 'not null' => TRUE, 'default' => 0),      'p2'           => array('type' => 'int', 'unsigned' => TRUE, 'not null' => TRUE, 'default' => 0),      'p3'           => array('type' => 'int', 'unsigned' => TRUE, 'not null' => TRUE, 'default' => 0),      'p4'           => array('type' => 'int', 'unsigned' => TRUE, 'not null' => TRUE, 'default' => 0),      'p5'           => array('type' => 'int', 'unsigned' => TRUE, 'not null' => TRUE, 'default' => 0),      'p6'           => array('type' => 'int', 'unsigned' => TRUE, 'not null' => TRUE, 'default' => 0),      'p7'           => array('type' => 'int', 'unsigned' => TRUE, 'not null' => TRUE, 'default' => 0),      'p8'           => array('type' => 'int', 'unsigned' => TRUE, 'not null' => TRUE, 'default' => 0),      'p9'           => array('type' => 'int', 'unsigned' => TRUE, 'not null' => TRUE, 'default' => 0),      'updated'      => array('type' => 'int', 'not null' => TRUE, 'default' => 0, 'size' => 'small'),    ),    'indexes' => array(      'path_menu'              => array(array('link_path', 128), 'menu_name'),      'menu_plid_expand_child' => array('menu_name', 'plid', 'expanded', 'has_children'),      'menu_parents'           => array('menu_name', 'p1', 'p2', 'p3', 'p4', 'p5', 'p6', 'p7', 'p8', 'p9'),      'router_path'            => array(array('router_path', 128)),    ),    'primary key' => array('mlid'),  );  foreach ($schema as $name => $table) {    db_create_table($ret, $name, $table);  }  return $ret;}/** * Migrate the menu items from the old menu system to the new menu_links table. */function system_update_6021() {  $ret = array('#finished' => 0);  $menus = array(    'navigation' => array(      'menu_name' => 'navigation',      'title' => 'Navigation',      'description' => 'The navigation menu is provided by Drupal and is the main interactive menu for any site. It is usually the only menu that contains personalized links for authenticated users, and is often not even visible to anonymous users.',    ),    'primary-links' => array(      'menu_name' => 'primary-links',      'title' => 'Primary links',      'description' => 'Primary links are often used at the theme layer to show the major sections of a site. A typical representation for primary links would be tabs along the top.',    ),    'secondary-links' => array(      'menu_name' => 'secondary-links',      'title' => 'Secondary links',      'description' => 'Secondary links are often used for pages like legal notices, contact details, and other secondary navigation items that play a lesser role than primary links.',    ),  );  // Multi-part update  if (!isset($_SESSION['system_update_6021'])) {    db_add_field($ret, 'menu', 'converted', array('type' => 'int', 'unsigned' => TRUE, 'not null' => TRUE, 'default' => 0, 'size' => 'tiny'));    $_SESSION['system_update_6021_max'] = db_result(db_query('SELECT COUNT(*) FROM {menu}'));    $_SESSION['menu_menu_map'] = array(1 => 'navigation');    // 0 => FALSE is for new menus, 1 => FALSE is for the navigation.    $_SESSION['menu_item_map'] = array(0 => FALSE, 1 => FALSE);    $table = array(      'fields' => array(        'menu_name'   => array('type' => 'varchar', 'length' => 32, 'not null' => TRUE, 'default' => ''),        'title'       => array('type' => 'varchar', 'length' => 255, 'not null' => TRUE, 'default' => ''),        'description' => array('type' => 'text', 'not null' => FALSE),      ),      'primary key' => array('menu_name'),    );    db_create_table($ret, 'menu_custom', $table);    db_query("INSERT INTO {menu_custom} (menu_name, title, description) VALUES ('%s', '%s', '%s')", $menus['navigation']);    $_SESSION['system_update_6021'] = 0;  }  $limit = 50;  while ($limit-- && ($item = db_fetch_array(db_query_range('SELECT * FROM {menu} WHERE converted = 0', 0, 1)))) {    // If it's not a menu...    if ($item['pid']) {      // Let's climb up until we find an item with a converted parent.      $item_original = $item;      while ($item && !isset($_SESSION['menu_item_map'][$item['pid']])) {        $item = db_fetch_array(db_query('SELECT * FROM {menu} WHERE mid = %d', $item['pid']));      }      // This can only occur if the menu entry is a leftover in the menu table.      // These do not appear in Drupal 5 anyways, so we skip them.      if (!$item) {        db_query('UPDATE {menu} SET converted = %d WHERE mid = %d', 1, $item_original['mid']);        $_SESSION['system_update_6021']++;        continue;      }    }    // We need to recheck because item might have changed.    if ($item['pid']) {      // Fill the new fields.      $item['link_title'] = $item['title'];      $item['link_path'] = drupal_get_normal_path($item['path']);      // We know the parent is already set. If it's not FALSE then it's an item.      if ($_SESSION['menu_item_map'][$item['pid']]) {        // The new menu system parent link id.        $item['plid'] = $_SESSION['menu_item_map'][$item['pid']]['mlid'];        // The new menu system menu name.        $item['menu_name'] = $_SESSION['menu_item_map'][$item['pid']]['menu_name'];      }      else {        // This a top level element.        $item['plid'] = 0;        // The menu name is stored among the menus.        $item['menu_name'] = $_SESSION['menu_menu_map'][$item['pid']];      }      // Is the element visible in the menu block?      $item['hidden'] = !($item['type'] & MENU_VISIBLE_IN_TREE);      // Is it a custom(ized) element?      if ($item['type'] & (MENU_CREATED_BY_ADMIN | MENU_MODIFIED_BY_ADMIN)) {        $item['customized'] = TRUE;      }      // Items created via the menu module need to be assigned to it.      if ($item['type'] & MENU_CREATED_BY_ADMIN) {        $item['module'] = 'menu';        $item['router_path'] = '';        $item['updated'] = TRUE;      }      else {        $item['module'] = 'system';        $item['router_path'] = $item['path'];        $item['updated'] = FALSE;      }      if ($item['description']) {        $item['options']['attributes']['title'] = $item['description'];      }                  // Save the link.      menu_link_save($item);      $_SESSION['menu_item_map'][$item['mid']] = array('mlid' => $item['mlid'], 'menu_name' => $item['menu_name']);    }    elseif (!isset($_SESSION['menu_menu_map'][$item['mid']])) {      $item['menu_name'] = 'menu-'. preg_replace('/[^a-zA-Z0-9]/', '-', strtolower($item['title']));      $item['menu_name'] = substr($item['menu_name'], 0, 20);      $original_menu_name = $item['menu_name'];      $i = 0;      while (db_result(db_query("SELECT menu_name FROM {menu_custom} WHERE menu_name = '%s'", $item['menu_name']))) {        $item['menu_name'] = $original_menu_name . ($i++);      }      if ($item['path']) {        // Another bunch of bogus entries. Apparently, these are leftovers        // from Drupal 4.7 .        $_SESSION['menu_bogus_menus'][] = $item['menu_name'];      }      else {        // Add this menu to the list of custom menus.        db_query("INSERT INTO {menu_custom} (menu_name, title, description) VALUES ('%s', '%s', '')", $item['menu_name'], $item['title']);      }      $_SESSION['menu_menu_map'][$item['mid']] = $item['menu_name'];      $_SESSION['menu_item_map'][$item['mid']] = FALSE;    }    db_query('UPDATE {menu} SET converted = %d WHERE mid = %d', 1, $item['mid']);    $_SESSION['system_update_6021']++;  }  if ($_SESSION['system_update_6021'] >= $_SESSION['system_update_6021_max']) {    if (!empty($_SESSION['menu_bogus_menus'])) {      // Remove entries in bogus menus. This is secure because we deleted      // every non-alpanumeric character from the menu name.      $ret[] = update_sql("DELETE FROM {menu_links} WHERE menu_name IN ('". implode("', '", $_SESSION['menu_bogus_menus']) ."')");    }    $menu_primary_menu = variable_get('menu_primary_menu', 0);    // Ensure that we wind up with a system menu named 'primary-links'.    if (isset($_SESSION['menu_menu_map'][2])) {      // The primary links menu that ships with Drupal 5 has mid = 2.  If this      // menu hasn't been deleted by the site admin, we use that.      $updated_primary_links_menu = 2;    }    elseif (isset($_SESSION['menu_menu_map'][$menu_primary_menu]) && $menu_primary_menu > 1) {      // Otherwise, we use the menu that is currently assigned to the primary      // links region of the theme, as long as it exists and isn't the      // Navigation menu.      $updated_primary_links_menu = $menu_primary_menu;    }    else {      // As a last resort, create 'primary-links' as a new menu.      $updated_primary_links_menu = 0;      db_query("INSERT INTO {menu_custom} (menu_name, title, description) VALUES ('%s', '%s', '%s')", $menus['primary-links']);    }    if ($updated_primary_links_menu) {      // Change the existing menu name to 'primary-links'.      $replace = array('%new_name' => 'primary-links', '%desc' => $menus['primary-links']['description'], '%old_name' => $_SESSION['menu_menu_map'][$updated_primary_links_menu]);      $ret[] = update_sql(strtr("UPDATE {menu_custom} SET menu_name = '%new_name', description = '%desc' WHERE menu_name = '%old_name'", $replace));      $ret[] = update_sql("UPDATE {menu_links} SET menu_name = 'primary-links' WHERE menu_name = '". $_SESSION['menu_menu_map'][$updated_primary_links_menu] ."'");      $_SESSION['menu_menu_map'][$updated_primary_links_menu] = 'primary-links';    }    $menu_secondary_menu = variable_get('menu_secondary_menu', 0);    // Ensure that we wind up with a system menu named 'secondary-links'.    if (isset($_SESSION['menu_menu_map'][$menu_secondary_menu]) && $menu_secondary_menu > 1 && $menu_secondary_menu != $updated_primary_links_menu) {      // We use the menu that is currently assigned to the secondary links      // region of the theme, as long as (a) it exists, (b) it isn't the      // Navigation menu, (c) it isn't the same menu we assigned as the      // system 'primary-links' menu above, and (d) it isn't the same menu      // assigned to the primary links region of the theme.      $updated_secondary_links_menu = $menu_secondary_menu;    }    else {      // Otherwise, create 'secondary-links' as a new menu.      $updated_secondary_links_menu = 0;      db_query("INSERT INTO {menu_custom} (menu_name, title, description) VALUES ('%s', '%s', '%s')", $menus['secondary-links']);    }    if ($updated_secondary_links_menu) {      // Change the existing menu name to 'secondary-links'.      $replace = array('%new_name' => 'secondary-links', '%desc' => $menus['secondary-links']['description'], '%old_name' => $_SESSION['menu_menu_map'][$updated_secondary_links_menu]);      $ret[] = update_sql(strtr("UPDATE {menu_custom} SET menu_name = '%new_name', description = '%desc' WHERE menu_name = '%old_name'", $replace));      $ret[] = update_sql("UPDATE {menu_links} SET menu_name = 'secondary-links' WHERE menu_name = '". $_SESSION['menu_menu_map'][$updated_secondary_links_menu] ."'");      $_SESSION['menu_menu_map'][$updated_secondary_links_menu] = 'secondary-links';    }    // Update menu OTF preferences.    $mid = variable_get('menu_parent_items', 0);    $menu_name = ($mid && isset($_SESSION['menu_menu_map'][$mid])) ? $_SESSION['menu_menu_map'][$mid] : 'navigation';    variable_set('menu_default_node_menu', $menu_name);    variable_del('menu_parent_items');    // Update the source of the primary and secondary links.    $menu_name = ($menu_primary_menu && isset($_SESSION['menu_menu_map'][$menu_primary_menu])) ? $_SESSION['menu_menu_map'][$menu_primary_menu] : '';    variable_set('menu_primary_links_source', $menu_name);    variable_del('menu_primary_menu');    $menu_name = ($menu_secondary_menu && isset($_SESSION['menu_menu_map'][$menu_secondary_menu])) ? $_SESSION['menu_menu_map'][$menu_secondary_menu] : '';    variable_set('menu_secondary_links_source', $menu_name);    variable_del('menu_secondary_menu');    // Skip the navigation menu - it is handled by the user module.    unset($_SESSION['menu_menu_map'][1]);    // Update the deltas for all menu module blocks.    foreach ($_SESSION['menu_menu_map'] as $mid => $menu_name) {      // This is again secure because we deleted every non-alpanumeric      // character from the menu name.      $ret[] = update_sql("UPDATE {blocks} SET delta = '". $menu_name ."' WHERE module = 'menu' AND delta = '". $mid ."'");      $ret[] = update_sql("UPDATE {blocks_roles} SET delta = '". $menu_name ."' WHERE module = 'menu' AND delta = '". $mid ."'");    }    $ret[] = array('success' => TRUE, 'query' => 'Relocated '. $_SESSION['system_update_6021'] .' existing items to the new menu system.');    $ret[] = update_sql("DROP TABLE {menu}");    unset($_SESSION['system_update_6021'], $_SESSION['system_update_6021_max'], $_SESSION['menu_menu_map'], $_SESSION['menu_item_map'], $_SESSION['menu_bogus_menus']);    // Create the menu overview links - also calls menu_rebuild(). If menu is    // disabled, then just call menu_rebuild.    if (function_exists('menu_enable')) {      menu_enable();    }    else {      menu_rebuild();    }    $ret['#finished'] = 1;  }  else {    $ret['#finished'] = $_SESSION['system_update_6021'] / $_SESSION['system_update_6021_max'];  }  return $ret;}/** * Update files tables to associate files to a uid by default instead of a nid. * Rename file_revisions to upload since it should only be used by the upload * module used by upload to link files to nodes. */function system_update_6022() {  $ret = array();  // Rename the nid field to vid, add status and timestamp fields, and indexes.  db_drop_index($ret, 'files', 'nid');  db_change_field($ret, 'files', 'nid', 'uid', array('type' => 'int', 'unsigned' => TRUE, 'not null' => TRUE, 'default' => 0));  db_add_field($ret, 'files', 'status', array('type' => 'int', 'not null' => TRUE, 'default' => 0));  db_add_field($ret, 'files', 'timestamp', array('type' => 'int', 'unsigned' => TRUE, 'not null' => TRUE, 'default' => 0));  db_add_index($ret, 'files', 'uid', array('uid'));  db_add_index($ret, 'files', 'status', array('status'));  db_add_index($ret, 'files', 'timestamp', array('timestamp'));  // Rename the file_revisions table to upload then add nid column. Since we're  // changing the table name we need to drop and re-add the indexes and  // the primary key so both mysql and pgsql end up with the correct index  // names.  db_drop_primary_key($ret, 'file_revisions');  db_drop_index($ret, 'file_revisions', 'vid');  db_rename_table($ret, 'file_revisions', 'upload');  db_add_field($ret, 'upload', 'nid', array('type' => 'int', 'unsigned' => TRUE, 'not null' => TRUE, 'default' => 0));  db_add_index($ret, 'upload', 'nid', array('nid'));  db_add_primary_key($ret, 'upload', array('vid', 'fid'));  db_add_index($ret, 'upload', 'fid', array('fid'));  // The nid column was renamed to uid. Use the old nid to find the node's uid.  update_sql('UPDATE {files} SET uid = (SELECT n.uid FROM {node} n WHERE {files}.uid = n.nid)');  update_sql('UPDATE {upload} SET nid = (SELECT r.nid FROM {node_revisions} r WHERE {upload}.vid = r.vid)');  // Mark all existing files as FILE_STATUS_PERMANENT.  $ret[] = update_sql('UPDATE {files} SET status = 1');  return $ret;}function system_update_6023() {  $ret = array();  // nid is DEFAULT 0  db_drop_index($ret, 'node_revisions', 'nid');  db_change_field($ret, 'node_revisions', 'nid', 'nid', array('type' => 'int', 'unsigned' => TRUE, 'not null' => TRUE, 'default' => 0));  db_add_index($ret, 'node_revisions', 'nid', array('nid'));  return $ret;}/** * Add translation fields to nodes used by translation module. */function system_update_6024() {  $ret = array();  db_add_field($ret, 'node', 'tnid', array('type' => 'int', 'unsigned' => TRUE, 'not null' => TRUE, 'default' => 0));  db_add_field($ret, 'node', 'translate', array('type' => 'int', 'not null' => TRUE, 'default' => 0));  db_add_index($ret, 'node', 'tnid', array('tnid'));  db_add_index($ret, 'node', 'translate', array('translate'));  return $ret;}/** * Increase the maximum length of node titles from 128 to 255. */function system_update_6025() {  $ret = array();  db_drop_index($ret, 'node', 'node_title_type');  db_change_field($ret, 'node', 'title', 'title', array('type' => 'varchar', 'length' => 255, 'not null' => TRUE, 'default' => ''));  db_add_index($ret, 'node', 'node_title_type', array('title', array('type', 4)));  db_change_field($ret, 'node_revisions', 'title', 'title', array('type' => 'varchar', 'length' => 255, 'not null' => TRUE, 'default' => ''));  return $ret;}/** * Display warning about new Update status module. */function system_update_6026() {  $ret = array();  // Notify user that new update module exists.  drupal_set_message('Drupal can check periodically for important bug fixes and security releases using the new update status module. This module can be turned on from the <a href="'. url('admin/build/modules') .'">modules administration page</a>. For more information please read the <a href="http://drupal.org/handbook/modules/update">Update status handbook page</a>.');  return $ret;}/** * Add block cache. */function system_update_6027() {  $ret = array();  // Create the blocks.cache column.  db_add_field($ret, 'blocks', 'cache', array('type' => 'int', 'not null' => TRUE, 'default' => 1, 'size' => 'tiny'));  // The cache_block table is created in update_fix_d6_requirements() since  // calls to cache_clear_all() would otherwise cause warnings.  // Fill in the values for the new 'cache' column in the {blocks} table.  foreach (module_list() as $module) {    if ($module_blocks = module_invoke($module, 'block', 'list')) {      foreach ($module_blocks as $delta => $block) {        if (isset($block['cache'])) {          db_query("UPDATE {blocks} SET cache = %d WHERE module = '%s' AND delta = '%s'", $block['cache'], $module, $delta);        }      }    }  }  return $ret;}/** * Add the node load cache table. */function system_update_6028() {  // Removed node_load cache to discuss it more for Drupal 7.  return array();}/** * Enable the dblog module on sites that upgrade, since otherwise * watchdog logging will stop unexpectedly. */function system_update_6029() {  // The watchdog table is now owned by dblog, which is not yet  // "installed" according to the system table, but the table already  // exists.  We set the module as "installed" here to avoid an error  // later.  //  // Although not the case for the initial D6 release, it is likely  // that dblog.install will have its own update functions eventually.  // However, dblog did not exist in D5 and this update is part of the  // initial D6 release, so we know that dblog is not installed yet.  // It is therefore correct to install it as version 0.  If  // dblog updates exist, the next run of update.php will get them.  drupal_set_installed_schema_version('dblog', 0);  module_enable(array('dblog'));  menu_rebuild();  return array(array('success' => TRUE, 'query' => "'dblog' module enabled."));}/** * Add the tables required by actions.inc. */function system_update_6030() {  $ret = array();  // Rename the old contrib actions table if it exists so the contrib version  // of the module can do something with the old data.  if (db_table_exists('actions')) {    db_rename_table($ret, 'actions', 'actions_old_contrib');  }  $schema['actions'] = array(    'fields' => array(      'aid' => array('type' => 'varchar', 'length' => 255, 'not null' => TRUE, 'default' => '0'),      'type' => array('type' => 'varchar', 'length' => 32, 'not null' => TRUE, 'default' => ''),      'callback' => array('type' => 'varchar', 'length' => 255, 'not null' => TRUE, 'default' => ''),      'parameters' => array('type' => 'text', 'not null' => TRUE, 'size' => 'big'),      'description' => array('type' => 'varchar', 'length' => 255, 'not null' => TRUE, 'default' => '0'),    ),    'primary key' => array('aid'),  );  $schema['actions_aid'] = array(    'fields' => array(      'aid' => array('type' => 'serial', 'unsigned' => TRUE, 'not null' => TRUE),    ),    'primary key' => array('aid'),  );  db_create_table($ret, 'actions', $schema['actions']);  db_create_table($ret, 'actions_aid', $schema['actions_aid']);  return $ret;}/** * Ensure that installer cannot be run again after updating from Drupal 5.x to 6.x * Actually, this is already done by system_update_6014(), so this is now a no-op. */function system_update_6031() {  return array();}/** * profile_fields.name used to be nullable but is part of a unique key * and so shouldn't be. */function system_update_6032() {  $ret = array();  if (db_table_exists('profile_fields')) {    db_drop_unique_key($ret, 'profile_fields', 'name');    db_change_field($ret, 'profile_fields', 'name', 'name', array('type' => 'varchar', 'length' => 128, 'not null' => TRUE, 'default' => ''));    db_add_unique_key($ret, 'profile_fields', 'name', array('name'));  }  return $ret;}/** * Change node_comment_statistics to be not autoincrement. */function system_update_6033() {  $ret = array();  if (db_table_exists('node_comment_statistics')) {    // On pgsql but not mysql, db_change_field() drops all keys    // involving the changed field, which in this case is the primary    // key.  The normal approach is explicitly drop the pkey, change the    // field, and re-create the pkey.    //    // Unfortunately, in this case that won't work on mysql; we CANNOT    // drop the pkey because on mysql auto-increment fields must be    // included in at least one key or index.    //    // Since we cannot drop the pkey before db_change_field(), after    // db_change_field() we may or may not still have a pkey.  The    // simple way out is to re-create the pkey only when using pgsql.    // Realistic requirements trump idealistic purity.    db_change_field($ret, 'node_comment_statistics', 'nid', 'nid', array('type' => 'int', 'unsigned' => TRUE, 'not null' => TRUE, 'default' => 0));    if ($GLOBALS['db_type'] == 'pgsql') {      db_add_primary_key($ret, 'node_comment_statistics', array('nid'));    }  }  return $ret;}/** * Rename permission "administer access control" to "administer permissions". */function system_update_6034() {  $ret = array();  $result = db_query("SELECT rid, perm FROM {permission} ORDER BY rid");  while ($role = db_fetch_object($result)) {    $renamed_permission = preg_replace('/administer access control/', 'administer permissions', $role->perm);    if ($renamed_permission != $role->perm) {      $ret[] = update_sql("UPDATE {permission} SET perm = '$renamed_permission' WHERE rid = $role->rid");    }  }  return $ret;}/** * Change index on system table for better performance. */function system_update_6035() {  $ret = array();  db_drop_index($ret, 'system', 'weight');  db_add_index($ret, 'system', 'modules', array(array('type', 12), 'status', 'weight', 'filename'));  db_add_index($ret, 'system', 'bootstrap', array(array('type', 12), 'status', 'bootstrap', 'weight', 'filename'));  return $ret;}/** * Change the search schema and indexing. * * The table data is preserved where possible in MYSQL and MYSQLi using * ALTER IGNORE. Other databases don't support that, so for them the * tables are dropped and re-created, and will need to be re-indexed * from scratch. */function system_update_6036() {  $ret = array();  if (db_table_exists('search_index')) {    // Create the search_dataset.reindex column.    db_add_field($ret, 'search_dataset', 'reindex', array('type' => 'int', 'unsigned' => TRUE, 'not null' => TRUE, 'default' => 0));    // Drop the search_index.from fields which are no longer used.    db_drop_index($ret, 'search_index', 'from_sid_type');    db_drop_field($ret, 'search_index', 'fromsid');    db_drop_field($ret, 'search_index', 'fromtype');    // Drop the search_dataset.sid_type index, so that it can be made unique.    db_drop_index($ret, 'search_dataset', 'sid_type');    // Create the search_node_links Table.    $search_node_links_schema = array(      'fields' => array(        'sid'      => array('type' => 'int', 'unsigned' => TRUE, 'not null' => TRUE, 'default' => 0),        'type'     => array('type' => 'varchar', 'length' => 16, 'not null' => TRUE, 'default' => ''),        'nid'      => array('type' => 'int', 'unsigned' => TRUE, 'not null' => TRUE, 'default' => 0),        'caption'    => array('type' => 'text', 'size' => 'big', 'not null' => FALSE),      ),      'primary key' => array('sid', 'type', 'nid'),      'indexes' => array('nid' => array('nid')),    );    db_create_table($ret, 'search_node_links', $search_node_links_schema);    // with the change to search_dataset.reindex, the search queue is handled differently,    // and this is no longer needed    variable_del('node_cron_last');    // Add a unique index for the search_index.    if ($GLOBALS['db_type'] == 'mysql' || $GLOBALS['db_type'] == 'mysqli') {      // Since it's possible that some existing sites have duplicates,      // create the index using the IGNORE keyword, which ignores duplicate errors.      // However, pgsql doesn't support it      $ret[] = update_sql("ALTER IGNORE TABLE {search_index} ADD UNIQUE KEY word_sid_type (word, sid, type)");      $ret[] = update_sql("ALTER IGNORE TABLE {search_dataset} ADD UNIQUE KEY sid_type (sid, type)");      // Everything needs to be reindexed.      $ret[] = update_sql("UPDATE {search_dataset} SET reindex = 1");    }    else {      // Delete the existing tables if there are duplicate values      if (db_result(db_query("SELECT sid FROM {search_dataset} GROUP BY sid, type HAVING COUNT(*) > 1")) || db_result(db_query("SELECT sid FROM {search_index} GROUP BY word, sid, type HAVING COUNT(*) > 1"))) {        $ret[] = update_sql('DELETE FROM {search_dataset}');        $ret[] = update_sql('DELETE FROM {search_index}');        $ret[] = update_sql('DELETE FROM {search_total}');      }      else {        // Everything needs to be reindexed.        $ret[] = update_sql("UPDATE {search_dataset} SET reindex = 1");      }      // create the new indexes      db_add_unique_key($ret, 'search_index', 'word_sid_type', array('word', 'sid', 'type'));      db_add_unique_key($ret, 'search_dataset', 'sid_type', array('sid', 'type'));    }  }  return $ret;}/** * Create consistent empty region for disabled blocks. */function system_update_6037() {  $ret = array();  db_change_field($ret, 'blocks', 'region', 'region', array('type' => 'varchar', 'length' => 64, 'not null' => TRUE, 'default' => ''));  $ret[] = update_sql("UPDATE {blocks} SET region = '' WHERE status = 0");  return $ret;}/** * Ensure that "Account" is not used as a Profile category. */function system_update_6038() {  $ret = array();  if (db_table_exists('profile_fields')) {    $ret[] = update_sql("UPDATE {profile_fields} SET category = 'Account settings' WHERE LOWER(category) = 'account'");    if ($affectedrows = db_affected_rows()) {      drupal_set_message('There were '. $affectedrows .' profile fields that used a reserved category name. They have been assigned to the category "Account settings".');    }  }  return $ret;}/** * Rename permissions "edit foo content" to "edit any foo content". * Also update poll module permission "create polls" to "create * poll content". */function system_update_6039() {  $ret = array();  $result = db_query("SELECT rid, perm FROM {permission} ORDER BY rid");  while ($role = db_fetch_object($result)) {    $renamed_permission = preg_replace('/(?<=^|,\ )edit\ ([a-zA-Z0-9_\-]+)\ content(?=,|$)/', 'edit any $1 content', $role->perm);    $renamed_permission = preg_replace('/(?<=^|,\ )create\ polls(?=,|$)/', 'create poll content', $renamed_permission);    if ($renamed_permission != $role->perm) {      $ret[] = update_sql("UPDATE {permission} SET perm = '$renamed_permission' WHERE rid = $role->rid");    }  }  return $ret;}/** * Add a weight column to the upload table. */function system_update_6040() {  $ret = array();  if (db_table_exists('upload')) {    db_add_field($ret, 'upload', 'weight', array('type' => 'int', 'not null' => TRUE, 'default' => 0, 'size' => 'tiny'));  }  return $ret;}/** * Change forum vocabulary not to be required by default and set the weight of the forum.module 1 higher than the taxonomy.module. */function system_update_6041() {  $weight = intval((db_result(db_query("SELECT weight FROM {system} WHERE name = 'taxonomy'"))) + 1);  $ret = array();  $vid = intval(variable_get('forum_nav_vocabulary', ''));  if (db_table_exists('vocabulary') && $vid) {    $ret[] = update_sql("UPDATE {vocabulary} SET required = 0 WHERE vid = " . $vid);    $ret[] = update_sql("UPDATE {system} SET weight = ". $weight ." WHERE name = 'forum'");  }  return $ret;}/** * Upgrade recolored theme stylesheets to new array structure. */function system_update_6042() {  foreach (list_themes() as $theme) {    $stylesheet = variable_get('color_'. $theme->name .'_stylesheet', NULL);    if (!empty($stylesheet)) {      variable_set('color_'. $theme->name .'_stylesheets', array($stylesheet));      variable_del('color_'. $theme->name .'_stylesheet');    }  }  return array();}/** * Update table indices to make them more rational and useful. */function system_update_6043() {  $ret = array();  // Required modules first.  // Add new system module indexes.  db_add_index($ret, 'flood', 'allow', array('event', 'hostname', 'timestamp'));  db_add_index($ret, 'history', 'nid', array('nid'));  // Change length of theme field in {blocks} to be consistent with module, and  // to avoid a MySQL error regarding a too-long index.  Also add new indices.  db_change_field($ret, 'blocks', 'theme', 'theme', array('type' => 'varchar', 'length' => 64, 'not null' => TRUE, 'default' => ''),array(                  'unique keys' => array('tmd' => array('theme', 'module', 'delta'),),                  'indexes' => array('list' => array('theme', 'status', 'region', 'weight', 'module'),),));  db_add_index($ret, 'blocks_roles', 'rid', array('rid'));  // Improve filter module indices.  db_drop_index($ret, 'filters', 'weight');  db_add_unique_key($ret, 'filters', 'fmd', array('format', 'module', 'delta'));  db_add_index($ret, 'filters', 'list', array('format', 'weight', 'module', 'delta'));  // Drop unneeded keys form the node table.  db_drop_index($ret, 'node', 'status');  db_drop_unique_key($ret, 'node', 'nid_vid');  // Improve user module indices.  db_add_index($ret, 'users', 'mail', array('mail'));  db_add_index($ret, 'users_roles', 'rid', array('rid'));  // Optional modules - need to check if the tables exist.  // Alter aggregator module's tables primary keys to make them more useful.  if (db_table_exists('aggregator_category_feed')) {    db_drop_primary_key($ret, 'aggregator_category_feed');    db_add_primary_key($ret, 'aggregator_category_feed', array('cid', 'fid'));    db_add_index($ret, 'aggregator_category_feed', 'fid', array('fid'));  }  if (db_table_exists('aggregator_category_item')) {    db_drop_primary_key($ret, 'aggregator_category_item');    db_add_primary_key($ret, 'aggregator_category_item', array('cid', 'iid'));    db_add_index($ret, 'aggregator_category_item', 'iid', array('iid'));  }  // Alter contact module's table to add an index.  if (db_table_exists('contact')) {    db_add_index($ret, 'contact', 'list', array('weight', 'category'));  }  // Alter locale table to add a primary key, drop an index.  if (db_table_exists('locales_target')) {    db_add_primary_key($ret, 'locales_target', array('language', 'lid', 'plural'));  }  // Alter a poll module table to add a primary key.  if (db_table_exists('poll_votes')) {    db_drop_index($ret, 'poll_votes', 'nid');    db_add_primary_key($ret, 'poll_votes', array('nid', 'uid', 'hostname'));  }  // Alter a profile module table to add a primary key.  if (db_table_exists('profile_values')) {    db_drop_index($ret, 'profile_values', 'uid');    db_drop_index($ret, 'profile_values', 'fid');    db_change_field($ret,'profile_values' ,'fid', 'fid', array('type' => 'int', 'unsigned' => TRUE, 'not null' => TRUE, 'default' => 0,), array('indexes' => array('fid' => array('fid'),)));    db_change_field($ret,'profile_values' ,'uid', 'uid', array('type' => 'int', 'unsigned' => TRUE, 'not null' => TRUE, 'default' => 0,));    db_add_primary_key($ret, 'profile_values', array('uid', 'fid'));  }  // Alter a statistics module table to add an index.  if (db_table_exists('accesslog')) {    db_add_index($ret, 'accesslog', 'uid', array('uid'));  }  // Alter taxonomy module's tables.  if (db_table_exists('term_data')) {    db_drop_index($ret, 'term_data', 'vid');    db_add_index($ret, 'term_data', 'vid_name', array('vid', 'name'));    db_add_index($ret, 'term_data', 'taxonomy_tree', array('vid', 'weight', 'name'));  }  if (db_table_exists('term_node')) {    db_drop_primary_key($ret, 'term_node');    db_drop_index($ret, 'term_node', 'tid');    db_add_primary_key($ret, 'term_node', array('tid', 'vid'));  }  if (db_table_exists('term_relation')) {    db_drop_index($ret, 'term_relation', 'tid1');    db_add_unique_key($ret, 'term_relation', 'tid1_tid2', array('tid1', 'tid2'));  }  if (db_table_exists('term_synonym')) {    db_drop_index($ret, 'term_synonym', 'name');    db_add_index($ret, 'term_synonym', 'name_tid', array('name', 'tid'));  }  if (db_table_exists('vocabulary')) {    db_add_index($ret, 'vocabulary', 'list', array('weight', 'name'));  }  if (db_table_exists('vocabulary_node_types')) {    db_drop_primary_key($ret, 'vocabulary_node_types');    db_add_primary_key($ret, 'vocabulary_node_types', array('type', 'vid'));    db_add_index($ret, 'vocabulary_node_types', 'vid', array('vid'));  }  // If we updated in RC1 or before ensure we don't update twice.  variable_set('system_update_6043_RC2', TRUE);  return $ret;}/** * RC1 to RC2 index cleanup. */function system_update_6044() {  $ret = array();  // Delete invalid entries in {term_node} after system_update_6001.  $ret[] = update_sql("DELETE FROM {term_node} WHERE vid = 0");  // Only execute the rest of this function if 6043 was run in RC1 or before.  if (variable_get('system_update_6043_RC2', FALSE)) {    variable_del('system_update_6043_RC2');    return $ret;  }  // User module indices.  db_drop_unique_key($ret, 'users', 'mail');  db_add_index($ret, 'users', 'mail', array('mail'));  // Optional modules - need to check if the tables exist.  // Alter taxonomy module's tables.  if (db_table_exists('term_data')) {    db_drop_unique_key($ret, 'term_data', 'vid_name');    db_add_index($ret, 'term_data', 'vid_name', array('vid', 'name'));  }  if (db_table_exists('term_synonym')) {    db_drop_unique_key($ret, 'term_synonym', 'name_tid', array('name', 'tid'));    db_add_index($ret, 'term_synonym', 'name_tid', array('name', 'tid'));  }  return $ret;}/** * Update blog, book and locale module permissions. * * Blog module got "edit own blog" replaced with the more granular "create * blog entries", "edit own blog entries" and "delete own blog entries" * permissions. We grant create and edit to previously privileged users, but * delete is not granted to be in line with other permission changes in Drupal 6. * * Book module's "edit book pages" was upgraded to the bogus "edit book content" * in Drupal 6 RC1 instead of "edit any book content", which would be correct. * * Locale module introduced "administer languages" and "translate interface" * in place of "administer locales". * * Modeled after system_update_6039(). */function system_update_6045() {  $ret = array();  $result = db_query("SELECT rid, perm FROM {permission} ORDER BY rid");  while ($role = db_fetch_object($result)) {    $renamed_permission = preg_replace('/(?<=^|,\ )edit\ own\ blog(?=,|$)/', 'create blog entries, edit own blog entries', $role->perm);    $renamed_permission = preg_replace('/(?<=^|,\ )edit\ book\ content(?=,|$)/', 'edit any book content', $renamed_permission);    $renamed_permission = preg_replace('/(?<=^|,\ )administer\ locales(?=,|$)/', 'administer languages, translate interface', $renamed_permission);    if ($renamed_permission != $role->perm) {      $ret[] = update_sql("UPDATE {permission} SET perm = '$renamed_permission' WHERE rid = $role->rid");    }  }  // Notify user that delete permissions may have been changed. This was in  // effect since system_update_6039(), but there was no user notice.  drupal_set_message('Drupal now has separate edit and delete permissions. Previously, users who were able to edit content were automatically allowed to delete it. For added security, delete permissions for individual core content types have been <strong>removed</strong> from all roles on your site (only roles with the "administer nodes" permission can now delete these types of content). If you would like to reenable any individual delete permissions, you can do this at the <a href="'. url('admin/user/permissions', array('fragment' => 'module-node')) .'">permissions page</a>.');  return $ret;}/** * Ensure that the file_directory_path variable is set (using the old 5.x * default, if necessary), so that the changed 6.x default won't break * existing sites. */function system_update_6046() {  $ret = array();  if (!variable_get('file_directory_path', FALSE)) {    variable_set('file_directory_path', 'files');    $ret[] = array('success' => TRUE, 'query' => "variable_set('file_directory_path')");  }  return $ret;}/** * Fix cache mode for blocks inserted in system_install() in fresh installs of previous RC. */function system_update_6047() {  $ret = array();  $ret[] = update_sql("UPDATE {blocks} SET cache = -1 WHERE module = 'user' AND delta IN ('0', '1')");  $ret[] = update_sql("UPDATE {blocks} SET cache = -1 WHERE module = 'system' AND delta = '0'");  return $ret;}/** * @} End of "defgroup updates-5.x-to-6.x" *//** * @defgroup updates-6.x-extra Extra system updates for 6.x * @{ *//*** Increase the size of the 'load_functions' and 'to_arg_functions' fields in table 'menu_router'.*/function system_update_6048() {  $ret = array();  db_change_field($ret, 'menu_router', 'load_functions', 'load_functions', array('type' => 'text', 'not null' => TRUE,));  db_change_field($ret, 'menu_router', 'to_arg_functions', 'to_arg_functions', array('type' => 'text', 'not null' => TRUE,));  return $ret;}/** * Replace src index on the {url_alias} table with src, language. */function system_update_6049() {  $ret = array();  db_drop_index($ret, 'url_alias', 'src');  db_add_index($ret, 'url_alias', 'src_language', array('src', 'language'));  return $ret;}/** * Clear any menu router blobs stored in the cache table. */function system_update_6050() {  $ret = array();  cache_clear_all('router:', 'cache_menu', TRUE);  return $ret;}/** * Create a signature_format column. */function system_update_6051() {  $ret = array();  if (!db_column_exists('users', 'signature_format')) {    // Set future input formats to FILTER_FORMAT_DEFAULT to ensure a safe default    // when incompatible modules insert into the users table. An actual format    // will be assigned when users save their signature.    $schema = array(      'type' => 'int',      'size' => 'small',      'not null' => TRUE,      'default' => FILTER_FORMAT_DEFAULT,      'description' => 'The {filter_formats}.format of the signature.',    );    db_add_field($ret, 'users', 'signature_format', $schema);    // Set the format of existing signatures to the current default input format.    if ($current_default_filter = variable_get('filter_default_format', 0)) {      $ret[] = update_sql("UPDATE {users} SET signature_format = ". $current_default_filter);    }    drupal_set_message("User signatures no longer inherit comment input formats. Each user's signature now has its own associated format that can be selected on the user's account page. Existing signatures have been set to your site's default input format.");  }  return $ret;}/** * Add a missing index on the {menu_router} table. */function system_update_6052() {  $ret = array();  db_add_index($ret, 'menu_router', 'tab_root_weight_title', array(array('tab_root', 64), 'weight', 'title'));  return $ret;}/** * Add a {system} index on type and name. */function system_update_6053() {  $ret = array();  db_add_index($ret, 'system', 'type_name', array(array('type', 12), 'name'));  return $ret;}/** * Add semaphore table. */function system_update_6054() {  $ret = array();  $schema['semaphore'] = array(    'fields' => array(      'name' => array(        'type' => 'varchar',        'length' => 255,        'not null' => TRUE,        'default' => ''),      'value' => array(        'type' => 'varchar',        'length' => 255,        'not null' => TRUE,        'default' => ''),      'expire' => array(        'type' => 'float',        'size' => 'big',        'not null' => TRUE),      ),    'indexes' => array('expire' => array('expire')),    'primary key' => array('name'),  );  db_create_table($ret, 'semaphore', $schema['semaphore']);  return $ret;}/** * Improve indexes on the {url_alias} table. */function system_update_6055() {  $ret = array();  db_drop_index($ret, 'url_alias', 'src_language');  db_drop_unique_key($ret, 'url_alias', 'dst_language');  db_add_index($ret, 'url_alias', 'src_language_pid', array('src', 'language', 'pid'));  db_add_unique_key($ret, 'url_alias', 'dst_language_pid', array('dst', 'language', 'pid'));  return $ret;}/** * @} End of "defgroup updates-6.x-extra" * The next series of updates should start at 7000. */
<?php// $Id$/** * @file * Administrative page callbacks for the forum module. */function forum_form_main($type, $edit = array()) {  if ((isset($_POST['op']) && $_POST['op'] == t('Delete')) || !empty($_POST['confirm'])) {    return drupal_get_form('forum_confirm_delete', $edit['tid']);  }  switch ($type) {    case 'forum':      return drupal_get_form('forum_form_forum', $edit);      break;    case 'container':      return drupal_get_form('forum_form_container', $edit);      break;  }}/** * Returns a form for adding a forum to the forum vocabulary * * @param $edit Associative array containing a forum term to be added or edited. * @ingroup forms * @see forum_form_submit() */function forum_form_forum(&$form_state, $edit = array()) {  $edit += array(    'name' => '',    'description' => '',    'tid' => NULL,    'weight' => 0,  );  $form['name'] = array('#type' => 'textfield',    '#title' => t('Forum name'),    '#default_value' => $edit['name'],    '#maxlength' => 255,    '#description' => t('Short but meaningful name for this collection of threaded discussions.'),    '#required' => TRUE,  );  $form['description'] = array('#type' => 'textarea',    '#title' => t('Description'),    '#default_value' => $edit['description'],    '#description' => t('Description and guidelines for discussions within this forum.'),  );  $form['parent']['#tree'] = TRUE;  $form['parent'][0] = _forum_parent_select($edit['tid'], t('Parent'), 'forum');  $form['weight'] = array('#type' => 'weight',    '#title' => t('Weight'),    '#default_value' => $edit['weight'],    '#description' => t('Forums are displayed in ascending order by weight (forums with equal weights are displayed alphabetically).'),  );  $form['vid'] = array('#type' => 'hidden', '#value' => variable_get('forum_nav_vocabulary', ''));  $form['submit' ] = array('#type' => 'submit', '#value' => t('Save'));  if ($edit['tid']) {    $form['delete'] = array('#type' => 'submit', '#value' => t('Delete'));    $form['tid'] = array('#type' => 'hidden', '#value' => $edit['tid']);  }  $form['#submit'][] = 'forum_form_submit';  $form['#theme'] = 'forum_form';  return $form;}/** * Process forum form and container form submissions. */function forum_form_submit($form, &$form_state) {  if ($form['form_id']['#value'] == 'forum_form_container') {    $container = TRUE;    $type = t('forum container');  }  else {    $container = FALSE;    $type = t('forum');  }  $status = taxonomy_save_term($form_state['values']);  switch ($status) {    case SAVED_NEW:      if ($container) {        $containers = variable_get('forum_containers', array());        $containers[] = $form_state['values']['tid'];        variable_set('forum_containers', $containers);      }      drupal_set_message(t('Created new @type %term.', array('%term' => $form_state['values']['name'], '@type' => $type)));      break;    case SAVED_UPDATED:      drupal_set_message(t('The @type %term has been updated.', array('%term' => $form_state['values']['name'], '@type' => $type)));      break;  }  $form_state['redirect'] = 'admin/content/forum';  return;}/** * Returns a form for adding a container to the forum vocabulary * * @param $edit Associative array containing a container term to be added or edited. * @ingroup forms * @see forum_form_submit() */function forum_form_container(&$form_state, $edit = array()) {  $edit += array(    'name' => '',    'description' => '',    'tid' => NULL,    'weight' => 0,  );  // Handle a delete operation.  $form['name'] = array(    '#title' => t('Container name'),    '#type' => 'textfield',    '#default_value' => $edit['name'],    '#maxlength' => 255,    '#description' => t('Short but meaningful name for this collection of related forums.'),    '#required' => TRUE  );  $form['description'] = array(    '#type' => 'textarea',    '#title' => t('Description'),    '#default_value' => $edit['description'],    '#description' => t('Description and guidelines for forums within this container.')  );  $form['parent']['#tree'] = TRUE;  $form['parent'][0] = _forum_parent_select($edit['tid'], t('Parent'), 'container');  $form['weight'] = array(    '#type' => 'weight',    '#title' => t('Weight'),    '#default_value' => $edit['weight'],    '#description' => t('Containers are displayed in ascending order by weight (containers with equal weights are displayed alphabetically).')  );  $form['vid'] = array(    '#type' => 'hidden',    '#value' => variable_get('forum_nav_vocabulary', ''),  );  $form['submit'] = array(    '#type' => 'submit',    '#value' => t('Save')  );  if ($edit['tid']) {    $form['delete'] = array('#type' => 'submit', '#value' => t('Delete'));    $form['tid'] = array('#type' => 'value', '#value' => $edit['tid']);  }  $form['#submit'][] = 'forum_form_submit';  $form['#theme'] = 'forum_form';  return $form;}/** * Returns a confirmation page for deleting a forum taxonomy term. * * @param $tid ID of the term to be deleted */function forum_confirm_delete(&$form_state, $tid) {  $term = taxonomy_get_term($tid);  $form['tid'] = array('#type' => 'value', '#value' => $tid);  $form['name'] = array('#type' => 'value', '#value' => $term->name);  return confirm_form($form, t('Are you sure you want to delete the forum %name?', array('%name' => $term->name)), 'admin/content/forum', t('Deleting a forum or container will also delete its sub-forums, if any. To delete posts in this forum, visit <a href="@content">content administration</a> first. This action cannot be undone.', array('@content' => url('admin/content/node'))), t('Delete'), t('Cancel'));}/** * Implementation of forms api _submit call. Deletes a forum after confirmation. */function forum_confirm_delete_submit($form, &$form_state) {  taxonomy_del_term($form_state['values']['tid']);  drupal_set_message(t('The forum %term and all sub-forums and associated posts have been deleted.', array('%term' => $form_state['values']['name'])));  watchdog('content', 'forum: deleted %term and all its sub-forums and associated posts.', array('%term' => $form_state['values']['name']));  $form_state['redirect'] = 'admin/content/forum';  return;}/** * Form builder for the forum settings page. * * @see system_settings_form() */function forum_admin_settings() {  $form = array();  $number = drupal_map_assoc(array(5, 10, 15, 20, 25, 30, 35, 40, 50, 60, 80, 100, 150, 200, 250, 300, 350, 400, 500));  $form['forum_hot_topic'] = array('#type' => 'select',    '#title' => t('Hot topic threshold'),    '#default_value' => variable_get('forum_hot_topic', 15),    '#options' => $number,    '#description' => t('The number of posts a topic must have to be considered "hot".'),  );  $number = drupal_map_assoc(array(10, 25, 50, 75, 100));  $form['forum_per_page'] = array('#type' => 'select',    '#title' => t('Topics per page'),    '#default_value' => variable_get('forum_per_page', 25),    '#options' => $number,    '#description' => t('Default number of forum topics displayed per page.'),  );  $forder = array(1 => t('Date - newest first'), 2 => t('Date - oldest first'), 3 => t('Posts - most active first'), 4 => t('Posts - least active first'));  $form['forum_order'] = array('#type' => 'radios',    '#title' => t('Default order'),    '#default_value' => variable_get('forum_order', '1'),    '#options' => $forder,    '#description' => t('Default display order for topics.'),  );  return system_settings_form($form);}/** * Returns an overview list of existing forums and containers */function forum_overview(&$form_state) {  module_load_include('inc', 'taxonomy', 'taxonomy.admin');  $vid = variable_get('forum_nav_vocabulary', '');  $vocabulary = taxonomy_vocabulary_load($vid);  $form = taxonomy_overview_terms($form_state, $vocabulary);  foreach (element_children($form) as $key) {    if (isset($form[$key]['#term'])) {      $term = $form[$key]['#term'];      $form[$key]['view']['#value'] = l($term['name'], 'forum/'. $term['tid']);      if (in_array($form[$key]['#term']['tid'], variable_get('forum_containers', array()))) {        $form[$key]['edit']['#value'] = l(t('edit container'), 'admin/content/forum/edit/container/'. $term['tid']);      }      else {        $form[$key]['edit']['#value'] = l(t('edit forum'), 'admin/content/forum/edit/forum/'. $term['tid']);      }    }  }  // Remove the alphabetical reset.  unset($form['reset_alphabetical']);  // The form needs to have submit and validate handlers set explicitly.  $form['#theme'] = 'taxonomy_overview_terms';  $form['#submit'] = array('taxonomy_overview_terms_submit'); // Use the existing taxonomy overview submit handler.  $form['#validate'] = array('taxonomy_overview_terms_validate');  $form['#empty_text'] = '<em>'. t('There are no existing containers or forums. Containers and forums may be added using the <a href="@container">add container</a> and <a href="@forum">add forum</a> pages.', array('@container' => url('admin/content/forum/add/container'), '@forum' => url('admin/content/forum/add/forum'))) .'</em>';  return $form;}/** * Returns a select box for available parent terms * * @param $tid ID of the term which is being added or edited * @param $title Title to display the select box with * @param $child_type Whether the child is forum or container */function _forum_parent_select($tid, $title, $child_type) {  $parents = taxonomy_get_parents($tid);  if ($parents) {    $parent = array_shift($parents);    $parent = $parent->tid;  }  else {    $parent = 0;  }  $vid = variable_get('forum_nav_vocabulary', '');  $children = taxonomy_get_tree($vid, $tid);  // A term can't be the child of itself, nor of its children.  foreach ($children as $child) {    $exclude[] = $child->tid;  }  $exclude[] = $tid;  $tree = taxonomy_get_tree($vid);  $options[0] = '<'. t('root') .'>';  if ($tree) {    foreach ($tree as $term) {      if (!in_array($term->tid, $exclude)) {        $options[$term->tid] = str_repeat(' -- ', $term->depth) . $term->name;      }    }  }  if ($child_type == 'container') {    $description = t('Containers are usually placed at the top (root) level, but may also be placed inside another container or forum.');  }  else if ($child_type == 'forum') {    $description = t('Forums may be placed at the top (root) level, or inside another container or forum.');  }  return array('#type' => 'select', '#title' => $title, '#default_value' => $parent, '#options' => $options, '#description' => $description, '#required' => TRUE);}
<?php// $Id$?><!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.0 Strict//EN"  "http://www.w3.org/TR/xhtml1/DTD/xhtml1-strict.dtd"><html xmlns="http://www.w3.org/1999/xhtml" xml:lang="<?php print $language->language ?>" lang="<?php print $language->language ?>" dir="<?php print $language->dir ?>">  <head>    <?php print $head ?>    <title><?php print $head_title ?></title>    <?php print $styles ?>    <?php print $scripts ?>    <!--[if lt IE 7]>      <?php print phptemplate_get_ie_styles(); ?>    <![endif]-->  </head>  <body<?php print phptemplate_body_class($left, $right); ?>><!-- Layout -->  <div id="header-region" class="clear-block"><?php print $header; ?></div>    <div id="wrapper">    <div id="container" class="clear-block">      <div id="header">        <div id="logo-floater">        <?php          // Prepare header          $site_fields = array();          if ($site_name) {            $site_fields[] = check_plain($site_name);          }          if ($site_slogan) {            $site_fields[] = check_plain($site_slogan);          }          $site_title = implode(' ', $site_fields);          if ($site_fields) {            $site_fields[0] = '<span>'. $site_fields[0] .'</span>';          }          $site_html = implode(' ', $site_fields);          if ($logo || $site_title) {            print '<h1><a href="'. check_url($front_page) .'" title="'. $site_title .'">';            if ($logo) {              print '<img src="'. check_url($logo) .'" alt="'. $site_title .'" id="logo" />';            }            print $site_html .'</a></h1>';          }        ?>        </div>        <?php if (isset($primary_links)) : ?>          <?php print theme('links', $primary_links, array('class' => 'links primary-links')) ?>        <?php endif; ?>        <?php if (isset($secondary_links)) : ?>          <?php print theme('links', $secondary_links, array('class' => 'links secondary-links')) ?>        <?php endif; ?>      </div> <!-- /header -->      <?php if ($left): ?>        <div id="sidebar-left" class="sidebar">          <?php if ($search_box): ?><div class="block block-theme"><?php print $search_box ?></div><?php endif; ?>          <?php print $left ?>        </div>      <?php endif; ?>      <div id="center"><div id="squeeze"><div class="right-corner"><div class="left-corner">          <?php print $breadcrumb; ?>          <?php if ($mission): print '<div id="mission">'. $mission .'</div>'; endif; ?>          <?php if ($tabs): print '<div id="tabs-wrapper" class="clear-block">'; endif; ?>          <?php if ($title): print '<h2'. ($tabs ? ' class="with-tabs"' : '') .'>'. $title .'</h2>'; endif; ?>          <?php if ($tabs): print '<ul class="tabs primary">'. $tabs .'</ul></div>'; endif; ?>          <?php if ($tabs2): print '<ul class="tabs secondary">'. $tabs2 .'</ul>'; endif; ?>          <?php if ($show_messages && $messages): print $messages; endif; ?>          <?php print $help; ?>          <div class="clear-block">            <?php print $content ?>          </div>          <?php print $feed_icons ?>          <div id="footer"><?php print $footer_message . $footer ?></div>      </div></div></div></div> <!-- /.left-corner, /.right-corner, /#squeeze, /#center -->      <?php if ($right): ?>        <div id="sidebar-right" class="sidebar">          <?php if (!$left && $search_box): ?><div class="block block-theme"><?php print $search_box ?></div><?php endif; ?>          <?php print $right ?>        </div>      <?php endif; ?>    </div> <!-- /container -->  </div><!-- /layout -->  <?php print $closure ?>  </body></html>
<?php// $Id$/** * @file * System monitoring and logging for administrators. * * The dblog module monitors your site and keeps a list of * recorded events containing usage and performance data, errors, * warnings, and similar operational information. * * @see watchdog() *//** * Implementation of hook_help(). */function dblog_help($path, $arg) {  switch ($path) {    case 'admin/help#dblog':      $output = '<p>'. t('The dblog module monitors your system, capturing system events in a log to be reviewed by an authorized individual at a later time. This is useful for site administrators who want a quick overview of activities on their site. The logs also record the sequence of events, so it can be useful for debugging site errors.') .'</p>';      $output .= '<p>'. t('The dblog log is simply a list of recorded events containing usage data, performance data, errors, warnings and operational information. Administrators should check the dblog report on a regular basis to ensure their site is working properly.') .'</p>';      $output .= '<p>'. t('For more information, see the online handbook entry for <a href="@dblog">Dblog module</a>.', array('@dblog' => 'http://drupal.org/handbook/modules/dblog/')) .'</p>';      return $output;    case 'admin/reports/dblog':      return '<p>'. t('The dblog module monitors your website, capturing system events in a log to be reviewed by an authorized individual at a later time. The dblog log is simply a list of recorded events containing usage data, performance data, errors, warnings and operational information. It is vital to check the dblog report on a regular basis as it is often the only way to tell what is going on.') .'</p>';  }}/** * Implementation of hook_theme() */function dblog_theme() {  return array(    'dblog_filters' => array(      'arguments' => array('form' => NULL),    ),  );}/** * Implementation of hook_menu(). */function dblog_menu() {  $items['admin/settings/logging/dblog'] = array(    'title' => 'Database logging',    'description' => 'Settings for logging to the Drupal database logs. This is the most common method for small to medium sites on shared hosting. The logs are viewable from the admin pages.',    'page callback' => 'drupal_get_form',    'page arguments' => array('dblog_admin_settings'),    'access arguments' => array('administer site configuration'),    'file' => 'dblog.admin.inc',  );  $items['admin/reports/dblog'] = array(    'title' => 'Recent log entries',    'description' => 'View events that have recently been logged.',    'page callback' => 'dblog_overview',    'access arguments' => array('access site reports'),    'weight' => -1,    'file' => 'dblog.admin.inc',  );  $items['admin/reports/page-not-found'] = array(    'title' => "Top 'page not found' errors",    'description' => "View 'page not found' errors (404s).",    'page callback' => 'dblog_top',    'page arguments' => array('page not found'),    'access arguments' => array('access site reports'),    'file' => 'dblog.admin.inc',  );  $items['admin/reports/access-denied'] = array(    'title' => "Top 'access denied' errors",    'description' => "View 'access denied' errors (403s).",    'page callback' => 'dblog_top',    'page arguments' => array('access denied'),    'access arguments' => array('access site reports'),    'file' => 'dblog.admin.inc',  );  $items['admin/reports/event/%'] = array(    'title' => 'Details',    'page callback' => 'dblog_event',    'page arguments' => array(3),    'access arguments' => array('access site reports'),    'type' => MENU_CALLBACK,    'file' => 'dblog.admin.inc',  );  return $items;}function dblog_init() {  if (arg(0) == 'admin' && arg(1) == 'reports') {    // Add the CSS for this module    drupal_add_css(drupal_get_path('module', 'dblog') .'/dblog.css', 'module', 'all', FALSE);  }}/** * Implementation of hook_cron(). * * Remove expired log messages and flood control events. */function dblog_cron() {  // Cleanup the watchdog table  $max = db_result(db_query('SELECT MAX(wid) FROM {watchdog}'));  db_query('DELETE FROM {watchdog} WHERE wid <= %d', $max - variable_get('dblog_row_limit', 1000));}/** * Implementation of hook_user(). */function dblog_user($op, &$edit, &$user) {  if ($op == 'delete') {    db_query('UPDATE {watchdog} SET uid = 0 WHERE uid = %d', $user->uid);  }}function _dblog_get_message_types() {  $types = array();  $result = db_query('SELECT DISTINCT(type) FROM {watchdog} ORDER BY type');  while ($object = db_fetch_object($result)) {    $types[] = $object->type;  }  return $types;}/** * Implementation of hook_watchdog(). */function dblog_watchdog($log = array()) {  $current_db = db_set_active();  db_query("INSERT INTO {watchdog}    (uid, type, message, variables, severity, link, location, referer, hostname, timestamp)    VALUES    (%d, '%s', '%s', '%s', %d, '%s', '%s', '%s', '%s', %d)",    $log['user']->uid,    $log['type'],    $log['message'],    serialize($log['variables']),    $log['severity'],    $log['link'],    $log['request_uri'],    $log['referer'],    $log['ip'],    $log['timestamp']);  if ($current_db) {    db_set_active($current_db);  }}/** * Theme dblog administration filter selector. * * @ingroup themeable */function theme_dblog_filters($form) {  $output = '';  foreach (element_children($form['status']) as $key) {    $output .= drupal_render($form['status'][$key]);  }  $output .= '<div id="dblog-admin-buttons">'. drupal_render($form['buttons']) .'</div>';  return $output;}
<?php// $Id$/** * @file maintenance-page.tpl.php * * This is an override of the default maintenance page. Used for Garland and * Minnelli, this file should not be moved or modified since the installation * and update pages depend on this file. * * This mirrors closely page.tpl.php for Garland in order to share the same * styles. */?><!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.0 Strict//EN"  "http://www.w3.org/TR/xhtml1/DTD/xhtml1-strict.dtd"><html xmlns="http://www.w3.org/1999/xhtml" xml:lang="<?php print $language->language ?>" lang="<?php print $language->language ?>" dir="<?php print $language->dir ?>">  <head>    <?php print $head ?>    <title><?php print $head_title ?></title>    <?php print $styles ?>    <?php print $scripts ?>    <!--[if lt IE 7]>      <?php print phptemplate_get_ie_styles(); ?>    <![endif]-->  </head>  <body<?php print phptemplate_body_class($left, $right); ?>><!-- Layout -->  <div id="header-region" class="clear-block"><?php print $header; ?></div>    <div id="wrapper">    <div id="container" class="clear-block">      <div id="header">        <div id="logo-floater">        <?php          // Prepare header          $site_fields = array();          if ($site_name) {            $site_fields[] = check_plain($site_name);          }          if ($site_slogan) {            $site_fields[] = check_plain($site_slogan);          }          $site_title = implode(' ', $site_fields);          if ($site_fields) {            $site_fields[0] = '<span>'. $site_fields[0] .'</span>';          }          $site_html = implode(' ', $site_fields);          if ($logo || $site_title) {            print '<h1><a href="'. check_url($base_path) .'" title="'. $site_title .'">';            if ($logo) {              print '<img src="'. check_url($logo) .'" alt="'. $site_title .'" id="logo" />';            }            print $site_html .'</a></h1>';          }        ?>        </div>      </div> <!-- /header -->      <?php if ($left): ?>        <div id="sidebar-left" class="sidebar">          <?php if ($search_box): ?><div class="block block-theme"><?php print $search_box ?></div><?php endif; ?>          <?php print $left ?>        </div>      <?php endif; ?>      <div id="center"><div id="squeeze"><div class="right-corner"><div class="left-corner">          <?php if ($title): print '<h2'. ($tabs ? ' class="with-tabs"' : '') .'>'. $title .'</h2>'; endif; ?>          <?php print $help; ?>          <?php print $messages; ?>          <div class="clear-block">            <?php print $content ?>          </div>          <div id="footer"><?php print $footer_message . $footer ?></div>      </div></div></div></div> <!-- /.left-corner, /.right-corner, /#squeeze, /#center -->      <?php if ($right): ?>        <div id="sidebar-right" class="sidebar">          <?php print $right ?>        </div>      <?php endif; ?>    </div> <!-- /container -->  </div><!-- /layout -->  </body></html>
<?php// $Id$?><!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.0 Strict//EN" "http://www.w3.org/TR/xhtml1/DTD/xhtml1-strict.dtd"><html xmlns="http://www.w3.org/1999/xhtml" lang="<?php print $language->language ?>" xml:lang="<?php print $language->language ?>" dir="<?php print $language->dir ?>"><head>  <?php print $head ?>  <title><?php print $head_title ?></title>  <?php print $styles ?>  <?php print $scripts ?>  <script type="text/javascript"><?php /* Needed to avoid Flash of Unstyle Content in IE */ ?> </script></head><body><table border="0" cellpadding="0" cellspacing="0" id="header">  <tr>    <td id="logo">      <?php if ($logo) { ?><a href="<?php print $front_page ?>" title="<?php print t('Home') ?>"><img src="<?php print $logo ?>" alt="<?php print t('Home') ?>" /></a><?php } ?>      <?php if ($site_name) { ?><h1 class='site-name'><a href="<?php print $front_page ?>" title="<?php print t('Home') ?>"><?php print $site_name ?></a></h1><?php } ?>      <?php if ($site_slogan) { ?><div class='site-slogan'><?php print $site_slogan ?></div><?php } ?>    </td>    <td id="menu">      <?php if (isset($secondary_links)) { ?><?php print theme('links', $secondary_links, array('class' => 'links', 'id' => 'subnavlist')) ?><?php } ?>      <?php if (isset($primary_links)) { ?><?php print theme('links', $primary_links, array('class' => 'links', 'id' => 'navlist')) ?><?php } ?>      <?php print $search_box ?>    </td>  </tr>  <tr>    <td colspan="2"><div><?php print $header ?></div></td>  </tr></table><table border="0" cellpadding="0" cellspacing="0" id="content">  <tr>    <?php if ($left) { ?><td id="sidebar-left">      <?php print $left ?>    </td><?php } ?>    <td valign="top">      <?php if ($mission) { ?><div id="mission"><?php print $mission ?></div><?php } ?>      <div id="main">        <?php print $breadcrumb ?>        <h1 class="title"><?php print $title ?></h1>        <div class="tabs"><?php print $tabs ?></div>        <?php if ($show_messages) { print $messages; } ?>        <?php print $help ?>        <?php print $content; ?>        <?php print $feed_icons; ?>      </div>    </td>    <?php if ($right) { ?><td id="sidebar-right">      <?php print $right ?>    </td><?php } ?>  </tr></table><div id="footer">  <?php print $footer_message ?>  <?php print $footer ?></div><?php print $closure ?></body></html>
<?php// $Id$/** * @file *   Add language handling functionality and enables the translation of the *   user interface to languages other than English. * *   When enabled, multiple languages can be set up. The site interface *   can be displayed in different languages, as well as nodes can have languages *   assigned. The setup of languages and translations is completely web based. *   Gettext portable object files are supported. */// ---------------------------------------------------------------------------------// Hook implementations/** * Implementation of hook_help(). */function locale_help($path, $arg) {  switch ($path) {    case 'admin/help#locale':      $output = '<p>'. t('The locale module allows your Drupal site to be presented in languages other than the default English, a defining feature of multi-lingual websites. The locale module works by examining text as it is about to be displayed: when a translation of the text is available in the language to be displayed, the translation is displayed rather than the original text. When a translation is unavailable, the original text is displayed, and then stored for later review by a translator.') .'</p>';      $output .= '<p>'. t('Beyond translation of the Drupal interface, the locale module provides a feature set tailored to the needs of a multi-lingual site. Language negotiation allows your site to automatically change language based on the domain or path used for each request. Users may (optionally) select their preferred language on their <em>My account</em> page, and your site can be configured to honor a web browser\'s preferred language settings. Your site content can be created in (and translated to) any enabled language, and each post may have a language-appropriate alias for each of its translations. The locale module works in concert with the <a href="@content-help">content translation module</a> to manage translated content.', array('@content-help' => url('admin/help/translation'))) .'</p>';      $output .= '<p>'. t('Translations may be provided by:') .'</p>';      $output .= '<ul><li>'. t("translating the original text via the locale module's integrated web interface, or") .'</li>';      $output .= '<li>'. t('importing files from a set of existing translations, known as a translation package. A translation package enables the display of a specific version of Drupal in a specific language, and contain files in the Gettext Portable Object (<em>.po</em>) format. Although not all languages are available for every version of Drupal, translation packages for many languages are available for download from the <a href="@translations">Drupal translation page</a>.', array('@translations' => 'http://drupal.org/project/translations')) .'</li></ul>';      $output .= '<p>'. t('If an existing translation package does not meet your needs, the Gettext Portable Object (<em>.po</em>) files within a package may be modified, or new <em>.po</em> files may be created, using a desktop Gettext editor. The locale module\'s <a href="@import">import</a> feature allows the translated strings from a new or modified <em>.po</em> file to be added to your site. The locale module\'s <a href="@export">export</a> feature generates files from your site\'s translated strings, that can either be shared with others or edited offline by a Gettext translation editor.', array('@import' => url('admin/build/translate/import'), '@export' => url('admin/build/translate/export'))) .'</p>';      $output .= '<p>'. t('For more information, see the online handbook entry for <a href="@locale">Locale module</a>.', array('@locale' => 'http://drupal.org/handbook/modules/locale/')) .'</p>';      return $output;    case 'admin/settings/language':      $output = '<p>'. t("This page provides an overview of your site's enabled languages. If multiple languages are available and enabled, the text on your site interface may be translated, registered users may select their preferred language on the <em>My account</em> page, and site authors may indicate a specific language when creating posts. The site's default language is used for anonymous visitors and for users who have not selected a preferred language.") .'</p>';      $output .= '<p>'. t('For each language available on the site, use the <em>edit</em> link to configure language details, including name, an optional language-specific path or domain, and whether the language is natively presented either left-to-right or right-to-left. These languages also appear in the <em>Language</em> selection when creating a post of a content type with multilingual support.') .'</p>';      $output .= '<p>'. t('Use the <a href="@add-language">add language page</a> to enable additional languages (and automatically import files from a translation package, if available), the <a href="@search">translate interface page</a> to locate strings for manual translation, or the <a href="@import">import page</a> to add translations from individual <em>.po</em> files. A number of contributed translation packages containing <em>.po</em> files are available on the <a href="@translations">Drupal.org translations page</a>.', array('@add-language' => url('admin/settings/language/add'), '@search' => url('admin/build/translate/search'), '@import' => url('admin/build/translate/import'), '@translations' => 'http://drupal.org/project/translations')) .'</p>';      return $output;    case 'admin/settings/language/add':      return '<p>'. t('Add all languages to be supported by your site. If your desired language is not available in the <em>Language name</em> drop-down, click <em>Custom language</em> and provide a language code and other details manually. When providing a language code manually, be sure to enter a standardized language code, since this code may be used by browsers to determine an appropriate display language.') .'</p>';    case 'admin/settings/language/configure':      $output = '<p>'. t("Language negotiation settings determine the site's presentation language. Available options include:") .'</p>';      $output .= '<ul><li>'. t('<strong>None.</strong> The default language is used for site presentation, though users may (optionally) select a preferred language on the <em>My Account</em> page. (User language preferences will be used for site e-mails, if available.)') .'</li>';      $output .= '<li>'. t('<strong>Path prefix only.</strong> The presentation language is determined by examining the path for a language code or other custom string that matches the path prefix (if any) specified for each language. If a suitable prefix is not identified, the default language is used. <em>Example: "example.com/de/contact" sets presentation language to German based on the use of "de" within the path.</em>') .'</li>';      $output .= '<li>'. t("<strong>Path prefix with language fallback.</strong> The presentation language is determined by examining the path for a language code or other custom string that matches the path prefix (if any) specified for each language. If a suitable prefix is not identified, the display language is determined by the user's language preferences from the <em>My Account</em> page, or by the browser's language settings. If a presentation language cannot be determined, the default language is used.") .'</li>';      $output .= '<li>'. t('<strong>Domain name only.</strong> The presentation language is determined by examining the domain used to access the site, and comparing it to the language domain (if any) specified for each language. If a match is not identified, the default language is used. <em>Example: "http://de.example.com/contact" sets presentation language to German based on the use of "http://de.example.com" in the domain.</em>') .'</li></ul>';      $output .= '<p>'. t('The path prefix or domain name for a language may be set by editing the <a href="@languages">available languages</a>. In the absence of an appropriate match, the site is displayed in the <a href="@languages">default language</a>.', array('@languages' => url('admin/settings/language'))) .'</p>';      return $output;    case 'admin/build/translate':      $output = '<p>'. t('This page provides an overview of available translatable strings. Drupal displays translatable strings in text groups; modules may define additional text groups containing other translatable strings. Because text groups provide a method of grouping related strings, they are often used to focus translation efforts on specific areas of the Drupal interface.') .'</p>';      $output .= '<p>'. t('Review the <a href="@languages">languages page</a> for more information on adding support for additional languages.', array('@languages' => url('admin/settings/language'))) .'</p>';      return $output;    case 'admin/build/translate/import':      $output = '<p>'. t('This page imports the translated strings contained in an individual Gettext Portable Object (<em>.po</em>) file. Normally distributed as part of a translation package (each translation package may contain several <em>.po</em> files), a <em>.po</em> file may need to be imported after off-line editing in a Gettext translation editor. Importing an individual <em>.po</em> file may be a lengthy process.') .'</p>';      $output .= '<p>'. t('Note that the <em>.po</em> files within a translation package are imported automatically (if available) when new modules or themes are enabled, or as new languages are added. Since this page only allows the import of one <em>.po</em> file at a time, it may be simpler to download and extract a translation package into your Drupal installation directory and <a href="@language-add">add the language</a> (which automatically imports all <em>.po</em> files within the package). Translation packages are available for download on the <a href="@translations">Drupal translation page</a>.', array('@language-add' => url('admin/settings/language/add'), '@translations' => 'http://drupal.org/project/translations')) .'</p>';      return $output;    case 'admin/build/translate/export':      return '<p>'. t('This page exports the translated strings used by your site. An export file may be in Gettext Portable Object (<em>.po</em>) form, which includes both the original string and the translation (used to share translations with others), or in Gettext Portable Object Template (<em>.pot</em>) form, which includes the original strings only (used to create new translations with a Gettext translation editor).') .'</p>';    case 'admin/build/translate/search':      return '<p>'. t('This page allows a translator to search for specific translated and untranslated strings, and is used when creating or editing translations. (Note: For translation tasks involving many strings, it may be more convenient to <a href="@export">export</a> strings for off-line editing in a desktop Gettext translation editor.) Searches may be limited to strings found within a specific text group or in a specific language.', array('@export' => url('admin/build/translate/export'))) .'</p>';    case 'admin/build/block/configure':      if ($arg[4] == 'locale' && $arg[5] == 0) {        return '<p>'. t('This block is only shown if <a href="@languages">at least two languages are enabled</a> and <a href="@configuration">language negotiation</a> is set to something other than <em>None</em>.', array('@languages' => url('admin/settings/language'), '@configuration' => url('admin/settings/language/configure'))) .'</p>';      }      break;  }}/** * Implementation of hook_menu(). * * Locale module only provides administrative menu items, so all * menu items are invoked through locale_inc_callback(). */function locale_menu() {  // Manage languages  $items['admin/settings/language'] = array(    'title' => 'Languages',    'description' => 'Configure languages for content and the user interface.',    'page callback' => 'locale_inc_callback',    'page arguments' => array('drupal_get_form', 'locale_languages_overview_form'),    'access arguments' => array('administer languages'),  );  $items['admin/settings/language/overview'] = array(    'title' => 'List',    'weight' => 0,    'type' => MENU_DEFAULT_LOCAL_TASK,  );  $items['admin/settings/language/add'] = array(    'title' => 'Add language',    'page callback' => 'locale_inc_callback',    'page arguments' => array('locale_languages_add_screen'), // two forms concatenated    'access arguments' => array('administer languages'),    'weight' => 5,    'type' => MENU_LOCAL_TASK,  );  $items['admin/settings/language/configure'] = array(    'title' => 'Configure',    'page callback' => 'locale_inc_callback',    'page arguments' => array('drupal_get_form', 'locale_languages_configure_form'),    'access arguments' => array('administer languages'),    'weight' => 10,    'type' => MENU_LOCAL_TASK,  );  $items['admin/settings/language/edit/%'] = array(    'title' => 'Edit language',    'page callback' => 'locale_inc_callback',    'page arguments' => array('drupal_get_form', 'locale_languages_edit_form', 4),    'access arguments' => array('administer languages'),    'type' => MENU_CALLBACK,  );  $items['admin/settings/language/delete/%'] = array(    'title' => 'Confirm',    'page callback' => 'locale_inc_callback',    'page arguments' => array('drupal_get_form', 'locale_languages_delete_form', 4),    'access arguments' => array('administer languages'),    'type' => MENU_CALLBACK,  );  // Translation functionality  $items['admin/build/translate'] = array(    'title' => 'Translate interface',    'description' => 'Translate the built in interface and optionally other text.',    'page callback' => 'locale_inc_callback',    'page arguments' => array('locale_translate_overview_screen'), // not a form, just a table    'access arguments' => array('translate interface'),  );  $items['admin/build/translate/overview'] = array(    'title' => 'Overview',    'weight' => 0,    'type' => MENU_DEFAULT_LOCAL_TASK,  );  $items['admin/build/translate/search'] = array(    'title' => 'Search',    'weight' => 10,    'type' => MENU_LOCAL_TASK,    'page callback' => 'locale_inc_callback',    'page arguments' => array('locale_translate_seek_screen'), // search results and form concatenated    'access arguments' => array('translate interface'),  );  $items['admin/build/translate/import'] = array(    'title' => 'Import',    'page callback' => 'locale_inc_callback',    'page arguments' => array('drupal_get_form', 'locale_translate_import_form'),    'access arguments' => array('translate interface'),    'weight' => 20,    'type' => MENU_LOCAL_TASK,  );  $items['admin/build/translate/export'] = array(    'title' => 'Export',    'page callback' => 'locale_inc_callback',    'page arguments' => array('locale_translate_export_screen'), // possibly multiple forms concatenated    'access arguments' => array('translate interface'),    'weight' => 30,    'type' => MENU_LOCAL_TASK,  );  $items['admin/build/translate/edit/%'] = array(    'title' => 'Edit string',    'page callback' => 'locale_inc_callback',    'page arguments' => array('drupal_get_form', 'locale_translate_edit_form', 4),    'access arguments' => array('translate interface'),    'type' => MENU_CALLBACK,  );  $items['admin/build/translate/delete/%'] = array(    'title' => 'Delete string',    'page callback' => 'locale_inc_callback',    'page arguments' => array('locale_translate_delete_page', 4),    'access arguments' => array('translate interface'),    'type' => MENU_CALLBACK,  );  return $items;}/** * Wrapper function to be able to set callbacks in locale.inc */function locale_inc_callback() {  $args = func_get_args();  $function = array_shift($args);  include_once './includes/locale.inc';  return call_user_func_array($function, $args);}/** * Implementation of hook_perm(). */function locale_perm() {  return array('administer languages', 'translate interface');}/** * Implementation of hook_locale(). */function locale_locale($op = 'groups') {  switch ($op) {    case 'groups':      return array('default' => t('Built-in interface'));  }}/** * Implementation of hook_user(). */function locale_user($type, $edit, &$user, $category = NULL) {  global $language;  // If we have more then one language and either creating a user on the  // admin interface or edit the user, show the language selector.  if (variable_get('language_count', 1) > 1 && ($type == 'register' && user_access('administer users') || $type == 'form' && $category == 'account' )) {    $languages = language_list('enabled');    $languages = $languages[1];    // If the user is being created, we set the user language to the page language.    $user_preferred_language = $user ? user_preferred_language($user) : $language;    $names = array();    foreach ($languages as $langcode => $item) {      $name = t($item->name);      $names[check_plain($langcode)] = check_plain($name . ($item->native != $name ? ' ('. $item->native .')' : ''));    }    $form['locale'] = array(      '#type' => 'fieldset',      '#title' => t('Language settings'),      '#weight' => 1,    );    // Get language negotiation settings.    $mode = variable_get('language_negotiation', LANGUAGE_NEGOTIATION_NONE);    $form['locale']['language'] = array(      '#type' => (count($names) <= 5 ? 'radios' : 'select'),      '#title' => t('Language'),      '#default_value' => check_plain($user_preferred_language->language),      '#options' => $names,      '#description' => ($mode == LANGUAGE_NEGOTIATION_PATH) ? t("This account's default language for e-mails, and preferred language for site presentation.") : t("This account's default language for e-mails."),    );    return $form;  }}/** * Implementation of hook_form_alter(). Adds language fields to forms. */function locale_form_alter(&$form, $form_state, $form_id) {  switch ($form_id) {    // Language field for paths    case 'path_admin_form':      $form['language'] = array(        '#type' => 'select',        '#title' => t('Language'),        '#options' => array('' => t('All languages')) + locale_language_list('name'),        '#default_value' => $form['language']['#value'],        '#weight' => -10,        '#description' => t('A path alias set for a specific language will always be used when displaying this page in that language, and takes precedence over path aliases set for <em>All languages</em>.'),      );      break;    // Language setting for content types    case 'node_type_form':      if (isset($form['identity']['type'])) {        $form['workflow']['language_content_type'] = array(          '#type' => 'radios',          '#title' => t('Multilingual support'),          '#default_value' => variable_get('language_content_type_'. $form['#node_type']->type, 0),          '#options' => array(t('Disabled'), t('Enabled')),          '#description' => t('Enable multilingual support for this content type. If enabled, a language selection field will be added to the editing form, allowing you to select from one of the <a href="!languages">enabled languages</a>. If disabled, new posts are saved with the default language. Existing content will not be affected by changing this option.', array('!languages' => url('admin/settings/language'))),        );      }      break;    // Language field for nodes    default:      if (isset($form['#id']) && $form['#id'] == 'node-form') {        if (isset($form['#node']->type) && variable_get('language_content_type_'. $form['#node']->type, 0)) {          $form['language'] = array(            '#type' => 'select',            '#title' => t('Language'),            '#default_value' => (isset($form['#node']->language) ? $form['#node']->language : ''),            '#options' => array('' => t('Language neutral')) + locale_language_list('name'),          );        }        // Node type without language selector: assign the default for new nodes        elseif (!isset($form['#node']->nid)) {          $default = language_default();          $form['language'] = array(            '#type' => 'value',            '#value' => $default->language          );        }      }  }}/** * Implementation of hook_theme() */function locale_theme() {  return array(    'locale_languages_overview_form' => array(      'arguments' => array('form' => array()),    ),  );}/** * Implementation of hook_node_type(). */function locale_node_type($op, $info) {  if ($op == 'delete') {    variable_del('language_content_type_'. $info->type);  }}// ---------------------------------------------------------------------------------// Locale core functionality/** * Provides interface translation services. * * This function is called from t() to translate a string if needed. * * @param $string *   A string to look up translation for. If omitted, all the *   cached strings will be returned in all languages already *   used on the page. * @param $langcode *   Language code to use for the lookup. * @param $reset *   Set to TRUE to reset the in-memory cache. */function locale($string = NULL, $langcode = NULL, $reset = FALSE) {  global $language;  static $locale_t;  if ($reset) {    // Reset in-memory cache.    $locale_t = NULL;  }  if (!isset($string)) {    // Return all cached strings if no string was specified    return $locale_t;  }  $langcode = isset($langcode) ? $langcode : $language->language;  // Store database cached translations in a static var.  if (!isset($locale_t[$langcode])) {    $locale_t[$langcode] = array();    // Disabling the usage of string caching allows a module to watch for    // the exact list of strings used on a page. From a performance    // perspective that is a really bad idea, so we have no user    // interface for this. Be careful when turning this option off!    if (variable_get('locale_cache_strings', 1) == 1) {      if ($cache = cache_get('locale:'. $langcode, 'cache')) {        $locale_t[$langcode] = $cache->data;      }      elseif (lock_acquire('locale_cache_' . $langcode)) {        // Refresh database stored cache of translations for given language.        // We only store short strings used in current version, to improve        // performance and consume less memory.        $result = db_query("SELECT s.source, t.translation, t.language FROM {locales_source} s LEFT JOIN {locales_target} t ON s.lid = t.lid AND t.language = '%s' WHERE s.textgroup = 'default' AND s.version = '%s' AND LENGTH(s.source) < 75", $langcode, VERSION);        while ($data = db_fetch_object($result)) {          $locale_t[$langcode][$data->source] = (empty($data->translation) ? TRUE : $data->translation);        }        cache_set('locale:'. $langcode, $locale_t[$langcode]);        lock_release('locale_cache_' . $langcode);      }    }  }  // If we have the translation cached, skip checking the database  if (!isset($locale_t[$langcode][$string])) {    // We do not have this translation cached, so get it from the DB.    $translation = db_fetch_object(db_query("SELECT s.lid, t.translation, s.version FROM {locales_source} s LEFT JOIN {locales_target} t ON s.lid = t.lid AND t.language = '%s' WHERE s.source = '%s' AND s.textgroup = 'default'", $langcode, $string));    if ($translation) {      // We have the source string at least.      // Cache translation string or TRUE if no translation exists.      $locale_t[$langcode][$string] = (empty($translation->translation) ? TRUE : $translation->translation);      if ($translation->version != VERSION) {        // This is the first use of this string under current Drupal version. Save version        // and clear cache, to include the string into caching next time. Saved version is        // also a string-history information for later pruning of the tables.        db_query("UPDATE {locales_source} SET version = '%s' WHERE lid = %d", VERSION, $translation->lid);        cache_clear_all('locale:', 'cache', TRUE);      }    }    else {      // We don't have the source string, cache this as untranslated.      db_query("INSERT INTO {locales_source} (location, source, textgroup, version) VALUES ('%s', '%s', 'default', '%s')", request_uri(), $string, VERSION);      $locale_t[$langcode][$string] = TRUE;      // Clear locale cache so this string can be added in a later request.      cache_clear_all('locale:', 'cache', TRUE);    }  }  return ($locale_t[$langcode][$string] === TRUE ? $string : $locale_t[$langcode][$string]);}/** * Returns plural form index for a specific number. * * The index is computed from the formula of this language. * * @param $count *   Number to return plural for. * @param $langcode *   Optional language code to translate to a language other than *   what is used to display the page. */function locale_get_plural($count, $langcode = NULL) {  global $language;  static $locale_formula, $plurals = array();  $langcode = $langcode ? $langcode : $language->language;  if (!isset($plurals[$langcode][$count])) {    if (!isset($locale_formula)) {      $language_list = language_list();      $locale_formula[$langcode] = $language_list[$langcode]->formula;    }    if ($locale_formula[$langcode]) {      $n = $count;      $plurals[$langcode][$count] = @eval('return intval('. $locale_formula[$langcode] .');');      return $plurals[$langcode][$count];    }    else {      $plurals[$langcode][$count] = -1;      return -1;    }  }  return $plurals[$langcode][$count];}/** * Returns a language name */function locale_language_name($lang) {  static $list = NULL;  if (!isset($list)) {    $list = locale_language_list();  }  return ($lang && isset($list[$lang])) ? $list[$lang] : t('All');}/** * Returns array of language names * * @param $field *   'name' => names in current language, localized *   'native' => native names * @param $all *   Boolean to return all languages or only enabled ones */function locale_language_list($field = 'name', $all = FALSE) {  if ($all) {    $languages = language_list();  }  else {    $languages = language_list('enabled');    $languages = $languages[1];  }  $list = array();  foreach ($languages as $language) {    $list[$language->language] = ($field == 'name') ? t($language->name) : $language->$field;  }  return $list;}/** * Imports translations when new modules or themes are installed or enabled. * * This function will either import translation for the component change * right away, or start a batch if more files need to be imported. * * @param $components *   An array of component (theme and/or module) names to import *   translations for. */function locale_system_update($components) {  include_once 'includes/locale.inc';  if ($batch = locale_batch_by_component($components)) {    batch_set($batch);  }}/** * Update JavaScript translation file, if required, and add it to the page. * * This function checks all JavaScript files currently added via drupal_add_js() * and invokes parsing if they have not yet been parsed for Drupal.t() * and Drupal.formatPlural() calls. Also refreshes the JavaScript translation * file if necessary, and adds it to the page. */function locale_update_js_files() {  global $language;  $dir = file_create_path(variable_get('locale_js_directory', 'languages'));  $parsed = variable_get('javascript_parsed', array());  // The first three parameters are NULL in order to get an array with all  // scopes. This is necessary to prevent recreation of JS translation files  // when new files are added for example in the footer.  $javascript = drupal_add_js(NULL, NULL, NULL);  $files = $new_files = FALSE;  foreach ($javascript as $scope) {    foreach ($scope as $type => $data) {      if ($type != 'setting' && $type != 'inline') {        foreach ($data as $filepath => $info) {          $files = TRUE;          if (!in_array($filepath, $parsed)) {            // Don't parse our own translations files.            if (substr($filepath, 0, strlen($dir)) != $dir) {              locale_inc_callback('_locale_parse_js_file', $filepath);              $parsed[] = $filepath;              $new_files = TRUE;            }          }        }      }    }  }  // If there are any new source files we parsed, invalidate existing  // JavaScript translation files for all languages, adding the refresh  // flags into the existing array.  if ($new_files) {    $parsed += locale_inc_callback('_locale_invalidate_js');  }  // If necessary, rebuild the translation file for the current language.  if (!empty($parsed['refresh:'. $language->language])) {    // Don't clear the refresh flag on failure, so that another try will    // be performed later.    if (locale_inc_callback('_locale_rebuild_js')) {      unset($parsed['refresh:'. $language->language]);    }    // Store any changes after refresh was attempted.    variable_set('javascript_parsed', $parsed);  }  // If no refresh was attempted, but we have new source files, we need  // to store them too. This occurs if current page is in English.  else if ($new_files) {    variable_set('javascript_parsed', $parsed);  }  // Add the translation JavaScript file to the page.  if ($files && !empty($language->javascript)) {    drupal_add_js($dir .'/'. $language->language .'_'. $language->javascript .'.js', 'core');  }}// ---------------------------------------------------------------------------------// Language switcher block/** * Implementation of hook_block(). * Displays a language switcher. Translation links may be provided by other modules. */function locale_block($op = 'list', $delta = 0) {  if ($op == 'list') {    $block[0]['info'] = t('Language switcher');    // Not worth caching.    $block[0]['cache'] = BLOCK_NO_CACHE;    return $block;  }  // Only show if we have at least two languages and language dependent  // web addresses, so we can actually link to other language versions.  elseif ($op == 'view' && variable_get('language_count', 1) > 1 && variable_get('language_negotiation', LANGUAGE_NEGOTIATION_NONE) != LANGUAGE_NEGOTIATION_NONE) {    $path = drupal_is_front_page() ? '<front>' : $_GET['q'];    $languages = language_list('enabled');    $links = array();    foreach ($languages[1] as $language) {      $links[$language->language] = array(        'href'       => $path,        'title'      => $language->native,        'language'   => $language,        'attributes' => array('class' => 'language-link'),      );    }    // Allow modules to provide translations for specific links.    // A translation link may need to point to a different path or use    // a translated link text before going through l(), which will just    // handle the path aliases.    drupal_alter('translation_link', $links, $path);    $block['subject'] = t('Languages');    $block['content'] = theme('links', $links, array());    return $block;  }}
<?php// $Id$/** * @file * Administrative page callbacks for the dblog module. *//** * dblog module settings form. * * @ingroup forms * @see system_settings_form() */function dblog_admin_settings() {  $form['dblog_row_limit'] = array(    '#type' => 'select',    '#title' => t('Discard log entries above the following row limit'),    '#default_value' => variable_get('dblog_row_limit', 1000),    '#options' => drupal_map_assoc(array(100, 1000, 10000, 100000, 1000000)),    '#description' => t('The maximum number of rows to keep in the database log. Older entries will be automatically discarded. (Requires a correctly configured <a href="@cron">cron maintenance task</a>.)', array('@cron' => url('admin/reports/status')))  );  return system_settings_form($form);}/** * Menu callback; displays a listing of log messages. */function dblog_overview() {  $filter = dblog_build_filter_query();  $rows = array();  $icons = array(    WATCHDOG_DEBUG    => '',    WATCHDOG_INFO     => '',    WATCHDOG_NOTICE   => '',    WATCHDOG_WARNING  => theme('image', 'misc/watchdog-warning.png', t('warning'), t('warning')),    WATCHDOG_ERROR    => theme('image', 'misc/watchdog-error.png', t('error'), t('error')),    WATCHDOG_CRITICAL => theme('image', 'misc/watchdog-error.png', t('critical'), t('critical')),    WATCHDOG_ALERT    => theme('image', 'misc/watchdog-error.png', t('alert'), t('alert')),    WATCHDOG_EMERG    => theme('image', 'misc/watchdog-error.png', t('emergency'), t('emergency')),  );  $classes = array(    WATCHDOG_DEBUG    => 'dblog-debug',    WATCHDOG_INFO     => 'dblog-info',    WATCHDOG_NOTICE   => 'dblog-notice',    WATCHDOG_WARNING  => 'dblog-warning',    WATCHDOG_ERROR    => 'dblog-error',    WATCHDOG_CRITICAL => 'dblog-critical',    WATCHDOG_ALERT    => 'dblog-alert',    WATCHDOG_EMERG    => 'dblog-emerg',  );  $output = drupal_get_form('dblog_filter_form');  $header = array(    ' ',    array('data' => t('Type'), 'field' => 'w.type'),    array('data' => t('Date'), 'field' => 'w.wid', 'sort' => 'desc'),    t('Message'),    array('data' => t('User'), 'field' => 'u.name'),    array('data' => t('Operations')),  );  $sql = "SELECT w.wid, w.uid, w.severity, w.type, w.timestamp, w.message, w.variables, w.link, u.name FROM {watchdog} w INNER JOIN {users} u ON w.uid = u.uid";  $tablesort = tablesort_sql($header);  if (!empty($filter['where'])) {    $result = pager_query($sql ." WHERE ". $filter['where'] . $tablesort, 50, 0, NULL, $filter['args']);  }  else {    $result = pager_query($sql . $tablesort, 50);  }  while ($dblog = db_fetch_object($result)) {    $rows[] = array('data' =>      array(        // Cells        $icons[$dblog->severity],        t($dblog->type),        format_date($dblog->timestamp, 'small'),        l(truncate_utf8(_dblog_format_message($dblog), 56, TRUE, TRUE), 'admin/reports/event/'. $dblog->wid, array('html' => TRUE)),        theme('username', $dblog),        $dblog->link,      ),      // Attributes for tr      'class' => "dblog-". preg_replace('/[^a-z]/i', '-', $dblog->type) .' '. $classes[$dblog->severity]    );  }  if (!$rows) {    $rows[] = array(array('data' => t('No log messages available.'), 'colspan' => 6));  }  $output .= theme('table', $header, $rows, array('id' => 'admin-dblog'));  $output .= theme('pager', NULL, 50, 0);  return $output;}/** * Menu callback; generic function to display a page of the most frequent * dblog events of a specified type. */function dblog_top($type) {  $header = array(    array('data' => t('Count'), 'field' => 'count', 'sort' => 'desc'),    array('data' => t('Message'), 'field' => 'message')  );  $result = pager_query("SELECT COUNT(wid) AS count, message, variables FROM {watchdog} WHERE type = '%s' GROUP BY message, variables ". tablesort_sql($header), 30, 0, "SELECT COUNT(DISTINCT(message)) FROM {watchdog} WHERE type = '%s'", $type);  $rows = array();  while ($dblog = db_fetch_object($result)) {    $rows[] = array($dblog->count, truncate_utf8(_dblog_format_message($dblog), 56, TRUE, TRUE));  }  if (empty($rows)) {    $rows[] = array(array('data' => t('No log messages available.'), 'colspan' => 2));  }  $output  = theme('table', $header, $rows);  $output .= theme('pager', NULL, 30, 0);  return $output;}/** * Menu callback; displays details about a log message. */function dblog_event($id) {  $severity = watchdog_severity_levels();  $output = '';  $result = db_query('SELECT w.*, u.name, u.uid FROM {watchdog} w INNER JOIN {users} u ON w.uid = u.uid WHERE w.wid = %d', $id);  if ($dblog = db_fetch_object($result)) {    $rows = array(      array(        array('data' => t('Type'), 'header' => TRUE),        t($dblog->type),      ),      array(        array('data' => t('Date'), 'header' => TRUE),        format_date($dblog->timestamp, 'large'),      ),      array(        array('data' => t('User'), 'header' => TRUE),        theme('username', $dblog),      ),      array(        array('data' => t('Location'), 'header' => TRUE),        l($dblog->location, $dblog->location),      ),      array(        array('data' => t('Referrer'), 'header' => TRUE),        l($dblog->referer, $dblog->referer),      ),      array(        array('data' => t('Message'), 'header' => TRUE),        _dblog_format_message($dblog),      ),      array(        array('data' => t('Severity'), 'header' => TRUE),        $severity[$dblog->severity],      ),      array(        array('data' => t('Hostname'), 'header' => TRUE),        check_plain($dblog->hostname),      ),      array(        array('data' => t('Operations'), 'header' => TRUE),        $dblog->link,      ),    );    $attributes = array('class' => 'dblog-event');    $output = theme('table', array(), $rows, $attributes);  }  return $output;}/** * Build query for dblog administration filters based on session. */function dblog_build_filter_query() {  if (empty($_SESSION['dblog_overview_filter'])) {    return;  }  $filters = dblog_filters();  // Build query  $where = $args = array();  foreach ($_SESSION['dblog_overview_filter'] as $key => $filter) {    $filter_where = array();    foreach ($filter as $value) {      $filter_where[] = $filters[$key]['where'];      $args[] = $value;    }    if (!empty($filter_where)) {      $where[] = '('. implode(' OR ', $filter_where) .')';    }  }  $where = !empty($where) ? implode(' AND ', $where) : '';  return array(    'where' => $where,    'args' => $args,  );}/** * List dblog administration filters that can be applied. */function dblog_filters() {  $filters = array();  foreach (_dblog_get_message_types() as $type) {    $types[$type] = $type;  }  if (!empty($types)) {    $filters['type'] = array(      'title' => t('Type'),      'where' => "w.type = '%s'",      'options' => $types,    );  }  $filters['severity'] = array(    'title' => t('Severity'),    'where' => 'w.severity = %d',    'options' => watchdog_severity_levels(),  );  return $filters;}/** * Formats a log message for display. * * @param $dblog *   An object with at least the message and variables properties */function _dblog_format_message($dblog) {  // Legacy messages and user specified text  if ($dblog->variables === 'N;') {    return $dblog->message;  }  // Message to translate with injected variables  else {    return t($dblog->message, unserialize($dblog->variables));  }}/** * Return form for dblog administration filters. * * @ingroup forms * @see dblog_filter_form_submit() * @see dblog_filter_form_validate() */function dblog_filter_form() {  $session = &$_SESSION['dblog_overview_filter'];  $session = is_array($session) ? $session : array();  $filters = dblog_filters();  $form['filters'] = array(    '#type' => 'fieldset',    '#title' => t('Filter log messages'),    '#theme' => 'dblog_filters',    '#collapsible' => TRUE,    '#collapsed' => empty($session),  );  foreach ($filters as $key => $filter) {    $form['filters']['status'][$key] = array(      '#title' => $filter['title'],      '#type' => 'select',      '#multiple' => TRUE,      '#size' => 8,      '#options' => $filter['options'],    );    if (!empty($session[$key])) {      $form['filters']['status'][$key]['#default_value'] = $session[$key];    }  }  $form['filters']['buttons']['submit'] = array(    '#type' => 'submit',    '#value' => t('Filter'),  );  if (!empty($session)) {    $form['filters']['buttons']['reset'] = array(      '#type' => 'submit',      '#value' => t('Reset')    );  }  return $form;}/** * Validate result from dblog administration filter form. */function dblog_filter_form_validate($form, &$form_state) {  if ($form_state['values']['op'] == t('Filter') && empty($form_state['values']['type']) && empty($form_state['values']['severity'])) {    form_set_error('type', t('You must select something to filter by.'));  }}/** * Process result from dblog administration filter form. */function dblog_filter_form_submit($form, &$form_state) {  $op = $form_state['values']['op'];  $filters = dblog_filters();  switch ($op) {    case t('Filter'):      foreach ($filters as $name => $filter) {        if (isset($form_state['values'][$name])) {          $_SESSION['dblog_overview_filter'][$name] = $form_state['values'][$name];        }      }      break;    case t('Reset'):      $_SESSION['dblog_overview_filter'] = array();      break;  }  return 'admin/reports/dblog';}
<?php// $Id$/** * @file page.tpl.php * * Theme implementation to display a single Drupal page. * * Available variables: * * General utility variables: * - $base_path: The base URL path of the Drupal installation. At the very *   least, this will always default to /. * - $css: An array of CSS files for the current page. * - $directory: The directory the theme is located in, e.g. themes/garland or *   themes/garland/minelli. * - $is_front: TRUE if the current page is the front page. Used to toggle the mission statement. * - $logged_in: TRUE if the user is registered and signed in. * - $is_admin: TRUE if the user has permission to access administration pages. * * Page metadata: * - $language: (object) The language the site is being displayed in. *   $language->language contains its textual representation. *   $language->dir contains the language direction. It will either be 'ltr' or 'rtl'. * - $head_title: A modified version of the page title, for use in the TITLE tag. * - $head: Markup for the HEAD section (including meta tags, keyword tags, and *   so on). * - $styles: Style tags necessary to import all CSS files for the page. * - $scripts: Script tags necessary to load the JavaScript files and settings *   for the page. * - $body_classes: A set of CSS classes for the BODY tag. This contains flags *   indicating the current layout (multiple columns, single column), the current *   path, whether the user is logged in, and so on. * * Site identity: * - $front_page: The URL of the front page. Use this instead of $base_path, *   when linking to the front page. This includes the language domain or prefix. * - $logo: The path to the logo image, as defined in theme configuration. * - $site_name: The name of the site, empty when display has been disabled *   in theme settings. * - $site_slogan: The slogan of the site, empty when display has been disabled *   in theme settings. * - $mission: The text of the site mission, empty when display has been disabled *   in theme settings. * * Navigation: * - $search_box: HTML to display the search box, empty if search has been disabled. * - $primary_links (array): An array containing primary navigation links for the *   site, if they have been configured. * - $secondary_links (array): An array containing secondary navigation links for *   the site, if they have been configured. * * Page content (in order of occurrance in the default page.tpl.php): * - $left: The HTML for the left sidebar. * * - $breadcrumb: The breadcrumb trail for the current page. * - $title: The page title, for use in the actual HTML content. * - $help: Dynamic help text, mostly for admin pages. * - $messages: HTML for status and error messages. Should be displayed prominently. * - $tabs: Tabs linking to any sub-pages beneath the current page (e.g., the view *   and edit tabs when displaying a node). * * - $content: The main content of the current Drupal page. * * - $right: The HTML for the right sidebar. * * Footer/closing data: * - $feed_icons: A string of all feed icons for the current page. * - $footer_message: The footer message as defined in the admin settings. * - $footer : The footer region. * - $closure: Final closing markup from any modules that have altered the page. *   This variable should always be output last, after all other dynamic content. * * @see template_preprocess() * @see template_preprocess_page() */?><!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.0 Strict//EN"  "http://www.w3.org/TR/xhtml1/DTD/xhtml1-strict.dtd"><html xmlns="http://www.w3.org/1999/xhtml" xml:lang="<?php print $language->language ?>" lang="<?php print $language->language ?>" dir="<?php print $language->dir ?>"><head>  <?php print $head; ?>  <title><?php print $head_title; ?></title>  <?php print $styles; ?>  <?php print $scripts; ?>  <script type="text/javascript"><?php /* Needed to avoid Flash of Unstyled Content in IE */ ?> </script></head><body class="<?php print $body_classes; ?>">  <div id="page">    <div id="header">      <div id="logo-title">        <?php if (!empty($logo)): ?>          <a href="<?php print $front_page; ?>" title="<?php print t('Home'); ?>" rel="home" id="logo">            <img src="<?php print $logo; ?>" alt="<?php print t('Home'); ?>" />          </a>        <?php endif; ?>        <div id="name-and-slogan">          <?php if (!empty($site_name)): ?>            <h1 id="site-name">              <a href="<?php print $front_page ?>" title="<?php print t('Home'); ?>" rel="home"><span><?php print $site_name; ?></span></a>            </h1>          <?php endif; ?>          <?php if (!empty($site_slogan)): ?>            <div id="site-slogan"><?php print $site_slogan; ?></div>          <?php endif; ?>        </div> <!-- /name-and-slogan -->      </div> <!-- /logo-title -->      <?php if (!empty($search_box)): ?>        <div id="search-box"><?php print $search_box; ?></div>      <?php endif; ?>      <?php if (!empty($header)): ?>        <div id="header-region">          <?php print $header; ?>        </div>      <?php endif; ?>    </div> <!-- /header -->    <div id="container" class="clear-block">      <div id="navigation" class="menu <?php if (!empty($primary_links)) { print "withprimary"; } if (!empty($secondary_links)) { print " withsecondary"; } ?> ">        <?php if (!empty($primary_links)): ?>          <div id="primary" class="clear-block">            <?php print theme('links', $primary_links, array('class' => 'links primary-links')); ?>          </div>        <?php endif; ?>        <?php if (!empty($secondary_links)): ?>          <div id="secondary" class="clear-block">            <?php print theme('links', $secondary_links, array('class' => 'links secondary-links')); ?>          </div>        <?php endif; ?>      </div> <!-- /navigation -->      <?php if (!empty($left)): ?>        <div id="sidebar-left" class="column sidebar">          <?php print $left; ?>        </div> <!-- /sidebar-left -->      <?php endif; ?>      <div id="main" class="column"><div id="main-squeeze">        <?php if (!empty($breadcrumb)): ?><div id="breadcrumb"><?php print $breadcrumb; ?></div><?php endif; ?>        <?php if (!empty($mission)): ?><div id="mission"><?php print $mission; ?></div><?php endif; ?>        <div id="content">          <?php if (!empty($title)): ?><h1 class="title" id="page-title"><?php print $title; ?></h1><?php endif; ?>          <?php if (!empty($tabs)): ?><div class="tabs"><?php print $tabs; ?></div><?php endif; ?>          <?php if (!empty($messages)): print $messages; endif; ?>          <?php if (!empty($help)): print $help; endif; ?>          <div id="content-content" class="clear-block">            <?php print $content; ?>          </div> <!-- /content-content -->          <?php print $feed_icons; ?>        </div> <!-- /content -->      </div></div> <!-- /main-squeeze /main -->      <?php if (!empty($right)): ?>        <div id="sidebar-right" class="column sidebar">          <?php print $right; ?>        </div> <!-- /sidebar-right -->      <?php endif; ?>    </div> <!-- /container -->    <div id="footer-wrapper">      <div id="footer">        <?php print $footer_message; ?>        <?php if (!empty($footer)): print $footer; endif; ?>      </div> <!-- /footer -->    </div> <!-- /footer-wrapper -->    <?php print $closure; ?>  </div> <!-- /page --></body></html>
<?php// $Id$/** * @file profile-listing.tpl.php * Default theme implementation for displaying a user and their profile data * for member listing pages. * * @see profile-wrapper.tpl.php *      where all the data is collected and printed out. * * Available variables: * - $picture: Image configured for the account linking to the users page. * - $name: User's account name linking to the users page. * - $profile: Keyed array of all profile fields that are set as visible *   in member list pages (configured by site administrators). It also needs *   to have a value in order to be present. * * Each $field in $profile contains: * - $field->title: Title of the profile field. * - $field->value: Value of the profile field. * - $field->type: Type of the profile field, i.e., checkbox, textfield, *   textarea, selection, list, url or date. * * Since $profile is keyed, a direct print of the field is possible. Not * all accounts may have a value for a profile so do a check first. If a field * of "last_name" was set for the site, the following can be used. * *  <?php if (isset($profile['last_name'])): ?> *    <div class="field last-name"> *      <?php print $profile['last_name']->title; ?>:<br /> *      <?php print $profile['last_name']->value; ?> *    </div> *  <?php endif; ?> * * @see template_preprocess_profile_listing() */?><div class="profile">  <?php print $picture; ?>  <div class="name">    <?php print $name; ?>  </div>  <?php foreach ($profile as $field) : ?>    <div class="field">      <?php print $field->value; ?>    </div>  <?php endforeach; ?></div>
