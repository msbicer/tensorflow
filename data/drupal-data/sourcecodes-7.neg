<?php// $Id$/** * @file * Admin page callbacks for the block module. *//** * Menu callback for admin/build/block. */function block_admin_display($theme = NULL) {  global $custom_theme;  // If non-default theme configuration has been selected, set the custom theme.  $custom_theme = isset($theme) ? $theme : variable_get('theme_default', 'garland');  // Fetch and sort blocks  $blocks = _block_rehash();  usort($blocks, '_block_compare');  return drupal_get_form('block_admin_display_form', $blocks, $theme);}/** * Generate main blocks administration form. */function block_admin_display_form(&$form_state, $blocks, $theme = NULL) {  global $theme_key, $custom_theme;  // Add CSS  drupal_add_css(drupal_get_path('module', 'block') .'/block.css', 'module', 'all', FALSE);  // If non-default theme configuration has been selected, set the custom theme.  $custom_theme = isset($theme) ? $theme : variable_get('theme_default', 'garland');  init_theme();  $throttle = module_exists('throttle');  $block_regions = system_region_list($theme_key) + array(BLOCK_REGION_NONE => '<'. t('none') .'>');  // Weights range from -delta to +delta, so delta should be at least half  // of the amount of blocks present. This makes sure all blocks in the same  // region get an unique weight.  $weight_delta = round(count($blocks) / 2);  // Build form tree  $form = array(    '#action' => arg(4) ? url('admin/build/block/list/'. $theme_key) : url('admin/build/block'),    '#tree' => TRUE,  );  foreach ($blocks as $i => $block) {    $key = $block['module'] .'_'. $block['delta'];    $form[$key]['module'] = array(      '#type' => 'value',      '#value' => $block['module'],    );    $form[$key]['delta'] = array(      '#type' => 'value',      '#value' => $block['delta'],    );    $form[$key]['info'] = array(      '#value' => check_plain($block['info'])    );    $form[$key]['theme'] = array(      '#type' => 'hidden',      '#value' => $theme_key    );    $form[$key]['weight'] = array(      '#type' => 'weight',      '#default_value' => $block['weight'],      '#delta' => $weight_delta,    );    $form[$key]['region'] = array(      '#type' => 'select',      '#default_value' => $block['region'],      '#options' => $block_regions,    );    if ($throttle) {      $form[$key]['throttle'] = array('#type' => 'checkbox', '#default_value' => isset($block['throttle']) ? $block['throttle'] : FALSE);    }    $form[$key]['configure'] = array('#value' => l(t('configure'), 'admin/build/block/configure/'. $block['module'] .'/'. $block['delta']));    if ($block['module'] == 'block') {      $form[$key]['delete'] = array('#value' => l(t('delete'), 'admin/build/block/delete/'. $block['delta']));    }  }  $form['submit'] = array(    '#type' => 'submit',    '#value' => t('Save blocks'),  );  return $form;}/** * Process main blocks administration form submission. */function block_admin_display_form_submit($form, &$form_state) {  foreach ($form_state['values'] as $block) {    $block['status'] = $block['region'] != BLOCK_REGION_NONE;    $block['region'] = $block['status'] ? $block['region'] : '';    db_query("UPDATE {blocks} SET status = %d, weight = %d, region = '%s', throttle = %d WHERE module = '%s' AND delta = '%s' AND theme = '%s'", $block['status'], $block['weight'], $block['region'], isset($block['throttle']) ? $block['throttle'] : 0, $block['module'], $block['delta'], $block['theme']);  }  drupal_set_message(t('The block settings have been updated.'));  cache_clear_all();}/** * Helper function for sorting blocks on admin/build/block. * * Active blocks are sorted by region, then by weight. * Disabled blocks are sorted by name. */function _block_compare($a, $b) {  global $theme_key;  static $regions;  // We need the region list to correctly order by region.  if (!isset($regions)) {    $regions = array_flip(array_keys(system_region_list($theme_key)));    $regions[BLOCK_REGION_NONE] = count($regions);  }  // Separate enabled from disabled.  $status = $b['status'] - $a['status'];  if ($status) {    return $status;  }  // Sort by region (in the order defined by theme .info file).  if ((!empty($a['region']) && !empty($b['region'])) && ($place = ($regions[$a['region']] - $regions[$b['region']]))) {    return $place;  }  // Sort by weight.  $weight = $a['weight'] - $b['weight'];  if ($weight) {    return $weight;  }  // Sort by title.  return strcmp($a['info'], $b['info']);}/** * Menu callback; displays the block configuration form. */function block_admin_configure(&$form_state, $module = NULL, $delta = 0) {  $form['module'] = array('#type' => 'value', '#value' => $module);  $form['delta'] = array('#type' => 'value', '#value' => $delta);  $edit = db_fetch_array(db_query("SELECT pages, visibility, custom, title FROM {blocks} WHERE module = '%s' AND delta = '%s'", $module, $delta));  $form['block_settings'] = array(    '#type' => 'fieldset',    '#title' => t('Block specific settings'),    '#collapsible' => TRUE,  );  $form['block_settings']['title'] = array(    '#type' => 'textfield',    '#title' => t('Block title'),    '#maxlength' => 64,    '#description' => $module == 'block' ? t('The title of the block as shown to the user.') : t('Override the default title for the block. Use <em>&lt;none&gt;</em> to display no title, or leave blank to use the default block title.'),    '#default_value' => $edit['title'],    '#weight' => -18,  );  // Module-specific block configurations.  if ($settings = module_invoke($module, 'block', 'configure', $delta)) {    foreach ($settings as $k => $v) {      $form['block_settings'][$k] = $v;    }  }  // Get the block subject for the page title.  $info = module_invoke($module, 'block', 'list');  if (isset($info[$delta])) {    drupal_set_title(t("'%name' block", array('%name' => $info[$delta]['info'])));  }  // Standard block configurations.  $form['user_vis_settings'] = array(    '#type' => 'fieldset',    '#title' => t('User specific visibility settings'),    '#collapsible' => TRUE,  );  $form['user_vis_settings']['custom'] = array(    '#type' => 'radios',    '#title' => t('Custom visibility settings'),    '#options' => array(      t('Users cannot control whether or not they see this block.'),      t('Show this block by default, but let individual users hide it.'),      t('Hide this block by default but let individual users show it.')    ),    '#description' => t('Allow individual users to customize the visibility of this block in their account settings.'),    '#default_value' => $edit['custom'],  );  // Role-based visibility settings  $default_role_options = array();  $result = db_query("SELECT rid FROM {blocks_roles} WHERE module = '%s' AND delta = '%s'", $module, $delta);  while ($role = db_fetch_object($result)) {    $default_role_options[] = $role->rid;  }  $result = db_query('SELECT rid, name FROM {role} ORDER BY name');  $role_options = array();  while ($role = db_fetch_object($result)) {    $role_options[$role->rid] = $role->name;  }  $form['role_vis_settings'] = array(    '#type' => 'fieldset',    '#title' => t('Role specific visibility settings'),    '#collapsible' => TRUE,  );  $form['role_vis_settings']['roles'] = array(    '#type' => 'checkboxes',    '#title' => t('Show block for specific roles'),    '#default_value' => $default_role_options,    '#options' => $role_options,    '#description' => t('Show this block only for the selected role(s). If you select no roles, the block will be visible to all users.'),  );  $form['page_vis_settings'] = array(    '#type' => 'fieldset',    '#title' => t('Page specific visibility settings'),    '#collapsible' => TRUE,  );  $access = user_access('use PHP for block visibility');  if ($edit['visibility'] == 2 && !$access) {    $form['page_vis_settings'] = array();    $form['page_vis_settings']['visibility'] = array('#type' => 'value', '#value' => 2);    $form['page_vis_settings']['pages'] = array('#type' => 'value', '#value' => $edit['pages']);  }  else {    $options = array(t('Show on every page except the listed pages.'), t('Show on only the listed pages.'));    $description = t("Enter one page per line as Drupal paths. The '*' character is a wildcard. Example paths are %blog for the blog page and %blog-wildcard for every personal blog. %front is the front page.", array('%blog' => 'blog', '%blog-wildcard' => 'blog/*', '%front' => '<front>'));    if ($access) {      $options[] = t('Show if the following PHP code returns <code>TRUE</code> (PHP-mode, experts only).');      $description .= ' '. t('If the PHP-mode is chosen, enter PHP code between %php. Note that executing incorrect PHP-code can break your Drupal site.', array('%php' => '<?php ?>'));    }    $form['page_vis_settings']['visibility'] = array(      '#type' => 'radios',      '#title' => t('Show block on specific pages'),      '#options' => $options,      '#default_value' => $edit['visibility'],    );    $form['page_vis_settings']['pages'] = array(      '#type' => 'textarea',      '#title' => t('Pages'),      '#default_value' => $edit['pages'],      '#description' => $description,    );  }  $form['submit'] = array(    '#type' => 'submit',    '#value' => t('Save block'),  );  return $form;}function block_admin_configure_validate($form, &$form_state) {  if ($form_state['values']['module'] == 'block') {    if (empty($form_state['values']['info']) || db_result(db_query("SELECT COUNT(*) FROM {boxes} WHERE bid != %d AND info = '%s'", $form_state['values']['delta'], $form_state['values']['info']))) {      form_set_error('info', t('Please ensure that each block description is unique.'));    }  }}function block_admin_configure_submit($form, &$form_state) {  if (!form_get_errors()) {    db_query("UPDATE {blocks} SET visibility = %d, pages = '%s', custom = %d, title = '%s' WHERE module = '%s' AND delta = '%s'", $form_state['values']['visibility'], trim($form_state['values']['pages']), $form_state['values']['custom'], $form_state['values']['title'], $form_state['values']['module'], $form_state['values']['delta']);    db_query("DELETE FROM {blocks_roles} WHERE module = '%s' AND delta = '%s'", $form_state['values']['module'], $form_state['values']['delta']);    foreach (array_filter($form_state['values']['roles']) as $rid) {      db_query("INSERT INTO {blocks_roles} (rid, module, delta) VALUES (%d, '%s', '%s')", $rid, $form_state['values']['module'], $form_state['values']['delta']);    }    module_invoke($form_state['values']['module'], 'block', 'save', $form_state['values']['delta'], $form_state['values']);    drupal_set_message(t('The block configuration has been saved.'));    cache_clear_all();    $form_state['redirect'] = 'admin/build/block';    return;  }}/** * Menu callback: display the custom block addition form. */function block_add_block_form(&$form_state) {  return block_admin_configure($form_state, 'block', NULL);}function block_add_block_form_validate($form, &$form_state) {  if (empty($form_state['values']['info']) || db_result(db_query("SELECT COUNT(*) FROM {boxes} WHERE info = '%s'", $form_state['values']['info']))) {    form_set_error('info', t('Please ensure that each block description is unique.'));  }}/** * Save the new custom block. */function block_add_block_form_submit($form, &$form_state) {  db_query("INSERT INTO {boxes} (body, info, format) VALUES ('%s', '%s', %d)", $form_state['values']['body'], $form_state['values']['info'], $form_state['values']['format']);  $delta = db_last_insert_id('boxes', 'bid');  foreach (list_themes() as $key => $theme) {    if ($theme->status) {      db_query("INSERT INTO {blocks} (visibility, pages, custom, title, module, theme, status, weight, delta, cache) VALUES(%d, '%s', %d, '%s', '%s', '%s', %d, %d, '%s', %d)", $form_state['values']['visibility'], trim($form_state['values']['pages']), $form_state['values']['custom'], $form_state['values']['title'], $form_state['values']['module'], $theme->name, 0, 0, $delta, BLOCK_NO_CACHE);    }  }  foreach (array_filter($form_state['values']['roles']) as $rid) {    db_query("INSERT INTO {blocks_roles} (rid, module, delta) VALUES (%d, '%s', '%s')", $rid, $form_state['values']['module'], $delta);  }  drupal_set_message(t('The block has been created.'));  cache_clear_all();  $form_state['redirect'] = 'admin/build/block';  return;}/** * Menu callback; confirm deletion of custom blocks. */function block_box_delete(&$form_state, $bid = 0) {  $box = block_box_get($bid);  $form['info'] = array('#type' => 'hidden', '#value' => $box['info']);  $form['bid'] = array('#type' => 'hidden', '#value' => $bid);  return confirm_form($form, t('Are you sure you want to delete the block %name?', array('%name' => $box['info'])), 'admin/build/block', '', t('Delete'), t('Cancel'));}/** * Deletion of custom blocks. */function block_box_delete_submit($form, &$form_state) {  db_query('DELETE FROM {boxes} WHERE bid = %d', $form_state['values']['bid']);  db_query("DELETE FROM {blocks} WHERE module = 'block' AND delta = '%s'", $form_state['values']['bid']);  drupal_set_message(t('The block %name has been removed.', array('%name' => $form_state['values']['info'])));  cache_clear_all();  $form_state['redirect'] = 'admin/build/block';  return;}/** * Process variables for block-admin-display.tpl.php. * * The $variables array contains the following arguments: * - $form * * @see block-admin-display.tpl.php * @see theme_block_admin_display() */function template_preprocess_block_admin_display_form(&$variables) {  global $theme_key;  $block_regions = system_region_list($theme_key);  $variables['throttle'] = module_exists('throttle');  $variables['block_regions'] = $block_regions + array(BLOCK_REGION_NONE => t('Disabled'));  foreach ($block_regions as $key => $value) {    // Highlight regions on page to provide visual reference.    drupal_set_content($key, '<div class="block-region">'. $value .'</div>');    // Initialize an empty array for the region.    $variables['block_listing'][$key] = array();  }  // Initialize disabled blocks array.  $variables['block_listing'][BLOCK_REGION_NONE] = array();  // Set up to track previous region in loop.  $last_region = '';  foreach (element_children($variables['form']) as $i) {    $block = &$variables['form'][$i];    // Only take form elements that are blocks.    if (isset($block['info'])) {      // Fetch region for current block.      $region = $block['region']['#default_value'];      // Set special classes needed for table drag and drop.      $variables['form'][$i]['region']['#attributes']['class'] = 'block-region-select block-region-'. $region;      $variables['form'][$i]['weight']['#attributes']['class'] = 'block-weight block-weight-'. $region;      $variables['block_listing'][$region][$i]->row_class = isset($block['#attributes']['class']) ? $block['#attributes']['class'] : '';      $variables['block_listing'][$region][$i]->block_modified = isset($block['#attributes']['class']) && strpos($block['#attributes']['class'], 'block-modified') !== FALSE ? TRUE : FALSE;      $variables['block_listing'][$region][$i]->block_title =  drupal_render($block['info']);      $variables['block_listing'][$region][$i]->region_select = drupal_render($block['region']) . drupal_render($block['theme']);      $variables['block_listing'][$region][$i]->weight_select = drupal_render($block['weight']);      $variables['block_listing'][$region][$i]->throttle_check = $variables['throttle'] ? drupal_render($block['throttle']) : '';      $variables['block_listing'][$region][$i]->configure_link = drupal_render($block['configure']);      $variables['block_listing'][$region][$i]->delete_link = !empty($block['delete']) ? drupal_render($block['delete']) : '';      $variables['block_listing'][$region][$i]->printed = FALSE;      $last_region = $region;    }  }  $variables['form_submit'] = drupal_render($variables['form']);}
<?php// $Id$/** * @file * Drupal XML-RPC library. Based on the IXR - The Incutio XML-RPC Library - (c) Incutio Ltd 2002-2005 * Version 1.7 (beta) - Simon Willison, 23rd May 2005 * Site:   http://scripts.incutio.com/xmlrpc/ * Manual: http://scripts.incutio.com/xmlrpc/manual.php * This version is made available under the GNU GPL License *//** * Recursively turn a data structure into objects with 'data' and 'type' attributes. * * @param $data *   The data structure. * @param  $type *   Optional type assign to $data. * @return *   Object. */function xmlrpc_value($data, $type = FALSE) {  $xmlrpc_value = new stdClass();  $xmlrpc_value->data = $data;  if (!$type) {    $type = xmlrpc_value_calculate_type($xmlrpc_value);  }  $xmlrpc_value->type = $type;  if ($type == 'struct') {    // Turn all the values in the array into new xmlrpc_values    foreach ($xmlrpc_value->data as $key => $value) {      $xmlrpc_value->data[$key] = xmlrpc_value($value);    }  }  if ($type == 'array') {    for ($i = 0, $j = count($xmlrpc_value->data); $i < $j; $i++) {      $xmlrpc_value->data[$i] = xmlrpc_value($xmlrpc_value->data[$i]);    }  }  return $xmlrpc_value;}/** * Map PHP type to XML-RPC type. * * @param $xmlrpc_value *   Variable whose type should be mapped. * @return *   XML-RPC type as string. * @see *   http://www.xmlrpc.com/spec#scalars */function xmlrpc_value_calculate_type(&$xmlrpc_value) {  // http://www.php.net/gettype: Never use gettype() to test for a certain type [...] Instead, use the is_* functions.  if (is_bool($xmlrpc_value->data)) {    return 'boolean';  }  if (is_double($xmlrpc_value->data)) {    return 'double';  }  if (is_int($xmlrpc_value->data)) {      return 'int';  }  if (is_array($xmlrpc_value->data)) {    // empty or integer-indexed arrays are 'array', string-indexed arrays 'struct'    return empty($xmlrpc_value->data) || range(0, count($xmlrpc_value->data) - 1) === array_keys($xmlrpc_value->data) ? 'array' : 'struct';  }  if (is_object($xmlrpc_value->data)) {    if ($xmlrpc_value->data->is_date) {      return 'date';    }    if ($xmlrpc_value->data->is_base64) {      return 'base64';    }    $xmlrpc_value->data = get_object_vars($xmlrpc_value->data);    return 'struct';  }  // default  return 'string';}/** * Generate XML representing the given value. * * @param $xmlrpc_value * @return *   XML representation of value. */function xmlrpc_value_get_xml($xmlrpc_value) {  switch ($xmlrpc_value->type) {    case 'boolean':      return '<boolean>'. (($xmlrpc_value->data) ? '1' : '0') .'</boolean>';      break;    case 'int':      return '<int>'. $xmlrpc_value->data .'</int>';      break;    case 'double':      return '<double>'. $xmlrpc_value->data .'</double>';      break;    case 'string':      // Note: we don't escape apostrophes because of the many blogging clients      // that don't support numerical entities (and XML in general) properly.      return '<string>'. htmlspecialchars($xmlrpc_value->data) .'</string>';      break;    case 'array':      $return = '<array><data>'."\n";      foreach ($xmlrpc_value->data as $item) {        $return .= '  <value>'. xmlrpc_value_get_xml($item) ."</value>\n";      }      $return .= '</data></array>';      return $return;      break;    case 'struct':      $return = '<struct>'."\n";      foreach ($xmlrpc_value->data as $name => $value) {        $return .= "  <member><name>". check_plain($name) ."</name><value>";        $return .= xmlrpc_value_get_xml($value) ."</value></member>\n";      }      $return .= '</struct>';      return $return;      break;    case 'date':      return xmlrpc_date_get_xml($xmlrpc_value->data);      break;    case 'base64':      return xmlrpc_base64_get_xml($xmlrpc_value->data);      break;  }  return FALSE;}/** * Construct an object representing an XML-RPC message. * * @param $message *   String containing XML as defined at http://www.xmlrpc.com/spec * @return *   Object */function xmlrpc_message($message) {  $xmlrpc_message = new stdClass();  $xmlrpc_message->array_structs = array();   // The stack used to keep track of the current array/struct  $xmlrpc_message->array_structs_types = array(); // The stack used to keep track of if things are structs or array  $xmlrpc_message->current_struct_name = array();  // A stack as well  $xmlrpc_message->message = $message;  return $xmlrpc_message;}/** * Parse an XML-RPC message. If parsing fails, the faultCode and faultString * will be added to the message object. * * @param $xmlrpc_message *   Object generated by xmlrpc_message() * @return *   TRUE if parsing succeeded; FALSE otherwise */function xmlrpc_message_parse(&$xmlrpc_message) {  // First remove the XML declaration  $xmlrpc_message->message = preg_replace('/<\?xml(.*)?\?'.'>/', '', $xmlrpc_message->message);  if (trim($xmlrpc_message->message) == '') {    return FALSE;  }  $xmlrpc_message->_parser = xml_parser_create();  // Set XML parser to take the case of tags into account.  xml_parser_set_option($xmlrpc_message->_parser, XML_OPTION_CASE_FOLDING, FALSE);  // Set XML parser callback functions  xml_set_element_handler($xmlrpc_message->_parser, 'xmlrpc_message_tag_open', 'xmlrpc_message_tag_close');  xml_set_character_data_handler($xmlrpc_message->_parser, 'xmlrpc_message_cdata');  xmlrpc_message_set($xmlrpc_message);  if (!xml_parse($xmlrpc_message->_parser, $xmlrpc_message->message)) {    return FALSE;  }  xml_parser_free($xmlrpc_message->_parser);  // Grab the error messages, if any  $xmlrpc_message = xmlrpc_message_get();  if ($xmlrpc_message->messagetype == 'fault') {    $xmlrpc_message->fault_code = $xmlrpc_message->params[0]['faultCode'];    $xmlrpc_message->fault_string = $xmlrpc_message->params[0]['faultString'];  }  return TRUE;}/** * Store a copy of the $xmlrpc_message object temporarily. * * @param $value *   Object * @return *   The most recently stored $xmlrpc_message */function xmlrpc_message_set($value = NULL) {  static $xmlrpc_message;  if ($value) {    $xmlrpc_message = $value;  }  return $xmlrpc_message;}function xmlrpc_message_get() {  return xmlrpc_message_set();}function xmlrpc_message_tag_open($parser, $tag, $attr) {  $xmlrpc_message = xmlrpc_message_get();  $xmlrpc_message->current_tag_contents = '';  $xmlrpc_message->last_open = $tag;  switch ($tag) {    case 'methodCall':    case 'methodResponse':    case 'fault':      $xmlrpc_message->messagetype = $tag;      break;    // Deal with stacks of arrays and structs    case 'data':      $xmlrpc_message->array_structs_types[] = 'array';      $xmlrpc_message->array_structs[] = array();      break;    case 'struct':      $xmlrpc_message->array_structs_types[] = 'struct';      $xmlrpc_message->array_structs[] = array();      break;  }  xmlrpc_message_set($xmlrpc_message);}function xmlrpc_message_cdata($parser, $cdata) {  $xmlrpc_message = xmlrpc_message_get();  $xmlrpc_message->current_tag_contents .= $cdata;  xmlrpc_message_set($xmlrpc_message);}function xmlrpc_message_tag_close($parser, $tag) {  $xmlrpc_message = xmlrpc_message_get();  $value_flag = FALSE;  switch ($tag) {    case 'int':    case 'i4':      $value = (int)trim($xmlrpc_message->current_tag_contents);      $value_flag = TRUE;      break;    case 'double':      $value = (double)trim($xmlrpc_message->current_tag_contents);      $value_flag = TRUE;      break;    case 'string':      $value = $xmlrpc_message->current_tag_contents;      $value_flag = TRUE;      break;    case 'dateTime.iso8601':      $value = xmlrpc_date(trim($xmlrpc_message->current_tag_contents));      // $value = $iso->getTimestamp();      $value_flag = TRUE;      break;    case 'value':      // If no type is indicated, the type is string      // We take special care for empty values      if (trim($xmlrpc_message->current_tag_contents) != '' || (isset($xmlrpc_message->last_open) && ($xmlrpc_message->last_open == 'value'))) {        $value = (string)$xmlrpc_message->current_tag_contents;        $value_flag = TRUE;      }      unset($xmlrpc_message->last_open);      break;    case 'boolean':      $value = (boolean)trim($xmlrpc_message->current_tag_contents);      $value_flag = TRUE;      break;    case 'base64':      $value = base64_decode(trim($xmlrpc_message->current_tag_contents));      $value_flag = TRUE;      break;    // Deal with stacks of arrays and structs    case 'data':    case 'struct':      $value = array_pop($xmlrpc_message->array_structs );      array_pop($xmlrpc_message->array_structs_types);      $value_flag = TRUE;      break;    case 'member':      array_pop($xmlrpc_message->current_struct_name);      break;    case 'name':      $xmlrpc_message->current_struct_name[] = trim($xmlrpc_message->current_tag_contents);      break;    case 'methodName':      $xmlrpc_message->methodname = trim($xmlrpc_message->current_tag_contents);      break;  }  if ($value_flag) {    if (count($xmlrpc_message->array_structs ) > 0) {      // Add value to struct or array      if ($xmlrpc_message->array_structs_types[count($xmlrpc_message->array_structs_types)-1] == 'struct') {        // Add to struct        $xmlrpc_message->array_structs [count($xmlrpc_message->array_structs )-1][$xmlrpc_message->current_struct_name[count($xmlrpc_message->current_struct_name)-1]] = $value;      }      else {        // Add to array        $xmlrpc_message->array_structs [count($xmlrpc_message->array_structs )-1][] = $value;      }    }    else {      // Just add as a parameter      $xmlrpc_message->params[] = $value;    }  }  if (!in_array($tag, array("data", "struct", "member"))) {    $xmlrpc_message->current_tag_contents = '';  }  xmlrpc_message_set($xmlrpc_message);}/** * Construct an object representing an XML-RPC request * * @param $method *   The name of the method to be called * @param $args *   An array of parameters to send with the method. * @return *   Object */function xmlrpc_request($method, $args) {  $xmlrpc_request = new stdClass();  $xmlrpc_request->method = $method;  $xmlrpc_request->args = $args;  $xmlrpc_request->xml = <<<EOD<?xml version="1.0"?><methodCall><methodName>{$xmlrpc_request->method}</methodName><params>EOD;  foreach ($xmlrpc_request->args as $arg) {    $xmlrpc_request->xml .= '<param><value>';    $v = xmlrpc_value($arg);    $xmlrpc_request->xml .= xmlrpc_value_get_xml($v);    $xmlrpc_request->xml .= "</value></param>\n";  }  $xmlrpc_request->xml .= '</params></methodCall>';  return $xmlrpc_request;}function xmlrpc_error($code = NULL, $message = NULL, $reset = FALSE) {  static $xmlrpc_error;  if (isset($code)) {    $xmlrpc_error = new stdClass();    $xmlrpc_error->is_error = TRUE;    $xmlrpc_error->code = $code;    $xmlrpc_error->message = $message;  }  elseif ($reset) {    $xmlrpc_error = NULL;  }  return $xmlrpc_error;}function xmlrpc_error_get_xml($xmlrpc_error) {  return <<<EOD<methodResponse>  <fault>  <value>    <struct>    <member>      <name>faultCode</name>      <value><int>{$xmlrpc_error->code}</int></value>    </member>    <member>      <name>faultString</name>      <value><string>{$xmlrpc_error->message}</string></value>    </member>    </struct>  </value>  </fault></methodResponse>EOD;}function xmlrpc_date($time) {  $xmlrpc_date = new stdClass();  $xmlrpc_date->is_date = TRUE;  // $time can be a PHP timestamp or an ISO one  if (is_numeric($time)) {    $xmlrpc_date->year = gmdate('Y', $time);    $xmlrpc_date->month = gmdate('m', $time);    $xmlrpc_date->day = gmdate('d', $time);    $xmlrpc_date->hour = gmdate('H', $time);    $xmlrpc_date->minute = gmdate('i', $time);    $xmlrpc_date->second = gmdate('s', $time);    $xmlrpc_date->iso8601 = gmdate('Ymd\TH:i:s', $time);  }  else {    $xmlrpc_date->iso8601 = $time;    $time = str_replace(array('-', ':'), '', $time);    $xmlrpc_date->year = substr($time, 0, 4);    $xmlrpc_date->month = substr($time, 4, 2);    $xmlrpc_date->day = substr($time, 6, 2);    $xmlrpc_date->hour = substr($time, 9, 2);    $xmlrpc_date->minute = substr($time, 11, 2);    $xmlrpc_date->second = substr($time, 13, 2);  }  return $xmlrpc_date;}function xmlrpc_date_get_xml($xmlrpc_date) {  return '<dateTime.iso8601>'. $xmlrpc_date->year . $xmlrpc_date->month . $xmlrpc_date->day .'T'. $xmlrpc_date->hour .':'. $xmlrpc_date->minute .':'. $xmlrpc_date->second .'</dateTime.iso8601>';}function xmlrpc_base64($data) {  $xmlrpc_base64 = new stdClass();  $xmlrpc_base64->is_base64 = TRUE;  $xmlrpc_base64->data = $data;  return $xmlrpc_base64;}function xmlrpc_base64_get_xml($xmlrpc_base64) {  return '<base64>'. base64_encode($xmlrpc_base64->data) .'</base64>';}/** * Execute an XML remote procedural call. This is private function; call xmlrpc() * in common.inc instead of this function. * * @return *   A $xmlrpc_message object if the call succeeded; FALSE if the call failed */function _xmlrpc() {  $args = func_get_args();  $url = array_shift($args);  xmlrpc_clear_error();  if (is_array($args[0])) {    $method = 'system.multicall';    $multicall_args = array();    foreach ($args[0] as $call) {      $multicall_args[] = array('methodName' => array_shift($call), 'params' => $call);    }    $args = array($multicall_args);  }  else {    $method = array_shift($args);  }  $xmlrpc_request = xmlrpc_request($method, $args);  $result = drupal_http_request($url, array("Content-Type" => "text/xml"), 'POST', $xmlrpc_request->xml);  if ($result->code != 200) {    xmlrpc_error($result->code, $result->error);    return FALSE;  }  $message = xmlrpc_message($result->data);  // Now parse what we've got back  if (!xmlrpc_message_parse($message)) {    // XML error    xmlrpc_error(-32700, t('Parse error. Not well formed'));    return FALSE;  }  // Is the message a fault?  if ($message->messagetype == 'fault') {    xmlrpc_error($message->fault_code, $message->fault_string);    return FALSE;  }  // Message must be OK  return $message->params[0];}/** * Returns the last XML-RPC client error number */function xmlrpc_errno() {  $error = xmlrpc_error();  return ($error != NULL ? $error->code : NULL);}/** * Returns the last XML-RPC client error message */function xmlrpc_error_msg() {  $error = xmlrpc_error();  return ($error != NULL ? $error->message : NULL);}/** * Clears any previous error. */function xmlrpc_clear_error() {  xmlrpc_error(NULL, NULL, TRUE);}
<?php// $Id$/** * @file * Administrative page callbacks for the path module. *//** * Return a listing of all defined URL aliases. * When filter key passed, perform a standard search on the given key, * and return the list of matching URL aliases. */function path_admin_overview($keys = NULL) {  // Add the filter form above the overview table.  $output = drupal_get_form('path_admin_filter_form', $keys);  // Enable language column if locale is enabled or if we have any alias with language  $count = db_result(db_query("SELECT COUNT(*) FROM {url_alias} WHERE language != ''"));  $multilanguage = (module_exists('locale') || $count);  if ($keys) {    // Replace wildcards with MySQL/PostgreSQL wildcards.    $keys = preg_replace('!\*+!', '%', $keys);    $sql = "SELECT * FROM {url_alias} WHERE dst LIKE '%%%s%%'";  }  else {    $sql = 'SELECT * FROM {url_alias}';  }  $header = array(    array('data' => t('Alias'), 'field' => 'dst', 'sort' => 'asc'),    array('data' => t('System'), 'field' => 'src'),    array('data' => t('Operations'), 'colspan' => '2')  );  if ($multilanguage) {    $header[3] = $header[2];    $header[2] = array('data' => t('Language'), 'field' => 'language');  }  $sql .= tablesort_sql($header);  $result = pager_query($sql, 50, 0 , NULL, $keys);  $rows = array();  $destination = drupal_get_destination();  while ($data = db_fetch_object($result)) {    $row = array(check_plain($data->dst), check_plain($data->src), l(t('edit'), "admin/build/path/edit/$data->pid", array('query' => $destination)), l(t('delete'), "admin/build/path/delete/$data->pid", array('query' => $destination)));    if ($multilanguage) {      $row[4] = $row[3];      $row[3] = $row[2];      $row[2] = module_invoke('locale', 'language_name', $data->language);    }    $rows[] = $row;  }  if (empty($rows)) {    $empty_message = $keys ? t('No URL aliases found.') : t('No URL aliases available.') ;    $rows[] = array(array('data' => $empty_message, 'colspan' => ($multilanguage ? 5 : 4)));  }  $output .= theme('table', $header, $rows);  $output .= theme('pager', NULL, 50, 0);  return $output;}/** * Menu callback; handles pages for creating and editing URL aliases. */function path_admin_edit($pid = 0) {  if ($pid) {    $alias = path_load($pid);    drupal_set_title(check_plain($alias['dst']));    $output = drupal_get_form('path_admin_form', $alias);  }  else {    $output = drupal_get_form('path_admin_form');  }  return $output;}/** * Return a form for editing or creating an individual URL alias. * * @ingroup forms * @see path_admin_form_validate() * @see path_admin_form_submit() */function path_admin_form(&$form_state, $edit = array('src' => '', 'dst' => '', 'language' => '', 'pid' => NULL)) {  $form['#alias'] = $edit;  $form['src'] = array(    '#type' => 'textfield',    '#title' => t('Existing system path'),    '#default_value' => $edit['src'],    '#maxlength' => 128,    '#size' => 45,    '#description' => t('Specify the existing path you wish to alias. For example: node/28, forum/1, taxonomy/term/1+2.'),    '#field_prefix' => url(NULL, array('absolute' => TRUE)) . (variable_get('clean_url', 0) ? '' : '?q='),    '#required' => TRUE,  );  $form['dst'] = array(    '#type' => 'textfield',    '#title' => t('Path alias'),    '#default_value' => $edit['dst'],    '#maxlength' => 128,    '#size' => 45,    '#description' => t('Specify an alternative path by which this data can be accessed. For example, type "about" when writing an about page. Use a relative path and don\'t add a trailing slash or the URL alias won\'t work.'),    '#field_prefix' => url(NULL, array('absolute' => TRUE)) . (variable_get('clean_url', 0) ? '' : '?q='),    '#required' => TRUE,  );  // This will be a hidden value unless locale module is enabled  $form['language'] = array(    '#type' => 'value',    '#value' => $edit['language']  );  if ($edit['pid']) {    $form['pid'] = array('#type' => 'hidden', '#value' => $edit['pid']);    $form['submit'] = array('#type' => 'submit', '#value' => t('Update alias'));  }  else {    $form['submit'] = array('#type' => 'submit', '#value' => t('Create new alias'));  }  return $form;}/** * Verify that a new URL alias is valid */function path_admin_form_validate($form, &$form_state) {  $src = $form_state['values']['src'];  $dst = $form_state['values']['dst'];  $pid = isset($form_state['values']['pid']) ? $form_state['values']['pid'] : 0;  // Language is only set if locale module is enabled, otherwise save for all languages.  $language = isset($form_state['values']['language']) ? $form_state['values']['language'] : '';  if (db_result(db_query("SELECT COUNT(dst) FROM {url_alias} WHERE pid != %d AND dst = '%s' AND language = '%s'", $pid, $dst, $language))) {    form_set_error('dst', t('The alias %alias is already in use in this language.', array('%alias' => $dst)));  }  $item = menu_get_item($src);  if (!$item || !$item['access']) {    form_set_error('src', t("The path '@link_path' is either invalid or you do not have access to it.", array('@link_path' => $src)));  }}/** * Save a new URL alias to the database. */function path_admin_form_submit($form, &$form_state) {  // Language is only set if locale module is enabled  path_set_alias($form_state['values']['src'], $form_state['values']['dst'], isset($form_state['values']['pid']) ? $form_state['values']['pid'] : 0, isset($form_state['values']['language']) ? $form_state['values']['language'] : '');  drupal_set_message(t('The alias has been saved.'));  $form_state['redirect'] = 'admin/build/path';  return;}/** * Menu callback; confirms deleting an URL alias */function path_admin_delete_confirm($form_state, $pid) {  $path = path_load($pid);  if (user_access('administer url aliases')) {    $form['pid'] = array('#type' => 'value', '#value' => $pid);    $output = confirm_form($form,      t('Are you sure you want to delete path alias %title?', array('%title' => $path['dst'])),      isset($_GET['destination']) ? $_GET['destination'] : 'admin/build/path');  }  return $output;}/** * Execute URL alias deletion */function path_admin_delete_confirm_submit($form, &$form_state) {  if ($form_state['values']['confirm']) {    path_admin_delete($form_state['values']['pid']);    $form_state['redirect'] = 'admin/build/path';    return;  }}/** * Return a form to filter URL aliases. * * @ingroup forms * @see path_admin_filter_form_submit() */function path_admin_filter_form(&$form_state, $keys = '') {  $form['#attributes'] = array('class' => 'search-form');  $form['basic'] = array('#type' => 'fieldset',    '#title' => t('Filter aliases')  );  $form['basic']['inline'] = array('#prefix' => '<div class="container-inline">', '#suffix' => '</div>');  $form['basic']['inline']['filter'] = array(    '#type' => 'textfield',    '#title' => '',    '#default_value' => $keys,    '#maxlength' => 128,    '#size' => 25,  );  $form['basic']['inline']['submit'] = array(    '#type' => 'submit',    '#value' => t('Filter'),    '#submit' => array('path_admin_filter_form_submit_filter'),    );  if ($keys) {    $form['basic']['inline']['reset'] = array(      '#type' => 'submit',      '#value' => t('Reset'),      '#submit' => array('path_admin_filter_form_submit_reset'),    );  }  return $form;}/** * Process filter form submission when the Filter button is pressed. */function path_admin_filter_form_submit_filter($form, &$form_state) {  $form_state['redirect'] = 'admin/build/path/list/'. trim($form_state['values']['filter']);}/** * Process filter form submission when the Reset button is pressed. */function path_admin_filter_form_submit_reset($form, &$form_state) {  $form_state['redirect'] = 'admin/build/path/list';}/** * Helper function for grabbing filter keys. */function path_admin_filter_get_keys() {  // Extract keys as remainder of path  $path = explode('/', $_GET['q'], 5);  return count($path) == 5 ? $path[4] : '';}
<?php// $Id$/** * @file * Admin page callbacks for the search module. *//** * Menu callback: confirm wiping of the index. */function search_wipe_confirm() {  return confirm_form(array(), t('Are you sure you want to re-index the site?'),                  'admin/settings/search', t(' The search index is not cleared but systematically updated to reflect the new settings. Searching will continue to work but new content won\'t be indexed until all existing content has been re-indexed. This action cannot be undone.'), t('Re-index site'), t('Cancel'));}/** * Handler for wipe confirmation */function search_wipe_confirm_submit(&$form, &$form_state) {  if ($form['confirm']) {    search_wipe();    drupal_set_message(t('The index will be rebuilt.'));    $form_state['redirect'] = 'admin/settings/search';    return;  }}/** * Menu callback; displays the search module settings page. * * @ingroup forms * @see system_settings_form() * @see search_admin_settings_validate() */function search_admin_settings() {  // Collect some stats  $remaining = 0;  $total = 0;  foreach (module_list() as $module) {    if (module_hook($module, 'search')) {      $status = module_invoke($module, 'search', 'status');      $remaining += $status['remaining'];      $total += $status['total'];    }  }  $count = format_plural($remaining, 'There is 1 item left to index.', 'There are @count items left to index.');  $percentage = ((int)min(100, 100 * ($total - $remaining) / max(1, $total))) .'%';  $status = '<p><strong>'. t('%percentage of the site has been indexed.', array('%percentage' => $percentage)) .' '. $count .'</strong></p>';  $form['status'] = array('#type' => 'fieldset', '#title' => t('Indexing status'));  $form['status']['status'] = array('#value' => $status);  $form['status']['wipe'] = array('#type' => 'submit', '#value' => t('Re-index site'));  $items = drupal_map_assoc(array(10, 20, 50, 100, 200, 500));  // Indexing throttle:  $form['indexing_throttle'] = array('#type' => 'fieldset', '#title' => t('Indexing throttle'));  $form['indexing_throttle']['search_cron_limit'] = array('#type' => 'select', '#title' => t('Number of items to index per cron run'), '#default_value' => variable_get('search_cron_limit', 100), '#options' => $items, '#description' => t('The maximum number of items indexed in each pass of a <a href="@cron">cron maintenance task</a>. If necessary, reduce the number of items to prevent timeouts and memory errors while indexing.', array('@cron' => url('admin/reports/status'))));  // Indexing settings:  $form['indexing_settings'] = array('#type' => 'fieldset', '#title' => t('Indexing settings'));  $form['indexing_settings']['info'] = array('#value' => t('<p><em>Changing the settings below will cause the site index to be rebuilt. The search index is not cleared but systematically updated to reflect the new settings. Searching will continue to work but new content won\'t be indexed until all existing content has been re-indexed.</em></p><p><em>The default settings should be appropriate for the majority of sites.</em></p>'));  $form['indexing_settings']['minimum_word_size'] = array('#type' => 'textfield', '#title' => t('Minimum word length to index'), '#default_value' => variable_get('minimum_word_size', 3), '#size' => 5, '#maxlength' => 3, '#description' => t('The number of characters a word has to be to be indexed. A lower setting means better search result ranking, but also a larger database. Each search query must contain at least one keyword that is this size (or longer).'));  $form['indexing_settings']['overlap_cjk'] = array('#type' => 'checkbox', '#title' => t('Simple CJK handling'), '#default_value' => variable_get('overlap_cjk', TRUE), '#description' => t('Whether to apply a simple Chinese/Japanese/Korean tokenizer based on overlapping sequences. Turn this off if you want to use an external preprocessor for this instead. Does not affect other languages.'));  $form['#validate'] = array('search_admin_settings_validate');  // Per module settings  $form = array_merge($form, module_invoke_all('search', 'admin'));  return system_settings_form($form);}/** * Validate callback. */function search_admin_settings_validate($form, &$form_state) {  if ($form_state['values']['op'] == t('Re-index site')) {    drupal_goto('admin/settings/search/wipe');  }  // If these settings change, the index needs to be rebuilt.  if ((variable_get('minimum_word_size', 3) != $form_state['values']['minimum_word_size']) ||      (variable_get('overlap_cjk', TRUE) != $form_state['values']['overlap_cjk'])) {    drupal_set_message(t('The index will be rebuilt.'));    search_wipe();  }}
<?php// $Id$/** * @file * User page callback file for the user module. *//** * Menu callback; Retrieve a JSON object containing autocomplete suggestions for existing users. */function user_autocomplete($string = '') {  $matches = array();  if ($string) {    $result = db_query_range("SELECT name FROM {users} WHERE LOWER(name) LIKE LOWER('%s%%')", $string, 0, 10);    while ($user = db_fetch_object($result)) {      $matches[$user->name] = check_plain($user->name);    }  }  drupal_json($matches);}/** * Form builder; Request a password reset. * * @ingroup forms * @see user_pass_validate() * @see user_pass_submit() */function user_pass() {  $form['name'] = array(    '#type' => 'textfield',    '#title' => t('Username or e-mail address'),    '#size' => 60,    '#maxlength' => max(USERNAME_MAX_LENGTH, EMAIL_MAX_LENGTH),    '#required' => TRUE,  );  $form['submit'] = array('#type' => 'submit', '#value' => t('E-mail new password'));  return $form;}function user_pass_validate($form, &$form_state) {  $name = trim($form_state['values']['name']);    // Blocked accounts cannot request a new password,  // check provided username and email against access rules.  if (drupal_is_denied('user', $name) || drupal_is_denied('mail', $name)) {    form_set_error('name', t('%name is not allowed to request a new password.', array('%name' => $name)));  }  // Try to load by email.  $account = user_load(array('mail' => $name, 'status' => 1));  if (!$account) {    // No success, try to load by name.    $account = user_load(array('name' => $name, 'status' => 1));  }  if (isset($account->uid)) {    form_set_value(array('#parents' => array('account')), $account, $form_state);  }  else {    form_set_error('name', t('Sorry, %name is not recognized as a user name or an e-mail address.', array('%name' => $name)));  }}function user_pass_submit($form, &$form_state) {  global $language;  $account = $form_state['values']['account'];  // Mail one time login URL and instructions using current language.  _user_mail_notify('password_reset', $account, $language);  watchdog('user', 'Password reset instructions mailed to %name at %email.', array('%name' => $account->name, '%email' => $account->mail));  drupal_set_message(t('Further instructions have been sent to your e-mail address.'));  $form_state['redirect'] = 'user';  return;}/** * Menu callback; process one time login link and redirects to the user page on success. */function user_pass_reset(&$form_state, $uid, $timestamp, $hashed_pass, $action = NULL) {  global $user;  // Check if the user is already logged in. The back button is often the culprit here.  if ($user->uid) {    drupal_set_message(t('You have already used this one-time login link. It is not necessary to use this link to login anymore. You are already logged in.'));    drupal_goto();  }  else {    // Time out, in seconds, until login URL expires. 24 hours = 86400 seconds.    $timeout = 86400;    $current = time();    // Some redundant checks for extra security ?    if ($timestamp < $current && $account = user_load(array('uid' => $uid, 'status' => 1)) ) {      // Deny one-time login to blocked accounts.      if (drupal_is_denied('user', $account->name) || drupal_is_denied('mail', $account->mail)) {        drupal_set_message(t('You have tried to use a one-time login for an account which has been blocked.'), 'error');        drupal_goto();      }      // No time out for first time login.      if ($account->login && $current - $timestamp > $timeout) {        drupal_set_message(t('You have tried to use a one-time login link that has expired. Please request a new one using the form below.'));        drupal_goto('user/password');      }      else if ($account->uid && $timestamp > $account->login && $timestamp < $current && $hashed_pass == user_pass_rehash($account->pass, $timestamp, $account->login)) {        // First stage is a confirmation form, then login        if ($action == 'login') {          watchdog('user', 'User %name used one-time login link at time %timestamp.', array('%name' => $account->name, '%timestamp' => $timestamp));          // Set the new user.          $user = $account;          // user_authenticate_finalize() also updates the login timestamp of the          // user, which invalidates further use of the one-time login link.          user_authenticate_finalize($form_state['values']);          drupal_set_message(t('You have just used your one-time login link. It is no longer necessary to use this link to login. Please change your password.'));          drupal_goto('user/'. $user->uid .'/edit');        }        else {          $form['message'] = array('#value' => t('<p>This is a one-time login for %user_name and will expire on %expiration_date.</p><p>Click on this button to login to the site and change your password.</p>', array('%user_name' => $account->name, '%expiration_date' => format_date($timestamp + $timeout))));          $form['help'] = array('#value' => '<p>'. t('This login can be used only once.') .'</p>');          $form['submit'] = array('#type' => 'submit', '#value' => t('Log in'));          $form['#action'] = url("user/reset/$uid/$timestamp/$hashed_pass/login");          return $form;        }      }      else {        drupal_set_message(t('You have tried to use a one-time login link which has either been used or is no longer valid. Please request a new one using the form below.'));        drupal_goto('user/password');      }    }    else {      // Deny access, no more clues.      // Everything will be in the watchdog's URL for the administrator to check.      drupal_access_denied();    }  }}/** * Menu callback; logs the current user out, and redirects to the home page. */function user_logout() {  global $user;  watchdog('user', 'Session closed for %name.', array('%name' => $user->name));  // Destroy the current session:  session_destroy();  // Only variables can be passed by reference workaround.  $null = NULL;  user_module_invoke('logout', $null, $user);  // Load the anonymous user  $user = drupal_anonymous_user();  drupal_goto();}/** * Menu callback; Displays a user or user profile page. */function user_view($account) {  drupal_set_title(check_plain($account->name));  // Retrieve all profile fields and attach to $account->content.  user_build_content($account);  // To theme user profiles, copy modules/user/user_profile.tpl.php  // to your theme directory, and edit it as instructed in that file's comments.  return theme('user_profile', $account);}/** * Process variables for user-profile.tpl.php. * * The $variables array contains the following arguments: * - $account * * @see user-picture.tpl.php */function template_preprocess_user_profile(&$variables) {  $variables['profile'] = array();  // Sort sections by weight  uasort($variables['account']->content, 'element_sort');  // Provide keyed variables so themers can print each section independantly.  foreach (element_children($variables['account']->content) as $key) {    $variables['profile'][$key] = drupal_render($variables['account']->content[$key]);  }  // Collect all profiles to make it easier to print all items at once.  $variables['user_profile'] = implode($variables['profile']);}/** * Process variables for user-profile-item.tpl.php. * * The $variables array contains the following arguments: * - $element * * @see user-profile-item.tpl.php */function template_preprocess_user_profile_item(&$variables) {  $variables['title'] = $variables['element']['#title'];  $variables['value'] = $variables['element']['#value'];  $variables['attributes'] = '';  if (isset($variables['element']['#attributes'])) {    $variables['attributes'] = drupal_attributes($variables['element']['#attributes']);  }}/** * Process variables for user-profile-category.tpl.php. * * The $variables array contains the following arguments: * - $element * * @see user-profile-category.tpl.php */function template_preprocess_user_profile_category(&$variables) {  $variables['title'] = check_plain($variables['element']['#title']);  $variables['profile_items'] = $variables['element']['#children'];  $variables['attributes'] = '';  if (isset($variables['element']['#attributes'])) {    $variables['attributes'] = drupal_attributes($variables['element']['#attributes']);  }}/** * Form builder; Present the form to edit a given user or profile category. * * @ingroup forms * @see user_edit_validate() * @see user_edit_submit() */function user_edit($account, $category = 'account') {  drupal_set_title(check_plain($account->name));  return drupal_get_form('user_profile_form', $account, $category);}/** * Form builder; edit a user account or one of their profile categories. * * @ingroup forms * @see user_profile_form_validate() * @see user_profile_form_submit() * @see user_edit_delete_submit() */function user_profile_form($form_state, $account, $category = 'account') {  $edit = (empty($form_state['values'])) ? (array)$account : $form_state['values'];  $form = _user_forms($edit, $account, $category);  $form['_category'] = array('#type' => 'value', '#value' => $category);  $form['_account'] = array('#type' => 'value', '#value' => $account);  $form['submit'] = array('#type' => 'submit', '#value' => t('Save'), '#weight' => 30);  if (user_access('administer users')) {    $form['delete'] = array(      '#type' => 'submit',      '#value' => t('Delete'),      '#weight' => 31,      '#submit' => array('user_edit_delete_submit'),    );  }  $form['#attributes']['enctype'] = 'multipart/form-data';  return $form;}/** * Validation function for the user account and profile editing form. */function user_profile_form_validate($form, &$form_state) {  user_module_invoke('validate', $form_state['values'], $form_state['values']['_account'], $form_state['values']['_category']);  // Validate input to ensure that non-privileged users can't alter protected data.  if ((!user_access('administer users') && array_intersect(array_keys($form_state['values']), array('uid', 'init', 'session'))) || (!user_access('administer permissions') && isset($form_state['values']['roles']))) {    watchdog('security', 'Detected malicious attempt to alter protected user fields.', array(), WATCHDOG_WARNING);    // set this to a value type field    form_set_error('category', t('Detected malicious attempt to alter protected user fields.'));  }}/** * Submit function for the user account and profile editing form. */function user_profile_form_submit($form, &$form_state) {  $account = $form_state['values']['_account'];  $category = $form_state['values']['_category'];  unset($form_state['values']['_account'], $form_state['values']['op'], $form_state['values']['submit'], $form_state['values']['delete'], $form_state['values']['form_token'], $form_state['values']['form_id'], $form_state['values']['_category']);  user_module_invoke('submit', $form_state['values'], $account, $category);  user_save($account, $form_state['values'], $category);  // Clear the page cache because pages can contain usernames and/or profile information:  cache_clear_all();  drupal_set_message(t('The changes have been saved.'));  return;}/** * Submit function for the 'Delete' button on the user edit form. */function user_edit_delete_submit($form, &$form_state) {  $destination = '';  if (isset($_REQUEST['destination'])) {    $destination = drupal_get_destination();    unset($_REQUEST['destination']);  }  // Note: We redirect from user/uid/edit to user/uid/delete to make the tabs disappear.  $form_state['redirect'] = array("user/". $form_state['values']['_account']->uid ."/delete", $destination);}/** * Form builder; confirm form for user deletion. * * @ingroup forms * @see user_confirm_delete_submit() */function user_confirm_delete(&$form_state, $account) {  $form['_account'] = array('#type' => 'value', '#value' => $account);  return confirm_form($form,    t('Are you sure you want to delete the account %name?', array('%name' => $account->name)),    'user/'. $account->uid,    t('All submissions made by this user will be attributed to the anonymous account. This action cannot be undone.'),    t('Delete'), t('Cancel'));}/** * Submit function for the confirm form for user deletion. */function user_confirm_delete_submit($form, &$form_state) {  user_delete($form_state['values'], $form_state['values']['_account']->uid);  drupal_set_message(t('%name has been deleted.', array('%name' => $form_state['values']['_account']->name)));  if (!isset($_REQUEST['destination'])) {    $form_state['redirect'] = 'admin/user/user';  }}function user_edit_validate($form, &$form_state) {  user_module_invoke('validate', $form_state['values'], $form_state['values']['_account'], $form_state['values']['_category']);  // Validate input to ensure that non-privileged users can't alter protected data.  if ((!user_access('administer users') && array_intersect(array_keys($form_state['values']), array('uid', 'init', 'session'))) || (!user_access('administer permissions') && isset($form_state['values']['roles']))) {    watchdog('security', 'Detected malicious attempt to alter protected user fields.', array(), WATCHDOG_WARNING);    // set this to a value type field    form_set_error('category', t('Detected malicious attempt to alter protected user fields.'));  }}function user_edit_submit($form, &$form_state) {  $account = $form_state['values']['_account'];  $category = $form_state['values']['_category'];  unset($form_state['values']['_account'], $form_state['values']['op'], $form_state['values']['submit'], $form_state['values']['delete'], $form_state['values']['form_token'], $form_state['values']['form_id'], $form_state['values']['_category']);  user_module_invoke('submit', $form_state['values'], $account, $category);  user_save($account, $form_state['values'], $category);  // Clear the page cache because pages can contain usernames and/or profile information:  cache_clear_all();  drupal_set_message(t('The changes have been saved.'));  return;}/** * Access callback for path /user. * * Displays user profile if user is logged in, or login form for anonymous * users. */function user_page() {  global $user;  if ($user->uid) {    menu_set_active_item('user/'. $user->uid);    return menu_execute_active_handler();  }  else {    return drupal_get_form('user_login');  }}
<?php// $Id$/** * @file * Multiple language handling functionality. *//** *  Choose a language for the page, based on language negotiation settings. */function language_initialize() {  global $user;  // Configured presentation language mode.  $mode = variable_get('language_negotiation', LANGUAGE_NEGOTIATION_NONE);  // Get a list of enabled languages.  $languages = language_list('enabled');  $languages = $languages[1];    switch ($mode) {    case LANGUAGE_NEGOTIATION_NONE:      return language_default();    case LANGUAGE_NEGOTIATION_DOMAIN:      foreach ($languages as $language) {        $parts = parse_url($language->domain);        if (!empty($parts['host']) && ($_SERVER['HTTP_HOST'] == $parts['host'])) {          return $language;        }      }      return language_default();    case LANGUAGE_NEGOTIATION_PATH_DEFAULT:    case LANGUAGE_NEGOTIATION_PATH:      // $_GET['q'] might not be available at this time, because      // path initialization runs after the language bootstrap phase.      $args = isset($_GET['q']) ? explode('/', $_GET['q']) : array();      $prefix = array_shift($args);      // Search prefix within enabled languages.      foreach ($languages as $language) {        if (!empty($language->prefix) && $language->prefix == $prefix) {          // Rebuild $GET['q'] with the language removed.          $_GET['q'] = implode('/', $args);          return $language;        }      }      if ($mode == LANGUAGE_NEGOTIATION_PATH_DEFAULT) {        // If we did not found the language by prefix, choose the default.        return language_default();      }      break;  }  // User language.  if ($user->uid && isset($languages[$user->language])) {    return $languages[$user->language];  }  // Browser accept-language parsing.  if ($language = language_from_browser()) {    return $language;  }  // Fall back on the default if everything else fails.  return language_default();}/** * Identify language from the Accept-language HTTP header we got. */function language_from_browser() {  // Specified by the user via the browser's Accept Language setting  // Samples: "hu, en-us;q=0.66, en;q=0.33", "hu,en-us;q=0.5"  $browser_langs = array();  if (isset($_SERVER['HTTP_ACCEPT_LANGUAGE'])) {    $browser_accept = explode(",", $_SERVER['HTTP_ACCEPT_LANGUAGE']);    for ($i = 0; $i < count($browser_accept); $i++) {      // The language part is either a code or a code with a quality.      // We cannot do anything with a * code, so it is skipped.      // If the quality is missing, it is assumed to be 1 according to the RFC.      if (preg_match("!([a-z-]+)(;q=([0-9\\.]+))?!", trim($browser_accept[$i]), $found)) {        $browser_langs[$found[1]] = (isset($found[3]) ? (float) $found[3] : 1.0);      }    }  }  // Order the codes by quality  arsort($browser_langs);  // Try to find the first preferred language we have  $languages = language_list('enabled');  foreach ($browser_langs as $langcode => $q) {    if (isset($languages['1'][$langcode])) {      return $languages['1'][$langcode];    }  }}/** * Rewrite URL's with language based prefix. Parameters are the same * as those of the url() function. */function language_url_rewrite(&$path, &$options) {  global $language;  // Only modify relative (insite) URLs.  if (!$options['external']) {    // Language can be passed as an option, or we go for current language.    if (!isset($options['language'])) {      $options['language'] = $language;    }    switch (variable_get('language_negotiation', LANGUAGE_NEGOTIATION_NONE)) {      case LANGUAGE_NEGOTIATION_NONE:        // No language dependent path allowed in this mode.        unset($options['language']);        break;      case LANGUAGE_NEGOTIATION_DOMAIN:        if ($options['language']->domain) {          // Ask for an absolute URL with our modified base_url.          $options['absolute'] = TRUE;          $options['base_url'] = $options['language']->domain;        }        break;      case LANGUAGE_NEGOTIATION_PATH_DEFAULT:        $default = language_default();        if ($options['language']->language == $default->language) {          break;        }        // Intentionally no break here.      case LANGUAGE_NEGOTIATION_PATH:        if (!empty($options['language']->prefix)) {          $options['prefix'] = $options['language']->prefix .'/';        }        break;    }  }}
<?php// $Id$/** * @file * Enables the user registration and login system. */define('USERNAME_MAX_LENGTH', 60);define('EMAIL_MAX_LENGTH', 64);/** * Invokes hook_user() in every module. * * We cannot use module_invoke() for this, because the arguments need to * be passed by reference. */function user_module_invoke($type, &$array, &$user, $category = NULL) {  foreach (module_list() as $module) {    $function = $module .'_user';    if (function_exists($function)) {      $function($type, $array, $user, $category);    }  }}/** * Implementation of hook_theme(). */function user_theme() {  return array(    'user_picture' => array(      'arguments' => array('account' => NULL),      'template' => 'user-picture',    ),    'user_profile' => array(      'arguments' => array('account' => NULL),      'template' => 'user-profile',      'file' => 'user.pages.inc',    ),    'user_profile_category' => array(      'arguments' => array('element' => NULL),      'template' => 'user-profile-category',      'file' => 'user.pages.inc',    ),    'user_profile_item' => array(      'arguments' => array('element' => NULL),      'template' => 'user-profile-item',      'file' => 'user.pages.inc',    ),    'user_list' => array(      'arguments' => array('users' => NULL, 'title' => NULL),    ),    'user_admin_perm' => array(      'arguments' => array('form' => NULL),      'file' => 'user.admin.inc',    ),    'user_admin_new_role' => array(      'arguments' => array('form' => NULL),      'file' => 'user.admin.inc',    ),    'user_admin_account' => array(      'arguments' => array('form' => NULL),      'file' => 'user.admin.inc',    ),    'user_filter_form' => array(      'arguments' => array('form' => NULL),      'file' => 'user.admin.inc',    ),    'user_filters' => array(      'arguments' => array('form' => NULL),      'file' => 'user.admin.inc',    ),    'user_signature' => array(      'arguments' => array('signature' => NULL),    ),  );}function user_external_load($authname) {  $result = db_query("SELECT uid FROM {authmap} WHERE authname = '%s'", $authname);  if ($user = db_fetch_array($result)) {    return user_load($user);  }  else {    return 0;  }}/** * Perform standard Drupal login operations for a user object. * * The user object must already be authenticated. This function verifies * that the user account is not blocked/denied and then performs the login, * updates the login timestamp in the database, invokes hook_user('login'), * and regenerates the session. * * @param $account *    An authenticated user object to be set as the currently logged *    in user. * @param $edit *    The array of form values submitted by the user, if any. *    This array is passed to hook_user op login. * @return boolean *    TRUE if the login succeeds, FALSE otherwise. */function user_external_login($account, $edit = array()) {  $form = drupal_get_form('user_login');  $state['values'] = $edit;  if (empty($state['values']['name'])) {    $state['values']['name'] = $account->name;  }  // Check if user is blocked or denied by access rules.  user_login_name_validate($form, $state, (array)$account);  if (form_get_errors()) {    // Invalid login.    return FALSE;  }  // Valid login.  global $user;  $user = $account;  user_authenticate_finalize($state['values']);  return TRUE;}/** * Fetch a user object. * * @param $array *   An associative array of attributes to search for in selecting the *   user, such as user name or e-mail address. * * @return *   A fully-loaded $user object upon successful user load or FALSE if user *   cannot be loaded. */function user_load($array = array()) {  // Dynamically compose a SQL query:  $query = array();  $params = array();  if (is_numeric($array)) {    $array = array('uid' => $array);  }  elseif (!is_array($array)) {    return FALSE;  }  foreach ($array as $key => $value) {    if ($key == 'uid' || $key == 'status') {      $query[] = "$key = %d";      $params[] = $value;    }    else if ($key == 'pass') {      $query[] = "pass = '%s'";      $params[] = md5($value);    }    else {      $query[]= "LOWER($key) = LOWER('%s')";      $params[] = $value;    }  }  $result = db_query('SELECT * FROM {users} u WHERE '. implode(' AND ', $query), $params);  if ($user = db_fetch_object($result)) {    $user = drupal_unpack($user);    $user->roles = array();    if ($user->uid) {      $user->roles[DRUPAL_AUTHENTICATED_RID] = 'authenticated user';    }    else {      $user->roles[DRUPAL_ANONYMOUS_RID] = 'anonymous user';    }    $result = db_query('SELECT r.rid, r.name FROM {role} r INNER JOIN {users_roles} ur ON ur.rid = r.rid WHERE ur.uid = %d', $user->uid);    while ($role = db_fetch_object($result)) {      $user->roles[$role->rid] = $role->name;    }    user_module_invoke('load', $array, $user);  }  else {    $user = FALSE;  }  return $user;}/** * Save changes to a user account or add a new user. * * @param $account *   The $user object for the user to modify or add. If $user->uid is *   omitted, a new user will be added. * * @param $array *   (optional) An array of fields and values to save. For example, *   array('name' => 'My name'); Setting a field to NULL deletes it from *   the data column. * * @param $category *   (optional) The category for storing profile information in. * * @return *   A fully-loaded $user object upon successful save or FALSE if the save failed. */function user_save($account, $array = array(), $category = 'account') {  // Dynamically compose a SQL query:  $user_fields = user_fields();  if (is_object($account) && $account->uid) {    user_module_invoke('update', $array, $account, $category);    $query = '';    $data = unserialize(db_result(db_query('SELECT data FROM {users} WHERE uid = %d', $account->uid)));    // Consider users edited by an administrator as logged in, if they haven't    // already, so anonymous users can view the profile (if allowed).    if (empty($array['access']) && empty($account->access) && user_access('administer users')) {      $array['access'] = time();    }    foreach ($array as $key => $value) {      if ($key == 'pass' && !empty($value)) {        $query .= "$key = '%s', ";        $v[] = md5($value);      }      else if ((substr($key, 0, 4) !== 'auth') && ($key != 'pass')) {        if (in_array($key, $user_fields)) {          // Save standard fields.          $query .= "$key = '%s', ";          $v[] = $value;        }        else if ($key != 'roles') {          // Roles is a special case: it used below.          if ($value === NULL) {            unset($data[$key]);          }          else {            $data[$key] = $value;          }        }      }    }    $query .= "data = '%s' ";    $v[] = serialize($data);    $success = db_query("UPDATE {users} SET $query WHERE uid = %d", array_merge($v, array($account->uid)));    if (!$success) {      // The query failed - better to abort the save than risk further data loss.      return FALSE;    }    // Reload user roles if provided.    if (isset($array['roles']) && is_array($array['roles'])) {      db_query('DELETE FROM {users_roles} WHERE uid = %d', $account->uid);      foreach (array_keys($array['roles']) as $rid) {        if (!in_array($rid, array(DRUPAL_ANONYMOUS_RID, DRUPAL_AUTHENTICATED_RID))) {          db_query('INSERT INTO {users_roles} (uid, rid) VALUES (%d, %d)', $account->uid, $rid);        }      }    }    // Delete a blocked user's sessions to kick them if they are online.    if (isset($array['status']) && $array['status'] == 0) {      sess_destroy_uid($account->uid);    }    // If the password changed, delete all open sessions and recreate    // the current one.    if (!empty($array['pass'])) {      sess_destroy_uid($account->uid);      if ($account->uid == $GLOBALS['user']->uid) {        sess_regenerate();      }    }    // Refresh user object.    $user = user_load(array('uid' => $account->uid));    // Send emails after we have the new user object.    if (isset($array['status']) && $array['status'] != $account->status) {      // The user's status is changing; conditionally send notification email.      $op = $array['status'] == 1 ? 'status_activated' : 'status_blocked';      _user_mail_notify($op, $user);    }    user_module_invoke('after_update', $array, $user, $category);  }  else {    // Allow 'created' to be set by the caller.    if (!isset($array['created'])) {      $array['created'] = time();    }    // Consider users created by an administrator as already logged in, so    // anonymous users can view the profile (if allowed).    if (empty($array['access']) && user_access('administer users')) {      $array['access'] = time();    }    // Note: we wait to save the data column to prevent module-handled    // fields from being saved there. We cannot invoke hook_user('insert') here    // because we don't have a fully initialized user object yet.    foreach ($array as $key => $value) {      switch ($key) {        case 'pass':          $fields[] = $key;          $values[] = md5($value);          $s[] = "'%s'";          break;        case 'mode':       case 'sort':     case 'timezone':        case 'threshold':  case 'created':  case 'access':        case 'login':      case 'status':          $fields[] = $key;          $values[] = $value;          $s[] = "%d";          break;        default:          if (substr($key, 0, 4) !== 'auth' && in_array($key, $user_fields)) {            $fields[] = $key;            $values[] = $value;            $s[] = "'%s'";          }          break;      }    }    $success = db_query('INSERT INTO {users} ('. implode(', ', $fields) .') VALUES ('. implode(', ', $s) .')', $values);    if (!$success) {      // On a failed INSERT some other existing user's uid may be returned.      // We must abort to avoid overwriting their account.      return FALSE;    }    // Build the initial user object.    $array['uid'] = db_last_insert_id('users', 'uid');    $user = user_load(array('uid' => $array['uid']));    user_module_invoke('insert', $array, $user, $category);    // Build and save the serialized data field now.    $data = array();    foreach ($array as $key => $value) {      if ((substr($key, 0, 4) !== 'auth') && ($key != 'roles') && (!in_array($key, $user_fields)) && ($value !== NULL)) {        $data[$key] = $value;      }    }    db_query("UPDATE {users} SET data = '%s' WHERE uid = %d", serialize($data), $user->uid);    // Save user roles (delete just to be safe).    if (isset($array['roles']) && is_array($array['roles'])) {      db_query('DELETE FROM {users_roles} WHERE uid = %d', $array['uid']);      foreach (array_keys($array['roles']) as $rid) {        if (!in_array($rid, array(DRUPAL_ANONYMOUS_RID, DRUPAL_AUTHENTICATED_RID))) {          db_query('INSERT INTO {users_roles} (uid, rid) VALUES (%d, %d)', $array['uid'], $rid);        }      }    }    // Build the finished user object.    $user = user_load(array('uid' => $array['uid']));  }  // Save distributed authentication mappings.  $authmaps = array();  foreach ($array as $key => $value) {    if (substr($key, 0, 4) == 'auth') {      $authmaps[$key] = $value;    }  }  if (sizeof($authmaps) > 0) {    user_set_authmaps($user, $authmaps);  }  return $user;}/** * Verify the syntax of the given name. */function user_validate_name($name) {  if (!strlen($name)) return t('You must enter a username.');  if (substr($name, 0, 1) == ' ') return t('The username cannot begin with a space.');  if (substr($name, -1) == ' ') return t('The username cannot end with a space.');  if (strpos($name, '  ') !== FALSE) return t('The username cannot contain multiple spaces in a row.');  if (ereg("[^\x80-\xF7 [:alnum:]@_.-]", $name)) return t('The username contains an illegal character.');  if (preg_match('/[\x{80}-\x{A0}'.          // Non-printable ISO-8859-1 + NBSP                   '\x{AD}'.                 // Soft-hyphen                   '\x{2000}-\x{200F}'.      // Various space characters                   '\x{2028}-\x{202F}'.      // Bidirectional text overrides                   '\x{205F}-\x{206F}'.      // Various text hinting characters                   '\x{FEFF}'.               // Byte order mark                   '\x{FF01}-\x{FF60}'.      // Full-width latin                   '\x{FFF9}-\x{FFFD}'.      // Replacement characters                   '\x{0}]/u',               // NULL byte                   $name)) {    return t('The username contains an illegal character.');  }  if (strpos($name, '@') !== FALSE && !eregi('@([0-9a-z](-?[0-9a-z])*.)+[a-z]{2}([zmuvtg]|fo|me)?$', $name)) return t('The username is not a valid authentication ID.');  if (strlen($name) > USERNAME_MAX_LENGTH) return t('The username %name is too long: it must be %max characters or less.', array('%name' => $name, '%max' => USERNAME_MAX_LENGTH));}function user_validate_mail($mail) {  if (!$mail) return t('You must enter an e-mail address.');  if (!valid_email_address($mail)) {    return t('The e-mail address %mail is not valid.', array('%mail' => $mail));  }}function user_validate_picture(&$form, &$form_state) {  // If required, validate the uploaded picture.  $validators = array(    'file_validate_is_image' => array(),    'file_validate_image_resolution' => array(variable_get('user_picture_dimensions', '85x85')),    'file_validate_size' => array(variable_get('user_picture_file_size', '30') * 1024),  );  if ($file = file_save_upload('picture_upload', $validators)) {    // Remove the old picture.    if (isset($form_state['values']['_account']->picture) && file_exists($form_state['values']['_account']->picture)) {      file_delete($form_state['values']['_account']->picture);    }    // The image was saved using file_save_upload() and was added to the    // files table as a temporary file. We'll make a copy and let the garbage    // collector delete the original upload.    $info = image_get_info($file->filepath);    $destination = variable_get('user_picture_path', 'pictures') .'/picture-'. $form['#uid'] .'.'. $info['extension'];    if (file_copy($file, $destination, FILE_EXISTS_REPLACE)) {      $form_state['values']['picture'] = $file->filepath;    }    else {      form_set_error('picture_upload', t("Failed to upload the picture image; the %directory directory doesn't exist or is not writable.", array('%directory' => variable_get('user_picture_path', 'pictures'))));    }  }}/** * Generate a random alphanumeric password. */function user_password($length = 10) {  // This variable contains the list of allowable characters for the  // password. Note that the number 0 and the letter 'O' have been  // removed to avoid confusion between the two. The same is true  // of 'I', 1, and 'l'.  $allowable_characters = 'abcdefghijkmnopqrstuvwxyzABCDEFGHJKLMNPQRSTUVWXYZ23456789';  // Zero-based count of characters in the allowable list:  $len = strlen($allowable_characters) - 1;  // Declare the password as a blank string.  $pass = '';  // Loop the number of times specified by $length.  for ($i = 0; $i < $length; $i++) {    // Each iteration, pick a random character from the    // allowable string and append it to the password:    $pass .= $allowable_characters[mt_rand(0, $len)];  }  return $pass;}/** * Determine whether the user has a given privilege. * * @param $string *   The permission, such as "administer nodes", being checked for. * @param $account *   (optional) The account to check, if not given use currently logged in user. * @param $reset *   (optional) Resets the user's permissions cache, which will result in a *   recalculation of the user's permissions. This is necessary to support *   dynamically added user roles. * * @return *   Boolean TRUE if the current user has the requested permission. * * All permission checks in Drupal should go through this function. This * way, we guarantee consistent behavior, and ensure that the superuser * can perform all actions. */function user_access($string, $account = NULL, $reset = FALSE) {  global $user;  static $perm = array();  if ($reset) {    $perm = array();  }  if (!isset($account)) {    $account = $user;  }  // User #1 has all privileges:  if ($account->uid == 1) {    return TRUE;  }  // To reduce the number of SQL queries, we cache the user's permissions  // in a static variable.  if (!isset($perm[$account->uid])) {    $result = db_query("SELECT p.perm FROM {role} r INNER JOIN {permission} p ON p.rid = r.rid WHERE r.rid IN (". db_placeholders($account->roles) .")", array_keys($account->roles));    $perms = array();    while ($row = db_fetch_object($result)) {      $perms += array_flip(explode(', ', $row->perm));    }    $perm[$account->uid] = $perms;  }  return isset($perm[$account->uid][$string]);}/** * Checks for usernames blocked by user administration. * * @return boolean TRUE for blocked users, FALSE for active. */function user_is_blocked($name) {  $deny = db_fetch_object(db_query("SELECT name FROM {users} WHERE status = 0 AND name = LOWER('%s')", $name));  return $deny;}function user_fields() {  static $fields;  if (!$fields) {    $result = db_query('SELECT * FROM {users} WHERE uid = 1');    if ($field = db_fetch_array($result)) {      $fields = array_keys($field);    }    else {      // Make sure we return the default fields at least.      $fields = array('uid', 'name', 'pass', 'mail', 'picture', 'mode', 'sort', 'threshold', 'theme', 'signature', 'signature_format', 'created', 'access', 'login', 'status', 'timezone', 'language', 'init', 'data');    }  }  return $fields;}/** * Implementation of hook_perm(). */function user_perm() {  return array('administer permissions', 'administer users', 'access user profiles', 'change own username');}/** * Implementation of hook_file_download(). * * Ensure that user pictures (avatars) are always downloadable. */function user_file_download($file) {  if (strpos($file, variable_get('user_picture_path', 'pictures') .'/picture-') === 0) {    $info = image_get_info(file_create_path($file));    return array('Content-type: '. $info['mime_type']);  }}/** * Implementation of hook_search(). */function user_search($op = 'search', $keys = NULL, $skip_access_check = FALSE) {  switch ($op) {    case 'name':      if ($skip_access_check || user_access('access user profiles')) {        return t('Users');      }    case 'search':      if (user_access('access user profiles')) {        $find = array();        // Replace wildcards with MySQL/PostgreSQL wildcards.        $keys = preg_replace('!\*+!', '%', $keys);        if (user_access('administer users')) {          // Administrators can also search in the otherwise private email field.          $result = pager_query("SELECT name, uid, mail FROM {users} WHERE LOWER(name) LIKE LOWER('%%%s%%') OR LOWER(mail) LIKE LOWER('%%%s%%')", 15, 0, NULL, $keys, $keys);          while ($account = db_fetch_object($result)) {            $find[] = array('title' => $account->name .' ('. $account->mail .')', 'link' => url('user/'. $account->uid, array('absolute' => TRUE)));          }        }        else {          $result = pager_query("SELECT name, uid FROM {users} WHERE LOWER(name) LIKE LOWER('%%%s%%')", 15, 0, NULL, $keys);          while ($account = db_fetch_object($result)) {            $find[] = array('title' => $account->name, 'link' => url('user/'. $account->uid, array('absolute' => TRUE)));          }        }        return $find;      }  }}/** * Implementation of hook_elements(). */function user_elements() {  return array(    'user_profile_category' => array(),    'user_profile_item' => array(),  );}/** * Implementation of hook_user(). */function user_user($type, &$edit, &$account, $category = NULL) {  if ($type == 'view') {    $account->content['user_picture'] = array(      '#value' => theme('user_picture', $account),      '#weight' => -10,    );    if (!isset($account->content['summary'])) {      $account->content['summary'] = array();    }    $account->content['summary'] += array(      '#type' => 'user_profile_category',      '#attributes' => array('class' => 'user-member'),      '#weight' => 5,      '#title' => t('History'),    );    $account->content['summary']['member_for'] = array(      '#type' => 'user_profile_item',      '#title' => t('Member for'),      '#value' => format_interval(time() - $account->created),    );  }  if ($type == 'form' && $category == 'account') {    $form_state = array();    return user_edit_form($form_state, (isset($account->uid) ? $account->uid : FALSE), $edit);  }  if ($type == 'validate' && $category == 'account') {    return _user_edit_validate((isset($account->uid) ? $account->uid : FALSE), $edit);  }  if ($type == 'submit' && $category == 'account') {    return _user_edit_submit((isset($account->uid) ? $account->uid : FALSE), $edit);  }  if ($type == 'categories') {    return array(array('name' => 'account', 'title' => t('Account settings'), 'weight' => 1));  }}function user_login_block() {  $form = array(    '#action' => url($_GET['q'], array('query' => drupal_get_destination())),    '#id' => 'user-login-form',    '#validate' => user_login_default_validators(),    '#submit' => array('user_login_submit'),  );  $form['name'] = array('#type' => 'textfield',    '#title' => t('Username'),    '#maxlength' => USERNAME_MAX_LENGTH,    '#size' => 15,    '#required' => TRUE,  );  $form['pass'] = array('#type' => 'password',    '#title' => t('Password'),    '#maxlength' => 60,    '#size' => 15,    '#required' => TRUE,  );  $form['submit'] = array('#type' => 'submit',    '#value' => t('Log in'),  );  $items = array();  if (variable_get('user_register', 1)) {    $items[] = l(t('Create new account'), 'user/register', array('attributes' => array('title' => t('Create a new user account.'))));  }  $items[] = l(t('Request new password'), 'user/password', array('attributes' => array('title' => t('Request new password via e-mail.'))));  $form['links'] = array('#value' => theme('item_list', $items));  return $form;}/** * Implementation of hook_block(). */function user_block($op = 'list', $delta = 0, $edit = array()) {  global $user;  if ($op == 'list') {    $blocks[0]['info'] = t('User login');    // Not worth caching.    $blocks[0]['cache'] = BLOCK_NO_CACHE;    $blocks[1]['info'] = t('Navigation');    // Menu blocks can't be cached because each menu item can have    // a custom access callback. menu.inc manages its own caching.    $blocks[1]['cache'] = BLOCK_NO_CACHE;    $blocks[2]['info'] = t('Who\'s new');    // Too dynamic to cache.    $blocks[3]['info'] = t('Who\'s online');    $blocks[3]['cache'] = BLOCK_NO_CACHE;    return $blocks;  }  else if ($op == 'configure' && $delta == 2) {    $form['user_block_whois_new_count'] = array(      '#type' => 'select',      '#title' => t('Number of users to display'),      '#default_value' => variable_get('user_block_whois_new_count', 5),      '#options' => drupal_map_assoc(array(1, 2, 3, 4, 5, 6, 7, 8, 9, 10)),    );    return $form;  }  else if ($op == 'configure' && $delta == 3) {    $period = drupal_map_assoc(array(30, 60, 120, 180, 300, 600, 900, 1800, 2700, 3600, 5400, 7200, 10800, 21600, 43200, 86400), 'format_interval');    $form['user_block_seconds_online'] = array('#type' => 'select', '#title' => t('User activity'), '#default_value' => variable_get('user_block_seconds_online', 900), '#options' => $period, '#description' => t('A user is considered online for this long after they have last viewed a page.'));    $form['user_block_max_list_count'] = array('#type' => 'select', '#title' => t('User list length'), '#default_value' => variable_get('user_block_max_list_count', 10), '#options' => drupal_map_assoc(array(0, 5, 10, 15, 20, 25, 30, 40, 50, 75, 100)), '#description' => t('Maximum number of currently online users to display.'));    return $form;  }  else if ($op == 'save' && $delta == 2) {    variable_set('user_block_whois_new_count', $edit['user_block_whois_new_count']);  }  else if ($op == 'save' && $delta == 3) {    variable_set('user_block_seconds_online', $edit['user_block_seconds_online']);    variable_set('user_block_max_list_count', $edit['user_block_max_list_count']);  }  else if ($op == 'view') {    $block = array();    switch ($delta) {      case 0:        // For usability's sake, avoid showing two login forms on one page.        if (!$user->uid && !(arg(0) == 'user' && !is_numeric(arg(1)))) {          $block['subject'] = t('User login');          $block['content'] = drupal_get_form('user_login_block');        }        return $block;      case 1:        if ($menu = menu_tree()) {          $block['subject'] = $user->uid ? check_plain($user->name) : t('Navigation');          $block['content'] = $menu;        }        return $block;      case 2:        if (user_access('access content')) {          // Retrieve a list of new users who have subsequently accessed the site successfully.          $result = db_query_range('SELECT uid, name FROM {users} WHERE status != 0 AND access != 0 ORDER BY created DESC', 0, variable_get('user_block_whois_new_count', 5));          while ($account = db_fetch_object($result)) {            $items[] = $account;          }          $output = theme('user_list', $items);          $block['subject'] = t('Who\'s new');          $block['content'] = $output;        }        return $block;      case 3:        if (user_access('access content')) {          // Count users active within the defined period.          $interval = time() - variable_get('user_block_seconds_online', 900);          // Perform database queries to gather online user lists.  We use s.timestamp          // rather than u.access because it is much faster.          $anonymous_count = sess_count($interval);          $authenticated_users = db_query('SELECT DISTINCT u.uid, u.name, s.timestamp FROM {users} u INNER JOIN {sessions} s ON u.uid = s.uid WHERE s.timestamp >= %d AND s.uid > 0 ORDER BY s.timestamp DESC', $interval);          $authenticated_count = 0;          $max_users = variable_get('user_block_max_list_count', 10);          $items = array();          while ($account = db_fetch_object($authenticated_users)) {            if ($max_users > 0) {              $items[] = $account;              $max_users--;            }            $authenticated_count++;          }          // Format the output with proper grammar.          if ($anonymous_count == 1 && $authenticated_count == 1) {            $output = t('There is currently %members and %visitors online.', array('%members' => format_plural($authenticated_count, '1 user', '@count users'), '%visitors' => format_plural($anonymous_count, '1 guest', '@count guests')));          }          else {            $output = t('There are currently %members and %visitors online.', array('%members' => format_plural($authenticated_count, '1 user', '@count users'), '%visitors' => format_plural($anonymous_count, '1 guest', '@count guests')));          }          // Display a list of currently online users.          $max_users = variable_get('user_block_max_list_count', 10);          if ($authenticated_count && $max_users) {            $output .= theme('user_list', $items, t('Online users'));          }          $block['subject'] = t('Who\'s online');          $block['content'] = $output;        }        return $block;    }  }}/** * Process variables for user-picture.tpl.php. * * The $variables array contains the following arguments: * - $account * * @see user-picture.tpl.php */function template_preprocess_user_picture(&$variables) {  $variables['picture'] = '';  if (variable_get('user_pictures', 0)) {    $account = $variables['account'];    if (!empty($account->picture) && file_exists($account->picture)) {      $picture = file_create_url($account->picture);    }    else if (variable_get('user_picture_default', '')) {      $picture = variable_get('user_picture_default', '');    }    if (isset($picture)) {      $alt = t("@user's picture", array('@user' => $account->name ? $account->name : variable_get('anonymous', t('Anonymous'))));      $variables['picture'] = theme('image', $picture, $alt, $alt, '', FALSE);      if (!empty($account->uid) && user_access('access user profiles')) {        $attributes = array('attributes' => array('title' => t('View user profile.')), 'html' => TRUE);        $variables['picture'] = l($variables['picture'], "user/$account->uid", $attributes);      }    }  }}/** * Make a list of users. * * @param $users *   An array with user objects. Should contain at least the name and uid. * @param $title *  (optional) Title to pass on to theme_item_list(). * * @ingroup themeable */function theme_user_list($users, $title = NULL) {  if (!empty($users)) {    foreach ($users as $user) {      $items[] = theme('username', $user);    }  }  return theme('item_list', $items, $title);}function user_is_anonymous() {  // Menu administrators can see items for anonymous when administering.  return !$GLOBALS['user']->uid || !empty($GLOBALS['menu_admin']);}function user_is_logged_in() {  return (bool)$GLOBALS['user']->uid;}function user_register_access() {  return user_is_anonymous() && variable_get('user_register', 1);}function user_view_access($account) {  return $account && $account->uid &&    (      // Always let users view their own profile.      ($GLOBALS['user']->uid == $account->uid) ||      // Administrators can view all accounts.      user_access('administer users') ||      // The user is not blocked and logged in at least once.      ($account->access && $account->status && user_access('access user profiles'))    );}/** * Access callback for user account editing. */function user_edit_access($account) {  return (($GLOBALS['user']->uid == $account->uid) || user_access('administer users')) && $account->uid > 0;}function user_load_self($arg) {  $arg[1] = user_load($GLOBALS['user']->uid);  return $arg;}/** * Implementation of hook_menu(). */function user_menu() {  $items['user/autocomplete'] = array(    'title' => 'User autocomplete',    'page callback' => 'user_autocomplete',    'access callback' => 'user_access',    'access arguments' => array('access user profiles'),    'type' => MENU_CALLBACK,    'file' => 'user.pages.inc',  );  // Registration and login pages.  $items['user'] = array(    'title' => 'User account',    'page callback' => 'user_page',    'access callback' => TRUE,    'type' => MENU_CALLBACK,    'file' => 'user.pages.inc',  );  $items['user/login'] = array(    'title' => 'Log in',    'access callback' => 'user_is_anonymous',    'type' => MENU_DEFAULT_LOCAL_TASK,  );  $items['user/register'] = array(    'title' => 'Create new account',    'page callback' => 'drupal_get_form',    'page arguments' => array('user_register'),    'access callback' => 'user_register_access',    'type' => MENU_LOCAL_TASK,    'file' => 'user.pages.inc',  );  $items['user/password'] = array(    'title' => 'Request new password',    'page callback' => 'drupal_get_form',    'page arguments' => array('user_pass'),    'access callback' => 'user_is_anonymous',    'type' => MENU_LOCAL_TASK,    'file' => 'user.pages.inc',  );  $items['user/reset/%/%/%'] = array(    'title' => 'Reset password',    'page callback' => 'drupal_get_form',    'page arguments' => array('user_pass_reset', 2, 3, 4),    'access callback' => TRUE,    'type' => MENU_CALLBACK,    'file' => 'user.pages.inc',  );  // Admin user pages.  $items['admin/user'] = array(    'title' => 'User management',    'description' => "Manage your site's users, groups and access to site features.",    'position' => 'left',    'page callback' => 'system_admin_menu_block_page',    'access arguments' => array('access administration pages'),    'file' => 'system.admin.inc',    'file path' => drupal_get_path('module', 'system'),  );  $items['admin/user/user'] = array(    'title' => 'Users',    'description' => 'List, add, and edit users.',    'page callback' => 'user_admin',    'page arguments' => array('list'),    'access arguments' => array('administer users'),    'file' => 'user.admin.inc',  );  $items['admin/user/user/list'] = array(    'title' => 'List',    'type' => MENU_DEFAULT_LOCAL_TASK,    'weight' => -10,  );  $items['admin/user/user/create'] = array(    'title' => 'Add user',    'page arguments' => array('create'),    'access arguments' => array('administer users'),    'type' => MENU_LOCAL_TASK,    'file' => 'user.admin.inc',  );  $items['admin/user/settings'] = array(    'title' => 'User settings',    'description' => 'Configure default behavior of users, including registration requirements, e-mails, and user pictures.',    'page callback' => 'drupal_get_form',    'page arguments' => array('user_admin_settings'),    'access arguments' => array('administer users'),    'file' => 'user.admin.inc',  );  // Admin access pages.  $items['admin/user/permissions'] = array(    'title' => 'Permissions',    'description' => 'Determine access to features by selecting permissions for roles.',    'page callback' => 'drupal_get_form',    'page arguments' => array('user_admin_perm'),    'access arguments' => array('administer permissions'),    'file' => 'user.admin.inc',  );  $items['admin/user/roles'] = array(    'title' => 'Roles',    'description' => 'List, edit, or add user roles.',    'page callback' => 'drupal_get_form',    'page arguments' => array('user_admin_new_role'),    'access arguments' => array('administer permissions'),    'file' => 'user.admin.inc',  );  $items['admin/user/roles/edit'] = array(    'title' => 'Edit role',    'page arguments' => array('user_admin_role'),    'access arguments' => array('administer permissions'),    'type' => MENU_CALLBACK,    'file' => 'user.admin.inc',  );  $items['admin/user/rules'] = array(    'title' => 'Access rules',    'description' => 'List and create rules to disallow usernames, e-mail addresses, and IP addresses.',    'page callback' => 'user_admin_access',    'access arguments' => array('administer permissions'),    'file' => 'user.admin.inc',  );  $items['admin/user/rules/list'] = array(    'title' => 'List',    'type' => MENU_DEFAULT_LOCAL_TASK,    'weight' => -10,  );  $items['admin/user/rules/add'] = array(    'title' => 'Add rule',    'page callback' => 'user_admin_access_add',    'access arguments' => array('administer permissions'),    'type' => MENU_LOCAL_TASK,    'file' => 'user.admin.inc',  );  $items['admin/user/rules/check'] = array(    'title' => 'Check rules',    'page callback' => 'user_admin_access_check',    'access arguments' => array('administer permissions'),    'type' => MENU_LOCAL_TASK,    'file' => 'user.admin.inc',  );  $items['admin/user/rules/edit'] = array(    'title' => 'Edit rule',    'page callback' => 'user_admin_access_edit',    'access arguments' => array('administer permissions'),    'type' => MENU_CALLBACK,    'file' => 'user.admin.inc',  );  $items['admin/user/rules/delete'] = array(    'title' => 'Delete rule',    'page callback' => 'drupal_get_form',    'page arguments' => array('user_admin_access_delete_confirm'),    'access arguments' => array('administer permissions'),    'type' => MENU_CALLBACK,    'file' => 'user.admin.inc',  );  $items['logout'] = array(    'title' => 'Log out',    'access callback' => 'user_is_logged_in',    'page callback' => 'user_logout',    'weight' => 10,    'file' => 'user.pages.inc',  );  $items['user/%user_uid_optional'] = array(    'title' => 'My account',    'title callback' => 'user_page_title',    'title arguments' => array(1),    'page callback' => 'user_view',    'page arguments' => array(1),    'access callback' => 'user_view_access',    'access arguments' => array(1),    'parent' => '',    'file' => 'user.pages.inc',  );  $items['user/%user/view'] = array(    'title' => 'View',    'type' => MENU_DEFAULT_LOCAL_TASK,    'weight' => -10,  );  $items['user/%user/delete'] = array(    'title' => 'Delete',    'page callback' => 'drupal_get_form',    'page arguments' => array('user_confirm_delete', 1),    'access callback' => 'user_access',    'access arguments' => array('administer users'),    'type' => MENU_CALLBACK,    'file' => 'user.pages.inc',  );  $items['user/%user_category/edit'] = array(    'title' => 'Edit',    'page callback' => 'user_edit',    'page arguments' => array(1),    'access callback' => 'user_edit_access',    'access arguments' => array(1),    'type' => MENU_LOCAL_TASK,    'load arguments' => array('%map', '%index'),    'file' => 'user.pages.inc',  );  $items['user/%user_category/edit/account'] = array(    'title' => 'Account',    'type' => MENU_DEFAULT_LOCAL_TASK,    'load arguments' => array('%map', '%index'),  );  $empty_account = new stdClass();  if (($categories = _user_categories($empty_account)) && (count($categories) > 1)) {    foreach ($categories as $key => $category) {      // 'account' is already handled by the MENU_DEFAULT_LOCAL_TASK.      if ($category['name'] != 'account') {        $items['user/%user_category/edit/'. $category['name']] = array(          'title callback' => 'check_plain',          'title arguments' => array($category['title']),          'page callback' => 'user_edit',          'page arguments' => array(1, 3),          'access callback' => isset($category['access callback']) ? $category['access callback'] : 'user_edit_access',          'access arguments' => isset($category['access arguments']) ? $category['access arguments'] : array(1),          'type' => MENU_LOCAL_TASK,          'weight' => $category['weight'],          'load arguments' => array('%map', '%index'),          'tab_parent' => 'user/%/edit',          'file' => 'user.pages.inc',        );      }    }  }  return $items;}/** * Implementation of hook_init(). */function user_init() {  drupal_add_css(drupal_get_path('module', 'user') .'/user.css', 'module');}/** * Load either a specified or the current user account. * * @param $uid *   An optional user ID of the user to load. If not provided, the current *   user's ID will be used. * @return *   A fully-loaded $user object upon successful user load, FALSE if user *   cannot be loaded. * * @see user_load() */function user_uid_optional_load($uid = NULL) {  if (!isset($uid)) {    $uid = $GLOBALS['user']->uid;  }  return user_load($uid);}/** * Return a user object after checking if any profile category in the path exists. */function user_category_load($uid, &$map, $index) {  static $user_categories, $accounts;  // Cache $account - this load function will get called for each profile tab.  if (!isset($accounts[$uid])) {    $accounts[$uid] = user_load($uid);  }  $valid = TRUE;  if ($account = $accounts[$uid]) {    // Since the path is like user/%/edit/category_name, the category name will    // be at a position 2 beyond the index corresponding to the % wildcard.    $category_index = $index + 2;    // Valid categories may contain slashes, and hence need to be imploded.    $category_path = implode('/', array_slice($map, $category_index));    if ($category_path) {      // Check that the requested category exists.      $valid = FALSE;      if (!isset($user_categories)) {        $empty_account = new stdClass();        $user_categories = _user_categories($empty_account);      }      foreach ($user_categories as $category) {        if ($category['name'] == $category_path) {          $valid = TRUE;          // Truncate the map array in case the category name had slashes.          $map = array_slice($map, 0, $category_index);          // Assign the imploded category name to the last map element.          $map[$category_index] = $category_path;          break;        }      }    }  }  return $valid ? $account : FALSE;}/** * Returns the user id of the currently logged in user. */function user_uid_optional_to_arg($arg) {  // Give back the current user uid when called from eg. tracker, aka.  // with an empty arg. Also use the current user uid when called from  // the menu with a % for the current account link.  return empty($arg) || $arg == '%' ? $GLOBALS['user']->uid : $arg;}/** * Menu item title callback - use the user name if it's not the current user. */function user_page_title($account) {  if ($account->uid == $GLOBALS['user']->uid) {    return t('My account');  }  return $account->name;}/** * Discover which external authentication module(s) authenticated a username. * * @param $authname *   A username used by an external authentication module. * @return *   An associative array with module as key and username as value. */function user_get_authmaps($authname = NULL) {  $result = db_query("SELECT authname, module FROM {authmap} WHERE authname = '%s'", $authname);  $authmaps = array();  $has_rows = FALSE;  while ($authmap = db_fetch_object($result)) {    $authmaps[$authmap->module] = $authmap->authname;    $has_rows = TRUE;  }  return $has_rows ? $authmaps : 0;}/** * Save mappings of which external authentication module(s) authenticated * a user. Maps external usernames to user ids in the users table. * * @param $account *   A user object. * @param $authmaps *   An associative array with a compound key and the username as the value. *   The key is made up of 'authname_' plus the name of the external authentication *   module. * @see user_external_login_register() */function user_set_authmaps($account, $authmaps) {  foreach ($authmaps as $key => $value) {    $module = explode('_', $key, 2);    if ($value) {      db_query("UPDATE {authmap} SET authname = '%s' WHERE uid = %d AND module = '%s'", $value, $account->uid, $module[1]);      if (!db_affected_rows()) {        db_query("INSERT INTO {authmap} (authname, uid, module) VALUES ('%s', %d, '%s')", $value, $account->uid, $module[1]);      }    }    else {      db_query("DELETE FROM {authmap} WHERE uid = %d AND module = '%s'", $account->uid, $module[1]);    }  }}/** * Form builder; the main user login form. * * @ingroup forms */function user_login(&$form_state) {  global $user;  // If we are already logged on, go to the user page instead.  if ($user->uid) {    drupal_goto('user/'. $user->uid);  }  // Display login form:  $form['name'] = array('#type' => 'textfield',    '#title' => t('Username'),    '#size' => 60,    '#maxlength' => USERNAME_MAX_LENGTH,    '#required' => TRUE,  );  $form['name']['#description'] = t('Enter your @s username.', array('@s' => variable_get('site_name', 'Drupal')));  $form['pass'] = array('#type' => 'password',    '#title' => t('Password'),    '#description' => t('Enter the password that accompanies your username.'),    '#required' => TRUE,  );  $form['#validate'] = user_login_default_validators();  $form['submit'] = array('#type' => 'submit', '#value' => t('Log in'), '#weight' => 2);  return $form;}/** * Set up a series for validators which check for blocked/denied users, * then authenticate against local database, then return an error if * authentication fails. Distributed authentication modules are welcome * to use hook_form_alter() to change this series in order to * authenticate against their user database instead of the local users * table. * * We use three validators instead of one since external authentication * modules usually only need to alter the second validator. * * @see user_login_name_validate() * @see user_login_authenticate_validate() * @see user_login_final_validate() * @return array *   A simple list of validate functions. */function user_login_default_validators() {  return array('user_login_name_validate', 'user_login_authenticate_validate', 'user_login_final_validate');}/** * A FAPI validate handler. Sets an error if supplied username has been blocked * or denied access. */function user_login_name_validate($form, &$form_state) {  if (isset($form_state['values']['name'])) {    if (user_is_blocked($form_state['values']['name'])) {      // blocked in user administration      form_set_error('name', t('The username %name has not been activated or is blocked.', array('%name' => $form_state['values']['name'])));    }    else if (drupal_is_denied('user', $form_state['values']['name'])) {      // denied by access controls      form_set_error('name', t('The name %name is a reserved username.', array('%name' => $form_state['values']['name'])));    }  }}/** * A validate handler on the login form. Check supplied username/password * against local users table. If successful, sets the global $user object. */function user_login_authenticate_validate($form, &$form_state) {  user_authenticate($form_state['values']);}/** * A validate handler on the login form. Should be the last validator. Sets an * error if user has not been authenticated yet. */function user_login_final_validate($form, &$form_state) {  global $user;  if (!$user->uid) {    form_set_error('name', t('Sorry, unrecognized username or password. <a href="@password">Have you forgotten your password?</a>', array('@password' => url('user/password'))));    watchdog('user', 'Login attempt failed for %user.', array('%user' => $form_state['values']['name']));  }}/** * Try to log in the user locally. * * @param $form_values *   Form values with at least 'name' and 'pass' keys, as well as anything else *   which should be passed along to hook_user op 'login'. * * @return *  A $user object, if successful. */function user_authenticate($form_values = array()) {  global $user;  // Load the account to check if the e-mail is denied by an access rule.  // Doing this check here saves us a user_load() in user_login_name_validate()  // and introduces less code change for a security fix.  $account = user_load(array('name' => $form_values['name'], 'pass' => trim($form_values['pass']), 'status' => 1));  if ($account && drupal_is_denied('mail', $account->mail)) {    form_set_error('name', t('The name %name is registered using a reserved e-mail address and therefore could not be logged in.', array('%name' => $account->name)));  }  // Name and pass keys are required.  // The user is about to be logged in, so make sure no error was previously  // encountered in the validation process.  if (!form_get_errors() && !empty($form_values['name']) && !empty($form_values['pass']) && $account) {    $user = $account;    user_authenticate_finalize($form_values);    return $user;  }}/** * Finalize the login process. Must be called when logging in a user. * * The function records a watchdog message about the new session, saves the * login timestamp, calls hook_user op 'login' and generates a new session. * * $param $edit *   This array is passed to hook_user op login. */function user_authenticate_finalize(&$edit) {  global $user;  watchdog('user', 'Session opened for %name.', array('%name' => $user->name));  // Update the user table timestamp noting user has logged in.  // This is also used to invalidate one-time login links.  $user->login = time();  db_query("UPDATE {users} SET login = %d WHERE uid = %d", $user->login, $user->uid);  // Regenerate the session ID to prevent against session fixation attacks.  sess_regenerate();  user_module_invoke('login', $edit, $user);}/** * Submit handler for the login form. Redirects the user to a page. * * The user is redirected to the My Account page. Setting the destination in * the query string (as done by the user login block) overrides the redirect. */function user_login_submit($form, &$form_state) {  global $user;  if ($user->uid) {    $form_state['redirect'] = 'user/'. $user->uid;    return;  }}/** * Helper function for authentication modules. Either login in or registers * the current user, based on username. Either way, the global $user object is * populated based on $name. */function user_external_login_register($name, $module) {  global $user;  $existing_user = user_load(array('name' => $name));  if (isset($existing_user->uid)) {    $user = $existing_user;  }  else {    // Register this new user.    $userinfo = array(      'name' => $name,      'pass' => user_password(),      'init' => $name,      'status' => 1,      "authname_$module" => $name,      'access' => time()    );    $account = user_save('', $userinfo);    // Terminate if an error occured during user_save().    if (!$account) {      drupal_set_message(t("Error saving user account."), 'error');      return;    }    $user = $account;    watchdog('user', 'New external user: %name using module %module.', array('%name' => $name, '%module' => $module), WATCHDOG_NOTICE, l(t('edit'), 'user/'. $user->uid .'/edit'));  }}function user_pass_reset_url($account) {  $timestamp = time();  return url("user/reset/$account->uid/$timestamp/". user_pass_rehash($account->pass, $timestamp, $account->login), array('absolute' => TRUE));}function user_pass_rehash($password, $timestamp, $login) {  return md5($timestamp . $password . $login);}function user_edit_form(&$form_state, $uid, $edit, $register = FALSE) {  _user_password_dynamic_validation();  $admin = user_access('administer users');  // Account information:  $form['account'] = array('#type' => 'fieldset',    '#title' => t('Account information'),    '#weight' => -10,  );  // Only show name field when: registration page; or user is editing own account and can change username; or an admin user.  if ($register || ($GLOBALS['user']->uid == $uid && user_access('change own username')) || $admin) {    $form['account']['name'] = array('#type' => 'textfield',      '#title' => t('Username'),      '#default_value' => $edit['name'],      '#maxlength' => USERNAME_MAX_LENGTH,      '#description' => t('Spaces are allowed; punctuation is not allowed except for periods, hyphens, and underscores.'),      '#required' => TRUE,    );  }  $form['account']['mail'] = array('#type' => 'textfield',    '#title' => t('E-mail address'),    '#default_value' => $edit['mail'],    '#maxlength' => EMAIL_MAX_LENGTH,    '#description' => t('A valid e-mail address. All e-mails from the system will be sent to this address. The e-mail address is not made public and will only be used if you wish to receive a new password or wish to receive certain news or notifications by e-mail.'),    '#required' => TRUE,  );  if (!$register) {    $form['account']['pass'] = array('#type' => 'password_confirm',      '#description' => t('To change the current user password, enter the new password in both fields.'),      '#size' => 25,    );  }  elseif (!variable_get('user_email_verification', TRUE) || $admin) {    $form['account']['pass'] = array(      '#type' => 'password_confirm',      '#description' => t('Provide a password for the new account in both fields.'),      '#required' => TRUE,      '#size' => 25,    );  }  if ($admin) {    $form['account']['status'] = array(      '#type' => 'radios',      '#title' => t('Status'),      '#default_value' => isset($edit['status']) ? $edit['status'] : 1,      '#options' => array(t('Blocked'), t('Active'))    );  }  if (user_access('administer permissions')) {    $roles = user_roles(TRUE);    // The disabled checkbox subelement for the 'authenticated user' role    // must be generated separately and added to the checkboxes element,    // because of a limitation in D6 FormAPI not supporting a single disabled    // checkbox within a set of checkboxes.    // TODO: This should be solved more elegantly. See issue #119038.    $checkbox_authenticated = array(      '#type' => 'checkbox',      '#title' => $roles[DRUPAL_AUTHENTICATED_RID],      '#default_value' => TRUE,      '#disabled' => TRUE,    );    unset($roles[DRUPAL_AUTHENTICATED_RID]);    if ($roles) {      $default = empty($edit['roles']) ? array() : array_keys($edit['roles']);      $form['account']['roles'] = array(        '#type' => 'checkboxes',        '#title' => t('Roles'),        '#default_value' => $default,        '#options' => $roles,        DRUPAL_AUTHENTICATED_RID => $checkbox_authenticated,      );    }  }  // Signature:  if (variable_get('user_signatures', 0) && module_exists('comment') && !$register) {    $form['signature_settings'] = array(      '#type' => 'fieldset',      '#title' => t('Signature settings'),      '#weight' => 1,    );    $form['signature_settings']['signature'] = array(      '#type' => 'textarea',      '#title' => t('Signature'),      '#default_value' => $edit['signature'],      '#description' => t('Your signature will be publicly displayed at the end of your comments.'),    );    // Prevent a "validation error" message when the user attempts to save with a default value they    // do not have access to.    if (!filter_access($edit['signature_format']) && empty($_POST)) {      drupal_set_message(t("The signature input format has been set to a format you don't have access to. It will be changed to a format you have access to when you save this page."));      $edit['signature_format'] = FILTER_FORMAT_DEFAULT;    }    $form['signature_settings']['signature_format'] = filter_form($edit['signature_format'], NULL, array('signature_format'));  }  // Picture/avatar:  if (variable_get('user_pictures', 0) && !$register) {    $form['picture'] = array('#type' => 'fieldset', '#title' => t('Picture'), '#weight' => 1);    $picture = theme('user_picture', (object)$edit);    if ($edit['picture']) {      $form['picture']['current_picture'] = array('#value' => $picture);      $form['picture']['picture_delete'] = array('#type' => 'checkbox', '#title' => t('Delete picture'), '#description' => t('Check this box to delete your current picture.'));    }    else {      $form['picture']['picture_delete'] = array('#type' => 'hidden');    }    $form['picture']['picture_upload'] = array('#type' => 'file', '#title' => t('Upload picture'), '#size' => 48, '#description' => t('Your virtual face or picture. Maximum dimensions are %dimensions and the maximum size is %size kB.', array('%dimensions' => variable_get('user_picture_dimensions', '85x85'), '%size' => variable_get('user_picture_file_size', '30'))) .' '. variable_get('user_picture_guidelines', ''));    $form['#validate'][] = 'user_profile_form_validate';    $form['#validate'][] = 'user_validate_picture';  }  $form['#uid'] = $uid;  return $form;}function _user_edit_validate($uid, &$edit) {  // Validate the username when: new user account; or user is editing own account and can change username; or an admin user.  if (!$uid || ($GLOBALS['user']->uid == $uid && user_access('change own username')) || user_access('administer users')) {    if ($error = user_validate_name($edit['name'])) {      form_set_error('name', $error);    }    else if (db_result(db_query("SELECT COUNT(*) FROM {users} WHERE uid != %d AND LOWER(name) = LOWER('%s')", $uid, $edit['name'])) > 0) {      form_set_error('name', t('The name %name is already taken.', array('%name' => $edit['name'])));    }    else if (drupal_is_denied('user', $edit['name'])) {      form_set_error('name', t('The name %name has been denied access.', array('%name' => $edit['name'])));    }  }  // Validate the e-mail address:  if ($error = user_validate_mail($edit['mail'])) {    form_set_error('mail', $error);  }  else if (db_result(db_query("SELECT COUNT(*) FROM {users} WHERE uid != %d AND LOWER(mail) = LOWER('%s')", $uid, $edit['mail'])) > 0) {    form_set_error('mail', t('The e-mail address %email is already registered. <a href="@password">Have you forgotten your password?</a>', array('%email' => $edit['mail'], '@password' => url('user/password'))));  }  else if (drupal_is_denied('mail', $edit['mail'])) {    form_set_error('mail', t('The e-mail address %email has been denied access.', array('%email' => $edit['mail'])));  }}function _user_edit_submit($uid, &$edit) {  $account = user_load($uid);  // Delete picture if requested, and if no replacement picture was given.  if (!empty($edit['picture_delete'])) {    if ($account->picture && file_exists($account->picture)) {      file_delete($account->picture);    }    $edit['picture'] = '';  }  if (isset($edit['roles'])) {    $edit['roles'] = array_filter($edit['roles']);  }}/** * Delete a user. * * @param $edit An array of submitted form values. * @param $uid The user ID of the user to delete. */function user_delete($edit, $uid) {  $account = user_load(array('uid' => $uid));  sess_destroy_uid($uid);  _user_mail_notify('status_deleted', $account);  db_query('DELETE FROM {users} WHERE uid = %d', $uid);  db_query('DELETE FROM {users_roles} WHERE uid = %d', $uid);  db_query('DELETE FROM {authmap} WHERE uid = %d', $uid);  $variables = array('%name' => $account->name, '%email' => '<'. $account->mail .'>');  watchdog('user', 'Deleted user: %name %email.', $variables, WATCHDOG_NOTICE);  user_module_invoke('delete', $edit, $account);}/** * Builds a structured array representing the profile content. * * @param $account *   A user object. * * @return *   A structured array containing the individual elements of the profile. */function user_build_content(&$account) {  $edit = NULL;  user_module_invoke('view', $edit, $account);  // Allow modules to modify the fully-built profile.  drupal_alter('profile', $account);  return $account->content;}/** * Implementation of hook_mail(). */function user_mail($key, &$message, $params) {  $language = $message['language'];  $variables = user_mail_tokens($params['account'], $language);  $message['subject'] .= _user_mail_text($key .'_subject', $language, $variables);  $message['body'][] = _user_mail_text($key .'_body', $language, $variables);}/** * Returns a mail string for a variable name. * * Used by user_mail() and the settings forms to retrieve strings. */function _user_mail_text($key, $language = NULL, $variables = array()) {  $langcode = isset($language) ? $language->language : NULL;  if ($admin_setting = variable_get('user_mail_'. $key, FALSE)) {    // An admin setting overrides the default string.    return strtr($admin_setting, $variables);  }  else {    // No override, return default string.    switch ($key) {      case 'register_no_approval_required_subject':        return t('Account details for !username at !site', $variables, $langcode);      case 'register_no_approval_required_body':        return t("!username,\n\nThank you for registering at !site. You may now log in to !login_uri using the following username and password:\n\nusername: !username\npassword: !password\n\nYou may also log in by clicking on this link or copying and pasting it in your browser:\n\n!login_url\n\nThis is a one-time login, so it can be used only once.\n\nAfter logging in, you will be redirected to !edit_uri so you can change your password.\n\n\n--  !site team", $variables, $langcode);      case 'register_admin_created_subject':        return t('An administrator created an account for you at !site', $variables, $langcode);      case 'register_admin_created_body':        return t("!username,\n\nA site administrator at !site has created an account for you. You may now log in to !login_uri using the following username and password:\n\nusername: !username\npassword: !password\n\nYou may also log in by clicking on this link or copying and pasting it in your browser:\n\n!login_url\n\nThis is a one-time login, so it can be used only once.\n\nAfter logging in, you will be redirected to !edit_uri so you can change your password.\n\n\n--  !site team", $variables, $langcode);      case 'register_pending_approval_subject':      case 'register_pending_approval_admin_subject':        return t('Account details for !username at !site (pending admin approval)', $variables, $langcode);      case 'register_pending_approval_body':        return t("!username,\n\nThank you for registering at !site. Your application for an account is currently pending approval. Once it has been approved, you will receive another e-mail containing information about how to log in, set your password, and other details.\n\n\n--  !site team", $variables, $langcode);      case 'register_pending_approval_admin_body':        return t("!username has applied for an account.\n\n!edit_uri", $variables, $langcode);      case 'password_reset_subject':        return t('Replacement login information for !username at !site', $variables, $langcode);      case 'password_reset_body':        return t("!username,\n\nA request to reset the password for your account has been made at !site.\n\nYou may now log in to !uri_brief by clicking on this link or copying and pasting it in your browser:\n\n!login_url\n\nThis is a one-time login, so it can be used only once. It expires after one day and nothing will happen if it's not used.\n\nAfter logging in, you will be redirected to !edit_uri so you can change your password.", $variables, $langcode);      case 'status_activated_subject':        return t('Account details for !username at !site (approved)', $variables, $langcode);      case 'status_activated_body':        return t("!username,\n\nYour account at !site has been activated.\n\nYou may now log in by clicking on this link or copying and pasting it in your browser:\n\n!login_url\n\nThis is a one-time login, so it can be used only once.\n\nAfter logging in, you will be redirected to !edit_uri so you can change your password.\n\nOnce you have set your own password, you will be able to log in to !login_uri in the future using:\n\nusername: !username\n", $variables, $langcode);      case 'status_blocked_subject':        return t('Account details for !username at !site (blocked)', $variables, $langcode);      case 'status_blocked_body':        return t("!username,\n\nYour account on !site has been blocked.", $variables, $langcode);      case 'status_deleted_subject':        return t('Account details for !username at !site (deleted)', $variables, $langcode);      case 'status_deleted_body':        return t("!username,\n\nYour account on !site has been deleted.", $variables, $langcode);    }  }}/*** Administrative features ***********************************************//** * Retrieve an array of roles matching specified conditions. * * @param $membersonly *   Set this to TRUE to exclude the 'anonymous' role. * @param $permission *   A string containing a permission. If set, only roles containing that *   permission are returned. * * @return *   An associative array with the role id as the key and the role name as *   value. */function user_roles($membersonly = FALSE, $permission = NULL) {  // System roles take the first two positions.  $roles = array(    DRUPAL_ANONYMOUS_RID => NULL,    DRUPAL_AUTHENTICATED_RID => NULL,  );  if (!empty($permission)) {    $result = db_query("SELECT r.* FROM {role} r INNER JOIN {permission} p ON r.rid = p.rid WHERE p.perm LIKE '%%%s%%' ORDER BY r.name", $permission);  }  else {    $result = db_query('SELECT * FROM {role} ORDER BY name');  }  while ($role = db_fetch_object($result)) {    switch ($role->rid) {      // We only translate the built in role names      case DRUPAL_ANONYMOUS_RID:        if (!$membersonly) {          $roles[$role->rid] = t($role->name);        }        break;      case DRUPAL_AUTHENTICATED_RID:        $roles[$role->rid] = t($role->name);        break;      default:        $roles[$role->rid] = $role->name;    }  }  // Filter to remove unmatched system roles.  return array_filter($roles);}/** * Implementation of hook_user_operations(). */function user_user_operations($form_state = array()) {  $operations = array(    'unblock' => array(      'label' => t('Unblock the selected users'),      'callback' => 'user_user_operations_unblock',    ),    'block' => array(      'label' => t('Block the selected users'),      'callback' => 'user_user_operations_block',    ),    'delete' => array(      'label' => t('Delete the selected users'),    ),  );  if (user_access('administer permissions')) {    $roles = user_roles(TRUE);    unset($roles[DRUPAL_AUTHENTICATED_RID]);  // Can't edit authenticated role.    $add_roles = array();    foreach ($roles as $key => $value) {      $add_roles['add_role-'. $key] = $value;    }    $remove_roles = array();    foreach ($roles as $key => $value) {      $remove_roles['remove_role-'. $key] = $value;    }    if (count($roles)) {      $role_operations = array(        t('Add a role to the selected users') => array(          'label' => $add_roles,        ),        t('Remove a role from the selected users') => array(          'label' => $remove_roles,        ),      );      $operations += $role_operations;    }  }  // If the form has been posted, we need to insert the proper data for  // role editing if necessary.  if (!empty($form_state['submitted'])) {    $operation_rid = explode('-', $form_state['values']['operation']);    $operation = $operation_rid[0];    if ($operation == 'add_role' || $operation == 'remove_role') {      $rid = $operation_rid[1];      if (user_access('administer permissions')) {        $operations[$form_state['values']['operation']] = array(          'callback' => 'user_multiple_role_edit',          'callback arguments' => array($operation, $rid),        );      }      else {        watchdog('security', 'Detected malicious attempt to alter protected user fields.', array(), WATCHDOG_WARNING);        return;      }    }  }  return $operations;}/** * Callback function for admin mass unblocking users. */function user_user_operations_unblock($accounts) {  foreach ($accounts as $uid) {    $account = user_load(array('uid' => (int)$uid));    // Skip unblocking user if they are already unblocked.    if ($account !== FALSE && $account->status == 0) {      user_save($account, array('status' => 1));    }  }}/** * Callback function for admin mass blocking users. */function user_user_operations_block($accounts) {  foreach ($accounts as $uid) {    $account = user_load(array('uid' => (int)$uid));    // Skip blocking user if they are already blocked.    if ($account !== FALSE && $account->status == 1) {      user_save($account, array('status' => 0));    }  }}/** * Callback function for admin mass adding/deleting a user role. */function user_multiple_role_edit($accounts, $operation, $rid) {  // The role name is not necessary as user_save() will reload the user  // object, but some modules' hook_user() may look at this first.  $role_name = db_result(db_query('SELECT name FROM {role} WHERE rid = %d', $rid));  switch ($operation) {    case 'add_role':      foreach ($accounts as $uid) {        $account = user_load(array('uid' => (int)$uid));        // Skip adding the role to the user if they already have it.        if ($account !== FALSE && !isset($account->roles[$rid])) {          $roles = $account->roles + array($rid => $role_name);          user_save($account, array('roles' => $roles));        }      }      break;    case 'remove_role':      foreach ($accounts as $uid) {        $account = user_load(array('uid' => (int)$uid));        // Skip removing the role from the user if they already don't have it.        if ($account !== FALSE && isset($account->roles[$rid])) {          $roles = array_diff($account->roles, array($rid => $role_name));          user_save($account, array('roles' => $roles));        }      }      break;  }}function user_multiple_delete_confirm(&$form_state) {  $edit = $form_state['post'];  $form['accounts'] = array('#prefix' => '<ul>', '#suffix' => '</ul>', '#tree' => TRUE);  // array_filter() returns only elements with TRUE values.  foreach (array_filter($edit['accounts']) as $uid => $value) {    $user = db_result(db_query('SELECT name FROM {users} WHERE uid = %d', $uid));    $form['accounts'][$uid] = array('#type' => 'hidden', '#value' => $uid, '#prefix' => '<li>', '#suffix' => check_plain($user) ."</li>\n");  }  $form['operation'] = array('#type' => 'hidden', '#value' => 'delete');  return confirm_form($form,                      t('Are you sure you want to delete these users?'),                      'admin/user/user', t('This action cannot be undone.'),                      t('Delete all'), t('Cancel'));}function user_multiple_delete_confirm_submit($form, &$form_state) {  if ($form_state['values']['confirm']) {    foreach ($form_state['values']['accounts'] as $uid => $value) {      user_delete($form_state['values'], $uid);    }    drupal_set_message(t('The users have been deleted.'));  }  $form_state['redirect'] = 'admin/user/user';  return;}/** * Implementation of hook_help(). */function user_help($path, $arg) {  global $user;  switch ($path) {    case 'admin/help#user':      $output = '<p>'. t('The user module allows users to register, login, and log out. Users benefit from being able to sign on because it associates content they create with their account and allows various permissions to be set for their roles. The user module supports user roles which establish fine grained permissions allowing each role to do only what the administrator wants them to. Each user is assigned to one or more roles. By default there are two roles <em>anonymous</em> - a user who has not logged in, and <em>authenticated</em> a user who has signed up and who has been authorized.') .'</p>';      $output .= '<p>'. t("Users can use their own name or handle and can specify personal configuration settings through their individual <em>My account</em> page. Users must authenticate by supplying a local username and password or through their OpenID, an optional and secure method for logging into many websites with a single username and password. In some configurations, users may authenticate using a username and password from another Drupal site, or through some other site-specific mechanism.") .'</p>';      $output .= '<p>'. t('A visitor accessing your website is assigned a unique ID, or session ID, which is stored in a cookie. The cookie does not contain personal information, but acts as a key to retrieve information from your site. Users should have cookies enabled in their web browser when using your site.') .'</p>';      $output .= '<p>'. t('For more information, see the online handbook entry for <a href="@user">User module</a>.', array('@user' => 'http://drupal.org/handbook/modules/user/')) .'</p>';      return $output;    case 'admin/user/user':      return '<p>'. t('Drupal allows users to register, login, log out, maintain user profiles, etc. Users of the site may not use their own names to post content until they have signed up for a user account.') .'</p>';    case 'admin/user/user/create':    case 'admin/user/user/account/create':      return '<p>'. t("This web page allows administrators to register new users. Users' e-mail addresses and usernames must be unique.") .'</p>';    case 'admin/user/rules':      return '<p>'. t('Set up username and e-mail address access rules for new <em>and</em> existing accounts (currently logged in accounts will not be logged out). If a username or e-mail address for an account matches any deny rule, but not an allow rule, then the account will not be allowed to be created or to log in. A host rule is effective for every page view, not just registrations.') .'</p>';    case 'admin/user/permissions':      return '<p>'. t('Permissions let you control what users can do on your site. Each user role (defined on the <a href="@role">user roles page</a>) has its own set of permissions. For example, you could give users classified as "Administrators" permission to "administer nodes" but deny this power to ordinary, "authenticated" users. You can use permissions to reveal new features to privileged users (those with subscriptions, for example). Permissions also allow trusted users to share the administrative burden of running a busy site.', array('@role' => url('admin/user/roles'))) .'</p>';    case 'admin/user/roles':      return t('<p>Roles allow you to fine tune the security and administration of Drupal. A role defines a group of users that have certain privileges as defined in <a href="@permissions">user permissions</a>. Examples of roles include: anonymous user, authenticated user, moderator, administrator and so on. In this area you will define the <em>role names</em> of the various roles. To delete a role choose "edit".</p><p>By default, Drupal comes with two user roles:</p>      <ul>      <li>Anonymous user: this role is used for users that don\'t have a user account or that are not authenticated.</li>      <li>Authenticated user: this role is automatically granted to all logged in users.</li>      </ul>', array('@permissions' => url('admin/user/permissions')));    case 'admin/user/search':      return '<p>'. t('Enter a simple pattern ("*" may be used as a wildcard match) to search for a username or e-mail address. For example, one may search for "br" and Drupal might return "brian", "brad", and "brenda@example.com".') .'</p>';  }}/** * Retrieve a list of all user setting/information categories and sort them by weight. */function _user_categories($account) {  $categories = array();  // Only variables can be passed by reference workaround.  $null = NULL;  foreach (module_list() as $module) {    $function = $module .'_user';    // $null and $account need to be passed by reference.    if (function_exists($function) && ($data = $function('categories', $null, $account, ''))) {      $categories = array_merge($data, $categories);    }  }  usort($categories, '_user_sort');  return $categories;}function _user_sort($a, $b) {  $a = (array)$a + array('weight' => 0, 'title' => '');  $b = (array)$b + array('weight' => 0, 'title' => '');  return $a['weight'] < $b['weight'] ? -1 : ($a['weight'] > $b['weight'] ? 1 : ($a['title'] < $b['title'] ? -1 : 1));}/** * List user administration filters that can be applied. */function user_filters() {  // Regular filters  $filters = array();  $roles = user_roles(TRUE);  unset($roles[DRUPAL_AUTHENTICATED_RID]); // Don't list authorized role.  if (count($roles)) {    $filters['role'] = array(      'title' => t('role'),      'where' => "ur.rid = %d",      'options' => $roles,      'join' => '',    );  }  $options = array();  foreach (module_list() as $module) {    if ($permissions = module_invoke($module, 'perm')) {      asort($permissions);      foreach ($permissions as $permission) {        $options[t('@module module', array('@module' => $module))][$permission] = t($permission);      }    }  }  ksort($options);  $filters['permission'] = array(    'title' => t('permission'),    'join' => 'LEFT JOIN {permission} p ON ur.rid = p.rid',    'where' => " ((p.perm IS NOT NULL AND p.perm LIKE '%%%s%%') OR u.uid = 1) ",    'options' => $options,  );  $filters['status'] = array(    'title' => t('status'),    'where' => 'u.status = %d',    'join' => '',    'options' => array(1 => t('active'), 0 => t('blocked')),  );  return $filters;}/** * Build query for user administration filters based on session. */function user_build_filter_query() {  $filters = user_filters();  // Build query  $where = $args = $join = array();  foreach ($_SESSION['user_overview_filter'] as $filter) {    list($key, $value) = $filter;    // This checks to see if this permission filter is an enabled permission for    // the authenticated role. If so, then all users would be listed, and we can    // skip adding it to the filter query.    if ($key == 'permission') {      $account = new stdClass();      $account->uid = 'user_filter';      $account->roles = array(DRUPAL_AUTHENTICATED_RID => 1);      if (user_access($value, $account)) {        continue;      }    }    $where[] = $filters[$key]['where'];    $args[] = $value;    $join[] = $filters[$key]['join'];  }  $where = !empty($where) ? 'AND '. implode(' AND ', $where) : '';  $join = !empty($join) ? ' '. implode(' ', array_unique($join)) : '';  return array('where' => $where,           'join' => $join,           'args' => $args,         );}/** * Implementation of hook_forms(). */function user_forms() {  $forms['user_admin_access_add_form']['callback'] = 'user_admin_access_form';  $forms['user_admin_access_edit_form']['callback'] = 'user_admin_access_form';  $forms['user_admin_new_role']['callback'] = 'user_admin_role';  return $forms;}/** * Implementation of hook_comment(). */function user_comment(&$comment, $op) {  // Validate signature.  if ($op == 'view') {    if (variable_get('user_signatures', 0) && !empty($comment->signature)) {      $comment->signature = check_markup($comment->signature, $comment->signature_format, FALSE);    }    else {      $comment->signature = '';    }  }}/** * Theme output of user signature. * * @ingroup themeable */function theme_user_signature($signature) {  $output = '';  if ($signature) {    $output .= '<div class="clear">';    $output .= '<div></div>';    $output .= $signature;    $output .= '</div>';  }  return $output;}/** * Return an array of token to value mappings for user e-mail messages. * * @param $account *  The user object of the account being notified.  Must contain at *  least the fields 'uid', 'name', and 'mail'. * @param $language *  Language object to generate the tokens with. * @return *  Array of mappings from token names to values (for use with strtr()). */function user_mail_tokens($account, $language) {  global $base_url;  $tokens = array(    '!username' => $account->name,    '!site' => variable_get('site_name', 'Drupal'),    '!login_url' => user_pass_reset_url($account),    '!uri' => $base_url,    '!uri_brief' => preg_replace('!^https?://!', '', $base_url),    '!mailto' => $account->mail,    '!date' => format_date(time(), 'medium', '', NULL, $language->language),    '!login_uri' => url('user', array('absolute' => TRUE, 'language' => $language)),    '!edit_uri' => url('user/'. $account->uid .'/edit', array('absolute' => TRUE, 'language' => $language)),  );  if (!empty($account->password)) {    $tokens['!password'] = $account->password;  }  return $tokens;}/** * Get the language object preferred by the user. This user preference can * be set on the user account editing page, and is only available if there * are more than one languages enabled on the site. If the user did not * choose a preferred language, or is the anonymous user, the $default * value, or if it is not set, the site default language will be returned. * * @param $account *   User account to look up language for. * @param $default *   Optional default language object to return if the account *   has no valid language. */function user_preferred_language($account, $default = NULL) {  $language_list = language_list();  if (!empty($account->language) && isset($language_list[$account->language])) {    return $language_list[$account->language];  }  else {    return $default ? $default : language_default();  }}/** * Conditionally create and send a notification email when a certain * operation happens on the given user account. * * @see user_mail_tokens() * @see drupal_mail() * * @param $op *  The operation being performed on the account.  Possible values: *  'register_admin_created': Welcome message for user created by the admin *  'register_no_approval_required': Welcome message when user self-registers *  'register_pending_approval': Welcome message, user pending admin approval *  'password_reset': Password recovery request *  'status_activated': Account activated *  'status_blocked': Account blocked *  'status_deleted': Account deleted * * @param $account *  The user object of the account being notified.  Must contain at *  least the fields 'uid', 'name', and 'mail'. * @param $language *  Optional language to use for the notification, overriding account language. * @return *  The return value from drupal_mail_send(), if ends up being called. */function _user_mail_notify($op, $account, $language = NULL) {  // By default, we always notify except for deleted and blocked.  $default_notify = ($op != 'status_deleted' && $op != 'status_blocked');  $notify = variable_get('user_mail_'. $op .'_notify', $default_notify);  if ($notify) {    $params['account'] = $account;    $language = $language ? $language : user_preferred_language($account);    $mail = drupal_mail('user', $op, $account->mail, $language, $params);    if ($op == 'register_pending_approval') {      // If a user registered requiring admin approval, notify the admin, too.      // We use the site default language for this.      drupal_mail('user', 'register_pending_approval_admin', variable_get('site_mail', ini_get('sendmail_from')), language_default(), $params);    }  }  return empty($mail) ? NULL : $mail['result'];}/** * Add javascript and string translations for dynamic password validation * (strength and confirmation checking). * * This is an internal function that makes it easier to manage the translation * strings that need to be passed to the javascript code. */function _user_password_dynamic_validation() {  static $complete = FALSE;  global $user;  // Only need to do once per page.  if (!$complete) {    drupal_add_js(drupal_get_path('module', 'user') .'/user.js', 'module');    drupal_add_js(array(      'password' => array(        'strengthTitle' => t('Password strength:'),        'lowStrength' => t('Low'),        'mediumStrength' => t('Medium'),        'highStrength' => t('High'),        'tooShort' => t('It is recommended to choose a password that contains at least six characters. It should include numbers, punctuation, and both upper and lowercase letters.'),        'needsMoreVariation' => t('The password does not include enough variation to be secure. Try:'),        'addLetters' => t('Adding both upper and lowercase letters.'),        'addNumbers' => t('Adding numbers.'),        'addPunctuation' => t('Adding punctuation.'),        'sameAsUsername' => t('It is recommended to choose a password different from the username.'),        'confirmSuccess' => t('Yes'),        'confirmFailure' => t('No'),        'confirmTitle' => t('Passwords match:'),        'username' => (isset($user->name) ? $user->name : ''))),      'setting');    $complete = TRUE;  }}/** * Implementation of hook_hook_info(). */function user_hook_info() {  return array(    'user' => array(      'user' => array(        'insert' => array(          'runs when' => t('After a user account has been created'),        ),        'update' => array(          'runs when' => t("After a user's profile has been updated"),        ),        'delete' => array(          'runs when' => t('After a user has been deleted')        ),        'login' => array(          'runs when' => t('After a user has logged in')        ),        'logout' => array(          'runs when' => t('After a user has logged out')        ),        'view' => array(          'runs when' => t("When a user's profile is being viewed")        ),      ),    ),  );}/** * Implementation of hook_action_info(). */function user_action_info() {  return array(    'user_block_user_action' => array(      'description' => t('Block current user'),      'type' => 'user',      'configurable' => FALSE,      'hooks' => array(),    ),    'user_block_ip_action' => array(      'description' => t('Ban IP address of current user'),      'type' => 'user',      'configurable' => FALSE,      'hooks' => array(),    ),  );}/** * Implementation of a Drupal action. * Blocks the current user. */function user_block_user_action(&$object, $context = array()) {  if (isset($object->uid)) {    $uid = $object->uid;  }  elseif (isset($context['uid'])) {    $uid = $context['uid'];  }  else {    global $user;    $uid = $user->uid;  }  db_query("UPDATE {users} SET status = 0 WHERE uid = %d", $uid);  sess_destroy_uid($uid);  watchdog('action', 'Blocked user %name.', array('%name' => check_plain($user->name)));}/** * Implementation of a Drupal action. * Adds an access rule that blocks the user's IP address. */function user_block_ip_action() {  $ip = ip_address();  db_query("INSERT INTO {access} (mask, type, status) VALUES ('%s', '%s', %d)", $ip, 'host', 0);  watchdog('action', 'Banned IP address %ip', array('%ip' => $ip));}/** * Submit handler for the user registration form. * * This function is shared by the installation form and the normal registration form, * which is why it can't be in the user.pages.inc file. */function user_register_submit($form, &$form_state) {  global $base_url;  $admin = user_access('administer users');  $mail = $form_state['values']['mail'];  $name = $form_state['values']['name'];  if (!variable_get('user_email_verification', TRUE) || $admin) {    $pass = $form_state['values']['pass'];  }  else {    $pass = user_password();  };  $notify = isset($form_state['values']['notify']) ? $form_state['values']['notify'] : NULL;  $from = variable_get('site_mail', ini_get('sendmail_from'));  if (isset($form_state['values']['roles'])) {    // Remove unset roles.    $roles = array_filter($form_state['values']['roles']);  }  else {    $roles = array();  }  if (!$admin && array_intersect(array_keys($form_state['values']), array('uid', 'roles', 'init', 'session', 'status'))) {    watchdog('security', 'Detected malicious attempt to alter protected user fields.', array(), WATCHDOG_WARNING);    $form_state['redirect'] = 'user/register';    return;  }  // The unset below is needed to prevent these form values from being saved as  // user data.  unset($form_state['values']['form_token'], $form_state['values']['submit'], $form_state['values']['op'], $form_state['values']['notify'], $form_state['values']['form_id'], $form_state['values']['affiliates'], $form_state['values']['destination']);  $merge_data = array('pass' => $pass, 'init' => $mail, 'roles' => $roles);  if (!$admin) {    // Set the user's status because it was not displayed in the form.    $merge_data['status'] = variable_get('user_register', 1) == 1;  }  $account = user_save('', array_merge($form_state['values'], $merge_data));  // Terminate if an error occured during user_save().  if (!$account) {    drupal_set_message(t("Error saving user account."), 'error');    $form_state['redirect'] = '';    return;  }  $form_state['user'] = $account;  watchdog('user', 'New user: %name (%email).', array('%name' => $name, '%email' => $mail), WATCHDOG_NOTICE, l(t('edit'), 'user/'. $account->uid .'/edit'));  // The first user may login immediately, and receives a customized welcome e-mail.  if ($account->uid == 1) {    drupal_set_message(t('Welcome to Drupal. You are now logged in as user #1, which gives you full control over your website.'));    if (variable_get('user_email_verification', TRUE)) {      drupal_set_message(t('</p><p> Your password is <strong>%pass</strong>. You may change your password below.</p>', array('%pass' => $pass)));    }    user_authenticate(array_merge($form_state['values'], $merge_data));    $form_state['redirect'] = 'user/1/edit';    return;  }  else {    // Add plain text password into user account to generate mail tokens.    $account->password = $pass;    if ($admin && !$notify) {      drupal_set_message(t('Created a new user account for <a href="@url">%name</a>. No e-mail has been sent.', array('@url' => url("user/$account->uid"), '%name' => $account->name)));    }    else if (!variable_get('user_email_verification', TRUE) && $account->status && !$admin) {      // No e-mail verification is required, create new user account, and login      // user immediately.      _user_mail_notify('register_no_approval_required', $account);      if (user_authenticate(array_merge($form_state['values'], $merge_data))) {        drupal_set_message(t('Registration successful. You are now logged in.'));      }      $form_state['redirect'] = '';      return;    }    else if ($account->status || $notify) {      // Create new user account, no administrator approval required.      $op = $notify ? 'register_admin_created' : 'register_no_approval_required';      _user_mail_notify($op, $account);      if ($notify) {        drupal_set_message(t('Password and further instructions have been e-mailed to the new user <a href="@url">%name</a>.', array('@url' => url("user/$account->uid"), '%name' => $account->name)));      }      else {        drupal_set_message(t('Your password and further instructions have been sent to your e-mail address.'));        $form_state['redirect'] = '';        return;      }    }    else {      // Create new user account, administrator approval required.      _user_mail_notify('register_pending_approval', $account);      drupal_set_message(t('Thank you for applying for an account. Your account is currently pending approval by the site administrator.<br />In the meantime, a welcome message with further instructions has been sent to your e-mail address.'));      $form_state['redirect'] = '';      return;    }  }}/** * Form builder; The user registration form. * * @ingroup forms * @see user_register_validate() * @see user_register_submit() */function user_register() {  global $user;  $admin = user_access('administer users');  // If we aren't admin but already logged on, go to the user page instead.  if (!$admin && $user->uid) {    drupal_goto('user/'. $user->uid);  }  $form = array();  // Display the registration form.  if (!$admin) {    $form['user_registration_help'] = array(      '#value' => filter_xss_admin(variable_get('user_registration_help', '')),      // Ensure that user registration help appears above profile fields.      '#weight' => -20,    );  }  // Merge in the default user edit fields.  $form = array_merge($form, user_edit_form($form_state, NULL, NULL, TRUE));  if ($admin) {    $form['account']['notify'] = array(     '#type' => 'checkbox',     '#title' => t('Notify user of new account')    );    // Redirect back to page which initiated the create request;    // usually admin/user/user/create.    $form['destination'] = array('#type' => 'hidden', '#value' => $_GET['q']);  }  // Create a dummy variable for pass-by-reference parameters.  $null = NULL;  $extra = _user_forms($null, NULL, NULL, 'register');  // Remove form_group around default fields if there are no other groups.  if (!$extra) {    foreach (array('name', 'mail', 'pass', 'status', 'roles', 'notify') as $key) {      if (isset($form['account'][$key])) {        $form[$key] = $form['account'][$key];      }    }    unset($form['account']);  }  else {    $form = array_merge($form, $extra);  }  if (variable_get('configurable_timezones', 1)) {    // Override field ID, so we only change timezone on user registration,    // and never touch it on user edit pages.    $form['timezone'] = array(      '#type' => 'hidden',      '#default_value' => variable_get('date_default_timezone', NULL),      '#id' => 'edit-user-register-timezone',    );    // Add the JavaScript callback to automatically set the timezone.    drupal_add_js('// Global Killswitchif (Drupal.jsEnabled) {  $(document).ready(function() {    Drupal.setDefaultTimezone();  });}', 'inline');  }  $form['submit'] = array('#type' => 'submit', '#value' => t('Create new account'), '#weight' => 30);  $form['#validate'][] = 'user_register_validate';  return $form;}function user_register_validate($form, &$form_state) {  user_module_invoke('validate', $form_state['values'], $form_state['values'], 'account');}/** * Retrieve a list of all form elements for the specified category. */function _user_forms(&$edit, $account, $category, $hook = 'form') {  $groups = array();  foreach (module_list() as $module) {    $function = $module .'_user';    // $edit and $account need to be passed by reference.    if (function_exists($function) && ($data = $function($hook, $edit, $account, $category))) {      $groups = array_merge_recursive($data, $groups);    }  }  uasort($groups, '_user_sort');  return empty($groups) ? FALSE : $groups;}
<?php// $Id$/** * @file * Controls the boxes that are displayed around the main content. *//** * Denotes that a block is not enabled in any region and should not * be shown. */define('BLOCK_REGION_NONE', -1);/** * Constants defining cache granularity for blocks. * * Modules specify the caching patterns for their blocks using binary * combinations of these constants in their hook_block(op 'list'): *   $block[delta]['cache'] = BLOCK_CACHE_PER_ROLE | BLOCK_CACHE_PER_PAGE; * BLOCK_CACHE_PER_ROLE is used as a default when no caching pattern is * specified. * * The block cache is cleared in cache_clear_all(), and uses the same clearing * policy than page cache (node, comment, user, taxonomy added or updated...). * Blocks requiring more fine-grained clearing might consider disabling the * built-in block cache (BLOCK_NO_CACHE) and roll their own. * * Note that user 1 is excluded from block caching. *//** * The block should not get cached. This setting should be used: * - for simple blocks (notably those that do not perform any db query), * where querying the db cache would be more expensive than directly generating * the content. * - for blocks that change too frequently. */define('BLOCK_NO_CACHE', -1);/** * The block can change depending on the roles the user viewing the page belongs to. * This is the default setting, used when the block does not specify anything. */define('BLOCK_CACHE_PER_ROLE', 0x0001);/** * The block can change depending on the user viewing the page. * This setting can be resource-consuming for sites with large number of users, * and thus should only be used when BLOCK_CACHE_PER_ROLE is not sufficient. */define('BLOCK_CACHE_PER_USER', 0x0002);/** * The block can change depending on the page being viewed. */define('BLOCK_CACHE_PER_PAGE', 0x0004);/** * The block is the same for every user on every page where it is visible. */define('BLOCK_CACHE_GLOBAL', 0x0008);/** * Implementation of hook_help(). */function block_help($path, $arg) {  switch ($path) {    case 'admin/help#block':      $output = '<p>'. t('Blocks are boxes of content rendered into an area, or region, of a web page. The default theme Garland, for example, implements the regions "left sidebar", "right sidebar", "content", "header", and "footer", and a block may appear in any one of these areas. The <a href="@blocks">blocks administration page</a> provides a drag-and-drop interface for assigning a block to a region, and for controlling the order of blocks within regions.', array('@blocks' => url('admin/build/block'))) .'</p>';      $output .= '<p>'. t('Although blocks are usually generated automatically by modules (like the <em>User login</em> block, for example), administrators can also define custom blocks. Custom blocks have a title, description, and body. The body of the block can be as long as necessary, and can contain content supported by any available <a href="@input-format">input format</a>.', array('@input-format' => url('admin/settings/filters'))) .'</p>';      $output .= '<p>'. t('When working with blocks, remember that:') .'</p>';      $output .= '<ul><li>'. t('since not all themes implement the same regions, or display regions in the same way, blocks are positioned on a per-theme basis.') .'</li>';      $output .= '<li>'. t('disabled blocks, or blocks not in a region, are never shown.') .'</li>';      $output .= '<li>'. t('when throttle module is enabled, throttled blocks (blocks with the <em>Throttle</em> checkbox selected) are hidden during high server loads.') .'</li>';      $output .= '<li>'. t('blocks can be configured to be visible only on certain pages.') .'</li>';      $output .= '<li>'. t('blocks can be configured to be visible only when specific conditions are true.') .'</li>';      $output .= '<li>'. t('blocks can be configured to be visible only for certain user roles.') .'</li>';      $output .= '<li>'. t('when allowed by an administrator, specific blocks may be enabled or disabled on a per-user basis using the <em>My account</em> page.') .'</li>';      $output .= '<li>'. t('some dynamic blocks, such as those generated by modules, will be displayed only on certain pages.') .'</li></ul>';      $output .= '<p>'. t('For more information, see the online handbook entry for <a href="@block">Block module</a>.', array('@block' => 'http://drupal.org/handbook/modules/block/')) .'</p>';      return $output;    case 'admin/build/block':      $throttle = module_exists('throttle');      $output = '<p>'. t('This page provides a drag-and-drop interface for assigning a block to a region, and for controlling the order of blocks within regions. To change the region or order of a block, grab a drag-and-drop handle under the <em>Block</em> column and drag the block to a new location in the list. (Grab a handle by clicking and holding the mouse while hovering over a handle icon.) Since not all themes implement the same regions, or display regions in the same way, blocks are positioned on a per-theme basis. Remember that your changes will not be saved until you click the <em>Save blocks</em> button at the bottom of the page.') .'</p>';      if ($throttle) {        $output .= '<p>'. t('To reduce CPU usage, database traffic or bandwidth, blocks may be automatically disabled during high server loads by selecting their <em>Throttle</em> checkbox. Adjust throttle thresholds on the <a href="@throttleconfig">throttle configuration page</a>.', array('@throttleconfig' => url('admin/settings/throttle'))) .'</p>';      }      $output .= '<p>'. t('Click the <em>configure</em> link next to each block to configure its specific title and visibility settings. Use the <a href="@add-block">add block page</a> to create a custom block.', array('@add-block' => url('admin/build/block/add'))) .'</p>';      return $output;    case 'admin/build/block/add':      return '<p>'. t('Use this page to create a new custom block. New blocks are disabled by default, and must be moved to a region on the <a href="@blocks">blocks administration page</a> to be visible.', array('@blocks' => url('admin/build/block'))) .'</p>';  }}/** * Implementation of hook_theme() */function block_theme() {  return array(    'block_admin_display_form' => array(      'template' => 'block-admin-display-form',      'file' => 'block.admin.inc',      'arguments' => array('form' => NULL),    ),  );}/** * Implementation of hook_perm(). */function block_perm() {  return array('administer blocks', 'use PHP for block visibility');}/** * Implementation of hook_menu(). */function block_menu() {  $items['admin/build/block'] = array(    'title' => 'Blocks',    'description' => 'Configure what block content appears in your site\'s sidebars and other regions.',    'page callback' => 'block_admin_display',    'access arguments' => array('administer blocks'),    'file' => 'block.admin.inc',  );  $items['admin/build/block/list'] = array(    'title' => 'List',    'type' => MENU_DEFAULT_LOCAL_TASK,    'weight' => -10,  );  $items['admin/build/block/list/js'] = array(    'title' => 'JavaScript List Form',    'page callback' => 'block_admin_display_js',    'access arguments' => array('administer blocks'),    'type' => MENU_CALLBACK,    'file' => 'block.admin.inc',  );  $items['admin/build/block/configure'] = array(    'title' => 'Configure block',    'page callback' => 'drupal_get_form',    'page arguments' => array('block_admin_configure'),    'access arguments' => array('administer blocks'),    'type' => MENU_CALLBACK,    'file' => 'block.admin.inc',  );  $items['admin/build/block/delete'] = array(    'title' => 'Delete block',    'page callback' => 'drupal_get_form',    'page arguments' => array('block_box_delete'),    'access arguments' => array('administer blocks'),    'type' => MENU_CALLBACK,    'file' => 'block.admin.inc',  );  $items['admin/build/block/add'] = array(    'title' => 'Add block',    'page callback' => 'drupal_get_form',    'page arguments' => array('block_add_block_form'),    'access arguments' => array('administer blocks'),    'type' => MENU_LOCAL_TASK,    'file' => 'block.admin.inc',  );  $default = variable_get('theme_default', 'garland');  foreach (list_themes() as $key => $theme) {    $items['admin/build/block/list/'. $key] = array(      'title' => check_plain($theme->info['name']),      'page arguments' => array($key),      'type' => $key == $default ? MENU_DEFAULT_LOCAL_TASK : MENU_LOCAL_TASK,      'weight' => $key == $default ? -10 : 0,      'file' => 'block.admin.inc',      'access callback' => '_block_themes_access',      'access arguments' => array($theme),    );  }  return $items;}/** * Menu item access callback - only admin or enabled themes can be accessed */function _block_themes_access($theme) {  return user_access('administer blocks') && ($theme->status || $theme->name == variable_get('admin_theme', '0'));}/** * Implementation of hook_block(). * * Generates the administrator-defined blocks for display. */function block_block($op = 'list', $delta = 0, $edit = array()) {  switch ($op) {    case 'list':      $blocks = array();      $result = db_query('SELECT bid, info FROM {boxes} ORDER BY info');      while ($block = db_fetch_object($result)) {        $blocks[$block->bid]['info'] = $block->info;        // Not worth caching.        $blocks[$block->bid]['cache'] = BLOCK_NO_CACHE;      }      return $blocks;    case 'configure':      $box = array('format' => FILTER_FORMAT_DEFAULT);      if ($delta) {        $box = block_box_get($delta);      }      if (filter_access($box['format'])) {        return block_box_form($box);      }      break;    case 'save':      block_box_save($edit, $delta);      break;    case 'view':      $block = db_fetch_object(db_query('SELECT body, format FROM {boxes} WHERE bid = %d', $delta));      $data['content'] = check_markup($block->body, $block->format, FALSE);      return $data;  }}/** * Update the 'blocks' DB table with the blocks currently exported by modules. * * @return *   Blocks currently exported by modules. */function _block_rehash() {  global $theme_key;  init_theme();  $result = db_query("SELECT * FROM {blocks} WHERE theme = '%s'", $theme_key);  $old_blocks = array();  while ($old_block = db_fetch_array($result)) {    $old_blocks[$old_block['module']][$old_block['delta']] = $old_block;  }  $blocks = array();  // Valid region names for the theme.  $regions = system_region_list($theme_key);  foreach (module_list() as $module) {    $module_blocks = module_invoke($module, 'block', 'list');    if ($module_blocks) {      foreach ($module_blocks as $delta => $block) {        if (empty($old_blocks[$module][$delta])) {          // If it's a new block, add identifiers.          $block['module'] = $module;          $block['delta']  = $delta;          $block['theme']  = $theme_key;          if (!isset($block['pages'])) {            // {block}.pages is type 'text', so it cannot have a            // default value, and not null, so we need to provide            // value if the module did not.            $block['pages']  = '';          }          // Add defaults and save it into the database.          drupal_write_record('blocks', $block);          // Set region to none if not enabled.          $block['region'] = $block['status'] ? $block['region'] : BLOCK_REGION_NONE;          // Add to the list of blocks we return.          $blocks[] = $block;        }        else {          // If it's an existing block, database settings should overwrite          // the code. But aside from 'info' everything that's definable in          // code is stored in the database and we do not store 'info', so we          // do not need to update the database here.          // Add 'info' to this block.          $old_blocks[$module][$delta]['info'] = $block['info'];          // If the region name does not exist, disable the block and assign it to none.          if (!empty($old_blocks[$module][$delta]['region']) && !isset($regions[$old_blocks[$module][$delta]['region']])) {            drupal_set_message(t('The block %info was assigned to the invalid region %region and has been disabled.', array('%info' => $old_blocks[$module][$delta]['info'], '%region' => $old_blocks[$module][$delta]['region'])), 'warning');            $old_blocks[$module][$delta]['status'] = 0;            $old_blocks[$module][$delta]['region'] = BLOCK_REGION_NONE;          }          else {            $old_blocks[$module][$delta]['region'] = $old_blocks[$module][$delta]['status'] ? $old_blocks[$module][$delta]['region'] : BLOCK_REGION_NONE;          }          // Add this block to the list of blocks we return.          $blocks[] = $old_blocks[$module][$delta];          // Remove this block from the list of blocks to be deleted.          unset($old_blocks[$module][$delta]);        }      }    }  }  // Remove blocks that are no longer defined by the code from the database.  foreach ($old_blocks as $module => $old_module_blocks) {    foreach ($old_module_blocks as $delta => $block) {      db_query("DELETE FROM {blocks} WHERE module = '%s' AND delta = '%s' AND theme = '%s'", $module, $delta, $theme_key);    }  }  return $blocks;}/** * Returns information from database about a user-created (custom) block. * * @param $bid *   ID of the block to get information for. * @return *   Associative array of information stored in the database for this block. *   Array keys: *   - bid: Block ID. *   - info: Block description. *   - body: Block contents. *   - format: Filter ID of the filter format for the body. */function block_box_get($bid) {  return db_fetch_array(db_query("SELECT * FROM {boxes} WHERE bid = %d", $bid));}/** * Define the custom block form. */function block_box_form($edit = array()) {  $edit += array(    'info' => '',    'body' => '',  );  $form['info'] = array(    '#type' => 'textfield',    '#title' => t('Block description'),    '#default_value' => $edit['info'],    '#maxlength' => 64,    '#description' => t('A brief description of your block. Used on the <a href="@overview">block overview page</a>.', array('@overview' => url('admin/build/block'))),    '#required' => TRUE,    '#weight' => -19,  );  $form['body_field']['#weight'] = -17;  $form['body_field']['body'] = array(    '#type' => 'textarea',    '#title' => t('Block body'),    '#default_value' => $edit['body'],    '#rows' => 15,    '#description' => t('The content of the block as shown to the user.'),    '#weight' => -17,  );  if (!isset($edit['format'])) {    $edit['format'] = FILTER_FORMAT_DEFAULT;  }  $form['body_field']['format'] = filter_form($edit['format'], -16);  return $form;}/** * Saves a user-created block in the database. * * @param $edit *   Associative array of fields to save. Array keys: *   - info: Block description. *   - body: Block contents. *   - format: Filter ID of the filter format for the body. * @param $delta *   Block ID of the block to save. * @return *   Always returns TRUE. */function block_box_save($edit, $delta) {  if (!filter_access($edit['format'])) {    $edit['format'] = FILTER_FORMAT_DEFAULT;  }  db_query("UPDATE {boxes} SET body = '%s', info = '%s', format = %d WHERE bid = %d", $edit['body'], $edit['info'], $edit['format'], $delta);  return TRUE;}/** * Implementation of hook_user(). * * Allow users to decide which custom blocks to display when they visit * the site. */function block_user($type, $edit, &$account, $category = NULL) {  switch ($type) {    case 'form':      if ($category == 'account') {        $rids = array_keys($account->roles);        $result = db_query("SELECT DISTINCT b.* FROM {blocks} b LEFT JOIN {blocks_roles} r ON b.module = r.module AND b.delta = r.delta WHERE b.status = 1 AND b.custom != 0 AND (r.rid IN (". db_placeholders($rids) .") OR r.rid IS NULL) ORDER BY b.weight, b.module", $rids);        $form['block'] = array('#type' => 'fieldset', '#title' => t('Block configuration'), '#weight' => 3, '#collapsible' => TRUE, '#tree' => TRUE);        while ($block = db_fetch_object($result)) {          $data = module_invoke($block->module, 'block', 'list');          if ($data[$block->delta]['info']) {            $return = TRUE;            $form['block'][$block->module][$block->delta] = array('#type' => 'checkbox', '#title' => check_plain($data[$block->delta]['info']), '#default_value' => isset($account->block[$block->module][$block->delta]) ? $account->block[$block->module][$block->delta] : ($block->custom == 1));          }        }        if (!empty($return)) {          return $form;        }      }      break;    case 'validate':      if (empty($edit['block'])) {        $edit['block'] = array();      }      return $edit;  }}/** * Return all blocks in the specified region for the current user. * * @param $region *   The name of a region. * * @return *   An array of block objects, indexed with <i>module</i>_<i>delta</i>. *   If you are displaying your blocks in one or two sidebars, you may check *   whether this array is empty to see how many columns are going to be *   displayed. * * @todo *   Now that the blocks table has a primary key, we should use that as the *   array key instead of <i>module</i>_<i>delta</i>. */function block_list($region) {  global $user, $theme_key;  static $blocks = array();  if (!count($blocks)) {    $rids = array_keys($user->roles);    $result = db_query(db_rewrite_sql("SELECT DISTINCT b.* FROM {blocks} b LEFT JOIN {blocks_roles} r ON b.module = r.module AND b.delta = r.delta WHERE b.theme = '%s' AND b.status = 1 AND (r.rid IN (". db_placeholders($rids) .") OR r.rid IS NULL) ORDER BY b.region, b.weight, b.module", 'b', 'bid'), array_merge(array($theme_key), $rids));    while ($block = db_fetch_object($result)) {      if (!isset($blocks[$block->region])) {        $blocks[$block->region] = array();      }      // Use the user's block visibility setting, if necessary      if ($block->custom != 0) {        if ($user->uid && isset($user->block[$block->module][$block->delta])) {          $enabled = $user->block[$block->module][$block->delta];        }        else {          $enabled = ($block->custom == 1);        }      }      else {        $enabled = TRUE;      }      // Match path if necessary      if ($block->pages) {        if ($block->visibility < 2) {          $path = drupal_get_path_alias($_GET['q']);          // Compare with the internal and path alias (if any).          $page_match = drupal_match_path($path, $block->pages);          if ($path != $_GET['q']) {            $page_match = $page_match || drupal_match_path($_GET['q'], $block->pages);          }          // When $block->visibility has a value of 0, the block is displayed on          // all pages except those listed in $block->pages. When set to 1, it          // is displayed only on those pages listed in $block->pages.          $page_match = !($block->visibility xor $page_match);        }        else {          $page_match = drupal_eval($block->pages);        }      }      else {        $page_match = TRUE;      }      $block->enabled = $enabled;      $block->page_match = $page_match;      $blocks[$block->region]["{$block->module}_{$block->delta}"] = $block;    }  }  // Create an empty array if there were no entries  if (!isset($blocks[$region])) {    $blocks[$region] = array();  }  foreach ($blocks[$region] as $key => $block) {    // Render the block content if it has not been created already.    if (!isset($block->content)) {      // Erase the block from the static array - we'll put it back if it has content.      unset($blocks[$region][$key]);      if ($block->enabled && $block->page_match) {        // Check the current throttle status and see if block should be displayed        // based on server load.        if (!($block->throttle && (module_invoke('throttle', 'status') > 0))) {          // Try fetching the block from cache. Block caching is not compatible with          // node_access modules. We also preserve the submission of forms in blocks,          // by fetching from cache only if the request method is 'GET'.          if (!count(module_implements('node_grants')) && $_SERVER['REQUEST_METHOD'] == 'GET' && ($cid = _block_get_cache_id($block)) && ($cache = cache_get($cid, 'cache_block'))) {            $array = $cache->data;          }          else {            $array = module_invoke($block->module, 'block', 'view', $block->delta);            if (isset($cid)) {              cache_set($cid, $array, 'cache_block', CACHE_TEMPORARY);            }          }          if (isset($array) && is_array($array)) {            foreach ($array as $k => $v) {              $block->$k = $v;            }          }        }        if (isset($block->content) && $block->content) {          // Override default block title if a custom display title is present.          if ($block->title) {            // Check plain here to allow module generated titles to keep any markup.            $block->subject = $block->title == '<none>' ? '' : check_plain($block->title);          }          if (!isset($block->subject)) {            $block->subject = '';          }          $blocks[$block->region]["{$block->module}_{$block->delta}"] = $block;        }      }    }  }  return $blocks[$region];}/** * Assemble the cache_id to use for a given block. * * The cache_id string reflects the viewing context for the current block * instance, obtained by concatenating the relevant context information * (user, page, ...) according to the block's cache settings (BLOCK_CACHE_* * constants). Two block instances can use the same cached content when * they share the same cache_id. * * Theme and language contexts are automatically differenciated. * * @param $block * @return *   The string used as cache_id for the block. */function _block_get_cache_id($block) {  global $theme, $base_root, $user;  // User 1 being out of the regular 'roles define permissions' schema,  // it brings too many chances of having unwanted output get in the cache  // and later be served to other users. We therefore exclude user 1 from  // block caching.  if (variable_get('block_cache', 0) && $block->cache != BLOCK_NO_CACHE && $user->uid != 1) {    $cid_parts = array();    // Start with common sub-patterns: block identification, theme, language.    $cid_parts[] = $block->module;    $cid_parts[] = $block->delta;    $cid_parts[] = $theme;    if (module_exists('locale')) {      global $language;      $cid_parts[] = $language->language;    }    // 'PER_ROLE' and 'PER_USER' are mutually exclusive. 'PER_USER' can be a    // resource drag for sites with many users, so when a module is being    // equivocal, we favor the less expensive 'PER_ROLE' pattern.    if ($block->cache & BLOCK_CACHE_PER_ROLE) {      $cid_parts[] = 'r.'. implode(',', array_keys($user->roles));    }    elseif ($block->cache & BLOCK_CACHE_PER_USER) {      $cid_parts[] = "u.$user->uid";    }    if ($block->cache & BLOCK_CACHE_PER_PAGE) {      $cid_parts[] = $base_root . request_uri();    }    return implode(':', $cid_parts);  }}
<?php// $Id$/** * @file * Functions to aid in presenting database results as a set of pages. *//** * Perform a paged database query. * * Use this function when doing select queries you wish to be able to page. The * pager uses LIMIT-based queries to fetch only the records required to render a * certain page. However, it has to learn the total number of records returned * by the query to compute the number of pages (the number of records / records * per page). This is done by inserting "COUNT(*)" in the original query. For * example, the query "SELECT nid, type FROM node WHERE status = '1' ORDER BY * sticky DESC, created DESC" would be rewritten to read "SELECT COUNT(*) FROM * node WHERE status = '1' ORDER BY sticky DESC, created DESC". Rewriting the * query is accomplished using a regular expression. * * Unfortunately, the rewrite rule does not always work as intended for queries * that already have a "COUNT(*)" or a "GROUP BY" clause, and possibly for * other complex queries. In those cases, you can optionally pass a query that * will be used to count the records. * * For example, if you want to page the query "SELECT COUNT(*), TYPE FROM node * GROUP BY TYPE", pager_query() would invoke the incorrect query "SELECT * COUNT(*) FROM node GROUP BY TYPE". So instead, you should pass "SELECT * COUNT(DISTINCT(TYPE)) FROM node" as the optional $count_query parameter. * * @param $query *   The SQL query that needs paging. * @param $limit *   The number of query results to display per page. * @param $element *   An optional integer to distinguish between multiple pagers on one page. * @param $count_query *   An SQL query used to count matching records. * @param ... *   A variable number of arguments which are substituted into the query (and *   the count query) using printf() syntax. Instead of a variable number of *   query arguments, you may also pass a single array containing the query *   arguments. * @return *   A database query result resource, or FALSE if the query was not executed *   correctly. * * @ingroup database */function pager_query($query, $limit = 10, $element = 0, $count_query = NULL) {  global $pager_page_array, $pager_total, $pager_total_items;  $page = isset($_GET['page']) ? $_GET['page'] : '';  // Substitute in query arguments.  $args = func_get_args();  $args = array_slice($args, 4);  // Alternative syntax for '...'  if (isset($args[0]) && is_array($args[0])) {    $args = $args[0];  }  // Construct a count query if none was given.  if (!isset($count_query)) {    $count_query = preg_replace(array('/SELECT.*?FROM /As', '/ORDER BY .*/'), array('SELECT COUNT(*) FROM ', ''), $query);  }  // Convert comma-separated $page to an array, used by other functions.  $pager_page_array = explode(',', $page);  // We calculate the total of pages as ceil(items / limit).  $pager_total_items[$element] = db_result(db_query($count_query, $args));  $pager_total[$element] = ceil($pager_total_items[$element] / $limit);  $pager_page_array[$element] = max(0, min((int)$pager_page_array[$element], ((int)$pager_total[$element]) - 1));  return db_query_range($query, $args, $pager_page_array[$element] * $limit, $limit);}/** * Compose a query string to append to pager requests. * * @return *   A query string that consists of all components of the current page request *   except for those pertaining to paging. */function pager_get_querystring() {  static $string = NULL;  if (!isset($string)) {    $string = drupal_query_string_encode($_REQUEST, array_merge(array('q', 'page', 'pass'), array_keys($_COOKIE)));  }  return $string;}/** * Format a query pager. * * Menu callbacks that display paged query results should call theme('pager') to * retrieve a pager control so that users can view other results. * Format a list of nearby pages with additional query results. * * @param $tags *   An array of labels for the controls in the pager. * @param $limit *   The number of query results to display per page. * @param $element *   An optional integer to distinguish between multiple pagers on one page. * @param $parameters *   An associative array of query string parameters to append to the pager links. * @param $quantity *   The number of pages in the list. * @return *   An HTML string that generates the query pager. * * @ingroup themeable */function theme_pager($tags = array(), $limit = 10, $element = 0, $parameters = array(), $quantity = 9) {  global $pager_page_array, $pager_total;  // Calculate various markers within this pager piece:  // Middle is used to "center" pages around the current page.  $pager_middle = ceil($quantity / 2);  // current is the page we are currently paged to  $pager_current = $pager_page_array[$element] + 1;  // first is the first page listed by this pager piece (re quantity)  $pager_first = $pager_current - $pager_middle + 1;  // last is the last page listed by this pager piece (re quantity)  $pager_last = $pager_current + $quantity - $pager_middle;  // max is the maximum page number  $pager_max = $pager_total[$element];  // End of marker calculations.  // Prepare for generation loop.  $i = $pager_first;  if ($pager_last > $pager_max) {    // Adjust "center" if at end of query.    $i = $i + ($pager_max - $pager_last);    $pager_last = $pager_max;  }  if ($i <= 0) {    // Adjust "center" if at start of query.    $pager_last = $pager_last + (1 - $i);    $i = 1;  }  // End of generation loop preparation.  $li_first = theme('pager_first', (isset($tags[0]) ? $tags[0] : t(' first')), $limit, $element, $parameters);  $li_previous = theme('pager_previous', (isset($tags[1]) ? $tags[1] : t(' previous')), $limit, $element, 1, $parameters);  $li_next = theme('pager_next', (isset($tags[3]) ? $tags[3] : t('next ')), $limit, $element, 1, $parameters);  $li_last = theme('pager_last', (isset($tags[4]) ? $tags[4] : t('last ')), $limit, $element, $parameters);  if ($pager_total[$element] > 1) {    if ($li_first) {      $items[] = array(        'class' => 'pager-first',        'data' => $li_first,      );    }    if ($li_previous) {      $items[] = array(        'class' => 'pager-previous',        'data' => $li_previous,      );    }    // When there is more than one page, create the pager list.    if ($i != $pager_max) {      if ($i > 1) {        $items[] = array(          'class' => 'pager-ellipsis',          'data' => '',        );      }      // Now generate the actual pager piece.      for (; $i <= $pager_last && $i <= $pager_max; $i++) {        if ($i < $pager_current) {          $items[] = array(            'class' => 'pager-item',            'data' => theme('pager_previous', $i, $limit, $element, ($pager_current - $i), $parameters),          );        }        if ($i == $pager_current) {          $items[] = array(            'class' => 'pager-current',            'data' => $i,          );        }        if ($i > $pager_current) {          $items[] = array(            'class' => 'pager-item',            'data' => theme('pager_next', $i, $limit, $element, ($i - $pager_current), $parameters),          );        }      }      if ($i < $pager_max) {        $items[] = array(          'class' => 'pager-ellipsis',          'data' => '',        );      }    }    // End generation.    if ($li_next) {      $items[] = array(        'class' => 'pager-next',        'data' => $li_next,      );    }    if ($li_last) {      $items[] = array(        'class' => 'pager-last',        'data' => $li_last,      );    }    return theme('item_list', $items, NULL, 'ul', array('class' => 'pager'));  }}/** * @name Pager pieces * @{ * Use these pieces to construct your own custom pagers in your theme. Note that * you should NOT modify this file to customize your pager. *//** * Format a "first page" link. * * @param $text *   The name (or image) of the link. * @param $limit *   The number of query results to display per page. * @param $element *   An optional integer to distinguish between multiple pagers on one page. * @param $parameters *   An associative array of query string parameters to append to the pager links. * @return *   An HTML string that generates this piece of the query pager. * * @ingroup themeable */function theme_pager_first($text, $limit, $element = 0, $parameters = array()) {  global $pager_page_array;  $output = '';  // If we are anywhere but the first page  if ($pager_page_array[$element] > 0) {    $output = theme('pager_link', $text, pager_load_array(0, $element, $pager_page_array), $element, $parameters);  }  return $output;}/** * Format a "previous page" link. * * @param $text *   The name (or image) of the link. * @param $limit *   The number of query results to display per page. * @param $element *   An optional integer to distinguish between multiple pagers on one page. * @param $interval *   The number of pages to move backward when the link is clicked. * @param $parameters *   An associative array of query string parameters to append to the pager links. * @return *   An HTML string that generates this piece of the query pager. * * @ingroup themeable */function theme_pager_previous($text, $limit, $element = 0, $interval = 1, $parameters = array()) {  global $pager_page_array;  $output = '';  // If we are anywhere but the first page  if ($pager_page_array[$element] > 0) {    $page_new = pager_load_array($pager_page_array[$element] - $interval, $element, $pager_page_array);    // If the previous page is the first page, mark the link as such.    if ($page_new[$element] == 0) {      $output = theme('pager_first', $text, $limit, $element, $parameters);    }    // The previous page is not the first page.    else {      $output = theme('pager_link', $text, $page_new, $element, $parameters);    }  }  return $output;}/** * Format a "next page" link. * * @param $text *   The name (or image) of the link. * @param $limit *   The number of query results to display per page. * @param $element *   An optional integer to distinguish between multiple pagers on one page. * @param $interval *   The number of pages to move forward when the link is clicked. * @param $parameters *   An associative array of query string parameters to append to the pager links. * @return *   An HTML string that generates this piece of the query pager. * * @ingroup themeable */function theme_pager_next($text, $limit, $element = 0, $interval = 1, $parameters = array()) {  global $pager_page_array, $pager_total;  $output = '';  // If we are anywhere but the last page  if ($pager_page_array[$element] < ($pager_total[$element] - 1)) {    $page_new = pager_load_array($pager_page_array[$element] + $interval, $element, $pager_page_array);    // If the next page is the last page, mark the link as such.    if ($page_new[$element] == ($pager_total[$element] - 1)) {      $output = theme('pager_last', $text, $limit, $element, $parameters);    }    // The next page is not the last page.    else {      $output = theme('pager_link', $text, $page_new, $element, $parameters);    }  }  return $output;}/** * Format a "last page" link. * * @param $text *   The name (or image) of the link. * @param $limit *   The number of query results to display per page. * @param $element *   An optional integer to distinguish between multiple pagers on one page. * @param $parameters *   An associative array of query string parameters to append to the pager links. * @return *   An HTML string that generates this piece of the query pager. * * @ingroup themeable */function theme_pager_last($text, $limit, $element = 0, $parameters = array()) {  global $pager_page_array, $pager_total;  $output = '';  // If we are anywhere but the last page  if ($pager_page_array[$element] < ($pager_total[$element] - 1)) {    $output = theme('pager_link', $text, pager_load_array($pager_total[$element] - 1, $element, $pager_page_array), $element, $parameters);  }  return $output;}/** * Format a link to a specific query result page. * * @param $page_new *   The first result to display on the linked page. * @param $element *   An optional integer to distinguish between multiple pagers on one page. * @param $parameters *   An associative array of query string parameters to append to the pager link. * @param $attributes *   An associative array of HTML attributes to apply to a pager anchor tag. * @return *   An HTML string that generates the link. * * @ingroup themeable */function theme_pager_link($text, $page_new, $element, $parameters = array(), $attributes = array()) {  $page = isset($_GET['page']) ? $_GET['page'] : '';  if ($new_page = implode(',', pager_load_array($page_new[$element], $element, explode(',', $page)))) {    $parameters['page'] = $new_page;  }  $query = array();  if (count($parameters)) {    $query[] = drupal_query_string_encode($parameters, array());  }  $querystring = pager_get_querystring();  if ($querystring != '') {    $query[] = $querystring;  }  // Set each pager link title  if (!isset($attributes['title'])) {    static $titles = NULL;    if (!isset($titles)) {      $titles = array(        t(' first') => t('Go to first page'),        t(' previous') => t('Go to previous page'),        t('next ') => t('Go to next page'),        t('last ') => t('Go to last page'),      );    }    if (isset($titles[$text])) {      $attributes['title'] = $titles[$text];    }    else if (is_numeric($text)) {      $attributes['title'] = t('Go to page @number', array('@number' => $text));    }  }  return l($text, $_GET['q'], array('attributes' => $attributes, 'query' => count($query) ? implode('&', $query) : NULL));}/** * @} End of "Pager pieces". *//** * Helper function * * Copies $old_array to $new_array and sets $new_array[$element] = $value * Fills in $new_array[0 .. $element - 1] = 0 */function pager_load_array($value, $element, $old_array) {  $new_array = $old_array;  // Look for empty elements.  for ($i = 0; $i < $element; $i++) {    if (!$new_array[$i]) {      // Load found empty element with 0.      $new_array[$i] = 0;    }  }  // Update the changed element.  $new_array[$element] = (int)$value;  return $new_array;}
<?php// $Id$/** * @file * User page callbacks for the search module. *//** * Menu callback; presents the search form and/or search results. */function search_view($type = 'node') {  // Search form submits with POST but redirects to GET. This way we can keep  // the search query URL clean as a whistle:  // search/type/keyword+keyword  if (!isset($_POST['form_id'])) {    if ($type == '') {      // Note: search/node can not be a default tab because it would take on the      // path of its parent (search). It would prevent remembering keywords when      // switching tabs. This is why we drupal_goto to it from the parent instead.      drupal_goto('search/node');    }    $keys = search_get_keys();    // Only perform search if there is non-whitespace search term:    $results = '';    if (trim($keys)) {      // Log the search keys:      watchdog('search', '%keys (@type).', array('%keys' => $keys, '@type' => module_invoke($type, 'search', 'name')), WATCHDOG_NOTICE, l(t('results'), 'search/'. $type .'/'. $keys));      // Collect the search results:      $results = search_data($keys, $type);      if ($results) {        $results = theme('box', t('Search results'), $results);      }      else {        $results = theme('box', t('Your search yielded no results'), search_help('search#noresults', drupal_help_arg()));      }    }    // Construct the search form.    $output = drupal_get_form('search_form', NULL, $keys, $type);    $output .= $results;    return $output;  }  return drupal_get_form('search_form', NULL, empty($keys) ? '' : $keys, $type);}/** * Process variables for search-results.tpl.php. * * The $variables array contains the following arguments: * - $results * - $type * * @see search-results.tpl.php */function template_preprocess_search_results(&$variables) {  $variables['search_results'] = '';  foreach ($variables['results'] as $result) {    $variables['search_results'] .= theme('search_result', $result, $variables['type']);  }  $variables['pager'] = theme('pager', NULL, 10, 0);  // Provide alternate search results template.  $variables['template_files'][] = 'search-results-'. $variables['type'];}/** * Process variables for search-result.tpl.php. * * The $variables array contains the following arguments: * - $result * - $type * * @see search-result.tpl.php */function template_preprocess_search_result(&$variables) {  $result = $variables['result'];  $variables['url'] = check_url($result['link']);  $variables['title'] = check_plain($result['title']);  $info = array();  if (!empty($result['type'])) {    $info['type'] = check_plain($result['type']);  }  if (!empty($result['user'])) {    $info['user'] = $result['user'];  }  if (!empty($result['date'])) {    $info['date'] = format_date($result['date'], 'small');  }  if (isset($result['extra']) && is_array($result['extra'])) {    $info = array_merge($info, $result['extra']);  }  // Check for existence. User search does not include snippets.  $variables['snippet'] = isset($result['snippet']) ? $result['snippet'] : '';  // Provide separated and grouped meta information..  $variables['info_split'] = $info;  $variables['info'] = implode(' - ', $info);  // Provide alternate search result template.  $variables['template_files'][] = 'search-result-'. $variables['type'];}/** * As the search form collates keys from other modules hooked in via * hook_form_alter, the validation takes place in _submit. * search_form_validate() is used solely to set the 'processed_keys' form * value for the basic search form. */function search_form_validate($form, &$form_state) {  form_set_value($form['basic']['inline']['processed_keys'], trim($form_state['values']['keys']), $form_state);}/** * Process a search form submission. */function search_form_submit($form, &$form_state) {  $keys = $form_state['values']['processed_keys'];  if ($keys == '') {    form_set_error('keys', t('Please enter some keywords.'));    // Fall through to the drupal_goto() call.  }  $type = $form_state['values']['module'] ? $form_state['values']['module'] : 'node';  $form_state['redirect'] = 'search/'. $type .'/'. $keys;  return;}
<?php// $Id$/** * @file * Admin page callbacks for the book module. *//** * Returns an administrative overview of all books. */function book_admin_overview() {  $rows = array();  foreach (book_get_books() as $book) {    $rows[] = array(l($book['title'], $book['href'], $book['options']), l(t('edit order and titles'), "admin/content/book/". $book['nid']));  }  $headers = array(t('Book'), t('Operations'));  return theme('table', $headers, $rows);}/** * Builds and returns the book settings form. * * @see book_admin_settings_validate() * * @ingroup forms */function book_admin_settings() {  $types = node_get_types('names');  $form['book_allowed_types'] = array(    '#type' => 'checkboxes',    '#title' => t('Allowed book outline types'),    '#default_value' => variable_get('book_allowed_types', array('book')),    '#options' => $types,    '#description' => t('Select content types which users with the %add-perm permission will be allowed to add to the book hierarchy. Users with the %outline-perm permission can add all content types.', array('%add-perm' => t('add content to books'),  '%outline-perm' => t('administer book outlines'))),    '#required' => TRUE,  );  $form['book_child_type'] = array(    '#type' => 'radios',    '#title' => t('Default child page type'),    '#default_value' => variable_get('book_child_type', 'book'),    '#options' => $types,    '#description' => t('The content type for the %add-child link must be one of those selected as an allowed book outline type.', array('%add-child' => t('Add child page'))),    '#required' => TRUE,  );  $form['array_filter'] = array('#type' => 'value', '#value' => TRUE);  $form['#validate'][] = 'book_admin_settings_validate';  return system_settings_form($form);}/** * Validate the book settings form. * * @see book_admin_settings() */function book_admin_settings_validate($form, &$form_state) {  $child_type = $form_state['values']['book_child_type'];  if (empty($form_state['values']['book_allowed_types'][$child_type])) {    form_set_error('book_child_type', t('The content type for the %add-child link must be one of those selected as an allowed book outline type.', array('%add-child' => t('Add child page'))));  }}/** * Build the form to administrate the hierarchy of a single book. * * @see book_admin_edit_submit() * * @ingroup forms. */function book_admin_edit($form_state, $node) {  drupal_set_title(check_plain($node->title));  $form = array();  $form['#node'] = $node;  _book_admin_table($node, $form);  $form['save'] = array(    '#type' => 'submit',    '#value' => t('Save book pages'),  );  return $form;}/** * Check that the book has not been changed while using the form. * * @see book_admin_edit() */function book_admin_edit_validate($form, &$form_state) {  if ($form_state['values']['tree_hash'] != $form_state['values']['tree_current_hash']) {    form_set_error('', t('This book has been modified by another user, the changes could not be saved.'));    $form_state['rebuild'] = TRUE;  }}/** * Handle submission of the book administrative page form. * * This function takes care to save parent menu items before their children. * Saving menu items in the incorrect order can break the menu tree. * * @see book_admin_edit() * @see menu_overview_form_submit() */function book_admin_edit_submit($form, &$form_state) {  // Save elements in the same order as defined in post rather than the form.  // This ensures parents are updated before their children, preventing orphans.  $order = array_flip(array_keys($form['#post']['table']));  $form['table'] = array_merge($order, $form['table']);  foreach (element_children($form['table']) as $key) {    if ($form['table'][$key]['#item']) {      $row = $form['table'][$key];      $values = $form_state['values']['table'][$key];      // Update menu item if moved.      if ($row['plid']['#default_value'] != $values['plid'] || $row['weight']['#default_value'] != $values['weight']) {        $row['#item']['plid'] = $values['plid'];        $row['#item']['weight'] = $values['weight'];        menu_link_save($row['#item']);      }      // Update the title if changed.      if ($row['title']['#default_value'] != $values['title']) {        $node = node_load($values['nid'], FALSE);        $node->title = $values['title'];        $node->book['link_title'] = $values['title'];        $node->revision = 1;        $node->log = t('Title changed from %original to %current.', array('%original' => $node->title, '%current' => $values['title']));        node_save($node);        watchdog('content', 'book: updated %title.', array('%title' => $node->title), WATCHDOG_NOTICE, l(t('view'), 'node/'. $node->nid));      }    }  }  drupal_set_message(t('Updated book %title.', array('%title' => $form['#node']->title)));}/** * Build the table portion of the form for the book administration page. * * @see book_admin_edit() */function _book_admin_table($node, &$form) {  $form['table'] = array(    '#theme' => 'book_admin_table',    '#tree' => TRUE,  );  $tree = book_menu_subtree_data($node->book);  $tree = array_shift($tree); // Do not include the book item itself.  if ($tree['below']) {    $hash = sha1(serialize($tree['below']));    // Store the hash value as a hidden form element so that we can detect    // if another user changed the book hierarchy.    $form['tree_hash'] = array(      '#type' => 'hidden',      '#default_value' => $hash,    );    $form['tree_current_hash'] = array(      '#type' => 'value',      '#value' => $hash,    );    _book_admin_table_tree($tree['below'], $form['table']);  }}/** * Recursive helper to build the main table in the book administration page form. * * @see book_admin_edit() */function _book_admin_table_tree($tree, &$form) {  foreach ($tree as $data) {    $form['book-admin-'. $data['link']['nid']] = array(      '#item' => $data['link'],      'nid' => array('#type' => 'value', '#value' => $data['link']['nid']),      'depth' => array('#type' => 'value', '#value' => $data['link']['depth']),      'href' => array('#type' => 'value', '#value' => $data['link']['href']),      'title' => array(        '#type' => 'textfield',        '#default_value' => $data['link']['link_title'],        '#maxlength' => 255,        '#size' => 40,      ),      'weight' => array(        '#type' => 'weight',        '#default_value' => $data['link']['weight'],        '#delta' => 15,      ),      'plid' => array(        '#type' => 'textfield',        '#default_value' => $data['link']['plid'],        '#size' => 6,      ),      'mlid' => array(        '#type' => 'hidden',        '#default_value' => $data['link']['mlid'],      ),    );    if ($data['below']) {      _book_admin_table_tree($data['below'], $form);    }  }  return $form;}/** * Theme function for the book administration page form. * * @ingroup themeable * @see book_admin_table() */function theme_book_admin_table($form) {  drupal_add_tabledrag('book-outline', 'match', 'parent', 'book-plid', 'book-plid', 'book-mlid', TRUE, MENU_MAX_DEPTH - 2);  drupal_add_tabledrag('book-outline', 'order', 'sibling', 'book-weight');  $header = array(t('Title'), t('Weight'), t('Parent'), array('data' => t('Operations'), 'colspan' => '3'));  $rows = array();  $destination = drupal_get_destination();  $access = user_access('administer nodes');  foreach (element_children($form) as $key) {    $nid = $form[$key]['nid']['#value'];    $href = $form[$key]['href']['#value'];    // Add special classes to be used with tabledrag.js.    $form[$key]['plid']['#attributes']['class'] = 'book-plid';    $form[$key]['mlid']['#attributes']['class'] = 'book-mlid';    $form[$key]['weight']['#attributes']['class'] = 'book-weight';    $data = array(      theme('indentation', $form[$key]['depth']['#value'] - 2) . drupal_render($form[$key]['title']),      drupal_render($form[$key]['weight']),      drupal_render($form[$key]['plid']) . drupal_render($form[$key]['mlid']),      l(t('view'), $href),      $access ? l(t('edit'), 'node/'. $nid .'/edit', array('query' => $destination)) : '&nbsp',      $access ? l(t('delete'), 'node/'. $nid .'/delete', array('query' => $destination) )  : '&nbsp',    );    $row = array('data' => $data);    if (isset($form[$key]['#attributes'])) {      $row = array_merge($row, $form[$key]['#attributes']);    }    $row['class'] = empty($row['class']) ? 'draggable' : $row['class'] .' draggable';    $rows[] = $row;  }  return theme('table', $header, $rows, array('id' => 'book-outline'));}
<?php// $Id$/** * @file profile-listing.tpl.php * Default theme implementation for displaying a user and their profile data * for member listing pages. * * @see profile-wrapper.tpl.php *      where all the data is collected and printed out. * * Available variables: * - $picture: Image configured for the account linking to the users page. * - $name: User's account name linking to the users page. * - $profile: Keyed array of all profile fields that are set as visible *   in member list pages (configured by site administrators). It also needs *   to have a value in order to be present. * * Each $field in $profile contains: * - $field->title: Title of the profile field. * - $field->value: Value of the profile field. * - $field->type: Type of the profile field, i.e., checkbox, textfield, *   textarea, selection, list, url or date. * * Since $profile is keyed, a direct print of the field is possible. Not * all accounts may have a value for a profile so do a check first. If a field * of "last_name" was set for the site, the following can be used. * *  <?php if (isset($profile['last_name'])): ?> *    <div class="field last-name"> *      <?php print $profile['last_name']->title; ?>:<br /> *      <?php print $profile['last_name']->value; ?> *    </div> *  <?php endif; ?> * * @see template_preprocess_profile_listing() */?><div class="profile">  <?php print $picture; ?>  <div class="name">    <?php print $name; ?>  </div>  <?php foreach ($profile as $field) : ?>    <div class="field">      <?php print $field->value; ?>    </div>  <?php endforeach; ?></div>
<?php// $Id$/** * @file * Allows users to structure the pages of a site in a hierarchy or outline. *//** * Implementation of hook_theme() */function book_theme() {  return array(    'book_navigation' => array(      'arguments' => array('book_link' => NULL),      'template' => 'book-navigation',    ),    'book_export_html' => array(      'arguments' => array('title' => NULL, 'contents' => NULL, 'depth' => NULL),      'template' => 'book-export-html',    ),    'book_admin_table' => array(      'arguments' => array('form' => NULL),    ),    'book_title_link' => array(      'arguments' => array('link' => NULL),    ),    'book_all_books_block' => array(      'arguments' => array('book_menus' => array()),      'template' => 'book-all-books-block',    ),    'book_node_export_html' => array(      'arguments' => array('node' => NULL, 'children' => NULL),      'template' => 'book-node-export-html',    ),  );}/** * Implementation of hook_perm(). */function book_perm() {  return array('add content to books', 'administer book outlines', 'create new books', 'access printer-friendly version');}/** * Implementation of hook_link(). */function book_link($type, $node = NULL, $teaser = FALSE) {  $links = array();  if ($type == 'node' && isset($node->book)) {    if (!$teaser) {      $child_type = variable_get('book_child_type', 'book');      if ((user_access('add content to books') || user_access('administer book outlines')) && node_access('create', $child_type) && $node->status == 1 && $node->book['depth'] < MENU_MAX_DEPTH) {        $links['book_add_child'] = array(          'title' => t('Add child page'),          'href' => "node/add/". str_replace('_', '-', $child_type),          'query' => "parent=". $node->book['mlid'],        );      }      if (user_access('access printer-friendly version')) {        $links['book_printer'] = array(          'title' => t('Printer-friendly version'),          'href' => 'book/export/html/'. $node->nid,          'attributes' => array('title' => t('Show a printer-friendly version of this book page and its sub-pages.'))        );      }    }  }  return $links;}/** * Implementation of hook_menu(). */function book_menu() {  $items['admin/content/book'] = array(    'title' => 'Books',    'description' => "Manage your site's book outlines.",    'page callback' => 'book_admin_overview',    'access arguments' => array('administer book outlines'),    'file' => 'book.admin.inc',  );  $items['admin/content/book/list'] = array(    'title' => 'List',    'type' => MENU_DEFAULT_LOCAL_TASK,  );  $items['admin/content/book/settings'] = array(    'title' => 'Settings',    'page callback' => 'drupal_get_form',    'page arguments' => array('book_admin_settings'),    'access arguments' => array('administer site configuration'),    'type' => MENU_LOCAL_TASK,    'weight' => 8,    'file' => 'book.admin.inc',  );  $items['admin/content/book/%node'] = array(    'title' => 'Re-order book pages and change titles',    'page callback' => 'drupal_get_form',    'page arguments' => array('book_admin_edit', 3),    'access callback' => '_book_outline_access',    'access arguments' => array(3),    'type' => MENU_CALLBACK,    'file' => 'book.admin.inc',  );  $items['book'] = array(    'title' => 'Books',    'page callback' => 'book_render',    'access arguments' => array('access content'),    'type' => MENU_SUGGESTED_ITEM,    'file' => 'book.pages.inc',  );  $items['book/export/%/%'] = array(    'page callback' => 'book_export',    'page arguments' => array(2, 3),    'access arguments' => array('access printer-friendly version'),    'type' => MENU_CALLBACK,    'file' => 'book.pages.inc',  );  $items['node/%node/outline'] = array(    'title' => 'Outline',    'page callback' => 'book_outline',    'page arguments' => array(1),    'access callback' => '_book_outline_access',    'access arguments' => array(1),    'type' => MENU_LOCAL_TASK,    'weight' => 2,    'file' => 'book.pages.inc',  );  $items['node/%node/outline/remove'] = array(    'title' => 'Remove from outline',    'page callback' => 'drupal_get_form',    'page arguments' => array('book_remove_form', 1),    'access callback' => '_book_outline_remove_access',    'access arguments' => array(1),    'type' => MENU_CALLBACK,    'file' => 'book.pages.inc',  );  $items['book/js/form'] = array(    'page callback' => 'book_form_update',    'access arguments' => array('access content'),    'type' => MENU_CALLBACK,    'file' => 'book.pages.inc',  );  return $items;}/** * Menu item access callback - determine if the outline tab is accessible. */function _book_outline_access($node) {  return user_access('administer book outlines') && node_access('view', $node);}/** * Menu item access callback - determine if the user can remove nodes from the outline. */function _book_outline_remove_access($node) {  return isset($node->book) && ($node->book['bid'] != $node->nid) && _book_outline_access($node);}/** * Implementation of hook_init(). Add's the book module's CSS. */function book_init() {  drupal_add_css(drupal_get_path('module', 'book') .'/book.css');}/** * Implementation of hook_block(). * * Displays the book table of contents in a block when the current page is a * single-node view of a book node. */function book_block($op = 'list', $delta = 0, $edit = array()) {  $block = array();  switch ($op) {    case 'list':      $block[0]['info'] = t('Book navigation');      $block[0]['cache'] = BLOCK_CACHE_PER_PAGE | BLOCK_CACHE_PER_ROLE;      return $block;    case 'view':      $current_bid = 0;      if ($node = menu_get_object()) {        $current_bid = empty($node->book['bid']) ? 0 : $node->book['bid'];      }      if (variable_get('book_block_mode', 'all pages') == 'all pages') {        $block['subject'] = t('Book navigation');        $book_menus = array();        $pseudo_tree = array(0 => array('below' => FALSE));        foreach (book_get_books() as $book_id => $book) {          if ($book['bid'] == $current_bid) {            // If the current page is a node associated with a book, the menu            // needs to be retrieved.            $book_menus[$book_id] = menu_tree_output(menu_tree_all_data($node->book['menu_name'], $node->book));          }          else {            // Since we know we will only display a link to the top node, there            // is no reason to run an additional menu tree query for each book.            $book['in_active_trail'] = FALSE;            $pseudo_tree[0]['link'] = $book;            $book_menus[$book_id] = menu_tree_output($pseudo_tree);          }        }        $block['content'] = theme('book_all_books_block', $book_menus);      }      elseif ($current_bid) {        // Only display this block when the user is browsing a book.        $title = db_result(db_query(db_rewrite_sql('SELECT n.title FROM {node} n WHERE n.nid = %d'), $node->book['bid']));        // Only show the block if the user has view access for the top-level node.        if ($title) {          $tree = menu_tree_all_data($node->book['menu_name'], $node->book);          // There should only be one element at the top level.          $data = array_shift($tree);          $block['subject'] = theme('book_title_link', $data['link']);          $block['content'] = ($data['below']) ? menu_tree_output($data['below']) : '';        }      }      return $block;    case 'configure':      $options = array(        'all pages' => t('Show block on all pages'),        'book pages' => t('Show block only on book pages'),      );      $form['book_block_mode'] = array(        '#type' => 'radios',        '#title' => t('Book navigation block display'),        '#options' => $options,        '#default_value' => variable_get('book_block_mode', 'all pages'),        '#description' => t("If <em>Show block on all pages</em> is selected, the block will contain the automatically generated menus for all of the site's books. If <em>Show block only on book pages</em> is selected, the block will contain only the one menu corresponding to the current page's book. In this case, if the current page is not in a book, no block will be displayed. The <em>Page specific visibility settings</em> or other visibility settings can be used in addition to selectively display this block."),        );      return $form;    case 'save':      variable_set('book_block_mode', $edit['book_block_mode']);      break;  }}/** * Generate the HTML output for a link to a book title when used as a block title. * * @ingroup themeable */function theme_book_title_link($link) {  $link['options']['attributes']['class'] =  'book-title';  return l($link['title'], $link['href'], $link['options']);}/** * Returns an array of all books. * * This list may be used for generating a list of all the books, or for building * the options for a form select. */function book_get_books() {  static $all_books;  if (!isset($all_books)) {    $all_books = array();    $result = db_query("SELECT DISTINCT(bid) FROM {book}");    $nids = array();    while ($book = db_fetch_array($result)) {      $nids[] = $book['bid'];    }    if ($nids) {      $result2 = db_query(db_rewrite_sql("SELECT n.type, n.title, b.*, ml.* FROM {book} b INNER JOIN {node} n on b.nid = n.nid INNER JOIN {menu_links} ml ON b.mlid = ml.mlid WHERE n.nid IN (". implode(',', $nids) .") AND n.status = 1 ORDER BY ml.weight, ml.link_title"));      while ($link = db_fetch_array($result2)) {        $link['href'] = $link['link_path'];        $link['options'] = unserialize($link['options']);        $all_books[$link['bid']] = $link;      }    }  }  return $all_books;}/** * Implementation of hook_form_alter(). Adds the book fieldset to the node form. * * @see book_pick_book_submit() * @see book_submit() */function book_form_alter(&$form, $form_state, $form_id) {  if (isset($form['type']) && isset($form['#node']) && $form['type']['#value'] .'_node_form' == $form_id) {    // Add elements to the node form    $node = $form['#node'];    $access = user_access('administer book outlines');    if (!$access) {      if (user_access('add content to books') && ((!empty($node->book['mlid']) && !empty($node->nid)) || book_type_is_allowed($node->type))) {        // Already in the book hierarchy or this node type is allowed        $access = TRUE;      }    }    if ($access) {      _book_add_form_elements($form, $node);      $form['book']['pick-book'] = array(        '#type' => 'submit',        '#value' => t('Change book (update list of parents)'),         // Submit the node form so the parent select options get updated.         // This is typically only used when JS is disabled.  Since the parent options         // won't be changed via AJAX, a button is provided in the node form to submit         // the form and generate options in the parent select corresponding to the         // selected book.  This is similar to what happens during a node preview.        '#submit' => array('node_form_submit_build_node'),        '#weight' => 20,      );    }  }}/** * Build the parent selection form element for the node form or outline tab * * This function is also called when generating a new set of options during the * AJAX callback, so an array is returned that can be used to replace an existing * form element. */function _book_parent_select($book_link) {  if (variable_get('menu_override_parent_selector', FALSE)) {    return array();  }  // Offer a message or a drop-down to choose a different parent page.  $form = array(    '#type' => 'hidden',    '#value' => -1,    '#prefix' => '<div id="edit-book-plid-wrapper">',    '#suffix' => '</div>',  );  if ($book_link['nid'] === $book_link['bid']) {    // This is a book - at the top level.    if ($book_link['original_bid'] === $book_link['bid']) {      $form['#prefix'] .= '<em>'. t('This is the top-level page in this book.') .'</em>';    }    else {      $form['#prefix'] .= '<em>'. t('This will be the top-level page in this book.') .'</em>';    }  }  elseif (!$book_link['bid']) {    $form['#prefix'] .= '<em>'. t('No book selected.') .'</em>';  }  else {    $form = array(      '#type' => 'select',      '#title' => t('Parent item'),      '#default_value' => $book_link['plid'],      '#description' => t('The parent page in the book. The maximum depth for a book and all child pages is !maxdepth. Some pages in the selected book may not be available as parents if selecting them would exceed this limit.', array('!maxdepth' => MENU_MAX_DEPTH)),      '#options' => book_toc($book_link['bid'], array($book_link['mlid']), $book_link['parent_depth_limit']),      '#attributes' => array('class' => 'book-title-select'),    );  }  return $form;}/** * Build the common elements of the book form for the node and outline forms. */function _book_add_form_elements(&$form, $node) {  // Need this for AJAX.  $form['#cache'] = TRUE;  drupal_add_js("if (Drupal.jsEnabled) { $(document).ready(function() { $('#edit-book-pick-book').css('display', 'none'); }); }", 'inline');  $form['book'] = array(    '#type' => 'fieldset',    '#title' => t('Book outline'),    '#weight' => 10,    '#collapsible' => TRUE,    '#collapsed' => TRUE,    '#tree' => TRUE,    '#attributes' => array('class' => 'book-outline-form'),  );  foreach (array('menu_name', 'mlid', 'nid', 'router_path', 'has_children', 'options', 'module', 'original_bid', 'parent_depth_limit') as $key) {    $form['book'][$key] = array(      '#type' => 'value',      '#value' => $node->book[$key],    );  }  $form['book']['plid'] = _book_parent_select($node->book);  $form['book']['weight'] = array(    '#type' => 'weight',    '#title' => t('Weight'),    '#default_value' => $node->book['weight'],    '#delta' => 15,    '#weight' => 5,    '#description' => t('Pages at a given level are ordered first by weight and then by title.'),  );  $options = array();  $nid = isset($node->nid) ? $node->nid : 'new';  if (isset($node->nid) && ($nid == $node->book['original_bid']) && ($node->book['parent_depth_limit'] == 0)) {    // This is the top level node in a maximum depth book and thus cannot be moved.    $options[$node->nid] = $node->title;  }  else {    foreach (book_get_books() as $book) {      $options[$book['nid']] = $book['title'];    }  }  if (user_access('create new books') && ($nid == 'new' || ($nid != $node->book['original_bid']))) {    // The node can become a new book, if it is not one already.    $options = array($nid => '<'. t('create a new book') .'>') + $options;  }  if (!$node->book['mlid']) {    // The node is not currently in a the hierarchy.    $options = array(0 => '<'. t('none') .'>') + $options;  }  // Add a drop-down to select the destination book.  $form['book']['bid'] = array(    '#type' => 'select',    '#title' => t('Book'),    '#default_value' => $node->book['bid'],    '#options' => $options,    '#access' => (bool)$options,    '#description' => t('Your page will be a part of the selected book.'),    '#weight' => -5,    '#attributes' => array('class' => 'book-title-select'),    '#ahah' => array(      'path' => 'book/js/form',      'wrapper' => 'edit-book-plid-wrapper',      'effect' => 'slide',    ),  );}/** * Common helper function to handles additions and updates to the book outline. * * Performs all additions and updates to the book outline through node addition, * node editing, node deletion, or the outline tab. */function _book_update_outline(&$node) {  if (empty($node->book['bid'])) {    return FALSE;  }  $new = empty($node->book['mlid']);  $node->book['link_path'] = 'node/'. $node->nid;  $node->book['link_title'] = $node->title;  $node->book['parent_mismatch'] = FALSE; // The normal case.  if ($node->book['bid'] == $node->nid) {    $node->book['plid'] = 0;    $node->book['menu_name'] = book_menu_name($node->nid);  }  else {    // Check in case the parent is not is this book; the book takes precedence.    if (!empty($node->book['plid'])) {      $parent = db_fetch_array(db_query("SELECT * FROM {book} WHERE mlid = %d", $node->book['plid']));    }    if (empty($node->book['plid']) || !$parent || $parent['bid'] != $node->book['bid']) {      $node->book['plid'] = db_result(db_query("SELECT mlid FROM {book} WHERE nid = %d", $node->book['bid']));      $node->book['parent_mismatch'] = TRUE; // Likely when JS is disabled.    }  }  if (menu_link_save($node->book)) {    if ($new) {      // Insert new.      db_query("INSERT INTO {book} (nid, mlid, bid) VALUES (%d, %d, %d)", $node->nid, $node->book['mlid'], $node->book['bid']);    }    else {      if ($node->book['bid'] != db_result(db_query("SELECT bid FROM {book} WHERE nid = %d", $node->nid))) {        // Update the bid for this page and all children.        book_update_bid($node->book);      }    }    return TRUE;  }  // Failed to save the menu link  return FALSE;}/** * Update the bid for a page and its children when it is moved to a new book. * * @param $book_link *   A fully loaded menu link that is part of the book hierarchy. */function book_update_bid($book_link) {  for ($i = 1; $i <= MENU_MAX_DEPTH && $book_link["p$i"]; $i++) {    $match[] = "p$i = %d";    $args[] = $book_link["p$i"];  }  $result = db_query("SELECT mlid FROM {menu_links} WHERE ". implode(' AND ', $match), $args);  $mlids = array();  while ($a = db_fetch_array($result)) {    $mlids[] = $a['mlid'];  }  if ($mlids) {    db_query("UPDATE {book} SET bid = %d WHERE mlid IN (". implode(',', $mlids) .")", $book_link['bid']);  }}/** * Get the book menu tree for a page, and return it as a linear array. * * @param $book_link *   A fully loaded menu link that is part of the book hierarchy. * @return *   A linear array of menu links in the order that the links are shown in the *   menu, so the previous and next pages are the elements before and after the *   element corresponding to $node.  The children of $node (if any) will come *   immediately after it in the array. */function book_get_flat_menu($book_link) {  static $flat = array();  if (!isset($flat[$book_link['mlid']])) {    // Call menu_tree_all_data() to take advantage of the menu system's caching.    $tree = menu_tree_all_data($book_link['menu_name'], $book_link);    $flat[$book_link['mlid']] = array();    _book_flatten_menu($tree, $flat[$book_link['mlid']]);  }  return $flat[$book_link['mlid']];}/** * Recursive helper function for book_get_flat_menu(). */function _book_flatten_menu($tree, &$flat) {  foreach ($tree as $data) {    if (!$data['link']['hidden']) {      $flat[$data['link']['mlid']] = $data['link'];      if ($data['below']) {        _book_flatten_menu($data['below'], $flat);      }    }  }}/** * Fetches the menu link for the previous page of the book. */function book_prev($book_link) {  // If the parent is zero, we are at the start of a book.  if ($book_link['plid'] == 0) {    return NULL;  }  $flat = book_get_flat_menu($book_link);  // Assigning the array to $flat resets the array pointer for use with each().  $curr = NULL;  do {    $prev = $curr;    list($key, $curr) = each($flat);  } while ($key && $key != $book_link['mlid']);  if ($key == $book_link['mlid']) {    // The previous page in the book may be a child of the previous visible link.    if ($prev['depth'] == $book_link['depth'] && $prev['has_children']) {      // The subtree will have only one link at the top level - get its data.      $data = array_shift(book_menu_subtree_data($prev));      // The link of interest is the last child - iterate to find the deepest one.      while ($data['below']) {        $data = end($data['below']);      }      return $data['link'];    }    else {      return $prev;    }  }}/** * Fetches the menu link for the next page of the book. */function book_next($book_link) {  $flat = book_get_flat_menu($book_link);  // Assigning the array to $flat resets the array pointer for use with each().  do {    list($key, $curr) = each($flat);  } while ($key && $key != $book_link['mlid']);  if ($key == $book_link['mlid']) {    return current($flat);  }}/** * Format the menu links for the child pages of the current page. */function book_children($book_link) {  $flat = book_get_flat_menu($book_link);  $children = array();  if ($book_link['has_children']) {    // Walk through the array until we find the current page.    do {      $link = array_shift($flat);    } while ($link && ($link['mlid'] != $book_link['mlid']));    // Continue though the array and collect the links whose parent is this page.    while (($link = array_shift($flat)) && $link['plid'] == $book_link['mlid']) {      $data['link'] = $link;      $data['below'] = '';      $children[] = $data;    }  }  return $children ? menu_tree_output($children) : '';}/** * Generate the corresponding menu name from a book ID. */function book_menu_name($bid) {  return 'book-toc-'. $bid;}/** * Build an active trail to show in the breadcrumb. */function book_build_active_trail($book_link) {  static $trail;  if (!isset($trail)) {    $trail = array();    $trail[] = array('title' => t('Home'), 'href' => '<front>', 'localized_options' => array());    $tree = menu_tree_all_data($book_link['menu_name'], $book_link);    $curr = array_shift($tree);    while ($curr) {      if ($curr['link']['href'] == $book_link['href']) {        $trail[] = $curr['link'];        $curr = FALSE;      }      else {        if ($curr['below'] && $curr['link']['in_active_trail']) {          $trail[] = $curr['link'];          $tree = $curr['below'];        }        $curr = array_shift($tree);      }    }  }  return $trail;}/** * Implementation of hook_nodeapi(). * * Appends book navigation to all nodes in the book, and handles book outline * insertions and updates via the node form. */function book_nodeapi(&$node, $op, $teaser, $page) {  switch ($op) {    case 'load':      // Note - we cannot use book_link_load() because it will call node_load()      $info['book'] = db_fetch_array(db_query('SELECT * FROM {book} b INNER JOIN {menu_links} ml ON b.mlid = ml.mlid WHERE b.nid = %d', $node->nid));      if ($info['book']) {        $info['book']['href'] = $info['book']['link_path'];        $info['book']['title'] = $info['book']['link_title'];        $info['book']['options'] = unserialize($info['book']['options']);        return $info;      }      break;    case 'view':    if (!$teaser) {        if (!empty($node->book['bid']) && $node->build_mode == NODE_BUILD_NORMAL) {          $node->content['book_navigation'] = array(            '#value' => theme('book_navigation', $node->book),            '#weight' => 100,          );          if ($page) {            menu_set_active_trail(book_build_active_trail($node->book));            menu_set_active_menu_name($node->book['menu_name']);          }        }      }      break;    case 'presave':      // Always save a revision for non-administrators.      if (!empty($node->book['bid']) && !user_access('administer nodes')) {        $node->revision = 1;      }      // Make sure a new node gets a new menu link.      if (empty($node->nid)) {        $node->book['mlid'] = NULL;      }      break;    case 'insert':    case 'update':      if (!empty($node->book['bid'])) {        if ($node->book['bid'] == 'new') {          // New nodes that are their own book.          $node->book['bid'] = $node->nid;        }        $node->book['nid'] = $node->nid;        $node->book['menu_name'] = book_menu_name($node->book['bid']);        _book_update_outline($node);      }      break;    case 'delete':      if (!empty($node->book['bid'])) {        if ($node->nid == $node->book['bid']) {          // Handle deletion of a top-level post.          $result = db_query("SELECT b.nid FROM {menu_links} ml INNER JOIN {book} b on b.mlid = ml.mlid WHERE ml.plid = %d", $node->book['mlid']);          while ($child = db_fetch_array($result)) {            $child_node = node_load($child['nid']);            $child_node->book['bid'] = $child_node->nid;            _book_update_outline($child_node);          }        }        menu_link_delete($node->book['mlid']);        db_query('DELETE FROM {book} WHERE mlid = %d', $node->book['mlid']);      }      break;    case 'prepare':      // Prepare defaults for the add/edit form.      if (empty($node->book) && (user_access('add content to books') || user_access('administer book outlines'))) {        $node->book = array();        if (empty($node->nid) && isset($_GET['parent']) && is_numeric($_GET['parent'])) {          // Handle "Add child page" links:          $parent = book_link_load($_GET['parent']);          if ($parent && $parent['access']) {            $node->book['bid'] = $parent['bid'];            $node->book['plid'] = $parent['mlid'];            $node->book['menu_name'] = $parent['menu_name'];          }        }        // Set defaults.        $node->book += _book_link_defaults(!empty($node->nid) ? $node->nid : 'new');      }      else {        if (isset($node->book['bid']) && !isset($node->book['original_bid'])) {          $node->book['original_bid'] = $node->book['bid'];        }      }      // Find the depth limit for the parent select.      if (isset($node->book['bid']) && !isset($node->book['parent_depth_limit'])) {        $node->book['parent_depth_limit'] = _book_parent_depth_limit($node->book);      }      break;  }}/** * Find the depth limit for items in the parent select. */function _book_parent_depth_limit($book_link) {  return MENU_MAX_DEPTH - 1 - (($book_link['mlid'] && $book_link['has_children']) ? menu_link_children_relative_depth($book_link) : 0);}/** * Form altering function for the confirm form for a single node deletion. */function book_form_node_delete_confirm_alter(&$form, $form_state) {  $node = node_load($form['nid']['#value']);  if (isset($node->book) && $node->book['has_children']) {    $form['book_warning'] = array(      '#value' => '<p>'. t('%title is part of a book outline, and has associated child pages. If you proceed with deletion, the child pages will be relocated automatically.', array('%title' => $node->title)) .'</p>',      '#weight' => -10,    );  }}/** * Return an array with default values for a book link. */function _book_link_defaults($nid) {  return array('original_bid' => 0, 'menu_name' => '', 'nid' => $nid, 'bid' => 0, 'router_path' => 'node/%', 'plid' => 0, 'mlid' => 0, 'has_children' => 0, 'weight' => 0, 'module' => 'book', 'options' => array());}/** * Process variables for book-navigation.tpl.php. * * The $variables array contains the following arguments: * - $book_link * * @see book-navigation.tpl.php */function template_preprocess_book_navigation(&$variables) {  $book_link = $variables['book_link'];  // Provide extra variables for themers. Not needed by default.  $variables['book_id'] = $book_link['bid'];  $variables['book_title'] = check_plain($book_link['link_title']);  $variables['book_url'] = 'node/'. $book_link['bid'];  $variables['current_depth'] = $book_link['depth'];  $variables['tree'] = '';  if ($book_link['mlid']) {    $variables['tree'] = book_children($book_link);    if ($prev = book_prev($book_link)) {      $prev_href = url($prev['href']);      drupal_add_link(array('rel' => 'prev', 'href' => $prev_href));      $variables['prev_url'] = $prev_href;      $variables['prev_title'] = check_plain($prev['title']);    }    if ($book_link['plid'] && $parent = book_link_load($book_link['plid'])) {      $parent_href = url($parent['href']);      drupal_add_link(array('rel' => 'up', 'href' => $parent_href));      $variables['parent_url'] = $parent_href;      $variables['parent_title'] = check_plain($parent['title']);    }    if ($next = book_next($book_link)) {      $next_href = url($next['href']);      drupal_add_link(array('rel' => 'next', 'href' => $next_href));      $variables['next_url'] = $next_href;      $variables['next_title'] = check_plain($next['title']);    }  }  $variables['has_links'] = FALSE;  // Link variables to filter for values and set state of the flag variable.  $links = array('prev_url', 'prev_title', 'parent_url', 'parent_title', 'next_url', 'next_title');  foreach ($links as $link) {    if (isset($variables[$link])) {      // Flag when there is a value.      $variables['has_links'] = TRUE;    }    else {      // Set empty to prevent notices.      $variables[$link] = '';    }  }}/** * A recursive helper function for book_toc(). */function _book_toc_recurse($tree, $indent, &$toc, $exclude, $depth_limit) {  foreach ($tree as $data) {    if ($data['link']['depth'] > $depth_limit) {      // Don't iterate through any links on this level.      break;    }    if (!in_array($data['link']['mlid'], $exclude)) {      $toc[$data['link']['mlid']] = $indent .' '. truncate_utf8($data['link']['title'], 30, TRUE, TRUE);      if ($data['below']) {        _book_toc_recurse($data['below'], $indent .'--', $toc, $exclude, $depth_limit);      }    }  }}/** * Returns an array of book pages in table of contents order. * * @param $bid *   The ID of the book whose pages are to be listed. * @param $exclude *   Optional array of mlid values.  Any link whose mlid is in this array *   will be excluded (along with its children). * @param $depth_limit *   Any link deeper than this value will be excluded (along with its children). * @return *   An array of mlid, title pairs for use as options for selecting a book page. */function book_toc($bid, $exclude = array(), $depth_limit) {  $tree = menu_tree_all_data(book_menu_name($bid));  $toc = array();  _book_toc_recurse($tree, '', $toc, $exclude, $depth_limit);  return $toc;}/** * Process variables for book-export-html.tpl.php. * * The $variables array contains the following arguments: * - $title * - $contents * - $depth * * @see book-export-html.tpl.php */function template_preprocess_book_export_html(&$variables) {  global $base_url, $language;  $variables['title'] = check_plain($variables['title']);  $variables['base_url'] = $base_url;  $variables['language'] = $language;  $variables['language_rtl'] = ($language->direction == LANGUAGE_RTL);  $variables['head'] = drupal_get_html_head();}/** * Traverse the book tree to build printable or exportable output. * * During the traversal, the $visit_func() callback is applied to each * node, and is called recursively for each child of the node (in weight, * title order). * * @param $tree *   A subtree of the book menu hierarchy, rooted at the current page. * @param $visit_func *   A function callback to be called upon visiting a node in the tree. * @return *   The output generated in visiting each node. */function book_export_traverse($tree, $visit_func) {  $output = '';  foreach ($tree as $data) {    // Note- access checking is already performed when building the tree.    if ($node = node_load($data['link']['nid'], FALSE)) {      $children = '';      if ($data['below']) {        $children = book_export_traverse($data['below'], $visit_func);      }      if (function_exists($visit_func)) {        $output .= call_user_func($visit_func, $node, $children);      }      else {        // Use the default function.        $output .= book_node_export($node, $children);      }    }  }  return $output;}/** * Generates printer-friendly HTML for a node. * * @see book_export_traverse() * * @param $node *   The node to generate output for. * @param $children *   All the rendered child nodes within the current node. * @return *   The HTML generated for the given node. */function book_node_export($node, $children = '') {  $node->build_mode = NODE_BUILD_PRINT;  $node = node_build_content($node, FALSE, FALSE);  $node->body = drupal_render($node->content);  return theme('book_node_export_html', $node, $children);}/** * Process variables for book-node-export-html.tpl.php. * * The $variables array contains the following arguments: * - $node * - $children * * @see book-node-export-html.tpl.php */function template_preprocess_book_node_export_html(&$variables) {  $variables['depth'] = $variables['node']->book['depth'];  $variables['title'] = check_plain($variables['node']->title);  $variables['content'] = $variables['node']->body;}/** * Determine if a given node type is in the list of types allowed for books. */function book_type_is_allowed($type) {  return in_array($type, variable_get('book_allowed_types', array('book')));}/** * Implementation of hook_node_type(). * * Update book module's persistent variables if the machine-readable name of a * node type is changed. */function book_node_type($op, $type) {  switch ($op) {    case 'update':      if (!empty($type->old_type) && $type->old_type != $type->type) {        // Update the list of node types that are allowed to be added to books.        $allowed_types = variable_get('book_allowed_types', array('book'));        $key = array_search($type->old_type, $allowed_types);        if ($key !== FALSE) {          $allowed_types[$type->type] = $allowed_types[$key] ? $type->type : 0;          unset($allowed_types[$key]);          variable_set('book_allowed_types', $allowed_types);        }        // Update the setting for the "Add child page" link.        if (variable_get('book_child_type', 'book') == $type->old_type) {          variable_set('book_child_type', $type->type);        }      }      break;  }}/** * Implementation of hook_help(). */function book_help($path, $arg) {  switch ($path) {    case 'admin/help#book':      $output = '<p>'. t('The book module is suited for creating structured, multi-page hypertexts such as site resource guides, manuals, and Frequently Asked Questions (FAQs). It permits a document to have chapters, sections, subsections, etc. Authors with suitable permissions can add pages to a collaborative book, placing them into the existing document by adding them to a table of contents menu.') .'</p>';      $output .= '<p>'. t('Pages in the book hierarchy have navigation elements at the bottom of the page for moving through the text. These links lead to the previous and next pages in the book, and to the level above the current page in the book\'s structure. More comprehensive navigation may be provided by enabling the <em>book navigation block</em> on the <a href="@admin-block">blocks administration page</a>.', array('@admin-block' => url('admin/build/block'))) .'</p>';      $output .= '<p>'. t('Users can select the <em>printer-friendly version</em> link visible at the bottom of a book page to generate a printer-friendly display of the page and all of its subsections. ') .'</p>';      $output .= '<p>'. t("Users with the <em>administer book outlines</em> permission can add a post of any content type to a book, by selecting the appropriate book while editing the post or by using the interface available on the post's <em>outline</em> tab.") .'</p>';      $output .= '<p>'. t('Administrators can view a list of all books on the <a href="@admin-node-book">book administration page</a>. The <em>Outline</em> page for each book allows section titles to be edited or rearranged.', array('@admin-node-book' => url('admin/content/book'))) .'</p>';      $output .= '<p>'. t('For more information, see the online handbook entry for <a href="@book">Book module</a>.', array('@book' => 'http://drupal.org/handbook/modules/book/')) .'</p>';      return $output;    case 'admin/content/book':      return '<p>'. t('The book module offers a means to organize a collection of related posts, collectively known as a book. When viewed, these posts automatically display links to adjacent book pages, providing a simple navigation system for creating and reviewing structured content.') .'</p>';    case 'node/%/outline':      return '<p>'. t('The outline feature allows you to include posts in the <a href="@book">book hierarchy</a>, as well as move them within the hierarchy or to <a href="@book-admin">reorder an entire book</a>.', array('@book' => url('book'), '@book-admin' => url('admin/content/book'))) .'</p>';  }}/** * Like menu_link_load(), but adds additional data from the {book} table. * * Do not call when loading a node, since this function may call node_load(). */function book_link_load($mlid) {  if ($item = db_fetch_array(db_query("SELECT * FROM {menu_links} ml INNER JOIN {book} b ON b.mlid = ml.mlid LEFT JOIN {menu_router} m ON m.path = ml.router_path WHERE ml.mlid = %d", $mlid))) {    _menu_link_translate($item);    return $item;  }  return FALSE;}/** * Get the data representing a subtree of the book hierarchy. * * The root of the subtree will be the link passed as a parameter, so the * returned tree will contain this item and all its descendents in the menu tree. * * @param $item *   A fully loaded menu link. * @return *   An subtree of menu links in an array, in the order they should be rendered. */function book_menu_subtree_data($item) {  static $tree = array();  // Generate a cache ID (cid) specific for this $menu_name and $item.  $cid = 'links:'. $item['menu_name'] .':subtree-cid:'. $item['mlid'];  if (!isset($tree[$cid])) {    $cache = cache_get($cid, 'cache_menu');    if ($cache && isset($cache->data)) {      // If the cache entry exists, it will just be the cid for the actual data.      // This avoids duplication of large amounts of data.      $cache = cache_get($cache->data, 'cache_menu');      if ($cache && isset($cache->data)) {        $data = $cache->data;      }    }    // If the subtree data was not in the cache, $data will be NULL.    if (!isset($data)) {      $match = array("menu_name = '%s'");      $args = array($item['menu_name']);      $i = 1;      while ($i <= MENU_MAX_DEPTH && $item["p$i"]) {        $match[] = "p$i = %d";        $args[] = $item["p$i"];        $i++;      }      $sql = "        SELECT b.*, m.load_functions, m.to_arg_functions, m.access_callback, m.access_arguments, m.page_callback, m.page_arguments, m.title, m.title_callback, m.title_arguments, m.type, ml.*        FROM {menu_links} ml INNER JOIN {menu_router} m ON m.path = ml.router_path        INNER JOIN {book} b ON ml.mlid = b.mlid        WHERE ". implode(' AND ', $match) ."        ORDER BY p1 ASC, p2 ASC, p3 ASC, p4 ASC, p5 ASC, p6 ASC, p7 ASC, p8 ASC, p9 ASC";      $data['tree'] = menu_tree_data(db_query($sql, $args), array(), $item['depth']);      $data['node_links'] = array();      menu_tree_collect_node_links($data['tree'], $data['node_links']);      // Compute the real cid for book subtree data.      $tree_cid = 'links:'. $item['menu_name'] .':subtree-data:'. md5(serialize($data));      // Cache the data, if it is not already in the cache.      if (!cache_get($tree_cid, 'cache_menu')) {        cache_set($tree_cid, $data, 'cache_menu');      }      // Cache the cid of the (shared) data using the menu and item-specific cid.      cache_set($cid, $tree_cid, 'cache_menu');    }    // Check access for the current user to each item in the tree.    menu_tree_check_access($data['tree'], $data['node_links']);    $tree[$cid] = $data['tree'];  }  return $tree[$cid];}
<?php// $Id$/** * @file comment.tpl.php * Default theme implementation for comments. * * Available variables: * - $author: Comment author. Can be link or plain text. * - $content: Body of the post. * - $date: Date and time of posting. * - $links: Various operational links. * - $new: New comment marker. * - $picture: Authors picture. * - $signature: Authors signature. * - $status: Comment status. Possible values are: *   comment-unpublished, comment-published or comment-preview. * - $submitted: By line with date and time. * - $title: Linked title. * * These two variables are provided for context. * - $comment: Full comment object. * - $node: Node object the comments are attached to. * * @see template_preprocess_comment() * @see theme_comment() */?><div class="comment<?php print ($comment->new) ? ' comment-new' : ''; print ' '. $status ?> clear-block">  <?php print $picture ?>  <?php if ($comment->new): ?>    <span class="new"><?php print $new ?></span>  <?php endif; ?>  <h3><?php print $title ?></h3>  <div class="submitted">    <?php print $submitted ?>  </div>  <div class="content">    <?php print $content ?>    <?php if ($signature): ?>    <div class="user-signature clear-block">      <?php print $signature ?>    </div>    <?php endif; ?>  </div>  <?php print $links ?></div>
<?php// $Id$/** * @file * Enable users to post using applications that support XML-RPC blog APIs. *//** * Implementation of hook_help(). */function blogapi_help($path, $arg) {  switch ($path) {    case 'admin/help#blogapi':      $output = '<p>'. t("The Blog API module allows your site's users to access and post to their blogs from external blogging clients. External blogging clients are available for a wide range of desktop operating systems, and generally provide a feature-rich graphical environment for creating and editing posts.") .'</p>';      $output .= '<p>'. t('<a href="@ecto-link">Ecto</a>, a blogging client available for both Mac OS X and Microsoft Windows, can be used with Blog API. Blog API also supports <a href="@blogger-api">Blogger API</a>, <a href="@metaweblog-api">MetaWeblog API</a>, and most of the <a href="@movabletype-api">Movable Type API</a>. Blogging clients and other services (e.g. <a href="@flickr">Flickr\'s</a> "post to blog") that support these APIs may also be compatible.', array('@ecto-link' => url('http://infinite-sushi.com/software/ecto/'), '@blogger-api' => url('http://www.blogger.com/developers/api/1_docs/'), '@metaweblog-api' => url('http://www.xmlrpc.com/metaWeblogApi'), '@movabletype-api' => url('http://www.movabletype.org/docs/mtmanual_programmatic.html'), '@flickr' => url('http://www.flickr.com'))) .'</p>';      $output .= '<p>'. t('Select the content types available to external clients on the <a href="@blogapi-settings">Blog API settings page</a>. If supported and available, each content type will be displayed as a separate "blog" by the external client.', array('@blogapi-settings' => url('admin/settings/blogapi'))) .'</p>';      $output .= '<p>'. t('For more information, see the online handbook entry for <a href="@blogapi">Blog API module</a>.', array('@blogapi' => url('http://drupal.org/handbook/modules/blogapi/'))) .'</p>';      return $output;  }}/** * Implementation of hook_perm(). */function blogapi_perm() {  return array('administer content with blog api');}/** * Implementation of hook_xmlrpc(). */function blogapi_xmlrpc() {  return array(    array(      'blogger.getUsersBlogs',      'blogapi_blogger_get_users_blogs',      array('array', 'string', 'string', 'string'),      t('Returns a list of blogs to which an author has posting privileges.')),    array(      'blogger.getUserInfo',      'blogapi_blogger_get_user_info',      array('struct', 'string', 'string', 'string'),      t('Returns information about an author in the system.')),    array(      'blogger.newPost',      'blogapi_blogger_new_post',      array('string', 'string', 'string', 'string', 'string', 'string', 'boolean'),      t('Creates a new post, and optionally publishes it.')),    array(      'blogger.editPost',      'blogapi_blogger_edit_post',      array('boolean', 'string', 'string', 'string', 'string', 'string', 'boolean'),      t('Updates the information about an existing post.')),    array(      'blogger.getPost',      'blogapi_blogger_get_post',      array('struct', 'string', 'string', 'string', 'string'),      t('Returns information about a specific post.')),    array(      'blogger.deletePost',      'blogapi_blogger_delete_post',      array('boolean', 'string', 'string', 'string', 'string', 'boolean'),      t('Deletes a post.')),    array(      'blogger.getRecentPosts',      'blogapi_blogger_get_recent_posts',      array('array', 'string', 'string', 'string', 'string', 'int'),      t('Returns a list of the most recent posts in the system.')),    array(      'metaWeblog.newPost',      'blogapi_metaweblog_new_post',      array('string', 'string', 'string', 'string', 'struct', 'boolean'),      t('Creates a new post, and optionally publishes it.')),    array(      'metaWeblog.editPost',      'blogapi_metaweblog_edit_post',      array('boolean', 'string', 'string', 'string', 'struct', 'boolean'),      t('Updates information about an existing post.')),    array(      'metaWeblog.getPost',      'blogapi_metaweblog_get_post',      array('struct', 'string', 'string', 'string'),      t('Returns information about a specific post.')),    array(      'metaWeblog.newMediaObject',      'blogapi_metaweblog_new_media_object',      array('string', 'string', 'string', 'string', 'struct'),      t('Uploads a file to your webserver.')),    array(      'metaWeblog.getCategories',      'blogapi_metaweblog_get_category_list',      array('struct', 'string', 'string', 'string'),      t('Returns a list of all categories to which the post is assigned.')),    array(      'metaWeblog.getRecentPosts',      'blogapi_metaweblog_get_recent_posts',      array('array', 'string', 'string', 'string', 'int'),      t('Returns a list of the most recent posts in the system.')),    array(      'mt.getRecentPostTitles',      'blogapi_mt_get_recent_post_titles',      array('array', 'string', 'string', 'string', 'int'),      t('Returns a bandwidth-friendly list of the most recent posts in the system.')),    array(      'mt.getCategoryList',      'blogapi_mt_get_category_list',      array('array', 'string', 'string', 'string'),      t('Returns a list of all categories defined in the blog.')),    array(      'mt.getPostCategories',      'blogapi_mt_get_post_categories',      array('array', 'string', 'string', 'string'),      t('Returns a list of all categories to which the post is assigned.')),    array(      'mt.setPostCategories',      'blogapi_mt_set_post_categories',      array('boolean', 'string', 'string', 'string', 'array'),      t('Sets the categories for a post.')),    array(      'mt.supportedMethods',      'xmlrpc_server_list_methods',      array('array'),      t('Retrieve information about the XML-RPC methods supported by the server.')),    array(      'mt.supportedTextFilters',      'blogapi_mt_supported_text_filters',      array('array'),      t('Retrieve information about the text formatting plugins supported by the server.')),    array(      'mt.publishPost',      'blogapi_mt_publish_post',      array('boolean', 'string', 'string', 'string'),      t('Publish (rebuild) all of the static files related to an entry from your blog. Equivalent to saving an entry in the system (but without the ping).')));}/** * Blogging API callback. Finds the URL of a user's blog. */function blogapi_blogger_get_users_blogs($appid, $username, $password) {  $user = blogapi_validate_user($username, $password);  if ($user->uid) {    $types = _blogapi_get_node_types();    $structs = array();    foreach ($types as $type) {      $structs[] = array('url' => url('blog/'. $user->uid, array('absolute' => TRUE)), 'blogid' => $type, 'blogName' => $user->name .": ". $type);    }    return $structs;  }  else {    return blogapi_error($user);  }}/** * Blogging API callback. Returns profile information about a user. */function blogapi_blogger_get_user_info($appkey, $username, $password) {  $user = blogapi_validate_user($username, $password);  if ($user->uid) {    $name = explode(' ', $user->realname ? $user->realname : $user->name, 2);    return array(      'userid' => $user->uid,      'lastname' => $name[1],      'firstname' => $name[0],      'nickname' => $user->name,      'email' => $user->mail,      'url' => url('blog/'. $user->uid, array('absolute' => TRUE)));  }  else {    return blogapi_error($user);  }}/** * Blogging API callback. Inserts a new blog post as a node. */function blogapi_blogger_new_post($appkey, $blogid, $username, $password, $content, $publish) {  $user = blogapi_validate_user($username, $password);  if (!$user->uid) {    return blogapi_error($user);  }  if (($error = _blogapi_validate_blogid($blogid)) !== TRUE) {    // Return an error if not configured type.    return $error;  }  $edit = array();  $edit['type'] = $blogid;  // get the node type defaults  $node_type_default = variable_get('node_options_'. $edit['type'], array('status', 'promote'));  $edit['uid'] = $user->uid;  $edit['name'] = $user->name;  $edit['promote'] = in_array('promote', $node_type_default);  $edit['comment'] = variable_get('comment_'. $edit['type'], 2);  $edit['revision'] = in_array('revision', $node_type_default);  $edit['format'] = FILTER_FORMAT_DEFAULT;  $edit['status'] = $publish;  // check for bloggerAPI vs. metaWeblogAPI  if (is_array($content)) {    $edit['title'] = $content['title'];    $edit['body'] = $content['description'];    _blogapi_mt_extra($edit, $content);  }  else {    $edit['title'] = blogapi_blogger_title($content);    $edit['body'] = $content;  }  if (!node_access('create', $edit['type'])) {    return blogapi_error(t('You do not have permission to create this type of post.'));  }  if (user_access('administer nodes') && !isset($edit['date'])) {    $edit['date'] = format_date(time(), 'custom', 'Y-m-d H:i:s O');  }  node_invoke_nodeapi($edit, 'blogapi new');  $valid = blogapi_status_error_check($edit, $publish);  if ($valid !== TRUE) {    return $valid;  }  node_validate($edit);  if ($errors = form_get_errors()) {    return blogapi_error(implode("\n", $errors));  }  $node = node_submit($edit);  node_save($node);  if ($node->nid) {    watchdog('content', '@type: added %title using blog API.', array('@type' => $node->type, '%title' => $node->title), WATCHDOG_NOTICE, l(t('view'), "node/$node->nid"));    // blogger.newPost returns a string so we cast the nid to a string by putting it in double quotes:    return "$node->nid";  }  return blogapi_error(t('Error storing post.'));}/** * Blogging API callback. Modifies the specified blog node. */function blogapi_blogger_edit_post($appkey, $postid, $username, $password, $content, $publish) {  $user = blogapi_validate_user($username, $password);  if (!$user->uid) {    return blogapi_error($user);  }  $node = node_load($postid);  if (!$node) {    return blogapi_error(t('n/a'));  }  // Let the teaser be re-generated.  unset($node->teaser);  if (!node_access('update', $node)) {    return blogapi_error(t('You do not have permission to update this post.'));  }  // Save the original status for validation of permissions.  $original_status = $node->status;  $node->status = $publish;  // check for bloggerAPI vs. metaWeblogAPI  if (is_array($content)) {    $node->title = $content['title'];    $node->body = $content['description'];    _blogapi_mt_extra($node, $content);  }  else {    $node->title = blogapi_blogger_title($content);    $node->body = $content;  }  node_invoke_nodeapi($node, 'blogapi edit');  $valid = blogapi_status_error_check($node, $original_status);  if ($valid !== TRUE) {    return $valid;  }  node_validate($node);  if ($errors = form_get_errors()) {    return blogapi_error(implode("\n", $errors));  }  if (user_access('administer nodes') && !isset($edit['date'])) {    $node->date = format_date($node->created, 'custom', 'Y-m-d H:i:s O');  }  $node = node_submit($node);  node_save($node);  if ($node->nid) {    watchdog('content', '@type: updated %title using Blog API.', array('@type' => $node->type, '%title' => $node->title), WATCHDOG_NOTICE, l(t('view'), "node/$node->nid"));    return TRUE;  }  return blogapi_error(t('Error storing post.'));}/** * Blogging API callback. Returns a specified blog node. */function blogapi_blogger_get_post($appkey, $postid, $username, $password) {  $user = blogapi_validate_user($username, $password);  if (!$user->uid) {    return blogapi_error($user);  }  $node = node_load($postid);  return _blogapi_get_post($node, TRUE);}/** * Check that the user has permission to save the node with the chosen status. * * @return *   TRUE if no error, or the blogapi_error(). */function blogapi_status_error_check($node, $original_status) {    $node = (object) $node;  $node_type_default = variable_get('node_options_'. $node->type, array('status', 'promote'));  // If we don't have the 'administer nodes' permission and the status is  // changing or for a new node the status is not the content type's default,  // then return an error.  if (!user_access('administer nodes') && (($node->status != $original_status) || (empty($node->nid) && $node->status != in_array('status', $node_type_default)))) {    if ($node->status) {      return blogapi_error(t('You do not have permission to publish this type of post. Please save it as a draft instead.'));    }    else {      return blogapi_error(t('You do not have permission to save this post as a draft. Please publish it instead.'));    }  }  return TRUE;}/** * Blogging API callback. Removes the specified blog node. */function blogapi_blogger_delete_post($appkey, $postid, $username, $password, $publish) {  $user = blogapi_validate_user($username, $password);  if (!$user->uid) {    return blogapi_error($user);  }  node_delete($postid);  return TRUE;}/** * Blogging API callback. Returns the latest few postings in a user's blog. $bodies TRUE * <a href="http://movabletype.org/docs/mtmanual_programmatic.html#item_mt%2EgetRecentPostTitles"> * returns a bandwidth-friendly list</a>. */function blogapi_blogger_get_recent_posts($appkey, $blogid, $username, $password, $number_of_posts, $bodies = TRUE) {  // Remove unused appkey (from bloggerAPI).  $user = blogapi_validate_user($username, $password);  if (!$user->uid) {    return blogapi_error($user);  }  if (($error = _blogapi_validate_blogid($blogid)) !== TRUE) {    // Return an error if not configured type.    return $error;  }  if ($bodies) {    $result = db_query_range("SELECT n.nid, n.title, r.body, r.format, n.comment, n.created, u.name FROM {node} n, {node_revisions} r, {users} u WHERE n.uid = u.uid AND n.vid = r.vid AND n.type = '%s' AND n.uid = %d ORDER BY n.created DESC",  $blogid, $user->uid, 0, $number_of_posts);  }  else {    $result = db_query_range("SELECT n.nid, n.title, n.created, u.name FROM {node} n, {users} u WHERE n.uid = u.uid AND n.type = '%s' AND n.uid = %d ORDER BY n.created DESC", $blogid, $user->uid, 0, $number_of_posts);  }  $blogs = array();  while ($blog = db_fetch_object($result)) {    $blogs[] = _blogapi_get_post($blog, $bodies);  }  return $blogs;}function blogapi_metaweblog_new_post($blogid, $username, $password, $content, $publish) {  return blogapi_blogger_new_post('0123456789ABCDEF', $blogid, $username, $password, $content, $publish);}function blogapi_metaweblog_edit_post($postid, $username, $password, $content, $publish) {  return blogapi_blogger_edit_post('0123456789ABCDEF', $postid, $username, $password, $content, $publish);}function blogapi_metaweblog_get_post($postid, $username, $password) {  return blogapi_blogger_get_post('01234567890ABCDEF', $postid, $username, $password);}/** * Blogging API callback. Inserts a file into Drupal. */function blogapi_metaweblog_new_media_object($blogid, $username, $password, $file) {  $user = blogapi_validate_user($username, $password);  if (!$user->uid) {    return blogapi_error($user);  }  $usersize = 0;  $uploadsize = 0;  $roles = array_intersect(user_roles(FALSE, 'administer content with blog api'), $user->roles);  foreach ($roles as $rid => $name) {    $extensions .= ' '. strtolower(variable_get("blogapi_extensions_$rid", variable_get('blogapi_extensions_default', 'jpg jpeg gif png txt doc xls pdf ppt pps odt ods odp')));    $usersize= max($usersize, variable_get("blogapi_usersize_$rid", variable_get('blogapi_usersize_default', 1)) * 1024 * 1024);    $uploadsize = max($uploadsize, variable_get("blogapi_uploadsize_$rid", variable_get('blogapi_uploadsize_default', 1)) * 1024 * 1024);  }  $filesize = strlen($file['bits']);  if ($filesize > $uploadsize) {    return blogapi_error(t('It is not possible to upload the file, because it exceeded the maximum filesize of @maxsize.', array('@maxsize' => format_size($uploadsize))));  }  if (_blogapi_space_used($user->uid) + $filesize > $usersize) {    return blogapi_error(t('The file can not be attached to this post, because the disk quota of @quota has been reached.', array('@quota' => format_size($usersize))));  }  // Only allow files with whitelisted extensions and convert remaining dots to  // underscores to prevent attacks via non-terminal executable extensions with  // files such as exploit.php.jpg.  $whitelist = array_unique(explode(' ', trim($extensions)));  $name = basename($file['name']);  if ($extension_position = strrpos($name, '.')) {    $filename = drupal_substr($name, 0, $extension_position);    $final_extension = drupal_substr($name, $extension_position + 1);    if (!in_array(strtolower($final_extension), $whitelist)) {      return blogapi_error(t('It is not possible to upload the file, because it is only possible to upload files with the following extensions: @extensions', array('@extensions' => implode(' ', $whitelist))));    }    $filename = str_replace('.', '_', $filename);    $filename .= '.'. $final_extension;  }  $data = $file['bits'];  if (!$data) {    return blogapi_error(t('No file sent.'));  }  if (!$file = file_save_data($data, $filename)) {    return blogapi_error(t('Error storing file.'));  }  $row = new stdClass();  $row->uid = $user->uid;  $row->filepath = $file;  $row->filesize = $filesize;  drupal_write_record('blogapi_files', $row);  // Return the successful result.  return array('url' => file_create_url($file), 'struct');}/** * Blogging API callback. Returns a list of the taxonomy terms that can be * associated with a blog node. */function blogapi_metaweblog_get_category_list($blogid, $username, $password) {  $user = blogapi_validate_user($username, $password);  if (!$user->uid) {    return blogapi_error($user);  }  if (($error = _blogapi_validate_blogid($blogid)) !== TRUE) {    // Return an error if not configured type.    return $error;  }  $vocabularies = module_invoke('taxonomy', 'get_vocabularies', $blogid, 'vid');  $categories = array();  if ($vocabularies) {    foreach ($vocabularies as $vocabulary) {      $terms = module_invoke('taxonomy', 'get_tree', $vocabulary->vid, 0, -1);      foreach ($terms as $term) {        $term_name = $term->name;        foreach (module_invoke('taxonomy', 'get_parents', $term->tid, 'tid') as $parent) {          $term_name = $parent->name .'/'. $term_name;        }        $categories[] = array('categoryName' => $term_name, 'categoryId' => $term->tid);      }    }  }  return $categories;}function blogapi_metaweblog_get_recent_posts($blogid, $username, $password, $number_of_posts) {  return blogapi_blogger_get_recent_posts('0123456789ABCDEF', $blogid, $username, $password, $number_of_posts, TRUE);}function blogapi_mt_get_recent_post_titles($blogid, $username, $password, $number_of_posts) {  return blogapi_blogger_get_recent_posts('0123456789ABCDEF', $blogid, $username, $password, $number_of_posts, FALSE);}function blogapi_mt_get_category_list($blogid, $username, $password) {  return blogapi_metaweblog_get_category_list($blogid, $username, $password);}/** * Blogging API callback. Returns a list of the taxonomy terms that are * assigned to a particular node. */function blogapi_mt_get_post_categories($postid, $username, $password) {  $user = blogapi_validate_user($username, $password);  if (!$user->uid) {    return blogapi_error($user);  }  $node = node_load($postid);  $terms = module_invoke('taxonomy', 'node_get_terms', $node, 'tid');  $categories = array();  foreach ($terms as $term) {    $term_name = $term->name;    foreach (module_invoke('taxonomy', 'get_parents', $term->tid, 'tid') as $parent) {      $term_name = $parent->name .'/'. $term_name;    }    $categories[] = array('categoryName' => $term_name, 'categoryId' => $term->tid, 'isPrimary' => TRUE);  }  return $categories;}/** * Blogging API callback. Assigns taxonomy terms to a particular node. */function blogapi_mt_set_post_categories($postid, $username, $password, $categories) {  $user = blogapi_validate_user($username, $password);  if (!$user->uid) {    return blogapi_error($user);  }  $node = node_load($postid);  $node->taxonomy = array();  foreach ($categories as $category) {    $node->taxonomy[] = $category['categoryId'];  }  $validated = blogapi_mt_validate_terms($node);  if ($validated !== TRUE) {    return $validated;  }  node_save($node);  return TRUE;}/** * Blogging API helper - find allowed taxonomy terms for a node type. */function blogapi_mt_validate_terms($node) {  // We do a lot of heavy lifting here since taxonomy module doesn't have a  // stand-alone validation function.  if (module_exists('taxonomy')) {    $found_terms = array();    if (!empty($node->taxonomy)) {      $term_list = array_unique($node->taxonomy);      $params = $term_list;      $params[] = $node->type;      $result = db_query(db_rewrite_sql("SELECT t.tid, t.vid FROM {term_data} t INNER JOIN {vocabulary_node_types} n ON t.vid = n.vid WHERE t.tid IN (". db_placeholders($term_list) .") AND n.type = '%s'", 't', 'tid'), $params);      $found_terms = array();      $found_count = 0;      while ($term = db_fetch_object($result)) {        $found_terms[$term->vid][$term->tid] = $term->tid;        $found_count++;      }      // If the counts don't match, some terms are invalid or not accessible to this user.      if (count($term_list) != $found_count) {        return blogapi_error(t('Invalid categories submitted.'));      }    }    // Look up all the vocabularies for this node type.    $result2 = db_query(db_rewrite_sql("SELECT v.vid, v.name, v.required, v.multiple FROM {vocabulary} v INNER JOIN {vocabulary_node_types} n ON v.vid = n.vid WHERE n.type = '%s'", 'v', 'vid'), $node->type);    // Check each vocabulary associated with this node type.    while ($vocabulary = db_fetch_object($result2)) {      // Required vocabularies must have at least one term.      if ($vocabulary->required && empty($found_terms[$vocabulary->vid])) {        return blogapi_error(t('A category from the @vocabulary_name vocabulary is required.', array('@vocabulary_name' => $vocabulary->name)));      }      // Vocabularies that don't allow multiple terms may have at most one.      if (!($vocabulary->multiple) && (isset($found_terms[$vocabulary->vid]) && count($found_terms[$vocabulary->vid]) > 1)) {        return blogapi_error(t('You may only choose one category from the @vocabulary_name vocabulary.'), array('@vocabulary_name' => $vocabulary->name));      }    }  }  elseif (!empty($node->taxonomy)) {    return blogapi_error(t('Error saving categories. This feature is not available.'));  }  return TRUE;}/** * Blogging API callback. Sends a list of available input formats. */function blogapi_mt_supported_text_filters() {  // NOTE: we're only using anonymous' formats because the MT spec  // does not allow for per-user formats.  $formats = filter_formats();  $filters = array();  foreach ($formats as $format) {    $filter['key'] = $format->format;    $filter['label'] = $format->name;    $filters[] = $filter;  }  return $filters;}/** * Blogging API callback. Publishes the given node */function blogapi_mt_publish_post($postid, $username, $password) {  $user = blogapi_validate_user($username, $password);  if (!$user->uid) {    return blogapi_error($user);  }  $node = node_load($postid);  if (!$node) {    return blogapi_error(t('Invalid post.'));  }  // Nothing needs to be done if already published.  if ($node->status) {    return;  }  if (!node_access('update', $node) || !user_access('administer nodes')) {    return blogapi_error(t('You do not have permission to update this post.'));  }  $node->status = 1;  node_save($node);  return TRUE;}/** * Prepare an error message for returning to the XMLRPC caller. */function blogapi_error($message) {  static $xmlrpcusererr;  if (!is_array($message)) {    $message = array($message);  }  $message = implode(' ', $message);  return xmlrpc_error($xmlrpcusererr + 1, strip_tags($message));}/** * Ensure that the given user has permission to edit a blog. */function blogapi_validate_user($username, $password) {  global $user;  $user = user_authenticate(array('name' => $username, 'pass' => $password));  if ($user->uid) {    if (user_access('administer content with blog api', $user)) {      return $user;    }    else {      return t('You do not have permission to edit this blog.');    }  }  else {    return t('Wrong username or password.');  }}/** * For the blogger API, extract the node title from the contents field. */function blogapi_blogger_title(&$contents) {  if (eregi('<title>([^<]*)</title>', $contents, $title)) {    $title = strip_tags($title[0]);    $contents = ereg_replace('<title>[^<]*</title>', '', $contents);  }  else {    list($title, $contents) = explode("\n", $contents, 2);  }  return $title;}function blogapi_admin_settings() {  $node_types = array_map('check_plain', node_get_types('names'));  $defaults = isset($node_types['blog']) ? array('blog' => 1) : array();  $form['blogapi_node_types'] = array(    '#type' => 'checkboxes',    '#title' => t('Enable for external blogging clients'),    '#required' => TRUE,    '#default_value' => variable_get('blogapi_node_types', $defaults),    '#options' => $node_types,    '#description' => t('Select the content types available to external blogging clients via Blog API. If supported, each enabled content type will be displayed as a separate "blog" by the external client.')  );  $blogapi_extensions_default = variable_get('blogapi_extensions_default', 'jpg jpeg gif png txt doc xls pdf ppt pps odt ods odp');  $blogapi_uploadsize_default = variable_get('blogapi_uploadsize_default', 1);  $blogapi_usersize_default = variable_get('blogapi_usersize_default', 1);  $form['settings_general'] = array(    '#type' => 'fieldset',    '#title' => t('File settings'),    '#collapsible' => TRUE,  );  $form['settings_general']['blogapi_extensions_default'] = array(    '#type' => 'textfield',    '#title' => t('Default permitted file extensions'),    '#default_value' => $blogapi_extensions_default,    '#maxlength' => 255,    '#description' => t('Default extensions that users can upload. Separate extensions with a space and do not include the leading dot.'),  );  $form['settings_general']['blogapi_uploadsize_default'] = array(    '#type' => 'textfield',    '#title' => t('Default maximum file size per upload'),    '#default_value' => $blogapi_uploadsize_default,    '#size' => 5,    '#maxlength' => 5,    '#description' => t('The default maximum file size a user can upload.'),    '#field_suffix' => t('MB')  );  $form['settings_general']['blogapi_usersize_default'] = array(    '#type' => 'textfield',    '#title' => t('Default total file size per user'),    '#default_value' => $blogapi_usersize_default,    '#size' => 5,    '#maxlength' => 5,    '#description' => t('The default maximum size of all files a user can have on the site.'),    '#field_suffix' => t('MB')  );  $form['settings_general']['upload_max_size'] = array('#value' => '<p>'. t('Your PHP settings limit the maximum file size per upload to %size.', array('%size' => format_size(file_upload_max_size()))).'</p>');  $roles = user_roles(0, 'administer content with blog api');  $form['roles'] = array('#type' => 'value', '#value' => $roles);  foreach ($roles as $rid => $role) {    $form['settings_role_'. $rid] = array(      '#type' => 'fieldset',      '#title' => t('Settings for @role', array('@role' => $role)),      '#collapsible' => TRUE,      '#collapsed' => TRUE,    );    $form['settings_role_'. $rid]['blogapi_extensions_'. $rid] = array(      '#type' => 'textfield',      '#title' => t('Permitted file extensions'),      '#default_value' => variable_get('blogapi_extensions_'. $rid, $blogapi_extensions_default),      '#maxlength' => 255,      '#description' => t('Extensions that users in this role can upload. Separate extensions with a space and do not include the leading dot.'),    );    $form['settings_role_'. $rid]['blogapi_uploadsize_'. $rid] = array(      '#type' => 'textfield',      '#title' => t('Maximum file size per upload'),      '#default_value' => variable_get('blogapi_uploadsize_'. $rid, $blogapi_uploadsize_default),      '#size' => 5,      '#maxlength' => 5,      '#description' => t('The maximum size of a file a user can upload (in megabytes).'),    );    $form['settings_role_'. $rid]['blogapi_usersize_'. $rid] = array(      '#type' => 'textfield',      '#title' => t('Total file size per user'),      '#default_value' => variable_get('blogapi_usersize_'. $rid, $blogapi_usersize_default),      '#size' => 5,      '#maxlength' => 5,      '#description' => t('The maximum size of all files a user can have on the site (in megabytes).'),    );  }  return system_settings_form($form);}function blogapi_menu() {  $items['blogapi/rsd'] = array(    'title' => 'RSD',    'page callback' => 'blogapi_rsd',    'access arguments' => array('access content'),    'type' => MENU_CALLBACK,  );  $items['admin/settings/blogapi'] = array(    'title' => 'Blog API',    'description' => 'Configure the content types available to external blogging clients.',    'page callback' => 'drupal_get_form',    'page arguments' => array('blogapi_admin_settings'),    'access arguments' => array('administer site configuration'),    'type' => MENU_NORMAL_ITEM,  );  return $items;}function blogapi_init() {  if (drupal_is_front_page()) {    drupal_add_link(array('rel' => 'EditURI',                          'type' => 'application/rsd+xml',                          'title' => t('RSD'),                          'href' => url('blogapi/rsd', array('absolute' => TRUE))));  }}function blogapi_rsd() {  global $base_url;  $xmlrpc = $base_url .'/xmlrpc.php';  $base = url('', array('absolute' => TRUE));  $blogid = 1; # until we figure out how to handle multiple bloggers  drupal_set_header('Content-Type: application/rsd+xml; charset=utf-8');  print <<<__RSD__<?xml version="1.0"?><rsd version="1.0" xmlns="http://archipelago.phrasewise.com/rsd">  <service>    <engineName>Drupal</engineName>    <engineLink>http://drupal.org/</engineLink>    <homePageLink>$base</homePageLink>    <apis>      <api name="MetaWeblog" preferred="false" apiLink="$xmlrpc" blogID="$blogid" />      <api name="Blogger" preferred="false" apiLink="$xmlrpc" blogID="$blogid" />      <api name="MovableType" preferred="true" apiLink="$xmlrpc" blogID="$blogid" />    </apis>  </service></rsd>__RSD__;}/** * Handles extra information sent by clients according to MovableType's spec. */function _blogapi_mt_extra(&$node, $struct) {  if (is_array($node)) {    $was_array = TRUE;    $node = (object)$node;  }  // mt_allow_comments  if (array_key_exists('mt_allow_comments', $struct)) {    switch ($struct['mt_allow_comments']) {      case 0:        $node->comment = COMMENT_NODE_DISABLED;        break;      case 1:        $node->comment = COMMENT_NODE_READ_WRITE;        break;      case 2:        $node->comment = COMMENT_NODE_READ_ONLY;        break;    }  }  // merge the 3 body sections (description, mt_excerpt, mt_text_more) into  // one body  if ($struct['mt_excerpt']) {    $node->body = $struct['mt_excerpt'] .'<!--break-->'. $node->body;  }  if ($struct['mt_text_more']) {    $node->body = $node->body .'<!--extended-->'. $struct['mt_text_more'];  }  // mt_convert_breaks  if ($struct['mt_convert_breaks']) {    $node->format = $struct['mt_convert_breaks'];  }  // dateCreated  if ($struct['dateCreated']) {    $node->date = format_date(mktime($struct['dateCreated']->hour, $struct['dateCreated']->minute, $struct['dateCreated']->second, $struct['dateCreated']->month, $struct['dateCreated']->day, $struct['dateCreated']->year), 'custom', 'Y-m-d H:i:s O');  }  if ($was_array) {    $node = (array)$node;  }}function _blogapi_get_post($node, $bodies = TRUE) {  $xmlrpcval = array(    'userid' => $node->name,    'dateCreated' => xmlrpc_date($node->created),    'title' => $node->title,    'postid' => $node->nid,    'link' => url('node/'. $node->nid, array('absolute' => TRUE)),    'permaLink' => url('node/'. $node->nid, array('absolute' => TRUE)),  );  if ($bodies) {    if ($node->comment == 1) {      $comment = 2;    }    else if ($node->comment == 2) {      $comment = 1;    }    $xmlrpcval['content'] = "<title>$node->title</title>$node->body";    $xmlrpcval['description'] = $node->body;    // Add MT specific fields    $xmlrpcval['mt_allow_comments'] = (int) $comment;    $xmlrpcval['mt_convert_breaks'] = $node->format;  }  return $xmlrpcval;}/** * Validate blog ID, which maps to a content type in Drupal. * * Only content types configured to work with Blog API are supported. * * @return *   TRUE if the content type is supported and the user has permission *   to post, or a blogapi_error() XML construct otherwise. */function _blogapi_validate_blogid($blogid) {  $types = _blogapi_get_node_types();  if (in_array($blogid, $types, TRUE)) {    return TRUE;  }  return blogapi_error(t("Blog API module is not configured to support the %type content type, or you don't have sufficient permissions to post this type of content.", array('%type' => $blogid)));}function _blogapi_get_node_types() {  $available_types = array_keys(array_filter(variable_get('blogapi_node_types', array('blog' => 1))));  $types = array();  foreach (node_get_types() as $type => $name) {    if (node_access('create', $type) && in_array($type, $available_types)) {      $types[] = $type;    }  }  return $types;}function _blogapi_space_used($uid) {  return db_result(db_query('SELECT SUM(filesize) FROM {blogapi_files} f WHERE f.uid = %d', $uid));}
<?php// $Id$/** * @file * Functions that need to be loaded on every Drupal request. *//** * Indicates that the item should never be removed unless explicitly told to * using cache_clear_all() with a cache ID. */define('CACHE_PERMANENT', 0);/** * Indicates that the item should be removed at the next general cache wipe. */define('CACHE_TEMPORARY', -1);/** * Indicates that page caching is disabled. */define('CACHE_DISABLED', 0);/** * Indicates that page caching is enabled, using "normal" mode. */define('CACHE_NORMAL', 1);/** * Indicates that page caching is using "aggressive" mode. This bypasses * loading any modules for additional speed, which may break functionality in * modules that expect to be run on each page load. */define('CACHE_AGGRESSIVE', 2);/** * * Severity levels, as defined in RFC 3164 http://www.faqs.org/rfcs/rfc3164.html * @see watchdog() * @see watchdog_severity_levels() */define('WATCHDOG_EMERG',    0); // Emergency: system is unusabledefine('WATCHDOG_ALERT',    1); // Alert: action must be taken immediatelydefine('WATCHDOG_CRITICAL', 2); // Critical: critical conditionsdefine('WATCHDOG_ERROR',    3); // Error: error conditionsdefine('WATCHDOG_WARNING',  4); // Warning: warning conditionsdefine('WATCHDOG_NOTICE',   5); // Notice: normal but significant conditiondefine('WATCHDOG_INFO',     6); // Informational: informational messagesdefine('WATCHDOG_DEBUG',    7); // Debug: debug-level messages/** * First bootstrap phase: initialize configuration. */define('DRUPAL_BOOTSTRAP_CONFIGURATION', 0);/** * Second bootstrap phase: try to call a non-database cache * fetch routine. */define('DRUPAL_BOOTSTRAP_EARLY_PAGE_CACHE', 1);/** * Third bootstrap phase: initialize database layer. */define('DRUPAL_BOOTSTRAP_DATABASE', 2);/** * Fourth bootstrap phase: identify and reject banned hosts. */define('DRUPAL_BOOTSTRAP_ACCESS', 3);/** * Fifth bootstrap phase: initialize session handling. */define('DRUPAL_BOOTSTRAP_SESSION', 4);/** * Sixth bootstrap phase: load bootstrap.inc and module.inc, start * the variable system and try to serve a page from the cache. */define('DRUPAL_BOOTSTRAP_LATE_PAGE_CACHE', 5);/** * Seventh bootstrap phase: find out language of the page. */define('DRUPAL_BOOTSTRAP_LANGUAGE', 6);/** * Eighth bootstrap phase: set $_GET['q'] to Drupal path of request. */define('DRUPAL_BOOTSTRAP_PATH', 7);/** * Final bootstrap phase: Drupal is fully loaded; validate and fix * input data. */define('DRUPAL_BOOTSTRAP_FULL', 8);/** * Role ID for anonymous users; should match what's in the "role" table. */define('DRUPAL_ANONYMOUS_RID', 1);/** * Role ID for authenticated users; should match what's in the "role" table. */define('DRUPAL_AUTHENTICATED_RID', 2);/** * No language negotiation. The default language is used. */define('LANGUAGE_NEGOTIATION_NONE', 0);/** * Path based negotiation with fallback to default language * if no defined path prefix identified. */define('LANGUAGE_NEGOTIATION_PATH_DEFAULT', 1);/** * Path based negotiation with fallback to user preferences * and browser language detection if no defined path prefix * identified. */define('LANGUAGE_NEGOTIATION_PATH', 2);/** * Domain based negotiation with fallback to default language * if no language identified by domain. */define('LANGUAGE_NEGOTIATION_DOMAIN', 3);/** * Language written left to right. Possible value of $language->direction. */define('LANGUAGE_LTR', 0);/** * Language written right to left. Possible value of $language->direction. */define('LANGUAGE_RTL', 1);/** * Start the timer with the specified name. If you start and stop * the same timer multiple times, the measured intervals will be * accumulated. * * @param name *   The name of the timer. */function timer_start($name) {  global $timers;  list($usec, $sec) = explode(' ', microtime());  $timers[$name]['start'] = (float)$usec + (float)$sec;  $timers[$name]['count'] = isset($timers[$name]['count']) ? ++$timers[$name]['count'] : 1;}/** * Read the current timer value without stopping the timer. * * @param name *   The name of the timer. * @return *   The current timer value in ms. */function timer_read($name) {  global $timers;  if (isset($timers[$name]['start'])) {    list($usec, $sec) = explode(' ', microtime());    $stop = (float)$usec + (float)$sec;    $diff = round(($stop - $timers[$name]['start']) * 1000, 2);    if (isset($timers[$name]['time'])) {      $diff += $timers[$name]['time'];    }    return $diff;  }}/** * Stop the timer with the specified name. * * @param name *   The name of the timer. * @return *   A timer array. The array contains the number of times the *   timer has been started and stopped (count) and the accumulated *   timer value in ms (time). */function timer_stop($name) {  global $timers;  $timers[$name]['time'] = timer_read($name);  unset($timers[$name]['start']);  return $timers[$name];}/** * Find the appropriate configuration directory. * * Try finding a matching configuration directory by stripping the website's * hostname from left to right and pathname from right to left. The first * configuration file found will be used; the remaining will ignored. If no * configuration file is found, return a default value '$confdir/default'. * * Example for a fictitious site installed at * http://www.drupal.org:8080/mysite/test/ the 'settings.php' is searched in * the following directories: * *  1. $confdir/8080.www.drupal.org.mysite.test *  2. $confdir/www.drupal.org.mysite.test *  3. $confdir/drupal.org.mysite.test *  4. $confdir/org.mysite.test * *  5. $confdir/8080.www.drupal.org.mysite *  6. $confdir/www.drupal.org.mysite *  7. $confdir/drupal.org.mysite *  8. $confdir/org.mysite * *  9. $confdir/8080.www.drupal.org * 10. $confdir/www.drupal.org * 11. $confdir/drupal.org * 12. $confdir/org * * 13. $confdir/default * * @param $require_settings *   Only configuration directories with an existing settings.php file *   will be recognized. Defaults to TRUE. During initial installation, *   this is set to FALSE so that Drupal can detect a matching directory, *   then create a new settings.php file in it. * @param reset *   Force a full search for matching directories even if one had been *   found previously. * @return *   The path of the matching directory. */function conf_path($require_settings = TRUE, $reset = FALSE) {  static $conf = '';  if ($conf && !$reset) {    return $conf;  }  $confdir = 'sites';  $uri = explode('/', $_SERVER['SCRIPT_NAME'] ? $_SERVER['SCRIPT_NAME'] : $_SERVER['SCRIPT_FILENAME']);  $server = explode('.', implode('.', array_reverse(explode(':', rtrim($_SERVER['HTTP_HOST'], '.')))));  for ($i = count($uri) - 1; $i > 0; $i--) {    for ($j = count($server); $j > 0; $j--) {      $dir = implode('.', array_slice($server, -$j)) . implode('.', array_slice($uri, 0, $i));      if (file_exists("$confdir/$dir/settings.php") || (!$require_settings && file_exists("$confdir/$dir"))) {        $conf = "$confdir/$dir";        return $conf;      }    }  }  $conf = "$confdir/default";  return $conf;}/** * Unsets all disallowed global variables. See $allowed for what's allowed. */function drupal_unset_globals() {  if (ini_get('register_globals')) {    $allowed = array('_ENV' => 1, '_GET' => 1, '_POST' => 1, '_COOKIE' => 1, '_FILES' => 1, '_SERVER' => 1, '_REQUEST' => 1, 'GLOBALS' => 1);    foreach ($GLOBALS as $key => $value) {      if (!isset($allowed[$key])) {        unset($GLOBALS[$key]);      }    }  }}/** * Validate that a hostname (for example $_SERVER['HTTP_HOST']) is safe. * * As $_SERVER['HTTP_HOST'] is user input, ensure it only contains characters * allowed in hostnames.  See RFC 952 (and RFC 2181). $_SERVER['HTTP_HOST'] is * lowercased. * * @return *  TRUE if only containing valid characters, or FALSE otherwise. */function drupal_valid_http_host($host) {  return preg_match('/^\[?(?:[a-z0-9-:\]_]+\.?)+$/', $host);}/** * Loads the configuration and sets the base URL, cookie domain, and * session name correctly. */function conf_init() {  global $base_url, $base_path, $base_root;  // Export the following settings.php variables to the global namespace  global $db_url, $db_prefix, $cookie_domain, $conf, $installed_profile, $update_free_access;  $conf = array();  if (isset($_SERVER['HTTP_HOST'])) {    // As HTTP_HOST is user input, ensure it only contains characters allowed    // in hostnames. See RFC 952 (and RFC 2181).    // $_SERVER['HTTP_HOST'] is lowercased here per specifications.    $_SERVER['HTTP_HOST'] = strtolower($_SERVER['HTTP_HOST']);    if (!drupal_valid_http_host($_SERVER['HTTP_HOST'])) {      // HTTP_HOST is invalid, e.g. if containing slashes it may be an attack.      header('HTTP/1.1 400 Bad Request');      exit;    }  }  else {    // Some pre-HTTP/1.1 clients will not send a Host header. Ensure the key is    // defined for E_ALL compliance.    $_SERVER['HTTP_HOST'] = '';  }  if (file_exists('./'. conf_path() .'/settings.php')) {    include_once './'. conf_path() .'/settings.php';  }  // Ignore the placeholder url from default.settings.php.  if (isset($db_url) && $db_url == 'mysql://username:password@localhost/databasename') {    $db_url = '';  }  if (isset($base_url)) {    // Parse fixed base URL from settings.php.    $parts = parse_url($base_url);    if (!isset($parts['path'])) {      $parts['path'] = '';    }    $base_path = $parts['path'] .'/';    // Build $base_root (everything until first slash after "scheme://").    $base_root = substr($base_url, 0, strlen($base_url) - strlen($parts['path']));  }  else {    // Create base URL    $base_root = (isset($_SERVER['HTTPS']) && $_SERVER['HTTPS'] == 'on') ? 'https' : 'http';    $base_url = $base_root .= '://'. $_SERVER['HTTP_HOST'];    // $_SERVER['SCRIPT_NAME'] can, in contrast to $_SERVER['PHP_SELF'], not    // be modified by a visitor.    if ($dir = trim(dirname($_SERVER['SCRIPT_NAME']), '\,/')) {      $base_path = "/$dir";      $base_url .= $base_path;      $base_path .= '/';    }    else {      $base_path = '/';    }  }  if ($cookie_domain) {    // If the user specifies the cookie domain, also use it for session name.    $session_name = $cookie_domain;  }  else {    // Otherwise use $base_url as session name, without the protocol    // to use the same session identifiers across http and https.    list( , $session_name) = explode('://', $base_url, 2);    // We escape the hostname because it can be modified by a visitor.    if (!empty($_SERVER['HTTP_HOST'])) {      $cookie_domain = check_plain($_SERVER['HTTP_HOST']);    }  }  // To prevent session cookies from being hijacked, a user can configure the  // SSL version of their website to only transfer session cookies via SSL by  // using PHP's session.cookie_secure setting. The browser will then use two  // separate session cookies for the HTTPS and HTTP versions of the site. So we  // must use different session identifiers for HTTPS and HTTP to prevent a  // cookie collision.  if (ini_get('session.cookie_secure')) {    $session_name .= 'SSL';  }  // Strip leading periods, www., and port numbers from cookie domain.  $cookie_domain = ltrim($cookie_domain, '.');  if (strpos($cookie_domain, 'www.') === 0) {    $cookie_domain = substr($cookie_domain, 4);  }  $cookie_domain = explode(':', $cookie_domain);  $cookie_domain = '.'. $cookie_domain[0];  // Per RFC 2109, cookie domains must contain at least one dot other than the  // first. For hosts such as 'localhost' or IP Addresses we don't set a cookie domain.  if (count(explode('.', $cookie_domain)) > 2 && !is_numeric(str_replace('.', '', $cookie_domain))) {    ini_set('session.cookie_domain', $cookie_domain);  }  session_name('SESS'. md5($session_name));}/** * Returns and optionally sets the filename for a system item (module, * theme, etc.). The filename, whether provided, cached, or retrieved * from the database, is only returned if the file exists. * * This function plays a key role in allowing Drupal's resources (modules * and themes) to be located in different places depending on a site's * configuration. For example, a module 'foo' may legally be be located * in any of these three places: * * modules/foo/foo.module * sites/all/modules/foo/foo.module * sites/example.com/modules/foo/foo.module * * Calling drupal_get_filename('module', 'foo') will give you one of * the above, depending on where the module is located. * * @param $type *   The type of the item (i.e. theme, theme_engine, module). * @param $name *   The name of the item for which the filename is requested. * @param $filename *   The filename of the item if it is to be set explicitly rather *   than by consulting the database. * * @return *   The filename of the requested item. */function drupal_get_filename($type, $name, $filename = NULL) {  static $files = array();  if (!isset($files[$type])) {    $files[$type] = array();  }  if (!empty($filename) && file_exists($filename)) {    $files[$type][$name] = $filename;  }  elseif (isset($files[$type][$name])) {    // nothing  }  // Verify that we have an active database connection, before querying  // the database.  This is required because this function is called both  // before we have a database connection (i.e. during installation) and  // when a database connection fails.  elseif (db_is_active() && (($file = db_result(db_query("SELECT filename FROM {system} WHERE name = '%s' AND type = '%s'", $name, $type))) && file_exists($file))) {    $files[$type][$name] = $file;  }  else {    // Fallback to searching the filesystem if the database connection is    // not established or the requested file is not found.    $config = conf_path();    $dir = (($type == 'theme_engine') ? 'themes/engines' : "${type}s");    $file = (($type == 'theme_engine') ? "$name.engine" : "$name.$type");    foreach (array("$config/$dir/$file", "$config/$dir/$name/$file", "$dir/$file", "$dir/$name/$file") as $file) {      if (file_exists($file)) {        $files[$type][$name] = $file;        break;      }    }  }  if (isset($files[$type][$name])) {    return $files[$type][$name];  }}/** * Load the persistent variable table. * * The variable table is composed of values that have been saved in the table * with variable_set() as well as those explicitly specified in the configuration * file. */function variable_init($conf = array()) {  // NOTE: caching the variables improves performance by 20% when serving cached pages.  if ($cached = cache_get('variables', 'cache')) {    $variables = $cached->data;  }  else {    $result = db_query('SELECT * FROM {variable}');    while ($variable = db_fetch_object($result)) {      $variables[$variable->name] = unserialize($variable->value);    }    cache_set('variables', $variables);  }  foreach ($conf as $name => $value) {    $variables[$name] = $value;  }  return $variables;}/** * Return a persistent variable. * * @param $name *   The name of the variable to return. * @param $default *   The default value to use if this variable has never been set. * @return *   The value of the variable. * * @see variable_del(), variable_set() */function variable_get($name, $default) {  global $conf;  return isset($conf[$name]) ? $conf[$name] : $default;}/** * Set a persistent variable. * * @param $name *   The name of the variable to set. * @param $value *   The value to set. This can be any PHP data type; these functions take care *   of serialization as necessary. * * @see variable_del(), variable_get() */function variable_set($name, $value) {  global $conf;  $serialized_value = serialize($value);  db_query("UPDATE {variable} SET value = '%s' WHERE name = '%s'", $serialized_value, $name);  if (!db_affected_rows()) {    @db_query("INSERT INTO {variable} (name, value) VALUES ('%s', '%s')", $name, $serialized_value);  }  cache_clear_all('variables', 'cache');  $conf[$name] = $value;}/** * Unset a persistent variable. * * @param $name *   The name of the variable to undefine. * * @see variable_get(), variable_set() */function variable_del($name) {  global $conf;  db_query("DELETE FROM {variable} WHERE name = '%s'", $name);  cache_clear_all('variables', 'cache');  unset($conf[$name]);}/** * Retrieve the current page from the cache. * * Note: we do not serve cached pages when status messages are waiting (from * a redirected form submission which was completed). * * @param $status_only *   When set to TRUE, retrieve the status of the page cache only *   (whether it was started in this request or not). */function page_get_cache($status_only = FALSE) {  static $status = FALSE;  global $user, $base_root;  if ($status_only) {    return $status;  }  $cache = NULL;  if (!$user->uid && $_SERVER['REQUEST_METHOD'] == 'GET' && count(drupal_set_message()) == 0 && $_SERVER['SERVER_SOFTWARE'] !== 'PHP CLI') {    $cache = cache_get($base_root . request_uri(), 'cache_page');    if (empty($cache)) {      ob_start();      $status = TRUE;    }  }  return $cache;}/** * Call all init or exit hooks without including all modules. * * @param $hook *   The name of the bootstrap hook we wish to invoke. */function bootstrap_invoke_all($hook) {  foreach (module_list(TRUE, TRUE) as $module) {    drupal_load('module', $module);    module_invoke($module, $hook);  }}/** * Includes a file with the provided type and name. This prevents * including a theme, engine, module, etc., more than once. * * @param $type *   The type of item to load (i.e. theme, theme_engine, module). * @param $name *   The name of the item to load. * * @return *   TRUE if the item is loaded or has already been loaded. */function drupal_load($type, $name) {  static $files = array();  if (isset($files[$type][$name])) {    return TRUE;  }  $filename = drupal_get_filename($type, $name);  if ($filename) {    include_once "./$filename";    $files[$type][$name] = TRUE;    return TRUE;  }  return FALSE;}/** * Set HTTP headers in preparation for a page response. * * Authenticated users are always given a 'no-cache' header, and will * fetch a fresh page on every request.  This prevents authenticated * users seeing locally cached pages that show them as logged out. * * @see page_set_cache() */function drupal_page_header() {  header("Expires: Sun, 19 Nov 1978 05:00:00 GMT");  header("Last-Modified: ". gmdate("D, d M Y H:i:s") ." GMT");  header("Cache-Control: store, no-cache, must-revalidate");  header("Cache-Control: post-check=0, pre-check=0", FALSE);}/** * Set HTTP headers in preparation for a cached page response. * * The general approach here is that anonymous users can keep a local * cache of the page, but must revalidate it on every request.  Then, * they are given a '304 Not Modified' response as long as they stay * logged out and the page has not been modified. * */function drupal_page_cache_header($cache) {  // Set default values:  $last_modified = gmdate('D, d M Y H:i:s', $cache->created) .' GMT';  $etag = '"'. md5($last_modified) .'"';  // See if the client has provided the required HTTP headers:  $if_modified_since = isset($_SERVER['HTTP_IF_MODIFIED_SINCE']) ? stripslashes($_SERVER['HTTP_IF_MODIFIED_SINCE']) : FALSE;  $if_none_match = isset($_SERVER['HTTP_IF_NONE_MATCH']) ? stripslashes($_SERVER['HTTP_IF_NONE_MATCH']) : FALSE;  if ($if_modified_since && $if_none_match      && $if_none_match == $etag // etag must match      && $if_modified_since == $last_modified) {  // if-modified-since must match    header('HTTP/1.1 304 Not Modified');    // All 304 responses must send an etag if the 200 response for the same object contained an etag    header("Etag: $etag");    return;  }  // Send appropriate response:  header("Last-Modified: $last_modified");  header("ETag: $etag");  // The following headers force validation of cache:  header("Expires: Sun, 19 Nov 1978 05:00:00 GMT");  header("Cache-Control: must-revalidate");  if (variable_get('page_compression', TRUE)) {    // Determine if the browser accepts gzipped data.    if (@strpos($_SERVER['HTTP_ACCEPT_ENCODING'], 'gzip') === FALSE && function_exists('gzencode')) {      // Strip the gzip header and run uncompress.      $cache->data = gzinflate(substr(substr($cache->data, 10), 0, -8));    }    elseif (function_exists('gzencode')) {      header('Content-Encoding: gzip');    }  }  // Send the original request's headers. We send them one after  // another so PHP's header() function can deal with duplicate  // headers.  $headers = explode("\n", $cache->headers);  foreach ($headers as $header) {    header($header);  }  print $cache->data;}/** * Define the critical hooks that force modules to always be loaded. */function bootstrap_hooks() {  return array('boot', 'exit');}/** * Unserializes and appends elements from a serialized string. * * @param $obj *   The object to which the elements are appended. * @param $field *   The attribute of $obj whose value should be unserialized. */function drupal_unpack($obj, $field = 'data') {  if ($obj->$field && $data = unserialize($obj->$field)) {    foreach ($data as $key => $value) {      if (!isset($obj->$key)) {        $obj->$key = $value;      }    }  }  return $obj;}/** * Return the URI of the referring page. */function referer_uri() {  if (isset($_SERVER['HTTP_REFERER'])) {    return $_SERVER['HTTP_REFERER'];  }}/** * Encode special characters in a plain-text string for display as HTML. * * Uses drupal_validate_utf8 to prevent cross site scripting attacks on * Internet Explorer 6. */function check_plain($text) {  return drupal_validate_utf8($text) ? htmlspecialchars($text, ENT_QUOTES) : '';}/** * Checks whether a string is valid UTF-8. * * All functions designed to filter input should use drupal_validate_utf8 * to ensure they operate on valid UTF-8 strings to prevent bypass of the * filter. * * When text containing an invalid UTF-8 lead byte (0xC0 - 0xFF) is presented * as UTF-8 to Internet Explorer 6, the program may misinterpret subsequent * bytes. When these subsequent bytes are HTML control characters such as * quotes or angle brackets, parts of the text that were deemed safe by filters * end up in locations that are potentially unsafe; An onerror attribute that * is outside of a tag, and thus deemed safe by a filter, can be interpreted * by the browser as if it were inside the tag. * * This function exploits preg_match behaviour (since PHP 4.3.5) when used * with the u modifier, as a fast way to find invalid UTF-8. When the matched * string contains an invalid byte sequence, it will fail silently. * * preg_match may not fail on 4 and 5 octet sequences, even though they * are not supported by the specification. * * The specific preg_match behaviour is present since PHP 4.3.5. * * @param $text *   The text to check. * @return *   TRUE if the text is valid UTF-8, FALSE if not. */function drupal_validate_utf8($text) {  if (strlen($text) == 0) {    return TRUE;  }  return (preg_match('/^./us', $text) == 1);}/** * Since $_SERVER['REQUEST_URI'] is only available on Apache, we * generate an equivalent using other environment variables. */function request_uri() {  if (isset($_SERVER['REQUEST_URI'])) {    $uri = $_SERVER['REQUEST_URI'];  }  else {    if (isset($_SERVER['argv'])) {      $uri = $_SERVER['SCRIPT_NAME'] .'?'. $_SERVER['argv'][0];    }    elseif (isset($_SERVER['QUERY_STRING'])) {      $uri = $_SERVER['SCRIPT_NAME'] .'?'. $_SERVER['QUERY_STRING'];    }    else {      $uri = $_SERVER['SCRIPT_NAME'];    }  }  // Prevent multiple slashes to avoid cross site requests via the FAPI.  $uri = '/'. ltrim($uri, '/');  return $uri;}/** * Log a system message. * * @param $type *   The category to which this message belongs. * @param $message *   The message to store in the log. See t() for documentation *   on how $message and $variables interact. Keep $message *   translatable by not concatenating dynamic values into it! * @param $variables *   Array of variables to replace in the message on display or *   NULL if message is already translated or not possible to *   translate. * @param $severity *   The severity of the message, as per RFC 3164 * @param $link *   A link to associate with the message. * * @see watchdog_severity_levels() */function watchdog($type, $message, $variables = array(), $severity = WATCHDOG_NOTICE, $link = NULL) {  global $user, $base_root;  // Prepare the fields to be logged  $log_message = array(    'type'        => $type,    'message'     => $message,    'variables'   => $variables,    'severity'    => $severity,    'link'        => $link,    'user'        => $user,    'request_uri' => $base_root . request_uri(),    'referer'     => referer_uri(),    'ip'          => ip_address(),    'timestamp'   => time(),    );  // Call the logging hooks to log/process the message  foreach (module_implements('watchdog', TRUE) as $module) {    module_invoke($module, 'watchdog', $log_message);  }}/** * Set a message which reflects the status of the performed operation. * * If the function is called with no arguments, this function returns all set * messages without clearing them. * * @param $message *   The message should begin with a capital letter and always ends with a *   period '.'. * @param $type *   The type of the message. One of the following values are possible: *   - 'status' *   - 'warning' *   - 'error' * @param $repeat *   If this is FALSE and the message is already set, then the message won't *   be repeated. */function drupal_set_message($message = NULL, $type = 'status', $repeat = TRUE) {  if ($message) {    if (!isset($_SESSION['messages'])) {      $_SESSION['messages'] = array();    }    if (!isset($_SESSION['messages'][$type])) {      $_SESSION['messages'][$type] = array();    }    if ($repeat || !in_array($message, $_SESSION['messages'][$type])) {      $_SESSION['messages'][$type][] = $message;    }  }  // messages not set when DB connection fails  return isset($_SESSION['messages']) ? $_SESSION['messages'] : NULL;}/** * Return all messages that have been set. * * @param $type *   (optional) Only return messages of this type. * @param $clear_queue *   (optional) Set to FALSE if you do not want to clear the messages queue * @return *   An associative array, the key is the message type, the value an array *   of messages. If the $type parameter is passed, you get only that type, *   or an empty array if there are no such messages. If $type is not passed, *   all message types are returned, or an empty array if none exist. */function drupal_get_messages($type = NULL, $clear_queue = TRUE) {  if ($messages = drupal_set_message()) {    if ($type) {      if ($clear_queue) {        unset($_SESSION['messages'][$type]);      }      if (isset($messages[$type])) {        return array($type => $messages[$type]);      }    }    else {      if ($clear_queue) {        unset($_SESSION['messages']);      }      return $messages;    }  }  return array();}/** * Perform an access check for a given mask and rule type. Rules are usually * created via admin/user/rules page. * * If any allow rule matches, access is allowed. Otherwise, if any deny rule * matches, access is denied.  If no rule matches, access is allowed. * * @param $type string *   Type of access to check: Allowed values are: *     - 'host': host name or IP address *     - 'mail': e-mail address *     - 'user': username * @param $mask string *   String or mask to test: '_' matches any character, '%' matches any *   number of characters. * @return bool *   TRUE if access is denied, FALSE if access is allowed. */function drupal_is_denied($type, $mask) {  // Because this function is called for every page request, both cached  // and non-cached pages, we tried to optimize it as much as possible.  // We deny access if the only matching records in the {access} table have  // status 0 (deny). If any have status 1 (allow), or if there are no  // matching records, we allow access.  $sql = "SELECT 1 FROM {access} WHERE type = '%s' AND LOWER('%s') LIKE LOWER(mask) AND status = %d";  return db_result(db_query_range($sql, $type, $mask, 0, 0, 1)) && !db_result(db_query_range($sql, $type, $mask, 1, 0, 1));}/** * Generates a default anonymous $user object. * * @return Object - the user object. */function drupal_anonymous_user($session = '') {  $user = new stdClass();  $user->uid = 0;  $user->hostname = ip_address();  $user->roles = array();  $user->roles[DRUPAL_ANONYMOUS_RID] = 'anonymous user';  $user->session = $session;  $user->cache = 0;  return $user;}/** * A string describing a phase of Drupal to load. Each phase adds to the * previous one, so invoking a later phase automatically runs the earlier * phases too. The most important usage is that if you want to access the * Drupal database from a script without loading anything else, you can * include bootstrap.inc, and call drupal_bootstrap(DRUPAL_BOOTSTRAP_DATABASE). * * @param $phase *   A constant. Allowed values are: *     DRUPAL_BOOTSTRAP_CONFIGURATION: initialize configuration. *     DRUPAL_BOOTSTRAP_EARLY_PAGE_CACHE: try to call a non-database cache fetch routine. *     DRUPAL_BOOTSTRAP_DATABASE: initialize database layer. *     DRUPAL_BOOTSTRAP_ACCESS: identify and reject banned hosts. *     DRUPAL_BOOTSTRAP_SESSION: initialize session handling. *     DRUPAL_BOOTSTRAP_LATE_PAGE_CACHE: load bootstrap.inc and module.inc, start *       the variable system and try to serve a page from the cache. *     DRUPAL_BOOTSTRAP_LANGUAGE: identify the language used on the page. *     DRUPAL_BOOTSTRAP_PATH: set $_GET['q'] to Drupal path of request. *     DRUPAL_BOOTSTRAP_FULL: Drupal is fully loaded, validate and fix input data. */function drupal_bootstrap($phase) {  static $phases = array(DRUPAL_BOOTSTRAP_CONFIGURATION, DRUPAL_BOOTSTRAP_EARLY_PAGE_CACHE, DRUPAL_BOOTSTRAP_DATABASE, DRUPAL_BOOTSTRAP_ACCESS, DRUPAL_BOOTSTRAP_SESSION, DRUPAL_BOOTSTRAP_LATE_PAGE_CACHE, DRUPAL_BOOTSTRAP_LANGUAGE, DRUPAL_BOOTSTRAP_PATH, DRUPAL_BOOTSTRAP_FULL), $phase_index = 0;  while ($phase >= $phase_index && isset($phases[$phase_index])) {    $current_phase = $phases[$phase_index];    unset($phases[$phase_index++]);    _drupal_bootstrap($current_phase);  }}function _drupal_bootstrap($phase) {  global $conf;  switch ($phase) {    case DRUPAL_BOOTSTRAP_CONFIGURATION:      drupal_unset_globals();      // Start a page timer:      timer_start('page');      // Initialize the configuration      conf_init();      break;    case DRUPAL_BOOTSTRAP_EARLY_PAGE_CACHE:      // Allow specifying special cache handlers in settings.php, like      // using memcached or files for storing cache information.      require_once variable_get('cache_inc', './includes/cache.inc');      // If the page_cache_fastpath is set to TRUE in settings.php and      // page_cache_fastpath (implemented in the special implementation of      // cache.inc) printed the page and indicated this with a returned TRUE      // then we are done.      if (variable_get('page_cache_fastpath', FALSE) && page_cache_fastpath()) {        exit;      }      break;    case DRUPAL_BOOTSTRAP_DATABASE:      // Initialize the default database.      require_once './includes/database.inc';      db_set_active();      break;    case DRUPAL_BOOTSTRAP_ACCESS:      // Deny access to hosts which were banned - t() is not yet available.      if (drupal_is_denied('host', ip_address())) {        header('HTTP/1.1 403 Forbidden');        print 'Sorry, '. check_plain(ip_address()) .' has been banned.';        exit();      }      break;    case DRUPAL_BOOTSTRAP_SESSION:      require_once variable_get('session_inc', './includes/session.inc');      session_set_save_handler('sess_open', 'sess_close', 'sess_read', 'sess_write', 'sess_destroy_sid', 'sess_gc');      session_start();      break;    case DRUPAL_BOOTSTRAP_LATE_PAGE_CACHE:      // Initialize configuration variables, using values from settings.php if available.      $conf = variable_init(isset($conf) ? $conf : array());      $cache_mode = variable_get('cache', CACHE_DISABLED);      // Get the page from the cache.      $cache = $cache_mode == CACHE_DISABLED ? '' : page_get_cache();      // If the skipping of the bootstrap hooks is not enforced, call hook_boot.      if (!$cache || $cache_mode != CACHE_AGGRESSIVE) {        // Load module handling.        require_once './includes/module.inc';        bootstrap_invoke_all('boot');      }      // If there is a cached page, display it.      if ($cache) {        drupal_page_cache_header($cache);        // If the skipping of the bootstrap hooks is not enforced, call hook_exit.        if ($cache_mode != CACHE_AGGRESSIVE) {          bootstrap_invoke_all('exit');        }        // We are done.        exit;      }      // Prepare for non-cached page workflow.      require_once variable_get('lock_inc', './includes/lock.inc');      lock_init();      drupal_page_header();      break;    case DRUPAL_BOOTSTRAP_LANGUAGE:      drupal_init_language();      break;    case DRUPAL_BOOTSTRAP_PATH:      require_once './includes/path.inc';      // Initialize $_GET['q'] prior to loading modules and invoking hook_init().      drupal_init_path();      break;    case DRUPAL_BOOTSTRAP_FULL:      require_once './includes/common.inc';      _drupal_bootstrap_full();      break;  }}/** * Enables use of the theme system without requiring database access. * * Loads and initializes the theme system for site installs, updates and when * the site is in off-line mode. This also applies when the database fails. * * @see _drupal_maintenance_theme() */function drupal_maintenance_theme() {  require_once './includes/theme.maintenance.inc';  _drupal_maintenance_theme();}/** * Return the name of the localisation function. Use in code that needs to * run both during installation and normal operation. */function get_t() {  static $t;  if (is_null($t)) {    $t = function_exists('install_main') ? 'st' : 't';  }  return $t;}/** *  Choose a language for the current page, based on site and user preferences. */function drupal_init_language() {  global $language, $user;  // Ensure the language is correctly returned, even without multilanguage support.  // Useful for eg. XML/HTML 'lang' attributes.  if (variable_get('language_count', 1) == 1) {    $language = language_default();  }  else {    include_once './includes/language.inc';    $language = language_initialize();  }}/** * Get a list of languages set up indexed by the specified key * * @param $field The field to index the list with. * @param $reset Boolean to request a reset of the list. */function language_list($field = 'language', $reset = FALSE) {  static $languages = NULL;  // Reset language list  if ($reset) {    $languages = NULL;  }  // Init language list  if (!isset($languages)) {    if (variable_get('language_count', 1) > 1 || module_exists('locale')) {      $result = db_query('SELECT * FROM {languages} ORDER BY weight ASC, name ASC');      while ($row = db_fetch_object($result)) {        $languages['language'][$row->language] = $row;      }    }    else {      // No locale module, so use the default language only.      $default = language_default();      $languages['language'][$default->language] = $default;    }  }  // Return the array indexed by the right field  if (!isset($languages[$field])) {    $languages[$field] = array();    foreach ($languages['language'] as $lang) {      // Some values should be collected into an array      if (in_array($field, array('enabled', 'weight'))) {        $languages[$field][$lang->$field][$lang->language] = $lang;      }      else {        $languages[$field][$lang->$field] = $lang;      }    }  }  return $languages[$field];}/** * Default language used on the site * * @param $property *   Optional property of the language object to return */function language_default($property = NULL) {  $language = variable_get('language_default', (object) array('language' => 'en', 'name' => 'English', 'native' => 'English', 'direction' => 0, 'enabled' => 1, 'plurals' => 0, 'formula' => '', 'domain' => '', 'prefix' => '', 'weight' => 0, 'javascript' => ''));  return $property ? $language->$property : $language;}/** * If Drupal is behind a reverse proxy, we use the X-Forwarded-For header * instead of $_SERVER['REMOTE_ADDR'], which would be the IP address * of the proxy server, and not the client's. * * @return *   IP address of client machine, adjusted for reverse proxy. */function ip_address() {  static $ip_address = NULL;  if (!isset($ip_address)) {    $ip_address = $_SERVER['REMOTE_ADDR'];    if (variable_get('reverse_proxy', 0) && array_key_exists('HTTP_X_FORWARDED_FOR', $_SERVER)) {      // If an array of known reverse proxy IPs is provided, then trust      // the XFF header if request really comes from one of them.      $reverse_proxy_addresses = variable_get('reverse_proxy_addresses', array());      if (!empty($reverse_proxy_addresses) && in_array($ip_address, $reverse_proxy_addresses, TRUE)) {        // If there are several arguments, we need to check the most        // recently added one, i.e. the last one.        $ip_address = array_pop(explode(',', $_SERVER['HTTP_X_FORWARDED_FOR']));      }    }  }  return $ip_address;}
<?php// $Id$/** * @file * Admin page callbacks for the trigger module. *//** * Build the form that allows users to assign actions to hooks. * * @param $type *   Name of hook. * @return *   HTML form. */function trigger_assign($type = NULL) {  // If no type is specified we default to node actions, since they  // are the most common.  if (!isset($type)) {    drupal_goto('admin/build/trigger/node');  }  if ($type == 'node') {    $type = 'nodeapi';  }  $output = '';  $hooks = module_invoke_all('hook_info');  foreach ($hooks as $module => $hook) {    if (isset($hook[$type])) {      foreach ($hook[$type] as $op => $description) {        $form_id = 'trigger_'. $type .'_'. $op .'_assign_form';        $output .= drupal_get_form($form_id, $type, $op, $description['runs when']);      }    }  }  return $output;}/** * Confirm removal of an assigned action. * * @param $hook * @param $op * @param $aid *   The action ID. * @ingroup forms * @see trigger_unassign_submit() */function trigger_unassign($form_state, $hook = NULL, $op = NULL, $aid = NULL) {  if (!($hook && $op && $aid)) {    drupal_goto('admin/build/trigger/assign');  }  $form['hook'] = array(    '#type' => 'value',    '#value' => $hook,  );  $form['operation'] = array(    '#type' => 'value',    '#value' => $op,  );  $form['aid'] = array(    '#type' => 'value',    '#value' => $aid,  );  $action = actions_function_lookup($aid);  $actions = actions_get_all_actions();  $destination = 'admin/build/trigger/'. ($hook == 'nodeapi' ? 'node' : $hook);  return confirm_form($form,    t('Are you sure you want to unassign the action %title?', array('%title' => $actions[$action]['description'])),    $destination,    t('You can assign it again later if you wish.'),    t('Unassign'), t('Cancel')  );}function trigger_unassign_submit($form, &$form_state) {  $form_values = $form_state['values'];  if ($form_values['confirm'] == 1) {    $aid = actions_function_lookup($form_values['aid']);    db_query("DELETE FROM {trigger_assignments} WHERE hook = '%s' AND op = '%s' AND aid = '%s'", $form_values['hook'], $form_values['operation'], $aid);    $actions = actions_get_all_actions();    watchdog('actions', 'Action %action has been unassigned.',  array('%action' => check_plain($actions[$aid]['description'])));    drupal_set_message(t('Action %action has been unassigned.', array('%action' => $actions[$aid]['description'])));    $hook = $form_values['hook'] == 'nodeapi' ? 'node' : $form_values['hook'];    $form_state['redirect'] = 'admin/build/trigger/'. $hook;  }  else {    drupal_goto('admin/build/trigger');  }}/** * Create the form definition for assigning an action to a hook-op combination. * * @param $form_state *   Information about the current form. * @param $hook *   The name of the hook, e.g., 'nodeapi'. * @param $op *   The name of the hook operation, e.g., 'insert'. * @param $description *   A plain English description of what this hook operation does. * @return * * @ingoup forms * @see trigger_assign_form_validate() * @see trigger_assign_form_submit() */function trigger_assign_form($form_state, $hook, $op, $description) {  $form['hook'] = array(    '#type' => 'hidden',    '#value' => $hook,  );  $form['operation'] = array(    '#type' => 'hidden',    '#value' => $op,  );  // All of these forms use the same validate and submit functions.  $form['#validate'][] = 'trigger_assign_form_validate';  $form['#submit'][] = 'trigger_assign_form_submit';  $options = array();  $functions = array();  // Restrict the options list to actions that declare support for this hook-op  // combination.  foreach (actions_list() as $func => $metadata) {    if (isset($metadata['hooks']['any']) || (isset($metadata['hooks'][$hook]) && is_array($metadata['hooks'][$hook]) && (in_array($op, $metadata['hooks'][$hook])))) {      $functions[] = $func;    }  }  foreach (actions_actions_map(actions_get_all_actions()) as $aid => $action) {    if (in_array($action['callback'], $functions)) {      $options[$action['type']][$aid] = $action['description'];    }  }  $form[$op] = array(    '#type' => 'fieldset',    '#title' => t('Trigger: ') . $description,    '#theme' => 'trigger_display'    );  // Retrieve actions that are already assigned to this hook-op combination.  $actions = _trigger_get_hook_actions($hook, $op);  $form[$op]['assigned']['#type'] = 'value';  $form[$op]['assigned']['#value'] = array();  foreach ($actions as $aid => $description) {    $form[$op]['assigned']['#value'][$aid] = array(      'description' => $description,      'link' => l(t('unassign'), "admin/build/trigger/unassign/$hook/$op/". md5($aid))    );  }  $form[$op]['parent'] = array(    '#prefix' => "<div class='container-inline'>",    '#suffix' => '</div>',  );  // List possible actions that may be assigned.  if (count($options) != 0) {    array_unshift($options, t('Choose an action'));    $form[$op]['parent']['aid'] = array(      '#type' => 'select',      '#options' => $options,    );    $form[$op]['parent']['submit'] = array(      '#type' => 'submit',      '#value' => t('Assign')    );  }  else {    $form[$op]['none'] = array(      '#value' => t('No available actions for this trigger.')    );  }  return $form;}/** * Validation function for trigger_assign_form(). * * Makes sure that the user is not re-assigning an action to an event. */function trigger_assign_form_validate($form, $form_state) {  $form_values = $form_state['values'];  if (!empty($form_values['aid'])) {    $aid = actions_function_lookup($form_values['aid']);    if (db_result(db_query("SELECT aid FROM {trigger_assignments} WHERE hook = '%s' AND op = '%s' AND aid = '%s'", $form_values['hook'], $form_values['operation'], $aid))) {      form_set_error($form_values['operation'], t('The action you chose is already assigned to that trigger.'));    }  }}/** * Submit function for trigger_assign_form(). */function trigger_assign_form_submit($form, $form_state) {  $form_values = $form_state['values'];  if (!empty($form_values['aid'])) {    $aid = actions_function_lookup($form_values['aid']);    $weight = db_result(db_query("SELECT MAX(weight) FROM {trigger_assignments} WHERE hook = '%s' AND op = '%s'", $form_values['hook'], $form_values['operation']));    db_query("INSERT INTO {trigger_assignments} values ('%s', '%s', '%s', %d)", $form_values['hook'], $form_values['operation'], $aid, $weight + 1);    // If this action changes a node property, we need to save the node    // so the change will persist.    $actions = actions_list();    if (isset($actions[$aid]['behavior']) && in_array('changes_node_property', $actions[$aid]['behavior']) && ($form_values['operation'] != 'presave')) {      // Delete previous node_save_action if it exists, and re-add a new one at a higher weight.      $save_post_action_assigned = db_result(db_query("SELECT aid FROM {trigger_assignments} WHERE hook = '%s' AND op = '%s' AND aid = 'node_save_action'", $form_values['hook'], $form_values['operation']));      if ($save_post_action_assigned) {        db_query("DELETE FROM {trigger_assignments} WHERE hook = '%s' AND op = '%s' AND aid = 'node_save_action'", $form_values['hook'], $form_values['operation']);      }      db_query("INSERT INTO {trigger_assignments} VALUES ('%s', '%s', '%s', %d)", $form_values['hook'], $form_values['operation'], 'node_save_action', $weight + 2);      if (!$save_post_action_assigned) {        drupal_set_message(t('You have added an action that changes a the property of a post. A Save post action has been added so that the property change will be saved.'));      }    }  }}/** * Display actions assigned to this hook-op combination in a table. * * @param array $element *   The fieldset including all assigned actions. * @return *   The rendered form with the table prepended. * * @ingroup themeable */function theme_trigger_display($element) {  $header = array();  $rows = array();  if (count($element['assigned']['#value'])) {    $header = array(array('data' => t('Name')), array('data' => t('Operation')));    $rows = array();    foreach ($element['assigned']['#value'] as $aid => $info) {      $rows[] = array(        $info['description'],        $info['link']      );    }  }  if (count($rows)) {    $output = theme('table', $header, $rows) . drupal_render($element);  }  else {    $output = drupal_render($element);  }  return $output;}/** * Get the actions that have already been defined for this * type-hook-op combination. * * @param $type *   One of 'node', 'user', 'comment'. * @param $hook *   The name of the hook for which actions have been assigned, *   e.g. 'nodeapi'. * @param $op *   The hook operation for which the actions have been assigned, *   e.g., 'view'. * @return *   An array of action descriptions keyed by action IDs. */function _trigger_get_hook_actions($hook, $op, $type = NULL) {  $actions = array();  if ($type) {    $result = db_query("SELECT h.aid, a.description FROM {trigger_assignments} h LEFT JOIN {actions} a on a.aid = h.aid WHERE a.type = '%s' AND h.hook = '%s' AND h.op = '%s' ORDER BY h.weight", $type, $hook, $op);  }  else {    $result = db_query("SELECT h.aid, a.description FROM {trigger_assignments} h LEFT JOIN {actions} a on a.aid = h.aid WHERE h.hook = '%s' AND h.op = '%s' ORDER BY h.weight", $hook, $op);  }  while ($action = db_fetch_object($result)) {    $actions[$action->aid] = $action->description;  }  return $actions;}
<?php// $Id$/** * @file * User page callbacks for the openid module. *//** * Menu callback; Process an OpenID authentication. */function openid_authentication_page() {  $result = openid_complete();  switch ($result['status']) {    case 'success':      return openid_authentication($result);    case 'failed':      drupal_set_message(t('OpenID login failed.'), 'error');      break;    case 'cancel':      drupal_set_message(t('OpenID login cancelled.'));      break;  }  drupal_goto();}/** * Menu callback; Manage OpenID identities for the specified user. */function openid_user_identities($account) {  drupal_set_title(check_plain($account->name));  drupal_add_css(drupal_get_path('module', 'openid') .'/openid.css', 'module');  // Check to see if we got a response  $result = openid_complete();  if ($result['status'] == 'success') {    $identity = $result['openid.claimed_id'];    db_query("INSERT INTO {authmap} (uid, authname, module) VALUES (%d, '%s','openid')", $account->uid, $identity);    drupal_set_message(t('Successfully added %identity', array('%identity' => $identity)));  }  $header = array(t('OpenID'), t('Operations'));  $rows = array();  $result = db_query("SELECT * FROM {authmap} WHERE module='openid' AND uid=%d", $account->uid);  while ($identity = db_fetch_object($result)) {    $rows[] = array(check_plain($identity->authname), l(t('Delete'), 'user/'. $account->uid .'/openid/delete/'. $identity->aid));  }  $output = theme('table', $header, $rows);  $output .= drupal_get_form('openid_user_add');  return $output;}/** * Form builder; Add an OpenID identity. * * @ingroup forms * @see openid_user_add_validate() */function openid_user_add() {  $form['openid_identifier'] = array(    '#type' => 'textfield',    '#title' => t('OpenID'),  );  $form['submit'] = array('#type' => 'submit', '#value' => t('Add an OpenID'));  return $form;}function openid_user_add_validate($form, &$form_state) {  // Check for existing entries.  $claimed_id = _openid_normalize($form_state['values']['openid_identifier']);  if (db_result(db_query("SELECT authname FROM {authmap} WHERE authname='%s'", $claimed_id))) {    form_set_error('openid_identifier', t('That OpenID is already in use on this site.'));  }}function openid_user_add_submit($form, &$form_state) {  $return_to = url('user/'. arg(1) .'/openid', array('absolute' => TRUE));  openid_begin($form_state['values']['openid_identifier'], $return_to);}/** * Present a confirmation form to delete the specified OpenID identity from the system. * * @ingroup forms * @see openid_user_delete_form_submit() */function openid_user_delete_form($form_state, $account, $aid = 0) {  $authname = db_result(db_query('SELECT authname FROM {authmap} WHERE uid = %d AND aid = %d', $account->uid, $aid));  $form = array();  $form['uid'] = array(    '#type' => 'value',    '#value' => $account->uid,  );  $form['aid'] = array(    '#type' => 'value',    '#value' => $aid,  );  return confirm_form($form, t('Are you sure you want to delete the OpenID %authname for %user?', array('%authname' => $authname, '%user' => $account->name)), 'user/'. $account->uid .'/openid');}function openid_user_delete_form_submit($form, &$form_state) {  db_query("DELETE FROM {authmap} WHERE uid = %d AND aid = %d AND module = 'openid'", $form_state['values']['uid'], $form_state['values']['aid']);  if (db_affected_rows()) {    drupal_set_message(t('OpenID deleted.'));  }  $form_state['redirect'] = 'user/'. $form_state['values']['uid'] .'/openid';}
<?php// $Id$/** * Implementation of hook_install(). */function openid_install() {  // Create table.  drupal_install_schema('openid');}/** * Implementation of hook_uninstall(). */function openid_uninstall() {  // Remove table.  drupal_uninstall_schema('openid');}/** * Implementation of hook_schema(). */function openid_schema() {  $schema['openid_association'] = array(    'description' => 'Stores temporary shared key association information for OpenID authentication.',    'fields' => array(      'idp_endpoint_uri' => array(        'type' => 'varchar',        'length' => 255,        'description' => 'URI of the OpenID Provider endpoint.',      ),      'assoc_handle' => array(        'type' => 'varchar',        'length' => 255,        'not null' => TRUE,        'description' => 'Primary Key: Used to refer to this association in subsequent messages.',      ),      'assoc_type' => array(        'type' => 'varchar',        'length' => 32,        'description' => 'The signature algorithm used: one of HMAC-SHA1 or HMAC-SHA256.',      ),      'session_type' => array(        'type' => 'varchar',        'length' => 32,        'description' => 'Valid association session types: "no-encryption", "DH-SHA1", and "DH-SHA256".',      ),      'mac_key' => array(        'type' => 'varchar',        'length' => 255,        'description' => 'The MAC key (shared secret) for this association.',      ),      'created' => array(        'type' => 'int',        'not null' => TRUE,        'default' => 0,        'description' => 'UNIX timestamp for when the association was created.',      ),      'expires_in' => array(        'type' => 'int',        'not null' => TRUE,        'default' => 0,        'description' => 'The lifetime, in seconds, of this association.',      ),    ),    'primary key' => array('assoc_handle'),  );  return $schema;}
<?php// $Id$/** * @file *   Manages content translations. * *   Translations are managed in sets of posts, which represent the same *   information in different languages. Only content types for which the *   administrator explicitly enabled translations could have translations *   associated. Translations are managed in sets with exactly one source *   post per set. The source post is used to translate to different *   languages, so if the source post is significantly updated, the *   editor can decide to mark all translations outdated. * *   The node table stores the values used by this module: *    - 'tnid' is the translation set id, which equals the node id *      of the source post. *    - 'translate' is a flag, either indicating that the translation *      is up to date (0) or needs to be updated (1). *//** * Identifies a content type which has translation support enabled. */define('TRANSLATION_ENABLED', 2);/** * Implementation of hook_help(). */function translation_help($path, $arg) {  switch ($path) {    case 'admin/help#translation':      $output = '<p>'. t('The content translation module allows content to be translated into different languages. Working with the <a href="@locale">locale module</a> (which manages enabled languages and provides translation for the site interface), the content translation module is key to creating and maintaining translated site content.', array('@locale' => url('admin/help/locale'))) .'</p>';      $output .= '<p>'. t('Configuring content translation and translation-enabled content types:') .'</p>';      $output .= '<ul><li>'. t('Assign the <em>translate content</em> permission to the appropriate user roles at the <a href="@permissions">Permissions configuration page</a>.', array('@permissions' => url('admin/user/permissions'))) .'</li>';      $output .= '<li>'. t('Add and enable desired languages at the <a href="@languages">Languages configuration page</a>.', array('@languages' => url('admin/settings/language'))) .'</li>';      $output .= '<li>'. t('Determine which <a href="@content-types">content types</a> should support translation features. To enable translation support for a content type, edit the type and at the <em>Multilingual support</em> drop down, select <em>Enabled, with translation</em>. (<em>Multilingual support</em> is located within <em>Workflow settings</em>.) Be sure to save each content type after enabling multilingual support.', array('@content-types' => url('admin/content/types'))) .'</li></ul>';      $output .= '<p>'. t('Working with translation-enabled content types:') .'</p>';      $output .= '<ul><li>'. t('Use the <em>Language</em> drop down to select the appropriate language when creating or editing posts.') .'</li>';      $output .= '<li>'. t('Provide new or edit current translations for existing posts via the <em>Translation</em> tab. Only visible while viewing a post as a user with the <em>translate content</em> permission, this tab allows translations to be added or edited using a specialized editing form that also displays the content being translated.') .'</li>';      $output .= '<li>'. t('Update translations as needed, so that they accurately reflect changes in the content of the original post. The translation status flag provides a simple method for tracking outdated translations. After editing a post, for example, select the <em>Flag translations as outdated</em> check box to mark all of its translations as outdated and in need of revision. Individual translations may be marked for revision by selecting the <em>This translation needs to be updated</em> check box on the translation editing form.') .'</li>';      $output .= '<li>'. t('The <a href="@content-node">Content management administration page</a> displays the language of each post, and also allows filtering by language or translation status.', array('@content-node' => url('admin/content/node'))) .'</li></ul>';      $output .= '<p>'. t('Use the <a href="@blocks">language switcher block</a> provided by locale module to allow users to select a language. If available, both the site interface and site content are presented in the language selected.', array('@blocks' => url('admin/build/block'))) .'</p>';      $output .= '<p>'. t('For more information, see the online handbook entry for <a href="@translation">Translation module</a>.', array('@translation' => 'http://drupal.org/handbook/modules/translation/')) .'</p>';      return $output;    case 'node/%/translate':      $output = '<p>'. t('Translations of a piece of content are managed with translation sets. Each translation set has one source post and any number of translations in any of the <a href="!languages">enabled languages</a>. All translations are tracked to be up to date or outdated based on whether the source post was modified significantly.', array('!languages' => url('admin/settings/language'))) .'</p>';      return $output;  }}/** * Implementation of hook_menu(). */function translation_menu() {  $items = array();  $items['node/%node/translate'] = array(    'title' => 'Translate',    'page callback' => 'translation_node_overview',    'page arguments' => array(1),    'access callback' => '_translation_tab_access',    'access arguments' => array(1),    'type' => MENU_LOCAL_TASK,    'weight' => 2,    'file' => 'translation.pages.inc',  );  return $items;}/** * Menu access callback. * * Only display translation tab for node types, which have translation enabled * and where the current node is not language neutral (which should span * all languages). */function _translation_tab_access($node) {  return !empty($node->language) && translation_supported_type($node->type) && node_access('view', $node) && user_access('translate content');}/** * Implementation of hook_perm(). */function translation_perm() {  return array('translate content');}/** * Implementation of hook_form_alter(). * * - Add translation option to content type form. * - Alters language fields on node forms when a translation *   is about to be created. */function translation_form_alter(&$form, $form_state, $form_id) {  if ($form_id == 'node_type_form') {    // Add translation option to content type form.    $form['workflow']['language_content_type']['#options'][TRANSLATION_ENABLED] = t('Enabled, with translation');    // Description based on text from locale.module.    $form['workflow']['language_content_type']['#description'] = t('Enable multilingual support for this content type. If enabled, a language selection field will be added to the editing form, allowing you to select from one of the <a href="!languages">enabled languages</a>. You can also turn on translation for this content type, which lets you have content translated to any of the enabled languages. If disabled, new posts are saved with the default language. Existing content will not be affected by changing this option.', array('!languages' => url('admin/settings/language')));  }  elseif (isset($form['#id']) && $form['#id'] == 'node-form' && translation_supported_type($form['#node']->type)) {    $node = $form['#node'];    if (!empty($node->translation_source)) {      // We are creating a translation. Add values and lock language field.      $form['translation_source'] = array('#type' => 'value', '#value' => $node->translation_source);      $form['language']['#disabled'] = TRUE;    }    elseif (!empty($node->nid) && !empty($node->tnid)) {      // Disable languages for existing translations, so it is not possible to switch this      // node to some language which is already in the translation set. Also remove the      // language neutral option.      unset($form['language']['#options']['']);      foreach (translation_node_get_translations($node->tnid) as $translation) {        if ($translation->nid != $node->nid) {          unset($form['language']['#options'][$translation->language]);        }      }      // Add translation values and workflow options.      $form['tnid'] = array('#type' => 'value', '#value' => $node->tnid);      $form['translation'] = array(        '#type' => 'fieldset',        '#title' => t('Translation settings'),        '#access' => user_access('translate content'),        '#collapsible' => TRUE,        '#collapsed' => !$node->translate,        '#tree' => TRUE,        '#weight' => 30,      );      if ($node->tnid == $node->nid) {        // This is the source node of the translation        $form['translation']['retranslate'] = array(          '#type' => 'checkbox',          '#title' => t('Flag translations as outdated'),          '#default_value' => 0,          '#description' => t('If you made a significant change, which means translations should be updated, you can flag all translations of this post as outdated. This will not change any other property of those posts, like whether they are published or not.'),        );        $form['translation']['status'] = array('#type' => 'value', '#value' => 0);      }      else {        $form['translation']['status'] = array(          '#type' => 'checkbox',          '#title' => t('This translation needs to be updated'),          '#default_value' => $node->translate,          '#description' => t('When this option is checked, this translation needs to be updated because the source post has changed. Uncheck when the translation is up to date again.'),        );      }    }  }}/** * Implementation of hook_link(). * * Display translation links with native language names, if this node * is part of a translation set. */function translation_link($type, $node = NULL, $teaser = FALSE) {  $links = array();  if ($type == 'node' && ($node->tnid) && $translations = translation_node_get_translations($node->tnid)) {    // Do not show link to the same node.    unset($translations[$node->language]);    $languages = language_list();    foreach ($languages as $langcode => $language) {      if (isset($translations[$langcode])) {        $links["node_translation_$langcode"] = array(          'title' => $language->native,          'href' => 'node/'. $translations[$langcode]->nid,          'language' => $language,          'attributes' => array('title' => $translations[$langcode]->title, 'class' => 'translation-link')        );      }    }  }  return $links;}/** * Implementation of hook_nodeapi(). * * Manages translation information for nodes. */function translation_nodeapi(&$node, $op, $teaser, $page) {  // Only act if we are dealing with a content type supporting translations.  if (!translation_supported_type($node->type)) {    return;  }  switch ($op) {    case 'prepare':      if (empty($node->nid) && user_access('translate content') && isset($_GET['translation']) && isset($_GET['language']) && is_numeric($_GET['translation'])) {        $translation_source = node_load($_GET['translation']);        if (empty($translation_source) || !node_access('view', $translation_source)) {          // Source node not found or no access to view. We should not check          // for edit access, since the translator might not have permissions          // to edit the source node but should still be able to translate.          return;        }        $language_list = language_list();        if (!isset($language_list[$_GET['language']]) || ($translation_source->language == $_GET['language'])) {          // If not supported language, or same language as source node, break.          return;        }        // Populate fields based on source node.        $node->language = $_GET['language'];        $node->translation_source = $translation_source;        $node->title = $translation_source->title;        // If user has no access to the filter used for the body, Drupal core        // does not let the edit form to appear, so we should avoid exposing        // the source text here too.        $node->body = filter_access($translation_source->format) ? $translation_source->body : '';        // Let every module add custom translated fields.        node_invoke_nodeapi($node, 'prepare translation');      }      break;    case 'insert':      if (!empty($node->translation_source)) {        if ($node->translation_source->tnid) {          // Add node to existing translation set.          $tnid = $node->translation_source->tnid;        }        else {          // Create new translation set, using nid from the source node.          $tnid = $node->translation_source->nid;          db_query("UPDATE {node} SET tnid = %d, translate = %d WHERE nid = %d", $tnid, 0, $node->translation_source->nid);        }        db_query("UPDATE {node} SET tnid = %d, translate = %d WHERE nid = %d", $tnid, 0, $node->nid);      }      break;    case 'update':      if (isset($node->translation) && $node->translation && !empty($node->language) && $node->tnid) {        // Update translation information.        db_query("UPDATE {node} SET tnid = %d, translate = %d WHERE nid = %d", $node->tnid, $node->translation['status'], $node->nid);        if (!empty($node->translation['retranslate'])) {          // This is the source node, asking to mark all translations outdated.          db_query("UPDATE {node} SET translate = 1 WHERE tnid = %d AND nid != %d", $node->tnid, $node->nid);        }      }      break;    case 'delete':      translation_remove_from_set($node);      break;  }}/** * Remove a node from its translation set (if any) * and update the set accordingly. */function translation_remove_from_set($node) {  if (isset($node->tnid)) {    if (db_result(db_query('SELECT COUNT(*) FROM {node} WHERE tnid = %d', $node->tnid)) == 1) {      // There is only one node left in the set: remove the set altogether.      db_query('UPDATE {node} SET tnid = 0, translate = 0 WHERE tnid = %d', $node->tnid);    }    else {      db_query('UPDATE {node} SET tnid = 0, translate = 0 WHERE nid = %d', $node->nid);      // If the node being removed was the source of the translation set,      // we pick a new source - preferably one that is up to date.      if ($node->tnid == $node->nid) {        $new_tnid = db_result(db_query('SELECT nid FROM {node} WHERE tnid = %d ORDER BY translate ASC, nid ASC', $node->tnid));        db_query('UPDATE {node} SET tnid = %d WHERE tnid = %d', $new_tnid, $node->tnid);      }    }  }}/** * Get all nodes in a translation set, represented by $tnid. * * @param $tnid *   The translation source nid of the translation set, the identifier *   of the node used to derive all translations in the set. * @return *   Array of partial node objects (nid, title, language) representing *   all nodes in the translation set, in effect all translations *   of node $tnid, including node $tnid itself. Because these are *   partial nodes, you need to node_load() the full node, if you *   need more properties. The array is indexed by language code. */function translation_node_get_translations($tnid) {  static $translations = array();  if (is_numeric($tnid) && $tnid) {    if (!isset($translations[$tnid])) {      $translations[$tnid] = array();      $result = db_query(db_rewrite_sql('SELECT n.nid, n.title, n.language FROM {node} n WHERE n.tnid = %d'), $tnid);      while ($node = db_fetch_object($result)) {        $translations[$tnid][$node->language] = $node;      }    }    return $translations[$tnid];  }}/** * Returns whether the given content type has support for translations. * * @return *   Boolean value. */function translation_supported_type($type) {  return variable_get('language_content_type_'. $type, 0) == TRANSLATION_ENABLED;}/** * Return paths of all translations of a node, based on * its Drupal path. * * @param $path *   A Drupal path, for example node/432. * @return *   An array of paths of translations of the node accessible *   to the current user keyed with language codes. */function translation_path_get_translations($path) {  $paths = array();  // Check for a node related path, and for its translations.  if ((preg_match("!^node/([0-9]+)(/.+|)$!", $path, $matches)) && ($node = node_load((int)$matches[1])) && !empty($node->tnid)) {    foreach (translation_node_get_translations($node->tnid) as $language => $translation_node) {      $paths[$language] = 'node/'. $translation_node->nid . $matches[2];    }  }  return $paths;}/** * Implementation of hook_translation_link_alter(). * * Replaces links with pointers to translated versions of the content. */function translation_translation_link_alter(&$links, $path) {  if ($paths = translation_path_get_translations($path)) {    foreach ($links as $langcode => $link) {      if (isset($paths[$langcode])) {        // Translation in a different node.        $links[$langcode]['href'] = $paths[$langcode];      }      else {        // No translation in this language, or no permission to view.        unset($links[$langcode]);      }    }  }}
<?php// $Id$?>  <div class="comment<?php print ' '. $status; ?>">    <?php if ($picture) {    print $picture;  } ?><h3 class="title"><?php print $title; ?></h3><?php if ($new != '') { ?><span class="new"><?php print $new; ?></span><?php } ?>    <div class="submitted"><?php print $submitted; ?></div>    <div class="content">     <?php print $content; ?>     <?php if ($signature): ?>      <div class="clear-block">       <div></div>       <?php print $signature ?>      </div>     <?php endif; ?>    </div>    <div class="links">&raquo; <?php print $links; ?></div>  </div>
<?php// $Id$/** * @file * Enables your site to capture votes on different topics in the form of multiple * choice questions. *//** * Implementation of hook_help(). */function poll_help($path, $arg) {  switch ($path) {    case 'admin/help#poll':      $output = '<p>'. t('The poll module can be used to create simple polls for site users. A poll is a simple, multiple choice questionnaire which displays the cumulative results of the answers to the poll. Having polls on the site is a good way to receive feedback from community members.') .'</p>';      $output .= '<p>'. t('When creating a poll, enter the question being posed, as well as the potential choices (and beginning vote counts for each choice). The status and duration (length of time the poll remains active for new votes) can also be specified. Use the <a href="@poll">poll</a> menu item to view all current polls. To vote in or view the results of a specific poll, click on the poll itself.', array('@poll' => url('poll'))) .'</p>';      $output .= '<p>'. t('For more information, see the online handbook entry for <a href="@poll">Poll module</a>.', array('@poll' => 'http://drupal.org/handbook/modules/poll/')) .'</p>';      return $output;  }}/** * Implementation of hook_init(). */function poll_init() {  drupal_add_css(drupal_get_path('module', 'poll') .'/poll.css');}/** * Implementation of hook_theme() */function poll_theme() {  return array(    'poll_vote' => array(      'template' => 'poll-vote',      'arguments' => array('form' => NULL),    ),    'poll_choices' => array(      'arguments' => array('form' => NULL),    ),    'poll_results' => array(      'template' => 'poll-results',      'arguments' => array('raw_title' => NULL, 'results' => NULL, 'votes' => NULL, 'raw_links' => NULL, 'block' => NULL, 'nid' => NULL, 'vote' => NULL),    ),    'poll_bar' => array(      'template' => 'poll-bar',      'arguments' => array('title' => NULL, 'votes' => NULL, 'total_votes' => NULL, 'vote' => NULL, 'block' => NULL),    ),  );}/** * Implementation of hook_perm(). */function poll_perm() {  return array('create poll content', 'delete own poll content', 'delete any poll content', 'edit any poll content', 'edit own poll content', 'vote on polls', 'cancel own vote', 'inspect all votes');}/** * Implementation of hook_access(). */function poll_access($op, $node, $account) {  switch ($op) {    case 'create':      return user_access('create poll content', $account) ? TRUE : NULL;    case 'update':      return user_access('edit any poll content', $account) || (user_access('edit own poll content', $account) && ($node->uid == $account->uid)) ? TRUE : NULL;    case 'delete':      return user_access('delete any poll content', $account) || (user_access('delete own poll content', $account) && ($node->uid == $account->uid)) ? TRUE : NULL;  }}/** * Implementation of hook_menu(). */function poll_menu() {  $items['poll'] = array(    'title' => 'Polls',    'page callback' => 'poll_page',    'access arguments' => array('access content'),    'type' => MENU_SUGGESTED_ITEM,    'file' => 'poll.pages.inc',  );  $items['node/%node/votes'] = array(    'title' => 'Votes',    'page callback' => 'poll_votes',    'page arguments' => array(1),    'access callback' => '_poll_menu_access',    'access arguments' => array(1, 'inspect all votes', FALSE),    'weight' => 3,    'type' => MENU_LOCAL_TASK,    'file' => 'poll.pages.inc',  );  $items['node/%node/results'] = array(    'title' => 'Results',    'page callback' => 'poll_results',    'page arguments' => array(1),    'access callback' => '_poll_menu_access',    'access arguments' => array(1, 'access content', TRUE),    'weight' => 3,    'type' => MENU_LOCAL_TASK,    'file' => 'poll.pages.inc',  );  $items['poll/js'] = array(    'title' => 'Javascript Choice Form',    'page callback' => 'poll_choice_js',    'access arguments' => array('access content'),    'type' => MENU_CALLBACK,  );  return $items;}/** * Callback function to see if a node is acceptable for poll menu items. */function _poll_menu_access($node, $perm, $inspect_allowvotes) {  return user_access($perm) && ($node->type == 'poll') && ($node->allowvotes || !$inspect_allowvotes);}/** * Implementation of hook_block(). * * Generates a block containing the latest poll. */function poll_block($op = 'list', $delta = 0) {  if (user_access('access content')) {    if ($op == 'list') {      $blocks[0]['info'] = t('Most recent poll');      return $blocks;    }    else if ($op == 'view') {      // Retrieve the latest poll.      $sql = db_rewrite_sql("SELECT MAX(n.created) FROM {node} n INNER JOIN {poll} p ON p.nid = n.nid WHERE n.status = 1 AND p.active = 1");      $timestamp = db_result(db_query($sql));      if ($timestamp) {        $poll = node_load(array('type' => 'poll', 'created' => $timestamp, 'status' => 1));        if ($poll->nid) {          $poll = poll_view($poll, TRUE, FALSE, TRUE);        }      }      $block['subject'] = t('Poll');      $block['content'] = drupal_render($poll->content);      return $block;    }  }}/** * Implementation of hook_cron(). * * Closes polls that have exceeded their allowed runtime. */function poll_cron() {  $result = db_query('SELECT p.nid FROM {poll} p INNER JOIN {node} n ON p.nid = n.nid WHERE (n.created + p.runtime) < '. time() .' AND p.active = 1 AND p.runtime != 0');  while ($poll = db_fetch_object($result)) {    db_query("UPDATE {poll} SET active = 0 WHERE nid = %d", $poll->nid);  }}/** * Implementation of hook_node_info(). */function poll_node_info() {  return array(    'poll' => array(      'name' => t('Poll'),      'module' => 'poll',      'description' => t('A <em>poll</em> is a question with a set of possible responses. A <em>poll</em>, once created, automatically provides a simple running count of the number of votes received for each response.'),      'title_label' => t('Question'),      'has_body' => FALSE,    )  );}/** * Implementation of hook_form(). */function poll_form(&$node, $form_state) {  global $user;  $admin = user_access('administer nodes') || user_access('edit any poll content') || (user_access('edit own poll content') && $user->uid == $node->uid);  $type = node_get_types('type', $node);  $form = array(    '#cache' => TRUE,  );  $form['title'] = array(    '#type' => 'textfield',    '#title' => check_plain($type->title_label),    '#required' => TRUE,    '#default_value' => $node->title,    '#weight' => -5,  );  if (isset($form_state['choice_count'])) {    $choice_count = $form_state['choice_count'];  }  else {    $choice_count = max(2, empty($node->choice) ? 2 : count($node->choice));  }  // Add a wrapper for the choices and more button.  $form['choice_wrapper'] = array(    '#tree' => FALSE,    '#weight' => -4,    '#prefix' => '<div class="clear-block" id="poll-choice-wrapper">',    '#suffix' => '</div>',  );  // Container for just the poll choices.  $form['choice_wrapper']['choice'] = array(    '#prefix' => '<div id="poll-choices">',    '#suffix' => '</div>',    '#theme' => 'poll_choices',  );  // Add the current choices to the form.  for ($delta = 0; $delta < $choice_count; $delta++) {    $text = isset($node->choice[$delta]['chtext']) ? $node->choice[$delta]['chtext'] : '';    $votes = isset($node->choice[$delta]['chvotes']) ? $node->choice[$delta]['chvotes'] : 0;    $form['choice_wrapper']['choice'][$delta] = _poll_choice_form($delta, $text, $votes);  }  // We name our button 'poll_more' to avoid conflicts with other modules using  // AHAH-enabled buttons with the id 'more'.  $form['choice_wrapper']['poll_more'] = array(    '#type' => 'submit',    '#value' => t('More choices'),    '#description' => t("If the amount of boxes above isn't enough, click here to add more choices."),    '#weight' => 1,    '#submit' => array('poll_more_choices_submit'), // If no javascript action.    '#ahah' => array(      'path' => 'poll/js',      'wrapper' => 'poll-choices',      'method' => 'replace',      'effect' => 'fade',    ),  );  // Poll attributes  $_duration = array(0 => t('Unlimited')) + drupal_map_assoc(array(86400, 172800, 345600, 604800, 1209600, 2419200, 4838400, 9676800, 31536000), "format_interval");  $_active = array(0 => t('Closed'), 1 => t('Active'));  if ($admin) {    $form['settings'] = array(      '#type' => 'fieldset',      '#collapsible' => TRUE,      '#title' => t('Poll settings'),      '#weight' => -3,    );    $form['settings']['active'] = array(      '#type' => 'radios',      '#title' => t('Poll status'),      '#default_value' => isset($node->active) ? $node->active : 1,      '#options' => $_active,      '#description' => t('When a poll is closed, visitors can no longer vote for it.')    );  }  $form['settings']['runtime'] = array(    '#type' => 'select',    '#title' => t('Poll duration'),    '#default_value' => isset($node->runtime) ? $node->runtime : 0,    '#options' => $_duration,    '#description' => t('After this period, the poll will be closed automatically.'),  );  return $form;}/** * Submit handler to add more choices to a poll form. This handler is used when * javascript is not available. It makes changes to the form state and the * entire form is rebuilt during the page reload. */function poll_more_choices_submit($form, &$form_state) {  // Set the form to rebuild and run submit handlers.  node_form_submit_build_node($form, $form_state);  // Make the changes we want to the form state.  if ($form_state['values']['poll_more']) {    $n = $_GET['q'] == 'poll/js' ? 1 : 5;    $form_state['choice_count'] = count($form_state['values']['choice']) + $n;  }}function _poll_choice_form($delta, $value = '', $votes = 0) {  $admin = user_access('administer nodes');  $form = array(    '#tree' => TRUE,  );  // We'll manually set the #parents property of these fields so that  // their values appear in the $form_state['values']['choice'] array.  $form['chtext'] = array(    '#type' => 'textfield',    '#title' => t('Choice @n', array('@n' => ($delta + 1))),    '#default_value' => $value,    '#parents' => array('choice', $delta, 'chtext'),  );  if ($admin) {    $form['chvotes'] = array(      '#type' => 'textfield',      '#title' => t('Votes for choice @n', array('@n' => ($delta + 1))),      '#default_value' => $votes,      '#size' => 5,      '#maxlength' => 7,      '#parents' => array('choice', $delta, 'chvotes'),    );  }  return $form;}/** * Menu callback for AHAH additions. */function poll_choice_js() {  include_once 'modules/node/node.pages.inc';  $form_state = array('storage' => NULL, 'submitted' => FALSE);  $form_build_id = $_POST['form_build_id'];  // Get the form from the cache.  $form = form_get_cache($form_build_id, $form_state);  $args = $form['#parameters'];  $form_id = array_shift($args);  // We will run some of the submit handlers so we need to disable redirecting.  $form['#redirect'] = FALSE;  // We need to process the form, prepare for that by setting a few internals  // variables.  $form['#post'] = $_POST;  $form['#programmed'] = FALSE;  $form_state['post'] = $_POST;  // Build, validate and if possible, submit the form.  drupal_process_form($form_id, $form, $form_state);  // This call recreates the form relying solely on the form_state that the  // drupal_process_form set up.  $form = drupal_rebuild_form($form_id, $form_state, $args, $form_build_id);  // Render the new output.  $choice_form = $form['choice_wrapper']['choice'];  unset($choice_form['#prefix'], $choice_form['#suffix']); // Prevent duplicate wrappers.  $output = theme('status_messages') . drupal_render($choice_form);  drupal_json(array('status' => TRUE, 'data' => $output));}/** * Renumbers fields and creates a teaser when a poll node is submitted. */function poll_node_form_submit(&$form, &$form_state) {  // Renumber fields  $form_state['values']['choice'] = array_values($form_state['values']['choice']);  $form_state['values']['teaser'] = poll_teaser((object)$form_state['values']);}/** * Implementation of hook_validate(). */function poll_validate($node) {  if (isset($node->title)) {    // Check for at least two options and validate amount of votes:    $realchoices = 0;    // Renumber fields    $node->choice = array_values($node->choice);    foreach ($node->choice as $i => $choice) {      if ($choice['chtext'] != '') {        $realchoices++;      }      if (isset($choice['chvotes']) && $choice['chvotes'] < 0) {        form_set_error("choice][$i][chvotes", t('Negative values are not allowed.'));      }    }    if ($realchoices < 2) {      form_set_error("choice][$realchoices][chtext", t('You must fill in at least two choices.'));    }  }}/** * Implementation of hook_load(). */function poll_load($node) {  global $user;  $poll = db_fetch_object(db_query("SELECT runtime, active FROM {poll} WHERE nid = %d", $node->nid));  // Load the appropriate choices into the $poll object.  $result = db_query("SELECT chtext, chvotes, chorder FROM {poll_choices} WHERE nid = %d ORDER BY chorder", $node->nid);  while ($choice = db_fetch_array($result)) {    $poll->choice[$choice['chorder']] = $choice;  }  // Determine whether or not this user is allowed to vote.  $poll->allowvotes = FALSE;  if (user_access('vote on polls') && $poll->active) {    if ($user->uid) {      $result = db_fetch_object(db_query('SELECT chorder FROM {poll_votes} WHERE nid = %d AND uid = %d', $node->nid, $user->uid));    }    else {      $result = db_fetch_object(db_query("SELECT chorder FROM {poll_votes} WHERE nid = %d AND hostname = '%s'", $node->nid, ip_address()));    }    if (isset($result->chorder)) {      $poll->vote = $result->chorder;    }    else {      $poll->vote = -1;      $poll->allowvotes = TRUE;    }  }  return $poll;}/** * Implementation of hook_insert(). */function poll_insert($node) {  if (!user_access('administer nodes')) {    // Make sure all votes are 0 initially    foreach ($node->choice as $i => $choice) {      $node->choice[$i]['chvotes'] = 0;    }    $node->active = 1;  }  db_query("INSERT INTO {poll} (nid, runtime, active) VALUES (%d, %d, %d)", $node->nid, $node->runtime, $node->active);  $i = 0;  foreach ($node->choice as $choice) {    if ($choice['chtext'] != '') {      db_query("INSERT INTO {poll_choices} (nid, chtext, chvotes, chorder) VALUES (%d, '%s', %d, %d)", $node->nid, $choice['chtext'], $choice['chvotes'], $i++);    }  }}/** * Implementation of hook_update(). */function poll_update($node) {  // Update poll settings.  db_query('UPDATE {poll} SET runtime = %d, active = %d WHERE nid = %d', $node->runtime, $node->active, $node->nid);  // Clean poll choices.  db_query('DELETE FROM {poll_choices} WHERE nid = %d', $node->nid);  // Poll choices come in the same order with the same numbers as they are in  // the database, but some might have an empty title, which signifies that  // they should be removed. We remove all votes to the removed options, so  // people who voted on them can vote again.  $new_chorder = 0;  foreach ($node->choice as $old_chorder => $choice) {    $chvotes = isset($choice['chvotes']) ? (int)$choice['chvotes'] : 0;    $chtext = $choice['chtext'];    if (!empty($chtext)) {      db_query("INSERT INTO {poll_choices} (nid, chtext, chvotes, chorder) VALUES (%d, '%s', %d, %d)", $node->nid, $chtext, $chvotes, $new_chorder);      if ($new_chorder != $old_chorder) {        // We can only remove items in the middle, not add, so        // new_chorder is always <= old_chorder, making this safe.        db_query("UPDATE {poll_votes} SET chorder = %d WHERE nid = %d AND chorder = %d", $new_chorder, $node->nid, $old_chorder);      }      $new_chorder++;    }    else {      db_query("DELETE FROM {poll_votes} WHERE nid = %d AND chorder = %d", $node->nid, $old_chorder);    }  }}/** * Implementation of hook_delete(). */function poll_delete($node) {  db_query("DELETE FROM {poll} WHERE nid = %d", $node->nid);  db_query("DELETE FROM {poll_choices} WHERE nid = %d", $node->nid);  db_query("DELETE FROM {poll_votes} WHERE nid = %d", $node->nid);}/** * Implementation of hook_view(). * * @param $block *   An extra parameter that adapts the hook to display a block-ready *   rendering of the poll. */function poll_view($node, $teaser = FALSE, $page = FALSE, $block = FALSE) {  global $user;  $output = '';  // Special display for side-block  if ($block) {    // No 'read more' link    $node->readmore = FALSE;    $links = module_invoke_all('link', 'node', $node, 1);    $links[] = array('title' => t('Older polls'), 'href' => 'poll', 'attributes' => array('title' => t('View the list of polls on this site.')));    if ($node->allowvotes && $block) {      $links[] = array('title' => t('Results'), 'href' => 'node/'. $node->nid .'/results', 'attributes' => array('title' => t('View the current poll results.')));    }    $node->links = $links;  }  if (!empty($node->allowvotes) && ($block || empty($node->show_results))) {    $node->content['body'] = array(      '#value' => drupal_get_form('poll_view_voting', $node, $block),    );  }  else {    $node->content['body'] = array(      '#value' => poll_view_results($node, $teaser, $page, $block),    );  }  return $node;}/** * Creates a simple teaser that lists all the choices. * * This is primarily used for RSS. */function poll_teaser($node) {  $teaser = NULL;  if (is_array($node->choice)) {    foreach ($node->choice as $k => $choice) {      if ($choice['chtext'] != '') {        $teaser .= '* '. check_plain($choice['chtext']) ."\n";      }    }  }  return $teaser;}/** * Generates the voting form for a poll. * * @ingroup forms * @see poll_vote() * @see phptemplate_preprocess_poll_vote() */function poll_view_voting(&$form_state, $node, $block) {  if ($node->choice) {    $list = array();    foreach ($node->choice as $i => $choice) {      $list[$i] = check_plain($choice['chtext']);    }    $form['choice'] = array(      '#type' => 'radios',      '#default_value' => -1,      '#options' => $list,    );  }  $form['vote'] = array(    '#type' => 'submit',    '#value' => t('Vote'),    '#submit' => array('poll_vote'),  );  // Store the node so we can get to it in submit functions.  $form['#node'] = $node;  $form['#block'] = $block;  // Set form caching because we could have multiple of these forms on  // the same page, and we want to ensure the right one gets picked.  $form['#cache'] = TRUE;  // Provide a more cleanly named voting form theme.  $form['#theme'] = 'poll_vote';  return $form;}/** * Validation function for processing votes */function poll_view_voting_validate($form, &$form_state) {  if ($form_state['values']['choice'] == -1) {    form_set_error( 'choice', t('Your vote could not be recorded because you did not select any of the choices.'));  }}/** * Submit handler for processing a vote */function poll_vote($form, &$form_state) {  $node = $form['#node'];  $choice = $form_state['values']['choice'];  global $user;  if ($user->uid) {    db_query('INSERT INTO {poll_votes} (nid, chorder, uid) VALUES (%d, %d, %d)', $node->nid, $choice, $user->uid);  }  else {    db_query("INSERT INTO {poll_votes} (nid, chorder, hostname) VALUES (%d, %d, '%s')", $node->nid, $choice, ip_address());  }  // Add one to the votes.  db_query("UPDATE {poll_choices} SET chvotes = chvotes + 1 WHERE nid = %d AND chorder = %d", $node->nid, $choice);  cache_clear_all();  drupal_set_message(t('Your vote was recorded.'));  // Return the user to whatever page they voted from.}/** * Themes the voting form for a poll. * * Inputs: $form */function template_preprocess_poll_vote(&$variables) {  $form = $variables['form'];  $variables['choice'] = drupal_render($form['choice']);  $variables['title'] = check_plain($form['#node']->title);  $variables['vote'] = drupal_render($form['vote']);  $variables['rest'] = drupal_render($form);  $variables['block'] = $form['#block'];  // If this is a block, allow a different tpl.php to be used.  if ($variables['block']) {    $variables['template_files'][] = 'poll-vote-block';  }}/** * Generates a graphical representation of the results of a poll. */function poll_view_results(&$node, $teaser, $page, $block) {  // Count the votes and find the maximum  $total_votes = 0;  $max_votes = 0;  foreach ($node->choice as $choice) {    if (isset($choice['chvotes'])) {      $total_votes += $choice['chvotes'];      $max_votes = max($max_votes, $choice['chvotes']);    }  }  $poll_results = '';  foreach ($node->choice as $i => $choice) {    if (!empty($choice['chtext'])) {      $chvotes = isset($choice['chvotes']) ? $choice['chvotes'] : NULL;      $poll_results .= theme('poll_bar', $choice['chtext'], $chvotes, $total_votes, isset($node->vote) && $node->vote == $i, $block);    }  }  return theme('poll_results', $node->title, $poll_results, $total_votes, isset($node->links) ? $node->links : array(), $block, $node->nid, isset($node->vote) ? $node->vote : NULL);}/** * Theme the admin poll form for choices. * * @ingroup themeable */function theme_poll_choices($form) {  // Change the button title to reflect the behavior when using JavaScript.  drupal_add_js('if (Drupal.jsEnabled) { $(document).ready(function() { $("#edit-poll-more").val("'. t('Add another choice') .'"); }); }', 'inline');  $rows = array();  $headers = array(    t('Choice'),    t('Vote count'),  );  foreach (element_children($form) as $key) {    // No need to print the field title every time.    unset($form[$key]['chtext']['#title'], $form[$key]['chvotes']['#title']);    // Build the table row.    $row = array(      'data' => array(        array('data' => drupal_render($form[$key]['chtext']), 'class' => 'poll-chtext'),        array('data' => drupal_render($form[$key]['chvotes']), 'class' => 'poll-chvotes'),      ),    );    // Add additional attributes to the row, such as a class for this row.    if (isset($form[$key]['#attributes'])) {      $row = array_merge($row, $form[$key]['#attributes']);    }    $rows[] = $row;  }  $output = theme('table', $headers, $rows);  $output .= drupal_render($form);  return $output;}/** * Preprocess the poll_results theme hook. * * Inputs: $raw_title, $results, $votes, $raw_links, $block, $nid, $vote. The * $raw_* inputs to this are naturally unsafe; often safe versions are * made to simply overwrite the raw version, but in this case it seems likely * that the title and the links may be overridden by the theme layer, so they * are left in with a different name for that purpose. * * @see poll-results.tpl.php * @see poll-results-block.tpl.php * @see theme_poll_results() */function template_preprocess_poll_results(&$variables) {  $variables['links'] = theme('links', $variables['raw_links']);  if (isset($variables['vote']) && $variables['vote'] > -1 && user_access('cancel own vote')) {    $variables['cancel_form'] = drupal_get_form('poll_cancel_form', $variables['nid']);  }  $variables['title'] = check_plain($variables['raw_title']);  // If this is a block, allow a different tpl.php to be used.  if ($variables['block']) {    $variables['template_files'][] = 'poll-results-block';  }}/** * Preprocess the poll_bar theme hook. * * Inputs: $title, $votes, $total_votes, $voted, $block * * @see poll-bar.tpl.php * @see poll-bar-block.tpl.php * @see theme_poll_bar() */function template_preprocess_poll_bar(&$variables) {  if ($variables['block']) {    $variables['template_files'][] = 'poll-bar-block';  }  $variables['title'] = check_plain($variables['title']);  $variables['percentage'] = round($variables['votes'] * 100 / max($variables['total_votes'], 1));}/** * Builds the cancel form for a poll. * * @ingroup forms * @see poll_cancel() */function poll_cancel_form(&$form_state, $nid) {  // Store the nid so we can get to it in submit functions.  $form['#nid'] = $nid;  $form['submit'] = array(    '#type' => 'submit',    '#value' => t('Cancel your vote'),    '#submit' => array('poll_cancel')  );  $form['#cache'] = TRUE;  return $form;}/** * Submit callback for poll_cancel_form */function poll_cancel($form, &$form_state) {  $node = node_load($form['#nid']);  global $user;  if ($user->uid) {    db_query('DELETE FROM {poll_votes} WHERE nid = %d and uid = %d', $node->nid, $user->uid);  }  else {    db_query("DELETE FROM {poll_votes} WHERE nid = %d and hostname = '%s'", $node->nid, ip_address());  }  // Subtract from the votes.  db_query("UPDATE {poll_choices} SET chvotes = chvotes - 1 WHERE nid = %d AND chorder = %d", $node->nid, $node->vote);}/** * Implementation of hook_user(). */function poll_user($op, &$edit, &$user) {  if ($op == 'delete') {    db_query('UPDATE {poll_votes} SET uid = 0 WHERE uid = %d', $user->uid);  }}
<?php// $Id$/** * @file * Additional filter for PHP input. *//** * Implementation of hook_help(). */function php_help($path, $arg) {  switch ($path) {    case 'admin/help#php':      $output = '<p>'. t('The PHP filter adds the ability to include PHP code in posts. PHP is a general-purpose scripting language widely-used for web development; the content management system used by this website has been developed using PHP.') .'</p>';      $output .= '<p>'. t('Through the PHP filter, users with the proper permission may include custom PHP code within a page of the site. While this is a powerful and flexible feature if used by a trusted user with PHP experience, it is a significant and dangerous security risk in the hands of a malicious user. Even a trusted user may accidentally compromise the site by entering malformed or incorrect PHP code. Only the most trusted users should be granted permission to use the PHP filter, and all PHP code added through the PHP filter should be carefully examined before use.') .'</p>';      $output .= '<p>'. t('<a href="@drupal">Drupal.org</a> offers <a href="@php-snippets">some example PHP snippets</a>, or you can create your own with some PHP experience and knowledge of the Drupal system.', array('@drupal' => url('http://drupal.org'), '@php-snippets' => url('http://drupal.org/handbook/customization/php-snippets'))) .'</p>';      $output .= '<p>'. t('For more information, see the online handbook entry for <a href="@php">PHP module</a>.', array('@php' => 'http://drupal.org/handbook/modules/php/')) .'</p>';      return $output;  }}/** * Implementation of hook_filter_tips(). */function php_filter_tips($delta, $format, $long = false) {  global $base_url;  if ($delta == 0) {    switch ($long) {      case 0:        return t('You may post PHP code. You should include &lt;?php ?&gt; tags.');      case 1:        $output = '<h4>'. t('Using custom PHP code') .'</h4>';        $output .= '<p>'. t('Custom PHP code may be embedded in some types of site content, including posts and blocks. While embedding PHP code inside a post or block is a powerful and flexible feature when used by a trusted user with PHP experience, it is a significant and dangerous security risk when used improperly. Even a small mistake when posting PHP code may accidentally compromise your site.') .'</p>';        $output .= '<p>'. t('If you are unfamiliar with PHP, SQL, or Drupal, avoid using custom PHP code within posts. Experimenting with PHP may corrupt your database, render your site inoperable, or significantly compromise security.') .'</p>';        $output .= '<p>'. t('Notes:') .'</p>';        $output .= '<ul><li>'. t('Remember to double-check each line for syntax and logic errors <strong>before</strong> saving.') .'</li>';        $output .= '<li>'. t('Statements must be correctly terminated with semicolons.') .'</li>';        $output .= '<li>'. t('Global variables used within your PHP code retain their values after your script executes.') .'</li>';        $output .= '<li>'. t('<code>register_globals</code> is <strong>turned off</strong>. If you need to use forms, understand and use the functions in <a href="@formapi">the Drupal Form API</a>.', array('@formapi' => url('http://api.drupal.org/api/group/form_api/6'))) .'</li>';        $output .= '<li>'. t('Use a <code>print</code> or <code>return</code> statement in your code to output content.') .'</li>';        $output .= '<li>'. t('Develop and test your PHP code using a separate test script and sample database before deploying on a production site.') .'</li>';        $output .= '<li>'. t('Consider including your custom PHP code within a site-specific module or <code>template.php</code> file rather than embedding it directly into a post or block.') .'</li>';        $output .= '<li>'. t('Be aware that the ability to embed PHP code within content is provided by the PHP Filter module. If this module is disabled or deleted, then blocks and posts with embedded PHP may display, rather than execute, the PHP code.') .'</li></ul>';        $output .= '<p>'. t('A basic example: <em>Creating a "Welcome" block that greets visitors with a simple message.</em>') .'</p>';        $output .= '<ul><li>'. t('<p>Add a custom block to your site, named "Welcome". With its input format set to "PHP code" (or another format supporting PHP input), add the following in the Block body:</p><pre>print t(\'Welcome visitor! Thank you for visiting.\');</pre>') .'</li>';        $output .= '<li>'. t('<p>To display the name of a registered user, use this instead:</p><pre>global $user;if ($user->uid) {  print t(\'Welcome @name! Thank you for visiting.\', array(\'@name\' => $user->name));}else {  print t(\'Welcome visitor! Thank you for visiting.\');}</pre>') .'</li></ul>';        $output .= '<p>'. t('<a href="@drupal">Drupal.org</a> offers <a href="@php-snippets">some example PHP snippets</a>, or you can create your own with some PHP experience and knowledge of the Drupal system.', array('@drupal' => url('http://drupal.org'), '@php-snippets' => url('http://drupal.org/handbook/customization/php-snippets'))) .'</p>';        return $output;    }  }}/** * Implementation of hook_filter(). Contains a basic PHP evaluator. * * Executes PHP code. Use with care. */function php_filter($op, $delta = 0, $format = -1, $text = '') {  switch ($op) {    case 'list':      return array(0 => t('PHP evaluator'));    case 'no cache':      // No caching for the PHP evaluator.      return $delta == 0;    case 'description':      return t('Executes a piece of PHP code. The usage of this filter should be restricted to administrators only!');    case 'process':      return drupal_eval($text);    default:      return $text;  }}
<?php// $Id$/** * @file * Admin page callback file for the user module. */function user_admin($callback_arg = '') {  $op = isset($_POST['op']) ? $_POST['op'] : $callback_arg;  switch ($op) {    case t('Create new account'):    case 'create':      $output = drupal_get_form('user_register');      break;    default:      if (!empty($_POST['accounts']) && isset($_POST['operation']) && ($_POST['operation'] == 'delete')) {        $output = drupal_get_form('user_multiple_delete_confirm');      }      else {        $output = drupal_get_form('user_filter_form');        $output .= drupal_get_form('user_admin_account');      }  }  return $output;}/** * Form builder; Return form for user administration filters. * * @ingroup forms * @see user_filter_form_submit() */function user_filter_form() {  $session = &$_SESSION['user_overview_filter'];  $session = is_array($session) ? $session : array();  $filters = user_filters();  $i = 0;  $form['filters'] = array(    '#type' => 'fieldset',    '#title' => t('Show only users where'),    '#theme' => 'user_filters',  );  foreach ($session as $filter) {    list($type, $value) = $filter;    // Merge an array of arrays into one if necessary.    $options = $type == 'permission' ? call_user_func_array('array_merge', $filters[$type]['options']) : $filters[$type]['options'];    $params = array('%property' => $filters[$type]['title'] , '%value' => $options[$value]);    if ($i++ > 0) {      $form['filters']['current'][] = array('#value' => t('<em>and</em> where <strong>%property</strong> is <strong>%value</strong>', $params));    }    else {      $form['filters']['current'][] = array('#value' => t('<strong>%property</strong> is <strong>%value</strong>', $params));    }  }  foreach ($filters as $key => $filter) {    $names[$key] = $filter['title'];    $form['filters']['status'][$key] = array(      '#type' => 'select',      '#options' => $filter['options'],    );  }  $form['filters']['filter'] = array(    '#type' => 'radios',    '#options' => $names,  );  $form['filters']['buttons']['submit'] = array(    '#type' => 'submit',    '#value' => (count($session) ? t('Refine') : t('Filter')),  );  if (count($session)) {    $form['filters']['buttons']['undo'] = array(      '#type' => 'submit',      '#value' => t('Undo'),    );    $form['filters']['buttons']['reset'] = array(      '#type' => 'submit',      '#value' => t('Reset'),    );  }  drupal_add_js('misc/form.js', 'core');  return $form;}/** * Process result from user administration filter form. */function user_filter_form_submit($form, &$form_state) {  $op = $form_state['values']['op'];  $filters = user_filters();  switch ($op) {    case t('Filter'): case t('Refine'):      if (isset($form_state['values']['filter'])) {        $filter = $form_state['values']['filter'];        // Merge an array of arrays into one if necessary.        $options = $filter == 'permission' ? call_user_func_array('array_merge', $filters[$filter]['options']) : $filters[$filter]['options'];        if (isset($options[$form_state['values'][$filter]])) {          $_SESSION['user_overview_filter'][] = array($filter, $form_state['values'][$filter]);        }      }      break;    case t('Undo'):      array_pop($_SESSION['user_overview_filter']);      break;    case t('Reset'):      $_SESSION['user_overview_filter'] = array();      break;    case t('Update'):      return;  }  $form_state['redirect'] = 'admin/user/user';  return;}/** * Form builder; User administration page. * * @ingroup forms * @see user_admin_account_validate() * @see user_admin_account_submit() */function user_admin_account() {  $filter = user_build_filter_query();  $header = array(    array(),    array('data' => t('Username'), 'field' => 'u.name'),    array('data' => t('Status'), 'field' => 'u.status'),    t('Roles'),    array('data' => t('Member for'), 'field' => 'u.created', 'sort' => 'desc'),    array('data' => t('Last access'), 'field' => 'u.access'),    t('Operations')  );  if ($filter['join'] != "") {    $sql = 'SELECT DISTINCT u.uid, u.name, u.status, u.created, u.access FROM {users} u LEFT JOIN {users_roles} ur ON u.uid = ur.uid '. $filter['join'] .' WHERE u.uid != 0 '. $filter['where'];    $query_count = 'SELECT COUNT(DISTINCT u.uid) FROM {users} u LEFT JOIN {users_roles} ur ON u.uid = ur.uid '. $filter['join'] .' WHERE u.uid != 0 '. $filter['where'];  }  else {    $sql = 'SELECT u.uid, u.name, u.status, u.created, u.access FROM {users} u WHERE u.uid != 0 '. $filter['where'];    $query_count = 'SELECT COUNT(u.uid) FROM {users} u WHERE u.uid != 0 '. $filter['where'];  }    $sql .= tablesort_sql($header);  $result = pager_query($sql, 50, 0, $query_count, $filter['args']);  $form['options'] = array(    '#type' => 'fieldset',    '#title' => t('Update options'),    '#prefix' => '<div class="container-inline">',    '#suffix' => '</div>',  );  $options = array();  foreach (module_invoke_all('user_operations') as $operation => $array) {    $options[$operation] = $array['label'];  }  $form['options']['operation'] = array(    '#type' => 'select',    '#options' => $options,    '#default_value' => 'unblock',  );  $form['options']['submit'] = array(    '#type' => 'submit',    '#value' => t('Update'),  );  $destination = drupal_get_destination();  $status = array(t('blocked'), t('active'));  $roles = user_roles(TRUE);  $accounts = array();  while ($account = db_fetch_object($result)) {    $accounts[$account->uid] = '';    $form['name'][$account->uid] = array('#value' => theme('username', $account));    $form['status'][$account->uid] =  array('#value' => $status[$account->status]);    $users_roles = array();    $roles_result = db_query('SELECT rid FROM {users_roles} WHERE uid = %d', $account->uid);    while ($user_role = db_fetch_object($roles_result)) {      $users_roles[] = $roles[$user_role->rid];    }    asort($users_roles);    $form['roles'][$account->uid][0] = array('#value' => theme('item_list', $users_roles));    $form['member_for'][$account->uid] = array('#value' => format_interval(time() - $account->created));    $form['last_access'][$account->uid] =  array('#value' => $account->access ? t('@time ago', array('@time' => format_interval(time() - $account->access))) : t('never'));    $form['operations'][$account->uid] = array('#value' => l(t('edit'), "user/$account->uid/edit", array('query' => $destination)));  }  $form['accounts'] = array(    '#type' => 'checkboxes',    '#options' => $accounts  );  $form['pager'] = array('#value' => theme('pager', NULL, 50, 0));  return $form;}/** * Submit the user administration update form. */function user_admin_account_submit($form, &$form_state) {  $operations = module_invoke_all('user_operations', $form_state);  $operation = $operations[$form_state['values']['operation']];  // Filter out unchecked accounts.  $accounts = array_filter($form_state['values']['accounts']);  if ($function = $operation['callback']) {    // Add in callback arguments if present.    if (isset($operation['callback arguments'])) {      $args = array_merge(array($accounts), $operation['callback arguments']);    }    else {      $args = array($accounts);    }    call_user_func_array($function, $args);    drupal_set_message(t('The update has been performed.'));  }}function user_admin_account_validate($form, &$form_state) {  $form_state['values']['accounts'] = array_filter($form_state['values']['accounts']);  if (count($form_state['values']['accounts']) == 0) {    form_set_error('', t('No users selected.'));  }}/** * Form builder; Configure user settings for this site. * * @ingroup forms * @see system_settings_form() */function user_admin_settings() {  // User registration settings.  $form['registration'] = array('#type' => 'fieldset', '#title' => t('User registration settings'));  $form['registration']['user_register'] = array('#type' => 'radios', '#title' => t('Public registrations'), '#default_value' => variable_get('user_register', 1), '#options' => array(t('Only site administrators can create new user accounts.'), t('Visitors can create accounts and no administrator approval is required.'), t('Visitors can create accounts but administrator approval is required.')));  $form['registration']['user_email_verification'] = array('#type' => 'checkbox', '#title' => t('Require e-mail verification when a visitor creates an account'), '#default_value' => variable_get('user_email_verification', TRUE), '#description' => t('If this box is checked, new users will be required to validate their e-mail address prior to logging into the site, and will be assigned a system-generated password. With it unchecked, users will be logged in immediately upon registering, and may select their own passwords during registration.'));  $form['registration']['user_registration_help'] = array('#type' => 'textarea', '#title' => t('User registration guidelines'), '#default_value' => variable_get('user_registration_help', ''), '#description' => t('This text is displayed at the top of the user registration form and is useful for helping or instructing your users.'));  // User e-mail settings.  $form['email'] = array(    '#type' => 'fieldset',    '#title' => t('User e-mail settings'),    '#description' => t('Drupal sends emails whenever new users register on your site, and optionally, may also notify users after other account actions. Using a simple set of content templates, notification e-mails can be customized to fit the specific needs of your site.'),  );  // These email tokens are shared for all settings, so just define  // the list once to help ensure they stay in sync.  $email_token_help = t('Available variables are:') .' !username, !site, !password, !uri, !uri_brief, !mailto, !date, !login_uri, !edit_uri, !login_url.';  $form['email']['admin_created'] = array(    '#type' => 'fieldset',    '#title' => t('Welcome, new user created by administrator'),    '#collapsible' => TRUE,    '#collapsed' => (variable_get('user_register', 1) != 0),    '#description' => t('Customize welcome e-mail messages sent to new member accounts created by an administrator.') .' '. $email_token_help,  );  $form['email']['admin_created']['user_mail_register_admin_created_subject'] = array(    '#type' => 'textfield',    '#title' => t('Subject'),    '#default_value' => _user_mail_text('register_admin_created_subject'),    '#maxlength' => 180,  );  $form['email']['admin_created']['user_mail_register_admin_created_body'] = array(    '#type' => 'textarea',    '#title' => t('Body'),    '#default_value' => _user_mail_text('register_admin_created_body'),    '#rows' => 15,  );  $form['email']['no_approval_required'] = array(    '#type' => 'fieldset',    '#title' => t('Welcome, no approval required'),    '#collapsible' => TRUE,    '#collapsed' => (variable_get('user_register', 1) != 1),    '#description' => t('Customize welcome e-mail messages sent to new members upon registering, when no administrator approval is required.') .' '. $email_token_help  );  $form['email']['no_approval_required']['user_mail_register_no_approval_required_subject'] = array(    '#type' => 'textfield',    '#title' => t('Subject'),    '#default_value' => _user_mail_text('register_no_approval_required_subject'),    '#maxlength' => 180,  );  $form['email']['no_approval_required']['user_mail_register_no_approval_required_body'] = array(    '#type' => 'textarea',    '#title' => t('Body'),    '#default_value' => _user_mail_text('register_no_approval_required_body'),    '#rows' => 15,  );  $form['email']['pending_approval'] = array(    '#type' => 'fieldset',    '#title' => t('Welcome, awaiting administrator approval'),    '#collapsible' => TRUE,    '#collapsed' => (variable_get('user_register', 1) != 2),    '#description' => t('Customize welcome e-mail messages sent to new members upon registering, when administrative approval is required.') .' '. $email_token_help,  );  $form['email']['pending_approval']['user_mail_register_pending_approval_subject'] = array(    '#type' => 'textfield',    '#title' => t('Subject'),    '#default_value' => _user_mail_text('register_pending_approval_subject'),    '#maxlength' => 180,  );  $form['email']['pending_approval']['user_mail_register_pending_approval_body'] = array(    '#type' => 'textarea',    '#title' => t('Body'),    '#default_value' => _user_mail_text('register_pending_approval_body'),    '#rows' => 8,  );  $form['email']['password_reset'] = array(    '#type' => 'fieldset',    '#title' => t('Password recovery email'),    '#collapsible' => TRUE,    '#collapsed' => TRUE,    '#description' => t('Customize e-mail messages sent to users who request a new password.') .' '. $email_token_help,  );  $form['email']['password_reset']['user_mail_password_reset_subject'] = array(    '#type' => 'textfield',    '#title' => t('Subject'),    '#default_value' => _user_mail_text('password_reset_subject'),    '#maxlength' => 180,  );  $form['email']['password_reset']['user_mail_password_reset_body'] = array(    '#type' => 'textarea',    '#title' => t('Body'),    '#default_value' => _user_mail_text('password_reset_body'),    '#rows' => 12,  );  $form['email']['activated'] = array(    '#type' => 'fieldset',    '#title' => t('Account activation email'),    '#collapsible' => TRUE,    '#collapsed' => TRUE,    '#description' => t('Enable and customize e-mail messages sent to users upon account activation (when an administrator activates an account of a user who has already registered, on a site where administrative approval is required).') .' '. $email_token_help,  );  $form['email']['activated']['user_mail_status_activated_notify'] = array(    '#type' => 'checkbox',    '#title' => t('Notify user when account is activated.'),    '#default_value' => variable_get('user_mail_status_activated_notify', TRUE),  );  $form['email']['activated']['user_mail_status_activated_subject'] = array(    '#type' => 'textfield',    '#title' => t('Subject'),    '#default_value' => _user_mail_text('status_activated_subject'),    '#maxlength' => 180,  );  $form['email']['activated']['user_mail_status_activated_body'] = array(    '#type' => 'textarea',    '#title' => t('Body'),    '#default_value' => _user_mail_text('status_activated_body'),    '#rows' => 15,  );  $form['email']['blocked'] = array(    '#type' => 'fieldset',    '#title' => t('Account blocked email'),    '#collapsible' => TRUE,    '#collapsed' => TRUE,    '#description' => t('Enable and customize e-mail messages sent to users when their accounts are blocked.') .' '. $email_token_help,  );  $form['email']['blocked']['user_mail_status_blocked_notify'] = array(    '#type' => 'checkbox',    '#title' => t('Notify user when account is blocked.'),    '#default_value' => variable_get('user_mail_status_blocked_notify', FALSE),  );  $form['email']['blocked']['user_mail_status_blocked_subject'] = array(    '#type' => 'textfield',    '#title' => t('Subject'),    '#default_value' => _user_mail_text('status_blocked_subject'),    '#maxlength' => 180,  );  $form['email']['blocked']['user_mail_status_blocked_body'] = array(    '#type' => 'textarea',    '#title' => t('Body'),    '#default_value' => _user_mail_text('status_blocked_body'),    '#rows' => 3,  );  $form['email']['deleted'] = array(    '#type' => 'fieldset',    '#title' => t('Account deleted email'),    '#collapsible' => TRUE,    '#collapsed' => TRUE,    '#description' => t('Enable and customize e-mail messages sent to users when their accounts are deleted.') .' '. $email_token_help,  );  $form['email']['deleted']['user_mail_status_deleted_notify'] = array(    '#type' => 'checkbox',    '#title' => t('Notify user when account is deleted.'),    '#default_value' => variable_get('user_mail_status_deleted_notify', FALSE),  );  $form['email']['deleted']['user_mail_status_deleted_subject'] = array(    '#type' => 'textfield',    '#title' => t('Subject'),    '#default_value' => _user_mail_text('status_deleted_subject'),    '#maxlength' => 180,  );  $form['email']['deleted']['user_mail_status_deleted_body'] = array(    '#type' => 'textarea',    '#title' => t('Body'),    '#default_value' => _user_mail_text('status_deleted_body'),    '#rows' => 3,  );  // User signatures.  $form['signatures'] = array(    '#type' => 'fieldset',    '#title' => t('Signatures'),  );  $form['signatures']['user_signatures'] = array(    '#type' => 'radios',    '#title' => t('Signature support'),    '#default_value' => variable_get('user_signatures', 0),    '#options' => array(t('Disabled'), t('Enabled')),  );  // If picture support is enabled, check whether the picture directory exists:  if (variable_get('user_pictures', 0)) {    $picture_path = file_create_path(variable_get('user_picture_path', 'pictures'));    file_check_directory($picture_path, 1, 'user_picture_path');  }  $form['pictures'] = array(    '#type' => 'fieldset',    '#title' => t('Pictures'),  );  $picture_support = variable_get('user_pictures', 0);  $form['pictures']['user_pictures'] = array(    '#type' => 'radios',    '#title' => t('Picture support'),    '#default_value' => $picture_support,    '#options' => array(t('Disabled'), t('Enabled')),    '#prefix' => '<div class="user-admin-picture-radios">',    '#suffix' => '</div>',  );  drupal_add_js(drupal_get_path('module', 'user') .'/user.js');  // If JS is enabled, and the radio is defaulting to off, hide all  // the settings on page load via .css using the js-hide class so  // that there's no flicker.  $css_class = 'user-admin-picture-settings';  if (!$picture_support) {    $css_class .= ' js-hide';  }  $form['pictures']['settings'] = array(    '#prefix' => '<div class="'. $css_class .'">',    '#suffix' => '</div>',  );  $form['pictures']['settings']['user_picture_path'] = array(    '#type' => 'textfield',    '#title' => t('Picture image path'),    '#default_value' => variable_get('user_picture_path', 'pictures'),    '#size' => 30,    '#maxlength' => 255,    '#description' => t('Subdirectory in the directory %dir where pictures will be stored.', array('%dir' => file_directory_path() .'/')),  );  $form['pictures']['settings']['user_picture_default'] = array(    '#type' => 'textfield',    '#title' => t('Default picture'),    '#default_value' => variable_get('user_picture_default', ''),    '#size' => 30,    '#maxlength' => 255,    '#description' => t('URL of picture to display for users with no custom picture selected. Leave blank for none.'),  );  $form['pictures']['settings']['user_picture_dimensions'] = array(    '#type' => 'textfield',    '#title' => t('Picture maximum dimensions'),    '#default_value' => variable_get('user_picture_dimensions', '85x85'),    '#size' => 15,    '#maxlength' => 10,    '#description' => t('Maximum dimensions for pictures, in pixels.'),  );  $form['pictures']['settings']['user_picture_file_size'] = array(    '#type' => 'textfield',    '#title' => t('Picture maximum file size'),    '#default_value' => variable_get('user_picture_file_size', '30'),    '#size' => 15,    '#maxlength' => 10,    '#description' => t('Maximum file size for pictures, in kB.'),  );  $form['pictures']['settings']['user_picture_guidelines'] = array(    '#type' => 'textarea',    '#title' => t('Picture guidelines'),    '#default_value' => variable_get('user_picture_guidelines', ''),    '#description' => t("This text is displayed at the picture upload form in addition to the default guidelines. It's useful for helping or instructing your users."),  );  return system_settings_form($form);}/** * Menu callback: administer permissions. * * @ingroup forms * @see user_admin_perm_submit() * @see theme_user_admin_perm() */function user_admin_perm($form_state, $rid = NULL) {  if (is_numeric($rid)) {    $result = db_query('SELECT r.rid, p.perm FROM {role} r LEFT JOIN {permission} p ON r.rid = p.rid WHERE r.rid = %d', $rid);  }  else {    $result = db_query('SELECT r.rid, p.perm FROM {role} r LEFT JOIN {permission} p ON r.rid = p.rid ORDER BY name');  }  // Compile role array:  // Add a comma at the end so when searching for a permission, we can  // always search for "$perm," to make sure we do not confuse  // permissions that are substrings of each other.  while ($role = db_fetch_object($result)) {    $role_permissions[$role->rid] = $role->perm .',';  }  // Retrieve role names for columns.  $role_names = user_roles();  if (is_numeric($rid)) {    $role_names = array($rid => $role_names[$rid]);  }  // Render role/permission overview:  $options = array();  foreach (module_list(FALSE, FALSE, TRUE) as $module) {    if ($permissions = module_invoke($module, 'perm')) {      $form['permission'][] = array(        '#value' => $module,      );      asort($permissions);      foreach ($permissions as $perm) {        $options[$perm] = '';        $form['permission'][$perm] = array('#value' => t($perm));        foreach ($role_names as $rid => $name) {          // Builds arrays for checked boxes for each role          if (strpos($role_permissions[$rid], $perm .',') !== FALSE) {            $status[$rid][] = $perm;          }        }      }    }  }  // Have to build checkboxes here after checkbox arrays are built  foreach ($role_names as $rid => $name) {    $form['checkboxes'][$rid] = array('#type' => 'checkboxes', '#options' => $options, '#default_value' => isset($status[$rid]) ? $status[$rid] : array());    $form['role_names'][$rid] = array('#value' => $name, '#tree' => TRUE);  }  $form['submit'] = array('#type' => 'submit', '#value' => t('Save permissions'));  return $form;}function user_admin_perm_submit($form, &$form_state) {  // Save permissions:  $result = db_query('SELECT * FROM {role}');  while ($role = db_fetch_object($result)) {    if (isset($form_state['values'][$role->rid])) {      // Delete, so if we clear every checkbox we reset that role;      // otherwise permissions are active and denied everywhere.      db_query('DELETE FROM {permission} WHERE rid = %d', $role->rid);      $form_state['values'][$role->rid] = array_filter($form_state['values'][$role->rid]);      if (count($form_state['values'][$role->rid])) {        db_query("INSERT INTO {permission} (rid, perm) VALUES (%d, '%s')", $role->rid, implode(', ', array_keys($form_state['values'][$role->rid])));      }    }  }  drupal_set_message(t('The changes have been saved.'));  // Clear the cached pages  cache_clear_all();}/** * Theme the administer permissions page. * * @ingroup themeable */function theme_user_admin_perm($form) {  $roles = user_roles();  foreach (element_children($form['permission']) as $key) {    // Don't take form control structures    if (is_array($form['permission'][$key])) {      $row = array();      // Module name      if (is_numeric($key)) {        $row[] = array('data' => t('@module module', array('@module' => drupal_render($form['permission'][$key]))), 'class' => 'module', 'id' => 'module-'. $form['permission'][$key]['#value'], 'colspan' => count($form['role_names']) + 1);      }      else {        $row[] = array('data' => drupal_render($form['permission'][$key]), 'class' => 'permission');        foreach (element_children($form['checkboxes']) as $rid) {          if (is_array($form['checkboxes'][$rid])) {            $row[] = array('data' => drupal_render($form['checkboxes'][$rid][$key]), 'class' => 'checkbox', 'title' => $roles[$rid] .' : '. t($key));          }        }      }      $rows[] = $row;    }  }  $header[] = (t('Permission'));  foreach (element_children($form['role_names']) as $rid) {    if (is_array($form['role_names'][$rid])) {      $header[] = array('data' => drupal_render($form['role_names'][$rid]), 'class' => 'checkbox');    }  }  $output = theme('table', $header, $rows, array('id' => 'permissions'));  $output .= drupal_render($form);  return $output;}/** * Menu callback: administer roles. * * @ingroup forms * @see user_admin_role_validate() * @see user_admin_role_submit() * @see theme_user_admin_new_role() */function user_admin_role() {  $rid = arg(4);  if ($rid) {    if ($rid == DRUPAL_ANONYMOUS_RID || $rid == DRUPAL_AUTHENTICATED_RID) {      drupal_goto('admin/user/roles');    }    // Display the edit role form.    $role = db_fetch_object(db_query('SELECT * FROM {role} WHERE rid = %d', $rid));    $form['name'] = array(      '#type' => 'textfield',      '#title' => t('Role name'),      '#default_value' => $role->name,      '#size' => 30,      '#required' => TRUE,      '#maxlength' => 64,      '#description' => t('The name for this role. Example: "moderator", "editorial board", "site architect".'),    );    $form['rid'] = array(      '#type' => 'value',      '#value' => $rid,    );    $form['submit'] = array(      '#type' => 'submit',      '#value' => t('Save role'),    );    $form['delete'] = array(      '#type' => 'submit',      '#value' => t('Delete role'),    );  }  else {    $form['name'] = array(      '#type' => 'textfield',      '#size' => 32,      '#maxlength' => 64,    );    $form['submit'] = array(      '#type' => 'submit',      '#value' => t('Add role'),    );    $form['#submit'][] = 'user_admin_role_submit';    $form['#validate'][] = 'user_admin_role_validate';  }  return $form;}function user_admin_role_validate($form, &$form_state) {  if ($form_state['values']['name']) {    if ($form_state['values']['op'] == t('Save role')) {      if (db_result(db_query("SELECT COUNT(*) FROM {role} WHERE name = '%s' AND rid != %d", $form_state['values']['name'], $form_state['values']['rid']))) {        form_set_error('name', t('The role name %name already exists. Please choose another role name.', array('%name' => $form_state['values']['name'])));      }    }    else if ($form_state['values']['op'] == t('Add role')) {      if (db_result(db_query("SELECT COUNT(*) FROM {role} WHERE name = '%s'", $form_state['values']['name']))) {        form_set_error('name', t('The role name %name already exists. Please choose another role name.', array('%name' => $form_state['values']['name'])));      }    }  }  else {    form_set_error('name', t('You must specify a valid role name.'));  }}function user_admin_role_submit($form, &$form_state) {  if ($form_state['values']['op'] == t('Save role')) {    db_query("UPDATE {role} SET name = '%s' WHERE rid = %d", $form_state['values']['name'], $form_state['values']['rid']);    drupal_set_message(t('The role has been renamed.'));  }  else if ($form_state['values']['op'] == t('Delete role')) {    db_query('DELETE FROM {role} WHERE rid = %d', $form_state['values']['rid']);    db_query('DELETE FROM {permission} WHERE rid = %d', $form_state['values']['rid']);    // Update the users who have this role set:    db_query('DELETE FROM {users_roles} WHERE rid = %d', $form_state['values']['rid']);    drupal_set_message(t('The role has been deleted.'));  }  else if ($form_state['values']['op'] == t('Add role')) {    db_query("INSERT INTO {role} (name) VALUES ('%s')", $form_state['values']['name']);    drupal_set_message(t('The role has been added.'));  }  $form_state['redirect'] = 'admin/user/roles';  return;}/** * Menu callback: list all access rules */function user_admin_access_check() {  $output = drupal_get_form('user_admin_check_user');  $output .= drupal_get_form('user_admin_check_mail');  $output .= drupal_get_form('user_admin_check_host');  return $output;}/** * Menu callback: add an access rule. */function user_admin_access_add($mask = NULL, $type = NULL) {  $edit = array();  $edit['aid'] = 0;  $edit['mask'] = $mask;  $edit['type'] = $type;  return drupal_get_form('user_admin_access_add_form', $edit, t('Add rule'));}/** * Menu callback: edit an access rule. */function user_admin_access_edit($aid = 0) {  $edit = db_fetch_array(db_query('SELECT aid, type, status, mask FROM {access} WHERE aid = %d', $aid));  return drupal_get_form('user_admin_access_edit_form', $edit, t('Save rule'));}/** * Form builder; Configure access rules. * * @ingroup forms */function user_admin_access_form(&$form_state, $edit, $submit) {  $form = array();  $form['aid'] = array(    '#type' => 'value',    '#value' => $edit['aid'],  );  $form['status'] = array(    '#type' => 'radios',    '#title' => t('Access type'),    '#default_value' => isset($edit['status']) ? $edit['status'] : 0,    '#options' => array('1' => t('Allow'), '0' => t('Deny')),  );  $type_options = array('user' => t('Username'), 'mail' => t('E-mail'), 'host' => t('Host'));  $form['type'] = array(    '#type' => 'radios',    '#title' => t('Rule type'),    '#default_value' => (isset($type_options[$edit['type']]) ? $edit['type'] : 'user'),    '#options' => $type_options,  );  $form['mask'] = array(    '#type' => 'textfield',    '#title' => t('Mask'),    '#size' => 30,    '#maxlength' => 64,    '#default_value' => $edit['mask'],    '#description' => '%: '. t('Matches any number of characters, even zero characters') .'.<br />_: '. t('Matches exactly one character.'),    '#required' => TRUE,  );  $form['submit'] = array('#type' => 'submit', '#value' => $submit);  $form['#submit'] = array('user_admin_access_form_submit');  return $form;}/** * Submit callback for user_admin_access_form(). */function user_admin_access_form_submit($form, &$form_state) {  $edit = $form_state['values'];  if ($edit['aid']) {    db_query("UPDATE {access} SET mask = '%s', type = '%s', status = '%s' WHERE aid = %d", $edit['mask'], $edit['type'], $edit['status'], $edit['aid']);    drupal_set_message(t('The access rule has been saved.'));  }  else {    db_query("INSERT INTO {access} (mask, type, status) VALUES ('%s', '%s', %d)", $edit['mask'], $edit['type'], $edit['status']);    drupal_set_message(t('The access rule has been added.'));  }  $form_state['redirect'] = 'admin/user/rules';}function user_admin_access_check_validate($form, &$form_state) {  if (empty($form_state['values']['test'])) {    form_set_error($form_state['values']['type'], t('No value entered. Please enter a test string and try again.'));  }}function user_admin_check_user() {  $form['user'] = array('#type' => 'fieldset', '#title' => t('Username'));  $form['user']['test'] = array('#type' => 'textfield', '#title' => '', '#description' => t('Enter a username to check if it will be denied or allowed.'), '#size' => 30, '#maxlength' => USERNAME_MAX_LENGTH);  $form['user']['type'] = array('#type' => 'hidden', '#value' => 'user');  $form['user']['submit'] = array('#type' => 'submit', '#value' => t('Check username'));  $form['#submit'][] = 'user_admin_access_check_submit';  $form['#validate'][] = 'user_admin_access_check_validate';  $form['#theme'] = 'user_admin_access_check';  return $form;}function user_admin_check_mail() {  $form['mail'] = array('#type' => 'fieldset', '#title' => t('E-mail'));  $form['mail']['test'] = array('#type' => 'textfield', '#title' => '', '#description' => t('Enter an e-mail address to check if it will be denied or allowed.'), '#size' => 30, '#maxlength' => EMAIL_MAX_LENGTH);  $form['mail']['type'] = array('#type' => 'hidden', '#value' => 'mail');  $form['mail']['submit'] = array('#type' => 'submit', '#value' => t('Check e-mail'));  $form['#submit'][] = 'user_admin_access_check_submit';  $form['#validate'][] = 'user_admin_access_check_validate';  $form['#theme'] = 'user_admin_access_check';  return $form;}function user_admin_check_host() {  $form['host'] = array('#type' => 'fieldset', '#title' => t('Hostname'));  $form['host']['test'] = array('#type' => 'textfield', '#title' => '', '#description' => t('Enter a hostname or IP address to check if it will be denied or allowed.'), '#size' => 30, '#maxlength' => 64);  $form['host']['type'] = array('#type' => 'hidden', '#value' => 'host');  $form['host']['submit'] = array('#type' => 'submit', '#value' => t('Check hostname'));  $form['#submit'][] = 'user_admin_access_check_submit';  $form['#validate'][] = 'user_admin_access_check_validate';  $form['#theme'] = 'user_admin_access_check';  return $form;}function user_admin_access_check_submit($form, &$form_state) {  switch ($form_state['values']['type']) {    case 'user':      if (drupal_is_denied('user', $form_state['values']['test'])) {        drupal_set_message(t('The username %name is not allowed.', array('%name' => $form_state['values']['test'])));      }      else {        drupal_set_message(t('The username %name is allowed.', array('%name' => $form_state['values']['test'])));      }      break;    case 'mail':      if (drupal_is_denied('mail', $form_state['values']['test'])) {        drupal_set_message(t('The e-mail address %mail is not allowed.', array('%mail' => $form_state['values']['test'])));      }      else {        drupal_set_message(t('The e-mail address %mail is allowed.', array('%mail' => $form_state['values']['test'])));      }      break;    case 'host':      if (drupal_is_denied('host', $form_state['values']['test'])) {        drupal_set_message(t('The hostname %host is not allowed.', array('%host' => $form_state['values']['test'])));      }      else {        drupal_set_message(t('The hostname %host is allowed.', array('%host' => $form_state['values']['test'])));      }      break;    default:      break;  }}/** * Menu callback: delete an access rule * * @ingroup forms * @see user_admin_access_delete_confirm_submit() */function user_admin_access_delete_confirm($form_state, $aid = 0) {  $access_types = array('user' => t('username'), 'mail' => t('e-mail'), 'host' => t('host'));  $edit = db_fetch_object(db_query('SELECT aid, type, status, mask FROM {access} WHERE aid = %d', $aid));  $form = array();  $form['aid'] = array('#type' => 'hidden', '#value' => $aid);  $output = confirm_form($form,                  t('Are you sure you want to delete the @type rule for %rule?', array('@type' => $access_types[$edit->type], '%rule' => $edit->mask)),                  'admin/user/rules',                  t('This action cannot be undone.'),                  t('Delete'),                  t('Cancel'));  return $output;}function user_admin_access_delete_confirm_submit($form, &$form_state) {  db_query('DELETE FROM {access} WHERE aid = %d', $form_state['values']['aid']);  drupal_set_message(t('The access rule has been deleted.'));  $form_state['redirect'] = 'admin/user/rules';  return;}/** * Menu callback: list all access rules */function user_admin_access() {  $header = array(array('data' => t('Access type'), 'field' => 'status'), array('data' => t('Rule type'), 'field' => 'type'), array('data' => t('Mask'), 'field' => 'mask'), array('data' => t('Operations'), 'colspan' => 2));  $result = db_query("SELECT aid, type, status, mask FROM {access}". tablesort_sql($header));  $access_types = array('user' => t('username'), 'mail' => t('e-mail'), 'host' => t('host'));  $rows = array();  while ($rule = db_fetch_object($result)) {    $rows[] = array($rule->status ? t('allow') : t('deny'), $access_types[$rule->type], $rule->mask, l(t('edit'), 'admin/user/rules/edit/'. $rule->aid), l(t('delete'), 'admin/user/rules/delete/'. $rule->aid));  }  if (empty($rows)) {    $rows[] = array(array('data' => '<em>'. t('There are currently no access rules.') .'</em>', 'colspan' => 5));  }  return theme('table', $header, $rows);}/** * Theme user administration overview. * * @ingroup themeable */function theme_user_admin_account($form) {  // Overview table:  $header = array(    theme('table_select_header_cell'),    array('data' => t('Username'), 'field' => 'u.name'),    array('data' => t('Status'), 'field' => 'u.status'),    t('Roles'),    array('data' => t('Member for'), 'field' => 'u.created', 'sort' => 'desc'),    array('data' => t('Last access'), 'field' => 'u.access'),    t('Operations')  );  $output = drupal_render($form['options']);  if (isset($form['name']) && is_array($form['name'])) {    foreach (element_children($form['name']) as $key) {      $rows[] = array(        drupal_render($form['accounts'][$key]),        drupal_render($form['name'][$key]),        drupal_render($form['status'][$key]),        drupal_render($form['roles'][$key]),        drupal_render($form['member_for'][$key]),        drupal_render($form['last_access'][$key]),        drupal_render($form['operations'][$key]),      );    }  }  else {    $rows[] = array(array('data' => t('No users available.'), 'colspan' => '7'));  }  $output .= theme('table', $header, $rows);  if ($form['pager']['#value']) {    $output .= drupal_render($form['pager']);  }  $output .= drupal_render($form);  return $output;}/** * Theme the new-role form. * * @ingroup themeable */function theme_user_admin_new_role($form) {  $header = array(t('Name'), array('data' => t('Operations'), 'colspan' => 2));  foreach (user_roles() as $rid => $name) {    $edit_permissions = l(t('edit permissions'), 'admin/user/permissions/'. $rid);    if (!in_array($rid, array(DRUPAL_ANONYMOUS_RID, DRUPAL_AUTHENTICATED_RID))) {      $rows[] = array($name, l(t('edit role'), 'admin/user/roles/edit/'. $rid), $edit_permissions);    }    else {      $rows[] = array($name, t('locked'), $edit_permissions);    }  }  $rows[] = array(drupal_render($form['name']), array('data' => drupal_render($form['submit']), 'colspan' => 2));  $output = drupal_render($form);  $output .= theme('table', $header, $rows);  return $output;}/** * Theme user administration filter form. * * @ingroup themeable */function theme_user_filter_form($form) {  $output = '<div id="user-admin-filter">';  $output .= drupal_render($form['filters']);  $output .= '</div>';  $output .= drupal_render($form);  return $output;}/** * Theme user administration filter selector. * * @ingroup themeable */function theme_user_filters($form) {  $output = '<ul class="clear-block">';  if (!empty($form['current'])) {    foreach (element_children($form['current']) as $key) {      $output .= '<li>'. drupal_render($form['current'][$key]) .'</li>';    }  }  $output .= '<li><dl class="multiselect">'. (!empty($form['current']) ? '<dt><em>'. t('and') .'</em> '. t('where') .'</dt>' : '') .'<dd class="a">';  foreach (element_children($form['filter']) as $key) {    $output .= drupal_render($form['filter'][$key]);  }  $output .= '</dd>';  $output .= '<dt>'. t('is') .'</dt><dd class="b">';  foreach (element_children($form['status']) as $key) {    $output .= drupal_render($form['status'][$key]);  }  $output .= '</dd>';  $output .= '</dl>';  $output .= '<div class="container-inline" id="user-admin-buttons">'. drupal_render($form['buttons']) .'</div>';  $output .= '</li></ul>';  return $output;}
<?php// $Id$/** * @file * System monitoring and logging for administrators. * * The dblog module monitors your site and keeps a list of * recorded events containing usage and performance data, errors, * warnings, and similar operational information. * * @see watchdog() *//** * Implementation of hook_help(). */function dblog_help($path, $arg) {  switch ($path) {    case 'admin/help#dblog':      $output = '<p>'. t('The dblog module monitors your system, capturing system events in a log to be reviewed by an authorized individual at a later time. This is useful for site administrators who want a quick overview of activities on their site. The logs also record the sequence of events, so it can be useful for debugging site errors.') .'</p>';      $output .= '<p>'. t('The dblog log is simply a list of recorded events containing usage data, performance data, errors, warnings and operational information. Administrators should check the dblog report on a regular basis to ensure their site is working properly.') .'</p>';      $output .= '<p>'. t('For more information, see the online handbook entry for <a href="@dblog">Dblog module</a>.', array('@dblog' => 'http://drupal.org/handbook/modules/dblog/')) .'</p>';      return $output;    case 'admin/reports/dblog':      return '<p>'. t('The dblog module monitors your website, capturing system events in a log to be reviewed by an authorized individual at a later time. The dblog log is simply a list of recorded events containing usage data, performance data, errors, warnings and operational information. It is vital to check the dblog report on a regular basis as it is often the only way to tell what is going on.') .'</p>';  }}/** * Implementation of hook_theme() */function dblog_theme() {  return array(    'dblog_filters' => array(      'arguments' => array('form' => NULL),    ),  );}/** * Implementation of hook_menu(). */function dblog_menu() {  $items['admin/settings/logging/dblog'] = array(    'title' => 'Database logging',    'description' => 'Settings for logging to the Drupal database logs. This is the most common method for small to medium sites on shared hosting. The logs are viewable from the admin pages.',    'page callback' => 'drupal_get_form',    'page arguments' => array('dblog_admin_settings'),    'access arguments' => array('administer site configuration'),    'file' => 'dblog.admin.inc',  );  $items['admin/reports/dblog'] = array(    'title' => 'Recent log entries',    'description' => 'View events that have recently been logged.',    'page callback' => 'dblog_overview',    'access arguments' => array('access site reports'),    'weight' => -1,    'file' => 'dblog.admin.inc',  );  $items['admin/reports/page-not-found'] = array(    'title' => "Top 'page not found' errors",    'description' => "View 'page not found' errors (404s).",    'page callback' => 'dblog_top',    'page arguments' => array('page not found'),    'access arguments' => array('access site reports'),    'file' => 'dblog.admin.inc',  );  $items['admin/reports/access-denied'] = array(    'title' => "Top 'access denied' errors",    'description' => "View 'access denied' errors (403s).",    'page callback' => 'dblog_top',    'page arguments' => array('access denied'),    'access arguments' => array('access site reports'),    'file' => 'dblog.admin.inc',  );  $items['admin/reports/event/%'] = array(    'title' => 'Details',    'page callback' => 'dblog_event',    'page arguments' => array(3),    'access arguments' => array('access site reports'),    'type' => MENU_CALLBACK,    'file' => 'dblog.admin.inc',  );  return $items;}function dblog_init() {  if (arg(0) == 'admin' && arg(1) == 'reports') {    // Add the CSS for this module    drupal_add_css(drupal_get_path('module', 'dblog') .'/dblog.css', 'module', 'all', FALSE);  }}/** * Implementation of hook_cron(). * * Remove expired log messages and flood control events. */function dblog_cron() {  // Cleanup the watchdog table  $max = db_result(db_query('SELECT MAX(wid) FROM {watchdog}'));  db_query('DELETE FROM {watchdog} WHERE wid <= %d', $max - variable_get('dblog_row_limit', 1000));}/** * Implementation of hook_user(). */function dblog_user($op, &$edit, &$user) {  if ($op == 'delete') {    db_query('UPDATE {watchdog} SET uid = 0 WHERE uid = %d', $user->uid);  }}function _dblog_get_message_types() {  $types = array();  $result = db_query('SELECT DISTINCT(type) FROM {watchdog} ORDER BY type');  while ($object = db_fetch_object($result)) {    $types[] = $object->type;  }  return $types;}/** * Implementation of hook_watchdog(). */function dblog_watchdog($log = array()) {  $current_db = db_set_active();  db_query("INSERT INTO {watchdog}    (uid, type, message, variables, severity, link, location, referer, hostname, timestamp)    VALUES    (%d, '%s', '%s', '%s', %d, '%s', '%s', '%s', '%s', %d)",    $log['user']->uid,    $log['type'],    $log['message'],    serialize($log['variables']),    $log['severity'],    $log['link'],    $log['request_uri'],    $log['referer'],    $log['ip'],    $log['timestamp']);  if ($current_db) {    db_set_active($current_db);  }}/** * Theme dblog administration filter selector. * * @ingroup themeable */function theme_dblog_filters($form) {  $output = '';  foreach (element_children($form['status']) as $key) {    $output .= drupal_render($form['status'][$key]);  }  $output .= '<div id="dblog-admin-buttons">'. drupal_render($form['buttons']) .'</div>';  return $output;}
<?php// $Id$/** * Sets the body-tag class attribute. * * Adds 'sidebar-left', 'sidebar-right' or 'sidebars' classes as needed. */function phptemplate_body_class($left, $right) {  if ($left != '' && $right != '') {    $class = 'sidebars';  }  else {    if ($left != '') {      $class = 'sidebar-left';    }    if ($right != '') {      $class = 'sidebar-right';    }  }  if (isset($class)) {    print ' class="'. $class .'"';  }}/** * Return a themed breadcrumb trail. * * @param $breadcrumb *   An array containing the breadcrumb links. * @return a string containing the breadcrumb output. */function phptemplate_breadcrumb($breadcrumb) {  if (!empty($breadcrumb)) {    return '<div class="breadcrumb">'. implode('  ', $breadcrumb) .'</div>';  }}/** * Override or insert PHPTemplate variables into the templates. */function phptemplate_preprocess_page(&$vars) {  $vars['tabs2'] = menu_secondary_local_tasks();  // Hook into color.module  if (module_exists('color')) {    _color_page_alter($vars);  }}/** * Add a "Comments" heading above comments except on forum pages. */function garland_preprocess_comment_wrapper(&$vars) {  if ($vars['content'] && $vars['node']->type != 'forum') {    $vars['content'] = '<h2 class="comments">'. t('Comments') .'</h2>'.  $vars['content'];  }}/** * Returns the rendered local tasks. The default implementation renders * them as tabs. Overridden to split the secondary tasks. * * @ingroup themeable */function phptemplate_menu_local_tasks() {  return menu_primary_local_tasks();}function phptemplate_comment_submitted($comment) {  return t('!datetime  !username',    array(      '!username' => theme('username', $comment),      '!datetime' => format_date($comment->timestamp)    ));}function phptemplate_node_submitted($node) {  return t('!datetime  !username',    array(      '!username' => theme('username', $node),      '!datetime' => format_date($node->created),    ));}/** * Generates IE CSS links for LTR and RTL languages. */function phptemplate_get_ie_styles() {  global $language;  $iecss = '<link type="text/css" rel="stylesheet" media="all" href="'. base_path() . path_to_theme() .'/fix-ie.css" />';  if ($language->direction == LANGUAGE_RTL) {    $iecss .= '<style type="text/css" media="all">@import "'. base_path() . path_to_theme() .'/fix-ie-rtl.css";</style>';  }  return $iecss;}
<?php// $Id$/** * Implementation of hook_install(). */function statistics_install() {  // Create tables.  drupal_install_schema('statistics');}/** * Changes session ID  field to VARCHAR(64) to add support for SHA-1 hashes. */function statistics_update_1000() {  $ret = array();  switch ($GLOBALS['db_type']) {    case 'mysql':    case 'mysqli':      $ret[] = update_sql("ALTER TABLE {accesslog} CHANGE COLUMN sid sid varchar(64) NOT NULL default ''");      break;    case 'pgsql':      db_change_column($ret, 'accesslog', 'sid', 'sid', 'varchar(64)', array('not null' => TRUE, 'default' => "''"));      break;  }  return $ret;}/** * Implementation of hook_uninstall(). */function statistics_uninstall() {  // Remove tables.  drupal_uninstall_schema('statistics');  variable_del('statistics_count_content_views');  variable_del('statistics_enable_access_log');  variable_del('statistics_flush_accesslog_timer');  variable_del('statistics_day_timestamp');  variable_del('statistics_block_top_day_num');  variable_del('statistics_block_top_all_num');  variable_del('statistics_block_top_last_num');}/** * Implementation of hook_schema(). */function statistics_schema() {  $schema['accesslog'] = array(    'description' => 'Stores site access information for statistics.',    'fields' => array(      'aid' => array(        'type' => 'serial',        'not null' => TRUE,        'description' => 'Primary Key: Unique accesslog ID.',      ),      'sid' => array(        'type' => 'varchar',        'length' => 64,        'not null' => TRUE,        'default' => '',        'description' => 'Browser session ID of user that visited page.',      ),      'title' => array(        'type' => 'varchar',        'length' => 255,        'not null' => FALSE,        'description' => 'Title of page visited.',      ),      'path' => array(        'type' => 'varchar',        'length' => 255,        'not null' => FALSE,        'description' => 'Internal path to page visited (relative to Drupal root.)',      ),      'url' => array(        'type' => 'text',        'not null' => FALSE,        'description' => 'Referrer URI.',      ),      'hostname' => array(        'type' => 'varchar',        'length' => 128,        'not null' => FALSE,        'description' => 'Hostname of user that visited the page.',      ),      'uid' => array(        'type' => 'int',        'unsigned' => TRUE,        'not null' => FALSE,        'default' => 0,        'description' => 'User {users}.uid that visited the page.',      ),      'timer' => array(        'type' => 'int',        'unsigned' => TRUE,        'not null' => TRUE,        'default' => 0,        'description' => 'Time in milliseconds that the page took to load.',      ),      'timestamp' => array(        'type' => 'int',        'unsigned' => TRUE,        'not null' => TRUE,        'default' => 0,        'description' => 'Timestamp of when the page was visited.',      ),    ),    'indexes' => array(      'accesslog_timestamp' => array('timestamp'),      'uid' => array('uid'),    ),    'primary key' => array('aid'),  );  return $schema;}/** * @defgroup updates-6.x-extra Extra statistics updates for 6.x * @{ *//** * Allow longer referrers. */function statistics_update_6000() {  $ret = array();  db_change_field($ret, 'accesslog', 'url', 'url', array('type' => 'text', 'not null' => FALSE));  return $ret;}/** * @} End of "defgroup updates-6.x-extra" * The next series of updates should start at 7000. */
<?php// $Id$/** * @file * API for handling file uploads and server file management. *//** * @defgroup file File interface * @{ * Common file handling functions. */define('FILE_DOWNLOADS_PUBLIC', 1);define('FILE_DOWNLOADS_PRIVATE', 2);define('FILE_CREATE_DIRECTORY', 1);define('FILE_MODIFY_PERMISSIONS', 2);define('FILE_EXISTS_RENAME', 0);define('FILE_EXISTS_REPLACE', 1);define('FILE_EXISTS_ERROR', 2);/** * A files status can be one of two values: temporary or permanent. The status * for each file Drupal manages is stored in the {files} tables. If the status * is temporary Drupal's file garbage collection will delete the file and * remove it from the files table after a set period of time. * * If you wish to add custom statuses for use by contrib modules please expand as * binary flags and consider the first 8 bits reserved. (0,1,2,4,8,16,32,64,128) */define('FILE_STATUS_TEMPORARY', 0);define('FILE_STATUS_PERMANENT', 1);/** * Create the download path to a file. * * @param $path A string containing the path of the file to generate URL for. * @return A string containing a URL that can be used to download the file. */function file_create_url($path) {  // Strip file_directory_path from $path. We only include relative paths in urls.  if (strpos($path, file_directory_path() .'/') === 0) {    $path = trim(substr($path, strlen(file_directory_path())), '\\/');  }  switch (variable_get('file_downloads', FILE_DOWNLOADS_PUBLIC)) {    case FILE_DOWNLOADS_PUBLIC:      return $GLOBALS['base_url'] .'/'. file_directory_path() .'/'. str_replace('\\', '/', $path);    case FILE_DOWNLOADS_PRIVATE:      return url('system/files/'. $path, array('absolute' => TRUE));  }}/** * Make sure the destination is a complete path and resides in the file system * directory, if it is not prepend the file system directory. * * @param $dest A string containing the path to verify. If this value is *   omitted, Drupal's 'files' directory will be used. * @return A string containing the path to file, with file system directory *   appended if necessary, or FALSE if the path is invalid (i.e. outside the *   configured 'files' or temp directories). */function file_create_path($dest = 0) {  $file_path = file_directory_path();  if (!$dest) {    return $file_path;  }  // file_check_location() checks whether the destination is inside the Drupal files directory.  if (file_check_location($dest, $file_path)) {    return $dest;  }  // check if the destination is instead inside the Drupal temporary files directory.  else if (file_check_location($dest, file_directory_temp())) {    return $dest;  }  // Not found, try again with prefixed directory path.  else if (file_check_location($file_path .'/'. $dest, $file_path)) {    return $file_path .'/'. $dest;  }  // File not found.  return FALSE;}/** * Check that the directory exists and is writable. Directories need to * have execute permissions to be considered a directory by FTP servers, etc. * * @param $directory A string containing the name of a directory path. * @param $mode A Boolean value to indicate if the directory should be created *   if it does not exist or made writable if it is read-only. * @param $form_item An optional string containing the name of a form item that *   any errors will be attached to. This is useful for settings forms that *   require the user to specify a writable directory. If it can't be made to *   work, a form error will be set preventing them from saving the settings. * @return FALSE when directory not found, or TRUE when directory exists. */function file_check_directory(&$directory, $mode = 0, $form_item = NULL) {  $directory = rtrim($directory, '/\\');  // Check if directory exists.  if (!is_dir($directory)) {    if (($mode & FILE_CREATE_DIRECTORY) && @mkdir($directory)) {      drupal_set_message(t('The directory %directory has been created.', array('%directory' => $directory)));      @chmod($directory, 0775); // Necessary for non-webserver users.    }    else {      if ($form_item) {        form_set_error($form_item, t('The directory %directory does not exist.', array('%directory' => $directory)));      }      return FALSE;    }  }  // Check to see if the directory is writable.  if (!is_writable($directory)) {    if (($mode & FILE_MODIFY_PERMISSIONS) && @chmod($directory, 0775)) {      drupal_set_message(t('The permissions of directory %directory have been changed to make it writable.', array('%directory' => $directory)));    }    else {      form_set_error($form_item, t('The directory %directory is not writable', array('%directory' => $directory)));      watchdog('file system', 'The directory %directory is not writable, because it does not have the correct permissions set.', array('%directory' => $directory), WATCHDOG_ERROR);      return FALSE;    }  }  if ((file_directory_path() == $directory || file_directory_temp() == $directory) && !is_file("$directory/.htaccess")) {    $htaccess_lines = "SetHandler Drupal_Security_Do_Not_Remove_See_SA_2006_006\nOptions None\nOptions +FollowSymLinks";    if (($fp = fopen("$directory/.htaccess", 'w')) && fputs($fp, $htaccess_lines)) {      fclose($fp);      chmod($directory .'/.htaccess', 0664);    }    else {      $variables = array('%directory' => $directory, '!htaccess' => '<br />'. nl2br(check_plain($htaccess_lines)));      form_set_error($form_item, t("Security warning: Couldn't write .htaccess file. Please create a .htaccess file in your %directory directory which contains the following lines: <code>!htaccess</code>", $variables));      watchdog('security', "Security warning: Couldn't write .htaccess file. Please create a .htaccess file in your %directory directory which contains the following lines: <code>!htaccess</code>", $variables, WATCHDOG_ERROR);    }  }  return TRUE;}/** * Checks path to see if it is a directory, or a dir/file. * * @param $path A string containing a file path. This will be set to the *   directory's path. * @return If the directory is not in a Drupal writable directory, FALSE is *   returned. Otherwise, the base name of the path is returned. */function file_check_path(&$path) {  // Check if path is a directory.  if (file_check_directory($path)) {    return '';  }  // Check if path is a possible dir/file.  $filename = basename($path);  $path = dirname($path);  if (file_check_directory($path)) {    return $filename;  }  return FALSE;}/** * Check if a file is really located inside $directory. Should be used to make * sure a file specified is really located within the directory to prevent * exploits. * * @code *   // Returns FALSE: *   file_check_location('/www/example.com/files/../../../etc/passwd', '/www/example.com/files'); * @endcode * * @param $source A string set to the file to check. * @param $directory A string where the file should be located. * @return 0 for invalid path or the real path of the source. */function file_check_location($source, $directory = '') {  $check = realpath($source);  if ($check) {    $source = $check;  }  else {    // This file does not yet exist    $source = realpath(dirname($source)) .'/'. basename($source);  }  $directory = realpath($directory);  if ($directory && strpos($source, $directory) !== 0) {    return 0;  }  return $source;}/** * Copies a file to a new location. This is a powerful function that in many ways * performs like an advanced version of copy(). * - Checks if $source and $dest are valid and readable/writable. * - Performs a file copy if $source is not equal to $dest. * - If file already exists in $dest either the call will error out, replace the *   file or rename the file based on the $replace parameter. * * @param $source A string specifying the file location of the original file. *   This parameter will contain the resulting destination filename in case of *   success. * @param $dest A string containing the directory $source should be copied to. *   If this value is omitted, Drupal's 'files' directory will be used. * @param $replace Replace behavior when the destination file already exists. *   - FILE_EXISTS_REPLACE - Replace the existing file *   - FILE_EXISTS_RENAME - Append _{incrementing number} until the filename is unique *   - FILE_EXISTS_ERROR - Do nothing and return FALSE. * @return True for success, FALSE for failure. */function file_copy(&$source, $dest = 0, $replace = FILE_EXISTS_RENAME) {  $dest = file_create_path($dest);  $directory = $dest;  $basename = file_check_path($directory);  // Make sure we at least have a valid directory.  if ($basename === FALSE) {    $source = is_object($source) ? $source->filepath : $source;    drupal_set_message(t('The selected file %file could not be uploaded, because the destination %directory is not properly configured.', array('%file' => $source, '%directory' => $dest)), 'error');    watchdog('file system', 'The selected file %file could not be uploaded, because the destination %directory could not be found, or because its permissions do not allow the file to be written.', array('%file' => $source, '%directory' => $dest), WATCHDOG_ERROR);    return 0;  }  // Process a file upload object.  if (is_object($source)) {    $file = $source;    $source = $file->filepath;    if (!$basename) {      $basename = $file->filename;    }  }  $source = realpath($source);  if (!file_exists($source)) {    drupal_set_message(t('The selected file %file could not be copied, because no file by that name exists. Please check that you supplied the correct filename.', array('%file' => $source)), 'error');    return 0;  }  // If the destination file is not specified then use the filename of the source file.  $basename = $basename ? $basename : basename($source);  $dest = $directory .'/'. $basename;  // Make sure source and destination filenames are not the same, makes no sense  // to copy it if they are. In fact copying the file will most likely result in  // a 0 byte file. Which is bad. Real bad.  if ($source != realpath($dest)) {    if (!$dest = file_destination($dest, $replace)) {      drupal_set_message(t('The selected file %file could not be copied, because a file by that name already exists in the destination.', array('%file' => $source)), 'error');      return FALSE;    }    if (!@copy($source, $dest)) {      drupal_set_message(t('The selected file %file could not be copied.', array('%file' => $source)), 'error');      return 0;    }    // Give everyone read access so that FTP'd users or    // non-webserver users can see/read these files,    // and give group write permissions so group members    // can alter files uploaded by the webserver.    @chmod($dest, 0664);  }  if (isset($file) && is_object($file)) {    $file->filename = $basename;    $file->filepath = $dest;    $source = $file;  }  else {    $source = $dest;  }  return 1; // Everything went ok.}/** * Determines the destination path for a file depending on how replacement of * existing files should be handled. * * @param $destination A string specifying the desired path. * @param $replace Replace behavior when the destination file already exists. *   - FILE_EXISTS_REPLACE - Replace the existing file *   - FILE_EXISTS_RENAME - Append _{incrementing number} until the filename is *     unique *   - FILE_EXISTS_ERROR - Do nothing and return FALSE. * @return The destination file path or FALSE if the file already exists and *   FILE_EXISTS_ERROR was specified. */function file_destination($destination, $replace) {  if (file_exists($destination)) {    switch ($replace) {      case FILE_EXISTS_RENAME:        $basename = basename($destination);        $directory = dirname($destination);        $destination = file_create_filename($basename, $directory);        break;      case FILE_EXISTS_ERROR:        drupal_set_message(t('The selected file %file could not be copied, because a file by that name already exists in the destination.', array('%file' => $destination)), 'error');        return FALSE;    }  }  return $destination;}/** * Moves a file to a new location. * - Checks if $source and $dest are valid and readable/writable. * - Performs a file move if $source is not equal to $dest. * - If file already exists in $dest either the call will error out, replace the *   file or rename the file based on the $replace parameter. * * @param $source A string specifying the file location of the original file. *   This parameter will contain the resulting destination filename in case of *   success. * @param $dest A string containing the directory $source should be copied to. *   If this value is omitted, Drupal's 'files' directory will be used. * @param $replace Replace behavior when the destination file already exists. *   - FILE_EXISTS_REPLACE - Replace the existing file *   - FILE_EXISTS_RENAME - Append _{incrementing number} until the filename is unique *   - FILE_EXISTS_ERROR - Do nothing and return FALSE. * @return True for success, FALSE for failure. */function file_move(&$source, $dest = 0, $replace = FILE_EXISTS_RENAME) {  $path_original = is_object($source) ? $source->filepath : $source;  if (file_copy($source, $dest, $replace)) {    $path_current = is_object($source) ? $source->filepath : $source;    if ($path_original == $path_current || file_delete($path_original)) {      return 1;    }    drupal_set_message(t('The removal of the original file %file has failed.', array('%file' => $path_original)), 'error');  }  return 0;}/** * Modify a filename as needed for security purposes. * * Dangerous file names will be altered; for instance, the file name * "exploit.php.pps" will become "exploit.php_.pps". All extensions that are * between 2 and 5 characters in length, internal to the file name, and not * included in $extensions will be altered by adding an underscore. If variable * 'allow_insecure_uploads' evaluates to TRUE, no alterations will be made. * * @param $filename *   File name to modify. * @param $extensions *   A space-separated list of extensions that should not be altered. * @param $alerts *   If TRUE, drupal_set_message() will be called to display a message if the *   file name was changed. * * @return *   The potentially modified $filename. */function file_munge_filename($filename, $extensions, $alerts = TRUE) {  $original = $filename;  // Allow potentially insecure uploads for very savvy users and admin  if (!variable_get('allow_insecure_uploads', 0)) {    $whitelist = array_unique(explode(' ', trim($extensions)));    // Split the filename up by periods. The first part becomes the basename    // the last part the final extension.    $filename_parts = explode('.', $filename);    $new_filename = array_shift($filename_parts); // Remove file basename.    $final_extension = array_pop($filename_parts); // Remove final extension.    // Loop through the middle parts of the name and add an underscore to the    // end of each section that could be a file extension but isn't in the list    // of allowed extensions.    foreach ($filename_parts as $filename_part) {      $new_filename .= '.'. $filename_part;      if (!in_array($filename_part, $whitelist) && preg_match("/^[a-zA-Z]{2,5}\d?$/", $filename_part)) {        $new_filename .= '_';      }    }    $filename = $new_filename .'.'. $final_extension;    if ($alerts && $original != $filename) {      drupal_set_message(t('For security reasons, your upload has been renamed to %filename.', array('%filename' => $filename)));    }  }  return $filename;}/** * Undo the effect of upload_munge_filename(). * * @param $filename string filename * @return string */function file_unmunge_filename($filename) {  return str_replace('_.', '.', $filename);}/** * Create a full file path from a directory and filename. If a file with the * specified name already exists, an alternative will be used. * * @param $basename string filename * @param $directory string directory * @return */function file_create_filename($basename, $directory) {  $dest = $directory .'/'. $basename;  if (file_exists($dest)) {    // Destination file already exists, generate an alternative.    if ($pos = strrpos($basename, '.')) {      $name = substr($basename, 0, $pos);      $ext = substr($basename, $pos);    }    else {      $name = $basename;    }    $counter = 0;    do {      $dest = $directory .'/'. $name .'_'. $counter++ . $ext;    } while (file_exists($dest));  }  return $dest;}/** * Delete a file. * * @param $path A string containing a file path. * @return TRUE for success, FALSE for failure. */function file_delete($path) {  if (is_file($path)) {    return unlink($path);  }}/** * Determine total disk space used by a single user or the whole filesystem. * * @param $uid *   An optional user id. A NULL value returns the total space used *   by all files. */function file_space_used($uid = NULL) {  if (isset($uid)) {    return (int) db_result(db_query('SELECT SUM(filesize) FROM {files} WHERE uid = %d', $uid));  }  return (int) db_result(db_query('SELECT SUM(filesize) FROM {files}'));}/** * Saves a file upload to a new location. The source file is validated as a * proper upload and handled as such. * * The file will be added to the files table as a temporary file. Temporary files * are periodically cleaned. To make the file permanent file call * file_set_status() to change its status. * * @param $source *   A string specifying the name of the upload field to save. * @param $validators *   An optional, associative array of callback functions used to validate the *   file. The keys are function names and the values arrays of callback *   parameters which will be passed in after the file object. The *   functions should return an array of error messages; an empty array *   indicates that the file passed validation. The functions will be called in *   the order specified. * @param $dest *   A string containing the directory $source should be copied to. If this is *   not provided or is not writable, the temporary directory will be used. * @param $replace *   A boolean indicating whether an existing file of the same name in the *   destination directory should overwritten. A false value will generate a *   new, unique filename in the destination directory. * @return *   An object containing the file information, or 0 in the event of an error. */function file_save_upload($source, $validators = array(), $dest = FALSE, $replace = FILE_EXISTS_RENAME) {  global $user;  static $upload_cache;  // Add in our check of the the file name length.  $validators['file_validate_name_length'] = array();  // Return cached objects without processing since the file will have  // already been processed and the paths in _FILES will be invalid.  if (isset($upload_cache[$source])) {    return $upload_cache[$source];  }  // If a file was uploaded, process it.  if (isset($_FILES['files']) && $_FILES['files']['name'][$source] && is_uploaded_file($_FILES['files']['tmp_name'][$source])) {    // Check for file upload errors and return FALSE if a    // lower level system error occurred.    switch ($_FILES['files']['error'][$source]) {      // @see http://php.net/manual/en/features.file-upload.errors.php      case UPLOAD_ERR_OK:        break;      case UPLOAD_ERR_INI_SIZE:      case UPLOAD_ERR_FORM_SIZE:        drupal_set_message(t('The file %file could not be saved, because it exceeds %maxsize, the maximum allowed size for uploads.', array('%file' => $source, '%maxsize' => format_size(file_upload_max_size()))), 'error');        return 0;      case UPLOAD_ERR_PARTIAL:      case UPLOAD_ERR_NO_FILE:        drupal_set_message(t('The file %file could not be saved, because the upload did not complete.', array('%file' => $source)), 'error');        return 0;        // Unknown error      default:        drupal_set_message(t('The file %file could not be saved. An unknown error has occurred.', array('%file' => $source)), 'error');        return 0;    }    // Build the list of non-munged extensions.    // @todo: this should not be here. we need to figure out the right place.    $extensions = '';    foreach ($user->roles as $rid => $name) {      $extensions .= ' '. variable_get("upload_extensions_$rid",      variable_get('upload_extensions_default', 'jpg jpeg gif png txt html doc xls pdf ppt pps odt ods odp'));    }    // Begin building file object.    $file = new stdClass();    $file->filename = file_munge_filename(trim(basename($_FILES['files']['name'][$source]), '.'), $extensions);    $file->filepath = $_FILES['files']['tmp_name'][$source];    $file->filemime = file_get_mimetype($file->filename);    // If the destination is not provided, or is not writable, then use the    // temporary directory.    if (empty($dest) || file_check_path($dest) === FALSE) {      $dest = file_directory_temp();    }    $file->source = $source;    $file->destination = file_destination(file_create_path($dest .'/'. $file->filename), $replace);    $file->filesize = $_FILES['files']['size'][$source];    // Call the validation functions.    $errors = array();    foreach ($validators as $function => $args) {      array_unshift($args, $file);      // Make sure $file is passed around by reference.      $args[0] = &$file;      $errors = array_merge($errors, call_user_func_array($function, $args));    }    // Rename potentially executable files, to help prevent exploits.    if (preg_match('/\.(php|pl|py|cgi|asp|js)$/i', $file->filename) && (substr($file->filename, -4) != '.txt')) {            $file->filemime = 'text/plain';      $file->filepath .= '.txt';      $file->filename .= '.txt';      // As the file may be named example.php.txt, we need to munge again to      // convert to example.php_.txt, then create the correct destination.      $file->filename = file_munge_filename($file->filename, $extensions);      $file->destination = file_destination(file_create_path($dest .'/'. $file->filename), $replace);    }    // Check for validation errors.    if (!empty($errors)) {      $message = t('The selected file %name could not be uploaded.', array('%name' => $file->filename));      if (count($errors) > 1) {        $message .= '<ul><li>'. implode('</li><li>', $errors) .'</li></ul>';      }      else {        $message .= ' '. array_pop($errors);      }      form_set_error($source, $message);      return 0;    }    // Move uploaded files from PHP's upload_tmp_dir to Drupal's temporary directory.    // This overcomes open_basedir restrictions for future file operations.    $file->filepath = $file->destination;    if (!move_uploaded_file($_FILES['files']['tmp_name'][$source], $file->filepath)) {      form_set_error($source, t('File upload error. Could not move uploaded file.'));      watchdog('file', 'Upload error. Could not move uploaded file %file to destination %destination.', array('%file' => $file->filename, '%destination' => $file->filepath));      return 0;    }    // If we made it this far it's safe to record this file in the database.    $file->uid = $user->uid;    $file->status = FILE_STATUS_TEMPORARY;    $file->timestamp = time();    drupal_write_record('files', $file);    // Add file to the cache.    $upload_cache[$source] = $file;    return $file;  }  return 0;}/** * Check for files with names longer than we can store in the database. * * @param $file *   A Drupal file object. * @return *   An array. If the file name is too long, it will contain an error message. */function file_validate_name_length($file) {  $errors = array();  if (strlen($file->filename) > 255) {    $errors[] = t('Its name exceeds the 255 characters limit. Please rename the file and try again.');  }  return $errors;}/** * Check that the filename ends with an allowed extension. This check is not * enforced for the user #1. * * @param $file *   A Drupal file object. * @param $extensions *   A string with a space separated * @return *   An array. If the file extension is not allowed, it will contain an error message. */function file_validate_extensions($file, $extensions) {  global $user;  $errors = array();  // Bypass validation for uid  = 1.  if ($user->uid != 1) {    $regex = '/\.('. ereg_replace(' +', '|', preg_quote($extensions)) .')$/i';    if (!preg_match($regex, $file->filename)) {      $errors[] = t('Only files with the following extensions are allowed: %files-allowed.', array('%files-allowed' => $extensions));    }  }  return $errors;}/** * Check that the file's size is below certain limits. This check is not * enforced for the user #1. * * @param $file *   A Drupal file object. * @param $file_limit *   An integer specifying the maximum file size in bytes. Zero indicates that *   no limit should be enforced. * @param $user_limit *   An integer specifying the maximum number of bytes the user is allowed. Zero *   indicates that no limit should be enforced. * @return *   An array. If the file size exceeds limits, it will contain an error message. */function file_validate_size($file, $file_limit = 0, $user_limit = 0) {  global $user;  $errors = array();  // Bypass validation for uid  = 1.  if ($user->uid != 1) {    if ($file_limit && $file->filesize > $file_limit) {      $errors[] = t('The file is %filesize exceeding the maximum file size of %maxsize.', array('%filesize' => format_size($file->filesize), '%maxsize' => format_size($file_limit)));    }    // Save a query by only calling file_space_used() when a limit is provided.    if ($user_limit && (file_space_used($user->uid) + $file->filesize) > $user_limit) {      $errors[] = t('The file is %filesize which would exceed your disk quota of %quota.', array('%filesize' => format_size($file->filesize), '%quota' => format_size($user_limit)));    }  }  return $errors;}/** * Check that the file is recognized by image_get_info() as an image. * * @param $file *   A Drupal file object. * @return *   An array. If the file is not an image, it will contain an error message. */function file_validate_is_image(&$file) {  $errors = array();  $info = image_get_info($file->filepath);  if (!$info || empty($info['extension'])) {    $errors[] = t('Only JPEG, PNG and GIF images are allowed.');  }  return $errors;}/** * If the file is an image verify that its dimensions are within the specified * maximum and minimum dimensions. Non-image files will be ignored. * * @param $file *   A Drupal file object. This function may resize the file affecting its size. * @param $maximum_dimensions *   An optional string in the form WIDTHxHEIGHT e.g. '640x480' or '85x85'. If *   an image toolkit is installed the image will be resized down to these *   dimensions. A value of 0 indicates no restriction on size, so resizing *   will be attempted. * @param $minimum_dimensions *   An optional string in the form WIDTHxHEIGHT. This will check that the image *   meets a minimum size. A value of 0 indicates no restriction. * @return *   An array. If the file is an image and did not meet the requirements, it *   will contain an error message. */function file_validate_image_resolution(&$file, $maximum_dimensions = 0, $minimum_dimensions = 0) {  $errors = array();  // Check first that the file is an image.  if ($info = image_get_info($file->filepath)) {    if ($maximum_dimensions) {      // Check that it is smaller than the given dimensions.      list($width, $height) = explode('x', $maximum_dimensions);      if ($info['width'] > $width || $info['height'] > $height) {        // Try to resize the image to fit the dimensions.        if (image_get_toolkit() && image_scale($file->filepath, $file->filepath, $width, $height)) {          drupal_set_message(t('The image was resized to fit within the maximum allowed dimensions of %dimensions pixels.', array('%dimensions' => $maximum_dimensions)));          // Clear the cached filesize and refresh the image information.          clearstatcache();          $info = image_get_info($file->filepath);          $file->filesize = $info['file_size'];        }        else {          $errors[] = t('The image is too large; the maximum dimensions are %dimensions pixels.', array('%dimensions' => $maximum_dimensions));        }      }    }    if ($minimum_dimensions) {      // Check that it is larger than the given dimensions.      list($width, $height) = explode('x', $minimum_dimensions);      if ($info['width'] < $width || $info['height'] < $height) {        $errors[] = t('The image is too small; the minimum dimensions are %dimensions pixels.', array('%dimensions' => $minimum_dimensions));      }    }  }  return $errors;}/** * Save a string to the specified destination. * * @param $data A string containing the contents of the file. * @param $dest A string containing the destination location. * @param $replace Replace behavior when the destination file already exists. *   - FILE_EXISTS_REPLACE - Replace the existing file *   - FILE_EXISTS_RENAME - Append _{incrementing number} until the filename is unique *   - FILE_EXISTS_ERROR - Do nothing and return FALSE. * * @return A string containing the resulting filename or 0 on error */function file_save_data($data, $dest, $replace = FILE_EXISTS_RENAME) {  $temp = file_directory_temp();  // On Windows, tempnam() requires an absolute path, so we use realpath().  $file = tempnam(realpath($temp), 'file');  if (!$fp = fopen($file, 'wb')) {    drupal_set_message(t('The file could not be created.'), 'error');    return 0;  }  fwrite($fp, $data);  fclose($fp);  if (!file_move($file, $dest, $replace)) {    return 0;  }  return $file;}/** * Set the status of a file. * * @param file A Drupal file object * @param status A status value to set the file to. * @return FALSE on failure, TRUE on success and $file->status will contain the *     status. */function file_set_status(&$file, $status) {  if (db_query('UPDATE {files} SET status = %d WHERE fid = %d', $status, $file->fid)) {    $file->status = $status;    return TRUE;  }  return FALSE;}/** * Transfer file using http to client. Pipes a file through Drupal to the * client. * * @param $source File to transfer. * @param $headers An array of http headers to send along with file. */function file_transfer($source, $headers) {  if (ob_get_level()) {    ob_end_clean();  }  foreach ($headers as $header) {    // To prevent HTTP header injection, we delete new lines that are    // not followed by a space or a tab.    // See http://www.w3.org/Protocols/rfc2616/rfc2616-sec4.html#sec4.2    $header = preg_replace('/\r?\n(?!\t| )/', '', $header);    drupal_set_header($header);  }  $source = file_create_path($source);  // Transfer file in 1024 byte chunks to save memory usage.  if ($fd = fopen($source, 'rb')) {    while (!feof($fd)) {      print fread($fd, 1024);    }    fclose($fd);  }  else {    drupal_not_found();  }  exit();}/** * Call modules that implement hook_file_download() to find out if a file is * accessible and what headers it should be transferred with. If a module * returns -1 drupal_access_denied() will be returned. If one or more modules * returned headers the download will start with the returned headers. If no * modules respond drupal_not_found() will be returned. */function file_download() {  // Merge remainder of arguments from GET['q'], into relative file path.  $args = func_get_args();  $filepath = implode('/', $args);  // Maintain compatibility with old ?file=paths saved in node bodies.  if (isset($_GET['file'])) {    $filepath =  $_GET['file'];  }  if (file_exists(file_create_path($filepath))) {    $headers = module_invoke_all('file_download', $filepath);    if (in_array(-1, $headers)) {      return drupal_access_denied();    }    if (count($headers)) {      file_transfer($filepath, $headers);    }  }  return drupal_not_found();}/** * Finds all files that match a given mask in a given directory. * Directories and files beginning with a period are excluded; this * prevents hidden files and directories (such as SVN working directories) * from being scanned. * * @param $dir *   The base directory for the scan, without trailing slash. * @param $mask *   The regular expression of the files to find. * @param $nomask *   An array of files/directories to ignore. * @param $callback *   The callback function to call for each match. * @param $recurse *   When TRUE, the directory scan will recurse the entire tree *   starting at the provided directory. * @param $key *   The key to be used for the returned array of files. Possible *   values are "filename", for the path starting with $dir, *   "basename", for the basename of the file, and "name" for the name *   of the file without an extension. * @param $min_depth *   Minimum depth of directories to return files from. * @param $depth *   Current depth of recursion. This parameter is only used internally and should not be passed. * * @return *   An associative array (keyed on the provided key) of objects with *   "path", "basename", and "name" members corresponding to the *   matching files. */function file_scan_directory($dir, $mask, $nomask = array('.', '..', 'CVS'), $callback = 0, $recurse = TRUE, $key = 'filename', $min_depth = 0, $depth = 0) {  $key = (in_array($key, array('filename', 'basename', 'name')) ? $key : 'filename');  $files = array();  if (is_dir($dir) && $handle = opendir($dir)) {    while (FALSE !== ($file = readdir($handle))) {      if (!in_array($file, $nomask) && $file[0] != '.') {        if (is_dir("$dir/$file") && $recurse) {          // Give priority to files in this folder by merging them in after any subdirectory files.          $files = array_merge(file_scan_directory("$dir/$file", $mask, $nomask, $callback, $recurse, $key, $min_depth, $depth + 1), $files);        }        elseif ($depth >= $min_depth && ereg($mask, $file)) {          // Always use this match over anything already set in $files with the same $$key.          $filename = "$dir/$file";          $basename = basename($file);          $name = substr($basename, 0, strrpos($basename, '.'));          $files[$$key] = new stdClass();          $files[$$key]->filename = $filename;          $files[$$key]->basename = $basename;          $files[$$key]->name = $name;          if ($callback) {            $callback($filename);          }        }      }    }    closedir($handle);  }  return $files;}/** * Determine the default temporary directory. * * @return A string containing a temp directory. */function file_directory_temp() {  $temporary_directory = variable_get('file_directory_temp', NULL);  if (is_null($temporary_directory)) {    $directories = array();    // Has PHP been set with an upload_tmp_dir?    if (ini_get('upload_tmp_dir')) {      $directories[] = ini_get('upload_tmp_dir');    }    // Operating system specific dirs.    if (substr(PHP_OS, 0, 3) == 'WIN') {      $directories[] = 'c:\\windows\\temp';      $directories[] = 'c:\\winnt\\temp';      $path_delimiter = '\\';    }    else {      $directories[] = '/tmp';      $path_delimiter = '/';    }    foreach ($directories as $directory) {      if (!$temporary_directory && is_dir($directory)) {        $temporary_directory = $directory;      }    }    // if a directory has been found, use it, otherwise default to 'files/tmp' or 'files\\tmp';    $temporary_directory = $temporary_directory ? $temporary_directory : file_directory_path() . $path_delimiter .'tmp';    variable_set('file_directory_temp', $temporary_directory);  }  return $temporary_directory;}/** * Determine the default 'files' directory. * * @return A string containing the path to Drupal's 'files' directory. */function file_directory_path() {  return variable_get('file_directory_path', conf_path() .'/files');}/** * Determine the maximum file upload size by querying the PHP settings. * * @return *   A file size limit in bytes based on the PHP upload_max_filesize and post_max_size */function file_upload_max_size() {  static $max_size = -1;  if ($max_size < 0) {    $upload_max = parse_size(ini_get('upload_max_filesize'));    $post_max = parse_size(ini_get('post_max_size'));    $max_size = ($upload_max < $post_max) ? $upload_max : $post_max;  }  return $max_size;}/** * Determine an Internet Media Type, or MIME type from a filename. * * @param $filename *   Name of the file, including extension. * @param $mapping *   An optional array of extension to media type mappings in the form *   'extension1|extension2|...' => 'type'. * * @return *   The internet media type registered for the extension or application/octet-stream for unknown extensions. */function file_get_mimetype($filename, $mapping = NULL) {  if (!is_array($mapping)) {    $mapping = variable_get('mime_extension_mapping', array(      'ez' => 'application/andrew-inset',      'atom' => 'application/atom',      'atomcat' => 'application/atomcat+xml',      'atomsrv' => 'application/atomserv+xml',      'cap|pcap' => 'application/cap',      'cu' => 'application/cu-seeme',      'tsp' => 'application/dsptype',      'spl' => 'application/x-futuresplash',      'hta' => 'application/hta',      'jar' => 'application/java-archive',      'ser' => 'application/java-serialized-object',      'class' => 'application/java-vm',      'hqx' => 'application/mac-binhex40',      'cpt' => 'image/x-corelphotopaint',      'nb' => 'application/mathematica',      'mdb' => 'application/msaccess',      'doc|dot' => 'application/msword',      'bin' => 'application/octet-stream',      'oda' => 'application/oda',      'ogg|ogx' => 'application/ogg',      'pdf' => 'application/pdf',      'key' => 'application/pgp-keys',      'pgp' => 'application/pgp-signature',      'prf' => 'application/pics-rules',      'ps|ai|eps' => 'application/postscript',      'rar' => 'application/rar',      'rdf' => 'application/rdf+xml',      'rss' => 'application/rss+xml',      'rtf' => 'application/rtf',      'smi|smil' => 'application/smil',      'wpd' => 'application/wordperfect',      'wp5' => 'application/wordperfect5.1',      'xhtml|xht' => 'application/xhtml+xml',      'xml|xsl' => 'application/xml',      'zip' => 'application/zip',      'cdy' => 'application/vnd.cinderella',      'kml' => 'application/vnd.google-earth.kml+xml',      'kmz' => 'application/vnd.google-earth.kmz',      'xul' => 'application/vnd.mozilla.xul+xml',      'xls|xlb|xlt' => 'application/vnd.ms-excel',      'cat' => 'application/vnd.ms-pki.seccat',      'stl' => 'application/vnd.ms-pki.stl',      'ppt|pps' => 'application/vnd.ms-powerpoint',      'odc' => 'application/vnd.oasis.opendocument.chart',      'odb' => 'application/vnd.oasis.opendocument.database',      'odf' => 'application/vnd.oasis.opendocument.formula',      'odg' => 'application/vnd.oasis.opendocument.graphics',      'otg' => 'application/vnd.oasis.opendocument.graphics-template',      'odi' => 'application/vnd.oasis.opendocument.image',      'odp' => 'application/vnd.oasis.opendocument.presentation',      'otp' => 'application/vnd.oasis.opendocument.presentation-template',      'ods' => 'application/vnd.oasis.opendocument.spreadsheet',      'ots' => 'application/vnd.oasis.opendocument.spreadsheet-template',      'odt' => 'application/vnd.oasis.opendocument.text',      'odm' => 'application/vnd.oasis.opendocument.text-master',      'ott' => 'application/vnd.oasis.opendocument.text-template',      'oth' => 'application/vnd.oasis.opendocument.text-web',      'docm' => 'application/vnd.ms-word.document.macroEnabled.12',      'docx' => 'application/vnd.openxmlformats-officedocument.wordprocessingml.document',      'dotm' => 'application/vnd.ms-word.template.macroEnabled.12',      'dotx' => 'application/vnd.openxmlformats-officedocument.wordprocessingml.template',      'potm' => 'application/vnd.ms-powerpoint.template.macroEnabled.12',      'potx' => 'application/vnd.openxmlformats-officedocument.presentationml.template',      'ppam' => 'application/vnd.ms-powerpoint.addin.macroEnabled.12',      'ppsm' => 'application/vnd.ms-powerpoint.slideshow.macroEnabled.12',      'ppsx' => 'application/vnd.openxmlformats-officedocument.presentationml.slideshow',      'pptm' => 'application/vnd.ms-powerpoint.presentation.macroEnabled.12',      'pptx' => 'application/vnd.openxmlformats-officedocument.presentationml.presentation',      'xlam' => 'application/vnd.ms-excel.addin.macroEnabled.12',      'xlsb' => 'application/vnd.ms-excel.sheet.binary.macroEnabled.12',      'xlsm' => 'application/vnd.ms-excel.sheet.macroEnabled.12',      'xlsx' => 'application/vnd.openxmlformats-officedocument.spreadsheetml.sheet',      'xltm' => 'application/vnd.ms-excel.template.macroEnabled.12',      'xltx' => 'application/vnd.openxmlformats-officedocument.spreadsheetml.template',      'cod' => 'application/vnd.rim.cod',      'mmf' => 'application/vnd.smaf',      'sdc' => 'application/vnd.stardivision.calc',      'sds' => 'application/vnd.stardivision.chart',      'sda' => 'application/vnd.stardivision.draw',      'sdd' => 'application/vnd.stardivision.impress',      'sdf' => 'application/vnd.stardivision.math',      'sdw' => 'application/vnd.stardivision.writer',      'sgl' => 'application/vnd.stardivision.writer-global',      'sxc' => 'application/vnd.sun.xml.calc',      'stc' => 'application/vnd.sun.xml.calc.template',      'sxd' => 'application/vnd.sun.xml.draw',      'std' => 'application/vnd.sun.xml.draw.template',      'sxi' => 'application/vnd.sun.xml.impress',      'sti' => 'application/vnd.sun.xml.impress.template',      'sxm' => 'application/vnd.sun.xml.math',      'sxw' => 'application/vnd.sun.xml.writer',      'sxg' => 'application/vnd.sun.xml.writer.global',      'stw' => 'application/vnd.sun.xml.writer.template',      'sis' => 'application/vnd.symbian.install',      'vsd' => 'application/vnd.visio',      'wbxml' => 'application/vnd.wap.wbxml',      'wmlc' => 'application/vnd.wap.wmlc',      'wmlsc' => 'application/vnd.wap.wmlscriptc',      'wk' => 'application/x-123',      '7z' => 'application/x-7z-compressed',      'abw' => 'application/x-abiword',      'dmg' => 'application/x-apple-diskimage',      'bcpio' => 'application/x-bcpio',      'torrent' => 'application/x-bittorrent',      'cab' => 'application/x-cab',      'cbr' => 'application/x-cbr',      'cbz' => 'application/x-cbz',      'cdf' => 'application/x-cdf',      'vcd' => 'application/x-cdlink',      'pgn' => 'application/x-chess-pgn',      'cpio' => 'application/x-cpio',      'csh' => 'text/x-csh',      'deb|udeb' => 'application/x-debian-package',      'dcr|dir|dxr' => 'application/x-director',      'dms' => 'application/x-dms',      'wad' => 'application/x-doom',      'dvi' => 'application/x-dvi',      'rhtml' => 'application/x-httpd-eruby',      'flac' => 'application/x-flac',      'pfa|pfb|gsf|pcf|pcf.Z' => 'application/x-font',      'mm' => 'application/x-freemind',      'gnumeric' => 'application/x-gnumeric',      'sgf' => 'application/x-go-sgf',      'gcf' => 'application/x-graphing-calculator',      'gtar|tgz|taz' => 'application/x-gtar',      'hdf' => 'application/x-hdf',      'phtml|pht|php' => 'application/x-httpd-php',      'phps' => 'application/x-httpd-php-source',      'php3' => 'application/x-httpd-php3',      'php3p' => 'application/x-httpd-php3-preprocessed',      'php4' => 'application/x-httpd-php4',      'ica' => 'application/x-ica',      'ins|isp' => 'application/x-internet-signup',      'iii' => 'application/x-iphone',      'iso' => 'application/x-iso9660-image',      'jnlp' => 'application/x-java-jnlp-file',      'js' => 'application/x-javascript',      'jmz' => 'application/x-jmol',      'chrt' => 'application/x-kchart',      'kil' => 'application/x-killustrator',      'skp|skd|skt|skm' => 'application/x-koan',      'kpr|kpt' => 'application/x-kpresenter',      'ksp' => 'application/x-kspread',      'kwd|kwt' => 'application/x-kword',      'latex' => 'application/x-latex',      'lha' => 'application/x-lha',      'lyx' => 'application/x-lyx',      'lzh' => 'application/x-lzh',      'lzx' => 'application/x-lzx',      'frm|maker|frame|fm|fb|book|fbdoc' => 'application/x-maker',      'mif' => 'application/x-mif',      'wmd' => 'application/x-ms-wmd',      'wmz' => 'application/x-ms-wmz',      'com|exe|bat|dll' => 'application/x-msdos-program',      'msi' => 'application/x-msi',      'nc' => 'application/x-netcdf',      'pac' => 'application/x-ns-proxy-autoconfig',      'nwc' => 'application/x-nwc',      'o' => 'application/x-object',      'oza' => 'application/x-oz-application',      'p7r' => 'application/x-pkcs7-certreqresp',      'crl' => 'application/x-pkcs7-crl',      'pyc|pyo' => 'application/x-python-code',      'qtl' => 'application/x-quicktimeplayer',      'rpm' => 'application/x-redhat-package-manager',      'sh' => 'text/x-sh',      'shar' => 'application/x-shar',      'swf|swfl' => 'application/x-shockwave-flash',      'sit|sitx' => 'application/x-stuffit',      'sv4cpio' => 'application/x-sv4cpio',      'sv4crc' => 'application/x-sv4crc',      'tar' => 'application/x-tar',      'tcl' => 'application/x-tcl',      'gf' => 'application/x-tex-gf',      'pk' => 'application/x-tex-pk',      'texinfo|texi' => 'application/x-texinfo',      '~|%|bak|old|sik' => 'application/x-trash',      't|tr|roff' => 'application/x-troff',      'man' => 'application/x-troff-man',      'me' => 'application/x-troff-me',      'ms' => 'application/x-troff-ms',      'ustar' => 'application/x-ustar',      'src' => 'application/x-wais-source',      'wz' => 'application/x-wingz',      'crt' => 'application/x-x509-ca-cert',      'xcf' => 'application/x-xcf',      'fig' => 'application/x-xfig',      'xpi' => 'application/x-xpinstall',      'au|snd' => 'audio/basic',      'mid|midi|kar' => 'audio/midi',      'mpga|mpega|mp2|mp3|m4a' => 'audio/mpeg',      'f4a|f4b' => 'audio/mp4',      'm3u' => 'audio/x-mpegurl',      'oga|spx' => 'audio/ogg',      'sid' => 'audio/prs.sid',      'aif|aiff|aifc' => 'audio/x-aiff',      'gsm' => 'audio/x-gsm',      'wma' => 'audio/x-ms-wma',      'wax' => 'audio/x-ms-wax',      'ra|rm|ram' => 'audio/x-pn-realaudio',      'ra' => 'audio/x-realaudio',      'pls' => 'audio/x-scpls',      'sd2' => 'audio/x-sd2',      'wav' => 'audio/x-wav',      'alc' => 'chemical/x-alchemy',      'cac|cache' => 'chemical/x-cache',      'csf' => 'chemical/x-cache-csf',      'cbin|cascii|ctab' => 'chemical/x-cactvs-binary',      'cdx' => 'chemical/x-cdx',      'cer' => 'chemical/x-cerius',      'c3d' => 'chemical/x-chem3d',      'chm' => 'chemical/x-chemdraw',      'cif' => 'chemical/x-cif',      'cmdf' => 'chemical/x-cmdf',      'cml' => 'chemical/x-cml',      'cpa' => 'chemical/x-compass',      'bsd' => 'chemical/x-crossfire',      'csml|csm' => 'chemical/x-csml',      'ctx' => 'chemical/x-ctx',      'cxf|cef' => 'chemical/x-cxf',      'emb|embl' => 'chemical/x-embl-dl-nucleotide',      'spc' => 'chemical/x-galactic-spc',      'inp|gam|gamin' => 'chemical/x-gamess-input',      'fch|fchk' => 'chemical/x-gaussian-checkpoint',      'cub' => 'chemical/x-gaussian-cube',      'gau|gjc|gjf' => 'chemical/x-gaussian-input',      'gal' => 'chemical/x-gaussian-log',      'gcg' => 'chemical/x-gcg8-sequence',      'gen' => 'chemical/x-genbank',      'hin' => 'chemical/x-hin',      'istr|ist' => 'chemical/x-isostar',      'jdx|dx' => 'chemical/x-jcamp-dx',      'kin' => 'chemical/x-kinemage',      'mcm' => 'chemical/x-macmolecule',      'mmd|mmod' => 'chemical/x-macromodel-input',      'mol' => 'chemical/x-mdl-molfile',      'rd' => 'chemical/x-mdl-rdfile',      'rxn' => 'chemical/x-mdl-rxnfile',      'sd|sdf' => 'chemical/x-mdl-sdfile',      'tgf' => 'chemical/x-mdl-tgf',      'mcif' => 'chemical/x-mmcif',      'mol2' => 'chemical/x-mol2',      'b' => 'chemical/x-molconn-Z',      'gpt' => 'chemical/x-mopac-graph',      'mop|mopcrt|mpc|dat|zmt' => 'chemical/x-mopac-input',      'moo' => 'chemical/x-mopac-out',      'mvb' => 'chemical/x-mopac-vib',      'asn' => 'chemical/x-ncbi-asn1-spec',      'prt|ent' => 'chemical/x-ncbi-asn1-ascii',      'val|aso' => 'chemical/x-ncbi-asn1-binary',      'pdb|ent' => 'chemical/x-pdb',      'ros' => 'chemical/x-rosdal',      'sw' => 'chemical/x-swissprot',      'vms' => 'chemical/x-vamas-iso14976',      'vmd' => 'chemical/x-vmd',      'xtel' => 'chemical/x-xtel',      'xyz' => 'chemical/x-xyz',      'gif' => 'image/gif',      'ief' => 'image/ief',      'jpeg|jpg|jpe' => 'image/jpeg',      'pcx' => 'image/pcx',      'png' => 'image/png',      'svg|svgz' => 'image/svg+xml',      'tiff|tif' => 'image/tiff',      'djvu|djv' => 'image/vnd.djvu',      'wbmp' => 'image/vnd.wap.wbmp',      'ras' => 'image/x-cmu-raster',      'cdr' => 'image/x-coreldraw',      'pat' => 'image/x-coreldrawpattern',      'cdt' => 'image/x-coreldrawtemplate',      'ico' => 'image/x-icon',      'art' => 'image/x-jg',      'jng' => 'image/x-jng',      'bmp' => 'image/x-ms-bmp',      'psd' => 'image/x-photoshop',      'pnm' => 'image/x-portable-anymap',      'pbm' => 'image/x-portable-bitmap',      'pgm' => 'image/x-portable-graymap',      'ppm' => 'image/x-portable-pixmap',      'rgb' => 'image/x-rgb',      'xbm' => 'image/x-xbitmap',      'xpm' => 'image/x-xpixmap',      'xwd' => 'image/x-xwindowdump',      'eml' => 'message/rfc822',      'igs|iges' => 'model/iges',      'msh|mesh|silo' => 'model/mesh',      'wrl|vrml' => 'model/vrml',      'ics|icz' => 'text/calendar',      'css' => 'text/css',      'csv' => 'text/csv',      '323' => 'text/h323',      'html|htm|shtml' => 'text/html',      'uls' => 'text/iuls',      'mml' => 'text/mathml',      'asc|txt|text|pot' => 'text/plain',      'rtx' => 'text/richtext',      'sct|wsc' => 'text/scriptlet',      'tm|ts' => 'text/texmacs',      'tsv' => 'text/tab-separated-values',      'jad' => 'text/vnd.sun.j2me.app-descriptor',      'wml' => 'text/vnd.wap.wml',      'wmls' => 'text/vnd.wap.wmlscript',      'bib' => 'text/x-bibtex',      'boo' => 'text/x-boo',      'h++|hpp|hxx|hh' => 'text/x-c++hdr',      'c++|cpp|cxx|cc' => 'text/x-c++src',      'h' => 'text/x-chdr',      'htc' => 'text/x-component',      'c' => 'text/x-csrc',      'd' => 'text/x-dsrc',      'diff|patch' => 'text/x-diff',      'hs' => 'text/x-haskell',      'java' => 'text/x-java',      'lhs' => 'text/x-literate-haskell',      'moc' => 'text/x-moc',      'p|pas' => 'text/x-pascal',      'gcd' => 'text/x-pcs-gcd',      'pl|pm' => 'text/x-perl',      'py' => 'text/x-python',      'etx' => 'text/x-setext',      'tcl|tk' => 'text/x-tcl',      'tex|ltx|sty|cls' => 'text/x-tex',      'vcs' => 'text/x-vcalendar',      'vcf' => 'text/x-vcard',      '3gp' => 'video/3gpp',      'dl' => 'video/dl',      'dif|dv' => 'video/dv',      'fli' => 'video/fli',      'gl' => 'video/gl',      'mpeg|mpg|mpe' => 'video/mpeg',      'mp4|f4v|f4p' => 'video/mp4',      'flv' => 'video/x-flv',      'ogv' => 'video/ogg',      'qt|mov' => 'video/quicktime',      'mxu' => 'video/vnd.mpegurl',      'lsf|lsx' => 'video/x-la-asf',      'mng' => 'video/x-mng',      'asf|asx' => 'video/x-ms-asf',      'wm' => 'video/x-ms-wm',      'wmv' => 'video/x-ms-wmv',      'wmx' => 'video/x-ms-wmx',      'wvx' => 'video/x-ms-wvx',      'avi' => 'video/x-msvideo',      'movie' => 'video/x-sgi-movie',      'ice' => 'x-conference/x-cooltalk',      'sisx' => 'x-epoc/x-sisx-app',      'vrm|vrml|wrl' => 'x-world/x-vrml',      'xps' => 'application/vnd.ms-xpsdocument',    ));  }  foreach ($mapping as $ext_preg => $mime_match) {    if (preg_match('!\.('. $ext_preg .')$!i', $filename)) {      return $mime_match;    }  }  return 'application/octet-stream';}/** * @} End of "defgroup file". */
<?php// $Id$/** * @file * Enables functions to be stored and executed at a later time when * triggered by other modules or by one of Drupal's core API hooks. *//** * Implementation of hook_help(). */function trigger_help($path, $arg) {  $explanation = '<p>'. t('Triggers are system events, such as when new content is added or when a user logs in. Trigger module combines these triggers with actions (functional tasks), such as unpublishing content or e-mailing an administrator. The <a href="@url">Actions settings page</a> contains a list of existing actions and provides the ability to create and configure additional actions.', array('@url' => url('admin/settings/actions'))) .'</p>';  switch ($path) {    case 'admin/build/trigger/comment':      return $explanation .'<p>'. t('Below you can assign actions to run when certain comment-related triggers happen. For example, you could promote a post to the front page when a comment is added.') .'</p>';    case 'admin/build/trigger/node':      return $explanation .'<p>'. t('Below you can assign actions to run when certain content-related triggers happen. For example, you could send an e-mail to an administrator when a post is created or updated.') .'</p>';    case 'admin/build/trigger/cron':      return $explanation .'<p>'. t('Below you can assign actions to run during each pass of a <a href="@cron">cron maintenance task</a>.', array('@cron' => url('admin/reports/status'))) .'</p>';    case 'admin/build/trigger/taxonomy':      return $explanation .'<p>'. t('Below you can assign actions to run when certain taxonomy-related triggers happen. For example, you could send an e-mail to an administrator when a term is deleted.') .'</p>';    case 'admin/build/trigger/user':      return $explanation .'<p>'. t("Below you can assign actions to run when certain user-related triggers happen. For example, you could send an e-mail to an administrator when a user account is deleted.") .'</p>';    case 'admin/help#trigger':      $output = '<p>'. t('The Trigger module provides the ability to trigger <a href="@actions">actions</a> upon system events, such as when new content is added or when a user logs in.', array('@actions' => url('admin/settings/actions'))) .'</p>';      $output .= '<p>'. t('The combination of actions and triggers can perform many useful tasks, such as e-mailing an administrator if a user account is deleted, or automatically unpublishing comments that contain certain words. By default, there are five "contexts" of events (Comments, Content, Cron, Taxonomy, and Users), but more may be added by additional modules.') .'</p>';      $output .= '<p>'. t('For more information, see the online handbook entry for <a href="@trigger">Trigger module</a>.', array('@trigger' => 'http://drupal.org/handbook/modules/trigger/')) .'</p>';      return $output;  }}/** * Implementation of hook_menu(). */function trigger_menu() {  $items['admin/build/trigger'] = array(    'title' => 'Triggers',    'description' => 'Tell Drupal when to execute actions.',    'page callback' => 'trigger_assign',    'access callback' => 'trigger_access_check',    'access arguments' => array('node'),    'file' => 'trigger.admin.inc',  );  // We don't use a menu wildcard here because these are tabs,  // not invisible items.  $items['admin/build/trigger/node'] = array(    'title' => 'Content',    'page callback' => 'trigger_assign',    'page arguments' => array('node'),    'access callback' => 'trigger_access_check',    'access arguments' => array('node'),    'type' => MENU_LOCAL_TASK,    'file' => 'trigger.admin.inc',  );  $items['admin/build/trigger/user'] = array(    'title' => 'Users',    'page callback' => 'trigger_assign',    'page arguments' => array('user'),    'access callback' => 'trigger_access_check',    'access arguments' => array('user'),    'type' => MENU_LOCAL_TASK,    'file' => 'trigger.admin.inc',  );  $items['admin/build/trigger/comment'] = array(    'title' => 'Comments',    'page callback' => 'trigger_assign',    'page arguments' => array('comment'),    'access callback' => 'trigger_access_check',    'access arguments' => array('comment'),    'type' => MENU_LOCAL_TASK,    'file' => 'trigger.admin.inc',  );  $items['admin/build/trigger/taxonomy'] = array(    'title' => 'Taxonomy',    'page callback' => 'trigger_assign',    'page arguments' => array('taxonomy'),    'access callback' => 'trigger_access_check',    'access arguments' => array('taxonomy'),    'type' => MENU_LOCAL_TASK,    'file' => 'trigger.admin.inc',  );  $items['admin/build/trigger/cron'] = array(    'title' => 'Cron',    'page callback' => 'trigger_assign',    'page arguments' => array('cron'),    'access arguments' => array('administer actions'),    'type' => MENU_LOCAL_TASK,    'file' => 'trigger.admin.inc',  );  // We want contributed modules to be able to describe  // their hooks and have actions assignable to them.  $hooks = module_invoke_all('hook_info');  foreach ($hooks as $module => $hook) {    // We've already done these.    if (in_array($module, array('node', 'comment', 'user', 'system', 'taxonomy'))) {      continue;    }    $info = db_result(db_query("SELECT info FROM {system} WHERE name = '%s'", $module));    $info = unserialize($info);    $nice_name = $info['name'];    $items["admin/build/trigger/$module"] = array(      'title' => $nice_name,      'page callback' => 'trigger_assign',      'page arguments' => array($module),      'access arguments' => array($module),      'type' => MENU_LOCAL_TASK,      'file' => 'trigger.admin.inc',    );  }  $items['admin/build/trigger/unassign'] = array(    'title' => 'Unassign',    'description' => 'Unassign an action from a trigger.',    'page callback' => 'drupal_get_form',    'page arguments' => array('trigger_unassign'),    'access arguments' => array('administer actions'),    'type' => MENU_CALLBACK,    'file' => 'trigger.admin.inc',  );  return $items;}/** * Access callback for menu system. */function trigger_access_check($module) {  return (module_exists($module) && user_access('administer actions'));}/** * Get the aids of actions to be executed for a hook-op combination. * * @param $hook *   The name of the hook being fired. * @param $op *   The name of the operation being executed. Defaults to an empty string *   because some hooks (e.g., hook_cron()) do not have operations. * @return *   An array of action IDs. */function _trigger_get_hook_aids($hook, $op = '') {  $aids = array();  $result = db_query("SELECT aa.aid, a.type FROM {trigger_assignments} aa LEFT JOIN {actions} a ON aa.aid = a.aid WHERE aa.hook = '%s' AND aa.op = '%s' ORDER BY weight", $hook, $op);  while ($action = db_fetch_object($result)) {    $aids[$action->aid]['type'] = $action->type;  }  return $aids;}/** * Implementation of hook_theme(). */function trigger_theme() {  return array(    'trigger_display' => array(      'arguments' => array('element'),      'file' => 'trigger.admin.inc',    ),  );}/** * Implementation of hook_forms(). We reuse code by using the * same assignment form definition for each node-op combination. */function trigger_forms() {  $hooks = module_invoke_all('hook_info');  foreach ($hooks as $module => $info) {    foreach ($hooks[$module] as $hook => $ops) {      foreach ($ops as $op => $description) {        $forms['trigger_'. $hook .'_'. $op .'_assign_form'] = array('callback' => 'trigger_assign_form');      }    }  }  return $forms;}/** * When an action is called in a context that does not match its type, * the object that the action expects must be retrieved. For example, when * an action that works on users is called during the node hook, the * user object is not available since the node hook doesn't pass it. * So here we load the object the action expects. * * @param $type *   The type of action that is about to be called. * @param $node *   The node that was passed via the nodeapi hook. * @return *   The object expected by the action that is about to be called. */function _trigger_normalize_node_context($type, $node) {  switch ($type) {    // If an action that works on comments is being called in a node context,    // the action is expecting a comment object. But we do not know which comment    // to give it. The first? The most recent? All of them? So comment actions    // in a node context are not supported.    // An action that works on users is being called in a node context.    // Load the user object of the node's author.    case 'user':      return user_load(array('uid' => $node->uid));  }}/** * Implementation of hook_nodeapi(). */function trigger_nodeapi(&$node, $op, $a3, $a4) {  // Keep objects for reuse so that changes actions make to objects can persist.  static $objects;  // Prevent recursion by tracking which operations have already been called.  static $recursion;  // Support a subset of operations.  if (!in_array($op, array('view', 'update', 'presave', 'insert', 'delete')) || isset($recursion[$op])) {    return;  }  $recursion[$op] = TRUE;  $aids = _trigger_get_hook_aids('nodeapi', $op);  if (!$aids) {    return;  }  $context = array(    'hook' => 'nodeapi',    'op' => $op,  );  // We need to get the expected object if the action's type is not 'node'.  // We keep the object in $objects so we can reuse it if we have multiple actions  // that make changes to an object.  foreach ($aids as $aid => $action_info) {    if ($action_info['type'] != 'node') {      if (!isset($objects[$action_info['type']])) {        $objects[$action_info['type']] = _trigger_normalize_node_context($action_info['type'], $node);      }      // Since we know about the node, we pass that info along to the action.      $context['node'] = $node;      $result = actions_do($aid, $objects[$action_info['type']], $context, $a3, $a4);    }    else {      actions_do($aid, $node, $context, $a3, $a4);    }  }}/** * When an action is called in a context that does not match its type, * the object that the action expects must be retrieved. For example, when * an action that works on nodes is called during the comment hook, the * node object is not available since the comment hook doesn't pass it. * So here we load the object the action expects. * * @param $type *   The type of action that is about to be called. * @param $comment *   The comment that was passed via the comment hook. * @return *   The object expected by the action that is about to be called. */function _trigger_normalize_comment_context($type, $comment) {  switch ($type) {    // An action that works with nodes is being called in a comment context.    case 'node':      return node_load(is_array($comment) ? $comment['nid'] : $comment->nid);    // An action that works on users is being called in a comment context.    case 'user':      return user_load(array('uid' => is_array($comment) ? $comment['uid'] : $comment->uid));  }}/** * Implementation of hook_comment(). */function trigger_comment($a1, $op) {  // Keep objects for reuse so that changes actions make to objects can persist.  static $objects;  // We support a subset of operations.  if (!in_array($op, array('insert', 'update', 'delete', 'view'))) {    return;  }  $aids = _trigger_get_hook_aids('comment', $op);  $context = array(    'hook' => 'comment',    'op' => $op,  );  // We need to get the expected object if the action's type is not 'comment'.  // We keep the object in $objects so we can reuse it if we have multiple actions  // that make changes to an object.  foreach ($aids as $aid => $action_info) {    if ($action_info['type'] != 'comment') {      if (!isset($objects[$action_info['type']])) {        $objects[$action_info['type']] = _trigger_normalize_comment_context($action_info['type'], $a1);      }      // Since we know about the comment, we pass it along to the action      // in case it wants to peek at it.      $context['comment'] = (object) $a1;      actions_do($aid, $objects[$action_info['type']], $context);    }    else {      $comment = (object) $a1;      actions_do($aid, $comment, $context);    }  }}/** * Implementation of hook_cron(). */function trigger_cron() {  $aids = _trigger_get_hook_aids('cron', 'run');  $context = array(    'hook' => 'cron',    'op' => 'run',  );  // Cron does not act on any specific object.  $object = NULL;  actions_do(array_keys($aids), $object, $context);}/** * When an action is called in a context that does not match its type, * the object that the action expects must be retrieved. For example, when * an action that works on nodes is called during the user hook, the * node object is not available since the user hook doesn't pass it. * So here we load the object the action expects. * * @param $type *   The type of action that is about to be called. * @param $account *   The account object that was passed via the user hook. * @return *   The object expected by the action that is about to be called. */function _trigger_normalize_user_context($type, $account) {  switch ($type) {    // If an action that works on comments is being called in a user context,    // the action is expecting a comment object. But we have no way of    // determining the appropriate comment object to pass. So comment    // actions in a user context are not supported.    // An action that works with nodes is being called in a user context.    // If a single node is being viewed, return the node.    case 'node':      // If we are viewing an individual node, return the node.      if ((arg(0) == 'node') && is_numeric(arg(1)) && (arg(2) == NULL)) {        return node_load(array('nid' => arg(1)));      }  }}/** * Implementation of hook_user(). */function trigger_user($op, &$edit, &$account, $category = NULL) {  // Keep objects for reuse so that changes actions make to objects can persist.  static $objects;  // We support a subset of operations.  if (!in_array($op, array('login', 'logout', 'insert', 'update', 'delete', 'view'))) {    return;  }  $aids = _trigger_get_hook_aids('user', $op);  $context = array(    'hook' => 'user',    'op' => $op,    'form_values' => &$edit,  );  foreach ($aids as $aid => $action_info) {    if ($action_info['type'] != 'user') {      if (!isset($objects[$action_info['type']])) {        $objects[$action_info['type']] = _trigger_normalize_user_context($action_info['type'], $account);      }      $context['account'] = $account;      actions_do($aid, $objects[$action_info['type']], $context);    }    else {      actions_do($aid, $account, $context, $category);    }  }}/** * Implementation of hook_taxonomy(). */function trigger_taxonomy($op, $type, $array) {  if ($type != 'term') {    return;  }  $aids = _trigger_get_hook_aids('taxonomy', $op);  $context = array(    'hook' => 'taxonomy',    'op' => $op  );  foreach ($aids as $aid => $action_info) {    $taxonomy_object = (object) $array;    actions_do($aid, $taxonomy_object, $context);  }}/** * Often we generate a select field of all actions. This function * generates the options for that select. * * @param $type *   One of 'node', 'user', 'comment'. * @return *   Array keyed by action ID. */function trigger_options($type = 'all') {  $options = array(t('Choose an action'));  foreach (actions_actions_map(actions_get_all_actions()) as $aid => $action) {    $options[$action['type']][$aid] = $action['description'];  }  if ($type == 'all') {    return $options;  }  else {    return $options[$type];  }}/** * Implementation of hook_actions_delete(). * * Remove all trigger entries for the given action, when deleted. */function trigger_actions_delete($aid) {  db_query("DELETE FROM {trigger_assignments} WHERE aid = '%s'", $aid);}
<?php// $Id$/** * @file * API for loading and interacting with Drupal modules. *//** * Load all the modules that have been enabled in the system table. */function module_load_all() {  foreach (module_list(TRUE, FALSE) as $module) {    drupal_load('module', $module);  }}/** * Call a function repeatedly with each module in turn as an argument. */function module_iterate($function, $argument = '') {  foreach (module_list() as $name) {    $function($name, $argument);  }}/** * Collect a list of all loaded modules. During the bootstrap, return only * vital modules. See bootstrap.inc * * @param $refresh *   Whether to force the module list to be regenerated (such as after the *   administrator has changed the system settings). * @param $bootstrap *   Whether to return the reduced set of modules loaded in "bootstrap mode" *   for cached pages. See bootstrap.inc. * @param $sort *   By default, modules are ordered by weight and filename, settings this option *   to TRUE, module list will be ordered by module name. * @param $fixed_list *   (Optional) Override the module list with the given modules. Stays until the *   next call with $refresh = TRUE. * @return *   An associative array whose keys and values are the names of all loaded *   modules. */function module_list($refresh = FALSE, $bootstrap = TRUE, $sort = FALSE, $fixed_list = NULL) {  static $list, $sorted_list;  if ($refresh || $fixed_list) {    $list = array();    $sorted_list = NULL;    if ($fixed_list) {      foreach ($fixed_list as $name => $module) {        drupal_get_filename('module', $name, $module['filename']);        $list[$name] = $name;      }    }    else {      if ($bootstrap) {        $result = db_query("SELECT name, filename, throttle FROM {system} WHERE type = 'module' AND status = 1 AND bootstrap = 1 ORDER BY weight ASC, filename ASC");      }      else {        $result = db_query("SELECT name, filename, throttle FROM {system} WHERE type = 'module' AND status = 1 ORDER BY weight ASC, filename ASC");      }      while ($module = db_fetch_object($result)) {        if (file_exists($module->filename)) {          // Determine the current throttle status and see if the module should be          // loaded based on server load. We have to directly access the throttle          // variables, since throttle.module may not be loaded yet.          $throttle = ($module->throttle && variable_get('throttle_level', 0) > 0);          if (!$throttle) {            drupal_get_filename('module', $module->name, $module->filename);            $list[$module->name] = $module->name;          }        }      }    }  }  if ($sort) {    if (!isset($sorted_list)) {      $sorted_list = $list;      ksort($sorted_list);    }    return $sorted_list;  }  return $list;}/** * Rebuild the database cache of module files. * * @return *   The array of filesystem objects used to rebuild the cache. */function module_rebuild_cache() {  // Get current list of modules  $files = drupal_system_listing('\.module$', 'modules', 'name', 0);  // Extract current files from database.  system_get_files_database($files, 'module');  ksort($files);  // Set defaults for module info  $defaults = array(    'dependencies' => array(),    'dependents' => array(),    'description' => '',    'version' => NULL,    'php' => DRUPAL_MINIMUM_PHP,  );  foreach ($files as $filename => $file) {    // Look for the info file.    $file->info = drupal_parse_info_file(dirname($file->filename) .'/'. $file->name .'.info');    // Skip modules that don't provide info.    if (empty($file->info)) {      unset($files[$filename]);      continue;    }    // Merge in defaults and save.    $files[$filename]->info = $file->info + $defaults;    // Invoke hook_system_info_alter() to give installed modules a chance to    // modify the data in the .info files if necessary.    drupal_alter('system_info', $files[$filename]->info, $files[$filename]);    // Log the critical hooks implemented by this module.    $bootstrap = 0;    foreach (bootstrap_hooks() as $hook) {      if (module_hook($file->name, $hook)) {        $bootstrap = 1;        break;      }    }    // Update the contents of the system table:    if (isset($file->status) || (isset($file->old_filename) && $file->old_filename != $file->filename)) {      db_query("UPDATE {system} SET info = '%s', name = '%s', filename = '%s', bootstrap = %d WHERE filename = '%s'", serialize($files[$filename]->info), $file->name, $file->filename, $bootstrap, $file->old_filename);    }    else {      // This is a new module.      $files[$filename]->status = 0;      $files[$filename]->throttle = 0;      db_query("INSERT INTO {system} (name, info, type, filename, status, throttle, bootstrap) VALUES ('%s', '%s', '%s', '%s', %d, %d, %d)", $file->name, serialize($files[$filename]->info), 'module', $file->filename, 0, 0, $bootstrap);    }  }  $files = _module_build_dependencies($files);  return $files;}/** * Find dependencies any level deep and fill in dependents information too. * * If module A depends on B which in turn depends on C then this function will * add C to the list of modules A depends on. This will be repeated until * module A has a list of all modules it depends on. If it depends on itself, * called a circular dependency, that's marked by adding a nonexistent module, * called -circular- to this list of modules. Because this does not exist, * it'll be impossible to switch module A on. * * Also we fill in a dependents array in $file->info. Using the names above, * the dependents array of module B lists A. * * @param $files *   The array of filesystem objects used to rebuild the cache. * @return *   The same array with dependencies and dependents added where applicable. */function _module_build_dependencies($files) {  do {    $new_dependency = FALSE;    foreach ($files as $filename => $file) {      // We will modify this object (module A, see doxygen for module A, B, C).      $file = &$files[$filename];      if (isset($file->info['dependencies']) && is_array($file->info['dependencies'])) {        foreach ($file->info['dependencies'] as $dependency_name) {          // This is a nonexistent module.          if ($dependency_name == '-circular-' || !isset($files[$dependency_name])) {            continue;          }          // $dependency_name is module B (again, see doxygen).          $files[$dependency_name]->info['dependents'][$filename] = $filename;          $dependency = $files[$dependency_name];          if (isset($dependency->info['dependencies']) && is_array($dependency->info['dependencies'])) {            // Let's find possible C modules.            foreach ($dependency->info['dependencies'] as $candidate) {              if (array_search($candidate, $file->info['dependencies']) === FALSE) {                // Is this a circular dependency?                if ($candidate == $filename) {                  // As a module name can not contain dashes, this makes                  // impossible to switch on the module.                  $candidate = '-circular-';                  // Do not display the message or add -circular- more than once.                  if (array_search($candidate, $file->info['dependencies']) !== FALSE) {                    continue;                  }                  drupal_set_message(t('%module is part of a circular dependency. This is not supported and you will not be able to switch it on.', array('%module' => $file->info['name'])), 'error');                }                else {                  // We added a new dependency to module A. The next loop will                  // be able to use this as "B module" thus finding even                  // deeper dependencies.                  $new_dependency = TRUE;                }                $file->info['dependencies'][] = $candidate;              }            }          }        }      }      // Don't forget to break the reference.      unset($file);    }  } while ($new_dependency);  return $files;}/** * Determine whether a given module exists. * * @param $module *   The name of the module (without the .module extension). * @return *   TRUE if the module is both installed and enabled. */function module_exists($module) {  $list = module_list();  return array_key_exists($module, $list);}/** * Load a module's installation hooks. */function module_load_install($module) {  // Make sure the installation API is available  include_once './includes/install.inc';  module_load_include('install', $module);}/** * Load a module include file. *  * Examples: * @code *   // Load node.admin.inc from the node module. *   module_load_include('inc', 'node', 'node.admin'); *   // Load content_types.inc from the node module. *   module_load_include('inc', 'node', 'content_types');   * @endcode *  * Do not use this function to load an install file. Use module_load_install() * instead. * * @param $type *   The include file's type (file extension). * @param $module *   The module to which the include file belongs. * @param $name *   Optionally, specify the base file name (without the $type extension).  *   If not set, $module is used. */function module_load_include($type, $module, $name = NULL) {  if (empty($name)) {    $name = $module;  }  $file = './'. drupal_get_path('module', $module) ."/$name.$type";  if (is_file($file)) {    require_once $file;  }  else {    return FALSE;  }}/** * Load an include file for each of the modules that have been enabled in * the system table. */function module_load_all_includes($type, $name = NULL) {  $modules = module_list();  foreach ($modules as $module) {    module_load_include($type, $module, $name);  }}/** * Enable a given list of modules. * * @param $module_list *   An array of module names. */function module_enable($module_list) {  $invoke_modules = array();  foreach ($module_list as $module) {    $existing = db_fetch_object(db_query("SELECT status FROM {system} WHERE type = '%s' AND name = '%s'", 'module', $module));    if ($existing->status == 0) {      module_load_install($module);      db_query("UPDATE {system} SET status = %d, throttle = %d WHERE type = '%s' AND name = '%s'", 1, 0, 'module', $module);      drupal_load('module', $module);      $invoke_modules[] = $module;    }  }  if (!empty($invoke_modules)) {    // Refresh the module list to include the new enabled module.    module_list(TRUE, FALSE);    // Force to regenerate the stored list of hook implementations.    module_implements('', FALSE, TRUE);  }  foreach ($invoke_modules as $module) {    module_invoke($module, 'enable');    // Check if node_access table needs rebuilding.    // We check for the existence of node_access_needs_rebuild() since    // at install time, module_enable() could be called while node.module    // is not enabled yet.    if (function_exists('node_access_needs_rebuild') && !node_access_needs_rebuild() && module_hook($module, 'node_grants')) {      node_access_needs_rebuild(TRUE);    }  }}/** * Disable a given set of modules. * * @param $module_list *   An array of module names. */function module_disable($module_list) {  $invoke_modules = array();  foreach ($module_list as $module) {    if (module_exists($module)) {      // Check if node_access table needs rebuilding.      if (!node_access_needs_rebuild() && module_hook($module, 'node_grants')) {        node_access_needs_rebuild(TRUE);      }      module_load_install($module);      module_invoke($module, 'disable');      db_query("UPDATE {system} SET status = %d, throttle = %d WHERE type = '%s' AND name = '%s'", 0, 0, 'module', $module);      $invoke_modules[] = $module;    }  }  if (!empty($invoke_modules)) {    // Refresh the module list to exclude the disabled modules.    module_list(TRUE, FALSE);    // Force to regenerate the stored list of hook implementations.    module_implements('', FALSE, TRUE);  }  // If there remains no more node_access module, rebuilding will be  // straightforward, we can do it right now.  if (node_access_needs_rebuild() && count(module_implements('node_grants')) == 0) {    node_access_rebuild();  }}/** * @defgroup hooks Hooks * @{ * Allow modules to interact with the Drupal core. * * Drupal's module system is based on the concept of "hooks". A hook is a PHP * function that is named foo_bar(), where "foo" is the name of the module * (whose filename is thus foo.module) and "bar" is the name of the hook. Each * hook has a defined set of parameters and a specified result type. * * To extend Drupal, a module need simply implement a hook. When Drupal wishes * to allow intervention from modules, it determines which modules implement a * hook and calls that hook in all enabled modules that implement it. * * The available hooks to implement are explained here in the Hooks section of * the developer documentation. The string "hook" is used as a placeholder for * the module name in the hook definitions. For example, if the module file is * called example.module, then hook_help() as implemented by that module would * be defined as example_help(). *//** * Determine whether a module implements a hook. * * @param $module *   The name of the module (without the .module extension). * @param $hook *   The name of the hook (e.g. "help" or "menu"). * @return *   TRUE if the module is both installed and enabled, and the hook is *   implemented in that module. */function module_hook($module, $hook) {  return function_exists($module .'_'. $hook);}/** * Determine which modules are implementing a hook. * * @param $hook *   The name of the hook (e.g. "help" or "menu"). * @param $sort *   By default, modules are ordered by weight and filename, settings this option *   to TRUE, module list will be ordered by module name. * @param $refresh *   For internal use only: Whether to force the stored list of hook *   implementations to be regenerated (such as after enabling a new module, *   before processing hook_enable). * @return *   An array with the names of the modules which are implementing this hook. */function module_implements($hook, $sort = FALSE, $refresh = FALSE) {  static $implementations;  if ($refresh) {    $implementations = array();    return;  }  if (!isset($implementations[$hook])) {    $implementations[$hook] = array();    $list = module_list(FALSE, TRUE, $sort);    foreach ($list as $module) {      if (module_hook($module, $hook)) {        $implementations[$hook][] = $module;      }    }  }  // The explicit cast forces a copy to be made. This is needed because  // $implementations[$hook] is only a reference to an element of  // $implementations and if there are nested foreaches (due to nested node  // API calls, for example), they would both manipulate the same array's  // references, which causes some modules' hooks not to be called.  // See also http://www.zend.com/zend/art/ref-count.php.  return (array)$implementations[$hook];}/** * Invoke a hook in a particular module. * * @param $module *   The name of the module (without the .module extension). * @param $hook *   The name of the hook to invoke. * @param ... *   Arguments to pass to the hook implementation. * @return *   The return value of the hook implementation. */function module_invoke() {  $args = func_get_args();  $module = $args[0];  $hook = $args[1];  unset($args[0], $args[1]);  $function = $module .'_'. $hook;  if (module_hook($module, $hook)) {    return call_user_func_array($function, $args);  }}/** * Invoke a hook in all enabled modules that implement it. * * @param $hook *   The name of the hook to invoke. * @param ... *   Arguments to pass to the hook. * @return *   An array of return values of the hook implementations. If modules return *   arrays from their implementations, those are merged into one array. */function module_invoke_all() {  $args = func_get_args();  $hook = $args[0];  unset($args[0]);  $return = array();  foreach (module_implements($hook) as $module) {    $function = $module .'_'. $hook;    $result = call_user_func_array($function, $args);    if (isset($result) && is_array($result)) {      $return = array_merge_recursive($return, $result);    }    else if (isset($result)) {      $return[] = $result;    }  }  return $return;}/** * @} End of "defgroup hooks". *//** * Array of modules required by core. */function drupal_required_modules() {  return array('block', 'filter', 'node', 'system', 'user');}
<?php// $Id$/** * @file * Allows administrators to customize the site navigation menu. *//** * Maximum length of menu name as entered by the user. Database length is 32 * and we add a menu- prefix. */define('MENU_MAX_MENU_NAME_LENGTH_UI', 27);/** * Implementation of hook_help(). */function menu_help($path, $arg) {  switch ($path) {    case 'admin/help#menu':      $output = '<p>'. t("The menu module provides an interface to control and customize Drupal's powerful menu system. Menus are a hierarchical collection of links, or menu items, used to navigate a website, and are positioned and displayed using Drupal's flexible block system. By default, three menus are created during installation: <em>Navigation</em>, <em>Primary links</em>, and <em>Secondary links</em>. The <em>Navigation</em> menu contains most links necessary for working with and navigating your site, and is often displayed in either the left or right sidebar. Most Drupal themes also provide support for <em>Primary links</em> and <em>Secondary links</em>, by displaying them in either the header or footer of each page. By default, <em>Primary links</em> and <em>Secondary links</em> contain no menu items but may be configured to contain custom menu items specific to your site.") .'</p>';      $output .= '<p>'. t('The <a href="@menu">menus page</a> displays all menus currently available on your site. Select a menu from this list to add or edit a menu item, or to rearrange items within the menu. Create new menus using the <a href="@add-menu">add menu page</a> (the block containing a new menu must also be enabled on the <a href="@blocks">blocks administration page</a>).', array('@menu' => url('admin/build/menu'), '@add-menu' => url('admin/build/menu/add'), '@blocks' => url('admin/build/block'))) .'</p>';      $output .= '<p>'. t('For more information, see the online handbook entry for <a href="@menu">Menu module</a>.', array('@menu' => 'http://drupal.org/handbook/modules/menu/')) .'</p>';      return $output;    case 'admin/build/menu':      return '<p>'. t('Menus are a collection of links (menu items) used to navigate a website. The menus currently available on your site are displayed below. Select a menu from this list to manage its menu items.') .'</p>';    case 'admin/build/menu/add':      return '<p>'. t('Enter the name for your new menu. Remember to enable the newly created block in the <a href="@blocks">blocks administration page</a>.', array('@blocks' => url('admin/build/block'))) .'</p>';    case 'admin/build/menu-customize/%':      return '<p>'. t('To rearrange menu items, grab a drag-and-drop handle under the <em>Menu item</em> column and drag the items (or group of items) to a new location in the list. (Grab a handle by clicking and holding the mouse while hovering over a handle icon.) Remember that your changes will not be saved until you click the <em>Save configuration</em> button at the bottom of the page.') .'</p>';    case 'admin/build/menu/item/add':      return '<p>'. t('Enter the title and path for your new menu item.') .'</p>';  }}/** * Implementation of hook_perm(). */function menu_perm() {  return array('administer menu');}/** * Implementation of hook_menu(). */function menu_menu() {  $items['admin/build/menu'] = array(    'title' => 'Menus',    'description' => "Control your site's navigation menu, primary links and secondary links. as well as rename and reorganize menu items.",    'page callback' => 'menu_overview_page',    'access callback' => 'user_access',    'access arguments' => array('administer menu'),    'file' => 'menu.admin.inc',  );  $items['admin/build/menu/list'] = array(    'title' => 'List menus',    'type' => MENU_DEFAULT_LOCAL_TASK,    'weight' => -10,    'file' => 'menu.admin.inc',  );  $items['admin/build/menu/add'] = array(    'title' => 'Add menu',    'page callback' => 'drupal_get_form',    'page arguments' => array('menu_edit_menu', 'add'),    'access arguments' => array('administer menu'),    'type' => MENU_LOCAL_TASK,    'file' => 'menu.admin.inc',  );  $items['admin/build/menu/settings'] = array(    'title' => 'Settings',    'page callback' => 'drupal_get_form',    'page arguments' => array('menu_configure'),    'access arguments' => array('administer menu'),    'type' => MENU_LOCAL_TASK,    'weight' => 5,    'file' => 'menu.admin.inc',  );  $items['admin/build/menu-customize/%menu'] = array(    'title' => 'Customize menu',    'page callback' => 'drupal_get_form',    'page arguments' => array('menu_overview_form', 3),    'title callback' => 'menu_overview_title',    'title arguments' => array(3),    'access arguments' => array('administer menu'),    'type' => MENU_CALLBACK,    'file' => 'menu.admin.inc',  );  $items['admin/build/menu-customize/%menu/list'] = array(    'title' => 'List items',    'weight' => -10,    'type' => MENU_DEFAULT_LOCAL_TASK,    'file' => 'menu.admin.inc',  );  $items['admin/build/menu-customize/%menu/add'] = array(    'title' => 'Add item',    'page callback' => 'drupal_get_form',    'page arguments' => array('menu_edit_item', 'add', NULL, 3),    'access arguments' => array('administer menu'),    'type' => MENU_LOCAL_TASK,    'file' => 'menu.admin.inc',  );  $items['admin/build/menu-customize/%menu/edit'] = array(    'title' => 'Edit menu',    'page callback' => 'drupal_get_form',    'page arguments' => array('menu_edit_menu', 'edit', 3),    'access arguments' => array('administer menu'),    'type' => MENU_LOCAL_TASK,    'file' => 'menu.admin.inc',  );  $items['admin/build/menu-customize/%menu/delete'] = array(    'title' => 'Delete menu',    'page callback' => 'menu_delete_menu_page',    'page arguments' => array(3),    'access arguments' => array('administer menu'),    'type' => MENU_CALLBACK,    'file' => 'menu.admin.inc',  );  $items['admin/build/menu/item/%menu_link/edit'] = array(    'title' => 'Edit menu item',    'page callback' => 'drupal_get_form',    'page arguments' => array('menu_edit_item', 'edit', 4, NULL),    'access arguments' => array('administer menu'),    'type' => MENU_CALLBACK,    'file' => 'menu.admin.inc',  );  $items['admin/build/menu/item/%menu_link/reset'] = array(    'title' => 'Reset menu item',    'page callback' => 'drupal_get_form',    'page arguments' => array('menu_reset_item_confirm', 4),    'access arguments' => array('administer menu'),    'type' => MENU_CALLBACK,    'file' => 'menu.admin.inc',  );  $items['admin/build/menu/item/%menu_link/delete'] = array(    'title' => 'Delete menu item',    'page callback' => 'menu_item_delete_page',    'page arguments' => array(4),    'access arguments' => array('administer menu'),    'type' => MENU_CALLBACK,    'file' => 'menu.admin.inc',  );  return $items;}/** * Implemenation of hook_theme(). */function menu_theme() {  return array(    'menu_overview_form' => array(      'file' => 'menu.admin.inc',      'arguments' => array('form' => NULL),    ),  );}/** * Implementation of hook_enable() * *  Add a link for each custom menu. */function menu_enable() {  menu_rebuild();  $base_link = db_fetch_array(db_query("SELECT mlid AS plid, menu_name from {menu_links} WHERE link_path = 'admin/build/menu' AND module = 'system'"));  $base_link['router_path'] = 'admin/build/menu-customize/%';  $base_link['module'] = 'menu';  $result = db_query("SELECT * FROM {menu_custom}");  while ($menu = db_fetch_array($result)) {    // $link is passed by reference to menu_link_save(), so we make a copy of $base_link.    $link = $base_link;    $link['mlid'] = 0;    $link['link_title'] = $menu['title'];    $link['link_path'] = 'admin/build/menu-customize/'. $menu['menu_name'];    if (!db_result(db_query("SELECT mlid FROM {menu_links} WHERE link_path = '%s' AND plid = %d", $link['link_path'], $link['plid']))) {      menu_link_save($link);    }  }  menu_cache_clear_all();}/** * Title callback for the menu overview page and links. */function menu_overview_title($menu) {  return $menu['title'];}/** * Load the data for a single custom menu. */function menu_load($menu_name) {  return db_fetch_array(db_query("SELECT * FROM {menu_custom} WHERE menu_name = '%s'", $menu_name));}/** * Return a list of menu items that are valid possible parents for the given menu item. * * @param $menus *   An array of menu names and titles, such as from menu_get_menus(). * @param $item *   The menu item for which to generate a list of parents. *   If $item['mlid'] == 0 then the complete tree is returned. * @return *   An array of menu link titles keyed on the a string containing the menu name *   and mlid. The list excludes the given item and its children. */function menu_parent_options($menus, $item) {  // The menu_links table can be practically any size and we need a way to  // allow contrib modules to provide more scalable pattern choosers.  // hook_form_alter is too late in itself because all the possible parents are  // retrieved here, unless menu_override_parent_selector is set to TRUE.  if (variable_get('menu_override_parent_selector', FALSE)) {    return array();  }  // If the item has children, there is an added limit to the depth of valid parents.  if (isset($item['parent_depth_limit'])) {    $limit = $item['parent_depth_limit'];  }  else {    $limit = _menu_parent_depth_limit($item);  }  foreach ($menus as $menu_name => $title) {    $tree = menu_tree_all_data($menu_name, NULL);    $options[$menu_name .':0'] = '<'. $title .'>';    _menu_parents_recurse($tree, $menu_name, '--', $options, $item['mlid'], $limit);  }  return $options;}/** * Recursive helper function for menu_parent_options(). */function _menu_parents_recurse($tree, $menu_name, $indent, &$options, $exclude, $depth_limit) {  foreach ($tree as $data) {    if ($data['link']['depth'] > $depth_limit) {      // Don't iterate through any links on this level.      break;    }    if ($data['link']['mlid'] != $exclude && $data['link']['hidden'] >= 0) {      $title = $indent .' '. truncate_utf8($data['link']['title'], 30, TRUE, FALSE);      if ($data['link']['hidden']) {        $title .= ' ('. t('disabled') .')';      }      $options[$menu_name .':'. $data['link']['mlid']] = $title;      if ($data['below']) {        _menu_parents_recurse($data['below'], $menu_name, $indent .'--', $options, $exclude, $depth_limit);      }    }  }}/** * Reset a system-defined menu item. */function menu_reset_item($item) {  $new_item = _menu_link_build(menu_get_item($item['router_path']));  foreach (array('mlid', 'has_children') as $key) {    $new_item[$key] = $item[$key];  }  menu_link_save($new_item);  return $new_item;}/** * Implementation of hook_block(). */function menu_block($op = 'list', $delta = 0) {  $menus = menu_get_menus();  // The Navigation menu is handled by the user module.  unset($menus['navigation']);  if ($op == 'list') {    $blocks = array();    foreach ($menus as $name => $title) {      // Default "Navigation" block is handled by user.module.      $blocks[$name]['info'] = check_plain($title);      // Menu blocks can't be cached because each menu item can have      // a custom access callback. menu.inc manages its own caching.      $blocks[$name]['cache'] = BLOCK_NO_CACHE;    }    return $blocks;  }  else if ($op == 'view') {    $data['subject'] = check_plain($menus[$delta]);    $data['content'] = menu_tree($delta);    return $data;  }}/** * Implementation of hook_nodeapi(). */function menu_nodeapi(&$node, $op) {  switch ($op) {    case 'insert':    case 'update':      if (isset($node->menu)) {        $item = &$node->menu;        if (!empty($item['delete'])) {          menu_link_delete($item['mlid']);        }        elseif (trim($item['link_title'])) {          $item['link_title'] = trim($item['link_title']);          $item['link_path'] = "node/$node->nid";          if (!$item['customized']) {            $item['options']['attributes']['title'] = trim($node->title);          }          if (!menu_link_save($item)) {            drupal_set_message(t('There was an error saving the menu link.'), 'error');          }        }      }      break;    case 'delete':      // Delete all menu module links that point to this node.      $result = db_query("SELECT mlid FROM {menu_links} WHERE link_path = 'node/%d' AND module = 'menu'", $node->nid);      while ($m = db_fetch_array($result)) {        menu_link_delete($m['mlid']);      }      break;    case 'prepare':      if (empty($node->menu)) {        // Prepare the node for the edit form so that $node->menu always exists.        $menu_name = variable_get('menu_default_node_menu', 'primary-links');        $item = array();        if (isset($node->nid)) {          // Give priority to the default menu          $mlid = db_result(db_query_range("SELECT mlid FROM {menu_links} WHERE link_path = 'node/%d' AND menu_name = '%s' AND module = 'menu' ORDER BY mlid ASC", $node->nid, $menu_name, 0, 1));          // Check all menus if a link does not exist in the default menu.          if (!$mlid) {            $mlid = db_result(db_query_range("SELECT mlid FROM {menu_links} WHERE link_path = 'node/%d' AND module = 'menu' ORDER BY mlid ASC", $node->nid, 0, 1));          }          if ($mlid) {            $item = menu_link_load($mlid);          }        }        // Set default values.        $node->menu = $item + array('link_title' => '', 'mlid' => 0, 'plid' => 0, 'menu_name' => $menu_name, 'weight' => 0, 'options' => array(), 'module' => 'menu', 'expanded' => 0, 'hidden' => 0, 'has_children' => 0, 'customized' => 0);      }      // Find the depth limit for the parent select.      if (!isset($node->menu['parent_depth_limit'])) {        $node->menu['parent_depth_limit'] = _menu_parent_depth_limit($node->menu);      }      break;  }}/** * Find the depth limit for items in the parent select. */function _menu_parent_depth_limit($item) {  return MENU_MAX_DEPTH - 1 - (($item['mlid'] && $item['has_children']) ? menu_link_children_relative_depth($item) : 0);}/** * Implementation of hook_form_alter(). Adds menu item fields to the node form. */function menu_form_alter(&$form, $form_state, $form_id) {  if (isset($form['#node']) && $form['#node']->type .'_node_form' == $form_id) {    // Note - doing this to make sure the delete checkbox stays in the form.    $form['#cache'] = TRUE;    $form['menu'] = array(      '#type' => 'fieldset',      '#title' => t('Menu settings'),      '#access' => user_access('administer menu'),      '#collapsible' => TRUE,      '#collapsed' => FALSE,      '#tree' => TRUE,      '#weight' => -2,      '#attributes' => array('class' => 'menu-item-form'),    );    $item = $form['#node']->menu;    if ($item['mlid']) {      // There is an existing link.      $form['menu']['delete'] = array(        '#type' => 'checkbox',        '#title' => t('Delete this menu item.'),      );    }    if (!$item['link_title']) {      $form['menu']['#collapsed'] = TRUE;    }    foreach (array('mlid', 'module', 'hidden', 'has_children', 'customized', 'options', 'expanded', 'hidden', 'parent_depth_limit') as $key) {      $form['menu'][$key] = array('#type' => 'value', '#value' => $item[$key]);    }    $form['menu']['#item'] = $item;    $form['menu']['link_title'] = array('#type' => 'textfield',      '#title' => t('Menu link title'),      '#default_value' => $item['link_title'],      '#description' => t('The link text corresponding to this item that should appear in the menu. Leave blank if you do not wish to add this post to the menu.'),      '#required' => FALSE,    );    // Generate a list of possible parents (not including this item or descendants).    $options = menu_parent_options(menu_get_menus(), $item);    $default = $item['menu_name'] .':'. $item['plid'];    if (!isset($options[$default])) {      $default = 'primary-links:0';    }    $form['menu']['parent'] = array(      '#type' => 'select',      '#title' => t('Parent item'),      '#default_value' => $default,      '#options' => $options,      '#description' => t('The maximum depth for an item and all its children is fixed at !maxdepth. Some menu items may not be available as parents if selecting them would exceed this limit.', array('!maxdepth' => MENU_MAX_DEPTH)),      '#attributes' => array('class' => 'menu-title-select'),    );    $form['#submit'][] = 'menu_node_form_submit';    $form['menu']['weight'] = array(      '#type' => 'weight',      '#title' => t('Weight'),      '#delta' => 50,      '#default_value' => $item['weight'],      '#description' => t('Optional. In the menu, the heavier items will sink and the lighter items will be positioned nearer the top.'),    );  }}/** * Decompose the selected menu parent option into the menu_name and plid. */function menu_node_form_submit($form, &$form_state) {  list($form_state['values']['menu']['menu_name'], $form_state['values']['menu']['plid']) = explode(':', $form_state['values']['menu']['parent']);}/** * Return an associative array of the custom menus names. * * @param $all *   If FALSE return only user-added menus, or if TRUE also include *   the menus defined by the system. * @return *   An array with the machine-readable names as the keys, and human-readable *   titles as the values. */function menu_get_menus($all = TRUE) {  $system_menus = menu_list_system_menus();  $sql = 'SELECT * FROM {menu_custom}';  if (!$all) {    $sql .= ' WHERE menu_name NOT IN ('. implode(',', array_fill(0, count($system_menus), "'%s'")) .')';  }  $sql .= ' ORDER BY title';  $result = db_query($sql, $system_menus);  $rows = array();  while ($r = db_fetch_array($result)) {    $rows[$r['menu_name']] = $r['title'];  }  return $rows;}
<?php// $Id$/** * @file * This is the actions engine for executing stored actions. *//** * Perform a given list of actions by executing their callback functions. * * Given the IDs of actions to perform, find out what the callbacks * for the actions are by querying the database. Then call each callback * using the function call $function($object, $context, $a1, $a2) * where $function is the name of a function written in compliance with * the action specification; that is, foo($object, $context). * * @param $action_ids *   The ID of the action to perform. Can be a single action ID or an array *   of IDs. IDs of instances will be numeric; IDs of singletons will be *   function names. * @param $object *   Parameter that will be passed along to the callback. Typically the *   object that the action will act on; a node, user or comment object. *   If the action does not act on an object, pass a dummy object. This *   is necessary to support PHP 4 object referencing. * @param $context *   Parameter that will be passed along to the callback. $context is a *   keyed array containing extra information about what is currently *   happening at the time of the call. Typically $context['hook'] and *   $context['op'] will tell which hook-op combination resulted in this *   call to actions_do(). * @param $a1 *   Parameter that will be passed along to the callback. * @param $a2 *   Parameter that will be passed along to the callback. * * @return *   An associative array containing the result of the function that *   performs the action, keyed on action ID. */function actions_do($action_ids, &$object, $context = NULL, $a1 = NULL, $a2 = NULL) {  // $stack tracks the number of recursive calls.  static $stack;  $stack++;  if ($stack > variable_get('actions_max_stack', 35)) {    watchdog('actions', 'Stack overflow: too many calls to actions_do(). Aborting to prevent infinite recursion.', array(), WATCHDOG_ERROR);    return;  }  $actions = array();  $available_actions = actions_list();  $result = array();  if (is_array($action_ids)) {    $where = array();    $where_values = array();    foreach ($action_ids as $action_id) {      if (is_numeric($action_id)) {        $where[] = "OR aid = '%s'";        $where_values[] = $action_id;      }      elseif (isset($available_actions[$action_id])) {        $actions[$action_id] = $available_actions[$action_id];      }    }    // When we have action instances we must go to the database to    // retrieve instance data.    if ($where) {      $where_clause = implode(' ', $where);      // Strip off leading 'OR '.      $where_clause = '('. strstr($where_clause, " ") .')';      $result_db = db_query('SELECT * FROM {actions} WHERE '. $where_clause, $where_values);      while ($action = db_fetch_object($result_db)) {        $actions[$action->aid] = $action->parameters ? unserialize($action->parameters) : array();        $actions[$action->aid]['callback'] = $action->callback;        $actions[$action->aid]['type'] = $action->type;      }    }    // Fire actions, in no particular order.    foreach ($actions as $action_id => $params) {      if (is_numeric($action_id)) { // Configurable actions need parameters.        $function = $params['callback'];        $context = array_merge($context, $params);        $result[$action_id] = $function($object, $context, $a1, $a2);      }      // Singleton action; $action_id is the function name.      else {        $result[$action_id] = $action_id($object, $context, $a1, $a2);      }    }  }  // Optimized execution of single action.  else {    // If it's a configurable action, retrieve stored parameters.    if (is_numeric($action_ids)) {      $action = db_fetch_object(db_query("SELECT * FROM {actions} WHERE aid = '%s'", $action_ids));      $function = $action->callback;      $context = array_merge($context, unserialize($action->parameters));      $result[$action_ids] = $function($object, $context, $a1, $a2);    }    // Singleton action; $action_ids is the function name.    else {      $result[$action_ids] = $action_ids($object, $context, $a1, $a2);    }  }  $stack--;  return $result;}/** * Discover all action functions by invoking hook_action_info(). * * @code * mymodule_action_info() { *   return array( *     'mymodule_functiondescription_action' => array( *       'type' => 'node', *       'description' => t('Save node'), *       'configurable' => FALSE, *       'hooks' => array( *         'nodeapi' => array('delete', 'insert', 'update', 'view'), *         'comment' => array('delete', 'insert', 'update', 'view'), *       ) *     ) *   ); * } * @endcode * * The description is used in presenting possible actions to the user for * configuration. The type is used to present these actions in a logical * grouping and to denote context. Some types are 'node', 'user', 'comment', * and 'system'. If an action is configurable it will provide form, * validation and submission functions. The hooks the action supports * are declared in the 'hooks' array. * * @param $reset *   Reset the action info static cache. * * @return *   An associative array keyed on function name. The value of each key is *   an array containing information about the action, such as type of *   action and description of the action, e.g., * *   @code *   $actions['node_publish_action'] = array( *     'type' => 'node', *     'description' => t('Publish post'), *     'configurable' => FALSE, *     'hooks' => array( *       'nodeapi' => array('presave', 'insert', 'update', 'view'), *       'comment' => array('delete', 'insert', 'update', 'view'), *     ), *   ); *   @endcode */function actions_list($reset = FALSE) {  static $actions;  if (!isset($actions) || $reset) {    $actions = module_invoke_all('action_info');    drupal_alter('action_info', $actions);  }  // See module_implements for explanations of this cast.  return (array)$actions;}/** * Retrieves all action instances from the database. * * Compare with actions_list(), which gathers actions by invoking * hook_action_info(). The actions returned by this function and the actions * returned by actions_list() are partially synchronized. Non-configurable * actions from hook_action_info() implementations are put into the database * when actions_synchronize() is called, which happens when * admin/settings/actions is visited. Configurable actions are not added to * the database until they are configured in the user interface, in which case * a database row is created for each configuration of each action. * * @return *   Associative array keyed by action ID. Each value is an *   associative array with keys 'callback', 'description', 'type' and *   'configurable'. */function actions_get_all_actions() {  $actions = array();  $result = db_query("SELECT * FROM {actions}");  while ($action = db_fetch_object($result)) {    $actions[$action->aid] = array(      'callback' => $action->callback,      'description' => $action->description,      'type' => $action->type,      'configurable' => (bool) $action->parameters,    );  }  return $actions;}/** * Create an associative array keyed by md5 hashes of function names. * * Hashes are used to prevent actual function names from going out into * HTML forms and coming back. * * @param $actions *   An associative array with function names as keys and associative *   arrays with keys 'description', 'type', etc. as values. Generally *   the output of actions_list() or actions_get_all_actions() is given *   as input to this function. * * @return *   An associative array keyed on md5 hash of function name. The value of *   each key is an associative array of function, description, and type *   for the action. */function actions_actions_map($actions) {  $actions_map = array();  foreach ($actions as $callback => $array) {    $key = md5($callback);    $actions_map[$key]['callback']     = isset($array['callback']) ? $array['callback'] : $callback;    $actions_map[$key]['description']  = $array['description'];    $actions_map[$key]['type']         = $array['type'];    $actions_map[$key]['configurable'] = $array['configurable'];  }  return $actions_map;}/** * Given an md5 hash of a function name, return the function name. * * Faster than actions_actions_map() when you only need the function name. * * @param $hash *   MD5 hash of a function name * * @return *   Function name */function actions_function_lookup($hash) {  $actions_list = actions_list();  foreach ($actions_list as $function => $array) {    if (md5($function) == $hash) {      return $function;    }  }  // Must be an instance; must check database.  $aid = db_result(db_query("SELECT aid FROM {actions} WHERE MD5(aid) = '%s' AND parameters <> ''", $hash));  return $aid;}/** * Synchronize actions that are provided by modules. * * They are synchronized with actions that are stored in the actions table. * This is necessary so that actions that do not require configuration can * receive action IDs. This is not necessarily the best approach, * but it is the most straightforward. */function actions_synchronize($actions_in_code = array(), $delete_orphans = FALSE) {  if (!$actions_in_code) {    $actions_in_code = actions_list(TRUE);  }  $actions_in_db = array();  $result = db_query("SELECT * FROM {actions} WHERE parameters = ''");  while ($action = db_fetch_object($result)) {    $actions_in_db[$action->callback] = array('aid' => $action->aid, 'description' => $action->description);  }  // Go through all the actions provided by modules.  foreach ($actions_in_code as $callback => $array) {    // Ignore configurable actions since their instances get put in    // when the user adds the action.    if (!$array['configurable']) {      // If we already have an action ID for this action, no need to assign aid.      if (array_key_exists($callback, $actions_in_db)) {        unset($actions_in_db[$callback]);      }      else {        // This is a new singleton that we don't have an aid for; assign one.        db_query("INSERT INTO {actions} (aid, type, callback, parameters, description) VALUES ('%s', '%s', '%s', '%s', '%s')", $callback, $array['type'], $callback, '', $array['description']);        watchdog('actions', "Action '%action' added.", array('%action' => filter_xss_admin($array['description'])));      }    }  }  // Any actions that we have left in $actions_in_db are orphaned.  if ($actions_in_db) {    $orphaned = array();    $placeholder = array();    foreach ($actions_in_db as $callback => $array) {      $orphaned[] = $callback;      $placeholder[] = "'%s'";    }    $orphans = implode(', ', $orphaned);    if ($delete_orphans) {      $placeholders = implode(', ', $placeholder);      $results = db_query("SELECT a.aid, a.description FROM {actions} a WHERE callback IN ($placeholders)", $orphaned);      while ($action = db_fetch_object($results)) {        actions_delete($action->aid);        watchdog('actions', "Removed orphaned action '%action' from database.", array('%action' => filter_xss_admin($action->description)));      }    }    else {      $link = l(t('Remove orphaned actions'), 'admin/settings/actions/orphan');      $count = count($actions_in_db);      watchdog('actions', format_plural($count, 'One orphaned action (%orphans) exists in the actions table. !link', '@count orphaned actions (%orphans) exist in the actions table. !link'), array('@count' => $count, '%orphans' => $orphans, '!link' => $link), WATCHDOG_WARNING);    }  }}/** * Save an action and its associated user-supplied parameter values to the database. * * @param $function *   The name of the function to be called when this action is performed. * @param $type *   The type of action, to describe grouping and/or context, e.g., 'node', *   'user', 'comment', or 'system'. * @param $params *   An associative array with parameter names as keys and parameter values *   as values. * @param $desc *   A user-supplied description of this particular action, e.g., 'Send *   e-mail to Jim'. * @param $aid *   The ID of this action. If omitted, a new action is created. * * @return *   The ID of the action. */function actions_save($function, $type, $params, $desc, $aid = NULL) {  $serialized = serialize($params);  if ($aid) {    db_query("UPDATE {actions} SET callback = '%s', type = '%s', parameters = '%s', description = '%s' WHERE aid = '%s'", $function, $type, $serialized, $desc, $aid);    watchdog('actions', 'Action %action saved.', array('%action' => $desc));  }  else {    // aid is the callback for singleton actions so we need to keep a    // separate table for numeric aids.    db_query('INSERT INTO {actions_aid} VALUES (default)');    $aid = db_last_insert_id('actions_aid', 'aid');    db_query("INSERT INTO {actions} (aid, callback, type, parameters, description) VALUES ('%s', '%s', '%s', '%s', '%s')", $aid, $function, $type, $serialized, $desc);    watchdog('actions', 'Action %action created.', array('%action' => $desc));  }  return $aid;}/** * Retrieve a single action from the database. * * @param $aid *   integer The ID of the action to retrieve. * * @return *   The appropriate action row from the database as an object. */function actions_load($aid) {  return db_fetch_object(db_query("SELECT * FROM {actions} WHERE aid = '%s'", $aid));}/** * Delete a single action from the database. * * @param $aid *   integer The ID of the action to delete. */function actions_delete($aid) {  db_query("DELETE FROM {actions} WHERE aid = '%s'", $aid);  module_invoke_all('actions_delete', $aid);}
<?php// $Id$/** * @file * OpenID utility functions. */// Diffie-Hellman Key Exchange Default Value.define('OPENID_DH_DEFAULT_MOD', '155172898181473697471232257763715539915724801'.       '966915404479707795314057629378541917580651227423698188993727816152646631'.       '438561595825688188889951272158842675419950341258706556549803580104870537'.       '681476726513255747040765857479291291572334510643245094715007229621094194'.       '349783925984760375594985848253359305585439638443');// Constants for Diffie-Hellman key exchange computations.define('OPENID_DH_DEFAULT_GEN', '2');define('OPENID_SHA1_BLOCKSIZE', 64);define('OPENID_RAND_SOURCE', '/dev/urandom');// OpenID namespace URLsdefine('OPENID_NS_2_0', 'http://specs.openid.net/auth/2.0');define('OPENID_NS_1_1', 'http://openid.net/signon/1.1');define('OPENID_NS_1_0', 'http://openid.net/signon/1.0');/** * Performs an HTTP 302 redirect (for the 1.x protocol). */function openid_redirect_http($url, $message) {  $query = array();  foreach ($message as $key => $val) {    $query[] = $key .'='. urlencode($val);  }  $sep = (strpos($url, '?') === FALSE) ? '?' : '&';  header('Location: '. $url . $sep . implode('&', $query), TRUE, 302);  exit;}/** * Creates a js auto-submit redirect for (for the 2.x protocol) */function openid_redirect($url, $message) {  $output = '<html><head><title>'. t('OpenID redirect') ."</title></head>\n<body>";  $output .= drupal_get_form('openid_redirect_form', $url, $message);  $output .= '<script type="text/javascript">document.getElementById("openid-redirect-form").submit();</script>';  $output .= "</body></html>\n";  print $output;  exit;}function openid_redirect_form(&$form_state, $url, $message) {  $form = array();  $form['#action'] = $url;  $form['#method'] = "post";  foreach ($message as $key => $value) {    $form[$key] = array(      '#type' => 'hidden',      '#name' => $key,      '#value' => $value,    );  }  $form['submit'] = array(    '#type' => 'submit',    '#prefix' => '<noscript>',    '#suffix' => '</noscript>',    '#value' => t('Send'),  );  return $form;}/** * Determine if the given identifier is an XRI ID. */function _openid_is_xri($identifier) {  // Strip the xri:// scheme from the identifier if present.  if (strpos(strtolower($identifier), 'xri://') !== FALSE) {    $identifier = substr($identifier, 6);  }  // Test whether the identifier starts with an XRI global context symbol or (.  $firstchar = substr($identifier, 0, 1);  if (strpos("=@+$!(", $firstchar) !== FALSE) {    return TRUE;  }  return FALSE;}/** * Normalize the given identifier as per spec. */function _openid_normalize($identifier) {  if (_openid_is_xri($identifier)) {    return _openid_normalize_xri($identifier);  }  else {    return _openid_normalize_url($identifier);  }}function _openid_normalize_xri($xri) {  $normalized_xri = $xri;  if (stristr($xri, 'xri://') !== FALSE) {    $normalized_xri = substr($xri, 6);  }  return $normalized_xri;}function _openid_normalize_url($url) {  $normalized_url = $url;  if (stristr($url, '://') === FALSE) {    $normalized_url = 'http://'. $url;  }  // Strip the fragment and fragment delimiter if present.  $normalized_url = strtok($normalized_url, '#');  if (substr_count($normalized_url, '/') < 3) {    $normalized_url .= '/';  }  return $normalized_url;}/** * Create a serialized message packet as per spec: $key:$value\n . */function _openid_create_message($data) {  $serialized = '';  foreach ($data as $key => $value) {    if ((strpos($key, ':') !== FALSE) || (strpos($key, "\n") !== FALSE) || (strpos($value, "\n") !== FALSE)) {      return null;    }    $serialized .= "$key:$value\n";  }  return $serialized;}/** * Encode a message from _openid_create_message for HTTP Post */function _openid_encode_message($message) {  $encoded_message = '';  $items = explode("\n", $message);  foreach ($items as $item) {    $parts = explode(':', $item, 2);    if (count($parts) == 2) {      if ($encoded_message != '') {        $encoded_message .= '&';      }      $encoded_message .= rawurlencode(trim($parts[0])) .'='. rawurlencode(trim($parts[1]));    }  }  return $encoded_message;}/** * Convert a direct communication message * into an associative array. */function _openid_parse_message($message) {  $parsed_message = array();  $items = explode("\n", $message);  foreach ($items as $item) {    $parts = explode(':', $item, 2);    if (count($parts) == 2) {      $parsed_message[$parts[0]] = $parts[1];    }  }  return $parsed_message;}/** * Return a nonce value - formatted per OpenID spec. */function _openid_nonce() {  // YYYY-MM-DDThh:mm:ssTZD UTC, plus some optional extra unique chars  return gmstrftime('%Y-%m-%dT%H:%M:%S%Z') .    chr(mt_rand(0, 25) + 65) .    chr(mt_rand(0, 25) + 65) .    chr(mt_rand(0, 25) + 65) .    chr(mt_rand(0, 25) + 65);}/** * Pull the href attribute out of an html link element. */function _openid_link_href($rel, $html) {  $rel = preg_quote($rel);  preg_match('|<link\s+rel=["\'](.*)'. $rel .'(.*)["\'](.*)/?>|iUs', $html, $matches);  if (isset($matches[3])) {    preg_match('|href=["\']([^"]+)["\']|iU', $matches[3], $href);    return trim($href[1]);  }  return FALSE;}/** * Pull the http-equiv attribute out of an html meta element */function _openid_meta_httpequiv($equiv, $html) {  preg_match('|<meta\s+http-equiv=["\']'. $equiv .'["\'](.*)/?>|iUs', $html, $matches);  if (isset($matches[1])) {    preg_match('|content=["\']([^"]+)["\']|iUs', $matches[1], $content);    if (isset($content[1])) {      return $content[1];    }  }  return FALSE;}/** * Sign certain keys in a message * @param $association - object loaded from openid_association or openid_server_association table *              - important fields are ->assoc_type and ->mac_key * @param $message_array - array of entire message about to be sent * @param $keys_to_sign - keys in the message to include in signature (without *  'openid.' appended) */function _openid_signature($association, $message_array, $keys_to_sign) {  $signature = '';  $sign_data = array();  foreach ($keys_to_sign as $key) {    if (isset($message_array['openid.'. $key])) {      $sign_data[$key] = $message_array['openid.'. $key];    }  }  $message = _openid_create_message($sign_data);  $secret = base64_decode($association->mac_key);  $signature = _openid_hmac($secret, $message);  return base64_encode($signature);}function _openid_hmac($key, $text) {  if (strlen($key) > OPENID_SHA1_BLOCKSIZE) {    $key = _openid_sha1($key, true);  }  $key = str_pad($key, OPENID_SHA1_BLOCKSIZE, chr(0x00));  $ipad = str_repeat(chr(0x36), OPENID_SHA1_BLOCKSIZE);  $opad = str_repeat(chr(0x5c), OPENID_SHA1_BLOCKSIZE);  $hash1 = _openid_sha1(($key ^ $ipad) . $text, true);  $hmac = _openid_sha1(($key ^ $opad) . $hash1, true);  return $hmac;}function _openid_sha1($text) {  $hex = sha1($text);  $raw = '';  for ($i = 0; $i < 40; $i += 2) {    $hexcode = substr($hex, $i, 2);    $charcode = (int)base_convert($hexcode, 16, 10);    $raw .= chr($charcode);  }  return $raw;}function _openid_dh_base64_to_long($str) {  $b64 = base64_decode($str);  return _openid_dh_binary_to_long($b64);}function _openid_dh_long_to_base64($str) {  return base64_encode(_openid_dh_long_to_binary($str));}function _openid_dh_binary_to_long($str) {  $bytes = array_merge(unpack('C*', $str));  $n = 0;  foreach ($bytes as $byte) {    $n = bcmul($n, pow(2, 8));    $n = bcadd($n, $byte);  }  return $n;}function _openid_dh_long_to_binary($long) {  $cmp = bccomp($long, 0);  if ($cmp < 0) {    return FALSE;  }  if ($cmp == 0) {    return "\x00";  }  $bytes = array();  while (bccomp($long, 0) > 0) {    array_unshift($bytes, bcmod($long, 256));    $long = bcdiv($long, pow(2, 8));  }  if ($bytes && ($bytes[0] > 127)) {    array_unshift($bytes, 0);  }  $string = '';  foreach ($bytes as $byte) {    $string .= pack('C', $byte);  }  return $string;}function _openid_dh_xorsecret($shared, $secret) {  $dh_shared_str = _openid_dh_long_to_binary($shared);  $sha1_dh_shared = _openid_sha1($dh_shared_str);  $xsecret = "";  for ($i = 0; $i < strlen($secret); $i++) {    $xsecret .= chr(ord($secret[$i]) ^ ord($sha1_dh_shared[$i]));  }  return $xsecret;}function _openid_dh_rand($stop) {  static $duplicate_cache = array();  // Used as the key for the duplicate cache  $rbytes = _openid_dh_long_to_binary($stop);  if (array_key_exists($rbytes, $duplicate_cache)) {    list($duplicate, $nbytes) = $duplicate_cache[$rbytes];  }  else {    if ($rbytes[0] == "\x00") {      $nbytes = strlen($rbytes) - 1;    }    else {      $nbytes = strlen($rbytes);    }    $mxrand = bcpow(256, $nbytes);    // If we get a number less than this, then it is in the    // duplicated range.    $duplicate = bcmod($mxrand, $stop);    if (count($duplicate_cache) > 10) {      $duplicate_cache = array();    }    $duplicate_cache[$rbytes] = array($duplicate, $nbytes);  }  do {    $bytes = "\x00". _openid_get_bytes($nbytes);    $n = _openid_dh_binary_to_long($bytes);    // Keep looping if this value is in the low duplicated range.  } while (bccomp($n, $duplicate) < 0);  return bcmod($n, $stop);}function _openid_get_bytes($num_bytes) {  static $f = null;  $bytes = '';  if (!isset($f)) {    $f = @fopen(OPENID_RAND_SOURCE, "r");  }  if (!$f) {    // pseudorandom used    $bytes = '';    for ($i = 0; $i < $num_bytes; $i += 4) {      $bytes .= pack('L', mt_rand());    }    $bytes = substr($bytes, 0, $num_bytes);  }  else {    $bytes = fread($f, $num_bytes);  }  return $bytes;}function _openid_response($str = NULL) {  $data = array();    if (isset($_SERVER['REQUEST_METHOD'])) {    $data = _openid_get_params($_SERVER['QUERY_STRING']);    if ($_SERVER['REQUEST_METHOD'] == 'POST') {      $str = file_get_contents('php://input');      $post = array();      if ($str !== false) {        $post = _openid_get_params($str);      }      $data = array_merge($data, $post);    }  }  return $data;}function _openid_get_params($str) {  $chunks = explode("&", $str);  $data = array();  foreach ($chunks as $chunk) {    $parts = explode("=", $chunk, 2);    if (count($parts) == 2) {      list($k, $v) = $parts;      $data[$k] = urldecode($v);    }  }  return $data;}/** * Provide bcpowmod support for PHP4. */if (!function_exists('bcpowmod')) {  function bcpowmod($base, $exp, $mod) {    $square = bcmod($base, $mod);    $result = 1;    while (bccomp($exp, 0) > 0) {      if (bcmod($exp, 2)) {        $result = bcmod(bcmul($result, $square), $mod);      }      $square = bcmod(bcmul($square, $square), $mod);      $exp = bcdiv($exp, 2);    }    return $result;  }}
<?php// $Id$/** * @file * Administrative page callbacks for the dblog module. *//** * dblog module settings form. * * @ingroup forms * @see system_settings_form() */function dblog_admin_settings() {  $form['dblog_row_limit'] = array(    '#type' => 'select',    '#title' => t('Discard log entries above the following row limit'),    '#default_value' => variable_get('dblog_row_limit', 1000),    '#options' => drupal_map_assoc(array(100, 1000, 10000, 100000, 1000000)),    '#description' => t('The maximum number of rows to keep in the database log. Older entries will be automatically discarded. (Requires a correctly configured <a href="@cron">cron maintenance task</a>.)', array('@cron' => url('admin/reports/status')))  );  return system_settings_form($form);}/** * Menu callback; displays a listing of log messages. */function dblog_overview() {  $filter = dblog_build_filter_query();  $rows = array();  $icons = array(    WATCHDOG_DEBUG    => '',    WATCHDOG_INFO     => '',    WATCHDOG_NOTICE   => '',    WATCHDOG_WARNING  => theme('image', 'misc/watchdog-warning.png', t('warning'), t('warning')),    WATCHDOG_ERROR    => theme('image', 'misc/watchdog-error.png', t('error'), t('error')),    WATCHDOG_CRITICAL => theme('image', 'misc/watchdog-error.png', t('critical'), t('critical')),    WATCHDOG_ALERT    => theme('image', 'misc/watchdog-error.png', t('alert'), t('alert')),    WATCHDOG_EMERG    => theme('image', 'misc/watchdog-error.png', t('emergency'), t('emergency')),  );  $classes = array(    WATCHDOG_DEBUG    => 'dblog-debug',    WATCHDOG_INFO     => 'dblog-info',    WATCHDOG_NOTICE   => 'dblog-notice',    WATCHDOG_WARNING  => 'dblog-warning',    WATCHDOG_ERROR    => 'dblog-error',    WATCHDOG_CRITICAL => 'dblog-critical',    WATCHDOG_ALERT    => 'dblog-alert',    WATCHDOG_EMERG    => 'dblog-emerg',  );  $output = drupal_get_form('dblog_filter_form');  $header = array(    ' ',    array('data' => t('Type'), 'field' => 'w.type'),    array('data' => t('Date'), 'field' => 'w.wid', 'sort' => 'desc'),    t('Message'),    array('data' => t('User'), 'field' => 'u.name'),    array('data' => t('Operations')),  );  $sql = "SELECT w.wid, w.uid, w.severity, w.type, w.timestamp, w.message, w.variables, w.link, u.name FROM {watchdog} w INNER JOIN {users} u ON w.uid = u.uid";  $tablesort = tablesort_sql($header);  if (!empty($filter['where'])) {    $result = pager_query($sql ." WHERE ". $filter['where'] . $tablesort, 50, 0, NULL, $filter['args']);  }  else {    $result = pager_query($sql . $tablesort, 50);  }  while ($dblog = db_fetch_object($result)) {    $rows[] = array('data' =>      array(        // Cells        $icons[$dblog->severity],        t($dblog->type),        format_date($dblog->timestamp, 'small'),        l(truncate_utf8(_dblog_format_message($dblog), 56, TRUE, TRUE), 'admin/reports/event/'. $dblog->wid, array('html' => TRUE)),        theme('username', $dblog),        $dblog->link,      ),      // Attributes for tr      'class' => "dblog-". preg_replace('/[^a-z]/i', '-', $dblog->type) .' '. $classes[$dblog->severity]    );  }  if (!$rows) {    $rows[] = array(array('data' => t('No log messages available.'), 'colspan' => 6));  }  $output .= theme('table', $header, $rows, array('id' => 'admin-dblog'));  $output .= theme('pager', NULL, 50, 0);  return $output;}/** * Menu callback; generic function to display a page of the most frequent * dblog events of a specified type. */function dblog_top($type) {  $header = array(    array('data' => t('Count'), 'field' => 'count', 'sort' => 'desc'),    array('data' => t('Message'), 'field' => 'message')  );  $result = pager_query("SELECT COUNT(wid) AS count, message, variables FROM {watchdog} WHERE type = '%s' GROUP BY message, variables ". tablesort_sql($header), 30, 0, "SELECT COUNT(DISTINCT(message)) FROM {watchdog} WHERE type = '%s'", $type);  $rows = array();  while ($dblog = db_fetch_object($result)) {    $rows[] = array($dblog->count, truncate_utf8(_dblog_format_message($dblog), 56, TRUE, TRUE));  }  if (empty($rows)) {    $rows[] = array(array('data' => t('No log messages available.'), 'colspan' => 2));  }  $output  = theme('table', $header, $rows);  $output .= theme('pager', NULL, 30, 0);  return $output;}/** * Menu callback; displays details about a log message. */function dblog_event($id) {  $severity = watchdog_severity_levels();  $output = '';  $result = db_query('SELECT w.*, u.name, u.uid FROM {watchdog} w INNER JOIN {users} u ON w.uid = u.uid WHERE w.wid = %d', $id);  if ($dblog = db_fetch_object($result)) {    $rows = array(      array(        array('data' => t('Type'), 'header' => TRUE),        t($dblog->type),      ),      array(        array('data' => t('Date'), 'header' => TRUE),        format_date($dblog->timestamp, 'large'),      ),      array(        array('data' => t('User'), 'header' => TRUE),        theme('username', $dblog),      ),      array(        array('data' => t('Location'), 'header' => TRUE),        l($dblog->location, $dblog->location),      ),      array(        array('data' => t('Referrer'), 'header' => TRUE),        l($dblog->referer, $dblog->referer),      ),      array(        array('data' => t('Message'), 'header' => TRUE),        _dblog_format_message($dblog),      ),      array(        array('data' => t('Severity'), 'header' => TRUE),        $severity[$dblog->severity],      ),      array(        array('data' => t('Hostname'), 'header' => TRUE),        check_plain($dblog->hostname),      ),      array(        array('data' => t('Operations'), 'header' => TRUE),        $dblog->link,      ),    );    $attributes = array('class' => 'dblog-event');    $output = theme('table', array(), $rows, $attributes);  }  return $output;}/** * Build query for dblog administration filters based on session. */function dblog_build_filter_query() {  if (empty($_SESSION['dblog_overview_filter'])) {    return;  }  $filters = dblog_filters();  // Build query  $where = $args = array();  foreach ($_SESSION['dblog_overview_filter'] as $key => $filter) {    $filter_where = array();    foreach ($filter as $value) {      $filter_where[] = $filters[$key]['where'];      $args[] = $value;    }    if (!empty($filter_where)) {      $where[] = '('. implode(' OR ', $filter_where) .')';    }  }  $where = !empty($where) ? implode(' AND ', $where) : '';  return array(    'where' => $where,    'args' => $args,  );}/** * List dblog administration filters that can be applied. */function dblog_filters() {  $filters = array();  foreach (_dblog_get_message_types() as $type) {    $types[$type] = $type;  }  if (!empty($types)) {    $filters['type'] = array(      'title' => t('Type'),      'where' => "w.type = '%s'",      'options' => $types,    );  }  $filters['severity'] = array(    'title' => t('Severity'),    'where' => 'w.severity = %d',    'options' => watchdog_severity_levels(),  );  return $filters;}/** * Formats a log message for display. * * @param $dblog *   An object with at least the message and variables properties */function _dblog_format_message($dblog) {  // Legacy messages and user specified text  if ($dblog->variables === 'N;') {    return $dblog->message;  }  // Message to translate with injected variables  else {    return t($dblog->message, unserialize($dblog->variables));  }}/** * Return form for dblog administration filters. * * @ingroup forms * @see dblog_filter_form_submit() * @see dblog_filter_form_validate() */function dblog_filter_form() {  $session = &$_SESSION['dblog_overview_filter'];  $session = is_array($session) ? $session : array();  $filters = dblog_filters();  $form['filters'] = array(    '#type' => 'fieldset',    '#title' => t('Filter log messages'),    '#theme' => 'dblog_filters',    '#collapsible' => TRUE,    '#collapsed' => empty($session),  );  foreach ($filters as $key => $filter) {    $form['filters']['status'][$key] = array(      '#title' => $filter['title'],      '#type' => 'select',      '#multiple' => TRUE,      '#size' => 8,      '#options' => $filter['options'],    );    if (!empty($session[$key])) {      $form['filters']['status'][$key]['#default_value'] = $session[$key];    }  }  $form['filters']['buttons']['submit'] = array(    '#type' => 'submit',    '#value' => t('Filter'),  );  if (!empty($session)) {    $form['filters']['buttons']['reset'] = array(      '#type' => 'submit',      '#value' => t('Reset')    );  }  return $form;}/** * Validate result from dblog administration filter form. */function dblog_filter_form_validate($form, &$form_state) {  if ($form_state['values']['op'] == t('Filter') && empty($form_state['values']['type']) && empty($form_state['values']['severity'])) {    form_set_error('type', t('You must select something to filter by.'));  }}/** * Process result from dblog administration filter form. */function dblog_filter_form_submit($form, &$form_state) {  $op = $form_state['values']['op'];  $filters = dblog_filters();  switch ($op) {    case t('Filter'):      foreach ($filters as $name => $filter) {        if (isset($form_state['values'][$name])) {          $_SESSION['dblog_overview_filter'][$name] = $form_state['values'][$name];        }      }      break;    case t('Reset'):      $_SESSION['dblog_overview_filter'] = array();      break;  }  return 'admin/reports/dblog';}
<?php// $Id$/** * Implementation of hook_schema(). */function taxonomy_schema() {  $schema['term_data'] = array(    'description' => 'Stores term information.',    'fields' => array(      'tid' => array(        'type' => 'serial',        'unsigned' => TRUE,        'not null' => TRUE,        'description' => 'Primary Key: Unique term ID.',      ),      'vid' => array(        'type' => 'int',        'unsigned' => TRUE,        'not null' => TRUE,        'default' => 0,        'description' => 'The {vocabulary}.vid of the vocabulary to which the term is assigned.',      ),      'name' => array(        'type' => 'varchar',        'length' => 255,        'not null' => TRUE,        'default' => '',        'description' => 'The term name.',      ),      'description' => array(        'type' => 'text',        'not null' => FALSE,        'size' => 'big',        'description' => 'A description of the term.',      ),      'weight' => array(        'type' => 'int',        'not null' => TRUE,        'default' => 0,        'size' => 'tiny',        'description' => 'The weight of this term in relation to other terms.',      ),    ),    'primary key' => array('tid'),    'indexes' => array(      'taxonomy_tree' => array('vid', 'weight', 'name'),      'vid_name' => array('vid', 'name'),    ),  );  $schema['term_hierarchy'] = array(    'description' => 'Stores the hierarchical relationship between terms.',    'fields' => array(      'tid' => array(        'type' => 'int',        'unsigned' => TRUE,        'not null' => TRUE,        'default' => 0,        'description' => 'Primary Key: The {term_data}.tid of the term.',      ),      'parent' => array(        'type' => 'int',        'unsigned' => TRUE,        'not null' => TRUE,        'default' => 0,        'description' => "Primary Key: The {term_data}.tid of the term's parent. 0 indicates no parent.",      ),    ),    'indexes' => array(      'parent' => array('parent'),    ),    'primary key' => array('tid', 'parent'),  );  $schema['term_node'] = array(    'description' => 'Stores the relationship of terms to nodes.',    'fields' => array(      'nid' => array(        'type' => 'int',        'unsigned' => TRUE,        'not null' => TRUE,        'default' => 0,        'description' => 'Primary Key: The {node}.nid of the node.',      ),      'vid' => array(        'type' => 'int',        'unsigned' => TRUE,        'not null' => TRUE,        'default' => 0,        'description' => 'Primary Key: The {node}.vid of the node.',      ),      'tid' => array(        'type' => 'int',        'unsigned' => TRUE,        'not null' => TRUE,        'default' => 0,        'description' => 'Primary Key: The {term_data}.tid of a term assigned to the node.',      ),    ),    'indexes' => array(      'vid' => array('vid'),      'nid' => array('nid'),    ),    'primary key' => array('tid', 'vid'),  );  $schema['term_relation'] = array(    'description' => 'Stores non-hierarchical relationships between terms.',    'fields' => array(      'trid' => array(        'type' => 'serial',        'not null' => TRUE,        'description' => 'Primary Key: Unique term relation ID.',      ),      'tid1' => array(        'type' => 'int',        'unsigned' => TRUE,        'not null' => TRUE,        'default' => 0,        'description' => 'The {term_data}.tid of the first term in a relationship.',      ),      'tid2' => array(        'type' => 'int',        'unsigned' => TRUE,        'not null' => TRUE,        'default' => 0,        'description' => 'The {term_data}.tid of the second term in a relationship.',      ),    ),    'unique keys' => array(      'tid1_tid2' => array('tid1', 'tid2'),    ),    'indexes' => array(      'tid2' => array('tid2'),    ),    'primary key' => array('trid'),  );  $schema['term_synonym'] = array(    'description' => 'Stores term synonyms.',    'fields' => array(      'tsid' => array(        'type' => 'serial',        'not null' => TRUE,        'description' => 'Primary Key: Unique term synonym ID.',      ),      'tid' => array(        'type' => 'int',        'unsigned' => TRUE,        'not null' => TRUE,        'default' => 0,        'description' => 'The {term_data}.tid of the term.',      ),      'name' => array(        'type' => 'varchar',        'length' => 255,        'not null' => TRUE,        'default' => '',        'description' => 'The name of the synonym.',      ),    ),    'indexes' => array(      'tid' => array('tid'),      'name_tid' => array('name', 'tid'),    ),    'primary key' => array('tsid'),  );  $schema['vocabulary'] = array(    'description' => 'Stores vocabulary information.',    'fields' => array(      'vid' => array(        'type' => 'serial',        'unsigned' => TRUE,        'not null' => TRUE,        'description' => 'Primary Key: Unique vocabulary ID.',      ),      'name' => array(        'type' => 'varchar',        'length' => 255,        'not null' => TRUE,        'default' => '',        'description' => 'Name of the vocabulary.',      ),      'description' => array(        'type' => 'text',        'not null' => FALSE,        'size' => 'big',        'description' => 'Description of the vocabulary.',      ),      'help' => array(        'type' => 'varchar',        'length' => 255,        'not null' => TRUE,        'default' => '',        'description' => 'Help text to display for the vocabulary.',      ),      'relations' => array(        'type' => 'int',        'unsigned' => TRUE,        'not null' => TRUE,        'default' => 0,        'size' => 'tiny',        'description' => 'Whether or not related terms are enabled within the vocabulary. (0 = disabled, 1 = enabled)',      ),      'hierarchy' => array(        'type' => 'int',        'unsigned' => TRUE,        'not null' => TRUE,        'default' => 0,        'size' => 'tiny',        'description' => 'The type of hierarchy allowed within the vocabulary. (0 = disabled, 1 = single, 2 = multiple)',      ),      'multiple' => array(        'type' => 'int',        'unsigned' => TRUE,        'not null' => TRUE,        'default' => 0,        'size' => 'tiny',        'description' => 'Whether or not multiple terms from this vocabulary may be assigned to a node. (0 = disabled, 1 = enabled)',      ),      'required' => array(        'type' => 'int',        'unsigned' => TRUE,        'not null' => TRUE,        'default' => 0,        'size' => 'tiny',        'description' => 'Whether or not terms are required for nodes using this vocabulary. (0 = disabled, 1 = enabled)',      ),      'tags' => array(        'type' => 'int',        'unsigned' => TRUE,        'not null' => TRUE,        'default' => 0,        'size' => 'tiny',        'description' => 'Whether or not free tagging is enabled for the vocabulary. (0 = disabled, 1 = enabled)',      ),      'module' => array(        'type' => 'varchar',        'length' => 255,        'not null' => TRUE,        'default' => '',        'description' => 'The module which created the vocabulary.',      ),      'weight' => array(        'type' => 'int',        'not null' => TRUE,        'default' => 0,        'size' => 'tiny',        'description' => 'The weight of the vocabulary in relation to other vocabularies.',      ),    ),    'primary key' => array('vid'),    'indexes' => array(      'list' => array('weight', 'name'),    ),  );  $schema['vocabulary_node_types'] = array(    'description' => 'Stores which node types vocabularies may be used with.',    'fields' => array(      'vid' => array(        'type' => 'int',        'unsigned' => TRUE,        'not null' => TRUE,        'default' => 0,        'description' => 'Primary Key: the {vocabulary}.vid of the vocabulary.',      ),      'type' => array(        'type' => 'varchar',        'length' => 32,        'not null' => TRUE,        'default' => '',        'description' => 'The {node}.type of the node type for which the vocabulary may be used.',      ),    ),    'primary key' => array('type', 'vid'),    'indexes' => array(      'vid' => array('vid'),    ),  );  return $schema;}
<?php// $Id$/** * @file * Implement OpenID Relying Party support for Drupal *//** * Implementation of hook_menu. */function openid_menu() {  $items['openid/authenticate'] = array(    'title' => 'OpenID Login',    'page callback' => 'openid_authentication_page',    'access callback' => 'user_is_anonymous',    'type' => MENU_CALLBACK,    'file' => 'openid.pages.inc',  );  $items['user/%user/openid'] = array(    'title' => 'OpenID identities',    'page callback' => 'openid_user_identities',    'page arguments' => array(1),    'access callback' => 'user_edit_access',    'access arguments' => array(1),    'type' => MENU_LOCAL_TASK,    'file' => 'openid.pages.inc',  );  $items['user/%user/openid/delete'] = array(    'title' => 'Delete OpenID',    'page callback' => 'drupal_get_form',    'page arguments' => array('openid_user_delete_form', 1),    'access callback' => 'user_edit_access',    'access arguments' => array(1),    'type' => MENU_CALLBACK,    'file' => 'openid.pages.inc',  );  return $items;}/** * Implementation of hook_help(). */function openid_help($path, $arg) {  switch ($path) {    case 'user/%/openid':      $output = '<p>'. t('This site supports <a href="@openid-net">OpenID</a>, a secure way to log into many websites using a single username and password. OpenID can reduce the necessity of managing many usernames and passwords for many websites.', array('@openid-net' => 'http://openid.net')) .'</p>';      $output .= '<p>'. t('To use OpenID you must first establish an identity on a public or private OpenID server. If you do not have an OpenID and would like one, look into one of the <a href="@openid-providers">free public providers</a>. You can find out more about OpenID at <a href="@openid-net">this website</a>.', array('@openid-providers' => 'http://openid.net/get/', '@openid-net' => 'http://openid.net')) .'</p>';      $output .= '<p>'. t('If you already have an OpenID, enter the URL to your OpenID server below (e.g. myusername.openidprovider.com). Next time you login, you will be able to use this URL instead of a regular username and password. You can have multiple OpenID servers if you like; just keep adding them here.') .'</p>';      return $output;    case 'admin/help#openid':      $output = '<p>'. t('OpenID is a secure method for logging into many websites with a single username and password. It does not require special software, and it does not share passwords with any site to which it is associated; including your site.') .'</p>';      $output .= '<p>'. t('Users can create accounts using their OpenID, assign one or more OpenIDs to an existing account, and log in using an OpenID. This lowers the barrier to registration, which is good for the site, and offers convenience and security to the users. OpenID is not a trust system, so email verification is still necessary. The benefit stems from the fact that users can have a single password that they can use on many websites. This means they can easily update their single password from a centralized location, rather than having to change dozens of passwords individually.') .'</p>';      $output .= '<p>'. t('The basic concept is as follows: A user has an account on an OpenID server. This account provides them with a unique URL (such as myusername.openidprovider.com). When the user comes to your site, they are presented with the option of entering this URL. Your site then communicates with the OpenID server, asking it to verify the identity of the user. If the user is logged into their OpenID server, the server communicates back to your site, verifying the user. If they are not logged in, the OpenID server will ask the user for their password. At no point does your site record, or need to record the user\'s password.') .'</p>';      $output .= '<p>'. t('More information on OpenID is available at <a href="@openid-net">OpenID.net</a>.', array('@openid-net' => url('http://openid.net'))) .'</p>';      $output .= '<p>'. t('For more information, see the online handbook entry for <a href="@handbook">OpenID module</a>.', array('@handbook' => 'http://drupal.org/handbook/modules/openid')) .'</p>';      return $output;  }}/** * Implementation of hook_user(). */function openid_user($op, &$edit, &$account, $category = NULL) {  if ($op == 'insert' && isset($_SESSION['openid']['values'])) {    // The user has registered after trying to login via OpenID.    if (variable_get('user_email_verification', TRUE)) {      drupal_set_message(t('Once you have verified your email address, you may log in via OpenID.'));    }    unset($_SESSION['openid']);  }}/** * Implementation of hook_form_alter : adds OpenID login to the login forms. */function openid_form_alter(&$form, $form_state, $form_id) {  if ($form_id == 'user_login_block' || $form_id == 'user_login') {    drupal_add_css(drupal_get_path('module', 'openid') .'/openid.css', 'module');    drupal_add_js(drupal_get_path('module', 'openid') .'/openid.js');    if (!empty($form_state['post']['openid_identifier'])) {      $form['name']['#required'] = FALSE;      $form['pass']['#required'] = FALSE;      unset($form['#submit']);      $form['#validate'] = array('openid_login_validate');    }    $items = array();    $items[] = array(      'data' => l(t('Log in using OpenID'), '#'),      'class' => 'openid-link',    );    $items[] = array(      'data' => l(t('Cancel OpenID login'), '#'),      'class' => 'user-link',    );        $form['openid_links'] = array(      '#value' => theme('item_list', $items),      '#weight' => 1,    );    $form['links']['#weight'] = 2;    $form['openid_identifier'] = array(      '#type' => 'textfield',      '#title' => t('Log in using OpenID'),      '#size' => ($form_id == 'user_login') ? 58 : 13,      '#maxlength' => 255,      '#weight' => -1,      '#description' => l(t('What is OpenID?'), 'http://openid.net/', array('external' => TRUE)),    );    $form['openid.return_to'] = array('#type' => 'hidden', '#value' => url('openid/authenticate', array('absolute' => TRUE, 'query' => drupal_get_destination())));  }  elseif ($form_id == 'user_register' && isset($_SESSION['openid']['values'])) {    // We were unable to auto-register a new user. Prefill the registration    // form with the values we have.    $form['name']['#default_value'] = $_SESSION['openid']['values']['name'];    $form['mail']['#default_value'] = $_SESSION['openid']['values']['mail'];    // If user_email_verification is off, hide the password field and just fill    // with random password to avoid confusion.    if (!variable_get('user_email_verification', TRUE)) {      $form['pass']['#type'] = 'hidden';      $form['pass']['#value'] = user_password();    }    $form['auth_openid'] = array('#type' => 'hidden', '#value' => $_SESSION['openid']['values']['auth_openid']);    $form['openid_display'] = array(      '#type' => 'item',      '#title' => t('Your OpenID'),      '#description' => t('This OpenID will be attached to your account after registration.'),      '#value' => check_plain($_SESSION['openid']['values']['auth_openid']),    );  }  return $form;}/** * Login form _validate hook */function openid_login_validate($form, &$form_state) {  $return_to = $form_state['values']['openid.return_to'];  if (empty($return_to)) {    $return_to = url('', array('absolute' => TRUE));  }  openid_begin($form_state['values']['openid_identifier'], $return_to, $form_state['values']);}/** * The initial step of OpenID authentication responsible for the following: *  - Perform discovery on the claimed OpenID. *  - If possible, create an association with the Provider's endpoint. *  - Create the authentication request. *  - Perform the appropriate redirect. * * @param $claimed_id The OpenID to authenticate * @param $return_to The endpoint to return to from the OpenID Provider */function openid_begin($claimed_id, $return_to = '', $form_values = array()) {  module_load_include('inc', 'openid');  $claimed_id = _openid_normalize($claimed_id);  $services = openid_discovery($claimed_id);  if (count($services) == 0) {    form_set_error('openid_identifier', t('Sorry, that is not a valid OpenID. Please ensure you have spelled your ID correctly.'));    return;  }  // Store discovered information in the users' session so we don't have to rediscover.  $_SESSION['openid']['service'] = $services[0];  // Store the claimed id  $_SESSION['openid']['claimed_id'] = $claimed_id;  // Store the login form values so we can pass them to  // user_exteral_login later.  $_SESSION['openid']['user_login_values'] = $form_values;  $op_endpoint = $services[0]['uri'];  // If bcmath is present, then create an association  $assoc_handle = '';  if (function_exists('bcadd')) {    $assoc_handle = openid_association($op_endpoint);  }  // Now that there is an association created, move on  // to request authentication from the IdP  // First check for LocalID. If not found, check for Delegate. Fall  // back to $claimed_id if neither is found.  if (!empty($services[0]['localid'])) {    $identity = $services[0]['localid'];  }  else if (!empty($services[0]['delegate'])) {    $identity = $services[0]['delegate'];  }  else {    $identity = $claimed_id;  }  if (isset($services[0]['types']) && is_array($services[0]['types']) && in_array(OPENID_NS_2_0 .'/server', $services[0]['types'])) {    $claimed_id = $identity = 'http://specs.openid.net/auth/2.0/identifier_select';  }  $authn_request = openid_authentication_request($claimed_id, $identity, $return_to, $assoc_handle, $services[0]['version']);  if ($services[0]['version'] == 2) {    openid_redirect($op_endpoint, $authn_request);  }  else {    openid_redirect_http($op_endpoint, $authn_request);  }}/** * Completes OpenID authentication by validating returned data from the OpenID * Provider. * * @param $response Array of returned values from the OpenID Provider. * * @return $response Response values for further processing with *   $response['status'] set to one of 'success', 'failed' or 'cancel'. */function openid_complete($response = array()) {  module_load_include('inc', 'openid');  if (count($response) == 0) {    $response = _openid_response();  }    // Default to failed response  $response['status'] = 'failed';  if (isset($_SESSION['openid']['service']['uri']) && isset($_SESSION['openid']['claimed_id'])) {    $service = $_SESSION['openid']['service'];    $claimed_id = $_SESSION['openid']['claimed_id'];    unset($_SESSION['openid']['service']);    unset($_SESSION['openid']['claimed_id']);    if (isset($response['openid.mode'])) {      if ($response['openid.mode'] == 'cancel') {        $response['status'] = 'cancel';      }      else {        if (openid_verify_assertion($service['uri'], $response)) {          // If the returned claimed_id is different from the session claimed_id,          // then we need to do discovery and make sure the op_endpoint matches.          if ($service['version'] == 2 && $response['openid.claimed_id'] != $claimed_id) {            $disco = openid_discovery($response['openid.claimed_id']);            if ($disco[0]['uri'] != $service['uri']) {              return $response;            }          }          else {            $response['openid.claimed_id'] = $claimed_id;          }          $response['status'] = 'success';        }      }    }  }  return $response;}/** * Perform discovery on a claimed ID to determine the OpenID provider endpoint. * * @param $claimed_id The OpenID URL to perform discovery on. * * @return Array of services discovered (including OpenID version, endpoint * URI, etc). */function openid_discovery($claimed_id) {  module_load_include('inc', 'openid');  module_load_include('inc', 'openid', 'xrds');  $services = array();  $xrds_url = $claimed_id;  if (_openid_is_xri($claimed_id)) {    $xrds_url = 'http://xri.net/'. $claimed_id;  }  $url = @parse_url($xrds_url);  if ($url['scheme'] == 'http' || $url['scheme'] == 'https') {    // For regular URLs, try Yadis resolution first, then HTML-based discovery    $headers = array('Accept' => 'application/xrds+xml');    $result = drupal_http_request($xrds_url, $headers);    if (!isset($result->error)) {      if (isset($result->headers['Content-Type']) && preg_match("/application\/xrds\+xml/", $result->headers['Content-Type'])) {        // Parse XML document to find URL        $services = xrds_parse($result->data);      }      else {        $xrds_url = NULL;        if (isset($result->headers['X-XRDS-Location'])) {          $xrds_url = $result->headers['X-XRDS-Location'];        }        else {          // Look for meta http-equiv link in HTML head          $xrds_url = _openid_meta_httpequiv('X-XRDS-Location', $result->data);        }        if (!empty($xrds_url)) {          $headers = array('Accept' => 'application/xrds+xml');          $xrds_result = drupal_http_request($xrds_url, $headers);          if (!isset($xrds_result->error)) {            $services = xrds_parse($xrds_result->data);          }        }      }      // Check for HTML delegation      if (count($services) == 0) {        // Look for 2.0 links        $uri = _openid_link_href('openid2.provider', $result->data);        $delegate = _openid_link_href('openid2.local_id', $result->data);        $version = 2;        // 1.0 links        if (empty($uri)) {          $uri = _openid_link_href('openid.server', $result->data);          $delegate = _openid_link_href('openid.delegate', $result->data);          $version = 1;        }        if (!empty($uri)) {          $services[] = array('uri' => $uri, 'delegate' => $delegate, 'version' => $version);        }      }    }  }  return $services;}/** * Attempt to create a shared secret with the OpenID Provider. * * @param $op_endpoint URL of the OpenID Provider endpoint. * * @return $assoc_handle The association handle. */function openid_association($op_endpoint) {  module_load_include('inc', 'openid');  // Remove Old Associations:  db_query("DELETE FROM {openid_association} WHERE created + expires_in < %d", time());  // Check to see if we have an association for this IdP already  $assoc_handle = db_result(db_query("SELECT assoc_handle FROM {openid_association} WHERE idp_endpoint_uri = '%s'", $op_endpoint));  if (empty($assoc_handle)) {    $mod = OPENID_DH_DEFAULT_MOD;    $gen = OPENID_DH_DEFAULT_GEN;    $r = _openid_dh_rand($mod);    $private = bcadd($r, 1);    $public = bcpowmod($gen, $private, $mod);    // If there is no existing association, then request one    $assoc_request = openid_association_request($public);    $assoc_message = _openid_encode_message(_openid_create_message($assoc_request));    $assoc_headers = array('Content-Type' => 'application/x-www-form-urlencoded; charset=utf-8');    $assoc_result = drupal_http_request($op_endpoint, $assoc_headers, 'POST', $assoc_message);    if (isset($assoc_result->error)) {      return FALSE;    }    $assoc_response = _openid_parse_message($assoc_result->data);    if (isset($assoc_response['mode']) && $assoc_response['mode'] == 'error') {      return FALSE;    }    if ($assoc_response['session_type'] == 'DH-SHA1') {      $spub = _openid_dh_base64_to_long($assoc_response['dh_server_public']);      $enc_mac_key = base64_decode($assoc_response['enc_mac_key']);      $shared = bcpowmod($spub, $private, $mod);      $assoc_response['mac_key'] = base64_encode(_openid_dh_xorsecret($shared, $enc_mac_key));    }    db_query("INSERT INTO {openid_association} (idp_endpoint_uri, session_type, assoc_handle, assoc_type, expires_in, mac_key, created) VALUES('%s', '%s', '%s', '%s', %d, '%s', %d)",             $op_endpoint, $assoc_response['session_type'], $assoc_response['assoc_handle'], $assoc_response['assoc_type'], $assoc_response['expires_in'], $assoc_response['mac_key'], time());    $assoc_handle = $assoc_response['assoc_handle'];  }  return $assoc_handle;}/** * Authenticate a user or attempt registration. * * @param $response Response values from the OpenID Provider. */function openid_authentication($response) {  module_load_include('inc', 'openid');  $identity = $response['openid.claimed_id'];  $account = user_external_load($identity);  if (isset($account->uid)) {    if (!variable_get('user_email_verification', TRUE) || $account->login) {      user_external_login($account, $_SESSION['openid']['user_login_values']);    }    else {      drupal_set_message(t('You must validate your email address for this account before logging in via OpenID'));    }  }  elseif (variable_get('user_register', 1)) {    // Register new user    $form_state['redirect'] = NULL;    $form_state['values']['name'] = (empty($response['openid.sreg.nickname'])) ? '' : $response['openid.sreg.nickname'];    $form_state['values']['mail'] = (empty($response['openid.sreg.email'])) ? '' : $response['openid.sreg.email'];    $form_state['values']['pass']  = user_password();    $form_state['values']['status'] = variable_get('user_register', 1) == 1;    $form_state['values']['response'] = $response;    $form_state['values']['auth_openid'] = $identity;    if (empty($response['openid.sreg.email']) && empty($response['openid.sreg.nickname'])) {      drupal_set_message(t('Please complete the registration by filling out the form below. If you already have an account, you can <a href="@login">log in</a> now and add your OpenID under "My account".', array('@login' => url('user/login'))), 'warning');      $success = FALSE;    }    else {      $form = drupal_retrieve_form('user_register', $form_state);      drupal_prepare_form('user_register', $form, $form_state);      drupal_validate_form('user_register', $form, $form_state);      $success = !form_get_errors();      if (!$success) {        drupal_set_message(t('Account registration using the information provided by your OpenID provider failed due to the reasons listed below. Please complete the registration by filling out the form below. If you already have an account, you can <a href="@login">log in</a> now and add your OpenID under "My account".', array('@login' => url('user/login'))), 'warning');        // Append form validation errors below the above warning.        $messages = drupal_get_messages('error');        foreach ($messages['error'] as $message) {          drupal_set_message( $message, 'error');        }      }    }    if (!$success) {      // We were unable to register a valid new user, redirect to standard      // user/register and prefill with the values we received.      $_SESSION['openid']['values'] = $form_state['values'];      // We'll want to redirect back to the same place.      $destination = drupal_get_destination();      unset($_REQUEST['destination']);      drupal_goto('user/register', $destination);    }    else {      unset($form_state['values']['response']);      $account = user_save('', $form_state['values']);      // Terminate if an error occured during user_save().      if (!$account) {        drupal_set_message(t("Error saving user account."), 'error');        drupal_goto();      }      user_external_login($account);    }    drupal_redirect_form($form, $form_state['redirect']);  }  else {    drupal_set_message(t('Only site administrators can create new user accounts.'), 'error');  }  drupal_goto();}function openid_association_request($public) {  module_load_include('inc', 'openid');  $request = array(    'openid.ns' => OPENID_NS_2_0,    'openid.mode' => 'associate',    'openid.session_type' => 'DH-SHA1',    'openid.assoc_type' => 'HMAC-SHA1'  );  if ($request['openid.session_type'] == 'DH-SHA1' || $request['openid.session_type'] == 'DH-SHA256') {    $cpub = _openid_dh_long_to_base64($public);    $request['openid.dh_consumer_public'] = $cpub;  }  return $request;}function openid_authentication_request($claimed_id, $identity, $return_to = '', $assoc_handle = '', $version = 2) {  module_load_include('inc', 'openid');  $ns = ($version == 2) ? OPENID_NS_2_0 : OPENID_NS_1_0;  $request =  array(    'openid.ns' => $ns,    'openid.mode' => 'checkid_setup',    'openid.identity' => $identity,    'openid.claimed_id' => $claimed_id,    'openid.assoc_handle' => $assoc_handle,    'openid.return_to' => $return_to,  );  if ($version == 2) {    $request['openid.realm'] = url('', array('absolute' => TRUE));  }  else {    $request['openid.trust_root'] = url('', array('absolute' => TRUE));  }  // Simple Registration  $request['openid.sreg.required'] = 'nickname,email';  $request['openid.ns.sreg'] = "http://openid.net/extensions/sreg/1.1";  $request = array_merge($request, module_invoke_all('openid', 'request', $request));  return $request;}/** * Attempt to verify the response received from the OpenID Provider. * * @param $op_endpoint The OpenID Provider URL. * @param $response Array of repsonse values from the provider. * * @return boolean */function openid_verify_assertion($op_endpoint, $response) {  module_load_include('inc', 'openid');  $valid = FALSE;  $association = db_fetch_object(db_query("SELECT * FROM {openid_association} WHERE assoc_handle = '%s'", $response['openid.assoc_handle']));  if ($association && isset($association->session_type)) {    $keys_to_sign = explode(',', $response['openid.signed']);    $self_sig = _openid_signature($association, $response, $keys_to_sign);    if ($self_sig == $response['openid.sig']) {      $valid = TRUE;    }    else {      $valid = FALSE;    }  }  else {    $request = $response;    $request['openid.mode'] = 'check_authentication';    $message = _openid_create_message($request);    $headers = array('Content-Type' => 'application/x-www-form-urlencoded; charset=utf-8');    $result = drupal_http_request($op_endpoint, $headers, 'POST', _openid_encode_message($message));    if (!isset($result->error)) {      $response = _openid_parse_message($result->data);      if (strtolower(trim($response['is_valid'])) == 'true') {        $valid = TRUE;      }      else {        $valid = FALSE;      }    }  }  return $valid;}
<?php// $Id$/** * @file * Theming for maintenance pages. *//** * Sets up the theming system for site installs, updates and when the site is * in off-line mode. It also applies when the database is unavailable. * * Minnelli is always used for the initial install and update operations. In * other cases, "settings.php" must have a "maintenance_theme" key set for the * $conf variable in order to change the maintenance theme. */function _drupal_maintenance_theme() {  global $theme, $theme_key;  // If $theme is already set, assume the others are set too, and do nothing.  if (isset($theme)) {    return;  }  require_once './includes/path.inc';  require_once './includes/theme.inc';  require_once './includes/common.inc';  require_once './includes/unicode.inc';  require_once './includes/file.inc';  require_once './includes/module.inc';  require_once './includes/database.inc';  unicode_check();  // Install and update pages are treated differently to prevent theming overrides.  if (defined('MAINTENANCE_MODE') && (MAINTENANCE_MODE == 'install' || MAINTENANCE_MODE == 'update')) {    $theme = 'minnelli';  }  else {    if (!db_is_active()) {      // Because we are operating in a crippled environment, we need to      // bootstrap just enough to allow hook invocations to work.      $module_list['system']['filename'] = 'modules/system/system.module';      $module_list['filter']['filename'] = 'modules/filter/filter.module';      module_list(TRUE, FALSE, FALSE, $module_list);      drupal_load('module', 'system');      drupal_load('module', 'filter');    }    $theme = variable_get('maintenance_theme', 'minnelli');  }  $themes = list_themes();  // Store the identifier for retrieving theme settings with.  $theme_key = $theme;  // Find all our ancestor themes and put them in an array.  $base_theme = array();  $ancestor = $theme;  while ($ancestor && isset($themes[$ancestor]->base_theme)) {    $base_theme[] = $new_base_theme = $themes[$themes[$ancestor]->base_theme];    $ancestor = $themes[$ancestor]->base_theme;  }  _init_theme($themes[$theme], array_reverse($base_theme), '_theme_load_offline_registry');  // These are usually added from system_init() -except maintenance.css.  // When the database is inactive it's not called so we add it here.  drupal_add_css(drupal_get_path('module', 'system') .'/defaults.css', 'module');  drupal_add_css(drupal_get_path('module', 'system') .'/system.css', 'module');  drupal_add_css(drupal_get_path('module', 'system') .'/system-menus.css', 'module');  drupal_add_css(drupal_get_path('module', 'system') .'/maintenance.css', 'module');}/** * This builds the registry when the site needs to bypass any database calls. */function _theme_load_offline_registry($theme, $base_theme = NULL, $theme_engine = NULL) {  $registry = _theme_build_registry($theme, $base_theme, $theme_engine);  _theme_set_registry($registry);}/** * Return a themed list of maintenance tasks to perform. * * @ingroup themeable */function theme_task_list($items, $active = NULL) {  $done = isset($items[$active]) || $active == NULL;  $output = '<ol class="task-list">';  foreach ($items as $k => $item) {    if ($active == $k) {      $class = 'active';      $done = false;    }    else {      $class = $done ? 'done' : '';    }    $output .= '<li class="'. $class .'">'. $item .'</li>';  }  $output .= '</ol>';  return $output;}/** * Generate a themed installation page. * * Note: this function is not themeable. * * @param $content *   The page content to show. */function theme_install_page($content) {  drupal_set_header('Content-Type: text/html; charset=utf-8');  // Assign content.  $variables['content'] = $content;  // Delay setting the message variable so it can be processed below.  $variables['show_messages'] = FALSE;  // The maintenance preprocess function is recycled here.  template_preprocess_maintenance_page($variables);  // Special handling of error messages  $messages = drupal_set_message();  if (isset($messages['error'])) {    $title = count($messages['error']) > 1 ? st('The following errors must be resolved before you can continue the installation process') : st('The following error must be resolved before you can continue the installation process');    $variables['messages'] .= '<h3>'. $title .':</h3>';    $variables['messages'] .= theme('status_messages', 'error');    $variables['content'] .= '<p>'. st('Please check the error messages and <a href="!url">try again</a>.', array('!url' => check_url(request_uri()))) .'</p>';  }  // Special handling of warning messages  if (isset($messages['warning'])) {    $title = count($messages['warning']) > 1 ? st('The following installation warnings should be carefully reviewed') : st('The following installation warning should be carefully reviewed');    $variables['messages'] .= '<h4>'. $title .':</h4>';    $variables['messages'] .= theme('status_messages', 'warning');  }  // Special handling of status messages  if (isset($messages['status'])) {    $title = count($messages['status']) > 1 ? st('The following installation warnings should be carefully reviewed, but in most cases may be safely ignored') : st('The following installation warning should be carefully reviewed, but in most cases may be safely ignored');    $variables['messages'] .= '<h4>'. $title .':</h4>';    $variables['messages'] .= theme('status_messages', 'status');  }  // This was called as a theme hook (not template), so we need to  // fix path_to_theme() for the template, to point at the actual  // theme rather than system module as owner of the hook.  global $theme_path;  $theme_path = 'themes/garland';  return theme_render_template('themes/garland/maintenance-page.tpl.php', $variables);}/** * Generate a themed update page. * * Note: this function is not themeable. * * @param $content *   The page content to show. * @param $show_messages *   Whether to output status and error messages. *   FALSE can be useful to postpone the messages to a subsequent page. */function theme_update_page($content, $show_messages = TRUE) {  // Set required headers.  drupal_set_header('Content-Type: text/html; charset=utf-8');  // Assign content and show message flag.  $variables['content'] = $content;  $variables['show_messages'] = $show_messages;  // The maintenance preprocess function is recycled here.  template_preprocess_maintenance_page($variables);  // Special handling of warning messages.  $messages = drupal_set_message();  if (isset($messages['warning'])) {    $title = count($messages['warning']) > 1 ? 'The following update warnings should be carefully reviewed before continuing' : 'The following update warning should be carefully reviewed before continuing';    $variables['messages'] .= '<h4>'. $title .':</h4>';    $variables['messages'] .= theme('status_messages', 'warning');  }  // This was called as a theme hook (not template), so we need to  // fix path_to_theme() for the template, to point at the actual  // theme rather than system module as owner of the hook.  global $theme_path;  $theme_path = 'themes/garland';  return theme_render_template('themes/garland/maintenance-page.tpl.php', $variables);}/** * The variables generated here is a mirror of template_preprocess_page(). * This preprocessor will run it's course when theme_maintenance_page() is * invoked. It is also used in theme_install_page() and theme_update_page() to * keep all the variables consistent. * * An alternate template file of "maintenance-page-offline.tpl.php" can be * used when the database is offline to hide errors and completely replace the * content. * * The $variables array contains the following arguments: * - $content * - $show_blocks * * @see maintenance-page.tpl.php */function template_preprocess_maintenance_page(&$variables) {  // Add favicon  if (theme_get_setting('toggle_favicon')) {    drupal_set_html_head('<link rel="shortcut icon" href="'. check_url(theme_get_setting('favicon')) .'" type="image/x-icon" />');  }  global $theme;  // Retrieve the theme data to list all available regions.  $theme_data = _system_theme_data();  $regions = $theme_data[$theme]->info['regions'];  // Get all region content set with drupal_set_content().  foreach (array_keys($regions) as $region) {    // Assign region to a region variable.    $region_content = drupal_get_content($region);    isset($variables[$region]) ? $variables[$region] .= $region_content : $variables[$region] = $region_content;  }  // Setup layout variable.  $variables['layout'] = 'none';  if (!empty($variables['left'])) {    $variables['layout'] = 'left';  }  if (!empty($variables['right'])) {    $variables['layout'] = ($variables['layout'] == 'left') ? 'both' : 'right';  }  // Construct page title  if (drupal_get_title()) {    $head_title = array(strip_tags(drupal_get_title()), variable_get('site_name', 'Drupal'));  }  else {    $head_title = array(variable_get('site_name', 'Drupal'));    if (variable_get('site_slogan', '')) {      $head_title[] = variable_get('site_slogan', '');    }  }  $variables['head_title']        = implode(' | ', $head_title);  $variables['base_path']         = base_path();  $variables['breadcrumb']        = '';  $variables['feed_icons']        = '';  $variables['footer_message']    = filter_xss_admin(variable_get('site_footer', FALSE));  $variables['head']              = drupal_get_html_head();  $variables['help']              = '';  $variables['language']          = $GLOBALS['language'];  $variables['language']->dir     = $GLOBALS['language']->direction ? 'rtl' : 'ltr';  $variables['logo']              = theme_get_setting('logo');  $variables['messages']          = $variables['show_messages'] ? theme('status_messages') : '';  $variables['mission']           = '';  $variables['primary_links']     = array();  $variables['secondary_links']   = array();  $variables['search_box']        = '';  $variables['site_name']         = (theme_get_setting('toggle_name') ? variable_get('site_name', 'Drupal') : '');  $variables['site_slogan']       = (theme_get_setting('toggle_slogan') ? variable_get('site_slogan', '') : '');  $variables['css']               = drupal_add_css();  $variables['styles']            = drupal_get_css();  $variables['scripts']           = drupal_get_js();  $variables['tabs']              = '';  $variables['title']             = drupal_get_title();  $variables['closure']           = '';  // Compile a list of classes that are going to be applied to the body element.  $body_classes = array();  $body_classes[] = 'in-maintenance';  if (isset($variables['db_is_active']) && !$variables['db_is_active']) {    $body_classes[] = 'db-offline';  }  if ($variables['layout'] == 'both') {    $body_classes[] = 'two-sidebars';  }  elseif ($variables['layout'] == 'none') {    $body_classes[] = 'no-sidebars';  }  else {    $body_classes[] = 'one-sidebar sidebar-'. $variables['layout'];  }  $variables['body_classes'] = implode(' ', $body_classes);  // Dead databases will show error messages so supplying this template will  // allow themers to override the page and the content completely.  if (isset($variables['db_is_active']) && !$variables['db_is_active']) {    $variables['template_file'] = 'maintenance-page-offline';  }}
<?php// $Id$/** * Implementation of hook_enable(). */function comment_enable() {  // Insert records into the node_comment_statistics for nodes that are missing.  db_query("INSERT INTO {node_comment_statistics} (nid, last_comment_timestamp, last_comment_name, last_comment_uid, comment_count) SELECT n.nid, n.changed, NULL, n.uid, 0 FROM {node} n LEFT JOIN {node_comment_statistics} c ON n.nid = c.nid WHERE c.comment_count IS NULL");}/** * Changed node_comment_statistics to use node->changed to avoid future timestamps. */function comment_update_1() {  // Change any future last comment timestamps to now.  db_query('UPDATE {node_comment_statistics} SET last_comment_timestamp = %d WHERE last_comment_timestamp > %d', time(), time());  // Unstuck node indexing timestamp if needed.  if (($last = variable_get('node_cron_last', FALSE)) !== FALSE) {    variable_set('node_cron_last', min(time(), $last));  }  return array();}function comment_update_6001() {  $ret[] = update_sql("ALTER TABLE {comments} DROP score");  $ret[] = update_sql("ALTER TABLE {comments} DROP users");  return $ret;}/** * Changed comment settings from global to per-node -- copy global * settings to all node types. */function comment_update_6002() {  // Comment module might not be enabled when this is run, but we need the  // constants defined by the module for this update.  drupal_load('module', 'comment');  $settings = array(    'comment_default_mode' => COMMENT_MODE_THREADED_EXPANDED,    'comment_default_order' => COMMENT_ORDER_NEWEST_FIRST,    'comment_default_per_page' => 50,    'comment_controls' => COMMENT_CONTROLS_HIDDEN,    'comment_anonymous' => COMMENT_ANONYMOUS_MAYNOT_CONTACT,    'comment_subject_field' => 1,    'comment_preview' => COMMENT_PREVIEW_REQUIRED,    'comment_form_location' => COMMENT_FORM_SEPARATE_PAGE,  );  $types = node_get_types();  foreach ($settings as $setting => $default) {    $value = variable_get($setting, $default);    foreach ($types as $type => $object) {      variable_set($setting .'_'. $type, $value);    }    variable_del($setting);  }  return array(array('success' => TRUE, 'query' => 'Global comment settings copied to all node types.'));}/** * Add index to parent ID field. */function comment_update_6003() {  $ret = array();  db_add_index($ret, 'comments', 'pid', array('pid'));  return $ret;}/** * Implementation of hook_schema(). */function comment_schema() {  $schema['comments'] = array(    'description' => 'Stores comments and associated data.',    'fields' => array(      'cid' => array(        'type' => 'serial',        'not null' => TRUE,        'description' => 'Primary Key: Unique comment ID.',      ),      'pid' => array(        'type' => 'int',        'not null' => TRUE,        'default' => 0,        'description' => 'The {comments}.cid to which this comment is a reply. If set to 0, this comment is not a reply to an existing comment.',      ),      'nid' => array(        'type' => 'int',        'not null' => TRUE,        'default' => 0,        'description' => 'The {node}.nid to which this comment is a reply.',      ),      'uid' => array(        'type' => 'int',        'not null' => TRUE,        'default' => 0,        'description' => 'The {users}.uid who authored the comment. If set to 0, this comment was created by an anonymous user.',      ),      'subject' => array(        'type' => 'varchar',        'length' => 64,        'not null' => TRUE,        'default' => '',        'description' => 'The comment title.',      ),      'comment' => array(        'type' => 'text',        'not null' => TRUE,        'size' => 'big',        'description' => 'The comment body.',      ),      'hostname' => array(        'type' => 'varchar',        'length' => 128,        'not null' => TRUE,        'default' => '',        'description' => "The author's host name.",      ),      'timestamp' => array(        'type' => 'int',        'not null' => TRUE,        'default' => 0,        'description' => 'The time that the comment was created, or last edited by its author, as a Unix timestamp.',      ),      'status' => array(        'type' => 'int',        'unsigned' => TRUE,        'not null' => TRUE,        'default' => 0,        'size' => 'tiny',        'description' => 'The published status of a comment. (0 = Published, 1 = Not Published)',      ),      'format' => array(        'type' => 'int',        'size' => 'small',        'not null' => TRUE,        'default' => 0,        'description' => 'The {filter_formats}.format of the comment body.',      ),      'thread' => array(        'type' => 'varchar',        'length' => 255,        'not null' => TRUE,        'description' => "The vancode representation of the comment's place in a thread.",      ),      'name' => array(        'type' => 'varchar',        'length' => 60,        'not null' => FALSE,        'description' => "The comment author's name. Uses {users}.name if the user is logged in, otherwise uses the value typed into the comment form.",      ),      'mail' => array(        'type' => 'varchar',        'length' => 64,        'not null' => FALSE,        'description' => "The comment author's e-mail address from the comment form, if user is anonymous, and the 'Anonymous users may/must leave their contact information' setting is turned on.",      ),      'homepage' => array(        'type' => 'varchar',        'length' => 255,        'not null' => FALSE,        'description' => "The comment author's home page address from the comment form, if user is anonymous, and the 'Anonymous users may/must leave their contact information' setting is turned on.",      )    ),    'indexes' => array(      'pid'    => array('pid'),      'nid'    => array('nid'),      'status' => array('status'), // This index is probably unused    ),    'primary key' => array('cid'),  );  $schema['node_comment_statistics'] = array(    'description' => 'Maintains statistics of node and comments posts to show "new" and "updated" flags.',    'fields' => array(      'nid' => array(        'type' => 'int',        'unsigned' => TRUE,        'not null' => TRUE,        'default' => 0,        'description' => 'The {node}.nid for which the statistics are compiled.',      ),      'last_comment_timestamp' => array(        'type' => 'int',        'not null' => TRUE,        'default' => 0,        'description' => 'The Unix timestamp of the last comment that was posted within this node, from {comments}.timestamp.',      ),      'last_comment_name' => array(        'type' => 'varchar',        'length' => 60,        'not null' => FALSE,        'description' => 'The name of the latest author to post a comment on this node, from {comments}.name.',      ),      'last_comment_uid' => array(        'type' => 'int',        'not null' => TRUE,        'default' => 0,        'description' => 'The user ID of the latest author to post a comment on this node, from {comments}.uid.',      ),      'comment_count' => array(        'type' => 'int',        'unsigned' => TRUE,        'not null' => TRUE,        'default' => 0,        'description' => 'The total number of comments on this node.',      ),    ),    'primary key' => array('nid'),    'indexes' => array(      'node_comment_timestamp' => array('last_comment_timestamp')    ),  );  return $schema;}
<?php// $Id$?><div id="block-<?php print $block->module .'-'. $block->delta; ?>" class="clear-block block block-<?php print $block->module ?>"><?php if (!empty($block->subject)): ?>  <h2><?php print $block->subject ?></h2><?php endif;?>  <div class="content"><?php print $block->content ?></div></div>
<?php// $Id$/** * @file * The "Update status" module checks for available updates of Drupal core and * any installed contributed modules and themes. It warns site administrators * if newer releases are available via the system status report * (admin/reports/status), the module and theme pages, and optionally via email. *//** * URL to check for updates, if a given project doesn't define its own. */define('UPDATE_DEFAULT_URL', 'http://updates.drupal.org/release-history');// These are internally used constants for this code, do not modify./** * Project is missing security update(s). */define('UPDATE_NOT_SECURE', 1);/** * Current release has been unpublished and is no longer available. */define('UPDATE_REVOKED', 2);/** * Current release is no longer supported by the project maintainer. */define('UPDATE_NOT_SUPPORTED', 3);/** * Project has a new release available, but it is not a security release. */define('UPDATE_NOT_CURRENT', 4);/** * Project is up to date. */define('UPDATE_CURRENT', 5);/** * Project's status cannot be checked. */define('UPDATE_NOT_CHECKED', -1);/** * No available update data was found for project. */define('UPDATE_UNKNOWN', -2);/** * There was a failure fetching available update data for this project. */define('UPDATE_NOT_FETCHED', -3);/** * Maximum number of attempts to fetch available update data from a given host. */define('UPDATE_MAX_FETCH_ATTEMPTS', 2);/** * Implementation of hook_help(). */function update_help($path, $arg) {  switch ($path) {    case 'admin/reports/updates':      $output = '<p>'. t('Here you can find information about available updates for your installed modules and themes. Note that each module or theme is part of a "project", which may or may not have the same name, and might include multiple modules or themes within it.') .'</p>';      $output .= '<p>'. t('To extend the functionality or to change the look of your site, a number of contributed <a href="@modules">modules</a> and <a href="@themes">themes</a> are available.', array('@modules' => 'http://drupal.org/project/modules', '@themes' => 'http://drupal.org/project/themes')) .'</p>';      return $output;    case 'admin/build/themes':    case 'admin/build/modules':      include_once './includes/install.inc';      $status = update_requirements('runtime');      foreach (array('core', 'contrib') as $report_type) {        $type = 'update_'. $report_type;        if (isset($status[$type]['severity'])) {          if ($status[$type]['severity'] == REQUIREMENT_ERROR) {            drupal_set_message($status[$type]['description'], 'error');          }          elseif ($status[$type]['severity'] == REQUIREMENT_WARNING) {            drupal_set_message($status[$type]['description'], 'warning');          }        }      }      return '<p>'. t('See the <a href="@available_updates">available updates</a> page for information on installed modules and themes with new versions released.', array('@available_updates' => url('admin/reports/updates'))) .'</p>';    case 'admin/reports/updates/settings':    case 'admin/reports/status':      // These two pages don't need additional nagging.      break;    case 'admin/help#update':      $output = '<p>'. t("The Update status module periodically checks for new versions of your site's software (including contributed modules and themes), and alerts you to available updates.") .'</p>';      $output .= '<p>'. t('The <a href="@update-report">report of available updates</a> will alert you when new releases are available for download. You may configure options for update checking frequency and notifications at the <a href="@update-settings">Update status module settings page</a>.', array('@update-report' => url('admin/reports/updates'), '@update-settings' => url('admin/reports/updates/settings'))) .'</p>';      $output .= '<p>'. t('Please note that in order to provide this information, anonymous usage statistics are sent to drupal.org. If desired, you may disable the Update status module from the <a href="@modules">module administration page</a>.', array('@modules' => url('admin/build/modules'))) .'</p>';      $output .= '<p>'. t('For more information, see the online handbook entry for <a href="@update">Update status module</a>.', array('@update' => 'http://drupal.org/handbook/modules/update')) .'</p>';      return $output;    default:      // Otherwise, if we're on *any* admin page and there's a security      // update missing, print an error message about it.      if (arg(0) == 'admin' && strpos($path, '#') === FALSE          && user_access('administer site configuration')) {        include_once './includes/install.inc';        $status = update_requirements('runtime');        foreach (array('core', 'contrib') as $report_type) {          $type = 'update_'. $report_type;          if (isset($status[$type])              && isset($status[$type]['reason'])              && $status[$type]['reason'] === UPDATE_NOT_SECURE) {            drupal_set_message($status[$type]['description'], 'error');          }        }      }  }}/** * Implementation of hook_menu(). */function update_menu() {  $items = array();  $items['admin/reports/updates'] = array(    'title' => 'Available updates',    'description' => 'Get a status report about available updates for your installed modules and themes.',    'page callback' => 'update_status',    'access arguments' => array('administer site configuration'),    'file' => 'update.report.inc',    'weight' => 10,  );  $items['admin/reports/updates/list'] = array(    'title' => 'List',    'page callback' => 'update_status',    'access arguments' => array('administer site configuration'),    'file' => 'update.report.inc',    'type' => MENU_DEFAULT_LOCAL_TASK,  );  $items['admin/reports/updates/settings'] = array(    'title' => 'Settings',    'page callback' => 'drupal_get_form',    'page arguments' => array('update_settings'),    'access arguments' => array('administer site configuration'),    'file' => 'update.settings.inc',    'type' => MENU_LOCAL_TASK,  );  $items['admin/reports/updates/check'] = array(    'title' => 'Manual update check',    'page callback' => 'update_manual_status',    'access arguments' => array('administer site configuration'),    'file' => 'update.fetch.inc',    'type' => MENU_CALLBACK,  );  return $items;}/** * Implementation of the hook_theme() registry. */function update_theme() {  return array(    'update_settings' => array(      'arguments' => array('form' => NULL),    ),    'update_report' => array(      'arguments' => array('data' => NULL),    ),    'update_version' => array(      'arguments' => array('version' => NULL, 'tag' => NULL, 'class' => NULL),    ),  );}/** * Implementation of hook_requirements(). * * @return *   An array describing the status of the site regarding available updates. *   If there is no update data, only one record will be returned, indicating *   that the status of core can't be determined. If data is available, there *   will be two records: one for core, and another for all of contrib *   (assuming there are any contributed modules or themes enabled on the *   site). In addition to the fields expected by hook_requirements ('value', *   'severity', and optionally 'description'), this array will contain a *   'reason' attribute, which is an integer constant to indicate why the *   given status is being returned (UPDATE_NOT_SECURE, UPDATE_NOT_CURRENT, or *   UPDATE_UNKNOWN). This is used for generating the appropriate e-mail *   notification messages during update_cron(), and might be useful for other *   modules that invoke update_requirements() to find out if the site is up *   to date or not. * * @see _update_message_text() * @see _update_cron_notify() */function update_requirements($phase) {  if ($phase == 'runtime') {    if ($available = update_get_available(FALSE)) {      module_load_include('inc', 'update', 'update.compare');      $data = update_calculate_project_data($available);      // First, populate the requirements for core:      $requirements['update_core'] = _update_requirement_check($data['drupal'], 'core');      // We don't want to check drupal a second time.      unset($data['drupal']);      if (!empty($data)) {        // Now, sort our $data array based on each project's status. The        // status constants are numbered in the right order of precedence, so        // we just need to make sure the projects are sorted in ascending        // order of status, and we can look at the first project we find.        uasort($data, '_update_project_status_sort');        $first_project = reset($data);        $requirements['update_contrib'] = _update_requirement_check($first_project, 'contrib');      }    }    else {      $requirements['update_core']['title'] = t('Drupal core update status');      $requirements['update_core']['value'] = t('No update data available');      $requirements['update_core']['severity'] = REQUIREMENT_WARNING;      $requirements['update_core']['reason'] = UPDATE_UNKNOWN;      $requirements['update_core']['description'] = _update_no_data();    }    return $requirements;  }}/** * Private helper method to fill in the requirements array. * * This is shared for both core and contrib to generate the right elements in * the array for hook_requirements(). * * @param $project *  Array of information about the project we're testing as returned by *  update_calculate_project_data(). * @param $type *  What kind of project is this ('core' or 'contrib'). * * @return *  An array to be included in the nested $requirements array. * * @see hook_requirements() * @see update_requirements() * @see update_calculate_project_data() */function _update_requirement_check($project, $type) {  $requirement = array();  if ($type == 'core') {    $requirement['title'] = t('Drupal core update status');  }  else {    $requirement['title'] = t('Module and theme update status');  }  $status = $project['status'];  if ($status != UPDATE_CURRENT) {    $requirement['reason'] = $status;    $requirement['description'] = _update_message_text($type, $status, TRUE);    $requirement['severity'] = REQUIREMENT_ERROR;  }  switch ($status) {    case UPDATE_NOT_SECURE:      $requirement_label = t('Not secure!');      break;    case UPDATE_REVOKED:      $requirement_label = t('Revoked!');      break;    case UPDATE_NOT_SUPPORTED:      $requirement_label = t('Unsupported release');      break;    case UPDATE_NOT_CURRENT:      $requirement_label = t('Out of date');      $requirement['severity'] = REQUIREMENT_WARNING;      break;    case UPDATE_UNKNOWN:    case UPDATE_NOT_CHECKED:    case UPDATE_NOT_FETCHED:      $requirement_label = isset($project['reason']) ? $project['reason'] : t('Can not determine status');      $requirement['severity'] = REQUIREMENT_WARNING;      break;    default:      $requirement_label = t('Up to date');  }  if ($status != UPDATE_CURRENT && $type == 'core' && isset($project['recommended'])) {    $requirement_label .= ' '. t('(version @version available)', array('@version' => $project['recommended']));  }  $requirement['value'] = l($requirement_label, 'admin/reports/updates');  return $requirement;}/** * Implementation of hook_cron(). */function update_cron() {  $frequency = variable_get('update_check_frequency', 1);  $interval = 60 * 60 * 24 * $frequency;  // Cron should check for updates if there is no update data cached or if the  // configured update interval has elapsed.  if (!_update_cache_get('update_available_releases') || ((time() - variable_get('update_last_check', 0)) > $interval)) {    update_refresh();    _update_cron_notify();  }}/** * Implementation of hook_form_alter(). * * Adds a submit handler to the system modules and themes forms, so that if a * site admin saves either form, we invalidate the cache of available updates. * * @see update_invalidate_cache() */function update_form_alter(&$form, $form_state, $form_id) {  if ($form_id == 'system_modules' || $form_id == 'system_themes_form' ) {    $form['#submit'][] = 'update_invalidate_cache';  }}/** * Prints a warning message when there is no data about available updates. */function _update_no_data() {  $destination = drupal_get_destination();  return t('No information is available about potential new releases for currently installed modules and themes. To check for updates, you may need to <a href="@run_cron">run cron</a> or you can <a href="@check_manually">check manually</a>. Please note that checking for available updates can take a long time, so please be patient.', array(    '@run_cron' => url('admin/reports/status/run-cron', array('query' => $destination)),    '@check_manually' => url('admin/reports/updates/check', array('query' => $destination)),  ));}/** * Internal helper to try to get the update information from the cache * if possible, and to refresh the cache when necessary. * * In addition to checking the cache lifetime, this function also ensures that * there are no .info files for enabled modules or themes that have a newer * modification timestamp than the last time we checked for available update * data. If any .info file was modified, it almost certainly means a new * version of something was installed. Without fresh available update data, * the logic in update_calculate_project_data() will be wrong and produce * confusing, bogus results. * * @param $refresh *   Boolean to indicate if this method should refresh the cache automatically *   if there's no data. * * @see update_refresh() * @see update_get_projects() */function update_get_available($refresh = FALSE) {  module_load_include('inc', 'update', 'update.compare');  $available = array();  // First, make sure that none of the .info files have a change time  // newer than the last time we checked for available updates.  $needs_refresh = FALSE;  $last_check = variable_get('update_last_check', 0);  $projects = update_get_projects();  foreach ($projects as $key => $project) {    if ($project['info']['_info_file_ctime'] > $last_check) {      $needs_refresh = TRUE;      break;    }  }  if (!$needs_refresh && ($cache = _update_cache_get('update_available_releases')) && $cache->expire > time()) {    $available = $cache->data;  }  elseif ($needs_refresh || $refresh) {    // If we need to refresh due to a newer .info file, ignore the argument    // and force the refresh (e.g., even for update_requirements()) to prevent    // bogus results.    $available = update_refresh();  }  return $available;}/** * Wrapper to load the include file and then refresh the release data. */function update_refresh() {  module_load_include('inc', 'update', 'update.fetch');  return _update_refresh();}/** * Implementation of hook_mail(). * * Constructs the email notification message when the site is out of date. * * @param $key *   Unique key to indicate what message to build, always 'status_notify'. * @param $message *   Reference to the message array being built. * @param $params *   Array of parameters to indicate what kind of text to include in the *   message body. This is a keyed array of message type ('core' or 'contrib') *   as the keys, and the status reason constant (UPDATE_NOT_SECURE, etc) for *   the values. * * @see drupal_mail() * @see _update_cron_notify() * @see _update_message_text() */function update_mail($key, &$message, $params) {  $language = $message['language'];  $langcode = $language->language;  $message['subject'] .= t('New release(s) available for !site_name', array('!site_name' => variable_get('site_name', 'Drupal')), $langcode);  foreach ($params as $msg_type => $msg_reason) {    $message['body'][] = _update_message_text($msg_type, $msg_reason, FALSE, $language);  }  $message['body'][] = t('See the available updates page for more information:', array(), $langcode) ."\n". url('admin/reports/updates', array('absolute' => TRUE, 'language' => $language));}/** * Helper function to return the appropriate message text when the site is out * of date or missing a security update. * * These error messages are shared by both update_requirements() for the * site-wide status report at admin/reports/status and in the body of the * notification emails generated by update_cron(). * * @param $msg_type *   String to indicate what kind of message to generate. Can be either *   'core' or 'contrib'. * @param $msg_reason *   Integer constant specifying why message is generated. * @param $report_link *   Boolean that controls if a link to the updates report should be added. * @param $language *   An optional language object to use. * @return *   The properly translated error message for the given key. */function _update_message_text($msg_type, $msg_reason, $report_link = FALSE, $language = NULL) {  $langcode = isset($language) ? $language->language : NULL;  $text = '';  switch ($msg_reason) {    case UPDATE_NOT_SECURE:      if ($msg_type == 'core') {        $text = t('There is a security update available for your version of Drupal. To ensure the security of your server, you should update immediately!', array(), $langcode);      }      else {        $text = t('There are security updates available for one or more of your modules or themes. To ensure the security of your server, you should update immediately!', array(), $langcode);      }      break;    case UPDATE_REVOKED:      if ($msg_type == 'core') {        $text = t('Your version of Drupal has been revoked and is no longer available for download. Upgrading is strongly recommended!', array(), $langcode);      }      else {        $text = t('The installed version of at least one of your modules or themes has been revoked and is no longer available for download. Upgrading or disabling is strongly recommended!', array(), $langcode);      }      break;    case UPDATE_NOT_SUPPORTED:      if ($msg_type == 'core') {        $text = t('Your version of Drupal is no longer supported. Upgrading is strongly recommended!', array(), $langcode);      }      else {        $text = t('The installed version of at least one of your modules or themes is no longer supported. Upgrading or disabling is strongly recommended! Please see the project homepage for more details.', array(), $langcode);      }      break;    case UPDATE_NOT_CURRENT:      if ($msg_type == 'core') {        $text = t('There are updates available for your version of Drupal. To ensure the proper functioning of your site, you should update as soon as possible.', array(), $langcode);      }      else {        $text = t('There are updates available for one or more of your modules or themes. To ensure the proper functioning of your site, you should update as soon as possible.', array(), $langcode);      }      break;    case UPDATE_UNKNOWN:    case UPDATE_NOT_CHECKED:    case UPDATE_NOT_FETCHED:      if ($msg_type == 'core') {        $text = t('There was a problem determining the status of available updates for your version of Drupal.', array(), $langcode);      }      else {        $text = t('There was a problem determining the status of available updates for one or more of your modules or themes.', array(), $langcode);      }      break;  }  if ($report_link) {    $text .= ' '. t('See the <a href="@available_updates">available updates</a> page for more information.', array('@available_updates' => url('admin/reports/updates', array('language' => $language))), $langcode);  }  return $text;}/** * Private sort function to order projects based on their status. * * @see update_requirements() * @see uasort() */function _update_project_status_sort($a, $b) {  // The status constants are numerically in the right order, so we can  // usually subtract the two to compare in the order we want. However,  // negative status values should be treated as if they are huge, since we  // always want them at the bottom of the list.  $a_status = $a['status'] > 0 ? $a['status'] : (-10 * $a['status']);  $b_status = $b['status'] > 0 ? $b['status'] : (-10 * $b['status']);  return $a_status - $b_status;}/** * @defgroup update_status_cache Private update status cache system * @{ * * We specifically do NOT use the core cache API for saving the fetched data * about available updates. It is vitally important that this cache is only * cleared when we're populating it after successfully fetching new available * update data. Usage of the core cache API results in all sorts of potential * problems that would result in attempting to fetch available update data all * the time, including if a site has a "minimum cache lifetime" (which is both * a minimum and a maximum) defined, or if a site uses memcache or another * plug-able cache system that assumes volatile caches. * * Update module still uses the {cache_update} table, but instead of using * cache_set(), cache_get(), and cache_clear_all(), there are private helper * functions that implement these same basic tasks but ensure that the cache * is not prematurely cleared, and that the data is always stored in the * database, even if memcache or another cache backend is in use. *//** * Store data in the private update status cache table. * * Note: this function completely ignores the {cache_update}.headers field * since that is meaningless for the kinds of data we're caching. * * @param $cid *   The cache ID to save the data with. * @param $data *   The data to store. * @param $expire *   One of the following values: *   - CACHE_PERMANENT: Indicates that the item should never be removed except *     by explicitly using _update_cache_clear() or update_invalidate_cache(). *   - A Unix timestamp: Indicates that the item should be kept at least until *     the given time, after which it will be invalidated. */function _update_cache_set($cid, $data, $expire) {  $serialized = 0;  if (is_object($data) || is_array($data)) {    $data = serialize($data);    $serialized = 1;  }  $created = time();  db_query("UPDATE {cache_update} SET data = %b, created = %d, expire = %d, serialized = %d WHERE cid = '%s'", $data, $created, $expire, $serialized, $cid);  if (!db_affected_rows()) {    @db_query("INSERT INTO {cache_update} (cid, data, created, expire, serialized) VALUES ('%s', %b, %d, %d, %d)", $cid, $data, $created, $expire, $serialized);  }}/** * Retrieve data from the private update status cache table. * * @param $cid *   The cache ID to retrieve. * @return *   The data for the given cache ID, or NULL if the ID was not found. */function _update_cache_get($cid) {  $cache = db_fetch_object(db_query("SELECT data, created, expire, serialized FROM {cache_update} WHERE cid = '%s'", $cid));  if (isset($cache->data)) {    $cache->data = db_decode_blob($cache->data);    if ($cache->serialized) {      $cache->data = unserialize($cache->data);    }  }  return $cache;}/** * Invalidates specific cached data relating to update status. * * @param $cid *   Optional cache ID of the record to clear from the private update module *   cache. If empty, all records will be cleared from the table. */function _update_cache_clear($cid = NULL) {  if (empty($cid)) {    db_query("TRUNCATE TABLE {cache_update}");  }  else {    db_query("DELETE FROM {cache_update} WHERE cid = '%s'", $cid);  }}/** * Implementation of hook_flush_caches(). * * Called from update.php (among others) to flush the caches. * Since we're running update.php, we are likely to install a new version of * something, in which case, we want to check for available update data again. * However, because we have our own caching system, we need to directly clear * the database table ourselves at this point and return nothing, for example, * on sites that use memcache where cache_clear_all() won't know how to purge * this data. * * However, we only want to do this from update.php, since otherwise, we'd * lose all the available update data on every cron run. So, we specifically * check if the site is in MAINTENANCE_MODE == 'update' (which indicates * update.php is running, not update module... alas for overloaded names). */function update_flush_caches() {  if (defined('MAINTENANCE_MODE') && MAINTENANCE_MODE == 'update') {    _update_cache_clear();  }  return array();}/** * Invalidates all cached data relating to update status. */function update_invalidate_cache() {  _update_cache_clear();}/** * @} End of "defgroup update_status_cache". */
<?php// $Id$/** * Implementation of hook_schema(). */function block_schema() {  $schema['blocks'] = array(    'description' => 'Stores block settings, such as region and visibility settings.',    'fields' => array(      'bid' => array(        'type' => 'serial',        'not null' => TRUE,        'description' => 'Primary Key: Unique block ID.',      ),      'module' => array(        'type' => 'varchar',        'length' => 64,        'not null' => TRUE,        'default' => '',        'description' => "The module from which the block originates; for example, 'user' for the Who's Online block, and 'block' for any custom blocks.",      ),      'delta' => array(        'type' => 'varchar',        'length' => 32,        'not null' => TRUE,        'default' => '0',        'description' => 'Unique ID for block within a module.',      ),      'theme' => array(        'type' => 'varchar',        'length' => 64,        'not null' => TRUE,        'default' => '',        'description' => 'The theme under which the block settings apply.',      ),      'status' => array(        'type' => 'int',        'not null' => TRUE,        'default' => 0,        'size' => 'tiny',        'description' => 'Block enabled status. (1 = enabled, 0 = disabled)',      ),      'weight' => array(        'type' => 'int',        'not null' => TRUE,        'default' => 0,        'size' => 'tiny',        'description' => 'Block weight within region.',      ),      'region' => array(        'type' => 'varchar',        'length' => 64,        'not null' => TRUE,        'default' => '',        'description' => 'Theme region within which the block is set.',      ),      'custom' => array(        'type' => 'int',        'not null' => TRUE,        'default' => 0,        'size' => 'tiny',        'description' => 'Flag to indicate how users may control visibility of the block. (0 = Users cannot control, 1 = On by default, but can be hidden, 2 = Hidden by default, but can be shown)',      ),      'throttle' => array(        'type' => 'int',        'not null' => TRUE,        'default' => 0,        'size' => 'tiny',        'description' => 'Flag to indicate whether or not to remove block when website traffic is high. (1 = throttle, 0 = do not throttle)',      ),      'visibility' => array(        'type' => 'int',        'not null' => TRUE,        'default' => 0,        'size' => 'tiny',        'description' => 'Flag to indicate how to show blocks on pages. (0 = Show on all pages except listed pages, 1 = Show only on listed pages, 2 = Use custom PHP code to determine visibility)',      ),      'pages' => array(        'type' => 'text',        'not null' => TRUE,        'description' => 'Contents of the "Pages" block; contains either a list of paths on which to include/exclude the block or PHP code, depending on "visibility" setting.',      ),      'title' => array(        'type' => 'varchar',        'length' => 64,        'not null' => TRUE,        'default' => '',        'description' => 'Custom title for the block. (Empty string will use block default title, &lt;none&gt; will remove the title, text will cause block to use specified title.)',      ),      'cache' => array(        'type' => 'int',        'not null' => TRUE,        'default' => 1,        'size' => 'tiny',        'description' => 'Binary flag to indicate block cache mode. (-1: Do not cache, 1: Cache per role, 2: Cache per user, 4: Cache per page, 8: Block cache global) See BLOCK_CACHE_* constants in block.module for more detailed information.',      ),    ),    'primary key' => array('bid'),    'unique keys' => array(      'tmd' => array('theme', 'module', 'delta'),    ),    'indexes' => array(      'list' => array('theme', 'status', 'region', 'weight', 'module'),    ),  );  $schema['blocks_roles'] = array(    'description' => 'Sets up access permissions for blocks based on user roles',    'fields' => array(      'module' => array(        'type' => 'varchar',        'length' => 64,        'not null' => TRUE,        'description' => "The block's origin module, from {blocks}.module.",      ),      'delta'  => array(        'type' => 'varchar',        'length' => 32,        'not null' => TRUE,        'description' => "The block's unique delta within module, from {blocks}.delta.",      ),      'rid' => array(        'type' => 'int',        'unsigned' => TRUE,        'not null' => TRUE,        'description' => "The user's role ID from {users_roles}.rid.",      ),    ),    'primary key' => array(      'module',      'delta',      'rid'    ),    'indexes' => array(      'rid' => array('rid'),    ),  );  $schema['boxes'] = array(    'description' => 'Stores contents of custom-made blocks.',    'fields' => array(      'bid' => array(        'type' => 'serial',  'unsigned' => TRUE,        'not null' => TRUE,        'description' => "The block's {blocks}.bid.",      ),      'body' => array(        'type' => 'text',        'not null' => FALSE,        'size' => 'big',        'description' => 'Block contents.',      ),      'info' => array(        'type' => 'varchar',        'length' => 128,        'not null' => TRUE,        'default' => '',        'description' => 'Block description.',      ),      'format' => array(        'type' => 'int',        'size' => 'small',        'not null' => TRUE,        'default' => 0,        'description' => "Block body's {filter_formats}.format; for example, 1 = Filtered HTML.",      )    ),    'unique keys' => array('info' => array('info')),    'primary key' => array('bid'),  );  $schema['cache_block'] = drupal_get_schema_unprocessed('system', 'cache');  $schema['cache_block']['description'] = 'Cache table for the Block module to store already built blocks, identified by module, delta, and various contexts which may change the block, such as theme, locale, and caching mode defined for the block.';  return $schema;}
<?php// $Id$/** * @file page.tpl.php * * Theme implementation to display a single Drupal page. * * Available variables: * * General utility variables: * - $base_path: The base URL path of the Drupal installation. At the very *   least, this will always default to /. * - $css: An array of CSS files for the current page. * - $directory: The directory the theme is located in, e.g. themes/garland or *   themes/garland/minelli. * - $is_front: TRUE if the current page is the front page. Used to toggle the mission statement. * - $logged_in: TRUE if the user is registered and signed in. * - $is_admin: TRUE if the user has permission to access administration pages. * * Page metadata: * - $language: (object) The language the site is being displayed in. *   $language->language contains its textual representation. *   $language->dir contains the language direction. It will either be 'ltr' or 'rtl'. * - $head_title: A modified version of the page title, for use in the TITLE tag. * - $head: Markup for the HEAD section (including meta tags, keyword tags, and *   so on). * - $styles: Style tags necessary to import all CSS files for the page. * - $scripts: Script tags necessary to load the JavaScript files and settings *   for the page. * - $body_classes: A set of CSS classes for the BODY tag. This contains flags *   indicating the current layout (multiple columns, single column), the current *   path, whether the user is logged in, and so on. * * Site identity: * - $front_page: The URL of the front page. Use this instead of $base_path, *   when linking to the front page. This includes the language domain or prefix. * - $logo: The path to the logo image, as defined in theme configuration. * - $site_name: The name of the site, empty when display has been disabled *   in theme settings. * - $site_slogan: The slogan of the site, empty when display has been disabled *   in theme settings. * - $mission: The text of the site mission, empty when display has been disabled *   in theme settings. * * Navigation: * - $search_box: HTML to display the search box, empty if search has been disabled. * - $primary_links (array): An array containing primary navigation links for the *   site, if they have been configured. * - $secondary_links (array): An array containing secondary navigation links for *   the site, if they have been configured. * * Page content (in order of occurrance in the default page.tpl.php): * - $left: The HTML for the left sidebar. * * - $breadcrumb: The breadcrumb trail for the current page. * - $title: The page title, for use in the actual HTML content. * - $help: Dynamic help text, mostly for admin pages. * - $messages: HTML for status and error messages. Should be displayed prominently. * - $tabs: Tabs linking to any sub-pages beneath the current page (e.g., the view *   and edit tabs when displaying a node). * * - $content: The main content of the current Drupal page. * * - $right: The HTML for the right sidebar. * * Footer/closing data: * - $feed_icons: A string of all feed icons for the current page. * - $footer_message: The footer message as defined in the admin settings. * - $footer : The footer region. * - $closure: Final closing markup from any modules that have altered the page. *   This variable should always be output last, after all other dynamic content. * * @see template_preprocess() * @see template_preprocess_page() */?><!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.0 Strict//EN"  "http://www.w3.org/TR/xhtml1/DTD/xhtml1-strict.dtd"><html xmlns="http://www.w3.org/1999/xhtml" xml:lang="<?php print $language->language ?>" lang="<?php print $language->language ?>" dir="<?php print $language->dir ?>"><head>  <?php print $head; ?>  <title><?php print $head_title; ?></title>  <?php print $styles; ?>  <?php print $scripts; ?>  <script type="text/javascript"><?php /* Needed to avoid Flash of Unstyled Content in IE */ ?> </script></head><body class="<?php print $body_classes; ?>">  <div id="page">    <div id="header">      <div id="logo-title">        <?php if (!empty($logo)): ?>          <a href="<?php print $front_page; ?>" title="<?php print t('Home'); ?>" rel="home" id="logo">            <img src="<?php print $logo; ?>" alt="<?php print t('Home'); ?>" />          </a>        <?php endif; ?>        <div id="name-and-slogan">          <?php if (!empty($site_name)): ?>            <h1 id="site-name">              <a href="<?php print $front_page ?>" title="<?php print t('Home'); ?>" rel="home"><span><?php print $site_name; ?></span></a>            </h1>          <?php endif; ?>          <?php if (!empty($site_slogan)): ?>            <div id="site-slogan"><?php print $site_slogan; ?></div>          <?php endif; ?>        </div> <!-- /name-and-slogan -->      </div> <!-- /logo-title -->      <?php if (!empty($search_box)): ?>        <div id="search-box"><?php print $search_box; ?></div>      <?php endif; ?>      <?php if (!empty($header)): ?>        <div id="header-region">          <?php print $header; ?>        </div>      <?php endif; ?>    </div> <!-- /header -->    <div id="container" class="clear-block">      <div id="navigation" class="menu <?php if (!empty($primary_links)) { print "withprimary"; } if (!empty($secondary_links)) { print " withsecondary"; } ?> ">        <?php if (!empty($primary_links)): ?>          <div id="primary" class="clear-block">            <?php print theme('links', $primary_links, array('class' => 'links primary-links')); ?>          </div>        <?php endif; ?>        <?php if (!empty($secondary_links)): ?>          <div id="secondary" class="clear-block">            <?php print theme('links', $secondary_links, array('class' => 'links secondary-links')); ?>          </div>        <?php endif; ?>      </div> <!-- /navigation -->      <?php if (!empty($left)): ?>        <div id="sidebar-left" class="column sidebar">          <?php print $left; ?>        </div> <!-- /sidebar-left -->      <?php endif; ?>      <div id="main" class="column"><div id="main-squeeze">        <?php if (!empty($breadcrumb)): ?><div id="breadcrumb"><?php print $breadcrumb; ?></div><?php endif; ?>        <?php if (!empty($mission)): ?><div id="mission"><?php print $mission; ?></div><?php endif; ?>        <div id="content">          <?php if (!empty($title)): ?><h1 class="title" id="page-title"><?php print $title; ?></h1><?php endif; ?>          <?php if (!empty($tabs)): ?><div class="tabs"><?php print $tabs; ?></div><?php endif; ?>          <?php if (!empty($messages)): print $messages; endif; ?>          <?php if (!empty($help)): print $help; endif; ?>          <div id="content-content" class="clear-block">            <?php print $content; ?>          </div> <!-- /content-content -->          <?php print $feed_icons; ?>        </div> <!-- /content -->      </div></div> <!-- /main-squeeze /main -->      <?php if (!empty($right)): ?>        <div id="sidebar-right" class="column sidebar">          <?php print $right; ?>        </div> <!-- /sidebar-right -->      <?php endif; ?>    </div> <!-- /container -->    <div id="footer-wrapper">      <div id="footer">        <?php print $footer_message; ?>        <?php if (!empty($footer)): print $footer; endif; ?>      </div> <!-- /footer -->    </div> <!-- /footer-wrapper -->    <?php print $closure; ?>  </div> <!-- /page --></body></html>
<?php// $Id$/** * Implementation of hook_install(). */function poll_install() {  // Create tables.  drupal_install_schema('poll');}/** * Implementation of hook_uninstall(). */function poll_uninstall() {  // Remove tables.  drupal_uninstall_schema('poll');}/** * Implementation of hook_schema(). */function poll_schema() {  $schema['poll'] = array(    'description' => 'Stores poll-specific information for poll nodes.',    'fields' => array(      'nid'     => array(        'type' => 'int',        'unsigned' => TRUE,        'not null' => TRUE,        'default' => 0,        'description' => "The poll's {node}.nid."        ),      'runtime' => array(        'type' => 'int',        'not null' => TRUE,        'default' => 0,        'description' => 'The number of seconds past {node}.created during which the poll is open.'        ),      'active'  => array(        'type' => 'int',        'unsigned' => TRUE,        'not null' => TRUE,        'default' => 0,        'description' => 'Boolean indicating whether or not the poll is open.',        ),      ),    'primary key' => array('nid'),    );  $schema['poll_choices'] = array(    'description' => 'Stores information about all choices for all {poll}s.',    'fields' => array(      'chid'    => array(        'type' => 'serial',        'unsigned' => TRUE,        'not null' => TRUE,        'description' => 'Unique identifier for a poll choice.',        ),      'nid'     => array(        'type' => 'int',        'unsigned' => TRUE,        'not null' => TRUE,        'default' => 0,        'description' => 'The {node}.nid this choice belongs to.',        ),      'chtext'  => array(        'type' => 'varchar',        'length' => 128,        'not null' => TRUE,        'default' => '',        'description' => 'The text for this choice.',        ),      'chvotes' => array(        'type' => 'int',        'not null' => TRUE,        'default' => 0,        'description' => 'The total number of votes this choice has received by all users.',        ),      'chorder' => array(        'type' => 'int',        'not null' => TRUE,        'default' => 0,        'description' => 'The sort order of this choice among all choices for the same node.',        )      ),    'indexes' => array(      'nid' => array('nid')      ),    'primary key' => array('chid'),    );  $schema['poll_votes'] = array(    'description' => 'Stores per-{users} votes for each {poll}.',    'fields' => array(      'nid'      => array(        'type' => 'int',        'unsigned' => TRUE,        'not null' => TRUE,        'description' => 'The {poll} node this vote is for.',        ),      'uid'      => array(        'type' => 'int',        'unsigned' => TRUE,        'not null' => TRUE,        'default' => 0,        'description' => 'The {users}.uid this vote is from unless the voter was anonymous.',        ),      'chorder'  => array(        'type' => 'int',        'not null' => TRUE,        'default' => -1,        'description' => "The {users}'s vote for this poll.",        ),      'hostname' => array(        'type' => 'varchar',        'length' => 128,        'not null' => TRUE,        'default' => '',        'description' => 'The IP address this vote is from unless the voter was logged in.',        ),      ),    'primary key' => array('nid', 'uid', 'hostname'),    'indexes' => array(      'hostname' => array('hostname'),      'uid'      => array('uid'),      ),    );  return $schema;}
<?php// $Id$/** * @file forum-topic-list.tpl.php * Theme implementation to display a list of forum topics. * * Available variables: * - $header: The table header. This is pre-generated with click-sorting *   information. If you need to change this, @see template_preprocess_forum_topic_list(). * - $pager: The pager to display beneath the table. * - $topics: An array of topics to be displayed. * - $topic_id: Numeric id for the current forum topic. * * Each $topic in $topics contains: * - $topic->icon: The icon to display. * - $topic->moved: A flag to indicate whether the topic has been moved to *   another forum. * - $topic->title: The title of the topic. Safe to output. * - $topic->message: If the topic has been moved, this contains an *   explanation and a link. * - $topic->zebra: 'even' or 'odd' string used for row class. * - $topic->num_comments: The number of replies on this topic. * - $topic->new_replies: A flag to indicate whether there are unread comments. * - $topic->new_url: If there are unread replies, this is a link to them. * - $topic->new_text: Text containing the translated, properly pluralized count. * - $topic->created: An outputtable string represented when the topic was posted. * - $topic->last_reply: An outputtable string representing when the topic was *   last replied to. * - $topic->timestamp: The raw timestamp this topic was posted. * * @see template_preprocess_forum_topic_list() * @see theme_forum_topic_list() */?><table id="forum-topic-<?php print $topic_id; ?>">  <thead>    <tr><?php print $header; ?></tr>  </thead>  <tbody>  <?php foreach ($topics as $topic): ?>    <tr class="<?php print $topic->zebra;?>">      <td class="icon"><?php print $topic->icon; ?></td>      <td class="title"><?php print $topic->title; ?></td>    <?php if ($topic->moved): ?>      <td colspan="3"><?php print $topic->message; ?></td>    <?php else: ?>      <td class="replies">        <?php print $topic->num_comments; ?>        <?php if ($topic->new_replies): ?>          <br />          <a href="<?php print $topic->new_url; ?>"><?php print $topic->new_text; ?></a>        <?php endif; ?>      </td>      <td class="created"><?php print $topic->created; ?></td>      <td class="last-reply"><?php print $topic->last_reply; ?></td>    <?php endif; ?>    </tr>  <?php endforeach; ?>  </tbody></table><?php print $pager; ?>
<?php// $Id$/** * @file * A database-mediated implementation of a locking mechanism. *//** * @defgroup lock Functions to coordinate long-running operations across requests. * @{ * In most environments, multiple Drupal page requests (a.k.a. threads or * processes) will execute in parallel. This leads to potential conflicts or * race conditions when two requests execute the same code at the same time. A * common example of this is a rebuild like menu_rebuild() where we invoke many * hook implementations to get and process data from all active modules, and * then delete the current data in the database to insert the new afterwards. * * This is a cooperative, advisory lock system. Any long-running operation * that could potentially be attempted in parallel by multiple requests should * try to acquire a lock before proceeding. By obtaiing a lock, one request * notifies any other requests that a specific opertation is in progress which * must not be executed in parallel. * * To use this API, pick a unique name for the lock. A sensible choice is the * name of the function performing the operation. A very simple example use of * this API: * @code * function mymodule_long_operation() { *   if (lock_acquire('mymodule_long_operation')) { *     // Do the long operation here. *     // ... *     lock_release('mymodule_long_operation'); *   } * } * @endcode * * If a function acquires a lock it should always release it when the * operation is complete by calling lock_release(), as in the example. * * A function that has acquired a lock may attempt to renew a lock (extend the * duration of the lock) by calling lock_acquire() again during the operation. * Failure to renew a lock is indicative that another request has acquired * the lock, and that the current operation may need to be aborted. * * If a function fails to acquire a lock it may either immediately return, or * it may call lock_wait() if the rest of the current page request requires * that the operation in question be complete.  After lock_wait() returns, * the function may again attempt to acquire the lock, or may simply allow the * page request to proceed on the  assumption that a parallel request completed * the operation. * * lock_acquire() and lock_wait() will automatically break (delete) a lock * whose duration has exceeded the timeout specified when it was acquired. * * A function that has acquired a lock may attempt to renew a lock (extend the * duration of the lock) by calling lock_acquire() again during the operation. * Failure to renew a lock is indicative that another request has acquired * the lock, and that the current operation may need to be aborted. * * Alternative implementations of this API (such as APC) may be substituted * by setting the 'lock_inc' variable to an alternate include filepath.  Since * this is an API intended to support alternative implementations, code using * this API should never rely upon specific implementation details (for example * no code should look for or directly modify a lock in the {semaphore} table). *//** * Initialize the locking system. */function lock_init() {  global $locks;  $locks = array();}/** * Helper function to get this request's unique id. */function _lock_id() {  static $lock_id;  if (!isset($lock_id)) {    // Assign a unique id.    $lock_id = uniqid(mt_rand(), TRUE);    // We only register a shutdown function if a lock is used.    register_shutdown_function('lock_release_all', $lock_id);  }  return $lock_id;}/** * Acquire (or renew) a lock, but do not block if it fails. * * @param $name *   The name of the lock. * @param $timeout *   A number of seconds (float) before the lock expires. * @return *   TRUE if the lock was acquired, FALSE if it failed. */function lock_acquire($name, $timeout = 30.0) {  global $locks;  // Insure that the timeout is at least 1 ms.  $timeout = max($timeout, 0.001);  list($usec, $sec) = explode(' ', microtime());  $expire = (float)$usec + (float)$sec + $timeout;  if (isset($locks[$name])) {    // Try to extend the expiration of a lock we already acquired.    if (!db_result(db_query("UPDATE {semaphore} SET expire = %f WHERE name = '%s' AND value = '%s'", $expire, $name, _lock_id()))) {      // The lock was broken.      unset($locks[$name]);    }  }  else {    // Optimistically try to acquire the lock, then retry once if it fails.    // The first time through the loop cannot be a retry.    $retry = FALSE;    // We always want to do this code at least once.    do {      if (@db_query("INSERT INTO {semaphore} (name, value, expire) VALUES ('%s', '%s', %f)", $name, _lock_id(), $expire)) {        // We track all acquired locks in the global variable.        $locks[$name] = TRUE;        // We never need to try again.        $retry = FALSE;      }      else {        // Suppress the error. If this is our first pass through the loop,        // then $retry is FALSE. In this case, the insert must have failed        // meaning some other request acquired the lock but did not release it.        // We decide whether to retry by checking lock_may_be_available()        // Since this will break the lock in case it is expired.        $retry = $retry ? FALSE : lock_may_be_available($name);      }      // We only retry in case the first attempt failed, but we then broke      // an expired lock.    } while ($retry);  }  return isset($locks[$name]);}/** * Check if lock acquired by a different process may be available. * * If an existing lock has expired, it is removed. * * @param $name *   The name of the lock. * @return *   TRUE if there is no lock or it was removed, FALSE otherwise. */function lock_may_be_available($name) {  $lock = db_fetch_array(db_query("SELECT expire, value FROM {semaphore} WHERE name = '%s'", $name));  if (!$lock) {    return TRUE;  }  $expire = (float) $lock['expire'];  list($usec, $sec) = explode(' ', microtime());  $now = (float)$usec + (float)$sec;  if ($now > $lock['expire']) {    // We check two conditions to prevent a race condition where another    // request acquired the lock and set a new expire time.  We add a small    // number to $expire to avoid errors with float to string conversion.    db_query("DELETE FROM {semaphore} WHERE name = '%s' AND value = '%s' AND expire <= %f", $name, $lock['value'], 0.0001 + $expire);    return (bool)db_affected_rows();  }  return FALSE;}/** * Wait for a lock to be available. * * This function may be called in a request that fails to acquire a desired * lock. This will block further execution until the lock is available or the * specified delay in seconds is reached.  This should not be used with locks * that are acquired very frequently, since the lock is likely to be acquired * again by a different request during the sleep(). * * @param $name *   The name of the lock. * @param $delay *   The maximum number of seconds to wait, as an integer. * @return *   TRUE if the lock holds, FALSE if it is available. */function lock_wait($name, $delay = 30) {  while ($delay--) {    // This function should only be called by a request that failed to get a    // lock, so we sleep first to give the parallel request a chance to finish    // and release the lock.    sleep(1);    if (lock_may_be_available($name)) {      // No longer need to wait.      return FALSE;    }  }  // The caller must still wait longer to get the lock.  return TRUE;}/** * Release a lock previously acquired by lock_acquire(). * * This will release the named lock if it is still held by the current request. * * @param $name *   The name of the lock. */function lock_release($name) {  global $locks;  unset($locks[$name]);  db_query("DELETE FROM {semaphore} WHERE name = '%s' AND value = '%s'", $name, _lock_id());}/** * Release all previously acquired locks. */function lock_release_all($lock_id = NULL) {  global $locks;  $locks = array();  if (empty($lock_id)) {    $lock_id = _lock_id();  }  db_query("DELETE FROM {semaphore} WHERE value = '%s'", _lock_id());}/** * @} End of "defgroup locks". */
<?php// $Id$/** * @file node.tpl.php * * Theme implementation to display a node. * * Available variables: * - $title: the (sanitized) title of the node. * - $content: Node body or teaser depending on $teaser flag. * - $picture: The authors picture of the node output from *   theme_user_picture(). * - $date: Formatted creation date (use $created to reformat with *   format_date()). * - $links: Themed links like "Read more", "Add new comment", etc. output *   from theme_links(). * - $name: Themed username of node author output from theme_username(). * - $node_url: Direct url of the current node. * - $terms: the themed list of taxonomy term links output from theme_links(). * - $submitted: themed submission information output from *   theme_node_submitted(). * * Other variables: * - $node: Full node object. Contains data that may not be safe. * - $type: Node type, i.e. story, page, blog, etc. * - $comment_count: Number of comments attached to the node. * - $uid: User ID of the node author. * - $created: Time the node was published formatted in Unix timestamp. * - $zebra: Outputs either "even" or "odd". Useful for zebra striping in *   teaser listings. * - $id: Position of the node. Increments each time it's output. * * Node status variables: * - $teaser: Flag for the teaser state. * - $page: Flag for the full page state. * - $promote: Flag for front page promotion state. * - $sticky: Flags for sticky post setting. * - $status: Flag for published status. * - $comment: State of comment settings for the node. * - $readmore: Flags true if the teaser content of the node cannot hold the *   main body content. * - $is_front: Flags true when presented in the front page. * - $logged_in: Flags true when the current user is a logged-in member. * - $is_admin: Flags true when the current user is an administrator. * * @see template_preprocess() * @see template_preprocess_node() */?><div id="node-<?php print $node->nid; ?>" class="node<?php if ($sticky) { print ' sticky'; } ?><?php if (!$status) { print ' node-unpublished'; } ?> clear-block"><?php print $picture ?><?php if (!$page): ?>  <h2><a href="<?php print $node_url ?>" title="<?php print $title ?>"><?php print $title ?></a></h2><?php endif; ?>  <div class="meta">  <?php if ($submitted): ?>    <span class="submitted"><?php print $submitted ?></span>  <?php endif; ?>  <?php if ($terms): ?>    <div class="terms terms-inline"><?php print $terms ?></div>  <?php endif;?>  </div>  <div class="content">    <?php print $content ?>  </div>  <?php print $links; ?></div>
<?php// $Id$/** * Form API callback to validate the upload settings form. */function upload_admin_settings_validate($form, &$form_state) {  if (($form_state['values']['upload_max_resolution'] != '0')) {    if (!preg_match('/^[0-9]+x[0-9]+$/', $form_state['values']['upload_max_resolution'])) {      form_set_error('upload_max_resolution', t('The maximum allowed image size expressed as WIDTHxHEIGHT (e.g. 640x480). Set to 0 for no restriction.'));    }  }  $default_uploadsize = $form_state['values']['upload_uploadsize_default'];  $default_usersize = $form_state['values']['upload_usersize_default'];  $exceed_max_msg = t('Your PHP settings limit the maximum file size per upload to %size.', array('%size' => format_size(file_upload_max_size()))) .'<br/>';  $more_info = t("Depending on your server environment, these settings may be changed in the system-wide php.ini file, a php.ini file in your Drupal root directory, in your Drupal site's settings.php file, or in the .htaccess file in your Drupal root directory.");  if (!is_numeric($default_uploadsize) || ($default_uploadsize <= 0)) {    form_set_error('upload_uploadsize_default', t('The %role file size limit must be a number and greater than zero.', array('%role' => t('default'))));  }  if (!is_numeric($default_usersize) || ($default_usersize <= 0)) {    form_set_error('upload_usersize_default', t('The %role file size limit must be a number and greater than zero.', array('%role' => t('default'))));  }  if ($default_uploadsize * 1024 * 1024 > file_upload_max_size()) {    form_set_error('upload_uploadsize_default', $exceed_max_msg . $more_info);    $more_info = '';  }  if ($default_uploadsize > $default_usersize) {    form_set_error('upload_uploadsize_default', t('The %role maximum file size per upload is greater than the total file size allowed per user', array('%role' => t('default'))));  }  foreach ($form_state['values']['roles'] as $rid => $role) {    $uploadsize = $form_state['values']['upload_uploadsize_'. $rid];    $usersize = $form_state['values']['upload_usersize_'. $rid];    if (!is_numeric($uploadsize) || ($uploadsize <= 0)) {      form_set_error('upload_uploadsize_'. $rid, t('The %role file size limit must be a number and greater than zero.', array('%role' => $role)));    }    if (!is_numeric($usersize) || ($usersize <= 0)) {      form_set_error('upload_usersize_'. $rid, t('The %role file size limit must be a number and greater than zero.', array('%role' => $role)));    }    if ($uploadsize * 1024 * 1024 > file_upload_max_size()) {      form_set_error('upload_uploadsize_'. $rid, $exceed_max_msg . $more_info);      $more_info = '';    }    if ($uploadsize > $usersize) {      form_set_error('upload_uploadsize_'. $rid, t('The %role maximum file size per upload is greater than the total file size allowed per user', array('%role' => $role)));    }  }}/** * Menu callback for the upload settings form. */function upload_admin_settings() {  $upload_extensions_default = variable_get('upload_extensions_default', 'jpg jpeg gif png txt doc xls pdf ppt pps odt ods odp');  $upload_uploadsize_default = variable_get('upload_uploadsize_default', 1);  $upload_usersize_default = variable_get('upload_usersize_default', 1);  $form['settings_general'] = array(    '#type' => 'fieldset',    '#title' => t('General settings'),    '#collapsible' => TRUE,  );  $form['settings_general']['upload_max_resolution'] = array(    '#type' => 'textfield',    '#title' => t('Maximum resolution for uploaded images'),    '#default_value' => variable_get('upload_max_resolution', 0),    '#size' => 15,    '#maxlength' => 10,    '#description' => t('The maximum allowed image size (e.g. 640x480). Set to 0 for no restriction. If an <a href="!image-toolkit-link">image toolkit</a> is installed, files exceeding this value will be scaled down to fit.', array('!image-toolkit-link' => url('admin/settings/image-toolkit'))),    '#field_suffix' => '<kbd>'. t('WIDTHxHEIGHT') .'</kbd>'  );  $form['settings_general']['upload_list_default'] = array(    '#type' => 'select',    '#title' => t('List files by default'),    '#default_value' => variable_get('upload_list_default', 1),    '#options' => array(0 => t('No'), 1 => t('Yes')),    '#description' => t('Display attached files when viewing a post.'),  );  $form['settings_general']['upload_extensions_default'] = array(    '#type' => 'textfield',    '#title' => t('Default permitted file extensions'),    '#default_value' => $upload_extensions_default,    '#maxlength' => 255,    '#description' => t('Default extensions that users can upload. Separate extensions with a space and do not include the leading dot.'),  );  $form['settings_general']['upload_uploadsize_default'] = array(    '#type' => 'textfield',    '#title' => t('Default maximum file size per upload'),    '#default_value' => $upload_uploadsize_default,    '#size' => 5,    '#maxlength' => 5,    '#description' => t('The default maximum file size a user can upload. If an image is uploaded and a maximum resolution is set, the size will be checked after the file has been resized.'),    '#field_suffix' => t('MB'),  );  $form['settings_general']['upload_usersize_default'] = array(    '#type' => 'textfield',    '#title' => t('Default total file size per user'),    '#default_value' => $upload_usersize_default,    '#size' => 5,    '#maxlength' => 5,    '#description' => t('The default maximum size of all files a user can have on the site.'),    '#field_suffix' => t('MB'),  );  $form['settings_general']['upload_max_size'] = array('#value' => '<p>'. t('Your PHP settings limit the maximum file size per upload to %size.', array('%size' => format_size(file_upload_max_size()))) .'</p>');  $roles = user_roles(FALSE, 'upload files');  $form['roles'] = array('#type' => 'value', '#value' => $roles);  foreach ($roles as $rid => $role) {    $form['settings_role_'. $rid] = array(      '#type' => 'fieldset',      '#title' => t('Settings for @role', array('@role' => $role)),      '#collapsible' => TRUE,      '#collapsed' => TRUE,    );    $form['settings_role_'. $rid]['upload_extensions_'. $rid] = array(      '#type' => 'textfield',      '#title' => t('Permitted file extensions'),      '#default_value' => variable_get('upload_extensions_'. $rid, $upload_extensions_default),      '#maxlength' => 255,      '#description' => t('Extensions that users in this role can upload. Separate extensions with a space and do not include the leading dot.'),    );    $form['settings_role_'. $rid]['upload_uploadsize_'. $rid] = array(      '#type' => 'textfield',      '#title' => t('Maximum file size per upload'),      '#default_value' => variable_get('upload_uploadsize_'. $rid, $upload_uploadsize_default),      '#size' => 5,      '#maxlength' => 5,      '#description' => t('The maximum size of a file a user can upload. If an image is uploaded and a maximum resolution is set, the size will be checked after the file has been resized.'),      '#field_suffix' => t('MB'),    );    $form['settings_role_'. $rid]['upload_usersize_'. $rid] = array(      '#type' => 'textfield',      '#title' => t('Total file size per user'),      '#default_value' => variable_get('upload_usersize_'. $rid, $upload_usersize_default),      '#size' => 5,      '#maxlength' => 5,      '#description' => t('The maximum size of all files a user can have on the site.'),      '#field_suffix' => t('MB'),    );  }  $form['#validate'] = array('upload_admin_settings_validate');  return system_settings_form($form);}
<?php// $Id$/** * @file * Content administration and module settings UI. *//** * Menu callback; presents general node configuration options. */function node_configure() {  $status = '<p>'. t('If the site is experiencing problems with permissions to content, you may have to rebuild the permissions cache. Possible causes for permission problems are disabling modules or configuration changes to permissions. Rebuilding will remove all privileges to posts, and replace them with permissions based on the current modules and settings.') .'</p>';  $status .= '<p>'. t('Rebuilding may take some time if there is a lot of content or complex permission settings. After rebuilding has completed posts will automatically use the new permissions.') .'</p>';  $form['access'] = array(    '#type' => 'fieldset',    '#title' => t('Node access status'),  );  $form['access']['status'] = array('#value' => $status);  $form['access']['rebuild'] = array(    '#type' => 'submit',    '#value' => t('Rebuild permissions'),    '#submit' => array('node_configure_access_submit'),  );  $form['default_nodes_main'] = array(    '#type' => 'select', '#title' => t('Number of posts on main page'), '#default_value' => variable_get('default_nodes_main', 10),    '#options' => drupal_map_assoc(array(1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 15, 20, 25, 30)),    '#description' => t('The default maximum number of posts to display per page on overview pages such as the main page.')  );  $form['teaser_length'] = array(    '#type' => 'select', '#title' => t('Length of trimmed posts'), '#default_value' => variable_get('teaser_length', 600),    '#options' => array(      0 => t('Unlimited'),      200 => t('200 characters'),      400 => t('400 characters'),      600 => t('600 characters'),      800 => t('800 characters'),      1000 => t('1000 characters'),      1200 => t('1200 characters'),      1400 => t('1400 characters'),      1600 => t('1600 characters'),      1800 => t('1800 characters'),      2000 => t('2000 characters'),    ),    '#description' => t("The maximum number of characters used in the trimmed version of a post. Drupal will use this setting to determine at which offset long posts should be trimmed. The trimmed version of a post is typically used as a teaser when displaying the post on the main page, in XML feeds, etc. To disable teasers, set to 'Unlimited'. Note that this setting will only affect new or updated content and will not affect existing teasers.")  );  $form['node_preview'] = array(    '#type' => 'radios',    '#title' => t('Preview post'),    '#default_value' => variable_get('node_preview', 0),    '#options' => array(t('Optional'), t('Required')),    '#description' => t('Must users preview posts before submitting?'),  );  return system_settings_form($form);}/** * Form button submit callback. */function node_configure_access_submit($form, &$form_state) {  $form_state['redirect'] = 'admin/content/node-settings/rebuild';}/** * Menu callback: confirm rebuilding of permissions. */function node_configure_rebuild_confirm() {  return confirm_form(array(), t('Are you sure you want to rebuild the permissions on site content?'),                  'admin/content/node-settings', t('This action rebuilds all permissions on site content, and may be a lengthy process. This action cannot be undone.'), t('Rebuild permissions'), t('Cancel'));}/** * Handler for wipe confirmation */function node_configure_rebuild_confirm_submit($form, &$form_state) {  node_access_rebuild(TRUE);  $form_state['redirect'] = 'admin/content/node-settings';}/** * Implementation of hook_node_operations(). */function node_node_operations() {  $operations = array(    'publish' => array(      'label' => t('Publish'),      'callback' => 'node_mass_update',      'callback arguments' => array('updates' => array('status' => 1)),    ),    'unpublish' => array(      'label' => t('Unpublish'),      'callback' => 'node_mass_update',      'callback arguments' => array('updates' => array('status' => 0)),    ),    'promote' => array(      'label' => t('Promote to front page'),      'callback' => 'node_mass_update',      'callback arguments' => array('updates' => array('status' => 1, 'promote' => 1)),    ),    'demote' => array(      'label' => t('Demote from front page'),      'callback' => 'node_mass_update',      'callback arguments' => array('updates' => array('promote' => 0)),    ),    'sticky' => array(      'label' => t('Make sticky'),      'callback' => 'node_mass_update',      'callback arguments' => array('updates' => array('status' => 1, 'sticky' => 1)),    ),    'unsticky' => array(      'label' => t('Remove stickiness'),      'callback' => 'node_mass_update',      'callback arguments' => array('updates' => array('sticky' => 0)),    ),    'delete' => array(      'label' => t('Delete'),      'callback' => NULL,    ),  );  return $operations;}/** * List node administration filters that can be applied. */function node_filters() {  // Regular filters  $filters['status'] = array(    'title' => t('status'),    'options' => array(      'status-1' => t('published'),      'status-0' => t('not published'),      'promote-1' => t('promoted'),      'promote-0' => t('not promoted'),      'sticky-1' => t('sticky'),      'sticky-0' => t('not sticky'),    ),  );  // Include translation states if we have this module enabled  if (module_exists('translation')) {    $filters['status']['options'] += array(      'translate-0' => t('Up to date translation'),      'translate-1' => t('Outdated translation'),    );  }  $filters['type'] = array('title' => t('type'), 'options' => node_get_types('names'));  // The taxonomy filter  if ($taxonomy = module_invoke('taxonomy', 'form_all', 1)) {    $filters['category'] = array('title' => t('category'), 'options' => $taxonomy);  }  // Language filter if there is a list of languages  if ($languages = module_invoke('locale', 'language_list')) {    $languages = array('' => t('Language neutral')) + $languages;    $filters['language'] = array('title' => t('language'), 'options' => $languages);  }  return $filters;}/** * Build query for node administration filters based on session. */function node_build_filter_query() {  $filters = node_filters();  // Build query  $where = $args = array();  $join = '';  foreach ($_SESSION['node_overview_filter'] as $index => $filter) {    list($key, $value) = $filter;    switch ($key) {      case 'status':        // Note: no exploitable hole as $key/$value have already been checked when submitted        list($key, $value) = explode('-', $value, 2);        $where[] = 'n.'. $key .' = %d';        break;      case 'category':        $table = "tn$index";        $where[] = "$table.tid = %d";        $join .= "INNER JOIN {term_node} $table ON n.nid = $table.nid ";        break;      case 'type':        $where[] = "n.type = '%s'";        break;      case 'language':        $where[] = "n.language = '%s'";        break;    }    $args[] = $value;  }  $where = count($where) ? 'WHERE '. implode(' AND ', $where) : '';  return array('where' => $where, 'join' => $join, 'args' => $args);}/** * Return form for node administration filters. */function node_filter_form() {  $session = &$_SESSION['node_overview_filter'];  $session = is_array($session) ? $session : array();  $filters = node_filters();  $i = 0;  $form['filters'] = array(    '#type' => 'fieldset',    '#title' => t('Show only items where'),    '#theme' => 'node_filters',  );  $form['#submit'][] = 'node_filter_form_submit';  foreach ($session as $filter) {    list($type, $value) = $filter;    if ($type == 'category') {      // Load term name from DB rather than search and parse options array.      $value = module_invoke('taxonomy', 'get_term', $value);      $value = $value->name;    }    else if ($type == 'language') {      $value = empty($value) ? t('Language neutral') : module_invoke('locale', 'language_name', $value);    }    else {      $value = $filters[$type]['options'][$value];    }    if ($i++) {      $form['filters']['current'][] = array('#value' => t('<em>and</em> where <strong>%a</strong> is <strong>%b</strong>', array('%a' => $filters[$type]['title'], '%b' => $value)));    }    else {      $form['filters']['current'][] = array('#value' => t('<strong>%a</strong> is <strong>%b</strong>', array('%a' => $filters[$type]['title'], '%b' => $value)));    }    if (in_array($type, array('type', 'language'))) {      // Remove the option if it is already being filtered on.      unset($filters[$type]);    }  }  foreach ($filters as $key => $filter) {    $names[$key] = $filter['title'];    $form['filters']['status'][$key] = array('#type' => 'select', '#options' => $filter['options']);  }  $form['filters']['filter'] = array('#type' => 'radios', '#options' => $names, '#default_value' => 'status');  $form['filters']['buttons']['submit'] = array('#type' => 'submit', '#value' => (count($session) ? t('Refine') : t('Filter')));  if (count($session)) {    $form['filters']['buttons']['undo'] = array('#type' => 'submit', '#value' => t('Undo'));    $form['filters']['buttons']['reset'] = array('#type' => 'submit', '#value' => t('Reset'));  }  drupal_add_js('misc/form.js', 'core');  return $form;}/** * Theme node administration filter form. * * @ingroup themeable */function theme_node_filter_form($form) {  $output = '';  $output .= '<div id="node-admin-filter">';  $output .= drupal_render($form['filters']);  $output .= '</div>';  $output .= drupal_render($form);  return $output;}/** * Theme node administration filter selector. * * @ingroup themeable */function theme_node_filters($form) {  $output = '';  $output .= '<ul class="clear-block">';  if (!empty($form['current'])) {    foreach (element_children($form['current']) as $key) {      $output .= '<li>'. drupal_render($form['current'][$key]) .'</li>';    }  }  $output .= '<li><dl class="multiselect">'. (!empty($form['current']) ? '<dt><em>'. t('and') .'</em> '. t('where') .'</dt>' : '') .'<dd class="a">';  foreach (element_children($form['filter']) as $key) {    $output .= drupal_render($form['filter'][$key]);  }  $output .= '</dd>';  $output .= '<dt>'. t('is') .'</dt><dd class="b">';  foreach (element_children($form['status']) as $key) {    $output .= drupal_render($form['status'][$key]);  }  $output .= '</dd>';  $output .= '</dl>';  $output .= '<div class="container-inline" id="node-admin-buttons">'. drupal_render($form['buttons']) .'</div>';  $output .= '</li></ul>';  return $output;}/** * Process result from node administration filter form. */function node_filter_form_submit($form, &$form_state) {  $filters = node_filters();  switch ($form_state['values']['op']) {    case t('Filter'):    case t('Refine'):      if (isset($form_state['values']['filter'])) {        $filter = $form_state['values']['filter'];        // Flatten the options array to accommodate hierarchical/nested options.        $flat_options = form_options_flatten($filters[$filter]['options']);        if (isset($flat_options[$form_state['values'][$filter]])) {          $_SESSION['node_overview_filter'][] = array($filter, $form_state['values'][$filter]);        }      }      break;    case t('Undo'):      array_pop($_SESSION['node_overview_filter']);      break;    case t('Reset'):      $_SESSION['node_overview_filter'] = array();      break;  }}/** * Make mass update of nodes, changing all nodes in the $nodes array * to update them with the field values in $updates. * * IMPORTANT NOTE: This function is intended to work when called * from a form submit handler. Calling it outside of the form submission * process may not work correctly. * * @param array $nodes *   Array of node nids to update. * @param array $updates *   Array of key/value pairs with node field names and the *   value to update that field to. */function node_mass_update($nodes, $updates) {  // We use batch processing to prevent timeout when updating a large number  // of nodes.  if (count($nodes) > 10) {    $batch = array(      'operations' => array(        array('_node_mass_update_batch_process', array($nodes, $updates))      ),      'finished' => '_node_mass_update_batch_finished',      'title' => t('Processing'),      // We use a single multi-pass operation, so the default      // 'Remaining x of y operations' message will be confusing here.      'progress_message' => '',      'error_message' => t('The update has encountered an error.'),      // The operations do not live in the .module file, so we need to      // tell the batch engine which file to load before calling them.      'file' => drupal_get_path('module', 'node') .'/node.admin.inc',    );    batch_set($batch);  }  else {    foreach ($nodes as $nid) {      _node_mass_update_helper($nid, $updates);    }    drupal_set_message(t('The update has been performed.'));  }}/** * Node Mass Update - helper function. */function _node_mass_update_helper($nid, $updates) {  $node = node_load($nid, NULL, TRUE);  foreach ($updates as $name => $value) {    $node->$name = $value;  }  node_save($node);  return $node;}/** * Node Mass Update Batch operation */function _node_mass_update_batch_process($nodes, $updates, &$context) {  if (!isset($context['sandbox']['progress'])) {    $context['sandbox']['progress'] = 0;    $context['sandbox']['max'] = count($nodes);    $context['sandbox']['nodes'] = $nodes;  }  // Process nodes by groups of 5.  $count = min(5, count($context['sandbox']['nodes']));  for ($i = 1; $i <= $count; $i++) {    // For each nid, load the node, reset the values, and save it.    $nid = array_shift($context['sandbox']['nodes']);    $node = _node_mass_update_helper($nid, $updates);    // Store result for post-processing in the finished callback.    $context['results'][] = l($node->title, 'node/'. $node->nid);    // Update our progress information.    $context['sandbox']['progress']++;  }  // Inform the batch engine that we are not finished,  // and provide an estimation of the completion level we reached.  if ($context['sandbox']['progress'] != $context['sandbox']['max']) {    $context['finished'] = $context['sandbox']['progress'] / $context['sandbox']['max'];  }}/** * Node Mass Update Batch 'finished' callback. */function _node_mass_update_batch_finished($success, $results, $operations) {  if ($success) {    drupal_set_message(t('The update has been performed.'));  }  else {    drupal_set_message(t('An error occurred and processing did not complete.'), 'error');    $message = format_plural(count($results), '1 item successfully processed:', '@count items successfully processed:');    $message .= theme('item_list', $results);    drupal_set_message($message);  }}/** * Menu callback: content administration. */function node_admin_content($form_state) {  if (isset($form_state['values']['operation']) && $form_state['values']['operation'] == 'delete') {    return node_multiple_delete_confirm($form_state, array_filter($form_state['values']['nodes']));  }  $form = node_filter_form();  $form['#theme'] = 'node_filter_form';  $form['admin']  = node_admin_nodes();  return $form;}/** * Form builder: Builds the node administration overview. */function node_admin_nodes() {  $filter = node_build_filter_query();  $result = pager_query(db_rewrite_sql('SELECT n.*, u.name FROM {node} n '. $filter['join'] .' INNER JOIN {users} u ON n.uid = u.uid '. $filter['where'] .' ORDER BY n.changed DESC'), 50, 0, NULL, $filter['args']);  // Enable language column if locale is enabled or if we have any node with language  $count = db_result(db_query("SELECT COUNT(*) FROM {node} n WHERE language != ''"));  $multilanguage = (module_exists('locale') || $count);  $form['options'] = array(    '#type' => 'fieldset',    '#title' => t('Update options'),    '#prefix' => '<div class="container-inline">',    '#suffix' => '</div>',  );  $options = array();  foreach (module_invoke_all('node_operations') as $operation => $array) {    $options[$operation] = $array['label'];  }  $form['options']['operation'] = array(    '#type' => 'select',    '#options' => $options,    '#default_value' => 'approve',  );  $form['options']['submit'] = array(    '#type' => 'submit',    '#value' => t('Update'),    '#submit' => array('node_admin_nodes_submit'),  );  $languages = language_list();  $destination = drupal_get_destination();  $nodes = array();  while ($node = db_fetch_object($result)) {    $nodes[$node->nid] = '';    $options = empty($node->language) ? array() : array('language' => $languages[$node->language]);    $form['title'][$node->nid] = array('#value' => l($node->title, 'node/'. $node->nid, $options) .' '. theme('mark', node_mark($node->nid, $node->changed)));    $form['name'][$node->nid] =  array('#value' => check_plain(node_get_types('name', $node)));    $form['username'][$node->nid] = array('#value' => theme('username', $node));    $form['status'][$node->nid] =  array('#value' => ($node->status ? t('published') : t('not published')));    if ($multilanguage) {      $form['language'][$node->nid] = array('#value' => empty($node->language) ? t('Language neutral') : t($languages[$node->language]->name));    }    $form['operations'][$node->nid] = array('#value' => l(t('edit'), 'node/'. $node->nid .'/edit', array('query' => $destination)));  }  $form['nodes'] = array('#type' => 'checkboxes', '#options' => $nodes);  $form['pager'] = array('#value' => theme('pager', NULL, 50, 0));  $form['#theme'] = 'node_admin_nodes';  return $form;}/** * Validate node_admin_nodes form submissions. *  * Check if any nodes have been selected to perform the chosen * 'Update option' on. */function node_admin_nodes_validate($form, &$form_state) {  $nodes = array_filter($form_state['values']['nodes']);  if (count($nodes) == 0) {    form_set_error('', t('No items selected.'));  }}/** * Process node_admin_nodes form submissions. *  * Execute the chosen 'Update option' on the selected nodes. */function node_admin_nodes_submit($form, &$form_state) {  $operations = module_invoke_all('node_operations');  $operation = $operations[$form_state['values']['operation']];  // Filter out unchecked nodes  $nodes = array_filter($form_state['values']['nodes']);  if ($function = $operation['callback']) {    // Add in callback arguments if present.    if (isset($operation['callback arguments'])) {      $args = array_merge(array($nodes), $operation['callback arguments']);    }    else {      $args = array($nodes);    }    call_user_func_array($function, $args);    cache_clear_all();  }  else {    // We need to rebuild the form to go to a second step.  For example, to    // show the confirmation form for the deletion of nodes.    $form_state['rebuild'] = TRUE;  }}/** * Theme node administration overview. * * @ingroup themeable */function theme_node_admin_nodes($form) {  // If there are rows in this form, then $form['title'] contains a list of  // the title form elements.  $has_posts = isset($form['title']) && is_array($form['title']);  $select_header = $has_posts ? theme('table_select_header_cell') : '';  $header = array($select_header, t('Title'), t('Type'), t('Author'), t('Status'));  if (isset($form['language'])) {    $header[] = t('Language');  }  $header[] = t('Operations');  $output = '';  $output .= drupal_render($form['options']);  if ($has_posts) {    foreach (element_children($form['title']) as $key) {      $row = array();      $row[] = drupal_render($form['nodes'][$key]);      $row[] = drupal_render($form['title'][$key]);      $row[] = drupal_render($form['name'][$key]);      $row[] = drupal_render($form['username'][$key]);      $row[] = drupal_render($form['status'][$key]);      if (isset($form['language'])) {        $row[] = drupal_render($form['language'][$key]);      }      $row[] = drupal_render($form['operations'][$key]);      $rows[] = $row;    }  }  else {    $rows[] = array(array('data' => t('No posts available.'), 'colspan' => '6'));  }  $output .= theme('table', $header, $rows);  if ($form['pager']['#value']) {    $output .= drupal_render($form['pager']);  }  $output .= drupal_render($form);  return $output;}function node_multiple_delete_confirm(&$form_state, $nodes) {  $form['nodes'] = array('#prefix' => '<ul>', '#suffix' => '</ul>', '#tree' => TRUE);  // array_filter returns only elements with TRUE values  foreach ($nodes as $nid => $value) {    $title = db_result(db_query('SELECT title FROM {node} WHERE nid = %d', $nid));    $form['nodes'][$nid] = array(      '#type' => 'hidden',      '#value' => $nid,      '#prefix' => '<li>',      '#suffix' => check_plain($title) ."</li>\n",    );  }  $form['operation'] = array('#type' => 'hidden', '#value' => 'delete');  $form['#submit'][] = 'node_multiple_delete_confirm_submit';  return confirm_form($form,                      t('Are you sure you want to delete these items?'),                      'admin/content/node', t('This action cannot be undone.'),                      t('Delete all'), t('Cancel'));}function node_multiple_delete_confirm_submit($form, &$form_state) {  if ($form_state['values']['confirm']) {    foreach ($form_state['values']['nodes'] as $nid => $value) {      node_delete($nid);    }    drupal_set_message(t('The items have been deleted.'));  }  $form_state['redirect'] = 'admin/content/node';  return;}
<?php// $Id$/** * @file maintenance-page.tpl.php * * Theme implementation to display a single Drupal page while off-line. * * All the available variables are mirrored in page.tpl.php. Some may be left * blank but they are provided for consistency. * * * @see template_preprocess() * @see template_preprocess_maintenance_page() */?><!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.0 Strict//EN"  "http://www.w3.org/TR/xhtml1/DTD/xhtml1-strict.dtd"><html xmlns="http://www.w3.org/1999/xhtml" xml:lang="<?php print $language->language ?>" lang="<?php print $language->language ?>" dir="<?php print $language->dir ?>"><head>  <?php print $head; ?>  <title><?php print $head_title; ?></title>  <?php print $styles; ?>  <?php print $scripts; ?>  <script type="text/javascript"><?php /* Needed to avoid Flash of Unstyled Content in IE */ ?> </script></head><body class="<?php print $body_classes; ?>">  <div id="page">    <div id="header">      <div id="logo-title">        <?php if (!empty($logo)): ?>          <a href="<?php print $base_path; ?>" title="<?php print t('Home'); ?>" rel="home" id="logo">            <img src="<?php print $logo; ?>" alt="<?php print t('Home'); ?>" />          </a>        <?php endif; ?>        <div id="name-and-slogan">          <?php if (!empty($site_name)): ?>            <h1 id="site-name">              <a href="<?php print $base_path ?>" title="<?php print t('Home'); ?>" rel="home"><span><?php print $site_name; ?></span></a>            </h1>          <?php endif; ?>          <?php if (!empty($site_slogan)): ?>            <div id="site-slogan"><?php print $site_slogan; ?></div>          <?php endif; ?>        </div> <!-- /name-and-slogan -->      </div> <!-- /logo-title -->      <?php if (!empty($header)): ?>        <div id="header-region">          <?php print $header; ?>        </div>      <?php endif; ?>    </div> <!-- /header -->    <div id="container" class="clear-block">      <?php if (!empty($left)): ?>        <div id="sidebar-left" class="column sidebar">          <?php print $left; ?>        </div> <!-- /sidebar-left -->      <?php endif; ?>      <div id="main" class="column"><div id="main-squeeze">        <div id="content">          <?php if (!empty($title)): ?><h1 class="title" id="page-title"><?php print $title; ?></h1><?php endif; ?>          <?php if (!empty($messages)): print $messages; endif; ?>          <div id="content-content" class="clear-block">            <?php print $content; ?>          </div> <!-- /content-content -->        </div> <!-- /content -->      </div></div> <!-- /main-squeeze /main -->      <?php if (!empty($right)): ?>        <div id="sidebar-right" class="column sidebar">          <?php print $right; ?>        </div> <!-- /sidebar-right -->      <?php endif; ?>    </div> <!-- /container -->    <div id="footer-wrapper">      <div id="footer">        <?php print $footer_message; ?>        <?php if (!empty($footer)): print $footer; endif; ?>      </div> <!-- /footer -->    </div> <!-- /footer-wrapper -->  </div> <!-- /page --></body></html>
<?php// $Id$/** * @file * Support for configurable user profiles. *//** * Private field, content only available to privileged users. */define('PROFILE_PRIVATE', 1);/** * Public field, content shown on profile page but not used on member list pages. */define('PROFILE_PUBLIC', 2);/** * Public field, content shown on profile page and on member list pages. */define('PROFILE_PUBLIC_LISTINGS', 3);/** * Hidden profile field, only accessible by administrators, modules and themes. */define('PROFILE_HIDDEN', 4);/** * Implementation of hook_help(). */function profile_help($path, $arg) {  switch ($path) {    case 'admin/help#profile':      $output = '<p>'. t('The profile module allows custom fields (such as country, full name, or age) to be defined and displayed in the <em>My Account</em> section. This permits users of a site to share more information about themselves, and can help community-based sites organize users around specific information.') .'</p>';      $output .= '<p>'. t('The following types of fields can be added to a user profile:') .'</p>';      $output .= '<ul><li>'. t('single-line textfield') .'</li>';      $output .= '<li>'. t('multi-line textfield') .'</li>';      $output .= '<li>'. t('checkbox') .'</li>';      $output .= '<li>'. t('list selection') .'</li>';      $output .= '<li>'. t('freeform list') .'</li>';      $output .= '<li>'. t('URL') .'</li>';      $output .= '<li>'. t('date') .'</li></ul>';      $output .= '<p>'. t('For more information, see the online handbook entry for <a href="@profile">Profile module</a>.', array('@profile' => 'http://drupal.org/handbook/modules/profile/')) .'</p>';      return $output;    case 'admin/user/profile':      return '<p>'. t("This page displays a list of the existing custom profile fields to be displayed on a user's <em>My Account</em> page. To provide structure, similar or related fields may be placed inside a category. To add a new category (or edit an existing one), edit a profile field and provide a new category name. To change the category of a field or the order of fields within a category, grab a drag-and-drop handle under the Title column and drag the field to a new location in the list. (Grab a handle by clicking and holding the mouse while hovering over a handle icon.) Remember that your changes will not be saved until you click the <em>Save configuration</em> button at the bottom of the page.") .'</p>';  }}/** * Implementation of hook_theme() */function profile_theme() {  return array(    'profile_block' => array(      'arguments' => array('account' => NULL, 'fields' => array()),      'template' => 'profile-block',    ),    'profile_listing' => array(      'arguments' => array('account' => NULL, 'fields' => array()),      'template' => 'profile-listing',    ),    'profile_wrapper' => array(      'arguments' => array('content' => NULL),      'template' => 'profile-wrapper',    ),    'profile_admin_overview' => array(      'arguments' => array('form' => NULL),      'file' => 'profile.admin.inc',    )  );}/** * Implementation of hook_menu(). */function profile_menu() {  $items['profile'] = array(    'title' => 'User list',    'page callback' => 'profile_browse',    'access arguments' => array('access user profiles'),    'type' => MENU_SUGGESTED_ITEM,    'file' => 'profile.pages.inc',  );  $items['admin/user/profile'] = array(    'title' => 'Profiles',    'description' => 'Create customizable fields for your users.',    'page callback' => 'drupal_get_form',    'page arguments' => array('profile_admin_overview'),    'access arguments' => array('administer users'),    'file' => 'profile.admin.inc',  );  $items['admin/user/profile/add'] = array(    'title' => 'Add field',    'page callback' => 'drupal_get_form',    'page arguments' => array('profile_field_form'),    'access arguments' => array('administer users'),    'type' => MENU_CALLBACK,    'file' => 'profile.admin.inc',  );  $items['admin/user/profile/autocomplete'] = array(    'title' => 'Profile category autocomplete',    'page callback' => 'profile_admin_settings_autocomplete',    'access arguments' => array('administer users'),    'type' => MENU_CALLBACK,    'file' => 'profile.admin.inc',  );  $items['admin/user/profile/edit'] = array(    'title' => 'Edit field',    'page callback' => 'drupal_get_form',    'page arguments' => array('profile_field_form'),    'access arguments' => array('administer users'),    'type' => MENU_CALLBACK,    'file' => 'profile.admin.inc',  );  $items['admin/user/profile/delete'] = array(    'title' => 'Delete field',    'page callback' => 'drupal_get_form',    'page arguments' => array('profile_field_delete'),    'access arguments' => array('administer users'),    'type' => MENU_CALLBACK,    'file' => 'profile.admin.inc',  );  $items['profile/autocomplete'] = array(    'title' => 'Profile autocomplete',    'page callback' => 'profile_autocomplete',    'access arguments' => array('access user profiles'),    'type' => MENU_CALLBACK,    'file' => 'profile.pages.inc',  );  return $items;}/** * Implementation of hook_block(). */function profile_block($op = 'list', $delta = 0, $edit = array()) {  if ($op == 'list') {    $blocks[0]['info'] = t('Author information');    $blocks[0]['cache'] = BLOCK_CACHE_PER_PAGE | BLOCK_CACHE_PER_ROLE;    return $blocks;  }  else if ($op == 'configure' && $delta == 0) {    // Compile a list of fields to show    $fields = array();    $result = db_query('SELECT name, title, weight, visibility FROM {profile_fields} WHERE visibility IN (%d, %d) ORDER BY weight', PROFILE_PUBLIC, PROFILE_PUBLIC_LISTINGS);    while ($record = db_fetch_object($result)) {      $fields[$record->name] = check_plain($record->title);    }    $fields['user_profile'] = t('Link to full user profile');    $form['profile_block_author_fields'] = array('#type' => 'checkboxes',      '#title' => t('Profile fields to display'),      '#default_value' => variable_get('profile_block_author_fields', array()),      '#options' => $fields,      '#description' => t('Select which profile fields you wish to display in the block. Only fields designated as public in the <a href="@profile-admin">profile field configuration</a> are available.', array('@profile-admin' => url('admin/user/profile'))),    );    return $form;  }  else if ($op == 'save' && $delta == 0) {    variable_set('profile_block_author_fields', $edit['profile_block_author_fields']);  }  else if ($op == 'view') {    if (user_access('access user profiles')) {      $output = '';      if ((arg(0) == 'node') && is_numeric(arg(1)) && (arg(2) == NULL)) {        $node = node_load(arg(1));        $account = user_load(array('uid' => $node->uid));        if ($use_fields = variable_get('profile_block_author_fields', array())) {          // Compile a list of fields to show.          $fields = array();          $result = db_query('SELECT name, title, type, visibility, weight FROM {profile_fields} WHERE visibility IN (%d, %d) ORDER BY weight', PROFILE_PUBLIC, PROFILE_PUBLIC_LISTINGS);          while ($record = db_fetch_object($result)) {            // Ensure that field is displayed only if it is among the defined block fields and, if it is private, the user has appropriate permissions.            if (isset($use_fields[$record->name]) && $use_fields[$record->name]) {              $fields[] = $record;            }          }        }        if (!empty($fields)) {          $profile = _profile_update_user_fields($fields, $account);          $output .= theme('profile_block', $account, $profile, TRUE);        }        if (isset($use_fields['user_profile']) && $use_fields['user_profile']) {          $output .= '<div>'. l(t('View full user profile'), 'user/'. $account->uid) .'</div>';        }      }      if ($output) {        $block['subject'] = t('About %name', array('%name' => $account->name));        $block['content'] = $output;        return $block;      }    }  }}/** * Implementation of hook_user(). */function profile_user($type, &$edit, &$user, $category = NULL) {  switch ($type) {    case 'load':      return profile_load_profile($user);    case 'register':      return profile_form_profile($edit, $user, $category, TRUE);    case 'update':    return profile_save_profile($edit, $user, $category);    case 'insert':      return profile_save_profile($edit, $user, $category, TRUE);    case 'view':      return profile_view_profile($user);    case 'form':      return profile_form_profile($edit, $user, $category);    case 'validate':      return profile_validate_profile($edit, $category);    case 'categories':      return profile_categories();    case 'delete':      db_query('DELETE FROM {profile_values} WHERE uid = %d', $user->uid);  }}function profile_load_profile(&$user) {  $result = db_query('SELECT f.name, f.type, v.value FROM {profile_fields} f INNER JOIN {profile_values} v ON f.fid = v.fid WHERE uid = %d', $user->uid);  while ($field = db_fetch_object($result)) {    if (empty($user->{$field->name})) {      $user->{$field->name} = _profile_field_serialize($field->type) ? unserialize($field->value) : $field->value;    }  }}function profile_save_profile(&$edit, &$user, $category, $register = FALSE) {  $result = _profile_get_fields($category, $register);  while ($field = db_fetch_object($result)) {    if (_profile_field_serialize($field->type)) {      $edit[$field->name] = serialize($edit[$field->name]);    }    db_query("DELETE FROM {profile_values} WHERE fid = %d AND uid = %d", $field->fid, $user->uid);    db_query("INSERT INTO {profile_values} (fid, uid, value) VALUES (%d, %d, '%s')", $field->fid, $user->uid, $edit[$field->name]);    // Mark field as handled (prevents saving to user->data).    $edit[$field->name] = NULL;  }}function profile_view_field($user, $field) {  // Only allow browsing of private fields for admins, if browsing is enabled,  // and if a user has permission to view profiles. Note that this check is  // necessary because a user may always see their own profile.  $browse = user_access('access user profiles')         && (user_access('administer users') || $field->visibility != PROFILE_PRIVATE)         && !empty($field->page);  if (isset($user->{$field->name}) && $value = $user->{$field->name}) {    switch ($field->type) {      case 'textarea':        return check_markup($value);      case 'textfield':      case 'selection':        return $browse ? l($value, 'profile/'. $field->name .'/'. $value) : check_plain($value);      case 'checkbox':        return $browse ? l($field->title, 'profile/'. $field->name) : check_plain($field->title);      case 'url':        return '<a href="'. check_url($value) .'">'. check_plain($value) .'</a>';      case 'date':        $format = substr(variable_get('date_format_short', 'm/d/Y - H:i'), 0, 5);        // Note: Avoid PHP's date() because it does not handle dates before        // 1970 on Windows. This would make the date field useless for e.g.        // birthdays.        $replace = array(          'd' => sprintf('%02d', $value['day']),          'j' => $value['day'],          'm' => sprintf('%02d', $value['month']),          'M' => map_month($value['month']),          'Y' => $value['year'],          'H:i' => NULL,          'g:ia' => NULL,        );        return strtr($format, $replace);      case 'list':        $values = split("[,\n\r]", $value);        $fields = array();        foreach ($values as $value) {          if ($value = trim($value)) {            $fields[] = $browse ? l($value, 'profile/'. $field->name .'/'. $value) : check_plain($value);          }        }        return implode(', ', $fields);    }  }}function profile_view_profile(&$user) {  profile_load_profile($user);  // Show private fields to administrators and people viewing their own account.  if (user_access('administer users') || $GLOBALS['user']->uid == $user->uid) {    $result = db_query('SELECT * FROM {profile_fields} WHERE visibility != %d ORDER BY category, weight', PROFILE_HIDDEN);  }  else {    $result = db_query('SELECT * FROM {profile_fields} WHERE visibility != %d AND visibility != %d ORDER BY category, weight', PROFILE_PRIVATE, PROFILE_HIDDEN);  }  $fields = array();  while ($field = db_fetch_object($result)) {    if ($value = profile_view_field($user, $field)) {      $title = ($field->type != 'checkbox') ? check_plain($field->title) : NULL;      // Create a single fieldset for each category.      if (!isset($user->content[$field->category])) {        $user->content[$field->category] = array(          '#type' => 'user_profile_category',          '#title' => $field->category,        );      }      $user->content[$field->category][$field->name] = array(        '#type' => 'user_profile_item',        '#title' => $title,        '#value' => $value,        '#weight' => $field->weight,        '#attributes' => array('class' => 'profile-'. $field->name),      );    }  }}function _profile_form_explanation($field) {  $output = $field->explanation;  if ($field->type == 'list') {    $output .= ' '. t('Put each item on a separate line or separate them by commas. No HTML allowed.');  }  if ($field->visibility == PROFILE_PRIVATE) {    $output .= ' '. t('The content of this field is kept private and will not be shown publicly.');  }  return $output;}function profile_form_profile($edit, $user, $category, $register = FALSE) {  $result = _profile_get_fields($category, $register);  $weight = 1;  $fields = array();  while ($field = db_fetch_object($result)) {    $category = $field->category;    if (!isset($fields[$category])) {      $fields[$category] = array('#type' => 'fieldset', '#title' => check_plain($category), '#weight' => $weight++);    }    switch ($field->type) {      case 'textfield':      case 'url':        $fields[$category][$field->name] = array('#type' => 'textfield',          '#title' => check_plain($field->title),          '#default_value' => isset($edit[$field->name]) ? $edit[$field->name] : '',          '#maxlength' => 255,          '#description' => _profile_form_explanation($field),          '#required' => $field->required,        );        if ($field->autocomplete) {          $fields[$category][$field->name]['#autocomplete_path'] = "profile/autocomplete/". $field->fid;        }        break;      case 'textarea':        $fields[$category][$field->name] = array('#type' => 'textarea',          '#title' => check_plain($field->title),          '#default_value' => isset($edit[$field->name]) ? $edit[$field->name] : '',          '#description' => _profile_form_explanation($field),          '#required' => $field->required,        );        break;      case 'list':        $fields[$category][$field->name] = array('#type' => 'textarea',          '#title' => check_plain($field->title),          '#default_value' => isset($edit[$field->name]) ? $edit[$field->name] : '',          '#description' => _profile_form_explanation($field),          '#required' => $field->required,        );        break;      case 'checkbox':        $fields[$category][$field->name] = array('#type' => 'checkbox',          '#title' => check_plain($field->title),          '#default_value' => isset($edit[$field->name]) ? $edit[$field->name] : '',          '#description' => _profile_form_explanation($field),          '#required' => $field->required,        );        break;      case 'selection':        $options = $field->required ? array() : array('--');        $lines = split("[\n\r]", $field->options);        foreach ($lines as $line) {          if ($line = trim($line)) {            $options[$line] = $line;          }        }        $fields[$category][$field->name] = array('#type' => 'select',          '#title' => check_plain($field->title),          '#default_value' => isset($edit[$field->name]) ? $edit[$field->name] : '',          '#options' => $options,          '#description' => _profile_form_explanation($field),          '#required' => $field->required,        );        break;      case 'date':        $fields[$category][$field->name] = array('#type' => 'date',          '#title' => check_plain($field->title),          '#default_value' => isset($edit[$field->name]) ? $edit[$field->name] : '',          '#description' => _profile_form_explanation($field),          '#required' => $field->required,        );        break;    }  }  return $fields;}/** * Helper function: update an array of user fields by calling profile_view_field */function _profile_update_user_fields($fields, $account) {  foreach ($fields as $key => $field) {    $fields[$key]->value = profile_view_field($account, $field);  }  return $fields;}function profile_validate_profile($edit, $category) {  $result = _profile_get_fields($category);  while ($field = db_fetch_object($result)) {    if ($edit[$field->name]) {      if ($field->type == 'url') {        if (!valid_url($edit[$field->name], TRUE)) {          form_set_error($field->name, t('The value provided for %field is not a valid URL.', array('%field' => $field->title)));        }      }    }    else if ($field->required && !user_access('administer users')) {      form_set_error($field->name, t('The field %field is required.', array('%field' => $field->title)));    }  }  return $edit;}function profile_categories() {  $result = db_query("SELECT DISTINCT(category) FROM {profile_fields}");  $data = array();  while ($category = db_fetch_object($result)) {    $data[] = array(      'name' => $category->category,      'title' => $category->category,      'weight' => 3,      'access callback' => 'profile_category_access',      'access arguments' => array(1, $category->category)    );  }  return $data;}/** * Menu item access callback - check if a user has access to a profile category. */function profile_category_access($account, $category) {  if (user_access('administer users') && $account->uid > 0) {    return TRUE;  }  else {    return user_edit_access($account) && db_result(db_query("SELECT COUNT(*) FROM {profile_fields} WHERE category = '%s' AND visibility <> %d", $category, PROFILE_HIDDEN));  }}/** * Process variables for profile-block.tpl.php. * * The $variables array contains the following arguments: * - $account * - $fields * * @see profile-block.tpl.php */function template_preprocess_profile_block(&$variables) {  $variables['picture'] = theme('user_picture', $variables['account']);  $variables['profile'] = array();  // Supply filtered version of $fields that have values.  foreach ($variables['fields'] as $field) {    if ($field->value) {      $variables['profile'][$field->name]->title = check_plain($field->title);      $variables['profile'][$field->name]->value = $field->value;      $variables['profile'][$field->name]->type = $field->type;    }  }}/** * Process variables for profile-listing.tpl.php. * * The $variables array contains the following arguments: * - $account * - $fields * * @see profile-listing.tpl.php */function template_preprocess_profile_listing(&$variables) {  $variables['picture'] = theme('user_picture', $variables['account']);  $variables['name'] = theme('username', $variables['account']);  $variables['profile'] = array();  // Supply filtered version of $fields that have values.  foreach ($variables['fields'] as $field) {    if ($field->value) {      $variables['profile'][$field->name]->title = $field->title;      $variables['profile'][$field->name]->value = $field->value;      $variables['profile'][$field->name]->type = $field->type;    }  }}/** * Process variables for profile-wrapper.tpl.php. * * The $variables array contains the following arguments: * - $content * * @see profile-wrapper.tpl.php */function template_preprocess_profile_wrapper(&$variables) {  $variables['current_field'] = '';  if ($field = arg(1)) {    $variables['current_field'] = $field;    // Supply an alternate template suggestion based on the browsable field.    $variables['template_files'][] = 'profile-wrapper-'. $field;  }}function _profile_field_types($type = NULL) {  $types = array('textfield' => t('single-line textfield'),                 'textarea' => t('multi-line textfield'),                 'checkbox' => t('checkbox'),                 'selection' => t('list selection'),                 'list' => t('freeform list'),                 'url' => t('URL'),                 'date' => t('date'));  return isset($type) ? $types[$type] : $types;}function _profile_field_serialize($type = NULL) {  return $type == 'date';}function _profile_get_fields($category, $register = FALSE) {  $args = array();  $sql = 'SELECT * FROM {profile_fields} WHERE ';  $filters = array();  if ($register) {    $filters[] = 'register = 1';  }  else {    // Use LOWER('%s') instead of PHP's strtolower() to avoid UTF-8 conversion issues.    $filters[] = "LOWER(category) = LOWER('%s')";    $args[] = $category;  }  if (!user_access('administer users')) {    $filters[] = 'visibility != %d';    $args[] = PROFILE_HIDDEN;  }  $sql .= implode(' AND ', $filters);  $sql .= ' ORDER BY category, weight';  return db_query($sql, $args);}
<?php// $Id$/** * @file * Content type editing UI. *//** * Displays the content type admin overview page. */function node_overview_types() {  $types = node_get_types();  $names = node_get_types('names');  $header = array(t('Name'), t('Type'), t('Description'), array('data' => t('Operations'), 'colspan' => '2'));  $rows = array();  foreach ($names as $key => $name) {    $type = $types[$key];    if (node_hook($type, 'form')) {      $type_url_str = str_replace('_', '-', $type->type);      $row = array(        l($name, 'admin/content/node-type/'. $type_url_str),        check_plain($type->type),        filter_xss_admin($type->description),      );      // Set the edit column.      $row[] = array('data' => l(t('edit'), 'admin/content/node-type/'. $type_url_str));      // Set the delete column.      if ($type->custom) {        $row[] = array('data' => l(t('delete'), 'admin/content/node-type/'. $type_url_str .'/delete'));      }      else {        $row[] = array('data' => '');      }      $rows[] = $row;    }  }  if (empty($rows)) {    $rows[] = array(array('data' => t('No content types available.'), 'colspan' => '5', 'class' => 'message'));  }  return theme('table', $header, $rows);}/** * Generates the node type editing form. */function node_type_form(&$form_state, $type = NULL) {  if (!isset($type->type)) {    $type = new stdClass();    $type->type = $type->name = $type->module = $type->description = $type->help = '';    $type->min_word_count = 0;    $type->has_title = TRUE;    $type->has_body = TRUE;    $type->title_label = t('Title');    $type->body_label = t('Body');    $type->custom = TRUE;    $type->modified = FALSE;    $type->locked = FALSE;  }  $form['#node_type'] = $type; // Make the type object available to implementations of hook_form_alter.  $form['identity'] = array(    '#type' => 'fieldset',    '#title' => t('Identification'),  );  $form['identity']['name'] = array(    '#title' => t('Name'),    '#type' => 'textfield',    '#default_value' => $type->name,    '#description' => t('The human-readable name of this content type. This text will be displayed as part of the list on the <em>create content</em> page. It is recommended that this name begin with a capital letter and contain only letters, numbers, and <strong>spaces</strong>. This name must be unique.'),    '#required' => TRUE,  );  if (!$type->locked) {    $form['identity']['type'] = array(      '#title' => t('Type'),      '#type' => 'textfield',      '#default_value' => $type->type,      '#maxlength' => 32,      '#required' => TRUE,      '#description' => t('The machine-readable name of this content type. This text will be used for constructing the URL of the <em>create content</em> page for this content type. This name must contain only lowercase letters, numbers, and underscores. Underscores will be converted into hyphens when constructing the URL of the <em>create content</em> page. This name must be unique.'),    );  }  else {    $form['identity']['type'] = array(      '#type' => 'value',      '#value' => $type->type,    );    $form['identity']['type_display'] = array(      '#title' => t('Type'),      '#type' => 'item',      '#value' => theme('placeholder', $type->type),      '#description' => t('The machine-readable name of this content type. This field cannot be modified for system-defined content types.'),    );  }  $form['identity']['description'] = array(    '#title' => t('Description'),    '#type' => 'textarea',    '#default_value' => $type->description,    '#description' => t('A brief description of this content type. This text will be displayed as part of the list on the <em>create content</em> page.'),    );  $form['submission'] = array(    '#type' => 'fieldset',    '#title' => t('Submission form settings'),    '#collapsible' => TRUE,    '#collapsed' => TRUE,  );  $form['submission']['title_label'] = array(    '#title' => t('Title field label'),    '#type' => 'textfield',    '#default_value' => $type->title_label,    '#required' => TRUE,  );  if (!$type->has_title) {    // Avoid overwriting a content type that intentionally does not have a    // title field.    $form['submission']['title_label']['#attributes'] = array('disabled' => 'disabled');    $form['submission']['title_label']['#description'] = t('This content type does not have a title field.');    $form['submission']['title_label']['#required'] = FALSE;  }  $form['submission']['body_label'] = array(    '#title' => t('Body field label'),    '#type' => 'textfield',    '#default_value' => isset($type->body_label) ? $type->body_label : '',    '#description' => t('To omit the body field for this content type, remove any text and leave this field blank.'),  );  $form['submission']['min_word_count'] = array(    '#type' => 'select',    '#title' => t('Minimum number of words'),    '#default_value' => $type->min_word_count,    '#options' => drupal_map_assoc(array(0, 1, 10, 25, 50, 75, 100, 125, 150, 175, 200)),    '#description' => t('The minimum number of words for the body field to be considered valid for this content type. This can be useful to rule out submissions that do not meet the site\'s standards, such as short test posts.')  );  $form['submission']['help']  = array(    '#type' => 'textarea',    '#title' => t('Explanation or submission guidelines'),    '#default_value' => $type->help,    '#description' => t('This text will be displayed at the top of the submission form for this content type. It is useful for helping or instructing your users.')  );  $form['workflow'] = array(    '#type' => 'fieldset',    '#title' => t('Workflow settings'),    '#collapsible' => TRUE,    '#collapsed' => TRUE,  );  $form['workflow']['node_options'] = array('#type' => 'checkboxes',    '#title' => t('Default options'),    '#default_value' => variable_get('node_options_'. $type->type, array('status', 'promote')),    '#options' => array(      'status' => t('Published'),      'promote' => t('Promoted to front page'),      'sticky' => t('Sticky at top of lists'),      'revision' => t('Create new revision'),    ),    '#description' => t('Users with the <em>administer nodes</em> permission will be able to override these options.'),  );  $form['old_type'] = array(    '#type' => 'value',    '#value' => $type->type,  );  $form['orig_type'] = array(    '#type' => 'value',    '#value' => isset($type->orig_type) ? $type->orig_type : '',  );  $form['module'] = array(    '#type' => 'value',    '#value' => $type->module,  );  $form['custom'] = array(    '#type' => 'value',    '#value' => $type->custom,  );  $form['modified'] = array(    '#type' => 'value',    '#value' => $type->modified,  );  $form['locked'] = array(    '#type' => 'value',    '#value' => $type->locked,  );  $form['submit'] = array(    '#type' => 'submit',    '#value' => t('Save content type'),    '#weight' => 40,  );  if ($type->custom) {    if (!empty($type->type)) {      $form['delete'] = array(        '#type' => 'submit',        '#value' => t('Delete content type'),        '#weight' => 45,      );    }  }  else {    $form['reset'] = array(      '#type' => 'submit',      '#value' => t('Reset to defaults'),      '#weight' => 50,    );  }  return $form;}/** * Validates the content type submission form generated by node_type_form(). */function node_type_form_validate($form, &$form_state) {  $type = new stdClass();  $type->type = trim($form_state['values']['type']);  $type->name = trim($form_state['values']['name']);  // Work out what the type was before the user submitted this form  $old_type = trim($form_state['values']['old_type']);  $types = node_get_types('names');  if (!$form_state['values']['locked']) {    if (isset($types[$type->type]) && $type->type != $old_type) {      form_set_error('type', t('The machine-readable name %type is already taken.', array('%type' => $type->type)));    }    if (!preg_match('!^[a-z0-9_]+$!', $type->type)) {      form_set_error('type', t('The machine-readable name must contain only lowercase letters, numbers, and underscores.'));    }    // 'theme' conflicts with theme_node_form().    // '0' is invalid, since elsewhere we check it using empty().    if (in_array($type->type, array('0', 'theme'))) {      form_set_error('type', t("Invalid machine-readable name. Please enter a name other than %invalid.", array('%invalid' => $type->type)));    }  }  $names = array_flip($types);  if (isset($names[$type->name]) && $names[$type->name] != $old_type) {    form_set_error('name', t('The human-readable name %name is already taken.', array('%name' => $type->name)));  }}/** * Implementation of hook_form_submit(). */function node_type_form_submit($form, &$form_state) {  $op = isset($form_state['values']['op']) ? $form_state['values']['op'] : '';  $type = new stdClass();  $type->type = trim($form_state['values']['type']);  $type->name = trim($form_state['values']['name']);  $type->orig_type = trim($form_state['values']['orig_type']);  $type->old_type = isset($form_state['values']['old_type']) ? $form_state['values']['old_type'] : $type->type;  $type->description = $form_state['values']['description'];  $type->help = $form_state['values']['help'];  $type->min_word_count = $form_state['values']['min_word_count'];  $type->title_label = $form_state['values']['title_label'];  $type->body_label = $form_state['values']['body_label'];  // title_label is required in core; has_title will always be true, unless a  // module alters the title field.  $type->has_title = ($type->title_label != '');  $type->has_body = ($type->body_label != '');  $type->module = !empty($form_state['values']['module']) ? $form_state['values']['module'] : 'node';  $type->custom = $form_state['values']['custom'];  $type->modified = TRUE;  $type->locked = $form_state['values']['locked'];  if ($op == t('Reset to defaults')) {    node_type_reset($type);  }  elseif ($op == t('Delete content type')) {    $form_state['redirect'] = 'admin/content/node-type/'. str_replace('_', '-', $type->old_type) .'/delete';    return;  }  $status = node_type_save($type);  $variables = $form_state['values'];  // Remove everything that's been saved already - whatever's left is assumed  // to be a persistent variable.  foreach ($variables as $key => $value) {    if (isset($type->$key)) {      unset($variables[$key]);    }  }  unset($variables['form_token'], $variables['op'], $variables['submit'], $variables['delete'], $variables['reset'], $variables['form_id']);  // Save or reset persistent variable values.  foreach ($variables as $key => $value) {    $variable_new = $key .'_'. $type->type;    $variable_old = $key .'_'. $type->old_type;    if ($op == t('Reset to defaults')) {      variable_del($variable_old);    }    else {      if (is_array($value)) {        $value = array_keys(array_filter($value));      }      variable_set($variable_new, $value);      if ($variable_new != $variable_old) {        variable_del($variable_old);      }    }  }  node_types_rebuild();  menu_rebuild();  $t_args = array('%name' => $type->name);  if ($op == t('Reset to defaults')) {    drupal_set_message(t('The content type %name has been reset to its default values.', $t_args));    return;  }  if ($status == SAVED_UPDATED) {    drupal_set_message(t('The content type %name has been updated.', $t_args));  }  elseif ($status == SAVED_NEW) {    drupal_set_message(t('The content type %name has been added.', $t_args));    watchdog('node', 'Added content type %name.', $t_args, WATCHDOG_NOTICE, l(t('view'), 'admin/content/types'));  }  $form_state['redirect'] = 'admin/content/types';  return;}/** * Implementation of hook_node_type(). */function node_node_type($op, $info) {  if ($op != 'delete' && !empty($info->old_type) && $info->old_type != $info->type) {    $update_count = node_type_update_nodes($info->old_type, $info->type);    if ($update_count) {      drupal_set_message(format_plural($update_count, 'Changed the content type of 1 post from %old-type to %type.', 'Changed the content type of @count posts from %old-type to %type.', array('%old-type' => $info->old_type, '%type' => $info->type)));    }  }}/** * Resets all of the relevant fields of a module-defined node type to their * default values. * * @param &$type *   The node type to reset. The node type is passed back by reference with its *   resetted values. If there is no module-defined info for this node type, *   then nothing happens. */function node_type_reset(&$type) {  $info_array = module_invoke_all('node_info');  if (isset($info_array[$type->orig_type])) {    $info_array[$type->orig_type]['type'] = $type->orig_type;     $info = _node_type_set_defaults($info_array[$type->orig_type]);    foreach ($info as $field => $value) {      $type->$field = $value;    }  }}/** * Menu callback; delete a single content type. */function node_type_delete_confirm(&$form_state, $type) {  $form['type'] = array('#type' => 'value', '#value' => $type->type);  $form['name'] = array('#type' => 'value', '#value' => $type->name);  $message = t('Are you sure you want to delete the content type %type?', array('%type' => $type->name));  $caption = '';  $num_nodes = db_result(db_query("SELECT COUNT(*) FROM {node} WHERE type = '%s'", $type->type));  if ($num_nodes) {    $caption .= '<p>'. format_plural($num_nodes, '<strong>Warning:</strong> there is currently 1 %type post on your site. It may not be able to be displayed or edited correctly, once you have removed this content type.', '<strong>Warning:</strong> there are currently @count %type posts on your site. They may not be able to be displayed or edited correctly, once you have removed this content type.', array('%type' => $type->name)) .'</p>';  }  $caption .= '<p>'. t('This action cannot be undone.') .'</p>';  return confirm_form($form, $message, 'admin/content/types', $caption, t('Delete'));}/** * Process content type delete confirm submissions. */function node_type_delete_confirm_submit($form, &$form_state) {  node_type_delete($form_state['values']['type']);  $t_args = array('%name' => $form_state['values']['name']);  drupal_set_message(t('The content type %name has been deleted.', $t_args));  watchdog('menu', 'Deleted content type %name.', $t_args, WATCHDOG_NOTICE);  node_types_rebuild();  menu_rebuild();  $form_state['redirect'] = 'admin/content/types';  return;}
<?php// $Id$/** * @file * User page callbacks for the tracker module. *//** * Menu callback. Prints a listing of active nodes on the site. */function tracker_page($account = NULL, $set_title = FALSE) {  // Add CSS  drupal_add_css(drupal_get_path('module', 'tracker') .'/tracker.css', 'module', 'all', FALSE);  if ($account) {    if ($set_title) {      // When viewed from user/%user/track, display the name of the user      // as page title -- the tab title remains Track so this needs to be done      // here and not in the menu definiton.      drupal_set_title(check_plain($account->name));    }  // TODO: These queries are very expensive, see http://drupal.org/node/105639    $sql = 'SELECT DISTINCT(n.nid), n.title, n.type, n.changed, n.uid, u.name, GREATEST(n.changed, l.last_comment_timestamp) AS last_updated, l.comment_count FROM {node} n INNER JOIN {node_comment_statistics} l ON n.nid = l.nid INNER JOIN {users} u ON n.uid = u.uid LEFT JOIN {comments} c ON n.nid = c.nid AND (c.status = %d OR c.status IS NULL) WHERE n.status = 1 AND (n.uid = %d OR c.uid = %d) ORDER BY last_updated DESC';    $sql = db_rewrite_sql($sql);    $sql_count = 'SELECT COUNT(DISTINCT(n.nid)) FROM {node} n LEFT JOIN {comments} c ON n.nid = c.nid AND (c.status = %d OR c.status IS NULL) WHERE n.status = 1 AND (n.uid = %d OR c.uid = %d)';    $sql_count = db_rewrite_sql($sql_count);    $result = pager_query($sql, 25, 0, $sql_count, COMMENT_PUBLISHED, $account->uid, $account->uid);  }  else {    $sql = 'SELECT DISTINCT(n.nid), n.title, n.type, n.changed, n.uid, u.name, GREATEST(n.changed, l.last_comment_timestamp) AS last_updated, l.comment_count FROM {node} n INNER JOIN {users} u ON n.uid = u.uid INNER JOIN {node_comment_statistics} l ON n.nid = l.nid WHERE n.status = 1 ORDER BY last_updated DESC';    $sql = db_rewrite_sql($sql);    $sql_count = 'SELECT COUNT(n.nid) FROM {node} n WHERE n.status = 1';    $sql_count = db_rewrite_sql($sql_count);    $result = pager_query($sql, 25, 0, $sql_count);  }  $rows = array();  while ($node = db_fetch_object($result)) {    // Determine the number of comments:    $comments = 0;    if ($node->comment_count) {      $comments = $node->comment_count;      if ($new = comment_num_new($node->nid)) {        $comments .= '<br />';        $comments .= l(format_plural($new, '1 new', '@count new'), "node/$node->nid", array('query' => comment_new_page_count($node->comment_count, $new, $node), 'fragment' => 'new'));      }    }    $rows[] = array(      check_plain(node_get_types('name', $node->type)),      l($node->title, "node/$node->nid") .' '. theme('mark', node_mark($node->nid, $node->changed)),      theme('username', $node),      array('class' => 'replies', 'data' => $comments),      t('!time ago', array('!time' => format_interval(time() - $node->last_updated)))    );  }  if (!$rows) {    $rows[] = array(array('data' => t('No posts available.'), 'colspan' => '5'));  }  $header = array(t('Type'), t('Post'), t('Author'), t('Replies'), t('Last updated'));  $output = '<div id="tracker">';  $output .= theme('table', $header, $rows);  $output .= theme('pager', NULL, 25, 0);  $output .= '</div>';  return $output;}
<?php// $Id$/** * @file * User page callbacks for the contact module. *//** * Site-wide contact page. */function contact_site_page() {  global $user;  if (!flood_is_allowed('contact', variable_get('contact_hourly_threshold', 3))) {    $output = t("You cannot send more than %number messages per hour. Please try again later.", array('%number' => variable_get('contact_hourly_threshold', 3)));  }  else {    $output = drupal_get_form('contact_mail_page');  }  return $output;}function contact_mail_page() {  global $user;  $form = $categories = array();  $result = db_query('SELECT cid, category, selected FROM {contact} ORDER BY weight, category');  while ($category = db_fetch_object($result)) {    $categories[$category->cid] = $category->category;    if ($category->selected) {      $default_category = $category->cid;    }  }  if (count($categories) > 0) {    $form['#token'] = $user->uid ? $user->name . $user->mail : '';    $form['contact_information'] = array('#value' => filter_xss_admin(variable_get('contact_form_information', t('You can leave a message using the contact form below.'))));    $form['name'] = array('#type' => 'textfield',      '#title' => t('Your name'),      '#maxlength' => 255,      '#default_value' => $user->uid ? $user->name : '',      '#required' => TRUE,    );    $form['mail'] = array('#type' => 'textfield',      '#title' => t('Your e-mail address'),      '#maxlength' => 255,      '#default_value' => $user->uid ? $user->mail : '',      '#required' => TRUE,    );    $form['subject'] = array('#type' => 'textfield',      '#title' => t('Subject'),      '#maxlength' => 255,      '#required' => TRUE,    );    if (count($categories) > 1) {      // If there is more than one category available and no default category has been selected,      // prepend a default placeholder value.      if (!isset($default_category)) {        $default_category = t('- Please choose -');        $categories = array($default_category) + $categories;      }      $form['cid'] = array('#type' => 'select',        '#title' => t('Category'),        '#default_value' => $default_category,        '#options' => $categories,        '#required' => TRUE,      );    }    else {      // If there is only one category, store its cid.      $category_keys = array_keys($categories);      $form['cid'] = array('#type' => 'value',        '#value' => array_shift($category_keys),      );    }    $form['message'] = array('#type' => 'textarea',      '#title' => t('Message'),      '#required' => TRUE,    );    // We do not allow anonymous users to send themselves a copy    // because it can be abused to spam people.    if ($user->uid) {      $form['copy'] = array('#type' => 'checkbox',        '#title' => t('Send yourself a copy.'),      );    }    else {      $form['copy'] = array('#type' => 'value', '#value' => FALSE);    }    $form['submit'] = array('#type' => 'submit',      '#value' => t('Send e-mail'),    );  }  else {    drupal_set_message(t('The contact form has not been configured. <a href="@add">Add one or more categories</a> to the form.', array('@add' => url('admin/build/contact/add'))), 'error');  }  return $form;}/** * Validate the site-wide contact page form submission. */function contact_mail_page_validate($form, &$form_state) {  if (!$form_state['values']['cid']) {    form_set_error('cid', t('You must select a valid category.'));  }  if (!valid_email_address($form_state['values']['mail'])) {    form_set_error('mail', t('You must enter a valid e-mail address.'));  }}/** * Process the site-wide contact page form submission. */function contact_mail_page_submit($form, &$form_state) {  global $language;  $values = $form_state['values'];  // E-mail address of the sender: as the form field is a text field,  // all instances of \r and \n have been automatically stripped from it.  $from = $values['mail'];  // Load category properties and save form values for email composition.  $contact = contact_load($values['cid']);  $values['contact'] = $contact;  // Send the e-mail to the recipients using the site default language.  drupal_mail('contact', 'page_mail', $contact['recipients'], language_default(), $values, $from);  // If the user requests it, send a copy using the current language.  if ($values['copy']) {    drupal_mail('contact', 'page_copy', $from, $language, $values, $from);  }  // Send an auto-reply if necessary using the current language.  if ($contact['reply']) {    drupal_mail('contact', 'page_autoreply', $from, $language, $values, $contact['recipients']);  }  flood_register_event('contact');  watchdog('mail', '%name-from sent an e-mail regarding %category.', array('%name-from' => $values['name'] ." [$from]", '%category' => $contact['category']));  drupal_set_message(t('Your message has been sent.'));  // Jump to home page rather than back to contact page to avoid  // contradictory messages if flood control has been activated.  $form_state['redirect'] = '';}/** * Personal contact page. */function contact_user_page($account) {  global $user;  if (!valid_email_address($user->mail)) {    $output = t('You need to provide a valid e-mail address to contact other users. Please update your <a href="@url">user information</a> and try again.', array('@url' => url("user/$user->uid/edit")));  }  else if (!flood_is_allowed('contact', variable_get('contact_hourly_threshold', 3))) {    $output = t('You cannot contact more than %number users per hour. Please try again later.', array('%number' => variable_get('contact_hourly_threshold', 3)));  }  else {    drupal_set_title(check_plain($account->name));    $output = drupal_get_form('contact_mail_user', $account);  }  return $output;}function contact_mail_user(&$form_state, $recipient) {  global $user;  $form['#token'] = $user->name . $user->mail;  $form['recipient'] = array('#type' => 'value', '#value' => $recipient);  $form['from'] = array('#type' => 'item',    '#title' => t('From'),    '#value' => theme('username', $user) .' &lt;'. check_plain($user->mail) .'&gt;',  );  $form['to'] = array('#type' => 'item',    '#title' => t('To'),    '#value' => theme('username', $recipient),  );  $form['subject'] = array('#type' => 'textfield',    '#title' => t('Subject'),    '#maxlength' => 50,    '#required' => TRUE,  );  $form['message'] = array('#type' => 'textarea',    '#title' => t('Message'),    '#rows' => 15,    '#required' => TRUE,  );  $form['copy'] = array('#type' => 'checkbox',    '#title' => t('Send yourself a copy.'),  );  $form['submit'] = array('#type' => 'submit',    '#value' => t('Send e-mail'),  );  return $form;}/** * Process the personal contact page form submission. */function contact_mail_user_submit($form, &$form_state) {  global $user, $language;  $account = $form_state['values']['recipient'];  // Send from the current user to the requested user.  $to = $account->mail;  $from = $user->mail;  // Save both users and all form values for email composition.  $values = $form_state['values'];  $values['account'] = $account;  $values['user'] = $user;  // Send the e-mail in the requested user language.  drupal_mail('contact', 'user_mail', $to, user_preferred_language($account), $values, $from);  // Send a copy if requested, using current page language.  if ($form_state['values']['copy']) {    drupal_mail('contact', 'user_copy', $from, $language, $values, $from);  }  flood_register_event('contact');  watchdog('mail', '%name-from sent %name-to an e-mail.', array('%name-from' => $user->name, '%name-to' => $account->name));  drupal_set_message(t('The message has been sent.'));  // Back to the requested users profile page.  $form_state['redirect'] = "user/$account->uid";}
<?php// $Id$/** * @file * Page callbacks for the taxonomy module. *//** * Menu callback; displays all nodes associated with a term. */function taxonomy_term_page($str_tids = '', $depth = 0, $op = 'page') {  $terms = taxonomy_terms_parse_string($str_tids);  if ($terms['operator'] != 'and' && $terms['operator'] != 'or') {    drupal_not_found();  }  if ($terms['tids']) {    $result = db_query(db_rewrite_sql('SELECT t.tid, t.name FROM {term_data} t WHERE t.tid IN ('. db_placeholders($terms['tids']) .')', 't', 'tid'), $terms['tids']);    $tids = array(); // we rebuild the $tids-array so it only contains terms the user has access to.    $names = array();    while ($term = db_fetch_object($result)) {      $tids[] = $term->tid;      $names[] = $term->name;    }    if ($names) {      $title = implode(', ', $names);      drupal_set_title(check_plain($title));      switch ($op) {        case 'page':          // Build breadcrumb based on first hierarchy of first term:          $current->tid = $tids[0];          $breadcrumb = array();          while ($parents = taxonomy_get_parents($current->tid)) {            $current = array_shift($parents);            $breadcrumb[] = l($current->name, 'taxonomy/term/'. $current->tid);          }          $breadcrumb[] = l(t('Home'), NULL);          $breadcrumb = array_reverse($breadcrumb);          drupal_set_breadcrumb($breadcrumb);          $output = theme('taxonomy_term_page', $tids, taxonomy_select_nodes($tids, $terms['operator'], $depth, TRUE));          drupal_add_feed(url('taxonomy/term/'. $str_tids .'/'. $depth .'/feed'), 'RSS - '. $title);          return $output;          break;        case 'feed':          $channel['link'] = url('taxonomy/term/'. $str_tids .'/'. $depth, array('absolute' => TRUE));          $channel['title'] = variable_get('site_name', 'Drupal') .' - '. $title;          // Only display the description if we have a single term, to avoid clutter and confusion.          if (count($tids) == 1) {            $term = taxonomy_get_term($tids[0]);            // HTML will be removed from feed description, so no need to filter here.            $channel['description'] = $term->description;          }          $result = taxonomy_select_nodes($tids, $terms['operator'], $depth, FALSE);          $items = array();           while ($row = db_fetch_object($result)) {            $items[] = $row->nid;          }          node_feed($items, $channel);          break;        default:          drupal_not_found();      }    }    else {      drupal_not_found();    }  }}/** * Render a taxonomy term page HTML output. * * @param $tids *   An array of term ids. * @param $result *   A pager_query() result, such as that performed by taxonomy_select_nodes(). * * @ingroup themeable */function theme_taxonomy_term_page($tids, $result) {  drupal_add_css(drupal_get_path('module', 'taxonomy') .'/taxonomy.css');  $output = '';  // Only display the description if we have a single term, to avoid clutter and confusion.  if (count($tids) == 1) {    $term = taxonomy_get_term($tids[0]);    $description = $term->description;    // Check that a description is set.    if (!empty($description)) {      $output .= '<div class="taxonomy-term-description">';      $output .= filter_xss_admin($description);      $output .= '</div>';    }  }  $output .= taxonomy_render_nodes($result);  return $output;}/** * Helper function for autocompletion */function taxonomy_autocomplete($vid, $string = '') {  // The user enters a comma-separated list of tags. We only autocomplete the last tag.  $array = drupal_explode_tags($string);  // Fetch last tag  $last_string = trim(array_pop($array));  $matches = array();  if ($last_string != '') {    $result = db_query_range(db_rewrite_sql("SELECT t.tid, t.name FROM {term_data} t WHERE t.vid = %d AND LOWER(t.name) LIKE LOWER('%%%s%%')", 't', 'tid'), $vid, $last_string, 0, 10);    $prefix = count($array) ? implode(', ', $array) .', ' : '';    while ($tag = db_fetch_object($result)) {      $n = $tag->name;      // Commas and quotes in terms are special cases, so encode 'em.      if (strpos($tag->name, ',') !== FALSE || strpos($tag->name, '"') !== FALSE) {        $n = '"'. str_replace('"', '""', $tag->name) .'"';      }      $matches[$prefix . $n] = check_plain($tag->name);    }  }  drupal_json($matches);}
<?php// $Id$/** * @file *   Add language handling functionality and enables the translation of the *   user interface to languages other than English. * *   When enabled, multiple languages can be set up. The site interface *   can be displayed in different languages, as well as nodes can have languages *   assigned. The setup of languages and translations is completely web based. *   Gettext portable object files are supported. */// ---------------------------------------------------------------------------------// Hook implementations/** * Implementation of hook_help(). */function locale_help($path, $arg) {  switch ($path) {    case 'admin/help#locale':      $output = '<p>'. t('The locale module allows your Drupal site to be presented in languages other than the default English, a defining feature of multi-lingual websites. The locale module works by examining text as it is about to be displayed: when a translation of the text is available in the language to be displayed, the translation is displayed rather than the original text. When a translation is unavailable, the original text is displayed, and then stored for later review by a translator.') .'</p>';      $output .= '<p>'. t('Beyond translation of the Drupal interface, the locale module provides a feature set tailored to the needs of a multi-lingual site. Language negotiation allows your site to automatically change language based on the domain or path used for each request. Users may (optionally) select their preferred language on their <em>My account</em> page, and your site can be configured to honor a web browser\'s preferred language settings. Your site content can be created in (and translated to) any enabled language, and each post may have a language-appropriate alias for each of its translations. The locale module works in concert with the <a href="@content-help">content translation module</a> to manage translated content.', array('@content-help' => url('admin/help/translation'))) .'</p>';      $output .= '<p>'. t('Translations may be provided by:') .'</p>';      $output .= '<ul><li>'. t("translating the original text via the locale module's integrated web interface, or") .'</li>';      $output .= '<li>'. t('importing files from a set of existing translations, known as a translation package. A translation package enables the display of a specific version of Drupal in a specific language, and contain files in the Gettext Portable Object (<em>.po</em>) format. Although not all languages are available for every version of Drupal, translation packages for many languages are available for download from the <a href="@translations">Drupal translation page</a>.', array('@translations' => 'http://drupal.org/project/translations')) .'</li></ul>';      $output .= '<p>'. t('If an existing translation package does not meet your needs, the Gettext Portable Object (<em>.po</em>) files within a package may be modified, or new <em>.po</em> files may be created, using a desktop Gettext editor. The locale module\'s <a href="@import">import</a> feature allows the translated strings from a new or modified <em>.po</em> file to be added to your site. The locale module\'s <a href="@export">export</a> feature generates files from your site\'s translated strings, that can either be shared with others or edited offline by a Gettext translation editor.', array('@import' => url('admin/build/translate/import'), '@export' => url('admin/build/translate/export'))) .'</p>';      $output .= '<p>'. t('For more information, see the online handbook entry for <a href="@locale">Locale module</a>.', array('@locale' => 'http://drupal.org/handbook/modules/locale/')) .'</p>';      return $output;    case 'admin/settings/language':      $output = '<p>'. t("This page provides an overview of your site's enabled languages. If multiple languages are available and enabled, the text on your site interface may be translated, registered users may select their preferred language on the <em>My account</em> page, and site authors may indicate a specific language when creating posts. The site's default language is used for anonymous visitors and for users who have not selected a preferred language.") .'</p>';      $output .= '<p>'. t('For each language available on the site, use the <em>edit</em> link to configure language details, including name, an optional language-specific path or domain, and whether the language is natively presented either left-to-right or right-to-left. These languages also appear in the <em>Language</em> selection when creating a post of a content type with multilingual support.') .'</p>';      $output .= '<p>'. t('Use the <a href="@add-language">add language page</a> to enable additional languages (and automatically import files from a translation package, if available), the <a href="@search">translate interface page</a> to locate strings for manual translation, or the <a href="@import">import page</a> to add translations from individual <em>.po</em> files. A number of contributed translation packages containing <em>.po</em> files are available on the <a href="@translations">Drupal.org translations page</a>.', array('@add-language' => url('admin/settings/language/add'), '@search' => url('admin/build/translate/search'), '@import' => url('admin/build/translate/import'), '@translations' => 'http://drupal.org/project/translations')) .'</p>';      return $output;    case 'admin/settings/language/add':      return '<p>'. t('Add all languages to be supported by your site. If your desired language is not available in the <em>Language name</em> drop-down, click <em>Custom language</em> and provide a language code and other details manually. When providing a language code manually, be sure to enter a standardized language code, since this code may be used by browsers to determine an appropriate display language.') .'</p>';    case 'admin/settings/language/configure':      $output = '<p>'. t("Language negotiation settings determine the site's presentation language. Available options include:") .'</p>';      $output .= '<ul><li>'. t('<strong>None.</strong> The default language is used for site presentation, though users may (optionally) select a preferred language on the <em>My Account</em> page. (User language preferences will be used for site e-mails, if available.)') .'</li>';      $output .= '<li>'. t('<strong>Path prefix only.</strong> The presentation language is determined by examining the path for a language code or other custom string that matches the path prefix (if any) specified for each language. If a suitable prefix is not identified, the default language is used. <em>Example: "example.com/de/contact" sets presentation language to German based on the use of "de" within the path.</em>') .'</li>';      $output .= '<li>'. t("<strong>Path prefix with language fallback.</strong> The presentation language is determined by examining the path for a language code or other custom string that matches the path prefix (if any) specified for each language. If a suitable prefix is not identified, the display language is determined by the user's language preferences from the <em>My Account</em> page, or by the browser's language settings. If a presentation language cannot be determined, the default language is used.") .'</li>';      $output .= '<li>'. t('<strong>Domain name only.</strong> The presentation language is determined by examining the domain used to access the site, and comparing it to the language domain (if any) specified for each language. If a match is not identified, the default language is used. <em>Example: "http://de.example.com/contact" sets presentation language to German based on the use of "http://de.example.com" in the domain.</em>') .'</li></ul>';      $output .= '<p>'. t('The path prefix or domain name for a language may be set by editing the <a href="@languages">available languages</a>. In the absence of an appropriate match, the site is displayed in the <a href="@languages">default language</a>.', array('@languages' => url('admin/settings/language'))) .'</p>';      return $output;    case 'admin/build/translate':      $output = '<p>'. t('This page provides an overview of available translatable strings. Drupal displays translatable strings in text groups; modules may define additional text groups containing other translatable strings. Because text groups provide a method of grouping related strings, they are often used to focus translation efforts on specific areas of the Drupal interface.') .'</p>';      $output .= '<p>'. t('Review the <a href="@languages">languages page</a> for more information on adding support for additional languages.', array('@languages' => url('admin/settings/language'))) .'</p>';      return $output;    case 'admin/build/translate/import':      $output = '<p>'. t('This page imports the translated strings contained in an individual Gettext Portable Object (<em>.po</em>) file. Normally distributed as part of a translation package (each translation package may contain several <em>.po</em> files), a <em>.po</em> file may need to be imported after off-line editing in a Gettext translation editor. Importing an individual <em>.po</em> file may be a lengthy process.') .'</p>';      $output .= '<p>'. t('Note that the <em>.po</em> files within a translation package are imported automatically (if available) when new modules or themes are enabled, or as new languages are added. Since this page only allows the import of one <em>.po</em> file at a time, it may be simpler to download and extract a translation package into your Drupal installation directory and <a href="@language-add">add the language</a> (which automatically imports all <em>.po</em> files within the package). Translation packages are available for download on the <a href="@translations">Drupal translation page</a>.', array('@language-add' => url('admin/settings/language/add'), '@translations' => 'http://drupal.org/project/translations')) .'</p>';      return $output;    case 'admin/build/translate/export':      return '<p>'. t('This page exports the translated strings used by your site. An export file may be in Gettext Portable Object (<em>.po</em>) form, which includes both the original string and the translation (used to share translations with others), or in Gettext Portable Object Template (<em>.pot</em>) form, which includes the original strings only (used to create new translations with a Gettext translation editor).') .'</p>';    case 'admin/build/translate/search':      return '<p>'. t('This page allows a translator to search for specific translated and untranslated strings, and is used when creating or editing translations. (Note: For translation tasks involving many strings, it may be more convenient to <a href="@export">export</a> strings for off-line editing in a desktop Gettext translation editor.) Searches may be limited to strings found within a specific text group or in a specific language.', array('@export' => url('admin/build/translate/export'))) .'</p>';    case 'admin/build/block/configure':      if ($arg[4] == 'locale' && $arg[5] == 0) {        return '<p>'. t('This block is only shown if <a href="@languages">at least two languages are enabled</a> and <a href="@configuration">language negotiation</a> is set to something other than <em>None</em>.', array('@languages' => url('admin/settings/language'), '@configuration' => url('admin/settings/language/configure'))) .'</p>';      }      break;  }}/** * Implementation of hook_menu(). * * Locale module only provides administrative menu items, so all * menu items are invoked through locale_inc_callback(). */function locale_menu() {  // Manage languages  $items['admin/settings/language'] = array(    'title' => 'Languages',    'description' => 'Configure languages for content and the user interface.',    'page callback' => 'locale_inc_callback',    'page arguments' => array('drupal_get_form', 'locale_languages_overview_form'),    'access arguments' => array('administer languages'),  );  $items['admin/settings/language/overview'] = array(    'title' => 'List',    'weight' => 0,    'type' => MENU_DEFAULT_LOCAL_TASK,  );  $items['admin/settings/language/add'] = array(    'title' => 'Add language',    'page callback' => 'locale_inc_callback',    'page arguments' => array('locale_languages_add_screen'), // two forms concatenated    'access arguments' => array('administer languages'),    'weight' => 5,    'type' => MENU_LOCAL_TASK,  );  $items['admin/settings/language/configure'] = array(    'title' => 'Configure',    'page callback' => 'locale_inc_callback',    'page arguments' => array('drupal_get_form', 'locale_languages_configure_form'),    'access arguments' => array('administer languages'),    'weight' => 10,    'type' => MENU_LOCAL_TASK,  );  $items['admin/settings/language/edit/%'] = array(    'title' => 'Edit language',    'page callback' => 'locale_inc_callback',    'page arguments' => array('drupal_get_form', 'locale_languages_edit_form', 4),    'access arguments' => array('administer languages'),    'type' => MENU_CALLBACK,  );  $items['admin/settings/language/delete/%'] = array(    'title' => 'Confirm',    'page callback' => 'locale_inc_callback',    'page arguments' => array('drupal_get_form', 'locale_languages_delete_form', 4),    'access arguments' => array('administer languages'),    'type' => MENU_CALLBACK,  );  // Translation functionality  $items['admin/build/translate'] = array(    'title' => 'Translate interface',    'description' => 'Translate the built in interface and optionally other text.',    'page callback' => 'locale_inc_callback',    'page arguments' => array('locale_translate_overview_screen'), // not a form, just a table    'access arguments' => array('translate interface'),  );  $items['admin/build/translate/overview'] = array(    'title' => 'Overview',    'weight' => 0,    'type' => MENU_DEFAULT_LOCAL_TASK,  );  $items['admin/build/translate/search'] = array(    'title' => 'Search',    'weight' => 10,    'type' => MENU_LOCAL_TASK,    'page callback' => 'locale_inc_callback',    'page arguments' => array('locale_translate_seek_screen'), // search results and form concatenated    'access arguments' => array('translate interface'),  );  $items['admin/build/translate/import'] = array(    'title' => 'Import',    'page callback' => 'locale_inc_callback',    'page arguments' => array('drupal_get_form', 'locale_translate_import_form'),    'access arguments' => array('translate interface'),    'weight' => 20,    'type' => MENU_LOCAL_TASK,  );  $items['admin/build/translate/export'] = array(    'title' => 'Export',    'page callback' => 'locale_inc_callback',    'page arguments' => array('locale_translate_export_screen'), // possibly multiple forms concatenated    'access arguments' => array('translate interface'),    'weight' => 30,    'type' => MENU_LOCAL_TASK,  );  $items['admin/build/translate/edit/%'] = array(    'title' => 'Edit string',    'page callback' => 'locale_inc_callback',    'page arguments' => array('drupal_get_form', 'locale_translate_edit_form', 4),    'access arguments' => array('translate interface'),    'type' => MENU_CALLBACK,  );  $items['admin/build/translate/delete/%'] = array(    'title' => 'Delete string',    'page callback' => 'locale_inc_callback',    'page arguments' => array('locale_translate_delete_page', 4),    'access arguments' => array('translate interface'),    'type' => MENU_CALLBACK,  );  return $items;}/** * Wrapper function to be able to set callbacks in locale.inc */function locale_inc_callback() {  $args = func_get_args();  $function = array_shift($args);  include_once './includes/locale.inc';  return call_user_func_array($function, $args);}/** * Implementation of hook_perm(). */function locale_perm() {  return array('administer languages', 'translate interface');}/** * Implementation of hook_locale(). */function locale_locale($op = 'groups') {  switch ($op) {    case 'groups':      return array('default' => t('Built-in interface'));  }}/** * Implementation of hook_user(). */function locale_user($type, $edit, &$user, $category = NULL) {  global $language;  // If we have more then one language and either creating a user on the  // admin interface or edit the user, show the language selector.  if (variable_get('language_count', 1) > 1 && ($type == 'register' && user_access('administer users') || $type == 'form' && $category == 'account' )) {    $languages = language_list('enabled');    $languages = $languages[1];    // If the user is being created, we set the user language to the page language.    $user_preferred_language = $user ? user_preferred_language($user) : $language;    $names = array();    foreach ($languages as $langcode => $item) {      $name = t($item->name);      $names[check_plain($langcode)] = check_plain($name . ($item->native != $name ? ' ('. $item->native .')' : ''));    }    $form['locale'] = array(      '#type' => 'fieldset',      '#title' => t('Language settings'),      '#weight' => 1,    );    // Get language negotiation settings.    $mode = variable_get('language_negotiation', LANGUAGE_NEGOTIATION_NONE);    $form['locale']['language'] = array(      '#type' => (count($names) <= 5 ? 'radios' : 'select'),      '#title' => t('Language'),      '#default_value' => check_plain($user_preferred_language->language),      '#options' => $names,      '#description' => ($mode == LANGUAGE_NEGOTIATION_PATH) ? t("This account's default language for e-mails, and preferred language for site presentation.") : t("This account's default language for e-mails."),    );    return $form;  }}/** * Implementation of hook_form_alter(). Adds language fields to forms. */function locale_form_alter(&$form, $form_state, $form_id) {  switch ($form_id) {    // Language field for paths    case 'path_admin_form':      $form['language'] = array(        '#type' => 'select',        '#title' => t('Language'),        '#options' => array('' => t('All languages')) + locale_language_list('name'),        '#default_value' => $form['language']['#value'],        '#weight' => -10,        '#description' => t('A path alias set for a specific language will always be used when displaying this page in that language, and takes precedence over path aliases set for <em>All languages</em>.'),      );      break;    // Language setting for content types    case 'node_type_form':      if (isset($form['identity']['type'])) {        $form['workflow']['language_content_type'] = array(          '#type' => 'radios',          '#title' => t('Multilingual support'),          '#default_value' => variable_get('language_content_type_'. $form['#node_type']->type, 0),          '#options' => array(t('Disabled'), t('Enabled')),          '#description' => t('Enable multilingual support for this content type. If enabled, a language selection field will be added to the editing form, allowing you to select from one of the <a href="!languages">enabled languages</a>. If disabled, new posts are saved with the default language. Existing content will not be affected by changing this option.', array('!languages' => url('admin/settings/language'))),        );      }      break;    // Language field for nodes    default:      if (isset($form['#id']) && $form['#id'] == 'node-form') {        if (isset($form['#node']->type) && variable_get('language_content_type_'. $form['#node']->type, 0)) {          $form['language'] = array(            '#type' => 'select',            '#title' => t('Language'),            '#default_value' => (isset($form['#node']->language) ? $form['#node']->language : ''),            '#options' => array('' => t('Language neutral')) + locale_language_list('name'),          );        }        // Node type without language selector: assign the default for new nodes        elseif (!isset($form['#node']->nid)) {          $default = language_default();          $form['language'] = array(            '#type' => 'value',            '#value' => $default->language          );        }      }  }}/** * Implementation of hook_theme() */function locale_theme() {  return array(    'locale_languages_overview_form' => array(      'arguments' => array('form' => array()),    ),  );}/** * Implementation of hook_node_type(). */function locale_node_type($op, $info) {  if ($op == 'delete') {    variable_del('language_content_type_'. $info->type);  }}// ---------------------------------------------------------------------------------// Locale core functionality/** * Provides interface translation services. * * This function is called from t() to translate a string if needed. * * @param $string *   A string to look up translation for. If omitted, all the *   cached strings will be returned in all languages already *   used on the page. * @param $langcode *   Language code to use for the lookup. * @param $reset *   Set to TRUE to reset the in-memory cache. */function locale($string = NULL, $langcode = NULL, $reset = FALSE) {  global $language;  static $locale_t;  if ($reset) {    // Reset in-memory cache.    $locale_t = NULL;  }  if (!isset($string)) {    // Return all cached strings if no string was specified    return $locale_t;  }  $langcode = isset($langcode) ? $langcode : $language->language;  // Store database cached translations in a static var.  if (!isset($locale_t[$langcode])) {    $locale_t[$langcode] = array();    // Disabling the usage of string caching allows a module to watch for    // the exact list of strings used on a page. From a performance    // perspective that is a really bad idea, so we have no user    // interface for this. Be careful when turning this option off!    if (variable_get('locale_cache_strings', 1) == 1) {      if ($cache = cache_get('locale:'. $langcode, 'cache')) {        $locale_t[$langcode] = $cache->data;      }      elseif (lock_acquire('locale_cache_' . $langcode)) {        // Refresh database stored cache of translations for given language.        // We only store short strings used in current version, to improve        // performance and consume less memory.        $result = db_query("SELECT s.source, t.translation, t.language FROM {locales_source} s LEFT JOIN {locales_target} t ON s.lid = t.lid AND t.language = '%s' WHERE s.textgroup = 'default' AND s.version = '%s' AND LENGTH(s.source) < 75", $langcode, VERSION);        while ($data = db_fetch_object($result)) {          $locale_t[$langcode][$data->source] = (empty($data->translation) ? TRUE : $data->translation);        }        cache_set('locale:'. $langcode, $locale_t[$langcode]);        lock_release('locale_cache_' . $langcode);      }    }  }  // If we have the translation cached, skip checking the database  if (!isset($locale_t[$langcode][$string])) {    // We do not have this translation cached, so get it from the DB.    $translation = db_fetch_object(db_query("SELECT s.lid, t.translation, s.version FROM {locales_source} s LEFT JOIN {locales_target} t ON s.lid = t.lid AND t.language = '%s' WHERE s.source = '%s' AND s.textgroup = 'default'", $langcode, $string));    if ($translation) {      // We have the source string at least.      // Cache translation string or TRUE if no translation exists.      $locale_t[$langcode][$string] = (empty($translation->translation) ? TRUE : $translation->translation);      if ($translation->version != VERSION) {        // This is the first use of this string under current Drupal version. Save version        // and clear cache, to include the string into caching next time. Saved version is        // also a string-history information for later pruning of the tables.        db_query("UPDATE {locales_source} SET version = '%s' WHERE lid = %d", VERSION, $translation->lid);        cache_clear_all('locale:', 'cache', TRUE);      }    }    else {      // We don't have the source string, cache this as untranslated.      db_query("INSERT INTO {locales_source} (location, source, textgroup, version) VALUES ('%s', '%s', 'default', '%s')", request_uri(), $string, VERSION);      $locale_t[$langcode][$string] = TRUE;      // Clear locale cache so this string can be added in a later request.      cache_clear_all('locale:', 'cache', TRUE);    }  }  return ($locale_t[$langcode][$string] === TRUE ? $string : $locale_t[$langcode][$string]);}/** * Returns plural form index for a specific number. * * The index is computed from the formula of this language. * * @param $count *   Number to return plural for. * @param $langcode *   Optional language code to translate to a language other than *   what is used to display the page. */function locale_get_plural($count, $langcode = NULL) {  global $language;  static $locale_formula, $plurals = array();  $langcode = $langcode ? $langcode : $language->language;  if (!isset($plurals[$langcode][$count])) {    if (!isset($locale_formula)) {      $language_list = language_list();      $locale_formula[$langcode] = $language_list[$langcode]->formula;    }    if ($locale_formula[$langcode]) {      $n = $count;      $plurals[$langcode][$count] = @eval('return intval('. $locale_formula[$langcode] .');');      return $plurals[$langcode][$count];    }    else {      $plurals[$langcode][$count] = -1;      return -1;    }  }  return $plurals[$langcode][$count];}/** * Returns a language name */function locale_language_name($lang) {  static $list = NULL;  if (!isset($list)) {    $list = locale_language_list();  }  return ($lang && isset($list[$lang])) ? $list[$lang] : t('All');}/** * Returns array of language names * * @param $field *   'name' => names in current language, localized *   'native' => native names * @param $all *   Boolean to return all languages or only enabled ones */function locale_language_list($field = 'name', $all = FALSE) {  if ($all) {    $languages = language_list();  }  else {    $languages = language_list('enabled');    $languages = $languages[1];  }  $list = array();  foreach ($languages as $language) {    $list[$language->language] = ($field == 'name') ? t($language->name) : $language->$field;  }  return $list;}/** * Imports translations when new modules or themes are installed or enabled. * * This function will either import translation for the component change * right away, or start a batch if more files need to be imported. * * @param $components *   An array of component (theme and/or module) names to import *   translations for. */function locale_system_update($components) {  include_once 'includes/locale.inc';  if ($batch = locale_batch_by_component($components)) {    batch_set($batch);  }}/** * Update JavaScript translation file, if required, and add it to the page. * * This function checks all JavaScript files currently added via drupal_add_js() * and invokes parsing if they have not yet been parsed for Drupal.t() * and Drupal.formatPlural() calls. Also refreshes the JavaScript translation * file if necessary, and adds it to the page. */function locale_update_js_files() {  global $language;  $dir = file_create_path(variable_get('locale_js_directory', 'languages'));  $parsed = variable_get('javascript_parsed', array());  // The first three parameters are NULL in order to get an array with all  // scopes. This is necessary to prevent recreation of JS translation files  // when new files are added for example in the footer.  $javascript = drupal_add_js(NULL, NULL, NULL);  $files = $new_files = FALSE;  foreach ($javascript as $scope) {    foreach ($scope as $type => $data) {      if ($type != 'setting' && $type != 'inline') {        foreach ($data as $filepath => $info) {          $files = TRUE;          if (!in_array($filepath, $parsed)) {            // Don't parse our own translations files.            if (substr($filepath, 0, strlen($dir)) != $dir) {              locale_inc_callback('_locale_parse_js_file', $filepath);              $parsed[] = $filepath;              $new_files = TRUE;            }          }        }      }    }  }  // If there are any new source files we parsed, invalidate existing  // JavaScript translation files for all languages, adding the refresh  // flags into the existing array.  if ($new_files) {    $parsed += locale_inc_callback('_locale_invalidate_js');  }  // If necessary, rebuild the translation file for the current language.  if (!empty($parsed['refresh:'. $language->language])) {    // Don't clear the refresh flag on failure, so that another try will    // be performed later.    if (locale_inc_callback('_locale_rebuild_js')) {      unset($parsed['refresh:'. $language->language]);    }    // Store any changes after refresh was attempted.    variable_set('javascript_parsed', $parsed);  }  // If no refresh was attempted, but we have new source files, we need  // to store them too. This occurs if current page is in English.  else if ($new_files) {    variable_set('javascript_parsed', $parsed);  }  // Add the translation JavaScript file to the page.  if ($files && !empty($language->javascript)) {    drupal_add_js($dir .'/'. $language->language .'_'. $language->javascript .'.js', 'core');  }}// ---------------------------------------------------------------------------------// Language switcher block/** * Implementation of hook_block(). * Displays a language switcher. Translation links may be provided by other modules. */function locale_block($op = 'list', $delta = 0) {  if ($op == 'list') {    $block[0]['info'] = t('Language switcher');    // Not worth caching.    $block[0]['cache'] = BLOCK_NO_CACHE;    return $block;  }  // Only show if we have at least two languages and language dependent  // web addresses, so we can actually link to other language versions.  elseif ($op == 'view' && variable_get('language_count', 1) > 1 && variable_get('language_negotiation', LANGUAGE_NEGOTIATION_NONE) != LANGUAGE_NEGOTIATION_NONE) {    $path = drupal_is_front_page() ? '<front>' : $_GET['q'];    $languages = language_list('enabled');    $links = array();    foreach ($languages[1] as $language) {      $links[$language->language] = array(        'href'       => $path,        'title'      => $language->native,        'language'   => $language,        'attributes' => array('class' => 'language-link'),      );    }    // Allow modules to provide translations for specific links.    // A translation link may need to point to a different path or use    // a translated link text before going through l(), which will just    // handle the path aliases.    drupal_alter('translation_link', $links, $path);    $block['subject'] = t('Languages');    $block['content'] = theme('links', $links, array());    return $block;  }}
<?php// $Id$/** * @file * Wrapper for database interface code. *//** * A hash value to check when outputting database errors, md5('DB_ERROR'). * * @see drupal_error_handler() */define('DB_ERROR', 'a515ac9c2796ca0e23adbe92c68fc9fc');/** * @defgroup database Database abstraction layer * @{ * Allow the use of different database servers using the same code base. * * Drupal provides a slim database abstraction layer to provide developers with * the ability to support multiple database servers easily. The intent of this * layer is to preserve the syntax and power of SQL as much as possible, while * letting Drupal control the pieces of queries that need to be written * differently for different servers and provide basic security checks. * * Most Drupal database queries are performed by a call to db_query() or * db_query_range(). Module authors should also consider using pager_query() for * queries that return results that need to be presented on multiple pages, and * tablesort_sql() for generating appropriate queries for sortable tables. * * For example, one might wish to return a list of the most recent 10 nodes * authored by a given user. Instead of directly issuing the SQL query * @code *   SELECT n.nid, n.title, n.created FROM node n WHERE n.uid = $uid LIMIT 0, 10; * @endcode * one would instead call the Drupal functions: * @code *   $result = db_query_range('SELECT n.nid, n.title, n.created *     FROM {node} n WHERE n.uid = %d', $uid, 0, 10); *   while ($node = db_fetch_object($result)) { *     // Perform operations on $node->body, etc. here. *   } * @endcode * Curly braces are used around "node" to provide table prefixing via * db_prefix_tables(). The explicit use of a user ID is pulled out into an * argument passed to db_query() so that SQL injection attacks from user input * can be caught and nullified. The LIMIT syntax varies between database servers, * so that is abstracted into db_query_range() arguments. Finally, note the * common pattern of iterating over the result set using db_fetch_object(). *//** * Perform an SQL query and return success or failure. * * @param $sql *   A string containing a complete SQL query.  %-substitution *   parameters are not supported. * @return *   An array containing the keys: *      success: a boolean indicating whether the query succeeded *      query: the SQL query executed, passed through check_plain() */function update_sql($sql) {  $result = db_query($sql, true);  return array('success' => $result !== FALSE, 'query' => check_plain($sql));}/** * Append a database prefix to all tables in a query. * * Queries sent to Drupal should wrap all table names in curly brackets. This * function searches for this syntax and adds Drupal's table prefix to all * tables, allowing Drupal to coexist with other systems in the same database if * necessary. * * @param $sql *   A string containing a partial or entire SQL query. * @return *   The properly-prefixed string. */function db_prefix_tables($sql) {  global $db_prefix;  if (is_array($db_prefix)) {    if (array_key_exists('default', $db_prefix)) {      $tmp = $db_prefix;      unset($tmp['default']);      foreach ($tmp as $key => $val) {        $sql = strtr($sql, array('{'. $key .'}' => $val . $key));      }      return strtr($sql, array('{' => $db_prefix['default'], '}' => ''));    }    else {      foreach ($db_prefix as $key => $val) {        $sql = strtr($sql, array('{'. $key .'}' => $val . $key));      }      return strtr($sql, array('{' => '', '}' => ''));    }  }  else {    return strtr($sql, array('{' => $db_prefix, '}' => ''));  }}/** * Activate a database for future queries. * * If it is necessary to use external databases in a project, this function can * be used to change where database queries are sent. If the database has not * yet been used, it is initialized using the URL specified for that name in * Drupal's configuration file. If this name is not defined, a duplicate of the * default connection is made instead. * * Be sure to change the connection back to the default when done with custom * code. * * @param $name *   The name assigned to the newly active database connection. If omitted, the *   default connection will be made active. * * @return the name of the previously active database or FALSE if non was found. */function db_set_active($name = 'default') {  global $db_url, $db_type, $active_db;  static $db_conns, $active_name = FALSE;  if (empty($db_url)) {    include_once 'includes/install.inc';    install_goto('install.php');  }  if (!isset($db_conns[$name])) {    // Initiate a new connection, using the named DB URL specified.    if (is_array($db_url)) {      $connect_url = array_key_exists($name, $db_url) ? $db_url[$name] : $db_url['default'];    }    else {      $connect_url = $db_url;    }    $db_type = substr($connect_url, 0, strpos($connect_url, '://'));    $handler = "./includes/database.$db_type.inc";    if (is_file($handler)) {      include_once $handler;    }    else {      _db_error_page("The database type '". $db_type ."' is unsupported. Please use either 'mysql' or 'mysqli' for MySQL, or 'pgsql' for PostgreSQL databases.");    }    $db_conns[$name] = db_connect($connect_url);  }  $previous_name = $active_name;  // Set the active connection.  $active_name = $name;  $active_db = $db_conns[$name];  return $previous_name;}/** * Helper function to show fatal database errors. * * Prints a themed maintenance page with the 'Site off-line' text, * adding the provided error message in the case of 'display_errors' * set to on. Ends the page request; no return. * * @param $error *   The error message to be appended if 'display_errors' is on. */function _db_error_page($error = '') {  global $db_type;  drupal_init_language();  drupal_maintenance_theme();  drupal_set_header('HTTP/1.1 503 Service Unavailable');  drupal_set_title('Site off-line');  $message = '<p>The site is currently not available due to technical problems. Please try again later. Thank you for your understanding.</p>';  $message .= '<hr /><p><small>If you are the maintainer of this site, please check your database settings in the <code>settings.php</code> file and ensure that your hosting provider\'s database server is running. For more help, see the <a href="http://drupal.org/node/258">handbook</a>, or contact your hosting provider.</small></p>';  if ($error && ini_get('display_errors')) {    $message .= '<p><small>The '. theme('placeholder', $db_type) .' error was: '. theme('placeholder', $error) .'.</small></p>';  }  print theme('maintenance_page', $message);  exit;}/** * Returns a boolean depending on the availability of the database. */function db_is_active() {  global $active_db;  return !empty($active_db);}/** * Helper function for db_query(). */function _db_query_callback($match, $init = FALSE) {  static $args = NULL;  if ($init) {    $args = $match;    return;  }  switch ($match[1]) {    case '%d': // We must use type casting to int to convert FALSE/NULL/(TRUE?)      $value = array_shift($args);      // Do we need special bigint handling?      if ($value > PHP_INT_MAX) {        $precision = ini_get('precision');        @ini_set('precision', 16);        $value = sprintf('%.0f', $value);        @ini_set('precision', $precision);      }      else {        $value = (int) $value;      }      // We don't need db_escape_string as numbers are db-safe.      return $value;    case '%s':      return db_escape_string(array_shift($args));    case '%n':      // Numeric values have arbitrary precision, so can't be treated as float.      // is_numeric() allows hex values (0xFF), but they are not valid.      $value = trim(array_shift($args));      return is_numeric($value) && !preg_match('/x/i', $value) ? $value : '0';    case '%%':      return '%';    case '%f':      return (float) array_shift($args);    case '%b': // binary data      return db_encode_blob(array_shift($args));  }}/** * Generate placeholders for an array of query arguments of a single type. * * Given a Schema API field type, return correct %-placeholders to * embed in a query * * @param $arguments *  An array with at least one element. * @param $type *   The Schema API type of a field (e.g. 'int', 'text', or 'varchar'). */function db_placeholders($arguments, $type = 'int') {  $placeholder = db_type_placeholder($type);  return implode(',', array_fill(0, count($arguments), $placeholder));}/** * Indicates the place holders that should be replaced in _db_query_callback(). */define('DB_QUERY_REGEXP', '/(%d|%s|%%|%f|%b|%n)/');/** * Helper function for db_rewrite_sql. * * Collects JOIN and WHERE statements via hook_db_rewrite_sql() * Decides whether to select primary_key or DISTINCT(primary_key) * * @param $query *   Query to be rewritten. * @param $primary_table *   Name or alias of the table which has the primary key field for this query. *   Typical table names would be: {blocks}, {comments}, {forum}, {node}, *   {menu}, {term_data} or {vocabulary}. However, in most cases the usual *   table alias (b, c, f, n, m, t or v) is used instead of the table name. * @param $primary_field *   Name of the primary field. * @param $args *   Array of additional arguments. * @return *   An array: join statements, where statements, field or DISTINCT(field). */function _db_rewrite_sql($query = '', $primary_table = 'n', $primary_field = 'nid', $args = array()) {  $where = array();  $join = array();  $distinct = FALSE;  foreach (module_implements('db_rewrite_sql') as $module) {    $result = module_invoke($module, 'db_rewrite_sql', $query, $primary_table, $primary_field, $args);    if (isset($result) && is_array($result)) {      if (isset($result['where'])) {        $where[] = $result['where'];      }      if (isset($result['join'])) {        $join[] = $result['join'];      }      if (isset($result['distinct']) && $result['distinct']) {        $distinct = TRUE;      }    }    elseif (isset($result)) {      $where[] = $result;    }  }  $where = empty($where) ? '' : '('. implode(') AND (', $where) .')';  $join = empty($join) ? '' : implode(' ', $join);  return array($join, $where, $distinct);}/** * Rewrites node, taxonomy and comment queries. Use it for listing queries. Do not * use FROM table1, table2 syntax, use JOIN instead. * * @param $query *   Query to be rewritten. * @param $primary_table *   Name or alias of the table which has the primary key field for this query. *   Typical table names would be: {blocks}, {comments}, {forum}, {node}, *   {menu}, {term_data} or {vocabulary}. However, it is more common to use the *   the usual table aliases: b, c, f, n, m, t or v. * @param $primary_field *   Name of the primary field. * @param $args *   An array of arguments, passed to the implementations of hook_db_rewrite_sql. * @return *   The original query with JOIN and WHERE statements inserted from *   hook_db_rewrite_sql implementations. nid is rewritten if needed. */function db_rewrite_sql($query, $primary_table = 'n', $primary_field = 'nid',  $args = array()) {  list($join, $where, $distinct) = _db_rewrite_sql($query, $primary_table, $primary_field, $args);  if ($distinct) {    $query = db_distinct_field($primary_table, $primary_field, $query);  }  if (!empty($where) || !empty($join)) {    $pattern = '{      # Beginning of the string      ^      ((?P<anonymous_view>        # Everything within this set of parentheses is named "anonymous view"        (?:          [^()]++                   # anything not parentheses        |          \( (?P>anonymous_view) \)          # an open parenthesis, more "anonymous view" and finally a close parenthesis.        )*      )[^()]+WHERE)    }x';    preg_match($pattern, $query, $matches);    if (!$where) {      $where = '1 = 1';    }    if ($matches) {      $n = strlen($matches[1]);      $second_part = substr($query, $n);      $first_part = substr($matches[1], 0, $n - 5) ." $join WHERE $where AND ( ";      // PHP 4 does not support strrpos for strings. We emulate it.      $haystack_reverse = strrev($second_part);    }    else {      $haystack_reverse = strrev($query);    }    // No need to use strrev on the needle, we supply GROUP, ORDER, LIMIT    // reversed.    foreach (array('PUORG', 'REDRO', 'TIMIL') as $needle_reverse) {      $pos = strpos($haystack_reverse, $needle_reverse);      if ($pos !== FALSE) {        // All needles are five characters long.        $pos += 5;        break;      }    }    if ($matches) {      if ($pos === FALSE) {        $query = $first_part . $second_part .')';      }      else {        $query = $first_part . substr($second_part, 0, -$pos) .')'. substr($second_part, -$pos);      }    }    elseif ($pos === FALSE) {      $query .= " $join WHERE $where";    }    else {      $query = substr($query, 0, -$pos) . " $join WHERE $where " . substr($query, -$pos);    }  }  return $query;}/** * Adds the DISTINCT flag to the supplied query if a DISTINCT doesn't already * exist in the query. Returns the altered query. * * This will not, and never did guarantee that you will obtain distinct  * values of $table.$field. * * @param $table Unused. Kept to remain API compatibility. * @param $field Unused. Kept to remain API compatibility. * @param $query Query to which the DISTINCT flag should be applied. * @return SQL query with the DISTINCT flag set. */function db_distinct_field($table, $field, $query) {  $matches = array();  if (!preg_match('/^SELECT\s*DISTINCT/i', $query, $matches)) {    // Only add distinct to the outer SELECT to avoid messing up subqueries.    $query = preg_replace('/^SELECT/i', 'SELECT DISTINCT', $query);  }  return $query;}/** * Restrict a dynamic table, column or constraint name to safe characters. * * Only keeps alphanumeric and underscores. */function db_escape_table($string) {  return preg_replace('/[^A-Za-z0-9_]+/', '', $string);}/** * @} End of "defgroup database". *//** * @defgroup schemaapi Schema API * @{ * * A Drupal schema definition is an array structure representing one or * more tables and their related keys and indexes. A schema is defined by * hook_schema(), which usually lives in a modulename.install file. * * By implementing hook_schema() and specifying the tables your module * declares, you can easily create and drop these tables on all * supported database engines. You don't have to deal with the * different SQL dialects for table creation and alteration of the * supported database engines. * * hook_schema() should return an array with a key for each table that * the module defines. * * The following keys are defined: * *   - 'description': A string describing this table and its purpose. *     References to other tables should be enclosed in *     curly-brackets.  For example, the node_revisions table *     description field might contain "Stores per-revision title and *     body data for each {node}." *   - 'fields': An associative array ('fieldname' => specification) *     that describes the table's database columns.  The specification *     is also an array.  The following specification parameters are defined: * *     - 'description': A string describing this field and its purpose. *       References to other tables should be enclosed in *       curly-brackets.  For example, the node table vid field *       description might contain "Always holds the largest (most *       recent) {node_revisions}.vid value for this nid." *     - 'type': The generic datatype: 'varchar', 'int', 'serial' *       'float', 'numeric', 'text', 'blob' or 'datetime'.  Most types *       just map to the according database engine specific *       datatypes.  Use 'serial' for auto incrementing fields. This *       will expand to 'int auto_increment' on mysql. *     - 'serialize': A boolean indicating whether the field will be stored         as a serialized string. *     - 'size': The data size: 'tiny', 'small', 'medium', 'normal', *       'big'.  This is a hint about the largest value the field will *       store and determines which of the database engine specific *       datatypes will be used (e.g. on MySQL, TINYINT vs. INT vs. BIGINT). *       'normal', the default, selects the base type (e.g. on MySQL, *       INT, VARCHAR, BLOB, etc.). * *       Not all sizes are available for all data types. See *       db_type_map() for possible combinations. *     - 'not null': If true, no NULL values will be allowed in this *       database column.  Defaults to false. *     - 'default': The field's default value.  The PHP type of the *       value matters: '', '0', and 0 are all different.  If you *       specify '0' as the default value for a type 'int' field it *       will not work because '0' is a string containing the *       character "zero", not an integer. *     - 'length': The maximal length of a type 'char', 'varchar' or 'text' *       field.  Ignored for other field types. *     - 'unsigned': A boolean indicating whether a type 'int', 'float' *       and 'numeric' only is signed or unsigned.  Defaults to *       FALSE.  Ignored for other field types. *     - 'precision', 'scale': For type 'numeric' fields, indicates *       the precision (total number of significant digits) and scale *       (decimal digits right of the decimal point).  Both values are *       mandatory.  Ignored for other field types. * *     All parameters apart from 'type' are optional except that type *     'numeric' columns must specify 'precision' and 'scale'. * *  - 'primary key': An array of one or more key column specifiers (see below) *    that form the primary key. *  - 'unique keys': An associative array of unique keys ('keyname' => *    specification).  Each specification is an array of one or more *    key column specifiers (see below) that form a unique key on the table. *  - 'indexes':  An associative array of indexes ('indexame' => *    specification).  Each specification is an array of one or more *    key column specifiers (see below) that form an index on the *    table. * * A key column specifier is either a string naming a column or an * array of two elements, column name and length, specifying a prefix * of the named column. * * As an example, here is a SUBSET of the schema definition for * Drupal's 'node' table.  It show four fields (nid, vid, type, and * title), the primary key on field 'nid', a unique key named 'vid' on * field 'vid', and two indexes, one named 'nid' on field 'nid' and * one named 'node_title_type' on the field 'title' and the first four * bytes of the field 'type': * * @code * $schema['node'] = array( *   'fields' => array( *     'nid'      => array('type' => 'serial', 'unsigned' => TRUE, 'not null' => TRUE), *     'vid'      => array('type' => 'int', 'unsigned' => TRUE, 'not null' => TRUE, 'default' => 0), *     'type'     => array('type' => 'varchar', 'length' => 32, 'not null' => TRUE, 'default' => ''), *     'title'    => array('type' => 'varchar', 'length' => 128, 'not null' => TRUE, 'default' => ''), *   ), *   'primary key' => array('nid'), *   'unique keys' => array( *     'vid'     => array('vid') *   ), *   'indexes' => array( *     'nid'                 => array('nid'), *     'node_title_type'     => array('title', array('type', 4)), *   ), * ); * @endcode * * @see drupal_install_schema() */ /** * Create a new table from a Drupal table definition. * * @param $ret *   Array to which query results will be added. * @param $name *   The name of the table to create. * @param $table *   A Schema API table definition array. */function db_create_table(&$ret, $name, $table) {  $statements = db_create_table_sql($name, $table);  foreach ($statements as $statement) {    $ret[] = update_sql($statement);  }}/** * Return an array of field names from an array of key/index column specifiers. * * This is usually an identity function but if a key/index uses a column prefix * specification, this function extracts just the name. * * @param $fields *   An array of key/index column specifiers. * @return *   An array of field names. */function db_field_names($fields) {  $ret = array();  foreach ($fields as $field) {    if (is_array($field)) {      $ret[] = $field[0];    }    else {      $ret[] = $field;    }  }  return $ret;}/** * Given a Schema API field type, return the correct %-placeholder. * * Embed the placeholder in a query to be passed to db_query and and pass as an * argument to db_query a value of the specified type. * * @param $type *   The Schema API type of a field. * @return *   The placeholder string to embed in a query for that type. */function db_type_placeholder($type) {  switch ($type) {    case 'varchar':    case 'char':    case 'text':    case 'datetime':      return "'%s'";    case 'numeric':      // Numeric values are arbitrary precision numbers.  Syntacically, numerics      // should be specified directly in SQL. However, without single quotes      // the %s placeholder does not protect against non-numeric characters such      // as spaces which would expose us to SQL injection.      return '%n';    case 'serial':    case 'int':      return '%d';    case 'float':      return '%f';    case 'blob':      return '%b';  }  // There is no safe value to return here, so return something that  // will cause the query to fail.  return 'unsupported type '. $type .'for db_type_placeholder';}/** * @} End of "defgroup schemaapi". */
<?php// $Id$/** * @file * Administrative page callbacks for menu module. *//** * Menu callback which shows an overview page of all the custom menus and their descriptions. */function menu_overview_page() {  $result = db_query("SELECT * FROM {menu_custom} ORDER BY title");  $content = array();  while ($menu = db_fetch_array($result)) {    $menu['href'] = 'admin/build/menu-customize/'. $menu['menu_name'];    $menu['localized_options'] = array();    $menu['description'] = filter_xss_admin($menu['description']);    $content[] = $menu;  }  return theme('admin_block_content', $content);}/** * Form for editing an entire menu tree at once. * * Shows for one menu the menu items accessible to the current user and * relevant operations. */function menu_overview_form(&$form_state, $menu) {  global $menu_admin;  $sql = "    SELECT m.load_functions, m.to_arg_functions, m.access_callback, m.access_arguments, m.page_callback, m.page_arguments, m.title, m.title_callback, m.title_arguments, m.type, m.description, ml.*    FROM {menu_links} ml LEFT JOIN {menu_router} m ON m.path = ml.router_path    WHERE ml.menu_name = '%s'    ORDER BY p1 ASC, p2 ASC, p3 ASC, p4 ASC, p5 ASC, p6 ASC, p7 ASC, p8 ASC, p9 ASC";  $result = db_query($sql, $menu['menu_name']);  $tree = menu_tree_data($result);  $node_links = array();  menu_tree_collect_node_links($tree, $node_links);  // We indicate that a menu administrator is running the menu access check.  $menu_admin = TRUE;  menu_tree_check_access($tree, $node_links);  $menu_admin = FALSE;  $form = _menu_overview_tree_form($tree);  $form['#menu'] =  $menu;  if (element_children($form)) {    $form['submit'] = array(      '#type' => 'submit',      '#value' => t('Save configuration'),    );  }  else {    $form['empty_menu'] = array('#value' => t('There are no menu items yet.'));  }  return $form;}/** * Recursive helper function for menu_overview_form(). */function _menu_overview_tree_form($tree) {  static $form = array('#tree' => TRUE);  foreach ($tree as $data) {    $title = '';    $item = $data['link'];    // Don't show callbacks; these have $item['hidden'] < 0.    if ($item && $item['hidden'] >= 0) {      $mlid = 'mlid:'. $item['mlid'];      $form[$mlid]['#item'] = $item;      $form[$mlid]['#attributes'] = $item['hidden'] ? array('class' => 'menu-disabled') : array('class' => 'menu-enabled');      $form[$mlid]['title']['#value'] = l($item['title'], $item['href'], $item['localized_options']) . ($item['hidden'] ? ' ('. t('disabled') .')' : '');      $form[$mlid]['hidden'] = array(        '#type' => 'checkbox',        '#default_value' => !$item['hidden'],      );      $form[$mlid]['expanded'] = array(        '#type' => 'checkbox',        '#default_value' => $item['expanded'],      );      $form[$mlid]['weight'] = array(        '#type' => 'weight',        '#delta' => 50,        '#default_value' => isset($form_state[$mlid]['weight']) ? $form_state[$mlid]['weight'] : $item['weight'],      );      $form[$mlid]['mlid'] = array(        '#type' => 'hidden',        '#value' => $item['mlid'],      );      $form[$mlid]['plid'] = array(        '#type' => 'textfield',        '#default_value' => isset($form_state[$mlid]['plid']) ? $form_state[$mlid]['plid'] : $item['plid'],        '#size' => 6,      );      // Build a list of operations.      $operations = array();      $operations['edit'] = l(t('edit'), 'admin/build/menu/item/'. $item['mlid'] .'/edit');      // Only items created by the menu module can be deleted.      if ($item['module'] == 'menu' || $item['updated'] == 1) {        $operations['delete'] = l(t('delete'), 'admin/build/menu/item/'. $item['mlid'] .'/delete');      }      // Set the reset column.      elseif ($item['module'] == 'system' && $item['customized']) {        $operations['reset'] = l(t('reset'), 'admin/build/menu/item/'. $item['mlid'] .'/reset');      }      $form[$mlid]['operations'] = array();      foreach ($operations as $op => $value) {        $form[$mlid]['operations'][$op] = array('#value' => $value);      }    }    if ($data['below']) {      _menu_overview_tree_form($data['below']);    }  }  return $form;}/** * Submit handler for the menu overview form. * * This function takes great care in saving parent items first, then items * underneath them. Saving items in the incorrect order can break the menu tree. * * @see menu_overview_form() */function menu_overview_form_submit($form, &$form_state) {  // When dealing with saving menu items, the order in which these items are  // saved is critical. If a changed child item is saved before its parent,  // the child item could be saved with an invalid path past its immediate  // parent. To prevent this, save items in the form in the same order they  // are sent by $_POST, ensuring parents are saved first, then their children.  // See http://drupal.org/node/181126#comment-632270  $order = array_flip(array_keys($form['#post'])); // Get the $_POST order.  $form = array_merge($order, $form); // Update our original form with the new order.  $updated_items = array();  $fields = array('expanded', 'weight', 'plid');  foreach (element_children($form) as $mlid) {    if (isset($form[$mlid]['#item'])) {      $element = $form[$mlid];      // Update any fields that have changed in this menu item.      foreach ($fields as $field) {        if ($element[$field]['#value'] != $element[$field]['#default_value']) {          $element['#item'][$field] = $element[$field]['#value'];          $updated_items[$mlid] = $element['#item'];        }      }      // Hidden is a special case, the value needs to be reversed.      if ($element['hidden']['#value'] != $element['hidden']['#default_value']) {        $element['#item']['hidden'] = !$element['hidden']['#value'];        $updated_items[$mlid] = $element['#item'];      }    }  }  // Save all our changed items to the database.  foreach ($updated_items as $item) {    $item['customized'] = 1;    menu_link_save($item);  }}/** * Theme the menu overview form into a table. * * @ingroup themeable */function theme_menu_overview_form($form) {  drupal_add_tabledrag('menu-overview', 'match', 'parent', 'menu-plid', 'menu-plid', 'menu-mlid', TRUE, MENU_MAX_DEPTH - 1);  drupal_add_tabledrag('menu-overview', 'order', 'sibling', 'menu-weight');  $header = array(    t('Menu item'),    array('data' => t('Enabled'), 'class' => 'checkbox'),    array('data' => t('Expanded'), 'class' => 'checkbox'),    t('Weight'),    array('data' => t('Operations'), 'colspan' => '3'),  );  $rows = array();  foreach (element_children($form) as $mlid) {    if (isset($form[$mlid]['hidden'])) {      $element = &$form[$mlid];      // Build a list of operations.      $operations = array();      foreach (element_children($element['operations']) as $op) {        $operations[] = drupal_render($element['operations'][$op]);      }      while (count($operations) < 2) {        $operations[] = '';      }      // Add special classes to be used for tabledrag.js.      $element['plid']['#attributes']['class'] = 'menu-plid';      $element['mlid']['#attributes']['class'] = 'menu-mlid';      $element['weight']['#attributes']['class'] = 'menu-weight';      // Change the parent field to a hidden. This allows any value but hides the field.      $element['plid']['#type'] = 'hidden';      $row = array();      $row[] = theme('indentation', $element['#item']['depth'] - 1) . drupal_render($element['title']);      $row[] = array('data' => drupal_render($element['hidden']), 'class' => 'checkbox');      $row[] = array('data' => drupal_render($element['expanded']), 'class' => 'checkbox');      $row[] = drupal_render($element['weight']) . drupal_render($element['plid']) . drupal_render($element['mlid']);      $row = array_merge($row, $operations);      $row = array_merge(array('data' => $row), $element['#attributes']);      $row['class'] = !empty($row['class']) ? $row['class'] .' draggable' : 'draggable';      $rows[] = $row;    }  }  $output = '';  if ($rows) {    $output .= theme('table', $header, $rows, array('id' => 'menu-overview'));  }  $output .= drupal_render($form);  return $output;}/** * Menu callback; Build the menu link editing form. */function menu_edit_item(&$form_state, $type, $item, $menu) {  $form['menu'] = array(    '#type' => 'fieldset',    '#title' => t('Menu settings'),    '#collapsible' => FALSE,    '#tree' => TRUE,    '#weight' => -2,    '#attributes' => array('class' => 'menu-item-form'),    '#item' => $item,  );  if ($type == 'add' || empty($item)) {    // This is an add form, initialize the menu link.    $item = array('link_title' => '', 'mlid' => 0, 'plid' => 0, 'menu_name' => $menu['menu_name'], 'weight' => 0, 'link_path' => '', 'options' => array(), 'module' => 'menu', 'expanded' => 0, 'hidden' => 0, 'has_children' => 0);  }  foreach (array('link_path', 'mlid', 'module', 'has_children', 'options') as $key) {    $form['menu'][$key] = array('#type' => 'value', '#value' => $item[$key]);  }  // Any item created or edited via this interface is considered "customized".  $form['menu']['customized'] = array('#type' => 'value', '#value' => 1);  $form['menu']['original_item'] = array('#type' => 'value', '#value' => $item);  $path = $item['link_path'];  if (isset($item['options']['query'])) {    $path .= '?'. $item['options']['query'];  }  if (isset($item['options']['fragment'])) {    $path .= '#'. $item['options']['fragment'];  }  if ($item['module'] == 'menu') {    $form['menu']['link_path'] = array(      '#type' => 'textfield',      '#title' => t('Path'),      '#default_value' => $path,      '#description' => t('The path this menu item links to. This can be an internal Drupal path such as %add-node or an external URL such as %drupal. Enter %front to link to the front page.', array('%front' => '<front>', '%add-node' => 'node/add', '%drupal' => 'http://drupal.org')),      '#required' => TRUE,    );    $form['delete'] = array(      '#type' => 'submit',      '#value' => t('Delete'),      '#access' => $item['mlid'],      '#submit' => array('menu_item_delete_submit'),      '#weight' => 10,    );  }  else {    $form['menu']['_path'] = array(      '#type' => 'item',      '#title' => t('Path'),      '#description' => l($item['link_title'], $item['href'], $item['options']),    );  }  $form['menu']['link_title'] = array('#type' => 'textfield',    '#title' => t('Menu link title'),    '#default_value' => $item['link_title'],    '#description' => t('The link text corresponding to this item that should appear in the menu.'),    '#required' => TRUE,  );  $form['menu']['description'] = array(    '#type' => 'textarea',    '#title' => t('Description'),    '#default_value' => isset($item['options']['attributes']['title']) ? $item['options']['attributes']['title'] : '',    '#rows' => 1,    '#description' => t('The description displayed when hovering over a menu item.'),  );  $form['menu']['enabled'] = array(    '#type' => 'checkbox',    '#title' => t('Enabled'),    '#default_value' => !$item['hidden'],    '#description' => t('Menu items that are not enabled will not be listed in any menu.'),  );  $form['menu']['expanded'] = array(    '#type' => 'checkbox',    '#title' => t('Expanded'),    '#default_value' => $item['expanded'],    '#description' => t('If selected and this menu item has children, the menu will always appear expanded.'),  );  // Generate a list of possible parents (not including this item or descendants).  $options = menu_parent_options(menu_get_menus(), $item);  $default = $item['menu_name'] .':'. $item['plid'];  if (!isset($options[$default])) {    $default = 'navigation:0';  }  $form['menu']['parent'] = array(    '#type' => 'select',    '#title' => t('Parent item'),    '#default_value' => $default,    '#options' => $options,    '#description' => t('The maximum depth for an item and all its children is fixed at !maxdepth. Some menu items may not be available as parents if selecting them would exceed this limit.', array('!maxdepth' => MENU_MAX_DEPTH)),    '#attributes' => array('class' => 'menu-title-select'),  );  $form['menu']['weight'] = array(    '#type' => 'weight',    '#title' => t('Weight'),    '#delta' => 50,    '#default_value' => $item['weight'],    '#description' => t('Optional. In the menu, the heavier items will sink and the lighter items will be positioned nearer the top.'),  );  $form['submit'] = array('#type' => 'submit', '#value' => t('Save'));  return $form;}/** * Validate form values for a menu link being added or edited. */function menu_edit_item_validate($form, &$form_state) {  $item = &$form_state['values']['menu'];  $normal_path = drupal_get_normal_path($item['link_path']);  if ($item['link_path'] != $normal_path) {    drupal_set_message(t('The menu system stores system paths only, but will use the URL alias for display. %link_path has been stored as %normal_path', array('%link_path' => $item['link_path'], '%normal_path' => $normal_path)));    $item['link_path'] = $normal_path;  }  if (!menu_path_is_external($item['link_path'])) {    $parsed_link = parse_url($item['link_path']);    if (isset($parsed_link['query'])) {      $item['options']['query'] = $parsed_link['query'];    }    if (isset($parsed_link['fragment'])) {      $item['options']['fragment'] = $parsed_link['fragment'];    }    if ($item['link_path'] != $parsed_link['path']) {      $item['link_path'] = $parsed_link['path'];    }  }  if (!trim($item['link_path']) || !menu_valid_path($item)) {    form_set_error('link_path', t("The path '@link_path' is either invalid or you do not have access to it.", array('@link_path' => $item['link_path'])));  }}/** * Submit function for the delete button on the menu item editing form. */function menu_item_delete_submit($form, &$form_state) {  $form_state['redirect'] = 'admin/build/menu/item/'. $form_state['values']['menu']['mlid'] .'/delete';}/** * Process menu and menu item add/edit form submissions. */function menu_edit_item_submit($form, &$form_state) {  $item = &$form_state['values']['menu'];  // The value of "hidden" is the opposite of the value  // supplied by the "enabled" checkbox.  $item['hidden'] = (int) !$item['enabled'];  unset($item['enabled']);  $item['options']['attributes']['title'] = $item['description'];  list($item['menu_name'], $item['plid']) = explode(':', $item['parent']);  if (!menu_link_save($item)) {    drupal_set_message(t('There was an error saving the menu link.'), 'error');  }  $form_state['redirect'] = 'admin/build/menu-customize/'. $item['menu_name'];}/** * Menu callback; Build the form that handles the adding/editing of a custom menu. */function menu_edit_menu(&$form_state, $type, $menu = array()) {  if ($type == 'edit') {    $form['menu_name'] = array('#type' => 'value', '#value' => $menu['menu_name']);    $form['#insert'] = FALSE;    $form['delete'] = array(      '#type' => 'submit',      '#value' => t('Delete'),      '#access' => !in_array($menu['menu_name'], menu_list_system_menus()),      '#submit' => array('menu_custom_delete_submit'),      '#weight' => 10,    );  }  else {    $menu = array('menu_name' => '', 'title' => '', 'description' => '');    $form['menu_name'] = array(      '#type' => 'textfield',      '#title' => t('Menu name'),      '#maxsize' => MENU_MAX_MENU_NAME_LENGTH_UI,      '#description' => t('The machine-readable name of this menu. This text will be used for constructing the URL of the <em>menu overview</em> page for this menu. This name must contain only lowercase letters, numbers, and hyphens, and must be unique.'),      '#required' => TRUE,    );    $form['#insert'] = TRUE;  }  $form['#title'] = $menu['title'];  $form['title'] = array(    '#type' => 'textfield',    '#title' => t('Title'),    '#default_value' => $menu['title'],    '#required' => TRUE,  );  $form['description'] = array(    '#type' => 'textarea',    '#title' => t('Description'),    '#default_value' => $menu['description'],  );  $form['submit'] = array(    '#type' => 'submit',    '#value' => t('Save'),  );  return $form;}/** * Submit function for the 'Delete' button on the menu editing form. */function menu_custom_delete_submit($form, &$form_state) {  $form_state['redirect'] = 'admin/build/menu-customize/'. $form_state['values']['menu_name'] .'/delete';}/** * Menu callback; check access and get a confirm form for deletion of a custom menu. */function menu_delete_menu_page($menu) {  // System-defined menus may not be deleted.  if (in_array($menu['menu_name'], menu_list_system_menus())) {    drupal_access_denied();    return;  }  return drupal_get_form('menu_delete_menu_confirm', $menu);}/** * Build a confirm form for deletion of a custom menu. */function menu_delete_menu_confirm(&$form_state, $menu) {  $form['#menu'] = $menu;  $caption = '';  $num_links = db_result(db_query("SELECT COUNT(*) FROM {menu_links} WHERE menu_name = '%s'", $menu['menu_name']));  if ($num_links) {    $caption .= '<p>'. format_plural($num_links, '<strong>Warning:</strong> There is currently 1 menu item in %title. It will be deleted (system-defined items will be reset).', '<strong>Warning:</strong> There are currently @count menu items in %title. They will be deleted (system-defined items will be reset).', array('%title' => $menu['title'])) .'</p>';  }  $caption .= '<p>'. t('This action cannot be undone.') .'</p>';  return confirm_form($form, t('Are you sure you want to delete the custom menu %title?', array('%title' => $menu['title'])), 'admin/build/menu-customize/'. $menu['menu_name'], $caption, t('Delete'));}/** * Delete a custom menu and all items in it. */function menu_delete_menu_confirm_submit($form, &$form_state) {  $menu = $form['#menu'];  $form_state['redirect'] = 'admin/build/menu';  // System-defined menus may not be deleted - only menus defined by this module.  if (in_array($menu['menu_name'], menu_list_system_menus())  || !db_result(db_query("SELECT COUNT(*) FROM {menu_custom} WHERE menu_name = '%s'", $menu['menu_name']))) {    return;  }  // Reset all the menu links defined by the system via hook_menu.  $result = db_query("SELECT * FROM {menu_links} ml INNER JOIN {menu_router} m ON ml.router_path = m.path WHERE ml.menu_name = '%s' AND ml.module = 'system' ORDER BY m.number_parts ASC", $menu['menu_name']);  while ($item = db_fetch_array($result)) {    menu_reset_item($item);  }  // Delete all links to the overview page for this menu.  $result = db_query("SELECT mlid FROM {menu_links} ml WHERE ml.link_path = '%s'", 'admin/build/menu-customize/'. $menu['menu_name']);  while ($m = db_fetch_array($result)) {    menu_link_delete($m['mlid']);  }  // Delete all the links in the menu and the menu from the list of custom menus.  db_query("DELETE FROM {menu_links} WHERE menu_name = '%s'", $menu['menu_name']);  db_query("DELETE FROM {menu_custom} WHERE menu_name = '%s'", $menu['menu_name']);  // Delete all the blocks for this menu.  db_query("DELETE FROM {blocks} WHERE module = 'menu' AND delta = '%s'", $menu['menu_name']);  db_query("DELETE FROM {blocks_roles} WHERE module = 'menu' AND delta = '%s'", $menu['menu_name']);  menu_cache_clear_all();  cache_clear_all();  $t_args = array('%title' => $menu['title']);  drupal_set_message(t('The custom menu %title has been deleted.', $t_args));  watchdog('menu', 'Deleted custom menu %title and all its menu items.', $t_args, WATCHDOG_NOTICE);}/** * Validates the human and machine-readable names when adding or editing a menu. */function menu_edit_menu_validate($form, &$form_state) {  $item = $form_state['values'];  if (preg_match('/[^a-z0-9-]/', $item['menu_name'])) {    form_set_error('menu_name', t('The menu name may only consist of lowercase letters, numbers, and hyphens.'));  }  if (strlen($item['menu_name']) > MENU_MAX_MENU_NAME_LENGTH_UI) {    form_set_error('menu_name', format_plural(MENU_MAX_MENU_NAME_LENGTH_UI, "The menu name can't be longer than 1 character.", "The menu name can't be longer than @count characters."));  }  if ($form['#insert']) {    // We will add 'menu-' to the menu name to help avoid name-space conflicts.    $item['menu_name'] = 'menu-'. $item['menu_name'];    if (db_result(db_query("SELECT menu_name FROM {menu_custom} WHERE menu_name = '%s'", $item['menu_name'])) ||      db_result(db_query_range("SELECT menu_name FROM {menu_links} WHERE menu_name = '%s'", $item['menu_name'], 0, 1))) {      form_set_error('menu_name', t('The menu already exists.'));    }  }}/** * Submit function for adding or editing a custom menu. */function menu_edit_menu_submit($form, &$form_state) {  $menu = $form_state['values'];  $path = 'admin/build/menu-customize/';  if ($form['#insert']) {    // Add 'menu-' to the menu name to help avoid name-space conflicts.    $menu['menu_name'] = 'menu-'. $menu['menu_name'];    $link['link_title'] = $menu['title'];    $link['link_path'] = $path . $menu['menu_name'];    $link['router_path'] = $path .'%';    $link['module'] = 'menu';    $link['plid'] = db_result(db_query("SELECT mlid FROM {menu_links} WHERE link_path = '%s' AND module = '%s'", 'admin/build/menu', 'system'));    menu_link_save($link);    db_query("INSERT INTO {menu_custom} (menu_name, title, description) VALUES ('%s', '%s', '%s')", $menu['menu_name'], $menu['title'], $menu['description']);  }  else {    db_query("UPDATE {menu_custom} SET title = '%s', description = '%s' WHERE menu_name = '%s'", $menu['title'], $menu['description'], $menu['menu_name']);    $result = db_query("SELECT mlid FROM {menu_links} WHERE link_path = '%s'", $path . $menu['menu_name']);    while ($m = db_fetch_array($result)) {      $link = menu_link_load($m['mlid']);      $link['link_title'] = $menu['title'];      menu_link_save($link);    }  }  $form_state['redirect'] = $path . $menu['menu_name'];}/** * Menu callback; Check access and present a confirm form for deleting a menu link. */function menu_item_delete_page($item) {  // Links defined via hook_menu may not be deleted. Updated items are an  // exception, as they can be broken.  if ($item['module'] == 'system' && !$item['updated']) {    drupal_access_denied();    return;  }  return drupal_get_form('menu_item_delete_form', $item);}/** * Build a confirm form for deletion of a single menu link. */function menu_item_delete_form(&$form_state, $item) {  $form['#item'] = $item;  return confirm_form($form, t('Are you sure you want to delete the custom menu item %item?', array('%item' => $item['link_title'])), 'admin/build/menu-customize/'. $item['menu_name']);}/** * Process menu delete form submissions. */function menu_item_delete_form_submit($form, &$form_state) {  $item = $form['#item'];  menu_link_delete($item['mlid']);  $t_args = array('%title' => $item['link_title']);  drupal_set_message(t('The menu item %title has been deleted.', $t_args));  watchdog('menu', 'Deleted menu item %title.', $t_args, WATCHDOG_NOTICE);  $form_state['redirect'] = 'admin/build/menu-customize/'. $item['menu_name'];}/** * Menu callback; reset a single modified item. */function menu_reset_item_confirm(&$form_state, $item) {  $form['item'] = array('#type' => 'value', '#value' => $item);  return confirm_form($form, t('Are you sure you want to reset the item %item to its default values?', array('%item' => $item['link_title'])), 'admin/build/menu-customize/'. $item['menu_name'], t('Any customizations will be lost. This action cannot be undone.'), t('Reset'));}/** * Process menu reset item form submissions. */function menu_reset_item_confirm_submit($form, &$form_state) {  $item = $form_state['values']['item'];  $new_item = menu_reset_item($item);  drupal_set_message(t('The menu item was reset to its default settings.'));  $form_state['redirect'] = 'admin/build/menu-customize/'. $new_item['menu_name'];}/** * Menu callback; Build the form presenting menu configuration options. */function menu_configure() {  $form['intro'] = array(    '#type' => 'item',    '#value' => t('The menu module allows on-the-fly creation of menu links in the content authoring forms. The following option sets the default menu in which a new link will be added.'),  );  $menu_options = menu_get_menus();  $form['menu_default_node_menu'] = array(    '#type' => 'select',    '#title' => t('Default menu for content'),    '#default_value' => variable_get('menu_default_node_menu', 'primary-links'),    '#options' => $menu_options,    '#description' => t('Choose the menu to be the default in the menu options in the content authoring form.'),  );  $primary = variable_get('menu_primary_links_source', 'primary-links');  $primary_options = array_merge($menu_options, array('' => t('No primary links')));  $form['menu_primary_links_source'] = array(    '#type' => 'select',    '#title' => t('Source for the primary links'),    '#default_value' => $primary,    '#options' => $primary_options,    '#tree' => FALSE,    '#description' => t('Select what should be displayed as the primary links.'),  );  $secondary_options = array_merge($menu_options, array('' => t('No secondary links')));  $form["menu_secondary_links_source"] = array(    '#type' => 'select',    '#title' => t('Source for the secondary links'),    '#default_value' => variable_get('menu_secondary_links_source', 'secondary-links'),    '#options' => $secondary_options,    '#tree' => FALSE,    '#description' => t('Select what should be displayed as the secondary links. You can choose the same menu for secondary links as for primary links (currently %primary). If you do this, the children of the active primary menu link will be displayed as secondary links.', array('%primary' => $primary_options[$primary])),  );  return system_settings_form($form);}
<?php// $Id$/** * @file * Manages displaying online help. *//** * Implementation of hook_menu(). */function help_menu() {  $items['admin/help'] = array(    'title' => 'Help',    'page callback' => 'help_main',    'access arguments' => array('access administration pages'),    'weight' => 9,    'file' => 'help.admin.inc',  );  foreach (module_implements('help', TRUE) as $module) {    $items['admin/help/'. $module] = array(      'title' => $module,      'page callback' => 'help_page',      'page arguments' => array(2),      'access arguments' => array('access administration pages'),      'type' => MENU_CALLBACK,      'file' => 'help.admin.inc',    );  }  return $items;}/** * Implementation of hook_help(). */function help_help($path, $arg) {  switch ($path) {    case 'admin/help':      $output = '<p>'. t('This guide provides context sensitive help on the use and configuration of <a href="@drupal">Drupal</a> and its modules, and is a supplement to the more extensive online <a href="@handbook">Drupal handbook</a>. The online handbook may contain more up-to-date information, is annotated with helpful user-contributed comments, and serves as the definitive reference point for all Drupal documentation.', array('@drupal' => 'http://drupal.org', '@handbook' => 'http://drupal.org/handbook')) .'</p>';      return $output;    case 'admin/help#help':      $output = '<p>'. t('The help module provides context sensitive help on the use and configuration of <a href="@drupal">Drupal</a> and its modules, and is a supplement to the more extensive online <a href="@handbook">Drupal handbook</a>. The online handbook may contain more up-to-date information, is annotated with helpful user-contributed comments, and serves as the definitive reference point for all Drupal documentation.', array('@drupal' => 'http://drupal.org', '@handbook' => 'http://drupal.org/handbook')) .'</p>';      $output .= '<p>'. t('For more information, see the online handbook entry for <a href="@help">Help module</a>.', array('@help' => 'http://drupal.org/handbook/modules/help/')) .'</p>';      return $output;  }}
<?php// $Id$/** * @file * Redirects logging messages to syslog. */if (defined('LOG_LOCAL0')) {  define('DEFAULT_SYSLOG_FACILITY', LOG_LOCAL0);}else {  define('DEFAULT_SYSLOG_FACILITY', LOG_USER);}/** * Implementation of hook_help(). */function syslog_help($path, $arg) {  switch ($path) {    case 'admin/help#syslog':      $output = '<p>'. t("The syslog module enables Drupal to send messages to the operating system's logging facility.") .'</p>';      $output .= '<p>'. t('Syslog is an operating system administrative logging tool, and provides valuable information for use in system management and security auditing. Most suited to medium and large sites, syslog provides filtering tools that allow messages to be routed by type and severity. On UNIX/Linux systems, the file /etc/syslog.conf defines this routing configuration; on Microsoft Windows, all messages are sent to the Event Log. For more information on syslog facilities, severity levels, and how to set up a syslog.conf file, see <a href="@syslog_conf">UNIX/Linux syslog.conf</a> and PHP\'s <a href="@php_openlog">openlog</a> and <a href="@php_syslog">syslog</a> functions.', array('@syslog_conf' => url('http://www.rt.com/man/syslog.5.html'), '@php_openlog' => url('http://www.php.net/manual/en/function.openlog.php'), '@php_syslog' => url('http://www.php.net/manual/en/function.syslog.php'))) .'</p>';      $output .= '<p>'. t('For more information, see the online handbook entry for <a href="@syslog">Syslog module</a>.', array('@syslog' => 'http://drupal.org/handbook/modules/syslog')) .'</p>';      return $output;  }}function syslog_menu() {  $items['admin/settings/logging/syslog'] = array(    'title'          => 'Syslog',    'description'    => 'Settings for syslog logging. Syslog is an operating system administrative logging tool used in systems management and security auditing. Most suited to medium and large sites, syslog provides filtering tools that allow messages to be routed by type and severity.',    'page callback'  => 'drupal_get_form',    'page arguments' => array('syslog_admin_settings'),    'access arguments' => array('administer site configuration'),  );  return $items;}function syslog_admin_settings() {  $form['syslog_facility'] = array(    '#type'          => 'select',    '#title'         => t('Send events to this syslog facility'),    '#default_value' => variable_get('syslog_facility', DEFAULT_SYSLOG_FACILITY),    '#options'       => syslog_facility_list(),    '#description'   => t('Select the syslog facility code under which Drupal\'s messages should be sent. On UNIX/Linux systems, Drupal can flag its messages with the code LOG_LOCAL0 through LOG_LOCAL7; for Microsoft Windows, all messages are flagged with the code LOG_USER. Depending on the system configuration, syslog and other logging tools use this code to identify or filter Drupal messages from within the entire system log. For more information on syslog, see <a href="@syslog_help">Syslog help</a>.', array(      '@syslog_help' => url('admin/help/syslog'))),  );  return system_settings_form($form);}function syslog_facility_list() {  $facility_list = array(    LOG_USER   => t('LOG_USER - User level messages. Use this for Windows.'),  );  if (defined('LOG_LOCAL0')) {    $facility_list += array(      LOG_LOCAL0 => t('LOG_LOCAL0 - Local 0'),      LOG_LOCAL1 => t('LOG_LOCAL1 - Local 1'),      LOG_LOCAL2 => t('LOG_LOCAL2 - Local 2'),      LOG_LOCAL3 => t('LOG_LOCAL3 - Local 3'),      LOG_LOCAL4 => t('LOG_LOCAL4 - Local 4'),      LOG_LOCAL5 => t('LOG_LOCAL5 - Local 5'),      LOG_LOCAL6 => t('LOG_LOCAL6 - Local 6'),      LOG_LOCAL7 => t('LOG_LOCAL7 - Local 7'),    );  }  return $facility_list;}function syslog_watchdog($entry) {  static $log_init = FALSE;  if (!$log_init) {    $log_init = TRUE;    openlog('drupal', LOG_NDELAY, variable_get('syslog_facility', DEFAULT_SYSLOG_FACILITY));  }  syslog($entry['severity'], theme('syslog_format', $entry));}function syslog_theme() {  return array(    'syslog_format' => array(      'arguments' => array('entry' => NULL),    ),  );}/** * Format a system log entry. * * @ingroup themeable */function theme_syslog_format($entry) {  global $base_url;  $message  = $base_url;  $message .= '|'. $entry['timestamp'];  $message .= '|'. $entry['type'];  $message .= '|'. $entry['ip'];  $message .= '|'. $entry['request_uri'];  $message .= '|'. $entry['referer'];  $message .= '|'. $entry['user']->uid;  $message .= '|'. strip_tags($entry['link']);  $message .= '|'. strip_tags(is_null($entry['variables']) ? $entry['message'] : strtr($entry['message'], $entry['variables']));  return $message;}
<?php// $Id$/** * Implementation of hook_schema(). */function user_schema() {  $schema['access'] = array(    'description' => 'Stores site access rules.',    'fields' => array(      'aid' => array(        'type' => 'serial',        'not null' => TRUE,        'description' => 'Primary Key: Unique access ID.',      ),      'mask' => array(        'type' => 'varchar',        'length' => 255,        'not null' => TRUE,        'default' => '',        'description' => 'Text mask used for filtering access.',      ),      'type' => array(        'type' => 'varchar',        'length' => 255,        'not null' => TRUE,        'default' => '',        'description' => 'Type of access rule: name, mail or host.',      ),      'status' => array(        'type' => 'int',        'not null' => TRUE,        'default' => 0,        'size' => 'tiny',        'description' => 'Whether rule is to allow(1) or deny(0) access.',      ),    ),    'primary key' => array('aid'),  );  $schema['authmap'] = array(    'description' => 'Stores distributed authentication mapping.',    'fields' => array(      'aid' => array(        'description' => 'Primary Key: Unique authmap ID.',        'type' => 'serial',        'unsigned' => TRUE,        'not null' => TRUE,      ),      'uid' => array(        'type' => 'int',        'not null' => TRUE,        'default' => 0,        'description' => "User's {users}.uid.",      ),      'authname' => array(        'type' => 'varchar',        'length' => 128,        'not null' => TRUE,        'default' => '',        'description' => 'Unique authentication name.',      ),      'module' => array(        'type' => 'varchar',        'length' => 128,        'not null' => TRUE,        'default' => '',        'description' => 'Module which is controlling the authentication.',      ),    ),    'unique keys' => array('authname' => array('authname')),    'primary key' => array('aid'),  );  $schema['permission'] = array(    'description' => 'Stores permissions for users.',    'fields' => array(      'pid' => array(        'type' => 'serial',        'not null' => TRUE,        'description' => 'Primary Key: Unique permission ID.',      ),      'rid' => array(        'type' => 'int',        'unsigned' => TRUE,        'not null' => TRUE,        'default' => 0,        'description' => 'The {role}.rid to which the permissions are assigned.',      ),      'perm' => array(        'type' => 'text',        'not null' => FALSE,        'size' => 'big',        'description' => 'List of permissions being assigned.',      ),      'tid' => array(        'type' => 'int',        'unsigned' => TRUE,        'not null' => TRUE,        'default' => 0,        'description' => 'Originally intended for taxonomy-based permissions, but never used.',      ),    ),    'primary key' => array('pid'),    'indexes' => array('rid' => array('rid')),  );  $schema['role'] = array(    'description' => 'Stores user roles.',    'fields' => array(      'rid' => array(        'type' => 'serial',        'unsigned' => TRUE,        'not null' => TRUE,        'description' => 'Primary Key: Unique role id.',      ),      'name' => array(        'type' => 'varchar',        'length' => 64,        'not null' => TRUE,        'default' => '',        'description' => 'Unique role name.',      ),    ),    'unique keys' => array('name' => array('name')),    'primary key' => array('rid'),  );  $schema['users'] = array(    'description' => 'Stores user data.',    'fields' => array(      'uid' => array(        'type' => 'serial',        'unsigned' => TRUE,        'not null' => TRUE,        'description' => 'Primary Key: Unique user ID.',      ),      'name' => array(        'type' => 'varchar',        'length' => 60,        'not null' => TRUE,        'default' => '',        'description' => 'Unique user name.',      ),      'pass' => array(        'type' => 'varchar',        'length' => 32,        'not null' => TRUE,        'default' => '',        'description' => "User's password (md5 hash).",      ),      'mail' => array(        'type' => 'varchar',        'length' => 64,        'not null' => FALSE,        'default' => '',        'description' => "User's email address.",      ),      'mode' => array(        'type' => 'int',        'not null' => TRUE,        'default' => 0,        'size' => 'tiny',        'description' => 'Per-user comment display mode (threaded vs. flat), used by the {comment} module.',      ),      'sort' => array(        'type' => 'int',        'not null' => FALSE,        'default' => 0,        'size' => 'tiny',        'description' => 'Per-user comment sort order (newest vs. oldest first), used by the {comment} module.',      ),      'threshold' => array(        'type' => 'int',        'not null' => FALSE,        'default' => 0,        'size' => 'tiny',        'description' => 'Previously used by the {comment} module for per-user preferences; no longer used.',      ),      'theme' => array(        'type' => 'varchar',        'length' => 255,        'not null' => TRUE,        'default' => '',        'description' => "User's default theme.",      ),      'signature' => array(        'type' => 'varchar',        'length' => 255,        'not null' => TRUE,        'default' => '',        'description' => "User's signature.",      ),      'signature_format' => array(        'type' => 'int',        'size' => 'small',        'not null' => TRUE,        'default' => 0,        'description' => 'The {filter_formats}.format of the signature.',      ),      'created' => array(        'type' => 'int',        'not null' => TRUE,        'default' => 0,        'description' => 'Timestamp for when user was created.',      ),      'access' => array(        'type' => 'int',        'not null' => TRUE,        'default' => 0,        'description' => 'Timestamp for previous time user accessed the site.',      ),      'login' => array(        'type' => 'int',        'not null' => TRUE,        'default' => 0,        'description' => "Timestamp for user's last login.",      ),      'status' => array(        'type' => 'int',        'not null' => TRUE,        'default' => 0,        'size' => 'tiny',        'description' => 'Whether the user is active(1) or blocked(0).',      ),      'timezone' => array(        'type' => 'varchar',        'length' => 8,        'not null' => FALSE,        'description' => "User's timezone.",      ),      'language' => array(        'type' => 'varchar',        'length' => 12,        'not null' => TRUE,        'default' => '',        'description' => "User's default language.",      ),      'picture' => array(        'type' => 'varchar',        'length' => 255,        'not null' => TRUE,        'default' => '',        'description' => "Path to the user's uploaded picture.",      ),      'init' => array(        'type' => 'varchar',        'length' => 64,        'not null' => FALSE,        'default' => '',        'description' => 'Email address used for initial account creation.',      ),      'data' => array(        'type' => 'text',        'not null' => FALSE,        'size' => 'big',        'description' => 'A serialized array of name value pairs that are related to the user. Any form values posted during user edit are stored and are loaded into the $user object during user_load(). Use of this field is discouraged and it will likely disappear in a future version of Drupal.',      ),    ),    'indexes' => array(      'access' => array('access'),      'created' => array('created'),      'mail' => array('mail'),    ),    'unique keys' => array(      'name' => array('name'),    ),    'primary key' => array('uid'),  );  $schema['users_roles'] = array(    'description' => 'Maps users to roles.',    'fields' => array(      'uid' => array(        'type' => 'int',        'unsigned' => TRUE,        'not null' => TRUE,        'default' => 0,        'description' => 'Primary Key: {users}.uid for user.',      ),      'rid' => array(        'type' => 'int',        'unsigned' => TRUE,        'not null' => TRUE,        'default' => 0,        'description' => 'Primary Key: {role}.rid for role.',      ),    ),    'primary key' => array('uid', 'rid'),    'indexes' => array(      'rid' => array('rid'),    ),  );  return $schema;}
<?php// $Id$/** * Implementation of hook_install(). */function search_install() {  // Create tables.  drupal_install_schema('search');}/** * Implementation of hook_uninstall(). */function search_uninstall() {  // Remove tables.  drupal_uninstall_schema('search');  variable_del('minimum_word_size');  variable_del('overlap_cjk');  variable_del('search_cron_limit');}/** * Implementation of hook_schema(). */function search_schema() {  $schema['search_dataset'] = array(    'description' => 'Stores items that will be searched.',    'fields' => array(      'sid' => array(        'type' => 'int',        'unsigned' => TRUE,        'not null' => TRUE,        'default' => 0,        'description' => 'Search item ID, e.g. node ID for nodes.',      ),      'type' => array(        'type' => 'varchar',        'length' => 16,        'not null' => FALSE,        'description' => 'Type of item, e.g. node.',      ),      'data' => array(        'type' => 'text',        'not null' => TRUE,        'size' => 'big',        'description' => 'List of space-separated words from the item.',      ),      'reindex' => array(        'type' => 'int',        'unsigned' => TRUE,        'not null' => TRUE,        'default' => 0,        'description' => 'Set to force node reindexing.',      ),    ),    'unique keys' => array('sid_type' => array('sid', 'type')),  );  $schema['search_index'] = array(    'description' => 'Stores the search index, associating words, items and scores.',    'fields' => array(      'word' => array(        'type' => 'varchar',        'length' => 50,        'not null' => TRUE,        'default' => '',        'description' => 'The {search_total}.word that is associated with the search item.',      ),      'sid' => array(        'type' => 'int',        'unsigned' => TRUE,        'not null' => TRUE,        'default' => 0,        'description' => 'The {search_dataset}.sid of the searchable item to which the word belongs.',      ),      'type' => array(        'type' => 'varchar',        'length' => 16,        'not null' => FALSE,        'description' => 'The {search_dataset}.type of the searchable item to which the word belongs.',      ),      'score' => array(        'type' => 'float',        'not null' => FALSE,        'description' => 'The numeric score of the word, higher being more important.',      ),    ),    'indexes' => array(      'sid_type' => array('sid', 'type'),      'word' => array('word')    ),    'unique keys' => array('word_sid_type' => array('word', 'sid', 'type')),  );  $schema['search_total'] = array(    'description' => 'Stores search totals for words.',    'fields' => array(      'word' => array(        'description' => 'Primary Key: Unique word in the search index.',        'type' => 'varchar',        'length' => 50,        'not null' => TRUE,        'default' => '',      ),      'count' => array(        'description' => "The count of the word in the index using Zipf's law to equalize the probability distribution.",        'type' => 'float',        'not null' => FALSE,      ),    ),    'primary key' => array('word'),  );  $schema['search_node_links'] = array(    'description' => 'Stores items (like nodes) that link to other nodes, used to improve search scores for nodes that are frequently linked to.',    'fields' => array(      'sid' => array(        'type' => 'int',        'unsigned' => TRUE,        'not null' => TRUE,        'default' => 0,        'description' => 'The {search_dataset}.sid of the searchable item containing the link to the node.',      ),      'type' => array(        'type' => 'varchar',        'length' => 16,        'not null' => TRUE,        'default' => '',        'description' => 'The {search_dataset}.type of the searchable item containing the link to the node.',      ),      'nid' => array(        'type' => 'int',        'unsigned' => TRUE,        'not null' => TRUE,        'default' => 0,        'description' => 'The {node}.nid that this item links to.',      ),      'caption' => array(        'type' => 'text',        'size' => 'big',        'not null' => FALSE,        'description' => 'The text used to link to the {node}.nid.',      ),    ),    'primary key' => array('sid', 'type', 'nid'),    'indexes' => array('nid' => array('nid')),  );  return $schema;}
<?php// $Id$/** * @file * Configuration system that lets administrators modify the workings of the site. *//** * The current system version. */define('VERSION', '6.16');/** * Core API compatibility. */define('DRUPAL_CORE_COMPATIBILITY', '6.x');/** * Minimum supported version of PHP. */define('DRUPAL_MINIMUM_PHP',    '4.3.5');/** * Minimum recommended value of PHP memory_limit. */define('DRUPAL_MINIMUM_PHP_MEMORY_LIMIT',    '16M');/** * Minimum supported version of MySQL, if it is used. */define('DRUPAL_MINIMUM_MYSQL',  '4.1.1');/** * Minimum supported version of PostgreSQL, if it is used. */define('DRUPAL_MINIMUM_PGSQL',  '7.4');/** * Maximum age of temporary files in seconds. */define('DRUPAL_MAXIMUM_TEMP_FILE_AGE', 21600);/** * Implementation of hook_help(). */function system_help($path, $arg) {  global $base_url;  switch ($path) {    case 'admin/help#system':      $output = '<p>'. t('The system module is at the foundation of your Drupal website, and provides basic but extensible functionality for use by other modules and themes. Some integral elements of Drupal are contained in and managed by the system module, including caching, enabling or disabling of modules and themes, preparing and displaying the administrative page, and configuring fundamental site settings. A number of key system maintenance operations are also part of the system module.') .'</p>';      $output .= '<p>'. t('The system module provides:') .'</p>';      $output .= '<ul><li>'. t('support for enabling and disabling <a href="@modules">modules</a>. Drupal comes packaged with a number of core modules; each module provides a discrete set of features and may be enabled depending on the needs of your site. A wide array of additional modules contributed by members of the Drupal community are available for download at the <a href="@drupal-modules">Drupal.org module page</a>.', array('@modules' => url('admin/build/modules'), '@drupal-modules' => 'http://drupal.org/project/modules')) .'</li>';      $output .= '<li>'. t('support for enabling and disabling <a href="@themes">themes</a>, which determine the design and presentation of your site. Drupal comes packaged with several core themes and additional contributed themes are available at the <a href="@drupal-themes">Drupal.org theme page</a>.', array('@themes' => url('admin/build/themes'), '@drupal-themes' => 'http://drupal.org/project/themes')) .'</li>';      $output .= '<li>'. t('a robust <a href="@cache-settings">caching system</a> that allows the efficient re-use of previously-constructed web pages and web page components. Drupal stores the pages requested by anonymous users in a compressed format; depending on your site configuration and the amount of your web traffic tied to anonymous visitors, Drupal\'s caching system may significantly increase the speed of your site.', array('@cache-settings' => url('admin/settings/performance'))) .'</li>';      $output .= '<li>'. t('a set of routine administrative operations that rely on a correctly-configured <a href="@cron">cron maintenance task</a> to run automatically. A number of other modules, including the feed aggregator, ping module and search also rely on <a href="@cron">cron maintenance tasks</a>. For more information, see the online handbook entry for <a href="@handbook">configuring cron jobs</a>.', array('@cron' => url('admin/reports/status'), '@handbook' => 'http://drupal.org/cron')) .'</li>';      $output .= '<li>'. t('basic configuration options for your site, including <a href="@date-settings">date and time settings</a>, <a href="@file-system">file system settings</a>, <a href="@clean-url">clean URL support</a>, <a href="@site-info">site name and other information</a>, and a <a href="@site-maintenance">site maintenance</a> function for taking your site temporarily off-line.', array('@date-settings' => url('admin/settings/date-time'), '@file-system' => url('admin/settings/file-system'), '@clean-url' => url('admin/settings/clean-urls'), '@site-info' => url('admin/settings/site-information'), '@site-maintenance' => url('admin/settings/site-maintenance'))) .'</li></ul>';      $output .= '<p>'. t('For more information, see the online handbook entry for <a href="@system">System module</a>.', array('@system' => 'http://drupal.org/handbook/modules/system/')) .'</p>';      return $output;    case 'admin':      return '<p>'. t('Welcome to the administration section. Here you may control how your site functions.') .'</p>';    case 'admin/by-module':      return '<p>'. t('This page shows you all available administration tasks for each module.') .'</p>';    case 'admin/build/themes':      $output = '<p>'. t('Select which themes are available to your users and specify the default theme. To configure site-wide display settings, click the "configure" task above. Alternatively, to override these settings in a specific theme, click the "configure" link for that theme. Note that different themes may have different regions available for displaying content; for consistency in presentation, you may wish to enable only one theme.') .'</p>';      $output .= '<p>'. t('To change the appearance of your site, a number of <a href="@themes">contributed themes</a> are available.', array('@themes' => 'http://drupal.org/project/themes')) .'</p>';      return $output;    case 'admin/build/themes/settings/'. $arg[4]:      $reference = explode('.', $arg[4], 2);      $theme = array_pop($reference);      return '<p>'. t('These options control the display settings for the <code>%template</code> theme. When your site is displayed using this theme, these settings will be used. By clicking "Reset to defaults," you can choose to use the <a href="@global">global settings</a> for this theme.', array('%template' => $theme, '@global' => url('admin/build/themes/settings'))) .'</p>';    case 'admin/build/themes/settings':      return '<p>'. t('These options control the default display settings for your entire site, across all themes. Unless they have been overridden by a specific theme, these settings will be used.') .'</p>';    case 'admin/build/modules':      $output = '<p>'. t('Modules are plugins that extend Drupal\'s core functionality. Enable modules by selecting the <em>Enabled</em> checkboxes below and clicking the <em>Save configuration</em> button. Once a module is enabled, new <a href="@permissions">permissions</a> may be available. To reduce server load, modules with their <em>Throttle</em> checkbox selected are temporarily disabled when your site becomes extremely busy. (Note that the <em>Throttle</em> checkbox is only available if the Throttle module is enabled.)', array('@permissions' => url('admin/user/permissions')));      if (module_exists('throttle')) {        $output .= ' '. t('The auto-throttle functionality must be enabled on the <a href="@throttle">throttle configuration page</a> after having enabled the throttle module.', array('@throttle' => url('admin/settings/throttle')));      }      $output .= '</p>';      $output .= '<p>'. t('It is important that <a href="@update-php">update.php</a> is run every time a module is updated to a newer version.', array('@update-php' => $base_url .'/update.php')) .'</p>';      $output .= '<p>'. t('You can find all administration tasks belonging to a particular module on the <a href="@by-module">administration by module page</a>.', array('@by-module' => url('admin/by-module'))) .'</p>';      $output .= '<p>'. t('To extend the functionality of your site, a number of <a href="@modules">contributed modules</a> are available.', array('@modules' => 'http://drupal.org/project/modules')) .'</p>';      $output .= '<p>'. t('To clear all caches, click the button on the <a href="@performance">Performance page</a>.', array('@performance' => url('admin/settings/performance', array('fragment' => 'edit-clear')))) .'</p>';      return $output;    case 'admin/build/modules/uninstall':      return '<p>'. t('The uninstall process removes all data related to a module. To uninstall a module, you must first disable it. Not all modules support this feature.') .'</p>';    case 'admin/build/block/configure':      if ($arg[4] == 'system' && $arg[5] == 0) {        return '<p>'. t('The <em>Powered by Drupal</em> block is an optional link to the home page of the Drupal project. While there is absolutely no requirement that sites feature this link, it may be used to show support for Drupal.') .'</p>';      }      break;    case 'admin/settings/actions':    case 'admin/settings/actions/manage':      $output = '<p>'. t('Actions are individual tasks that the system can do, such as unpublishing a piece of content or banning a user. Modules, such as the trigger module, can fire these actions when certain system events happen; for example, when a new post is added or when a user logs in. Modules may also provide additional actions.') .'</p>';      $output .= '<p>'. t('There are two types of actions: simple and advanced. Simple actions do not require any additional configuration, and are listed here automatically. Advanced actions can do more than simple actions; for example, send an e-mail to a specified address, or check for certain words within a piece of content. These actions need to be created and configured first before they may be used. To create an advanced action, select the action from the drop-down below and click the <em>Create</em> button.') .'</p>';      if (module_exists('trigger')) {        $output .= '<p>'. t('You may proceed to the <a href="@url">Triggers</a> page to assign these actions to system events.', array('@url' => url('admin/build/trigger'))) .'</p>';      }      return $output;    case 'admin/settings/actions/configure':      return t('An advanced action offers additional configuration options which may be filled out below. Changing the <em>Description</em> field is recommended, in order to better identify the precise action taking place. This description will be displayed in modules such as the trigger module when assigning actions to system events, so it is best if it is as descriptive as possible (for example, "Send e-mail to Moderation Team" rather than simply "Send e-mail").');    case 'admin/reports/status':      return '<p>'. t("Here you can find a short overview of your site's parameters as well as any problems detected with your installation. It may be useful to copy and paste this information into support requests filed on drupal.org's support forums and project issue queues.") .'</p>';  }}/** * Implementation of hook_theme(). */function system_theme() {  return array_merge(drupal_common_theme(), array(    'system_theme_select_form' => array(      'arguments' => array('form' => NULL),      'file' => 'system.admin.inc',    ),    'system_themes_form' => array(      'arguments' => array('form' => NULL),      'file' => 'system.admin.inc',    ),    'system_modules' => array(      'arguments' => array('form' => NULL),      'file' => 'system.admin.inc',    ),    'system_modules_uninstall' => array(      'arguments' => array('form' => NULL),      'file' => 'system.admin.inc',    ),    'status_report' => array(      'arguments' => array('requirements' => NULL),      'file' => 'system.admin.inc',    ),    'admin_page' => array(      'arguments' => array('blocks' => NULL),      'file' => 'system.admin.inc',    ),    'admin_block' => array(      'arguments' => array('block' => NULL),      'file' => 'system.admin.inc',    ),    'admin_block_content' => array(      'arguments' => array('content' => NULL),      'file' => 'system.admin.inc',    ),    'system_admin_by_module' => array(      'arguments' => array('menu_items' => NULL),      'file' => 'system.admin.inc',    ),    'system_powered_by' => array(      'arguments' => array('image_path' => NULL),    ),  ));}/** * Implementation of hook_perm(). */function system_perm() {  return array('administer site configuration', 'access administration pages', 'administer actions', 'access site reports', 'select different theme', 'administer files');}/** * Implementation of hook_elements(). */function system_elements() {  // Top level form  $type['form'] = array('#method' => 'post', '#action' => request_uri());  // Inputs  $type['submit'] = array('#input' => TRUE, '#name' => 'op', '#button_type' => 'submit', '#executes_submit_callback' => TRUE, '#process' => array('form_expand_ahah'));  $type['button'] = array('#input' => TRUE, '#name' => 'op', '#button_type' => 'submit', '#executes_submit_callback' => FALSE, '#process' => array('form_expand_ahah'));  $type['image_button'] = array('#input' => TRUE, '#button_type' => 'submit', '#executes_submit_callback' => TRUE, '#process' => array('form_expand_ahah'), '#return_value' => TRUE, '#has_garbage_value' => TRUE, '#src' => NULL);  $type['textfield'] = array('#input' => TRUE, '#size' => 60, '#maxlength' => 128, '#autocomplete_path' => FALSE, '#process' => array('form_expand_ahah'));  $type['password'] = array('#input' => TRUE, '#size' => 60, '#maxlength' => 128, '#process' => array('form_expand_ahah'));  $type['password_confirm'] = array('#input' => TRUE, '#process' => array('expand_password_confirm'));  $type['textarea'] = array('#input' => TRUE, '#cols' => 60, '#rows' => 5, '#resizable' => TRUE, '#process' => array('form_expand_ahah'));  $type['radios'] = array('#input' => TRUE, '#process' => array('expand_radios'));  $type['radio'] = array('#input' => TRUE, '#default_value' => NULL, '#process' => array('form_expand_ahah'));  $type['checkboxes'] = array('#input' => TRUE, '#process' => array('expand_checkboxes'), '#tree' => TRUE);  $type['checkbox'] = array('#input' => TRUE, '#return_value' => 1, '#process' => array('form_expand_ahah'));  $type['select'] = array('#input' => TRUE, '#size' => 0, '#multiple' => FALSE, '#process' => array('form_expand_ahah'));  $type['weight'] = array('#input' => TRUE, '#delta' => 10, '#default_value' => 0, '#process' => array('process_weight', 'form_expand_ahah'));  $type['date'] = array('#input' => TRUE, '#process' => array('expand_date'), '#element_validate' => array('date_validate'));  $type['file'] = array('#input' => TRUE, '#size' => 60);  // Form structure  $type['item'] = array('#value' => '');  $type['hidden'] = array('#input' => TRUE, '#process' => array('form_expand_ahah'));  $type['value'] = array('#input' => TRUE);  $type['markup'] = array('#prefix' => '', '#suffix' => '');  $type['fieldset'] = array('#collapsible' => FALSE, '#collapsed' => FALSE, '#value' => NULL, '#process' => array('form_expand_ahah'));  $type['token'] = array('#input' => TRUE);  return $type;}/** * Implementation of hook_menu(). */function system_menu() {  $items['system/files'] = array(    'title' => 'File download',    'page callback' => 'file_download',    'access callback' => TRUE,    'type' => MENU_CALLBACK,  );  $items['admin'] = array(    'title' => 'Administer',    'access arguments' => array('access administration pages'),    'page callback' => 'system_main_admin_page',    'weight' => 9,    'file' => 'system.admin.inc',  );  $items['admin/compact'] = array(    'title' => 'Compact mode',    'page callback' => 'system_admin_compact_page',    'access arguments' => array('access administration pages'),    'type' => MENU_CALLBACK,    'file' => 'system.admin.inc',  );  $items['admin/by-task'] = array(    'title' => 'By task',    'page callback' => 'system_main_admin_page',    'access arguments' => array('access administration pages'),    'file' => 'system.admin.inc',    'type' => MENU_DEFAULT_LOCAL_TASK,  );  $items['admin/by-module'] = array(    'title' => 'By module',    'page callback' => 'system_admin_by_module',    'access arguments' => array('access administration pages'),    'file' => 'system.admin.inc',    'type' => MENU_LOCAL_TASK,    'weight' => 2,  );  $items['admin/content'] = array(    'title' => 'Content management',    'description' => "Manage your site's content.",    'position' => 'left',    'weight' => -10,    'page callback' => 'system_admin_menu_block_page',    'access arguments' => array('access administration pages'),    'file' => 'system.admin.inc',  );  // menu items that are basically just menu blocks  $items['admin/settings'] = array(    'title' => 'Site configuration',    'description' => 'Adjust basic site configuration options.',    'position' => 'right',    'weight' => -5,    'page callback' => 'system_settings_overview',    'access arguments' => array('access administration pages'),    'file' => 'system.admin.inc',  );  $items['admin/build'] = array(    'title' => 'Site building',    'description' => 'Control how your site looks and feels.',    'position' => 'right',    'weight' => -10,    'page callback' => 'system_admin_menu_block_page',    'access arguments' => array('access administration pages'),    'file' => 'system.admin.inc',  );  $items['admin/settings/admin'] = array(    'title' => 'Administration theme',    'description' => 'Settings for how your administrative pages should look.',    'position' => 'left',    'page callback' => 'drupal_get_form',    'page arguments' => array('system_admin_theme_settings'),    'access arguments' => array('administer site configuration'),    'block callback' => 'system_admin_theme_settings',    'file' => 'system.admin.inc',  );  // Themes:  $items['admin/build/themes'] = array(    'title' => 'Themes',    'description' => 'Change which theme your site uses or allows users to set.',    'page callback' => 'drupal_get_form',    'page arguments' => array('system_themes_form', NULL),    'access arguments' => array('administer site configuration'),    'file' => 'system.admin.inc',  );  $items['admin/build/themes/select'] = array(    'title' => 'List',    'description' => 'Select the default theme.',    'type' => MENU_DEFAULT_LOCAL_TASK,    'weight' => -1,  );  $items['admin/build/themes/settings'] = array(    'title' => 'Configure',    'page arguments' => array('system_theme_settings'),    'access arguments' => array('administer site configuration'),    'type' => MENU_LOCAL_TASK,  );  // Theme configuration subtabs  $items['admin/build/themes/settings/global'] = array(    'title' => 'Global settings',    'type' => MENU_DEFAULT_LOCAL_TASK,    'weight' => -1,  );  foreach (list_themes() as $theme) {    $items['admin/build/themes/settings/'. $theme->name] = array(      'title' => $theme->info['name'],      'page arguments' => array('system_theme_settings', $theme->name),      'type' => MENU_LOCAL_TASK,      'access callback' => '_system_themes_access',      'access arguments' => array($theme),    );  }  // Modules:  $items['admin/build/modules'] = array(    'title' => 'Modules',    'description' => 'Enable or disable add-on modules for your site.',    'page callback' => 'drupal_get_form',    'page arguments' => array('system_modules'),    'access arguments' => array('administer site configuration'),    'file' => 'system.admin.inc',  );  $items['admin/build/modules/list'] = array(    'title' => 'List',    'type' => MENU_DEFAULT_LOCAL_TASK,  );  $items['admin/build/modules/list/confirm'] = array(    'title' => 'List',    'access arguments' => array('administer site configuration'),    'type' => MENU_CALLBACK,  );  $items['admin/build/modules/uninstall'] = array(    'title' => 'Uninstall',    'page arguments' => array('system_modules_uninstall'),    'access arguments' => array('administer site configuration'),    'type' => MENU_LOCAL_TASK,  );  $items['admin/build/modules/uninstall/confirm'] = array(    'title' => 'Uninstall',    'access arguments' => array('administer site configuration'),    'type' => MENU_CALLBACK,  );  // Actions:  $items['admin/settings/actions'] = array(    'title' => 'Actions',    'description' => 'Manage the actions defined for your site.',    'access arguments' => array('administer actions'),    'page callback' => 'system_actions_manage'  );  $items['admin/settings/actions/manage'] = array(    'title' => 'Manage actions',    'description' => 'Manage the actions defined for your site.',    'page callback' => 'system_actions_manage',    'type' => MENU_DEFAULT_LOCAL_TASK,    'weight' => -2,  );  $items['admin/settings/actions/configure'] = array(    'title' => 'Configure an advanced action',    'page callback' => 'drupal_get_form',    'page arguments' => array('system_actions_configure'),    'access arguments' => array('administer actions'),    'type' => MENU_CALLBACK,  );  $items['admin/settings/actions/delete/%actions'] = array(    'title' => 'Delete action',    'description' => 'Delete an action.',    'page callback' => 'drupal_get_form',    'page arguments' => array('system_actions_delete_form', 4),    'access arguments' => array('administer actions'),    'type' => MENU_CALLBACK,  );  $items['admin/settings/actions/orphan'] = array(    'title' => 'Remove orphans',    'page callback' => 'system_actions_remove_orphans',    'access arguments' => array('administer actions'),    'type' => MENU_CALLBACK,  );  // Settings:  $items['admin/settings/site-information'] = array(    'title' => 'Site information',    'description' => 'Change basic site information, such as the site name, slogan, e-mail address, mission, front page and more.',    'page callback' => 'drupal_get_form',    'page arguments' => array('system_site_information_settings'),    'access arguments' => array('administer site configuration'),    'file' => 'system.admin.inc',  );  $items['admin/settings/error-reporting'] = array(    'title' => 'Error reporting',    'description' => 'Control how Drupal deals with errors including 403/404 errors as well as PHP error reporting.',    'page callback' => 'drupal_get_form',    'page arguments' => array('system_error_reporting_settings'),    'access arguments' => array('administer site configuration'),    'file' => 'system.admin.inc',  );  $items['admin/settings/logging'] = array(    'title' => 'Logging and alerts',    'description' => "Settings for logging and alerts modules. Various modules can route Drupal's system events to different destination, such as syslog, database, email, ...etc.",    'page callback' => 'system_logging_overview',    'access arguments' => array('administer site configuration'),    'file' => 'system.admin.inc',  );  $items['admin/settings/performance'] = array(    'title' => 'Performance',    'description' => 'Enable or disable page caching for anonymous users and set CSS and JS bandwidth optimization options.',    'page callback' => 'drupal_get_form',    'page arguments' => array('system_performance_settings'),    'access arguments' => array('administer site configuration'),    'file' => 'system.admin.inc',  );  $items['admin/settings/file-system'] = array(    'title' => 'File system',    'description' => 'Tell Drupal where to store uploaded files and how they are accessed.',    'page callback' => 'drupal_get_form',    'page arguments' => array('system_file_system_settings'),    'access arguments' => array('administer site configuration'),    'file' => 'system.admin.inc',  );  $items['admin/settings/image-toolkit'] = array(    'title' => 'Image toolkit',    'description' => 'Choose which image toolkit to use if you have installed optional toolkits.',    'page callback' => 'drupal_get_form',    'page arguments' => array('system_image_toolkit_settings'),    'access arguments' => array('administer site configuration'),    'file' => 'system.admin.inc',  );  $items['admin/content/rss-publishing'] = array(    'title' => 'RSS publishing',    'description' => 'Configure the number of items per feed and whether feeds should be titles/teasers/full-text.',    'page callback' => 'drupal_get_form',    'page arguments' => array('system_rss_feeds_settings'),    'access arguments' => array('administer site configuration'),    'file' => 'system.admin.inc',  );  $items['admin/settings/date-time'] = array(    'title' => 'Date and time',    'description' => "Settings for how Drupal displays date and time, as well as the system's default timezone.",    'page callback' => 'drupal_get_form',    'page arguments' => array('system_date_time_settings'),    'access arguments' => array('administer site configuration'),    'file' => 'system.admin.inc',  );  $items['admin/settings/date-time/lookup'] = array(    'title' => 'Date and time lookup',    'type' => MENU_CALLBACK,    'page callback' => 'system_date_time_lookup',    'access arguments' => array('administer site configuration'),    'file' => 'system.admin.inc',  );  $items['admin/settings/site-maintenance'] = array(    'title' => 'Site maintenance',    'description' => 'Take the site off-line for maintenance or bring it back online.',    'page callback' => 'drupal_get_form',    'page arguments' => array('system_site_maintenance_settings'),    'access arguments' => array('administer site configuration'),    'file' => 'system.admin.inc',  );  $items['admin/settings/clean-urls'] = array(    'title' => 'Clean URLs',    'description' => 'Enable or disable clean URLs for your site.',    'page callback' => 'drupal_get_form',    'page arguments' => array('system_clean_url_settings'),    'access arguments' => array('administer site configuration'),    'file' => 'system.admin.inc',  );  $items['admin/settings/clean-urls/check'] = array(    'title' => 'Clean URL check',    'page callback' => 'drupal_json',    'page arguments' => array(array('status' => TRUE)),    'access callback' => TRUE,    'type' => MENU_CALLBACK,  );  // Reports:  $items['admin/reports'] = array(    'title' => 'Reports',    'description' => 'View reports from system logs and other status information.',    'page callback' => 'system_admin_menu_block_page',    'access arguments' => array('access site reports'),    'weight' => 5,    'position' => 'left',    'file' => 'system.admin.inc',  );  $items['admin/reports/status'] = array(    'title' => 'Status report',    'description' => "Get a status report about your site's operation and any detected problems.",    'page callback' => 'system_status',    'weight' => 10,    'access arguments' => array('administer site configuration'),    'file' => 'system.admin.inc',  );  $items['admin/reports/status/run-cron'] = array(    'title' => 'Run cron',    'page callback' => 'system_run_cron',    'access arguments' => array('administer site configuration'),    'type' => MENU_CALLBACK,    'file' => 'system.admin.inc',  );  $items['admin/reports/status/php'] = array(    'title' => 'PHP',    'page callback' => 'system_php',    'access arguments' => array('administer site configuration'),    'type' => MENU_CALLBACK,    'file' => 'system.admin.inc',  );  $items['admin/reports/status/sql'] = array(    'title' => 'SQL',    'page callback' => 'system_sql',    'access arguments' => array('administer site configuration'),    'type' => MENU_CALLBACK,    'file' => 'system.admin.inc',  );  // Default page for batch operations  $items['batch'] = array(    'page callback' => 'system_batch_page',    'access callback' => TRUE,    'type' => MENU_CALLBACK,    'file' => 'system.admin.inc',  );  return $items;}/** * Menu item access callback - only admin or enabled themes can be accessed. */function _system_themes_access($theme) {  return user_access('administer site configuration') && ($theme->status || $theme->name == variable_get('admin_theme', '0'));}/** * Implementation of hook_init(). */function system_init() {  // Use the administrative theme if the user is looking at a page in the admin/* path.  if (arg(0) == 'admin' || (variable_get('node_admin_theme', '0') && arg(0) == 'node' && (arg(1) == 'add' || arg(2) == 'edit'))) {    global $custom_theme;    $custom_theme = variable_get('admin_theme', '0');    drupal_add_css(drupal_get_path('module', 'system') .'/admin.css', 'module');  }  // Add the CSS for this module.  drupal_add_css(drupal_get_path('module', 'system') .'/defaults.css', 'module');  drupal_add_css(drupal_get_path('module', 'system') .'/system.css', 'module');  drupal_add_css(drupal_get_path('module', 'system') .'/system-menus.css', 'module');}/** * Implementation of hook_user(). * * Allows users to individually set their theme and time zone. */function system_user($type, $edit, &$user, $category = NULL) {  if ($type == 'form' && $category == 'account') {    $form['theme_select'] = system_theme_select_form(t('Selecting a different theme will change the look and feel of the site.'), isset($edit['theme']) ? $edit['theme'] : NULL, 2);    if (variable_get('configurable_timezones', 1)) {      $zones = _system_zonelist();      $form['timezone'] = array(        '#type' => 'fieldset',        '#title' => t('Locale settings'),        '#weight' => 6,        '#collapsible' => TRUE,      );      $form['timezone']['timezone'] = array(        '#type' => 'select',        '#title' => t('Time zone'),        '#default_value' => strlen($edit['timezone']) ? $edit['timezone'] : variable_get('date_default_timezone', 0),        '#options' => $zones,        '#description' => t('Select your current local time. Dates and times throughout this site will be displayed using this time zone.'),      );    }    return $form;  }}/** * Implementation of hook_block(). * * Generate a block with a promotional link to Drupal.org. */function system_block($op = 'list', $delta = 0, $edit = NULL) {  switch ($op) {    case 'list':      $blocks[0] = array(        'info' => t('Powered by Drupal'),        'weight' => '10',         // Not worth caching.        'cache' => BLOCK_NO_CACHE,      );      return $blocks;    case 'configure':      // Compile a list of fields to show      $form['wrapper']['color'] = array(        '#type' => 'select',        '#title' => t('Badge color'),        '#default_value' => variable_get('drupal_badge_color', 'powered-blue'),        '#options' => array('powered-black' => t('Black'), 'powered-blue' => t('Blue'), 'powered-gray' => t('Gray')),      );      $form['wrapper']['size'] = array(        '#type' => 'select',        '#title' => t('Badge size'),        '#default_value' => variable_get('drupal_badge_size', '80x15'),        '#options' => array('80x15' => t('Small'), '88x31' => t('Medium'), '135x42' => t('Large')),      );      return $form;    case 'save':      variable_set('drupal_badge_color', $edit['color']);      variable_set('drupal_badge_size', $edit['size']);      break;    case 'view':      $image_path = 'misc/'. variable_get('drupal_badge_color', 'powered-blue') .'-'. variable_get('drupal_badge_size', '80x15') .'.png';      $block['subject'] = NULL; // Don't display a title      $block['content'] = theme('system_powered_by', $image_path);      return $block;  }}/** * Provide a single block on the administration overview page. * * @param $item *   The menu item to be displayed. */function system_admin_menu_block($item) {  $content = array();  if (!isset($item['mlid'])) {    $item += db_fetch_array(db_query("SELECT mlid, menu_name FROM {menu_links} ml WHERE ml.router_path = '%s' AND module = 'system'", $item['path']));  }  $result = db_query("    SELECT m.load_functions, m.to_arg_functions, m.access_callback, m.access_arguments, m.page_callback, m.page_arguments, m.title, m.title_callback, m.title_arguments, m.type, m.description, ml.*    FROM {menu_links} ml    LEFT JOIN {menu_router} m ON ml.router_path = m.path    WHERE ml.plid = %d AND ml.menu_name = '%s' AND hidden = 0", $item['mlid'], $item['menu_name']);  while ($item = db_fetch_array($result)) {    _menu_link_translate($item);    if (!$item['access']) {      continue;    }    // The link 'description' either derived from the hook_menu 'description' or    // entered by the user via menu module is saved as the title attribute.    if (!empty($item['localized_options']['attributes']['title'])) {      $item['description'] = $item['localized_options']['attributes']['title'];    }    // Prepare for sorting as in function _menu_tree_check_access().    // The weight is offset so it is always positive, with a uniform 5-digits.    $content[(50000 + $item['weight']) .' '. drupal_strtolower($item['title']) .' '. $item['mlid']] = $item;  }  ksort($content);  return $content;}/** * Process admin theme form submissions. */function system_admin_theme_submit($form, &$form_state) {  // If we're changing themes, make sure the theme has its blocks initialized.  if ($form_state['values']['admin_theme'] && $form_state['values']['admin_theme'] != variable_get('admin_theme', '0')) {    $result = db_result(db_query("SELECT COUNT(*) FROM {blocks} WHERE theme = '%s'", $form_state['values']['admin_theme']));    if (!$result) {      system_initialize_theme_blocks($form_state['values']['admin_theme']);    }  }}/** * Returns a fieldset containing the theme select form. * * @param $description *    description of the fieldset * @param $default_value *    default value of theme radios * @param $weight *    weight of the fieldset * @return *    a form array */function system_theme_select_form($description = '', $default_value = '', $weight = 0) {  if (user_access('select different theme')) {    $enabled = array();    $themes = list_themes();    foreach ($themes as $theme) {      if ($theme->status) {        $enabled[] = $theme;      }    }    if (count($enabled) > 1) {      ksort($enabled);      $form['themes'] = array(        '#type' => 'fieldset',        '#title' => t('Theme configuration'),        '#description' => $description,        '#collapsible' => TRUE,        '#theme' => 'system_theme_select_form'      );      foreach ($enabled as $info) {        // For the default theme, revert to an empty string so the user's theme updates when the site theme is changed.        $info->key = $info->name == variable_get('theme_default', 'garland') ? '' : $info->name;        $screenshot = NULL;        $theme_key = $info->name;        while ($theme_key) {          if (file_exists($themes[$theme_key]->info['screenshot'])) {            $screenshot = $themes[$theme_key]->info['screenshot'];            break;          }          $theme_key = isset($themes[$theme_key]->info['base theme']) ? $themes[$theme_key]->info['base theme'] : NULL;        }        $screenshot = $screenshot ? theme('image', $screenshot, t('Screenshot for %theme theme', array('%theme' => $info->name)), '', array('class' => 'screenshot'), FALSE) : t('no screenshot');        $form['themes'][$info->key]['screenshot'] = array('#value' => $screenshot);        $form['themes'][$info->key]['description'] = array('#type' => 'item', '#title' => $info->name, '#value' => dirname($info->filename) . ($info->name == variable_get('theme_default', 'garland') ? '<br /> <em>'. t('(site default theme)') .'</em>' : ''));        $options[$info->key] = '';      }      $form['themes']['theme'] = array('#type' => 'radios', '#options' => $options, '#default_value' => $default_value ? $default_value : '');      $form['#weight'] = $weight;      return $form;    }  }}/** * Checks the existence of the directory specified in $form_element. This * function is called from the system_settings form to check both the * file_directory_path and file_directory_temp directories. If validation * fails, the form element is flagged with an error from within the * file_check_directory function. * * @param $form_element *   The form element containing the name of the directory to check. */function system_check_directory($form_element) {  file_check_directory($form_element['#value'], FILE_CREATE_DIRECTORY, $form_element['#parents'][0]);  return $form_element;}/** * Retrieves the current status of an array of files in the system table. * * @param $files *   An array of files to check. * @param $type *   The type of the files. */function system_get_files_database(&$files, $type) {  // Extract current files from database.  $result = db_query("SELECT filename, name, type, status, throttle, schema_version FROM {system} WHERE type = '%s'", $type);  while ($file = db_fetch_object($result)) {    if (isset($files[$file->name]) && is_object($files[$file->name])) {      $file->old_filename = $file->filename;      foreach ($file as $key => $value) {        if (!isset($files[$file->name]) || !isset($files[$file->name]->$key)) {          $files[$file->name]->$key = $value;        }      }    }  }}/** * Prepare defaults for themes. * * @return *   An array of default themes settings. */function system_theme_default() {  return array(    'regions' => array(      'left' => 'Left sidebar',      'right' => 'Right sidebar',      'content' => 'Content',      'header' => 'Header',      'footer' => 'Footer',    ),    'description' => '',    'features' => array(      'comment_user_picture',      'favicon',      'mission',      'logo',      'name',      'node_user_picture',      'search',      'slogan',      'primary_links',      'secondary_links',    ),    'stylesheets' => array(      'all' => array('style.css')    ),    'scripts' => array('script.js'),    'screenshot' => 'screenshot.png',    'php' => DRUPAL_MINIMUM_PHP,  );}/** * Collect data about all currently available themes. * * @return *   Array of all available themes and their data. */function system_theme_data() {  // Scan the installation theme .info files and their engines.  $themes = _system_theme_data();  // Extract current files from database.  system_get_files_database($themes, 'theme');  db_query("DELETE FROM {system} WHERE type = 'theme'");  foreach ($themes as $theme) {    if (!isset($theme->owner)) {      $theme->owner = '';    }    db_query("INSERT INTO {system} (name, owner, info, type, filename, status, throttle, bootstrap) VALUES ('%s', '%s', '%s', '%s', '%s', %d, %d, %d)", $theme->name, $theme->owner, serialize($theme->info), 'theme', $theme->filename, isset($theme->status) ? $theme->status : 0, 0, 0);  }  return $themes;}/** * Helper function to scan and collect theme .info data and their engines. * * @return *   An associative array of themes information. */function _system_theme_data() {  static $themes_info = array();  if (empty($themes_info)) {    // Find themes    $themes = drupal_system_listing('\.info$', 'themes');    // Find theme engines    $engines = drupal_system_listing('\.engine$', 'themes/engines');    $defaults = system_theme_default();    $sub_themes = array();    // Read info files for each theme    foreach ($themes as $key => $theme) {      $themes[$key]->info = drupal_parse_info_file($theme->filename) + $defaults;      // Invoke hook_system_info_alter() to give installed modules a chance to      // modify the data in the .info files if necessary.      drupal_alter('system_info', $themes[$key]->info, $themes[$key]);      if (!empty($themes[$key]->info['base theme'])) {        $sub_themes[] = $key;      }      if (empty($themes[$key]->info['engine'])) {        $filename = dirname($themes[$key]->filename) .'/'. $themes[$key]->name .'.theme';        if (file_exists($filename)) {          $themes[$key]->owner = $filename;          $themes[$key]->prefix = $key;        }      }      else {        $engine = $themes[$key]->info['engine'];        if (isset($engines[$engine])) {          $themes[$key]->owner = $engines[$engine]->filename;          $themes[$key]->prefix = $engines[$engine]->name;          $themes[$key]->template = TRUE;        }      }      // Give the stylesheets proper path information.      $pathed_stylesheets = array();      foreach ($themes[$key]->info['stylesheets'] as $media => $stylesheets) {        foreach ($stylesheets as $stylesheet) {          $pathed_stylesheets[$media][$stylesheet] = dirname($themes[$key]->filename) .'/'. $stylesheet;        }      }      $themes[$key]->info['stylesheets'] = $pathed_stylesheets;      // Give the scripts proper path information.      $scripts = array();      foreach ($themes[$key]->info['scripts'] as $script) {        $scripts[$script] = dirname($themes[$key]->filename) .'/'. $script;      }      $themes[$key]->info['scripts'] = $scripts;      // Give the screenshot proper path information.      if (!empty($themes[$key]->info['screenshot'])) {        $themes[$key]->info['screenshot'] = dirname($themes[$key]->filename) .'/'. $themes[$key]->info['screenshot'];      }    }    // Now that we've established all our master themes, go back and fill in    // data for subthemes.    foreach ($sub_themes as $key) {      $themes[$key]->base_themes = system_find_base_themes($themes, $key);      // Don't proceed if there was a problem with the root base theme.      if (!current($themes[$key]->base_themes)) {        continue;      }      $base_key = key($themes[$key]->base_themes);      foreach (array_keys($themes[$key]->base_themes) as $base_theme) {        $themes[$base_theme]->sub_themes[$key] = $themes[$key]->info['name'];      }      // Copy the 'owner' and 'engine' over if the top level theme uses a      // theme engine.      if (isset($themes[$base_key]->owner)) {        if (isset($themes[$base_key]->info['engine'])) {          $themes[$key]->info['engine'] = $themes[$base_key]->info['engine'];          $themes[$key]->owner = $themes[$base_key]->owner;          $themes[$key]->prefix = $themes[$base_key]->prefix;        }        else {          $themes[$key]->prefix = $key;        }      }    }    $themes_info = $themes;  }  return $themes_info;}/** * Find all the base themes for the specified theme. * * Themes can inherit templates and function implementations from earlier themes. * * @param $themes *   An array of available themes. * @param $key *   The name of the theme whose base we are looking for. * @param $used_keys *   A recursion parameter preventing endless loops. * @return *   Returns an array of all of the theme's ancestors; the first element's value *   will be NULL if an error occurred. */function system_find_base_themes($themes, $key, $used_keys = array()) {  $base_key = $themes[$key]->info['base theme'];  // Does the base theme exist?  if (!isset($themes[$base_key])) {    return array($base_key => NULL);  }  $current_base_theme = array($base_key => $themes[$base_key]->info['name']);  // Is the base theme itself a child of another theme?  if (isset($themes[$base_key]->info['base theme'])) {    // Do we already know the base themes of this theme?    if (isset($themes[$base_key]->base_themes)) {      return $themes[$base_key]->base_themes + $current_base_theme;    }    // Prevent loops.    if (!empty($used_keys[$base_key])) {      return array($base_key => NULL);    }    $used_keys[$base_key] = TRUE;    return system_find_base_themes($themes, $base_key, $used_keys) + $current_base_theme;  }  // If we get here, then this is our parent theme.  return $current_base_theme;}/** * This function has been deprecated in favor of system_find_base_themes(). * * Recursive function to find the top level base theme. Themes can inherit * templates and function implementations from earlier themes. * * @param $themes *   An array of available themes. * @param $key *   The name of the theme whose base we are looking for. * @param $used_keys *   A recursion parameter preventing endless loops. * @return *   Returns the top level parent that has no ancestor or returns NULL if there isn't a valid parent. */function system_find_base_theme($themes, $key, $used_keys = array()) {  $base_key = $themes[$key]->info['base theme'];  // Does the base theme exist?  if (!isset($themes[$base_key])) {    return NULL;  }  // Is the base theme itself a child of another theme?  if (isset($themes[$base_key]->info['base theme'])) {    // Prevent loops.    if (!empty($used_keys[$base_key])) {      return NULL;    }    $used_keys[$base_key] = TRUE;    return system_find_base_theme($themes, $base_key, $used_keys);  }  // If we get here, then this is our parent theme.  return $base_key;}/** * Get a list of available regions from a specified theme. * * @param $theme_key *   The name of a theme. * @return *   An array of regions in the form $region['name'] = 'description'. */function system_region_list($theme_key) {  static $list = array();  if (!array_key_exists($theme_key, $list)) {    $info = unserialize(db_result(db_query("SELECT info FROM {system} WHERE type = 'theme' AND name = '%s'", $theme_key)));    $list[$theme_key] = array_map('t', $info['regions']);  }  return $list[$theme_key];}/** * Get the name of the default region for a given theme. * * @param $theme *   The name of a theme. * @return *   A string that is the region name. */function system_default_region($theme) {  $regions = array_keys(system_region_list($theme));  return isset($regions[0]) ? $regions[0] : '';}/** * Assign an initial, default set of blocks for a theme. * * This function is called the first time a new theme is enabled. The new theme * gets a copy of the default theme's blocks, with the difference that if a * particular region isn't available in the new theme, the block is assigned * to the new theme's default region. * * @param $theme *   The name of a theme. */function system_initialize_theme_blocks($theme) {  // Initialize theme's blocks if none already registered.  if (!(db_result(db_query("SELECT COUNT(*) FROM {blocks} WHERE theme = '%s'", $theme)))) {    $default_theme = variable_get('theme_default', 'garland');    $regions = system_region_list($theme);    $result = db_query("SELECT * FROM {blocks} WHERE theme = '%s'", $default_theme);    while ($block = db_fetch_array($result)) {      // If the region isn't supported by the theme, assign the block to the theme's default region.      if (!array_key_exists($block['region'], $regions)) {        $block['region'] = system_default_region($theme);      }      db_query("INSERT INTO {blocks} (module, delta, theme, status, weight, region, visibility, pages, custom, throttle, cache) VALUES ('%s', '%s', '%s', %d, %d, '%s', %d, '%s', %d, %d, %d)",          $block['module'], $block['delta'], $theme, $block['status'], $block['weight'], $block['region'], $block['visibility'], $block['pages'], $block['custom'], $block['throttle'], $block['cache']);    }  }}/** * Add default buttons to a form and set its prefix. * * @ingroup forms * @see system_settings_form_submit() * @param $form *   An associative array containing the structure of the form. * @return *   The form structure. */function system_settings_form($form) {  $form['buttons']['submit'] = array('#type' => 'submit', '#value' => t('Save configuration') );  $form['buttons']['reset'] = array('#type' => 'submit', '#value' => t('Reset to defaults') );  if (!empty($_POST) && form_get_errors()) {    drupal_set_message(t('The settings have not been saved because of the errors.'), 'error');  }  $form['#submit'][] = 'system_settings_form_submit';  $form['#theme'] = 'system_settings_form';  return $form;}/** * Execute the system_settings_form. * * If you want node type configure style handling of your checkboxes, * add an array_filter value to your form. */function system_settings_form_submit($form, &$form_state) {  $op = isset($form_state['values']['op']) ? $form_state['values']['op'] : '';  // Exclude unnecessary elements.  unset($form_state['values']['submit'], $form_state['values']['reset'], $form_state['values']['form_id'], $form_state['values']['op'], $form_state['values']['form_token'], $form_state['values']['form_build_id']);  foreach ($form_state['values'] as $key => $value) {    if ($op == t('Reset to defaults')) {      variable_del($key);    }    else {      if (is_array($value) && isset($form_state['values']['array_filter'])) {        $value = array_keys(array_filter($value));      }      variable_set($key, $value);    }  }  if ($op == t('Reset to defaults')) {    drupal_set_message(t('The configuration options have been reset to their default values.'));  }  else {    drupal_set_message(t('The configuration options have been saved.'));  }  cache_clear_all();  drupal_rebuild_theme_registry();}/** * Helper function to sort requirements. */function _system_sort_requirements($a, $b) {  if (!isset($a['weight'])) {    if (!isset($b['weight'])) {      return strcmp($a['title'], $b['title']);    }    return -$b['weight'];  }  return isset($b['weight']) ? $a['weight'] - $b['weight'] : $a['weight'];}/** * Implementation of hook_node_type(). * * Updates theme settings after a node type change. */function system_node_type($op, $info) {  if ($op == 'update' && !empty($info->old_type) && $info->type != $info->old_type) {    $old = 'toggle_node_info_'. $info->old_type;    $new = 'toggle_node_info_'. $info->type;    $theme_settings = variable_get('theme_settings', array());    if (isset($theme_settings[$old])) {      $theme_settings[$new] = $theme_settings[$old];      unset($theme_settings[$old]);      variable_set('theme_settings', $theme_settings);    }  }}/** * Output a confirmation form * * This function returns a complete form for confirming an action. A link is * offered to go back to the item that is being changed in case the user changes * his/her mind. * * If the submit handler for this form is invoked, the user successfully * confirmed the action. You should never directly inspect $_POST to see if an * action was confirmed. * * @ingroup forms * @param $form *   Additional elements to inject into the form, for example hidden elements. * @param $question *   The question to ask the user (e.g. "Are you sure you want to delete the *   block <em>foo</em>?"). * @param $path *   The page to go to if the user denies the action. *   Can be either a drupal path, or an array with the keys 'path', 'query', 'fragment'. * @param $description *   Additional text to display (defaults to "This action cannot be undone."). * @param $yes *   A caption for the button which confirms the action (e.g. "Delete", *   "Replace", ...). * @param $no *   A caption for the link which denies the action (e.g. "Cancel"). * @param $name *   The internal name used to refer to the confirmation item. * @return *   The form. */function confirm_form($form, $question, $path, $description = NULL, $yes = NULL, $no = NULL, $name = 'confirm') {  $description = isset($description) ? $description : t('This action cannot be undone.');  // Prepare cancel link  $query = $fragment = NULL;  if (is_array($path)) {    $query = isset($path['query']) ? $path['query'] : NULL;    $fragment = isset($path['fragment']) ? $path['fragment'] : NULL;    $path = isset($path['path']) ? $path['path'] : NULL;  }  $cancel = l($no ? $no : t('Cancel'), $path, array('query' => $query, 'fragment' => $fragment));  drupal_set_title($question);  // Confirm form fails duplication check, as the form values rarely change -- so skip it.  $form['#skip_duplicate_check'] = TRUE;  $form['#attributes'] = array('class' => 'confirmation');  $form['description'] = array('#value' => $description);  $form[$name] = array('#type' => 'hidden', '#value' => 1);  $form['actions'] = array('#prefix' => '<div class="container-inline">', '#suffix' => '</div>');  $form['actions']['submit'] = array('#type' => 'submit', '#value' => $yes ? $yes : t('Confirm'));  $form['actions']['cancel'] = array('#value' => $cancel);  $form['#theme'] = 'confirm_form';  return $form;}/** * Determine if a user is in compact mode. */function system_admin_compact_mode() {  global $user;  return (isset($user->admin_compact_mode)) ? $user->admin_compact_mode : variable_get('admin_compact_mode', FALSE);}/** * Generate a list of tasks offered by a specified module. * * @param $module *   Module name. * @return *   An array of task links. */function system_get_module_admin_tasks($module) {  static $items;  $admin_access = user_access('administer permissions');  $admin_tasks = array();  if (!isset($items)) {    $result = db_query("       SELECT m.load_functions, m.to_arg_functions, m.access_callback, m.access_arguments, m.page_callback, m.page_arguments, m.title, m.title_callback, m.title_arguments, m.type, ml.*       FROM {menu_links} ml INNER JOIN {menu_router} m ON ml.router_path = m.path WHERE ml.link_path LIKE 'admin/%' AND hidden >= 0 AND module = 'system' AND m.number_parts > 2");    $items = array();    while ($item = db_fetch_array($result)) {      _menu_link_translate($item);      if ($item['access']) {        $items[$item['router_path']] = $item;      }    }  }  $admin_tasks = array();  $admin_task_count = 0;  // Check for permissions.  if (module_hook($module, 'perm') && $admin_access) {    $admin_tasks[-1] = l(t('Configure permissions'), 'admin/user/permissions', array('fragment' => 'module-'. $module));  }  // Check for menu items that are admin links.  if ($menu = module_invoke($module, 'menu')) {    foreach (array_keys($menu) as $path) {      if (isset($items[$path])) {        $admin_tasks[$items[$path]['title'] . $admin_task_count ++] = l($items[$path]['title'], $path);      }    }  }  return $admin_tasks;}/** * Implementation of hook_cron(). * * Remove older rows from flood and batch table. Remove old temporary files. */function system_cron() {  // Cleanup the flood.  db_query('DELETE FROM {flood} WHERE timestamp < %d', time() - 3600);  // Cleanup the batch table.  db_query('DELETE FROM {batch} WHERE timestamp < %d', time() - 864000);  // Remove temporary files that are older than DRUPAL_MAXIMUM_TEMP_FILE_AGE.  $result = db_query('SELECT * FROM {files} WHERE status = %d and timestamp < %d', FILE_STATUS_TEMPORARY, time() - DRUPAL_MAXIMUM_TEMP_FILE_AGE);  while ($file = db_fetch_object($result)) {    if (file_exists($file->filepath)) {      // If files that exist cannot be deleted, continue so the database remains      // consistent.      if (!file_delete($file->filepath)) {        watchdog('file system', 'Could not delete temporary file "%path" during garbage collection', array('%path' => $file->filepath), 'error');        continue;      }    }    db_query('DELETE FROM {files} WHERE fid = %d', $file->fid);  }  $core = array('cache', 'cache_block', 'cache_filter', 'cache_page', 'cache_form', 'cache_menu');  $cache_tables = array_merge(module_invoke_all('flush_caches'), $core);  foreach ($cache_tables as $table) {    cache_clear_all(NULL, $table);  }}/** * Implementation of hook_hook_info(). */function system_hook_info() {  return array(    'system' => array(      'cron' => array(        'run' => array(          'runs when' => t('When cron runs'),        ),      ),    ),  );}/** * Implementation of hook_action_info(). */function system_action_info() {  return array(    'system_message_action' => array(      'type' => 'system',      'description' => t('Display a message to the user'),      'configurable' => TRUE,      'hooks' => array(        'nodeapi' => array('view', 'insert', 'update', 'delete'),        'comment' => array('view', 'insert', 'update', 'delete'),        'user' => array('view', 'insert', 'update', 'delete', 'login'),        'taxonomy' => array('insert', 'update', 'delete'),      ),    ),    'system_send_email_action' => array(      'description' => t('Send e-mail'),      'type' => 'system',      'configurable' => TRUE,      'hooks' => array(        'nodeapi' => array('view', 'insert', 'update', 'delete'),        'comment' => array('view', 'insert', 'update', 'delete'),        'user' => array('view', 'insert', 'update', 'delete', 'login'),        'taxonomy' => array('insert', 'update', 'delete'),      )    ),    'system_goto_action' => array(      'description' => t('Redirect to URL'),      'type' => 'system',      'configurable' => TRUE,      'hooks' => array(        'nodeapi' => array('view', 'insert', 'update', 'delete'),        'comment' => array('view', 'insert', 'update', 'delete'),        'user' => array('view', 'insert', 'update', 'delete', 'login'),      )    )  );}/** * Menu callback. Display an overview of available and configured actions. */function system_actions_manage() {  $output = '';  $actions = actions_list();  actions_synchronize($actions);  $actions_map = actions_actions_map($actions);  $options = array(t('Choose an advanced action'));  $unconfigurable = array();  foreach ($actions_map as $key => $array) {    if ($array['configurable']) {      $options[$key] = $array['description'] .'...';    }    else {      $unconfigurable[] = $array;    }  }  $row = array();  $instances_present = db_fetch_object(db_query("SELECT aid FROM {actions} WHERE parameters <> ''"));  $header = array(    array('data' => t('Action type'), 'field' => 'type'),    array('data' => t('Description'), 'field' => 'description'),    array('data' => $instances_present ? t('Operations') : '', 'colspan' => '2')  );  $sql = 'SELECT * FROM {actions}';  $result = pager_query($sql . tablesort_sql($header), 50);  while ($action = db_fetch_object($result)) {    $row[] = array(      array('data' => $action->type),      array('data' => $action->description),      array('data' => $action->parameters ? l(t('configure'), "admin/settings/actions/configure/$action->aid") : ''),      array('data' => $action->parameters ? l(t('delete'), "admin/settings/actions/delete/$action->aid") : '')    );  }  if ($row) {    $pager = theme('pager', NULL, 50, 0);    if (!empty($pager)) {      $row[] = array(array('data' => $pager, 'colspan' => '3'));    }    $output .= '<h3>'. t('Actions available to Drupal:') .'</h3>';    $output .= theme('table', $header, $row);  }  if ($actions_map) {    $output .= drupal_get_form('system_actions_manage_form', $options);  }  return $output;}/** * Define the form for the actions overview page. * * @see system_actions_manage_form_submit() * @ingroup forms * @param $form_state *   An associative array containing the current state of the form; not used. * @param $options *   An array of configurable actions. * @return *   Form definition. */function system_actions_manage_form($form_state, $options = array()) {  $form['parent'] = array(    '#type' => 'fieldset',    '#title' => t('Make a new advanced action available'),    '#prefix' => '<div class="container-inline">',    '#suffix' => '</div>',  );  $form['parent']['action'] = array(    '#type' => 'select',    '#default_value' => '',    '#options' => $options,    '#description' => '',  );  $form['parent']['buttons']['submit'] = array(    '#type' => 'submit',    '#value' => t('Create'),  );  return $form;}/** * Process system_actions_manage form submissions. */function system_actions_manage_form_submit($form, &$form_state) {  if ($form_state['values']['action']) {    $form_state['redirect'] = 'admin/settings/actions/configure/'. $form_state['values']['action'];  }}/** * Menu callback. Create the form for configuration of a single action. * * We provide the "Description" field. The rest of the form * is provided by the action. We then provide the Save button. * Because we are combining unknown form elements with the action * configuration form, we use actions_ prefix on our elements. * * @see system_actions_configure_validate() * @see system_actions_configure_submit() * @param $action *   md5 hash of action ID or an integer. If it's an md5 hash, we *   are creating a new instance. If it's an integer, we're editing *   an existing instance. * @return *   Form definition. */function system_actions_configure($form_state, $action = NULL) {  if ($action === NULL) {    drupal_goto('admin/settings/actions');  }  $actions_map = actions_actions_map(actions_list());  $edit = array();  // Numeric action denotes saved instance of a configurable action;  // else we are creating a new action instance.  if (is_numeric($action)) {    $aid = $action;    // Load stored parameter values from database.    $data = db_fetch_object(db_query("SELECT * FROM {actions} WHERE aid = '%s'", $aid));    $edit['actions_description'] = $data->description;    $edit['actions_type'] = $data->type;    $function = $data->callback;    $action = md5($data->callback);    $params = unserialize($data->parameters);    if ($params) {      foreach ($params as $name => $val) {        $edit[$name] = $val;      }    }  }  else {    $function = $actions_map[$action]['callback'];    $edit['actions_description'] = $actions_map[$action]['description'];    $edit['actions_type'] = $actions_map[$action]['type'];  }  $form['actions_description'] = array(    '#type' => 'textfield',    '#title' => t('Description'),    '#default_value' => $edit['actions_description'],    '#maxlength' => '255',    '#description' => t('A unique description for this advanced action. This description will be displayed in the interface of modules that integrate with actions, such as Trigger module.'),    '#weight' => -10  );  $action_form = $function .'_form';  $form = array_merge($form, $action_form($edit));  $form['actions_type'] = array(    '#type' => 'value',    '#value' => $edit['actions_type'],  );  $form['actions_action'] = array(    '#type' => 'hidden',    '#value' => $action,  );  // $aid is set when configuring an existing action instance.  if (isset($aid)) {    $form['actions_aid'] = array(      '#type' => 'hidden',      '#value' => $aid,    );  }  $form['actions_configured'] = array(    '#type' => 'hidden',    '#value' => '1',  );  $form['buttons']['submit'] = array(    '#type' => 'submit',    '#value' => t('Save'),    '#weight' => 13  );  return $form;}/** * Validate system_actions_configure form submissions. */function system_actions_configure_validate($form, $form_state) {  $function = actions_function_lookup($form_state['values']['actions_action']) .'_validate';  // Hand off validation to the action.  if (function_exists($function)) {    $function($form, $form_state);  }}/** * Process system_actions_configure form submissions. */function system_actions_configure_submit($form, &$form_state) {  $function = actions_function_lookup($form_state['values']['actions_action']);  $submit_function = $function .'_submit';  // Action will return keyed array of values to store.  $params = $submit_function($form, $form_state);  $aid = isset($form_state['values']['actions_aid']) ? $form_state['values']['actions_aid'] : NULL;  actions_save($function, $form_state['values']['actions_type'], $params, $form_state['values']['actions_description'], $aid);  drupal_set_message(t('The action has been successfully saved.'));  $form_state['redirect'] = 'admin/settings/actions/manage';}/** * Create the form for confirmation of deleting an action. * * @ingroup forms * @see system_actions_delete_form_submit() */function system_actions_delete_form($form_state, $action) {  $form['aid'] = array(    '#type' => 'hidden',    '#value' => $action->aid,  );  return confirm_form($form,    t('Are you sure you want to delete the action %action?', array('%action' => $action->description)),    'admin/settings/actions/manage',    t('This cannot be undone.'),    t('Delete'), t('Cancel')  );}/** * Process system_actions_delete form submissions. * * Post-deletion operations for action deletion. */function system_actions_delete_form_submit($form, &$form_state) {  $aid = $form_state['values']['aid'];  $action = actions_load($aid);  actions_delete($aid);  $description = check_plain($action->description);  watchdog('user', 'Deleted action %aid (%action)', array('%aid' => $aid, '%action' => $description));  drupal_set_message(t('Action %action was deleted', array('%action' => $description)));  $form_state['redirect'] = 'admin/settings/actions/manage';}/** * Post-deletion operations for deleting action orphans. * * @param $orphaned *   An array of orphaned actions. */function system_action_delete_orphans_post($orphaned) {  foreach ($orphaned as $callback) {    drupal_set_message(t("Deleted orphaned action (%action).", array('%action' => $callback)));  }}/** * Remove actions that are in the database but not supported by any enabled module. */function system_actions_remove_orphans() {  actions_synchronize(actions_list(), TRUE);  drupal_goto('admin/settings/actions/manage');}/** * Return a form definition so the Send email action can be configured. * * @see system_send_email_action_validate() * @see system_send_email_action_submit() * @param $context *   Default values (if we are editing an existing action instance). * @return *   Form definition. */function system_send_email_action_form($context) {  // Set default values for form.  if (!isset($context['recipient'])) {    $context['recipient'] = '';  }  if (!isset($context['subject'])) {    $context['subject'] = '';  }  if (!isset($context['message'])) {    $context['message'] = '';  }  $form['recipient'] = array(    '#type' => 'textfield',    '#title' => t('Recipient'),    '#default_value' => $context['recipient'],    '#maxlength' => '254',    '#description' => t('The email address to which the message should be sent OR enter %author if you would like to send an e-mail to the author of the original post.', array('%author' => '%author')),  );  $form['subject'] = array(    '#type' => 'textfield',    '#title' => t('Subject'),    '#default_value' => $context['subject'],    '#maxlength' => '254',    '#description' => t('The subject of the message.'),  );  $form['message'] = array(    '#type' => 'textarea',    '#title' => t('Message'),    '#default_value' => $context['message'],    '#cols' => '80',    '#rows' => '20',    '#description' => t('The message that should be sent. You may include the following variables: %site_name, %username, %node_url, %node_type, %title, %teaser, %body. Not all variables will be available in all contexts.'),  );  return $form;}/** * Validate system_send_email_action form submissions. */function system_send_email_action_validate($form, $form_state) {  $form_values = $form_state['values'];  // Validate the configuration form.  if (!valid_email_address($form_values['recipient']) && $form_values['recipient'] != '%author') {    // We want the literal %author placeholder to be emphasized in the error message.    form_set_error('recipient', t('Please enter a valid email address or %author.', array('%author' => '%author')));  }}/** * Process system_send_email_action form submissions. */function system_send_email_action_submit($form, $form_state) {  $form_values = $form_state['values'];  // Process the HTML form to store configuration. The keyed array that  // we return will be serialized to the database.  $params = array(    'recipient' => $form_values['recipient'],    'subject'   => $form_values['subject'],    'message'   => $form_values['message'],  );  return $params;}/** * Implementation of a configurable Drupal action. Sends an email. */function system_send_email_action($object, $context) {  global $user;  switch ($context['hook']) {    case 'nodeapi':      // Because this is not an action of type 'node' the node      // will not be passed as $object, but it will still be available      // in $context.      $node = $context['node'];      break;    // The comment hook provides nid, in $context.    case 'comment':      $comment = $context['comment'];      $node = node_load($comment->nid);      break;    case 'user':      // Because this is not an action of type 'user' the user      // object is not passed as $object, but it will still be available      // in $context.      $account = $context['account'];      if (isset($context['node'])) {        $node = $context['node'];      }      elseif ($context['recipient'] == '%author') {        // If we don't have a node, we don't have a node author.        watchdog('error', 'Cannot use %author token in this context.');        return;      }      break;    default:      // We are being called directly.      $node = $object;  }  $recipient = $context['recipient'];  if (isset($node)) {    if (!isset($account)) {      $account = user_load(array('uid' => $node->uid));    }    if ($recipient == '%author') {      $recipient = $account->mail;    }  }  if (!isset($account)) {    $account = $user;  }  $language = user_preferred_language($account);  $params = array('account' => $account, 'object' => $object, 'context' => $context);  if (isset($node)) {    $params['node'] = $node;  }  if (drupal_mail('system', 'action_send_email', $recipient, $language, $params)) {    watchdog('action', 'Sent email to %recipient', array('%recipient' => $recipient));  }  else {    watchdog('error', 'Unable to send email to %recipient', array('%recipient' => $recipient));  }}/** * Implementation of hook_mail(). */function system_mail($key, &$message, $params) {  $account = $params['account'];  $context = $params['context'];  $variables = array(    '%site_name' => variable_get('site_name', 'Drupal'),    '%username' => $account->name,  );  if ($context['hook'] == 'taxonomy') {    $object = $params['object'];    $vocabulary = taxonomy_vocabulary_load($object->vid);    $variables += array(      '%term_name' => $object->name,      '%term_description' => $object->description,      '%term_id' => $object->tid,      '%vocabulary_name' => $vocabulary->name,      '%vocabulary_description' => $vocabulary->description,      '%vocabulary_id' => $vocabulary->vid,    );  }  // Node-based variable translation is only available if we have a node.  if (isset($params['node'])) {    $node = $params['node'];    $variables += array(      '%uid' => $node->uid,      '%node_url' => url('node/'. $node->nid, array('absolute' => TRUE)),      '%node_type' => node_get_types('name', $node),      '%title' => $node->title,      '%teaser' => $node->teaser,      '%body' => $node->body,    );  }  $subject = strtr($context['subject'], $variables);  $body = strtr($context['message'], $variables);  $message['subject'] .= str_replace(array("\r", "\n"), '', $subject);  $message['body'][] = drupal_html_to_text($body);}function system_message_action_form($context) {  $form['message'] = array(    '#type' => 'textarea',    '#title' => t('Message'),    '#default_value' => isset($context['message']) ? $context['message'] : '',    '#required' => TRUE,    '#rows' => '8',    '#description' => t('The message to be displayed to the current user. You may include the following variables: %site_name, %username, %node_url, %node_type, %title, %teaser, %body. Not all variables will be available in all contexts.'),  );  return $form;}function system_message_action_submit($form, $form_state) {  return array('message' => $form_state['values']['message']);}/** * A configurable Drupal action. Sends a message to the current user's screen. */function system_message_action(&$object, $context = array()) {  global $user;  $variables = array(    '%site_name' => variable_get('site_name', 'Drupal'),    '%username' => $user->name ? $user->name : variable_get('anonymous', t('Anonymous')),  );  // This action can be called in any context, but if placeholders  // are used a node object must be present to be the source  // of substituted text.  switch ($context['hook']) {    case 'nodeapi':      // Because this is not an action of type 'node' the node      // will not be passed as $object, but it will still be available      // in $context.      $node = $context['node'];      break;    // The comment hook also provides the node, in context.    case 'comment':      $comment = $context['comment'];      $node = node_load($comment->nid);      break;    case 'taxonomy':      $vocabulary = taxonomy_vocabulary_load($object->vid);      $variables = array_merge($variables, array(        '%term_name' => $object->name,        '%term_description' => $object->description,        '%term_id' => $object->tid,        '%vocabulary_name' => $vocabulary->name,        '%vocabulary_description' => $vocabulary->description,        '%vocabulary_id' => $vocabulary->vid,        )      );      break;    default:      // We are being called directly.      $node = $object;  }  if (isset($node) && is_object($node)) {    $variables = array_merge($variables, array(      '%uid' => $node->uid,      '%node_url' => url('node/'. $node->nid, array('absolute' => TRUE)),      '%node_type' => check_plain(node_get_types('name', $node)),      '%title' => filter_xss($node->title),      '%teaser' => filter_xss($node->teaser),      '%body' => filter_xss($node->body),      )    );  }  $context['message'] = strtr($context['message'], $variables);  drupal_set_message($context['message']);}/** * Implementation of a configurable Drupal action. Redirect user to a URL. */function system_goto_action_form($context) {  $form['url'] = array(    '#type' => 'textfield',    '#title' => t('URL'),    '#description' => t('The URL to which the user should be redirected. This can be an internal URL like node/1234 or an external URL like http://drupal.org.'),    '#default_value' => isset($context['url']) ? $context['url'] : '',    '#required' => TRUE,  );  return $form;}function system_goto_action_submit($form, $form_state) {  return array(    'url' => $form_state['values']['url']  );}function system_goto_action($object, $context) {  drupal_goto($context['url']);}/** * Generate an array of time zones and their local time&date. */function _system_zonelist() {  $timestamp = time();  $zonelist = array(-11, -10, -9.5, -9, -8, -7, -6, -5, -4.5, -4, -3.5, -3, -2.5, -2, -1, 0, 1, 2, 3, 3.5, 4, 5, 5.5, 5.75, 6, 6.5, 7, 8, 9, 9.5, 10, 10.5, 11, 11.5, 12, 12.75, 13, 14);  $zones = array();  foreach ($zonelist as $offset) {    $zone = $offset * 3600;    $zones[$zone] = format_date($timestamp, 'custom', variable_get('date_format_long', 'l, F j, Y - H:i') .' O', $zone);  }  return $zones;}/** * Checks whether the server is capable of issuing HTTP requests. * * The function sets the drupal_http_request_fail system variable to TRUE if * drupal_http_request() does not work and then the system status report page * will contain an error. * * @return *  TRUE if this installation can issue HTTP requests. */function system_check_http_request() {  // Try to get the content of the front page via drupal_http_request().  $result = drupal_http_request(url('', array('absolute' => TRUE)));  // We only care that we get a http response - this means that Drupal  // can make a http request.  $works = isset($result->code) && ($result->code >= 100) && ($result->code < 600);  variable_set('drupal_http_request_fails', !$works);  return $works;}/** * Format the Powered by Drupal text. * * @ingroup themeable */function theme_system_powered_by($image_path) {  $image = theme('image', $image_path, t('Powered by Drupal, an open source content management system'), t('Powered by Drupal, an open source content management system'));  return l($image, 'http://drupal.org', array('html' => TRUE, 'absolute' => TRUE, 'external' => TRUE));}
<?php// $Id$/** * @file * Logs access statistics for your site. *//** * Implementation of hook_help(). */function statistics_help($path, $arg) {  switch ($path) {    case 'admin/help#statistics':      $output = '<p>'. t('The statistics module keeps track of numerous site usage statistics, including the number of times, and from where, each of your posts is viewed. These statistics are useful in determining how users are interacting with each other and with your site, and are required for the display of some Drupal blocks.') .'</p>';      $output .= '<p>'. t('The statistics module provides:') .'</p>';      $output .= '<ul><li>'. t('a counter for each post on your site that increments each time the post is viewed. (Enable <em>Count content views</em> on the <a href="@accesslog">access log settings page</a>, and determine if the post access counters should be visible to any user roles on the <a href="@permissions">permissions page</a>.)', array('@accesslog' => url('admin/reports/settings'), '@permissions' => url('admin/user/permissions'))) .'</li>';      $output .= '<li>'. t('a <a href="@recent-hits">recent hits</a> log that displays information about the latest activity on your site, including the URL and title of the page accessed, the user name (if available) and IP address of the accessing party.', array('@recent-hits' => url('admin/reports/hits'))) .'</li>';      $output .= '<li>'. t('a <a href="@top-referrers">top referrers</a> log that displays the referring parties for your site visits (where your visitors came from).', array('@top-referrers' => url('admin/reports/referrers'))) .'</li>';      $output .= '<li>'. t('a <a href="@top-pages">top pages</a> log that displays site content in descending order by number of views.', array('@top-pages' => url('admin/reports/pages'))) .'</li>';      $output .= '<li>'. t('a <a href="@top-visitors">top visitors</a> log that displays the most active users on your site.', array('@top-visitors' => url('admin/reports/visitors'))) .'</li>';      $output .= '<li>'. t('a <em>Popular content</em> block that displays the day\'s most viewed content, the all-time most viewed content, and the last content viewed. (Enable the <em>Popular content</em> block on the <a href="@blocks">blocks administration page</a>.)', array('@blocks' => url('admin/build/block'))) .'</li></ul>';      $output .= '<p>'. t('Configuring the statistics module') .'</p>';      $output .= '<ul><li>'. t('When the <em>Enable access log</em> setting on the <a href="@accesslog">access log settings page</a> is enabled, data about every page accessed (including the remote host\'s IP address, referrer, node accessed, and user name) is stored in the access log. The access log must be enabled for the <a href="@recent-hits">recent hits</a>, <a href="@top-referrers">top referrers</a>, <a href="@top-pages">top pages</a>, and <a href="@top-visitors">top visitors</a> log pages to function. Enabling the access log adds one additional database call per page displayed by Drupal.', array('@accesslog' => url('admin/reports/settings'), '@recent-hits' => url('admin/reports/hits'), '@top-referrers' => url('admin/reports/referrers'), '@top-pages' => url('admin/reports/pages'), '@top-visitors' => url('admin/reports/visitors'))) .'</li>';      $output .= '<li>'. t('The <em>Discard access logs older than</em> setting on the <a href="@accesslog">access log settings page</a> specifies the length of time entries are retained in the access log before they are deleted. Automatic access log entry deletion requires a correctly configured <a href="@cron">cron maintenance task</a>.', array('@accesslog' => url('admin/reports/settings'), '@cron' => url('admin/reports/status'))) .'</li>';      $output .= '<li>'. t('The <em>Count content views</em> setting on the <a href="@accesslog">access log settings page</a> enables a counter for each post on your site that increments each time the post is viewed. This option must be enabled to provide post-specific access counts. Enabling this option adds one additional database call per each post displayed by Drupal.', array('@accesslog' => url('admin/reports/settings'))) .'</li></ul>';      $output .= '<p>'. t('For more information, see the online handbook entry for <a href="@statistics">Statistics module</a>.', array('@statistics' => 'http://drupal.org/handbook/modules/statistics/')) .'</p>';      return $output;    case 'admin/reports/settings':      return '<p>'. t('Settings for the statistical information that Drupal will keep about the site. See <a href="@statistics">site statistics</a> for the actual information.', array('@statistics' => url('admin/reports/hits'))) .'</p>';    case 'admin/reports/hits':      return '<p>'. t("This page displays the site's most recent hits.") .'</p>';    case 'admin/reports/referrers':      return '<p>'. t('This page displays all external referrers, or external references to your website.') .'</p>';    case 'admin/reports/visitors':      return '<p>'. t("When you ban a visitor, you prevent the visitor's IP address from accessing your site. Unlike blocking a user, banning a visitor works even for anonymous users. This is most commonly used to block resource-intensive bots or web crawlers.") .'</p>';  }}/** * Implementation of hook_exit(). * * This is where statistics are gathered on page accesses. */function statistics_exit() {  global $user, $recent_activity;  drupal_bootstrap(DRUPAL_BOOTSTRAP_PATH);  if (variable_get('statistics_count_content_views', 0)) {    // We are counting content views.    if ((arg(0) == 'node') && is_numeric(arg(1)) && arg(2) == '') {      // A node has been viewed, so update the node's counters.      db_query('UPDATE {node_counter} SET daycount = daycount + 1, totalcount = totalcount + 1, timestamp = %d WHERE nid = %d', time(), arg(1));      // If we affected 0 rows, this is the first time viewing the node.      if (!db_affected_rows()) {        // We must create a new row to store counters for the new node.        db_query('INSERT INTO {node_counter} (nid, daycount, totalcount, timestamp) VALUES (%d, 1, 1, %d)', arg(1), time());      }    }  }  if ((variable_get('statistics_enable_access_log', 0)) && (module_invoke('throttle', 'status') == 0)) {    // Log this page access.    db_query("INSERT INTO {accesslog} (title, path, url, hostname, uid, sid, timer, timestamp) values('%s', '%s', '%s', '%s', %d, '%s', %d, %d)", strip_tags(drupal_get_title()), $_GET['q'], referer_uri(), ip_address(), $user->uid, session_id(), timer_read('page'), time());  }}/** * Implementation of hook_perm(). */function statistics_perm() {  return array('access statistics', 'view post access counter');}/** * Implementation of hook_link(). */function statistics_link($type, $node = NULL, $teaser = FALSE) {  global $id;  $links = array();  if ($type == 'node' && user_access('view post access counter')) {    $statistics = statistics_get($node->nid);    if ($statistics) {      $links['statistics_counter']['title'] = format_plural($statistics['totalcount'], '1 read', '@count reads');    }  }  return $links;}/** * Implementation of hook_menu(). */function statistics_menu() {  $items['admin/reports/hits'] = array(    'title' => 'Recent hits',    'description' => 'View pages that have recently been visited.',    'page callback' => 'statistics_recent_hits',    'access arguments' => array('access statistics'),    'file' => 'statistics.admin.inc',  );  $items['admin/reports/pages'] = array(    'title' => 'Top pages',    'description' => 'View pages that have been hit frequently.',    'page callback' => 'statistics_top_pages',    'access arguments' => array('access statistics'),    'weight' => 1,    'file' => 'statistics.admin.inc',  );  $items['admin/reports/visitors'] = array(    'title' => 'Top visitors',    'description' => 'View visitors that hit many pages.',    'page callback' => 'statistics_top_visitors',    'access arguments' => array('access statistics'),    'weight' => 2,    'file' => 'statistics.admin.inc',  );  $items['admin/reports/referrers'] = array(    'title' => 'Top referrers',    'description' => 'View top referrers.',    'page callback' => 'statistics_top_referrers',    'access arguments' => array('access statistics'),    'file' => 'statistics.admin.inc',  );  $items['admin/reports/access/%'] = array(    'title' => 'Details',    'description' => 'View access log.',    'page callback' => 'statistics_access_log',    'page arguments' => array(3),    'access arguments' => array('access statistics'),    'type' => MENU_CALLBACK,    'file' => 'statistics.admin.inc',  );  $items['admin/reports/settings'] = array(    'title' => 'Access log settings',    'description' => 'Control details about what and how your site logs.',    'page callback' => 'drupal_get_form',    'page arguments' => array('statistics_access_logging_settings'),    'access arguments' => array('administer site configuration'),    'type' => MENU_NORMAL_ITEM,    'weight' => 3,    'file' => 'statistics.admin.inc',  );  $items['user/%user/track/navigation'] = array(    'title' => 'Track page visits',    'page callback' => 'statistics_user_tracker',    'access callback' => 'user_access',    'access arguments' => array('access statistics'),    'type' => MENU_LOCAL_TASK,    'weight' => 2,    'file' => 'statistics.pages.inc',  );  $items['node/%node/track'] = array(    'title' => 'Track',    'page callback' => 'statistics_node_tracker',    'access callback' => 'user_access',    'access arguments' => array('access statistics'),    'type' => MENU_LOCAL_TASK,    'weight' => 2,    'file' => 'statistics.pages.inc',  );  return $items;}/** * Implementation of hook_user(). */function statistics_user($op, &$edit, &$user) {  if ($op == 'delete') {    db_query('UPDATE {accesslog} SET uid = 0 WHERE uid = %d', $user->uid);  }}/** * Implementation of hook_cron(). */function statistics_cron() {  $statistics_timestamp = variable_get('statistics_day_timestamp', '');  if ((time() - $statistics_timestamp) >= 86400) {    // Reset day counts.    db_query('UPDATE {node_counter} SET daycount = 0');    variable_set('statistics_day_timestamp', time());  }  // Clean up expired access logs.  db_query('DELETE FROM {accesslog} WHERE timestamp < %d', time() - variable_get('statistics_flush_accesslog_timer', 259200));}/** * Returns all time or today top or last viewed node(s). * * @param $dbfield *   one of *   - 'totalcount': top viewed content of all time. *   - 'daycount': top viewed content for today. *   - 'timestamp': last viewed node. * * @param $dbrows *   number of rows to be returned. * * @return *   A query result containing n.nid, n.title, u.uid, u.name of the selected node(s) *   or FALSE if the query could not be executed correctly. */function statistics_title_list($dbfield, $dbrows) {  if (in_array($dbfield, array('totalcount', 'daycount', 'timestamp'))) {    return db_query_range(db_rewrite_sql("SELECT n.nid, n.title, u.uid, u.name FROM {node} n INNER JOIN {node_counter} s ON n.nid = s.nid INNER JOIN {users} u ON n.uid = u.uid WHERE s.". $dbfield ." != 0 AND n.status = 1 ORDER BY s.". $dbfield ." DESC"), 0, $dbrows);  }  return FALSE;}/** * Retrieves a node's "view statistics". * * @param $nid *   node ID * * @return *   An array with three entries: [0]=totalcount, [1]=daycount, [2]=timestamp *   - totalcount: count of the total number of times that node has been viewed. *   - daycount: count of the total number of times that node has been viewed "today". *     For the daycount to be reset, cron must be enabled. *   - timestamp: timestamp of when that node was last viewed. */function statistics_get($nid) {  if ($nid > 0) {    // Retrieve an array with both totalcount and daycount.    $statistics = db_fetch_array(db_query('SELECT totalcount, daycount, timestamp FROM {node_counter} WHERE nid = %d', $nid));  }  return $statistics;}/** * Implementation of hook_block(). */function statistics_block($op = 'list', $delta = 0, $edit = array()) {  switch ($op) {    case 'list':      if (variable_get('statistics_count_content_views', 0)) {        $blocks[0]['info'] = t('Popular content');        // Too dynamic to cache.        $blocks[0]['cache'] = BLOCK_NO_CACHE;        return $blocks;      }      break;    case 'configure':      // Popular content block settings      $numbers = array('0' => t('Disabled')) + drupal_map_assoc(array(1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 15, 20, 25, 30, 40));      $form['statistics_block_top_day_num'] = array('#type' => 'select', '#title' => t("Number of day's top views to display"), '#default_value' => variable_get('statistics_block_top_day_num', 0), '#options' => $numbers, '#description' => t('How many content items to display in "day" list.'));      $form['statistics_block_top_all_num'] = array('#type' => 'select', '#title' => t('Number of all time views to display'), '#default_value' => variable_get('statistics_block_top_all_num', 0), '#options' => $numbers, '#description' => t('How many content items to display in "all time" list.'));      $form['statistics_block_top_last_num'] = array('#type' => 'select', '#title' => t('Number of most recent views to display'), '#default_value' => variable_get('statistics_block_top_last_num', 0), '#options' => $numbers, '#description' => t('How many content items to display in "recently viewed" list.'));      return $form;    case 'save':      variable_set('statistics_block_top_day_num', $edit['statistics_block_top_day_num']);      variable_set('statistics_block_top_all_num', $edit['statistics_block_top_all_num']);      variable_set('statistics_block_top_last_num', $edit['statistics_block_top_last_num']);      break;    case 'view':      if (user_access('access content')) {        $content = array();        $daytop = variable_get('statistics_block_top_day_num', 0);        if ($daytop && ($result = statistics_title_list('daycount', $daytop)) && ($node_title_list = node_title_list($result, t("Today's:")))) {          $content[] = $node_title_list;        }        $alltimetop = variable_get('statistics_block_top_all_num', 0);        if ($alltimetop && ($result = statistics_title_list('totalcount', $alltimetop)) && ($node_title_list = node_title_list($result, t('All time:')))) {          $content[] = $node_title_list;        }        $lasttop = variable_get('statistics_block_top_last_num', 0);        if ($lasttop && ($result = statistics_title_list('timestamp', $lasttop)) && ($node_title_list = node_title_list($result, t('Last viewed:')))) {          $content[] = $node_title_list;        }        if (count($content)) {          $block['content'] = implode('<br />', $content);          $block['subject'] = t('Popular content');          return $block;        }      }  }}/** * It is possible to adjust the width of columns generated by the * statistics module. */function _statistics_link($path, $width = 35) {  $title = drupal_get_path_alias($path);  $title = truncate_utf8($title, $width, FALSE, TRUE);  return l($title, $path);}function _statistics_format_item($title, $path) {  $path = ($path ? $path : '/');  $output  = ($title ? "$title<br />" : '');  $output .= _statistics_link($path);  return $output;}/** * Implementation of hook_nodeapi(). */function statistics_nodeapi(&$node, $op, $arg = 0) {  switch ($op) {    case 'delete':      // clean up statistics table when node is deleted      db_query('DELETE FROM {node_counter} WHERE nid = %d', $node->nid);  }}
<?php// $Id$/** * @file * Functions to handle paths in Drupal, including path aliasing. * * These functions are not loaded for cached pages, but modules that need * to use them in hook_init() or hook exit() can make them available, by * executing "drupal_bootstrap(DRUPAL_BOOTSTRAP_PATH);". *//** * Initialize the $_GET['q'] variable to the proper normal path. */function drupal_init_path() {  if (!empty($_GET['q'])) {    $_GET['q'] = drupal_get_normal_path(trim($_GET['q'], '/'));  }  else {    $_GET['q'] = drupal_get_normal_path(variable_get('site_frontpage', 'node'));  }}/** * Given an alias, return its Drupal system URL if one exists. Given a Drupal * system URL return one of its aliases if such a one exists. Otherwise, * return FALSE. * * @param $action *   One of the following values: *   - wipe: delete the alias cache. *   - alias: return an alias for a given Drupal system path (if one exists). *   - source: return the Drupal system URL for a path alias (if one exists). * @param $path *   The path to investigate for corresponding aliases or system URLs. * @param $path_language *   Optional language code to search the path with. Defaults to the page language. *   If there's no path defined for that language it will search paths without *   language. * * @return *   Either a Drupal system path, an aliased path, or FALSE if no path was *   found. */function drupal_lookup_path($action, $path = '', $path_language = '') {  global $language;  // $map is an array with language keys, holding arrays of Drupal paths to alias relations  static $map = array(), $no_src = array(), $count;  $path_language = $path_language ? $path_language : $language->language;  // Use $count to avoid looking up paths in subsequent calls if there simply are no aliases  if (!isset($count)) {    $count = db_result(db_query('SELECT COUNT(pid) FROM {url_alias}'));  }  if ($action == 'wipe') {    $map = array();    $no_src = array();    $count = NULL;  }  elseif ($count > 0 && $path != '') {    if ($action == 'alias') {      if (isset($map[$path_language][$path])) {        return $map[$path_language][$path];      }      // Get the most fitting result falling back with alias without language      $alias = db_result(db_query("SELECT dst FROM {url_alias} WHERE src = '%s' AND language IN('%s', '') ORDER BY language DESC, pid DESC", $path, $path_language));      $map[$path_language][$path] = $alias;      return $alias;    }    // Check $no_src for this $path in case we've already determined that there    // isn't a path that has this alias    elseif ($action == 'source' && !isset($no_src[$path_language][$path])) {      // Look for the value $path within the cached $map      $src = '';      if (!isset($map[$path_language]) || !($src = array_search($path, $map[$path_language]))) {        // Get the most fitting result falling back with alias without language        if ($src = db_result(db_query("SELECT src FROM {url_alias} WHERE dst = '%s' AND language IN('%s', '') ORDER BY language DESC, pid DESC", $path, $path_language))) {          $map[$path_language][$src] = $path;        }        else {          // We can't record anything into $map because we do not have a valid          // index and there is no need because we have not learned anything          // about any Drupal path. Thus cache to $no_src.          $no_src[$path_language][$path] = TRUE;        }      }      return $src;    }  }  return FALSE;}/** * Given an internal Drupal path, return the alias set by the administrator. * * @param $path *   An internal Drupal path. * @param $path_language *   An optional language code to look up the path in. * * @return *   An aliased path if one was found, or the original path if no alias was *   found. */function drupal_get_path_alias($path, $path_language = '') {  $result = $path;  if ($alias = drupal_lookup_path('alias', $path, $path_language)) {    $result = $alias;  }  return $result;}/** * Given a path alias, return the internal path it represents. * * @param $path *   A Drupal path alias. * @param $path_language *   An optional language code to look up the path in. * * @return *   The internal path represented by the alias, or the original alias if no *   internal path was found. */function drupal_get_normal_path($path, $path_language = '') {  $result = $path;  if ($src = drupal_lookup_path('source', $path, $path_language)) {    $result = $src;  }  if (function_exists('custom_url_rewrite_inbound')) {    // Modules may alter the inbound request path by reference.    custom_url_rewrite_inbound($result, $path, $path_language);  }  return $result;}/** * Return a component of the current Drupal path. * * When viewing a page at the path "admin/content/types", for example, arg(0) * would return "admin", arg(1) would return "content", and arg(2) would return * "types". * * Avoid use of this function where possible, as resulting code is hard to read. * Instead, attempt to use named arguments in menu callback functions. See the * explanation in menu.inc for how to construct callbacks that take arguments. * * @param $index *   The index of the component, where each component is separated by a '/' *   (forward-slash), and where the first component has an index of 0 (zero). * * @return *   The component specified by $index, or NULL if the specified component was *   not found. */function arg($index = NULL, $path = NULL) {  static $arguments;  if (!isset($path)) {    $path = $_GET['q'];  }  if (!isset($arguments[$path])) {    $arguments[$path] = explode('/', $path);  }  if (!isset($index)) {    return $arguments[$path];  }  if (isset($arguments[$path][$index])) {    return $arguments[$path][$index];  }}/** * Get the title of the current page, for display on the page and in the title bar. * * @return *   The current page's title. */function drupal_get_title() {  $title = drupal_set_title();  // during a bootstrap, menu.inc is not included and thus we cannot provide a title  if (!isset($title) && function_exists('menu_get_active_title')) {    $title = check_plain(menu_get_active_title());  }  return $title;}/** * Set the title of the current page, for display on the page and in the title bar. * * @param $title *   Optional string value to assign to the page title; or if set to NULL *   (default), leaves the current title unchanged. * * @return *   The updated title of the current page. */function drupal_set_title($title = NULL) {  static $stored_title;  if (isset($title)) {    $stored_title = $title;  }  return $stored_title;}/** * Check if the current page is the front page. * * @return *   Boolean value: TRUE if the current page is the front page; FALSE if otherwise. */function drupal_is_front_page() {  // As drupal_init_path updates $_GET['q'] with the 'site_frontpage' path,  // we can check it against the 'site_frontpage' variable.  return $_GET['q'] == drupal_get_normal_path(variable_get('site_frontpage', 'node'));}/** * Check if a path matches any pattern in a set of patterns. * * @param $path *   The path to match. * @param $patterns *   String containing a set of patterns separated by \n, \r or \r\n. * * @return *   1 if there is a match, 0 if there is not a match. */function drupal_match_path($path, $patterns) {  static $regexps;  if (!isset($regexps[$patterns])) {    $regexps[$patterns] = '/^('. preg_replace(array('/(\r\n?|\n)/', '/\\\\\*/', '/(^|\|)\\\\<front\\\\>($|\|)/'), array('|', '.*', '\1'. preg_quote(variable_get('site_frontpage', 'node'), '/') .'\2'), preg_quote($patterns, '/')) .')$/';  }  return preg_match($regexps[$patterns], $path);}
<?php// $Id$/** * Test and report Drupal installation requirements. * * @param $phase *   The current system installation phase. * @return *   An array of system requirements. */function system_requirements($phase) {  $requirements = array();  // Ensure translations don't break at install time  $t = get_t();  // Report Drupal version  if ($phase == 'runtime') {    $requirements['drupal'] = array(      'title' => $t('Drupal'),      'value' => VERSION,      'severity' => REQUIREMENT_INFO,      'weight' => -10,    );  }  // Web server information.  $software = $_SERVER['SERVER_SOFTWARE'];  $requirements['webserver'] = array(    'title' => $t('Web server'),    'value' => $software,  );  // Test PHP version  $requirements['php'] = array(    'title' => $t('PHP'),    'value' => ($phase == 'runtime') ? l(phpversion(), 'admin/reports/status/php') : phpversion(),  );  if (version_compare(phpversion(), DRUPAL_MINIMUM_PHP) < 0) {    $requirements['php']['description'] = $t('Your PHP installation is too old. Drupal requires at least PHP %version.', array('%version' => DRUPAL_MINIMUM_PHP));    $requirements['php']['severity'] = REQUIREMENT_ERROR;  }  // Test PHP register_globals setting.  $requirements['php_register_globals'] = array(    'title' => $t('PHP register globals'),  );  $register_globals = trim(ini_get('register_globals'));  // Unfortunately, ini_get() may return many different values, and we can't  // be certain which values mean 'on', so we instead check for 'not off'  // since we never want to tell the user that their site is secure  // (register_globals off), when it is in fact on. We can only guarantee  // register_globals is off if the value returned is 'off', '', or 0.  if (!empty($register_globals) && strtolower($register_globals) != 'off') {    $requirements['php_register_globals']['description'] = $t('<em>register_globals</em> is enabled. Drupal requires this configuration directive to be disabled. Your site may not be secure when <em>register_globals</em> is enabled. The PHP manual has instructions for <a href="http://php.net/configuration.changes">how to change configuration settings</a>.');    $requirements['php_register_globals']['severity'] = REQUIREMENT_ERROR;    $requirements['php_register_globals']['value'] = $t("Enabled ('@value')", array('@value' => $register_globals));  }  else {    $requirements['php_register_globals']['value'] = $t('Disabled');  }  // Test PHP memory_limit  $memory_limit = ini_get('memory_limit');  $requirements['php_memory_limit'] = array(    'title' => $t('PHP memory limit'),    'value' => $memory_limit == -1 ? t('-1 (Unlimited)') : $memory_limit,  );  if ($memory_limit && $memory_limit != -1 && parse_size($memory_limit) < parse_size(DRUPAL_MINIMUM_PHP_MEMORY_LIMIT)) {    $description = '';    if ($phase == 'install') {      $description = $t('Consider increasing your PHP memory limit to %memory_minimum_limit to help prevent errors in the installation process.', array('%memory_minimum_limit' => DRUPAL_MINIMUM_PHP_MEMORY_LIMIT));    }    elseif ($phase == 'update') {      $description = $t('Consider increasing your PHP memory limit to %memory_minimum_limit to help prevent errors in the update process.', array('%memory_minimum_limit' => DRUPAL_MINIMUM_PHP_MEMORY_LIMIT));    }    elseif ($phase == 'runtime') {      $description = $t('Depending on your configuration, Drupal can run with a %memory_limit PHP memory limit. However, a %memory_minimum_limit PHP memory limit or above is recommended, especially if your site uses additional custom or contributed modules.', array('%memory_limit' => $memory_limit, '%memory_minimum_limit' => DRUPAL_MINIMUM_PHP_MEMORY_LIMIT));    }    if (!empty($description)) {      if ($php_ini_path = get_cfg_var('cfg_file_path')) {        $description .= ' '. $t('Increase the memory limit by editing the memory_limit parameter in the file %configuration-file and then restart your web server (or contact your system administrator or hosting provider for assistance).', array('%configuration-file' => $php_ini_path));      }      else {        $description .= ' '. $t('Contact your system administrator or hosting provider for assistance with increasing your PHP memory limit.');      }      $requirements['php_memory_limit']['description'] = $description .' '. $t('See the <a href="@url">Drupal requirements</a> for more information.', array('@url' => 'http://drupal.org/requirements'));      $requirements['php_memory_limit']['severity'] = REQUIREMENT_WARNING;    }  }  // Test DB version  global $db_type;  if (function_exists('db_status_report')) {    $requirements += db_status_report($phase);  }  // Test settings.php file writability  if ($phase == 'runtime') {    $conf_dir = drupal_verify_install_file(conf_path(), FILE_NOT_WRITABLE, 'dir');    $conf_file = drupal_verify_install_file(conf_path() .'/settings.php', FILE_EXIST|FILE_READABLE|FILE_NOT_WRITABLE);    if (!$conf_dir || !$conf_file) {      $requirements['settings.php'] = array(        'value' => $t('Not protected'),        'severity' => REQUIREMENT_ERROR,        'description' => '',      );      if (!$conf_dir) {        $requirements['settings.php']['description'] .= $t('The directory %file is not protected from modifications and poses a security risk. You must change the directory\'s permissions to be non-writable. ', array('%file' => conf_path()));      }      if (!$conf_file) {        $requirements['settings.php']['description'] .= $t('The file %file is not protected from modifications and poses a security risk. You must change the file\'s permissions to be non-writable.', array('%file' => conf_path() .'/settings.php'));      }    }    else {      $requirements['settings.php'] = array(        'value' => $t('Protected'),      );    }    $requirements['settings.php']['title'] = $t('Configuration file');  }  // Report cron status.  if ($phase == 'runtime') {    // Cron warning threshold defaults to two days.    $threshold_warning = variable_get('cron_threshold_warning', 172800);    // Cron error threshold defaults to two weeks.    $threshold_error = variable_get('cron_threshold_error', 1209600);    // Cron configuration help text.    $help = $t('For more information, see the online handbook entry for <a href="@cron-handbook">configuring cron jobs</a>.', array('@cron-handbook' => 'http://drupal.org/cron'));    // Determine when cron last ran. If never, use the install time to    // determine the warning or error status.    $cron_last = variable_get('cron_last', NULL);    $never_run = FALSE;    if (!is_numeric($cron_last)) {      $never_run = TRUE;      $cron_last = variable_get('install_time', 0);    }    // Determine severity based on time since cron last ran.    $severity = REQUIREMENT_OK;    if (time() - $cron_last > $threshold_error) {      $severity = REQUIREMENT_ERROR;    }    else if ($never_run || (time() - $cron_last > $threshold_warning)) {      $severity = REQUIREMENT_WARNING;    }    // If cron hasn't been run, and the user is viewing the main    // administration page, instead of an error, we display a helpful reminder    // to configure cron jobs.    if ($never_run && $severity != REQUIREMENT_ERROR && $_GET['q'] == 'admin' && user_access('administer site configuration')) {      drupal_set_message($t('Cron has not run. Please visit the <a href="@status">status report</a> for more information.', array('@status' => url('admin/reports/status'))));    }    // Set summary and description based on values determined above.    if ($never_run) {      $summary = $t('Never run');      $description = $t('Cron has not run.') .' '. $help;    }    else {      $summary = $t('Last run !time ago', array('!time' => format_interval(time() - $cron_last)));      $description = '';      if ($severity != REQUIREMENT_OK) {        $description = $t('Cron has not run recently.') .' '. $help;      }    }    $requirements['cron'] = array(      'title' => $t('Cron maintenance tasks'),      'severity' => $severity,      'value' => $summary,      'description' => $description .' '. $t('You can <a href="@cron">run cron manually</a>.', array('@cron' => url('admin/reports/status/run-cron'))),    );  }  // Test files directory  $directory = file_directory_path();  $requirements['file system'] = array(    'title' => $t('File system'),  );  // For installer, create the directory if possible.  if ($phase == 'install' && !is_dir($directory) && @mkdir($directory)) {    @chmod($directory, 0775); // Necessary for non-webserver users.  }  $is_writable = is_writable($directory);  $is_directory = is_dir($directory);  if (!$is_writable || !$is_directory) {    $description = '';    $requirements['file system']['value'] = $t('Not writable');    if (!$is_directory) {      $error = $t('The directory %directory does not exist.', array('%directory' => $directory));    }    else {      $error = $t('The directory %directory is not writable.', array('%directory' => $directory));    }    // The files directory requirement check is done only during install and runtime.    if ($phase == 'runtime') {      $description = $error .' '. $t('You may need to set the correct directory at the <a href="@admin-file-system">file system settings page</a> or change the current directory\'s permissions so that it is writable.', array('@admin-file-system' => url('admin/settings/file-system')));    }    elseif ($phase == 'install') {      // For the installer UI, we need different wording. 'value' will      // be treated as version, so provide none there.      $description = $error .' '. $t('An automated attempt to create this directory failed, possibly due to a permissions problem. To proceed with the installation, either create the directory and modify its permissions manually, or ensure that the installer has the permissions to create it automatically. For more information, please see INSTALL.txt or the <a href="@handbook_url">on-line handbook</a>.', array('@handbook_url' => 'http://drupal.org/server-permissions'));      $requirements['file system']['value'] = '';    }    if (!empty($description)) {      $requirements['file system']['description'] = $description;      $requirements['file system']['severity'] = REQUIREMENT_ERROR;    }  }  else {    if (variable_get('file_downloads', FILE_DOWNLOADS_PUBLIC) == FILE_DOWNLOADS_PUBLIC) {      $requirements['file system']['value'] = $t('Writable (<em>public</em> download method)');    }    else {      $requirements['file system']['value'] = $t('Writable (<em>private</em> download method)');    }  }  // See if updates are available in update.php.  if ($phase == 'runtime') {    $requirements['update'] = array(      'title' => $t('Database updates'),      'severity' => REQUIREMENT_OK,      'value' => $t('Up to date'),    );    // Check installed modules.    foreach (module_list() as $module) {      $updates = drupal_get_schema_versions($module);      if ($updates !== FALSE) {        $default = drupal_get_installed_schema_version($module);        if (max($updates) > $default) {          $requirements['update']['severity'] = REQUIREMENT_ERROR;          $requirements['update']['value'] = $t('Out of date');          $requirements['update']['description'] = $t('Some modules have database schema updates to install. You should run the <a href="@update">database update script</a> immediately.', array('@update' => base_path() .'update.php'));          break;        }      }    }  }  // Verify the update.php access setting  if ($phase == 'runtime') {    if (!empty($GLOBALS['update_free_access'])) {      $requirements['update access'] = array(        'value' => $t('Not protected'),        'severity' => REQUIREMENT_ERROR,        'description' => $t('The update.php script is accessible to everyone without authentication check, which is a security risk. You must change the $update_free_access value in your settings.php back to FALSE.'),      );    }    else {      $requirements['update access'] = array(        'value' => $t('Protected'),      );    }    $requirements['update access']['title'] = $t('Access to update.php');  }  // Test Unicode library  include_once './includes/unicode.inc';  $requirements = array_merge($requirements, unicode_requirements());  if ($phase == 'runtime') {    // Check for update status module.    if (!module_exists('update')) {      $requirements['update status'] = array(        'value' => $t('Not enabled'),        'severity' => REQUIREMENT_WARNING,        'description' => $t('Update notifications are not enabled. It is <strong>highly recommended</strong> that you enable the update status module from the <a href="@module">module administration page</a> in order to stay up-to-date on new releases. For more information please read the <a href="@update">Update status handbook page</a>.', array('@update' => 'http://drupal.org/handbook/modules/update', '@module' => url('admin/build/modules'))),      );    }    else {      $requirements['update status'] = array(        'value' => $t('Enabled'),      );    }    $requirements['update status']['title'] = $t('Update notifications');    // Check that Drupal can issue HTTP requests.    if (variable_get('drupal_http_request_fails', TRUE) && !system_check_http_request()) {      $requirements['http requests'] = array(        'title' => $t('HTTP request status'),        'value' => $t('Fails'),        'severity' => REQUIREMENT_ERROR,        'description' => $t('Your system or network configuration does not allow Drupal to access web pages, resulting in reduced functionality. This could be due to your webserver configuration or PHP settings, and should be resolved in order to download information about available updates, fetch aggregator feeds, sign in via OpenID, or use other network-dependent services.'),      );    }  }  return $requirements;}/** * Implementation of hook_install(). */function system_install() {  if ($GLOBALS['db_type'] == 'pgsql') {    // We create some custom types and functions using global names instead of    // prefixing them like we do with table names. If this function is ever    // called again (for example, by the test framework when creating prefixed    // test databases), the global names will already exist. We therefore avoid    // trying to create them again in that case.    // Create unsigned types.    if (!db_result(db_query("SELECT COUNT(*) FROM pg_constraint WHERE conname = 'int_unsigned_check'"))) {      db_query("CREATE DOMAIN int_unsigned integer CHECK (VALUE >= 0)");    }    if (!db_result(db_query("SELECT COUNT(*) FROM pg_constraint WHERE conname = 'smallint_unsigned_check'"))) {      db_query("CREATE DOMAIN smallint_unsigned smallint CHECK (VALUE >= 0)");    }    if (!db_result(db_query("SELECT COUNT(*) FROM pg_constraint WHERE conname = 'bigint_unsigned_check'"))) {      db_query("CREATE DOMAIN bigint_unsigned bigint CHECK (VALUE >= 0)");    }    // Create functions.    db_query('CREATE OR REPLACE FUNCTION "greatest"(numeric, numeric) RETURNS numeric AS      \'SELECT CASE WHEN (($1 > $2) OR ($2 IS NULL)) THEN $1 ELSE $2 END;\'      LANGUAGE \'sql\''    );    db_query('CREATE OR REPLACE FUNCTION "greatest"(numeric, numeric, numeric) RETURNS numeric AS      \'SELECT greatest($1, greatest($2, $3));\'      LANGUAGE \'sql\''    );    if (!db_result(db_query("SELECT COUNT(*) FROM pg_proc WHERE proname = 'rand'"))) {      db_query('CREATE OR REPLACE FUNCTION "rand"() RETURNS float AS        \'SELECT random();\'        LANGUAGE \'sql\''      );    }    if (!db_result(db_query("SELECT COUNT(*) FROM pg_proc WHERE proname = 'concat'"))) {      db_query('CREATE OR REPLACE FUNCTION "concat"(text, text) RETURNS text AS        \'SELECT $1 || $2;\'        LANGUAGE \'sql\''      );    }    db_query('CREATE OR REPLACE FUNCTION "if"(boolean, text, text) RETURNS text AS      \'SELECT CASE WHEN $1 THEN $2 ELSE $3 END;\'      LANGUAGE \'sql\''    );    db_query('CREATE OR REPLACE FUNCTION "if"(boolean, integer, integer) RETURNS integer AS      \'SELECT CASE WHEN $1 THEN $2 ELSE $3 END;\'      LANGUAGE \'sql\''    );  }  // Create tables.  $modules = array('system', 'filter', 'block', 'user', 'node', 'comment', 'taxonomy');  foreach ($modules as $module) {    drupal_install_schema($module);  }  // Clear out module list and hook implementation statics before calling  // system_theme_data().  module_list(TRUE, FALSE);  module_implements('', FALSE, TRUE);  // Load system theme data appropriately.  system_theme_data();  // Inserting uid 0 here confuses MySQL -- the next user might be created as  // uid 2 which is not what we want. So we insert the first user here, the  // anonymous user. uid is 1 here for now, but very soon it will be changed  // to 0.  db_query("INSERT INTO {users} (name, mail) VALUES('%s', '%s')", '', '');  // We need some placeholders here as name and mail are uniques and data is  // presumed to be a serialized array. Install will change uid 1 immediately  // anyways. So we insert the superuser here, the uid is 2 here for now, but  // very soon it will be changed to 1.  db_query("INSERT INTO {users} (name, mail, created, data) VALUES('%s', '%s', %d, '%s')", 'placeholder-for-uid-1', 'placeholder-for-uid-1', time(), serialize(array()));  // This sets the above two users uid 0 (anonymous). We avoid an explicit 0  // otherwise MySQL might insert the next auto_increment value.  db_query("UPDATE {users} SET uid = uid - uid WHERE name = '%s'", '');  // This sets uid 1 (superuser). We skip uid 2 but that's not a big problem.  db_query("UPDATE {users} SET uid = 1 WHERE name = '%s'", 'placeholder-for-uid-1');  db_query("INSERT INTO {role} (name) VALUES ('%s')", 'anonymous user');  db_query("INSERT INTO {role} (name) VALUES ('%s')", 'authenticated user');  db_query("INSERT INTO {permission} (rid, perm, tid) VALUES (%d, '%s', %d)", 1, 'access content', 0);  db_query("INSERT INTO {permission} (rid, perm, tid) VALUES (%d, '%s', %d)", 2, 'access comments, access content, post comments, post comments without approval', 0);  db_query("INSERT INTO {variable} (name, value) VALUES ('%s', '%s')", 'theme_default', 's:7:"garland";');  db_query("UPDATE {system} SET status = %d WHERE type = '%s' AND name = '%s'", 1, 'theme', 'garland');  db_query("INSERT INTO {blocks} (module, delta, theme, status, weight, region, pages, cache) VALUES ('%s', '%s', '%s', %d, %d, '%s', '%s', %d)", 'user', '0', 'garland', 1, 0, 'left', '', -1);  db_query("INSERT INTO {blocks} (module, delta, theme, status, weight, region, pages, cache) VALUES ('%s', '%s', '%s', %d, %d, '%s', '%s', %d)", 'user', '1', 'garland', 1, 0, 'left', '', -1);  db_query("INSERT INTO {blocks} (module, delta, theme, status, weight, region, pages, cache) VALUES ('%s', '%s', '%s', %d, %d, '%s', '%s', %d)", 'system', '0', 'garland', 1, 10, 'footer', '', -1);  db_query("INSERT INTO {node_access} (nid, gid, realm, grant_view, grant_update, grant_delete) VALUES (%d, %d, '%s', %d, %d, %d)", 0, 0, 'all', 1, 0, 0);  // Add input formats.  db_query("INSERT INTO {filter_formats} (name, roles, cache) VALUES ('%s', '%s', %d)", 'Filtered HTML', ',1,2,', 1);  db_query("INSERT INTO {filter_formats} (name, roles, cache) VALUES ('%s', '%s', %d)", 'Full HTML', '', 1);  // Enable filters for each input format.  // Filtered HTML:  // URL filter.  db_query("INSERT INTO {filters} (format, module, delta, weight) VALUES (%d, '%s', %d, %d)", 1, 'filter', 2, 0);  // HTML filter.  db_query("INSERT INTO {filters} (format, module, delta, weight) VALUES (%d, '%s', %d, %d)", 1, 'filter', 0, 1);  // Line break filter.  db_query("INSERT INTO {filters} (format, module, delta, weight) VALUES (%d, '%s', %d, %d)", 1, 'filter', 1, 2);  // HTML corrector filter.  db_query("INSERT INTO {filters} (format, module, delta, weight) VALUES (%d, '%s', %d, %d)", 1, 'filter', 3, 10);  // Full HTML:  // URL filter.  db_query("INSERT INTO {filters} (format, module, delta, weight) VALUES (%d, '%s', %d, %d)", 2, 'filter', 2, 0);  // Line break filter.  db_query("INSERT INTO {filters} (format, module, delta, weight) VALUES (%d, '%s', %d, %d)", 2, 'filter', 1, 1);  // HTML corrector filter.  db_query("INSERT INTO {filters} (format, module, delta, weight) VALUES (%d, '%s', %d, %d)", 2, 'filter', 3, 10);  db_query("INSERT INTO {variable} (name, value) VALUES ('%s','%s')", 'filter_html_1', 'i:1;');  db_query("INSERT INTO {variable} (name, value) VALUES ('%s', '%s')", 'node_options_forum', 'a:1:{i:0;s:6:"status";}');}/** * Implementation of hook_schema(). */function system_schema() {  // NOTE: {variable} needs to be created before all other tables, as  // some database drivers, e.g. Oracle and DB2, will require variable_get()  // and variable_set() for overcoming some database specific limitations.  $schema['variable'] = array(    'description' => 'Named variable/value pairs created by Drupal core or any other module or theme. All variables are cached in memory at the start of every Drupal request so developers should not be careless about what is stored here.',    'fields' => array(      'name' => array(        'description' => 'The name of the variable.',        'type' => 'varchar',        'length' => 128,        'not null' => TRUE,        'default' => ''),      'value' => array(        'description' => 'The value of the variable.',        'type' => 'text',        'not null' => TRUE,        'size' => 'big'),      ),    'primary key' => array('name'),    );  $schema['actions'] = array(    'description' => 'Stores action information.',    'fields' => array(      'aid' => array(        'description' => 'Primary Key: Unique actions ID.',        'type' => 'varchar',        'length' => 255,        'not null' => TRUE,        'default' => '0'),      'type' => array(        'description' => 'The object that that action acts on (node, user, comment, system or custom types.)',        'type' => 'varchar',        'length' => 32,        'not null' => TRUE,        'default' => ''),      'callback' => array(        'description' => 'The callback function that executes when the action runs.',        'type' => 'varchar',        'length' => 255,        'not null' => TRUE,        'default' => ''),      'parameters' => array(        'description' => 'Parameters to be passed to the callback function.',        'type' => 'text',        'not null' => TRUE,        'size' => 'big'),      'description' => array(        'description' => 'Description of the action.',        'type' => 'varchar',        'length' => 255,        'not null' => TRUE,        'default' => '0'),      ),    'primary key' => array('aid'),    );  $schema['actions_aid'] = array(    'description' => 'Stores action IDs for non-default actions.',    'fields' => array(      'aid' => array(        'description' => 'Primary Key: Unique actions ID.',        'type' => 'serial',        'unsigned' => TRUE,        'not null' => TRUE),      ),    'primary key' => array('aid'),    );  $schema['batch'] = array(    'description' => t('Stores details about batches (processes that run in multiple HTTP requests).'),    'fields' => array(      'bid' => array(        'description' => 'Primary Key: Unique batch ID.',        'type' => 'serial',        'unsigned' => TRUE,        'not null' => TRUE),      'token' => array(        'description' => "A string token generated against the current user's session id and the batch id, used to ensure that only the user who submitted the batch can effectively access it.",        'type' => 'varchar',        'length' => 64,        'not null' => TRUE),      'timestamp' => array(        'description' => 'A Unix timestamp indicating when this batch was submitted for processing. Stale batches are purged at cron time.',        'type' => 'int',        'not null' => TRUE),      'batch' => array(        'description' => 'A serialized array containing the processing data for the batch.',        'type' => 'text',        'not null' => FALSE,        'size' => 'big')      ),    'primary key' => array('bid'),    'indexes' => array('token' => array('token')),    );  $schema['cache'] = array(    'description' => 'Generic cache table for caching things not separated out into their own tables. Contributed modules may also use this to store cached items.',    'fields' => array(      'cid' => array(        'description' => 'Primary Key: Unique cache ID.',        'type' => 'varchar',        'length' => 255,        'not null' => TRUE,        'default' => ''),      'data' => array(        'description' => 'A collection of data to cache.',        'type' => 'blob',        'not null' => FALSE,        'size' => 'big'),      'expire' => array(        'description' => 'A Unix timestamp indicating when the cache entry should expire, or 0 for never.',        'type' => 'int',        'not null' => TRUE,        'default' => 0),      'created' => array(        'description' => 'A Unix timestamp indicating when the cache entry was created.',        'type' => 'int',        'not null' => TRUE,        'default' => 0),      'headers' => array(        'description' => 'Any custom HTTP headers to be added to cached data.',        'type' => 'text',        'not null' => FALSE),      'serialized' => array(        'description' => 'A flag to indicate whether content is serialized (1) or not (0).',        'type' => 'int',        'size' => 'small',        'not null' => TRUE,        'default' => 0)      ),    'indexes' => array('expire' => array('expire')),    'primary key' => array('cid'),    );  $schema['cache_form'] = $schema['cache'];  $schema['cache_form']['description'] = 'Cache table for the form system to store recently built forms and their storage data, to be used in subsequent page requests.';  $schema['cache_page'] = $schema['cache'];  $schema['cache_page']['description'] = 'Cache table used to store compressed pages for anonymous users, if page caching is enabled.';  $schema['cache_menu'] = $schema['cache'];  $schema['cache_menu']['description'] = 'Cache table for the menu system to store router information as well as generated link trees for various menu/page/user combinations.';  $schema['files'] = array(    'description' => 'Stores information for uploaded files.',    'fields' => array(      'fid' => array(        'description' => 'Primary Key: Unique files ID.',        'type' => 'serial',        'unsigned' => TRUE,        'not null' => TRUE),      'uid' => array(        'description' => 'The {users}.uid of the user who is associated with the file.',        'type' => 'int',        'unsigned' => TRUE,        'not null' => TRUE,        'default' => 0),      'filename' => array(        'description' => 'Name of the file.',        'type' => 'varchar',        'length' => 255,        'not null' => TRUE,        'default' => ''),      'filepath' => array(        'description' => 'Path of the file relative to Drupal root.',        'type' => 'varchar',        'length' => 255,        'not null' => TRUE,        'default' => ''),      'filemime' => array(        'description' => 'The file MIME type.',        'type' => 'varchar',        'length' => 255,        'not null' => TRUE,        'default' => ''),      'filesize' => array(        'description' => 'The size of the file in bytes.',        'type' => 'int',        'unsigned' => TRUE,        'not null' => TRUE,        'default' => 0),      'status' => array(        'description' => 'A flag indicating whether file is temporary (1) or permanent (0).',        'type' => 'int',        'not null' => TRUE,        'default' => 0),      'timestamp' => array(        'description' => 'UNIX timestamp for when the file was added.',        'type' => 'int',        'unsigned' => TRUE,        'not null' => TRUE,        'default' => 0),      ),    'indexes' => array(      'uid' => array('uid'),      'status' => array('status'),      'timestamp' => array('timestamp'),      ),    'primary key' => array('fid'),    );  $schema['flood'] = array(    'description' => 'Flood controls the threshold of events, such as the number of contact attempts.',    'fields' => array(      'fid' => array(        'description' => 'Unique flood event ID.',        'type' => 'serial',        'not null' => TRUE),      'event' => array(        'description' => 'Name of event (e.g. contact).',        'type' => 'varchar',        'length' => 64,        'not null' => TRUE,        'default' => ''),      'hostname' => array(        'description' => 'Hostname of the visitor.',        'type' => 'varchar',        'length' => 128,        'not null' => TRUE,        'default' => ''),      'timestamp' => array(        'description' => 'Timestamp of the event.',        'type' => 'int',        'not null' => TRUE,        'default' => 0)      ),    'primary key' => array('fid'),    'indexes' => array(      'allow' => array('event', 'hostname', 'timestamp'),    ),    );  $schema['history'] = array(    'description' => 'A record of which {users} have read which {node}s.',    'fields' => array(      'uid' => array(        'description' => 'The {users}.uid that read the {node} nid.',        'type' => 'int',        'not null' => TRUE,        'default' => 0),      'nid' => array(        'description' => 'The {node}.nid that was read.',        'type' => 'int',        'not null' => TRUE,        'default' => 0),      'timestamp' => array(        'description' => 'The Unix timestamp at which the read occurred.',        'type' => 'int',        'not null' => TRUE,        'default' => 0)      ),    'primary key' => array('uid', 'nid'),    'indexes' => array(      'nid' => array('nid'),    ),    );  $schema['menu_router'] = array(    'description' => 'Maps paths to various callbacks (access, page and title)',    'fields' => array(      'path' => array(        'description' => 'Primary Key: the Drupal path this entry describes',        'type' => 'varchar',        'length' => 255,        'not null' => TRUE,        'default' => ''),      'load_functions' => array(        'description' => 'A serialized array of function names (like node_load) to be called to load an object corresponding to a part of the current path.',        'type' => 'text',        'not null' => TRUE,),      'to_arg_functions' => array(        'description' => 'A serialized array of function names (like user_uid_optional_to_arg) to be called to replace a part of the router path with another string.',        'type' => 'text',        'not null' => TRUE,),      'access_callback' => array(        'description' => 'The callback which determines the access to this router path. Defaults to user_access.',        'type' => 'varchar',        'length' => 255,        'not null' => TRUE,        'default' => ''),      'access_arguments' => array(        'description' => 'A serialized array of arguments for the access callback.',        'type' => 'text',        'not null' => FALSE),      'page_callback' => array(        'description' => 'The name of the function that renders the page.',        'type' => 'varchar',        'length' => 255,        'not null' => TRUE,        'default' => ''),      'page_arguments' => array(        'description' => 'A serialized array of arguments for the page callback.',        'type' => 'text',        'not null' => FALSE),      'fit' => array(        'description' => 'A numeric representation of how specific the path is.',        'type' => 'int',        'not null' => TRUE,        'default' => 0),      'number_parts' => array(        'description' => 'Number of parts in this router path.',        'type' => 'int',        'not null' => TRUE,        'default' => 0,        'size' => 'small'),      'tab_parent' => array(        'description' => 'Only for local tasks (tabs) - the router path of the parent page (which may also be a local task).',        'type' => 'varchar',        'length' => 255,        'not null' => TRUE,        'default' => ''),      'tab_root' => array(        'description' => 'Router path of the closest non-tab parent page. For pages that are not local tasks, this will be the same as the path.',        'type' => 'varchar',        'length' => 255,        'not null' => TRUE,        'default' => ''),      'title' => array(        'description' => 'The title for the current page, or the title for the tab if this is a local task.',        'type' => 'varchar',        'length' => 255,        'not null' => TRUE,        'default' => ''),      'title_callback' => array(        'description' => 'A function which will alter the title. Defaults to t()',        'type' => 'varchar',        'length' => 255,        'not null' => TRUE,        'default' => ''),      'title_arguments' => array(        'description' => 'A serialized array of arguments for the title callback. If empty, the title will be used as the sole argument for the title callback.',        'type' => 'varchar',        'length' => 255,        'not null' => TRUE,        'default' => ''),      'type' => array(        'description' => 'Numeric representation of the type of the menu item, like MENU_LOCAL_TASK.',        'type' => 'int',        'not null' => TRUE,        'default' => 0),      'block_callback' => array(        'description' => 'Name of a function used to render the block on the system administration page for this item.',        'type' => 'varchar',        'length' => 255,        'not null' => TRUE,        'default' => ''),      'description' => array(        'description' => 'A description of this item.',        'type' => 'text',        'not null' => TRUE),      'position' => array(        'description' => 'The position of the block (left or right) on the system administration page for this item.',        'type' => 'varchar',        'length' => 255,        'not null' => TRUE,        'default' => ''),      'weight' => array(        'description' => 'Weight of the element. Lighter weights are higher up, heavier weights go down.',        'type' => 'int',        'not null' => TRUE,        'default' => 0),      'file' => array(        'description' => 'The file to include for this element, usually the page callback function lives in this file.',        'type' => 'text',        'size' => 'medium')      ),    'indexes' => array(      'fit' => array('fit'),      'tab_parent' => array('tab_parent'),      'tab_root_weight_title' => array(array('tab_root', 64), 'weight', 'title'),            ),    'primary key' => array('path'),    );  $schema['menu_links'] = array(    'description' => 'Contains the individual links within a menu.',    'fields' => array(     'menu_name' => array(        'description' => "The menu name. All links with the same menu name (such as 'navigation') are part of the same menu.",        'type' => 'varchar',        'length' => 32,        'not null' => TRUE,        'default' => ''),      'mlid' => array(        'description' => 'The menu link ID (mlid) is the integer primary key.',        'type' => 'serial',        'unsigned' => TRUE,        'not null' => TRUE),      'plid' => array(        'description' => 'The parent link ID (plid) is the mlid of the link above in the hierarchy, or zero if the link is at the top level in its menu.',        'type' => 'int',        'unsigned' => TRUE,        'not null' => TRUE,        'default' => 0),      'link_path' => array(        'description' => 'The Drupal path or external path this link points to.',        'type' => 'varchar',        'length' => 255,        'not null' => TRUE,        'default' => ''),      'router_path' => array(        'description' => 'For links corresponding to a Drupal path (external = 0), this connects the link to a {menu_router}.path for joins.',        'type' => 'varchar',        'length' => 255,        'not null' => TRUE,        'default' => ''),      'link_title' => array(      'description' => 'The text displayed for the link, which may be modified by a title callback stored in {menu_router}.',        'type' => 'varchar',        'length' => 255,        'not null' => TRUE,        'default' => ''),      'options' => array(        'description' => 'A serialized array of options to be passed to the url() or l() function, such as a query string or HTML attributes.',        'type' => 'text',        'not null' => FALSE),      'module' => array(        'description' => 'The name of the module that generated this link.',        'type' => 'varchar',        'length' => 255,        'not null' => TRUE,        'default' => 'system'),      'hidden' => array(        'description' => 'A flag for whether the link should be rendered in menus. (1 = a disabled menu item that may be shown on admin screens, -1 = a menu callback, 0 = a normal, visible link)',        'type' => 'int',        'not null' => TRUE,        'default' => 0,        'size' => 'small'),      'external' => array(        'description' => 'A flag to indicate if the link points to a full URL starting with a protocol, like http:// (1 = external, 0 = internal).',        'type' => 'int',        'not null' => TRUE,        'default' => 0,        'size' => 'small'),      'has_children' => array(        'description' => 'Flag indicating whether any links have this link as a parent (1 = children exist, 0 = no children).',        'type' => 'int',        'not null' => TRUE,        'default' => 0,        'size' => 'small'),      'expanded' => array(        'description' => 'Flag for whether this link should be rendered as expanded in menus - expanded links always have their child links displayed, instead of only when the link is in the active trail (1 = expanded, 0 = not expanded)',        'type' => 'int',        'not null' => TRUE,        'default' => 0,        'size' => 'small'),      'weight' => array(        'description' => 'Link weight among links in the same menu at the same depth.',        'type' => 'int',        'not null' => TRUE,        'default' => 0),      'depth' => array(        'description' => 'The depth relative to the top level. A link with plid == 0 will have depth == 1.',        'type' => 'int',        'not null' => TRUE,        'default' => 0,        'size' => 'small'),      'customized' => array(        'description' => 'A flag to indicate that the user has manually created or edited the link (1 = customized, 0 = not customized).',        'type' => 'int',        'not null' => TRUE,        'default' => 0,        'size' => 'small'),      'p1' => array(        'description' => 'The first mlid in the materialized path. If N = depth, then pN must equal the mlid. If depth > 1 then p(N-1) must equal the plid. All pX where X > depth must equal zero. The columns p1 .. p9 are also called the parents.',        'type' => 'int',        'unsigned' => TRUE,        'not null' => TRUE,        'default' => 0),      'p2' => array(        'description' => 'The second mlid in the materialized path. See p1.',        'type' => 'int',        'unsigned' => TRUE,        'not null' => TRUE,        'default' => 0),      'p3' => array(        'description' => 'The third mlid in the materialized path. See p1.',        'type' => 'int',        'unsigned' => TRUE,        'not null' => TRUE,        'default' => 0),      'p4' => array(        'description' => 'The fourth mlid in the materialized path. See p1.',        'type' => 'int',        'unsigned' => TRUE,        'not null' => TRUE,        'default' => 0),      'p5' => array(        'description' => 'The fifth mlid in the materialized path. See p1.',        'type' => 'int',        'unsigned' => TRUE,        'not null' => TRUE,        'default' => 0),      'p6' => array(        'description' => 'The sixth mlid in the materialized path. See p1.',        'type' => 'int',        'unsigned' => TRUE,        'not null' => TRUE,        'default' => 0),      'p7' => array(        'description' => 'The seventh mlid in the materialized path. See p1.',        'type' => 'int',        'unsigned' => TRUE,        'not null' => TRUE,        'default' => 0),      'p8' => array(        'description' => 'The eighth mlid in the materialized path. See p1.',        'type' => 'int',        'unsigned' => TRUE,        'not null' => TRUE,        'default' => 0),      'p9' => array(        'description' => 'The ninth mlid in the materialized path. See p1.',        'type' => 'int',        'unsigned' => TRUE,        'not null' => TRUE,        'default' => 0),      'updated' => array(        'description' => 'Flag that indicates that this link was generated during the update from Drupal 5.',        'type' => 'int',        'not null' => TRUE,        'default' => 0,        'size' => 'small'),      ),    'indexes' => array(      'path_menu' => array(array('link_path', 128), 'menu_name'),      'menu_plid_expand_child' => array(        'menu_name', 'plid', 'expanded', 'has_children'),      'menu_parents' => array(        'menu_name', 'p1', 'p2', 'p3', 'p4', 'p5', 'p6', 'p7', 'p8', 'p9'),      'router_path' => array(array('router_path', 128)),      ),    'primary key' => array('mlid'),    );  $schema['semaphore'] = array(    'description' => 'Table for holding semaphores, locks, flags, etc. that cannot be stored as Drupal variables since they must not be cached.',    'fields' => array(      'name' => array(        'description' => 'Primary Key: Unique name.',        'type' => 'varchar',        'length' => 255,        'not null' => TRUE,        'default' => ''),      'value' => array(        'description' => 'A value.',        'type' => 'varchar',        'length' => 255,        'not null' => TRUE,        'default' => ''),      'expire' => array(        'description' => 'A Unix timestamp with microseconds indicating when the semaphore should expire.',        'type' => 'float',        'size' => 'big',        'not null' => TRUE),      ),    'indexes' => array('expire' => array('expire')),    'primary key' => array('name'),    );  $schema['sessions'] = array(    'description' => "Drupal's session handlers read and write into the sessions table. Each record represents a user session, either anonymous or authenticated.",    'fields' => array(      'uid' => array(        'description' => 'The {users}.uid corresponding to a session, or 0 for anonymous user.',        'type' => 'int',        'unsigned' => TRUE,        'not null' => TRUE),      'sid' => array(        'description' => "Primary key: A session ID. The value is generated by PHP's Session API.",        'type' => 'varchar',        'length' => 64,        'not null' => TRUE,        'default' => ''),      'hostname' => array(        'description' => 'The IP address that last used this session ID (sid).',        'type' => 'varchar',        'length' => 128,        'not null' => TRUE,        'default' => ''),      'timestamp' => array(        'description' => 'The Unix timestamp when this session last requested a page. Old records are purged by PHP automatically.',        'type' => 'int',        'not null' => TRUE,        'default' => 0),      'cache' => array(        'description' => "The time of this user's last post. This is used when the site has specified a minimum_cache_lifetime. See cache_get().",        'type' => 'int',        'not null' => TRUE,        'default' => 0),      'session' => array(        'description' => 'The serialized contents of $_SESSION, an array of name/value pairs that persists across page requests by this session ID. Drupal loads $_SESSION from here at the start of each request and saves it at the end.',        'type' => 'text',        'not null' => FALSE,        'size' => 'big')      ),    'primary key' => array('sid'),    'indexes' => array(      'timestamp' => array('timestamp'),      'uid' => array('uid')      ),    );  $schema['system'] = array(    'description' => "A list of all modules, themes, and theme engines that are or have been installed in Drupal's file system.",    'fields' => array(      'filename' => array(        'description' => 'The path of the primary file for this item, relative to the Drupal root; e.g. modules/node/node.module.',        'type' => 'varchar',        'length' => 255,        'not null' => TRUE,        'default' => ''),      'name' => array(        'description' => 'The name of the item; e.g. node.',        'type' => 'varchar',        'length' => 255,        'not null' => TRUE,        'default' => ''),      'type' => array(        'description' => 'The type of the item, either module, theme, or theme_engine.',        'type' => 'varchar',        'length' => 255,        'not null' => TRUE,        'default' => ''),      'owner' => array(        'description' => "A theme's 'parent'. Can be either a theme or an engine.",        'type' => 'varchar',        'length' => 255,        'not null' => TRUE,        'default' => ''),      'status' => array(        'description' => 'Boolean indicating whether or not this item is enabled.',        'type' => 'int',        'not null' => TRUE,        'default' => 0),      'throttle' => array(        'description' => 'Boolean indicating whether this item is disabled when the throttle.module disables throttleable items.',        'type' => 'int',        'not null' => TRUE,        'default' => 0,        'size' => 'tiny'),      'bootstrap' => array(        'description' => "Boolean indicating whether this module is loaded during Drupal's early bootstrapping phase (e.g. even before the page cache is consulted).",        'type' => 'int',        'not null' => TRUE,        'default' => 0),      'schema_version' => array(        'description' => "The module's database schema version number. -1 if the module is not installed (its tables do not exist); 0 or the largest N of the module's hook_update_N() function that has either been run or existed when the module was first installed.",        'type' => 'int',        'not null' => TRUE,        'default' => -1,        'size' => 'small'),      'weight' => array(        'description' => "The order in which this module's hooks should be invoked relative to other modules. Equal-weighted modules are ordered by name.",        'type' => 'int',        'not null' => TRUE,        'default' => 0),      'info' => array(        'description' => "A serialized array containing information from the module's .info file; keys can include name, description, package, version, core, dependencies, dependents, and php.",        'type' => 'text',        'not null' => FALSE)      ),    'primary key' => array('filename'),    'indexes' =>      array(        'modules' => array(array('type', 12), 'status', 'weight', 'filename'),        'bootstrap' => array(array('type', 12), 'status', 'bootstrap', 'weight', 'filename'),        'type_name' => array(array('type', 12), 'name'),      ),    );  $schema['url_alias'] = array(    'description' => 'A list of URL aliases for Drupal paths; a user may visit either the source or destination path.',    'fields' => array(      'pid' => array(        'description' => 'A unique path alias identifier.',        'type' => 'serial',        'unsigned' => TRUE,        'not null' => TRUE),      'src' => array(        'description' => 'The Drupal path this alias is for; e.g. node/12.',        'type' => 'varchar',        'length' => 128,        'not null' => TRUE,        'default' => ''),      'dst' => array(        'description' => 'The alias for this path; e.g. title-of-the-story.',        'type' => 'varchar',        'length' => 128,        'not null' => TRUE,        'default' => ''),      'language' => array(        'description' => 'The language this alias is for; if blank, the alias will be used for unknown languages. Each Drupal path can have an alias for each supported language.',        'type' => 'varchar',        'length' => 12,        'not null' => TRUE,        'default' => '')      ),    'unique keys' => array('dst_language_pid' => array('dst', 'language', 'pid')),    'primary key' => array('pid'),    'indexes' => array('src_language_pid' => array('src', 'language', 'pid')),    );  return $schema;}// Updates for core.function system_update_last_removed() {  return 1021;}/** * @defgroup updates-5.x-extra Extra system updates for 5.x * @{ *//** * Add index on users created column. */function system_update_1022() {  $ret = array();  db_add_index($ret, 'users', 'created', array('created'));  // Also appears as system_update_6004(). Ensure we don't update twice.  variable_set('system_update_1022', TRUE);  return $ret;}/** * @} End of "defgroup updates-5.x-extra" *//** * @defgroup updates-5.x-to-6.x System updates from 5.x to 6.x * @{ *//** * Remove auto_increment from {boxes} to allow adding custom blocks with * visibility settings. */function system_update_6000() {  $ret = array();  switch ($GLOBALS['db_type']) {    case 'mysql':    case 'mysqli':      $max = (int)db_result(db_query('SELECT MAX(bid) FROM {boxes}'));      $ret[] = update_sql('ALTER TABLE {boxes} CHANGE COLUMN bid bid int NOT NULL');      $ret[] = update_sql("REPLACE INTO {sequences} VALUES ('{boxes}_bid', $max)");      break;  }  return $ret;}/** * Add version id column to {term_node} to allow taxonomy module to use revisions. */function system_update_6001() {  $ret = array();  // Add vid to term-node relation.  The schema says it is unsigned.  db_add_field($ret, 'term_node', 'vid', array('type' => 'int', 'unsigned' => TRUE, 'not null' => TRUE, 'default' => 0));  db_drop_primary_key($ret, 'term_node');  db_add_primary_key($ret, 'term_node', array('vid', 'tid', 'nid'));  db_add_index($ret, 'term_node', 'vid', array('vid'));  db_query('UPDATE {term_node} SET vid = (SELECT vid FROM {node} n WHERE {term_node}.nid = n.nid)');  return $ret;}/** * Increase the maximum length of variable names from 48 to 128. */function system_update_6002() {  $ret = array();  db_drop_primary_key($ret, 'variable');  db_change_field($ret, 'variable', 'name', 'name', array('type' => 'varchar', 'length' => 128, 'not null' => TRUE, 'default' => ''));  db_add_primary_key($ret, 'variable', array('name'));  return $ret;}/** * Add index on comments status column. */function system_update_6003() {  $ret = array();  db_add_index($ret, 'comments', 'status', array('status'));  return $ret;}/** * This update used to add an index on users created column (#127941). * However, system_update_1022() does the same thing.  This update * tried to detect if 1022 had already run but failed to do so, * resulting in an "index already exists" error. * * Adding the index here is never necessary.  Sites installed before * 1022 will run 1022, getting the update.  Sites installed on/after 1022 * got the index when the table was first created.  Therefore, this * function is now a no-op. */function system_update_6004() {  return array();}/** * Add language to url_alias table and modify indexes. */function system_update_6005() {  $ret = array();  switch ($GLOBALS['db_type']) {    case 'pgsql':      db_add_column($ret, 'url_alias', 'language', 'varchar(12)', array('default' => "''", 'not null' => TRUE));      // As of system.install:1.85 (before the new language      // subsystem), new installs got a unique key named      // url_alias_dst_key on url_alias.dst.  Unfortunately,      // system_update_162 created a unique key inconsistently named      // url_alias_dst_idx on url_alias.dst (keys should have the _key      // suffix, indexes the _idx suffix).  Therefore, sites installed      // before system_update_162 have a unique key with a different      // name than sites installed after system_update_162().  Now, we      // want to drop the unique key on dst which may have either one      // of two names and create a new unique key on (dst, language).      // There is no way to know which key name exists so we have to      // drop both, causing an SQL error.  Thus, we just hide the      // error and only report the update_sql results that work.      $err = error_reporting(0);      $ret1 = update_sql('DROP INDEX {url_alias}_dst_idx');      if ($ret1['success']) {  $ret[] = $ret1;      }      $ret1 = array();      db_drop_unique_key($ret, 'url_alias', 'dst');      foreach ($ret1 as $r) {  if ($r['success']) {    $ret[] = $r;  }      }      error_reporting($err);      $ret[] = update_sql('CREATE UNIQUE INDEX {url_alias}_dst_language_idx ON {url_alias}(dst, language)');      break;    case 'mysql':    case 'mysqli':      $ret[] = update_sql("ALTER TABLE {url_alias} ADD language varchar(12) NOT NULL default ''");      $ret[] = update_sql("ALTER TABLE {url_alias} DROP INDEX dst");      $ret[] = update_sql("ALTER TABLE {url_alias} ADD UNIQUE dst_language (dst, language)");      break;  }  return $ret;}/** * Drop useless indices on node_counter table. */function system_update_6006() {  $ret = array();  switch ($GLOBALS['db_type']) {    case 'pgsql':      $ret[] = update_sql('DROP INDEX {node_counter}_daycount_idx');      $ret[] = update_sql('DROP INDEX {node_counter}_totalcount_idx');      $ret[] = update_sql('DROP INDEX {node_counter}_timestamp_idx');      break;    case 'mysql':    case 'mysqli':      $ret[] = update_sql("ALTER TABLE {node_counter} DROP INDEX daycount");      $ret[] = update_sql("ALTER TABLE {node_counter} DROP INDEX totalcount");      $ret[] = update_sql("ALTER TABLE {node_counter} DROP INDEX timestamp");      break;  }  return $ret;}/** * Change the severity column in the watchdog table to the new values. */function system_update_6007() {  $ret = array();  $ret[] = update_sql("UPDATE {watchdog} SET severity = ". WATCHDOG_NOTICE ." WHERE severity = 0");  $ret[] = update_sql("UPDATE {watchdog} SET severity = ". WATCHDOG_WARNING ." WHERE severity = 1");  $ret[] = update_sql("UPDATE {watchdog} SET severity = ". WATCHDOG_ERROR ." WHERE severity = 2");  return $ret;}/** * Add info files to themes.  The info and owner columns are added by * update_fix_d6_requirements() in update.php to avoid a large number * of error messages from update.php.  All we need to do here is copy * description to owner and then drop description. */function system_update_6008() {  $ret = array();  $ret[] = update_sql('UPDATE {system} SET owner = description');  db_drop_field($ret, 'system', 'description');  // Rebuild system table contents.  module_rebuild_cache();  system_theme_data();  return $ret;}/** * The PHP filter is now a separate module. */function system_update_6009() {  $ret = array();  // If any input format used the Drupal 5 PHP filter.  if (db_result(db_query("SELECT COUNT(format) FROM {filters} WHERE module = 'filter' AND delta = 1"))) {    // Enable the PHP filter module.    $ret[] = update_sql("UPDATE {system} SET status = 1 WHERE name = 'php' AND type = 'module'");    // Update the input filters.    $ret[] = update_sql("UPDATE {filters} SET delta = 0, module = 'php' WHERE module = 'filter' AND delta = 1");  }  // With the removal of the PHP evaluator filter, the deltas of the line break  // and URL filter have changed.  $ret[] = update_sql("UPDATE {filters} SET delta = 1 WHERE module = 'filter' AND delta = 2");  $ret[] = update_sql("UPDATE {filters} SET delta = 2 WHERE module = 'filter' AND delta = 3");  return $ret;}/** * Add variable replacement for watchdog messages. * * The variables field is NOT NULL and does not have a default value. * Existing log messages should not be translated in the new system, * so we insert 'N;' (serialize(NULL)) as the temporary default but * then remove the default value to match the schema. */function system_update_6010() {  $ret = array();  db_add_field($ret, 'watchdog', 'variables', array('type' => 'text', 'size' => 'big', 'not null' => TRUE, 'initial' => 'N;'));  return $ret;}/** * Add language support to nodes */function system_update_6011() {  $ret = array();  switch ($GLOBALS['db_type']) {    case 'pgsql':      db_add_column($ret, 'node', 'language', 'varchar(12)', array('default' => "''", 'not null' => TRUE));      break;    case 'mysql':    case 'mysqli':      $ret[] = update_sql("ALTER TABLE {node} ADD language varchar(12) NOT NULL default ''");      break;  }  return $ret;}/** * Add serialized field to cache tables.  This is now handled directly * by update.php, so this function is a no-op. */function system_update_6012() {  return array();}/** * Rebuild cache data for theme system changes */function system_update_6013() {  // Rebuild system table contents.  module_rebuild_cache();  system_theme_data();  return array(array('success' => TRUE, 'query' => 'Cache rebuilt.'));}/** * Record that the installer is done, so it is not * possible to run the installer on upgraded sites. */function system_update_6014() {  variable_set('install_task', 'done');  return array(array('success' => TRUE, 'query' => "variable_set('install_task')"));}/** * Add the form cache table. */function system_update_6015() {  $ret = array();  switch ($GLOBALS['db_type']) {    case 'pgsql':      $ret[] = update_sql("CREATE TABLE {cache_form} (        cid varchar(255) NOT NULL default '',        data bytea,        expire int NOT NULL default '0',        created int NOT NULL default '0',        headers text,        serialized smallint NOT NULL default '0',        PRIMARY KEY (cid)    )");      $ret[] = update_sql("CREATE INDEX {cache_form}_expire_idx ON {cache_form} (expire)");      break;    case 'mysql':    case 'mysqli':      $ret[] = update_sql("CREATE TABLE {cache_form} (        cid varchar(255) NOT NULL default '',        data longblob,        expire int NOT NULL default '0',        created int NOT NULL default '0',        headers text,        serialized int(1) NOT NULL default '0',        PRIMARY KEY (cid),        INDEX expire (expire)      ) /*!40100 DEFAULT CHARACTER SET UTF8 */ ");      break;  }  return $ret;}/** * Make {node}'s primary key be nid, change nid,vid to a unique key. * Add primary keys to block, filters, flood, permission, and term_relation. */function system_update_6016() {  $ret = array();  switch ($GLOBALS['db_type']) {    case 'pgsql':      $ret[] = update_sql("ALTER TABLE {node} ADD CONSTRAINT {node}_nid_vid_key UNIQUE (nid, vid)");      db_add_column($ret, 'blocks', 'bid', 'serial');      $ret[] = update_sql("ALTER TABLE {blocks} ADD PRIMARY KEY (bid)");      db_add_column($ret, 'filters', 'fid', 'serial');      $ret[] = update_sql("ALTER TABLE {filters} ADD PRIMARY KEY (fid)");      db_add_column($ret, 'flood', 'fid', 'serial');      $ret[] = update_sql("ALTER TABLE {flood} ADD PRIMARY KEY (fid)");      db_add_column($ret, 'permission', 'pid', 'serial');      $ret[] = update_sql("ALTER TABLE {permission} ADD PRIMARY KEY (pid)");      db_add_column($ret, 'term_relation', 'trid', 'serial');      $ret[] = update_sql("ALTER TABLE {term_relation} ADD PRIMARY KEY (trid)");      db_add_column($ret, 'term_synonym', 'tsid', 'serial');      $ret[] = update_sql("ALTER TABLE {term_synonym} ADD PRIMARY KEY (tsid)");      break;    case 'mysql':    case 'mysqli':      $ret[] = update_sql('ALTER TABLE {node} ADD UNIQUE KEY nid_vid (nid, vid)');      $ret[] = update_sql("ALTER TABLE {blocks} ADD bid int NOT NULL AUTO_INCREMENT PRIMARY KEY");      $ret[] = update_sql("ALTER TABLE {filters} ADD fid int NOT NULL AUTO_INCREMENT PRIMARY KEY");      $ret[] = update_sql("ALTER TABLE {flood} ADD fid int NOT NULL AUTO_INCREMENT PRIMARY KEY");      $ret[] = update_sql("ALTER TABLE {permission} ADD pid int NOT NULL AUTO_INCREMENT PRIMARY KEY");      $ret[] = update_sql("ALTER TABLE {term_relation} ADD trid int NOT NULL AUTO_INCREMENT PRIMARY KEY");      $ret[] = update_sql("ALTER TABLE {term_synonym} ADD tsid int NOT NULL AUTO_INCREMENT PRIMARY KEY");      break;  }  return $ret;}/** * Rename settings related to user.module email notifications. */function system_update_6017() {  $ret = array();  // Maps old names to new ones.  $var_names = array(    'admin'    => 'register_admin_created',    'approval' => 'register_pending_approval',    'welcome'  => 'register_no_approval_required',    'pass'     => 'password_reset',  );  foreach ($var_names as $old => $new) {    foreach (array('_subject', '_body') as $suffix) {      $old_name = 'user_mail_'. $old . $suffix;      $new_name = 'user_mail_'. $new . $suffix;      if ($old_val = variable_get($old_name, FALSE)) {        variable_set($new_name, $old_val);        variable_del($old_name);        $ret[] = array('success' => TRUE, 'query' => "variable_set($new_name)");        $ret[] = array('success' => TRUE, 'query' => "variable_del($old_name)");        if ($old_name == 'user_mail_approval_body') {          drupal_set_message('Saving an old value of the welcome message body for users that are pending administrator approval. However, you should consider modifying this text, since Drupal can now be configured to automatically notify users and send them their login information when their accounts are approved. See the <a href="'. url('admin/user/settings') .'">User settings</a> page for details.');        }      }    }  }  return $ret;}/** * Add HTML corrector to HTML formats or replace the old module if it was in use. */function system_update_6018() {  $ret = array();  // Disable htmlcorrector.module, if it exists and replace its filter.  if (module_exists('htmlcorrector')) {    module_disable(array('htmlcorrector'));    $ret[] = update_sql("UPDATE {filter_formats} SET module = 'filter', delta = 3 WHERE module = 'htmlcorrector'");    $ret[] = array('success' => TRUE, 'query' => 'HTML Corrector module was disabled; this functionality has now been added to core.');    return $ret;  }  // Otherwise, find any format with 'HTML' in its name and add the filter at the end.  $result = db_query("SELECT format, name FROM {filter_formats} WHERE name LIKE '%HTML%'");  while ($format = db_fetch_object($result)) {    $weight = db_result(db_query("SELECT MAX(weight) FROM {filters} WHERE format = %d", $format->format));    db_query("INSERT INTO {filters} (format, module, delta, weight) VALUES (%d, '%s', %d, %d)", $format->format, 'filter', 3, max(10, $weight + 1));    $ret[] = array('success' => TRUE, 'query' => "HTML corrector filter added to the '". $format->name ."' input format.");  }  return $ret;}/** * Reconcile small differences in the previous, manually created mysql * and pgsql schemas so they are the same and can be represented by a * single schema structure. * * Note that the mysql and pgsql cases make different changes.  This * is because each schema needs to be tweaked in different ways to * conform to the new schema structure.  Also, since they operate on * tables defined by many optional core modules which may not ever * have been installed, they must test each table for existence.  If * the modules are first installed after this update exists the tables * will be created from the schema structure and will start out * correct. */function system_update_6019() {  $ret = array();  switch ($GLOBALS['db_type']) {    case 'pgsql':      // Remove default ''.      if (db_table_exists('aggregator_feed')) {        db_field_set_no_default($ret, 'aggregator_feed', 'description');        db_field_set_no_default($ret, 'aggregator_feed', 'image');      }      db_field_set_no_default($ret, 'blocks', 'pages');      if (db_table_exists('contact')) {        db_field_set_no_default($ret, 'contact', 'recipients');        db_field_set_no_default($ret, 'contact', 'reply');      }      db_field_set_no_default($ret, 'watchdog', 'location');      db_field_set_no_default($ret, 'node_revisions', 'body');      db_field_set_no_default($ret, 'node_revisions', 'teaser');      db_field_set_no_default($ret, 'node_revisions', 'log');      // Update from pgsql 'float' (which means 'double precision') to      // schema 'float' (which in pgsql means 'real').      if (db_table_exists('search_index')) {        db_change_field($ret, 'search_index', 'score', 'score', array('type' => 'float'));      }      if (db_table_exists('search_total')) {        db_change_field($ret, 'search_total', 'count', 'count', array('type' => 'float'));      }      // Replace unique index dst_language with a unique constraint.  The      // result is the same but the unique key fits our current schema      // structure.  Also, the postgres documentation implies that      // unique constraints are preferable to unique indexes.  See      // http://www.postgresql.org/docs/8.2/interactive/indexes-unique.html.      if (db_table_exists('url_alias')) {        db_drop_index($ret, 'url_alias', 'dst_language');        db_add_unique_key($ret, 'url_alias', 'dst_language',          array('dst', 'language'));      }      // Fix term_node pkey: mysql and pgsql code had different orders.      if (db_table_exists('term_node')) {        db_drop_primary_key($ret, 'term_node');        db_add_primary_key($ret, 'term_node', array('vid', 'tid', 'nid'));      }      // Make boxes.bid unsigned.      db_drop_primary_key($ret, 'boxes');      db_change_field($ret, 'boxes', 'bid', 'bid', array('type' => 'serial', 'unsigned' => TRUE, 'not null' => TRUE), array('primary key' => array('bid')));      // Fix primary key      db_drop_primary_key($ret, 'node');      db_add_primary_key($ret, 'node', array('nid'));      break;    case 'mysql':    case 'mysqli':      // Rename key 'link' to 'url'.      if (db_table_exists('aggregator_feed')) {        db_drop_unique_key($ret, 'aggregator_feed', 'link');        db_add_unique_key($ret, 'aggregator_feed', 'url', array('url'));      }      // Change to size => small.      if (db_table_exists('boxes')) {        db_change_field($ret, 'boxes', 'format', 'format', array('type' => 'int', 'size' => 'small', 'not null' => TRUE, 'default' => 0));      }      // Change to size => small.      // Rename index 'lid' to 'nid'.      if (db_table_exists('comments')) {        db_change_field($ret, 'comments', 'format', 'format', array('type' => 'int', 'size' => 'small', 'not null' => TRUE, 'default' => 0));        db_drop_index($ret, 'comments', 'lid');        db_add_index($ret, 'comments', 'nid', array('nid'));      }      // Change to size => small.      db_change_field($ret, 'cache', 'serialized', 'serialized', array('type' => 'int', 'size' => 'small', 'not null' => TRUE, 'default' => 0));      db_change_field($ret, 'cache_filter', 'serialized', 'serialized', array('type' => 'int', 'size' => 'small', 'not null' => TRUE, 'default' => 0));      db_change_field($ret, 'cache_page', 'serialized', 'serialized', array('type' => 'int', 'size' => 'small', 'not null' => TRUE, 'default' => 0));      db_change_field($ret, 'cache_form', 'serialized', 'serialized', array('type' => 'int', 'size' => 'small', 'not null' => TRUE, 'default' => 0));      // Remove default => 0, set auto increment.      $new_uid = 1 + db_result(db_query('SELECT MAX(uid) FROM {users}'));      $ret[] = update_sql('UPDATE {users} SET uid = '. $new_uid .' WHERE uid = 0');      db_drop_primary_key($ret, 'users');      db_change_field($ret, 'users', 'uid', 'uid', array('type' => 'serial', 'unsigned' => TRUE, 'not null' => TRUE), array('primary key' => array('uid')));      $ret[] = update_sql('UPDATE {users} SET uid = 0 WHERE uid = '. $new_uid);      // Special field names.      $map = array('node_revisions' => 'vid');      // Make sure these tables have proper auto_increment fields.      foreach (array('boxes', 'files', 'node', 'node_revisions') as $table) {        $field = isset($map[$table]) ? $map[$table] : $table[0] .'id';        db_drop_primary_key($ret, $table);        db_change_field($ret, $table, $field, $field, array('type' => 'serial', 'unsigned' => TRUE, 'not null' => TRUE), array('primary key' => array($field)));      }      break;  }  return $ret;}/** * Create the tables for the new menu system. */function system_update_6020() {  $ret = array();  $schema['menu_router'] = array(    'fields' => array(      'path'             => array('type' => 'varchar', 'length' => 255, 'not null' => TRUE, 'default' => ''),      'load_functions'   => array('type' => 'varchar', 'length' => 255, 'not null' => TRUE, 'default' => ''),      'to_arg_functions' => array('type' => 'varchar', 'length' => 255, 'not null' => TRUE, 'default' => ''),      'access_callback'  => array('type' => 'varchar', 'length' => 255, 'not null' => TRUE, 'default' => ''),      'access_arguments' => array('type' => 'text', 'not null' => FALSE),      'page_callback'    => array('type' => 'varchar', 'length' => 255, 'not null' => TRUE, 'default' => ''),      'page_arguments'   => array('type' => 'text', 'not null' => FALSE),      'fit'              => array('type' => 'int', 'not null' => TRUE, 'default' => 0),      'number_parts'     => array('type' => 'int', 'not null' => TRUE, 'default' => 0, 'size' => 'small'),      'tab_parent'       => array('type' => 'varchar', 'length' => 255, 'not null' => TRUE, 'default' => ''),      'tab_root'         => array('type' => 'varchar', 'length' => 255, 'not null' => TRUE, 'default' => ''),      'title'            => array('type' => 'varchar', 'length' => 255, 'not null' => TRUE, 'default' => ''),      'title_callback'   => array('type' => 'varchar', 'length' => 255, 'not null' => TRUE, 'default' => ''),      'title_arguments'  => array('type' => 'varchar', 'length' => 255, 'not null' => TRUE, 'default' => ''),      'type'             => array('type' => 'int', 'not null' => TRUE, 'default' => 0),      'block_callback'   => array('type' => 'varchar', 'length' => 255, 'not null' => TRUE, 'default' => ''),      'description'      => array('type' => 'text', 'not null' => TRUE),      'position'         => array('type' => 'varchar', 'length' => 255, 'not null' => TRUE, 'default' => ''),      'weight'           => array('type' => 'int', 'not null' => TRUE, 'default' => 0),      'file'             => array('type' => 'text', 'size' => 'medium')    ),    'indexes' => array(      'fit'        => array('fit'),      'tab_parent' => array('tab_parent')    ),    'primary key' => array('path'),  );  $schema['menu_links'] = array(    'fields' => array(      'menu_name'    => array('type' => 'varchar', 'length' => 32, 'not null' => TRUE, 'default' => ''),      'mlid'         => array('type' => 'serial', 'unsigned' => TRUE, 'not null' => TRUE),      'plid'         => array('type' => 'int', 'unsigned' => TRUE, 'not null' => TRUE, 'default' => 0),      'link_path'    => array('type' => 'varchar', 'length' => 255, 'not null' => TRUE, 'default' => ''),      'router_path'  => array('type' => 'varchar', 'length' => 255, 'not null' => TRUE, 'default' => ''),      'link_title'   => array('type' => 'varchar', 'length' => 255, 'not null' => TRUE, 'default' => ''),      'options'      => array('type' => 'text', 'not null' => FALSE),      'module'       => array('type' => 'varchar', 'length' => 255, 'not null' => TRUE, 'default' => 'system'),      'hidden'       => array('type' => 'int', 'not null' => TRUE, 'default' => 0, 'size' => 'small'),      'external'     => array('type' => 'int', 'not null' => TRUE, 'default' => 0, 'size' => 'small'),      'has_children' => array('type' => 'int', 'not null' => TRUE, 'default' => 0, 'size' => 'small'),      'expanded'     => array('type' => 'int', 'not null' => TRUE, 'default' => 0, 'size' => 'small'),      'weight'       => array('type' => 'int', 'not null' => TRUE, 'default' => 0),      'depth'        => array('type' => 'int', 'not null' => TRUE, 'default' => 0, 'size' => 'small'),      'customized'   => array('type' => 'int', 'not null' => TRUE, 'default' => 0, 'size' => 'small'),      'p1'           => array('type' => 'int', 'unsigned' => TRUE, 'not null' => TRUE, 'default' => 0),      'p2'           => array('type' => 'int', 'unsigned' => TRUE, 'not null' => TRUE, 'default' => 0),      'p3'           => array('type' => 'int', 'unsigned' => TRUE, 'not null' => TRUE, 'default' => 0),      'p4'           => array('type' => 'int', 'unsigned' => TRUE, 'not null' => TRUE, 'default' => 0),      'p5'           => array('type' => 'int', 'unsigned' => TRUE, 'not null' => TRUE, 'default' => 0),      'p6'           => array('type' => 'int', 'unsigned' => TRUE, 'not null' => TRUE, 'default' => 0),      'p7'           => array('type' => 'int', 'unsigned' => TRUE, 'not null' => TRUE, 'default' => 0),      'p8'           => array('type' => 'int', 'unsigned' => TRUE, 'not null' => TRUE, 'default' => 0),      'p9'           => array('type' => 'int', 'unsigned' => TRUE, 'not null' => TRUE, 'default' => 0),      'updated'      => array('type' => 'int', 'not null' => TRUE, 'default' => 0, 'size' => 'small'),    ),    'indexes' => array(      'path_menu'              => array(array('link_path', 128), 'menu_name'),      'menu_plid_expand_child' => array('menu_name', 'plid', 'expanded', 'has_children'),      'menu_parents'           => array('menu_name', 'p1', 'p2', 'p3', 'p4', 'p5', 'p6', 'p7', 'p8', 'p9'),      'router_path'            => array(array('router_path', 128)),    ),    'primary key' => array('mlid'),  );  foreach ($schema as $name => $table) {    db_create_table($ret, $name, $table);  }  return $ret;}/** * Migrate the menu items from the old menu system to the new menu_links table. */function system_update_6021() {  $ret = array('#finished' => 0);  $menus = array(    'navigation' => array(      'menu_name' => 'navigation',      'title' => 'Navigation',      'description' => 'The navigation menu is provided by Drupal and is the main interactive menu for any site. It is usually the only menu that contains personalized links for authenticated users, and is often not even visible to anonymous users.',    ),    'primary-links' => array(      'menu_name' => 'primary-links',      'title' => 'Primary links',      'description' => 'Primary links are often used at the theme layer to show the major sections of a site. A typical representation for primary links would be tabs along the top.',    ),    'secondary-links' => array(      'menu_name' => 'secondary-links',      'title' => 'Secondary links',      'description' => 'Secondary links are often used for pages like legal notices, contact details, and other secondary navigation items that play a lesser role than primary links.',    ),  );  // Multi-part update  if (!isset($_SESSION['system_update_6021'])) {    db_add_field($ret, 'menu', 'converted', array('type' => 'int', 'unsigned' => TRUE, 'not null' => TRUE, 'default' => 0, 'size' => 'tiny'));    $_SESSION['system_update_6021_max'] = db_result(db_query('SELECT COUNT(*) FROM {menu}'));    $_SESSION['menu_menu_map'] = array(1 => 'navigation');    // 0 => FALSE is for new menus, 1 => FALSE is for the navigation.    $_SESSION['menu_item_map'] = array(0 => FALSE, 1 => FALSE);    $table = array(      'fields' => array(        'menu_name'   => array('type' => 'varchar', 'length' => 32, 'not null' => TRUE, 'default' => ''),        'title'       => array('type' => 'varchar', 'length' => 255, 'not null' => TRUE, 'default' => ''),        'description' => array('type' => 'text', 'not null' => FALSE),      ),      'primary key' => array('menu_name'),    );    db_create_table($ret, 'menu_custom', $table);    db_query("INSERT INTO {menu_custom} (menu_name, title, description) VALUES ('%s', '%s', '%s')", $menus['navigation']);    $_SESSION['system_update_6021'] = 0;  }  $limit = 50;  while ($limit-- && ($item = db_fetch_array(db_query_range('SELECT * FROM {menu} WHERE converted = 0', 0, 1)))) {    // If it's not a menu...    if ($item['pid']) {      // Let's climb up until we find an item with a converted parent.      $item_original = $item;      while ($item && !isset($_SESSION['menu_item_map'][$item['pid']])) {        $item = db_fetch_array(db_query('SELECT * FROM {menu} WHERE mid = %d', $item['pid']));      }      // This can only occur if the menu entry is a leftover in the menu table.      // These do not appear in Drupal 5 anyways, so we skip them.      if (!$item) {        db_query('UPDATE {menu} SET converted = %d WHERE mid = %d', 1, $item_original['mid']);        $_SESSION['system_update_6021']++;        continue;      }    }    // We need to recheck because item might have changed.    if ($item['pid']) {      // Fill the new fields.      $item['link_title'] = $item['title'];      $item['link_path'] = drupal_get_normal_path($item['path']);      // We know the parent is already set. If it's not FALSE then it's an item.      if ($_SESSION['menu_item_map'][$item['pid']]) {        // The new menu system parent link id.        $item['plid'] = $_SESSION['menu_item_map'][$item['pid']]['mlid'];        // The new menu system menu name.        $item['menu_name'] = $_SESSION['menu_item_map'][$item['pid']]['menu_name'];      }      else {        // This a top level element.        $item['plid'] = 0;        // The menu name is stored among the menus.        $item['menu_name'] = $_SESSION['menu_menu_map'][$item['pid']];      }      // Is the element visible in the menu block?      $item['hidden'] = !($item['type'] & MENU_VISIBLE_IN_TREE);      // Is it a custom(ized) element?      if ($item['type'] & (MENU_CREATED_BY_ADMIN | MENU_MODIFIED_BY_ADMIN)) {        $item['customized'] = TRUE;      }      // Items created via the menu module need to be assigned to it.      if ($item['type'] & MENU_CREATED_BY_ADMIN) {        $item['module'] = 'menu';        $item['router_path'] = '';        $item['updated'] = TRUE;      }      else {        $item['module'] = 'system';        $item['router_path'] = $item['path'];        $item['updated'] = FALSE;      }      if ($item['description']) {        $item['options']['attributes']['title'] = $item['description'];      }                  // Save the link.      menu_link_save($item);      $_SESSION['menu_item_map'][$item['mid']] = array('mlid' => $item['mlid'], 'menu_name' => $item['menu_name']);    }    elseif (!isset($_SESSION['menu_menu_map'][$item['mid']])) {      $item['menu_name'] = 'menu-'. preg_replace('/[^a-zA-Z0-9]/', '-', strtolower($item['title']));      $item['menu_name'] = substr($item['menu_name'], 0, 20);      $original_menu_name = $item['menu_name'];      $i = 0;      while (db_result(db_query("SELECT menu_name FROM {menu_custom} WHERE menu_name = '%s'", $item['menu_name']))) {        $item['menu_name'] = $original_menu_name . ($i++);      }      if ($item['path']) {        // Another bunch of bogus entries. Apparently, these are leftovers        // from Drupal 4.7 .        $_SESSION['menu_bogus_menus'][] = $item['menu_name'];      }      else {        // Add this menu to the list of custom menus.        db_query("INSERT INTO {menu_custom} (menu_name, title, description) VALUES ('%s', '%s', '')", $item['menu_name'], $item['title']);      }      $_SESSION['menu_menu_map'][$item['mid']] = $item['menu_name'];      $_SESSION['menu_item_map'][$item['mid']] = FALSE;    }    db_query('UPDATE {menu} SET converted = %d WHERE mid = %d', 1, $item['mid']);    $_SESSION['system_update_6021']++;  }  if ($_SESSION['system_update_6021'] >= $_SESSION['system_update_6021_max']) {    if (!empty($_SESSION['menu_bogus_menus'])) {      // Remove entries in bogus menus. This is secure because we deleted      // every non-alpanumeric character from the menu name.      $ret[] = update_sql("DELETE FROM {menu_links} WHERE menu_name IN ('". implode("', '", $_SESSION['menu_bogus_menus']) ."')");    }    $menu_primary_menu = variable_get('menu_primary_menu', 0);    // Ensure that we wind up with a system menu named 'primary-links'.    if (isset($_SESSION['menu_menu_map'][2])) {      // The primary links menu that ships with Drupal 5 has mid = 2.  If this      // menu hasn't been deleted by the site admin, we use that.      $updated_primary_links_menu = 2;    }    elseif (isset($_SESSION['menu_menu_map'][$menu_primary_menu]) && $menu_primary_menu > 1) {      // Otherwise, we use the menu that is currently assigned to the primary      // links region of the theme, as long as it exists and isn't the      // Navigation menu.      $updated_primary_links_menu = $menu_primary_menu;    }    else {      // As a last resort, create 'primary-links' as a new menu.      $updated_primary_links_menu = 0;      db_query("INSERT INTO {menu_custom} (menu_name, title, description) VALUES ('%s', '%s', '%s')", $menus['primary-links']);    }    if ($updated_primary_links_menu) {      // Change the existing menu name to 'primary-links'.      $replace = array('%new_name' => 'primary-links', '%desc' => $menus['primary-links']['description'], '%old_name' => $_SESSION['menu_menu_map'][$updated_primary_links_menu]);      $ret[] = update_sql(strtr("UPDATE {menu_custom} SET menu_name = '%new_name', description = '%desc' WHERE menu_name = '%old_name'", $replace));      $ret[] = update_sql("UPDATE {menu_links} SET menu_name = 'primary-links' WHERE menu_name = '". $_SESSION['menu_menu_map'][$updated_primary_links_menu] ."'");      $_SESSION['menu_menu_map'][$updated_primary_links_menu] = 'primary-links';    }    $menu_secondary_menu = variable_get('menu_secondary_menu', 0);    // Ensure that we wind up with a system menu named 'secondary-links'.    if (isset($_SESSION['menu_menu_map'][$menu_secondary_menu]) && $menu_secondary_menu > 1 && $menu_secondary_menu != $updated_primary_links_menu) {      // We use the menu that is currently assigned to the secondary links      // region of the theme, as long as (a) it exists, (b) it isn't the      // Navigation menu, (c) it isn't the same menu we assigned as the      // system 'primary-links' menu above, and (d) it isn't the same menu      // assigned to the primary links region of the theme.      $updated_secondary_links_menu = $menu_secondary_menu;    }    else {      // Otherwise, create 'secondary-links' as a new menu.      $updated_secondary_links_menu = 0;      db_query("INSERT INTO {menu_custom} (menu_name, title, description) VALUES ('%s', '%s', '%s')", $menus['secondary-links']);    }    if ($updated_secondary_links_menu) {      // Change the existing menu name to 'secondary-links'.      $replace = array('%new_name' => 'secondary-links', '%desc' => $menus['secondary-links']['description'], '%old_name' => $_SESSION['menu_menu_map'][$updated_secondary_links_menu]);      $ret[] = update_sql(strtr("UPDATE {menu_custom} SET menu_name = '%new_name', description = '%desc' WHERE menu_name = '%old_name'", $replace));      $ret[] = update_sql("UPDATE {menu_links} SET menu_name = 'secondary-links' WHERE menu_name = '". $_SESSION['menu_menu_map'][$updated_secondary_links_menu] ."'");      $_SESSION['menu_menu_map'][$updated_secondary_links_menu] = 'secondary-links';    }    // Update menu OTF preferences.    $mid = variable_get('menu_parent_items', 0);    $menu_name = ($mid && isset($_SESSION['menu_menu_map'][$mid])) ? $_SESSION['menu_menu_map'][$mid] : 'navigation';    variable_set('menu_default_node_menu', $menu_name);    variable_del('menu_parent_items');    // Update the source of the primary and secondary links.    $menu_name = ($menu_primary_menu && isset($_SESSION['menu_menu_map'][$menu_primary_menu])) ? $_SESSION['menu_menu_map'][$menu_primary_menu] : '';    variable_set('menu_primary_links_source', $menu_name);    variable_del('menu_primary_menu');    $menu_name = ($menu_secondary_menu && isset($_SESSION['menu_menu_map'][$menu_secondary_menu])) ? $_SESSION['menu_menu_map'][$menu_secondary_menu] : '';    variable_set('menu_secondary_links_source', $menu_name);    variable_del('menu_secondary_menu');    // Skip the navigation menu - it is handled by the user module.    unset($_SESSION['menu_menu_map'][1]);    // Update the deltas for all menu module blocks.    foreach ($_SESSION['menu_menu_map'] as $mid => $menu_name) {      // This is again secure because we deleted every non-alpanumeric      // character from the menu name.      $ret[] = update_sql("UPDATE {blocks} SET delta = '". $menu_name ."' WHERE module = 'menu' AND delta = '". $mid ."'");      $ret[] = update_sql("UPDATE {blocks_roles} SET delta = '". $menu_name ."' WHERE module = 'menu' AND delta = '". $mid ."'");    }    $ret[] = array('success' => TRUE, 'query' => 'Relocated '. $_SESSION['system_update_6021'] .' existing items to the new menu system.');    $ret[] = update_sql("DROP TABLE {menu}");    unset($_SESSION['system_update_6021'], $_SESSION['system_update_6021_max'], $_SESSION['menu_menu_map'], $_SESSION['menu_item_map'], $_SESSION['menu_bogus_menus']);    // Create the menu overview links - also calls menu_rebuild(). If menu is    // disabled, then just call menu_rebuild.    if (function_exists('menu_enable')) {      menu_enable();    }    else {      menu_rebuild();    }    $ret['#finished'] = 1;  }  else {    $ret['#finished'] = $_SESSION['system_update_6021'] / $_SESSION['system_update_6021_max'];  }  return $ret;}/** * Update files tables to associate files to a uid by default instead of a nid. * Rename file_revisions to upload since it should only be used by the upload * module used by upload to link files to nodes. */function system_update_6022() {  $ret = array();  // Rename the nid field to vid, add status and timestamp fields, and indexes.  db_drop_index($ret, 'files', 'nid');  db_change_field($ret, 'files', 'nid', 'uid', array('type' => 'int', 'unsigned' => TRUE, 'not null' => TRUE, 'default' => 0));  db_add_field($ret, 'files', 'status', array('type' => 'int', 'not null' => TRUE, 'default' => 0));  db_add_field($ret, 'files', 'timestamp', array('type' => 'int', 'unsigned' => TRUE, 'not null' => TRUE, 'default' => 0));  db_add_index($ret, 'files', 'uid', array('uid'));  db_add_index($ret, 'files', 'status', array('status'));  db_add_index($ret, 'files', 'timestamp', array('timestamp'));  // Rename the file_revisions table to upload then add nid column. Since we're  // changing the table name we need to drop and re-add the indexes and  // the primary key so both mysql and pgsql end up with the correct index  // names.  db_drop_primary_key($ret, 'file_revisions');  db_drop_index($ret, 'file_revisions', 'vid');  db_rename_table($ret, 'file_revisions', 'upload');  db_add_field($ret, 'upload', 'nid', array('type' => 'int', 'unsigned' => TRUE, 'not null' => TRUE, 'default' => 0));  db_add_index($ret, 'upload', 'nid', array('nid'));  db_add_primary_key($ret, 'upload', array('vid', 'fid'));  db_add_index($ret, 'upload', 'fid', array('fid'));  // The nid column was renamed to uid. Use the old nid to find the node's uid.  update_sql('UPDATE {files} SET uid = (SELECT n.uid FROM {node} n WHERE {files}.uid = n.nid)');  update_sql('UPDATE {upload} SET nid = (SELECT r.nid FROM {node_revisions} r WHERE {upload}.vid = r.vid)');  // Mark all existing files as FILE_STATUS_PERMANENT.  $ret[] = update_sql('UPDATE {files} SET status = 1');  return $ret;}function system_update_6023() {  $ret = array();  // nid is DEFAULT 0  db_drop_index($ret, 'node_revisions', 'nid');  db_change_field($ret, 'node_revisions', 'nid', 'nid', array('type' => 'int', 'unsigned' => TRUE, 'not null' => TRUE, 'default' => 0));  db_add_index($ret, 'node_revisions', 'nid', array('nid'));  return $ret;}/** * Add translation fields to nodes used by translation module. */function system_update_6024() {  $ret = array();  db_add_field($ret, 'node', 'tnid', array('type' => 'int', 'unsigned' => TRUE, 'not null' => TRUE, 'default' => 0));  db_add_field($ret, 'node', 'translate', array('type' => 'int', 'not null' => TRUE, 'default' => 0));  db_add_index($ret, 'node', 'tnid', array('tnid'));  db_add_index($ret, 'node', 'translate', array('translate'));  return $ret;}/** * Increase the maximum length of node titles from 128 to 255. */function system_update_6025() {  $ret = array();  db_drop_index($ret, 'node', 'node_title_type');  db_change_field($ret, 'node', 'title', 'title', array('type' => 'varchar', 'length' => 255, 'not null' => TRUE, 'default' => ''));  db_add_index($ret, 'node', 'node_title_type', array('title', array('type', 4)));  db_change_field($ret, 'node_revisions', 'title', 'title', array('type' => 'varchar', 'length' => 255, 'not null' => TRUE, 'default' => ''));  return $ret;}/** * Display warning about new Update status module. */function system_update_6026() {  $ret = array();  // Notify user that new update module exists.  drupal_set_message('Drupal can check periodically for important bug fixes and security releases using the new update status module. This module can be turned on from the <a href="'. url('admin/build/modules') .'">modules administration page</a>. For more information please read the <a href="http://drupal.org/handbook/modules/update">Update status handbook page</a>.');  return $ret;}/** * Add block cache. */function system_update_6027() {  $ret = array();  // Create the blocks.cache column.  db_add_field($ret, 'blocks', 'cache', array('type' => 'int', 'not null' => TRUE, 'default' => 1, 'size' => 'tiny'));  // The cache_block table is created in update_fix_d6_requirements() since  // calls to cache_clear_all() would otherwise cause warnings.  // Fill in the values for the new 'cache' column in the {blocks} table.  foreach (module_list() as $module) {    if ($module_blocks = module_invoke($module, 'block', 'list')) {      foreach ($module_blocks as $delta => $block) {        if (isset($block['cache'])) {          db_query("UPDATE {blocks} SET cache = %d WHERE module = '%s' AND delta = '%s'", $block['cache'], $module, $delta);        }      }    }  }  return $ret;}/** * Add the node load cache table. */function system_update_6028() {  // Removed node_load cache to discuss it more for Drupal 7.  return array();}/** * Enable the dblog module on sites that upgrade, since otherwise * watchdog logging will stop unexpectedly. */function system_update_6029() {  // The watchdog table is now owned by dblog, which is not yet  // "installed" according to the system table, but the table already  // exists.  We set the module as "installed" here to avoid an error  // later.  //  // Although not the case for the initial D6 release, it is likely  // that dblog.install will have its own update functions eventually.  // However, dblog did not exist in D5 and this update is part of the  // initial D6 release, so we know that dblog is not installed yet.  // It is therefore correct to install it as version 0.  If  // dblog updates exist, the next run of update.php will get them.  drupal_set_installed_schema_version('dblog', 0);  module_enable(array('dblog'));  menu_rebuild();  return array(array('success' => TRUE, 'query' => "'dblog' module enabled."));}/** * Add the tables required by actions.inc. */function system_update_6030() {  $ret = array();  // Rename the old contrib actions table if it exists so the contrib version  // of the module can do something with the old data.  if (db_table_exists('actions')) {    db_rename_table($ret, 'actions', 'actions_old_contrib');  }  $schema['actions'] = array(    'fields' => array(      'aid' => array('type' => 'varchar', 'length' => 255, 'not null' => TRUE, 'default' => '0'),      'type' => array('type' => 'varchar', 'length' => 32, 'not null' => TRUE, 'default' => ''),      'callback' => array('type' => 'varchar', 'length' => 255, 'not null' => TRUE, 'default' => ''),      'parameters' => array('type' => 'text', 'not null' => TRUE, 'size' => 'big'),      'description' => array('type' => 'varchar', 'length' => 255, 'not null' => TRUE, 'default' => '0'),    ),    'primary key' => array('aid'),  );  $schema['actions_aid'] = array(    'fields' => array(      'aid' => array('type' => 'serial', 'unsigned' => TRUE, 'not null' => TRUE),    ),    'primary key' => array('aid'),  );  db_create_table($ret, 'actions', $schema['actions']);  db_create_table($ret, 'actions_aid', $schema['actions_aid']);  return $ret;}/** * Ensure that installer cannot be run again after updating from Drupal 5.x to 6.x * Actually, this is already done by system_update_6014(), so this is now a no-op. */function system_update_6031() {  return array();}/** * profile_fields.name used to be nullable but is part of a unique key * and so shouldn't be. */function system_update_6032() {  $ret = array();  if (db_table_exists('profile_fields')) {    db_drop_unique_key($ret, 'profile_fields', 'name');    db_change_field($ret, 'profile_fields', 'name', 'name', array('type' => 'varchar', 'length' => 128, 'not null' => TRUE, 'default' => ''));    db_add_unique_key($ret, 'profile_fields', 'name', array('name'));  }  return $ret;}/** * Change node_comment_statistics to be not autoincrement. */function system_update_6033() {  $ret = array();  if (db_table_exists('node_comment_statistics')) {    // On pgsql but not mysql, db_change_field() drops all keys    // involving the changed field, which in this case is the primary    // key.  The normal approach is explicitly drop the pkey, change the    // field, and re-create the pkey.    //    // Unfortunately, in this case that won't work on mysql; we CANNOT    // drop the pkey because on mysql auto-increment fields must be    // included in at least one key or index.    //    // Since we cannot drop the pkey before db_change_field(), after    // db_change_field() we may or may not still have a pkey.  The    // simple way out is to re-create the pkey only when using pgsql.    // Realistic requirements trump idealistic purity.    db_change_field($ret, 'node_comment_statistics', 'nid', 'nid', array('type' => 'int', 'unsigned' => TRUE, 'not null' => TRUE, 'default' => 0));    if ($GLOBALS['db_type'] == 'pgsql') {      db_add_primary_key($ret, 'node_comment_statistics', array('nid'));    }  }  return $ret;}/** * Rename permission "administer access control" to "administer permissions". */function system_update_6034() {  $ret = array();  $result = db_query("SELECT rid, perm FROM {permission} ORDER BY rid");  while ($role = db_fetch_object($result)) {    $renamed_permission = preg_replace('/administer access control/', 'administer permissions', $role->perm);    if ($renamed_permission != $role->perm) {      $ret[] = update_sql("UPDATE {permission} SET perm = '$renamed_permission' WHERE rid = $role->rid");    }  }  return $ret;}/** * Change index on system table for better performance. */function system_update_6035() {  $ret = array();  db_drop_index($ret, 'system', 'weight');  db_add_index($ret, 'system', 'modules', array(array('type', 12), 'status', 'weight', 'filename'));  db_add_index($ret, 'system', 'bootstrap', array(array('type', 12), 'status', 'bootstrap', 'weight', 'filename'));  return $ret;}/** * Change the search schema and indexing. * * The table data is preserved where possible in MYSQL and MYSQLi using * ALTER IGNORE. Other databases don't support that, so for them the * tables are dropped and re-created, and will need to be re-indexed * from scratch. */function system_update_6036() {  $ret = array();  if (db_table_exists('search_index')) {    // Create the search_dataset.reindex column.    db_add_field($ret, 'search_dataset', 'reindex', array('type' => 'int', 'unsigned' => TRUE, 'not null' => TRUE, 'default' => 0));    // Drop the search_index.from fields which are no longer used.    db_drop_index($ret, 'search_index', 'from_sid_type');    db_drop_field($ret, 'search_index', 'fromsid');    db_drop_field($ret, 'search_index', 'fromtype');    // Drop the search_dataset.sid_type index, so that it can be made unique.    db_drop_index($ret, 'search_dataset', 'sid_type');    // Create the search_node_links Table.    $search_node_links_schema = array(      'fields' => array(        'sid'      => array('type' => 'int', 'unsigned' => TRUE, 'not null' => TRUE, 'default' => 0),        'type'     => array('type' => 'varchar', 'length' => 16, 'not null' => TRUE, 'default' => ''),        'nid'      => array('type' => 'int', 'unsigned' => TRUE, 'not null' => TRUE, 'default' => 0),        'caption'    => array('type' => 'text', 'size' => 'big', 'not null' => FALSE),      ),      'primary key' => array('sid', 'type', 'nid'),      'indexes' => array('nid' => array('nid')),    );    db_create_table($ret, 'search_node_links', $search_node_links_schema);    // with the change to search_dataset.reindex, the search queue is handled differently,    // and this is no longer needed    variable_del('node_cron_last');    // Add a unique index for the search_index.    if ($GLOBALS['db_type'] == 'mysql' || $GLOBALS['db_type'] == 'mysqli') {      // Since it's possible that some existing sites have duplicates,      // create the index using the IGNORE keyword, which ignores duplicate errors.      // However, pgsql doesn't support it      $ret[] = update_sql("ALTER IGNORE TABLE {search_index} ADD UNIQUE KEY word_sid_type (word, sid, type)");      $ret[] = update_sql("ALTER IGNORE TABLE {search_dataset} ADD UNIQUE KEY sid_type (sid, type)");      // Everything needs to be reindexed.      $ret[] = update_sql("UPDATE {search_dataset} SET reindex = 1");    }    else {      // Delete the existing tables if there are duplicate values      if (db_result(db_query("SELECT sid FROM {search_dataset} GROUP BY sid, type HAVING COUNT(*) > 1")) || db_result(db_query("SELECT sid FROM {search_index} GROUP BY word, sid, type HAVING COUNT(*) > 1"))) {        $ret[] = update_sql('DELETE FROM {search_dataset}');        $ret[] = update_sql('DELETE FROM {search_index}');        $ret[] = update_sql('DELETE FROM {search_total}');      }      else {        // Everything needs to be reindexed.        $ret[] = update_sql("UPDATE {search_dataset} SET reindex = 1");      }      // create the new indexes      db_add_unique_key($ret, 'search_index', 'word_sid_type', array('word', 'sid', 'type'));      db_add_unique_key($ret, 'search_dataset', 'sid_type', array('sid', 'type'));    }  }  return $ret;}/** * Create consistent empty region for disabled blocks. */function system_update_6037() {  $ret = array();  db_change_field($ret, 'blocks', 'region', 'region', array('type' => 'varchar', 'length' => 64, 'not null' => TRUE, 'default' => ''));  $ret[] = update_sql("UPDATE {blocks} SET region = '' WHERE status = 0");  return $ret;}/** * Ensure that "Account" is not used as a Profile category. */function system_update_6038() {  $ret = array();  if (db_table_exists('profile_fields')) {    $ret[] = update_sql("UPDATE {profile_fields} SET category = 'Account settings' WHERE LOWER(category) = 'account'");    if ($affectedrows = db_affected_rows()) {      drupal_set_message('There were '. $affectedrows .' profile fields that used a reserved category name. They have been assigned to the category "Account settings".');    }  }  return $ret;}/** * Rename permissions "edit foo content" to "edit any foo content". * Also update poll module permission "create polls" to "create * poll content". */function system_update_6039() {  $ret = array();  $result = db_query("SELECT rid, perm FROM {permission} ORDER BY rid");  while ($role = db_fetch_object($result)) {    $renamed_permission = preg_replace('/(?<=^|,\ )edit\ ([a-zA-Z0-9_\-]+)\ content(?=,|$)/', 'edit any $1 content', $role->perm);    $renamed_permission = preg_replace('/(?<=^|,\ )create\ polls(?=,|$)/', 'create poll content', $renamed_permission);    if ($renamed_permission != $role->perm) {      $ret[] = update_sql("UPDATE {permission} SET perm = '$renamed_permission' WHERE rid = $role->rid");    }  }  return $ret;}/** * Add a weight column to the upload table. */function system_update_6040() {  $ret = array();  if (db_table_exists('upload')) {    db_add_field($ret, 'upload', 'weight', array('type' => 'int', 'not null' => TRUE, 'default' => 0, 'size' => 'tiny'));  }  return $ret;}/** * Change forum vocabulary not to be required by default and set the weight of the forum.module 1 higher than the taxonomy.module. */function system_update_6041() {  $weight = intval((db_result(db_query("SELECT weight FROM {system} WHERE name = 'taxonomy'"))) + 1);  $ret = array();  $vid = intval(variable_get('forum_nav_vocabulary', ''));  if (db_table_exists('vocabulary') && $vid) {    $ret[] = update_sql("UPDATE {vocabulary} SET required = 0 WHERE vid = " . $vid);    $ret[] = update_sql("UPDATE {system} SET weight = ". $weight ." WHERE name = 'forum'");  }  return $ret;}/** * Upgrade recolored theme stylesheets to new array structure. */function system_update_6042() {  foreach (list_themes() as $theme) {    $stylesheet = variable_get('color_'. $theme->name .'_stylesheet', NULL);    if (!empty($stylesheet)) {      variable_set('color_'. $theme->name .'_stylesheets', array($stylesheet));      variable_del('color_'. $theme->name .'_stylesheet');    }  }  return array();}/** * Update table indices to make them more rational and useful. */function system_update_6043() {  $ret = array();  // Required modules first.  // Add new system module indexes.  db_add_index($ret, 'flood', 'allow', array('event', 'hostname', 'timestamp'));  db_add_index($ret, 'history', 'nid', array('nid'));  // Change length of theme field in {blocks} to be consistent with module, and  // to avoid a MySQL error regarding a too-long index.  Also add new indices.  db_change_field($ret, 'blocks', 'theme', 'theme', array('type' => 'varchar', 'length' => 64, 'not null' => TRUE, 'default' => ''),array(                  'unique keys' => array('tmd' => array('theme', 'module', 'delta'),),                  'indexes' => array('list' => array('theme', 'status', 'region', 'weight', 'module'),),));  db_add_index($ret, 'blocks_roles', 'rid', array('rid'));  // Improve filter module indices.  db_drop_index($ret, 'filters', 'weight');  db_add_unique_key($ret, 'filters', 'fmd', array('format', 'module', 'delta'));  db_add_index($ret, 'filters', 'list', array('format', 'weight', 'module', 'delta'));  // Drop unneeded keys form the node table.  db_drop_index($ret, 'node', 'status');  db_drop_unique_key($ret, 'node', 'nid_vid');  // Improve user module indices.  db_add_index($ret, 'users', 'mail', array('mail'));  db_add_index($ret, 'users_roles', 'rid', array('rid'));  // Optional modules - need to check if the tables exist.  // Alter aggregator module's tables primary keys to make them more useful.  if (db_table_exists('aggregator_category_feed')) {    db_drop_primary_key($ret, 'aggregator_category_feed');    db_add_primary_key($ret, 'aggregator_category_feed', array('cid', 'fid'));    db_add_index($ret, 'aggregator_category_feed', 'fid', array('fid'));  }  if (db_table_exists('aggregator_category_item')) {    db_drop_primary_key($ret, 'aggregator_category_item');    db_add_primary_key($ret, 'aggregator_category_item', array('cid', 'iid'));    db_add_index($ret, 'aggregator_category_item', 'iid', array('iid'));  }  // Alter contact module's table to add an index.  if (db_table_exists('contact')) {    db_add_index($ret, 'contact', 'list', array('weight', 'category'));  }  // Alter locale table to add a primary key, drop an index.  if (db_table_exists('locales_target')) {    db_add_primary_key($ret, 'locales_target', array('language', 'lid', 'plural'));  }  // Alter a poll module table to add a primary key.  if (db_table_exists('poll_votes')) {    db_drop_index($ret, 'poll_votes', 'nid');    db_add_primary_key($ret, 'poll_votes', array('nid', 'uid', 'hostname'));  }  // Alter a profile module table to add a primary key.  if (db_table_exists('profile_values')) {    db_drop_index($ret, 'profile_values', 'uid');    db_drop_index($ret, 'profile_values', 'fid');    db_change_field($ret,'profile_values' ,'fid', 'fid', array('type' => 'int', 'unsigned' => TRUE, 'not null' => TRUE, 'default' => 0,), array('indexes' => array('fid' => array('fid'),)));    db_change_field($ret,'profile_values' ,'uid', 'uid', array('type' => 'int', 'unsigned' => TRUE, 'not null' => TRUE, 'default' => 0,));    db_add_primary_key($ret, 'profile_values', array('uid', 'fid'));  }  // Alter a statistics module table to add an index.  if (db_table_exists('accesslog')) {    db_add_index($ret, 'accesslog', 'uid', array('uid'));  }  // Alter taxonomy module's tables.  if (db_table_exists('term_data')) {    db_drop_index($ret, 'term_data', 'vid');    db_add_index($ret, 'term_data', 'vid_name', array('vid', 'name'));    db_add_index($ret, 'term_data', 'taxonomy_tree', array('vid', 'weight', 'name'));  }  if (db_table_exists('term_node')) {    db_drop_primary_key($ret, 'term_node');    db_drop_index($ret, 'term_node', 'tid');    db_add_primary_key($ret, 'term_node', array('tid', 'vid'));  }  if (db_table_exists('term_relation')) {    db_drop_index($ret, 'term_relation', 'tid1');    db_add_unique_key($ret, 'term_relation', 'tid1_tid2', array('tid1', 'tid2'));  }  if (db_table_exists('term_synonym')) {    db_drop_index($ret, 'term_synonym', 'name');    db_add_index($ret, 'term_synonym', 'name_tid', array('name', 'tid'));  }  if (db_table_exists('vocabulary')) {    db_add_index($ret, 'vocabulary', 'list', array('weight', 'name'));  }  if (db_table_exists('vocabulary_node_types')) {    db_drop_primary_key($ret, 'vocabulary_node_types');    db_add_primary_key($ret, 'vocabulary_node_types', array('type', 'vid'));    db_add_index($ret, 'vocabulary_node_types', 'vid', array('vid'));  }  // If we updated in RC1 or before ensure we don't update twice.  variable_set('system_update_6043_RC2', TRUE);  return $ret;}/** * RC1 to RC2 index cleanup. */function system_update_6044() {  $ret = array();  // Delete invalid entries in {term_node} after system_update_6001.  $ret[] = update_sql("DELETE FROM {term_node} WHERE vid = 0");  // Only execute the rest of this function if 6043 was run in RC1 or before.  if (variable_get('system_update_6043_RC2', FALSE)) {    variable_del('system_update_6043_RC2');    return $ret;  }  // User module indices.  db_drop_unique_key($ret, 'users', 'mail');  db_add_index($ret, 'users', 'mail', array('mail'));  // Optional modules - need to check if the tables exist.  // Alter taxonomy module's tables.  if (db_table_exists('term_data')) {    db_drop_unique_key($ret, 'term_data', 'vid_name');    db_add_index($ret, 'term_data', 'vid_name', array('vid', 'name'));  }  if (db_table_exists('term_synonym')) {    db_drop_unique_key($ret, 'term_synonym', 'name_tid', array('name', 'tid'));    db_add_index($ret, 'term_synonym', 'name_tid', array('name', 'tid'));  }  return $ret;}/** * Update blog, book and locale module permissions. * * Blog module got "edit own blog" replaced with the more granular "create * blog entries", "edit own blog entries" and "delete own blog entries" * permissions. We grant create and edit to previously privileged users, but * delete is not granted to be in line with other permission changes in Drupal 6. * * Book module's "edit book pages" was upgraded to the bogus "edit book content" * in Drupal 6 RC1 instead of "edit any book content", which would be correct. * * Locale module introduced "administer languages" and "translate interface" * in place of "administer locales". * * Modeled after system_update_6039(). */function system_update_6045() {  $ret = array();  $result = db_query("SELECT rid, perm FROM {permission} ORDER BY rid");  while ($role = db_fetch_object($result)) {    $renamed_permission = preg_replace('/(?<=^|,\ )edit\ own\ blog(?=,|$)/', 'create blog entries, edit own blog entries', $role->perm);    $renamed_permission = preg_replace('/(?<=^|,\ )edit\ book\ content(?=,|$)/', 'edit any book content', $renamed_permission);    $renamed_permission = preg_replace('/(?<=^|,\ )administer\ locales(?=,|$)/', 'administer languages, translate interface', $renamed_permission);    if ($renamed_permission != $role->perm) {      $ret[] = update_sql("UPDATE {permission} SET perm = '$renamed_permission' WHERE rid = $role->rid");    }  }  // Notify user that delete permissions may have been changed. This was in  // effect since system_update_6039(), but there was no user notice.  drupal_set_message('Drupal now has separate edit and delete permissions. Previously, users who were able to edit content were automatically allowed to delete it. For added security, delete permissions for individual core content types have been <strong>removed</strong> from all roles on your site (only roles with the "administer nodes" permission can now delete these types of content). If you would like to reenable any individual delete permissions, you can do this at the <a href="'. url('admin/user/permissions', array('fragment' => 'module-node')) .'">permissions page</a>.');  return $ret;}/** * Ensure that the file_directory_path variable is set (using the old 5.x * default, if necessary), so that the changed 6.x default won't break * existing sites. */function system_update_6046() {  $ret = array();  if (!variable_get('file_directory_path', FALSE)) {    variable_set('file_directory_path', 'files');    $ret[] = array('success' => TRUE, 'query' => "variable_set('file_directory_path')");  }  return $ret;}/** * Fix cache mode for blocks inserted in system_install() in fresh installs of previous RC. */function system_update_6047() {  $ret = array();  $ret[] = update_sql("UPDATE {blocks} SET cache = -1 WHERE module = 'user' AND delta IN ('0', '1')");  $ret[] = update_sql("UPDATE {blocks} SET cache = -1 WHERE module = 'system' AND delta = '0'");  return $ret;}/** * @} End of "defgroup updates-5.x-to-6.x" *//** * @defgroup updates-6.x-extra Extra system updates for 6.x * @{ *//*** Increase the size of the 'load_functions' and 'to_arg_functions' fields in table 'menu_router'.*/function system_update_6048() {  $ret = array();  db_change_field($ret, 'menu_router', 'load_functions', 'load_functions', array('type' => 'text', 'not null' => TRUE,));  db_change_field($ret, 'menu_router', 'to_arg_functions', 'to_arg_functions', array('type' => 'text', 'not null' => TRUE,));  return $ret;}/** * Replace src index on the {url_alias} table with src, language. */function system_update_6049() {  $ret = array();  db_drop_index($ret, 'url_alias', 'src');  db_add_index($ret, 'url_alias', 'src_language', array('src', 'language'));  return $ret;}/** * Clear any menu router blobs stored in the cache table. */function system_update_6050() {  $ret = array();  cache_clear_all('router:', 'cache_menu', TRUE);  return $ret;}/** * Create a signature_format column. */function system_update_6051() {  $ret = array();  if (!db_column_exists('users', 'signature_format')) {    // Set future input formats to FILTER_FORMAT_DEFAULT to ensure a safe default    // when incompatible modules insert into the users table. An actual format    // will be assigned when users save their signature.    $schema = array(      'type' => 'int',      'size' => 'small',      'not null' => TRUE,      'default' => FILTER_FORMAT_DEFAULT,      'description' => 'The {filter_formats}.format of the signature.',    );    db_add_field($ret, 'users', 'signature_format', $schema);    // Set the format of existing signatures to the current default input format.    if ($current_default_filter = variable_get('filter_default_format', 0)) {      $ret[] = update_sql("UPDATE {users} SET signature_format = ". $current_default_filter);    }    drupal_set_message("User signatures no longer inherit comment input formats. Each user's signature now has its own associated format that can be selected on the user's account page. Existing signatures have been set to your site's default input format.");  }  return $ret;}/** * Add a missing index on the {menu_router} table. */function system_update_6052() {  $ret = array();  db_add_index($ret, 'menu_router', 'tab_root_weight_title', array(array('tab_root', 64), 'weight', 'title'));  return $ret;}/** * Add a {system} index on type and name. */function system_update_6053() {  $ret = array();  db_add_index($ret, 'system', 'type_name', array(array('type', 12), 'name'));  return $ret;}/** * Add semaphore table. */function system_update_6054() {  $ret = array();  $schema['semaphore'] = array(    'fields' => array(      'name' => array(        'type' => 'varchar',        'length' => 255,        'not null' => TRUE,        'default' => ''),      'value' => array(        'type' => 'varchar',        'length' => 255,        'not null' => TRUE,        'default' => ''),      'expire' => array(        'type' => 'float',        'size' => 'big',        'not null' => TRUE),      ),    'indexes' => array('expire' => array('expire')),    'primary key' => array('name'),  );  db_create_table($ret, 'semaphore', $schema['semaphore']);  return $ret;}/** * Improve indexes on the {url_alias} table. */function system_update_6055() {  $ret = array();  db_drop_index($ret, 'url_alias', 'src_language');  db_drop_unique_key($ret, 'url_alias', 'dst_language');  db_add_index($ret, 'url_alias', 'src_language_pid', array('src', 'language', 'pid'));  db_add_unique_key($ret, 'url_alias', 'dst_language_pid', array('dst', 'language', 'pid'));  return $ret;}/** * @} End of "defgroup updates-6.x-extra" * The next series of updates should start at 7000. */
<?php// $Id$/** * @file Batch processing API for processes to run in multiple HTTP requests. *//** * State-based dispatcher for the batch processing page. */function _batch_page() {  $batch =& batch_get();  // Retrieve the current state of batch from db.  if (isset($_REQUEST['id']) && $data = db_result(db_query("SELECT batch FROM {batch} WHERE bid = %d AND token = '%s'", $_REQUEST['id'], drupal_get_token($_REQUEST['id'])))) {    $batch = unserialize($data);  }  else {    return FALSE;  }  // Register database update for end of processing.  register_shutdown_function('_batch_shutdown');  $op = isset($_REQUEST['op']) ? $_REQUEST['op'] : '';  $output = NULL;  switch ($op) {    case 'start':      $output = _batch_start();      break;    case 'do':      // JS-version AJAX callback.      _batch_do();      break;    case 'do_nojs':      // Non-JS progress page.      $output = _batch_progress_page_nojs();      break;    case 'finished':      $output = _batch_finished();      break;  }  return $output;}/** * Initiate the batch processing */function _batch_start() {  // Choose between the JS and non-JS version.  // JS-enabled users are identified through the 'has_js' cookie set in drupal.js.  // If the user did not visit any JS enabled page during his browser session,  // he gets the non-JS version...  if (isset($_COOKIE['has_js']) && $_COOKIE['has_js']) {    return _batch_progress_page_js();  }  else {    return _batch_progress_page_nojs();  }}/** * Batch processing page with JavaScript support. */function _batch_progress_page_js() {  $batch = batch_get();  // The first batch set gets to set the page title  // and the initialization and error messages.  $current_set = _batch_current_set();  drupal_set_title($current_set['title']);  drupal_add_js('misc/progress.js', 'core', 'header', FALSE, FALSE);  $url = url($batch['url'], array('query' => array('id' => $batch['id'])));  $js_setting = array(    'batch' => array(      'errorMessage' => $current_set['error_message'] .'<br/>'. $batch['error_message'],      'initMessage' => $current_set['init_message'],      'uri' => $url,    ),  );  drupal_add_js($js_setting, 'setting');  drupal_add_js('misc/batch.js', 'core', 'header', FALSE, FALSE);  $output = '<div id="progress"></div>';  return $output;}/** * Do one pass of execution and inform back the browser about progression * (used for JavaScript-mode only). */function _batch_do() {  // HTTP POST required  if ($_SERVER['REQUEST_METHOD'] != 'POST') {    drupal_set_message(t('HTTP POST is required.'), 'error');    drupal_set_title(t('Error'));    return '';  }  // Perform actual processing.  list($percentage, $message) = _batch_process();  drupal_json(array('status' => TRUE, 'percentage' => $percentage, 'message' => $message));}/** * Batch processing page without JavaScript support. */function _batch_progress_page_nojs() {  $batch =& batch_get();  $current_set = _batch_current_set();  drupal_set_title($current_set['title']);  $new_op = 'do_nojs';  if (!isset($batch['running'])) {    // This is the first page so we return some output immediately.    $percentage = 0;    $message = $current_set['init_message'];    $batch['running'] = TRUE;  }  else {    // This is one of the later requests: do some processing first.    // Error handling: if PHP dies due to a fatal error (e.g. non-existant    // function), it will output whatever is in the output buffer,    // followed by the error message.    ob_start();    $fallback = $current_set['error_message'] .'<br/>'. $batch['error_message'];    $fallback = theme('maintenance_page', $fallback, FALSE, FALSE);    // We strip the end of the page using a marker in the template, so any    // additional HTML output by PHP shows up inside the page rather than    // below it. While this causes invalid HTML, the same would be true if    // we didn't, as content is not allowed to appear after </html> anyway.    list($fallback) = explode('<!--partial-->', $fallback);    print $fallback;    // Perform actual processing.    list($percentage, $message) = _batch_process($batch);    if ($percentage == 100) {      $new_op = 'finished';    }    // PHP did not die : remove the fallback output.    ob_end_clean();  }  $url = url($batch['url'], array('query' => array('id' => $batch['id'], 'op' => $new_op)));  drupal_set_html_head('<meta http-equiv="Refresh" content="0; URL='. $url .'">');  $output = theme('progress_bar', $percentage, $message);  return $output;}/** * Advance batch processing for 1 second (or process the whole batch if it * was not set for progressive execution - e.g forms submitted by drupal_execute). */function _batch_process() {  $batch =& batch_get();  $current_set =& _batch_current_set();  $set_changed = TRUE;  if ($batch['progressive']) {    timer_start('batch_processing');  }  while (!$current_set['success']) {    // If this is the first time we iterate this batch set in the current    // request, we check if it requires an additional file for functions    // definitions.    if ($set_changed && isset($current_set['file']) && is_file($current_set['file'])) {      include_once($current_set['file']);    }    $finished = 1;    $task_message = '';    if ((list($function, $args) = reset($current_set['operations'])) && function_exists($function)) {      // Build the 'context' array, execute the function call,      // and retrieve the user message.      $batch_context = array('sandbox' => &$current_set['sandbox'], 'results' => &$current_set['results'], 'finished' => &$finished, 'message' => &$task_message);      // Process the current operation.      call_user_func_array($function, array_merge($args, array(&$batch_context)));    }    if ($finished == 1) {      // Make sure this step isn't counted double when computing $current.      $finished = 0;      // Remove the operation and clear the sandbox.      array_shift($current_set['operations']);      $current_set['sandbox'] = array();    }    // If the batch set is completed, browse through the remaining sets,    // executing 'control sets' (stored form submit handlers) along the way -    // this might in turn insert new batch sets.    // Stop when we find a set that actually has operations.    $set_changed = FALSE;    $old_set = $current_set;    while (empty($current_set['operations']) && ($current_set['success'] = TRUE) && _batch_next_set()) {      $current_set =& _batch_current_set();      $set_changed = TRUE;    }    // At this point, either $current_set is a 'real' batch set (has operations),    // or all sets have been completed.    // If we're in progressive mode, stop after 1 second.    if ($batch['progressive'] && timer_read('batch_processing') > 1000) {      break;    }  }  if ($batch['progressive']) {    // Gather progress information.    // Reporting 100% progress will cause the whole batch to be considered    // processed. If processing was paused right after moving to a new set,    // we have to use the info from the new (unprocessed) one.    if ($set_changed && isset($current_set['operations'])) {      // Processing will continue with a fresh batch set.      $remaining = count($current_set['operations']);      $total = $current_set['total'];      $progress_message = $current_set['init_message'];      $task_message = '';    }    else {      $remaining = count($old_set['operations']);      $total = $old_set['total'];      $progress_message = $old_set['progress_message'];    }    $current    = $total - $remaining + $finished;    $percentage = $total ? floor($current / $total * 100) : 100;    $values = array(      '@remaining'  => $remaining,      '@total'      => $total,      '@current'    => floor($current),      '@percentage' => $percentage,      );    $message = strtr($progress_message, $values) .'<br/>';    $message .= $task_message ? $task_message : '&nbsp';    return array($percentage, $message);  }  else {    // If we're not in progressive mode, the whole batch has been processed by now.    return _batch_finished();  }}/** * Retrieve the batch set being currently processed. */function &_batch_current_set() {  $batch =& batch_get();  return $batch['sets'][$batch['current_set']];}/** * Move execution to the next batch set if any, executing the stored * form _submit handlers along the way (thus possibly inserting * additional batch sets). */function _batch_next_set() {  $batch =& batch_get();  if (isset($batch['sets'][$batch['current_set'] + 1])) {    $batch['current_set']++;    $current_set =& _batch_current_set();    if (isset($current_set['form_submit']) && ($function = $current_set['form_submit']) && function_exists($function)) {      // We use our stored copies of $form and $form_state, to account for      // possible alteration by the submit handlers.      $function($batch['form'], $batch['form_state']);    }    return TRUE;  }}/** * End the batch processing: * Call the 'finished' callbacks to allow custom handling of results, * and resolve page redirection. */function _batch_finished() {  $batch =& batch_get();  // Execute the 'finished' callbacks for each batch set.  foreach ($batch['sets'] as $key => $batch_set) {    if (isset($batch_set['finished'])) {      // Check if the set requires an additional file for functions definitions.      if (isset($batch_set['file']) && is_file($batch_set['file'])) {        include_once($batch_set['file']);      }      if (function_exists($batch_set['finished'])) {        $batch_set['finished']($batch_set['success'], $batch_set['results'], $batch_set['operations']);      }    }  }  // Cleanup the batch table and unset the global $batch variable.  if ($batch['progressive']) {    db_query("DELETE FROM {batch} WHERE bid = %d", $batch['id']);  }  $_batch = $batch;  $batch = NULL;  // Redirect if needed.  if ($_batch['progressive']) {    // Put back the 'destination' that was saved in batch_process().    if (isset($_batch['destination'])) {      $_REQUEST['destination'] = $_batch['destination'];    }    // Use $_batch['form_state']['redirect'], or $_batch['redirect'],    // or $_batch['source_page'].    if (isset($_batch['form_state']['redirect'])) {      $redirect = $_batch['form_state']['redirect'];    }    elseif (isset($_batch['redirect'])) {      $redirect = $_batch['redirect'];    }    else {      $redirect = $_batch['source_page'];    }    // Let drupal_redirect_form handle redirection logic.    $form = isset($batch['form']) ? $batch['form'] : array();    if (empty($_batch['form_state']['rebuild']) && empty($_batch['form_state']['storage'])) {      drupal_redirect_form($form, $redirect);    }    // We get here if $form['#redirect'] was FALSE, or if the form is a    // multi-step form. We save the final $form_state value to be retrieved    // by drupal_get_form, and we redirect to the originating page.    $_SESSION['batch_form_state'] = $_batch['form_state'];    drupal_goto($_batch['source_page']);  }}/** * Shutdown function: store the batch data for next request, * or clear the table if the batch is finished. */function _batch_shutdown() {  if ($batch = batch_get()) {    db_query("UPDATE {batch} SET batch = '%s' WHERE bid = %d", serialize($batch), $batch['id']);  }}
<?php// $Id$/** * @file * Administrative page callbacks for the profile module. *//** * Form builder to display a listing of all editable profile fields. * * @ingroup forms * @see profile_admin_overview_submit() */function profile_admin_overview() {  $result = db_query('SELECT title, name, type, category, fid, weight FROM {profile_fields} ORDER BY category, weight');  $form = array();  $categories = array();  while ($field = db_fetch_object($result)) {    // Collect all category information    $categories[] = $field->category;    // Save all field information    $form[$field->fid]['name'] = array('#value' => check_plain($field->name));    $form[$field->fid]['title'] = array('#value' => check_plain($field->title));    $form[$field->fid]['type'] = array('#value' => $field->type);    $form[$field->fid]['category'] = array('#type' => 'select', '#default_value' => $field->category, '#options' => array());    $form[$field->fid]['weight'] = array('#type' => 'weight', '#default_value' => $field->weight);    $form[$field->fid]['edit'] = array('#value' => l(t('edit'), "admin/user/profile/edit/$field->fid"));    $form[$field->fid]['delete'] = array('#value' => l(t('delete'), "admin/user/profile/delete/$field->fid"));  }  // Add the cateogory combo boxes  $categories = array_unique($categories);  foreach ($form as $fid => $field) {    foreach ($categories as $cat => $category) {      $form[$fid]['category']['#options'][$category] = $category;    }  }  // Display the submit button only when there's more than one field  if (count($form) > 1) {    $form['submit'] = array('#type' => 'submit', '#value' => t('Save configuration'));  }  else {    // Disable combo boxes when there isn't a submit button    foreach ($form as $fid => $field) {      unset($form[$fid]['weight']);      $form[$fid]['category']['#type'] = 'value';    }  }  $form['#tree'] = TRUE;  $addnewfields = '<h2>'. t('Add new field') .'</h2>';  $addnewfields .= '<ul>';  foreach (_profile_field_types() as $key => $value) {    $addnewfields .= '<li>'. l($value, "admin/user/profile/add/$key") .'</li>';  }  $addnewfields .= '</ul>';  $form['addnewfields'] = array('#value' => $addnewfields);  return $form;}/** * Submit handler to update changed profile field weights and categories. * * @see profile_admin_overview() */function profile_admin_overview_submit($form, &$form_state) {  foreach (element_children($form_state['values']) as $fid) {    if (is_numeric($fid)) {      $weight = $form_state['values'][$fid]['weight'];      $category = $form_state['values'][$fid]['category'];      if ($weight != $form[$fid]['weight']['#default_value'] || $category != $form[$fid]['category']['#default_value']) {        db_query("UPDATE {profile_fields} SET weight = %d, category = '%s' WHERE fid = %d", $weight, $category, $fid);      }    }  }  drupal_set_message(t('Profile fields have been updated.'));  cache_clear_all();  menu_rebuild();}/** * Theme the profile field overview into a drag and drop enabled table. * * @ingroup themeable * @see profile_admin_overview() */function theme_profile_admin_overview($form) {  drupal_add_css(drupal_get_path('module', 'profile') .'/profile.css');  // Add javascript if there's more than one field.  if (isset($form['submit'])) {    drupal_add_js(drupal_get_path('module', 'profile') .'/profile.js');  }  $rows = array();  $categories = array();  $category_number = 0;  foreach (element_children($form) as $key) {    // Don't take form control structures.    if (array_key_exists('category', $form[$key])) {      $field = &$form[$key];      $category = $field['category']['#default_value'];      if (!isset($categories[$category])) {        // Category classes are given numeric IDs because there's no guarantee        // class names won't contain invalid characters.        $categories[$category] = $category_number;        $category_field['#attributes']['class'] = 'profile-category profile-category-'. $category_number;        $rows[] = array(array('data' => $category, 'colspan' => 7, 'class' => 'category'));        $rows[] = array('data' => array(array('data' => '<em>'. t('No fields in this category. If this category remains empty when saved, it will be removed.') .'</em>', 'colspan' => 7)), 'class' => 'category-'. $category_number .'-message category-message category-populated');        // Make it dragable only if there is more than one field        if (isset($form['submit'])) {          drupal_add_tabledrag('profile-fields', 'order', 'sibling', 'profile-weight', 'profile-weight-'. $category_number);          drupal_add_tabledrag('profile-fields', 'match', 'sibling', 'profile-category', 'profile-category-'. $category_number);        }        $category_number++;      }      // Add special drag and drop classes that group fields together.      $field['weight']['#attributes']['class'] = 'profile-weight profile-weight-'. $categories[$category];      $field['category']['#attributes']['class'] = 'profile-category profile-category-'. $categories[$category];      // Add the row      $row = array();      $row[] = drupal_render($field['title']);      $row[] = drupal_render($field['name']);      $row[] = drupal_render($field['type']);      if (isset($form['submit'])) {        $row[] = drupal_render($field['category']);        $row[] = drupal_render($field['weight']);      }      $row[] = drupal_render($field['edit']);      $row[] = drupal_render($field['delete']);      $rows[] = array('data' => $row, 'class' => 'draggable');    }  }  if (empty($rows)) {    $rows[] = array(array('data' => t('No fields available.'), 'colspan' => 7));  }  $header = array(t('Title'), t('Name'), t('Type'));  if (isset($form['submit'])) {    $header[] = t('Category');    $header[] = t('Weight');  }  $header[] = array('data' => t('Operations'), 'colspan' => 2);  $output = theme('table', $header, $rows, array('id' => 'profile-fields'));  $output .= drupal_render($form);  return $output;}/** * Menu callback: Generate a form to add/edit a user profile field. * * @ingroup forms * @see profile_field_form_validate() * @see profile_field_form_submit() */function profile_field_form(&$form_state, $arg = NULL) {  if (arg(3) == 'edit') {    if (is_numeric($arg)) {      $fid = $arg;      $edit = db_fetch_array(db_query('SELECT * FROM {profile_fields} WHERE fid = %d', $fid));      if (!$edit) {        drupal_not_found();        return;      }      drupal_set_title(t('edit %title', array('%title' => $edit['title'])));      $form['fid'] = array('#type' => 'value',        '#value' => $fid,      );      $type = $edit['type'];    }    else {      drupal_not_found();      return;    }  }  else {    $types = _profile_field_types();    if (!isset($types[$arg])) {      drupal_not_found();      return;    }    $type = $arg;    drupal_set_title(t('add new %type', array('%type' => $types[$type])));    $edit = array('name' => 'profile_');    $form['type'] = array('#type' => 'value', '#value' => $type);  }  $edit += array(    'category' => '',    'title' => '',    'explanation' => '',    'weight' => 0,    'page' => '',    'autocomplete' => '',    'required' => '',    'register' => '',  );  $form['fields'] = array('#type' => 'fieldset',    '#title' => t('Field settings'),  );  $form['fields']['category'] = array('#type' => 'textfield',    '#title' => t('Category'),    '#default_value' => $edit['category'],    '#autocomplete_path' => 'admin/user/profile/autocomplete',    '#description' => t('The category the new field should be part of. Categories are used to group fields logically. An example category is "Personal information".'),    '#required' => TRUE,  );  $form['fields']['title'] = array('#type' => 'textfield',    '#title' => t('Title'),    '#default_value' => $edit['title'],    '#description' => t('The title of the new field. The title will be shown to the user. An example title is "Favorite color".'),    '#required' => TRUE,  );  $form['fields']['name'] = array('#type' => 'textfield',    '#title' => t('Form name'),    '#default_value' => $edit['name'],    '#description' => t('The name of the field. The form name is not shown to the user but used internally in the HTML code and URLs.Unless you know what you are doing, it is highly recommended that you prefix the form name with <code>profile_</code> to avoid name clashes with other fields. Spaces or any other special characters except dash (-) and underscore (_) are not allowed. An example name is "profile_favorite_color" or perhaps just "profile_color".'),    '#required' => TRUE,  );  $form['fields']['explanation'] = array('#type' => 'textarea',    '#title' => t('Explanation'),    '#default_value' => $edit['explanation'],    '#description' => t('An optional explanation to go with the new field. The explanation will be shown to the user.'),  );  if ($type == 'selection') {    $form['fields']['options'] = array('#type' => 'textarea',      '#title' => t('Selection options'),      '#default_value' => isset($edit['options']) ? $edit['options'] : '',      '#description' => t('A list of all options. Put each option on a separate line. Example options are "red", "blue", "green", etc.'),    );  }  $form['fields']['visibility'] = array('#type' => 'radios',    '#title' => t('Visibility'),    '#default_value' => isset($edit['visibility']) ? $edit['visibility'] : PROFILE_PUBLIC,    '#options' => array(PROFILE_HIDDEN => t('Hidden profile field, only accessible by administrators, modules and themes.'), PROFILE_PRIVATE => t('Private field, content only available to privileged users.'), PROFILE_PUBLIC => t('Public field, content shown on profile page but not used on member list pages.'), PROFILE_PUBLIC_LISTINGS => t('Public field, content shown on profile page and on member list pages.')),  );  if ($type == 'selection' || $type == 'list' || $type == 'textfield') {    $form['fields']['page'] = array('#type' => 'textfield',      '#title' => t('Page title'),      '#default_value' => $edit['page'],      '#description' => t('To enable browsing this field by value, enter a title for the resulting page. The word <code>%value</code> will be substituted with the corresponding value. An example page title is "People whose favorite color is %value". This is only applicable for a public field.'),    );  }  else if ($type == 'checkbox') {    $form['fields']['page'] = array('#type' => 'textfield',      '#title' => t('Page title'),      '#default_value' => $edit['page'],      '#description' => t('To enable browsing this field by value, enter a title for the resulting page. An example page title is "People who are employed". This is only applicable for a public field.'),    );  }  $form['fields']['weight'] = array('#type' => 'weight',    '#title' => t('Weight'),    '#default_value' => $edit['weight'],    '#description' => t('The weights define the order in which the form fields are shown. Lighter fields "float up" towards the top of the category.'),  );  $form['fields']['autocomplete'] = array('#type' => 'checkbox',    '#title' => t('Form will auto-complete while user is typing.'),    '#default_value' => $edit['autocomplete'],    '#description' => t('For security, auto-complete will be disabled if the user does not have access to user profiles.'),  );  $form['fields']['required'] = array('#type' => 'checkbox',    '#title' => t('The user must enter a value.'),    '#default_value' => $edit['required'],  );  $form['fields']['register'] = array('#type' => 'checkbox',    '#title' => t('Visible in user registration form.'),    '#default_value' => $edit['register'],  );  $form['submit'] = array('#type' => 'submit',    '#value' => t('Save field'),  );  return $form;}/** * Validate profile_field_form submissions. */function profile_field_form_validate($form, &$form_state) {  // Validate the 'field name':  if (preg_match('/[^a-zA-Z0-9_-]/', $form_state['values']['name'])) {    form_set_error('name', t('The specified form name contains one or more illegal characters. Spaces or any other special characters except dash (-) and underscore (_) are not allowed.'));  }  if (in_array($form_state['values']['name'], user_fields())) {    form_set_error('name', t('The specified form name is reserved for use by Drupal.'));  }  // Validate the category:  if (!$form_state['values']['category']) {    form_set_error('category', t('You must enter a category.'));  }  if (strtolower($form_state['values']['category']) == 'account') {    form_set_error('category', t('The specified category name is reserved for use by Drupal.'));  }  $args1 = array($form_state['values']['title'], $form_state['values']['category']);  $args2 = array($form_state['values']['name']);  $query_suffix = '';  if (isset($form_state['values']['fid'])) {    $args1[] = $args2[] = $form_state['values']['fid'];    $query_suffix = ' AND fid != %d';  }  if (db_result(db_query("SELECT fid FROM {profile_fields} WHERE title = '%s' AND category = '%s'". $query_suffix, $args1))) {    form_set_error('title', t('The specified title is already in use.'));  }  if (db_result(db_query("SELECT fid FROM {profile_fields} WHERE name = '%s'". $query_suffix, $args2))) {    form_set_error('name', t('The specified name is already in use.'));  }  if ($form_state['values']['visibility'] == PROFILE_HIDDEN) {    if ($form_state['values']['required']) {      form_set_error('required', t('A hidden field cannot be required.'));    }    if ($form_state['values']['register']) {      form_set_error('register', t('A hidden field cannot be set to visible on the user registration form.'));    }  }}/** * Process profile_field_form submissions. */function profile_field_form_submit($form, &$form_state) {  if (!isset($form_state['values']['options'])) {    $form_state['values']['options'] = '';  }  if (!isset($form_state['values']['page'])) {    $form_state['values']['page'] = '';  }  if (!isset($form_state['values']['fid'])) {    db_query("INSERT INTO {profile_fields} (title, name, explanation, category, type, weight, required, register, visibility, autocomplete, options, page) VALUES ('%s', '%s', '%s', '%s', '%s', %d, %d, %d, %d, %d, '%s', '%s')", $form_state['values']['title'], $form_state['values']['name'], $form_state['values']['explanation'], $form_state['values']['category'], $form_state['values']['type'], $form_state['values']['weight'], $form_state['values']['required'], $form_state['values']['register'], $form_state['values']['visibility'], $form_state['values']['autocomplete'], $form_state['values']['options'], $form_state['values']['page']);    drupal_set_message(t('The field has been created.'));    watchdog('profile', 'Profile field %field added under category %category.', array('%field' => $form_state['values']['title'], '%category' => $form_state['values']['category']), WATCHDOG_NOTICE, l(t('view'), 'admin/user/profile'));  }  else {    db_query("UPDATE {profile_fields} SET title = '%s', name = '%s', explanation = '%s', category = '%s', weight = %d, required = %d, register = %d, visibility = %d, autocomplete = %d, options = '%s', page = '%s' WHERE fid = %d", $form_state['values']['title'], $form_state['values']['name'], $form_state['values']['explanation'], $form_state['values']['category'], $form_state['values']['weight'], $form_state['values']['required'], $form_state['values']['register'], $form_state['values']['visibility'], $form_state['values']['autocomplete'], $form_state['values']['options'], $form_state['values']['page'], $form_state['values']['fid']);    drupal_set_message(t('The field has been updated.'));  }  cache_clear_all();  menu_rebuild();  $form_state['redirect'] = 'admin/user/profile';  return;}/** * Menu callback; deletes a field from all user profiles. */function profile_field_delete(&$form_state, $fid) {  $field = db_fetch_object(db_query("SELECT title FROM {profile_fields} WHERE fid = %d", $fid));  if (!$field) {    drupal_not_found();    return;  }  $form['fid'] = array('#type' => 'value', '#value' => $fid);  $form['title'] = array('#type' => 'value', '#value' => $field->title);  return confirm_form($form,    t('Are you sure you want to delete the field %field?', array('%field' => $field->title)), 'admin/user/profile',    t('This action cannot be undone. If users have entered values into this field in their profile, these entries will also be deleted. If you want to keep the user-entered data, instead of deleting the field you may wish to <a href="@edit-field">edit this field</a> and change it to a hidden profile field so that it may only be accessed by administrators.', array('@edit-field' => url('admin/user/profile/edit/'. $fid))),    t('Delete'), t('Cancel'));}/** * Process a field delete form submission. */function profile_field_delete_submit($form, &$form_state) {  db_query('DELETE FROM {profile_fields} WHERE fid = %d', $form_state['values']['fid']);  db_query('DELETE FROM {profile_values} WHERE fid = %d', $form_state['values']['fid']);  cache_clear_all();  drupal_set_message(t('The field %field has been deleted.', array('%field' => $form_state['values']['title'])));  watchdog('profile', 'Profile field %field deleted.', array('%field' => $form_state['values']['title']), WATCHDOG_NOTICE, l(t('view'), 'admin/user/profile'));  $form_state['redirect'] = 'admin/user/profile';  return;}/** * Retrieve a pipe delimited string of autocomplete suggestions for profile categories */function profile_admin_settings_autocomplete($string) {  $matches = array();  $result = db_query_range("SELECT category FROM {profile_fields} WHERE LOWER(category) LIKE LOWER('%s%%')", $string, 0, 10);  while ($data = db_fetch_object($result)) {    $matches[$data->category] = check_plain($data->category);  }  drupal_json($matches);}
<?php// $Id$?><div id="node-<?php print $node->nid; ?>" class="node<?php if ($sticky) { print ' sticky'; } ?><?php if (!$status) { print ' node-unpublished'; } ?>"><?php print $picture ?><?php if ($page == 0): ?>  <h2><a href="<?php print $node_url ?>" title="<?php print $title ?>"><?php print $title ?></a></h2><?php endif; ?>  <?php if ($submitted): ?>    <span class="submitted"><?php print $submitted; ?></span>  <?php endif; ?>  <div class="content clear-block">    <?php print $content ?>  </div>  <div class="clear-block">    <div class="meta">    <?php if ($taxonomy): ?>      <div class="terms"><?php print $terms ?></div>    <?php endif;?>    </div>    <?php if ($links): ?>      <div class="links"><?php print $links; ?></div>    <?php endif; ?>  </div></div>
<?php// $Id$/** * Implementation of hook_install(). */function contact_install() {  // Create tables.  drupal_install_schema('contact');}/** * Implementation of hook_uninstall(). */function contact_uninstall() {  // Remove tables.  drupal_uninstall_schema('contact');  variable_del('contact_default_status');  variable_del('contact_form_information');  variable_del('contact_hourly_threshold');}/** * Implementation of hook_schema(). */function contact_schema() {  $schema['contact'] = array(    'description' => 'Contact form category settings.',    'fields' => array(      'cid' => array(        'type' => 'serial',        'unsigned' => TRUE,        'not null' => TRUE,        'description' => 'Primary Key: Unique category ID.',      ),      'category' => array(        'type' => 'varchar',        'length' => 255,        'not null' => TRUE,        'default' => '',        'description' => 'Category name.',      ),      'recipients' => array(        'type' => 'text',        'not null' => TRUE,        'size' => 'big',        'description' => 'Comma-separated list of recipient e-mail addresses.',      ),      'reply' => array(        'type' => 'text',        'not null' => TRUE,        'size' => 'big',        'description' => 'Text of the auto-reply message.',      ),      'weight' => array(        'type' => 'int',        'not null' => TRUE,        'default' => 0,        'size' => 'tiny',        'description' => "The category's weight.",      ),      'selected' => array(        'type' => 'int',        'not null' => TRUE,        'default' => 0,        'size' => 'tiny',        'description' => 'Flag to indicate whether or not category is selected by default. (1 = Yes, 0 = No)',      ),    ),    'primary key' => array('cid'),    'unique keys' => array(      'category' => array('category'),    ),    'indexes' => array(      'list' => array('weight', 'category'),    ),  );  return $schema;}
<?php// $Id$/** * Implementation of hook_install(). */function locale_install() {  // locales_source.source and locales_target.target are not used as binary  // fields; non-MySQL database servers need to ensure the field type is text  // and that LIKE produces a case-sensitive comparison.  // Create tables.  drupal_install_schema('locale');  db_query("INSERT INTO {languages} (language, name, native, direction, enabled, weight, javascript) VALUES ('en', 'English', 'English', '0', '1', '0', '')");}/** * @defgroup updates-5.x-to-6.x Locale updates from 5.x to 6.x * @{ *//** * {locales_meta} table became {languages}. */function locale_update_6000() {  $ret = array();  $schema['languages'] = array(    'fields' => array(      'language' => array(        'type' => 'varchar',        'length' => 12,        'not null' => TRUE,        'default' => '',      ),      'name' => array(        'type' => 'varchar',        'length' => 64,        'not null' => TRUE,        'default' => '',      ),      'native' => array(        'type' => 'varchar',        'length' => 64,        'not null' => TRUE,        'default' => '',      ),      'direction' => array(        'type' => 'int',        'not null' => TRUE,        'default' => 0,      ),      'enabled' => array(        'type' => 'int',        'not null' => TRUE,        'default' => 0,      ),      'plurals' => array(        'type' => 'int',        'not null' => TRUE,        'default' => 0,      ),      'formula' => array(        'type' => 'varchar',        'length' => 128,        'not null' => TRUE,        'default' => '',      ),      'domain' => array(        'type' => 'varchar',        'length' => 128,        'not null' => TRUE,        'default' => '',      ),      'prefix' => array(        'type' => 'varchar',        'length' => 128,        'not null' => TRUE,        'default' => '',      ),      'weight' => array(        'type' => 'int',        'not null' => TRUE,        'default' => 0,      ),      'javascript' => array( //Adds a column to store the filename of the JavaScript translation file.        'type' => 'varchar',        'length' => 32,        'not null' => TRUE,        'default' => '',      ),    ),    'primary key' => array('language'),    'indexes' => array(      'list' => array('weight', 'name'),    ),  );  db_create_table($ret, 'languages', $schema['languages']);  // Save the languages  $ret[] = update_sql("INSERT INTO {languages} (language, name, native, direction, enabled, plurals, formula, domain, prefix, weight) SELECT locale, name, name, 0, enabled, plurals, formula, '', locale, 0 FROM {locales_meta}");  // Save the language count in the variable table  $count = db_result(db_query('SELECT COUNT(*) FROM {languages} WHERE enabled = 1'));  variable_set('language_count', $count);  // Save the default language in the variable table  $default = db_fetch_object(db_query('SELECT * FROM {locales_meta} WHERE isdefault = 1'));  variable_set('language_default', (object) array('language' => $default->locale, 'name' => $default->name, 'native' => '', 'direction' => 0, 'enabled' => 1, 'plurals' => $default->plurals, 'formula' => $default->formula, 'domain' => '', 'prefix' => $default->locale, 'weight' => 0));  $ret[] = update_sql("DROP TABLE {locales_meta}");  return $ret;}/** * Change locale column to language. The language column is added by * update_fix_d6_requirements() in update.php to avoid a large number * of error messages from update.php.  All we need to do here is copy * locale to language and then drop locale. */function locale_update_6001() {  $ret = array();  $ret[] = update_sql('UPDATE {locales_target} SET language = locale');  db_drop_field($ret, 'locales_target', 'locale');  return $ret;}/** * Remove empty translations, we don't need these anymore. */function locale_update_6002() {  $ret = array();  $ret[] = update_sql("DELETE FROM {locales_target} WHERE translation = ''");  return $ret;}/** * Prune strings with no translations (will be automatically re-registered if still in use) */function locale_update_6003() {  $ret = array();  $ret[] = update_sql("DELETE FROM {locales_source} WHERE lid NOT IN (SELECT lid FROM {locales_target})");  return $ret;}/** * Fix remaining inconsistent indexes. */function locale_update_6004() {  $ret = array();  db_add_index($ret, 'locales_target', 'language', array('language'));  switch ($GLOBALS['db_type']) {    case 'pgsql':      db_drop_index($ret, 'locales_source', 'source');      db_add_index($ret, 'locales_source', 'source', array(array('source', 30)));      break;  }  return $ret;}/** * Change language setting variable of content types. * * Use language_content_type_<content_type> instead of language_<content_type> * so content types such as 'default', 'count' or 'negotiation' will not * interfere with language variables. */function locale_update_6005() {  foreach (node_get_types() as $type => $content_type) {    // Default to NULL, so we can skip dealing with non-existent settings.    $setting = variable_get('language_'. $type, NULL);    if ($type == 'default' && is_numeric($setting)) {      // language_default was overwritten with the content type setting,      // so reset the default language and save the content type setting.      variable_set('language_content_type_default', $setting);      variable_del('language_default');      drupal_set_message('The default language setting has been reset to its default value. Check the '. l('language configuration page', 'admin/settings/language') .' to configure it correctly.');    }    elseif ($type == 'negotiation') {      // language_content_type_negotiation is an integer either if it is      // the negotiation setting or the content type setting.      // The language_negotiation setting is not reset, but      // the user is alerted that this setting possibly was overwritten      variable_set('language_content_type_negotiation', $setting);      drupal_set_message('The language negotiation setting was possibly overwritten by a content type of the same name. Check the '. l('language configuration page', 'admin/settings/language/configure') .' and the '. l('<em>'. $content_type->name ."</em> content type's multilingual support settings", 'admin/content/types/negotiation', array('html' => TRUE)) .' to configure them correctly.');    }    elseif (!is_null($setting)) {      // Change the language setting variable for any other content type.      // Do not worry about language_count, it will be updated below.      variable_set('language_content_type_'. $type, $setting);      variable_del('language_'. $type);    }  }  // Update language count variable that might be overwritten.  $count = db_result(db_query('SELECT COUNT(*) FROM {languages} WHERE enabled = 1'));  variable_set('language_count', $count);  return array();}/** * Neutralize unsafe language names in the database. */function locale_update_6006() {  $ret = array();  $matches = db_result(db_query("SELECT 1 FROM {languages} WHERE native LIKE '%<%' OR native LIKE '%>%' OR name LIKE '%<%' OR name LIKE '%>%'"));  if ($matches) {    $ret[] = update_sql("UPDATE {languages} SET name = REPLACE(name, '<', ''), native = REPLACE(native, '<', '')");    $ret[] = update_sql("UPDATE {languages} SET name = REPLACE(name, '>', ''), native = REPLACE(native, '>', '')");    drupal_set_message('The language name in English and the native language name values of all the existing custom languages of your site have been sanitized for security purposes. Visit the <a href="'. url('admin/settings/language') .'">Languages</a> page to check these and fix them if necessary.', 'warning');  }  // Check if some langcode values contain potentially dangerous characters and  // warn the user if so. These are not fixed since they are referenced in other  // tables (e.g. {node}).  if (db_result(db_query("SELECT 1 FROM {languages} WHERE language LIKE '%<%' OR language LIKE '%>%' OR language LIKE '%\"%' OR language LIKE '%\\\\\%'"))) {    drupal_set_message('Some of your custom language code values contain invalid characters. You should examine the <a href="'. url('admin/settings/language') .'">Languages</a> page. These must be fixed manually.', 'error');  }  return $ret;}/** * @} End of "defgroup updates-5.x-to-6.x" *//** * Implementation of hook_uninstall(). */function locale_uninstall() {  // Delete all JavaScript translation files  $files = db_query('SELECT javascript FROM {languages}');  while ($file = db_fetch_object($files)) {    if (!empty($file)) {      file_delete(file_create_path($file->javascript));    }  }  // Clear variables.  variable_del('language_default');  variable_del('language_count');  variable_del('language_content_type_default');  variable_del('language_content_type_negotiation');  variable_del('locale_cache_strings');  variable_del('locale_js_directory');  variable_del('javascript_parsed');  variable_del('language_negotiation');  foreach (node_get_types() as $type => $content_type) {    variable_del("language_content_type_$type");  }  // Switch back to English: with a $language->language value different from  // 'en' successive calls of t() might result in calling locale(), which in  // turn might try to query the unexisting {locales_source} and  // {locales_target} tables.  drupal_init_language();  // Remove tables.  drupal_uninstall_schema('locale');}/** * Implementation of hook_schema(). */function locale_schema() {  $schema['languages'] = array(    'description' => 'List of all available languages in the system.',    'fields' => array(      'language' => array(        'type' => 'varchar',        'length' => 12,        'not null' => TRUE,        'default' => '',        'description' => "Language code, e.g. 'de' or 'en-US'.",      ),      'name' => array(        'type' => 'varchar',        'length' => 64,        'not null' => TRUE,        'default' => '',        'description' => 'Language name in English.',      ),      'native' => array(        'type' => 'varchar',        'length' => 64,        'not null' => TRUE,        'default' => '',        'description' => 'Native language name.',      ),      'direction' => array(        'type' => 'int',        'not null' => TRUE,        'default' => 0,        'description' => 'Direction of language (Left-to-Right = 0, Right-to-Left = 1).',      ),      'enabled' => array(        'type' => 'int',        'not null' => TRUE,        'default' => 0,        'description' => 'Enabled flag (1 = Enabled, 0 = Disabled).',      ),      'plurals' => array(        'type' => 'int',        'not null' => TRUE,        'default' => 0,        'description' => 'Number of plural indexes in this language.',      ),      'formula' => array(        'type' => 'varchar',        'length' => 128,        'not null' => TRUE,        'default' => '',        'description' => 'Plural formula in PHP code to evaluate to get plural indexes.',      ),      'domain' => array(        'type' => 'varchar',        'length' => 128,        'not null' => TRUE,        'default' => '',        'description' => 'Domain to use for this language.',      ),      'prefix' => array(        'type' => 'varchar',        'length' => 128,        'not null' => TRUE,        'default' => '',        'description' => 'Path prefix to use for this language.',      ),      'weight' => array(        'type' => 'int',        'not null' => TRUE,        'default' => 0,        'description' => 'Weight, used in lists of languages.',      ),      'javascript' => array(        'type' => 'varchar',        'length' => 32,        'not null' => TRUE,        'default' => '',        'description' => 'Location of JavaScript translation file.',      ),    ),    'primary key' => array('language'),    'indexes' => array(      'list' => array('weight', 'name'),    ),  );  $schema['locales_source'] = array(    'description' => 'List of English source strings.',    'fields' => array(      'lid' => array(        'type' => 'serial',        'not null' => TRUE,        'description' => 'Unique identifier of this string.',      ),      'location' => array(        'type' => 'varchar',        'length' => 255,        'not null' => TRUE,        'default' => '',        'description' => 'Drupal path in case of online discovered translations or file path in case of imported strings.',      ),      'textgroup' => array(        'type' => 'varchar',        'length' => 255,        'not null' => TRUE,        'default' => 'default',        'description' => 'A module defined group of translations, see hook_locale().',      ),      'source' => array(        'type' => 'text',        'mysql_type' => 'blob',        'not null' => TRUE,        'description' => 'The original string in English.',      ),      'version' => array(        'type' => 'varchar',        'length' => 20,        'not null' => TRUE,        'default' => 'none',        'description' => 'Version of Drupal, where the string was last used (for locales optimization).',      ),    ),    'primary key' => array('lid'),    'indexes' => array(      'source' => array(array('source', 30)),    ),  );  $schema['locales_target'] = array(    'description' => 'Stores translated versions of strings.',    'fields' => array(      'lid' => array(        'type' => 'int',        'not null' => TRUE,        'default' => 0,        'description' => 'Source string ID. References {locales_source}.lid.',      ),      'translation' => array(        'type' => 'text',        'mysql_type' => 'blob',        'not null' => TRUE,        'description' => 'Translation string value in this language.',      ),      'language' => array(        'type' => 'varchar',        'length' => 12,        'not null' => TRUE,        'default' => '',        'description' => 'Language code. References {languages}.language.',      ),      'plid' => array(        'type' => 'int',        'not null' => TRUE, // This should be NULL for no referenced string, not zero.        'default' => 0,        'description' => 'Parent lid (lid of the previous string in the plural chain) in case of plural strings. References {locales_source}.lid.',      ),      'plural' => array(        'type' => 'int',        'not null' => TRUE,        'default' => 0,        'description' => 'Plural index number in case of plural strings.',      ),    ),    'primary key' => array('language', 'lid', 'plural'),    'indexes' => array(      'lid'      => array('lid'),      'plid'     => array('plid'),      'plural'   => array('plural'),    ),  );  return $schema;}
<?php// $Id$/** * @file * Admin page callbacks for the aggregator module. *//** * Menu callback; displays the aggregator administration page. */function aggregator_admin_overview() {  return aggregator_view();}/** * Displays the aggregator administration page. * * @return *   The page HTML. */function aggregator_view() {  $result = db_query('SELECT f.*, COUNT(i.iid) AS items FROM {aggregator_feed} f LEFT JOIN {aggregator_item} i ON f.fid = i.fid GROUP BY f.fid, f.title, f.url, f.refresh, f.checked, f.link, f.description, f.etag, f.modified, f.image, f.block ORDER BY f.title');  $output = '<h3>'. t('Feed overview') .'</h3>';  $header = array(t('Title'), t('Items'), t('Last update'), t('Next update'), array('data' => t('Operations'), 'colspan' => '3'));  $rows = array();  while ($feed = db_fetch_object($result)) {    $rows[] = array(l($feed->title, "aggregator/sources/$feed->fid"), format_plural($feed->items, '1 item', '@count items'), ($feed->checked ? t('@time ago', array('@time' => format_interval(time() - $feed->checked))) : t('never')), ($feed->checked ? t('%time left', array('%time' => format_interval($feed->checked + $feed->refresh - time()))) : t('never')), l(t('edit'), "admin/content/aggregator/edit/feed/$feed->fid"), l(t('remove items'), "admin/content/aggregator/remove/$feed->fid"), l(t('update items'), "admin/content/aggregator/update/$feed->fid"));  }  $output .= theme('table', $header, $rows);  $result = db_query('SELECT c.cid, c.title, count(ci.iid) as items FROM {aggregator_category} c LEFT JOIN {aggregator_category_item} ci ON c.cid = ci.cid GROUP BY c.cid, c.title ORDER BY title');  $output .= '<h3>'. t('Category overview') .'</h3>';  $header = array(t('Title'), t('Items'), t('Operations'));  $rows = array();  while ($category = db_fetch_object($result)) {    $rows[] = array(l($category->title, "aggregator/categories/$category->cid"), format_plural($category->items, '1 item', '@count items'), l(t('edit'), "admin/content/aggregator/edit/category/$category->cid"));  }  $output .= theme('table', $header, $rows);  return $output;}/** * Form builder; Generate a form to add/edit feed sources. * * @ingroup forms * @see aggregator_form_feed_validate() * @see aggregator_form_feed_submit() */function aggregator_form_feed(&$form_state, $edit = array('refresh' => 900, 'title' => '', 'url' => '', 'fid' => NULL)) {  $period = drupal_map_assoc(array(900, 1800, 3600, 7200, 10800, 21600, 32400, 43200, 64800, 86400, 172800, 259200, 604800, 1209600, 2419200), 'format_interval');  if ($edit['refresh'] == '') {    $edit['refresh'] = 3600;  }  $form['title'] = array('#type' => 'textfield',    '#title' => t('Title'),    '#default_value' => $edit['title'],    '#maxlength' => 255,    '#description' => t('The name of the feed (or the name of the website providing the feed).'),    '#required' => TRUE,  );  $form['url'] = array('#type' => 'textfield',    '#title' => t('URL'),    '#default_value' => $edit['url'],    '#maxlength' => 255,    '#description' => t('The fully-qualified URL of the feed.'),    '#required' => TRUE,  );  $form['refresh'] = array('#type' => 'select',    '#title' => t('Update interval'),    '#default_value' => $edit['refresh'],    '#options' => $period,    '#description' => t('The length of time between feed updates. (Requires a correctly configured <a href="@cron">cron maintenance task</a>.)', array('@cron' => url('admin/reports/status'))),  );  // Handling of categories:  $options = array();  $values = array();  $categories = db_query('SELECT c.cid, c.title, f.fid FROM {aggregator_category} c LEFT JOIN {aggregator_category_feed} f ON c.cid = f.cid AND f.fid = %d ORDER BY title', $edit['fid']);  while ($category = db_fetch_object($categories)) {    $options[$category->cid] = check_plain($category->title);    if ($category->fid) $values[] = $category->cid;  }  if ($options) {    $form['category'] = array('#type' => 'checkboxes',      '#title' => t('Categorize news items'),      '#default_value' => $values,      '#options' => $options,      '#description' => t('New feed items are automatically filed in the checked categories.'),    );  }  $form['submit'] = array('#type' => 'submit', '#value' => t('Save'));  if ($edit['fid']) {    $form['delete'] = array('#type' => 'submit', '#value' => t('Delete'));    $form['fid'] = array('#type' => 'hidden', '#value' => $edit['fid']);  }  return $form;}/** * Validate aggregator_form_feed form submissions. */function aggregator_form_feed_validate($form, &$form_state) {  if ($form_state['values']['op'] == t('Save')) {    // Ensure URL is valid.    if (!valid_url($form_state['values']['url'], TRUE)) {      form_set_error('url', t('The URL %url is invalid. Please enter a fully-qualified URL, such as http://www.example.com/feed.xml.', array('%url' => $form_state['values']['url'])));    }    // Check for duplicate titles.    if (isset($form_state['values']['fid'])) {      $result = db_query("SELECT title, url FROM {aggregator_feed} WHERE (title = '%s' OR url = '%s') AND fid <> %d", $form_state['values']['title'], $form_state['values']['url'], $form_state['values']['fid']);    }    else {      $result = db_query("SELECT title, url FROM {aggregator_feed} WHERE title = '%s' OR url = '%s'", $form_state['values']['title'], $form_state['values']['url']);    }    while ($feed = db_fetch_object($result)) {      if (strcasecmp($feed->title, $form_state['values']['title']) == 0) {        form_set_error('title', t('A feed named %feed already exists. Please enter a unique title.', array('%feed' => $form_state['values']['title'])));      }      if (strcasecmp($feed->url, $form_state['values']['url']) == 0) {        form_set_error('url', t('A feed with this URL %url already exists. Please enter a unique URL.', array('%url' => $form_state['values']['url'])));      }    }  }}/** * Process aggregator_form_feed form submissions. * * @todo Add delete confirmation dialog. */function aggregator_form_feed_submit($form, &$form_state) {  if ($form_state['values']['op'] == t('Delete')) {    $title = $form_state['values']['title'];    // Unset the title:    unset($form_state['values']['title']);  }  aggregator_save_feed($form_state['values']);  if (isset($form_state['values']['fid'])) {    if (isset($form_state['values']['title'])) {      drupal_set_message(t('The feed %feed has been updated.', array('%feed' => $form_state['values']['title'])));      if (arg(0) == 'admin') {        $form_state['redirect'] = 'admin/content/aggregator/';        return;      }      else {        $form_state['redirect'] = 'aggregator/sources/'. $form_state['values']['fid'];        return;      }    }    else {      watchdog('aggregator', 'Feed %feed deleted.', array('%feed' => $title));      drupal_set_message(t('The feed %feed has been deleted.', array('%feed' => $title)));      if (arg(0) == 'admin') {        $form_state['redirect'] = 'admin/content/aggregator/';        return;      }      else {        $form_state['redirect'] = 'aggregator/sources/';        return;      }    }  }  else {    watchdog('aggregator', 'Feed %feed added.', array('%feed' => $form_state['values']['title']), WATCHDOG_NOTICE, l(t('view'), 'admin/content/aggregator'));    drupal_set_message(t('The feed %feed has been added.', array('%feed' => $form_state['values']['title'])));  }}function aggregator_admin_remove_feed($form_state, $feed) {  return confirm_form(    array(      'feed' => array(        '#type' => 'value',        '#value' => $feed,      ),    ),    t('Are you sure you want to remove all items from the feed %feed?', array('%feed' => $feed['title'])),    'admin/content/aggregator',    t('This action cannot be undone.'),    t('Remove items'),    t('Cancel')  );}/** * Remove all items from a feed and redirect to the overview page. * * @param $feed *   An associative array describing the feed to be cleared. */function aggregator_admin_remove_feed_submit($form, &$form_state) {  aggregator_remove($form_state['values']['feed']);  $form_state['redirect'] = 'admin/content/aggregator';}/** * Menu callback; refreshes a feed, then redirects to the overview page. * * @param $feed *   An associative array describing the feed to be refreshed. */function aggregator_admin_refresh_feed($feed) {  aggregator_refresh($feed);  drupal_goto('admin/content/aggregator');}/** * Form builder; Configure the aggregator system. * * @ingroup forms * @see system_settings_form() */function aggregator_admin_settings() {  $items = array(0 => t('none')) + drupal_map_assoc(array(3, 5, 10, 15, 20, 25), '_aggregator_items');  $period = drupal_map_assoc(array(3600, 10800, 21600, 32400, 43200, 86400, 172800, 259200, 604800, 1209600, 2419200, 4838400, 9676800), 'format_interval');  $form['aggregator_allowed_html_tags'] = array(    '#type' => 'textfield', '#title' => t('Allowed HTML tags'), '#size' => 80, '#maxlength' => 255,    '#default_value' => variable_get('aggregator_allowed_html_tags', '<a> <b> <br> <dd> <dl> <dt> <em> <i> <li> <ol> <p> <strong> <u> <ul>'),    '#description' => t('A space-separated list of HTML tags allowed in the content of feed items. (Tags in this list are not removed by Drupal.)')  );  $form['aggregator_summary_items'] = array(    '#type' => 'select', '#title' => t('Items shown in sources and categories pages') ,    '#default_value' => variable_get('aggregator_summary_items', 3), '#options' => $items,    '#description' => t('Number of feed items displayed in feed and category summary pages.')  );  $form['aggregator_clear'] = array(    '#type' => 'select', '#title' => t('Discard items older than'),    '#default_value' => variable_get('aggregator_clear', 9676800), '#options' => $period,    '#description' => t('The length of time to retain feed items before discarding. (Requires a correctly configured <a href="@cron">cron maintenance task</a>.)', array('@cron' => url('admin/reports/status')))  );  $form['aggregator_category_selector'] = array(    '#type' => 'radios', '#title' => t('Category selection type'), '#default_value' => variable_get('aggregator_category_selector', 'checkboxes'),    '#options' => array('checkboxes' => t('checkboxes'), 'select' => t('multiple selector')),    '#description' => t('The type of category selection widget displayed on categorization pages. (For a small number of categories, checkboxes are easier to use, while a multiple selector work well with large numbers of categories.)')  );  return system_settings_form($form);}/** * Form builder; Generate a form to add/edit/delete aggregator categories. * * @ingroup forms * @see aggregator_form_category_validate() * @see aggregator_form_category_submit() */function aggregator_form_category(&$form_state, $edit = array('title' => '', 'description' => '', 'cid' => NULL)) {  $form['title'] = array('#type' => 'textfield',    '#title' => t('Title'),    '#default_value' => $edit['title'],    '#maxlength' => 64,    '#required' => TRUE,  );  $form['description'] = array('#type' => 'textarea',    '#title' => t('Description'),    '#default_value' => $edit['description'],  );  $form['submit'] = array('#type' => 'submit', '#value' => t('Save'));  if ($edit['cid']) {    $form['delete'] = array('#type' => 'submit', '#value' => t('Delete'));    $form['cid'] = array('#type' => 'hidden', '#value' => $edit['cid']);  }  return $form;}/** * Validate aggregator_form_feed form submissions. */function aggregator_form_category_validate($form, &$form_state) {  if ($form_state['values']['op'] == t('Save')) {    // Check for duplicate titles    if (isset($form_state['values']['cid'])) {      $category = db_fetch_object(db_query("SELECT cid FROM {aggregator_category} WHERE title = '%s' AND cid <> %d", $form_state['values']['title'], $form_state['values']['cid']));    }    else {      $category = db_fetch_object(db_query("SELECT cid FROM {aggregator_category} WHERE title = '%s'", $form_state['values']['title']));    }    if ($category) {      form_set_error('title', t('A category named %category already exists. Please enter a unique title.', array('%category' => $form_state['values']['title'])));    }  }}/** * Process aggregator_form_category form submissions. * * @todo Add delete confirmation dialog. */function aggregator_form_category_submit($form, &$form_state) {  if ($form_state['values']['op'] == t('Delete')) {    $title = $form_state['values']['title'];    // Unset the title:    unset($form_state['values']['title']);  }  aggregator_save_category($form_state['values']);  if (isset($form_state['values']['cid'])) {    if (isset($form_state['values']['title'])) {      drupal_set_message(t('The category %category has been updated.', array('%category' => $form_state['values']['title'])));      if (arg(0) == 'admin') {        $form_state['redirect'] = 'admin/content/aggregator/';        return;      }      else {        $form_state['redirect'] = 'aggregator/categories/'. $form_state['values']['cid'];        return;      }    }    else {      watchdog('aggregator', 'Category %category deleted.', array('%category' => $title));      drupal_set_message(t('The category %category has been deleted.', array('%category' => $title)));      if (arg(0) == 'admin') {        $form_state['redirect'] = 'admin/content/aggregator/';        return;      }      else {        $form_state['redirect'] = 'aggregator/categories/';        return;      }    }  }  else {    watchdog('aggregator', 'Category %category added.', array('%category' => $form_state['values']['title']), WATCHDOG_NOTICE, l(t('view'), 'admin/content/aggregator'));    drupal_set_message(t('The category %category has been added.', array('%category' => $form_state['values']['title'])));  }}
<?php// $Id$/** * @file * Enables the use of personal and site-wide contact forms. *//** * Implementation of hook_help(). */function contact_help($path, $arg) {  switch ($path) {    case 'admin/help#contact':      $output = '<p>'. t('The contact module facilitates communication via e-mail, by allowing your site\'s visitors to contact one another (personal contact forms), and by providing a simple way to direct messages to a set of administrator-defined recipients (the <a href="@contact">contact page</a>). With either form, users specify a subject, write their message, and (optionally) have a copy of their message sent to their own e-mail address.', array('@contact' => url('contact'))) .'</p>';      $output .= '<p>'. t("Personal contact forms allow users to be contacted via e-mail, while keeping recipient e-mail addresses private. Users may enable or disable their personal contact forms by editing their <em>My account</em> page. If enabled, a <em>Contact</em> tab leading to their personal contact form is available on their user profile. Site administrators have access to all personal contact forms (even if they have been disabled). The <em>Contact</em> tab is only visible when viewing another user's profile (users do not see their own <em>Contact</em> tab).") .'</p>';      $output .= '<p>'. t('The <a href="@contact">contact page</a> provides a simple form for visitors to leave comments, feedback, or other requests. Messages are routed by selecting a category from a list of administrator-defined options; each category has its own set of e-mail recipients. Common categories for a business site include, for example, "Website feedback" (messages are forwarded to web site administrators) and "Product information" (messages are forwarded to members of the sales department). The actual e-mail addresses defined within a category are not displayed. Only users in roles with the <em>access site-wide contact form</em> permission may access the <a href="@contact">contact page</a>.', array('@contact' => url('contact'))) .'</p>';      $output .= '<p>'. t('A link to your site\'s <a href="@contact">contact page</a> from the main <em>Navigation</em> menu is created, but is disabled by default. Create a similar link on another menu by adding a menu item pointing to the path "contact"', array('@contact' => url('contact'))) .'</p>';      $output .= '<p>'. t('Customize the <a href="@contact">contact page</a> with additional information (like physical location, mailing address, and telephone number) using the <a href="@contact-settings">contact form settings page</a>. The <a href="@contact-settings">settings page</a> also provides configuration options for the maximum number of contact form submissions a user may perform per hour, and the default status of users\' personal contact forms.', array('@contact-settings' => url('admin/build/contact/settings'), '@contact' => url('contact'))) .'</p>';      $output .= '<p>'. t('For more information, see the online handbook entry for <a href="@contact">Contact module</a>.', array('@contact' => url('http://drupal.org/handbook/modules/contact/', array('absolute' => TRUE)))) .'</p>';      return $output;    case 'admin/build/contact':      $output = '<p>'. t('This page lets you set up <a href="@form">your site-wide contact form</a>. To do so, add one or more categories. You can associate different recipients with each category to route e-mails to different people. For example, you can route website feedback to the webmaster and direct product information requests to the sales department. On the <a href="@settings">settings page</a>, you can customize the information shown above the contact form. This can be useful to provide additional contact information such as your postal address and telephone number.', array('@settings' => url('admin/build/contact/settings'), '@form' => url('contact'))) .'</p>';      if (!module_exists('menu')) {        $menu_note = t('The menu item can be customized and configured only once the menu module has been <a href="@modules-page">enabled</a>.', array('@modules-page' => url('admin/settings/modules')));      }      else {        $menu_note = '';      }      $output .= '<p>'. t('The contact module also adds a <a href="@menu-settings">menu item</a> (disabled by default) to the navigation block.', array('@menu-settings' => url('admin/build/menu'))) .' '. $menu_note .'</p>';      return $output;  }}/** * Implementation of hook_perm */function contact_perm() {  return array('access site-wide contact form', 'administer site-wide contact form');}/** * Implementation of hook_menu(). */function contact_menu() {  $items['admin/build/contact'] = array(    'title' => 'Contact form',    'description' => 'Create a system contact form and set up categories for the form to use.',    'page callback' => 'contact_admin_categories',    'access arguments' => array('administer site-wide contact form'),    'file' => 'contact.admin.inc',  );  $items['admin/build/contact/list'] = array(    'title' => 'List',    'page callback' => 'contact_admin_categories',    'type' => MENU_DEFAULT_LOCAL_TASK,    'file' => 'contact.admin.inc',  );  $items['admin/build/contact/add'] = array(    'title' => 'Add category',    'page callback' => 'drupal_get_form',    'page arguments' => array('contact_admin_edit', 3),    'access arguments' => array('administer site-wide contact form'),    'type' => MENU_LOCAL_TASK,    'weight' => 1,    'file' => 'contact.admin.inc',  );  $items['admin/build/contact/edit/%contact'] = array(    'title' => 'Edit contact category',    'page callback' => 'drupal_get_form',    'page arguments' => array('contact_admin_edit', 3, 4),    'access arguments' => array('administer site-wide contact form'),    'type' => MENU_CALLBACK,    'file' => 'contact.admin.inc',  );  $items['admin/build/contact/delete/%contact'] = array(    'title' => 'Delete contact',    'page callback' => 'drupal_get_form',    'page arguments' => array('contact_admin_delete', 4),    'access arguments' => array('administer site-wide contact form'),    'type' => MENU_CALLBACK,    'file' => 'contact.admin.inc',  );  $items['admin/build/contact/settings'] = array(    'title' => 'Settings',    'page callback' => 'drupal_get_form',    'page arguments' => array('contact_admin_settings'),    'access arguments' => array('administer site-wide contact form'),    'type' => MENU_LOCAL_TASK,    'weight' => 2,    'file' => 'contact.admin.inc',  );  $items['contact'] = array(    'title' => 'Contact',    'page callback' => 'contact_site_page',    'access arguments' => array('access site-wide contact form'),    'type' => MENU_SUGGESTED_ITEM,    'file' => 'contact.pages.inc',  );  $items['user/%user/contact'] = array(    'title' => 'Contact',    'page callback' => 'contact_user_page',    'page arguments' => array(1),    'type' => MENU_LOCAL_TASK,    'access callback' => '_contact_user_tab_access',    'access arguments' => array(1),    'weight' => 2,    'file' => 'contact.pages.inc',  );  return $items;}/** * Menu access callback for a user's personal contact form. * * @param $account *   A user account object. * @return *   TRUE if the current user has access to the requested user's contact form, *   or FALSE otherwise. */function _contact_user_tab_access($account) {  global $user;  // Anonymous users cannot use or have contact forms.  if (!$user->uid || !$account->uid) {    return FALSE;  }  // User administrators should always have access to personal contact forms.  if (user_access('administer users')) {    return TRUE;  }  // Users may not contact themselves.  if ($user->uid == $account->uid) {    return FALSE;  }  // If the requested user has disabled their contact form, or this preference  // has not yet been saved, do not allow users to contact them.  if (empty($account->contact)) {    return FALSE;  }  return TRUE;}/** * Load the data for a single contact category. */function contact_load($cid) {  $contact = db_fetch_array(db_query("SELECT * FROM {contact} WHERE cid = %d", $cid));  return empty($contact) ? FALSE : $contact;}/** * Implementation of hook_user(). * * Allows the user the option of enabling/disabling his personal contact form. */function contact_user($type, &$edit, &$user, $category = NULL) {  if ($type == 'form' && $category == 'account') {    $form['contact'] = array('#type' => 'fieldset',      '#title' => t('Contact settings'),      '#weight' => 5,      '#collapsible' => TRUE,    );    $form['contact']['contact'] = array('#type' => 'checkbox',      '#title' => t('Personal contact form'),      '#default_value' => !empty($edit['contact']) ? $edit['contact'] : FALSE,      '#description' => t('Allow other users to contact you by e-mail via <a href="@url">your personal contact form</a>. Note that while your e-mail address is not made public to other members of the community, privileged users such as site administrators are able to contact you even if you choose not to enable this feature.', array('@url' => url("user/$user->uid/contact"))),    );    return $form;  }  elseif ($type == 'validate') {    return array('contact' => isset($edit['contact']) ? $edit['contact'] : FALSE);  }  elseif ($type == 'insert') {    $edit['contact'] = variable_get('contact_default_status', 1);  }}/** * Implementation of hook_mail(). */function contact_mail($key, &$message, $params) {  $language = $message['language'];  switch ($key) {    case 'page_mail':    case 'page_copy':      $contact = $params['contact'];      $message['subject'] .= t('[!category] !subject', array('!category' => $contact['category'], '!subject' => $params['subject']), $language->language);      $message['body'][] = t("!name sent a message using the contact form at !form.", array('!name' => $params['name'], '!form' => url($_GET['q'], array('absolute' => TRUE, 'language' => $language))), $language->language);      $message['body'][] = $params['message'];      break;    case 'page_autoreply':      $contact = $params['contact'];      $message['subject'] .= t('[!category] !subject', array('!category' => $contact['category'], '!subject' => $params['subject']), $language->language);      $message['body'][] = $contact['reply'];      break;    case 'user_mail':    case 'user_copy':      $user = $params['user'];      $account = $params['account'];      $message['subject'] .= '['. variable_get('site_name', 'Drupal') .'] '. $params['subject'];      $message['body'][] = "$account->name,";      $message['body'][] = t("!name (!name-url) has sent you a message via your contact form (!form-url) at !site.", array('!name' => $user->name, '!name-url' => url("user/$user->uid", array('absolute' => TRUE, 'language' => $language)), '!form-url' => url($_GET['q'], array('absolute' => TRUE, 'language' => $language)), '!site' => variable_get('site_name', 'Drupal')), $language->language);      $message['body'][] = t("If you don't want to receive such e-mails, you can change your settings at !url.", array('!url' => url("user/$account->uid", array('absolute' => TRUE, 'language' => $language))), $language->language);      $message['body'][] = t('Message:', NULL, $language->language);      $message['body'][] = $params['message'];      break;  }}
<?php// $Id$/** * @file * Code required only when rendering the available updates report. *//** * Menu callback. Generate a page about the update status of projects. */function update_status() {  if ($available = update_get_available(TRUE)) {    module_load_include('inc', 'update', 'update.compare');    $data = update_calculate_project_data($available);    return theme('update_report', $data);  }  else {    return theme('update_report', _update_no_data());  }}/** * Theme project status report. * * @ingroup themeable */function theme_update_report($data) {  $last = variable_get('update_last_check', 0);  $output = '<div class="update checked">'. ($last ? t('Last checked: @time ago', array('@time' => format_interval(time() - $last))) : t('Last checked: never'));  $output .= ' <span class="check-manually">('. l(t('Check manually'), 'admin/reports/updates/check') .')</span>';  $output .= "</div>\n";  if (!is_array($data)) {    $output .= '<p>'. $data .'</p>';    return $output;  }  $header = array();  $rows = array();  $notification_level = variable_get('update_notification_threshold', 'all');  foreach ($data as $project) {    switch ($project['status']) {      case UPDATE_CURRENT:        $class = 'ok';        $icon = theme('image', 'misc/watchdog-ok.png', t('ok'), t('ok'));        break;      case UPDATE_UNKNOWN:      case UPDATE_NOT_FETCHED:        $class = 'unknown';        $icon = theme('image', 'misc/watchdog-warning.png', t('warning'), t('warning'));        break;      case UPDATE_NOT_SECURE:      case UPDATE_REVOKED:      case UPDATE_NOT_SUPPORTED:        $class = 'error';        $icon = theme('image', 'misc/watchdog-error.png', t('error'), t('error'));        break;      case UPDATE_NOT_CHECKED:      case UPDATE_NOT_CURRENT:      default:        $class = 'warning';        $icon = theme('image', 'misc/watchdog-warning.png', t('warning'), t('warning'));        break;    }    $row = '<div class="version-status">';    switch ($project['status']) {      case UPDATE_NOT_SECURE:        $row .= '<span class="security-error">'. t('Security update required!') .'</span>';        break;      case UPDATE_REVOKED:        $row .= '<span class="revoked">'. t('Revoked!') .'</span>';        break;      case UPDATE_NOT_SUPPORTED:        $row .= '<span class="not-supported">'. t('Not supported!') .'</span>';        break;      case UPDATE_NOT_CURRENT:        $row .= '<span class="not-current">'. t('Update available') .'</span>';        break;      case UPDATE_CURRENT:        $row .= '<span class="current">'. t('Up to date') .'</span>';        break;      default:        $row .= check_plain($project['reason']);        break;    }    $row .= '<span class="icon">'. $icon .'</span>';    $row .= "</div>\n";    $row .= '<div class="project">';    if (isset($project['title'])) {      if (isset($project['link'])) {        $row .= l($project['title'], $project['link']);      }      else {        $row .= check_plain($project['title']);      }    }    else {      $row .= check_plain($project['name']);    }    $row .= ' '. check_plain($project['existing_version']);    if ($project['install_type'] == 'dev' && !empty($project['datestamp'])) {      $row .= ' <span class="version-date">('. format_date($project['datestamp'], 'custom', 'Y-M-d') .')</span>';    }    $row .= "</div>\n";    $row .= "<div class=\"versions\">\n";    if (isset($project['recommended'])) {      if ($project['status'] != UPDATE_CURRENT || $project['existing_version'] !== $project['recommended']) {        // First, figure out what to recommend.        // If there's only 1 security update and it has the same version we're        // recommending, give it the same CSS class as if it was recommended,        // but don't print out a separate "Recommended" line for this project.        if (!empty($project['security updates']) && count($project['security updates']) == 1 && $project['security updates'][0]['version'] === $project['recommended']) {          $security_class = ' version-recommended version-recommended-strong';        }        else {          $security_class = '';          $version_class = 'version-recommended';          // Apply an extra class if we're displaying both a recommended          // version and anything else for an extra visual hint.          if ($project['recommended'] !== $project['latest_version']              || !empty($project['also'])              || ($project['install_type'] == 'dev'                 && isset($project['dev_version'])                 && $project['latest_version'] !== $project['dev_version']                 && $project['recommended'] !== $project['dev_version'])              || (isset($project['security updates'][0])                 && $project['recommended'] !== $project['security updates'][0])              ) {            $version_class .= ' version-recommended-strong';          }          $row .= theme('update_version', $project['releases'][$project['recommended']], t('Recommended version:'), $version_class);        }        // Now, print any security updates.        if (!empty($project['security updates'])) {          foreach ($project['security updates'] as $security_update) {            $row .= theme('update_version', $security_update, t('Security update:'), 'version-security'. $security_class);          }        }      }      if ($project['recommended'] !== $project['latest_version']) {        $row .= theme('update_version', $project['releases'][$project['latest_version']], t('Latest version:'), 'version-latest');      }      if ($project['install_type'] == 'dev'          && $project['status'] != UPDATE_CURRENT          && isset($project['dev_version'])          && $project['recommended'] !== $project['dev_version']) {        $row .= theme('update_version', $project['releases'][$project['dev_version']], t('Development version:'), 'version-latest');      }    }    if (isset($project['also'])) {      foreach ($project['also'] as $also) {        $row .= theme('update_version', $project['releases'][$also], t('Also available:'), 'version-also-available');      }    }    $row .= "</div>\n"; // versions div.    $row .= "<div class=\"info\">\n";    if (!empty($project['extra'])) {      $row .= '<div class="extra">'."\n";      foreach ($project['extra'] as $key => $value) {        $row .= '<div class="'. $value['class'] .'">';        $row .= check_plain($value['label']) .': ';        $row .= theme('placeholder', $value['data']);        $row .= "</div>\n";      }      $row .= "</div>\n";  // extra div.    }    $row .= '<div class="includes">';    sort($project['includes']);    $row .= t('Includes: %includes', array('%includes' => implode(', ', $project['includes'])));    $row .= "</div>\n";    if (!empty($project['base_themes'])) {      $row .= '<div class="basethemes">';      sort($project['base_themes']);      // We use !dependencies and manually call theme('placeholder') here to      // avoid breakding the D6 string freeze. This identical string is      // already in modules/system/system.admin.inc.      $row .= t('Depends on: !dependencies', array('!dependencies' => theme('placeholder', implode(', ', $project['base_themes']))));      $row .= "</div>\n";    }    if (!empty($project['sub_themes'])) {      $row .= '<div class="subthemes">';      sort($project['sub_themes']);      // We use !required and manually call theme('placeholder') here to avoid      // breakding the D6 string freeze. This identical string is already in      // modules/system/system.admin.inc.      $row .= t('Required by: !required', array('!required' => theme('placeholder', implode(', ', $project['sub_themes']))));      $row .= "</div>\n";    }    $row .= "</div>\n"; // info div.    if (!isset($rows[$project['project_type']])) {      $rows[$project['project_type']] = array();    }    $row_key = isset($project['title']) ? drupal_strtolower($project['title']) : drupal_strtolower($project['name']);    $rows[$project['project_type']][$row_key] = array(      'class' => $class,      'data' => array($row),    );  }  $project_types = array(    'core' => t('Drupal core'),    'module' => t('Modules'),    'theme' => t('Themes'),    'disabled-module' => t('Disabled modules'),    'disabled-theme' => t('Disabled themes'),  );  foreach ($project_types as $type_name => $type_label) {    if (!empty($rows[$type_name])) {      ksort($rows[$type_name]);      $output .= "\n<h3>". $type_label ."</h3>\n";      $output .= theme('table', $header, $rows[$type_name], array('class' => 'update'));    }  }  drupal_add_css(drupal_get_path('module', 'update') .'/update.css');  return $output;}/** * Theme the version display of a project. * * @ingroup themeable */function theme_update_version($version, $tag, $class) {  $output = '';  $output .= '<table class="version '. $class .'">';  $output .= '<tr>';  $output .= '<td class="version-title">'. $tag ."</td>\n";  $output .= '<td class="version-details">';  $output .= l($version['version'], $version['release_link']);  $output .= ' <span class="version-date">('. format_date($version['date'], 'custom', 'Y-M-d') .')</span>';  $output .= "</td>\n";  $output .= '<td class="version-links">';  $links = array();  $links['update-download'] = array(    'title' => t('Download'),    'href' => $version['download_link'],  );  $links['update-release-notes'] = array(    'title' => t('Release notes'),    'href' => $version['release_link'],  );  $output .= theme('links', $links);  $output .= '</td>';  $output .= '</tr>';  $output .= "</table>\n";  return $output;}
<?php// $Id$/** * @file maintenance-page.tpl.php * * This is an override of the default maintenance page. Used for Garland and * Minnelli, this file should not be moved or modified since the installation * and update pages depend on this file. * * This mirrors closely page.tpl.php for Garland in order to share the same * styles. */?><!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.0 Strict//EN"  "http://www.w3.org/TR/xhtml1/DTD/xhtml1-strict.dtd"><html xmlns="http://www.w3.org/1999/xhtml" xml:lang="<?php print $language->language ?>" lang="<?php print $language->language ?>" dir="<?php print $language->dir ?>">  <head>    <?php print $head ?>    <title><?php print $head_title ?></title>    <?php print $styles ?>    <?php print $scripts ?>    <!--[if lt IE 7]>      <?php print phptemplate_get_ie_styles(); ?>    <![endif]-->  </head>  <body<?php print phptemplate_body_class($left, $right); ?>><!-- Layout -->  <div id="header-region" class="clear-block"><?php print $header; ?></div>    <div id="wrapper">    <div id="container" class="clear-block">      <div id="header">        <div id="logo-floater">        <?php          // Prepare header          $site_fields = array();          if ($site_name) {            $site_fields[] = check_plain($site_name);          }          if ($site_slogan) {            $site_fields[] = check_plain($site_slogan);          }          $site_title = implode(' ', $site_fields);          if ($site_fields) {            $site_fields[0] = '<span>'. $site_fields[0] .'</span>';          }          $site_html = implode(' ', $site_fields);          if ($logo || $site_title) {            print '<h1><a href="'. check_url($base_path) .'" title="'. $site_title .'">';            if ($logo) {              print '<img src="'. check_url($logo) .'" alt="'. $site_title .'" id="logo" />';            }            print $site_html .'</a></h1>';          }        ?>        </div>      </div> <!-- /header -->      <?php if ($left): ?>        <div id="sidebar-left" class="sidebar">          <?php if ($search_box): ?><div class="block block-theme"><?php print $search_box ?></div><?php endif; ?>          <?php print $left ?>        </div>      <?php endif; ?>      <div id="center"><div id="squeeze"><div class="right-corner"><div class="left-corner">          <?php if ($title): print '<h2'. ($tabs ? ' class="with-tabs"' : '') .'>'. $title .'</h2>'; endif; ?>          <?php print $help; ?>          <?php print $messages; ?>          <div class="clear-block">            <?php print $content ?>          </div>          <div id="footer"><?php print $footer_message . $footer ?></div>      </div></div></div></div> <!-- /.left-corner, /.right-corner, /#squeeze, /#center -->      <?php if ($right): ?>        <div id="sidebar-right" class="sidebar">          <?php print $right ?>        </div>      <?php endif; ?>    </div> <!-- /container -->  </div><!-- /layout -->  </body></html>
<?php// $Id$/** * @file * Enables the organization of content into categories. *//** * Implementation of hook_perm(). */function taxonomy_perm() {  return array('administer taxonomy');}/** * Implementation of hook_theme() */function taxonomy_theme() {  return array(    'taxonomy_term_select' => array(      'arguments' => array('element' => NULL),    ),    'taxonomy_term_page' => array(      'arguments' => array('tids' => array(), 'result' => NULL),    ),    'taxonomy_overview_vocabularies' => array(      'arguments' => array('form' => array()),    ),    'taxonomy_overview_terms' => array(      'arguments' => array('form' => array()),    ),  );}/** * Implementation of hook_link(). * * This hook is extended with $type = 'taxonomy terms' to allow themes to * print lists of terms associated with a node. Themes can print taxonomy * links with: * * if (module_exists('taxonomy')) { *   $terms = taxonomy_link('taxonomy terms', $node); *   print theme('links', $terms); * } */function taxonomy_link($type, $node = NULL) {  if ($type == 'taxonomy terms' && $node != NULL) {    $links = array();    // If previewing, the terms must be converted to objects first.    if (isset($node->build_mode) && $node->build_mode == NODE_BUILD_PREVIEW) {      $node->taxonomy = taxonomy_preview_terms($node);    }    if (!empty($node->taxonomy)) {      foreach ($node->taxonomy as $term) {        // During preview the free tagging terms are in an array unlike the        // other terms which are objects. So we have to check if a $term        // is an object or not.        if (is_object($term)) {          $links['taxonomy_term_'. $term->tid] = array(            'title' => $term->name,            'href' => taxonomy_term_path($term),            'attributes' => array('rel' => 'tag', 'title' => strip_tags($term->description))          );        }        // Previewing free tagging terms; we don't link them because the        // term-page might not exist yet.        else {          foreach ($term as $free_typed) {            $typed_terms = drupal_explode_tags($free_typed);            foreach ($typed_terms as $typed_term) {              $links['taxonomy_preview_term_'. $typed_term] = array(                'title' => $typed_term,              );            }          }        }      }    }    // We call this hook again because some modules and themes    // call taxonomy_link('taxonomy terms') directly.    drupal_alter('link', $links, $node);    return $links;  }}/** * For vocabularies not maintained by taxonomy.module, give the maintaining * module a chance to provide a path for terms in that vocabulary. * * @param $term *   A term object. * @return *   An internal Drupal path. */function taxonomy_term_path($term) {  $vocabulary = taxonomy_vocabulary_load($term->vid);  if ($vocabulary->module != 'taxonomy' && $path = module_invoke($vocabulary->module, 'term_path', $term)) {    return $path;  }  return 'taxonomy/term/'. $term->tid;}/** * Implementation of hook_menu(). */function taxonomy_menu() {  $items['admin/content/taxonomy'] = array(    'title' => 'Taxonomy',    'description' => 'Manage tagging, categorization, and classification of your content.',    'page callback' => 'drupal_get_form',    'page arguments' => array('taxonomy_overview_vocabularies'),    'access arguments' => array('administer taxonomy'),    'file' => 'taxonomy.admin.inc',  );  $items['admin/content/taxonomy/list'] = array(    'title' => 'List',    'type' => MENU_DEFAULT_LOCAL_TASK,    'weight' => -10,  );  $items['admin/content/taxonomy/add/vocabulary'] = array(    'title' => 'Add vocabulary',    'page callback' => 'drupal_get_form',    'page arguments' => array('taxonomy_form_vocabulary'),    'access arguments' => array('administer taxonomy'),    'type' => MENU_LOCAL_TASK,    'parent' => 'admin/content/taxonomy',    'file' => 'taxonomy.admin.inc',  );  $items['admin/content/taxonomy/edit/vocabulary/%taxonomy_vocabulary'] = array(    'title' => 'Edit vocabulary',    'page callback' => 'taxonomy_admin_vocabulary_edit',    'page arguments' => array(5),    'access arguments' => array('administer taxonomy'),    'type' => MENU_CALLBACK,    'file' => 'taxonomy.admin.inc',  );  $items['admin/content/taxonomy/edit/term'] = array(    'title' => 'Edit term',    'page callback' => 'taxonomy_admin_term_edit',    'access arguments' => array('administer taxonomy'),    'type' => MENU_CALLBACK,    'file' => 'taxonomy.admin.inc',  );  $items['taxonomy/term/%'] = array(    'title' => 'Taxonomy term',    'page callback' => 'taxonomy_term_page',    'page arguments' => array(2),    'access arguments' => array('access content'),    'type' => MENU_CALLBACK,    'file' => 'taxonomy.pages.inc',  );  $items['taxonomy/autocomplete'] = array(    'title' => 'Autocomplete taxonomy',    'page callback' => 'taxonomy_autocomplete',    'access arguments' => array('access content'),    'type' => MENU_CALLBACK,    'file' => 'taxonomy.pages.inc',  );  $items['admin/content/taxonomy/%taxonomy_vocabulary'] = array(    'title' => 'List terms',    'page callback' => 'drupal_get_form',    'page arguments' => array('taxonomy_overview_terms', 3),    'access arguments' => array('administer taxonomy'),    'type' => MENU_CALLBACK,    'file' => 'taxonomy.admin.inc',  );  $items['admin/content/taxonomy/%taxonomy_vocabulary/list'] = array(    'title' => 'List',    'type' => MENU_DEFAULT_LOCAL_TASK,    'weight' => -10,  );  $items['admin/content/taxonomy/%taxonomy_vocabulary/add/term'] = array(    'title' => 'Add term',    'page callback' => 'taxonomy_add_term_page',    'page arguments' => array(3),    'access arguments' => array('administer taxonomy'),    'type' => MENU_LOCAL_TASK,    'parent' => 'admin/content/taxonomy/%taxonomy_vocabulary',    'file' => 'taxonomy.admin.inc',  );  return $items;}function taxonomy_save_vocabulary(&$edit) {  $edit['nodes'] = empty($edit['nodes']) ? array() : $edit['nodes'];  if (!isset($edit['module'])) {    $edit['module'] = 'taxonomy';  }  if (!empty($edit['vid']) && !empty($edit['name'])) {    drupal_write_record('vocabulary', $edit, 'vid');    db_query("DELETE FROM {vocabulary_node_types} WHERE vid = %d", $edit['vid']);    foreach ($edit['nodes'] as $type => $selected) {      db_query("INSERT INTO {vocabulary_node_types} (vid, type) VALUES (%d, '%s')", $edit['vid'], $type);    }    module_invoke_all('taxonomy', 'update', 'vocabulary', $edit);    $status = SAVED_UPDATED;  }  else if (!empty($edit['vid'])) {    $status = taxonomy_del_vocabulary($edit['vid']);  }  else {    drupal_write_record('vocabulary', $edit);    foreach ($edit['nodes'] as $type => $selected) {      db_query("INSERT INTO {vocabulary_node_types} (vid, type) VALUES (%d, '%s')", $edit['vid'], $type);    }    module_invoke_all('taxonomy', 'insert', 'vocabulary', $edit);    $status = SAVED_NEW;  }  cache_clear_all();  return $status;}/** * Delete a vocabulary. * * @param $vid *   A vocabulary ID. * @return *   Constant indicating items were deleted. */function taxonomy_del_vocabulary($vid) {  $vocabulary = (array) taxonomy_vocabulary_load($vid);  db_query('DELETE FROM {vocabulary} WHERE vid = %d', $vid);  db_query('DELETE FROM {vocabulary_node_types} WHERE vid = %d', $vid);  $result = db_query('SELECT tid FROM {term_data} WHERE vid = %d', $vid);  while ($term = db_fetch_object($result)) {    taxonomy_del_term($term->tid);  }  module_invoke_all('taxonomy', 'delete', 'vocabulary', $vocabulary);  cache_clear_all();  return SAVED_DELETED;}/** * Dynamically check and update the hierarachy flag of a vocabulary. * * Checks the current parents of all terms in a vocabulary and updates the * vocabularies hierarchy setting to the lowest possible level. A hierarchy with * no parents in any of its terms will be given a hierarchy of 0. If terms * contain at most a single parent, the vocabulary will be given a hierarchy of * 1. If any term contain multiple parents, the vocabulary will be given a * hieararchy of 2. * * @param $vocabulary *   An array of the vocabulary structure. * @param $changed_term *   An array of the term structure that was updated. */function taxonomy_check_vocabulary_hierarchy($vocabulary, $changed_term) {  $tree = taxonomy_get_tree($vocabulary['vid']);  $hierarchy = 0;  foreach ($tree as $term) {    // Update the changed term with the new parent value before comparision.    if ($term->tid == $changed_term['tid']) {      $term = (object)$changed_term;      $term->parents = $term->parent;    }    // Check this term's parent count.    if (count($term->parents) > 1) {      $hierarchy = 2;      break;    }    elseif (count($term->parents) == 1 && 0 !== array_shift($term->parents)) {      $hierarchy = 1;    }  }  if ($hierarchy != $vocabulary['hierarchy']) {    $vocabulary['hierarchy'] = $hierarchy;    taxonomy_save_vocabulary($vocabulary);  }  return $hierarchy;}/** * Helper function for taxonomy_form_term_submit(). * * @param $form_state['values'] * @return *   Status constant indicating if term was inserted or updated. */function taxonomy_save_term(&$form_values) {  $form_values += array(    'description' => '',    'weight' => 0  );  if (!empty($form_values['tid']) && $form_values['name']) {    drupal_write_record('term_data', $form_values, 'tid');    $hook = 'update';    $status = SAVED_UPDATED;  }  else if (!empty($form_values['tid'])) {    return taxonomy_del_term($form_values['tid']);  }  else {    drupal_write_record('term_data', $form_values);    $hook = 'insert';    $status = SAVED_NEW;  }  db_query('DELETE FROM {term_relation} WHERE tid1 = %d OR tid2 = %d', $form_values['tid'], $form_values['tid']);  if (!empty($form_values['relations'])) {    foreach ($form_values['relations'] as $related_id) {      if ($related_id != 0) {        db_query('INSERT INTO {term_relation} (tid1, tid2) VALUES (%d, %d)', $form_values['tid'], $related_id);      }    }  }  db_query('DELETE FROM {term_hierarchy} WHERE tid = %d', $form_values['tid']);  if (!isset($form_values['parent']) || empty($form_values['parent'])) {    $form_values['parent'] = array(0);  }  if (is_array($form_values['parent'])) {    foreach ($form_values['parent'] as $parent) {      if (is_array($parent)) {        foreach ($parent as $tid) {          db_query('INSERT INTO {term_hierarchy} (tid, parent) VALUES (%d, %d)', $form_values['tid'], $tid);        }      }      else {        db_query('INSERT INTO {term_hierarchy} (tid, parent) VALUES (%d, %d)', $form_values['tid'], $parent);      }    }  }  else {    db_query('INSERT INTO {term_hierarchy} (tid, parent) VALUES (%d, %d)', $form_values['tid'], $form_values['parent']);  }  db_query('DELETE FROM {term_synonym} WHERE tid = %d', $form_values['tid']);  if (!empty($form_values['synonyms'])) {    foreach (explode ("\n", str_replace("\r", '', $form_values['synonyms'])) as $synonym) {      if ($synonym) {        db_query("INSERT INTO {term_synonym} (tid, name) VALUES (%d, '%s')", $form_values['tid'], chop($synonym));      }    }  }  if (isset($hook)) {    module_invoke_all('taxonomy', $hook, 'term', $form_values);  }  cache_clear_all();  return $status;}/** * Delete a term. * * @param $tid *   The term ID. * @return *   Status constant indicating deletion. */function taxonomy_del_term($tid) {  $tids = array($tid);  while ($tids) {    $children_tids = $orphans = array();    foreach ($tids as $tid) {      // See if any of the term's children are about to be become orphans:      if ($children = taxonomy_get_children($tid)) {        foreach ($children as $child) {          // If the term has multiple parents, we don't delete it.          $parents = taxonomy_get_parents($child->tid);          if (count($parents) == 1) {            $orphans[] = $child->tid;          }        }      }      $term = (array) taxonomy_get_term($tid);      db_query('DELETE FROM {term_data} WHERE tid = %d', $tid);      db_query('DELETE FROM {term_hierarchy} WHERE tid = %d', $tid);      db_query('DELETE FROM {term_relation} WHERE tid1 = %d OR tid2 = %d', $tid, $tid);      db_query('DELETE FROM {term_synonym} WHERE tid = %d', $tid);      db_query('DELETE FROM {term_node} WHERE tid = %d', $tid);      module_invoke_all('taxonomy', 'delete', 'term', $term);    }    $tids = $orphans;  }  cache_clear_all();  return SAVED_DELETED;}/** * Generate a form element for selecting terms from a vocabulary. */function taxonomy_form($vid, $value = 0, $help = NULL, $name = 'taxonomy') {  $vocabulary = taxonomy_vocabulary_load($vid);  $help = ($help) ? $help : filter_xss_admin($vocabulary->help);  if (!$vocabulary->multiple) {    $blank = ($vocabulary->required) ? t('- Please choose -') : t('- None selected -');  }  else {    $blank = ($vocabulary->required) ? 0 : t('- None -');  }  return _taxonomy_term_select(check_plain($vocabulary->name), $name, $value, $vid, $help, intval($vocabulary->multiple), $blank);}/** * Generate a set of options for selecting a term from all vocabularies. */function taxonomy_form_all($free_tags = 0) {  $vocabularies = taxonomy_get_vocabularies();  $options = array();  foreach ($vocabularies as $vid => $vocabulary) {    if ($vocabulary->tags && !$free_tags) { continue; }    $tree = taxonomy_get_tree($vid);    if ($tree && (count($tree) > 0)) {      $options[$vocabulary->name] = array();      foreach ($tree as $term) {        $options[$vocabulary->name][$term->tid] = str_repeat('-', $term->depth) . $term->name;      }    }  }  return $options;}/** * Return an array of all vocabulary objects. * * @param $type *   If set, return only those vocabularies associated with this node type. */function taxonomy_get_vocabularies($type = NULL) {  if ($type) {    $result = db_query(db_rewrite_sql("SELECT v.vid, v.*, n.type FROM {vocabulary} v LEFT JOIN {vocabulary_node_types} n ON v.vid = n.vid WHERE n.type = '%s' ORDER BY v.weight, v.name", 'v', 'vid'), $type);  }  else {    $result = db_query(db_rewrite_sql('SELECT v.*, n.type FROM {vocabulary} v LEFT JOIN {vocabulary_node_types} n ON v.vid = n.vid ORDER BY v.weight, v.name', 'v', 'vid'));  }  $vocabularies = array();  $node_types = array();  while ($voc = db_fetch_object($result)) {    // If no node types are associated with a vocabulary, the LEFT JOIN will    // return a NULL value for type.    if (isset($voc->type)) {      $node_types[$voc->vid][$voc->type] = $voc->type;      unset($voc->type);      $voc->nodes = $node_types[$voc->vid];    }    elseif (!isset($voc->nodes)) {      $voc->nodes = array();    }    $vocabularies[$voc->vid] = $voc;  }  return $vocabularies;}/** * Implementation of hook_form_alter(). * Generate a form for selecting terms to associate with a node. * We check for taxonomy_override_selector before loading the full * vocabulary, so contrib modules can intercept before hook_form_alter *  and provide scalable alternatives. */function taxonomy_form_alter(&$form, $form_state, $form_id) {  if (isset($form['type']) && isset($form['#node']) && (!variable_get('taxonomy_override_selector', FALSE)) && $form['type']['#value'] .'_node_form' == $form_id) {    $node = $form['#node'];    if (!isset($node->taxonomy)) {      $terms = empty($node->nid) ? array() : taxonomy_node_get_terms($node);    }    else {      // After preview the terms must be converted to objects.      if (isset($form_state['node_preview'])) {        $node->taxonomy = taxonomy_preview_terms($node);      }      $terms = $node->taxonomy;    }    $c = db_query(db_rewrite_sql("SELECT v.* FROM {vocabulary} v INNER JOIN {vocabulary_node_types} n ON v.vid = n.vid WHERE n.type = '%s' ORDER BY v.weight, v.name", 'v', 'vid'), $node->type);    while ($vocabulary = db_fetch_object($c)) {      if ($vocabulary->tags) {        if (isset($form_state['node_preview'])) {          // Typed string can be changed by the user before preview,          // so we just insert the tags directly as provided in the form.          $typed_string = $node->taxonomy['tags'][$vocabulary->vid];        }        else {          $typed_string = taxonomy_implode_tags($terms, $vocabulary->vid) . (array_key_exists('tags', $terms) ? $terms['tags'][$vocabulary->vid] : NULL);        }        if ($vocabulary->help) {          $help = filter_xss_admin($vocabulary->help);        }        else {          $help = t('A comma-separated list of terms describing this content. Example: funny, bungee jumping, "Company, Inc.".');        }        $form['taxonomy']['tags'][$vocabulary->vid] = array('#type' => 'textfield',          '#title' => $vocabulary->name,          '#description' => $help,          '#required' => $vocabulary->required,          '#default_value' => $typed_string,          '#autocomplete_path' => 'taxonomy/autocomplete/'. $vocabulary->vid,          '#weight' => $vocabulary->weight,          '#maxlength' => 1024,        );      }      else {        // Extract terms belonging to the vocabulary in question.        $default_terms = array();        foreach ($terms as $term) {          // Free tagging has no default terms and also no vid after preview.          if (isset($term->vid) && $term->vid == $vocabulary->vid) {            $default_terms[$term->tid] = $term;          }        }        $form['taxonomy'][$vocabulary->vid] = taxonomy_form($vocabulary->vid, array_keys($default_terms), filter_xss_admin($vocabulary->help));        $form['taxonomy'][$vocabulary->vid]['#weight'] = $vocabulary->weight;        $form['taxonomy'][$vocabulary->vid]['#required'] = $vocabulary->required;      }    }    if (!empty($form['taxonomy']) && is_array($form['taxonomy'])) {      if (count($form['taxonomy']) > 1) {        // Add fieldset only if form has more than 1 element.        $form['taxonomy'] += array(          '#type' => 'fieldset',          '#title' => t('Vocabularies'),          '#collapsible' => TRUE,          '#collapsed' => FALSE,        );      }      $form['taxonomy']['#weight'] = -3;      $form['taxonomy']['#tree'] = TRUE;    }  }}/** * Helper function to convert terms after a preview. * * After preview the tags are an array instead of proper objects. This function * converts them back to objects with the exception of 'free tagging' terms, * because new tags can be added by the user before preview and those do not * yet exist in the database. We therefore save those tags as a string so * we can fill the form again after the preview. */function taxonomy_preview_terms($node) {  $taxonomy = array();  if (isset($node->taxonomy)) {    foreach ($node->taxonomy as $key => $term) {      unset($node->taxonomy[$key]);      // A 'Multiple select' and a 'Free tagging' field returns an array.      if (is_array($term)) {        foreach ($term as $tid) {          if ($key == 'tags') {            // Free tagging; the values will be saved for later as strings            // instead of objects to fill the form again.            $taxonomy['tags'] = $term;          }          else {            $taxonomy[$tid] = taxonomy_get_term($tid);          }        }      }      // A 'Single select' field returns the term id.      elseif ($term) {        $taxonomy[$term] = taxonomy_get_term($term);      }    }  }  return $taxonomy;}/** * Find all terms associated with the given node, within one vocabulary. */function taxonomy_node_get_terms_by_vocabulary($node, $vid, $key = 'tid') {  $result = db_query(db_rewrite_sql('SELECT t.tid, t.* FROM {term_data} t INNER JOIN {term_node} r ON r.tid = t.tid WHERE t.vid = %d AND r.vid = %d ORDER BY weight', 't', 'tid'), $vid, $node->vid);  $terms = array();  while ($term = db_fetch_object($result)) {    $terms[$term->$key] = $term;  }  return $terms;}/** * Find all terms associated with the given node, ordered by vocabulary and term weight. */function taxonomy_node_get_terms($node, $key = 'tid') {  static $terms;  if (!isset($terms[$node->vid][$key])) {    $result = db_query(db_rewrite_sql('SELECT t.* FROM {term_node} r INNER JOIN {term_data} t ON r.tid = t.tid INNER JOIN {vocabulary} v ON t.vid = v.vid WHERE r.vid = %d ORDER BY v.weight, t.weight, t.name', 't', 'tid'), $node->vid);    $terms[$node->vid][$key] = array();    while ($term = db_fetch_object($result)) {      $terms[$node->vid][$key][$term->$key] = $term;    }  }  return $terms[$node->vid][$key];}/** * Make sure incoming vids are free tagging enabled. */function taxonomy_node_validate(&$node) {  if (!empty($node->taxonomy)) {    $terms = $node->taxonomy;    if (!empty($terms['tags'])) {      foreach ($terms['tags'] as $vid => $vid_value) {        $vocabulary = taxonomy_vocabulary_load($vid);        if (empty($vocabulary->tags)) {          // see form_get_error $key = implode('][', $element['#parents']);          // on why this is the key          form_set_error("taxonomy][tags][$vid", t('The %name vocabulary can not be modified in this way.', array('%name' => $vocabulary->name)));        }      }    }  }}/** * Save term associations for a given node. */function taxonomy_node_save($node, $terms) {  taxonomy_node_delete_revision($node);  // Free tagging vocabularies do not send their tids in the form,  // so we'll detect them here and process them independently.  if (isset($terms['tags'])) {    $typed_input = $terms['tags'];    unset($terms['tags']);    foreach ($typed_input as $vid => $vid_value) {      $typed_terms = drupal_explode_tags($vid_value);      $inserted = array();      foreach ($typed_terms as $typed_term) {        // See if the term exists in the chosen vocabulary        // and return the tid; otherwise, add a new record.        $possibilities = taxonomy_get_term_by_name($typed_term);        $typed_term_tid = NULL; // tid match, if any.        foreach ($possibilities as $possibility) {          if ($possibility->vid == $vid) {            $typed_term_tid = $possibility->tid;          }        }        if (!$typed_term_tid) {          $edit = array('vid' => $vid, 'name' => $typed_term);          $status = taxonomy_save_term($edit);          $typed_term_tid = $edit['tid'];        }        // Defend against duplicate, differently cased tags        if (!isset($inserted[$typed_term_tid])) {          db_query('INSERT INTO {term_node} (nid, vid, tid) VALUES (%d, %d, %d)', $node->nid, $node->vid, $typed_term_tid);          $inserted[$typed_term_tid] = TRUE;        }      }    }  }  if (is_array($terms)) {    foreach ($terms as $term) {      if (is_array($term)) {        foreach ($term as $tid) {          if ($tid) {            db_query('INSERT INTO {term_node} (nid, vid, tid) VALUES (%d, %d, %d)', $node->nid, $node->vid, $tid);          }        }      }      else if (is_object($term)) {        db_query('INSERT INTO {term_node} (nid, vid, tid) VALUES (%d, %d, %d)', $node->nid, $node->vid, $term->tid);      }      else if ($term) {        db_query('INSERT INTO {term_node} (nid, vid, tid) VALUES (%d, %d, %d)', $node->nid, $node->vid, $term);      }    }  }}/** * Remove associations of a node to its terms. */function taxonomy_node_delete($node) {  db_query('DELETE FROM {term_node} WHERE nid = %d', $node->nid);}/** * Remove associations of a node to its terms. */function taxonomy_node_delete_revision($node) {  db_query('DELETE FROM {term_node} WHERE vid = %d', $node->vid);}/** * Implementation of hook_node_type(). */function taxonomy_node_type($op, $info) {  if ($op == 'update' && !empty($info->old_type) && $info->type != $info->old_type) {    db_query("UPDATE {vocabulary_node_types} SET type = '%s' WHERE type = '%s'", $info->type, $info->old_type);  }  elseif ($op == 'delete') {    db_query("DELETE FROM {vocabulary_node_types} WHERE type = '%s'", $info->type);  }}/** * Find all term objects related to a given term ID. */function taxonomy_get_related($tid, $key = 'tid') {  if ($tid) {    $result = db_query('SELECT t.*, tid1, tid2 FROM {term_relation}, {term_data} t WHERE (t.tid = tid1 OR t.tid = tid2) AND (tid1 = %d OR tid2 = %d) AND t.tid != %d ORDER BY weight, name', $tid, $tid, $tid);    $related = array();    while ($term = db_fetch_object($result)) {      $related[$term->$key] = $term;    }    return $related;  }  else {    return array();  }}/** * Find all parents of a given term ID. */function taxonomy_get_parents($tid, $key = 'tid') {  if ($tid) {    $result = db_query(db_rewrite_sql('SELECT t.tid, t.* FROM {term_data} t INNER JOIN {term_hierarchy} h ON h.parent = t.tid WHERE h.tid = %d ORDER BY weight, name', 't', 'tid'), $tid);    $parents = array();    while ($parent = db_fetch_object($result)) {      $parents[$parent->$key] = $parent;    }    return $parents;  }  else {    return array();  }}/** * Find all ancestors of a given term ID. */function taxonomy_get_parents_all($tid) {  $parents = array();  if ($tid) {    $parents[] = taxonomy_get_term($tid);    $n = 0;    while ($parent = taxonomy_get_parents($parents[$n]->tid)) {      $parents = array_merge($parents, $parent);      $n++;    }  }  return $parents;}/** * Find all children of a term ID. */function taxonomy_get_children($tid, $vid = 0, $key = 'tid') {  if ($vid) {    $result = db_query(db_rewrite_sql('SELECT t.* FROM {term_data} t INNER JOIN {term_hierarchy} h ON h.tid = t.tid WHERE t.vid = %d AND h.parent = %d ORDER BY weight, name', 't', 'tid'), $vid, $tid);  }  else {    $result = db_query(db_rewrite_sql('SELECT t.* FROM {term_data} t INNER JOIN {term_hierarchy} h ON h.tid = t.tid WHERE parent = %d ORDER BY weight, name', 't', 'tid'), $tid);  }  $children = array();  while ($term = db_fetch_object($result)) {    $children[$term->$key] = $term;  }  return $children;}/** * Create a hierarchical representation of a vocabulary. * * @param $vid *   Which vocabulary to generate the tree for. * * @param $parent *   The term ID under which to generate the tree. If 0, generate the tree *   for the entire vocabulary. * * @param $depth *   Internal use only. * * @param $max_depth *   The number of levels of the tree to return. Leave NULL to return all levels. * * @return *   An array of all term objects in the tree. Each term object is extended *   to have "depth" and "parents" attributes in addition to its normal ones. *   Results are statically cached. */function taxonomy_get_tree($vid, $parent = 0, $depth = -1, $max_depth = NULL) {  static $children, $parents, $terms;  $depth++;  // We cache trees, so it's not CPU-intensive to call get_tree() on a term  // and its children, too.  if (!isset($children[$vid])) {    $children[$vid] = array();    $result = db_query(db_rewrite_sql('SELECT t.tid, t.*, parent FROM {term_data} t INNER JOIN {term_hierarchy} h ON t.tid = h.tid WHERE t.vid = %d ORDER BY weight, name', 't', 'tid'), $vid);    while ($term = db_fetch_object($result)) {      $children[$vid][$term->parent][] = $term->tid;      $parents[$vid][$term->tid][] = $term->parent;      $terms[$vid][$term->tid] = $term;    }  }  $max_depth = (is_null($max_depth)) ? count($children[$vid]) : $max_depth;  $tree = array();  if ($max_depth > $depth && !empty($children[$vid][$parent])) {    foreach ($children[$vid][$parent] as $child) {      $term = drupal_clone($terms[$vid][$child]);      $term->depth = $depth;      // The "parent" attribute is not useful, as it would show one parent only.      unset($term->parent);      $term->parents = $parents[$vid][$child];      $tree[] = $term;      if (!empty($children[$vid][$child])) {        $tree = array_merge($tree, taxonomy_get_tree($vid, $child, $depth, $max_depth));      }    }  }  return $tree;}/** * Return an array of synonyms of the given term ID. */function taxonomy_get_synonyms($tid) {  if ($tid) {    $synonyms = array();    $result = db_query('SELECT name FROM {term_synonym} WHERE tid = %d', $tid);    while ($synonym = db_fetch_array($result)) {      $synonyms[] = $synonym['name'];    }    return $synonyms;  }  else {    return array();  }}/** * Return the term object that has the given string as a synonym. */function taxonomy_get_synonym_root($synonym) {  return db_fetch_object(db_query("SELECT * FROM {term_synonym} s, {term_data} t WHERE t.tid = s.tid AND s.name = '%s'", $synonym));}/** * Count the number of published nodes classified by a term. * * @param $tid *   The term's ID * * @param $type *   The $node->type. If given, taxonomy_term_count_nodes only counts *   nodes of $type that are classified with the term $tid. * * @return int *   An integer representing a number of nodes. *   Results are statically cached. */function taxonomy_term_count_nodes($tid, $type = 0) {  static $count;  if (!isset($count[$type])) {    // $type == 0 always evaluates TRUE if $type is a string    if (is_numeric($type)) {      $result = db_query(db_rewrite_sql('SELECT t.tid, COUNT(n.nid) AS c FROM {term_node} t INNER JOIN {node} n ON t.vid = n.vid WHERE n.status = 1 GROUP BY t.tid'));    }    else {      $result = db_query(db_rewrite_sql("SELECT t.tid, COUNT(n.nid) AS c FROM {term_node} t INNER JOIN {node} n ON t.vid = n.vid WHERE n.status = 1 AND n.type = '%s' GROUP BY t.tid"), $type);    }    $count[$type] = array();    while ($term = db_fetch_object($result)) {      $count[$type][$term->tid] = $term->c;    }  }  $children_count = 0;  foreach (_taxonomy_term_children($tid) as $c) {    $children_count += taxonomy_term_count_nodes($c, $type);  }  return $children_count + (isset($count[$type][$tid]) ? $count[$type][$tid] : 0);}/** * Helper for taxonomy_term_count_nodes(). Used to find out * which terms are children of a parent term. * * @param $tid *   The parent term's ID * * @return array *   An array of term IDs representing the children of $tid. *   Results are statically cached. * */function _taxonomy_term_children($tid) {  static $children;  if (!isset($children)) {    $result = db_query('SELECT tid, parent FROM {term_hierarchy}');    while ($term = db_fetch_object($result)) {      $children[$term->parent][] = $term->tid;    }  }  return isset($children[$tid]) ? $children[$tid] : array();}/** * Try to map a string to an existing term, as for glossary use. * * Provides a case-insensitive and trimmed mapping, to maximize the * likelihood of a successful match. * * @param name *   Name of the term to search for. * * @return *   An array of matching term objects. */function taxonomy_get_term_by_name($name) {  $db_result = db_query(db_rewrite_sql("SELECT t.tid, t.* FROM {term_data} t WHERE LOWER(t.name) = LOWER('%s')", 't', 'tid'), trim($name));  $result = array();  while ($term = db_fetch_object($db_result)) {    $result[] = $term;  }  return $result;}/** * Return the vocabulary object matching a vocabulary ID. * * @param $vid *   The vocabulary's ID * @param $reset *   Whether to reset the internal taxonomy_vocabulary_load cache. * * @return *   The vocabulary object with all of its metadata, if exists, FALSE otherwise. *   Results are statically cached. */function taxonomy_vocabulary_load($vid, $reset = FALSE) {  static $vocabularies = array();  if ($reset) {    $vocabularies = array();  }  if (!isset($vocabularies[$vid])) {    // Initialize so if this vocabulary does not exist, we have    // that cached, and we will not try to load this later.    $vocabularies[$vid] = FALSE;    // Try to load the data and fill up the object.    $result = db_query('SELECT v.*, n.type FROM {vocabulary} v LEFT JOIN {vocabulary_node_types} n ON v.vid = n.vid WHERE v.vid = %d', $vid);    $node_types = array();    while ($voc = db_fetch_object($result)) {      if (!empty($voc->type)) {        $node_types[$voc->type] = $voc->type;      }      unset($voc->type);      $voc->nodes = $node_types;      $vocabularies[$vid] = $voc;    }  }  // Return FALSE if this vocabulary does not exist.  return !empty($vocabularies[$vid]) ? $vocabularies[$vid] : FALSE;}/** * Return the term object matching a term ID. * * @param $tid *   A term's ID * @param $reset *   Whether to reset the internal taxonomy_get_term cache. * * @return Object *   A term object. Results are statically cached. */function taxonomy_get_term($tid, $reset = FALSE) {  static $terms = array();  if ($reset) {    $terms = array();  }  if (!isset($terms[$tid])) {    $terms[$tid] = db_fetch_object(db_query('SELECT * FROM {term_data} WHERE tid = %d', $tid));  }  return $terms[$tid];}/** * Create a select form element for a given taxonomy vocabulary. * * NOTE: This function expects input that has already been sanitized and is * safe for display. Callers must properly sanitize the $title and * $description arguments to prevent XSS vulnerabilities. * * @param $title *   The title of the vocabulary. This MUST be sanitized by the caller. * @param $name *   Ignored. * @param $value *   The currently selected terms from this vocabulary, if any. * @param $vocabulary_id *   The vocabulary ID to build the form element for. * @param $description *   Help text for the form element. This MUST be sanitized by the caller. * @param $multiple *   Boolean to control if the form should use a single or multiple select. * @param $blank *   Optional form choice to use when no value has been selected. * @param $exclude *   Optional array of term ids to exclude in the selector. * @return *   A FAPI form array to select terms from the given vocabulary. * * @see taxonomy_form() * @see taxonomy_form_term() */function _taxonomy_term_select($title, $name, $value, $vocabulary_id, $description, $multiple, $blank, $exclude = array()) {  $tree = taxonomy_get_tree($vocabulary_id);  $options = array();  if ($blank) {    $options[''] = $blank;  }  if ($tree) {    foreach ($tree as $term) {      if (!in_array($term->tid, $exclude)) {        $choice = new stdClass();        $choice->option = array($term->tid => str_repeat('-', $term->depth) . $term->name);        $options[] = $choice;      }    }  }  return array('#type' => 'select',    '#title' => $title,    '#default_value' => $value,    '#options' => $options,    '#description' => $description,    '#multiple' => $multiple,    '#size' => $multiple ? min(9, count($options)) : 0,    '#weight' => -15,    '#theme' => 'taxonomy_term_select',  );}/** * Format the selection field for choosing terms * (by deafult the default selection field is used). * * @ingroup themeable */function theme_taxonomy_term_select($element) {  return theme('select', $element);}/** * Finds all nodes that match selected taxonomy conditions. * * @param $tids *   An array of term IDs to match. * @param $operator *   How to interpret multiple IDs in the array. Can be "or" or "and". * @param $depth *   How many levels deep to traverse the taxonomy tree. Can be a nonnegative *   integer or "all". * @param $pager *   Whether the nodes are to be used with a pager (the case on most Drupal *   pages) or not (in an XML feed, for example). * @param $order *   The order clause for the query that retrieve the nodes. * @return *   A resource identifier pointing to the query results. */function taxonomy_select_nodes($tids = array(), $operator = 'or', $depth = 0, $pager = TRUE, $order = 'n.sticky DESC, n.created DESC') {  if (count($tids) > 0) {    // For each term ID, generate an array of descendant term IDs to the right depth.    $descendant_tids = array();    if ($depth === 'all') {      $depth = NULL;    }    foreach ($tids as $index => $tid) {      $term = taxonomy_get_term($tid);      $tree = taxonomy_get_tree($term->vid, $tid, -1, $depth);      $descendant_tids[] = array_merge(array($tid), array_map('_taxonomy_get_tid_from_term', $tree));    }    if ($operator == 'or') {      $args = call_user_func_array('array_merge', $descendant_tids);      $placeholders = db_placeholders($args, 'int');      $sql = 'SELECT DISTINCT(n.nid), n.sticky, n.title, n.created FROM {node} n INNER JOIN {term_node} tn ON n.vid = tn.vid WHERE tn.tid IN ('. $placeholders .') AND n.status = 1 ORDER BY '. $order;      $sql_count = 'SELECT COUNT(DISTINCT(n.nid)) FROM {node} n INNER JOIN {term_node} tn ON n.vid = tn.vid WHERE tn.tid IN ('. $placeholders .') AND n.status = 1';    }    else {      $joins = '';      $wheres = '';      $args = array();      foreach ($descendant_tids as $index => $tids) {        $joins .= ' INNER JOIN {term_node} tn'. $index .' ON n.vid = tn'. $index .'.vid';        $wheres .= ' AND tn'. $index .'.tid IN ('. db_placeholders($tids, 'int') .')';        $args = array_merge($args, $tids);      }      $sql = 'SELECT DISTINCT(n.nid), n.sticky, n.title, n.created FROM {node} n '. $joins .' WHERE n.status = 1 '. $wheres .' ORDER BY '. $order;      $sql_count = 'SELECT COUNT(DISTINCT(n.nid)) FROM {node} n '. $joins .' WHERE n.status = 1 '. $wheres;    }    $sql = db_rewrite_sql($sql);    $sql_count = db_rewrite_sql($sql_count);    if ($pager) {      $result = pager_query($sql, variable_get('default_nodes_main', 10), 0, $sql_count, $args);    }    else {      $result = db_query_range($sql, $args, 0, variable_get('feed_default_items', 10));    }  }  return $result;}/** * Accepts the result of a pager_query() call, such as that performed by * taxonomy_select_nodes(), and formats each node along with a pager. */function taxonomy_render_nodes($result) {  $output = '';  $has_rows = FALSE;  while ($node = db_fetch_object($result)) {    $output .= node_view(node_load($node->nid), 1);    $has_rows = TRUE;  }  if ($has_rows) {    $output .= theme('pager', NULL, variable_get('default_nodes_main', 10), 0);  }  else {    $output .= '<p>'. t('There are currently no posts in this category.') .'</p>';  }  return $output;}/** * Implementation of hook_nodeapi(). */function taxonomy_nodeapi($node, $op, $arg = 0) {  switch ($op) {    case 'load':      $output['taxonomy'] = taxonomy_node_get_terms($node);      return $output;    case 'insert':      if (!empty($node->taxonomy)) {        taxonomy_node_save($node, $node->taxonomy);      }      break;    case 'update':      if (!empty($node->taxonomy)) {        taxonomy_node_save($node, $node->taxonomy);      }      break;    case 'delete':      taxonomy_node_delete($node);      break;    case 'delete revision':      taxonomy_node_delete_revision($node);      break;    case 'validate':      taxonomy_node_validate($node);      break;    case 'rss item':      return taxonomy_rss_item($node);    case 'update index':      return taxonomy_node_update_index($node);  }}/** * Implementation of hook_nodeapi('update_index'). */function taxonomy_node_update_index(&$node) {  $output = array();  foreach ($node->taxonomy as $term) {    $output[] = $term->name;  }  if (count($output)) {    return '<strong>('. implode(', ', $output) .')</strong>';  }}/** * Parses a comma or plus separated string of term IDs. * * @param $str_tids *   A string of term IDs, separated by plus or comma. *   comma (,) means AND *   plus (+) means OR * * @return an associative array with an operator key (either 'and' *   or 'or') and a tid key containing an array of the term ids. */function taxonomy_terms_parse_string($str_tids) {  $terms = array('operator' => '', 'tids' => array());  if (preg_match('/^([0-9]+[+ ])+[0-9]+$/', $str_tids)) {    $terms['operator'] = 'or';    // The '+' character in a query string may be parsed as ' '.    $terms['tids'] = preg_split('/[+ ]/', $str_tids);  }  else if (preg_match('/^([0-9]+,)*[0-9]+$/', $str_tids)) {    $terms['operator'] = 'and';    $terms['tids'] = explode(',', $str_tids);  }  return $terms;}/** * Provides category information for RSS feeds. */function taxonomy_rss_item($node) {  $output = array();  foreach ($node->taxonomy as $term) {    $output[] = array('key'   => 'category',                      'value' => $term->name,                      'attributes' => array('domain' => url('taxonomy/term/'. $term->tid, array('absolute' => TRUE))));  }  return $output;}/** * Implementation of hook_help(). */function taxonomy_help($path, $arg) {  switch ($path) {    case 'admin/help#taxonomy':      $output = '<p>'. t('The taxonomy module allows you to categorize content using various systems of classification. Free-tagging vocabularies are created by users on the fly when they submit posts (as commonly found in blogs and social bookmarking applications). Controlled vocabularies allow for administrator-defined short lists of terms as well as complex hierarchies with multiple relationships between different terms. These methods can be applied to different content types and combined together to create a powerful and flexible method of classifying and presenting your content.') .'</p>';      $output .= '<p>'. t('For example, when creating a recipe site, you might want to classify posts by both the type of meal and preparation time. A vocabulary for each allows you to categorize using each criteria independently instead of creating a tag for every possible combination.') .'</p>';      $output .= '<p>'. t('Type of Meal: <em>Appetizer, Main Course, Salad, Dessert</em>') .'</p>';      $output .= '<p>'. t('Preparation Time: <em>0-30mins, 30-60mins, 1-2 hrs, 2hrs+</em>') .'</p>';      $output .= '<p>'. t("Each taxonomy term (often called a 'category' or 'tag' in other systems) automatically provides lists of posts and a corresponding RSS feed. These taxonomy/term URLs can be manipulated to generate AND and OR lists of posts classified with terms. In our recipe site example, it then becomes easy to create pages displaying 'Main courses', '30 minute recipes', or '30 minute main courses and appetizers' by using terms on their own or in combination with others. There are a significant number of contributed modules which you to alter and extend the behavior of the core module for both display and organization of terms.") .'</p>';      $output .= '<p>'. t("Terms can also be organized in parent/child relationships from the admin interface. An example would be a vocabulary grouping countries under their parent geo-political regions. The taxonomy module also enables advanced implementations of hierarchy, for example placing Turkey in both the 'Middle East' and 'Europe'.") .'</p>';      $output .= '<p>'. t('The taxonomy module supports the use of both synonyms and related terms, but does not directly use this functionality. However, optional contributed or custom modules may make full use of these advanced features.') .'</p>';      $output .= '<p>'. t('For more information, see the online handbook entry for <a href="@taxonomy">Taxonomy module</a>.', array('@taxonomy' => 'http://drupal.org/handbook/modules/taxonomy/')) .'</p>';      return $output;    case 'admin/content/taxonomy':      $output = '<p>'. t("The taxonomy module allows you to categorize your content using both tags and administrator defined terms. It is a flexible tool for classifying content with many advanced features. To begin, create a 'Vocabulary' to hold one set of terms or tags. You can create one free-tagging vocabulary for everything, or separate controlled vocabularies to define the various properties of your content, for example 'Countries' or 'Colors'.") .'</p>';      $output .= '<p>'. t('Use the list below to configure and review the vocabularies defined on your site, or to list and manage the terms (tags) they contain. A vocabulary may (optionally) be tied to specific content types as shown in the <em>Type</em> column and, if so, will be displayed when creating or editing posts of that type. Multiple vocabularies tied to the same content type will be displayed in the order shown below. To change the order of a vocabulary, grab a drag-and-drop handle under the <em>Name</em> column and drag it to a new location in the list. (Grab a handle by clicking and holding the mouse while hovering over a handle icon.) Remember that your changes will not be saved until you click the <em>Save</em> button at the bottom of the page.') .'</p>';      return $output;    case 'admin/content/taxonomy/%':      $vocabulary = taxonomy_vocabulary_load($arg[3]);      if ($vocabulary->tags) {        return '<p>'. t('%capital_name is a free-tagging vocabulary. To change the name or description of a term, click the <em>edit</em> link next to the term.', array('%capital_name' => drupal_ucfirst($vocabulary->name))) .'</p>';      }      switch ($vocabulary->hierarchy) {        case 0:          return '<p>'. t('%capital_name is a flat vocabulary. You may organize the terms in the %name vocabulary by using the handles on the left side of the table. To change the name or description of a term, click the <em>edit</em> link next to the term.', array('%capital_name' => drupal_ucfirst($vocabulary->name), '%name' => $vocabulary->name)) .'</p>';        case 1:          return '<p>'. t('%capital_name is a single hierarchy vocabulary. You may organize the terms in the %name vocabulary by using the handles on the left side of the table. To change the name or description of a term, click the <em>edit</em> link next to the term.', array('%capital_name' => drupal_ucfirst($vocabulary->name), '%name' => $vocabulary->name)) .'</p>';        case 2:          return '<p>'. t('%capital_name is a multiple hierarchy vocabulary. To change the name or description of a term, click the <em>edit</em> link next to the term. Drag and drop of multiple hierarchies is not supported, but you can re-enable drag and drop support by editing each term to include only a single parent.', array('%capital_name' => drupal_ucfirst($vocabulary->name))) .'</p>';      }    case 'admin/content/taxonomy/add/vocabulary':      return '<p>'. t('Define how your vocabulary will be presented to administrators and users, and which content types to categorize with it. Tags allows users to create terms when submitting posts by typing a comma separated list. Otherwise terms are chosen from a select list and can only be created by users with the "administer taxonomy" permission.') .'</p>';  }}/** * Helper function for array_map purposes. */function _taxonomy_get_tid_from_term($term) {  return $term->tid;}/** * Implode a list of tags of a certain vocabulary into a string. */function taxonomy_implode_tags($tags, $vid = NULL) {  $typed_tags = array();  foreach ($tags as $tag) {    // Extract terms belonging to the vocabulary in question.    if (is_null($vid) || $tag->vid == $vid) {      // Commas and quotes in tag names are special cases, so encode 'em.      if (strpos($tag->name, ',') !== FALSE || strpos($tag->name, '"') !== FALSE) {        $tag->name = '"'. str_replace('"', '""', $tag->name) .'"';      }      $typed_tags[] = $tag->name;    }  }  return implode(', ', $typed_tags);}/** * Implementation of hook_hook_info(). */function taxonomy_hook_info() {  return array(    'taxonomy' => array(      'taxonomy' => array(        'insert' => array(          'runs when' => t('After saving a new term to the database'),        ),        'update' => array(          'runs when' => t('After saving an updated term to the database'),        ),        'delete' => array(          'runs when' => t('After deleting a term')        ),      ),    ),  );}
<?php// $Id$/** * @file * Administrative page callbacks for the taxonomy module. *//** * Form builder to list and manage vocabularies. * * @ingroup forms * @see taxonomy_overview_vocabularies_submit() * @see theme_taxonomy_overview_vocabularies() */function taxonomy_overview_vocabularies() {  $vocabularies = taxonomy_get_vocabularies();  $form = array('#tree' => TRUE);  foreach ($vocabularies as $vocabulary) {    $types = array();    foreach ($vocabulary->nodes as $type) {      $node_type = node_get_types('name', $type);      $types[] = $node_type ? check_plain($node_type) : check_plain($type);    }    $form[$vocabulary->vid]['#vocabulary'] = (array)$vocabulary;    $form[$vocabulary->vid]['name'] = array('#value' => check_plain($vocabulary->name));    $form[$vocabulary->vid]['types'] = array('#value' => implode(', ', $types));    $form[$vocabulary->vid]['weight'] = array('#type' => 'weight', '#delta' => 10, '#default_value' => $vocabulary->weight);    $form[$vocabulary->vid]['edit'] = array('#value' => l(t('edit vocabulary'), "admin/content/taxonomy/edit/vocabulary/$vocabulary->vid"));    $form[$vocabulary->vid]['list'] = array('#value' => l(t('list terms'), "admin/content/taxonomy/$vocabulary->vid"));    $form[$vocabulary->vid]['add'] = array('#value' => l(t('add terms'), "admin/content/taxonomy/$vocabulary->vid/add/term"));  }  // Only make this form include a submit button and weight if more than one  // vocabulary exists.  if (count($vocabularies) > 1) {    $form['submit'] = array('#type' => 'submit', '#value' => t('Save'));  }  elseif (isset($vocabulary)) {    unset($form[$vocabulary->vid]['weight']);  }  return $form;}/** * Submit handler for vocabularies overview. Updates changed vocabulary weights. * * @see taxonomy_overview_vocabularies() */function taxonomy_overview_vocabularies_submit($form, &$form_state) {  foreach ($form_state['values'] as $vid => $vocabulary) {    if (is_numeric($vid) && $form[$vid]['#vocabulary']['weight'] != $form_state['values'][$vid]['weight']) {      $form[$vid]['#vocabulary']['weight'] = $form_state['values'][$vid]['weight'];      taxonomy_save_vocabulary($form[$vid]['#vocabulary']);    }  }}/** * Theme the vocabulary overview as a sortable list of vocabularies. * * @ingroup themeable * @see taxonomy_overview_vocabularies() */function theme_taxonomy_overview_vocabularies($form) {  $rows = array();  foreach (element_children($form) as $key) {    if (isset($form[$key]['name'])) {      $vocabulary = &$form[$key];      $row = array();      $row[] = drupal_render($vocabulary['name']);      $row[] = drupal_render($vocabulary['types']);      if (isset($vocabulary['weight'])) {        $vocabulary['weight']['#attributes']['class'] = 'vocabulary-weight';        $row[] = drupal_render($vocabulary['weight']);      }      $row[] = drupal_render($vocabulary['edit']);      $row[] = drupal_render($vocabulary['list']);      $row[] = drupal_render($vocabulary['add']);      $rows[] = array('data' => $row, 'class' => 'draggable');    }  }  if (empty($rows)) {    $rows[] = array(array('data' => t('No vocabularies available.'), 'colspan' => '5'));  }  $header = array(t('Name'), t('Type'));  if (isset($form['submit'])) {    $header[] = t('Weight');    drupal_add_tabledrag('taxonomy', 'order', 'sibling', 'vocabulary-weight');  }  $header[] = array('data' => t('Operations'), 'colspan' => '3');  return theme('table', $header, $rows, array('id' => 'taxonomy')) . drupal_render($form);}/** * Display form for adding and editing vocabularies. * * @ingroup forms * @see taxonomy_form_vocabulary_submit() */function taxonomy_form_vocabulary(&$form_state, $edit = array()) {  $edit += array(    'name' => '',    'description' => '',    'help' => '',    'nodes' => array(),    'hierarchy' => 0,    'relations' => 0,    'tags' => 0,    'multiple' => 0,    'required' => 0,    'weight' => 0,  );  $form['identification'] = array(    '#type' => 'fieldset',    '#title' => t('Identification'),    '#collapsible' => TRUE,  );  $form['identification']['name'] = array('#type' => 'textfield',    '#title' => t('Vocabulary name'),    '#default_value' => $edit['name'],    '#maxlength' => 255,    '#description' => t('The name for this vocabulary, e.g., <em>"Tags"</em>.'),    '#required' => TRUE,  );  $form['identification']['description'] = array('#type' => 'textarea',    '#title' => t('Description'),    '#default_value' => $edit['description'],    '#description' => t('Description of the vocabulary; can be used by modules.'),  );  $form['identification']['help'] = array('#type' => 'textfield',    '#title' => t('Help text'),    '#maxlength' => 255,    '#default_value' => $edit['help'],    '#description' => t('Instructions to present to the user when selecting terms, e.g., <em>"Enter a comma separated list of words"</em>.'),  );  $form['content_types'] = array(    '#type' => 'fieldset',    '#title' => t('Content types'),    '#collapsible' => TRUE,  );  $form['content_types']['nodes'] = array('#type' => 'checkboxes',    '#title' => t('Content types'),    '#default_value' => $edit['nodes'],    '#options' => array_map('check_plain', node_get_types('names')),    '#description' => t('Select content types to categorize using this vocabulary.'),  );  $form['settings'] = array(    '#type' => 'fieldset',    '#title' => t('Settings'),    '#collapsible' => TRUE,  );  $form['settings']['tags'] = array('#type' => 'checkbox',    '#title' => t('Tags'),    '#default_value' => $edit['tags'],    '#description' => t('Terms are created by users when submitting posts by typing a comma separated list.'),  );  $form['settings']['multiple'] = array('#type' => 'checkbox',    '#title' => t('Multiple select'),    '#default_value' => $edit['multiple'],    '#description' => t('Allows posts to have more than one term from this vocabulary (always true for tags).'),  );  $form['settings']['required'] = array('#type' => 'checkbox',    '#title' => t('Required'),    '#default_value' => $edit['required'],    '#description' => t('At least one term in this vocabulary must be selected when submitting a post.'),  );  $form['settings']['weight'] = array('#type' => 'weight',    '#title' => t('Weight'),    '#default_value' => $edit['weight'],    '#description' => t('Vocabularies are displayed in ascending order by weight.'),  );  // Set the hierarchy to "multiple parents" by default. This simplifies the  // vocabulary form and standardizes the term form.  $form['hierarchy'] = array('#type' => 'value',    '#value' => '0',  );  // Enable "related terms" by default.  $form['relations'] = array('#type' => 'value',    '#value' => '1',  );  $form['submit'] = array('#type' => 'submit', '#value' => t('Save'));  if (isset($edit['vid'])) {    $form['delete'] = array('#type' => 'submit', '#value' => t('Delete'));    $form['vid'] = array('#type' => 'value', '#value' => $edit['vid']);    $form['module'] = array('#type' => 'value', '#value' => $edit['module']);  }  return $form;}/** * Accept the form submission for a vocabulary and save the results. */function taxonomy_form_vocabulary_submit($form, &$form_state) {  // Fix up the nodes array to remove unchecked nodes.  $form_state['values']['nodes'] = array_filter($form_state['values']['nodes']);  switch (taxonomy_save_vocabulary($form_state['values'])) {    case SAVED_NEW:      drupal_set_message(t('Created new vocabulary %name.', array('%name' => $form_state['values']['name'])));      watchdog('taxonomy', 'Created new vocabulary %name.', array('%name' => $form_state['values']['name']), WATCHDOG_NOTICE, l(t('edit'), 'admin/content/taxonomy/edit/vocabulary/'. $form_state['values']['vid']));      break;    case SAVED_UPDATED:      drupal_set_message(t('Updated vocabulary %name.', array('%name' => $form_state['values']['name'])));      watchdog('taxonomy', 'Updated vocabulary %name.', array('%name' => $form_state['values']['name']), WATCHDOG_NOTICE, l(t('edit'), 'admin/content/taxonomy/edit/vocabulary/'. $form_state['values']['vid']));      break;  }  $form_state['vid'] = $form_state['values']['vid'];  $form_state['redirect'] = 'admin/content/taxonomy';  return;}/** * Page to edit a vocabulary. */function taxonomy_admin_vocabulary_edit($vocabulary) {  if ((isset($_POST['op']) && $_POST['op'] == t('Delete')) || isset($_POST['confirm'])) {    return drupal_get_form('taxonomy_vocabulary_confirm_delete', $vocabulary->vid);  }  return drupal_get_form('taxonomy_form_vocabulary', (array)$vocabulary);}/** * Page to edit a vocabulary term. */function taxonomy_admin_term_edit($tid) {  if ($term = (array)taxonomy_get_term($tid)) {    return drupal_get_form('taxonomy_form_term', taxonomy_vocabulary_load($term['vid']), $term);  }  return drupal_not_found();}/** * Form builder for the taxonomy terms overview. * * Display a tree of all the terms in a vocabulary, with options to edit * each one. The form is made drag and drop by the theme function. * * @ingroup forms * @see taxonomy_overview_terms_submit() * @see theme_taxonomy_overview_terms() */function taxonomy_overview_terms(&$form_state, $vocabulary) {  global $pager_page_array, $pager_total, $pager_total_items;  // Check for confirmation forms.  if (isset($form_state['confirm_reset_alphabetical'])) {    return taxonomy_vocabulary_confirm_reset_alphabetical($form_state, $vocabulary->vid);  }  drupal_set_title(t('Terms in %vocabulary', array('%vocabulary' => $vocabulary->name)));  $form = array(    '#vocabulary' => (array)$vocabulary,    '#tree' => TRUE,    '#parent_fields' => FALSE,  );  $page            = isset($_GET['page']) ? $_GET['page'] : 0;  $page_increment  = variable_get('taxonomy_terms_per_page_admin', 100);  // Number of terms per page.  $page_entries    = 0;   // Elements shown on this page.  $before_entries  = 0;   // Elements at the root level before this page.  $after_entries   = 0;   // Elements at the root level after this page.  $root_entries    = 0;   // Elements at the root level on this page.  // Terms from previous and next pages are shown if the term tree would have  // been cut in the middle. Keep track of how many extra terms we show on each  // page of terms.  $back_peddle    = NULL;  $forward_peddle = 0;  // An array of the terms to be displayed on this page.  $current_page = array();  // Case for free tagging.  if ($vocabulary->tags) {    // We are not calling taxonomy_get_tree because that might fail with a big    // number of tags in the freetagging vocabulary.    $results = pager_query(db_rewrite_sql('SELECT t.*, h.parent FROM {term_data} t INNER JOIN {term_hierarchy} h ON t.tid = h.tid WHERE t.vid = %d ORDER BY weight, name', 't', 'tid'), $page_increment, 0, NULL, $vocabulary->vid);    $total_entries = db_query(db_rewrite_sql('SELECT count(*) FROM {term_data} t INNER JOIN {term_hierarchy} h ON t.tid = h.tid WHERE t.vid = %d', 't', 'tid'), $page_increment, 0, NULL, $vocabulary->vid);    while ($term = db_fetch_object($results)) {      $key = 'tid:'. $term->tid .':0';      $current_page[$key] = $term;      $page_entries++;    }  }  // Case for restricted vocabulary.  else {    $term_deltas = array();    $tree = taxonomy_get_tree($vocabulary->vid);    $term = current($tree);    do {      // In case this tree is completely empty.      if (empty($term)) {        break;      }      // Count entries before the current page.      if ($page && ($page * $page_increment) > $before_entries && !isset($back_peddle)) {        $before_entries++;        continue;      }      // Count entries after the current page.      elseif ($page_entries > $page_increment && isset($complete_tree)) {        $after_entries++;        continue;      }      // Do not let a term start the page that is not at the root.      if (isset($term->depth) && ($term->depth > 0) && !isset($back_peddle)) {        $back_peddle = 0;        while ($pterm = prev($tree)) {          $before_entries--;          $back_peddle++;          if ($pterm->depth == 0) {            prev($tree);            continue 2; // Jump back to the start of the root level parent.          }        }      }      $back_peddle = isset($back_peddle) ? $back_peddle : 0;      // Continue rendering the tree until we reach the a new root item.      if ($page_entries >= $page_increment + $back_peddle + 1 && $term->depth == 0 && $root_entries > 1) {        $complete_tree = TRUE;        // This new item at the root level is the first item on the next page.        $after_entries++;        continue;      }      if ($page_entries >= $page_increment + $back_peddle) {        $forward_peddle++;      }      // Finally, if we've gotten down this far, we're rendering a term on this page.      $page_entries++;      $term_deltas[$term->tid] = isset($term_deltas[$term->tid]) ? $term_deltas[$term->tid] + 1 : 0;      $key = 'tid:'. $term->tid .':'. $term_deltas[$term->tid];      // Keep track of the first term displayed on this page.      if ($page_entries == 1) {        $form['#first_tid'] = $term->tid;      }      // Keep a variable to make sure at least 2 root elements are displayed.      if ($term->parents[0] == 0) {        $root_entries++;      }      $current_page[$key] = $term;    } while ($term = next($tree));    // Because we didn't use a pager query, set the necessary pager variables.    $total_entries = $before_entries + $page_entries + $after_entries;    $pager_total_items[0] = $total_entries;    $pager_page_array[0] = $page;    $pager_total[0] = ceil($total_entries / $page_increment);  }  // If this form was already submitted once, it's probably hit a validation  // error. Ensure the form is rebuilt in the same order as the user submitted.  if (!empty($form_state['post'])) {    $order = array_flip(array_keys($form_state['post'])); // Get the $_POST order.    $current_page = array_merge($order, $current_page); // Update our form with the new order.    foreach ($current_page as $key => $term) {      // Verify this is a term for the current page and set at the current depth.      if (is_array($form_state['post'][$key]) && is_numeric($form_state['post'][$key]['tid'])) {        $current_page[$key]->depth = $form_state['post'][$key]['depth'];      }      else {        unset($current_page[$key]);      }    }  }  // Build the actual form.  foreach ($current_page as $key => $term) {    // Save the term for the current page so we don't have to load it a second time.    $form[$key]['#term'] = (array)$term;    if (isset($term->parents)) {      $form[$key]['#term']['parent'] = $term->parent = $term->parents[0];      unset($form[$key]['#term']['parents'], $term->parents);    }    $form[$key]['view'] = array('#value' => l($term->name, "taxonomy/term/$term->tid"));    if (!$vocabulary->tags && $vocabulary->hierarchy < 2 && count($tree) > 1) {      $form['#parent_fields'] = TRUE;      $form[$key]['tid'] = array(        '#type' => 'hidden',        '#value' => $term->tid      );      $form[$key]['parent'] = array(        '#type' => 'hidden',        // Yes, default_value on a hidden. It needs to be changeable by the javascript.        '#default_value' => $term->parent,      );      $form[$key]['depth'] = array(        '#type' => 'hidden',        // Same as above, the depth is modified by javascript, so it's a default_value.        '#default_value' => $term->depth,      );    }    $form[$key]['edit'] = array('#value' => l(t('edit'), "admin/content/taxonomy/edit/term/$term->tid", array('query' => drupal_get_destination())));  }  $form['#total_entries'] = $total_entries;  $form['#page_increment'] = $page_increment;  $form['#page_entries'] = $page_entries;  $form['#back_peddle'] = $back_peddle;  $form['#forward_peddle'] = $forward_peddle;  $form['#empty_text'] = t('No terms available.');  if (!$vocabulary->tags && $vocabulary->hierarchy < 2 && count($tree) > 1) {    $form['submit'] = array(      '#type' => 'submit',      '#value' => t('Save')    );    $form['reset_alphabetical'] = array(      '#type' => 'submit',      '#value' => t('Reset to alphabetical')    );    $form['destination'] = array(      '#type' => 'hidden',      '#value' => $_GET['q'] . (isset($_GET['page']) ? '?page='. $_GET['page'] : '')    );  }  return $form;}/** * Submit handler for terms overview form. * * Rather than using a textfield or weight field, this form depends entirely * upon the order of form elements on the page to determine new weights. * * Because there might be hundreds or thousands of taxonomy terms that need to * be ordered, terms are weighted from 0 to the number of terms in the * vocabulary, rather than the standard -10 to 10 scale. Numbers are sorted * lowest to highest, but are not necessarily sequential. Numbers may be skipped * when a term has children so that reordering is minimal when a child is * added or removed from a term. * * @see taxonomy_overview_terms() */function taxonomy_overview_terms_submit($form, &$form_state) {  if ($form_state['clicked_button']['#value'] == t('Reset to alphabetical')) {    // Execute the reset action.    if ($form_state['values']['reset_alphabetical'] === TRUE) {      return taxonomy_vocabulary_confirm_reset_alphabetical_submit($form, $form_state);    }    // Rebuild the form to confirm the reset action.    $form_state['rebuild'] = TRUE;    $form_state['confirm_reset_alphabetical'] = TRUE;    return;  }  $order = array_flip(array_keys($form['#post'])); // Get the $_POST order.  $form_state['values'] = array_merge($order, $form_state['values']); // Update our original form with the new order.  $vocabulary = $form['#vocabulary'];  $hierarchy = 0; // Update the current hierarchy type as we go.  $changed_terms = array();  $tree = taxonomy_get_tree($vocabulary['vid']);  if (empty($tree)) {    return;  }  // Build a list of all terms that need to be updated on previous pages.  $weight = 0;  $term = (array)$tree[0];  while ($term['tid'] != $form['#first_tid']) {    if ($term['parents'][0] == 0 && $term['weight'] != $weight) {      $term['parent'] = $term['parents'][0];      $term['weight'] = $weight;      $changed_terms[$term['tid']] = $term;    }    $weight++;    $hierarchy = $term['parents'][0] != 0 ? 1 : $hierarchy;    $term = (array)$tree[$weight];  }  // Renumber the current page weights and assign any new parents.  $level_weights = array();  foreach ($form_state['values'] as $tid => $values) {    if (isset($form[$tid]['#term'])) {      $term = $form[$tid]['#term'];      // Give terms at the root level a weight in sequence with terms on previous pages.      if ($values['parent'] == 0 && $term['weight'] != $weight) {        $term['weight'] = $weight;        $changed_terms[$term['tid']] = $term;      }      // Terms not at the root level can safely start from 0 because they're all on this page.      elseif ($values['parent'] > 0) {        $level_weights[$values['parent']] = isset($level_weights[$values['parent']]) ? $level_weights[$values['parent']] + 1 : 0;        if ($level_weights[$values['parent']] != $term['weight']) {          $term['weight'] = $level_weights[$values['parent']];          $changed_terms[$term['tid']] = $term;        }      }      // Update any changed parents.      if ($values['parent'] != $term['parent']) {        $term['parent'] = $values['parent'];        $changed_terms[$term['tid']] = $term;      }      $hierarchy = $term['parent'] != 0 ? 1 : $hierarchy;      $weight++;    }  }  // Build a list of all terms that need to be updated on following pages.  for ($weight; $weight < count($tree); $weight++) {    $term = (array)$tree[$weight];    if ($term['parents'][0] == 0 && $term['weight'] != $weight) {      $term['parent'] = $term['parents'][0];      $term['weight'] = $weight;      $changed_terms[$term['tid']] = $term;    }    $hierarchy = $term['parents'][0] != 0 ? 1 : $hierarchy;  }  // Save all updated terms.  foreach ($changed_terms as $term) {    taxonomy_save_term($term);  }  // Update the vocabulary hierarchy to flat or single hierarchy.  if ($vocabulary['hierarchy'] != $hierarchy) {    $vocabulary['hierarchy'] = $hierarchy;    taxonomy_save_vocabulary($vocabulary);  }}/** * Theme the terms overview as a sortable list of terms. * * @ingroup themeable * @see taxonomy_overview_terms() */function theme_taxonomy_overview_terms($form) {  $page_increment  = $form['#page_increment'];  $page_entries    = $form['#page_entries'];  $back_peddle     = $form['#back_peddle'];  $forward_peddle  = $form['#forward_peddle'];  // Add drag and drop if parent fields are present in the form.  if ($form['#parent_fields']) {    drupal_add_tabledrag('taxonomy', 'match', 'parent', 'term-parent', 'term-parent', 'term-id', FALSE);    drupal_add_tabledrag('taxonomy', 'depth', 'group', 'term-depth', NULL, NULL, FALSE);    drupal_add_js(drupal_get_path('module', 'taxonomy') .'/taxonomy.js');    drupal_add_js(array('taxonomy' => array('backPeddle' => $back_peddle, 'forwardPeddle' => $forward_peddle)), 'setting');    drupal_add_css(drupal_get_path('module', 'taxonomy') .'/taxonomy.css');  }  $errors = form_get_errors() != FALSE ? form_get_errors() : array();  $rows = array();  foreach (element_children($form) as $key) {    if (isset($form[$key]['#term'])) {      $term = &$form[$key];      $row = array();      $row[] = (isset($term['#term']['depth']) && $term['#term']['depth'] > 0 ? theme('indentation', $term['#term']['depth']) : '') . drupal_render($term['view']);      if ($form['#parent_fields']) {        $term['tid']['#attributes']['class'] = 'term-id';        $term['parent']['#attributes']['class'] = 'term-parent';        $term['depth']['#attributes']['class'] = 'term-depth';        $row[0] .= drupal_render($term['parent']) . drupal_render($term['tid']) . drupal_render($term['depth']);      }      $row[] = drupal_render($term['edit']);      $row = array('data' => $row);      $rows[$key] = $row;    }  }  // Add necessary classes to rows.  $row_position = 0;  foreach ($rows as $key => $row) {    $classes = array();    if (isset($form['#parent_fields'])) {      $classes[] = 'draggable';    }    // Add classes that mark which terms belong to previous and next pages.    if ($row_position < $back_peddle || $row_position >= $page_entries - $forward_peddle) {      $classes[] = 'taxonomy-term-preview';    }    if ($row_position !== 0 && $row_position !== count($rows) - 1) {      if ($row_position == $back_peddle - 1 || $row_position == $page_entries - $forward_peddle - 1) {        $classes[] = 'taxonomy-term-divider-top';      }      elseif ($row_position == $back_peddle || $row_position == $page_entries - $forward_peddle) {        $classes[] = 'taxonomy-term-divider-bottom';      }    }    // Add an error class if this row contains a form error.    foreach ($errors as $error_key => $error) {      if (strpos($error_key, $key) === 0) {        $classes[] = 'error';      }    }    $rows[$key]['class'] = implode(' ', $classes);    $row_position++;  }  if (empty($rows)) {    $rows[] = array(array('data' => $form['#empty_text'], 'colspan' => '2'));  }  $header = array(t('Name'), t('Operations'));  $output = theme('table', $header, $rows, array('id' => 'taxonomy'));  $output .= drupal_render($form);  $output .= theme('pager', NULL, $page_increment);  return $output;}/** * Menu callback; return the edit form for a new term after setting the title. */function taxonomy_add_term_page($vocabulary) {  drupal_set_title(t('Add term to %vocabulary', array('%vocabulary' => $vocabulary->name)));  return drupal_get_form('taxonomy_form_term' , $vocabulary);}/** * Form function for the term edit form. * * @ingroup forms * @see taxonomy_form_term_submit() */function taxonomy_form_term(&$form_state, $vocabulary, $edit = array()) {  $edit += array(    'name' => '',    'description' => '',    'tid' => NULL,    'weight' => 0,  );  $parent = array_keys(taxonomy_get_parents($edit['tid']));  $form['#term'] = $edit;  $form['#term']['parent'] = $parent;  $form['#vocabulary'] = (array)$vocabulary;  $form['#vocabulary']['nodes'] = drupal_map_assoc($vocabulary->nodes);;  // Check for confirmation forms.  if (isset($form_state['confirm_delete'])) {    return array_merge($form, taxonomy_term_confirm_delete($form_state, $edit['tid']));  }  elseif (isset($form_state['confirm_parents'])) {    return array_merge($form, taxonomy_term_confirm_parents($form_state, $vocabulary));  }  $form['identification'] = array(    '#type' => 'fieldset',    '#title' => t('Identification'),    '#collapsible' => TRUE,  );  $form['identification']['name'] = array(    '#type' => 'textfield',    '#title' => t('Term name'),    '#default_value' => $edit['name'],    '#maxlength' => 255,    '#description' => t('The name of this term.'),    '#required' => TRUE);  $form['identification']['description'] = array(    '#type' => 'textarea',    '#title' => t('Description'),    '#default_value' => $edit['description'],    '#description' => t('A description of the term. To be displayed on taxonomy/term pages and RSS feeds.'));  $form['advanced'] = array(    '#type' => 'fieldset',    '#title' => t('Advanced options'),    '#collapsible' => TRUE,    '#collapsed' => $vocabulary->hierarchy > 1 ? FALSE : TRUE,  );  // taxonomy_get_tree and taxonomy_get_parents may contain large numbers of  // items so we check for taxonomy_override_selector before loading the  // full vocabulary. Contrib modules can then intercept before  // hook_form_alter to provide scalable alternatives.  if (!variable_get('taxonomy_override_selector', FALSE)) {    $parent = array_keys(taxonomy_get_parents($edit['tid']));    $children = taxonomy_get_tree($vocabulary->vid, $edit['tid']);    // A term can't be the child of itself, nor of its children.    foreach ($children as $child) {      $exclude[] = $child->tid;    }    $exclude[] = $edit['tid'];    $form['advanced']['parent'] = _taxonomy_term_select(t('Parents'), 'parent', $parent, $vocabulary->vid, t('Parent terms') .'.', 1, '<'. t('root') .'>', $exclude);    $form['advanced']['relations'] = _taxonomy_term_select(t('Related terms'), 'relations', array_keys(taxonomy_get_related($edit['tid'])), $vocabulary->vid, NULL, 1, '<'. t('none') .'>', array($edit['tid']));  }  $form['advanced']['synonyms'] = array(    '#type' => 'textarea',    '#title' => t('Synonyms'),    '#default_value' => implode("\n", taxonomy_get_synonyms($edit['tid'])),    '#description' => t('Synonyms of this term, one synonym per line.'));  $form['advanced']['weight'] = array(    '#type' => 'textfield',    '#title' => t('Weight'),    '#size' => 6,    '#default_value' => $edit['weight'],    '#description' => t('Terms are displayed in ascending order by weight.'),    '#required' => TRUE);  $form['vid'] = array(    '#type' => 'value',    '#value' => $vocabulary->vid);  $form['submit'] = array(    '#type' => 'submit',    '#value' => t('Save'));  if ($edit['tid']) {    $form['delete'] = array(      '#type' => 'submit',      '#value' => t('Delete'));    $form['tid'] = array(      '#type' => 'value',      '#value' => $edit['tid']);  }  else {    $form['destination'] = array('#type' => 'hidden', '#value' => $_GET['q']);  }  return $form;}/** * Validation handler for the term edit form. Ensure numeric weight values. * * @see taxonomy_form_term() */function taxonomy_form_term_validate($form, &$form_state) {  if (isset($form_state['values']['weight']) && !is_numeric($form_state['values']['weight'])) {    form_set_error('weight', t('Weight value must be numeric.'));  }}/** * Submit handler to insert or update a term. * * @see taxonomy_form_term() */function taxonomy_form_term_submit($form, &$form_state) {  if ($form_state['clicked_button']['#value'] == t('Delete')) {    // Execute the term deletion.    if ($form_state['values']['delete'] === TRUE) {      return taxonomy_term_confirm_delete_submit($form, $form_state);    }    // Rebuild the form to confirm term deletion.    $form_state['rebuild'] = TRUE;    $form_state['confirm_delete'] = TRUE;    return;  }  // Rebuild the form to confirm enabling multiple parents.  elseif ($form_state['clicked_button']['#value'] == t('Save') && !$form['#vocabulary']['tags'] && count($form_state['values']['parent']) > 1 && $form['#vocabulary']['hierarchy'] < 2) {    $form_state['rebuild'] = TRUE;    $form_state['confirm_parents'] = TRUE;    return;  }  switch (taxonomy_save_term($form_state['values'])) {    case SAVED_NEW:      drupal_set_message(t('Created new term %term.', array('%term' => $form_state['values']['name'])));      watchdog('taxonomy', 'Created new term %term.', array('%term' => $form_state['values']['name']), WATCHDOG_NOTICE, l(t('edit'), 'admin/content/taxonomy/edit/term/'. $form_state['values']['tid']));      break;    case SAVED_UPDATED:      drupal_set_message(t('Updated term %term.', array('%term' => $form_state['values']['name'])));      watchdog('taxonomy', 'Updated term %term.', array('%term' => $form_state['values']['name']), WATCHDOG_NOTICE, l(t('edit'), 'admin/content/taxonomy/edit/term/'. $form_state['values']['tid']));      break;  }  if (!$form['#vocabulary']['tags']) {    $current_parent_count = count($form_state['values']['parent']);    $previous_parent_count = count($form['#term']['parent']);    // Root doesn't count if it's the only parent.    if ($current_parent_count == 1 && isset($form_state['values']['parent'][''])) {      $current_parent_count = 0;      $form_state['values']['parent'] = array();    }    // If the number of parents has been reduced to one or none, do a check on the    // parents of every term in the vocabulary value.    if ($current_parent_count < $previous_parent_count && $current_parent_count < 2) {      taxonomy_check_vocabulary_hierarchy($form['#vocabulary'], $form_state['values']);    }    // If we've increased the number of parents and this is a single or flat    // hierarchy, update the vocabulary immediately.    elseif ($current_parent_count > $previous_parent_count && $form['#vocabulary']['hierarchy'] < 2) {      $form['#vocabulary']['hierarchy'] = $current_parent_count == 1 ? 1 : 2;      taxonomy_save_vocabulary($form['#vocabulary']);    }  }  $form_state['tid'] = $form_state['values']['tid'];  $form_state['redirect'] = 'admin/content/taxonomy';  return;}/** * Form builder for the confirmation of multiple term parents. * * @ingroup forms * @see taxonomy_form_term() */function taxonomy_term_confirm_parents(&$form_state, $vocabulary) {  $form = array();  foreach (element_children($form_state['values']) as $key) {    $form[$key] = array(      '#type' => 'value',      '#value' => $form_state['values'][$key],    );  }  $question = t('Set multiple term parents?');  $description = '<p>'. t("Adding multiple parents to a term will cause the %vocabulary vocabulary to look for multiple parents on every term. Because multiple parents are not supported when using the drag and drop outline interface, drag and drop will be disabled if you enable this option. If you choose to have multiple parents, you will only be able to set parents by using the term edit form.", array('%vocabulary' => $vocabulary->name)) .'</p>';  $description .= '<p>'. t("You may re-enable the drag and drop interface at any time by reducing multiple parents to a single parent for the terms in this vocabulary.") .'</p>';  return confirm_form($form, $question, drupal_get_destination(), $description, t('Set multiple parents'));}/** * Form builder for the term delete form. * * @ingroup forms * @see taxonomy_term_confirm_delete_submit() */function taxonomy_term_confirm_delete(&$form_state, $tid) {  $term = taxonomy_get_term($tid);  $form['type'] = array('#type' => 'value', '#value' => 'term');  $form['name'] = array('#type' => 'value', '#value' => $term->name);  $form['tid'] = array('#type' => 'value', '#value' => $tid);  $form['delete'] = array('#type' => 'value', '#value' => TRUE);  return confirm_form($form,                  t('Are you sure you want to delete the term %title?',                  array('%title' => $term->name)),                  'admin/content/taxonomy',                  t('Deleting a term will delete all its children if there are any. This action cannot be undone.'),                  t('Delete'),                  t('Cancel'));}/** * Submit handler to delete a term after confirmation. * * @see taxonomy_term_confirm_delete() */function taxonomy_term_confirm_delete_submit($form, &$form_state) {  taxonomy_del_term($form_state['values']['tid']);  taxonomy_check_vocabulary_hierarchy($form['#vocabulary'], $form_state['values']);  drupal_set_message(t('Deleted term %name.', array('%name' => $form_state['values']['name'])));  watchdog('taxonomy', 'Deleted term %name.', array('%name' => $form_state['values']['name']), WATCHDOG_NOTICE);  $form_state['redirect'] = 'admin/content/taxonomy';  return;}/** * Form builder for the vocabulary delete confirmation form. * * @ingroup forms * @see taxonomy_vocabulary_confirm_delete_submit() */function taxonomy_vocabulary_confirm_delete(&$form_state, $vid) {  $vocabulary = taxonomy_vocabulary_load($vid);  $form['type'] = array('#type' => 'value', '#value' => 'vocabulary');  $form['vid'] = array('#type' => 'value', '#value' => $vid);  $form['name'] = array('#type' => 'value', '#value' => $vocabulary->name);  return confirm_form($form,                  t('Are you sure you want to delete the vocabulary %title?',                  array('%title' => $vocabulary->name)),                  'admin/content/taxonomy',                  t('Deleting a vocabulary will delete all the terms in it. This action cannot be undone.'),                  t('Delete'),                  t('Cancel'));}/** * Submit handler to delete a vocabulary after confirmation. * * @see taxonomy_vocabulary_confirm_delete() */function taxonomy_vocabulary_confirm_delete_submit($form, &$form_state) {  $status = taxonomy_del_vocabulary($form_state['values']['vid']);  drupal_set_message(t('Deleted vocabulary %name.', array('%name' => $form_state['values']['name'])));  watchdog('taxonomy', 'Deleted vocabulary %name.', array('%name' => $form_state['values']['name']), WATCHDOG_NOTICE);  $form_state['redirect'] = 'admin/content/taxonomy';  return;}/** * Form builder to confirm reseting a vocabulary to alphabetical order. * * @ingroup forms * @see taxonomy_vocabulary_confirm_reset_alphabetical_submit() */function taxonomy_vocabulary_confirm_reset_alphabetical(&$form_state, $vid) {  $vocabulary = taxonomy_vocabulary_load($vid);  $form['type'] = array('#type' => 'value', '#value' => 'vocabulary');  $form['vid'] = array('#type' => 'value', '#value' => $vid);  $form['name'] = array('#type' => 'value', '#value' => $vocabulary->name);  $form['reset_alphabetical'] = array('#type' => 'value', '#value' => TRUE);  return confirm_form($form,                  t('Are you sure you want to reset the vocabulary %title to alphabetical order?',                  array('%title' => $vocabulary->name)),                  'admin/content/taxonomy/'. $vid,                  t('Resetting a vocabulary will discard all custom ordering and sort items alphabetically.'),                  t('Reset to alphabetical'),                  t('Cancel'));}/** * Submit handler to reset a vocabulary to alphabetical order after confirmation. * * @see taxonomy_vocabulary_confirm_reset_alphabetical() */function taxonomy_vocabulary_confirm_reset_alphabetical_submit($form, &$form_state) {  db_query('UPDATE {term_data} t SET weight = 0 WHERE vid = %d', $form_state['values']['vid']);  drupal_set_message(t('Reset vocabulary %name to alphabetical order.', array('%name' => $form_state['values']['name'])));  watchdog('taxonomy', 'Reset vocabulary %name to alphabetical order.', array('%name' => $form_state['values']['name']), WATCHDOG_NOTICE);  $form_state['redirect'] = 'admin/content/taxonomy/'. $form_state['values']['vid'];}
<?php// $Id$/** * @file * User page callbacks for the book module. *//** * Menu callback; prints a listing of all books. */function book_render() {  $book_list = array();  foreach (book_get_books() as $book) {    $book_list[] = l($book['title'], $book['href'], $book['options']);  }  return theme('item_list', $book_list);}/** * Menu callback; Generates various representation of a book page and its children. * * The function delegates the generation of output to helper functions. * The function name is derived by prepending 'book_export_' to the * given output type. So, e.g., a type of 'html' results in a call to * the function book_export_html(). * * @param $type *   A string encoding the type of output requested. The following *   types are currently supported in book module: * *   - html: HTML (printer friendly output) * *   Other types may be supported in contributed modules. * @param $nid *   An integer representing the node id (nid) of the node to export * @return *   A string representing the node and its children in the book hierarchy *   in a format determined by the $type parameter. */function book_export($type, $nid) {  $type = drupal_strtolower($type);  $export_function = 'book_export_'. $type;  if (function_exists($export_function)) {    print call_user_func($export_function, $nid);  }  else {    drupal_set_message(t('Unknown export format.'));    drupal_not_found();  }}/** * This function is called by book_export() to generate HTML for export. * * The given node is /embedded to its absolute depth in a top level * section/. For example, a child node with depth 2 in the hierarchy * is contained in (otherwise empty) &lt;div&gt; elements * corresponding to depth 0 and depth 1. This is intended to support * WYSIWYG output - e.g., level 3 sections always look like level 3 * sections, no matter their depth relative to the node selected to be * exported as printer-friendly HTML. * * @param $nid *   An integer representing the node id (nid) of the node to export. * @return *   A string containing HTML representing the node and its children in *   the book hierarchy. */function book_export_html($nid) {  if (user_access('access printer-friendly version')) {    $export_data = array();    $node = node_load($nid);    if (isset($node->book)) {      $tree = book_menu_subtree_data($node->book);      $contents = book_export_traverse($tree, 'book_node_export');    }    return theme('book_export_html', $node->title, $contents, $node->book['depth']);  }  else {    drupal_access_denied();  }}/** * Menu callback; show the outline form for a single node. */function book_outline($node) {  drupal_set_title(check_plain($node->title));  return drupal_get_form('book_outline_form', $node);}/** * Build the form to handle all book outline operations via the outline tab. * * @see book_outline_form_submit() * @see book_remove_button_submit() * * @ingroup forms */function book_outline_form(&$form_state, $node) {  if (!isset($node->book)) {    // The node is not part of any book yet - set default options.    $node->book = _book_link_defaults($node->nid);  }  else {    $node->book['original_bid'] = $node->book['bid'];  }  // Find the depth limit for the parent select.  if (!isset($node->book['parent_depth_limit'])) {    $node->book['parent_depth_limit'] = _book_parent_depth_limit($node->book);  }  $form['#node'] = $node;  $form['#id'] = 'book-outline';  _book_add_form_elements($form, $node);  $form['book']['#collapsible'] = FALSE;  $form['update'] = array(    '#type' => 'submit',    '#value' => $node->book['original_bid'] ? t('Update book outline') : t('Add to book outline'),    '#weight' => 15,  );  $form['remove'] = array(    '#type' => 'submit',    '#value' => t('Remove from book outline'),    '#access' => $node->nid != $node->book['bid'] && $node->book['bid'],    '#weight' => 20,    '#submit' => array('book_remove_button_submit'),  );  return $form;}/** * Button submit function to redirect to removal confirm form. * * @see book_outline_form() */function book_remove_button_submit($form, &$form_state) {  $form_state['redirect'] = 'node/'. $form['#node']->nid .'/outline/remove';}/** * Handles book outline form submissions from the outline tab. * * @see book_outline_form() */function book_outline_form_submit($form, &$form_state) {  $node = $form['#node'];  $form_state['redirect'] = "node/". $node->nid;  $book_link = $form_state['values']['book'];  if (!$book_link['bid']) {    drupal_set_message(t('No changes were made'));    return;  }  $book_link['menu_name'] = book_menu_name($book_link['bid']);  $node->book = $book_link;  if (_book_update_outline($node)) {    if ($node->book['parent_mismatch']) {      // This will usually only happen when JS is disabled.      drupal_set_message(t('The post has been added to the selected book. You may now position it relative to other pages.'));      $form_state['redirect'] = "node/". $node->nid ."/outline";    }    else {      drupal_set_message(t('The book outline has been updated.'));    }  }  else {    drupal_set_message(t('There was an error adding the post to the book.'), 'error');  }}/** * Menu callback; builds a form to confirm removal of a node from the book. * * @see book_remove_form_submit() * * @ingroup forms */function book_remove_form(&$form_state, $node) {  $form['#node'] = $node;  $title = array('%title' => $node->title);  if ($node->book['has_children']) {    $description = t('%title has associated child pages, which will be relocated automatically to maintain their connection to the book. To recreate the hierarchy (as it was before removing this page), %title may be added again using the Outline tab, and each of its former child pages will need to be relocated manually.', $title);  }  else {    $description = t('%title may be added to hierarchy again using the Outline tab.', $title);  }  return confirm_form($form, t('Are you sure you want to remove %title from the book hierarchy?', $title), 'node/'. $node->nid, $description, t('Remove'));}/** * Confirm form submit function to remove a node from the book. * * @see book_remove_form() */function book_remove_form_submit($form, &$form_state) {  $node = $form['#node'];  if ($node->nid != $node->book['bid']) {    // Only allowed when this is not a book (top-level page).    menu_link_delete($node->book['mlid']);    db_query('DELETE FROM {book} WHERE nid = %d', $node->nid);    drupal_set_message(t('The post has been removed from the book.'));  }  $form_state['redirect'] = 'node/'. $node->nid;}/** * AJAX callback to replace the book parent select options. * * This function is called when the selected book is changed.  It updates the * cached form (either the node form or the book outline form) and returns * rendered output to be used to replace the select containing the possible * parent pages in the newly selected book. * * @param $build_id *   The form's build_id. * @param $bid *   A bid from from among those in the form's book select. * @return *   Prints the replacement HTML in JSON format. */function book_form_update() {  $bid = $_POST['book']['bid'];  if ($form = form_get_cache($_POST['form_build_id'], $form_state)) {    // Validate the bid.    if (isset($form['book']['bid']['#options'][$bid])) {      $book_link = $form['#node']->book;      $book_link['bid'] = $bid;      // Get the new options and update the cache.      $form['book']['plid'] = _book_parent_select($book_link);      form_set_cache($_POST['form_build_id'], $form, $form_state);      // Build and render the new select element, then return it in JSON format.      $form_state = array();      $form['#post'] = array();      $form = form_builder($form['form_id']['#value'] , $form, $form_state);      $output = drupal_render($form['book']['plid']);      drupal_json(array('status' => TRUE, 'data' => $output));    }    else {      drupal_json(array('status' => FALSE, 'data' => ''));    }  }  else {    drupal_json(array('status' => FALSE, 'data' => ''));  }  exit();}
<?php// $Id$/** * @file * Admin page callbacks for the filter module. *//** * Menu callback; Displays a list of all input formats and which * one is the default. * * @ingroup forms * @see filter_admin_overview_submit() */function filter_admin_overview() {  // Overview of all formats.  $formats = filter_formats();  $error = FALSE;  foreach ($formats as $id => $format) {    $roles = array();    foreach (user_roles() as $rid => $name) {      // Prepare a roles array with roles that may access the filter.      if (strstr($format->roles, ",$rid,")) {        $roles[] = $name;      }    }    $default = ($id == variable_get('filter_default_format', 1));    $options[$id] = '';    $form[$format->name]['id'] = array('#value' => $id);    $form[$format->name]['roles'] = array('#value' => $default ? t('All roles may use default format') : ($roles ? implode(', ', $roles) : t('No roles may use this format')));    $form[$format->name]['configure'] = array('#value' => l(t('configure'), 'admin/settings/filters/'. $id));    $form[$format->name]['delete'] = array('#value' => $default ? '' : l(t('delete'), 'admin/settings/filters/delete/'. $id));  }  $form['default'] = array('#type' => 'radios', '#options' => $options, '#default_value' => variable_get('filter_default_format', 1));  $form['submit'] = array('#type' => 'submit', '#value' => t('Set default format'));  return $form;}function filter_admin_overview_submit($form, &$form_state) {  // Process form submission to set the default format.  if (is_numeric($form_state['values']['default'])) {    drupal_set_message(t('Default format updated.'));    variable_set('filter_default_format', $form_state['values']['default']);  }}/** * Theme the admin overview form. * * @ingroup themeable */function theme_filter_admin_overview($form) {  $rows = array();  foreach ($form as $name => $element) {    if (isset($element['roles']) && is_array($element['roles'])) {      $rows[] = array(        drupal_render($form['default'][$element['id']['#value']]),        check_plain($name),        drupal_render($element['roles']),        drupal_render($element['configure']),        drupal_render($element['delete'])      );      unset($form[$name]);    }  }  $header = array(t('Default'), t('Name'), t('Roles'), array('data' => t('Operations'), 'colspan' => 2));  $output = theme('table', $header, $rows);  $output .= drupal_render($form);  return $output;}/** * Menu callback; Display a filter format form. */function filter_admin_format_page($format = NULL) {  if (!isset($format->name)) {    drupal_set_title(t("Add input format"));    $format = (object)array('name' => '', 'roles' => '', 'format' => '');  }  return drupal_get_form('filter_admin_format_form', $format);}/** * Generate a filter format form. * * @ingroup forms * @see filter_admin_format_form_validate() * @see filter_admin_format_form_submit() */function filter_admin_format_form(&$form_state, $format) {  $default = ($format->format == variable_get('filter_default_format', 1));  if ($default) {    $help = t('All roles for the default format must be enabled and cannot be changed.');    $form['default_format'] = array('#type' => 'hidden', '#value' => 1);  }  $form['name'] = array('#type' => 'textfield',    '#title' => t('Name'),    '#default_value' => $format->name,    '#description' => t('Specify a unique name for this filter format.'),    '#required' => TRUE,  );  // Add a row of checkboxes for form group.  $form['roles'] = array('#type' => 'fieldset',    '#title' => t('Roles'),    '#description' => $default ? $help : t('Choose which roles may use this filter format. Note that roles with the "administer filters" permission can always use all the filter formats.'),    '#tree' => TRUE,  );  foreach (user_roles() as $rid => $name) {    $checked = strstr($format->roles, ",$rid,");    $form['roles'][$rid] = array('#type' => 'checkbox',      '#title' => $name,      '#default_value' => ($default || $checked),    );    if ($default) {      $form['roles'][$rid]['#disabled'] = TRUE;    }  }  // Table with filters  $all = filter_list_all();  $enabled = filter_list_format($format->format);  $form['filters'] = array('#type' => 'fieldset',    '#title' => t('Filters'),    '#description' => t('Choose the filters that will be used in this filter format.'),    '#tree' => TRUE,  );  foreach ($all as $id => $filter) {    $form['filters'][$id] = array('#type' => 'checkbox',      '#title' => $filter->name,      '#default_value' => isset($enabled[$id]),      '#description' => module_invoke($filter->module, 'filter', 'description', $filter->delta),    );  }  if (!empty($format->format)) {    $form['format'] = array('#type' => 'hidden', '#value' => $format->format);    // Composition tips (guidelines)    $tips = _filter_tips($format->format, FALSE);    $extra = '<p>'. l(t('More information about formatting options'), 'filter/tips') .'</p>';    $tiplist = theme('filter_tips', $tips, FALSE, $extra);    if (!$tiplist) {      $tiplist = '<p>'. t('No guidelines available.') .'</p>';    }    $group = '<p>'. t('These are the guidelines that users will see for posting in this input format. They are automatically generated from the filter settings.') .'</p>';    $group .= $tiplist;    $form['tips'] = array('#value' => '<h2>'. t('Formatting guidelines') .'</h2>'. $group);  }  $form['submit'] = array('#type' => 'submit', '#value' => t('Save configuration'));  return $form;}/** * Validate filter format form submissions. */function filter_admin_format_form_validate($form, &$form_state) {  if (!isset($form_state['values']['format'])) {    $name = trim($form_state['values']['name']);    $result = db_fetch_object(db_query("SELECT format FROM {filter_formats} WHERE name='%s'", $name));    if ($result) {      form_set_error('name', t('Filter format names need to be unique. A format named %name already exists.', array('%name' => $name)));    }  }}/** * Process filter format form submissions. */function filter_admin_format_form_submit($form, &$form_state) {  $format = isset($form_state['values']['format']) ? $form_state['values']['format'] : NULL;  $current = filter_list_format($format);  $name = trim($form_state['values']['name']);  $cache = TRUE;  // Add a new filter format.  if (!$format) {    $new = TRUE;    db_query("INSERT INTO {filter_formats} (name) VALUES ('%s')", $name);    $format = db_result(db_query("SELECT MAX(format) AS format FROM {filter_formats}"));    drupal_set_message(t('Added input format %format.', array('%format' => $name)));  }  else {    drupal_set_message(t('The input format settings have been updated.'));  }  db_query("DELETE FROM {filters} WHERE format = %d", $format);  foreach ($form_state['values']['filters'] as $id => $checked) {    if ($checked) {      list($module, $delta) = explode('/', $id);      // Add new filters to the bottom.      $weight = isset($current[$id]->weight) ? $current[$id]->weight : 10;      db_query("INSERT INTO {filters} (format, module, delta, weight) VALUES (%d, '%s', %d, %d)", $format, $module, $delta, $weight);      // Check if there are any 'no cache' filters.      $cache &= !module_invoke($module, 'filter', 'no cache', $delta);    }  }  // We store the roles as a string for ease of use.  // We should always set all roles to TRUE when saving a default role.  // We use leading and trailing comma's to allow easy substring matching.  $roles = array();  if (isset($form_state['values']['roles'])) {    foreach ($form_state['values']['roles'] as $id => $checked) {      if ($checked) {        $roles[] = $id;      }    }  }  if (!empty($form_state['values']['default_format'])) {    $roles = ','. implode(',', array_keys(user_roles())) .',';  }  else {    $roles = ','. implode(',', $roles) .',';  }  db_query("UPDATE {filter_formats} SET cache = %d, name='%s', roles = '%s' WHERE format = %d", $cache, $name, $roles, $format);  cache_clear_all($format .':', 'cache_filter', TRUE);  // If a new filter was added, return to the main list of filters. Otherwise, stay on edit filter page to show new changes.  $return = 'admin/settings/filters';  if (!empty($new)) {    $return .= '/'. $format;  }  $form_state['redirect'] = $return;  return;}/** * Menu callback; confirm deletion of a format. * * @ingroup forms * @see filter_admin_delete_submit() */function filter_admin_delete() {  $format = arg(4);  $format = db_fetch_object(db_query('SELECT * FROM {filter_formats} WHERE format = %d', $format));  if ($format) {    if ($format->format != variable_get('filter_default_format', 1)) {      $form['format'] = array('#type' => 'hidden', '#value' => $format->format);      $form['name'] = array('#type' => 'hidden', '#value' => $format->name);      return confirm_form($form, t('Are you sure you want to delete the input format %format?', array('%format' => $format->name)), 'admin/settings/filters', t('If you have any content left in this input format, it will be switched to the default input format. This action cannot be undone.'), t('Delete'), t('Cancel'));    }    else {      drupal_set_message(t('The default format cannot be deleted.'));      drupal_goto('admin/settings/filters');    }  }  else {    drupal_not_found();  }}/** * Process filter delete form submission. */function filter_admin_delete_submit($form, &$form_state) {  db_query("DELETE FROM {filter_formats} WHERE format = %d", $form_state['values']['format']);  db_query("DELETE FROM {filters} WHERE format = %d", $form_state['values']['format']);  $default = variable_get('filter_default_format', 1);  // Replace existing instances of the deleted format with the default format.  db_query("UPDATE {node_revisions} SET format = %d WHERE format = %d", $default, $form_state['values']['format']);  db_query("UPDATE {comments} SET format = %d WHERE format = %d", $default, $form_state['values']['format']);  db_query("UPDATE {boxes} SET format = %d WHERE format = %d", $default, $form_state['values']['format']);  cache_clear_all($form_state['values']['format'] .':', 'cache_filter', TRUE);  drupal_set_message(t('Deleted input format %format.', array('%format' => $form_state['values']['name'])));  $form_state['redirect'] = 'admin/settings/filters';  return;}/** * Menu callback; display settings defined by a format's filters. */function filter_admin_configure_page($format) {  drupal_set_title(t("Configure %format", array('%format' => $format->name)));  return drupal_get_form('filter_admin_configure', $format);}/** * Build a form to change the settings for a format's filters. * * @ingroup forms */function filter_admin_configure(&$form_state, $format) {  $list = filter_list_format($format->format);  $form = array();  foreach ($list as $filter) {    $form_module = module_invoke($filter->module, 'filter', 'settings', $filter->delta, $format->format);    if (isset($form_module) && is_array($form_module)) {      $form = array_merge($form, $form_module);    }  }  if (!empty($form)) {    $form = system_settings_form($form);  }  else {    $form['error'] = array('#value' => t('No settings are available.'));  }  $form['format'] = array('#type' => 'hidden', '#value' => $format->format);  $form['#submit'][] = 'filter_admin_configure_submit';  return $form;}/** * Clear the filter's cache when configuration settings are saved. */function filter_admin_configure_submit($form, &$form_state) {  cache_clear_all($form_state['values']['format'] .':', 'cache_filter', TRUE);}/** * Menu callback; display form for ordering filters for a format. */function filter_admin_order_page($format) {  drupal_set_title(t("Rearrange %format", array('%format' => $format->name)));  return drupal_get_form('filter_admin_order', $format);}/** * Build the form for ordering filters for a format. * * @ingroup forms * @see theme_filter_admin_order() * @see filter_admin_order_submit() */function filter_admin_order(&$form_state, $format = NULL) {  // Get list (with forced refresh).  $filters = filter_list_format($format->format);  $form['weights'] = array('#tree' => TRUE);  foreach ($filters as $id => $filter) {    $form['names'][$id] = array('#value' => $filter->name);    $form['weights'][$id] = array('#type' => 'weight', '#default_value' => $filter->weight);  }  $form['format'] = array('#type' => 'hidden', '#value' => $format->format);  $form['submit'] = array('#type' => 'submit', '#value' => t('Save configuration'));  return $form;}/** * Theme filter order configuration form. * * @ingroup themeable */function theme_filter_admin_order($form) {  $header = array(t('Name'), t('Weight'));  $rows = array();  foreach (element_children($form['names']) as $id) {    // Don't take form control structures.    if (is_array($form['names'][$id])) {      $form['weights'][$id]['#attributes']['class'] = 'filter-order-weight';      $rows[] = array(        'data' => array(drupal_render($form['names'][$id]), drupal_render($form['weights'][$id])),        'class' => 'draggable',      );    }  }  $output = theme('table', $header, $rows, array('id' => 'filter-order'));  $output .= drupal_render($form);  drupal_add_tabledrag('filter-order', 'order', 'sibling', 'filter-order-weight', NULL, NULL, FALSE);  return $output;}/** * Process filter order configuration form submission. */function filter_admin_order_submit($form, &$form_state) {  foreach ($form_state['values']['weights'] as $id => $weight) {    list($module, $delta) = explode('/', $id);    db_query("UPDATE {filters} SET weight = %d WHERE format = %d AND module = '%s' AND delta = %d", $weight, $form_state['values']['format'], $module, $delta);  }  drupal_set_message(t('The filter ordering has been saved.'));  cache_clear_all($form_state['values']['format'] .':', 'cache_filter', TRUE);}
<?php// $Id$/** * @file forum-icon.tpl.php * Display an appropriate icon for a forum post. * * Available variables: * - $new_posts: Indicates whether or not the topic contains new posts. * - $icon: The icon to display. May be one of 'hot', 'hot-new', 'new', *   'default', 'closed', or 'sticky'. * * @see template_preprocess_forum_icon() * @see theme_forum_icon() */?><?php if ($new_posts): ?>  <a name="new"><?php endif; ?><?php print theme('image', "misc/forum-$icon.png") ?><?php if ($new_posts): ?>  </a><?php endif; ?>
<?php// $Id$/** * @file * The core that allows content to be submitted to the site. Modules and scripts may * programmatically submit nodes using the usual form API pattern. *//** * Nodes changed before this time are always marked as read. * * Nodes changed after this time may be marked new, updated, or read, depending * on their state for the current user. Defaults to 30 days ago. */define('NODE_NEW_LIMIT', time() - 30 * 24 * 60 * 60);define('NODE_BUILD_NORMAL', 0);define('NODE_BUILD_PREVIEW', 1);define('NODE_BUILD_SEARCH_INDEX', 2);define('NODE_BUILD_SEARCH_RESULT', 3);define('NODE_BUILD_RSS', 4);define('NODE_BUILD_PRINT', 5);/** * Implementation of hook_help(). */function node_help($path, $arg) {  // Remind site administrators about the {node_access} table being flagged  // for rebuild. We don't need to issue the message on the confirm form, or  // while the rebuild is being processed.  if ($path != 'admin/content/node-settings/rebuild' && $path != 'batch' && strpos($path, '#') === FALSE      && user_access('access administration pages') && node_access_needs_rebuild()) {    if ($path == 'admin/content/node-settings') {      $message = t('The content access permissions need to be rebuilt.');    }    else {      $message = t('The content access permissions need to be rebuilt. Please visit <a href="@node_access_rebuild">this page</a>.', array('@node_access_rebuild' => url('admin/content/node-settings/rebuild')));    }    drupal_set_message($message, 'error');  }  switch ($path) {    case 'admin/help#node':      $output = '<p>'. t('The node module manages content on your site, and stores all posts (regardless of type) as a "node". In addition to basic publishing settings, including whether the post has been published, promoted to the site front page, or should remain present (or sticky) at the top of lists, the node module also records basic information about the author of a post. Optional revision control over edits is available. For additional functionality, the node module is often extended by other modules.') .'</p>';      $output .= '<p>'. t('Though each post on your site is a node, each post is also of a particular <a href="@content-type">content type</a>. <a href="@content-type">Content types</a> are used to define the characteristics of a post, including the title and description of the fields displayed on its add and edit pages. Each content type may have different default settings for <em>Publishing options</em> and other workflow controls. By default, the two content types in a standard Drupal installation are <em>Page</em> and <em>Story</em>. Use the <a href="@content-type">content types page</a> to add new or edit existing content types. Additional content types also become available as you enable additional core, contributed and custom modules.', array('@content-type' => url('admin/content/types'))) .'</p>';      $output .= '<p>'. t('The administrative <a href="@content">content page</a> allows you to review and manage your site content. The <a href="@post-settings">post settings page</a> sets certain options for the display of posts. The node module makes a number of permissions available for each content type, which may be set by role on the <a href="@permissions">permissions page</a>.', array('@content' => url('admin/content/node'), '@post-settings' => url('admin/content/node-settings'), '@permissions' => url('admin/user/permissions'))) .'</p>';      $output .= '<p>'. t('For more information, see the online handbook entry for <a href="@node">Node module</a>.', array('@node' => 'http://drupal.org/handbook/modules/node/')) .'</p>';      return $output;    case 'admin/content/node':      return ' '; // Return a non-null value so that the 'more help' link is shown.    case 'admin/content/types':      return '<p>'. t('Below is a list of all the content types on your site. All posts that exist on your site are instances of one of these content types.') .'</p>';    case 'admin/content/types/add':      return '<p>'. t('To create a new content type, enter the human-readable name, the machine-readable name, and all other relevant fields that are on this page. Once created, users of your site will be able to create posts that are instances of this content type.') .'</p>';    case 'node/%/revisions':      return '<p>'. t('The revisions let you track differences between multiple versions of a post.') .'</p>';    case 'node/%/edit':      $node = node_load($arg[1]);      $type = node_get_types('type', $node->type);      return (!empty($type->help) ? '<p>'. filter_xss_admin($type->help) .'</p>' : '');  }  if ($arg[0] == 'node' && $arg[1] == 'add' && $arg[2]) {    $type = node_get_types('type', str_replace('-', '_', $arg[2]));    return (!empty($type->help) ? '<p>'. filter_xss_admin($type->help) .'</p>' : '');  }}/** * Implementation of hook_theme() */function node_theme() {  return array(    'node' => array(      'arguments' => array('node' => NULL, 'teaser' => FALSE, 'page' => FALSE),      'template' => 'node',    ),    'node_list' => array(      'arguments' => array('items' => NULL, 'title' => NULL),    ),    'node_search_admin' => array(      'arguments' => array('form' => NULL),    ),    'node_filter_form' => array(      'arguments' => array('form' => NULL),      'file' => 'node.admin.inc',    ),    'node_filters' => array(      'arguments' => array('form' => NULL),      'file' => 'node.admin.inc',    ),    'node_admin_nodes' => array(      'arguments' => array('form' => NULL),      'file' => 'node.admin.inc',    ),    'node_add_list' => array(      'arguments' => array('content' => NULL),      'file' => 'node.pages.inc',    ),    'node_form' => array(      'arguments' => array('form' => NULL),      'file' => 'node.pages.inc',    ),    'node_preview' => array(      'arguments' => array('node' => NULL),      'file' => 'node.pages.inc',    ),    'node_log_message' => array(      'arguments' => array('log' => NULL),    ),    'node_submitted' => array(      'arguments' => array('node' => NULL),    ),  );}/** * Implementation of hook_cron(). */function node_cron() {  db_query('DELETE FROM {history} WHERE timestamp < %d', NODE_NEW_LIMIT);}/** * Gather a listing of links to nodes. * * @param $result *   A DB result object from a query to fetch node objects. If your query *   joins the <code>node_comment_statistics</code> table so that the *   <code>comment_count</code> field is available, a title attribute will *   be added to show the number of comments. * @param $title *   A heading for the resulting list. * * @return *   An HTML list suitable as content for a block, or FALSE if no result can *   fetch from DB result object. */function node_title_list($result, $title = NULL) {  $items = array();  $num_rows = FALSE;  while ($node = db_fetch_object($result)) {    $items[] = l($node->title, 'node/'. $node->nid, !empty($node->comment_count) ? array('attributes' => array('title' => format_plural($node->comment_count, '1 comment', '@count comments'))) : array());    $num_rows = TRUE;  }  return $num_rows ? theme('node_list', $items, $title) : FALSE;}/** * Format a listing of links to nodes. * * @ingroup themeable */function theme_node_list($items, $title = NULL) {  return theme('item_list', $items, $title);}/** * Update the 'last viewed' timestamp of the specified node for current user. */function node_tag_new($nid) {  global $user;  if ($user->uid) {    if (node_last_viewed($nid)) {      db_query('UPDATE {history} SET timestamp = %d WHERE uid = %d AND nid = %d', time(), $user->uid, $nid);    }    else {      @db_query('INSERT INTO {history} (uid, nid, timestamp) VALUES (%d, %d, %d)', $user->uid, $nid, time());    }  }}/** * Retrieves the timestamp at which the current user last viewed the * specified node. */function node_last_viewed($nid) {  global $user;  static $history;  if (!isset($history[$nid])) {    $history[$nid] = db_fetch_object(db_query("SELECT timestamp FROM {history} WHERE uid = %d AND nid = %d", $user->uid, $nid));  }  return (isset($history[$nid]->timestamp) ? $history[$nid]->timestamp : 0);}/** * Decide on the type of marker to be displayed for a given node. * * @param $nid *   Node ID whose history supplies the "last viewed" timestamp. * @param $timestamp *   Time which is compared against node's "last viewed" timestamp. * @return *   One of the MARK constants. */function node_mark($nid, $timestamp) {  global $user;  static $cache;  if (!$user->uid) {    return MARK_READ;  }  if (!isset($cache[$nid])) {    $cache[$nid] = node_last_viewed($nid);  }  if ($cache[$nid] == 0 && $timestamp > NODE_NEW_LIMIT) {    return MARK_NEW;  }  elseif ($timestamp > $cache[$nid] && $timestamp > NODE_NEW_LIMIT) {    return MARK_UPDATED;  }  return MARK_READ;}/** * See if the user used JS to submit a teaser. */function node_teaser_js(&$form, &$form_state) {  if (isset($form['#post']['teaser_js'])) {    // Glue the teaser to the body.    if (trim($form_state['values']['teaser_js'])) {      // Space the teaser from the body      $body = trim($form_state['values']['teaser_js']) ."\r\n<!--break-->\r\n". trim($form_state['values']['body']);    }    else {      // Empty teaser, no spaces.      $body = '<!--break-->'. $form_state['values']['body'];    }    // Pass updated body value on to preview/submit form processing.    form_set_value($form['body'], $body, $form_state);    // Pass updated body value back onto form for those cases    // in which the form is redisplayed.    $form['body']['#value'] = $body;  }  return $form;}/** * Ensure value of "teaser_include" checkbox is consistent with other form data. * * This handles two situations in which an unchecked checkbox is rejected: * *   1. The user defines a teaser (summary) but it is empty; *   2. The user does not define a teaser (summary) (in this case an *      unchecked checkbox would cause the body to be empty, or missing *      the auto-generated teaser). * * If JavaScript is active then it is used to force the checkbox to be * checked when hidden, and so the second case will not arise. * * In either case a warning message is output. */function node_teaser_include_verify(&$form, &$form_state) {  $message = '';  // $form['#post'] is set only when the form is built for preview/submit.  if (isset($form['#post']['body']) && isset($form_state['values']['teaser_include']) && !$form_state['values']['teaser_include']) {    // "teaser_include" checkbox is present and unchecked.    if (strpos($form_state['values']['body'], '<!--break-->') === 0) {      // Teaser is empty string.      $message = t('You specified that the summary should not be shown when this post is displayed in full view. This setting is ignored when the summary is empty.');    }    elseif (strpos($form_state['values']['body'], '<!--break-->') === FALSE) {      // Teaser delimiter is not present in the body.      $message = t('You specified that the summary should not be shown when this post is displayed in full view. This setting has been ignored since you have not defined a summary for the post. (To define a summary, insert the delimiter "&lt;!--break--&gt;" (without the quotes) in the Body of the post to indicate the end of the summary and the start of the main content.)');    }    if (!empty($message)) {      drupal_set_message($message, 'warning');      // Pass new checkbox value on to preview/submit form processing.      form_set_value($form['teaser_include'], 1, $form_state);      // Pass new checkbox value back onto form for those cases      // in which form is redisplayed.      $form['teaser_include']['#value'] = 1;    }  }  return $form;}/** * Generate a teaser for a node body. * * If the end of the teaser is not indicated using the <!--break--> delimiter * then we generate the teaser automatically, trying to end it at a sensible * place such as the end of a paragraph, a line break, or the end of a * sentence (in that order of preference). * * @param $body *   The content for which a teaser will be generated. * @param $format *   The format of the content. If the content contains PHP code, we do not *   split it up to prevent parse errors. If the line break filter is present *   then we treat newlines embedded in $body as line breaks. * @param $size *   The desired character length of the teaser. If omitted, the default *   value will be used. Ignored if the special delimiter is present *   in $body. * @return *   The generated teaser. */function node_teaser($body, $format = NULL, $size = NULL) {  if (!isset($size)) {    $size = variable_get('teaser_length', 600);  }  // Find where the delimiter is in the body  $delimiter = strpos($body, '<!--break-->');  // If the size is zero, and there is no delimiter, the entire body is the teaser.  if ($size == 0 && $delimiter === FALSE) {    return $body;  }  // If a valid delimiter has been specified, use it to chop off the teaser.  if ($delimiter !== FALSE) {    return substr($body, 0, $delimiter);  }  // We check for the presence of the PHP evaluator filter in the current  // format. If the body contains PHP code, we do not split it up to prevent  // parse errors.  if (isset($format)) {    $filters = filter_list_format($format);    if (isset($filters['php/0']) && strpos($body, '<?') !== FALSE) {      return $body;    }  }  // If we have a short body, the entire body is the teaser.  if (drupal_strlen($body) <= $size) {    return $body;  }  // If the delimiter has not been specified, try to split at paragraph or  // sentence boundaries.  // The teaser may not be longer than maximum length specified. Initial slice.  $teaser = truncate_utf8($body, $size);  // Store the actual length of the UTF8 string -- which might not be the same  // as $size.  $max_rpos = strlen($teaser);  // How much to cut off the end of the teaser so that it doesn't end in the  // middle of a paragraph, sentence, or word.  // Initialize it to maximum in order to find the minimum.  $min_rpos = $max_rpos;  // Store the reverse of the teaser.  We use strpos on the reversed needle and  // haystack for speed and convenience.  $reversed = strrev($teaser);  // Build an array of arrays of break points grouped by preference.  $break_points = array();  // A paragraph near the end of sliced teaser is most preferable.  $break_points[] = array('</p>' => 0);  // If no complete paragraph then treat line breaks as paragraphs.  $line_breaks = array('<br />' => 6, '<br>' => 4);  // Newline only indicates a line break if line break converter  // filter is present.  if (isset($filters['filter/1'])) {    $line_breaks["\n"] = 1;  }  $break_points[] = $line_breaks;  // If the first paragraph is too long, split at the end of a sentence.  $break_points[] = array('. ' => 1, '! ' => 1, '? ' => 1, '' => 0, ' ' => 1);  // Iterate over the groups of break points until a break point is found.  foreach ($break_points as $points) {    // Look for each break point, starting at the end of the teaser.    foreach ($points as $point => $offset) {      // The teaser is already reversed, but the break point isn't.      $rpos = strpos($reversed, strrev($point));      if ($rpos !== FALSE) {        $min_rpos = min($rpos + $offset, $min_rpos);      }    }    // If a break point was found in this group, slice and return the teaser.    if ($min_rpos !== $max_rpos) {      // Don't slice with length 0.  Length must be <0 to slice from RHS.      return ($min_rpos === 0) ? $teaser : substr($teaser, 0, 0 - $min_rpos);    }  }  // If a break point was not found, still return a teaser.  return $teaser;}/** * Builds a list of available node types, and returns all of part of this list * in the specified format. * * @param $op *   The format in which to return the list. When this is set to 'type', *   'module', or 'name', only the specified node type is returned. When set to *   'types' or 'names', all node types are returned. * @param $node *   A node object, array, or string that indicates the node type to return. *   Leave at default value (NULL) to return a list of all node types. * @param $reset *   Whether or not to reset this function's internal cache (defaults to *   FALSE). * * @return *   Either an array of all available node types, or a single node type, in a *   variable format. Returns FALSE if the node type is not found. */function node_get_types($op = 'types', $node = NULL, $reset = FALSE) {  static $_node_types, $_node_names;  if ($reset || !isset($_node_types)) {    list($_node_types, $_node_names) = _node_types_build();  }  if ($node) {    if (is_array($node)) {      $type = $node['type'];    }    elseif (is_object($node)) {      $type = $node->type;    }    elseif (is_string($node)) {      $type = $node;    }    if (!isset($_node_types[$type])) {      return FALSE;    }  }  switch ($op) {    case 'types':      return $_node_types;    case 'type':      return isset($_node_types[$type]) ? $_node_types[$type] : FALSE;    case 'module':      return isset($_node_types[$type]->module) ? $_node_types[$type]->module : FALSE;    case 'names':      return $_node_names;    case 'name':      return isset($_node_names[$type]) ? $_node_names[$type] : FALSE;  }}/** * Resets the database cache of node types, and saves all new or non-modified * module-defined node types to the database. */function node_types_rebuild() {  _node_types_build();  $node_types = node_get_types('types', NULL, TRUE);  foreach ($node_types as $type => $info) {    if (!empty($info->is_new)) {      node_type_save($info);    }    if (!empty($info->disabled)) {      node_type_delete($info->type);    }  }  _node_types_build();}/** * Saves a node type to the database. * * @param $info *   The node type to save, as an object. * * @return *   Status flag indicating outcome of the operation. */function node_type_save($info) {  $is_existing = FALSE;  $existing_type = !empty($info->old_type) ? $info->old_type : $info->type;  $is_existing = db_result(db_query("SELECT COUNT(*) FROM {node_type} WHERE type = '%s'", $existing_type));  if (!isset($info->help)) {    $info->help = '';  }  if (!isset($info->min_word_count)) {    $info->min_word_count = 0;  }  if (!isset($info->body_label)) {    $info->body_label = '';  }  if ($is_existing) {    db_query("UPDATE {node_type} SET type = '%s', name = '%s', module = '%s', has_title = %d, title_label = '%s', has_body = %d, body_label = '%s', description = '%s', help = '%s', min_word_count = %d, custom = %d, modified = %d, locked = %d WHERE type = '%s'", $info->type, $info->name, $info->module, $info->has_title, $info->title_label, $info->has_body, $info->body_label, $info->description, $info->help, $info->min_word_count, $info->custom, $info->modified, $info->locked, $existing_type);    module_invoke_all('node_type', 'update', $info);    return SAVED_UPDATED;  }  else {    db_query("INSERT INTO {node_type} (type, name, module, has_title, title_label, has_body, body_label, description, help, min_word_count, custom, modified, locked, orig_type) VALUES ('%s', '%s', '%s', %d, '%s', %d, '%s', '%s', '%s', %d, %d, %d, %d, '%s')", $info->type, $info->name, $info->module, $info->has_title, $info->title_label, $info->has_body, $info->body_label, $info->description, $info->help, $info->min_word_count, $info->custom, $info->modified, $info->locked, $info->orig_type);    module_invoke_all('node_type', 'insert', $info);    return SAVED_NEW;  }}/** * Deletes a node type from the database. * * @param $type *   The machine-readable name of the node type to be deleted. */function node_type_delete($type) {  $info = node_get_types('type', $type);  db_query("DELETE FROM {node_type} WHERE type = '%s'", $type);  module_invoke_all('node_type', 'delete', $info);}/** * Updates all nodes of one type to be of another type. * * @param $old_type *   The current node type of the nodes. * @param $type *   The new node type of the nodes. * * @return *   The number of nodes whose node type field was modified. */function node_type_update_nodes($old_type, $type) {  db_query("UPDATE {node} SET type = '%s' WHERE type = '%s'", $type, $old_type);  return db_affected_rows();}/** * Builds and returns the list of available node types. * * The list of types is built by querying hook_node_info() in all modules, and * by comparing this information with the node types in the {node_type} table. * */function _node_types_build() {  $_node_types = array();  $_node_names = array();  $info_array = module_invoke_all('node_info');  foreach ($info_array as $type => $info) {    $info['type'] = $type;    $_node_types[$type] = (object) _node_type_set_defaults($info);    $_node_names[$type] = $info['name'];  }  $type_result = db_query(db_rewrite_sql('SELECT nt.type, nt.* FROM {node_type} nt ORDER BY nt.type ASC', 'nt', 'type'));  while ($type_object = db_fetch_object($type_result)) {    // Check for node types from disabled modules and mark their types for removal.    // Types defined by the node module in the database (rather than by a separate    // module using hook_node_info) have a module value of 'node'.    if ($type_object->module != 'node' && empty($info_array[$type_object->type])) {      $type_object->disabled = TRUE;    }    if (!isset($_node_types[$type_object->type]) || $type_object->modified) {      $_node_types[$type_object->type] = $type_object;      $_node_names[$type_object->type] = $type_object->name;      if ($type_object->type != $type_object->orig_type) {        unset($_node_types[$type_object->orig_type]);        unset($_node_names[$type_object->orig_type]);      }    }  }  asort($_node_names);  return array($_node_types, $_node_names);}/** * Set default values for a node type defined through hook_node_info(). */function _node_type_set_defaults($info) {  if (!isset($info['has_title'])) {    $info['has_title'] = TRUE;  }  if ($info['has_title'] && !isset($info['title_label'])) {    $info['title_label'] = t('Title');  }  if (!isset($info['has_body'])) {    $info['has_body'] = TRUE;  }  if ($info['has_body'] && !isset($info['body_label'])) {    $info['body_label'] = t('Body');  }  if (!isset($info['help'])) {    $info['help'] = '';  }  if (!isset($info['min_word_count'])) {    $info['min_word_count'] = 0;  }  if (!isset($info['custom'])) {    $info['custom'] = FALSE;  }  if (!isset($info['modified'])) {    $info['modified'] = FALSE;  }  if (!isset($info['locked'])) {    $info['locked'] = TRUE;  }  $info['orig_type'] = $info['type'];  $info['is_new'] = TRUE;  return $info;}/** * Determine whether a node hook exists. * * @param &$node *   Either a node object, node array, or a string containing the node type. * @param $hook *   A string containing the name of the hook. * @return *   TRUE iff the $hook exists in the node type of $node. */function node_hook(&$node, $hook) {  $module = node_get_types('module', $node);  if ($module == 'node') {    $module = 'node_content'; // Avoid function name collisions.  }  return module_hook($module, $hook);}/** * Invoke a node hook. * * @param &$node *   Either a node object, node array, or a string containing the node type. * @param $hook *   A string containing the name of the hook. * @param $a2, $a3, $a4 *   Arguments to pass on to the hook, after the $node argument. * @return *   The returned value of the invoked hook. */function node_invoke(&$node, $hook, $a2 = NULL, $a3 = NULL, $a4 = NULL) {  if (node_hook($node, $hook)) {    $module = node_get_types('module', $node);    if ($module == 'node') {      $module = 'node_content'; // Avoid function name collisions.    }    $function = $module .'_'. $hook;    return ($function($node, $a2, $a3, $a4));  }}/** * Invoke a hook_nodeapi() operation in all modules. * * @param &$node *   A node object. * @param $op *   A string containing the name of the nodeapi operation. * @param $a3, $a4 *   Arguments to pass on to the hook, after the $node and $op arguments. * @return *   The returned value of the invoked hooks. */function node_invoke_nodeapi(&$node, $op, $a3 = NULL, $a4 = NULL) {  $return = array();  foreach (module_implements('nodeapi') as $name) {    $function = $name .'_nodeapi';    $result = $function($node, $op, $a3, $a4);    if (isset($result) && is_array($result)) {      $return = array_merge($return, $result);    }    else if (isset($result)) {      $return[] = $result;    }  }  return $return;}/** * Load a node object from the database. * * @param $param *   Either the nid of the node or an array of conditions to match against in the database query * @param $revision *   Which numbered revision to load. Defaults to the current version. * @param $reset *   Whether to reset the internal node_load cache. * * @return *   A fully-populated node object. */function node_load($param = array(), $revision = NULL, $reset = NULL) {  static $nodes = array();  if ($reset) {    $nodes = array();  }  $cachable = ($revision == NULL);  $arguments = array();  if (is_numeric($param)) {    if ($cachable) {      // Is the node statically cached?      if (isset($nodes[$param])) {        return is_object($nodes[$param]) ? drupal_clone($nodes[$param]) : $nodes[$param];      }    }    $cond = 'n.nid = %d';    $arguments[] = $param;  }  elseif (is_array($param)) {    // Turn the conditions into a query.    foreach ($param as $key => $value) {      $cond[] = 'n.'. db_escape_table($key) ." = '%s'";      $arguments[] = $value;    }    $cond = implode(' AND ', $cond);  }  else {    return FALSE;  }  // Retrieve a field list based on the site's schema.  $fields = drupal_schema_fields_sql('node', 'n');  $fields = array_merge($fields, drupal_schema_fields_sql('node_revisions', 'r'));  $fields = array_merge($fields, array('u.name', 'u.picture', 'u.data'));  // Remove fields not needed in the query: n.vid and r.nid are redundant,  // n.title is unnecessary because the node title comes from the  // node_revisions table.  We'll keep r.vid, r.title, and n.nid.  $fields = array_diff($fields, array('n.vid', 'n.title', 'r.nid'));  $fields = implode(', ', $fields);  // Rename timestamp field for clarity.  $fields = str_replace('r.timestamp', 'r.timestamp AS revision_timestamp', $fields);  // Change name of revision uid so it doesn't conflict with n.uid.  $fields = str_replace('r.uid', 'r.uid AS revision_uid', $fields);  // Retrieve the node.  // No db_rewrite_sql is applied so as to get complete indexing for search.  if ($revision) {    array_unshift($arguments, $revision);    $node = db_fetch_object(db_query('SELECT '. $fields .' FROM {node} n INNER JOIN {users} u ON u.uid = n.uid INNER JOIN {node_revisions} r ON r.nid = n.nid AND r.vid = %d WHERE '. $cond, $arguments));  }  else {    $node = db_fetch_object(db_query('SELECT '. $fields .' FROM {node} n INNER JOIN {users} u ON u.uid = n.uid INNER JOIN {node_revisions} r ON r.vid = n.vid WHERE '. $cond, $arguments));  }  if ($node && $node->nid) {    // Call the node specific callback (if any) and piggy-back the    // results to the node or overwrite some values.    if ($extra = node_invoke($node, 'load')) {      foreach ($extra as $key => $value) {        $node->$key = $value;      }    }    if ($extra = node_invoke_nodeapi($node, 'load')) {      foreach ($extra as $key => $value) {        $node->$key = $value;      }    }    if ($cachable) {      $nodes[$node->nid] = is_object($node) ? drupal_clone($node) : $node;    }  }  return $node;}/** * Perform validation checks on the given node. */function node_validate($node, $form = array()) {  // Convert the node to an object, if necessary.  $node = (object)$node;  $type = node_get_types('type', $node);  // Make sure the body has the minimum number of words.  // TODO : use a better word counting algorithm that will work in other languages  if (!empty($type->min_word_count) && isset($node->body) && count(explode(' ', $node->body)) < $type->min_word_count) {    form_set_error('body', t('The body of your @type is too short. You need at least %words words.', array('%words' => $type->min_word_count, '@type' => $type->name)));  }  if (isset($node->nid) && (node_last_changed($node->nid) > $node->changed)) {    form_set_error('changed', t('This content has been modified by another user, changes cannot be saved.'));  }  if (user_access('administer nodes')) {    // Validate the "authored by" field.    if (!empty($node->name) && !($account = user_load(array('name' => $node->name)))) {      // The use of empty() is mandatory in the context of usernames      // as the empty string denotes the anonymous user. In case we      // are dealing with an anonymous user we set the user ID to 0.      form_set_error('name', t('The username %name does not exist.', array('%name' => $node->name)));    }    // Validate the "authored on" field. As of PHP 5.1.0, strtotime returns FALSE instead of -1 upon failure.    if (!empty($node->date) && strtotime($node->date) <= 0) {      form_set_error('date', t('You have to specify a valid date.'));    }  }  // Do node-type-specific validation checks.  node_invoke($node, 'validate', $form);  node_invoke_nodeapi($node, 'validate', $form);}/** * Prepare node for save and allow modules to make changes. */function node_submit($node) {  global $user;  // Convert the node to an object, if necessary.  $node = (object)$node;  // Generate the teaser, but only if it hasn't been set (e.g. by a  // module-provided 'teaser' form item).  if (!isset($node->teaser)) {    if (isset($node->body)) {      $node->teaser = node_teaser($node->body, isset($node->format) ? $node->format : NULL);      // Chop off the teaser from the body if needed. The teaser_include      // property might not be set (eg. in Blog API postings), so only act on      // it, if it was set with a given value.      if (isset($node->teaser_include) && !$node->teaser_include && $node->teaser == substr($node->body, 0, strlen($node->teaser))) {        $node->body = substr($node->body, strlen($node->teaser));      }    }    else {      $node->teaser = '';      $node->format = 0;    }  }  if (user_access('administer nodes')) {    // Populate the "authored by" field.    if ($account = user_load(array('name' => $node->name))) {      $node->uid = $account->uid;    }    else {      $node->uid = 0;    }  }  $node->created = !empty($node->date) ? strtotime($node->date) : time();  $node->validated = TRUE;  return $node;}/** * Save a node object into the database. */function node_save(&$node) {  // Let modules modify the node before it is saved to the database.  node_invoke_nodeapi($node, 'presave');  global $user;  // Insert a new node.  $node->is_new = empty($node->nid);  if ($node->is_new || !empty($node->revision)) {    // When inserting a node, $node->log must be set because    // {node_revisions}.log does not (and cannot) have a default    // value.  If the user does not have permission to create    // revisions, however, the form will not contain an element for    // log so $node->log will be unset at this point.    if (!isset($node->log)) {      $node->log = '';    }  }  elseif (empty($node->log)) {    // When updating a node, however, avoid clobbering an existing    // log entry with an empty one.    unset($node->log);  }  // For the same reasons, make sure we have $node->teaser and  // $node->body set.  if (!isset($node->teaser)) {    $node->teaser = '';  }  if (!isset($node->body)) {    $node->body = '';  }  // Save the old revision if needed.  if (!$node->is_new && !empty($node->revision) && $node->vid) {    $node->old_vid = $node->vid;  }  $time = time();  if (empty($node->created)) {    $node->created = $time;  }  // The changed timestamp is always updated for bookkeeping purposes (revisions, searching, ...)  $node->changed = $time;  $node->timestamp = $time;  $node->format = isset($node->format) ? $node->format : FILTER_FORMAT_DEFAULT;  // Generate the node table query and the node_revisions table query.  if ($node->is_new) {    _node_save_revision($node, $user->uid);    drupal_write_record('node', $node);    db_query('UPDATE {node_revisions} SET nid = %d WHERE vid = %d', $node->nid, $node->vid);    $op = 'insert';  }  else {    drupal_write_record('node', $node, 'nid');    if (!empty($node->revision)) {      _node_save_revision($node, $user->uid);      db_query('UPDATE {node} SET vid = %d WHERE nid = %d', $node->vid, $node->nid);    }    else {      _node_save_revision($node, $user->uid, 'vid');    }    $op = 'update';  }  // Call the node specific callback (if any).  node_invoke($node, $op);  node_invoke_nodeapi($node, $op);  // Update the node access table for this node.  node_access_acquire_grants($node);  // Clear the page and block caches.  cache_clear_all();}/** * Helper function to save a revision with the uid of the current user. * * Node is taken by reference, becuse drupal_write_record() updates the * $node with the revision id, and we need to pass that back to the caller. */function _node_save_revision(&$node, $uid, $update = NULL) {  $temp_uid = $node->uid;  $node->uid = $uid;  if (isset($update)) {    drupal_write_record('node_revisions', $node, $update);  }  else {    drupal_write_record('node_revisions', $node);  }  $node->uid = $temp_uid;}/** * Delete a node. */function node_delete($nid) {  // Clear the cache before the load, so if multiple nodes are deleted, the  // memory will not fill up with nodes (possibly) already removed.  $node = node_load($nid, NULL, TRUE);  if (node_access('delete', $node)) {    db_query('DELETE FROM {node} WHERE nid = %d', $node->nid);    db_query('DELETE FROM {node_revisions} WHERE nid = %d', $node->nid);    // Call the node-specific callback (if any):    node_invoke($node, 'delete');    node_invoke_nodeapi($node, 'delete');    // Clear the page and block caches.    cache_clear_all();    // Remove this node from the search index if needed.    if (function_exists('search_wipe')) {      search_wipe($node->nid, 'node');    }    watchdog('content', '@type: deleted %title.', array('@type' => $node->type, '%title' => $node->title));    drupal_set_message(t('@type %title has been deleted.', array('@type' => node_get_types('name', $node), '%title' => $node->title)));  }}/** * Generate a display of the given node. * * @param $node *   A node array or node object. * @param $teaser *   Whether to display the teaser only or the full form. * @param $page *   Whether the node is being displayed by itself as a page. * @param $links *   Whether or not to display node links. Links are omitted for node previews. * * @return *   An HTML representation of the themed node. */function node_view($node, $teaser = FALSE, $page = FALSE, $links = TRUE) {  $node = (object)$node;  $node = node_build_content($node, $teaser, $page);  if ($links) {    $node->links = module_invoke_all('link', 'node', $node, $teaser);    drupal_alter('link', $node->links, $node);  }  // Set the proper node part, then unset unused $node part so that a bad  // theme can not open a security hole.  $content = drupal_render($node->content);  if ($teaser) {    $node->teaser = $content;    unset($node->body);  }  else {    $node->body = $content;    unset($node->teaser);  }  // Allow modules to modify the fully-built node.  node_invoke_nodeapi($node, 'alter', $teaser, $page);  return theme('node', $node, $teaser, $page);}/** * Apply filters and build the node's standard elements. */function node_prepare($node, $teaser = FALSE) {  // First we'll overwrite the existing node teaser and body with  // the filtered copies! Then, we'll stick those into the content  // array and set the read more flag if appropriate.  $node->readmore = $node->teaser != $node->body;  if ($teaser == FALSE) {    $node->body = check_markup($node->body, $node->format, FALSE);  }  else {    $node->teaser = check_markup($node->teaser, $node->format, FALSE);  }  $node->content['body'] = array(    '#value' => $teaser ? $node->teaser : $node->body,    '#weight' => 0,  );  return $node;}/** * Builds a structured array representing the node's content. * * @param $node *   A node object. * @param $teaser *   Whether to display the teaser only, as on the main page. * @param $page *   Whether the node is being displayed by itself as a page. * * @return *   An structured array containing the individual elements *   of the node's body. */function node_build_content($node, $teaser = FALSE, $page = FALSE) {  // The build mode identifies the target for which the node is built.  if (!isset($node->build_mode)) {    $node->build_mode = NODE_BUILD_NORMAL;  }  // Remove the delimiter (if any) that separates the teaser from the body.  $node->body = isset($node->body) ? str_replace('<!--break-->', '', $node->body) : '';  // The 'view' hook can be implemented to overwrite the default function  // to display nodes.  if (node_hook($node, 'view')) {    $node = node_invoke($node, 'view', $teaser, $page);  }  else {    $node = node_prepare($node, $teaser);  }  // Allow modules to make their own additions to the node.  node_invoke_nodeapi($node, 'view', $teaser, $page);  return $node;}/** * Generate a page displaying a single node, along with its comments. */function node_show($node, $cid, $message = FALSE) {  if ($message) {    drupal_set_title(t('Revision of %title from %date', array('%title' => $node->title, '%date' => format_date($node->revision_timestamp))));  }  $output = node_view($node, FALSE, TRUE);  if (function_exists('comment_render') && $node->comment) {    $output .= comment_render($node, $cid);  }  // Update the history table, stating that this user viewed this node.  node_tag_new($node->nid);  return $output;}/** * Theme a log message. * * @ingroup themeable */function theme_node_log_message($log) {  return '<div class="log"><div class="title">'. t('Log') .':</div>'. $log .'</div>';}/** * Implementation of hook_perm(). */function node_perm() {  $perms = array('administer content types', 'administer nodes', 'access content', 'view revisions', 'revert revisions', 'delete revisions');  foreach (node_get_types() as $type) {    if ($type->module == 'node') {      $name = check_plain($type->type);      $perms[] = 'create '. $name .' content';      $perms[] = 'delete own '. $name .' content';      $perms[] = 'delete any '. $name .' content';      $perms[] = 'edit own '. $name .' content';      $perms[] = 'edit any '. $name .' content';    }  }  return $perms;}/** * Implementation of hook_search(). */function node_search($op = 'search', $keys = NULL) {  switch ($op) {    case 'name':      return t('Content');    case 'reset':      db_query("UPDATE {search_dataset} SET reindex = %d WHERE type = 'node'", time());      return;    case 'status':      $total = db_result(db_query('SELECT COUNT(*) FROM {node} WHERE status = 1'));      $remaining = db_result(db_query("SELECT COUNT(*) FROM {node} n LEFT JOIN {search_dataset} d ON d.type = 'node' AND d.sid = n.nid WHERE n.status = 1 AND (d.sid IS NULL OR d.reindex <> 0)"));      return array('remaining' => $remaining, 'total' => $total);    case 'admin':      $form = array();      // Output form for defining rank factor weights.      $form['content_ranking'] = array(        '#type' => 'fieldset',        '#title' => t('Content ranking'),      );      $form['content_ranking']['#theme'] = 'node_search_admin';      $form['content_ranking']['info'] = array(        '#value' => '<em>'. t('The following numbers control which properties the content search should favor when ordering the results. Higher numbers mean more influence, zero means the property is ignored. Changing these numbers does not require the search index to be rebuilt. Changes take effect immediately.') .'</em>'      );      $ranking = array('node_rank_relevance' => t('Keyword relevance'),                       'node_rank_recent' => t('Recently posted'));      if (module_exists('comment')) {        $ranking['node_rank_comments'] = t('Number of comments');      }      if (module_exists('statistics') && variable_get('statistics_count_content_views', 0)) {        $ranking['node_rank_views'] = t('Number of views');      }      // Note: reversed to reflect that higher number = higher ranking.      $options = drupal_map_assoc(range(0, 10));      foreach ($ranking as $var => $title) {        $form['content_ranking']['factors'][$var] = array(          '#title' => $title,          '#type' => 'select',          '#options' => $options,          '#default_value' => variable_get($var, 5),        );      }      return $form;    case 'search':      // Build matching conditions      list($join1, $where1) = _db_rewrite_sql();      $arguments1 = array();      $conditions1 = 'n.status = 1';      if ($type = search_query_extract($keys, 'type')) {        $types = array();        foreach (explode(',', $type) as $t) {          $types[] = "n.type = '%s'";          $arguments1[] = $t;        }        $conditions1 .= ' AND ('. implode(' OR ', $types) .')';        $keys = search_query_insert($keys, 'type');      }      if ($category = search_query_extract($keys, 'category')) {        $categories = array();        foreach (explode(',', $category) as $c) {          $categories[] = "tn.tid = %d";          $arguments1[] = $c;        }        $conditions1 .= ' AND ('. implode(' OR ', $categories) .')';        $join1 .= ' INNER JOIN {term_node} tn ON n.vid = tn.vid';        $keys = search_query_insert($keys, 'category');      }      // Build ranking expression (we try to map each parameter to a      // uniform distribution in the range 0..1).      $ranking = array();      $arguments2 = array();      $join2 = '';      // Used to avoid joining on node_comment_statistics twice      $stats_join = FALSE;      $total = 0;      if ($weight = (int)variable_get('node_rank_relevance', 5)) {        // Average relevance values hover around 0.15        $ranking[] = '%d * i.relevance';        $arguments2[] = $weight;        $total += $weight;      }      if ($weight = (int)variable_get('node_rank_recent', 5)) {        // Exponential decay with half-life of 6 months, starting at last indexed node        $ranking[] = '%d * POW(2, (GREATEST(MAX(n.created), MAX(n.changed), MAX(c.last_comment_timestamp)) - %d) * 6.43e-8)';        $arguments2[] = $weight;        $arguments2[] = (int)variable_get('node_cron_last', 0);        $join2 .= ' LEFT JOIN {node_comment_statistics} c ON c.nid = i.sid';        $stats_join = TRUE;        $total += $weight;      }      if (module_exists('comment') && $weight = (int)variable_get('node_rank_comments', 5)) {        // Inverse law that maps the highest reply count on the site to 1 and 0 to 0.        $scale = variable_get('node_cron_comments_scale', 0.0);        $ranking[] = '%d * (2.0 - 2.0 / (1.0 + MAX(c.comment_count) * %f))';        $arguments2[] = $weight;        $arguments2[] = $scale;        if (!$stats_join) {          $join2 .= ' LEFT JOIN {node_comment_statistics} c ON c.nid = i.sid';        }        $total += $weight;      }      if (module_exists('statistics') && variable_get('statistics_count_content_views', 0) &&          $weight = (int)variable_get('node_rank_views', 5)) {        // Inverse law that maps the highest view count on the site to 1 and 0 to 0.        $scale = variable_get('node_cron_views_scale', 0.0);        $ranking[] = '%d * (2.0 - 2.0 / (1.0 + MAX(nc.totalcount) * %f))';        $arguments2[] = $weight;        $arguments2[] = $scale;        $join2 .= ' LEFT JOIN {node_counter} nc ON nc.nid = i.sid';        $total += $weight;      }            // When all search factors are disabled (ie they have a weight of zero),       // the default score is based only on keyword relevance and there is no need to       // adjust the score of each item.       if ($total == 0) {        $select2 = 'i.relevance AS score';        $total = 1;      }      else {        $select2 = implode(' + ', $ranking) . ' AS score';      }            // Do search.      $find = do_search($keys, 'node', 'INNER JOIN {node} n ON n.nid = i.sid '. $join1, $conditions1 . (empty($where1) ? '' : ' AND '. $where1), $arguments1, $select2, $join2, $arguments2);      // Load results.      $results = array();      foreach ($find as $item) {        // Build the node body.        $node = node_load($item->sid);        $node->build_mode = NODE_BUILD_SEARCH_RESULT;        $node = node_build_content($node, FALSE, FALSE);        $node->body = drupal_render($node->content);        // Fetch comments for snippet.        $node->body .= module_invoke('comment', 'nodeapi', $node, 'update index');        // Fetch terms for snippet.        $node->body .= module_invoke('taxonomy', 'nodeapi', $node, 'update index');        $extra = node_invoke_nodeapi($node, 'search result');        $results[] = array(          'link' => url('node/'. $item->sid, array('absolute' => TRUE)),          'type' => check_plain(node_get_types('name', $node)),          'title' => $node->title,          'user' => theme('username', $node),          'date' => $node->changed,          'node' => $node,          'extra' => $extra,          'score' => $item->score / $total,          'snippet' => search_excerpt($keys, $node->body),        );      }      return $results;  }}/** * Implementation of hook_user(). */function node_user($op, &$edit, &$user) {  if ($op == 'delete') {    db_query('UPDATE {node} SET uid = 0 WHERE uid = %d', $user->uid);    db_query('UPDATE {node_revisions} SET uid = 0 WHERE uid = %d', $user->uid);  }}/** * Theme the content ranking part of the search settings admin page. * * @ingroup themeable */function theme_node_search_admin($form) {  $output = drupal_render($form['info']);  $header = array(t('Factor'), t('Weight'));  foreach (element_children($form['factors']) as $key) {    $row = array();    $row[] = $form['factors'][$key]['#title'];    unset($form['factors'][$key]['#title']);    $row[] = drupal_render($form['factors'][$key]);    $rows[] = $row;  }  $output .= theme('table', $header, $rows);  $output .= drupal_render($form);  return $output;}/** * Retrieve the comment mode for the given node ID (none, read, or read/write). */function node_comment_mode($nid) {  static $comment_mode;  if (!isset($comment_mode[$nid])) {    $comment_mode[$nid] = db_result(db_query('SELECT comment FROM {node} WHERE nid = %d', $nid));  }  return $comment_mode[$nid];}/** * Implementation of hook_link(). */function node_link($type, $node = NULL, $teaser = FALSE) {  $links = array();  if ($type == 'node') {    if ($teaser == 1 && $node->teaser && !empty($node->readmore)) {      $links['node_read_more'] = array(        'title' => t('Read more'),        'href' => "node/$node->nid",        // The title attribute gets escaped when the links are processed, so        // there is no need to escape here.        'attributes' => array('title' => t('Read the rest of !title.', array('!title' => $node->title)))      );    }  }  return $links;}function _node_revision_access($node, $op = 'view') {  static $access = array();  if (!isset($access[$node->vid])) {    $node_current_revision = node_load($node->nid);    $is_current_revision = $node_current_revision->vid == $node->vid;    // There should be at least two revisions. If the vid of the given node    // and the vid of the current revision differs, then we already have two    // different revisions so there is no need for a separate database check.    // Also, if you try to revert to or delete the current revision, that's    // not good.    if ($is_current_revision && (db_result(db_query('SELECT COUNT(vid) FROM {node_revisions} WHERE nid = %d', $node->nid)) == 1 || $op == 'update' || $op == 'delete')) {      $access[$node->vid] = FALSE;    }    elseif (user_access('administer nodes')) {      $access[$node->vid] = TRUE;    }    else {      $map = array('view' => 'view revisions', 'update' => 'revert revisions', 'delete' => 'delete revisions');      // First check the user permission, second check the access to the      // current revision and finally, if the node passed in is not the current      // revision then access to that, too.      $access[$node->vid] = isset($map[$op]) && user_access($map[$op]) && node_access($op, $node_current_revision) && ($is_current_revision || node_access($op, $node));    }  }  return $access[$node->vid];}function _node_add_access() {  $types = node_get_types();  foreach ($types as $type) {    if (node_hook($type->type, 'form') && node_access('create', $type->type)) {      return TRUE;    }  }  return FALSE;}/** * Implementation of hook_menu(). */function node_menu() {  $items['admin/content/node'] = array(    'title' => 'Content',    'description' => "View, edit, and delete your site's content.",    'page callback' => 'drupal_get_form',    'page arguments' => array('node_admin_content'),    'access arguments' => array('administer nodes'),    'file' => 'node.admin.inc',  );  $items['admin/content/node/overview'] = array(    'title' => 'List',    'type' => MENU_DEFAULT_LOCAL_TASK,    'weight' => -10,  );  $items['admin/content/node-settings'] = array(    'title' => 'Post settings',    'description' => 'Control posting behavior, such as teaser length, requiring previews before posting, and the number of posts on the front page.',    'page callback' => 'drupal_get_form',    'page arguments' => array('node_configure'),    'access arguments' => array('administer nodes'),    'file' => 'node.admin.inc',  );  $items['admin/content/node-settings/rebuild'] = array(    'title' => 'Rebuild permissions',    'page arguments' => array('node_configure_rebuild_confirm'),    'file' => 'node.admin.inc',    // Any user than can potentially trigger a node_acess_needs_rebuild(TRUE)    // has to be allowed access to the 'node access rebuild' confirm form.    'access arguments' => array('access administration pages'),    'type' => MENU_CALLBACK,  );  $items['admin/content/types'] = array(    'title' => 'Content types',    'description' => 'Manage posts by content type, including default status, front page promotion, etc.',    'page callback' => 'node_overview_types',    'access arguments' => array('administer content types'),    'file' => 'content_types.inc',  );  $items['admin/content/types/list'] = array(    'title' => 'List',    'type' => MENU_DEFAULT_LOCAL_TASK,    'weight' => -10,  );  $items['admin/content/types/add'] = array(    'title' => 'Add content type',    'page callback' => 'drupal_get_form',    'page arguments' => array('node_type_form'),    'access arguments' => array('administer content types'),    'file' => 'content_types.inc',    'type' => MENU_LOCAL_TASK,  );  $items['node'] = array(    'title' => 'Content',    'page callback' => 'node_page_default',    'access arguments' => array('access content'),    'type' => MENU_CALLBACK,  );  $items['node/add'] = array(    'title' => 'Create content',    'page callback' => 'node_add_page',    'access callback' => '_node_add_access',    'weight' => 1,    'file' => 'node.pages.inc',  );  $items['rss.xml'] = array(    'title' => 'RSS feed',    'page callback' => 'node_feed',    'access arguments' => array('access content'),    'type' => MENU_CALLBACK,  );  foreach (node_get_types('types', NULL, TRUE) as $type) {    $type_url_str = str_replace('_', '-', $type->type);    $items['node/add/'. $type_url_str] = array(      'title' => drupal_ucfirst($type->name),      'title callback' => 'check_plain',      'page callback' => 'node_add',      'page arguments' => array(2),      'access callback' => 'node_access',      'access arguments' => array('create', $type->type),      'description' => $type->description,      'file' => 'node.pages.inc',    );    $items['admin/content/node-type/'. $type_url_str] = array(      'title' => $type->name,      'page callback' => 'drupal_get_form',      'page arguments' => array('node_type_form', $type),      'access arguments' => array('administer content types'),      'file' => 'content_types.inc',      'type' => MENU_CALLBACK,    );    $items['admin/content/node-type/'. $type_url_str .'/edit'] = array(      'title' => 'Edit',      'type' => MENU_DEFAULT_LOCAL_TASK,    );    $items['admin/content/node-type/'. $type_url_str .'/delete'] = array(      'title' => 'Delete',      'page arguments' => array('node_type_delete_confirm', $type),      'access arguments' => array('administer content types'),      'file' => 'content_types.inc',      'type' => MENU_CALLBACK,    );  }  $items['node/%node'] = array(    'title callback' => 'node_page_title',    'title arguments' => array(1),    'page callback' => 'node_page_view',    'page arguments' => array(1),    'access callback' => 'node_access',    'access arguments' => array('view', 1),    'type' => MENU_CALLBACK);  $items['node/%node/view'] = array(    'title' => 'View',    'type' => MENU_DEFAULT_LOCAL_TASK,    'weight' => -10);  $items['node/%node/edit'] = array(    'title' => 'Edit',    'page callback' => 'node_page_edit',    'page arguments' => array(1),    'access callback' => 'node_access',    'access arguments' => array('update', 1),    'weight' => 1,    'file' => 'node.pages.inc',    'type' => MENU_LOCAL_TASK,  );  $items['node/%node/delete'] = array(    'title' => 'Delete',    'page callback' => 'drupal_get_form',    'page arguments' => array('node_delete_confirm', 1),    'access callback' => 'node_access',    'access arguments' => array('delete', 1),    'file' => 'node.pages.inc',    'weight' => 1,    'type' => MENU_CALLBACK);  $items['node/%node/revisions'] = array(    'title' => 'Revisions',    'page callback' => 'node_revision_overview',    'page arguments' => array(1),    'access callback' => '_node_revision_access',    'access arguments' => array(1),    'weight' => 2,    'file' => 'node.pages.inc',    'type' => MENU_LOCAL_TASK,  );  $items['node/%node/revisions/%/view'] = array(    'title' => 'Revisions',    'load arguments' => array(3),    'page callback' => 'node_show',    'page arguments' => array(1, NULL, TRUE),    'access callback' => '_node_revision_access',    'access arguments' => array(1),    'type' => MENU_CALLBACK,  );  $items['node/%node/revisions/%/revert'] = array(    'title' => 'Revert to earlier revision',    'load arguments' => array(3),    'page callback' => 'drupal_get_form',    'page arguments' => array('node_revision_revert_confirm', 1),    'access callback' => '_node_revision_access',    'access arguments' => array(1, 'update'),    'file' => 'node.pages.inc',    'type' => MENU_CALLBACK,  );  $items['node/%node/revisions/%/delete'] = array(    'title' => 'Delete earlier revision',    'load arguments' => array(3),    'page callback' => 'drupal_get_form',    'page arguments' => array('node_revision_delete_confirm', 1),    'access callback' => '_node_revision_access',    'access arguments' => array(1, 'delete'),    'file' => 'node.pages.inc',    'type' => MENU_CALLBACK,  );  return $items;}/** * Title callback. */function node_page_title($node) {  return $node->title;}/** * Implementation of hook_init(). */function node_init() {  drupal_add_css(drupal_get_path('module', 'node') .'/node.css');}function node_last_changed($nid) {  $node = db_fetch_object(db_query('SELECT changed FROM {node} WHERE nid = %d', $nid));  return ($node->changed);}/** * Return a list of all the existing revision numbers. */function node_revision_list($node) {  $revisions = array();  $result = db_query('SELECT r.vid, r.title, r.log, r.uid, n.vid AS current_vid, r.timestamp, u.name FROM {node_revisions} r LEFT JOIN {node} n ON n.vid = r.vid INNER JOIN {users} u ON u.uid = r.uid WHERE r.nid = %d ORDER BY r.timestamp DESC', $node->nid);  while ($revision = db_fetch_object($result)) {    $revisions[$revision->vid] = $revision;  }  return $revisions;}/** * Implementation of hook_block(). */function node_block($op = 'list', $delta = 0) {  if ($op == 'list') {    $blocks[0]['info'] = t('Syndicate');    // Not worth caching.    $blocks[0]['cache'] = BLOCK_NO_CACHE;    return $blocks;  }  else if ($op == 'view') {    $block['subject'] = t('Syndicate');    $block['content'] = theme('feed_icon', url('rss.xml'), t('Syndicate'));    return $block;  }}/** * A generic function for generating RSS feeds from a set of nodes. * * @param $nids *   An array of node IDs (nid). Defaults to FALSE so empty feeds can be *   generated with passing an empty array, if no items are to be added *   to the feed. * @param $channel *   An associative array containing title, link, description and other keys. *   The link should be an absolute URL. */function node_feed($nids = FALSE, $channel = array()) {  global $base_url, $language;  if ($nids === FALSE) {    $nids = array();    $result = db_query_range(db_rewrite_sql('SELECT n.nid, n.created FROM {node} n WHERE n.promote = 1 AND n.status = 1 ORDER BY n.created DESC'), 0, variable_get('feed_default_items', 10));    while ($row = db_fetch_object($result)) {      $nids[] = $row->nid;    }  }  $item_length = variable_get('feed_item_length', 'teaser');  $namespaces = array('xmlns:dc' => 'http://purl.org/dc/elements/1.1/');  $items = '';  foreach ($nids as $nid) {    // Load the specified node:    $item = node_load($nid);    $item->build_mode = NODE_BUILD_RSS;    $item->link = url("node/$nid", array('absolute' => TRUE));    if ($item_length != 'title') {      $teaser = ($item_length == 'teaser') ? TRUE : FALSE;      // Filter and prepare node teaser      if (node_hook($item, 'view')) {        $item = node_invoke($item, 'view', $teaser, FALSE);      }      else {        $item = node_prepare($item, $teaser);      }      // Allow modules to change $node->content before the node is rendered.      node_invoke_nodeapi($item, 'view', $teaser, FALSE);      // Set the proper node property, then unset unused $node property so that a      // bad theme can not open a security hole.      $content = drupal_render($item->content);      if ($teaser) {        $item->teaser = $content;        unset($item->body);      }      else {        $item->body = $content;        unset($item->teaser);      }          // Allow modules to modify the fully-built node.      node_invoke_nodeapi($item, 'alter', $teaser, FALSE);    }    // Allow modules to add additional item fields and/or modify $item    $extra = node_invoke_nodeapi($item, 'rss item');    $extra = array_merge($extra, array(array('key' => 'pubDate', 'value' => gmdate('r', $item->created)), array('key' => 'dc:creator', 'value' => $item->name), array('key' => 'guid', 'value' => $item->nid .' at '. $base_url, 'attributes' => array('isPermaLink' => 'false'))));    foreach ($extra as $element) {      if (isset($element['namespace'])) {        $namespaces = array_merge($namespaces, $element['namespace']);      }    }    // Prepare the item description    switch ($item_length) {      case 'fulltext':        $item_text = $item->body;        break;      case 'teaser':        $item_text = $item->teaser;        if (!empty($item->readmore)) {          $item_text .= '<p>'. l(t('read more'), 'node/'. $item->nid, array('absolute' => TRUE, 'attributes' => array('target' => '_blank'))) .'</p>';        }        break;      case 'title':        $item_text = '';        break;    }    $items .= format_rss_item($item->title, $item->link, $item_text, $extra);  }  $channel_defaults = array(    'version'     => '2.0',    'title'       => variable_get('site_name', 'Drupal'),    'link'        => $base_url,    'description' => variable_get('site_mission', ''),    'language'    => $language->language  );  $channel = array_merge($channel_defaults, $channel);  $output = "<?xml version=\"1.0\" encoding=\"utf-8\"?>\n";  $output .= "<rss version=\"". $channel["version"] ."\" xml:base=\"". $base_url ."\" ". drupal_attributes($namespaces) .">\n";  $output .= format_rss_channel($channel['title'], $channel['link'], $channel['description'], $items, $channel['language']);  $output .= "</rss>\n";  drupal_set_header('Content-Type: application/rss+xml; charset=utf-8');  print $output;}/** * Menu callback; Generate a listing of promoted nodes. */function node_page_default() {  $result = pager_query(db_rewrite_sql('SELECT n.nid, n.sticky, n.created FROM {node} n WHERE n.promote = 1 AND n.status = 1 ORDER BY n.sticky DESC, n.created DESC'), variable_get('default_nodes_main', 10));  $output = '';  $num_rows = FALSE;  while ($node = db_fetch_object($result)) {    $output .= node_view(node_load($node->nid), 1);    $num_rows = TRUE;  }  if ($num_rows) {    $feed_url = url('rss.xml', array('absolute' => TRUE));    drupal_add_feed($feed_url, variable_get('site_name', 'Drupal') .' '. t('RSS'));    $output .= theme('pager', NULL, variable_get('default_nodes_main', 10));  }  else {    $default_message = t('<h1 class="title">Welcome to your new Drupal website!</h1><p>Please follow these steps to set up and start using your website:</p>');    $default_message .= '<ol>';    $default_message .= '<li>'. t('<strong>Configure your website</strong> Once logged in, visit the <a href="@admin">administration section</a>, where you can <a href="@config">customize and configure</a> all aspects of your website.', array('@admin' => url('admin'), '@config' => url('admin/settings'))) .'</li>';    $default_message .= '<li>'. t('<strong>Enable additional functionality</strong> Next, visit the <a href="@modules">module list</a> and enable features which suit your specific needs. You can find additional modules in the <a href="@download_modules">Drupal modules download section</a>.', array('@modules' => url('admin/build/modules'), '@download_modules' => 'http://drupal.org/project/modules')) .'</li>';    $default_message .= '<li>'. t('<strong>Customize your website design</strong> To change the "look and feel" of your website, visit the <a href="@themes">themes section</a>. You may choose from one of the included themes or download additional themes from the <a href="@download_themes">Drupal themes download section</a>.', array('@themes' => url('admin/build/themes'), '@download_themes' => 'http://drupal.org/project/themes')) .'</li>';    $default_message .= '<li>'. t('<strong>Start posting content</strong> Finally, you can <a href="@content">create content</a> for your website. This message will disappear once you have promoted a post to the front page.', array('@content' => url('node/add'))) .'</li>';    $default_message .= '</ol>';    $default_message .= '<p>'. t('For more information, please refer to the <a href="@help">help section</a>, or the <a href="@handbook">online Drupal handbooks</a>. You may also post at the <a href="@forum">Drupal forum</a>, or view the wide range of <a href="@support">other support options</a> available.', array('@help' => url('admin/help'), '@handbook' => 'http://drupal.org/handbooks', '@forum' => 'http://drupal.org/forum', '@support' => 'http://drupal.org/support')) .'</p>';    $output = '<div id="first-time">'. $default_message .'</div>';  }  drupal_set_title('');  return $output;}/** * Menu callback; view a single node. */function node_page_view($node, $cid = NULL) {  drupal_set_title(check_plain($node->title));  return node_show($node, $cid);}/** * Implementation of hook_update_index(). */function node_update_index() {  $limit = (int)variable_get('search_cron_limit', 100);  // Store the maximum possible comments per thread (used for ranking by reply count)  variable_set('node_cron_comments_scale', 1.0 / max(1, db_result(db_query('SELECT MAX(comment_count) FROM {node_comment_statistics}'))));  variable_set('node_cron_views_scale', 1.0 / max(1, db_result(db_query('SELECT MAX(totalcount) FROM {node_counter}'))));  $result = db_query_range("SELECT n.nid FROM {node} n LEFT JOIN {search_dataset} d ON d.type = 'node' AND d.sid = n.nid WHERE d.sid IS NULL OR d.reindex <> 0 ORDER BY d.reindex ASC, n.nid ASC", 0, $limit);  while ($node = db_fetch_object($result)) {    _node_index_node($node);  }}/** * Index a single node. * * @param $node *   The node to index. */function _node_index_node($node) {  $node = node_load($node->nid);  // save the changed time of the most recent indexed node, for the search results half-life calculation  variable_set('node_cron_last', $node->changed);  // Build the node body.  $node->build_mode = NODE_BUILD_SEARCH_INDEX;  $node = node_build_content($node, FALSE, FALSE);  $node->body = drupal_render($node->content);  $text = '<h1>'. check_plain($node->title) .'</h1>'. $node->body;  // Fetch extra data normally not visible  $extra = node_invoke_nodeapi($node, 'update index');  foreach ($extra as $t) {    $text .= $t;  }  // Update index  search_index($node->nid, 'node', $text);}/** * Implementation of hook_form_alter(). */function node_form_alter(&$form, $form_state, $form_id) {  // Advanced node search form  if ($form_id == 'search_form' && $form['module']['#value'] == 'node' && user_access('use advanced search')) {    // Keyword boxes:    $form['advanced'] = array(      '#type' => 'fieldset',      '#title' => t('Advanced search'),      '#collapsible' => TRUE,      '#collapsed' => TRUE,      '#attributes' => array('class' => 'search-advanced'),    );    $form['advanced']['keywords'] = array(      '#prefix' => '<div class="criterion">',      '#suffix' => '</div>',    );    $form['advanced']['keywords']['or'] = array(      '#type' => 'textfield',      '#title' => t('Containing any of the words'),      '#size' => 30,      '#maxlength' => 255,    );    $form['advanced']['keywords']['phrase'] = array(      '#type' => 'textfield',      '#title' => t('Containing the phrase'),      '#size' => 30,      '#maxlength' => 255,    );    $form['advanced']['keywords']['negative'] = array(      '#type' => 'textfield',      '#title' => t('Containing none of the words'),      '#size' => 30,      '#maxlength' => 255,    );    // Taxonomy box:    if ($taxonomy = module_invoke('taxonomy', 'form_all', 1)) {      $form['advanced']['category'] = array(        '#type' => 'select',        '#title' => t('Only in the category(s)'),        '#prefix' => '<div class="criterion">',        '#size' => 10,        '#suffix' => '</div>',        '#options' => $taxonomy,        '#multiple' => TRUE,      );    }    // Node types:    $types = array_map('check_plain', node_get_types('names'));    $form['advanced']['type'] = array(      '#type' => 'checkboxes',      '#title' => t('Only of the type(s)'),      '#prefix' => '<div class="criterion">',      '#suffix' => '</div>',      '#options' => $types,    );    $form['advanced']['submit'] = array(      '#type' => 'submit',      '#value' => t('Advanced search'),      '#prefix' => '<div class="action">',      '#suffix' => '</div>',    );    $form['#validate'][] = 'node_search_validate';  }}/** * Form API callback for the search form. Registered in node_form_alter(). */function node_search_validate($form, &$form_state) {  // Initialise using any existing basic search keywords.  $keys = $form_state['values']['processed_keys'];  // Insert extra restrictions into the search keywords string.  if (isset($form_state['values']['type']) && is_array($form_state['values']['type'])) {    // Retrieve selected types - Forms API sets the value of unselected checkboxes to 0.    $form_state['values']['type'] = array_filter($form_state['values']['type']);    if (count($form_state['values']['type'])) {      $keys = search_query_insert($keys, 'type', implode(',', array_keys($form_state['values']['type'])));    }  }  if (isset($form_state['values']['category']) && is_array($form_state['values']['category'])) {    $keys = search_query_insert($keys, 'category', implode(',', $form_state['values']['category']));  }  if ($form_state['values']['or'] != '') {    if (preg_match_all('/ ("[^"]+"|[^" ]+)/i', ' '. $form_state['values']['or'], $matches)) {      $keys .= ' '. implode(' OR ', $matches[1]);    }  }  if ($form_state['values']['negative'] != '') {    if (preg_match_all('/ ("[^"]+"|[^" ]+)/i', ' '. $form_state['values']['negative'], $matches)) {      $keys .= ' -'. implode(' -', $matches[1]);    }  }  if ($form_state['values']['phrase'] != '') {    $keys .= ' "'. str_replace('"', ' ', $form_state['values']['phrase']) .'"';  }  if (!empty($keys)) {    form_set_value($form['basic']['inline']['processed_keys'], trim($keys), $form_state);  }}/** * @defgroup node_access Node access rights * @{ * The node access system determines who can do what to which nodes. * * In determining access rights for a node, node_access() first checks * whether the user has the "administer nodes" permission. Such users have * unrestricted access to all nodes. Then the node module's hook_access() * is called, and a TRUE or FALSE return value will grant or deny access. * This allows, for example, the blog module to always grant access to the * blog author, and for the book module to always deny editing access to * PHP pages. * * If node module does not intervene (returns NULL), then the * node_access table is used to determine access. All node access * modules are queried using hook_node_grants() to assemble a list of * "grant IDs" for the user. This list is compared against the table. * If any row contains the node ID in question (or 0, which stands for "all * nodes"), one of the grant IDs returned, and a value of TRUE for the * operation in question, then access is granted. Note that this table is a * list of grants; any matching row is sufficient to grant access to the * node. * * In node listings, the process above is followed except that * hook_access() is not called on each node for performance reasons and for * proper functioning of the pager system. When adding a node listing to your * module, be sure to use db_rewrite_sql() to add * the appropriate clauses to your query for access checks. * * To see how to write a node access module of your own, see * node_access_example.module. *//** * Determine whether the current user may perform the given operation on the * specified node. * * @param $op *   The operation to be performed on the node. Possible values are: *   - "view" *   - "update" *   - "delete" *   - "create" * @param $node *   The node object (or node array) on which the operation is to be performed, *   or node type (e.g. 'forum') for "create" operation. * @param $account *   Optional, a user object representing the user for whom the operation is to *   be performed. Determines access for a user other than the current user. * @return *   TRUE if the operation may be performed, or FALSE otherwise. */function node_access($op, $node, $account = NULL) {  global $user;  if (!$node || !in_array($op, array('view', 'update', 'delete', 'create'), TRUE)) {    // If there was no node to check against, or the $op was not one of the    // supported ones, we return access denied.    return FALSE;  }  // Convert the node to an object if necessary:  if ($op != 'create') {    $node = (object)$node;  }  // If no user object is supplied, the access check is for the current user.  if (empty($account)) {    $account = $user;  }  // If the node is in a restricted format, disallow editing.  if ($op == 'update' && !filter_access($node->format)) {    return FALSE;  }  if (user_access('administer nodes', $account)) {    return TRUE;  }  if (!user_access('access content', $account)) {    return FALSE;  }  // Can't use node_invoke(), because the access hook takes the $op parameter  // before the $node parameter.  $module = node_get_types('module', $node);  if ($module == 'node') {    $module = 'node_content'; // Avoid function name collisions.  }  $access = module_invoke($module, 'access', $op, $node, $account);  if (!is_null($access)) {    return $access;  }  // If the module did not override the access rights, use those set in the  // node_access table.  if ($op != 'create' && $node->nid && $node->status) {    $grants = array();    foreach (node_access_grants($op, $account) as $realm => $gids) {      foreach ($gids as $gid) {        $grants[] = "(gid = $gid AND realm = '$realm')";      }    }    $grants_sql = '';    if (count($grants)) {      $grants_sql = 'AND ('. implode(' OR ', $grants) .')';    }    $sql = "SELECT 1 FROM {node_access} WHERE (nid = 0 OR nid = %d) $grants_sql AND grant_$op >= 1";    $result = db_query_range($sql, $node->nid, 0, 1);    return (bool) db_result($result);  }  // Let authors view their own nodes.  if ($op == 'view' && $account->uid == $node->uid && $account->uid != 0) {    return TRUE;  }  return FALSE;}/** * Generate an SQL join clause for use in fetching a node listing. * * @param $node_alias *   If the node table has been given an SQL alias other than the default *   "n", that must be passed here. * @param $node_access_alias *   If the node_access table has been given an SQL alias other than the default *   "na", that must be passed here. * @return *   An SQL join clause. */function _node_access_join_sql($node_alias = 'n', $node_access_alias = 'na') {  if (user_access('administer nodes')) {    return '';  }  return 'INNER JOIN {node_access} '. $node_access_alias .' ON '. $node_access_alias .'.nid = '. $node_alias .'.nid';}/** * Generate an SQL where clause for use in fetching a node listing. * * @param $op *   The operation that must be allowed to return a node. * @param $node_access_alias *   If the node_access table has been given an SQL alias other than the default *   "na", that must be passed here. * @param $account *   The user object for the user performing the operation. If omitted, the *   current user is used. * @return *   An SQL where clause. */function _node_access_where_sql($op = 'view', $node_access_alias = 'na', $account = NULL) {  if (user_access('administer nodes')) {    return;  }  $grants = array();  foreach (node_access_grants($op, $account) as $realm => $gids) {    foreach ($gids as $gid) {      $grants[] = "($node_access_alias.gid = $gid AND $node_access_alias.realm = '$realm')";    }  }  $grants_sql = '';  if (count($grants)) {    $grants_sql = 'AND ('. implode(' OR ', $grants) .')';  }  $sql = "$node_access_alias.grant_$op >= 1 $grants_sql";  return $sql;}/** * Fetch an array of permission IDs granted to the given user ID. * * The implementation here provides only the universal "all" grant. A node * access module should implement hook_node_grants() to provide a grant * list for the user. * * @param $op *   The operation that the user is trying to perform. * @param $account *   The user object for the user performing the operation. If omitted, the *   current user is used. * @return *   An associative array in which the keys are realms, and the values are *   arrays of grants for those realms. */function node_access_grants($op, $account = NULL) {  if (!isset($account)) {    $account = $GLOBALS['user'];  }  return array_merge(array('all' => array(0)), module_invoke_all('node_grants', $account, $op));}/** * Determine whether the user has a global viewing grant for all nodes. */function node_access_view_all_nodes() {  static $access;  if (!isset($access)) {    $grants = array();    foreach (node_access_grants('view') as $realm => $gids) {      foreach ($gids as $gid) {        $grants[] = "(gid = $gid AND realm = '$realm')";      }    }    $grants_sql = '';    if (count($grants)) {      $grants_sql = 'AND ('. implode(' OR ', $grants) .')';    }    $sql = "SELECT COUNT(*) FROM {node_access} WHERE nid = 0 $grants_sql AND grant_view >= 1";    $result = db_query($sql);    $access = db_result($result);  }  return $access;}/** * Implementation of hook_db_rewrite_sql */function node_db_rewrite_sql($query, $primary_table, $primary_field) {  if ($primary_field == 'nid' && !node_access_view_all_nodes()) {    $return['join'] = _node_access_join_sql($primary_table);    $return['where'] = _node_access_where_sql();    $return['distinct'] = 1;    return $return;  }}/** * This function will call module invoke to get a list of grants and then * write them to the database. It is called at node save, and should be * called by modules whenever something other than a node_save causes * the permissions on a node to change. * * This function is the only function that should write to the node_access * table. * * @param $node *   The $node to acquire grants for. */function node_access_acquire_grants($node) {  $grants = module_invoke_all('node_access_records', $node);  if (empty($grants)) {    $grants[] = array('realm' => 'all', 'gid' => 0, 'grant_view' => 1, 'grant_update' => 0, 'grant_delete' => 0);  }  else {    // retain grants by highest priority    $grant_by_priority = array();    foreach ($grants as $g) {      $grant_by_priority[intval($g['priority'])][] = $g;    }    krsort($grant_by_priority);    $grants = array_shift($grant_by_priority);  }  node_access_write_grants($node, $grants);}/** * This function will write a list of grants to the database, deleting * any pre-existing grants. If a realm is provided, it will only * delete grants from that realm, but it will always delete a grant * from the 'all' realm. Modules which utilize node_access can * use this function when doing mass updates due to widespread permission * changes. * * @param $node *   The $node being written to. All that is necessary is that it contain a nid. * @param $grants *   A list of grants to write. Each grant is an array that must contain the *   following keys: realm, gid, grant_view, grant_update, grant_delete. *   The realm is specified by a particular module; the gid is as well, and *   is a module-defined id to define grant privileges. each grant_* field *   is a boolean value. * @param $realm *   If provided, only read/write grants for that realm. * @param $delete *   If false, do not delete records. This is only for optimization purposes, *   and assumes the caller has already performed a mass delete of some form. */function node_access_write_grants($node, $grants, $realm = NULL, $delete = TRUE) {  if ($delete) {    $query = 'DELETE FROM {node_access} WHERE nid = %d';    if ($realm) {      $query .= " AND realm in ('%s', 'all')";    }    db_query($query, $node->nid, $realm);  }  // Only perform work when node_access modules are active.  if (count(module_implements('node_grants'))) {    foreach ($grants as $grant) {      if ($realm && $realm != $grant['realm']) {        continue;      }      // Only write grants; denies are implicit.      if ($grant['grant_view'] || $grant['grant_update'] || $grant['grant_delete']) {        db_query("INSERT INTO {node_access} (nid, realm, gid, grant_view, grant_update, grant_delete) VALUES (%d, '%s', %d, %d, %d, %d)", $node->nid, $grant['realm'], $grant['gid'], $grant['grant_view'], $grant['grant_update'], $grant['grant_delete']);      }    }  }}/** * Flag / unflag the node access grants for rebuilding, or read the current * value of the flag. * * When the flag is set, a message is displayed to users with 'access * administration pages' permission, pointing to the 'rebuild' confirm form. * This can be used as an alternative to direct node_access_rebuild calls, * allowing administrators to decide when they want to perform the actual * (possibly time consuming) rebuild. * When unsure the current user is an adminisrator, node_access_rebuild * should be used instead. * * @param $rebuild *   (Optional) The boolean value to be written.  * @return *   (If no value was provided for $rebuild) The current value of the flag. */function node_access_needs_rebuild($rebuild = NULL) {  if (!isset($rebuild)) {    return variable_get('node_access_needs_rebuild', FALSE);  }  elseif ($rebuild) {    variable_set('node_access_needs_rebuild', TRUE);  }  else {    variable_del('node_access_needs_rebuild');  }}/** * Rebuild the node access database. This is occasionally needed by modules * that make system-wide changes to access levels. * * When the rebuild is required by an admin-triggered action (e.g module * settings form), calling node_access_needs_rebuild(TRUE) instead of * node_access_rebuild() lets the user perform his changes and actually * rebuild only once he is done. * * Note : As of Drupal 6, node access modules are not required to (and actually * should not) call node_access_rebuild() in hook_enable/disable anymore. * * @see node_access_needs_rebuild() * * @param $batch_mode *   Set to TRUE to process in 'batch' mode, spawning processing over several *   HTTP requests (thus avoiding the risk of PHP timeout if the site has a *   large number of nodes). *   hook_update_N and any form submit handler are safe contexts to use the *   'batch mode'. Less decidable cases (such as calls from hook_user, *   hook_taxonomy, hook_node_type...) might consider using the non-batch mode. */function node_access_rebuild($batch_mode = FALSE) {  db_query("DELETE FROM {node_access}");  // Only recalculate if the site is using a node_access module.  if (count(module_implements('node_grants'))) {    if ($batch_mode) {      $batch = array(        'title' => t('Rebuilding content access permissions'),        'operations' => array(          array('_node_access_rebuild_batch_operation', array()),        ),        'finished' => '_node_access_rebuild_batch_finished'      );      batch_set($batch);    }    else {      // Try to allocate enough time to rebuild node grants      if (function_exists('set_time_limit')) {        @set_time_limit(240);      }      $result = db_query("SELECT nid FROM {node}");      while ($node = db_fetch_object($result)) {        $loaded_node = node_load($node->nid, NULL, TRUE);        // To preserve database integrity, only aquire grants if the node        // loads successfully.        if (!empty($loaded_node)) {          node_access_acquire_grants($loaded_node);        }      }    }  }  else {    // Not using any node_access modules. Add the default grant.    db_query("INSERT INTO {node_access} VALUES (0, 0, 'all', 1, 0, 0)");  }  if (!isset($batch)) {    drupal_set_message(t('Content permissions have been rebuilt.'));    node_access_needs_rebuild(FALSE);    cache_clear_all();  }}/** * Batch operation for node_access_rebuild_batch. * * This is a mutlistep operation : we go through all nodes by packs of 20. * The batch processing engine interrupts processing and sends progress * feedback after 1 second execution time. */function _node_access_rebuild_batch_operation(&$context) {  if (empty($context['sandbox'])) {    // Initiate multistep processing.    $context['sandbox']['progress'] = 0;    $context['sandbox']['current_node'] = 0;    $context['sandbox']['max'] = db_result(db_query('SELECT COUNT(DISTINCT nid) FROM {node}'));  }  // Process the next 20 nodes.  $limit = 20;  $result = db_query_range("SELECT nid FROM {node} WHERE nid > %d ORDER BY nid ASC", $context['sandbox']['current_node'], 0, $limit);  while ($row = db_fetch_array($result)) {    $loaded_node = node_load($row['nid'], NULL, TRUE);    // To preserve database integrity, only aquire grants if the node    // loads successfully.    if (!empty($loaded_node)) {      node_access_acquire_grants($loaded_node);    }    $context['sandbox']['progress']++;    $context['sandbox']['current_node'] = $loaded_node->nid;  }  // Multistep processing : report progress.  if ($context['sandbox']['progress'] != $context['sandbox']['max']) {    $context['finished'] = $context['sandbox']['progress'] / $context['sandbox']['max'];  }}/** * Post-processing for node_access_rebuild_batch. */function _node_access_rebuild_batch_finished($success, $results, $operations) {  if ($success) {    drupal_set_message(t('The content access permissions have been rebuilt.'));    node_access_needs_rebuild(FALSE);  }  else {    drupal_set_message(t('The content access permissions have not been properly rebuilt.'), 'error');  }  cache_clear_all();}/** * @} End of "defgroup node_access". *//** * @defgroup node_content Hook implementations for user-created content types. * @{ *//** * Implementation of hook_access(). * * Named so as not to conflict with node_access() */function node_content_access($op, $node, $account) {  $type = is_string($node) ? $node : (is_array($node) ? $node['type'] : $node->type);  if ($op == 'create') {    return user_access('create '. $type .' content', $account);  }  if ($op == 'update') {    if (user_access('edit any '. $type .' content', $account) || (user_access('edit own '. $type .' content', $account) && ($account->uid == $node->uid))) {      return TRUE;    }  }  if ($op == 'delete') {    if (user_access('delete any '. $type .' content', $account) || (user_access('delete own '. $type .' content', $account) && ($account->uid == $node->uid))) {      return TRUE;    }  }}/** * Implementation of hook_form(). */function node_content_form($node, $form_state) {  $type = node_get_types('type', $node);  $form = array();  if ($type->has_title) {    $form['title'] = array(      '#type' => 'textfield',      '#title' => check_plain($type->title_label),      '#required' => TRUE,      '#default_value' => $node->title,      '#maxlength' => 255,      '#weight' => -5,    );  }  if ($type->has_body) {    $form['body_field'] = node_body_field($node, $type->body_label, $type->min_word_count);  }  return $form;}/** * @} End of "defgroup node_content". *//** * Implementation of hook_forms(). All node forms share the same form handler */function node_forms() {  $forms = array();  if ($types = node_get_types()) {    foreach (array_keys($types) as $type) {      $forms[$type .'_node_form']['callback'] = 'node_form';    }  }  return $forms;}/** * Format the "Submitted by username on date/time" for each node * * @ingroup themeable */function theme_node_submitted($node) {  return t('Submitted by !username on @datetime',    array(      '!username' => theme('username', $node),      '@datetime' => format_date($node->created),    ));}/** * Implementation of hook_hook_info(). */function node_hook_info() {  return array(    'node' => array(      'nodeapi' => array(        'presave' => array(          'runs when' => t('When either saving a new post or updating an existing post'),        ),        'insert' => array(          'runs when' => t('After saving a new post'),        ),        'update' => array(          'runs when' => t('After saving an updated post'),        ),        'delete' => array(          'runs when' => t('After deleting a post')        ),        'view' => array(          'runs when' => t('When content is viewed by an authenticated user')        ),      ),    ),  );}/** * Implementation of hook_action_info(). */function node_action_info() {  return array(    'node_publish_action' => array(      'type' => 'node',      'description' => t('Publish post'),      'configurable' => FALSE,      'behavior' => array('changes_node_property'),      'hooks' => array(        'nodeapi' => array('presave'),        'comment' => array('insert', 'update'),      ),    ),    'node_unpublish_action' => array(      'type' => 'node',      'description' => t('Unpublish post'),      'configurable' => FALSE,      'behavior' => array('changes_node_property'),      'hooks' => array(        'nodeapi' => array('presave'),        'comment' => array('delete', 'insert', 'update'),      ),    ),    'node_make_sticky_action' => array(      'type' => 'node',      'description' => t('Make post sticky'),      'configurable' => FALSE,      'behavior' => array('changes_node_property'),      'hooks' => array(        'nodeapi' => array('presave'),        'comment' => array('insert', 'update'),      ),    ),    'node_make_unsticky_action' => array(      'type' => 'node',      'description' => t('Make post unsticky'),      'configurable' => FALSE,      'behavior' => array('changes_node_property'),      'hooks' => array(        'nodeapi' => array('presave'),        'comment' => array('delete', 'insert', 'update'),      ),    ),    'node_promote_action' => array(      'type' => 'node',      'description' => t('Promote post to front page'),      'configurable' => FALSE,      'behavior' => array('changes_node_property'),      'hooks' => array(        'nodeapi' => array('presave'),        'comment' => array('insert', 'update'),      ),    ),    'node_unpromote_action' => array(      'type' => 'node',      'description' => t('Remove post from front page'),      'configurable' => FALSE,      'behavior' => array('changes_node_property'),      'hooks' => array(        'nodeapi' => array('presave'),        'comment' => array('delete', 'insert', 'update'),      ),    ),    'node_assign_owner_action' => array(      'type' => 'node',      'description' => t('Change the author of a post'),      'configurable' => TRUE,      'behavior' => array('changes_node_property'),      'hooks' => array(        'any' => TRUE,        'nodeapi' => array('presave'),        'comment' => array('delete', 'insert', 'update'),      ),    ),    'node_save_action' => array(      'type' => 'node',      'description' => t('Save post'),      'configurable' => FALSE,      'hooks' => array(        'comment' => array('delete', 'insert', 'update'),      ),    ),    'node_unpublish_by_keyword_action' => array(      'type' => 'node',      'description' => t('Unpublish post containing keyword(s)'),      'configurable' => TRUE,      'hooks' => array(        'nodeapi' => array('presave', 'insert', 'update'),      ),    ),  );}/** * Implementation of a Drupal action. * Sets the status of a node to 1, meaning published. */function node_publish_action(&$node, $context = array()) {  $node->status = 1;  watchdog('action', 'Set @type %title to published.', array('@type' => node_get_types('name', $node), '%title' => $node->title));}/** * Implementation of a Drupal action. * Sets the status of a node to 0, meaning unpublished. */function node_unpublish_action(&$node, $context = array()) {  $node->status = 0;  watchdog('action', 'Set @type %title to unpublished.', array('@type' => node_get_types('name', $node), '%title' => $node->title));}/** * Implementation of a Drupal action. * Sets the sticky-at-top-of-list property of a node to 1. */function node_make_sticky_action(&$node, $context = array()) {  $node->sticky = 1;  watchdog('action', 'Set @type %title to sticky.', array('@type' => node_get_types('name', $node), '%title' => $node->title));}/** * Implementation of a Drupal action. * Sets the sticky-at-top-of-list property of a node to 0. */function node_make_unsticky_action(&$node, $context = array()) {  $node->sticky = 0;  watchdog('action', 'Set @type %title to unsticky.', array('@type' => node_get_types('name', $node), '%title' => $node->title));}/** * Implementation of a Drupal action. * Sets the promote property of a node to 1. */function node_promote_action(&$node, $context = array()) {  $node->promote = 1;  watchdog('action', 'Promoted @type %title to front page.', array('@type' => node_get_types('name', $node), '%title' => $node->title));}/** * Implementation of a Drupal action. * Sets the promote property of a node to 0. */function node_unpromote_action(&$node, $context = array()) {  $node->promote = 0;  watchdog('action', 'Removed @type %title from front page.', array('@type' => node_get_types('name', $node), '%title' => $node->title));}/** * Implementation of a Drupal action. * Saves a node. */function node_save_action($node) {  node_save($node);  watchdog('action', 'Saved @type %title', array('@type' => node_get_types('name', $node), '%title' => $node->title));}/** * Implementation of a configurable Drupal action. * Assigns ownership of a node to a user. */function node_assign_owner_action(&$node, $context) {  $node->uid = $context['owner_uid'];  $owner_name = db_result(db_query("SELECT name FROM {users} WHERE uid = %d", $context['owner_uid']));  watchdog('action', 'Changed owner of @type %title to uid %name.', array('@type' => node_get_types('type', $node), '%title' => $node->title, '%name' => $owner_name));}function node_assign_owner_action_form($context) {  $description = t('The username of the user to which you would like to assign ownership.');  $count = db_result(db_query("SELECT COUNT(*) FROM {users}"));  $owner_name = '';  if (isset($context['owner_uid'])) {    $owner_name = db_result(db_query("SELECT name FROM {users} WHERE uid = %d", $context['owner_uid']));  }  // Use dropdown for fewer than 200 users; textbox for more than that.  if (intval($count) < 200) {    $options = array();    $result = db_query("SELECT uid, name FROM {users} WHERE uid > 0 ORDER BY name");    while ($data = db_fetch_object($result)) {      $options[$data->name] = $data->name;    }    $form['owner_name'] = array(      '#type' => 'select',      '#title' => t('Username'),      '#default_value' => $owner_name,      '#options' => $options,      '#description' => $description,    );  }  else {    $form['owner_name'] = array(      '#type' => 'textfield',      '#title' => t('Username'),      '#default_value' => $owner_name,      '#autocomplete_path' => 'user/autocomplete',      '#size' => '6',      '#maxlength' => '60',      '#description' => $description,    );  }  return $form;}function node_assign_owner_action_validate($form, $form_state) {  $count = db_result(db_query("SELECT COUNT(*) FROM {users} WHERE name = '%s'", $form_state['values']['owner_name']));  if (intval($count) != 1) {    form_set_error('owner_name', t('Please enter a valid username.'));  }}function node_assign_owner_action_submit($form, $form_state) {  // Username can change, so we need to store the ID, not the username.  $uid = db_result(db_query("SELECT uid from {users} WHERE name = '%s'", $form_state['values']['owner_name']));  return array('owner_uid' => $uid);}function node_unpublish_by_keyword_action_form($context) {  $form['keywords'] = array(    '#title' => t('Keywords'),    '#type' => 'textarea',    '#description' => t('The post will be unpublished if it contains any of the character sequences above. Use a comma-separated list of character sequences. Example: funny, bungee jumping, "Company, Inc.". Character sequences are case-sensitive.'),    '#default_value' => isset($context['keywords']) ? drupal_implode_tags($context['keywords']) : '',  );  return $form;}function node_unpublish_by_keyword_action_submit($form, $form_state) {  return array('keywords' => drupal_explode_tags($form_state['values']['keywords']));}/** * Implementation of a configurable Drupal action. * Unpublish a node if it contains a certain string. * * @param $context *   An array providing more information about the context of the call to this action. * @param $comment *   A node object. */function node_unpublish_by_keyword_action($node, $context) {  foreach ($context['keywords'] as $keyword) {    if (strstr(node_view(drupal_clone($node)), $keyword) || strstr($node->title, $keyword)) {      $node->status = 0;      watchdog('action', 'Set @type %title to unpublished.', array('@type' => node_get_types('name', $node), '%title' => $node->title));      break;    }  }}
<?php// $Id$/** * @file * Enables site-wide keyword searching. *//** * Matches Unicode character classes to exclude from the search index. * * See: http://www.unicode.org/Public/UNIDATA/UCD.html#General_Category_Values * * The index only contains the following character classes: * Lu     Letter, Uppercase * Ll     Letter, Lowercase * Lt     Letter, Titlecase * Lo     Letter, Other * Nd     Number, Decimal Digit * No     Number, Other */define('PREG_CLASS_SEARCH_EXCLUDE','\x{0}-\x{2f}\x{3a}-\x{40}\x{5b}-\x{60}\x{7b}-\x{bf}\x{d7}\x{f7}\x{2b0}-'.'\x{385}\x{387}\x{3f6}\x{482}-\x{489}\x{559}-\x{55f}\x{589}-\x{5c7}\x{5f3}-'.'\x{61f}\x{640}\x{64b}-\x{65e}\x{66a}-\x{66d}\x{670}\x{6d4}\x{6d6}-\x{6ed}'.'\x{6fd}\x{6fe}\x{700}-\x{70f}\x{711}\x{730}-\x{74a}\x{7a6}-\x{7b0}\x{901}-'.'\x{903}\x{93c}\x{93e}-\x{94d}\x{951}-\x{954}\x{962}-\x{965}\x{970}\x{981}-'.'\x{983}\x{9bc}\x{9be}-\x{9cd}\x{9d7}\x{9e2}\x{9e3}\x{9f2}-\x{a03}\x{a3c}-'.'\x{a4d}\x{a70}\x{a71}\x{a81}-\x{a83}\x{abc}\x{abe}-\x{acd}\x{ae2}\x{ae3}'.'\x{af1}-\x{b03}\x{b3c}\x{b3e}-\x{b57}\x{b70}\x{b82}\x{bbe}-\x{bd7}\x{bf0}-'.'\x{c03}\x{c3e}-\x{c56}\x{c82}\x{c83}\x{cbc}\x{cbe}-\x{cd6}\x{d02}\x{d03}'.'\x{d3e}-\x{d57}\x{d82}\x{d83}\x{dca}-\x{df4}\x{e31}\x{e34}-\x{e3f}\x{e46}-'.'\x{e4f}\x{e5a}\x{e5b}\x{eb1}\x{eb4}-\x{ebc}\x{ec6}-\x{ecd}\x{f01}-\x{f1f}'.'\x{f2a}-\x{f3f}\x{f71}-\x{f87}\x{f90}-\x{fd1}\x{102c}-\x{1039}\x{104a}-'.'\x{104f}\x{1056}-\x{1059}\x{10fb}\x{10fc}\x{135f}-\x{137c}\x{1390}-\x{1399}'.'\x{166d}\x{166e}\x{1680}\x{169b}\x{169c}\x{16eb}-\x{16f0}\x{1712}-\x{1714}'.'\x{1732}-\x{1736}\x{1752}\x{1753}\x{1772}\x{1773}\x{17b4}-\x{17db}\x{17dd}'.'\x{17f0}-\x{180e}\x{1843}\x{18a9}\x{1920}-\x{1945}\x{19b0}-\x{19c0}\x{19c8}'.'\x{19c9}\x{19de}-\x{19ff}\x{1a17}-\x{1a1f}\x{1d2c}-\x{1d61}\x{1d78}\x{1d9b}-'.'\x{1dc3}\x{1fbd}\x{1fbf}-\x{1fc1}\x{1fcd}-\x{1fcf}\x{1fdd}-\x{1fdf}\x{1fed}-'.'\x{1fef}\x{1ffd}-\x{2070}\x{2074}-\x{207e}\x{2080}-\x{2101}\x{2103}-\x{2106}'.'\x{2108}\x{2109}\x{2114}\x{2116}-\x{2118}\x{211e}-\x{2123}\x{2125}\x{2127}'.'\x{2129}\x{212e}\x{2132}\x{213a}\x{213b}\x{2140}-\x{2144}\x{214a}-\x{2b13}'.'\x{2ce5}-\x{2cff}\x{2d6f}\x{2e00}-\x{3005}\x{3007}-\x{303b}\x{303d}-\x{303f}'.'\x{3099}-\x{309e}\x{30a0}\x{30fb}-\x{30fe}\x{3190}-\x{319f}\x{31c0}-\x{31cf}'.'\x{3200}-\x{33ff}\x{4dc0}-\x{4dff}\x{a015}\x{a490}-\x{a716}\x{a802}\x{a806}'.'\x{a80b}\x{a823}-\x{a82b}\x{d800}-\x{f8ff}\x{fb1e}\x{fb29}\x{fd3e}\x{fd3f}'.'\x{fdfc}-\x{fe6b}\x{feff}-\x{ff0f}\x{ff1a}-\x{ff20}\x{ff3b}-\x{ff40}\x{ff5b}-'.'\x{ff65}\x{ff70}\x{ff9e}\x{ff9f}\x{ffe0}-\x{fffd}');/** * Matches all 'N' Unicode character classes (numbers) */define('PREG_CLASS_NUMBERS','\x{30}-\x{39}\x{b2}\x{b3}\x{b9}\x{bc}-\x{be}\x{660}-\x{669}\x{6f0}-\x{6f9}'.'\x{966}-\x{96f}\x{9e6}-\x{9ef}\x{9f4}-\x{9f9}\x{a66}-\x{a6f}\x{ae6}-\x{aef}'.'\x{b66}-\x{b6f}\x{be7}-\x{bf2}\x{c66}-\x{c6f}\x{ce6}-\x{cef}\x{d66}-\x{d6f}'.'\x{e50}-\x{e59}\x{ed0}-\x{ed9}\x{f20}-\x{f33}\x{1040}-\x{1049}\x{1369}-'.'\x{137c}\x{16ee}-\x{16f0}\x{17e0}-\x{17e9}\x{17f0}-\x{17f9}\x{1810}-\x{1819}'.'\x{1946}-\x{194f}\x{2070}\x{2074}-\x{2079}\x{2080}-\x{2089}\x{2153}-\x{2183}'.'\x{2460}-\x{249b}\x{24ea}-\x{24ff}\x{2776}-\x{2793}\x{3007}\x{3021}-\x{3029}'.'\x{3038}-\x{303a}\x{3192}-\x{3195}\x{3220}-\x{3229}\x{3251}-\x{325f}\x{3280}-'.'\x{3289}\x{32b1}-\x{32bf}\x{ff10}-\x{ff19}');/** * Matches all 'P' Unicode character classes (punctuation) */define('PREG_CLASS_PUNCTUATION','\x{21}-\x{23}\x{25}-\x{2a}\x{2c}-\x{2f}\x{3a}\x{3b}\x{3f}\x{40}\x{5b}-\x{5d}'.'\x{5f}\x{7b}\x{7d}\x{a1}\x{ab}\x{b7}\x{bb}\x{bf}\x{37e}\x{387}\x{55a}-\x{55f}'.'\x{589}\x{58a}\x{5be}\x{5c0}\x{5c3}\x{5f3}\x{5f4}\x{60c}\x{60d}\x{61b}\x{61f}'.'\x{66a}-\x{66d}\x{6d4}\x{700}-\x{70d}\x{964}\x{965}\x{970}\x{df4}\x{e4f}'.'\x{e5a}\x{e5b}\x{f04}-\x{f12}\x{f3a}-\x{f3d}\x{f85}\x{104a}-\x{104f}\x{10fb}'.'\x{1361}-\x{1368}\x{166d}\x{166e}\x{169b}\x{169c}\x{16eb}-\x{16ed}\x{1735}'.'\x{1736}\x{17d4}-\x{17d6}\x{17d8}-\x{17da}\x{1800}-\x{180a}\x{1944}\x{1945}'.'\x{2010}-\x{2027}\x{2030}-\x{2043}\x{2045}-\x{2051}\x{2053}\x{2054}\x{2057}'.'\x{207d}\x{207e}\x{208d}\x{208e}\x{2329}\x{232a}\x{23b4}-\x{23b6}\x{2768}-'.'\x{2775}\x{27e6}-\x{27eb}\x{2983}-\x{2998}\x{29d8}-\x{29db}\x{29fc}\x{29fd}'.'\x{3001}-\x{3003}\x{3008}-\x{3011}\x{3014}-\x{301f}\x{3030}\x{303d}\x{30a0}'.'\x{30fb}\x{fd3e}\x{fd3f}\x{fe30}-\x{fe52}\x{fe54}-\x{fe61}\x{fe63}\x{fe68}'.'\x{fe6a}\x{fe6b}\x{ff01}-\x{ff03}\x{ff05}-\x{ff0a}\x{ff0c}-\x{ff0f}\x{ff1a}'.'\x{ff1b}\x{ff1f}\x{ff20}\x{ff3b}-\x{ff3d}\x{ff3f}\x{ff5b}\x{ff5d}\x{ff5f}-'.'\x{ff65}');/** * Matches all CJK characters that are candidates for auto-splitting * (Chinese, Japanese, Korean). * Contains kana and BMP ideographs. */define('PREG_CLASS_CJK', '\x{3041}-\x{30ff}\x{31f0}-\x{31ff}\x{3400}-\x{4db5}'.'\x{4e00}-\x{9fbb}\x{f900}-\x{fad9}');/** * Implementation of hook_help(). */function search_help($path, $arg) {  switch ($path) {    case 'admin/help#search':      $output = '<p>'. t('The search module adds the ability to search for content by keywords. Search is often the only practical way to find content on a large site, and is useful for finding both users and posts.') .'</p>';      $output .= '<p>'. t('To provide keyword searching, the search engine maintains an index of words found in your site\'s content. To build and maintain this index, a correctly configured <a href="@cron">cron maintenance task</a> is required. Indexing behavior can be adjusted using the <a href="@searchsettings">search settings page</a>; for example, the <em>Number of items to index per cron run</em> sets the maximum number of items indexed in each pass of a <a href="@cron">cron maintenance task</a>. If necessary, reduce this number to prevent timeouts and memory errors when indexing.', array('@cron' => url('admin/reports/status'), '@searchsettings' => url('admin/settings/search'))) .'</p>';      $output .= '<p>'. t('For more information, see the online handbook entry for <a href="@search">Search module</a>.', array('@search' => 'http://drupal.org/handbook/modules/search/')) .'</p>';      return $output;    case 'admin/settings/search':      return '<p>'. t('The search engine maintains an index of words found in your site\'s content. To build and maintain this index, a correctly configured <a href="@cron">cron maintenance task</a> is required. Indexing behavior can be adjusted using the settings below.', array('@cron' => url('admin/reports/status'))) .'</p>';    case 'search#noresults':      return t('<ul><li>Check if your spelling is correct.</li><li>Remove quotes around phrases to match each word individually: <em>"blue smurf"</em> will match less than <em>blue smurf</em>.</li><li>Consider loosening your query with <em>OR</em>: <em>blue smurf</em> will match less than <em>blue OR smurf</em>.</li></ul>');  }}/** * Implementation of hook_theme() */function search_theme() {  return array(    'search_theme_form' => array(      'arguments' => array('form' => NULL),      'template' => 'search-theme-form',    ),    'search_block_form' => array(      'arguments' => array('form' => NULL),      'template' => 'search-block-form',    ),    'search_result' => array(      'arguments' => array('result' => NULL, 'type' => NULL),      'file' => 'search.pages.inc',      'template' => 'search-result',    ),    'search_results' => array(      'arguments' => array('results' => NULL, 'type' => NULL),      'file' => 'search.pages.inc',      'template' => 'search-results',    ),  );}/** * Implementation of hook_perm(). */function search_perm() {  return array('search content', 'use advanced search', 'administer search');}/** * Implementation of hook_block(). */function search_block($op = 'list', $delta = 0) {  if ($op == 'list') {    $blocks[0]['info'] = t('Search form');    // Not worth caching.    $blocks[0]['cache'] = BLOCK_NO_CACHE;    return $blocks;  }  else if ($op == 'view' && user_access('search content')) {    $block['content'] = drupal_get_form('search_block_form');    $block['subject'] = t('Search');    return $block;  }}/** * Implementation of hook_menu(). */function search_menu() {  $items['search'] = array(    'title' => 'Search',    'page callback' => 'search_view',    'access arguments' => array('search content'),    'type' => MENU_SUGGESTED_ITEM,    'file' => 'search.pages.inc',  );  $items['admin/settings/search'] = array(    'title' => 'Search settings',    'description' => 'Configure relevance settings for search and other indexing options',    'page callback' => 'drupal_get_form',    'page arguments' => array('search_admin_settings'),    'access arguments' => array('administer search'),    'type' => MENU_NORMAL_ITEM,    'file' => 'search.admin.inc',  );  $items['admin/settings/search/wipe'] = array(    'title' => 'Clear index',    'page callback' => 'drupal_get_form',    'page arguments' => array('search_wipe_confirm'),    'access arguments' => array('administer search'),    'type' => MENU_CALLBACK,    'file' => 'search.admin.inc',  );  $items['admin/reports/search'] = array(    'title' => 'Top search phrases',    'description' => 'View most popular search phrases.',    'page callback' => 'dblog_top',    'page arguments' => array('search'),    'access arguments' => array('access site reports'),    'file' => 'dblog.admin.inc',    'file path' => drupal_get_path('module', 'dblog'),  );  foreach (module_implements('search') as $name) {    $items['search/'. $name .'/%menu_tail'] = array(      'title callback' => 'module_invoke',      'title arguments' => array($name, 'search', 'name', TRUE),      'page callback' => 'search_view',      'page arguments' => array($name),      'access callback' => '_search_menu',      'access arguments' => array($name),      'type' => MENU_LOCAL_TASK,      'parent' => 'search',      'file' => 'search.pages.inc',    );  }  return $items;}function _search_menu($name) {  return user_access('search content') && module_invoke($name, 'search', 'name');}/** * Wipes a part of or the entire search index. * * @param $sid *  (optional) The SID of the item to wipe. If specified, $type must be passed *  too. * @param $type *  (optional) The type of item to wipe. */function search_wipe($sid = NULL, $type = NULL, $reindex = FALSE) {  if ($type == NULL && $sid == NULL) {    module_invoke_all('search', 'reset');  }  else {    db_query("DELETE FROM {search_dataset} WHERE sid = %d AND type = '%s'", $sid, $type);    db_query("DELETE FROM {search_index} WHERE sid = %d AND type = '%s'", $sid, $type);    // Don't remove links if re-indexing.    if (!$reindex) {      db_query("DELETE FROM {search_node_links} WHERE sid = %d AND type = '%s'", $sid, $type);    }  }}/** * Marks a word as dirty (or retrieves the list of dirty words). This is used * during indexing (cron). Words which are dirty have outdated total counts in * the search_total table, and need to be recounted. */function search_dirty($word = NULL) {  static $dirty = array();  if ($word !== NULL) {    $dirty[$word] = TRUE;  }  else {    return $dirty;  }}/** * Implementation of hook_cron(). * * Fires hook_update_index() in all modules and cleans up dirty words (see * search_dirty). */function search_cron() {  // We register a shutdown function to ensure that search_total is always up  // to date.  register_shutdown_function('search_update_totals');  // Update word index  foreach (module_list() as $module) {    module_invoke($module, 'update_index');  }}/** * This function is called on shutdown to ensure that search_total is always * up to date (even if cron times out or otherwise fails). */function search_update_totals() {  // Update word IDF (Inverse Document Frequency) counts for new/changed words  foreach (search_dirty() as $word => $dummy) {    // Get total count    $total = db_result(db_query("SELECT SUM(score) FROM {search_index} WHERE word = '%s'", $word));    // Apply Zipf's law to equalize the probability distribution    $total = log10(1 + 1/(max(1, $total)));    db_query("UPDATE {search_total} SET count = %f WHERE word = '%s'", $total, $word);    if (!db_affected_rows()) {      db_query("INSERT INTO {search_total} (word, count) VALUES ('%s', %f)", $word, $total);    }  }  // Find words that were deleted from search_index, but are still in  // search_total. We use a LEFT JOIN between the two tables and keep only the  // rows which fail to join.  $result = db_query("SELECT t.word AS realword, i.word FROM {search_total} t LEFT JOIN {search_index} i ON t.word = i.word WHERE i.word IS NULL");  while ($word = db_fetch_object($result)) {    db_query("DELETE FROM {search_total} WHERE word = '%s'", $word->realword);  }}/** * Simplifies a string according to indexing rules. */function search_simplify($text) {  // Decode entities to UTF-8  $text = decode_entities($text);  // Lowercase  $text = drupal_strtolower($text);  // Call an external processor for word handling.  search_invoke_preprocess($text);  // Simple CJK handling  if (variable_get('overlap_cjk', TRUE)) {    $text = preg_replace_callback('/['. PREG_CLASS_CJK .']+/u', 'search_expand_cjk', $text);  }  // To improve searching for numerical data such as dates, IP addresses  // or version numbers, we consider a group of numerical characters  // separated only by punctuation characters to be one piece.  // This also means that searching for e.g. '20/03/1984' also returns  // results with '20-03-1984' in them.  // Readable regexp: ([number]+)[punctuation]+(?=[number])  $text = preg_replace('/(['. PREG_CLASS_NUMBERS .']+)['. PREG_CLASS_PUNCTUATION .']+(?=['. PREG_CLASS_NUMBERS .'])/u', '\1', $text);  // The dot, underscore and dash are simply removed. This allows meaningful  // search behavior with acronyms and URLs.  $text = preg_replace('/[._-]+/', '', $text);  // With the exception of the rules above, we consider all punctuation,  // marks, spacers, etc, to be a word boundary.  $text = preg_replace('/['. PREG_CLASS_SEARCH_EXCLUDE .']+/u', ' ', $text);  return $text;}/** * Basic CJK tokenizer. Simply splits a string into consecutive, overlapping * sequences of characters ('minimum_word_size' long). */function search_expand_cjk($matches) {  $min = variable_get('minimum_word_size', 3);  $str = $matches[0];  $l = drupal_strlen($str);  // Passthrough short words  if ($l <= $min) {    return ' '. $str .' ';  }  $tokens = ' ';  // FIFO queue of characters  $chars = array();  // Begin loop  for ($i = 0; $i < $l; ++$i) {    // Grab next character    $current = drupal_substr($str, 0, 1);    $str = substr($str, strlen($current));    $chars[] = $current;    if ($i >= $min - 1) {      $tokens .= implode('', $chars) .' ';      array_shift($chars);    }  }  return $tokens;}/** * Splits a string into tokens for indexing. */function search_index_split($text) {  static $last = NULL;  static $lastsplit = NULL;  if ($last == $text) {    return $lastsplit;  }  // Process words  $text = search_simplify($text);  $words = explode(' ', $text);  array_walk($words, '_search_index_truncate');  // Save last keyword result  $last = $text;  $lastsplit = $words;  return $words;}/** * Helper function for array_walk in search_index_split. */function _search_index_truncate(&$text) {  $text = truncate_utf8($text, 50);}/** * Invokes hook_search_preprocess() in modules. */function search_invoke_preprocess(&$text) {  foreach (module_implements('search_preprocess') as $module) {    $text = module_invoke($module, 'search_preprocess', $text);  }}/** * Update the full-text search index for a particular item. * * @param $sid *   A number identifying this particular item (e.g. node id). * * @param $type *   A string defining this type of item (e.g. 'node') * * @param $text *   The content of this item. Must be a piece of HTML text. * * @ingroup search */function search_index($sid, $type, $text) {  $minimum_word_size = variable_get('minimum_word_size', 3);  // Link matching  global $base_url;  $node_regexp = '@href=[\'"]?(?:'. preg_quote($base_url, '@') .'/|'. preg_quote(base_path(), '@') .')(?:\?q=)?/?((?![a-z]+:)[^\'">]+)[\'">]@i';  // Multipliers for scores of words inside certain HTML tags.  // Note: 'a' must be included for link ranking to work.  $tags = array('h1' => 25,                'h2' => 18,                'h3' => 15,                'h4' => 12,                'h5' => 9,                'h6' => 6,                'u' => 3,                'b' => 3,                'i' => 3,                'strong' => 3,                'em' => 3,                'a' => 10);  // Strip off all ignored tags to speed up processing, but insert space before/after  // them to keep word boundaries.  $text = str_replace(array('<', '>'), array(' <', '> '), $text);  $text = strip_tags($text, '<'. implode('><', array_keys($tags)) .'>');  // Split HTML tags from plain text.  $split = preg_split('/\s*<([^>]+?)>\s*/', $text, -1, PREG_SPLIT_DELIM_CAPTURE);  // Note: PHP ensures the array consists of alternating delimiters and literals  // and begins and ends with a literal (inserting $null as required).  $tag = FALSE; // Odd/even counter. Tag or no tag.  $link = FALSE; // State variable for link analyser  $score = 1; // Starting score per word  $accum = ' '; // Accumulator for cleaned up data  $tagstack = array(); // Stack with open tags  $tagwords = 0; // Counter for consecutive words  $focus = 1; // Focus state  $results = array(0 => array()); // Accumulator for words for index  foreach ($split as $value) {    if ($tag) {      // Increase or decrease score per word based on tag      list($tagname) = explode(' ', $value, 2);      $tagname = drupal_strtolower($tagname);      // Closing or opening tag?      if ($tagname[0] == '/') {        $tagname = substr($tagname, 1);        // If we encounter unexpected tags, reset score to avoid incorrect boosting.        if (!count($tagstack) || $tagstack[0] != $tagname) {          $tagstack = array();          $score = 1;        }        else {          // Remove from tag stack and decrement score          $score = max(1, $score - $tags[array_shift($tagstack)]);        }        if ($tagname == 'a') {          $link = FALSE;        }      }      else {        if (isset($tagstack[0]) && $tagstack[0] == $tagname) {          // None of the tags we look for make sense when nested identically.          // If they are, it's probably broken HTML.          $tagstack = array();          $score = 1;        }        else {          // Add to open tag stack and increment score          array_unshift($tagstack, $tagname);          $score += $tags[$tagname];        }        if ($tagname == 'a') {          // Check if link points to a node on this site          if (preg_match($node_regexp, $value, $match)) {            $path = drupal_get_normal_path($match[1]);            if (preg_match('!(?:node|book)/(?:view/)?([0-9]+)!i', $path, $match)) {              $linknid = $match[1];              if ($linknid > 0) {                // Note: ignore links to uncachable nodes to avoid redirect bugs.                $node = db_fetch_object(db_query('SELECT n.title, n.nid, n.vid, r.format FROM {node} n INNER JOIN {node_revisions} r ON n.vid = r.vid WHERE n.nid = %d', $linknid));                if (filter_format_allowcache($node->format)) {                  $link = TRUE;                  $linktitle = $node->title;                }              }            }          }        }      }      // A tag change occurred, reset counter.      $tagwords = 0;    }    else {      // Note: use of PREG_SPLIT_DELIM_CAPTURE above will introduce empty values      if ($value != '') {        if ($link) {          // Check to see if the node link text is its URL. If so, we use the target node title instead.          if (preg_match('!^https?://!i', $value)) {            $value = $linktitle;          }        }        $words = search_index_split($value);        foreach ($words as $word) {          // Add word to accumulator          $accum .= $word .' ';          $num = is_numeric($word);          // Check wordlength          if ($num || drupal_strlen($word) >= $minimum_word_size) {            // Normalize numbers            if ($num) {              $word = (int)ltrim($word, '-0');            }            // Links score mainly for the target.            if ($link) {              if (!isset($results[$linknid])) {                $results[$linknid] = array();              }              $results[$linknid][] = $word;              // Reduce score of the link caption in the source.              $focus *= 0.2;            }            // Fall-through            if (!isset($results[0][$word])) {              $results[0][$word] = 0;            }            $results[0][$word] += $score * $focus;            // Focus is a decaying value in terms of the amount of unique words up to this point.            // From 100 words and more, it decays, to e.g. 0.5 at 500 words and 0.3 at 1000 words.            $focus = min(1, .01 + 3.5 / (2 + count($results[0]) * .015));          }          $tagwords++;          // Too many words inside a single tag probably mean a tag was accidentally left open.          if (count($tagstack) && $tagwords >= 15) {            $tagstack = array();            $score = 1;          }        }      }    }    $tag = !$tag;  }  search_wipe($sid, $type, TRUE);  // Insert cleaned up data into dataset  db_query("INSERT INTO {search_dataset} (sid, type, data, reindex) VALUES (%d, '%s', '%s', %d)", $sid, $type, $accum, 0);  // Insert results into search index  foreach ($results[0] as $word => $score) {    // Try inserting first because this will succeed most times, but because    // the database collates similar words (accented and non-accented), the    // insert can fail, in which case we need to add the word scores together.    @db_query("INSERT INTO {search_index} (word, sid, type, score) VALUES ('%s', %d, '%s', %f)", $word, $sid, $type, $score);    if (!db_affected_rows()) {      db_query("UPDATE {search_index} SET score = score + %f WHERE word = '%s' AND sid = %d AND type = '%s'", $score, $word, $sid, $type);    }    search_dirty($word);  }  unset($results[0]);  // Get all previous links from this item.  $result = db_query("SELECT nid, caption FROM {search_node_links} WHERE sid = %d AND type = '%s'", $sid, $type);  $links = array();  while ($link = db_fetch_object($result)) {    $links[$link->nid] = $link->caption;  }  // Now store links to nodes.  foreach ($results as $nid => $words) {    $caption = implode(' ', $words);    if (isset($links[$nid])) {      if ($links[$nid] != $caption) {        // Update the existing link and mark the node for reindexing.        db_query("UPDATE {search_node_links} SET caption = '%s' WHERE sid = %d AND type = '%s' AND nid = %d", $caption, $sid, $type, $nid);        search_touch_node($nid);      }      // Unset the link to mark it as processed.      unset($links[$nid]);    }    else {      // Insert the existing link and mark the node for reindexing.      db_query("INSERT INTO {search_node_links} (caption, sid, type, nid) VALUES ('%s', %d, '%s', %d)", $caption, $sid, $type, $nid);      search_touch_node($nid);    }  }  // Any left-over links in $links no longer exist. Delete them and mark the nodes for reindexing.  foreach ($links as $nid => $caption) {    db_query("DELETE FROM {search_node_links} WHERE sid = %d AND type = '%s' AND nid = %d", $sid, $type, $nid);    search_touch_node($nid);  }}/** * Change a node's changed timestamp to 'now' to force reindexing. * * @param $nid *   The nid of the node that needs reindexing. */function search_touch_node($nid) {  db_query("UPDATE {search_dataset} SET reindex = %d WHERE sid = %d AND type = 'node'", time(), $nid);}/** * Implementation of hook_nodeapi(). */function search_nodeapi(&$node, $op, $teaser = NULL, $page = NULL) {  switch ($op) {    // Transplant links to a node into the target node.    case 'update index':      $result = db_query("SELECT caption FROM {search_node_links} WHERE nid = %d", $node->nid);      $output = array();      while ($link = db_fetch_object($result)) {        $output[] = $link->caption;      }      if (count($output)) {        return '<a>('. implode(', ', $output) .')</a>';      }      break;    // Reindex the node when it is updated.  The node is automatically indexed    // when it is added, simply by being added to the node table.    case 'update':      search_touch_node($node->nid);      break;  }}/** * Implementation of hook_comment(). */function search_comment($a1, $op) {  switch ($op) {    // Reindex the node when comments are added or changed    case 'insert':    case 'update':    case 'delete':    case 'publish':    case 'unpublish':      search_touch_node(is_array($a1) ? $a1['nid'] : $a1->nid);      break;  }}/** * Extract a module-specific search option from a search query. e.g. 'type:book' */function search_query_extract($keys, $option) {  if (preg_match('/(^| )'. $option .':([^ ]*)( |$)/i', $keys, $matches)) {    return $matches[2];  }}/** * Return a query with the given module-specific search option inserted in. * e.g. 'type:book'. */function search_query_insert($keys, $option, $value = '') {  if (search_query_extract($keys, $option)) {    $keys = trim(preg_replace('/(^| )'. $option .':[^ ]*/i', '', $keys));  }  if ($value != '') {    $keys .= ' '. $option .':'. $value;  }  return $keys;}/** * Parse a search query into SQL conditions. * * We build two queries that matches the dataset bodies. @See do_search for * more about these. * * @param $text *   The search keys. * @return *   A list of six elements. *    * A series of statements AND'd together which will be used to provide all *      possible matches. *    * Arguments for this query part. *    * A series of exact word matches OR'd together. *    * Arguments for this query part. *    * A bool indicating whether this is a simple query or not. Negative *      terms, presence of both AND / OR make this FALSE. *    * A bool indicating the presence of a lowercase or. Maybe the user *      wanted to use OR. */function search_parse_query($text) {  $keys = array('positive' => array(), 'negative' => array());  // Tokenize query string  preg_match_all('/ (-?)("[^"]+"|[^" ]+)/i', ' '. $text, $matches, PREG_SET_ORDER);  if (count($matches) < 1) {    return NULL;  }  // Classify tokens  $or = FALSE;  $warning = '';  $simple = TRUE;  foreach ($matches as $match) {    $phrase = FALSE;    // Strip off phrase quotes    if ($match[2]{0} == '"') {      $match[2] = substr($match[2], 1, -1);      $phrase = TRUE;      $simple = FALSE;    }    // Simplify keyword according to indexing rules and external preprocessors    $words = search_simplify($match[2]);    // Re-explode in case simplification added more words, except when matching a phrase    $words = $phrase ? array($words) : preg_split('/ /', $words, -1, PREG_SPLIT_NO_EMPTY);    // Negative matches    if ($match[1] == '-') {      $keys['negative'] = array_merge($keys['negative'], $words);    }    // OR operator: instead of a single keyword, we store an array of all    // OR'd keywords.    elseif ($match[2] == 'OR' && count($keys['positive'])) {      $last = array_pop($keys['positive']);      // Starting a new OR?      if (!is_array($last)) {        $last = array($last);      }      $keys['positive'][] = $last;      $or = TRUE;      continue;    }    // AND operator: implied, so just ignore it    elseif ($match[2] == 'AND' || $match[2] == 'and') {      $warning = $match[2];      continue;    }    // Plain keyword    else {      if ($match[2] == 'or') {        $warning = $match[2];      }      if ($or) {        // Add to last element (which is an array)        $keys['positive'][count($keys['positive']) - 1] = array_merge($keys['positive'][count($keys['positive']) - 1], $words);      }      else {        $keys['positive'] = array_merge($keys['positive'], $words);      }    }    $or = FALSE;  }  // Convert keywords into SQL statements.  $query = array();  $query2 = array();  $arguments = array();  $arguments2 = array();  $matches = 0;  $simple_and = FALSE;  $simple_or = FALSE;  // Positive matches  foreach ($keys['positive'] as $key) {    // Group of ORed terms    if (is_array($key) && count($key)) {      $simple_or = TRUE;      $queryor = array();      $any = FALSE;      foreach ($key as $or) {        list($q, $num_new_scores) = _search_parse_query($or, $arguments2);        $any |= $num_new_scores;        if ($q) {          $queryor[] = $q;          $arguments[] = $or;        }      }      if (count($queryor)) {        $query[] = '('. implode(' OR ', $queryor) .')';        // A group of OR keywords only needs to match once        $matches += ($any > 0);      }    }    // Single ANDed term    else {      $simple_and = TRUE;      list($q, $num_new_scores, $num_valid_words) = _search_parse_query($key, $arguments2);      if ($q) {        $query[] = $q;        $arguments[] = $key;        if (!$num_valid_words) {          $simple = FALSE;        }        // Each AND keyword needs to match at least once        $matches += $num_new_scores;      }    }  }  if ($simple_and && $simple_or) {    $simple = FALSE;  }  // Negative matches  foreach ($keys['negative'] as $key) {    list($q) = _search_parse_query($key, $arguments2, TRUE);    if ($q) {      $query[] = $q;      $arguments[] = $key;      $simple = FALSE;    }  }  $query = implode(' AND ', $query);  // Build word-index conditions for the first pass  $query2 = substr(str_repeat("i.word = '%s' OR ", count($arguments2)), 0, -4);  return array($query, $arguments, $query2, $arguments2, $matches, $simple, $warning);}/** * Helper function for search_parse_query(); */function _search_parse_query(&$word, &$scores, $not = FALSE) {  $num_new_scores = 0;  $num_valid_words = 0;  // Determine the scorewords of this word/phrase  if (!$not) {    $split = explode(' ', $word);    foreach ($split as $s) {      $num = is_numeric($s);      if ($num || drupal_strlen($s) >= variable_get('minimum_word_size', 3)) {        $s = $num ? ((int)ltrim($s, '-0')) : $s;        if (!isset($scores[$s])) {          $scores[$s] = $s;          $num_new_scores++;        }        $num_valid_words++;      }    }  }  // Return matching snippet and number of added words  return array("d.data ". ($not ? 'NOT ' : '') ."LIKE '%% %s %%'", $num_new_scores, $num_valid_words);}/** * Do a query on the full-text search index for a word or words. * * This function is normally only called by each module that support the * indexed search (and thus, implements hook_update_index()). * * Results are retrieved in two logical passes. However, the two passes are * joined together into a single query.  And in the case of most simple * queries the second pass is not even used. * * The first pass selects a set of all possible matches, which has the benefit * of also providing the exact result set for simple "AND" or "OR" searches. * * The second portion of the query further refines this set by verifying * advanced text conditions (such negative or phrase matches) * * @param $keywords *   A search string as entered by the user. * * @param $type *   A string identifying the calling module. * * @param $join1 *   (optional) Inserted into the JOIN part of the first SQL query. *   For example "INNER JOIN {node} n ON n.nid = i.sid". * * @param $where1 *   (optional) Inserted into the WHERE part of the first SQL query. *   For example "(n.status > %d)". * * @param $arguments1 *   (optional) Extra SQL arguments belonging to the first query. * * @param $columns2 *   (optional) Inserted into the SELECT pat of the second query. Must contain *   a column selected as 'score'. *   defaults to 'i.relevance AS score' * * @param $join2 *   (optional) Inserted into the JOIN par of the second SQL query. *   For example "INNER JOIN {node_comment_statistics} n ON n.nid = i.sid" * * @param $arguments2 *   (optional) Extra SQL arguments belonging to the second query parameter. * * @param $sort_parameters *   (optional) SQL arguments for sorting the final results. *              Default: 'ORDER BY score DESC' * * @return *   An array of SIDs for the search results. * * @ingroup search */function do_search($keywords, $type, $join1 = '', $where1 = '1 = 1', $arguments1 = array(), $columns2 = 'i.relevance AS score', $join2 = '', $arguments2 = array(), $sort_parameters = 'ORDER BY score DESC') {  $query = search_parse_query($keywords);  if ($query[2] == '') {    form_set_error('keys', t('You must include at least one positive keyword with @count characters or more.', array('@count' => variable_get('minimum_word_size', 3))));  }  if ($query[6]) {    if ($query[6] == 'or') {      drupal_set_message(t('Search for either of the two terms with uppercase <strong>OR</strong>. For example, <strong>cats OR dogs</strong>.'));    }  }  if ($query === NULL || $query[0] == '' || $query[2] == '') {    return array();  }  // Build query for keyword normalization.  $conditions = "$where1 AND ($query[2]) AND i.type = '%s'";  $arguments1 = array_merge($arguments1, $query[3], array($type));  $join = "INNER JOIN {search_total} t ON i.word = t.word $join1";  if (!$query[5]) {    $conditions .= " AND ($query[0])";    $arguments1 = array_merge($arguments1, $query[1]);    $join .= " INNER JOIN {search_dataset} d ON i.sid = d.sid AND i.type = d.type";  }  // Calculate maximum keyword relevance, to normalize it.  $select = "SELECT SUM(i.score * t.count) AS score FROM {search_index} i $join WHERE $conditions GROUP BY i.type, i.sid HAVING COUNT(*) >= %d ORDER BY score DESC";  $arguments = array_merge($arguments1, array($query[4]));  $normalize = db_result(db_query_range($select, $arguments, 0, 1));  if (!$normalize) {    return array();  }  $columns2 = str_replace('i.relevance', '('. (1.0 / $normalize) .' * SUM(i.score * t.count))', $columns2);  // Build query to retrieve results.  $select = "SELECT i.type, i.sid, $columns2 FROM {search_index} i $join $join2 WHERE $conditions GROUP BY i.type, i.sid HAVING COUNT(*) >= %d";  $count_select =  "SELECT COUNT(*) FROM ($select) n1";  $arguments = array_merge($arguments2, $arguments1, array($query[4]));  // Do actual search query  $result = pager_query("$select $sort_parameters", 10, 0, $count_select, $arguments);  $results = array();  while ($item = db_fetch_object($result)) {    $results[] = $item;  }  return $results;}/** * Helper function for grabbing search keys. */function search_get_keys() {  static $return;  if (!isset($return)) {    // Extract keys as remainder of path    // Note: support old GET format of searches for existing links.    $path = explode('/', $_GET['q'], 3);    $keys = empty($_REQUEST['keys']) ? '' : $_REQUEST['keys'];    $return = count($path) == 3 ? $path[2] : $keys;  }  return $return;}/** * @defgroup search Search interface * @{ * The Drupal search interface manages a global search mechanism. * * Modules may plug into this system to provide searches of different types of * data. Most of the system is handled by search.module, so this must be enabled * for all of the search features to work. * * There are three ways to interact with the search system: * - Specifically for searching nodes, you can implement nodeapi('update index') *   and nodeapi('search result'). However, note that the search system already *   indexes all visible output of a node, i.e. everything displayed normally *   by hook_view() and hook_nodeapi('view'). This is usually sufficient. *   You should only use this mechanism if you want additional, non-visible data *   to be indexed. * - Implement hook_search(). This will create a search tab for your module on *   the /search page with a simple keyword search form. You may optionally *   implement hook_search_item() to customize the display of your results. * - Implement hook_update_index(). This allows your module to use Drupal's *   HTML indexing mechanism for searching full text efficiently. * * If your module needs to provide a more complicated search form, then you need * to implement it yourself without hook_search(). In that case, you should * define it as a local task (tab) under the /search page (e.g. /search/mymodule) * so that users can easily find it. *//** * Render a search form. * * @param $action *   Form action. Defaults to "search". * @param $keys *   The search string entered by the user, containing keywords for the search. * @param $type *   The type of search to render the node for. Must be the name of module *   which implements hook_search(). Defaults to 'node'. * @param $prompt *   A piece of text to put before the form (e.g. "Enter your keywords") * @return *   An HTML string containing the search form. */function search_form(&$form_state, $action = '', $keys = '', $type = NULL, $prompt = NULL) {  // Add CSS  drupal_add_css(drupal_get_path('module', 'search') .'/search.css', 'module', 'all', FALSE);  if (!$action) {    $action = url('search/'. $type);  }  if (is_null($prompt)) {    $prompt = t('Enter your keywords');  }  $form = array(    '#action' => $action,    '#attributes' => array('class' => 'search-form'),  );  $form['module'] = array('#type' => 'value', '#value' => $type);  $form['basic'] = array('#type' => 'item', '#title' => $prompt);  $form['basic']['inline'] = array('#prefix' => '<div class="container-inline">', '#suffix' => '</div>');  $form['basic']['inline']['keys'] = array(    '#type' => 'textfield',    '#title' => '',    '#default_value' => $keys,    '#size' => $prompt ? 40 : 20,    '#maxlength' => 255,  );  // processed_keys is used to coordinate keyword passing between other forms  // that hook into the basic search form.  $form['basic']['inline']['processed_keys'] = array('#type' => 'value', '#value' => array());  $form['basic']['inline']['submit'] = array('#type' => 'submit', '#value' => t('Search'));  return $form;}/** * Form builder; Output a search form for the search block and the theme's search box. * * @ingroup forms * @see search_box_form_submit() * @see theme_search_box_form() */function search_box(&$form_state, $form_id) {  $form[$form_id] = array(    '#title' => t('Search this site'),    '#type' => 'textfield',    '#size' => 15,    '#default_value' => '',    '#attributes' => array('title' => t('Enter the terms you wish to search for.')),  );  $form['submit'] = array('#type' => 'submit', '#value' => t('Search'));  $form['#submit'][] = 'search_box_form_submit';  return $form;}/** * Process a block search form submission. */function search_box_form_submit($form, &$form_state) {  // The search form relies on control of the redirect destination for its  // functionality, so we override any static destination set in the request,  // for example by drupal_access_denied() or drupal_not_found()  // (see http://drupal.org/node/292565).  if (isset($_REQUEST['destination'])) {    unset($_REQUEST['destination']);  }  if (isset($_REQUEST['edit']['destination'])) {    unset($_REQUEST['edit']['destination']);  }  $form_id = $form['form_id']['#value'];  $form_state['redirect'] = 'search/node/'. trim($form_state['values'][$form_id]);}/** * Process variables for search-theme-form.tpl.php. * * The $variables array contains the following arguments: * - $form * * @see search-theme-form.tpl.php */function template_preprocess_search_theme_form(&$variables) {  $variables['search'] = array();  $hidden = array();  // Provide variables named after form keys so themers can print each element independently.  foreach (element_children($variables['form']) as $key) {    $type = $variables['form'][$key]['#type'];    if ($type == 'hidden' || $type == 'token') {      $hidden[] = drupal_render($variables['form'][$key]);    }    else {      $variables['search'][$key] = drupal_render($variables['form'][$key]);    }  }  // Hidden form elements have no value to themers. No need for separation.  $variables['search']['hidden'] = implode($hidden);  // Collect all form elements to make it easier to print the whole form.  $variables['search_form'] = implode($variables['search']);}/** * Process variables for search-block-form.tpl.php. * * The $variables array contains the following arguments: * - $form * * @see search-block-form.tpl.php */function template_preprocess_search_block_form(&$variables) {  $variables['search'] = array();  $hidden = array();  // Provide variables named after form keys so themers can print each element independently.  foreach (element_children($variables['form']) as $key) {    $type = $variables['form'][$key]['#type'];    if ($type == 'hidden' || $type == 'token') {      $hidden[] = drupal_render($variables['form'][$key]);    }    else {      $variables['search'][$key] = drupal_render($variables['form'][$key]);    }  }  // Hidden form elements have no value to themers. No need for separation.  $variables['search']['hidden'] = implode($hidden);  // Collect all form elements to make it easier to print the whole form.  $variables['search_form'] = implode($variables['search']);}/** * Perform a standard search on the given keys, and return the formatted results. */function search_data($keys = NULL, $type = 'node') {  if (isset($keys)) {    if (module_hook($type, 'search')) {      $results = module_invoke($type, 'search', 'search', $keys);      if (isset($results) && is_array($results) && count($results)) {        if (module_hook($type, 'search_page')) {          return module_invoke($type, 'search_page', $results);        }        else {          return theme('search_results', $results, $type);        }      }    }  }}/** * Returns snippets from a piece of text, with certain keywords highlighted. * Used for formatting search results. * * @param $keys *   A string containing a search query. * * @param $text *   The text to extract fragments from. * * @return *   A string containing HTML for the excerpt. */function search_excerpt($keys, $text) {  // We highlight around non-indexable or CJK characters.  $boundary = '(?:(?<=['. PREG_CLASS_SEARCH_EXCLUDE . PREG_CLASS_CJK .'])|(?=['. PREG_CLASS_SEARCH_EXCLUDE . PREG_CLASS_CJK .']))';  // Extract positive keywords and phrases  preg_match_all('/ ("([^"]+)"|(?!OR)([^" ]+))/', ' '. $keys, $matches);  $keys = array_merge($matches[2], $matches[3]);  // Prepare text  $text = ' '. strip_tags(str_replace(array('<', '>'), array(' <', '> '), $text)) .' ';  array_walk($keys, '_search_excerpt_replace');  $workkeys = $keys;  // Extract a fragment per keyword for at most 4 keywords.  // First we collect ranges of text around each keyword, starting/ending  // at spaces.  // If the sum of all fragments is too short, we look for second occurrences.  $ranges = array();  $included = array();  $length = 0;  while ($length < 256 && count($workkeys)) {    foreach ($workkeys as $k => $key) {      if (strlen($key) == 0) {        unset($workkeys[$k]);        unset($keys[$k]);        continue;      }      if ($length >= 256) {        break;      }      // Remember occurrence of key so we can skip over it if more occurrences      // are desired.      if (!isset($included[$key])) {        $included[$key] = 0;      }      // Locate a keyword (position $p), then locate a space in front (position      // $q) and behind it (position $s)      if (preg_match('/'. $boundary . $key . $boundary .'/iu', $text, $match, PREG_OFFSET_CAPTURE, $included[$key])) {        $p = $match[0][1];        if (($q = strpos($text, ' ', max(0, $p - 60))) !== FALSE) {          $end = substr($text, $p, 80);          if (($s = strrpos($end, ' ')) !== FALSE) {            $ranges[$q] = $p + $s;            $length += $p + $s - $q;            $included[$key] = $p + 1;          }          else {            unset($workkeys[$k]);          }        }        else {          unset($workkeys[$k]);        }      }      else {        unset($workkeys[$k]);      }    }  }  // If we didn't find anything, return the beginning.  if (count($ranges) == 0) {    return truncate_utf8($text, 256) .' ...';  }  // Sort the text ranges by starting position.  ksort($ranges);  // Now we collapse overlapping text ranges into one. The sorting makes it O(n).  $newranges = array();  foreach ($ranges as $from2 => $to2) {    if (!isset($from1)) {      $from1 = $from2;      $to1 = $to2;      continue;    }    if ($from2 <= $to1) {      $to1 = max($to1, $to2);    }    else {      $newranges[$from1] = $to1;      $from1 = $from2;      $to1 = $to2;    }  }  $newranges[$from1] = $to1;  // Fetch text  $out = array();  foreach ($newranges as $from => $to) {    $out[] = substr($text, $from, $to - $from);  }  $text = (isset($newranges[0]) ? '' : '... ') . implode(' ... ', $out) .' ...';  // Highlight keywords. Must be done at once to prevent conflicts ('strong' and '<strong>').  $text = preg_replace('/'. $boundary .'('. implode('|', $keys) .')'. $boundary .'/iu', '<strong>\0</strong>', $text);  return $text;}/** * @} End of "defgroup search". *//** * Helper function for array_walk in search_except. */function _search_excerpt_replace(&$text) {  $text = preg_quote($text, '/');}function search_forms() {  $forms['search_theme_form']= array(    'callback' => 'search_box',    'callback arguments' => array('search_theme_form'),  );  $forms['search_block_form']= array(    'callback' => 'search_box',    'callback arguments' => array('search_block_form'),  );  return $forms;}
<?php// $Id$/** * Implementation of hook_install(). */function update_install() {  // Create cache table.  drupal_install_schema('update');  // Remove stale variables from update_status 5.x contrib, if any.  _update_remove_update_status_variables();}/** * Implementation of hook_uninstall(). */function update_uninstall() {  // Remove cache table.  drupal_uninstall_schema('update');  // Clear any variables that might be in use  $variables = array(    'update_check_frequency',    'update_fetch_url',    'update_last_check',    'update_notification_threshold',    'update_notify_emails',  );  foreach ($variables as $variable) {    variable_del($variable);  }  menu_rebuild();}/** * Implementation of hook_schema(). */function update_schema() {  $schema['cache_update'] = drupal_get_schema_unprocessed('system', 'cache');  $schema['cache_update']['description'] = 'Cache table for the Update module to store information about available releases, fetched from central server.';  return $schema;}/** * Private helper to clear out stale variables from update_status 5.x contrib. * * @see update_install() * @see update_update_6000() */function _update_remove_update_status_variables() {  variable_del('update_status_settings');  variable_del('update_status_notify_emails');  variable_del('update_status_check_frequency');  variable_del('update_status_notification_threshold');  variable_del('update_status_last');  variable_del('update_status_fetch_url');}/** * Clear out stale variables from update_status. */function update_update_6000() {  _update_remove_update_status_variables();  return array();}
<?php// $Id$/** * Return data from the persistent cache. Data may be stored as either plain text or as serialized data. * cache_get will automatically return unserialized objects and arrays. * * @param $cid *   The cache ID of the data to retrieve. * @param $table *   The table $table to store the data in. Valid core values are 'cache_filter', *   'cache_menu', 'cache_page', or 'cache' for the default cache. */function cache_get($cid, $table = 'cache') {  global $user;  // Garbage collection necessary when enforcing a minimum cache lifetime  $cache_flush = variable_get('cache_flush_'. $table, 0);  if ($cache_flush && ($cache_flush + variable_get('cache_lifetime', 0) <= time())) {    // Reset the variable immediately to prevent a meltdown in heavy load situations.    variable_set('cache_flush_'. $table, 0);    // Time to flush old cache data    db_query("DELETE FROM {". $table ."} WHERE expire != %d AND expire <= %d", CACHE_PERMANENT, $cache_flush);  }  $cache = db_fetch_object(db_query("SELECT data, created, headers, expire, serialized FROM {". $table ."} WHERE cid = '%s'", $cid));  if (isset($cache->data)) {    // If the data is permanent or we're not enforcing a minimum cache lifetime    // always return the cached data.    if ($cache->expire == CACHE_PERMANENT || !variable_get('cache_lifetime', 0)) {      $cache->data = db_decode_blob($cache->data);      if ($cache->serialized) {        $cache->data = unserialize($cache->data);      }    }    // If enforcing a minimum cache lifetime, validate that the data is    // currently valid for this user before we return it by making sure the    // cache entry was created before the timestamp in the current session's    // cache timer. The cache variable is loaded into the $user object by    // sess_read() in session.inc.    else {      if ($user->cache > $cache->created) {        // This cache data is too old and thus not valid for us, ignore it.        return 0;      }      else {        $cache->data = db_decode_blob($cache->data);        if ($cache->serialized) {          $cache->data = unserialize($cache->data);        }      }    }    return $cache;  }  return 0;}/** * Store data in the persistent cache. * * The persistent cache is split up into four database * tables. Contributed modules can add additional tables. * * 'cache_page': This table stores generated pages for anonymous * users. This is the only table affected by the page cache setting on * the administrator panel. * * 'cache_menu': Stores the cachable part of the users' menus. * * 'cache_filter': Stores filtered pieces of content. This table is * periodically cleared of stale entries by cron. * * 'cache': Generic cache storage table. * * The reasons for having several tables are as follows: * * - smaller tables allow for faster selects and inserts * - we try to put fast changing cache items and rather static *   ones into different tables. The effect is that only the fast *   changing tables will need a lot of writes to disk. The more *   static tables will also be better cachable with MySQL's query cache * * @param $cid *   The cache ID of the data to store. * @param $data *   The data to store in the cache. Complex data types will be automatically serialized before insertion. *   Strings will be stored as plain text and not serialized. * @param $table *   The table $table to store the data in. Valid core values are 'cache_filter', *   'cache_menu', 'cache_page', or 'cache'. * @param $expire *   One of the following values: *   - CACHE_PERMANENT: Indicates that the item should never be removed unless *     explicitly told to using cache_clear_all() with a cache ID. *   - CACHE_TEMPORARY: Indicates that the item should be removed at the next *     general cache wipe. *   - A Unix timestamp: Indicates that the item should be kept at least until *     the given time, after which it behaves like CACHE_TEMPORARY. * @param $headers *   A string containing HTTP header information for cached pages. */function cache_set($cid, $data, $table = 'cache', $expire = CACHE_PERMANENT, $headers = NULL) {  $serialized = 0;  if (is_object($data) || is_array($data)) {    $data = serialize($data);    $serialized = 1;  }  $created = time();  db_query("UPDATE {". $table ."} SET data = %b, created = %d, expire = %d, headers = '%s', serialized = %d WHERE cid = '%s'", $data, $created, $expire, $headers, $serialized, $cid);  if (!db_affected_rows()) {    @db_query("INSERT INTO {". $table ."} (cid, data, created, expire, headers, serialized) VALUES ('%s', %b, %d, %d, '%s', %d)", $cid, $data, $created, $expire, $headers, $serialized);  }}/** * * Expire data from the cache. If called without arguments, expirable * entries will be cleared from the cache_page and cache_block tables. * * @param $cid *   If set, the cache ID to delete. Otherwise, all cache entries that can *   expire are deleted. * * @param $table *   If set, the table $table to delete from. Mandatory *   argument if $cid is set. * * @param $wildcard *   If $wildcard is TRUE, cache IDs starting with $cid are deleted in *   addition to the exact cache ID specified by $cid.  If $wildcard is *   TRUE and $cid is '*' then the entire table $table is emptied. */function cache_clear_all($cid = NULL, $table = NULL, $wildcard = FALSE) {  global $user;  if (!isset($cid) && !isset($table)) {    // Clear the block cache first, so stale data will    // not end up in the page cache.    cache_clear_all(NULL, 'cache_block');    cache_clear_all(NULL, 'cache_page');    return;  }  if (empty($cid)) {    if (variable_get('cache_lifetime', 0)) {      // We store the time in the current user's $user->cache variable which      // will be saved into the sessions table by sess_write(). We then      // simulate that the cache was flushed for this user by not returning      // cached data that was cached before the timestamp.      $user->cache = time();      $cache_flush = variable_get('cache_flush_'. $table, 0);      if ($cache_flush == 0) {        // This is the first request to clear the cache, start a timer.        variable_set('cache_flush_'. $table, time());      }      else if (time() > ($cache_flush + variable_get('cache_lifetime', 0))) {        // Clear the cache for everyone, cache_lifetime seconds have        // passed since the first request to clear the cache.        db_query("DELETE FROM {". $table ."} WHERE expire != %d AND expire < %d", CACHE_PERMANENT, time());        variable_set('cache_flush_'. $table, 0);      }    }    else {      // No minimum cache lifetime, flush all temporary cache entries now.      db_query("DELETE FROM {". $table ."} WHERE expire != %d AND expire < %d", CACHE_PERMANENT, time());    }  }  else {    if ($wildcard) {      if ($cid == '*') {        db_query("TRUNCATE TABLE {". $table ."}");      }      else {        db_query("DELETE FROM {". $table ."} WHERE cid LIKE '%s%%'", $cid);      }    }    else {      db_query("DELETE FROM {". $table ."} WHERE cid = '%s'", $cid);    }  }}
<?php// $Id$/** * @file aggregator-summary-items.tpl.php * Default theme implementation to present feeds as list items. * * Each iteration generates a single feed source or category. * * Available variables: * - $title: Title of the feed or category. * - $summary_list: Unordered list of linked feed items generated through *   theme_item_list(). * - $source_url: URL to the local source or category. * * @see template_preprocess() * @see template_preprocess_aggregator_summary-items() */?><h2><?php print $title; ?></h2><?php print $summary_list; ?><div class="links">  <a href="<?php print $source_url; ?>"><?php print t('More'); ?></a></div>
<?php// $Id$/** * @file * User page callbacks for the comment module. *//** * Form builder; generate a comment editing form. * * @param $cid *   ID of the comment to be edited. * @ingroup forms */function comment_edit($cid) {  global $user;  $comment = db_fetch_object(db_query('SELECT c.*, u.uid, u.name AS registered_name, u.data FROM {comments} c INNER JOIN {users} u ON c.uid = u.uid WHERE c.cid = %d', $cid));  $comment = drupal_unpack($comment);  $comment->name = $comment->uid ? $comment->registered_name : $comment->name;  if (comment_access('edit', $comment)) {    return comment_form_box((array)$comment);  }  else {    drupal_access_denied();  }}/** * This function is responsible for generating a comment reply form. * There are several cases that have to be handled, including: *   - replies to comments *   - replies to nodes *   - attempts to reply to nodes that can no longer accept comments *   - respecting access permissions ('access comments', 'post comments', etc.) * * The node or comment that is being replied to must appear above the comment * form to provide the user context while authoring the comment. * * @param $node *   Every comment belongs to a node. This is that node. * * @param $pid *   Some comments are replies to other comments. In those cases, $pid is the parent *   comment's cid. * * @return *   The rendered parent node or comment plus the new comment form. */function comment_reply($node, $pid = NULL) {  // Set the breadcrumb trail.  drupal_set_breadcrumb(array(l(t('Home'), NULL), l($node->title, 'node/'. $node->nid)));  $op = isset($_POST['op']) ? $_POST['op'] : '';  $output = '';  if (user_access('access comments')) {    // The user is previewing a comment prior to submitting it.    if ($op == t('Preview')) {      if (user_access('post comments')) {        $output .= comment_form_box(array('pid' => $pid, 'nid' => $node->nid), NULL);      }      else {        drupal_set_message(t('You are not authorized to post comments.'), 'error');        drupal_goto("node/$node->nid");      }    }    else {      // $pid indicates that this is a reply to a comment.      if ($pid) {        // load the comment whose cid = $pid        if ($comment = db_fetch_object(db_query('SELECT c.*, u.uid, u.name AS registered_name, u.signature, u.signature_format, u.picture, u.data FROM {comments} c INNER JOIN {users} u ON c.uid = u.uid WHERE c.cid = %d AND c.status = %d', $pid, COMMENT_PUBLISHED))) {          // If that comment exists, make sure that the current comment and the parent comment both          // belong to the same parent node.          if ($comment->nid != $node->nid) {            // Attempting to reply to a comment not belonging to the current nid.            drupal_set_message(t('The comment you are replying to does not exist.'), 'error');            drupal_goto("node/$node->nid");          }          // Display the parent comment          $comment = drupal_unpack($comment);          $comment->name = $comment->uid ? $comment->registered_name : $comment->name;          $output .= theme('comment_view', $comment, $node);        }        else {          drupal_set_message(t('The comment you are replying to does not exist.'), 'error');          drupal_goto("node/$node->nid");        }      }      // This is the case where the comment is in response to a node. Display the node.      else if (user_access('access content')) {        $output .= node_view($node);      }      // Should we show the reply box?      if (node_comment_mode($node->nid) != COMMENT_NODE_READ_WRITE) {        drupal_set_message(t("This discussion is closed: you can't post new comments."), 'error');        drupal_goto("node/$node->nid");      }      else if (user_access('post comments')) {        $output .= comment_form_box(array('pid' => $pid, 'nid' => $node->nid), t('Reply'));      }      else {        drupal_set_message(t('You are not authorized to post comments.'), 'error');        drupal_goto("node/$node->nid");      }    }  }  else {    drupal_set_message(t('You are not authorized to view comments.'), 'error');    drupal_goto("node/$node->nid");  }  return $output;}
<?php// $Id$/** * @file * File-handling and attaching files to nodes. * *//** * Implementation of hook_help(). */function upload_help($path, $arg) {  switch ($path) {    case 'admin/help#upload':      $output = '<p>'. t('The upload module allows users to upload files to the site. The ability to upload files is important for members of a community who want to share work. It is also useful to administrators who want to keep uploaded files connected to posts.') .'</p>';      $output .= '<p>'. t('Users with the upload files permission can upload attachments to posts. Uploads may be enabled for specific content types on the content types settings page. Each user role can be customized to limit or control the file size of uploads, or the maximum dimension of image files.') .'</p>';      $output .= '<p>'. t('For more information, see the online handbook entry for <a href="@upload">Upload module</a>.', array('@upload' => 'http://drupal.org/handbook/modules/upload/')) .'</p>';      return $output;    case 'admin/settings/upload':      return '<p>'. t('Users with the <a href="@permissions">upload files permission</a> can upload attachments. Users with the <a href="@permissions">view uploaded files permission</a> can view uploaded attachments. You can choose which post types can take attachments on the <a href="@types">content types settings</a> page.', array('@permissions' => url('admin/user/permissions'), '@types' => url('admin/settings/types'))) .'</p>';  }}/** * Implementation of hook_theme() */function upload_theme() {  return array(    'upload_attachments' => array(      'arguments' => array('files' => NULL),    ),    'upload_form_current' => array(      'arguments' => array('form' => NULL),    ),    'upload_form_new' => array(      'arguments' => array('form' => NULL),    ),  );}/** * Implementation of hook_perm(). */function upload_perm() {  return array('upload files', 'view uploaded files');}/** * Implementation of hook_link(). */function upload_link($type, $node = NULL, $teaser = FALSE) {  $links = array();  // Display a link with the number of attachments  if ($teaser && $type == 'node' && isset($node->files) && user_access('view uploaded files')) {    $num_files = 0;    foreach ($node->files as $file) {      if ($file->list) {        $num_files++;      }    }    if ($num_files) {      $links['upload_attachments'] = array(        'title' => format_plural($num_files, '1 attachment', '@count attachments'),        'href' => "node/$node->nid",        'attributes' => array('title' => t('Read full article to view attachments.')),        'fragment' => 'attachments'      );    }  }  return $links;}/** * Implementation of hook_menu(). */function upload_menu() {  $items['upload/js'] = array(    'page callback' => 'upload_js',    'access arguments' => array('upload files'),    'type' => MENU_CALLBACK,  );  $items['admin/settings/uploads'] = array(    'title' => 'File uploads',    'description' => 'Control how files may be attached to content.',    'page callback' => 'drupal_get_form',    'page arguments' => array('upload_admin_settings'),    'access arguments' => array('administer site configuration'),    'type' => MENU_NORMAL_ITEM,    'file' => 'upload.admin.inc',  );  return $items;}function upload_menu_alter(&$items) {  $items['system/files']['access arguments'] = array('view uploaded files');}/** * Determine the limitations on files that a given user may upload. The user * may be in multiple roles so we select the most permissive limitations from * all of their roles. * * @param $user *   A Drupal user object. * @return *   An associative array with the following keys: *     'extensions' *       A white space separated string containing all the file extensions this *       user may upload. *     'file_size' *       The maximum size of a file upload in bytes. *     'user_size' *       The total number of bytes for all for a user's files. *     'resolution' *       A string specifying the maximum resolution of images. */function _upload_file_limits($user) {  $file_limit = variable_get('upload_uploadsize_default', 1);  $user_limit = variable_get('upload_usersize_default', 1);  $all_extensions = explode(' ', variable_get('upload_extensions_default', 'jpg jpeg gif png txt doc xls pdf ppt pps odt ods odp'));  foreach ($user->roles as $rid => $name) {    $extensions = variable_get("upload_extensions_$rid", variable_get('upload_extensions_default', 'jpg jpeg gif png txt doc xls pdf ppt pps odt ods odp'));    $all_extensions = array_merge($all_extensions, explode(' ', $extensions));    // A zero value indicates no limit, take the least restrictive limit.    $file_size = variable_get("upload_uploadsize_$rid", variable_get('upload_uploadsize_default', 1)) * 1024 * 1024;    $file_limit = ($file_limit && $file_size) ? max($file_limit, $file_size) : 0;    $user_size = variable_get("upload_usersize_$rid", variable_get('upload_usersize_default', 1)) * 1024 * 1024;    $user_limit = ($user_limit && $user_size) ? max($user_limit, $user_size) : 0;  }  $all_extensions = implode(' ', array_unique($all_extensions));  return array(    'extensions' => $all_extensions,    'file_size' => $file_limit,    'user_size' => $user_limit,    'resolution' => variable_get('upload_max_resolution', 0),  );}/** * Implementation of hook_file_download(). */function upload_file_download($filepath) {  $filepath = file_create_path($filepath);  $result = db_query("SELECT f.*, u.nid FROM {files} f INNER JOIN {upload} u ON f.fid = u.fid WHERE filepath = '%s'", $filepath);  if ($file = db_fetch_object($result)) {    if (user_access('view uploaded files') && ($node = node_load($file->nid)) && node_access('view', $node)) {      return array(        'Content-Type: ' . $file->filemime,        'Content-Length: ' . $file->filesize,      );    }    else {      return -1;    }  }}/** * Save new uploads and store them in the session to be associated to the node * on upload_save. * * @param $node *   A node object to associate with uploaded files. */function upload_node_form_submit(&$form, &$form_state) {  global $user;  $limits = _upload_file_limits($user);  $validators = array(    'file_validate_extensions' => array($limits['extensions']),    'file_validate_image_resolution' => array($limits['resolution']),    'file_validate_size' => array($limits['file_size'], $limits['user_size']),  );  // Save new file uploads.  if (user_access('upload files') && ($file = file_save_upload('upload', $validators, file_directory_path()))) {    $file->list = variable_get('upload_list_default', 1);    $file->description = $file->filename;    $file->weight = 0;    $file->new = TRUE;    $form['#node']->files[$file->fid] = $file;    $form_state['values']['files'][$file->fid] = (array)$file;  }  if (isset($form_state['values']['files'])) {    foreach ($form_state['values']['files'] as $fid => $file) {      $form_state['values']['files'][$fid]['new'] = !empty($form['#node']->files[$fid]->new);    }  }  // Order the form according to the set file weight values.  if (!empty($form_state['values']['files'])) {    $microweight = 0.001;    foreach ($form_state['values']['files'] as $fid => $file) {      if (is_numeric($fid)) {        $form_state['values']['files'][$fid]['#weight'] = $file['weight'] + $microweight;        $microweight += 0.001;      }    }    uasort($form_state['values']['files'], 'element_sort');  }}function upload_form_alter(&$form, $form_state, $form_id) {  if ($form_id == 'node_type_form' && isset($form['identity']['type'])) {    $form['workflow']['upload'] = array(      '#type' => 'radios',      '#title' => t('Attachments'),      '#default_value' => variable_get('upload_'. $form['#node_type']->type, 1),      '#options' => array(t('Disabled'), t('Enabled')),    );  }  if (isset($form['type']) && isset($form['#node'])) {    $node = $form['#node'];    if ($form['type']['#value'] .'_node_form' == $form_id && variable_get("upload_$node->type", TRUE)) {      // Attachments fieldset      $form['attachments'] = array(        '#type' => 'fieldset',        '#access' => user_access('upload files'),        '#title' => t('File attachments'),        '#collapsible' => TRUE,        '#collapsed' => empty($node->files),        '#description' => t('Changes made to the attachments are not permanent until you save this post. The first "listed" file will be included in RSS feeds.'),        '#prefix' => '<div class="attachments">',        '#suffix' => '</div>',        '#weight' => 30,      );      // Wrapper for fieldset contents (used by ahah.js).      $form['attachments']['wrapper'] = array(        '#prefix' => '<div id="attach-wrapper">',        '#suffix' => '</div>',      );      // Make sure necessary directories for upload.module exist and are      // writable before displaying the attachment form.      $path = file_directory_path();      $temp = file_directory_temp();      // Note: pass by reference      if (!file_check_directory($path, FILE_CREATE_DIRECTORY) || !file_check_directory($temp, FILE_CREATE_DIRECTORY)) {        $form['attachments']['#description'] =  t('File attachments are disabled. The file directories have not been properly configured.');        if (user_access('administer site configuration')) {          $form['attachments']['#description'] .= ' '. t('Please visit the <a href="@admin-file-system">file system configuration page</a>.', array('@admin-file-system' => url('admin/settings/file-system')));        }        else {          $form['attachments']['#description'] .= ' '. t('Please contact the site administrator.');        }      }      else {        $form['attachments']['wrapper'] += _upload_form($node);        $form['#attributes']['enctype'] = 'multipart/form-data';      }      $form['#submit'][] = 'upload_node_form_submit';    }  }}/** * Implementation of hook_nodeapi(). */function upload_nodeapi(&$node, $op, $teaser) {  switch ($op) {    case 'load':      $output = '';      if (variable_get("upload_$node->type", 1) == 1) {        $output['files'] = upload_load($node);        return $output;      }      break;    case 'view':      if (isset($node->files) && user_access('view uploaded files')) {        // Add the attachments list to node body with a heavy        // weight to ensure they're below other elements        if (count($node->files)) {          if (!$teaser && user_access('view uploaded files')) {            $node->content['files'] = array(              '#value' => theme('upload_attachments', $node->files),              '#weight' => 50,            );          }        }      }      break;    case 'insert':    case 'update':      if (user_access('upload files')) {        upload_save($node);      }      break;    case 'delete':      upload_delete($node);      break;    case 'delete revision':      upload_delete_revision($node);      break;    case 'search result':      return isset($node->files) && is_array($node->files) ? format_plural(count($node->files), '1 attachment', '@count attachments') : NULL;    case 'rss item':      if (is_array($node->files)) {        $files = array();        foreach ($node->files as $file) {          if ($file->list) {            $files[] = $file;          }        }        if (count($files) > 0) {          // RSS only allows one enclosure per item          $file = array_shift($files);          return array(            array(              'key' => 'enclosure',              'attributes' => array(                'url' => file_create_url($file->filepath),                'length' => $file->filesize,                'type' => $file->filemime              )            )          );        }      }      return array();  }}/** * Displays file attachments in table * * @ingroup themeable */function theme_upload_attachments($files) {  $header = array(t('Attachment'), t('Size'));  $rows = array();  foreach ($files as $file) {    $file = (object)$file;    if ($file->list && empty($file->remove)) {      $href = file_create_url($file->filepath);      $text = $file->description ? $file->description : $file->filename;      $rows[] = array(l($text, $href), format_size($file->filesize));    }  }  if (count($rows)) {    return theme('table', $header, $rows, array('id' => 'attachments'));  }}/** * Determine how much disk space is occupied by a user's uploaded files. * * @param $uid *   The integer user id of a user. * @return *   The amount of disk space used by the user in bytes. */function upload_space_used($uid) {  return file_space_used($uid);}/** * Determine how much disk space is occupied by uploaded files. * * @return *   The amount of disk space used by uploaded files in bytes. */function upload_total_space_used() {  return db_result(db_query('SELECT SUM(f.filesize) FROM {files} f INNER JOIN {upload} u ON f.fid = u.fid'));}function upload_save(&$node) {  if (empty($node->files) || !is_array($node->files)) {    return;  }  foreach ($node->files as $fid => $file) {    // Convert file to object for compatibility    $file = (object)$file;    // Remove file. Process removals first since no further processing    // will be required.    if (!empty($file->remove)) {      db_query('DELETE FROM {upload} WHERE fid = %d AND vid = %d', $fid, $node->vid);      // If the file isn't used by any other revisions delete it.      $count = db_result(db_query('SELECT COUNT(fid) FROM {upload} WHERE fid = %d', $fid));      if ($count < 1) {        file_delete($file->filepath);        db_query('DELETE FROM {files} WHERE fid = %d', $fid);      }      // Remove it from the session in the case of new uploads,      // that you want to disassociate before node submission.      unset($node->files[$fid]);      // Move on, so the removed file won't be added to new revisions.      continue;    }    // Create a new revision, or associate a new file needed.    if (!empty($node->old_vid) || $file->new) {      db_query("INSERT INTO {upload} (fid, nid, vid, list, description, weight) VALUES (%d, %d, %d, %d, '%s', %d)", $file->fid, $node->nid, $node->vid, $file->list, $file->description, $file->weight);      file_set_status($file, FILE_STATUS_PERMANENT);    }    // Update existing revision.    else {      db_query("UPDATE {upload} SET list = %d, description = '%s', weight = %d WHERE fid = %d AND vid = %d", $file->list, $file->description, $file->weight, $file->fid, $node->vid);      file_set_status($file, FILE_STATUS_PERMANENT);    }  }}function upload_delete($node) {  $files = array();  $result = db_query('SELECT DISTINCT f.* FROM {upload} u INNER JOIN {files} f ON u.fid = f.fid WHERE u.nid = %d', $node->nid);  while ($file = db_fetch_object($result)) {    $files[$file->fid] = $file;  }  foreach ($files as $fid => $file) {    // Delete all files associated with the node    db_query('DELETE FROM {files} WHERE fid = %d', $fid);    file_delete($file->filepath);  }  // Delete all file revision information associated with the node  db_query('DELETE FROM {upload} WHERE nid = %d', $node->nid);}function upload_delete_revision($node) {  if (is_array($node->files)) {    foreach ($node->files as $file) {      // Check if the file will be used after this revision is deleted      $count = db_result(db_query('SELECT COUNT(fid) FROM {upload} WHERE fid = %d', $file->fid));      // if the file won't be used, delete it      if ($count < 2) {        db_query('DELETE FROM {files} WHERE fid = %d', $file->fid);        file_delete($file->filepath);      }    }  }  // delete the revision  db_query('DELETE FROM {upload} WHERE vid = %d', $node->vid);}function _upload_form($node) {  global $user;  $form = array(    '#theme' => 'upload_form_new',    '#cache' => TRUE,  );  if (!empty($node->files) && is_array($node->files)) {    $form['files']['#theme'] = 'upload_form_current';    $form['files']['#tree'] = TRUE;    foreach ($node->files as $key => $file) {      $file = (object)$file;      $description = file_create_url($file->filepath);      $description = "<small>". check_plain($description) ."</small>";      $form['files'][$key]['description'] = array('#type' => 'textfield', '#default_value' => !empty($file->description) ? $file->description : $file->filename, '#maxlength' => 256, '#description' => $description );      $form['files'][$key]['size'] = array('#value' => format_size($file->filesize));      $form['files'][$key]['remove'] = array('#type' => 'checkbox', '#default_value' => !empty($file->remove));      $form['files'][$key]['list'] = array('#type' => 'checkbox',  '#default_value' => $file->list);      $form['files'][$key]['weight'] = array('#type' => 'weight', '#delta' => count($node->files), '#default_value' => $file->weight);      $form['files'][$key]['filename'] = array('#type' => 'value',  '#value' => $file->filename);      $form['files'][$key]['filepath'] = array('#type' => 'value',  '#value' => $file->filepath);      $form['files'][$key]['filemime'] = array('#type' => 'value',  '#value' => $file->filemime);      $form['files'][$key]['filesize'] = array('#type' => 'value',  '#value' => $file->filesize);      $form['files'][$key]['fid'] = array('#type' => 'value',  '#value' => $file->fid);      $form['files'][$key]['new'] = array('#type' => 'value', '#value' => FALSE);    }  }  if (user_access('upload files')) {    $limits = _upload_file_limits($user);    $form['new']['#weight'] = 10;    $form['new']['upload'] = array(      '#type' => 'file',      '#title' => t('Attach new file'),      '#size' => 40,      '#description' => ($limits['resolution'] ? t('Images are larger than %resolution will be resized. ', array('%resolution' => $limits['resolution'])) : '') . t('The maximum upload size is %filesize. Only files with the following extensions may be uploaded: %extensions. ', array('%extensions' => $limits['extensions'], '%filesize' => format_size($limits['file_size']))),    );    $form['new']['attach'] = array(      '#type' => 'submit',      '#value' => t('Attach'),      '#name' => 'attach',      '#ahah' => array(        'path' => 'upload/js',        'wrapper' => 'attach-wrapper',        'progress' => array('type' => 'bar', 'message' => t('Please wait...')),      ),      '#submit' => array('node_form_submit_build_node'),    );  }  return $form;}/** * Theme the attachments list. * * @ingroup themeable */function theme_upload_form_current($form) {  $header = array('', t('Delete'), t('List'), t('Description'), t('Weight'), t('Size'));  drupal_add_tabledrag('upload-attachments', 'order', 'sibling', 'upload-weight');  foreach (element_children($form) as $key) {    // Add class to group weight fields for drag and drop.    $form[$key]['weight']['#attributes']['class'] = 'upload-weight';    $row = array('');    $row[] = drupal_render($form[$key]['remove']);    $row[] = drupal_render($form[$key]['list']);    $row[] = drupal_render($form[$key]['description']);    $row[] = drupal_render($form[$key]['weight']);    $row[] = drupal_render($form[$key]['size']);    $rows[] = array('data' => $row, 'class' => 'draggable');  }  $output = theme('table', $header, $rows, array('id' => 'upload-attachments'));  $output .= drupal_render($form);  return $output;}/** * Theme the attachment form. * Note: required to output prefix/suffix. * * @ingroup themeable */function theme_upload_form_new($form) {  drupal_add_tabledrag('upload-attachments', 'order', 'sibling', 'upload-weight');  $output = drupal_render($form);  return $output;}function upload_load($node) {  $files = array();  if ($node->vid) {    $result = db_query('SELECT * FROM {files} f INNER JOIN {upload} r ON f.fid = r.fid WHERE r.vid = %d ORDER BY r.weight, f.fid', $node->vid);    while ($file = db_fetch_object($result)) {      $files[$file->fid] = $file;    }  }  return $files;}/** * Menu-callback for JavaScript-based uploads. */function upload_js() {  $cached_form_state = array();  $files = array();  // Load the form from the Form API cache.  if (!($cached_form = form_get_cache($_POST['form_build_id'], $cached_form_state)) || !isset($cached_form['#node']) || !isset($cached_form['attachments'])) {    form_set_error('form_token', t('Validation error, please try again. If this error persists, please contact the site administrator.'));    $output = theme('status_messages');    print drupal_to_js(array('status' => TRUE, 'data' => $output));    exit();  }  $form_state = array('values' => $_POST);  // Handle new uploads, and merge tmp files into node-files.  upload_node_form_submit($cached_form, $form_state);  if(!empty($form_state['values']['files'])) {    foreach ($form_state['values']['files'] as $fid => $file) {      if (isset($cached_form['#node']->files[$fid])) {        $files[$fid] = $cached_form['#node']->files[$fid];      }    }  }  $node = $cached_form['#node'];  $node->files = $files;  $form = _upload_form($node);  unset($cached_form['attachments']['wrapper']['new']);  $cached_form['attachments']['wrapper'] = array_merge($cached_form['attachments']['wrapper'], $form);  $cached_form['attachments']['#collapsed'] = FALSE;  form_set_cache($_POST['form_build_id'], $cached_form, $cached_form_state);  foreach ($files as $fid => $file) {    if (is_numeric($fid)) {      $form['files'][$fid]['description']['#default_value'] = $form_state['values']['files'][$fid]['description'];      $form['files'][$fid]['list']['#default_value'] = !empty($form_state['values']['files'][$fid]['list']);      $form['files'][$fid]['remove']['#default_value'] = !empty($form_state['values']['files'][$fid]['remove']);      $form['files'][$fid]['weight']['#default_value'] = $form_state['values']['files'][$fid]['weight'];    }  }  // Render the form for output.  $form += array(    '#post' => $_POST,    '#programmed' => FALSE,    '#tree' => FALSE,    '#parents' => array(),  );  drupal_alter('form', $form, array(), 'upload_js');  $form_state = array('submitted' => FALSE);  $form = form_builder('upload_js', $form, $form_state);  $output = theme('status_messages') . drupal_render($form);  // We send the updated file attachments form.  // Don't call drupal_json(). ahah.js uses an iframe and  // the header output by drupal_json() causes problems in some browsers.  print drupal_to_js(array('status' => TRUE, 'data' => $output));  exit;}
<?php// $Id$/** * @file * Code required only when fetching information about available updates. *//** * Callback to manually check the update status without cron. */function update_manual_status() {  if (_update_refresh()) {    drupal_set_message(t('Attempted to fetch information about all available new releases and updates.'));  }  else {    drupal_set_message(t('Unable to fetch any information about available new releases and updates.'), 'error');  }  drupal_goto('admin/reports/updates');}/** * Fetch project info via XML from a central server. */function _update_refresh() {  static $fail = array();  global $base_url;  module_load_include('inc', 'update', 'update.compare');  // Since we're fetching new available update data, we want to clear  // our cache of both the projects we care about, and the current update  // status of the site. We do *not* want to clear the cache of available  // releases just yet, since that data (even if it's stale) can be useful  // during update_get_projects(); for example, to modules that implement  // hook_system_info_alter() such as cvs_deploy.  _update_cache_clear('update_project_projects');  _update_cache_clear('update_project_data');  $available = array();  $data = array();  $site_key = md5($base_url . drupal_get_private_key());  $projects = update_get_projects();  // Now that we have the list of projects, we should also clear our cache of  // available release data, since even if we fail to fetch new data, we need  // to clear out the stale data at this point.  _update_cache_clear('update_available_releases');  $max_fetch_attempts = variable_get('update_max_fetch_attempts', UPDATE_MAX_FETCH_ATTEMPTS);    foreach ($projects as $key => $project) {    $url = _update_build_fetch_url($project, $site_key);    $fetch_url_base = _update_get_fetch_url_base($project);    if (empty($fail[$fetch_url_base]) || count($fail[$fetch_url_base]) < $max_fetch_attempts) {      $xml = drupal_http_request($url);      if (isset($xml->data)) {        $data[] = $xml->data;      }      else {        // Connection likely broken; prepare to give up.        $fail[$fetch_url_base][$key] = 1;      }    }    else {      // Didn't bother trying to fetch.      $fail[$fetch_url_base][$key] = 1;    }  }  if ($data) {    $parser = new update_xml_parser;    $available = $parser->parse($data);  }  if (!empty($available) && is_array($available)) {    // Record the projects where we failed to fetch data.    foreach ($fail as $fetch_url_base => $failures) {      foreach ($failures as $key => $value) {        $available[$key]['project_status'] = 'not-fetched';      }    }    $frequency = variable_get('update_check_frequency', 1);    _update_cache_set('update_available_releases', $available, time() + (60 * 60 * 24 * $frequency));    watchdog('update', 'Attempted to fetch information about all available new releases and updates.', array(), WATCHDOG_NOTICE, l(t('view'), 'admin/reports/updates'));  }  else {    watchdog('update', 'Unable to fetch any information about available new releases and updates.', array(), WATCHDOG_ERROR, l(t('view'), 'admin/reports/updates'));  }  // Whether this worked or not, we did just (try to) check for updates.  variable_set('update_last_check', time());  return $available;}/** * Generates the URL to fetch information about project updates. * * This figures out the right URL to use, based on the project's .info file * and the global defaults. Appends optional query arguments when the site is * configured to report usage stats. * * @param $project *   The array of project information from update_get_projects(). * @param $site_key *   The anonymous site key hash (optional). * * @see update_refresh() * @see update_get_projects() */function _update_build_fetch_url($project, $site_key = '') {  $name = $project['name'];  $url = _update_get_fetch_url_base($project);  $url .= '/'. $name .'/'. DRUPAL_CORE_COMPATIBILITY;  // Only append a site_key and the version information if we have a site_key  // in the first place, and if this is not a disabled module or theme. We do  // not want to record usage statistics for disabled code.  if (!empty($site_key) && (strpos($project['project_type'], 'disabled') === FALSE)) {    $url .= (strpos($url, '?') === TRUE) ? '&' : '?';    $url .= 'site_key=';    $url .= rawurlencode($site_key);    if (!empty($project['info']['version'])) {      $url .= '&version=';      $url .= rawurlencode($project['info']['version']);    }  }  return $url;}/** * Return the base of the URL to fetch available update data for a project. * * @param $project *   The array of project information from update_get_projects(). * @return *   The base of the URL used for fetching available update data. This does *   not include the path elements to specify a particular project, version, *   site_key, etc. * * @see _update_build_fetch_url() */function _update_get_fetch_url_base($project) {  return isset($project['info']['project status url']) ? $project['info']['project status url'] : variable_get('update_fetch_url', UPDATE_DEFAULT_URL);}/** * Perform any notifications that should be done once cron fetches new data. * * This method checks the status of the site using the new data and depending * on the configuration of the site, notifies administrators via email if there * are new releases or missing security updates. * * @see update_requirements() */function _update_cron_notify() {  include_once './includes/install.inc';  $status = update_requirements('runtime');  $params = array();  $notify_all = (variable_get('update_notification_threshold', 'all') == 'all');  foreach (array('core', 'contrib') as $report_type) {    $type = 'update_'. $report_type;    if (isset($status[$type]['severity'])        && ($status[$type]['severity'] == REQUIREMENT_ERROR || ($notify_all && $status[$type]['reason'] == UPDATE_NOT_CURRENT))) {      $params[$report_type] = $status[$type]['reason'];    }  }  if (!empty($params)) {    $notify_list = variable_get('update_notify_emails', '');    if (!empty($notify_list)) {      $default_language = language_default();      foreach ($notify_list as $target) {        if ($target_user = user_load(array('mail' => $target))) {          $target_language = user_preferred_language($target_user);        }        else {          $target_language = $default_language;        }        drupal_mail('update', 'status_notify', $target, $target_language, $params);      }    }  }}/** * XML Parser object to read Drupal's release history info files. * This uses PHP4's lame XML parsing, but it works. */class update_xml_parser {  var $projects = array();  var $current_project;  var $current_release;  var $current_term;  var $current_tag;  var $current_object;  /**   * Parse an array of XML data files.   */  function parse($data) {    foreach ($data as $datum) {      $parser = xml_parser_create();      xml_set_object($parser, $this);      xml_set_element_handler($parser, 'start', 'end');      xml_set_character_data_handler($parser, "data");      xml_parse($parser, $datum);      xml_parser_free($parser);    }    return $this->projects;  }  function start($parser, $name, $attr) {    $this->current_tag = $name;    switch ($name) {      case 'PROJECT':        unset($this->current_object);        $this->current_project = array();        $this->current_object = &$this->current_project;        break;      case 'RELEASE':        unset($this->current_object);        $this->current_release = array();        $this->current_object = &$this->current_release;        break;      case 'TERM':        unset($this->current_object);        $this->current_term = array();        $this->current_object = &$this->current_term;        break;    }  }  function end($parser, $name) {    switch ($name) {      case 'PROJECT':        unset($this->current_object);        $this->projects[$this->current_project['short_name']] = $this->current_project;        $this->current_project = array();        break;      case 'RELEASE':        unset($this->current_object);        $this->current_project['releases'][$this->current_release['version']] = $this->current_release;        break;      case 'RELEASES':        $this->current_object = &$this->current_project;        break;      case 'TERM':        unset($this->current_object);        $term_name = $this->current_term['name'];        if (!isset($this->current_release['terms'])) {          $this->current_release['terms'] = array();        }        if (!isset($this->current_release['terms'][$term_name])) {          $this->current_release['terms'][$term_name] = array();        }        $this->current_release['terms'][$term_name][] = $this->current_term['value'];        break;      case 'TERMS':        $this->current_object = &$this->current_release;        break;      default:        $this->current_object[strtolower($this->current_tag)] = trim($this->current_object[strtolower($this->current_tag)]);        $this->current_tag = '';    }  }  function data($parser, $data) {    if ($this->current_tag && !in_array($this->current_tag, array('PROJECT', 'RELEASE', 'RELEASES', 'TERM', 'TERMS'))) {      $tag = strtolower($this->current_tag);      if (isset($this->current_object[$tag])) {        $this->current_object[$tag] .= $data;      }      else {        $this->current_object[$tag] = $data;      }    }  }}
<?php// $Id$/** * Compose and optionally send an e-mail message. * * Sending an e-mail works with defining an e-mail template (subject, text * and possibly e-mail headers) and the replacement values to use in the * appropriate places in the template. Processed e-mail templates are * requested from hook_mail() from the module sending the e-mail. Any module * can modify the composed e-mail message array using hook_mail_alter(). * Finally drupal_mail_send() sends the e-mail, which can be reused * if the exact same composed e-mail is to be sent to multiple recipients. * * Finding out what language to send the e-mail with needs some consideration. * If you send e-mail to a user, her preferred language should be fine, so * use user_preferred_language(). If you send email based on form values * filled on the page, there are two additional choices if you are not * sending the e-mail to a user on the site. You can either use the language * used to generate the page ($language global variable) or the site default * language. See language_default(). The former is good if sending e-mail to * the person filling the form, the later is good if you send e-mail to an * address previously set up (like contact addresses in a contact form). * * Taking care of always using the proper language is even more important * when sending e-mails in a row to multiple users. Hook_mail() abstracts * whether the mail text comes from an administrator setting or is * static in the source code. It should also deal with common mail tokens, * only receiving $params which are unique to the actual e-mail at hand. * * An example: * * @code *   function example_notify($accounts) { *     foreach ($accounts as $account) { *       $params['account'] = $account; *       // example_mail() will be called based on the first drupal_mail() parameter. *       drupal_mail('example', 'notice', $account->mail, user_preferred_language($account), $params); *     } *   } * *   function example_mail($key, &$message, $params) { *     $language = $message['language']; *     $variables = user_mail_tokens($params['account'], $language); *     switch($key) { *       case 'notice': *         $message['subject'] = t('Notification from !site', $variables, $language->language); *         $message['body'][] = t("Dear !username\n\nThere is new content available on the site.", $variables, $language->language); *         break; *     } *   } * @endcode * * @param $module *   A module name to invoke hook_mail() on. The {$module}_mail() hook will be *   called to complete the $message structure which will already contain common *   defaults. * @param $key *   A key to identify the e-mail sent. The final e-mail id for e-mail altering *   will be {$module}_{$key}. * @param $to *   The e-mail address or addresses where the message will be sent to. The *   formatting of this string must comply with RFC 2822. Some examples are: *    user@example.com *    user@example.com, anotheruser@example.com *    User <user@example.com> *    User <user@example.com>, Another User <anotheruser@example.com> * @param $language *   Language object to use to compose the e-mail. * @param $params *   Optional parameters to build the e-mail. * @param $from *   Sets From to this value, if given. * @param $send *   Send the message directly, without calling drupal_mail_send() manually. * @return *   The $message array structure containing all details of the *   message. If already sent ($send = TRUE), then the 'result' element *   will contain the success indicator of the e-mail, failure being already *   written to the watchdog. (Success means nothing more than the message being *   accepted at php-level, which still doesn't guarantee it to be delivered.) */function drupal_mail($module, $key, $to, $language, $params = array(), $from = NULL, $send = TRUE) {  $default_from = variable_get('site_mail', ini_get('sendmail_from'));  // Bundle up the variables into a structured array for altering.  $message = array(    'id'       => $module .'_'. $key,    'to'       => $to,    'from'     => isset($from) ? $from : $default_from,    'language' => $language,    'params'   => $params,    'subject'  => '',    'body'     => array()  );  // Build the default headers  $headers = array(    'MIME-Version'              => '1.0',    'Content-Type'              => 'text/plain; charset=UTF-8; format=flowed; delsp=yes',    'Content-Transfer-Encoding' => '8Bit',    'X-Mailer'                  => 'Drupal'  );  if ($default_from) {    // To prevent e-mail from looking like spam, the addresses in the Sender and    // Return-Path headers should have a domain authorized to use the originating    // SMTP server. Errors-To is redundant, but shouldn't hurt.    $headers['From'] = $headers['Sender'] = $headers['Return-Path'] = $headers['Errors-To'] = $default_from;  }  if ($from) {    $headers['From'] = $from;  }  $message['headers'] = $headers;  // Build the e-mail (get subject and body, allow additional headers) by  // invoking hook_mail() on this module. We cannot use module_invoke() as  // we need to have $message by reference in hook_mail().  if (function_exists($function = $module .'_mail')) {    $function($key, $message, $params);  }  // Invoke hook_mail_alter() to allow all modules to alter the resulting e-mail.  drupal_alter('mail', $message);  // Concatenate and wrap the e-mail body.  $message['body'] = is_array($message['body']) ? drupal_wrap_mail(implode("\n\n", $message['body'])) : drupal_wrap_mail($message['body']);  // Optionally send e-mail.  if ($send) {    $message['result'] = drupal_mail_send($message);    // Log errors    if (!$message['result']) {      watchdog('mail', 'Error sending e-mail (from %from to %to).', array('%from' => $message['from'], '%to' => $message['to']), WATCHDOG_ERROR);      drupal_set_message(t('Unable to send e-mail. Please contact the site administrator if the problem persists.'), 'error');    }  }  return $message;}/** * Send an e-mail message, using Drupal variables and default settings. * More information in the <a href="http://php.net/manual/en/function.mail.php"> * PHP function reference for mail()</a>. See drupal_mail() for information on * how $message is composed. * * @param $message *  Message array with at least the following elements: *   - id *      A unique identifier of the e-mail type. Examples: 'contact_user_copy', *      'user_password_reset'. *   - to *      The mail address or addresses where the message will be sent to. The *      formatting of this string must comply with RFC 2822. Some examples are: *       user@example.com *       user@example.com, anotheruser@example.com *       User <user@example.com> *       User <user@example.com>, Another User <anotheruser@example.com> *   - subject *      Subject of the e-mail to be sent. This must not contain any newline *      characters, or the mail may not be sent properly. *   - body *      Message to be sent. Accepts both CRLF and LF line-endings. *      E-mail bodies must be wrapped. You can use drupal_wrap_mail() for *      smart plain text wrapping. *   - headers *      Associative array containing all mail headers. * @return *   Returns TRUE if the mail was successfully accepted for delivery, *   FALSE otherwise. */function drupal_mail_send($message) {  // Allow for a custom mail backend.  if (variable_get('smtp_library', '') && file_exists(variable_get('smtp_library', ''))) {    include_once './'. variable_get('smtp_library', '');    return drupal_mail_wrapper($message);  }  else {    $mimeheaders = array();    foreach ($message['headers'] as $name => $value) {      $mimeheaders[] = $name .': '. mime_header_encode($value);    }    return mail(      $message['to'],      mime_header_encode($message['subject']),      // Note: e-mail uses CRLF for line-endings, but PHP's API requires LF.      // They will appear correctly in the actual e-mail that is sent.      str_replace("\r", '', $message['body']),      // For headers, PHP's API suggests that we use CRLF normally,      // but some MTAs incorrecly replace LF with CRLF. See #234403.      join("\n", $mimeheaders)    );  }}/** * Perform format=flowed soft wrapping for mail (RFC 3676). * * We use delsp=yes wrapping, but only break non-spaced languages when * absolutely necessary to avoid compatibility issues. * * We deliberately use LF rather than CRLF, see drupal_mail(). * * @param $text *   The plain text to process. * @param $indent (optional) *   A string to indent the text with. Only '>' characters are repeated on *   subsequent wrapped lines. Others are replaced by spaces. */function drupal_wrap_mail($text, $indent = '') {  // Convert CRLF into LF.  $text = str_replace("\r", '', $text);  // See if soft-wrapping is allowed.  $clean_indent = _drupal_html_to_text_clean($indent);  $soft = strpos($clean_indent, ' ') === FALSE;  // Check if the string has line breaks.  if (strpos($text, "\n") !== FALSE) {    // Remove trailing spaces to make existing breaks hard.    $text = preg_replace('/ +\n/m', "\n", $text);    // Wrap each line at the needed width.    $lines = explode("\n", $text);    array_walk($lines, '_drupal_wrap_mail_line', array('soft' => $soft, 'length' => strlen($indent)));    $text = implode("\n", $lines);  }  else {    // Wrap this line.    _drupal_wrap_mail_line($text, 0, array('soft' => $soft, 'length' => strlen($indent)));  }  // Empty lines with nothing but spaces.  $text = preg_replace('/^ +\n/m', "\n", $text);  // Space-stuff special lines.  $text = preg_replace('/^(>| |From)/m', ' $1', $text);  // Apply indentation. We only include non-'>' indentation on the first line.  $text = $indent . substr(preg_replace('/^/m', $clean_indent, $text), strlen($indent));  return $text;}/** * Transform an HTML string into plain text, preserving the structure of the * markup. Useful for preparing the body of a node to be sent by e-mail. * * The output will be suitable for use as 'format=flowed; delsp=yes' text * (RFC 3676) and can be passed directly to drupal_mail() for sending. * * We deliberately use LF rather than CRLF, see drupal_mail(). * * This function provides suitable alternatives for the following tags: * <a> <em> <i> <strong> <b> <br> <p> <blockquote> <ul> <ol> <li> <dl> <dt> * <dd> <h1> <h2> <h3> <h4> <h5> <h6> <hr> * * @param $string *   The string to be transformed. * @param $allowed_tags (optional) *   If supplied, a list of tags that will be transformed. If omitted, all *   all supported tags are transformed. * @return *   The transformed string. */function drupal_html_to_text($string, $allowed_tags = NULL) {  // Cache list of supported tags.  static $supported_tags;  if (empty($supported_tags)) {    $supported_tags = array('a', 'em', 'i', 'strong', 'b', 'br', 'p', 'blockquote', 'ul', 'ol', 'li', 'dl', 'dt', 'dd', 'h1', 'h2', 'h3', 'h4', 'h5', 'h6', 'hr');  }  // Make sure only supported tags are kept.  $allowed_tags = isset($allowed_tags) ? array_intersect($supported_tags, $allowed_tags) : $supported_tags;  // Make sure tags, entities and attributes are well-formed and properly nested.  $string = _filter_htmlcorrector(filter_xss($string, $allowed_tags));  // Apply inline styles.  $string = preg_replace('!</?(em|i)((?> +)[^>]*)?>!i', '/', $string);  $string = preg_replace('!</?(strong|b)((?> +)[^>]*)?>!i', '*', $string);  // Replace inline <a> tags with the text of link and a footnote.  // 'See <a href="http://drupal.org">the Drupal site</a>' becomes  // 'See the Drupal site [1]' with the URL included as a footnote.  _drupal_html_to_mail_urls(NULL, TRUE);  $pattern = '@(<a[^>]+?href="([^"]*)"[^>]*?>(.+?)</a>)@i';  $string = preg_replace_callback($pattern, '_drupal_html_to_mail_urls', $string);  $urls = _drupal_html_to_mail_urls();  $footnotes = '';  if (count($urls)) {    $footnotes .= "\n";    for ($i = 0, $max = count($urls); $i < $max; $i++) {      $footnotes .= '['. ($i + 1) .'] '. $urls[$i] ."\n";    }  }  // Split tags from text.  $split = preg_split('/<([^>]+?)>/', $string, -1, PREG_SPLIT_DELIM_CAPTURE);  // Note: PHP ensures the array consists of alternating delimiters and literals  // and begins and ends with a literal (inserting $null as required).  $tag = FALSE; // Odd/even counter (tag or no tag)  $casing = NULL; // Case conversion function  $output = '';  $indent = array(); // All current indentation string chunks  $lists = array(); // Array of counters for opened lists  foreach ($split as $value) {    $chunk = NULL; // Holds a string ready to be formatted and output.    // Process HTML tags (but don't output any literally).    if ($tag) {      list($tagname) = explode(' ', strtolower($value), 2);      switch ($tagname) {        // List counters        case 'ul':          array_unshift($lists, '*');          break;        case 'ol':          array_unshift($lists, 1);          break;        case '/ul':        case '/ol':          array_shift($lists);          $chunk = ''; // Ensure blank new-line.          break;        // Quotation/list markers, non-fancy headers        case 'blockquote':          // Format=flowed indentation cannot be mixed with lists.          $indent[] = count($lists) ? ' "' : '>';          break;        case 'li':          $indent[] = is_numeric($lists[0]) ? ' '. $lists[0]++ .') ' : ' * ';          break;        case 'dd':          $indent[] = '    ';          break;        case 'h3':          $indent[] = '.... ';          break;        case 'h4':          $indent[] = '.. ';          break;        case '/blockquote':          if (count($lists)) {            // Append closing quote for inline quotes (immediately).            $output = rtrim($output, "> \n") ."\"\n";            $chunk = ''; // Ensure blank new-line.          }          // Fall-through        case '/li':        case '/dd':          array_pop($indent);          break;        case '/h3':        case '/h4':          array_pop($indent);        case '/h5':        case '/h6':          $chunk = ''; // Ensure blank new-line.          break;        // Fancy headers        case 'h1':          $indent[] = '======== ';          $casing = 'drupal_strtoupper';          break;        case 'h2':          $indent[] = '-------- ';          $casing = 'drupal_strtoupper';          break;        case '/h1':        case '/h2':          $casing = NULL;          // Pad the line with dashes.          $output = _drupal_html_to_text_pad($output, ($tagname == '/h1') ? '=' : '-', ' ');          array_pop($indent);          $chunk = ''; // Ensure blank new-line.          break;        // Horizontal rulers        case 'hr':          // Insert immediately.          $output .= drupal_wrap_mail('', implode('', $indent)) ."\n";          $output = _drupal_html_to_text_pad($output, '-');          break;        // Paragraphs and definition lists        case '/p':        case '/dl':          $chunk = ''; // Ensure blank new-line.          break;      }    }    // Process blocks of text.    else {      // Convert inline HTML text to plain text.      $value = trim(preg_replace('/\s+/', ' ', decode_entities($value)));      if (strlen($value)) {        $chunk = $value;      }    }    // See if there is something waiting to be output.    if (isset($chunk)) {      // Apply any necessary case conversion.      if (isset($casing)) {        $chunk = $casing($chunk);      }      // Format it and apply the current indentation.      $output .= drupal_wrap_mail($chunk, implode('', $indent)) ."\n";      // Remove non-quotation markers from indentation.      $indent = array_map('_drupal_html_to_text_clean', $indent);    }    $tag = !$tag;  }  return $output . $footnotes;}/** * Helper function for array_walk in drupal_wrap_mail(). * * Wraps words on a single line. */function _drupal_wrap_mail_line(&$line, $key, $values) {  // Use soft-breaks only for purely quoted or unindented text.  $line = wordwrap($line, 77 - $values['length'], $values['soft'] ? "  \n" : "\n");  // Break really long words at the maximum width allowed.  $line = wordwrap($line, 996 - $values['length'], $values['soft'] ? " \n" : "\n");}/** * Helper function for drupal_html_to_text(). * * Keeps track of URLs and replaces them with placeholder tokens. */function _drupal_html_to_mail_urls($match = NULL, $reset = FALSE) {  global $base_url, $base_path;  static $urls = array(), $regexp;  if ($reset) {    // Reset internal URL list.    $urls = array();  }  else {    if (empty($regexp)) {      $regexp = '@^'. preg_quote($base_path, '@') .'@';    }    if ($match) {      list(, , $url, $label) = $match;      // Ensure all URLs are absolute.      $urls[] = strpos($url, '://') ? $url : preg_replace($regexp, $base_url .'/', $url);      return $label .' ['. count($urls) .']';    }  }  return $urls;}/** * Helper function for drupal_wrap_mail() and drupal_html_to_text(). * * Replace all non-quotation markers from a given piece of indentation with spaces. */function _drupal_html_to_text_clean($indent) {  return preg_replace('/[^>]/', ' ', $indent);}/** * Helper function for drupal_html_to_text(). * * Pad the last line with the given character. */function _drupal_html_to_text_pad($text, $pad, $prefix = '') {  // Remove last line break.  $text = substr($text, 0, -1);  // Calculate needed padding space and add it.  if (($p = strrpos($text, "\n")) === FALSE) {    $p = -1;  }  $n = max(0, 79 - (strlen($text) - $p));  // Add prefix and padding, and restore linebreak.  return $text . $prefix . str_repeat($pad, $n - strlen($prefix)) ."\n";}
<?php// $Id$/** * Implementation of hook_install(). */function forum_install() {  // Create tables.  drupal_install_schema('forum');  // Set the weight of the forum.module to 1 so it is loaded after the taxonomy.module.  db_query("UPDATE {system} SET weight = 1 WHERE name = 'forum'");}function forum_enable() {  if ($vocabulary = taxonomy_vocabulary_load(variable_get('forum_nav_vocabulary', 0))) {    // Existing install. Add back forum node type, if the forums    // vocabulary still exists. Keep all other node types intact there.    $vocabulary = (array) $vocabulary;    $vocabulary['nodes']['forum'] = 1;    taxonomy_save_vocabulary($vocabulary);  }  else {    // Create the forum vocabulary if it does not exist. Assign the vocabulary    // a low weight so it will appear first in forum topic create and edit    // forms.    $vocabulary = array(      'name' => t('Forums'),      'multiple' => 0,      'required' => 0,      'hierarchy' => 1,      'relations' => 0,      'module' => 'forum',      'weight' => -10,      'nodes' => array('forum' => 1),    );    taxonomy_save_vocabulary($vocabulary);    variable_set('forum_nav_vocabulary', $vocabulary['vid']);  }}/** * Implementation of hook_uninstall(). */function forum_uninstall() {  // Load the dependent Taxonomy module, in case it has been disabled.  drupal_load('module', 'taxonomy');  // Delete the vocabulary.  $vid = variable_get('forum_nav_vocabulary', '');  taxonomy_del_vocabulary($vid);  db_query('DROP TABLE {forum}');  variable_del('forum_containers');  variable_del('forum_nav_vocabulary');  variable_del('forum_hot_topic');  variable_del('forum_per_page');  variable_del('forum_order');  variable_del('forum_block_num_0');  variable_del('forum_block_num_1');}/** * Implementation of hook_schema(). */function forum_schema() {  $schema['forum'] = array(    'description' => 'Stores the relationship of nodes to forum terms.',    'fields' => array(      'nid' => array(        'type' => 'int',        'unsigned' => TRUE,        'not null' => TRUE,        'default' => 0,        'description' => 'The {node}.nid of the node.',      ),      'vid' => array(        'type' => 'int',        'unsigned' => TRUE,        'not null' => TRUE,        'default' => 0,        'description' => 'Primary Key: The {node}.vid of the node.',      ),      'tid' => array(        'type' => 'int',        'unsigned' => TRUE,        'not null' => TRUE,        'default' => 0,        'description' => 'The {term_data}.tid of the forum term assigned to the node.',      ),    ),    'indexes' => array(      'nid' => array('nid'),      'tid' => array('tid')    ),    'primary key' => array('vid'),  );  return $schema;}/** * Create the forum vocabulary if does not exist. Assign the * vocabulary a low weight so it will appear first in forum topic * create and edit forms.  Do not just call forum_enable() because in * future versions it might do something different. */function forum_update_6000() {  $ret = array();  $vid = variable_get('forum_nav_vocabulary', 0);  $vocabularies = taxonomy_get_vocabularies();  if (!isset($vocabularies[$vid])) {    $vocabulary = array(      'name' => t('Forums'),      'multiple' => 0,      'required' => 0,      'hierarchy' => 1,      'relations' => 0,      'module' => 'forum',      'weight' => -10,      'nodes' => array('forum' => 1),    );    taxonomy_save_vocabulary($vocabulary);    variable_set('forum_nav_vocabulary', $vocabulary['vid']);  }  return $ret;}
<?php// $Id$/** * Implementation of hook_install(). */function menu_install() {  // Create tables.  drupal_install_schema('menu');    $t = get_t();  db_query("INSERT INTO {menu_custom} (menu_name, title, description) VALUES ('%s', '%s', '%s')", 'navigation', $t('Navigation'), $t('The navigation menu is provided by Drupal and is the main interactive menu for any site. It is usually the only menu that contains personalized links for authenticated users, and is often not even visible to anonymous users.'));  db_query("INSERT INTO {menu_custom} (menu_name, title, description) VALUES ('%s', '%s', '%s')", 'primary-links', $t('Primary links'), $t('Primary links are often used at the theme layer to show the major sections of a site. A typical representation for primary links would be tabs along the top.'));  db_query("INSERT INTO {menu_custom} (menu_name, title, description) VALUES ('%s', '%s', '%s')", 'secondary-links', $t('Secondary links'), $t('Secondary links are often used for pages like legal notices, contact details, and other secondary navigation items that play a lesser role than primary links'));}/** * Implementation of hook_uninstall(). */function menu_uninstall() {  // Remove tables.  drupal_uninstall_schema('menu');  menu_rebuild();}/** * Implementation of hook_schema(). */function menu_schema() {  $schema['menu_custom'] = array(    'description' => 'Holds definitions for top-level custom menus (for example, Primary Links).',    'fields' => array(      'menu_name' => array(        'type' => 'varchar',        'length' => 32,        'not null' => TRUE,        'default' => '',        'description' => 'Primary Key: Unique key for menu. This is used as a block delta so length is 32.',      ),      'title' => array(        'type' => 'varchar',        'length' => 255,        'not null' => TRUE,        'default' => '',        'description' => 'Menu title; displayed at top of block.',      ),      'description' => array(        'type' => 'text',        'not null' => FALSE,        'description' => 'Menu description.',      ),    ),    'primary key' => array('menu_name'),  );  return $schema;}
<?php// $Id$/** * Implementation of hook_install(). */function dblog_install() {  // Create tables.  drupal_install_schema('dblog');}/** * Implementation of hook_uninstall(). */function dblog_uninstall() {  // Remove tables.  drupal_uninstall_schema('dblog');}/** * Implementation of hook_schema(). */function dblog_schema() {  $schema['watchdog'] = array(    'description' => 'Table that contains logs of all system events.',    'fields' => array(      'wid' => array(        'type' => 'serial',        'not null' => TRUE,        'description' => 'Primary Key: Unique watchdog event ID.',      ),      'uid' => array(        'type' => 'int',        'not null' => TRUE,        'default' => 0,        'description' => 'The {users}.uid of the user who triggered the event.',      ),      'type' => array(        'type' => 'varchar',        'length' => 16,        'not null' => TRUE,        'default' => '',        'description' => 'Type of log message, for example "user" or "page not found."',      ),      'message' => array(        'type' => 'text',        'not null' => TRUE,        'size' => 'big',        'description' => 'Text of log message to be passed into the t() function.',      ),      'variables' => array(        'type' => 'text',        'not null' => TRUE,        'size' => 'big',        'description' => 'Serialized array of variables that match the message string and that is passed into the t() function.',      ),      'severity' => array(        'type' => 'int',        'unsigned' => TRUE,        'not null' => TRUE,        'default' => 0,        'size' => 'tiny',        'description' => 'The severity level of the event; ranges from 0 (Emergency) to 7 (Debug)',      ),      'link' => array(        'type' => 'varchar',        'length' => 255,        'not null' => TRUE,        'default' => '',        'description' => 'Link to view the result of the event.',      ),      'location'  => array(        'type' => 'text',        'not null' => TRUE,        'description' => 'URL of the origin of the event.',      ),      'referer' => array(        'type' => 'text',        'not null' => FALSE,        'description' => 'URL of referring page.',      ),      'hostname' => array(        'type' => 'varchar',        'length' => 128,        'not null' => TRUE,        'default' => '',        'description' => 'Hostname of the user who triggered the event.',      ),      'timestamp' => array(        'type' => 'int',        'not null' => TRUE,        'default' => 0,        'description' => 'Unix timestamp of when event occurred.',      ),    ),    'primary key' => array('wid'),    'indexes' => array('type' => array('type')),  );  return $schema;}/** * @defgroup updates-6.x-extra Extra database logging updates for 6.x * @{ *//** * Allow longer referrers. */function dblog_update_6000() {  $ret = array();  db_change_field($ret, 'watchdog', 'referer', 'referer', array('type' => 'text', 'not null' => FALSE));  return $ret;}/** * @} End of "defgroup updates-6.x-extra" * The next series of updates should start at 7000. */
<?php// $Id$/** * @file * Admin page callbacks for the help module. *//** * Menu callback; prints a page listing a glossary of Drupal terminology. */function help_main() {  // Add CSS  drupal_add_css(drupal_get_path('module', 'help') .'/help.css', 'module', 'all', FALSE);  $output = '<h2>'. t('Help topics') .'</h2><p>'. t('Help is available on the following items:') .'</p>'. help_links_as_list();  return $output;}/** * Menu callback; prints a page listing general help for a module. */function help_page($name) {  $output = '';  if (module_hook($name, 'help')) {    $module = drupal_parse_info_file(drupal_get_path('module', $name) .'/'. $name .'.info');    drupal_set_title($module['name']);    $temp = module_invoke($name, 'help', "admin/help#$name", drupal_help_arg());    if (empty($temp)) {      $output .= t("No help is available for module %module.", array('%module' => $module['name']));    }    else {      $output .= $temp;    }    // Only print list of administration pages if the module in question has    // any such pages associated to it.    $admin_tasks = system_get_module_admin_tasks($name);    if (!empty($admin_tasks)) {      ksort($admin_tasks);      $output .= theme('item_list', $admin_tasks, t('@module administration pages', array('@module' => $module['name'])));    }  }  return $output;}function help_links_as_list() {  $empty_arg = drupal_help_arg();  $module_info = module_rebuild_cache();  $modules = array();  foreach (module_implements('help', TRUE) as $module) {    if (module_invoke($module, 'help', "admin/help#$module", $empty_arg)) {      $modules[$module] = $module_info[$module]->info['name'];    }  }  asort($modules);  // Output pretty four-column list  $count = count($modules);  $break = ceil($count / 4);  $output = '<div class="clear-block"><div class="help-items"><ul>';  $i = 0;  foreach ($modules as $module => $name) {    $output .= '<li>'. l($name, 'admin/help/'. $module) .'</li>';    if (($i + 1) % $break == 0 && ($i + 1) != $count) {      $output .= '</ul></div><div class="help-items'. ($i + 1 == $break * 3 ? ' help-items-last' : '') .'"><ul>';    }    $i++;  }  $output .= '</ul></div></div>';  return $output;}
