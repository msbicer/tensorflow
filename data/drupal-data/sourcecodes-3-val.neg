<?php// $Id$?>  <div class="box">    <?php if ($title) { ?><h2 class="title"><?php print $title; ?></h2><?php } ?>    <div class="content"><?php print $content; ?></div> </div>
<?php// $Id$/** * @file * Functions shared between mysql and mysqli database engines. *//** * Runs a basic query in the active database. * * User-supplied arguments to the query should be passed in as separate * parameters so that they can be properly escaped to avoid SQL injection * attacks. * * @param $query *   A string containing an SQL query. * @param ... *   A variable number of arguments which are substituted into the query *   using printf() syntax. Instead of a variable number of query arguments, *   you may also pass a single array containing the query arguments. * *   Valid %-modifiers are: %s, %d, %f, %b (binary data, do not enclose *   in '') and %%. * *   NOTE: using this syntax will cast NULL and FALSE values to decimal 0, *   and TRUE values to decimal 1. * * @return *   A database query result resource, or FALSE if the query was not *   executed correctly. */function db_query($query) {  $args = func_get_args();  array_shift($args);  $query = db_prefix_tables($query);  if (isset($args[0]) and is_array($args[0])) { // 'All arguments in one array' syntax    $args = $args[0];  }  _db_query_callback($args, TRUE);  $query = preg_replace_callback(DB_QUERY_REGEXP, '_db_query_callback', $query);  return _db_query($query);}/** * @ingroup schemaapi * @{ *//** * Generate SQL to create a new table from a Drupal schema definition. * * @param $name *   The name of the table to create. * @param $table *   A Schema API table definition array. * @return *   An array of SQL statements to create the table. */function db_create_table_sql($name, $table) {  if (empty($table['mysql_suffix'])) {    $table['mysql_suffix'] = "/*!40100 DEFAULT CHARACTER SET UTF8 */";  }  $sql = "CREATE TABLE {". $name ."} (\n";  // Add the SQL statement for each field.  foreach ($table['fields'] as $field_name => $field) {    $sql .= _db_create_field_sql($field_name, _db_process_field($field)) .", \n";  }  // Process keys & indexes.  $keys = _db_create_keys_sql($table);  if (count($keys)) {    $sql .= implode(", \n", $keys) .", \n";  }  // Remove the last comma and space.  $sql = substr($sql, 0, -3) ."\n) ";  $sql .= $table['mysql_suffix'];  return array($sql);}function _db_create_keys_sql($spec) {  $keys = array();  if (!empty($spec['primary key'])) {    $keys[] = 'PRIMARY KEY ('. _db_create_key_sql($spec['primary key']) .')';  }  if (!empty($spec['unique keys'])) {    foreach ($spec['unique keys'] as $key => $fields) {      $keys[] = 'UNIQUE KEY '. $key .' ('. _db_create_key_sql($fields) .')';    }  }  if (!empty($spec['indexes'])) {    foreach ($spec['indexes'] as $index => $fields) {      $keys[] = 'INDEX '. $index .' ('. _db_create_key_sql($fields) .')';    }  }  return $keys;}function _db_create_key_sql($fields) {  $ret = array();  foreach ($fields as $field) {    if (is_array($field)) {      $ret[] = $field[0] .'('. $field[1] .')';    }    else {      $ret[] = $field;    }  }  return implode(', ', $ret);}/** * Set database-engine specific properties for a field. * * @param $field *   A field description array, as specified in the schema documentation. */function _db_process_field($field) {  if (!isset($field['size'])) {    $field['size'] = 'normal';  }  // Set the correct database-engine specific datatype.  if (!isset($field['mysql_type'])) {    $map = db_type_map();    $field['mysql_type'] = $map[$field['type'] .':'. $field['size']];  }  if ($field['type'] == 'serial') {    $field['auto_increment'] = TRUE;  }  return $field;}/** * Create an SQL string for a field to be used in table creation or alteration. * * Before passing a field out of a schema definition into this function it has * to be processed by _db_process_field(). * * @param $name *    Name of the field. * @param $spec *    The field specification, as per the schema data structure format. */function _db_create_field_sql($name, $spec) {  $sql = "`". $name ."` ". $spec['mysql_type'];  if (in_array($spec['type'], array('varchar', 'char', 'text')) && isset($spec['length'])) {    $sql .= '('. $spec['length'] .')';  }  elseif (isset($spec['precision']) && isset($spec['scale'])) {    $sql .= '('. $spec['precision'] .', '. $spec['scale'] .')';  }  if (!empty($spec['unsigned'])) {    $sql .= ' unsigned';  }  if (!empty($spec['not null'])) {    $sql .= ' NOT NULL';  }  if (!empty($spec['auto_increment'])) {    $sql .= ' auto_increment';  }  if (isset($spec['default'])) {    if (is_string($spec['default'])) {      $spec['default'] = "'". $spec['default'] ."'";    }    $sql .= ' DEFAULT '. $spec['default'];  }  if (empty($spec['not null']) && !isset($spec['default'])) {    $sql .= ' DEFAULT NULL';  }  return $sql;}/** * This maps a generic data type in combination with its data size * to the engine-specific data type. */function db_type_map() {  // Put :normal last so it gets preserved by array_flip.  This makes  // it much easier for modules (such as schema.module) to map  // database types back into schema types.  $map = array(    'varchar:normal'  => 'VARCHAR',    'char:normal'     => 'CHAR',    'text:tiny'       => 'TINYTEXT',    'text:small'      => 'TINYTEXT',    'text:medium'     => 'MEDIUMTEXT',    'text:big'        => 'LONGTEXT',    'text:normal'     => 'TEXT',    'serial:tiny'     => 'TINYINT',    'serial:small'    => 'SMALLINT',    'serial:medium'   => 'MEDIUMINT',    'serial:big'      => 'BIGINT',    'serial:normal'   => 'INT',    'int:tiny'        => 'TINYINT',    'int:small'       => 'SMALLINT',    'int:medium'      => 'MEDIUMINT',    'int:big'         => 'BIGINT',    'int:normal'      => 'INT',    'float:tiny'      => 'FLOAT',    'float:small'     => 'FLOAT',    'float:medium'    => 'FLOAT',    'float:big'       => 'DOUBLE',    'float:normal'    => 'FLOAT',    'numeric:normal'  => 'DECIMAL',    'blob:big'        => 'LONGBLOB',    'blob:normal'     => 'BLOB',    'datetime:normal' => 'DATETIME',  );  return $map;}/** * Rename a table. * * @param $ret *   Array to which query results will be added. * @param $table *   The table to be renamed. * @param $new_name *   The new name for the table. */function db_rename_table(&$ret, $table, $new_name) {  $ret[] = update_sql('ALTER TABLE {'. $table .'} RENAME TO {'. $new_name .'}');}/** * Drop a table. * * @param $ret *   Array to which query results will be added. * @param $table *   The table to be dropped. */function db_drop_table(&$ret, $table) {  $ret[] = update_sql('DROP TABLE {'. $table .'}');}/** * Add a new field to a table. * * @param $ret *   Array to which query results will be added. * @param $table *   Name of the table to be altered. * @param $field *   Name of the field to be added. * @param $spec *   The field specification array, as taken from a schema definition. *   The specification may also contain the key 'initial', the newly *   created field will be set to the value of the key in all rows. *   This is most useful for creating NOT NULL columns with no default *   value in existing tables. * @param $keys_new *   Optional keys and indexes specification to be created on the *   table along with adding the field. The format is the same as a *   table specification but without the 'fields' element.  If you are *   adding a type 'serial' field, you MUST specify at least one key *   or index including it in this array. @see db_change_field for more *   explanation why. */function db_add_field(&$ret, $table, $field, $spec, $keys_new = array()) {  $fixnull = FALSE;  if (!empty($spec['not null']) && !isset($spec['default'])) {    $fixnull = TRUE;    $spec['not null'] = FALSE;  }  $query = 'ALTER TABLE {'. $table .'} ADD ';  $query .= _db_create_field_sql($field, _db_process_field($spec));  if (count($keys_new)) {    $query .= ', ADD '. implode(', ADD ', _db_create_keys_sql($keys_new));  }  $ret[] = update_sql($query);  if (isset($spec['initial'])) {    // All this because update_sql does not support %-placeholders.    $sql = 'UPDATE {'. $table .'} SET '. $field .' = '. db_type_placeholder($spec['type']);    $result = db_query($sql, $spec['initial']);    $ret[] = array('success' => $result !== FALSE, 'query' => check_plain($sql .' ('. $spec['initial'] .')'));  }  if ($fixnull) {    $spec['not null'] = TRUE;    db_change_field($ret, $table, $field, $field, $spec);  }}/** * Drop a field. * * @param $ret *   Array to which query results will be added. * @param $table *   The table to be altered. * @param $field *   The field to be dropped. */function db_drop_field(&$ret, $table, $field) {  $ret[] = update_sql('ALTER TABLE {'. $table .'} DROP '. $field);}/** * Set the default value for a field. * * @param $ret *   Array to which query results will be added. * @param $table *   The table to be altered. * @param $field *   The field to be altered. * @param $default *   Default value to be set. NULL for 'default NULL'. */function db_field_set_default(&$ret, $table, $field, $default) {  if ($default === NULL) {    $default = 'NULL';  }  else {    $default = is_string($default) ? "'$default'" : $default;  }  $ret[] = update_sql('ALTER TABLE {'. $table .'} ALTER COLUMN '. $field .' SET DEFAULT '. $default);}/** * Set a field to have no default value. * * @param $ret *   Array to which query results will be added. * @param $table *   The table to be altered. * @param $field *   The field to be altered. */function db_field_set_no_default(&$ret, $table, $field) {  $ret[] = update_sql('ALTER TABLE {'. $table .'} ALTER COLUMN '. $field .' DROP DEFAULT');}/** * Add a primary key. * * @param $ret *   Array to which query results will be added. * @param $table *   The table to be altered. * @param $fields *   Fields for the primary key. */function db_add_primary_key(&$ret, $table, $fields) {  $ret[] = update_sql('ALTER TABLE {'. $table .'} ADD PRIMARY KEY ('.    _db_create_key_sql($fields) .')');}/** * Drop the primary key. * * @param $ret *   Array to which query results will be added. * @param $table *   The table to be altered. */function db_drop_primary_key(&$ret, $table) {  $ret[] = update_sql('ALTER TABLE {'. $table .'} DROP PRIMARY KEY');}/** * Add a unique key. * * @param $ret *   Array to which query results will be added. * @param $table *   The table to be altered. * @param $name *   The name of the key. * @param $fields *   An array of field names. */function db_add_unique_key(&$ret, $table, $name, $fields) {  $ret[] = update_sql('ALTER TABLE {'. $table .'} ADD UNIQUE KEY '.    $name .' ('. _db_create_key_sql($fields) .')');}/** * Drop a unique key. * * @param $ret *   Array to which query results will be added. * @param $table *   The table to be altered. * @param $name *   The name of the key. */function db_drop_unique_key(&$ret, $table, $name) {  $ret[] = update_sql('ALTER TABLE {'. $table .'} DROP KEY '. $name);}/** * Add an index. * * @param $ret *   Array to which query results will be added. * @param $table *   The table to be altered. * @param $name *   The name of the index. * @param $fields *   An array of field names. */function db_add_index(&$ret, $table, $name, $fields) {  $query = 'ALTER TABLE {'. $table .'} ADD INDEX '. $name .' ('. _db_create_key_sql($fields) .')';  $ret[] = update_sql($query);}/** * Drop an index. * * @param $ret *   Array to which query results will be added. * @param $table *   The table to be altered. * @param $name *   The name of the index. */function db_drop_index(&$ret, $table, $name) {  $ret[] = update_sql('ALTER TABLE {'. $table .'} DROP INDEX '. $name);}/** * Change a field definition. * * IMPORTANT NOTE: To maintain database portability, you have to explicitly * recreate all indices and primary keys that are using the changed field. * * That means that you have to drop all affected keys and indexes with * db_drop_{primary_key,unique_key,index}() before calling db_change_field(). * To recreate the keys and indices, pass the key definitions as the * optional $keys_new argument directly to db_change_field(). * * For example, suppose you have: * @code * $schema['foo'] = array( *   'fields' => array( *     'bar' => array('type' => 'int', 'not null' => TRUE) *   ), *   'primary key' => array('bar') * ); * @endcode * and you want to change foo.bar to be type serial, leaving it as the * primary key.  The correct sequence is: * @code * db_drop_primary_key($ret, 'foo'); * db_change_field($ret, 'foo', 'bar', 'bar', *   array('type' => 'serial', 'not null' => TRUE), *   array('primary key' => array('bar'))); * @endcode * * The reasons for this are due to the different database engines: * * On PostgreSQL, changing a field definition involves adding a new field * and dropping an old one which* causes any indices, primary keys and * sequences (from serial-type fields) that use the changed field to be dropped. * * On MySQL, all type 'serial' fields must be part of at least one key * or index as soon as they are created.  You cannot use * db_add_{primary_key,unique_key,index}() for this purpose because * the ALTER TABLE command will fail to add the column without a key * or index specification.  The solution is to use the optional * $keys_new argument to create the key or index at the same time as * field. * * You could use db_add_{primary_key,unique_key,index}() in all cases * unless you are converting a field to be type serial. You can use * the $keys_new argument in all cases. * * @param $ret *   Array to which query results will be added. * @param $table *   Name of the table. * @param $field *   Name of the field to change. * @param $field_new *   New name for the field (set to the same as $field if you don't want to change the name). * @param $spec *   The field specification for the new field. * @param $keys_new *   Optional keys and indexes specification to be created on the *   table along with changing the field. The format is the same as a *   table specification but without the 'fields' element. */function db_change_field(&$ret, $table, $field, $field_new, $spec, $keys_new = array()) {  $sql = 'ALTER TABLE {'. $table .'} CHANGE `'. $field .'` '.    _db_create_field_sql($field_new, _db_process_field($spec));  if (count($keys_new)) {    $sql .= ', ADD '. implode(', ADD ', _db_create_keys_sql($keys_new));  }  $ret[] = update_sql($sql);}/** * Returns the last insert id. * * @param $table *   The name of the table you inserted into. * @param $field *   The name of the autoincrement field. */function db_last_insert_id($table, $field) {  return db_result(db_query('SELECT LAST_INSERT_ID()'));}
<?php// $Id$/** * @file * Drupal site-specific configuration file. * * IMPORTANT NOTE: * This file may have been set to read-only by the Drupal installation * program. If you make changes to this file, be sure to protect it again * after making your modifications. Failure to remove write permissions * to this file is a security risk. * * The configuration file to be loaded is based upon the rules below. * * The configuration directory will be discovered by stripping the * website's hostname from left to right and pathname from right to * left. The first configuration file found will be used and any * others will be ignored. If no other configuration file is found * then the default configuration file at 'sites/default' will be used. * * For example, for a fictitious site installed at * http://www.drupal.org/mysite/test/, the 'settings.php' * is searched in the following directories: * *  1. sites/www.drupal.org.mysite.test *  2. sites/drupal.org.mysite.test *  3. sites/org.mysite.test * *  4. sites/www.drupal.org.mysite *  5. sites/drupal.org.mysite *  6. sites/org.mysite * *  7. sites/www.drupal.org *  8. sites/drupal.org *  9. sites/org * * 10. sites/default * * If you are installing on a non-standard port number, prefix the * hostname with that number. For example, * http://www.drupal.org:8080/mysite/test/ could be loaded from * sites/8080.www.drupal.org.mysite.test/. *//** * Database settings: * * Note that the $db_url variable gets parsed using PHP's built-in * URL parser (i.e. using the "parse_url()" function) so make sure * not to confuse the parser. If your username, password * or database name contain characters used to delineate * $db_url parts, you can escape them via URI hex encodings: * *   : = %3a   / = %2f   @ = %40 *   + = %2b   ( = %28   ) = %29 *   ? = %3f   = = %3d   & = %26 * * To specify multiple connections to be used in your site (i.e. for * complex custom modules) you can also specify an associative array * of $db_url variables with the 'default' element used until otherwise * requested. * * You can optionally set prefixes for some or all database table names * by using the $db_prefix setting. If a prefix is specified, the table * name will be prepended with its value. Be sure to use valid database * characters only, usually alphanumeric and underscore. If no prefixes * are desired, leave it as an empty string ''. * * To have all database names prefixed, set $db_prefix as a string: * *   $db_prefix = 'main_'; * * To provide prefixes for specific tables, set $db_prefix as an array. * The array's keys are the table names and the values are the prefixes. * The 'default' element holds the prefix for any tables not specified * elsewhere in the array. Example: * *   $db_prefix = array( *     'default'   => 'main_', *     'users'     => 'shared_', *     'sessions'  => 'shared_', *     'role'      => 'shared_', *     'authmap'   => 'shared_', *   ); * * Database URL format: *   $db_url = 'mysql://username:password@localhost/databasename'; *   $db_url = 'mysqli://username:password@localhost/databasename'; *   $db_url = 'pgsql://username:password@localhost/databasename'; */$db_url = 'mysql://username:password@localhost/databasename';$db_prefix = '';/** * Access control for update.php script * * If you are updating your Drupal installation using the update.php script * being not logged in as administrator, you will need to modify the access * check statement below. Change the FALSE to a TRUE to disable the access * check. After finishing the upgrade, be sure to open this file again * and change the TRUE back to a FALSE! */$update_free_access = FALSE;/** * Base URL (optional). * * If you are experiencing issues with different site domains, * uncomment the Base URL statement below (remove the leading hash sign) * and fill in the absolute URL to your Drupal installation. * * You might also want to force users to use a given domain. * See the .htaccess file for more information. * * Examples: *   $base_url = 'http://www.example.com'; *   $base_url = 'http://www.example.com:8888'; *   $base_url = 'http://www.example.com/drupal'; *   $base_url = 'https://www.example.com:8888/drupal'; * * It is not allowed to have a trailing slash; Drupal will add it * for you. */# $base_url = 'http://www.example.com';  // NO trailing slash!/** * PHP settings: * * To see what PHP settings are possible, including whether they can * be set at runtime (ie., when ini_set() occurs), read the PHP * documentation at http://www.php.net/manual/en/ini.php#ini.list * and take a look at the .htaccess file to see which non-runtime * settings are used there. Settings defined here should not be * duplicated there so as to avoid conflict issues. */ini_set('arg_separator.output',     '&amp;');ini_set('magic_quotes_runtime',     0);ini_set('magic_quotes_sybase',      0);ini_set('session.cache_expire',     200000);ini_set('session.cache_limiter',    'none');ini_set('session.cookie_lifetime',  2000000);ini_set('session.gc_maxlifetime',   200000);ini_set('session.save_handler',     'user');ini_set('session.use_cookies',      1);ini_set('session.use_only_cookies', 1);ini_set('session.use_trans_sid',    0);ini_set('url_rewriter.tags',        '');/** * If you encounter a situation where users post a large amount of text, and * the result is stripped out upon viewing but can still be edited, Drupal's * output filter may not have sufficient memory to process it. If you * experience this issue, you may wish to uncomment the following two lines * and increase the limits of these variables. For more information, see * http://php.net/manual/en/pcre.configuration.php. */# ini_set('pcre.backtrack_limit', 200000);# ini_set('pcre.recursion_limit', 200000);/** * Drupal automatically generates a unique session cookie name for each site * based on on its full domain name. If you have multiple domains pointing at * the same Drupal site, you can either redirect them all to a single domain * (see comment in .htaccess), or uncomment the line below and specify their * shared base domain. Doing so assures that users remain logged in as they * cross between your various domains. */# $cookie_domain = 'example.com';/** * Variable overrides: * * To override specific entries in the 'variable' table for this site, * set them here. You usually don't need to use this feature. This is * useful in a configuration file for a vhost or directory, rather than * the default settings.php. Any configuration setting from the 'variable' * table can be given a new value. Note that any values you provide in * these variable overrides will not be modifiable from the Drupal * administration interface. * * Remove the leading hash signs to enable. */# $conf = array(#   'site_name' => 'My Drupal site',#   'theme_default' => 'minnelli',#   'anonymous' => 'Visitor',/** * A custom theme can be set for the off-line page. This applies when the site * is explicitly set to off-line mode through the administration page or when * the database is inactive due to an error. It can be set through the * 'maintenance_theme' key. The template file should also be copied into the * theme. It is located inside 'modules/system/maintenance-page.tpl.php'. * Note: This setting does not apply to installation and update pages. */#   'maintenance_theme' => 'minnelli',/** * reverse_proxy accepts a boolean value. * * Enable this setting to determine the correct IP address of the remote * client by examining information stored in the X-Forwarded-For headers. * X-Forwarded-For headers are a standard mechanism for identifying client * systems connecting through a reverse proxy server, such as Squid or * Pound. Reverse proxy servers are often used to enhance the performance * of heavily visited sites and may also provide other site caching, * security or encryption benefits. If this Drupal installation operates * behind a reverse proxy, this setting should be enabled so that correct * IP address information is captured in Drupal's session management, * logging, statistics and access management systems; if you are unsure * about this setting, do not have a reverse proxy, or Drupal operates in * a shared hosting environment, this setting should be set to disabled. */#   'reverse_proxy' => TRUE,/** * reverse_proxy accepts an array of IP addresses. * * Each element of this array is the IP address of any of your reverse * proxies. Filling this array Drupal will trust the information stored * in the X-Forwarded-For headers only if Remote IP address is one of * these, that is the request reaches the web server from one of your * reverse proxies. Otherwise, the client could directly connect to * your web server spoofing the X-Forwarded-For headers. */#   'reverse_proxy_addresses' => array('a.b.c.d', ...),# );/** * String overrides: * * To override specific strings on your site with or without enabling locale * module, add an entry to this list. This functionality allows you to change * a small number of your site's default English language interface strings. * * Remove the leading hash signs to enable. */# $conf['locale_custom_strings_en'] = array(#   'forum'      => 'Discussion board',#   '@count min' => '@count minutes',# );
<?php// $Id$/** * @file * Allows configuration of congestion control auto-throttle mechanism. */function throttle_menu() {  $items['admin/settings/throttle'] = array(    'title' => 'Throttle',    'description' => 'Control how your site cuts out content during heavy load.',    'page callback' => 'drupal_get_form',    'page arguments' => array('throttle_admin_settings'),    'access arguments' => array('administer site configuration'),    'file' => 'throttle.admin.inc',  );  return $items;}/** * Determine the current load on the site. * * Call the throttle_status() function from your own modules, themes, blocks, * etc. as follows: * *   $throttle = module_invoke('throttle', 'status'); * * to determine the current throttle status. Use module_invoke() so the * call will still work if the throttle module is disabled. For example, in * your theme you might choose to disable pictures when your site is too busy * (reducing bandwidth), or in your modules you might choose to disable * some complicated logic when your site is too busy (reducing CPU utilization). * * @return *   0 or 1. 0 means that the throttle is currently disabled. 1 means that *   the throttle is currently enabled. When the throttle is enabled, CPU *   and bandwidth intensive functionality should be disabled. */function throttle_status() {  return variable_get('throttle_level', 0);}/** * Implementation of hook_exit(). * * Changes the current throttle level based on page hits. */function throttle_exit() {  // The following logic determines what the current throttle level should  //  be, and can be disabled by the admin. If enabled, the mt_rand() function  //  returns a number between 0 and N, N being specified by the admin. If  //  0 is returned, the throttle logic is run, adding two additional database  //  queries. Otherwise, the following logic is skipped. This mechanism is  //  referred to in the admin page as the 'probability limiter', roughly  //  limiting throttle related database calls to 1 in N.  if (!mt_rand(0, variable_get('throttle_probability_limiter', 9))) {    // Count users with activity in the past n seconds.    // This value is defined in the user module Who's Online block.    $time_period = variable_get('user_block_seconds_online', 900);    // When determining throttle status in your own module or theme, use    // $throttle = module_invoke('throttle', 'status');    // as that will still work when throttle.module is disabled.    // Clearly here the module is enabled so we call throttle_status() directly.    $throttle = throttle_status();    if ($max_guests = variable_get('throttle_anonymous', 0)) {      $guests = sess_count(time() - $time_period, TRUE);    }    else {      $guests = 0;    }    if ($max_users = variable_get('throttle_user', 0)) {      $users = sess_count(time() - $time_period, FALSE);    }    else {      $users = 0;    }    // update the throttle status    $message = '';    if ($max_users && $users > $max_users) {      if (!$throttle) {        variable_set('throttle_level', 1);        $message = format_plural($users,                                 '1 user accessing site; throttle enabled.',                                 '@count users accessing site; throttle enabled.');      }    }    elseif ($max_guests && $guests > $max_guests) {      if (!$throttle) {        variable_set('throttle_level', 1);        $message = format_plural($guests,                                 '1 guest accessing site; throttle enabled.',                                 '@count guests accessing site; throttle enabled.');      }    }    else {      if ($throttle) {        variable_set('throttle_level', 0);        // Note: unorthodox format_plural() usage due to Gettext plural limitations.        $message = format_plural($users, '1 user', '@count users') .', ';        $message .= format_plural($guests, '1 guest accessing site; throttle disabled', '@count guests accessing site; throttle disabled');      }    }    if ($message) {      cache_clear_all();      watchdog('throttle', 'Throttle: %message', array('%message' => $message));    }  }}/** * Implementation of hook_help(). */function throttle_help($path, $arg) {  switch ($path) {    case 'admin/help#throttle':      $output = '<p>'. t('The throttle module provides a congestion control mechanism that automatically adjusts to a surge in incoming traffic. If your site is referenced by a popular website, or experiences a "Denial of Service" (DoS) attack, your webserver might become overwhelmed. The throttle mechanism is utilized by modules to temporarily disable CPU-intensive functionality, increasing performance. For instance, via the throttle module, modules may choose to disable resource-intensive blocks or the code within the site theme may temporarily disable user pictures in posts.') .'</p>';      $output .= '<p>'. t('The congestion control throttle can be automatically enabled when the number of anonymous or authenticated users currently visiting the site exceeds a specified threshold.') .'</p>';      $output .= '<p>'. t('For more information, see the online handbook entry for <a href="@throttle">Throttle module</a>.', array('@throttle' => 'http://drupal.org/handbook/modules/throttle/')) .'</p>';      return $output;    case 'admin/settings/throttle':      return '<p>'. t('The throttle module provides a congestion control mechanism that automatically adjusts to a surge in incoming traffic. If your site is referenced by a popular website, or experiences a "Denial of Service" (DoS) attack, your webserver might become overwhelmed. The throttle mechanism is utilized by modules to temporarily disable CPU-intensive functionality, increasing performance.') .'</p>';  }}
<?php// $Id$// MySQLi specific install functions/** * Check if MySQLi is available. * * @return *  TRUE/FALSE */function mysqli_is_available() {  return function_exists('mysqli_connect');}/** * Check if we can connect to MySQL. * * @return *  TRUE/FALSE */function drupal_test_mysqli($url, &$success) {  if (!mysqli_is_available()) {    drupal_set_message(st('PHP MySQLi support not enabled.'), 'error');    return FALSE;  }  $url = parse_url($url);  // Decode url-encoded information in the db connection string.  $url['user'] = urldecode($url['user']);  $url['pass'] = isset($url['pass']) ? urldecode($url['pass']) : '';  $url['host'] = urldecode($url['host']);  $url['path'] = urldecode($url['path']);  $connection = mysqli_init();  @mysqli_real_connect($connection, $url['host'], $url['user'], $url['pass'], substr($url['path'], 1), $url['port'], NULL, MYSQLI_CLIENT_FOUND_ROWS);  if (mysqli_connect_errno() >= 2000 || mysqli_connect_errno() == 1045) {    drupal_set_message(st('Failed to connect to your MySQL database server. MySQL reports the following message: %error.<ul><li>Are you sure you have the correct username and password?</li><li>Are you sure that you have typed the correct database hostname?</li><li>Are you sure that the database server is running?</li></ul>For more help, see the <a href="http://drupal.org/node/258">Installation and upgrading handbook</a>. If you are unsure what these terms mean you should probably contact your hosting provider.', array('%error' => mysqli_connect_error())), 'error');    return FALSE;  }  // Test selecting the database.  if (mysqli_connect_errno() > 0) {    drupal_set_message(st('Failed to select your database on your MySQL database server, which means the connection username and password are valid, but there is a problem accessing your data. MySQL reports the following message: %error.<ul><li>Are you sure you have the correct database name?</li><li>Are you sure the database exists?</li><li>Are you sure the username has permission to access the database?</li></ul>For more help, see the <a href="http://drupal.org/node/258">Installation and upgrading handbook</a>. If you are unsure what these terms mean you should probably contact your hosting provider.', array('%error' => mysqli_connect_error())), 'error');    return FALSE;  }  $success = array('CONNECT');  // Test CREATE.  $query = 'CREATE TABLE drupal_install_test (id int NULL)';  $result = mysqli_query($connection, $query);  if ($error = mysqli_error($connection)) {    drupal_set_message(st('Failed to create a test table on your MySQL database server with the command %query. MySQL reports the following message: %error.<ul><li>Are you sure the configured username has the necessary MySQL permissions to create tables in the database?</li></ul>For more help, see the <a href="http://drupal.org/node/258">Installation and upgrading handbook</a>. If you are unsure what these terms mean you should probably contact your hosting provider.', array('%query' => $query, '%error' => $error)), 'error');    return FALSE;  }  $err = FALSE;  $success[] = 'SELECT';  $success[] = 'CREATE';  // Test INSERT.  $query = 'INSERT INTO drupal_install_test (id) VALUES (1)';  $result = mysqli_query($connection, $query);  if ($error = mysqli_error($connection)) {    drupal_set_message(st('Failed to insert a value into a test table on your MySQL database server. We tried inserting a value with the command %query and MySQL reported the following error: %error.', array('%query' => $query, '%error' => $error)), 'error');    $err = TRUE;  }  else {    $success[] = 'INSERT';  }  // Test UPDATE.  $query = 'UPDATE drupal_install_test SET id = 2';  $result = mysqli_query($connection, $query);  if ($error = mysqli_error($connection)) {    drupal_set_message(st('Failed to update a value in a test table on your MySQL database server. We tried updating a value with the command %query and MySQL reported the following error: %error.', array('%query' => $query, '%error' => $error)), 'error');    $err = TRUE;  }  else {    $success[] = 'UPDATE';  }  // Test DELETE.  $query = 'DELETE FROM drupal_install_test';  $result = mysqli_query($connection, $query);  if ($error = mysqli_error($connection)) {    drupal_set_message(st('Failed to delete a value from a test table on your MySQL database server. We tried deleting a value with the command %query and MySQL reported the following error: %error.', array('%query' => $query, '%error' => $error)), 'error');    $err = TRUE;  }  else {    $success[] = 'DELETE';  }  // Test DROP.  $query = 'DROP TABLE drupal_install_test';  $result = mysqli_query($connection, $query);  if ($error = mysqli_error($connection)) {    drupal_set_message(st('Failed to drop a test table from your MySQL database server. We tried dropping a table with the command %query and MySQL reported the following error %error.', array('%query' => $query, '%error' => $error)), 'error');    $err = TRUE;  }  else {    $success[] = 'DROP';  }  if ($err) {    return FALSE;  }  mysqli_close($connection);  return TRUE;}
<?php// $Id$/** * @file poll-results-block.tpl.php * Display the poll results in a block. * * Variables available: * - $title: The title of the poll. * - $results: The results of the poll. * - $votes: The total results in the poll. * - $links: Links in the poll. * - $nid: The nid of the poll * - $cancel_form: A form to cancel the user's vote, if allowed. * - $raw_links: The raw array of links. * - $vote: The choice number of the current user's vote. * * @see template_preprocess_poll_results() */?><div class="poll">  <?php print $results; ?>  <div class="total">    <?php print t('Total votes: @votes', array('@votes' => $votes)); ?>  </div>  <?php if (!empty($cancel_form)): ?>    <?php print $cancel_form; ?>  <?php endif; ?></div>
<?php// $Id$?><div class="<?php print "block block-$block->module" ?>" id="<?php print "block-$block->module-$block->delta"; ?>">  <div class="title"><h3><?php print $block->subject ?></h3></div>  <div class="content"><?php print $block->content ?></div></div>
<?php// $Id$/** * @file * Admin page callbacks for the comment module. *//** * Menu callback; present an administrative comment listing. */function comment_admin($type = 'new') {  $edit = $_POST;  if (isset($edit['operation']) && ($edit['operation'] == 'delete') && isset($edit['comments']) && $edit['comments']) {    return drupal_get_form('comment_multiple_delete_confirm');  }  else {    return drupal_get_form('comment_admin_overview', $type, arg(4));  }}/** * Form builder; Builds the comment overview form for the admin. * * @param $type *   Not used. * @param $arg *   Current path's fourth component deciding the form type (Published comments/Approval queue) * @return *   The form structure. * @ingroup forms * @see comment_admin_overview_validate() * @see comment_admin_overview_submit() * @see theme_comment_admin_overview() */function comment_admin_overview($type = 'new', $arg) {  // build an 'Update options' form  $form['options'] = array(    '#type' => 'fieldset', '#title' => t('Update options'),    '#prefix' => '<div class="container-inline">', '#suffix' => '</div>'  );  $options = array();  foreach (comment_operations($arg == 'approval' ? 'publish' : 'unpublish') as $key => $value) {    $options[$key] = $value[0];  }  $form['options']['operation'] = array('#type' => 'select', '#options' => $options, '#default_value' => 'publish');  $form['options']['submit'] = array('#type' => 'submit', '#value' => t('Update'));  // load the comments that we want to display  $status = ($arg == 'approval') ? COMMENT_NOT_PUBLISHED : COMMENT_PUBLISHED;  $form['header'] = array('#type' => 'value', '#value' => array(    theme('table_select_header_cell'),    array('data' => t('Subject'), 'field' => 'subject'),    array('data' => t('Author'), 'field' => 'name'),    array('data' => t('Posted in'), 'field' => 'node_title'),    array('data' => t('Time'), 'field' => 'timestamp', 'sort' => 'desc'),    array('data' => t('Operations'))  ));  $result = pager_query('SELECT c.subject, c.nid, c.cid, c.comment, c.timestamp, c.status, c.name, c.homepage, u.name AS registered_name, u.uid, n.title as node_title FROM {comments} c INNER JOIN {users} u ON u.uid = c.uid INNER JOIN {node} n ON n.nid = c.nid WHERE c.status = %d'. tablesort_sql($form['header']['#value']), 50, 0, NULL, $status);  // build a table listing the appropriate comments  $destination = drupal_get_destination();  while ($comment = db_fetch_object($result)) {    $comments[$comment->cid] = '';    $comment->name = $comment->uid ? $comment->registered_name : $comment->name;    $form['subject'][$comment->cid] = array('#value' => l($comment->subject, 'node/'. $comment->nid, array('attributes' => array('title' => truncate_utf8($comment->comment, 128)), 'fragment' => 'comment-'. $comment->cid)));    $form['username'][$comment->cid] = array('#value' => theme('username', $comment));    $form['node_title'][$comment->cid] = array('#value' => l($comment->node_title, 'node/'. $comment->nid));    $form['timestamp'][$comment->cid] = array('#value' => format_date($comment->timestamp, 'small'));    $form['operations'][$comment->cid] = array('#value' => l(t('edit'), 'comment/edit/'. $comment->cid, array('query' => $destination)));  }  $form['comments'] = array('#type' => 'checkboxes', '#options' => isset($comments) ? $comments: array());  $form['pager'] = array('#value' => theme('pager', NULL, 50, 0));  return $form;}/** * Validate comment_admin_overview form submissions. * * We can't execute any 'Update options' if no comments were selected. */function comment_admin_overview_validate($form, &$form_state) {  $form_state['values']['comments'] = array_diff($form_state['values']['comments'], array(0));  if (count($form_state['values']['comments']) == 0) {    form_set_error('', t('Please select one or more comments to perform the update on.'));  }}/** * Process comment_admin_overview form submissions. * * Execute the chosen 'Update option' on the selected comments, such as * publishing, unpublishing or deleting. */function comment_admin_overview_submit($form, &$form_state) {  $operations = comment_operations();  if (!empty($operations[$form_state['values']['operation']][1])) {    // extract the appropriate database query operation    $query = $operations[$form_state['values']['operation']][1];    foreach ($form_state['values']['comments'] as $cid => $value) {      if ($value) {        // perform the update action, then refresh node statistics        db_query($query, $cid);        $comment = _comment_load($cid);        _comment_update_node_statistics($comment->nid);        // Allow modules to respond to the updating of a comment.        comment_invoke_comment($comment, $form_state['values']['operation']);        // Add an entry to the watchdog log.        watchdog('content', 'Comment: updated %subject.', array('%subject' => $comment->subject), WATCHDOG_NOTICE, l(t('view'), 'node/'. $comment->nid, array('fragment' => 'comment-'. $comment->cid)));      }    }    cache_clear_all();    drupal_set_message(t('The update has been performed.'));    $form_state['redirect'] = 'admin/content/comment';  }}/** * Theme the comment admin form. * * @param $form *   An associative array containing the structure of the form. * @ingroup themeable */function theme_comment_admin_overview($form) {  $output = drupal_render($form['options']);  if (isset($form['subject']) && is_array($form['subject'])) {    foreach (element_children($form['subject']) as $key) {      $row = array();      $row[] = drupal_render($form['comments'][$key]);      $row[] = drupal_render($form['subject'][$key]);      $row[] = drupal_render($form['username'][$key]);      $row[] = drupal_render($form['node_title'][$key]);      $row[] = drupal_render($form['timestamp'][$key]);      $row[] = drupal_render($form['operations'][$key]);      $rows[] = $row;    }  }  else {    $rows[] = array(array('data' => t('No comments available.'), 'colspan' => '6'));  }  $output .= theme('table', $form['header']['#value'], $rows);  if ($form['pager']['#value']) {    $output .= drupal_render($form['pager']);  }  $output .= drupal_render($form);  return $output;}/** * List the selected comments and verify that the admin really wants to delete * them. * * @param $form_state *   An associative array containing the current state of the form. * @return *   TRUE if the comments should be deleted, FALSE otherwise. * @ingroup forms * @see comment_multiple_delete_confirm_submit() */function comment_multiple_delete_confirm(&$form_state) {  $edit = $form_state['post'];  $form['comments'] = array('#prefix' => '<ul>', '#suffix' => '</ul>', '#tree' => TRUE);  // array_filter() returns only elements with actual values  $comment_counter = 0;  foreach (array_filter($edit['comments']) as $cid => $value) {    $comment = _comment_load($cid);    if (is_object($comment) && is_numeric($comment->cid)) {      $subject = db_result(db_query('SELECT subject FROM {comments} WHERE cid = %d', $cid));      $form['comments'][$cid] = array('#type' => 'hidden', '#value' => $cid, '#prefix' => '<li>', '#suffix' => check_plain($subject) .'</li>');      $comment_counter++;    }  }  $form['operation'] = array('#type' => 'hidden', '#value' => 'delete');  if (!$comment_counter) {    drupal_set_message(t('There do not appear to be any comments to delete or your selected comment was deleted by another administrator.'));    drupal_goto('admin/content/comment');  }  else {    return confirm_form($form,                        t('Are you sure you want to delete these comments and all their children?'),                        'admin/content/comment', t('This action cannot be undone.'),                        t('Delete comments'), t('Cancel'));  }}/** * Process comment_multiple_delete_confirm form submissions. * * Perform the actual comment deletion. */function comment_multiple_delete_confirm_submit($form, &$form_state) {  if ($form_state['values']['confirm']) {    foreach ($form_state['values']['comments'] as $cid => $value) {      $comment = _comment_load($cid);      _comment_delete_thread($comment);      _comment_update_node_statistics($comment->nid);    }    cache_clear_all();    drupal_set_message(t('The comments have been deleted.'));  }  $form_state['redirect'] = 'admin/content/comment';}/** * Menu callback; delete a comment. * * @param $cid *   The comment do be deleted. */function comment_delete($cid = NULL) {  $comment = db_fetch_object(db_query('SELECT c.*, u.name AS registered_name, u.uid FROM {comments} c INNER JOIN {users} u ON u.uid = c.uid WHERE c.cid = %d', $cid));  $comment->name = $comment->uid ? $comment->registered_name : $comment->name;  $output = '';  if (is_object($comment) && is_numeric($comment->cid)) {    $output = drupal_get_form('comment_confirm_delete', $comment);  }  else {    drupal_set_message(t('The comment no longer exists.'));  }  return $output;}/** * Form builder; Builds the confirmation form for deleting a single comment. * * @ingroup forms * @see comment_confirm_delete_submit() */function comment_confirm_delete(&$form_state, $comment) {  $form = array();  $form['#comment'] = $comment;  return confirm_form(    $form,    t('Are you sure you want to delete the comment %title?', array('%title' => $comment->subject)),    'node/'. $comment->nid,    t('Any replies to this comment will be lost. This action cannot be undone.'),    t('Delete'),    t('Cancel'),    'comment_confirm_delete');}/** * Process comment_confirm_delete form submissions. */function comment_confirm_delete_submit($form, &$form_state) {  drupal_set_message(t('The comment and all its replies have been deleted.'));  $comment = $form['#comment'];  // Delete comment and its replies.  _comment_delete_thread($comment);  _comment_update_node_statistics($comment->nid);  // Clear the cache so an anonymous user sees that his comment was deleted.  cache_clear_all();  $form_state['redirect'] = "node/$comment->nid";}/** * Perform the actual deletion of a comment and all its replies. * * @param $comment *   An associative array describing the comment to be deleted. */function _comment_delete_thread($comment) {  if (!is_object($comment) || !is_numeric($comment->cid)) {    watchdog('content', 'Cannot delete non-existent comment.', array(), WATCHDOG_WARNING);    return;  }  // Delete the comment:  db_query('DELETE FROM {comments} WHERE cid = %d', $comment->cid);  watchdog('content', 'Comment: deleted %subject.', array('%subject' => $comment->subject));  comment_invoke_comment($comment, 'delete');  // Delete the comment's replies  $result = db_query('SELECT c.*, u.name AS registered_name, u.uid FROM {comments} c INNER JOIN {users} u ON u.uid = c.uid WHERE pid = %d', $comment->cid);  while ($comment = db_fetch_object($result)) {    $comment->name = $comment->uid ? $comment->registered_name : $comment->name;    _comment_delete_thread($comment);  }}
<?php// $Id$/** * @file search-theme-form.tpl.php * Default theme implementation for displaying a search form directly into the * theme layout. Not to be confused with the search block or the search page. * * Available variables: * - $search_form: The complete search form ready for print. * - $search: Array of keyed search elements. Can be used to print each form *   element separately. * * Default keys within $search: * - $search['search_theme_form']: Text input area wrapped in a div. * - $search['submit']: Form submit button. * - $search['hidden']: Hidden form elements. Used to validate forms when submitted. * * Since $search is keyed, a direct print of the form element is possible. * Modules can add to the search form so it is recommended to check for their * existance before printing. The default keys will always exist. * *   <?php if (isset($search['extra_field'])): ?> *     <div class="extra-field"> *       <?php print $search['extra_field']; ?> *     </div> *   <?php endif; ?> * * To check for all available data within $search, use the code below. * *   <?php print '<pre>'. check_plain(print_r($search, 1)) .'</pre>'; ?> * * @see template_preprocess_search_theme_form() */?><div id="search" class="container-inline">  <?php print $search_form; ?></div>
<?php// $Id$$info = array(  // Pre-defined color schemes.  'schemes' => array(    '#0072b9,#027ac6,#2385c2,#5ab5ee,#494949' => t('Blue Lagoon (Default)'),    '#464849,#2f416f,#2a2b2d,#5d6779,#494949' => t('Ash'),    '#55c0e2,#000000,#085360,#007e94,#696969' => t('Aquamarine'),    '#d5b048,#6c420e,#331900,#971702,#494949' => t('Belgian Chocolate'),    '#3f3f3f,#336699,#6598cb,#6598cb,#000000' => t('Bluemarine'),    '#d0cb9a,#917803,#efde01,#e6fb2d,#494949' => t('Citrus Blast'),    '#0f005c,#434f8c,#4d91ff,#1a1575,#000000' => t('Cold Day'),    '#c9c497,#0c7a00,#03961e,#7be000,#494949' => t('Greenbeam'),    '#ffe23d,#a9290a,#fc6d1d,#a30f42,#494949' => t('Mediterrano'),    '#788597,#3f728d,#a9adbc,#d4d4d4,#707070' => t('Mercury'),    '#5b5fa9,#5b5faa,#0a2352,#9fa8d5,#494949' => t('Nocturnal'),    '#7db323,#6a9915,#b5d52a,#7db323,#191a19' => t('Olivia'),    '#12020b,#1b1a13,#f391c6,#f41063,#898080' => t('Pink Plastic'),    '#b7a0ba,#c70000,#a1443a,#f21107,#515d52' => t('Shiny Tomato'),    '#18583d,#1b5f42,#34775a,#52bf90,#2d2d2d' => t('Teal Top'),  ),  // Images to copy over.  'copy' => array(    '../images/menu-collapsed.gif',    '../images/menu-collapsed-rtl.gif',    '../images/menu-expanded.gif',    '../images/menu-leaf.gif',  ),  // CSS files (excluding @import) to rewrite with new color scheme.  'css' => array(    '../style.css',  ),  // Coordinates of gradient (x, y, width, height).  'gradient' => array(0, 37, 760, 121),  // Color areas to fill (x, y, width, height).  'fill' => array(    'base' => array(0, 0, 760, 568),    'link' => array(107, 533, 41, 23),  ),  // Coordinates of all the theme slices (x, y, width, height)  // with their filename as used in the stylesheet.  'slices' => array(    '../images/body.png'                      => array(0, 37, 1, 280),    '../images/bg-bar.png'                    => array(202, 530, 76, 14),    '../images/bg-bar-white.png'              => array(202, 506, 76, 14),    '../images/bg-tab.png'                    => array(107, 533, 41, 23),    '../images/bg-navigation.png'             => array(0, 0, 7, 37),    '../images/bg-content-left.png'           => array(40, 117, 50, 352),    '../images/bg-content-right.png'          => array(510, 117, 50, 352),    '../images/bg-content.png'                => array(299, 117, 7, 200),    '../images/bg-navigation-item.png'        => array(32, 37, 17, 12),    '../images/bg-navigation-item-hover.png'  => array(54, 37, 17, 12),    '../images/gradient-inner.png'            => array(646, 307, 112, 42),    'logo.png'                                => array(622, 51, 64, 73),    'screenshot.png'                          => array(0, 37, 400, 240),  ),  // Reference color used for blending. Matches the base.png's colors.  'blend_target' => '#ffffff',  // Preview files.  'preview_image' => 'color/preview.png',  'preview_css' => '../color/preview.css',  // Base file for image generation.  'base_image' => 'color/base.png',);
<?php// $Id$// Global variables to track parsing state$xrds_open_elements = array();$xrds_services = array();$xrds_current_service = array();/** * Main entry point for parsing XRDS documents */function xrds_parse($xml) {  global $xrds_services;  $parser = xml_parser_create_ns();  xml_set_element_handler($parser, '_xrds_element_start', '_xrds_element_end');  xml_set_character_data_handler($parser, '_xrds_cdata');  xml_parse($parser, $xml);  xml_parser_free($parser);  return $xrds_services;}/** * Parser callback functions */function _xrds_element_start(&$parser, $name, $attribs) {  global $xrds_open_elements;  $xrds_open_elements[] = _xrds_strip_namespace($name);}function _xrds_element_end(&$parser, $name) {  global $xrds_open_elements, $xrds_services, $xrds_current_service;  $name = _xrds_strip_namespace($name);  if ($name == 'SERVICE') {    if (in_array(OPENID_NS_2_0 .'/signon', $xrds_current_service['types']) ||        in_array(OPENID_NS_2_0 .'/server', $xrds_current_service['types'])) {      $xrds_current_service['version'] = 2;    }    elseif (in_array(OPENID_NS_1_1, $xrds_current_service['types']) ||            in_array(OPENID_NS_1_0, $xrds_current_service['types'])) {      $xrds_current_service['version'] = 1;    }    if (!empty($xrds_current_service['version'])) {      $xrds_services[] = $xrds_current_service;    }    $xrds_current_service = array();  }  array_pop($xrds_open_elements);}function _xrds_cdata(&$parser, $data) {  global $xrds_open_elements, $xrds_services, $xrds_current_service;  $path = strtoupper(implode('/', $xrds_open_elements));  switch ($path) {    case 'XRDS/XRD/SERVICE/TYPE':      $xrds_current_service['types'][] = $data;      break;    case 'XRDS/XRD/SERVICE/URI':      $xrds_current_service['uri'] = $data;      break;    case 'XRDS/XRD/SERVICE/DELEGATE':      $xrds_current_service['delegate'] = $data;      break;    case 'XRDS/XRD/SERVICE/LOCALID':      $xrds_current_service['localid'] = $data;      break;  }}function _xrds_strip_namespace($name) {  // Strip namespacing.  $pos = strrpos($name, ':');  if ($pos !== FALSE) {    $name = substr($name, $pos + 1, strlen($name));  }  return $name;}
<?php// $Id$?><!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.0 Transitional//EN" "http://www.w3.org/TR/xhtml1/DTD/xhtml1-transitional.dtd"><html xmlns="http://www.w3.org/1999/xhtml" lang="<?php print $language->language ?>" xml:lang="<?php print $language->language ?>" dir="<?php print $language->dir ?>"><head>  <meta http-equiv="Content-Style-Type" content="text/css" />  <?php print $head ?>  <title><?php print $head_title ?></title>  <?php print $styles ?>  <?php print $scripts ?></head><body><div class="hide"><a href="#content" title="<?php print t('Skip navigation') ?>." accesskey="2"><?php print t('Skip navigation') ?></a>.</div><table id="primary-menu" summary="Navigation elements." border="0" cellpadding="0" cellspacing="0" width="100%">  <tr>    <td id="home" width="10%">      <?php if ($logo) : ?>        <a href="<?php print $front_page ?>" title="<?php print t('Home') ?>"><img src="<?php print($logo) ?>" alt="<?php print t('Home') ?>" border="0" /></a>      <?php endif; ?>    </td>    <td id="site-info" width="20%">      <?php if ($site_name) : ?>        <div class='site-name'><a href="<?php print $front_page ?>" title="<?php print t('Home') ?>"><?php print($site_name) ?></a></div>      <?php endif;?>      <?php if ($site_slogan) : ?>        <div class='site-slogan'><?php print($site_slogan) ?></div>      <?php endif;?>    </td>    <td class="primary-links" width="70%" align="center" valign="middle">      <?php print theme('links', $primary_links, array('class' => 'links', 'id' => 'navlist')) ?>    </td>  </tr></table><table id="secondary-menu" summary="Navigation elements." border="0" cellpadding="0" cellspacing="0" width="100%">  <tr>    <td class="secondary-links" width="75%"  align="center" valign="middle">      <?php print theme('links', $secondary_links, array('class' => 'links', 'id' => 'subnavlist')) ?>    </td>    <td width="25%" align="center" valign="middle">      <?php print $search_box ?>    </td>  </tr>  <tr>    <td colspan="2"><div><?php print $header ?></div></td>  </tr></table><table id="content" border="0" cellpadding="15" cellspacing="0" width="100%">  <tr>    <?php if ($left != ""): ?>    <td id="sidebar-left">      <?php print $left ?>    </td>    <?php endif; ?>    <td valign="top">      <?php if ($mission != ""): ?>      <div id="mission"><?php print $mission ?></div>      <?php endif; ?>      <div id="main">        <?php if ($title != ""): ?>          <?php print $breadcrumb ?>          <h1 class="title"><?php print $title ?></h1>          <?php if ($tabs != ""): ?>            <div class="tabs"><?php print $tabs ?></div>          <?php endif; ?>        <?php endif; ?>        <?php if ($show_messages && $messages != ""): ?>          <?php print $messages ?>        <?php endif; ?>        <?php if ($help != ""): ?>            <div id="help"><?php print $help ?></div>        <?php endif; ?>      <!-- start main content -->      <?php print $content; ?>      <?php print $feed_icons; ?>      <!-- end main content -->      </div><!-- main -->    </td>    <?php if ($right != ""): ?>    <td id="sidebar-right">      <?php print $right ?>    </td>    <?php endif; ?>  </tr></table><table id="footer-menu" summary="Navigation elements." border="0" cellpadding="0" cellspacing="0" width="100%">  <tr>    <td align="center" valign="middle">    <?php if (isset($primary_links)) : ?>      <?php print theme('links', $primary_links, array('class' => 'links primary-links')) ?>    <?php endif; ?>    <?php if (isset($secondary_links)) : ?>      <?php print theme('links', $secondary_links, array('class' => 'links secondary-links')) ?>    <?php endif; ?>    </td>  </tr></table><?php if ($footer_message || $footer) : ?><div id="footer-message">    <?php print $footer_message . $footer;?></div><?php endif; ?><?php print $closure;?></body></html>
<?php// $Id$/** * @file aggregator-summary-item.tpl.php * Default theme implementation to present a linked feed item for summaries. * * Available variables: * - $feed_url: Link to originating feed. * - $feed_title: Title of feed. * - $feed_age: Age of remote feed. * - $source_url: Link to remote source. * - $source_title: Locally set title for the source. * * @see template_preprocess() * @see template_preprocess_aggregator_summary_item() */?><a href="<?php print $feed_url; ?>"><?php print $feed_title; ?></a> <span class="age"><?php print $feed_age; ?></span><?php if ($source_url) : ?>, <span class="source"><a href="<?php print $source_url; ?>"><?php print $source_title; ?></a></span><?php endif; ?>
<?php// $Id$/** * @file block.tpl.php * * Theme implementation to display a block. * * Available variables: * - $block->subject: Block title. * - $block->content: Block content. * - $block->module: Module that generated the block. * - $block->delta: This is a numeric id connected to each module. * - $block->region: The block region embedding the current block. * * Helper variables: * - $block_zebra: Outputs 'odd' and 'even' dependent on each block region. * - $zebra: Same output as $block_zebra but independent of any block region. * - $block_id: Counter dependent on each block region. * - $id: Same output as $block_id but independent of any block region. * - $is_front: Flags true when presented in the front page. * - $logged_in: Flags true when the current user is a logged-in member. * - $is_admin: Flags true when the current user is an administrator. * * @see template_preprocess() * @see template_preprocess_block() */?><div id="block-<?php print $block->module .'-'. $block->delta; ?>" class="block block-<?php print $block->module ?>"><?php if ($block->subject): ?>  <h2><?php print $block->subject ?></h2><?php endif;?>  <div class="content">    <?php print $block->content ?>  </div></div>
<?php// $Id$/** * @file * GD2 toolkit for image manipulation within Drupal. *//** * @ingroup image * @{ *//** * Retrieve information about the toolkit. */function image_gd_info() {  return array('name' => 'gd', 'title' => t('GD2 image manipulation toolkit'));}/** * Retrieve settings for the GD2 toolkit. */function image_gd_settings() {  if (image_gd_check_settings()) {    $form = array();    $form['status'] = array(      '#value' => t('The GD toolkit is installed and working properly.')    );    $form['image_jpeg_quality'] = array(      '#type' => 'textfield',      '#title' => t('JPEG quality'),      '#description' => t('Define the image quality for JPEG manipulations. Ranges from 0 to 100. Higher values mean better image quality but bigger files.'),      '#size' => 10,      '#maxlength' => 3,      '#default_value' => variable_get('image_jpeg_quality', 75),      '#field_suffix' => t('%'),    );    $form['#element_validate'] = array('image_gd_settings_validate');        return $form;  }  else {    form_set_error('image_toolkit', t('The GD image toolkit requires that the GD module for PHP be installed and configured properly. For more information see <a href="@url">PHP\'s image documentation</a>.', array('@url' => 'http://php.net/image')));    return FALSE;  }}/** * Validate the submitted GD settings. */function image_gd_settings_validate($form, &$form_state) {  // Validate image quality range.  $value = $form_state['values']['image_jpeg_quality'];  if (!is_numeric($value) || $value < 0 || $value > 100) {    form_set_error('image_jpeg_quality', t('JPEG quality must be a number between 0 and 100.'));  }}/** * Verify GD2 settings (that the right version is actually installed). * * @return *   A boolean indicating if the GD toolkit is avaiable on this machine. */function image_gd_check_settings() {  if ($check = get_extension_funcs('gd')) {    if (in_array('imagegd2', $check)) {      // GD2 support is available.      return TRUE;    }  }  return FALSE;}/** * Scale an image to the specified size using GD. */function image_gd_resize($source, $destination, $width, $height) {  if (!file_exists($source)) {    return FALSE;  }  $info = image_get_info($source);  if (!$info) {    return FALSE;  }  $im = image_gd_open($source, $info['extension']);  if (!$im) {    return FALSE;  }  $res = imagecreatetruecolor($width, $height);  if ($info['extension'] == 'png') {    $transparency = imagecolorallocatealpha($res, 0, 0, 0, 127);    imagealphablending($res, FALSE);    imagefilledrectangle($res, 0, 0, $width, $height, $transparency);    imagealphablending($res, TRUE);    imagesavealpha($res, TRUE);  }  elseif ($info['extension'] == 'gif') {    // If we have a specific transparent color.    $transparency_index = imagecolortransparent($im);    if ($transparency_index >= 0) {      // Get the original image's transparent color's RGB values.      $transparent_color = imagecolorsforindex($im, $transparency_index);      // Allocate the same color in the new image resource.      $transparency_index = imagecolorallocate($res, $transparent_color['red'], $transparent_color['green'], $transparent_color['blue']);      // Completely fill the background of the new image with allocated color.      imagefill($res, 0, 0, $transparency_index);      // Set the background color for new image to transparent.      imagecolortransparent($res, $transparency_index);      // Find number of colors in the images palette.      $number_colors = imagecolorstotal($im);      // Convert from true color to palette to fix transparency issues.      imagetruecolortopalette($res, TRUE, $number_colors);    }  }  imagecopyresampled($res, $im, 0, 0, 0, 0, $width, $height, $info['width'], $info['height']);  $result = image_gd_close($res, $destination, $info['extension']);  imagedestroy($res);  imagedestroy($im);  return $result;}/** * Rotate an image the given number of degrees. */function image_gd_rotate($source, $destination, $degrees, $background = 0x000000) {  if (!function_exists('imageRotate')) {    return FALSE;  }  $info = image_get_info($source);  if (!$info) {    return FALSE;  }  $im = image_gd_open($source, $info['extension']);  if (!$im) {    return FALSE;  }  $res = imageRotate($im, $degrees, $background);  $result = image_gd_close($res, $destination, $info['extension']);  return $result;}/** * Crop an image using the GD toolkit. */function image_gd_crop($source, $destination, $x, $y, $width, $height) {  $info = image_get_info($source);  if (!$info) {    return FALSE;  }  $im = image_gd_open($source, $info['extension']);  $res = imageCreateTrueColor($width, $height);  imageCopy($res, $im, 0, 0, $x, $y, $width, $height);  $result = image_gd_close($res, $destination, $info['extension']);  imageDestroy($res);  imageDestroy($im);  return $result;}/** * GD helper function to create an image resource from a file. * * @param $file *   A string file path where the iamge should be saved. * @param $extension *   A string containing one of the following extensions: gif, jpg, jpeg, png. * @return *   An image resource, or FALSE on error. */function image_gd_open($file, $extension) {  $extension = str_replace('jpg', 'jpeg', $extension);  $open_func = 'imageCreateFrom'. $extension;  if (!function_exists($open_func)) {    return FALSE;  }  return $open_func($file);}/** * GD helper to write an image resource to a destination file. * * @param $res *   An image resource created with image_gd_open(). * @param $destination *   A string file path where the iamge should be saved. * @param $extension *   A string containing one of the following extensions: gif, jpg, jpeg, png. * @return *   Boolean indicating success. */function image_gd_close($res, $destination, $extension) {  $extension = str_replace('jpg', 'jpeg', $extension);  $close_func = 'image'. $extension;  if (!function_exists($close_func)) {    return FALSE;  }  if ($extension == 'jpeg') {    return $close_func($res, $destination, variable_get('image_jpeg_quality', 75));  }  else {    return $close_func($res, $destination);  }}/** * @} End of "ingroup image". */
<?php// $Id$/** * @file user-profile.tpl.php * Default theme implementation to present all user profile data. * * This template is used when viewing a registered member's profile page, * e.g., example.com/user/123. 123 being the users ID. * * By default, all user profile data is printed out with the $user_profile * variable. If there is a need to break it up you can use $profile instead. * It is keyed to the name of each category or other data attached to the * account. If it is a category it will contain all the profile items. By * default $profile['summary'] is provided which contains data on the user's * history. Other data can be included by modules. $profile['user_picture'] is * available by default showing the account picture. * * Also keep in mind that profile items and their categories can be defined by * site administrators. They are also available within $profile. For example, * if a site is configured with a category of "contact" with * fields for of addresses, phone numbers and other related info, then doing a * straight print of $profile['contact'] will output everything in the * category. This is useful for altering source order and adding custom * markup for the group. * * To check for all available data within $profile, use the code below. * @code *   print '<pre>'. check_plain(print_r($profile, 1)) .'</pre>'; * @endcode * * Available variables: *   - $user_profile: All user profile data. Ready for print. *   - $profile: Keyed array of profile categories and their items or other data *     provided by modules. * * @see user-profile-category.tpl.php *   Where the html is handled for the group. * @see user-profile-item.tpl.php *   Where the html is handled for each item in the group. * @see template_preprocess_user_profile() */?><div class="profile">  <?php print $user_profile; ?></div>
<?php// $Id$/** * @file comment-folded.tpl.php * Default theme implementation for folded comments. * * Available variables: * - $title: Linked title to full comment. * - $new: New comment marker. * - $author: Comment author. Can be link or plain text. * - $date: Date and time of posting. * - $comment: Full comment object. * * @see template_preprocess_comment_folded() * @see theme_comment_folded() */?><div class="comment-folded">  <span class="subject"><?php print $title .' '. $new; ?></span><span class="credit"><?php print t('by') .' '. $author; ?></span></div>
<?php// $Id$/** * @file aggregator-item.tpl.php * Default theme implementation to format an individual feed item for display * on the aggregator page. * * Available variables: * - $feed_url: URL to the originating feed item. * - $feed_title: Title of the feed item. * - $source_url: Link to the local source section. * - $source_title: Title of the remote source. * - $source_date: Date the feed was posted on the remote source. * - $content: Feed item content. * - $categories: Linked categories assigned to the feed. * * @see template_preprocess() * @see template_preprocess_aggregator_item() */?><div class="feed-item">  <h3 class="feed-item-title">    <a href="<?php print $feed_url; ?>"><?php print $feed_title; ?></a>  </h3>  <div class="feed-item-meta">  <?php if ($source_url) : ?>    <a href="<?php print $source_url; ?>" class="feed-item-source"><?php print $source_title; ?></a> -  <?php endif; ?>    <span class="feed-item-date"><?php print $source_date; ?></span>  </div><?php if ($content) : ?>  <div class="feed-item-body">    <?php print $content; ?>  </div><?php endif; ?><?php if ($categories) : ?>  <div class="feed-item-categories">    <?php print t('Categories'); ?>: <?php print implode(', ', $categories); ?>  </div><?php endif ;?></div>
<?php// $Id$/** * @file * Database interface code for PostgreSQL database servers. *//** * @ingroup database * @{ *//** * Report database status. */function db_status_report() {  $t = get_t();  $version = db_version();  $form['pgsql'] = array(    'title' => $t('PostgreSQL database'),    'value' => $version,  );  if (version_compare($version, DRUPAL_MINIMUM_PGSQL) < 0) {    $form['pgsql']['severity'] = REQUIREMENT_ERROR;    $form['pgsql']['description'] = $t('Your PostgreSQL Server is too old. Drupal requires at least PostgreSQL %version.', array('%version' => DRUPAL_MINIMUM_PGSQL));  }  return $form;}/** * Returns the version of the database server currently in use. * * @return Database server version */function db_version() {  return db_result(db_query("SHOW SERVER_VERSION"));}/** * Initialize a database connection. */function db_connect($url) {  // Check if PostgreSQL support is present in PHP  if (!function_exists('pg_connect')) {    _db_error_page('Unable to use the PostgreSQL database because the PostgreSQL extension for PHP is not installed. Check your <code>php.ini</code> to see how you can enable it.');  }  $url = parse_url($url);  $conn_string = '';  // Decode url-encoded information in the db connection string  if (isset($url['user'])) {    $conn_string .= ' user='. urldecode($url['user']);  }  if (isset($url['pass'])) {    $conn_string .= ' password='. urldecode($url['pass']);  }  if (isset($url['host'])) {    $conn_string .= ' host='. urldecode($url['host']);  }  if (isset($url['path'])) {    $conn_string .= ' dbname='. substr(urldecode($url['path']), 1);  }  if (isset($url['port'])) {    $conn_string .= ' port='. urldecode($url['port']);  }  // pg_last_error() does not return a useful error message for database  // connection errors. We must turn on error tracking to get at a good error  // message, which will be stored in $php_errormsg.  $track_errors_previous = ini_get('track_errors');  ini_set('track_errors', 1);  $connection = @pg_connect($conn_string);  if (!$connection) {    require_once './includes/unicode.inc';    _db_error_page(decode_entities($php_errormsg));  }  // Restore error tracking setting  ini_set('track_errors', $track_errors_previous);  pg_query($connection, "set client_encoding=\"UTF8\"");  return $connection;}/** * Runs a basic query in the active database. * * User-supplied arguments to the query should be passed in as separate * parameters so that they can be properly escaped to avoid SQL injection * attacks. * * @param $query *   A string containing an SQL query. * @param ... *   A variable number of arguments which are substituted into the query *   using printf() syntax. Instead of a variable number of query arguments, *   you may also pass a single array containing the query arguments. * *   Valid %-modifiers are: %s, %d, %f, %b (binary data, do not enclose *   in '') and %%. * *   NOTE: using this syntax will cast NULL and FALSE values to decimal 0, *   and TRUE values to decimal 1. * * @return *   A database query result resource, or FALSE if the query was not *   executed correctly. */function db_query($query) {  $args = func_get_args();  array_shift($args);  $query = db_prefix_tables($query);  if (isset($args[0]) and is_array($args[0])) { // 'All arguments in one array' syntax    $args = $args[0];  }  _db_query_callback($args, TRUE);  $query = preg_replace_callback(DB_QUERY_REGEXP, '_db_query_callback', $query);  return _db_query($query);}/** * Helper function for db_query(). */function _db_query($query, $debug = 0) {  global $active_db, $last_result, $queries;  if (variable_get('dev_query', 0)) {    list($usec, $sec) = explode(' ', microtime());    $timer = (float)$usec + (float)$sec;  }  $last_result = pg_query($active_db, $query);  if (variable_get('dev_query', 0)) {    $bt = debug_backtrace();    $query = $bt[2]['function'] ."\n". $query;    list($usec, $sec) = explode(' ', microtime());    $stop = (float)$usec + (float)$sec;    $diff = $stop - $timer;    $queries[] = array($query, $diff);  }  if ($debug) {    print '<p>query: '. $query .'<br />error:'. pg_last_error($active_db) .'</p>';  }  if ($last_result !== FALSE) {    return $last_result;  }  else {    // Indicate to drupal_error_handler that this is a database error.    ${DB_ERROR} = TRUE;    trigger_error(check_plain(pg_last_error($active_db) ."\nquery: ". $query), E_USER_WARNING);    return FALSE;  }}/** * Fetch one result row from the previous query as an object. * * @param $result *   A database query result resource, as returned from db_query(). * @return *   An object representing the next row of the result, or FALSE. The attributes *   of this object are the table fields selected by the query. */function db_fetch_object($result) {  if ($result) {    return pg_fetch_object($result);  }}/** * Fetch one result row from the previous query as an array. * * @param $result *   A database query result resource, as returned from db_query(). * @return *   An associative array representing the next row of the result, or FALSE. *   The keys of this object are the names of the table fields selected by the *   query, and the values are the field values for this result row. */function db_fetch_array($result) {  if ($result) {    return pg_fetch_assoc($result);  }}/** * Return an individual result field from the previous query. * * Only use this function if exactly one field is being selected; otherwise, * use db_fetch_object() or db_fetch_array(). * * @param $result *   A database query result resource, as returned from db_query(). * @return *   The resulting field or FALSE. */function db_result($result) {  if ($result && pg_num_rows($result) > 0) {    $array = pg_fetch_row($result);    return $array[0];  }  return FALSE;}/** * Determine whether the previous query caused an error. */function db_error() {  global $active_db;  return pg_last_error($active_db);}/** * Returns the last insert id. This function is thread safe. * * @param $table *   The name of the table you inserted into. * @param $field *   The name of the autoincrement field. */function db_last_insert_id($table, $field) {  return db_result(db_query("SELECT CURRVAL('{". db_escape_table($table) ."}_". db_escape_table($field) ."_seq')"));}/** * Determine the number of rows changed by the preceding query. */function db_affected_rows() {  global $last_result;  return empty($last_result) ? 0 : pg_affected_rows($last_result);}/** * Runs a limited-range query in the active database. * * Use this as a substitute for db_query() when a subset of the query * is to be returned. * User-supplied arguments to the query should be passed in as separate * parameters so that they can be properly escaped to avoid SQL injection * attacks. * * @param $query *   A string containing an SQL query. * @param ... *   A variable number of arguments which are substituted into the query *   using printf() syntax. Instead of a variable number of query arguments, *   you may also pass a single array containing the query arguments. *   Valid %-modifiers are: %s, %d, %f, %b (binary data, do not enclose *   in '') and %%. * *   NOTE: using this syntax will cast NULL and FALSE values to decimal 0, *   and TRUE values to decimal 1. * * @param $from *   The first result row to return. * @param $count *   The maximum number of result rows to return. * @return *   A database query result resource, or FALSE if the query was not executed *   correctly. */function db_query_range($query) {  $args = func_get_args();  $count = array_pop($args);  $from = array_pop($args);  array_shift($args);  $query = db_prefix_tables($query);  if (isset($args[0]) and is_array($args[0])) { // 'All arguments in one array' syntax    $args = $args[0];  }  _db_query_callback($args, TRUE);  $query = preg_replace_callback(DB_QUERY_REGEXP, '_db_query_callback', $query);  $query .= ' LIMIT '. (int)$count .' OFFSET '. (int)$from;  return _db_query($query);}/** * Runs a SELECT query and stores its results in a temporary table. * * Use this as a substitute for db_query() when the results need to stored * in a temporary table. Temporary tables exist for the duration of the page * request. * User-supplied arguments to the query should be passed in as separate parameters * so that they can be properly escaped to avoid SQL injection attacks. * * Note that if you need to know how many results were returned, you should do * a SELECT COUNT(*) on the temporary table afterwards. db_affected_rows() does * not give consistent result across different database types in this case. * * @param $query *   A string containing a normal SELECT SQL query. * @param ... *   A variable number of arguments which are substituted into the query *   using printf() syntax. The query arguments can be enclosed in one *   array instead. *   Valid %-modifiers are: %s, %d, %f, %b (binary data, do not enclose *   in '') and %%. * *   NOTE: using this syntax will cast NULL and FALSE values to decimal 0, *   and TRUE values to decimal 1. * * @param $table *   The name of the temporary table to select into. This name will not be *   prefixed as there is no risk of collision. * @return *   A database query result resource, or FALSE if the query was not executed *   correctly. */function db_query_temporary($query) {  $args = func_get_args();  $tablename = array_pop($args);  array_shift($args);  $query = preg_replace('/^SELECT/i', 'CREATE TEMPORARY TABLE '. $tablename .' AS SELECT', db_prefix_tables($query));  if (isset($args[0]) and is_array($args[0])) { // 'All arguments in one array' syntax    $args = $args[0];  }  _db_query_callback($args, TRUE);  $query = preg_replace_callback(DB_QUERY_REGEXP, '_db_query_callback', $query);  return _db_query($query);}/** * Returns a properly formatted Binary Large OBject value. * In case of PostgreSQL encodes data for insert into bytea field. * * @param $data *   Data to encode. * @return *  Encoded data. */function db_encode_blob($data) {  return "'". pg_escape_bytea($data) ."'";}/** * Returns text from a Binary Large OBject value. * In case of PostgreSQL decodes data after select from bytea field. * * @param $data *   Data to decode. * @return *  Decoded data. */function db_decode_blob($data) {  return pg_unescape_bytea($data);}/** * Prepare user input for use in a database query, preventing SQL injection attacks. * Note: This function requires PostgreSQL 7.2 or later. */function db_escape_string($text) {  return pg_escape_string($text);}/** * Lock a table. * This function automatically starts a transaction. */function db_lock_table($table) {  db_query('BEGIN; LOCK TABLE {'. db_escape_table($table) .'} IN EXCLUSIVE MODE');}/** * Unlock all locked tables. * This function automatically commits a transaction. */function db_unlock_tables() {  db_query('COMMIT');}/** * Check if a table exists. */function db_table_exists($table) {  return (bool) db_result(db_query("SELECT COUNT(*) FROM pg_class WHERE relname = '{". db_escape_table($table) ."}'"));}/** * Check if a column exists in the given table. */function db_column_exists($table, $column) {  return (bool) db_result(db_query("SELECT COUNT(pg_attribute.attname) FROM pg_class, pg_attribute WHERE pg_attribute.attrelid = pg_class.oid AND pg_class.relname = '{". db_escape_table($table) ."}' AND attname = '". db_escape_table($column) ."'"));}/** * Verify if the database is set up correctly. */function db_check_setup() {  $t = get_t();  $encoding = db_result(db_query('SHOW server_encoding'));  if (!in_array(strtolower($encoding), array('unicode', 'utf8'))) {    drupal_set_message($t('Your PostgreSQL database is set up with the wrong character encoding (%encoding). It is possible it will not work as expected. It is advised to recreate it with UTF-8/Unicode encoding. More information can be found in the <a href="@url">PostgreSQL documentation</a>.', array('%encoding' => $encoding, '@url' => 'http://www.postgresql.org/docs/7.4/interactive/multibyte.html')), 'status');  }}/** * @} End of "ingroup database". *//** * @ingroup schemaapi * @{ *//** * This maps a generic data type in combination with its data size * to the engine-specific data type. */function db_type_map() {  // Put :normal last so it gets preserved by array_flip.  This makes  // it much easier for modules (such as schema.module) to map  // database types back into schema types.  $map = array(    'varchar:normal' => 'varchar',    'char:normal' => 'character',    'text:tiny' => 'text',    'text:small' => 'text',    'text:medium' => 'text',    'text:big' => 'text',    'text:normal' => 'text',    'int:tiny' => 'smallint',    'int:small' => 'smallint',    'int:medium' => 'int',    'int:big' => 'bigint',    'int:normal' => 'int',    'float:tiny' => 'real',    'float:small' => 'real',    'float:medium' => 'real',    'float:big' => 'double precision',    'float:normal' => 'real',    'numeric:normal' => 'numeric',    'blob:big' => 'bytea',    'blob:normal' => 'bytea',    'datetime:normal' => 'timestamp without time zone',    'serial:tiny' => 'serial',    'serial:small' => 'serial',    'serial:medium' => 'serial',    'serial:big' => 'bigserial',    'serial:normal' => 'serial',  );  return $map;}/** * Generate SQL to create a new table from a Drupal schema definition. * * @param $name *   The name of the table to create. * @param $table *   A Schema API table definition array. * @return *   An array of SQL statements to create the table. */function db_create_table_sql($name, $table) {  $sql_fields = array();  foreach ($table['fields'] as $field_name => $field) {    $sql_fields[] = _db_create_field_sql($field_name, _db_process_field($field));  }  $sql_keys = array();  if (isset($table['primary key']) && is_array($table['primary key'])) {    $sql_keys[] = 'PRIMARY KEY ('. implode(', ', $table['primary key']) .')';  }  if (isset($table['unique keys']) && is_array($table['unique keys'])) {    foreach ($table['unique keys'] as $key_name => $key) {      $sql_keys[] = 'CONSTRAINT {'. $name .'}_'. $key_name .'_key UNIQUE ('. implode(', ', $key) .')';    }  }  $sql = "CREATE TABLE {". $name ."} (\n\t";  $sql .= implode(",\n\t", $sql_fields);  if (count($sql_keys) > 0) {    $sql .= ",\n\t";  }  $sql .= implode(",\n\t", $sql_keys);  $sql .= "\n)";  $statements[] = $sql;  if (isset($table['indexes']) && is_array($table['indexes'])) {    foreach ($table['indexes'] as $key_name => $key) {      $statements[] = _db_create_index_sql($name, $key_name, $key);    }  }  return $statements;}function _db_create_index_sql($table, $name, $fields) {  $query = 'CREATE INDEX {'. $table .'}_'. $name .'_idx ON {'. $table .'} (';  $query .= _db_create_key_sql($fields) .')';  return $query;}function _db_create_key_sql($fields) {  $ret = array();  foreach ($fields as $field) {    if (is_array($field)) {      $ret[] = 'substr('. $field[0] .', 1, '. $field[1] .')';    }    else {      $ret[] = $field;    }  }  return implode(', ', $ret);}function _db_create_keys(&$ret, $table, $new_keys) {  if (isset($new_keys['primary key'])) {    db_add_primary_key($ret, $table, $new_keys['primary key']);  }  if (isset($new_keys['unique keys'])) {    foreach ($new_keys['unique keys'] as $name => $fields) {      db_add_unique_key($ret, $table, $name, $fields);    }  }  if (isset($new_keys['indexes'])) {    foreach ($new_keys['indexes'] as $name => $fields) {      db_add_index($ret, $table, $name, $fields);    }  }}/** * Set database-engine specific properties for a field. * * @param $field *   A field description array, as specified in the schema documentation. */function _db_process_field($field) {  if (!isset($field['size'])) {    $field['size'] = 'normal';  }  // Set the correct database-engine specific datatype.  if (!isset($field['pgsql_type'])) {    $map = db_type_map();    $field['pgsql_type'] = $map[$field['type'] .':'. $field['size']];  }  if ($field['type'] == 'serial') {    unset($field['not null']);  }  return $field;}/** * Create an SQL string for a field to be used in table creation or alteration. * * Before passing a field out of a schema definition into this function it has * to be processed by _db_process_field(). * * @param $name *    Name of the field. * @param $spec *    The field specification, as per the schema data structure format. */function _db_create_field_sql($name, $spec) {  $sql = $name .' '. $spec['pgsql_type'];  if ($spec['type'] == 'serial') {    unset($spec['not null']);  }  if (!empty($spec['unsigned'])) {    if ($spec['type'] == 'serial') {      $sql .= " CHECK ($name >= 0)";    }    else {      $sql .= '_unsigned';    }  }  if (in_array($spec['type'], array('varchar', 'char', 'text')) && isset($spec['length'])) {    $sql .= '('. $spec['length'] .')';  }  elseif (isset($spec['precision']) && isset($spec['scale'])) {    $sql .= '('. $spec['precision'] .', '. $spec['scale'] .')';  }  if (isset($spec['not null']) && $spec['not null']) {    $sql .= ' NOT NULL';  }  if (isset($spec['default'])) {    $default = is_string($spec['default']) ? "'". $spec['default'] ."'" : $spec['default'];    $sql .= " default $default";  }  return $sql;}/** * Rename a table. * * @param $ret *   Array to which query results will be added. * @param $table *   The table to be renamed. * @param $new_name *   The new name for the table. */function db_rename_table(&$ret, $table, $new_name) {  $ret[] = update_sql('ALTER TABLE {'. $table .'} RENAME TO {'. $new_name .'}');}/** * Drop a table. * * @param $ret *   Array to which query results will be added. * @param $table *   The table to be dropped. */function db_drop_table(&$ret, $table) {  $ret[] = update_sql('DROP TABLE {'. $table .'}');}/** * Add a new field to a table. * * @param $ret *   Array to which query results will be added. * @param $table *   Name of the table to be altered. * @param $field *   Name of the field to be added. * @param $spec *   The field specification array, as taken from a schema definition. *   The specification may also contain the key 'initial', the newly *   created field will be set to the value of the key in all rows. *   This is most useful for creating NOT NULL columns with no default *   value in existing tables. * @param $keys_new *   Optional keys and indexes specification to be created on the *   table along with adding the field. The format is the same as a *   table specification but without the 'fields' element.  If you are *   adding a type 'serial' field, you MUST specify at least one key *   or index including it in this array. @see db_change_field for more *   explanation why. */function db_add_field(&$ret, $table, $field, $spec, $new_keys = array()) {  $fixnull = FALSE;  if (!empty($spec['not null']) && !isset($spec['default'])) {    $fixnull = TRUE;    $spec['not null'] = FALSE;  }  $query = 'ALTER TABLE {'. $table .'} ADD COLUMN ';  $query .= _db_create_field_sql($field, _db_process_field($spec));  $ret[] = update_sql($query);  if (isset($spec['initial'])) {    // All this because update_sql does not support %-placeholders.    $sql = 'UPDATE {'. $table .'} SET '. $field .' = '. db_type_placeholder($spec['type']);    $result = db_query($sql, $spec['initial']);    $ret[] = array('success' => $result !== FALSE, 'query' => check_plain($sql .' ('. $spec['initial'] .')'));  }  if ($fixnull) {    $ret[] = update_sql("ALTER TABLE {". $table ."} ALTER $field SET NOT NULL");  }  if (isset($new_keys)) {    _db_create_keys($ret, $table, $new_keys);  }}/** * Drop a field. * * @param $ret *   Array to which query results will be added. * @param $table *   The table to be altered. * @param $field *   The field to be dropped. */function db_drop_field(&$ret, $table, $field) {  $ret[] = update_sql('ALTER TABLE {'. $table .'} DROP COLUMN '. $field);}/** * Set the default value for a field. * * @param $ret *   Array to which query results will be added. * @param $table *   The table to be altered. * @param $field *   The field to be altered. * @param $default *   Default value to be set. NULL for 'default NULL'. */function db_field_set_default(&$ret, $table, $field, $default) {  if ($default == NULL) {    $default = 'NULL';  }  else {    $default = is_string($default) ? "'$default'" : $default;  }  $ret[] = update_sql('ALTER TABLE {'. $table .'} ALTER COLUMN '. $field .' SET DEFAULT '. $default);}/** * Set a field to have no default value. * * @param $ret *   Array to which query results will be added. * @param $table *   The table to be altered. * @param $field *   The field to be altered. */function db_field_set_no_default(&$ret, $table, $field) {  $ret[] = update_sql('ALTER TABLE {'. $table .'} ALTER COLUMN '. $field .' DROP DEFAULT');}/** * Add a primary key. * * @param $ret *   Array to which query results will be added. * @param $table *   The table to be altered. * @param $fields *   Fields for the primary key. */function db_add_primary_key(&$ret, $table, $fields) {  $ret[] = update_sql('ALTER TABLE {'. $table .'} ADD PRIMARY KEY ('.    implode(',', $fields) .')');}/** * Drop the primary key. * * @param $ret *   Array to which query results will be added. * @param $table *   The table to be altered. */function db_drop_primary_key(&$ret, $table) {  $ret[] = update_sql('ALTER TABLE {'. $table .'} DROP CONSTRAINT {'. $table .'}_pkey');}/** * Add a unique key. * * @param $ret *   Array to which query results will be added. * @param $table *   The table to be altered. * @param $name *   The name of the key. * @param $fields *   An array of field names. */function db_add_unique_key(&$ret, $table, $name, $fields) {  $name = '{'. $table .'}_'. $name .'_key';  $ret[] = update_sql('ALTER TABLE {'. $table .'} ADD CONSTRAINT '.    $name .' UNIQUE ('. implode(',', $fields) .')');}/** * Drop a unique key. * * @param $ret *   Array to which query results will be added. * @param $table *   The table to be altered. * @param $name *   The name of the key. */function db_drop_unique_key(&$ret, $table, $name) {  $name = '{'. $table .'}_'. $name .'_key';  $ret[] = update_sql('ALTER TABLE {'. $table .'} DROP CONSTRAINT '. $name);}/** * Add an index. * * @param $ret *   Array to which query results will be added. * @param $table *   The table to be altered. * @param $name *   The name of the index. * @param $fields *   An array of field names. */function db_add_index(&$ret, $table, $name, $fields) {  $ret[] = update_sql(_db_create_index_sql($table, $name, $fields));}/** * Drop an index. * * @param $ret *   Array to which query results will be added. * @param $table *   The table to be altered. * @param $name *   The name of the index. */function db_drop_index(&$ret, $table, $name) {  $name = '{'. $table .'}_'. $name .'_idx';  $ret[] = update_sql('DROP INDEX '. $name);}/** * Change a field definition. * * IMPORTANT NOTE: To maintain database portability, you have to explicitly * recreate all indices and primary keys that are using the changed field. * * That means that you have to drop all affected keys and indexes with * db_drop_{primary_key,unique_key,index}() before calling db_change_field(). * To recreate the keys and indices, pass the key definitions as the * optional $new_keys argument directly to db_change_field(). * * For example, suppose you have: * @code * $schema['foo'] = array( *   'fields' => array( *     'bar' => array('type' => 'int', 'not null' => TRUE) *   ), *   'primary key' => array('bar') * ); * @endcode * and you want to change foo.bar to be type serial, leaving it as the * primary key.  The correct sequence is: * @code * db_drop_primary_key($ret, 'foo'); * db_change_field($ret, 'foo', 'bar', 'bar', *   array('type' => 'serial', 'not null' => TRUE), *   array('primary key' => array('bar'))); * @endcode * * The reasons for this are due to the different database engines: * * On PostgreSQL, changing a field definition involves adding a new field * and dropping an old one which* causes any indices, primary keys and * sequences (from serial-type fields) that use the changed field to be dropped. * * On MySQL, all type 'serial' fields must be part of at least one key * or index as soon as they are created.  You cannot use * db_add_{primary_key,unique_key,index}() for this purpose because * the ALTER TABLE command will fail to add the column without a key * or index specification.  The solution is to use the optional * $new_keys argument to create the key or index at the same time as * field. * * You could use db_add_{primary_key,unique_key,index}() in all cases * unless you are converting a field to be type serial. You can use * the $new_keys argument in all cases. * * @param $ret *   Array to which query results will be added. * @param $table *   Name of the table. * @param $field *   Name of the field to change. * @param $field_new *   New name for the field (set to the same as $field if you don't want to change the name). * @param $spec *   The field specification for the new field. * @param $new_keys *   Optional keys and indexes specification to be created on the *   table along with changing the field. The format is the same as a *   table specification but without the 'fields' element. */function db_change_field(&$ret, $table, $field, $field_new, $spec, $new_keys = array()) {  $ret[] = update_sql('ALTER TABLE {'. $table .'} RENAME "'. $field .'" TO "'. $field .'_old"');  $not_null = isset($spec['not null']) ? $spec['not null'] : FALSE;  unset($spec['not null']);  if (!array_key_exists('size', $spec)) {    $spec['size'] = 'normal';  }  db_add_field($ret, $table, "$field_new", $spec);  // We need to type cast the new column to best transfer the data  // db_type_map will return possiblities that are not 'cast-able'  // such as serial - they must be made 'int' instead.  $map =  db_type_map();  $typecast = $map[$spec['type'] .':'. $spec['size']];  if (in_array($typecast, array('serial', 'bigserial', 'numeric'))) {    $typecast = 'int';  }  $ret[] = update_sql('UPDATE {'. $table .'} SET '. $field_new .' = CAST('. $field .'_old AS '. $typecast .')');  if ($not_null) {    $ret[] = update_sql("ALTER TABLE {". $table ."} ALTER $field_new SET NOT NULL");  }  db_drop_field($ret, $table, $field .'_old');  if (isset($new_keys)) {    _db_create_keys($ret, $table, $new_keys);  }}/** * @} End of "ingroup schemaapi". */
<?php// $Id$/** * @file * Handles incoming requests to fire off regularly-scheduled tasks (cron jobs). */include_once './includes/bootstrap.inc';drupal_bootstrap(DRUPAL_BOOTSTRAP_FULL);drupal_cron_run();
<?php// $Id$/** * @file * Page callback file for the blog module. *//** * Menu callback; displays a Drupal page containing recent blog entries of a given user. */function blog_page_user($account) {  global $user;  drupal_set_title($title = t("@name's blog", array('@name' => $account->name)));  $items = array();  if (($account->uid == $user->uid) && user_access('create blog entries')) {    $items[] = l(t('Post new blog entry.'), "node/add/blog");  }  else if ($account->uid == $user->uid) {    $items[] = t('You are not allowed to post a new blog entry.');  }  $output = theme('item_list', $items);  $result = pager_query(db_rewrite_sql("SELECT n.nid, n.sticky, n.created FROM {node} n WHERE n.type = 'blog' AND n.uid = %d AND n.status = 1 ORDER BY n.sticky DESC, n.created DESC"), variable_get('default_nodes_main', 10), 0, NULL, $account->uid);  $has_posts = FALSE;    while ($node = db_fetch_object($result)) {    $output .= node_view(node_load($node->nid), 1);    $has_posts = TRUE;  }    if ($has_posts) {    $output .= theme('pager', NULL, variable_get('default_nodes_main', 10));  }  else {    if ($account->uid == $user->uid) {      drupal_set_message(t('You have not created any blog entries.'));    }    else {      drupal_set_message(t('!author has not created any blog entries.', array('!author' => theme('username', $account))));    }  }  drupal_add_feed(url('blog/'. $account->uid .'/feed'), t('RSS - !title', array('!title' => $title)));  return $output;}/** * Menu callback; displays a Drupal page containing recent blog entries of all users. */function blog_page_last() {  global $user;  $output = '';  $items = array();  if (user_access('create blog entries')) {    $items[] = l(t('Create new blog entry.'), "node/add/blog");  }  $output = theme('item_list', $items);  $result = pager_query(db_rewrite_sql("SELECT n.nid, n.created FROM {node} n WHERE n.type = 'blog' AND n.status = 1 ORDER BY n.sticky DESC, n.created DESC"), variable_get('default_nodes_main', 10));  $has_posts = FALSE;  while ($node = db_fetch_object($result)) {    $output .= node_view(node_load($node->nid), 1);    $has_posts = TRUE;  }    if ($has_posts) {    $output .= theme('pager', NULL, variable_get('default_nodes_main', 10));  }  else {    drupal_set_message(t('No blog entries have been created.'));  }  drupal_add_feed(url('blog/feed'), t('RSS - blogs'));  return $output;}/** * Menu callback; displays an RSS feed containing recent blog entries of a given user. */function blog_feed_user($account) {  $result = db_query_range(db_rewrite_sql("SELECT n.nid, n.created FROM {node} n  WHERE n.type = 'blog' AND n.uid = %d AND n.status = 1 ORDER BY n.created DESC"), $account->uid, 0, variable_get('feed_default_items', 10));  $channel['title'] = t("!name's blog", array('!name' => $account->name));  $channel['link'] = url('blog/'. $account->uid, array('absolute' => TRUE));  $items = array();  while ($row = db_fetch_object($result)) {    $items[] = $row->nid;  }  node_feed($items, $channel);}/** * Menu callback; displays an RSS feed containing recent blog entries of all users. */function blog_feed_last() {  $result = db_query_range(db_rewrite_sql("SELECT n.nid, n.created FROM {node} n WHERE n.type = 'blog' AND n.status = 1 ORDER BY n.created DESC"), 0, variable_get('feed_default_items', 10));  $channel['title'] = t('!site_name blogs', array('!site_name' => variable_get('site_name', 'Drupal')));  $channel['link'] = url('blog', array('absolute' => TRUE));  $items = array();  while ($row = db_fetch_object($result)) {    $items[] = $row->nid;  }  node_feed($items, $channel);}
