<?php// $Id$$info = array(  // Pre-defined color schemes.  'schemes' => array(    '#0072b9,#027ac6,#2385c2,#5ab5ee,#494949' => t('Blue Lagoon (Default)'),    '#464849,#2f416f,#2a2b2d,#5d6779,#494949' => t('Ash'),    '#55c0e2,#000000,#085360,#007e94,#696969' => t('Aquamarine'),    '#d5b048,#6c420e,#331900,#971702,#494949' => t('Belgian Chocolate'),    '#3f3f3f,#336699,#6598cb,#6598cb,#000000' => t('Bluemarine'),    '#d0cb9a,#917803,#efde01,#e6fb2d,#494949' => t('Citrus Blast'),    '#0f005c,#434f8c,#4d91ff,#1a1575,#000000' => t('Cold Day'),    '#c9c497,#0c7a00,#03961e,#7be000,#494949' => t('Greenbeam'),    '#ffe23d,#a9290a,#fc6d1d,#a30f42,#494949' => t('Mediterrano'),    '#788597,#3f728d,#a9adbc,#d4d4d4,#707070' => t('Mercury'),    '#5b5fa9,#5b5faa,#0a2352,#9fa8d5,#494949' => t('Nocturnal'),    '#7db323,#6a9915,#b5d52a,#7db323,#191a19' => t('Olivia'),    '#12020b,#1b1a13,#f391c6,#f41063,#898080' => t('Pink Plastic'),    '#b7a0ba,#c70000,#a1443a,#f21107,#515d52' => t('Shiny Tomato'),    '#18583d,#1b5f42,#34775a,#52bf90,#2d2d2d' => t('Teal Top'),  ),  // Images to copy over.  'copy' => array(    'images/menu-collapsed.gif',    'images/menu-collapsed-rtl.gif',    'images/menu-expanded.gif',    'images/menu-leaf.gif',  ),  // CSS files (excluding @import) to rewrite with new color scheme.  'css' => array(    'style.css',  ),  // Coordinates of gradient (x, y, width, height).  'gradient' => array(0, 37, 760, 121),  // Color areas to fill (x, y, width, height).  'fill' => array(    'base' => array(0, 0, 760, 568),    'link' => array(107, 533, 41, 23),  ),  // Coordinates of all the theme slices (x, y, width, height)  // with their filename as used in the stylesheet.  'slices' => array(    'images/body.png'                      => array(0, 37, 1, 280),    'images/bg-bar.png'                    => array(202, 530, 76, 14),    'images/bg-bar-white.png'              => array(202, 506, 76, 14),    'images/bg-tab.png'                    => array(107, 533, 41, 23),    'images/bg-navigation.png'             => array(0, 0, 7, 37),    'images/bg-content-left.png'           => array(40, 117, 50, 352),    'images/bg-content-right.png'          => array(510, 117, 50, 352),    'images/bg-content.png'                => array(299, 117, 7, 200),    'images/bg-navigation-item.png'        => array(32, 37, 17, 12),    'images/bg-navigation-item-hover.png'  => array(54, 37, 17, 12),    'images/gradient-inner.png'            => array(646, 307, 112, 42),    'logo.png'                             => array(622, 51, 64, 73),    'screenshot.png'                       => array(0, 37, 400, 240),  ),  // Reference color used for blending. Matches the base.png's colors.  'blend_target' => '#ffffff',  // Preview files.  'preview_image' => 'color/preview.png',  'preview_css' => 'color/preview.css',  // Base file for image generation.  'base_image' => 'color/base.png',);
<?php// $Id$// MySQLi specific install functions/** * Check if MySQLi is available. * * @return *  TRUE/FALSE */function mysqli_is_available() {  return function_exists('mysqli_connect');}/** * Check if we can connect to MySQL. * * @return *  TRUE/FALSE */function drupal_test_mysqli($url, &$success) {  if (!mysqli_is_available()) {    drupal_set_message(st('PHP MySQLi support not enabled.'), 'error');    return FALSE;  }  $url = parse_url($url);  // Decode url-encoded information in the db connection string.  $url['user'] = urldecode($url['user']);  $url['pass'] = isset($url['pass']) ? urldecode($url['pass']) : '';  $url['host'] = urldecode($url['host']);  $url['path'] = urldecode($url['path']);  $connection = mysqli_init();  @mysqli_real_connect($connection, $url['host'], $url['user'], $url['pass'], substr($url['path'], 1), $url['port'], NULL, MYSQLI_CLIENT_FOUND_ROWS);  if (mysqli_connect_errno() >= 2000 || mysqli_connect_errno() == 1045) {    drupal_set_message(st('Failed to connect to your MySQL database server. MySQL reports the following message: %error.<ul><li>Are you sure you have the correct username and password?</li><li>Are you sure that you have typed the correct database hostname?</li><li>Are you sure that the database server is running?</li></ul>For more help, see the <a href="http://drupal.org/node/258">Installation and upgrading handbook</a>. If you are unsure what these terms mean you should probably contact your hosting provider.', array('%error' => mysqli_connect_error())), 'error');    return FALSE;  }  // Test selecting the database.  if (mysqli_connect_errno() > 0) {    drupal_set_message(st('Failed to select your database on your MySQL database server, which means the connection username and password are valid, but there is a problem accessing your data. MySQL reports the following message: %error.<ul><li>Are you sure you have the correct database name?</li><li>Are you sure the database exists?</li><li>Are you sure the username has permission to access the database?</li></ul>For more help, see the <a href="http://drupal.org/node/258">Installation and upgrading handbook</a>. If you are unsure what these terms mean you should probably contact your hosting provider.', array('%error' => mysqli_connect_error())), 'error');    return FALSE;  }  $success = array('CONNECT');  // Test CREATE.  $query = 'CREATE TABLE drupal_install_test (id int NULL)';  $result = mysqli_query($connection, $query);  if ($error = mysqli_error($connection)) {    drupal_set_message(st('Failed to create a test table on your MySQL database server with the command %query. MySQL reports the following message: %error.<ul><li>Are you sure the configured username has the necessary MySQL permissions to create tables in the database?</li></ul>For more help, see the <a href="http://drupal.org/node/258">Installation and upgrading handbook</a>. If you are unsure what these terms mean you should probably contact your hosting provider.', array('%query' => $query, '%error' => $error)), 'error');    return FALSE;  }  $err = FALSE;  $success[] = 'SELECT';  $success[] = 'CREATE';  // Test INSERT.  $query = 'INSERT INTO drupal_install_test (id) VALUES (1)';  $result = mysqli_query($connection, $query);  if ($error = mysqli_error($connection)) {    drupal_set_message(st('Failed to insert a value into a test table on your MySQL database server. We tried inserting a value with the command %query and MySQL reported the following error: %error.', array('%query' => $query, '%error' => $error)), 'error');    $err = TRUE;  }  else {    $success[] = 'INSERT';  }  // Test UPDATE.  $query = 'UPDATE drupal_install_test SET id = 2';  $result = mysqli_query($connection, $query);  if ($error = mysqli_error($connection)) {    drupal_set_message(st('Failed to update a value in a test table on your MySQL database server. We tried updating a value with the command %query and MySQL reported the following error: %error.', array('%query' => $query, '%error' => $error)), 'error');    $err = TRUE;  }  else {    $success[] = 'UPDATE';  }  // Test DELETE.  $query = 'DELETE FROM drupal_install_test';  $result = mysqli_query($connection, $query);  if ($error = mysqli_error($connection)) {    drupal_set_message(st('Failed to delete a value from a test table on your MySQL database server. We tried deleting a value with the command %query and MySQL reported the following error: %error.', array('%query' => $query, '%error' => $error)), 'error');    $err = TRUE;  }  else {    $success[] = 'DELETE';  }  // Test DROP.  $query = 'DROP TABLE drupal_install_test';  $result = mysqli_query($connection, $query);  if ($error = mysqli_error($connection)) {    drupal_set_message(st('Failed to drop a test table from your MySQL database server. We tried dropping a table with the command %query and MySQL reported the following error %error.', array('%query' => $query, '%error' => $error)), 'error');    $err = TRUE;  }  else {    $success[] = 'DROP';  }  if ($err) {    return FALSE;  }  mysqli_close($connection);  return TRUE;}
<?php// $Id$/** * @file * User page callbacks for the aggregator module. *//** * Menu callback; displays the most recent items gathered from any feed. * * @return *   The items HTML. */function aggregator_page_last() {  drupal_add_feed(url('aggregator/rss'), variable_get('site_name', 'Drupal') .' '. t('aggregator'));  $items = aggregator_feed_items_load('SELECT i.*, f.title AS ftitle, f.link AS flink FROM {aggregator_item} i INNER JOIN {aggregator_feed} f ON i.fid = f.fid ORDER BY i.timestamp DESC, i.iid DESC');  return _aggregator_page_list($items, arg(1));}/** * Menu callback; displays all the items captured from a particular feed. * * If there are two arguments then this function is the categorize form. * * @param $arg1 *   If there are two arguments then $arg1 is $form_state. Otherwise, $arg1 is $feed. * @param $arg2 *   If there are two arguments then $arg2 is feed. * @return *   The items HTML. */function aggregator_page_source($arg1, $arg2 = NULL) {  // If there are two arguments then this function is the categorize form, and  // $arg1 is $form_state and $arg2 is $feed. Otherwise, $arg1 is $feed.  $feed = is_array($arg2) ? $arg2 : $arg1;  $feed = (object)$feed;  drupal_set_title(check_plain($feed->title));  $feed_source = theme('aggregator_feed_source', $feed);  // It is safe to include the fid in the query because it's loaded from the  // database by aggregator_feed_load.  $items = aggregator_feed_items_load('SELECT * FROM {aggregator_item} WHERE fid = '. $feed->fid .' ORDER BY timestamp DESC, iid DESC');  return _aggregator_page_list($items, arg(3), $feed_source);}/** * Menu callback; displays all the items aggregated in a particular category. * * If there are two arguments then this function is called as a form. * * @param $arg1 *   If there are two arguments then $arg1 is $form_state. Otherwise, $arg1 is $category. * @param $arg2 *   If there are two arguments then $arg2 is $category. * @return *   The items HTML. */function aggregator_page_category($arg1, $arg2 = NULL) {  // If there are two arguments then we are called as a form, $arg1 is  // $form_state and $arg2 is $category. Otherwise, $arg1 is $category.  $category = is_array($arg2) ? $arg2 : $arg1;  drupal_add_feed(url('aggregator/rss/'. $category['cid']), variable_get('site_name', 'Drupal') .' '. t('aggregator - @title', array('@title' => $category['title'])));  // It is safe to include the cid in the query because it's loaded from the  // database by aggregator_category_load.  $items = aggregator_feed_items_load('SELECT i.*, f.title AS ftitle, f.link AS flink FROM {aggregator_category_item} c LEFT JOIN {aggregator_item} i ON c.iid = i.iid LEFT JOIN {aggregator_feed} f ON i.fid = f.fid WHERE cid = '. $category['cid'] .' ORDER BY timestamp DESC, i.iid DESC');  return _aggregator_page_list($items, arg(3));}/** * Load feed items by passing a SQL query. * * @param $sql *   The query to be executed. * @return *   An array of the feed items. */function aggregator_feed_items_load($sql) {  $items = array();  if (isset($sql)) {    $result = pager_query($sql, 20);    while ($item = db_fetch_object($result)) {      $result_category = db_query('SELECT c.title, c.cid FROM {aggregator_category_item} ci LEFT JOIN {aggregator_category} c ON ci.cid = c.cid WHERE ci.iid = %d ORDER BY c.title', $item->iid);      $item->categories = array();      while ($item_categories = db_fetch_object($result_category)) {        $item->categories[] = $item_categories;      }      $items[$item->iid] = $item;    }  }  return $items;}/** * Prints an aggregator page listing a number of feed items. * * Various menu callbacks use this function to print their feeds. * * @param $items *   The items to be listed. * @param $op *   Which form should be added to the items. Only 'categorize' is now recognized. * @param $feed_source *   The feed source URL. * @return *   The items HTML. */function _aggregator_page_list($items, $op, $feed_source = '') {  if (user_access('administer news feeds') && ($op == 'categorize')) {    // Get form data.    $output = aggregator_categorize_items($items, $feed_source);  }  else {    // Assemble themed output.    $output = $feed_source;    foreach ($items as $item) {      $output .= theme('aggregator_item', $item);    }    $output = theme('aggregator_wrapper', $output);  }  return $output;}/** * Form builder; build the page list form. * * @param $items *   An array of the feed items. * @param $feed_source *   The feed source URL. * @return *   The form structure. * @ingroup forms * @see aggregator_categorize_items_validate() * @see aggregator_categorize_items_submit() */function aggregator_categorize_items($items, $feed_source = '') {  $form['#submit'][] = 'aggregator_categorize_items_submit';  $form['#validate'][] = 'aggregator_categorize_items_validate';  $form['#theme'] = 'aggregator_categorize_items';  $form['feed_source'] = array('#value' => $feed_source);  $categories = array();  $done = FALSE;  $form['items'] = array();  $form['categories'] = array('#tree' => TRUE);  foreach ($items as $item) {    $form['items'][$item->iid] = array('#value' => theme('aggregator_item', $item));    $form['categories'][$item->iid] = array();    $categories_result = db_query('SELECT c.cid, c.title, ci.iid FROM {aggregator_category} c LEFT JOIN {aggregator_category_item} ci ON c.cid = ci.cid AND ci.iid = %d', $item->iid);    $selected = array();    while ($category = db_fetch_object($categories_result)) {      if (!$done) {        $categories[$category->cid] = check_plain($category->title);      }      if ($category->iid) {        $selected[] = $category->cid;      }    }    $done = TRUE;    $form['categories'][$item->iid] = array(      '#type' => variable_get('aggregator_category_selector', 'checkboxes'),      '#default_value' => $selected,      '#options' => $categories,      '#size' => 10,      '#multiple' => TRUE    );  }  $form['submit'] = array('#type' => 'submit', '#value' => t('Save categories'));  return $form;}/** * Validate aggregator_categorize_items form submissions. */function aggregator_categorize_items_validate($form, &$form_state) {  if (!user_access('administer news feeds')) {    form_error($form, t('You are not allowed to categorize this feed item.'));  }}/** * Process aggregator_categorize_items form submissions. */function aggregator_categorize_items_submit($form, &$form_state) {  if (!empty($form_state['values']['categories'])) {    foreach ($form_state['values']['categories'] as $iid => $selection) {      db_query('DELETE FROM {aggregator_category_item} WHERE iid = %d', $iid);      foreach ($selection as $cid) {        if ($cid) {          db_query('INSERT INTO {aggregator_category_item} (cid, iid) VALUES (%d, %d)', $cid, $iid);        }      }    }  }  drupal_set_message(t('The categories have been saved.'));}/** * Theme the page list form for assigning categories. * * @param $form *   An associative array containing the structure of the form. * @return *   The output HTML. * @ingroup themeable */function theme_aggregator_categorize_items($form) {  $output = drupal_render($form['feed_source']);  $rows = array();  if ($form['items']) {    foreach (element_children($form['items']) as $key) {      if (is_array($form['items'][$key])) {        $rows[] = array(          drupal_render($form['items'][$key]),          array('data' => drupal_render($form['categories'][$key]), 'class' => 'categorize-item'),        );      }    }  }  $output .= theme('table', array('', t('Categorize')), $rows);  $output .= drupal_render($form['submit']);  $output .= drupal_render($form);  return theme('aggregator_wrapper', $output);}/** * Process variables for aggregator-wrapper.tpl.php. * * @see aggregator-wrapper.tpl.php */function template_preprocess_aggregator_wrapper(&$variables) {  $variables['pager'] = theme('pager', NULL, 20, 0);}/** * Process variables for aggregator-item.tpl.php. * * @see aggregator-item.tpl.php */function template_preprocess_aggregator_item(&$variables) {  $item = $variables['item'];  $variables['feed_url'] = check_url($item->link);  $variables['feed_title'] = check_plain($item->title);  $variables['content'] = aggregator_filter_xss($item->description);  $variables['source_url'] = '';  $variables['source_title'] = '';  if (isset($item->ftitle) && isset($item->fid)) {    $variables['source_url'] = url("aggregator/sources/$item->fid");    $variables['source_title'] = check_plain($item->ftitle);  }  if (date('Ymd', $item->timestamp) == date('Ymd')) {    $variables['source_date'] = t('%ago ago', array('%ago' => format_interval(time() - $item->timestamp)));  }  else {    $variables['source_date'] = format_date($item->timestamp, 'custom', variable_get('date_format_medium', 'D, m/d/Y - H:i'));  }  $variables['categories'] = array();  foreach ($item->categories as $category) {    $variables['categories'][$category->cid] = l($category->title, 'aggregator/categories/'. $category->cid);  }}/** * Menu callback; displays all the feeds used by the aggregator. */function aggregator_page_sources() {  $result = db_query('SELECT f.fid, f.title, f.description, f.image, MAX(i.timestamp) AS last FROM {aggregator_feed} f LEFT JOIN {aggregator_item} i ON f.fid = i.fid GROUP BY f.fid, f.title, f.description, f.image ORDER BY last DESC, f.title');  $output = '';  while ($feed = db_fetch_object($result)) {    // Most recent items:    $summary_items = array();    if (variable_get('aggregator_summary_items', 3)) {      $items = db_query_range('SELECT i.title, i.timestamp, i.link FROM {aggregator_item} i WHERE i.fid = %d ORDER BY i.timestamp DESC', $feed->fid, 0, variable_get('aggregator_summary_items', 3));      while ($item = db_fetch_object($items)) {        $summary_items[] = theme('aggregator_summary_item', $item);      }    }    $feed->url = url('aggregator/sources/'. $feed->fid);    $output .= theme('aggregator_summary_items', $summary_items, $feed);  }  $output .= theme('feed_icon', url('aggregator/opml'), t('OPML feed'));  return theme('aggregator_wrapper', $output);}/** * Menu callback; displays all the categories used by the aggregator. */function aggregator_page_categories() {  $result = db_query('SELECT c.cid, c.title, c.description FROM {aggregator_category} c LEFT JOIN {aggregator_category_item} ci ON c.cid = ci.cid LEFT JOIN {aggregator_item} i ON ci.iid = i.iid GROUP BY c.cid, c.title, c.description');  $output = '';  while ($category = db_fetch_object($result)) {    if (variable_get('aggregator_summary_items', 3)) {      $summary_items = array();      $items = db_query_range('SELECT i.title, i.timestamp, i.link, f.title as feed_title, f.link as feed_link FROM {aggregator_category_item} ci LEFT JOIN {aggregator_item} i ON i.iid = ci.iid LEFT JOIN {aggregator_feed} f ON i.fid = f.fid WHERE ci.cid = %d ORDER BY i.timestamp DESC', $category->cid, 0, variable_get('aggregator_summary_items', 3));      while ($item = db_fetch_object($items)) {        $summary_items[] = theme('aggregator_summary_item', $item);      }    }    $category->url = url('aggregator/categories/'. $category->cid);    $output .= theme('aggregator_summary_items', $summary_items, $category);  }  return theme('aggregator_wrapper', $output);}/** * Menu callback; generate an RSS 0.92 feed of aggregator items or categories. */function aggregator_page_rss() {  $result = NULL;  // arg(2) is the passed cid, only select for that category  if (arg(2)) {    $category = db_fetch_object(db_query('SELECT cid, title FROM {aggregator_category} WHERE cid = %d', arg(2)));    $sql = 'SELECT i.*, f.title AS ftitle, f.link AS flink FROM {aggregator_category_item} c LEFT JOIN {aggregator_item} i ON c.iid = i.iid LEFT JOIN {aggregator_feed} f ON i.fid = f.fid WHERE cid = %d ORDER BY timestamp DESC, i.iid DESC';    $result = db_query_range($sql, $category->cid, 0, variable_get('feed_default_items', 10));  }  // or, get the default aggregator items  else {    $category = NULL;    $sql = 'SELECT i.*, f.title AS ftitle, f.link AS flink FROM {aggregator_item} i INNER JOIN {aggregator_feed} f ON i.fid = f.fid ORDER BY i.timestamp DESC, i.iid DESC';    $result = db_query_range($sql, 0, variable_get('feed_default_items', 10));  }  $feeds = array();  while ($item = db_fetch_object($result)) {    $feeds[] = $item;  }  return theme('aggregator_page_rss', $feeds, $category);}/** * Theme the RSS output. * * @param $feeds *   An array of the feeds to theme. * @param $category *   A common category, if any, for all the feeds. * @ingroup themeable */function theme_aggregator_page_rss($feeds, $category = NULL) {  drupal_set_header('Content-Type: application/rss+xml; charset=utf-8');  $items = '';  $feed_length = variable_get('feed_item_length', 'teaser');  foreach ($feeds as $feed) {    switch ($feed_length) {      case 'teaser':        $teaser = node_teaser($feed->description);        if ($teaser != $feed->description) {          $teaser .= '<p><a href="'. check_url($feed->link) .'">'. t('read more') ."</a></p>\n";        }        $feed->description = $teaser;        break;      case 'title':        $feed->description = '';        break;    }    $items .= format_rss_item($feed->ftitle .': '. $feed->title, $feed->link, $feed->description, array('pubDate' => date('r', $feed->timestamp)));  }  $site_name = variable_get('site_name', 'Drupal');  $url = url((isset($category) ? 'aggregator/categories/'. $category->cid : 'aggregator'), array('absolute' => TRUE));  $description = isset($category) ? t('@site_name - aggregated feeds in category @title', array('@site_name' => $site_name, '@title' => $category->title)) : t('@site_name - aggregated feeds', array('@site_name' => $site_name));  $output = "<?xml version=\"1.0\" encoding=\"utf-8\"?>\n";  $output .= "<rss version=\"2.0\">\n";  $output .= format_rss_channel(t('@site_name aggregator', array('@site_name' => $site_name)), $url, $description, $items);  $output .= "</rss>\n";  print $output;}/** * Menu callback; generates an OPML representation of all feeds. * * @param $cid *   If set, feeds are exported only from a category with this ID. Otherwise, all feeds are exported. * @return *   The output XML. */function aggregator_page_opml($cid = NULL) {  if ($cid) {    $result = db_query('SELECT f.title, f.url FROM {aggregator_feed} f LEFT JOIN {aggregator_category_feed} c on f.fid = c.fid WHERE c.cid = %d ORDER BY title', $cid);  }  else {    $result = db_query('SELECT * FROM {aggregator_feed} ORDER BY title');  }  $feeds = array();  while ($item = db_fetch_object($result)) {    $feeds[] = $item;  }  return theme('aggregator_page_opml', $feeds);}/** * Theme the OPML feed output. * * @param $feeds *   An array of the feeds to theme. * @ingroup themeable */function theme_aggregator_page_opml($feeds) {  drupal_set_header('Content-Type: text/xml; charset=utf-8');  $output = "<?xml version=\"1.0\" encoding=\"utf-8\"?>\n";  $output .= "<opml version=\"1.1\">\n";  $output .= "<head>\n";  $output .= '<title>'. check_plain(variable_get('site_name', 'Drupal')) ."</title>\n";  $output .= '<dateModified>'. gmdate('r') ."</dateModified>\n";  $output .= "</head>\n";  $output .= "<body>\n";  foreach ($feeds as $feed) {    $output .= '<outline text="'. check_plain($feed->title) .'" xmlUrl="'. check_url($feed->url) ."\" />\n";  }  $output .= "</body>\n";  $output .= "</opml>\n";  print $output;}/** * Process variables for aggregator-summary-items.tpl.php. * * @see aggregator-summary-item.tpl.php */function template_preprocess_aggregator_summary_items(&$variables) {  $variables['title'] = check_plain($variables['source']->title);  $variables['summary_list'] = theme('item_list', $variables['summary_items']);  $variables['source_url'] = $variables['source']->url;}/** * Process variables for aggregator-summary-item.tpl.php. * * @see aggregator-summary-item.tpl.php */function template_preprocess_aggregator_summary_item(&$variables) {  $item = $variables['item'];  $variables['feed_url'] = check_url($item->link);  $variables['feed_title'] = check_plain($item->title);  $variables['feed_age'] = t('%age old', array('%age' => format_interval(time() - $item->timestamp)));  $variables['source_url'] = '';  $variables['source_title'] = '';  if (!empty($item->feed_link)) {    $variables['source_url'] = check_url($item->feed_link);    $variables['source_title'] = check_plain($item->feed_title);  }}/** * Process variables for aggregator-feed-source.tpl.php. * * @see aggregator-feed-source.tpl.php */function template_preprocess_aggregator_feed_source(&$variables) {  $feed = $variables['feed'];  $variables['source_icon'] = theme('feed_icon', $feed->url, t('!title feed', array('!title' => $feed->title)));  $variables['source_image'] = $feed->image;  $variables['source_description'] = aggregator_filter_xss($feed->description);  $variables['source_url'] = check_url(url($feed->link, array('absolute' => TRUE)));  if ($feed->checked) {    $variables['last_checked'] = t('@time ago', array('@time' => format_interval(time() - $feed->checked)));  }  else {    $variables['last_checked'] = t('never');  }  if (user_access('administer news feeds')) {    $variables['last_checked'] = l($variables['last_checked'], 'admin/content/aggregator');  }}
<?php// $Id$/** * @file block.tpl.php * * Theme implementation to display a block. * * Available variables: * - $block->subject: Block title. * - $block->content: Block content. * - $block->module: Module that generated the block. * - $block->delta: This is a numeric id connected to each module. * - $block->region: The block region embedding the current block. * * Helper variables: * - $block_zebra: Outputs 'odd' and 'even' dependent on each block region. * - $zebra: Same output as $block_zebra but independent of any block region. * - $block_id: Counter dependent on each block region. * - $id: Same output as $block_id but independent of any block region. * - $is_front: Flags true when presented in the front page. * - $logged_in: Flags true when the current user is a logged-in member. * - $is_admin: Flags true when the current user is an administrator. * * @see template_preprocess() * @see template_preprocess_block() */?><div id="block-<?php print $block->module .'-'. $block->delta; ?>" class="block block-<?php print $block->module ?>"><?php if ($block->subject): ?>  <h2><?php print $block->subject ?></h2><?php endif;?>  <div class="content">    <?php print $block->content ?>  </div></div>
<?php// $Id$/** * @file * Page callback file for the blog module. *//** * Menu callback; displays a Drupal page containing recent blog entries of a given user. */function blog_page_user($account) {  global $user;  drupal_set_title($title = t("@name's blog", array('@name' => $account->name)));  $items = array();  if (($account->uid == $user->uid) && user_access('create blog entries')) {    $items[] = l(t('Post new blog entry.'), "node/add/blog");  }  else if ($account->uid == $user->uid) {    $items[] = t('You are not allowed to post a new blog entry.');  }  $output = theme('item_list', $items);  $result = pager_query(db_rewrite_sql("SELECT n.nid, n.sticky, n.created FROM {node} n WHERE n.type = 'blog' AND n.uid = %d AND n.status = 1 ORDER BY n.sticky DESC, n.created DESC"), variable_get('default_nodes_main', 10), 0, NULL, $account->uid);  $has_posts = FALSE;    while ($node = db_fetch_object($result)) {    $output .= node_view(node_load($node->nid), 1);    $has_posts = TRUE;  }    if ($has_posts) {    $output .= theme('pager', NULL, variable_get('default_nodes_main', 10));  }  else {    if ($account->uid == $user->uid) {      drupal_set_message(t('You have not created any blog entries.'));    }    else {      drupal_set_message(t('!author has not created any blog entries.', array('!author' => theme('username', $account))));    }  }  drupal_add_feed(url('blog/'. $account->uid .'/feed'), t('RSS - !title', array('!title' => $title)));  return $output;}/** * Menu callback; displays a Drupal page containing recent blog entries of all users. */function blog_page_last() {  global $user;  $output = '';  $items = array();  if (user_access('create blog entries')) {    $items[] = l(t('Create new blog entry.'), "node/add/blog");  }  $output = theme('item_list', $items);  $result = pager_query(db_rewrite_sql("SELECT n.nid, n.created FROM {node} n WHERE n.type = 'blog' AND n.status = 1 ORDER BY n.sticky DESC, n.created DESC"), variable_get('default_nodes_main', 10));  $has_posts = FALSE;  while ($node = db_fetch_object($result)) {    $output .= node_view(node_load($node->nid), 1);    $has_posts = TRUE;  }    if ($has_posts) {    $output .= theme('pager', NULL, variable_get('default_nodes_main', 10));  }  else {    drupal_set_message(t('No blog entries have been created.'));  }  drupal_add_feed(url('blog/feed'), t('RSS - blogs'));  return $output;}/** * Menu callback; displays an RSS feed containing recent blog entries of a given user. */function blog_feed_user($account) {  $result = db_query_range(db_rewrite_sql("SELECT n.nid, n.created FROM {node} n  WHERE n.type = 'blog' AND n.uid = %d AND n.status = 1 ORDER BY n.created DESC"), $account->uid, 0, variable_get('feed_default_items', 10));  $channel['title'] = t("!name's blog", array('!name' => $account->name));  $channel['link'] = url('blog/'. $account->uid, array('absolute' => TRUE));  $items = array();  while ($row = db_fetch_object($result)) {    $items[] = $row->nid;  }  node_feed($items, $channel);}/** * Menu callback; displays an RSS feed containing recent blog entries of all users. */function blog_feed_last() {  $result = db_query_range(db_rewrite_sql("SELECT n.nid, n.created FROM {node} n WHERE n.type = 'blog' AND n.status = 1 ORDER BY n.created DESC"), 0, variable_get('feed_default_items', 10));  $channel['title'] = t('!site_name blogs', array('!site_name' => variable_get('site_name', 'Drupal')));  $channel['link'] = url('blog', array('absolute' => TRUE));  $items = array();  while ($row = db_fetch_object($result)) {    $items[] = $row->nid;  }  node_feed($items, $channel);}
<?php// $Id$/** * @file forum-submitted.tpl.php * Default theme implementation to format a simple string indicated when and * by whom a topic was submitted. * * Available variables: * * - $author: The author of the post. * - $time: How long ago the post was created. * - $topic: An object with the raw data of the post. Unsafe, be sure *   to clean this data before printing. * * @see template_preprocess_forum_submitted() * @see theme_forum_submitted() */?><?php if ($time): ?>  <?php print t(  '@time ago<br />by !author', array(    '@time' => $time,    '!author' => $author,    )); ?><?php else: ?>  <?php print t('n/a'); ?><?php endif; ?>
<?php// $Id$/** * @file book-export-html.tpl.php * Default theme implementation for printed version of book outline. * * Available variables: * - $title: Top level node title. * - $head: Header tags. * - $language: Language code. e.g. "en" for english. * - $language_rtl: TRUE or FALSE depending on right to left language scripts. * - $base_url: URL to home page. * - $content: Nodes within the current outline rendered through *   book-node-export-html.tpl.php. * * @see template_preprocess_book_export_html() */?><!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.0 Transitional//EN" "http://www.w3.org/TR/xhtml1/DTD/xhtml1-transitional.dtd"><html xmlns="http://www.w3.org/1999/xhtml" lang="<?php print $language->language; ?>" xml:lang="<?php print $language->language; ?>">  <head>    <?php print $head; ?>    <title><?php print $title; ?></title>    <base href="<?php print $base_url; ?>" />    <link type="text/css" rel="stylesheet" href="misc/print.css" />    <?php if ($language_rtl): ?>      <link type="text/css" rel="stylesheet" href="misc/print-rtl.css" />    <?php endif; ?>  </head>  <body>    <?php    /**     * The given node is /embedded to its absolute depth in a top level     * section/. For example, a child node with depth 2 in the hierarchy is     * contained in (otherwise empty) &lt;div&gt; elements corresponding to     * depth 0 and depth 1. This is intended to support WYSIWYG output - e.g.,     * level 3 sections always look like level 3 sections, no matter their     * depth relative to the node selected to be exported as printer-friendly     * HTML.     */    $div_close = '';    ?>    <?php for ($i = 1; $i < $depth; $i++) : ?>      <div class="section-<?php print $i; ?>">      <?php $div_close .= '</div>'; ?>    <?php endfor; ?>    <?php print $contents; ?>    <?php print $div_close; ?>  </body></html>
<?php// $Id$?>  <div class="box">    <?php if ($title) { ?><h2 class="title"><?php print $title; ?></h2><?php } ?>    <div class="content"><?php print $content; ?></div> </div>
<?php// $Id$/** * @file * Admin page callbacks for the throttle module. *//** * Form builder; Configure the throttle system. * * @ingroup forms * @see system_settings_form() * @see throttle_admin_settings_validate() */function throttle_admin_settings() {  $probabilities = array(0 => '100%', 1 => '50%', 2 => '33.3%', 3 => '25%', 4 => '20%', 5 => '16.6%', 7 => '12.5%', 9 => '10%', 19 => '5%', 99 => '1%', 199 => '.5%', 399 => '.25%', 989 => '.1%');  $form['throttle_anonymous'] = array(    '#type' => 'textfield',    '#title' => t('Auto-throttle on anonymous users'),    '#default_value' => variable_get('throttle_anonymous', 0),    '#size' => 5,    '#maxlength' => 6,    '#description' => t('The congestion control throttle can be automatically enabled when the number of anonymous users currently visiting your site exceeds the specified threshold. For example, to start the throttle when your site has 250 anonymous users online at once, enter \'250\' in this field. Leave this value blank or set to "0" if you do not wish to auto-throttle on anonymous users. You can inspect the current number of anonymous users using the "Who\'s online" block.')  );  $form['throttle_user'] = array(    '#type' => 'textfield',    '#title' => t('Auto-throttle on authenticated users'),    '#default_value' => variable_get('throttle_user', 0),    '#size' => 5,    '#maxlength' => 6,    '#description' => t('The congestion control throttle can be automatically enabled when the number of authenticated users currently visiting your site exceeds the specified threshold. For example, to start the throttle when your site has 50 registered users online at once, enter \'50\' in this field. Leave this value blank or set to "0" if you do not wish to auto-throttle on authenticated users. You can inspect the current number of authenticated users using the "Who\'s online" block.')  );  $form['throttle_probability_limiter'] = array(    '#type' => 'select',    '#title' => t('Auto-throttle probability limiter'),    '#default_value' => variable_get('throttle_probability_limiter', 9),    '#options' => $probabilities,    '#description' => t('The auto-throttle probability limiter is an efficiency mechanism to statistically reduce the overhead of the auto-throttle. The limiter is expressed as a percentage of page views, so for example if set to the default of 10% we only perform the extra database queries to update the throttle status 1 out of every 10 page views. The busier your site, the lower you should set the limiter value.')  );  $form['#validate'] = array('throttle_admin_settings_validate');  return system_settings_form($form);}function throttle_admin_settings_validate($form, &$form_state) {  if (!is_numeric($form_state['values']['throttle_anonymous']) || $form_state['values']['throttle_anonymous'] < 0) {    form_set_error('throttle_anonymous', t("%value is not a valid auto-throttle setting. Please enter a positive numeric value.", array('%value' => $form_state['values']['throttle_anonymous'])));  }  if (!is_numeric($form_state['values']['throttle_user']) || $form_state['values']['throttle_user'] < 0) {    form_set_error('throttle_user', t("%value is not a valid auto-throttle setting. Please enter a positive numeric value.", array('%value' => $form_state['values']['throttle_user'])));  }}
<?php// $Id$/** * @file book-node-export-html.tpl.php * Default theme implementation for rendering a single node in a printer * friendly outline. * * @see book-node-export-html.tpl.php * Where it is collected and printed out. * * Available variables: * - $depth: Depth of the current node inside the outline. * - $title: Node title. * - $content: Node content. * - $children: All the child nodes recursively rendered through this file. * * @see template_preprocess_book_node_export_html() */?><div id="node-<?php print $node->nid; ?>" class="section-<?php print $depth; ?>">  <h1 class="book-heading"><?php print $title; ?></h1>  <?php print $content; ?>  <?php print $children; ?></div>
<?php// $Id$?><!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.0 Transitional//EN" "http://www.w3.org/TR/xhtml1/DTD/xhtml1-transitional.dtd"><html xmlns="http://www.w3.org/1999/xhtml" lang="<?php print $language->language ?>" xml:lang="<?php print $language->language ?>" dir="<?php print $language->dir ?>"><head>  <meta http-equiv="Content-Style-Type" content="text/css" />  <?php print $head ?>  <title><?php print $head_title ?></title>  <?php print $styles ?>  <?php print $scripts ?></head><body><div class="hide"><a href="#content" title="<?php print t('Skip navigation') ?>." accesskey="2"><?php print t('Skip navigation') ?></a>.</div><table id="primary-menu" summary="Navigation elements." border="0" cellpadding="0" cellspacing="0" width="100%">  <tr>    <td id="home" width="10%">      <?php if ($logo) : ?>        <a href="<?php print $front_page ?>" title="<?php print t('Home') ?>"><img src="<?php print($logo) ?>" alt="<?php print t('Home') ?>" border="0" /></a>      <?php endif; ?>    </td>    <td id="site-info" width="20%">      <?php if ($site_name) : ?>        <div class='site-name'><a href="<?php print $front_page ?>" title="<?php print t('Home') ?>"><?php print($site_name) ?></a></div>      <?php endif;?>      <?php if ($site_slogan) : ?>        <div class='site-slogan'><?php print($site_slogan) ?></div>      <?php endif;?>    </td>    <td class="primary-links" width="70%" align="center" valign="middle">      <?php print theme('links', $primary_links, array('class' => 'links', 'id' => 'navlist')) ?>    </td>  </tr></table><table id="secondary-menu" summary="Navigation elements." border="0" cellpadding="0" cellspacing="0" width="100%">  <tr>    <td class="secondary-links" width="75%"  align="center" valign="middle">      <?php print theme('links', $secondary_links, array('class' => 'links', 'id' => 'subnavlist')) ?>    </td>    <td width="25%" align="center" valign="middle">      <?php print $search_box ?>    </td>  </tr>  <tr>    <td colspan="2"><div><?php print $header ?></div></td>  </tr></table><table id="content" border="0" cellpadding="15" cellspacing="0" width="100%">  <tr>    <?php if ($left != ""): ?>    <td id="sidebar-left">      <?php print $left ?>    </td>    <?php endif; ?>    <td valign="top">      <?php if ($mission != ""): ?>      <div id="mission"><?php print $mission ?></div>      <?php endif; ?>      <div id="main">        <?php if ($title != ""): ?>          <?php print $breadcrumb ?>          <h1 class="title"><?php print $title ?></h1>          <?php if ($tabs != ""): ?>            <div class="tabs"><?php print $tabs ?></div>          <?php endif; ?>        <?php endif; ?>        <?php if ($show_messages && $messages != ""): ?>          <?php print $messages ?>        <?php endif; ?>        <?php if ($help != ""): ?>            <div id="help"><?php print $help ?></div>        <?php endif; ?>      <!-- start main content -->      <?php print $content; ?>      <?php print $feed_icons; ?>      <!-- end main content -->      </div><!-- main -->    </td>    <?php if ($right != ""): ?>    <td id="sidebar-right">      <?php print $right ?>    </td>    <?php endif; ?>  </tr></table><table id="footer-menu" summary="Navigation elements." border="0" cellpadding="0" cellspacing="0" width="100%">  <tr>    <td align="center" valign="middle">    <?php if (isset($primary_links)) : ?>      <?php print theme('links', $primary_links, array('class' => 'links primary-links')) ?>    <?php endif; ?>    <?php if (isset($secondary_links)) : ?>      <?php print theme('links', $secondary_links, array('class' => 'links secondary-links')) ?>    <?php endif; ?>    </td>  </tr></table><?php if ($footer_message || $footer) : ?><div id="footer-message">    <?php print $footer_message . $footer;?></div><?php endif; ?><?php print $closure;?></body></html>
<?php// $Id$/** * @file user-profile-category.tpl.php * Default theme implementation to present profile categories (groups of * profile items). * * Categories are defined when configuring user profile fields for the site. * It can also be defined by modules. All profile items for a category will be * output through the $profile_items variable. * * @see user-profile-item.tpl.php *      where each profile item is rendered. It is implemented as a definition *      list by default. * @see user-profile.tpl.php *      where all items and categories are collected and printed out. * * Available variables: * - $title: Category title for the group of items. * - $profile_items: All the items for the group rendered through *   user-profile-item.tpl.php. * - $attributes: HTML attributes. Usually renders classes. * * @see template_preprocess_user_profile_category() */?><?php if ($title) : ?>  <h3><?php print $title; ?></h3><?php endif; ?><dl<?php print $attributes; ?>>  <?php print $profile_items; ?></dl>
<?php// $Id$/** * @file profile-wrapper.tpl.php * Default theme implementation for wrapping member listings and their * profiles. * * This template is used when viewing a list of users. It can be a general * list for viewing all users with the url of "example.com/profile" or when * viewing a set of users who share a specific value for a profile such * as "example.com/profile/country/belgium". * * Available variables: * - $content: User account profiles iterated through profile-listing.tpl.php. * - $current_field: The named field being browsed. Provided here for context. *   The above example would result in "last_name". An alternate template name *   is also based on this, e.g., "profile-wrapper-last_name.tpl.php". * * @see template_preprocess_profile_wrapper() */?><div id="profile">  <?php print $content; ?></div>
<?php// $Id$/** * @file * Functions shared between mysql and mysqli database engines. *//** * Runs a basic query in the active database. * * User-supplied arguments to the query should be passed in as separate * parameters so that they can be properly escaped to avoid SQL injection * attacks. * * @param $query *   A string containing an SQL query. * @param ... *   A variable number of arguments which are substituted into the query *   using printf() syntax. Instead of a variable number of query arguments, *   you may also pass a single array containing the query arguments. * *   Valid %-modifiers are: %s, %d, %f, %b (binary data, do not enclose *   in '') and %%. * *   NOTE: using this syntax will cast NULL and FALSE values to decimal 0, *   and TRUE values to decimal 1. * * @return *   A database query result resource, or FALSE if the query was not *   executed correctly. */function db_query($query) {  $args = func_get_args();  array_shift($args);  $query = db_prefix_tables($query);  if (isset($args[0]) and is_array($args[0])) { // 'All arguments in one array' syntax    $args = $args[0];  }  _db_query_callback($args, TRUE);  $query = preg_replace_callback(DB_QUERY_REGEXP, '_db_query_callback', $query);  return _db_query($query);}/** * @ingroup schemaapi * @{ *//** * Generate SQL to create a new table from a Drupal schema definition. * * @param $name *   The name of the table to create. * @param $table *   A Schema API table definition array. * @return *   An array of SQL statements to create the table. */function db_create_table_sql($name, $table) {  if (empty($table['mysql_suffix'])) {    $table['mysql_suffix'] = "/*!40100 DEFAULT CHARACTER SET UTF8 */";  }  $sql = "CREATE TABLE {". $name ."} (\n";  // Add the SQL statement for each field.  foreach ($table['fields'] as $field_name => $field) {    $sql .= _db_create_field_sql($field_name, _db_process_field($field)) .", \n";  }  // Process keys & indexes.  $keys = _db_create_keys_sql($table);  if (count($keys)) {    $sql .= implode(", \n", $keys) .", \n";  }  // Remove the last comma and space.  $sql = substr($sql, 0, -3) ."\n) ";  $sql .= $table['mysql_suffix'];  return array($sql);}function _db_create_keys_sql($spec) {  $keys = array();  if (!empty($spec['primary key'])) {    $keys[] = 'PRIMARY KEY ('. _db_create_key_sql($spec['primary key']) .')';  }  if (!empty($spec['unique keys'])) {    foreach ($spec['unique keys'] as $key => $fields) {      $keys[] = 'UNIQUE KEY '. $key .' ('. _db_create_key_sql($fields) .')';    }  }  if (!empty($spec['indexes'])) {    foreach ($spec['indexes'] as $index => $fields) {      $keys[] = 'INDEX '. $index .' ('. _db_create_key_sql($fields) .')';    }  }  return $keys;}function _db_create_key_sql($fields) {  $ret = array();  foreach ($fields as $field) {    if (is_array($field)) {      $ret[] = $field[0] .'('. $field[1] .')';    }    else {      $ret[] = $field;    }  }  return implode(', ', $ret);}/** * Set database-engine specific properties for a field. * * @param $field *   A field description array, as specified in the schema documentation. */function _db_process_field($field) {  if (!isset($field['size'])) {    $field['size'] = 'normal';  }  // Set the correct database-engine specific datatype.  if (!isset($field['mysql_type'])) {    $map = db_type_map();    $field['mysql_type'] = $map[$field['type'] .':'. $field['size']];  }  if ($field['type'] == 'serial') {    $field['auto_increment'] = TRUE;  }  return $field;}/** * Create an SQL string for a field to be used in table creation or alteration. * * Before passing a field out of a schema definition into this function it has * to be processed by _db_process_field(). * * @param $name *    Name of the field. * @param $spec *    The field specification, as per the schema data structure format. */function _db_create_field_sql($name, $spec) {  $sql = "`". $name ."` ". $spec['mysql_type'];  if (in_array($spec['type'], array('varchar', 'char', 'text')) && isset($spec['length'])) {    $sql .= '('. $spec['length'] .')';  }  elseif (isset($spec['precision']) && isset($spec['scale'])) {    $sql .= '('. $spec['precision'] .', '. $spec['scale'] .')';  }  if (!empty($spec['unsigned'])) {    $sql .= ' unsigned';  }  if (!empty($spec['not null'])) {    $sql .= ' NOT NULL';  }  if (!empty($spec['auto_increment'])) {    $sql .= ' auto_increment';  }  if (isset($spec['default'])) {    if (is_string($spec['default'])) {      $spec['default'] = "'". $spec['default'] ."'";    }    $sql .= ' DEFAULT '. $spec['default'];  }  if (empty($spec['not null']) && !isset($spec['default'])) {    $sql .= ' DEFAULT NULL';  }  return $sql;}/** * This maps a generic data type in combination with its data size * to the engine-specific data type. */function db_type_map() {  // Put :normal last so it gets preserved by array_flip.  This makes  // it much easier for modules (such as schema.module) to map  // database types back into schema types.  $map = array(    'varchar:normal'  => 'VARCHAR',    'char:normal'     => 'CHAR',    'text:tiny'       => 'TINYTEXT',    'text:small'      => 'TINYTEXT',    'text:medium'     => 'MEDIUMTEXT',    'text:big'        => 'LONGTEXT',    'text:normal'     => 'TEXT',    'serial:tiny'     => 'TINYINT',    'serial:small'    => 'SMALLINT',    'serial:medium'   => 'MEDIUMINT',    'serial:big'      => 'BIGINT',    'serial:normal'   => 'INT',    'int:tiny'        => 'TINYINT',    'int:small'       => 'SMALLINT',    'int:medium'      => 'MEDIUMINT',    'int:big'         => 'BIGINT',    'int:normal'      => 'INT',    'float:tiny'      => 'FLOAT',    'float:small'     => 'FLOAT',    'float:medium'    => 'FLOAT',    'float:big'       => 'DOUBLE',    'float:normal'    => 'FLOAT',    'numeric:normal'  => 'DECIMAL',    'blob:big'        => 'LONGBLOB',    'blob:normal'     => 'BLOB',    'datetime:normal' => 'DATETIME',  );  return $map;}/** * Rename a table. * * @param $ret *   Array to which query results will be added. * @param $table *   The table to be renamed. * @param $new_name *   The new name for the table. */function db_rename_table(&$ret, $table, $new_name) {  $ret[] = update_sql('ALTER TABLE {'. $table .'} RENAME TO {'. $new_name .'}');}/** * Drop a table. * * @param $ret *   Array to which query results will be added. * @param $table *   The table to be dropped. */function db_drop_table(&$ret, $table) {  $ret[] = update_sql('DROP TABLE {'. $table .'}');}/** * Add a new field to a table. * * @param $ret *   Array to which query results will be added. * @param $table *   Name of the table to be altered. * @param $field *   Name of the field to be added. * @param $spec *   The field specification array, as taken from a schema definition. *   The specification may also contain the key 'initial', the newly *   created field will be set to the value of the key in all rows. *   This is most useful for creating NOT NULL columns with no default *   value in existing tables. * @param $keys_new *   Optional keys and indexes specification to be created on the *   table along with adding the field. The format is the same as a *   table specification but without the 'fields' element.  If you are *   adding a type 'serial' field, you MUST specify at least one key *   or index including it in this array. @see db_change_field for more *   explanation why. */function db_add_field(&$ret, $table, $field, $spec, $keys_new = array()) {  $fixnull = FALSE;  if (!empty($spec['not null']) && !isset($spec['default'])) {    $fixnull = TRUE;    $spec['not null'] = FALSE;  }  $query = 'ALTER TABLE {'. $table .'} ADD ';  $query .= _db_create_field_sql($field, _db_process_field($spec));  if (count($keys_new)) {    $query .= ', ADD '. implode(', ADD ', _db_create_keys_sql($keys_new));  }  $ret[] = update_sql($query);  if (isset($spec['initial'])) {    // All this because update_sql does not support %-placeholders.    $sql = 'UPDATE {'. $table .'} SET '. $field .' = '. db_type_placeholder($spec['type']);    $result = db_query($sql, $spec['initial']);    $ret[] = array('success' => $result !== FALSE, 'query' => check_plain($sql .' ('. $spec['initial'] .')'));  }  if ($fixnull) {    $spec['not null'] = TRUE;    db_change_field($ret, $table, $field, $field, $spec);  }}/** * Drop a field. * * @param $ret *   Array to which query results will be added. * @param $table *   The table to be altered. * @param $field *   The field to be dropped. */function db_drop_field(&$ret, $table, $field) {  $ret[] = update_sql('ALTER TABLE {'. $table .'} DROP '. $field);}/** * Set the default value for a field. * * @param $ret *   Array to which query results will be added. * @param $table *   The table to be altered. * @param $field *   The field to be altered. * @param $default *   Default value to be set. NULL for 'default NULL'. */function db_field_set_default(&$ret, $table, $field, $default) {  if ($default === NULL) {    $default = 'NULL';  }  else {    $default = is_string($default) ? "'$default'" : $default;  }  $ret[] = update_sql('ALTER TABLE {'. $table .'} ALTER COLUMN '. $field .' SET DEFAULT '. $default);}/** * Set a field to have no default value. * * @param $ret *   Array to which query results will be added. * @param $table *   The table to be altered. * @param $field *   The field to be altered. */function db_field_set_no_default(&$ret, $table, $field) {  $ret[] = update_sql('ALTER TABLE {'. $table .'} ALTER COLUMN '. $field .' DROP DEFAULT');}/** * Add a primary key. * * @param $ret *   Array to which query results will be added. * @param $table *   The table to be altered. * @param $fields *   Fields for the primary key. */function db_add_primary_key(&$ret, $table, $fields) {  $ret[] = update_sql('ALTER TABLE {'. $table .'} ADD PRIMARY KEY ('.    _db_create_key_sql($fields) .')');}/** * Drop the primary key. * * @param $ret *   Array to which query results will be added. * @param $table *   The table to be altered. */function db_drop_primary_key(&$ret, $table) {  $ret[] = update_sql('ALTER TABLE {'. $table .'} DROP PRIMARY KEY');}/** * Add a unique key. * * @param $ret *   Array to which query results will be added. * @param $table *   The table to be altered. * @param $name *   The name of the key. * @param $fields *   An array of field names. */function db_add_unique_key(&$ret, $table, $name, $fields) {  $ret[] = update_sql('ALTER TABLE {'. $table .'} ADD UNIQUE KEY '.    $name .' ('. _db_create_key_sql($fields) .')');}/** * Drop a unique key. * * @param $ret *   Array to which query results will be added. * @param $table *   The table to be altered. * @param $name *   The name of the key. */function db_drop_unique_key(&$ret, $table, $name) {  $ret[] = update_sql('ALTER TABLE {'. $table .'} DROP KEY '. $name);}/** * Add an index. * * @param $ret *   Array to which query results will be added. * @param $table *   The table to be altered. * @param $name *   The name of the index. * @param $fields *   An array of field names. */function db_add_index(&$ret, $table, $name, $fields) {  $query = 'ALTER TABLE {'. $table .'} ADD INDEX '. $name .' ('. _db_create_key_sql($fields) .')';  $ret[] = update_sql($query);}/** * Drop an index. * * @param $ret *   Array to which query results will be added. * @param $table *   The table to be altered. * @param $name *   The name of the index. */function db_drop_index(&$ret, $table, $name) {  $ret[] = update_sql('ALTER TABLE {'. $table .'} DROP INDEX '. $name);}/** * Change a field definition. * * IMPORTANT NOTE: To maintain database portability, you have to explicitly * recreate all indices and primary keys that are using the changed field. * * That means that you have to drop all affected keys and indexes with * db_drop_{primary_key,unique_key,index}() before calling db_change_field(). * To recreate the keys and indices, pass the key definitions as the * optional $keys_new argument directly to db_change_field(). * * For example, suppose you have: * @code * $schema['foo'] = array( *   'fields' => array( *     'bar' => array('type' => 'int', 'not null' => TRUE) *   ), *   'primary key' => array('bar') * ); * @endcode * and you want to change foo.bar to be type serial, leaving it as the * primary key.  The correct sequence is: * @code * db_drop_primary_key($ret, 'foo'); * db_change_field($ret, 'foo', 'bar', 'bar', *   array('type' => 'serial', 'not null' => TRUE), *   array('primary key' => array('bar'))); * @endcode * * The reasons for this are due to the different database engines: * * On PostgreSQL, changing a field definition involves adding a new field * and dropping an old one which* causes any indices, primary keys and * sequences (from serial-type fields) that use the changed field to be dropped. * * On MySQL, all type 'serial' fields must be part of at least one key * or index as soon as they are created.  You cannot use * db_add_{primary_key,unique_key,index}() for this purpose because * the ALTER TABLE command will fail to add the column without a key * or index specification.  The solution is to use the optional * $keys_new argument to create the key or index at the same time as * field. * * You could use db_add_{primary_key,unique_key,index}() in all cases * unless you are converting a field to be type serial. You can use * the $keys_new argument in all cases. * * @param $ret *   Array to which query results will be added. * @param $table *   Name of the table. * @param $field *   Name of the field to change. * @param $field_new *   New name for the field (set to the same as $field if you don't want to change the name). * @param $spec *   The field specification for the new field. * @param $keys_new *   Optional keys and indexes specification to be created on the *   table along with changing the field. The format is the same as a *   table specification but without the 'fields' element. */function db_change_field(&$ret, $table, $field, $field_new, $spec, $keys_new = array()) {  $sql = 'ALTER TABLE {'. $table .'} CHANGE `'. $field .'` '.    _db_create_field_sql($field_new, _db_process_field($spec));  if (count($keys_new)) {    $sql .= ', ADD '. implode(', ADD ', _db_create_keys_sql($keys_new));  }  $ret[] = update_sql($sql);}/** * Returns the last insert id. * * @param $table *   The name of the table you inserted into. * @param $field *   The name of the autoincrement field. */function db_last_insert_id($table, $field) {  return db_result(db_query('SELECT LAST_INSERT_ID()'));}
<?php// $Id$?>  <div class="block block-<?php print $block->module; ?>" id="block-<?php print $block->module; ?>-<?php print $block->delta; ?>">    <h2 class="title"><?php print $block->subject; ?></h2>    <div class="content"><?php print $block->content; ?></div> </div>
<?php// $Id$/** * @file search-block-form.tpl.php * Default theme implementation for displaying a search form within a block region. * * Available variables: * - $search_form: The complete search form ready for print. * - $search: Array of keyed search elements. Can be used to print each form *   element separately. * * Default keys within $search: * - $search['search_block_form']: Text input area wrapped in a div. * - $search['submit']: Form submit button. * - $search['hidden']: Hidden form elements. Used to validate forms when submitted. * * Since $search is keyed, a direct print of the form element is possible. * Modules can add to the search form so it is recommended to check for their * existance before printing. The default keys will always exist. * *   <?php if (isset($search['extra_field'])): ?> *     <div class="extra-field"> *       <?php print $search['extra_field']; ?> *     </div> *   <?php endif; ?> * * To check for all available data within $search, use the code below. * *   <?php print '<pre>'. check_plain(print_r($search, 1)) .'</pre>'; ?> * * @see template_preprocess_search_block_form() */?><div class="container-inline">  <?php print $search_form; ?></div>
<?php// $Id$/** * Implementation of hook_install(). */function trigger_install() {  // Create tables.  drupal_install_schema('trigger');  // Do initial synchronization of actions in code and the database.  actions_synchronize(actions_list());}/** * Implementation of hook_uninstall(). */function trigger_uninstall() {  // Remove tables.  drupal_uninstall_schema('trigger');}/** * Implementation of hook_schema(). */function trigger_schema() {  $schema['trigger_assignments'] = array(    'description' => 'Maps trigger to hook and operation assignments from trigger.module.',    'fields' => array(      'hook' => array(        'type' => 'varchar',        'length' => 32,        'not null' => TRUE,        'default' => '',        'description' => 'Primary Key: The name of the internal Drupal hook upon which an action is firing; for example, nodeapi.',      ),      'op' => array(        'type' => 'varchar',        'length' => 32,        'not null' => TRUE,        'default' => '',        'description' => 'Primary Key: The specific operation of the hook upon which an action is firing: for example, presave.',      ),      'aid' => array(        'type' => 'varchar',        'length' => 255,        'not null' => TRUE,        'default' => '',        'description' => "Primary Key: Action's {actions}.aid.",      ),      'weight' => array(        'type' => 'int',        'not null' => TRUE,        'default' => 0,        'description' => 'The weight of the trigger assignment in relation to other triggers.',      ),    ),    'primary key' => array('hook', 'op', 'aid'),  );  return $schema;}
<?php// $Id$/** * @file box.tpl.php * * Theme implementation to display a box. * * Available variables: * - $title: Box title. * - $content: Box content. * * @see template_preprocess() */?><div class="box"><?php if ($title): ?>  <h2><?php print $title ?></h2><?php endif; ?>  <div class="content"><?php print $content ?></div></div>
<?php// $Id$/** * @file poll-bar.tpl.php * Display the bar for a single choice in a poll * * Variables available: * - $title: The title of the poll. * - $votes: The number of votes for this choice * - $total_votes: The number of votes for this choice * - $percentage: The percentage of votes for this choice. * - $vote: The choice number of the current user's vote. * - $voted: Set to TRUE if the user voted for this choice. * * @see template_preprocess_poll_bar() */?><div class="text"><?php print $title; ?></div><div class="bar">  <div style="width: <?php print $percentage; ?>%;" class="foreground"></div></div><div class="percent">  <?php print $percentage; ?>% (<?php print format_plural($votes, '1 vote', '@count votes'); ?>)</div>
<?php// $Id$?><div class="box">  <?php if ($title): ?>  <h2 class="title"><?php print $title ?></h2>  <?php endif; ?>  <div class="content"><?php print $content ?></div></div>
<?php// $Id$/** * A stub cache implementation to be used during the installation * process when database access is not yet available. Because Drupal's * caching system never requires that cached data be present, these * stub functions can short-circuit the process and sidestep the * need for any persistent storage. Obviously, using this cache * implementation during normal operations would have a negative impact * on performance. */function cache_get($key, $table = 'cache') {  return FALSE;}function cache_set($cid, $data, $table = 'cache', $expire = CACHE_PERMANENT, $headers = NULL) {  return;}function cache_clear_all($cid = NULL, $table = NULL, $wildcard = FALSE) {  return;}
