<?php// $Id$/** * @file poll-vote.tpl.php * Voting form for a poll. * * - $choice: The radio buttons for the choices in the poll. * - $title: The title of the poll. * - $block: True if this is being displayed as a block. * - $vote: The vote button * - $rest: Anything else in the form that may have been added via *   form_alter hooks. * * @see template_preprocess_poll_vote() */?><div class="poll">  <div class="vote-form">    <div class="choices">      <?php if ($block): ?>        <div class="title"><?php print $title; ?>:</div>      <?php endif; ?>      <?php print $choice; ?>    </div>    <?php print $vote; ?>  </div>  <?php // This is the 'rest' of the form, in case items have been added. ?>  <?php print $rest ?></div>
<?php// $Id$/** * @file * User page callbacks for the poll module. *//** * Menu callback to provide a simple list of all polls available. */function poll_page() {  // List all polls.  $sql = db_rewrite_sql("SELECT n.nid, n.title, p.active, n.created, SUM(c.chvotes) AS votes FROM {node} n INNER JOIN {poll} p ON n.nid = p.nid INNER JOIN {poll_choices} c ON n.nid = c.nid WHERE n.status = 1 GROUP BY n.nid, n.title, p.active, n.created ORDER BY n.created DESC");  // Count all polls for the pager.  $count_sql = db_rewrite_sql('SELECT COUNT(*) FROM {node} n INNER JOIN {poll} p ON n.nid = p.nid WHERE n.status = 1');  $result = pager_query($sql, 15, 0, $count_sql);  $output = '<ul>';  while ($node = db_fetch_object($result)) {    $output .= '<li>'. l($node->title, "node/$node->nid") .' - '. format_plural($node->votes, '1 vote', '@count votes') .' - '. ($node->active ? t('open') : t('closed')) .'</li>';  }  $output .= '</ul>';  $output .= theme("pager", NULL, 15);  return $output;}/** * Callback for the 'votes' tab for polls you can see other votes on */function poll_votes($node) {  drupal_set_title(check_plain($node->title));  $output = t('This table lists all the recorded votes for this poll. If anonymous users are allowed to vote, they will be identified by the IP address of the computer they used when they voted.');  $header[] = array('data' => t('Visitor'), 'field' => 'u.name');  $header[] = array('data' => t('Vote'), 'field' => 'pv.chorder');  $result = pager_query("SELECT pv.chorder, pv.uid, pv.hostname, u.name FROM {poll_votes} pv LEFT JOIN {users} u ON pv.uid = u.uid WHERE pv.nid = %d". tablesort_sql($header), 20, 0, NULL, $node->nid);  $rows = array();  while ($vote = db_fetch_object($result)) {    $rows[] = array(      $vote->name ? theme('username', $vote) : check_plain($vote->hostname),      check_plain($node->choice[$vote->chorder]['chtext']));  }  $output .= theme('table', $header, $rows);  $output .= theme('pager', NULL, 20, 0);  return $output;}/** * Callback for the 'results' tab for polls you can vote on */function poll_results($node) {  drupal_set_title(check_plain($node->title));  $node->show_results = TRUE;  return node_show($node, 0);}
<?php// $Id$/** * @file poll-bar-block.tpl.php * Display the bar for a single choice in a poll * * Variables available: * - $title: The title of the poll. * - $votes: The number of votes for this choice * - $total_votes: The number of votes for this choice * - $percentage: The percentage of votes for this choice. * - $vote: The choice number of the current user's vote. * - $voted: Set to TRUE if the user voted for this choice. * * @see template_preprocess_poll_bar() */?><div class="text"><?php print $title; ?></div><div class="bar">  <div style="width: <?php print $percentage; ?>%;" class="foreground"></div></div><div class="percent">  <?php print $percentage; ?>%</div>
<?php// $Id$/** * @file poll-results-block.tpl.php * Display the poll results in a block. * * Variables available: * - $title: The title of the poll. * - $results: The results of the poll. * - $votes: The total results in the poll. * - $links: Links in the poll. * - $nid: The nid of the poll * - $cancel_form: A form to cancel the user's vote, if allowed. * - $raw_links: The raw array of links. Should be run through theme('links') *   if used. * - $vote: The choice number of the current user's vote. * * @see template_preprocess_poll_results() */?><div class="poll">  <div class="title"><?php print $title ?></div>  <?php print $results ?>  <div class="total">    <?php print t('Total votes: @votes', array('@votes' => $votes)); ?>  </div></div><div class="links"><?php print $links; ?></div>
<?php// $Id$/** * @file search-theme-form.tpl.php * Default theme implementation for displaying a search form directly into the * theme layout. Not to be confused with the search block or the search page. * * Available variables: * - $search_form: The complete search form ready for print. * - $search: Array of keyed search elements. Can be used to print each form *   element separately. * * Default keys within $search: * - $search['search_theme_form']: Text input area wrapped in a div. * - $search['submit']: Form submit button. * - $search['hidden']: Hidden form elements. Used to validate forms when submitted. * * Since $search is keyed, a direct print of the form element is possible. * Modules can add to the search form so it is recommended to check for their * existance before printing. The default keys will always exist. * *   <?php if (isset($search['extra_field'])): ?> *     <div class="extra-field"> *       <?php print $search['extra_field']; ?> *     </div> *   <?php endif; ?> * * To check for all available data within $search, use the code below. * *   <?php print '<pre>'. check_plain(print_r($search, 1)) .'</pre>'; ?> * * @see template_preprocess_search_theme_form() */?><div id="search" class="container-inline">  <?php print $search_form; ?></div>
<?php// $Id$?>  <div class="block block-<?php print $block->module; ?>" id="block-<?php print $block->module; ?>-<?php print $block->delta; ?>">    <h2 class="title"><?php print $block->subject; ?></h2>    <div class="content"><?php print $block->content; ?></div> </div>
<?php// $Id$/** * @file aggregator-feed-source.tpl.php * Default theme implementation to present the source of the feed. * * The contents are render above feed listings when browsing source feeds. * For example, "example.com/aggregator/sources/1". * * Available variables: * - $source_icon: Feed icon linked to the source. Rendered through *   theme_feed_icon(). * - $source_image: Image set by the feed source. * - $source_description: Description set by the feed source. * - $source_url: URL to the feed source. * - $last_checked: How long ago the feed was checked locally. * * @see template_preprocess() * @see template_preprocess_aggregator_feed_source() */?><div class="feed-source">  <?php print $source_icon; ?>  <?php print $source_image; ?>  <div class="feed-description">    <?php print $source_description; ?>  </div>  <div class="feed-url">    <em><?php print t('URL:'); ?></em> <a href="<?php print $source_url; ?>"><?php print $source_url; ?></a>  </div>  <div class="feed-updated">    <em><?php print t('Updated:'); ?></em> <?php print $last_checked; ?>  </div></div>
<?php// $Id$// Global variables to track parsing state$xrds_open_elements = array();$xrds_services = array();$xrds_current_service = array();/** * Main entry point for parsing XRDS documents */function xrds_parse($xml) {  global $xrds_services;  $parser = xml_parser_create_ns();  xml_set_element_handler($parser, '_xrds_element_start', '_xrds_element_end');  xml_set_character_data_handler($parser, '_xrds_cdata');  xml_parse($parser, $xml);  xml_parser_free($parser);  return $xrds_services;}/** * Parser callback functions */function _xrds_element_start(&$parser, $name, $attribs) {  global $xrds_open_elements;  $xrds_open_elements[] = _xrds_strip_namespace($name);}function _xrds_element_end(&$parser, $name) {  global $xrds_open_elements, $xrds_services, $xrds_current_service;  $name = _xrds_strip_namespace($name);  if ($name == 'SERVICE') {    if (in_array(OPENID_NS_2_0 .'/signon', $xrds_current_service['types']) ||        in_array(OPENID_NS_2_0 .'/server', $xrds_current_service['types'])) {      $xrds_current_service['version'] = 2;    }    elseif (in_array(OPENID_NS_1_1, $xrds_current_service['types']) ||            in_array(OPENID_NS_1_0, $xrds_current_service['types'])) {      $xrds_current_service['version'] = 1;    }    if (!empty($xrds_current_service['version'])) {      $xrds_services[] = $xrds_current_service;    }    $xrds_current_service = array();  }  array_pop($xrds_open_elements);}function _xrds_cdata(&$parser, $data) {  global $xrds_open_elements, $xrds_services, $xrds_current_service;  $path = strtoupper(implode('/', $xrds_open_elements));  switch ($path) {    case 'XRDS/XRD/SERVICE/TYPE':      $xrds_current_service['types'][] = $data;      break;    case 'XRDS/XRD/SERVICE/URI':      $xrds_current_service['uri'] = $data;      break;    case 'XRDS/XRD/SERVICE/DELEGATE':      $xrds_current_service['delegate'] = $data;      break;    case 'XRDS/XRD/SERVICE/LOCALID':      $xrds_current_service['localid'] = $data;      break;  }}function _xrds_strip_namespace($name) {  // Strip namespacing.  $pos = strrpos($name, ':');  if ($pos !== FALSE) {    $name = substr($name, $pos + 1, strlen($name));  }  return $name;}
<?php/* $Id$ */function color_requirements($phase) {  $requirements = array();  if ($phase == 'runtime') {    // Check GD library    if (function_exists('imagegd2')) {      $info = gd_info();      $requirements['gd'] = array(        'value' => $info['GD Version'],      );      // Check PNG support      if (function_exists('imagecreatefrompng')) {        $requirements['gd']['severity'] = REQUIREMENT_OK;      }      else {        $requirements['gd']['severity'] = REQUIREMENT_ERROR;        $requirements['gd']['description'] = t('The GD library for PHP is enabled, but was compiled without PNG support. Please check the <a href="@url">PHP image documentation</a> for information on how to correct this.', array('@url' => 'http://www.php.net/manual/en/ref.image.php'));      }    }    else {      $requirements['gd'] = array(        'value' => t('Not installed'),        'severity' => REQUIREMENT_ERROR,        'description' => t('The GD library for PHP is missing or outdated. Please check the <a href="@url">PHP image documentation</a> for information on how to correct this.', array('@url' => 'http://www.php.net/manual/en/ref.image.php')),      );    }    $requirements['gd']['title'] = t('GD library');  }  return $requirements;}
<?php// $Id$/** * @file * Database interface code for PostgreSQL database servers. *//** * @ingroup database * @{ *//** * Report database status. */function db_status_report() {  $t = get_t();  $version = db_version();  $form['pgsql'] = array(    'title' => $t('PostgreSQL database'),    'value' => $version,  );  if (version_compare($version, DRUPAL_MINIMUM_PGSQL) < 0) {    $form['pgsql']['severity'] = REQUIREMENT_ERROR;    $form['pgsql']['description'] = $t('Your PostgreSQL Server is too old. Drupal requires at least PostgreSQL %version.', array('%version' => DRUPAL_MINIMUM_PGSQL));  }  return $form;}/** * Returns the version of the database server currently in use. * * @return Database server version */function db_version() {  return db_result(db_query("SHOW SERVER_VERSION"));}/** * Initialize a database connection. */function db_connect($url) {  // Check if PostgreSQL support is present in PHP  if (!function_exists('pg_connect')) {    _db_error_page('Unable to use the PostgreSQL database because the PostgreSQL extension for PHP is not installed. Check your <code>php.ini</code> to see how you can enable it.');  }  $url = parse_url($url);  $conn_string = '';  // Decode url-encoded information in the db connection string  if (isset($url['user'])) {    $conn_string .= ' user='. urldecode($url['user']);  }  if (isset($url['pass'])) {    $conn_string .= ' password='. urldecode($url['pass']);  }  if (isset($url['host'])) {    $conn_string .= ' host='. urldecode($url['host']);  }  if (isset($url['path'])) {    $conn_string .= ' dbname='. substr(urldecode($url['path']), 1);  }  if (isset($url['port'])) {    $conn_string .= ' port='. urldecode($url['port']);  }  // pg_last_error() does not return a useful error message for database  // connection errors. We must turn on error tracking to get at a good error  // message, which will be stored in $php_errormsg.  $track_errors_previous = ini_get('track_errors');  ini_set('track_errors', 1);  $connection = @pg_connect($conn_string);  if (!$connection) {    require_once './includes/unicode.inc';    _db_error_page(decode_entities($php_errormsg));  }  // Restore error tracking setting  ini_set('track_errors', $track_errors_previous);  pg_query($connection, "set client_encoding=\"UTF8\"");  return $connection;}/** * Runs a basic query in the active database. * * User-supplied arguments to the query should be passed in as separate * parameters so that they can be properly escaped to avoid SQL injection * attacks. * * @param $query *   A string containing an SQL query. * @param ... *   A variable number of arguments which are substituted into the query *   using printf() syntax. Instead of a variable number of query arguments, *   you may also pass a single array containing the query arguments. * *   Valid %-modifiers are: %s, %d, %f, %b (binary data, do not enclose *   in '') and %%. * *   NOTE: using this syntax will cast NULL and FALSE values to decimal 0, *   and TRUE values to decimal 1. * * @return *   A database query result resource, or FALSE if the query was not *   executed correctly. */function db_query($query) {  $args = func_get_args();  array_shift($args);  $query = db_prefix_tables($query);  if (isset($args[0]) and is_array($args[0])) { // 'All arguments in one array' syntax    $args = $args[0];  }  _db_query_callback($args, TRUE);  $query = preg_replace_callback(DB_QUERY_REGEXP, '_db_query_callback', $query);  return _db_query($query);}/** * Helper function for db_query(). */function _db_query($query, $debug = 0) {  global $active_db, $last_result, $queries;  if (variable_get('dev_query', 0)) {    list($usec, $sec) = explode(' ', microtime());    $timer = (float)$usec + (float)$sec;  }  $last_result = pg_query($active_db, $query);  if (variable_get('dev_query', 0)) {    $bt = debug_backtrace();    $query = $bt[2]['function'] ."\n". $query;    list($usec, $sec) = explode(' ', microtime());    $stop = (float)$usec + (float)$sec;    $diff = $stop - $timer;    $queries[] = array($query, $diff);  }  if ($debug) {    print '<p>query: '. $query .'<br />error:'. pg_last_error($active_db) .'</p>';  }  if ($last_result !== FALSE) {    return $last_result;  }  else {    // Indicate to drupal_error_handler that this is a database error.    ${DB_ERROR} = TRUE;    trigger_error(check_plain(pg_last_error($active_db) ."\nquery: ". $query), E_USER_WARNING);    return FALSE;  }}/** * Fetch one result row from the previous query as an object. * * @param $result *   A database query result resource, as returned from db_query(). * @return *   An object representing the next row of the result, or FALSE. The attributes *   of this object are the table fields selected by the query. */function db_fetch_object($result) {  if ($result) {    return pg_fetch_object($result);  }}/** * Fetch one result row from the previous query as an array. * * @param $result *   A database query result resource, as returned from db_query(). * @return *   An associative array representing the next row of the result, or FALSE. *   The keys of this object are the names of the table fields selected by the *   query, and the values are the field values for this result row. */function db_fetch_array($result) {  if ($result) {    return pg_fetch_assoc($result);  }}/** * Return an individual result field from the previous query. * * Only use this function if exactly one field is being selected; otherwise, * use db_fetch_object() or db_fetch_array(). * * @param $result *   A database query result resource, as returned from db_query(). * @return *   The resulting field or FALSE. */function db_result($result) {  if ($result && pg_num_rows($result) > 0) {    $array = pg_fetch_row($result);    return $array[0];  }  return FALSE;}/** * Determine whether the previous query caused an error. */function db_error() {  global $active_db;  return pg_last_error($active_db);}/** * Returns the last insert id. This function is thread safe. * * @param $table *   The name of the table you inserted into. * @param $field *   The name of the autoincrement field. */function db_last_insert_id($table, $field) {  return db_result(db_query("SELECT CURRVAL('{". db_escape_table($table) ."}_". db_escape_table($field) ."_seq')"));}/** * Determine the number of rows changed by the preceding query. */function db_affected_rows() {  global $last_result;  return empty($last_result) ? 0 : pg_affected_rows($last_result);}/** * Runs a limited-range query in the active database. * * Use this as a substitute for db_query() when a subset of the query * is to be returned. * User-supplied arguments to the query should be passed in as separate * parameters so that they can be properly escaped to avoid SQL injection * attacks. * * @param $query *   A string containing an SQL query. * @param ... *   A variable number of arguments which are substituted into the query *   using printf() syntax. Instead of a variable number of query arguments, *   you may also pass a single array containing the query arguments. *   Valid %-modifiers are: %s, %d, %f, %b (binary data, do not enclose *   in '') and %%. * *   NOTE: using this syntax will cast NULL and FALSE values to decimal 0, *   and TRUE values to decimal 1. * * @param $from *   The first result row to return. * @param $count *   The maximum number of result rows to return. * @return *   A database query result resource, or FALSE if the query was not executed *   correctly. */function db_query_range($query) {  $args = func_get_args();  $count = array_pop($args);  $from = array_pop($args);  array_shift($args);  $query = db_prefix_tables($query);  if (isset($args[0]) and is_array($args[0])) { // 'All arguments in one array' syntax    $args = $args[0];  }  _db_query_callback($args, TRUE);  $query = preg_replace_callback(DB_QUERY_REGEXP, '_db_query_callback', $query);  $query .= ' LIMIT '. (int)$count .' OFFSET '. (int)$from;  return _db_query($query);}/** * Runs a SELECT query and stores its results in a temporary table. * * Use this as a substitute for db_query() when the results need to stored * in a temporary table. Temporary tables exist for the duration of the page * request. * User-supplied arguments to the query should be passed in as separate parameters * so that they can be properly escaped to avoid SQL injection attacks. * * Note that if you need to know how many results were returned, you should do * a SELECT COUNT(*) on the temporary table afterwards. db_affected_rows() does * not give consistent result across different database types in this case. * * @param $query *   A string containing a normal SELECT SQL query. * @param ... *   A variable number of arguments which are substituted into the query *   using printf() syntax. The query arguments can be enclosed in one *   array instead. *   Valid %-modifiers are: %s, %d, %f, %b (binary data, do not enclose *   in '') and %%. * *   NOTE: using this syntax will cast NULL and FALSE values to decimal 0, *   and TRUE values to decimal 1. * * @param $table *   The name of the temporary table to select into. This name will not be *   prefixed as there is no risk of collision. * @return *   A database query result resource, or FALSE if the query was not executed *   correctly. */function db_query_temporary($query) {  $args = func_get_args();  $tablename = array_pop($args);  array_shift($args);  $query = preg_replace('/^SELECT/i', 'CREATE TEMPORARY TABLE '. $tablename .' AS SELECT', db_prefix_tables($query));  if (isset($args[0]) and is_array($args[0])) { // 'All arguments in one array' syntax    $args = $args[0];  }  _db_query_callback($args, TRUE);  $query = preg_replace_callback(DB_QUERY_REGEXP, '_db_query_callback', $query);  return _db_query($query);}/** * Returns a properly formatted Binary Large OBject value. * In case of PostgreSQL encodes data for insert into bytea field. * * @param $data *   Data to encode. * @return *  Encoded data. */function db_encode_blob($data) {  return "'". pg_escape_bytea($data) ."'";}/** * Returns text from a Binary Large OBject value. * In case of PostgreSQL decodes data after select from bytea field. * * @param $data *   Data to decode. * @return *  Decoded data. */function db_decode_blob($data) {  return pg_unescape_bytea($data);}/** * Prepare user input for use in a database query, preventing SQL injection attacks. * Note: This function requires PostgreSQL 7.2 or later. */function db_escape_string($text) {  return pg_escape_string($text);}/** * Lock a table. * This function automatically starts a transaction. */function db_lock_table($table) {  db_query('BEGIN; LOCK TABLE {'. db_escape_table($table) .'} IN EXCLUSIVE MODE');}/** * Unlock all locked tables. * This function automatically commits a transaction. */function db_unlock_tables() {  db_query('COMMIT');}/** * Check if a table exists. */function db_table_exists($table) {  return (bool) db_result(db_query("SELECT COUNT(*) FROM pg_class WHERE relname = '{". db_escape_table($table) ."}'"));}/** * Check if a column exists in the given table. */function db_column_exists($table, $column) {  return (bool) db_result(db_query("SELECT COUNT(pg_attribute.attname) FROM pg_class, pg_attribute WHERE pg_attribute.attrelid = pg_class.oid AND pg_class.relname = '{". db_escape_table($table) ."}' AND attname = '". db_escape_table($column) ."'"));}/** * Verify if the database is set up correctly. */function db_check_setup() {  $t = get_t();  $encoding = db_result(db_query('SHOW server_encoding'));  if (!in_array(strtolower($encoding), array('unicode', 'utf8'))) {    drupal_set_message($t('Your PostgreSQL database is set up with the wrong character encoding (%encoding). It is possible it will not work as expected. It is advised to recreate it with UTF-8/Unicode encoding. More information can be found in the <a href="@url">PostgreSQL documentation</a>.', array('%encoding' => $encoding, '@url' => 'http://www.postgresql.org/docs/7.4/interactive/multibyte.html')), 'status');  }}/** * @} End of "ingroup database". *//** * @ingroup schemaapi * @{ *//** * This maps a generic data type in combination with its data size * to the engine-specific data type. */function db_type_map() {  // Put :normal last so it gets preserved by array_flip.  This makes  // it much easier for modules (such as schema.module) to map  // database types back into schema types.  $map = array(    'varchar:normal' => 'varchar',    'char:normal' => 'character',    'text:tiny' => 'text',    'text:small' => 'text',    'text:medium' => 'text',    'text:big' => 'text',    'text:normal' => 'text',    'int:tiny' => 'smallint',    'int:small' => 'smallint',    'int:medium' => 'int',    'int:big' => 'bigint',    'int:normal' => 'int',    'float:tiny' => 'real',    'float:small' => 'real',    'float:medium' => 'real',    'float:big' => 'double precision',    'float:normal' => 'real',    'numeric:normal' => 'numeric',    'blob:big' => 'bytea',    'blob:normal' => 'bytea',    'datetime:normal' => 'timestamp without time zone',    'serial:tiny' => 'serial',    'serial:small' => 'serial',    'serial:medium' => 'serial',    'serial:big' => 'bigserial',    'serial:normal' => 'serial',  );  return $map;}/** * Generate SQL to create a new table from a Drupal schema definition. * * @param $name *   The name of the table to create. * @param $table *   A Schema API table definition array. * @return *   An array of SQL statements to create the table. */function db_create_table_sql($name, $table) {  $sql_fields = array();  foreach ($table['fields'] as $field_name => $field) {    $sql_fields[] = _db_create_field_sql($field_name, _db_process_field($field));  }  $sql_keys = array();  if (isset($table['primary key']) && is_array($table['primary key'])) {    $sql_keys[] = 'PRIMARY KEY ('. implode(', ', $table['primary key']) .')';  }  if (isset($table['unique keys']) && is_array($table['unique keys'])) {    foreach ($table['unique keys'] as $key_name => $key) {      $sql_keys[] = 'CONSTRAINT {'. $name .'}_'. $key_name .'_key UNIQUE ('. implode(', ', $key) .')';    }  }  $sql = "CREATE TABLE {". $name ."} (\n\t";  $sql .= implode(",\n\t", $sql_fields);  if (count($sql_keys) > 0) {    $sql .= ",\n\t";  }  $sql .= implode(",\n\t", $sql_keys);  $sql .= "\n)";  $statements[] = $sql;  if (isset($table['indexes']) && is_array($table['indexes'])) {    foreach ($table['indexes'] as $key_name => $key) {      $statements[] = _db_create_index_sql($name, $key_name, $key);    }  }  return $statements;}function _db_create_index_sql($table, $name, $fields) {  $query = 'CREATE INDEX {'. $table .'}_'. $name .'_idx ON {'. $table .'} (';  $query .= _db_create_key_sql($fields) .')';  return $query;}function _db_create_key_sql($fields) {  $ret = array();  foreach ($fields as $field) {    if (is_array($field)) {      $ret[] = 'substr('. $field[0] .', 1, '. $field[1] .')';    }    else {      $ret[] = $field;    }  }  return implode(', ', $ret);}function _db_create_keys(&$ret, $table, $new_keys) {  if (isset($new_keys['primary key'])) {    db_add_primary_key($ret, $table, $new_keys['primary key']);  }  if (isset($new_keys['unique keys'])) {    foreach ($new_keys['unique keys'] as $name => $fields) {      db_add_unique_key($ret, $table, $name, $fields);    }  }  if (isset($new_keys['indexes'])) {    foreach ($new_keys['indexes'] as $name => $fields) {      db_add_index($ret, $table, $name, $fields);    }  }}/** * Set database-engine specific properties for a field. * * @param $field *   A field description array, as specified in the schema documentation. */function _db_process_field($field) {  if (!isset($field['size'])) {    $field['size'] = 'normal';  }  // Set the correct database-engine specific datatype.  if (!isset($field['pgsql_type'])) {    $map = db_type_map();    $field['pgsql_type'] = $map[$field['type'] .':'. $field['size']];  }  if ($field['type'] == 'serial') {    unset($field['not null']);  }  return $field;}/** * Create an SQL string for a field to be used in table creation or alteration. * * Before passing a field out of a schema definition into this function it has * to be processed by _db_process_field(). * * @param $name *    Name of the field. * @param $spec *    The field specification, as per the schema data structure format. */function _db_create_field_sql($name, $spec) {  $sql = $name .' '. $spec['pgsql_type'];  if ($spec['type'] == 'serial') {    unset($spec['not null']);  }  if (!empty($spec['unsigned'])) {    if ($spec['type'] == 'serial') {      $sql .= " CHECK ($name >= 0)";    }    else {      $sql .= '_unsigned';    }  }  if (in_array($spec['type'], array('varchar', 'char', 'text')) && isset($spec['length'])) {    $sql .= '('. $spec['length'] .')';  }  elseif (isset($spec['precision']) && isset($spec['scale'])) {    $sql .= '('. $spec['precision'] .', '. $spec['scale'] .')';  }  if (isset($spec['not null']) && $spec['not null']) {    $sql .= ' NOT NULL';  }  if (isset($spec['default'])) {    $default = is_string($spec['default']) ? "'". $spec['default'] ."'" : $spec['default'];    $sql .= " default $default";  }  return $sql;}/** * Rename a table. * * @param $ret *   Array to which query results will be added. * @param $table *   The table to be renamed. * @param $new_name *   The new name for the table. */function db_rename_table(&$ret, $table, $new_name) {  $ret[] = update_sql('ALTER TABLE {'. $table .'} RENAME TO {'. $new_name .'}');}/** * Drop a table. * * @param $ret *   Array to which query results will be added. * @param $table *   The table to be dropped. */function db_drop_table(&$ret, $table) {  $ret[] = update_sql('DROP TABLE {'. $table .'}');}/** * Add a new field to a table. * * @param $ret *   Array to which query results will be added. * @param $table *   Name of the table to be altered. * @param $field *   Name of the field to be added. * @param $spec *   The field specification array, as taken from a schema definition. *   The specification may also contain the key 'initial', the newly *   created field will be set to the value of the key in all rows. *   This is most useful for creating NOT NULL columns with no default *   value in existing tables. * @param $keys_new *   Optional keys and indexes specification to be created on the *   table along with adding the field. The format is the same as a *   table specification but without the 'fields' element.  If you are *   adding a type 'serial' field, you MUST specify at least one key *   or index including it in this array. @see db_change_field for more *   explanation why. */function db_add_field(&$ret, $table, $field, $spec, $new_keys = array()) {  $fixnull = FALSE;  if (!empty($spec['not null']) && !isset($spec['default'])) {    $fixnull = TRUE;    $spec['not null'] = FALSE;  }  $query = 'ALTER TABLE {'. $table .'} ADD COLUMN ';  $query .= _db_create_field_sql($field, _db_process_field($spec));  $ret[] = update_sql($query);  if (isset($spec['initial'])) {    // All this because update_sql does not support %-placeholders.    $sql = 'UPDATE {'. $table .'} SET '. $field .' = '. db_type_placeholder($spec['type']);    $result = db_query($sql, $spec['initial']);    $ret[] = array('success' => $result !== FALSE, 'query' => check_plain($sql .' ('. $spec['initial'] .')'));  }  if ($fixnull) {    $ret[] = update_sql("ALTER TABLE {". $table ."} ALTER $field SET NOT NULL");  }  if (isset($new_keys)) {    _db_create_keys($ret, $table, $new_keys);  }}/** * Drop a field. * * @param $ret *   Array to which query results will be added. * @param $table *   The table to be altered. * @param $field *   The field to be dropped. */function db_drop_field(&$ret, $table, $field) {  $ret[] = update_sql('ALTER TABLE {'. $table .'} DROP COLUMN '. $field);}/** * Set the default value for a field. * * @param $ret *   Array to which query results will be added. * @param $table *   The table to be altered. * @param $field *   The field to be altered. * @param $default *   Default value to be set. NULL for 'default NULL'. */function db_field_set_default(&$ret, $table, $field, $default) {  if ($default == NULL) {    $default = 'NULL';  }  else {    $default = is_string($default) ? "'$default'" : $default;  }  $ret[] = update_sql('ALTER TABLE {'. $table .'} ALTER COLUMN '. $field .' SET DEFAULT '. $default);}/** * Set a field to have no default value. * * @param $ret *   Array to which query results will be added. * @param $table *   The table to be altered. * @param $field *   The field to be altered. */function db_field_set_no_default(&$ret, $table, $field) {  $ret[] = update_sql('ALTER TABLE {'. $table .'} ALTER COLUMN '. $field .' DROP DEFAULT');}/** * Add a primary key. * * @param $ret *   Array to which query results will be added. * @param $table *   The table to be altered. * @param $fields *   Fields for the primary key. */function db_add_primary_key(&$ret, $table, $fields) {  $ret[] = update_sql('ALTER TABLE {'. $table .'} ADD PRIMARY KEY ('.    implode(',', $fields) .')');}/** * Drop the primary key. * * @param $ret *   Array to which query results will be added. * @param $table *   The table to be altered. */function db_drop_primary_key(&$ret, $table) {  $ret[] = update_sql('ALTER TABLE {'. $table .'} DROP CONSTRAINT {'. $table .'}_pkey');}/** * Add a unique key. * * @param $ret *   Array to which query results will be added. * @param $table *   The table to be altered. * @param $name *   The name of the key. * @param $fields *   An array of field names. */function db_add_unique_key(&$ret, $table, $name, $fields) {  $name = '{'. $table .'}_'. $name .'_key';  $ret[] = update_sql('ALTER TABLE {'. $table .'} ADD CONSTRAINT '.    $name .' UNIQUE ('. implode(',', $fields) .')');}/** * Drop a unique key. * * @param $ret *   Array to which query results will be added. * @param $table *   The table to be altered. * @param $name *   The name of the key. */function db_drop_unique_key(&$ret, $table, $name) {  $name = '{'. $table .'}_'. $name .'_key';  $ret[] = update_sql('ALTER TABLE {'. $table .'} DROP CONSTRAINT '. $name);}/** * Add an index. * * @param $ret *   Array to which query results will be added. * @param $table *   The table to be altered. * @param $name *   The name of the index. * @param $fields *   An array of field names. */function db_add_index(&$ret, $table, $name, $fields) {  $ret[] = update_sql(_db_create_index_sql($table, $name, $fields));}/** * Drop an index. * * @param $ret *   Array to which query results will be added. * @param $table *   The table to be altered. * @param $name *   The name of the index. */function db_drop_index(&$ret, $table, $name) {  $name = '{'. $table .'}_'. $name .'_idx';  $ret[] = update_sql('DROP INDEX '. $name);}/** * Change a field definition. * * IMPORTANT NOTE: To maintain database portability, you have to explicitly * recreate all indices and primary keys that are using the changed field. * * That means that you have to drop all affected keys and indexes with * db_drop_{primary_key,unique_key,index}() before calling db_change_field(). * To recreate the keys and indices, pass the key definitions as the * optional $new_keys argument directly to db_change_field(). * * For example, suppose you have: * @code * $schema['foo'] = array( *   'fields' => array( *     'bar' => array('type' => 'int', 'not null' => TRUE) *   ), *   'primary key' => array('bar') * ); * @endcode * and you want to change foo.bar to be type serial, leaving it as the * primary key.  The correct sequence is: * @code * db_drop_primary_key($ret, 'foo'); * db_change_field($ret, 'foo', 'bar', 'bar', *   array('type' => 'serial', 'not null' => TRUE), *   array('primary key' => array('bar'))); * @endcode * * The reasons for this are due to the different database engines: * * On PostgreSQL, changing a field definition involves adding a new field * and dropping an old one which* causes any indices, primary keys and * sequences (from serial-type fields) that use the changed field to be dropped. * * On MySQL, all type 'serial' fields must be part of at least one key * or index as soon as they are created.  You cannot use * db_add_{primary_key,unique_key,index}() for this purpose because * the ALTER TABLE command will fail to add the column without a key * or index specification.  The solution is to use the optional * $new_keys argument to create the key or index at the same time as * field. * * You could use db_add_{primary_key,unique_key,index}() in all cases * unless you are converting a field to be type serial. You can use * the $new_keys argument in all cases. * * @param $ret *   Array to which query results will be added. * @param $table *   Name of the table. * @param $field *   Name of the field to change. * @param $field_new *   New name for the field (set to the same as $field if you don't want to change the name). * @param $spec *   The field specification for the new field. * @param $new_keys *   Optional keys and indexes specification to be created on the *   table along with changing the field. The format is the same as a *   table specification but without the 'fields' element. */function db_change_field(&$ret, $table, $field, $field_new, $spec, $new_keys = array()) {  $ret[] = update_sql('ALTER TABLE {'. $table .'} RENAME "'. $field .'" TO "'. $field .'_old"');  $not_null = isset($spec['not null']) ? $spec['not null'] : FALSE;  unset($spec['not null']);  if (!array_key_exists('size', $spec)) {    $spec['size'] = 'normal';  }  db_add_field($ret, $table, "$field_new", $spec);  // We need to type cast the new column to best transfer the data  // db_type_map will return possiblities that are not 'cast-able'  // such as serial - they must be made 'int' instead.  $map =  db_type_map();  $typecast = $map[$spec['type'] .':'. $spec['size']];  if (in_array($typecast, array('serial', 'bigserial', 'numeric'))) {    $typecast = 'int';  }  $ret[] = update_sql('UPDATE {'. $table .'} SET '. $field_new .' = CAST('. $field .'_old AS '. $typecast .')');  if ($not_null) {    $ret[] = update_sql("ALTER TABLE {". $table ."} ALTER $field_new SET NOT NULL");  }  db_drop_field($ret, $table, $field .'_old');  if (isset($new_keys)) {    _db_create_keys($ret, $table, $new_keys);  }}/** * @} End of "ingroup schemaapi". */
<?php// $Id$/** * @file comment-wrapper.tpl.php * Default theme implementation to wrap comments. * * Available variables: * - $content: All comments for a given page. Also contains sorting controls *   and comment forms if the site is configured for it. * * The following variables are provided for contextual information. * - $node: Node object the comments are attached to. * The constants below the variables show the possible values and should be * used for comparison. * - $display_mode *   - COMMENT_MODE_FLAT_COLLAPSED *   - COMMENT_MODE_FLAT_EXPANDED *   - COMMENT_MODE_THREADED_COLLAPSED *   - COMMENT_MODE_THREADED_EXPANDED * - $display_order *   - COMMENT_ORDER_NEWEST_FIRST *   - COMMENT_ORDER_OLDEST_FIRST * - $comment_controls_state *   - COMMENT_CONTROLS_ABOVE *   - COMMENT_CONTROLS_BELOW *   - COMMENT_CONTROLS_ABOVE_BELOW *   - COMMENT_CONTROLS_HIDDEN * * @see template_preprocess_comment_wrapper() * @see theme_comment_wrapper() */?><div id="comments">  <?php print $content; ?></div>
<?php// $Id$?>  <div class="node<?php if ($sticky) { print " sticky"; } ?><?php if (!$status) { print " node-unpublished"; } ?>">    <?php if ($picture) {      print $picture;    }?>    <?php if ($page == 0) { ?><h2 class="title"><a href="<?php print $node_url?>"><?php print $title?></a></h2><?php }; ?>    <span class="submitted"><?php print $submitted?></span>    <div class="taxonomy"><?php print $terms?></div>    <div class="content"><?php print $content?></div>    <?php if ($links) { ?><div class="links">&raquo; <?php print $links?></div><?php }; ?>  </div>
<?php// $Id$?><!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.0 Transitional//EN" "http://www.w3.org/TR/xhtml1/DTD/xhtml1-transitional.dtd"><html xmlns="http://www.w3.org/1999/xhtml" lang="<?php print $language->language ?>" xml:lang="<?php print $language->language ?>" dir="<?php print $language->dir ?>"><head>  <meta http-equiv="Content-Style-Type" content="text/css" />  <?php print $head ?>  <title><?php print $head_title ?></title>  <?php print $styles ?>  <?php print $scripts ?></head><body><div class="hide"><a href="#content" title="<?php print t('Skip navigation') ?>." accesskey="2"><?php print t('Skip navigation') ?></a>.</div><table id="primary-menu" summary="Navigation elements." border="0" cellpadding="0" cellspacing="0" width="100%">  <tr>    <td id="home" width="10%">      <?php if ($logo) : ?>        <a href="<?php print $front_page ?>" title="<?php print t('Home') ?>"><img src="<?php print($logo) ?>" alt="<?php print t('Home') ?>" border="0" /></a>      <?php endif; ?>    </td>    <td id="site-info" width="20%">      <?php if ($site_name) : ?>        <div class='site-name'><a href="<?php print $front_page ?>" title="<?php print t('Home') ?>"><?php print($site_name) ?></a></div>      <?php endif;?>      <?php if ($site_slogan) : ?>        <div class='site-slogan'><?php print($site_slogan) ?></div>      <?php endif;?>    </td>    <td class="primary-links" width="70%" align="center" valign="middle">      <?php print theme('links', $primary_links, array('class' => 'links', 'id' => 'navlist')) ?>    </td>  </tr></table><table id="secondary-menu" summary="Navigation elements." border="0" cellpadding="0" cellspacing="0" width="100%">  <tr>    <td class="secondary-links" width="75%"  align="center" valign="middle">      <?php print theme('links', $secondary_links, array('class' => 'links', 'id' => 'subnavlist')) ?>    </td>    <td width="25%" align="center" valign="middle">      <?php print $search_box ?>    </td>  </tr>  <tr>    <td colspan="2"><div><?php print $header ?></div></td>  </tr></table><table id="content" border="0" cellpadding="15" cellspacing="0" width="100%">  <tr>    <?php if ($left != ""): ?>    <td id="sidebar-left">      <?php print $left ?>    </td>    <?php endif; ?>    <td valign="top">      <?php if ($mission != ""): ?>      <div id="mission"><?php print $mission ?></div>      <?php endif; ?>      <div id="main">        <?php if ($title != ""): ?>          <?php print $breadcrumb ?>          <h1 class="title"><?php print $title ?></h1>          <?php if ($tabs != ""): ?>            <div class="tabs"><?php print $tabs ?></div>          <?php endif; ?>        <?php endif; ?>        <?php if ($show_messages && $messages != ""): ?>          <?php print $messages ?>        <?php endif; ?>        <?php if ($help != ""): ?>            <div id="help"><?php print $help ?></div>        <?php endif; ?>      <!-- start main content -->      <?php print $content; ?>      <?php print $feed_icons; ?>      <!-- end main content -->      </div><!-- main -->    </td>    <?php if ($right != ""): ?>    <td id="sidebar-right">      <?php print $right ?>    </td>    <?php endif; ?>  </tr></table><table id="footer-menu" summary="Navigation elements." border="0" cellpadding="0" cellspacing="0" width="100%">  <tr>    <td align="center" valign="middle">    <?php if (isset($primary_links)) : ?>      <?php print theme('links', $primary_links, array('class' => 'links primary-links')) ?>    <?php endif; ?>    <?php if (isset($secondary_links)) : ?>      <?php print theme('links', $secondary_links, array('class' => 'links secondary-links')) ?>    <?php endif; ?>    </td>  </tr></table><?php if ($footer_message || $footer) : ?><div id="footer-message">    <?php print $footer_message . $footer;?></div><?php endif; ?><?php print $closure;?></body></html>
<?php// $Id$?><div class="comment<?php print ' '. $status; ?>">  <?php if ($picture) : ?>    <?php print $picture ?>  <?php endif; ?>  <h3 class="title"><?php print $title ?></h3>  <div class="submitted"><?php print $submitted ?><?php if ($comment->new) : ?><span class="new"> *<?php print $new ?></span><?php endif; ?></div>  <div class="content">    <?php print $content ?>    <?php if ($signature): ?>      <div class="clear-block">        <div></div>        <?php print $signature ?>      </div>    <?php endif; ?>  </div>  <!-- BEGIN: links -->  <div class="links">&raquo; <?php print $links ?></div>  <!-- END: links --></div>
<?php// $Id$/** * @file poll-bar.tpl.php * Display the bar for a single choice in a poll * * Variables available: * - $title: The title of the poll. * - $votes: The number of votes for this choice * - $total_votes: The number of votes for this choice * - $percentage: The percentage of votes for this choice. * - $vote: The choice number of the current user's vote. * - $voted: Set to TRUE if the user voted for this choice. * * @see template_preprocess_poll_bar() */?><div class="text"><?php print $title; ?></div><div class="bar">  <div style="width: <?php print $percentage; ?>%;" class="foreground"></div></div><div class="percent">  <?php print $percentage; ?>% (<?php print format_plural($votes, '1 vote', '@count votes'); ?>)</div>
<?php// $Id$/** * @file block-admin-display-form.tpl.php * Default theme implementation to configure blocks. * * Available variables: * - $block_regions: An array of regions. Keyed by name with the title as value. * - $block_listing: An array of blocks keyed by region and then delta. * - $form_submit: Form submit button. * - $throttle: TRUE or FALSE depending on throttle module being enabled. * * Each $block_listing[$region] contains an array of blocks for that region. * * Each $data in $block_listing[$region] contains: * - $data->region_title: Region title for the listed block. * - $data->block_title: Block title. * - $data->region_select: Drop-down menu for assigning a region. * - $data->weight_select: Drop-down menu for setting weights. * - $data->throttle_check: Checkbox to enable throttling. * - $data->configure_link: Block configuration link. * - $data->delete_link: For deleting user added blocks. * * @see template_preprocess_block_admin_display_form() * @see theme_block_admin_display() */?><?php  // Add table javascript.  drupal_add_js('misc/tableheader.js');  drupal_add_js(drupal_get_path('module', 'block') .'/block.js');  foreach ($block_regions as $region => $title) {    drupal_add_tabledrag('blocks', 'match', 'sibling', 'block-region-select', 'block-region-'. $region, NULL, FALSE);    drupal_add_tabledrag('blocks', 'order', 'sibling', 'block-weight', 'block-weight-'. $region);  }?><table id="blocks" class="sticky-enabled">  <thead>    <tr>      <th><?php print t('Block'); ?></th>      <th><?php print t('Region'); ?></th>      <th><?php print t('Weight'); ?></th>      <?php if ($throttle): ?>        <th><?php print t('Throttle'); ?></th>      <?php endif; ?>      <th colspan="2"><?php print t('Operations'); ?></th>    </tr>  </thead>  <tbody>    <?php $row = 0; ?>    <?php foreach ($block_regions as $region => $title): ?>      <tr class="region region-<?php print $region?>">        <td colspan="<?php print $throttle ? '6' : '5'; ?>" class="region"><?php print $title; ?></td>      </tr>      <tr class="region-message region-<?php print $region?>-message <?php print empty($block_listing[$region]) ? 'region-empty' : 'region-populated'; ?>">        <td colspan="<?php print $throttle ? '6' : '5'; ?>"><em><?php print t('No blocks in this region'); ?></em></td>      </tr>      <?php foreach ($block_listing[$region] as $delta => $data): ?>      <tr class="draggable <?php print $row % 2 == 0 ? 'odd' : 'even'; ?><?php print $data->row_class ? ' '. $data->row_class : ''; ?>">        <td class="block"><?php print $data->block_title; ?></td>        <td><?php print $data->region_select; ?></td>        <td><?php print $data->weight_select; ?></td>        <?php if ($throttle): ?>          <td><?php print $data->throttle_check; ?></td>        <?php endif; ?>        <td><?php print $data->configure_link; ?></td>        <td><?php print $data->delete_link; ?></td>      </tr>      <?php $row++; ?>      <?php endforeach; ?>    <?php endforeach; ?>  </tbody></table><?php print $form_submit; ?>
<?php// $Id$/** * @file search-block-form.tpl.php * Default theme implementation for displaying a search form within a block region. * * Available variables: * - $search_form: The complete search form ready for print. * - $search: Array of keyed search elements. Can be used to print each form *   element separately. * * Default keys within $search: * - $search['search_block_form']: Text input area wrapped in a div. * - $search['submit']: Form submit button. * - $search['hidden']: Hidden form elements. Used to validate forms when submitted. * * Since $search is keyed, a direct print of the form element is possible. * Modules can add to the search form so it is recommended to check for their * existance before printing. The default keys will always exist. * *   <?php if (isset($search['extra_field'])): ?> *     <div class="extra-field"> *       <?php print $search['extra_field']; ?> *     </div> *   <?php endif; ?> * * To check for all available data within $search, use the code below. * *   <?php print '<pre>'. check_plain(print_r($search, 1)) .'</pre>'; ?> * * @see template_preprocess_search_block_form() */?><div class="container-inline">  <?php print $search_form; ?></div>
<?php// $Id$/** * @file * Drupal site-specific configuration file. * * IMPORTANT NOTE: * This file may have been set to read-only by the Drupal installation * program. If you make changes to this file, be sure to protect it again * after making your modifications. Failure to remove write permissions * to this file is a security risk. * * The configuration file to be loaded is based upon the rules below. * * The configuration directory will be discovered by stripping the * website's hostname from left to right and pathname from right to * left. The first configuration file found will be used and any * others will be ignored. If no other configuration file is found * then the default configuration file at 'sites/default' will be used. * * For example, for a fictitious site installed at * http://www.drupal.org/mysite/test/, the 'settings.php' * is searched in the following directories: * *  1. sites/www.drupal.org.mysite.test *  2. sites/drupal.org.mysite.test *  3. sites/org.mysite.test * *  4. sites/www.drupal.org.mysite *  5. sites/drupal.org.mysite *  6. sites/org.mysite * *  7. sites/www.drupal.org *  8. sites/drupal.org *  9. sites/org * * 10. sites/default * * If you are installing on a non-standard port number, prefix the * hostname with that number. For example, * http://www.drupal.org:8080/mysite/test/ could be loaded from * sites/8080.www.drupal.org.mysite.test/. *//** * Database settings: * * Note that the $db_url variable gets parsed using PHP's built-in * URL parser (i.e. using the "parse_url()" function) so make sure * not to confuse the parser. If your username, password * or database name contain characters used to delineate * $db_url parts, you can escape them via URI hex encodings: * *   : = %3a   / = %2f   @ = %40 *   + = %2b   ( = %28   ) = %29 *   ? = %3f   = = %3d   & = %26 * * To specify multiple connections to be used in your site (i.e. for * complex custom modules) you can also specify an associative array * of $db_url variables with the 'default' element used until otherwise * requested. * * You can optionally set prefixes for some or all database table names * by using the $db_prefix setting. If a prefix is specified, the table * name will be prepended with its value. Be sure to use valid database * characters only, usually alphanumeric and underscore. If no prefixes * are desired, leave it as an empty string ''. * * To have all database names prefixed, set $db_prefix as a string: * *   $db_prefix = 'main_'; * * To provide prefixes for specific tables, set $db_prefix as an array. * The array's keys are the table names and the values are the prefixes. * The 'default' element holds the prefix for any tables not specified * elsewhere in the array. Example: * *   $db_prefix = array( *     'default'   => 'main_', *     'users'     => 'shared_', *     'sessions'  => 'shared_', *     'role'      => 'shared_', *     'authmap'   => 'shared_', *   ); * * Database URL format: *   $db_url = 'mysql://username:password@localhost/databasename'; *   $db_url = 'mysqli://username:password@localhost/databasename'; *   $db_url = 'pgsql://username:password@localhost/databasename'; */$db_url = 'mysql://username:password@localhost/databasename';$db_prefix = '';/** * Access control for update.php script * * If you are updating your Drupal installation using the update.php script * being not logged in as administrator, you will need to modify the access * check statement below. Change the FALSE to a TRUE to disable the access * check. After finishing the upgrade, be sure to open this file again * and change the TRUE back to a FALSE! */$update_free_access = FALSE;/** * Base URL (optional). * * If you are experiencing issues with different site domains, * uncomment the Base URL statement below (remove the leading hash sign) * and fill in the absolute URL to your Drupal installation. * * You might also want to force users to use a given domain. * See the .htaccess file for more information. * * Examples: *   $base_url = 'http://www.example.com'; *   $base_url = 'http://www.example.com:8888'; *   $base_url = 'http://www.example.com/drupal'; *   $base_url = 'https://www.example.com:8888/drupal'; * * It is not allowed to have a trailing slash; Drupal will add it * for you. */# $base_url = 'http://www.example.com';  // NO trailing slash!/** * PHP settings: * * To see what PHP settings are possible, including whether they can * be set at runtime (ie., when ini_set() occurs), read the PHP * documentation at http://www.php.net/manual/en/ini.php#ini.list * and take a look at the .htaccess file to see which non-runtime * settings are used there. Settings defined here should not be * duplicated there so as to avoid conflict issues. */ini_set('arg_separator.output',     '&amp;');ini_set('magic_quotes_runtime',     0);ini_set('magic_quotes_sybase',      0);ini_set('session.cache_expire',     200000);ini_set('session.cache_limiter',    'none');ini_set('session.cookie_lifetime',  2000000);ini_set('session.gc_maxlifetime',   200000);ini_set('session.save_handler',     'user');ini_set('session.use_cookies',      1);ini_set('session.use_only_cookies', 1);ini_set('session.use_trans_sid',    0);ini_set('url_rewriter.tags',        '');/** * If you encounter a situation where users post a large amount of text, and * the result is stripped out upon viewing but can still be edited, Drupal's * output filter may not have sufficient memory to process it. If you * experience this issue, you may wish to uncomment the following two lines * and increase the limits of these variables. For more information, see * http://php.net/manual/en/pcre.configuration.php. */# ini_set('pcre.backtrack_limit', 200000);# ini_set('pcre.recursion_limit', 200000);/** * Drupal automatically generates a unique session cookie name for each site * based on on its full domain name. If you have multiple domains pointing at * the same Drupal site, you can either redirect them all to a single domain * (see comment in .htaccess), or uncomment the line below and specify their * shared base domain. Doing so assures that users remain logged in as they * cross between your various domains. */# $cookie_domain = 'example.com';/** * Variable overrides: * * To override specific entries in the 'variable' table for this site, * set them here. You usually don't need to use this feature. This is * useful in a configuration file for a vhost or directory, rather than * the default settings.php. Any configuration setting from the 'variable' * table can be given a new value. Note that any values you provide in * these variable overrides will not be modifiable from the Drupal * administration interface. * * Remove the leading hash signs to enable. */# $conf = array(#   'site_name' => 'My Drupal site',#   'theme_default' => 'minnelli',#   'anonymous' => 'Visitor',/** * A custom theme can be set for the off-line page. This applies when the site * is explicitly set to off-line mode through the administration page or when * the database is inactive due to an error. It can be set through the * 'maintenance_theme' key. The template file should also be copied into the * theme. It is located inside 'modules/system/maintenance-page.tpl.php'. * Note: This setting does not apply to installation and update pages. */#   'maintenance_theme' => 'minnelli',/** * reverse_proxy accepts a boolean value. * * Enable this setting to determine the correct IP address of the remote * client by examining information stored in the X-Forwarded-For headers. * X-Forwarded-For headers are a standard mechanism for identifying client * systems connecting through a reverse proxy server, such as Squid or * Pound. Reverse proxy servers are often used to enhance the performance * of heavily visited sites and may also provide other site caching, * security or encryption benefits. If this Drupal installation operates * behind a reverse proxy, this setting should be enabled so that correct * IP address information is captured in Drupal's session management, * logging, statistics and access management systems; if you are unsure * about this setting, do not have a reverse proxy, or Drupal operates in * a shared hosting environment, this setting should be set to disabled. */#   'reverse_proxy' => TRUE,/** * reverse_proxy accepts an array of IP addresses. * * Each element of this array is the IP address of any of your reverse * proxies. Filling this array Drupal will trust the information stored * in the X-Forwarded-For headers only if Remote IP address is one of * these, that is the request reaches the web server from one of your * reverse proxies. Otherwise, the client could directly connect to * your web server spoofing the X-Forwarded-For headers. */#   'reverse_proxy_addresses' => array('a.b.c.d', ...),# );/** * String overrides: * * To override specific strings on your site with or without enabling locale * module, add an entry to this list. This functionality allows you to change * a small number of your site's default English language interface strings. * * Remove the leading hash signs to enable. */# $conf['locale_custom_strings_en'] = array(#   'forum'      => 'Discussion board',#   '@count min' => '@count minutes',# );
<?php// $Id$/** * @file box.tpl.php * * Theme implementation to display a box. * * Available variables: * - $title: Box title. * - $content: Box content. * * @see template_preprocess() */?><div class="box"><?php if ($title): ?>  <h2><?php print $title ?></h2><?php endif; ?>  <div class="content"><?php print $content ?></div></div>
<?php// $Id$/** * @file * Code required only for the update status settings form. *//** * Form builder for the update settings tab. */function update_settings() {  $form = array();  $notify_emails = variable_get('update_notify_emails', array());  $form['update_notify_emails'] = array(    '#type' => 'textarea',    '#title' => t('E-mail addresses to notify when updates are available'),    '#rows' => 4,    '#default_value' => implode("\n", $notify_emails),    '#description' => t('Whenever your site checks for available updates and finds new releases, it can notify a list of users via e-mail. Put each address on a separate line. If blank, no e-mails will be sent.'),  );  $form['update_check_frequency'] = array(    '#type' => 'radios',    '#title' => t('Check for updates'),    '#default_value' => variable_get('update_check_frequency', 1),    '#options' => array(      '1' => t('Daily'),      '7' => t('Weekly'),    ),    '#description' => t('Select how frequently you want to automatically check for new releases of your currently installed modules and themes.'),  );  $form['update_notification_threshold'] = array(    '#type' => 'radios',    '#title' => t('E-mail notification threshold'),    '#default_value' => variable_get('update_notification_threshold', 'all'),    '#options' => array(      'all' => t('All newer versions'),      'security' => t('Only security updates'),    ),    '#description' => t('You can choose to send e-mail only if a security update is available, or to be notified about all newer versions. If there are updates available of Drupal core or any of your installed modules and themes, your site will always print a message on the <a href="@status_report">status report</a> page, and will also display an error message on administration pages if there is a security update.', array('@status_report' => url('admin/reports/status')))  );  $form = system_settings_form($form);  // Custom valiation callback for the email notification setting.  $form['#validate'][] = 'update_settings_validate';  // We need to call our own submit callback first, not the one from  // system_settings_form(), so that we can process and save the emails.  unset($form['#submit']);  return $form;}/** * Validation callback for the settings form. * * Validates the email addresses and ensures the field is formatted correctly. */function update_settings_validate($form, &$form_state) {  if (!empty($form_state['values']['update_notify_emails'])) {    $valid = array();    $invalid = array();    foreach (explode("\n", trim($form_state['values']['update_notify_emails'])) as $email) {      $email = trim($email);      if (!empty($email)) {        if (valid_email_address($email)) {          $valid[] = $email;        }        else {          $invalid[] = $email;        }      }    }    if (empty($invalid)) {      $form_state['notify_emails'] = $valid;    }    elseif (count($invalid) == 1) {      form_set_error('update_notify_emails', t('%email is not a valid e-mail address.', array('%email' => reset($invalid))));    }    else {      form_set_error('update_notify_emails', t('%emails are not valid e-mail addresses.', array('%emails' => implode(', ', $invalid))));    }  }}/** * Submit handler for the settings tab. */function update_settings_submit($form, $form_state) {  $op = $form_state['values']['op'];  if ($op == t('Reset to defaults')) {    unset($form_state['notify_emails']);  }  else {    if (empty($form_state['notify_emails'])) {      variable_del('update_notify_emails');    }    else {      variable_set('update_notify_emails', $form_state['notify_emails']);    }    unset($form_state['notify_emails']);    unset($form_state['values']['update_notify_emails']);  }  system_settings_form_submit($form, $form_state);}
<?php// $Id$/** * @file search-results.tpl.php * Default theme implementation for displaying search results. * * This template collects each invocation of theme_search_result(). This and * the child template are dependant to one another sharing the markup for * definition lists. * * Note that modules may implement their own search type and theme function * completely bypassing this template. * * Available variables: * - $search_results: All results as it is rendered through *   search-result.tpl.php * - $type: The type of search, e.g., "node" or "user". * * * @see template_preprocess_search_results() */?><dl class="search-results <?php print $type; ?>-results">  <?php print $search_results; ?></dl><?php print $pager; ?>
<?php// $Id$/** * @file aggregator-item.tpl.php * Default theme implementation to format an individual feed item for display * on the aggregator page. * * Available variables: * - $feed_url: URL to the originating feed item. * - $feed_title: Title of the feed item. * - $source_url: Link to the local source section. * - $source_title: Title of the remote source. * - $source_date: Date the feed was posted on the remote source. * - $content: Feed item content. * - $categories: Linked categories assigned to the feed. * * @see template_preprocess() * @see template_preprocess_aggregator_item() */?><div class="feed-item">  <h3 class="feed-item-title">    <a href="<?php print $feed_url; ?>"><?php print $feed_title; ?></a>  </h3>  <div class="feed-item-meta">  <?php if ($source_url) : ?>    <a href="<?php print $source_url; ?>" class="feed-item-source"><?php print $source_title; ?></a> -  <?php endif; ?>    <span class="feed-item-date"><?php print $source_date; ?></span>  </div><?php if ($content) : ?>  <div class="feed-item-body">    <?php print $content; ?>  </div><?php endif; ?><?php if ($categories) : ?>  <div class="feed-item-categories">    <?php print t('Categories'); ?>: <?php print implode(', ', $categories); ?>  </div><?php endif ;?></div>
<?php// $Id$/** * @file * User page callbacks for the statistics module. */function statistics_node_tracker() {  if ($node = node_load(arg(1))) {    $header = array(        array('data' => t('Time'), 'field' => 'a.timestamp', 'sort' => 'desc'),        array('data' => t('Referrer'), 'field' => 'a.url'),        array('data' => t('User'), 'field' => 'u.name'),        array('data' => t('Operations')));    $result = pager_query("SELECT a.aid, a.timestamp, a.url, a.uid, u.name FROM {accesslog} a LEFT JOIN {users} u ON a.uid = u.uid WHERE a.path = 'node/%d' OR a.path LIKE 'node/%d/%%'". tablesort_sql($header), 30, 0, NULL, $node->nid, $node->nid);    $rows = array();    while ($log = db_fetch_object($result)) {      $rows[] = array(        array('data' => format_date($log->timestamp, 'small'), 'class' => 'nowrap'),        _statistics_link($log->url),        theme('username', $log),        l(t('details'), "admin/reports/access/$log->aid"));    }    if (empty($rows)) {      $rows[] = array(array('data' => t('No statistics available.'), 'colspan' => 4));    }    drupal_set_title(check_plain($node->title));    $output = theme('table', $header, $rows);    $output .= theme('pager', NULL, 30, 0);    return $output;  }  else {    drupal_not_found();  }}function statistics_user_tracker() {  if ($account = user_load(array('uid' => arg(1)))) {    $header = array(        array('data' => t('Timestamp'), 'field' => 'timestamp', 'sort' => 'desc'),        array('data' => t('Page'), 'field' => 'path'),        array('data' => t('Operations')));    $result = pager_query('SELECT aid, timestamp, path, title FROM {accesslog} WHERE uid = %d'. tablesort_sql($header), 30, 0, NULL, $account->uid);    $rows = array();    while ($log = db_fetch_object($result)) {      $rows[] = array(        array('data' => format_date($log->timestamp, 'small'), 'class' => 'nowrap'),        _statistics_format_item($log->title, $log->path),        l(t('details'), "admin/reports/access/$log->aid"));    }    if (empty($rows)) {      $rows[] = array(array('data' => t('No statistics available.'), 'colspan' => 3));    }    drupal_set_title(check_plain($account->name));    $output = theme('table', $header, $rows);    $output .= theme('pager', NULL, 30, 0);    return $output;  }  else {    drupal_not_found();  }}
<?php// $Id$/** * @file book-node-export-html.tpl.php * Default theme implementation for rendering a single node in a printer * friendly outline. * * @see book-node-export-html.tpl.php * Where it is collected and printed out. * * Available variables: * - $depth: Depth of the current node inside the outline. * - $title: Node title. * - $content: Node content. * - $children: All the child nodes recursively rendered through this file. * * @see template_preprocess_book_node_export_html() */?><div id="node-<?php print $node->nid; ?>" class="section-<?php print $depth; ?>">  <h1 class="book-heading"><?php print $title; ?></h1>  <?php print $content; ?>  <?php print $children; ?></div>
<?php// $Id$/** * @file * Administrative page for handling updates from one Drupal version to another. * * Point your browser to "http://www.example.com/update.php" and follow the * instructions. * * If you are not logged in as administrator, you will need to modify the access * check statement inside your settings.php file. After finishing the upgrade, * be sure to open settings.php again, and change it back to its original state! *//** * Global flag to identify update.php run, and so avoid various unwanted * operations, such as hook_init() and hook_exit() invokes, css/js preprocessing * and translation, and solve some theming issues. This flag is checked on several * places in Drupal code (not just update.php). */define('MAINTENANCE_MODE', 'update');/** * Add a column to a database using syntax appropriate for PostgreSQL. * Save result of SQL commands in $ret array. * * Note: when you add a column with NOT NULL and you are not sure if there are * already rows in the table, you MUST also add DEFAULT. Otherwise PostgreSQL * won't work when the table is not empty, and db_add_column() will fail. * To have an empty string as the default, you must use: 'default' => "''" * in the $attributes array. If NOT NULL and DEFAULT are set the PostgreSQL * version will set values of the added column in old rows to the * DEFAULT value. * * @param $ret *   Array to which results will be added. * @param $table *   Name of the table, without {} * @param $column *   Name of the column * @param $type *   Type of column * @param $attributes *   Additional optional attributes. Recognized attributes: *     not null => TRUE|FALSE *     default  => NULL|FALSE|value (the value must be enclosed in '' marks) * @return *   nothing, but modifies $ret parameter. */function db_add_column(&$ret, $table, $column, $type, $attributes = array()) {  if (array_key_exists('not null', $attributes) and $attributes['not null']) {    $not_null = 'NOT NULL';  }  if (array_key_exists('default', $attributes)) {    if (is_null($attributes['default'])) {      $default_val = 'NULL';      $default = 'default NULL';    }    elseif ($attributes['default'] === FALSE) {      $default = '';    }    else {      $default_val = "$attributes[default]";      $default = "default $attributes[default]";    }  }  $ret[] = update_sql("ALTER TABLE {". $table ."} ADD $column $type");  if (!empty($default)) {    $ret[] = update_sql("ALTER TABLE {". $table ."} ALTER $column SET $default");  }  if (!empty($not_null)) {    if (!empty($default)) {      $ret[] = update_sql("UPDATE {". $table ."} SET $column = $default_val");    }    $ret[] = update_sql("ALTER TABLE {". $table ."} ALTER $column SET NOT NULL");  }}/** * Change a column definition using syntax appropriate for PostgreSQL. * Save result of SQL commands in $ret array. * * Remember that changing a column definition involves adding a new column * and dropping an old one. This means that any indices, primary keys and * sequences from serial-type columns are dropped and might need to be * recreated. * * @param $ret *   Array to which results will be added. * @param $table *   Name of the table, without {} * @param $column *   Name of the column to change * @param $column_new *   New name for the column (set to the same as $column if you don't want to change the name) * @param $type *   Type of column * @param $attributes *   Additional optional attributes. Recognized attributes: *     not null => TRUE|FALSE *     default  => NULL|FALSE|value (with or without '', it won't be added) * @return *   nothing, but modifies $ret parameter. */function db_change_column(&$ret, $table, $column, $column_new, $type, $attributes = array()) {  if (array_key_exists('not null', $attributes) and $attributes['not null']) {    $not_null = 'NOT NULL';  }  if (array_key_exists('default', $attributes)) {    if (is_null($attributes['default'])) {      $default_val = 'NULL';      $default = 'default NULL';    }    elseif ($attributes['default'] === FALSE) {      $default = '';    }    else {      $default_val = "$attributes[default]";      $default = "default $attributes[default]";    }  }  $ret[] = update_sql("ALTER TABLE {". $table ."} RENAME $column TO ". $column ."_old");  $ret[] = update_sql("ALTER TABLE {". $table ."} ADD $column_new $type");  $ret[] = update_sql("UPDATE {". $table ."} SET $column_new = ". $column ."_old");  if ($default) { $ret[] = update_sql("ALTER TABLE {". $table ."} ALTER $column_new SET $default"); }  if ($not_null) { $ret[] = update_sql("ALTER TABLE {". $table ."} ALTER $column_new SET NOT NULL"); }  $ret[] = update_sql("ALTER TABLE {". $table ."} DROP ". $column ."_old");}/** * Perform one update and store the results which will later be displayed on * the finished page. * * An update function can force the current and all later updates for this * module to abort by returning a $ret array with an element like: * $ret['#abort'] = array('success' => FALSE, 'query' => 'What went wrong'); * The schema version will not be updated in this case, and all the * aborted updates will continue to appear on update.php as updates that * have not yet been run. * * @param $module *   The module whose update will be run. * @param $number *   The update number to run. * @param $context *   The batch context array */function update_do_one($module, $number, &$context) {  // If updates for this module have been aborted  // in a previous step, go no further.  if (!empty($context['results'][$module]['#abort'])) {    return;  }  $function = $module .'_update_'. $number;  if (function_exists($function)) {    $ret = $function($context['sandbox']);  }  if (isset($ret['#finished'])) {    $context['finished'] = $ret['#finished'];    unset($ret['#finished']);  }  if (!isset($context['results'][$module])) {    $context['results'][$module] = array();  }  if (!isset($context['results'][$module][$number])) {    $context['results'][$module][$number] = array();  }  $context['results'][$module][$number] = array_merge($context['results'][$module][$number], $ret);  if (!empty($ret['#abort'])) {    $context['results'][$module]['#abort'] = TRUE;  }  // Record the schema update if it was completed successfully.  if ($context['finished'] == 1 && empty($context['results'][$module]['#abort'])) {    drupal_set_installed_schema_version($module, $number);  }  $context['message'] = 'Updating '. check_plain($module) .' module';}function update_selection_page() {  $output = '<p>The version of Drupal you are updating from has been automatically detected. You can select a different version, but you should not need to.</p>';  $output .= '<p>Click Update to start the update process.</p>';  drupal_set_title('Drupal database update');  $output .= drupal_get_form('update_script_selection_form');  update_task_list('select');  return $output;}function update_script_selection_form() {  $form = array();  $form['start'] = array(    '#tree' => TRUE,    '#type' => 'fieldset',    '#title' => 'Select versions',    '#collapsible' => TRUE,    '#collapsed' => TRUE,  );  // Ensure system.module's updates appear first  $form['start']['system'] = array();  $modules = drupal_get_installed_schema_version(NULL, FALSE, TRUE);  foreach ($modules as $module => $schema_version) {    $updates = drupal_get_schema_versions($module);    // Skip incompatible module updates completely, otherwise test schema versions.    if (!update_check_incompatibility($module) && $updates !== FALSE && $schema_version >= 0) {      // module_invoke returns NULL for nonexisting hooks, so if no updates      // are removed, it will == 0.      $last_removed = module_invoke($module, 'update_last_removed');      if ($schema_version < $last_removed) {        $form['start'][$module] = array(          '#value'  => '<em>'. $module .'</em> module can not be updated. Its schema version is '. $schema_version .'. Updates up to and including '. $last_removed .' have been removed in this release. In order to update <em>'. $module .'</em> module, you will first <a href="http://drupal.org/upgrade">need to upgrade</a> to the last version in which these updates were available.',          '#prefix' => '<div class="warning">',          '#suffix' => '</div>',        );        $form['start']['#collapsed'] = FALSE;        continue;      }      $updates = drupal_map_assoc($updates);      $updates[] = 'No updates available';      $default = $schema_version;      foreach (array_keys($updates) as $update) {        if ($update > $schema_version) {          $default = $update;          break;        }      }      $form['start'][$module] = array(        '#type' => 'select',        '#title' => $module .' module',        '#default_value' => $default,        '#options' => $updates,      );    }  }  $form['has_js'] = array(    '#type' => 'hidden',    '#default_value' => FALSE,  );  $form['submit'] = array(    '#type' => 'submit',    '#value' => 'Update',  );  return $form;}function update_batch() {  global $base_url;  $operations = array();  // Set the installed version so updates start at the correct place.  foreach ($_POST['start'] as $module => $version) {    drupal_set_installed_schema_version($module, $version - 1);    $updates = drupal_get_schema_versions($module);    $max_version = max($updates);    if ($version <= $max_version) {      foreach ($updates as $update) {        if ($update >= $version) {          $operations[] = array('update_do_one', array($module, $update));        }      }    }  }  $batch = array(    'operations' => $operations,    'title' => 'Updating',    'init_message' => 'Starting updates',    'error_message' => 'An unrecoverable error has occurred. You can find the error message below. It is advised to copy it to the clipboard for reference.',    'finished' => 'update_finished',  );  batch_set($batch);  batch_process($base_url .'/update.php?op=results', $base_url .'/update.php');}function update_finished($success, $results, $operations) {  // clear the caches in case the data has been updated.  drupal_flush_all_caches();  $_SESSION['update_results'] = $results;  $_SESSION['update_success'] = $success;  $_SESSION['updates_remaining'] = $operations;}function update_results_page() {  drupal_set_title('Drupal database update');  // NOTE: we can't use l() here because the URL would point to 'update.php?q=admin'.  $links[] = '<a href="'. base_path() .'">Main page</a>';  $links[] = '<a href="'. base_path() .'?q=admin">Administration pages</a>';  update_task_list();  // Report end result  if (module_exists('dblog')) {    $log_message = ' All errors have been <a href="'. base_path() .'?q=admin/reports/dblog">logged</a>.';  }  else {    $log_message = ' All errors have been logged.';  }  if ($_SESSION['update_success']) {    $output = '<p>Updates were attempted. If you see no failures below, you may proceed happily to the <a href="'. base_path() .'?q=admin">administration pages</a>. Otherwise, you may need to update your database manually.'. $log_message .'</p>';  }  else {    list($module, $version) = array_pop(reset($_SESSION['updates_remaining']));    $output = '<p class="error">The update process was aborted prematurely while running <strong>update #'. $version .' in '. $module .'.module</strong>.'. $log_message;    if (module_exists('dblog')) {      $output .= ' You may need to check the <code>watchdog</code> database table manually.';    }    $output .= '</p>';  }  if (!empty($GLOBALS['update_free_access'])) {    $output .= "<p><strong>Reminder: don't forget to set the <code>\$update_free_access</code> value in your <code>settings.php</code> file back to <code>FALSE</code>.</strong></p>";  }  $output .= theme('item_list', $links);  // Output a list of queries executed  if (!empty($_SESSION['update_results'])) {    $output .= '<div id="update-results">';    $output .= '<h2>The following queries were executed</h2>';    foreach ($_SESSION['update_results'] as $module => $updates) {      $output .= '<h3>'. $module .' module</h3>';      foreach ($updates as $number => $queries) {        if ($number != '#abort') {          $output .= '<h4>Update #'. $number .'</h4>';          $output .= '<ul>';          foreach ($queries as $query) {            if ($query['success']) {              $output .= '<li class="success">'. $query['query'] .'</li>';            }            else {              $output .= '<li class="failure"><strong>Failed:</strong> '. $query['query'] .'</li>';            }          }          if (!count($queries)) {            $output .= '<li class="none">No queries</li>';          }        }        $output .= '</ul>';      }    }    $output .= '</div>';  }  unset($_SESSION['update_results']);  unset($_SESSION['update_success']);  return $output;}function update_info_page() {  // Change query-strings on css/js files to enforce reload for all users.  _drupal_flush_css_js();  // Flush the cache of all data for the update status module.  if (db_table_exists('cache_update')) {    cache_clear_all('*', 'cache_update', TRUE);  }  update_task_list('info');  drupal_set_title('Drupal database update');  $token = drupal_get_token('update');  $output = '<p>Use this utility to update your database whenever a new release of Drupal or a module is installed.</p><p>For more detailed information, see the <a href="http://drupal.org/node/258">Installation and upgrading handbook</a>. If you are unsure what these terms mean you should probably contact your hosting provider.</p>';  $output .= "<ol>\n";  $output .= "<li><strong>Back up your database</strong>. This process will change your database values and in case of emergency you may need to revert to a backup.</li>\n";  $output .= "<li><strong>Back up your code</strong>. Hint: when backing up module code, do not leave that backup in the 'modules' or 'sites/*/modules' directories as this may confuse Drupal's auto-discovery mechanism.</li>\n";  $output .= '<li>Put your site into <a href="'. base_path() .'?q=admin/settings/site-maintenance">maintenance mode</a>.</li>'."\n";  $output .= "<li>Install your new files in the appropriate location, as described in the handbook.</li>\n";  $output .= "</ol>\n";  $output .= "<p>When you have performed the steps above, you may proceed.</p>\n";  $output .= '<form method="post" action="update.php?op=selection&amp;token='. $token .'"><p><input type="submit" value="Continue" /></p></form>';  $output .= "\n";  return $output;}function update_access_denied_page() {  drupal_set_title('Access denied');  return '<p>Access denied. You are not authorized to access this page. Please log in as the admin user (the first user you created). If you cannot log in, you will have to edit <code>settings.php</code> to bypass this access check. To do this:</p><ol> <li>With a text editor find the settings.php file on your system. From the main Drupal directory that you installed all the files into, go to <code>sites/your_site_name</code> if such directory exists, or else to <code>sites/default</code> which applies otherwise.</li> <li>There is a line inside your settings.php file that says <code>$update_free_access = FALSE;</code>. Change it to <code>$update_free_access = TRUE;</code>.</li> <li>As soon as the update.php script is done, you must change the settings.php file back to its original form with <code>$update_free_access = FALSE;</code>.</li> <li>To avoid having this problem in future, remember to log in to your website as the admin user (the user you first created) before you backup your database at the beginning of the update process.</li></ol>';}/** * Create the batch table. * * This is part of the Drupal 5.x to 6.x migration. */function update_create_batch_table() {  // If batch table exists, update is not necessary  if (db_table_exists('batch')) {    return;  }  $schema['batch'] = array(    'fields' => array(      'bid'       => array('type' => 'serial', 'unsigned' => TRUE, 'not null' => TRUE),      'token'     => array('type' => 'varchar', 'length' => 64, 'not null' => TRUE),      'timestamp' => array('type' => 'int', 'not null' => TRUE),      'batch'     => array('type' => 'text', 'not null' => FALSE, 'size' => 'big')    ),    'primary key' => array('bid'),    'indexes' => array('token' => array('token')),  );  $ret = array();  db_create_table($ret, 'batch', $schema['batch']);  return $ret;}/** * Disable anything in the {system} table that is not compatible with the * current version of Drupal core. */function update_fix_compatibility() {  $ret = array();  $incompatible = array();  $query = db_query("SELECT name, type, status FROM {system} WHERE status = 1 AND type IN ('module','theme')");  while ($result = db_fetch_object($query)) {    if (update_check_incompatibility($result->name, $result->type)) {      $incompatible[] = $result->name;    }  }  if (!empty($incompatible)) {    $ret[] = update_sql("UPDATE {system} SET status = 0 WHERE name IN ('". implode("','", $incompatible) ."')");  }  return $ret;}/** * Helper function to test compatibility of a module or theme. */function update_check_incompatibility($name, $type = 'module') {  static $themes, $modules;  // Store values of expensive functions for future use.  if (empty($themes) || empty($modules)) {    $themes = _system_theme_data();    $modules = module_rebuild_cache();  }  if ($type == 'module' && isset($modules[$name])) {    $file = $modules[$name];  }  else if ($type == 'theme' && isset($themes[$name])) {    $file = $themes[$name];  }  if (!isset($file)      || !isset($file->info['core'])      || $file->info['core'] != DRUPAL_CORE_COMPATIBILITY      || version_compare(phpversion(), $file->info['php']) < 0) {    return TRUE;  }  return FALSE;}/** * Perform Drupal 5.x to 6.x updates that are required for update.php * to function properly. * * This function runs when update.php is run the first time for 6.x, * even before updates are selected or performed.  It is important * that if updates are not ultimately performed that no changes are * made which make it impossible to continue using the prior version. * Just adding columns is safe.  However, renaming the * system.description column to owner is not.  Therefore, we add the * system.owner column and leave it to system_update_6008() to copy * the data from description and remove description. The same for * renaming locales_target.locale to locales_target.language, which * will be finished by locale_update_6002(). */function update_fix_d6_requirements() {  $ret = array();  if (drupal_get_installed_schema_version('system') < 6000 && !variable_get('update_d6_requirements', FALSE)) {    $spec = array('type' => 'int', 'size' => 'small', 'default' => 0, 'not null' => TRUE);    db_add_field($ret, 'cache', 'serialized', $spec);    db_add_field($ret, 'cache_filter', 'serialized', $spec);    db_add_field($ret, 'cache_page', 'serialized', $spec);    db_add_field($ret, 'cache_menu', 'serialized', $spec);    db_add_field($ret, 'system', 'info', array('type' => 'text'));    db_add_field($ret, 'system', 'owner', array('type' => 'varchar', 'length' => 255, 'not null' => TRUE, 'default' => ''));    if (db_table_exists('locales_target')) {      db_add_field($ret, 'locales_target', 'language', array('type' => 'varchar', 'length' => 12, 'not null' => TRUE, 'default' => ''));    }    if (db_table_exists('locales_source')) {      db_add_field($ret, 'locales_source', 'textgroup', array('type' => 'varchar', 'length' => 255, 'not null' => TRUE, 'default' => 'default'));      db_add_field($ret, 'locales_source', 'version', array('type' => 'varchar', 'length' => 20, 'not null' => TRUE, 'default' => 'none'));    }    variable_set('update_d6_requirements', TRUE);    // Create the cache_block table. See system_update_6027() for more details.    $schema['cache_block'] = array(      'fields' => array(        'cid'        => array('type' => 'varchar', 'length' => 255, 'not null' => TRUE, 'default' => ''),        'data'       => array('type' => 'blob', 'not null' => FALSE, 'size' => 'big'),        'expire'     => array('type' => 'int', 'not null' => TRUE, 'default' => 0),        'created'    => array('type' => 'int', 'not null' => TRUE, 'default' => 0),        'headers'    => array('type' => 'text', 'not null' => FALSE),        'serialized' => array('type' => 'int', 'size' => 'small', 'not null' => TRUE, 'default' => 0)      ),      'indexes' => array('expire' => array('expire')),      'primary key' => array('cid'),    );    db_create_table($ret, 'cache_block', $schema['cache_block']);  }  return $ret;}/** * Add the update task list to the current page. */function update_task_list($active = NULL) {  // Default list of tasks.  $tasks = array(    'info' => 'Overview',    'select' => 'Select updates',    'run' => 'Run updates',    'finished' => 'Review log',  );  drupal_set_content('left', theme('task_list', $tasks, $active));}/** * Check update requirements and report any errors. */function update_check_requirements() {  // Check the system module requirements only.  $requirements = module_invoke('system', 'requirements', 'update');  $severity = drupal_requirements_severity($requirements);  // If there are issues, report them.  if ($severity != REQUIREMENT_OK) {    foreach ($requirements as $requirement) {      if (isset($requirement['severity']) && $requirement['severity'] != REQUIREMENT_OK) {        $message = isset($requirement['description']) ? $requirement['description'] : '';        if (isset($requirement['value']) && $requirement['value']) {          $message .= ' (Currently using '. $requirement['title'] .' '. $requirement['value'] .')';        }        drupal_set_message($message, 'warning');      }    }  }}// Some unavoidable errors happen because the database is not yet up-to-date.// Our custom error handler is not yet installed, so we just suppress them.ini_set('display_errors', FALSE);require_once './includes/bootstrap.inc';// We only load DRUPAL_BOOTSTRAP_CONFIGURATION for the update requirements// check to avoid reaching the PHP memory limit.$op = isset($_REQUEST['op']) ? $_REQUEST['op'] : '';if (empty($op)) {  // Minimum load of components.  drupal_bootstrap(DRUPAL_BOOTSTRAP_CONFIGURATION);  require_once './includes/install.inc';  require_once './includes/file.inc';  require_once './modules/system/system.install';  // Load module basics.  include_once './includes/module.inc';  $module_list['system']['filename'] = 'modules/system/system.module';  $module_list['filter']['filename'] = 'modules/filter/filter.module';  module_list(TRUE, FALSE, FALSE, $module_list);  drupal_load('module', 'system');  drupal_load('module', 'filter');  // Set up $language, since the installer components require it.  drupal_init_language();  // Set up theme system for the maintenance page.  drupal_maintenance_theme();  // Check the update requirements for Drupal.  update_check_requirements();  // Display the warning messages (if any) in a dedicated maintenance page,  // or redirect to the update information page if no message.  $messages = drupal_set_message();  if (!empty($messages['warning'])) {    drupal_maintenance_theme();    print theme('update_page', '<form method="post" action="update.php?op=info"><input type="submit" value="Continue" /></form>', FALSE);    exit;  }  install_goto('update.php?op=info');}drupal_bootstrap(DRUPAL_BOOTSTRAP_FULL);drupal_maintenance_theme();// This must happen *after* drupal_bootstrap(), since it calls// variable_(get|set), which only works after a full bootstrap.update_create_batch_table();// Turn error reporting back on. From now on, only fatal errors (which are// not passed through the error handler) will cause a message to be printed.ini_set('display_errors', TRUE);// Access check:if (!empty($update_free_access) || $user->uid == 1) {  include_once './includes/install.inc';  include_once './includes/batch.inc';  drupal_load_updates();  update_fix_d6_requirements();  update_fix_compatibility();  $op = isset($_REQUEST['op']) ? $_REQUEST['op'] : '';  switch ($op) {    case 'selection':      if (isset($_GET['token']) && $_GET['token'] == drupal_get_token('update')) {        $output = update_selection_page();        break;      }    case 'Update':      if (isset($_GET['token']) && $_GET['token'] == drupal_get_token('update')) {        update_batch();        break;      }    // update.php ops    case 'info':      $output = update_info_page();      break;    case 'results':      $output = update_results_page();      break;    // Regular batch ops : defer to batch processing API    default:      update_task_list('run');      $output = _batch_page();      break;  }}else {  $output = update_access_denied_page();}if (isset($output) && $output) {  // We defer the display of messages until all updates are done.  $progress_page = ($batch = batch_get()) && isset($batch['running']);  print theme('update_page', $output, !$progress_page);}
<?php// $Id$?><div class="<?php print "block block-$block->module" ?>" id="<?php print "block-$block->module-$block->delta"; ?>">  <div class="title"><h3><?php print $block->subject ?></h3></div>  <div class="content"><?php print $block->content ?></div></div>
<?php// $Id$/** * @file forums.tpl.php * Default theme implementation to display a forum which may contain forum * containers as well as forum topics. * * Variables available: * - $links: An array of links that allow a user to post new forum topics. *   It may also contain a string telling a user they must log in in order *   to post. * - $forums: The forums to display (as processed by forum-list.tpl.php) * - $topics: The topics to display (as processed by forum-topic-list.tpl.php) * - $forums_defined: A flag to indicate that the forums are configured. * * @see template_preprocess_forums() * @see theme_forums() */?><?php if ($forums_defined): ?><div id="forum">  <?php print theme('links', $links); ?>  <?php print $forums; ?>  <?php print $topics; ?></div><?php endif; ?>
<?php// $Id$/** * @file * Allows configuration of congestion control auto-throttle mechanism. */function throttle_menu() {  $items['admin/settings/throttle'] = array(    'title' => 'Throttle',    'description' => 'Control how your site cuts out content during heavy load.',    'page callback' => 'drupal_get_form',    'page arguments' => array('throttle_admin_settings'),    'access arguments' => array('administer site configuration'),    'file' => 'throttle.admin.inc',  );  return $items;}/** * Determine the current load on the site. * * Call the throttle_status() function from your own modules, themes, blocks, * etc. as follows: * *   $throttle = module_invoke('throttle', 'status'); * * to determine the current throttle status. Use module_invoke() so the * call will still work if the throttle module is disabled. For example, in * your theme you might choose to disable pictures when your site is too busy * (reducing bandwidth), or in your modules you might choose to disable * some complicated logic when your site is too busy (reducing CPU utilization). * * @return *   0 or 1. 0 means that the throttle is currently disabled. 1 means that *   the throttle is currently enabled. When the throttle is enabled, CPU *   and bandwidth intensive functionality should be disabled. */function throttle_status() {  return variable_get('throttle_level', 0);}/** * Implementation of hook_exit(). * * Changes the current throttle level based on page hits. */function throttle_exit() {  // The following logic determines what the current throttle level should  //  be, and can be disabled by the admin. If enabled, the mt_rand() function  //  returns a number between 0 and N, N being specified by the admin. If  //  0 is returned, the throttle logic is run, adding two additional database  //  queries. Otherwise, the following logic is skipped. This mechanism is  //  referred to in the admin page as the 'probability limiter', roughly  //  limiting throttle related database calls to 1 in N.  if (!mt_rand(0, variable_get('throttle_probability_limiter', 9))) {    // Count users with activity in the past n seconds.    // This value is defined in the user module Who's Online block.    $time_period = variable_get('user_block_seconds_online', 900);    // When determining throttle status in your own module or theme, use    // $throttle = module_invoke('throttle', 'status');    // as that will still work when throttle.module is disabled.    // Clearly here the module is enabled so we call throttle_status() directly.    $throttle = throttle_status();    if ($max_guests = variable_get('throttle_anonymous', 0)) {      $guests = sess_count(time() - $time_period, TRUE);    }    else {      $guests = 0;    }    if ($max_users = variable_get('throttle_user', 0)) {      $users = sess_count(time() - $time_period, FALSE);    }    else {      $users = 0;    }    // update the throttle status    $message = '';    if ($max_users && $users > $max_users) {      if (!$throttle) {        variable_set('throttle_level', 1);        $message = format_plural($users,                                 '1 user accessing site; throttle enabled.',                                 '@count users accessing site; throttle enabled.');      }    }    elseif ($max_guests && $guests > $max_guests) {      if (!$throttle) {        variable_set('throttle_level', 1);        $message = format_plural($guests,                                 '1 guest accessing site; throttle enabled.',                                 '@count guests accessing site; throttle enabled.');      }    }    else {      if ($throttle) {        variable_set('throttle_level', 0);        // Note: unorthodox format_plural() usage due to Gettext plural limitations.        $message = format_plural($users, '1 user', '@count users') .', ';        $message .= format_plural($guests, '1 guest accessing site; throttle disabled', '@count guests accessing site; throttle disabled');      }    }    if ($message) {      cache_clear_all();      watchdog('throttle', 'Throttle: %message', array('%message' => $message));    }  }}/** * Implementation of hook_help(). */function throttle_help($path, $arg) {  switch ($path) {    case 'admin/help#throttle':      $output = '<p>'. t('The throttle module provides a congestion control mechanism that automatically adjusts to a surge in incoming traffic. If your site is referenced by a popular website, or experiences a "Denial of Service" (DoS) attack, your webserver might become overwhelmed. The throttle mechanism is utilized by modules to temporarily disable CPU-intensive functionality, increasing performance. For instance, via the throttle module, modules may choose to disable resource-intensive blocks or the code within the site theme may temporarily disable user pictures in posts.') .'</p>';      $output .= '<p>'. t('The congestion control throttle can be automatically enabled when the number of anonymous or authenticated users currently visiting the site exceeds a specified threshold.') .'</p>';      $output .= '<p>'. t('For more information, see the online handbook entry for <a href="@throttle">Throttle module</a>.', array('@throttle' => 'http://drupal.org/handbook/modules/throttle/')) .'</p>';      return $output;    case 'admin/settings/throttle':      return '<p>'. t('The throttle module provides a congestion control mechanism that automatically adjusts to a surge in incoming traffic. If your site is referenced by a popular website, or experiences a "Denial of Service" (DoS) attack, your webserver might become overwhelmed. The throttle mechanism is utilized by modules to temporarily disable CPU-intensive functionality, increasing performance.') .'</p>';  }}
<?php// $Id$/** * @file * Admin page callbacks for the throttle module. *//** * Form builder; Configure the throttle system. * * @ingroup forms * @see system_settings_form() * @see throttle_admin_settings_validate() */function throttle_admin_settings() {  $probabilities = array(0 => '100%', 1 => '50%', 2 => '33.3%', 3 => '25%', 4 => '20%', 5 => '16.6%', 7 => '12.5%', 9 => '10%', 19 => '5%', 99 => '1%', 199 => '.5%', 399 => '.25%', 989 => '.1%');  $form['throttle_anonymous'] = array(    '#type' => 'textfield',    '#title' => t('Auto-throttle on anonymous users'),    '#default_value' => variable_get('throttle_anonymous', 0),    '#size' => 5,    '#maxlength' => 6,    '#description' => t('The congestion control throttle can be automatically enabled when the number of anonymous users currently visiting your site exceeds the specified threshold. For example, to start the throttle when your site has 250 anonymous users online at once, enter \'250\' in this field. Leave this value blank or set to "0" if you do not wish to auto-throttle on anonymous users. You can inspect the current number of anonymous users using the "Who\'s online" block.')  );  $form['throttle_user'] = array(    '#type' => 'textfield',    '#title' => t('Auto-throttle on authenticated users'),    '#default_value' => variable_get('throttle_user', 0),    '#size' => 5,    '#maxlength' => 6,    '#description' => t('The congestion control throttle can be automatically enabled when the number of authenticated users currently visiting your site exceeds the specified threshold. For example, to start the throttle when your site has 50 registered users online at once, enter \'50\' in this field. Leave this value blank or set to "0" if you do not wish to auto-throttle on authenticated users. You can inspect the current number of authenticated users using the "Who\'s online" block.')  );  $form['throttle_probability_limiter'] = array(    '#type' => 'select',    '#title' => t('Auto-throttle probability limiter'),    '#default_value' => variable_get('throttle_probability_limiter', 9),    '#options' => $probabilities,    '#description' => t('The auto-throttle probability limiter is an efficiency mechanism to statistically reduce the overhead of the auto-throttle. The limiter is expressed as a percentage of page views, so for example if set to the default of 10% we only perform the extra database queries to update the throttle status 1 out of every 10 page views. The busier your site, the lower you should set the limiter value.')  );  $form['#validate'] = array('throttle_admin_settings_validate');  return system_settings_form($form);}function throttle_admin_settings_validate($form, &$form_state) {  if (!is_numeric($form_state['values']['throttle_anonymous']) || $form_state['values']['throttle_anonymous'] < 0) {    form_set_error('throttle_anonymous', t("%value is not a valid auto-throttle setting. Please enter a positive numeric value.", array('%value' => $form_state['values']['throttle_anonymous'])));  }  if (!is_numeric($form_state['values']['throttle_user']) || $form_state['values']['throttle_user'] < 0) {    form_set_error('throttle_user', t("%value is not a valid auto-throttle setting. Please enter a positive numeric value.", array('%value' => $form_state['values']['throttle_user'])));  }}
<?php// $Id$/** * @file block.tpl.php * * Theme implementation to display a block. * * Available variables: * - $block->subject: Block title. * - $block->content: Block content. * - $block->module: Module that generated the block. * - $block->delta: This is a numeric id connected to each module. * - $block->region: The block region embedding the current block. * * Helper variables: * - $block_zebra: Outputs 'odd' and 'even' dependent on each block region. * - $zebra: Same output as $block_zebra but independent of any block region. * - $block_id: Counter dependent on each block region. * - $id: Same output as $block_id but independent of any block region. * - $is_front: Flags true when presented in the front page. * - $logged_in: Flags true when the current user is a logged-in member. * - $is_admin: Flags true when the current user is an administrator. * * @see template_preprocess() * @see template_preprocess_block() */?><div id="block-<?php print $block->module .'-'. $block->delta; ?>" class="block block-<?php print $block->module ?>"><?php if ($block->subject): ?>  <h2><?php print $block->subject ?></h2><?php endif;?>  <div class="content">    <?php print $block->content ?>  </div></div>
<?php// $Id$// MySQLi specific install functions/** * Check if MySQLi is available. * * @return *  TRUE/FALSE */function mysqli_is_available() {  return function_exists('mysqli_connect');}/** * Check if we can connect to MySQL. * * @return *  TRUE/FALSE */function drupal_test_mysqli($url, &$success) {  if (!mysqli_is_available()) {    drupal_set_message(st('PHP MySQLi support not enabled.'), 'error');    return FALSE;  }  $url = parse_url($url);  // Decode url-encoded information in the db connection string.  $url['user'] = urldecode($url['user']);  $url['pass'] = isset($url['pass']) ? urldecode($url['pass']) : '';  $url['host'] = urldecode($url['host']);  $url['path'] = urldecode($url['path']);  $connection = mysqli_init();  @mysqli_real_connect($connection, $url['host'], $url['user'], $url['pass'], substr($url['path'], 1), $url['port'], NULL, MYSQLI_CLIENT_FOUND_ROWS);  if (mysqli_connect_errno() >= 2000 || mysqli_connect_errno() == 1045) {    drupal_set_message(st('Failed to connect to your MySQL database server. MySQL reports the following message: %error.<ul><li>Are you sure you have the correct username and password?</li><li>Are you sure that you have typed the correct database hostname?</li><li>Are you sure that the database server is running?</li></ul>For more help, see the <a href="http://drupal.org/node/258">Installation and upgrading handbook</a>. If you are unsure what these terms mean you should probably contact your hosting provider.', array('%error' => mysqli_connect_error())), 'error');    return FALSE;  }  // Test selecting the database.  if (mysqli_connect_errno() > 0) {    drupal_set_message(st('Failed to select your database on your MySQL database server, which means the connection username and password are valid, but there is a problem accessing your data. MySQL reports the following message: %error.<ul><li>Are you sure you have the correct database name?</li><li>Are you sure the database exists?</li><li>Are you sure the username has permission to access the database?</li></ul>For more help, see the <a href="http://drupal.org/node/258">Installation and upgrading handbook</a>. If you are unsure what these terms mean you should probably contact your hosting provider.', array('%error' => mysqli_connect_error())), 'error');    return FALSE;  }  $success = array('CONNECT');  // Test CREATE.  $query = 'CREATE TABLE drupal_install_test (id int NULL)';  $result = mysqli_query($connection, $query);  if ($error = mysqli_error($connection)) {    drupal_set_message(st('Failed to create a test table on your MySQL database server with the command %query. MySQL reports the following message: %error.<ul><li>Are you sure the configured username has the necessary MySQL permissions to create tables in the database?</li></ul>For more help, see the <a href="http://drupal.org/node/258">Installation and upgrading handbook</a>. If you are unsure what these terms mean you should probably contact your hosting provider.', array('%query' => $query, '%error' => $error)), 'error');    return FALSE;  }  $err = FALSE;  $success[] = 'SELECT';  $success[] = 'CREATE';  // Test INSERT.  $query = 'INSERT INTO drupal_install_test (id) VALUES (1)';  $result = mysqli_query($connection, $query);  if ($error = mysqli_error($connection)) {    drupal_set_message(st('Failed to insert a value into a test table on your MySQL database server. We tried inserting a value with the command %query and MySQL reported the following error: %error.', array('%query' => $query, '%error' => $error)), 'error');    $err = TRUE;  }  else {    $success[] = 'INSERT';  }  // Test UPDATE.  $query = 'UPDATE drupal_install_test SET id = 2';  $result = mysqli_query($connection, $query);  if ($error = mysqli_error($connection)) {    drupal_set_message(st('Failed to update a value in a test table on your MySQL database server. We tried updating a value with the command %query and MySQL reported the following error: %error.', array('%query' => $query, '%error' => $error)), 'error');    $err = TRUE;  }  else {    $success[] = 'UPDATE';  }  // Test DELETE.  $query = 'DELETE FROM drupal_install_test';  $result = mysqli_query($connection, $query);  if ($error = mysqli_error($connection)) {    drupal_set_message(st('Failed to delete a value from a test table on your MySQL database server. We tried deleting a value with the command %query and MySQL reported the following error: %error.', array('%query' => $query, '%error' => $error)), 'error');    $err = TRUE;  }  else {    $success[] = 'DELETE';  }  // Test DROP.  $query = 'DROP TABLE drupal_install_test';  $result = mysqli_query($connection, $query);  if ($error = mysqli_error($connection)) {    drupal_set_message(st('Failed to drop a test table from your MySQL database server. We tried dropping a table with the command %query and MySQL reported the following error %error.', array('%query' => $query, '%error' => $error)), 'error');    $err = TRUE;  }  else {    $success[] = 'DROP';  }  if ($err) {    return FALSE;  }  mysqli_close($connection);  return TRUE;}
<?php// $Id$/** * @file * PHP page for handling incoming XML-RPC requests from clients. */include_once './includes/bootstrap.inc';drupal_bootstrap(DRUPAL_BOOTSTRAP_FULL);include_once './includes/xmlrpc.inc';include_once './includes/xmlrpcs.inc';xmlrpc_server(module_invoke_all('xmlrpc'));
<?php// $Id$/** * @file * User page callbacks for the aggregator module. *//** * Menu callback; displays the most recent items gathered from any feed. * * @return *   The items HTML. */function aggregator_page_last() {  drupal_add_feed(url('aggregator/rss'), variable_get('site_name', 'Drupal') .' '. t('aggregator'));  $items = aggregator_feed_items_load('SELECT i.*, f.title AS ftitle, f.link AS flink FROM {aggregator_item} i INNER JOIN {aggregator_feed} f ON i.fid = f.fid ORDER BY i.timestamp DESC, i.iid DESC');  return _aggregator_page_list($items, arg(1));}/** * Menu callback; displays all the items captured from a particular feed. * * If there are two arguments then this function is the categorize form. * * @param $arg1 *   If there are two arguments then $arg1 is $form_state. Otherwise, $arg1 is $feed. * @param $arg2 *   If there are two arguments then $arg2 is feed. * @return *   The items HTML. */function aggregator_page_source($arg1, $arg2 = NULL) {  // If there are two arguments then this function is the categorize form, and  // $arg1 is $form_state and $arg2 is $feed. Otherwise, $arg1 is $feed.  $feed = is_array($arg2) ? $arg2 : $arg1;  $feed = (object)$feed;  drupal_set_title(check_plain($feed->title));  $feed_source = theme('aggregator_feed_source', $feed);  // It is safe to include the fid in the query because it's loaded from the  // database by aggregator_feed_load.  $items = aggregator_feed_items_load('SELECT * FROM {aggregator_item} WHERE fid = '. $feed->fid .' ORDER BY timestamp DESC, iid DESC');  return _aggregator_page_list($items, arg(3), $feed_source);}/** * Menu callback; displays all the items aggregated in a particular category. * * If there are two arguments then this function is called as a form. * * @param $arg1 *   If there are two arguments then $arg1 is $form_state. Otherwise, $arg1 is $category. * @param $arg2 *   If there are two arguments then $arg2 is $category. * @return *   The items HTML. */function aggregator_page_category($arg1, $arg2 = NULL) {  // If there are two arguments then we are called as a form, $arg1 is  // $form_state and $arg2 is $category. Otherwise, $arg1 is $category.  $category = is_array($arg2) ? $arg2 : $arg1;  drupal_add_feed(url('aggregator/rss/'. $category['cid']), variable_get('site_name', 'Drupal') .' '. t('aggregator - @title', array('@title' => $category['title'])));  // It is safe to include the cid in the query because it's loaded from the  // database by aggregator_category_load.  $items = aggregator_feed_items_load('SELECT i.*, f.title AS ftitle, f.link AS flink FROM {aggregator_category_item} c LEFT JOIN {aggregator_item} i ON c.iid = i.iid LEFT JOIN {aggregator_feed} f ON i.fid = f.fid WHERE cid = '. $category['cid'] .' ORDER BY timestamp DESC, i.iid DESC');  return _aggregator_page_list($items, arg(3));}/** * Load feed items by passing a SQL query. * * @param $sql *   The query to be executed. * @return *   An array of the feed items. */function aggregator_feed_items_load($sql) {  $items = array();  if (isset($sql)) {    $result = pager_query($sql, 20);    while ($item = db_fetch_object($result)) {      $result_category = db_query('SELECT c.title, c.cid FROM {aggregator_category_item} ci LEFT JOIN {aggregator_category} c ON ci.cid = c.cid WHERE ci.iid = %d ORDER BY c.title', $item->iid);      $item->categories = array();      while ($item_categories = db_fetch_object($result_category)) {        $item->categories[] = $item_categories;      }      $items[$item->iid] = $item;    }  }  return $items;}/** * Prints an aggregator page listing a number of feed items. * * Various menu callbacks use this function to print their feeds. * * @param $items *   The items to be listed. * @param $op *   Which form should be added to the items. Only 'categorize' is now recognized. * @param $feed_source *   The feed source URL. * @return *   The items HTML. */function _aggregator_page_list($items, $op, $feed_source = '') {  if (user_access('administer news feeds') && ($op == 'categorize')) {    // Get form data.    $output = aggregator_categorize_items($items, $feed_source);  }  else {    // Assemble themed output.    $output = $feed_source;    foreach ($items as $item) {      $output .= theme('aggregator_item', $item);    }    $output = theme('aggregator_wrapper', $output);  }  return $output;}/** * Form builder; build the page list form. * * @param $items *   An array of the feed items. * @param $feed_source *   The feed source URL. * @return *   The form structure. * @ingroup forms * @see aggregator_categorize_items_validate() * @see aggregator_categorize_items_submit() */function aggregator_categorize_items($items, $feed_source = '') {  $form['#submit'][] = 'aggregator_categorize_items_submit';  $form['#validate'][] = 'aggregator_categorize_items_validate';  $form['#theme'] = 'aggregator_categorize_items';  $form['feed_source'] = array('#value' => $feed_source);  $categories = array();  $done = FALSE;  $form['items'] = array();  $form['categories'] = array('#tree' => TRUE);  foreach ($items as $item) {    $form['items'][$item->iid] = array('#value' => theme('aggregator_item', $item));    $form['categories'][$item->iid] = array();    $categories_result = db_query('SELECT c.cid, c.title, ci.iid FROM {aggregator_category} c LEFT JOIN {aggregator_category_item} ci ON c.cid = ci.cid AND ci.iid = %d', $item->iid);    $selected = array();    while ($category = db_fetch_object($categories_result)) {      if (!$done) {        $categories[$category->cid] = check_plain($category->title);      }      if ($category->iid) {        $selected[] = $category->cid;      }    }    $done = TRUE;    $form['categories'][$item->iid] = array(      '#type' => variable_get('aggregator_category_selector', 'checkboxes'),      '#default_value' => $selected,      '#options' => $categories,      '#size' => 10,      '#multiple' => TRUE    );  }  $form['submit'] = array('#type' => 'submit', '#value' => t('Save categories'));  return $form;}/** * Validate aggregator_categorize_items form submissions. */function aggregator_categorize_items_validate($form, &$form_state) {  if (!user_access('administer news feeds')) {    form_error($form, t('You are not allowed to categorize this feed item.'));  }}/** * Process aggregator_categorize_items form submissions. */function aggregator_categorize_items_submit($form, &$form_state) {  if (!empty($form_state['values']['categories'])) {    foreach ($form_state['values']['categories'] as $iid => $selection) {      db_query('DELETE FROM {aggregator_category_item} WHERE iid = %d', $iid);      foreach ($selection as $cid) {        if ($cid) {          db_query('INSERT INTO {aggregator_category_item} (cid, iid) VALUES (%d, %d)', $cid, $iid);        }      }    }  }  drupal_set_message(t('The categories have been saved.'));}/** * Theme the page list form for assigning categories. * * @param $form *   An associative array containing the structure of the form. * @return *   The output HTML. * @ingroup themeable */function theme_aggregator_categorize_items($form) {  $output = drupal_render($form['feed_source']);  $rows = array();  if ($form['items']) {    foreach (element_children($form['items']) as $key) {      if (is_array($form['items'][$key])) {        $rows[] = array(          drupal_render($form['items'][$key]),          array('data' => drupal_render($form['categories'][$key]), 'class' => 'categorize-item'),        );      }    }  }  $output .= theme('table', array('', t('Categorize')), $rows);  $output .= drupal_render($form['submit']);  $output .= drupal_render($form);  return theme('aggregator_wrapper', $output);}/** * Process variables for aggregator-wrapper.tpl.php. * * @see aggregator-wrapper.tpl.php */function template_preprocess_aggregator_wrapper(&$variables) {  $variables['pager'] = theme('pager', NULL, 20, 0);}/** * Process variables for aggregator-item.tpl.php. * * @see aggregator-item.tpl.php */function template_preprocess_aggregator_item(&$variables) {  $item = $variables['item'];  $variables['feed_url'] = check_url($item->link);  $variables['feed_title'] = check_plain($item->title);  $variables['content'] = aggregator_filter_xss($item->description);  $variables['source_url'] = '';  $variables['source_title'] = '';  if (isset($item->ftitle) && isset($item->fid)) {    $variables['source_url'] = url("aggregator/sources/$item->fid");    $variables['source_title'] = check_plain($item->ftitle);  }  if (date('Ymd', $item->timestamp) == date('Ymd')) {    $variables['source_date'] = t('%ago ago', array('%ago' => format_interval(time() - $item->timestamp)));  }  else {    $variables['source_date'] = format_date($item->timestamp, 'custom', variable_get('date_format_medium', 'D, m/d/Y - H:i'));  }  $variables['categories'] = array();  foreach ($item->categories as $category) {    $variables['categories'][$category->cid] = l($category->title, 'aggregator/categories/'. $category->cid);  }}/** * Menu callback; displays all the feeds used by the aggregator. */function aggregator_page_sources() {  $result = db_query('SELECT f.fid, f.title, f.description, f.image, MAX(i.timestamp) AS last FROM {aggregator_feed} f LEFT JOIN {aggregator_item} i ON f.fid = i.fid GROUP BY f.fid, f.title, f.description, f.image ORDER BY last DESC, f.title');  $output = '';  while ($feed = db_fetch_object($result)) {    // Most recent items:    $summary_items = array();    if (variable_get('aggregator_summary_items', 3)) {      $items = db_query_range('SELECT i.title, i.timestamp, i.link FROM {aggregator_item} i WHERE i.fid = %d ORDER BY i.timestamp DESC', $feed->fid, 0, variable_get('aggregator_summary_items', 3));      while ($item = db_fetch_object($items)) {        $summary_items[] = theme('aggregator_summary_item', $item);      }    }    $feed->url = url('aggregator/sources/'. $feed->fid);    $output .= theme('aggregator_summary_items', $summary_items, $feed);  }  $output .= theme('feed_icon', url('aggregator/opml'), t('OPML feed'));  return theme('aggregator_wrapper', $output);}/** * Menu callback; displays all the categories used by the aggregator. */function aggregator_page_categories() {  $result = db_query('SELECT c.cid, c.title, c.description FROM {aggregator_category} c LEFT JOIN {aggregator_category_item} ci ON c.cid = ci.cid LEFT JOIN {aggregator_item} i ON ci.iid = i.iid GROUP BY c.cid, c.title, c.description');  $output = '';  while ($category = db_fetch_object($result)) {    if (variable_get('aggregator_summary_items', 3)) {      $summary_items = array();      $items = db_query_range('SELECT i.title, i.timestamp, i.link, f.title as feed_title, f.link as feed_link FROM {aggregator_category_item} ci LEFT JOIN {aggregator_item} i ON i.iid = ci.iid LEFT JOIN {aggregator_feed} f ON i.fid = f.fid WHERE ci.cid = %d ORDER BY i.timestamp DESC', $category->cid, 0, variable_get('aggregator_summary_items', 3));      while ($item = db_fetch_object($items)) {        $summary_items[] = theme('aggregator_summary_item', $item);      }    }    $category->url = url('aggregator/categories/'. $category->cid);    $output .= theme('aggregator_summary_items', $summary_items, $category);  }  return theme('aggregator_wrapper', $output);}/** * Menu callback; generate an RSS 0.92 feed of aggregator items or categories. */function aggregator_page_rss() {  $result = NULL;  // arg(2) is the passed cid, only select for that category  if (arg(2)) {    $category = db_fetch_object(db_query('SELECT cid, title FROM {aggregator_category} WHERE cid = %d', arg(2)));    $sql = 'SELECT i.*, f.title AS ftitle, f.link AS flink FROM {aggregator_category_item} c LEFT JOIN {aggregator_item} i ON c.iid = i.iid LEFT JOIN {aggregator_feed} f ON i.fid = f.fid WHERE cid = %d ORDER BY timestamp DESC, i.iid DESC';    $result = db_query_range($sql, $category->cid, 0, variable_get('feed_default_items', 10));  }  // or, get the default aggregator items  else {    $category = NULL;    $sql = 'SELECT i.*, f.title AS ftitle, f.link AS flink FROM {aggregator_item} i INNER JOIN {aggregator_feed} f ON i.fid = f.fid ORDER BY i.timestamp DESC, i.iid DESC';    $result = db_query_range($sql, 0, variable_get('feed_default_items', 10));  }  $feeds = array();  while ($item = db_fetch_object($result)) {    $feeds[] = $item;  }  return theme('aggregator_page_rss', $feeds, $category);}/** * Theme the RSS output. * * @param $feeds *   An array of the feeds to theme. * @param $category *   A common category, if any, for all the feeds. * @ingroup themeable */function theme_aggregator_page_rss($feeds, $category = NULL) {  drupal_set_header('Content-Type: application/rss+xml; charset=utf-8');  $items = '';  $feed_length = variable_get('feed_item_length', 'teaser');  foreach ($feeds as $feed) {    switch ($feed_length) {      case 'teaser':        $teaser = node_teaser($feed->description);        if ($teaser != $feed->description) {          $teaser .= '<p><a href="'. check_url($feed->link) .'">'. t('read more') ."</a></p>\n";        }        $feed->description = $teaser;        break;      case 'title':        $feed->description = '';        break;    }    $items .= format_rss_item($feed->ftitle .': '. $feed->title, $feed->link, $feed->description, array('pubDate' => date('r', $feed->timestamp)));  }  $site_name = variable_get('site_name', 'Drupal');  $url = url((isset($category) ? 'aggregator/categories/'. $category->cid : 'aggregator'), array('absolute' => TRUE));  $description = isset($category) ? t('@site_name - aggregated feeds in category @title', array('@site_name' => $site_name, '@title' => $category->title)) : t('@site_name - aggregated feeds', array('@site_name' => $site_name));  $output = "<?xml version=\"1.0\" encoding=\"utf-8\"?>\n";  $output .= "<rss version=\"2.0\">\n";  $output .= format_rss_channel(t('@site_name aggregator', array('@site_name' => $site_name)), $url, $description, $items);  $output .= "</rss>\n";  print $output;}/** * Menu callback; generates an OPML representation of all feeds. * * @param $cid *   If set, feeds are exported only from a category with this ID. Otherwise, all feeds are exported. * @return *   The output XML. */function aggregator_page_opml($cid = NULL) {  if ($cid) {    $result = db_query('SELECT f.title, f.url FROM {aggregator_feed} f LEFT JOIN {aggregator_category_feed} c on f.fid = c.fid WHERE c.cid = %d ORDER BY title', $cid);  }  else {    $result = db_query('SELECT * FROM {aggregator_feed} ORDER BY title');  }  $feeds = array();  while ($item = db_fetch_object($result)) {    $feeds[] = $item;  }  return theme('aggregator_page_opml', $feeds);}/** * Theme the OPML feed output. * * @param $feeds *   An array of the feeds to theme. * @ingroup themeable */function theme_aggregator_page_opml($feeds) {  drupal_set_header('Content-Type: text/xml; charset=utf-8');  $output = "<?xml version=\"1.0\" encoding=\"utf-8\"?>\n";  $output .= "<opml version=\"1.1\">\n";  $output .= "<head>\n";  $output .= '<title>'. check_plain(variable_get('site_name', 'Drupal')) ."</title>\n";  $output .= '<dateModified>'. gmdate('r') ."</dateModified>\n";  $output .= "</head>\n";  $output .= "<body>\n";  foreach ($feeds as $feed) {    $output .= '<outline text="'. check_plain($feed->title) .'" xmlUrl="'. check_url($feed->url) ."\" />\n";  }  $output .= "</body>\n";  $output .= "</opml>\n";  print $output;}/** * Process variables for aggregator-summary-items.tpl.php. * * @see aggregator-summary-item.tpl.php */function template_preprocess_aggregator_summary_items(&$variables) {  $variables['title'] = check_plain($variables['source']->title);  $variables['summary_list'] = theme('item_list', $variables['summary_items']);  $variables['source_url'] = $variables['source']->url;}/** * Process variables for aggregator-summary-item.tpl.php. * * @see aggregator-summary-item.tpl.php */function template_preprocess_aggregator_summary_item(&$variables) {  $item = $variables['item'];  $variables['feed_url'] = check_url($item->link);  $variables['feed_title'] = check_plain($item->title);  $variables['feed_age'] = t('%age old', array('%age' => format_interval(time() - $item->timestamp)));  $variables['source_url'] = '';  $variables['source_title'] = '';  if (!empty($item->feed_link)) {    $variables['source_url'] = check_url($item->feed_link);    $variables['source_title'] = check_plain($item->feed_title);  }}/** * Process variables for aggregator-feed-source.tpl.php. * * @see aggregator-feed-source.tpl.php */function template_preprocess_aggregator_feed_source(&$variables) {  $feed = $variables['feed'];  $variables['source_icon'] = theme('feed_icon', $feed->url, t('!title feed', array('!title' => $feed->title)));  $variables['source_image'] = $feed->image;  $variables['source_description'] = aggregator_filter_xss($feed->description);  $variables['source_url'] = check_url(url($feed->link, array('absolute' => TRUE)));  if ($feed->checked) {    $variables['last_checked'] = t('@time ago', array('@time' => format_interval(time() - $feed->checked)));  }  else {    $variables['last_checked'] = t('never');  }  if (user_access('administer news feeds')) {    $variables['last_checked'] = l($variables['last_checked'], 'admin/content/aggregator');  }}
<?php// $Id$/** * @file * Handles incoming requests to fire off regularly-scheduled tasks (cron jobs). */include_once './includes/bootstrap.inc';drupal_bootstrap(DRUPAL_BOOTSTRAP_FULL);drupal_cron_run();
<?php// $Id$/** * @file forum-list.tpl.php * Default theme implementation to display a list of forums and containers. * * Available variables: * - $forums: An array of forums and containers to display. It is keyed to the *   numeric id's of all child forums and containers. * - $forum_id: Forum id for the current forum. Parent to all items within *   the $forums array. * * Each $forum in $forums contains: * - $forum->is_container: Is TRUE if the forum can contain other forums. Is *   FALSE if the forum can contain only topics. * - $forum->depth: How deep the forum is in the current hierarchy. * - $forum->zebra: 'even' or 'odd' string used for row class. * - $forum->name: The name of the forum. * - $forum->link: The URL to link to this forum. * - $forum->description: The description of this forum. * - $forum->new_topics: True if the forum contains unread posts. * - $forum->new_url: A URL to the forum's unread posts. * - $forum->new_text: Text for the above URL which tells how many new posts. * - $forum->old_topics: A count of posts that have already been read. * - $forum->num_posts: The total number of posts in the forum. * - $forum->last_reply: Text representing the last time a forum was posted or *   commented in. * * @see template_preprocess_forum_list() * @see theme_forum_list() */?><table id="forum-<?php print $forum_id; ?>">  <thead>    <tr>      <th><?php print t('Forum'); ?></th>      <th><?php print t('Topics');?></th>      <th><?php print t('Posts'); ?></th>      <th><?php print t('Last post'); ?></th>    </tr>  </thead>  <tbody>  <?php foreach ($forums as $child_id => $forum): ?>    <tr id="forum-list-<?php print $child_id; ?>" class="<?php print $forum->zebra; ?>">      <td <?php print $forum->is_container ? 'colspan="4" class="container"' : 'class="forum"'; ?>>        <?php /* Enclose the contents of this cell with X divs, where X is the               * depth this forum resides at. This will allow us to use CSS               * left-margin for indenting.               */ ?>        <?php print str_repeat('<div class="indent">', $forum->depth); ?>          <div class="name"><a href="<?php print $forum->link; ?>"><?php print $forum->name; ?></a></div>          <?php if ($forum->description): ?>            <div class="description"><?php print $forum->description; ?></div>          <?php endif; ?>        <?php print str_repeat('</div>', $forum->depth); ?>      </td>      <?php if (!$forum->is_container): ?>        <td class="topics">          <?php print $forum->num_topics ?>          <?php if ($forum->new_topics): ?>            <br />            <a href="<?php print $forum->new_url; ?>"><?php print $forum->new_text; ?></a>          <?php endif; ?>        </td>        <td class="posts"><?php print $forum->num_posts ?></td>        <td class="last-reply"><?php print $forum->last_reply ?></td>      <?php endif; ?>    </tr>  <?php endforeach; ?>  </tbody></table>
<?php// $Id$/** * @file * GD2 toolkit for image manipulation within Drupal. *//** * @ingroup image * @{ *//** * Retrieve information about the toolkit. */function image_gd_info() {  return array('name' => 'gd', 'title' => t('GD2 image manipulation toolkit'));}/** * Retrieve settings for the GD2 toolkit. */function image_gd_settings() {  if (image_gd_check_settings()) {    $form = array();    $form['status'] = array(      '#value' => t('The GD toolkit is installed and working properly.')    );    $form['image_jpeg_quality'] = array(      '#type' => 'textfield',      '#title' => t('JPEG quality'),      '#description' => t('Define the image quality for JPEG manipulations. Ranges from 0 to 100. Higher values mean better image quality but bigger files.'),      '#size' => 10,      '#maxlength' => 3,      '#default_value' => variable_get('image_jpeg_quality', 75),      '#field_suffix' => t('%'),    );    $form['#element_validate'] = array('image_gd_settings_validate');        return $form;  }  else {    form_set_error('image_toolkit', t('The GD image toolkit requires that the GD module for PHP be installed and configured properly. For more information see <a href="@url">PHP\'s image documentation</a>.', array('@url' => 'http://php.net/image')));    return FALSE;  }}/** * Validate the submitted GD settings. */function image_gd_settings_validate($form, &$form_state) {  // Validate image quality range.  $value = $form_state['values']['image_jpeg_quality'];  if (!is_numeric($value) || $value < 0 || $value > 100) {    form_set_error('image_jpeg_quality', t('JPEG quality must be a number between 0 and 100.'));  }}/** * Verify GD2 settings (that the right version is actually installed). * * @return *   A boolean indicating if the GD toolkit is avaiable on this machine. */function image_gd_check_settings() {  if ($check = get_extension_funcs('gd')) {    if (in_array('imagegd2', $check)) {      // GD2 support is available.      return TRUE;    }  }  return FALSE;}/** * Scale an image to the specified size using GD. */function image_gd_resize($source, $destination, $width, $height) {  if (!file_exists($source)) {    return FALSE;  }  $info = image_get_info($source);  if (!$info) {    return FALSE;  }  $im = image_gd_open($source, $info['extension']);  if (!$im) {    return FALSE;  }  $res = imagecreatetruecolor($width, $height);  if ($info['extension'] == 'png') {    $transparency = imagecolorallocatealpha($res, 0, 0, 0, 127);    imagealphablending($res, FALSE);    imagefilledrectangle($res, 0, 0, $width, $height, $transparency);    imagealphablending($res, TRUE);    imagesavealpha($res, TRUE);  }  elseif ($info['extension'] == 'gif') {    // If we have a specific transparent color.    $transparency_index = imagecolortransparent($im);    if ($transparency_index >= 0) {      // Get the original image's transparent color's RGB values.      $transparent_color = imagecolorsforindex($im, $transparency_index);      // Allocate the same color in the new image resource.      $transparency_index = imagecolorallocate($res, $transparent_color['red'], $transparent_color['green'], $transparent_color['blue']);      // Completely fill the background of the new image with allocated color.      imagefill($res, 0, 0, $transparency_index);      // Set the background color for new image to transparent.      imagecolortransparent($res, $transparency_index);      // Find number of colors in the images palette.      $number_colors = imagecolorstotal($im);      // Convert from true color to palette to fix transparency issues.      imagetruecolortopalette($res, TRUE, $number_colors);    }  }  imagecopyresampled($res, $im, 0, 0, 0, 0, $width, $height, $info['width'], $info['height']);  $result = image_gd_close($res, $destination, $info['extension']);  imagedestroy($res);  imagedestroy($im);  return $result;}/** * Rotate an image the given number of degrees. */function image_gd_rotate($source, $destination, $degrees, $background = 0x000000) {  if (!function_exists('imageRotate')) {    return FALSE;  }  $info = image_get_info($source);  if (!$info) {    return FALSE;  }  $im = image_gd_open($source, $info['extension']);  if (!$im) {    return FALSE;  }  $res = imageRotate($im, $degrees, $background);  $result = image_gd_close($res, $destination, $info['extension']);  return $result;}/** * Crop an image using the GD toolkit. */function image_gd_crop($source, $destination, $x, $y, $width, $height) {  $info = image_get_info($source);  if (!$info) {    return FALSE;  }  $im = image_gd_open($source, $info['extension']);  $res = imageCreateTrueColor($width, $height);  imageCopy($res, $im, 0, 0, $x, $y, $width, $height);  $result = image_gd_close($res, $destination, $info['extension']);  imageDestroy($res);  imageDestroy($im);  return $result;}/** * GD helper function to create an image resource from a file. * * @param $file *   A string file path where the iamge should be saved. * @param $extension *   A string containing one of the following extensions: gif, jpg, jpeg, png. * @return *   An image resource, or FALSE on error. */function image_gd_open($file, $extension) {  $extension = str_replace('jpg', 'jpeg', $extension);  $open_func = 'imageCreateFrom'. $extension;  if (!function_exists($open_func)) {    return FALSE;  }  return $open_func($file);}/** * GD helper to write an image resource to a destination file. * * @param $res *   An image resource created with image_gd_open(). * @param $destination *   A string file path where the iamge should be saved. * @param $extension *   A string containing one of the following extensions: gif, jpg, jpeg, png. * @return *   Boolean indicating success. */function image_gd_close($res, $destination, $extension) {  $extension = str_replace('jpg', 'jpeg', $extension);  $close_func = 'image'. $extension;  if (!function_exists($close_func)) {    return FALSE;  }  if ($extension == 'jpeg') {    return $close_func($res, $destination, variable_get('image_jpeg_quality', 75));  }  else {    return $close_func($res, $destination);  }}/** * @} End of "ingroup image". */
<?php// $Id$/** * @file user-profile-item.tpl.php * Default theme implementation to present profile items (values from user * account profile fields or modules). * * This template is used to loop through and render each field configured * for the user's account. It can also be the data from modules. The output is * grouped by categories. * * @see user-profile-category.tpl.php *      for the parent markup. Implemented as a definition list by default. * @see user-profile.tpl.php *      where all items and categories are collected and printed out. * * Available variables: * - $title: Field title for the profile item. * - $value: User defined value for the profile item or data from a module. * - $attributes: HTML attributes. Usually renders classes. * * @see template_preprocess_user_profile_item() */?><dt<?php print $attributes; ?>><?php print $title; ?></dt><dd<?php print $attributes; ?>><?php print $value; ?></dd>
<?php// $Id$/** * @file user-profile-category.tpl.php * Default theme implementation to present profile categories (groups of * profile items). * * Categories are defined when configuring user profile fields for the site. * It can also be defined by modules. All profile items for a category will be * output through the $profile_items variable. * * @see user-profile-item.tpl.php *      where each profile item is rendered. It is implemented as a definition *      list by default. * @see user-profile.tpl.php *      where all items and categories are collected and printed out. * * Available variables: * - $title: Category title for the group of items. * - $profile_items: All the items for the group rendered through *   user-profile-item.tpl.php. * - $attributes: HTML attributes. Usually renders classes. * * @see template_preprocess_user_profile_category() */?><?php if ($title) : ?>  <h3><?php print $title; ?></h3><?php endif; ?><dl<?php print $attributes; ?>>  <?php print $profile_items; ?></dl>
<?php// $Id$$info = array(  // Pre-defined color schemes.  'schemes' => array(    '#0072b9,#027ac6,#2385c2,#5ab5ee,#494949' => t('Blue Lagoon (Default)'),    '#464849,#2f416f,#2a2b2d,#5d6779,#494949' => t('Ash'),    '#55c0e2,#000000,#085360,#007e94,#696969' => t('Aquamarine'),    '#d5b048,#6c420e,#331900,#971702,#494949' => t('Belgian Chocolate'),    '#3f3f3f,#336699,#6598cb,#6598cb,#000000' => t('Bluemarine'),    '#d0cb9a,#917803,#efde01,#e6fb2d,#494949' => t('Citrus Blast'),    '#0f005c,#434f8c,#4d91ff,#1a1575,#000000' => t('Cold Day'),    '#c9c497,#0c7a00,#03961e,#7be000,#494949' => t('Greenbeam'),    '#ffe23d,#a9290a,#fc6d1d,#a30f42,#494949' => t('Mediterrano'),    '#788597,#3f728d,#a9adbc,#d4d4d4,#707070' => t('Mercury'),    '#5b5fa9,#5b5faa,#0a2352,#9fa8d5,#494949' => t('Nocturnal'),    '#7db323,#6a9915,#b5d52a,#7db323,#191a19' => t('Olivia'),    '#12020b,#1b1a13,#f391c6,#f41063,#898080' => t('Pink Plastic'),    '#b7a0ba,#c70000,#a1443a,#f21107,#515d52' => t('Shiny Tomato'),    '#18583d,#1b5f42,#34775a,#52bf90,#2d2d2d' => t('Teal Top'),  ),  // Images to copy over.  'copy' => array(    '../images/menu-collapsed.gif',    '../images/menu-collapsed-rtl.gif',    '../images/menu-expanded.gif',    '../images/menu-leaf.gif',  ),  // CSS files (excluding @import) to rewrite with new color scheme.  'css' => array(    '../style.css',  ),  // Coordinates of gradient (x, y, width, height).  'gradient' => array(0, 37, 760, 121),  // Color areas to fill (x, y, width, height).  'fill' => array(    'base' => array(0, 0, 760, 568),    'link' => array(107, 533, 41, 23),  ),  // Coordinates of all the theme slices (x, y, width, height)  // with their filename as used in the stylesheet.  'slices' => array(    '../images/body.png'                      => array(0, 37, 1, 280),    '../images/bg-bar.png'                    => array(202, 530, 76, 14),    '../images/bg-bar-white.png'              => array(202, 506, 76, 14),    '../images/bg-tab.png'                    => array(107, 533, 41, 23),    '../images/bg-navigation.png'             => array(0, 0, 7, 37),    '../images/bg-content-left.png'           => array(40, 117, 50, 352),    '../images/bg-content-right.png'          => array(510, 117, 50, 352),    '../images/bg-content.png'                => array(299, 117, 7, 200),    '../images/bg-navigation-item.png'        => array(32, 37, 17, 12),    '../images/bg-navigation-item-hover.png'  => array(54, 37, 17, 12),    '../images/gradient-inner.png'            => array(646, 307, 112, 42),    'logo.png'                                => array(622, 51, 64, 73),    'screenshot.png'                          => array(0, 37, 400, 240),  ),  // Reference color used for blending. Matches the base.png's colors.  'blend_target' => '#ffffff',  // Preview files.  'preview_image' => 'color/preview.png',  'preview_css' => '../color/preview.css',  // Base file for image generation.  'base_image' => 'color/base.png',);
<?php// $Id$/** * @file book-export-html.tpl.php * Default theme implementation for printed version of book outline. * * Available variables: * - $title: Top level node title. * - $head: Header tags. * - $language: Language code. e.g. "en" for english. * - $language_rtl: TRUE or FALSE depending on right to left language scripts. * - $base_url: URL to home page. * - $content: Nodes within the current outline rendered through *   book-node-export-html.tpl.php. * * @see template_preprocess_book_export_html() */?><!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.0 Transitional//EN" "http://www.w3.org/TR/xhtml1/DTD/xhtml1-transitional.dtd"><html xmlns="http://www.w3.org/1999/xhtml" lang="<?php print $language->language; ?>" xml:lang="<?php print $language->language; ?>">  <head>    <?php print $head; ?>    <title><?php print $title; ?></title>    <base href="<?php print $base_url; ?>" />    <link type="text/css" rel="stylesheet" href="misc/print.css" />    <?php if ($language_rtl): ?>      <link type="text/css" rel="stylesheet" href="misc/print-rtl.css" />    <?php endif; ?>  </head>  <body>    <?php    /**     * The given node is /embedded to its absolute depth in a top level     * section/. For example, a child node with depth 2 in the hierarchy is     * contained in (otherwise empty) &lt;div&gt; elements corresponding to     * depth 0 and depth 1. This is intended to support WYSIWYG output - e.g.,     * level 3 sections always look like level 3 sections, no matter their     * depth relative to the node selected to be exported as printer-friendly     * HTML.     */    $div_close = '';    ?>    <?php for ($i = 1; $i < $depth; $i++) : ?>      <div class="section-<?php print $i; ?>">      <?php $div_close .= '</div>'; ?>    <?php endfor; ?>    <?php print $contents; ?>    <?php print $div_close; ?>  </body></html>
<?php// $Id$/** * @file search-result.tpl.php * Default theme implementation for displaying a single search result. * * This template renders a single search result and is collected into * search-results.tpl.php. This and the parent template are * dependent to one another sharing the markup for definition lists. * * Available variables: * - $url: URL of the result. * - $title: Title of the result. * - $snippet: A small preview of the result. Does not apply to user searches. * - $info: String of all the meta information ready for print. Does not apply *   to user searches. * - $info_split: Contains same data as $info, split into a keyed array. * - $type: The type of search, e.g., "node" or "user". * * Default keys within $info_split: * - $info_split['type']: Node type. * - $info_split['user']: Author of the node linked to users profile. Depends *   on permission. * - $info_split['date']: Last update of the node. Short formatted. * - $info_split['comment']: Number of comments output as "% comments", % *   being the count. Depends on comment.module. * - $info_split['upload']: Number of attachments output as "% attachments", % *   being the count. Depends on upload.module. * * Since $info_split is keyed, a direct print of the item is possible. * This array does not apply to user searches so it is recommended to check * for their existance before printing. The default keys of 'type', 'user' and * 'date' always exist for node searches. Modules may provide other data. * *   <?php if (isset($info_split['comment'])) : ?> *     <span class="info-comment"> *       <?php print $info_split['comment']; ?> *     </span> *   <?php endif; ?> * * To check for all available data within $info_split, use the code below. * *   <?php print '<pre>'. check_plain(print_r($info_split, 1)) .'</pre>'; ?> * * @see template_preprocess_search_result() */?><dt class="title">  <a href="<?php print $url; ?>"><?php print $title; ?></a></dt><dd>  <?php if ($snippet) : ?>    <p class="search-snippet"><?php print $snippet; ?></p>  <?php endif; ?>  <?php if ($info) : ?>  <p class="search-info"><?php print $info; ?></p>  <?php endif; ?></dd>
<?php// $Id$/** * @file * Alerts other sites that your site has been updated. *//** * Implementation of hook_help(). */function ping_help($path, $arg) {  switch ($path) {    case 'admin/help#ping':      $output = '<p>'. t('The ping module is useful for notifying interested sites that your site has changed. It automatically sends notifications, or "pings", to the <a href="@external-http-pingomatic-com">pingomatic</a> service about new or updated content. In turn, <a href="@external-http-pingomatic-com">pingomatic</a> notifies other popular services, including weblogs.com, Technorati, blo.gs, BlogRolling, Feedster.com, and Moreover.', array('@external-http-pingomatic-com' => 'http://pingomatic.com/')) .'</p>';      $output .= '<p>'. t('The ping module requires a correctly configured <a href="@cron">cron maintenance task</a>.', array('@cron' => url('admin/reports/status'))) .'</p>';      $output .= '<p>'. t('For more information, see the online handbook entry for <a href="@ping">Ping module</a>.', array('@ping' => 'http://drupal.org/handbook/modules/ping/')) .'</p>';      return $output;  }}/** * Implementation of hook_cron(). * * Fire off notifications of updates to remote sites. */function ping_cron() {  global $base_url;  if (variable_get('site_name', 0)) {    $cron_last = variable_get('cron_last', time());    // Query changed first since usually changed >= created.    if (db_result(db_query('SELECT COUNT(*) FROM {node} WHERE status = 1 AND changed > %d', $cron_last)) || db_result(db_query('SELECT COUNT(*) FROM {node} WHERE status = 1 AND created > %d', $cron_last))) {      _ping_notify(variable_get('site_name', ''), $base_url);    }  }}/** * Call hook_ping() in all modules to notify remote sites that there is * new content at this one. */function _ping_notify($name, $url) {  module_invoke_all('ping', $name, $url);}/** * Implementation of hook_ping(). * * Notifies pingomatic.com, blo.gs, and technorati.com of changes at this site. */function ping_ping($name = '', $url = '') {  $result = xmlrpc('http://rpc.pingomatic.com', 'weblogUpdates.ping', $name, $url);  if ($result === FALSE) {    watchdog('directory ping', 'Failed to notify pingomatic.com (site).', array(), WATCHDOG_WARNING);  }}
<?php// $Id$/** * Implementation of hook_install(). */function blogapi_install() {  // Create tables.  drupal_install_schema('blogapi');}/** * Implementation of hook_uninstall(). */function blogapi_uninstall() {  // Remove tables.  drupal_uninstall_schema('blogapi');}/** * Implementation of hook_schema(). */function blogapi_schema() {  //This table was introduced in Drupal 6.4  $schema['blogapi_files'] = array(    'description' => 'Stores information for files uploaded via the blogapi.',    'fields' => array(      'fid' => array(        'description' => 'Primary Key: Unique file ID.',        'type' => 'serial',      ),      'uid' => array(        'description' => 'The {users}.uid of the user who is associated with the file.',        'type' => 'int',        'unsigned' => TRUE,        'not null' => TRUE,        'default' => 0),      'filepath' => array(        'description' => 'Path of the file relative to Drupal root.',        'type' => 'varchar',        'length' => 255,        'not null' => TRUE,        'default' => ''),      'filesize' => array(        'description' => 'The size of the file in bytes.',        'type' => 'int',        'unsigned' => TRUE,        'not null' => TRUE,        'default' => 0),    ),    'primary key' => array('fid'),    'indexes' => array(      'uid' => array('uid'),    ),  );  return $schema;}/** * @defgroup updates-5.x-to-6.x Blog API updates from 5.x to 6.x * @{ *//** * Inform users about the new permission. */function blogapi_update_6000() {  drupal_set_message("Blog API module does not depend on blog module's permissions anymore, but provides its own 'administer content with blog api' permission instead. Until <a href=\"". url('admin/user/permissions', array('fragment' => 'module-blogapi')) .'">this permission is assigned</a> to at least one user role, only the site administrator will be able to use Blog API features.');  return array();}/** * Add blogapi_files table to enable size restriction for BlogAPI file uploads. * * This table was introduced in Drupal 6.4. */function blogapi_update_6001() {    $schema['blogapi_files'] = array(    'description' => 'Stores information for files uploaded via the blogapi.',    'fields' => array(      'fid' => array(        'description' => 'Primary Key: Unique file ID.',        'type' => 'serial',      ),      'uid' => array(        'description' => 'The {users}.uid of the user who is associated with the file.',        'type' => 'int',        'unsigned' => TRUE,        'not null' => TRUE,        'default' => 0),      'filepath' => array(        'description' => 'Path of the file relative to Drupal root.',        'type' => 'varchar',        'length' => 255,        'not null' => TRUE,        'default' => ''),      'filesize' => array(        'description' => 'The size of the file in bytes.',        'type' => 'int',        'unsigned' => TRUE,        'not null' => TRUE,        'default' => 0),    ),    'primary key' => array('fid'),    'indexes' => array(      'uid' => array('uid'),    ),  );  $ret = array();  if (!db_table_exists('blogapi_files')) {    db_create_table($ret, 'blogapi_files', $schema['blogapi_files']);  }  return $ret;}/** * @} End of "defgroup updates-5.x-to-6.x" * The next series of updates should start at 7000. */
<?php// $Id$/** * @file profile-block.tpl.php * Default theme implementation for displaying a users profile within a * block. It only shows in relation to a node displayed as a full page. * * Available variables: * - $picture: Image configured for the account linking to the users page. * - $profile: Keyed array of all profile fields that have a value. * * Each $field in $profile contains: * - $field->title: Title of the profile field. * - $field->value: Value of the profile field. * - $field->type: Type of the profile field, i.e., checkbox, textfield, *   textarea, selection, list, url or date. * * Since $profile is keyed, a direct print of the field is possible. Not * all accounts may have a value for a profile so do a check first. If a field * of "last_name" was set for the site, the following can be used. * *  <?php if (isset($profile['last_name'])): ?> *    <div class="field last-name"> *      <?php print $profile['last_name']->title; ?>:<br /> *      <?php print $profile['last_name']->value; ?> *    </div> *  <?php endif; ?> * * @see template_preprocess_profile_block() */?><?php print $picture; ?><?php foreach ($profile as $field) : ?>  <p>    <?php if ($field->type != 'checkbox') : ?>      <strong><?php print $field->title; ?></strong><br />    <?php endif; ?>    <?php print $field->value; ?>  </p><?php endforeach; ?>
<?php// $Id$// PostgreSQL specific install functions/** * Check if PostgreSQL is available. * * @return *  TRUE/FALSE */function pgsql_is_available() {  return function_exists('pg_connect');}/** * Check if we can connect to PostgreSQL. * * @return *  TRUE/FALSE */function drupal_test_pgsql($url, &$success) {  if (!pgsql_is_available()) {    drupal_set_message(st('PHP PostgreSQL support not enabled.'), 'error');    return FALSE;  }  $url = parse_url($url);  $conn_string = '';  // Decode url-encoded information in the db connection string  if (isset($url['user'])) {    $conn_string .= ' user='. urldecode($url['user']);  }  if (isset($url['pass'])) {    $conn_string .= ' password='. urldecode($url['pass']);  }  if (isset($url['host'])) {    $conn_string .= ' host='. urldecode($url['host']);  }  if (isset($url['path'])) {    $conn_string .= ' dbname='. substr(urldecode($url['path']), 1);  }  if (isset($url['port'])) {    $conn_string .= ' port='. urldecode($url['port']);  }  // Test connecting to the database.  $connection = @pg_connect($conn_string);  if (!$connection) {    drupal_set_message(st('Failed to connect to your PostgreSQL database server. PostgreSQL reports the following message: %error.<ul><li>Are you sure you have the correct username and password?</li><li>Are you sure that you have typed the correct database hostname?</li><li>Are you sure that the database server is running?</li><li>Are you sure you typed the correct database name?</li></ul>For more help, see the <a href="http://drupal.org/node/258">Installation and upgrading handbook</a>. If you are unsure what these terms mean you should probably contact your hosting provider.', array('%error' => 'Connection failed. See log file for failure reason')), 'error');    return FALSE;  }  $success = array('CONNECT');  // Test CREATE.  $query = 'CREATE TABLE drupal_install_test (id integer NOT NULL)';  $result = pg_query($connection, $query);  if ($error = pg_result_error($result)) {    drupal_set_message(st('Failed to create a test table on your PostgreSQL database server with the command %query. PostgreSQL reports the following message: %error.<ul><li>Are you sure the configured username has the necessary PostgreSQL permissions to create tables in the database?</li></ul>For more help, see the <a href="http://drupal.org/node/258">Installation and upgrading handbook</a>. If you are unsure what these terms mean you should probably contact your hosting provider.', array('%query' => $query, '%error' => $error)), 'error');    return FALSE;  }  $err = FALSE;  $success[] = 'SELECT';  $success[] = 'CREATE';  // Test INSERT.  $query = 'INSERT INTO drupal_install_test (id) VALUES (1)';  $result = pg_query($connection, $query);  if ($error = pg_result_error($result)) {    drupal_set_message(st('Failed to insert a value into a test table on your PostgreSQL database server. We tried inserting a value with the command %query and PostgreSQL reported the following error: %error.', array('%query' => $query, '%error' => $error)), 'error');    $err = TRUE;  }  else {    $success[] = 'INSERT';  }  // Test UPDATE.  $query = 'UPDATE drupal_install_test SET id = 2';  $result = pg_query($connection, $query);  if ($error = pg_result_error($result)) {    drupal_set_message(st('Failed to update a value in a test table on your PostgreSQL database server. We tried updating a value with the command %query and PostgreSQL reported the following error: %error.', array('%query' => $query, '%error' => $error)), 'error');    $err = TRUE;  }  else {    $success[] = 'UPDATE';  }  // Test LOCK.  $query = 'BEGIN; LOCK drupal_install_test IN SHARE ROW EXCLUSIVE MODE';  $result = pg_query($connection, $query);  if ($error = pg_result_error($result)) {    drupal_set_message(st('Failed to lock a test table on your PostgreSQL database server. We tried locking a table with the command %query and PostgreSQL reported the following error: %error.', array('%query' => $query, '%error' => $error)), 'error');    $err = TRUE;  }  else {    $success[] = 'LOCK';  }  // Test UNLOCK, which is done automatically upon transaction end in PostgreSQL  $query = 'COMMIT';  $result = pg_query($connection, $query);  if ($error = pg_result_error()) {    drupal_set_message(st('Failed to unlock a test table on your PostgreSQL database server. We tried unlocking a table with the command %query and PostgreSQL reported the following error: %error.', array('%query' => $query, '%error' => $error)), 'error');    $err = TRUE;  }  else {    $success[] = 'UNLOCK';  }  // Test DELETE.  $query = 'DELETE FROM drupal_install_test';  $result = pg_query($connection, $query);  if ($error = pg_result_error()) {    drupal_set_message(st('Failed to delete a value from a test table on your PostgreSQL database server. We tried deleting a value with the command %query and PostgreSQL reported the following error: %error.', array('%query' => $query, '%error' => $error)), 'error');    $err = TRUE;  }  else {    $success[] = 'DELETE';  }  // Test DROP.  $query = 'DROP TABLE drupal_install_test';  $result = pg_query($connection, $query);  if ($error = pg_result_error()) {    drupal_set_message(st('Failed to drop a test table from your PostgreSQL database server. We tried dropping a table with the command %query and PostgreSQL reported the following error %error.', array('%query' => $query, '%error' => $error)), 'error');    $err = TRUE;  }  else {    $success[] = 'DROP';  }  if ($err) {    return FALSE;  }  pg_close($connection);  return TRUE;}
<?php// $Id$/** * @file poll-results-block.tpl.php * Display the poll results in a block. * * Variables available: * - $title: The title of the poll. * - $results: The results of the poll. * - $votes: The total results in the poll. * - $links: Links in the poll. * - $nid: The nid of the poll * - $cancel_form: A form to cancel the user's vote, if allowed. * - $raw_links: The raw array of links. * - $vote: The choice number of the current user's vote. * * @see template_preprocess_poll_results() */?><div class="poll">  <?php print $results; ?>  <div class="total">    <?php print t('Total votes: @votes', array('@votes' => $votes)); ?>  </div>  <?php if (!empty($cancel_form)): ?>    <?php print $cancel_form; ?>  <?php endif; ?></div>
<?php// $Id$?><div class="node<?php if ($sticky) { print " sticky"; } ?><?php if (!$status) { print " node-unpublished"; } ?>">  <?php print $picture ?>  <?php if ($page == 0): ?>    <h1 class="title"><a href="<?php print $node_url ?>"><?php print $title ?></a></h1>  <?php endif; ?>    <span class="submitted"><?php print $submitted ?></span>    <div class="taxonomy"><?php print $terms ?></div>    <div class="content"><?php print $content ?></div>    <?php if ($links): ?>    <div class="links">&raquo; <?php print $links ?></div>    <?php endif; ?></div>
