<?php// $Id$/** * Implementation of hook_install(). */function trigger_install() {  // Create tables.  drupal_install_schema('trigger');  // Do initial synchronization of actions in code and the database.  actions_synchronize(actions_list());}/** * Implementation of hook_uninstall(). */function trigger_uninstall() {  // Remove tables.  drupal_uninstall_schema('trigger');}/** * Implementation of hook_schema(). */function trigger_schema() {  $schema['trigger_assignments'] = array(    'description' => 'Maps trigger to hook and operation assignments from trigger.module.',    'fields' => array(      'hook' => array(        'type' => 'varchar',        'length' => 32,        'not null' => TRUE,        'default' => '',        'description' => 'Primary Key: The name of the internal Drupal hook upon which an action is firing; for example, nodeapi.',      ),      'op' => array(        'type' => 'varchar',        'length' => 32,        'not null' => TRUE,        'default' => '',        'description' => 'Primary Key: The specific operation of the hook upon which an action is firing: for example, presave.',      ),      'aid' => array(        'type' => 'varchar',        'length' => 255,        'not null' => TRUE,        'default' => '',        'description' => "Primary Key: Action's {actions}.aid.",      ),      'weight' => array(        'type' => 'int',        'not null' => TRUE,        'default' => 0,        'description' => 'The weight of the trigger assignment in relation to other triggers.',      ),    ),    'primary key' => array('hook', 'op', 'aid'),  );  return $schema;}
<?php// $Id$/** * @file user-picture.tpl.php * Default theme implementation to present an picture configured for the * user's account. * * Available variables: * - $picture: Image set by the user or the site's default. Will be linked *   depending on the viewer's permission to view the users profile page. * - $account: Array of account information. Potentially unsafe. Be sure to *   check_plain() before use. * * @see template_preprocess_user_picture() */?><div class="picture">  <?php print $picture; ?></div>
<?php// $Id$/** * @file forum-submitted.tpl.php * Default theme implementation to format a simple string indicated when and * by whom a topic was submitted. * * Available variables: * * - $author: The author of the post. * - $time: How long ago the post was created. * - $topic: An object with the raw data of the post. Unsafe, be sure *   to clean this data before printing. * * @see template_preprocess_forum_submitted() * @see theme_forum_submitted() */?><?php if ($time): ?>  <?php print t(  '@time ago<br />by !author', array(    '@time' => $time,    '!author' => $author,    )); ?><?php else: ?>  <?php print t('n/a'); ?><?php endif; ?>
<?php// $Id$/** * @file * Database interface code for MySQL database servers using the mysqli client libraries. mysqli is included in PHP 5 by default and allows developers to use the advanced features of MySQL 4.1.x, 5.0.x and beyond. */ // Maintainers of this file should consult: // http://www.php.net/manual/en/ref.mysqli.php/** * @ingroup database * @{ */// Include functions shared between mysql and mysqli.require_once './includes/database.mysql-common.inc';/** * Report database status. */function db_status_report($phase) {  $t = get_t();  $version = db_version();  $form['mysql'] = array(    'title' => $t('MySQL database'),    'value' => ($phase == 'runtime') ? l($version, 'admin/reports/status/sql') : $version,  );  if (version_compare($version, DRUPAL_MINIMUM_MYSQL) < 0) {    $form['mysql']['severity'] = REQUIREMENT_ERROR;    $form['mysql']['description'] = $t('Your MySQL Server is too old. Drupal requires at least MySQL %version.', array('%version' => DRUPAL_MINIMUM_MYSQL));  }  return $form;}/** * Returns the version of the database server currently in use. * * @return Database server version */function db_version() {  global $active_db;  list($version) = explode('-', mysqli_get_server_info($active_db));  return $version;}/** * Initialise a database connection. * * Note that mysqli does not support persistent connections. */function db_connect($url) {  // Check if MySQLi support is present in PHP  if (!function_exists('mysqli_init') && !extension_loaded('mysqli')) {    _db_error_page('Unable to use the MySQLi database because the MySQLi extension for PHP is not installed. Check your <code>php.ini</code> to see how you can enable it.');  }  $url = parse_url($url);  // Decode url-encoded information in the db connection string  $url['user'] = urldecode($url['user']);  // Test if database url has a password.  $url['pass'] = isset($url['pass']) ? urldecode($url['pass']) : '';  $url['host'] = urldecode($url['host']);  $url['path'] = urldecode($url['path']);  if (!isset($url['port'])) {    $url['port'] = NULL;  }  $connection = mysqli_init();  @mysqli_real_connect($connection, $url['host'], $url['user'], $url['pass'], substr($url['path'], 1), $url['port'], NULL, MYSQLI_CLIENT_FOUND_ROWS);  if (mysqli_connect_errno() > 0) {    _db_error_page(mysqli_connect_error());  }  // Force UTF-8.  mysqli_query($connection, 'SET NAMES "utf8"');  return $connection;}/** * Helper function for db_query(). */function _db_query($query, $debug = 0) {  global $active_db, $queries, $user;  if (variable_get('dev_query', 0)) {    list($usec, $sec) = explode(' ', microtime());    $timer = (float)$usec + (float)$sec;    // If devel.module query logging is enabled, prepend a comment with the username and calling function    // to the SQL string. This is useful when running mysql's SHOW PROCESSLIST to learn what exact    // code is issueing the slow query.    $bt = debug_backtrace();    // t() may not be available yet so we don't wrap 'Anonymous'    $name = $user->uid ? $user->name : variable_get('anonymous', 'Anonymous');    // str_replace() to prevent SQL injection via username or anonymous name.    $name = str_replace(array('*', '/'), '', $name);    $query = '/* '. $name .' : '. $bt[2]['function'] .' */ '. $query;  }  $result = mysqli_query($active_db, $query);  if (variable_get('dev_query', 0)) {    $query = $bt[2]['function'] ."\n". $query;    list($usec, $sec) = explode(' ', microtime());    $stop = (float)$usec + (float)$sec;    $diff = $stop - $timer;    $queries[] = array($query, $diff);  }  if ($debug) {    print '<p>query: '. $query .'<br />error:'. mysqli_error($active_db) .'</p>';  }  if (!mysqli_errno($active_db)) {    return $result;  }  else {    // Indicate to drupal_error_handler that this is a database error.    ${DB_ERROR} = TRUE;    trigger_error(check_plain(mysqli_error($active_db) ."\nquery: ". $query), E_USER_WARNING);    return FALSE;  }}/** * Fetch one result row from the previous query as an object. * * @param $result *   A database query result resource, as returned from db_query(). * @return *   An object representing the next row of the result, or FALSE. The attributes *   of this object are the table fields selected by the query. */function db_fetch_object($result) {  if ($result) {    $object = mysqli_fetch_object($result);    return isset($object) ? $object : FALSE;  }}/** * Fetch one result row from the previous query as an array. * * @param $result *   A database query result resource, as returned from db_query(). * @return *   An associative array representing the next row of the result, or FALSE. *   The keys of this object are the names of the table fields selected by the *   query, and the values are the field values for this result row. */function db_fetch_array($result) {  if ($result) {    $array = mysqli_fetch_array($result, MYSQLI_ASSOC);    return isset($array) ? $array : FALSE;  }}/** * Return an individual result field from the previous query. * * Only use this function if exactly one field is being selected; otherwise, * use db_fetch_object() or db_fetch_array(). * * @param $result *   A database query result resource, as returned from db_query(). * @return *   The resulting field or FALSE. */function db_result($result) {  if ($result && mysqli_num_rows($result) > 0) {    // The mysqli_fetch_row function has an optional second parameter $row    // but that can't be used for compatibility with Oracle, DB2, etc.    $array = mysqli_fetch_row($result);    return $array[0];  }  return FALSE;}/** * Determine whether the previous query caused an error. */function db_error() {  global $active_db;  return mysqli_errno($active_db);}/** * Determine the number of rows changed by the preceding query. */function db_affected_rows() {  global $active_db; /* mysqli connection resource */  return mysqli_affected_rows($active_db);}/** * Runs a limited-range query in the active database. * * Use this as a substitute for db_query() when a subset of the query is to be * returned. * User-supplied arguments to the query should be passed in as separate parameters * so that they can be properly escaped to avoid SQL injection attacks. * * @param $query *   A string containing an SQL query. * @param ... *   A variable number of arguments which are substituted into the query *   using printf() syntax. The query arguments can be enclosed in one *   array instead. *   Valid %-modifiers are: %s, %d, %f, %b (binary data, do not enclose *   in '') and %%. * *   NOTE: using this syntax will cast NULL and FALSE values to decimal 0, *   and TRUE values to decimal 1. * * @param $from *   The first result row to return. * @param $count *   The maximum number of result rows to return. * @return *   A database query result resource, or FALSE if the query was not executed *   correctly. */function db_query_range($query) {  $args = func_get_args();  $count = array_pop($args);  $from = array_pop($args);  array_shift($args);  $query = db_prefix_tables($query);  if (isset($args[0]) and is_array($args[0])) { // 'All arguments in one array' syntax    $args = $args[0];  }  _db_query_callback($args, TRUE);  $query = preg_replace_callback(DB_QUERY_REGEXP, '_db_query_callback', $query);  $query .= ' LIMIT '. (int)$from .', '. (int)$count;  return _db_query($query);}/** * Runs a SELECT query and stores its results in a temporary table. * * Use this as a substitute for db_query() when the results need to stored * in a temporary table. Temporary tables exist for the duration of the page * request. * User-supplied arguments to the query should be passed in as separate parameters * so that they can be properly escaped to avoid SQL injection attacks. * * Note that if you need to know how many results were returned, you should do * a SELECT COUNT(*) on the temporary table afterwards. db_affected_rows() does * not give consistent result across different database types in this case. * * @param $query *   A string containing a normal SELECT SQL query. * @param ... *   A variable number of arguments which are substituted into the query *   using printf() syntax. The query arguments can be enclosed in one *   array instead. *   Valid %-modifiers are: %s, %d, %f, %b (binary data, do not enclose *   in '') and %%. * *   NOTE: using this syntax will cast NULL and FALSE values to decimal 0, *   and TRUE values to decimal 1. * * @param $table *   The name of the temporary table to select into. This name will not be *   prefixed as there is no risk of collision. * @return *   A database query result resource, or FALSE if the query was not executed *   correctly. */function db_query_temporary($query) {  $args = func_get_args();  $tablename = array_pop($args);  array_shift($args);  $query = preg_replace('/^SELECT/i', 'CREATE TEMPORARY TABLE '. $tablename .' Engine=HEAP SELECT', db_prefix_tables($query));  if (isset($args[0]) and is_array($args[0])) { // 'All arguments in one array' syntax    $args = $args[0];  }  _db_query_callback($args, TRUE);  $query = preg_replace_callback(DB_QUERY_REGEXP, '_db_query_callback', $query);  return _db_query($query);}/** * Returns a properly formatted Binary Large Object value. * * @param $data *   Data to encode. * @return *  Encoded data. */function db_encode_blob($data) {  global $active_db;  return "'". mysqli_real_escape_string($active_db, $data) ."'";}/** * Returns text from a Binary Large OBject value. * * @param $data *   Data to decode. * @return *  Decoded data. */function db_decode_blob($data) {  return $data;}/** * Prepare user input for use in a database query, preventing SQL injection attacks. */function db_escape_string($text) {  global $active_db;  return mysqli_real_escape_string($active_db, $text);}/** * Lock a table. */function db_lock_table($table) {  db_query('LOCK TABLES {'. db_escape_table($table) .'} WRITE');}/** * Unlock all locked tables. */function db_unlock_tables() {  db_query('UNLOCK TABLES');}/** * Check if a table exists. */function db_table_exists($table) {  return (bool) db_fetch_object(db_query("SHOW TABLES LIKE '{". db_escape_table($table) ."}'"));}/** * Check if a column exists in the given table. */function db_column_exists($table, $column) {  return (bool) db_fetch_object(db_query("SHOW COLUMNS FROM {". db_escape_table($table) ."} LIKE '". db_escape_table($column) ."'"));}/** * @} End of "ingroup database". */
<?php// $Id$/** * @file user-profile.tpl.php * Default theme implementation to present all user profile data. * * This template is used when viewing a registered member's profile page, * e.g., example.com/user/123. 123 being the users ID. * * By default, all user profile data is printed out with the $user_profile * variable. If there is a need to break it up you can use $profile instead. * It is keyed to the name of each category or other data attached to the * account. If it is a category it will contain all the profile items. By * default $profile['summary'] is provided which contains data on the user's * history. Other data can be included by modules. $profile['user_picture'] is * available by default showing the account picture. * * Also keep in mind that profile items and their categories can be defined by * site administrators. They are also available within $profile. For example, * if a site is configured with a category of "contact" with * fields for of addresses, phone numbers and other related info, then doing a * straight print of $profile['contact'] will output everything in the * category. This is useful for altering source order and adding custom * markup for the group. * * To check for all available data within $profile, use the code below. * @code *   print '<pre>'. check_plain(print_r($profile, 1)) .'</pre>'; * @endcode * * Available variables: *   - $user_profile: All user profile data. Ready for print. *   - $profile: Keyed array of profile categories and their items or other data *     provided by modules. * * @see user-profile-category.tpl.php *   Where the html is handled for the group. * @see user-profile-item.tpl.php *   Where the html is handled for each item in the group. * @see template_preprocess_user_profile() */?><div class="profile">  <?php print $user_profile; ?></div>
<?php// $Id$/** * @file * User page callbacks for the filter module. *//** * Menu callback; show a page with long filter tips. */function filter_tips_long() {  $format = arg(2);  if ($format) {    $output = theme('filter_tips', _filter_tips($format, TRUE), TRUE);  }  else {    $output = theme('filter_tips', _filter_tips(-1, TRUE), TRUE);  }  return $output;}/** * Format a set of filter tips. * * @ingroup themeable */function theme_filter_tips($tips, $long = FALSE, $extra = '') {  $output = '';  $multiple = count($tips) > 1;  if ($multiple) {    $output = t('input formats') .':';  }  if (count($tips)) {    if ($multiple) {      $output .= '<ul>';    }    foreach ($tips as $name => $tiplist) {      if ($multiple) {        $output .= '<li>';        $output .= '<strong>'. $name .'</strong>:<br />';      }      if (count($tiplist) > 0) {        $output .= '<ul class="tips">';        foreach ($tiplist as $tip) {          $output .= '<li'. ($long ? ' id="filter-'. str_replace("/", "-", $tip['id']) .'">' : '>') . $tip['tip'] .'</li>';        }        $output .= '</ul>';      }      if ($multiple) {        $output .= '</li>';      }    }    if ($multiple) {      $output .= '</ul>';    }  }  return $output;}
<?php// $Id$// MySQL specific install functions/** * Check if MySQL is available. * * @return *  TRUE/FALSE */function mysql_is_available() {  return function_exists('mysql_connect');}/** * Check if we can connect to MySQL. * * @return *  TRUE/FALSE */function drupal_test_mysql($url, &$success) {  if (!mysql_is_available()) {    drupal_set_message(st('PHP MySQL support not enabled.'), 'error');    return FALSE;  }  $url = parse_url($url);  // Decode url-encoded information in the db connection string.  $url['user'] = urldecode($url['user']);  $url['pass'] = isset($url['pass']) ? urldecode($url['pass']) : '';  $url['host'] = urldecode($url['host']);  $url['path'] = urldecode($url['path']);  // Allow for non-standard MySQL port.  if (isset($url['port'])) {    $url['host'] = $url['host'] .':'. $url['port'];  }  // Test connecting to the database.  $connection = @mysql_connect($url['host'], $url['user'], $url['pass'], TRUE, 2);  if (!$connection) {    drupal_set_message(st('Failed to connect to your MySQL database server. MySQL reports the following message: %error.<ul><li>Are you sure you have the correct username and password?</li><li>Are you sure that you have typed the correct database hostname?</li><li>Are you sure that the database server is running?</li></ul>For more help, see the <a href="http://drupal.org/node/258">Installation and upgrading handbook</a>. If you are unsure what these terms mean you should probably contact your hosting provider.', array('%error' => mysql_error())), 'error');    return FALSE;  }  // Test selecting the database.  if (!mysql_select_db(substr($url['path'], 1))) {    drupal_set_message(st('Failed to select your database on your MySQL database server, which means the connection username and password are valid, but there is a problem accessing your data. MySQL reports the following message: %error.<ul><li>Are you sure you have the correct database name?</li><li>Are you sure the database exists?</li><li>Are you sure the username has permission to access the database?</li></ul>For more help, see the <a href="http://drupal.org/node/258">Installation and upgrading handbook</a>. If you are unsure what these terms mean you should probably contact your hosting provider.', array('%error' => mysql_error())), 'error');    return FALSE;  }  $success = array('CONNECT');  // Test CREATE.  $query = 'CREATE TABLE drupal_install_test (id int NULL)';  $result = mysql_query($query);  if ($error = mysql_error()) {    drupal_set_message(st('Failed to create a test table on your MySQL database server with the command %query. MySQL reports the following message: %error.<ul><li>Are you sure the configured username has the necessary MySQL permissions to create tables in the database?</li></ul>For more help, see the <a href="http://drupal.org/node/258">Installation and upgrading handbook</a>. If you are unsure what these terms mean you should probably contact your hosting provider.', array('%query' => $query, '%error' => $error)), 'error');    return FALSE;  }  $err = FALSE;  $success[] = 'SELECT';  $success[] = 'CREATE';  // Test INSERT.  $query = 'INSERT INTO drupal_install_test (id) VALUES (1)';  $result = mysql_query($query);  if ($error = mysql_error()) {    drupal_set_message(st('Failed to insert a value into a test table on your MySQL database server. We tried inserting a value with the command %query and MySQL reported the following error: %error.', array('%query' => $query, '%error' => $error)), 'error');    $err = TRUE;  }  else {    $success[] = 'INSERT';  }  // Test UPDATE.  $query = 'UPDATE drupal_install_test SET id = 2';  $result = mysql_query($query);  if ($error = mysql_error()) {    drupal_set_message(st('Failed to update a value in a test table on your MySQL database server. We tried updating a value with the command %query and MySQL reported the following error: %error.', array('%query' => $query, '%error' => $error)), 'error');    $err = TRUE;  }  else {    $success[] = 'UPDATE';  }  // Test DELETE.  $query = 'DELETE FROM drupal_install_test';  $result = mysql_query($query);  if ($error = mysql_error()) {    drupal_set_message(st('Failed to delete a value from a test table on your MySQL database server. We tried deleting a value with the command %query and MySQL reported the following error: %error.', array('%query' => $query, '%error' => $error)), 'error');    $err = TRUE;  }  else {    $success[] = 'DELETE';  }  // Test DROP.  $query = 'DROP TABLE drupal_install_test';  $result = mysql_query($query);  if ($error = mysql_error()) {    drupal_set_message(st('Failed to drop a test table from your MySQL database server. We tried dropping a table with the command %query and MySQL reported the following error %error.', array('%query' => $query, '%error' => $error)), 'error');    $err = TRUE;  }  else {    $success[] = 'DROP';  }  if ($err) {    return FALSE;  }  mysql_close($connection);  return TRUE;}
<?php// $Id$$info = array(  // Pre-defined color schemes.  'schemes' => array(    '#0072b9,#027ac6,#2385c2,#5ab5ee,#494949' => t('Blue Lagoon (Default)'),    '#464849,#2f416f,#2a2b2d,#5d6779,#494949' => t('Ash'),    '#55c0e2,#000000,#085360,#007e94,#696969' => t('Aquamarine'),    '#d5b048,#6c420e,#331900,#971702,#494949' => t('Belgian Chocolate'),    '#3f3f3f,#336699,#6598cb,#6598cb,#000000' => t('Bluemarine'),    '#d0cb9a,#917803,#efde01,#e6fb2d,#494949' => t('Citrus Blast'),    '#0f005c,#434f8c,#4d91ff,#1a1575,#000000' => t('Cold Day'),    '#c9c497,#0c7a00,#03961e,#7be000,#494949' => t('Greenbeam'),    '#ffe23d,#a9290a,#fc6d1d,#a30f42,#494949' => t('Mediterrano'),    '#788597,#3f728d,#a9adbc,#d4d4d4,#707070' => t('Mercury'),    '#5b5fa9,#5b5faa,#0a2352,#9fa8d5,#494949' => t('Nocturnal'),    '#7db323,#6a9915,#b5d52a,#7db323,#191a19' => t('Olivia'),    '#12020b,#1b1a13,#f391c6,#f41063,#898080' => t('Pink Plastic'),    '#b7a0ba,#c70000,#a1443a,#f21107,#515d52' => t('Shiny Tomato'),    '#18583d,#1b5f42,#34775a,#52bf90,#2d2d2d' => t('Teal Top'),  ),  // Images to copy over.  'copy' => array(    'images/menu-collapsed.gif',    'images/menu-collapsed-rtl.gif',    'images/menu-expanded.gif',    'images/menu-leaf.gif',  ),  // CSS files (excluding @import) to rewrite with new color scheme.  'css' => array(    'style.css',  ),  // Coordinates of gradient (x, y, width, height).  'gradient' => array(0, 37, 760, 121),  // Color areas to fill (x, y, width, height).  'fill' => array(    'base' => array(0, 0, 760, 568),    'link' => array(107, 533, 41, 23),  ),  // Coordinates of all the theme slices (x, y, width, height)  // with their filename as used in the stylesheet.  'slices' => array(    'images/body.png'                      => array(0, 37, 1, 280),    'images/bg-bar.png'                    => array(202, 530, 76, 14),    'images/bg-bar-white.png'              => array(202, 506, 76, 14),    'images/bg-tab.png'                    => array(107, 533, 41, 23),    'images/bg-navigation.png'             => array(0, 0, 7, 37),    'images/bg-content-left.png'           => array(40, 117, 50, 352),    'images/bg-content-right.png'          => array(510, 117, 50, 352),    'images/bg-content.png'                => array(299, 117, 7, 200),    'images/bg-navigation-item.png'        => array(32, 37, 17, 12),    'images/bg-navigation-item-hover.png'  => array(54, 37, 17, 12),    'images/gradient-inner.png'            => array(646, 307, 112, 42),    'logo.png'                             => array(622, 51, 64, 73),    'screenshot.png'                       => array(0, 37, 400, 240),  ),  // Reference color used for blending. Matches the base.png's colors.  'blend_target' => '#ffffff',  // Preview files.  'preview_image' => 'color/preview.png',  'preview_css' => 'color/preview.css',  // Base file for image generation.  'base_image' => 'color/base.png',);
<?php// $Id$/** * @file profile-wrapper.tpl.php * Default theme implementation for wrapping member listings and their * profiles. * * This template is used when viewing a list of users. It can be a general * list for viewing all users with the url of "example.com/profile" or when * viewing a set of users who share a specific value for a profile such * as "example.com/profile/country/belgium". * * Available variables: * - $content: User account profiles iterated through profile-listing.tpl.php. * - $current_field: The named field being browsed. Provided here for context. *   The above example would result in "last_name". An alternate template name *   is also based on this, e.g., "profile-wrapper-last_name.tpl.php". * * @see template_preprocess_profile_wrapper() */?><div id="profile">  <?php print $content; ?></div>
<?php// $Id$/** * @file * Page callback file for the blog module. *//** * Menu callback; displays a Drupal page containing recent blog entries of a given user. */function blog_page_user($account) {  global $user;  drupal_set_title($title = t("@name's blog", array('@name' => $account->name)));  $items = array();  if (($account->uid == $user->uid) && user_access('create blog entries')) {    $items[] = l(t('Post new blog entry.'), "node/add/blog");  }  else if ($account->uid == $user->uid) {    $items[] = t('You are not allowed to post a new blog entry.');  }  $output = theme('item_list', $items);  $result = pager_query(db_rewrite_sql("SELECT n.nid, n.sticky, n.created FROM {node} n WHERE n.type = 'blog' AND n.uid = %d AND n.status = 1 ORDER BY n.sticky DESC, n.created DESC"), variable_get('default_nodes_main', 10), 0, NULL, $account->uid);  $has_posts = FALSE;    while ($node = db_fetch_object($result)) {    $output .= node_view(node_load($node->nid), 1);    $has_posts = TRUE;  }    if ($has_posts) {    $output .= theme('pager', NULL, variable_get('default_nodes_main', 10));  }  else {    if ($account->uid == $user->uid) {      drupal_set_message(t('You have not created any blog entries.'));    }    else {      drupal_set_message(t('!author has not created any blog entries.', array('!author' => theme('username', $account))));    }  }  drupal_add_feed(url('blog/'. $account->uid .'/feed'), t('RSS - !title', array('!title' => $title)));  return $output;}/** * Menu callback; displays a Drupal page containing recent blog entries of all users. */function blog_page_last() {  global $user;  $output = '';  $items = array();  if (user_access('create blog entries')) {    $items[] = l(t('Create new blog entry.'), "node/add/blog");  }  $output = theme('item_list', $items);  $result = pager_query(db_rewrite_sql("SELECT n.nid, n.created FROM {node} n WHERE n.type = 'blog' AND n.status = 1 ORDER BY n.sticky DESC, n.created DESC"), variable_get('default_nodes_main', 10));  $has_posts = FALSE;  while ($node = db_fetch_object($result)) {    $output .= node_view(node_load($node->nid), 1);    $has_posts = TRUE;  }    if ($has_posts) {    $output .= theme('pager', NULL, variable_get('default_nodes_main', 10));  }  else {    drupal_set_message(t('No blog entries have been created.'));  }  drupal_add_feed(url('blog/feed'), t('RSS - blogs'));  return $output;}/** * Menu callback; displays an RSS feed containing recent blog entries of a given user. */function blog_feed_user($account) {  $result = db_query_range(db_rewrite_sql("SELECT n.nid, n.created FROM {node} n  WHERE n.type = 'blog' AND n.uid = %d AND n.status = 1 ORDER BY n.created DESC"), $account->uid, 0, variable_get('feed_default_items', 10));  $channel['title'] = t("!name's blog", array('!name' => $account->name));  $channel['link'] = url('blog/'. $account->uid, array('absolute' => TRUE));  $items = array();  while ($row = db_fetch_object($result)) {    $items[] = $row->nid;  }  node_feed($items, $channel);}/** * Menu callback; displays an RSS feed containing recent blog entries of all users. */function blog_feed_last() {  $result = db_query_range(db_rewrite_sql("SELECT n.nid, n.created FROM {node} n WHERE n.type = 'blog' AND n.status = 1 ORDER BY n.created DESC"), 0, variable_get('feed_default_items', 10));  $channel['title'] = t('!site_name blogs', array('!site_name' => variable_get('site_name', 'Drupal')));  $channel['link'] = url('blog', array('absolute' => TRUE));  $items = array();  while ($row = db_fetch_object($result)) {    $items[] = $row->nid;  }  node_feed($items, $channel);}
<?php// $Id$?><div class="box">  <?php if ($title): ?>  <h2 class="title"><?php print $title ?></h2>  <?php endif; ?>  <div class="content"><?php print $content ?></div></div>
<?php// $Id$/** * @file book-all-books-block.tpl.php * Default theme implementation for rendering book outlines within a block. * This template is used only when the block is configured to "show block on * all pages" which presents Multiple independent books on all pages. * * Available variables: * - $book_menus: Array of book outlines rendered as an unordered list. It is *   keyed to the parent book ID which is also the ID of the parent node *   containing an entire outline. * * @see template_preprocess_book_all_books_block() */?><?php foreach ($book_menus as $book_id => $menu) : ?><div id="book-block-menu-<?php print $book_id; ?>" class="book-block-menu">  <?php print $menu; ?></div><?php endforeach; ?>
<?php// $Id$/** * @file comment-folded.tpl.php * Default theme implementation for folded comments. * * Available variables: * - $title: Linked title to full comment. * - $new: New comment marker. * - $author: Comment author. Can be link or plain text. * - $date: Date and time of posting. * - $comment: Full comment object. * * @see template_preprocess_comment_folded() * @see theme_comment_folded() */?><div class="comment-folded">  <span class="subject"><?php print $title .' '. $new; ?></span><span class="credit"><?php print t('by') .' '. $author; ?></span></div>
<?php// $Id$/** * @file * Database interface code for MySQL database servers. *//** * @ingroup database * @{ */// Include functions shared between mysql and mysqli.require_once './includes/database.mysql-common.inc';/** * Report database status. */function db_status_report($phase) {  $t = get_t();  $version = db_version();  $form['mysql'] = array(    'title' => $t('MySQL database'),    'value' => ($phase == 'runtime') ? l($version, 'admin/reports/status/sql') : $version,  );  if (version_compare($version, DRUPAL_MINIMUM_MYSQL) < 0) {    $form['mysql']['severity'] = REQUIREMENT_ERROR;    $form['mysql']['description'] = $t('Your MySQL Server is too old. Drupal requires at least MySQL %version.', array('%version' => DRUPAL_MINIMUM_MYSQL));  }  return $form;}/** * Returns the version of the database server currently in use. * * @return Database server version */function db_version() {  list($version) = explode('-', mysql_get_server_info());  return $version;}/** * Initialize a database connection. */function db_connect($url) {  $url = parse_url($url);  // Check if MySQL support is present in PHP  if (!function_exists('mysql_connect')) {    _db_error_page('Unable to use the MySQL database because the MySQL extension for PHP is not installed. Check your <code>php.ini</code> to see how you can enable it.');  }  // Decode url-encoded information in the db connection string  $url['user'] = urldecode($url['user']);  // Test if database url has a password.  $url['pass'] = isset($url['pass']) ? urldecode($url['pass']) : '';  $url['host'] = urldecode($url['host']);  $url['path'] = urldecode($url['path']);  // Allow for non-standard MySQL port.  if (isset($url['port'])) {    $url['host'] = $url['host'] .':'. $url['port'];  }  // - TRUE makes mysql_connect() always open a new link, even if  //   mysql_connect() was called before with the same parameters.  //   This is important if you are using two databases on the same  //   server.  // - 2 means CLIENT_FOUND_ROWS: return the number of found  //   (matched) rows, not the number of affected rows.  $connection = @mysql_connect($url['host'], $url['user'], $url['pass'], TRUE, 2);  if (!$connection || !mysql_select_db(substr($url['path'], 1))) {    // Show error screen otherwise    _db_error_page(mysql_error());  }  // Force UTF-8.  mysql_query('SET NAMES "utf8"', $connection);  return $connection;}/** * Helper function for db_query(). */function _db_query($query, $debug = 0) {  global $active_db, $queries, $user;  if (variable_get('dev_query', 0)) {    list($usec, $sec) = explode(' ', microtime());    $timer = (float)$usec + (float)$sec;    // If devel.module query logging is enabled, prepend a comment with the username and calling function    // to the SQL string. This is useful when running mysql's SHOW PROCESSLIST to learn what exact    // code is issueing the slow query.    $bt = debug_backtrace();    // t() may not be available yet so we don't wrap 'Anonymous'.    $name = $user->uid ? $user->name : variable_get('anonymous', 'Anonymous');    // str_replace() to prevent SQL injection via username or anonymous name.    $name = str_replace(array('*', '/'), '', $name);    $query = '/* '. $name .' : '. $bt[2]['function'] .' */ '. $query;  }  $result = mysql_query($query, $active_db);  if (variable_get('dev_query', 0)) {    $query = $bt[2]['function'] ."\n". $query;    list($usec, $sec) = explode(' ', microtime());    $stop = (float)$usec + (float)$sec;    $diff = $stop - $timer;    $queries[] = array($query, $diff);  }  if ($debug) {    print '<p>query: '. $query .'<br />error:'. mysql_error($active_db) .'</p>';  }  if (!mysql_errno($active_db)) {    return $result;  }  else {    // Indicate to drupal_error_handler that this is a database error.    ${DB_ERROR} = TRUE;    trigger_error(check_plain(mysql_error($active_db) ."\nquery: ". $query), E_USER_WARNING);    return FALSE;  }}/** * Fetch one result row from the previous query as an object. * * @param $result *   A database query result resource, as returned from db_query(). * @return *   An object representing the next row of the result, or FALSE. The attributes *   of this object are the table fields selected by the query. */function db_fetch_object($result) {  if ($result) {    return mysql_fetch_object($result);  }}/** * Fetch one result row from the previous query as an array. * * @param $result *   A database query result resource, as returned from db_query(). * @return *   An associative array representing the next row of the result, or FALSE. *   The keys of this object are the names of the table fields selected by the *   query, and the values are the field values for this result row. */function db_fetch_array($result) {  if ($result) {    return mysql_fetch_array($result, MYSQL_ASSOC);  }}/** * Return an individual result field from the previous query. * * Only use this function if exactly one field is being selected; otherwise, * use db_fetch_object() or db_fetch_array(). * * @param $result *   A database query result resource, as returned from db_query(). * @return *   The resulting field or FALSE. */function db_result($result) {  if ($result && mysql_num_rows($result) > 0) {    // The mysql_fetch_row function has an optional second parameter $row    // but that can't be used for compatibility with Oracle, DB2, etc.    $array = mysql_fetch_row($result);    return $array[0];  }  return FALSE;}/** * Determine whether the previous query caused an error. */function db_error() {  global $active_db;  return mysql_errno($active_db);}/** * Determine the number of rows changed by the preceding query. */function db_affected_rows() {  global $active_db;  return mysql_affected_rows($active_db);}/** * Runs a limited-range query in the active database. * * Use this as a substitute for db_query() when a subset of the query is to be * returned. * User-supplied arguments to the query should be passed in as separate parameters * so that they can be properly escaped to avoid SQL injection attacks. * * @param $query *   A string containing an SQL query. * @param ... *   A variable number of arguments which are substituted into the query *   using printf() syntax. The query arguments can be enclosed in one *   array instead. *   Valid %-modifiers are: %s, %d, %f, %b (binary data, do not enclose *   in '') and %%. * *   NOTE: using this syntax will cast NULL and FALSE values to decimal 0, *   and TRUE values to decimal 1. * * @param $from *   The first result row to return. * @param $count *   The maximum number of result rows to return. * @return *   A database query result resource, or FALSE if the query was not executed *   correctly. */function db_query_range($query) {  $args = func_get_args();  $count = array_pop($args);  $from = array_pop($args);  array_shift($args);  $query = db_prefix_tables($query);  if (isset($args[0]) and is_array($args[0])) { // 'All arguments in one array' syntax    $args = $args[0];  }  _db_query_callback($args, TRUE);  $query = preg_replace_callback(DB_QUERY_REGEXP, '_db_query_callback', $query);  $query .= ' LIMIT '. (int)$from .', '. (int)$count;  return _db_query($query);}/** * Runs a SELECT query and stores its results in a temporary table. * * Use this as a substitute for db_query() when the results need to stored * in a temporary table. Temporary tables exist for the duration of the page * request. * User-supplied arguments to the query should be passed in as separate parameters * so that they can be properly escaped to avoid SQL injection attacks. * * Note that if you need to know how many results were returned, you should do * a SELECT COUNT(*) on the temporary table afterwards. db_affected_rows() does * not give consistent result across different database types in this case. * * @param $query *   A string containing a normal SELECT SQL query. * @param ... *   A variable number of arguments which are substituted into the query *   using printf() syntax. The query arguments can be enclosed in one *   array instead. *   Valid %-modifiers are: %s, %d, %f, %b (binary data, do not enclose *   in '') and %%. * *   NOTE: using this syntax will cast NULL and FALSE values to decimal 0, *   and TRUE values to decimal 1. * * @param $table *   The name of the temporary table to select into. This name will not be *   prefixed as there is no risk of collision. * @return *   A database query result resource, or FALSE if the query was not executed *   correctly. */function db_query_temporary($query) {  $args = func_get_args();  $tablename = array_pop($args);  array_shift($args);  $query = preg_replace('/^SELECT/i', 'CREATE TEMPORARY TABLE '. $tablename .' Engine=HEAP SELECT', db_prefix_tables($query));  if (isset($args[0]) and is_array($args[0])) { // 'All arguments in one array' syntax    $args = $args[0];  }  _db_query_callback($args, TRUE);  $query = preg_replace_callback(DB_QUERY_REGEXP, '_db_query_callback', $query);  return _db_query($query);}/** * Returns a properly formatted Binary Large OBject value. * * @param $data *   Data to encode. * @return *  Encoded data. */function db_encode_blob($data) {  global $active_db;  return "'". mysql_real_escape_string($data, $active_db) ."'";}/** * Returns text from a Binary Large Object value. * * @param $data *   Data to decode. * @return *  Decoded data. */function db_decode_blob($data) {  return $data;}/** * Prepare user input for use in a database query, preventing SQL injection attacks. */function db_escape_string($text) {  global $active_db;  return mysql_real_escape_string($text, $active_db);}/** * Lock a table. */function db_lock_table($table) {  db_query('LOCK TABLES {'. db_escape_table($table) .'} WRITE');}/** * Unlock all locked tables. */function db_unlock_tables() {  db_query('UNLOCK TABLES');}/** * Check if a table exists. */function db_table_exists($table) {  return (bool) db_fetch_object(db_query("SHOW TABLES LIKE '{". db_escape_table($table) ."}'"));}/** * Check if a column exists in the given table. */function db_column_exists($table, $column) {  return (bool) db_fetch_object(db_query("SHOW COLUMNS FROM {". db_escape_table($table) ."} LIKE '". db_escape_table($column) ."'"));}/** * @} End of "ingroup database". */
<?php// $Id$/** * @file comment-wrapper.tpl.php * Default theme implementation to wrap aggregator content. * * Available variables: * - $content: All aggregator content. * - $page: Pager links rendered through theme_pager(). * * @see template_preprocess() * @see template_preprocess_comment_wrapper() */?><div id="aggregator">  <?php print $content; ?>  <?php print $pager; ?></div>
<?php// $Id$/** * @file aggregator-summary-item.tpl.php * Default theme implementation to present a linked feed item for summaries. * * Available variables: * - $feed_url: Link to originating feed. * - $feed_title: Title of feed. * - $feed_age: Age of remote feed. * - $source_url: Link to remote source. * - $source_title: Locally set title for the source. * * @see template_preprocess() * @see template_preprocess_aggregator_summary_item() */?><a href="<?php print $feed_url; ?>"><?php print $feed_title; ?></a> <span class="age"><?php print $feed_age; ?></span><?php if ($source_url) : ?>, <span class="source"><a href="<?php print $source_url; ?>"><?php print $source_title; ?></a></span><?php endif; ?>
<?php// $Id$/** * @file * Admin page callbacks for the comment module. *//** * Menu callback; present an administrative comment listing. */function comment_admin($type = 'new') {  $edit = $_POST;  if (isset($edit['operation']) && ($edit['operation'] == 'delete') && isset($edit['comments']) && $edit['comments']) {    return drupal_get_form('comment_multiple_delete_confirm');  }  else {    return drupal_get_form('comment_admin_overview', $type, arg(4));  }}/** * Form builder; Builds the comment overview form for the admin. * * @param $type *   Not used. * @param $arg *   Current path's fourth component deciding the form type (Published comments/Approval queue) * @return *   The form structure. * @ingroup forms * @see comment_admin_overview_validate() * @see comment_admin_overview_submit() * @see theme_comment_admin_overview() */function comment_admin_overview($type = 'new', $arg) {  // build an 'Update options' form  $form['options'] = array(    '#type' => 'fieldset', '#title' => t('Update options'),    '#prefix' => '<div class="container-inline">', '#suffix' => '</div>'  );  $options = array();  foreach (comment_operations($arg == 'approval' ? 'publish' : 'unpublish') as $key => $value) {    $options[$key] = $value[0];  }  $form['options']['operation'] = array('#type' => 'select', '#options' => $options, '#default_value' => 'publish');  $form['options']['submit'] = array('#type' => 'submit', '#value' => t('Update'));  // load the comments that we want to display  $status = ($arg == 'approval') ? COMMENT_NOT_PUBLISHED : COMMENT_PUBLISHED;  $form['header'] = array('#type' => 'value', '#value' => array(    theme('table_select_header_cell'),    array('data' => t('Subject'), 'field' => 'subject'),    array('data' => t('Author'), 'field' => 'name'),    array('data' => t('Posted in'), 'field' => 'node_title'),    array('data' => t('Time'), 'field' => 'timestamp', 'sort' => 'desc'),    array('data' => t('Operations'))  ));  $result = pager_query('SELECT c.subject, c.nid, c.cid, c.comment, c.timestamp, c.status, c.name, c.homepage, u.name AS registered_name, u.uid, n.title as node_title FROM {comments} c INNER JOIN {users} u ON u.uid = c.uid INNER JOIN {node} n ON n.nid = c.nid WHERE c.status = %d'. tablesort_sql($form['header']['#value']), 50, 0, NULL, $status);  // build a table listing the appropriate comments  $destination = drupal_get_destination();  while ($comment = db_fetch_object($result)) {    $comments[$comment->cid] = '';    $comment->name = $comment->uid ? $comment->registered_name : $comment->name;    $form['subject'][$comment->cid] = array('#value' => l($comment->subject, 'node/'. $comment->nid, array('attributes' => array('title' => truncate_utf8($comment->comment, 128)), 'fragment' => 'comment-'. $comment->cid)));    $form['username'][$comment->cid] = array('#value' => theme('username', $comment));    $form['node_title'][$comment->cid] = array('#value' => l($comment->node_title, 'node/'. $comment->nid));    $form['timestamp'][$comment->cid] = array('#value' => format_date($comment->timestamp, 'small'));    $form['operations'][$comment->cid] = array('#value' => l(t('edit'), 'comment/edit/'. $comment->cid, array('query' => $destination)));  }  $form['comments'] = array('#type' => 'checkboxes', '#options' => isset($comments) ? $comments: array());  $form['pager'] = array('#value' => theme('pager', NULL, 50, 0));  return $form;}/** * Validate comment_admin_overview form submissions. * * We can't execute any 'Update options' if no comments were selected. */function comment_admin_overview_validate($form, &$form_state) {  $form_state['values']['comments'] = array_diff($form_state['values']['comments'], array(0));  if (count($form_state['values']['comments']) == 0) {    form_set_error('', t('Please select one or more comments to perform the update on.'));  }}/** * Process comment_admin_overview form submissions. * * Execute the chosen 'Update option' on the selected comments, such as * publishing, unpublishing or deleting. */function comment_admin_overview_submit($form, &$form_state) {  $operations = comment_operations();  if (!empty($operations[$form_state['values']['operation']][1])) {    // extract the appropriate database query operation    $query = $operations[$form_state['values']['operation']][1];    foreach ($form_state['values']['comments'] as $cid => $value) {      if ($value) {        // perform the update action, then refresh node statistics        db_query($query, $cid);        $comment = _comment_load($cid);        _comment_update_node_statistics($comment->nid);        // Allow modules to respond to the updating of a comment.        comment_invoke_comment($comment, $form_state['values']['operation']);        // Add an entry to the watchdog log.        watchdog('content', 'Comment: updated %subject.', array('%subject' => $comment->subject), WATCHDOG_NOTICE, l(t('view'), 'node/'. $comment->nid, array('fragment' => 'comment-'. $comment->cid)));      }    }    cache_clear_all();    drupal_set_message(t('The update has been performed.'));    $form_state['redirect'] = 'admin/content/comment';  }}/** * Theme the comment admin form. * * @param $form *   An associative array containing the structure of the form. * @ingroup themeable */function theme_comment_admin_overview($form) {  $output = drupal_render($form['options']);  if (isset($form['subject']) && is_array($form['subject'])) {    foreach (element_children($form['subject']) as $key) {      $row = array();      $row[] = drupal_render($form['comments'][$key]);      $row[] = drupal_render($form['subject'][$key]);      $row[] = drupal_render($form['username'][$key]);      $row[] = drupal_render($form['node_title'][$key]);      $row[] = drupal_render($form['timestamp'][$key]);      $row[] = drupal_render($form['operations'][$key]);      $rows[] = $row;    }  }  else {    $rows[] = array(array('data' => t('No comments available.'), 'colspan' => '6'));  }  $output .= theme('table', $form['header']['#value'], $rows);  if ($form['pager']['#value']) {    $output .= drupal_render($form['pager']);  }  $output .= drupal_render($form);  return $output;}/** * List the selected comments and verify that the admin really wants to delete * them. * * @param $form_state *   An associative array containing the current state of the form. * @return *   TRUE if the comments should be deleted, FALSE otherwise. * @ingroup forms * @see comment_multiple_delete_confirm_submit() */function comment_multiple_delete_confirm(&$form_state) {  $edit = $form_state['post'];  $form['comments'] = array('#prefix' => '<ul>', '#suffix' => '</ul>', '#tree' => TRUE);  // array_filter() returns only elements with actual values  $comment_counter = 0;  foreach (array_filter($edit['comments']) as $cid => $value) {    $comment = _comment_load($cid);    if (is_object($comment) && is_numeric($comment->cid)) {      $subject = db_result(db_query('SELECT subject FROM {comments} WHERE cid = %d', $cid));      $form['comments'][$cid] = array('#type' => 'hidden', '#value' => $cid, '#prefix' => '<li>', '#suffix' => check_plain($subject) .'</li>');      $comment_counter++;    }  }  $form['operation'] = array('#type' => 'hidden', '#value' => 'delete');  if (!$comment_counter) {    drupal_set_message(t('There do not appear to be any comments to delete or your selected comment was deleted by another administrator.'));    drupal_goto('admin/content/comment');  }  else {    return confirm_form($form,                        t('Are you sure you want to delete these comments and all their children?'),                        'admin/content/comment', t('This action cannot be undone.'),                        t('Delete comments'), t('Cancel'));  }}/** * Process comment_multiple_delete_confirm form submissions. * * Perform the actual comment deletion. */function comment_multiple_delete_confirm_submit($form, &$form_state) {  if ($form_state['values']['confirm']) {    foreach ($form_state['values']['comments'] as $cid => $value) {      $comment = _comment_load($cid);      _comment_delete_thread($comment);      _comment_update_node_statistics($comment->nid);    }    cache_clear_all();    drupal_set_message(t('The comments have been deleted.'));  }  $form_state['redirect'] = 'admin/content/comment';}/** * Menu callback; delete a comment. * * @param $cid *   The comment do be deleted. */function comment_delete($cid = NULL) {  $comment = db_fetch_object(db_query('SELECT c.*, u.name AS registered_name, u.uid FROM {comments} c INNER JOIN {users} u ON u.uid = c.uid WHERE c.cid = %d', $cid));  $comment->name = $comment->uid ? $comment->registered_name : $comment->name;  $output = '';  if (is_object($comment) && is_numeric($comment->cid)) {    $output = drupal_get_form('comment_confirm_delete', $comment);  }  else {    drupal_set_message(t('The comment no longer exists.'));  }  return $output;}/** * Form builder; Builds the confirmation form for deleting a single comment. * * @ingroup forms * @see comment_confirm_delete_submit() */function comment_confirm_delete(&$form_state, $comment) {  $form = array();  $form['#comment'] = $comment;  return confirm_form(    $form,    t('Are you sure you want to delete the comment %title?', array('%title' => $comment->subject)),    'node/'. $comment->nid,    t('Any replies to this comment will be lost. This action cannot be undone.'),    t('Delete'),    t('Cancel'),    'comment_confirm_delete');}/** * Process comment_confirm_delete form submissions. */function comment_confirm_delete_submit($form, &$form_state) {  drupal_set_message(t('The comment and all its replies have been deleted.'));  $comment = $form['#comment'];  // Delete comment and its replies.  _comment_delete_thread($comment);  _comment_update_node_statistics($comment->nid);  // Clear the cache so an anonymous user sees that his comment was deleted.  cache_clear_all();  $form_state['redirect'] = "node/$comment->nid";}/** * Perform the actual deletion of a comment and all its replies. * * @param $comment *   An associative array describing the comment to be deleted. */function _comment_delete_thread($comment) {  if (!is_object($comment) || !is_numeric($comment->cid)) {    watchdog('content', 'Cannot delete non-existent comment.', array(), WATCHDOG_WARNING);    return;  }  // Delete the comment:  db_query('DELETE FROM {comments} WHERE cid = %d', $comment->cid);  watchdog('content', 'Comment: deleted %subject.', array('%subject' => $comment->subject));  comment_invoke_comment($comment, 'delete');  // Delete the comment's replies  $result = db_query('SELECT c.*, u.name AS registered_name, u.uid FROM {comments} c INNER JOIN {users} u ON u.uid = c.uid WHERE pid = %d', $comment->cid);  while ($comment = db_fetch_object($result)) {    $comment->name = $comment->uid ? $comment->registered_name : $comment->name;    _comment_delete_thread($comment);  }}
<?php// $Id$/** * A stub cache implementation to be used during the installation * process when database access is not yet available. Because Drupal's * caching system never requires that cached data be present, these * stub functions can short-circuit the process and sidestep the * need for any persistent storage. Obviously, using this cache * implementation during normal operations would have a negative impact * on performance. */function cache_get($key, $table = 'cache') {  return FALSE;}function cache_set($cid, $data, $table = 'cache', $expire = CACHE_PERMANENT, $headers = NULL) {  return;}function cache_clear_all($cid = NULL, $table = NULL, $wildcard = FALSE) {  return;}
<?php// $Id$?>  <div class="box">    <?php if ($title) { ?><h2 class="title"><?php print $title; ?></h2><?php } ?>    <div class="content"><?php print $content; ?></div> </div>
<?php// $Id$/** * @file * Functions shared between mysql and mysqli database engines. *//** * Runs a basic query in the active database. * * User-supplied arguments to the query should be passed in as separate * parameters so that they can be properly escaped to avoid SQL injection * attacks. * * @param $query *   A string containing an SQL query. * @param ... *   A variable number of arguments which are substituted into the query *   using printf() syntax. Instead of a variable number of query arguments, *   you may also pass a single array containing the query arguments. * *   Valid %-modifiers are: %s, %d, %f, %b (binary data, do not enclose *   in '') and %%. * *   NOTE: using this syntax will cast NULL and FALSE values to decimal 0, *   and TRUE values to decimal 1. * * @return *   A database query result resource, or FALSE if the query was not *   executed correctly. */function db_query($query) {  $args = func_get_args();  array_shift($args);  $query = db_prefix_tables($query);  if (isset($args[0]) and is_array($args[0])) { // 'All arguments in one array' syntax    $args = $args[0];  }  _db_query_callback($args, TRUE);  $query = preg_replace_callback(DB_QUERY_REGEXP, '_db_query_callback', $query);  return _db_query($query);}/** * @ingroup schemaapi * @{ *//** * Generate SQL to create a new table from a Drupal schema definition. * * @param $name *   The name of the table to create. * @param $table *   A Schema API table definition array. * @return *   An array of SQL statements to create the table. */function db_create_table_sql($name, $table) {  if (empty($table['mysql_suffix'])) {    $table['mysql_suffix'] = "/*!40100 DEFAULT CHARACTER SET UTF8 */";  }  $sql = "CREATE TABLE {". $name ."} (\n";  // Add the SQL statement for each field.  foreach ($table['fields'] as $field_name => $field) {    $sql .= _db_create_field_sql($field_name, _db_process_field($field)) .", \n";  }  // Process keys & indexes.  $keys = _db_create_keys_sql($table);  if (count($keys)) {    $sql .= implode(", \n", $keys) .", \n";  }  // Remove the last comma and space.  $sql = substr($sql, 0, -3) ."\n) ";  $sql .= $table['mysql_suffix'];  return array($sql);}function _db_create_keys_sql($spec) {  $keys = array();  if (!empty($spec['primary key'])) {    $keys[] = 'PRIMARY KEY ('. _db_create_key_sql($spec['primary key']) .')';  }  if (!empty($spec['unique keys'])) {    foreach ($spec['unique keys'] as $key => $fields) {      $keys[] = 'UNIQUE KEY '. $key .' ('. _db_create_key_sql($fields) .')';    }  }  if (!empty($spec['indexes'])) {    foreach ($spec['indexes'] as $index => $fields) {      $keys[] = 'INDEX '. $index .' ('. _db_create_key_sql($fields) .')';    }  }  return $keys;}function _db_create_key_sql($fields) {  $ret = array();  foreach ($fields as $field) {    if (is_array($field)) {      $ret[] = $field[0] .'('. $field[1] .')';    }    else {      $ret[] = $field;    }  }  return implode(', ', $ret);}/** * Set database-engine specific properties for a field. * * @param $field *   A field description array, as specified in the schema documentation. */function _db_process_field($field) {  if (!isset($field['size'])) {    $field['size'] = 'normal';  }  // Set the correct database-engine specific datatype.  if (!isset($field['mysql_type'])) {    $map = db_type_map();    $field['mysql_type'] = $map[$field['type'] .':'. $field['size']];  }  if ($field['type'] == 'serial') {    $field['auto_increment'] = TRUE;  }  return $field;}/** * Create an SQL string for a field to be used in table creation or alteration. * * Before passing a field out of a schema definition into this function it has * to be processed by _db_process_field(). * * @param $name *    Name of the field. * @param $spec *    The field specification, as per the schema data structure format. */function _db_create_field_sql($name, $spec) {  $sql = "`". $name ."` ". $spec['mysql_type'];  if (in_array($spec['type'], array('varchar', 'char', 'text')) && isset($spec['length'])) {    $sql .= '('. $spec['length'] .')';  }  elseif (isset($spec['precision']) && isset($spec['scale'])) {    $sql .= '('. $spec['precision'] .', '. $spec['scale'] .')';  }  if (!empty($spec['unsigned'])) {    $sql .= ' unsigned';  }  if (!empty($spec['not null'])) {    $sql .= ' NOT NULL';  }  if (!empty($spec['auto_increment'])) {    $sql .= ' auto_increment';  }  if (isset($spec['default'])) {    if (is_string($spec['default'])) {      $spec['default'] = "'". $spec['default'] ."'";    }    $sql .= ' DEFAULT '. $spec['default'];  }  if (empty($spec['not null']) && !isset($spec['default'])) {    $sql .= ' DEFAULT NULL';  }  return $sql;}/** * This maps a generic data type in combination with its data size * to the engine-specific data type. */function db_type_map() {  // Put :normal last so it gets preserved by array_flip.  This makes  // it much easier for modules (such as schema.module) to map  // database types back into schema types.  $map = array(    'varchar:normal'  => 'VARCHAR',    'char:normal'     => 'CHAR',    'text:tiny'       => 'TINYTEXT',    'text:small'      => 'TINYTEXT',    'text:medium'     => 'MEDIUMTEXT',    'text:big'        => 'LONGTEXT',    'text:normal'     => 'TEXT',    'serial:tiny'     => 'TINYINT',    'serial:small'    => 'SMALLINT',    'serial:medium'   => 'MEDIUMINT',    'serial:big'      => 'BIGINT',    'serial:normal'   => 'INT',    'int:tiny'        => 'TINYINT',    'int:small'       => 'SMALLINT',    'int:medium'      => 'MEDIUMINT',    'int:big'         => 'BIGINT',    'int:normal'      => 'INT',    'float:tiny'      => 'FLOAT',    'float:small'     => 'FLOAT',    'float:medium'    => 'FLOAT',    'float:big'       => 'DOUBLE',    'float:normal'    => 'FLOAT',    'numeric:normal'  => 'DECIMAL',    'blob:big'        => 'LONGBLOB',    'blob:normal'     => 'BLOB',    'datetime:normal' => 'DATETIME',  );  return $map;}/** * Rename a table. * * @param $ret *   Array to which query results will be added. * @param $table *   The table to be renamed. * @param $new_name *   The new name for the table. */function db_rename_table(&$ret, $table, $new_name) {  $ret[] = update_sql('ALTER TABLE {'. $table .'} RENAME TO {'. $new_name .'}');}/** * Drop a table. * * @param $ret *   Array to which query results will be added. * @param $table *   The table to be dropped. */function db_drop_table(&$ret, $table) {  $ret[] = update_sql('DROP TABLE {'. $table .'}');}/** * Add a new field to a table. * * @param $ret *   Array to which query results will be added. * @param $table *   Name of the table to be altered. * @param $field *   Name of the field to be added. * @param $spec *   The field specification array, as taken from a schema definition. *   The specification may also contain the key 'initial', the newly *   created field will be set to the value of the key in all rows. *   This is most useful for creating NOT NULL columns with no default *   value in existing tables. * @param $keys_new *   Optional keys and indexes specification to be created on the *   table along with adding the field. The format is the same as a *   table specification but without the 'fields' element.  If you are *   adding a type 'serial' field, you MUST specify at least one key *   or index including it in this array. @see db_change_field for more *   explanation why. */function db_add_field(&$ret, $table, $field, $spec, $keys_new = array()) {  $fixnull = FALSE;  if (!empty($spec['not null']) && !isset($spec['default'])) {    $fixnull = TRUE;    $spec['not null'] = FALSE;  }  $query = 'ALTER TABLE {'. $table .'} ADD ';  $query .= _db_create_field_sql($field, _db_process_field($spec));  if (count($keys_new)) {    $query .= ', ADD '. implode(', ADD ', _db_create_keys_sql($keys_new));  }  $ret[] = update_sql($query);  if (isset($spec['initial'])) {    // All this because update_sql does not support %-placeholders.    $sql = 'UPDATE {'. $table .'} SET '. $field .' = '. db_type_placeholder($spec['type']);    $result = db_query($sql, $spec['initial']);    $ret[] = array('success' => $result !== FALSE, 'query' => check_plain($sql .' ('. $spec['initial'] .')'));  }  if ($fixnull) {    $spec['not null'] = TRUE;    db_change_field($ret, $table, $field, $field, $spec);  }}/** * Drop a field. * * @param $ret *   Array to which query results will be added. * @param $table *   The table to be altered. * @param $field *   The field to be dropped. */function db_drop_field(&$ret, $table, $field) {  $ret[] = update_sql('ALTER TABLE {'. $table .'} DROP '. $field);}/** * Set the default value for a field. * * @param $ret *   Array to which query results will be added. * @param $table *   The table to be altered. * @param $field *   The field to be altered. * @param $default *   Default value to be set. NULL for 'default NULL'. */function db_field_set_default(&$ret, $table, $field, $default) {  if ($default === NULL) {    $default = 'NULL';  }  else {    $default = is_string($default) ? "'$default'" : $default;  }  $ret[] = update_sql('ALTER TABLE {'. $table .'} ALTER COLUMN '. $field .' SET DEFAULT '. $default);}/** * Set a field to have no default value. * * @param $ret *   Array to which query results will be added. * @param $table *   The table to be altered. * @param $field *   The field to be altered. */function db_field_set_no_default(&$ret, $table, $field) {  $ret[] = update_sql('ALTER TABLE {'. $table .'} ALTER COLUMN '. $field .' DROP DEFAULT');}/** * Add a primary key. * * @param $ret *   Array to which query results will be added. * @param $table *   The table to be altered. * @param $fields *   Fields for the primary key. */function db_add_primary_key(&$ret, $table, $fields) {  $ret[] = update_sql('ALTER TABLE {'. $table .'} ADD PRIMARY KEY ('.    _db_create_key_sql($fields) .')');}/** * Drop the primary key. * * @param $ret *   Array to which query results will be added. * @param $table *   The table to be altered. */function db_drop_primary_key(&$ret, $table) {  $ret[] = update_sql('ALTER TABLE {'. $table .'} DROP PRIMARY KEY');}/** * Add a unique key. * * @param $ret *   Array to which query results will be added. * @param $table *   The table to be altered. * @param $name *   The name of the key. * @param $fields *   An array of field names. */function db_add_unique_key(&$ret, $table, $name, $fields) {  $ret[] = update_sql('ALTER TABLE {'. $table .'} ADD UNIQUE KEY '.    $name .' ('. _db_create_key_sql($fields) .')');}/** * Drop a unique key. * * @param $ret *   Array to which query results will be added. * @param $table *   The table to be altered. * @param $name *   The name of the key. */function db_drop_unique_key(&$ret, $table, $name) {  $ret[] = update_sql('ALTER TABLE {'. $table .'} DROP KEY '. $name);}/** * Add an index. * * @param $ret *   Array to which query results will be added. * @param $table *   The table to be altered. * @param $name *   The name of the index. * @param $fields *   An array of field names. */function db_add_index(&$ret, $table, $name, $fields) {  $query = 'ALTER TABLE {'. $table .'} ADD INDEX '. $name .' ('. _db_create_key_sql($fields) .')';  $ret[] = update_sql($query);}/** * Drop an index. * * @param $ret *   Array to which query results will be added. * @param $table *   The table to be altered. * @param $name *   The name of the index. */function db_drop_index(&$ret, $table, $name) {  $ret[] = update_sql('ALTER TABLE {'. $table .'} DROP INDEX '. $name);}/** * Change a field definition. * * IMPORTANT NOTE: To maintain database portability, you have to explicitly * recreate all indices and primary keys that are using the changed field. * * That means that you have to drop all affected keys and indexes with * db_drop_{primary_key,unique_key,index}() before calling db_change_field(). * To recreate the keys and indices, pass the key definitions as the * optional $keys_new argument directly to db_change_field(). * * For example, suppose you have: * @code * $schema['foo'] = array( *   'fields' => array( *     'bar' => array('type' => 'int', 'not null' => TRUE) *   ), *   'primary key' => array('bar') * ); * @endcode * and you want to change foo.bar to be type serial, leaving it as the * primary key.  The correct sequence is: * @code * db_drop_primary_key($ret, 'foo'); * db_change_field($ret, 'foo', 'bar', 'bar', *   array('type' => 'serial', 'not null' => TRUE), *   array('primary key' => array('bar'))); * @endcode * * The reasons for this are due to the different database engines: * * On PostgreSQL, changing a field definition involves adding a new field * and dropping an old one which* causes any indices, primary keys and * sequences (from serial-type fields) that use the changed field to be dropped. * * On MySQL, all type 'serial' fields must be part of at least one key * or index as soon as they are created.  You cannot use * db_add_{primary_key,unique_key,index}() for this purpose because * the ALTER TABLE command will fail to add the column without a key * or index specification.  The solution is to use the optional * $keys_new argument to create the key or index at the same time as * field. * * You could use db_add_{primary_key,unique_key,index}() in all cases * unless you are converting a field to be type serial. You can use * the $keys_new argument in all cases. * * @param $ret *   Array to which query results will be added. * @param $table *   Name of the table. * @param $field *   Name of the field to change. * @param $field_new *   New name for the field (set to the same as $field if you don't want to change the name). * @param $spec *   The field specification for the new field. * @param $keys_new *   Optional keys and indexes specification to be created on the *   table along with changing the field. The format is the same as a *   table specification but without the 'fields' element. */function db_change_field(&$ret, $table, $field, $field_new, $spec, $keys_new = array()) {  $sql = 'ALTER TABLE {'. $table .'} CHANGE `'. $field .'` '.    _db_create_field_sql($field_new, _db_process_field($spec));  if (count($keys_new)) {    $sql .= ', ADD '. implode(', ADD ', _db_create_keys_sql($keys_new));  }  $ret[] = update_sql($sql);}/** * Returns the last insert id. * * @param $table *   The name of the table you inserted into. * @param $field *   The name of the autoincrement field. */function db_last_insert_id($table, $field) {  return db_result(db_query('SELECT LAST_INSERT_ID()'));}
<?php// $Id$/** * @file * The PHP page that serves all page requests on a Drupal installation. * * The routines here dispatch control to the appropriate handler, which then * prints the appropriate page. * * All Drupal code is released under the GNU General Public License. * See COPYRIGHT.txt and LICENSE.txt. */require_once './includes/bootstrap.inc';drupal_bootstrap(DRUPAL_BOOTSTRAP_FULL);$return = menu_execute_active_handler();// Menu status constants are integers; page content is a string.if (is_int($return)) {  switch ($return) {    case MENU_NOT_FOUND:      drupal_not_found();      break;    case MENU_ACCESS_DENIED:      drupal_access_denied();      break;    case MENU_SITE_OFFLINE:      drupal_site_offline();      break;  }}elseif (isset($return)) {  // Print any value (including an empty string) except NULL or undefined:  print theme('page', $return);}drupal_page_footer();
