<?php// $Id$/** * @file * Page callback file for the blog module. *//** * Menu callback; displays a Drupal page containing recent blog entries of a given user. */function blog_page_user($account) {  global $user;  drupal_set_title($title = t("@name's blog", array('@name' => $account->name)));  $items = array();  if (($account->uid == $user->uid) && user_access('create blog entries')) {    $items[] = l(t('Post new blog entry.'), "node/add/blog");  }  else if ($account->uid == $user->uid) {    $items[] = t('You are not allowed to post a new blog entry.');  }  $output = theme('item_list', $items);  $result = pager_query(db_rewrite_sql("SELECT n.nid, n.sticky, n.created FROM {node} n WHERE n.type = 'blog' AND n.uid = %d AND n.status = 1 ORDER BY n.sticky DESC, n.created DESC"), variable_get('default_nodes_main', 10), 0, NULL, $account->uid);  $has_posts = FALSE;    while ($node = db_fetch_object($result)) {    $output .= node_view(node_load($node->nid), 1);    $has_posts = TRUE;  }    if ($has_posts) {    $output .= theme('pager', NULL, variable_get('default_nodes_main', 10));  }  else {    if ($account->uid == $user->uid) {      drupal_set_message(t('You have not created any blog entries.'));    }    else {      drupal_set_message(t('!author has not created any blog entries.', array('!author' => theme('username', $account))));    }  }  drupal_add_feed(url('blog/'. $account->uid .'/feed'), t('RSS - !title', array('!title' => $title)));  return $output;}/** * Menu callback; displays a Drupal page containing recent blog entries of all users. */function blog_page_last() {  global $user;  $output = '';  $items = array();  if (user_access('create blog entries')) {    $items[] = l(t('Create new blog entry.'), "node/add/blog");  }  $output = theme('item_list', $items);  $result = pager_query(db_rewrite_sql("SELECT n.nid, n.created FROM {node} n WHERE n.type = 'blog' AND n.status = 1 ORDER BY n.sticky DESC, n.created DESC"), variable_get('default_nodes_main', 10));  $has_posts = FALSE;  while ($node = db_fetch_object($result)) {    $output .= node_view(node_load($node->nid), 1);    $has_posts = TRUE;  }    if ($has_posts) {    $output .= theme('pager', NULL, variable_get('default_nodes_main', 10));  }  else {    drupal_set_message(t('No blog entries have been created.'));  }  drupal_add_feed(url('blog/feed'), t('RSS - blogs'));  return $output;}/** * Menu callback; displays an RSS feed containing recent blog entries of a given user. */function blog_feed_user($account) {  $result = db_query_range(db_rewrite_sql("SELECT n.nid, n.created FROM {node} n  WHERE n.type = 'blog' AND n.uid = %d AND n.status = 1 ORDER BY n.created DESC"), $account->uid, 0, variable_get('feed_default_items', 10));  $channel['title'] = t("!name's blog", array('!name' => $account->name));  $channel['link'] = url('blog/'. $account->uid, array('absolute' => TRUE));  $items = array();  while ($row = db_fetch_object($result)) {    $items[] = $row->nid;  }  node_feed($items, $channel);}/** * Menu callback; displays an RSS feed containing recent blog entries of all users. */function blog_feed_last() {  $result = db_query_range(db_rewrite_sql("SELECT n.nid, n.created FROM {node} n WHERE n.type = 'blog' AND n.status = 1 ORDER BY n.created DESC"), 0, variable_get('feed_default_items', 10));  $channel['title'] = t('!site_name blogs', array('!site_name' => variable_get('site_name', 'Drupal')));  $channel['link'] = url('blog', array('absolute' => TRUE));  $items = array();  while ($row = db_fetch_object($result)) {    $items[] = $row->nid;  }  node_feed($items, $channel);}
<?php// $Id$/** * Implementation of hook_install(). */function trigger_install() {  // Create tables.  drupal_install_schema('trigger');  // Do initial synchronization of actions in code and the database.  actions_synchronize(actions_list());}/** * Implementation of hook_uninstall(). */function trigger_uninstall() {  // Remove tables.  drupal_uninstall_schema('trigger');}/** * Implementation of hook_schema(). */function trigger_schema() {  $schema['trigger_assignments'] = array(    'description' => 'Maps trigger to hook and operation assignments from trigger.module.',    'fields' => array(      'hook' => array(        'type' => 'varchar',        'length' => 32,        'not null' => TRUE,        'default' => '',        'description' => 'Primary Key: The name of the internal Drupal hook upon which an action is firing; for example, nodeapi.',      ),      'op' => array(        'type' => 'varchar',        'length' => 32,        'not null' => TRUE,        'default' => '',        'description' => 'Primary Key: The specific operation of the hook upon which an action is firing: for example, presave.',      ),      'aid' => array(        'type' => 'varchar',        'length' => 255,        'not null' => TRUE,        'default' => '',        'description' => "Primary Key: Action's {actions}.aid.",      ),      'weight' => array(        'type' => 'int',        'not null' => TRUE,        'default' => 0,        'description' => 'The weight of the trigger assignment in relation to other triggers.',      ),    ),    'primary key' => array('hook', 'op', 'aid'),  );  return $schema;}
<?php// $Id$/** * @file aggregator-item.tpl.php * Default theme implementation to format an individual feed item for display * on the aggregator page. * * Available variables: * - $feed_url: URL to the originating feed item. * - $feed_title: Title of the feed item. * - $source_url: Link to the local source section. * - $source_title: Title of the remote source. * - $source_date: Date the feed was posted on the remote source. * - $content: Feed item content. * - $categories: Linked categories assigned to the feed. * * @see template_preprocess() * @see template_preprocess_aggregator_item() */?><div class="feed-item">  <h3 class="feed-item-title">    <a href="<?php print $feed_url; ?>"><?php print $feed_title; ?></a>  </h3>  <div class="feed-item-meta">  <?php if ($source_url) : ?>    <a href="<?php print $source_url; ?>" class="feed-item-source"><?php print $source_title; ?></a> -  <?php endif; ?>    <span class="feed-item-date"><?php print $source_date; ?></span>  </div><?php if ($content) : ?>  <div class="feed-item-body">    <?php print $content; ?>  </div><?php endif; ?><?php if ($categories) : ?>  <div class="feed-item-categories">    <?php print t('Categories'); ?>: <?php print implode(', ', $categories); ?>  </div><?php endif ;?></div>
<?php// $Id$/** * A stub cache implementation to be used during the installation * process when database access is not yet available. Because Drupal's * caching system never requires that cached data be present, these * stub functions can short-circuit the process and sidestep the * need for any persistent storage. Obviously, using this cache * implementation during normal operations would have a negative impact * on performance. */function cache_get($key, $table = 'cache') {  return FALSE;}function cache_set($cid, $data, $table = 'cache', $expire = CACHE_PERMANENT, $headers = NULL) {  return;}function cache_clear_all($cid = NULL, $table = NULL, $wildcard = FALSE) {  return;}
<?php// $Id$/** * @file comment-wrapper.tpl.php * Default theme implementation to wrap aggregator content. * * Available variables: * - $content: All aggregator content. * - $page: Pager links rendered through theme_pager(). * * @see template_preprocess() * @see template_preprocess_comment_wrapper() */?><div id="aggregator">  <?php print $content; ?>  <?php print $pager; ?></div>
<?php// $Id$$info = array(  // Pre-defined color schemes.  'schemes' => array(    '#0072b9,#027ac6,#2385c2,#5ab5ee,#494949' => t('Blue Lagoon (Default)'),    '#464849,#2f416f,#2a2b2d,#5d6779,#494949' => t('Ash'),    '#55c0e2,#000000,#085360,#007e94,#696969' => t('Aquamarine'),    '#d5b048,#6c420e,#331900,#971702,#494949' => t('Belgian Chocolate'),    '#3f3f3f,#336699,#6598cb,#6598cb,#000000' => t('Bluemarine'),    '#d0cb9a,#917803,#efde01,#e6fb2d,#494949' => t('Citrus Blast'),    '#0f005c,#434f8c,#4d91ff,#1a1575,#000000' => t('Cold Day'),    '#c9c497,#0c7a00,#03961e,#7be000,#494949' => t('Greenbeam'),    '#ffe23d,#a9290a,#fc6d1d,#a30f42,#494949' => t('Mediterrano'),    '#788597,#3f728d,#a9adbc,#d4d4d4,#707070' => t('Mercury'),    '#5b5fa9,#5b5faa,#0a2352,#9fa8d5,#494949' => t('Nocturnal'),    '#7db323,#6a9915,#b5d52a,#7db323,#191a19' => t('Olivia'),    '#12020b,#1b1a13,#f391c6,#f41063,#898080' => t('Pink Plastic'),    '#b7a0ba,#c70000,#a1443a,#f21107,#515d52' => t('Shiny Tomato'),    '#18583d,#1b5f42,#34775a,#52bf90,#2d2d2d' => t('Teal Top'),  ),  // Images to copy over.  'copy' => array(    'images/menu-collapsed.gif',    'images/menu-collapsed-rtl.gif',    'images/menu-expanded.gif',    'images/menu-leaf.gif',  ),  // CSS files (excluding @import) to rewrite with new color scheme.  'css' => array(    'style.css',  ),  // Coordinates of gradient (x, y, width, height).  'gradient' => array(0, 37, 760, 121),  // Color areas to fill (x, y, width, height).  'fill' => array(    'base' => array(0, 0, 760, 568),    'link' => array(107, 533, 41, 23),  ),  // Coordinates of all the theme slices (x, y, width, height)  // with their filename as used in the stylesheet.  'slices' => array(    'images/body.png'                      => array(0, 37, 1, 280),    'images/bg-bar.png'                    => array(202, 530, 76, 14),    'images/bg-bar-white.png'              => array(202, 506, 76, 14),    'images/bg-tab.png'                    => array(107, 533, 41, 23),    'images/bg-navigation.png'             => array(0, 0, 7, 37),    'images/bg-content-left.png'           => array(40, 117, 50, 352),    'images/bg-content-right.png'          => array(510, 117, 50, 352),    'images/bg-content.png'                => array(299, 117, 7, 200),    'images/bg-navigation-item.png'        => array(32, 37, 17, 12),    'images/bg-navigation-item-hover.png'  => array(54, 37, 17, 12),    'images/gradient-inner.png'            => array(646, 307, 112, 42),    'logo.png'                             => array(622, 51, 64, 73),    'screenshot.png'                       => array(0, 37, 400, 240),  ),  // Reference color used for blending. Matches the base.png's colors.  'blend_target' => '#ffffff',  // Preview files.  'preview_image' => 'color/preview.png',  'preview_css' => 'color/preview.css',  // Base file for image generation.  'base_image' => 'color/base.png',);
<?php// $Id$// MySQL specific install functions/** * Check if MySQL is available. * * @return *  TRUE/FALSE */function mysql_is_available() {  return function_exists('mysql_connect');}/** * Check if we can connect to MySQL. * * @return *  TRUE/FALSE */function drupal_test_mysql($url, &$success) {  if (!mysql_is_available()) {    drupal_set_message(st('PHP MySQL support not enabled.'), 'error');    return FALSE;  }  $url = parse_url($url);  // Decode url-encoded information in the db connection string.  $url['user'] = urldecode($url['user']);  $url['pass'] = isset($url['pass']) ? urldecode($url['pass']) : '';  $url['host'] = urldecode($url['host']);  $url['path'] = urldecode($url['path']);  // Allow for non-standard MySQL port.  if (isset($url['port'])) {    $url['host'] = $url['host'] .':'. $url['port'];  }  // Test connecting to the database.  $connection = @mysql_connect($url['host'], $url['user'], $url['pass'], TRUE, 2);  if (!$connection) {    drupal_set_message(st('Failed to connect to your MySQL database server. MySQL reports the following message: %error.<ul><li>Are you sure you have the correct username and password?</li><li>Are you sure that you have typed the correct database hostname?</li><li>Are you sure that the database server is running?</li></ul>For more help, see the <a href="http://drupal.org/node/258">Installation and upgrading handbook</a>. If you are unsure what these terms mean you should probably contact your hosting provider.', array('%error' => mysql_error())), 'error');    return FALSE;  }  // Test selecting the database.  if (!mysql_select_db(substr($url['path'], 1))) {    drupal_set_message(st('Failed to select your database on your MySQL database server, which means the connection username and password are valid, but there is a problem accessing your data. MySQL reports the following message: %error.<ul><li>Are you sure you have the correct database name?</li><li>Are you sure the database exists?</li><li>Are you sure the username has permission to access the database?</li></ul>For more help, see the <a href="http://drupal.org/node/258">Installation and upgrading handbook</a>. If you are unsure what these terms mean you should probably contact your hosting provider.', array('%error' => mysql_error())), 'error');    return FALSE;  }  $success = array('CONNECT');  // Test CREATE.  $query = 'CREATE TABLE drupal_install_test (id int NULL)';  $result = mysql_query($query);  if ($error = mysql_error()) {    drupal_set_message(st('Failed to create a test table on your MySQL database server with the command %query. MySQL reports the following message: %error.<ul><li>Are you sure the configured username has the necessary MySQL permissions to create tables in the database?</li></ul>For more help, see the <a href="http://drupal.org/node/258">Installation and upgrading handbook</a>. If you are unsure what these terms mean you should probably contact your hosting provider.', array('%query' => $query, '%error' => $error)), 'error');    return FALSE;  }  $err = FALSE;  $success[] = 'SELECT';  $success[] = 'CREATE';  // Test INSERT.  $query = 'INSERT INTO drupal_install_test (id) VALUES (1)';  $result = mysql_query($query);  if ($error = mysql_error()) {    drupal_set_message(st('Failed to insert a value into a test table on your MySQL database server. We tried inserting a value with the command %query and MySQL reported the following error: %error.', array('%query' => $query, '%error' => $error)), 'error');    $err = TRUE;  }  else {    $success[] = 'INSERT';  }  // Test UPDATE.  $query = 'UPDATE drupal_install_test SET id = 2';  $result = mysql_query($query);  if ($error = mysql_error()) {    drupal_set_message(st('Failed to update a value in a test table on your MySQL database server. We tried updating a value with the command %query and MySQL reported the following error: %error.', array('%query' => $query, '%error' => $error)), 'error');    $err = TRUE;  }  else {    $success[] = 'UPDATE';  }  // Test DELETE.  $query = 'DELETE FROM drupal_install_test';  $result = mysql_query($query);  if ($error = mysql_error()) {    drupal_set_message(st('Failed to delete a value from a test table on your MySQL database server. We tried deleting a value with the command %query and MySQL reported the following error: %error.', array('%query' => $query, '%error' => $error)), 'error');    $err = TRUE;  }  else {    $success[] = 'DELETE';  }  // Test DROP.  $query = 'DROP TABLE drupal_install_test';  $result = mysql_query($query);  if ($error = mysql_error()) {    drupal_set_message(st('Failed to drop a test table from your MySQL database server. We tried dropping a table with the command %query and MySQL reported the following error %error.', array('%query' => $query, '%error' => $error)), 'error');    $err = TRUE;  }  else {    $success[] = 'DROP';  }  if ($err) {    return FALSE;  }  mysql_close($connection);  return TRUE;}
<?php// $Id$// MySQLi specific install functions/** * Check if MySQLi is available. * * @return *  TRUE/FALSE */function mysqli_is_available() {  return function_exists('mysqli_connect');}/** * Check if we can connect to MySQL. * * @return *  TRUE/FALSE */function drupal_test_mysqli($url, &$success) {  if (!mysqli_is_available()) {    drupal_set_message(st('PHP MySQLi support not enabled.'), 'error');    return FALSE;  }  $url = parse_url($url);  // Decode url-encoded information in the db connection string.  $url['user'] = urldecode($url['user']);  $url['pass'] = isset($url['pass']) ? urldecode($url['pass']) : '';  $url['host'] = urldecode($url['host']);  $url['path'] = urldecode($url['path']);  $connection = mysqli_init();  @mysqli_real_connect($connection, $url['host'], $url['user'], $url['pass'], substr($url['path'], 1), $url['port'], NULL, MYSQLI_CLIENT_FOUND_ROWS);  if (mysqli_connect_errno() >= 2000 || mysqli_connect_errno() == 1045) {    drupal_set_message(st('Failed to connect to your MySQL database server. MySQL reports the following message: %error.<ul><li>Are you sure you have the correct username and password?</li><li>Are you sure that you have typed the correct database hostname?</li><li>Are you sure that the database server is running?</li></ul>For more help, see the <a href="http://drupal.org/node/258">Installation and upgrading handbook</a>. If you are unsure what these terms mean you should probably contact your hosting provider.', array('%error' => mysqli_connect_error())), 'error');    return FALSE;  }  // Test selecting the database.  if (mysqli_connect_errno() > 0) {    drupal_set_message(st('Failed to select your database on your MySQL database server, which means the connection username and password are valid, but there is a problem accessing your data. MySQL reports the following message: %error.<ul><li>Are you sure you have the correct database name?</li><li>Are you sure the database exists?</li><li>Are you sure the username has permission to access the database?</li></ul>For more help, see the <a href="http://drupal.org/node/258">Installation and upgrading handbook</a>. If you are unsure what these terms mean you should probably contact your hosting provider.', array('%error' => mysqli_connect_error())), 'error');    return FALSE;  }  $success = array('CONNECT');  // Test CREATE.  $query = 'CREATE TABLE drupal_install_test (id int NULL)';  $result = mysqli_query($connection, $query);  if ($error = mysqli_error($connection)) {    drupal_set_message(st('Failed to create a test table on your MySQL database server with the command %query. MySQL reports the following message: %error.<ul><li>Are you sure the configured username has the necessary MySQL permissions to create tables in the database?</li></ul>For more help, see the <a href="http://drupal.org/node/258">Installation and upgrading handbook</a>. If you are unsure what these terms mean you should probably contact your hosting provider.', array('%query' => $query, '%error' => $error)), 'error');    return FALSE;  }  $err = FALSE;  $success[] = 'SELECT';  $success[] = 'CREATE';  // Test INSERT.  $query = 'INSERT INTO drupal_install_test (id) VALUES (1)';  $result = mysqli_query($connection, $query);  if ($error = mysqli_error($connection)) {    drupal_set_message(st('Failed to insert a value into a test table on your MySQL database server. We tried inserting a value with the command %query and MySQL reported the following error: %error.', array('%query' => $query, '%error' => $error)), 'error');    $err = TRUE;  }  else {    $success[] = 'INSERT';  }  // Test UPDATE.  $query = 'UPDATE drupal_install_test SET id = 2';  $result = mysqli_query($connection, $query);  if ($error = mysqli_error($connection)) {    drupal_set_message(st('Failed to update a value in a test table on your MySQL database server. We tried updating a value with the command %query and MySQL reported the following error: %error.', array('%query' => $query, '%error' => $error)), 'error');    $err = TRUE;  }  else {    $success[] = 'UPDATE';  }  // Test DELETE.  $query = 'DELETE FROM drupal_install_test';  $result = mysqli_query($connection, $query);  if ($error = mysqli_error($connection)) {    drupal_set_message(st('Failed to delete a value from a test table on your MySQL database server. We tried deleting a value with the command %query and MySQL reported the following error: %error.', array('%query' => $query, '%error' => $error)), 'error');    $err = TRUE;  }  else {    $success[] = 'DELETE';  }  // Test DROP.  $query = 'DROP TABLE drupal_install_test';  $result = mysqli_query($connection, $query);  if ($error = mysqli_error($connection)) {    drupal_set_message(st('Failed to drop a test table from your MySQL database server. We tried dropping a table with the command %query and MySQL reported the following error %error.', array('%query' => $query, '%error' => $error)), 'error');    $err = TRUE;  }  else {    $success[] = 'DROP';  }  if ($err) {    return FALSE;  }  mysqli_close($connection);  return TRUE;}
<?php// $Id$/** * @file block.tpl.php * * Theme implementation to display a block. * * Available variables: * - $block->subject: Block title. * - $block->content: Block content. * - $block->module: Module that generated the block. * - $block->delta: This is a numeric id connected to each module. * - $block->region: The block region embedding the current block. * * Helper variables: * - $block_zebra: Outputs 'odd' and 'even' dependent on each block region. * - $zebra: Same output as $block_zebra but independent of any block region. * - $block_id: Counter dependent on each block region. * - $id: Same output as $block_id but independent of any block region. * - $is_front: Flags true when presented in the front page. * - $logged_in: Flags true when the current user is a logged-in member. * - $is_admin: Flags true when the current user is an administrator. * * @see template_preprocess() * @see template_preprocess_block() */?><div id="block-<?php print $block->module .'-'. $block->delta; ?>" class="block block-<?php print $block->module ?>"><?php if ($block->subject): ?>  <h2><?php print $block->subject ?></h2><?php endif;?>  <div class="content">    <?php print $block->content ?>  </div></div>
<?php// $Id$$info = array(  // Pre-defined color schemes.  'schemes' => array(    '#0072b9,#027ac6,#2385c2,#5ab5ee,#494949' => t('Blue Lagoon (Default)'),    '#464849,#2f416f,#2a2b2d,#5d6779,#494949' => t('Ash'),    '#55c0e2,#000000,#085360,#007e94,#696969' => t('Aquamarine'),    '#d5b048,#6c420e,#331900,#971702,#494949' => t('Belgian Chocolate'),    '#3f3f3f,#336699,#6598cb,#6598cb,#000000' => t('Bluemarine'),    '#d0cb9a,#917803,#efde01,#e6fb2d,#494949' => t('Citrus Blast'),    '#0f005c,#434f8c,#4d91ff,#1a1575,#000000' => t('Cold Day'),    '#c9c497,#0c7a00,#03961e,#7be000,#494949' => t('Greenbeam'),    '#ffe23d,#a9290a,#fc6d1d,#a30f42,#494949' => t('Mediterrano'),    '#788597,#3f728d,#a9adbc,#d4d4d4,#707070' => t('Mercury'),    '#5b5fa9,#5b5faa,#0a2352,#9fa8d5,#494949' => t('Nocturnal'),    '#7db323,#6a9915,#b5d52a,#7db323,#191a19' => t('Olivia'),    '#12020b,#1b1a13,#f391c6,#f41063,#898080' => t('Pink Plastic'),    '#b7a0ba,#c70000,#a1443a,#f21107,#515d52' => t('Shiny Tomato'),    '#18583d,#1b5f42,#34775a,#52bf90,#2d2d2d' => t('Teal Top'),  ),  // Images to copy over.  'copy' => array(    '../images/menu-collapsed.gif',    '../images/menu-collapsed-rtl.gif',    '../images/menu-expanded.gif',    '../images/menu-leaf.gif',  ),  // CSS files (excluding @import) to rewrite with new color scheme.  'css' => array(    '../style.css',  ),  // Coordinates of gradient (x, y, width, height).  'gradient' => array(0, 37, 760, 121),  // Color areas to fill (x, y, width, height).  'fill' => array(    'base' => array(0, 0, 760, 568),    'link' => array(107, 533, 41, 23),  ),  // Coordinates of all the theme slices (x, y, width, height)  // with their filename as used in the stylesheet.  'slices' => array(    '../images/body.png'                      => array(0, 37, 1, 280),    '../images/bg-bar.png'                    => array(202, 530, 76, 14),    '../images/bg-bar-white.png'              => array(202, 506, 76, 14),    '../images/bg-tab.png'                    => array(107, 533, 41, 23),    '../images/bg-navigation.png'             => array(0, 0, 7, 37),    '../images/bg-content-left.png'           => array(40, 117, 50, 352),    '../images/bg-content-right.png'          => array(510, 117, 50, 352),    '../images/bg-content.png'                => array(299, 117, 7, 200),    '../images/bg-navigation-item.png'        => array(32, 37, 17, 12),    '../images/bg-navigation-item-hover.png'  => array(54, 37, 17, 12),    '../images/gradient-inner.png'            => array(646, 307, 112, 42),    'logo.png'                                => array(622, 51, 64, 73),    'screenshot.png'                          => array(0, 37, 400, 240),  ),  // Reference color used for blending. Matches the base.png's colors.  'blend_target' => '#ffffff',  // Preview files.  'preview_image' => 'color/preview.png',  'preview_css' => '../color/preview.css',  // Base file for image generation.  'base_image' => 'color/base.png',);
<?php// $Id$/** * @file search-block-form.tpl.php * Default theme implementation for displaying a search form within a block region. * * Available variables: * - $search_form: The complete search form ready for print. * - $search: Array of keyed search elements. Can be used to print each form *   element separately. * * Default keys within $search: * - $search['search_block_form']: Text input area wrapped in a div. * - $search['submit']: Form submit button. * - $search['hidden']: Hidden form elements. Used to validate forms when submitted. * * Since $search is keyed, a direct print of the form element is possible. * Modules can add to the search form so it is recommended to check for their * existance before printing. The default keys will always exist. * *   <?php if (isset($search['extra_field'])): ?> *     <div class="extra-field"> *       <?php print $search['extra_field']; ?> *     </div> *   <?php endif; ?> * * To check for all available data within $search, use the code below. * *   <?php print '<pre>'. check_plain(print_r($search, 1)) .'</pre>'; ?> * * @see template_preprocess_search_block_form() */?><div class="container-inline">  <?php print $search_form; ?></div>
<?php// $Id$/** * @file forums.tpl.php * Default theme implementation to display a forum which may contain forum * containers as well as forum topics. * * Variables available: * - $links: An array of links that allow a user to post new forum topics. *   It may also contain a string telling a user they must log in in order *   to post. * - $forums: The forums to display (as processed by forum-list.tpl.php) * - $topics: The topics to display (as processed by forum-topic-list.tpl.php) * - $forums_defined: A flag to indicate that the forums are configured. * * @see template_preprocess_forums() * @see theme_forums() */?><?php if ($forums_defined): ?><div id="forum">  <?php print theme('links', $links); ?>  <?php print $forums; ?>  <?php print $topics; ?></div><?php endif; ?>
<?php// $Id$/** * @file * Administrative page for handling updates from one Drupal version to another. * * Point your browser to "http://www.example.com/update.php" and follow the * instructions. * * If you are not logged in as administrator, you will need to modify the access * check statement inside your settings.php file. After finishing the upgrade, * be sure to open settings.php again, and change it back to its original state! *//** * Global flag to identify update.php run, and so avoid various unwanted * operations, such as hook_init() and hook_exit() invokes, css/js preprocessing * and translation, and solve some theming issues. This flag is checked on several * places in Drupal code (not just update.php). */define('MAINTENANCE_MODE', 'update');/** * Add a column to a database using syntax appropriate for PostgreSQL. * Save result of SQL commands in $ret array. * * Note: when you add a column with NOT NULL and you are not sure if there are * already rows in the table, you MUST also add DEFAULT. Otherwise PostgreSQL * won't work when the table is not empty, and db_add_column() will fail. * To have an empty string as the default, you must use: 'default' => "''" * in the $attributes array. If NOT NULL and DEFAULT are set the PostgreSQL * version will set values of the added column in old rows to the * DEFAULT value. * * @param $ret *   Array to which results will be added. * @param $table *   Name of the table, without {} * @param $column *   Name of the column * @param $type *   Type of column * @param $attributes *   Additional optional attributes. Recognized attributes: *     not null => TRUE|FALSE *     default  => NULL|FALSE|value (the value must be enclosed in '' marks) * @return *   nothing, but modifies $ret parameter. */function db_add_column(&$ret, $table, $column, $type, $attributes = array()) {  if (array_key_exists('not null', $attributes) and $attributes['not null']) {    $not_null = 'NOT NULL';  }  if (array_key_exists('default', $attributes)) {    if (is_null($attributes['default'])) {      $default_val = 'NULL';      $default = 'default NULL';    }    elseif ($attributes['default'] === FALSE) {      $default = '';    }    else {      $default_val = "$attributes[default]";      $default = "default $attributes[default]";    }  }  $ret[] = update_sql("ALTER TABLE {". $table ."} ADD $column $type");  if (!empty($default)) {    $ret[] = update_sql("ALTER TABLE {". $table ."} ALTER $column SET $default");  }  if (!empty($not_null)) {    if (!empty($default)) {      $ret[] = update_sql("UPDATE {". $table ."} SET $column = $default_val");    }    $ret[] = update_sql("ALTER TABLE {". $table ."} ALTER $column SET NOT NULL");  }}/** * Change a column definition using syntax appropriate for PostgreSQL. * Save result of SQL commands in $ret array. * * Remember that changing a column definition involves adding a new column * and dropping an old one. This means that any indices, primary keys and * sequences from serial-type columns are dropped and might need to be * recreated. * * @param $ret *   Array to which results will be added. * @param $table *   Name of the table, without {} * @param $column *   Name of the column to change * @param $column_new *   New name for the column (set to the same as $column if you don't want to change the name) * @param $type *   Type of column * @param $attributes *   Additional optional attributes. Recognized attributes: *     not null => TRUE|FALSE *     default  => NULL|FALSE|value (with or without '', it won't be added) * @return *   nothing, but modifies $ret parameter. */function db_change_column(&$ret, $table, $column, $column_new, $type, $attributes = array()) {  if (array_key_exists('not null', $attributes) and $attributes['not null']) {    $not_null = 'NOT NULL';  }  if (array_key_exists('default', $attributes)) {    if (is_null($attributes['default'])) {      $default_val = 'NULL';      $default = 'default NULL';    }    elseif ($attributes['default'] === FALSE) {      $default = '';    }    else {      $default_val = "$attributes[default]";      $default = "default $attributes[default]";    }  }  $ret[] = update_sql("ALTER TABLE {". $table ."} RENAME $column TO ". $column ."_old");  $ret[] = update_sql("ALTER TABLE {". $table ."} ADD $column_new $type");  $ret[] = update_sql("UPDATE {". $table ."} SET $column_new = ". $column ."_old");  if ($default) { $ret[] = update_sql("ALTER TABLE {". $table ."} ALTER $column_new SET $default"); }  if ($not_null) { $ret[] = update_sql("ALTER TABLE {". $table ."} ALTER $column_new SET NOT NULL"); }  $ret[] = update_sql("ALTER TABLE {". $table ."} DROP ". $column ."_old");}/** * Perform one update and store the results which will later be displayed on * the finished page. * * An update function can force the current and all later updates for this * module to abort by returning a $ret array with an element like: * $ret['#abort'] = array('success' => FALSE, 'query' => 'What went wrong'); * The schema version will not be updated in this case, and all the * aborted updates will continue to appear on update.php as updates that * have not yet been run. * * @param $module *   The module whose update will be run. * @param $number *   The update number to run. * @param $context *   The batch context array */function update_do_one($module, $number, &$context) {  // If updates for this module have been aborted  // in a previous step, go no further.  if (!empty($context['results'][$module]['#abort'])) {    return;  }  $function = $module .'_update_'. $number;  if (function_exists($function)) {    $ret = $function($context['sandbox']);  }  if (isset($ret['#finished'])) {    $context['finished'] = $ret['#finished'];    unset($ret['#finished']);  }  if (!isset($context['results'][$module])) {    $context['results'][$module] = array();  }  if (!isset($context['results'][$module][$number])) {    $context['results'][$module][$number] = array();  }  $context['results'][$module][$number] = array_merge($context['results'][$module][$number], $ret);  if (!empty($ret['#abort'])) {    $context['results'][$module]['#abort'] = TRUE;  }  // Record the schema update if it was completed successfully.  if ($context['finished'] == 1 && empty($context['results'][$module]['#abort'])) {    drupal_set_installed_schema_version($module, $number);  }  $context['message'] = 'Updating '. check_plain($module) .' module';}function update_selection_page() {  $output = '<p>The version of Drupal you are updating from has been automatically detected. You can select a different version, but you should not need to.</p>';  $output .= '<p>Click Update to start the update process.</p>';  drupal_set_title('Drupal database update');  $output .= drupal_get_form('update_script_selection_form');  update_task_list('select');  return $output;}function update_script_selection_form() {  $form = array();  $form['start'] = array(    '#tree' => TRUE,    '#type' => 'fieldset',    '#title' => 'Select versions',    '#collapsible' => TRUE,    '#collapsed' => TRUE,  );  // Ensure system.module's updates appear first  $form['start']['system'] = array();  $modules = drupal_get_installed_schema_version(NULL, FALSE, TRUE);  foreach ($modules as $module => $schema_version) {    $updates = drupal_get_schema_versions($module);    // Skip incompatible module updates completely, otherwise test schema versions.    if (!update_check_incompatibility($module) && $updates !== FALSE && $schema_version >= 0) {      // module_invoke returns NULL for nonexisting hooks, so if no updates      // are removed, it will == 0.      $last_removed = module_invoke($module, 'update_last_removed');      if ($schema_version < $last_removed) {        $form['start'][$module] = array(          '#value'  => '<em>'. $module .'</em> module can not be updated. Its schema version is '. $schema_version .'. Updates up to and including '. $last_removed .' have been removed in this release. In order to update <em>'. $module .'</em> module, you will first <a href="http://drupal.org/upgrade">need to upgrade</a> to the last version in which these updates were available.',          '#prefix' => '<div class="warning">',          '#suffix' => '</div>',        );        $form['start']['#collapsed'] = FALSE;        continue;      }      $updates = drupal_map_assoc($updates);      $updates[] = 'No updates available';      $default = $schema_version;      foreach (array_keys($updates) as $update) {        if ($update > $schema_version) {          $default = $update;          break;        }      }      $form['start'][$module] = array(        '#type' => 'select',        '#title' => $module .' module',        '#default_value' => $default,        '#options' => $updates,      );    }  }  $form['has_js'] = array(    '#type' => 'hidden',    '#default_value' => FALSE,  );  $form['submit'] = array(    '#type' => 'submit',    '#value' => 'Update',  );  return $form;}function update_batch() {  global $base_url;  $operations = array();  // Set the installed version so updates start at the correct place.  foreach ($_POST['start'] as $module => $version) {    drupal_set_installed_schema_version($module, $version - 1);    $updates = drupal_get_schema_versions($module);    $max_version = max($updates);    if ($version <= $max_version) {      foreach ($updates as $update) {        if ($update >= $version) {          $operations[] = array('update_do_one', array($module, $update));        }      }    }  }  $batch = array(    'operations' => $operations,    'title' => 'Updating',    'init_message' => 'Starting updates',    'error_message' => 'An unrecoverable error has occurred. You can find the error message below. It is advised to copy it to the clipboard for reference.',    'finished' => 'update_finished',  );  batch_set($batch);  batch_process($base_url .'/update.php?op=results', $base_url .'/update.php');}function update_finished($success, $results, $operations) {  // clear the caches in case the data has been updated.  drupal_flush_all_caches();  $_SESSION['update_results'] = $results;  $_SESSION['update_success'] = $success;  $_SESSION['updates_remaining'] = $operations;}function update_results_page() {  drupal_set_title('Drupal database update');  // NOTE: we can't use l() here because the URL would point to 'update.php?q=admin'.  $links[] = '<a href="'. base_path() .'">Main page</a>';  $links[] = '<a href="'. base_path() .'?q=admin">Administration pages</a>';  update_task_list();  // Report end result  if (module_exists('dblog')) {    $log_message = ' All errors have been <a href="'. base_path() .'?q=admin/reports/dblog">logged</a>.';  }  else {    $log_message = ' All errors have been logged.';  }  if ($_SESSION['update_success']) {    $output = '<p>Updates were attempted. If you see no failures below, you may proceed happily to the <a href="'. base_path() .'?q=admin">administration pages</a>. Otherwise, you may need to update your database manually.'. $log_message .'</p>';  }  else {    list($module, $version) = array_pop(reset($_SESSION['updates_remaining']));    $output = '<p class="error">The update process was aborted prematurely while running <strong>update #'. $version .' in '. $module .'.module</strong>.'. $log_message;    if (module_exists('dblog')) {      $output .= ' You may need to check the <code>watchdog</code> database table manually.';    }    $output .= '</p>';  }  if (!empty($GLOBALS['update_free_access'])) {    $output .= "<p><strong>Reminder: don't forget to set the <code>\$update_free_access</code> value in your <code>settings.php</code> file back to <code>FALSE</code>.</strong></p>";  }  $output .= theme('item_list', $links);  // Output a list of queries executed  if (!empty($_SESSION['update_results'])) {    $output .= '<div id="update-results">';    $output .= '<h2>The following queries were executed</h2>';    foreach ($_SESSION['update_results'] as $module => $updates) {      $output .= '<h3>'. $module .' module</h3>';      foreach ($updates as $number => $queries) {        if ($number != '#abort') {          $output .= '<h4>Update #'. $number .'</h4>';          $output .= '<ul>';          foreach ($queries as $query) {            if ($query['success']) {              $output .= '<li class="success">'. $query['query'] .'</li>';            }            else {              $output .= '<li class="failure"><strong>Failed:</strong> '. $query['query'] .'</li>';            }          }          if (!count($queries)) {            $output .= '<li class="none">No queries</li>';          }        }        $output .= '</ul>';      }    }    $output .= '</div>';  }  unset($_SESSION['update_results']);  unset($_SESSION['update_success']);  return $output;}function update_info_page() {  // Change query-strings on css/js files to enforce reload for all users.  _drupal_flush_css_js();  // Flush the cache of all data for the update status module.  if (db_table_exists('cache_update')) {    cache_clear_all('*', 'cache_update', TRUE);  }  update_task_list('info');  drupal_set_title('Drupal database update');  $token = drupal_get_token('update');  $output = '<p>Use this utility to update your database whenever a new release of Drupal or a module is installed.</p><p>For more detailed information, see the <a href="http://drupal.org/node/258">Installation and upgrading handbook</a>. If you are unsure what these terms mean you should probably contact your hosting provider.</p>';  $output .= "<ol>\n";  $output .= "<li><strong>Back up your database</strong>. This process will change your database values and in case of emergency you may need to revert to a backup.</li>\n";  $output .= "<li><strong>Back up your code</strong>. Hint: when backing up module code, do not leave that backup in the 'modules' or 'sites/*/modules' directories as this may confuse Drupal's auto-discovery mechanism.</li>\n";  $output .= '<li>Put your site into <a href="'. base_path() .'?q=admin/settings/site-maintenance">maintenance mode</a>.</li>'."\n";  $output .= "<li>Install your new files in the appropriate location, as described in the handbook.</li>\n";  $output .= "</ol>\n";  $output .= "<p>When you have performed the steps above, you may proceed.</p>\n";  $output .= '<form method="post" action="update.php?op=selection&amp;token='. $token .'"><p><input type="submit" value="Continue" /></p></form>';  $output .= "\n";  return $output;}function update_access_denied_page() {  drupal_set_title('Access denied');  return '<p>Access denied. You are not authorized to access this page. Please log in as the admin user (the first user you created). If you cannot log in, you will have to edit <code>settings.php</code> to bypass this access check. To do this:</p><ol> <li>With a text editor find the settings.php file on your system. From the main Drupal directory that you installed all the files into, go to <code>sites/your_site_name</code> if such directory exists, or else to <code>sites/default</code> which applies otherwise.</li> <li>There is a line inside your settings.php file that says <code>$update_free_access = FALSE;</code>. Change it to <code>$update_free_access = TRUE;</code>.</li> <li>As soon as the update.php script is done, you must change the settings.php file back to its original form with <code>$update_free_access = FALSE;</code>.</li> <li>To avoid having this problem in future, remember to log in to your website as the admin user (the user you first created) before you backup your database at the beginning of the update process.</li></ol>';}/** * Create the batch table. * * This is part of the Drupal 5.x to 6.x migration. */function update_create_batch_table() {  // If batch table exists, update is not necessary  if (db_table_exists('batch')) {    return;  }  $schema['batch'] = array(    'fields' => array(      'bid'       => array('type' => 'serial', 'unsigned' => TRUE, 'not null' => TRUE),      'token'     => array('type' => 'varchar', 'length' => 64, 'not null' => TRUE),      'timestamp' => array('type' => 'int', 'not null' => TRUE),      'batch'     => array('type' => 'text', 'not null' => FALSE, 'size' => 'big')    ),    'primary key' => array('bid'),    'indexes' => array('token' => array('token')),  );  $ret = array();  db_create_table($ret, 'batch', $schema['batch']);  return $ret;}/** * Disable anything in the {system} table that is not compatible with the * current version of Drupal core. */function update_fix_compatibility() {  $ret = array();  $incompatible = array();  $query = db_query("SELECT name, type, status FROM {system} WHERE status = 1 AND type IN ('module','theme')");  while ($result = db_fetch_object($query)) {    if (update_check_incompatibility($result->name, $result->type)) {      $incompatible[] = $result->name;    }  }  if (!empty($incompatible)) {    $ret[] = update_sql("UPDATE {system} SET status = 0 WHERE name IN ('". implode("','", $incompatible) ."')");  }  return $ret;}/** * Helper function to test compatibility of a module or theme. */function update_check_incompatibility($name, $type = 'module') {  static $themes, $modules;  // Store values of expensive functions for future use.  if (empty($themes) || empty($modules)) {    $themes = _system_theme_data();    $modules = module_rebuild_cache();  }  if ($type == 'module' && isset($modules[$name])) {    $file = $modules[$name];  }  else if ($type == 'theme' && isset($themes[$name])) {    $file = $themes[$name];  }  if (!isset($file)      || !isset($file->info['core'])      || $file->info['core'] != DRUPAL_CORE_COMPATIBILITY      || version_compare(phpversion(), $file->info['php']) < 0) {    return TRUE;  }  return FALSE;}/** * Perform Drupal 5.x to 6.x updates that are required for update.php * to function properly. * * This function runs when update.php is run the first time for 6.x, * even before updates are selected or performed.  It is important * that if updates are not ultimately performed that no changes are * made which make it impossible to continue using the prior version. * Just adding columns is safe.  However, renaming the * system.description column to owner is not.  Therefore, we add the * system.owner column and leave it to system_update_6008() to copy * the data from description and remove description. The same for * renaming locales_target.locale to locales_target.language, which * will be finished by locale_update_6002(). */function update_fix_d6_requirements() {  $ret = array();  if (drupal_get_installed_schema_version('system') < 6000 && !variable_get('update_d6_requirements', FALSE)) {    $spec = array('type' => 'int', 'size' => 'small', 'default' => 0, 'not null' => TRUE);    db_add_field($ret, 'cache', 'serialized', $spec);    db_add_field($ret, 'cache_filter', 'serialized', $spec);    db_add_field($ret, 'cache_page', 'serialized', $spec);    db_add_field($ret, 'cache_menu', 'serialized', $spec);    db_add_field($ret, 'system', 'info', array('type' => 'text'));    db_add_field($ret, 'system', 'owner', array('type' => 'varchar', 'length' => 255, 'not null' => TRUE, 'default' => ''));    if (db_table_exists('locales_target')) {      db_add_field($ret, 'locales_target', 'language', array('type' => 'varchar', 'length' => 12, 'not null' => TRUE, 'default' => ''));    }    if (db_table_exists('locales_source')) {      db_add_field($ret, 'locales_source', 'textgroup', array('type' => 'varchar', 'length' => 255, 'not null' => TRUE, 'default' => 'default'));      db_add_field($ret, 'locales_source', 'version', array('type' => 'varchar', 'length' => 20, 'not null' => TRUE, 'default' => 'none'));    }    variable_set('update_d6_requirements', TRUE);    // Create the cache_block table. See system_update_6027() for more details.    $schema['cache_block'] = array(      'fields' => array(        'cid'        => array('type' => 'varchar', 'length' => 255, 'not null' => TRUE, 'default' => ''),        'data'       => array('type' => 'blob', 'not null' => FALSE, 'size' => 'big'),        'expire'     => array('type' => 'int', 'not null' => TRUE, 'default' => 0),        'created'    => array('type' => 'int', 'not null' => TRUE, 'default' => 0),        'headers'    => array('type' => 'text', 'not null' => FALSE),        'serialized' => array('type' => 'int', 'size' => 'small', 'not null' => TRUE, 'default' => 0)      ),      'indexes' => array('expire' => array('expire')),      'primary key' => array('cid'),    );    db_create_table($ret, 'cache_block', $schema['cache_block']);  }  return $ret;}/** * Add the update task list to the current page. */function update_task_list($active = NULL) {  // Default list of tasks.  $tasks = array(    'info' => 'Overview',    'select' => 'Select updates',    'run' => 'Run updates',    'finished' => 'Review log',  );  drupal_set_content('left', theme('task_list', $tasks, $active));}/** * Check update requirements and report any errors. */function update_check_requirements() {  // Check the system module requirements only.  $requirements = module_invoke('system', 'requirements', 'update');  $severity = drupal_requirements_severity($requirements);  // If there are issues, report them.  if ($severity != REQUIREMENT_OK) {    foreach ($requirements as $requirement) {      if (isset($requirement['severity']) && $requirement['severity'] != REQUIREMENT_OK) {        $message = isset($requirement['description']) ? $requirement['description'] : '';        if (isset($requirement['value']) && $requirement['value']) {          $message .= ' (Currently using '. $requirement['title'] .' '. $requirement['value'] .')';        }        drupal_set_message($message, 'warning');      }    }  }}// Some unavoidable errors happen because the database is not yet up-to-date.// Our custom error handler is not yet installed, so we just suppress them.ini_set('display_errors', FALSE);require_once './includes/bootstrap.inc';// We only load DRUPAL_BOOTSTRAP_CONFIGURATION for the update requirements// check to avoid reaching the PHP memory limit.$op = isset($_REQUEST['op']) ? $_REQUEST['op'] : '';if (empty($op)) {  // Minimum load of components.  drupal_bootstrap(DRUPAL_BOOTSTRAP_CONFIGURATION);  require_once './includes/install.inc';  require_once './includes/file.inc';  require_once './modules/system/system.install';  // Load module basics.  include_once './includes/module.inc';  $module_list['system']['filename'] = 'modules/system/system.module';  $module_list['filter']['filename'] = 'modules/filter/filter.module';  module_list(TRUE, FALSE, FALSE, $module_list);  drupal_load('module', 'system');  drupal_load('module', 'filter');  // Set up $language, since the installer components require it.  drupal_init_language();  // Set up theme system for the maintenance page.  drupal_maintenance_theme();  // Check the update requirements for Drupal.  update_check_requirements();  // Display the warning messages (if any) in a dedicated maintenance page,  // or redirect to the update information page if no message.  $messages = drupal_set_message();  if (!empty($messages['warning'])) {    drupal_maintenance_theme();    print theme('update_page', '<form method="post" action="update.php?op=info"><input type="submit" value="Continue" /></form>', FALSE);    exit;  }  install_goto('update.php?op=info');}drupal_bootstrap(DRUPAL_BOOTSTRAP_FULL);drupal_maintenance_theme();// This must happen *after* drupal_bootstrap(), since it calls// variable_(get|set), which only works after a full bootstrap.update_create_batch_table();// Turn error reporting back on. From now on, only fatal errors (which are// not passed through the error handler) will cause a message to be printed.ini_set('display_errors', TRUE);// Access check:if (!empty($update_free_access) || $user->uid == 1) {  include_once './includes/install.inc';  include_once './includes/batch.inc';  drupal_load_updates();  update_fix_d6_requirements();  update_fix_compatibility();  $op = isset($_REQUEST['op']) ? $_REQUEST['op'] : '';  switch ($op) {    case 'selection':      if (isset($_GET['token']) && $_GET['token'] == drupal_get_token('update')) {        $output = update_selection_page();        break;      }    case 'Update':      if (isset($_GET['token']) && $_GET['token'] == drupal_get_token('update')) {        update_batch();        break;      }    // update.php ops    case 'info':      $output = update_info_page();      break;    case 'results':      $output = update_results_page();      break;    // Regular batch ops : defer to batch processing API    default:      update_task_list('run');      $output = _batch_page();      break;  }}else {  $output = update_access_denied_page();}if (isset($output) && $output) {  // We defer the display of messages until all updates are done.  $progress_page = ($batch = batch_get()) && isset($batch['running']);  print theme('update_page', $output, !$progress_page);}
<?php// $Id$/** * @file poll-bar.tpl.php * Display the bar for a single choice in a poll * * Variables available: * - $title: The title of the poll. * - $votes: The number of votes for this choice * - $total_votes: The number of votes for this choice * - $percentage: The percentage of votes for this choice. * - $vote: The choice number of the current user's vote. * - $voted: Set to TRUE if the user voted for this choice. * * @see template_preprocess_poll_bar() */?><div class="text"><?php print $title; ?></div><div class="bar">  <div style="width: <?php print $percentage; ?>%;" class="foreground"></div></div><div class="percent">  <?php print $percentage; ?>% (<?php print format_plural($votes, '1 vote', '@count votes'); ?>)</div>
<?php// $Id$/** * @file user-profile-item.tpl.php * Default theme implementation to present profile items (values from user * account profile fields or modules). * * This template is used to loop through and render each field configured * for the user's account. It can also be the data from modules. The output is * grouped by categories. * * @see user-profile-category.tpl.php *      for the parent markup. Implemented as a definition list by default. * @see user-profile.tpl.php *      where all items and categories are collected and printed out. * * Available variables: * - $title: Field title for the profile item. * - $value: User defined value for the profile item or data from a module. * - $attributes: HTML attributes. Usually renders classes. * * @see template_preprocess_user_profile_item() */?><dt<?php print $attributes; ?>><?php print $title; ?></dt><dd<?php print $attributes; ?>><?php print $value; ?></dd>
<?php// $Id$/** * @file * User page callbacks for the aggregator module. *//** * Menu callback; displays the most recent items gathered from any feed. * * @return *   The items HTML. */function aggregator_page_last() {  drupal_add_feed(url('aggregator/rss'), variable_get('site_name', 'Drupal') .' '. t('aggregator'));  $items = aggregator_feed_items_load('SELECT i.*, f.title AS ftitle, f.link AS flink FROM {aggregator_item} i INNER JOIN {aggregator_feed} f ON i.fid = f.fid ORDER BY i.timestamp DESC, i.iid DESC');  return _aggregator_page_list($items, arg(1));}/** * Menu callback; displays all the items captured from a particular feed. * * If there are two arguments then this function is the categorize form. * * @param $arg1 *   If there are two arguments then $arg1 is $form_state. Otherwise, $arg1 is $feed. * @param $arg2 *   If there are two arguments then $arg2 is feed. * @return *   The items HTML. */function aggregator_page_source($arg1, $arg2 = NULL) {  // If there are two arguments then this function is the categorize form, and  // $arg1 is $form_state and $arg2 is $feed. Otherwise, $arg1 is $feed.  $feed = is_array($arg2) ? $arg2 : $arg1;  $feed = (object)$feed;  drupal_set_title(check_plain($feed->title));  $feed_source = theme('aggregator_feed_source', $feed);  // It is safe to include the fid in the query because it's loaded from the  // database by aggregator_feed_load.  $items = aggregator_feed_items_load('SELECT * FROM {aggregator_item} WHERE fid = '. $feed->fid .' ORDER BY timestamp DESC, iid DESC');  return _aggregator_page_list($items, arg(3), $feed_source);}/** * Menu callback; displays all the items aggregated in a particular category. * * If there are two arguments then this function is called as a form. * * @param $arg1 *   If there are two arguments then $arg1 is $form_state. Otherwise, $arg1 is $category. * @param $arg2 *   If there are two arguments then $arg2 is $category. * @return *   The items HTML. */function aggregator_page_category($arg1, $arg2 = NULL) {  // If there are two arguments then we are called as a form, $arg1 is  // $form_state and $arg2 is $category. Otherwise, $arg1 is $category.  $category = is_array($arg2) ? $arg2 : $arg1;  drupal_add_feed(url('aggregator/rss/'. $category['cid']), variable_get('site_name', 'Drupal') .' '. t('aggregator - @title', array('@title' => $category['title'])));  // It is safe to include the cid in the query because it's loaded from the  // database by aggregator_category_load.  $items = aggregator_feed_items_load('SELECT i.*, f.title AS ftitle, f.link AS flink FROM {aggregator_category_item} c LEFT JOIN {aggregator_item} i ON c.iid = i.iid LEFT JOIN {aggregator_feed} f ON i.fid = f.fid WHERE cid = '. $category['cid'] .' ORDER BY timestamp DESC, i.iid DESC');  return _aggregator_page_list($items, arg(3));}/** * Load feed items by passing a SQL query. * * @param $sql *   The query to be executed. * @return *   An array of the feed items. */function aggregator_feed_items_load($sql) {  $items = array();  if (isset($sql)) {    $result = pager_query($sql, 20);    while ($item = db_fetch_object($result)) {      $result_category = db_query('SELECT c.title, c.cid FROM {aggregator_category_item} ci LEFT JOIN {aggregator_category} c ON ci.cid = c.cid WHERE ci.iid = %d ORDER BY c.title', $item->iid);      $item->categories = array();      while ($item_categories = db_fetch_object($result_category)) {        $item->categories[] = $item_categories;      }      $items[$item->iid] = $item;    }  }  return $items;}/** * Prints an aggregator page listing a number of feed items. * * Various menu callbacks use this function to print their feeds. * * @param $items *   The items to be listed. * @param $op *   Which form should be added to the items. Only 'categorize' is now recognized. * @param $feed_source *   The feed source URL. * @return *   The items HTML. */function _aggregator_page_list($items, $op, $feed_source = '') {  if (user_access('administer news feeds') && ($op == 'categorize')) {    // Get form data.    $output = aggregator_categorize_items($items, $feed_source);  }  else {    // Assemble themed output.    $output = $feed_source;    foreach ($items as $item) {      $output .= theme('aggregator_item', $item);    }    $output = theme('aggregator_wrapper', $output);  }  return $output;}/** * Form builder; build the page list form. * * @param $items *   An array of the feed items. * @param $feed_source *   The feed source URL. * @return *   The form structure. * @ingroup forms * @see aggregator_categorize_items_validate() * @see aggregator_categorize_items_submit() */function aggregator_categorize_items($items, $feed_source = '') {  $form['#submit'][] = 'aggregator_categorize_items_submit';  $form['#validate'][] = 'aggregator_categorize_items_validate';  $form['#theme'] = 'aggregator_categorize_items';  $form['feed_source'] = array('#value' => $feed_source);  $categories = array();  $done = FALSE;  $form['items'] = array();  $form['categories'] = array('#tree' => TRUE);  foreach ($items as $item) {    $form['items'][$item->iid] = array('#value' => theme('aggregator_item', $item));    $form['categories'][$item->iid] = array();    $categories_result = db_query('SELECT c.cid, c.title, ci.iid FROM {aggregator_category} c LEFT JOIN {aggregator_category_item} ci ON c.cid = ci.cid AND ci.iid = %d', $item->iid);    $selected = array();    while ($category = db_fetch_object($categories_result)) {      if (!$done) {        $categories[$category->cid] = check_plain($category->title);      }      if ($category->iid) {        $selected[] = $category->cid;      }    }    $done = TRUE;    $form['categories'][$item->iid] = array(      '#type' => variable_get('aggregator_category_selector', 'checkboxes'),      '#default_value' => $selected,      '#options' => $categories,      '#size' => 10,      '#multiple' => TRUE    );  }  $form['submit'] = array('#type' => 'submit', '#value' => t('Save categories'));  return $form;}/** * Validate aggregator_categorize_items form submissions. */function aggregator_categorize_items_validate($form, &$form_state) {  if (!user_access('administer news feeds')) {    form_error($form, t('You are not allowed to categorize this feed item.'));  }}/** * Process aggregator_categorize_items form submissions. */function aggregator_categorize_items_submit($form, &$form_state) {  if (!empty($form_state['values']['categories'])) {    foreach ($form_state['values']['categories'] as $iid => $selection) {      db_query('DELETE FROM {aggregator_category_item} WHERE iid = %d', $iid);      foreach ($selection as $cid) {        if ($cid) {          db_query('INSERT INTO {aggregator_category_item} (cid, iid) VALUES (%d, %d)', $cid, $iid);        }      }    }  }  drupal_set_message(t('The categories have been saved.'));}/** * Theme the page list form for assigning categories. * * @param $form *   An associative array containing the structure of the form. * @return *   The output HTML. * @ingroup themeable */function theme_aggregator_categorize_items($form) {  $output = drupal_render($form['feed_source']);  $rows = array();  if ($form['items']) {    foreach (element_children($form['items']) as $key) {      if (is_array($form['items'][$key])) {        $rows[] = array(          drupal_render($form['items'][$key]),          array('data' => drupal_render($form['categories'][$key]), 'class' => 'categorize-item'),        );      }    }  }  $output .= theme('table', array('', t('Categorize')), $rows);  $output .= drupal_render($form['submit']);  $output .= drupal_render($form);  return theme('aggregator_wrapper', $output);}/** * Process variables for aggregator-wrapper.tpl.php. * * @see aggregator-wrapper.tpl.php */function template_preprocess_aggregator_wrapper(&$variables) {  $variables['pager'] = theme('pager', NULL, 20, 0);}/** * Process variables for aggregator-item.tpl.php. * * @see aggregator-item.tpl.php */function template_preprocess_aggregator_item(&$variables) {  $item = $variables['item'];  $variables['feed_url'] = check_url($item->link);  $variables['feed_title'] = check_plain($item->title);  $variables['content'] = aggregator_filter_xss($item->description);  $variables['source_url'] = '';  $variables['source_title'] = '';  if (isset($item->ftitle) && isset($item->fid)) {    $variables['source_url'] = url("aggregator/sources/$item->fid");    $variables['source_title'] = check_plain($item->ftitle);  }  if (date('Ymd', $item->timestamp) == date('Ymd')) {    $variables['source_date'] = t('%ago ago', array('%ago' => format_interval(time() - $item->timestamp)));  }  else {    $variables['source_date'] = format_date($item->timestamp, 'custom', variable_get('date_format_medium', 'D, m/d/Y - H:i'));  }  $variables['categories'] = array();  foreach ($item->categories as $category) {    $variables['categories'][$category->cid] = l($category->title, 'aggregator/categories/'. $category->cid);  }}/** * Menu callback; displays all the feeds used by the aggregator. */function aggregator_page_sources() {  $result = db_query('SELECT f.fid, f.title, f.description, f.image, MAX(i.timestamp) AS last FROM {aggregator_feed} f LEFT JOIN {aggregator_item} i ON f.fid = i.fid GROUP BY f.fid, f.title, f.description, f.image ORDER BY last DESC, f.title');  $output = '';  while ($feed = db_fetch_object($result)) {    // Most recent items:    $summary_items = array();    if (variable_get('aggregator_summary_items', 3)) {      $items = db_query_range('SELECT i.title, i.timestamp, i.link FROM {aggregator_item} i WHERE i.fid = %d ORDER BY i.timestamp DESC', $feed->fid, 0, variable_get('aggregator_summary_items', 3));      while ($item = db_fetch_object($items)) {        $summary_items[] = theme('aggregator_summary_item', $item);      }    }    $feed->url = url('aggregator/sources/'. $feed->fid);    $output .= theme('aggregator_summary_items', $summary_items, $feed);  }  $output .= theme('feed_icon', url('aggregator/opml'), t('OPML feed'));  return theme('aggregator_wrapper', $output);}/** * Menu callback; displays all the categories used by the aggregator. */function aggregator_page_categories() {  $result = db_query('SELECT c.cid, c.title, c.description FROM {aggregator_category} c LEFT JOIN {aggregator_category_item} ci ON c.cid = ci.cid LEFT JOIN {aggregator_item} i ON ci.iid = i.iid GROUP BY c.cid, c.title, c.description');  $output = '';  while ($category = db_fetch_object($result)) {    if (variable_get('aggregator_summary_items', 3)) {      $summary_items = array();      $items = db_query_range('SELECT i.title, i.timestamp, i.link, f.title as feed_title, f.link as feed_link FROM {aggregator_category_item} ci LEFT JOIN {aggregator_item} i ON i.iid = ci.iid LEFT JOIN {aggregator_feed} f ON i.fid = f.fid WHERE ci.cid = %d ORDER BY i.timestamp DESC', $category->cid, 0, variable_get('aggregator_summary_items', 3));      while ($item = db_fetch_object($items)) {        $summary_items[] = theme('aggregator_summary_item', $item);      }    }    $category->url = url('aggregator/categories/'. $category->cid);    $output .= theme('aggregator_summary_items', $summary_items, $category);  }  return theme('aggregator_wrapper', $output);}/** * Menu callback; generate an RSS 0.92 feed of aggregator items or categories. */function aggregator_page_rss() {  $result = NULL;  // arg(2) is the passed cid, only select for that category  if (arg(2)) {    $category = db_fetch_object(db_query('SELECT cid, title FROM {aggregator_category} WHERE cid = %d', arg(2)));    $sql = 'SELECT i.*, f.title AS ftitle, f.link AS flink FROM {aggregator_category_item} c LEFT JOIN {aggregator_item} i ON c.iid = i.iid LEFT JOIN {aggregator_feed} f ON i.fid = f.fid WHERE cid = %d ORDER BY timestamp DESC, i.iid DESC';    $result = db_query_range($sql, $category->cid, 0, variable_get('feed_default_items', 10));  }  // or, get the default aggregator items  else {    $category = NULL;    $sql = 'SELECT i.*, f.title AS ftitle, f.link AS flink FROM {aggregator_item} i INNER JOIN {aggregator_feed} f ON i.fid = f.fid ORDER BY i.timestamp DESC, i.iid DESC';    $result = db_query_range($sql, 0, variable_get('feed_default_items', 10));  }  $feeds = array();  while ($item = db_fetch_object($result)) {    $feeds[] = $item;  }  return theme('aggregator_page_rss', $feeds, $category);}/** * Theme the RSS output. * * @param $feeds *   An array of the feeds to theme. * @param $category *   A common category, if any, for all the feeds. * @ingroup themeable */function theme_aggregator_page_rss($feeds, $category = NULL) {  drupal_set_header('Content-Type: application/rss+xml; charset=utf-8');  $items = '';  $feed_length = variable_get('feed_item_length', 'teaser');  foreach ($feeds as $feed) {    switch ($feed_length) {      case 'teaser':        $teaser = node_teaser($feed->description);        if ($teaser != $feed->description) {          $teaser .= '<p><a href="'. check_url($feed->link) .'">'. t('read more') ."</a></p>\n";        }        $feed->description = $teaser;        break;      case 'title':        $feed->description = '';        break;    }    $items .= format_rss_item($feed->ftitle .': '. $feed->title, $feed->link, $feed->description, array('pubDate' => date('r', $feed->timestamp)));  }  $site_name = variable_get('site_name', 'Drupal');  $url = url((isset($category) ? 'aggregator/categories/'. $category->cid : 'aggregator'), array('absolute' => TRUE));  $description = isset($category) ? t('@site_name - aggregated feeds in category @title', array('@site_name' => $site_name, '@title' => $category->title)) : t('@site_name - aggregated feeds', array('@site_name' => $site_name));  $output = "<?xml version=\"1.0\" encoding=\"utf-8\"?>\n";  $output .= "<rss version=\"2.0\">\n";  $output .= format_rss_channel(t('@site_name aggregator', array('@site_name' => $site_name)), $url, $description, $items);  $output .= "</rss>\n";  print $output;}/** * Menu callback; generates an OPML representation of all feeds. * * @param $cid *   If set, feeds are exported only from a category with this ID. Otherwise, all feeds are exported. * @return *   The output XML. */function aggregator_page_opml($cid = NULL) {  if ($cid) {    $result = db_query('SELECT f.title, f.url FROM {aggregator_feed} f LEFT JOIN {aggregator_category_feed} c on f.fid = c.fid WHERE c.cid = %d ORDER BY title', $cid);  }  else {    $result = db_query('SELECT * FROM {aggregator_feed} ORDER BY title');  }  $feeds = array();  while ($item = db_fetch_object($result)) {    $feeds[] = $item;  }  return theme('aggregator_page_opml', $feeds);}/** * Theme the OPML feed output. * * @param $feeds *   An array of the feeds to theme. * @ingroup themeable */function theme_aggregator_page_opml($feeds) {  drupal_set_header('Content-Type: text/xml; charset=utf-8');  $output = "<?xml version=\"1.0\" encoding=\"utf-8\"?>\n";  $output .= "<opml version=\"1.1\">\n";  $output .= "<head>\n";  $output .= '<title>'. check_plain(variable_get('site_name', 'Drupal')) ."</title>\n";  $output .= '<dateModified>'. gmdate('r') ."</dateModified>\n";  $output .= "</head>\n";  $output .= "<body>\n";  foreach ($feeds as $feed) {    $output .= '<outline text="'. check_plain($feed->title) .'" xmlUrl="'. check_url($feed->url) ."\" />\n";  }  $output .= "</body>\n";  $output .= "</opml>\n";  print $output;}/** * Process variables for aggregator-summary-items.tpl.php. * * @see aggregator-summary-item.tpl.php */function template_preprocess_aggregator_summary_items(&$variables) {  $variables['title'] = check_plain($variables['source']->title);  $variables['summary_list'] = theme('item_list', $variables['summary_items']);  $variables['source_url'] = $variables['source']->url;}/** * Process variables for aggregator-summary-item.tpl.php. * * @see aggregator-summary-item.tpl.php */function template_preprocess_aggregator_summary_item(&$variables) {  $item = $variables['item'];  $variables['feed_url'] = check_url($item->link);  $variables['feed_title'] = check_plain($item->title);  $variables['feed_age'] = t('%age old', array('%age' => format_interval(time() - $item->timestamp)));  $variables['source_url'] = '';  $variables['source_title'] = '';  if (!empty($item->feed_link)) {    $variables['source_url'] = check_url($item->feed_link);    $variables['source_title'] = check_plain($item->feed_title);  }}/** * Process variables for aggregator-feed-source.tpl.php. * * @see aggregator-feed-source.tpl.php */function template_preprocess_aggregator_feed_source(&$variables) {  $feed = $variables['feed'];  $variables['source_icon'] = theme('feed_icon', $feed->url, t('!title feed', array('!title' => $feed->title)));  $variables['source_image'] = $feed->image;  $variables['source_description'] = aggregator_filter_xss($feed->description);  $variables['source_url'] = check_url(url($feed->link, array('absolute' => TRUE)));  if ($feed->checked) {    $variables['last_checked'] = t('@time ago', array('@time' => format_interval(time() - $feed->checked)));  }  else {    $variables['last_checked'] = t('never');  }  if (user_access('administer news feeds')) {    $variables['last_checked'] = l($variables['last_checked'], 'admin/content/aggregator');  }}
<?php// $Id$?><div class="box">  <?php if ($title): ?>  <h2 class="title"><?php print $title ?></h2>  <?php endif; ?>  <div class="content"><?php print $content ?></div></div>
<?php// $Id$/** * @file * Code required only for the update status settings form. *//** * Form builder for the update settings tab. */function update_settings() {  $form = array();  $notify_emails = variable_get('update_notify_emails', array());  $form['update_notify_emails'] = array(    '#type' => 'textarea',    '#title' => t('E-mail addresses to notify when updates are available'),    '#rows' => 4,    '#default_value' => implode("\n", $notify_emails),    '#description' => t('Whenever your site checks for available updates and finds new releases, it can notify a list of users via e-mail. Put each address on a separate line. If blank, no e-mails will be sent.'),  );  $form['update_check_frequency'] = array(    '#type' => 'radios',    '#title' => t('Check for updates'),    '#default_value' => variable_get('update_check_frequency', 1),    '#options' => array(      '1' => t('Daily'),      '7' => t('Weekly'),    ),    '#description' => t('Select how frequently you want to automatically check for new releases of your currently installed modules and themes.'),  );  $form['update_notification_threshold'] = array(    '#type' => 'radios',    '#title' => t('E-mail notification threshold'),    '#default_value' => variable_get('update_notification_threshold', 'all'),    '#options' => array(      'all' => t('All newer versions'),      'security' => t('Only security updates'),    ),    '#description' => t('You can choose to send e-mail only if a security update is available, or to be notified about all newer versions. If there are updates available of Drupal core or any of your installed modules and themes, your site will always print a message on the <a href="@status_report">status report</a> page, and will also display an error message on administration pages if there is a security update.', array('@status_report' => url('admin/reports/status')))  );  $form = system_settings_form($form);  // Custom valiation callback for the email notification setting.  $form['#validate'][] = 'update_settings_validate';  // We need to call our own submit callback first, not the one from  // system_settings_form(), so that we can process and save the emails.  unset($form['#submit']);  return $form;}/** * Validation callback for the settings form. * * Validates the email addresses and ensures the field is formatted correctly. */function update_settings_validate($form, &$form_state) {  if (!empty($form_state['values']['update_notify_emails'])) {    $valid = array();    $invalid = array();    foreach (explode("\n", trim($form_state['values']['update_notify_emails'])) as $email) {      $email = trim($email);      if (!empty($email)) {        if (valid_email_address($email)) {          $valid[] = $email;        }        else {          $invalid[] = $email;        }      }    }    if (empty($invalid)) {      $form_state['notify_emails'] = $valid;    }    elseif (count($invalid) == 1) {      form_set_error('update_notify_emails', t('%email is not a valid e-mail address.', array('%email' => reset($invalid))));    }    else {      form_set_error('update_notify_emails', t('%emails are not valid e-mail addresses.', array('%emails' => implode(', ', $invalid))));    }  }}/** * Submit handler for the settings tab. */function update_settings_submit($form, $form_state) {  $op = $form_state['values']['op'];  if ($op == t('Reset to defaults')) {    unset($form_state['notify_emails']);  }  else {    if (empty($form_state['notify_emails'])) {      variable_del('update_notify_emails');    }    else {      variable_set('update_notify_emails', $form_state['notify_emails']);    }    unset($form_state['notify_emails']);    unset($form_state['values']['update_notify_emails']);  }  system_settings_form_submit($form, $form_state);}
<?php// $Id$/** * @file user-picture.tpl.php * Default theme implementation to present an picture configured for the * user's account. * * Available variables: * - $picture: Image set by the user or the site's default. Will be linked *   depending on the viewer's permission to view the users profile page. * - $account: Array of account information. Potentially unsafe. Be sure to *   check_plain() before use. * * @see template_preprocess_user_picture() */?><div class="picture">  <?php print $picture; ?></div>
<?php// $Id$/** * @file search-results.tpl.php * Default theme implementation for displaying search results. * * This template collects each invocation of theme_search_result(). This and * the child template are dependant to one another sharing the markup for * definition lists. * * Note that modules may implement their own search type and theme function * completely bypassing this template. * * Available variables: * - $search_results: All results as it is rendered through *   search-result.tpl.php * - $type: The type of search, e.g., "node" or "user". * * * @see template_preprocess_search_results() */?><dl class="search-results <?php print $type; ?>-results">  <?php print $search_results; ?></dl><?php print $pager; ?>
<?php// $Id$/** * @file * The PHP page that serves all page requests on a Drupal installation. * * The routines here dispatch control to the appropriate handler, which then * prints the appropriate page. * * All Drupal code is released under the GNU General Public License. * See COPYRIGHT.txt and LICENSE.txt. */require_once './includes/bootstrap.inc';drupal_bootstrap(DRUPAL_BOOTSTRAP_FULL);$return = menu_execute_active_handler();// Menu status constants are integers; page content is a string.if (is_int($return)) {  switch ($return) {    case MENU_NOT_FOUND:      drupal_not_found();      break;    case MENU_ACCESS_DENIED:      drupal_access_denied();      break;    case MENU_SITE_OFFLINE:      drupal_site_offline();      break;  }}elseif (isset($return)) {  // Print any value (including an empty string) except NULL or undefined:  print theme('page', $return);}drupal_page_footer();
