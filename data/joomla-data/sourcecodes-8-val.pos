<?php/** * @package     Joomla.Site * @subpackage  com_finder * * @copyright   Copyright (C) 2005 - 2013 Open Source Matters, Inc. All rights reserved. * @license     GNU General Public License version 2 or later; see LICENSE */defined('_JEXEC') or die;/** * Finder route helper class. * * @package     Joomla.Site * @subpackage  com_finder * @since       2.5 */class FinderHelperRoute{	/**	 * Method to get the route for a search page.	 *	 * @param   integer  $f  The search filter id. [optional]	 * @param   string   $q  The search query string. [optional]	 *	 * @return  string  The search route.	 *	 * @since   2.5	 */	public static function getSearchRoute($f = null, $q = null)	{		// Get the menu item id.		$query = array('view' => 'search', 'q' => $q, 'f' => $f);		$item = self::getItemid($query);		// Get the base route.		$uri = clone(JUri::getInstance('index.php?option=com_finder&view=search'));		// Add the pre-defined search filter if present.		if ($f !== null)		{			$uri->setVar('f', $f);		}		// Add the search query string if present.		if ($q !== null)		{			$uri->setVar('q', $q);		}		// Add the menu item id if present.		if ($item !== null)		{			$uri->setVar('Itemid', $item);		}		return $uri->toString(array('path', 'query'));	}	/**	 * Method to get the route for an advanced search page.	 *	 * @param   integer  $f  The search filter id. [optional]	 * @param   string   $q  The search query string. [optional]	 *	 * @return  string  The advanced search route.	 *	 * @since   2.5	 */	public static function getAdvancedRoute($f = null, $q = null)	{		// Get the menu item id.		$query = array('view' => 'advanced', 'q' => $q, 'f' => $f);		$item = self::getItemid($query);		// Get the base route.		$uri = clone(JUri::getInstance('index.php?option=com_finder&view=advanced'));		// Add the pre-defined search filter if present.		if ($q !== null)		{			$uri->setVar('f', $f);		}		// Add the search query string if present.		if ($q !== null)		{			$uri->setVar('q', $q);		}		// Add the menu item id if present.		if ($item !== null)		{			$uri->setVar('Itemid', $item);		}		return $uri->toString(array('path', 'query'));	}	/**	 * Method to get the most appropriate menu item for the route based on the	 * supplied query needles.	 *	 * @param   array  $query  An array of URL parameters.	 *	 * @return  mixed  An integer on success, null otherwise.	 *	 * @since   2.5	 */	public static function getItemid($query)	{		static $items, $active;		// Get the menu items for com_finder.		if (!$items || !$active)		{			$app = JFactory::getApplication('site');			$com = JComponentHelper::getComponent('com_finder');			$menu = $app->getMenu();			$active = $menu->getActive();			$items = $menu->getItems('component_id', $com->id);			$items = is_array($items) ? $items : array();		}		// Try to match the active view and filter.		if ($active && @$active->query['view'] == @$query['view'] && @$active->query['f'] == @$query['f'])		{			return $active->id;		}		// Try to match the view, query, and filter.		foreach ($items as $item)		{			if (@$item->query['view'] == @$query['view'] && @$item->query['q'] == @$query['q'] && @$item->query['f'] == @$query['f'])			{				return $item->id;			}		}		// Try to match the view and filter.		foreach ($items as $item)		{			if (@$item->query['view'] == @$query['view'] && @$item->query['f'] == @$query['f'])			{				return $item->id;			}		}		// Try to match the view.		foreach ($items as $item)		{			if (@$item->query['view'] == @$query['view'])			{				return $item->id;			}		}		return null;	}}
<?php/** * @package     Joomla.Platform * @subpackage  Access * * @copyright   Copyright (C) 2005 - 2013 Open Source Matters, Inc. All rights reserved. * @license     GNU General Public License version 2 or later; see LICENSE */defined('JPATH_PLATFORM') or die;/** * JAccessRules class. * * @package     Joomla.Platform * @subpackage  Access * @since       11.4 */class JAccessRules{	/**	 * A named array.	 *	 * @var    array	 * @since  11.1	 */	protected $data = array();	/**	 * Constructor.	 *	 * The input array must be in the form: array('action' => array(-42 => true, 3 => true, 4 => false))	 * or an equivalent JSON encoded string, or an object where properties are arrays.	 *	 * @param   mixed  $input  A JSON format string (probably from the database) or a nested array.	 *	 * @since   11.1	 */	public function __construct($input = '')	{		// Convert in input to an array.		if (is_string($input))		{			$input = json_decode($input, true);		}		elseif (is_object($input))		{			$input = (array) $input;		}		if (is_array($input))		{			// Top level keys represent the actions.			foreach ($input as $action => $identities)			{				$this->mergeAction($action, $identities);			}		}	}	/**	 * Get the data for the action.	 *	 * @return  array  A named array of JAccessRule objects.	 *	 * @since   11.1	 */	public function getData()	{		return $this->data;	}	/**	 * Method to merge a collection of JAccessRules.	 *	 * @param   mixed  $input  JAccessRule or array of JAccessRules	 *	 * @return  void	 *	 * @since   11.1	 */	public function mergeCollection($input)	{		// Check if the input is an array.		if (is_array($input))		{			foreach ($input as $actions)			{				$this->merge($actions);			}		}	}	/**	 * Method to merge actions with this object.	 *	 * @param   mixed  $actions  JAccessRule object, an array of actions or a JSON string array of actions.	 *	 * @return  void	 *	 * @since   11.1	 */	public function merge($actions)	{		if (is_string($actions))		{			$actions = json_decode($actions, true);		}		if (is_array($actions))		{			foreach ($actions as $action => $identities)			{				$this->mergeAction($action, $identities);			}		}		elseif ($actions instanceof JAccessRules)		{			$data = $actions->getData();			foreach ($data as $name => $identities)			{				$this->mergeAction($name, $identities);			}		}	}	/**	 * Merges an array of identities for an action.	 *	 * @param   string  $action      The name of the action.	 * @param   array   $identities  An array of identities	 *	 * @return  void	 *	 * @since   11.1	 */	public function mergeAction($action, $identities)	{		if (isset($this->data[$action]))		{			// If exists, merge the action.			$this->data[$action]->mergeIdentities($identities);		}		else		{			// If new, add the action.			$this->data[$action] = new JAccessRule($identities);		}	}	/**	 * Checks that an action can be performed by an identity.	 *	 * The identity is an integer where +ve represents a user group,	 * and -ve represents a user.	 *	 * @param   string  $action    The name of the action.	 * @param   mixed   $identity  An integer representing the identity, or an array of identities	 *	 * @return  mixed   Object or null if there is no information about the action.	 *	 * @since   11.1	 */	public function allow($action, $identity)	{		// Check we have information about this action.		if (isset($this->data[$action]))		{			return $this->data[$action]->allow($identity);		}		return null;	}	/**	 * Get the allowed actions for an identity.	 *	 * @param   mixed  $identity  An integer representing the identity or an array of identities	 *	 * @return  object  Allowed actions for the identity or identities	 *	 * @since   11.1	 */	public function getAllowed($identity)	{		// Sweep for the allowed actions.		$allowed = new JObject;		foreach ($this->data as $name => &$action)		{			if ($action->allow($identity))			{				$allowed->set($name, true);			}		}		return $allowed;	}	/**	 * Magic method to convert the object to JSON string representation.	 *	 * @return  string  JSON representation of the actions array	 *	 * @since   11.1	 */	public function __toString()	{		$temp = array();		foreach ($this->data as $name => $rule)		{			// Convert the action to JSON, then back into an array otherwise			// re-encoding will quote the JSON for the identities in the action.			$temp[$name] = json_decode((string) $rule);		}		return json_encode($temp);	}}
<?php/** * @package     Joomla.Platform * @subpackage  Mail * * @copyright   Copyright (C) 2005 - 2013 Open Source Matters, Inc. All rights reserved. * @license     GNU General Public License version 2 or later; see LICENSE */defined('JPATH_PLATFORM') or die;jimport('phpmailer.phpmailer');/** * Email Class.  Provides a common interface to send email from the Joomla! Platform * * @package     Joomla.Platform * @subpackage  Mail * @since       11.1 */class JMail extends PHPMailer{	/**	 * @var    array  JMail instances container.	 * @since  11.3	 */	protected static $instances = array();	/**	 * @var    string  Charset of the message.	 * @since  11.1	 */	public $CharSet = 'utf-8';	/**	 * Constructor	 */	public function __construct()	{		// PHPMailer has an issue using the relative path for its language files		$this->SetLanguage('joomla', JPATH_PLATFORM . '/phpmailer/language/');	}	/**	 * Returns the global email object, only creating it	 * if it doesn't already exist.	 *	 * NOTE: If you need an instance to use that does not have the global configuration	 * values, use an id string that is not 'Joomla'.	 *	 * @param   string  $id  The id string for the JMail instance [optional]	 *	 * @return  JMail  The global JMail object	 *	 * @since   11.1	 */	public static function getInstance($id = 'Joomla')	{		if (empty(self::$instances[$id]))		{			self::$instances[$id] = new JMail;		}		return self::$instances[$id];	}	/**	 * Send the mail	 *	 * @return  mixed  True if successful; JError if using legacy tree (no exception thrown in that case).	 *	 * @since   11.1	 * @throws  RuntimeException	 */	public function Send()	{		if (($this->Mailer == 'mail') && !function_exists('mail'))		{			if (class_exists('JError'))			{				return JError::raiseNotice(500, JText::_('JLIB_MAIL_FUNCTION_DISABLED'));			}			else			{				throw new RuntimeException(sprintf('%s::Send mail not enabled.', get_class($this)));			}		}		@$result = parent::Send();		if ($result == false)		{			if (class_exists('JError'))			{				$result = JError::raiseNotice(500, JText::_($this->ErrorInfo));			}			else			{				throw new RuntimeException(sprintf('%s::Send failed: "%s".', get_class($this), $this->ErrorInfo));			}		}		return $result;	}	/**	 * Set the email sender	 *	 * @param   array  $from  email address and Name of sender	 *                        <code>array([0] => email Address [1] => Name)</code>	 *	 * @return  JMail  Returns this object for chaining.	 *	 * @since   11.1	 */	public function setSender($from)	{		if (is_array($from))		{			// If $from is an array we assume it has an address and a name			if (isset($from[2]))			{				// If it is an array with entries, use them				$this->SetFrom(JMailHelper::cleanLine($from[0]), JMailHelper::cleanLine($from[1]), (bool) $from[2]);			}			else			{				$this->SetFrom(JMailHelper::cleanLine($from[0]), JMailHelper::cleanLine($from[1]));			}		}		elseif (is_string($from))		{			// If it is a string we assume it is just the address			$this->SetFrom(JMailHelper::cleanLine($from));		}		else		{			// If it is neither, we throw a warning			JLog::add(JText::sprintf('JLIB_MAIL_INVALID_EMAIL_SENDER', $from), JLog::WARNING, 'jerror');		}		return $this;	}	/**	 * Set the email subject	 *	 * @param   string  $subject  Subject of the email	 *	 * @return  JMail  Returns this object for chaining.	 *	 * @since   11.1	 */	public function setSubject($subject)	{		$this->Subject = JMailHelper::cleanLine($subject);		return $this;	}	/**	 * Set the email body	 *	 * @param   string  $content  Body of the email	 *	 * @return  JMail  Returns this object for chaining.	 *	 * @since   11.1	 */	public function setBody($content)	{		/*		 * Filter the Body		 * TODO: Check for XSS		 */		$this->Body = JMailHelper::cleanText($content);		return $this;	}	/**	 * Add recipients to the email.	 *	 * @param   mixed   $recipient  Either a string or array of strings [email address(es)]	 * @param   mixed   $name       Either a string or array of strings [name(s)]	 * @param   string  $method     The parent method's name.	 *	 * @return  JMail  Returns this object for chaining.	 *	 * @since   11.1	 */	protected function add($recipient, $name = '', $method = 'AddAddress')	{		// If the recipient is an array, add each recipient... otherwise just add the one		if (is_array($recipient))		{			if (is_array($name))			{				$combined = array_combine($recipient, $name);				if ($combined === false)				{					throw new InvalidArgumentException("The number of elements for each array isn't equal.");				}				foreach ($combined as $recipientEmail => $recipientName)				{					$recipientEmail = JMailHelper::cleanLine($recipientEmail);					$recipientName = JMailHelper::cleanLine($recipientName);					call_user_func('parent::' . $method, $recipientEmail, $recipientName);				}			}			else			{				$name = JMailHelper::cleanLine($name);				foreach ($recipient as $to)				{					$to = JMailHelper::cleanLine($to);					call_user_func('parent::' . $method, $to, $name);				}			}		}		else		{			$recipient = JMailHelper::cleanLine($recipient);			call_user_func('parent::' . $method, $recipient, $name);		}		return $this;	}	/**	 * Add recipients to the email	 *	 * @param   mixed  $recipient  Either a string or array of strings [email address(es)]	 * @param   mixed  $name       Either a string or array of strings [name(s)]	 *	 * @return  JMail  Returns this object for chaining.	 *	 * @since   11.1	 */	public function addRecipient($recipient, $name = '')	{		$this->add($recipient, $name, 'AddAddress');		return $this;	}	/**	 * Add carbon copy recipients to the email	 *	 * @param   mixed  $cc    Either a string or array of strings [email address(es)]	 * @param   mixed  $name  Either a string or array of strings [name(s)]	 *	 * @return  JMail  Returns this object for chaining.	 *	 * @since   11.1	 */	public function addCC($cc, $name = '')	{		// If the carbon copy recipient is an array, add each recipient... otherwise just add the one		if (isset($cc))		{			$this->add($cc, $name, 'AddCC');		}		return $this;	}	/**	 * Add blind carbon copy recipients to the email	 *	 * @param   mixed  $bcc   Either a string or array of strings [email address(es)]	 * @param   mixed  $name  Either a string or array of strings [name(s)]	 *	 * @return  JMail  Returns this object for chaining.	 *	 * @since   11.1	 */	public function addBCC($bcc, $name = '')	{		// If the blind carbon copy recipient is an array, add each recipient... otherwise just add the one		if (isset($bcc))		{			$this->add($bcc, $name, 'AddBCC');		}		return $this;	}	/**	 * Add file attachments to the email	 *	 * @param   mixed  $attachment  Either a string or array of strings [filenames]	 * @param   mixed  $name        Either a string or array of strings [names]	 * @param   mixed  $encoding    The encoding of the attachment	 * @param   mixed  $type        The mime type	 *	 * @return  JMail  Returns this object for chaining.	 *	 * @since   12.2	 * @throws  InvalidArgumentException	 */	public function addAttachment($attachment, $name = '', $encoding = 'base64', $type = 'application/octet-stream')	{		// If the file attachments is an array, add each file... otherwise just add the one		if (isset($attachment))		{			if (is_array($attachment))			{				if (!empty($name) && count($attachment) != count($name))				{					throw new InvalidArgumentException("The number of attachments must be equal with the number of name");				}				foreach ($attachment as $key => $file)				{					if (!empty($name))					{						parent::AddAttachment($file, $name[$key], $encoding, $type);					}					else					{						parent::AddAttachment($file, $name, $encoding, $type);					}				}			}			else			{				parent::AddAttachment($attachment, $name, $encoding, $type);			}		}		return $this;	}	/**	 * Add Reply to email address(es) to the email	 *	 * @param   mixed  $replyto  Either a string or array of strings [email address(es)]	 * @param   mixed  $name     Either a string or array of strings [name(s)]	 *	 * @return  JMail  Returns this object for chaining.	 *	 * @since   11.1	 */	public function addReplyTo($replyto, $name = '')	{		$this->add($replyto, $name, 'AddReplyTo');		return $this;	}	/**	 * Use sendmail for sending the email	 *	 * @param   string  $sendmail  Path to sendmail [optional]	 *	 * @return  boolean  True on success	 *	 * @since   11.1	 */	public function useSendmail($sendmail = null)	{		$this->Sendmail = $sendmail;		if (!empty($this->Sendmail))		{			$this->IsSendmail();			return true;		}		else		{			$this->IsMail();			return false;		}	}	/**	 * Use SMTP for sending the email	 *	 * @param   string   $auth    SMTP Authentication [optional]	 * @param   string   $host    SMTP Host [optional]	 * @param   string   $user    SMTP Username [optional]	 * @param   string   $pass    SMTP Password [optional]	 * @param   string   $secure  Use secure methods	 * @param   integer  $port    The SMTP port	 *	 * @return  boolean  True on success	 *	 * @since   11.1	 */	public function useSMTP($auth = null, $host = null, $user = null, $pass = null, $secure = null, $port = 25)	{		$this->SMTPAuth = $auth;		$this->Host = $host;		$this->Username = $user;		$this->Password = $pass;		$this->Port = $port;		if ($secure == 'ssl' || $secure == 'tls')		{			$this->SMTPSecure = $secure;		}		if (($this->SMTPAuth !== null && $this->Host !== null && $this->Username !== null && $this->Password !== null)			|| ($this->SMTPAuth === null && $this->Host !== null))		{			$this->IsSMTP();			return true;		}		else		{			$this->IsMail();			return false;		}	}	/**	 * Function to send an email	 *	 * @param   string   $from         From email address	 * @param   string   $fromName     From name	 * @param   mixed    $recipient    Recipient email address(es)	 * @param   string   $subject      email subject	 * @param   string   $body         Message body	 * @param   boolean  $mode         false = plain text, true = HTML	 * @param   mixed    $cc           CC email address(es)	 * @param   mixed    $bcc          BCC email address(es)	 * @param   mixed    $attachment   Attachment file name(s)	 * @param   mixed    $replyTo      Reply to email address(es)	 * @param   mixed    $replyToName  Reply to name(s)	 *	 * @return  boolean  True on success	 *	 * @since   11.1	 */	public function sendMail($from, $fromName, $recipient, $subject, $body, $mode = false, $cc = null, $bcc = null, $attachment = null,		$replyTo = null, $replyToName = null)	{		$this->setSubject($subject);		$this->setBody($body);		// Are we sending the email as HTML?		if ($mode)		{			$this->IsHTML(true);		}		$this->addRecipient($recipient);		$this->addCC($cc);		$this->addBCC($bcc);		$this->addAttachment($attachment);		// Take care of reply email addresses		if (is_array($replyTo))		{			$numReplyTo = count($replyTo);			for ($i = 0; $i < $numReplyTo; $i++)			{				$this->addReplyTo(array($replyTo[$i], $replyToName[$i]));			}		}		elseif (isset($replyTo))		{			$this->addReplyTo(array($replyTo, $replyToName));		}		// Add sender to replyTo only if no replyTo received		$autoReplyTo = (empty($this->ReplyTo)) ? true : false;		$this->setSender(array($from, $fromName, $autoReplyTo));		return $this->Send();	}	/**	 * Sends mail to administrator for approval of a user submission	 *	 * @param   string  $adminName   Name of administrator	 * @param   string  $adminEmail  Email address of administrator	 * @param   string  $email       [NOT USED TODO: Deprecate?]	 * @param   string  $type        Type of item to approve	 * @param   string  $title       Title of item to approve	 * @param   string  $author      Author of item to approve	 * @param   string  $url         A URL to included in the mail	 *	 * @return  boolean  True on success	 *	 * @since   11.1	 */	public function sendAdminMail($adminName, $adminEmail, $email, $type, $title, $author, $url = null)	{		$subject = JText::sprintf('JLIB_MAIL_USER_SUBMITTED', $type);		$message = sprintf(JText::_('JLIB_MAIL_MSG_ADMIN'), $adminName, $type, $title, $author, $url, $url, 'administrator', $type);		$message .= JText::_('JLIB_MAIL_MSG') . "\n";		$this->addRecipient($adminEmail);		$this->setSubject($subject);		$this->setBody($message);		return $this->Send();	}}
<?php/** * @package     Joomla.Administrator * @subpackage  com_cache * * @copyright   Copyright (C) 2005 - 2013 Open Source Matters, Inc. All rights reserved. * @license     GNU General Public License version 2 or later; see LICENSE.txt */defined('_JEXEC') or die;/** * HTML View class for the Cache component * * @package     Joomla.Administrator * @subpackage  com_cache * @since       1.6 */class CacheViewPurge extends JViewLegacy{	public function display($tpl = null)	{		$this->addToolbar();		$this->sidebar = JHtmlSidebar::render();		parent::display($tpl);	}	/**	 * Add the page title and toolbar.	 *	 * @since   1.6	 */	protected function addToolbar()	{		//JHtmlSidebar::addEntry(JText::_('COM_CACHE_BACK_CACHE_MANAGER'), 'index.php?option=com_cache', false);		JToolbarHelper::title(JText::_('COM_CACHE_PURGE_EXPIRED_CACHE'), 'purge.png');		JToolbarHelper::custom('purge', 'delete.png', 'delete_f2.png', 'COM_CACHE_PURGE_EXPIRED', false);		JToolbarHelper::divider();		if (JFactory::getUser()->authorise('core.admin', 'com_cache'))		{			JToolbarHelper::preferences('com_cache');			JToolbarHelper::divider();		}		JToolbarHelper::help('JHELP_SITE_MAINTENANCE_PURGE_EXPIRED_CACHE');	}}
<?php/** * @package     Joomla.Site * @subpackage  Layout * * @copyright   Copyright (C) 2005 - 2013 Open Source Matters, Inc. All rights reserved. * @license     GNU General Public License version 2 or later; see LICENSE.txt */defined('JPATH_BASE') or die;?>			<dd class="parent-category-name">				<?php $title = $this->escape($displayData['item']->parent_title);				$url = '<a href="'.JRoute::_(ContentHelperRoute::getCategoryRoute($displayData['item']->parent_slug)).'">'.$title.'</a>';?>				<?php if ($displayData['params']->get('link_parent_category') && !empty($displayData['item']->parent_slug)) : ?>					<?php echo JText::sprintf('COM_CONTENT_PARENT', $url); ?>				<?php else : ?>					<?php echo JText::sprintf('COM_CONTENT_PARENT', $title); ?>				<?php endif; ?>			</dd>
<?php/** * @package     Joomla.Libraries * @subpackage  Layout * * @copyright   Copyright (C) 2005 - 2013 Open Source Matters, Inc. All rights reserved. * @license     GNU General Public License version 2 or later; see LICENSE.txt */defined('JPATH_BASE') or die;/** * Interface to handle display layout * * @package     Joomla.Libraries * @subpackage  Layout * @see         http://docs.joomla.org/Sharing_layouts_across_views_or_extensions_with_JLayout * @since       3.0 */interface JLayout{	/**	 * Method to escape output.	 *	 * @param   string  $output  The output to escape.	 *	 * @return  string  The escaped output.	 *	 * @since   3.0	 */	public function escape($output);	/**	 * Method to render the layout.	 *	 * @param   object  $displayData  Object which properties are used inside the layout file to build displayed output	 *	 * @return  string  The rendered layout.	 *	 * @since   3.0	 */	public function render($displayData);}
<?php/** * @package     Joomla.Site * @subpackage  mod_footer * * @copyright   Copyright (C) 2005 - 2013 Open Source Matters, Inc. All rights reserved. * @license     GNU General Public License version 2 or later; see LICENSE.txt */defined('_JEXEC') or die;?><div class="footer1<?php echo $moduleclass_sfx ?>"><?php echo $lineone; ?></div><div class="footer2<?php echo $moduleclass_sfx ?>"><?php echo JText::_('MOD_FOOTER_LINE2'); ?></div>
<?php/** * @package     Joomla.Site * @subpackage  com_wrapper * * @copyright   Copyright (C) 2005 - 2013 Open Source Matters, Inc. All rights reserved. * @license     GNU General Public License version 2 or later; see LICENSE.txt */defined('_JEXEC') or die;/** * @param   array * @return  array */function WrapperBuildRoute(&$query){	$segments = array();	if (isset($query['view']))	{		unset($query['view']);	}	return $segments;}/** * @param   array * @return  array */function WrapperParseRoute($segments){	$vars = array();	$vars['view'] = 'wrapper';	return $vars;}
<?php/** * @package     Joomla.Legacy * @subpackage  Simplepie * * @copyright   Copyright (C) 2005 - 2013 Open Source Matters, Inc. All rights reserved. * @license     GNU General Public License version 2 or later; see LICENSE */defined('JPATH_PLATFORM') or die;jimport('simplepie.simplepie');/** * Class to maintain a pathway. * * The user's navigated path within the application. * * @package     Joomla.Legacy * @subpackage  Simplepie * @since       12.2 * * @deprecated  4.0  Use JFeed or supply your own methods */class JSimplepieFactory{	/**	 * Get a parsed XML Feed Source	 *	 * @param   string   $url         Url for feed source.	 * @param   integer  $cache_time  Time to cache feed for (using internal cache mechanism).	 *	 * @return  mixed  SimplePie parsed object on success, false on failure.	 *	 * @since   12.2	 * @deprecated  4.0   Use JFeedFactory($url) instead.	 *	 * @note  In 3.2 will be proxied to JFeedFactory()	 */	public static function getFeedParser($url, $cache_time = 0)	{		JLog::add(__METHOD__ . ' is deprecated.   Use JFeedFactory() or supply Simple Pie instead.', JLog::WARNING, 'deprecated');		$cache = JFactory::getCache('feed_parser', 'callback');		if ($cache_time > 0)		{			$cache->setLifeTime($cache_time);		}		$simplepie = new SimplePie(null, null, 0);		$simplepie->enable_cache(false);		$simplepie->set_feed_url($url);		$simplepie->force_feed(true);		$contents = $cache->get(array($simplepie, 'init'), null, false, false);		if ($contents)		{			return $simplepie;		}		JLog::add(JText::_('JLIB_UTIL_ERROR_LOADING_FEED_DATA'), JLog::WARNING, 'jerror');		return false;	}}
<?php/** * @package     Joomla.Site * @subpackage  Layout * * @copyright   Copyright (C) 2005 - 2013 Open Source Matters, Inc. All rights reserved. * @license     GNU General Public License version 2 or later; see LICENSE.txt */defined('_JEXEC') or die;$selector = empty($displayData['selector']) ? '' : $displayData['selector'];?><ul class="nav nav-tabs" id="<?php echo $selector; ?>Tabs"></ul><div class="tab-content" id="<?php echo $selector; ?>Content">
<?php/** * @package     Joomla.Site * @subpackage  com_mailto * * @copyright   Copyright (C) 2005 - 2013 Open Source Matters, Inc. All rights reserved. * @license     GNU General Public License version 2 or later; see LICENSE.txt */defined('_JEXEC') or die;?><div style="padding: 10px;">	<div style="text-align:right">		<a href="javascript: void window.close()">			<?php echo JText::_('COM_MAILTO_CLOSE_WINDOW'); ?> <?php echo JHtml::_('image', 'mailto/close-x.png', null, null, true); ?></a>	</div>	<h2>		<?php echo JText::_('COM_MAILTO_EMAIL_SENT'); ?>	</h2></div>
<?php/** * @package     Joomla.Administrator * @subpackage  com_banners * * @copyright   Copyright (C) 2005 - 2013 Open Source Matters, Inc. All rights reserved. * @license     GNU General Public License version 2 or later; see LICENSE.txt */defined('_JEXEC') or die;/** * Tracks list controller class. * * @package     Joomla.Administrator * @subpackage  com_banners * @since       1.6 */class BannersControllerTracks extends JControllerLegacy{	/**	 * @var		string	The context for persistent state.	 * @since   1.6	 */	protected $context = 'com_banners.tracks';	/**	 * Proxy for getModel.	 *	 * @param   string	$name	The name of the model.	 * @param   string	$prefix	The prefix for the model class name.	 *	 * @return  JModel	 * @since   1.6	 */	public function getModel($name = 'Tracks', $prefix = 'BannersModel', $config = array())	{		$model = parent::getModel($name, $prefix, array('ignore_request' => true));		return $model;	}	/**	 * Display method for the raw track data.	 *	 * @param   boolean			If true, the view output will be cached	 * @param   array  An array of safe url parameters and their variable types, for valid values see {@link JFilterInput::clean()}.	 *	 * @return  JController		This object to support chaining.	 * @since   1.5	 * @todo	This should be done as a view, not here!	 */	public function display($cachable = false, $urlparams = false)	{		// Get the document object.		$document	= JFactory::getDocument();		$vName		= 'tracks';		$vFormat	= 'raw';		// Get and render the view.		if ($view = $this->getView($vName, $vFormat))		{			// Get the model for the view.			$model = $this->getModel($vName);			// Load the filter state.			$app = JFactory::getApplication();			$type = $app->getUserState($this->context.'.filter.type');			$model->setState('filter.type', $type);			$begin = $app->getUserState($this->context.'.filter.begin');			$model->setState('filter.begin', $begin);			$end = $app->getUserState($this->context.'.filter.end');			$model->setState('filter.end', $end);			$categoryId = $app->getUserState($this->context.'.filter.category_id');			$model->setState('filter.category_id', $categoryId);			$clientId = $app->getUserState($this->context.'.filter.client_id');			$model->setState('filter.client_id', $clientId);			$model->setState('list.limit', 0);			$model->setState('list.start', 0);			$form = JRequest::getVar('jform');			$model->setState('basename', $form['basename']);			$model->setState('compressed', $form['compressed']);			$config = JFactory::getConfig();			$cookie_domain = $config->get('cookie_domain', '');			$cookie_path = $config->get('cookie_path', '/');			setcookie(JApplication::getHash($this->context.'.basename'), $form['basename'], time() + 365 * 86400, $cookie_path, $cookie_domain);			setcookie(JApplication::getHash($this->context.'.compressed'), $form['compressed'], time() + 365 * 86400, $cookie_path, $cookie_domain);			// Push the model into the view (as default).			$view->setModel($model, true);			// Push document object into the view.			$view->document = $document;			$view->display();		}	}}
<?php/** * @package     Joomla.Installation * @subpackage  View * * @copyright   Copyright (C) 2005 - 2013 Open Source Matters, Inc. All rights reserved. * @license     GNU General Public License version 2 or later; see LICENSE.txt */defined('_JEXEC') or die;/* @var InstallationViewDefault $this */?><?php echo JHtml::_('installation.stepbar'); ?><div class="btn-toolbar">	<div class="btn-group pull-right">		<a href="#" class="btn btn-primary" onclick="Install.submitform();" rel="next" title="<?php echo JText::_('JNext'); ?>"><i class="icon-arrow-right icon-white"></i> <?php echo JText::_('JNext'); ?></a>	</div></div><form action="index.php" method="post" id="languageForm" class="form-horizontal">	<div class="control-group">		<label for="jform_language" class="control-label"><?php echo JText::_('INSTL_SELECT_LANGUAGE_TITLE'); ?></label>		<div class="controls">			<?php echo $this->form->getInput('language'); ?>		</div>	</div>	<input type="hidden" name="task" value="setlanguage" />	<?php echo JHtml::_('form.token'); ?></form><form action="index.php" method="post" id="adminForm" class="form-validate form-horizontal">	<h3><?php echo JText::_('INSTL_SITE'); ?></h3>	<hr class="hr-condensed" />	<div class="row-fluid">		<div class="span6">			<div class="control-group">				<div class="control-label">					<?php echo $this->form->getLabel('site_name'); ?>				</div>				<div class="controls">					<?php echo $this->form->getInput('site_name'); ?>					<p class="help-block"><?php echo JText::_('INSTL_SITE_NAME_DESC'); ?></p>				</div>			</div>			<div class="control-group">				<div class="control-label">					<?php echo $this->form->getLabel('site_metadesc'); ?>				</div>				<div class="controls">					<?php echo $this->form->getInput('site_metadesc'); ?>					<p class="help-block">						<?php echo JText::_('INSTL_SITE_METADESC_TITLE_LABEL'); ?>					</p>				</div>			</div>		</div>		<div class="span6">			<div class="control-group">				<div class="control-label">					<?php echo $this->form->getLabel('admin_email'); ?>				</div>				<div class="controls">					<?php echo $this->form->getInput('admin_email'); ?>					<p class="help-block"><?php echo JText::_('INSTL_ADMIN_EMAIL_DESC'); ?></p>				</div>			</div>			<div class="control-group">				<div class="control-label">					<?php echo $this->form->getLabel('admin_user'); ?>				</div>				<div class="controls">					<?php echo $this->form->getInput('admin_user'); ?>					<p class="help-block"><?php echo JText::_('INSTL_ADMIN_USER_DESC'); ?></p>				</div>			</div>			<div class="control-group">				<div class="control-label">					<?php echo $this->form->getLabel('admin_password'); ?>				</div>				<div class="controls">					<?php echo $this->form->getInput('admin_password'); ?>					<p class="help-block"><?php echo JText::_('INSTL_ADMIN_PASSWORD_DESC'); ?></p>				</div>			</div>			<div class="control-group">				<div class="control-label">					<?php echo $this->form->getLabel('admin_password2'); ?>				</div>				<div class="controls">					<?php echo $this->form->getInput('admin_password2'); ?>				</div>			</div>		</div>	</div>	<div class="row-fluid">		<div class="span12">			<div class="control-group">				<div class="control-label">					<?php echo $this->form->getLabel('site_offline'); ?>				</div>				<div class="controls">					<?php echo $this->form->getInput('site_offline'); ?>					<p class="help-block">						<?php echo JText::_('INSTL_SITE_OFFLINE_TITLE_LABEL'); ?>					</p>				</div>			</div>		</div>	</div>	<input type="hidden" name="task" value="site" />	<?php echo JHtml::_('form.token'); ?></form>
<?php/** * @package     Joomla.Site * @subpackage  com_contact * * @copyright   Copyright (C) 2005 - 2013 Open Source Matters, Inc. All rights reserved. * @license     GNU General Public License version 2 or later; see LICENSE.txt */defined('_JEXEC') or die;$class = ' class="first"';if (count($this->items[$this->parent->id]) > 0 && $this->maxLevelcat != 0) :?><ul><?php foreach ($this->items[$this->parent->id] as $id => $item) : ?>	<?php	if ($this->params->get('show_empty_categories_cat') || $item->numitems || count($item->getChildren())) :	if (!isset($this->items[$this->parent->id][$id + 1]))	{		$class = ' class="last"';	}	?>	<li<?php echo $class; ?>>	<?php $class = ''; ?>		<span class="item-title"><a href="<?php echo JRoute::_(ContactHelperRoute::getCategoryRoute($item->id));?>">			<?php echo $this->escape($item->title); ?></a>		</span>		<?php if ($this->params->get('show_subcat_desc_cat') == 1) :?>		<?php if ($item->description) : ?>			<div class="category-desc">				<?php echo JHtml::_('content.prepare', $item->description, '', 'com_contact.categories'); ?>			</div>		<?php endif; ?>        <?php endif; ?>		<?php if ($this->params->get('show_cat_items_cat') == 1) :?>			<dl><dt>				<?php echo JText::_('COM_CONTACT_COUNT'); ?></dt>				<dd><?php echo $item->numitems; ?></dd>			</dl>		<?php endif; ?>		<?php if (count($item->getChildren()) > 0) :			$this->items[$item->id] = $item->getChildren();			$this->parent = $item;			$this->maxLevelcat--;			echo $this->loadTemplate('items');			$this->parent = $item->getParent();			$this->maxLevelcat++;		endif; ?>	</li>	<?php endif; ?><?php endforeach; ?></ul><?php endif; ?>
<?php/** * @package     Joomla.Administrator * @subpackage  com_redirect * * @copyright   Copyright (C) 2005 - 2013 Open Source Matters, Inc. All rights reserved. * @license     GNU General Public License version 2 or later; see LICENSE.txt */defined('_JEXEC') or die;/** * Utility class for creating HTML Grids * * @static * @package     Joomla.Administrator * @subpackage  com_redirect * @since       1.6 */class JHtmlRedirect{	/**	 * @param   int $value	The state value.	 * @param   int $i	 * @param   string  An optional prefix for the task.	 * @param   boolean		An optional setting for access control on the action.	 */	public static function published($value = 0, $i, $canChange = true)	{		// Array of image, task, title, action		$states	= array(			1	=> array('tick.png',		'links.unpublish',	'JENABLED',	'COM_REDIRECT_DISABLE_LINK'),			0	=> array('publish_x.png',	'links.publish',		'JDISABLED',	'COM_REDIRECT_ENABLE_LINK'),			2	=> array('disabled.png',	'links.unpublish',	'JARCHIVED',	'JUNARCHIVE'),			-2	=> array('trash.png',		'links.publish',		'JTRASHED',	'COM_REDIRECT_ENABLE_LINK'),		);		$state	= JArrayHelper::getValue($states, (int) $value, $states[0]);		$html	= JHtml::_('image', 'admin/'.$state[0], JText::_($state[2]), null, true);		if ($canChange)		{			$html	= '<a href="#" onclick="return listItemTask(\'cb'.$i.'\',\''.$state[1].'\')" title="'.JText::_($state[3]).'">'					. $html.'</a>';		}		return $html;	}}
<?php/** * @package     Joomla.Site * @subpackage  mod_articles_category * * @copyright   Copyright (C) 2005 - 2013 Open Source Matters, Inc. All rights reserved. * @license     GNU General Public License version 2 or later; see LICENSE.txt */defined('_JEXEC') or die;// Include the helper functions only oncerequire_once __DIR__ . '/helper.php';$input = JFactory::getApplication()->input;		// Prep for Normal or Dynamic Modes		$mode = $params->get('mode', 'normal');		$idbase = null;		switch($mode)		{			case 'dynamic':				$option = $input->get('option');				$view = $input->get('view');				if ($option === 'com_content')				{					switch($view)					{						case 'category':							$idbase = $input->getInt('id');							break;						case 'categories':							$idbase = $input->getInt('id');							break;						case 'article':							if ($params->get('show_on_article_page', 1))							{								$idbase = $input->getInt('catid');							}							break;					}				}				break;			case 'normal':			default:				$idbase = $params->get('catid');				break;		}$cacheid = md5(serialize(array ($idbase, $module->module)));$cacheparams = new stdClass;$cacheparams->cachemode = 'id';$cacheparams->class = 'ModArticlesCategoryHelper';$cacheparams->method = 'getList';$cacheparams->methodparams = $params;$cacheparams->modeparams = $cacheid;$list = JModuleHelper::moduleCache($module, $params, $cacheparams);if (!empty($list)){	$grouped = false;	$article_grouping = $params->get('article_grouping', 'none');	$article_grouping_direction = $params->get('article_grouping_direction', 'ksort');	$moduleclass_sfx = htmlspecialchars($params->get('moduleclass_sfx'));	$item_heading = $params->get('item_heading');	if ($article_grouping !== 'none')	{		$grouped = true;		switch($article_grouping)		{			case 'year':			case 'month_year':				$list = ModArticlesCategoryHelper::groupByDate($list, $article_grouping, $article_grouping_direction, $params->get('month_year_format', 'F Y'));				break;			case 'author':			case 'category_title':				$list = ModArticlesCategoryHelper::groupBy($list, $article_grouping, $article_grouping_direction);				break;			default:				break;		}	}	require JModuleHelper::getLayoutPath('mod_articles_category', $params->get('layout', 'default'));}
<?php/** * Squiz_Sniffs_Strings_ConcatenationSpacingSniff. * * PHP version 5 * * @category  PHP * @package   PHP_CodeSniffer * @author    Greg Sherwood <gsherwood@squiz.net> * @author    Marc McIntyre <mmcintyre@squiz.net> * @copyright 2006 Squiz Pty Ltd (ABN 77 084 670 600) * @license   http://matrix.squiz.net/developer/tools/php_cs/licence BSD Licence * @version   CVS: $Id: ConcatenationSpacingSniff.php 151 2010-11-26 01:07:46Z elkuku $ * @link      http://pear.php.net/package/PHP_CodeSniffer *//** * Makes sure there are is a spaces between the concatenation operator <b>.</b> and the strings being concatenated. * * Example: * <b class="bad">$a = $b.$c;</b> * <b class="good">$a = $b . $c;</b> * * @category  PHP * @package   PHP_CodeSniffer * @author    Greg Sherwood <gsherwood@squiz.net> * @author    Marc McIntyre <mmcintyre@squiz.net> * @copyright 2006 Squiz Pty Ltd (ABN 77 084 670 600) * @license   http://matrix.squiz.net/developer/tools/php_cs/licence BSD Licence * @version   Release: 1.3.0RC1 * @link      http://pear.php.net/package/PHP_CodeSniffer */class Joomla_Sniffs_WhiteSpace_ConcatenationSpacingSniff implements PHP_CodeSniffer_Sniff{	/**	 * Returns an array of tokens this test wants to listen for.	 *	 * @return array	 */	public function register()	{		return array(T_STRING_CONCAT);	}//function	/**	 * Processes this test, when one of its tokens is encountered.	 *	 * @param PHP_CodeSniffer_File $phpcsFile The file being scanned.	 * @param integer $stackPtr The position of the current token in the	 *                                        stack passed in $tokens.	 *	 * @return void	 */	public function process(PHP_CodeSniffer_File $phpcsFile, $stackPtr)	{		$tokens = $phpcsFile->getTokens();		if ($tokens[($stackPtr + 1)]['code'] != T_WHITESPACE)		{			// space after			$message = 'Concat operator must be followed by one space';			$phpcsFile->addError($message, $stackPtr, 'Missing');		}		else		{			$found = strlen($tokens[($stackPtr + 1)]['content']);			if ($found > 1)			{				$error = sprintf('Expected 1 space after concat operator; %s found', $found);				$phpcsFile->addError($error, $stackPtr, 'Too much');			}		}		if ($tokens[($stackPtr - 1)]['code'] != T_WHITESPACE)		{			// space before			$message = 'Concat operator must be preceeded by one space';			$phpcsFile->addError($message, $stackPtr, 'Missing');		}		else		{			if (strpos($tokens[($stackPtr - 2)]['content'], $phpcsFile->eolChar) !== false			|| strpos($tokens[($stackPtr - 1)]['content'], $phpcsFile->eolChar) !== false)			{				// the dot is on a new line				return;			}			$found = strlen($tokens[($stackPtr - 1)]['content']);			if ($found > 1)			{				$error = sprintf('Expected 1 space before concat operator; %s found', $found);				$phpcsFile->addError($error, $stackPtr, 'Too much');			}		}	}//function}//class
<?php/** * @package     Joomla.Platform * @subpackage  Log * * @copyright   Copyright (C) 2005 - 2013 Open Source Matters, Inc. All rights reserved. * @license     GNU General Public License version 2 or later; see LICENSE */defined('JPATH_PLATFORM') or die;/** * Joomla! Log Entry class * * This class is designed to hold log entries for either writing to an engine, or for * supported engines, retrieving lists and building in memory (PHP based) search operations. * * @package     Joomla.Platform * @subpackage  Log * @since       11.1 */class JLogEntry{	/**	 * Application responsible for log entry.	 * @var    string	 * @since  11.1	 */	public $category;	/**	 * The date the message was logged.	 * @var    JDate	 * @since  11.1	 */	public $date;	/**	 * Message to be logged.	 * @var    string	 * @since  11.1	 */	public $message;	/**	 * The priority of the message to be logged.	 * @var    string	 * @since  11.1	 * @see    $priorities	 */	public $priority = JLog::INFO;	/**	 * List of available log priority levels [Based on the Syslog default levels].	 * @var    array	 * @since  11.1	 */	protected $priorities = array(		JLog::EMERGENCY,		JLog::ALERT,		JLog::CRITICAL,		JLog::ERROR,		JLog::WARNING,		JLog::NOTICE,		JLog::INFO,		JLog::DEBUG	);	/**	 * Constructor	 *	 * @param   string  $message   The message to log.	 * @param   string  $priority  Message priority based on {$this->priorities}.	 * @param   string  $category  Type of entry	 * @param   string  $date      Date of entry (defaults to now if not specified or blank)	 *	 * @since   11.1	 */	public function __construct($message, $priority = JLog::INFO, $category = '', $date = null)	{		$this->message = (string) $message;		// Sanitize the priority.		if (!in_array($priority, $this->priorities, true))		{			$priority = JLog::INFO;		}		$this->priority = $priority;		// Sanitize category if it exists.		if (!empty($category))		{			$this->category = (string) strtolower(preg_replace('/[^A-Z0-9_\.-]/i', '', $category));		}		// Get the date as a JDate object.		$this->date = new JDate($date ? $date : 'now');	}}
<?php/** * @package     Joomla.Administrator * @subpackage  com_installer * * @copyright   Copyright (C) 2005 - 2013 Open Source Matters, Inc. All rights reserved. * @license     GNU General Public License version 2 or later; see LICENSE.txt */defined('_JEXEC') or die;?><div id="installer-warnings">	<form action="<?php echo JRoute::_('index.php?option=com_installer&view=warnings');?>" method="post" name="adminForm" id="adminForm">	<?php if (!empty( $this->sidebar)) : ?>		<div id="j-sidebar-container" class="span2">			<?php echo $this->sidebar; ?>		</div>		<div id="j-main-container" class="span10">	<?php else : ?>		<div id="j-main-container">	<?php endif;?>	<?php		if (!count($this->messages))		{			echo '<div class="alert alert-info"><a class="close" data-dismiss="alert" href="#">&times;</a>'. JText::_('COM_INSTALLER_MSG_WARNINGS_NONE').'</div>';		}		else		{			echo JHtml::_('sliders.start', 'warning-sliders', array('useCookie' => 1));			foreach($this->messages as $message)			{				echo JHtml::_('sliders.panel', $message['message'], str_replace(' ', '', $message['message']));				echo '<div style="padding: 5px;" >'.$message['description'].'</div>';			}			echo JHtml::_('sliders.panel', JText::_('COM_INSTALLER_MSG_WARNINGFURTHERINFO'), 'furtherinfo-pane');			echo '<div style="padding: 5px;" >'. JText::_('COM_INSTALLER_MSG_WARNINGFURTHERINFODESC') .'</div>';			echo JHtml::_('sliders.end');		}		?>			<div class="clr"> </div>			<div>				<input type="hidden" name="boxchecked" value="0" />				<?php echo JHtml::_('form.token'); ?>			</div>		</div>	</form></div>
<?php/** * @package     Joomla.Site * @subpackage  com_search * * @copyright   Copyright (C) 2005 - 2013 Open Source Matters, Inc. All rights reserved. * @license     GNU General Public License version 2 or later; see LICENSE.txt */defined('_JEXEC') or die;?><dl class="search-results<?php echo $this->pageclass_sfx; ?>"><?php foreach ($this->results as $result) : ?>	<dt class="result-title">		<?php echo $this->pagination->limitstart + $result->count.'. ';?>		<?php if ($result->href) :?>			<a href="<?php echo JRoute::_($result->href); ?>"<?php if ($result->browsernav == 1) :?> target="_blank"<?php endif;?>>				<?php echo $this->escape($result->title);?>			</a>		<?php else:?>			<?php echo $this->escape($result->title);?>		<?php endif; ?>	</dt>	<?php if ($result->section) : ?>		<dd class="result-category">			<span class="small<?php echo $this->pageclass_sfx; ?>">				(<?php echo $this->escape($result->section); ?>)			</span>		</dd>	<?php endif; ?>	<dd class="result-text">		<?php echo $result->text; ?>	</dd>	<?php if ($this->params->get('show_date')) : ?>		<dd class="result-created<?php echo $this->pageclass_sfx; ?>">			<?php echo JText::sprintf('JGLOBAL_CREATED_DATE_ON', $result->created); ?>		</dd>	<?php endif; ?><?php endforeach; ?></dl><div class="pagination">	<?php echo $this->pagination->getPagesLinks(); ?></div>
<?php/** * @package     Joomla.Platform * @subpackage  GitHub * * @copyright   Copyright (C) 2005 - 2013 Open Source Matters, Inc. All rights reserved * @license     GNU General Public License version 2 or later; see LICENSE */defined('JPATH_PLATFORM') or die;/** * GitHub API Issues class for the Joomla Platform. * * @package     Joomla.Platform * @subpackage  GitHub * @since       11.3 */class JGithubIssues extends JGithubObject{	/**	 * Method to create an issue.	 *	 * @param   string   $user       The name of the owner of the GitHub repository.	 * @param   string   $repo       The name of the GitHub repository.	 * @param   string   $title      The title of the new issue.	 * @param   string   $body       The body text for the new issue.	 * @param   string   $assignee   The login for the GitHub user that this issue should be assigned to.	 * @param   integer  $milestone  The milestone to associate this issue with.	 * @param   array    $labels     The labels to associate with this issue.	 *	 * @return  object	 *	 * @since   11.3	 */	public function create($user, $repo, $title, $body = null, $assignee = null, $milestone = null, array $labels = null)	{		// Build the request path.		$path = '/repos/' . $user . '/' . $repo . '/issues';		// Ensure that we have a non-associative array.		if (isset($labels))		{			$labels = array_values($labels);		}		// Build the request data.		$data = json_encode(			array(				'title' => $title,				'assignee' => $assignee,				'milestone' => $milestone,				'labels' => $labels,				'body' => $body			)		);		// Send the request.		$response = $this->client->post($this->fetchUrl($path), $data);		// Validate the response code.		if ($response->code != 201)		{			// Decode the error response and throw an exception.			$error = json_decode($response->body);			throw new DomainException($error->message, $response->code);		}		return json_decode($response->body);	}	/**	 * Method to create a comment on an issue.	 *	 * @param   string   $user     The name of the owner of the GitHub repository.	 * @param   string   $repo     The name of the GitHub repository.	 * @param   integer  $issueId  The issue number.	 * @param   string   $body     The comment body text.	 *	 * @return  object	 *	 * @since   11.3	 */	public function createComment($user, $repo, $issueId, $body)	{		// Build the request path.		$path = '/repos/' . $user . '/' . $repo . '/issues/' . (int) $issueId . '/comments';		// Build the request data.		$data = json_encode(			array(				'body' => $body,			)		);		// Send the request.		$response = $this->client->post($this->fetchUrl($path), $data);		// Validate the response code.		if ($response->code != 201)		{			// Decode the error response and throw an exception.			$error = json_decode($response->body);			throw new DomainException($error->message, $response->code);		}		return json_decode($response->body);	}	/**	 * Method to create a label on a repo.	 *	 * @param   string  $user   The name of the owner of the GitHub repository.	 * @param   string  $repo   The name of the GitHub repository.	 * @param   string  $name   The label name.	 * @param   string  $color  The label color.	 *	 * @return  object	 *	 * @since   12.3	 */	public function createLabel($user, $repo, $name, $color)	{		// Build the request path.		$path = '/repos/' . $user . '/' . $repo . '/labels';		// Build the request data.		$data = json_encode(			array(				'name' => $name,				'color' => $color			)		);		// Send the request.		$response = $this->client->post($this->fetchUrl($path), $data);		// Validate the response code.		if ($response->code != 201)		{			// Decode the error response and throw an exception.			$error = json_decode($response->body);			throw new DomainException($error->message, $response->code);		}		return json_decode($response->body);	}	/**	 * Method to delete a comment on an issue.	 *	 * @param   string   $user       The name of the owner of the GitHub repository.	 * @param   string   $repo       The name of the GitHub repository.	 * @param   integer  $commentId  The id of the comment to delete.	 *	 * @return  void	 *	 * @since   11.3	 */	public function deleteComment($user, $repo, $commentId)	{		// Build the request path.		$path = '/repos/' . $user . '/' . $repo . '/issues/comments/' . (int) $commentId;		// Send the request.		$response = $this->client->delete($this->fetchUrl($path));		// Validate the response code.		if ($response->code != 204)		{			// Decode the error response and throw an exception.			$error = json_decode($response->body);			throw new DomainException($error->message, $response->code);		}	}	/**	 * Method to delete a label on a repo.	 *	 * @param   string  $user   The name of the owner of the GitHub repository.	 * @param   string  $repo   The name of the GitHub repository.	 * @param   string  $label  The label name.	 *	 * @return  object	 *	 * @since   12.3	 */	public function deleteLabel($user, $repo, $label)	{		// Build the request path.		$path = '/repos/' . $user . '/' . $repo . '/labels/' . $label;		// Send the request.		$response = $this->client->delete($this->fetchUrl($path));		// Validate the response code.		if ($response->code != 204)		{			// Decode the error response and throw an exception.			$error = json_decode($response->body);			throw new DomainException($error->message, $response->code);		}	}	/**	 * Method to update an issue.	 *	 * @param   string   $user       The name of the owner of the GitHub repository.	 * @param   string   $repo       The name of the GitHub repository.	 * @param   integer  $issueId    The issue number.	 * @param   string   $state      The optional new state for the issue. [open, closed]	 * @param   string   $title      The title of the new issue.	 * @param   string   $body       The body text for the new issue.	 * @param   string   $assignee   The login for the GitHub user that this issue should be assigned to.	 * @param   integer  $milestone  The milestone to associate this issue with.	 * @param   array    $labels     The labels to associate with this issue.	 *	 * @return  object	 *	 * @since   11.3	 */	public function edit($user, $repo, $issueId, $state = null, $title = null, $body = null, $assignee = null, $milestone = null, array $labels = null)	{		// Build the request path.		$path = '/repos/' . $user . '/' . $repo . '/issues/' . (int) $issueId;		// Craete the data object.		$data = new stdClass;		// If a title is set add it to the data object.		if (isset($title))		{			$data->title = $title;		}		// If a body is set add it to the data object.		if (isset($body))		{			$data->body = $body;		}		// If a state is set add it to the data object.		if (isset($state))		{			$data->state = $state;		}		// If an assignee is set add it to the data object.		if (isset($assignee))		{			$data->assignee = $assignee;		}		// If a milestone is set add it to the data object.		if (isset($milestone))		{			$data->milestone = $milestone;		}		// If labels are set add them to the data object.		if (isset($labels))		{			// Ensure that we have a non-associative array.			if (isset($labels))			{				$labels = array_values($labels);			}			$data->labels = $labels;		}		// Encode the request data.		$data = json_encode($data);		// Send the request.		$response = $this->client->patch($this->fetchUrl($path), $data);		// Validate the response code.		if ($response->code != 200)		{			// Decode the error response and throw an exception.			$error = json_decode($response->body);			throw new DomainException($error->message, $response->code);		}		return json_decode($response->body);	}	/**	 * Method to update a comment on an issue.	 *	 * @param   string   $user       The name of the owner of the GitHub repository.	 * @param   string   $repo       The name of the GitHub repository.	 * @param   integer  $commentId  The id of the comment to update.	 * @param   string   $body       The new body text for the comment.	 *	 * @return  object	 *	 * @since   11.3	 */	public function editComment($user, $repo, $commentId, $body)	{		// Build the request path.		$path = '/repos/' . $user . '/' . $repo . '/issues/comments/' . (int) $commentId;		// Build the request data.		$data = json_encode(			array(				'body' => $body			)		);		// Send the request.		$response = $this->client->patch($this->fetchUrl($path), $data);		// Validate the response code.		if ($response->code != 200)		{			// Decode the error response and throw an exception.			$error = json_decode($response->body);			throw new DomainException($error->message, $response->code);		}		return json_decode($response->body);	}	/**	 * Method to update a label on a repo.	 *	 * @param   string  $user   The name of the owner of the GitHub repository.	 * @param   string  $repo   The name of the GitHub repository.	 * @param   string  $label  The label name.	 * @param   string  $name   The label name.	 * @param   string  $color  The label color.	 *	 * @return  object	 *	 * @since   12.3	 */	public function editLabel($user, $repo, $label, $name, $color)	{		// Build the request path.		$path = '/repos/' . $user . '/' . $repo . '/labels/' . $label;		// Build the request data.		$data = json_encode(			array(				'name' => $name,				'color' => $color			)		);		// Send the request.		$response = $this->client->patch($this->fetchUrl($path), $data);		// Validate the response code.		if ($response->code != 200)		{			// Decode the error response and throw an exception.			$error = json_decode($response->body);			throw new DomainException($error->message, $response->code);		}		return json_decode($response->body);	}	/**	 * Method to get a single issue.	 *	 * @param   string   $user     The name of the owner of the GitHub repository.	 * @param   string   $repo     The name of the GitHub repository.	 * @param   integer  $issueId  The issue number.	 *	 * @return  object	 *	 * @since   11.3	 */	public function get($user, $repo, $issueId)	{		// Build the request path.		$path = '/repos/' . $user . '/' . $repo . '/issues/' . (int) $issueId;		// Send the request.		$response = $this->client->get($this->fetchUrl($path));		// Validate the response code.		if ($response->code != 200)		{			// Decode the error response and throw an exception.			$error = json_decode($response->body);			throw new DomainException($error->message, $response->code);		}		return json_decode($response->body);	}	/**	 * Method to get a specific comment on an issue.	 *	 * @param   string   $user       The name of the owner of the GitHub repository.	 * @param   string   $repo       The name of the GitHub repository.	 * @param   integer  $commentId  The comment id to get.	 *	 * @return  object	 *	 * @since   11.3	 */	public function getComment($user, $repo, $commentId)	{		// Build the request path.		$path = '/repos/' . $user . '/' . $repo . '/issues/comments/' . (int) $commentId;		// Send the request.		$response = $this->client->get($this->fetchUrl($path));		// Validate the response code.		if ($response->code != 200)		{			// Decode the error response and throw an exception.			$error = json_decode($response->body);			throw new DomainException($error->message, $response->code);		}		return json_decode($response->body);	}	/**	 * Method to get the list of comments on an issue.	 *	 * @param   string   $user     The name of the owner of the GitHub repository.	 * @param   string   $repo     The name of the GitHub repository.	 * @param   integer  $issueId  The issue number.	 * @param   integer  $page     The page number from which to get items.	 * @param   integer  $limit    The number of items on a page.	 *	 * @return  array	 *	 * @since   11.3	 */	public function getComments($user, $repo, $issueId, $page = 0, $limit = 0)	{		// Build the request path.		$path = '/repos/' . $user . '/' . $repo . '/issues/' . (int) $issueId . '/comments';		// Send the request.		$response = $this->client->get($this->fetchUrl($path, $page, $limit));		// Validate the response code.		if ($response->code != 200)		{			// Decode the error response and throw an exception.			$error = json_decode($response->body);			throw new DomainException($error->message, $response->code);		}		return json_decode($response->body);	}	/**	 * Method to get a specific label on a repo.	 *	 * @param   string  $user  The name of the owner of the GitHub repository.	 * @param   string  $repo  The name of the GitHub repository.	 * @param   string  $name  The label name to get.	 *	 * @return  object	 *	 * @since   12.3	 */	public function getLabel($user, $repo, $name)	{		// Build the request path.		$path = '/repos/' . $user . '/' . $repo . '/labels/' . $name;		// Send the request.		$response = $this->client->get($this->fetchUrl($path));		// Validate the response code.		if ($response->code != 200)		{			// Decode the error response and throw an exception.			$error = json_decode($response->body);			throw new DomainException($error->message, $response->code);		}		return json_decode($response->body);	}	/**	 * Method to get the list of labels on a repo.	 *	 * @param   string  $user  The name of the owner of the GitHub repository.	 * @param   string  $repo  The name of the GitHub repository.	 *	 * @return  array	 *	 * @since   12.3	 */	public function getLabels($user, $repo)	{		// Build the request path.		$path = '/repos/' . $user . '/' . $repo . '/labels';		// Send the request.		$response = $this->client->get($this->fetchUrl($path));		// Validate the response code.		if ($response->code != 200)		{			// Decode the error response and throw an exception.			$error = json_decode($response->body);			throw new DomainException($error->message, $response->code);		}		return json_decode($response->body);	}	/**	 * Method to list an authenticated user's issues.	 *	 * @param   string   $filter     The filter type: assigned, created, mentioned, subscribed.	 * @param   string   $state      The optional state to filter requests by. [open, closed]	 * @param   string   $labels     The list of comma separated Label names. Example: bug,ui,@high.	 * @param   string   $sort       The sort order: created, updated, comments, default: created.	 * @param   string   $direction  The list direction: asc or desc, default: desc.	 * @param   JDate    $since      The date/time since when issues should be returned.	 * @param   integer  $page       The page number from which to get items.	 * @param   integer  $limit      The number of items on a page.	 *	 * @return  array	 *	 * @since   11.3	 */	public function getList($filter = null, $state = null, $labels = null, $sort = null, $direction = null, JDate $since = null, $page = 0, $limit = 0)	{		// Build the request path.		$path = '/issues';		// TODO Implement the filtering options.		// Send the request.		$response = $this->client->get($this->fetchUrl($path, $page, $limit));		// Validate the response code.		if ($response->code != 200)		{			// Decode the error response and throw an exception.			$error = json_decode($response->body);			throw new DomainException($error->message, $response->code);		}		return json_decode($response->body);	}	/**	 * Method to list issues.	 *	 * @param   string   $user       The name of the owner of the GitHub repository.	 * @param   string   $repo       The name of the GitHub repository.	 * @param   string   $milestone  The milestone number, 'none', or *.	 * @param   string   $state      The optional state to filter requests by. [open, closed]	 * @param   string   $assignee   The assignee name, 'none', or *.	 * @param   string   $mentioned  The GitHub user name.	 * @param   string   $labels     The list of comma separated Label names. Example: bug,ui,@high.	 * @param   string   $sort       The sort order: created, updated, comments, default: created.	 * @param   string   $direction  The list direction: asc or desc, default: desc.	 * @param   JDate    $since      The date/time since when issues should be returned.	 * @param   integer  $page       The page number from which to get items.	 * @param   integer  $limit      The number of items on a page.	 *	 * @return  array	 *	 * @since   11.3	 */	public function getListByRepository($user, $repo, $milestone = null, $state = null, $assignee = null, $mentioned = null, $labels = null,		$sort = null, $direction = null, JDate $since = null, $page = 0, $limit = 0)	{		// Build the request path.		$path = '/repos/' . $user . '/' . $repo . '/issues';		$uri = new JUri($this->fetchUrl($path, $page, $limit));		if ($milestone)		{			$uri->setVar('milestone', $milestone);		}		if ($state)		{			$uri->setVar('state', $state);		}		if ($assignee)		{			$uri->setVar('assignee', $assignee);		}		if ($mentioned)		{			$uri->setVar('mentioned', $mentioned);		}		if ($labels)		{			$uri->setVar('labels', $labels);		}		if ($sort)		{			$uri->setVar('sort', $sort);		}		if ($direction)		{			$uri->setVar('direction', $direction);		}		if ($since)		{			$uri->setVar('since', $since->toISO8601());		}		// Send the request.		$response = $this->client->get((string) $uri);		// Validate the response code.		if ($response->code != 200)		{			// Decode the error response and throw an exception.			$error = json_decode($response->body);			throw new DomainException($error->message, $response->code);		}		return json_decode($response->body);	}}
<?php/** * @package     Joomla.Platform * @subpackage  FileSystem * * @copyright   Copyright (C) 2005 - 2013 Open Source Matters, Inc. All rights reserved. * @license     GNU General Public License version 2 or later; see LICENSE */defined('JPATH_PLATFORM') or die;/** * File system helper * * Holds support functions for the filesystem, particularly the stream * * @package     Joomla.Platform * @subpackage  FileSystem * @since       11.1 */class JFilesystemHelper{	/**	 * Remote file size function for streams that don't support it	 *	 * @param   string  $url  TODO Add text	 *	 * @return  mixed	 *	 * @see     http://www.php.net/manual/en/function.filesize.php#71098	 * @since   11.1	 */	public static function remotefsize($url)	{		$sch = parse_url($url, PHP_URL_SCHEME);		if (($sch != 'http') && ($sch != 'https') && ($sch != 'ftp') && ($sch != 'ftps'))		{			return false;		}		if (($sch == 'http') || ($sch == 'https'))		{			$headers = get_headers($url, 1);			if ((!array_key_exists('Content-Length', $headers)))			{				return false;			}			return $headers['Content-Length'];		}		if (($sch == 'ftp') || ($sch == 'ftps'))		{			$server = parse_url($url, PHP_URL_HOST);			$port = parse_url($url, PHP_URL_PORT);			$path = parse_url($url, PHP_URL_PATH);			$user = parse_url($url, PHP_URL_USER);			$pass = parse_url($url, PHP_URL_PASS);			if ((!$server) || (!$path))			{				return false;			}			if (!$port)			{				$port = 21;			}			if (!$user)			{				$user = 'anonymous';			}			if (!$pass)			{				$pass = '';			}			switch ($sch)			{				case 'ftp':					$ftpid = ftp_connect($server, $port);					break;				case 'ftps':					$ftpid = ftp_ssl_connect($server, $port);					break;			}			if (!$ftpid)			{				return false;			}			$login = ftp_login($ftpid, $user, $pass);			if (!$login)			{				return false;			}			$ftpsize = ftp_size($ftpid, $path);			ftp_close($ftpid);			if ($ftpsize == -1)			{				return false;			}			return $ftpsize;		}	}	/**	 * Quick FTP chmod	 *	 * @param   string   $url   Link identifier	 * @param   integer  $mode  The new permissions, given as an octal value.	 *	 * @return  mixed	 *	 * @see     http://www.php.net/manual/en/function.ftp-chmod.php	 * @since   11.1	 */	public static function ftpChmod($url, $mode)	{		$sch = parse_url($url, PHP_URL_SCHEME);		if (($sch != 'ftp') && ($sch != 'ftps'))		{			return false;		}		$server = parse_url($url, PHP_URL_HOST);		$port = parse_url($url, PHP_URL_PORT);		$path = parse_url($url, PHP_URL_PATH);		$user = parse_url($url, PHP_URL_USER);		$pass = parse_url($url, PHP_URL_PASS);		if ((!$server) || (!$path))		{			return false;		}		if (!$port)		{			$port = 21;		}		if (!$user)		{			$user = 'anonymous';		}		if (!$pass)		{			$pass = '';		}		switch ($sch)		{			case 'ftp':				$ftpid = ftp_connect($server, $port);				break;			case 'ftps':				$ftpid = ftp_ssl_connect($server, $port);				break;		}		if (!$ftpid)		{			return false;		}		$login = ftp_login($ftpid, $user, $pass);		if (!$login)		{			return false;		}		$res = ftp_chmod($ftpid, $mode, $path);		ftp_close($ftpid);		return $res;	}	/**	 * Modes that require a write operation	 *	 * @return  array	 *	 * @since   11.1	 */	public static function getWriteModes()	{		return array('w', 'w+', 'a', 'a+', 'r+', 'x', 'x+');	}	/**	 * Stream and Filter Support Operations	 *	 * Returns the supported streams, in addition to direct file access	 * Also includes Joomla! streams as well as PHP streams	 *	 * @return  array  Streams	 *	 * @since   11.1	 */	public static function getSupported()	{		// Really quite cool what php can do with arrays when you let it...		static $streams;		if (!$streams)		{			$streams = array_merge(stream_get_wrappers(), self::getJStreams());		}		return $streams;	}	/**	 * Returns a list of transports	 *	 * @return  array	 *	 * @since   11.1	 */	public static function getTransports()	{		// Is this overkill?		return stream_get_transports();	}	/**	 * Returns a list of filters	 *	 * @return  array	 *	 * @since   11.1	 */	public static function getFilters()	{		// Note: This will look like the getSupported() function with J! filters.		// TODO: add user space filter loading like user space stream loading		return stream_get_filters();	}	/**	 * Returns a list of J! streams	 *	 * @return  array	 *	 * @since   11.1	 */	public static function getJStreams()	{		static $streams = array();		if (!$streams)		{			$files = new DirectoryIterator(__DIR__ . '/streams');			foreach ($files as $file)			{				$filename = $file->getFilename();				// Only load for php files.				// Note: DirectoryIterator::getExtension only available PHP >= 5.3.6				if (!$file->isFile() || substr($filename, strrpos($filename, '.') + 1) != 'php')				{					continue;				}				$streams[] = $file->getBasename('.php');			}		}		return $streams;	}	/**	 * Determine if a stream is a Joomla stream.	 *	 * @param   string  $streamname  The name of a stream	 *	 * @return  boolean  True for a Joomla Stream	 *	 * @since   11.1	 */	public static function isJoomlaStream($streamname)	{		return in_array($streamname, self::getJStreams());	}}
<?php/** * @package     Joomla.Platform * @subpackage  GitHub * * @copyright   Copyright (C) 2005 - 2013 Open Source Matters, Inc. All rights reserved. * @license     GNU General Public License version 2 or later; see LICENSE */defined('JPATH_PLATFORM') or die;/** * GitHub API References class for the Joomla Platform. * * @package     Joomla.Platform * @subpackage  GitHub * @since       11.3 */class JGithubRefs extends JGithubObject{	/**	 * Method to create an issue.	 *	 * @param   string  $user  The name of the owner of the GitHub repository.	 * @param   string  $repo  The name of the GitHub repository.	 * @param   string  $ref   The name of the fully qualified reference.	 * @param   string  $sha   The SHA1 value to set this reference to.	 *	 * @return  object	 *	 * @since   11.3	 */	public function create($user, $repo, $ref, $sha)	{		// Build the request path.		$path = '/repos/' . $user . '/' . $repo . '/git/refs';		// Build the request data.		$data = json_encode(			array(				'ref' => $ref,				'sha' => $sha			)		);		// Send the request.		$response = $this->client->post($this->fetchUrl($path), $data);		// Validate the response code.		if ($response->code != 201)		{			// Decode the error response and throw an exception.			$error = json_decode($response->body);			throw new DomainException($error->message, $response->code);		}		return json_decode($response->body);	}	/**	 * Method to update a reference.	 *	 * @param   string  $user   The name of the owner of the GitHub repository.	 * @param   string  $repo   The name of the GitHub repository.	 * @param   string  $ref    The reference to update.	 * @param   string  $sha    The SHA1 value to set the reference to.	 * @param   string  $force  Whether the update should be forced. Default to false.	 *	 * @return  object	 *	 * @since   11.3	 */	public function edit($user, $repo, $ref, $sha, $force = false)	{		// Build the request path.		$path = '/repos/' . $user . '/' . $repo . '/git/refs/' . $ref;		// Craete the data object.		$data = new stdClass;		// If a title is set add it to the data object.		if ($force)		{			$data->force = true;		}		$data->sha = $sha;		// Encode the request data.		$data = json_encode($data);		// Send the request.		$response = $this->client->patch($this->fetchUrl($path), $data);		// Validate the response code.		if ($response->code != 200)		{			// Decode the error response and throw an exception.			$error = json_decode($response->body);			throw new DomainException($error->message, $response->code);		}		return json_decode($response->body);	}	/**	 * Method to get a reference.	 *	 * @param   string  $user  The name of the owner of the GitHub repository.	 * @param   string  $repo  The name of the GitHub repository.	 * @param   string  $ref   The reference to get.	 *	 * @return  object	 *	 * @since   11.3	 */	public function get($user, $repo, $ref)	{		// Build the request path.		$path = '/repos/' . $user . '/' . $repo . '/git/refs/' . $ref;		// Send the request.		$response = $this->client->get($this->fetchUrl($path));		// Validate the response code.		if ($response->code != 200)		{			// Decode the error response and throw an exception.			$error = json_decode($response->body);			throw new DomainException($error->message, $response->code);		}		return json_decode($response->body);	}	/**	 * Method to list references for a repository.	 *	 * @param   string   $user       The name of the owner of the GitHub repository.	 * @param   string   $repo       The name of the GitHub repository.	 * @param   string   $namespace  Optional sub-namespace to limit the returned references.	 * @param   integer  $page       Page to request	 * @param   integer  $limit      Number of results to return per page	 *	 * @return  array	 *	 * @since   11.3	 */	public function getList($user, $repo, $namespace = '', $page = 0, $limit = 0)	{		// Build the request path.		$path = '/repos/' . $user . '/' . $repo . '/git/refs' . $namespace;		// Send the request.		$response = $this->client->get($this->fetchUrl($path, $page, $limit));		// Validate the response code.		if ($response->code != 200)		{			// Decode the error response and throw an exception.			$error = json_decode($response->body);			throw new DomainException($error->message, $response->code);		}		return json_decode($response->body);	}}
<?php/** * @package     Joomla.Administrator * @subpackage  com_redirect * * @copyright   Copyright (C) 2005 - 2013 Open Source Matters, Inc. All rights reserved. * @license     GNU General Public License version 2 or later; see LICENSE.txt */defined('_JEXEC') or die;/** * Redirect link controller class. * * @package     Joomla.Administrator * @subpackage  com_redirect * @since       1.6 */class RedirectControllerLink extends JControllerForm{	// Parent class access checks are sufficient for this controller.}
<?php/*** @version $Id$* @package utf8* @subpackage strings*///---------------------------------------------------------------/*** UTF-8 aware alternative to ord* Returns the unicode ordinal for a character* @param string UTF-8 encoded character* @return int unicode ordinal for the character* @see http://www.php.net/ord* @see http://www.php.net/manual/en/function.ord.php#46267*/function utf8_ord($chr) {    $ord0 = ord($chr);    if ( $ord0 >= 0 && $ord0 <= 127 ) {        return $ord0;    }    if ( !isset($chr{1}) ) {        trigger_error('Short sequence - at least 2 bytes expected, only 1 seen');        return FALSE;    }    $ord1 = ord($chr{1});    if ( $ord0 >= 192 && $ord0 <= 223 ) {        return ( $ord0 - 192 ) * 64            + ( $ord1 - 128 );    }    if ( !isset($chr{2}) ) {        trigger_error('Short sequence - at least 3 bytes expected, only 2 seen');        return FALSE;    }    $ord2 = ord($chr{2});    if ( $ord0 >= 224 && $ord0 <= 239 ) {        return ($ord0-224)*4096            + ($ord1-128)*64                + ($ord2-128);    }    if ( !isset($chr{3}) ) {        trigger_error('Short sequence - at least 4 bytes expected, only 3 seen');        return FALSE;    }    $ord3 = ord($chr{3});    if ($ord0>=240 && $ord0<=247) {        return ($ord0-240)*262144            + ($ord1-128)*4096                + ($ord2-128)*64                    + ($ord3-128);    }    if ( !isset($chr{4}) ) {        trigger_error('Short sequence - at least 5 bytes expected, only 4 seen');        return FALSE;    }    $ord4 = ord($chr{4});    if ($ord0>=248 && $ord0<=251) {        return ($ord0-248)*16777216            + ($ord1-128)*262144                + ($ord2-128)*4096                    + ($ord3-128)*64                        + ($ord4-128);    }    if ( !isset($chr{5}) ) {        trigger_error('Short sequence - at least 6 bytes expected, only 5 seen');        return FALSE;    }    if ($ord0>=252 && $ord0<=253) {        return ($ord0-252) * 1073741824            + ($ord1-128)*16777216                + ($ord2-128)*262144                    + ($ord3-128)*4096                        + ($ord4-128)*64                            + (ord($chr{5})-128);    }    if ( $ord0 >= 254 && $ord0 <= 255 ) {        trigger_error('Invalid UTF-8 with surrogate ordinal '.$ord0);        return FALSE;    }}
<?php/** * @package     Joomla.Platform * @subpackage  Session * * @copyright   Copyright (C) 2005 - 2013 Open Source Matters, Inc. All rights reserved. * @license     GNU General Public License version 2 or later; see LICENSE */defined('JPATH_PLATFORM') or die;/** * File session handler for PHP * * @package     Joomla.Platform * @subpackage  Session * @see         http://www.php.net/manual/en/function.session-set-save-handler.php * @since       11.1 */class JSessionStorageNone extends JSessionStorage{	/**	 * Register the functions of this class with PHP's session handler	 *	 * @return  void	 *	 * @since   11.1	 */	public function register()	{		ini_set('session.save_handler', 'files');	}}
<?php/** * @package     Joomla.Platform * @subpackage  HTML * * @copyright   Copyright (C) 2005 - 2013 Open Source Matters, Inc. All rights reserved. * @license     GNU General Public License version 2 or later; see LICENSE */defined('JPATH_PLATFORM') or die;/** * Extended Utility class for handling date display. * * @package     Joomla.Platform * @subpackage  HTML * @since       11.3 */abstract class JHtmlDate{	/**	 * Function to convert a static time into a relative measurement	 *	 * @param   string  $date  The date to convert	 * @param   string  $unit  The optional unit of measurement to return	 *                         if the value of the diff is greater than one	 * @param   string  $time  An optional time to compare to, defaults to now	 *	 * @return  string  The converted time string	 *	 * @since   11.3	 */	public static function relative($date, $unit = null, $time = null)	{		if (is_null($time))		{			// Get now			$time = JFactory::getDate('now');		}		// Get the difference in seconds between now and the time		$diff = strtotime($time) - strtotime($date);		// Less than a minute		if ($diff < 60)		{			return JText::_('JLIB_HTML_DATE_RELATIVE_LESSTHANAMINUTE');		}		// Round to minutes		$diff = round($diff / 60);		// 1 to 59 minutes		if ($diff < 60 || $unit == 'minute')		{			return JText::plural('JLIB_HTML_DATE_RELATIVE_MINUTES', $diff);		}		// Round to hours		$diff = round($diff / 60);		// 1 to 23 hours		if ($diff < 24 || $unit == 'hour')		{			return JText::plural('JLIB_HTML_DATE_RELATIVE_HOURS', $diff);		}		// Round to days		$diff = round($diff / 24);		// 1 to 6 days		if ($diff < 7 || $unit == 'day')		{			return JText::plural('JLIB_HTML_DATE_RELATIVE_DAYS', $diff);		}		// Round to weeks		$diff = round($diff / 7);		// 1 to 4 weeks		if ($diff <= 4 || $unit == 'week')		{			return JText::plural('JLIB_HTML_DATE_RELATIVE_WEEKS', $diff);		}		// Over a month, return the absolute time		return JHtml::_('date', $date);	}}
<?php/** * @package     Joomla.Site * @subpackage  com_users * * @copyright   Copyright (C) 2005 - 2013 Open Source Matters, Inc. All rights reserved. * @license     GNU General Public License version 2 or later; see LICENSE.txt */defined('_JEXEC') or die;require_once JPATH_COMPONENT.'/helpers/route.php';$controller = JControllerLegacy::getInstance('Users');$controller->execute(JFactory::getApplication()->input->get('task', 'display'));$controller->redirect();
<?php/** * @package     Joomla.Installation * @subpackage  Controller * * @copyright   Copyright (C) 2005 - 2013 Open Source Matters, Inc. All rights reserved. * @license     GNU General Public License version 2 or later; see LICENSE.txt */defined('_JEXEC') or die;/** * Controller class to set the language for the Joomla Installer. * * @package     Joomla.Installation * @subpackage  Controller * @since       3.1 */class InstallationControllerSetlanguage extends JControllerBase{	/**	 * Execute the controller.	 *	 * @return  void	 *	 * @since   3.1	 */	public function execute()	{		// Get the application		/* @var InstallationApplicationWeb $app */		$app = $this->getApplication();		// Check for request forgeries.		JSession::checkToken() or $app->sendJsonResponse(new Exception(JText::_('JINVALID_TOKEN'), 403));		// Very crude workaround to give an error message when JSON is disabled		if (!function_exists('json_encode') || !function_exists('json_decode'))		{			$app->setHeader('status', 500);			$app->setHeader('Content-Type', 'application/json; charset=utf-8');			$app->sendHeaders();			echo '{"token":"' . JSession::getFormToken(true) . '","lang":"' . JFactory::getLanguage()->getTag()				. '","error":true,"header":"' . JText::_('INSTL_HEADER_ERROR') . '","message":"' . JText::_('INSTL_WARNJSON') . '"}';			$app->close();		}		// Check for potentially unwritable session		$session = JFactory::getSession();		if ($session->isNew())		{			$this->sendResponse(new Exception(JText::_('INSTL_COOKIES_NOT_ENABLED'), 500));		}		// Get the setup model.		$model = new InstallationModelSetup;		// Get the posted values from the request and validate them.		$data = $this->input->post->get('jform', array(), 'array');		$return	= $model->validate($data, 'preinstall');		$r = new stdClass;		// Check for validation errors.		if ($return === false)		{			/*			 * The validate method enqueued all messages for us, so we just need to			 * redirect back to the site setup screen.			 */			$r->view = $this->input->getWord('view', 'site');			$app->sendJsonResponse($r);		}		// Store the options in the session.		$model->storeOptions($return);		// Setup language		$language = JFactory::getLanguage();		$language->setLanguage($return['language']);		// Redirect to the page.		$r->view = $this->input->getWord('view', 'site');		$app->sendJsonResponse($r);	}}
