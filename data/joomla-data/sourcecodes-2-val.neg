<?php/** * @package     Joomla.Platform * @subpackage  Log * * @copyright   Copyright (C) 2005 - 2013 Open Source Matters, Inc. All rights reserved. * @license     GNU General Public License version 2 or later; see LICENSE */defined('JPATH_PLATFORM') or die;/** * Joomla! Log Class * * This class hooks into the global log configuration settings to allow for user configured * logging events to be sent to where the user wishes them to be sent. On high load sites * Syslog is probably the best (pure PHP function), then the text file based loggers (CSV, W3c * or plain Formattedtext) and finally MySQL offers the most features (e.g. rapid searching) * but will incur a performance hit due to INSERT being issued. * * @package     Joomla.Platform * @subpackage  Log * @since       11.1 */class JLog{	/**	 * All log priorities.	 * @var    integer	 * @since  11.1	 */	const ALL = 30719;	/**	 * The system is unusable.	 * @var    integer	 * @since  11.1	 */	const EMERGENCY = 1;	/**	 * Action must be taken immediately.	 * @var    integer	 * @since  11.1	 */	const ALERT = 2;	/**	 * Critical conditions.	 * @var    integer	 * @since  11.1	 */	const CRITICAL = 4;	/**	 * Error conditions.	 * @var    integer	 * @since  11.1	 */	const ERROR = 8;	/**	 * Warning conditions.	 * @var    integer	 * @since  11.1	 */	const WARNING = 16;	/**	 * Normal, but significant condition.	 * @var    integer	 * @since  11.1	 */	const NOTICE = 32;	/**	 * Informational message.	 * @var    integer	 * @since  11.1	 */	const INFO = 64;	/**	 * Debugging message.	 * @var    integer	 * @since  11.1	 */	const DEBUG = 128;	/**	 * The global JLog instance.	 * @var    JLog	 * @since  11.1	 */	protected static $instance;	/**	 * Container for JLogLogger configurations.	 * @var    array	 * @since  11.1	 */	protected $configurations = array();	/**	 * Container for JLogLogger objects.	 * @var    array	 * @since  11.1	 */	protected $loggers = array();	/**	 * Lookup array for loggers.	 * @var    array	 * @since  11.1	 */	protected $lookup = array();	/**	 * Constructor.	 *	 * @since   11.1	 */	protected function __construct()	{	}	/**	 * Method to add an entry to the log.	 *	 * @param   mixed    $entry     The JLogEntry object to add to the log or the message for a new JLogEntry object.	 * @param   integer  $priority  Message priority.	 * @param   string   $category  Type of entry	 * @param   string   $date      Date of entry (defaults to now if not specified or blank)	 *	 * @return  void	 *	 * @since   11.1	 */	public static function add($entry, $priority = self::INFO, $category = '', $date = null)	{		// Automatically instantiate the singleton object if not already done.		if (empty(self::$instance))		{			self::setInstance(new JLog);		}		// If the entry object isn't a JLogEntry object let's make one.		if (!($entry instanceof JLogEntry))		{			$entry = new JLogEntry((string) $entry, $priority, $category, $date);		}		self::$instance->addLogEntry($entry);	}	/**	 * Add a logger to the JLog instance.  Loggers route log entries to the correct files/systems to be logged.	 *	 * @param   array    $options     The object configuration array.	 * @param   integer  $priorities  Message priority	 * @param   array    $categories  Types of entry	 *	 * @return  void	 *	 * @since   11.1	 */	public static function addLogger(array $options, $priorities = self::ALL, $categories = array())	{		// Automatically instantiate the singleton object if not already done.		if (empty(self::$instance))		{			self::setInstance(new JLog);		}		// The default logger is the formatted text log file.		if (empty($options['logger']))		{			$options['logger'] = 'formattedtext';		}		$options['logger'] = strtolower($options['logger']);		// Special case - if a Closure object is sent as the callback (in case of JLoggerCallback)		// Closure objects are not serializable so swap it out for a unique id first then back again later		if (isset($options['callback']) && is_a($options['callback'], 'closure'))		{			$callback = $options['callback'];			$options['callback'] = spl_object_hash($options['callback']);		}		// Generate a unique signature for the JLog instance based on its options.		$signature = md5(serialize($options));		// Now that the options array has been serialized, swap the callback back in		if (isset($callback))		{			$options['callback'] = $callback;		}		// Register the configuration if it doesn't exist.		if (empty(self::$instance->configurations[$signature]))		{			self::$instance->configurations[$signature] = $options;		}		self::$instance->lookup[$signature] = (object) array(			'priorities' => $priorities,			'categories' => array_map('strtolower', (array) $categories));	}	/**	 * Returns a reference to the a JLog object, only creating it if it doesn't already exist.	 * Note: This is principally made available for testing and internal purposes.	 *	 * @param   JLog  $instance  The logging object instance to be used by the static methods.	 *	 * @return  void	 *	 * @since   11.1	 */	public static function setInstance($instance)	{		if (($instance instanceof JLog) || $instance === null)		{			self::$instance = & $instance;		}	}	/**	 * Method to add an entry to the appropriate loggers.	 *	 * @param   JLogEntry  $entry  The JLogEntry object to send to the loggers.	 *	 * @return  void	 *	 * @since   11.1	 * @throws  RuntimeException	 */	protected function addLogEntry(JLogEntry $entry)	{		// Find all the appropriate loggers based on priority and category for the entry.		$loggers = $this->findLoggers($entry->priority, $entry->category);		foreach ((array) $loggers as $signature)		{			// Attempt to instantiate the logger object if it doesn't already exist.			if (empty($this->loggers[$signature]))			{				$class = 'JLogLogger' . ucfirst($this->configurations[$signature]['logger']);				if (class_exists($class))				{					$this->loggers[$signature] = new $class($this->configurations[$signature]);				}				else				{					throw new RuntimeException('Unable to create a JLogLogger instance: ' . $class);				}			}			// Add the entry to the logger.			$this->loggers[$signature]->addEntry(clone($entry));		}	}	/**	 * Method to find the loggers to use based on priority and category values.	 *	 * @param   integer  $priority  Message priority.	 * @param   string   $category  Type of entry	 *	 * @return  array  The array of loggers to use for the given priority and category values.	 *	 * @since   11.1	 */	protected function findLoggers($priority, $category)	{		$loggers = array();		// Sanitize inputs.		$priority = (int) $priority;		$category = strtolower($category);		// Let's go iterate over the loggers and get all the ones we need.		foreach ((array) $this->lookup as $signature => $rules)		{			// Check to make sure the priority matches the logger.			if ($priority & $rules->priorities)			{				// If either there are no set categories (meaning all) or the specific category is set, add this logger.				if (empty($category) || empty($rules->categories) || in_array($category, $rules->categories))				{					$loggers[] = $signature;				}			}		}		return $loggers;	}}
<?php/** * @package     Joomla.Platform * @subpackage  Application * * @copyright   Copyright (C) 2005 - 2013 Open Source Matters, Inc. All rights reserved. * @license     GNU General Public License version 2 or later; see LICENSE */defined('JPATH_PLATFORM') or die;/** * Class to model a Web Client. * * @property-read  integer  $platform        The detected platform on which the web client runs. * @property-read  boolean  $mobile          True if the web client is a mobile device. * @property-read  integer  $engine          The detected rendering engine used by the web client. * @property-read  integer  $browser         The detected browser used by the web client. * @property-read  string   $browserVersion  The detected browser version used by the web client. * @property-read  array    $languages       The priority order detected accepted languages for the client. * @property-read  array    $encodings       The priority order detected accepted encodings for the client. * @property-read  string   $userAgent       The web client's user agent string. * @property-read  string   $acceptEncoding  The web client's accepted encoding string. * @property-read  string   $acceptLanguage  The web client's accepted languages string. * @property-read  array    $detection       An array of flags determining whether or not a detection routine has been run. * @property-read  boolean  $robot           True if the web client is a robot * * @package     Joomla.Platform * @subpackage  Application * @since       12.1 */class JApplicationWebClient{	const WINDOWS = 1;	const WINDOWS_PHONE = 2;	const WINDOWS_CE = 3;	const IPHONE = 4;	const IPAD = 5;	const IPOD = 6;	const MAC = 7;	const BLACKBERRY = 8;	const ANDROID = 9;	const LINUX = 10;	const TRIDENT = 11;	const WEBKIT = 12;	const GECKO = 13;	const PRESTO = 14;	const KHTML = 15;	const AMAYA = 16;	const IE = 17;	const FIREFOX = 18;	const CHROME = 19;	const SAFARI = 20;	const OPERA = 21;	const ANDROIDTABLET = 22;	/**	 * @var    integer  The detected platform on which the web client runs.	 * @since  12.1	 */	protected $platform;	/**	 * @var    boolean  True if the web client is a mobile device.	 * @since  12.1	 */	protected $mobile = false;	/**	 * @var    integer  The detected rendering engine used by the web client.	 * @since  12.1	 */	protected $engine;	/**	 * @var    integer  The detected browser used by the web client.	 * @since  12.1	 */	protected $browser;	/**	 * @var    string  The detected browser version used by the web client.	 * @since  12.1	 */	protected $browserVersion;	/**	 * @var    array  The priority order detected accepted languages for the client.	 * @since  12.1	 */	protected $languages = array();	/**	 * @var    array  The priority order detected accepted encodings for the client.	 * @since  12.1	 */	protected $encodings = array();	/**	 * @var    string  The web client's user agent string.	 * @since  12.1	 */	protected $userAgent;	/**	 * @var    string  The web client's accepted encoding string.	 * @since  12.1	 */	protected $acceptEncoding;	/**	 * @var    string  The web client's accepted languages string.	 * @since  12.1	 */	protected $acceptLanguage;	/**	 * @var    boolean  True if the web client is a robot.	 * @since  12.3	 */	protected $robot = false;	/**	 * @var    array  An array of flags determining whether or not a detection routine has been run.	 * @since  12.1	 */	protected $detection = array();	/**	 * Class constructor.	 *	 * @param   string  $userAgent       The optional user-agent string to parse.	 * @param   string  $acceptEncoding  The optional client accept encoding string to parse.	 * @param   string  $acceptLanguage  The optional client accept language string to parse.	 *	 * @since   12.1	 */	public function __construct($userAgent = null, $acceptEncoding = null, $acceptLanguage = null)	{		// If no explicit user agent string was given attempt to use the implicit one from server environment.		if (empty($userAgent) && isset($_SERVER['HTTP_USER_AGENT']))		{			$this->userAgent = $_SERVER['HTTP_USER_AGENT'];		}		else		{			$this->userAgent = $userAgent;		}		// If no explicit acceptable encoding string was given attempt to use the implicit one from server environment.		if (empty($acceptEncoding) && isset($_SERVER['HTTP_ACCEPT_ENCODING']))		{			$this->acceptEncoding = $_SERVER['HTTP_ACCEPT_ENCODING'];		}		else		{			$this->acceptEncoding = $acceptEncoding;		}		// If no explicit acceptable languages string was given attempt to use the implicit one from server environment.		if (empty($acceptLanguage) && isset($_SERVER['HTTP_ACCEPT_LANGUAGE']))		{			$this->acceptLanguage = $_SERVER['HTTP_ACCEPT_LANGUAGE'];		}		else		{			$this->acceptLanguage = $acceptLanguage;		}	}	/**	 * Magic method to get an object property's value by name.	 *	 * @param   string  $name  Name of the property for which to return a value.	 *	 * @return  mixed  The requested value if it exists.	 *	 * @since   12.1	 */	public function __get($name)	{		switch ($name)		{			case 'mobile':			case 'platform':				if (empty($this->detection['platform']))				{					$this->detectPlatform($this->userAgent);				}				break;			case 'engine':				if (empty($this->detection['engine']))				{					$this->detectEngine($this->userAgent);				}				break;			case 'browser':			case 'browserVersion':				if (empty($this->detection['browser']))				{					$this->detectBrowser($this->userAgent);				}				break;			case 'languages':				if (empty($this->detection['acceptLanguage']))				{					$this->detectLanguage($this->acceptLanguage);				}				break;			case 'encodings':				if (empty($this->detection['acceptEncoding']))				{					$this->detectEncoding($this->acceptEncoding);				}				break;			case 'robot':				if (empty($this->detection['robot']))				{					$this->detectRobot($this->userAgent);				}				break;		}		// Return the property if it exists.		if (isset($this->$name))		{			return $this->$name;		}	}	/**	 * Detects the client browser and version in a user agent string.	 *	 * @param   string  $userAgent  The user-agent string to parse.	 *	 * @return  void	 *	 * @since   12.1	 */	protected function detectBrowser($userAgent)	{		// Attempt to detect the browser type.  Obviously we are only worried about major browsers.		if ((stripos($userAgent, 'MSIE') !== false) && (stripos($userAgent, 'Opera') === false))		{			$this->browser = self::IE;			$patternBrowser = 'MSIE';		}		elseif ((stripos($userAgent, 'Firefox') !== false) && (stripos($userAgent, 'like Firefox') === false))		{			$this->browser = self::FIREFOX;			$patternBrowser = 'Firefox';		}		elseif (stripos($userAgent, 'Chrome') !== false)		{			$this->browser = self::CHROME;			$patternBrowser = 'Chrome';		}		elseif (stripos($userAgent, 'Safari') !== false)		{			$this->browser = self::SAFARI;			$patternBrowser = 'Safari';		}		elseif (stripos($userAgent, 'Opera') !== false)		{			$this->browser = self::OPERA;			$patternBrowser = 'Opera';		}		// If we detected a known browser let's attempt to determine the version.		if ($this->browser)		{			// Build the REGEX pattern to match the browser version string within the user agent string.			$pattern = '#(?<browser>Version|' . $patternBrowser . ')[/ ]+(?<version>[0-9.|a-zA-Z.]*)#';			// Attempt to find version strings in the user agent string.			$matches = array();			if (preg_match_all($pattern, $userAgent, $matches))			{				// Do we have both a Version and browser match?				if (count($matches['browser']) == 2)				{					// See whether Version or browser came first, and use the number accordingly.					if (strripos($userAgent, 'Version') < strripos($userAgent, $patternBrowser))					{						$this->browserVersion = $matches['version'][0];					}					else					{						$this->browserVersion = $matches['version'][1];					}				}				elseif (count($matches['browser']) > 2)				{						$key = array_search('Version', $matches['browser']);						if ($key)						{							$this->browserVersion = $matches['version'][$key];						}				}				// We only have a Version or a browser so use what we have.				else				{					$this->browserVersion = $matches['version'][0];				}			}		}		// Mark this detection routine as run.		$this->detection['browser'] = true;	}	/**	 * Method to detect the accepted response encoding by the client.	 *	 * @param   string  $acceptEncoding  The client accept encoding string to parse.	 *	 * @return  void	 *	 * @since   12.1	 */	protected function detectEncoding($acceptEncoding)	{		// Parse the accepted encodings.		$this->encodings = array_map('trim', (array) explode(',', $acceptEncoding));		// Mark this detection routine as run.		$this->detection['acceptEncoding'] = true;	}	/**	 * Detects the client rendering engine in a user agent string.	 *	 * @param   string  $userAgent  The user-agent string to parse.	 *	 * @return  void	 *	 * @since   12.1	 */	protected function detectEngine($userAgent)	{		// Attempt to detect the client engine -- starting with the most popular ... for now.		if (stripos($userAgent, 'MSIE') !== false || stripos($userAgent, 'Trident') !== false)		{			$this->engine = self::TRIDENT;		}		// Evidently blackberry uses WebKit and doesn't necessarily report it.  Bad RIM.		elseif (stripos($userAgent, 'AppleWebKit') !== false || stripos($userAgent, 'blackberry') !== false)		{			$this->engine = self::WEBKIT;		}		// We have to check for like Gecko because some other browsers spoof Gecko.		elseif (stripos($userAgent, 'Gecko') !== false && stripos($userAgent, 'like Gecko') === false)		{			$this->engine = self::GECKO;		}		// Sometimes Opera browsers don't say Presto.		elseif (stripos($userAgent, 'Opera') !== false || stripos($userAgent, 'Presto') !== false)		{			$this->engine = self::PRESTO;		}		// *sigh*		elseif (stripos($userAgent, 'KHTML') !== false)		{			$this->engine = self::KHTML;		}		// Lesser known engine but it finishes off the major list from Wikipedia :-)		elseif (stripos($userAgent, 'Amaya') !== false)		{			$this->engine = self::AMAYA;		}		// Mark this detection routine as run.		$this->detection['engine'] = true;	}	/**	 * Method to detect the accepted languages by the client.	 *	 * @param   mixed  $acceptLanguage  The client accept language string to parse.	 *	 * @return  void	 *	 * @since   12.1	 */	protected function detectLanguage($acceptLanguage)	{		// Parse the accepted encodings.		$this->languages = array_map('trim', (array) explode(',', $acceptLanguage));		// Mark this detection routine as run.		$this->detection['acceptLanguage'] = true;	}	/**	 * Detects the client platform in a user agent string.	 *	 * @param   string  $userAgent  The user-agent string to parse.	 *	 * @return  void	 *	 * @since   12.1	 */	protected function detectPlatform($userAgent)	{		// Attempt to detect the client platform.		if (stripos($userAgent, 'Windows') !== false)		{			$this->platform = self::WINDOWS;			// Let's look at the specific mobile options in the Windows space.			if (stripos($userAgent, 'Windows Phone') !== false)			{				$this->mobile = true;				$this->platform = self::WINDOWS_PHONE;			}			elseif (stripos($userAgent, 'Windows CE') !== false)			{				$this->mobile = true;				$this->platform = self::WINDOWS_CE;			}		}		// Interestingly 'iPhone' is present in all iOS devices so far including iPad and iPods.		elseif (stripos($userAgent, 'iPhone') !== false)		{			$this->mobile = true;			$this->platform = self::IPHONE;			// Let's look at the specific mobile options in the iOS space.			if (stripos($userAgent, 'iPad') !== false)			{				$this->platform = self::IPAD;			}			elseif (stripos($userAgent, 'iPod') !== false)			{				$this->platform = self::IPOD;			}		}			// In case where iPhone is not mentioed in iPad user agent string			elseif (stripos($userAgent, 'iPad') !== false)			{				$this->mobile = true;				$this->platform = self::IPAD;			}			// In case where iPhone is not mentioed in iPod user agent string			elseif (stripos($userAgent, 'iPod') !== false)			{				$this->mobile = true;				$this->platform = self::IPOD;			}		// This has to come after the iPhone check because mac strings are also present in iOS devices.		elseif (preg_match('/macintosh|mac os x/i', $userAgent))		{			$this->platform = self::MAC;		}		elseif (stripos($userAgent, 'Blackberry') !== false)		{			$this->mobile = true;			$this->platform = self::BLACKBERRY;		}		elseif (stripos($userAgent, 'Android') !== false)		{			$this->mobile = true;			$this->platform = self::ANDROID;			/**			 * Attempt to distinguish between Android phones and tablets			 * There is no totally foolproof method but certain rules almost always hold			 *   Android 3.x is only used for tablets			 *   Some devices and browsers encourage users to change their UA string to include Tablet.			 *   Google encourages manufacturers to exclude the string Mobile from tablet device UA strings.			 *   In some modes Kindle Android devices include the string Mobile but they include the string Silk.			 */			if (stripos($userAgent, 'Android 3') !== false || stripos($userAgent, 'Tablet') !== false				|| stripos($userAgent, 'Mobile') === false || stripos($userAgent, 'Silk') !== false )			{				$this->platform = self::ANDROIDTABLET;			}		}		elseif (stripos($userAgent, 'Linux') !== false)		{			$this->platform = self::LINUX;		}		// Mark this detection routine as run.		$this->detection['platform'] = true;	}	/**	 * Determines if the browser is a robot or not.	 *	 * @param   string  $userAgent  The user-agent string to parse.	 *	 * @return  void	 *	 * @since   12.3	 */	protected function detectRobot($userAgent)	{		if (preg_match('/http|bot|robot|spider|crawler|curl|^$/i', $userAgent))		{			$this->robot = true;		}		else		{			$this->robot = false;		}		$this->detection['robot'] = true;	}}
<?php/** * @package     Joomla.Site * @subpackage  Templates.beez3 * * @copyright   Copyright (C) 2005 - 2013 Open Source Matters, Inc. All rights reserved. * @license     GNU General Public License version 2 or later; see LICENSE.txt */defined('_JEXEC') or die;JHtml::addIncludePath(JPATH_COMPONENT . '/helpers');JHtml::_('behavior.caption');?><section class="blog-featured<?php echo $this->pageclass_sfx;?>"><?php if ( $this->params->get('show_page_heading') != 0) : ?>	<h1>	<?php echo $this->escape($this->params->get('page_heading')); ?>	</h1><?php endif; ?><?php $leadingcount = 0; ?><?php if (!empty($this->lead_items)) : ?><div class="items-leading">	<?php foreach ($this->lead_items as &$item) : ?>		<article class="leading-<?php echo $leadingcount; ?><?php echo $item->state == 0 ? ' system-unpublished' : null; ?>">			<?php				$this->item = &$item;				echo $this->loadTemplate('item');			?>		</article>		<?php			$leadingcount++;		?>	<?php endforeach; ?></div><?php endif; ?><?php	$introcount = (count($this->intro_items));	$counter = 0;?><?php if (!empty($this->intro_items)) : ?>	<?php foreach ($this->intro_items as $key => &$item) : ?>	<?php		$key = ($key - $leadingcount) + 1;		$rowcount = (((int) $key - 1) % (int) $this->columns) + 1;		$row = $counter / $this->columns;		if ($rowcount == 1) : ?>			<div class="items-row cols-<?php echo (int) $this->columns;?> <?php echo 'row-'.$row; ?>">		<?php endif; ?>		<article class="item column-<?php echo $rowcount;?><?php echo $item->state == 0 ? ' system-unpublished"' : null; ?>">			<?php					$this->item = &$item;					echo $this->loadTemplate('item');			?>		</article>		<?php $counter++; ?>			<?php if (($rowcount == $this->columns) or ($counter == $introcount)) : ?>				<span class="row-separator"></span>				</div>			<?php endif; ?>	<?php endforeach; ?><?php endif; ?><?php if (!empty($this->link_items)) : ?>	<div class="items-more">	<?php echo $this->loadTemplate('links'); ?>	</div><?php endif; ?><?php if ($this->params->def('show_pagination', 2) == 1  || ($this->params->get('show_pagination') == 2 && $this->pagination->pagesTotal > 1)) : ?>	<div class="pagination">		<?php if ($this->params->def('show_pagination_results', 1)) : ?>			<p class="counter">				<?php echo $this->pagination->getPagesCounter(); ?>			</p>		<?php  endif; ?>				<?php echo $this->pagination->getPagesLinks(); ?>	</div><?php endif; ?></section>
<?php/** * @package     Joomla.Site * @subpackage  mod_syndicate * * @copyright   Copyright (C) 2005 - 2013 Open Source Matters, Inc. All rights reserved. * @license     GNU General Public License version 2 or later; see LICENSE.txt */defined('_JEXEC') or die;/** * Helper for mod_syndicate * * @package     Joomla.Site * @subpackage  mod_syndicate * @since       1.5 */class ModSyndicateHelper{	public static function getLink(&$params)	{		$document = JFactory::getDocument();		foreach ($document->_links as $link => $value)		{			$value = JArrayHelper::toString($value);			if (strpos($value, 'application/'.$params->get('format').'+xml'))			{				return $link;			}		}	}}
<?php/** * @package     Joomla.Administrator * @subpackage  mod_title * * @copyright   Copyright (C) 2005 - 2013 Open Source Matters, Inc. All rights reserved. * @license     GNU General Public License version 2 or later; see LICENSE.txt */defined('_JEXEC') or die;?><?php if (!empty($title)) : ?>	<?php echo $title; ?><?php endif; ?>
<?php/** * @package     Joomla.Administrator * @subpackage  com_finder * * @copyright   Copyright (C) 2005 - 2013 Open Source Matters, Inc. All rights reserved. * @license     GNU General Public License version 2 or later; see LICENSE */defined('_JEXEC') or die;?><h3>	<?php echo JText::_('COM_FINDER_STATISTICS_TITLE') ?></h3><div class="row-fluid">	<div class="span6">		<p class="tab-description"><?php echo JText::sprintf('COM_FINDER_STATISTICS_STATS_DESCRIPTION', number_format($this->data->term_count), number_format($this->data->link_count), number_format($this->data->taxonomy_node_count), number_format($this->data->taxonomy_branch_count)); ?></p>		<table class="table table-striped table-condensed">			<thead>				<tr>					<th class="center">						<?php echo JText::_('COM_FINDER_STATISTICS_LINK_TYPE_HEADING');?>					</th>					<th class="center">						<?php echo JText::_('COM_FINDER_STATISTICS_LINK_TYPE_COUNT');?>					</th>				</tr>			</thead>			<tbody>				<?php foreach ($this->data->type_list as $type) :?>				<tr>					<td>						<?php echo $type->type_title;?>					</td>					<td>						<span class="badge badge-info"><?php echo number_format($type->link_count);?></span>					</td>				</tr>				<?php endforeach; ?>				<tr>					<td>						<strong><?php echo JText::_('COM_FINDER_STATISTICS_LINK_TYPE_TOTAL'); ?></strong>					</td>					<td>						<span class="badge badge-info"><?php echo number_format($this->data->link_count); ?></span>					</td>				</tr>			</tbody>		</table>	</div></div>
<?php/** * @package     Joomla.Site * @subpackage  mod_menu * * @copyright   Copyright (C) 2005 - 2013 Open Source Matters, Inc. All rights reserved. * @license     GNU General Public License version 2 or later; see LICENSE.txt */defined('_JEXEC') or die;// Note. It is important to remove spaces between elements.$title = $item->anchor_title ? ' title="'.$item->anchor_title.'" ' : '';if ($item->menu_image)	{		$item->params->get('menu_text', 1) ?		$linktype = '<img src="'.$item->menu_image.'" alt="'.$item->title.'" /><span class="image-title">'.$item->title.'</span> ' :		$linktype = '<img src="'.$item->menu_image.'" alt="'.$item->title.'" />';}else { $linktype = $item->title;}?><span class="separator"<?php echo $title; ?>><?php echo $linktype; ?></span>
<?php/** * @package     Joomla.Plugin * @subpackage  Content.vote * * @copyright   Copyright (C) 2005 - 2013 Open Source Matters, Inc. All rights reserved. * @license     GNU General Public License version 2 or later; see LICENSE.txt */defined('_JEXEC') or die;/** * Vote plugin. * * @package     Joomla.Plugin * @subpackage  Content.vote * @since       1.5 */class PlgContentVote extends JPlugin{	/**	 * Load the language file on instantiation.	 *	 * @var    boolean	 * @since  3.1	 */	protected $autoloadLanguage = true;	/**	 * @since   1.6	 */	public function onContentBeforeDisplay($context, &$row, &$params, $page=0)	{		$html = '';		if ($params->get('show_vote'))		{			$rating = (int) @$row->rating;			$view = JFactory::getApplication()->input->getString('view', '');			$img = '';			// look for images in template if available			$starImageOn = JHtml::_('image', 'system/rating_star.png', JText::_('PLG_VOTE_STAR_ACTIVE'), null, true);			$starImageOff = JHtml::_('image', 'system/rating_star_blank.png', JText::_('PLG_VOTE_STAR_INACTIVE'), null, true);			for ($i = 0; $i < $rating; $i++)			{				$img .= $starImageOn;			}			for ($i = $rating; $i < 5; $i++)			{				$img .= $starImageOff;			}			$html .= '<div class="content_rating">';			$html .= '<p class="unseen element-invisible">' . JText::sprintf('PLG_VOTE_USER_RATING', $rating, '5') . '</p>';			$html .= $img;			$html .= '</div>';			if ($view == 'article' && $row->state == 1)			{				$uri = JURI::getInstance();				$uri->setQuery($uri->getQuery().'&hitcount=0');				// create option list for voting select box				$options = array();				for($i = 1; $i < 6; $i++)				{					$options[] = JHTML::_('select.option', $i, JText::sprintf('PLG_VOTE_VOTE', $i));				}				// generate voting form				$html .= '<form method="post" action="' . htmlspecialchars($uri->toString()) . '" class="form-inline">';				$html .= '<span class="content_vote">';				$html .= '<label class="unseen element-invisible" for="content_vote_' . $row->id . '">'.JText::_('PLG_VOTE_LABEL').'</label>';				$html .= JHTML::_('select.genericlist', $options, 'user_rating', null, 'value', 'text', '5', 'content_vote_'.$row->id);				$html .= '&#160;<input class="btn btn-mini" type="submit" name="submit_vote" value="' . JText::_('PLG_VOTE_RATE') . '" />';				$html .= '<input type="hidden" name="task" value="article.vote" />';				$html .= '<input type="hidden" name="hitcount" value="0" />';				$html .= '<input type="hidden" name="url" value="' . htmlspecialchars($uri->toString()) . '" />';				$html .= JHtml::_('form.token');				$html .= '</span>';				$html .= '</form>';			}		}		return $html;	}}
<?php/** * @package     Joomla.Legacy * @subpackage  Menu * * @copyright   Copyright (C) 2005 - 2013 Open Source Matters, Inc. All rights reserved. * @license     GNU General Public License version 2 or later; see LICENSE */defined('JPATH_PLATFORM') or die;/** * JMenu class * * @package     Joomla.Legacy * @subpackage  Menu * @since       11.1 */class JMenu{	/**	 * Array to hold the menu items	 *	 * @var    array	 * @since   11.1	 */	protected $_items = array();	/**	 * Identifier of the default menu item	 *	 * @var    integer	 * @since   11.1	 */	protected $_default = array();	/**	 * Identifier of the active menu item	 *	 * @var    integer	 * @since  11.1	 */	protected $_active = 0;	/**	 * @var    array  JMenu instances container.	 * @since  11.3	 */	protected static $instances = array();	/**	 * Class constructor	 *	 * @param   array  $options  An array of configuration options.	 *	 * @since   11.1	 */	public function __construct($options = array())	{		// Load the menu items		$this->load();		foreach ($this->_items as $item)		{			if ($item->home)			{				$this->_default[trim($item->language)] = $item->id;			}			// Decode the item params			$result = new JRegistry;			$result->loadString($item->params);			$item->params = $result;		}	}	/**	 * Returns a JMenu object	 *	 * @param   string  $client   The name of the client	 * @param   array   $options  An associative array of options	 *	 * @return  JMenu  A menu object.	 *	 * @since   11.1	 */	public static function getInstance($client, $options = array())	{		if (empty(self::$instances[$client]))		{			// Create a JMenu object			$classname = 'JMenu' . ucfirst($client);			if (!class_exists($classname))			{				// @deprecated 13.3 Everything in this block is deprecated but the warning is only logged after the file_exists				// Load the menu object				$info = JApplicationHelper::getClientInfo($client, true);				if (is_object($info))				{					$path = $info->path . '/includes/menu.php';					if (file_exists($path))					{						JLog::add('Non-autoloadable JMenu subclasses are deprecated.', JLog::WARNING, 'deprecated');						include_once $path;					}				}			}			if (class_exists($classname))			{				self::$instances[$client] = new $classname($options);			}			else			{				throw new Exception(JText::sprintf('JLIB_APPLICATION_ERROR_MENU_LOAD', $client), 500);			}		}		return self::$instances[$client];	}	/**	 * Get menu item by id	 *	 * @param   integer  $id  The item id	 *	 * @return  mixed    The item object, or null if not found	 *	 * @since   11.1	 */	public function getItem($id)	{		$result = null;		if (isset($this->_items[$id]))		{			$result = &$this->_items[$id];		}		return $result;	}	/**	 * Set the default item by id and language code.	 *	 * @param   integer  $id        The menu item id.	 * @param   string   $language  The language cod (since 1.6).	 *	 * @return  boolean  True, if successful	 *	 * @since   11.1	 */	public function setDefault($id, $language = '')	{		if (isset($this->_items[$id]))		{			$this->_default[$language] = $id;			return true;		}		return false;	}	/**	 * Get the default item by language code.	 *	 * @param   string  $language  The language code, default value of * means all.	 *	 * @return  object  The item object	 *	 * @since   11.1	 */	public function getDefault($language = '*')	{		if (array_key_exists($language, $this->_default))		{			return $this->_items[$this->_default[$language]];		}		elseif (array_key_exists('*', $this->_default))		{			return $this->_items[$this->_default['*']];		}		else		{			return 0;		}	}	/**	 * Set the default item by id	 *	 * @param   integer  $id  The item id	 *	 * @return  mixed  If successful the active item, otherwise null	 *	 * @since   11.1	 */	public function setActive($id)	{		if (isset($this->_items[$id]))		{			$this->_active = $id;			$result = &$this->_items[$id];			return $result;		}		return null;	}	/**	 * Get menu item by id.	 *	 * @return  object  The item object.	 *	 * @since   11.1	 */	public function getActive()	{		if ($this->_active)		{			$item = &$this->_items[$this->_active];			return $item;		}		return null;	}	/**	 * Gets menu items by attribute	 *	 * @param   string   $attributes  The field name	 * @param   string   $values      The value of the field	 * @param   boolean  $firstonly   If true, only returns the first item found	 *	 * @return  array	 *	 * @since   11.1	 */	public function getItems($attributes, $values, $firstonly = false)	{		$items = array();		$attributes = (array) $attributes;		$values = (array) $values;		foreach ($this->_items as $item)		{			if (!is_object($item))			{				continue;			}			$test = true;			for ($i = 0, $count = count($attributes); $i < $count; $i++)			{				if (is_array($values[$i]))				{					if (!in_array($item->$attributes[$i], $values[$i]))					{						$test = false;						break;					}				}				else				{					if ($item->$attributes[$i] != $values[$i])					{						$test = false;						break;					}				}			}			if ($test)			{				if ($firstonly)				{					return $item;				}				$items[] = $item;			}		}		return $items;	}	/**	 * Gets the parameter object for a certain menu item	 *	 * @param   integer  $id  The item id	 *	 * @return  JRegistry  A JRegistry object	 *	 * @since   11.1	 */	public function getParams($id)	{		if ($menu = $this->getItem($id))		{			return $menu->params;		}		else		{			return new JRegistry;		}	}	/**	 * Getter for the menu array	 *	 * @return  array	 *	 * @since   11.1	 */	public function getMenu()	{		return $this->_items;	}	/**	 * Method to check JMenu object authorization against an access control	 * object and optionally an access extension object	 *	 * @param   integer  $id  The menu id	 *	 * @return  boolean  True if authorised	 *	 * @since   11.1	 */	public function authorise($id)	{		$menu = $this->getItem($id);		$user = JFactory::getUser();		if ($menu)		{			return in_array((int) $menu->access, $user->getAuthorisedViewLevels());		}		else		{			return true;		}	}	/**	 * Loads the menu items	 *	 * @return  array	 *	 * @since   11.1	 */	public function load()	{		return array();	}}
<?php/** * @package     Joomla.Site * @subpackage  Template.system * * @copyright   Copyright (C) 2005 - 2013 Open Source Matters, Inc. All rights reserved. * @license     GNU General Public License version 2 or later; see LICENSE.txt */defined('_JEXEC') or die;?><!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.0 Transitional//EN" "http://www.w3.org/TR/xhtml1/DTD/xhtml1-transitional.dtd"><html xmlns="http://www.w3.org/1999/xhtml" xml:lang="<?php echo $this->language; ?>" lang="<?php echo $this->language; ?>" dir="<?php echo $this->direction; ?>"><head>	<jdoc:include type="head" />	<link rel="stylesheet" href="<?php echo $this->baseurl ?>/templates/system/css/general.css" type="text/css" />	<link rel="stylesheet" href="<?php echo $this->baseurl ?>/templates/<?php echo $this->template; ?>/css/template.css" type="text/css" /><?php if ($this->direction == 'rtl') : ?>	<link rel="stylesheet" href="<?php echo $this->baseurl ?>/templates/<?php echo $this->template ?>/css/template_rtl.css" type="text/css" /><?php endif; ?></head><body class="contentpane">	<jdoc:include type="message" />	<jdoc:include type="component" /></body></html>
<?php/*** @version $Id$* @package utf8* @subpackage strings*//*** Define UTF8_CORE as required*/if ( !defined('UTF8_CORE') ) {    define('UTF8_CORE',TRUE);}//--------------------------------------------------------------------/*** Wrapper round mb_strlen* Assumes you have mb_internal_encoding to UTF-8 already* Note: this function does not count bad bytes in the string - these* are simply ignored* @param string UTF-8 string* @return int number of UTF-8 characters in string* @package utf8* @subpackage strings*/function utf8_strlen($str){    return mb_strlen($str);}//--------------------------------------------------------------------/*** Assumes mbstring internal encoding is set to UTF-8* Wrapper around mb_strpos* Find position of first occurrence of a string* @param string haystack* @param string needle (you should validate this with utf8_is_valid)* @param integer offset in characters (from left)* @return mixed integer position or FALSE on failure* @package utf8* @subpackage strings*/function utf8_strpos($str, $search, $offset = FALSE){    if ( $offset === FALSE ) {        return mb_strpos($str, $search);    } else {        return mb_strpos($str, $search, $offset);    }}//--------------------------------------------------------------------/*** Assumes mbstring internal encoding is set to UTF-8* Wrapper around mb_strrpos* Find position of last occurrence of a char in a string* @param string haystack* @param string needle (you should validate this with utf8_is_valid)* @param integer (optional) offset (from left)* @return mixed integer position or FALSE on failure* @package utf8* @subpackage strings*/function utf8_strrpos($str, $search, $offset = FALSE){    if ( $offset === FALSE ) {        # Emulate behaviour of strrpos rather than raising warning        if ( empty($str) ) {            return FALSE;        }        return mb_strrpos($str, $search);    } else {        if ( !is_int($offset) ) {            trigger_error('utf8_strrpos expects parameter 3 to be long',E_USER_WARNING);            return FALSE;        }        $str = mb_substr($str, $offset);        if ( FALSE !== ( $pos = mb_strrpos($str, $search) ) ) {            return $pos + $offset;        }        return FALSE;    }}//--------------------------------------------------------------------/*** Assumes mbstring internal encoding is set to UTF-8* Wrapper around mb_substr* Return part of a string given character offset (and optionally length)* @param string* @param integer number of UTF-8 characters offset (from left)* @param integer (optional) length in UTF-8 characters from offset* @return mixed string or FALSE if failure* @package utf8* @subpackage strings*/function utf8_substr($str, $offset, $length = FALSE){    if ( $length === FALSE ) {        return mb_substr($str, $offset);    } else {        return mb_substr($str, $offset, $length);    }}//--------------------------------------------------------------------/*** Assumes mbstring internal encoding is set to UTF-8* Wrapper around mb_strtolower* Make a string lowercase* Note: The concept of a characters "case" only exists is some alphabets* such as Latin, Greek, Cyrillic, Armenian and archaic Georgian - it does* not exist in the Chinese alphabet, for example. See Unicode Standard* Annex #21: Case Mappings* @param string* @return mixed either string in lowercase or FALSE is UTF-8 invalid* @package utf8* @subpackage strings*/function utf8_strtolower($str){    return mb_strtolower($str);}//--------------------------------------------------------------------/*** Assumes mbstring internal encoding is set to UTF-8* Wrapper around mb_strtoupper* Make a string uppercase* Note: The concept of a characters "case" only exists is some alphabets* such as Latin, Greek, Cyrillic, Armenian and archaic Georgian - it does* not exist in the Chinese alphabet, for example. See Unicode Standard* Annex #21: Case Mappings* @param string* @return mixed either string in lowercase or FALSE is UTF-8 invalid* @package utf8* @subpackage strings*/function utf8_strtoupper($str){    return mb_strtoupper($str);}
<?php/** * @package     Joomla.Platform * @subpackage  HTML * * @copyright   Copyright (C) 2005 - 2013 Open Source Matters, Inc. All rights reserved. * @license     GNU General Public License version 2 or later; see LICENSE */defined('JPATH_PLATFORM') or die;jimport('joomla.environment.browser');jimport('joomla.filesystem.file');jimport('joomla.filesystem.path');/** * Utility class for all HTML drawing classes * * @package     Joomla.Platform * @subpackage  HTML * @since       11.1 */abstract class JHtml{	/**	 * Option values related to the generation of HTML output. Recognized	 * options are:	 *     fmtDepth, integer. The current indent depth.	 *     fmtEol, string. The end of line string, default is linefeed.	 *     fmtIndent, string. The string to use for indentation, default is	 *     tab.	 *	 * @var    array	 * @since  11.1	 */	public static $formatOptions = array('format.depth' => 0, 'format.eol' => "\n", 'format.indent' => "\t");	/**	 * An array to hold included paths	 *	 * @var    array	 * @since  11.1	 */	protected static $includePaths = array();	/**	 * An array to hold method references	 *	 * @var    array	 * @since  11.1	 */	protected static $registry = array();	/**	 * Method to extract a key	 *	 * @param   string  $key  The name of helper method to load, (prefix).(class).function	 *                        prefix and class are optional and can be used to load custom html helpers.	 *	 * @return  array  Contains lowercase key, prefix, file, function.	 *	 * @since   11.1	 */	protected static function extract($key)	{		$key = preg_replace('#[^A-Z0-9_\.]#i', '', $key);		// Check to see whether we need to load a helper file		$parts = explode('.', $key);		$prefix = (count($parts) == 3 ? array_shift($parts) : 'JHtml');		$file = (count($parts) == 2 ? array_shift($parts) : '');		$func = array_shift($parts);		return array(strtolower($prefix . '.' . $file . '.' . $func), $prefix, $file, $func);	}	/**	 * Class loader method	 *	 * Additional arguments may be supplied and are passed to the sub-class.	 * Additional include paths are also able to be specified for third-party use	 *	 * @param   string  $key  The name of helper method to load, (prefix).(class).function	 *                        prefix and class are optional and can be used to load custom	 *                        html helpers.	 *	 * @return  mixed  JHtml::call($function, $args) or False on error	 *	 * @since   11.1	 * @throws  InvalidArgumentException	 */	public static function _($key)	{		list($key, $prefix, $file, $func) = self::extract($key);		if (array_key_exists($key, self::$registry))		{			$function = self::$registry[$key];			$args = func_get_args();			// Remove function name from arguments			array_shift($args);			return self::call($function, $args);		}		$className = $prefix . ucfirst($file);		if (!class_exists($className))		{			$path = JPath::find(self::$includePaths, strtolower($file) . '.php');			if ($path)			{				require_once $path;				if (!class_exists($className))				{					throw new InvalidArgumentException(sprintf('%s not found.', $className), 500);				}			}			else			{				throw new InvalidArgumentException(sprintf('%s %s not found.', $prefix, $file), 500);			}		}		$toCall = array($className, $func);		if (is_callable($toCall))		{			self::register($key, $toCall);			$args = func_get_args();			// Remove function name from arguments			array_shift($args);			return self::call($toCall, $args);		}		else		{			throw new InvalidArgumentException(sprintf('%s::%s not found.', $className, $func), 500);		}	}	/**	 * Registers a function to be called with a specific key	 *	 * @param   string  $key       The name of the key	 * @param   string  $function  Function or method	 *	 * @return  boolean  True if the function is callable	 *	 * @since   11.1	 */	public static function register($key, $function)	{		list($key) = self::extract($key);		if (is_callable($function))		{			self::$registry[$key] = $function;			return true;		}		return false;	}	/**	 * Removes a key for a method from registry.	 *	 * @param   string  $key  The name of the key	 *	 * @return  boolean  True if a set key is unset	 *	 * @since   11.1	 */	public static function unregister($key)	{		list($key) = self::extract($key);		if (isset(self::$registry[$key]))		{			unset(self::$registry[$key]);			return true;		}		return false;	}	/**	 * Test if the key is registered.	 *	 * @param   string  $key  The name of the key	 *	 * @return  boolean  True if the key is registered.	 *	 * @since   11.1	 */	public static function isRegistered($key)	{		list($key) = self::extract($key);		return isset(self::$registry[$key]);	}	/**	 * Function caller method	 *	 * @param   callable  $function  Function or method to call	 * @param   array     $args      Arguments to be passed to function	 *	 * @return  mixed   Function result or false on error.	 *	 * @see     http://php.net/manual/en/function.call-user-func-array.php	 * @since   11.1	 * @throws  InvalidArgumentException	 */	protected static function call($function, $args)	{		if (!is_callable($function))		{			throw new InvalidArgumentException('Function not supported', 500);		}		// PHP 5.3 workaround		$temp = array();		foreach ($args as &$arg)		{			$temp[] = &$arg;		}		return call_user_func_array($function, $temp);	}	/**	 * Write a <a></a> element	 *	 * @param   string  $url      The relative URL to use for the href attribute	 * @param   string  $text     The target attribute to use	 * @param   array   $attribs  An associative array of attributes to add	 *	 * @return  string  <a></a> string	 *	 * @since   11.1	 */	public static function link($url, $text, $attribs = null)	{		if (is_array($attribs))		{			$attribs = JArrayHelper::toString($attribs);		}		return '<a href="' . $url . '" ' . $attribs . '>' . $text . '</a>';	}	/**	 * Write a <iframe></iframe> element	 *	 * @param   string  $url       The relative URL to use for the src attribute	 * @param   string  $name      The target attribute to use	 * @param   array   $attribs   An associative array of attributes to add	 * @param   string  $noFrames  The message to display if the iframe tag is not supported	 *	 * @return  string  <iframe></iframe> element or message if not supported	 *	 * @since   11.1	 */	public static function iframe($url, $name, $attribs = null, $noFrames = '')	{		if (is_array($attribs))		{			$attribs = JArrayHelper::toString($attribs);		}		return '<iframe src="' . $url . '" ' . $attribs . ' name="' . $name . '">' . $noFrames . '</iframe>';	}	/**	 * Compute the files to be included	 *	 * @param   string   $folder          folder name to search into (images, css, js, ...)	 * @param   string   $file            path to file	 * @param   boolean  $relative        path to file is relative to /media folder  (and searches in template)	 * @param   boolean  $detect_browser  detect browser to include specific browser files	 * @param   boolean  $detect_debug    detect debug to include compressed files if debug is on	 *	 * @return  array    files to be included	 *	 * @see     JBrowser	 * @since   11.1	 */	protected static function includeRelativeFiles($folder, $file, $relative, $detect_browser, $detect_debug)	{		// If http is present in filename		if (strpos($file, 'http') === 0)		{			$includes = array($file);		}		else		{			// Extract extension and strip the file			$strip		= JFile::stripExt($file);			$ext		= JFile::getExt($file);			// Prepare array of files			$includes = array();			// Detect browser and compute potential files			if ($detect_browser)			{				$navigator = JBrowser::getInstance();				$browser = $navigator->getBrowser();				$major = $navigator->getMajor();				$minor = $navigator->getMinor();				// Try to include files named filename.ext, filename_browser.ext, filename_browser_major.ext, filename_browser_major_minor.ext				// where major and minor are the browser version names				$potential = array($strip, $strip . '_' . $browser,  $strip . '_' . $browser . '_' . $major,					$strip . '_' . $browser . '_' . $major . '_' . $minor);			}			else			{				$potential = array($strip);			}			// If relative search in template directory or media directory			if ($relative)			{				// Get the template				$app = JFactory::getApplication();				$template = $app->getTemplate();				// For each potential files				foreach ($potential as $strip)				{					$files = array();					// Detect debug mode					if ($detect_debug && JFactory::getConfig()->get('debug'))					{						/*						 * Detect if we received a file in the format name.min.ext						 * If so, strip the .min part out, otherwise append -uncompressed						 */						if (strrpos($strip, '.min', '-4'))						{							$position = strrpos($strip, '.min', '-4');							$filename = str_replace('.min', '.', $strip, $position);							$files[]  = $filename . $ext;						}						else						{							$files[] = $strip . '-uncompressed.' . $ext;						}					}					$files[] = $strip . '.' . $ext;					/*					 * Loop on 1 or 2 files and break on first found.					 * Add the content of the MD5SUM file located in the same folder to url to ensure cache browser refresh					 * This MD5SUM file must represent the signature of the folder content					 */					foreach ($files as $file)					{						// If the file is in the template folder						$path = JPATH_THEMES . "/$template/$folder/$file";						if (file_exists($path))						{							$md5 = dirname($path) . '/MD5SUM';							$includes[] = JURI::base(true) . "/templates/$template/$folder/$file" .								(file_exists($md5) ? ('?' . file_get_contents($md5)) : '');							break;						}						else						{							// If the file contains any /: it can be in an media extension subfolder							if (strpos($file, '/'))							{								// Divide the file extracting the extension as the first part before /								list($extension, $file) = explode('/', $file, 2);								// If the file yet contains any /: it can be a plugin								if (strpos($file, '/'))								{									// Divide the file extracting the element as the first part before /									list($element, $file) = explode('/', $file, 2);									// Try to deal with plugins group in the media folder									$path = JPATH_ROOT . "/media/$extension/$element/$folder/$file";									if (file_exists($path))									{										$md5 = dirname($path) . '/MD5SUM';										$includes[] = JURI::root(true) . "/media/$extension/$element/$folder/$file" .											(file_exists($md5) ? ('?' . file_get_contents($md5)) : '');										break;									}									// Try to deal with classical file in a a media subfolder called element									$path = JPATH_ROOT . "/media/$extension/$folder/$element/$file";									if (file_exists($path))									{										$md5 = dirname($path) . '/MD5SUM';										$includes[] = JURI::root(true) . "/media/$extension/$folder/$element/$file" .											(file_exists($md5) ? ('?' . file_get_contents($md5)) : '');										break;									}									// Try to deal with system files in the template folder									$path = JPATH_THEMES . "/$template/$folder/system/$element/$file";									if (file_exists($path))									{										$md5 = dirname($path) . '/MD5SUM';										$includes[] = JURI::root(true) . "/templates/$template/$folder/system/$element/$file" .											(file_exists($md5) ? ('?' . file_get_contents($md5)) : '');										break;									}									// Try to deal with system files in the media folder									$path = JPATH_ROOT . "/media/system/$folder/$element/$file";									if (file_exists($path))									{										$md5 = dirname($path) . '/MD5SUM';										$includes[] = JURI::root(true) . "/media/system/$folder/$element/$file" .											(file_exists($md5) ? ('?' . file_get_contents($md5)) : '');										break;									}								}								else								{									// Try to deals in the extension media folder									$path = JPATH_ROOT . "/media/$extension/$folder/$file";									if (file_exists($path))									{										$md5 = dirname($path) . '/MD5SUM';										$includes[] = JURI::root(true) . "/media/$extension/$folder/$file" .											(file_exists($md5) ? ('?' . file_get_contents($md5)) : '');										break;									}									// Try to deal with system files in the template folder									$path = JPATH_THEMES . "/$template/$folder/system/$file";									if (file_exists($path))									{										$md5 = dirname($path) . '/MD5SUM';										$includes[] = JURI::root(true) . "/templates/$template/$folder/system/$file" .											(file_exists($md5) ? ('?' . file_get_contents($md5)) : '');										break;									}									// Try to deal with system files in the media folder									$path = JPATH_ROOT . "/media/system/$folder/$file";									if (file_exists($path))									{										$md5 = dirname($path) . '/MD5SUM';										$includes[] = JURI::root(true) . "/media/system/$folder/$file" .											(file_exists($md5) ? ('?' . file_get_contents($md5)) : '');										break;									}								}							}							// Try to deal with system files in the media folder							else							{								$path = JPATH_ROOT . "/media/system/$folder/$file";								if (file_exists($path))								{									$md5 = dirname($path) . '/MD5SUM';									$includes[] = JURI::root(true) . "/media/system/$folder/$file" .											(file_exists($md5) ? ('?' . file_get_contents($md5)) : '');									break;								}							}						}					}				}			}			// If not relative and http is not present in filename			else			{				foreach ($potential as $strip)				{					$files = array();					// Detect debug mode					if ($detect_debug && JFactory::getConfig()->get('debug'))					{						/*						 * Detect if we received a file in the format name.min.ext						 * If so, strip the .min part out, otherwise append -uncompressed						 */						if (strrpos($strip, '.min', '-4'))						{							$position = strrpos($strip, '.min', '-4');							$filename = str_replace('.min', '.', $strip, $position);							$files[]  = $filename . $ext;						}						else						{							$files[] = $strip . '-uncompressed.' . $ext;						}					}					$files[] = $strip . '.' . $ext;					/*					 * Loop on 1 or 2 files and break on first found.					 * Add the content of the MD5SUM file located in the same folder to url to ensure cache browser refresh					 * This MD5SUM file must represent the signature of the folder content					 */					foreach ($files as $file)					{						$path = JPATH_ROOT . "/$file";						if (file_exists($path))						{							$md5 = dirname($path) . '/MD5SUM';							$includes[] = JURI::root(true) . "/$file" .								(file_exists($md5) ? ('?' . file_get_contents($md5)) : '');							break;						}					}				}			}		}		return $includes;	}	/**	 * Write a <img></img> element	 *	 * @param   string   $file      The relative or absolute URL to use for the src attribute	 * @param   string   $alt       The alt text.	 * @param   mixed    $attribs   String or associative array of attribute(s) to use	 * @param   boolean  $relative  Path to file is relative to /media folder (and searches in template)	 * @param   mixed    $path_rel  Return html tag without (-1) or with file computing(false). Return computed path only (true)	 *	 * @return  string	 *	 * @since   11.1	 */	public static function image($file, $alt, $attribs = null, $relative = false, $path_rel = false)	{		if ($path_rel !== -1)		{			$includes = self::includeRelativeFiles('images', $file, $relative, false, false);			$file = count($includes) ? $includes[0] : null;		}		// If only path is required		if ($path_rel)		{			return $file;		}		else		{			return	'<img src="' . $file . '" alt="' . $alt . '" ' .				(is_array($attribs) ? JArrayHelper::toString($attribs) : $attribs) .				' />';		}	}	/**	 * Write a <link rel="stylesheet" style="text/css" /> element	 *	 * @param   string   $file            path to file	 * @param   array    $attribs         attributes to be added to the stylesheet	 * @param   boolean  $relative        path to file is relative to /media folder	 * @param   boolean  $path_only       return the path to the file only	 * @param   boolean  $detect_browser  detect browser to include specific browser css files	 *                                    will try to include file, file_*browser*, file_*browser*_*major*, file_*browser*_*major*_*minor*	 *                                    <table>	 *                                       <tr><th>Navigator</th>                  <th>browser</th>	<th>major.minor</th></tr>	 *	 *                                       <tr><td>Safari 3.0.x</td>               <td>konqueror</td>	<td>522.x</td></tr>	 *                                       <tr><td>Safari 3.1.x and 3.2.x</td>     <td>konqueror</td>	<td>525.x</td></tr>	 *                                       <tr><td>Safari 4.0 to 4.0.2</td>        <td>konqueror</td>	<td>530.x</td></tr>	 *                                       <tr><td>Safari 4.0.3 to 4.0.4</td>      <td>konqueror</td>	<td>531.x</td></tr>	 *                                       <tr><td>iOS 4.0 Safari</td>             <td>konqueror</td>	<td>532.x</td></tr>	 *                                       <tr><td>Safari 5.0</td>                 <td>konqueror</td>	<td>533.x</td></tr>	 *	 *                                       <tr><td>Google Chrome 1.0</td>          <td>konqueror</td>	<td>528.x</td></tr>	 *                                       <tr><td>Google Chrome 2.0</td>          <td>konqueror</td>	<td>530.x</td></tr>	 *                                       <tr><td>Google Chrome 3.0 and 4.x</td>  <td>konqueror</td>	<td>532.x</td></tr>	 *                                       <tr><td>Google Chrome 5.0</td>          <td>konqueror</td>	<td>533.x</td></tr>	 *	 *                                       <tr><td>Internet Explorer 5.5</td>      <td>msie</td>		<td>5.5</td></tr>	 *                                       <tr><td>Internet Explorer 6.x</td>      <td>msie</td>		<td>6.x</td></tr>	 *                                       <tr><td>Internet Explorer 7.x</td>      <td>msie</td>		<td>7.x</td></tr>	 *                                       <tr><td>Internet Explorer 8.x</td>      <td>msie</td>		<td>8.x</td></tr>	 *	 *                                       <tr><td>Firefox</td>                    <td>mozilla</td>	<td>5.0</td></tr>	 *                                    </table>	 *                                    a lot of others	 * @param   boolean  $detect_debug    detect debug to search for compressed files if debug is on	 *	 * @return  mixed  nothing if $path_only is false, null, path or array of path if specific css browser files were detected	 *	 * @see     JBrowser	 * @since   11.1	 */	public static function stylesheet($file, $attribs = array(), $relative = false, $path_only = false, $detect_browser = true, $detect_debug = true)	{		$includes = self::includeRelativeFiles('css', $file, $relative, $detect_browser, $detect_debug);		// If only path is required		if ($path_only)		{			if (count($includes) == 0)			{				return null;			}			elseif (count($includes) == 1)			{				return $includes[0];			}			else			{				return $includes;			}		}		// If inclusion is required		else		{			$document = JFactory::getDocument();			foreach ($includes as $include)			{				$document->addStylesheet($include, 'text/css', null, $attribs);			}		}	}	/**	 * Write a <script></script> element	 *	 * @param   string   $file            path to file	 * @param   boolean  $framework       load the JS framework	 * @param   boolean  $relative        path to file is relative to /media folder	 * @param   boolean  $path_only       return the path to the file only	 * @param   boolean  $detect_browser  detect browser to include specific browser js files	 * @param   boolean  $detect_debug    detect debug to search for compressed files if debug is on	 *	 * @return  mixed  nothing if $path_only is false, null, path or array of path if specific js browser files were detected	 *	 * @see     JHtml::stylesheet	 * @since   11.1	 */	public static function script($file, $framework = false, $relative = false, $path_only = false, $detect_browser = true, $detect_debug = true)	{		// Include MooTools framework		if ($framework)		{			self::_('behavior.framework');		}		$includes = self::includeRelativeFiles('js', $file, $relative, $detect_browser, $detect_debug);		// If only path is required		if ($path_only)		{			if (count($includes) == 0)			{				return null;			}			elseif (count($includes) == 1)			{				return $includes[0];			}			else			{				return $includes;			}		}		// If inclusion is required		else		{			$document = JFactory::getDocument();			foreach ($includes as $include)			{				$document->addScript($include);			}		}	}	/**	 * Set format related options.	 *	 * Updates the formatOptions array with all valid values in the passed	 * array. See {@see JHtml::$formatOptions} for details.	 *	 * @param   array  $options  Option key/value pairs.	 *	 * @return  void	 *	 * @since   11.1	 */	public static function setFormatOptions($options)	{		foreach ($options as $key => $val)		{			if (isset(self::$formatOptions[$key]))			{				self::$formatOptions[$key] = $val;			}		}	}	/**	 * Returns formated date according to a given format and time zone.	 *	 * @param   string   $input      String in a format accepted by date(), defaults to "now".	 * @param   string   $format     The date format specification string (see {@link PHP_MANUAL#date})	 * @param   mixed    $tz         Time zone to be used for the date.  Special cases: boolean true for user	 *                               setting, boolean false for server setting.	 * @param   boolean  $gregorian  True to use Gregorian calenar	 *	 * @return  string    A date translated by the given format and time zone.	 *	 * @see     strftime	 * @since   11.1	 */	public static function date($input = 'now', $format = null, $tz = true, $gregorian = false)	{		// Get some system objects.		$config = JFactory::getConfig();		$user = JFactory::getUser();		// UTC date converted to user time zone.		if ($tz === true)		{			// Get a date object based on UTC.			$date = JFactory::getDate($input, 'UTC');			// Set the correct time zone based on the user configuration.			$date->setTimeZone(new DateTimeZone($user->getParam('timezone', $config->get('offset'))));		}		// UTC date converted to server time zone.		elseif ($tz === false)		{			// Get a date object based on UTC.			$date = JFactory::getDate($input, 'UTC');			// Set the correct time zone based on the server configuration.			$date->setTimeZone(new DateTimeZone($config->get('offset')));		}		// No date conversion.		elseif ($tz === null)		{			$date = JFactory::getDate($input);		}		// UTC date converted to given time zone.		else		{			// Get a date object based on UTC.			$date = JFactory::getDate($input, 'UTC');			// Set the correct time zone based on the server configuration.			$date->setTimeZone(new DateTimeZone($tz));		}		// If no format is given use the default locale based format.		if (!$format)		{			$format = JText::_('DATE_FORMAT_LC1');		}		// $format is an existing language key		elseif (JFactory::getLanguage()->hasKey($format))		{			$format = JText::_($format);		}		if ($gregorian)		{			return $date->format($format, true);		}		else		{			return $date->calendar($format, true);		}	}	/**	 * Creates a tooltip with an image as button	 *	 * @param   string  $tooltip  The tip string	 * @param   mixed   $title    The title of the tooltip or an associative array with keys contained in	 *                            {'title','image','text','href','alt'} and values corresponding to parameters of the same name.	 * @param   string  $image    The image for the tip, if no text is provided	 * @param   string  $text     The text for the tip	 * @param   string  $href     An URL that will be used to create the link	 * @param   string  $alt      The alt attribute for img tag	 * @param   string  $class    CSS class for the tool tip	 *	 * @return  string	 *	 * @since   11.1	 */	public static function tooltip($tooltip, $title = '', $image = 'tooltip.png', $text = '', $href = '', $alt = 'Tooltip', $class = 'hasTip')	{		if (is_array($title))		{			foreach (array('image', 'text', 'href', 'alt', 'class') as $param)			{				if (isset($title[$param]))				{					$$param = $title[$param];				}			}			if (isset($title['title']))			{				$title = $title['title'];			}			else			{				$title = '';			}		}		$tooltip = htmlspecialchars($tooltip, ENT_COMPAT, 'UTF-8');		$title = htmlspecialchars($title, ENT_COMPAT, 'UTF-8');		$alt = htmlspecialchars($alt, ENT_COMPAT, 'UTF-8');		if (!$text)		{			$text = self::image($image, $alt, null, true);		}		if ($href)		{			$tip = '<a href="' . $href . '">' . $text . '</a>';		}		else		{			$tip = $text;		}		if ($title)		{			$tooltip = $title . '::' . $tooltip;		}		return '<span class="' . $class . '" title="' . $tooltip . '">' . $tip . '</span>';	}	/**	 * Displays a calendar control field	 *	 * @param   string  $value    The date value	 * @param   string  $name     The name of the text field	 * @param   string  $id       The id of the text field	 * @param   string  $format   The date format	 * @param   array   $attribs  Additional HTML attributes	 *	 * @return  string  HTML markup for a calendar field	 *	 * @since   11.1	 */	public static function calendar($value, $name, $id, $format = '%Y-%m-%d', $attribs = null)	{		static $done;		if ($done === null)		{			$done = array();		}		$readonly = isset($attribs['readonly']) && $attribs['readonly'] == 'readonly';		$disabled = isset($attribs['disabled']) && $attribs['disabled'] == 'disabled';		if (is_array($attribs))		{			$attribs = JArrayHelper::toString($attribs);		}		if (!$readonly && !$disabled)		{			// Load the calendar behavior			self::_('behavior.calendar');			self::_('behavior.tooltip');			// Only display the triggers once for each control.			if (!in_array($id, $done))			{				$document = JFactory::getDocument();				$document					->addScriptDeclaration(					'window.addEvent(\'domready\', function() {Calendar.setup({				// Id of the input field				inputField: "' . $id . '",				// Format of the input field				ifFormat: "' . $format . '",				// Trigger for the calendar (button ID)				button: "' . $id . '_img",				// Alignment (defaults to "Bl")				align: "Tl",				singleClick: true,				firstDay: ' . JFactory::getLanguage()->getFirstDay() . '				});});'				);				$done[] = $id;			}			return '<div class="input-append"><input type="text" title="' . (0 !== (int) $value ? self::_('date', $value, null, null) : '')				. '" name="' . $name . '" id="' . $id . '" value="' . htmlspecialchars($value, ENT_COMPAT, 'UTF-8') . '" ' . $attribs . ' />'				. '<button class="btn" id="' . $id . '_img"><i class="icon-calendar"></i></button></div>';		}		else		{			return '<input type="text" title="' . (0 !== (int) $value ? self::_('date', $value, null, null) : '')				. '" value="' . (0 !== (int) $value ? self::_('date', $value, 'Y-m-d H:i:s', null) : '') . '" ' . $attribs				. ' /><input type="hidden" name="' . $name . '" id="' . $id . '" value="' . htmlspecialchars($value, ENT_COMPAT, 'UTF-8') . '" />';		}	}	/**	 * Add a directory where JHtml should search for helpers. You may	 * either pass a string or an array of directories.	 *	 * @param   string  $path  A path to search.	 *	 * @return  array  An array with directory elements	 *	 * @since   11.1	 */	public static function addIncludePath($path = '')	{		// Force path to array		settype($path, 'array');		// Loop through the path directories		foreach ($path as $dir)		{			if (!empty($dir) && !in_array($dir, self::$includePaths))			{				jimport('joomla.filesystem.path');				array_unshift(self::$includePaths, JPath::clean($dir));			}		}		return self::$includePaths;	}	/**	 * Internal method to get a JavaScript object notation string from an array	 *	 * @param   array  $array  The array to convert to JavaScript object notation	 *	 * @return  string  JavaScript object notation representation of the array	 *	 * @since   12.2	 */	public static function getJSObject(array $array = array())	{		$elements = array();		foreach ($array as $k => $v)		{			// Don't encode either of these types			if (is_null($v) || is_resource($v))			{				continue;			}			// Safely encode as a Javascript string			$key = json_encode((string) $k);			if (is_bool($v))			{				$elements[] = $key . ': ' . ($v ? 'true' : 'false');			}			elseif (is_numeric($v))			{				$elements[] = $key . ': ' . ($v + 0);			}			elseif (is_string($v))			{				if (strpos($v, '\\') === 0)				{					// Items such as functions and JSON objects are prefixed with \, strip the prefix and don't encode them					$elements[] = $key . ': ' . substr($v, 1);				}				else				{					// The safest way to insert a string					$elements[] = $key . ': ' . json_encode((string) $v);				}			}			else			{				$elements[] = $key . ': ' . self::getJSObject(is_object($v) ? get_object_vars($v) : $v);			}		}		return '{' . implode(',', $elements) . '}';	}}
<?php/** * Verifies that class members have scope modifiers. * * PHP version 5 * * @category  PHP * @package   PHP_CodeSniffer * @author    Greg Sherwood <gsherwood@squiz.net> * @author    Marc McIntyre <mmcintyre@squiz.net> * @copyright 2006 Squiz Pty Ltd (ABN 77 084 670 600) * @license   http://matrix.squiz.net/developer/tools/php_cs/licence BSD Licence * @version   CVS: $Id: MethodScopeSniff.php 8 2010-11-06 00:40:23Z elkuku $ * @link      http://pear.php.net/package/PHP_CodeSniffer */if(class_exists('PHP_CodeSniffer_Standards_AbstractScopeSniff', true) === false){    throw new PHP_CodeSniffer_Exception('Class PHP_CodeSniffer_Standards_AbstractScopeSniff not found');}/** * Verifies that class members have scope modifiers. * * Example: * class Foo * { *     <b class="good">public function foo()</b> *     { *     } * *     <b class="bad">function foo()</b> *     { *     } * } * * @category  PHP * @package   PHP_CodeSniffer * @author    Greg Sherwood <gsherwood@squiz.net> * @author    Marc McIntyre <mmcintyre@squiz.net> * @copyright 2006 Squiz Pty Ltd (ABN 77 084 670 600) * @license   http://matrix.squiz.net/developer/tools/php_cs/licence BSD Licence * @version   Release: 1.3.0RC1 * @link      http://pear.php.net/package/PHP_CodeSniffer */class Joomla_Sniffs_Classes_MethodScopeSniff extends PHP_CodeSniffer_Standards_AbstractScopeSniff{    /**     * Constructs a Squiz_Sniffs_Scope_MethodScopeSniff.     */    public function __construct()    {        parent::__construct(array(T_CLASS, T_INTERFACE), array(T_FUNCTION));    }//function    /**     * Processes the function tokens within the class.     *     * @param PHP_CodeSniffer_File $phpcsFile The file where this token was found.     * @param integer                  $stackPtr  The position where the token was found.     * @param integer                  $currScope The current scope opener token.     *     * @return void     */    protected function processTokenWithinScope(PHP_CodeSniffer_File $phpcsFile, $stackPtr, $currScope)    {        $tokens = $phpcsFile->getTokens();        $methodName = $phpcsFile->getDeclarationName($stackPtr);        if($methodName === null)        {            // Ignore closures.            return;        }        $modifier = $phpcsFile->findPrevious(PHP_CodeSniffer_Tokens::$scopeModifiers, $stackPtr);        if(($modifier === false) || ($tokens[$modifier]['line'] !== $tokens[$stackPtr]['line']))        {            $error = sprintf('No scope modifier specified for function "%s"'            , $methodName);            $phpcsFile->addWarning($error, $stackPtr, 'Missing');        }    }//function}//class
<?php/** * @package     Joomla.Administrator * @subpackage  com_media * * @copyright   Copyright (C) 2005 - 2013 Open Source Matters, Inc. All rights reserved. * @license     GNU General Public License version 2 or later; see LICENSE.txt */defined('_JEXEC') or die;?><?php if (count($this->images) > 0 || count($this->folders) > 0) { ?><ul class="manager thumbnails">	<?php for ($i = 0, $n = count($this->folders); $i < $n; $i++) :		$this->setFolder($i);		echo $this->loadTemplate('folder');	endfor; ?>	<?php for ($i = 0, $n = count($this->images); $i < $n; $i++) :		$this->setImage($i);		echo $this->loadTemplate('image');	endfor; ?></ul><?php } else { ?>	<div id="media-noimages">		<div class="alert alert-info"><?php echo JText::_('COM_MEDIA_NO_IMAGES_FOUND'); ?></div>	</div><?php } ?>
<?php/** * @package     Joomla.Site * @subpackage  com_contact * * @copyright   Copyright (C) 2005 - 2013 Open Source Matters, Inc. All rights reserved. * @license     GNU General Public License version 2 or later; see LICENSE.txt */defined('_JEXEC') or die;JHtml::addIncludePath(JPATH_COMPONENT . '/helpers');JHtml::_('behavior.caption');echo JLayoutHelper::render('joomla.content.categories_default', $this);echo $this->loadTemplate('items');?></div>
<?php/** * @package     Joomla.Site * @subpackage  Layout * * @copyright   Copyright (C) 2005 - 2013 Open Source Matters, Inc. All rights reserved. * @license     GNU General Public License version 2 or later; see LICENSE.txt */defined('_JEXEC') or die;?></div>
<?php/** * @package     Joomla.Platform * @subpackage  Crypt * * @copyright   Copyright (C) 2005 - 2011 Open Source Matters, Inc. All rights reserved. * @license     GNU General Public License version 2 or later; see LICENSE */defined('JPATH_PLATFORM') or die;/** * JCrypt cipher for mcrypt algorithm encryption, decryption and key generation. * * @package     Joomla.Platform * @subpackage  Crypt * @since       12.1 */abstract class JCryptCipherMcrypt implements JCryptCipher{	/**	 * @var    integer  The mcrypt cipher constant.	 * @see    http://www.php.net/manual/en/mcrypt.ciphers.php	 * @since  12.1	 */	protected $type;	/**	 * @var    integer  The mcrypt block cipher mode.	 * @see    http://www.php.net/manual/en/mcrypt.constants.php	 * @since  12.1	 */	protected $mode;	/**	 * @var    string  The JCrypt key type for validation.	 * @since  12.1	 */	protected $keyType;	/**	 * Constructor.	 *	 * @since   12.1	 * @throws  RuntimeException	 */	public function __construct()	{		if (!is_callable('mcrypt_encrypt'))		{			throw new RuntimeException('The mcrypt extension is not available.');		}	}	/**	 * Method to decrypt a data string.	 *	 * @param   string     $data  The encrypted string to decrypt.	 * @param   JCryptKey  $key   The key object to use for decryption.	 *	 * @return  string  The decrypted data string.	 *	 * @since   12.1	 */	public function decrypt($data, JCryptKey $key)	{		// Validate key.		if ($key->type != $this->keyType)		{			throw new InvalidArgumentException('Invalid key of type: ' . $key->type . '.  Expected ' . $this->keyType . '.');		}		// Decrypt the data.		$decrypted = trim(mcrypt_decrypt($this->type, $key->private, $data, $this->mode, $key->public));		return $decrypted;	}	/**	 * Method to encrypt a data string.	 *	 * @param   string     $data  The data string to encrypt.	 * @param   JCryptKey  $key   The key object to use for encryption.	 *	 * @return  string  The encrypted data string.	 *	 * @since   12.1	 */	public function encrypt($data, JCryptKey $key)	{		// Validate key.		if ($key->type != $this->keyType)		{			throw new InvalidArgumentException('Invalid key of type: ' . $key->type . '.  Expected ' . $this->keyType . '.');		}		// Encrypt the data.		$encrypted = mcrypt_encrypt($this->type, $key->private, $data, $this->mode, $key->public);		return $encrypted;	}	/**	 * Method to generate a new encryption key object.	 *	 * @param   array  $options  Key generation options.	 *	 * @return  JCryptKey	 *	 * @since   12.1	 */	public function generateKey(array $options = array())	{		// Create the new encryption key object.		$key = new JCryptKey($this->keyType);		// Generate an initialisation vector based on the algorithm.		$key->public = mcrypt_create_iv(mcrypt_get_iv_size($this->type, $this->mode));		// Get the salt and password setup.		$salt = (isset($options['salt'])) ? $options['salt'] : substr(pack("h*", md5(mt_rand())), 0, 16);		$password = (isset($options['password'])) ? $options['password'] : 'J00ml4R0ck$!';		// Generate the derived key.		$key->private = $this->pbkdf2($password, $salt, mcrypt_get_key_size($this->type, $this->mode));		return $key;	}	/**	 * PBKDF2 Implementation for deriving keys.	 *	 * @param   string   $p   Password	 * @param   string   $s   Salt	 * @param   integer  $kl  Key length	 * @param   integer  $c   Iteration count	 * @param   string   $a   Hash algorithm	 *	 * @return  string  The derived key.	 *	 * @see     http://en.wikipedia.org/wiki/PBKDF2	 * @see     http://www.ietf.org/rfc/rfc2898.txt	 * @since   12.1	 */	public function pbkdf2($p, $s, $kl, $c = 10000, $a = 'sha256')	{		// Hash length.		$hl = strlen(hash($a, null, true));		// Key blocks to compute.		$kb = ceil($kl / $hl);		// Derived key.		$dk = '';		// Create the key.		for ($block = 1; $block <= $kb; $block++)		{			// Initial hash for this block.			$ib = $b = hash_hmac($a, $s . pack('N', $block), $p, true);			// Perform block iterations.			for ($i = 1; $i < $c; $i++)			{				$ib ^= ($b = hash_hmac($a, $b, $p, true));			}			// Append the iterated block.			$dk .= $ib;		}		// Return derived key of correct length.		return substr($dk, 0, $kl);	}}
<?php/** * @package     Joomla.Platform * @subpackage  Session * * @copyright   Copyright (C) 2005 - 2013 Open Source Matters, Inc. All rights reserved. * @license     GNU General Public License version 2 or later; see LICENSE */defined('JPATH_PLATFORM') or die;/** * Memcached session storage handler for PHP * * @package     Joomla.Platform * @subpackage  Session * @since       11.1 */class JSessionStorageMemcached extends JSessionStorage{	/**	 * Constructor	 *	 * @param   array  $options  Optional parameters.	 *	 * @since   11.1	 * @throws  RuntimeException	 */	public function __construct($options = array())	{		if (!self::isSupported())		{			throw new RuntimeException('Memcached Extension is not available', 404);		}		parent::__construct($options);		$config = JFactory::getConfig();		// This will be an array of loveliness		// @todo: multiple servers		$this->_servers = array(			array(				'host' => $config->get('memcache_server_host', 'localhost'),				'port' => $config->get('memcache_server_port', 11211)			)		);	}	/**	 * Register the functions of this class with PHP's session handler	 *	 * @return  void	 *	 * @since   12.2	 */	public function register()	{		ini_set('session.save_path', $this->_servers['host'] . ':' . $this->_servers['port']);		ini_set('session.save_handler', 'memcached');	}	/**	 * Test to see if the SessionHandler is available.	 *	 * @return boolean  True on success, false otherwise.	 *	 * @since   12.1	 */	static public function isSupported()	{		return (extension_loaded('memcached') && class_exists('Memcached'));	}}
<?php/** * @package     Joomla.Administrator * @subpackage  com_banners * * @copyright   Copyright (C) 2005 - 2013 Open Source Matters, Inc. All rights reserved. * @license     GNU General Public License version 2 or later; see LICENSE.txt */defined('_JEXEC') or die;/** * Tracks list controller class. * * @package     Joomla.Administrator * @subpackage  com_banners * @since       1.6 */class BannersControllerTracks extends JControllerLegacy{	/**	 * @var		string	The context for persistent state.	 * @since   1.6	 */	protected $context = 'com_banners.tracks';	/**	 * Proxy for getModel.	 *	 * @param   string	$name	The name of the model.	 * @param   string	$prefix	The prefix for the model class name.	 *	 * @return  JModel	 * @since   1.6	 */	public function getModel($name = 'Tracks', $prefix = 'BannersModel', $config = array())	{		$model = parent::getModel($name, $prefix, array('ignore_request' => true));		return $model;	}	/**	 * Display method for the raw track data.	 *	 * @param   boolean			If true, the view output will be cached	 * @param   array  An array of safe url parameters and their variable types, for valid values see {@link JFilterInput::clean()}.	 *	 * @return  JController		This object to support chaining.	 * @since   1.5	 * @todo	This should be done as a view, not here!	 */	public function display($cachable = false, $urlparams = false)	{		// Get the document object.		$document	= JFactory::getDocument();		$vName		= 'tracks';		$vFormat	= 'raw';		// Get and render the view.		if ($view = $this->getView($vName, $vFormat))		{			// Get the model for the view.			$model = $this->getModel($vName);			// Load the filter state.			$app = JFactory::getApplication();			$type = $app->getUserState($this->context.'.filter.type');			$model->setState('filter.type', $type);			$begin = $app->getUserState($this->context.'.filter.begin');			$model->setState('filter.begin', $begin);			$end = $app->getUserState($this->context.'.filter.end');			$model->setState('filter.end', $end);			$categoryId = $app->getUserState($this->context.'.filter.category_id');			$model->setState('filter.category_id', $categoryId);			$clientId = $app->getUserState($this->context.'.filter.client_id');			$model->setState('filter.client_id', $clientId);			$model->setState('list.limit', 0);			$model->setState('list.start', 0);			$form = JRequest::getVar('jform');			$model->setState('basename', $form['basename']);			$model->setState('compressed', $form['compressed']);			$config = JFactory::getConfig();			$cookie_domain = $config->get('cookie_domain', '');			$cookie_path = $config->get('cookie_path', '/');			setcookie(JApplication::getHash($this->context.'.basename'), $form['basename'], time() + 365 * 86400, $cookie_path, $cookie_domain);			setcookie(JApplication::getHash($this->context.'.compressed'), $form['compressed'], time() + 365 * 86400, $cookie_path, $cookie_domain);			// Push the model into the view (as default).			$view->setModel($model, true);			// Push document object into the view.			$view->document = $document;			$view->display();		}	}}
<?php/** * @package     Joomla.Platform * @subpackage  Form * * @copyright   Copyright (C) 2005 - 2013 Open Source Matters, Inc. All rights reserved. * @license     GNU General Public License version 2 or later; see LICENSE */defined('JPATH_PLATFORM') or die;JFormHelper::loadFieldClass('list');/** * Form Field class for the Joomla Platform. * Supports a list of installed application languages * * @package     Joomla.Platform * @subpackage  Form * @see         JFormFieldContentLanguage for a select list of content languages. * @since       11.1 */class JFormFieldLanguage extends JFormFieldList{	/**	 * The form field type.	 *	 * @var    string	 * @since  11.1	 */	protected $type = 'Language';	/**	 * Method to get the field options.	 *	 * @return  array  The field option objects.	 *	 * @since   11.1	 */	protected function getOptions()	{		// Initialize some field attributes.		$client = (string) $this->element['client'];		if ($client != 'site' && $client != 'administrator')		{			$client = 'site';		}		// Merge any additional options in the XML definition.		$options = array_merge(			parent::getOptions(),			JLanguageHelper::createLanguageList($this->value, constant('JPATH_' . strtoupper($client)), true, true)		);		return $options;	}}
<?php/** * @package     Joomla.Administrator * @subpackage  Template.hathor * * @copyright   Copyright (C) 2005 - 2013 Open Source Matters, Inc. All rights reserved. * @license     GNU General Public License version 2 or later; see LICENSE.txt */defined('_JEXEC') or die;$id      = empty($displayData['id']) ? '' : (' id="' . $displayData['id'] . '"');$target  = empty($displayData['target']) ? '' : (' target="' . $displayData['target'] . '"');$onclick = empty($displayData['onclick']) ? '' : (' onclick="' . $displayData['onclick'] . '"');$title   = empty($displayData['title']) ? '' : (' title="' . $this->escape($displayData['title']) . '"');$text    = empty($displayData['text']) ? '' : ('<span>' . $displayData['text'] . '</span>')?><div class="quickicon-wrapper"<?php echo $id; ?>>	<div class="icon">		<a href="<?php echo $displayData['link']; ?>"<?php echo $target . $onclick . $title; ?>>			<?php echo JHtml::_('image', empty($displayData['icon']) ? '' : $displayData['icon'], empty($displayData['alt']) ? null : htmlspecialchars($displayData['alt']), null, true); ?>			<?php echo $text; ?>		</a>	</div></div>
<?php/** * @package     Joomla.Platform * @subpackage  Log * * @copyright   Copyright (C) 2005 - 2013 Open Source Matters, Inc. All rights reserved. * @license     GNU General Public License version 2 or later; see LICENSE */defined('JPATH_PLATFORM') or die;/** * Joomla! Logger Base Class * * This class is used to be the basis of logger classes to allow for defined functions * to exist regardless of the child class. * * @package     Joomla.Platform * @subpackage  Log * @since       12.2 */abstract class JLogLogger{	/**	 * Options array for the JLog instance.	 * @var    array	 * @since  12.2	 */	protected $options = array();	/**	 * @var    array  Translation array for JLogEntry priorities to text strings.	 * @since  12.2	 */	protected $priorities = array(		JLog::EMERGENCY => 'EMERGENCY',		JLog::ALERT => 'ALERT',		JLog::CRITICAL => 'CRITICAL',		JLog::ERROR => 'ERROR',		JLog::WARNING => 'WARNING',		JLog::NOTICE => 'NOTICE',		JLog::INFO => 'INFO',		JLog::DEBUG => 'DEBUG');	/**	 * Constructor.	 *	 * @param   array  &$options  Log object options.	 *	 * @since   12.2	 */	public function __construct(array &$options)	{		// Set the options for the class.		$this->options = & $options;	}	/**	 * Method to add an entry to the log.	 *	 * @param   JLogEntry  $entry  The log entry object to add to the log.	 *	 * @return  void	 *	 * @since   12.2	 */	abstract public function addEntry(JLogEntry $entry);}/** * Deprecated class placeholder.  You should use JAccessRule instead. * * @package     Joomla.Platform * @subpackage  Access * @since       11.1 * @deprecated  13.3 */abstract class JLogger extends JLogLogger{	/**	 * Constructor.	 *	 * @param   array  &$options  Log object options.	 *	 * @since   11.1	 * @deprecated  13.3	 */	public function __construct(array &$options)	{		JLog::add('JLogger is deprecated. Use JLogLogger instead.', JLog::WARNING, 'deprecated');		parent::__construct($options);	}}
<?php/** * @package     Joomla.Installation * @subpackage  Application * * @copyright   Copyright (C) 2005 - 2013 Open Source Matters, Inc. All rights reserved. * @license     GNU General Public License version 2 or later; see LICENSE.txt */defined('_JEXEC') or die;// Define the base path and require the other definesdefine('JPATH_BASE', dirname(__DIR__));require_once __DIR__ . '/defines.php';// Launch the applicationrequire_once __DIR__ . '/framework.php';// Register the Installation applicationJLoader::registerPrefix('Installation', JPATH_INSTALLATION);// Register the application's router due to non-standard includeJLoader::register('JRouterInstallation', __DIR__ . '/router.php');
<?php/** * @package     Joomla.Site * @subpackage  com_weblinks * * @copyright   Copyright (C) 2005 - 2013 Open Source Matters, Inc. All rights reserved. * @license     GNU General Public License version 2 or later; see LICENSE.txt */defined('_JEXEC') or die;JHtml::addIncludePath(JPATH_COMPONENT.'/helpers');?><div class="weblink-category<?php echo $this->pageclass_sfx;?>"><?php if ($this->params->get('show_page_heading')) : ?><h1>	<?php echo $this->escape($this->params->get('page_heading')); ?></h1><?php endif; ?><?php if ($this->params->get('show_category_title', 1)) : ?><h2>	<?php echo JHtml::_('content.prepare', $this->category->title, '', 'com_weblinks.category'); ?></h2><?php endif; ?><?php if ($this->params->get('show_description', 1) || $this->params->def('show_description_image', 1)) : ?>	<div class="category-desc">	<?php if ($this->params->get('show_description_image') && $this->category->getParams()->get('image')) : ?>		<img src="<?php echo $this->category->getParams()->get('image'); ?>"/>	<?php endif; ?>	<?php if ($this->params->get('show_description') && $this->category->description) : ?>		<?php echo JHtml::_('content.prepare', $this->category->description, '', 'com_weblinks.category'); ?>	<?php endif; ?>	<div class="clr"></div>	</div><?php endif; ?><?php echo $this->loadTemplate('items'); ?><?php if (!empty($this->children[$this->category->id])&& $this->maxLevel != 0) : ?>	<div class="cat-children">	<h3><?php echo JText::_('JGLOBAL_SUBCATEGORIES'); ?></h3>	<?php echo $this->loadTemplate('children'); ?>	</div><?php endif; ?></div>
<?php/** * @package     Joomla.Site * @subpackage  com_contact * * @copyright   Copyright (C) 2005 - 2013 Open Source Matters, Inc. All rights reserved. * @license     GNU General Public License version 2 or later; see LICENSE.txt */defined('_JEXEC') or die;?><?php if (JPluginHelper::isEnabled('user', 'profile')) :	$fields = $this->item->profile->getFieldset('profile'); ?><div class="contact-profile" id="users-profile-custom">	<dl class="dl-horizontal">	<?php foreach ($fields as $profile) :		if ($profile->value) :			echo '<dt>'.$profile->label.'</dt>';			$profile->text = htmlspecialchars($profile->value, ENT_COMPAT, 'UTF-8');			switch ($profile->id) :				case "profile_website":					$v_http = substr($profile->profile_value, 0, 4);					if ($v_http == "http") :						echo '<dd><a href="'.$profile->text.'">'.$profile->text.'</a></dd>';					else :						echo '<dd><a href="http://'.$profile->text.'">'.$profile->text.'</a></dd>';					endif;					break;				default:					echo '<dd>'.$profile->text.'</dd>';					break;			endswitch;		endif;	endforeach; ?>	</dl></div><?php endif; ?>
<?php/** * @package     Joomla.Platform * @subpackage  Document * * @copyright   Copyright (C) 2005 - 2013 Open Source Matters, Inc. All rights reserved. * @license     GNU General Public License version 2 or later; see LICENSE */defined('JPATH_PLATFORM') or die;/** * Component renderer * * @package     Joomla.Platform * @subpackage  Document * @since       11.1 */class JDocumentRendererComponent extends JDocumentRenderer{	/**	 * Renders a component script and returns the results as a string	 *	 * @param   string  $component  The name of the component to render	 * @param   array   $params     Associative array of values	 * @param   string  $content    Content script	 *	 * @return  string  The output of the script	 *	 * @since   11.1	 */	public function render($component = null, $params = array(), $content = null)	{		return $content;	}}
<?php/** * @package     Joomla.Administrator * @subpackage  com_media * * @copyright   Copyright (C) 2005 - 2013 Open Source Matters, Inc. All rights reserved. * @license     GNU General Public License version 2 or later; see LICENSE.txt */defined('_JEXEC') or die;jimport('joomla.filesystem.folder');jimport('joomla.filesystem.file');/** * Media Component List Model * * @package     Joomla.Administrator * @subpackage  com_media * @since       1.5 */class MediaModelList extends JModelLegacy{	public function getState($property = null, $default = null)	{		static $set;		if (!$set)		{			$input  = JFactory::getApplication()->input;			$folder = $input->get('folder', '', 'path');			$this->setState('folder', $folder);			$parent = str_replace("\\", "/", dirname($folder));			$parent = ($parent == '.') ? null : $parent;			$this->setState('parent', $parent);			$set = true;		}		return parent::getState($property, $default);	}	public function getImages()	{		$list = $this->getList();		return $list['images'];	}	public function getFolders()	{		$list = $this->getList();		return $list['folders'];	}	public function getDocuments()	{		$list = $this->getList();		return $list['docs'];	}	/**	 * Build imagelist	 *	 * @param string $listFolder The image directory to display	 * @since 1.5	 */	public function getList()	{		static $list;		// Only process the list once per request		if (is_array($list))		{			return $list;		}		// Get current path from request		$current = $this->getState('folder');		// If undefined, set to empty		if ($current == 'undefined')		{			$current = '';		}		if (strlen($current) > 0)		{			$basePath = COM_MEDIA_BASE.'/'.$current;		}		else		{			$basePath = COM_MEDIA_BASE;		}		$mediaBase = str_replace(DIRECTORY_SEPARATOR, '/', COM_MEDIA_BASE.'/');		$images		= array ();		$folders	= array ();		$docs		= array ();		$fileList = false;		$folderList = false;		if (file_exists($basePath))		{			// Get the list of files and folders from the given folder			$fileList	= JFolder::files($basePath);			$folderList = JFolder::folders($basePath);		}		// Iterate over the files if they exist		if ($fileList !== false)		{			foreach ($fileList as $file)			{				if (is_file($basePath.'/'.$file) && substr($file, 0, 1) != '.' && strtolower($file) !== 'index.html')				{					$tmp = new JObject;					$tmp->name = $file;					$tmp->title = $file;					$tmp->path = str_replace(DIRECTORY_SEPARATOR, '/', JPath::clean($basePath . '/' . $file));					$tmp->path_relative = str_replace($mediaBase, '', $tmp->path);					$tmp->size = filesize($tmp->path);					$ext = strtolower(JFile::getExt($file));					switch ($ext)					{						// Image						case 'jpg':						case 'png':						case 'gif':						case 'xcf':						case 'odg':						case 'bmp':						case 'jpeg':						case 'ico':							$info = @getimagesize($tmp->path);							$tmp->width		= @$info[0];							$tmp->height	= @$info[1];							$tmp->type		= @$info[2];							$tmp->mime		= @$info['mime'];							if (($info[0] > 60) || ($info[1] > 60))							{								$dimensions = MediaHelper::imageResize($info[0], $info[1], 60);								$tmp->width_60 = $dimensions[0];								$tmp->height_60 = $dimensions[1];							}							else {								$tmp->width_60 = $tmp->width;								$tmp->height_60 = $tmp->height;							}							if (($info[0] > 16) || ($info[1] > 16))							{								$dimensions = MediaHelper::imageResize($info[0], $info[1], 16);								$tmp->width_16 = $dimensions[0];								$tmp->height_16 = $dimensions[1];							}							else {								$tmp->width_16 = $tmp->width;								$tmp->height_16 = $tmp->height;							}							$images[] = $tmp;							break;						// Non-image document						default:							$tmp->icon_32 = "media/mime-icon-32/".$ext.".png";							$tmp->icon_16 = "media/mime-icon-16/".$ext.".png";							$docs[] = $tmp;							break;					}				}			}		}		// Iterate over the folders if they exist		if ($folderList !== false)		{			foreach ($folderList as $folder)			{				$tmp = new JObject;				$tmp->name = basename($folder);				$tmp->path = str_replace(DIRECTORY_SEPARATOR, '/', JPath::clean($basePath . '/' . $folder));				$tmp->path_relative = str_replace($mediaBase, '', $tmp->path);				$count = MediaHelper::countFiles($tmp->path);				$tmp->files = $count[0];				$tmp->folders = $count[1];				$folders[] = $tmp;			}		}		$list = array('folders' => $folders, 'docs' => $docs, 'images' => $images);		return $list;	}}
<?php/** * @package     Joomla.Administrator * @subpackage  com_weblinks * * @copyright   Copyright (C) 2005 - 2013 Open Source Matters, Inc. All rights reserved. * @license     GNU General Public License version 2 or later; see LICENSE.txt */defined('JPATH_BASE') or die;/** * Supports an HTML select list of categories * * @package     Joomla.Administrator * @subpackage  com_weblinks * @since       1.6 */class JFormFieldOrdering extends JFormField{	/**	 * The form field type.	 *	 * @var		string	 * @since   1.6	 */	protected $type = 'Ordering';	/**	 * Method to get the field input markup.	 *	 * @return  string	The field input markup.	 * @since   1.6	 */	protected function getInput()	{		$html = array();		$attr = '';		// Initialize some field attributes.		$attr .= $this->element['class'] ? ' class="'.(string) $this->element['class'].'"' : '';		$attr .= ((string) $this->element['disabled'] == 'true') ? ' disabled="disabled"' : '';		$attr .= $this->element['size'] ? ' size="'.(int) $this->element['size'].'"' : '';		// Initialize JavaScript field attributes.		$attr .= $this->element['onchange'] ? ' onchange="'.(string) $this->element['onchange'].'"' : '';		// Get some field values from the form.		$weblinkId	= (int) $this->form->getValue('id');		$categoryId	= (int) $this->form->getValue('catid');		// Build the query for the ordering list.		$query = 'SELECT ordering AS value, title AS text' .				' FROM #__weblinks' .				' WHERE catid = ' . (int) $categoryId .				' ORDER BY ordering';		// Create a read-only list (no name) with a hidden input to store the value.		if ((string) $this->element['readonly'] == 'true')		{			$html[] = JHtml::_('list.ordering', '', $query, trim($attr), $this->value, $weblinkId ? 0 : 1);			$html[] = '<input type="hidden" name="'.$this->name.'" value="'.$this->value.'"/>';		}		// Create a regular list.		else {			$html[] = JHtml::_('list.ordering', $this->name, $query, trim($attr), $this->value, $weblinkId ? 0 : 1);		}		return implode($html);	}}
<?php/** * @package     Joomla.Administrator * @subpackage  com_menus * * @copyright   Copyright (C) 2005 - 2013 Open Source Matters, Inc. All rights reserved. * @license     GNU General Public License version 2 or later; see LICENSE.txt */defined('_JEXEC') or die;/** * Base controller class for Menu Manager. * * @package     Joomla.Administrator * @subpackage  com_menus * @since       1.6 */class MenusController extends JControllerLegacy{	/**	 * Method to display a view.	 *	 * @param   boolean			If true, the view output will be cached	 * @param   array  An array of safe url parameters and their variable types, for valid values see {@link JFilterInput::clean()}.	 *	 * @return  JController		This object to support chaining.	 * @since   1.5	 */	public function display($cachable = false, $urlparams = false)	{		require_once JPATH_COMPONENT.'/helpers/menus.php';		$view   = $this->input->get('view', 'menus');		$layout = $this->input->get('layout', 'default');		$id     = $this->input->getInt('id');		// Check for edit form.		if ($view == 'menu' && $layout == 'edit' && !$this->checkEditId('com_menus.edit.menu', $id)) {			// Somehow the person just went to the form - we don't allow that.			$this->setError(JText::sprintf('JLIB_APPLICATION_ERROR_UNHELD_ID', $id));			$this->setMessage($this->getError(), 'error');			$this->setRedirect(JRoute::_('index.php?option=com_menus&view=menus', false));			return false;		}		elseif ($view == 'item' && $layout == 'edit' && !$this->checkEditId('com_menus.edit.item', $id)) {			// Somehow the person just went to the form - we don't allow that.			$this->setError(JText::sprintf('JLIB_APPLICATION_ERROR_UNHELD_ID', $id));			$this->setMessage($this->getError(), 'error');			$this->setRedirect(JRoute::_('index.php?option=com_menus&view=items', false));			return false;		}		parent::display();		return $this;	}}
<?php/** * @package     Joomla.Platform * @subpackage  HTTP * * @copyright   Copyright (C) 2005 - 2013 Open Source Matters, Inc. All rights reserved. * @license     GNU General Public License version 2 or later; see LICENSE */defined('JPATH_PLATFORM') or die;/** * HTTP client class. * * @package     Joomla.Platform * @subpackage  HTTP * @since       11.3 */class JHttp{	/**	 * @var    JRegistry  Options for the HTTP client.	 * @since  11.3	 */	protected $options;	/**	 * @var    JHttpTransport  The HTTP transport object to use in sending HTTP requests.	 * @since  11.3	 */	protected $transport;	/**	 * Constructor.	 *	 * @param   JRegistry       $options    Client options object. If the registry contains any headers.* elements,	 *                                      these will be added to the request headers.	 * @param   JHttpTransport  $transport  The HTTP transport object.	 *	 * @since   11.3	 */	public function __construct(JRegistry $options = null, JHttpTransport $transport = null)	{		$this->options   = isset($options) ? $options : new JRegistry;		$this->transport = isset($transport) ? $transport : JHttpFactory::getAvailableDriver($this->options);	}	/**	 * Get an option from the HTTP client.	 *	 * @param   string  $key  The name of the option to get.	 *	 * @return  mixed  The option value.	 *	 * @since   11.3	 */	public function getOption($key)	{		return $this->options->get($key);	}	/**	 * Set an option for the HTTP client.	 *	 * @param   string  $key    The name of the option to set.	 * @param   mixed   $value  The option value to set.	 *	 * @return  JHttp  This object for method chaining.	 *	 * @since   11.3	 */	public function setOption($key, $value)	{		$this->options->set($key, $value);		return $this;	}	/**	 * Method to send the OPTIONS command to the server.	 *	 * @param   string   $url      Path to the resource.	 * @param   array    $headers  An array of name-value pairs to include in the header of the request.	 * @param   integer  $timeout  Read timeout in seconds.	 *	 * @return  JHttpResponse	 *	 * @since   11.3	 */	public function options($url, array $headers = null, $timeout = null)	{		// Look for headers set in the options.		$temp = (array) $this->options->get('headers');		foreach ($temp as $key => $val)		{			if (!isset($headers[$key]))			{				$headers[$key] = $val;			}		}		// Look for timeout set in the options.		if ($timeout === null && $this->options->exists('timeout'))		{			$timeout = $this->options->get('timeout');		}		return $this->transport->request('OPTIONS', new JUri($url), null, $headers, $timeout, $this->options->get('userAgent', null));	}	/**	 * Method to send the HEAD command to the server.	 *	 * @param   string   $url      Path to the resource.	 * @param   array    $headers  An array of name-value pairs to include in the header of the request.	 * @param   integer  $timeout  Read timeout in seconds.	 *	 * @return  JHttpResponse	 *	 * @since   11.3	 */	public function head($url, array $headers = null, $timeout = null)	{		// Look for headers set in the options.		$temp = (array) $this->options->get('headers');		foreach ($temp as $key => $val)		{			if (!isset($headers[$key]))			{				$headers[$key] = $val;			}		}		// Look for timeout set in the options.		if ($timeout === null && $this->options->exists('timeout'))		{			$timeout = $this->options->get('timeout');		}		return $this->transport->request('HEAD', new JUri($url), null, $headers, $timeout, $this->options->get('userAgent', null));	}	/**	 * Method to send the GET command to the server.	 *	 * @param   string   $url      Path to the resource.	 * @param   array    $headers  An array of name-value pairs to include in the header of the request.	 * @param   integer  $timeout  Read timeout in seconds.	 *	 * @return  JHttpResponse	 *	 * @since   11.3	 */	public function get($url, array $headers = null, $timeout = null)	{		// Look for headers set in the options.		$temp = (array) $this->options->get('headers');		foreach ($temp as $key => $val)		{			if (!isset($headers[$key]))			{				$headers[$key] = $val;			}		}		// Look for timeout set in the options.		if ($timeout === null && $this->options->exists('timeout'))		{			$timeout = $this->options->get('timeout');		}		return $this->transport->request('GET', new JUri($url), null, $headers, $timeout, $this->options->get('userAgent', null));	}	/**	 * Method to send the POST command to the server.	 *	 * @param   string   $url      Path to the resource.	 * @param   mixed    $data     Either an associative array or a string to be sent with the request.	 * @param   array    $headers  An array of name-value pairs to include in the header of the request	 * @param   integer  $timeout  Read timeout in seconds.	 *	 * @return  JHttpResponse	 *	 * @since   11.3	 */	public function post($url, $data, array $headers = null, $timeout = null)	{		// Look for headers set in the options.		$temp = (array) $this->options->get('headers');		foreach ($temp as $key => $val)		{			if (!isset($headers[$key]))			{				$headers[$key] = $val;			}		}		// Look for timeout set in the options.		if ($timeout === null && $this->options->exists('timeout'))		{			$timeout = $this->options->get('timeout');		}		return $this->transport->request('POST', new JUri($url), $data, $headers, $timeout, $this->options->get('userAgent', null));	}	/**	 * Method to send the PUT command to the server.	 *	 * @param   string   $url      Path to the resource.	 * @param   mixed    $data     Either an associative array or a string to be sent with the request.	 * @param   array    $headers  An array of name-value pairs to include in the header of the request.	 * @param   integer  $timeout  Read timeout in seconds.	 *	 * @return  JHttpResponse	 *	 * @since   11.3	 */	public function put($url, $data, array $headers = null, $timeout = null)	{		// Look for headers set in the options.		$temp = (array) $this->options->get('headers');		foreach ($temp as $key => $val)		{			if (!isset($headers[$key]))			{				$headers[$key] = $val;			}		}		// Look for timeout set in the options.		if ($timeout === null && $this->options->exists('timeout'))		{			$timeout = $this->options->get('timeout');		}		return $this->transport->request('PUT', new JUri($url), $data, $headers, $timeout, $this->options->get('userAgent', null));	}	/**	 * Method to send the DELETE command to the server.	 *	 * @param   string   $url      Path to the resource.	 * @param   array    $headers  An array of name-value pairs to include in the header of the request.	 * @param   integer  $timeout  Read timeout in seconds.	 *	 * @return  JHttpResponse	 *	 * @since   11.3	 */	public function delete($url, array $headers = null, $timeout = null)	{		// Look for headers set in the options.		$temp = (array) $this->options->get('headers');		foreach ($temp as $key => $val)		{			if (!isset($headers[$key]))			{				$headers[$key] = $val;			}		}		// Look for timeout set in the options.		if ($timeout === null && $this->options->exists('timeout'))		{			$timeout = $this->options->get('timeout');		}		return $this->transport->request('DELETE', new JUri($url), null, $headers, $timeout, $this->options->get('userAgent', null));	}	/**	 * Method to send the TRACE command to the server.	 *	 * @param   string   $url      Path to the resource.	 * @param   array    $headers  An array of name-value pairs to include in the header of the request.	 * @param   integer  $timeout  Read timeout in seconds.	 *	 * @return  JHttpResponse	 *	 * @since   11.3	 */	public function trace($url, array $headers = null, $timeout = null)	{		// Look for headers set in the options.		$temp = (array) $this->options->get('headers');		foreach ($temp as $key => $val)		{			if (!isset($headers[$key]))			{				$headers[$key] = $val;			}		}		// Look for timeout set in the options.		if ($timeout === null && $this->options->exists('timeout'))		{			$timeout = $this->options->get('timeout');		}		return $this->transport->request('TRACE', new JUri($url), null, $headers, $timeout, $this->options->get('userAgent', null));	}	/**	 * Method to send the PATCH command to the server.	 *	 * @param   string   $url      Path to the resource.	 * @param   mixed    $data     Either an associative array or a string to be sent with the request.	 * @param   array    $headers  An array of name-value pairs to include in the header of the request.	 * @param   integer  $timeout  Read timeout in seconds.	 *	 * @return  JHttpResponse	 *	 * @since   12.2	 */	public function patch($url, $data, array $headers = null, $timeout = null)	{		// Look for headers set in the options.		$temp = (array) $this->options->get('headers');		foreach ($temp as $key => $val)		{			if (!isset($headers[$key]))			{				$headers[$key] = $val;			}		}		// Look for timeout set in the options.		if ($timeout === null && $this->options->exists('timeout'))		{			$timeout = $this->options->get('timeout');		}		return $this->transport->request('PATCH', new JUri($url), $data, $headers, $timeout, $this->options->get('userAgent', null));	}}
<?php/** * @package     Joomla.Administrator * @subpackage  com_finder * * @copyright   Copyright (C) 2005 - 2013 Open Source Matters, Inc. All rights reserved. * @license     GNU General Public License version 2 or later; see LICENSE */defined('_JEXEC') or die;/** * Porter English stemmer class for the Finder indexer package. * * This class was adapted from one written by Richard Heyes. * See copyright and link information above. * * @package     Joomla.Administrator * @subpackage  com_finder * @since       2.5 */class FinderIndexerStemmerPorter_En extends FinderIndexerStemmer{	/**	 * Regex for matching a consonant.	 *	 * @var    string	 * @since  2.5	 */	private static $_regex_consonant = '(?:[bcdfghjklmnpqrstvwxz]|(?<=[aeiou])y|^y)';	/**	 * Regex for matching a vowel	 * @var    string	 * @since  2.5	 */	private static $_regex_vowel = '(?:[aeiou]|(?<![aeiou])y)';	/**	 * Method to stem a token and return the root.	 *	 * @param   string  $token  The token to stem.	 * @param   string  $lang   The language of the token.	 *	 * @return  string  The root token.	 *	 * @since   2.5	 */	public function stem($token, $lang)	{		// Check if the token is long enough to merit stemming.		if (strlen($token) <= 2)		{			return $token;		}		// Check if the language is English or All.		if ($lang !== 'en' && $lang != '*')		{			return $token;		}		// Stem the token if it is not in the cache.		if (!isset($this->cache[$lang][$token]))		{			// Stem the token.			$result = $token;			$result = self::_step1ab($result);			$result = self::_step1c($result);			$result = self::_step2($result);			$result = self::_step3($result);			$result = self::_step4($result);			$result = self::_step5($result);			// Add the token to the cache.			$this->cache[$lang][$token] = $result;		}		return $this->cache[$lang][$token];	}	/**	 * Step 1	 *	 * @param   string  $word  The token to stem.	 *	 * @return  string	 *	 * @since   2.5	 */	private static function _step1ab($word)	{		// Part a		if (substr($word, -1) == 's')		{				self::_replace($word, 'sses', 'ss')			or self::_replace($word, 'ies', 'i')			or self::_replace($word, 'ss', 'ss')			or self::_replace($word, 's', '');		}		// Part b		if (substr($word, -2, 1) != 'e' or !self::_replace($word, 'eed', 'ee', 0))		{			// First rule			$v = self::$_regex_vowel;			// ing and ed			// Note use of && and OR, for precedence reasons			if (preg_match("#$v+#", substr($word, 0, -3)) && self::_replace($word, 'ing', '')				or preg_match("#$v+#", substr($word, 0, -2)) && self::_replace($word, 'ed', ''))			{				// If one of above two test successful				if (!self::_replace($word, 'at', 'ate') and !self::_replace($word, 'bl', 'ble') and !self::_replace($word, 'iz', 'ize'))				{					// Double consonant ending					if (self::_doubleConsonant($word) and substr($word, -2) != 'll' and substr($word, -2) != 'ss' and substr($word, -2) != 'zz')					{						$word = substr($word, 0, -1);					}					elseif (self::_m($word) == 1 and self::_cvc($word))					{						$word .= 'e';					}				}			}		}		return $word;	}	/**	 * Step 1c	 *	 * @param   string  $word  The token to stem.	 *	 * @return  string	 *	 * @since   2.5	 */	private static function _step1c($word)	{		$v = self::$_regex_vowel;		if (substr($word, -1) == 'y' && preg_match("#$v+#", substr($word, 0, -1)))		{			self::_replace($word, 'y', 'i');		}		return $word;	}	/**	 * Step 2	 *	 * @param   string  $word  The token to stem.	 *	 * @return  string	 *	 * @since   2.5	 */	private static function _step2($word)	{		switch (substr($word, -2, 1))		{			case 'a':					self::_replace($word, 'ational', 'ate', 0)				or self::_replace($word, 'tional', 'tion', 0);				break;			case 'c':					self::_replace($word, 'enci', 'ence', 0)				or self::_replace($word, 'anci', 'ance', 0);				break;			case 'e':				self::_replace($word, 'izer', 'ize', 0);				break;			case 'g':				self::_replace($word, 'logi', 'log', 0);				break;			case 'l':					self::_replace($word, 'entli', 'ent', 0)				or self::_replace($word, 'ousli', 'ous', 0)				or self::_replace($word, 'alli', 'al', 0)				or self::_replace($word, 'bli', 'ble', 0)				or self::_replace($word, 'eli', 'e', 0);				break;			case 'o':					self::_replace($word, 'ization', 'ize', 0)				or self::_replace($word, 'ation', 'ate', 0)				or self::_replace($word, 'ator', 'ate', 0);				break;			case 's':					self::_replace($word, 'iveness', 'ive', 0)				or self::_replace($word, 'fulness', 'ful', 0)				or self::_replace($word, 'ousness', 'ous', 0)				or self::_replace($word, 'alism', 'al', 0);				break;			case 't':					self::_replace($word, 'biliti', 'ble', 0)				or self::_replace($word, 'aliti', 'al', 0)				or self::_replace($word, 'iviti', 'ive', 0);				break;		}		return $word;	}	/**	 * Step 3	 *	 * @param   string  $word  The token to stem.	 *	 * @return  string	 *	 * @since   2.5	 */	private static function _step3($word)	{		switch (substr($word, -2, 1))		{			case 'a':				self::_replace($word, 'ical', 'ic', 0);				break;			case 's':				self::_replace($word, 'ness', '', 0);				break;			case 't':					self::_replace($word, 'icate', 'ic', 0)				or self::_replace($word, 'iciti', 'ic', 0);				break;			case 'u':				self::_replace($word, 'ful', '', 0);				break;			case 'v':				self::_replace($word, 'ative', '', 0);				break;			case 'z':				self::_replace($word, 'alize', 'al', 0);				break;		}		return $word;	}	/**	 * Step 4	 *	 * @param   string  $word  The token to stem.	 *	 * @return  string	 *	 * @since   2.5	 */	private static function _step4($word)	{		switch (substr($word, -2, 1))		{			case 'a':				self::_replace($word, 'al', '', 1);				break;			case 'c':					self::_replace($word, 'ance', '', 1)				or self::_replace($word, 'ence', '', 1);				break;			case 'e':				self::_replace($word, 'er', '', 1);				break;			case 'i':				self::_replace($word, 'ic', '', 1);				break;			case 'l':					self::_replace($word, 'able', '', 1)				or self::_replace($word, 'ible', '', 1);				break;			case 'n':					self::_replace($word, 'ant', '', 1)				or self::_replace($word, 'ement', '', 1)				or self::_replace($word, 'ment', '', 1)				or self::_replace($word, 'ent', '', 1);				break;			case 'o':				if (substr($word, -4) == 'tion' or substr($word, -4) == 'sion')				{					self::_replace($word, 'ion', '', 1);				}				else				{					self::_replace($word, 'ou', '', 1);				}				break;			case 's':				self::_replace($word, 'ism', '', 1);				break;			case 't':					self::_replace($word, 'ate', '', 1)				or self::_replace($word, 'iti', '', 1);				break;			case 'u':				self::_replace($word, 'ous', '', 1);				break;			case 'v':				self::_replace($word, 'ive', '', 1);				break;			case 'z':				self::_replace($word, 'ize', '', 1);				break;		}		return $word;	}	/**	 * Step 5	 *	 * @param   string  $word  The token to stem.	 *	 * @return  string	 *	 * @since   2.5	 */	private static function _step5($word)	{		// Part a		if (substr($word, -1) == 'e')		{			if (self::_m(substr($word, 0, -1)) > 1)			{				self::_replace($word, 'e', '');			}			elseif (self::_m(substr($word, 0, -1)) == 1)			{				if (!self::_cvc(substr($word, 0, -1)))				{					self::_replace($word, 'e', '');				}			}		}		// Part b		if (self::_m($word) > 1 and self::_doubleConsonant($word) and substr($word, -1) == 'l')		{			$word = substr($word, 0, -1);		}		return $word;	}	/**	 * Replaces the first string with the second, at the end of the string. If third	 * arg is given, then the preceding string must match that m count at least.	 *	 * @param   string   &$str   String to check	 * @param   string   $check  Ending to check for	 * @param   string   $repl   Replacement string	 * @param   integer  $m      Optional minimum number of m() to meet	 *	 * @return  boolean  Whether the $check string was at the end	 *                   of the $str string. True does not necessarily mean	 *                   that it was replaced.	 *	 * @since   2.5	 */	private static function _replace(&$str, $check, $repl, $m = null)	{		$len = 0 - strlen($check);		if (substr($str, $len) == $check)		{			$substr = substr($str, 0, $len);			if (is_null($m) or self::_m($substr) > $m)			{				$str = $substr . $repl;			}			return true;		}		return false;	}	/**	 * m() measures the number of consonant sequences in $str. if c is	 * a consonant sequence and v a vowel sequence, and <..> indicates arbitrary	 * presence,	 *	 * <c><v>       gives 0	 * <c>vc<v>     gives 1	 * <c>vcvc<v>   gives 2	 * <c>vcvcvc<v> gives 3	 *	 * @param   string  $str  The string to return the m count for	 *	 * @return  integer  The m count	 *	 * @since   2.5	 */	private static function _m($str)	{		$c = self::$_regex_consonant;		$v = self::$_regex_vowel;		$str = preg_replace("#^$c+#", '', $str);		$str = preg_replace("#$v+$#", '', $str);		preg_match_all("#($v+$c+)#", $str, $matches);		return count($matches[1]);	}	/**	 * Returns true/false as to whether the given string contains two	 * of the same consonant next to each other at the end of the string.	 *	 * @param   string  $str  String to check	 *	 * @return  boolean  Result	 *	 * @since   2.5	 */	private static function _doubleConsonant($str)	{		$c = self::$_regex_consonant;		return preg_match("#$c{2}$#", $str, $matches) and $matches[0]{0} == $matches[0]{1};	}	/**	 * Checks for ending CVC sequence where second C is not W, X or Y	 *	 * @param   string  $str  String to check	 *	 * @return  boolean  Result	 *	 * @since   2.5	 */	private static function _cvc($str)	{		$c = self::$_regex_consonant;		$v = self::$_regex_vowel;		return preg_match("#($c$v$c)$#", $str, $matches) and strlen($matches[1]) == 3 and $matches[1]{2} != 'w' and $matches[1]{2} != 'x' and $matches[1]{2} != 'y';	}}
<?php/** * @package     Joomla.Platform * @subpackage  HTML * * @copyright   Copyright (C) 2005 - 2013 Open Source Matters, Inc. All rights reserved. * @license     GNU General Public License version 2 or later; see LICENSE */defined('JPATH_PLATFORM') or die;/** * Utility class for creating HTML Grids * * @package     Joomla.Platform * @subpackage  HTML * @since       11.1 */abstract class JHtmlGrid{	/**	 * Display a boolean setting widget.	 *	 * @param   integer  $i        The row index.	 * @param   integer  $value    The value of the boolean field.	 * @param   string   $taskOn   Task to turn the boolean setting on.	 * @param   string   $taskOff  Task to turn the boolean setting off.	 *	 * @return  string   The boolean setting widget.	 *	 * @since    11.1	 */	public static function boolean($i, $value, $taskOn = null, $taskOff = null)	{		// Load the behavior.		self::behavior();		// Build the title.		$title = ($value) ? JText::_('JYES') : JText::_('JNO');		$title .= '::' . JText::_('JGLOBAL_CLICK_TO_TOGGLE_STATE');		// Build the <a> tag.		$bool = ($value) ? 'true' : 'false';		$task = ($value) ? $taskOff : $taskOn;		$toggle = (!$task) ? false : true;		if ($toggle)		{			$html = '<a class="grid_' . $bool . ' hasTip" title="' . $title . '" rel="{id:\'cb' . $i . '\', task:\'' . $task				. '\'}" href="#toggle"></a>';		}		else		{			$html = '<a class="grid_' . $bool . '"></a>';		}		return $html;	}	/**	 * Method to sort a column in a grid	 *	 * @param   string  $title          The link title	 * @param   string  $order          The order field for the column	 * @param   string  $direction      The current direction	 * @param   string  $selected       The selected ordering	 * @param   string  $task           An optional task override	 * @param   string  $new_direction  An optional direction for the new column	 * @param   string  $tip            An optional text shown as tooltip title instead of $title	 *	 * @return  string	 *	 * @since   11.1	 */	public static function sort($title, $order, $direction = 'asc', $selected = 0, $task = null, $new_direction = 'asc', $tip = '')	{		JHtml::_('behavior.tooltip');		$direction = strtolower($direction);		$icon = array('arrow-up-3', 'arrow-down-3');		$index = (int) ($direction == 'desc');		if ($order != $selected)		{			$direction = $new_direction;		}		else		{			$direction = ($direction == 'desc') ? 'asc' : 'desc';		}		$html = '<a href="#" onclick="Joomla.tableOrdering(\'' . $order . '\',\'' . $direction . '\',\'' . $task . '\');return false;"'			. ' class="hasTip" title="' . JText::_($tip ? $tip : $title) . '::' . JText::_('JGLOBAL_CLICK_TO_SORT_THIS_COLUMN') . '">';		$html .= JText::_($title);		if ($order == $selected)		{			$html .= ' <i class="icon-' . $icon[$index] . '"></i>';		}		$html .= '</a>';		return $html;	}	/**	 * Method to create a checkbox for a grid row.	 *	 * @param   integer  $rowNum      The row index	 * @param   integer  $recId       The record id	 * @param   boolean  $checkedOut  True if item is checke out	 * @param   string   $name        The name of the form element	 *	 * @return  mixed    String of html with a checkbox if item is not checked out, null if checked out.	 */	public static function id($rowNum, $recId, $checkedOut = false, $name = 'cid')	{		if ($checkedOut)		{			return '';		}		else		{			return '<input type="checkbox" id="cb' . $rowNum . '" name="' . $name . '[]" value="' . $recId				. '" onclick="Joomla.isChecked(this.checked);" title="' . JText::sprintf('JGRID_CHECKBOX_ROW_N', ($rowNum + 1)) . '" />';		}	}	/**	 * Displays a checked out icon.	 *	 * @param   object   &$row        A data object (must contain checkedout as a property).	 * @param   integer  $i           The index of the row.	 * @param   string   $identifier  The property name of the primary key or index of the row.	 *	 * @return  string	 *	 * @since   11.1	 */	public static function checkedOut(&$row, $i, $identifier = 'id')	{		$user = JFactory::getUser();		$userid = $user->get('id');		$result = false;		if ($row instanceof JTable)		{			$result = $row->isCheckedOut($userid);		}		else		{			$result = false;		}		$checked = '';		if ($result)		{			$checked = self::_checkedOut($row);		}		else		{			if ($identifier == 'id')			{				$checked = JHtml::_('grid.id', $i, $row->$identifier);			}			else			{				$checked = JHtml::_('grid.id', $i, $row->$identifier, $result, $identifier);			}		}		return $checked;	}	/**	 * Method to create a clickable icon to change the state of an item	 *	 * @param   mixed    $value   Either the scalar value or an object (for backward compatibility, deprecated)	 * @param   integer  $i       The index	 * @param   string   $img1    Image for a positive or on value	 * @param   string   $img0    Image for the empty or off value	 * @param   string   $prefix  An optional prefix for the task	 *	 * @return  string	 *	 * @since   11.1	 */	public static function published($value, $i, $img1 = 'tick.png', $img0 = 'publish_x.png', $prefix = '')	{		if (is_object($value))		{			$value = $value->published;		}		$img = $value ? $img1 : $img0;		$task = $value ? 'unpublish' : 'publish';		$alt = $value ? JText::_('JPUBLISHED') : JText::_('JUNPUBLISHED');		$action = $value ? JText::_('JLIB_HTML_UNPUBLISH_ITEM') : JText::_('JLIB_HTML_PUBLISH_ITEM');		$href = '		<a href="#" onclick="return listItemTask(\'cb' . $i . '\',\'' . $prefix . $task . '\')" title="' . $action . '">'			. JHtml::_('image', 'admin/' . $img, $alt, null, true) . '</a>';		return $href;	}	/**	 * Method to create a select list of states for filtering	 * By default the filter shows only published and unpublished items	 *	 * @param   string  $filter_state  The initial filter state	 * @param   string  $published     The JText string for published	 * @param   string  $unpublished   The JText string for Unpublished	 * @param   string  $archived      The JText string for Archived	 * @param   string  $trashed       The JText string for Trashed	 *	 * @return  string	 *	 * @since   11.1	 */	public static function state($filter_state = '*', $published = 'Published', $unpublished = 'Unpublished', $archived = null, $trashed = null)	{		$state = array('' => '- ' . JText::_('JLIB_HTML_SELECT_STATE') . ' -', 'P' => JText::_($published), 'U' => JText::_($unpublished));		if ($archived)		{			$state['A'] = JText::_($archived);		}		if ($trashed)		{			$state['T'] = JText::_($trashed);		}		return JHtml::_(			'select.genericlist',			$state,			'filter_state',			array(				'list.attr' => 'class="inputbox" size="1" onchange="Joomla.submitform();"',				'list.select' => $filter_state,				'option.key' => null			)		);	}	/**	 * Method to create an icon for saving a new ordering in a grid	 *	 * @param   array   $rows   The array of rows of rows	 * @param   string  $image  The image [UNUSED]	 * @param   string  $task   The task to use, defaults to save order	 *	 * @return  string	 *	 * @since   11.1	 */	public static function order($rows, $image = 'filesave.png', $task = 'saveorder')	{		$href = '<a href="javascript:saveorder(' . (count($rows) - 1) . ', \'' . $task . '\')" rel="tooltip" class="saveorder btn btn-micro pull-right" title="'			. JText::_('JLIB_HTML_SAVE_ORDER') . '"><i class="icon-menu-2"></i></a>';		return $href;	}	/**	 * Method to create a checked out icon with optional overlib in a grid.	 *	 * @param   object   &$row     The row object	 * @param   boolean  $overlib  True if an overlib with checkout information should be created.	 *	 * @return  string   HTMl for the icon and overlib	 *	 * @since   11.1	 */	protected static function _checkedOut(&$row, $overlib = true)	{		$hover = '';		if ($overlib)		{			$text = addslashes(htmlspecialchars($row->editor, ENT_COMPAT, 'UTF-8'));			$date = JHtml::_('date', $row->checked_out_time, JText::_('DATE_FORMAT_LC1'));			$time = JHtml::_('date', $row->checked_out_time, 'H:i');			$hover = '<span class="editlinktip hasTip" title="' . JText::_('JLIB_HTML_CHECKED_OUT') . '::' . $text . '<br />' . $date . '<br />'				. $time . '">';		}		$checked = $hover . JHtml::_('image', 'admin/checked_out.png', null, null, true) . '</span>';		return $checked;	}	/**	 * Method to build the behavior script and add it to the document head.	 *	 * @return  void	 *	 * @since   11.1	 */	public static function behavior()	{		static $loaded;		if (!$loaded)		{			// Build the behavior script.			$js = '		window.addEvent(\'domready\', function(){			actions = $$(\'a.move_up\');			actions.combine($$(\'a.move_down\'));			actions.combine($$(\'a.grid_true\'));			actions.combine($$(\'a.grid_false\'));			actions.combine($$(\'a.grid_trash\'));			actions.each(function(a){				a.addEvent(\'click\', function(){					args = JSON.decode(this.rel);					listItemTask(args.id, args.task);				});			});			$$(\'input.check-all-toggle\').each(function(el){				el.addEvent(\'click\', function(){					if (el.checked) {						document.id(this.form).getElements(\'input[type=checkbox]\').each(function(i){							i.checked = true;						})					}					else {						document.id(this.form).getElements(\'input[type=checkbox]\').each(function(i){							i.checked = false;						})					}				});			});		});';			// Add the behavior to the document head.			$document = JFactory::getDocument();			$document->addScriptDeclaration($js);			$loaded = true;		}	}}
<?php/** * @package     Joomla.Site * @subpackage  Templates.beez3 * * @copyright   Copyright (C) 2005 - 2013 Open Source Matters, Inc. All rights reserved. * @license     GNU General Public License version 2 or later; see LICENSE.txt */defined('_JEXEC') or die;// Create a shortcut for params.$canEdit = $this->item->params->get('access-edit');$params = &$this->item->params;$images = json_decode($this->item->images);$app = JFactory::getApplication();$templateparams = $app->getTemplate(true)->params;?><?php if ($this->item->state == 0) : ?><div class="system-unpublished"><?php endif; ?><?php if ($params->get('show_title')) : ?>	<h2>		<?php if ($params->get('link_titles') && $params->get('access-view')) : ?>			<a href="<?php echo JRoute::_(ContentHelperRoute::getArticleRoute($this->item->slug, $this->item->catid)); ?>">			<?php echo $this->escape($this->item->title); ?></a>		<?php else : ?>			<?php echo $this->escape($this->item->title); ?>		<?php endif; ?>	</h2><?php endif; ?><?php if ($params->get('show_print_icon') || $params->get('show_email_icon') || $canEdit) : ?>	<ul class="actions">		<?php if ($params->get('show_print_icon')) : ?>		<li class="print-icon">			<?php echo JHtml::_('icon.print_popup', $this->item, $params, array(), true); ?>		</li>		<?php endif; ?>		<?php if ($params->get('show_email_icon')) : ?>		<li class="email-icon">			<?php echo JHtml::_('icon.email', $this->item, $params, array(), true); ?>		</li>		<?php endif; ?>		<?php if ($canEdit) : ?>		<li class="edit-icon">			<?php echo JHtml::_('icon.edit', $this->item, $params, array(), true); ?>		</li>		<?php endif; ?>	</ul><?php endif; ?><?php if (!$params->get('show_intro')) : ?>	<?php echo $this->item->event->afterDisplayTitle; ?><?php endif; ?><?php echo $this->item->event->beforeDisplayContent; ?><?php // to do not that elegant would be nice to group the params ?><?php if (($params->get('show_author')) or ($params->get('show_category')) or ($params->get('show_create_date')) or ($params->get('show_modify_date')) or ($params->get('show_publish_date')) or ($params->get('show_parent_category')) or ($params->get('show_hits'))) : ?> <dl class="article-info"> <dt class="article-info-term"><?php  echo JText::_('COM_CONTENT_ARTICLE_INFO'); ?></dt><?php endif; ?><?php if ($params->get('show_parent_category') && $this->item->parent_id != 1) : ?>		<dd class="parent-category-name">			<?php $title = $this->escape($this->item->parent_title);				$title = ($title) ? $title : JText::_('JGLOBAL_UNCATEGORISED');				$url = '<a href="' . JRoute::_(ContentHelperRoute::getCategoryRoute($this->item->parent_slug)) . '">' . $title . '</a>'; ?>			<?php if ($params->get('link_parent_category') and $this->item->parent_slug) : ?>				<?php echo JText::sprintf('COM_CONTENT_PARENT', $url); ?>				<?php else : ?>				<?php echo JText::sprintf('COM_CONTENT_PARENT', $title); ?>			<?php endif; ?>		</dd><?php endif; ?><?php if ($params->get('show_category')) : ?>		<dd class="category-name">			<?php 	$title = $this->escape($this->item->category_title);					$title = ($title) ? $title : JText::_('JGLOBAL_UNCATEGORISED');					$url = '<a href="'.JRoute::_(ContentHelperRoute::getCategoryRoute($this->item->catslug)).'">'.$title.'</a>';?>			<?php if ($params->get('link_category') and $this->item->catslug) : ?>				<?php echo JText::sprintf('COM_CONTENT_CATEGORY', $url); ?>				<?php else : ?>				<?php echo JText::sprintf('COM_CONTENT_CATEGORY', $title); ?>			<?php endif; ?>		</dd><?php endif; ?><?php if ($params->get('show_create_date')) : ?>		<dd class="create">		<?php echo JText::sprintf('COM_CONTENT_CREATED_DATE_ON', JHtml::_('date', $this->item->created, JText::_('DATE_FORMAT_LC2'))); ?>		</dd><?php endif; ?><?php if ($params->get('show_modify_date')) : ?>		<dd class="modified">		<?php echo JText::sprintf('COM_CONTENT_LAST_UPDATED', JHtml::_('date', $this->item->modified, JText::_('DATE_FORMAT_LC2'))); ?>		</dd><?php endif; ?><?php if ($params->get('show_publish_date')) : ?>		<dd class="published">		<?php echo JText::sprintf('COM_CONTENT_PUBLISHED_DATE_ON', JHtml::_('date', $this->item->publish_up, JText::_('DATE_FORMAT_LC2'))); ?>		</dd><?php endif; ?><?php if ($params->get('show_author') && !empty($this->item->author )) : ?>	<dd class="createdby">		<?php $author = $this->item->author; ?>		<?php $author = ($this->item->created_by_alias ? $this->item->created_by_alias : $author);?>			<?php if (!empty($this->item->contactid ) &&  $params->get('link_author') == true):?>				<?php echo JText::sprintf('COM_CONTENT_WRITTEN_BY',					JHtml::_('link', JRoute::_('index.php?option=com_contact&view=contact&id=' . $this->item->contactid), $author)				); ?>			<?php else :?>				<?php echo JText::sprintf('COM_CONTENT_WRITTEN_BY', $author); ?>			<?php endif; ?>	</dd><?php endif; ?><?php if ($params->get('show_hits')) : ?>		<dd class="hits">		<?php echo JText::sprintf('COM_CONTENT_ARTICLE_HITS', $this->item->hits); ?>		</dd><?php endif; ?><?php if (($params->get('show_author')) or ($params->get('show_category')) or ($params->get('show_create_date')) or ($params->get('show_modify_date')) or ($params->get('show_publish_date')) or ($params->get('show_parent_category')) or ($params->get('show_hits'))) : ?> </dl><?php endif; ?><?php  if (isset($images->image_intro) and !empty($images->image_intro)) : ?>	<?php $imgfloat = (empty($images->float_intro)) ? $params->get('float_intro') : $images->float_intro; ?>	<div class="img-intro-<?php echo htmlspecialchars($imgfloat); ?>">	<img		<?php if ($images->image_intro_caption):			echo 'class="caption"'.' title="' .htmlspecialchars($images->image_intro_caption) .'"';		endif; ?>		src="<?php echo htmlspecialchars($images->image_intro); ?>" alt="<?php echo htmlspecialchars($images->image_intro_alt); ?>"/>	</div><?php endif; ?><?php echo $this->item->introtext; ?><?php if ($params->get('show_readmore') && $this->item->readmore) :	if ($params->get('access-view')) :		$link = JRoute::_(ContentHelperRoute::getArticleRoute($this->item->slug, $this->item->catid));	else :		$menu = JFactory::getApplication()->getMenu();		$active = $menu->getActive();		$itemId = $active->id;		$link1 = JRoute::_('index.php?option=com_users&view=login&Itemid=' . $itemId);		$returnURL = JRoute::_(ContentHelperRoute::getArticleRoute($this->item->slug, $this->item->catid));		$link = new JURI($link1);		$link->setVar('return', base64_encode($returnURL));	endif;?>		<p class="readmore">				<a href="<?php echo $link; ?>">					<?php if (!$params->get('access-view')) :						echo JText::_('COM_CONTENT_REGISTER_TO_READ_MORE');					elseif ($readmore = $this->item->alternative_readmore) :						echo $readmore;						if ($params->get('show_readmore_title', 0) != 0) :							echo JHtml::_('string.truncate', ($this->item->title), $params->get('readmore_limit'));						endif;					elseif ($params->get('show_readmore_title', 0) == 0) :						echo JText::sprintf('COM_CONTENT_READ_MORE_TITLE');					else :						echo JText::_('COM_CONTENT_READ_MORE');						echo JHtml::_('string.truncate', ($this->item->title), $params->get('readmore_limit'));					endif; ?></a>		</p><?php endif; ?><?php if ($this->item->state == 0) : ?></div><?php endif; ?><div class="item-separator"></div><?php echo $this->item->event->afterDisplayContent; ?>
<?php/** * @package     Joomla.Platform * @subpackage  Document * * @copyright   Copyright (C) 2005 - 2013 Open Source Matters, Inc. All rights reserved. * @license     GNU General Public License version 2 or later; see LICENSE.txt */defined('JPATH_PLATFORM') or die;/** * OpenSearch class, provides an easy interface to display an OpenSearch document * * @package     Joomla.Platform * @subpackage  Document * @see         http://www.opensearch.org/ * @since       11.1 */class JDocumentOpensearch extends JDocument{	/**	 * ShortName element	 *	 * required	 *	 * @var    string	 * @since  11.1	 */	private $_shortName = "";	/**	 * Images collection	 *	 * optional	 *	 * @var    object	 * @since  11.1	 */	private $_images = array();	/**	 * The url collection	 *	 * @var    array	 * @since  11.1	 */	private $_urls = array();	/**	 * Class constructor	 *	 * @param   array  $options  Associative array of options	 *	 * @since  11.1	 */	public function __construct($options = array())	{		parent::__construct($options);		// Set document type		$this->_type = 'opensearch';		// Set mime type		$this->_mime = 'application/opensearchdescription+xml';		// Add the URL for self updating		$update = new JOpenSearchUrl;		$update->type = 'application/opensearchdescription+xml';		$update->rel = 'self';		$update->template = JRoute::_(JURI::getInstance());		$this->addUrl($update);		// Add the favicon as the default image		// Try to find a favicon by checking the template and root folder		$app = JFactory::getApplication();		$dirs = array(JPATH_THEMES . '/' . $app->getTemplate(), JPATH_BASE);		foreach ($dirs as $dir)		{			if (file_exists($dir . '/favicon.ico'))			{				$path = str_replace(JPATH_BASE . '/', '', $dir);				$path = str_replace('\\', '/', $path);				$favicon = new JOpenSearchImage;				$favicon->data = JURI::base() . $path . '/favicon.ico';				$favicon->height = '16';				$favicon->width = '16';				$favicon->type = 'image/vnd.microsoft.icon';				$this->addImage($favicon);				break;			}		}	}	/**	 * Render the document	 *	 * @param   boolean  $cache   If true, cache the output	 * @param   array    $params  Associative array of attributes	 *	 * @return  The rendered data	 *	 * @since   11.1	 */	public function render($cache = false, $params = array())	{		$xml = new DOMDocument('1.0', 'utf-8');		if (defined('JDEBUG') && JDEBUG)		{			$xml->formatOutput = true;		}		// The OpenSearch Namespace		$osns = 'http://a9.com/-/spec/opensearch/1.1/';		// Create the root element		$elOs = $xml->createElementNS($osns, 'OpenSearchDescription');		$elShortName = $xml->createElementNS($osns, 'ShortName');		$elShortName->appendChild($xml->createTextNode(htmlspecialchars($this->_shortName)));		$elOs->appendChild($elShortName);		$elDescription = $xml->createElementNS($osns, 'Description');		$elDescription->appendChild($xml->createTextNode(htmlspecialchars($this->description)));		$elOs->appendChild($elDescription);		// Always set the accepted input encoding to UTF-8		$elInputEncoding = $xml->createElementNS($osns, 'InputEncoding');		$elInputEncoding->appendChild($xml->createTextNode('UTF-8'));		$elOs->appendChild($elInputEncoding);		foreach ($this->_images as $image)		{			$elImage = $xml->createElementNS($osns, 'Image');			$elImage->setAttribute('type', $image->type);			$elImage->setAttribute('width', $image->width);			$elImage->setAttribute('height', $image->height);			$elImage->appendChild($xml->createTextNode(htmlspecialchars($image->data)));			$elOs->appendChild($elImage);		}		foreach ($this->_urls as $url)		{			$elUrl = $xml->createElementNS($osns, 'Url');			$elUrl->setAttribute('type', $url->type);			// Results is the default value so we don't need to add it			if ($url->rel != 'results')			{				$elUrl->setAttribute('rel', $url->rel);			}			$elUrl->setAttribute('template', $url->template);			$elOs->appendChild($elUrl);		}		$xml->appendChild($elOs);		parent::render();		return $xml->saveXML();	}	/**	 * Sets the short name	 *	 * @param   string  $name  The name.	 *	 * @return  JDocumentOpensearch instance of $this to allow chaining	 *	 * @since   11.1	 */	public function setShortName($name)	{		$this->_shortName = $name;		return $this;	}	/**	 * Adds an URL to the OpenSearch description.	 *	 * @param   JOpenSearchUrl  $url  The url to add to the description.	 *	 * @return  JDocumentOpensearch instance of $this to allow chaining	 *	 * @since   11.1	 */	public function addUrl(JOpenSearchUrl $url)	{		$this->_urls[] = $url;		return $this;	}	/**	 * Adds an image to the OpenSearch description.	 *	 * @param   JOpenSearchImage  $image  The image to add to the description.	 *	 * @return  JDocumentOpensearch instance of $this to allow chaining	 *	 * @since   11.1	 */	public function addImage(JOpenSearchImage $image)	{		$this->_images[] = $image;		return $this;	}}/** * JOpenSearchUrl is an internal class that stores the search URLs for the OpenSearch description * * @package     Joomla.Platform * @subpackage  Document * @since       11.1 */class JOpenSearchUrl{	/**	 * Type item element	 *	 * required	 *	 * @var    string	 * @since  11.1	 */	public $type = 'text/html';	/**	 * Rel item element	 *	 * required	 *	 * @var    string	 * @since  11.1	 */	public $rel = 'results';	/**	 * Template item element. Has to contain the {searchTerms} parameter to work.	 *	 * required	 *	 * @var    string	 * @since  11.1	 */	public $template;}/** * JOpenSearchImage is an internal class that stores Images for the OpenSearch Description * * @package     Joomla.Platform * @subpackage  Document * @since       11.1 */class JOpenSearchImage{	/**	 * The images MIME type	 *	 * required	 *	 * @var    string	 * @since  11.1	 */	public $type = "";	/**	 * URL of the image or the image as base64 encoded value	 *	 * required	 *	 * @var    string	 * @since  11.1	 */	public $data = "";	/**	 * The image's width	 *	 * required	 *	 * @var    string	 * @since  11.1	 */	public $width;	/**	 * The image's height	 *	 * required	 *	 * @var    string	 * @since  11.1	 */	public $height;}
<?php/** * @package     Joomla.Legacy * @subpackage  Utilities * * @copyright   Copyright (C) 2005 - 2013 Open Source Matters, Inc. All rights reserved. * @license     GNU General Public License version 2 or later; see LICENSE */defined('JPATH_PLATFORM') or die;JLog::add('JXMLElement is deprecated. Use SimpleXMLElement.', JLog::WARNING, 'deprecated');/** * Wrapper class for php SimpleXMLElement. * * @package     Joomla.Legacy * @subpackage  Utilities * @since       11.1 * @deprecated  13.3 Use SimpleXMLElement instead. */class JXMLElement extends SimpleXMLElement{	/**	 * Get the name of the element.	 *	 * @return  string	 *	 * @since   11.1	 * @deprecated 13.3  Use SimpleXMLElement::getName() instead.	 */	public function name()	{		JLog::add('JXMLElement::name() is deprecated, use SimpleXMLElement::getName() instead.', JLog::WARNING, 'deprecated');		return (string) $this->getName();	}	/**	 * Return a well-formed XML string based on SimpleXML element	 *	 * @param   boolean  $compressed  Should we use indentation and newlines ?	 * @param   string   $indent      Indention character.	 * @param   integer  $level       The level within the document which informs the indentation.	 *	 * @return  string	 *	 * @since   11.1	 * @deprecated 13.3  Use SimpleXMLElement::asXML() instead.	 */	public function asFormattedXML($compressed = false, $indent = "\t", $level = 0)	{		JLog::add('JXMLElement::asFormattedXML() is deprecated, use SimpleXMLElement::asXML() instead.', JLog::WARNING, 'deprecated');		$out = '';		// Start a new line, indent by the number indicated in $level		$out .= ($compressed) ? '' : "\n" . str_repeat($indent, $level);		// Add a <, and add the name of the tag		$out .= '<' . $this->getName();		// For each attribute, add attr="value"		foreach ($this->attributes() as $attr)		{			$out .= ' ' . $attr->getName() . '="' . htmlspecialchars((string) $attr, ENT_COMPAT, 'UTF-8') . '"';		}		// If there are no children and it contains no data, end it off with a />		if (!count($this->children()) && !(string) $this)		{			$out .= " />";		}		else		{			// If there are children			if (count($this->children()))			{				// Close off the start tag				$out .= '>';				$level++;				// For each child, call the asFormattedXML function (this will ensure that all children are added recursively)				foreach ($this->children() as $child)				{					$out .= $child->asFormattedXML($compressed, $indent, $level);				}				$level--;				// Add the newline and indentation to go along with the close tag				$out .= ($compressed) ? '' : "\n" . str_repeat($indent, $level);			}			elseif ((string) $this)			{				// If there is data, close off the start tag and add the data				$out .= '>' . htmlspecialchars((string) $this, ENT_COMPAT, 'UTF-8');			}			// Add the end tag			$out .= '</' . $this->getName() . '>';		}		return $out;	}}
<?php/** * @package     Joomla.Administrator * @subpackage  mod_version * * @copyright   Copyright (C) 2005 - 2013 Open Source Matters, Inc. All rights reserved. * @license     GNU General Public License version 2 or later; see LICENSE.txt */defined('_JEXEC') or die;require_once __DIR__ . '/helper.php';$version = ModVersionHelper::getVersion($params);require JModuleHelper::getLayoutPath('mod_version', $params->get('layout', 'default'));
<?php/** * @package     Joomla.Administrator * @subpackage  com_messages * * @copyright   Copyright (C) 2005 - 2013 Open Source Matters, Inc. All rights reserved. * @license     GNU General Public License version 2 or later; see LICENSE.txt */defined('_JEXEC') or die;if (!JFactory::getUser()->authorise('core.manage', 'com_messages')){	return JError::raiseWarning(404, JText::_('JERROR_ALERTNOAUTHOR'));}$task = JFactory::getApplication()->input->get('task');$controller	= JControllerLegacy::getInstance('Messages');$controller->execute(JFactory::getApplication()->input->get('task'));$controller->redirect();
<?php/** * @package     Joomla.Platform * @subpackage  Google * * @copyright   Copyright (C) 2005 - 2013 Open Source Matters, Inc. All rights reserved * @license     GNU General Public License version 2 or later; see LICENSE */defined('JPATH_PLATFORM') or die;/** * Google Calendar data class for the Joomla Platform. * * @package     Joomla.Platform * @subpackage  Google * @since       12.3 */class JGoogleDataCalendar extends JGoogleData{	/**	 * Constructor.	 *	 * @param   JRegistry    $options  Google options object	 * @param   JGoogleAuth  $auth     Google data http client object	 *	 * @since   12.3	 */	public function __construct(JRegistry $options = null, JGoogleAuth $auth = null)	{		parent::__construct($options, $auth);		if (isset($this->auth) && !$this->auth->getOption('scope'))		{			$this->auth->setOption('scope', 'https://www.googleapis.com/auth/calendar');		}	}	/**	 * Method to remove a calendar from a user's calendar list	 *	 * @param   string  $calendarID  ID of calendar to delete	 *	 * @return  boolean  Success or failure	 *	 * @since   12.3	 * @throws UnexpectedValueException	 */	public function removeCalendar($calendarID)	{		if ($this->isAuthenticated())		{			$jdata = $this->query('https://www.googleapis.com/calendar/v3/users/me/calendarList/' . urlencode($calendarID), null, null, 'delete');			if ($jdata->body != '')			{				throw new UnexpectedValueException("Unexpected data received from Google: `{$jdata->body}`.");			}			return true;		}		else		{			return false;		}	}	/**	 * Method to get a calendar's settings from Google	 *	 * @param   string  $calendarID  ID of calendar to get.	 *	 * @return  mixed  Data from Google	 *	 * @since   12.3	 * @throws UnexpectedValueException	 */	public function getCalendar($calendarID)	{		if ($this->isAuthenticated())		{			$jdata = $this->query('https://www.googleapis.com/calendar/v3/users/me/calendarList/' . urlencode($calendarID));			if ($data = json_decode($jdata->body, true))			{				return $data;			}			else			{				throw new UnexpectedValueException("Unexpected data received from Google: `{$jdata->body}`.");			}		}		else		{			return false;		}	}	/**	 * Method to add a calendar to a user's Google Calendar list	 *	 * @param   string  $calendarID  New calendar ID	 * @param   array   $options     New calendar settings	 *	 * @return  mixed  Data from Google	 *	 * @since   12.3	 * @throws UnexpectedValueException	 */	public function addCalendar($calendarID, $options = array())	{		if ($this->isAuthenticated())		{			$options['id'] = $calendarID;			$url = 'https://www.googleapis.com/calendar/v3/users/me/calendarList';			$jdata = $this->query($url, json_encode($options), array('Content-type' => 'application/json'), 'post');			if ($data = json_decode($jdata->body, true))			{				return $data;			}			else			{				throw new UnexpectedValueException("Unexpected data received from Google: `{$jdata->body}`.");			}		}		else		{			return false;		}	}	/**	 * Method to retrieve calendar list from Google	 *	 * @param   array  $options   Search settings	 * @param   int    $maxpages  Maximum number of pages of calendars to return	 *	 * @return  mixed  Data from Google	 *	 * @since   12.3	 * @throws UnexpectedValueException	 */	public function listCalendars($options = array(), $maxpages = 1)	{		if ($this->isAuthenticated())		{			$next = array_key_exists('nextPageToken', $options) ? $options['nextPage'] : null;			unset($options['nextPageToken']);			$url = 'https://www.googleapis.com/calendar/v3/users/me/calendarList?' . http_build_query($options);			return $this->listGetData($url, $maxpages, $next);		}		else		{			return false;		}	}	/**	 * Method to edit a Google Calendar's settings	 *	 * @param   string  $calendarID  Calendar ID	 * @param   array   $options     Calendar settings	 *	 * @return  mixed  Data from Google	 *	 * @since   12.3	 * @throws UnexpectedValueException	 */	public function editCalendarSettings($calendarID, $options)	{		if ($this->isAuthenticated())		{			$url = 'https://www.googleapis.com/calendar/v3/users/me/calendarList/' . urlencode($calendarID);			$jdata = $this->query($url, json_encode($options), array('Content-type' => 'application/json'), 'put');			if ($data = json_decode($jdata->body, true))			{				return $data;			}			else			{				throw new UnexpectedValueException("Unexpected data received from Google: `{$jdata->body}`.");			}		}		else		{			return false;		}	}	/**	 * Method to clear a Google Calendar	 *	 * @param   string  $calendarID  ID of calendar to clear	 *	 * @return  boolean  Success or failure	 *	 * @since   12.3	 * @throws UnexpectedValueException	 */	public function clearCalendar($calendarID)	{		if ($this->isAuthenticated())		{			$data = $this->query('https://www.googleapis.com/calendar/v3/users/me/calendars/' . urlencode($calendarID) . '/clear', null, null, 'post');			if ($data->body != '')			{				throw new UnexpectedValueException("Unexpected data received from Google: `{$data->body}`.");			}			return true;		}		else		{			return false;		}	}	/**	 * Method to delete a calendar from Google	 *	 * @param   string  $calendarID  ID of calendar to delete.	 *	 * @return  boolean  Success or failure	 *	 * @since   12.3	 * @throws UnexpectedValueException	 */	public function deleteCalendar($calendarID)	{		if ($this->isAuthenticated())		{			$data = $this->query('https://www.googleapis.com/calendar/v3/users/me/calendars/' . urlencode($calendarID), null, null, 'delete');			if ($data->body != '')			{				throw new UnexpectedValueException("Unexpected data received from Google: `{$data->body}`.");			}			return true;		}		else		{			return false;		}	}	/**	 * Method to create a Google Calendar	 *	 * @param   string  $title    New calendar title	 * @param   array   $options  New calendar settings	 *	 * @return  mixed  Data from Google.	 *	 * @since   12.3	 * @throws UnexpectedValueException	 */	public function createCalendar($title, $options = array())	{		if ($this->isAuthenticated())		{			$options['summary'] = $title;			$url = 'https://www.googleapis.com/calendar/v3/calendars';			$jdata = $this->query($url, json_encode($options), array('Content-type' => 'application/json'), 'post');			if ($data = json_decode($jdata->body, true))			{				return $data;			}			else			{				throw new UnexpectedValueException("Unexpected data received from Google: `{$jdata->body}`.");			}		}		else		{			return false;		}	}	/**	 * Method to edit a Google Calendar	 *	 * @param   string  $calendarID  Calendar ID.	 * @param   array   $options     Calendar settings.	 *	 * @return  mixed  Data from Google.	 *	 * @since   12.3	 * @throws UnexpectedValueException	 */	public function editCalendar($calendarID, $options)	{		if ($this->isAuthenticated())		{			$url = 'https://www.googleapis.com/calendar/v3/users/me/calendars/' . urlencode($calendarID);			$jdata = $this->query($url, json_encode($options), array('Content-type' => 'application/json'), 'put');			$data = json_decode($jdata->body, true);			if ($data && array_key_exists('items', $data))			{				return $data;			}			else			{				throw new UnexpectedValueException("Unexpected data received from Google: `{$jdata->body}`.");			}		}		else		{			return false;		}	}	/**	 * Method to delete an event from a Google Calendar	 *	 * @param   string  $calendarID  ID of calendar to delete from	 * @param   string  $eventID     ID of event to delete.	 *	 * @return  boolean  Success or failure.	 *	 * @since   12.3	 * @throws UnexpectedValueException	 */	public function deleteEvent($calendarID, $eventID)	{		if ($this->isAuthenticated())		{			$url = 'https://www.googleapis.com/calendar/v3/users/me/calendars/' . urlencode($calendarID) . '/events/' . urlencode($eventID);			$data = $this->query($url, null, null, 'delete');			if ($data->body != '')			{				throw new UnexpectedValueException("Unexpected data received from Google: `{$data->body}`.");			}			return true;		}		else		{			return false;		}	}	/**	 * Method to get an event from a Google Calendar	 *	 * @param   string  $calendarID  ID of calendar	 * @param   string  $eventID     ID of event to get	 * @param   array   $options     Options to send to Google	 *	 * @return  mixed  Data from Google.	 *	 * @since   12.3	 * @throws UnexpectedValueException	 */	public function getEvent($calendarID, $eventID, $options = array())	{		if ($this->isAuthenticated())		{			$url = 'https://www.googleapis.com/calendar/v3/users/me/calendarList/';			$url .= urlencode($calendarID) . '/events/' . urlencode($eventID) . '?' . http_build_query($options);			$jdata = $this->query($url);			if ($data = json_decode($jdata->body, true))			{				return $data;			}			else			{				throw new UnexpectedValueException("Unexpected data received from Google: `{$jdata->body}`.");			}		}		else		{			return false;		}	}	/**	 * Method to create a Google Calendar event	 *	 * @param   string   $calendarID  ID of calendar	 * @param   mixed    $start       Event start time	 * @param   mixed    $end         Event end time	 * @param   array    $options     New event settings	 * @param   mixed    $timezone    Timezone for event	 * @param   boolean  $allday      Treat event as an all-day event	 * @param   boolean  $notify      Notify participants	 *	 * @return  mixed  Data from Google.	 *	 * @since   12.3	 * @throws InvalidArgumentException	 * @throws UnexpectedValueException	 */	public function createEvent($calendarID, $start, $end = false, $options = array(), $timezone = false, $allday = false, $notify = false)	{		if ($this->isAuthenticated())		{			if (!$start)			{				$startobj = new DateTime;			}			elseif (is_int($start))			{				$startobj = new DateTime;				$startobj->setTimestamp($start);			}			elseif (is_string($start))			{				$startobj = new DateTime($start);			}			elseif (is_a($start, 'DateTime'))			{				$startobj = $start;			}			else			{				throw new InvalidArgumentException('Invalid event start time.');			}			if (!$end)			{				$endobj = $startobj;			}			elseif (is_int($end))			{				$endobj = new DateTime;				$endobj->setTimestamp($end);			}			elseif (is_string($end))			{				$endobj = new DateTime($end);			}			elseif (is_a($end, 'DateTime'))			{				$endobj = $end;			}			else			{				throw new InvalidArgumentException('Invalid event end time.');			}			if ($allday)			{				$options['start'] = array('date' => $startobj->format('Y-m-d'));				$options['end'] = array('date' => $endobj->format('Y-m-d'));			}			else			{				$options['start'] = array('dateTime' => $startobj->format(DateTime::RFC3339));				$options['end'] = array('dateTime' => $endobj->format(DateTime::RFC3339));			}			if ($timezone === true)			{				$options['start']['timeZone'] = $startobj->getTimezone()->getName();				$options['end']['timeZone'] = $endobj->getTimezone()->getName();			}			elseif (is_a($timezone, 'DateTimeZone'))			{				$options['start']['timeZone'] = $timezone->getName();				$options['end']['timeZone'] = $timezone->getName();			}			elseif (is_string($timezone))			{				$options['start']['timeZone'] = $timezone;				$options['end']['timeZone'] = $timezone;			}			$url = 'https://www.googleapis.com/calendar/v3/calendars/' . urlencode($calendarID) . '/events' . ($notify ? '?sendNotifications=true' : '');			$jdata = $this->query($url, json_encode($options), array('Content-type' => 'application/json'), 'post');			if ($data = json_decode($jdata->body, true))			{				return $data;			}			else			{				throw new UnexpectedValueException("Unexpected data received from Google: `{$jdata->body}`.");			}		}		else		{			return false;		}	}	/**	 * Method to retrieve a list of events on a Google calendar	 *	 * @param   string  $calendarID  Calendar ID	 * @param   string  $eventID     ID of the event to change	 * @param   array   $options     Search settings	 * @param   int     $maxpages    Minimum number of events to retrieve (more may be retrieved depending on page size)	 *	 * @return  mixed  Data from Google.	 *	 * @since   12.3	 * @throws UnexpectedValueException	 */	public function listRecurrences($calendarID, $eventID, $options = array(), $maxpages = 1)	{		if ($this->isAuthenticated())		{			$next = array_key_exists('nextPageToken', $options) ? $options['nextPage'] : null;			unset($options['nextPageToken']);			$url = 'https://www.googleapis.com/calendar/v3/users/me/calendars/' . urlencode($calendarID) . '/events/' . urlencode($eventID) . '/instances';			$url .= '?' . http_build_query($options);			return $this->listGetData($url, $maxpages, $next);		}		else		{			return false;		}	}	/**	 * Method to retrieve a list of events on a Google calendar	 *	 * @param   string  $calendarID  Calendar ID	 * @param   array   $options     Calendar settings	 * @param   int     $maxpages    Cycle through pages of data to generate a complete list	 *	 * @return  mixed  Data from Google.	 *	 * @since   12.3	 * @throws UnexpectedValueException	 */	public function listEvents($calendarID, $options = array(), $maxpages = 1)	{		if ($this->isAuthenticated())		{			$next = array_key_exists('nextPageToken', $options) ? $options['nextPage'] : null;			unset($options['nextPageToken']);			$url = 'https://www.googleapis.com/calendar/v3/calendars/' . urlencode($calendarID) . '/events?' . http_build_query($options);			return $this->listGetData($url, $maxpages, $next);		}		else		{			return false;		}	}	/**	 * Method to move an event from one calendar to another	 *	 * @param   string   $calendarID  Calendar ID	 * @param   string   $eventID     ID of the event to change	 * @param   string   $destID      Calendar ID	 * @param   boolean  $notify      Notify participants of changes	 *	 * @return  mixed  Data from Google.	 *	 * @since   12.3	 * @throws UnexpectedValueException	 */	public function moveEvent($calendarID, $eventID, $destID, $notify = false)	{		if ($this->isAuthenticated())		{			$url = 'https://www.googleapis.com/calendar/v3/calendars/' . urlencode($calendarID) . '/events/' . urlencode($eventID) . '/move';			$url .= '?destination=' . $destID . ($notify ? '&sendNotifications=true' : '');			$jdata = $this->query($url, null, null, 'post');			if ($data = json_decode($jdata->body, true))			{				return $data;			}			else			{				throw new UnexpectedValueException("Unexpected data received from Google: `{$jdata->body}`.");			}		}		else		{			return false;		}	}	/**	 * Method to edit a Google Calendar event	 *	 * @param   string   $calendarID  Calendar ID	 * @param   string   $eventID     ID of the event to change	 * @param   array    $options     Event settings	 * @param   boolean  $notify      Notify participants of changes	 *	 * @return  mixed  Data from Google.	 *	 * @since   12.3	 * @throws UnexpectedValueException	 */	public function editEvent($calendarID, $eventID, $options, $notify = false)	{		if ($this->isAuthenticated())		{			$url = 'https://www.googleapis.com/calendar/v3/calendars/';			$url .= urlencode($calendarID) . '/events/' . urlencode($eventID) . ($notify ? '?sendNotifications=true' : '');			$jdata = $this->query($url, json_encode($options), array('Content-type' => 'application/json'), 'put');			if ($data = json_decode($jdata->body, true))			{				return $data;			}			else			{				throw new UnexpectedValueException("Unexpected data received from Google: `{$jdata->body}`.");			}		}		else		{			return false;		}	}}
<?php/** * @package     Joomla.Site * @subpackage  com_newsfeeds * * @copyright   Copyright (C) 2005 - 2013 Open Source Matters, Inc. All rights reserved. * @license     GNU General Public License version 2 or later; see LICENSE.txt */defined('_JEXEC') or die;JHtml::addIncludePath(JPATH_COMPONENT.'/helpers');?><div class="categories-list<?php echo $this->pageclass_sfx;?>"><?php if ($this->params->get('show_page_heading')) : ?><h1>	<?php echo $this->escape($this->params->get('page_heading')); ?></h1><?php endif; ?>	<?php if ($this->params->get('show_base_description')) : ?>	<?php 	//If there is a description in the menu parameters use that; ?>	       		<?php if ($this->params->get('categories_description')) : ?>		 <div class="category-desc base-desc">			<?php echo  JHtml::_('content.prepare', $this->params->get('categories_description'), '', 'com_newsfeeds.categories'); ?>			</div>		<?php  else: ?>			<?php //Otherwise get one from the database if it exists. ?>			<?php  if ($this->parent->description) : ?>				<div class="category-desc  base-desc">					<?php  echo JHtml::_('content.prepare', $this->parent->description, '', 'com_newsfeeds.categories'); ?>				</div>			<?php  endif; ?>		<?php  endif; ?>	<?php endif; ?><?phpecho $this->loadTemplate('items');?></div>
<?php/** * @package     Joomla.Platform * @subpackage  Input * * @copyright   Copyright (C) 2005 - 2013 Open Source Matters, Inc. All rights reserved. * @license     GNU General Public License version 2 or later; see LICENSE */defined('JPATH_PLATFORM') or die;/** * Joomla! Input CLI Class * * @package     Joomla.Platform * @subpackage  Input * @since       11.1 */class JInputCLI extends JInput{	/**	 * The executable that was called to run the CLI script.	 *	 * @var    string	 * @since  11.1	 */	public $executable;	/**	 * The additional arguments passed to the script that are not associated	 * with a specific argument name.	 *	 * @var    array	 * @since  11.1	 */	public $args = array();	/**	 * Constructor.	 *	 * @param   array  $source   Source data (Optional, default is $_REQUEST)	 * @param   array  $options  Array of configuration parameters (Optional)	 *	 * @since   11.1	 */	public function __construct(array $source = null, array $options = array())	{		if (isset($options['filter']))		{			$this->filter = $options['filter'];		}		else		{			$this->filter = JFilterInput::getInstance();		}		// Get the command line options		$this->parseArguments();		// Set the options for the class.		$this->options = $options;	}	/**	 * Method to serialize the input.	 *	 * @return  string  The serialized input.	 *	 * @since   12.1	 */	public function serialize()	{		// Load all of the inputs.		$this->loadAllInputs();		// Remove $_ENV and $_SERVER from the inputs.		$inputs = $this->inputs;		unset($inputs['env']);		unset($inputs['server']);		// Serialize the executable, args, options, data, and inputs.		return serialize(array($this->executable, $this->args, $this->options, $this->data, $inputs));	}	/**	 * Method to unserialize the input.	 *	 * @param   string  $input  The serialized input.	 *	 * @return  JInput  The input object.	 *	 * @since   12.1	 */	public function unserialize($input)	{		// Unserialize the executable, args, options, data, and inputs.		list($this->executable, $this->args, $this->options, $this->data, $this->inputs) = unserialize($input);		// Load the filter.		if (isset($this->options['filter']))		{			$this->filter = $this->options['filter'];		}		else		{			$this->filter = JFilterInput::getInstance();		}	}	/**	 * Initialise the options and arguments	 *	 * @return  void	 *	 * @since   11.1	 */	protected function parseArguments()	{		// Get the list of argument values from the environment.		$args = $_SERVER['argv'];		// Set the path used for program execution and remove it form the program arguments.		$this->executable = array_shift($args);		// We use a for loop because in some cases we need to look ahead.		for ($i = 0; $i < count($args); $i++)		{			// Get the current argument to analyze.			$arg = $args[$i];			// First let's tackle the long argument case.  eg. --foo			if (strlen($arg) > 2 && substr($arg, 0, 2) == '--')			{				// Attempt to split the thing over equals so we can get the key/value pair if an = was used.				$arg = substr($arg, 2);				$parts = explode('=', $arg);				$this->data[$parts[0]] = true;				// Does not have an =, so let's look ahead to the next argument for the value.				if (count($parts) == 1 && isset($args[$i + 1]) && preg_match('/^--?.+/', $args[$i + 1]) == 0)				{					$this->data[$parts[0]] = $args[$i + 1];					// Since we used the next argument, increment the counter so we don't use it again.					$i++;				}				// We have an equals sign so take the second "part" of the argument as the value.				elseif (count($parts) == 2)				{					$this->data[$parts[0]] = $parts[1];				}			}			// Next let's see if we are dealing with a "bunch" of short arguments.  eg. -abc			elseif (strlen($arg) > 2 && $arg[0] == '-')			{				// For each of these arguments set the value to TRUE since the flag has been set.				for ($j = 1; $j < strlen($arg); $j++)				{					$this->data[$arg[$j]] = true;				}			}			// OK, so it isn't a long argument or bunch of short ones, so let's look and see if it is a single			// short argument.  eg. -h			elseif (strlen($arg) == 2 && $arg[0] == '-')			{				// Go ahead and set the value to TRUE and if we find a value later we'll overwrite it.				$this->data[$arg[1]] = true;				// Let's look ahead to see if the next argument is a "value".  If it is, use it for this value.				if (isset($args[$i + 1]) && preg_match('/^--?.+/', $args[$i + 1]) == 0)				{					$this->data[$arg[1]] = $args[$i + 1];					// Since we used the next argument, increment the counter so we don't use it again.					$i++;				}			}			// Last but not least, we don't have a key/value based argument so just add it to the arguments list.			else			{				$this->args[] = $arg;			}		}	}}
<?php/** * @package     Joomla.Administrator * @subpackage  com_media * * @copyright   Copyright (C) 2005 - 2013 Open Source Matters, Inc. All rights reserved. * @license     GNU General Public License version 2 or later; see LICENSE.txt */defined('_JEXEC') or die;/** * Media Manager Component Controller * * @package     Joomla.Administrator * @subpackage  com_media * @since       1.5 */class MediaController extends JControllerLegacy{	/**	 * Method to display a view.	 *	 * @param   boolean			If true, the view output will be cached	 * @param   array  An array of safe url parameters and their variable types, for valid values see {@link JFilterInput::clean()}.	 *	 * @return  JController		This object to support chaining.	 * @since   1.5	 */	public function display($cachable = false, $urlparams = false)	{		JPluginHelper::importPlugin('content');		$vName = $this->input->get('view', 'media');		switch ($vName)		{			case 'images':				$vLayout = $this->input->get('layout', 'default');				$mName = 'manager';				break;			case 'imagesList':				$mName = 'list';				$vLayout = $this->input->get('layout', 'default');				break;			case 'mediaList':				$app	= JFactory::getApplication();				$mName = 'list';				$vLayout = $app->getUserStateFromRequest('media.list.layout', 'layout', 'thumbs', 'word');				break;			case 'media':			default:				$vName = 'media';				$vLayout = $this->input->get('layout', 'default');				$mName = 'manager';				break;		}		$document = JFactory::getDocument();		$vType    = $document->getType();		// Get/Create the view		$view = $this->getView($vName, $vType);		$view->addTemplatePath(JPATH_COMPONENT_ADMINISTRATOR.'/views/'.strtolower($vName).'/tmpl');		// Get/Create the model		if ($model = $this->getModel($mName))		{			// Push the model into the view (as default)			$view->setModel($model, true);		}		// Set the layout		$view->setLayout($vLayout);		// Display the view		$view->display();		return $this;	}	public function ftpValidate()	{		// Set FTP credentials, if given		JClientHelper::setCredentialsFromRequest('ftp');	}}
<?php/** * @package    Joomla.Installation * * @copyright  Copyright (C) 2005 - 2013 Open Source Matters, Inc. All rights reserved. * @license    GNU General Public License version 2 or later; see LICENSE.txt */defined('_JEXEC') or die;?><jdoc:include type="component" />
<?php/** * @package     Joomla.Platform * @subpackage  Database * * @copyright   Copyright (C) 2005 - 2013 Open Source Matters, Inc. All rights reserved. * @license     GNU General Public License version 2 or later; see LICENSE */defined('JPATH_PLATFORM') or die;/** * PDO database iterator. * * @package     Joomla.Platform * @subpackage  Database * @since       12.1 */class JDatabaseIteratorPdo extends JDatabaseIterator{	/**	 * Get the number of rows in the result set for the executed SQL given by the cursor.	 *	 * @return  integer  The number of rows in the result set.	 *	 * @since   12.1	 * @see     Countable::count()	 */	public function count()	{		if (!empty($this->cursor) && $this->cursor instanceof PDOStatement)		{			return $this->cursor->rowCount();		}		else		{			return 0;		}	}	/**	 * Method to fetch a row from the result set cursor as an object.	 *	 * @return  mixed   Either the next row from the result set or false if there are no more rows.	 *	 * @since   12.1	 */	protected function fetchObject()	{		if (!empty($this->cursor) && $this->cursor instanceof PDOStatement)		{			return $this->cursor->fetchObject($this->class);		}		else		{			return false;		}	}	/**	 * Method to free up the memory used for the result set.	 *	 * @return  void	 *	 * @since   12.1	 */	protected function freeResult()	{		if (!empty($this->cursor) && $this->cursor instanceof PDOStatement)		{			$this->cursor->closeCursor();		}	}}
<?php/** * @package     Joomla.Administrator * @subpackage  Template.hathor * * @copyright   Copyright (C) 2005 - 2013 Open Source Matters, Inc. All rights reserved. * @license     GNU General Public License version 2 or later; see LICENSE.txt */defined('_JEXEC') or die;defined('_JEXEC') or die;$app	= JFactory::getApplication();$doc	= JFactory::getDocument();$lang	= JFactory::getLanguage();$input	= $app->input;$user	= JFactory::getUser();// Load optional RTL Bootstrap CSSJHtml::_('bootstrap.loadCss', false, $this->direction);// Load system style CSS$doc->addStyleSheet('templates/system/css/system.css');// Loadtemplate CSS$doc->addStyleSheet('templates/'.$this->template.'/css/template.css');// Load additional CSS styles for colorsif (!$this->params->get('colourChoice')) :$colour = 'standard';else :$colour = htmlspecialchars($this->params->get('colourChoice'));endif;$doc->addStyleSheet('templates/'.$this->template.'/css/colour_'.$colour.'.css');// Load specific language related CSS$file = 'language/' . $lang->getTag() . '/' . $lang->getTag() . '.css';if (is_file($file)){	$doc->addStyleSheet($file);}// Load additional CSS styles for rtl sitesif ($this->direction == 'rtl'){	$doc->addStyleSheet('templates/'.$this->template.'/css/template_rtl.css');	$doc->addStyleSheet('templates/'.$this->template.'/css/colour_'.$colour.'_rtl.css');}// Load specific language related CSS$file = 'language/'.$lang->getTag().'/'.$lang->getTag().'.css';if (JFile::exists($file)){	$doc->addStyleSheet($file);}// Load additional CSS styles for bold Textif ($this->params->get('boldText')){	$doc->addStyleSheet('templates/'.$this->template.'/css/boldtext.css');}// Load template javascript$doc->addScript('templates/'.$this->template.'/js/template.js', 'text/javascript');// Logo fileif ($this->params->get('logoFile')){	$logo = JURI::root() . $this->params->get('logoFile');}else{	$logo = $this->baseurl . "/templates/" . $this->template . "/images/logo.png";}?><!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.0 Transitional//EN" "http://www.w3.org/TR/xhtml1/DTD/xhtml1-transitional.dtd"><html xmlns="http://www.w3.org/1999/xhtml" xml:lang="<?php echo  $this->language; ?>" lang="<?php echo  $this->language; ?>" dir="<?php echo  $this->direction; ?>"><head><jdoc:include type="head" /><!-- Load additional CSS styles for Internet Explorer --><!--[if IE 8]>	<link href="templates/<?php echo  $this->template ?>/css/ie8.css" rel="stylesheet" type="text/css" /><![endif]--><!--[if IE 7]>	<link href="templates/<?php echo  $this->template ?>/css/ie7.css" rel="stylesheet" type="text/css" /><![endif]--><!--[if lt IE 9]>	<script src="../media/jui/js/html5.js"></script><![endif]--></head><body id="minwidth" class="cpanel-page"><div id="containerwrap">	<!-- Header Logo -->	<div id="header">		<!-- Site Title and Skip to Content -->		<div class="title-ua">			<h1 class="title"><?php echo $this->params->get('showSiteName') ? $app->getCfg('sitename') . " " . JText::_('JADMINISTRATION') : JText::_('JADMINISTRATION'); ?></h1>			<div id="skiplinkholder"><p><a id="skiplink" href="#skiptarget"><?php echo JText::_('TPL_HATHOR_SKIP_TO_MAIN_CONTENT'); ?></a></p></div>      	</div>	</div><!-- end header -->	<!-- Main Menu Navigation -->	<div id="nav">		<div id="module-menu">			<h2 class="element-invisible"><?php echo JText::_('TPL_HATHOR_MAIN_MENU'); ?></h2>			<jdoc:include type="modules" name="menu" />		</div>		<div class="clr"></div>	</div><!-- end nav -->	<!-- Status Module -->	<div id="module-status">		<jdoc:include type="modules" name="status"/>			<?php			//Display an harcoded logout			$task = $app->input->get('task');			if ($task == 'edit' || $task == 'editA' || $app->input->getInt('hidemainmenu'))			{				$logoutLink = '';			} else {				$logoutLink = JRoute::_('index.php?option=com_login&task=logout&'. JSession::getFormToken() .'=1');			}			$hideLinks = $app->input->getBool('hidemainmenu');			$output = array();			// Print the Preview link to Main site.			//$output[] = '<span class="viewsite"><a href="'.JURI::root().'" target="_blank">'.JText::_('JGLOBAL_VIEW_SITE').'</a></span>';			// Print the logout link.			//$output[] = '<span class="logout">' .($hideLinks ? '' : '<a href="'.$logoutLink.'">').JText::_('JLOGOUT').($hideLinks ? '' : '</a>').'</span>';			// Output the items.			foreach ($output as $item) :			echo $item;			endforeach;			?>	</div>	<!-- Content Area -->	<div id="content">		<!-- Component Title -->		<jdoc:include type="modules" name="title" />		<!-- System Messages -->		<jdoc:include type="message" />		<!-- Sub Menu Navigation -->		<div id="no-submenu"></div>   		<div class="clr"></div>		<!-- Beginning of Actual Content -->		<div id="element-box">			<p id="skiptargetholder"><a id="skiptarget" class="skip" tabindex="-1"></a></p>				<div class="adminform">					<!-- Display the Quick Icon Shortcuts -->					<div class="cpanel-icons">						<?php if ($this->countModules('icon') > 1):?>							<?php echo JHtml::_('sliders.start', 'position-icon', array('useCookie' => 1));?>							<jdoc:include type="modules" name="icon" />							<?php echo JHtml::_('sliders.end');?>						<?php else:?>							<jdoc:include type="modules" name="icon" />						<?php endif;?>					</div>					<!-- Display Admin Information Panels -->					<div class="cpanel-component">						<jdoc:include type="component" />					</div>				</div>				<div class="clr"></div>		</div><!-- end element-box -->		<noscript>			<?php echo  JText::_('JGLOBAL_WARNJAVASCRIPT') ?>		</noscript>		<div class="clr"></div>	</div><!-- end content -->		<div class="clr"></div>	</div><!-- end containerwrap -->	<!-- Footer -->	<div id="footer">		<jdoc:include type="modules" name="footer" style="none"  />		<p class="copyright">			<?php $joomla = '<a href="http://www.joomla.org">Joomla!&#174;</a>';			echo JText::sprintf('JGLOBAL_ISFREESOFTWARE', $joomla) ?>		</p>	</div></body></html>
<?php/** * @package     Joomla.Administrator * @subpackage  com_contact * * @copyright   Copyright (C) 2005 - 2013 Open Source Matters, Inc. All rights reserved. * @license     GNU General Public License version 2 or later; see LICENSE.txt */defined('_JEXEC') or die;$fieldSets = $this->form->getFieldsets('params');foreach ($fieldSets as $name => $fieldSet) :	$paramstabs = 'params-' . $name;	echo JHtml::_('bootstrap.addTab', 'myTab', $paramstabs, JText::_($fieldSet->label, true));	if (isset($fieldSet->description) && trim($fieldSet->description)) :		echo '<p class="alert alert-info">'.$this->escape(JText::_($fieldSet->description)).'</p>';	endif;	?>		<?php foreach ($this->form->getFieldset($name) as $field) : ?>			<div class="control-group">				<div class="control-label"><?php echo $field->label; ?></div>				<div class="controls"><?php echo $field->input; ?></div>			</div>		<?php endforeach; ?>	<?php echo JHtml::_('bootstrap.endTab'); ?><?php endforeach; ?>
<?php/** * @package     Joomla.Administrator * @subpackage  mod_submenu * * @copyright   Copyright (C) 2005 - 2013 Open Source Matters, Inc. All rights reserved. * @license     GNU General Public License version 2 or later; see LICENSE.txt */defined('_JEXEC') or die;$list    = JSubMenuHelper::getEntries();$filters = JSubMenuHelper::getFilters();$action  = JSubMenuHelper::getAction();$displayMenu    = count($list);$displayFilters = count($filters);$hide = JFactory::getApplication()->input->getBool('hidemainmenu');if ($displayMenu || $displayFilters){	require JModuleHelper::getLayoutPath('mod_submenu', $params->get('layout', 'default'));}
<?php/** * Ensures that new classes are instantiated without brackets if they do not * have any parameters. * * @category  Classes * @package   Joomla.CodeSniffer * @author    Nikolai Plath * @license   GNU General Public License version 2 or later *//** * Ensures that new classes are instantiated without brackets if they do not * have any parameters. * * @category  Classes * @package   Joomla.CodeSniffer */class Joomla_Sniffs_Classes_InstantiateNewClassesSniff implements PHP_CodeSniffer_Sniff{    /**     * Registers the token types that this sniff wishes to listen to.     *     * @return array     */    public function register()    {        return array(T_NEW);    }//end register()    /**     * Process the tokens that this sniff is listening for.     *     * @param PHP_CodeSniffer_File $phpcsFile The file where the token was found.     * @param int                  $stackPtr  The position in the stack where     *                                        the token was found.     *     * @return void     */    public function process(PHP_CodeSniffer_File $phpcsFile, $stackPtr)    {        $tokens = $phpcsFile->getTokens();        $running = true;        $valid = false;        $started = false;        $cnt = $stackPtr + 1;        do        {            if( ! isset($tokens[$cnt]))            {                $running = false;            }            else            {                switch ($tokens[$cnt]['code'])                {                    case T_SEMICOLON:                    case T_COMMA :                        $valid = true;                        $running = false;                        break;                    case T_OPEN_PARENTHESIS :                        $started = true;                        break;                    case T_VARIABLE :                    case T_STRING :                    case T_LNUMBER :                    case T_CONSTANT_ENCAPSED_STRING :                    case T_DOUBLE_QUOTED_STRING :                        if($started)                        {                            $valid = true;                            $running = false;                        }                        break;                    case T_CLOSE_PARENTHESIS :                        if( ! $started)                        {                            $valid = true;                        }                         $running = false;                        break;                    case T_WHITESPACE :                        break;                }//switch                $cnt ++;            }        }        while ($running == true);        if( ! $valid)        {            $error = 'Instanciating new classes without parameters does not require brackets.';            $phpcsFile->addError($error, $stackPtr, 'New class');        }    }//function}//class
<?php/** * @package     Joomla.Legacy * @subpackage  Database * * @copyright   Copyright (C) 2005 - 2013 Open Source Matters, Inc. All rights reserved. * @license     GNU General Public License version 2 or later; see LICENSE */defined('JPATH_PLATFORM') or die;JLog::add('JDatabaseException is deprecated, use SPL Exceptions instead.', JLog::WARNING, 'deprecated');/** * Exception class definition for the Database subpackage. * * @package     Joomla.Legacy * @subpackage  Database * @since       11.1 * @deprecated  12.3 Use semantic exceptions instead */class JDatabaseException extends RuntimeException{}
<?php/** * @package     Joomla.Libraries * @subpackage  Form * * @copyright   Copyright (C) 2005 - 2013 Open Source Matters, Inc. All rights reserved. * @license     GNU General Public License version 2 or later; see LICENSE */defined('JPATH_PLATFORM') or die;JFormHelper::loadFieldClass('groupedlist');/** * Chrome Styles Form Field class for the Joomla Platform. * * @package     Joomla.Libraries * @subpackage  Form * @since       3.0 */class JFormFieldChromeStyle extends JFormFieldGroupedList{	/**	 * The form field type.	 *	 * @var    string	 * @since  3.0	 */	public $type = 'ChromeStyle';	/**	 * Method to get the list of template chrome style options	 * grouped by template.	 *	 * @return  array  The field option objects as a nested array in groups.	 *	 * @since   3.0	 */	protected function getGroups()	{		$groups = array();		// Add Module Style Field		$tmp = '---' . JText::_('JLIB_FORM_VALUE_FROM_TEMPLATE') . '---';		$groups[$tmp][] = JHtml::_('select.option', '0', JText::_('JLIB_FORM_VALUE_INHERITED'));		$templateStyles = $this->getTemplateModuleStyles();		// Create one new option object for each available style, grouped by templates		foreach ($templateStyles as $template => $styles)		{			$template = ucfirst($template);			$groups[$template] = array();			foreach ($styles as $style)			{				$tmp = JHtml::_('select.option', $template . '-' . $style, $style);				$groups[$template][] = $tmp;			}		}		reset($groups);		return $groups;	}	/**	 * Method to get the templates module styles.	 *	 * @return  array  The array of styles, grouped by templates.	 *	 * @since   3.0	 */	protected function getTemplateModuleStyles()	{		$moduleStyles = array();		$templates = array($this->getSystemTemplate());		$templates = array_merge($templates, ModulesHelper::getTemplates('site'));		foreach ($templates as $template)		{			$modulesFilePath = JPATH_SITE . '/templates/' . $template->element . '/html/modules.php';			// Is there modules.php for that template?			if (file_exists($modulesFilePath))			{				$modulesFileData = file_get_contents($modulesFilePath);				preg_match_all('/function[\s\t]*modChrome\_([a-z0-9\-\_]*)[\s\t]*\(/i', $modulesFileData, $styles);				if (!array_key_exists($template->element, $moduleStyles))				{					$moduleStyles[$template->element] = array();				}				$moduleStyles[$template->element] = $styles[1];			}		}		return $moduleStyles;	}	/**	 * Method to get the system template as an object.	 *	 * @return  array  The object of system template.	 *	 * @since   3.0	 */	protected function getSystemTemplate()	{		$template = new stdClass;		$template->element = 'system';		$template->name    = 'system';		$template->enabled = 1;		return $template;	}}
<?php/** * @package     Joomla.Administrator * @subpackage  mod_multilangstatus * * @copyright   Copyright (C) 2005 - 2013 Open Source Matters, Inc. All rights reserved. * @license     GNU General Public License version 2 or later; see LICENSE.txt */defined('_JEXEC') or die;JHtml::_('behavior.modal');?><div class="btn-group multilanguage"><a class="modal" href="<?php echo JRoute::_('index.php?option=com_languages&view=multilangstatus&tmpl=component');?>" rel="{handler:'iframe', size:{x:700,y:400}}"><i class="icon-comment"></i> <?php echo JText::_('MOD_MULTILANGSTATUS');?></a></div>
<?php/** * @package     Joomla.Administrator * @subpackage  com_cache * * @copyright   Copyright (C) 2005 - 2013 Open Source Matters, Inc. All rights reserved. * @license     GNU General Public License version 2 or later; see LICENSE.txt */defined('_JEXEC') or die;?><form action="<?php echo JRoute::_('index.php?option=com_cache'); ?>" method="post" name="adminForm" id="adminForm">  <?php if (!empty( $this->sidebar)) : ?>    <div id="j-sidebar-container" class="span2">      <?php echo $this->sidebar; ?>    </div>      <div id="j-main-container" class="span10">  <?php else : ?>    <div id="j-main-container">  <?php endif;?>  	<fieldset>  		<legend><?php echo JText::_('COM_CACHE_PURGE_EXPIRED_ITEMS'); ?></legend>  		<p><?php echo JText::_('COM_CACHE_PURGE_INSTRUCTIONS'); ?></p>  	</fieldset>  	<div class="alert">  		<p><?php echo JText::_('COM_CACHE_RESOURCE_INTENSIVE_WARNING'); ?></p>  	</div>  	<input type="hidden" name="task" value="" />  	<?php echo JHtml::_('form.token'); ?>	</div></form>
<?php/** * @package     Joomla.Administrator * @subpackage  com_finder * * @copyright   Copyright (C) 2005 - 2013 Open Source Matters, Inc. All rights reserved. * @license     GNU General Public License version 2 or later; see LICENSE */defined('_JEXEC') or die;JLoader::register('FinderIndexerHelper', __DIR__ . '/helper.php');JLoader::register('FinderIndexerParser', __DIR__ . '/parser.php');JLoader::register('FinderIndexerStemmer', __DIR__ . '/stemmer.php');JLoader::register('FinderIndexerTaxonomy', __DIR__ . '/taxonomy.php');JLoader::register('FinderIndexerToken', __DIR__ . '/token.php');jimport('joomla.filesystem.file');/** * Main indexer class for the Finder indexer package. * * The indexer class provides the core functionality of the Finder * search engine. It is responsible for adding and updating the * content links table; extracting and scoring tokens; and maintaining * all referential information for the content. * * Note: All exceptions thrown from within this class should be caught * by the controller. * * @package     Joomla.Administrator * @subpackage  com_finder * @since       2.5 */abstract class FinderIndexer{	/**	 * The title context identifier.	 *	 * @var    integer	 * @since  2.5	 */	const TITLE_CONTEXT = 1;	/**	 * The text context identifier.	 *	 * @var    integer	 * @since  2.5	 */	const TEXT_CONTEXT = 2;	/**	 * The meta context identifier.	 *	 * @var    integer	 * @since  2.5	 */	const META_CONTEXT = 3;	/**	 * The path context identifier.	 *	 * @var    integer	 * @since  2.5	 */	const PATH_CONTEXT = 4;	/**	 * The misc context identifier.	 *	 * @var    integer	 * @since  2.5	 */	const MISC_CONTEXT = 5;	/**	 * The indexer state object.	 *	 * @var    object	 * @since  2.5	 */	public static $state;	/**	 * The indexer profiler object.	 *	 * @var    object	 * @since  2.5	 */	public static $profiler;	/**	 * Returns a reference to the FinderIndexer object.	 *	 * @return  FinderIndexer instance based on the database driver	 *	 * @since   3.0	 * @throws  RuntimeException if driver class for indexer not present.	 */	public static function getInstance()	{		// Setup the adapter for the indexer.		$format = JFactory::getDbo()->name;		if ($format == 'mysqli')		{			$format = 'mysql';		}		elseif ($format == 'sqlazure')		{			$format = 'sqlsrv';		}		$path = __DIR__ . '/driver/' . $format . '.php';		$class = 'FinderIndexerDriver' . ucfirst($format);		// Check if a parser exists for the format.		if (file_exists($path))		{			// Instantiate the parser.			include_once $path;			return new $class;		}		else		{			// Throw invalid format exception.			throw new RuntimeException(JText::sprintf('COM_FINDER_INDEXER_INVALID_DRIVER', $format));		}	}	/**	 * Method to get the indexer state.	 *	 * @return  object  The indexer state object.	 *	 * @since   2.5	 */	public static function getState()	{		// First, try to load from the internal state.		if (!empty(self::$state))		{			return self::$state;		}		// If we couldn't load from the internal state, try the session.		$session = JFactory::getSession();		$data = $session->get('_finder.state', null);		// If the state is empty, load the values for the first time.		if (empty($data))		{			$data = new JObject;			// Load the default configuration options.			$data->options = JComponentHelper::getParams('com_finder');			// Setup the weight lookup information.			$data->weights = array(				self::TITLE_CONTEXT	=> round($data->options->get('title_multiplier', 1.7), 2),				self::TEXT_CONTEXT	=> round($data->options->get('text_multiplier', 0.7), 2),				self::META_CONTEXT	=> round($data->options->get('meta_multiplier', 1.2), 2),				self::PATH_CONTEXT	=> round($data->options->get('path_multiplier', 2.0), 2),				self::MISC_CONTEXT	=> round($data->options->get('misc_multiplier', 0.3), 2)			);			// Set the current time as the start time.			$data->startTime = JFactory::getDate()->toSQL();			// Set the remaining default values.			$data->batchSize = (int) $data->options->get('batch_size', 50);			$data->batchOffset = 0;			$data->totalItems = 0;			$data->pluginState = array();		}		// Setup the profiler if debugging is enabled.		if (JFactory::getApplication()->getCfg('debug'))		{			self::$profiler = JProfiler::getInstance('FinderIndexer');		}		// Setup the stemmer.		if ($data->options->get('stem', 1) && $data->options->get('stemmer', 'porter_en'))		{			FinderIndexerHelper::$stemmer = FinderIndexerStemmer::getInstance($data->options->get('stemmer', 'porter_en'));		}		// Set the state.		self::$state = $data;		return self::$state;	}	/**	 * Method to set the indexer state.	 *	 * @param   object  $data  A new indexer state object.	 *	 * @return  boolean  True on success, false on failure.	 *	 * @since   2.5	 */	public static function setState($data)	{		// Check the state object.		if (empty($data) || !$data instanceof JObject)		{			return false;		}		// Set the new internal state.		self::$state = $data;		// Set the new session state.		$session = JFactory::getSession();		$session->set('_finder.state', $data);		return true;	}	/**	 * Method to reset the indexer state.	 *	 * @return  void	 *	 * @since   2.5	 */	public static function resetState()	{		// Reset the internal state to null.		self::$state = null;		// Reset the session state to null.		$session = JFactory::getSession();		$session->set('_finder.state', null);	}	/**	 * Method to index a content item.	 *	 * @param   FinderIndexerResult  $item    The content item to index.	 * @param   string               $format  The format of the content. [optional]	 *	 * @return  integer  The ID of the record in the links table.	 *	 * @since   2.5	 * @throws  Exception on database error.	 */	abstract public function index($item, $format = 'html');	/**	 * Method to remove a link from the index.	 *	 * @param   integer  $linkId  The id of the link.	 *	 * @return  boolean  True on success.	 *	 * @since   2.5	 * @throws  Exception on database error.	 */	abstract public function remove($linkId);	/**	 * Method to optimize the index. We use this method to remove unused terms	 * and any other optimizations that might be necessary.	 *	 * @return  boolean  True on success.	 *	 * @since   2.5	 * @throws  Exception on database error.	 */	abstract public function optimize();	/**	 * Method to get a content item's signature.	 *	 * @param   object  $item  The content item to index.	 *	 * @return  string  The content item's signature.	 *	 * @since   2.5	 */	protected static function getSignature($item)	{		// Get the indexer state.		$state = self::getState();		// Get the relevant configuration variables.		$config = array();		$config[] = $state->weights;		$config[] = $state->options->get('stem', 1);		$config[] = $state->options->get('stemmer', 'porter_en');		return md5(serialize(array($item, $config)));	}	/**	 * Method to parse input, tokenize it, and then add it to the database.	 *	 * @param   mixed    $input    String or resource to use as input. A resource	 *                             input will automatically be chunked to conserve	 *                             memory. Strings will be chunked if longer than	 *                             2K in size.	 * @param   integer  $context  The context of the input. See context constants.	 * @param   string   $lang     The language of the input.	 * @param   string   $format   The format of the input.	 *	 * @return  integer  The number of tokens extracted from the input.	 *	 * @since   2.5	 */	protected function tokenizeToDB($input, $context, $lang, $format)	{		$count = 0;		$buffer = null;		if (!empty($input))		{			// If the input is a resource, batch the process out.			if (is_resource($input))			{				// Batch the process out to avoid memory limits.				while (!feof($input))				{					// Read into the buffer.					$buffer .= fread($input, 2048);					// If we haven't reached the end of the file, seek to the last					// space character and drop whatever is after that to make sure					// we didn't truncate a term while reading the input.					if (!feof($input))					{						// Find the last space character.						$ls = strrpos($buffer, ' ');						// Adjust string based on the last space character.						if ($ls)						{							// Truncate the string to the last space character.							$string = substr($buffer, 0, $ls);							// Adjust the buffer based on the last space for the							// next iteration and trim.							$buffer = JString::trim(substr($buffer, $ls));						}						// No space character was found.						else						{							$string = $buffer;						}					}					// We've reached the end of the file, so parse whatever remains.					else					{						$string = $buffer;					}					// Parse the input.					$string = FinderIndexerHelper::parse($string, $format);					// Check the input.					if (empty($string))					{						continue;					}					// Tokenize the input.					$tokens = FinderIndexerHelper::tokenize($string, $lang);					// Add the tokens to the database.					$count += $this->addTokensToDB($tokens, $context);					// Check if we're approaching the memory limit of the token table.					if ($count > self::$state->options->get('memory_table_limit', 30000))					{						self::toggleTables(false);					}					unset($string);					unset($tokens);				}			}			// If the input is greater than 2K in size, it is more efficient to			// batch out the operation into smaller chunks of work.			elseif (strlen($input) > 2048)			{				$start = 0;				$end = strlen($input);				$chunk = 2048;				// As it turns out, the complex regular expressions we use for				// sanitizing input are not very efficient when given large				// strings. It is much faster to process lots of short strings.				while ($start < $end)				{					// Setup the string.					$string = substr($input, $start, $chunk);					// Find the last space character if we aren't at the end.					$ls = (($start + $chunk) < $end ? strrpos($string, ' ') : false);					// Truncate to the last space character.					if ($ls !== false)					{						$string = substr($string, 0, $ls);					}					// Adjust the start position for the next iteration.					$start += ($ls !== false ? ($ls + 1 - $chunk) + $chunk : $chunk);					// Parse the input.					$string = FinderIndexerHelper::parse($string, $format);					// Check the input.					if (empty($string))					{						continue;					}					// Tokenize the input.					$tokens = FinderIndexerHelper::tokenize($string, $lang);					// Add the tokens to the database.					$count += $this->addTokensToDB($tokens, $context);					// Check if we're approaching the memory limit of the token table.					if ($count > self::$state->options->get('memory_table_limit', 30000))					{						self::toggleTables(false);					}				}			}			else			{				// Parse the input.				$input = FinderIndexerHelper::parse($input, $format);				// Check the input.				if (empty($input))				{					return $count;				}				// Tokenize the input.				$tokens = FinderIndexerHelper::tokenize($input, $lang);				// Add the tokens to the database.				$count = $this->addTokensToDB($tokens, $context);			}		}		return $count;	}	/**	 * Method to add a set of tokens to the database.	 *	 * @param   mixed  $tokens   An array or single FinderIndexerToken object.	 * @param   mixed  $context  The context of the tokens. See context constants. [optional]	 *	 * @return  integer  The number of tokens inserted into the database.	 *	 * @since   2.5	 * @throws  Exception on database error.	 */	abstract protected function addTokensToDB($tokens, $context = '');	/**	 * Method to switch the token tables from Memory tables to MyISAM tables	 * when they are close to running out of memory.	 *	 * @param   boolean  $memory  Flag to control how they should be toggled.	 *	 * @return  boolean  True on success.	 *	 * @since   2.5	 * @throws  Exception on database error.	 */	abstract protected function toggleTables($memory);}
<?php/** * @package     Joomla.Site * @subpackage  com_weblinks * * @copyright   Copyright (C) 2005 - 2013 Open Source Matters, Inc. All rights reserved. * @license     GNU General Public License version 2 or later; see LICENSE.txt */defined('_JEXEC') or die;/** * Weblinks Component Controller * * @package     Joomla.Site * @subpackage  com_weblinks * @since       1.5 */class WeblinksController extends JControllerLegacy{	/**	 * Method to display a view.	 *	 * @param   boolean			If true, the view output will be cached	 * @param   array  An array of safe url parameters and their variable types, for valid values see {@link JFilterInput::clean()}.	 *	 * @return  JController		This object to support chaining.	 * @since   1.5	 */	public function display($cachable = false, $urlparams = false)	{		$cachable	= true;	// Huh? Why not just put that in the constructor?		$user		= JFactory::getUser();		// Set the default view name and format from the Request.		// Note we are using w_id to avoid collisions with the router and the return page.		// Frontend is a bit messier than the backend.		$id    = $this->input->getInt('w_id');		$vName = $this->input->get('view', 'categories');		$this->input->set('view', $vName);		if ($user->get('id') ||($this->input->getMethod() == 'POST' && $vName = 'categories'))		{			$cachable = false;		}		$safeurlparams = array(			'id'				=> 'INT',			'limit'				=> 'UINT',			'limitstart'		=> 'UINT',			'filter_order'		=> 'CMD',			'filter_order_Dir'	=> 'CMD',			'lang'				=> 'CMD'		);		// Check for edit form.		if ($vName == 'form' && !$this->checkEditId('com_weblinks.edit.weblink', $id))		{			// Somehow the person just went to the form - we don't allow that.			return JError::raiseError(403, JText::sprintf('JLIB_APPLICATION_ERROR_UNHELD_ID', $id));		}		return parent::display($cachable, $safeurlparams);	}}
<?php/** * @package     Joomla.Platform * @subpackage  Image * * @copyright   Copyright (C) 2005 - 2013 Open Source Matters, Inc. All rights reserved. * @license     GNU General Public License version 2 or later; see LICENSE */defined('JPATH_PLATFORM') or die;/** * Image Filter class adjust the smoothness of an image. * * @package     Joomla.Platform * @subpackage  Image * @since       11.3 */class JImageFilterSmooth extends JImageFilter{	/**	 * Method to apply a filter to an image resource.	 *	 * @param   array  $options  An array of options for the filter.	 *	 * @return  void	 *	 * @since   11.3	 * @throws  InvalidArgumentException	 * @throws  RuntimeException	 */	public function execute(array $options = array())	{		// Verify that image filter support for PHP is available.		if (!function_exists('imagefilter'))		{			JLog::add('The imagefilter function for PHP is not available.', JLog::ERROR);			throw new RuntimeException('The imagefilter function for PHP is not available.');		}		// Validate that the smoothing value exists and is an integer.		if (!isset($options[IMG_FILTER_SMOOTH]) || !is_int($options[IMG_FILTER_SMOOTH]))		{			throw new InvalidArgumentException('No valid smoothing value was given.  Expected integer.');		}		// Perform the smoothing filter.		imagefilter($this->handle, IMG_FILTER_SMOOTH, $options[IMG_FILTER_SMOOTH]);	}}
<?php/** * @package     Joomla.Administrator * @subpackage  Template.hathor * * @copyright   Copyright (C) 2005 - 2013 Open Source Matters, Inc. All rights reserved. * @license     GNU General Public License version 2 or later; see LICENSE.txt */defined('_JEXEC') or die;// Get additional language strings prefixed with TPL_HATHOR$lang = JFactory::getLanguage();$lang->load('tpl_hathor', JPATH_ADMINISTRATOR)|| $lang->load('tpl_hathor', JPATH_ADMINISTRATOR . '/templates/hathor/language');$app	= JFactory::getApplication();$doc	= JFactory::getDocument();// Load optional RTL Bootstrap CSSJHtml::_('bootstrap.loadCss', false, $this->direction);// Load system style CSS$doc->addStyleSheet('templates/system/css/system.css');// Loadtemplate CSS$doc->addStyleSheet('templates/'.$this->template.'/css/template.css');// Load additional CSS styles for colorsif (!$this->params->get('colourChoice')) :$colour = 'standard';else :$colour = htmlspecialchars($this->params->get('colourChoice'));endif;$doc->addStyleSheet('templates/'.$this->template.'/css/colour_'.$colour.'.css');// Load specific language related CSS$file = 'language/' . $lang->getTag() . '/' . $lang->getTag() . '.css';if (is_file($file)){	$doc->addStyleSheet($file);}// Load additional CSS styles for rtl sitesif ($this->direction == 'rtl'){	$doc->addStyleSheet('templates/'.$this->template.'/css/template_rtl.css');	$doc->addStyleSheet('templates/'.$this->template.'/css/colour_'.$colour.'_rtl.css');}// Load specific language related CSS$file = 'language/'.$lang->getTag().'/'.$lang->getTag().'.css';if (JFile::exists($file)){	$doc->addStyleSheet($file);}// Load additional CSS styles for bold Textif ($this->params->get('boldText')){	$doc->addStyleSheet('templates/'.$this->template.'/css/boldtext.css');}// Load template javascript$doc->addScript('templates/'.$this->template.'/js/template.js', 'text/javascript');// Logo fileif ($this->params->get('logoFile')){	$logo = JURI::root() . $this->params->get('logoFile');}else{	$logo = $this->baseurl . "/templates/" . $this->template . "/images/logo.png";}?><!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.0 Transitional//EN" "http://www.w3.org/TR/xhtml1/DTD/xhtml1-transitional.dtd"><html xmlns="http://www.w3.org/1999/xhtml" xml:lang="<?php echo  $this->language; ?>" lang="<?php echo  $this->language; ?>" dir="<?php echo  $this->direction; ?>" ><head><jdoc:include type="head" /><!--[if lt IE 9]>	<script src="../media/jui/js/html5.js"></script><![endif]--></head><body class="contentpane">	<jdoc:include type="message" />	<jdoc:include type="component" /></body></html>
<?php/** * @package     Joomla.Administrator * @subpackage  com_media * * @copyright   Copyright (C) 2005 - 2013 Open Source Matters, Inc. All rights reserved. * @license     GNU General Public License version 2 or later; see LICENSE.txt */defined('_JEXEC') or die;JHtml::_('formbehavior.chosen', 'select');$user  = JFactory::getUser();$input = JFactory::getApplication()->input;?><script type='text/javascript'>var image_base_path = '<?php $params = JComponentHelper::getParams('com_media');echo $params->get('image_path', 'images'); ?>/';</script><form action="index.php?option=com_media&amp;asset=<?php echo $input->getCmd('asset');?>&amp;author=<?php echo $input->getCmd('author'); ?>" class="form-vertical" id="imageForm" method="post" enctype="multipart/form-data">	<div id="messages" style="display: none;">		<span id="message"></span><?php echo JHtml::_('image', 'media/dots.gif', '...', array('width' => 22, 'height' => 12), true) ?>	</div>	<div class="well">		<div class="row">			<div class="span9 control-group">				<div class="control-label">					<label class="control-label" for="folder"><?php echo JText::_('COM_MEDIA_DIRECTORY') ?></label>				</div>				<div class="controls">					<?php echo $this->folderList; ?>					<button class="btn" type="button" id="upbutton" title="<?php echo JText::_('COM_MEDIA_DIRECTORY_UP') ?>"><?php echo JText::_('COM_MEDIA_UP') ?></button>				</div>			</div>			<div class="pull-right">				<button class="btn btn-primary" type="button" onclick="<?php if ($this->state->get('field.id')):?>window.parent.jInsertFieldValue(document.id('f_url').value,'<?php echo $this->state->get('field.id');?>');<?php else:?>ImageManager.onok();<?php endif;?>window.parent.SqueezeBox.close();"><?php echo JText::_('COM_MEDIA_INSERT') ?></button>				<button class="btn" type="button" onclick="window.parent.SqueezeBox.close();"><?php echo JText::_('JCANCEL') ?></button>			</div>		</div>	</div>	<iframe id="imageframe" name="imageframe" src="index.php?option=com_media&amp;view=imagesList&amp;tmpl=component&amp;folder=<?php echo $this->state->folder?>&amp;asset=<?php echo $input->getCmd('asset');?>&amp;author=<?php echo $input->getCmd('author');?>"></iframe>	<div class="well">		<div class="row">			<div class="span6 control-group">				<div class="control-label">					<label for="f_url"><?php echo JText::_('COM_MEDIA_IMAGE_URL') ?></label>				</div>				<div class="controls">					<input type="text" id="f_url" value="" />				</div>			</div>			<?php if (!$this->state->get('field.id')):?>			<div class="span6 control-group">				<div class="control-label">					<label for="f_align"><?php echo JText::_('COM_MEDIA_ALIGN') ?></label>				</div>				<div class="controls">					<select size="1" id="f_align">						<option value="" selected="selected"><?php echo JText::_('COM_MEDIA_NOT_SET') ?></option>						<option value="left"><?php echo JText::_('JGLOBAL_LEFT') ?></option>						<option value="right"><?php echo JText::_('JGLOBAL_RIGHT') ?></option>					</select>					<p class="help-block"><?php echo JText::_('COM_MEDIA_ALIGN_DESC');?></p>				</div>			</div>			<?php endif;?>		</div>		<?php if (!$this->state->get('field.id')):?>		<div class="row">			<div class="span6 control-group">				<div class="control-label">					<label for="f_alt"><?php echo JText::_('COM_MEDIA_IMAGE_DESCRIPTION') ?></label>				</div>				<div class="controls">					<input type="text" id="f_alt" value="" />				</div>			</div>			<div class="span6 control-group">				<div class="control-label">					<label for="f_title"><?php echo JText::_('COM_MEDIA_TITLE') ?></label>				</div>				<div class="controls">					<input type="text" id="f_title" value="" />				</div>			</div>		</div>		<div class="row">			<div class="span12 control-group">				<div class="control-label">					<label for="f_caption"><?php echo JText::_('COM_MEDIA_CAPTION') ?></label>				</div>				<div class="controls">					<select size="1" id="f_caption" >						<option value="" selected="selected" ><?php echo JText::_('JNO') ?></option>						<option value="1"><?php echo JText::_('JYES') ?></option>					</select>					<p class="help-block"><?php echo JText::_('COM_MEDIA_CAPTION_DESC');?></p>				</div>			</div>		</div>		<?php endif;?>		<input type="hidden" id="dirPath" name="dirPath" />		<input type="hidden" id="f_file" name="f_file" />		<input type="hidden" id="tmpl" name="component" />	</div></form><?php if ($user->authorise('core.create', 'com_media')) : ?>	<form action="<?php echo JURI::base(); ?>index.php?option=com_media&amp;task=file.upload&amp;tmpl=component&amp;<?php echo $this->session->getName() . '=' . $this->session->getId(); ?>&amp;<?php echo JSession::getFormToken();?>=1&amp;asset=<?php echo $input->getCmd('asset');?>&amp;author=<?php echo $input->getCmd('author');?>&amp;view=images" id="uploadForm" class="form-horizontal" name="uploadForm" method="post" enctype="multipart/form-data">		<div id="uploadform" class="well">			<fieldset id="upload-noflash" class="actions">				<div class="control-group">					<div class="control-label">						<label for="upload-file" class="control-label"><?php echo JText::_('COM_MEDIA_UPLOAD_FILE'); ?></label>					</div>					<div class="controls">						<input type="file" id="upload-file" name="Filedata[]" multiple /><button class="btn btn-primary" id="upload-submit"><i class="icon-upload icon-white"></i> <?php echo JText::_('COM_MEDIA_START_UPLOAD'); ?></button>						<p class="help-block"><?php echo $this->config->get('upload_maxsize') == '0' ? JText::_('COM_MEDIA_UPLOAD_FILES_NOLIMIT') : JText::sprintf('COM_MEDIA_UPLOAD_FILES', $this->config->get('upload_maxsize')); ?></p>					</div>				</div>			</fieldset>			<input type="hidden" name="return-url" value="<?php echo base64_encode('index.php?option=com_media&view=images&tmpl=component&fieldid=' . $input->getCmd('fieldid', '') . '&e_name=' . $input->getCmd('e_name') . '&asset=' . $input->getCmd('asset') . '&author=' . $input->getCmd('author')); ?>" />		</div>	</form><?php endif; ?>
<?php/** * @package     Joomla.Legacy * @subpackage  Database * * @copyright   Copyright (C) 2005 - 2013 Open Source Matters, Inc. All rights reserved. * @license     GNU General Public License version 2 or later; see LICENSE */defined('JPATH_PLATFORM') or die;JLog::add('JDatabaseSqlazure is deprecated, use JDatabaseDriverSqlazure instead.', JLog::WARNING, 'deprecated');/** * SQL Server database driver * * @package     Joomla.Legacy * @subpackage  Database * @see         http://msdn.microsoft.com/en-us/library/ee336279.aspx * @since       11.1 * @deprecated  13.1 Use JDatabaseDriverSqlazure instead. */class JDatabaseSqlazure extends JDatabaseDriverSqlazure{}
<?php/** * @package     Joomla.Administrator * @subpackage  Templates.isis * * @copyright   Copyright (C) 2005 - 2013 Open Source Matters, Inc. All rights reserved. * @license     GNU General Public License version 2 or later; see LICENSE.txt */defined('_JEXEC') or die;require_once __DIR__ . '/index.php';
<?php/** * @package     Joomla.Site * @subpackage  mod_articles_news * * @copyright   Copyright (C) 2005 - 2013 Open Source Matters, Inc. All rights reserved. * @license     GNU General Public License version 2 or later; see LICENSE.txt */defined('_JEXEC') or die;$item_heading = $params->get('item_heading', 'h4');?><?php if ($params->get('item_title')) : ?>	<<?php echo $item_heading; ?> class="newsflash-title<?php echo $params->get('moduleclass_sfx'); ?>">	<?php if ($params->get('link_titles') && $item->link != '') : ?>		<a href="<?php echo $item->link;?>">			<?php echo $item->title;?></a>	<?php else : ?>		<?php echo $item->title; ?>	<?php endif; ?>	</<?php echo $item_heading; ?>><?php endif; ?><?php if (!$params->get('intro_only')) :	echo $item->afterDisplayTitle;endif; ?><?php echo $item->beforeDisplayContent; ?><?php echo $item->introtext; ?><?php if (isset($item->link) && $item->readmore != 0 && $params->get('readmore')) :	echo '<a class="readmore" href="'.$item->link.'">'.$item->linkText.'</a>';endif; ?>
<?php/** * @package     Joomla.Administrator * @subpackage  com_messages * * @copyright   Copyright (C) 2005 - 2013 Open Source Matters, Inc. All rights reserved. * @license     GNU General Public License version 2 or later; see LICENSE.txt */defined('_JEXEC') or die;/** * Messages Component Message Model * * @package     Joomla.Administrator * @subpackage  com_messages * @since       1.6 */class MessagesControllerConfig extends JControllerLegacy{	/**	 * Method to save a record.	 */	public function save()	{		// Check for request forgeries.		JSession::checkToken() or jexit(JText::_('JINVALID_TOKEN'));		$app   = JFactory::getApplication();		$model = $this->getModel('Config', 'MessagesModel');		$data  = $this->input->post->get('jform', array(), 'array');		// Validate the posted data.		$form	= $model->getForm();		if (!$form)		{			JError::raiseError(500, $model->getError());			return false;		}		$data = $model->validate($form, $data);		// Check for validation errors.		if ($data === false)		{			// Get the validation messages.			$errors	= $model->getErrors();			// Push up to three validation messages out to the user.			for ($i = 0, $n = count($errors); $i < $n && $i < 3; $i++)			{				if ($errors[$i] instanceof Exception)				{					$app->enqueueMessage($errors[$i]->getMessage(), 'warning');				} else {					$app->enqueueMessage($errors[$i], 'warning');				}			}			// Redirect back to the main list.			$this->setRedirect(JRoute::_('index.php?option=com_messages&view=messages', false));			return false;		}		// Attempt to save the data.		if (!$model->save($data))		{			// Redirect back to the main list.			$this->setMessage(JText::sprintf('JERROR_SAVE_FAILED', $model->getError()), 'warning');			$this->setRedirect(JRoute::_('index.php?option=com_messages&view=messages', false));			return false;		}		// Redirect to the list screen.		$this->setMessage(JText::_('COM_MESSAGES_CONFIG_SAVED'));		$this->setRedirect(JRoute::_('index.php?option=com_messages&view=messages', false));		return true;	}}
<?php/** * @package     Joomla.Platform * @subpackage  Google * * @copyright   Copyright (C) 2005 - 2013 Open Source Matters, Inc. All rights reserved * @license     GNU General Public License version 2 or later; see LICENSE */defined('JPATH_PLATFORM') or die;/** * Google Maps embed class for the Joomla Platform. * * @package     Joomla.Platform * @subpackage  Google * @since       12.3 */class JGoogleEmbedMaps extends JGoogleEmbed{	/**	 * @var    JHttp  The HTTP client object to use in sending HTTP requests.	 * @since  12.3	 */	protected $http;	/**	 * Constructor.	 *	 * @param   JRegistry  $options  Google options object	 * @param   JURI       $uri      URL of the page being rendered	 * @param   JHttp      $http     Http client for geocoding requests	 *	 * @since   12.3	 */	public function __construct(JRegistry $options = null, JURI $uri = null, JHttp $http = null)	{		parent::__construct($options = null, $uri = null);		$this->http = $http ? $http : new JHttp($this->options);	}	/**	 * Method to get the API key	 *	 * @return  string  The Google Maps API key	 *	 * @since   12.3	 */	public function getKey()	{		return $this->getOption('key');	}	/**	 * Method to set the API key	 *	 * @param   string  $key  The Google Maps API key	 *	 * @return  JGoogleEmbedMaps  The object for method chaining	 *	 * @since   12.3	 */	public function setKey($key)	{		$this->setOption('key', $key);		return $this;	}	/**	 * Method to get the id of the map div	 *	 * @return  string  The ID	 *	 * @since   12.3	 */	public function getMapID()	{		return $this->getOption('mapid') ? $this->getOption('mapid') : 'map_canvas';	}	/**	 * Method to set the map div id	 *	 * @param   string  $id  The ID	 *	 * @return  JGoogleEmbedMaps  The object for method chaining	 *	 * @since   12.3	 */	public function setMapID($id)	{		$this->setOption('mapid', $id);		return $this;	}	/**	 * Method to get the class of the map div	 *	 * @return  string  The class	 *	 * @since   12.3	 */	public function getMapClass()	{		return $this->getOption('mapclass') ? $this->getOption('mapclass') : '';	}	/**	 * Method to set the map div class	 *	 * @param   string  $class  The class	 *	 * @return  JGoogleEmbedMaps  The object for method chaining	 *	 * @since   12.3	 */	public function setMapClass($class)	{		$this->setOption('mapclass', $class);		return $this;	}	/**	 * Method to get the style of the map div	 *	 * @return  string  The style	 *	 * @since   12.3	 */	public function getMapStyle()	{		return $this->getOption('mapstyle') ? $this->getOption('mapstyle') : '';	}	/**	 * Method to set the map div style	 *	 * @param   string  $style  The style	 *	 * @return  JGoogleEmbedMaps  The object for method chaining	 *	 * @since   12.3	 */	public function setMapStyle($style)	{		$this->setOption('mapstyle', $style);		return $this;	}	/**	 * Method to get the map type setting	 *	 * @return  string  The class	 *	 * @since   12.3	 */	public function getMapType()	{		return $this->getOption('maptype') ? $this->getOption('maptype') : 'ROADMAP';	}	/**	 * Method to set the map type ()	 *	 * @param   string  $type  Valid types are ROADMAP, SATELLITE, HYBRID, and TERRAIN	 *	 * @return  JGoogleEmbedMaps  The object for method chaining	 *	 * @since   12.3	 */	public function setMapType($type)	{		$this->setOption('maptype', strtoupper($type));		return $this;	}	/**	 * Method to get additional map options	 *	 * @return  string  The options	 *	 * @since   12.3	 */	public function getAdditionalMapOptions()	{		return $this->getOption('mapoptions') ? $this->getOption('mapoptions') : array();	}	/**	 * Method to add additional map options	 *	 * @param   array  $options  Additional map options	 *	 * @return  JGoogleEmbedMaps  The object for method chaining	 *	 * @since   12.3	 */	public function setAdditionalMapOptions($options)	{		$this->setOption('mapoptions', $options);		return $this;	}	/**	 * Method to get additional map options	 *	 * @return  string  The options	 *	 * @since   12.3	 */	public function getAdditionalJavascript()	{		return $this->getOption('extrascript') ? $this->getOption('extrascript') : '';	}	/**	 * Method to add additional javascript	 *	 * @param   array  $script  Additional javascript	 *	 * @return  JGoogleEmbedMaps  The object for method chaining	 *	 * @since   12.3	 */	public function setAdditionalJavascript($script)	{		$this->setOption('extrascript', $script);		return $this;	}	/**	 * Method to get the zoom	 *	 * @return  int  The zoom level	 *	 * @since   12.3	 */	public function getZoom()	{		return $this->getOption('zoom') ? $this->getOption('zoom') : 0;	}	/**	 * Method to set the map zoom	 *	 * @param   int  $zoom  Zoom level (0 is whole world)	 *	 * @return  JGoogleEmbedMaps  The object for method chaining	 *	 * @since   12.3	 */	public function setZoom($zoom)	{		$this->setOption('zoom', $zoom);		return $this;	}	/**	 * Method to set the center of the map	 *	 * @return  mixed  A latitude longitude array or an address string	 *	 * @since   12.3	 */	public function getCenter()	{		return $this->getOption('mapcenter') ? $this->getOption('mapcenter') : array(0, 0);	}	/**	 * Method to set the center of the map	 *	 * @param   mixed  $location       A latitude/longitude array or an address string	 * @param   mixed  $title          Title of marker or false for no marker	 * @param   array  $markeroptions  Options for marker	 *	 * @return  JGoogleEmbedMaps  The latitude/longitude of the center or false on failure	 *	 * @since   12.3	 */	public function setCenter($location, $title = true, $markeroptions = array())	{		if ($title)		{			$title = is_string($title) ? $title : null;			if (!$marker = $this->addMarker($location, $title, $markeroptions))			{				return false;			}			$location = $marker['loc'];		}		elseif (is_string($location))		{			$geocode = $this->geocodeAddress($location);			if (!$geocode)			{				return false;			}			$location = $geocode['geometry']['location'];			$location = array_values($location);		}		$this->setOption('mapcenter', $location);		return $this;	}	/**	 * Add a marker to the map	 *	 * @param   mixed  $location  A latitude longitude array or an address string	 * @param   mixed  $title     The hover-text for the marker	 * @param   array  $options   Options for marker	 *	 * @return  mixed  The marker or false on failure	 *	 * @since   12.3	 */	public function addMarker($location, $title = null, $options = array())	{		if (is_string($location))		{			if (!$title)			{				$title = $location;			}			$geocode = $this->geocodeAddress($location);			if (!$geocode)			{				return false;			}			$location = $geocode['geometry']['location'];		}		elseif (!$title)		{			$title = implode(', ', $location);		}		$location = array_values($location);		$marker = array('loc' => $location, 'title' => $title, 'options' => $options);		$markers = $this->listMarkers();		$markers[] = $marker;		$this->setOption('markers', $markers);		return $marker;	}	/**	 * List the markers added to the map	 *	 * @return  array  A list of markers	 *	 * @since   12.3	 */	public function listMarkers()	{		return $this->getOption('markers') ? $this->getOption('markers') : array();	}	/**	 * Delete a marker from the map	 *	 * @param   int  $index  Index of marker to delete (defaults to last added marker)	 *	 * @return  array The latitude/longitude of the deleted marker	 *	 * @since   12.3	 */	public function deleteMarker($index = null)	{		$markers = $this->listMarkers();		if ($index === null)		{			$index = count($markers) - 1;		}		if ($index >= count($markers) || $index < 0)		{			throw new OutOfBoundsException('Marker index out of bounds.');		}		$marker = $markers[$index];		unset($markers[$index]);		$markers = array_values($markers);		$this->setOption('markers', $markers);		return $marker;	}	/**	 * Checks if the javascript is set to be asynchronous	 *	 * @return  boolean  True if asynchronous	 *	 * @since   12.3	 */	public function isAsync()	{		return $this->getOption('async') === null ? true : $this->getOption('async');	}	/**	 * Load javascript asynchronously	 *	 * @return  JGoogleEmbedMaps  The object for method chaining	 *	 * @since   12.3	 */	public function useAsync()	{		$this->setOption('async', true);		return $this;	}	/**	 * Load javascript synchronously	 *	 * @return  JGoogleEmbedAMaps  The object for method chaining	 *	 * @since   12.3	 */	public function useSync()	{		$this->setOption('async', false);		return $this;	}	/**	 * Method to get callback function for async javascript loading	 *	 * @return  string  The ID	 *	 * @since   12.3	 */	public function getAsyncCallback()	{		return $this->getOption('callback') ? $this->getOption('callback') : 'initialize';	}	/**	 * Method to set the callback function for async javascript loading	 *	 * @param   string  $callback  The callback function name	 *	 * @return  JGoogleEmbedMaps  The object for method chaining	 *	 * @since   12.3	 */	public function setAsyncCallback($callback)	{		$this->setOption('callback', $callback);		return $this;	}	/**	 * Checks if a sensor is set to be required	 *	 * @return  boolean  True if asynchronous	 *	 * @since   12.3	 */	public function hasSensor()	{		return $this->getOption('sensor') === null ? false : $this->getOption('sensor');	}	/**	 * Require access to sensor data	 *	 * @return  JGoogleEmbedMaps  The object for method chaining	 *	 * @since   12.3	 */	public function useSensor()	{		$this->setOption('sensor', true);		return $this;	}	/**	 * Don't require access to sensor data	 *	 * @return  JGoogleEmbedAMaps  The object for method chaining	 *	 * @since   12.3	 */	public function noSensor()	{		$this->setOption('sensor', false);		return $this;	}	/**	 * Checks how the script should be loaded	 *	 * @return  string  Autoload type (onload, jquery, mootools, or false)	 *	 * @since   12.3	 */	public function getAutoload()	{		return $this->getOption('autoload') ? $this->getOption('autoload') : 'false';	}	/**	 * Automatically add the callback to the window	 *	 * @param   string  $type  The method to add the callback (options are onload, jquery, mootools, and false)	 *	 * @return  JGoogleEmbedAMaps  The object for method chaining	 *	 * @since   12.3	 */	public function setAutoload($type = 'onload')	{		$this->setOption('autoload', $type);		return $this;	}	/**	 * Get code to load Google Maps javascript	 *	 * @return  string  Javascript code	 *	 * @since   12.3	 */	public function getHeader()	{		if (!$this->getOption('key'))		{			throw new UnexpectedValueException('A Google Maps API key is required.');		}		$zoom = $this->getZoom();		$center = $this->getCenter();		$maptype = $this->getMapType();		$id = $this->getMapID();		$scheme = $this->isSecure() ? 'https' : 'http';		$key = $this->getKey();		$sensor = $this->hasSensor() ? 'true' : 'false';		$setup = 'var mapOptions = {';		$setup .= "zoom: {$zoom},";		$setup .= "center: new google.maps.LatLng({$center[0]},{$center[1]}),";		$setup .= "mapTypeId: google.maps.MapTypeId.{$maptype},";		$setup .= substr(json_encode($this->getAdditionalMapOptions()), 1, -1);		$setup .= '};';		$setup .= "var map = new google.maps.Map(document.getElementById('{$id}'), mapOptions);";		foreach ($this->listMarkers() as $marker)		{			$loc = $marker['loc'];			$title = $marker['title'];			$options = $marker['options'];			$setup .= 'new google.maps.Marker({';			$setup .= "position: new google.maps.LatLng({$loc[0]},{$loc[1]}),";			$setup .= 'map: map,';			$setup .= "title:'{$title}',";			$setup .= substr(json_encode($options), 1, -1);			$setup .= '});';		}		$setup .= $this->getAdditionalJavascript();		if ($this->isAsync())		{			$asynccallback = $this->getAsyncCallback();			$output = '<script type="text/javascript">';			$output .= "function {$asynccallback}() {";			$output .= $setup;			$output .= '}';			$onload = "function() {";			$onload .= 'var script = document.createElement("script");';			$onload .= 'script.type = "text/javascript";';			$onload .= "script.src = '{$scheme}://maps.googleapis.com/maps/api/js?key={$key}&sensor={$sensor}&callback={$asynccallback}';";			$onload .= 'document.body.appendChild(script);';			$onload .= '}';		}		else		{			$output = "<script type='text/javascript' src='{$scheme}://maps.googleapis.com/maps/api/js?key={$key}&sensor={$sensor}'>";			$output .= '</script>';			$output .= '<script type="text/javascript">';			$onload = "function() {";			$onload .= $setup;			$onload .= '}';		}		switch ($this->getAutoload())		{			case 'onload':			$output .= "window.onload={$onload};";			break;			case 'jquery':			$output .= "$(document).ready({$onload});";			break;			case 'mootools':			$output .= "window.addEvent('domready',{$onload});";			break;		}		$output .= '</script>';		return $output;	}	/**	 * Method to retrieve the div that the map is loaded into	 *	 * @return  string  The body	 *	 * @since   12.3	 */	public function getBody()	{		$id = $this->getMapID();		$class = $this->getMapClass();		$style = $this->getMapStyle();		$output = "<div id='{$id}'";		if (!empty($class))		{			$output .= " class='{$class}'";		}		if (!empty($style))		{			$output .= " style='{$style}'";		}		$output .= '></div>';		return $output;	}	/**	 * Method to get the location information back from an address	 *	 * @param   string  $address  The address to geocode	 *	 * @return  array  An array containing Google's geocode data	 *	 * @since   12.3	 */	public function geocodeAddress($address)	{		$url = 'http://maps.googleapis.com/maps/api/geocode/json?sensor=false&address=' . urlencode($address);		$response = $this->http->get($url);		if ($response->code < 200 || $response->code >= 300)		{			throw new RuntimeException('Error code ' . $response->code . ' received geocoding address: ' . $response->body . '.');		}		$data = json_decode($response->body, true);		if (!$data)		{			throw new RuntimeException('Invalid json received geocoding address: ' . $response->body . '.');		}		if ($data['status'] != 'OK')		{			return null;		}		return $data['results'][0];	}}
<?php/** * @package     Joomla.Administrator * @subpackage  com_banners * * @copyright   Copyright (C) 2005 - 2013 Open Source Matters, Inc. All rights reserved. * @license     GNU General Public License version 2 or later; see LICENSE.txt */defined('_JEXEC') or die;/** * View class for download a list of tracks. * * @package     Joomla.Administrator * @subpackage  com_banners * @since       1.6 */class BannersViewDownload extends JViewLegacy{	protected $form;	/**	 * Display the view	 */	public function display($tpl = null)	{		$this->form	= $this->get('Form');		// Check for errors.		if (count($errors = $this->get('Errors')))		{			JError::raiseError(500, implode("\n", $errors));			return false;		}		parent::display($tpl);	}}
<?php/** * Generic_Sniffs_Formatting_NoSpaceAfterCastSniff. * * PHP version 5 * * @category  PHP * @package   PHP_CodeSniffer * @author    Greg Sherwood <gsherwood@squiz.net> * @author    Marc McIntyre <mmcintyre@squiz.net> * @copyright 2006 Squiz Pty Ltd (ABN 77 084 670 600) * @license   http://matrix.squiz.net/developer/tools/php_cs/licence BSD Licence * @version   CVS: $Id: NoSpaceAfterCastSniff.php 8 2010-11-06 00:40:23Z elkuku $ * @link      http://pear.php.net/package/PHP_CodeSniffer *//** * Ensures there is no space after cast tokens. * * Example: * <b class="bad">(int) $foo;</b> * <b class="good">(int)$foo;</b> * * @category  PHP * @package   PHP_CodeSniffer * @author    Greg Sherwood <gsherwood@squiz.net> * @author    Marc McIntyre <mmcintyre@squiz.net> * @copyright 2006 Squiz Pty Ltd (ABN 77 084 670 600) * @license   http://matrix.squiz.net/developer/tools/php_cs/licence BSD Licence * @version   Release: 1.3.0RC1 * @link      http://pear.php.net/package/PHP_CodeSniffer */class Joomla_Sniffs_WhiteSpace_SpaceAfterCastSniff implements PHP_CodeSniffer_Sniff{	/**	 * Returns an array of tokens this test wants to listen for.	 *	 * @return array	 */	public function register()	{		return PHP_CodeSniffer_Tokens::$castTokens;	}//function	/**	 * Processes this test, when one of its tokens is encountered.	 *	 * @param PHP_CodeSniffer_File $phpcsFile The file being scanned.	 * @param integer                  $stackPtr  The position of the current token in	 *                                        the stack passed in $tokens.	 *	 * @return void	 */	public function process(PHP_CodeSniffer_File $phpcsFile, $stackPtr)	{		$tokens = $phpcsFile->getTokens();		if ($tokens[($stackPtr + 1)]['code'] === T_WHITESPACE)		{			$content       = $tokens[($stackPtr + 1)]['content'];			$contentLength = strlen($content);			if ($contentLength !== 1)			{				$error = 'Cast statements must be followed by a single space; expected 1 space but found %s';				$data  = array($contentLength);				$phpcsFile->addError($error, $stackPtr, 'IncorrectSingle', $data);			}		}		else		{			$error = 'Cast statements must be followed by a single space; expected "%s" but found "%s"';			$data  = array(					$tokens[$stackPtr]['content'].' '.$tokens[($stackPtr + 1)]['content'],					$tokens[$stackPtr]['content'].$tokens[($stackPtr + 1)]['content'],			);			$phpcsFile->addError($error, $stackPtr, 'Incorrect', $data);		}// 		if ($tokens[($stackPtr + 1)]['code'] === T_WHITESPACE)// 		{// 			$error = 'A cast statement must not be followed by a space';// 			$phpcsFile->addError($error, $stackPtr, 'SpaceFound');// 		}	}//function}//class
<?php/** * @package     Joomla.Administrator * @subpackage  com_languages * * @copyright   Copyright (C) 2005 - 2013 Open Source Matters, Inc. All rights reserved. * @license     GNU General Public License version 2 or later; see LICENSE.txt */defined('_JEXEC') or die;/** * Languages Controller * * @package     Joomla.Administrator * @subpackage  com_languages * @since       1.5 */class LanguagesController extends JControllerLegacy{	/**	 * @var		string	The default view.	 * @since   1.6	 */	protected $default_view = 'installed';	/**	 * Method to display a view.	 *	 * @param   boolean			If true, the view output will be cached	 * @param   array  An array of safe url parameters and their variable types, for valid values see {@link JFilterInput::clean()}.	 *	 * @return  JController		This object to support chaining.	 * @since   1.5	 */	public function display($cachable = false, $urlparams = false)	{		require_once JPATH_COMPONENT.'/helpers/languages.php';		$view   = $this->input->get('view', 'languages');		$layout = $this->input->get('layout', 'default');		$id     = $this->input->getInt('id');		// Check for edit form.		if ($view == 'language' && $layout == 'edit' && !$this->checkEditId('com_languages.edit.language', $id)) {			// Somehow the person just went to the form - we don't allow that.			$this->setError(JText::sprintf('JLIB_APPLICATION_ERROR_UNHELD_ID', $id));			$this->setMessage($this->getError(), 'error');			$this->setRedirect(JRoute::_('index.php?option=com_languages&view=languages', false));			return false;		}		parent::display();		return $this;	}}
<?php/** * @package     Joomla.Platform * @subpackage  Document * * @copyright   Copyright (C) 2005 - 2013 Open Source Matters, Inc. All rights reserved. * @license     GNU General Public License version 2 or later; see LICENSE */defined('JPATH_PLATFORM') or die;/** * JDocument system message renderer * * @package     Joomla.Platform * @subpackage  Document * @since       11.1 */class JDocumentRendererMessage extends JDocumentRenderer{	/**	 * Renders the error stack and returns the results as a string	 *	 * @param   string  $name     Not used.	 * @param   array   $params   Associative array of values	 * @param   string  $content  Not used.	 *	 * @return  string  The output of the script	 *	 * @since   11.1	 */	public function render($name, $params = array (), $content = null)	{		$msgList = $this->getData();		$buffer = null;		$app = JFactory::getApplication();		$chromePath = JPATH_THEMES . '/' . $app->getTemplate() . '/html/message.php';		$itemOverride = false;		if (file_exists($chromePath))		{			include_once $chromePath;			if (function_exists('renderMessage'))			{				$itemOverride = true;			}		}		$buffer = ($itemOverride) ? renderMessage($msgList) : $this->renderDefaultMessage($msgList);		return $buffer;	}	/**	 * Get and prepare system message data for output	 *	 * @return  array  An array contains system message	 *	 * @since   12.2	 */	private function getData()	{		// Initialise variables.		$lists = array();		// Get the message queue		$messages = JFactory::getApplication()->getMessageQueue();		// Build the sorted message list		if (is_array($messages) && !empty($messages))		{			foreach ($messages as $msg)			{				if (isset($msg['type']) && isset($msg['message']))				{					$lists[$msg['type']][] = $msg['message'];				}			}		}		return $lists;	}	/**	 * Render the system message if no message template file found	 *	 * @param   array  $msgList  An array contains system message	 *	 * @return  string  System message markup	 *	 * @since   12.2	 */	private function renderDefaultMessage($msgList)	{		// Build the return string		$buffer = '';		$buffer .= "\n<div id=\"system-message-container\">";		// If messages exist render them		if (is_array($msgList))		{			$buffer .= "\n<div id=\"system-message\">";			foreach ($msgList as $type => $msgs)			{				$buffer .= "\n<div class=\"alert alert-" . $type . "\">";				// This requires JS so we should add it trough JS. Progressive enhancement and stuff.				$buffer .= "<a class=\"close\" data-dismiss=\"alert\"></a>";				if (count($msgs))				{					$buffer .= "\n<h4 class=\"alert-heading\">" . JText::_($type) . "</h4>";					$buffer .= "\n<div>";					foreach ($msgs as $msg)					{						$buffer .= "\n\t\t<p>" . $msg . "</p>";					}					$buffer .= "\n</div>";				}				$buffer .= "\n</div>";			}			$buffer .= "\n</div>";		}		$buffer .= "\n</div>";		return $buffer;	}}
<?php/*** @version $Id$* @package utf8* @subpackage strings*///---------------------------------------------------------------/*** UTF-8 aware alternative to strcasecmp* A case insensivite string comparison* Note: requires utf8_strtolower* @param string* @param string* @return int* @see http://www.php.net/strcasecmp* @see utf8_strtolower* @package utf8* @subpackage strings*/function utf8_strcasecmp($strX, $strY) {    $strX = utf8_strtolower($strX);    $strY = utf8_strtolower($strY);    return strcmp($strX, $strY);}
<?php/** * @package     Joomla.Site * @subpackage  com_newsfeeds * * @copyright   Copyright (C) 2005 - 2013 Open Source Matters, Inc. All rights reserved. * @license     GNU General Public License version 2 or later; see LICENSE.txt */defined('_JEXEC') or die;/** * Newsfeeds Component Controller * * @package     Joomla.Site * @subpackage  com_newsfeeds * @since       1.5 */class NewsfeedsController extends JControllerLegacy{	/**	 * Method to show a newsfeeds view	 *	 * @param   boolean			If true, the view output will be cached	 * @param   array  An array of safe url parameters and their variable types, for valid values see {@link JFilterInput::clean()}.	 *	 * @return  JController		This object to support chaining.	 * @since   1.5	 */	public function display($cachable = false, $urlparams = false)	{		$cachable = true;		// Set the default view name and format from the Request.		$vName = $this->input->get('view', 'categories');		$this->input->set('view', $vName);		$user = JFactory::getUser();		if ($user->get('id') || ($this->input->getMethod() == 'POST' && $vName = 'category' ))		{			$cachable = false;		}		$safeurlparams = array('id' => 'INT', 'limit' => 'UINT', 'limitstart' => 'UINT', 'filter_order' => 'CMD', 'filter_order_Dir' => 'CMD', 'lang' => 'CMD');		parent::display($cachable, $safeurlparams);	}}
<?php/** * @package     Joomla.Platform * @subpackage  HTTP * * @copyright   Copyright (C) 2005 - 2013 Open Source Matters, Inc. All rights reserved. * @license     GNU General Public License version 2 or later; see LICENSE */defined('JPATH_PLATFORM') or die;/** * HTTP transport class for using cURL. * * @package     Joomla.Platform * @subpackage  HTTP * @since       11.3 */class JHttpTransportCurl implements JHttpTransport{	/**	 * @var    JRegistry  The client options.	 * @since  11.3	 */	protected $options;	/**	 * Constructor. CURLOPT_FOLLOWLOCATION must be disabled when open_basedir or safe_mode are enabled.	 *	 * @param   JRegistry  $options  Client options object.	 *	 * @see     http://www.php.net/manual/en/function.curl-setopt.php	 * @since   11.3	 * @throws  RuntimeException	 */	public function __construct(JRegistry $options)	{		if (!function_exists('curl_init') || !is_callable('curl_init'))		{			throw new RuntimeException('Cannot use a cURL transport when curl_init() is not available.');		}		$this->options = $options;	}	/**	 * Send a request to the server and return a JHttpResponse object with the response.	 *	 * @param   string   $method     The HTTP method for sending the request.	 * @param   JUri     $uri        The URI to the resource to request.	 * @param   mixed    $data       Either an associative array or a string to be sent with the request.	 * @param   array    $headers    An array of request headers to send with the request.	 * @param   integer  $timeout    Read timeout in seconds.	 * @param   string   $userAgent  The optional user agent string to send with the request.	 *	 * @return  JHttpResponse	 *	 * @since   11.3	 */	public function request($method, JUri $uri, $data = null, array $headers = null, $timeout = null, $userAgent = null)	{		// Setup the cURL handle.		$ch = curl_init();		// Set the request method.		$options[CURLOPT_CUSTOMREQUEST] = strtoupper($method);		// Don't wait for body when $method is HEAD		$options[CURLOPT_NOBODY] = ($method === 'HEAD');		// Initialize the certificate store		$options[CURLOPT_CAINFO] = $this->options->get('curl.certpath', __DIR__ . '/cacert.pem');		// If data exists let's encode it and make sure our Content-type header is set.		if (isset($data))		{			// If the data is a scalar value simply add it to the cURL post fields.			if (is_scalar($data) || (isset($headers['Content-Type']) && strpos($headers['Content-Type'], 'multipart/form-data') === 0))			{				$options[CURLOPT_POSTFIELDS] = $data;			}			// Otherwise we need to encode the value first.			else			{				$options[CURLOPT_POSTFIELDS] = http_build_query($data);			}			if (!isset($headers['Content-Type']))			{				$headers['Content-Type'] = 'application/x-www-form-urlencoded; charset=utf-8';			}			// Add the relevant headers.			if (is_scalar($options[CURLOPT_POSTFIELDS]))			{				$headers['Content-Length'] = strlen($options[CURLOPT_POSTFIELDS]);			}		}		// Build the headers string for the request.		$headerArray = array();		if (isset($headers))		{			foreach ($headers as $key => $value)			{				$headerArray[] = $key . ': ' . $value;			}			// Add the headers string into the stream context options array.			$options[CURLOPT_HTTPHEADER] = $headerArray;		}		// If an explicit timeout is given user it.		if (isset($timeout))		{			$options[CURLOPT_TIMEOUT] = (int) $timeout;			$options[CURLOPT_CONNECTTIMEOUT] = (int) $timeout;		}		// If an explicit user agent is given use it.		if (isset($userAgent))		{			$headers[CURLOPT_USERAGENT] = $userAgent;		}		// Set the request URL.		$options[CURLOPT_URL] = (string) $uri;		// We want our headers. :-)		$options[CURLOPT_HEADER] = true;		// Return it... echoing it would be tacky.		$options[CURLOPT_RETURNTRANSFER] = true;		// Override the Expect header to prevent cURL from confusing itself in its own stupidity.		// Link: http://the-stickman.com/web-development/php-and-curl-disabling-100-continue-header/		$options[CURLOPT_HTTPHEADER][] = 'Expect:';		// Follow redirects.		$options[CURLOPT_FOLLOWLOCATION] = (bool) $this->options->get('follow_location', true);		// Set the cURL options.		curl_setopt_array($ch, $options);		// Execute the request and close the connection.		$content = curl_exec($ch);		// Get the request information.		$info = curl_getinfo($ch);		// Close the connection.		curl_close($ch);		return $this->getResponse($content, $info);	}	/**	 * Method to get a response object from a server response.	 *	 * @param   string  $content  The complete server response, including headers.	 * @param   array   $info     The cURL request information.	 *	 * @return  JHttpResponse	 *	 * @since   11.3	 * @throws  UnexpectedValueException	 */	protected function getResponse($content, $info)	{		// Create the response object.		$return = new JHttpResponse;		// Check if the content is actually a string.		if (!is_string($content))		{			throw new UnexpectedValueException('No HTTP response received.');		}		// Get the number of redirects that occurred.		$redirects = isset($info['redirect_count']) ? $info['redirect_count'] : 0;		/*		 * Split the response into headers and body. If cURL encountered redirects, the headers for the redirected requests will		 * also be included. So we split the response into header + body + the number of redirects and only use the last two		 * sections which should be the last set of headers and the actual body.		 */		$response = explode("\r\n\r\n", $content, 2 + $redirects);		// Set the body for the response.		$return->body = array_pop($response);		// Get the last set of response headers as an array.		$headers = explode("\r\n", array_pop($response));		// Get the response code from the first offset of the response headers.		preg_match('/[0-9]{3}/', array_shift($headers), $matches);		$code = count($matches) ? $matches[0] : null;		if (is_numeric($code))		{			$return->code = (int) $code;		}		// No valid response code was detected.		else		{			throw new UnexpectedValueException('No HTTP response code found.');		}		// Add the response headers to the response object.		foreach ($headers as $header)		{			$pos = strpos($header, ':');			$return->headers[trim(substr($header, 0, $pos))] = trim(substr($header, ($pos + 1)));		}		return $return;	}	/**	 * Method to check if HTTP transport cURL is available for use	 *	 * @return boolean true if available, else false	 *	 * @since   12.1	 */	static public function isSupported()	{		return function_exists('curl_version') && curl_version();	}}
<?php/** * @package     Joomla.Platform * @subpackage  Google * * @copyright   Copyright (C) 2005 - 2013 Open Source Matters, Inc. All rights reserved * @license     GNU General Public License version 2 or later; see LICENSE */defined('JPATH_PLATFORM') or die;/** * Google+ data class for the Joomla Platform. * * @package     Joomla.Platform * @subpackage  Google * @since       1234 */class JGoogleDataPlusActivities extends JGoogleData{	/**	 * Constructor.	 *	 * @param   JRegistry    $options  Google options object	 * @param   JGoogleAuth  $auth     Google data http client object	 *	 * @since   1234	 */	public function __construct(JRegistry $options = null, JGoogleAuth $auth = null)	{	parent::__construct($options, $auth);		if (isset($this->auth) && !$this->auth->getOption('scope'))		{			$this->auth->setOption('scope', 'https://www.googleapis.com/auth/plus.me');		}	}	/**	 * List all of the activities in the specified collection for a particular user.	 *	 * @param   string   $userId      The ID of the user to get activities for. The special value "me" can be used to indicate the authenticated user.	 * @param   string   $collection  The collection of activities to list. Acceptable values are: "public".	 * @param   string   $fields      Used to specify the fields you want returned.	 * @param   integer  $max         The maximum number of people to include in the response, used for paging.	 * @param   string   $token       The continuation token, used to page through large result sets. To get the next page of results, set this	 *								  parameter to the value of "nextPageToken" from the previous response. This token may be of any length.	 * @param   string   $alt         Specifies an alternative representation type. Acceptable values are: "json" - Use JSON format (default)	 *	 * @return  mixed  Data from Google	 *	 * @since   1234	 */	public function listActivities($userId, $collection, $fields = null, $max = 10, $token = null, $alt = null)	{		if ($this->isAuthenticated())		{			$url = $this->getOption('api.url') . 'people/' . $userId . '/activities/' . $collection;			// Check if fields is specified.			if ($fields)			{				$url .= '?fields=' . $fields;			}			// Check if max is specified.			if ($max != 10)			{				$url .= (strpos($url, '?') === false) ? '?maxResults=' : '&maxResults=';				$url .= $max;			}			// Check if token is specified.			if ($token)			{				$url .= (strpos($url, '?') === false) ? '?pageToken=' : '&pageToken=';				$url .= $token;			}			// Check if alt is specified.			if ($alt)			{				$url .= (strpos($url, '?') === false) ? '?alt=' : '&alt=';				$url .= $alt;			}			$jdata = $this->auth->query($url);			return json_decode($jdata->body, true);		}		else		{			return false;		}	}	/**	 * Get an activity.	 *	 * @param   string  $id      The ID of the activity to get.	 * @param   string  $fields  Used to specify the fields you want returned.	 * @param   string  $alt     Specifies an alternative representation type. Acceptable values are: "json" - Use JSON format (default)	 *	 * @return  mixed  Data from Google	 *	 * @since   1234	 */	public function getActivity($id, $fields = null, $alt = null)	{		if ($this->isAuthenticated())		{			$url = $this->getOption('api.url') . 'activities/' . $id;			// Check if fields is specified.			if ($fields)			{				$url .= '?fields=' . $fields;			}			// Check if alt is specified.			if ($alt)			{				$url .= (strpos($url, '?') === false) ? '?alt=' : '&alt=';				$url .= $alt;			}			$jdata = $this->auth->query($url);			return json_decode($jdata->body, true);		}		else		{			return false;		}	}	/**	 * Search all public activities.	 *	 * @param   string   $query     Full-text search query string.	 * @param   string   $fields    Used to specify the fields you want returned.	 * @param   string   $language  Specify the preferred language to search with. https://developers.google.com/+/api/search#available-languages	 * @param   integer  $max       The maximum number of people to include in the response, used for paging.	 * @param   string   $order     Specifies how to order search results. Acceptable values are "best" and "recent".	 * @param   string   $token     The continuation token, used to page through large result sets. To get the next page of results, set this	 * 								parameter to the value of "nextPageToken" from the previous response. This token may be of any length.	 *	 * @return  mixed  Data from Google	 *	 * @since   1234	 */	public function search($query, $fields = null, $language = null, $max = 10, $order = null, $token = null)	{		if ($this->isAuthenticated())		{			$url = $this->getOption('api.url') . 'activities?query=' . urlencode($query);			// Check if fields is specified.			if ($fields)			{				$url .= '&fields=' . $fields;			}			// Check if language is specified.			if ($language)			{				$url .= '&language=' . $language;			}			// Check if max is specified.			if ($max != 10)			{				$url .= '&maxResults=' . $max;			}			// Check if order is specified.			if ($order)			{				$url .= '&orderBy=' . $order;			}			// Check of token is specified.			if ($token)			{				$url .= '&pageToken=' . $token;			}			$jdata = $this->auth->query($url);			return json_decode($jdata->body, true);		}		else		{			return false;		}	}}
<?php/** * @package     Joomla.Platform * @subpackage  Google * * @copyright   Copyright (C) 2005 - 2013 Open Source Matters, Inc. All rights reserved * @license     GNU General Public License version 2 or later; see LICENSE */defined('JPATH_PLATFORM') or die;/** * Google+ data class for the Joomla Platform. * * @package     Joomla.Platform * @subpackage  Google * @since       1234 */class JGoogleDataPlus extends JGoogleData{	/**	* @var    JGoogleDataPlusPeople  Google+ API object for people.	* @since  12.3	*/	protected $people;	/**	* @var    JGoogleDataPlusActivities  Google+ API object for people.	* @since  12.3	*/	protected $activities;	/**	* @var    JGoogleDataPlusComments  Google+ API object for people.	* @since  12.3	*/	protected $comments;	/**	 * Constructor.	 *	 * @param   JRegistry    $options  Google options object	 * @param   JGoogleAuth  $auth     Google data http client object	 *	 * @since   1234	 */	public function __construct(JRegistry $options = null, JGoogleAuth $auth = null)	{		// Setup the default API url if not already set.		$options->def('api.url', 'https://www.googleapis.com/plus/v1/');		parent::__construct($options, $auth);		if (isset($this->auth) && !$this->auth->getOption('scope'))		{			$this->auth->setOption('scope', 'https://www.googleapis.com/auth/plus.me');		}	}	/**	 * Magic method to lazily create API objects	 *	 * @param   string  $name  Name of property to retrieve	 *	 * @return  JGoogleDataPlus  Google+ API object (people, activities, comments).	 *	 * @since   12.3	 */	public function __get($name)	{		switch ($name)		{			case 'people':				if ($this->people == null)				{					$this->people = new JGoogleDataPlusPeople($this->options, $this->auth);				}				return $this->people;			case 'activities':				if ($this->activities == null)				{					$this->activities = new JGoogleDataPlusActivities($this->options, $this->auth);				}				return $this->activities;			case 'comments':				if ($this->comments == null)				{					$this->comments = new JGoogleDataPlusComments($this->options, $this->auth);				}				return $this->comments;		}	}}
<?php/** * @package     Joomla.Legacy * @subpackage  Simplepie * * @copyright   Copyright (C) 2005 - 2013 Open Source Matters, Inc. All rights reserved. * @license     GNU General Public License version 2 or later; see LICENSE */defined('JPATH_PLATFORM') or die;jimport('simplepie.simplepie');/** * Class to maintain a pathway. * * The user's navigated path within the application. * * @package     Joomla.Legacy * @subpackage  Simplepie * @since       12.2 * * @deprecated  4.0  Use JFeed or supply your own methods */class JSimplepieFactory{	/**	 * Get a parsed XML Feed Source	 *	 * @param   string   $url         Url for feed source.	 * @param   integer  $cache_time  Time to cache feed for (using internal cache mechanism).	 *	 * @return  mixed  SimplePie parsed object on success, false on failure.	 *	 * @since   12.2	 * @deprecated  4.0   Use JFeedFactory($url) instead.	 *	 * @note  In 3.2 will be proxied to JFeedFactory()	 */	public static function getFeedParser($url, $cache_time = 0)	{		JLog::add(__METHOD__ . ' is deprecated.   Use JFeedFactory() or supply Simple Pie instead.', JLog::WARNING, 'deprecated');		$cache = JFactory::getCache('feed_parser', 'callback');		if ($cache_time > 0)		{			$cache->setLifeTime($cache_time);		}		$simplepie = new SimplePie(null, null, 0);		$simplepie->enable_cache(false);		$simplepie->set_feed_url($url);		$simplepie->force_feed(true);		$contents = $cache->get(array($simplepie, 'init'), null, false, false);		if ($contents)		{			return $simplepie;		}		JLog::add(JText::_('JLIB_UTIL_ERROR_LOADING_FEED_DATA'), JLog::WARNING, 'jerror');		return false;	}}
<?php/** * @package     Joomla.Platform * @subpackage  Crypt * * @copyright   Copyright (C) 2005 - 2011 Open Source Matters, Inc. All rights reserved. * @license     GNU General Public License version 2 or later; see LICENSE */defined('JPATH_PLATFORM') or die;/** * JCrypt cipher for Rijndael 256 encryption, decryption and key generation. * * @package     Joomla.Platform * @subpackage  Crypt * @since       12.1 */class JCryptCipherRijndael256 extends JCryptCipherMcrypt{	/**	 * @var    integer  The mcrypt cipher constant.	 * @see    http://www.php.net/manual/en/mcrypt.ciphers.php	 * @since  12.1	 */	protected $type = MCRYPT_RIJNDAEL_256;	/**	 * @var    integer  The mcrypt block cipher mode.	 * @see    http://www.php.net/manual/en/mcrypt.constants.php	 * @since  12.1	 */	protected $mode = MCRYPT_MODE_CBC;	/**	 * @var    string  The JCrypt key type for validation.	 * @since  12.1	 */	protected $keyType = 'rijndael256';}
<?php/** * @package     Joomla.Site * @subpackage  Layout * * @copyright   Copyright (C) 2005 - 2013 Open Source Matters, Inc. All rights reserved. * @license     GNU General Public License version 2 or later; see LICENSE.txt */defined('JPATH_BASE') or die;?>			<dd class="parent-category-name">				<?php $title = $this->escape($displayData['item']->parent_title);				$url = '<a href="'.JRoute::_(ContentHelperRoute::getCategoryRoute($displayData['item']->parent_slug)).'">'.$title.'</a>';?>				<?php if ($displayData['params']->get('link_parent_category') && !empty($displayData['item']->parent_slug)) : ?>					<?php echo JText::sprintf('COM_CONTENT_PARENT', $url); ?>				<?php else : ?>					<?php echo JText::sprintf('COM_CONTENT_PARENT', $title); ?>				<?php endif; ?>			</dd>
<?php/** * @package     Joomla.Administrator * @subpackage  com_finder * * @copyright   Copyright (C) 2005 - 2013 Open Source Matters, Inc. All rights reserved. * @license     GNU General Public License version 2 or later; see LICENSE */defined('_JEXEC') or die;/** * Stemmer base class for the Finder indexer package. * * @package     Joomla.Administrator * @subpackage  com_finder * @since       2.5 */abstract class FinderIndexerStemmer{	/**	 * An internal cache of stemmed tokens.	 *	 * @var    array	 * @since  2.5	 */	public $cache = array();	/**	 * Method to get a stemmer, creating it if necessary.	 *	 * @param   string  $adapter  The type of stemmer to load.	 *	 * @return  FinderIndexerStemmer  A FinderIndexerStemmer instance.	 *	 * @since   2.5	 * @throws  Exception on invalid stemmer.	 */	public static function getInstance($adapter)	{		static $instances;		// Only create one stemmer for each adapter.		if (isset($instances[$adapter]))		{			return $instances[$adapter];		}		// Create an array of instances if necessary.		if (!is_array($instances))		{			$instances = array();		}		// Setup the adapter for the stemmer.		$adapter = JFilterInput::getInstance()->clean($adapter, 'cmd');		$path = __DIR__ . '/stemmer/' . $adapter . '.php';		$class = 'FinderIndexerStemmer' . ucfirst($adapter);		// Check if a stemmer exists for the adapter.		if (file_exists($path))		{			// Instantiate the stemmer.			include_once $path;			$instances[$adapter] = new $class;		}		else		{			// Throw invalid adapter exception.			throw new Exception(JText::sprintf('COM_FINDER_INDEXER_INVALID_STEMMER', $adapter));		}		return $instances[$adapter];	}	/**	 * Method to stem a token and return the root.	 *	 * @param   string  $token  The token to stem.	 * @param   string  $lang   The language of the token.	 *	 * @return  string  The root token.	 *	 * @since   2.5	 */	abstract public function stem($token, $lang);}
<?php/** * @package     Joomla.Administrator * @subpackage  mod_menu * * @copyright   Copyright (C) 2005 - 2013 Open Source Matters, Inc. All rights reserved. * @license     GNU General Public License version 2 or later; see LICENSE.txt */defined('_JEXEC') or die;$document = JFactory::getDocument();$direction = $document->direction == 'rtl' ? 'pull-right' : '';require JModuleHelper::getLayoutPath('mod_menu', $enabled ? 'default_enabled' : 'default_disabled');$menu->renderMenu('menu', $enabled ? 'nav ' . $direction : 'nav disabled ' . $direction);
<?php/** * @package     Joomla.Administrator * @subpackage  com_media * * @copyright   Copyright (C) 2005 - 2013 Open Source Matters, Inc. All rights reserved. * @license     GNU General Public License version 2 or later; see LICENSE.txt */defined('_JEXEC') or die;/** * Media Component Manager Model * * @package     Joomla.Administrator * @subpackage  com_media * @since       1.5 */class MediaModelManager extends JModelLegacy{	public function getState($property = null, $default = null)	{		static $set;		if (!$set)		{			$input = JFactory::getApplication()->input;			$folder = $input->get('folder', '', 'path');			$this->setState('folder', $folder);			$fieldid = $input->get('fieldid', '');			$this->setState('field.id', $fieldid);			$parent = str_replace("\\", "/", dirname($folder));			$parent = ($parent == '.') ? null : $parent;			$this->setState('parent', $parent);			$set = true;		}		return parent::getState($property, $default);	}	/**	 * Image Manager Popup	 *	 * @param string $listFolder The image directory to display	 * @since 1.5	 */	function getFolderList($base = null)	{		// Get some paths from the request		if (empty($base))		{			$base = COM_MEDIA_BASE;		}		//corrections for windows paths		$base = str_replace(DIRECTORY_SEPARATOR, '/', $base);		$com_media_base_uni = str_replace(DIRECTORY_SEPARATOR, '/', COM_MEDIA_BASE);		// Get the list of folders		jimport('joomla.filesystem.folder');		$folders = JFolder::folders($base, '.', true, true);		$document = JFactory::getDocument();		$document->setTitle(JText::_('COM_MEDIA_INSERT_IMAGE'));		// Build the array of select options for the folder list		$options[] = JHtml::_('select.option', "", "/");		foreach ($folders as $folder)		{			$folder		= str_replace($com_media_base_uni, "", str_replace(DIRECTORY_SEPARATOR, '/', $folder));			$value		= substr($folder, 1);			$text		= str_replace(DIRECTORY_SEPARATOR, "/", $folder);			$options[]	= JHtml::_('select.option', $value, $text);		}		// Sort the folder list array		if (is_array($options))		{			sort($options);		}		// Get asset and author id (use integer filter)		$input = JFactory::getApplication()->input;		$asset = $input->get('asset', 0, 'integer');		$author = $input->get('author', 0, 'integer');		// Create the drop-down folder select list		$list = JHtml::_('select.genericlist', $options, 'folderlist', 'class="inputbox" size="1" onchange="ImageManager.setFolder(this.options[this.selectedIndex].value, '.$asset.', '.$author.')" ', 'value', 'text', $base);		return $list;	}	function getFolderTree($base = null)	{		// Get some paths from the request		if (empty($base))		{			$base = COM_MEDIA_BASE;		}		$mediaBase = str_replace(DIRECTORY_SEPARATOR, '/', COM_MEDIA_BASE.'/');		// Get the list of folders		jimport('joomla.filesystem.folder');		$folders = JFolder::folders($base, '.', true, true);		$tree = array();		foreach ($folders as $folder)		{			$folder		= str_replace(DIRECTORY_SEPARATOR, '/', $folder);			$name		= substr($folder, strrpos($folder, '/') + 1);			$relative	= str_replace($mediaBase, '', $folder);			$absolute	= $folder;			$path		= explode('/', $relative);			$node		= (object) array('name' => $name, 'relative' => $relative, 'absolute' => $absolute);			$tmp = &$tree;			for ($i = 0, $n = count($path); $i < $n; $i++)			{				if (!isset($tmp['children']))				{					$tmp['children'] = array();				}				if ($i == $n - 1)				{					// We need to place the node					$tmp['children'][$relative] = array('data' => $node, 'children' => array());					break;				}				if (array_key_exists($key = implode('/', array_slice($path, 0, $i + 1)), $tmp['children']))				{					$tmp = &$tmp['children'][$key];				}			}		}		$tree['data'] = (object) array('name' => JText::_('COM_MEDIA_MEDIA'), 'relative' => '', 'absolute' => $base);		return $tree;	}}
<?php/** * @package     Joomla.Platform * @subpackage  Plugin * * @copyright   Copyright (C) 2005 - 2013 Open Source Matters, Inc. All rights reserved. * @license     GNU General Public License version 2 or later; see LICENSE */defined('JPATH_PLATFORM') or die;/** * JPlugin Class * * @package     Joomla.Platform * @subpackage  Plugin * @since       11.1 */abstract class JPlugin extends JEvent{	/**	 * A JRegistry object holding the parameters for the plugin	 *	 * @var    JRegistry	 * @since  11.1	 */	public $params = null;	/**	 * The name of the plugin	 *	 * @var    string	 * @since  11.1	 */	protected $_name = null;	/**	 * The plugin type	 *	 * @var    string	 * @since  11.1	 */	protected $_type = null;	/**	 * Affects constructor behavior. If true, language files will be loaded automatically.	 *	 * @var    boolean	 * @since  12.3	 */	protected $autoloadLanguage = false;	/**	 * Constructor	 *	 * @param   object  &$subject  The object to observe	 * @param   array   $config    An optional associative array of configuration settings.	 *                             Recognized key values include 'name', 'group', 'params', 'language'	 *                             (this list is not meant to be comprehensive).	 *	 * @since   11.1	 */	public function __construct(&$subject, $config = array())	{		// Get the parameters.		if (isset($config['params']))		{			if ($config['params'] instanceof JRegistry)			{				$this->params = $config['params'];			}			else			{				$this->params = new JRegistry;				$this->params->loadString($config['params']);			}		}		// Get the plugin name.		if (isset($config['name']))		{			$this->_name = $config['name'];		}		// Get the plugin type.		if (isset($config['type']))		{			$this->_type = $config['type'];		}		// Load the language files if needed.		if ($this->autoloadLanguage)		{			$this->loadLanguage();		}		parent::__construct($subject);	}	/**	 * Loads the plugin language file	 *	 * @param   string  $extension  The extension for which a language file should be loaded	 * @param   string  $basePath   The basepath to use	 *	 * @return  boolean  True, if the file has successfully loaded.	 *	 * @since   11.1	 */	public function loadLanguage($extension = '', $basePath = JPATH_ADMINISTRATOR)	{		if (empty($extension))		{			$extension = 'plg_' . $this->_type . '_' . $this->_name;		}		$lang = JFactory::getLanguage();		return $lang->load(strtolower($extension), $basePath, null, false, false)			|| $lang->load(strtolower($extension), JPATH_PLUGINS . '/' . $this->_type . '/' . $this->_name, null, false, false)			|| $lang->load(strtolower($extension), $basePath, $lang->getDefault(), false, false)			|| $lang->load(strtolower($extension), JPATH_PLUGINS . '/' . $this->_type . '/' . $this->_name, $lang->getDefault(), false, false);	}}
<?php/** * @package     Joomla.Administrator * @subpackage  mod_menu * * @copyright   Copyright (C) 2005 - 2013 Open Source Matters, Inc. All rights reserved. * @license     GNU General Public License version 2 or later; see LICENSE.txt */defined('_JEXEC') or die;/* @var $menu JAdminCSSMenu */$shownew = (boolean) $params->get('shownew', 1);$showhelp = $params->get('showhelp', 1);$user = JFactory::getUser();$lang = JFactory::getLanguage();//// Site SubMenu//$menu->addChild(	new JMenuNode(JText::_('MOD_MENU_CONTROL_PANEL'), 'index.php', 'class:cpanel'), true);$menu->getParent();//// Users Submenu//if ($user->authorise('core.manage', 'com_users')){	$menu->addChild(		new JMenuNode(JText::_('MOD_MENU_COM_USERS_USERS'), '#'), true	);	$createUser = $shownew && $user->authorise('core.create', 'com_users');	$createGrp = $user->authorise('core.admin', 'com_users');	$menu->addChild(		new JMenuNode(JText::_('MOD_MENU_COM_USERS_USER_MANAGER'), 'index.php?option=com_users&view=users', 'class:user'), $createUser	);	if ($createUser)	{		$menu->addChild(			new JMenuNode(JText::_('MOD_MENU_COM_USERS_ADD_USER'), 'index.php?option=com_users&task=user.add', 'class:newarticle')		);		$menu->getParent();	}	if ($createGrp)	{		$menu->addChild(			new JMenuNode(JText::_('MOD_MENU_COM_USERS_GROUPS'), 'index.php?option=com_users&view=groups', 'class:groups'), $createUser		);		if ($createUser)		{			$menu->addChild(				new JMenuNode(JText::_('MOD_MENU_COM_USERS_ADD_GROUP'), 'index.php?option=com_users&task=group.add', 'class:newarticle')			);			$menu->getParent();		}		$menu->addChild(			new JMenuNode(JText::_('MOD_MENU_COM_USERS_LEVELS'), 'index.php?option=com_users&view=levels', 'class:levels'), $createUser		);		if ($createUser)		{			$menu->addChild(				new JMenuNode(JText::_('MOD_MENU_COM_USERS_ADD_LEVEL'), 'index.php?option=com_users&task=level.add', 'class:newarticle')			);			$menu->getParent();		}	}	$menu->addSeparator();	$menu->addChild(		new JMenuNode(JText::_('MOD_MENU_COM_USERS_NOTES'), 'index.php?option=com_users&view=notes', 'class:user-note'), $createUser	);	if ($createUser)	{		$menu->addChild(			new JMenuNode(JText::_('MOD_MENU_COM_USERS_ADD_NOTE'), 'index.php?option=com_users&task=note.add', 'class:newarticle')		);		$menu->getParent();	}	$menu->addChild(		new JMenuNode(JText::_('MOD_MENU_COM_USERS_NOTE_CATEGORIES'), 'index.php?option=com_categories&view=categories&extension=com_users.notes', 'class:category'), $createUser	);	if ($createUser)	{		$menu->addChild(			new JMenuNode(JText::_('MOD_MENU_COM_CONTENT_NEW_CATEGORY'), 'index.php?option=com_categories&task=category.add&extension=com_users.notes', 'class:newarticle')		);		$menu->getParent();	}	$menu->addSeparator();	$menu->addChild(		new JMenuNode(JText::_('MOD_MENU_MASS_MAIL_USERS'), 'index.php?option=com_users&view=mail', 'class:massmail')	);	$menu->getParent();}//// Menus Submenu//if ($user->authorise('core.manage', 'com_menus')){	$menu->addChild(		new JMenuNode(JText::_('MOD_MENU_MENUS'), '#'), true	);	$createMenu = $shownew && $user->authorise('core.create', 'com_menus');	$menu->addChild(		new JMenuNode(JText::_('MOD_MENU_MENU_MANAGER'), 'index.php?option=com_menus&view=menus', 'class:menumgr'), $createMenu	);	if ($createMenu)	{		$menu->addChild(			new JMenuNode(JText::_('MOD_MENU_MENU_MANAGER_NEW_MENU'), 'index.php?option=com_menus&view=menu&layout=edit', 'class:newarticle')		);		$menu->getParent();	}	$menu->addSeparator();	// Menu Types	foreach (ModMenuHelper::getMenus() as $menuType)	{		$alt = '*' .$menuType->sef. '*';		if ($menuType->home == 0)		{			$titleicon = '';		}		elseif ($menuType->home == 1 && $menuType->language == '*')		{			$titleicon = ' <i class="icon-home"></i>';		}		elseif ($menuType->home > 1)		{			$titleicon = ' <span>'.JHtml::_('image', 'mod_languages/icon-16-language.png', $menuType->home, array('title' => JText::_('MOD_MENU_HOME_MULTIPLE')), true).'</span>';		}		else		{			$image = JHtml::_('image', 'mod_languages/'.$menuType->image.'.gif', null, null, true, true);			if (!$image)			{				$titleicon = ' <span>'.JHtml::_('image', 'mod_languages/icon-16-language.png', $alt, array('title' => $menuType->title_native), true).'</span>';			}			else			{				$titleicon = ' <span>' . JHtml::_('image', 'mod_languages/' . $menuType->image . '.gif', $alt, array('title' => $menuType->title_native), true) . '</span>';			}		}		$menu->addChild(			new JMenuNode($menuType->title,	'index.php?option=com_menus&view=items&menutype='.$menuType->menutype, 'class:menu', null, null, $titleicon), $createMenu		);		if ($createMenu)		{			$menu->addChild(				new JMenuNode(JText::_('MOD_MENU_MENU_MANAGER_NEW_MENU_ITEM'), 'index.php?option=com_menus&view=item&layout=edit&menutype='.$menuType->menutype, 'class:newarticle')			);			$menu->getParent();		}	}	$menu->getParent();}//// Content Submenu//if ($user->authorise('core.manage', 'com_content')){	$menu->addChild(		new JMenuNode(JText::_('MOD_MENU_COM_CONTENT'), '#'), true	);	$createContent = $shownew && $user->authorise('core.create', 'com_content');	$menu->addChild(		new JMenuNode(JText::_('MOD_MENU_COM_CONTENT_ARTICLE_MANAGER'), 'index.php?option=com_content', 'class:article'), $createContent	);	if ($createContent)	{		$menu->addChild(			new JMenuNode(JText::_('MOD_MENU_COM_CONTENT_NEW_ARTICLE'), 'index.php?option=com_content&task=article.add', 'class:newarticle')		);		$menu->getParent();	}	$menu->addChild(		new JMenuNode(JText::_('MOD_MENU_COM_CONTENT_CATEGORY_MANAGER'), 'index.php?option=com_categories&extension=com_content', 'class:category'), $createContent	);	if ($createContent)	{		$menu->addChild(			new JMenuNode(JText::_('MOD_MENU_COM_CONTENT_NEW_CATEGORY'), 'index.php?option=com_categories&task=category.add&extension=com_content', 'class:newarticle')		);		$menu->getParent();	}	$menu->addChild(		new JMenuNode(JText::_('MOD_MENU_COM_CONTENT_FEATURED'), 'index.php?option=com_content&view=featured', 'class:featured')	);	$menu->addSeparator();	if ($user->authorise('core.manage', 'com_media'))	{		$menu->addChild(new JMenuNode(JText::_('MOD_MENU_MEDIA_MANAGER'), 'index.php?option=com_media', 'class:media'));	}	$menu->getParent();}//// Components Submenu//// Get the authorised components and sub-menus.$components = ModMenuHelper::getComponents(true);// Check if there are any components, otherwise, don't render the menuif ($components){	$menu->addChild(new JMenuNode(JText::_('MOD_MENU_COMPONENTS'), '#'), true);	foreach ($components as &$component)	{		if (!empty($component->submenu))		{			// This component has a db driven submenu.			$menu->addChild(new JMenuNode($component->text, $component->link, $component->img), true);			foreach ($component->submenu as $sub)			{				$menu->addChild(new JMenuNode($sub->text, $sub->link, $sub->img));			}			$menu->getParent();		}		else		{			$menu->addChild(new JMenuNode($component->text, $component->link, $component->img));		}	}	$menu->getParent();}//// Extensions Submenu//$im = $user->authorise('core.manage', 'com_installer');$mm = $user->authorise('core.manage', 'com_modules');$pm = $user->authorise('core.manage', 'com_plugins');$tm = $user->authorise('core.manage', 'com_templates');$lm = $user->authorise('core.manage', 'com_languages');if ($im || $mm || $pm || $tm || $lm){	$menu->addChild(new JMenuNode(JText::_('MOD_MENU_EXTENSIONS_EXTENSIONS'), '#'), true);	if ($im)	{		$menu->addChild(new JMenuNode(JText::_('MOD_MENU_EXTENSIONS_EXTENSION_MANAGER'), 'index.php?option=com_installer', 'class:install'));		$menu->addSeparator();	}	if ($mm)	{		$menu->addChild(new JMenuNode(JText::_('MOD_MENU_EXTENSIONS_MODULE_MANAGER'), 'index.php?option=com_modules', 'class:module'));	}	if ($pm)	{		$menu->addChild(new JMenuNode(JText::_('MOD_MENU_EXTENSIONS_PLUGIN_MANAGER'), 'index.php?option=com_plugins', 'class:plugin'));	}	if ($tm)	{		$menu->addChild(new JMenuNode(JText::_('MOD_MENU_EXTENSIONS_TEMPLATE_MANAGER'), 'index.php?option=com_templates', 'class:themes'));	}	if ($lm)	{		$menu->addChild(new JMenuNode(JText::_('MOD_MENU_EXTENSIONS_LANGUAGE_MANAGER'), 'index.php?option=com_languages', 'class:language'));	}	$menu->getParent();}//// Help Submenu//if ($showhelp == 1){	$menu->addChild(		new JMenuNode(JText::_('MOD_MENU_HELP'), '#'), true	);	$menu->addChild(		new JMenuNode(JText::_('MOD_MENU_HELP_JOOMLA'), 'index.php?option=com_admin&view=help', 'class:help')	);	$menu->addSeparator();	$menu->addChild(		new JMenuNode(JText::_('MOD_MENU_HELP_SUPPORT_OFFICIAL_FORUM'), 'http://forum.joomla.org', 'class:help-forum', false, '_blank')	);	if ($forum_url = $params->get('forum_url'))	{		$menu->addChild(			new JMenuNode(JText::_('MOD_MENU_HELP_SUPPORT_CUSTOM_FORUM'), $forum_url, 'class:help-forum', false, '_blank')		);	}	$debug = $lang->setDebug(false);	if ($lang->hasKey('MOD_MENU_HELP_SUPPORT_OFFICIAL_LANGUAGE_FORUM_VALUE') && JText::_('MOD_MENU_HELP_SUPPORT_OFFICIAL_LANGUAGE_FORUM_VALUE') != '')	{		$forum_url = 'http://forum.joomla.org/viewforum.php?f=' . (int) JText::_('MOD_MENU_HELP_SUPPORT_OFFICIAL_LANGUAGE_FORUM_VALUE');		$lang->setDebug($debug);		$menu->addChild(			new JMenuNode(JText::_('MOD_MENU_HELP_SUPPORT_OFFICIAL_LANGUAGE_FORUM'), $forum_url, 'class:help-forum', false, '_blank')		);	}	$lang->setDebug($debug);	$menu->addChild(		new JMenuNode(JText::_('MOD_MENU_HELP_DOCUMENTATION'), 'http://docs.joomla.org', 'class:help-docs', false, '_blank')	);	$menu->addSeparator();	$menu->addChild(		new JMenuNode(JText::_('MOD_MENU_HELP_EXTENSIONS'), 'http://extensions.joomla.org', 'class:help-jed', false, '_blank')	);	$menu->addChild(		new JMenuNode(JText::_('MOD_MENU_HELP_TRANSLATIONS'), 'http://community.joomla.org/translations.html', 'class:help-trans', false, '_blank')	);	$menu->addChild(		new JMenuNode(JText::_('MOD_MENU_HELP_RESOURCES'), 'http://resources.joomla.org', 'class:help-jrd', false, '_blank')	);	$menu->addChild(		new JMenuNode(JText::_('MOD_MENU_HELP_COMMUNITY'), 'http://community.joomla.org', 'class:help-community', false, '_blank')	);	$menu->addChild(		new JMenuNode(JText::_('MOD_MENU_HELP_SECURITY'), 'http://developer.joomla.org/security.html', 'class:help-security', false, '_blank')	);	$menu->addChild(		new JMenuNode(JText::_('MOD_MENU_HELP_DEVELOPER'), 'http://developer.joomla.org', 'class:help-dev', false, '_blank')	);	$menu->addChild(		new JMenuNode(JText::_('MOD_MENU_HELP_SHOP'), 'http://shop.joomla.org', 'class:help-shop', false, '_blank')	);	$menu->getParent();}//// Admin Settingss Submenu//$su = $user->authorise('core.admin');$cam = $user->authorise('core.manage', 'com_cache');$cim = $user->authorise('core.manage', 'com_checkin');	$menu->addChild(new JMenuNode(JText::_('MOD_MENU_SETTINGS'), '#'), true);	if ($su):		$menu->addChild(		new JMenuNode(JText::_('MOD_MENU_CONFIGURATION'), 'index.php?option=com_config', 'class:config')		);		$menu->addChild(		new JMenuNode(JText::_('MOD_MENU_SYSTEM_INFORMATION'), 'index.php?option=com_admin&view=sysinfo', 'class:info')	);	endif;	if  ($cam):		$menu->addChild(		new JMenuNode(JText::_('MOD_MENU_CLEAR_CACHE'), 'index.php?option=com_cache', 'class:clear')		);		$menu->addChild(		new JMenuNode(JText::_('MOD_MENU_PURGE_EXPIRED_CACHE'), 'index.php?option=com_cache&view=purge', 'class:purge')		);	endif;	if  ($cim):		$menu->addChild(		new JMenuNode(JText::_('MOD_MENU_GLOBAL_CHECKIN'), 'index.php?option=com_checkin', 'class:checkin')		);	endif;		$menu->addChild(		new JMenuNode(JText::_('MOD_MENU_USER_PROFILE'), 'index.php?option=com_admin&task=profile.edit&id='. $user->id, 'class:profile')		);		$menu->addChild(		new JMenuNode(JText::_('MOD_MENU_LOGOUT'), 'index.php?option=com_login&task=logout&'. JSession::getFormToken() .'=1', 'class:logout')		);	$menu->getParent();
<?php/** * @package     Joomla.Administrator * @subpackage  mod_toolbar * * @copyright   Copyright (C) 2005 - 2013 Open Source Matters, Inc. All rights reserved. * @license     GNU General Public License version 2 or later; see LICENSE.txt */defined('_JEXEC') or die;$toolbar = JToolbar::getInstance('toolbar')->render('toolbar');require JModuleHelper::getLayoutPath('mod_toolbar', $params->get('layout', 'default'));
<?php/** * @package     Joomla.Installation * @subpackage  View * * @copyright   Copyright (C) 2005 - 2013 Open Source Matters, Inc. All rights reserved. * @license     GNU General Public License version 2 or later; see LICENSE.txt */defined('_JEXEC') or die;/** * The HTML Joomla Core Pre-Install View * * @package     Joomla.Installation * @subpackage  View * @since       3.1 */class InstallationViewPreinstallHtml extends InstallationViewDefault{	/**	 * Array of PHP config options     *     * @var    array	 * @since  3.1	 */	protected $options;	/**	 * Array of PHP settings     *     * @var    array	 * @since  3.1	 */	protected $settings;	/**	 * Method to render the view.	 *	 * @return  string  The rendered view.	 *	 * @since   3.1	 */	public function render()	{		$this->options  = $this->model->getPhpOptions();		$this->settings = $this->model->getPhpSettings();		return parent::render();	}}
<?php/** * @package     Joomla.Administrator * @subpackage  com_banners * * @copyright   Copyright (C) 2005 - 2013 Open Source Matters, Inc. All rights reserved. * @license     GNU General Public License version 2 or later; see LICENSE.txt */defined('_JEXEC') or die;/** * Client table * * @package     Joomla.Administrator * @subpackage  com_banners * @since       1.6 */class BannersTableClient extends JTable{	public function __construct(&$_db)	{		$this->checked_out_time = $_db->getNullDate();		parent::__construct('#__banner_clients', 'id', $_db);	}	/**	 * Method to set the publishing state for a row or list of rows in the database	 * table.  The method respects checked out rows by other users and will attempt	 * to checkin rows that it can after adjustments are made.	 *	 * @param   mixed	An optional array of primary key values to update.  If not	 *					set the instance property value is used.	 * @param   integer The publishing state. eg. [0 = unpublished, 1 = published]	 * @param   integer The user id of the user performing the operation.	 * @return  boolean  True on success.	 * @since   1.0.4	 */	public function publish($pks = null, $state = 1, $userId = 0)	{		$k = $this->_tbl_key;		// Sanitize input.		JArrayHelper::toInteger($pks);		$userId = (int) $userId;		$state  = (int) $state;		// If there are no primary keys set check to see if the instance key is set.		if (empty($pks))		{			if ($this->$k)			{				$pks = array($this->$k);			}			// Nothing to set publishing state on, return false.			else {				$this->setError(JText::_('JLIB_DATABASE_ERROR_NO_ROWS_SELECTED'));				return false;			}		}		// Build the WHERE clause for the primary keys.		$where = $k.'='.implode(' OR '.$k.'=', $pks);		// Determine if there is checkin support for the table.		if (!property_exists($this, 'checked_out') || !property_exists($this, 'checked_out_time'))		{			$checkin = '';		}		else		{			$checkin = ' AND (checked_out = 0 OR checked_out = '.(int) $userId.')';		}		// Update the publishing state for rows with the given primary keys.		$this->_db->setQuery(			'UPDATE '.$this->_db->quoteName($this->_tbl).			' SET '.$this->_db->quoteName('state').' = '.(int) $state .			' WHERE ('.$where.')' .			$checkin		);		try		{			$this->_db->execute();		}		catch (RuntimeException $e)		{			$this->setError($e->getMessage());			return false;		}		// If checkin is supported and all rows were adjusted, check them in.		if ($checkin && (count($pks) == $this->_db->getAffectedRows()))		{			// Checkin the rows.			foreach ($pks as $pk)			{				$this->checkin($pk);			}		}		// If the JTable instance value is in the list of primary keys that were set, set the instance.		if (in_array($this->$k, $pks))		{			$this->state = $state;		}		$this->setError('');		return true;	}}
<?php/** * @package     Joomla.Administrator * @subpackage  com_finder * * @copyright   Copyright (C) 2005 - 2013 Open Source Matters, Inc. All rights reserved. * @license     GNU General Public License version 2 or later; see LICENSE */defined('_JEXEC') or die;/** * French stemmer class for Smart Search indexer. * * First contributed by Eric Sanou (bobotche@hotmail.fr) * This class is inspired in  Alexis Ulrich's French stemmer code (http://alx2002.free.fr) * * @package     Joomla.Administrator * @subpackage  com_finder * @since       3.0 */class FinderIndexerStemmerFr extends FinderIndexerStemmer{	/**	 * Stemming rules.	 *	 * @var    Array	 * @since  3.0	 */	private static $_stemRules = null;	/**	 * Method to stem a token and return the root.	 *	 * @param   string  $token  The token to stem.	 * @param   string  $lang   The language of the token.	 *	 * @return  string  The root token.	 *	 * @since   3.0	 */	public function stem($token, $lang)	{		// Check if the token is long enough to merit stemming.		if (strlen($token) <= 2)		{			return $token;		}		// Check if the language is French or All.		if ($lang !== 'fr' && $lang != '*')		{			return $token;		}		// Stem the token if it is not in the cache.		if (!isset($this->cache[$lang][$token]))		{			// Stem the token.			$result = static::_getStem($token);			// Add the token to the cache.			$this->cache[$lang][$token] = $result;		}		return $this->cache[$lang][$token];	}	/**	 * French stemmer rules variables.	 *	 * @return  array  The rules	 *	 * @since   3.0	 */	protected static function getStemRules()	{		if (static::$_stemRules)		{			return static::$_stemRules;		}		$vars = array();		// French accented letters in ISO-8859-1 encoding		$vars['accents'] = chr(224) . chr(226) . chr(232) . chr(233) . chr(234) . chr(235) . chr(238) . chr(239) . chr(244) . chr(251) . chr(249) . chr(231);		// The rule patterns include all accented words for french language		$vars['rule_pattern'] = "/^([a-z" . $vars['accents'] . "]*)(\*){0,1}(\d)([a-z" . $vars['accents'] . "]*)([.|>])/";		// French vowels (including y) in ISO-8859-1 encoding		$vars['vowels'] = chr(97) . chr(224) . chr(226) . chr(101) . chr(232) . chr(233) . chr(234) . chr(235) . chr(105) . chr(238) . chr(239) . chr(111) . chr(244) . chr(117) . chr(251) . chr(249) . chr(121);		// The French rules in ISO-8859-1 encoding		$vars['rules'] = array(			'esre1>','esio1>','siol1.','siof0.','sioe0.','sio3>','st1>','sf1>','sle1>',			'slo1>','s'.chr(233).'1>',chr(233).'tuae5.',chr(233).'tuae2.','tnia0.','tniv1.','tni3>','suor1.',			'suo0.','sdrail5.','sdrai4.','er'.chr(232).'i1>','sesue3x>','esuey5i.','esue2x>',			'se1>','er'.chr(232).'g3.','eca1>','esiah0.','esi1>','siss2.','sir2>','sit2>','egan'.chr(233).'1.',			'egalli6>','egass1.','egas0.','egat3.','ega3>','ette4>','ett2>','etio1.',			'tio'.chr(231).'4c.','tio0.','et1>','eb1>','snia1>','eniatnau8>','eniatn4.','enia1>',			'niatnio3.','niatg3.','e'.chr(233).'1>',''.chr(233).'hcat1.',''.chr(233).'hca4.',''.chr(233).'tila5>',''.chr(233).'tici5.',''.chr(233).'tir1.',			''.chr(233).'ti3>',''.chr(233).'gan1.',''.chr(233).'ga3>',''.chr(233).'tehc1.',''.chr(233).'te3>',''.chr(233).'it0.',''.chr(233).'1>','eire4.','eirue5.',			'eio1.','eia1.','ei1>','eng1.','xuaessi7.','xuae1>','uaes0.','uae3.',			'xuave2l.','xuav2li>','xua3la>','ela1>','lart2.','lani2>','la'.chr(233).'2>','siay4i.',			'siassia7.','siarv1*.','sia1>','tneiayo6i.','tneiay6i.','tneiassia9.',			'tneiareio7.','tneia5>','tneia4>','tiario4.','tiarim3.','tiaria3.',			'tiaris3.','tiari5.','tiarve6>','tiare5>','iare4>','are3>','tiay4i.',			'tia3>','tnay4i.','em'.chr(232).'iu5>','em'.chr(232).'i4>','tnaun3.','tnauqo3.','tnau4>','tnaf0.',			'tnat'.chr(233).'2>','tna3>','tno3>','zeiy4i.','zey3i.','zeire5>','zeird4.','zeirio4.',			'ze2>','ssiab0.','ssia4.','ssi3.','tnemma6>','tnemesuey9i.','tnemesue8>',			'tnemevi7.','tnemessia5.','tnemessi8.','tneme5>','tnemia4.','tnem'.chr(233).'5>',			'el2l>','lle3le>','let'.chr(244).'0.','lepp0.','le2>','srei1>','reit3.','reila2.',			'rei3>','ert'.chr(226).'e5.','ert'.chr(226).''.chr(233).'1.','ert'.chr(226).'4.','drai4.','erdro0.','erute5.','ruta0.',			'eruta1.','erutiov1.','erub3.','eruh3.','erul3.','er2r>','nn1>','r'.chr(232).'i3.',			'srev0.','sr1>','rid2>','re2>','xuei4.','esuei5.','lbati3.','lba3>',			'rueis0.','ruehcn4.','ecirta6.','ruetai6.','rueta5.','rueir0.','rue3>',			'esseti6.','essere6>','esserd1.','esse4>','essiab1.','essia5.','essio1.',			'essi4.','essal4.','essa1>','ssab1.','essurp1.','essu4.','essi1.','ssor1.',			'essor2.','esso1>','ess2>','tio3.','r'.chr(232).'s2re.','r'.chr(232).'0e.','esn1.','eu1>',			'sua0.','su1>','utt1>','tu'.chr(231).'3c.','u'.chr(231).'2c.','ur1.','ehcn2>','ehcu1>','snorr3.',			'snoru3.','snorua3.','snorv3.','snorio4.','snori5.','snore5>','snortt4>',			'snort'.chr(238).'a7.','snort3.','snor4.','snossi6.','snoire6.','snoird5.','snoitai7.',			'snoita6.','snoits1>','noits0.','snoi4>','noitaci7>','noitai6.','noita5.',			'noitu4.','noi3>','snoya0.','snoy4i.','sno'.chr(231).'a1.','sno'.chr(231).'r1.','snoe4.',			'snosiar1>','snola1.','sno3>','sno1>','noll2.','tnennei4.','ennei2>',			'snei1>','sne'.chr(233).'1>','enne'.chr(233).'5e.','ne'.chr(233).'3e.','neic0.','neiv0.','nei3.','sc1.',			'sd1.','sg1.','sni1.','tiu0.','ti2.','sp1>','sna1>','sue1.','enn2>','nong2.',			'noss2.','rioe4.','riot0.','riorc1.','riovec5.','rio3.','ric2.','ril2.',			'tnerim3.','tneris3>','tneri5.','t'.chr(238).'a3.','riss2.','t'.chr(238).'2.','t'.chr(226).'2>','ario2.',			'arim1.','ara1.','aris1.','ari3.','art1>','ardn2.','arr1.','arua1.','aro1.',			'arv1.','aru1.','ar2.','rd1.','ud1.','ul1.','ini1.','rin2.','tnessiab3.',			'tnessia7.','tnessi6.','tnessni4.','sini2.','sl1.','iard3.','iario3.','ia2>',			'io0.','iule2.','i1>','sid2.','sic2.','esoi4.','ed1.','ai2>','a1>','adr1.',			'tner'.chr(232).'5>','evir1.','evio4>','evi3.','fita4.','fi2>','enie1.','sare4>',			'sari4>','sard3.','sart2>','sa2.','tnessa6>','tnessu6>','tnegna3.','tnegi3.',			'tneg0.','tneru5>','tnemg0.','tnerni4.','tneiv1.','tne3>','une1.','en1>',			'nitn2.','ecnay5i.','ecnal1.','ecna4.','ec1>','nn1.','rit2>','rut2>','rud2.',			'ugn1>','eg1>','tuo0.','tul2>','t'.chr(251).'2>','ev1>','v'.chr(232).'2ve>','rtt1>','emissi6.',			'em1.','ehc1.','c'.chr(233).'i2c'.chr(232).'.','libi2l.','llie1.','liei4i.','xuev1.','xuey4i.',			'xueni5>','xuell4.','xuere5.','xue3>','rb'.chr(233).'3rb'.chr(232).'.','tur2.','rir'.chr(233).'4re.','rir2.',			'c'.chr(226).'2ca.','snu1.','rt'.chr(238).'a4.','long2.','vec2.',''.chr(231).'1c>','ssilp3.','silp2.',			't'.chr(232).'hc2te.','n'.chr(232).'m2ne.','llepp1.','tan2.','rv'.chr(232).'3rve.','rv'.chr(233).'3rve.','r'.chr(232).'2re.',			'r'.chr(233).'2re.','t'.chr(232).'2te.','t'.chr(233).'2te.','epp1.','eya2i.','ya1i.','yo1i.','esu1.','ugi1.',			'tt1.',			'end0.'		);		static::$_stemRules = $vars;		return static::$_stemRules;	}	/**	 * Returns the number of the first rule from the rule number	 * that can be applied to the given reversed input.	 * returns -1 if no rule can be applied, ie the stem has been found	 *	 * @param   string   $reversed_input	 * @param   integer  $rule_number	 *	 * @return  integer  Number of the first rule	 *	 * @since   3.0	 */	private static function _getFirstRule($reversed_input, $rule_number)	{		$vars = static::getStemRules();		$nb_rules = count($vars['rules']);		for ($i = $rule_number; $i < $nb_rules; $i++)		{			// Gets the letters from the current rule			$rule = $vars['rules'][$i];			$rule = preg_replace($vars['rule_pattern'], "\\1", $rule);			if (strncasecmp(utf8_decode($rule), $reversed_input, strlen(utf8_decode($rule))) == 0)			{				return $i;			}		}		return -1;	}	/**	 * Check the acceptability of a stem for French language	 *	 * @param   string  $reversed_stem  The stem to check in reverse form	 *	 * @return  boolean  True if stem is acceptable	 *	 * @since   3.0	 */	private static function _check($reversed_stem)	{		$vars = static::getStemRules();		if (preg_match('/[' . $vars['vowels'] . ']$/', utf8_encode($reversed_stem)))		{			// If the form starts with a vowel then at least two letters must remain after stemming (e.g.: "etaient" --> "et")			return (strlen($reversed_stem) > 2);		}		else		{			// If the reversed stem starts with a consonant then at least two letters must remain after stemming			if (strlen($reversed_stem) <= 2)			{				return false;			}			// And at least one of these must be a vowel or "y"			return (preg_match('/[' . $vars['vowels'] . ']/', utf8_encode($reversed_stem)));		}	}	/**	 * Paice/Husk stemmer which returns a stem for the given $input	 *	 * @param   string  $input  The word for which we want the stem in UTF-8	 *	 * @return  string  The stem	 *	 * @since   3.0	 */	private static function _getStem($input)	{		$vars = static::getStemRules();		$intact = true;		$reversed_input = strrev(utf8_decode($input));		$rule_number = 0;		// This loop goes through the rules' array until it finds an ending one (ending by '.') or the last one ('end0.')		while (true)		{			$rule_number = static::_getFirstRule($reversed_input, $rule_number);			if ($rule_number == -1)			{				// No other rule can be applied => the stem has been found				break;			}			$rule = $vars['rules'][$rule_number];			preg_match($vars['rule_pattern'], $rule, $matches);			if (($matches[2] != '*') || ($intact))			{				$reversed_stem = utf8_decode($matches[4]) . substr($reversed_input, $matches[3], strlen($reversed_input) - $matches[3]);				if (self::_check($reversed_stem))				{					$reversed_input = $reversed_stem;					if ($matches[5] == '.')					{						break;					}				}				else				{					// Go to another rule					$rule_number++;				}			}			else			{				// Go to another rule				$rule_number++;			}		}		return utf8_encode(strrev($reversed_input));	}}
<?php/** * @package    Joomla.Installation * * @copyright  Copyright (C) 2005 - 2013 Open Source Matters, Inc. All rights reserved. * @license    GNU General Public License version 2 or later; see LICENSE.txt */defined('_JEXEC') or die;/* @var InstallationViewCompleteHtml $this */?><form action="index.php" xmlns="http://www.w3.org/1999/html" method="post" id="adminForm"	class="form-validate form-horizontal">	<div class="alert alert-error inlineError" id="theDefaultError" style="display: none">		<h4 class="alert-heading"><?php echo JText::_('JERROR'); ?></h4>		<p id="theDefaultErrorMessage"></p>	</div>	<div class="alert alert-success">		<h3><?php echo JText::_('INSTL_COMPLETE_TITLE'); ?></h3>	</div>	<div class="alert">		<p><?php echo JText::_('INSTL_COMPLETE_REMOVE_INSTALLATION'); ?></p>		<input type="button" class="btn btn-warning" name="instDefault" onclick="Install.removeFolder(this);" value="<?php echo JText::_('INSTL_COMPLETE_REMOVE_FOLDER'); ?>" />	</div>	<div class="btn-toolbar">		<div class="btn-group">			<a class="btn" href="<?php echo JURI::root(); ?>" title="<?php echo JText::_('JSITE'); ?>"><i class="icon-eye-open"></i> <?php echo JText::_('JSITE'); ?></a>		</div>		<div class="btn-group">			<a class="btn btn-primary" href="<?php echo JURI::root(); ?>administrator/" title="<?php echo JText::_('JADMINISTRATOR'); ?>"><i class="icon-lock icon-white"></i> <?php echo JText::_('JADMINISTRATOR'); ?></a>		</div>	</div>	<div class="row-fluid">		<div class="span6">			<h3><?php echo JText::_('INSTL_COMPLETE_ADMINISTRATION_LOGIN_DETAILS'); ?></h3>			<hr class="hr-condensed" />			<table class="table table-striped table-condensed">				<tbody>					<tr>						<td class="item">							<?php echo JText::_('JEMAIL'); ?>						</td>						<td>							<span class="label"><?php echo $this->options['admin_email']; ?></span>						</td>					</tr>					<tr>						<td class="notice">							<?php echo JText::_('JUSERNAME'); ?>						</td>						<td>							<span class="label"><?php echo $this->options['admin_user']; ?></span>						</td>					</tr>				</tbody>				<tfoot>					<tr>						<td colspan="2"></td>					</tr>				</tfoot>			</table>		</div>		<div id="languages" class="span6">			<h3><?php echo JText::_('INSTL_COMPLETE_LANGUAGE_1'); ?></h3>			<hr class="hr-condensed" />			<p><?php echo JText::_('INSTL_COMPLETE_LANGUAGE_DESC'); ?></p>			<p><a href="#" class="btn btn-primary" id="instLangs" onclick="return Install.goToPage('languages');"><i class="icon-arrow-right icon-white"></i> <?php echo JText::_('INSTL_COMPLETE_INSTALL_LANGUAGES'); ?></a></p>			<p><?php echo JText::_('INSTL_COMPLETE_LANGUAGE_DESC2'); ?></p>		</div>	</div>	<?php if ($this->config) : ?>	<div class="alert alert-error">		<h3 class="alert-heading"><?php echo JText::_('JNOTICE'); ?></h3>		<p><?php echo JText::_('INSTL_CONFPROBLEM'); ?></p>		<textarea rows="10" cols="80" style="width: 100%;" name="configcode" onclick="this.form.configcode.focus();this.form.configcode.select();"><?php echo $this->config; ?></textarea>	</div>	<?php endif; ?>	<?php echo JHtml::_('form.token'); ?></form>
<?php/** * @package     Joomla.Site * @subpackage  com_search * * @copyright   Copyright (C) 2005 - 2013 Open Source Matters, Inc. All rights reserved. * @license     GNU General Public License version 2 or later; see LICENSE.txt */defined('_JEXEC') or die;?><dl class="search-results<?php echo $this->pageclass_sfx; ?>"><?php foreach ($this->results as $result) : ?>	<dt class="result-title">		<?php echo $this->pagination->limitstart + $result->count.'. ';?>		<?php if ($result->href) :?>			<a href="<?php echo JRoute::_($result->href); ?>"<?php if ($result->browsernav == 1) :?> target="_blank"<?php endif;?>>				<?php echo $this->escape($result->title);?>			</a>		<?php else:?>			<?php echo $this->escape($result->title);?>		<?php endif; ?>	</dt>	<?php if ($result->section) : ?>		<dd class="result-category">			<span class="small<?php echo $this->pageclass_sfx; ?>">				(<?php echo $this->escape($result->section); ?>)			</span>		</dd>	<?php endif; ?>	<dd class="result-text">		<?php echo $result->text; ?>	</dd>	<?php if ($this->params->get('show_date')) : ?>		<dd class="result-created<?php echo $this->pageclass_sfx; ?>">			<?php echo JText::sprintf('JGLOBAL_CREATED_DATE_ON', $result->created); ?>		</dd>	<?php endif; ?><?php endforeach; ?></dl><div class="pagination">	<?php echo $this->pagination->getPagesLinks(); ?></div>
<?php/** * @package     Joomla.Platform * @subpackage  Image * * @copyright   Copyright (C) 2005 - 2013 Open Source Matters, Inc. All rights reserved. * @license     GNU General Public License version 2 or later; see LICENSE */defined('JPATH_PLATFORM') or die;/** * Image Filter class adjust the brightness of an image. * * @package     Joomla.Platform * @subpackage  Image * @since       11.3 */class JImageFilterBrightness extends JImageFilter{	/**	 * Method to apply a filter to an image resource.	 *	 * @param   array  $options  An array of options for the filter.	 *	 * @return  void	 *	 * @since   11.3	 * @throws  InvalidArgumentException	 * @throws  RuntimeException	 */	public function execute(array $options = array())	{		// Verify that image filter support for PHP is available.		if (!function_exists('imagefilter'))		{			// @codeCoverageIgnoreStart			JLog::add('The imagefilter function for PHP is not available.', JLog::ERROR);			throw new RuntimeException('The imagefilter function for PHP is not available.');			// @codeCoverageIgnoreEnd		}		// Validate that the brightness value exists and is an integer.		if (!isset($options[IMG_FILTER_BRIGHTNESS]) || !is_int($options[IMG_FILTER_BRIGHTNESS]))		{			throw new InvalidArgumentException('No valid brightness value was given.  Expected integer.');		}		// Perform the brightness filter.		imagefilter($this->handle, IMG_FILTER_BRIGHTNESS, $options[IMG_FILTER_BRIGHTNESS]);	}}
<?php/** * @package     Joomla.Administrator * @subpackage  Template.hathor * * @copyright   Copyright (C) 2005 - 2013 Open Source Matters, Inc. All rights reserved. * @license     GNU General Public License version 2 or later; see LICENSE.txt */defined('_JEXEC') or die;?><script type="text/javascript">	setmenutype = function(type)	{		window.parent.Joomla.submitbutton('item.setType', type);		window.parent.SqueezeBox.close();	}</script><h2 class="modal-title"><?php echo JText::_('COM_MENUS_TYPE_CHOOSE'); ?></h2><ul class="menu_types">	<?php foreach ($this->types as $name => $list): ?>	<li><dl class="menu_type">			<dt><?php echo JText::_($name); ?></dt>			<dd><ul>					<?php foreach ($list as $item): ?>					<li><a class="choose_type" href="#" title="<?php echo JText::_($item->description); ?>"							onclick="javascript:setmenutype('<?php echo base64_encode(json_encode(array('id' => $this->recordId, 'title' => $item->title, 'request' => $item->request))); ?>')">							<?php echo JText::_($item->title);?>						</a>					</li>					<?php endforeach; ?>				</ul>			</dd>		</dl>	</li>	<?php endforeach; ?>	<li><dl class="menu_type">			<dt><?php echo JText::_('COM_MENUS_TYPE_SYSTEM'); ?></dt>			<dd>				<ul>					<li><a class="choose_type" href="#" title="<?php echo JText::_('COM_MENUS_TYPE_EXTERNAL_URL_DESC'); ?>"							onclick="javascript:setmenutype('<?php echo base64_encode(json_encode(array('id' => $this->recordId, 'title' => 'url'))); ?>')">							<?php echo JText::_('COM_MENUS_TYPE_EXTERNAL_URL'); ?>						</a>					</li>					<li><a class="choose_type" href="#" title="<?php echo JText::_('COM_MENUS_TYPE_ALIAS_DESC'); ?>"							onclick="javascript:setmenutype('<?php echo base64_encode(json_encode(array('id' => $this->recordId, 'title' => 'alias'))); ?>')">							<?php echo JText::_('COM_MENUS_TYPE_ALIAS'); ?>						</a>					</li>					<li><a class="choose_type" href="#"  title="<?php echo JText::_('COM_MENUS_TYPE_SEPARATOR_DESC'); ?>"							onclick="javascript:setmenutype('<?php echo base64_encode(json_encode(array('id' => $this->recordId, 'title' => 'separator'))); ?>')">							<?php echo JText::_('COM_MENUS_TYPE_SEPARATOR'); ?>						</a>					</li>					<li><a class="choose_type" href="#" title="<?php echo JText::_('COM_MENUS_TYPE_HEADING_DESC'); ?>"							onclick="javascript:setmenutype('<?php echo base64_encode(json_encode(array('id' => $this->recordId, 'title' => 'heading'))); ?>')">							<?php echo JText::_('COM_MENUS_TYPE_HEADING'); ?>						</a>					</li>				</ul>			</dd>		</dl>	</li></ul>
<?php/** * @package     Joomla.Administrator * @subpackage  com_newsfeeds * * @copyright   Copyright (C) 2005 - 2013 Open Source Matters, Inc. All rights reserved. * @license     GNU General Public License version 2 or later; see LICENSE.txt */defined('_JEXEC') or die;$fieldSets = $this->form->getFieldsets('params');foreach ($fieldSets as $name => $fieldSet) :	?>	<div class="tab-pane" id="params-<?php echo $name;?>">	<?php	if (isset($fieldSet->description) && trim($fieldSet->description)) :		echo '<p class="alert alert-info">'.$this->escape(JText::_($fieldSet->description)).'</p>';	endif;	?>			<?php foreach ($this->form->getFieldset($name) as $field) : ?>				<div class="control-group">					<div class="control-label"><?php echo $field->label; ?></div>					<div class="controls"><?php echo $field->input; ?></div>				</div>			<?php endforeach; ?>	</div><?php endforeach; ?>
<?php/** * @package     Joomla.Site * @subpackage  mod_articles_popular * * @copyright   Copyright (C) 2005 - 2013 Open Source Matters, Inc. All rights reserved. * @license     GNU General Public License version 2 or later; see LICENSE.txt */defined('_JEXEC') or die;?><ul class="mostread<?php echo $moduleclass_sfx; ?>"><?php foreach ($list as $item) : ?>	<li>		<a href="<?php echo $item->link; ?>">			<?php echo $item->title; ?></a>	</li><?php endforeach; ?></ul>
<?php/** * @package     Joomla.Platform * @subpackage  Application * * @copyright   Copyright (C) 2005 - 2013 Open Source Matters, Inc. All rights reserved. * @license     GNU General Public License version 2 or later; see LICENSE */defined('JPATH_PLATFORM') or die;/** * Deprecated class placeholder. You should use JApplicationCli instead. * * @package     Joomla.Platform * @subpackage  Application * @since       11.1 * @deprecated  12.3 Use JApplicationCli instead. */class JCli extends JApplicationCli{	/**	 * Class constructor.	 *	 * @param   mixed  $input       An optional argument to provide dependency injection for the application's	 *                              input object.  If the argument is a JInputCli object that object will become	 *                              the application's input object, otherwise a default input object is created.	 * @param   mixed  $config      An optional argument to provide dependency injection for the application's	 *                              config object.  If the argument is a JRegistry object that object will become	 *                              the application's config object, otherwise a default config object is created.	 * @param   mixed  $dispatcher  An optional argument to provide dependency injection for the application's	 *                              event dispatcher.  If the argument is a JEventDispatcher object that object will become	 *                              the application's event dispatcher, if it is null then the default event dispatcher	 *                              will be created based on the application's loadDispatcher() method.	 *	 * @see     loadDispatcher()	 * @since   11.1	 * @deprecated  12.3 Use JApplicationCli instead.	 */	public function __construct(JInputCli $input = null, JRegistry $config = null, JEventDispatcher $dispatcher = null)	{		JLog::add('JCli is deprecated. Use JApplicationCli instead.', JLog::WARNING, 'deprecated');		parent::__construct($input, $config, $dispatcher);	}}
<?php/** * @package     Joomla.Site * @subpackage  com_contact * * @copyright   Copyright (C) 2005 - 2013 Open Source Matters, Inc. All rights reserved. * @license     GNU General Public License version 2 or later; see LICENSE.txt */defined('_JEXEC') or die;JLoader::register('ContactHelper', JPATH_ADMINISTRATOR . '/components/com_contact/helpers/contact.php');JLoader::register('CategoryHelperAssociation', JPATH_ADMINISTRATOR . '/components/com_categories/helpers/association.php');/** * Contact Component Association Helper * * @package     Joomla.Site * @subpackage  com_contact * @since       3.0 */abstract class ContactHelperAssociation extends CategoryHelperAssociation{	/**	 * Method to get the associations for a given item	 *	 * @param   integer  $id    Id of the item	 * @param   string   $view  Name of the view	 *	 * @return  array   Array of associations for the item	 *	 * @since  3.0	 */	public static function getAssociations($id = 0, $view = null)	{		jimport('helper.route', JPATH_COMPONENT_SITE);		$app = JFactory::getApplication();		$jinput = $app->input;		$view = is_null($view) ? $jinput->get('view') : $view;		$id = empty($id) ? $jinput->getInt('id') : $id;		if ($view == 'contact')		{			if ($id)			{				$associations = JLanguageAssociations::getAssociations('com_contact', '#__contact_details', 'com_contact.item', $id);				$return = array();				foreach ($associations as $tag => $item)				{					$return[$tag] = ContactHelperRoute::getContactRoute($item->id, $item->catid, $item->language);				}				return $return;			}		}		if ($view == 'category' || $view == 'categories')		{			return self::getCategoryAssociations($id, 'com_contact');		}		return array();	}}
<?php/** * @package     Joomla.Platform * @subpackage  Image * * @copyright   Copyright (C) 2005 - 2013 Open Source Matters, Inc. All rights reserved. * @license     GNU General Public License version 2 or later; see LICENSE */defined('JPATH_PLATFORM') or die;/** * Image Filter class adjust the contrast of an image. * * @package     Joomla.Platform * @subpackage  Image * @since       11.3 */class JImageFilterContrast extends JImageFilter{	/**	 * Method to apply a filter to an image resource.	 *	 * @param   array  $options  An array of options for the filter.	 *	 * @return  void	 *	 * @since   11.3	 * @throws  InvalidArgumentException	 * @throws  RuntimeException	 */	public function execute(array $options = array())	{		// Verify that image filter support for PHP is available.		if (!function_exists('imagefilter'))		{			// @codeCoverageIgnoreStart			JLog::add('The imagefilter function for PHP is not available.', JLog::ERROR);			throw new RuntimeException('The imagefilter function for PHP is not available.');			// @codeCoverageIgnoreEnd		}		// Validate that the contrast value exists and is an integer.		if (!isset($options[IMG_FILTER_CONTRAST]) || !is_int($options[IMG_FILTER_CONTRAST]))		{			throw new InvalidArgumentException('No valid contrast value was given.  Expected integer.');		}		// Perform the contrast filter.		imagefilter($this->handle, IMG_FILTER_CONTRAST, $options[IMG_FILTER_CONTRAST]);	}}
<?php/** * Script used to build Joomla distribution archive packages * Set $version and $release before running * Builds upgrade packages in tmp/packagesx.x folder (for example, 'build/tmp/packages2.5') * Builds full packages in tmp/packages_fullx.x.x folder (for example, 'build/tmp/packages_full2.5.1') * * Note: the new package must be tagged in your git repository BEFORE doing this * It uses the git tag for the new version, not trunk. * * This script is designed to be run in CLI on Linux or Mac OS X. * Make sure your default umask is 022 to create archives with correct permissions. * * Steps: * 1. Tag new release in the local git repository (for example, "git tag 2.5.1") * 2. Set the $version and $release variables for the new version. * 3. Run from CLI as: 'php build.php" from build directory. * 4. Check the archives in the tmp directory. * * @package		Joomla.Build * @copyright	Copyright (C) 2005 - 2013 Open Source Matters, Inc. All rights reserved. * @license		GNU General Public License version 2 or later; see LICENSE.txt */// Make sure file and folder permissions are set correctlyumask(022);// Set version for each build// Version is first 2 digits (like '1.7', '2.5', or '3.0')$version = '3.1';// Set release for each build// Release is third digit (like '0', '1', or '2')$release = '0_beta5';// Set path to git binary (e.g., /usr/local/git/bin/git or /urs/bin/git)$gitPath = '/usr/bin/git';// Path to local git repository (parent folder of build folder)$repo = dirname(dirname(__FILE__));$here = dirname(__FILE__);// Build packages in tmp folder$tmp = $here . '/tmp';$fullpath = $here . '/tmp/' . $version . '.' . $release;$full = $version . '.' . $release;echo "Start build for version $full.\n";echo "Delete old release folder.\n";system('rm -rf ' . $tmp);mkdir($tmp);mkdir($fullpath);echo "Copy the files from the git repository.\n";chdir($repo);system($gitPath . ' archive ' . $full . ' | tar -x -C ' . $fullpath);chdir($tmp);system('mkdir diffdocs');system('mkdir diffconvert');system('mkdir packages'.$version);echo "Copy manifest file to root directory for install packkages.\n";system('cp '.$fullpath.'/administrator/manifests/files/joomla.xml '.$fullpath);echo "Create list of changed files from git repository.\n";// Here we force add every top-level directory and file in our diff archive, even if they haven't changed.// This allows us to install these files from the Extension Manager.// So we add the index file for each top-level directory.// Note: If we add new top-level directories or files, be sure to include them here.$filesArray = array(		"administrator/index.php\n" => true,		"cache/index.html\n" => true,		"cli/index.html\n" => true,		"components/index.html\n" => true,		"images/index.html\n" => true,		"includes/index.html\n" => true,		"language/index.html\n" => true,		"layouts/index.html\n" => true,		"libraries/index.html\n" => true,		"logs/index.html\n" => true,		"media/index.html\n" => true,		"modules/index.html\n" => true,		"plugins/index.html\n" => true,		"templates/index.html\n" => true,		"tmp/index.html\n" => true,		"htaccess.txt\n" => true,		"index.php\n" => true,		"LICENSE.txt\n" => true,		"README.txt\n" => true,		"robots.txt.dist\n" => true,		"web.config.txt\n" => true,		"joomla.xml\n" => true,);// Count down starting with the latest release and add diff files to this arrayfor($num=$release-1; $num >= 0; $num--) {	echo "Create version $num update packages.\n";	// Here we get a list of all files that have changed between the two tags ($previousTag and $full) and save in diffdocs	$previousTag = $version . '.' . $num;	$command = $gitPath . ' diff tags/'. $previousTag . ' tags/' . $full . ' --name-status > diffdocs/'.$version.'.'.$num;	system($command);	// $newfile will hold the array of files to include in diff package	$deletedFiles = array();	$files = file('diffdocs/'.$version.'.'.$num);	// Loop through and add all files except: tests, installation, build, .git, or docs	foreach ($files AS $file)	{		if (substr($file, 2, 5) != 'tests' && substr($file, 2, 12) != 'installation' && substr($file,2,5) != 'build'		&& substr($file, 2, 4) != '.git' && substr($file, 2, 4) != 'docs' )		{			// Don't add deleted files to the list			if (substr($file, 0, 1) != 'D')			{				$filesArray[substr($file, 2)] = true;			}			else			{				// Add deleted files to the deleted files list				$deletedFiles[] = substr($file,2);			}		}	}	// Write the file list to a text file.	$filePut = array_keys($filesArray);	sort($filePut);	file_put_contents('diffconvert/'.$version.'.'.$num, implode("", $filePut));	file_put_contents('diffconvert/'.$version.'.'.$num.'-deleted', $deletedFiles);	// Only create archives for 0 and most recent versions. Skip other update versions.	if ($num != 0 && ($num != $release - 1))	{		echo "Skipping create archive for version $version.$num\n";		continue;	}	$fromName = $num == 0 ? 'x' : $num;	// Create the diff archive packages using the file name list.	system('tar --create --bzip2 --no-recursion --directory '.$full.' --file packages'.$version.'/Joomla_'.$version.'.'.$fromName.'_to_'.$full.'-Stable-Patch_Package.tar.bz2 --files-from diffconvert/'.$version.'.'.$num . '> /dev/null');	system('tar --create --gzip  --no-recursion --directory '.$full.' --file packages'.$version.'/Joomla_'.$version.'.'.$fromName.'_to_'.$full.'-Stable-Patch_Package.tar.gz  --files-from diffconvert/'.$version.'.'.$num . '> /dev/null');	chdir(''.$full);	system('zip ../packages'.$version.'/Joomla_'.$version.'.'.$fromName.'_to_'.$full.'-Stable-Patch_Package.zip -@ < ../diffconvert/'.$version.'.'.$num . '> /dev/null');	chdir('..');}// Delete the directories we exclude from the packages (tests, docs, build).echo "Delete folders not included in packages.\n";$doNotPackage = array('tests', 'docs', '.gitignore', 'build', 'build.xml', 'phpunit.xml.dist', 'README.md', 'CONTRIBUTING.md');foreach ($doNotPackage as $removeFile){	system('rm -rf ' . $full . '/' . $removeFile);}// Recreate empty directories before creating new archives.system('mkdir packages_full'.$full);echo "Build full package files.\n";chdir($full);// Create full archive packages.system('tar --create --bzip2 --file ../packages_full'.$full.'/Joomla_'.$full.'-Stable-Full_Package.tar.bz2 * > /dev/null');system('tar --create --gzip --file ../packages_full'.$full.'/Joomla_'.$full.'-Stable-Full_Package.tar.gz * > /dev/null');system('zip -r ../packages_full'.$full.'/Joomla_'.$full.'-Stable-Full_Package.zip * > /dev/null');// Create full update file without installation folder.echo "Build full update package.\n";system('rm -r installation');system('tar --create --bzip2 --file ../packages_full'.$full.'/Joomla_'.$full.'-Stable-Update_Package.tar.bz2 * > /dev/null');system('tar --create --gzip --file ../packages_full'.$full.'/Joomla_'.$full.'-Stable-Update_Package.tar.gz * > /dev/null');system('zip -r ../packages_full'.$full.'/Joomla_'.$full.'-Stable-Update_Package.zip * > /dev/null');echo "Build of version $full complete!\n";
<?php/** * @package     Joomla.Site * @subpackage  com_search * * @copyright   Copyright (C) 2005 - 2013 Open Source Matters, Inc. All rights reserved. * @license     GNU General Public License version 2 or later; see LICENSE.txt */defined('_JEXEC') or die;/** * OpenSearch View class for the Search component * * @package     Joomla.Site * @subpackage  Search * @since       1.7 */class SearchViewSearch extends JViewLegacy{	public function display($tpl = null)	{		$doc = JFactory::getDocument();		$app = JFactory::getApplication();		$params = JComponentHelper::getParams('com_search');		$doc->setShortName($params->get('opensearch_name', $app->getCfg('sitename')));		$doc->setDescription($params->get('opensearch_description', $app->getCfg('MetaDesc')));		// Add the URL for the search		$searchUri = JURI::base().'index.php?option=com_search&searchword={searchTerms}';		// Find the menu item for the search		$menu	= $app->getMenu();		$items	= $menu->getItems('link', 'index.php?option=com_search&view=search');		if (isset($items[0]))		{			$searchUri .= '&Itemid='.$items[0]->id;		}		$htmlSearch = new JOpenSearchUrl;		$htmlSearch->template = JRoute::_($searchUri);		$doc->addUrl($htmlSearch);	}}
<?php/** * @package     Joomla.Administrator * @subpackage  com_redirect * * @copyright   Copyright (C) 2005 - 2013 Open Source Matters, Inc. All rights reserved. * @license     GNU General Public License version 2 or later; see LICENSE.txt */defined('_JEXEC') or die;/** * View class for a list of redirection links. * * @package     Joomla.Administrator * @subpackage  com_redirect * @since       1.6 */class RedirectViewLinks extends JViewLegacy{	protected $enabled;	protected $items;	protected $pagination;	protected $state;	/**	 * Display the view	 *	 * @since   1.6	 */	public function display($tpl = null)	{		$this->enabled		= RedirectHelper::isEnabled();		$this->items		= $this->get('Items');		$this->pagination	= $this->get('Pagination');		$this->state		= $this->get('State');		// Check for errors.		if (count($errors = $this->get('Errors')))		{			JError::raiseError(500, implode("\n", $errors));			return false;		}		$this->addToolbar();		$this->sidebar = JHtmlSidebar::render();		parent::display($tpl);	}	/**	 * Add the page title and toolbar.	 *	 * @since   1.6	 */	protected function addToolbar()	{		$state	= $this->get('State');		$canDo	= RedirectHelper::getActions();		JToolbarHelper::title(JText::_('COM_REDIRECT_MANAGER_LINKS'), 'redirect');		if ($canDo->get('core.create'))		{			JToolbarHelper::addNew('link.add');		}		if ($canDo->get('core.edit'))		{			JToolbarHelper::editList('link.edit');		}		if ($canDo->get('core.edit.state'))		{			if ($state->get('filter.state') != 2){				JToolbarHelper::divider();				JToolbarHelper::publish('links.publish', 'JTOOLBAR_ENABLE', true);				JToolbarHelper::unpublish('links.unpublish', 'JTOOLBAR_DISABLE', true);			}			if ($state->get('filter.state') != -1 )			{				JToolbarHelper::divider();				if ($state->get('filter.state') != 2)				{					JToolbarHelper::archiveList('links.archive');				}				elseif ($state->get('filter.state') == 2)				{					JToolbarHelper::unarchiveList('links.publish', 'JTOOLBAR_UNARCHIVE');				}			}		}		if ($state->get('filter.state') == -2 && $canDo->get('core.delete'))		{			JToolbarHelper::deleteList('', 'links.delete', 'JTOOLBAR_EMPTY_TRASH');			JToolbarHelper::divider();		} elseif ($canDo->get('core.edit.state'))		{			JToolbarHelper::trash('links.trash');			JToolbarHelper::divider();		}		if ($canDo->get('core.admin'))		{			JToolbarHelper::preferences('com_redirect');			JToolbarHelper::divider();		}		JToolbarHelper::help('JHELP_COMPONENTS_REDIRECT_MANAGER');		JHtmlSidebar::setAction('index.php?option=com_redirect&view=links');		JHtmlSidebar::addFilter(			JText::_('JOPTION_SELECT_PUBLISHED'),			'filter_state',			JHtml::_('select.options', RedirectHelper::publishedOptions(), 'value', 'text', $this->state->get('filter.state'), true)		);	}}
<?php/** * @package     Joomla.Administrator * @subpackage  com_cache * * @copyright   Copyright (C) 2005 - 2013 Open Source Matters, Inc. All rights reserved. * @license     GNU General Public License version 2 or later; see LICENSE.txt */defined('_JEXEC') or die;/** * Cache Model * * @package     Joomla.Administrator * @subpackage  com_cache * @since       1.6 */class CacheModelCache extends JModelList{	/**	 * An Array of CacheItems indexed by cache group ID	 *	 * @var Array	 */	protected $_data = array();	/**	 * Group total	 *	 * @var integer	 */	protected $_total = null;	/**	 * Pagination object	 *	 * @var object	 */	protected $_pagination = null;	/**	 * Method to auto-populate the model state.	 *	 * Note. Calling getState in this method will result in recursion.	 *	 * @since   1.6	 */	protected function populateState($ordering = null, $direction = null)	{		$clientId = $this->getUserStateFromRequest($this->context.'.filter.client_id', 'filter_client_id', 0, 'int');		$this->setState('clientId', $clientId == 1 ? 1 : 0);		$client	= JApplicationHelper::getClientInfo($clientId);		$this->setState('client', $client);		parent::populateState('group', 'asc');	}	/**	 * Method to get cache data	 *	 * @return array	 */	public function getData()	{		if (empty($this->_data))		{			$cache = $this->getCache();			$data  = $cache->getAll();			if ($data != false)			{				$this->_data = $data;				$this->_total = count($data);				if ($this->_total)				{					// Apply custom ordering					$ordering 	= $this->getState('list.ordering');					$direction 	= ($this->getState('list.direction') == 'asc') ? 1 : -1;					jimport('joomla.utilities.arrayhelper');					$this->_data = JArrayHelper::sortObjects($data, $ordering, $direction);					// Apply custom pagination					if ($this->_total > $this->getState('list.limit') && $this->getState('list.limit'))					{						$this->_data = array_slice($this->_data, $this->getState('list.start'), $this->getState('list.limit'));					}				}			} else {				$this->_data = array();			}		}		return $this->_data;	}	/**	 * Method to get cache instance	 *	 * @return object	 */	public function getCache()	{		$conf = JFactory::getConfig();		$options = array(			'defaultgroup'	=> '',			'storage' 		=> $conf->get('cache_handler', ''),			'caching'		=> true,			'cachebase'		=> ($this->getState('clientId') == 1) ? JPATH_ADMINISTRATOR . '/cache' : $conf->get('cache_path', JPATH_SITE . '/cache')		);		$cache = JCache::getInstance('', $options);		return $cache;	}	/**	 * Method to get client data	 *	 * @return array	 */	public function getClient()	{		return $this->getState('client');	}	/**	 * Get the number of current Cache Groups	 *	 * @return  int	 */	public function getTotal()	{		if (empty($this->_total))		{			$this->_total = count($this->getData());		}		return $this->_total;	}	/**	 * Method to get a pagination object for the cache	 *	 * @return  integer	 */	public function getPagination()	{		if (empty($this->_pagination))		{			$this->_pagination = new JPagination($this->getTotal(), $this->getState('list.start'), $this->getState('list.limit'));		}		return $this->_pagination;	}	/**	 * Clean out a cache group as named by param.	 * If no param is passed clean all cache groups.	 *	 * @param String $group	 */	public function clean($group = '')	{		$cache = $this->getCache();		$cache->clean($group);	}	public function cleanlist($array)	{		foreach ($array as $group)		{			$this->clean($group);		}	}	public function purge()	{		$cache = JFactory::getCache('');		return $cache->gc();	}}
<?php/** * @package     Joomla.Administrator * @subpackage  com_installer * * @copyright   Copyright (C) 2005 - 2013 Open Source Matters, Inc. All rights reserved. * @license     GNU General Public License version 2 or later; see LICENSE.txt */defined('_JEXEC') or die;/** * Extension Manager Templates Model * * @package     Joomla.Administrator * @subpackage  com_installer * @since       1.6 */class InstallerModelWarnings extends JModelList{	/**	 * Extension Type	 * @var	string	 */	public $type = 'warnings';	/**	 * Return the byte value of a particular string.	 *	 * @param   string  $val  String optionally with G, M or K suffix	 *	 * @return  integer   size in bytes	 *	 * @since 1.6	 */	public function return_bytes($val)	{		$val = trim($val);		$last = strtolower($val{strlen($val) - 1});		switch ($last)		{			// The 'G' modifier is available since PHP 5.1.0			case 'g':				$val *= 1024;			case 'm':				$val *= 1024;			case 'k':				$val *= 1024;		}		return $val;	}	/**	 * Load the data.	 *	 * @return  array  Messages	 *	 * @since   1.6	 */	public function getItems()	{		static $messages;		if ($messages)		{			return $messages;		}		$messages = array();		$file_uploads = ini_get('file_uploads');		if (!$file_uploads)		{			$messages[] = array('message' => JText::_('COM_INSTALLER_MSG_WARNINGS_FILEUPLOADSDISABLED'),					'description' => JText::_('COM_INSTALLER_MSG_WARNINGS_FILEUPLOADISDISABLEDDESC'));		}		$upload_dir = ini_get('upload_tmp_dir');		if (!$upload_dir)		{			$messages[] = array('message' => JText::_('COM_INSTALLER_MSG_WARNINGS_PHPUPLOADNOTSET'),					'description' => JText::_('COM_INSTALLER_MSG_WARNINGS_PHPUPLOADNOTSETDESC'));		}		else		{			if (!is_writeable($upload_dir))			{				$messages[] = array('message' => JText::_('COM_INSTALLER_MSG_WARNINGS_PHPUPLOADNOTWRITEABLE'),						'description' => JText::sprintf('COM_INSTALLER_MSG_WARNINGS_PHPUPLOADNOTWRITEABLEDESC', $upload_dir));			}		}		$config = JFactory::getConfig();		$tmp_path = $config->get('tmp_path');		if (!$tmp_path)		{			$messages[] = array('message' => JText::_('COM_INSTALLER_MSG_WARNINGS_JOOMLATMPNOTSET'),					'description' => JText::_('COM_INSTALLER_MSG_WARNINGS_JOOMLATMPNOTSETDESC'));		}		else		{			if (!is_writeable($tmp_path))			{				$messages[] = array('message' => JText::_('COM_INSTALLER_MSG_WARNINGS_JOOMLATMPNOTWRITEABLE'),						'description' => JText::sprintf('COM_INSTALLER_MSG_WARNINGS_JOOMLATMPNOTWRITEABLEDESC', $tmp_path));			}		}		$memory_limit = $this->return_bytes(ini_get('memory_limit'));		if ($memory_limit < (8 * 1024 * 1024))		{			// 8MB			$messages[] = array('message' => JText::_('COM_INSTALLER_MSG_WARNINGS_LOWMEMORYWARN'),					'description' => JText::_('COM_INSTALLER_MSG_WARNINGS_LOWMEMORYDESC'));		}		elseif ($memory_limit < (16 * 1024 * 1024))		{			// 16MB			$messages[] = array('message' => JText::_('COM_INSTALLER_MSG_WARNINGS_MEDMEMORYWARN'),					'description' => JText::_('COM_INSTALLER_MSG_WARNINGS_MEDMEMORYDESC'));		}		$post_max_size = $this->return_bytes(ini_get('post_max_size'));		$upload_max_filesize = $this->return_bytes(ini_get('upload_max_filesize'));		if ($post_max_size < $upload_max_filesize)		{			$messages[] = array('message' => JText::_('COM_INSTALLER_MSG_WARNINGS_UPLOADBIGGERTHANPOST'),					'description' => JText::_('COM_INSTALLER_MSG_WARNINGS_UPLOADBIGGERTHANPOSTDESC'));		}		if ($post_max_size < (4 * 1024 * 1024)) // 4MB		{			$messages[] = array('message' => JText::_('COM_INSTALLER_MSG_WARNINGS_SMALLPOSTSIZE'),					'description' => JText::_('COM_INSTALLER_MSG_WARNINGS_SMALLPOSTSIZEDESC'));		}		if ($upload_max_filesize < (4 * 1024 * 1024)) // 4MB		{			$messages[] = array('message' => JText::_('COM_INSTALLER_MSG_WARNINGS_SMALLUPLOADSIZE'),					'description' => JText::_('COM_INSTALLER_MSG_WARNINGS_SMALLUPLOADSIZEDESC'));		}		return $messages;	}}
<?php/** * @package     Joomla.Site * @subpackage  Layout * * @copyright   Copyright (C) 2005 - 2013 Open Source Matters, Inc. All rights reserved. * @license     GNU General Public License version 2 or later; see LICENSE.txt */defined('JPATH_BASE') or die;?>			<dd class="hits">					<span class="icon-eye-open"></span>					<?php echo JText::sprintf('COM_CONTENT_ARTICLE_HITS', $displayData['item']->hits); ?>			</dd>
#!/usr/bin/env php<?php/** * @package    Joomla.Platform * * @copyright  Copyright (C) 2005 - 2013 Open Source Matters, Inc. All rights reserved. * @license    GNU General Public License version 2 or later; see LICENSE */define('_JEXEC', 1);define('JPATH_BASE', dirname(__FILE__));// Load the Joomla! Platformrequire_once realpath('../libraries/import.php');/** * Keychain Manager * * @package  Joomla.Platform * @since    12.3 */class KeychainManager extends JApplicationCli{	/**	 * @var    boolean  A flag if the keychain has been updated to trigger saving the keychain	 * @since  12.3	 */	protected $updated = false;	/**	 * @var    JKeychain  The keychain object being manipulated.	 * @since  12.3	 */	protected $keychain = null;	/**	 * Execute the application	 *	 * @return  void	 *	 * @since   12.3	 */	public function execute( )	{		if (!count($this->input->args))		{			// Check if they passed --help in otherwise display short usage summary			if ($this->input->get('help', false) === false)			{				$this->out("usage: {$this->input->executable} [options] [command] [<args>]");				exit(1);			}			else			{				$this->displayHelp();				exit(0);			}		}		// For all tasks but help and init we use the keychain		if (!in_array($this->input->args[0], array('help', 'init')))		{			$this->loadKeychain();		}		switch ($this->input->args[0])		{			case 'init':				$this->initPassphraseFile();				break;			case 'list':				$this->listEntries();				break;			case 'create':				$this->create();				break;			case 'change':				$this->change();			case 'delete':				$this->delete();				break;			case 'read':				$this->read();				break;			case 'help':				$this->displayHelp();				break;			default:				$this->out('Invalid command.');				break;		}		if ($this->updated)		{			$this->saveKeychain();		}		exit(0);	}	/**	 * Load the keychain from a file.	 *	 * @return  void	 *	 * @since   12.3	 */	protected function loadKeychain()	{		$keychain = $this->input->get('keychain', '', 'raw');		$publicKeyFile = $this->input->get('public-key', '', 'raw');		$passphraseFile = $this->input->get('passphrase', '', 'raw');		$this->keychain = new JKeychain;		if (file_exists($keychain))		{			if (file_exists($publicKeyFile))			{				$this->keychain->loadKeychain($keychain, $passphraseFile, $publicKeyFile);			}			else			{				$this->out('Public key not specified or missing!');				exit(1);			}		}	}	/**	 * Save this keychain to a file.	 *	 * @return  void	 *	 * @since   12.3	 */	protected function saveKeychain()	{		$keychain = $this->input->get('keychain', '', 'raw');		$publicKeyFile = $this->input->get('public-key', '', 'raw');		$passphraseFile = $this->input->get('passphrase', '', 'raw');		if (!file_exists($publicKeyFile))		{			$this->out("Public key file specified doesn't exist: $publicKeyFile");			exit(1);		}		$this->keychain->saveKeychain($keychain, $passphraseFile, $publicKeyFile);	}	/**	 * Initialise a new passphrase file.	 *	 * @return  void	 *	 * @since   12.3	 */	protected function initPassphraseFile()	{		$keychain = new JKeychain;		$passphraseFile = $this->input->get('passphrase', '', 'raw');		$privateKeyFile = $this->input->get('private-key', '', 'raw');		if (!strlen($passphraseFile))		{			$this->out('A passphrase file must be specified with --passphrase');			exit(1);		}		if (!file_exists($privateKeyFile))		{			$this->out("protected key file specified doesn't exist: $privateKeyFile");			exit(1);		}		$this->out('Please enter the new passphrase:');		$passphrase = $this->in();		$this->out('Please enter the passphrase for the protected key:');		$privateKeyPassphrase = $this->in();		$keychain->createPassphraseFile($passphrase, $passphraseFile, $privateKeyFile, $privateKeyPassphrase);	}	/**	 * Create a new entry	 *	 * @return  void	 *	 * @since   12.3	 */	protected function create()	{		if (count($this->input->args) != 3)		{			$this->out("usage: {$this->input->executable} [options] create entry_name entry_value");			exit(1);		}		if ($this->keychain->exists($this->input->args[1]))		{			$this->out('error: entry already exists. To change this entry, use "change"');			exit(1);		}		$this->change();	}	/**	 * Change an existing entry to a new value or create an entry if missing.	 *	 * @return  void	 *	 * @since   12.3	 */	protected function change()	{		if (count($this->input->args) != 3)		{			$this->out("usage: {$this->input->executable} [options] change entry_name entry_value");			exit(1);		}		$this->updated = true;		$this->keychain->setValue($this->input->args[1], $this->input->args[2]);	}	/**	 * Read an entry from the keychain	 *	 * @return  void	 *	 * @since   12.3	 */	protected function read()	{		if (count($this->input->args) != 2)		{			$this->out("usage: {$this->input->executable} [options] read entry_name");			exit(1);		}		$key = $this->input->args[1];		$this->out($key . ': ' . $this->dumpVar($this->keychain->get($key)));	}	/**	 * Get the string from var_dump	 *	 * @param   mixed  $var  The variable you want to have dumped.	 *	 * @return  string  The result of var_dump	 *	 * @since   12.3	 */	private function dumpVar($var)	{		ob_start();		var_dump($var);		$result = trim(ob_get_contents());		ob_end_clean();		return $result;	}	/**	 * Delete an entry from the keychain	 *	 * @return  void	 *	 * @since   12.3	 */	protected function delete()	{		if (count($this->input->args) != 2)		{			$this->out("usage: {$this->input->executable} [options] delete entry_name");			exit(1);		}		$this->updated = true;		$this->keychain->deleteValue($this->input->args[1], null);	}	/**	 * List entries in the keychain	 *	 * @return  void	 *	 * @since   12.3	 */	protected function listEntries()	{		foreach ($this->keychain->toArray() as $key => $value)		{			$line = $key;			if ($this->input->get('print-values'))			{				$line .= ': ' . $this->dumpVar($value);			}			$this->out($line);		}	}	/**	 * Display the help information	 *	 * @return  void	 *	 * @since   12.3	 */	protected function displayHelp()	{/*COMMANDS - list - create entry_name entry_value - change entry_name entry_value - delete entry_name - read   entry_name*/		$help = <<<HELPKeychain Management Utilityusage: {$this->input->executable} [--keychain=/path/to/keychain]	[--passphrase=/path/to/passphrase.dat] [--public-key=/path/to/public.pem]	[command] [<args>]OPTIONS  --keychain=/path/to/keychain    Path to a keychain file to manipulate.  --passphrase=/path/to/passphrase.dat    Path to a passphrase file containing the encryption/decryption key.  --public-key=/path/to/public.pem    Path to a public key file to decrypt the passphrase file.COMMANDS  list:    Usage: list [--print-values]    Lists all entries in the keychain. Optionally pass --print-values to print the values as well.  create:    Usage: create entry_name entry_value    Creates a new entry in the keychain called "entry_name" with the plaintext value "entry_value".    NOTE: This is an alias for change.  change:    Usage: change entry_name entry_value    Updates the keychain entry called "entry_name" with the value "entry_value".  delete:    Usage: delete entry_name    Removes an entry called "entry_name" from the keychain.  read:    Usage: read entry_name    Outputs the plaintext value of "entry_name" from the keychain.  init:    Usage: init    Creates a new passphrase file and prompts for a new passphrase.HELP;		$this->out($help);	}}try{	JApplicationCli::getInstance('KeychainManager')->execute();}catch (Exception $e){	echo $e->getMessage() . "\n";	exit(1);}
<?php/** * @package     Joomla.Platform * @subpackage  Database * * @copyright   Copyright (C) 2005 - 2013 Open Source Matters, Inc. All rights reserved. * @license     GNU General Public License version 2 or later; see LICENSE */defined('JPATH_PLATFORM') or die;/** * Joomla Platform Database Exporter Class * * @package     Joomla.Platform * @subpackage  Database * @since       12.1 */abstract class JDatabaseExporter{}
<?php/** * @package    Joomla.Platform * * @copyright  Copyright (C) 2005 - 2013 Open Source Matters, Inc. All rights reserved. * @license    GNU General Public License version 2 or later; see LICENSE */defined('JPATH_PLATFORM') or die;/** * Version information class for the Joomla Platform. * * @package  Joomla.Platform * @since    11.1 */final class JPlatform{	// Product name.	const PRODUCT = 'Joomla Platform';	// Release version.	const RELEASE = '12.2';	// Maintenance version.	const MAINTENANCE = '0';	// Development STATUS.	const STATUS = 'Stable';	// Build number.	const BUILD = 0;	// Code name.	const CODE_NAME = 'Neil Armstrong';	// Release date.	const RELEASE_DATE = '21-September-2012';	// Release time.	const RELEASE_TIME = '00:00';	// Release timezone.	const RELEASE_TIME_ZONE = 'GMT';	// Copyright Notice.	const COPYRIGHT = 'Copyright (C) 2005 - 2013 Open Source Matters, Inc. All rights reserved.';	// Link text.	const LINK_TEXT = '<a href="http://www.joomla.org">Joomla!</a> is Free Software released under the GNU General Public License.';	/**	 * Compares two a "PHP standardized" version number against the current Joomla Platform version.	 *	 * @param   string  $minimum  The minimum version of the Joomla Platform which is compatible.	 *	 * @return  boolean  True if the version is compatible.	 *	 * @see     http://www.php.net/version_compare	 * @since   11.1	 */	public static function isCompatible($minimum)	{		return (version_compare(self::getShortVersion(), $minimum, 'eq') == 1);	}	/**	 * Gets a "PHP standardized" version string for the current Joomla Platform.	 *	 * @return  string  Version string.	 *	 * @since   11.1	 */	public static function getShortVersion()	{		return self::RELEASE . '.' . self::MAINTENANCE;	}	/**	 * Gets a version string for the current Joomla Platform with all release information.	 *	 * @return  string  Complete version string.	 *	 * @since   11.1	 */	public static function getLongVersion()	{		return self::PRODUCT . ' ' . self::RELEASE . '.' . self::MAINTENANCE . ' ' . self::STATUS . ' [ ' . self::CODE_NAME . ' ] '			. self::RELEASE_DATE . ' ' . self::RELEASE_TIME . ' ' . self::RELEASE_TIME_ZONE;	}}
<?php/** * @package     Joomla.Legacy * @subpackage  Application * * @copyright   Copyright (C) 2005 - 2013 Open Source Matters, Inc. All rights reserved. * @license     GNU General Public License version 2 or later; see LICENSE */defined('JPATH_PLATFORM') or die;JLog::add('JDaemon has been renamed to JApplicationDaemon.', JLog::WARNING, 'deprecated');/** * Backward Compatability Stub for JApplicationDaemon * * @package     Joomla.Legacy * @subpackage  Application * @since       11.1 * @deprecated  12.3 Use JApplicationDaemon instead. */class JDaemon extends JApplicationDaemon{	/**	 * Class constructor.	 *	 * @param   mixed  $input       An optional argument to provide dependency injection for the application's	 *                              input object.  If the argument is a JInputCli object that object will become	 *                              the application's input object, otherwise a default input object is created.	 * @param   mixed  $config      An optional argument to provide dependency injection for the application's	 *                              config object.  If the argument is a JRegistry object that object will become	 *                              the application's config object, otherwise a default config object is created.	 * @param   mixed  $dispatcher  An optional argument to provide dependency injection for the application's	 *                              event dispatcher.  If the argument is a JEventDispatcher object that object will become	 *                              the application's event dispatcher, if it is null then the default event dispatcher	 *                              will be created based on the application's loadDispatcher() method.	 *	 * @since   11.1	 * @deprecated  12.3 Use JApplicationDaemon instead.	 * @throws  RuntimeException	 */	public function __construct(JInputCli $input = null, JRegistry $config = null, JEventDispatcher $dispatcher = null)	{		JLog::add('JDaemon is deprecated. Use JApplicationDaemon instead.', JLog::WARNING, 'deprecated');		parent::__construct($input, $config, $dispatcher);	}}
<?php/** * @package     Joomla.Platform * @subpackage  View * * @copyright   Copyright (C) 2005 - 2013 Open Source Matters, Inc. All rights reserved. * @license     GNU General Public License version 2 or later; see LICENSE */defined('JPATH_PLATFORM') or die;/** * Joomla Platform View Interface * * @package     Joomla.Platform * @subpackage  View * @since       12.1 */interface JView{	/**	 * Method to escape output.	 *	 * @param   string  $output  The output to escape.	 *	 * @return  string  The escaped output.	 *	 * @since   12.1	 */	public function escape($output);	/**	 * Method to render the view.	 *	 * @return  string  The rendered view.	 *	 * @since   12.1	 * @throws  RuntimeException	 */	public function render();}
<?php/** * @package     Joomla.Platform * @subpackage  Google * * @copyright   Copyright (C) 2005 - 2013 Open Source Matters, Inc. All rights reserved * @license     GNU General Public License version 2 or later; see LICENSE */defined('JPATH_PLATFORM') or die;/** * Google API data class for the Joomla Platform. * * @package     Joomla.Platform * @subpackage  Google * @since       12.3 */abstract class JGoogleData{	/**	 * @var    JRegistry  Options for the Google data object.	 * @since  12.3	 */	protected $options;	/**	 * @var    JGoogleAuth  Authentication client for the Google data object.	 * @since  12.3	 */	protected $auth;	/**	 * Constructor.	 *	 * @param   JRegistry    $options  Google options object.	 * @param   JGoogleAuth  $auth     Google data http client object.	 *	 * @since   12.3	 */	public function __construct(JRegistry $options = null, JGoogleAuth $auth = null)	{		$this->options = isset($options) ? $options : new JRegistry;		$this->auth = isset($auth) ? $auth : new JGoogleAuthOauth2($this->options);	}	/**	 * Method to authenticate to Google	 *	 * @return  boolean  True on success.	 *	 * @since   12.3	 */	public function authenticate()	{		return $this->auth->authenticate();	}	/**	 * Check authentication	 *	 * @return  boolean  True if authenticated.	 *	 * @since   12.3	 */	public function isAuthenticated()	{		return $this->auth->isAuthenticated();	}	/**	 * Method to validate XML	 *	 * @param   string  $data  XML data to be parsed	 *	 * @return  SimpleXMLElement  XMLElement of parsed data	 *	 * @since   12.3	 * @throws UnexpectedValueException	 */	protected static function safeXML($data)	{		try		{			return new SimpleXMLElement($data, LIBXML_NOWARNING | LIBXML_NOERROR);		}		catch (Exception $e)		{			throw new UnexpectedValueException("Unexpected data received from Google: `$data`.");		}	}	/**	 * Method to retrieve a list of data	 *	 * @param   array   $url       URL to GET	 * @param   int     $maxpages  Maximum number of pages to return	 * @param   string  $token     Next page token	 *	 * @return  mixed  Data from Google	 *	 * @since   12.3	 * @throws UnexpectedValueException	 */	protected function listGetData($url, $maxpages = 1, $token = null)	{		$qurl = $url;		if (strpos($url, '&') && isset($token))		{			$qurl .= '&pageToken=' . $token;		}		elseif (isset($token))		{			$qurl .= 'pageToken=' . $token;		}		$jdata = $this->query($qurl);		$data = json_decode($jdata->body, true);		if ($data && array_key_exists('items', $data))		{			if ($maxpages != 1 && array_key_exists('nextPageToken', $data))			{				$data['items'] = array_merge($data['items'], $this->listGetData($url, $maxpages - 1, $data['nextPageToken']));			}			return $data['items'];		}		elseif ($data)		{			return array();		}		else		{			throw new UnexpectedValueException("Unexpected data received from Google: `{$jdata->body}`.");		}	}	/**	 * Method to retrieve data from Google	 *	 * @param   string  $url      The URL for the request.	 * @param   mixed   $data     The data to include in the request.	 * @param   array   $headers  The headers to send with the request.	 * @param   string  $method   The type of http request to send.	 *	 * @return  mixed  Data from Google.	 *	 * @since   12.3	 */	protected function query($url, $data = null, $headers = null, $method = 'get')	{		return $this->auth->query($url, $data, $headers, $method);	}	/**	 * Get an option from the JGoogleData instance.	 *	 * @param   string  $key  The name of the option to get.	 *	 * @return  mixed  The option value.	 *	 * @since   12.3	 */	public function getOption($key)	{		return $this->options->get($key);	}	/**	 * Set an option for the JGoogleData instance.	 *	 * @param   string  $key    The name of the option to set.	 * @param   mixed   $value  The option value to set.	 *	 * @return  JGoogleData  This object for method chaining.	 *	 * @since   12.3	 */	public function setOption($key, $value)	{		$this->options->set($key, $value);		return $this;	}}
<?php/** * @package     Joomla.Platform * @subpackage  Crypt * * @copyright   Copyright (C) 2005 - 2011 Open Source Matters, Inc. All rights reserved. * @license     GNU General Public License version 2 or later; see LICENSE */defined('JPATH_PLATFORM') or die;/** * JCrypt cipher interface. * * @package     Joomla.Platform * @subpackage  Crypt * @since       12.1 */interface JCryptCipher{	/**	 * Method to decrypt a data string.	 *	 * @param   string     $data  The encrypted string to decrypt.	 * @param   JCryptKey  $key   The key[/pair] object to use for decryption.	 *	 * @return  string  The decrypted data string.	 *	 * @since   12.1	 */	public function decrypt($data, JCryptKey $key);	/**	 * Method to encrypt a data string.	 *	 * @param   string     $data  The data string to encrypt.	 * @param   JCryptKey  $key   The key[/pair] object to use for encryption.	 *	 * @return  string  The encrypted data string.	 *	 * @since   12.1	 */	public function encrypt($data, JCryptKey $key);	/**	 * Method to generate a new encryption key[/pair] object.	 * 	 * @param   array  $options  Key generation options.	 * 	 * @return  JCryptKey	 * 	 * @since   12.1	 */	public function generateKey(array $options = array());}
<?php/** * @package     Joomla.Site * @subpackage  com_contact * * @copyright   Copyright (C) 2005 - 2013 Open Source Matters, Inc. All rights reserved. * @license     GNU General Public License version 2 or later; see LICENSE.txt */defined('_JEXEC') or die;?><?php if ($this->params->get('presentation_style') == 'sliders') : ?>	<?php echo JHtml::_('bootstrap.addSlide', 'slide-contact', JText::_('COM_CONTACT_LINKS'), 'display-links'); ?><?php endif; ?><?php if ($this->params->get('presentation_style') == 'tabs') : ?>	<?php echo JHtml::_('bootstrap.addTab', 'myTab', 'display-links', JText::_('COM_CONTACT_LINKS', true)); ?><?php endif; ?><?php if ($this->params->get('presentation_style') == 'plain'):?>	<?php echo '<h3>'. JText::_('COM_CONTACT_LINKS').'</h3>';  ?><?php endif; ?><div class="contact-links">	<ul class="nav nav-tabs nav-stacked">		<?php		foreach (range('a', 'e') as $char) :// letters 'a' to 'e'			$link = $this->contact->params->get('link'.$char);			$label = $this->contact->params->get('link'.$char.'_name');			if (!$link) :				continue;			endif;			// Add 'http://' if not present			$link = (0 === strpos($link, 'http')) ? $link : 'http://'.$link;			// If no label is present, take the link			$label = ($label) ? $label : $link;			?>			<li>				<a href="<?php echo $link; ?>">					<?php echo $label; ?>				</a>			</li>		<?php endforeach; ?>	</ul></div><?php if ($this->params->get('presentation_style') == 'sliders') : ?>	<?php echo JHtml::_('bootstrap.endSlide'); ?><?php endif; ?><?php if ($this->params->get('presentation_style') == 'tabs') : ?>	<?php echo JHtml::_('bootstrap.endTab'); ?><?php endif; ?>
<?php/** * @package     Joomla.Platform * @subpackage  Archive * * @copyright   Copyright (C) 2005 - 2013 Open Source Matters, Inc. All rights reserved. * @license     GNU General Public License version 2 or later; see LICENSE */defined('JPATH_PLATFORM') or die;/** * Archieve class interface * * @package     Joomla.Platform * @subpackage  Archive * @since       12.1 */interface JArchiveExtractable{	/**	 * Extract a compressed file to a given path	 *	 * @param   string  $archive      Path to archive to extract	 * @param   string  $destination  Path to extract archive to	 * @param   array   $options      Extraction options [may be unused]	 *	 * @return  boolean  True if successful	 *	 * @since   12.1	 */	public function extract($archive, $destination, array $options = array());	/**	 * Tests whether this adapter can unpack files on this computer.	 *	 * @return  boolean  True if supported	 *	 * @since   12.1	 */	public static function isSupported();}
<?php/** * @package     Joomla.Site * @subpackage  com_newsfeeds * * @copyright   Copyright (C) 2005 - 2013 Open Source Matters, Inc. All rights reserved. * @license     GNU General Public License version 2 or later; see LICENSE.txt */defined('_JEXEC') or die;$class = ' class="first"';if (count($this->children[$this->category->id]) > 0 && $this->maxLevel != 0) :?><ul><?php foreach ($this->children[$this->category->id] as $id => $child) : ?>	<?php	if ($this->params->get('show_empty_categories') || $child->numitems || count($child->getChildren())) :	if (!isset($this->children[$this->category->id][$id + 1]))	{		$class = ' class="last"';	}	?>	<li<?php echo $class; ?>>		<?php $class = ''; ?>			<span class="item-title"><a href="<?php echo JRoute::_(NewsfeedsHelperRoute::getCategoryRoute($child->id));?>">				<?php echo $this->escape($child->title); ?></a>			</span>			<?php if ($this->params->get('show_subcat_desc') == 1) :?>			<?php if ($child->description) : ?>				<div class="category-desc">					<?php echo JHtml::_('content.prepare', $child->description, '', 'com_newsfeeds.category'); ?>				</div>			<?php endif; ?>            <?php endif; ?>            <?php if ($this->params->get('show_cat_items') == 1) :?>			<dl class="newsfeed-count"><dt>				<?php echo JText::_('COM_NEWSFEEDS_CAT_NUM'); ?></dt>				<dd><?php echo $child->numitems; ?></dd>			</dl>		<?php endif; ?>			<?php if (count($child->getChildren()) > 0) :				$this->children[$child->id] = $child->getChildren();				$this->category = $child;				$this->maxLevel--;				echo $this->loadTemplate('children');				$this->category = $child->getParent();				$this->maxLevel++;			endif; ?>		</li>	<?php endif; ?>	<?php endforeach; ?>	</ul><?php endif;
<?php/** * This file will be removed in Joomla! CMS version 3.2. Developers should either supply their own copy * in their installation packages or switch to JFeed. *//** * SimplePie * * A PHP-Based RSS and Atom Feed Framework. * Takes the hard work out of managing a complete RSS/Atom solution. * * Copyright (c) 2004-2009, Ryan Parman and Geoffrey Sneddon * All rights reserved. * * Redistribution and use in source and binary forms, with or without modification, are * permitted provided that the following conditions are met: * * 	* Redistributions of source code must retain the above copyright notice, this list of * 	  conditions and the following disclaimer. * * 	* Redistributions in binary form must reproduce the above copyright notice, this list * 	  of conditions and the following disclaimer in the documentation and/or other materials * 	  provided with the distribution. * * 	* Neither the name of the SimplePie Team nor the names of its contributors may be used * 	  to endorse or promote products derived from this software without specific prior * 	  written permission. * * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND ANY EXPRESS * OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY * AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT HOLDERS * AND CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR * CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR * SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY * THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR * OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE * POSSIBILITY OF SUCH DAMAGE. * * @package SimplePie * @version 1.2 * @copyright 2004-2009 Ryan Parman, Geoffrey Sneddon * @author Ryan Parman * @author Geoffrey Sneddon * @link http://simplepie.org/ SimplePie * @link http://simplepie.org/support/ Please submit all bug reports and feature requests to the SimplePie forums * @license http://www.opensource.org/licenses/bsd-license.php BSD License * @todo phpDoc comments *//** * SimplePie Name */define('SIMPLEPIE_NAME', 'SimplePie');/** * SimplePie Version */define('SIMPLEPIE_VERSION', '1.2');/** * SimplePie Build */define('SIMPLEPIE_BUILD', '20090627192103');/** * SimplePie Website URL */define('SIMPLEPIE_URL', 'http://simplepie.org');/** * SimplePie Useragent * @see SimplePie::set_useragent() */define('SIMPLEPIE_USERAGENT', SIMPLEPIE_NAME . '/' . SIMPLEPIE_VERSION . ' (Feed Parser; ' . SIMPLEPIE_URL . '; Allow like Gecko) Build/' . SIMPLEPIE_BUILD);/** * SimplePie Linkback */define('SIMPLEPIE_LINKBACK', '<a href="' . SIMPLEPIE_URL . '" title="' . SIMPLEPIE_NAME . ' ' . SIMPLEPIE_VERSION . '">' . SIMPLEPIE_NAME . '</a>');/** * No Autodiscovery * @see SimplePie::set_autodiscovery_level() */define('SIMPLEPIE_LOCATOR_NONE', 0);/** * Feed Link Element Autodiscovery * @see SimplePie::set_autodiscovery_level() */define('SIMPLEPIE_LOCATOR_AUTODISCOVERY', 1);/** * Local Feed Extension Autodiscovery * @see SimplePie::set_autodiscovery_level() */define('SIMPLEPIE_LOCATOR_LOCAL_EXTENSION', 2);/** * Local Feed Body Autodiscovery * @see SimplePie::set_autodiscovery_level() */define('SIMPLEPIE_LOCATOR_LOCAL_BODY', 4);/** * Remote Feed Extension Autodiscovery * @see SimplePie::set_autodiscovery_level() */define('SIMPLEPIE_LOCATOR_REMOTE_EXTENSION', 8);/** * Remote Feed Body Autodiscovery * @see SimplePie::set_autodiscovery_level() */define('SIMPLEPIE_LOCATOR_REMOTE_BODY', 16);/** * All Feed Autodiscovery * @see SimplePie::set_autodiscovery_level() */define('SIMPLEPIE_LOCATOR_ALL', 31);/** * No known feed type */define('SIMPLEPIE_TYPE_NONE', 0);/** * RSS 0.90 */define('SIMPLEPIE_TYPE_RSS_090', 1);/** * RSS 0.91 (Netscape) */define('SIMPLEPIE_TYPE_RSS_091_NETSCAPE', 2);/** * RSS 0.91 (Userland) */define('SIMPLEPIE_TYPE_RSS_091_USERLAND', 4);/** * RSS 0.91 (both Netscape and Userland) */define('SIMPLEPIE_TYPE_RSS_091', 6);/** * RSS 0.92 */define('SIMPLEPIE_TYPE_RSS_092', 8);/** * RSS 0.93 */define('SIMPLEPIE_TYPE_RSS_093', 16);/** * RSS 0.94 */define('SIMPLEPIE_TYPE_RSS_094', 32);/** * RSS 1.0 */define('SIMPLEPIE_TYPE_RSS_10', 64);/** * RSS 2.0 */define('SIMPLEPIE_TYPE_RSS_20', 128);/** * RDF-based RSS */define('SIMPLEPIE_TYPE_RSS_RDF', 65);/** * Non-RDF-based RSS (truly intended as syndication format) */define('SIMPLEPIE_TYPE_RSS_SYNDICATION', 190);/** * All RSS */define('SIMPLEPIE_TYPE_RSS_ALL', 255);/** * Atom 0.3 */define('SIMPLEPIE_TYPE_ATOM_03', 256);/** * Atom 1.0 */define('SIMPLEPIE_TYPE_ATOM_10', 512);/** * All Atom */define('SIMPLEPIE_TYPE_ATOM_ALL', 768);/** * All feed types */define('SIMPLEPIE_TYPE_ALL', 1023);/** * No construct */define('SIMPLEPIE_CONSTRUCT_NONE', 0);/** * Text construct */define('SIMPLEPIE_CONSTRUCT_TEXT', 1);/** * HTML construct */define('SIMPLEPIE_CONSTRUCT_HTML', 2);/** * XHTML construct */define('SIMPLEPIE_CONSTRUCT_XHTML', 4);/** * base64-encoded construct */define('SIMPLEPIE_CONSTRUCT_BASE64', 8);/** * IRI construct */define('SIMPLEPIE_CONSTRUCT_IRI', 16);/** * A construct that might be HTML */define('SIMPLEPIE_CONSTRUCT_MAYBE_HTML', 32);/** * All constructs */define('SIMPLEPIE_CONSTRUCT_ALL', 63);/** * Don't change case */define('SIMPLEPIE_SAME_CASE', 1);/** * Change to lowercase */define('SIMPLEPIE_LOWERCASE', 2);/** * Change to uppercase */define('SIMPLEPIE_UPPERCASE', 4);/** * PCRE for HTML attributes */define('SIMPLEPIE_PCRE_HTML_ATTRIBUTE', '((?:[\x09\x0A\x0B\x0C\x0D\x20]+[^\x09\x0A\x0B\x0C\x0D\x20\x2F\x3E][^\x09\x0A\x0B\x0C\x0D\x20\x2F\x3D\x3E]*(?:[\x09\x0A\x0B\x0C\x0D\x20]*=[\x09\x0A\x0B\x0C\x0D\x20]*(?:"(?:[^"]*)"|\'(?:[^\']*)\'|(?:[^\x09\x0A\x0B\x0C\x0D\x20\x22\x27\x3E][^\x09\x0A\x0B\x0C\x0D\x20\x3E]*)?))?)*)[\x09\x0A\x0B\x0C\x0D\x20]*');/** * PCRE for XML attributes */define('SIMPLEPIE_PCRE_XML_ATTRIBUTE', '((?:\s+(?:(?:[^\s:]+:)?[^\s:]+)\s*=\s*(?:"(?:[^"]*)"|\'(?:[^\']*)\'))*)\s*');/** * XML Namespace */define('SIMPLEPIE_NAMESPACE_XML', 'http://www.w3.org/XML/1998/namespace');/** * Atom 1.0 Namespace */define('SIMPLEPIE_NAMESPACE_ATOM_10', 'http://www.w3.org/2005/Atom');/** * Atom 0.3 Namespace */define('SIMPLEPIE_NAMESPACE_ATOM_03', 'http://purl.org/atom/ns#');/** * RDF Namespace */define('SIMPLEPIE_NAMESPACE_RDF', 'http://www.w3.org/1999/02/22-rdf-syntax-ns#');/** * RSS 0.90 Namespace */define('SIMPLEPIE_NAMESPACE_RSS_090', 'http://my.netscape.com/rdf/simple/0.9/');/** * RSS 1.0 Namespace */define('SIMPLEPIE_NAMESPACE_RSS_10', 'http://purl.org/rss/1.0/');/** * RSS 1.0 Content Module Namespace */define('SIMPLEPIE_NAMESPACE_RSS_10_MODULES_CONTENT', 'http://purl.org/rss/1.0/modules/content/');/** * RSS 2.0 Namespace * (Stupid, I know, but I'm certain it will confuse people less with support.) */define('SIMPLEPIE_NAMESPACE_RSS_20', '');/** * DC 1.0 Namespace */define('SIMPLEPIE_NAMESPACE_DC_10', 'http://purl.org/dc/elements/1.0/');/** * DC 1.1 Namespace */define('SIMPLEPIE_NAMESPACE_DC_11', 'http://purl.org/dc/elements/1.1/');/** * W3C Basic Geo (WGS84 lat/long) Vocabulary Namespace */define('SIMPLEPIE_NAMESPACE_W3C_BASIC_GEO', 'http://www.w3.org/2003/01/geo/wgs84_pos#');/** * GeoRSS Namespace */define('SIMPLEPIE_NAMESPACE_GEORSS', 'http://www.georss.org/georss');/** * Media RSS Namespace */define('SIMPLEPIE_NAMESPACE_MEDIARSS', 'http://search.yahoo.com/mrss/');/** * Wrong Media RSS Namespace */define('SIMPLEPIE_NAMESPACE_MEDIARSS_WRONG', 'http://search.yahoo.com/mrss');/** * iTunes RSS Namespace */define('SIMPLEPIE_NAMESPACE_ITUNES', 'http://www.itunes.com/dtds/podcast-1.0.dtd');/** * XHTML Namespace */define('SIMPLEPIE_NAMESPACE_XHTML', 'http://www.w3.org/1999/xhtml');/** * IANA Link Relations Registry */define('SIMPLEPIE_IANA_LINK_RELATIONS_REGISTRY', 'http://www.iana.org/assignments/relation/');/** * Whether we're running on PHP5 */define('SIMPLEPIE_PHP5', version_compare(PHP_VERSION, '5.0.0', '>='));/** * No file source */define('SIMPLEPIE_FILE_SOURCE_NONE', 0);/** * Remote file source */define('SIMPLEPIE_FILE_SOURCE_REMOTE', 1);/** * Local file source */define('SIMPLEPIE_FILE_SOURCE_LOCAL', 2);/** * fsockopen() file source */define('SIMPLEPIE_FILE_SOURCE_FSOCKOPEN', 4);/** * cURL file source */define('SIMPLEPIE_FILE_SOURCE_CURL', 8);/** * file_get_contents() file source */define('SIMPLEPIE_FILE_SOURCE_FILE_GET_CONTENTS', 16);/** * SimplePie * * @package SimplePie */class SimplePie{	/**	 * @var array Raw data	 * @access private	 */	var $data = array();	/**	 * @var mixed Error string	 * @access private	 */	var $error;	/**	 * @var object Instance of SimplePie_Sanitize (or other class)	 * @see SimplePie::set_sanitize_class()	 * @access private	 */	var $sanitize;	/**	 * @var string SimplePie Useragent	 * @see SimplePie::set_useragent()	 * @access private	 */	var $useragent = SIMPLEPIE_USERAGENT;	/**	 * @var string Feed URL	 * @see SimplePie::set_feed_url()	 * @access private	 */	var $feed_url;	/**	 * @var object Instance of SimplePie_File to use as a feed	 * @see SimplePie::set_file()	 * @access private	 */	var $file;	/**	 * @var string Raw feed data	 * @see SimplePie::set_raw_data()	 * @access private	 */	var $raw_data;	/**	 * @var int Timeout for fetching remote files	 * @see SimplePie::set_timeout()	 * @access private	 */	var $timeout = 10;	/**	 * @var bool Forces fsockopen() to be used for remote files instead	 * of cURL, even if a new enough version is installed	 * @see SimplePie::force_fsockopen()	 * @access private	 */	var $force_fsockopen = false;	/**	 * @var bool Force the given data/URL to be treated as a feed no matter what	 * it appears like	 * @see SimplePie::force_feed()	 * @access private	 */	var $force_feed = false;	/**	 * @var bool Enable/Disable XML dump	 * @see SimplePie::enable_xml_dump()	 * @access private	 */	var $xml_dump = false;	/**	 * @var bool Enable/Disable Caching	 * @see SimplePie::enable_cache()	 * @access private	 */	var $cache = true;	/**	 * @var int Cache duration (in seconds)	 * @see SimplePie::set_cache_duration()	 * @access private	 */	var $cache_duration = 3600;	/**	 * @var int Auto-discovery cache duration (in seconds)	 * @see SimplePie::set_autodiscovery_cache_duration()	 * @access private	 */	var $autodiscovery_cache_duration = 604800; // 7 Days.	/**	 * @var string Cache location (relative to executing script)	 * @see SimplePie::set_cache_location()	 * @access private	 */	var $cache_location = './cache';	/**	 * @var string Function that creates the cache filename	 * @see SimplePie::set_cache_name_function()	 * @access private	 */	var $cache_name_function = 'md5';	/**	 * @var bool Reorder feed by date descending	 * @see SimplePie::enable_order_by_date()	 * @access private	 */	var $order_by_date = true;	/**	 * @var mixed Force input encoding to be set to the follow value	 * (false, or anything type-cast to false, disables this feature)	 * @see SimplePie::set_input_encoding()	 * @access private	 */	var $input_encoding = false;	/**	 * @var int Feed Autodiscovery Level	 * @see SimplePie::set_autodiscovery_level()	 * @access private	 */	var $autodiscovery = SIMPLEPIE_LOCATOR_ALL;	/**	 * @var string Class used for caching feeds	 * @see SimplePie::set_cache_class()	 * @access private	 */	var $cache_class = 'SimplePie_Cache';	/**	 * @var string Class used for locating feeds	 * @see SimplePie::set_locator_class()	 * @access private	 */	var $locator_class = 'SimplePie_Locator';	/**	 * @var string Class used for parsing feeds	 * @see SimplePie::set_parser_class()	 * @access private	 */	var $parser_class = 'SimplePie_Parser';	/**	 * @var string Class used for fetching feeds	 * @see SimplePie::set_file_class()	 * @access private	 */	var $file_class = 'SimplePie_File';	/**	 * @var string Class used for items	 * @see SimplePie::set_item_class()	 * @access private	 */	var $item_class = 'SimplePie_Item';	/**	 * @var string Class used for authors	 * @see SimplePie::set_author_class()	 * @access private	 */	var $author_class = 'SimplePie_Author';	/**	 * @var string Class used for categories	 * @see SimplePie::set_category_class()	 * @access private	 */	var $category_class = 'SimplePie_Category';	/**	 * @var string Class used for enclosures	 * @see SimplePie::set_enclosures_class()	 * @access private	 */	var $enclosure_class = 'SimplePie_Enclosure';	/**	 * @var string Class used for Media RSS <media:text> captions	 * @see SimplePie::set_caption_class()	 * @access private	 */	var $caption_class = 'SimplePie_Caption';	/**	 * @var string Class used for Media RSS <media:copyright>	 * @see SimplePie::set_copyright_class()	 * @access private	 */	var $copyright_class = 'SimplePie_Copyright';	/**	 * @var string Class used for Media RSS <media:credit>	 * @see SimplePie::set_credit_class()	 * @access private	 */	var $credit_class = 'SimplePie_Credit';	/**	 * @var string Class used for Media RSS <media:rating>	 * @see SimplePie::set_rating_class()	 * @access private	 */	var $rating_class = 'SimplePie_Rating';	/**	 * @var string Class used for Media RSS <media:restriction>	 * @see SimplePie::set_restriction_class()	 * @access private	 */	var $restriction_class = 'SimplePie_Restriction';	/**	 * @var string Class used for content-type sniffing	 * @see SimplePie::set_content_type_sniffer_class()	 * @access private	 */	var $content_type_sniffer_class = 'SimplePie_Content_Type_Sniffer';	/**	 * @var string Class used for item sources.	 * @see SimplePie::set_source_class()	 * @access private	 */	var $source_class = 'SimplePie_Source';	/**	 * @var mixed Set javascript query string parameter (false, or	 * anything type-cast to false, disables this feature)	 * @see SimplePie::set_javascript()	 * @access private	 */	var $javascript = 'js';	/**	 * @var int Maximum number of feeds to check with autodiscovery	 * @see SimplePie::set_max_checked_feeds()	 * @access private	 */	var $max_checked_feeds = 10;	/**	 * @var array All the feeds found during the autodiscovery process	 * @see SimplePie::get_all_discovered_feeds()	 * @access private	 */	var $all_discovered_feeds = array();	/**	 * @var string Web-accessible path to the handler_favicon.php file.	 * @see SimplePie::set_favicon_handler()	 * @access private	 */	var $favicon_handler = '';	/**	 * @var string Web-accessible path to the handler_image.php file.	 * @see SimplePie::set_image_handler()	 * @access private	 */	var $image_handler = '';	/**	 * @var array Stores the URLs when multiple feeds are being initialized.	 * @see SimplePie::set_feed_url()	 * @access private	 */	var $multifeed_url = array();	/**	 * @var array Stores SimplePie objects when multiple feeds initialized.	 * @access private	 */	var $multifeed_objects = array();	/**	 * @var array Stores the get_object_vars() array for use with multifeeds.	 * @see SimplePie::set_feed_url()	 * @access private	 */	var $config_settings = null;	/**	 * @var integer Stores the number of items to return per-feed with multifeeds.	 * @see SimplePie::set_item_limit()	 * @access private	 */	var $item_limit = 0;	/**	 * @var array Stores the default attributes to be stripped by strip_attributes().	 * @see SimplePie::strip_attributes()	 * @access private	 */	var $strip_attributes = array('bgsound', 'class', 'expr', 'id', 'style', 'onclick', 'onerror', 'onfinish', 'onmouseover', 'onmouseout', 'onfocus', 'onblur', 'lowsrc', 'dynsrc');	/**	 * @var array Stores the default tags to be stripped by strip_htmltags().	 * @see SimplePie::strip_htmltags()	 * @access private	 */	var $strip_htmltags = array('base', 'blink', 'body', 'doctype', 'embed', 'font', 'form', 'frame', 'frameset', 'html', 'iframe', 'input', 'marquee', 'meta', 'noscript', 'object', 'param', 'script', 'style');	/**	 * The SimplePie class contains feed level data and options	 *	 * There are two ways that you can create a new SimplePie object. The first	 * is by passing a feed URL as a parameter to the SimplePie constructor	 * (as well as optionally setting the cache location and cache expiry). This	 * will initialise the whole feed with all of the default settings, and you	 * can begin accessing methods and properties immediately.	 *	 * The second way is to create the SimplePie object with no parameters	 * at all. This will enable you to set configuration options. After setting	 * them, you must initialise the feed using $feed->init(). At that point the	 * object's methods and properties will be available to you. This format is	 * what is used throughout this documentation.	 *	 * @access public	 * @since 1.0 Preview Release	 * @param string $feed_url This is the URL you want to parse.	 * @param string $cache_location This is where you want the cache to be stored.	 * @param int $cache_duration This is the number of seconds that you want to store the cache file for.	 */	function SimplePie($feed_url = null, $cache_location = null, $cache_duration = null)	{		// Other objects, instances created here so we can set options on them		$this->sanitize = new SimplePie_Sanitize;		// Set options if they're passed to the constructor		if ($cache_location !== null)		{			$this->set_cache_location($cache_location);		}		if ($cache_duration !== null)		{			$this->set_cache_duration($cache_duration);		}		// Only init the script if we're passed a feed URL		if ($feed_url !== null)		{			$this->set_feed_url($feed_url);			$this->init();		}	}	/**	 * Used for converting object to a string	 */	function __toString()	{		return md5(serialize($this->data));	}	/**	 * Remove items that link back to this before destroying this object	 */	function __destruct()	{		if ((version_compare(PHP_VERSION, '5.3', '<') || !gc_enabled()) && !ini_get('zend.ze1_compatibility_mode'))		{			if (!empty($this->data['items']))			{				foreach ($this->data['items'] as $item)				{					$item->__destruct();				}				unset($item, $this->data['items']);			}			if (!empty($this->data['ordered_items']))			{				foreach ($this->data['ordered_items'] as $item)				{					$item->__destruct();				}				unset($item, $this->data['ordered_items']);			}		}	}	/**	 * Force the given data/URL to be treated as a feed no matter what it	 * appears like	 *	 * @access public	 * @since 1.1	 * @param bool $enable Force the given data/URL to be treated as a feed	 */	function force_feed($enable = false)	{		$this->force_feed = (bool) $enable;	}	/**	 * This is the URL of the feed you want to parse.	 *	 * This allows you to enter the URL of the feed you want to parse, or the	 * website you want to try to use auto-discovery on. This takes priority	 * over any set raw data.	 *	 * You can set multiple feeds to mash together by passing an array instead	 * of a string for the $url. Remember that with each additional feed comes	 * additional processing and resources.	 *	 * @access public	 * @since 1.0 Preview Release	 * @param mixed $url This is the URL (or array of URLs) that you want to parse.	 * @see SimplePie::set_raw_data()	 */	function set_feed_url($url)	{		if (is_array($url))		{			$this->multifeed_url = array();			foreach ($url as $value)			{				$this->multifeed_url[] = SimplePie_Misc::fix_protocol($value, 1);			}		}		else		{			$this->feed_url = SimplePie_Misc::fix_protocol($url, 1);		}	}	/**	 * Provides an instance of SimplePie_File to use as a feed	 *	 * @access public	 * @param object &$file Instance of SimplePie_File (or subclass)	 * @return bool True on success, false on failure	 */	function set_file(&$file)	{		if (is_a($file, 'SimplePie_File'))		{			$this->feed_url = $file->url;			$this->file =& $file;			return true;		}		return false;	}	/**	 * Allows you to use a string of RSS/Atom data instead of a remote feed.	 *	 * If you have a feed available as a string in PHP, you can tell SimplePie	 * to parse that data string instead of a remote feed. Any set feed URL	 * takes precedence.	 *	 * @access public	 * @since 1.0 Beta 3	 * @param string $data RSS or Atom data as a string.	 * @see SimplePie::set_feed_url()	 */	function set_raw_data($data)	{		$this->raw_data = $data;	}	/**	 * Allows you to override the default timeout for fetching remote feeds.	 *	 * This allows you to change the maximum time the feed's server to respond	 * and send the feed back.	 *	 * @access public	 * @since 1.0 Beta 3	 * @param int $timeout The maximum number of seconds to spend waiting to retrieve a feed.	 */	function set_timeout($timeout = 10)	{		$this->timeout = (int) $timeout;	}	/**	 * Forces SimplePie to use fsockopen() instead of the preferred cURL	 * functions.	 *	 * @access public	 * @since 1.0 Beta 3	 * @param bool $enable Force fsockopen() to be used	 */	function force_fsockopen($enable = false)	{		$this->force_fsockopen = (bool) $enable;	}	/**	 * Outputs the raw XML content of the feed, after it has gone through	 * SimplePie's filters.	 *	 * Used only for debugging, this function will output the XML content as	 * text/xml. When SimplePie reads in a feed, it does a bit of cleaning up	 * before trying to parse it. Many parts of the feed are re-written in	 * memory, and in the end, you have a parsable feed. XML dump shows you the	 * actual XML that SimplePie tries to parse, which may or may not be very	 * different from the original feed.	 *	 * @access public	 * @since 1.0 Preview Release	 * @param bool $enable Enable XML dump	 */	function enable_xml_dump($enable = false)	{		$this->xml_dump = (bool) $enable;	}	/**	 * Enables/disables caching in SimplePie.	 *	 * This option allows you to disable caching all-together in SimplePie.	 * However, disabling the cache can lead to longer load times.	 *	 * @access public	 * @since 1.0 Preview Release	 * @param bool $enable Enable caching	 */	function enable_cache($enable = true)	{		$this->cache = (bool) $enable;	}	/**	 * Set the length of time (in seconds) that the contents of a feed	 * will be cached.	 *	 * @access public	 * @param int $seconds The feed content cache duration.	 */	function set_cache_duration($seconds = 3600)	{		$this->cache_duration = (int) $seconds;	}	/**	 * Set the length of time (in seconds) that the autodiscovered feed	 * URL will be cached.	 *	 * @access public	 * @param int $seconds The autodiscovered feed URL cache duration.	 */	function set_autodiscovery_cache_duration($seconds = 604800)	{		$this->autodiscovery_cache_duration = (int) $seconds;	}	/**	 * Set the file system location where the cached files should be stored.	 *	 * @access public	 * @param string $location The file system location.	 */	function set_cache_location($location = './cache')	{		$this->cache_location = (string) $location;	}	/**	 * Determines whether feed items should be sorted into reverse chronological order.	 *	 * @access public	 * @param bool $enable Sort as reverse chronological order.	 */	function enable_order_by_date($enable = true)	{		$this->order_by_date = (bool) $enable;	}	/**	 * Allows you to override the character encoding reported by the feed.	 *	 * @access public	 * @param string $encoding Character encoding.	 */	function set_input_encoding($encoding = false)	{		if ($encoding)		{			$this->input_encoding = (string) $encoding;		}		else		{			$this->input_encoding = false;		}	}	/**	 * Set how much feed autodiscovery to do	 *	 * @access public	 * @see SIMPLEPIE_LOCATOR_NONE	 * @see SIMPLEPIE_LOCATOR_AUTODISCOVERY	 * @see SIMPLEPIE_LOCATOR_LOCAL_EXTENSION	 * @see SIMPLEPIE_LOCATOR_LOCAL_BODY	 * @see SIMPLEPIE_LOCATOR_REMOTE_EXTENSION	 * @see SIMPLEPIE_LOCATOR_REMOTE_BODY	 * @see SIMPLEPIE_LOCATOR_ALL	 * @param int $level Feed Autodiscovery Level (level can be a	 * combination of the above constants, see bitwise OR operator)	 */	function set_autodiscovery_level($level = SIMPLEPIE_LOCATOR_ALL)	{		$this->autodiscovery = (int) $level;	}	/**	 * Allows you to change which class SimplePie uses for caching.	 * Useful when you are overloading or extending SimplePie's default classes.	 *	 * @access public	 * @param string $class Name of custom class.	 * @link http://php.net/manual/en/keyword.extends.php PHP4 extends documentation	 * @link http://php.net/manual/en/language.oop5.basic.php#language.oop5.basic.extends PHP5 extends documentation	 */	function set_cache_class($class = 'SimplePie_Cache')	{		if (SimplePie_Misc::is_subclass_of($class, 'SimplePie_Cache'))		{			$this->cache_class = $class;			return true;		}		return false;	}	/**	 * Allows you to change which class SimplePie uses for auto-discovery.	 * Useful when you are overloading or extending SimplePie's default classes.	 *	 * @access public	 * @param string $class Name of custom class.	 * @link http://php.net/manual/en/keyword.extends.php PHP4 extends documentation	 * @link http://php.net/manual/en/language.oop5.basic.php#language.oop5.basic.extends PHP5 extends documentation	 */	function set_locator_class($class = 'SimplePie_Locator')	{		if (SimplePie_Misc::is_subclass_of($class, 'SimplePie_Locator'))		{			$this->locator_class = $class;			return true;		}		return false;	}	/**	 * Allows you to change which class SimplePie uses for XML parsing.	 * Useful when you are overloading or extending SimplePie's default classes.	 *	 * @access public	 * @param string $class Name of custom class.	 * @link http://php.net/manual/en/keyword.extends.php PHP4 extends documentation	 * @link http://php.net/manual/en/language.oop5.basic.php#language.oop5.basic.extends PHP5 extends documentation	 */	function set_parser_class($class = 'SimplePie_Parser')	{		if (SimplePie_Misc::is_subclass_of($class, 'SimplePie_Parser'))		{			$this->parser_class = $class;			return true;		}		return false;	}	/**	 * Allows you to change which class SimplePie uses for remote file fetching.	 * Useful when you are overloading or extending SimplePie's default classes.	 *	 * @access public	 * @param string $class Name of custom class.	 * @link http://php.net/manual/en/keyword.extends.php PHP4 extends documentation	 * @link http://php.net/manual/en/language.oop5.basic.php#language.oop5.basic.extends PHP5 extends documentation	 */	function set_file_class($class = 'SimplePie_File')	{		if (SimplePie_Misc::is_subclass_of($class, 'SimplePie_File'))		{			$this->file_class = $class;			return true;		}		return false;	}	/**	 * Allows you to change which class SimplePie uses for data sanitization.	 * Useful when you are overloading or extending SimplePie's default classes.	 *	 * @access public	 * @param string $class Name of custom class.	 * @link http://php.net/manual/en/keyword.extends.php PHP4 extends documentation	 * @link http://php.net/manual/en/language.oop5.basic.php#language.oop5.basic.extends PHP5 extends documentation	 */	function set_sanitize_class($class = 'SimplePie_Sanitize')	{		if (SimplePie_Misc::is_subclass_of($class, 'SimplePie_Sanitize'))		{			$this->sanitize = new $class;			return true;		}		return false;	}	/**	 * Allows you to change which class SimplePie uses for handling feed items.	 * Useful when you are overloading or extending SimplePie's default classes.	 *	 * @access public	 * @param string $class Name of custom class.	 * @link http://php.net/manual/en/keyword.extends.php PHP4 extends documentation	 * @link http://php.net/manual/en/language.oop5.basic.php#language.oop5.basic.extends PHP5 extends documentation	 */	function set_item_class($class = 'SimplePie_Item')	{		if (SimplePie_Misc::is_subclass_of($class, 'SimplePie_Item'))		{			$this->item_class = $class;			return true;		}		return false;	}	/**	 * Allows you to change which class SimplePie uses for handling author data.	 * Useful when you are overloading or extending SimplePie's default classes.	 *	 * @access public	 * @param string $class Name of custom class.	 * @link http://php.net/manual/en/keyword.extends.php PHP4 extends documentation	 * @link http://php.net/manual/en/language.oop5.basic.php#language.oop5.basic.extends PHP5 extends documentation	 */	function set_author_class($class = 'SimplePie_Author')	{		if (SimplePie_Misc::is_subclass_of($class, 'SimplePie_Author'))		{			$this->author_class = $class;			return true;		}		return false;	}	/**	 * Allows you to change which class SimplePie uses for handling category data.	 * Useful when you are overloading or extending SimplePie's default classes.	 *	 * @access public	 * @param string $class Name of custom class.	 * @link http://php.net/manual/en/keyword.extends.php PHP4 extends documentation	 * @link http://php.net/manual/en/language.oop5.basic.php#language.oop5.basic.extends PHP5 extends documentation	 */	function set_category_class($class = 'SimplePie_Category')	{		if (SimplePie_Misc::is_subclass_of($class, 'SimplePie_Category'))		{			$this->category_class = $class;			return true;		}		return false;	}	/**	 * Allows you to change which class SimplePie uses for feed enclosures.	 * Useful when you are overloading or extending SimplePie's default classes.	 *	 * @access public	 * @param string $class Name of custom class.	 * @link http://php.net/manual/en/keyword.extends.php PHP4 extends documentation	 * @link http://php.net/manual/en/language.oop5.basic.php#language.oop5.basic.extends PHP5 extends documentation	 */	function set_enclosure_class($class = 'SimplePie_Enclosure')	{		if (SimplePie_Misc::is_subclass_of($class, 'SimplePie_Enclosure'))		{			$this->enclosure_class = $class;			return true;		}		return false;	}	/**	 * Allows you to change which class SimplePie uses for <media:text> captions	 * Useful when you are overloading or extending SimplePie's default classes.	 *	 * @access public	 * @param string $class Name of custom class.	 * @link http://php.net/manual/en/keyword.extends.php PHP4 extends documentation	 * @link http://php.net/manual/en/language.oop5.basic.php#language.oop5.basic.extends PHP5 extends documentation	 */	function set_caption_class($class = 'SimplePie_Caption')	{		if (SimplePie_Misc::is_subclass_of($class, 'SimplePie_Caption'))		{			$this->caption_class = $class;			return true;		}		return false;	}	/**	 * Allows you to change which class SimplePie uses for <media:copyright>	 * Useful when you are overloading or extending SimplePie's default classes.	 *	 * @access public	 * @param string $class Name of custom class.	 * @link http://php.net/manual/en/keyword.extends.php PHP4 extends documentation	 * @link http://php.net/manual/en/language.oop5.basic.php#language.oop5.basic.extends PHP5 extends documentation	 */	function set_copyright_class($class = 'SimplePie_Copyright')	{		if (SimplePie_Misc::is_subclass_of($class, 'SimplePie_Copyright'))		{			$this->copyright_class = $class;			return true;		}		return false;	}	/**	 * Allows you to change which class SimplePie uses for <media:credit>	 * Useful when you are overloading or extending SimplePie's default classes.	 *	 * @access public	 * @param string $class Name of custom class.	 * @link http://php.net/manual/en/keyword.extends.php PHP4 extends documentation	 * @link http://php.net/manual/en/language.oop5.basic.php#language.oop5.basic.extends PHP5 extends documentation	 */	function set_credit_class($class = 'SimplePie_Credit')	{		if (SimplePie_Misc::is_subclass_of($class, 'SimplePie_Credit'))		{			$this->credit_class = $class;			return true;		}		return false;	}	/**	 * Allows you to change which class SimplePie uses for <media:rating>	 * Useful when you are overloading or extending SimplePie's default classes.	 *	 * @access public	 * @param string $class Name of custom class.	 * @link http://php.net/manual/en/keyword.extends.php PHP4 extends documentation	 * @link http://php.net/manual/en/language.oop5.basic.php#language.oop5.basic.extends PHP5 extends documentation	 */	function set_rating_class($class = 'SimplePie_Rating')	{		if (SimplePie_Misc::is_subclass_of($class, 'SimplePie_Rating'))		{			$this->rating_class = $class;			return true;		}		return false;	}	/**	 * Allows you to change which class SimplePie uses for <media:restriction>	 * Useful when you are overloading or extending SimplePie's default classes.	 *	 * @access public	 * @param string $class Name of custom class.	 * @link http://php.net/manual/en/keyword.extends.php PHP4 extends documentation	 * @link http://php.net/manual/en/language.oop5.basic.php#language.oop5.basic.extends PHP5 extends documentation	 */	function set_restriction_class($class = 'SimplePie_Restriction')	{		if (SimplePie_Misc::is_subclass_of($class, 'SimplePie_Restriction'))		{			$this->restriction_class = $class;			return true;		}		return false;	}	/**	 * Allows you to change which class SimplePie uses for content-type sniffing.	 * Useful when you are overloading or extending SimplePie's default classes.	 *	 * @access public	 * @param string $class Name of custom class.	 * @link http://php.net/manual/en/keyword.extends.php PHP4 extends documentation	 * @link http://php.net/manual/en/language.oop5.basic.php#language.oop5.basic.extends PHP5 extends documentation	 */	function set_content_type_sniffer_class($class = 'SimplePie_Content_Type_Sniffer')	{		if (SimplePie_Misc::is_subclass_of($class, 'SimplePie_Content_Type_Sniffer'))		{			$this->content_type_sniffer_class = $class;			return true;		}		return false;	}	/**	 * Allows you to change which class SimplePie uses item sources.	 * Useful when you are overloading or extending SimplePie's default classes.	 *	 * @access public	 * @param string $class Name of custom class.	 * @link http://php.net/manual/en/keyword.extends.php PHP4 extends documentation	 * @link http://php.net/manual/en/language.oop5.basic.php#language.oop5.basic.extends PHP5 extends documentation	 */	function set_source_class($class = 'SimplePie_Source')	{		if (SimplePie_Misc::is_subclass_of($class, 'SimplePie_Source'))		{			$this->source_class = $class;			return true;		}		return false;	}	/**	 * Allows you to override the default user agent string.	 *	 * @access public	 * @param string $ua New user agent string.	 */	function set_useragent($ua = SIMPLEPIE_USERAGENT)	{		$this->useragent = (string) $ua;	}	/**	 * Set callback function to create cache filename with	 *	 * @access public	 * @param mixed $function Callback function	 */	function set_cache_name_function($function = 'md5')	{		if (is_callable($function))		{			$this->cache_name_function = $function;		}	}	/**	 * Set javascript query string parameter	 *	 * @access public	 * @param mixed $get Javascript query string parameter	 */	function set_javascript($get = 'js')	{		if ($get)		{			$this->javascript = (string) $get;		}		else		{			$this->javascript = false;		}	}	/**	 * Set options to make SP as fast as possible.  Forgoes a	 * substantial amount of data sanitization in favor of speed.	 *	 * @access public	 * @param bool $set Whether to set them or not	 */	function set_stupidly_fast($set = false)	{		if ($set)		{			$this->enable_order_by_date(false);			$this->remove_div(false);			$this->strip_comments(false);			$this->strip_htmltags(false);			$this->strip_attributes(false);			$this->set_image_handler(false);		}	}	/**	 * Set maximum number of feeds to check with autodiscovery	 *	 * @access public	 * @param int $max Maximum number of feeds to check	 */	function set_max_checked_feeds($max = 10)	{		$this->max_checked_feeds = (int) $max;	}	function remove_div($enable = true)	{		$this->sanitize->remove_div($enable);	}	function strip_htmltags($tags = '', $encode = null)	{		if ($tags === '')		{			$tags = $this->strip_htmltags;		}		$this->sanitize->strip_htmltags($tags);		if ($encode !== null)		{			$this->sanitize->encode_instead_of_strip($tags);		}	}	function encode_instead_of_strip($enable = true)	{		$this->sanitize->encode_instead_of_strip($enable);	}	function strip_attributes($attribs = '')	{		if ($attribs === '')		{			$attribs = $this->strip_attributes;		}		$this->sanitize->strip_attributes($attribs);	}	function set_output_encoding($encoding = 'UTF-8')	{		$this->sanitize->set_output_encoding($encoding);	}	function strip_comments($strip = false)	{		$this->sanitize->strip_comments($strip);	}	/**	 * Set element/attribute key/value pairs of HTML attributes	 * containing URLs that need to be resolved relative to the feed	 *	 * @access public	 * @since 1.0	 * @param array $element_attribute Element/attribute key/value pairs	 */	function set_url_replacements($element_attribute = array('a' => 'href', 'area' => 'href', 'blockquote' => 'cite', 'del' => 'cite', 'form' => 'action', 'img' => array('longdesc', 'src'), 'input' => 'src', 'ins' => 'cite', 'q' => 'cite'))	{		$this->sanitize->set_url_replacements($element_attribute);	}	/**	 * Set the handler to enable the display of cached favicons.	 *	 * @access public	 * @param str $page Web-accessible path to the handler_favicon.php file.	 * @param str $qs The query string that the value should be passed to.	 */	function set_favicon_handler($page = false, $qs = 'i')	{		if ($page !== false)		{			$this->favicon_handler = $page . '?' . $qs . '=';		}		else		{			$this->favicon_handler = '';		}	}	/**	 * Set the handler to enable the display of cached images.	 *	 * @access public	 * @param str $page Web-accessible path to the handler_image.php file.	 * @param str $qs The query string that the value should be passed to.	 */	function set_image_handler($page = false, $qs = 'i')	{		if ($page !== false)		{			$this->sanitize->set_image_handler($page . '?' . $qs . '=');		}		else		{			$this->image_handler = '';		}	}	/**	 * Set the limit for items returned per-feed with multifeeds.	 *	 * @access public	 * @param integer $limit The maximum number of items to return.	 */	function set_item_limit($limit = 0)	{		$this->item_limit = (int) $limit;	}	function init()	{		// Check absolute bare minimum requirements.		if ((function_exists('version_compare') && version_compare(PHP_VERSION, '4.3.0', '<')) || !extension_loaded('xml') || !extension_loaded('pcre'))		{			return false;		}		// Then check the xml extension is sane (i.e., libxml 2.7.x issue on PHP < 5.2.9 and libxml 2.7.0 to 2.7.2 on any version) if we don't have xmlreader.		elseif (!extension_loaded('xmlreader'))		{			static $xml_is_sane = null;			if ($xml_is_sane === null)			{				$parser_check = xml_parser_create();				xml_parse_into_struct($parser_check, '<foo>&amp;</foo>', $values);				xml_parser_free($parser_check);				$xml_is_sane = isset($values[0]['value']);			}			if (!$xml_is_sane)			{				return false;			}		}		if (isset($_GET[$this->javascript]))		{			SimplePie_Misc::output_javascript();			exit;		}		// Pass whatever was set with config options over to the sanitizer.		$this->sanitize->pass_cache_data($this->cache, $this->cache_location, $this->cache_name_function, $this->cache_class);		$this->sanitize->pass_file_data($this->file_class, $this->timeout, $this->useragent, $this->force_fsockopen);		if ($this->feed_url !== null || $this->raw_data !== null)		{			$this->data = array();			$this->multifeed_objects = array();			$cache = false;			if ($this->feed_url !== null)			{				$parsed_feed_url = SimplePie_Misc::parse_url($this->feed_url);				// Decide whether to enable caching				if ($this->cache && $parsed_feed_url['scheme'] !== '')				{					$cache = call_user_func(array($this->cache_class, 'create'), $this->cache_location, call_user_func($this->cache_name_function, $this->feed_url), 'spc');				}				// If it's enabled and we don't want an XML dump, use the cache				if ($cache && !$this->xml_dump)				{					// Load the Cache					$this->data = $cache->load();					if (!empty($this->data))					{						// If the cache is for an outdated build of SimplePie						if (!isset($this->data['build']) || $this->data['build'] !== SIMPLEPIE_BUILD)						{							$cache->unlink();							$this->data = array();						}						// If we've hit a collision just rerun it with caching disabled						elseif (isset($this->data['url']) && $this->data['url'] !== $this->feed_url)						{							$cache = false;							$this->data = array();						}						// If we've got a non feed_url stored (if the page isn't actually a feed, or is a redirect) use that URL.						elseif (isset($this->data['feed_url']))						{							// If the autodiscovery cache is still valid use it.							if ($cache->mtime() + $this->autodiscovery_cache_duration > time())							{								// Do not need to do feed autodiscovery yet.								if ($this->data['feed_url'] === $this->data['url'])								{									$cache->unlink();									$this->data = array();								}								else								{									$this->set_feed_url($this->data['feed_url']);									return $this->init();								}							}						}						// Check if the cache has been updated						elseif ($cache->mtime() + $this->cache_duration < time())						{							// If we have last-modified and/or etag set							if (isset($this->data['headers']['last-modified']) || isset($this->data['headers']['etag']))							{								$headers = array();								if (isset($this->data['headers']['last-modified']))								{									$headers['if-modified-since'] = $this->data['headers']['last-modified'];								}								if (isset($this->data['headers']['etag']))								{									$headers['if-none-match'] = '"' . $this->data['headers']['etag'] . '"';								}								$file = new $this->file_class($this->feed_url, $this->timeout/10, 5, $headers, $this->useragent, $this->force_fsockopen);								if ($file->success)								{									if ($file->status_code === 304)									{										$cache->touch();										return true;									}									else									{										$headers = $file->headers;									}								}								else								{									unset($file);								}							}						}						// If the cache is still valid, just return true						else						{							return true;						}					}					// If the cache is empty, delete it					else					{						$cache->unlink();						$this->data = array();					}				}				// If we don't already have the file (it'll only exist if we've opened it to check if the cache has been modified), open it.				if (!isset($file))				{					if (is_a($this->file, 'SimplePie_File') && $this->file->url === $this->feed_url)					{						$file =& $this->file;					}					else					{						$file = new $this->file_class($this->feed_url, $this->timeout, 5, null, $this->useragent, $this->force_fsockopen);					}				}				// If the file connection has an error, set SimplePie::error to that and quit				if (!$file->success && !($file->method & SIMPLEPIE_FILE_SOURCE_REMOTE === 0 || ($file->status_code === 200 || $file->status_code > 206 && $file->status_code < 300)))				{					$this->error = $file->error;					if (!empty($this->data))					{						return true;					}					else					{						return false;					}				}				if (!$this->force_feed)				{					// Check if the supplied URL is a feed, if it isn't, look for it.					$locate = new $this->locator_class($file, $this->timeout, $this->useragent, $this->file_class, $this->max_checked_feeds, $this->content_type_sniffer_class);					if (!$locate->is_feed($file))					{						// We need to unset this so that if SimplePie::set_file() has been called that object is untouched						unset($file);						if ($file = $locate->find($this->autodiscovery, $this->all_discovered_feeds))						{							if ($cache)							{								$this->data = array('url' => $this->feed_url, 'feed_url' => $file->url, 'build' => SIMPLEPIE_BUILD);								if (!$cache->save($this))								{									trigger_error("$this->cache_location is not writeable", E_USER_WARNING);								}								$cache = call_user_func(array($this->cache_class, 'create'), $this->cache_location, call_user_func($this->cache_name_function, $file->url), 'spc');							}							$this->feed_url = $file->url;						}						else						{							$this->error = "A feed could not be found at $this->feed_url";							SimplePie_Misc::error($this->error, E_USER_NOTICE, __FILE__, __LINE__);							return false;						}					}					$locate = null;				}				$headers = $file->headers;				$data = $file->body;				$sniffer = new $this->content_type_sniffer_class($file);				$sniffed = $sniffer->get_type();			}			else			{				$data = $this->raw_data;			}			// Set up array of possible encodings			$encodings = array();			// First check to see if input has been overridden.			if ($this->input_encoding !== false)			{				$encodings[] = $this->input_encoding;			}			$application_types = array('application/xml', 'application/xml-dtd', 'application/xml-external-parsed-entity');			$text_types = array('text/xml', 'text/xml-external-parsed-entity');			// RFC 3023 (only applies to sniffed content)			if (isset($sniffed))			{				if (in_array($sniffed, $application_types) || substr($sniffed, 0, 12) === 'application/' && substr($sniffed, -4) === '+xml')				{					if (isset($headers['content-type']) && preg_match('/;\x20?charset=([^;]*)/i', $headers['content-type'], $charset))					{						$encodings[] = strtoupper($charset[1]);					}					$encodings = array_merge($encodings, SimplePie_Misc::xml_encoding($data));					$encodings[] = 'UTF-8';				}				elseif (in_array($sniffed, $text_types) || substr($sniffed, 0, 5) === 'text/' && substr($sniffed, -4) === '+xml')				{					if (isset($headers['content-type']) && preg_match('/;\x20?charset=([^;]*)/i', $headers['content-type'], $charset))					{						$encodings[] = $charset[1];					}					$encodings[] = 'US-ASCII';				}				// Text MIME-type default				elseif (substr($sniffed, 0, 5) === 'text/')				{					$encodings[] = 'US-ASCII';				}			}			// Fallback to XML 1.0 Appendix F.1/UTF-8/ISO-8859-1			$encodings = array_merge($encodings, SimplePie_Misc::xml_encoding($data));			$encodings[] = 'UTF-8';			$encodings[] = 'ISO-8859-1';			// There's no point in trying an encoding twice			$encodings = array_unique($encodings);			// If we want the XML, just output that with the most likely encoding and quit			if ($this->xml_dump)			{				header('Content-type: text/xml; charset=' . $encodings[0]);				echo $data;				exit;			}			// Loop through each possible encoding, till we return something, or run out of possibilities			foreach ($encodings as $encoding)			{				// Change the encoding to UTF-8 (as we always use UTF-8 internally)				if ($utf8_data = SimplePie_Misc::change_encoding($data, $encoding, 'UTF-8'))				{					// Create new parser					$parser = new $this->parser_class();					// If it's parsed fine					if ($parser->parse($utf8_data, 'UTF-8'))					{						$this->data = $parser->get_data();						if ($this->get_type() & ~SIMPLEPIE_TYPE_NONE)						{							if (isset($headers))							{								$this->data['headers'] = $headers;							}							$this->data['build'] = SIMPLEPIE_BUILD;							// Cache the file if caching is enabled							if ($cache && !$cache->save($this))							{								trigger_error("$cache->name is not writeable", E_USER_WARNING);							}							return true;						}						else						{							$this->error = "A feed could not be found at $this->feed_url";							SimplePie_Misc::error($this->error, E_USER_NOTICE, __FILE__, __LINE__);							return false;						}					}				}			}			if(isset($parser))			{				// We have an error, just set SimplePie_Misc::error to it and quit				$this->error = sprintf('XML error: %s at line %d, column %d', $parser->get_error_string(), $parser->get_current_line(), $parser->get_current_column());			}			else			{				$this->error = 'The data could not be converted to UTF-8';			}			SimplePie_Misc::error($this->error, E_USER_NOTICE, __FILE__, __LINE__);			return false;		}		elseif (!empty($this->multifeed_url))		{			$i = 0;			$success = 0;			$this->multifeed_objects = array();			foreach ($this->multifeed_url as $url)			{				if (SIMPLEPIE_PHP5)				{					// This keyword needs to defy coding standards for PHP4 compatibility					$this->multifeed_objects[$i] = clone($this);				}				else				{					$this->multifeed_objects[$i] = $this;				}				$this->multifeed_objects[$i]->set_feed_url($url);				$success |= $this->multifeed_objects[$i]->init();				$i++;			}			return (bool) $success;		}		else		{			return false;		}	}	/**	 * Return the error message for the occured error	 *	 * @access public	 * @return string Error message	 */	function error()	{		return $this->error;	}	function get_encoding()	{		return $this->sanitize->output_encoding;	}	function handle_content_type($mime = 'text/html')	{		if (!headers_sent())		{			$header = "Content-type: $mime;";			if ($this->get_encoding())			{				$header .= ' charset=' . $this->get_encoding();			}			else			{				$header .= ' charset=UTF-8';			}			header($header);		}	}	function get_type()	{		if (!isset($this->data['type']))		{			$this->data['type'] = SIMPLEPIE_TYPE_ALL;			if (isset($this->data['child'][SIMPLEPIE_NAMESPACE_ATOM_10]['feed']))			{				$this->data['type'] &= SIMPLEPIE_TYPE_ATOM_10;			}			elseif (isset($this->data['child'][SIMPLEPIE_NAMESPACE_ATOM_03]['feed']))			{				$this->data['type'] &= SIMPLEPIE_TYPE_ATOM_03;			}			elseif (isset($this->data['child'][SIMPLEPIE_NAMESPACE_RDF]['RDF']))			{				if (isset($this->data['child'][SIMPLEPIE_NAMESPACE_RDF]['RDF'][0]['child'][SIMPLEPIE_NAMESPACE_RSS_10]['channel'])				|| isset($this->data['child'][SIMPLEPIE_NAMESPACE_RDF]['RDF'][0]['child'][SIMPLEPIE_NAMESPACE_RSS_10]['image'])				|| isset($this->data['child'][SIMPLEPIE_NAMESPACE_RDF]['RDF'][0]['child'][SIMPLEPIE_NAMESPACE_RSS_10]['item'])				|| isset($this->data['child'][SIMPLEPIE_NAMESPACE_RDF]['RDF'][0]['child'][SIMPLEPIE_NAMESPACE_RSS_10]['textinput']))				{					$this->data['type'] &= SIMPLEPIE_TYPE_RSS_10;				}				if (isset($this->data['child'][SIMPLEPIE_NAMESPACE_RDF]['RDF'][0]['child'][SIMPLEPIE_NAMESPACE_RSS_090]['channel'])				|| isset($this->data['child'][SIMPLEPIE_NAMESPACE_RDF]['RDF'][0]['child'][SIMPLEPIE_NAMESPACE_RSS_090]['image'])				|| isset($this->data['child'][SIMPLEPIE_NAMESPACE_RDF]['RDF'][0]['child'][SIMPLEPIE_NAMESPACE_RSS_090]['item'])				|| isset($this->data['child'][SIMPLEPIE_NAMESPACE_RDF]['RDF'][0]['child'][SIMPLEPIE_NAMESPACE_RSS_090]['textinput']))				{					$this->data['type'] &= SIMPLEPIE_TYPE_RSS_090;				}			}			elseif (isset($this->data['child'][SIMPLEPIE_NAMESPACE_RSS_20]['rss']))			{				$this->data['type'] &= SIMPLEPIE_TYPE_RSS_ALL;				if (isset($this->data['child'][SIMPLEPIE_NAMESPACE_RSS_20]['rss'][0]['attribs']['']['version']))				{					switch (trim($this->data['child'][SIMPLEPIE_NAMESPACE_RSS_20]['rss'][0]['attribs']['']['version']))					{						case '0.91':							$this->data['type'] &= SIMPLEPIE_TYPE_RSS_091;							if (isset($this->data['child'][SIMPLEPIE_NAMESPACE_RSS_20]['rss'][0]['child'][SIMPLEPIE_NAMESPACE_RSS_20]['skiphours']['hour'][0]['data']))							{								switch (trim($this->data['child'][SIMPLEPIE_NAMESPACE_RSS_20]['rss'][0]['child'][SIMPLEPIE_NAMESPACE_RSS_20]['skiphours']['hour'][0]['data']))								{									case '0':										$this->data['type'] &= SIMPLEPIE_TYPE_RSS_091_NETSCAPE;										break;									case '24':										$this->data['type'] &= SIMPLEPIE_TYPE_RSS_091_USERLAND;										break;								}							}							break;						case '0.92':							$this->data['type'] &= SIMPLEPIE_TYPE_RSS_092;							break;						case '0.93':							$this->data['type'] &= SIMPLEPIE_TYPE_RSS_093;							break;						case '0.94':							$this->data['type'] &= SIMPLEPIE_TYPE_RSS_094;							break;						case '2.0':							$this->data['type'] &= SIMPLEPIE_TYPE_RSS_20;							break;					}				}			}			else			{				$this->data['type'] = SIMPLEPIE_TYPE_NONE;			}		}		return $this->data['type'];	}	/**	 * Returns the URL for the favicon of the feed's website.	 *	 * @todo Cache atom:icon	 * @access public	 * @since 1.0	 */	function get_favicon()	{		if ($return = $this->get_channel_tags(SIMPLEPIE_NAMESPACE_ATOM_10, 'icon'))		{			return $this->sanitize($return[0]['data'], SIMPLEPIE_CONSTRUCT_IRI, $this->get_base($return[0]));		}		elseif (($url = $this->get_link()) !== null && preg_match('/^http(s)?:\/\//i', $url))		{			$favicon = SimplePie_Misc::absolutize_url('/favicon.ico', $url);			if ($this->cache && $this->favicon_handler)			{				$favicon_filename = call_user_func($this->cache_name_function, $favicon);				$cache = call_user_func(array($this->cache_class, 'create'), $this->cache_location, $favicon_filename, 'spi');				if ($cache->load())				{					return $this->sanitize($this->favicon_handler . $favicon_filename, SIMPLEPIE_CONSTRUCT_IRI);				}				else				{					$file = new $this->file_class($favicon, $this->timeout / 10, 5, array('X-FORWARDED-FOR' => $_SERVER['REMOTE_ADDR']), $this->useragent, $this->force_fsockopen);					if ($file->success && ($file->method & SIMPLEPIE_FILE_SOURCE_REMOTE === 0 || ($file->status_code === 200 || $file->status_code > 206 && $file->status_code < 300)) && strlen($file->body) > 0)					{						$sniffer = new $this->content_type_sniffer_class($file);						if (substr($sniffer->get_type(), 0, 6) === 'image/')						{							if ($cache->save(array('headers' => $file->headers, 'body' => $file->body)))							{								return $this->sanitize($this->favicon_handler . $favicon_filename, SIMPLEPIE_CONSTRUCT_IRI);							}							else							{								trigger_error("$cache->name is not writeable", E_USER_WARNING);								return $this->sanitize($favicon, SIMPLEPIE_CONSTRUCT_IRI);							}						}						// not an image						else						{							return false;						}					}				}			}			else			{				return $this->sanitize($favicon, SIMPLEPIE_CONSTRUCT_IRI);			}		}		return false;	}	/**	 * @todo If we have a perm redirect we should return the new URL	 * @todo When we make the above change, let's support <itunes:new-feed-url> as well	 * @todo Also, |atom:link|@rel=self	 */	function subscribe_url()	{		if ($this->feed_url !== null)		{			return $this->sanitize($this->feed_url, SIMPLEPIE_CONSTRUCT_IRI);		}		else		{			return null;		}	}	function subscribe_feed()	{		if ($this->feed_url !== null)		{			return $this->sanitize(SimplePie_Misc::fix_protocol($this->feed_url, 2), SIMPLEPIE_CONSTRUCT_IRI);		}		else		{			return null;		}	}	function subscribe_outlook()	{		if ($this->feed_url !== null)		{			return $this->sanitize('outlook' . SimplePie_Misc::fix_protocol($this->feed_url, 2), SIMPLEPIE_CONSTRUCT_IRI);		}		else		{			return null;		}	}	function subscribe_podcast()	{		if ($this->feed_url !== null)		{			return $this->sanitize(SimplePie_Misc::fix_protocol($this->feed_url, 3), SIMPLEPIE_CONSTRUCT_IRI);		}		else		{			return null;		}	}	function subscribe_itunes()	{		if ($this->feed_url !== null)		{			return $this->sanitize(SimplePie_Misc::fix_protocol($this->feed_url, 4), SIMPLEPIE_CONSTRUCT_IRI);		}		else		{			return null;		}	}	/**	 * Creates the subscribe_* methods' return data	 *	 * @access private	 * @param string $feed_url String to prefix to the feed URL	 * @param string $site_url String to prefix to the site URL (and	 * suffix to the feed URL)	 * @return mixed URL if feed exists, false otherwise	 */	function subscribe_service($feed_url, $site_url = null)	{		if ($this->subscribe_url())		{			$return = $feed_url . rawurlencode($this->feed_url);			if ($site_url !== null && $this->get_link() !== null)			{				$return .= $site_url . rawurlencode($this->get_link());			}			return $this->sanitize($return, SIMPLEPIE_CONSTRUCT_IRI);		}		else		{			return null;		}	}	function subscribe_aol()	{		return $this->subscribe_service('http://feeds.my.aol.com/add.jsp?url=');	}	function subscribe_bloglines()	{		return $this->subscribe_service('http://www.bloglines.com/sub/');	}	function subscribe_eskobo()	{		return $this->subscribe_service('http://www.eskobo.com/?AddToMyPage=');	}	function subscribe_feedfeeds()	{		return $this->subscribe_service('http://www.feedfeeds.com/add?feed=');	}	function subscribe_feedster()	{		return $this->subscribe_service('http://www.feedster.com/myfeedster.php?action=addrss&confirm=no&rssurl=');	}	function subscribe_google()	{		return $this->subscribe_service('http://fusion.google.com/add?feedurl=');	}	function subscribe_gritwire()	{		return $this->subscribe_service('http://my.gritwire.com/feeds/addExternalFeed.aspx?FeedUrl=');	}	function subscribe_msn()	{		return $this->subscribe_service('http://my.msn.com/addtomymsn.armx?id=rss&ut=', '&ru=');	}	function subscribe_netvibes()	{		return $this->subscribe_service('http://www.netvibes.com/subscribe.php?url=');	}	function subscribe_newsburst()	{		return $this->subscribe_service('http://www.newsburst.com/Source/?add=');	}	function subscribe_newsgator()	{		return $this->subscribe_service('http://www.newsgator.com/ngs/subscriber/subext.aspx?url=');	}	function subscribe_odeo()	{		return $this->subscribe_service('http://www.odeo.com/listen/subscribe?feed=');	}	function subscribe_podnova()	{		return $this->subscribe_service('http://www.podnova.com/index_your_podcasts.srf?action=add&url=');	}	function subscribe_rojo()	{		return $this->subscribe_service('http://www.rojo.com/add-subscription?resource=');	}	function subscribe_yahoo()	{		return $this->subscribe_service('http://add.my.yahoo.com/rss?url=');	}	function get_feed_tags($namespace, $tag)	{		$type = $this->get_type();		if ($type & SIMPLEPIE_TYPE_ATOM_10)		{			if (isset($this->data['child'][SIMPLEPIE_NAMESPACE_ATOM_10]['feed'][0]['child'][$namespace][$tag]))			{				return $this->data['child'][SIMPLEPIE_NAMESPACE_ATOM_10]['feed'][0]['child'][$namespace][$tag];			}		}		if ($type & SIMPLEPIE_TYPE_ATOM_03)		{			if (isset($this->data['child'][SIMPLEPIE_NAMESPACE_ATOM_03]['feed'][0]['child'][$namespace][$tag]))			{				return $this->data['child'][SIMPLEPIE_NAMESPACE_ATOM_03]['feed'][0]['child'][$namespace][$tag];			}		}		if ($type & SIMPLEPIE_TYPE_RSS_RDF)		{			if (isset($this->data['child'][SIMPLEPIE_NAMESPACE_RDF]['RDF'][0]['child'][$namespace][$tag]))			{				return $this->data['child'][SIMPLEPIE_NAMESPACE_RDF]['RDF'][0]['child'][$namespace][$tag];			}		}		if ($type & SIMPLEPIE_TYPE_RSS_SYNDICATION)		{			if (isset($this->data['child'][SIMPLEPIE_NAMESPACE_RSS_20]['rss'][0]['child'][$namespace][$tag]))			{				return $this->data['child'][SIMPLEPIE_NAMESPACE_RSS_20]['rss'][0]['child'][$namespace][$tag];			}		}		return null;	}	function get_channel_tags($namespace, $tag)	{		$type = $this->get_type();		if ($type & SIMPLEPIE_TYPE_ATOM_ALL)		{			if ($return = $this->get_feed_tags($namespace, $tag))			{				return $return;			}		}		if ($type & SIMPLEPIE_TYPE_RSS_10)		{			if ($channel = $this->get_feed_tags(SIMPLEPIE_NAMESPACE_RSS_10, 'channel'))			{				if (isset($channel[0]['child'][$namespace][$tag]))				{					return $channel[0]['child'][$namespace][$tag];				}			}		}		if ($type & SIMPLEPIE_TYPE_RSS_090)		{			if ($channel = $this->get_feed_tags(SIMPLEPIE_NAMESPACE_RSS_090, 'channel'))			{				if (isset($channel[0]['child'][$namespace][$tag]))				{					return $channel[0]['child'][$namespace][$tag];				}			}		}		if ($type & SIMPLEPIE_TYPE_RSS_SYNDICATION)		{			if ($channel = $this->get_feed_tags(SIMPLEPIE_NAMESPACE_RSS_20, 'channel'))			{				if (isset($channel[0]['child'][$namespace][$tag]))				{					return $channel[0]['child'][$namespace][$tag];				}			}		}		return null;	}	function get_image_tags($namespace, $tag)	{		$type = $this->get_type();		if ($type & SIMPLEPIE_TYPE_RSS_10)		{			if ($image = $this->get_feed_tags(SIMPLEPIE_NAMESPACE_RSS_10, 'image'))			{				if (isset($image[0]['child'][$namespace][$tag]))				{					return $image[0]['child'][$namespace][$tag];				}			}		}		if ($type & SIMPLEPIE_TYPE_RSS_090)		{			if ($image = $this->get_feed_tags(SIMPLEPIE_NAMESPACE_RSS_090, 'image'))			{				if (isset($image[0]['child'][$namespace][$tag]))				{					return $image[0]['child'][$namespace][$tag];				}			}		}		if ($type & SIMPLEPIE_TYPE_RSS_SYNDICATION)		{			if ($image = $this->get_channel_tags(SIMPLEPIE_NAMESPACE_RSS_20, 'image'))			{				if (isset($image[0]['child'][$namespace][$tag]))				{					return $image[0]['child'][$namespace][$tag];				}			}		}		return null;	}	function get_base($element = array())	{		if (!($this->get_type() & SIMPLEPIE_TYPE_RSS_SYNDICATION) && !empty($element['xml_base_explicit']) && isset($element['xml_base']))		{			return $element['xml_base'];		}		elseif ($this->get_link() !== null)		{			return $this->get_link();		}		else		{			return $this->subscribe_url();		}	}	function sanitize($data, $type, $base = '')	{		return $this->sanitize->sanitize($data, $type, $base);	}	function get_title()	{		if ($return = $this->get_channel_tags(SIMPLEPIE_NAMESPACE_ATOM_10, 'title'))		{			return $this->sanitize($return[0]['data'], SimplePie_Misc::atom_10_construct_type($return[0]['attribs']), $this->get_base($return[0]));		}		elseif ($return = $this->get_channel_tags(SIMPLEPIE_NAMESPACE_ATOM_03, 'title'))		{			return $this->sanitize($return[0]['data'], SimplePie_Misc::atom_03_construct_type($return[0]['attribs']), $this->get_base($return[0]));		}		elseif ($return = $this->get_channel_tags(SIMPLEPIE_NAMESPACE_RSS_10, 'title'))		{			return $this->sanitize($return[0]['data'], SIMPLEPIE_CONSTRUCT_MAYBE_HTML, $this->get_base($return[0]));		}		elseif ($return = $this->get_channel_tags(SIMPLEPIE_NAMESPACE_RSS_090, 'title'))		{			return $this->sanitize($return[0]['data'], SIMPLEPIE_CONSTRUCT_MAYBE_HTML, $this->get_base($return[0]));		}		elseif ($return = $this->get_channel_tags(SIMPLEPIE_NAMESPACE_RSS_20, 'title'))		{			return $this->sanitize($return[0]['data'], SIMPLEPIE_CONSTRUCT_MAYBE_HTML, $this->get_base($return[0]));		}		elseif ($return = $this->get_channel_tags(SIMPLEPIE_NAMESPACE_DC_11, 'title'))		{			return $this->sanitize($return[0]['data'], SIMPLEPIE_CONSTRUCT_TEXT);		}		elseif ($return = $this->get_channel_tags(SIMPLEPIE_NAMESPACE_DC_10, 'title'))		{			return $this->sanitize($return[0]['data'], SIMPLEPIE_CONSTRUCT_TEXT);		}		else		{			return null;		}	}	function get_category($key = 0)	{		$categories = $this->get_categories();		if (isset($categories[$key]))		{			return $categories[$key];		}		else		{			return null;		}	}	function get_categories()	{		$categories = array();		foreach ((array) $this->get_channel_tags(SIMPLEPIE_NAMESPACE_ATOM_10, 'category') as $category)		{			$term = null;			$scheme = null;			$label = null;			if (isset($category['attribs']['']['term']))			{				$term = $this->sanitize($category['attribs']['']['term'], SIMPLEPIE_CONSTRUCT_TEXT);			}			if (isset($category['attribs']['']['scheme']))			{				$scheme = $this->sanitize($category['attribs']['']['scheme'], SIMPLEPIE_CONSTRUCT_TEXT);			}			if (isset($category['attribs']['']['label']))			{				$label = $this->sanitize($category['attribs']['']['label'], SIMPLEPIE_CONSTRUCT_TEXT);			}			$categories[] = new $this->category_class($term, $scheme, $label);		}		foreach ((array) $this->get_channel_tags(SIMPLEPIE_NAMESPACE_RSS_20, 'category') as $category)		{			// This is really the label, but keep this as the term also for BC.			// Label will also work on retrieving because that falls back to term.			$term = $this->sanitize($category['data'], SIMPLEPIE_CONSTRUCT_TEXT);			if (isset($category['attribs']['']['domain']))			{				$scheme = $this->sanitize($category['attribs']['']['domain'], SIMPLEPIE_CONSTRUCT_TEXT);			}			else			{				$scheme = null;			}			$categories[] = new $this->category_class($term, $scheme, null);		}		foreach ((array) $this->get_channel_tags(SIMPLEPIE_NAMESPACE_DC_11, 'subject') as $category)		{			$categories[] = new $this->category_class($this->sanitize($category['data'], SIMPLEPIE_CONSTRUCT_TEXT), null, null);		}		foreach ((array) $this->get_channel_tags(SIMPLEPIE_NAMESPACE_DC_10, 'subject') as $category)		{			$categories[] = new $this->category_class($this->sanitize($category['data'], SIMPLEPIE_CONSTRUCT_TEXT), null, null);		}		if (!empty($categories))		{			return SimplePie_Misc::array_unique($categories);		}		else		{			return null;		}	}	function get_author($key = 0)	{		$authors = $this->get_authors();		if (isset($authors[$key]))		{			return $authors[$key];		}		else		{			return null;		}	}	function get_authors()	{		$authors = array();		foreach ((array) $this->get_channel_tags(SIMPLEPIE_NAMESPACE_ATOM_10, 'author') as $author)		{			$name = null;			$uri = null;			$email = null;			if (isset($author['child'][SIMPLEPIE_NAMESPACE_ATOM_10]['name'][0]['data']))			{				$name = $this->sanitize($author['child'][SIMPLEPIE_NAMESPACE_ATOM_10]['name'][0]['data'], SIMPLEPIE_CONSTRUCT_TEXT);			}			if (isset($author['child'][SIMPLEPIE_NAMESPACE_ATOM_10]['uri'][0]['data']))			{				$uri = $this->sanitize($author['child'][SIMPLEPIE_NAMESPACE_ATOM_10]['uri'][0]['data'], SIMPLEPIE_CONSTRUCT_IRI, $this->get_base($author['child'][SIMPLEPIE_NAMESPACE_ATOM_10]['uri'][0]));			}			if (isset($author['child'][SIMPLEPIE_NAMESPACE_ATOM_10]['email'][0]['data']))			{				$email = $this->sanitize($author['child'][SIMPLEPIE_NAMESPACE_ATOM_10]['email'][0]['data'], SIMPLEPIE_CONSTRUCT_TEXT);			}			if ($name !== null || $email !== null || $uri !== null)			{				$authors[] = new $this->author_class($name, $uri, $email);			}		}		if ($author = $this->get_channel_tags(SIMPLEPIE_NAMESPACE_ATOM_03, 'author'))		{			$name = null;			$url = null;			$email = null;			if (isset($author[0]['child'][SIMPLEPIE_NAMESPACE_ATOM_03]['name'][0]['data']))			{				$name = $this->sanitize($author[0]['child'][SIMPLEPIE_NAMESPACE_ATOM_03]['name'][0]['data'], SIMPLEPIE_CONSTRUCT_TEXT);			}			if (isset($author[0]['child'][SIMPLEPIE_NAMESPACE_ATOM_03]['url'][0]['data']))			{				$url = $this->sanitize($author[0]['child'][SIMPLEPIE_NAMESPACE_ATOM_03]['url'][0]['data'], SIMPLEPIE_CONSTRUCT_IRI, $this->get_base($author[0]['child'][SIMPLEPIE_NAMESPACE_ATOM_03]['url'][0]));			}			if (isset($author[0]['child'][SIMPLEPIE_NAMESPACE_ATOM_03]['email'][0]['data']))			{				$email = $this->sanitize($author[0]['child'][SIMPLEPIE_NAMESPACE_ATOM_03]['email'][0]['data'], SIMPLEPIE_CONSTRUCT_TEXT);			}			if ($name !== null || $email !== null || $url !== null)			{				$authors[] = new $this->author_class($name, $url, $email);			}		}		foreach ((array) $this->get_channel_tags(SIMPLEPIE_NAMESPACE_DC_11, 'creator') as $author)		{			$authors[] = new $this->author_class($this->sanitize($author['data'], SIMPLEPIE_CONSTRUCT_TEXT), null, null);		}		foreach ((array) $this->get_channel_tags(SIMPLEPIE_NAMESPACE_DC_10, 'creator') as $author)		{			$authors[] = new $this->author_class($this->sanitize($author['data'], SIMPLEPIE_CONSTRUCT_TEXT), null, null);		}		foreach ((array) $this->get_channel_tags(SIMPLEPIE_NAMESPACE_ITUNES, 'author') as $author)		{			$authors[] = new $this->author_class($this->sanitize($author['data'], SIMPLEPIE_CONSTRUCT_TEXT), null, null);		}		if (!empty($authors))		{			return SimplePie_Misc::array_unique($authors);		}		else		{			return null;		}	}	function get_contributor($key = 0)	{		$contributors = $this->get_contributors();		if (isset($contributors[$key]))		{			return $contributors[$key];		}		else		{			return null;		}	}	function get_contributors()	{		$contributors = array();		foreach ((array) $this->get_channel_tags(SIMPLEPIE_NAMESPACE_ATOM_10, 'contributor') as $contributor)		{			$name = null;			$uri = null;			$email = null;			if (isset($contributor['child'][SIMPLEPIE_NAMESPACE_ATOM_10]['name'][0]['data']))			{				$name = $this->sanitize($contributor['child'][SIMPLEPIE_NAMESPACE_ATOM_10]['name'][0]['data'], SIMPLEPIE_CONSTRUCT_TEXT);			}			if (isset($contributor['child'][SIMPLEPIE_NAMESPACE_ATOM_10]['uri'][0]['data']))			{				$uri = $this->sanitize($contributor['child'][SIMPLEPIE_NAMESPACE_ATOM_10]['uri'][0]['data'], SIMPLEPIE_CONSTRUCT_IRI, $this->get_base($contributor['child'][SIMPLEPIE_NAMESPACE_ATOM_10]['uri'][0]));			}			if (isset($contributor['child'][SIMPLEPIE_NAMESPACE_ATOM_10]['email'][0]['data']))			{				$email = $this->sanitize($contributor['child'][SIMPLEPIE_NAMESPACE_ATOM_10]['email'][0]['data'], SIMPLEPIE_CONSTRUCT_TEXT);			}			if ($name !== null || $email !== null || $uri !== null)			{				$contributors[] = new $this->author_class($name, $uri, $email);			}		}		foreach ((array) $this->get_channel_tags(SIMPLEPIE_NAMESPACE_ATOM_03, 'contributor') as $contributor)		{			$name = null;			$url = null;			$email = null;			if (isset($contributor['child'][SIMPLEPIE_NAMESPACE_ATOM_03]['name'][0]['data']))			{				$name = $this->sanitize($contributor['child'][SIMPLEPIE_NAMESPACE_ATOM_03]['name'][0]['data'], SIMPLEPIE_CONSTRUCT_TEXT);			}			if (isset($contributor['child'][SIMPLEPIE_NAMESPACE_ATOM_03]['url'][0]['data']))			{				$url = $this->sanitize($contributor['child'][SIMPLEPIE_NAMESPACE_ATOM_03]['url'][0]['data'], SIMPLEPIE_CONSTRUCT_IRI, $this->get_base($contributor['child'][SIMPLEPIE_NAMESPACE_ATOM_03]['url'][0]));			}			if (isset($contributor['child'][SIMPLEPIE_NAMESPACE_ATOM_03]['email'][0]['data']))			{				$email = $this->sanitize($contributor['child'][SIMPLEPIE_NAMESPACE_ATOM_03]['email'][0]['data'], SIMPLEPIE_CONSTRUCT_TEXT);			}			if ($name !== null || $email !== null || $url !== null)			{				$contributors[] = new $this->author_class($name, $url, $email);			}		}		if (!empty($contributors))		{			return SimplePie_Misc::array_unique($contributors);		}		else		{			return null;		}	}	function get_link($key = 0, $rel = 'alternate')	{		$links = $this->get_links($rel);		if (isset($links[$key]))		{			return $links[$key];		}		else		{			return null;		}	}	/**	 * Added for parity between the parent-level and the item/entry-level.	 */	function get_permalink()	{		return $this->get_link(0);	}	function get_links($rel = 'alternate')	{		if (!isset($this->data['links']))		{			$this->data['links'] = array();			if ($links = $this->get_channel_tags(SIMPLEPIE_NAMESPACE_ATOM_10, 'link'))			{				foreach ($links as $link)				{					if (isset($link['attribs']['']['href']))					{						$link_rel = (isset($link['attribs']['']['rel'])) ? $link['attribs']['']['rel'] : 'alternate';						$this->data['links'][$link_rel][] = $this->sanitize($link['attribs']['']['href'], SIMPLEPIE_CONSTRUCT_IRI, $this->get_base($link));					}				}			}			if ($links = $this->get_channel_tags(SIMPLEPIE_NAMESPACE_ATOM_03, 'link'))			{				foreach ($links as $link)				{					if (isset($link['attribs']['']['href']))					{						$link_rel = (isset($link['attribs']['']['rel'])) ? $link['attribs']['']['rel'] : 'alternate';						$this->data['links'][$link_rel][] = $this->sanitize($link['attribs']['']['href'], SIMPLEPIE_CONSTRUCT_IRI, $this->get_base($link));					}				}			}			if ($links = $this->get_channel_tags(SIMPLEPIE_NAMESPACE_RSS_10, 'link'))			{				$this->data['links']['alternate'][] = $this->sanitize($links[0]['data'], SIMPLEPIE_CONSTRUCT_IRI, $this->get_base($links[0]));			}			if ($links = $this->get_channel_tags(SIMPLEPIE_NAMESPACE_RSS_090, 'link'))			{				$this->data['links']['alternate'][] = $this->sanitize($links[0]['data'], SIMPLEPIE_CONSTRUCT_IRI, $this->get_base($links[0]));			}			if ($links = $this->get_channel_tags(SIMPLEPIE_NAMESPACE_RSS_20, 'link'))			{				$this->data['links']['alternate'][] = $this->sanitize($links[0]['data'], SIMPLEPIE_CONSTRUCT_IRI, $this->get_base($links[0]));			}			$keys = array_keys($this->data['links']);			foreach ($keys as $key)			{				if (SimplePie_Misc::is_isegment_nz_nc($key))				{					if (isset($this->data['links'][SIMPLEPIE_IANA_LINK_RELATIONS_REGISTRY . $key]))					{						$this->data['links'][SIMPLEPIE_IANA_LINK_RELATIONS_REGISTRY . $key] = array_merge($this->data['links'][$key], $this->data['links'][SIMPLEPIE_IANA_LINK_RELATIONS_REGISTRY . $key]);						$this->data['links'][$key] =& $this->data['links'][SIMPLEPIE_IANA_LINK_RELATIONS_REGISTRY . $key];					}					else					{						$this->data['links'][SIMPLEPIE_IANA_LINK_RELATIONS_REGISTRY . $key] =& $this->data['links'][$key];					}				}				elseif (substr($key, 0, 41) === SIMPLEPIE_IANA_LINK_RELATIONS_REGISTRY)				{					$this->data['links'][substr($key, 41)] =& $this->data['links'][$key];				}				$this->data['links'][$key] = array_unique($this->data['links'][$key]);			}		}		if (isset($this->data['links'][$rel]))		{			return $this->data['links'][$rel];		}		else		{			return null;		}	}	function get_all_discovered_feeds()	{		return $this->all_discovered_feeds;	}	function get_description()	{		if ($return = $this->get_channel_tags(SIMPLEPIE_NAMESPACE_ATOM_10, 'subtitle'))		{			return $this->sanitize($return[0]['data'], SimplePie_Misc::atom_10_construct_type($return[0]['attribs']), $this->get_base($return[0]));		}		elseif ($return = $this->get_channel_tags(SIMPLEPIE_NAMESPACE_ATOM_03, 'tagline'))		{			return $this->sanitize($return[0]['data'], SimplePie_Misc::atom_03_construct_type($return[0]['attribs']), $this->get_base($return[0]));		}		elseif ($return = $this->get_channel_tags(SIMPLEPIE_NAMESPACE_RSS_10, 'description'))		{			return $this->sanitize($return[0]['data'], SIMPLEPIE_CONSTRUCT_MAYBE_HTML, $this->get_base($return[0]));		}		elseif ($return = $this->get_channel_tags(SIMPLEPIE_NAMESPACE_RSS_090, 'description'))		{			return $this->sanitize($return[0]['data'], SIMPLEPIE_CONSTRUCT_MAYBE_HTML, $this->get_base($return[0]));		}		elseif ($return = $this->get_channel_tags(SIMPLEPIE_NAMESPACE_RSS_20, 'description'))		{			return $this->sanitize($return[0]['data'], SIMPLEPIE_CONSTRUCT_HTML, $this->get_base($return[0]));		}		elseif ($return = $this->get_channel_tags(SIMPLEPIE_NAMESPACE_DC_11, 'description'))		{			return $this->sanitize($return[0]['data'], SIMPLEPIE_CONSTRUCT_TEXT);		}		elseif ($return = $this->get_channel_tags(SIMPLEPIE_NAMESPACE_DC_10, 'description'))		{			return $this->sanitize($return[0]['data'], SIMPLEPIE_CONSTRUCT_TEXT);		}		elseif ($return = $this->get_channel_tags(SIMPLEPIE_NAMESPACE_ITUNES, 'summary'))		{			return $this->sanitize($return[0]['data'], SIMPLEPIE_CONSTRUCT_HTML, $this->get_base($return[0]));		}		elseif ($return = $this->get_channel_tags(SIMPLEPIE_NAMESPACE_ITUNES, 'subtitle'))		{			return $this->sanitize($return[0]['data'], SIMPLEPIE_CONSTRUCT_HTML, $this->get_base($return[0]));		}		else		{			return null;		}	}	function get_copyright()	{		if ($return = $this->get_channel_tags(SIMPLEPIE_NAMESPACE_ATOM_10, 'rights'))		{			return $this->sanitize($return[0]['data'], SimplePie_Misc::atom_10_construct_type($return[0]['attribs']), $this->get_base($return[0]));		}		elseif ($return = $this->get_channel_tags(SIMPLEPIE_NAMESPACE_ATOM_03, 'copyright'))		{			return $this->sanitize($return[0]['data'], SimplePie_Misc::atom_03_construct_type($return[0]['attribs']), $this->get_base($return[0]));		}		elseif ($return = $this->get_channel_tags(SIMPLEPIE_NAMESPACE_RSS_20, 'copyright'))		{			return $this->sanitize($return[0]['data'], SIMPLEPIE_CONSTRUCT_TEXT);		}		elseif ($return = $this->get_channel_tags(SIMPLEPIE_NAMESPACE_DC_11, 'rights'))		{			return $this->sanitize($return[0]['data'], SIMPLEPIE_CONSTRUCT_TEXT);		}		elseif ($return = $this->get_channel_tags(SIMPLEPIE_NAMESPACE_DC_10, 'rights'))		{			return $this->sanitize($return[0]['data'], SIMPLEPIE_CONSTRUCT_TEXT);		}		else		{			return null;		}	}	function get_language()	{		if ($return = $this->get_channel_tags(SIMPLEPIE_NAMESPACE_RSS_20, 'language'))		{			return $this->sanitize($return[0]['data'], SIMPLEPIE_CONSTRUCT_TEXT);		}		elseif ($return = $this->get_channel_tags(SIMPLEPIE_NAMESPACE_DC_11, 'language'))		{			return $this->sanitize($return[0]['data'], SIMPLEPIE_CONSTRUCT_TEXT);		}		elseif ($return = $this->get_channel_tags(SIMPLEPIE_NAMESPACE_DC_10, 'language'))		{			return $this->sanitize($return[0]['data'], SIMPLEPIE_CONSTRUCT_TEXT);		}		elseif (isset($this->data['child'][SIMPLEPIE_NAMESPACE_ATOM_10]['feed'][0]['xml_lang']))		{			return $this->sanitize($this->data['child'][SIMPLEPIE_NAMESPACE_ATOM_10]['feed'][0]['xml_lang'], SIMPLEPIE_CONSTRUCT_TEXT);		}		elseif (isset($this->data['child'][SIMPLEPIE_NAMESPACE_ATOM_03]['feed'][0]['xml_lang']))		{			return $this->sanitize($this->data['child'][SIMPLEPIE_NAMESPACE_ATOM_03]['feed'][0]['xml_lang'], SIMPLEPIE_CONSTRUCT_TEXT);		}		elseif (isset($this->data['child'][SIMPLEPIE_NAMESPACE_RDF]['RDF'][0]['xml_lang']))		{			return $this->sanitize($this->data['child'][SIMPLEPIE_NAMESPACE_RDF]['RDF'][0]['xml_lang'], SIMPLEPIE_CONSTRUCT_TEXT);		}		elseif (isset($this->data['headers']['content-language']))		{			return $this->sanitize($this->data['headers']['content-language'], SIMPLEPIE_CONSTRUCT_TEXT);		}		else		{			return null;		}	}	function get_latitude()	{		if ($return = $this->get_channel_tags(SIMPLEPIE_NAMESPACE_W3C_BASIC_GEO, 'lat'))		{			return (float) $return[0]['data'];		}		elseif (($return = $this->get_channel_tags(SIMPLEPIE_NAMESPACE_GEORSS, 'point')) && preg_match('/^((?:-)?[0-9]+(?:\.[0-9]+)) ((?:-)?[0-9]+(?:\.[0-9]+))$/', $return[0]['data'], $match))		{			return (float) $match[1];		}		else		{			return null;		}	}	function get_longitude()	{		if ($return = $this->get_channel_tags(SIMPLEPIE_NAMESPACE_W3C_BASIC_GEO, 'long'))		{			return (float) $return[0]['data'];		}		elseif ($return = $this->get_channel_tags(SIMPLEPIE_NAMESPACE_W3C_BASIC_GEO, 'lon'))		{			return (float) $return[0]['data'];		}		elseif (($return = $this->get_channel_tags(SIMPLEPIE_NAMESPACE_GEORSS, 'point')) && preg_match('/^((?:-)?[0-9]+(?:\.[0-9]+)) ((?:-)?[0-9]+(?:\.[0-9]+))$/', $return[0]['data'], $match))		{			return (float) $match[2];		}		else		{			return null;		}	}	function get_image_title()	{		if ($return = $this->get_image_tags(SIMPLEPIE_NAMESPACE_RSS_10, 'title'))		{			return $this->sanitize($return[0]['data'], SIMPLEPIE_CONSTRUCT_TEXT);		}		elseif ($return = $this->get_image_tags(SIMPLEPIE_NAMESPACE_RSS_090, 'title'))		{			return $this->sanitize($return[0]['data'], SIMPLEPIE_CONSTRUCT_TEXT);		}		elseif ($return = $this->get_image_tags(SIMPLEPIE_NAMESPACE_RSS_20, 'title'))		{			return $this->sanitize($return[0]['data'], SIMPLEPIE_CONSTRUCT_TEXT);		}		elseif ($return = $this->get_image_tags(SIMPLEPIE_NAMESPACE_DC_11, 'title'))		{			return $this->sanitize($return[0]['data'], SIMPLEPIE_CONSTRUCT_TEXT);		}		elseif ($return = $this->get_image_tags(SIMPLEPIE_NAMESPACE_DC_10, 'title'))		{			return $this->sanitize($return[0]['data'], SIMPLEPIE_CONSTRUCT_TEXT);		}		else		{			return null;		}	}	function get_image_url()	{		if ($return = $this->get_channel_tags(SIMPLEPIE_NAMESPACE_ITUNES, 'image'))		{			return $this->sanitize($return[0]['attribs']['']['href'], SIMPLEPIE_CONSTRUCT_IRI);		}		elseif ($return = $this->get_channel_tags(SIMPLEPIE_NAMESPACE_ATOM_10, 'logo'))		{			return $this->sanitize($return[0]['data'], SIMPLEPIE_CONSTRUCT_IRI, $this->get_base($return[0]));		}		elseif ($return = $this->get_channel_tags(SIMPLEPIE_NAMESPACE_ATOM_10, 'icon'))		{			return $this->sanitize($return[0]['data'], SIMPLEPIE_CONSTRUCT_IRI, $this->get_base($return[0]));		}		elseif ($return = $this->get_image_tags(SIMPLEPIE_NAMESPACE_RSS_10, 'url'))		{			return $this->sanitize($return[0]['data'], SIMPLEPIE_CONSTRUCT_IRI, $this->get_base($return[0]));		}		elseif ($return = $this->get_image_tags(SIMPLEPIE_NAMESPACE_RSS_090, 'url'))		{			return $this->sanitize($return[0]['data'], SIMPLEPIE_CONSTRUCT_IRI, $this->get_base($return[0]));		}		elseif ($return = $this->get_image_tags(SIMPLEPIE_NAMESPACE_RSS_20, 'url'))		{			return $this->sanitize($return[0]['data'], SIMPLEPIE_CONSTRUCT_IRI, $this->get_base($return[0]));		}		else		{			return null;		}	}	function get_image_link()	{		if ($return = $this->get_image_tags(SIMPLEPIE_NAMESPACE_RSS_10, 'link'))		{			return $this->sanitize($return[0]['data'], SIMPLEPIE_CONSTRUCT_IRI, $this->get_base($return[0]));		}		elseif ($return = $this->get_image_tags(SIMPLEPIE_NAMESPACE_RSS_090, 'link'))		{			return $this->sanitize($return[0]['data'], SIMPLEPIE_CONSTRUCT_IRI, $this->get_base($return[0]));		}		elseif ($return = $this->get_image_tags(SIMPLEPIE_NAMESPACE_RSS_20, 'link'))		{			return $this->sanitize($return[0]['data'], SIMPLEPIE_CONSTRUCT_IRI, $this->get_base($return[0]));		}		else		{			return null;		}	}	function get_image_width()	{		if ($return = $this->get_image_tags(SIMPLEPIE_NAMESPACE_RSS_20, 'width'))		{			return round($return[0]['data']);		}		elseif ($this->get_type() & SIMPLEPIE_TYPE_RSS_SYNDICATION && $this->get_image_tags(SIMPLEPIE_NAMESPACE_RSS_20, 'url'))		{			return 88.0;		}		else		{			return null;		}	}	function get_image_height()	{		if ($return = $this->get_image_tags(SIMPLEPIE_NAMESPACE_RSS_20, 'height'))		{			return round($return[0]['data']);		}		elseif ($this->get_type() & SIMPLEPIE_TYPE_RSS_SYNDICATION && $this->get_image_tags(SIMPLEPIE_NAMESPACE_RSS_20, 'url'))		{			return 31.0;		}		else		{			return null;		}	}	function get_item_quantity($max = 0)	{		$max = (int) $max;		$qty = count($this->get_items());		if ($max === 0)		{			return $qty;		}		else		{			return ($qty > $max) ? $max : $qty;		}	}	function get_item($key = 0)	{		$items = $this->get_items();		if (isset($items[$key]))		{			return $items[$key];		}		else		{			return null;		}	}	function get_items($start = 0, $end = 0)	{		if (!isset($this->data['items']))		{			if (!empty($this->multifeed_objects))			{				$this->data['items'] = SimplePie::merge_items($this->multifeed_objects, $start, $end, $this->item_limit);			}			else			{				$this->data['items'] = array();				if ($items = $this->get_feed_tags(SIMPLEPIE_NAMESPACE_ATOM_10, 'entry'))				{					$keys = array_keys($items);					foreach ($keys as $key)					{						$this->data['items'][] = new $this->item_class($this, $items[$key]);					}				}				if ($items = $this->get_feed_tags(SIMPLEPIE_NAMESPACE_ATOM_03, 'entry'))				{					$keys = array_keys($items);					foreach ($keys as $key)					{						$this->data['items'][] = new $this->item_class($this, $items[$key]);					}				}				if ($items = $this->get_feed_tags(SIMPLEPIE_NAMESPACE_RSS_10, 'item'))				{					$keys = array_keys($items);					foreach ($keys as $key)					{						$this->data['items'][] = new $this->item_class($this, $items[$key]);					}				}				if ($items = $this->get_feed_tags(SIMPLEPIE_NAMESPACE_RSS_090, 'item'))				{					$keys = array_keys($items);					foreach ($keys as $key)					{						$this->data['items'][] = new $this->item_class($this, $items[$key]);					}				}				if ($items = $this->get_channel_tags(SIMPLEPIE_NAMESPACE_RSS_20, 'item'))				{					$keys = array_keys($items);					foreach ($keys as $key)					{						$this->data['items'][] = new $this->item_class($this, $items[$key]);					}				}			}		}		if (!empty($this->data['items']))		{			// If we want to order it by date, check if all items have a date, and then sort it			if ($this->order_by_date && empty($this->multifeed_objects))			{				if (!isset($this->data['ordered_items']))				{					$do_sort = true;					foreach ($this->data['items'] as $item)					{						if (!$item->get_date('U'))						{							$do_sort = false;							break;						}					}					$item = null;					$this->data['ordered_items'] = $this->data['items'];					if ($do_sort)					{						usort($this->data['ordered_items'], array(&$this, 'sort_items'));					}				}				$items = $this->data['ordered_items'];			}			else			{				$items = $this->data['items'];			}			// Slice the data as desired			if ($end === 0)			{				return array_slice($items, $start);			}			else			{				return array_slice($items, $start, $end);			}		}		else		{			return array();		}	}	/**	 * @static	 */	function sort_items($a, $b)	{		return $a->get_date('U') <= $b->get_date('U');	}	/**	 * @static	 */	function merge_items($urls, $start = 0, $end = 0, $limit = 0)	{		if (is_array($urls) && sizeof($urls) > 0)		{			$items = array();			foreach ($urls as $arg)			{				if (is_a($arg, 'SimplePie'))				{					$items = array_merge($items, $arg->get_items(0, $limit));				}				else				{					trigger_error('Arguments must be SimplePie objects', E_USER_WARNING);				}			}			$do_sort = true;			foreach ($items as $item)			{				if (!$item->get_date('U'))				{					$do_sort = false;					break;				}			}			$item = null;			if ($do_sort)			{				usort($items, array('SimplePie', 'sort_items'));			}			if ($end === 0)			{				return array_slice($items, $start);			}			else			{				return array_slice($items, $start, $end);			}		}		else		{			trigger_error('Cannot merge zero SimplePie objects', E_USER_WARNING);			return array();		}	}}class SimplePie_Item{	var $feed;	var $data = array();	function SimplePie_Item($feed, $data)	{		$this->feed = $feed;		$this->data = $data;	}	function __toString()	{		return md5(serialize($this->data));	}	/**	 * Remove items that link back to this before destroying this object	 */	function __destruct()	{		if ((version_compare(PHP_VERSION, '5.3', '<') || !gc_enabled()) && !ini_get('zend.ze1_compatibility_mode'))		{			unset($this->feed);		}	}	function get_item_tags($namespace, $tag)	{		if (isset($this->data['child'][$namespace][$tag]))		{			return $this->data['child'][$namespace][$tag];		}		else		{			return null;		}	}	function get_base($element = array())	{		return $this->feed->get_base($element);	}	function sanitize($data, $type, $base = '')	{		return $this->feed->sanitize($data, $type, $base);	}	function get_feed()	{		return $this->feed;	}	function get_id($hash = false)	{		if (!$hash)		{			if ($return = $this->get_item_tags(SIMPLEPIE_NAMESPACE_ATOM_10, 'id'))			{				return $this->sanitize($return[0]['data'], SIMPLEPIE_CONSTRUCT_TEXT);			}			elseif ($return = $this->get_item_tags(SIMPLEPIE_NAMESPACE_ATOM_03, 'id'))			{				return $this->sanitize($return[0]['data'], SIMPLEPIE_CONSTRUCT_TEXT);			}			elseif ($return = $this->get_item_tags(SIMPLEPIE_NAMESPACE_RSS_20, 'guid'))			{				return $this->sanitize($return[0]['data'], SIMPLEPIE_CONSTRUCT_TEXT);			}			elseif ($return = $this->get_item_tags(SIMPLEPIE_NAMESPACE_DC_11, 'identifier'))			{				return $this->sanitize($return[0]['data'], SIMPLEPIE_CONSTRUCT_TEXT);			}			elseif ($return = $this->get_item_tags(SIMPLEPIE_NAMESPACE_DC_10, 'identifier'))			{				return $this->sanitize($return[0]['data'], SIMPLEPIE_CONSTRUCT_TEXT);			}			elseif (($return = $this->get_permalink()) !== null)			{				return $return;			}			elseif (($return = $this->get_title()) !== null)			{				return $return;			}		}		if ($this->get_permalink() !== null || $this->get_title() !== null)		{			return md5($this->get_permalink() . $this->get_title());		}		else		{			return md5(serialize($this->data));		}	}	function get_title()	{		if (!isset($this->data['title']))		{			if ($return = $this->get_item_tags(SIMPLEPIE_NAMESPACE_ATOM_10, 'title'))			{				$this->data['title'] = $this->sanitize($return[0]['data'], SimplePie_Misc::atom_10_construct_type($return[0]['attribs']), $this->get_base($return[0]));			}			elseif ($return = $this->get_item_tags(SIMPLEPIE_NAMESPACE_ATOM_03, 'title'))			{				$this->data['title'] = $this->sanitize($return[0]['data'], SimplePie_Misc::atom_03_construct_type($return[0]['attribs']), $this->get_base($return[0]));			}			elseif ($return = $this->get_item_tags(SIMPLEPIE_NAMESPACE_RSS_10, 'title'))			{				$this->data['title'] = $this->sanitize($return[0]['data'], SIMPLEPIE_CONSTRUCT_MAYBE_HTML, $this->get_base($return[0]));			}			elseif ($return = $this->get_item_tags(SIMPLEPIE_NAMESPACE_RSS_090, 'title'))			{				$this->data['title'] = $this->sanitize($return[0]['data'], SIMPLEPIE_CONSTRUCT_MAYBE_HTML, $this->get_base($return[0]));			}			elseif ($return = $this->get_item_tags(SIMPLEPIE_NAMESPACE_RSS_20, 'title'))			{				$this->data['title'] = $this->sanitize($return[0]['data'], SIMPLEPIE_CONSTRUCT_MAYBE_HTML, $this->get_base($return[0]));			}			elseif ($return = $this->get_item_tags(SIMPLEPIE_NAMESPACE_DC_11, 'title'))			{				$this->data['title'] = $this->sanitize($return[0]['data'], SIMPLEPIE_CONSTRUCT_TEXT);			}			elseif ($return = $this->get_item_tags(SIMPLEPIE_NAMESPACE_DC_10, 'title'))			{				$this->data['title'] = $this->sanitize($return[0]['data'], SIMPLEPIE_CONSTRUCT_TEXT);			}			else			{				$this->data['title'] = null;			}		}		return $this->data['title'];	}	function get_description($description_only = false)	{		if ($return = $this->get_item_tags(SIMPLEPIE_NAMESPACE_ATOM_10, 'summary'))		{			return $this->sanitize($return[0]['data'], SimplePie_Misc::atom_10_construct_type($return[0]['attribs']), $this->get_base($return[0]));		}		elseif ($return = $this->get_item_tags(SIMPLEPIE_NAMESPACE_ATOM_03, 'summary'))		{			return $this->sanitize($return[0]['data'], SimplePie_Misc::atom_03_construct_type($return[0]['attribs']), $this->get_base($return[0]));		}		elseif ($return = $this->get_item_tags(SIMPLEPIE_NAMESPACE_RSS_10, 'description'))		{			return $this->sanitize($return[0]['data'], SIMPLEPIE_CONSTRUCT_MAYBE_HTML, $this->get_base($return[0]));		}		elseif ($return = $this->get_item_tags(SIMPLEPIE_NAMESPACE_RSS_20, 'description'))		{			return $this->sanitize($return[0]['data'], SIMPLEPIE_CONSTRUCT_HTML, $this->get_base($return[0]));		}		elseif ($return = $this->get_item_tags(SIMPLEPIE_NAMESPACE_DC_11, 'description'))		{			return $this->sanitize($return[0]['data'], SIMPLEPIE_CONSTRUCT_TEXT);		}		elseif ($return = $this->get_item_tags(SIMPLEPIE_NAMESPACE_DC_10, 'description'))		{			return $this->sanitize($return[0]['data'], SIMPLEPIE_CONSTRUCT_TEXT);		}		elseif ($return = $this->get_item_tags(SIMPLEPIE_NAMESPACE_ITUNES, 'summary'))		{			return $this->sanitize($return[0]['data'], SIMPLEPIE_CONSTRUCT_HTML, $this->get_base($return[0]));		}		elseif ($return = $this->get_item_tags(SIMPLEPIE_NAMESPACE_ITUNES, 'subtitle'))		{			return $this->sanitize($return[0]['data'], SIMPLEPIE_CONSTRUCT_TEXT);		}		elseif (!$description_only)		{			return $this->get_content(true);		}		else		{			return null;		}	}	function get_content($content_only = false)	{		if ($return = $this->get_item_tags(SIMPLEPIE_NAMESPACE_ATOM_10, 'content'))		{			return $this->sanitize($return[0]['data'], SimplePie_Misc::atom_10_content_construct_type($return[0]['attribs']), $this->get_base($return[0]));		}		elseif ($return = $this->get_item_tags(SIMPLEPIE_NAMESPACE_ATOM_03, 'content'))		{			return $this->sanitize($return[0]['data'], SimplePie_Misc::atom_03_construct_type($return[0]['attribs']), $this->get_base($return[0]));		}		elseif ($return = $this->get_item_tags(SIMPLEPIE_NAMESPACE_RSS_10_MODULES_CONTENT, 'encoded'))		{			return $this->sanitize($return[0]['data'], SIMPLEPIE_CONSTRUCT_HTML, $this->get_base($return[0]));		}		elseif (!$content_only)		{			return $this->get_description(true);		}		else		{			return null;		}	}	function get_category($key = 0)	{		$categories = $this->get_categories();		if (isset($categories[$key]))		{			return $categories[$key];		}		else		{			return null;		}	}	function get_categories()	{		$categories = array();		foreach ((array) $this->get_item_tags(SIMPLEPIE_NAMESPACE_ATOM_10, 'category') as $category)		{			$term = null;			$scheme = null;			$label = null;			if (isset($category['attribs']['']['term']))			{				$term = $this->sanitize($category['attribs']['']['term'], SIMPLEPIE_CONSTRUCT_TEXT);			}			if (isset($category['attribs']['']['scheme']))			{				$scheme = $this->sanitize($category['attribs']['']['scheme'], SIMPLEPIE_CONSTRUCT_TEXT);			}			if (isset($category['attribs']['']['label']))			{				$label = $this->sanitize($category['attribs']['']['label'], SIMPLEPIE_CONSTRUCT_TEXT);			}			$categories[] = new $this->feed->category_class($term, $scheme, $label);		}		foreach ((array) $this->get_item_tags(SIMPLEPIE_NAMESPACE_RSS_20, 'category') as $category)		{			// This is really the label, but keep this as the term also for BC.			// Label will also work on retrieving because that falls back to term.			$term = $this->sanitize($category['data'], SIMPLEPIE_CONSTRUCT_TEXT);			if (isset($category['attribs']['']['domain']))			{				$scheme = $this->sanitize($category['attribs']['']['domain'], SIMPLEPIE_CONSTRUCT_TEXT);			}			else			{				$scheme = null;			}			$categories[] = new $this->feed->category_class($term, $scheme, null);		}		foreach ((array) $this->get_item_tags(SIMPLEPIE_NAMESPACE_DC_11, 'subject') as $category)		{			$categories[] = new $this->feed->category_class($this->sanitize($category['data'], SIMPLEPIE_CONSTRUCT_TEXT), null, null);		}		foreach ((array) $this->get_item_tags(SIMPLEPIE_NAMESPACE_DC_10, 'subject') as $category)		{			$categories[] = new $this->feed->category_class($this->sanitize($category['data'], SIMPLEPIE_CONSTRUCT_TEXT), null, null);		}		if (!empty($categories))		{			return SimplePie_Misc::array_unique($categories);		}		else		{			return null;		}	}	function get_author($key = 0)	{		$authors = $this->get_authors();		if (isset($authors[$key]))		{			return $authors[$key];		}		else		{			return null;		}	}	function get_contributor($key = 0)	{		$contributors = $this->get_contributors();		if (isset($contributors[$key]))		{			return $contributors[$key];		}		else		{			return null;		}	}	function get_contributors()	{		$contributors = array();		foreach ((array) $this->get_item_tags(SIMPLEPIE_NAMESPACE_ATOM_10, 'contributor') as $contributor)		{			$name = null;			$uri = null;			$email = null;			if (isset($contributor['child'][SIMPLEPIE_NAMESPACE_ATOM_10]['name'][0]['data']))			{				$name = $this->sanitize($contributor['child'][SIMPLEPIE_NAMESPACE_ATOM_10]['name'][0]['data'], SIMPLEPIE_CONSTRUCT_TEXT);			}			if (isset($contributor['child'][SIMPLEPIE_NAMESPACE_ATOM_10]['uri'][0]['data']))			{				$uri = $this->sanitize($contributor['child'][SIMPLEPIE_NAMESPACE_ATOM_10]['uri'][0]['data'], SIMPLEPIE_CONSTRUCT_IRI, $this->get_base($contributor['child'][SIMPLEPIE_NAMESPACE_ATOM_10]['uri'][0]));			}			if (isset($contributor['child'][SIMPLEPIE_NAMESPACE_ATOM_10]['email'][0]['data']))			{				$email = $this->sanitize($contributor['child'][SIMPLEPIE_NAMESPACE_ATOM_10]['email'][0]['data'], SIMPLEPIE_CONSTRUCT_TEXT);			}			if ($name !== null || $email !== null || $uri !== null)			{				$contributors[] = new $this->feed->author_class($name, $uri, $email);			}		}		foreach ((array) $this->get_item_tags(SIMPLEPIE_NAMESPACE_ATOM_03, 'contributor') as $contributor)		{			$name = null;			$url = null;			$email = null;			if (isset($contributor['child'][SIMPLEPIE_NAMESPACE_ATOM_03]['name'][0]['data']))			{				$name = $this->sanitize($contributor['child'][SIMPLEPIE_NAMESPACE_ATOM_03]['name'][0]['data'], SIMPLEPIE_CONSTRUCT_TEXT);			}			if (isset($contributor['child'][SIMPLEPIE_NAMESPACE_ATOM_03]['url'][0]['data']))			{				$url = $this->sanitize($contributor['child'][SIMPLEPIE_NAMESPACE_ATOM_03]['url'][0]['data'], SIMPLEPIE_CONSTRUCT_IRI, $this->get_base($contributor['child'][SIMPLEPIE_NAMESPACE_ATOM_03]['url'][0]));			}			if (isset($contributor['child'][SIMPLEPIE_NAMESPACE_ATOM_03]['email'][0]['data']))			{				$email = $this->sanitize($contributor['child'][SIMPLEPIE_NAMESPACE_ATOM_03]['email'][0]['data'], SIMPLEPIE_CONSTRUCT_TEXT);			}			if ($name !== null || $email !== null || $url !== null)			{				$contributors[] = new $this->feed->author_class($name, $url, $email);			}		}		if (!empty($contributors))		{			return SimplePie_Misc::array_unique($contributors);		}		else		{			return null;		}	}	function get_authors()	{		$authors = array();		foreach ((array) $this->get_item_tags(SIMPLEPIE_NAMESPACE_ATOM_10, 'author') as $author)		{			$name = null;			$uri = null;			$email = null;			if (isset($author['child'][SIMPLEPIE_NAMESPACE_ATOM_10]['name'][0]['data']))			{				$name = $this->sanitize($author['child'][SIMPLEPIE_NAMESPACE_ATOM_10]['name'][0]['data'], SIMPLEPIE_CONSTRUCT_TEXT);			}			if (isset($author['child'][SIMPLEPIE_NAMESPACE_ATOM_10]['uri'][0]['data']))			{				$uri = $this->sanitize($author['child'][SIMPLEPIE_NAMESPACE_ATOM_10]['uri'][0]['data'], SIMPLEPIE_CONSTRUCT_IRI, $this->get_base($author['child'][SIMPLEPIE_NAMESPACE_ATOM_10]['uri'][0]));			}			if (isset($author['child'][SIMPLEPIE_NAMESPACE_ATOM_10]['email'][0]['data']))			{				$email = $this->sanitize($author['child'][SIMPLEPIE_NAMESPACE_ATOM_10]['email'][0]['data'], SIMPLEPIE_CONSTRUCT_TEXT);			}			if ($name !== null || $email !== null || $uri !== null)			{				$authors[] = new $this->feed->author_class($name, $uri, $email);			}		}		if ($author = $this->get_item_tags(SIMPLEPIE_NAMESPACE_ATOM_03, 'author'))		{			$name = null;			$url = null;			$email = null;			if (isset($author[0]['child'][SIMPLEPIE_NAMESPACE_ATOM_03]['name'][0]['data']))			{				$name = $this->sanitize($author[0]['child'][SIMPLEPIE_NAMESPACE_ATOM_03]['name'][0]['data'], SIMPLEPIE_CONSTRUCT_TEXT);			}			if (isset($author[0]['child'][SIMPLEPIE_NAMESPACE_ATOM_03]['url'][0]['data']))			{				$url = $this->sanitize($author[0]['child'][SIMPLEPIE_NAMESPACE_ATOM_03]['url'][0]['data'], SIMPLEPIE_CONSTRUCT_IRI, $this->get_base($author[0]['child'][SIMPLEPIE_NAMESPACE_ATOM_03]['url'][0]));			}			if (isset($author[0]['child'][SIMPLEPIE_NAMESPACE_ATOM_03]['email'][0]['data']))			{				$email = $this->sanitize($author[0]['child'][SIMPLEPIE_NAMESPACE_ATOM_03]['email'][0]['data'], SIMPLEPIE_CONSTRUCT_TEXT);			}			if ($name !== null || $email !== null || $url !== null)			{				$authors[] = new $this->feed->author_class($name, $url, $email);			}		}		if ($author = $this->get_item_tags(SIMPLEPIE_NAMESPACE_RSS_20, 'author'))		{			$authors[] = new $this->feed->author_class(null, null, $this->sanitize($author[0]['data'], SIMPLEPIE_CONSTRUCT_TEXT));		}		foreach ((array) $this->get_item_tags(SIMPLEPIE_NAMESPACE_DC_11, 'creator') as $author)		{			$authors[] = new $this->feed->author_class($this->sanitize($author['data'], SIMPLEPIE_CONSTRUCT_TEXT), null, null);		}		foreach ((array) $this->get_item_tags(SIMPLEPIE_NAMESPACE_DC_10, 'creator') as $author)		{			$authors[] = new $this->feed->author_class($this->sanitize($author['data'], SIMPLEPIE_CONSTRUCT_TEXT), null, null);		}		foreach ((array) $this->get_item_tags(SIMPLEPIE_NAMESPACE_ITUNES, 'author') as $author)		{			$authors[] = new $this->feed->author_class($this->sanitize($author['data'], SIMPLEPIE_CONSTRUCT_TEXT), null, null);		}		if (!empty($authors))		{			return SimplePie_Misc::array_unique($authors);		}		elseif (($source = $this->get_source()) && ($authors = $source->get_authors()))		{			return $authors;		}		elseif ($authors = $this->feed->get_authors())		{			return $authors;		}		else		{			return null;		}	}	function get_copyright()	{		if ($return = $this->get_item_tags(SIMPLEPIE_NAMESPACE_ATOM_10, 'rights'))		{			return $this->sanitize($return[0]['data'], SimplePie_Misc::atom_10_construct_type($return[0]['attribs']), $this->get_base($return[0]));		}		elseif ($return = $this->get_item_tags(SIMPLEPIE_NAMESPACE_DC_11, 'rights'))		{			return $this->sanitize($return[0]['data'], SIMPLEPIE_CONSTRUCT_TEXT);		}		elseif ($return = $this->get_item_tags(SIMPLEPIE_NAMESPACE_DC_10, 'rights'))		{			return $this->sanitize($return[0]['data'], SIMPLEPIE_CONSTRUCT_TEXT);		}		else		{			return null;		}	}	function get_date($date_format = 'j F Y, g:i a')	{		if (!isset($this->data['date']))		{			if ($return = $this->get_item_tags(SIMPLEPIE_NAMESPACE_ATOM_10, 'published'))			{				$this->data['date']['raw'] = $return[0]['data'];			}			elseif ($return = $this->get_item_tags(SIMPLEPIE_NAMESPACE_ATOM_10, 'updated'))			{				$this->data['date']['raw'] = $return[0]['data'];			}			elseif ($return = $this->get_item_tags(SIMPLEPIE_NAMESPACE_ATOM_03, 'issued'))			{				$this->data['date']['raw'] = $return[0]['data'];			}			elseif ($return = $this->get_item_tags(SIMPLEPIE_NAMESPACE_ATOM_03, 'created'))			{				$this->data['date']['raw'] = $return[0]['data'];			}			elseif ($return = $this->get_item_tags(SIMPLEPIE_NAMESPACE_ATOM_03, 'modified'))			{				$this->data['date']['raw'] = $return[0]['data'];			}			elseif ($return = $this->get_item_tags(SIMPLEPIE_NAMESPACE_RSS_20, 'pubDate'))			{				$this->data['date']['raw'] = $return[0]['data'];			}			elseif ($return = $this->get_item_tags(SIMPLEPIE_NAMESPACE_DC_11, 'date'))			{				$this->data['date']['raw'] = $return[0]['data'];			}			elseif ($return = $this->get_item_tags(SIMPLEPIE_NAMESPACE_DC_10, 'date'))			{				$this->data['date']['raw'] = $return[0]['data'];			}			if (!empty($this->data['date']['raw']))			{				$parser = SimplePie_Parse_Date::get();				$this->data['date']['parsed'] = $parser->parse($this->data['date']['raw']);			}			else			{				$this->data['date'] = null;			}		}		if ($this->data['date'])		{			$date_format = (string) $date_format;			switch ($date_format)			{				case '':					return $this->sanitize($this->data['date']['raw'], SIMPLEPIE_CONSTRUCT_TEXT);				case 'U':					return $this->data['date']['parsed'];				default:					return date($date_format, $this->data['date']['parsed']);			}		}		else		{			return null;		}	}	function get_local_date($date_format = '%c')	{		if (!$date_format)		{			return $this->sanitize($this->get_date(''), SIMPLEPIE_CONSTRUCT_TEXT);		}		elseif (($date = $this->get_date('U')) !== null)		{			return strftime($date_format, $date);		}		else		{			return null;		}	}	function get_permalink()	{		$link = $this->get_link();		$enclosure = $this->get_enclosure(0);		if ($link !== null)		{			return $link;		}		elseif ($enclosure !== null)		{			return $enclosure->get_link();		}		else		{			return null;		}	}	function get_link($key = 0, $rel = 'alternate')	{		$links = $this->get_links($rel);		if ($links[$key] !== null)		{			return $links[$key];		}		else		{			return null;		}	}	function get_links($rel = 'alternate')	{		if (!isset($this->data['links']))		{			$this->data['links'] = array();			foreach ((array) $this->get_item_tags(SIMPLEPIE_NAMESPACE_ATOM_10, 'link') as $link)			{				if (isset($link['attribs']['']['href']))				{					$link_rel = (isset($link['attribs']['']['rel'])) ? $link['attribs']['']['rel'] : 'alternate';					$this->data['links'][$link_rel][] = $this->sanitize($link['attribs']['']['href'], SIMPLEPIE_CONSTRUCT_IRI, $this->get_base($link));				}			}			foreach ((array) $this->get_item_tags(SIMPLEPIE_NAMESPACE_ATOM_03, 'link') as $link)			{				if (isset($link['attribs']['']['href']))				{					$link_rel = (isset($link['attribs']['']['rel'])) ? $link['attribs']['']['rel'] : 'alternate';					$this->data['links'][$link_rel][] = $this->sanitize($link['attribs']['']['href'], SIMPLEPIE_CONSTRUCT_IRI, $this->get_base($link));				}			}			if ($links = $this->get_item_tags(SIMPLEPIE_NAMESPACE_RSS_10, 'link'))			{				$this->data['links']['alternate'][] = $this->sanitize($links[0]['data'], SIMPLEPIE_CONSTRUCT_IRI, $this->get_base($links[0]));			}			if ($links = $this->get_item_tags(SIMPLEPIE_NAMESPACE_RSS_090, 'link'))			{				$this->data['links']['alternate'][] = $this->sanitize($links[0]['data'], SIMPLEPIE_CONSTRUCT_IRI, $this->get_base($links[0]));			}			if ($links = $this->get_item_tags(SIMPLEPIE_NAMESPACE_RSS_20, 'link'))			{				$this->data['links']['alternate'][] = $this->sanitize($links[0]['data'], SIMPLEPIE_CONSTRUCT_IRI, $this->get_base($links[0]));			}			if ($links = $this->get_item_tags(SIMPLEPIE_NAMESPACE_RSS_20, 'guid'))			{				if (!isset($links[0]['attribs']['']['isPermaLink']) || strtolower(trim($links[0]['attribs']['']['isPermaLink'])) === 'true')				{					$this->data['links']['alternate'][] = $this->sanitize($links[0]['data'], SIMPLEPIE_CONSTRUCT_IRI, $this->get_base($links[0]));				}			}			$keys = array_keys($this->data['links']);			foreach ($keys as $key)			{				if (SimplePie_Misc::is_isegment_nz_nc($key))				{					if (isset($this->data['links'][SIMPLEPIE_IANA_LINK_RELATIONS_REGISTRY . $key]))					{						$this->data['links'][SIMPLEPIE_IANA_LINK_RELATIONS_REGISTRY . $key] = array_merge($this->data['links'][$key], $this->data['links'][SIMPLEPIE_IANA_LINK_RELATIONS_REGISTRY . $key]);						$this->data['links'][$key] =& $this->data['links'][SIMPLEPIE_IANA_LINK_RELATIONS_REGISTRY . $key];					}					else					{						$this->data['links'][SIMPLEPIE_IANA_LINK_RELATIONS_REGISTRY . $key] =& $this->data['links'][$key];					}				}				elseif (substr($key, 0, 41) === SIMPLEPIE_IANA_LINK_RELATIONS_REGISTRY)				{					$this->data['links'][substr($key, 41)] =& $this->data['links'][$key];				}				$this->data['links'][$key] = array_unique($this->data['links'][$key]);			}		}		if (isset($this->data['links'][$rel]))		{			return $this->data['links'][$rel];		}		else		{			return null;		}	}	/**	 * @todo Add ability to prefer one type of content over another (in a media group).	 */	function get_enclosure($key = 0, $prefer = null)	{		$enclosures = $this->get_enclosures();		if (isset($enclosures[$key]))		{			return $enclosures[$key];		}		else		{			return null;		}	}	/**	 * Grabs all available enclosures (podcasts, etc.)	 *	 * Supports the <enclosure> RSS tag, as well as Media RSS and iTunes RSS.	 *	 * At this point, we're pretty much assuming that all enclosures for an item are the same content.  Anything else is too complicated to properly support.	 *	 * @todo Add support for end-user defined sorting of enclosures by type/handler (so we can prefer the faster-loading FLV over MP4).	 * @todo If an element exists at a level, but it's value is empty, we should fall back to the value from the parent (if it exists).	 */	function get_enclosures()	{		if (!isset($this->data['enclosures']))		{			$this->data['enclosures'] = array();			// Elements			$captions_parent = null;			$categories_parent = null;			$copyrights_parent = null;			$credits_parent = null;			$description_parent = null;			$duration_parent = null;			$hashes_parent = null;			$keywords_parent = null;			$player_parent = null;			$ratings_parent = null;			$restrictions_parent = null;			$thumbnails_parent = null;			$title_parent = null;			// Let's do the channel and item-level ones first, and just re-use them if we need to.			$parent = $this->get_feed();			// CAPTIONS			if ($captions = $this->get_item_tags(SIMPLEPIE_NAMESPACE_MEDIARSS, 'text'))			{				foreach ($captions as $caption)				{					$caption_type = null;					$caption_lang = null;					$caption_startTime = null;					$caption_endTime = null;					$caption_text = null;					if (isset($caption['attribs']['']['type']))					{						$caption_type = $this->sanitize($caption['attribs']['']['type'], SIMPLEPIE_CONSTRUCT_TEXT);					}					if (isset($caption['attribs']['']['lang']))					{						$caption_lang = $this->sanitize($caption['attribs']['']['lang'], SIMPLEPIE_CONSTRUCT_TEXT);					}					if (isset($caption['attribs']['']['start']))					{						$caption_startTime = $this->sanitize($caption['attribs']['']['start'], SIMPLEPIE_CONSTRUCT_TEXT);					}					if (isset($caption['attribs']['']['end']))					{						$caption_endTime = $this->sanitize($caption['attribs']['']['end'], SIMPLEPIE_CONSTRUCT_TEXT);					}					if (isset($caption['data']))					{						$caption_text = $this->sanitize($caption['data'], SIMPLEPIE_CONSTRUCT_TEXT);					}					$captions_parent[] = new $this->feed->caption_class($caption_type, $caption_lang, $caption_startTime, $caption_endTime, $caption_text);				}			}			elseif ($captions = $parent->get_channel_tags(SIMPLEPIE_NAMESPACE_MEDIARSS, 'text'))			{				foreach ($captions as $caption)				{					$caption_type = null;					$caption_lang = null;					$caption_startTime = null;					$caption_endTime = null;					$caption_text = null;					if (isset($caption['attribs']['']['type']))					{						$caption_type = $this->sanitize($caption['attribs']['']['type'], SIMPLEPIE_CONSTRUCT_TEXT);					}					if (isset($caption['attribs']['']['lang']))					{						$caption_lang = $this->sanitize($caption['attribs']['']['lang'], SIMPLEPIE_CONSTRUCT_TEXT);					}					if (isset($caption['attribs']['']['start']))					{						$caption_startTime = $this->sanitize($caption['attribs']['']['start'], SIMPLEPIE_CONSTRUCT_TEXT);					}					if (isset($caption['attribs']['']['end']))					{						$caption_endTime = $this->sanitize($caption['attribs']['']['end'], SIMPLEPIE_CONSTRUCT_TEXT);					}					if (isset($caption['data']))					{						$caption_text = $this->sanitize($caption['data'], SIMPLEPIE_CONSTRUCT_TEXT);					}					$captions_parent[] = new $this->feed->caption_class($caption_type, $caption_lang, $caption_startTime, $caption_endTime, $caption_text);				}			}			if (is_array($captions_parent))			{				$captions_parent = array_values(SimplePie_Misc::array_unique($captions_parent));			}			// CATEGORIES			foreach ((array) $this->get_item_tags(SIMPLEPIE_NAMESPACE_MEDIARSS, 'category') as $category)			{				$term = null;				$scheme = null;				$label = null;				if (isset($category['data']))				{					$term = $this->sanitize($category['data'], SIMPLEPIE_CONSTRUCT_TEXT);				}				if (isset($category['attribs']['']['scheme']))				{					$scheme = $this->sanitize($category['attribs']['']['scheme'], SIMPLEPIE_CONSTRUCT_TEXT);				}				else				{					$scheme = 'http://search.yahoo.com/mrss/category_schema';				}				if (isset($category['attribs']['']['label']))				{					$label = $this->sanitize($category['attribs']['']['label'], SIMPLEPIE_CONSTRUCT_TEXT);				}				$categories_parent[] = new $this->feed->category_class($term, $scheme, $label);			}			foreach ((array) $parent->get_channel_tags(SIMPLEPIE_NAMESPACE_MEDIARSS, 'category') as $category)			{				$term = null;				$scheme = null;				$label = null;				if (isset($category['data']))				{					$term = $this->sanitize($category['data'], SIMPLEPIE_CONSTRUCT_TEXT);				}				if (isset($category['attribs']['']['scheme']))				{					$scheme = $this->sanitize($category['attribs']['']['scheme'], SIMPLEPIE_CONSTRUCT_TEXT);				}				else				{					$scheme = 'http://search.yahoo.com/mrss/category_schema';				}				if (isset($category['attribs']['']['label']))				{					$label = $this->sanitize($category['attribs']['']['label'], SIMPLEPIE_CONSTRUCT_TEXT);				}				$categories_parent[] = new $this->feed->category_class($term, $scheme, $label);			}			foreach ((array) $parent->get_channel_tags(SIMPLEPIE_NAMESPACE_ITUNES, 'category') as $category)			{				$term = null;				$scheme = 'http://www.itunes.com/dtds/podcast-1.0.dtd';				$label = null;				if (isset($category['attribs']['']['text']))				{					$label = $this->sanitize($category['attribs']['']['text'], SIMPLEPIE_CONSTRUCT_TEXT);				}				$categories_parent[] = new $this->feed->category_class($term, $scheme, $label);				if (isset($category['child'][SIMPLEPIE_NAMESPACE_ITUNES]['category']))				{					foreach ((array) $category['child'][SIMPLEPIE_NAMESPACE_ITUNES]['category'] as $subcategory)					{						if (isset($subcategory['attribs']['']['text']))						{							$label = $this->sanitize($subcategory['attribs']['']['text'], SIMPLEPIE_CONSTRUCT_TEXT);						}						$categories_parent[] = new $this->feed->category_class($term, $scheme, $label);					}				}			}			if (is_array($categories_parent))			{				$categories_parent = array_values(SimplePie_Misc::array_unique($categories_parent));			}			// COPYRIGHT			if ($copyright = $this->get_item_tags(SIMPLEPIE_NAMESPACE_MEDIARSS, 'copyright'))			{				$copyright_url = null;				$copyright_label = null;				if (isset($copyright[0]['attribs']['']['url']))				{					$copyright_url = $this->sanitize($copyright[0]['attribs']['']['url'], SIMPLEPIE_CONSTRUCT_TEXT);				}				if (isset($copyright[0]['data']))				{					$copyright_label = $this->sanitize($copyright[0]['data'], SIMPLEPIE_CONSTRUCT_TEXT);				}				$copyrights_parent = new $this->feed->copyright_class($copyright_url, $copyright_label);			}			elseif ($copyright = $parent->get_channel_tags(SIMPLEPIE_NAMESPACE_MEDIARSS, 'copyright'))			{				$copyright_url = null;				$copyright_label = null;				if (isset($copyright[0]['attribs']['']['url']))				{					$copyright_url = $this->sanitize($copyright[0]['attribs']['']['url'], SIMPLEPIE_CONSTRUCT_TEXT);				}				if (isset($copyright[0]['data']))				{					$copyright_label = $this->sanitize($copyright[0]['data'], SIMPLEPIE_CONSTRUCT_TEXT);				}				$copyrights_parent = new $this->feed->copyright_class($copyright_url, $copyright_label);			}			// CREDITS			if ($credits = $this->get_item_tags(SIMPLEPIE_NAMESPACE_MEDIARSS, 'credit'))			{				foreach ($credits as $credit)				{					$credit_role = null;					$credit_scheme = null;					$credit_name = null;					if (isset($credit['attribs']['']['role']))					{						$credit_role = $this->sanitize($credit['attribs']['']['role'], SIMPLEPIE_CONSTRUCT_TEXT);					}					if (isset($credit['attribs']['']['scheme']))					{						$credit_scheme = $this->sanitize($credit['attribs']['']['scheme'], SIMPLEPIE_CONSTRUCT_TEXT);					}					else					{						$credit_scheme = 'urn:ebu';					}					if (isset($credit['data']))					{						$credit_name = $this->sanitize($credit['data'], SIMPLEPIE_CONSTRUCT_TEXT);					}					$credits_parent[] = new $this->feed->credit_class($credit_role, $credit_scheme, $credit_name);				}			}			elseif ($credits = $parent->get_channel_tags(SIMPLEPIE_NAMESPACE_MEDIARSS, 'credit'))			{				foreach ($credits as $credit)				{					$credit_role = null;					$credit_scheme = null;					$credit_name = null;					if (isset($credit['attribs']['']['role']))					{						$credit_role = $this->sanitize($credit['attribs']['']['role'], SIMPLEPIE_CONSTRUCT_TEXT);					}					if (isset($credit['attribs']['']['scheme']))					{						$credit_scheme = $this->sanitize($credit['attribs']['']['scheme'], SIMPLEPIE_CONSTRUCT_TEXT);					}					else					{						$credit_scheme = 'urn:ebu';					}					if (isset($credit['data']))					{						$credit_name = $this->sanitize($credit['data'], SIMPLEPIE_CONSTRUCT_TEXT);					}					$credits_parent[] = new $this->feed->credit_class($credit_role, $credit_scheme, $credit_name);				}			}			if (is_array($credits_parent))			{				$credits_parent = array_values(SimplePie_Misc::array_unique($credits_parent));			}			// DESCRIPTION			if ($description_parent = $this->get_item_tags(SIMPLEPIE_NAMESPACE_MEDIARSS, 'description'))			{				if (isset($description_parent[0]['data']))				{					$description_parent = $this->sanitize($description_parent[0]['data'], SIMPLEPIE_CONSTRUCT_TEXT);				}			}			elseif ($description_parent = $parent->get_channel_tags(SIMPLEPIE_NAMESPACE_MEDIARSS, 'description'))			{				if (isset($description_parent[0]['data']))				{					$description_parent = $this->sanitize($description_parent[0]['data'], SIMPLEPIE_CONSTRUCT_TEXT);				}			}			// DURATION			if ($duration_parent = $this->get_item_tags(SIMPLEPIE_NAMESPACE_ITUNES, 'duration'))			{				$seconds = null;				$minutes = null;				$hours = null;				if (isset($duration_parent[0]['data']))				{					$temp = explode(':', $this->sanitize($duration_parent[0]['data'], SIMPLEPIE_CONSTRUCT_TEXT));					if (sizeof($temp) > 0)					{						(int) $seconds = array_pop($temp);					}					if (sizeof($temp) > 0)					{						(int) $minutes = array_pop($temp);						$seconds += $minutes * 60;					}					if (sizeof($temp) > 0)					{						(int) $hours = array_pop($temp);						$seconds += $hours * 3600;					}					unset($temp);					$duration_parent = $seconds;				}			}			// HASHES			if ($hashes_iterator = $this->get_item_tags(SIMPLEPIE_NAMESPACE_MEDIARSS, 'hash'))			{				foreach ($hashes_iterator as $hash)				{					$value = null;					$algo = null;					if (isset($hash['data']))					{						$value = $this->sanitize($hash['data'], SIMPLEPIE_CONSTRUCT_TEXT);					}					if (isset($hash['attribs']['']['algo']))					{						$algo = $this->sanitize($hash['attribs']['']['algo'], SIMPLEPIE_CONSTRUCT_TEXT);					}					else					{						$algo = 'md5';					}					$hashes_parent[] = $algo.':'.$value;				}			}			elseif ($hashes_iterator = $parent->get_channel_tags(SIMPLEPIE_NAMESPACE_MEDIARSS, 'hash'))			{				foreach ($hashes_iterator as $hash)				{					$value = null;					$algo = null;					if (isset($hash['data']))					{						$value = $this->sanitize($hash['data'], SIMPLEPIE_CONSTRUCT_TEXT);					}					if (isset($hash['attribs']['']['algo']))					{						$algo = $this->sanitize($hash['attribs']['']['algo'], SIMPLEPIE_CONSTRUCT_TEXT);					}					else					{						$algo = 'md5';					}					$hashes_parent[] = $algo.':'.$value;				}			}			if (is_array($hashes_parent))			{				$hashes_parent = array_values(SimplePie_Misc::array_unique($hashes_parent));			}			// KEYWORDS			if ($keywords = $this->get_item_tags(SIMPLEPIE_NAMESPACE_MEDIARSS, 'keywords'))			{				if (isset($keywords[0]['data']))				{					$temp = explode(',', $this->sanitize($keywords[0]['data'], SIMPLEPIE_CONSTRUCT_TEXT));					foreach ($temp as $word)					{						$keywords_parent[] = trim($word);					}				}				unset($temp);			}			elseif ($keywords = $this->get_item_tags(SIMPLEPIE_NAMESPACE_ITUNES, 'keywords'))			{				if (isset($keywords[0]['data']))				{					$temp = explode(',', $this->sanitize($keywords[0]['data'], SIMPLEPIE_CONSTRUCT_TEXT));					foreach ($temp as $word)					{						$keywords_parent[] = trim($word);					}				}				unset($temp);			}			elseif ($keywords = $parent->get_channel_tags(SIMPLEPIE_NAMESPACE_MEDIARSS, 'keywords'))			{				if (isset($keywords[0]['data']))				{					$temp = explode(',', $this->sanitize($keywords[0]['data'], SIMPLEPIE_CONSTRUCT_TEXT));					foreach ($temp as $word)					{						$keywords_parent[] = trim($word);					}				}				unset($temp);			}			elseif ($keywords = $parent->get_channel_tags(SIMPLEPIE_NAMESPACE_ITUNES, 'keywords'))			{				if (isset($keywords[0]['data']))				{					$temp = explode(',', $this->sanitize($keywords[0]['data'], SIMPLEPIE_CONSTRUCT_TEXT));					foreach ($temp as $word)					{						$keywords_parent[] = trim($word);					}				}				unset($temp);			}			if (is_array($keywords_parent))			{				$keywords_parent = array_values(SimplePie_Misc::array_unique($keywords_parent));			}			// PLAYER			if ($player_parent = $this->get_item_tags(SIMPLEPIE_NAMESPACE_MEDIARSS, 'player'))			{				if (isset($player_parent[0]['attribs']['']['url']))				{					$player_parent = $this->sanitize($player_parent[0]['attribs']['']['url'], SIMPLEPIE_CONSTRUCT_IRI);				}			}			elseif ($player_parent = $parent->get_channel_tags(SIMPLEPIE_NAMESPACE_MEDIARSS, 'player'))			{				if (isset($player_parent[0]['attribs']['']['url']))				{					$player_parent = $this->sanitize($player_parent[0]['attribs']['']['url'], SIMPLEPIE_CONSTRUCT_IRI);				}			}			// RATINGS			if ($ratings = $this->get_item_tags(SIMPLEPIE_NAMESPACE_MEDIARSS, 'rating'))			{				foreach ($ratings as $rating)				{					$rating_scheme = null;					$rating_value = null;					if (isset($rating['attribs']['']['scheme']))					{						$rating_scheme = $this->sanitize($rating['attribs']['']['scheme'], SIMPLEPIE_CONSTRUCT_TEXT);					}					else					{						$rating_scheme = 'urn:simple';					}					if (isset($rating['data']))					{						$rating_value = $this->sanitize($rating['data'], SIMPLEPIE_CONSTRUCT_TEXT);					}					$ratings_parent[] = new $this->feed->rating_class($rating_scheme, $rating_value);				}			}			elseif ($ratings = $this->get_item_tags(SIMPLEPIE_NAMESPACE_ITUNES, 'explicit'))			{				foreach ($ratings as $rating)				{					$rating_scheme = 'urn:itunes';					$rating_value = null;					if (isset($rating['data']))					{						$rating_value = $this->sanitize($rating['data'], SIMPLEPIE_CONSTRUCT_TEXT);					}					$ratings_parent[] = new $this->feed->rating_class($rating_scheme, $rating_value);				}			}			elseif ($ratings = $parent->get_channel_tags(SIMPLEPIE_NAMESPACE_MEDIARSS, 'rating'))			{				foreach ($ratings as $rating)				{					$rating_scheme = null;					$rating_value = null;					if (isset($rating['attribs']['']['scheme']))					{						$rating_scheme = $this->sanitize($rating['attribs']['']['scheme'], SIMPLEPIE_CONSTRUCT_TEXT);					}					else					{						$rating_scheme = 'urn:simple';					}					if (isset($rating['data']))					{						$rating_value = $this->sanitize($rating['data'], SIMPLEPIE_CONSTRUCT_TEXT);					}					$ratings_parent[] = new $this->feed->rating_class($rating_scheme, $rating_value);				}			}			elseif ($ratings = $parent->get_channel_tags(SIMPLEPIE_NAMESPACE_ITUNES, 'explicit'))			{				foreach ($ratings as $rating)				{					$rating_scheme = 'urn:itunes';					$rating_value = null;					if (isset($rating['data']))					{						$rating_value = $this->sanitize($rating['data'], SIMPLEPIE_CONSTRUCT_TEXT);					}					$ratings_parent[] = new $this->feed->rating_class($rating_scheme, $rating_value);				}			}			if (is_array($ratings_parent))			{				$ratings_parent = array_values(SimplePie_Misc::array_unique($ratings_parent));			}			// RESTRICTIONS			if ($restrictions = $this->get_item_tags(SIMPLEPIE_NAMESPACE_MEDIARSS, 'restriction'))			{				foreach ($restrictions as $restriction)				{					$restriction_relationship = null;					$restriction_type = null;					$restriction_value = null;					if (isset($restriction['attribs']['']['relationship']))					{						$restriction_relationship = $this->sanitize($restriction['attribs']['']['relationship'], SIMPLEPIE_CONSTRUCT_TEXT);					}					if (isset($restriction['attribs']['']['type']))					{						$restriction_type = $this->sanitize($restriction['attribs']['']['type'], SIMPLEPIE_CONSTRUCT_TEXT);					}					if (isset($restriction['data']))					{						$restriction_value = $this->sanitize($restriction['data'], SIMPLEPIE_CONSTRUCT_TEXT);					}					$restrictions_parent[] = new $this->feed->restriction_class($restriction_relationship, $restriction_type, $restriction_value);				}			}			elseif ($restrictions = $this->get_item_tags(SIMPLEPIE_NAMESPACE_ITUNES, 'block'))			{				foreach ($restrictions as $restriction)				{					$restriction_relationship = 'allow';					$restriction_type = null;					$restriction_value = 'itunes';					if (isset($restriction['data']) && strtolower($restriction['data']) === 'yes')					{						$restriction_relationship = 'deny';					}					$restrictions_parent[] = new $this->feed->restriction_class($restriction_relationship, $restriction_type, $restriction_value);				}			}			elseif ($restrictions = $parent->get_channel_tags(SIMPLEPIE_NAMESPACE_MEDIARSS, 'restriction'))			{				foreach ($restrictions as $restriction)				{					$restriction_relationship = null;					$restriction_type = null;					$restriction_value = null;					if (isset($restriction['attribs']['']['relationship']))					{						$restriction_relationship = $this->sanitize($restriction['attribs']['']['relationship'], SIMPLEPIE_CONSTRUCT_TEXT);					}					if (isset($restriction['attribs']['']['type']))					{						$restriction_type = $this->sanitize($restriction['attribs']['']['type'], SIMPLEPIE_CONSTRUCT_TEXT);					}					if (isset($restriction['data']))					{						$restriction_value = $this->sanitize($restriction['data'], SIMPLEPIE_CONSTRUCT_TEXT);					}					$restrictions_parent[] = new $this->feed->restriction_class($restriction_relationship, $restriction_type, $restriction_value);				}			}			elseif ($restrictions = $parent->get_channel_tags(SIMPLEPIE_NAMESPACE_ITUNES, 'block'))			{				foreach ($restrictions as $restriction)				{					$restriction_relationship = 'allow';					$restriction_type = null;					$restriction_value = 'itunes';					if (isset($restriction['data']) && strtolower($restriction['data']) === 'yes')					{						$restriction_relationship = 'deny';					}					$restrictions_parent[] = new $this->feed->restriction_class($restriction_relationship, $restriction_type, $restriction_value);				}			}			if (is_array($restrictions_parent))			{				$restrictions_parent = array_values(SimplePie_Misc::array_unique($restrictions_parent));			}			// THUMBNAILS			if ($thumbnails = $this->get_item_tags(SIMPLEPIE_NAMESPACE_MEDIARSS, 'thumbnail'))			{				foreach ($thumbnails as $thumbnail)				{					if (isset($thumbnail['attribs']['']['url']))					{						$thumbnails_parent[] = $this->sanitize($thumbnail['attribs']['']['url'], SIMPLEPIE_CONSTRUCT_IRI);					}				}			}			elseif ($thumbnails = $parent->get_channel_tags(SIMPLEPIE_NAMESPACE_MEDIARSS, 'thumbnail'))			{				foreach ($thumbnails as $thumbnail)				{					if (isset($thumbnail['attribs']['']['url']))					{						$thumbnails_parent[] = $this->sanitize($thumbnail['attribs']['']['url'], SIMPLEPIE_CONSTRUCT_IRI);					}				}			}			// TITLES			if ($title_parent = $this->get_item_tags(SIMPLEPIE_NAMESPACE_MEDIARSS, 'title'))			{				if (isset($title_parent[0]['data']))				{					$title_parent = $this->sanitize($title_parent[0]['data'], SIMPLEPIE_CONSTRUCT_TEXT);				}			}			elseif ($title_parent = $parent->get_channel_tags(SIMPLEPIE_NAMESPACE_MEDIARSS, 'title'))			{				if (isset($title_parent[0]['data']))				{					$title_parent = $this->sanitize($title_parent[0]['data'], SIMPLEPIE_CONSTRUCT_TEXT);				}			}			// Clear the memory			unset($parent);			// Attributes			$bitrate = null;			$channels = null;			$duration = null;			$expression = null;			$framerate = null;			$height = null;			$javascript = null;			$lang = null;			$length = null;			$medium = null;			$samplingrate = null;			$type = null;			$url = null;			$width = null;			// Elements			$captions = null;			$categories = null;			$copyrights = null;			$credits = null;			$description = null;			$hashes = null;			$keywords = null;			$player = null;			$ratings = null;			$restrictions = null;			$thumbnails = null;			$title = null;			// If we have media:group tags, loop through them.			foreach ((array) $this->get_item_tags(SIMPLEPIE_NAMESPACE_MEDIARSS, 'group') as $group)			{				// If we have media:content tags, loop through them.				foreach ((array) $group['child'][SIMPLEPIE_NAMESPACE_MEDIARSS]['content'] as $content)				{					if (isset($content['attribs']['']['url']))					{						// Attributes						$bitrate = null;						$channels = null;						$duration = null;						$expression = null;						$framerate = null;						$height = null;						$javascript = null;						$lang = null;						$length = null;						$medium = null;						$samplingrate = null;						$type = null;						$url = null;						$width = null;						// Elements						$captions = null;						$categories = null;						$copyrights = null;						$credits = null;						$description = null;						$hashes = null;						$keywords = null;						$player = null;						$ratings = null;						$restrictions = null;						$thumbnails = null;						$title = null;						// Start checking the attributes of media:content						if (isset($content['attribs']['']['bitrate']))						{							$bitrate = $this->sanitize($content['attribs']['']['bitrate'], SIMPLEPIE_CONSTRUCT_TEXT);						}						if (isset($content['attribs']['']['channels']))						{							$channels = $this->sanitize($content['attribs']['']['channels'], SIMPLEPIE_CONSTRUCT_TEXT);						}						if (isset($content['attribs']['']['duration']))						{							$duration = $this->sanitize($content['attribs']['']['duration'], SIMPLEPIE_CONSTRUCT_TEXT);						}						else						{							$duration = $duration_parent;						}						if (isset($content['attribs']['']['expression']))						{							$expression = $this->sanitize($content['attribs']['']['expression'], SIMPLEPIE_CONSTRUCT_TEXT);						}						if (isset($content['attribs']['']['framerate']))						{							$framerate = $this->sanitize($content['attribs']['']['framerate'], SIMPLEPIE_CONSTRUCT_TEXT);						}						if (isset($content['attribs']['']['height']))						{							$height = $this->sanitize($content['attribs']['']['height'], SIMPLEPIE_CONSTRUCT_TEXT);						}						if (isset($content['attribs']['']['lang']))						{							$lang = $this->sanitize($content['attribs']['']['lang'], SIMPLEPIE_CONSTRUCT_TEXT);						}						if (isset($content['attribs']['']['fileSize']))						{							$length = ceil($content['attribs']['']['fileSize']);						}						if (isset($content['attribs']['']['medium']))						{							$medium = $this->sanitize($content['attribs']['']['medium'], SIMPLEPIE_CONSTRUCT_TEXT);						}						if (isset($content['attribs']['']['samplingrate']))						{							$samplingrate = $this->sanitize($content['attribs']['']['samplingrate'], SIMPLEPIE_CONSTRUCT_TEXT);						}						if (isset($content['attribs']['']['type']))						{							$type = $this->sanitize($content['attribs']['']['type'], SIMPLEPIE_CONSTRUCT_TEXT);						}						if (isset($content['attribs']['']['width']))						{							$width = $this->sanitize($content['attribs']['']['width'], SIMPLEPIE_CONSTRUCT_TEXT);						}						$url = $this->sanitize($content['attribs']['']['url'], SIMPLEPIE_CONSTRUCT_IRI);						// Checking the other optional media: elements. Priority: media:content, media:group, item, channel						// CAPTIONS						if (isset($content['child'][SIMPLEPIE_NAMESPACE_MEDIARSS]['text']))						{							foreach ($content['child'][SIMPLEPIE_NAMESPACE_MEDIARSS]['text'] as $caption)							{								$caption_type = null;								$caption_lang = null;								$caption_startTime = null;								$caption_endTime = null;								$caption_text = null;								if (isset($caption['attribs']['']['type']))								{									$caption_type = $this->sanitize($caption['attribs']['']['type'], SIMPLEPIE_CONSTRUCT_TEXT);								}								if (isset($caption['attribs']['']['lang']))								{									$caption_lang = $this->sanitize($caption['attribs']['']['lang'], SIMPLEPIE_CONSTRUCT_TEXT);								}								if (isset($caption['attribs']['']['start']))								{									$caption_startTime = $this->sanitize($caption['attribs']['']['start'], SIMPLEPIE_CONSTRUCT_TEXT);								}								if (isset($caption['attribs']['']['end']))								{									$caption_endTime = $this->sanitize($caption['attribs']['']['end'], SIMPLEPIE_CONSTRUCT_TEXT);								}								if (isset($caption['data']))								{									$caption_text = $this->sanitize($caption['data'], SIMPLEPIE_CONSTRUCT_TEXT);								}								$captions[] = new $this->feed->caption_class($caption_type, $caption_lang, $caption_startTime, $caption_endTime, $caption_text);							}							if (is_array($captions))							{								$captions = array_values(SimplePie_Misc::array_unique($captions));							}						}						elseif (isset($group['child'][SIMPLEPIE_NAMESPACE_MEDIARSS]['text']))						{							foreach ($group['child'][SIMPLEPIE_NAMESPACE_MEDIARSS]['text'] as $caption)							{								$caption_type = null;								$caption_lang = null;								$caption_startTime = null;								$caption_endTime = null;								$caption_text = null;								if (isset($caption['attribs']['']['type']))								{									$caption_type = $this->sanitize($caption['attribs']['']['type'], SIMPLEPIE_CONSTRUCT_TEXT);								}								if (isset($caption['attribs']['']['lang']))								{									$caption_lang = $this->sanitize($caption['attribs']['']['lang'], SIMPLEPIE_CONSTRUCT_TEXT);								}								if (isset($caption['attribs']['']['start']))								{									$caption_startTime = $this->sanitize($caption['attribs']['']['start'], SIMPLEPIE_CONSTRUCT_TEXT);								}								if (isset($caption['attribs']['']['end']))								{									$caption_endTime = $this->sanitize($caption['attribs']['']['end'], SIMPLEPIE_CONSTRUCT_TEXT);								}								if (isset($caption['data']))								{									$caption_text = $this->sanitize($caption['data'], SIMPLEPIE_CONSTRUCT_TEXT);								}								$captions[] = new $this->feed->caption_class($caption_type, $caption_lang, $caption_startTime, $caption_endTime, $caption_text);							}							if (is_array($captions))							{								$captions = array_values(SimplePie_Misc::array_unique($captions));							}						}						else						{							$captions = $captions_parent;						}						// CATEGORIES						if (isset($content['child'][SIMPLEPIE_NAMESPACE_MEDIARSS]['category']))						{							foreach ((array) $content['child'][SIMPLEPIE_NAMESPACE_MEDIARSS]['category'] as $category)							{								$term = null;								$scheme = null;								$label = null;								if (isset($category['data']))								{									$term = $this->sanitize($category['data'], SIMPLEPIE_CONSTRUCT_TEXT);								}								if (isset($category['attribs']['']['scheme']))								{									$scheme = $this->sanitize($category['attribs']['']['scheme'], SIMPLEPIE_CONSTRUCT_TEXT);								}								else								{									$scheme = 'http://search.yahoo.com/mrss/category_schema';								}								if (isset($category['attribs']['']['label']))								{									$label = $this->sanitize($category['attribs']['']['label'], SIMPLEPIE_CONSTRUCT_TEXT);								}								$categories[] = new $this->feed->category_class($term, $scheme, $label);							}						}						if (isset($group['child'][SIMPLEPIE_NAMESPACE_MEDIARSS]['category']))						{							foreach ((array) $group['child'][SIMPLEPIE_NAMESPACE_MEDIARSS]['category'] as $category)							{								$term = null;								$scheme = null;								$label = null;								if (isset($category['data']))								{									$term = $this->sanitize($category['data'], SIMPLEPIE_CONSTRUCT_TEXT);								}								if (isset($category['attribs']['']['scheme']))								{									$scheme = $this->sanitize($category['attribs']['']['scheme'], SIMPLEPIE_CONSTRUCT_TEXT);								}								else								{									$scheme = 'http://search.yahoo.com/mrss/category_schema';								}								if (isset($category['attribs']['']['label']))								{									$label = $this->sanitize($category['attribs']['']['label'], SIMPLEPIE_CONSTRUCT_TEXT);								}								$categories[] = new $this->feed->category_class($term, $scheme, $label);							}						}						if (is_array($categories) && is_array($categories_parent))						{							$categories = array_values(SimplePie_Misc::array_unique(array_merge($categories, $categories_parent)));						}						elseif (is_array($categories))						{							$categories = array_values(SimplePie_Misc::array_unique($categories));						}						elseif (is_array($categories_parent))						{							$categories = array_values(SimplePie_Misc::array_unique($categories_parent));						}						// COPYRIGHTS						if (isset($content['child'][SIMPLEPIE_NAMESPACE_MEDIARSS]['copyright']))						{							$copyright_url = null;							$copyright_label = null;							if (isset($content['child'][SIMPLEPIE_NAMESPACE_MEDIARSS]['copyright'][0]['attribs']['']['url']))							{								$copyright_url = $this->sanitize($content['child'][SIMPLEPIE_NAMESPACE_MEDIARSS]['copyright'][0]['attribs']['']['url'], SIMPLEPIE_CONSTRUCT_TEXT);							}							if (isset($content['child'][SIMPLEPIE_NAMESPACE_MEDIARSS]['copyright'][0]['data']))							{								$copyright_label = $this->sanitize($content['child'][SIMPLEPIE_NAMESPACE_MEDIARSS]['copyright'][0]['data'], SIMPLEPIE_CONSTRUCT_TEXT);							}							$copyrights = new $this->feed->copyright_class($copyright_url, $copyright_label);						}						elseif (isset($group['child'][SIMPLEPIE_NAMESPACE_MEDIARSS]['copyright']))						{							$copyright_url = null;							$copyright_label = null;							if (isset($group['child'][SIMPLEPIE_NAMESPACE_MEDIARSS]['copyright'][0]['attribs']['']['url']))							{								$copyright_url = $this->sanitize($group['child'][SIMPLEPIE_NAMESPACE_MEDIARSS]['copyright'][0]['attribs']['']['url'], SIMPLEPIE_CONSTRUCT_TEXT);							}							if (isset($group['child'][SIMPLEPIE_NAMESPACE_MEDIARSS]['copyright'][0]['data']))							{								$copyright_label = $this->sanitize($group['child'][SIMPLEPIE_NAMESPACE_MEDIARSS]['copyright'][0]['data'], SIMPLEPIE_CONSTRUCT_TEXT);							}							$copyrights = new $this->feed->copyright_class($copyright_url, $copyright_label);						}						else						{							$copyrights = $copyrights_parent;						}						// CREDITS						if (isset($content['child'][SIMPLEPIE_NAMESPACE_MEDIARSS]['credit']))						{							foreach ($content['child'][SIMPLEPIE_NAMESPACE_MEDIARSS]['credit'] as $credit)							{								$credit_role = null;								$credit_scheme = null;								$credit_name = null;								if (isset($credit['attribs']['']['role']))								{									$credit_role = $this->sanitize($credit['attribs']['']['role'], SIMPLEPIE_CONSTRUCT_TEXT);								}								if (isset($credit['attribs']['']['scheme']))								{									$credit_scheme = $this->sanitize($credit['attribs']['']['scheme'], SIMPLEPIE_CONSTRUCT_TEXT);								}								else								{									$credit_scheme = 'urn:ebu';								}								if (isset($credit['data']))								{									$credit_name = $this->sanitize($credit['data'], SIMPLEPIE_CONSTRUCT_TEXT);								}								$credits[] = new $this->feed->credit_class($credit_role, $credit_scheme, $credit_name);							}							if (is_array($credits))							{								$credits = array_values(SimplePie_Misc::array_unique($credits));							}						}						elseif (isset($group['child'][SIMPLEPIE_NAMESPACE_MEDIARSS]['credit']))						{							foreach ($group['child'][SIMPLEPIE_NAMESPACE_MEDIARSS]['credit'] as $credit)							{								$credit_role = null;								$credit_scheme = null;								$credit_name = null;								if (isset($credit['attribs']['']['role']))								{									$credit_role = $this->sanitize($credit['attribs']['']['role'], SIMPLEPIE_CONSTRUCT_TEXT);								}								if (isset($credit['attribs']['']['scheme']))								{									$credit_scheme = $this->sanitize($credit['attribs']['']['scheme'], SIMPLEPIE_CONSTRUCT_TEXT);								}								else								{									$credit_scheme = 'urn:ebu';								}								if (isset($credit['data']))								{									$credit_name = $this->sanitize($credit['data'], SIMPLEPIE_CONSTRUCT_TEXT);								}								$credits[] = new $this->feed->credit_class($credit_role, $credit_scheme, $credit_name);							}							if (is_array($credits))							{								$credits = array_values(SimplePie_Misc::array_unique($credits));							}						}						else						{							$credits = $credits_parent;						}						// DESCRIPTION						if (isset($content['child'][SIMPLEPIE_NAMESPACE_MEDIARSS]['description']))						{							$description = $this->sanitize($content['child'][SIMPLEPIE_NAMESPACE_MEDIARSS]['description'][0]['data'], SIMPLEPIE_CONSTRUCT_TEXT);						}						elseif (isset($group['child'][SIMPLEPIE_NAMESPACE_MEDIARSS]['description']))						{							$description = $this->sanitize($group['child'][SIMPLEPIE_NAMESPACE_MEDIARSS]['description'][0]['data'], SIMPLEPIE_CONSTRUCT_TEXT);						}						else						{							$description = $description_parent;						}						// HASHES						if (isset($content['child'][SIMPLEPIE_NAMESPACE_MEDIARSS]['hash']))						{							foreach ($content['child'][SIMPLEPIE_NAMESPACE_MEDIARSS]['hash'] as $hash)							{								$value = null;								$algo = null;								if (isset($hash['data']))								{									$value = $this->sanitize($hash['data'], SIMPLEPIE_CONSTRUCT_TEXT);								}								if (isset($hash['attribs']['']['algo']))								{									$algo = $this->sanitize($hash['attribs']['']['algo'], SIMPLEPIE_CONSTRUCT_TEXT);								}								else								{									$algo = 'md5';								}								$hashes[] = $algo.':'.$value;							}							if (is_array($hashes))							{								$hashes = array_values(SimplePie_Misc::array_unique($hashes));							}						}						elseif (isset($group['child'][SIMPLEPIE_NAMESPACE_MEDIARSS]['hash']))						{							foreach ($group['child'][SIMPLEPIE_NAMESPACE_MEDIARSS]['hash'] as $hash)							{								$value = null;								$algo = null;								if (isset($hash['data']))								{									$value = $this->sanitize($hash['data'], SIMPLEPIE_CONSTRUCT_TEXT);								}								if (isset($hash['attribs']['']['algo']))								{									$algo = $this->sanitize($hash['attribs']['']['algo'], SIMPLEPIE_CONSTRUCT_TEXT);								}								else								{									$algo = 'md5';								}								$hashes[] = $algo.':'.$value;							}							if (is_array($hashes))							{								$hashes = array_values(SimplePie_Misc::array_unique($hashes));							}						}						else						{							$hashes = $hashes_parent;						}						// KEYWORDS						if (isset($content['child'][SIMPLEPIE_NAMESPACE_MEDIARSS]['keywords']))						{							if (isset($content['child'][SIMPLEPIE_NAMESPACE_MEDIARSS]['keywords'][0]['data']))							{								$temp = explode(',', $this->sanitize($content['child'][SIMPLEPIE_NAMESPACE_MEDIARSS]['keywords'][0]['data'], SIMPLEPIE_CONSTRUCT_TEXT));								foreach ($temp as $word)								{									$keywords[] = trim($word);								}								unset($temp);							}							if (is_array($keywords))							{								$keywords = array_values(SimplePie_Misc::array_unique($keywords));							}						}						elseif (isset($group['child'][SIMPLEPIE_NAMESPACE_MEDIARSS]['keywords']))						{							if (isset($group['child'][SIMPLEPIE_NAMESPACE_MEDIARSS]['keywords'][0]['data']))							{								$temp = explode(',', $this->sanitize($group['child'][SIMPLEPIE_NAMESPACE_MEDIARSS]['keywords'][0]['data'], SIMPLEPIE_CONSTRUCT_TEXT));								foreach ($temp as $word)								{									$keywords[] = trim($word);								}								unset($temp);							}							if (is_array($keywords))							{								$keywords = array_values(SimplePie_Misc::array_unique($keywords));							}						}						else						{							$keywords = $keywords_parent;						}						// PLAYER						if (isset($content['child'][SIMPLEPIE_NAMESPACE_MEDIARSS]['player']))						{							$player = $this->sanitize($content['child'][SIMPLEPIE_NAMESPACE_MEDIARSS]['player'][0]['attribs']['']['url'], SIMPLEPIE_CONSTRUCT_IRI);						}						elseif (isset($group['child'][SIMPLEPIE_NAMESPACE_MEDIARSS]['player']))						{							$player = $this->sanitize($group['child'][SIMPLEPIE_NAMESPACE_MEDIARSS]['player'][0]['attribs']['']['url'], SIMPLEPIE_CONSTRUCT_IRI);						}						else						{							$player = $player_parent;						}						// RATINGS						if (isset($content['child'][SIMPLEPIE_NAMESPACE_MEDIARSS]['rating']))						{							foreach ($content['child'][SIMPLEPIE_NAMESPACE_MEDIARSS]['rating'] as $rating)							{								$rating_scheme = null;								$rating_value = null;								if (isset($rating['attribs']['']['scheme']))								{									$rating_scheme = $this->sanitize($rating['attribs']['']['scheme'], SIMPLEPIE_CONSTRUCT_TEXT);								}								else								{									$rating_scheme = 'urn:simple';								}								if (isset($rating['data']))								{									$rating_value = $this->sanitize($rating['data'], SIMPLEPIE_CONSTRUCT_TEXT);								}								$ratings[] = new $this->feed->rating_class($rating_scheme, $rating_value);							}							if (is_array($ratings))							{								$ratings = array_values(SimplePie_Misc::array_unique($ratings));							}						}						elseif (isset($group['child'][SIMPLEPIE_NAMESPACE_MEDIARSS]['rating']))						{							foreach ($group['child'][SIMPLEPIE_NAMESPACE_MEDIARSS]['rating'] as $rating)							{								$rating_scheme = null;								$rating_value = null;								if (isset($rating['attribs']['']['scheme']))								{									$rating_scheme = $this->sanitize($rating['attribs']['']['scheme'], SIMPLEPIE_CONSTRUCT_TEXT);								}								else								{									$rating_scheme = 'urn:simple';								}								if (isset($rating['data']))								{									$rating_value = $this->sanitize($rating['data'], SIMPLEPIE_CONSTRUCT_TEXT);								}								$ratings[] = new $this->feed->rating_class($rating_scheme, $rating_value);							}							if (is_array($ratings))							{								$ratings = array_values(SimplePie_Misc::array_unique($ratings));							}						}						else						{							$ratings = $ratings_parent;						}						// RESTRICTIONS						if (isset($content['child'][SIMPLEPIE_NAMESPACE_MEDIARSS]['restriction']))						{							foreach ($content['child'][SIMPLEPIE_NAMESPACE_MEDIARSS]['restriction'] as $restriction)							{								$restriction_relationship = null;								$restriction_type = null;								$restriction_value = null;								if (isset($restriction['attribs']['']['relationship']))								{									$restriction_relationship = $this->sanitize($restriction['attribs']['']['relationship'], SIMPLEPIE_CONSTRUCT_TEXT);								}								if (isset($restriction['attribs']['']['type']))								{									$restriction_type = $this->sanitize($restriction['attribs']['']['type'], SIMPLEPIE_CONSTRUCT_TEXT);								}								if (isset($restriction['data']))								{									$restriction_value = $this->sanitize($restriction['data'], SIMPLEPIE_CONSTRUCT_TEXT);								}								$restrictions[] = new $this->feed->restriction_class($restriction_relationship, $restriction_type, $restriction_value);							}							if (is_array($restrictions))							{								$restrictions = array_values(SimplePie_Misc::array_unique($restrictions));							}						}						elseif (isset($group['child'][SIMPLEPIE_NAMESPACE_MEDIARSS]['restriction']))						{							foreach ($group['child'][SIMPLEPIE_NAMESPACE_MEDIARSS]['restriction'] as $restriction)							{								$restriction_relationship = null;								$restriction_type = null;								$restriction_value = null;								if (isset($restriction['attribs']['']['relationship']))								{									$restriction_relationship = $this->sanitize($restriction['attribs']['']['relationship'], SIMPLEPIE_CONSTRUCT_TEXT);								}								if (isset($restriction['attribs']['']['type']))								{									$restriction_type = $this->sanitize($restriction['attribs']['']['type'], SIMPLEPIE_CONSTRUCT_TEXT);								}								if (isset($restriction['data']))								{									$restriction_value = $this->sanitize($restriction['data'], SIMPLEPIE_CONSTRUCT_TEXT);								}								$restrictions[] = new $this->feed->restriction_class($restriction_relationship, $restriction_type, $restriction_value);							}							if (is_array($restrictions))							{								$restrictions = array_values(SimplePie_Misc::array_unique($restrictions));							}						}						else						{							$restrictions = $restrictions_parent;						}						// THUMBNAILS						if (isset($content['child'][SIMPLEPIE_NAMESPACE_MEDIARSS]['thumbnail']))						{							foreach ($content['child'][SIMPLEPIE_NAMESPACE_MEDIARSS]['thumbnail'] as $thumbnail)							{								$thumbnails[] = $this->sanitize($thumbnail['attribs']['']['url'], SIMPLEPIE_CONSTRUCT_IRI);							}							if (is_array($thumbnails))							{								$thumbnails = array_values(SimplePie_Misc::array_unique($thumbnails));							}						}						elseif (isset($group['child'][SIMPLEPIE_NAMESPACE_MEDIARSS]['thumbnail']))						{							foreach ($group['child'][SIMPLEPIE_NAMESPACE_MEDIARSS]['thumbnail'] as $thumbnail)							{								$thumbnails[] = $this->sanitize($thumbnail['attribs']['']['url'], SIMPLEPIE_CONSTRUCT_IRI);							}							if (is_array($thumbnails))							{								$thumbnails = array_values(SimplePie_Misc::array_unique($thumbnails));							}						}						else						{							$thumbnails = $thumbnails_parent;						}						// TITLES						if (isset($content['child'][SIMPLEPIE_NAMESPACE_MEDIARSS]['title']))						{							$title = $this->sanitize($content['child'][SIMPLEPIE_NAMESPACE_MEDIARSS]['title'][0]['data'], SIMPLEPIE_CONSTRUCT_TEXT);						}						elseif (isset($group['child'][SIMPLEPIE_NAMESPACE_MEDIARSS]['title']))						{							$title = $this->sanitize($group['child'][SIMPLEPIE_NAMESPACE_MEDIARSS]['title'][0]['data'], SIMPLEPIE_CONSTRUCT_TEXT);						}						else						{							$title = $title_parent;						}						$this->data['enclosures'][] = new $this->feed->enclosure_class($url, $type, $length, $this->feed->javascript, $bitrate, $captions, $categories, $channels, $copyrights, $credits, $description, $duration, $expression, $framerate, $hashes, $height, $keywords, $lang, $medium, $player, $ratings, $restrictions, $samplingrate, $thumbnails, $title, $width);					}				}			}			// If we have standalone media:content tags, loop through them.			if (isset($this->data['child'][SIMPLEPIE_NAMESPACE_MEDIARSS]['content']))			{				foreach ((array) $this->data['child'][SIMPLEPIE_NAMESPACE_MEDIARSS]['content'] as $content)				{					if (isset($content['attribs']['']['url']))					{						// Attributes						$bitrate = null;						$channels = null;						$duration = null;						$expression = null;						$framerate = null;						$height = null;						$javascript = null;						$lang = null;						$length = null;						$medium = null;						$samplingrate = null;						$type = null;						$url = null;						$width = null;						// Elements						$captions = null;						$categories = null;						$copyrights = null;						$credits = null;						$description = null;						$hashes = null;						$keywords = null;						$player = null;						$ratings = null;						$restrictions = null;						$thumbnails = null;						$title = null;						// Start checking the attributes of media:content						if (isset($content['attribs']['']['bitrate']))						{							$bitrate = $this->sanitize($content['attribs']['']['bitrate'], SIMPLEPIE_CONSTRUCT_TEXT);						}						if (isset($content['attribs']['']['channels']))						{							$channels = $this->sanitize($content['attribs']['']['channels'], SIMPLEPIE_CONSTRUCT_TEXT);						}						if (isset($content['attribs']['']['duration']))						{							$duration = $this->sanitize($content['attribs']['']['duration'], SIMPLEPIE_CONSTRUCT_TEXT);						}						else						{							$duration = $duration_parent;						}						if (isset($content['attribs']['']['expression']))						{							$expression = $this->sanitize($content['attribs']['']['expression'], SIMPLEPIE_CONSTRUCT_TEXT);						}						if (isset($content['attribs']['']['framerate']))						{							$framerate = $this->sanitize($content['attribs']['']['framerate'], SIMPLEPIE_CONSTRUCT_TEXT);						}						if (isset($content['attribs']['']['height']))						{							$height = $this->sanitize($content['attribs']['']['height'], SIMPLEPIE_CONSTRUCT_TEXT);						}						if (isset($content['attribs']['']['lang']))						{							$lang = $this->sanitize($content['attribs']['']['lang'], SIMPLEPIE_CONSTRUCT_TEXT);						}						if (isset($content['attribs']['']['fileSize']))						{							$length = ceil($content['attribs']['']['fileSize']);						}						if (isset($content['attribs']['']['medium']))						{							$medium = $this->sanitize($content['attribs']['']['medium'], SIMPLEPIE_CONSTRUCT_TEXT);						}						if (isset($content['attribs']['']['samplingrate']))						{							$samplingrate = $this->sanitize($content['attribs']['']['samplingrate'], SIMPLEPIE_CONSTRUCT_TEXT);						}						if (isset($content['attribs']['']['type']))						{							$type = $this->sanitize($content['attribs']['']['type'], SIMPLEPIE_CONSTRUCT_TEXT);						}						if (isset($content['attribs']['']['width']))						{							$width = $this->sanitize($content['attribs']['']['width'], SIMPLEPIE_CONSTRUCT_TEXT);						}						$url = $this->sanitize($content['attribs']['']['url'], SIMPLEPIE_CONSTRUCT_IRI);						// Checking the other optional media: elements. Priority: media:content, media:group, item, channel						// CAPTIONS						if (isset($content['child'][SIMPLEPIE_NAMESPACE_MEDIARSS]['text']))						{							foreach ($content['child'][SIMPLEPIE_NAMESPACE_MEDIARSS]['text'] as $caption)							{								$caption_type = null;								$caption_lang = null;								$caption_startTime = null;								$caption_endTime = null;								$caption_text = null;								if (isset($caption['attribs']['']['type']))								{									$caption_type = $this->sanitize($caption['attribs']['']['type'], SIMPLEPIE_CONSTRUCT_TEXT);								}								if (isset($caption['attribs']['']['lang']))								{									$caption_lang = $this->sanitize($caption['attribs']['']['lang'], SIMPLEPIE_CONSTRUCT_TEXT);								}								if (isset($caption['attribs']['']['start']))								{									$caption_startTime = $this->sanitize($caption['attribs']['']['start'], SIMPLEPIE_CONSTRUCT_TEXT);								}								if (isset($caption['attribs']['']['end']))								{									$caption_endTime = $this->sanitize($caption['attribs']['']['end'], SIMPLEPIE_CONSTRUCT_TEXT);								}								if (isset($caption['data']))								{									$caption_text = $this->sanitize($caption['data'], SIMPLEPIE_CONSTRUCT_TEXT);								}								$captions[] = new $this->feed->caption_class($caption_type, $caption_lang, $caption_startTime, $caption_endTime, $caption_text);							}							if (is_array($captions))							{								$captions = array_values(SimplePie_Misc::array_unique($captions));							}						}						else						{							$captions = $captions_parent;						}						// CATEGORIES						if (isset($content['child'][SIMPLEPIE_NAMESPACE_MEDIARSS]['category']))						{							foreach ((array) $content['child'][SIMPLEPIE_NAMESPACE_MEDIARSS]['category'] as $category)							{								$term = null;								$scheme = null;								$label = null;								if (isset($category['data']))								{									$term = $this->sanitize($category['data'], SIMPLEPIE_CONSTRUCT_TEXT);								}								if (isset($category['attribs']['']['scheme']))								{									$scheme = $this->sanitize($category['attribs']['']['scheme'], SIMPLEPIE_CONSTRUCT_TEXT);								}								else								{									$scheme = 'http://search.yahoo.com/mrss/category_schema';								}								if (isset($category['attribs']['']['label']))								{									$label = $this->sanitize($category['attribs']['']['label'], SIMPLEPIE_CONSTRUCT_TEXT);								}								$categories[] = new $this->feed->category_class($term, $scheme, $label);							}						}						if (is_array($categories) && is_array($categories_parent))						{							$categories = array_values(SimplePie_Misc::array_unique(array_merge($categories, $categories_parent)));						}						elseif (is_array($categories))						{							$categories = array_values(SimplePie_Misc::array_unique($categories));						}						elseif (is_array($categories_parent))						{							$categories = array_values(SimplePie_Misc::array_unique($categories_parent));						}						else						{							$categories = null;						}						// COPYRIGHTS						if (isset($content['child'][SIMPLEPIE_NAMESPACE_MEDIARSS]['copyright']))						{							$copyright_url = null;							$copyright_label = null;							if (isset($content['child'][SIMPLEPIE_NAMESPACE_MEDIARSS]['copyright'][0]['attribs']['']['url']))							{								$copyright_url = $this->sanitize($content['child'][SIMPLEPIE_NAMESPACE_MEDIARSS]['copyright'][0]['attribs']['']['url'], SIMPLEPIE_CONSTRUCT_TEXT);							}							if (isset($content['child'][SIMPLEPIE_NAMESPACE_MEDIARSS]['copyright'][0]['data']))							{								$copyright_label = $this->sanitize($content['child'][SIMPLEPIE_NAMESPACE_MEDIARSS]['copyright'][0]['data'], SIMPLEPIE_CONSTRUCT_TEXT);							}							$copyrights = new $this->feed->copyright_class($copyright_url, $copyright_label);						}						else						{							$copyrights = $copyrights_parent;						}						// CREDITS						if (isset($content['child'][SIMPLEPIE_NAMESPACE_MEDIARSS]['credit']))						{							foreach ($content['child'][SIMPLEPIE_NAMESPACE_MEDIARSS]['credit'] as $credit)							{								$credit_role = null;								$credit_scheme = null;								$credit_name = null;								if (isset($credit['attribs']['']['role']))								{									$credit_role = $this->sanitize($credit['attribs']['']['role'], SIMPLEPIE_CONSTRUCT_TEXT);								}								if (isset($credit['attribs']['']['scheme']))								{									$credit_scheme = $this->sanitize($credit['attribs']['']['scheme'], SIMPLEPIE_CONSTRUCT_TEXT);								}								else								{									$credit_scheme = 'urn:ebu';								}								if (isset($credit['data']))								{									$credit_name = $this->sanitize($credit['data'], SIMPLEPIE_CONSTRUCT_TEXT);								}								$credits[] = new $this->feed->credit_class($credit_role, $credit_scheme, $credit_name);							}							if (is_array($credits))							{								$credits = array_values(SimplePie_Misc::array_unique($credits));							}						}						else						{							$credits = $credits_parent;						}						// DESCRIPTION						if (isset($content['child'][SIMPLEPIE_NAMESPACE_MEDIARSS]['description']))						{							$description = $this->sanitize($content['child'][SIMPLEPIE_NAMESPACE_MEDIARSS]['description'][0]['data'], SIMPLEPIE_CONSTRUCT_TEXT);						}						else						{							$description = $description_parent;						}						// HASHES						if (isset($content['child'][SIMPLEPIE_NAMESPACE_MEDIARSS]['hash']))						{							foreach ($content['child'][SIMPLEPIE_NAMESPACE_MEDIARSS]['hash'] as $hash)							{								$value = null;								$algo = null;								if (isset($hash['data']))								{									$value = $this->sanitize($hash['data'], SIMPLEPIE_CONSTRUCT_TEXT);								}								if (isset($hash['attribs']['']['algo']))								{									$algo = $this->sanitize($hash['attribs']['']['algo'], SIMPLEPIE_CONSTRUCT_TEXT);								}								else								{									$algo = 'md5';								}								$hashes[] = $algo.':'.$value;							}							if (is_array($hashes))							{								$hashes = array_values(SimplePie_Misc::array_unique($hashes));							}						}						else						{							$hashes = $hashes_parent;						}						// KEYWORDS						if (isset($content['child'][SIMPLEPIE_NAMESPACE_MEDIARSS]['keywords']))						{							if (isset($content['child'][SIMPLEPIE_NAMESPACE_MEDIARSS]['keywords'][0]['data']))							{								$temp = explode(',', $this->sanitize($content['child'][SIMPLEPIE_NAMESPACE_MEDIARSS]['keywords'][0]['data'], SIMPLEPIE_CONSTRUCT_TEXT));								foreach ($temp as $word)								{									$keywords[] = trim($word);								}								unset($temp);							}							if (is_array($keywords))							{								$keywords = array_values(SimplePie_Misc::array_unique($keywords));							}						}						else						{							$keywords = $keywords_parent;						}						// PLAYER						if (isset($content['child'][SIMPLEPIE_NAMESPACE_MEDIARSS]['player']))						{							$player = $this->sanitize($content['child'][SIMPLEPIE_NAMESPACE_MEDIARSS]['player'][0]['attribs']['']['url'], SIMPLEPIE_CONSTRUCT_IRI);						}						else						{							$player = $player_parent;						}						// RATINGS						if (isset($content['child'][SIMPLEPIE_NAMESPACE_MEDIARSS]['rating']))						{							foreach ($content['child'][SIMPLEPIE_NAMESPACE_MEDIARSS]['rating'] as $rating)							{								$rating_scheme = null;								$rating_value = null;								if (isset($rating['attribs']['']['scheme']))								{									$rating_scheme = $this->sanitize($rating['attribs']['']['scheme'], SIMPLEPIE_CONSTRUCT_TEXT);								}								else								{									$rating_scheme = 'urn:simple';								}								if (isset($rating['data']))								{									$rating_value = $this->sanitize($rating['data'], SIMPLEPIE_CONSTRUCT_TEXT);								}								$ratings[] = new $this->feed->rating_class($rating_scheme, $rating_value);							}							if (is_array($ratings))							{								$ratings = array_values(SimplePie_Misc::array_unique($ratings));							}						}						else						{							$ratings = $ratings_parent;						}						// RESTRICTIONS						if (isset($content['child'][SIMPLEPIE_NAMESPACE_MEDIARSS]['restriction']))						{							foreach ($content['child'][SIMPLEPIE_NAMESPACE_MEDIARSS]['restriction'] as $restriction)							{								$restriction_relationship = null;								$restriction_type = null;								$restriction_value = null;								if (isset($restriction['attribs']['']['relationship']))								{									$restriction_relationship = $this->sanitize($restriction['attribs']['']['relationship'], SIMPLEPIE_CONSTRUCT_TEXT);								}								if (isset($restriction['attribs']['']['type']))								{									$restriction_type = $this->sanitize($restriction['attribs']['']['type'], SIMPLEPIE_CONSTRUCT_TEXT);								}								if (isset($restriction['data']))								{									$restriction_value = $this->sanitize($restriction['data'], SIMPLEPIE_CONSTRUCT_TEXT);								}								$restrictions[] = new $this->feed->restriction_class($restriction_relationship, $restriction_type, $restriction_value);							}							if (is_array($restrictions))							{								$restrictions = array_values(SimplePie_Misc::array_unique($restrictions));							}						}						else						{							$restrictions = $restrictions_parent;						}						// THUMBNAILS						if (isset($content['child'][SIMPLEPIE_NAMESPACE_MEDIARSS]['thumbnail']))						{							foreach ($content['child'][SIMPLEPIE_NAMESPACE_MEDIARSS]['thumbnail'] as $thumbnail)							{								$thumbnails[] = $this->sanitize($thumbnail['attribs']['']['url'], SIMPLEPIE_CONSTRUCT_IRI);							}							if (is_array($thumbnails))							{								$thumbnails = array_values(SimplePie_Misc::array_unique($thumbnails));							}						}						else						{							$thumbnails = $thumbnails_parent;						}						// TITLES						if (isset($content['child'][SIMPLEPIE_NAMESPACE_MEDIARSS]['title']))						{							$title = $this->sanitize($content['child'][SIMPLEPIE_NAMESPACE_MEDIARSS]['title'][0]['data'], SIMPLEPIE_CONSTRUCT_TEXT);						}						else						{							$title = $title_parent;						}						$this->data['enclosures'][] = new $this->feed->enclosure_class($url, $type, $length, $this->feed->javascript, $bitrate, $captions, $categories, $channels, $copyrights, $credits, $description, $duration, $expression, $framerate, $hashes, $height, $keywords, $lang, $medium, $player, $ratings, $restrictions, $samplingrate, $thumbnails, $title, $width);					}				}			}			foreach ((array) $this->get_item_tags(SIMPLEPIE_NAMESPACE_ATOM_10, 'link') as $link)			{				if (isset($link['attribs']['']['href']) && !empty($link['attribs']['']['rel']) && $link['attribs']['']['rel'] === 'enclosure')				{					// Attributes					$bitrate = null;					$channels = null;					$duration = null;					$expression = null;					$framerate = null;					$height = null;					$javascript = null;					$lang = null;					$length = null;					$medium = null;					$samplingrate = null;					$type = null;					$url = null;					$width = null;					$url = $this->sanitize($link['attribs']['']['href'], SIMPLEPIE_CONSTRUCT_IRI, $this->get_base($link));					if (isset($link['attribs']['']['type']))					{						$type = $this->sanitize($link['attribs']['']['type'], SIMPLEPIE_CONSTRUCT_TEXT);					}					if (isset($link['attribs']['']['length']))					{						$length = ceil($link['attribs']['']['length']);					}					// Since we don't have group or content for these, we'll just pass the '*_parent' variables directly to the constructor					$this->data['enclosures'][] = new $this->feed->enclosure_class($url, $type, $length, $this->feed->javascript, $bitrate, $captions_parent, $categories_parent, $channels, $copyrights_parent, $credits_parent, $description_parent, $duration_parent, $expression, $framerate, $hashes_parent, $height, $keywords_parent, $lang, $medium, $player_parent, $ratings_parent, $restrictions_parent, $samplingrate, $thumbnails_parent, $title_parent, $width);				}			}			foreach ((array) $this->get_item_tags(SIMPLEPIE_NAMESPACE_ATOM_03, 'link') as $link)			{				if (isset($link['attribs']['']['href']) && !empty($link['attribs']['']['rel']) && $link['attribs']['']['rel'] === 'enclosure')				{					// Attributes					$bitrate = null;					$channels = null;					$duration = null;					$expression = null;					$framerate = null;					$height = null;					$javascript = null;					$lang = null;					$length = null;					$medium = null;					$samplingrate = null;					$type = null;					$url = null;					$width = null;					$url = $this->sanitize($link['attribs']['']['href'], SIMPLEPIE_CONSTRUCT_IRI, $this->get_base($link));					if (isset($link['attribs']['']['type']))					{						$type = $this->sanitize($link['attribs']['']['type'], SIMPLEPIE_CONSTRUCT_TEXT);					}					if (isset($link['attribs']['']['length']))					{						$length = ceil($link['attribs']['']['length']);					}					// Since we don't have group or content for these, we'll just pass the '*_parent' variables directly to the constructor					$this->data['enclosures'][] = new $this->feed->enclosure_class($url, $type, $length, $this->feed->javascript, $bitrate, $captions_parent, $categories_parent, $channels, $copyrights_parent, $credits_parent, $description_parent, $duration_parent, $expression, $framerate, $hashes_parent, $height, $keywords_parent, $lang, $medium, $player_parent, $ratings_parent, $restrictions_parent, $samplingrate, $thumbnails_parent, $title_parent, $width);				}			}			if ($enclosure = $this->get_item_tags(SIMPLEPIE_NAMESPACE_RSS_20, 'enclosure'))			{				if (isset($enclosure[0]['attribs']['']['url']))				{					// Attributes					$bitrate = null;					$channels = null;					$duration = null;					$expression = null;					$framerate = null;					$height = null;					$javascript = null;					$lang = null;					$length = null;					$medium = null;					$samplingrate = null;					$type = null;					$url = null;					$width = null;					$url = $this->sanitize($enclosure[0]['attribs']['']['url'], SIMPLEPIE_CONSTRUCT_IRI, $this->get_base($enclosure[0]));					if (isset($enclosure[0]['attribs']['']['type']))					{						$type = $this->sanitize($enclosure[0]['attribs']['']['type'], SIMPLEPIE_CONSTRUCT_TEXT);					}					if (isset($enclosure[0]['attribs']['']['length']))					{						$length = ceil($enclosure[0]['attribs']['']['length']);					}					// Since we don't have group or content for these, we'll just pass the '*_parent' variables directly to the constructor					$this->data['enclosures'][] = new $this->feed->enclosure_class($url, $type, $length, $this->feed->javascript, $bitrate, $captions_parent, $categories_parent, $channels, $copyrights_parent, $credits_parent, $description_parent, $duration_parent, $expression, $framerate, $hashes_parent, $height, $keywords_parent, $lang, $medium, $player_parent, $ratings_parent, $restrictions_parent, $samplingrate, $thumbnails_parent, $title_parent, $width);				}			}			if (sizeof($this->data['enclosures']) === 0 && ($url || $type || $length || $bitrate || $captions_parent || $categories_parent || $channels || $copyrights_parent || $credits_parent || $description_parent || $duration_parent || $expression || $framerate || $hashes_parent || $height || $keywords_parent || $lang || $medium || $player_parent || $ratings_parent || $restrictions_parent || $samplingrate || $thumbnails_parent || $title_parent || $width))			{				// Since we don't have group or content for these, we'll just pass the '*_parent' variables directly to the constructor				$this->data['enclosures'][] = new $this->feed->enclosure_class($url, $type, $length, $this->feed->javascript, $bitrate, $captions_parent, $categories_parent, $channels, $copyrights_parent, $credits_parent, $description_parent, $duration_parent, $expression, $framerate, $hashes_parent, $height, $keywords_parent, $lang, $medium, $player_parent, $ratings_parent, $restrictions_parent, $samplingrate, $thumbnails_parent, $title_parent, $width);			}			$this->data['enclosures'] = array_values(SimplePie_Misc::array_unique($this->data['enclosures']));		}		if (!empty($this->data['enclosures']))		{			return $this->data['enclosures'];		}		else		{			return null;		}	}	function get_latitude()	{		if ($return = $this->get_item_tags(SIMPLEPIE_NAMESPACE_W3C_BASIC_GEO, 'lat'))		{			return (float) $return[0]['data'];		}		elseif (($return = $this->get_item_tags(SIMPLEPIE_NAMESPACE_GEORSS, 'point')) && preg_match('/^((?:-)?[0-9]+(?:\.[0-9]+)) ((?:-)?[0-9]+(?:\.[0-9]+))$/', $return[0]['data'], $match))		{			return (float) $match[1];		}		else		{			return null;		}	}	function get_longitude()	{		if ($return = $this->get_item_tags(SIMPLEPIE_NAMESPACE_W3C_BASIC_GEO, 'long'))		{			return (float) $return[0]['data'];		}		elseif ($return = $this->get_item_tags(SIMPLEPIE_NAMESPACE_W3C_BASIC_GEO, 'lon'))		{			return (float) $return[0]['data'];		}		elseif (($return = $this->get_item_tags(SIMPLEPIE_NAMESPACE_GEORSS, 'point')) && preg_match('/^((?:-)?[0-9]+(?:\.[0-9]+)) ((?:-)?[0-9]+(?:\.[0-9]+))$/', $return[0]['data'], $match))		{			return (float) $match[2];		}		else		{			return null;		}	}	function get_source()	{		if ($return = $this->get_item_tags(SIMPLEPIE_NAMESPACE_ATOM_10, 'source'))		{			return new $this->feed->source_class($this, $return[0]);		}		else		{			return null;		}	}	/**	 * Creates the add_to_* methods' return data	 *	 * @access private	 * @param string $item_url String to prefix to the item permalink	 * @param string $title_url String to prefix to the item title	 * (and suffix to the item permalink)	 * @return mixed URL if feed exists, false otherwise	 */	function add_to_service($item_url, $title_url = null, $summary_url = null)	{		if ($this->get_permalink() !== null)		{			$return = $item_url . rawurlencode($this->get_permalink());			if ($title_url !== null && $this->get_title() !== null)			{				$return .= $title_url . rawurlencode($this->get_title());			}			if ($summary_url !== null && $this->get_description() !== null)			{				$return .= $summary_url . rawurlencode($this->get_description());			}			return $this->sanitize($return, SIMPLEPIE_CONSTRUCT_IRI);		}		else		{			return null;		}	}	function add_to_blinklist()	{		return $this->add_to_service('http://www.blinklist.com/index.php?Action=Blink/addblink.php&Description=&Url=', '&Title=');	}	function add_to_blogmarks()	{		return $this->add_to_service('http://blogmarks.net/my/new.php?mini=1&simple=1&url=', '&title=');	}	function add_to_delicious()	{		return $this->add_to_service('http://del.icio.us/post/?v=4&url=', '&title=');	}	function add_to_digg()	{		return $this->add_to_service('http://digg.com/submit?url=', '&title=', '&bodytext=');	}	function add_to_furl()	{		return $this->add_to_service('http://www.furl.net/storeIt.jsp?u=', '&t=');	}	function add_to_magnolia()	{		return $this->add_to_service('http://ma.gnolia.com/bookmarklet/add?url=', '&title=');	}	function add_to_myweb20()	{		return $this->add_to_service('http://myweb2.search.yahoo.com/myresults/bookmarklet?u=', '&t=');	}	function add_to_newsvine()	{		return $this->add_to_service('http://www.newsvine.com/_wine/save?u=', '&h=');	}	function add_to_reddit()	{		return $this->add_to_service('http://reddit.com/submit?url=', '&title=');	}	function add_to_segnalo()	{		return $this->add_to_service('http://segnalo.com/post.html.php?url=', '&title=');	}	function add_to_simpy()	{		return $this->add_to_service('http://www.simpy.com/simpy/LinkAdd.do?href=', '&title=');	}	function add_to_spurl()	{		return $this->add_to_service('http://www.spurl.net/spurl.php?v=3&url=', '&title=');	}	function add_to_wists()	{		return $this->add_to_service('http://wists.com/r.php?c=&r=', '&title=');	}	function search_technorati()	{		return $this->add_to_service('http://www.technorati.com/search/');	}}class SimplePie_Source{	var $item;	var $data = array();	function SimplePie_Source($item, $data)	{		$this->item = $item;		$this->data = $data;	}	function __toString()	{		return md5(serialize($this->data));	}	function get_source_tags($namespace, $tag)	{		if (isset($this->data['child'][$namespace][$tag]))		{			return $this->data['child'][$namespace][$tag];		}		else		{			return null;		}	}	function get_base($element = array())	{		return $this->item->get_base($element);	}	function sanitize($data, $type, $base = '')	{		return $this->item->sanitize($data, $type, $base);	}	function get_item()	{		return $this->item;	}	function get_title()	{		if ($return = $this->get_source_tags(SIMPLEPIE_NAMESPACE_ATOM_10, 'title'))		{			return $this->sanitize($return[0]['data'], SimplePie_Misc::atom_10_construct_type($return[0]['attribs']), $this->get_base($return[0]));		}		elseif ($return = $this->get_source_tags(SIMPLEPIE_NAMESPACE_ATOM_03, 'title'))		{			return $this->sanitize($return[0]['data'], SimplePie_Misc::atom_03_construct_type($return[0]['attribs']), $this->get_base($return[0]));		}		elseif ($return = $this->get_source_tags(SIMPLEPIE_NAMESPACE_RSS_10, 'title'))		{			return $this->sanitize($return[0]['data'], SIMPLEPIE_CONSTRUCT_MAYBE_HTML, $this->get_base($return[0]));		}		elseif ($return = $this->get_source_tags(SIMPLEPIE_NAMESPACE_RSS_090, 'title'))		{			return $this->sanitize($return[0]['data'], SIMPLEPIE_CONSTRUCT_MAYBE_HTML, $this->get_base($return[0]));		}		elseif ($return = $this->get_source_tags(SIMPLEPIE_NAMESPACE_RSS_20, 'title'))		{			return $this->sanitize($return[0]['data'], SIMPLEPIE_CONSTRUCT_MAYBE_HTML, $this->get_base($return[0]));		}		elseif ($return = $this->get_source_tags(SIMPLEPIE_NAMESPACE_DC_11, 'title'))		{			return $this->sanitize($return[0]['data'], SIMPLEPIE_CONSTRUCT_TEXT);		}		elseif ($return = $this->get_source_tags(SIMPLEPIE_NAMESPACE_DC_10, 'title'))		{			return $this->sanitize($return[0]['data'], SIMPLEPIE_CONSTRUCT_TEXT);		}		else		{			return null;		}	}	function get_category($key = 0)	{		$categories = $this->get_categories();		if (isset($categories[$key]))		{			return $categories[$key];		}		else		{			return null;		}	}	function get_categories()	{		$categories = array();		foreach ((array) $this->get_source_tags(SIMPLEPIE_NAMESPACE_ATOM_10, 'category') as $category)		{			$term = null;			$scheme = null;			$label = null;			if (isset($category['attribs']['']['term']))			{				$term = $this->sanitize($category['attribs']['']['term'], SIMPLEPIE_CONSTRUCT_TEXT);			}			if (isset($category['attribs']['']['scheme']))			{				$scheme = $this->sanitize($category['attribs']['']['scheme'], SIMPLEPIE_CONSTRUCT_TEXT);			}			if (isset($category['attribs']['']['label']))			{				$label = $this->sanitize($category['attribs']['']['label'], SIMPLEPIE_CONSTRUCT_TEXT);			}			$categories[] = new $this->item->feed->category_class($term, $scheme, $label);		}		foreach ((array) $this->get_source_tags(SIMPLEPIE_NAMESPACE_RSS_20, 'category') as $category)		{			// This is really the label, but keep this as the term also for BC.			// Label will also work on retrieving because that falls back to term.			$term = $this->sanitize($category['data'], SIMPLEPIE_CONSTRUCT_TEXT);			if (isset($category['attribs']['']['domain']))			{				$scheme = $this->sanitize($category['attribs']['']['domain'], SIMPLEPIE_CONSTRUCT_TEXT);			}			else			{				$scheme = null;			}			$categories[] = new $this->item->feed->category_class($term, $scheme, null);		}		foreach ((array) $this->get_source_tags(SIMPLEPIE_NAMESPACE_DC_11, 'subject') as $category)		{			$categories[] = new $this->item->feed->category_class($this->sanitize($category['data'], SIMPLEPIE_CONSTRUCT_TEXT), null, null);		}		foreach ((array) $this->get_source_tags(SIMPLEPIE_NAMESPACE_DC_10, 'subject') as $category)		{			$categories[] = new $this->item->feed->category_class($this->sanitize($category['data'], SIMPLEPIE_CONSTRUCT_TEXT), null, null);		}		if (!empty($categories))		{			return SimplePie_Misc::array_unique($categories);		}		else		{			return null;		}	}	function get_author($key = 0)	{		$authors = $this->get_authors();		if (isset($authors[$key]))		{			return $authors[$key];		}		else		{			return null;		}	}	function get_authors()	{		$authors = array();		foreach ((array) $this->get_source_tags(SIMPLEPIE_NAMESPACE_ATOM_10, 'author') as $author)		{			$name = null;			$uri = null;			$email = null;			if (isset($author['child'][SIMPLEPIE_NAMESPACE_ATOM_10]['name'][0]['data']))			{				$name = $this->sanitize($author['child'][SIMPLEPIE_NAMESPACE_ATOM_10]['name'][0]['data'], SIMPLEPIE_CONSTRUCT_TEXT);			}			if (isset($author['child'][SIMPLEPIE_NAMESPACE_ATOM_10]['uri'][0]['data']))			{				$uri = $this->sanitize($author['child'][SIMPLEPIE_NAMESPACE_ATOM_10]['uri'][0]['data'], SIMPLEPIE_CONSTRUCT_IRI, $this->get_base($author['child'][SIMPLEPIE_NAMESPACE_ATOM_10]['uri'][0]));			}			if (isset($author['child'][SIMPLEPIE_NAMESPACE_ATOM_10]['email'][0]['data']))			{				$email = $this->sanitize($author['child'][SIMPLEPIE_NAMESPACE_ATOM_10]['email'][0]['data'], SIMPLEPIE_CONSTRUCT_TEXT);			}			if ($name !== null || $email !== null || $uri !== null)			{				$authors[] = new $this->item->feed->author_class($name, $uri, $email);			}		}		if ($author = $this->get_source_tags(SIMPLEPIE_NAMESPACE_ATOM_03, 'author'))		{			$name = null;			$url = null;			$email = null;			if (isset($author[0]['child'][SIMPLEPIE_NAMESPACE_ATOM_03]['name'][0]['data']))			{				$name = $this->sanitize($author[0]['child'][SIMPLEPIE_NAMESPACE_ATOM_03]['name'][0]['data'], SIMPLEPIE_CONSTRUCT_TEXT);			}			if (isset($author[0]['child'][SIMPLEPIE_NAMESPACE_ATOM_03]['url'][0]['data']))			{				$url = $this->sanitize($author[0]['child'][SIMPLEPIE_NAMESPACE_ATOM_03]['url'][0]['data'], SIMPLEPIE_CONSTRUCT_IRI, $this->get_base($author[0]['child'][SIMPLEPIE_NAMESPACE_ATOM_03]['url'][0]));			}			if (isset($author[0]['child'][SIMPLEPIE_NAMESPACE_ATOM_03]['email'][0]['data']))			{				$email = $this->sanitize($author[0]['child'][SIMPLEPIE_NAMESPACE_ATOM_03]['email'][0]['data'], SIMPLEPIE_CONSTRUCT_TEXT);			}			if ($name !== null || $email !== null || $url !== null)			{				$authors[] = new $this->item->feed->author_class($name, $url, $email);			}		}		foreach ((array) $this->get_source_tags(SIMPLEPIE_NAMESPACE_DC_11, 'creator') as $author)		{			$authors[] = new $this->item->feed->author_class($this->sanitize($author['data'], SIMPLEPIE_CONSTRUCT_TEXT), null, null);		}		foreach ((array) $this->get_source_tags(SIMPLEPIE_NAMESPACE_DC_10, 'creator') as $author)		{			$authors[] = new $this->item->feed->author_class($this->sanitize($author['data'], SIMPLEPIE_CONSTRUCT_TEXT), null, null);		}		foreach ((array) $this->get_source_tags(SIMPLEPIE_NAMESPACE_ITUNES, 'author') as $author)		{			$authors[] = new $this->item->feed->author_class($this->sanitize($author['data'], SIMPLEPIE_CONSTRUCT_TEXT), null, null);		}		if (!empty($authors))		{			return SimplePie_Misc::array_unique($authors);		}		else		{			return null;		}	}	function get_contributor($key = 0)	{		$contributors = $this->get_contributors();		if (isset($contributors[$key]))		{			return $contributors[$key];		}		else		{			return null;		}	}	function get_contributors()	{		$contributors = array();		foreach ((array) $this->get_source_tags(SIMPLEPIE_NAMESPACE_ATOM_10, 'contributor') as $contributor)		{			$name = null;			$uri = null;			$email = null;			if (isset($contributor['child'][SIMPLEPIE_NAMESPACE_ATOM_10]['name'][0]['data']))			{				$name = $this->sanitize($contributor['child'][SIMPLEPIE_NAMESPACE_ATOM_10]['name'][0]['data'], SIMPLEPIE_CONSTRUCT_TEXT);			}			if (isset($contributor['child'][SIMPLEPIE_NAMESPACE_ATOM_10]['uri'][0]['data']))			{				$uri = $this->sanitize($contributor['child'][SIMPLEPIE_NAMESPACE_ATOM_10]['uri'][0]['data'], SIMPLEPIE_CONSTRUCT_IRI, $this->get_base($contributor['child'][SIMPLEPIE_NAMESPACE_ATOM_10]['uri'][0]));			}			if (isset($contributor['child'][SIMPLEPIE_NAMESPACE_ATOM_10]['email'][0]['data']))			{				$email = $this->sanitize($contributor['child'][SIMPLEPIE_NAMESPACE_ATOM_10]['email'][0]['data'], SIMPLEPIE_CONSTRUCT_TEXT);			}			if ($name !== null || $email !== null || $uri !== null)			{				$contributors[] = new $this->item->feed->author_class($name, $uri, $email);			}		}		foreach ((array) $this->get_source_tags(SIMPLEPIE_NAMESPACE_ATOM_03, 'contributor') as $contributor)		{			$name = null;			$url = null;			$email = null;			if (isset($contributor['child'][SIMPLEPIE_NAMESPACE_ATOM_03]['name'][0]['data']))			{				$name = $this->sanitize($contributor['child'][SIMPLEPIE_NAMESPACE_ATOM_03]['name'][0]['data'], SIMPLEPIE_CONSTRUCT_TEXT);			}			if (isset($contributor['child'][SIMPLEPIE_NAMESPACE_ATOM_03]['url'][0]['data']))			{				$url = $this->sanitize($contributor['child'][SIMPLEPIE_NAMESPACE_ATOM_03]['url'][0]['data'], SIMPLEPIE_CONSTRUCT_IRI, $this->get_base($contributor['child'][SIMPLEPIE_NAMESPACE_ATOM_03]['url'][0]));			}			if (isset($contributor['child'][SIMPLEPIE_NAMESPACE_ATOM_03]['email'][0]['data']))			{				$email = $this->sanitize($contributor['child'][SIMPLEPIE_NAMESPACE_ATOM_03]['email'][0]['data'], SIMPLEPIE_CONSTRUCT_TEXT);			}			if ($name !== null || $email !== null || $url !== null)			{				$contributors[] = new $this->item->feed->author_class($name, $url, $email);			}		}		if (!empty($contributors))		{			return SimplePie_Misc::array_unique($contributors);		}		else		{			return null;		}	}	function get_link($key = 0, $rel = 'alternate')	{		$links = $this->get_links($rel);		if (isset($links[$key]))		{			return $links[$key];		}		else		{			return null;		}	}	/**	 * Added for parity between the parent-level and the item/entry-level.	 */	function get_permalink()	{		return $this->get_link(0);	}	function get_links($rel = 'alternate')	{		if (!isset($this->data['links']))		{			$this->data['links'] = array();			if ($links = $this->get_source_tags(SIMPLEPIE_NAMESPACE_ATOM_10, 'link'))			{				foreach ($links as $link)				{					if (isset($link['attribs']['']['href']))					{						$link_rel = (isset($link['attribs']['']['rel'])) ? $link['attribs']['']['rel'] : 'alternate';						$this->data['links'][$link_rel][] = $this->sanitize($link['attribs']['']['href'], SIMPLEPIE_CONSTRUCT_IRI, $this->get_base($link));					}				}			}			if ($links = $this->get_source_tags(SIMPLEPIE_NAMESPACE_ATOM_03, 'link'))			{				foreach ($links as $link)				{					if (isset($link['attribs']['']['href']))					{						$link_rel = (isset($link['attribs']['']['rel'])) ? $link['attribs']['']['rel'] : 'alternate';						$this->data['links'][$link_rel][] = $this->sanitize($link['attribs']['']['href'], SIMPLEPIE_CONSTRUCT_IRI, $this->get_base($link));					}				}			}			if ($links = $this->get_source_tags(SIMPLEPIE_NAMESPACE_RSS_10, 'link'))			{				$this->data['links']['alternate'][] = $this->sanitize($links[0]['data'], SIMPLEPIE_CONSTRUCT_IRI, $this->get_base($links[0]));			}			if ($links = $this->get_source_tags(SIMPLEPIE_NAMESPACE_RSS_090, 'link'))			{				$this->data['links']['alternate'][] = $this->sanitize($links[0]['data'], SIMPLEPIE_CONSTRUCT_IRI, $this->get_base($links[0]));			}			if ($links = $this->get_source_tags(SIMPLEPIE_NAMESPACE_RSS_20, 'link'))			{				$this->data['links']['alternate'][] = $this->sanitize($links[0]['data'], SIMPLEPIE_CONSTRUCT_IRI, $this->get_base($links[0]));			}			$keys = array_keys($this->data['links']);			foreach ($keys as $key)			{				if (SimplePie_Misc::is_isegment_nz_nc($key))				{					if (isset($this->data['links'][SIMPLEPIE_IANA_LINK_RELATIONS_REGISTRY . $key]))					{						$this->data['links'][SIMPLEPIE_IANA_LINK_RELATIONS_REGISTRY . $key] = array_merge($this->data['links'][$key], $this->data['links'][SIMPLEPIE_IANA_LINK_RELATIONS_REGISTRY . $key]);						$this->data['links'][$key] =& $this->data['links'][SIMPLEPIE_IANA_LINK_RELATIONS_REGISTRY . $key];					}					else					{						$this->data['links'][SIMPLEPIE_IANA_LINK_RELATIONS_REGISTRY . $key] =& $this->data['links'][$key];					}				}				elseif (substr($key, 0, 41) === SIMPLEPIE_IANA_LINK_RELATIONS_REGISTRY)				{					$this->data['links'][substr($key, 41)] =& $this->data['links'][$key];				}				$this->data['links'][$key] = array_unique($this->data['links'][$key]);			}		}		if (isset($this->data['links'][$rel]))		{			return $this->data['links'][$rel];		}		else		{			return null;		}	}	function get_description()	{		if ($return = $this->get_source_tags(SIMPLEPIE_NAMESPACE_ATOM_10, 'subtitle'))		{			return $this->sanitize($return[0]['data'], SimplePie_Misc::atom_10_construct_type($return[0]['attribs']), $this->get_base($return[0]));		}		elseif ($return = $this->get_source_tags(SIMPLEPIE_NAMESPACE_ATOM_03, 'tagline'))		{			return $this->sanitize($return[0]['data'], SimplePie_Misc::atom_03_construct_type($return[0]['attribs']), $this->get_base($return[0]));		}		elseif ($return = $this->get_source_tags(SIMPLEPIE_NAMESPACE_RSS_10, 'description'))		{			return $this->sanitize($return[0]['data'], SIMPLEPIE_CONSTRUCT_MAYBE_HTML, $this->get_base($return[0]));		}		elseif ($return = $this->get_source_tags(SIMPLEPIE_NAMESPACE_RSS_090, 'description'))		{			return $this->sanitize($return[0]['data'], SIMPLEPIE_CONSTRUCT_MAYBE_HTML, $this->get_base($return[0]));		}		elseif ($return = $this->get_source_tags(SIMPLEPIE_NAMESPACE_RSS_20, 'description'))		{			return $this->sanitize($return[0]['data'], SIMPLEPIE_CONSTRUCT_MAYBE_HTML, $this->get_base($return[0]));		}		elseif ($return = $this->get_source_tags(SIMPLEPIE_NAMESPACE_DC_11, 'description'))		{			return $this->sanitize($return[0]['data'], SIMPLEPIE_CONSTRUCT_TEXT);		}		elseif ($return = $this->get_source_tags(SIMPLEPIE_NAMESPACE_DC_10, 'description'))		{			return $this->sanitize($return[0]['data'], SIMPLEPIE_CONSTRUCT_TEXT);		}		elseif ($return = $this->get_source_tags(SIMPLEPIE_NAMESPACE_ITUNES, 'summary'))		{			return $this->sanitize($return[0]['data'], SIMPLEPIE_CONSTRUCT_HTML, $this->get_base($return[0]));		}		elseif ($return = $this->get_source_tags(SIMPLEPIE_NAMESPACE_ITUNES, 'subtitle'))		{			return $this->sanitize($return[0]['data'], SIMPLEPIE_CONSTRUCT_HTML, $this->get_base($return[0]));		}		else		{			return null;		}	}	function get_copyright()	{		if ($return = $this->get_source_tags(SIMPLEPIE_NAMESPACE_ATOM_10, 'rights'))		{			return $this->sanitize($return[0]['data'], SimplePie_Misc::atom_10_construct_type($return[0]['attribs']), $this->get_base($return[0]));		}		elseif ($return = $this->get_source_tags(SIMPLEPIE_NAMESPACE_ATOM_03, 'copyright'))		{			return $this->sanitize($return[0]['data'], SimplePie_Misc::atom_03_construct_type($return[0]['attribs']), $this->get_base($return[0]));		}		elseif ($return = $this->get_source_tags(SIMPLEPIE_NAMESPACE_RSS_20, 'copyright'))		{			return $this->sanitize($return[0]['data'], SIMPLEPIE_CONSTRUCT_TEXT);		}		elseif ($return = $this->get_source_tags(SIMPLEPIE_NAMESPACE_DC_11, 'rights'))		{			return $this->sanitize($return[0]['data'], SIMPLEPIE_CONSTRUCT_TEXT);		}		elseif ($return = $this->get_source_tags(SIMPLEPIE_NAMESPACE_DC_10, 'rights'))		{			return $this->sanitize($return[0]['data'], SIMPLEPIE_CONSTRUCT_TEXT);		}		else		{			return null;		}	}	function get_language()	{		if ($return = $this->get_source_tags(SIMPLEPIE_NAMESPACE_RSS_20, 'language'))		{			return $this->sanitize($return[0]['data'], SIMPLEPIE_CONSTRUCT_TEXT);		}		elseif ($return = $this->get_source_tags(SIMPLEPIE_NAMESPACE_DC_11, 'language'))		{			return $this->sanitize($return[0]['data'], SIMPLEPIE_CONSTRUCT_TEXT);		}		elseif ($return = $this->get_source_tags(SIMPLEPIE_NAMESPACE_DC_10, 'language'))		{			return $this->sanitize($return[0]['data'], SIMPLEPIE_CONSTRUCT_TEXT);		}		elseif (isset($this->data['xml_lang']))		{			return $this->sanitize($this->data['xml_lang'], SIMPLEPIE_CONSTRUCT_TEXT);		}		else		{			return null;		}	}	function get_latitude()	{		if ($return = $this->get_source_tags(SIMPLEPIE_NAMESPACE_W3C_BASIC_GEO, 'lat'))		{			return (float) $return[0]['data'];		}		elseif (($return = $this->get_source_tags(SIMPLEPIE_NAMESPACE_GEORSS, 'point')) && preg_match('/^((?:-)?[0-9]+(?:\.[0-9]+)) ((?:-)?[0-9]+(?:\.[0-9]+))$/', $return[0]['data'], $match))		{			return (float) $match[1];		}		else		{			return null;		}	}	function get_longitude()	{		if ($return = $this->get_source_tags(SIMPLEPIE_NAMESPACE_W3C_BASIC_GEO, 'long'))		{			return (float) $return[0]['data'];		}		elseif ($return = $this->get_source_tags(SIMPLEPIE_NAMESPACE_W3C_BASIC_GEO, 'lon'))		{			return (float) $return[0]['data'];		}		elseif (($return = $this->get_source_tags(SIMPLEPIE_NAMESPACE_GEORSS, 'point')) && preg_match('/^((?:-)?[0-9]+(?:\.[0-9]+)) ((?:-)?[0-9]+(?:\.[0-9]+))$/', $return[0]['data'], $match))		{			return (float) $match[2];		}		else		{			return null;		}	}	function get_image_url()	{		if ($return = $this->get_source_tags(SIMPLEPIE_NAMESPACE_ITUNES, 'image'))		{			return $this->sanitize($return[0]['attribs']['']['href'], SIMPLEPIE_CONSTRUCT_IRI);		}		elseif ($return = $this->get_source_tags(SIMPLEPIE_NAMESPACE_ATOM_10, 'logo'))		{			return $this->sanitize($return[0]['data'], SIMPLEPIE_CONSTRUCT_IRI, $this->get_base($return[0]));		}		elseif ($return = $this->get_source_tags(SIMPLEPIE_NAMESPACE_ATOM_10, 'icon'))		{			return $this->sanitize($return[0]['data'], SIMPLEPIE_CONSTRUCT_IRI, $this->get_base($return[0]));		}		else		{			return null;		}	}}class SimplePie_Author{	var $name;	var $link;	var $email;	// Constructor, used to input the data	function SimplePie_Author($name = null, $link = null, $email = null)	{		$this->name = $name;		$this->link = $link;		$this->email = $email;	}	function __toString()	{		// There is no $this->data here		return md5(serialize($this));	}	function get_name()	{		if ($this->name !== null)		{			return $this->name;		}		else		{			return null;		}	}	function get_link()	{		if ($this->link !== null)		{			return $this->link;		}		else		{			return null;		}	}	function get_email()	{		if ($this->email !== null)		{			return $this->email;		}		else		{			return null;		}	}}class SimplePie_Category{	var $term;	var $scheme;	var $label;	// Constructor, used to input the data	function SimplePie_Category($term = null, $scheme = null, $label = null)	{		$this->term = $term;		$this->scheme = $scheme;		$this->label = $label;	}	function __toString()	{		// There is no $this->data here		return md5(serialize($this));	}	function get_term()	{		if ($this->term !== null)		{			return $this->term;		}		else		{			return null;		}	}	function get_scheme()	{		if ($this->scheme !== null)		{			return $this->scheme;		}		else		{			return null;		}	}	function get_label()	{		if ($this->label !== null)		{			return $this->label;		}		else		{			return $this->get_term();		}	}}class SimplePie_Enclosure{	var $bitrate;	var $captions;	var $categories;	var $channels;	var $copyright;	var $credits;	var $description;	var $duration;	var $expression;	var $framerate;	var $handler;	var $hashes;	var $height;	var $javascript;	var $keywords;	var $lang;	var $length;	var $link;	var $medium;	var $player;	var $ratings;	var $restrictions;	var $samplingrate;	var $thumbnails;	var $title;	var $type;	var $width;	// Constructor, used to input the data	function SimplePie_Enclosure($link = null, $type = null, $length = null, $javascript = null, $bitrate = null, $captions = null, $categories = null, $channels = null, $copyright = null, $credits = null, $description = null, $duration = null, $expression = null, $framerate = null, $hashes = null, $height = null, $keywords = null, $lang = null, $medium = null, $player = null, $ratings = null, $restrictions = null, $samplingrate = null, $thumbnails = null, $title = null, $width = null)	{		$this->bitrate = $bitrate;		$this->captions = $captions;		$this->categories = $categories;		$this->channels = $channels;		$this->copyright = $copyright;		$this->credits = $credits;		$this->description = $description;		$this->duration = $duration;		$this->expression = $expression;		$this->framerate = $framerate;		$this->hashes = $hashes;		$this->height = $height;		$this->javascript = $javascript;		$this->keywords = $keywords;		$this->lang = $lang;		$this->length = $length;		$this->link = $link;		$this->medium = $medium;		$this->player = $player;		$this->ratings = $ratings;		$this->restrictions = $restrictions;		$this->samplingrate = $samplingrate;		$this->thumbnails = $thumbnails;		$this->title = $title;		$this->type = $type;		$this->width = $width;		if (class_exists('idna_convert'))		{			$idn = new idna_convert;			$parsed = SimplePie_Misc::parse_url($link);			$this->link = SimplePie_Misc::compress_parse_url($parsed['scheme'], $idn->encode($parsed['authority']), $parsed['path'], $parsed['query'], $parsed['fragment']);		}		$this->handler = $this->get_handler(); // Needs to load last	}	function __toString()	{		// There is no $this->data here		return md5(serialize($this));	}	function get_bitrate()	{		if ($this->bitrate !== null)		{			return $this->bitrate;		}		else		{			return null;		}	}	function get_caption($key = 0)	{		$captions = $this->get_captions();		if (isset($captions[$key]))		{			return $captions[$key];		}		else		{			return null;		}	}	function get_captions()	{		if ($this->captions !== null)		{			return $this->captions;		}		else		{			return null;		}	}	function get_category($key = 0)	{		$categories = $this->get_categories();		if (isset($categories[$key]))		{			return $categories[$key];		}		else		{			return null;		}	}	function get_categories()	{		if ($this->categories !== null)		{			return $this->categories;		}		else		{			return null;		}	}	function get_channels()	{		if ($this->channels !== null)		{			return $this->channels;		}		else		{			return null;		}	}	function get_copyright()	{		if ($this->copyright !== null)		{			return $this->copyright;		}		else		{			return null;		}	}	function get_credit($key = 0)	{		$credits = $this->get_credits();		if (isset($credits[$key]))		{			return $credits[$key];		}		else		{			return null;		}	}	function get_credits()	{		if ($this->credits !== null)		{			return $this->credits;		}		else		{			return null;		}	}	function get_description()	{		if ($this->description !== null)		{			return $this->description;		}		else		{			return null;		}	}	function get_duration($convert = false)	{		if ($this->duration !== null)		{			if ($convert)			{				$time = SimplePie_Misc::time_hms($this->duration);				return $time;			}			else			{				return $this->duration;			}		}		else		{			return null;		}	}	function get_expression()	{		if ($this->expression !== null)		{			return $this->expression;		}		else		{			return 'full';		}	}	function get_extension()	{		if ($this->link !== null)		{			$url = SimplePie_Misc::parse_url($this->link);			if ($url['path'] !== '')			{				return pathinfo($url['path'], PATHINFO_EXTENSION);			}		}		return null;	}	function get_framerate()	{		if ($this->framerate !== null)		{			return $this->framerate;		}		else		{			return null;		}	}	function get_handler()	{		return $this->get_real_type(true);	}	function get_hash($key = 0)	{		$hashes = $this->get_hashes();		if (isset($hashes[$key]))		{			return $hashes[$key];		}		else		{			return null;		}	}	function get_hashes()	{		if ($this->hashes !== null)		{			return $this->hashes;		}		else		{			return null;		}	}	function get_height()	{		if ($this->height !== null)		{			return $this->height;		}		else		{			return null;		}	}	function get_language()	{		if ($this->lang !== null)		{			return $this->lang;		}		else		{			return null;		}	}	function get_keyword($key = 0)	{		$keywords = $this->get_keywords();		if (isset($keywords[$key]))		{			return $keywords[$key];		}		else		{			return null;		}	}	function get_keywords()	{		if ($this->keywords !== null)		{			return $this->keywords;		}		else		{			return null;		}	}	function get_length()	{		if ($this->length !== null)		{			return $this->length;		}		else		{			return null;		}	}	function get_link()	{		if ($this->link !== null)		{			return urldecode($this->link);		}		else		{			return null;		}	}	function get_medium()	{		if ($this->medium !== null)		{			return $this->medium;		}		else		{			return null;		}	}	function get_player()	{		if ($this->player !== null)		{			return $this->player;		}		else		{			return null;		}	}	function get_rating($key = 0)	{		$ratings = $this->get_ratings();		if (isset($ratings[$key]))		{			return $ratings[$key];		}		else		{			return null;		}	}	function get_ratings()	{		if ($this->ratings !== null)		{			return $this->ratings;		}		else		{			return null;		}	}	function get_restriction($key = 0)	{		$restrictions = $this->get_restrictions();		if (isset($restrictions[$key]))		{			return $restrictions[$key];		}		else		{			return null;		}	}	function get_restrictions()	{		if ($this->restrictions !== null)		{			return $this->restrictions;		}		else		{			return null;		}	}	function get_sampling_rate()	{		if ($this->samplingrate !== null)		{			return $this->samplingrate;		}		else		{			return null;		}	}	function get_size()	{		$length = $this->get_length();		if ($length !== null)		{			return round($length/1048576, 2);		}		else		{			return null;		}	}	function get_thumbnail($key = 0)	{		$thumbnails = $this->get_thumbnails();		if (isset($thumbnails[$key]))		{			return $thumbnails[$key];		}		else		{			return null;		}	}	function get_thumbnails()	{		if ($this->thumbnails !== null)		{			return $this->thumbnails;		}		else		{			return null;		}	}	function get_title()	{		if ($this->title !== null)		{			return $this->title;		}		else		{			return null;		}	}	function get_type()	{		if ($this->type !== null)		{			return $this->type;		}		else		{			return null;		}	}	function get_width()	{		if ($this->width !== null)		{			return $this->width;		}		else		{			return null;		}	}	function native_embed($options='')	{		return $this->embed($options, true);	}	/**	 * @todo If the dimensions for media:content are defined, use them when width/height are set to 'auto'.	 */	function embed($options = '', $native = false)	{		// Set up defaults		$audio = '';		$video = '';		$alt = '';		$altclass = '';		$loop = 'false';		$width = 'auto';		$height = 'auto';		$bgcolor = '#ffffff';		$mediaplayer = '';		$widescreen = false;		$handler = $this->get_handler();		$type = $this->get_real_type();		// Process options and reassign values as necessary		if (is_array($options))		{			extract($options);		}		else		{			$options = explode(',', $options);			foreach($options as $option)			{				$opt = explode(':', $option, 2);				if (isset($opt[0], $opt[1]))				{					$opt[0] = trim($opt[0]);					$opt[1] = trim($opt[1]);					switch ($opt[0])					{						case 'audio':							$audio = $opt[1];							break;						case 'video':							$video = $opt[1];							break;						case 'alt':							$alt = $opt[1];							break;						case 'altclass':							$altclass = $opt[1];							break;						case 'loop':							$loop = $opt[1];							break;						case 'width':							$width = $opt[1];							break;						case 'height':							$height = $opt[1];							break;						case 'bgcolor':							$bgcolor = $opt[1];							break;						case 'mediaplayer':							$mediaplayer = $opt[1];							break;						case 'widescreen':							$widescreen = $opt[1];							break;					}				}			}		}		$mime = explode('/', $type, 2);		$mime = $mime[0];		// Process values for 'auto'		if ($width === 'auto')		{			if ($mime === 'video')			{				if ($height === 'auto')				{					$width = 480;				}				elseif ($widescreen)				{					$width = round((intval($height)/9)*16);				}				else				{					$width = round((intval($height)/3)*4);				}			}			else			{				$width = '100%';			}		}		if ($height === 'auto')		{			if ($mime === 'audio')			{				$height = 0;			}			elseif ($mime === 'video')			{				if ($width === 'auto')				{					if ($widescreen)					{						$height = 270;					}					else					{						$height = 360;					}				}				elseif ($widescreen)				{					$height = round((intval($width)/16)*9);				}				else				{					$height = round((intval($width)/4)*3);				}			}			else			{				$height = 376;			}		}		elseif ($mime === 'audio')		{			$height = 0;		}		// Set proper placeholder value		if ($mime === 'audio')		{			$placeholder = $audio;		}		elseif ($mime === 'video')		{			$placeholder = $video;		}		$embed = '';		// Make sure the JS library is included		if (!$native)		{			static $javascript_outputted = null;			if (!$javascript_outputted && $this->javascript)			{				$embed .= '<script type="text/javascript" src="?' . htmlspecialchars($this->javascript) . '"></script>';				$javascript_outputted = true;			}		}		// Odeo Feed MP3's		if ($handler === 'odeo')		{			if ($native)			{				$embed .= '<embed src="http://odeo.com/flash/audio_player_fullsize.swf" pluginspage="http://adobe.com/go/getflashplayer" type="application/x-shockwave-flash" quality="high" width="440" height="80" wmode="transparent" allowScriptAccess="any" flashvars="valid_sample_rate=true&external_url=' . $this->get_link() . '"></embed>';			}			else			{				$embed .= '<script type="text/javascript">embed_odeo("' . $this->get_link() . '");</script>';			}		}		// Flash		elseif ($handler === 'flash')		{			if ($native)			{				$embed .= "<embed src=\"" . $this->get_link() . "\" pluginspage=\"http://adobe.com/go/getflashplayer\" type=\"$type\" quality=\"high\" width=\"$width\" height=\"$height\" bgcolor=\"$bgcolor\" loop=\"$loop\"></embed>";			}			else			{				$embed .= "<script type='text/javascript'>embed_flash('$bgcolor', '$width', '$height', '" . $this->get_link() . "', '$loop', '$type');</script>";			}		}		// Flash Media Player file types.		// Preferred handler for MP3 file types.		elseif ($handler === 'fmedia' || ($handler === 'mp3' && $mediaplayer !== ''))		{			$height += 20;			if ($native)			{				$embed .= "<embed src=\"$mediaplayer\" pluginspage=\"http://adobe.com/go/getflashplayer\" type=\"application/x-shockwave-flash\" quality=\"high\" width=\"$width\" height=\"$height\" wmode=\"transparent\" flashvars=\"file=" . rawurlencode($this->get_link().'?file_extension=.'.$this->get_extension()) . "&autostart=false&repeat=$loop&showdigits=true&showfsbutton=false\"></embed>";			}			else			{				$embed .= "<script type='text/javascript'>embed_flv('$width', '$height', '" . rawurlencode($this->get_link().'?file_extension=.'.$this->get_extension()) . "', '$placeholder', '$loop', '$mediaplayer');</script>";			}		}		// QuickTime 7 file types.  Need to test with QuickTime 6.		// Only handle MP3's if the Flash Media Player is not present.		elseif ($handler === 'quicktime' || ($handler === 'mp3' && $mediaplayer === ''))		{			$height += 16;			if ($native)			{				if ($placeholder !== '')				{					$embed .= "<embed type=\"$type\" style=\"cursor:hand; cursor:pointer;\" href=\"" . $this->get_link() . "\" src=\"$placeholder\" width=\"$width\" height=\"$height\" autoplay=\"false\" target=\"myself\" controller=\"false\" loop=\"$loop\" scale=\"aspect\" bgcolor=\"$bgcolor\" pluginspage=\"http://apple.com/quicktime/download/\"></embed>";				}				else				{					$embed .= "<embed type=\"$type\" style=\"cursor:hand; cursor:pointer;\" src=\"" . $this->get_link() . "\" width=\"$width\" height=\"$height\" autoplay=\"false\" target=\"myself\" controller=\"true\" loop=\"$loop\" scale=\"aspect\" bgcolor=\"$bgcolor\" pluginspage=\"http://apple.com/quicktime/download/\"></embed>";				}			}			else			{				$embed .= "<script type='text/javascript'>embed_quicktime('$type', '$bgcolor', '$width', '$height', '" . $this->get_link() . "', '$placeholder', '$loop');</script>";			}		}		// Windows Media		elseif ($handler === 'wmedia')		{			$height += 45;			if ($native)			{				$embed .= "<embed type=\"application/x-mplayer2\" src=\"" . $this->get_link() . "\" autosize=\"1\" width=\"$width\" height=\"$height\" showcontrols=\"1\" showstatusbar=\"0\" showdisplay=\"0\" autostart=\"0\"></embed>";			}			else			{				$embed .= "<script type='text/javascript'>embed_wmedia('$width', '$height', '" . $this->get_link() . "');</script>";			}		}		// Everything else		else $embed .= '<a href="' . $this->get_link() . '" class="' . $altclass . '">' . $alt . '</a>';		return $embed;	}	function get_real_type($find_handler = false)	{		// If it's Odeo, let's get it out of the way.		if (substr(strtolower($this->get_link()), 0, 15) === 'http://odeo.com')		{			return 'odeo';		}		// Mime-types by handler.		$types_flash = array('application/x-shockwave-flash', 'application/futuresplash'); // Flash		$types_fmedia = array('video/flv', 'video/x-flv','flv-application/octet-stream'); // Flash Media Player		$types_quicktime = array('audio/3gpp', 'audio/3gpp2', 'audio/aac', 'audio/x-aac', 'audio/aiff', 'audio/x-aiff', 'audio/mid', 'audio/midi', 'audio/x-midi', 'audio/mp4', 'audio/m4a', 'audio/x-m4a', 'audio/wav', 'audio/x-wav', 'video/3gpp', 'video/3gpp2', 'video/m4v', 'video/x-m4v', 'video/mp4', 'video/mpeg', 'video/x-mpeg', 'video/quicktime', 'video/sd-video'); // QuickTime		$types_wmedia = array('application/asx', 'application/x-mplayer2', 'audio/x-ms-wma', 'audio/x-ms-wax', 'video/x-ms-asf-plugin', 'video/x-ms-asf', 'video/x-ms-wm', 'video/x-ms-wmv', 'video/x-ms-wvx'); // Windows Media		$types_mp3 = array('audio/mp3', 'audio/x-mp3', 'audio/mpeg', 'audio/x-mpeg'); // MP3		if ($this->get_type() !== null)		{			$type = strtolower($this->type);		}		else		{			$type = null;		}		// If we encounter an unsupported mime-type, check the file extension and guess intelligently.		if (!in_array($type, array_merge($types_flash, $types_fmedia, $types_quicktime, $types_wmedia, $types_mp3)))		{			switch (strtolower($this->get_extension()))			{				// Audio mime-types				case 'aac':				case 'adts':					$type = 'audio/acc';					break;				case 'aif':				case 'aifc':				case 'aiff':				case 'cdda':					$type = 'audio/aiff';					break;				case 'bwf':					$type = 'audio/wav';					break;				case 'kar':				case 'mid':				case 'midi':				case 'smf':					$type = 'audio/midi';					break;				case 'm4a':					$type = 'audio/x-m4a';					break;				case 'mp3':				case 'swa':					$type = 'audio/mp3';					break;				case 'wav':					$type = 'audio/wav';					break;				case 'wax':					$type = 'audio/x-ms-wax';					break;				case 'wma':					$type = 'audio/x-ms-wma';					break;				// Video mime-types				case '3gp':				case '3gpp':					$type = 'video/3gpp';					break;				case '3g2':				case '3gp2':					$type = 'video/3gpp2';					break;				case 'asf':					$type = 'video/x-ms-asf';					break;				case 'flv':					$type = 'video/x-flv';					break;				case 'm1a':				case 'm1s':				case 'm1v':				case 'm15':				case 'm75':				case 'mp2':				case 'mpa':				case 'mpeg':				case 'mpg':				case 'mpm':				case 'mpv':					$type = 'video/mpeg';					break;				case 'm4v':					$type = 'video/x-m4v';					break;				case 'mov':				case 'qt':					$type = 'video/quicktime';					break;				case 'mp4':				case 'mpg4':					$type = 'video/mp4';					break;				case 'sdv':					$type = 'video/sd-video';					break;				case 'wm':					$type = 'video/x-ms-wm';					break;				case 'wmv':					$type = 'video/x-ms-wmv';					break;				case 'wvx':					$type = 'video/x-ms-wvx';					break;				// Flash mime-types				case 'spl':					$type = 'application/futuresplash';					break;				case 'swf':					$type = 'application/x-shockwave-flash';					break;			}		}		if ($find_handler)		{			if (in_array($type, $types_flash))			{				return 'flash';			}			elseif (in_array($type, $types_fmedia))			{				return 'fmedia';			}			elseif (in_array($type, $types_quicktime))			{				return 'quicktime';			}			elseif (in_array($type, $types_wmedia))			{				return 'wmedia';			}			elseif (in_array($type, $types_mp3))			{				return 'mp3';			}			else			{				return null;			}		}		else		{			return $type;		}	}}class SimplePie_Caption{	var $type;	var $lang;	var $startTime;	var $endTime;	var $text;	// Constructor, used to input the data	function SimplePie_Caption($type = null, $lang = null, $startTime = null, $endTime = null, $text = null)	{		$this->type = $type;		$this->lang = $lang;		$this->startTime = $startTime;		$this->endTime = $endTime;		$this->text = $text;	}	function __toString()	{		// There is no $this->data here		return md5(serialize($this));	}	function get_endtime()	{		if ($this->endTime !== null)		{			return $this->endTime;		}		else		{			return null;		}	}	function get_language()	{		if ($this->lang !== null)		{			return $this->lang;		}		else		{			return null;		}	}	function get_starttime()	{		if ($this->startTime !== null)		{			return $this->startTime;		}		else		{			return null;		}	}	function get_text()	{		if ($this->text !== null)		{			return $this->text;		}		else		{			return null;		}	}	function get_type()	{		if ($this->type !== null)		{			return $this->type;		}		else		{			return null;		}	}}class SimplePie_Credit{	var $role;	var $scheme;	var $name;	// Constructor, used to input the data	function SimplePie_Credit($role = null, $scheme = null, $name = null)	{		$this->role = $role;		$this->scheme = $scheme;		$this->name = $name;	}	function __toString()	{		// There is no $this->data here		return md5(serialize($this));	}	function get_role()	{		if ($this->role !== null)		{			return $this->role;		}		else		{			return null;		}	}	function get_scheme()	{		if ($this->scheme !== null)		{			return $this->scheme;		}		else		{			return null;		}	}	function get_name()	{		if ($this->name !== null)		{			return $this->name;		}		else		{			return null;		}	}}class SimplePie_Copyright{	var $url;	var $label;	// Constructor, used to input the data	function SimplePie_Copyright($url = null, $label = null)	{		$this->url = $url;		$this->label = $label;	}	function __toString()	{		// There is no $this->data here		return md5(serialize($this));	}	function get_url()	{		if ($this->url !== null)		{			return $this->url;		}		else		{			return null;		}	}	function get_attribution()	{		if ($this->label !== null)		{			return $this->label;		}		else		{			return null;		}	}}class SimplePie_Rating{	var $scheme;	var $value;	// Constructor, used to input the data	function SimplePie_Rating($scheme = null, $value = null)	{		$this->scheme = $scheme;		$this->value = $value;	}	function __toString()	{		// There is no $this->data here		return md5(serialize($this));	}	function get_scheme()	{		if ($this->scheme !== null)		{			return $this->scheme;		}		else		{			return null;		}	}	function get_value()	{		if ($this->value !== null)		{			return $this->value;		}		else		{			return null;		}	}}class SimplePie_Restriction{	var $relationship;	var $type;	var $value;	// Constructor, used to input the data	function SimplePie_Restriction($relationship = null, $type = null, $value = null)	{		$this->relationship = $relationship;		$this->type = $type;		$this->value = $value;	}	function __toString()	{		// There is no $this->data here		return md5(serialize($this));	}	function get_relationship()	{		if ($this->relationship !== null)		{			return $this->relationship;		}		else		{			return null;		}	}	function get_type()	{		if ($this->type !== null)		{			return $this->type;		}		else		{			return null;		}	}	function get_value()	{		if ($this->value !== null)		{			return $this->value;		}		else		{			return null;		}	}}/** * @todo Move to properly supporting RFC2616 (HTTP/1.1) */class SimplePie_File{	var $url;	var $useragent;	var $success = true;	var $headers = array();	var $body;	var $status_code;	var $redirects = 0;	var $error;	var $method = SIMPLEPIE_FILE_SOURCE_NONE;	function SimplePie_File($url, $timeout = 10, $redirects = 5, $headers = null, $useragent = null, $force_fsockopen = false)	{		if (class_exists('idna_convert'))		{			$idn = new idna_convert;			$parsed = SimplePie_Misc::parse_url($url);			$url = SimplePie_Misc::compress_parse_url($parsed['scheme'], $idn->encode($parsed['authority']), $parsed['path'], $parsed['query'], $parsed['fragment']);		}		$this->url = $url;		$this->useragent = $useragent;		if (preg_match('/^http(s)?:\/\//i', $url))		{			if ($useragent === null)			{				$useragent = ini_get('user_agent');				$this->useragent = $useragent;			}			if (!is_array($headers))			{				$headers = array();			}			if (!$force_fsockopen && function_exists('curl_exec'))			{				$this->method = SIMPLEPIE_FILE_SOURCE_REMOTE | SIMPLEPIE_FILE_SOURCE_CURL;				$fp = curl_init();				$headers2 = array();				foreach ($headers as $key => $value)				{					$headers2[] = "$key: $value";				}				if (version_compare(SimplePie_Misc::get_curl_version(), '7.10.5', '>='))				{					curl_setopt($fp, CURLOPT_ENCODING, '');				}				curl_setopt($fp, CURLOPT_URL, $url);				curl_setopt($fp, CURLOPT_HEADER, 1);				curl_setopt($fp, CURLOPT_RETURNTRANSFER, 1);				curl_setopt($fp, CURLOPT_TIMEOUT, $timeout);				curl_setopt($fp, CURLOPT_CONNECTTIMEOUT, $timeout);				curl_setopt($fp, CURLOPT_REFERER, $url);				curl_setopt($fp, CURLOPT_USERAGENT, $useragent);				curl_setopt($fp, CURLOPT_HTTPHEADER, $headers2);				if (!ini_get('open_basedir') && !ini_get('safe_mode') && version_compare(SimplePie_Misc::get_curl_version(), '7.15.2', '>='))				{					curl_setopt($fp, CURLOPT_FOLLOWLOCATION, 1);					curl_setopt($fp, CURLOPT_MAXREDIRS, $redirects);				}				$this->headers = curl_exec($fp);				if (curl_errno($fp) === 23 || curl_errno($fp) === 61)				{					curl_setopt($fp, CURLOPT_ENCODING, 'none');					$this->headers = curl_exec($fp);				}				if (curl_errno($fp))				{					$this->error = 'cURL error ' . curl_errno($fp) . ': ' . curl_error($fp);					$this->success = false;				}				else				{					$info = curl_getinfo($fp);					curl_close($fp);					$this->headers = explode("\r\n\r\n", $this->headers, $info['redirect_count'] + 1);					$this->headers = array_pop($this->headers);					$parser = new SimplePie_HTTP_Parser($this->headers);					if ($parser->parse())					{						$this->headers = $parser->headers;						$this->body = $parser->body;						$this->status_code = $parser->status_code;						if ((in_array($this->status_code, array(300, 301, 302, 303, 307)) || $this->status_code > 307 && $this->status_code < 400) && isset($this->headers['location']) && $this->redirects < $redirects)						{							$this->redirects++;							$location = SimplePie_Misc::absolutize_url($this->headers['location'], $url);							return $this->SimplePie_File($location, $timeout, $redirects, $headers, $useragent, $force_fsockopen);						}					}				}			}			else			{				$this->method = SIMPLEPIE_FILE_SOURCE_REMOTE | SIMPLEPIE_FILE_SOURCE_FSOCKOPEN;				$url_parts = parse_url($url);				if (isset($url_parts['scheme']) && strtolower($url_parts['scheme']) === 'https')				{					$url_parts['host'] = "ssl://$url_parts[host]";					$url_parts['port'] = 443;				}				if (!isset($url_parts['port']))				{					$url_parts['port'] = 80;				}				$fp = @fsockopen($url_parts['host'], $url_parts['port'], $errno, $errstr, $timeout);				if (!$fp)				{					$this->error = 'fsockopen error: ' . $errstr;					$this->success = false;				}				else				{					stream_set_timeout($fp, $timeout);					if (isset($url_parts['path']))					{						if (isset($url_parts['query']))						{							$get = "$url_parts[path]?$url_parts[query]";						}						else						{							$get = $url_parts['path'];						}					}					else					{						$get = '/';					}					$out = "GET $get HTTP/1.0\r\n";					$out .= "Host: $url_parts[host]\r\n";					$out .= "User-Agent: $useragent\r\n";					if (extension_loaded('zlib'))					{						$out .= "Accept-Encoding: x-gzip,gzip,deflate\r\n";					}					if (isset($url_parts['user']) && isset($url_parts['pass']))					{						$out .= "Authorization: Basic " . base64_encode("$url_parts[user]:$url_parts[pass]") . "\r\n";					}					foreach ($headers as $key => $value)					{						$out .= "$key: $value\r\n";					}					$out .= "Connection: Close\r\n\r\n";					fwrite($fp, $out);					$info = stream_get_meta_data($fp);					$this->headers = '';					while (!$info['eof'] && !$info['timed_out'])					{						$this->headers .= fread($fp, 1160);						$info = stream_get_meta_data($fp);					}					if (!$info['timed_out'])					{						$parser = new SimplePie_HTTP_Parser($this->headers);						if ($parser->parse())						{							$this->headers = $parser->headers;							$this->body = $parser->body;							$this->status_code = $parser->status_code;							if ((in_array($this->status_code, array(300, 301, 302, 303, 307)) || $this->status_code > 307 && $this->status_code < 400) && isset($this->headers['location']) && $this->redirects < $redirects)							{								$this->redirects++;								$location = SimplePie_Misc::absolutize_url($this->headers['location'], $url);								return $this->SimplePie_File($location, $timeout, $redirects, $headers, $useragent, $force_fsockopen);							}							if (isset($this->headers['content-encoding']))							{								// Hey, we act dumb elsewhere, so let's do that here too								switch (strtolower(trim($this->headers['content-encoding'], "\x09\x0A\x0D\x20")))								{									case 'gzip':									case 'x-gzip':										$decoder = new SimplePie_gzdecode($this->body);										if (!$decoder->parse())										{											$this->error = 'Unable to decode HTTP "gzip" stream';											$this->success = false;										}										else										{											$this->body = $decoder->data;										}										break;									case 'deflate':										if (($body = gzuncompress($this->body)) === false)										{											if (($body = gzinflate($this->body)) === false)											{												$this->error = 'Unable to decode HTTP "deflate" stream';												$this->success = false;											}										}										$this->body = $body;										break;									default:										$this->error = 'Unknown content coding';										$this->success = false;								}							}						}					}					else					{						$this->error = 'fsocket timed out';						$this->success = false;					}					fclose($fp);				}			}		}		else		{			$this->method = SIMPLEPIE_FILE_SOURCE_LOCAL | SIMPLEPIE_FILE_SOURCE_FILE_GET_CONTENTS;			if (!$this->body = file_get_contents($url))			{				$this->error = 'file_get_contents could not read the file';				$this->success = false;			}		}	}}/** * HTTP Response Parser * * @package SimplePie */class SimplePie_HTTP_Parser{	/**	 * HTTP Version	 *	 * @access public	 * @var float	 */	var $http_version = 0.0;	/**	 * Status code	 *	 * @access public	 * @var int	 */	var $status_code = 0;	/**	 * Reason phrase	 *	 * @access public	 * @var string	 */	var $reason = '';	/**	 * Key/value pairs of the headers	 *	 * @access public	 * @var array	 */	var $headers = array();	/**	 * Body of the response	 *	 * @access public	 * @var string	 */	var $body = '';	/**	 * Current state of the state machine	 *	 * @access private	 * @var string	 */	var $state = 'http_version';	/**	 * Input data	 *	 * @access private	 * @var string	 */	var $data = '';	/**	 * Input data length (to avoid calling strlen() everytime this is needed)	 *	 * @access private	 * @var int	 */	var $data_length = 0;	/**	 * Current position of the pointer	 *	 * @var int	 * @access private	 */	var $position = 0;	/**	 * Name of the hedaer currently being parsed	 *	 * @access private	 * @var string	 */	var $name = '';	/**	 * Value of the hedaer currently being parsed	 *	 * @access private	 * @var string	 */	var $value = '';	/**	 * Create an instance of the class with the input data	 *	 * @access public	 * @param string $data Input data	 */	function SimplePie_HTTP_Parser($data)	{		$this->data = $data;		$this->data_length = strlen($this->data);	}	/**	 * Parse the input data	 *	 * @access public	 * @return bool true on success, false on failure	 */	function parse()	{		while ($this->state && $this->state !== 'emit' && $this->has_data())		{			$state = $this->state;			$this->$state();		}		$this->data = '';		if ($this->state === 'emit' || $this->state === 'body')		{			return true;		}		else		{			$this->http_version = '';			$this->status_code = '';			$this->reason = '';			$this->headers = array();			$this->body = '';			return false;		}	}	/**	 * Check whether there is data beyond the pointer	 *	 * @access private	 * @return bool true if there is further data, false if not	 */	function has_data()	{		return (bool) ($this->position < $this->data_length);	}	/**	 * See if the next character is LWS	 *	 * @access private	 * @return bool true if the next character is LWS, false if not	 */	function is_linear_whitespace()	{		return (bool) ($this->data[$this->position] === "\x09"			|| $this->data[$this->position] === "\x20"			|| ($this->data[$this->position] === "\x0A"				&& isset($this->data[$this->position + 1])				&& ($this->data[$this->position + 1] === "\x09" || $this->data[$this->position + 1] === "\x20")));	}	/**	 * Parse the HTTP version	 *	 * @access private	 */	function http_version()	{		if (strpos($this->data, "\x0A") !== false && strtoupper(substr($this->data, 0, 5)) === 'HTTP/')		{			$len = strspn($this->data, '0123456789.', 5);			$this->http_version = substr($this->data, 5, $len);			$this->position += 5 + $len;			if (substr_count($this->http_version, '.') <= 1)			{				$this->http_version = (float) $this->http_version;				$this->position += strspn($this->data, "\x09\x20", $this->position);				$this->state = 'status';			}			else			{				$this->state = false;			}		}		else		{			$this->state = false;		}	}	/**	 * Parse the status code	 *	 * @access private	 */	function status()	{		if ($len = strspn($this->data, '0123456789', $this->position))		{			$this->status_code = (int) substr($this->data, $this->position, $len);			$this->position += $len;			$this->state = 'reason';		}		else		{			$this->state = false;		}	}	/**	 * Parse the reason phrase	 *	 * @access private	 */	function reason()	{		$len = strcspn($this->data, "\x0A", $this->position);		$this->reason = trim(substr($this->data, $this->position, $len), "\x09\x0D\x20");		$this->position += $len + 1;		$this->state = 'new_line';	}	/**	 * Deal with a new line, shifting data around as needed	 *	 * @access private	 */	function new_line()	{		$this->value = trim($this->value, "\x0D\x20");		if ($this->name !== '' && $this->value !== '')		{			$this->name = strtolower($this->name);			if (isset($this->headers[$this->name]))			{				$this->headers[$this->name] .= ', ' . $this->value;			}			else			{				$this->headers[$this->name] = $this->value;			}		}		$this->name = '';		$this->value = '';		if (substr($this->data[$this->position], 0, 2) === "\x0D\x0A")		{			$this->position += 2;			$this->state = 'body';		}		elseif ($this->data[$this->position] === "\x0A")		{			$this->position++;			$this->state = 'body';		}		else		{			$this->state = 'name';		}	}	/**	 * Parse a header name	 *	 * @access private	 */	function name()	{		$len = strcspn($this->data, "\x0A:", $this->position);		if (isset($this->data[$this->position + $len]))		{			if ($this->data[$this->position + $len] === "\x0A")			{				$this->position += $len;				$this->state = 'new_line';			}			else			{				$this->name = substr($this->data, $this->position, $len);				$this->position += $len + 1;				$this->state = 'value';			}		}		else		{			$this->state = false;		}	}	/**	 * Parse LWS, replacing consecutive LWS characters with a single space	 *	 * @access private	 */	function linear_whitespace()	{		do		{			if (substr($this->data, $this->position, 2) === "\x0D\x0A")			{				$this->position += 2;			}			elseif ($this->data[$this->position] === "\x0A")			{				$this->position++;			}			$this->position += strspn($this->data, "\x09\x20", $this->position);		} while ($this->has_data() && $this->is_linear_whitespace());		$this->value .= "\x20";	}	/**	 * See what state to move to while within non-quoted header values	 *	 * @access private	 */	function value()	{		if ($this->is_linear_whitespace())		{			$this->linear_whitespace();		}		else		{			switch ($this->data[$this->position])			{				case '"':					$this->position++;					$this->state = 'quote';					break;				case "\x0A":					$this->position++;					$this->state = 'new_line';					break;				default:					$this->state = 'value_char';					break;			}		}	}	/**	 * Parse a header value while outside quotes	 *	 * @access private	 */	function value_char()	{		$len = strcspn($this->data, "\x09\x20\x0A\"", $this->position);		$this->value .= substr($this->data, $this->position, $len);		$this->position += $len;		$this->state = 'value';	}	/**	 * See what state to move to while within quoted header values	 *	 * @access private	 */	function quote()	{		if ($this->is_linear_whitespace())		{			$this->linear_whitespace();		}		else		{			switch ($this->data[$this->position])			{				case '"':					$this->position++;					$this->state = 'value';					break;				case "\x0A":					$this->position++;					$this->state = 'new_line';					break;				case '\\':					$this->position++;					$this->state = 'quote_escaped';					break;				default:					$this->state = 'quote_char';					break;			}		}	}	/**	 * Parse a header value while within quotes	 *	 * @access private	 */	function quote_char()	{		$len = strcspn($this->data, "\x09\x20\x0A\"\\", $this->position);		$this->value .= substr($this->data, $this->position, $len);		$this->position += $len;		$this->state = 'value';	}	/**	 * Parse an escaped character within quotes	 *	 * @access private	 */	function quote_escaped()	{		$this->value .= $this->data[$this->position];		$this->position++;		$this->state = 'quote';	}	/**	 * Parse the body	 *	 * @access private	 */	function body()	{		$this->body = substr($this->data, $this->position);		$this->state = 'emit';	}}/** * gzdecode * * @package SimplePie */class SimplePie_gzdecode{	/**	 * Compressed data	 *	 * @access private	 * @see gzdecode::$data	 */	var $compressed_data;	/**	 * Size of compressed data	 *	 * @access private	 */	var $compressed_size;	/**	 * Minimum size of a valid gzip string	 *	 * @access private	 */	var $min_compressed_size = 18;	/**	 * Current position of pointer	 *	 * @access private	 */	var $position = 0;	/**	 * Flags (FLG)	 *	 * @access private	 */	var $flags;	/**	 * Uncompressed data	 *	 * @access public	 * @see gzdecode::$compressed_data	 */	var $data;	/**	 * Modified time	 *	 * @access public	 */	var $MTIME;	/**	 * Extra Flags	 *	 * @access public	 */	var $XFL;	/**	 * Operating System	 *	 * @access public	 */	var $OS;	/**	 * Subfield ID 1	 *	 * @access public	 * @see gzdecode::$extra_field	 * @see gzdecode::$SI2	 */	var $SI1;	/**	 * Subfield ID 2	 *	 * @access public	 * @see gzdecode::$extra_field	 * @see gzdecode::$SI1	 */	var $SI2;	/**	 * Extra field content	 *	 * @access public	 * @see gzdecode::$SI1	 * @see gzdecode::$SI2	 */	var $extra_field;	/**	 * Original filename	 *	 * @access public	 */	var $filename;	/**	 * Human readable comment	 *	 * @access public	 */	var $comment;	/**	 * Don't allow anything to be set	 *	 * @access public	 */	function __set($name, $value)	{		trigger_error("Cannot write property $name", E_USER_ERROR);	}	/**	 * Set the compressed string and related properties	 *	 * @access public	 */	function SimplePie_gzdecode($data)	{		$this->compressed_data = $data;		$this->compressed_size = strlen($data);	}	/**	 * Decode the GZIP stream	 *	 * @access public	 */	function parse()	{		if ($this->compressed_size >= $this->min_compressed_size)		{			// Check ID1, ID2, and CM			if (substr($this->compressed_data, 0, 3) !== "\x1F\x8B\x08")			{				return false;			}			// Get the FLG (FLaGs)			$this->flags = ord($this->compressed_data[3]);			// FLG bits above (1 << 4) are reserved			if ($this->flags > 0x1F)			{				return false;			}			// Advance the pointer after the above			$this->position += 4;			// MTIME			$mtime = substr($this->compressed_data, $this->position, 4);			// Reverse the string if we're on a big-endian arch because l is the only signed long and is machine endianness			if (current(unpack('S', "\x00\x01")) === 1)			{				$mtime = strrev($mtime);			}			$this->MTIME = current(unpack('l', $mtime));			$this->position += 4;			// Get the XFL (eXtra FLags)			$this->XFL = ord($this->compressed_data[$this->position++]);			// Get the OS (Operating System)			$this->OS = ord($this->compressed_data[$this->position++]);			// Parse the FEXTRA			if ($this->flags & 4)			{				// Read subfield IDs				$this->SI1 = $this->compressed_data[$this->position++];				$this->SI2 = $this->compressed_data[$this->position++];				// SI2 set to zero is reserved for future use				if ($this->SI2 === "\x00")				{					return false;				}				// Get the length of the extra field				$len = current(unpack('v', substr($this->compressed_data, $this->position, 2)));				$position += 2;				// Check the length of the string is still valid				$this->min_compressed_size += $len + 4;				if ($this->compressed_size >= $this->min_compressed_size)				{					// Set the extra field to the given data					$this->extra_field = substr($this->compressed_data, $this->position, $len);					$this->position += $len;				}				else				{					return false;				}			}			// Parse the FNAME			if ($this->flags & 8)			{				// Get the length of the filename				$len = strcspn($this->compressed_data, "\x00", $this->position);				// Check the length of the string is still valid				$this->min_compressed_size += $len + 1;				if ($this->compressed_size >= $this->min_compressed_size)				{					// Set the original filename to the given string					$this->filename = substr($this->compressed_data, $this->position, $len);					$this->position += $len + 1;				}				else				{					return false;				}			}			// Parse the FCOMMENT			if ($this->flags & 16)			{				// Get the length of the comment				$len = strcspn($this->compressed_data, "\x00", $this->position);				// Check the length of the string is still valid				$this->min_compressed_size += $len + 1;				if ($this->compressed_size >= $this->min_compressed_size)				{					// Set the original comment to the given string					$this->comment = substr($this->compressed_data, $this->position, $len);					$this->position += $len + 1;				}				else				{					return false;				}			}			// Parse the FHCRC			if ($this->flags & 2)			{				// Check the length of the string is still valid				$this->min_compressed_size += $len + 2;				if ($this->compressed_size >= $this->min_compressed_size)				{					// Read the CRC					$crc = current(unpack('v', substr($this->compressed_data, $this->position, 2)));					// Check the CRC matches					if ((crc32(substr($this->compressed_data, 0, $this->position)) & 0xFFFF) === $crc)					{						$this->position += 2;					}					else					{						return false;					}				}				else				{					return false;				}			}			// Decompress the actual data			if (($this->data = gzinflate(substr($this->compressed_data, $this->position, -8))) === false)			{				return false;			}			else			{				$this->position = $this->compressed_size - 8;			}			// Check CRC of data			$crc = current(unpack('V', substr($this->compressed_data, $this->position, 4)));			$this->position += 4;			/*if (extension_loaded('hash') && sprintf('%u', current(unpack('V', hash('crc32b', $this->data)))) !== sprintf('%u', $crc))			{				return false;			}*/			// Check ISIZE of data			$isize = current(unpack('V', substr($this->compressed_data, $this->position, 4)));			$this->position += 4;			if (sprintf('%u', strlen($this->data) & 0xFFFFFFFF) !== sprintf('%u', $isize))			{				return false;			}			// Wow, against all odds, we've actually got a valid gzip string			return true;		}		else		{			return false;		}	}}class SimplePie_Cache{	/**	 * Don't call the constructor. Please.	 *	 * @access private	 */	function SimplePie_Cache()	{		trigger_error('Please call SimplePie_Cache::create() instead of the constructor', E_USER_ERROR);	}	/**	 * Create a new SimplePie_Cache object	 *	 * @static	 * @access public	 */	function create($location, $filename, $extension)	{		$location_iri = new SimplePie_IRI($location);		switch ($location_iri->get_scheme())		{			case 'mysql':				if (extension_loaded('mysql'))				{					return new SimplePie_Cache_MySQL($location_iri, $filename, $extension);				}				break;			default:				return new SimplePie_Cache_File($location, $filename, $extension);		}	}}class SimplePie_Cache_File{	var $location;	var $filename;	var $extension;	var $name;	function SimplePie_Cache_File($location, $filename, $extension)	{		$this->location = $location;		$this->filename = $filename;		$this->extension = $extension;		$this->name = "$this->location/$this->filename.$this->extension";	}	function save($data)	{		if (file_exists($this->name) && is_writeable($this->name) || file_exists($this->location) && is_writeable($this->location))		{			if (is_a($data, 'SimplePie'))			{				$data = $data->data;			}			$data = serialize($data);			if (function_exists('file_put_contents'))			{				return (bool) file_put_contents($this->name, $data);			}			else			{				$fp = fopen($this->name, 'wb');				if ($fp)				{					fwrite($fp, $data);					fclose($fp);					return true;				}			}		}		return false;	}	function load()	{		if (file_exists($this->name) && is_readable($this->name))		{			return unserialize(file_get_contents($this->name));		}		return false;	}	function mtime()	{		if (file_exists($this->name))		{			return filemtime($this->name);		}		return false;	}	function touch()	{		if (file_exists($this->name))		{			return touch($this->name);		}		return false;	}	function unlink()	{		if (file_exists($this->name))		{			return unlink($this->name);		}		return false;	}}class SimplePie_Cache_DB{	function prepare_simplepie_object_for_cache($data)	{		$items = $data->get_items();		$items_by_id = array();		if (!empty($items))		{			foreach ($items as $item)			{				$items_by_id[$item->get_id()] = $item;			}			if (count($items_by_id) !== count($items))			{				$items_by_id = array();				foreach ($items as $item)				{					$items_by_id[$item->get_id(true)] = $item;				}			}			if (isset($data->data['child'][SIMPLEPIE_NAMESPACE_ATOM_10]['feed'][0]))			{				$channel =& $data->data['child'][SIMPLEPIE_NAMESPACE_ATOM_10]['feed'][0];			}			elseif (isset($data->data['child'][SIMPLEPIE_NAMESPACE_ATOM_03]['feed'][0]))			{				$channel =& $data->data['child'][SIMPLEPIE_NAMESPACE_ATOM_03]['feed'][0];			}			elseif (isset($data->data['child'][SIMPLEPIE_NAMESPACE_RDF]['RDF'][0]))			{				$channel =& $data->data['child'][SIMPLEPIE_NAMESPACE_RDF]['RDF'][0];			}			elseif (isset($data->data['child'][SIMPLEPIE_NAMESPACE_RSS_20]['rss'][0]['child'][SIMPLEPIE_NAMESPACE_RSS_20]['channel'][0]))			{				$channel =& $data->data['child'][SIMPLEPIE_NAMESPACE_RSS_20]['rss'][0]['child'][SIMPLEPIE_NAMESPACE_RSS_20]['channel'][0];			}			else			{				$channel = null;			}			if ($channel !== null)			{				if (isset($channel['child'][SIMPLEPIE_NAMESPACE_ATOM_10]['entry']))				{					unset($channel['child'][SIMPLEPIE_NAMESPACE_ATOM_10]['entry']);				}				if (isset($channel['child'][SIMPLEPIE_NAMESPACE_ATOM_03]['entry']))				{					unset($channel['child'][SIMPLEPIE_NAMESPACE_ATOM_03]['entry']);				}				if (isset($channel['child'][SIMPLEPIE_NAMESPACE_RSS_10]['item']))				{					unset($channel['child'][SIMPLEPIE_NAMESPACE_RSS_10]['item']);				}				if (isset($channel['child'][SIMPLEPIE_NAMESPACE_RSS_090]['item']))				{					unset($channel['child'][SIMPLEPIE_NAMESPACE_RSS_090]['item']);				}				if (isset($channel['child'][SIMPLEPIE_NAMESPACE_RSS_20]['item']))				{					unset($channel['child'][SIMPLEPIE_NAMESPACE_RSS_20]['item']);				}			}			if (isset($data->data['items']))			{				unset($data->data['items']);			}			if (isset($data->data['ordered_items']))			{				unset($data->data['ordered_items']);			}		}		return array(serialize($data->data), $items_by_id);	}}class SimplePie_Cache_MySQL extends SimplePie_Cache_DB{	var $mysql;	var $options;	var $id;	function SimplePie_Cache_MySQL($mysql_location, $name, $extension)	{		$host = $mysql_location->get_host();		if (SimplePie_Misc::stripos($host, 'unix(') === 0 && substr($host, -1) === ')')		{			$server = ':' . substr($host, 5, -1);		}		else		{			$server = $host;			if ($mysql_location->get_port() !== null)			{				$server .= ':' . $mysql_location->get_port();			}		}		if (strpos($mysql_location->get_userinfo(), ':') !== false)		{			list($username, $password) = explode(':', $mysql_location->get_userinfo(), 2);		}		else		{			$username = $mysql_location->get_userinfo();			$password = null;		}		if ($this->mysql = mysql_connect($server, $username, $password))		{			$this->id = $name . $extension;			$this->options = SimplePie_Misc::parse_str($mysql_location->get_query());			if (!isset($this->options['prefix'][0]))			{				$this->options['prefix'][0] = '';			}			if (mysql_select_db(ltrim($mysql_location->get_path(), '/'))				&& mysql_query('SET NAMES utf8')				&& ($query = mysql_unbuffered_query('SHOW TABLES')))			{				$db = array();				while ($row = mysql_fetch_row($query))				{					$db[] = $row[0];				}				if (!in_array($this->options['prefix'][0] . 'cache_data', $db))				{					if (!mysql_query('CREATE TABLE `' . $this->options['prefix'][0] . 'cache_data` (`id` TEXT CHARACTER SET utf8 NOT NULL, `items` SMALLINT NOT NULL DEFAULT 0, `data` BLOB NOT NULL, `mtime` INT UNSIGNED NOT NULL, UNIQUE (`id`(125)))'))					{						$this->mysql = null;					}				}				if (!in_array($this->options['prefix'][0] . 'items', $db))				{					if (!mysql_query('CREATE TABLE `' . $this->options['prefix'][0] . 'items` (`feed_id` TEXT CHARACTER SET utf8 NOT NULL, `id` TEXT CHARACTER SET utf8 NOT NULL, `data` TEXT CHARACTER SET utf8 NOT NULL, `posted` INT UNSIGNED NOT NULL, INDEX `feed_id` (`feed_id`(125)))'))					{						$this->mysql = null;					}				}			}			else			{				$this->mysql = null;			}		}	}	function save($data)	{		if ($this->mysql)		{			$feed_id = "'" . mysql_real_escape_string($this->id) . "'";			if (is_a($data, 'SimplePie'))			{				if (SIMPLEPIE_PHP5)				{					// This keyword needs to defy coding standards for PHP4 compatibility					$data = clone($data);				}				$prepared = $this->prepare_simplepie_object_for_cache($data);				if ($query = mysql_query('SELECT `id` FROM `' . $this->options['prefix'][0] . 'cache_data` WHERE `id` = ' . $feed_id, $this->mysql))				{					if (mysql_num_rows($query))					{						$items = count($prepared[1]);						if ($items)						{							$sql = 'UPDATE `' . $this->options['prefix'][0] . 'cache_data` SET `items` = ' . $items . ', `data` = \'' . mysql_real_escape_string($prepared[0]) . '\', `mtime` = ' . time() . ' WHERE `id` = ' . $feed_id;						}						else						{							$sql = 'UPDATE `' . $this->options['prefix'][0] . 'cache_data` SET `data` = \'' . mysql_real_escape_string($prepared[0]) . '\', `mtime` = ' . time() . ' WHERE `id` = ' . $feed_id;						}						if (!mysql_query($sql, $this->mysql))						{							return false;						}					}					elseif (!mysql_query('INSERT INTO `' . $this->options['prefix'][0] . 'cache_data` (`id`, `items`, `data`, `mtime`) VALUES(' . $feed_id . ', ' . count($prepared[1]) . ', \'' . mysql_real_escape_string($prepared[0]) . '\', ' . time() . ')', $this->mysql))					{						return false;					}					$ids = array_keys($prepared[1]);					if (!empty($ids))					{						foreach ($ids as $id)						{							$database_ids[] = mysql_real_escape_string($id);						}						if ($query = mysql_unbuffered_query('SELECT `id` FROM `' . $this->options['prefix'][0] . 'items` WHERE `id` = \'' . implode('\' OR `id` = \'', $database_ids) . '\' AND `feed_id` = ' . $feed_id, $this->mysql))						{							$existing_ids = array();							while ($row = mysql_fetch_row($query))							{								$existing_ids[] = $row[0];							}							$new_ids = array_diff($ids, $existing_ids);							foreach ($new_ids as $new_id)							{								if (!($date = $prepared[1][$new_id]->get_date('U')))								{									$date = time();								}								if (!mysql_query('INSERT INTO `' . $this->options['prefix'][0] . 'items` (`feed_id`, `id`, `data`, `posted`) VALUES(' . $feed_id . ', \'' . mysql_real_escape_string($new_id) . '\', \'' . mysql_real_escape_string(serialize($prepared[1][$new_id]->data)) . '\', ' . $date . ')', $this->mysql))								{									return false;								}							}							return true;						}					}					else					{						return true;					}				}			}			elseif ($query = mysql_query('SELECT `id` FROM `' . $this->options['prefix'][0] . 'cache_data` WHERE `id` = ' . $feed_id, $this->mysql))			{				if (mysql_num_rows($query))				{					if (mysql_query('UPDATE `' . $this->options['prefix'][0] . 'cache_data` SET `items` = 0, `data` = \'' . mysql_real_escape_string(serialize($data)) . '\', `mtime` = ' . time() . ' WHERE `id` = ' . $feed_id, $this->mysql))					{						return true;					}				}				elseif (mysql_query('INSERT INTO `' . $this->options['prefix'][0] . 'cache_data` (`id`, `items`, `data`, `mtime`) VALUES(\'' . mysql_real_escape_string($this->id) . '\', 0, \'' . mysql_real_escape_string(serialize($data)) . '\', ' . time() . ')', $this->mysql))				{					return true;				}			}		}		return false;	}	function load()	{		if ($this->mysql && ($query = mysql_query('SELECT `items`, `data` FROM `' . $this->options['prefix'][0] . 'cache_data` WHERE `id` = \'' . mysql_real_escape_string($this->id) . "'", $this->mysql)) && ($row = mysql_fetch_row($query)))		{			$data = unserialize($row[1]);			if (isset($this->options['items'][0]))			{				$items = (int) $this->options['items'][0];			}			else			{				$items = (int) $row[0];			}			if ($items !== 0)			{				if (isset($data['child'][SIMPLEPIE_NAMESPACE_ATOM_10]['feed'][0]))				{					$feed =& $data['child'][SIMPLEPIE_NAMESPACE_ATOM_10]['feed'][0];				}				elseif (isset($data['child'][SIMPLEPIE_NAMESPACE_ATOM_03]['feed'][0]))				{					$feed =& $data['child'][SIMPLEPIE_NAMESPACE_ATOM_03]['feed'][0];				}				elseif (isset($data['child'][SIMPLEPIE_NAMESPACE_RDF]['RDF'][0]))				{					$feed =& $data['child'][SIMPLEPIE_NAMESPACE_RDF]['RDF'][0];				}				elseif (isset($data['child'][SIMPLEPIE_NAMESPACE_RSS_20]['rss'][0]))				{					$feed =& $data['child'][SIMPLEPIE_NAMESPACE_RSS_20]['rss'][0];				}				else				{					$feed = null;				}				if ($feed !== null)				{					$sql = 'SELECT `data` FROM `' . $this->options['prefix'][0] . 'items` WHERE `feed_id` = \'' . mysql_real_escape_string($this->id) . '\' ORDER BY `posted` DESC';					if ($items > 0)					{						$sql .= ' LIMIT ' . $items;					}					if ($query = mysql_unbuffered_query($sql, $this->mysql))					{						while ($row = mysql_fetch_row($query))						{							$feed['child'][SIMPLEPIE_NAMESPACE_ATOM_10]['entry'][] = unserialize($row[0]);						}					}					else					{						return false;					}				}			}			return $data;		}		return false;	}	function mtime()	{		if ($this->mysql && ($query = mysql_query('SELECT `mtime` FROM `' . $this->options['prefix'][0] . 'cache_data` WHERE `id` = \'' . mysql_real_escape_string($this->id) . "'", $this->mysql)) && ($row = mysql_fetch_row($query)))		{			return $row[0];		}		else		{			return false;		}	}	function touch()	{		if ($this->mysql && ($query = mysql_query('UPDATE `' . $this->options['prefix'][0] . 'cache_data` SET `mtime` = ' . time() . ' WHERE `id` = \'' . mysql_real_escape_string($this->id) . "'", $this->mysql)) && mysql_affected_rows($this->mysql))		{			return true;		}		else		{			return false;		}	}	function unlink()	{		if ($this->mysql && ($query = mysql_query('DELETE FROM `' . $this->options['prefix'][0] . 'cache_data` WHERE `id` = \'' . mysql_real_escape_string($this->id) . "'", $this->mysql)) && ($query2 = mysql_query('DELETE FROM `' . $this->options['prefix'][0] . 'items` WHERE `feed_id` = \'' . mysql_real_escape_string($this->id) . "'", $this->mysql)))		{			return true;		}		else		{			return false;		}	}}class SimplePie_Misc{	function time_hms($seconds)	{		$time = '';		$hours = floor($seconds / 3600);		$remainder = $seconds % 3600;		if ($hours > 0)		{			$time .= $hours.':';		}		$minutes = floor($remainder / 60);		$seconds = $remainder % 60;		if ($minutes < 10 && $hours > 0)		{			$minutes = '0' . $minutes;		}		if ($seconds < 10)		{			$seconds = '0' . $seconds;		}		$time .= $minutes.':';		$time .= $seconds;		return $time;	}	function absolutize_url($relative, $base)	{		$iri = SimplePie_IRI::absolutize(new SimplePie_IRI($base), $relative);		return $iri->get_iri();	}	function remove_dot_segments($input)	{		$output = '';		while (strpos($input, './') !== false || strpos($input, '/.') !== false || $input === '.' || $input === '..')		{			// A: If the input buffer begins with a prefix of "../" or "./", then remove that prefix from the input buffer; otherwise,			if (strpos($input, '../') === 0)			{				$input = substr($input, 3);			}			elseif (strpos($input, './') === 0)			{				$input = substr($input, 2);			}			// B: if the input buffer begins with a prefix of "/./" or "/.", where "." is a complete path segment, then replace that prefix with "/" in the input buffer; otherwise,			elseif (strpos($input, '/./') === 0)			{				$input = substr_replace($input, '/', 0, 3);			}			elseif ($input === '/.')			{				$input = '/';			}			// C: if the input buffer begins with a prefix of "/../" or "/..", where ".." is a complete path segment, then replace that prefix with "/" in the input buffer and remove the last segment and its preceding "/" (if any) from the output buffer; otherwise,			elseif (strpos($input, '/../') === 0)			{				$input = substr_replace($input, '/', 0, 4);				$output = substr_replace($output, '', strrpos($output, '/'));			}			elseif ($input === '/..')			{				$input = '/';				$output = substr_replace($output, '', strrpos($output, '/'));			}			// D: if the input buffer consists only of "." or "..", then remove that from the input buffer; otherwise,			elseif ($input === '.' || $input === '..')			{				$input = '';			}			// E: move the first path segment in the input buffer to the end of the output buffer, including the initial "/" character (if any) and any subsequent characters up to, but not including, the next "/" character or the end of the input buffer			elseif (($pos = strpos($input, '/', 1)) !== false)			{				$output .= substr($input, 0, $pos);				$input = substr_replace($input, '', 0, $pos);			}			else			{				$output .= $input;				$input = '';			}		}		return $output . $input;	}	function get_element($realname, $string)	{		$return = array();		$name = preg_quote($realname, '/');		if (preg_match_all("/<($name)" . SIMPLEPIE_PCRE_HTML_ATTRIBUTE . "(>(.*)<\/$name>|(\/)?>)/siU", $string, $matches, PREG_SET_ORDER | PREG_OFFSET_CAPTURE))		{			for ($i = 0, $total_matches = count($matches); $i < $total_matches; $i++)			{				$return[$i]['tag'] = $realname;				$return[$i]['full'] = $matches[$i][0][0];				$return[$i]['offset'] = $matches[$i][0][1];				if (strlen($matches[$i][3][0]) <= 2)				{					$return[$i]['self_closing'] = true;				}				else				{					$return[$i]['self_closing'] = false;					$return[$i]['content'] = $matches[$i][4][0];				}				$return[$i]['attribs'] = array();				if (isset($matches[$i][2][0]) && preg_match_all('/[\x09\x0A\x0B\x0C\x0D\x20]+([^\x09\x0A\x0B\x0C\x0D\x20\x2F\x3E][^\x09\x0A\x0B\x0C\x0D\x20\x2F\x3D\x3E]*)(?:[\x09\x0A\x0B\x0C\x0D\x20]*=[\x09\x0A\x0B\x0C\x0D\x20]*(?:"([^"]*)"|\'([^\']*)\'|([^\x09\x0A\x0B\x0C\x0D\x20\x22\x27\x3E][^\x09\x0A\x0B\x0C\x0D\x20\x3E]*)?))?/', ' ' . $matches[$i][2][0] . ' ', $attribs, PREG_SET_ORDER))				{					for ($j = 0, $total_attribs = count($attribs); $j < $total_attribs; $j++)					{						if (count($attribs[$j]) === 2)						{							$attribs[$j][2] = $attribs[$j][1];						}						$return[$i]['attribs'][strtolower($attribs[$j][1])]['data'] = SimplePie_Misc::entities_decode(end($attribs[$j]), 'UTF-8');					}				}			}		}		return $return;	}	function element_implode($element)	{		$full = "<$element[tag]";		foreach ($element['attribs'] as $key => $value)		{			$key = strtolower($key);			$full .= " $key=\"" . htmlspecialchars($value['data']) . '"';		}		if ($element['self_closing'])		{			$full .= ' />';		}		else		{			$full .= ">$element[content]</$element[tag]>";		}		return $full;	}	function error($message, $level, $file, $line)	{		if ((ini_get('error_reporting') & $level) > 0)		{			switch ($level)			{				case E_USER_ERROR:					$note = 'PHP Error';					break;				case E_USER_WARNING:					$note = 'PHP Warning';					break;				case E_USER_NOTICE:					$note = 'PHP Notice';					break;				default:					$note = 'Unknown Error';					break;			}			error_log("$note: $message in $file on line $line", 0);		}		return $message;	}	/**	 * If a file has been cached, retrieve and display it.	 *	 * This is most useful for caching images (get_favicon(), etc.),	 * however it works for all cached files.  This WILL NOT display ANY	 * file/image/page/whatever, but rather only display what has already	 * been cached by SimplePie.	 *	 * @access public	 * @see SimplePie::get_favicon()	 * @param str $identifier_url URL that is used to identify the content.	 * This may or may not be the actual URL of the live content.	 * @param str $cache_location Location of SimplePie's cache.  Defaults	 * to './cache'.	 * @param str $cache_extension The file extension that the file was	 * cached with.  Defaults to 'spc'.	 * @param str $cache_class Name of the cache-handling class being used	 * in SimplePie.  Defaults to 'SimplePie_Cache', and should be left	 * as-is unless you've overloaded the class.	 * @param str $cache_name_function Obsolete. Exists for backwards	 * compatibility reasons only.	 */	function display_cached_file($identifier_url, $cache_location = './cache', $cache_extension = 'spc', $cache_class = 'SimplePie_Cache', $cache_name_function = 'md5')	{		$cache = call_user_func(array($cache_class, 'create'), $cache_location, $identifier_url, $cache_extension);		if ($file = $cache->load())		{			if (isset($file['headers']['content-type']))			{				header('Content-type:' . $file['headers']['content-type']);			}			else			{				header('Content-type: application/octet-stream');			}			header('Expires: ' . gmdate('D, d M Y H:i:s', time() + 604800) . ' GMT'); // 7 days			echo $file['body'];			exit;		}		die('Cached file for ' . $identifier_url . ' cannot be found.');	}	function fix_protocol($url, $http = 1)	{		$url = SimplePie_Misc::normalize_url($url);		$parsed = SimplePie_Misc::parse_url($url);		if ($parsed['scheme'] !== '' && $parsed['scheme'] !== 'http' && $parsed['scheme'] !== 'https')		{			return SimplePie_Misc::fix_protocol(SimplePie_Misc::compress_parse_url('http', $parsed['authority'], $parsed['path'], $parsed['query'], $parsed['fragment']), $http);		}		if ($parsed['scheme'] === '' && $parsed['authority'] === '' && !file_exists($url))		{			return SimplePie_Misc::fix_protocol(SimplePie_Misc::compress_parse_url('http', $parsed['path'], '', $parsed['query'], $parsed['fragment']), $http);		}		if ($http === 2 && $parsed['scheme'] !== '')		{			return "feed:$url";		}		elseif ($http === 3 && strtolower($parsed['scheme']) === 'http')		{			return substr_replace($url, 'podcast', 0, 4);		}		elseif ($http === 4 && strtolower($parsed['scheme']) === 'http')		{			return substr_replace($url, 'itpc', 0, 4);		}		else		{			return $url;		}	}	function parse_url($url)	{		$iri = new SimplePie_IRI($url);		return array(			'scheme' => (string) $iri->get_scheme(),			'authority' => (string) $iri->get_authority(),			'path' => (string) $iri->get_path(),			'query' => (string) $iri->get_query(),			'fragment' => (string) $iri->get_fragment()		);	}	function compress_parse_url($scheme = '', $authority = '', $path = '', $query = '', $fragment = '')	{		$iri = new SimplePie_IRI('');		$iri->set_scheme($scheme);		$iri->set_authority($authority);		$iri->set_path($path);		$iri->set_query($query);		$iri->set_fragment($fragment);		return $iri->get_iri();	}	function normalize_url($url)	{		$iri = new SimplePie_IRI($url);		return $iri->get_iri();	}	function percent_encoding_normalization($match)	{		$integer = hexdec($match[1]);		if ($integer >= 0x41 && $integer <= 0x5A || $integer >= 0x61 && $integer <= 0x7A || $integer >= 0x30 && $integer <= 0x39 || $integer === 0x2D || $integer === 0x2E || $integer === 0x5F || $integer === 0x7E)		{			return chr($integer);		}		else		{			return strtoupper($match[0]);		}	}	/**	 * Remove bad UTF-8 bytes	 *	 * PCRE Pattern to locate bad bytes in a UTF-8 string comes from W3C	 * FAQ: Multilingual Forms (modified to include full ASCII range)	 *	 * @author Geoffrey Sneddon	 * @see http://www.w3.org/International/questions/qa-forms-utf-8	 * @param string $str String to remove bad UTF-8 bytes from	 * @return string UTF-8 string	 */	function utf8_bad_replace($str)	{		if (function_exists('iconv') && ($return = @iconv('UTF-8', 'UTF-8//IGNORE', $str)))		{			return $return;		}		elseif (function_exists('mb_convert_encoding') && ($return = @mb_convert_encoding($str, 'UTF-8', 'UTF-8')))		{			return $return;		}		elseif (preg_match_all('/(?:[\x00-\x7F]|[\xC2-\xDF][\x80-\xBF]|\xE0[\xA0-\xBF][\x80-\xBF]|[\xE1-\xEC\xEE\xEF][\x80-\xBF]{2}|\xED[\x80-\x9F][\x80-\xBF]|\xF0[\x90-\xBF][\x80-\xBF]{2}|[\xF1-\xF3][\x80-\xBF]{3}|\xF4[\x80-\x8F][\x80-\xBF]{2})+/', $str, $matches))		{			return implode("\xEF\xBF\xBD", $matches[0]);		}		elseif ($str !== '')		{			return "\xEF\xBF\xBD";		}		else		{			return '';		}	}	/**	 * Converts a Windows-1252 encoded string to a UTF-8 encoded string	 *	 * @static	 * @access public	 * @param string $string Windows-1252 encoded string	 * @return string UTF-8 encoded string	 */	function windows_1252_to_utf8($string)	{		static $convert_table = array("\x80" => "\xE2\x82\xAC", "\x81" => "\xEF\xBF\xBD", "\x82" => "\xE2\x80\x9A", "\x83" => "\xC6\x92", "\x84" => "\xE2\x80\x9E", "\x85" => "\xE2\x80\xA6", "\x86" => "\xE2\x80\xA0", "\x87" => "\xE2\x80\xA1", "\x88" => "\xCB\x86", "\x89" => "\xE2\x80\xB0", "\x8A" => "\xC5\xA0", "\x8B" => "\xE2\x80\xB9", "\x8C" => "\xC5\x92", "\x8D" => "\xEF\xBF\xBD", "\x8E" => "\xC5\xBD", "\x8F" => "\xEF\xBF\xBD", "\x90" => "\xEF\xBF\xBD", "\x91" => "\xE2\x80\x98", "\x92" => "\xE2\x80\x99", "\x93" => "\xE2\x80\x9C", "\x94" => "\xE2\x80\x9D", "\x95" => "\xE2\x80\xA2", "\x96" => "\xE2\x80\x93", "\x97" => "\xE2\x80\x94", "\x98" => "\xCB\x9C", "\x99" => "\xE2\x84\xA2", "\x9A" => "\xC5\xA1", "\x9B" => "\xE2\x80\xBA", "\x9C" => "\xC5\x93", "\x9D" => "\xEF\xBF\xBD", "\x9E" => "\xC5\xBE", "\x9F" => "\xC5\xB8", "\xA0" => "\xC2\xA0", "\xA1" => "\xC2\xA1", "\xA2" => "\xC2\xA2", "\xA3" => "\xC2\xA3", "\xA4" => "\xC2\xA4", "\xA5" => "\xC2\xA5", "\xA6" => "\xC2\xA6", "\xA7" => "\xC2\xA7", "\xA8" => "\xC2\xA8", "\xA9" => "\xC2\xA9", "\xAA" => "\xC2\xAA", "\xAB" => "\xC2\xAB", "\xAC" => "\xC2\xAC", "\xAD" => "\xC2\xAD", "\xAE" => "\xC2\xAE", "\xAF" => "\xC2\xAF", "\xB0" => "\xC2\xB0", "\xB1" => "\xC2\xB1", "\xB2" => "\xC2\xB2", "\xB3" => "\xC2\xB3", "\xB4" => "\xC2\xB4", "\xB5" => "\xC2\xB5", "\xB6" => "\xC2\xB6", "\xB7" => "\xC2\xB7", "\xB8" => "\xC2\xB8", "\xB9" => "\xC2\xB9", "\xBA" => "\xC2\xBA", "\xBB" => "\xC2\xBB", "\xBC" => "\xC2\xBC", "\xBD" => "\xC2\xBD", "\xBE" => "\xC2\xBE", "\xBF" => "\xC2\xBF", "\xC0" => "\xC3\x80", "\xC1" => "\xC3\x81", "\xC2" => "\xC3\x82", "\xC3" => "\xC3\x83", "\xC4" => "\xC3\x84", "\xC5" => "\xC3\x85", "\xC6" => "\xC3\x86", "\xC7" => "\xC3\x87", "\xC8" => "\xC3\x88", "\xC9" => "\xC3\x89", "\xCA" => "\xC3\x8A", "\xCB" => "\xC3\x8B", "\xCC" => "\xC3\x8C", "\xCD" => "\xC3\x8D", "\xCE" => "\xC3\x8E", "\xCF" => "\xC3\x8F", "\xD0" => "\xC3\x90", "\xD1" => "\xC3\x91", "\xD2" => "\xC3\x92", "\xD3" => "\xC3\x93", "\xD4" => "\xC3\x94", "\xD5" => "\xC3\x95", "\xD6" => "\xC3\x96", "\xD7" => "\xC3\x97", "\xD8" => "\xC3\x98", "\xD9" => "\xC3\x99", "\xDA" => "\xC3\x9A", "\xDB" => "\xC3\x9B", "\xDC" => "\xC3\x9C", "\xDD" => "\xC3\x9D", "\xDE" => "\xC3\x9E", "\xDF" => "\xC3\x9F", "\xE0" => "\xC3\xA0", "\xE1" => "\xC3\xA1", "\xE2" => "\xC3\xA2", "\xE3" => "\xC3\xA3", "\xE4" => "\xC3\xA4", "\xE5" => "\xC3\xA5", "\xE6" => "\xC3\xA6", "\xE7" => "\xC3\xA7", "\xE8" => "\xC3\xA8", "\xE9" => "\xC3\xA9", "\xEA" => "\xC3\xAA", "\xEB" => "\xC3\xAB", "\xEC" => "\xC3\xAC", "\xED" => "\xC3\xAD", "\xEE" => "\xC3\xAE", "\xEF" => "\xC3\xAF", "\xF0" => "\xC3\xB0", "\xF1" => "\xC3\xB1", "\xF2" => "\xC3\xB2", "\xF3" => "\xC3\xB3", "\xF4" => "\xC3\xB4", "\xF5" => "\xC3\xB5", "\xF6" => "\xC3\xB6", "\xF7" => "\xC3\xB7", "\xF8" => "\xC3\xB8", "\xF9" => "\xC3\xB9", "\xFA" => "\xC3\xBA", "\xFB" => "\xC3\xBB", "\xFC" => "\xC3\xBC", "\xFD" => "\xC3\xBD", "\xFE" => "\xC3\xBE", "\xFF" => "\xC3\xBF");		return strtr($string, $convert_table);	}	function change_encoding($data, $input, $output)	{		$input = SimplePie_Misc::encoding($input);		$output = SimplePie_Misc::encoding($output);		// We fail to fail on non US-ASCII bytes		if ($input === 'US-ASCII')		{			static $non_ascii_octects = '';			if (!$non_ascii_octects)			{				for ($i = 0x80; $i <= 0xFF; $i++)				{					$non_ascii_octects .= chr($i);				}			}			$data = substr($data, 0, strcspn($data, $non_ascii_octects));		}		// This is first, as behaviour of this is completely predictable		if ($input === 'Windows-1252' && $output === 'UTF-8')		{			return SimplePie_Misc::windows_1252_to_utf8($data);		}		// This is second, as behaviour of this varies only with PHP version (the middle part of this expression checks the encoding is supported).		elseif (function_exists('mb_convert_encoding') && @mb_convert_encoding("\x80", 'UTF-16BE', $input) !== "\x00\x80" && ($return = @mb_convert_encoding($data, $output, $input)))		{			return $return;		}		// This is last, as behaviour of this varies with OS userland and PHP version		elseif (function_exists('iconv') && ($return = @iconv($input, $output, $data)))		{			return $return;		}		// If we can't do anything, just fail		else		{			return false;		}	}	function encoding($charset)	{		// Normalization from UTS #22		switch (strtolower(preg_replace('/(?:[^a-zA-Z0-9]+|([^0-9])0+)/', '\1', $charset)))		{			case 'adobestandardencoding':			case 'csadobestandardencoding':				return 'Adobe-Standard-Encoding';			case 'adobesymbolencoding':			case 'cshppsmath':				return 'Adobe-Symbol-Encoding';			case 'ami1251':			case 'amiga1251':				return 'Amiga-1251';			case 'ansix31101983':			case 'csat5001983':			case 'csiso99naplps':			case 'isoir99':			case 'naplps':				return 'ANSI_X3.110-1983';			case 'arabic7':			case 'asmo449':			case 'csiso89asmo449':			case 'iso9036':			case 'isoir89':				return 'ASMO_449';			case 'big5':			case 'csbig5':			case 'xxbig5':				return 'Big5';			case 'big5hkscs':				return 'Big5-HKSCS';			case 'bocu1':			case 'csbocu1':				return 'BOCU-1';			case 'brf':			case 'csbrf':				return 'BRF';			case 'bs4730':			case 'csiso4unitedkingdom':			case 'gb':			case 'iso646gb':			case 'isoir4':			case 'uk':				return 'BS_4730';			case 'bsviewdata':			case 'csiso47bsviewdata':			case 'isoir47':				return 'BS_viewdata';			case 'cesu8':			case 'cscesu8':				return 'CESU-8';			case 'ca':			case 'csa71':			case 'csaz243419851':			case 'csiso121canadian1':			case 'iso646ca':			case 'isoir121':				return 'CSA_Z243.4-1985-1';			case 'csa72':			case 'csaz243419852':			case 'csiso122canadian2':			case 'iso646ca2':			case 'isoir122':				return 'CSA_Z243.4-1985-2';			case 'csaz24341985gr':			case 'csiso123csaz24341985gr':			case 'isoir123':				return 'CSA_Z243.4-1985-gr';			case 'csiso139csn369103':			case 'csn369103':			case 'isoir139':				return 'CSN_369103';			case 'csdecmcs':			case 'dec':			case 'decmcs':				return 'DEC-MCS';			case 'csiso21german':			case 'de':			case 'din66003':			case 'iso646de':			case 'isoir21':				return 'DIN_66003';			case 'csdkus':			case 'dkus':				return 'dk-us';			case 'csiso646danish':			case 'dk':			case 'ds2089':			case 'iso646dk':				return 'DS_2089';			case 'csibmebcdicatde':			case 'ebcdicatde':				return 'EBCDIC-AT-DE';			case 'csebcdicatdea':			case 'ebcdicatdea':				return 'EBCDIC-AT-DE-A';			case 'csebcdiccafr':			case 'ebcdiccafr':				return 'EBCDIC-CA-FR';			case 'csebcdicdkno':			case 'ebcdicdkno':				return 'EBCDIC-DK-NO';			case 'csebcdicdknoa':			case 'ebcdicdknoa':				return 'EBCDIC-DK-NO-A';			case 'csebcdices':			case 'ebcdices':				return 'EBCDIC-ES';			case 'csebcdicesa':			case 'ebcdicesa':				return 'EBCDIC-ES-A';			case 'csebcdicess':			case 'ebcdicess':				return 'EBCDIC-ES-S';			case 'csebcdicfise':			case 'ebcdicfise':				return 'EBCDIC-FI-SE';			case 'csebcdicfisea':			case 'ebcdicfisea':				return 'EBCDIC-FI-SE-A';			case 'csebcdicfr':			case 'ebcdicfr':				return 'EBCDIC-FR';			case 'csebcdicit':			case 'ebcdicit':				return 'EBCDIC-IT';			case 'csebcdicpt':			case 'ebcdicpt':				return 'EBCDIC-PT';			case 'csebcdicuk':			case 'ebcdicuk':				return 'EBCDIC-UK';			case 'csebcdicus':			case 'ebcdicus':				return 'EBCDIC-US';			case 'csiso111ecmacyrillic':			case 'ecmacyrillic':			case 'isoir111':			case 'koi8e':				return 'ECMA-cyrillic';			case 'csiso17spanish':			case 'es':			case 'iso646es':			case 'isoir17':				return 'ES';			case 'csiso85spanish2':			case 'es2':			case 'iso646es2':			case 'isoir85':				return 'ES2';			case 'cseucfixwidjapanese':			case 'extendedunixcodefixedwidthforjapanese':				return 'Extended_UNIX_Code_Fixed_Width_for_Japanese';			case 'cseucpkdfmtjapanese':			case 'eucjp':			case 'extendedunixcodepackedformatforjapanese':				return 'Extended_UNIX_Code_Packed_Format_for_Japanese';			case 'gb18030':				return 'GB18030';			case 'chinese':			case 'cp936':			case 'csgb2312':			case 'csiso58gb231280':			case 'gb2312':			case 'gb231280':			case 'gbk':			case 'isoir58':			case 'ms936':			case 'windows936':				return 'GBK';			case 'cn':			case 'csiso57gb1988':			case 'gb198880':			case 'iso646cn':			case 'isoir57':				return 'GB_1988-80';			case 'csiso153gost1976874':			case 'gost1976874':			case 'isoir153':			case 'stsev35888':				return 'GOST_19768-74';			case 'csiso150':			case 'csiso150greekccitt':			case 'greekccitt':			case 'isoir150':				return 'greek-ccitt';			case 'csiso88greek7':			case 'greek7':			case 'isoir88':				return 'greek7';			case 'csiso18greek7old':			case 'greek7old':			case 'isoir18':				return 'greek7-old';			case 'cshpdesktop':			case 'hpdesktop':				return 'HP-DeskTop';			case 'cshplegal':			case 'hplegal':				return 'HP-Legal';			case 'cshpmath8':			case 'hpmath8':				return 'HP-Math8';			case 'cshppifont':			case 'hppifont':				return 'HP-Pi-font';			case 'cshproman8':			case 'hproman8':			case 'r8':			case 'roman8':				return 'hp-roman8';			case 'hzgb2312':				return 'HZ-GB-2312';			case 'csibmsymbols':			case 'ibmsymbols':				return 'IBM-Symbols';			case 'csibmthai':			case 'ibmthai':				return 'IBM-Thai';			case 'ccsid858':			case 'cp858':			case 'ibm858':			case 'pcmultilingual850euro':				return 'IBM00858';			case 'ccsid924':			case 'cp924':			case 'ebcdiclatin9euro':			case 'ibm924':				return 'IBM00924';			case 'ccsid1140':			case 'cp1140':			case 'ebcdicus37euro':			case 'ibm1140':				return 'IBM01140';			case 'ccsid1141':			case 'cp1141':			case 'ebcdicde273euro':			case 'ibm1141':				return 'IBM01141';			case 'ccsid1142':			case 'cp1142':			case 'ebcdicdk277euro':			case 'ebcdicno277euro':			case 'ibm1142':				return 'IBM01142';			case 'ccsid1143':			case 'cp1143':			case 'ebcdicfi278euro':			case 'ebcdicse278euro':			case 'ibm1143':				return 'IBM01143';			case 'ccsid1144':			case 'cp1144':			case 'ebcdicit280euro':			case 'ibm1144':				return 'IBM01144';			case 'ccsid1145':			case 'cp1145':			case 'ebcdices284euro':			case 'ibm1145':				return 'IBM01145';			case 'ccsid1146':			case 'cp1146':			case 'ebcdicgb285euro':			case 'ibm1146':				return 'IBM01146';			case 'ccsid1147':			case 'cp1147':			case 'ebcdicfr297euro':			case 'ibm1147':				return 'IBM01147';			case 'ccsid1148':			case 'cp1148':			case 'ebcdicinternational500euro':			case 'ibm1148':				return 'IBM01148';			case 'ccsid1149':			case 'cp1149':			case 'ebcdicis871euro':			case 'ibm1149':				return 'IBM01149';			case 'cp37':			case 'csibm37':			case 'ebcdiccpca':			case 'ebcdiccpnl':			case 'ebcdiccpus':			case 'ebcdiccpwt':			case 'ibm37':				return 'IBM037';			case 'cp38':			case 'csibm38':			case 'ebcdicint':			case 'ibm38':				return 'IBM038';			case 'cp273':			case 'csibm273':			case 'ibm273':				return 'IBM273';			case 'cp274':			case 'csibm274':			case 'ebcdicbe':			case 'ibm274':				return 'IBM274';			case 'cp275':			case 'csibm275':			case 'ebcdicbr':			case 'ibm275':				return 'IBM275';			case 'csibm277':			case 'ebcdiccpdk':			case 'ebcdiccpno':			case 'ibm277':				return 'IBM277';			case 'cp278':			case 'csibm278':			case 'ebcdiccpfi':			case 'ebcdiccpse':			case 'ibm278':				return 'IBM278';			case 'cp280':			case 'csibm280':			case 'ebcdiccpit':			case 'ibm280':				return 'IBM280';			case 'cp281':			case 'csibm281':			case 'ebcdicjpe':			case 'ibm281':				return 'IBM281';			case 'cp284':			case 'csibm284':			case 'ebcdiccpes':			case 'ibm284':				return 'IBM284';			case 'cp285':			case 'csibm285':			case 'ebcdiccpgb':			case 'ibm285':				return 'IBM285';			case 'cp290':			case 'csibm290':			case 'ebcdicjpkana':			case 'ibm290':				return 'IBM290';			case 'cp297':			case 'csibm297':			case 'ebcdiccpfr':			case 'ibm297':				return 'IBM297';			case 'cp420':			case 'csibm420':			case 'ebcdiccpar1':			case 'ibm420':				return 'IBM420';			case 'cp423':			case 'csibm423':			case 'ebcdiccpgr':			case 'ibm423':				return 'IBM423';			case 'cp424':			case 'csibm424':			case 'ebcdiccphe':			case 'ibm424':				return 'IBM424';			case '437':			case 'cp437':			case 'cspc8codepage437':			case 'ibm437':				return 'IBM437';			case 'cp500':			case 'csibm500':			case 'ebcdiccpbe':			case 'ebcdiccpch':			case 'ibm500':				return 'IBM500';			case 'cp775':			case 'cspc775baltic':			case 'ibm775':				return 'IBM775';			case '850':			case 'cp850':			case 'cspc850multilingual':			case 'ibm850':				return 'IBM850';			case '851':			case 'cp851':			case 'csibm851':			case 'ibm851':				return 'IBM851';			case '852':			case 'cp852':			case 'cspcp852':			case 'ibm852':				return 'IBM852';			case '855':			case 'cp855':			case 'csibm855':			case 'ibm855':				return 'IBM855';			case '857':			case 'cp857':			case 'csibm857':			case 'ibm857':				return 'IBM857';			case '860':			case 'cp860':			case 'csibm860':			case 'ibm860':				return 'IBM860';			case '861':			case 'cp861':			case 'cpis':			case 'csibm861':			case 'ibm861':				return 'IBM861';			case '862':			case 'cp862':			case 'cspc862latinhebrew':			case 'ibm862':				return 'IBM862';			case '863':			case 'cp863':			case 'csibm863':			case 'ibm863':				return 'IBM863';			case 'cp864':			case 'csibm864':			case 'ibm864':				return 'IBM864';			case '865':			case 'cp865':			case 'csibm865':			case 'ibm865':				return 'IBM865';			case '866':			case 'cp866':			case 'csibm866':			case 'ibm866':				return 'IBM866';			case 'cp868':			case 'cpar':			case 'csibm868':			case 'ibm868':				return 'IBM868';			case '869':			case 'cp869':			case 'cpgr':			case 'csibm869':			case 'ibm869':				return 'IBM869';			case 'cp870':			case 'csibm870':			case 'ebcdiccproece':			case 'ebcdiccpyu':			case 'ibm870':				return 'IBM870';			case 'cp871':			case 'csibm871':			case 'ebcdiccpis':			case 'ibm871':				return 'IBM871';			case 'cp880':			case 'csibm880':			case 'ebcdiccyrillic':			case 'ibm880':				return 'IBM880';			case 'cp891':			case 'csibm891':			case 'ibm891':				return 'IBM891';			case 'cp903':			case 'csibm903':			case 'ibm903':				return 'IBM903';			case '904':			case 'cp904':			case 'csibbm904':			case 'ibm904':				return 'IBM904';			case 'cp905':			case 'csibm905':			case 'ebcdiccptr':			case 'ibm905':				return 'IBM905';			case 'cp918':			case 'csibm918':			case 'ebcdiccpar2':			case 'ibm918':				return 'IBM918';			case 'cp1026':			case 'csibm1026':			case 'ibm1026':				return 'IBM1026';			case 'ibm1047':				return 'IBM1047';			case 'csiso143iecp271':			case 'iecp271':			case 'isoir143':				return 'IEC_P27-1';			case 'csiso49inis':			case 'inis':			case 'isoir49':				return 'INIS';			case 'csiso50inis8':			case 'inis8':			case 'isoir50':				return 'INIS-8';			case 'csiso51iniscyrillic':			case 'iniscyrillic':			case 'isoir51':				return 'INIS-cyrillic';			case 'csinvariant':			case 'invariant':				return 'INVARIANT';			case 'iso2022cn':				return 'ISO-2022-CN';			case 'iso2022cnext':				return 'ISO-2022-CN-EXT';			case 'csiso2022jp':			case 'iso2022jp':				return 'ISO-2022-JP';			case 'csiso2022jp2':			case 'iso2022jp2':				return 'ISO-2022-JP-2';			case 'csiso2022kr':			case 'iso2022kr':				return 'ISO-2022-KR';			case 'cswindows30latin1':			case 'iso88591windows30latin1':				return 'ISO-8859-1-Windows-3.0-Latin-1';			case 'cswindows31latin1':			case 'iso88591windows31latin1':				return 'ISO-8859-1-Windows-3.1-Latin-1';			case 'csisolatin2':			case 'iso88592':			case 'iso885921987':			case 'isoir101':			case 'l2':			case 'latin2':				return 'ISO-8859-2';			case 'cswindows31latin2':			case 'iso88592windowslatin2':				return 'ISO-8859-2-Windows-Latin-2';			case 'csisolatin3':			case 'iso88593':			case 'iso885931988':			case 'isoir109':			case 'l3':			case 'latin3':				return 'ISO-8859-3';			case 'csisolatin4':			case 'iso88594':			case 'iso885941988':			case 'isoir110':			case 'l4':			case 'latin4':				return 'ISO-8859-4';			case 'csisolatincyrillic':			case 'cyrillic':			case 'iso88595':			case 'iso885951988':			case 'isoir144':				return 'ISO-8859-5';			case 'arabic':			case 'asmo708':			case 'csisolatinarabic':			case 'ecma114':			case 'iso88596':			case 'iso885961987':			case 'isoir127':				return 'ISO-8859-6';			case 'csiso88596e':			case 'iso88596e':				return 'ISO-8859-6-E';			case 'csiso88596i':			case 'iso88596i':				return 'ISO-8859-6-I';			case 'csisolatingreek':			case 'ecma118':			case 'elot928':			case 'greek':			case 'greek8':			case 'iso88597':			case 'iso885971987':			case 'isoir126':				return 'ISO-8859-7';			case 'csisolatinhebrew':			case 'hebrew':			case 'iso88598':			case 'iso885981988':			case 'isoir138':				return 'ISO-8859-8';			case 'csiso88598e':			case 'iso88598e':				return 'ISO-8859-8-E';			case 'csiso88598i':			case 'iso88598i':				return 'ISO-8859-8-I';			case 'cswindows31latin5':			case 'iso88599windowslatin5':				return 'ISO-8859-9-Windows-Latin-5';			case 'csisolatin6':			case 'iso885910':			case 'iso8859101992':			case 'isoir157':			case 'l6':			case 'latin6':				return 'ISO-8859-10';			case 'iso885913':				return 'ISO-8859-13';			case 'iso885914':			case 'iso8859141998':			case 'isoceltic':			case 'isoir199':			case 'l8':			case 'latin8':				return 'ISO-8859-14';			case 'iso885915':			case 'latin9':				return 'ISO-8859-15';			case 'iso885916':			case 'iso8859162001':			case 'isoir226':			case 'l10':			case 'latin10':				return 'ISO-8859-16';			case 'iso10646j1':				return 'ISO-10646-J-1';			case 'csunicode':			case 'iso10646ucs2':				return 'ISO-10646-UCS-2';			case 'csucs4':			case 'iso10646ucs4':				return 'ISO-10646-UCS-4';			case 'csunicodeascii':			case 'iso10646ucsbasic':				return 'ISO-10646-UCS-Basic';			case 'csunicodelatin1':			case 'iso10646':			case 'iso10646unicodelatin1':				return 'ISO-10646-Unicode-Latin1';			case 'csiso10646utf1':			case 'iso10646utf1':				return 'ISO-10646-UTF-1';			case 'csiso115481':			case 'iso115481':			case 'isotr115481':				return 'ISO-11548-1';			case 'csiso90':			case 'isoir90':				return 'iso-ir-90';			case 'csunicodeibm1261':			case 'isounicodeibm1261':				return 'ISO-Unicode-IBM-1261';			case 'csunicodeibm1264':			case 'isounicodeibm1264':				return 'ISO-Unicode-IBM-1264';			case 'csunicodeibm1265':			case 'isounicodeibm1265':				return 'ISO-Unicode-IBM-1265';			case 'csunicodeibm1268':			case 'isounicodeibm1268':				return 'ISO-Unicode-IBM-1268';			case 'csunicodeibm1276':			case 'isounicodeibm1276':				return 'ISO-Unicode-IBM-1276';			case 'csiso646basic1983':			case 'iso646basic1983':			case 'ref':				return 'ISO_646.basic:1983';			case 'csiso2intlrefversion':			case 'irv':			case 'iso646irv1983':			case 'isoir2':				return 'ISO_646.irv:1983';			case 'csiso2033':			case 'e13b':			case 'iso20331983':			case 'isoir98':				return 'ISO_2033-1983';			case 'csiso5427cyrillic':			case 'iso5427':			case 'isoir37':				return 'ISO_5427';			case 'iso5427cyrillic1981':			case 'iso54271981':			case 'isoir54':				return 'ISO_5427:1981';			case 'csiso5428greek':			case 'iso54281980':			case 'isoir55':				return 'ISO_5428:1980';			case 'csiso6937add':			case 'iso6937225':			case 'isoir152':				return 'ISO_6937-2-25';			case 'csisotextcomm':			case 'iso69372add':			case 'isoir142':				return 'ISO_6937-2-add';			case 'csiso8859supp':			case 'iso8859supp':			case 'isoir154':			case 'latin125':				return 'ISO_8859-supp';			case 'csiso10367box':			case 'iso10367box':			case 'isoir155':				return 'ISO_10367-box';			case 'csiso15italian':			case 'iso646it':			case 'isoir15':			case 'it':				return 'IT';			case 'csiso13jisc6220jp':			case 'isoir13':			case 'jisc62201969':			case 'jisc62201969jp':			case 'katakana':			case 'x2017':				return 'JIS_C6220-1969-jp';			case 'csiso14jisc6220ro':			case 'iso646jp':			case 'isoir14':			case 'jisc62201969ro':			case 'jp':				return 'JIS_C6220-1969-ro';			case 'csiso42jisc62261978':			case 'isoir42':			case 'jisc62261978':				return 'JIS_C6226-1978';			case 'csiso87jisx208':			case 'isoir87':			case 'jisc62261983':			case 'jisx2081983':			case 'x208':				return 'JIS_C6226-1983';			case 'csiso91jisc62291984a':			case 'isoir91':			case 'jisc62291984a':			case 'jpocra':				return 'JIS_C6229-1984-a';			case 'csiso92jisc62991984b':			case 'iso646jpocrb':			case 'isoir92':			case 'jisc62291984b':			case 'jpocrb':				return 'JIS_C6229-1984-b';			case 'csiso93jis62291984badd':			case 'isoir93':			case 'jisc62291984badd':			case 'jpocrbadd':				return 'JIS_C6229-1984-b-add';			case 'csiso94jis62291984hand':			case 'isoir94':			case 'jisc62291984hand':			case 'jpocrhand':				return 'JIS_C6229-1984-hand';			case 'csiso95jis62291984handadd':			case 'isoir95':			case 'jisc62291984handadd':			case 'jpocrhandadd':				return 'JIS_C6229-1984-hand-add';			case 'csiso96jisc62291984kana':			case 'isoir96':			case 'jisc62291984kana':				return 'JIS_C6229-1984-kana';			case 'csjisencoding':			case 'jisencoding':				return 'JIS_Encoding';			case 'cshalfwidthkatakana':			case 'jisx201':			case 'x201':				return 'JIS_X0201';			case 'csiso159jisx2121990':			case 'isoir159':			case 'jisx2121990':			case 'x212':				return 'JIS_X0212-1990';			case 'csiso141jusib1002':			case 'iso646yu':			case 'isoir141':			case 'js':			case 'jusib1002':			case 'yu':				return 'JUS_I.B1.002';			case 'csiso147macedonian':			case 'isoir147':			case 'jusib1003mac':			case 'macedonian':				return 'JUS_I.B1.003-mac';			case 'csiso146serbian':			case 'isoir146':			case 'jusib1003serb':			case 'serbian':				return 'JUS_I.B1.003-serb';			case 'koi7switched':				return 'KOI7-switched';			case 'cskoi8r':			case 'koi8r':				return 'KOI8-R';			case 'koi8u':				return 'KOI8-U';			case 'csksc5636':			case 'iso646kr':			case 'ksc5636':				return 'KSC5636';			case 'cskz1048':			case 'kz1048':			case 'rk1048':			case 'strk10482002':				return 'KZ-1048';			case 'csiso19latingreek':			case 'isoir19':			case 'latingreek':				return 'latin-greek';			case 'csiso27latingreek1':			case 'isoir27':			case 'latingreek1':				return 'Latin-greek-1';			case 'csiso158lap':			case 'isoir158':			case 'lap':			case 'latinlap':				return 'latin-lap';			case 'csmacintosh':			case 'mac':			case 'macintosh':				return 'macintosh';			case 'csmicrosoftpublishing':			case 'microsoftpublishing':				return 'Microsoft-Publishing';			case 'csmnem':			case 'mnem':				return 'MNEM';			case 'csmnemonic':			case 'mnemonic':				return 'MNEMONIC';			case 'csiso86hungarian':			case 'hu':			case 'iso646hu':			case 'isoir86':			case 'msz77953':				return 'MSZ_7795.3';			case 'csnatsdano':			case 'isoir91':			case 'natsdano':				return 'NATS-DANO';			case 'csnatsdanoadd':			case 'isoir92':			case 'natsdanoadd':				return 'NATS-DANO-ADD';			case 'csnatssefi':			case 'isoir81':			case 'natssefi':				return 'NATS-SEFI';			case 'csnatssefiadd':			case 'isoir82':			case 'natssefiadd':				return 'NATS-SEFI-ADD';			case 'csiso151cuba':			case 'cuba':			case 'iso646cu':			case 'isoir151':			case 'ncnc1081':				return 'NC_NC00-10:81';			case 'csiso69french':			case 'fr':			case 'iso646fr':			case 'isoir69':			case 'nfz62010':				return 'NF_Z_62-010';			case 'csiso25french':			case 'iso646fr1':			case 'isoir25':			case 'nfz620101973':				return 'NF_Z_62-010_(1973)';			case 'csiso60danishnorwegian':			case 'csiso60norwegian1':			case 'iso646no':			case 'isoir60':			case 'no':			case 'ns45511':				return 'NS_4551-1';			case 'csiso61norwegian2':			case 'iso646no2':			case 'isoir61':			case 'no2':			case 'ns45512':				return 'NS_4551-2';			case 'osdebcdicdf3irv':				return 'OSD_EBCDIC_DF03_IRV';			case 'osdebcdicdf41':				return 'OSD_EBCDIC_DF04_1';			case 'osdebcdicdf415':				return 'OSD_EBCDIC_DF04_15';			case 'cspc8danishnorwegian':			case 'pc8danishnorwegian':				return 'PC8-Danish-Norwegian';			case 'cspc8turkish':			case 'pc8turkish':				return 'PC8-Turkish';			case 'csiso16portuguese':			case 'iso646pt':			case 'isoir16':			case 'pt':				return 'PT';			case 'csiso84portuguese2':			case 'iso646pt2':			case 'isoir84':			case 'pt2':				return 'PT2';			case 'cp154':			case 'csptcp154':			case 'cyrillicasian':			case 'pt154':			case 'ptcp154':				return 'PTCP154';			case 'scsu':				return 'SCSU';			case 'csiso10swedish':			case 'fi':			case 'iso646fi':			case 'iso646se':			case 'isoir10':			case 'se':			case 'sen850200b':				return 'SEN_850200_B';			case 'csiso11swedishfornames':			case 'iso646se2':			case 'isoir11':			case 'se2':			case 'sen850200c':				return 'SEN_850200_C';			case 'csshiftjis':			case 'mskanji':			case 'shiftjis':				return 'Shift_JIS';			case 'csiso102t617bit':			case 'isoir102':			case 't617bit':				return 'T.61-7bit';			case 'csiso103t618bit':			case 'isoir103':			case 't61':			case 't618bit':				return 'T.61-8bit';			case 'csiso128t101g2':			case 'isoir128':			case 't101g2':				return 'T.101-G2';			case 'cstscii':			case 'tscii':				return 'TSCII';			case 'csunicode11':			case 'unicode11':				return 'UNICODE-1-1';			case 'csunicode11utf7':			case 'unicode11utf7':				return 'UNICODE-1-1-UTF-7';			case 'csunknown8bit':			case 'unknown8bit':				return 'UNKNOWN-8BIT';			case 'ansix341968':			case 'ansix341986':			case 'ascii':			case 'cp367':			case 'csascii':			case 'ibm367':			case 'iso646irv1991':			case 'iso646us':			case 'isoir6':			case 'us':			case 'usascii':				return 'US-ASCII';			case 'csusdk':			case 'usdk':				return 'us-dk';			case 'utf7':				return 'UTF-7';			case 'utf8':				return 'UTF-8';			case 'utf16':				return 'UTF-16';			case 'utf16be':				return 'UTF-16BE';			case 'utf16le':				return 'UTF-16LE';			case 'utf32':				return 'UTF-32';			case 'utf32be':				return 'UTF-32BE';			case 'utf32le':				return 'UTF-32LE';			case 'csventurainternational':			case 'venturainternational':				return 'Ventura-International';			case 'csventuramath':			case 'venturamath':				return 'Ventura-Math';			case 'csventuraus':			case 'venturaus':				return 'Ventura-US';			case 'csiso70videotexsupp1':			case 'isoir70':			case 'videotexsuppl':				return 'videotex-suppl';			case 'csviqr':			case 'viqr':				return 'VIQR';			case 'csviscii':			case 'viscii':				return 'VISCII';			case 'cswindows31j':			case 'windows31j':				return 'Windows-31J';			case 'iso885911':			case 'tis620':				return 'windows-874';			case 'cseuckr':			case 'csksc56011987':			case 'euckr':			case 'isoir149':			case 'korean':			case 'ksc5601':			case 'ksc56011987':			case 'ksc56011989':			case 'windows949':				return 'windows-949';			case 'windows1250':				return 'windows-1250';			case 'windows1251':				return 'windows-1251';			case 'cp819':			case 'csisolatin1':			case 'ibm819':			case 'iso88591':			case 'iso885911987':			case 'isoir100':			case 'l1':			case 'latin1':			case 'windows1252':				return 'windows-1252';			case 'windows1253':				return 'windows-1253';			case 'csisolatin5':			case 'iso88599':			case 'iso885991989':			case 'isoir148':			case 'l5':			case 'latin5':			case 'windows1254':				return 'windows-1254';			case 'windows1255':				return 'windows-1255';			case 'windows1256':				return 'windows-1256';			case 'windows1257':				return 'windows-1257';			case 'windows1258':				return 'windows-1258';			default:				return $charset;		}	}	function get_curl_version()	{		if (is_array($curl = curl_version()))		{			$curl = $curl['version'];		}		elseif (substr($curl, 0, 5) === 'curl/')		{			$curl = substr($curl, 5, strcspn($curl, "\x09\x0A\x0B\x0C\x0D", 5));		}		elseif (substr($curl, 0, 8) === 'libcurl/')		{			$curl = substr($curl, 8, strcspn($curl, "\x09\x0A\x0B\x0C\x0D", 8));		}		else		{			$curl = 0;		}		return $curl;	}	function is_subclass_of($class1, $class2)	{		if (func_num_args() !== 2)		{			trigger_error('Wrong parameter count for SimplePie_Misc::is_subclass_of()', E_USER_WARNING);		}		elseif (version_compare(PHP_VERSION, '5.0.3', '>=') || is_object($class1))		{			return is_subclass_of($class1, $class2);		}		elseif (is_string($class1) && is_string($class2))		{			if (class_exists($class1))			{				if (class_exists($class2))				{					$class2 = strtolower($class2);					while ($class1 = strtolower(get_parent_class($class1)))					{						if ($class1 === $class2)						{							return true;						}					}				}			}			else			{				trigger_error('Unknown class passed as parameter', E_USER_WARNNG);			}		}		return false;	}	/**	 * Strip HTML comments	 *	 * @access public	 * @param string $data Data to strip comments from	 * @return string Comment stripped string	 */	function strip_comments($data)	{		$output = '';		while (($start = strpos($data, '<!--')) !== false)		{			$output .= substr($data, 0, $start);			if (($end = strpos($data, '-->', $start)) !== false)			{				$data = substr_replace($data, '', 0, $end + 3);			}			else			{				$data = '';			}		}		return $output . $data;	}	function parse_date($dt)	{		$parser = SimplePie_Parse_Date::get();		return $parser->parse($dt);	}	/**	 * Decode HTML entities	 *	 * @static	 * @access public	 * @param string $data Input data	 * @return string Output data	 */	function entities_decode($data)	{		$decoder = new SimplePie_Decode_HTML_Entities($data);		return $decoder->parse();	}	/**	 * Remove RFC822 comments	 *	 * @access public	 * @param string $data Data to strip comments from	 * @return string Comment stripped string	 */	function uncomment_rfc822($string)	{		$string = (string) $string;		$position = 0;		$length = strlen($string);		$depth = 0;		$output = '';		while ($position < $length && ($pos = strpos($string, '(', $position)) !== false)		{			$output .= substr($string, $position, $pos - $position);			$position = $pos + 1;			if ($string[$pos - 1] !== '\\')			{				$depth++;				while ($depth && $position < $length)				{					$position += strcspn($string, '()', $position);					if ($string[$position - 1] === '\\')					{						$position++;						continue;					}					elseif (isset($string[$position]))					{						switch ($string[$position])						{							case '(':								$depth++;								break;							case ')':								$depth--;								break;						}						$position++;					}					else					{						break;					}				}			}			else			{				$output .= '(';			}		}		$output .= substr($string, $position);		return $output;	}	function parse_mime($mime)	{		if (($pos = strpos($mime, ';')) === false)		{			return trim($mime);		}		else		{			return trim(substr($mime, 0, $pos));		}	}	function htmlspecialchars_decode($string, $quote_style)	{		if (function_exists('htmlspecialchars_decode'))		{			return htmlspecialchars_decode($string, $quote_style);		}		else		{			return strtr($string, array_flip(get_html_translation_table(HTML_SPECIALCHARS, $quote_style)));		}	}	function atom_03_construct_type($attribs)	{		if (isset($attribs['']['mode']) && strtolower(trim($attribs['']['mode']) === 'base64'))		{			$mode = SIMPLEPIE_CONSTRUCT_BASE64;		}		else		{			$mode = SIMPLEPIE_CONSTRUCT_NONE;		}		if (isset($attribs['']['type']))		{			switch (strtolower(trim($attribs['']['type'])))			{				case 'text':				case 'text/plain':					return SIMPLEPIE_CONSTRUCT_TEXT | $mode;				case 'html':				case 'text/html':					return SIMPLEPIE_CONSTRUCT_HTML | $mode;				case 'xhtml':				case 'application/xhtml+xml':					return SIMPLEPIE_CONSTRUCT_XHTML | $mode;				default:					return SIMPLEPIE_CONSTRUCT_NONE | $mode;			}		}		else		{			return SIMPLEPIE_CONSTRUCT_TEXT | $mode;		}	}	function atom_10_construct_type($attribs)	{		if (isset($attribs['']['type']))		{			switch (strtolower(trim($attribs['']['type'])))			{				case 'text':					return SIMPLEPIE_CONSTRUCT_TEXT;				case 'html':					return SIMPLEPIE_CONSTRUCT_HTML;				case 'xhtml':					return SIMPLEPIE_CONSTRUCT_XHTML;				default:					return SIMPLEPIE_CONSTRUCT_NONE;			}		}		return SIMPLEPIE_CONSTRUCT_TEXT;	}	function atom_10_content_construct_type($attribs)	{		if (isset($attribs['']['type']))		{			$type = strtolower(trim($attribs['']['type']));			switch ($type)			{				case 'text':					return SIMPLEPIE_CONSTRUCT_TEXT;				case 'html':					return SIMPLEPIE_CONSTRUCT_HTML;				case 'xhtml':					return SIMPLEPIE_CONSTRUCT_XHTML;			}			if (in_array(substr($type, -4), array('+xml', '/xml')) || substr($type, 0, 5) === 'text/')			{				return SIMPLEPIE_CONSTRUCT_NONE;			}			else			{				return SIMPLEPIE_CONSTRUCT_BASE64;			}		}		else		{			return SIMPLEPIE_CONSTRUCT_TEXT;		}	}	function is_isegment_nz_nc($string)	{		return (bool) preg_match('/^([A-Za-z0-9\-._~\x{A0}-\x{D7FF}\x{F900}-\x{FDCF}\x{FDF0}-\x{FFEF}\x{10000}-\x{1FFFD}\x{20000}-\x{2FFFD}\x{30000}-\x{3FFFD}\x{40000}-\x{4FFFD}\x{50000}-\x{5FFFD}\x{60000}-\x{6FFFD}\x{70000}-\x{7FFFD}\x{80000}-\x{8FFFD}\x{90000}-\x{9FFFD}\x{A0000}-\x{AFFFD}\x{B0000}-\x{BFFFD}\x{C0000}-\x{CFFFD}\x{D0000}-\x{DFFFD}\x{E1000}-\x{EFFFD}!$&\'()*+,;=@]|(%[0-9ABCDEF]{2}))+$/u', $string);	}	function space_seperated_tokens($string)	{		$space_characters = "\x20\x09\x0A\x0B\x0C\x0D";		$string_length = strlen($string);		$position = strspn($string, $space_characters);		$tokens = array();		while ($position < $string_length)		{			$len = strcspn($string, $space_characters, $position);			$tokens[] = substr($string, $position, $len);			$position += $len;			$position += strspn($string, $space_characters, $position);		}		return $tokens;	}	function array_unique($array)	{		if (version_compare(PHP_VERSION, '5.2', '>='))		{			return array_unique($array);		}		else		{			$array = (array) $array;			$new_array = array();			$new_array_strings = array();			foreach ($array as $key => $value)			{				if (is_object($value))				{					if (method_exists($value, '__toString'))					{						$cmp = $value->__toString();					}					else					{						trigger_error('Object of class ' . get_class($value) . ' could not be converted to string', E_USER_ERROR);					}				}				elseif (is_array($value))				{					$cmp = (string) reset($value);				}				else				{					$cmp = (string) $value;				}				if (!in_array($cmp, $new_array_strings))				{					$new_array[$key] = $value;					$new_array_strings[] = $cmp;				}			}			return $new_array;		}	}	/**	 * Converts a unicode codepoint to a UTF-8 character	 *	 * @static	 * @access public	 * @param int $codepoint Unicode codepoint	 * @return string UTF-8 character	 */	function codepoint_to_utf8($codepoint)	{		$codepoint = (int) $codepoint;		if ($codepoint < 0)		{			return false;		}		else if ($codepoint <= 0x7f)		{			return chr($codepoint);		}		else if ($codepoint <= 0x7ff)		{			return chr(0xc0 | ($codepoint >> 6)) . chr(0x80 | ($codepoint & 0x3f));		}		else if ($codepoint <= 0xffff)		{			return chr(0xe0 | ($codepoint >> 12)) . chr(0x80 | (($codepoint >> 6) & 0x3f)) . chr(0x80 | ($codepoint & 0x3f));		}		else if ($codepoint <= 0x10ffff)		{			return chr(0xf0 | ($codepoint >> 18)) . chr(0x80 | (($codepoint >> 12) & 0x3f)) . chr(0x80 | (($codepoint >> 6) & 0x3f)) . chr(0x80 | ($codepoint & 0x3f));		}		else		{			// U+FFFD REPLACEMENT CHARACTER			return "\xEF\xBF\xBD";		}	}	/**	 * Re-implementation of PHP 5's stripos()	 *	 * Returns the numeric position of the first occurrence of needle in the	 * haystack string.	 *	 * @static	 * @access string	 * @param object $haystack	 * @param string $needle Note that the needle may be a string of one or more	 *     characters. If needle is not a string, it is converted to an integer	 *     and applied as the ordinal value of a character.	 * @param int $offset The optional offset parameter allows you to specify which	 *     character in haystack to start searching. The position returned is still	 *     relative to the beginning of haystack.	 * @return bool If needle is not found, stripos() will return boolean false.	 */	function stripos($haystack, $needle, $offset = 0)	{		if (function_exists('stripos'))		{			return stripos($haystack, $needle, $offset);		}		else		{			if (is_string($needle))			{				$needle = strtolower($needle);			}			elseif (is_int($needle) || is_bool($needle) || is_double($needle))			{				$needle = strtolower(chr($needle));			}			else			{				trigger_error('needle is not a string or an integer', E_USER_WARNING);				return false;			}			return strpos(strtolower($haystack), $needle, $offset);		}	}	/**	 * Similar to parse_str()	 *	 * Returns an associative array of name/value pairs, where the value is an	 * array of values that have used the same name	 *	 * @static	 * @access string	 * @param string $str The input string.	 * @return array	 */	function parse_str($str)	{		$return = array();		$str = explode('&', $str);		foreach ($str as $section)		{			if (strpos($section, '=') !== false)			{				list($name, $value) = explode('=', $section, 2);				$return[urldecode($name)][] = urldecode($value);			}			else			{				$return[urldecode($section)][] = null;			}		}		return $return;	}	/**	 * Detect XML encoding, as per XML 1.0 Appendix F.1	 *	 * @todo Add support for EBCDIC	 * @param string $data XML data	 * @return array Possible encodings	 */	function xml_encoding($data)	{		// UTF-32 Big Endian BOM		if (substr($data, 0, 4) === "\x00\x00\xFE\xFF")		{			$encoding[] = 'UTF-32BE';		}		// UTF-32 Little Endian BOM		elseif (substr($data, 0, 4) === "\xFF\xFE\x00\x00")		{			$encoding[] = 'UTF-32LE';		}		// UTF-16 Big Endian BOM		elseif (substr($data, 0, 2) === "\xFE\xFF")		{			$encoding[] = 'UTF-16BE';		}		// UTF-16 Little Endian BOM		elseif (substr($data, 0, 2) === "\xFF\xFE")		{			$encoding[] = 'UTF-16LE';		}		// UTF-8 BOM		elseif (substr($data, 0, 3) === "\xEF\xBB\xBF")		{			$encoding[] = 'UTF-8';		}		// UTF-32 Big Endian Without BOM		elseif (substr($data, 0, 20) === "\x00\x00\x00\x3C\x00\x00\x00\x3F\x00\x00\x00\x78\x00\x00\x00\x6D\x00\x00\x00\x6C")		{			if ($pos = strpos($data, "\x00\x00\x00\x3F\x00\x00\x00\x3E"))			{				$parser = new SimplePie_XML_Declaration_Parser(SimplePie_Misc::change_encoding(substr($data, 20, $pos - 20), 'UTF-32BE', 'UTF-8'));				if ($parser->parse())				{					$encoding[] = $parser->encoding;				}			}			$encoding[] = 'UTF-32BE';		}		// UTF-32 Little Endian Without BOM		elseif (substr($data, 0, 20) === "\x3C\x00\x00\x00\x3F\x00\x00\x00\x78\x00\x00\x00\x6D\x00\x00\x00\x6C\x00\x00\x00")		{			if ($pos = strpos($data, "\x3F\x00\x00\x00\x3E\x00\x00\x00"))			{				$parser = new SimplePie_XML_Declaration_Parser(SimplePie_Misc::change_encoding(substr($data, 20, $pos - 20), 'UTF-32LE', 'UTF-8'));				if ($parser->parse())				{					$encoding[] = $parser->encoding;				}			}			$encoding[] = 'UTF-32LE';		}		// UTF-16 Big Endian Without BOM		elseif (substr($data, 0, 10) === "\x00\x3C\x00\x3F\x00\x78\x00\x6D\x00\x6C")		{			if ($pos = strpos($data, "\x00\x3F\x00\x3E"))			{				$parser = new SimplePie_XML_Declaration_Parser(SimplePie_Misc::change_encoding(substr($data, 20, $pos - 10), 'UTF-16BE', 'UTF-8'));				if ($parser->parse())				{					$encoding[] = $parser->encoding;				}			}			$encoding[] = 'UTF-16BE';		}		// UTF-16 Little Endian Without BOM		elseif (substr($data, 0, 10) === "\x3C\x00\x3F\x00\x78\x00\x6D\x00\x6C\x00")		{			if ($pos = strpos($data, "\x3F\x00\x3E\x00"))			{				$parser = new SimplePie_XML_Declaration_Parser(SimplePie_Misc::change_encoding(substr($data, 20, $pos - 10), 'UTF-16LE', 'UTF-8'));				if ($parser->parse())				{					$encoding[] = $parser->encoding;				}			}			$encoding[] = 'UTF-16LE';		}		// US-ASCII (or superset)		elseif (substr($data, 0, 5) === "\x3C\x3F\x78\x6D\x6C")		{			if ($pos = strpos($data, "\x3F\x3E"))			{				$parser = new SimplePie_XML_Declaration_Parser(substr($data, 5, $pos - 5));				if ($parser->parse())				{					$encoding[] = $parser->encoding;				}			}			$encoding[] = 'UTF-8';		}		// Fallback to UTF-8		else		{			$encoding[] = 'UTF-8';		}		return $encoding;	}	function output_javascript()	{		if (function_exists('ob_gzhandler'))		{			ob_start('ob_gzhandler');		}		header('Content-type: text/javascript; charset: UTF-8');		header('Cache-Control: must-revalidate');		header('Expires: ' . gmdate('D, d M Y H:i:s', time() + 604800) . ' GMT'); // 7 days		?>function embed_odeo(link) {	document.writeln('<embed src="http://odeo.com/flash/audio_player_fullsize.swf" pluginspage="http://www.macromedia.com/go/getflashplayer" type="application/x-shockwave-flash" quality="high" width="440" height="80" wmode="transparent" allowScriptAccess="any" flashvars="valid_sample_rate=true&external_url='+link+'"></embed>');}function embed_quicktime(type, bgcolor, width, height, link, placeholder, loop) {	if (placeholder != '')	{		document.writeln('<embed type="'+type+'" style="cursor:hand; cursor:pointer;" href="'+link+'" src="'+placeholder+'" width="'+width+'" height="'+height+'" autoplay="false" target="myself" controller="false" loop="'+loop+'" scale="aspect" bgcolor="'+bgcolor+'" pluginspage="http://www.apple.com/quicktime/download/"></embed>');	}	else {		document.writeln('<embed type="'+type+'" style="cursor:hand; cursor:pointer;" src="'+link+'" width="'+width+'" height="'+height+'" autoplay="false" target="myself" controller="true" loop="'+loop+'" scale="aspect" bgcolor="'+bgcolor+'" pluginspage="http://www.apple.com/quicktime/download/"></embed>');	}}function embed_flash(bgcolor, width, height, link, loop, type) {	document.writeln('<embed src="'+link+'" pluginspage="http://www.macromedia.com/go/getflashplayer" type="'+type+'" quality="high" width="'+width+'" height="'+height+'" bgcolor="'+bgcolor+'" loop="'+loop+'"></embed>');}function embed_flv(width, height, link, placeholder, loop, player) {	document.writeln('<embed src="'+player+'" pluginspage="http://www.macromedia.com/go/getflashplayer" type="application/x-shockwave-flash" quality="high" width="'+width+'" height="'+height+'" wmode="transparent" flashvars="file='+link+'&autostart=false&repeat='+loop+'&showdigits=true&showfsbutton=false"></embed>');}function embed_wmedia(width, height, link) {	document.writeln('<embed type="application/x-mplayer2" src="'+link+'" autosize="1" width="'+width+'" height="'+height+'" showcontrols="1" showstatusbar="0" showdisplay="0" autostart="0"></embed>');}		<?php	}}/** * Decode HTML Entities * * This implements HTML5 as of revision 967 (2007-06-28) * * @package SimplePie */class SimplePie_Decode_HTML_Entities{	/**	 * Data to be parsed	 *	 * @access private	 * @var string	 */	var $data = '';	/**	 * Currently consumed bytes	 *	 * @access private	 * @var string	 */	var $consumed = '';	/**	 * Position of the current byte being parsed	 *	 * @access private	 * @var int	 */	var $position = 0;	/**	 * Create an instance of the class with the input data	 *	 * @access public	 * @param string $data Input data	 */	function SimplePie_Decode_HTML_Entities($data)	{		$this->data = $data;	}	/**	 * Parse the input data	 *	 * @access public	 * @return string Output data	 */	function parse()	{		while (($this->position = strpos($this->data, '&', $this->position)) !== false)		{			$this->consume();			$this->entity();			$this->consumed = '';		}		return $this->data;	}	/**	 * Consume the next byte	 *	 * @access private	 * @return mixed The next byte, or false, if there is no more data	 */	function consume()	{		if (isset($this->data[$this->position]))		{			$this->consumed .= $this->data[$this->position];			return $this->data[$this->position++];		}		else		{			return false;		}	}	/**	 * Consume a range of characters	 *	 * @access private	 * @param string $chars Characters to consume	 * @return mixed A series of characters that match the range, or false	 */	function consume_range($chars)	{		if ($len = strspn($this->data, $chars, $this->position))		{			$data = substr($this->data, $this->position, $len);			$this->consumed .= $data;			$this->position += $len;			return $data;		}		else		{			return false;		}	}	/**	 * Unconsume one byte	 *	 * @access private	 */	function unconsume()	{		$this->consumed = substr($this->consumed, 0, -1);		$this->position--;	}	/**	 * Decode an entity	 *	 * @access private	 */	function entity()	{		switch ($this->consume())		{			case "\x09":			case "\x0A":			case "\x0B":			case "\x0B":			case "\x0C":			case "\x20":			case "\x3C":			case "\x26":			case false:				break;			case "\x23":				switch ($this->consume())				{					case "\x78":					case "\x58":						$range = '0123456789ABCDEFabcdef';						$hex = true;						break;					default:						$range = '0123456789';						$hex = false;						$this->unconsume();						break;				}				if ($codepoint = $this->consume_range($range))				{					static $windows_1252_specials = array(0x0D => "\x0A", 0x80 => "\xE2\x82\xAC", 0x81 => "\xEF\xBF\xBD", 0x82 => "\xE2\x80\x9A", 0x83 => "\xC6\x92", 0x84 => "\xE2\x80\x9E", 0x85 => "\xE2\x80\xA6", 0x86 => "\xE2\x80\xA0", 0x87 => "\xE2\x80\xA1", 0x88 => "\xCB\x86", 0x89 => "\xE2\x80\xB0", 0x8A => "\xC5\xA0", 0x8B => "\xE2\x80\xB9", 0x8C => "\xC5\x92", 0x8D => "\xEF\xBF\xBD", 0x8E => "\xC5\xBD", 0x8F => "\xEF\xBF\xBD", 0x90 => "\xEF\xBF\xBD", 0x91 => "\xE2\x80\x98", 0x92 => "\xE2\x80\x99", 0x93 => "\xE2\x80\x9C", 0x94 => "\xE2\x80\x9D", 0x95 => "\xE2\x80\xA2", 0x96 => "\xE2\x80\x93", 0x97 => "\xE2\x80\x94", 0x98 => "\xCB\x9C", 0x99 => "\xE2\x84\xA2", 0x9A => "\xC5\xA1", 0x9B => "\xE2\x80\xBA", 0x9C => "\xC5\x93", 0x9D => "\xEF\xBF\xBD", 0x9E => "\xC5\xBE", 0x9F => "\xC5\xB8");					if ($hex)					{						$codepoint = hexdec($codepoint);					}					else					{						$codepoint = intval($codepoint);					}					if (isset($windows_1252_specials[$codepoint]))					{						$replacement = $windows_1252_specials[$codepoint];					}					else					{						$replacement = SimplePie_Misc::codepoint_to_utf8($codepoint);					}					if (!in_array($this->consume(), array(';', false), true))					{						$this->unconsume();					}					$consumed_length = strlen($this->consumed);					$this->data = substr_replace($this->data, $replacement, $this->position - $consumed_length, $consumed_length);					$this->position += strlen($replacement) - $consumed_length;				}				break;			default:				static $entities = array('Aacute' => "\xC3\x81", 'aacute' => "\xC3\xA1", 'Aacute;' => "\xC3\x81", 'aacute;' => "\xC3\xA1", 'Acirc' => "\xC3\x82", 'acirc' => "\xC3\xA2", 'Acirc;' => "\xC3\x82", 'acirc;' => "\xC3\xA2", 'acute' => "\xC2\xB4", 'acute;' => "\xC2\xB4", 'AElig' => "\xC3\x86", 'aelig' => "\xC3\xA6", 'AElig;' => "\xC3\x86", 'aelig;' => "\xC3\xA6", 'Agrave' => "\xC3\x80", 'agrave' => "\xC3\xA0", 'Agrave;' => "\xC3\x80", 'agrave;' => "\xC3\xA0", 'alefsym;' => "\xE2\x84\xB5", 'Alpha;' => "\xCE\x91", 'alpha;' => "\xCE\xB1", 'AMP' => "\x26", 'amp' => "\x26", 'AMP;' => "\x26", 'amp;' => "\x26", 'and;' => "\xE2\x88\xA7", 'ang;' => "\xE2\x88\xA0", 'apos;' => "\x27", 'Aring' => "\xC3\x85", 'aring' => "\xC3\xA5", 'Aring;' => "\xC3\x85", 'aring;' => "\xC3\xA5", 'asymp;' => "\xE2\x89\x88", 'Atilde' => "\xC3\x83", 'atilde' => "\xC3\xA3", 'Atilde;' => "\xC3\x83", 'atilde;' => "\xC3\xA3", 'Auml' => "\xC3\x84", 'auml' => "\xC3\xA4", 'Auml;' => "\xC3\x84", 'auml;' => "\xC3\xA4", 'bdquo;' => "\xE2\x80\x9E", 'Beta;' => "\xCE\x92", 'beta;' => "\xCE\xB2", 'brvbar' => "\xC2\xA6", 'brvbar;' => "\xC2\xA6", 'bull;' => "\xE2\x80\xA2", 'cap;' => "\xE2\x88\xA9", 'Ccedil' => "\xC3\x87", 'ccedil' => "\xC3\xA7", 'Ccedil;' => "\xC3\x87", 'ccedil;' => "\xC3\xA7", 'cedil' => "\xC2\xB8", 'cedil;' => "\xC2\xB8", 'cent' => "\xC2\xA2", 'cent;' => "\xC2\xA2", 'Chi;' => "\xCE\xA7", 'chi;' => "\xCF\x87", 'circ;' => "\xCB\x86", 'clubs;' => "\xE2\x99\xA3", 'cong;' => "\xE2\x89\x85", 'COPY' => "\xC2\xA9", 'copy' => "\xC2\xA9", 'COPY;' => "\xC2\xA9", 'copy;' => "\xC2\xA9", 'crarr;' => "\xE2\x86\xB5", 'cup;' => "\xE2\x88\xAA", 'curren' => "\xC2\xA4", 'curren;' => "\xC2\xA4", 'Dagger;' => "\xE2\x80\xA1", 'dagger;' => "\xE2\x80\xA0", 'dArr;' => "\xE2\x87\x93", 'darr;' => "\xE2\x86\x93", 'deg' => "\xC2\xB0", 'deg;' => "\xC2\xB0", 'Delta;' => "\xCE\x94", 'delta;' => "\xCE\xB4", 'diams;' => "\xE2\x99\xA6", 'divide' => "\xC3\xB7", 'divide;' => "\xC3\xB7", 'Eacute' => "\xC3\x89", 'eacute' => "\xC3\xA9", 'Eacute;' => "\xC3\x89", 'eacute;' => "\xC3\xA9", 'Ecirc' => "\xC3\x8A", 'ecirc' => "\xC3\xAA", 'Ecirc;' => "\xC3\x8A", 'ecirc;' => "\xC3\xAA", 'Egrave' => "\xC3\x88", 'egrave' => "\xC3\xA8", 'Egrave;' => "\xC3\x88", 'egrave;' => "\xC3\xA8", 'empty;' => "\xE2\x88\x85", 'emsp;' => "\xE2\x80\x83", 'ensp;' => "\xE2\x80\x82", 'Epsilon;' => "\xCE\x95", 'epsilon;' => "\xCE\xB5", 'equiv;' => "\xE2\x89\xA1", 'Eta;' => "\xCE\x97", 'eta;' => "\xCE\xB7", 'ETH' => "\xC3\x90", 'eth' => "\xC3\xB0", 'ETH;' => "\xC3\x90", 'eth;' => "\xC3\xB0", 'Euml' => "\xC3\x8B", 'euml' => "\xC3\xAB", 'Euml;' => "\xC3\x8B", 'euml;' => "\xC3\xAB", 'euro;' => "\xE2\x82\xAC", 'exist;' => "\xE2\x88\x83", 'fnof;' => "\xC6\x92", 'forall;' => "\xE2\x88\x80", 'frac12' => "\xC2\xBD", 'frac12;' => "\xC2\xBD", 'frac14' => "\xC2\xBC", 'frac14;' => "\xC2\xBC", 'frac34' => "\xC2\xBE", 'frac34;' => "\xC2\xBE", 'frasl;' => "\xE2\x81\x84", 'Gamma;' => "\xCE\x93", 'gamma;' => "\xCE\xB3", 'ge;' => "\xE2\x89\xA5", 'GT' => "\x3E", 'gt' => "\x3E", 'GT;' => "\x3E", 'gt;' => "\x3E", 'hArr;' => "\xE2\x87\x94", 'harr;' => "\xE2\x86\x94", 'hearts;' => "\xE2\x99\xA5", 'hellip;' => "\xE2\x80\xA6", 'Iacute' => "\xC3\x8D", 'iacute' => "\xC3\xAD", 'Iacute;' => "\xC3\x8D", 'iacute;' => "\xC3\xAD", 'Icirc' => "\xC3\x8E", 'icirc' => "\xC3\xAE", 'Icirc;' => "\xC3\x8E", 'icirc;' => "\xC3\xAE", 'iexcl' => "\xC2\xA1", 'iexcl;' => "\xC2\xA1", 'Igrave' => "\xC3\x8C", 'igrave' => "\xC3\xAC", 'Igrave;' => "\xC3\x8C", 'igrave;' => "\xC3\xAC", 'image;' => "\xE2\x84\x91", 'infin;' => "\xE2\x88\x9E", 'int;' => "\xE2\x88\xAB", 'Iota;' => "\xCE\x99", 'iota;' => "\xCE\xB9", 'iquest' => "\xC2\xBF", 'iquest;' => "\xC2\xBF", 'isin;' => "\xE2\x88\x88", 'Iuml' => "\xC3\x8F", 'iuml' => "\xC3\xAF", 'Iuml;' => "\xC3\x8F", 'iuml;' => "\xC3\xAF", 'Kappa;' => "\xCE\x9A", 'kappa;' => "\xCE\xBA", 'Lambda;' => "\xCE\x9B", 'lambda;' => "\xCE\xBB", 'lang;' => "\xE3\x80\x88", 'laquo' => "\xC2\xAB", 'laquo;' => "\xC2\xAB", 'lArr;' => "\xE2\x87\x90", 'larr;' => "\xE2\x86\x90", 'lceil;' => "\xE2\x8C\x88", 'ldquo;' => "\xE2\x80\x9C", 'le;' => "\xE2\x89\xA4", 'lfloor;' => "\xE2\x8C\x8A", 'lowast;' => "\xE2\x88\x97", 'loz;' => "\xE2\x97\x8A", 'lrm;' => "\xE2\x80\x8E", 'lsaquo;' => "\xE2\x80\xB9", 'lsquo;' => "\xE2\x80\x98", 'LT' => "\x3C", 'lt' => "\x3C", 'LT;' => "\x3C", 'lt;' => "\x3C", 'macr' => "\xC2\xAF", 'macr;' => "\xC2\xAF", 'mdash;' => "\xE2\x80\x94", 'micro' => "\xC2\xB5", 'micro;' => "\xC2\xB5", 'middot' => "\xC2\xB7", 'middot;' => "\xC2\xB7", 'minus;' => "\xE2\x88\x92", 'Mu;' => "\xCE\x9C", 'mu;' => "\xCE\xBC", 'nabla;' => "\xE2\x88\x87", 'nbsp' => "\xC2\xA0", 'nbsp;' => "\xC2\xA0", 'ndash;' => "\xE2\x80\x93", 'ne;' => "\xE2\x89\xA0", 'ni;' => "\xE2\x88\x8B", 'not' => "\xC2\xAC", 'not;' => "\xC2\xAC", 'notin;' => "\xE2\x88\x89", 'nsub;' => "\xE2\x8A\x84", 'Ntilde' => "\xC3\x91", 'ntilde' => "\xC3\xB1", 'Ntilde;' => "\xC3\x91", 'ntilde;' => "\xC3\xB1", 'Nu;' => "\xCE\x9D", 'nu;' => "\xCE\xBD", 'Oacute' => "\xC3\x93", 'oacute' => "\xC3\xB3", 'Oacute;' => "\xC3\x93", 'oacute;' => "\xC3\xB3", 'Ocirc' => "\xC3\x94", 'ocirc' => "\xC3\xB4", 'Ocirc;' => "\xC3\x94", 'ocirc;' => "\xC3\xB4", 'OElig;' => "\xC5\x92", 'oelig;' => "\xC5\x93", 'Ograve' => "\xC3\x92", 'ograve' => "\xC3\xB2", 'Ograve;' => "\xC3\x92", 'ograve;' => "\xC3\xB2", 'oline;' => "\xE2\x80\xBE", 'Omega;' => "\xCE\xA9", 'omega;' => "\xCF\x89", 'Omicron;' => "\xCE\x9F", 'omicron;' => "\xCE\xBF", 'oplus;' => "\xE2\x8A\x95", 'or;' => "\xE2\x88\xA8", 'ordf' => "\xC2\xAA", 'ordf;' => "\xC2\xAA", 'ordm' => "\xC2\xBA", 'ordm;' => "\xC2\xBA", 'Oslash' => "\xC3\x98", 'oslash' => "\xC3\xB8", 'Oslash;' => "\xC3\x98", 'oslash;' => "\xC3\xB8", 'Otilde' => "\xC3\x95", 'otilde' => "\xC3\xB5", 'Otilde;' => "\xC3\x95", 'otilde;' => "\xC3\xB5", 'otimes;' => "\xE2\x8A\x97", 'Ouml' => "\xC3\x96", 'ouml' => "\xC3\xB6", 'Ouml;' => "\xC3\x96", 'ouml;' => "\xC3\xB6", 'para' => "\xC2\xB6", 'para;' => "\xC2\xB6", 'part;' => "\xE2\x88\x82", 'permil;' => "\xE2\x80\xB0", 'perp;' => "\xE2\x8A\xA5", 'Phi;' => "\xCE\xA6", 'phi;' => "\xCF\x86", 'Pi;' => "\xCE\xA0", 'pi;' => "\xCF\x80", 'piv;' => "\xCF\x96", 'plusmn' => "\xC2\xB1", 'plusmn;' => "\xC2\xB1", 'pound' => "\xC2\xA3", 'pound;' => "\xC2\xA3", 'Prime;' => "\xE2\x80\xB3", 'prime;' => "\xE2\x80\xB2", 'prod;' => "\xE2\x88\x8F", 'prop;' => "\xE2\x88\x9D", 'Psi;' => "\xCE\xA8", 'psi;' => "\xCF\x88", 'QUOT' => "\x22", 'quot' => "\x22", 'QUOT;' => "\x22", 'quot;' => "\x22", 'radic;' => "\xE2\x88\x9A", 'rang;' => "\xE3\x80\x89", 'raquo' => "\xC2\xBB", 'raquo;' => "\xC2\xBB", 'rArr;' => "\xE2\x87\x92", 'rarr;' => "\xE2\x86\x92", 'rceil;' => "\xE2\x8C\x89", 'rdquo;' => "\xE2\x80\x9D", 'real;' => "\xE2\x84\x9C", 'REG' => "\xC2\xAE", 'reg' => "\xC2\xAE", 'REG;' => "\xC2\xAE", 'reg;' => "\xC2\xAE", 'rfloor;' => "\xE2\x8C\x8B", 'Rho;' => "\xCE\xA1", 'rho;' => "\xCF\x81", 'rlm;' => "\xE2\x80\x8F", 'rsaquo;' => "\xE2\x80\xBA", 'rsquo;' => "\xE2\x80\x99", 'sbquo;' => "\xE2\x80\x9A", 'Scaron;' => "\xC5\xA0", 'scaron;' => "\xC5\xA1", 'sdot;' => "\xE2\x8B\x85", 'sect' => "\xC2\xA7", 'sect;' => "\xC2\xA7", 'shy' => "\xC2\xAD", 'shy;' => "\xC2\xAD", 'Sigma;' => "\xCE\xA3", 'sigma;' => "\xCF\x83", 'sigmaf;' => "\xCF\x82", 'sim;' => "\xE2\x88\xBC", 'spades;' => "\xE2\x99\xA0", 'sub;' => "\xE2\x8A\x82", 'sube;' => "\xE2\x8A\x86", 'sum;' => "\xE2\x88\x91", 'sup;' => "\xE2\x8A\x83", 'sup1' => "\xC2\xB9", 'sup1;' => "\xC2\xB9", 'sup2' => "\xC2\xB2", 'sup2;' => "\xC2\xB2", 'sup3' => "\xC2\xB3", 'sup3;' => "\xC2\xB3", 'supe;' => "\xE2\x8A\x87", 'szlig' => "\xC3\x9F", 'szlig;' => "\xC3\x9F", 'Tau;' => "\xCE\xA4", 'tau;' => "\xCF\x84", 'there4;' => "\xE2\x88\xB4", 'Theta;' => "\xCE\x98", 'theta;' => "\xCE\xB8", 'thetasym;' => "\xCF\x91", 'thinsp;' => "\xE2\x80\x89", 'THORN' => "\xC3\x9E", 'thorn' => "\xC3\xBE", 'THORN;' => "\xC3\x9E", 'thorn;' => "\xC3\xBE", 'tilde;' => "\xCB\x9C", 'times' => "\xC3\x97", 'times;' => "\xC3\x97", 'TRADE;' => "\xE2\x84\xA2", 'trade;' => "\xE2\x84\xA2", 'Uacute' => "\xC3\x9A", 'uacute' => "\xC3\xBA", 'Uacute;' => "\xC3\x9A", 'uacute;' => "\xC3\xBA", 'uArr;' => "\xE2\x87\x91", 'uarr;' => "\xE2\x86\x91", 'Ucirc' => "\xC3\x9B", 'ucirc' => "\xC3\xBB", 'Ucirc;' => "\xC3\x9B", 'ucirc;' => "\xC3\xBB", 'Ugrave' => "\xC3\x99", 'ugrave' => "\xC3\xB9", 'Ugrave;' => "\xC3\x99", 'ugrave;' => "\xC3\xB9", 'uml' => "\xC2\xA8", 'uml;' => "\xC2\xA8", 'upsih;' => "\xCF\x92", 'Upsilon;' => "\xCE\xA5", 'upsilon;' => "\xCF\x85", 'Uuml' => "\xC3\x9C", 'uuml' => "\xC3\xBC", 'Uuml;' => "\xC3\x9C", 'uuml;' => "\xC3\xBC", 'weierp;' => "\xE2\x84\x98", 'Xi;' => "\xCE\x9E", 'xi;' => "\xCE\xBE", 'Yacute' => "\xC3\x9D", 'yacute' => "\xC3\xBD", 'Yacute;' => "\xC3\x9D", 'yacute;' => "\xC3\xBD", 'yen' => "\xC2\xA5", 'yen;' => "\xC2\xA5", 'yuml' => "\xC3\xBF", 'Yuml;' => "\xC5\xB8", 'yuml;' => "\xC3\xBF", 'Zeta;' => "\xCE\x96", 'zeta;' => "\xCE\xB6", 'zwj;' => "\xE2\x80\x8D", 'zwnj;' => "\xE2\x80\x8C");				for ($i = 0, $match = null; $i < 9 && $this->consume() !== false; $i++)				{					$consumed = substr($this->consumed, 1);					if (isset($entities[$consumed]))					{						$match = $consumed;					}				}				if ($match !== null)				{ 					$this->data = substr_replace($this->data, $entities[$match], $this->position - strlen($consumed) - 1, strlen($match) + 1);					$this->position += strlen($entities[$match]) - strlen($consumed) - 1;				}				break;		}	}}/** * IRI parser/serialiser * * @package SimplePie */class SimplePie_IRI{	/**	 * Scheme	 *	 * @access private	 * @var string	 */	var $scheme;	/**	 * User Information	 *	 * @access private	 * @var string	 */	var $userinfo;	/**	 * Host	 *	 * @access private	 * @var string	 */	var $host;	/**	 * Port	 *	 * @access private	 * @var string	 */	var $port;	/**	 * Path	 *	 * @access private	 * @var string	 */	var $path;	/**	 * Query	 *	 * @access private	 * @var string	 */	var $query;	/**	 * Fragment	 *	 * @access private	 * @var string	 */	var $fragment;	/**	 * Whether the object represents a valid IRI	 *	 * @access private	 * @var array	 */	var $valid = array();	/**	 * Return the entire IRI when you try and read the object as a string	 *	 * @access public	 * @return string	 */	function __toString()	{		return $this->get_iri();	}	/**	 * Create a new IRI object, from a specified string	 *	 * @access public	 * @param string $iri	 * @return SimplePie_IRI	 */	function SimplePie_IRI($iri)	{		$iri = (string) $iri;		if ($iri !== '')		{			$parsed = $this->parse_iri($iri);			$this->set_scheme($parsed['scheme']);			$this->set_authority($parsed['authority']);			$this->set_path($parsed['path']);			$this->set_query($parsed['query']);			$this->set_fragment($parsed['fragment']);		}	}	/**	 * Create a new IRI object by resolving a relative IRI	 *	 * @static	 * @access public	 * @param SimplePie_IRI $base Base IRI	 * @param string $relative Relative IRI	 * @return SimplePie_IRI	 */	function absolutize($base, $relative)	{		$relative = (string) $relative;		if ($relative !== '')		{			$relative = new SimplePie_IRI($relative);			if ($relative->get_scheme() !== null)			{				$target = $relative;			}			elseif ($base->get_iri() !== null)			{				if ($relative->get_authority() !== null)				{					$target = $relative;					$target->set_scheme($base->get_scheme());				}				else				{					$target = new SimplePie_IRI('');					$target->set_scheme($base->get_scheme());					$target->set_userinfo($base->get_userinfo());					$target->set_host($base->get_host());					$target->set_port($base->get_port());					if ($relative->get_path() !== null)					{						if (strpos($relative->get_path(), '/') === 0)						{							$target->set_path($relative->get_path());						}						elseif (($base->get_userinfo() !== null || $base->get_host() !== null || $base->get_port() !== null) && $base->get_path() === null)						{							$target->set_path('/' . $relative->get_path());						}						elseif (($last_segment = strrpos($base->get_path(), '/')) !== false)						{							$target->set_path(substr($base->get_path(), 0, $last_segment + 1) . $relative->get_path());						}						else						{							$target->set_path($relative->get_path());						}						$target->set_query($relative->get_query());					}					else					{						$target->set_path($base->get_path());						if ($relative->get_query() !== null)						{							$target->set_query($relative->get_query());						}						elseif ($base->get_query() !== null)						{							$target->set_query($base->get_query());						}					}				}				$target->set_fragment($relative->get_fragment());			}			else			{				// No base URL, just return the relative URL				$target = $relative;			}		}		else		{			$target = $base;		}		return $target;	}	/**	 * Parse an IRI into scheme/authority/path/query/fragment segments	 *	 * @access private	 * @param string $iri	 * @return array	 */	function parse_iri($iri)	{		preg_match('/^(([^:\/?#]+):)?(\/\/([^\/?#]*))?([^?#]*)(\?([^#]*))?(#(.*))?$/', $iri, $match);		for ($i = count($match); $i <= 9; $i++)		{			$match[$i] = '';		}		return array('scheme' => $match[2], 'authority' => $match[4], 'path' => $match[5], 'query' => $match[7], 'fragment' => $match[9]);	}	/**	 * Remove dot segments from a path	 *	 * @access private	 * @param string $input	 * @return string	 */	function remove_dot_segments($input)	{		$output = '';		while (strpos($input, './') !== false || strpos($input, '/.') !== false || $input === '.' || $input === '..')		{			// A: If the input buffer begins with a prefix of "../" or "./", then remove that prefix from the input buffer; otherwise,			if (strpos($input, '../') === 0)			{				$input = substr($input, 3);			}			elseif (strpos($input, './') === 0)			{				$input = substr($input, 2);			}			// B: if the input buffer begins with a prefix of "/./" or "/.", where "." is a complete path segment, then replace that prefix with "/" in the input buffer; otherwise,			elseif (strpos($input, '/./') === 0)			{				$input = substr_replace($input, '/', 0, 3);			}			elseif ($input === '/.')			{				$input = '/';			}			// C: if the input buffer begins with a prefix of "/../" or "/..", where ".." is a complete path segment, then replace that prefix with "/" in the input buffer and remove the last segment and its preceding "/" (if any) from the output buffer; otherwise,			elseif (strpos($input, '/../') === 0)			{				$input = substr_replace($input, '/', 0, 4);				$output = substr_replace($output, '', strrpos($output, '/'));			}			elseif ($input === '/..')			{				$input = '/';				$output = substr_replace($output, '', strrpos($output, '/'));			}			// D: if the input buffer consists only of "." or "..", then remove that from the input buffer; otherwise,			elseif ($input === '.' || $input === '..')			{				$input = '';			}			// E: move the first path segment in the input buffer to the end of the output buffer, including the initial "/" character (if any) and any subsequent characters up to, but not including, the next "/" character or the end of the input buffer			elseif (($pos = strpos($input, '/', 1)) !== false)			{				$output .= substr($input, 0, $pos);				$input = substr_replace($input, '', 0, $pos);			}			else			{				$output .= $input;				$input = '';			}		}		return $output . $input;	}	/**	 * Replace invalid character with percent encoding	 *	 * @access private	 * @param string $string Input string	 * @param string $valid_chars Valid characters	 * @param int $case Normalise case	 * @return string	 */	function replace_invalid_with_pct_encoding($string, $valid_chars, $case = SIMPLEPIE_SAME_CASE)	{		// Normalise case		if ($case & SIMPLEPIE_LOWERCASE)		{			$string = strtolower($string);		}		elseif ($case & SIMPLEPIE_UPPERCASE)		{			$string = strtoupper($string);		}		// Store position and string length (to avoid constantly recalculating this)		$position = 0;		$strlen = strlen($string);		// Loop as long as we have invalid characters, advancing the position to the next invalid character		while (($position += strspn($string, $valid_chars, $position)) < $strlen)		{			// If we have a % character			if ($string[$position] === '%')			{				// If we have a pct-encoded section				if ($position + 2 < $strlen && strspn($string, '0123456789ABCDEFabcdef', $position + 1, 2) === 2)				{					// Get the the represented character					$chr = chr(hexdec(substr($string, $position + 1, 2)));					// If the character is valid, replace the pct-encoded with the actual character while normalising case					if (strpos($valid_chars, $chr) !== false)					{						if ($case & SIMPLEPIE_LOWERCASE)						{							$chr = strtolower($chr);						}						elseif ($case & SIMPLEPIE_UPPERCASE)						{							$chr = strtoupper($chr);						}						$string = substr_replace($string, $chr, $position, 3);						$strlen -= 2;						$position++;					}					// Otherwise just normalise the pct-encoded to uppercase					else					{						$string = substr_replace($string, strtoupper(substr($string, $position + 1, 2)), $position + 1, 2);						$position += 3;					}				}				// If we don't have a pct-encoded section, just replace the % with its own esccaped form				else				{					$string = substr_replace($string, '%25', $position, 1);					$strlen += 2;					$position += 3;				}			}			// If we have an invalid character, change into its pct-encoded form			else			{				$replacement = sprintf("%%%02X", ord($string[$position]));				$string = str_replace($string[$position], $replacement, $string);				$strlen = strlen($string);			}		}		return $string;	}	/**	 * Check if the object represents a valid IRI	 *	 * @access public	 * @return bool	 */	function is_valid()	{		return array_sum($this->valid) === count($this->valid);	}	/**	 * Set the scheme. Returns true on success, false on failure (if there are	 * any invalid characters).	 *	 * @access public	 * @param string $scheme	 * @return bool	 */	function set_scheme($scheme)	{		if ($scheme === null || $scheme === '')		{			$this->scheme = null;		}		else		{			$len = strlen($scheme);			switch (true)			{				case $len > 1:					if (!strspn($scheme, 'ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+-.', 1))					{						$this->scheme = null;						$this->valid[__FUNCTION__] = false;						return false;					}				case $len > 0:					if (!strspn($scheme, 'ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz', 0, 1))					{						$this->scheme = null;						$this->valid[__FUNCTION__] = false;						return false;					}			}			$this->scheme = strtolower($scheme);		}		$this->valid[__FUNCTION__] = true;		return true;	}	/**	 * Set the authority. Returns true on success, false on failure (if there are	 * any invalid characters).	 *	 * @access public	 * @param string $authority	 * @return bool	 */	function set_authority($authority)	{		if (($userinfo_end = strrpos($authority, '@')) !== false)		{			$userinfo = substr($authority, 0, $userinfo_end);			$authority = substr($authority, $userinfo_end + 1);		}		else		{			$userinfo = null;		}		if (($port_start = strpos($authority, ':')) !== false)		{			$port = substr($authority, $port_start + 1);			$authority = substr($authority, 0, $port_start);		}		else		{			$port = null;		}		return $this->set_userinfo($userinfo) && $this->set_host($authority) && $this->set_port($port);	}	/**	 * Set the userinfo.	 *	 * @access public	 * @param string $userinfo	 * @return bool	 */	function set_userinfo($userinfo)	{		if ($userinfo === null || $userinfo === '')		{			$this->userinfo = null;		}		else		{			$this->userinfo = $this->replace_invalid_with_pct_encoding($userinfo, 'ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789-._~!$&\'()*+,;=:');		}		$this->valid[__FUNCTION__] = true;		return true;	}	/**	 * Set the host. Returns true on success, false on failure (if there are	 * any invalid characters).	 *	 * @access public	 * @param string $host	 * @return bool	 */	function set_host($host)	{		if ($host === null || $host === '')		{			$this->host = null;			$this->valid[__FUNCTION__] = true;			return true;		}		elseif ($host[0] === '[' && substr($host, -1) === ']')		{			if (Net_IPv6::checkIPv6(substr($host, 1, -1)))			{				$this->host = $host;				$this->valid[__FUNCTION__] = true;				return true;			}			else			{				$this->host = null;				$this->valid[__FUNCTION__] = false;				return false;			}		}		else		{			$this->host = $this->replace_invalid_with_pct_encoding($host, 'ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789-._~!$&\'()*+,;=', SIMPLEPIE_LOWERCASE);			$this->valid[__FUNCTION__] = true;			return true;		}	}	/**	 * Set the port. Returns true on success, false on failure (if there are	 * any invalid characters).	 *	 * @access public	 * @param string $port	 * @return bool	 */	function set_port($port)	{		if ($port === null || $port === '')		{			$this->port = null;			$this->valid[__FUNCTION__] = true;			return true;		}		elseif (strspn($port, '0123456789') === strlen($port))		{			$this->port = (int) $port;			$this->valid[__FUNCTION__] = true;			return true;		}		else		{			$this->port = null;			$this->valid[__FUNCTION__] = false;			return false;		}	}	/**	 * Set the path.	 *	 * @access public	 * @param string $path	 * @return bool	 */	function set_path($path)	{		if ($path === null || $path === '')		{			$this->path = null;			$this->valid[__FUNCTION__] = true;			return true;		}		elseif (substr($path, 0, 2) === '//' && $this->userinfo === null && $this->host === null && $this->port === null)		{			$this->path = null;			$this->valid[__FUNCTION__] = false;			return false;		}		else		{			$this->path = $this->replace_invalid_with_pct_encoding($path, 'ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789-._~!$&\'()*+,;=@/');			if ($this->scheme !== null)			{				$this->path = $this->remove_dot_segments($this->path);			}			$this->valid[__FUNCTION__] = true;			return true;		}	}	/**	 * Set the query.	 *	 * @access public	 * @param string $query	 * @return bool	 */	function set_query($query)	{		if ($query === null || $query === '')		{			$this->query = null;		}		else		{			$this->query = $this->replace_invalid_with_pct_encoding($query, 'ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789-._~!$&\'()*+,;=:@/?');		}		$this->valid[__FUNCTION__] = true;		return true;	}	/**	 * Set the fragment.	 *	 * @access public	 * @param string $fragment	 * @return bool	 */	function set_fragment($fragment)	{		if ($fragment === null || $fragment === '')		{			$this->fragment = null;		}		else		{			$this->fragment = $this->replace_invalid_with_pct_encoding($fragment, 'ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789-._~!$&\'()*+,;=:@/?');		}		$this->valid[__FUNCTION__] = true;		return true;	}	/**	 * Get the complete IRI	 *	 * @access public	 * @return string	 */	function get_iri()	{		$iri = '';		if ($this->scheme !== null)		{			$iri .= $this->scheme . ':';		}		if (($authority = $this->get_authority()) !== null)		{			$iri .= '//' . $authority;		}		if ($this->path !== null)		{			$iri .= $this->path;		}		if ($this->query !== null)		{			$iri .= '?' . $this->query;		}		if ($this->fragment !== null)		{			$iri .= '#' . $this->fragment;		}		if ($iri !== '')		{			return $iri;		}		else		{			return null;		}	}	/**	 * Get the scheme	 *	 * @access public	 * @return string	 */	function get_scheme()	{		return $this->scheme;	}	/**	 * Get the complete authority	 *	 * @access public	 * @return string	 */	function get_authority()	{		$authority = '';		if ($this->userinfo !== null)		{			$authority .= $this->userinfo . '@';		}		if ($this->host !== null)		{			$authority .= $this->host;		}		if ($this->port !== null)		{			$authority .= ':' . $this->port;		}		if ($authority !== '')		{			return $authority;		}		else		{			return null;		}	}	/**	 * Get the user information	 *	 * @access public	 * @return string	 */	function get_userinfo()	{		return $this->userinfo;	}	/**	 * Get the host	 *	 * @access public	 * @return string	 */	function get_host()	{		return $this->host;	}	/**	 * Get the port	 *	 * @access public	 * @return string	 */	function get_port()	{		return $this->port;	}	/**	 * Get the path	 *	 * @access public	 * @return string	 */	function get_path()	{		return $this->path;	}	/**	 * Get the query	 *	 * @access public	 * @return string	 */	function get_query()	{		return $this->query;	}	/**	 * Get the fragment	 *	 * @access public	 * @return string	 */	function get_fragment()	{		return $this->fragment;	}}/** * Class to validate and to work with IPv6 addresses. * * @package SimplePie * @copyright 2003-2005 The PHP Group * @license http://www.opensource.org/licenses/bsd-license.php * @link http://pear.php.net/package/Net_IPv6 * @author Alexander Merz <alexander.merz@web.de> * @author elfrink at introweb dot nl * @author Josh Peck <jmp at joshpeck dot org> * @author Geoffrey Sneddon <geoffers@gmail.com> */class SimplePie_Net_IPv6{	/**	 * Removes a possible existing netmask specification of an IP address.	 *	 * @param string $ip the (compressed) IP as Hex representation	 * @return string the IP the without netmask	 * @since 1.1.0	 * @access public	 * @static	 */	function removeNetmaskSpec($ip)	{		if (strpos($ip, '/') !== false)		{			list($addr, $nm) = explode('/', $ip);		}		else		{			$addr = $ip;		}		return $addr;	}	/**	 * Uncompresses an IPv6 address	 *	 * RFC 2373 allows you to compress zeros in an address to '::'. This	 * function expects an valid IPv6 address and expands the '::' to	 * the required zeros.	 *	 * Example:	 FF01::101	->	FF01:0:0:0:0:0:0:101	 *			 ::1		->	0:0:0:0:0:0:0:1	 *	 * @access public	 * @static	 * @param string $ip a valid IPv6-address (hex format)	 * @return string the uncompressed IPv6-address (hex format)	 */	function Uncompress($ip)	{		$uip = SimplePie_Net_IPv6::removeNetmaskSpec($ip);		$c1 = -1;		$c2 = -1;		if (strpos($ip, '::') !== false)		{			list($ip1, $ip2) = explode('::', $ip);			if ($ip1 === '')			{				$c1 = -1;			}			else			{				$pos = 0;				if (($pos = substr_count($ip1, ':')) > 0)				{					$c1 = $pos;				}				else				{					$c1 = 0;				}			}			if ($ip2 === '')			{				$c2 = -1;			}			else			{				$pos = 0;				if (($pos = substr_count($ip2, ':')) > 0)				{					$c2 = $pos;				}				else				{					$c2 = 0;				}			}			if (strstr($ip2, '.'))			{				$c2++;			}			// ::			if ($c1 === -1 && $c2 === -1)			{				$uip = '0:0:0:0:0:0:0:0';			}			// ::xxx			else if ($c1 === -1)			{				$fill = str_repeat('0:', 7 - $c2);				$uip =	str_replace('::', $fill, $uip);			}			// xxx::			else if ($c2 === -1)			{				$fill = str_repeat(':0', 7 - $c1);				$uip =	str_replace('::', $fill, $uip);			}			// xxx::xxx			else			{				$fill = str_repeat(':0:', 6 - $c2 - $c1);				$uip =	str_replace('::', $fill, $uip);				$uip =	str_replace('::', ':', $uip);			}		}		return $uip;	}	/**	 * Splits an IPv6 address into the IPv6 and a possible IPv4 part	 *	 * RFC 2373 allows you to note the last two parts of an IPv6 address as	 * an IPv4 compatible address	 *	 * Example:	 0:0:0:0:0:0:13.1.68.3	 *			 0:0:0:0:0:FFFF:129.144.52.38	 *	 * @access public	 * @static	 * @param string $ip a valid IPv6-address (hex format)	 * @return array [0] contains the IPv6 part, [1] the IPv4 part (hex format)	 */	function SplitV64($ip)	{		$ip = SimplePie_Net_IPv6::Uncompress($ip);		if (strstr($ip, '.'))		{			$pos = strrpos($ip, ':');			$ip[$pos] = '_';			$ipPart = explode('_', $ip);			return $ipPart;		}		else		{			return array($ip, '');		}	}	/**	 * Checks an IPv6 address	 *	 * Checks if the given IP is IPv6-compatible	 *	 * @access public	 * @static	 * @param string $ip a valid IPv6-address	 * @return bool true if $ip is an IPv6 address	 */	function checkIPv6($ip)	{		$ipPart = SimplePie_Net_IPv6::SplitV64($ip);		$count = 0;		if (!empty($ipPart[0]))		{			$ipv6 = explode(':', $ipPart[0]);			for ($i = 0; $i < count($ipv6); $i++)			{				$dec = hexdec($ipv6[$i]);				$hex = strtoupper(preg_replace('/^[0]{1,3}(.*[0-9a-fA-F])$/', '\\1', $ipv6[$i]));				if ($ipv6[$i] >= 0 && $dec <= 65535 && $hex === strtoupper(dechex($dec)))				{					$count++;				}			}			if ($count === 8)			{				return true;			}			elseif ($count === 6 && !empty($ipPart[1]))			{				$ipv4 = explode('.', $ipPart[1]);				$count = 0;				foreach ($ipv4 as $ipv4_part)				{					if ($ipv4_part >= 0 && $ipv4_part <= 255 && preg_match('/^\d{1,3}$/', $ipv4_part))					{						$count++;					}				}				if ($count === 4)				{					return true;				}			}			else			{				return false;			}		}		else		{			return false;		}	}}/** * Date Parser * * @package SimplePie */class SimplePie_Parse_Date{	/**	 * Input data	 *	 * @access protected	 * @var string	 */	var $date;	/**	 * List of days, calendar day name => ordinal day number in the week	 *	 * @access protected	 * @var array	 */	var $day = array(		// English		'mon' => 1,		'monday' => 1,		'tue' => 2,		'tuesday' => 2,		'wed' => 3,		'wednesday' => 3,		'thu' => 4,		'thursday' => 4,		'fri' => 5,		'friday' => 5,		'sat' => 6,		'saturday' => 6,		'sun' => 7,		'sunday' => 7,		// Dutch		'maandag' => 1,		'dinsdag' => 2,		'woensdag' => 3,		'donderdag' => 4,		'vrijdag' => 5,		'zaterdag' => 6,		'zondag' => 7,		// French		'lundi' => 1,		'mardi' => 2,		'mercredi' => 3,		'jeudi' => 4,		'vendredi' => 5,		'samedi' => 6,		'dimanche' => 7,		// German		'montag' => 1,		'dienstag' => 2,		'mittwoch' => 3,		'donnerstag' => 4,		'freitag' => 5,		'samstag' => 6,		'sonnabend' => 6,		'sonntag' => 7,		// Italian		'luned' => 1,		'marted' => 2,		'mercoled' => 3,		'gioved' => 4,		'venerd' => 5,		'sabato' => 6,		'domenica' => 7,		// Spanish		'lunes' => 1,		'martes' => 2,		'mircoles' => 3,		'jueves' => 4,		'viernes' => 5,		'sbado' => 6,		'domingo' => 7,		// Finnish		'maanantai' => 1,		'tiistai' => 2,		'keskiviikko' => 3,		'torstai' => 4,		'perjantai' => 5,		'lauantai' => 6,		'sunnuntai' => 7,		// Hungarian		'htf' => 1,		'kedd' => 2,		'szerda' => 3,		'cstrtok' => 4,		'pntek' => 5,		'szombat' => 6,		'vasrnap' => 7,		// Greek		'' => 1,		'' => 2,		'' => 3,		'' => 4,		'' => 5,		'' => 6,		'' => 7,	);	/**	 * List of months, calendar month name => calendar month number	 *	 * @access protected	 * @var array	 */	var $month = array(		// English		'jan' => 1,		'january' => 1,		'feb' => 2,		'february' => 2,		'mar' => 3,		'march' => 3,		'apr' => 4,		'april' => 4,		'may' => 5,		// No long form of May		'jun' => 6,		'june' => 6,		'jul' => 7,		'july' => 7,		'aug' => 8,		'august' => 8,		'sep' => 9,		'september' => 8,		'oct' => 10,		'october' => 10,		'nov' => 11,		'november' => 11,		'dec' => 12,		'december' => 12,		// Dutch		'januari' => 1,		'februari' => 2,		'maart' => 3,		'april' => 4,		'mei' => 5,		'juni' => 6,		'juli' => 7,		'augustus' => 8,		'september' => 9,		'oktober' => 10,		'november' => 11,		'december' => 12,		// French		'janvier' => 1,		'fvrier' => 2,		'mars' => 3,		'avril' => 4,		'mai' => 5,		'juin' => 6,		'juillet' => 7,		'aot' => 8,		'septembre' => 9,		'octobre' => 10,		'novembre' => 11,		'dcembre' => 12,		// German		'januar' => 1,		'februar' => 2,		'mrz' => 3,		'april' => 4,		'mai' => 5,		'juni' => 6,		'juli' => 7,		'august' => 8,		'september' => 9,		'oktober' => 10,		'november' => 11,		'dezember' => 12,		// Italian		'gennaio' => 1,		'febbraio' => 2,		'marzo' => 3,		'aprile' => 4,		'maggio' => 5,		'giugno' => 6,		'luglio' => 7,		'agosto' => 8,		'settembre' => 9,		'ottobre' => 10,		'novembre' => 11,		'dicembre' => 12,		// Spanish		'enero' => 1,		'febrero' => 2,		'marzo' => 3,		'abril' => 4,		'mayo' => 5,		'junio' => 6,		'julio' => 7,		'agosto' => 8,		'septiembre' => 9,		'setiembre' => 9,		'octubre' => 10,		'noviembre' => 11,		'diciembre' => 12,		// Finnish		'tammikuu' => 1,		'helmikuu' => 2,		'maaliskuu' => 3,		'huhtikuu' => 4,		'toukokuu' => 5,		'keskuu' => 6,		'heinkuu' => 7,		'elokuu' => 8,		'suuskuu' => 9,		'lokakuu' => 10,		'marras' => 11,		'joulukuu' => 12,		// Hungarian		'janur' => 1,		'februr' => 2,		'mrcius' => 3,		'prilis' => 4,		'mjus' => 5,		'jnius' => 6,		'jlius' => 7,		'augusztus' => 8,		'szeptember' => 9,		'oktber' => 10,		'november' => 11,		'december' => 12,		// Greek		'' => 1,		'' => 2,		'' => 3,		'' => 3,		'' => 4,		'' => 5,		'' => 5,		'' => 5,		'' => 6,		'' => 6,		'' => 7,		'' => 7,		'' => 8,		'' => 8,		'' => 9,		'' => 10,		'' => 11,		'' => 12,	);	/**	 * List of timezones, abbreviation => offset from UTC	 *	 * @access protected	 * @var array	 */	var $timezone = array(		'ACDT' => 37800,		'ACIT' => 28800,		'ACST' => 34200,		'ACT' => -18000,		'ACWDT' => 35100,		'ACWST' => 31500,		'AEDT' => 39600,		'AEST' => 36000,		'AFT' => 16200,		'AKDT' => -28800,		'AKST' => -32400,		'AMDT' => 18000,		'AMT' => -14400,		'ANAST' => 46800,		'ANAT' => 43200,		'ART' => -10800,		'AZOST' => -3600,		'AZST' => 18000,		'AZT' => 14400,		'BIOT' => 21600,		'BIT' => -43200,		'BOT' => -14400,		'BRST' => -7200,		'BRT' => -10800,		'BST' => 3600,		'BTT' => 21600,		'CAST' => 18000,		'CAT' => 7200,		'CCT' => 23400,		'CDT' => -18000,		'CEDT' => 7200,		'CET' => 3600,		'CGST' => -7200,		'CGT' => -10800,		'CHADT' => 49500,		'CHAST' => 45900,		'CIST' => -28800,		'CKT' => -36000,		'CLDT' => -10800,		'CLST' => -14400,		'COT' => -18000,		'CST' => -21600,		'CVT' => -3600,		'CXT' => 25200,		'DAVT' => 25200,		'DTAT' => 36000,		'EADT' => -18000,		'EAST' => -21600,		'EAT' => 10800,		'ECT' => -18000,		'EDT' => -14400,		'EEST' => 10800,		'EET' => 7200,		'EGT' => -3600,		'EKST' => 21600,		'EST' => -18000,		'FJT' => 43200,		'FKDT' => -10800,		'FKST' => -14400,		'FNT' => -7200,		'GALT' => -21600,		'GEDT' => 14400,		'GEST' => 10800,		'GFT' => -10800,		'GILT' => 43200,		'GIT' => -32400,		'GST' => 14400,		'GST' => -7200,		'GYT' => -14400,		'HAA' => -10800,		'HAC' => -18000,		'HADT' => -32400,		'HAE' => -14400,		'HAP' => -25200,		'HAR' => -21600,		'HAST' => -36000,		'HAT' => -9000,		'HAY' => -28800,		'HKST' => 28800,		'HMT' => 18000,		'HNA' => -14400,		'HNC' => -21600,		'HNE' => -18000,		'HNP' => -28800,		'HNR' => -25200,		'HNT' => -12600,		'HNY' => -32400,		'IRDT' => 16200,		'IRKST' => 32400,		'IRKT' => 28800,		'IRST' => 12600,		'JFDT' => -10800,		'JFST' => -14400,		'JST' => 32400,		'KGST' => 21600,		'KGT' => 18000,		'KOST' => 39600,		'KOVST' => 28800,		'KOVT' => 25200,		'KRAST' => 28800,		'KRAT' => 25200,		'KST' => 32400,		'LHDT' => 39600,		'LHST' => 37800,		'LINT' => 50400,		'LKT' => 21600,		'MAGST' => 43200,		'MAGT' => 39600,		'MAWT' => 21600,		'MDT' => -21600,		'MESZ' => 7200,		'MEZ' => 3600,		'MHT' => 43200,		'MIT' => -34200,		'MNST' => 32400,		'MSDT' => 14400,		'MSST' => 10800,		'MST' => -25200,		'MUT' => 14400,		'MVT' => 18000,		'MYT' => 28800,		'NCT' => 39600,		'NDT' => -9000,		'NFT' => 41400,		'NMIT' => 36000,		'NOVST' => 25200,		'NOVT' => 21600,		'NPT' => 20700,		'NRT' => 43200,		'NST' => -12600,		'NUT' => -39600,		'NZDT' => 46800,		'NZST' => 43200,		'OMSST' => 25200,		'OMST' => 21600,		'PDT' => -25200,		'PET' => -18000,		'PETST' => 46800,		'PETT' => 43200,		'PGT' => 36000,		'PHOT' => 46800,		'PHT' => 28800,		'PKT' => 18000,		'PMDT' => -7200,		'PMST' => -10800,		'PONT' => 39600,		'PST' => -28800,		'PWT' => 32400,		'PYST' => -10800,		'PYT' => -14400,		'RET' => 14400,		'ROTT' => -10800,		'SAMST' => 18000,		'SAMT' => 14400,		'SAST' => 7200,		'SBT' => 39600,		'SCDT' => 46800,		'SCST' => 43200,		'SCT' => 14400,		'SEST' => 3600,		'SGT' => 28800,		'SIT' => 28800,		'SRT' => -10800,		'SST' => -39600,		'SYST' => 10800,		'SYT' => 7200,		'TFT' => 18000,		'THAT' => -36000,		'TJT' => 18000,		'TKT' => -36000,		'TMT' => 18000,		'TOT' => 46800,		'TPT' => 32400,		'TRUT' => 36000,		'TVT' => 43200,		'TWT' => 28800,		'UYST' => -7200,		'UYT' => -10800,		'UZT' => 18000,		'VET' => -14400,		'VLAST' => 39600,		'VLAT' => 36000,		'VOST' => 21600,		'VUT' => 39600,		'WAST' => 7200,		'WAT' => 3600,		'WDT' => 32400,		'WEST' => 3600,		'WFT' => 43200,		'WIB' => 25200,		'WIT' => 32400,		'WITA' => 28800,		'WKST' => 18000,		'WST' => 28800,		'YAKST' => 36000,		'YAKT' => 32400,		'YAPT' => 36000,		'YEKST' => 21600,		'YEKT' => 18000,	);	/**	 * Cached PCRE for SimplePie_Parse_Date::$day	 *	 * @access protected	 * @var string	 */	var $day_pcre;	/**	 * Cached PCRE for SimplePie_Parse_Date::$month	 *	 * @access protected	 * @var string	 */	var $month_pcre;	/**	 * Array of user-added callback methods	 *	 * @access private	 * @var array	 */	var $built_in = array();	/**	 * Array of user-added callback methods	 *	 * @access private	 * @var array	 */	var $user = array();	/**	 * Create new SimplePie_Parse_Date object, and set self::day_pcre,	 * self::month_pcre, and self::built_in	 *	 * @access private	 */	function SimplePie_Parse_Date()	{		$this->day_pcre = '(' . implode(array_keys($this->day), '|') . ')';		$this->month_pcre = '(' . implode(array_keys($this->month), '|') . ')';		static $cache;		if (!isset($cache[get_class($this)]))		{			$all_methods = get_class_methods($this);			foreach ($all_methods as $method)			{				if (strtolower(substr($method, 0, 5)) === 'date_')				{					$cache[get_class($this)][] = $method;				}			}		}		foreach ($cache[get_class($this)] as $method)		{			$this->built_in[] = $method;		}	}	/**	 * Get the object	 *	 * @access public	 */	function get()	{		static $object;		if (!$object)		{			$object = new SimplePie_Parse_Date;		}		return $object;	}	/**	 * Parse a date	 *	 * @final	 * @access public	 * @param string $date Date to parse	 * @return int Timestamp corresponding to date string, or false on failure	 */	function parse($date)	{		foreach ($this->user as $method)		{			if (($returned = call_user_func($method, $date)) !== false)			{				return $returned;			}		}		foreach ($this->built_in as $method)		{			if (($returned = call_user_func(array(&$this, $method), $date)) !== false)			{				return $returned;			}		}		return false;	}	/**	 * Add a callback method to parse a date	 *	 * @final	 * @access public	 * @param callback $callback	 */	function add_callback($callback)	{		if (is_callable($callback))		{			$this->user[] = $callback;		}		else		{			trigger_error('User-supplied function must be a valid callback', E_USER_WARNING);		}	}	/**	 * Parse a superset of W3C-DTF (allows hyphens and colons to be omitted, as	 * well as allowing any of upper or lower case "T", horizontal tabs, or	 * spaces to be used as the time seperator (including more than one))	 *	 * @access protected	 * @return int Timestamp	 */	function date_w3cdtf($date)	{		static $pcre;		if (!$pcre)		{			$year = '([0-9]{4})';			$month = $day = $hour = $minute = $second = '([0-9]{2})';			$decimal = '([0-9]*)';			$zone = '(?:(Z)|([+\-])([0-9]{1,2}):?([0-9]{1,2}))';			$pcre = '/^' . $year . '(?:-?' . $month . '(?:-?' . $day . '(?:[Tt\x09\x20]+' . $hour . '(?::?' . $minute . '(?::?' . $second . '(?:.' . $decimal . ')?)?)?' . $zone . ')?)?)?$/';		}		if (preg_match($pcre, $date, $match))		{			/*			Capturing subpatterns:			1: Year			2: Month			3: Day			4: Hour			5: Minute			6: Second			7: Decimal fraction of a second			8: Zulu			9: Timezone 			10: Timezone hours			11: Timezone minutes			*/			// Fill in empty matches			for ($i = count($match); $i <= 3; $i++)			{				$match[$i] = '1';			}			for ($i = count($match); $i <= 7; $i++)			{				$match[$i] = '0';			}			// Numeric timezone			if (isset($match[9]) && $match[9] !== '')			{				$timezone = $match[10] * 3600;				$timezone += $match[11] * 60;				if ($match[9] === '-')				{					$timezone = 0 - $timezone;				}			}			else			{				$timezone = 0;			}			// Convert the number of seconds to an integer, taking decimals into account			$second = round($match[6] + $match[7] / pow(10, strlen($match[7])));			return gmmktime($match[4], $match[5], $second, $match[2], $match[3], $match[1]) - $timezone;		}		else		{			return false;		}	}	/**	 * Remove RFC822 comments	 *	 * @access protected	 * @param string $data Data to strip comments from	 * @return string Comment stripped string	 */	function remove_rfc2822_comments($string)	{		$string = (string) $string;		$position = 0;		$length = strlen($string);		$depth = 0;		$output = '';		while ($position < $length && ($pos = strpos($string, '(', $position)) !== false)		{			$output .= substr($string, $position, $pos - $position);			$position = $pos + 1;			if ($string[$pos - 1] !== '\\')			{				$depth++;				while ($depth && $position < $length)				{					$position += strcspn($string, '()', $position);					if ($string[$position - 1] === '\\')					{						$position++;						continue;					}					elseif (isset($string[$position]))					{						switch ($string[$position])						{							case '(':								$depth++;								break;							case ')':								$depth--;								break;						}						$position++;					}					else					{						break;					}				}			}			else			{				$output .= '(';			}		}		$output .= substr($string, $position);		return $output;	}	/**	 * Parse RFC2822's date format	 *	 * @access protected	 * @return int Timestamp	 */	function date_rfc2822($date)	{		static $pcre;		if (!$pcre)		{			$wsp = '[\x09\x20]';			$fws = '(?:' . $wsp . '+|' . $wsp . '*(?:\x0D\x0A' . $wsp . '+)+)';			$optional_fws = $fws . '?';			$day_name = $this->day_pcre;			$month = $this->month_pcre;			$day = '([0-9]{1,2})';			$hour = $minute = $second = '([0-9]{2})';			$year = '([0-9]{2,4})';			$num_zone = '([+\-])([0-9]{2})([0-9]{2})';			$character_zone = '([A-Z]{1,5})';			$zone = '(?:' . $num_zone . '|' . $character_zone . ')';			$pcre = '/(?:' . $optional_fws . $day_name . $optional_fws . ',)?' . $optional_fws . $day . $fws . $month . $fws . $year . $fws . $hour . $optional_fws . ':' . $optional_fws . $minute . '(?:' . $optional_fws . ':' . $optional_fws . $second . ')?' . $fws . $zone . '/i';		}		if (preg_match($pcre, $this->remove_rfc2822_comments($date), $match))		{			/*			Capturing subpatterns:			1: Day name			2: Day			3: Month			4: Year			5: Hour			6: Minute			7: Second			8: Timezone 			9: Timezone hours			10: Timezone minutes			11: Alphabetic timezone			*/			// Find the month number			$month = $this->month[strtolower($match[3])];			// Numeric timezone			if ($match[8] !== '')			{				$timezone = $match[9] * 3600;				$timezone += $match[10] * 60;				if ($match[8] === '-')				{					$timezone = 0 - $timezone;				}			}			// Character timezone			elseif (isset($this->timezone[strtoupper($match[11])]))			{				$timezone = $this->timezone[strtoupper($match[11])];			}			// Assume everything else to be -0000			else			{				$timezone = 0;			}			// Deal with 2/3 digit years			if ($match[4] < 50)			{				$match[4] += 2000;			}			elseif ($match[4] < 1000)			{				$match[4] += 1900;			}			// Second is optional, if it is empty set it to zero			if ($match[7] !== '')			{				$second = $match[7];			}			else			{				$second = 0;			}			return gmmktime($match[5], $match[6], $second, $month, $match[2], $match[4]) - $timezone;		}		else		{			return false;		}	}	/**	 * Parse RFC850's date format	 *	 * @access protected	 * @return int Timestamp	 */	function date_rfc850($date)	{		static $pcre;		if (!$pcre)		{			$space = '[\x09\x20]+';			$day_name = $this->day_pcre;			$month = $this->month_pcre;			$day = '([0-9]{1,2})';			$year = $hour = $minute = $second = '([0-9]{2})';			$zone = '([A-Z]{1,5})';			$pcre = '/^' . $day_name . ',' . $space . $day . '-' . $month . '-' . $year . $space . $hour . ':' . $minute . ':' . $second . $space . $zone . '$/i';		}		if (preg_match($pcre, $date, $match))		{			/*			Capturing subpatterns:			1: Day name			2: Day			3: Month			4: Year			5: Hour			6: Minute			7: Second			8: Timezone			*/			// Month			$month = $this->month[strtolower($match[3])];			// Character timezone			if (isset($this->timezone[strtoupper($match[8])]))			{				$timezone = $this->timezone[strtoupper($match[8])];			}			// Assume everything else to be -0000			else			{				$timezone = 0;			}			// Deal with 2 digit year			if ($match[4] < 50)			{				$match[4] += 2000;			}			else			{				$match[4] += 1900;			}			return gmmktime($match[5], $match[6], $match[7], $month, $match[2], $match[4]) - $timezone;		}		else		{			return false;		}	}	/**	 * Parse C99's asctime()'s date format	 *	 * @access protected	 * @return int Timestamp	 */	function date_asctime($date)	{		static $pcre;		if (!$pcre)		{			$space = '[\x09\x20]+';			$wday_name = $this->day_pcre;			$mon_name = $this->month_pcre;			$day = '([0-9]{1,2})';			$hour = $sec = $min = '([0-9]{2})';			$year = '([0-9]{4})';			$terminator = '\x0A?\x00?';			$pcre = '/^' . $wday_name . $space . $mon_name . $space . $day . $space . $hour . ':' . $min . ':' . $sec . $space . $year . $terminator . '$/i';		}		if (preg_match($pcre, $date, $match))		{			/*			Capturing subpatterns:			1: Day name			2: Month			3: Day			4: Hour			5: Minute			6: Second			7: Year			*/			$month = $this->month[strtolower($match[2])];			return gmmktime($match[4], $match[5], $match[6], $month, $match[3], $match[7]);		}		else		{			return false;		}	}	/**	 * Parse dates using strtotime()	 *	 * @access protected	 * @return int Timestamp	 */	function date_strtotime($date)	{		$strtotime = strtotime($date);		if ($strtotime === -1 || $strtotime === false)		{			return false;		}		else		{			return $strtotime;		}	}}/** * Content-type sniffing * * @package SimplePie */class SimplePie_Content_Type_Sniffer{	/**	 * File object	 *	 * @var SimplePie_File	 * @access private	 */	var $file;	/**	 * Create an instance of the class with the input file	 *	 * @access public	 * @param SimplePie_Content_Type_Sniffer $file Input file	 */	function SimplePie_Content_Type_Sniffer($file)	{		$this->file = $file;	}	/**	 * Get the Content-Type of the specified file	 *	 * @access public	 * @return string Actual Content-Type	 */	function get_type()	{		if (isset($this->file->headers['content-type']))		{			if (!isset($this->file->headers['content-encoding'])				&& ($this->file->headers['content-type'] === 'text/plain'					|| $this->file->headers['content-type'] === 'text/plain; charset=ISO-8859-1'					|| $this->file->headers['content-type'] === 'text/plain; charset=iso-8859-1'))			{				return $this->text_or_binary();			}			if (($pos = strpos($this->file->headers['content-type'], ';')) !== false)			{				$official = substr($this->file->headers['content-type'], 0, $pos);			}			else			{				$official = $this->file->headers['content-type'];			}			$official = strtolower($official);			if ($official === 'unknown/unknown'				|| $official === 'application/unknown')			{				return $this->unknown();			}			elseif (substr($official, -4) === '+xml'				|| $official === 'text/xml'				|| $official === 'application/xml')			{				return $official;			}			elseif (substr($official, 0, 6) === 'image/')			{				if ($return = $this->image())				{					return $return;				}				else				{					return $official;				}			}			elseif ($official === 'text/html')			{				return $this->feed_or_html();			}			else			{				return $official;			}		}		else		{			return $this->unknown();		}	}	/**	 * Sniff text or binary	 *	 * @access private	 * @return string Actual Content-Type	 */	function text_or_binary()	{		if (substr($this->file->body, 0, 2) === "\xFE\xFF"			|| substr($this->file->body, 0, 2) === "\xFF\xFE"			|| substr($this->file->body, 0, 4) === "\x00\x00\xFE\xFF"			|| substr($this->file->body, 0, 3) === "\xEF\xBB\xBF")		{			return 'text/plain';		}		elseif (preg_match('/[\x00-\x08\x0E-\x1A\x1C-\x1F]/', $this->file->body))		{			return 'application/octect-stream';		}		else		{			return 'text/plain';		}	}	/**	 * Sniff unknown	 *	 * @access private	 * @return string Actual Content-Type	 */	function unknown()	{		$ws = strspn($this->file->body, "\x09\x0A\x0B\x0C\x0D\x20");		if (strtolower(substr($this->file->body, $ws, 14)) === '<!doctype html'			|| strtolower(substr($this->file->body, $ws, 5)) === '<html'			|| strtolower(substr($this->file->body, $ws, 7)) === '<script')		{			return 'text/html';		}		elseif (substr($this->file->body, 0, 5) === '%PDF-')		{			return 'application/pdf';		}		elseif (substr($this->file->body, 0, 11) === '%!PS-Adobe-')		{			return 'application/postscript';		}		elseif (substr($this->file->body, 0, 6) === 'GIF87a'			|| substr($this->file->body, 0, 6) === 'GIF89a')		{			return 'image/gif';		}		elseif (substr($this->file->body, 0, 8) === "\x89\x50\x4E\x47\x0D\x0A\x1A\x0A")		{			return 'image/png';		}		elseif (substr($this->file->body, 0, 3) === "\xFF\xD8\xFF")		{			return 'image/jpeg';		}		elseif (substr($this->file->body, 0, 2) === "\x42\x4D")		{			return 'image/bmp';		}		else		{			return $this->text_or_binary();		}	}	/**	 * Sniff images	 *	 * @access private	 * @return string Actual Content-Type	 */	function image()	{		if (substr($this->file->body, 0, 6) === 'GIF87a'			|| substr($this->file->body, 0, 6) === 'GIF89a')		{			return 'image/gif';		}		elseif (substr($this->file->body, 0, 8) === "\x89\x50\x4E\x47\x0D\x0A\x1A\x0A")		{			return 'image/png';		}		elseif (substr($this->file->body, 0, 3) === "\xFF\xD8\xFF")		{			return 'image/jpeg';		}		elseif (substr($this->file->body, 0, 2) === "\x42\x4D")		{			return 'image/bmp';		}		else		{			return false;		}	}	/**	 * Sniff HTML	 *	 * @access private	 * @return string Actual Content-Type	 */	function feed_or_html()	{		$len = strlen($this->file->body);		$pos = strspn($this->file->body, "\x09\x0A\x0D\x20");		while ($pos < $len)		{			switch ($this->file->body[$pos])			{				case "\x09":				case "\x0A":				case "\x0D":				case "\x20":					$pos += strspn($this->file->body, "\x09\x0A\x0D\x20", $pos);					continue 2;				case '<':					$pos++;					break;				default:					return 'text/html';			}			if (substr($this->file->body, $pos, 3) === '!--')			{				$pos += 3;				if ($pos < $len && ($pos = strpos($this->file->body, '-->', $pos)) !== false)				{					$pos += 3;				}				else				{					return 'text/html';				}			}			elseif (substr($this->file->body, $pos, 1) === '!')			{				if ($pos < $len && ($pos = strpos($this->file->body, '>', $pos)) !== false)				{					$pos++;				}				else				{					return 'text/html';				}			}			elseif (substr($this->file->body, $pos, 1) === '?')			{				if ($pos < $len && ($pos = strpos($this->file->body, '?>', $pos)) !== false)				{					$pos += 2;				}				else				{					return 'text/html';				}			}			elseif (substr($this->file->body, $pos, 3) === 'rss'				|| substr($this->file->body, $pos, 7) === 'rdf:RDF')			{				return 'application/rss+xml';			}			elseif (substr($this->file->body, $pos, 4) === 'feed')			{				return 'application/atom+xml';			}			else			{				return 'text/html';			}		}		return 'text/html';	}}/** * Parses the XML Declaration * * @package SimplePie */class SimplePie_XML_Declaration_Parser{	/**	 * XML Version	 *	 * @access public	 * @var string	 */	var $version = '1.0';	/**	 * Encoding	 *	 * @access public	 * @var string	 */	var $encoding = 'UTF-8';	/**	 * Standalone	 *	 * @access public	 * @var bool	 */	var $standalone = false;	/**	 * Current state of the state machine	 *	 * @access private	 * @var string	 */	var $state = 'before_version_name';	/**	 * Input data	 *	 * @access private	 * @var string	 */	var $data = '';	/**	 * Input data length (to avoid calling strlen() everytime this is needed)	 *	 * @access private	 * @var int	 */	var $data_length = 0;	/**	 * Current position of the pointer	 *	 * @var int	 * @access private	 */	var $position = 0;	/**	 * Create an instance of the class with the input data	 *	 * @access public	 * @param string $data Input data	 */	function SimplePie_XML_Declaration_Parser($data)	{		$this->data = $data;		$this->data_length = strlen($this->data);	}	/**	 * Parse the input data	 *	 * @access public	 * @return bool true on success, false on failure	 */	function parse()	{		while ($this->state && $this->state !== 'emit' && $this->has_data())		{			$state = $this->state;			$this->$state();		}		$this->data = '';		if ($this->state === 'emit')		{			return true;		}		else		{			$this->version = '';			$this->encoding = '';			$this->standalone = '';			return false;		}	}	/**	 * Check whether there is data beyond the pointer	 *	 * @access private	 * @return bool true if there is further data, false if not	 */	function has_data()	{		return (bool) ($this->position < $this->data_length);	}	/**	 * Advance past any whitespace	 *	 * @return int Number of whitespace characters passed	 */	function skip_whitespace()	{		$whitespace = strspn($this->data, "\x09\x0A\x0D\x20", $this->position);		$this->position += $whitespace;		return $whitespace;	}	/**	 * Read value	 */	function get_value()	{		$quote = substr($this->data, $this->position, 1);		if ($quote === '"' || $quote === "'")		{			$this->position++;			$len = strcspn($this->data, $quote, $this->position);			if ($this->has_data())			{				$value = substr($this->data, $this->position, $len);				$this->position += $len + 1;				return $value;			}		}		return false;	}	function before_version_name()	{		if ($this->skip_whitespace())		{			$this->state = 'version_name';		}		else		{			$this->state = false;		}	}	function version_name()	{		if (substr($this->data, $this->position, 7) === 'version')		{			$this->position += 7;			$this->skip_whitespace();			$this->state = 'version_equals';		}		else		{			$this->state = false;		}	}	function version_equals()	{		if (substr($this->data, $this->position, 1) === '=')		{			$this->position++;			$this->skip_whitespace();			$this->state = 'version_value';		}		else		{			$this->state = false;		}	}	function version_value()	{		if ($this->version = $this->get_value())		{			$this->skip_whitespace();			if ($this->has_data())			{				$this->state = 'encoding_name';			}			else			{				$this->state = 'emit';			}		}		else		{			$this->state = 'standalone_name';		}	}	function encoding_name()	{		if (substr($this->data, $this->position, 8) === 'encoding')		{			$this->position += 8;			$this->skip_whitespace();			$this->state = 'encoding_equals';		}		else		{			$this->state = false;		}	}	function encoding_equals()	{		if (substr($this->data, $this->position, 1) === '=')		{			$this->position++;			$this->skip_whitespace();			$this->state = 'encoding_value';		}		else		{			$this->state = false;		}	}	function encoding_value()	{		if ($this->encoding = $this->get_value())		{			$this->skip_whitespace();			if ($this->has_data())			{				$this->state = 'standalone_name';			}			else			{				$this->state = 'emit';			}		}		else		{			$this->state = false;		}	}	function standalone_name()	{		if (substr($this->data, $this->position, 10) === 'standalone')		{			$this->position += 10;			$this->skip_whitespace();			$this->state = 'standalone_equals';		}		else		{			$this->state = false;		}	}	function standalone_equals()	{		if (substr($this->data, $this->position, 1) === '=')		{			$this->position++;			$this->skip_whitespace();			$this->state = 'standalone_value';		}		else		{			$this->state = false;		}	}	function standalone_value()	{		if ($standalone = $this->get_value())		{			switch ($standalone)			{				case 'yes':					$this->standalone = true;					break;				case 'no':					$this->standalone = false;					break;				default:					$this->state = false;					return;			}			$this->skip_whitespace();			if ($this->has_data())			{				$this->state = false;			}			else			{				$this->state = 'emit';			}		}		else		{			$this->state = false;		}	}}class SimplePie_Locator{	var $useragent;	var $timeout;	var $file;	var $local = array();	var $elsewhere = array();	var $file_class = 'SimplePie_File';	var $cached_entities = array();	var $http_base;	var $base;	var $base_location = 0;	var $checked_feeds = 0;	var $max_checked_feeds = 10;	var $content_type_sniffer_class = 'SimplePie_Content_Type_Sniffer';	function SimplePie_Locator(&$file, $timeout = 10, $useragent = null, $file_class = 'SimplePie_File', $max_checked_feeds = 10, $content_type_sniffer_class = 'SimplePie_Content_Type_Sniffer')	{		$this->file =& $file;		$this->file_class = $file_class;		$this->useragent = $useragent;		$this->timeout = $timeout;		$this->max_checked_feeds = $max_checked_feeds;		$this->content_type_sniffer_class = $content_type_sniffer_class;	}	function find($type = SIMPLEPIE_LOCATOR_ALL, &$working)	{		if ($this->is_feed($this->file))		{			return $this->file;		}		if ($this->file->method & SIMPLEPIE_FILE_SOURCE_REMOTE)		{			$sniffer = new $this->content_type_sniffer_class($this->file);			if ($sniffer->get_type() !== 'text/html')			{				return null;			}		}		if ($type & ~SIMPLEPIE_LOCATOR_NONE)		{			$this->get_base();		}		if ($type & SIMPLEPIE_LOCATOR_AUTODISCOVERY && $working = $this->autodiscovery())		{			return $working[0];		}		if ($type & (SIMPLEPIE_LOCATOR_LOCAL_EXTENSION | SIMPLEPIE_LOCATOR_LOCAL_BODY | SIMPLEPIE_LOCATOR_REMOTE_EXTENSION | SIMPLEPIE_LOCATOR_REMOTE_BODY) && $this->get_links())		{			if ($type & SIMPLEPIE_LOCATOR_LOCAL_EXTENSION && $working = $this->extension($this->local))			{				return $working;			}			if ($type & SIMPLEPIE_LOCATOR_LOCAL_BODY && $working = $this->body($this->local))			{				return $working;			}			if ($type & SIMPLEPIE_LOCATOR_REMOTE_EXTENSION && $working = $this->extension($this->elsewhere))			{				return $working;			}			if ($type & SIMPLEPIE_LOCATOR_REMOTE_BODY && $working = $this->body($this->elsewhere))			{				return $working;			}		}		return null;	}	function is_feed(&$file)	{		if ($file->method & SIMPLEPIE_FILE_SOURCE_REMOTE)		{			$sniffer = new $this->content_type_sniffer_class($file);			$sniffed = $sniffer->get_type();			if (in_array($sniffed, array('application/rss+xml', 'application/rdf+xml', 'text/rdf', 'application/atom+xml', 'text/xml', 'application/xml')))			{				return true;			}			else			{				return false;			}		}		elseif ($file->method & SIMPLEPIE_FILE_SOURCE_LOCAL)		{			return true;		}		else		{			return false;		}	}	function get_base()	{		$this->http_base = $this->file->url;		$this->base = $this->http_base;		$elements = SimplePie_Misc::get_element('base', $this->file->body);		foreach ($elements as $element)		{			if ($element['attribs']['href']['data'] !== '')			{				$this->base = SimplePie_Misc::absolutize_url(trim($element['attribs']['href']['data']), $this->http_base);				$this->base_location = $element['offset'];				break;			}		}	}	function autodiscovery()	{		$links = array_merge(SimplePie_Misc::get_element('link', $this->file->body), SimplePie_Misc::get_element('a', $this->file->body), SimplePie_Misc::get_element('area', $this->file->body));		$done = array();		$feeds = array();		foreach ($links as $link)		{			if ($this->checked_feeds === $this->max_checked_feeds)			{				break;			}			if (isset($link['attribs']['href']['data']) && isset($link['attribs']['rel']['data']))			{				$rel = array_unique(SimplePie_Misc::space_seperated_tokens(strtolower($link['attribs']['rel']['data'])));				if ($this->base_location < $link['offset'])				{					$href = SimplePie_Misc::absolutize_url(trim($link['attribs']['href']['data']), $this->base);				}				else				{					$href = SimplePie_Misc::absolutize_url(trim($link['attribs']['href']['data']), $this->http_base);				}				if (!in_array($href, $done) && in_array('feed', $rel) || (in_array('alternate', $rel) && !empty($link['attribs']['type']['data']) && in_array(strtolower(SimplePie_Misc::parse_mime($link['attribs']['type']['data'])), array('application/rss+xml', 'application/atom+xml'))) && !isset($feeds[$href]))				{					$this->checked_feeds++;					$feed = new $this->file_class($href, $this->timeout, 5, null, $this->useragent);					if ($feed->success && ($feed->method & SIMPLEPIE_FILE_SOURCE_REMOTE === 0 || ($feed->status_code === 200 || $feed->status_code > 206 && $feed->status_code < 300)) && $this->is_feed($feed))					{						$feeds[$href] = $feed;					}				}				$done[] = $href;			}		}		if (!empty($feeds))		{			return array_values($feeds);		}		else		{			return null;		}	}	function get_links()	{		$links = SimplePie_Misc::get_element('a', $this->file->body);		foreach ($links as $link)		{			if (isset($link['attribs']['href']['data']))			{				$href = trim($link['attribs']['href']['data']);				$parsed = SimplePie_Misc::parse_url($href);				if ($parsed['scheme'] === '' || preg_match('/^(http(s)|feed)?$/i', $parsed['scheme']))				{					if ($this->base_location < $link['offset'])					{						$href = SimplePie_Misc::absolutize_url(trim($link['attribs']['href']['data']), $this->base);					}					else					{						$href = SimplePie_Misc::absolutize_url(trim($link['attribs']['href']['data']), $this->http_base);					}					$current = SimplePie_Misc::parse_url($this->file->url);					if ($parsed['authority'] === '' || $parsed['authority'] === $current['authority'])					{						$this->local[] = $href;					}					else					{						$this->elsewhere[] = $href;					}				}			}		}		$this->local = array_unique($this->local);		$this->elsewhere = array_unique($this->elsewhere);		if (!empty($this->local) || !empty($this->elsewhere))		{			return true;		}		return null;	}	function extension(&$array)	{		foreach ($array as $key => $value)		{			if ($this->checked_feeds === $this->max_checked_feeds)			{				break;			}			if (in_array(strtolower(strrchr($value, '.')), array('.rss', '.rdf', '.atom', '.xml')))			{				$this->checked_feeds++;				$feed = new $this->file_class($value, $this->timeout, 5, null, $this->useragent);				if ($feed->success && ($feed->method & SIMPLEPIE_FILE_SOURCE_REMOTE === 0 || ($feed->status_code === 200 || $feed->status_code > 206 && $feed->status_code < 300)) && $this->is_feed($feed))				{					return $feed;				}				else				{					unset($array[$key]);				}			}		}		return null;	}	function body(&$array)	{		foreach ($array as $key => $value)		{			if ($this->checked_feeds === $this->max_checked_feeds)			{				break;			}			if (preg_match('/(rss|rdf|atom|xml)/i', $value))			{				$this->checked_feeds++;				$feed = new $this->file_class($value, $this->timeout, 5, null, $this->useragent);				if ($feed->success && ($feed->method & SIMPLEPIE_FILE_SOURCE_REMOTE === 0 || ($feed->status_code === 200 || $feed->status_code > 206 && $feed->status_code < 300)) && $this->is_feed($feed))				{					return $feed;				}				else				{					unset($array[$key]);				}			}		}		return null;	}}class SimplePie_Parser{	var $error_code;	var $error_string;	var $current_line;	var $current_column;	var $current_byte;	var $separator = ' ';	var $namespace = array('');	var $element = array('');	var $xml_base = array('');	var $xml_base_explicit = array(false);	var $xml_lang = array('');	var $data = array();	var $datas = array(array());	var $current_xhtml_construct = -1;	var $encoding;	function parse(&$data, $encoding)	{		// Use UTF-8 if we get passed US-ASCII, as every US-ASCII character is a UTF-8 character		if (strtoupper($encoding) === 'US-ASCII')		{			$this->encoding = 'UTF-8';		}		else		{			$this->encoding = $encoding;		}		// Strip BOM:		// UTF-32 Big Endian BOM		if (substr($data, 0, 4) === "\x00\x00\xFE\xFF")		{			$data = substr($data, 4);		}		// UTF-32 Little Endian BOM		elseif (substr($data, 0, 4) === "\xFF\xFE\x00\x00")		{			$data = substr($data, 4);		}		// UTF-16 Big Endian BOM		elseif (substr($data, 0, 2) === "\xFE\xFF")		{			$data = substr($data, 2);		}		// UTF-16 Little Endian BOM		elseif (substr($data, 0, 2) === "\xFF\xFE")		{			$data = substr($data, 2);		}		// UTF-8 BOM		elseif (substr($data, 0, 3) === "\xEF\xBB\xBF")		{			$data = substr($data, 3);		}		if (substr($data, 0, 5) === '<?xml' && strspn(substr($data, 5, 1), "\x09\x0A\x0D\x20") && ($pos = strpos($data, '?>')) !== false)		{			$declaration = new SimplePie_XML_Declaration_Parser(substr($data, 5, $pos - 5));			if ($declaration->parse())			{				$data = substr($data, $pos + 2);				$data = '<?xml version="' . $declaration->version . '" encoding="' . $encoding . '" standalone="' . (($declaration->standalone) ? 'yes' : 'no') . '"?>' . $data;			}			else			{				$this->error_string = 'SimplePie bug! Please report this!';				return false;			}		}		$return = true;		static $xml_is_sane = null;		if ($xml_is_sane === null)		{			$parser_check = xml_parser_create();			xml_parse_into_struct($parser_check, '<foo>&amp;</foo>', $values);			xml_parser_free($parser_check);			$xml_is_sane = isset($values[0]['value']);		}		// Create the parser		if ($xml_is_sane)		{			$xml = xml_parser_create_ns($this->encoding, $this->separator);			xml_parser_set_option($xml, XML_OPTION_SKIP_WHITE, 1);			xml_parser_set_option($xml, XML_OPTION_CASE_FOLDING, 0);			xml_set_object($xml, $this);			xml_set_character_data_handler($xml, 'cdata');			xml_set_element_handler($xml, 'tag_open', 'tag_close');			// Parse!			if (!xml_parse($xml, $data, true))			{				$this->error_code = xml_get_error_code($xml);				$this->error_string = xml_error_string($this->error_code);				$return = false;			}			$this->current_line = xml_get_current_line_number($xml);			$this->current_column = xml_get_current_column_number($xml);			$this->current_byte = xml_get_current_byte_index($xml);			xml_parser_free($xml);			return $return;		}		else		{			libxml_clear_errors();			$xml = new XMLReader();			$xml->xml($data);			while (@$xml->read())			{				switch ($xml->nodeType)				{					case constant('XMLReader::END_ELEMENT'):						if ($xml->namespaceURI !== '')						{							$tagName = "{$xml->namespaceURI}{$this->separator}{$xml->localName}";						}						else						{							$tagName = $xml->localName;						}						$this->tag_close(null, $tagName);						break;					case constant('XMLReader::ELEMENT'):						$empty = $xml->isEmptyElement;						if ($xml->namespaceURI !== '')						{							$tagName = "{$xml->namespaceURI}{$this->separator}{$xml->localName}";						}						else						{							$tagName = $xml->localName;						}						$attributes = array();						while ($xml->moveToNextAttribute())						{							if ($xml->namespaceURI !== '')							{								$attrName = "{$xml->namespaceURI}{$this->separator}{$xml->localName}";							}							else							{								$attrName = $xml->localName;							}							$attributes[$attrName] = $xml->value;						}						$this->tag_open(null, $tagName, $attributes);						if ($empty)						{							$this->tag_close(null, $tagName);						}						break;					case constant('XMLReader::TEXT'):					case constant('XMLReader::CDATA'):						$this->cdata(null, $xml->value);						break;				}			}			if ($error = libxml_get_last_error())			{				$this->error_code = $error->code;				$this->error_string = $error->message;				$this->current_line = $error->line;				$this->current_column = $error->column;				return false;			}			else			{				return true;			}		}	}	function get_error_code()	{		return $this->error_code;	}	function get_error_string()	{		return $this->error_string;	}	function get_current_line()	{		return $this->current_line;	}	function get_current_column()	{		return $this->current_column;	}	function get_current_byte()	{		return $this->current_byte;	}	function get_data()	{		return $this->data;	}	function tag_open($parser, $tag, $attributes)	{		list($this->namespace[], $this->element[]) = $this->split_ns($tag);		$attribs = array();		foreach ($attributes as $name => $value)		{			list($attrib_namespace, $attribute) = $this->split_ns($name);			$attribs[$attrib_namespace][$attribute] = $value;		}		if (isset($attribs[SIMPLEPIE_NAMESPACE_XML]['base']))		{			$this->xml_base[] = SimplePie_Misc::absolutize_url($attribs[SIMPLEPIE_NAMESPACE_XML]['base'], end($this->xml_base));			$this->xml_base_explicit[] = true;		}		else		{			$this->xml_base[] = end($this->xml_base);			$this->xml_base_explicit[] = end($this->xml_base_explicit);		}		if (isset($attribs[SIMPLEPIE_NAMESPACE_XML]['lang']))		{			$this->xml_lang[] = $attribs[SIMPLEPIE_NAMESPACE_XML]['lang'];		}		else		{			$this->xml_lang[] = end($this->xml_lang);		}		if ($this->current_xhtml_construct >= 0)		{			$this->current_xhtml_construct++;			if (end($this->namespace) === SIMPLEPIE_NAMESPACE_XHTML)			{				$this->data['data'] .= '<' . end($this->element);				if (isset($attribs['']))				{					foreach ($attribs[''] as $name => $value)					{						$this->data['data'] .= ' ' . $name . '="' . htmlspecialchars($value, ENT_COMPAT, $this->encoding) . '"';					}				}				$this->data['data'] .= '>';			}		}		else		{			$this->datas[] =& $this->data;			$this->data =& $this->data['child'][end($this->namespace)][end($this->element)][];			$this->data = array('data' => '', 'attribs' => $attribs, 'xml_base' => end($this->xml_base), 'xml_base_explicit' => end($this->xml_base_explicit), 'xml_lang' => end($this->xml_lang));			if ((end($this->namespace) === SIMPLEPIE_NAMESPACE_ATOM_03 && in_array(end($this->element), array('title', 'tagline', 'copyright', 'info', 'summary', 'content')) && isset($attribs['']['mode']) && $attribs['']['mode'] === 'xml')			|| (end($this->namespace) === SIMPLEPIE_NAMESPACE_ATOM_10 && in_array(end($this->element), array('rights', 'subtitle', 'summary', 'info', 'title', 'content')) && isset($attribs['']['type']) && $attribs['']['type'] === 'xhtml'))			{				$this->current_xhtml_construct = 0;			}		}	}	function cdata($parser, $cdata)	{		if ($this->current_xhtml_construct >= 0)		{			$this->data['data'] .= htmlspecialchars($cdata, ENT_QUOTES, $this->encoding);		}		else		{			$this->data['data'] .= $cdata;		}	}	function tag_close($parser, $tag)	{		if ($this->current_xhtml_construct >= 0)		{			$this->current_xhtml_construct--;			if (end($this->namespace) === SIMPLEPIE_NAMESPACE_XHTML && !in_array(end($this->element), array('area', 'base', 'basefont', 'br', 'col', 'frame', 'hr', 'img', 'input', 'isindex', 'link', 'meta', 'param')))			{				$this->data['data'] .= '</' . end($this->element) . '>';			}		}		if ($this->current_xhtml_construct === -1)		{			$this->data =& $this->datas[count($this->datas) - 1];			array_pop($this->datas);		}		array_pop($this->element);		array_pop($this->namespace);		array_pop($this->xml_base);		array_pop($this->xml_base_explicit);		array_pop($this->xml_lang);	}	function split_ns($string)	{		static $cache = array();		if (!isset($cache[$string]))		{			if ($pos = strpos($string, $this->separator))			{				static $separator_length;				if (!$separator_length)				{					$separator_length = strlen($this->separator);				}				$namespace = substr($string, 0, $pos);				$local_name = substr($string, $pos + $separator_length);				if (strtolower($namespace) === SIMPLEPIE_NAMESPACE_ITUNES)				{					$namespace = SIMPLEPIE_NAMESPACE_ITUNES;				}				// Normalize the Media RSS namespaces				if ($namespace === SIMPLEPIE_NAMESPACE_MEDIARSS_WRONG)				{					$namespace = SIMPLEPIE_NAMESPACE_MEDIARSS;				}				$cache[$string] = array($namespace, $local_name);			}			else			{				$cache[$string] = array('', $string);			}		}		return $cache[$string];	}}/** * @todo Move to using an actual HTML parser (this will allow tags to be properly stripped, and to switch between HTML and XHTML), this will also make it easier to shorten a string while preserving HTML tags */class SimplePie_Sanitize{	// Private vars	var $base;	// Options	var $remove_div = true;	var $image_handler = '';	var $strip_htmltags = array('base', 'blink', 'body', 'doctype', 'embed', 'font', 'form', 'frame', 'frameset', 'html', 'iframe', 'input', 'marquee', 'meta', 'noscript', 'object', 'param', 'script', 'style');	var $encode_instead_of_strip = false;	var $strip_attributes = array('bgsound', 'class', 'expr', 'id', 'style', 'onclick', 'onerror', 'onfinish', 'onmouseover', 'onmouseout', 'onfocus', 'onblur', 'lowsrc', 'dynsrc');	var $strip_comments = false;	var $output_encoding = 'UTF-8';	var $enable_cache = true;	var $cache_location = './cache';	var $cache_name_function = 'md5';	var $cache_class = 'SimplePie_Cache';	var $file_class = 'SimplePie_File';	var $timeout = 10;	var $useragent = '';	var $force_fsockopen = false;	var $replace_url_attributes = array(		'a' => 'href',		'area' => 'href',		'blockquote' => 'cite',		'del' => 'cite',		'form' => 'action',		'img' => array('longdesc', 'src'),		'input' => 'src',		'ins' => 'cite',		'q' => 'cite'	);	function remove_div($enable = true)	{		$this->remove_div = (bool) $enable;	}	function set_image_handler($page = false)	{		if ($page)		{			$this->image_handler = (string) $page;		}		else		{			$this->image_handler = false;		}	}	function pass_cache_data($enable_cache = true, $cache_location = './cache', $cache_name_function = 'md5', $cache_class = 'SimplePie_Cache')	{		if (isset($enable_cache))		{			$this->enable_cache = (bool) $enable_cache;		}		if ($cache_location)		{			$this->cache_location = (string) $cache_location;		}		if ($cache_name_function)		{			$this->cache_name_function = (string) $cache_name_function;		}		if ($cache_class)		{			$this->cache_class = (string) $cache_class;		}	}	function pass_file_data($file_class = 'SimplePie_File', $timeout = 10, $useragent = '', $force_fsockopen = false)	{		if ($file_class)		{			$this->file_class = (string) $file_class;		}		if ($timeout)		{			$this->timeout = (string) $timeout;		}		if ($useragent)		{			$this->useragent = (string) $useragent;		}		if ($force_fsockopen)		{			$this->force_fsockopen = (string) $force_fsockopen;		}	}	function strip_htmltags($tags = array('base', 'blink', 'body', 'doctype', 'embed', 'font', 'form', 'frame', 'frameset', 'html', 'iframe', 'input', 'marquee', 'meta', 'noscript', 'object', 'param', 'script', 'style'))	{		if ($tags)		{			if (is_array($tags))			{				$this->strip_htmltags = $tags;			}			else			{				$this->strip_htmltags = explode(',', $tags);			}		}		else		{			$this->strip_htmltags = false;		}	}	function encode_instead_of_strip($encode = false)	{		$this->encode_instead_of_strip = (bool) $encode;	}	function strip_attributes($attribs = array('bgsound', 'class', 'expr', 'id', 'style', 'onclick', 'onerror', 'onfinish', 'onmouseover', 'onmouseout', 'onfocus', 'onblur', 'lowsrc', 'dynsrc'))	{		if ($attribs)		{			if (is_array($attribs))			{				$this->strip_attributes = $attribs;			}			else			{				$this->strip_attributes = explode(',', $attribs);			}		}		else		{			$this->strip_attributes = false;		}	}	function strip_comments($strip = false)	{		$this->strip_comments = (bool) $strip;	}	function set_output_encoding($encoding = 'UTF-8')	{		$this->output_encoding = (string) $encoding;	}	/**	 * Set element/attribute key/value pairs of HTML attributes	 * containing URLs that need to be resolved relative to the feed	 *	 * @access public	 * @since 1.0	 * @param array $element_attribute Element/attribute key/value pairs	 */	function set_url_replacements($element_attribute = array('a' => 'href', 'area' => 'href', 'blockquote' => 'cite', 'del' => 'cite', 'form' => 'action', 'img' => array('longdesc', 'src'), 'input' => 'src', 'ins' => 'cite', 'q' => 'cite'))	{		$this->replace_url_attributes = (array) $element_attribute;	}	function sanitize($data, $type, $base = '')	{		$data = trim($data);		if ($data !== '' || $type & SIMPLEPIE_CONSTRUCT_IRI)		{			if ($type & SIMPLEPIE_CONSTRUCT_MAYBE_HTML)			{				if (preg_match('/(&(#(x[0-9a-fA-F]+|[0-9]+)|[a-zA-Z0-9]+)|<\/[A-Za-z][^\x09\x0A\x0B\x0C\x0D\x20\x2F\x3E]*' . SIMPLEPIE_PCRE_HTML_ATTRIBUTE . '>)/', $data))				{					$type |= SIMPLEPIE_CONSTRUCT_HTML;				}				else				{					$type |= SIMPLEPIE_CONSTRUCT_TEXT;				}			}			if ($type & SIMPLEPIE_CONSTRUCT_BASE64)			{				$data = base64_decode($data);			}			if ($type & SIMPLEPIE_CONSTRUCT_XHTML)			{				if ($this->remove_div)				{					$data = preg_replace('/^<div' . SIMPLEPIE_PCRE_XML_ATTRIBUTE . '>/', '', $data);					$data = preg_replace('/<\/div>$/', '', $data);				}				else				{					$data = preg_replace('/^<div' . SIMPLEPIE_PCRE_XML_ATTRIBUTE . '>/', '<div>', $data);				}			}			if ($type & (SIMPLEPIE_CONSTRUCT_HTML | SIMPLEPIE_CONSTRUCT_XHTML))			{				// Strip comments				if ($this->strip_comments)				{					$data = SimplePie_Misc::strip_comments($data);				}				// Strip out HTML tags and attributes that might cause various security problems.				// Based on recommendations by Mark Pilgrim at:				// http://diveintomark.org/archives/2003/06/12/how_to_consume_rss_safely				if ($this->strip_htmltags)				{					foreach ($this->strip_htmltags as $tag)					{						$pcre = "/<($tag)" . SIMPLEPIE_PCRE_HTML_ATTRIBUTE . "(>(.*)<\/$tag" . SIMPLEPIE_PCRE_HTML_ATTRIBUTE . '>|(\/)?>)/siU';						while (preg_match($pcre, $data))						{							$data = preg_replace_callback($pcre, array(&$this, 'do_strip_htmltags'), $data);						}					}				}				if ($this->strip_attributes)				{					foreach ($this->strip_attributes as $attrib)					{						$data = preg_replace('/(<[A-Za-z][^\x09\x0A\x0B\x0C\x0D\x20\x2F\x3E]*)' . SIMPLEPIE_PCRE_HTML_ATTRIBUTE . trim($attrib) . '(?:\s*=\s*(?:"(?:[^"]*)"|\'(?:[^\']*)\'|(?:[^\x09\x0A\x0B\x0C\x0D\x20\x22\x27\x3E][^\x09\x0A\x0B\x0C\x0D\x20\x3E]*)?))?' . SIMPLEPIE_PCRE_HTML_ATTRIBUTE . '>/', '\1\2\3>', $data);					}				}				// Replace relative URLs				$this->base = $base;				foreach ($this->replace_url_attributes as $element => $attributes)				{					$data = $this->replace_urls($data, $element, $attributes);				}				// If image handling (caching, etc.) is enabled, cache and rewrite all the image tags.				if (isset($this->image_handler) && ((string) $this->image_handler) !== '' && $this->enable_cache)				{					$images = SimplePie_Misc::get_element('img', $data);					foreach ($images as $img)					{						if (isset($img['attribs']['src']['data']))						{							$image_url = call_user_func($this->cache_name_function, $img['attribs']['src']['data']);							$cache = call_user_func(array($this->cache_class, 'create'), $this->cache_location, $image_url, 'spi');							if ($cache->load())							{								$img['attribs']['src']['data'] = $this->image_handler . $image_url;								$data = str_replace($img['full'], SimplePie_Misc::element_implode($img), $data);							}							else							{								$file = new $this->file_class($img['attribs']['src']['data'], $this->timeout, 5, array('X-FORWARDED-FOR' => $_SERVER['REMOTE_ADDR']), $this->useragent, $this->force_fsockopen);								$headers = $file->headers;								if ($file->success && ($file->method & SIMPLEPIE_FILE_SOURCE_REMOTE === 0 || ($file->status_code === 200 || $file->status_code > 206 && $file->status_code < 300)))								{									if ($cache->save(array('headers' => $file->headers, 'body' => $file->body)))									{										$img['attribs']['src']['data'] = $this->image_handler . $image_url;										$data = str_replace($img['full'], SimplePie_Misc::element_implode($img), $data);									}									else									{										trigger_error("$this->cache_location is not writeable", E_USER_WARNING);									}								}							}						}					}				}				// Having (possibly) taken stuff out, there may now be whitespace at the beginning/end of the data				$data = trim($data);			}			if ($type & SIMPLEPIE_CONSTRUCT_IRI)			{				$data = SimplePie_Misc::absolutize_url($data, $base);			}			if ($type & (SIMPLEPIE_CONSTRUCT_TEXT | SIMPLEPIE_CONSTRUCT_IRI))			{				$data = htmlspecialchars($data, ENT_COMPAT, 'UTF-8');			}			if ($this->output_encoding !== 'UTF-8')			{				$data = SimplePie_Misc::change_encoding($data, 'UTF-8', $this->output_encoding);			}		}		return $data;	}	function replace_urls($data, $tag, $attributes)	{		if (!is_array($this->strip_htmltags) || !in_array($tag, $this->strip_htmltags))		{			$elements = SimplePie_Misc::get_element($tag, $data);			foreach ($elements as $element)			{				if (is_array($attributes))				{					foreach ($attributes as $attribute)					{						if (isset($element['attribs'][$attribute]['data']))						{							$element['attribs'][$attribute]['data'] = SimplePie_Misc::absolutize_url($element['attribs'][$attribute]['data'], $this->base);							$new_element = SimplePie_Misc::element_implode($element);							$data = str_replace($element['full'], $new_element, $data);							$element['full'] = $new_element;						}					}				}				elseif (isset($element['attribs'][$attributes]['data']))				{					$element['attribs'][$attributes]['data'] = SimplePie_Misc::absolutize_url($element['attribs'][$attributes]['data'], $this->base);					$data = str_replace($element['full'], SimplePie_Misc::element_implode($element), $data);				}			}		}		return $data;	}	function do_strip_htmltags($match)	{		if ($this->encode_instead_of_strip)		{			if (isset($match[4]) && !in_array(strtolower($match[1]), array('script', 'style')))			{				$match[1] = htmlspecialchars($match[1], ENT_COMPAT, 'UTF-8');				$match[2] = htmlspecialchars($match[2], ENT_COMPAT, 'UTF-8');				return "&lt;$match[1]$match[2]&gt;$match[3]&lt;/$match[1]&gt;";			}			else			{				return htmlspecialchars($match[0], ENT_COMPAT, 'UTF-8');			}		}		elseif (isset($match[4]) && !in_array(strtolower($match[1]), array('script', 'style')))		{			return $match[4];		}		else		{			return '';		}	}}?>
<?php/** * @package    Joomla.Cli * * @copyright  Copyright (C) 2005 - 2013 Open Source Matters, Inc. All rights reserved. * @license    GNU General Public License version 2 or later; see LICENSE.txt */// We are a valid entry point.const _JEXEC = 1;// Load system definesif (file_exists(dirname(__DIR__) . '/defines.php')){	require_once dirname(__DIR__) . '/defines.php';}if (!defined('_JDEFINES')){	define('JPATH_BASE', dirname(__DIR__));	require_once JPATH_BASE . '/includes/defines.php';}// Get the framework.require_once JPATH_LIBRARIES . '/import.legacy.php';// Bootstrap the CMS libraries.require_once JPATH_LIBRARIES . '/cms.php';// Configure error reporting to maximum for CLI output.error_reporting(E_ALL);ini_set('display_errors', 1);// Load Library language$lang = JFactory::getLanguage();// Try the files_joomla file in the current language (without allowing the loading of the file in the default language)$lang->load('files_joomla.sys', JPATH_SITE, null, false, false)// Fallback to the files_joomla file in the default language|| $lang->load('files_joomla.sys', JPATH_SITE, null, true);/** * A command line cron job to attempt to remove files that should have been deleted at update. * * @package  Joomla.CLI * @since    3.0 */class DeletefilesCli extends JApplicationCli{	/**	 * Entry point for CLI script	 *	 * @return  void	 *	 * @since   3.0	 */	public function doExecute()	{		// Import the dependencies		jimport('joomla.filesystem.file');		jimport('joomla.filesystem.folder');		// We need the update script		JLoader::register('JoomlaInstallerScript', JPATH_ADMINISTRATOR . '/components/com_admin/script.php');		// Instantiate the class		$class = new JoomlaInstallerScript;		// Run the delete method		$class->deleteUnexistingFiles();	}}// Instantiate the application object, passing the class name to JCli::getInstance// and use chaining to execute the application.JApplicationCli::getInstance('DeletefilesCli')->execute();
<?php/** * @package     Joomla.Site * @subpackage  com_contact * * @copyright   Copyright (C) 2005 - 2013 Open Source Matters, Inc. All rights reserved. * @license     GNU General Public License version 2 or later; see LICENSE.txt */defined('_JEXEC') or die;$cparams = JComponentHelper::getParams('com_media');jimport('joomla.html.html.bootstrap');?><div class="contact<?php echo $this->pageclass_sfx?>">	<?php if ($this->params->get('show_page_heading')) : ?>		<h1>			<?php echo $this->escape($this->params->get('page_heading')); ?>		</h1>	<?php endif; ?>	<?php if ($this->contact->name && $this->params->get('show_name')) : ?>		<div class="page-header">			<h2>				<?php if ($this->item->published == 0) : ?>					<span class="label label-warning"><?php echo JText::_('JUNPUBLISHED'); ?></span>				<?php endif; ?>				<span class="contact-name"><?php echo $this->contact->name; ?></span>			</h2>		</div>	<?php endif;  ?>	<?php if ($this->params->get('show_contact_category') == 'show_no_link') : ?>		<h3>			<span class="contact-category"><?php echo $this->contact->category_title; ?></span>		</h3>	<?php endif; ?>	<?php if ($this->params->get('show_contact_category') == 'show_with_link') : ?>		<?php $contactLink = ContactHelperRoute::getCategoryRoute($this->contact->catid); ?>		<h3>			<span class="contact-category"><a href="<?php echo $contactLink; ?>">				<?php echo $this->escape($this->contact->category_title); ?></a>			</span>		</h3>	<?php endif; ?>	<?php if ($this->params->get('show_contact_list') && count($this->contacts) > 1) : ?>		<form action="#" method="get" name="selectForm" id="selectForm">			<?php echo JText::_('COM_CONTACT_SELECT_CONTACT'); ?>			<?php echo JHtml::_('select.genericlist', $this->contacts, 'id', 'class="inputbox" onchange="document.location.href = this.value"', 'link', 'name', $this->contact->link);?>		</form>	<?php endif; ?>	<?php if ($this->params->get('show_tags', 1) && !empty($this->item->tags)) : ?>		<?php $this->item->tagLayout = new JLayoutFile('joomla.content.tags'); ?>		<?php echo $this->item->tagLayout->render($this->item->tags->itemTags); ?>	<?php endif; ?> 	<?php if ($this->params->get('presentation_style') == 'sliders') : ?>		<?php echo JHtml::_('bootstrap.startAccordion', 'slide-contact', array('active' => 'basic-details')); ?>	<?php endif; ?>	<?php if ($this->params->get('presentation_style') == 'tabs') : ?>		<?php echo JHtml::_('bootstrap.startTabSet', 'myTab', array('active' => 'basic-details')); ?>	<?php endif; ?>	<?php if ($this->params->get('presentation_style') == 'sliders') : ?>		<?php echo JHtml::_('bootstrap.addSlide', 'slide-contact', JText::_('COM_CONTACT_DETAILS'), 'basic-details'); ?>	<?php endif; ?>	<?php if ($this->params->get('presentation_style') == 'tabs') : ?>		<?php echo JHtml::_('bootstrap.addTab', 'myTab', 'basic-details', JText::_('COM_CONTACT_DETAILS', true)); ?>	<?php endif; ?>	<?php if ($this->params->get('presentation_style') == 'plain'):?>		<?php  echo '<h3>'. JText::_('COM_CONTACT_DETAILS').'</h3>';  ?>	<?php endif; ?>	<?php if ($this->contact->image && $this->params->get('show_image')) : ?>		<div class="thumbnail pull-right">			<?php echo JHtml::_('image', $this->contact->image, JText::_('COM_CONTACT_IMAGE_DETAILS'), array('align' => 'middle')); ?>		</div>	<?php endif; ?>	<?php if ($this->contact->con_position && $this->params->get('show_position')) : ?>		<dl class="contact-position dl-horizontal">			<dd>				<?php echo $this->contact->con_position; ?>			</dd>		</dl>	<?php endif; ?>	<?php echo $this->loadTemplate('address'); ?>	<?php if ($this->params->get('allow_vcard')) :	?>		<?php echo JText::_('COM_CONTACT_DOWNLOAD_INFORMATION_AS');?>		<a href="<?php echo JRoute::_('index.php?option=com_contact&amp;view=contact&amp;id='.$this->contact->id . '&amp;format=vcf'); ?>">		<?php echo JText::_('COM_CONTACT_VCARD');?></a>	<?php endif; ?>	<?php if ($this->params->get('presentation_style') == 'sliders') : ?>		<?php echo JHtml::_('bootstrap.endSlide'); ?>	<?php endif; ?>	<?php if ($this->params->get('presentation_style') == 'tabs') : ?>		<?php echo JHtml::_('bootstrap.endTab'); ?>	<?php endif; ?>	<?php if ($this->params->get('show_email_form') && ($this->contact->email_to || $this->contact->user_id)) : ?>		<?php if ($this->params->get('presentation_style') == 'sliders') : ?>			<?php echo JHtml::_('bootstrap.addSlide', 'slide-contact', JText::_('COM_CONTACT_EMAIL_FORM'), 'display-form'); ?>		<?php endif; ?>		<?php if ($this->params->get('presentation_style') == 'tabs') : ?>			<?php echo JHtml::_('bootstrap.addTab', 'myTab', 'display-form', JText::_('COM_CONTACT_EMAIL_FORM', true)); ?>		<?php endif; ?>		<?php if ($this->params->get('presentation_style') == 'plain'):?>			<?php echo '<h3>'. JText::_('COM_CONTACT_EMAIL_FORM').'</h3>';  ?>		<?php endif; ?>		<?php  echo $this->loadTemplate('form');  ?>		<?php if ($this->params->get('presentation_style') == 'sliders') : ?>			<?php echo JHtml::_('bootstrap.endSlide'); ?>		<?php endif; ?>			<?php if ($this->params->get('presentation_style') == 'tabs') : ?>		<?php echo JHtml::_('bootstrap.endTab'); ?>			<?php endif; ?>	<?php endif; ?>	<?php if ($this->params->get('show_links')) : ?>		<?php echo $this->loadTemplate('links'); ?>	<?php endif; ?>	<?php if ($this->params->get('show_articles') && $this->contact->user_id && $this->contact->articles) : ?>		<?php if ($this->params->get('presentation_style') == 'sliders') : ?>			<?php echo JHtml::_('bootstrap.addSlide', 'slide-contact', JText::_('JGLOBAL_ARTICLES'), 'display-articles'); ?>		<?php endif; ?>		<?php if ($this->params->get('presentation_style') == 'tabs') : ?>			<?php echo JHtml::_('bootstrap.addTab', 'myTab', 'display-articles', JText::_('JGLOBAL_ARTICLES', true)); ?>		<?php endif; ?>		<?php if ($this->params->get('presentation_style') == 'plain'):?>			<?php echo '<h3>'. JText::_('JGLOBAL_ARTICLES').'</h3>';  ?>		<?php endif; ?>		<?php echo $this->loadTemplate('articles'); ?>		<?php if ($this->params->get('presentation_style') == 'sliders') : ?>			<?php echo JHtml::_('bootstrap.endSlide'); ?>		<?php endif; ?>		<?php if ($this->params->get('presentation_style') == 'tabs') : ?>			<?php echo JHtml::_('bootstrap.endTab'); ?>		<?php endif; ?>	<?php endif; ?>	<?php if ($this->params->get('show_profile') && $this->contact->user_id && JPluginHelper::isEnabled('user', 'profile')) : ?>		<?php if ($this->params->get('presentation_style') == 'sliders') : ?>			<?php echo JHtml::_('bootstrap.addSlide', 'slide-contact', JText::_('COM_CONTACT_PROFILE'), 'display-profile'); ?>		<?php endif; ?>		<?php if ($this->params->get('presentation_style') == 'tabs') : ?>			<?php echo JHtml::_('bootstrap.addTab', 'myTab', 'display-profile', JText::_('COM_CONTACT_PROFILE', true)); ?>		<?php endif; ?>		<?php if ($this->params->get('presentation_style') == 'plain'):?>			<?php echo '<h3>'. JText::_('COM_CONTACT_PROFILE').'</h3>';  ?>		<?php endif; ?>		<?php echo $this->loadTemplate('profile'); ?>		<?php if ($this->params->get('presentation_style') == 'sliders') : ?>			<?php echo JHtml::_('bootstrap.endSlide'); ?>		<?php endif; ?>		<?php if ($this->params->get('presentation_style') == 'tabs') : ?>			<?php echo JHtml::_('bootstrap.endTab'); ?>		<?php endif; ?>	<?php endif; ?>	<?php if ($this->contact->misc && $this->params->get('show_misc')) : ?>		<?php if ($this->params->get('presentation_style') == 'sliders') : ?>			<?php echo JHtml::_('bootstrap.addSlide', 'slide-contact', JText::_('COM_CONTACT_OTHER_INFORMATION'), 'display-misc'); ?>		<?php endif; ?>		<?php if ($this->params->get('presentation_style') == 'tabs') : ?>			<?php echo JHtml::_('bootstrap.addTab', 'myTab', 'display-misc', JText::_('COM_CONTACT_OTHER_INFORMATION', true)); ?>		<?php endif; ?>		<?php if ($this->params->get('presentation_style') == 'plain'):?>			<?php echo '<h3>'. JText::_('COM_CONTACT_OTHER_INFORMATION').'</h3>';  ?>		<?php endif; ?>		<div class="contact-miscinfo">			<dl class="dl-horizontal">				<dt>					<span class="<?php echo $this->params->get('marker_class'); ?>">					<?php echo $this->params->get('marker_misc'); ?>					</span>				</dt>				<dd>					<span class="contact-misc">						<?php echo $this->contact->misc; ?>					</span>				</dd>			</dl>		</div>		<?php if ($this->params->get('presentation_style') == 'sliders') : ?>			<?php echo JHtml::_('bootstrap.endSlide'); ?>		<?php endif; ?>		<?php if ($this->params->get('presentation_style') == 'tabs') : ?>			<?php echo JHtml::_('bootstrap.endTab'); ?>		<?php endif; ?>	<?php endif; ?>	<?php if ($this->params->get('presentation_style') == 'sliders') : ?>		<?php echo JHtml::_('bootstrap.endAccordion'); ?>	<?php endif; ?>	<?php if ($this->params->get('presentation_style') == 'tabs') : ?>		<?php echo JHtml::_('bootstrap.endTabSet'); ?>	<?php endif; ?></div>
<?php/*** @version $Id$* @package utf8* @subpackage strings*///---------------------------------------------------------------/*** Replacement for str_pad. $padStr may contain multi-byte characters.** @author Oliver Saunders <oliver (a) osinternetservices.com>* @param string $input* @param int $length* @param string $padStr* @param int $type ( same constants as str_pad )* @return string* @see http://www.php.net/str_pad* @see utf8_substr* @package utf8* @subpackage strings*/function utf8_str_pad($input, $length, $padStr = ' ', $type = STR_PAD_RIGHT) {    $inputLen = utf8_strlen($input);    if ($length <= $inputLen) {        return $input;    }    $padStrLen = utf8_strlen($padStr);    $padLen = $length - $inputLen;    if ($type == STR_PAD_RIGHT) {        $repeatTimes = ceil($padLen / $padStrLen);        return utf8_substr($input . str_repeat($padStr, $repeatTimes), 0, $length);    }    if ($type == STR_PAD_LEFT) {        $repeatTimes = ceil($padLen / $padStrLen);        return utf8_substr(str_repeat($padStr, $repeatTimes), 0, floor($padLen)) . $input;    }    if ($type == STR_PAD_BOTH) {        $padLen/= 2;        $padAmountLeft = floor($padLen);        $padAmountRight = ceil($padLen);        $repeatTimesLeft = ceil($padAmountLeft / $padStrLen);        $repeatTimesRight = ceil($padAmountRight / $padStrLen);        $paddingLeft = utf8_substr(str_repeat($padStr, $repeatTimesLeft), 0, $padAmountLeft);        $paddingRight = utf8_substr(str_repeat($padStr, $repeatTimesRight), 0, $padAmountLeft);        return $paddingLeft . $input . $paddingRight;    }    trigger_error('utf8_str_pad: Unknown padding type (' . $type . ')',E_USER_ERROR);}
<?php/** * @package     Joomla.Installation * @subpackage  View * * @copyright   Copyright (C) 2005 - 2013 Open Source Matters, Inc. All rights reserved. * @license     GNU General Public License version 2 or later; see LICENSE.txt */defined('_JEXEC') or die;/** * The Installation Languages View * * @package     Joomla.Installation * @subpackage  View * @since       3.1 */class InstallationViewLanguagesHtml extends JViewHtml{	/**	 * Container with all available languages	 *	 * @var    array	 * @since  3.1	 */	protected $items;	/**	 * Redefine the model so the correct type hinting is available.	 *	 * @var     InstallationModelLanguages	 * @since   3.1	 */	protected $model;	/**	 * Method to render the view.	 *	 * @return  string  The rendered view.	 *	 * @since   3.1	 */	public function render()	{		$this->items = $this->model->getItems();		return parent::render();	}}
<?php/** * @package     Joomla.Site * @subpackage  com_search * * @copyright   Copyright (C) 2005 - 2013 Open Source Matters, Inc. All rights reserved. * @license     GNU General Public License version 2 or later; see LICENSE.txt */defined('_JEXEC') or die;?><?php if ($this->error) : ?><div class="error">			<?php echo $this->escape($this->error); ?></div><?php endif; ?>
<?php/** * @package     Joomla.Legacy * @subpackage  Simplecrypt * * @copyright   Copyright (C) 2005 - 2013 Open Source Matters, Inc. All rights reserved. * @license     GNU General Public License version 2 or later; see LICENSE */defined('JPATH_PLATFORM') or die;/** * JSimpleCrypt is a very simple encryption algorithm for encrypting/decrypting strings * * @package     Joomla.Legacy * @subpackage  Simplecrypt * @since       11.1 * @deprecated  12.3  Use JCrypt instead. */class JSimplecrypt{	/**	 * Encryption/Decryption Key	 *	 * @var         JCrypt	 * @since       12.1	 * @deprecated  12.3  Use JCrypt instead.	 */	private $_crypt;	/**	 * Object Constructor takes an optional key to be used for encryption/decryption. If no key is given then the	 * secret word from the configuration object is used.	 *	 * @param   string  $privateKey  Optional encryption key	 *	 * @since       11.1	 * @deprecated  12.3  Use JCrypt instead.	 */	public function __construct($privateKey = null)	{		JLog::add('JSimpleCrypt is deprecated. Use JCrypt instead.', JLog::WARNING, 'deprecated');		if (empty($privateKey))		{			$privateKey = md5(JFactory::getConfig()->get('secret'));		}		// Build the JCryptKey object.		$key = new JCryptKey('simple', $privateKey, $privateKey);		// Setup the JCrypt object.		$this->_crypt = new JCrypt(new JCryptCipherSimple, $key);	}	/**	 * Decrypt a string	 *	 * @param   string  $s  String to decrypt	 *	 * @return  string	 *	 * @since   11.1	 * @deprecated  12.3  Use JCrypt instead.	 */	public function decrypt($s)	{		return $this->_crypt->decrypt($s);	}	/**	 * Encrypt a string	 *	 * @param   string  $s  String to encrypt	 *	 * @return  string	 *	 * @since   11.1	 * @deprecated  12.3  Use JCrypt instead.	 */	public function encrypt($s)	{		return $this->_crypt->encrypt($s);	}}
<?php/** * @package     Joomla.Site * @subpackage  Templates.beez3 * * @copyright   Copyright (C) 2005 - 2013 Open Source Matters, Inc. All rights reserved. * @license     GNU General Public License version 2 or later; see LICENSE.txt */defined('_JEXEC') or die;$app = JFactory::getApplication();$templateparams = $app->getTemplate(true)->params;JHtml::addIncludePath(JPATH_COMPONENT . '/helpers');$cparams = JComponentHelper::getParams('com_media');// If the page class is defined, add to class as suffix.// It will be a separate class if the user starts it with a space?><section class="blog<?php echo $this->pageclass_sfx;?>"><?php if ($this->params->get('show_page_heading') != 0 or $this->params->get('show_category_title')) : ?><h1>	<?php echo $this->escape($this->params->get('page_heading')); ?>	<?php if ($this->params->get('show_category_title'))	{		echo '<span class="subheading-category">'.$this->category->title.'</span>';	}	?></h1><?php endif; ?><?php if ($this->params->get('show_description', 1) || $this->params->def('show_description_image', 1)) : ?>	<div class="category-desc">	<?php if ($this->params->get('show_description_image') && $this->category->getParams()->get('image')) : ?>		<img src="<?php echo $this->category->getParams()->get('image'); ?>"/>	<?php endif; ?>	<?php if ($this->params->get('show_description') && $this->category->description) : ?>		<?php echo JHtml::_('content.prepare', $this->category->description, '', 'com_content.category'); ?>	<?php endif; ?>	<div class="clr"></div>	</div><?php endif; ?><?php $leadingcount = 0; ?><?php if (!empty($this->lead_items)) : ?><div class="items-leading">	<?php foreach ($this->lead_items as &$item) : ?>		<article class="leading-<?php echo $leadingcount; ?><?php echo $item->state == 0 ? 'system-unpublished' : null; ?>">			<?php				$this->item = &$item;				echo $this->loadTemplate('item');			?>		</article>		<?php			$leadingcount++;		?>	<?php endforeach; ?></div><?php endif; ?><?php	$introcount = (count($this->intro_items));	$counter = 0;?><?php if (!empty($this->intro_items)) : ?>	<?php foreach ($this->intro_items as $key => &$item) : ?>	<?php		$key = ($key - $leadingcount) + 1;		$rowcount = (((int) $key - 1) % (int) $this->columns) + 1;		$row = $counter / $this->columns;		if ($rowcount == 1) : ?>	<div class="items-row cols-<?php echo (int) $this->columns;?> <?php echo 'row-'.$row; ?>">	<?php endif; ?>	<article class="item column-<?php echo $rowcount;?><?php echo $item->state == 0 ? ' system-unpublished' : null; ?>">		<?php			$this->item = &$item;			echo $this->loadTemplate('item');		?>	</article>	<?php $counter++; ?>	<?php if (($rowcount == $this->columns) or ($counter == $introcount)) : ?>				<span class="row-separator"></span>				</div>			<?php endif; ?>	<?php endforeach; ?><?php endif; ?><?php if (!empty($this->link_items)) : ?>	<?php echo $this->loadTemplate('links'); ?><?php endif; ?>  	<div class="cat-children">	<?php if (is_array($this->children[$this->category->id]) && count($this->children[$this->category->id]) > 0 && $this->params->get('maxLevel') != 0) : ?>		<?php if ($this->params->get('show_category_heading_title_text', 1) == 1) : ?>		<h3>			<?php echo JTEXT::_('JGLOBAL_SUBCATEGORIES'); ?>		</h3>		<?php endif; ?>	<?php endif; ?>			<?php echo $this->loadTemplate('children'); ?>		</div><?php if (($this->params->def('show_pagination', 1) == 1  || ($this->params->get('show_pagination') == 2)) && ($this->pagination->pagesTotal > 1)) : ?>		<div class="pagination">						<?php  if ($this->params->def('show_pagination_results', 1)) : ?>						<p class="counter">								<?php echo $this->pagination->getPagesCounter(); ?>						</p>				<?php endif; ?>				<?php echo $this->pagination->getPagesLinks(); ?>		</div><?php  endif; ?></section>
<?php/** * @package     Joomla.Site * @subpackage  Templates.beez3 * * @copyright   Copyright (C) 2005 - 2013 Open Source Matters, Inc. All rights reserved. * @license     GNU General Public License version 2 or later; see LICENSE.txt */defined('_JEXEC') or die;?><h3><?php echo JText::_('COM_CONTENT_MORE_ARTICLES'); ?></h3><ol class="links"><?php foreach ($this->link_items as &$item) : ?>	<li>		<a href="<?php echo JRoute::_(ContentHelperRoute::getArticleRoute($item->slug, $item->catslug)); ?>">			<?php echo $item->title; ?></a>	</li><?php endforeach; ?></ol>
<?php/** * @package     Joomla.Administrator * @subpackage  com_search * * @copyright   Copyright (C) 2005 - 2013 Open Source Matters, Inc. All rights reserved. * @license     GNU General Public License version 2 or later; see LICENSE.txt */defined('_JEXEC') or die;/** * Search master display controller. * * @package     Joomla.Administrator * @subpackage  com_search * @since       1.6 */class SearchController extends JControllerLegacy{	/**	 * @var		string	The default view.	 * @since   1.6	 */	protected $default_view = 'searches';	/**	 * Method to display a view.	 *	 * @param   boolean			If true, the view output will be cached	 * @param   array  An array of safe url parameters and their variable types, for valid values see {@link JFilterInput::clean()}.	 *	 * @return  JController		This object to support chaining.	 * @since   1.5	 */	public function display($cachable = false, $urlparams = false)	{		require_once JPATH_COMPONENT.'/helpers/search.php';		// Load the submenu.		SearchHelper::addSubmenu($this->input->get('view', 'searches'));		parent::display();	}}
<?php/** * @package     Joomla.Platform * @subpackage  Database * * @copyright   Copyright (C) 2005 - 2013 Open Source Matters, Inc. All rights reserved. * @license     GNU General Public License version 2 or later; see LICENSE */defined('JPATH_PLATFORM') or die;/** * Query Building Class. * * @package     Joomla.Platform * @subpackage  Database * @since       11.1 */class JDatabaseQueryMysql extends JDatabaseQueryMysqli{}
<?php/** * @package     Joomla.Site * @subpackage  mod_footer * * @copyright   Copyright (C) 2005 - 2013 Open Source Matters, Inc. All rights reserved. * @license     GNU General Public License version 2 or later; see LICENSE.txt */defined('_JEXEC') or die;$app		= JFactory::getApplication();$date		= JFactory::getDate();$cur_year	= $date->format('Y');$csite_name	= $app->getCfg('sitename');if (JString::strpos(JText :: _('MOD_FOOTER_LINE1'), '%date%')){	$line1 = str_replace('%date%', $cur_year, JText :: _('MOD_FOOTER_LINE1'));}else {	$line1 = JText :: _('MOD_FOOTER_LINE1');}if (JString::strpos($line1, '%sitename%')){	$lineone = str_replace('%sitename%', $csite_name, $line1);}else {	$lineone = $line1;}$moduleclass_sfx = htmlspecialchars($params->get('moduleclass_sfx'));require JModuleHelper::getLayoutPath('mod_footer', $params->get('layout', 'default'));
<?php/** * @package     Joomla.Legacy * @subpackage  Database * * @copyright   Copyright (C) 2005 - 2013 Open Source Matters, Inc. All rights reserved. * @license     GNU General Public License version 2 or later; see LICENSE */defined('JPATH_PLATFORM') or die;JLog::add('JDatabaseMysqli is deprecated, use JDatabaseDriverMysqli instead.', JLog::WARNING, 'deprecated');/** * MySQLi database driver * * @package     Joomla.Legacy * @subpackage  Database * @see         http://php.net/manual/en/book.mysqli.php * @since       11.1 * @deprecated  13.1 Use JDatabaseDriverMysqli instead. */class JDatabaseMysqli extends JDatabaseDriverMysqli{}
<?php/** * @package     Joomla.Platform * @subpackage  Data * * @copyright   Copyright (C) 2005 - 2013 Open Source Matters, Inc. All rights reserved * @license     GNU General Public License version 2 or later; see LICENSE */defined('JPATH_PLATFORM') or die;/** * JData is a class that is used to store data but allowing you to access the data * by mimicking the way PHP handles class properties. * * @package     Joomla.Platform * @subpackage  Data * @since       12.3 */class JData implements JDataDumpable, IteratorAggregate, JsonSerializable, Countable{	/**	 * The data properties.	 *	 * @var    array	 * @since  12.3	 */	private $_properties = array();	/**	 * The class constructor.	 *	 * @param   mixed  $properties  Either an associative array or another object	 *                              by which to set the initial properties of the new object.	 *	 * @since   11.1	 * @throws  InvalidArgumentException	 */	public function __construct($properties = array())	{		// Check the properties input.		if (!empty($properties))		{			// Bind the properties.			$this->bind($properties);		}	}	/**	 * The magic get method is used to get a data property.	 *	 * This method is a public proxy for the protected getProperty method.	 *	 * Note: Magic __get does not allow recursive calls. This can be tricky because the error generated by recursing into	 * __get is "Undefined property:  {CLASS}::{PROPERTY}" which is misleading. This is relevant for this class because	 * requesting a non-visible property can trigger a call to a sub-function. If that references the property directly in	 * the object, it will cause a recursion into __get.	 *	 * @param   string  $property  The name of the data property.	 *	 * @return  mixed  The value of the data property, or null if the data property does not exist.	 *	 * @see     JData::getProperty()	 * @since   12.3	 */	public function __get($property)	{		return $this->getProperty($property);	}	/**	 * The magic isset method is used to check the state of an object property.	 *	 * @param   string  $property  The name of the data property.	 *	 * @return  boolean  True if set, otherwise false is returned.	 *	 * @since   12.3	 */	public function __isset($property)	{		return isset($this->_properties[$property]);	}	/**	 * The magic set method is used to set a data property.	 *	 * This is a public proxy for the protected setProperty method.	 *	 * @param   string  $property  The name of the data property.	 * @param   mixed   $value     The value to give the data property.	 *	 * @return  void	 *	 * @see     JData::setProperty()	 * @since   12.3	 */	public function __set($property, $value)	{		$this->setProperty($property, $value);	}	/**	 * The magic unset method is used to unset a data property.	 *	 * @param   string  $property  The name of the data property.	 *	 * @return  void	 *	 * @since   12.3	 */	public function __unset($property)	{		unset($this->_properties[$property]);	}	/**	 * Binds an array or object to this object.	 *	 * @param   mixed    $properties   An associative array of properties or an object.	 * @param   boolean  $updateNulls  True to bind null values, false to ignore null values.	 *	 * @return  JData  Returns itself to allow chaining.	 *	 * @since   12.3	 * @throws  InvalidArgumentException	 */	public function bind($properties, $updateNulls = true)	{		// Check the properties data type.		if (!is_array($properties) && !is_object($properties))		{			throw new InvalidArgumentException(sprintf('%s(%s)', __METHOD__, gettype($properties)));		}		// Check if the object is traversable.		if ($properties instanceof Traversable)		{			// Convert iterator to array.			$properties = iterator_to_array($properties);		}		// Check if the object needs to be converted to an array.		elseif (is_object($properties))		{			// Convert properties to an array.			$properties = (array) $properties;		}		// Bind the properties.		foreach ($properties as $property => $value)		{			// Check if the value is null and should be bound.			if ($value === null && !$updateNulls)			{				continue;			}			// Set the property.			$this->setProperty($property, $value);		}		return $this;	}	/**	 * Dumps the data properties into a stdClass object, recursively if appropriate.	 *	 * @param   integer           $depth   The maximum depth of recursion (default = 3).	 *                                     For example, a depth of 0 will return a stdClass with all the properties in native	 *                                     form. A depth of 1 will recurse into the first level of properties only.	 * @param   SplObjectStorage  $dumped  An array of already serialized objects that is used to avoid infinite loops.	 *	 * @return  stdClass  The data properties as a simple PHP stdClass object.	 *	 * @since   12.3	 */	public function dump($depth = 3, SplObjectStorage $dumped = null)	{		// Check if we should initialise the recursion tracker.		if ($dumped === null)		{			$dumped = new SplObjectStorage;		}		// Add this object to the dumped stack.		$dumped->attach($this);		// Setup a container.		$dump = new stdClass;		// Dump all object properties.		foreach (array_keys($this->_properties) as $property)		{			// Get the property.			$dump->$property = $this->dumpProperty($property, $depth, $dumped);		}		return $dump;	}	/**	 * Gets this object represented as an ArrayIterator.	 *	 * This allows the data properties to be access via a foreach statement.	 *	 * @return  ArrayIterator  This object represented as an ArrayIterator.	 *	 * @see     IteratorAggregate::getIterator()	 * @since   12.3	 */	public function getIterator()	{		return new ArrayIterator($this->dump(0));	}	/**	 * Gets the data properties in a form that can be serialised to JSON format.	 *	 * @return  string  An object that can be serialised by json_encode().	 *	 * @since   12.3	 */	public function jsonSerialize()	{		return $this->dump();	}	/**	 * Dumps a data property.	 *	 * If recursion is set, this method will dump any object implementing JDumpable (like JData and JDataSet); it will	 * convert a JDate object to a string; and it will convert a JRegistry to an object.	 *	 * @param   string            $property  The name of the data property.	 * @param   integer           $depth     The current depth of recursion (a value of 0 will ignore recursion).	 * @param   SplObjectStorage  $dumped    An array of already serialized objects that is used to avoid infinite loops.	 *	 * @return  mixed  The value of the dumped property.	 *	 * @since   12.3	 */	protected function dumpProperty($property, $depth, SplObjectStorage $dumped)	{		$value = $this->getProperty($property);		if ($depth > 0)		{			// Check if the object is also an dumpable object.			if ($value instanceof JDataDumpable)			{				// Do not dump the property if it has already been dumped.				if (!$dumped->contains($value))				{					$value = $value->dump($depth - 1, $dumped);				}			}			// Check if the object is a date.			if ($value instanceof JDate)			{				$value = (string) $value;			}			// Check if the object is a registry.			elseif ($value instanceof JRegistry)			{				$value = $value->toObject();			}		}		return $value;	}	/**	 * Gets a data property.	 *	 * @param   string  $property  The name of the data property.	 *	 * @return  mixed  The value of the data property.	 *	 * @see     JData::__get()	 * @since   12.3	 */	protected function getProperty($property)	{		// Get the raw value.		$value = array_key_exists($property, $this->_properties) ? $this->_properties[$property] : null;		return $value;	}	/**	 * Sets a data property.	 *	 * If the name of the property starts with a null byte, this method will return null.	 *	 * @param   string  $property  The name of the data property.	 * @param   mixed   $value     The value to give the data property.	 *	 * @return  mixed  The value of the data property.	 *	 * @see     JData::__set()	 * @since   12.3	 */	protected function setProperty($property, $value)	{		/*		 * Check if the property starts with a null byte. If so, discard it because a later attempt to try to access it		 * can cause a fatal error. See http://us3.php.net/manual/en/language.types.array.php#language.types.array.casting		 */		if (strpos($property, "\0") === 0)		{			return null;		}		// Set the value.		$this->_properties[$property] = $value;		return $value;	}	/**	 * Count the number of data properties.	 *	 * @return  integer  The number of data properties.	 *	 * @since   12.3	 */	public function count()	{		return count($this->_properties);	}}
<?php/** * @package     Joomla.Platform * @subpackage  Google * * @copyright   Copyright (C) 2005 - 2013 Open Source Matters, Inc. All rights reserved * @license     GNU General Public License version 2 or later; see LICENSE */defined('JPATH_PLATFORM') or die;/** * Google Picasa data class for the Joomla Platform. * * @package     Joomla.Platform * @subpackage  Google * @since       12.3 */class JGoogleDataPicasa extends JGoogleData{	/**	 * Constructor.	 *	 * @param   JRegistry    $options  Google options object	 * @param   JGoogleAuth  $auth     Google data http client object	 *	 * @since   12.3	 */	public function __construct(JRegistry $options = null, JGoogleAuth $auth = null)	{		parent::__construct($options, $auth);		if (isset($this->auth) && !$this->auth->getOption('scope'))		{			$this->auth->setOption('scope', 'https://picasaweb.google.com/data/');		}	}	/**	 * Method to retrieve a list of Picasa Albums	 *	 * @param   string  $userID  ID of user	 *	 * @return  mixed  Data from Google	 *	 * @since   12.3	 * @throws UnexpectedValueException	 */	public function listAlbums($userID = 'default')	{		if ($this->isAuthenticated())		{			$url = 'https://picasaweb.google.com/data/feed/api/user/' . urlencode($userID);			$jdata = $this->query($url, null, array('GData-Version' => 2));			$xml = $this->safeXML($jdata->body);			if (isset($xml->children()->entry))			{				$items = array();				foreach ($xml->children()->entry as $item)				{					$items[] = new JGoogleDataPicasaAlbum($item, $this->options, $this->auth);				}				return $items;			}			else			{				throw new UnexpectedValueException("Unexpected data received from Google: `{$jdata->body}`.");			}		}		else		{			return false;		}	}	/**	 * Method to create a Picasa Album	 *	 * @param   string  $userID    ID of user	 * @param   string  $title     New album title	 * @param   string  $access    New album access settings	 * @param   string  $summary   New album summary	 * @param   string  $location  New album location	 * @param   int     $time      New album timestamp	 * @param   array   $keywords  New album keywords	 *	 * @return  mixed  Data from Google.	 *	 * @since   12.3	 */	public function createAlbum($userID = 'default', $title = '', $access = 'private', $summary = '', $location = '', $time = false, $keywords = array())	{		if ($this->isAuthenticated())		{			$time = $time ? $time : time();			$title = $title != '' ? $title : date('F j, Y');			$xml = new SimpleXMLElement('<entry></entry>');			$xml->addAttribute('xmlns', 'http://www.w3.org/2005/Atom');			$xml->addChild('title', $title);			$xml->addChild('summary', $summary);			$xml->addChild('gphoto:location', $location, 'http://schemas.google.com/photos/2007');			$xml->addChild('gphoto:access', $access);			$xml->addChild('gphoto:timestamp', $time);			$media = $xml->addChild('media:group', '', 'http://search.yahoo.com/mrss/');			$media->addChild('media:keywords', implode($keywords, ', '));			$cat = $xml->addChild('category', '');			$cat->addAttribute('scheme', 'http://schemas.google.com/g/2005#kind');			$cat->addAttribute('term', 'http://schemas.google.com/photos/2007#album');			$url = 'https://picasaweb.google.com/data/feed/api/user/' . urlencode($userID);			$jdata = $this->query($url, $xml->asXML(), array('GData-Version' => 2, 'Content-type' => 'application/atom+xml'), 'post');			$xml = $this->safeXML($jdata->body);			return new JGoogleDataPicasaAlbum($xml, $this->options, $this->auth);		}		else		{			return false;		}	}	/**	 * Get Picasa Album	 *	 * @param   string  $url  URL of album to get	 *	 * @return  mixed  Data from Google	 *	 * @since   12.3	 * @throws UnexpectedValueException	 */	public function getAlbum($url)	{		if ($this->isAuthenticated())		{			$jdata = $this->query($url, null, array('GData-Version' => 2));			$xml = $this->safeXML($jdata->body);			return new JGoogleDataPicasaAlbum($xml, $this->options, $this->auth);		}		else		{			return false;		}	}}
<?php/** * @package     Joomla.Platform * @subpackage  GitHub * * @copyright   Copyright (C) 2005 - 2013 Open Source Matters, Inc. All rights reserved. * @license     GNU General Public License version 2 or later; see LICENSE */defined('JPATH_PLATFORM') or die;/** * GitHub API References class for the Joomla Platform. * * @package     Joomla.Platform * @subpackage  GitHub * @since       11.3 */class JGithubRefs extends JGithubObject{	/**	 * Method to create an issue.	 *	 * @param   string  $user  The name of the owner of the GitHub repository.	 * @param   string  $repo  The name of the GitHub repository.	 * @param   string  $ref   The name of the fully qualified reference.	 * @param   string  $sha   The SHA1 value to set this reference to.	 *	 * @return  object	 *	 * @since   11.3	 */	public function create($user, $repo, $ref, $sha)	{		// Build the request path.		$path = '/repos/' . $user . '/' . $repo . '/git/refs';		// Build the request data.		$data = json_encode(			array(				'ref' => $ref,				'sha' => $sha			)		);		// Send the request.		$response = $this->client->post($this->fetchUrl($path), $data);		// Validate the response code.		if ($response->code != 201)		{			// Decode the error response and throw an exception.			$error = json_decode($response->body);			throw new DomainException($error->message, $response->code);		}		return json_decode($response->body);	}	/**	 * Method to update a reference.	 *	 * @param   string  $user   The name of the owner of the GitHub repository.	 * @param   string  $repo   The name of the GitHub repository.	 * @param   string  $ref    The reference to update.	 * @param   string  $sha    The SHA1 value to set the reference to.	 * @param   string  $force  Whether the update should be forced. Default to false.	 *	 * @return  object	 *	 * @since   11.3	 */	public function edit($user, $repo, $ref, $sha, $force = false)	{		// Build the request path.		$path = '/repos/' . $user . '/' . $repo . '/git/refs/' . $ref;		// Craete the data object.		$data = new stdClass;		// If a title is set add it to the data object.		if ($force)		{			$data->force = true;		}		$data->sha = $sha;		// Encode the request data.		$data = json_encode($data);		// Send the request.		$response = $this->client->patch($this->fetchUrl($path), $data);		// Validate the response code.		if ($response->code != 200)		{			// Decode the error response and throw an exception.			$error = json_decode($response->body);			throw new DomainException($error->message, $response->code);		}		return json_decode($response->body);	}	/**	 * Method to get a reference.	 *	 * @param   string  $user  The name of the owner of the GitHub repository.	 * @param   string  $repo  The name of the GitHub repository.	 * @param   string  $ref   The reference to get.	 *	 * @return  object	 *	 * @since   11.3	 */	public function get($user, $repo, $ref)	{		// Build the request path.		$path = '/repos/' . $user . '/' . $repo . '/git/refs/' . $ref;		// Send the request.		$response = $this->client->get($this->fetchUrl($path));		// Validate the response code.		if ($response->code != 200)		{			// Decode the error response and throw an exception.			$error = json_decode($response->body);			throw new DomainException($error->message, $response->code);		}		return json_decode($response->body);	}	/**	 * Method to list references for a repository.	 *	 * @param   string   $user       The name of the owner of the GitHub repository.	 * @param   string   $repo       The name of the GitHub repository.	 * @param   string   $namespace  Optional sub-namespace to limit the returned references.	 * @param   integer  $page       Page to request	 * @param   integer  $limit      Number of results to return per page	 *	 * @return  array	 *	 * @since   11.3	 */	public function getList($user, $repo, $namespace = '', $page = 0, $limit = 0)	{		// Build the request path.		$path = '/repos/' . $user . '/' . $repo . '/git/refs' . $namespace;		// Send the request.		$response = $this->client->get($this->fetchUrl($path, $page, $limit));		// Validate the response code.		if ($response->code != 200)		{			// Decode the error response and throw an exception.			$error = json_decode($response->body);			throw new DomainException($error->message, $response->code);		}		return json_decode($response->body);	}}
<?php/** * @package     Joomla.Administrator * @subpackage  com_config * * @copyright   Copyright (C) 2005 - 2013 Open Source Matters, Inc. All rights reserved. * @license     GNU General Public License version 2 or later; see LICENSE.txt */defined('_JEXEC') or die;?><ul class="nav nav-list">	<?php		if ($this->userIsSuperAdmin):	?>	<li class="nav-header"><?php echo JText::_('COM_CONFIG_SYSTEM'); ?></li>	<li class="active"><a href="index.php?option=com_config"><?php echo JText::_('COM_CONFIG_GLOBAL_CONFIGURATION'); ?></a></li>	<li class="divider"></li>	<?php		endif;	?>	<li class="nav-header"><?php echo JText::_('COM_CONFIG_COMPONENT_FIELDSET_LABEL'); ?></li>	<?php		foreach ($this->components as $component) :	?>		<li><a href="index.php?option=com_config&view=component&component=<?php echo $component; ?>"><?php echo JText::_($component); ?></a></li>	<?php		endforeach;	?></ul>
<?php/** * @package     Joomla.Administrator * @subpackage  com_cache * * @copyright   Copyright (C) 2005 - 2013 Open Source Matters, Inc. All rights reserved. * @license     GNU General Public License version 2 or later; see LICENSE.txt */defined('_JEXEC') or die;/** * HTML View class for the Cache component * * @package     Joomla.Administrator * @subpackage  com_cache * @since       1.6 */class CacheViewPurge extends JViewLegacy{	public function display($tpl = null)	{		$this->addToolbar();		$this->sidebar = JHtmlSidebar::render();		parent::display($tpl);	}	/**	 * Add the page title and toolbar.	 *	 * @since   1.6	 */	protected function addToolbar()	{		//JHtmlSidebar::addEntry(JText::_('COM_CACHE_BACK_CACHE_MANAGER'), 'index.php?option=com_cache', false);		JToolbarHelper::title(JText::_('COM_CACHE_PURGE_EXPIRED_CACHE'), 'purge.png');		JToolbarHelper::custom('purge', 'delete.png', 'delete_f2.png', 'COM_CACHE_PURGE_EXPIRED', false);		JToolbarHelper::divider();		if (JFactory::getUser()->authorise('core.admin', 'com_cache'))		{			JToolbarHelper::preferences('com_cache');			JToolbarHelper::divider();		}		JToolbarHelper::help('JHELP_SITE_MAINTENANCE_PURGE_EXPIRED_CACHE');	}}
<?php/** * @package     Joomla.Site * @subpackage  Layout * * @copyright   Copyright (C) 2005 - 2013 Open Source Matters, Inc. All rights reserved. * @license     GNU General Public License version 2 or later; see LICENSE.txt */defined('_JEXEC') or die;$id      = empty($displayData['id']) ? '' : (' id="' . $displayData['id'] . '"');$target  = empty($displayData['target']) ? '' : (' target="' . $displayData['target'] . '"');$onclick = empty($displayData['onclick']) ? '' : (' onclick="' . $displayData['onclick'] . '"');$title   = empty($displayData['title']) ? '' : (' title="' . $this->escape($displayData['title']) . '"');$text    = empty($displayData['text']) ? '' : ('<span>' . $displayData['text'] . '</span>')?><div class="row-fluid"<?php echo $id; ?>>	<div class="span12">		<a href="<?php echo $displayData['link']; ?>"<?php echo $target . $onclick . $title; ?>>			<i class="icon-<?php echo $displayData['image']; ?>"></i> <?php echo $text; ?>		</a>	</div></div>
<?php/** * @package     Joomla.Administrator * @subpackage  com_config * * @copyright   Copyright (C) 2005 - 2013 Open Source Matters, Inc. All rights reserved. * @license     GNU General Public License version 2 or later; see LICENSE.txt */defined('_JEXEC') or die;?><fieldset title="<?php echo JText::_('COM_CONFIG_FTP_DETAILS'); ?>" class="form-horizontal">	<legend><?php echo JText::_('COM_CONFIG_FTP_DETAILS'); ?></legend>	<?php echo JText::_('COM_CONFIG_FTP_DETAILS_TIP'); ?>	<?php if ($this->ftp instanceof Exception) : ?>		<p><?php echo JText::_($this->ftp->message); ?></p>	<?php endif; ?>	<div class="control-group">		<div class="control-label"><label for="username"><?php echo JText::_('JGLOBAL_USERNAME'); ?></label></div>		<div class="controls"><input type="text" id="username" name="username" class="input_box" size="70" value="" /></div>	</div>	<div class="control-group">		<div class="control-label"><?php echo JText::_('JGLOBAL_PASSWORD'); ?></div>		<div class="controls"><input type="password" id="password" name="password" class="input_box" size="70" value="" /></div>	</div></fieldset>
<?php/** * @package     Joomla.Plugin * @subpackage  System.Highlight * * @copyright   Copyright (C) 2005 - 2013 Open Source Matters, Inc. All rights reserved. * @license     GNU General Public License version 2 or later; see LICENSE */defined('JPATH_BASE') or die;/** * System plugin to highlight terms. * * @package     Joomla.Plugin * @subpackage  System.Highlight * @since       2.5 */class PlgSystemHighlight extends JPlugin{	/**	 * Method to catch the onAfterDispatch event.	 *	 * This is where we setup the click-through content highlighting for.	 * The highlighting is done with JavaScript so we just	 * need to check a few parameters and the JHtml behavior will do the rest.	 *	 * @return  boolean  True on success	 *	 * @since   2.5	 */	public function onAfterDispatch()	{		// Check that we are in the site application.		if (JFactory::getApplication()->isAdmin())		{			return true;		}		// Set the variables		$input = JFactory::getApplication()->input;		$extension = $input->get('option', '', 'cmd');		// Check if the highlighter is enabled.		if (!JComponentHelper::getParams($extension)->get('highlight_terms', 1))		{			return true;		}		// Check if the highlighter should be activated in this environment.		if (JFactory::getDocument()->getType() !== 'html' || $input->get('tmpl', '', 'cmd') === 'component')		{			return true;		}		// Get the terms to highlight from the request.		$terms = $input->request->get('highlight', null, 'base64');		$terms = $terms ? json_decode(base64_decode($terms)) : null;		// Check the terms.		if (empty($terms))		{			return true;		}		// Clean the terms array		$filter = JFilterInput::getInstance();		$cleanTerms = array();		foreach ($terms as $term)		{			$cleanTerms[] = htmlspecialchars($filter->clean($term, 'string'));		}		// Activate the highlighter.		JHtml::_('behavior.highlighter', $cleanTerms);		// Adjust the component buffer.		$doc = JFactory::getDocument();		$buf = $doc->getBuffer('component');		$buf = '<br id="highlighter-start" />' . $buf . '<br id="highlighter-end" />';		$doc->setBuffer($buf, 'component');		return true;	}}
<?php/** * @package     Joomla.Administrator * @subpackage  com_redirect * * @copyright   Copyright (C) 2005 - 2013 Open Source Matters, Inc. All rights reserved. * @license     GNU General Public License version 2 or later; see LICENSE.txt */defined('_JEXEC') or die;/** * Redirect link controller class. * * @package     Joomla.Administrator * @subpackage  com_redirect * @since       1.6 */class RedirectControllerLink extends JControllerForm{	// Parent class access checks are sufficient for this controller.}
<?php/** * @package     Joomla.Administrator * @subpackage  com_login * * @copyright   Copyright (C) 2005 - 2013 Open Source Matters, Inc. All rights reserved. * @license     GNU General Public License version 2 or later; see LICENSE.txt */defined('_JEXEC') or die;JHtml::_('behavior.noframes');// Get the login modules// If you want to use a completely different login module change the value of name// in your layout override.$loginmodule = LoginModelLogin::getLoginModule('mod_login');echo JModuleHelper::renderModule($loginmodule, array('style' => 'rounded', 'id' => 'section-box'));//Get any other modules in the login position.//If you want to use a different position for the modules, change the name here in your override.$modules = JModuleHelper::getModules('login');foreach ($modules as $module)// Render the login modulesif ($module->module != 'mod_login'){	echo JModuleHelper::renderModule($module, array('style' => 'rounded', 'id' => 'section-box'));}
<?php/** * @package     Joomla.Site * @subpackage  mod_menu * * @copyright   Copyright (C) 2005 - 2013 Open Source Matters, Inc. All rights reserved. * @license     GNU General Public License version 2 or later; see LICENSE.txt */defined('_JEXEC') or die;// Include the syndicate functions only oncerequire_once __DIR__ . '/helper.php';$list		= ModMenuHelper::getList($params);$base		= ModMenuHelper::getBase($params);$active		= ModMenuHelper::getActive($params);$active_id 	= $active->id;$path		= $base->tree;$showAll	= $params->get('showAllChildren');$class_sfx	= htmlspecialchars($params->get('class_sfx'));if (count($list)){	require JModuleHelper::getLayoutPath('mod_menu', $params->get('layout', 'default'));}
<?php/** * @package     Joomla.Administrator * @subpackage  com_media * * @copyright   Copyright (C) 2005 - 2013 Open Source Matters, Inc. All rights reserved. * @license     GNU General Public License version 2 or later; see LICENSE.txt */defined('_JEXEC') or die;$params = new JRegistry;$dispatcher	= JEventDispatcher::getInstance();$dispatcher->trigger('onContentBeforeDisplay', array('com_media.file', &$this->_tmp_img, &$params));?><li class="imgOutline thumbnail height-80 width-80 center">	<a class="img-preview" href="javascript:ImageManager.populateFields('<?php echo $this->_tmp_img->path_relative; ?>')" title="<?php echo $this->_tmp_img->name; ?>" >		<div class="height-50">			<?php echo JHtml::_('image', $this->baseURL . '/' . $this->_tmp_img->path_relative, JText::sprintf('COM_MEDIA_IMAGE_TITLE', $this->_tmp_img->title, JHtml::_('number.bytes', $this->_tmp_img->size)), array('width' => $this->_tmp_img->width_60, 'height' => $this->_tmp_img->height_60)); ?>		</div>		<div class="small">			<?php echo JHtml::_('string.truncate', $this->_tmp_img->name, 10, false); ?>		</div>	</a></li><?php$dispatcher->trigger('onContentAfterDisplay', array('com_media.file', &$this->_tmp_img, &$params));?>
<?php/** * @package     Joomla.Installation * @subpackage  View * * @copyright   Copyright (C) 2005 - 2013 Open Source Matters, Inc. All rights reserved. * @license     GNU General Public License version 2 or later; see LICENSE.txt */defined('_JEXEC') or die;/* @var InstallationViewDefault $this */?><?php echo JHtml::_('installation.stepbar'); ?><form action="index.php" method="post" id="adminForm" class="form-validate form-horizontal">	<div class="btn-toolbar">		<div class="btn-group pull-right">			<a class="btn" href="#" onclick="return Install.goToPage('site');" rel="prev" title="<?php echo JText::_('JPrevious'); ?>"><i class="icon-arrow-left"></i> <?php echo JText::_('JPrevious'); ?></a>			<a  class="btn btn-primary" href="#" onclick="Install.submitform();" rel="next" title="<?php echo JText::_('JNext'); ?>"><i class="icon-arrow-right icon-white"></i> <?php echo JText::_('JNext'); ?></a>		</div>	</div>	<h3><?php echo JText::_('INSTL_DATABASE'); ?></h3>	<hr class="hr-condensed" />	<div class="control-group">		<div class="control-label">			<?php echo $this->form->getLabel('db_type'); ?>		</div>		<div class="controls">			<?php echo $this->form->getInput('db_type'); ?>			<p class="help-block">				<?php echo JText::_('INSTL_DATABASE_TYPE_DESC'); ?>			</p>		</div>	</div>	<div class="control-group">		<div class="control-label">			<?php echo $this->form->getLabel('db_host'); ?>		</div>		<div class="controls">			<?php echo $this->form->getInput('db_host'); ?>			<p class="help-block">				<?php echo JText::_('INSTL_DATABASE_HOST_DESC'); ?>			</p>		</div>	</div>	<div class="control-group">		<div class="control-label">			<?php echo $this->form->getLabel('db_user'); ?>		</div>		<div class="controls">			<?php echo $this->form->getInput('db_user'); ?>			<p class="help-block">				<?php echo JText::_('INSTL_DATABASE_USER_DESC'); ?>			</p>		</div>	</div>	<div class="control-group">		<div class="control-label">			<?php echo $this->form->getLabel('db_pass'); ?>		</div>		<div class="controls">			<?php echo $this->form->getInput('db_pass'); ?>			<p class="help-block">				<?php echo JText::_('INSTL_DATABASE_PASSWORD_DESC'); ?>			</p>		</div>	</div>	<div class="control-group">		<div class="control-label">			<?php echo $this->form->getLabel('db_name'); ?>		</div>		<div class="controls">			<?php echo $this->form->getInput('db_name'); ?>			<p class="help-block">				<?php echo JText::_('INSTL_DATABASE_NAME_DESC'); ?>			</p>		</div>	</div>	<div class="control-group">		<div class="control-label">			<?php echo $this->form->getLabel('db_prefix'); ?>		</div>		<div class="controls">			<?php echo $this->form->getInput('db_prefix'); ?>			<p class="help-block">				<?php echo JText::_('INSTL_DATABASE_PREFIX_DESC'); ?>			</p>		</div>	</div>	<div class="control-group">		<div class="control-label">			<?php echo $this->form->getLabel('db_old'); ?>		</div>		<div class="controls">			<?php echo $this->form->getInput('db_old'); ?>			<p class="help-block">				<?php echo JText::_('INSTL_DATABASE_OLD_PROCESS_DESC'); ?>			</p>		</div>	</div>	<input type="hidden" name="task" value="database" />	<?php echo JHtml::_('form.token'); ?></form>
<?php/** * @package     Joomla.Administrator * @subpackage  com_weblinks * * @copyright   Copyright (C) 2005 - 2013 Open Source Matters, Inc. All rights reserved. * @license     GNU General Public License version 2 or later; see LICENSE.txt */defined('_JEXEC') or die;/** * Weblinks Weblink Controller * * @package     Joomla.Administrator * @subpackage  com_weblinks * @since       1.5 */class WeblinksController extends JControllerLegacy{	/**	 * Method to display a view.	 *	 * @param   boolean			$cachable	If true, the view output will be cached	 * @param   array  $urlparams	An array of safe url parameters and their variable types, for valid values see {@link JFilterInput::clean()}.	 *	 * @return  JController		This object to support chaining.	 * @since   1.5	 */	public function display($cachable = false, $urlparams = false)	{		require_once JPATH_COMPONENT.'/helpers/weblinks.php';		$view   = $this->input->get('view', 'weblinks');		$layout = $this->input->get('layout', 'default');		$id     = $this->input->getInt('id');		// Check for edit form.		if ($view == 'weblink' && $layout == 'edit' && !$this->checkEditId('com_weblinks.edit.weblink', $id))		{			// Somehow the person just went to the form - we don't allow that.			$this->setError(JText::sprintf('JLIB_APPLICATION_ERROR_UNHELD_ID', $id));			$this->setMessage($this->getError(), 'error');			$this->setRedirect(JRoute::_('index.php?option=com_weblinks&view=weblinks', false));			return false;		}		parent::display();		return $this;	}}
<?php/** * @package     Joomla.Administrator * @subpackage  Template.system * * @copyright   Copyright (C) 2005 - 2013 Open Source Matters, Inc. All rights reserved. * @license     GNU General Public License version 2 or later; see LICENSE.txt */defined('_JEXEC') or die;?><!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.0 Transitional//EN" "http://www.w3.org/TR/xhtml1/DTD/xhtml1-transitional.dtd"><html xmlns="http://www.w3.org/1999/xhtml" xml:lang="<?php echo $this->language; ?>" lang="<?php echo $this->language; ?>" dir="<?php echo $this->direction; ?>"><head>	<jdoc:include type="head" /></head><body class="contentpane">	<jdoc:include type="message" />	<jdoc:include type="component" /></body></html>
<?php/** * @package     Joomla.Site * @subpackage  Template.system * * @copyright   Copyright (C) 2005 - 2013 Open Source Matters, Inc. All rights reserved. * @license     GNU General Public License version 2 or later; see LICENSE.txt */defined('_JEXEC') or die;$app = JFactory::getApplication();?><!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.0 Transitional//EN" "http://www.w3.org/TR/xhtml1/DTD/xhtml1-transitional.dtd"><html xmlns="http://www.w3.org/1999/xhtml" xml:lang="<?php echo $this->language; ?>" lang="<?php echo $this->language; ?>" dir="<?php echo $this->direction; ?>"><head>	<jdoc:include type="head" />	<link rel="stylesheet" href="<?php echo $this->baseurl ?>/templates/system/css/offline.css" type="text/css" />	<?php if ($this->direction == 'rtl') : ?>	<link rel="stylesheet" href="<?php echo $this->baseurl ?>/templates/system/css/offline_rtl.css" type="text/css" />	<?php endif; ?>	<link rel="stylesheet" href="<?php echo $this->baseurl ?>/templates/system/css/general.css" type="text/css" /></head><body><jdoc:include type="message" />	<div id="frame" class="outline">		<?php if ($app->getCfg('offline_image')) : ?>		<img src="<?php echo $app->getCfg('offline_image'); ?>" alt="<?php echo htmlspecialchars($app->getCfg('sitename')); ?>" />		<?php endif; ?>		<h1>			<?php echo htmlspecialchars($app->getCfg('sitename')); ?>		</h1>	<?php if ($app->getCfg('display_offline_message', 1) == 1 && str_replace(' ', '', $app->getCfg('offline_message')) != '') : ?>		<p>			<?php echo $app->getCfg('offline_message'); ?>		</p>	<?php elseif ($app->getCfg('display_offline_message', 1) == 2 && str_replace(' ', '', JText::_('JOFFLINE_MESSAGE')) != '') : ?>		<p>			<?php echo JText::_('JOFFLINE_MESSAGE'); ?>		</p>	<?php  endif; ?>	<form action="<?php echo JRoute::_('index.php', true); ?>" method="post" id="form-login">	<fieldset class="input">		<p id="form-login-username">			<label for="username"><?php echo JText::_('JGLOBAL_USERNAME') ?></label>			<input name="username" id="username" type="text" class="inputbox" alt="<?php echo JText::_('JGLOBAL_USERNAME') ?>" size="18" />		</p>		<p id="form-login-password">			<label for="passwd"><?php echo JText::_('JGLOBAL_PASSWORD') ?></label>			<input type="password" name="password" class="inputbox" size="18" alt="<?php echo JText::_('JGLOBAL_PASSWORD') ?>" id="passwd" />		</p>		<p id="form-login-remember">			<label for="remember"><?php echo JText::_('JGLOBAL_REMEMBER_ME') ?></label>			<input type="checkbox" name="remember" class="inputbox" value="yes" alt="<?php echo JText::_('JGLOBAL_REMEMBER_ME') ?>" id="remember" />		</p>		<input type="submit" name="Submit" class="button" value="<?php echo JText::_('JLOGIN') ?>" />		<input type="hidden" name="option" value="com_users" />		<input type="hidden" name="task" value="user.login" />		<input type="hidden" name="return" value="<?php echo base64_encode(JURI::base()) ?>" />		<?php echo JHtml::_('form.token'); ?>	</fieldset>	</form>	</div></body></html>
<?php/** * @package    Joomla.Installation * * @copyright  Copyright (C) 2005 - 2013 Open Source Matters, Inc. All rights reserved. * @license    GNU General Public License version 2 or later; see LICENSE.txt */defined('_JEXEC') or die;/** * Joomla Installation Database Helper Class. * * @package  Joomla.Installation * @since    1.6 */abstract class InstallationHelperDatabase{	/**	 * Method to get a JDatabaseDriver object.	 *	 * @param   string   $driver    The database driver to use.	 * @param   string   $host      The hostname to connect on.	 * @param   string   $user      The user name to connect with.	 * @param   string   $password  The password to use for connection authentication.	 * @param   string   $database  The database to use.	 * @param   string   $prefix    The table prefix to use.	 * @param   boolean  $select    True if the database should be selected.	 *	 * @return  JDatabaseDriver	 *	 * @since   1.6	 */	public static function getDBO($driver, $host, $user, $password, $database, $prefix, $select = true)	{		static $db;		if (!$db)		{			// Build the connection options array.			$options = array(				'driver' => $driver,				'host' => $host,				'user' => $user,				'password' => $password,				'database' => $database,				'prefix' => $prefix,				'select' => $select			);			// Get a database object.			$db = JDatabaseDriver::getInstance($options);		}		return $db;	}}
<?php/** * @package     Joomla.Site * @subpackage  com_tags * * @copyright   Copyright (C) 2005 - 2013 Open Source Matters, Inc. All rights reserved. * @license     GNU General Public License version 2 or later; see LICENSE.txt */defined('_JEXEC') or die;// Note that there are certain parts of this layout used only when there is exactly one tag.JHtml::addIncludePath(JPATH_COMPONENT.'/helpers');$description = $this->params->get('all_tags_description');$descriptionImage = $this->params->get('all_tags_description_image');?><div class="tag-category<?php echo $this->pageclass_sfx; ?>">	<?php  if ($this->state->get('show_page_heading')) : ?>		<h1>		<?php echo $this->escape($this->params->get('page_heading')); ?>		</h1>	<?php endif;?>	<?php if ($this->params->get('all_tags_show_description_image') && !empty($descriptionImage)):?>		<div><?php echo '<img src="' . $descriptionImage . '">';?></div>	<?php endif;?>	<?php if (!empty($description)):?>		<div><?php echo $description;?></div>	<?php endif;?>	<?php echo $this->loadTemplate('items'); ?></div>
<?php/** * @package     Joomla.Administrator * @subpackage  com_plugins * * @copyright   Copyright (C) 2005 - 2013 Open Source Matters, Inc. All rights reserved. * @license     GNU General Public License version 2 or later; see LICENSE.txt */defined('_JEXEC') or die;/** * View class for a list of plugins. * * @package     Joomla.Administrator * @subpackage  com_plugins * @since       1.5 */class PluginsViewPlugins extends JViewLegacy{	protected $items;	protected $pagination;	protected $state;	/**	 * Display the view	 */	public function display($tpl = null)	{		$this->items      = $this->get('Items');		$this->pagination = $this->get('Pagination');		$this->state      = $this->get('State');		// Check for errors.		if (count($errors = $this->get('Errors')))		{			JError::raiseError(500, implode("\n", $errors));			return false;		}		// Check if there are no matching items		if (!count($this->items))		{			JFactory::getApplication()->enqueueMessage(				JText::_('COM_PLUGINS_MSG_MANAGE_NO_PLUGINS'),				'warning'			);		}		$this->addToolbar();		parent::display($tpl);	}	/**	 * Add the page title and toolbar.	 *	 * @since   1.6	 */	protected function addToolbar()	{		$canDo = PluginsHelper::getActions();		JToolbarHelper::title(JText::_('COM_PLUGINS_MANAGER_PLUGINS'), 'plugin');		if ($canDo->get('core.edit'))		{			JToolbarHelper::editList('plugin.edit');		}		if ($canDo->get('core.edit.state'))		{			JToolbarHelper::publish('plugins.publish', 'JTOOLBAR_ENABLE', true);			JToolbarHelper::unpublish('plugins.unpublish', 'JTOOLBAR_DISABLE', true);			JToolbarHelper::checkin('plugins.checkin');		}		if ($canDo->get('core.admin'))		{			JToolbarHelper::preferences('com_plugins');		}		JToolbarHelper::help('JHELP_EXTENSIONS_PLUGIN_MANAGER');		JHtmlSidebar::setAction('index.php?option=com_plugins&view=plugins');		JHtmlSidebar::addFilter(				JText::_('JOPTION_SELECT_PUBLISHED'),				'filter_enabled',				JHtml::_('select.options', PluginsHelper::publishedOptions(), 'value', 'text', $this->state->get('filter.enabled'), true)		);		JHtmlSidebar::addFilter(				JText::_('COM_PLUGINS_OPTION_FOLDER'),				'filter_folder',				JHtml::_('select.options', PluginsHelper::folderOptions(), 'value', 'text', $this->state->get('filter.folder'))		);		JHtmlSidebar::addFilter(				JText::_('JOPTION_SELECT_ACCESS'),				'filter_access',				JHtml::_('select.options', JHtml::_('access.assetgroups'), 'value', 'text', $this->state->get('filter.access'))		);		$this->sidebar = JHtmlSidebar::render();	}	/**	 * Returns an array of fields the table can be sorted by	 *	 * @return  array  Array containing the field name to sort by as the key and display text as value	 *	 * @since   3.0	 */	protected function getSortFields()	{		return array(				'ordering' => JText::_('JGRID_HEADING_ORDERING'),				'a.state' => JText::_('JSTATUS'),				'name' => JText::_('JGLOBAL_TITLE'),				'folder' => JText::_('COM_PLUGINS_FOLDER_HEADING'),				'element' => JText::_('COM_PLUGINS_ELEMENT_HEADING'),				'access' => JText::_('JGRID_HEADING_ACCESS'),				'extension_id' => JText::_('JGRID_HEADING_ID')		);	}}
<?php/** * @package     Joomla.Administrator * @subpackage  com_banners * * @copyright   Copyright (C) 2005 - 2013 Open Source Matters, Inc. All rights reserved. * @license     GNU General Public License version 2 or later; see LICENSE.txt */defined('JPATH_BASE') or die;/** * Supports an HTML select list of banners * * @package     Joomla.Administrator * @subpackage  com_banners * @since       1.6 */class JFormFieldOrdering extends JFormField{	/**	 * The form field type.	 *	 * @var		string	 * @since   1.6	 */	protected $type = 'Ordering';	/**	 * Method to get the field input markup.	 *	 * @return  string	The field input markup.	 * @since   1.6	 */	protected function getInput()	{		$html = array();		$attr = '';		// Initialize some field attributes.		$attr .= $this->element['class'] ? ' class="'.(string) $this->element['class'].'"' : '';		$attr .= ((string) $this->element['disabled'] == 'true') ? ' disabled="disabled"' : '';		$attr .= $this->element['size'] ? ' size="'.(int) $this->element['size'].'"' : '';		// Initialize JavaScript field attributes.		$attr .= $this->element['onchange'] ? ' onchange="'.(string) $this->element['onchange'].'"' : '';		// Get some field values from the form.		$bannerId	= (int) $this->form->getValue('id');		$categoryId	= (int) $this->form->getValue('catid');		// Build the query for the ordering list.		$query = 'SELECT ordering AS value, name AS text' .				' FROM #__banners' .				' WHERE catid = ' . (int) $categoryId .				' ORDER BY ordering';		// Create a read-only list (no name) with a hidden input to store the value.		if ((string) $this->element['readonly'] == 'true')		{			$html[] = JHtml::_('list.ordering', '', $query, trim($attr), $this->value, $bannerId ? 0 : 1);			$html[] = '<input type="hidden" name="'.$this->name.'" value="'.$this->value.'"/>';		}		// Create a regular list.		else {			$html[] = JHtml::_('list.ordering', $this->name, $query, trim($attr), $this->value, $bannerId ? 0 : 1);		}		return implode($html);	}}
<?php/** * @package     Joomla.Platform * @subpackage  Access * * @copyright   Copyright (C) 2005 - 2013 Open Source Matters, Inc. All rights reserved. * @license     GNU General Public License version 2 or later; see LICENSE */defined('JPATH_PLATFORM') or die;/** * JAccessRule class. * * @package     Joomla.Platform * @subpackage  Access * @since       11.4 */class JAccessRule{	/**	 * A named array	 *	 * @var    array	 * @since  11.1	 */	protected $data = array();	/**	 * Constructor.	 *	 * The input array must be in the form: array(-42 => true, 3 => true, 4 => false)	 * or an equivalent JSON encoded string.	 *	 * @param   mixed  $identities  A JSON format string (probably from the database) or a named array.	 *	 * @since   11.1	 */	public function __construct($identities)	{		// Convert string input to an array.		if (is_string($identities))		{			$identities = json_decode($identities, true);		}		$this->mergeIdentities($identities);	}	/**	 * Get the data for the action.	 *	 * @return  array  A named array	 *	 * @since   11.1	 */	public function getData()	{		return $this->data;	}	/**	 * Merges the identities	 *	 * @param   mixed  $identities  An integer or array of integers representing the identities to check.	 *	 * @return  void	 *	 * @since   11.1	 */	public function mergeIdentities($identities)	{		if ($identities instanceof JAccessRule)		{			$identities = $identities->getData();		}		if (is_array($identities))		{			foreach ($identities as $identity => $allow)			{				$this->mergeIdentity($identity, $allow);			}		}	}	/**	 * Merges the values for an identity.	 *	 * @param   integer  $identity  The identity.	 * @param   boolean  $allow     The value for the identity (true == allow, false == deny).	 *	 * @return  void	 *	 * @since   11.1	 */	public function mergeIdentity($identity, $allow)	{		$identity = (int) $identity;		$allow = (int) ((boolean) $allow);		// Check that the identity exists.		if (isset($this->data[$identity]))		{			// Explicit deny always wins a merge.			if ($this->data[$identity] !== 0)			{				$this->data[$identity] = $allow;			}		}		else		{			$this->data[$identity] = $allow;		}	}	/**	 * Checks that this action can be performed by an identity.	 *	 * The identity is an integer where +ve represents a user group,	 * and -ve represents a user.	 *	 * @param   mixed  $identities  An integer or array of integers representing the identities to check.	 *	 * @return  mixed  True if allowed, false for an explicit deny, null for an implicit deny.	 *	 * @since   11.1	 */	public function allow($identities)	{		// Implicit deny by default.		$result = null;		// Check that the inputs are valid.		if (!empty($identities))		{			if (!is_array($identities))			{				$identities = array($identities);			}			foreach ($identities as $identity)			{				// Technically the identity just needs to be unique.				$identity = (int) $identity;				// Check if the identity is known.				if (isset($this->data[$identity]))				{					$result = (boolean) $this->data[$identity];					// An explicit deny wins.					if ($result === false)					{						break;					}				}			}		}		return $result;	}	/**	 * Convert this object into a JSON encoded string.	 *	 * @return  string  JSON encoded string	 *	 * @since   11.1	 */	public function __toString()	{		return json_encode($this->data);	}}
<?php/** * @package     Joomla.Platform * @subpackage  Environment * * @copyright   Copyright (C) 2005 - 2013 Open Source Matters, Inc. All rights reserved. * @license     GNU General Public License version 2 or later; see LICENSE */defined('JPATH_PLATFORM') or die;/** * Browser class, provides capability information about the current web client. * * Browser identification is performed by examining the HTTP_USER_AGENT * environment variable provided by the web server. * * This class has many influences from the lib/Browser.php code in * version 3 of Horde by Chuck Hagenbuch and Jon Parise. * * @package     Joomla.Platform * @subpackage  Environment * @since       11.1 */class JBrowser{	/**	 * @var    integer  Major version number	 * @since  12.1	 */	protected $majorVersion = 0;	/**	 * @var    integer  Minor version number	 * @since  12.1	 */	protected $minorVersion = 0;	/**	 * @var    string  Browser name.	 * @since  12.1	 */	protected $browser = '';	/**	 * @var    string  Full user agent string.	 * @since  12.1	 */	protected $agent = '';	/**	 * @var    string  Lower-case user agent string	 * @since  12.1	 */	protected $lowerAgent = '';	/**	 * @var    string  HTTP_ACCEPT string.	 * @since  12.1	 */	protected $accept = '';	/**	 * @var    array  Parsed HTTP_ACCEPT string	 * @since  12.1	 */	protected $acceptParsed = array();	/**	 * @var    string  Platform the browser is running on	 * @since  12.1	 */	protected $platform = '';	/**	 * @var    array  Known robots.	 * @since  12.1	 */	protected $robots = array(		/* The most common ones. */		'Googlebot',		'msnbot',		'Slurp',		'Yahoo',		/* The rest alphabetically. */		'Arachnoidea',		'ArchitextSpider',		'Ask Jeeves',		'B-l-i-t-z-Bot',		'Baiduspider',		'BecomeBot',		'cfetch',		'ConveraCrawler',		'ExtractorPro',		'FAST-WebCrawler',		'FDSE robot',		'fido',		'geckobot',		'Gigabot',		'Girafabot',		'grub-client',		'Gulliver',		'HTTrack',		'ia_archiver',		'InfoSeek',		'kinjabot',		'KIT-Fireball',		'larbin',		'LEIA',		'lmspider',		'Lycos_Spider',		'Mediapartners-Google',		'MuscatFerret',		'NaverBot',		'OmniExplorer_Bot',		'polybot',		'Pompos',		'Scooter',		'Teoma',		'TheSuBot',		'TurnitinBot',		'Ultraseek',		'ViolaBot',		'webbandit',		'www.almaden.ibm.com/cs/crawler',		'ZyBorg');	/**	 * @var    boolean  Is this a mobile browser?	 * @since  12.1	 */	protected $mobile = false;	/**	 * List of viewable image MIME subtypes.	 * This list of viewable images works for IE and Netscape/Mozilla.	 *	 * @var    array	 * @since  12.1	 */	protected $images = array('jpeg', 'gif', 'png', 'pjpeg', 'x-png', 'bmp');	/**	 * @var    array  JBrowser instances container.	 * @since  11.3	 */	protected static $instances = array();	/**	 * Create a browser instance (constructor).	 *	 * @param   string  $userAgent  The browser string to parse.	 * @param   string  $accept     The HTTP_ACCEPT settings to use.	 *	 * @since   11.1	 */	public function __construct($userAgent = null, $accept = null)	{		$this->match($userAgent, $accept);	}	/**	 * Returns the global Browser object, only creating it	 * if it doesn't already exist.	 *	 * @param   string  $userAgent  The browser string to parse.	 * @param   string  $accept     The HTTP_ACCEPT settings to use.	 *	 * @return JBrowser  The Browser object.	 *	 * @since  11.1	 */	static public function getInstance($userAgent = null, $accept = null)	{		$signature = serialize(array($userAgent, $accept));		if (empty(self::$instances[$signature]))		{			self::$instances[$signature] = new JBrowser($userAgent, $accept);		}		return self::$instances[$signature];	}	/**	 * Parses the user agent string and inititializes the object with	 * all the known features and quirks for the given browser.	 *	 * @param   string  $userAgent  The browser string to parse.	 * @param   string  $accept     The HTTP_ACCEPT settings to use.	 *	 * @return  void	 *	 * @since   11.1	 */	public function match($userAgent = null, $accept = null)	{		// Set our agent string.		if (is_null($userAgent))		{			if (isset($_SERVER['HTTP_USER_AGENT']))			{				$this->agent = trim($_SERVER['HTTP_USER_AGENT']);			}		}		else		{			$this->agent = $userAgent;		}		$this->lowerAgent = strtolower($this->agent);		// Set our accept string.		if (is_null($accept))		{			if (isset($_SERVER['HTTP_ACCEPT']))			{				$this->accept = strtolower(trim($_SERVER['HTTP_ACCEPT']));			}		}		else		{			$this->accept = strtolower($accept);		}		if (!empty($this->agent))		{			$this->_setPlatform();			if (strpos($this->lowerAgent, 'mobileexplorer') !== false				|| strpos($this->lowerAgent, 'openwave') !== false				|| strpos($this->lowerAgent, 'opera mini') !== false				|| strpos($this->lowerAgent, 'opera mobi') !== false				|| strpos($this->lowerAgent, 'operamini') !== false)			{				$this->mobile = true;			}			elseif (preg_match('|Opera[/ ]([0-9.]+)|', $this->agent, $version))			{				$this->setBrowser('opera');				list ($this->majorVersion, $this->minorVersion) = explode('.', $version[1]);				/* Due to changes in Opera UA, we need to check Version/xx.yy,				 * but only if version is > 9.80. See: http://dev.opera.com/articles/view/opera-ua-string-changes/ */				if ($this->majorVersion == 9 && $this->minorVersion >= 80)				{					$this->identifyBrowserVersion();				}			}			elseif (preg_match('|Chrome[/ ]([0-9.]+)|', $this->agent, $version))			{				$this->setBrowser('chrome');				list ($this->majorVersion, $this->minorVersion) = explode('.', $version[1]);			}			elseif (preg_match('|CrMo[/ ]([0-9.]+)|', $this->agent, $version))			{				$this->setBrowser('chrome');				list ($this->majorVersion, $this->minorVersion) = explode('.', $version[1]);			}			elseif (strpos($this->lowerAgent, 'elaine/') !== false				|| strpos($this->lowerAgent, 'palmsource') !== false				|| strpos($this->lowerAgent, 'digital paths') !== false)			{				$this->setBrowser('palm');				$this->mobile = true;			}			elseif ((preg_match('|MSIE ([0-9.]+)|', $this->agent, $version)) || (preg_match('|Internet Explorer/([0-9.]+)|', $this->agent, $version)))			{				$this->setBrowser('msie');				if (strpos($version[1], '.') !== false)				{					list ($this->majorVersion, $this->minorVersion) = explode('.', $version[1]);				}				else				{					$this->majorVersion = $version[1];					$this->minorVersion = 0;				}				/* Some Handhelds have their screen resolution in the				 * user agent string, which we can use to look for				 * mobile agents.				 */				if (preg_match('/; (120x160|240x280|240x320|320x320)\)/', $this->agent))				{					$this->mobile = true;				}			}			elseif (preg_match('|amaya/([0-9.]+)|', $this->agent, $version))			{				$this->setBrowser('amaya');				$this->majorVersion = $version[1];				if (isset($version[2]))				{					$this->minorVersion = $version[2];				}			}			elseif (preg_match('|ANTFresco/([0-9]+)|', $this->agent, $version))			{				$this->setBrowser('fresco');			}			elseif (strpos($this->lowerAgent, 'avantgo') !== false)			{				$this->setBrowser('avantgo');				$this->mobile = true;			}			elseif (preg_match('|Konqueror/([0-9]+)|', $this->agent, $version) || preg_match('|Safari/([0-9]+)\.?([0-9]+)?|', $this->agent, $version))			{				// Konqueror and Apple's Safari both use the KHTML				// rendering engine.				$this->setBrowser('konqueror');				$this->majorVersion = $version[1];				if (isset($version[2]))				{					$this->minorVersion = $version[2];				}				if (strpos($this->agent, 'Safari') !== false && $this->majorVersion >= 60)				{					// Safari.					$this->setBrowser('safari');					$this->identifyBrowserVersion();				}			}			elseif (preg_match('|Mozilla/([0-9.]+)|', $this->agent, $version))			{				$this->setBrowser('mozilla');				list ($this->majorVersion, $this->minorVersion) = explode('.', $version[1]);			}			elseif (preg_match('|Lynx/([0-9]+)|', $this->agent, $version))			{				$this->setBrowser('lynx');			}			elseif (preg_match('|Links \(([0-9]+)|', $this->agent, $version))			{				$this->setBrowser('links');			}			elseif (preg_match('|HotJava/([0-9]+)|', $this->agent, $version))			{				$this->setBrowser('hotjava');			}			elseif (strpos($this->agent, 'UP/') !== false || strpos($this->agent, 'UP.B') !== false || strpos($this->agent, 'UP.L') !== false)			{				$this->setBrowser('up');				$this->mobile = true;			}			elseif (strpos($this->agent, 'Xiino/') !== false)			{				$this->setBrowser('xiino');				$this->mobile = true;			}			elseif (strpos($this->agent, 'Palmscape/') !== false)			{				$this->setBrowser('palmscape');				$this->mobile = true;			}			elseif (strpos($this->agent, 'Nokia') !== false)			{				$this->setBrowser('nokia');				$this->mobile = true;			}			elseif (strpos($this->agent, 'Ericsson') !== false)			{				$this->setBrowser('ericsson');				$this->mobile = true;			}			elseif (strpos($this->lowerAgent, 'wap') !== false)			{				$this->setBrowser('wap');				$this->mobile = true;			}			elseif (strpos($this->lowerAgent, 'docomo') !== false || strpos($this->lowerAgent, 'portalmmm') !== false)			{				$this->setBrowser('imode');				$this->mobile = true;			}			elseif (strpos($this->agent, 'BlackBerry') !== false)			{				$this->setBrowser('blackberry');				$this->mobile = true;			}			elseif (strpos($this->agent, 'MOT-') !== false)			{				$this->setBrowser('motorola');				$this->mobile = true;			}			elseif (strpos($this->lowerAgent, 'j-') !== false)			{				$this->setBrowser('mml');				$this->mobile = true;			}		}	}	/**	 * Match the platform of the browser.	 *	 * This is a pretty simplistic implementation, but it's intended	 * to let us tell what line breaks to send, so it's good enough	 * for its purpose.	 *	 * @return  void	 *	 * @since   11.1	 */	protected function _setPlatform()	{		if (strpos($this->lowerAgent, 'wind') !== false)		{			$this->platform = 'win';		}		elseif (strpos($this->lowerAgent, 'mac') !== false)		{			$this->platform = 'mac';		}		else		{			$this->platform = 'unix';		}	}	/**	 * Return the currently matched platform.	 *	 * @return  string  The user's platform.	 *	 * @since   11.1	 */	public function getPlatform()	{		return $this->platform;	}	/**	 * Set browser version, not by engine version	 * Fallback to use when no other method identify the engine version	 *	 * @return void	 */	protected function identifyBrowserVersion()	{		if (preg_match('|Version[/ ]([0-9.]+)|', $this->agent, $version))		{			list ($this->majorVersion, $this->minorVersion) = explode('.', $version[1]);			return;		}		// Can't identify browser version		$this->majorVersion = 0;		$this->minorVersion = 0;		JLog::add("Can't identify browser version. Agent: " . $this->agent, JLog::NOTICE);	}	/**	 * Sets the current browser.	 *	 * @param   string  $browser  The browser to set as current.	 *	 * @return  void	 *	 * @since   11.1	 */	public function setBrowser($browser)	{		$this->browser = $browser;	}	/**	 * Retrieve the current browser.	 *	 * @return  string  The current browser.	 *	 * @since   11.1	 */	public function getBrowser()	{		return $this->browser;	}	/**	 * Retrieve the current browser's major version.	 *	 * @return  integer  The current browser's major version	 *	 * @since   11.1.	 */	public function getMajor()	{		return $this->majorVersion;	}	/**	 * Retrieve the current browser's minor version.	 *	 * @return  integer  The current browser's minor version.	 *	 * @since   11.1	 */	public function getMinor()	{		return $this->minorVersion;	}	/**	 * Retrieve the current browser's version.	 *	 * @return  string  The current browser's version.	 *	 * @since   11.1	 */	public function getVersion()	{		return $this->majorVersion . '.' . $this->minorVersion;	}	/**	 * Return the full browser agent string.	 *	 * @return  string  The browser agent string	 *	 * @since   11.1	 */	public function getAgentString()	{		return $this->agent;	}	/**	 * Returns the server protocol in use on the current server.	 *	 * @return  string  The HTTP server protocol version.	 *	 * @since   11.1	 */	public function getHTTPProtocol()	{		if (isset($_SERVER['SERVER_PROTOCOL']))		{			if (($pos = strrpos($_SERVER['SERVER_PROTOCOL'], '/')))			{				return substr($_SERVER['SERVER_PROTOCOL'], $pos + 1);			}		}		return null;	}	/**	 * Determines if a browser can display a given MIME type.	 *	 * Note that  image/jpeg and image/pjpeg *appear* to be the same	 * entity, but Mozilla doesn't seem to want to accept the latter.	 * For our purposes, we will treat them the same.	 *	 * @param   string  $mimetype  The MIME type to check.	 *	 * @return  boolean  True if the browser can display the MIME type.	 *	 * @since   11.1	 */	public function isViewable($mimetype)	{		$mimetype = strtolower($mimetype);		list ($type, $subtype) = explode('/', $mimetype);		if (!empty($this->accept))		{			$wildcard_match = false;			if (strpos($this->accept, $mimetype) !== false)			{				return true;			}			if (strpos($this->accept, '*/*') !== false)			{				$wildcard_match = true;				if ($type != 'image')				{					return true;				}			}			// Deal with Mozilla pjpeg/jpeg issue			if ($this->isBrowser('mozilla') && ($mimetype == 'image/pjpeg') && (strpos($this->accept, 'image/jpeg') !== false))			{				return true;			}			if (!$wildcard_match)			{				return false;			}		}		if (!$this->hasFeature('images') || ($type != 'image'))		{			return false;		}		return (in_array($subtype, $this->images));	}	/**	 * Determine if the given browser is the same as the current.	 *	 * @param   string  $browser  The browser to check.	 *	 * @return  boolean  Is the given browser the same as the current?	 *	 * @since   11.1	 */	public function isBrowser($browser)	{		return ($this->browser === $browser);	}	/**	 * Determines if the browser is a robot or not.	 *	 * @return  boolean  True if browser is a known robot.	 *	 * @since   11.1	 */	public function isRobot()	{		foreach ($this->robots as $robot)		{			if (strpos($this->agent, $robot) !== false)			{				return true;			}		}		return false;	}	/**	 * Determines if the browser is mobile version or not.	 *	 * @return boolean  True if browser is a known mobile version.	 *	 * @since   11.1	 */	public function isMobile()	{		return $this->mobile;	}	/**	 * Determine if we are using a secure (SSL) connection.	 *	 * @return  boolean  True if using SSL, false if not.	 *	 * @since   11.1	 * @deprecated  13.3  Use the isSSLConnection method on the application object.	 */	public function isSSLConnection()	{		JLog::add('JBrowser::isSSLConnection() is deprecated. Use the isSSLConnection method on the application object instead.',			JLog::WARNING, 'deprecated');		return ((isset($_SERVER['HTTPS']) && ($_SERVER['HTTPS'] == 'on')) || getenv('SSL_PROTOCOL_VERSION'));	}}
<?php/** * @package     Joomla.Installation * @subpackage  Application * * @copyright   Copyright (C) 2005 - 2013 Open Source Matters, Inc. All rights reserved. * @license     GNU General Public License version 2 or later; see LICENSE.txt */defined('_JEXEC') or die;/* * Joomla! Installation Application Defines */// Global definitions$parts = explode(DIRECTORY_SEPARATOR, JPATH_BASE);array_pop($parts);// Definesdefine('JPATH_ROOT',           implode(DIRECTORY_SEPARATOR, $parts));define('JPATH_SITE',           JPATH_ROOT);define('JPATH_CONFIGURATION',  JPATH_ROOT);define('JPATH_ADMINISTRATOR',  JPATH_ROOT . '/administrator');define('JPATH_LIBRARIES',      JPATH_ROOT . '/libraries');define('JPATH_PLUGINS',        JPATH_ROOT . '/plugins');define('JPATH_INSTALLATION',   JPATH_ROOT . '/installation');define('JPATH_THEMES',         JPATH_BASE);define('JPATH_CACHE',          JPATH_BASE . '/cache');define('JPATH_MANIFESTS',      JPATH_ADMINISTRATOR . '/manifests');
<?php/** * @package     Joomla.Site * @subpackage  mod_finder * * @copyright   Copyright (C) 2005 - 2013 Open Source Matters, Inc. All rights reserved. * @license     GNU General Public License version 2 or later; see LICENSE.txt */defined('_JEXEC') or die;/** * Finder module helper. * * @package     Joomla.Site * @subpackage  mod_finder * @since       2.5 */class ModFinderHelper{	/**	 * Method to get hidden input fields for a get form so that control variables	 * are not lost upon form submission.	 *	 * @param   string  $route  The route to the page. [optional]	 *	 * @return  string  A string of hidden input form fields	 *	 * @since   2.5	 */	public static function getGetFields($route = null)	{		$fields = null;		$uri = JUri::getInstance(JRoute::_($route));		$uri->delVar('q');		$elements = $uri->getQuery(true);		// Create hidden input elements for each part of the URI.		// Add the current menu id if it doesn't have one		$needId = true;		foreach ($elements as $n => $v)		{			$fields .= '<input type="hidden" name="' . $n . '" value="' . $v . '" />';			if ($n == 'Itemid')			{				$needId = false;			}		}		if ($needId)		{			$fields .= '<input type="hidden" name="Itemid" value="' . JFactory::getApplication()->input->get('Itemid', '0', 'int') . '" />';		}		return $fields;	}	/**	 * Get Smart Search query object.	 *	 * @param   JRegistry object containing module parameters.	 *	 * @return  FinderIndexerQuery object	 *	 * @since   2.5	 */	public static function getQuery($params)	{		$app = JFactory::getApplication();		$input = $app->input;		$request = $input->request;		$filter = JFilterInput::getInstance();		// Get the static taxonomy filters.		$options = array();		$options['filter'] = ($request->get('f', 0, 'int') != 0) ? $request->get('f', '', 'int') : $params->get('searchfilter');		$options['filter'] = $filter->clean($options['filter'], 'int');		// Get the dynamic taxonomy filters.		$options['filters'] = $request->get('t', '', 'array');		$options['filters'] = $filter->clean($options['filters'], 'array');		JArrayHelper::toInteger($options['filters']);		// Instantiate a query object.		$query = new FinderIndexerQuery($options);		return $query;	}}
<?php/** * @package     Joomla.Legacy * @subpackage  Application * * @copyright   Copyright (C) 2005 - 2013 Open Source Matters, Inc. All rights reserved. * @license     GNU General Public License version 2 or later; see LICENSE */defined('JPATH_PLATFORM') or die;/** * Deprecated class placeholder. You should use JApplicationWebClient instead. * * @package     Joomla.Legacy * @subpackage  Application * @since       11.3 * @deprecated  12.3 */class JWebClient extends JApplicationWebClient{	/**	 * Class constructor.	 *	 * @param   mixed  $userAgent       The optional user-agent string to parse.	 * @param   mixed  $acceptEncoding  The optional client accept encoding string to parse.	 * @param   mixed  $acceptLanguage  The optional client accept language string to parse.	 *	 * @since   11.3	 */	public function __construct($userAgent = null, $acceptEncoding = null, $acceptLanguage = null)	{		JLog::add('JWebClient is deprecated. Use JApplicationWebClient instead.', JLog::WARNING, 'deprecated');		parent::__construct($userAgent, $acceptEncoding, $acceptLanguage);	}}
<?php/** * @package     Joomla.Platform * @subpackage  GitHub * * @copyright   Copyright (C) 2005 - 2013 Open Source Matters, Inc. All rights reserved. * @license     GNU General Public License version 2 or later; see LICENSE */defined('JPATH_PLATFORM') or die;/** * GitHub API Forks class for the Joomla Platform. * * @package     Joomla.Platform * @subpackage  GitHub * @since       11.3 */class JGithubForks extends JGithubObject{	/**	 * Method to fork a repository.	 *	 * @param   string  $user  The name of the owner of the GitHub repository.	 * @param   string  $repo  The name of the GitHub repository.	 * @param   string  $org   The organization to fork the repo into. By default it is forked to the current user.	 *	 * @return  object	 *	 * @since   11.4	 * @throws  DomainException	 */	public function create($user, $repo, $org = '')	{		// Build the request path.		$path = '/repos/' . $user . '/' . $repo . '/forks';		if (strlen($org) > 0)		{			$data = json_encode(				array('org' => $org)			);		}		else		{			$data = json_encode(array());		}		// Send the request.		$response = $this->client->post($this->fetchUrl($path), $data);		// Validate the response code.		if ($response->code != 202)		{			// Decode the error response and throw an exception.			$error = json_decode($response->body);			throw new DomainException($error->message, $response->code);		}		return json_decode($response->body);	}	/**	 * Method to list forks for a repository.	 *	 * @param   string   $user   The name of the owner of the GitHub repository.	 * @param   string   $repo   The name of the GitHub repository.	 * @param   integer  $page   Page to request	 * @param   integer  $limit  Number of results to return per page	 *	 * @return  array	 *	 * @since   11.4	 * @throws  DomainException	 */	public function getList($user, $repo, $page = 0, $limit = 0)	{		// Build the request path.		$path = '/repos/' . $user . '/' . $repo . '/forks';		// Send the request.		$response = $this->client->get($this->fetchUrl($path, $page, $limit));		// Validate the response code.		if ($response->code != 200)		{			// Decode the error response and throw an exception.			$error = json_decode($response->body);			throw new DomainException($error->message, $response->code);		}		return json_decode($response->body);	}}
<?php/** * @package     Joomla.Administrator * @subpackage  mod_logged * * @copyright   Copyright (C) 2005 - 2013 Open Source Matters, Inc. All rights reserved. * @license     GNU General Public License version 2 or later; see LICENSE.txt */defined('_JEXEC') or die;// Include dependancies.require_once __DIR__ . '/helper.php';$users = ModLoggedHelper::getList($params);require JModuleHelper::getLayoutPath('mod_logged', $params->get('layout', 'default'));
<?php/** * @package     Joomla.Site * @subpackage  com_weblinks * * @copyright   Copyright (C) 2005 - 2013 Open Source Matters, Inc. All rights reserved. * @license     GNU General Public License version 2 or later; see LICENSE.txt */defined('_JEXEC') or die;JHtml::addIncludePath(JPATH_COMPONENT.'/helpers');$this->subtemplatename = 'items';echo JLayoutHelper::render('joomla.content.category_default', $this);
<?php/** * @package     Joomla.Platform * @subpackage  GitHub * * @copyright   Copyright (C) 2005 - 2013 Open Source Matters, Inc. All rights reserved. * @license     GNU General Public License version 2 or later; see LICENSE */defined('JPATH_PLATFORM') or die;/** * GitHub API Pull Requests class for the Joomla Platform. * * @package     Joomla.Platform * @subpackage  GitHub * @since       11.3 */class JGithubPulls extends JGithubObject{	/**	 * Method to create a pull request.	 *	 * @param   string  $user   The name of the owner of the GitHub repository.	 * @param   string  $repo   The name of the GitHub repository.	 * @param   string  $title  The title of the new pull request.	 * @param   string  $base   The branch (or git ref) you want your changes pulled into. This	 *                          should be an existing branch on the current repository. You cannot	 *                          submit a pull request to one repo that requests a merge to a base	 *                          of another repo.	 * @param   string  $head   The branch (or git ref) where your changes are implemented.	 * @param   string  $body   The body text for the new pull request.	 *	 * @return  object	 *	 * @since   11.3	 */	public function create($user, $repo, $title, $base, $head, $body = '')	{		// Build the request path.		$path = '/repos/' . $user . '/' . $repo . '/pulls';		// Build the request data.		$data = json_encode(			array(				'title' => $title,				'base' => $base,				'head' => $head,				'body' => $body			)		);		// Send the request.		$response = $this->client->post($this->fetchUrl($path), $data);		// Validate the response code.		if ($response->code != 201)		{			// Decode the error response and throw an exception.			$error = json_decode($response->body);			throw new DomainException($error->message, $response->code);		}		return json_decode($response->body);	}	/**	 * Method to create a comment on a pull request.	 *	 * @param   string   $user      The name of the owner of the GitHub repository.	 * @param   string   $repo      The name of the GitHub repository.	 * @param   integer  $pullId    The pull request number.	 * @param   string   $body      The comment body text.	 * @param   string   $commitId  The SHA1 hash of the commit to comment on.	 * @param   string   $filePath  The Relative path of the file to comment on.	 * @param   string   $position  The line index in the diff to comment on.	 *	 * @return  object	 *	 * @since   11.3	 */	public function createComment($user, $repo, $pullId, $body, $commitId, $filePath, $position)	{		// Build the request path.		$path = '/repos/' . $user . '/' . $repo . '/pulls/' . (int) $pullId . '/comments';		// Build the request data.		$data = json_encode(			array(				'body' => $body,				'commit_id' => $commitId,				'path' => $filePath,				'position' => $position			)		);		// Send the request.		$response = $this->client->post($this->fetchUrl($path), $data);		// Validate the response code.		if ($response->code != 201)		{			// Decode the error response and throw an exception.			$error = json_decode($response->body);			throw new DomainException($error->message, $response->code);		}		return json_decode($response->body);	}	/**	 * Method to create a comment in reply to another comment.	 *	 * @param   string   $user       The name of the owner of the GitHub repository.	 * @param   string   $repo       The name of the GitHub repository.	 * @param   integer  $pullId     The pull request number.	 * @param   string   $body       The comment body text.	 * @param   integer  $inReplyTo  The id of the comment to reply to.	 *	 * @return  object	 *	 * @since   11.3	 */	public function createCommentReply($user, $repo, $pullId, $body, $inReplyTo)	{		// Build the request path.		$path = '/repos/' . $user . '/' . $repo . '/pulls/' . (int) $pullId . '/comments';		// Build the request data.		$data = json_encode(			array(				'body' => $body,				'in_reply_to' => (int) $inReplyTo			)		);		// Send the request.		$response = $this->client->post($this->fetchUrl($path), $data);		// Validate the response code.		if ($response->code != 201)		{			// Decode the error response and throw an exception.			$error = json_decode($response->body);			throw new DomainException($error->message, $response->code);		}		return json_decode($response->body);	}	/**	 * Method to create a pull request from an existing issue.	 *	 * @param   string   $user     The name of the owner of the GitHub repository.	 * @param   string   $repo     The name of the GitHub repository.	 * @param   integer  $issueId  The issue number for which to attach the new pull request.	 * @param   string   $base     The branch (or git ref) you want your changes pulled into. This	 *                             should be an existing branch on the current repository. You cannot	 *                             submit a pull request to one repo that requests a merge to a base	 *                             of another repo.	 * @param   string   $head     The branch (or git ref) where your changes are implemented.	 *	 * @return  object	 *	 * @since   11.3	 */	public function createFromIssue($user, $repo, $issueId, $base, $head)	{		// Build the request path.		$path = '/repos/' . $user . '/' . $repo . '/pulls';		// Build the request data.		$data = json_encode(			array(				'issue' => (int) $issueId,				'base' => $base,				'head' => $head			)		);		// Send the request.		$response = $this->client->post($this->fetchUrl($path), $data);		// Validate the response code.		if ($response->code != 201)		{			// Decode the error response and throw an exception.			$error = json_decode($response->body);			throw new DomainException($error->message, $response->code);		}		return json_decode($response->body);	}	/**	 * Method to delete a comment on a pull request.	 *	 * @param   string   $user       The name of the owner of the GitHub repository.	 * @param   string   $repo       The name of the GitHub repository.	 * @param   integer  $commentId  The id of the comment to delete.	 *	 * @return  void	 *	 * @since   11.3	 */	public function deleteComment($user, $repo, $commentId)	{		// Build the request path.		$path = '/repos/' . $user . '/' . $repo . '/pulls/comments/' . (int) $commentId;		// Send the request.		$response = $this->client->delete($this->fetchUrl($path));		// Validate the response code.		if ($response->code != 204)		{			// Decode the error response and throw an exception.			$error = json_decode($response->body);			throw new DomainException($error->message, $response->code);		}	}	/**	 * Method to update a pull request.	 *	 * @param   string   $user    The name of the owner of the GitHub repository.	 * @param   string   $repo    The name of the GitHub repository.	 * @param   integer  $pullId  The pull request number.	 * @param   string   $title   The optional new title for the pull request.	 * @param   string   $body    The optional new body text for the pull request.	 * @param   string   $state   The optional new state for the pull request. [open, closed]	 *	 * @return  object	 *	 * @since   11.3	 */	public function edit($user, $repo, $pullId, $title = null, $body = null, $state = null)	{		// Build the request path.		$path = '/repos/' . $user . '/' . $repo . '/pulls/' . (int) $pullId;		// Craete the data object.		$data = new stdClass;		// If a title is set add it to the data object.		if (isset($title))		{			$data->title = $title;		}		// If a body is set add it to the data object.		if (isset($body))		{			$data->body = $body;		}		// If a state is set add it to the data object.		if (isset($state))		{			$data->state = $state;		}		// Encode the request data.		$data = json_encode($data);		// Send the request.		$response = $this->client->patch($this->fetchUrl($path), $data);		// Validate the response code.		if ($response->code != 200)		{			// Decode the error response and throw an exception.			$error = json_decode($response->body);			throw new DomainException($error->message, $response->code);		}		return json_decode($response->body);	}	/**	 * Method to update a comment on a pull request.	 *	 * @param   string   $user       The name of the owner of the GitHub repository.	 * @param   string   $repo       The name of the GitHub repository.	 * @param   integer  $commentId  The id of the comment to update.	 * @param   string   $body       The new body text for the comment.	 *	 * @return  object	 *	 * @since   11.3	 */	public function editComment($user, $repo, $commentId, $body)	{		// Build the request path.		$path = '/repos/' . $user . '/' . $repo . '/pulls/comments/' . (int) $commentId;		// Build the request data.		$data = json_encode(			array(				'body' => $body			)		);		// Send the request.		$response = $this->client->patch($this->fetchUrl($path), $data);		// Validate the response code.		if ($response->code != 200)		{			// Decode the error response and throw an exception.			$error = json_decode($response->body);			throw new DomainException($error->message, $response->code);		}		return json_decode($response->body);	}	/**	 * Method to get a single pull request.	 *	 * @param   string   $user    The name of the owner of the GitHub repository.	 * @param   string   $repo    The name of the GitHub repository.	 * @param   integer  $pullId  The pull request number.	 *	 * @return  object	 *	 * @since   11.3	 */	public function get($user, $repo, $pullId)	{		// Build the request path.		$path = '/repos/' . $user . '/' . $repo . '/pulls/' . (int) $pullId;		// Send the request.		$response = $this->client->get($this->fetchUrl($path));		// Validate the response code.		if ($response->code != 200)		{			// Decode the error response and throw an exception.			$error = json_decode($response->body);			throw new DomainException($error->message, $response->code);		}		return json_decode($response->body);	}	/**	 * Method to get a specific comment on a pull request.	 *	 * @param   string   $user       The name of the owner of the GitHub repository.	 * @param   string   $repo       The name of the GitHub repository.	 * @param   integer  $commentId  The comment id to get.	 *	 * @return  object	 *	 * @since   11.3	 */	public function getComment($user, $repo, $commentId)	{		// Build the request path.		$path = '/repos/' . $user . '/' . $repo . '/pulls/comments/' . (int) $commentId;		// Send the request.		$response = $this->client->get($this->fetchUrl($path));		// Validate the response code.		if ($response->code != 200)		{			// Decode the error response and throw an exception.			$error = json_decode($response->body);			throw new DomainException($error->message, $response->code);		}		return json_decode($response->body);	}	/**	 * Method to get the list of comments on a pull request.	 *	 * @param   string   $user    The name of the owner of the GitHub repository.	 * @param   string   $repo    The name of the GitHub repository.	 * @param   integer  $pullId  The pull request number.	 * @param   integer  $page    The page number from which to get items.	 * @param   integer  $limit   The number of items on a page.	 *	 * @return  array	 *	 * @since   11.3	 */	public function getComments($user, $repo, $pullId, $page = 0, $limit = 0)	{		// Build the request path.		$path = '/repos/' . $user . '/' . $repo . '/pulls/' . (int) $pullId . '/comments';		// Send the request.		$response = $this->client->get($this->fetchUrl($path, $page, $limit));		// Validate the response code.		if ($response->code != 200)		{			// Decode the error response and throw an exception.			$error = json_decode($response->body);			throw new DomainException($error->message, $response->code);		}		return json_decode($response->body);	}	/**	 * Method to get a list of commits for a pull request.	 *	 * @param   string   $user    The name of the owner of the GitHub repository.	 * @param   string   $repo    The name of the GitHub repository.	 * @param   integer  $pullId  The pull request number.	 * @param   integer  $page    The page number from which to get items.	 * @param   integer  $limit   The number of items on a page.	 *	 * @return  array	 *	 * @since   11.3	 */	public function getCommits($user, $repo, $pullId, $page = 0, $limit = 0)	{		// Build the request path.		$path = '/repos/' . $user . '/' . $repo . '/pulls/' . (int) $pullId . '/commits';		// Send the request.		$response = $this->client->get($this->fetchUrl($path, $page, $limit));		// Validate the response code.		if ($response->code != 200)		{			// Decode the error response and throw an exception.			$error = json_decode($response->body);			throw new DomainException($error->message, $response->code);		}		return json_decode($response->body);	}	/**	 * Method to get a list of files for a pull request.	 *	 * @param   string   $user    The name of the owner of the GitHub repository.	 * @param   string   $repo    The name of the GitHub repository.	 * @param   integer  $pullId  The pull request number.	 * @param   integer  $page    The page number from which to get items.	 * @param   integer  $limit   The number of items on a page.	 *	 * @return  array	 *	 * @since   11.3	 */	public function getFiles($user, $repo, $pullId, $page = 0, $limit = 0)	{		// Build the request path.		$path = '/repos/' . $user . '/' . $repo . '/pulls/' . (int) $pullId . '/files';		// Send the request.		$response = $this->client->get($this->fetchUrl($path, $page, $limit));		// Validate the response code.		if ($response->code != 200)		{			// Decode the error response and throw an exception.			$error = json_decode($response->body);			throw new DomainException($error->message, $response->code);		}		return json_decode($response->body);	}	/**	 * Method to list pull requests.	 *	 * @param   string   $user   The name of the owner of the GitHub repository.	 * @param   string   $repo   The name of the GitHub repository.	 * @param   string   $state  The optional state to filter requests by. [open, closed]	 * @param   integer  $page   The page number from which to get items.	 * @param   integer  $limit  The number of items on a page.	 *	 * @return  array	 *	 * @since   11.3	 */	public function getList($user, $repo, $state = 'open', $page = 0, $limit = 0)	{		// Build the request path.		$path = '/repos/' . $user . '/' . $repo . '/pulls';		// If a state exists append it as an option.		if ($state != 'open')		{			$path .= '?state=' . $state;		}		// Send the request.		$response = $this->client->get($this->fetchUrl($path, $page, $limit));		// Validate the response code.		if ($response->code != 200)		{			// Decode the error response and throw an exception.			$error = json_decode($response->body);			throw new DomainException($error->message, $response->code);		}		return json_decode($response->body);	}	/**	 * Method to check if a pull request has been merged.	 *	 * @param   string   $user    The name of the owner of the GitHub repository.	 * @param   string   $repo    The name of the GitHub repository.	 * @param   integer  $pullId  The pull request number.  The pull request number.	 *	 * @return  boolean  True if the pull request has been merged.	 *	 * @since   11.3	 */	public function isMerged($user, $repo, $pullId)	{		// Build the request path.		$path = '/repos/' . $user . '/' . $repo . '/pulls/' . (int) $pullId . '/merge';		// Send the request.		$response = $this->client->get($this->fetchUrl($path));		// Validate the response code.		if ($response->code == 204)		{			return true;		}		elseif ($response->code == 404)		{			return false;		}		else		{			// Decode the error response and throw an exception.			$error = json_decode($response->body);			throw new DomainException($error->message, $response->code);		}	}	/**	 * Method to merge a pull request.	 *	 * @param   string   $user     The name of the owner of the GitHub repository.	 * @param   string   $repo     The name of the GitHub repository.	 * @param   integer  $pullId   The pull request number.	 * @param   string   $message  The message that will be used for the merge commit.	 *	 * @return  object	 *	 * @since   11.3	 */	public function merge($user, $repo, $pullId, $message = '')	{		// Build the request path.		$path = '/repos/' . $user . '/' . $repo . '/pulls/' . (int) $pullId . '/merge';		// Build the request data.		$data = json_encode(			array(				'commit_message' => $message			)		);		// Send the request.		$response = $this->client->put($this->fetchUrl($path), $data);		// Validate the response code.		if ($response->code != 200)		{			// Decode the error response and throw an exception.			$error = json_decode($response->body);			throw new DomainException($error->message, $response->code);		}		return json_decode($response->body);	}}
<?php/** * @package     Joomla.Administrator * @subpackage  com_installer * @copyright   Copyright (C) 2005 - 2013 Open Source Matters, Inc. All rights reserved. * @license     GNU General Public License version 2 or later; see LICENSE.txt */defined('_JEXEC') or die;include_once __DIR__ . '/../default/view.php';/** * Language installer view * * @package     Joomla.Administrator * @subpackage  com_installer * @since       2.5.7 */class InstallerViewLanguages extends InstallerViewDefault{	/**	 * @var object item list	 */	protected $items;	/**	 * @var object pagination information	 */	protected $pagination;	/**	 * @var object model state	 */	protected $state;	/**	 * Display the view	 *	 * @param   null  $tpl  template to display	 *	 * @return mixed|void	 */	public function display($tpl = null)	{		// Get data from the model		$this->state      = $this->get('State');		$this->items      = $this->get('Items');		$this->pagination = $this->get('Pagination');		// Check for errors.		if (count($errors = $this->get('Errors')))		{			JError::raiseError(500, implode("\n", $errors));			return false;		}		parent::display($tpl);	}	/**	 * Add the page title and toolbar.	 *	 * @return void	 */	protected function addToolbar()	{		$canDo = InstallerHelper::getActions();		JToolBarHelper::title(JText::_('COM_INSTALLER_HEADER_' . $this->getName()), 'install.png');		if ($canDo->get('core.admin'))		{			JToolBarHelper::custom('languages.install', 'upload', 'upload', 'COM_INSTALLER_TOOLBAR_INSTALL', true, false);			JToolBarHelper::custom('languages.find', 'refresh', 'refresh', 'COM_INSTALLER_TOOLBAR_FIND_LANGUAGES', false, false);			JToolBarHelper::divider();			parent::addToolbar();			// TODO: this help screen will need to be created			JToolBarHelper::help('JHELP_EXTENSIONS_EXTENSION_MANAGER_LANGUAGES');		}	}}
<?php/** * JGrid class to dynamically generate HTML tables * * @package     Joomla.Platform * @subpackage  Grid * * @copyright   Copyright (C) 2005 - 2013 Open Source Matters, Inc. All rights reserved. * @license     GNU General Public License version 2 or later; see LICENSE */defined('JPATH_PLATFORM') or die;/** * JGrid class to dynamically generate HTML tables * * @package     Joomla.Platform * @subpackage  Grid * @since       11.3 */class JGrid{	/**	 * Array of columns	 * @var array	 * @since 11.3	 */	protected $columns = array();	/**	 * Current active row	 * @var int	 * @since 11.3	 */	protected $activeRow = 0;	/**	 * Rows of the table (including header and footer rows)	 * @var array	 * @since 11.3	 */	protected $rows = array();	/**	 * Header and Footer row-IDs	 * @var array	 * @since 11.3	 */	protected $specialRows = array('header' => array(), 'footer' => array());	/**	 * Associative array of attributes for the table-tag	 * @var array	 * @since 11.3	 */	protected $options;	/**	 * Constructor for a JGrid object	 *	 * @param   array  $options  Associative array of attributes for the table-tag	 *	 * @since 11.3	 */	public function __construct($options = array())	{		$this->setTableOptions($options, true);	}	/**	 * Magic function to render this object as a table.	 *	 * @return  string	 *	 * @since 11.3	 */	public function __toString()	{		return $this->toString();	}	/**	 * Method to set the attributes for a table-tag	 *	 * @param   array  $options  Associative array of attributes for the table-tag	 * @param   bool   $replace  Replace possibly existing attributes	 *	 * @return  JGrid This object for chaining	 *	 * @since 11.3	 */	public function setTableOptions($options = array(), $replace = false)	{		if ($replace)		{			$this->options = $options;		}		else		{			$this->options = array_merge($this->options, $options);		}		return $this;	}	/**	 * Get the Attributes of the current table	 *	 * @return  array Associative array of attributes	 *	 * @since 11.3	 */	public function getTableOptions()	{		return $this->options;	}	/**	 * Add new column name to process	 *	 * @param   string  $name  Internal column name	 *	 * @return  JGrid This object for chaining	 *	 * @since 11.3	 */	public function addColumn($name)	{		$this->columns[] = $name;		return $this;	}	/**	 * Returns the list of internal columns	 *	 * @return  array List of internal columns	 *	 * @since 11.3	 */	public function getColumns()	{		return $this->columns;	}	/**	 * Delete column by name	 *	 * @param   string  $name  Name of the column to be deleted	 *	 * @return  JGrid This object for chaining	 *	 * @since 11.3	 */	public function deleteColumn($name)	{		$index = array_search($name, $this->columns);		if ($index !== false)		{			unset($this->columns[$index]);			$this->columns = array_values($this->columns);		}		return $this;	}	/**	 * Method to set a whole range of columns at once	 * This can be used to re-order the columns, too	 *	 * @param   array  $columns  List of internal column names	 *	 * @return  JGrid This object for chaining	 *	 * @since 11.3	 */	public function setColumns($columns)	{		$this->columns = array_values($columns);		return $this;	}	/**	 * Adds a row to the table and sets the currently	 * active row to the new row	 *	 * @param   array  $options  Associative array of attributes for the row	 * @param   int    $special  1 for a new row in the header, 2 for a new row in the footer	 *	 * @return  JGrid This object for chaining	 *	 * @since 11.3	 */	public function addRow($options = array(), $special = false)	{		$this->rows[]['_row'] = $options;		$this->activeRow = count($this->rows) - 1;		if ($special)		{			if ($special === 1)			{				$this->specialRows['header'][] = $this->activeRow;			}			else			{				$this->specialRows['footer'][] = $this->activeRow;			}		}		return $this;	}	/**	 * Method to get the attributes of the currently active row	 *	 * @return array Associative array of attributes	 *	 * @since 11.3	 */	public function getRowOptions()	{		return $this->rows[$this->activeRow]['_row'];	}	/**	 * Method to set the attributes of the currently active row	 *	 * @param   array  $options  Associative array of attributes	 *	 * @return JGrid This object for chaining	 *	 * @since 11.3	 */	public function setRowOptions($options)	{		$this->rows[$this->activeRow]['_row'] = $options;		return $this;	}	/**	 * Get the currently active row ID	 *	 * @return  int ID of the currently active row	 *	 * @since 11.3	 */	public function getActiveRow()	{		return $this->activeRow;	}	/**	 * Set the currently active row	 *	 * @param   int  $id  ID of the row to be set to current	 *	 * @return  JGrid This object for chaining	 *	 * @since 11.3	 */	public function setActiveRow($id)	{		$this->activeRow = (int) $id;		return $this;	}	/**	 * Set cell content for a specific column for the	 * currently active row	 *	 * @param   string  $name     Name of the column	 * @param   string  $content  Content for the cell	 * @param   array   $option   Associative array of attributes for the td-element	 * @param   bool    $replace  If false, the content is appended to the current content of the cell	 *	 * @return  JGrid This object for chaining	 *	 * @since 11.3	 */	public function setRowCell($name, $content, $option = array(), $replace = true)	{		if ($replace || !isset($this->rows[$this->activeRow][$name]))		{			$cell = new stdClass;			$cell->options = $option;			$cell->content = $content;			$this->rows[$this->activeRow][$name] = $cell;		}		else		{			$this->rows[$this->activeRow][$name]->content .= $content;			$this->rows[$this->activeRow][$name]->options = $option;		}		return $this;	}	/**	 * Get all data for a row	 *	 * @param   int  $id  ID of the row to return	 *	 * @return  array Array of columns of a table row	 *	 * @since 11.3	 */	public function getRow($id = false)	{		if ($id === false)		{			$id = $this->activeRow;		}		if (isset($this->rows[(int) $id]))		{			return $this->rows[(int) $id];		}		else		{			return false;		}	}	/**	 * Get the IDs of all rows in the table	 *	 * @param   int  $special  false for the standard rows, 1 for the header rows, 2 for the footer rows	 *	 * @return  array Array of IDs	 *	 * @since 11.3	 */	public function getRows($special = false)	{		if ($special)		{			if ($special === 1)			{				return $this->specialRows['header'];			}			else			{				return $this->specialRows['footer'];			}		}		return array_diff(array_keys($this->rows), array_merge($this->specialRows['header'], $this->specialRows['footer']));	}	/**	 * Delete a row from the object	 *	 * @param   int  $id  ID of the row to be deleted	 *	 * @return  JGrid This object for chaining	 *	 * @since 11.3	 */	public function deleteRow($id)	{		unset($this->rows[$id]);		if (in_array($id, $this->specialRows['header']))		{			unset($this->specialRows['header'][array_search($id, $this->specialRows['header'])]);		}		if (in_array($id, $this->specialRows['footer']))		{			unset($this->specialRows['footer'][array_search($id, $this->specialRows['footer'])]);		}		if ($this->activeRow == $id)		{			end($this->rows);			$this->activeRow = key($this->rows);		}		return $this;	}	/**	 * Render the HTML table	 *	 * @return  string The rendered HTML table	 *	 * @since 11.3	 */	public function toString()	{		$output = array();		$output[] = '<table' . $this->renderAttributes($this->getTableOptions()) . '>';		if (count($this->specialRows['header']))		{			$output[] = $this->renderArea($this->specialRows['header'], 'thead', 'th');		}		if (count($this->specialRows['footer']))		{			$output[] = $this->renderArea($this->specialRows['footer'], 'tfoot');		}		$ids = array_diff(array_keys($this->rows), array_merge($this->specialRows['header'], $this->specialRows['footer']));		if (count($ids))		{			$output[] = $this->renderArea($ids);		}		$output[] = '</table>';		return implode('', $output);	}	/**	 * Render an area of the table	 *	 * @param   array   $ids   IDs of the rows to render	 * @param   string  $area  Name of the area to render. Valid: tbody, tfoot, thead	 * @param   string  $cell  Name of the cell to render. Valid: td, th	 *	 * @return string The rendered table area	 *	 * @since 11.3	 */	protected function renderArea($ids, $area = 'tbody', $cell = 'td')	{		$output = array();		$output[] = '<' . $area . ">\n";		foreach ($ids as $id)		{			$output[] = "\t<tr" . $this->renderAttributes($this->rows[$id]['_row']) . ">\n";			foreach ($this->getColumns() as $name)			{				if (isset($this->rows[$id][$name]))				{					$column = $this->rows[$id][$name];					$output[] = "\t\t<" . $cell . $this->renderAttributes($column->options) . '>' . $column->content . '</' . $cell . ">\n";				}			}			$output[] = "\t</tr>\n";		}		$output[] = '</' . $area . '>';		return implode('', $output);	}	/**	 * Renders an HTML attribute from an associative array	 *	 * @param   array  $attributes  Associative array of attributes	 *	 * @return  string The HTML attribute string	 *	 * @since 11.3	 */	protected function renderAttributes($attributes)	{		if (count((array) $attributes) == 0)		{			return '';		}		$return = array();		foreach ($attributes as $key => $option)		{			$return[] = $key . '="' . $option . '"';		}		return ' ' . implode(' ', $return);	}}
<?php/** * @package     Joomla.Site * @subpackage  com_content * * @copyright   Copyright (C) 2005 - 2013 Open Source Matters, Inc. All rights reserved. * @license     GNU General Public License version 2 or later; see LICENSE.txt */defined('_JEXEC') or die;?><ol class="nav nav-tabs nav-stacked"><?php foreach ($this->link_items as &$item) : ?>	<li>		<a href="<?php echo JRoute::_(ContentHelperRoute::getArticleRoute($item->slug, $item->catslug)); ?>">			<?php echo $item->title; ?></a>	</li><?php endforeach; ?></ol>
<?php/** * @package     Joomla.Platform * @subpackage  Input * * @copyright   Copyright (C) 2005 - 2013 Open Source Matters, Inc. All rights reserved. * @license     GNU General Public License version 2 or later; see LICENSE */defined('JPATH_PLATFORM') or die;/** * Joomla! Input Files Class * * @package     Joomla.Platform * @subpackage  Input * @since       11.1 */class JInputFiles extends JInput{	protected $decodedData = array();	/**	 * Constructor.	 *	 * @param   array  $source   Ignored.	 * @param   array  $options  Array of configuration parameters (Optional)	 *	 * @since   12.1	 */	public function __construct(array $source = null, array $options = array())	{		if (isset($options['filter']))		{			$this->filter = $options['filter'];		}		else		{			$this->filter = JFilterInput::getInstance();		}		// Set the data source.		$this->data = & $_FILES;		// Set the options for the class.		$this->options = $options;	}	/**	 * Gets a value from the input data.	 *	 * @param   string  $name     Name of the value to get.	 * @param   mixed   $default  Default value to return if variable does not exist.	 * @param   string  $filter   Filter to apply to the value.	 *	 * @return  mixed  The filtered input value.	 *	 * @since   11.1	 */	public function get($name, $default = null, $filter = 'cmd')	{		if (isset($this->data[$name]))		{			$results = $this->decodeData(				array(					$this->data[$name]['name'],					$this->data[$name]['type'],					$this->data[$name]['tmp_name'],					$this->data[$name]['error'],					$this->data[$name]['size']				)			);			return $results;		}		return $default;	}	/**	 * Method to decode a data array.	 *	 * @param   array  $data  The data array to decode.	 *	 * @return  array	 *	 * @since   11.1	 */	protected function decodeData(array $data)	{		$result = array();		if (is_array($data[0]))		{			foreach ($data[0] as $k => $v)			{				$result[$k] = $this->decodeData(array($data[0][$k], $data[1][$k], $data[2][$k], $data[3][$k], $data[4][$k]));			}			return $result;		}		return array('name' => $data[0], 'type' => $data[1], 'tmp_name' => $data[2], 'error' => $data[3], 'size' => $data[4]);	}	/**	 * Sets a value	 *	 * @param   string  $name   Name of the value to set.	 * @param   mixed   $value  Value to assign to the input.	 *	 * @return  void	 *	 * @since   11.1	 */	public function set($name, $value)	{	}}
<?php/** * @package     Joomla.Administrator * @subpackage  com_contact * * @copyright   Copyright (C) 2005 - 2013 Open Source Matters, Inc. All rights reserved. * @license     GNU General Public License version 2 or later; see LICENSE.txt */defined('JPATH_BASE') or die;/** * Supports an HTML select list of contacts * * @package     Joomla.Administrator * @subpackage  com_contact * @since       1.6 */class JFormFieldOrdering extends JFormField{	/**	 * The form field type.	 *	 * @var		string	 * @since   1.6	 */	protected $type = 'Ordering';	/**	 * Method to get the field input markup.	 *	 * @return  string	The field input markup.	 * @since   1.6	 */	protected function getInput()	{		$html = array();		$attr = '';		// Initialize some field attributes.		$attr .= $this->element['class'] ? ' class="'.(string) $this->element['class'].'"' : '';		$attr .= ((string) $this->element['disabled'] == 'true') ? ' disabled="disabled"' : '';		$attr .= $this->element['size'] ? ' size="'.(int) $this->element['size'].'"' : '';		// Initialize JavaScript field attributes.		$attr .= $this->element['onchange'] ? ' onchange="'.(string) $this->element['onchange'].'"' : '';		// Get some field values from the form.		$contactId	= (int) $this->form->getValue('id');		$categoryId	= (int) $this->form->getValue('catid');		// Build the query for the ordering list.		$query = 'SELECT ordering AS value, name AS text' .				' FROM #__contact_details' .				' WHERE catid = ' . (int) $categoryId .				' ORDER BY ordering';		// Create a read-only list (no name) with a hidden input to store the value.		if ((string) $this->element['readonly'] == 'true')		{			$html[] = JHtml::_('list.ordering', '', $query, trim($attr), $this->value, $contactId ? 0 : 1);			$html[] = '<input type="hidden" name="'.$this->name.'" value="'.$this->value.'"/>';		}		// Create a regular list.		else {			$html[] = JHtml::_('list.ordering', $this->name, $query, trim($attr), $this->value, $contactId ? 0 : 1);		}		return implode($html);	}}
<?php/** * @package     Joomla.Administrator * @subpackage  com_login * * @copyright   Copyright (C) 2005 - 2013 Open Source Matters, Inc. All rights reserved. * @license     GNU General Public License version 2 or later; see LICENSE.txt */defined('_JEXEC') or die;/** * HTML View class for the Login component * * @package     Joomla.Administrator * @subpackage  com_login * @since       1.6 */class LoginViewLogin extends JViewLegacy{}
<?php/** * @package     Joomla.Administrator * @subpackage  com_modules * * @copyright   Copyright (C) 2005 - 2013 Open Source Matters, Inc. All rights reserved. * @license     GNU General Public License version 2 or later; see LICENSE.txt */defined('_JEXEC') or die;?><script>var form = window.top.document.adminFormvar title = form.title.value;var alltext = window.top.<?php echo $this->editor->getContent('text') ?>;</script><table class="center" width="90%">	<tr>		<td class="contentheading" colspan="2"><script>document.write(title);</script></td>	</tr><tr>	<td valign="top" height="90%" colspan="2">		<script>document.write(alltext);</script>	</td></tr></table>
<?php/** * @package     Joomla.Site * @subpackage  mod_search * * @copyright   Copyright (C) 2005 - 2013 Open Source Matters, Inc. All rights reserved. * @license     GNU General Public License version 2 or later; see LICENSE.txt */defined('_JEXEC') or die;?><div class="search<?php echo $moduleclass_sfx ?>">    <form action="<?php echo JRoute::_('index.php');?>" method="post" class="form-inline">    		<?php				$output = '<label for="mod-search-searchword" class="element-invisible">' . $label . '</label> <input name="searchword" id="mod-search-searchword" maxlength="' . $maxlength . '"  class="inputbox search-query" type="text" size="' . $width . '" value="' . $text . '"  onblur="if (this.value==\'\') this.value=\'' . $text . '\';" onfocus="if (this.value==\'' . $text . '\') this.value=\'\';" />';				if ($button) :					if ($imagebutton) :						$button = ' <input type="image" value="' . $button_text . '" class="button" src="' . $img . '" onclick="this.form.searchword.focus();"/>';					else :						$button = ' <button class="button btn btn-primary" onclick="this.form.searchword.focus();">' . $button_text . '</button>';					endif;				endif;				switch ($button_pos) :					case 'top' :						$button = $button . '<br />';						$output = $button . $output;						break;					case 'bottom' :						$button = '<br />' . $button;						$output = $output . $button;						break;					case 'right' :						$output = $output . $button;						break;					case 'left' :					default :						$output = $button . $output;						break;				endswitch;				echo $output;			?>    	<input type="hidden" name="task" value="search" />    	<input type="hidden" name="option" value="com_search" />    	<input type="hidden" name="Itemid" value="<?php echo $mitemid; ?>" />    </form></div>
<?php/** * @package     Joomla.Platform * @subpackage  Database * * @copyright   Copyright (C) 2005 - 2013 Open Source Matters, Inc. All rights reserved. * @license     GNU General Public License version 2 or later; see LICENSE */defined('JPATH_PLATFORM') or die;/** * MySQL database iterator. * * @package     Joomla.Platform * @subpackage  Database * @see         http://dev.mysql.com/doc/ * @since       12.1 */class JDatabaseIteratorMysql extends JDatabaseIterator{	/**	 * Get the number of rows in the result set for the executed SQL given by the cursor.	 *	 * @return  integer  The number of rows in the result set.	 *	 * @since   12.1	 * @see     Countable::count()	 */	public function count()	{		return mysql_num_rows($this->cursor);	}	/**	 * Method to fetch a row from the result set cursor as an object.	 *	 * @return  mixed   Either the next row from the result set or false if there are no more rows.	 *	 * @since   12.1	 */	protected function fetchObject()	{		return mysql_fetch_object($this->cursor, $this->class);	}	/**	 * Method to free up the memory used for the result set.	 *	 * @return  void	 *	 * @since   12.1	 */	protected function freeResult()	{		mysql_free_result($this->cursor);	}}
<?php/** * @package     Joomla.Site * @subpackage  com_users * * @copyright   Copyright (C) 2005 - 2013 Open Source Matters, Inc. All rights reserved. * @license     GNU General Public License version 2 or later; see LICENSE.txt */defined('_JEXEC') or die;/** * Registration view class for Users. * * @package     Joomla.Site * @subpackage  com_users * @since       1.6 */class UsersViewRegistration extends JViewLegacy{	protected $data;	protected $form;	protected $params;	protected $state;	/**	 * Method to display the view.	 *	 * @param   string	The template file to include	 * @since   1.6	 */	public function display($tpl = null)	{		// Get the view data.		$this->data		= $this->get('Data');		$this->form		= $this->get('Form');		$this->state	= $this->get('State');		$this->params	= $this->state->get('params');		// Check for errors.		if (count($errors = $this->get('Errors')))		{			JError::raiseError(500, implode('<br />', $errors));			return false;		}		// Check for layout override		$active = JFactory::getApplication()->getMenu()->getActive();		if (isset($active->query['layout']))		{			$this->setLayout($active->query['layout']);		}		//Escape strings for HTML output		$this->pageclass_sfx = htmlspecialchars($this->params->get('pageclass_sfx'));		$this->prepareDocument();		parent::display($tpl);	}	/**	 * Prepares the document.	 *	 * @since   1.6	 */	protected function prepareDocument()	{		$app		= JFactory::getApplication();		$menus		= $app->getMenu();		$title 		= null;		// Because the application sets a default page title,		// we need to get it from the menu item itself		$menu = $menus->getActive();		if ($menu)		{			$this->params->def('page_heading', $this->params->get('page_title', $menu->title));		}		else		{			$this->params->def('page_heading', JText::_('COM_USERS_REGISTRATION'));		}		$title = $this->params->get('page_title', '');		if (empty($title))		{			$title = $app->getCfg('sitename');		}		elseif ($app->getCfg('sitename_pagetitles', 0) == 1)		{			$title = JText::sprintf('JPAGETITLE', $app->getCfg('sitename'), $title);		}		elseif ($app->getCfg('sitename_pagetitles', 0) == 2)		{			$title = JText::sprintf('JPAGETITLE', $title, $app->getCfg('sitename'));		}		$this->document->setTitle($title);		if ($this->params->get('menu-meta_description'))		{			$this->document->setDescription($this->params->get('menu-meta_description'));		}		if ($this->params->get('menu-meta_keywords'))		{			$this->document->setMetadata('keywords', $this->params->get('menu-meta_keywords'));		}		if ($this->params->get('robots'))		{			$this->document->setMetadata('robots', $this->params->get('robots'));		}	}}
<?php/** * @package     Joomla.Site * @subpackage  com_weblinks * * @copyright   Copyright (C) 2005 - 2013 Open Source Matters, Inc. All rights reserved. * @license     GNU General Public License version 2 or later; see LICENSE.txt */defined('_JEXEC') or die;require_once JPATH_COMPONENT.'/helpers/route.php';$controller	= JControllerLegacy::getInstance('Weblinks');$controller->execute(JFactory::getApplication()->input->get('task'));$controller->redirect();
<?php/** * @package     Joomla.Platform * @subpackage  Document * * @copyright   Copyright (C) 2005 - 2013 Open Source Matters, Inc. All rights reserved. * @license     GNU General Public License version 2 or later; see LICENSE */defined('JPATH_PLATFORM') or die;/** * DocumentFeed class, provides an easy interface to parse and display any feed document * * @package     Joomla.Platform * @subpackage  Document * @since       11.1 */class JDocumentFeed extends JDocument{	/**	 * Syndication URL feed element	 *	 * optional	 *	 * @var    string	 * @since  11.1	 */	public $syndicationURL = "";	/**	 * Image feed element	 *	 * optional	 *	 * @var    object	 * @since  11.1	 */	public $image = null;	/**	 * Copyright feed element	 *	 * optional	 *	 * @var    string	 * @since  11.1	 */	public $copyright = "";	/**	 * Published date feed element	 *	 * optional	 *	 * @var    string	 * @since  11.1	 */	public $pubDate = "";	/**	 * Lastbuild date feed element	 *	 * optional	 *	 * @var    string	 * @since  11.1	 */	public $lastBuildDate = "";	/**	 * Editor feed element	 *	 * optional	 *	 * @var    string	 * @since  11.1	 */	public $editor = "";	/**	 * Docs feed element	 *	 * @var    string	 * @since  11.1	 */	public $docs = "";	/**	 * Editor email feed element	 *	 * optional	 *	 * @var    string	 * @since  11.1	 */	public $editorEmail = "";	/**	 * Webmaster email feed element	 *	 * optional	 *	 * @var    string	 * @since  11.1	 */	public $webmaster = "";	/**	 * Category feed element	 *	 * optional	 *	 * @var    string	 * @since  11.1	 */	public $category = "";	/**	 * TTL feed attribute	 *	 * optional	 *	 * @var    string	 * @since  11.1	 */	public $ttl = "";	/**	 * Rating feed element	 *	 * optional	 *	 * @var    string	 * @since  11.1	 */	public $rating = "";	/**	 * Skiphours feed element	 *	 * optional	 *	 * @var    string	 * @since  11.1	 */	public $skipHours = "";	/**	 * Skipdays feed element	 *	 * optional	 *	 * @var    string	 * @since  11.1	 */	public $skipDays = "";	/**	 * The feed items collection	 *	 * @var    array	 * @since  11.1	 */	public $items = array();	/**	 * Class constructor	 *	 * @param   array  $options  Associative array of options	 *	 * @since  11.1	 */	public function __construct($options = array())	{		parent::__construct($options);		// Set document type		$this->_type = 'feed';	}	/**	 * Render the document	 *	 * @param   boolean  $cache   If true, cache the output	 * @param   array    $params  Associative array of attributes	 *	 * @return  The rendered data	 *	 * @since  11.1	 * @throws Exception	 * @todo   Make this cacheable	 */	public function render($cache = false, $params = array())	{		// Get the feed type		$type = JFactory::getApplication()->input->get('type', 'rss');		// Instantiate feed renderer and set the mime encoding		$renderer = $this->loadRenderer(($type) ? $type : 'rss');		if (!is_a($renderer, 'JDocumentRenderer'))		{			throw new Exception(JText::_('JGLOBAL_RESOURCE_NOT_FOUND'), 404);		}		$this->setMimeEncoding($renderer->getContentType());		// Output		// Generate prolog		$data = "<?xml version=\"1.0\" encoding=\"" . $this->_charset . "\"?>\n";		$data .= "<!-- generator=\"" . $this->getGenerator() . "\" -->\n";		// Generate stylesheet links		foreach ($this->_styleSheets as $src => $attr)		{			$data .= "<?xml-stylesheet href=\"$src\" type=\"" . $attr['mime'] . "\"?>\n";		}		// Render the feed		$data .= $renderer->render();		parent::render();		return $data;	}	/**	 * Adds an JFeedItem to the feed.	 *	 * @param   JFeedItem  $item  The feeditem to add to the feed.	 *	 * @return  JDocumentFeed  instance of $this to allow chaining	 *	 * @since   11.1	 */	public function addItem(JFeedItem $item)	{		$item->source = $this->link;		$this->items[] = $item;		return $this;	}}/** * JFeedItem is an internal class that stores feed item information * * @package     Joomla.Platform * @subpackage  Document * @since       11.1 */class JFeedItem{	/**	 * Title item element	 *	 * required	 *	 * @var    string	 * @since  11.1	 */	public $title;	/**	 * Link item element	 *	 * required	 *	 * @var    string	 * @since  11.1	 */	public $link;	/**	 * Description item element	 *	 * required	 *	 * @var    string	 * @since  11.1	 */	public $description;	/**	 * Author item element	 *	 * optional	 *	 * @var    string	 * @since  11.1	 */	public $author;	/**	 * Author email element	 *	 * optional	 *	 * @var    string	 * @since  11.1	 */	public $authorEmail;	/**	 * Category element	 *	 * optional	 *	 * @var    array or string	 * @since  11.1	 */	public $category;	/**	 * Comments element	 *	 * optional	 *	 * @var    string	 * @since  11.1	 */	public $comments;	/**	 * Enclosure element	 *	 * @var    object	 * @since  11.1	 */	public $enclosure = null;	/**	 * Guid element	 *	 * optional	 *	 * @var    string	 * @since  11.1	 */	public $guid;	/**	 * Published date	 *	 * optional	 *	 * May be in one of the following formats:	 *	 * RFC 822:	 * "Mon, 20 Jan 03 18:05:41 +0400"	 * "20 Jan 03 18:05:41 +0000"	 *	 * ISO 8601:	 * "2003-01-20T18:05:41+04:00"	 *	 * Unix:	 * 1043082341	 *	 * @var    string	 * @since  11.1	 */	public $date;	/**	 * Source element	 *	 * optional	 *	 * @var    string	 * @since  11.1	 */	public $source;	/**	 * Set the JFeedEnclosure for this item	 *	 * @param   JFeedEnclosure  $enclosure  The JFeedEnclosure to add to the feed.	 *	 * @return  JFeedItem instance of $this to allow chaining	 *	 * @since   11.1	 */	public function setEnclosure(JFeedEnclosure $enclosure)	{		$this->enclosure = $enclosure;		return $this;	}}/** * JFeedEnclosure is an internal class that stores feed enclosure information * * @package     Joomla.Platform * @subpackage  Document * @since       11.1 */class JFeedEnclosure{	/**	 * URL enclosure element	 *	 * required	 *	 * @var    string	 * @since  11.1	 */	public $url = "";	/**	 * Length enclosure element	 *	 * required	 *	 * @var    string	 * @since  11.1	 */	public $length = "";	/**	 * Type enclosure element	 *	 * required	 *	 * @var    string	 * @since  11.1	 */	public $type = "";}/** * JFeedImage is an internal class that stores feed image information * * @package     Joomla.Platform * @subpackage  Document * @since       11.1 */class JFeedImage{	/**	 * Title image attribute	 *	 * required	 *	 * @var    string	 * @since  11.1	 */	public $title = "";	/**	 * URL image attribute	 *	 * required	 *	 * @var    string	 * @since  11.1	 */	public $url = "";	/**	 * Link image attribute	 *	 * required	 *	 * @var    string	 * @since  11.1	 */	public $link = "";	/**	 * Width image attribute	 *	 * optional	 *	 * @var    string	 * @since  11.1	 */	public $width;	/**	 * Title feed attribute	 *	 * optional	 *	 * @var    string	 * @since  11.1	 */	public $height;	/**	 * Title feed attribute	 *	 * optional	 *	 * @var    string	 * @since  11.1	 */	public $description;}
<?php/** * Generic_Sniffs_WhiteSpace_DisallowSpaceIndentSniff. * * PHP version 5 * * @category  PHP * @package   PHP_CodeSniffer * @author    Greg Sherwood <gsherwood@squiz.net> * @author    Marc McIntyre <mmcintyre@squiz.net> * @copyright 2006 Squiz Pty Ltd (ABN 77 084 670 600) * @license   http://matrix.squiz.net/developer/tools/php_cs/licence BSD Licence * @version   CVS: $Id$ * @link      http://pear.php.net/package/PHP_CodeSniffer *//** * Generic_Sniffs_WhiteSpace_DisallowSpaceIndentSniff. * * Throws errors if spaces are used for indentation. * * @category  PHP * @package   PHP_CodeSniffer * @author    Greg Sherwood <gsherwood@squiz.net> * @author    Marc McIntyre <mmcintyre@squiz.net> * @copyright 2006 Squiz Pty Ltd (ABN 77 084 670 600) * @license   http://matrix.squiz.net/developer/tools/php_cs/licence BSD Licence * @version   Release: @package_version@ * @link      http://pear.php.net/package/PHP_CodeSniffer */class Joomla_Sniffs_WhiteSpace_DisallowSpaceIndentSniff implements PHP_CodeSniffer_Sniff{    /**     * A list of tokenizers this sniff supports.     *     * @var array     */    public $supportedTokenizers = array(                                   'PHP',                                   'JS',                                   'CSS',                                  );    /**     * Returns an array of tokens this test wants to listen for.     *     * @return array     */    public function register()    {        return array(T_WHITESPACE);    }//end register()    /**     * Processes this test, when one of its tokens is encountered.     *     * @param PHP_CodeSniffer_File $phpcsFile All the tokens found in the document.     * @param int                  $stackPtr  The position of the current token in     *                                        the stack passed in $tokens.     *     * @return void     */    public function process(PHP_CodeSniffer_File $phpcsFile, $stackPtr)    {        $tokens = $phpcsFile->getTokens();        // Make sure this is whitespace used for indentation.        $line = $tokens[$stackPtr]['line'];        if ($stackPtr > 0 && $tokens[($stackPtr - 1)]['line'] === $line) {            return;        }        if (strpos($tokens[$stackPtr]['content'], " ") !== false) {            $error = 'Tabs must be used to indent lines; spaces are not allowed';            $phpcsFile->addError($error, $stackPtr, 'SpaceUsed');        }    }//end process()}//end class?>
<?php/** * @package     Joomla.Administrator * @subpackage  com_tags * * @copyright   Copyright (C) 2005 - 2013 Open Source Matters, Inc. All rights reserved. * @license     GNU General Public License version 2 or later; see LICENSE.txt */defined('_JEXEC') or die;?><?php	echo JHtml::_('bootstrap.startAccordion', 'categoryOptions', array('active' => 'collapse0'));	$fieldSets = $this->form->getFieldsets('params');	$i = 0;	foreach ($fieldSets as $name => $fieldSet) :		$label = !empty($fieldSet->label) ? $fieldSet->label : 'COM_TAGS_'.$name.'_FIELDSET_LABEL';		echo JHtml::_('bootstrap.addSlide', 'categoryOptions', JText::_($label), 'collapse' . $i++);			if (isset($fieldSet->description) && trim($fieldSet->description)) :				echo '<p class="tip">'.$this->escape(JText::_($fieldSet->description)).'</p>';			endif;			?>				<?php foreach ($this->form->getFieldset($name) as $field) : ?>					<div class="control-group">						<div class="control-label">							<?php echo $field->label; ?>						</div>						<div class="controls">							<?php echo $field->input; ?>						</div>					</div>				<?php endforeach; ?>				<?php if ($name == 'basic'):?>					<div class="control-group">						<div class="control-label">							<?php echo $this->form->getLabel('note'); ?>						</div>						<div class="controls">							<?php echo $this->form->getInput('note'); ?>						</div>					</div>					<div class="control-group">						<div class="control-label">							<?php echo $this->form->getLabel('tag_layout'); ?>						</div>						<div class="controls">							<?php echo $this->form->getInput('tag_layout'); ?>						</div>					</div>					<div class="control-group">						<div class="control-label">							<?php echo $this->form->getLabel('tag_link_class'); ?>						</div>						<div class="controls">							<?php echo $this->form->getInput('tag_link_class'); ?>						</div>					</div>				<?php endif;		echo JHtml::_('bootstrap.endSlide');	endforeach;echo JHtml::_('bootstrap.endAccordion');
<?php/** * @package     Joomla.Installation * @subpackage  Controller * * @copyright   Copyright (C) 2005 - 2013 Open Source Matters, Inc. All rights reserved. * @license     GNU General Public License version 2 or later; see LICENSE.txt */defined('_JEXEC') or die;/** * Controller class to set the site data for the Joomla Installer. * * @package     Joomla.Installation * @subpackage  Controller * @since       3.1 */class InstallationControllerSite extends JControllerBase{	/**	 * Execute the controller.	 *	 * @return  void	 *	 * @since   3.1	 */	public function execute()	{		// Get the application		/* @var InstallationApplicationWeb $app */		$app = $this->getApplication();		// Check for request forgeries.		JSession::checkToken() or $app->sendJsonResponse(new Exception(JText::_('JINVALID_TOKEN'), 403));		// Get the setup model.		$model = new InstallationModelSetup;		// Check the form		$model->checkForm('site');		// Redirect to the page.		$r = new stdClass;		$r->view = 'database';		$app->sendJsonResponse($r);	}}
<?php/** * @package     Joomla.Administrator * @subpackage  com_media * * @copyright   Copyright (C) 2005 - 2013 Open Source Matters, Inc. All rights reserved. * @license     GNU General Public License version 2 or later; see LICENSE.txt */defined('_JEXEC') or die;// Set up the sanitised target for the ul$ulTarget = str_replace('/', '-', $this->folders['data']->relative);?><ul class="nav nav-list collapse in" id="collapseFolder-<?php echo $ulTarget; ?>"><?php if (isset($this->folders['children'])) :	foreach ($this->folders['children'] as $folder) :	// Get a sanitised name for the target	$target = str_replace('/', '-', $folder['data']->relative); ?>	<li id="<?php echo $target; ?>">		<i class="icon-folder-2 pull-left" data-toggle="collapse" data-target="#collapseFolder-<?php echo $target; ?>"></i>		<a href="index.php?option=com_media&amp;view=mediaList&amp;tmpl=component&amp;folder=<?php echo $folder['data']->relative; ?>" target="folderframe">			<?php echo $folder['data']->name; ?>		</a>		<?php echo $this->getFolderLevel($folder); ?>	</li><?php endforeach;endif; ?></ul>
<?php/** * @package     Joomla.Administrator * @subpackage  com_installer * * @copyright   Copyright (C) 2005 - 2013 Open Source Matters, Inc. All rights reserved. * @license     GNU General Public License version 2 or later; see LICENSE.txt */defined('_JEXEC') or die;$state			= $this->get('State');$message1		= $state->get('message');$message2		= $state->get('extension_message');?><table class="adminform">	<tbody>		<?php if ($message1) : ?>		<tr>			<th><?php echo $message1 ?></th>		</tr>		<?php endif; ?>		<?php if ($message2) : ?>		<tr>			<td><?php echo $message2; ?></td>		</tr>		<?php endif; ?>	</tbody></table>
<?php/** * @package     Joomla.Site * @subpackage  Templates.beez3 * * @copyright   Copyright (C) 2005 - 2013 Open Source Matters, Inc. All rights reserved. * @license     GNU General Public License version 2 or later; see LICENSE.txt */defined('_JEXEC') or die;$app = JFactory::getApplication();$templateparams = $app->getTemplate(true)->params;$images = json_decode($this->item->images);$urls = json_decode($this->item->urls);JHtml::addIncludePath(JPATH_COMPONENT . '/helpers');// Create shortcut to parameters.$params = $this->item->params;?><article class="item-page<?php echo $this->pageclass_sfx?>"><?php if ($this->params->get('show_page_heading')) : ?><?php if ($this->params->get('show_page_heading') and $params->get('show_title')) :?><hgroup><?php endif; ?><h1>	<?php echo $this->escape($this->params->get('page_heading')); ?></h1><?php endif; ?><?phpif (!empty($this->item->pagination) && $this->item->pagination && !$this->item->paginationposition && $this->item->paginationrelative){	echo $this->item->pagination;}if ($params->get('show_title')) : ?>		<h2>			<?php echo $this->escape($this->item->title); ?>		</h2><?php endif; ?><?php if ($this->params->get('show_page_heading') and $params->get('show_title')) :?></hgroup><?php endif; ?><?php if ($params->get('access-edit') ||  $params->get('show_print_icon') || $params->get('show_email_icon')) : ?>		<ul class="actions">		<?php if (!$this->print) : ?>				<?php if ($params->get('show_print_icon')) : ?>				<li class="print-icon">						<?php echo JHtml::_('icon.print_popup', $this->item, $params, array(), true); ?>				</li>				<?php endif; ?>				<?php if ($params->get('show_email_icon')) : ?>				<li class="email-icon">						<?php echo JHtml::_('icon.email', $this->item, $params, array(), true); ?>				</li>				<?php endif; ?>				<?php if ($this->user->authorise('core.edit', 'com_content.article.'.$this->item->id)) : ?>						<li class="edit-icon">							<?php echo JHtml::_('icon.edit', $this->item, $params, array(), true); ?>						</li>					<?php endif; ?>		<?php else : ?>				<li>						<?php echo JHtml::_('icon.print_screen', $this->item, $params, array(), true); ?>				</li>		<?php endif; ?>		</ul><?php endif; ?>	<?php  if (!$params->get('show_intro')) :		echo $this->item->event->afterDisplayTitle;	endif; ?>	<?php echo $this->item->event->beforeDisplayContent; ?><?php $useDefList = (($params->get('show_author')) or ($params->get('show_category')) or ($params->get('show_parent_category'))	or ($params->get('show_create_date')) or ($params->get('show_modify_date')) or ($params->get('show_publish_date'))	or ($params->get('show_hits'))); ?><?php if ($useDefList) : ?> <dl class="article-info"> <dt class="article-info-term"><?php  echo JText::_('COM_CONTENT_ARTICLE_INFO'); ?></dt><?php endif; ?><?php if ($params->get('show_parent_category') && $this->item->parent_slug != '1:root') : ?>		<dd class="parent-category-name">			<?php 	$title = $this->escape($this->item->parent_title);					$url = '<a href="'.JRoute::_(ContentHelperRoute::getCategoryRoute($this->item->parent_slug)).'">'.$title.'</a>';?>			<?php if ($params->get('link_parent_category') and $this->item->parent_slug) : ?>				<?php echo JText::sprintf('COM_CONTENT_PARENT', $url); ?>				<?php else : ?>				<?php echo JText::sprintf('COM_CONTENT_PARENT', $title); ?>			<?php endif; ?>		</dd><?php endif; ?><?php if ($params->get('show_category')) : ?>		<dd class="category-name">			<?php 	$title = $this->escape($this->item->category_title);					$url = '<a href="'.JRoute::_(ContentHelperRoute::getCategoryRoute($this->item->catslug)).'">'.$title.'</a>';?>			<?php if ($params->get('link_category') and $this->item->catslug) : ?>				<?php echo JText::sprintf('COM_CONTENT_CATEGORY', $url); ?>				<?php else : ?>				<?php echo JText::sprintf('COM_CONTENT_CATEGORY', $title); ?>			<?php endif; ?>		</dd><?php endif; ?><?php if ($params->get('show_create_date')) : ?>		<dd class="create">		<?php echo JText::sprintf('COM_CONTENT_CREATED_DATE_ON', JHtml::_('date', $this->item->created, JText::_('DATE_FORMAT_LC2'))); ?>		</dd><?php endif; ?><?php if ($params->get('show_modify_date')) : ?>		<dd class="modified">		<?php echo JText::sprintf('COM_CONTENT_LAST_UPDATED', JHtml::_('date', $this->item->modified, JText::_('DATE_FORMAT_LC2'))); ?>		</dd><?php endif; ?><?php if ($params->get('show_publish_date')) : ?>		<dd class="published">		<?php echo JText::sprintf('COM_CONTENT_PUBLISHED_DATE_ON', JHtml::_('date', $this->item->publish_up, JText::_('DATE_FORMAT_LC2'))); ?>		</dd><?php endif; ?><?php if ($params->get('show_author') && !empty($this->item->author )) : ?>	<dd class="createdby">		<?php $author = $this->item->author; ?>		<?php $author = ($this->item->created_by_alias ? $this->item->created_by_alias : $author);?>			<?php if (!empty($this->item->contactid ) &&  $params->get('link_author') == true):?>				<?php echo JText::sprintf('COM_CONTENT_WRITTEN_BY',					JHtml::_('link', JRoute::_('index.php?option=com_contact&view=contact&id=' . $this->item->contactid), $author)				); ?>			<?php else :?>				<?php echo JText::sprintf('COM_CONTENT_WRITTEN_BY', $author); ?>			<?php endif; ?>	</dd><?php endif; ?><?php if ($params->get('show_hits')) : ?>		<dd class="hits">		<?php echo JText::sprintf('COM_CONTENT_ARTICLE_HITS', $this->item->hits); ?>		</dd><?php endif; ?><?php if ($useDefList) : ?> </dl><?php endif; ?>	<?php if (isset ($this->item->toc)) : ?>		<?php echo $this->item->toc; ?>	<?php endif; ?><?php if (isset($urls) AND ((!empty($urls->urls_position) AND ($urls->urls_position == '0')) OR ($params->get('urls_position') == '0' AND empty($urls->urls_position)))		OR (empty($urls->urls_position) AND (!$params->get('urls_position')))) : ?>	<?php echo $this->loadTemplate('links'); ?><?php endif; ?>	<?php  if (isset($images->image_fulltext) and !empty($images->image_fulltext)) : ?>	<?php $imgfloat = (empty($images->float_fulltext)) ? $params->get('float_fulltext') : $images->float_fulltext; ?>	<div class="img-fulltext-<?php echo htmlspecialchars($imgfloat); ?>">	<img		<?php if ($images->image_fulltext_caption):			echo 'class="caption"'.' title="' .htmlspecialchars($images->image_fulltext_caption) .'"';		endif; ?>		src="<?php echo htmlspecialchars($images->image_fulltext); ?>" alt="<?php echo htmlspecialchars($images->image_fulltext_alt); ?>"/>	</div>	<?php endif; ?><?phpif (!empty($this->item->pagination) AND $this->item->pagination AND !$this->item->paginationposition AND !$this->item->paginationrelative):	echo $this->item->pagination;endif;?>	<?php echo $this->item->text; ?><?php // TAGS ?><?php if ($params->get('show_tags', 1) && !empty($this->item->tags)) : ?>	<?php $this->item->tagLayout = new JLayoutFile('joomla.content.tags'); ?>	<?php echo $this->item->tagLayout->render($this->item->tags->itemTags); ?><?php endif; ?><?phpif (!empty($this->item->pagination) AND $this->item->pagination AND $this->item->paginationposition AND!$this->item->paginationrelative):	echo $this->item->pagination;?><?php endif; ?>	<?php if (isset($urls) AND ((!empty($urls->urls_position) AND ($urls->urls_position == '1')) OR ( $params->get('urls_position') == '1'))) : ?>	<?php echo $this->loadTemplate('links'); ?>	<?php endif; ?><?phpif (!empty($this->item->pagination) AND $this->item->pagination AND $this->item->paginationposition AND $this->item->paginationrelative):	echo $this->item->pagination;?><?php endif; ?>	<?php echo $this->item->event->afterDisplayContent; ?></article>
<?php/** * @package     Joomla.Platform * @subpackage  HTTP * * @copyright   Copyright (C) 2005 - 2013 Open Source Matters, Inc. All rights reserved. * @license     GNU General Public License version 2 or later; see LICENSE */defined('JPATH_PLATFORM') or die;/** * HTTP response data object class. * * @package     Joomla.Platform * @subpackage  HTTP * @since       11.3 */class JHttpResponse{	/**	 * @var    integer  The server response code.	 * @since  11.3	 */	public $code;	/**	 * @var    array  Response headers.	 * @since  11.3	 */	public $headers = array();	/**	 * @var    string  Server response body.	 * @since  11.3	 */	public $body;}
<?php/** * @package     Joomla.Site * @subpackage  com_newsfeeds * * @copyright   Copyright (C) 2005 - 2013 Open Source Matters, Inc. All rights reserved. * @license     GNU General Public License version 2 or later; see LICENSE.txt */defined('_JEXEC') or die;$class = ' class="first"';if (count($this->items[$this->parent->id]) > 0 && $this->maxLevelcat != 0) :?><ul><?php foreach ($this->items[$this->parent->id] as $id => $item) : ?>	<?php	if ($this->params->get('show_empty_categories_cat') || $item->numitems || count($item->getChildren())) :	if (!isset($this->items[$this->parent->id][$id + 1]))	{		$class = ' class="last"';	}	?>	<li<?php echo $class; ?>>	<?php $class = ''; ?>		<span class="item-title"><a href="<?php echo JRoute::_(NewsfeedsHelperRoute::getCategoryRoute($item->id));?>">			<?php echo $this->escape($item->title); ?></a>		</span>		<?php if ($this->params->get('show_subcat_desc_cat') == 1) :?>		<?php if ($item->description) : ?>			<div class="category-desc">				<?php echo JHtml::_('content.prepare', $item->description, '', 'com_newsfeeds.categories'); ?>			</div>		<?php endif; ?>        <?php endif; ?>		<?php if ($this->params->get('show_cat_items_cat') == 1) :?>			<dl class="newsfeed-count"><dt>				<?php echo JText::_('COM_NEWSFEEDS_CAT_NUM'); ?></dt>				<dd><?php echo $item->numitems; ?></dd>			</dl>		<?php endif; ?>		<?php if (count($item->getChildren()) > 0) :			$this->items[$item->id] = $item->getChildren();			$this->parent = $item;			$this->maxLevelcat--;			echo $this->loadTemplate('items');			$this->parent = $item->getParent();			$this->maxLevelcat++;		endif; ?>	</li>	<?php endif; ?><?php endforeach; ?></ul><?php endif; ?>
<?php/** * @package     Joomla.Administrator * @subpackage  com_menus * * @copyright   Copyright (C) 2005 - 2013 Open Source Matters, Inc. All rights reserved. * @license     GNU General Public License version 2 or later; see LICENSE.txt */defined('_JEXEC') or die;/** * The HTML Menus Menu Menus View. * * @package     Joomla.Administrator * @subpackage  com_menus * @since       1.6 */class MenusViewMenus extends JViewLegacy{	protected $items;	protected $modules;	protected $pagination;	protected $state;	/**	 * Display the view	 */	public function display($tpl = null)	{		$this->items		= $this->get('Items');		$this->modules		= $this->get('Modules');		$this->pagination	= $this->get('Pagination');		$this->state		= $this->get('State');		MenusHelper::addSubmenu('menus');		// Check for errors.		if (count($errors = $this->get('Errors')))		{			JError::raiseError(500, implode("\n", $errors));			return false;		}		$this->addToolbar();		$this->sidebar = JHtmlSidebar::render();		parent::display($tpl);	}	/**	 * Add the page title and toolbar.	 *	 * @since   1.6	 */	protected function addToolbar()	{		require_once JPATH_COMPONENT.'/helpers/menus.php';		$canDo	= MenusHelper::getActions($this->state->get('filter.parent_id'));		JToolbarHelper::title(JText::_('COM_MENUS_VIEW_MENUS_TITLE'), 'menumgr.png');		if ($canDo->get('core.create'))		{			JToolbarHelper::addNew('menu.add');		}		if ($canDo->get('core.edit'))		{			JToolbarHelper::editList('menu.edit');		}		if ($canDo->get('core.delete'))		{			JToolbarHelper::divider();			JToolbarHelper::deleteList('', 'menus.delete');		}		JToolbarHelper::custom('menus.rebuild', 'refresh.png', 'refresh_f2.png', 'JTOOLBAR_REBUILD', false);		if ($canDo->get('core.admin'))		{			JToolbarHelper::divider();			JToolbarHelper::preferences('com_menus');		}		JToolbarHelper::divider();		JToolbarHelper::help('JHELP_MENUS_MENU_MANAGER');	}}
<?php/** * @package     Joomla.Site * @subpackage  mod_related_items * * @copyright   Copyright (C) 2005 - 2013 Open Source Matters, Inc. All rights reserved. * @license     GNU General Public License version 2 or later; see LICENSE.txt */defined('_JEXEC') or die;?><ul class="relateditems<?php echo $moduleclass_sfx; ?>"><?php foreach ($list as $item) :	?><li>	<a href="<?php echo $item->route; ?>">		<?php if ($showDate) echo JHTML::_('date', $item->created, JText::_('DATE_FORMAT_LC4')). " - "; ?>		<?php echo $item->title; ?></a></li><?php endforeach; ?></ul>
<?php/** * @package     Joomla.Administrator * @subpackage  com_admin * * @copyright   Copyright (C) 2005 - 2013 Open Source Matters, Inc. All rights reserved. * @license     GNU General Public License version 2 or later; see LICENSE.txt */defined('_JEXEC') or die;/** * Admin Controller * * @package     Joomla.Administrator * @subpackage  com_admin * @since       1.6 */class AdminController extends JControllerLegacy{}
<?php/** * @package     Joomla.Site * @subpackage  com_newsfeeds * * @copyright   Copyright (C) 2005 - 2013 Open Source Matters, Inc. All rights reserved. * @license     GNU General Public License version 2 or later; see LICENSE.txt */defined('_JEXEC') or die;/** * This models supports retrieving lists of newsfeed categories. * * @package     Joomla.Site * @subpackage  com_newsfeeds * @since       1.6 */class NewsfeedsModelCategories extends JModelList{	/**	 * Model context string.	 *	 * @var		string	 */	public $_context = 'com_newsfeeds.categories';	/**	 * The category context (allows other extensions to derived from this model).	 *	 * @var		string	 */	protected $_extension = 'com_newsfeeds';	private $_parent = null;	private $_items = null;	/**	 * Method to auto-populate the model state.	 *	 * Note. Calling getState in this method will result in recursion.	 *	 * @since   1.6	 */	protected function populateState($ordering = null, $direction = null)	{		$app = JFactory::getApplication();		$this->setState('filter.extension', $this->_extension);		// Get the parent id if defined.		$parentId = $app->input->getInt('id');		$this->setState('filter.parentId', $parentId);		$params = $app->getParams();		$this->setState('params', $params);		$this->setState('filter.published',	1);		$this->setState('filter.access',	true);	}	/**	 * Method to get a store id based on model configuration state.	 *	 * This is necessary because the model is used by the component and	 * different modules that might need different sets of data or different	 * ordering requirements.	 *	 * @param   string  $id	A prefix for the store id.	 *	 * @return  string  A store id.	 */	protected function getStoreId($id = '')	{		// Compile the store id.		$id	.= ':'.$this->getState('filter.extension');		$id	.= ':'.$this->getState('filter.published');		$id	.= ':'.$this->getState('filter.access');		$id	.= ':'.$this->getState('filter.parentId');		return parent::getStoreId($id);	}	/**	 * redefine the function an add some properties to make the styling more easy	 *	 * @return mixed An array of data items on success, false on failure.	 */	public function getItems()	{		if (!count($this->_items))		{			$app = JFactory::getApplication();			$menu = $app->getMenu();			$active = $menu->getActive();			$params = new JRegistry;			if ($active)			{				$params->loadString($active->params);			}			$options = array();			$options['countItems'] = $params->get('show_cat_items_cat', 1) || !$params->get('show_empty_categories_cat', 0);			$categories = JCategories::getInstance('Newsfeeds', $options);			$this->_parent = $categories->get($this->getState('filter.parentId', 'root'));			if (is_object($this->_parent))			{				$this->_items = $this->_parent->getChildren();			} else {				$this->_items = false;			}		}		return $this->_items;	}	public function getParent()	{		if (!is_object($this->_parent))		{			$this->getItems();		}		return $this->_parent;	}}
<?php/** * @package     Joomla.Platform * @subpackage  String * * @copyright   Copyright (C) 2005 - 2011 Open Source Matters, Inc. All rights reserved. * @license     GNU General Public License version 2 or later; see LICENSE */defined('JPATH_PLATFORM') or die;/** * Joomla Platform String Inflector Class * * The Inflector transforms words * * @package     Joomla.Platform * @subpackage  String * @since       12.1 */class JStringInflector{	/**	 * The singleton instance.	 *	 * @var    JStringInflector	 * @since  12.1	 */	private static $_instance;	/**	 * The inflector rules for singularisation, pluralisation and countability.	 *	 * @var    array	 * @since  12.1	 */	private $_rules = array(		'singular' => array(			'/(matr)ices$/i' => '\1ix',			'/(vert|ind)ices$/i' => '\1ex',			'/(alumn|bacill|cact|foc|fung|nucle|radi|stimul|syllab|termin|viri?)i$/i' => '\1us',			'/([ftw]ax)es/i' => '\1',			'/(cris|ax|test)es$/i' => '\1is',			'/(shoe|slave)s$/i' => '\1',			'/(o)es$/i' => '\1',			'/([^aeiouy]|qu)ies$/i' => '\1y',			'/$1ses$/i' => '\s',			'/ses$/i' => '\s',			'/eaus$/' => 'eau',			'/^(.*us)$/' => '\\1',			'/s$/i' => '',		),		'plural' => array(			'/([m|l])ouse$/i' => '\1ice',			'/(matr|vert|ind)(ix|ex)$/i'  => '\1ices',			'/(x|ch|ss|sh)$/i' => '\1es',			'/([^aeiouy]|qu)y$/i' => '\1ies',			'/([^aeiouy]|qu)ies$/i' => '\1y',			'/(?:([^f])fe|([lr])f)$/i' => '\1\2ves',			'/sis$/i' => 'ses',			'/([ti])um$/i' => '\1a',			'/(buffal|tomat)o$/i' => '\1\2oes',			'/(alumn|bacill|cact|foc|fung|nucle|radi|stimul|syllab|termin|vir)us$/i' => '\1i',			'/us$/i' => 'uses',			'/(ax|cris|test)is$/i' => '\1es',			'/s$/i' => 's',			'/$/' => 's',		),		'countable' => array(			'id',			'hits',			'clicks',		),	);	/**	 * Cached inflections.	 *	 * The array is in the form [singular => plural]	 *	 * @var    array	 * @since  12.1	 */	private $_cache = array();	/**	 * Protected constructor.	 *	 * @since  12.1	 */	protected function __construct()	{		// Pre=populate the irregual singular/plural.		$this			->addWord('deer')			->addWord('moose')			->addWord('sheep')			->addWord('bison')			->addWord('salmon')			->addWord('pike')			->addWord('trout')			->addWord('fish')			->addWord('swine')			->addWord('alias', 'aliases')			->addWord('bus', 'buses')			->addWord('foot', 'feet')			->addWord('goose', 'geese')			->addWord('hive', 'hives')			->addWord('louse', 'lice')			->addWord('man', 'men')			->addWord('mouse', 'mice')			->addWord('ox', 'oxen')			->addWord('quiz', 'quizes')			->addWord('status', 'statuses')			->addWord('tooth', 'teeth')			->addWord('woman', 'women');	}	/**	 * Adds inflection regex rules to the inflector.	 *	 * @param   mixed   $data      A string or an array of strings or regex rules to add.	 * @param   string  $ruleType  The rule type: singular | plural | countable	 *	 * @return  void	 *	 * @since   12.1	 * @throws  InvalidArgumentException	 */	private function _addRule($data, $ruleType)	{		if (is_string($data))		{			$data = array($data);		}		elseif (!is_array($data))		{			// Do not translate.			throw new InvalidArgumentException('Invalid inflector rule data.');		}		foreach ($data as $rule)		{			// Ensure a string is pushed.			array_push($this->_rules[$ruleType], (string) $rule);		}	}	/**	 * Gets an inflected word from the cache where the singular form is supplied.	 *	 * @param   string  $singular  A singular form of a word.	 *	 * @return  mixed  The cached inflection or false if none found.	 *	 * @since   12.1	 */	private function _getCachedPlural($singular)	{		$singular = JString::strtolower($singular);		// Check if the word is in cache.		if (isset($this->_cache[$singular]))		{			return $this->_cache[$singular];		}		return false;	}	/**	 * Gets an inflected word from the cache where the plural form is supplied.	 *	 * @param   string  $plural  A plural form of a word.	 *	 * @return  mixed  The cached inflection or false if none found.	 *	 * @since   12.1	 */	private function _getCachedSingular($plural)	{		$plural = JString::strtolower($plural);		return array_search($plural, $this->_cache);	}	/**	 * Execute a regex from rules.	 *	 * The 'plural' rule type expects a singular word.	 * The 'singular' rule type expects a plural word.	 *	 * @param   string  $word      The string input.	 * @param   string  $ruleType  String (eg, singular|plural)	 *	 * @return  mixed  An inflected string, or false if no rule could be applied.	 *	 * @since   12.1	 */	private function _matchRegexRule($word, $ruleType)	{		// Cycle through the regex rules.		foreach ($this->_rules[$ruleType] as $regex => $replacement)		{			$matches = 0;			$matchedWord = preg_replace($regex, $replacement, $word, -1, $matches);			if ($matches > 0)			{				return $matchedWord;			}		}		return false;	}	/**	 * Sets an inflected word in the cache.	 *	 * @param   string  $singular  The singular form of the word.	 * @param   string  $plural    The plural form of the word. If omitted, it is assumed the singular and plural are identical.	 *	 * @return  void	 *	 * @since   12.1	 */	private function _setCache($singular, $plural = null)	{		$singular = JString::strtolower($singular);		if ($plural === null)		{			$plural = $singular;		}		else		{			$plural = JString::strtolower($plural);		}		$this->_cache[$singular] = $plural;	}	/**	 * Adds a countable word.	 *	 * @param   mixed  $data  A string or an array of strings to add.	 *	 * @return  JStringInflector  Returns this object to support chaining.	 *	 * @since   12.1	 */	public function addCountableRule($data)	{		$this->_addRule($data, 'countable');		return $this;	}	/**	 * Adds a specific singular-plural pair for a word.	 *	 * @param   string  $singular  The singular form of the word.	 * @param   string  $plural    The plural form of the word. If omitted, it is assumed the singular and plural are identical.	 *	 * @return  JStringInflector  Returns this object to support chaining.	 *	 * @since   12.1	 */	public function addWord($singular, $plural =null)	{		$this->_setCache($singular, $plural);		return $this;	}	/**	 * Adds a pluralisation rule.	 *	 * @param   mixed  $data  A string or an array of regex rules to add.	 *	 * @return  JStringInflector  Returns this object to support chaining.	 *	 * @since   12.1	 */	public function addPluraliseRule($data)	{		$this->_addRule($data, 'plural');		return $this;	}	/**	 * Adds a singularisation rule.	 *	 * @param   mixed  $data  A string or an array of regex rules to add.	 *	 * @return  JStringInflector  Returns this object to support chaining.	 *	 * @since   12.1	 */	public function addSingulariseRule($data)	{		$this->_addRule($data, 'singular');		return $this;	}	/**	 * Gets an instance of the JStringInflector singleton.	 *	 * @param   boolean  $new  If true (default is false), returns a new instance regardless if one exists.	 *                         This argument is mainly used for testing.	 *	 * @return  JStringInflector	 *	 * @since   12.1	 */	public static function getInstance($new = false)	{		if ($new)		{			return new static;		}		elseif (!is_object(self::$_instance))		{			self::$_instance = new static;		}		return self::$_instance;	}	/**	 * Checks if a word is countable.	 *	 * @param   string  $word  The string input.	 *	 * @return  boolean  True if word is countable, false otherwise.	 *	 * @since  12.1	 */	public function isCountable($word)	{		return (boolean) in_array($word, $this->_rules['countable']);	}	/**	 * Checks if a word is in a plural form.	 *	 * @param   string  $word  The string input.	 *	 * @return  boolean  True if word is plural, false if not.	 *	 * @since  12.1	 */	public function isPlural($word)	{		// Try the cache for an known inflection.		$inflection = $this->_getCachedSingular($word);		if ($inflection !== false)		{			return true;		}		// Compute the inflection to cache the values, and compare.		return $this->toPlural($this->toSingular($word)) == $word;	}	/**	 * Checks if a word is in a singular form.	 *	 * @param   string  $word  The string input.	 *	 * @return  boolean  True if word is singular, false if not.	 *	 * @since  12.1	 */	public function isSingular($word)	{		// Try the cache for an known inflection.		$inflection = $this->_getCachedPlural($word);		if ($inflection !== false)		{			return true;		}		// Compute the inflection to cache the values, and compare.		return $this->toSingular($this->toPlural($word)) == $word;	}	/**	 * Converts a word into its plural form.	 *	 * @param   string  $word  The singular word to pluralise.	 *	 * @return  mixed  An inflected string, or false if no rule could be applied.	 *	 * @since  12.1	 */	public function toPlural($word)	{		// Try to get the cached plural form from the singular.		$cache = $this->_getCachedPlural($word);		if ($cache !== false)		{			return $cache;		}		// Check if the word is a known singular.		if ($this->_getCachedSingular($word))		{			return false;		}		// Compute the inflection.		$inflected = $this->_matchRegexRule($word, 'plural');		if ($inflected !== false)		{			$this->_setCache($word, $inflected);			return $inflected;		}		return false;	}	/**	 * Converts a word into its singular form.	 *	 * @param   string  $word  The plural word to singularise.	 *	 * @return  mixed  An inflected string, or false if no rule could be applied.	 *	 * @since  12.1	 */	public function toSingular($word)	{		// Try to get the cached singular form from the plural.		$cache = $this->_getCachedSingular($word);		if ($cache !== false)		{			return $cache;		}		// Check if the word is a known plural.		if ($this->_getCachedPlural($word))		{			return false;		}		// Compute the inflection.		$inflected = $this->_matchRegexRule($word, 'singular');		if ($inflected !== false)		{			$this->_setCache($inflected, $word);			return $inflected;		}		return false;	}}
<?php/** * @package     Joomla.Administrator * @subpackage  com_templates * * @copyright   Copyright (C) 2005 - 2013 Open Source Matters, Inc. All rights reserved. * @license     GNU General Public License version 2 or later; see LICENSE.txt */defined('_JEXEC') or die;	$fieldSets = $this->form->getFieldsets('params');	foreach ($fieldSets as $name => $fieldSet) :		$label = !empty($fieldSet->label) ? $fieldSet->label : 'COM_TEMPLATES_'.$name.'_FIELDSET_LABEL';		echo JHtml::_('sliders.panel', JText::_($label), $name.'-options');			if (isset($fieldSet->description) && trim($fieldSet->description)) :				echo '<p class="tip">'.$this->escape(JText::_($fieldSet->description)).'</p>';			endif;			?>		<fieldset class="panelform">			<ul class="adminformlist">			<?php foreach ($this->form->getFieldset($name) as $field) : ?>				<li>				<?php if (!$field->hidden) : ?>					<?php echo $field->label; ?>				<?php endif; ?>					<?php echo $field->input; ?>				</li>			<?php endforeach; ?>			</ul>		</fieldset>	<?php endforeach;  ?>
<?php/** * @package     Joomla.Installation * @subpackage  Controller * * @copyright   Copyright (C) 2005 - 2013 Open Source Matters, Inc. All rights reserved. * @license     GNU General Public License version 2 or later; see LICENSE.txt */defined('_JEXEC') or die;/** * Controller class to refresh the preinstall view for the Joomla Installer. * * @package     Joomla.Installation * @subpackage  Controller * @since       3.1 */class InstallationControllerPreinstall extends JControllerBase{	/**	 * Execute the controller.	 *	 * @return  void	 *	 * @since   3.1	 */	public function execute()	{		// Get the application		/* @var InstallationApplicationWeb $app */		$app = $this->getApplication();		// Check for request forgeries.		JSession::checkToken() or $app->sendJsonResponse(new Exception(JText::_('JINVALID_TOKEN'), 403));		// Redirect to the page.		$r = new stdClass;		$r->view = 'preinstall';		$app->sendJsonResponse($r);	}}
<?php/** * @package     Joomla.Site * @subpackage  com_content * * @copyright   Copyright (C) 2005 - 2013 Open Source Matters, Inc. All rights reserved. * @license     GNU General Public License version 2 or later; see LICENSE.txt */defined('_JEXEC') or die;JLoader::register('ContentHelper', JPATH_ADMINISTRATOR . '/components/com_content/helpers/content.php');JLoader::register('CategoryHelperAssociation', JPATH_ADMINISTRATOR . '/components/com_categories/helpers/association.php');/** * Content Component Association Helper * * @package     Joomla.Site * @subpackage  com_content * @since       3.0 */abstract class ContentHelperAssociation extends CategoryHelperAssociation{	/**	 * Method to get the associations for a given item	 *	 * @param   integer  $id    Id of the item	 * @param   string   $view  Name of the view	 *	 * @return  array   Array of associations for the item	 *	 * @since  3.0	 */	public static function getAssociations($id = 0, $view = null)	{		jimport('helper.route', JPATH_COMPONENT_SITE);		$app = JFactory::getApplication();		$jinput = $app->input;		$view = is_null($view) ? $jinput->get('view') : $view;		$id = empty($id) ? $jinput->getInt('id') : $id;		if ($view == 'article')		{			if ($id)			{				$associations = JLanguageAssociations::getAssociations('com_content', '#__content', 'com_content.item', $id);				$return = array();				foreach ($associations as $tag => $item)				{					$return[$tag] = ContentHelperRoute::getArticleRoute($item->id, $item->catid, $item->language);				}				return $return;			}		}		if ($view == 'category' || $view == 'categories')		{			return self::getCategoryAssociations($id, 'com_content');		}		return array();	}}
<?php/** * @package     Joomla.Site * @subpackage  mod_weblinks * * @copyright   Copyright (C) 2005 - 2013 Open Source Matters, Inc. All rights reserved. * @license     GNU General Public License version 2 or later; see LICENSE.txt */defined('_JEXEC') or die;// Include the weblinks functions only oncerequire_once __DIR__ . '/helper.php';$list = ModWeblinksHelper::getList($params);if (!count($list)){	return;}$moduleclass_sfx = htmlspecialchars($params->get('moduleclass_sfx'));require JModuleHelper::getLayoutPath('mod_weblinks', $params->get('layout', 'default'));
<?php/** * @package     Joomla.Administrator * @subpackage  com_users * * @copyright   Copyright (C) 2005 - 2013 Open Source Matters, Inc. All rights reserved. * @license     GNU General Public License version 2 or later; see LICENSE.txt */defined('_JEXEC') or die;/** * Users mail controller. * * @package     Joomla.Administrator * @subpackage  com_users */class UsersControllerMail extends JControllerLegacy{	public function send()	{		// Check for request forgeries.		JSession::checkToken('request') or jexit(JText::_('JINVALID_TOKEN'));		$model = $this->getModel('Mail');		if ($model->send())		{			$type = 'message';		}		else		{			$type = 'error';		}		$msg = $model->getError();		$this->setredirect('index.php?option=com_users&view=mail', $msg, $type);	}	public function cancel()	{		// Check for request forgeries.		JSession::checkToken('request') or jexit(JText::_('JINVALID_TOKEN'));		$this->setRedirect('index.php');	}}
<?php/** * @package     Joomla.Site * @subpackage  com_weblinks * * @copyright   Copyright (C) 2005 - 2013 Open Source Matters, Inc. All rights reserved. * @license     GNU General Public License version 2 or later; see LICENSE.txt */defined('_JEXEC') or die;$class = ' class="first"';if (count($this->items[$this->parent->id]) > 0 && $this->maxLevelcat != 0) :?><ul><?php foreach ($this->items[$this->parent->id] as $id => $item) : ?>	<?php	if ($this->params->get('show_empty_categories_cat') || $item->numitems || count($item->getChildren())) :	if (!isset($this->items[$this->parent->id][$id + 1]))	{		$class = ' class="last"';	}	?>	<li<?php echo $class; ?>>	<?php $class = ''; ?>		<span class="item-title"><a href="<?php echo JRoute::_(WeblinksHelperRoute::getCategoryRoute($item->id));?>">			<?php echo $this->escape($item->title); ?></a>		</span>		<?php if ($this->params->get('show_subcat_desc_cat') == 1) :?>		<?php if ($item->description) : ?>			<div class="category-desc">				<?php echo JHtml::_('content.prepare', $item->description, '', 'com_weblinks.categories'); ?>			</div>		<?php endif; ?>        <?php endif; ?>		<?php if ($this->params->get('show_cat_num_links_cat') == 1) :?>			<dl class="weblink-count"><dt>				<?php echo JText::_('COM_WEBLINKS_NUM'); ?></dt>				<dd><?php echo $item->numitems; ?></dd>			</dl>		<?php endif; ?>		<?php if (count($item->getChildren()) > 0) :			$this->items[$item->id] = $item->getChildren();			$this->parent = $item;			$this->maxLevelcat--;			echo $this->loadTemplate('items');			$this->parent = $item->getParent();			$this->maxLevelcat++;		endif; ?>	</li>	<?php endif; ?><?php endforeach; ?></ul><?php endif; ?>
<?php/** * @package    Joomla.Installation * * @copyright  Copyright (C) 2005 - 2013 Open Source Matters, Inc. All rights reserved. * @license    GNU General Public License version 2 or later; see LICENSE.txt */defined('JPATH_BASE') or die;JFormHelper::loadFieldClass('list');/** * Language Form Field class. * * @package  Joomla.Installation * @since    1.6 */class JFormFieldLanguage extends JFormFieldList{	/**	 * The form field type.	 *	 * @var		string	 * @since   1.6	 */	protected $type = 'Language';	/**	 * Method to get the field options.	 *	 * @return  array  The field option objects.	 *	 * @since   1.6	 */	protected function getOptions()	{		$app = JFactory::getApplication();		// Detect the native language.		$native = JLanguageHelper::detectLanguage();		if (empty($native))		{			$native = 'en-GB';		}		// Get a forced language if it exists.		$forced = $app->getLocalise();		if (!empty($forced['language']))		{			$native = $forced['language'];		}		// If a language is already set in the session, use this instead		$model   = new InstallationModelSetup;		$options = $model->getOptions();		if (isset($options['language']))		{			$native = $options['language'];		}		// Get the list of available languages.		$options = JLanguageHelper::createLanguageList($native);		if (!$options || $options  instanceof Exception)		{			$options = array();		}		// Sort languages by name		else		{			usort($options, array($this, '_sortLanguages'));		}		// Set the default value from the native language.		$this->value = $native;		// Merge any additional options in the XML definition.		$options = array_merge(parent::getOptions(), $options);		return $options;	}	/**	 * Method to sort languages by name.	 *	 * @param   string  $a  The first value to determine sort	 * @param   string  $b  The second value to determine sort	 *	 * @return  string	 *	 * @since    3.1	 */	protected function _sortLanguages($a, $b)	{		return strcmp($a['text'], $b['text']);	}}
<?php/** * @package     Joomla.Site * @subpackage  mod_articles_categories * * @copyright   Copyright (C) 2005 - 2013 Open Source Matters, Inc. All rights reserved. * @license     GNU General Public License version 2 or later; see LICENSE.txt */defined('_JEXEC') or die;?><ul class="categories-module<?php echo $moduleclass_sfx; ?>"><?phprequire JModuleHelper::getLayoutPath('mod_articles_categories', $params->get('layout', 'default').'_items');?></ul>
<?php/** * @package     Joomla.Platform * @subpackage  Environment * * @copyright   Copyright (C) 2005 - 2013 Open Source Matters, Inc. All rights reserved. * @license     GNU General Public License version 2 or later; see LICENSE */defined('JPATH_PLATFORM') or die;/** * JResponse Class. * * This class serves to provide the Joomla Platform with a common interface to access * response variables.  This includes header and body. * * @package     Joomla.Platform * @subpackage  Environment * @since       11.1 */class JResponse{	/**	 * @var    array  Body	 * @since  11.1	 */	protected static $body = array();	/**	 * @var    boolean  Cachable	 * @since  11.1	 */	protected static $cachable = false;	/**	 * @var    array  Headers	 * @since  11.1	 */	protected static $headers = array();	/**	 * Set/get cachable state for the response.	 *	 * If $allow is set, sets the cachable state of the response.  Always returns current state.	 *	 * @param   boolean  $allow  True to allow browser caching.	 *	 * @return  boolean  True if browser caching should be allowed	 *	 * @since   11.1	 */	public static function allowCache($allow = null)	{		if (!is_null($allow))		{			self::$cachable = (bool) $allow;		}		return self::$cachable;	}	/**	 * Set a header.	 *	 * If $replace is true, replaces any headers already defined with that $name.	 *	 * @param   string   $name     The name of the header to set.	 * @param   string   $value    The value of the header to set.	 * @param   boolean  $replace  True to replace any existing headers by name.	 *	 * @return  void	 *	 * @since   11.1	 */	public static function setHeader($name, $value, $replace = false)	{		$name = (string) $name;		$value = (string) $value;		if ($replace)		{			foreach (self::$headers as $key => $header)			{				if ($name == $header['name'])				{					unset(self::$headers[$key]);				}			}		}		self::$headers[] = array('name' => $name, 'value' => $value);	}	/**	 * Return array of headers.	 *	 * @return  array	 *	 * @since   11.1	 */	public static function getHeaders()	{		return self::$headers;	}	/**	 * Clear headers.	 *	 * @return  void	 *	 * @since   11.1	 */	public static function clearHeaders()	{		self::$headers = array();	}	/**	 * Send all headers.	 *	 * @return  void	 *	 * @since   11.1	 */	public static function sendHeaders()	{		if (!headers_sent())		{			foreach (self::$headers as $header)			{				if ('status' == strtolower($header['name']))				{					// 'status' headers indicate an HTTP status, and need to be handled slightly differently					header(ucfirst(strtolower($header['name'])) . ': ' . $header['value'], null, (int) $header['value']);				}				else				{					header($header['name'] . ': ' . $header['value'], false);				}			}		}	}	/**	 * Set body content.	 *	 * If body content already defined, this will replace it.	 *	 * @param   string  $content  The content to set to the response body.	 *	 * @return  void	 *	 * @since   11.1	 */	public static function setBody($content)	{		self::$body = array((string) $content);	}	/**	 * Prepend content to the body content	 *	 * @param   string  $content  The content to prepend to the response body.	 *	 * @return  void	 *	 * @since   11.1	 */	public static function prependBody($content)	{		array_unshift(self::$body, (string) $content);	}	/**	 * Append content to the body content	 *	 * @param   string  $content  The content to append to the response body.	 *	 * @return  void	 *	 * @since   11.1	 */	public static function appendBody($content)	{		array_push(self::$body, (string) $content);	}	/**	 * Return the body content	 *	 * @param   boolean  $toArray  Whether or not to return the body content as an array of strings or as a single string; defaults to false.	 *	 * @return  string  array	 *	 * @since   11.1	 */	public static function getBody($toArray = false)	{		if ($toArray)		{			return self::$body;		}		ob_start();		foreach (self::$body as $content)		{			echo $content;		}		return ob_get_clean();	}	/**	 * Sends all headers prior to returning the string	 *	 * @param   boolean  $compress  If true, compress the data	 *	 * @return  string	 *	 * @since   11.1	 */	public static function toString($compress = false)	{		$data = self::getBody();		// Don't compress something if the server is going to do it anyway. Waste of time.		if ($compress && !ini_get('zlib.output_compression') && ini_get('output_handler') != 'ob_gzhandler')		{			$data = self::compress($data);		}		if (self::allowCache() === false)		{			self::setHeader('Cache-Control', 'no-cache', false);			// HTTP 1.0			self::setHeader('Pragma', 'no-cache');		}		self::sendHeaders();		return $data;	}	/**	 * Compress the data	 *	 * Checks the accept encoding of the browser and compresses the data before	 * sending it to the client.	 *	 * @param   string  $data  Content to compress for output.	 *	 * @return  string  compressed data	 *	 * @note    Replaces _compress method in 11.1	 * @since   11.1	 */	protected static function compress($data)	{		$encoding = self::clientEncoding();		if (!$encoding)		{			return $data;		}		if (!extension_loaded('zlib') || ini_get('zlib.output_compression'))		{			return $data;		}		if (headers_sent())		{			return $data;		}		if (connection_status() !== 0)		{			return $data;		}		// Ideal level		$level = 4;		/*		$size		= strlen($data);		$crc		= crc32($data);		$gzdata		= "\x1f\x8b\x08\x00\x00\x00\x00\x00";		$gzdata		.= gzcompress($data, $level);		$gzdata	= substr($gzdata, 0, strlen($gzdata) - 4);		$gzdata	.= pack("V",$crc) . pack("V", $size);		*/		$gzdata = gzencode($data, $level);		self::setHeader('Content-Encoding', $encoding);		self::setHeader('X-Content-Encoded-By', 'Joomla! 1.6');		return $gzdata;	}	/**	 * Check, whether client supports compressed data	 *	 * @return  boolean	 *	 * @since   11.1	 * @note    Replaces _clientEncoding method from 11.1	 */	protected static function clientEncoding()	{		if (!isset($_SERVER['HTTP_ACCEPT_ENCODING']))		{			return false;		}		$encoding = false;		if (false !== strpos($_SERVER['HTTP_ACCEPT_ENCODING'], 'gzip'))		{			$encoding = 'gzip';		}		if (false !== strpos($_SERVER['HTTP_ACCEPT_ENCODING'], 'x-gzip'))		{			$encoding = 'x-gzip';		}		return $encoding;	}}
<?php/** * @package     Joomla.Libraries * @subpackage  HTML * * @copyright   Copyright (C) 2005 - 2013 Open Source Matters, Inc. All rights reserved. * @license     GNU General Public License version 2 or later; see LICENSE */defined('JPATH_PLATFORM') or die;/** * HTML utility class for creating a sortable table list * * @package     Joomla.Libraries * @subpackage  HTML * @since       3.0 */abstract class JHtmlSortablelist{	/**	 * @var    array  Array containing information for loaded files	 * @since  3.0	 */	protected static $loaded = array();	/**	 * Method to load the Sortable script and make table sortable	 *	 * @param   string   $tableId                 DOM id of the table	 * @param   string   $formId                  DOM id of the form	 * @param   string   $sortDir                 Sort direction	 * @param   string   $saveOrderingUrl         Save ordering url, ajax-load after an item dropped	 * @param   boolean  $proceedSaveOrderButton  Set whether a save order button is displayed	 * @param   boolean  $nestedList              Set whether the list is a nested list	 *	 * @return  void	 *	 * @since   3.0	 */	public static function sortable($tableId, $formId, $sortDir = 'asc', $saveOrderingUrl, $proceedSaveOrderButton = true, $nestedList = false)	{		// Only load once		if (isset(self::$loaded[__METHOD__]))		{			return;		}		// Depends on jQuery UI		JHtml::_('jquery.ui', array('core', 'sortable'));		JHtml::_('script', 'jui/sortablelist.js', false, true);		JHtml::_('stylesheet', 'jui/sortablelist.css', false, true, false);		// Attach sortable to document		JFactory::getDocument()->addScriptDeclaration("			(function ($){				$(document).ready(function (){					var sortableList = new $.JSortableList('#" . $tableId . " tbody','" . $formId . "','" . $sortDir . "' , '" . $saveOrderingUrl . "','','" . $nestedList . "');				});			})(jQuery);			"		);		if ($proceedSaveOrderButton)		{			self::_proceedSaveOrderButton();		}		// Set static array		self::$loaded[__METHOD__] = true;		return;	}	/**	 * Method to inject script for enabled and disable Save order button	 * when changing value of ordering input boxes	 *	 * @return  void	 *	 * @since   3.0	 */	public static function _proceedSaveOrderButton()	{		JFactory::getDocument()->addScriptDeclaration(			"(function ($){				$(document).ready(function (){					var saveOrderButton = $('.saveorder');					saveOrderButton.css({'opacity':'0.2', 'cursor':'default'}).attr('onclick','return false;');					var oldOrderingValue = '';					$('.text-area-order').focus(function ()					{						oldOrderingValue = $(this).attr('value');					})					.keyup(function (){						var newOrderingValue = $(this).attr('value');						if (oldOrderingValue != newOrderingValue)						{							saveOrderButton.css({'opacity':'1', 'cursor':'pointer'}).removeAttr('onclick')						}					});				});			})(jQuery);"		);		return;	}}
<?php/** * @package     Joomla.Platform * @subpackage  Application * * @copyright   Copyright (C) 2005 - 2013 Open Source Matters, Inc. All rights reserved. * @license     GNU General Public License version 2 or later; see LICENSE */defined('JPATH_PLATFORM') or die;/** * Base class for a Joomla! command line application. * * @package     Joomla.Platform * @subpackage  Application * @since       11.4 */class JApplicationCli extends JApplicationBase{	/**	 * @var    JRegistry  The application configuration object.	 * @since  11.1	 */	protected $config;	/**	 * @var    JApplicationCli  The application instance.	 * @since  11.1	 */	protected static $instance;	/**	 * Class constructor.	 *	 * @param   mixed  $input       An optional argument to provide dependency injection for the application's	 *                              input object.  If the argument is a JInputCli object that object will become	 *                              the application's input object, otherwise a default input object is created.	 * @param   mixed  $config      An optional argument to provide dependency injection for the application's	 *                              config object.  If the argument is a JRegistry object that object will become	 *                              the application's config object, otherwise a default config object is created.	 * @param   mixed  $dispatcher  An optional argument to provide dependency injection for the application's	 *                              event dispatcher.  If the argument is a JEventDispatcher object that object will become	 *                              the application's event dispatcher, if it is null then the default event dispatcher	 *                              will be created based on the application's loadDispatcher() method.	 *	 * @see     loadDispatcher()	 * @since   11.1	 */	public function __construct(JInputCli $input = null, JRegistry $config = null, JEventDispatcher $dispatcher = null)	{		// Close the application if we are not executed from the command line.		// @codeCoverageIgnoreStart		if (!defined('STDOUT') || !defined('STDIN') || !isset($_SERVER['argv']))		{			$this->close();		}		// @codeCoverageIgnoreEnd		// If a input object is given use it.		if ($input instanceof JInput)		{			$this->input = $input;		}		// Create the input based on the application logic.		else		{			if (class_exists('JInput'))			{				$this->input = new JInputCLI;			}		}		// If a config object is given use it.		if ($config instanceof JRegistry)		{			$this->config = $config;		}		// Instantiate a new configuration object.		else		{			$this->config = new JRegistry;		}		$this->loadDispatcher($dispatcher);		// Load the configuration object.		$this->loadConfiguration($this->fetchConfigurationData());		// Set the execution datetime and timestamp;		$this->set('execution.datetime', gmdate('Y-m-d H:i:s'));		$this->set('execution.timestamp', time());		// Set the current directory.		$this->set('cwd', getcwd());	}	/**	 * Returns a property of the object or the default value if the property is not set.	 *	 * @param   string  $key      The name of the property.	 * @param   mixed   $default  The default value (optional) if none is set.	 *	 * @return  mixed   The value of the configuration.	 *	 * @since   11.3	 */	public function get($key, $default = null)	{		return $this->config->get($key, $default);	}	/**	 * Returns a reference to the global JApplicationCli object, only creating it if it doesn't already exist.	 *	 * This method must be invoked as: $cli = JApplicationCli::getInstance();	 *	 * @param   string  $name  The name (optional) of the JApplicationCli class to instantiate.	 *	 * @return  JApplicationCli	 *	 * @since   11.1	 */	public static function getInstance($name = null)	{		// Only create the object if it doesn't exist.		if (empty(self::$instance))		{			if (class_exists($name) && (is_subclass_of($name, 'JApplicationCli')))			{				self::$instance = new $name;			}			else			{				self::$instance = new JApplicationCli;			}		}		return self::$instance;	}	/**	 * Execute the application.	 *	 * @return  void	 *	 * @since   11.1	 */	public function execute()	{		// Trigger the onBeforeExecute event.		$this->triggerEvent('onBeforeExecute');		// Perform application routines.		$this->doExecute();		// Trigger the onAfterExecute event.		$this->triggerEvent('onAfterExecute');	}	/**	 * Load an object or array into the application configuration object.	 *	 * @param   mixed  $data  Either an array or object to be loaded into the configuration object.	 *	 * @return  JApplicationCli  Instance of $this to allow chaining.	 *	 * @since   11.1	 */	public function loadConfiguration($data)	{		// Load the data into the configuration object.		if (is_array($data))		{			$this->config->loadArray($data);		}		elseif (is_object($data))		{			$this->config->loadObject($data);		}		return $this;	}	/**	 * Write a string to standard output.	 *	 * @param   string   $text  The text to display.	 * @param   boolean  $nl    True (default) to append a new line at the end of the output string.	 *	 * @return  JApplicationCli  Instance of $this to allow chaining.	 *	 * @codeCoverageIgnore	 * @since   11.1	 */	public function out($text = '', $nl = true)	{		fwrite(STDOUT, $text . ($nl ? "\n" : null));		return $this;	}	/**	 * Get a value from standard input.	 *	 * @return  string  The input string from standard input.	 *	 * @codeCoverageIgnore	 * @since   11.1	 */	public function in()	{		return rtrim(fread(STDIN, 8192), "\n");	}	/**	 * Modifies a property of the object, creating it if it does not already exist.	 *	 * @param   string  $key    The name of the property.	 * @param   mixed   $value  The value of the property to set (optional).	 *	 * @return  mixed   Previous value of the property	 *	 * @since   11.3	 */	public function set($key, $value = null)	{		$previous = $this->config->get($key);		$this->config->set($key, $value);		return $previous;	}	/**	 * Method to load a PHP configuration class file based on convention and return the instantiated data object.  You	 * will extend this method in child classes to provide configuration data from whatever data source is relevant	 * for your specific application.	 *	 * @param   string  $file   The path and filename of the configuration file. If not provided, configuration.php	 *                          in JPATH_BASE will be used.	 * @param   string  $class  The class name to instantiate.	 *	 * @return  mixed   Either an array or object to be loaded into the configuration object.	 *	 * @since   11.1	 */	protected function fetchConfigurationData($file = '', $class = 'JConfig')	{		// Instantiate variables.		$config = array();		if (empty($file) && defined('JPATH_BASE'))		{			$file = JPATH_BASE . '/configuration.php';			// Applications can choose not to have any configuration data			// by not implementing this method and not having a config file.			if (!file_exists($file))			{				$file = '';			}		}		if (!empty($file))		{			JLoader::register($class, $file);			if (class_exists($class))			{				$config = new $class;			}			else			{				throw new RuntimeException('Configuration class does not exist.');			}		}		return $config;	}	/**	 * Method to run the application routines.  Most likely you will want to instantiate a controller	 * and execute it, or perform some sort of task directly.	 *	 * @return  void	 *	 * @codeCoverageIgnore	 * @since   11.3	 */	protected function doExecute()	{		// Your application routines go here.	}}
<?php/** * @package     Joomla.Administrator * @subpackage  com_checkin * * @copyright   Copyright (C) 2005 - 2013 Open Source Matters, Inc. All rights reserved. * @license     GNU General Public License version 2 or later; see LICENSE.txt */defined('_JEXEC') or die;$listOrder	= $this->escape($this->state->get('list.ordering'));$listDirn	= $this->escape($this->state->get('list.direction'));?><form action="<?php echo JRoute::_('index.php?option=com_checkin');?>" method="post" name="adminForm" id="adminForm"><?php if (!empty( $this->sidebar)) : ?>	<div id="j-sidebar-container" class="span2">		<?php echo $this->sidebar; ?>	</div>	<div id="j-main-container" class="span10"><?php else : ?>	<div id="j-main-container"><?php endif;?>	<fieldset id="filter-bar">		<div class="filter-search fltlft">			<label class="filter-search-lbl" for="filter_search"><?php echo JText::_('JSEARCH_FILTER_LABEL'); ?></label>			<input type="text" name="filter_search" id="filter_search" value="<?php echo $this->escape($this->state->get('filter.search')); ?>" title="<?php echo JText::_('COM_CHECKIN_FILTER_SEARCH_DESC'); ?>" />			<button type="submit" class="btn"><?php echo JText::_('JSEARCH_FILTER_SUBMIT'); ?></button>			<button type="button" onclick="document.id('filter_search').value='';this.form.submit();"><?php echo JText::_('JSEARCH_FILTER_CLEAR'); ?></button>		</div>	</fieldset>	<div class="clr"> </div>	<table id="global-checkin" class="adminlist">		<thead>			<tr>				<th width="1%">					<input type="checkbox" name="checkall-toggle" value="" title="<?php echo JText::_('JGLOBAL_CHECK_ALL'); ?>" onclick="Joomla.checkAll(this)" />				</th>				<th class="left"><?php echo JHtml::_('grid.sort', 'COM_CHECKIN_DATABASE_TABLE', 'table', $listDirn, $listOrder); ?></th>				<th><?php echo JHtml::_('grid.sort', 'COM_CHECKIN_ITEMS_TO_CHECK_IN', 'count', $listDirn, $listOrder); ?></th>			</tr>		</thead>		<tbody>		<?php foreach ($this->items as $table => $count): $i = 0;?>			<tr class="row<?php echo $i % 2; ?>">				<td class="center"><?php echo JHtml::_('grid.id', $i, $table); ?></td>				<td><?php echo JText::sprintf('COM_CHECKIN_TABLE', $table); ?></td>				<td width="200" class="center"><?php echo $count; ?></td>			</tr>		<?php endforeach;?>		</tbody>		<tfoot>			<tr>				<td colspan="15">					<?php echo $this->pagination->getListFooter(); ?>				</td>			</tr>		</tfoot>	</table>	<input type="hidden" name="task" value="" />	<input type="hidden" name="boxchecked" value="0" />	<input type="hidden" name="filter_order" value="<?php echo $listOrder; ?>" />	<input type="hidden" name="filter_order_Dir" value="<?php echo $listDirn; ?>" />	<?php echo JHtml::_('form.token'); ?>	</div></form>
<?php/** * @package     Joomla.Site * @subpackage  Templates.beez3 * * @copyright   Copyright (C) 2005 - 2013 Open Source Matters, Inc. All rights reserved. * @license     GNU General Public License version 2 or later; see LICENSE.txt */JText::script('TPL_BEEZ3_ALTOPEN');JText::script('TPL_BEEZ3_ALTCLOSE');JText::script('TPL_BEEZ3_TEXTRIGHTOPEN');JText::script('TPL_BEEZ3_TEXTRIGHTCLOSE');JText::script('TPL_BEEZ3_FONTSIZE');JText::script('TPL_BEEZ3_BIGGER');JText::script('TPL_BEEZ3_RESET');JText::script('TPL_BEEZ3_SMALLER');JText::script('TPL_BEEZ3_INCREASE_SIZE');JText::script('TPL_BEEZ3_REVERT_STYLES_TO_DEFAULT');JText::script('TPL_BEEZ3_DECREASE_SIZE');JText::script('TPL_BEEZ3_OPENMENU');JText::script('TPL_BEEZ3_CLOSEMENU');?><script type="text/javascript">	var big = '<?php echo (int) $this->params->get('wrapperLarge');?>%';	var small = '<?php echo (int) $this->params->get('wrapperSmall'); ?>%';	var bildauf = '<?php echo $this->baseurl ?>/templates/<?php echo $this->template; ?>/images/plus.png';	var bildzu = '<?php echo $this->baseurl ?>/templates/<?php echo $this->template; ?>/images/minus.png';	var rightopen='<?php echo JText::_('TPL_BEEZ3_TEXTRIGHTOPEN', true); ?>';	var rightclose='<?php echo JText::_('TPL_BEEZ3_TEXTRIGHTCLOSE', true); ?>';	var altopen='<?php echo JText::_('TPL_BEEZ3_ALTOPEN', true); ?>';	var altclose='<?php echo JText::_('TPL_BEEZ3_ALTCLOSE', true); ?>';</script>
<?php/** * @package     Joomla.Site * @subpackage  com_finder * * @copyright   Copyright (C) 2005 - 2013 Open Source Matters, Inc. All rights reserved. * @license     GNU General Public License version 2 or later; see LICENSE */defined('_JEXEC') or die;JLoader::register('FinderHelperLanguage', JPATH_ADMINISTRATOR . '/components/com_finder/helpers/language.php');/** * Finder Component Controller. * * @package     Joomla.Site * @subpackage  com_finder * @since       2.5 */class FinderController extends JControllerLegacy{	/**	 * Method to display a view.	 *	 * @param   boolean  $cachable   If true, the view output will be cached. [optional]	 * @param   array    $urlparams  An array of safe url parameters and their variable types,	 *                               for valid values see {@link JFilterInput::clean()}. [optional]	 *	 * @return  JControllerLegacy  This object is to support chaining.	 *	 * @since   2.5	 */	public function display($cachable = false, $urlparams = array())	{		$input = JFactory::getApplication()->input;		$cachable = true;		// Load plug-in language files.		FinderHelperLanguage::loadPluginLanguage();		// Set the default view name and format from the Request.		$viewName = $input->get('view', 'search', 'word');		$input->set('view', $viewName);		// Don't cache view for search queries		if ($input->get('q') || $input->get('f') || $input->get('t'))		{			$cachable = false;		}		$safeurlparams = array(			'f' 	=> 'INT',			'lang' 	=> 'CMD'		);		return parent::display($cachable, $safeurlparams);	}}
<?php/** * @package     Joomla.Administrator * @subpackage  mod_quickicon * * @copyright   Copyright (C) 2005 - 2013 Open Source Matters, Inc. All rights reserved. * @license     GNU General Public License version 2 or later; see LICENSE.txt */defined('_JEXEC') or die;$html = JHtml::_('icons.buttons', $buttons);?><?php if (!empty($html)): ?>	<div class="cpanel">		<?php echo $html;?>	</div><?php endif;?>
<?php/** * @package    Joomla.Platform * * @copyright  Copyright (C) 2005 - 2013 Open Source Matters, Inc. All rights reserved. * @license    GNU General Public License version 2 or later; see LICENSE */// Set the platform root path as a constant if necessary.if (!defined('JPATH_PLATFORM')){	define('JPATH_PLATFORM', __DIR__);}// Detect the native operating system type.$os = strtoupper(substr(PHP_OS, 0, 3));if (!defined('IS_WIN')){	define('IS_WIN', ($os === 'WIN') ? true : false);}if (!defined('IS_UNIX')){	define('IS_UNIX', (IS_WIN === false) ? true : false);}// Import the platform version library if necessary.if (!class_exists('JPlatform')){	require_once JPATH_PLATFORM . '/platform.php';}// Import the library loader if necessary.if (!class_exists('JLoader')){	require_once JPATH_PLATFORM . '/loader.php';}class_exists('JLoader') or die;// Setup the autoloaders.JLoader::setup();// Import the base Joomla Platform libraries.JLoader::import('joomla.factory');// Register classes for compatability with PHP 5.3if (version_compare(PHP_VERSION, '5.4.0', '<')){	JLoader::register('JsonSerializable', JPATH_PLATFORM . '/compat/jsonserializable.php');}// Register classes that don't follow one file per class naming conventions.JLoader::register('JText', JPATH_PLATFORM . '/joomla/language/text.php');JLoader::register('JRoute', JPATH_PLATFORM . '/joomla/application/route.php');
<?php/** * @package     Joomla.Site * @subpackage  Layout * * @copyright   Copyright (C) 2005 - 2013 Open Source Matters, Inc. All rights reserved. * @license     GNU General Public License version 2 or later; see LICENSE.txt */defined('_JEXEC') or die;$selector = empty($displayData['selector']) ? '' : $displayData['selector'];?><ul class="nav nav-tabs" id="<?php echo $selector; ?>Tabs"></ul><div class="tab-content" id="<?php echo $selector; ?>Content">
<?php/** * @package     Joomla.Site * @subpackage  Layout * * @copyright   Copyright (C) 2005 - 2013 Open Source Matters, Inc. All rights reserved. * @license     GNU General Public License version 2 or later; see LICENSE.txt */defined('JPATH_BASE') or die;?>			<dd class="create">					<span class="icon-calendar"></span>					<?php echo JText::sprintf('COM_CONTENT_CREATED_DATE_ON', JHtml::_('date', $displayData['item']->created, JText::_('DATE_FORMAT_LC3'))); ?>			</dd>
<?php/*** @version $Id$* @package utf8* @subpackage strings*///---------------------------------------------------------------/*** UTF-8 aware alternative to strspn* Find length of initial segment matching mask* Note: requires utf8_strlen and utf8_substr (if start, length are used)* @param string* @return int* @see http://www.php.net/strspn* @package utf8* @subpackage strings*/function utf8_strspn($str, $mask, $start = NULL, $length = NULL) {    $mask = preg_replace('!([\\\\\\-\\]\\[/^])!','\\\${1}',$mask);	// Fix for $start but no $length argument.    if ($start !== null && $length === null) {    	$length = utf8_strlen($str);    }    if ( $start !== NULL || $length !== NULL ) {        $str = utf8_substr($str, $start, $length);    }    preg_match('/^['.$mask.']+/u',$str, $matches);    if ( isset($matches[0]) ) {        return utf8_strlen($matches[0]);    }    return 0;}
<?php/** * @package     Joomla.Site * @subpackage  mod_finder * * @copyright   Copyright (C) 2005 - 2013 Open Source Matters, Inc. All rights reserved. * @license     GNU General Public License version 2 or later; see LICENSE.txt */defined('_JEXEC') or die;JLoader::register('FinderHelperRoute', JPATH_SITE . '/components/com_finder/helpers/route.php');JLoader::register('FinderHelperLanguage', JPATH_ADMINISTRATOR . '/components/com_finder/helpers/language.php');// Include the helper.require_once __DIR__ . '/helper.php';if (!defined('FINDER_PATH_INDEXER')){	define('FINDER_PATH_INDEXER', JPATH_ADMINISTRATOR . '/components/com_finder/helpers/indexer');}JLoader::register('FinderIndexerQuery', FINDER_PATH_INDEXER . '/query.php');// Check for OpenSearchif ($params->get('opensearch', 1)){/*This code intentionally commented	$doc = JFactory::getDocument();	$app = JFactory::getApplication();	$ostitle = $params->get('opensearch_title', JText::_('MOD_FINDER_SEARCHBUTTON_TEXT') . ' ' . $app->getCfg('sitename'));	$doc->addHeadLink(						JURI::getInstance()->toString(array('scheme', 'host', 'port')) . JRoute::_('&option=com_finder&format=opensearch'),						'search', 'rel', array('title' => $ostitle, 'type' => 'application/opensearchdescription+xml')					);*/}// Initialize module parameters.$params->def('field_size', 20);// Get the route.$route = FinderHelperRoute::getSearchRoute($params->get('searchfilter', null));// Load component language file.FinderHelperLanguage::loadComponentLanguage();// Load plug-in language files.FinderHelperLanguage::loadPluginLanguage();// Get Smart Search query object.$query = modFinderHelper::getQuery($params);require JModuleHelper::getLayoutPath('mod_finder', $params->get('layout', 'default'));
<?php/** * @package     Joomla.Administrator * @subpackage  com_finder * * @copyright   Copyright (C) 2005 - 2013 Open Source Matters, Inc. All rights reserved. * @license     GNU General Public License version 2 or later; see LICENSE */defined('_JEXEC') or die;/** * Indexer controller class for Finder. * * @package     Joomla.Administrator * @subpackage  com_finder * @since       2.5 */class FinderControllerFilter extends JControllerForm{	/**	 * Method to save a record.	 *	 * @param   string  $key     The name of the primary key of the URL variable. [optional]	 * @param   string  $urlVar  The name of the URL variable if different from the primary key (sometimes required to avoid router collisions). [optional]	 *	 * @return  boolean  True if successful, false otherwise.	 *	 * @since   2.5	 */	public function save($key = null, $urlVar = null)	{		// Check for request forgeries.		JSession::checkToken() or jexit(JText::_('JINVALID_TOKEN'));		$app = JFactory::getApplication();		$input = $app->input;		$lang = JFactory::getLanguage();		$model = $this->getModel();		$table = $model->getTable();		$data = $input->post->get('jform', array(), 'array');		$checkin = property_exists($table, 'checked_out');		$context = "$this->option.edit.$this->context";		$task = $this->getTask();		// Determine the name of the primary key for the data.		if (empty($key))		{			$key = $table->getKeyName();		}		// To avoid data collisions the urlVar may be different from the primary key.		if (empty($urlVar))		{			$urlVar = $key;		}		$recordId = $input->get($urlVar, '', 'int');		if (!$this->checkEditId($context, $recordId))		{			// Somehow the person just went to the form and tried to save it. We don't allow that.			$this->setError(JText::sprintf('JLIB_APPLICATION_ERROR_UNHELD_ID', $recordId));			$this->setMessage($this->getError(), 'error');			$this->setRedirect(JRoute::_('index.php?option=' . $this->option . '&view=' . $this->view_list . $this->getRedirectToListAppend(), false));			return false;		}		// Populate the row id from the session.		$data[$key] = $recordId;		// The save2copy task needs to be handled slightly differently.		if ($task == 'save2copy')		{			// Check-in the original row.			if ($checkin && $model->checkin($data[$key]) === false)			{				// Check-in failed. Go back to the item and display a notice.				$this->setError(JText::sprintf('JLIB_APPLICATION_ERROR_CHECKIN_FAILED', $model->getError()));				$this->setMessage($this->getError(), 'error');				$this->setRedirect('index.php?option=' . $this->option . '&view=' . $this->view_item . $this->getRedirectToItemAppend($recordId, $urlVar));				return false;			}			// Reset the ID and then treat the request as for Apply.			$data[$key] = 0;			$task = 'apply';		}		// Access check.		if (!$this->allowSave($data, $key))		{			$this->setError(JText::_('JLIB_APPLICATION_ERROR_SAVE_NOT_PERMITTED'));			$this->setMessage($this->getError(), 'error');			$this->setRedirect(JRoute::_('index.php?option=' . $this->option . '&view=' . $this->view_list . $this->getRedirectToListAppend(), false));			return false;		}		// Validate the posted data.		// Sometimes the form needs some posted data, such as for plugins and modules.		$form = $model->getForm($data, false);		if (!$form)		{			$app->enqueueMessage($model->getError(), 'error');			return false;		}		// Test whether the data is valid.		$validData = $model->validate($form, $data);		// Check for validation errors.		if ($validData === false)		{			// Get the validation messages.			$errors = $model->getErrors();			// Push up to three validation messages out to the user.			for ($i = 0, $n = count($errors); $i < $n && $i < 3; $i++)			{				if (($errors[$i]) instanceof Exception)				{					$app->enqueueMessage($errors[$i]->getMessage(), 'warning');				}				else				{					$app->enqueueMessage($errors[$i], 'warning');				}			}			// Save the data in the session.			$app->setUserState($context . '.data', $data);			// Redirect back to the edit screen.			$this->setRedirect(JRoute::_('index.php?option=' . $this->option . '&view=' . $this->view_item . $this->getRedirectToItemAppend($recordId, $key), false));			return false;		}		// Get and sanitize the filter data.		$validData['data'] = $input->post->get('t', array(), 'array');		$validData['data'] = array_unique($validData['data']);		JArrayHelper::toInteger($validData['data']);		// Remove any values of zero.		if (array_search(0, $validData['data'], true))		{			unset($validData['data'][array_search(0, $validData['data'], true)]);		}		// Attempt to save the data.		if (!$model->save($validData))		{			// Save the data in the session.			$app->setUserState($context . '.data', $validData);			// Redirect back to the edit screen.			$this->setError(JText::sprintf('JLIB_APPLICATION_ERROR_SAVE_FAILED', $model->getError()));			$this->setMessage($this->getError(), 'error');			$this->setRedirect(JRoute::_('index.php?option=' . $this->option . '&view=' . $this->view_item . $this->getRedirectToItemAppend($recordId, $key), false));			return false;		}		// Save succeeded, so check-in the record.		if ($checkin && $model->checkin($validData[$key]) === false)		{			// Save the data in the session.			$app->setUserState($context . '.data', $validData);			// Check-in failed, so go back to the record and display a notice.			$this->setError(JText::sprintf('JLIB_APPLICATION_ERROR_CHECKIN_FAILED', $model->getError()));			$this->setMessage($this->getError(), 'error');			$this->setRedirect('index.php?option=' . $this->option . '&view=' . $this->view_item . $this->getRedirectToItemAppend($recordId, $key));			return false;		}		$this->setMessage(			JText::_(				($lang->hasKey($this->text_prefix . ($recordId == 0 && $app->isSite() ? '_SUBMIT' : '') . '_SAVE_SUCCESS')				? $this->text_prefix : 'JLIB_APPLICATION') . ($recordId == 0 && $app->isSite() ? '_SUBMIT' : '') . '_SAVE_SUCCESS'			)		);		// Redirect the user and adjust session state based on the chosen task.		switch ($task)		{			case 'apply':				// Set the record data in the session.				$recordId = $model->getState($this->context . '.id');				$this->holdEditId($context, $recordId);				$app->setUserState($context . '.data', null);				$model->checkout($recordId);				// Redirect back to the edit screen.				$this->setRedirect(JRoute::_('index.php?option=' . $this->option . '&view=' . $this->view_item . $this->getRedirectToItemAppend($recordId, $key), false));				break;			case 'save2new':				// Clear the record id and data from the session.				$this->releaseEditId($context, $recordId);				$app->setUserState($context . '.data', null);				// Redirect back to the edit screen.				$this->setRedirect(JRoute::_('index.php?option=' . $this->option . '&view=' . $this->view_item . $this->getRedirectToItemAppend(null, $key), false));				break;			default:				// Clear the record id and data from the session.				$this->releaseEditId($context, $recordId);				$app->setUserState($context . '.data', null);				// Redirect to the list screen.				$this->setRedirect(JRoute::_('index.php?option=' . $this->option . '&view=' . $this->view_list . $this->getRedirectToListAppend(), false));				break;		}		// Invoke the postSave method to allow for the child class to access the model.		$this->postSaveHook($model, $validData);		return true;	}}
<?php// {{{ license/* vim: set expandtab tabstop=4 shiftwidth=4 softtabstop=4 foldmethod=marker: *///// +----------------------------------------------------------------------+// | This library is free software; you can redistribute it and/or modify |// | it under the terms of the GNU Lesser General Public License as       |// | published by the Free Software Foundation; either version 2.1 of the |// | License, or (at your option) any later version.                      |// |                                                                      |// | This library is distributed in the hope that it will be useful, but  |// | WITHOUT ANY WARRANTY; without even the implied warranty of           |// | MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU    |// | Lesser General Public License for more details.                      |// |                                                                      |// | You should have received a copy of the GNU Lesser General Public     |// | License along with this library; if not, write to the Free Software  |// | Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA  02111-1307 |// | USA.                                                                 |// +----------------------------------------------------------------------+//// }}}/** * Encode/decode Internationalized Domain Names. * * The class allows to convert internationalized domain names * (see RFC 3490 for details) as they can be used with various registries worldwide * to be translated between their original (localized) form and their encoded form * as it will be used in the DNS (Domain Name System). * * The class provides two public methods, encode() and decode(), which do exactly * what you would expect them to do. You are allowed to use complete domain names, * simple strings and complete email addresses as well. That means, that you might * use any of the following notations: * * - www.nrgler.com * - xn--nrgler-wxa * - xn--brse-5qa.xn--knrz-1ra.info * * Unicode input might be given as either UTF-8 string, UCS-4 string or UCS-4 * array. Unicode output is available in the same formats. * You can select your preferred format via {@link set_paramter()}. * * ACE input and output is always expected to be ASCII. * * @author  Matthias Sommerfeld <mso@phlylabs.de> * @copyright 2004-2007 phlyLabs Berlin, http://phlylabs.de * @version 0.5.1 * */class idna_convert{    /**     * Holds all relevant mapping tables, loaded from a seperate file on construct     * See RFC3454 for details     *     * @var array     * @access private     */    var $NP = array();    // Internal settings, do not mess with them    var $_punycode_prefix = 'xn--';    var $_invalid_ucs =     0x80000000;    var $_max_ucs =         0x10FFFF;    var $_base =            36;    var $_tmin =            1;    var $_tmax =            26;    var $_skew =            38;    var $_damp =            700;    var $_initial_bias =    72;    var $_initial_n =       0x80;    var $_sbase =           0xAC00;    var $_lbase =           0x1100;    var $_vbase =           0x1161;    var $_tbase =           0x11A7;    var $_lcount =          19;    var $_vcount =          21;    var $_tcount =          28;    var $_ncount =          588;   // _vcount * _tcount    var $_scount =          11172; // _lcount * _tcount * _vcount    var $_error =           false;    // See {@link set_paramter()} for details of how to change the following    // settings from within your script / application    var $_api_encoding   =  'utf8'; // Default input charset is UTF-8    var $_allow_overlong =  false;  // Overlong UTF-8 encodings are forbidden    var $_strict_mode    =  false;  // Behave strict or not    // The constructor    function idna_convert($options = false)    {        $this->slast = $this->_sbase + $this->_lcount * $this->_vcount * $this->_tcount;        if (function_exists('file_get_contents')) {            $this->NP = unserialize(file_get_contents(dirname(__FILE__).'/npdata.ser'));        } else {            $this->NP = unserialize(join('', file(dirname(__FILE__).'/npdata.ser')));        }        // If parameters are given, pass these to the respective method        if (is_array($options)) {            return $this->set_parameter($options);        }        return true;    }    /**     * Sets a new option value. Available options and values:     * [encoding - Use either UTF-8, UCS4 as array or UCS4 as string as input ('utf8' for UTF-8,     *         'ucs4_string' and 'ucs4_array' respectively for UCS4); The output is always UTF-8]     * [overlong - Unicode does not allow unnecessarily long encodings of chars,     *             to allow this, set this parameter to true, else to false;     *             default is false.]     * [strict - true: strict mode, good for registration purposes - Causes errors     *           on failures; false: loose mode, ideal for "wildlife" applications     *           by silently ignoring errors and returning the original input instead     *     * @param    mixed     Parameter to set (string: single parameter; array of Parameter => Value pairs)     * @param    string    Value to use (if parameter 1 is a string)     * @return   boolean   true on success, false otherwise     * @access   public     */    function set_parameter($option, $value = false)    {        if (!is_array($option)) {            $option = array($option => $value);        }        foreach ($option as $k => $v) {            switch ($k) {            case 'encoding':                switch ($v) {                case 'utf8':                case 'ucs4_string':                case 'ucs4_array':                    $this->_api_encoding = $v;                    break;                default:                    $this->_error('Set Parameter: Unknown parameter '.$v.' for option '.$k);                    return false;                }                break;            case 'overlong':                $this->_allow_overlong = ($v) ? true : false;                break;            case 'strict':                $this->_strict_mode = ($v) ? true : false;                break;            default:                $this->_error('Set Parameter: Unknown option '.$k);                return false;            }        }        return true;    }    /**     * Decode a given ACE domain name     * @param    string   Domain name (ACE string)     * [@param    string   Desired output encoding, see {@link set_parameter}]     * @return   string   Decoded Domain name (UTF-8 or UCS-4)     * @access   public     */    function decode($input, $one_time_encoding = false)    {        // Optionally set        if ($one_time_encoding) {            switch ($one_time_encoding) {            case 'utf8':            case 'ucs4_string':            case 'ucs4_array':                break;            default:                $this->_error('Unknown encoding '.$one_time_encoding);                return false;            }        }        // Make sure to drop any newline characters around        $input = trim($input);        // Negotiate input and try to determine, whether it is a plain string,        // an email address or something like a complete URL        if (strpos($input, '@')) { // Maybe it is an email address            // No no in strict mode            if ($this->_strict_mode) {                $this->_error('Only simple domain name parts can be handled in strict mode');                return false;            }            list ($email_pref, $input) = explode('@', $input, 2);            $arr = explode('.', $input);            foreach ($arr as $k => $v) {                if (preg_match('!^'.preg_quote($this->_punycode_prefix, '!').'!', $v)) {                    $conv = $this->_decode($v);                    if ($conv) $arr[$k] = $conv;                }            }            $input = join('.', $arr);            $arr = explode('.', $email_pref);            foreach ($arr as $k => $v) {                if (preg_match('!^'.preg_quote($this->_punycode_prefix, '!').'!', $v)) {                    $conv = $this->_decode($v);                    if ($conv) $arr[$k] = $conv;                }            }            $email_pref = join('.', $arr);            $return = $email_pref . '@' . $input;        } elseif (preg_match('![:\./]!', $input)) { // Or a complete domain name (with or without paths / parameters)            // No no in strict mode            if ($this->_strict_mode) {                $this->_error('Only simple domain name parts can be handled in strict mode');                return false;            }            $parsed = parse_url($input);            if (isset($parsed['host'])) {                $arr = explode('.', $parsed['host']);                foreach ($arr as $k => $v) {                    $conv = $this->_decode($v);                    if ($conv) $arr[$k] = $conv;                }                $parsed['host'] = join('.', $arr);                $return =                        (empty($parsed['scheme']) ? '' : $parsed['scheme'].(strtolower($parsed['scheme']) == 'mailto' ? ':' : '://'))                        .(empty($parsed['user']) ? '' : $parsed['user'].(empty($parsed['pass']) ? '' : ':'.$parsed['pass']).'@')                        .$parsed['host']                        .(empty($parsed['port']) ? '' : ':'.$parsed['port'])                        .(empty($parsed['path']) ? '' : $parsed['path'])                        .(empty($parsed['query']) ? '' : '?'.$parsed['query'])                        .(empty($parsed['fragment']) ? '' : '#'.$parsed['fragment']);            } else { // parse_url seems to have failed, try without it                $arr = explode('.', $input);                foreach ($arr as $k => $v) {                    $conv = $this->_decode($v);                    $arr[$k] = ($conv) ? $conv : $v;                }                $return = join('.', $arr);            }        } else { // Otherwise we consider it being a pure domain name string            $return = $this->_decode($input);            if (!$return) $return = $input;        }        // The output is UTF-8 by default, other output formats need conversion here        // If one time encoding is given, use this, else the objects property        switch (($one_time_encoding) ? $one_time_encoding : $this->_api_encoding) {        case 'utf8':            return $return;            break;        case 'ucs4_string':           return $this->_ucs4_to_ucs4_string($this->_utf8_to_ucs4($return));           break;        case 'ucs4_array':            return $this->_utf8_to_ucs4($return);            break;        default:            $this->_error('Unsupported output format');            return false;        }    }    /**     * Encode a given UTF-8 domain name     * @param    string   Domain name (UTF-8 or UCS-4)     * [@param    string   Desired input encoding, see {@link set_parameter}]     * @return   string   Encoded Domain name (ACE string)     * @access   public     */    function encode($decoded, $one_time_encoding = false)    {        // Forcing conversion of input to UCS4 array        // If one time encoding is given, use this, else the objects property        switch ($one_time_encoding ? $one_time_encoding : $this->_api_encoding) {        case 'utf8':            $decoded = $this->_utf8_to_ucs4($decoded);            break;        case 'ucs4_string':           $decoded = $this->_ucs4_string_to_ucs4($decoded);        case 'ucs4_array':           break;        default:            $this->_error('Unsupported input format: '.($one_time_encoding ? $one_time_encoding : $this->_api_encoding));            return false;        }        // No input, no output, what else did you expect?        if (empty($decoded)) return '';        // Anchors for iteration        $last_begin = 0;        // Output string        $output = '';        foreach ($decoded as $k => $v) {            // Make sure to use just the plain dot            switch($v) {            case 0x3002:            case 0xFF0E:            case 0xFF61:                $decoded[$k] = 0x2E;                // Right, no break here, the above are converted to dots anyway            // Stumbling across an anchoring character            case 0x2E:            case 0x2F:            case 0x3A:            case 0x3F:            case 0x40:                // Neither email addresses nor URLs allowed in strict mode                if ($this->_strict_mode) {                   $this->_error('Neither email addresses nor URLs are allowed in strict mode.');                   return false;                } else {                    // Skip first char                    if ($k) {                        $encoded = '';                        $encoded = $this->_encode(array_slice($decoded, $last_begin, (($k)-$last_begin)));                        if ($encoded) {                            $output .= $encoded;                        } else {                            $output .= $this->_ucs4_to_utf8(array_slice($decoded, $last_begin, (($k)-$last_begin)));                        }                        $output .= chr($decoded[$k]);                    }                    $last_begin = $k + 1;                }            }        }        // Catch the rest of the string        if ($last_begin) {            $inp_len = sizeof($decoded);            $encoded = '';            $encoded = $this->_encode(array_slice($decoded, $last_begin, (($inp_len)-$last_begin)));            if ($encoded) {                $output .= $encoded;            } else {                $output .= $this->_ucs4_to_utf8(array_slice($decoded, $last_begin, (($inp_len)-$last_begin)));            }            return $output;        } else {            if ($output = $this->_encode($decoded)) {                return $output;            } else {                return $this->_ucs4_to_utf8($decoded);            }        }    }    /**     * Use this method to get the last error ocurred     * @param    void     * @return   string   The last error, that occured     * @access   public     */    function get_last_error()    {        return $this->_error;    }    /**     * The actual decoding algorithm     * @access   private     */    function _decode($encoded)    {        // We do need to find the Punycode prefix        if (!preg_match('!^'.preg_quote($this->_punycode_prefix, '!').'!', $encoded)) {            $this->_error('This is not a punycode string');            return false;        }        $encode_test = preg_replace('!^'.preg_quote($this->_punycode_prefix, '!').'!', '', $encoded);        // If nothing left after removing the prefix, it is hopeless        if (!$encode_test) {            $this->_error('The given encoded string was empty');            return false;        }        // Find last occurence of the delimiter        $delim_pos = strrpos($encoded, '-');        if ($delim_pos > strlen($this->_punycode_prefix)) {            for ($k = strlen($this->_punycode_prefix); $k < $delim_pos; ++$k) {                $decoded[] = ord($encoded{$k});            }        } else {            $decoded = array();        }        $deco_len = count($decoded);        $enco_len = strlen($encoded);        // Wandering through the strings; init        $is_first = true;        $bias     = $this->_initial_bias;        $idx      = 0;        $char     = $this->_initial_n;        for ($enco_idx = ($delim_pos) ? ($delim_pos + 1) : 0; $enco_idx < $enco_len; ++$deco_len) {            for ($old_idx = $idx, $w = 1, $k = $this->_base; 1 ; $k += $this->_base) {                $digit = $this->_decode_digit($encoded{$enco_idx++});                $idx += $digit * $w;                $t = ($k <= $bias) ? $this->_tmin :                        (($k >= $bias + $this->_tmax) ? $this->_tmax : ($k - $bias));                if ($digit < $t) break;                $w = (int) ($w * ($this->_base - $t));            }            $bias = $this->_adapt($idx - $old_idx, $deco_len + 1, $is_first);            $is_first = false;            $char += (int) ($idx / ($deco_len + 1));            $idx %= ($deco_len + 1);            if ($deco_len > 0) {                // Make room for the decoded char                for ($i = $deco_len; $i > $idx; $i--) {                    $decoded[$i] = $decoded[($i - 1)];                }            }            $decoded[$idx++] = $char;        }        return $this->_ucs4_to_utf8($decoded);    }    /**     * The actual encoding algorithm     * @access   private     */    function _encode($decoded)    {        // We cannot encode a domain name containing the Punycode prefix        $extract = strlen($this->_punycode_prefix);        $check_pref = $this->_utf8_to_ucs4($this->_punycode_prefix);        $check_deco = array_slice($decoded, 0, $extract);        if ($check_pref == $check_deco) {            $this->_error('This is already a punycode string');            return false;        }        // We will not try to encode strings consisting of basic code points only        $encodable = false;        foreach ($decoded as $k => $v) {            if ($v > 0x7a) {                $encodable = true;                break;            }        }        if (!$encodable) {            $this->_error('The given string does not contain encodable chars');            return false;        }        // Do NAMEPREP        $decoded = $this->_nameprep($decoded);        if (!$decoded || !is_array($decoded)) return false; // NAMEPREP failed        $deco_len  = count($decoded);        if (!$deco_len) return false; // Empty array        $codecount = 0; // How many chars have been consumed        $encoded = '';        // Copy all basic code points to output        for ($i = 0; $i < $deco_len; ++$i) {            $test = $decoded[$i];            // Will match [-0-9a-zA-Z]            if ((0x2F < $test && $test < 0x40) || (0x40 < $test && $test < 0x5B)                    || (0x60 < $test && $test <= 0x7B) || (0x2D == $test)) {                $encoded .= chr($decoded[$i]);                $codecount++;            }        }        if ($codecount == $deco_len) return $encoded; // All codepoints were basic ones        // Start with the prefix; copy it to output        $encoded = $this->_punycode_prefix.$encoded;        // If we have basic code points in output, add an hyphen to the end        if ($codecount) $encoded .= '-';        // Now find and encode all non-basic code points        $is_first  = true;        $cur_code  = $this->_initial_n;        $bias      = $this->_initial_bias;        $delta     = 0;        while ($codecount < $deco_len) {            // Find the smallest code point >= the current code point and            // remember the last ouccrence of it in the input            for ($i = 0, $next_code = $this->_max_ucs; $i < $deco_len; $i++) {                if ($decoded[$i] >= $cur_code && $decoded[$i] <= $next_code) {                    $next_code = $decoded[$i];                }            }            $delta += ($next_code - $cur_code) * ($codecount + 1);            $cur_code = $next_code;            // Scan input again and encode all characters whose code point is $cur_code            for ($i = 0; $i < $deco_len; $i++) {                if ($decoded[$i] < $cur_code) {                    $delta++;                } elseif ($decoded[$i] == $cur_code) {                    for ($q = $delta, $k = $this->_base; 1; $k += $this->_base) {                        $t = ($k <= $bias) ? $this->_tmin :                                (($k >= $bias + $this->_tmax) ? $this->_tmax : $k - $bias);                        if ($q < $t) break;                        $encoded .= $this->_encode_digit(intval($t + (($q - $t) % ($this->_base - $t)))); //v0.4.5 Changed from ceil() to intval()                        $q = (int) (($q - $t) / ($this->_base - $t));                    }                    $encoded .= $this->_encode_digit($q);                    $bias = $this->_adapt($delta, $codecount+1, $is_first);                    $codecount++;                    $delta = 0;                    $is_first = false;                }            }            $delta++;            $cur_code++;        }        return $encoded;    }    /**     * Adapt the bias according to the current code point and position     * @access   private     */    function _adapt($delta, $npoints, $is_first)    {        $delta = intval($is_first ? ($delta / $this->_damp) : ($delta / 2));        $delta += intval($delta / $npoints);        for ($k = 0; $delta > (($this->_base - $this->_tmin) * $this->_tmax) / 2; $k += $this->_base) {            $delta = intval($delta / ($this->_base - $this->_tmin));        }        return intval($k + ($this->_base - $this->_tmin + 1) * $delta / ($delta + $this->_skew));    }    /**     * Encoding a certain digit     * @access   private     */    function _encode_digit($d)    {        return chr($d + 22 + 75 * ($d < 26));    }    /**     * Decode a certain digit     * @access   private     */    function _decode_digit($cp)    {        $cp = ord($cp);        return ($cp - 48 < 10) ? $cp - 22 : (($cp - 65 < 26) ? $cp - 65 : (($cp - 97 < 26) ? $cp - 97 : $this->_base));    }    /**     * Internal error handling method     * @access   private     */    function _error($error = '')    {        $this->_error = $error;    }    /**     * Do Nameprep according to RFC3491 and RFC3454     * @param    array    Unicode Characters     * @return   string   Unicode Characters, Nameprep'd     * @access   private     */    function _nameprep($input)    {        $output = array();        $error = false;        //        // Mapping        // Walking through the input array, performing the required steps on each of        // the input chars and putting the result into the output array        // While mapping required chars we apply the cannonical ordering        foreach ($input as $v) {            // Map to nothing == skip that code point            if (in_array($v, $this->NP['map_nothing'])) continue;            // Try to find prohibited input            if (in_array($v, $this->NP['prohibit']) || in_array($v, $this->NP['general_prohibited'])) {                $this->_error('NAMEPREP: Prohibited input U+'.sprintf('%08X', $v));                return false;            }            foreach ($this->NP['prohibit_ranges'] as $range) {                if ($range[0] <= $v && $v <= $range[1]) {                    $this->_error('NAMEPREP: Prohibited input U+'.sprintf('%08X', $v));                    return false;                }            }            //            // Hangul syllable decomposition            if (0xAC00 <= $v && $v <= 0xD7AF) {                foreach ($this->_hangul_decompose($v) as $out) {                    $output[] = (int) $out;                }            // There's a decomposition mapping for that code point            } elseif (isset($this->NP['replacemaps'][$v])) {                foreach ($this->_apply_cannonical_ordering($this->NP['replacemaps'][$v]) as $out) {                    $output[] = (int) $out;                }            } else {                $output[] = (int) $v;            }        }        // Before applying any Combining, try to rearrange any Hangul syllables        $output = $this->_hangul_compose($output);        //        // Combine code points        //        $last_class   = 0;        $last_starter = 0;        $out_len      = count($output);        for ($i = 0; $i < $out_len; ++$i) {            $class = $this->_get_combining_class($output[$i]);            if ((!$last_class || $last_class > $class) && $class) {                // Try to match                $seq_len = $i - $last_starter;                $out = $this->_combine(array_slice($output, $last_starter, $seq_len));                // On match: Replace the last starter with the composed character and remove                // the now redundant non-starter(s)                if ($out) {                    $output[$last_starter] = $out;                    if (count($out) != $seq_len) {                        for ($j = $i+1; $j < $out_len; ++$j) {                            $output[$j-1] = $output[$j];                        }                        unset($output[$out_len]);                    }                    // Rewind the for loop by one, since there can be more possible compositions                    $i--;                    $out_len--;                    $last_class = ($i == $last_starter) ? 0 : $this->_get_combining_class($output[$i-1]);                    continue;                }            }            // The current class is 0            if (!$class) $last_starter = $i;            $last_class = $class;        }        return $output;    }    /**     * Decomposes a Hangul syllable     * (see http://www.unicode.org/unicode/reports/tr15/#Hangul     * @param    integer  32bit UCS4 code point     * @return   array    Either Hangul Syllable decomposed or original 32bit value as one value array     * @access   private     */    function _hangul_decompose($char)    {        $sindex = (int) $char - $this->_sbase;        if ($sindex < 0 || $sindex >= $this->_scount) {            return array($char);        }        $result = array();        $result[] = (int) $this->_lbase + $sindex / $this->_ncount;        $result[] = (int) $this->_vbase + ($sindex % $this->_ncount) / $this->_tcount;        $T = intval($this->_tbase + $sindex % $this->_tcount);        if ($T != $this->_tbase) $result[] = $T;        return $result;    }    /**     * Ccomposes a Hangul syllable     * (see http://www.unicode.org/unicode/reports/tr15/#Hangul     * @param    array    Decomposed UCS4 sequence     * @return   array    UCS4 sequence with syllables composed     * @access   private     */    function _hangul_compose($input)    {        $inp_len = count($input);        if (!$inp_len) return array();        $result = array();        $last = (int) $input[0];        $result[] = $last; // copy first char from input to output        for ($i = 1; $i < $inp_len; ++$i) {            $char = (int) $input[$i];            $sindex = $last - $this->_sbase;            $lindex = $last - $this->_lbase;            $vindex = $char - $this->_vbase;            $tindex = $char - $this->_tbase;            // Find out, whether two current characters are LV and T            if (0 <= $sindex && $sindex < $this->_scount && ($sindex % $this->_tcount == 0)                    && 0 <= $tindex && $tindex <= $this->_tcount) {                // create syllable of form LVT                $last += $tindex;                $result[(count($result) - 1)] = $last; // reset last                continue; // discard char            }            // Find out, whether two current characters form L and V            if (0 <= $lindex && $lindex < $this->_lcount && 0 <= $vindex && $vindex < $this->_vcount) {                // create syllable of form LV                $last = (int) $this->_sbase + ($lindex * $this->_vcount + $vindex) * $this->_tcount;                $result[(count($result) - 1)] = $last; // reset last                continue; // discard char            }            // if neither case was true, just add the character            $last = $char;            $result[] = $char;        }        return $result;    }    /**     * Returns the combining class of a certain wide char     * @param    integer    Wide char to check (32bit integer)     * @return   integer    Combining class if found, else 0     * @access   private     */    function _get_combining_class($char)    {        return isset($this->NP['norm_combcls'][$char]) ? $this->NP['norm_combcls'][$char] : 0;    }    /**     * Apllies the cannonical ordering of a decomposed UCS4 sequence     * @param    array      Decomposed UCS4 sequence     * @return   array      Ordered USC4 sequence     * @access   private     */    function _apply_cannonical_ordering($input)    {        $swap = true;        $size = count($input);        while ($swap) {            $swap = false;            $last = $this->_get_combining_class(intval($input[0]));            for ($i = 0; $i < $size-1; ++$i) {                $next = $this->_get_combining_class(intval($input[$i+1]));                if ($next != 0 && $last > $next) {                    // Move item leftward until it fits                    for ($j = $i + 1; $j > 0; --$j) {                        if ($this->_get_combining_class(intval($input[$j-1])) <= $next) break;                        $t = intval($input[$j]);                        $input[$j] = intval($input[$j-1]);                        $input[$j-1] = $t;                        $swap = true;                    }                    // Reentering the loop looking at the old character again                    $next = $last;                }                $last = $next;            }        }        return $input;    }    /**     * Do composition of a sequence of starter and non-starter     * @param    array      UCS4 Decomposed sequence     * @return   array      Ordered USC4 sequence     * @access   private     */    function _combine($input)    {        $inp_len = count($input);        foreach ($this->NP['replacemaps'] as $np_src => $np_target) {            if ($np_target[0] != $input[0]) continue;            if (count($np_target) != $inp_len) continue;            $hit = false;            foreach ($input as $k2 => $v2) {                if ($v2 == $np_target[$k2]) {                    $hit = true;                } else {                    $hit = false;                    break;                }            }            if ($hit) return $np_src;        }        return false;    }    /**     * This converts an UTF-8 encoded string to its UCS-4 representation     * By talking about UCS-4 "strings" we mean arrays of 32bit integers representing     * each of the "chars". This is due to PHP not being able to handle strings with     * bit depth different from 8. This apllies to the reverse method _ucs4_to_utf8(), too.     * The following UTF-8 encodings are supported:     * bytes bits  representation     * 1        7  0xxxxxxx     * 2       11  110xxxxx 10xxxxxx     * 3       16  1110xxxx 10xxxxxx 10xxxxxx     * 4       21  11110xxx 10xxxxxx 10xxxxxx 10xxxxxx     * 5       26  111110xx 10xxxxxx 10xxxxxx 10xxxxxx 10xxxxxx     * 6       31  1111110x 10xxxxxx 10xxxxxx 10xxxxxx 10xxxxxx 10xxxxxx     * Each x represents a bit that can be used to store character data.     * The five and six byte sequences are part of Annex D of ISO/IEC 10646-1:2000     * @access   private     */    function _utf8_to_ucs4($input)    {        $output = array();        $out_len = 0;        $inp_len = strlen($input);        $mode = 'next';        $test = 'none';        for ($k = 0; $k < $inp_len; ++$k) {            $v = ord($input{$k}); // Extract byte from input string            if ($v < 128) { // We found an ASCII char - put into stirng as is                $output[$out_len] = $v;                ++$out_len;                if ('add' == $mode) {                    $this->_error('Conversion from UTF-8 to UCS-4 failed: malformed input at byte '.$k);                    return false;                }                continue;            }            if ('next' == $mode) { // Try to find the next start byte; determine the width of the Unicode char                $start_byte = $v;                $mode = 'add';                $test = 'range';                if ($v >> 5 == 6) { // &110xxxxx 10xxxxx                    $next_byte = 0; // Tells, how many times subsequent bitmasks must rotate 6bits to the left                    $v = ($v - 192) << 6;                } elseif ($v >> 4 == 14) { // &1110xxxx 10xxxxxx 10xxxxxx                    $next_byte = 1;                    $v = ($v - 224) << 12;                } elseif ($v >> 3 == 30) { // &11110xxx 10xxxxxx 10xxxxxx 10xxxxxx                    $next_byte = 2;                    $v = ($v - 240) << 18;                } elseif ($v >> 2 == 62) { // &111110xx 10xxxxxx 10xxxxxx 10xxxxxx 10xxxxxx                    $next_byte = 3;                    $v = ($v - 248) << 24;                } elseif ($v >> 1 == 126) { // &1111110x 10xxxxxx 10xxxxxx 10xxxxxx 10xxxxxx 10xxxxxx                    $next_byte = 4;                    $v = ($v - 252) << 30;                } else {                    $this->_error('This might be UTF-8, but I don\'t understand it at byte '.$k);                    return false;                }                if ('add' == $mode) {                    $output[$out_len] = (int) $v;                    ++$out_len;                    continue;                }            }            if ('add' == $mode) {                if (!$this->_allow_overlong && $test == 'range') {                    $test = 'none';                    if (($v < 0xA0 && $start_byte == 0xE0) || ($v < 0x90 && $start_byte == 0xF0) || ($v > 0x8F && $start_byte == 0xF4)) {                        $this->_error('Bogus UTF-8 character detected (out of legal range) at byte '.$k);                        return false;                    }                }                if ($v >> 6 == 2) { // Bit mask must be 10xxxxxx                    $v = ($v - 128) << ($next_byte * 6);                    $output[($out_len - 1)] += $v;                    --$next_byte;                } else {                    $this->_error('Conversion from UTF-8 to UCS-4 failed: malformed input at byte '.$k);                    return false;                }                if ($next_byte < 0) {                    $mode = 'next';                }            }        } // for        return $output;    }    /**     * Convert UCS-4 string into UTF-8 string     * See _utf8_to_ucs4() for details     * @access   private     */    function _ucs4_to_utf8($input)    {        $output = '';        $k = 0;        foreach ($input as $v) {            ++$k;            // $v = ord($v);            if ($v < 128) { // 7bit are transferred literally                $output .= chr($v);            } elseif ($v < (1 << 11)) { // 2 bytes                $output .= chr(192 + ($v >> 6)) . chr(128 + ($v & 63));            } elseif ($v < (1 << 16)) { // 3 bytes                $output .= chr(224 + ($v >> 12)) . chr(128 + (($v >> 6) & 63)) . chr(128 + ($v & 63));            } elseif ($v < (1 << 21)) { // 4 bytes                $output .= chr(240 + ($v >> 18)) . chr(128 + (($v >> 12) & 63))                         . chr(128 + (($v >> 6) & 63)) . chr(128 + ($v & 63));            } elseif ($v < (1 << 26)) { // 5 bytes                $output .= chr(248 + ($v >> 24)) . chr(128 + (($v >> 18) & 63))                         . chr(128 + (($v >> 12) & 63)) . chr(128 + (($v >> 6) & 63))                         . chr(128 + ($v & 63));            } elseif ($v < (1 << 31)) { // 6 bytes                $output .= chr(252 + ($v >> 30)) . chr(128 + (($v >> 24) & 63))                         . chr(128 + (($v >> 18) & 63)) . chr(128 + (($v >> 12) & 63))                         . chr(128 + (($v >> 6) & 63)) . chr(128 + ($v & 63));            } else {                $this->_error('Conversion from UCS-4 to UTF-8 failed: malformed input at byte '.$k);                return false;            }        }        return $output;    }    /**      * Convert UCS-4 array into UCS-4 string      *      * @access   private      */    function _ucs4_to_ucs4_string($input)    {        $output = '';        // Take array values and split output to 4 bytes per value        // The bit mask is 255, which reads &11111111        foreach ($input as $v) {            $output .= chr(($v >> 24) & 255).chr(($v >> 16) & 255).chr(($v >> 8) & 255).chr($v & 255);        }        return $output;    }    /**      * Convert UCS-4 strin into UCS-4 garray      *      * @access   private      */    function _ucs4_string_to_ucs4($input)    {        $output = array();        $inp_len = strlen($input);        // Input length must be dividable by 4        if ($inp_len % 4) {            $this->_error('Input UCS4 string is broken');            return false;        }        // Empty input - return empty output        if (!$inp_len) return $output;        for ($i = 0, $out_len = -1; $i < $inp_len; ++$i) {            // Increment output position every 4 input bytes            if (!($i % 4)) {                $out_len++;                $output[$out_len] = 0;            }            $output[$out_len] += ord($input{$i}) << (8 * (3 - ($i % 4) ) );        }        return $output;    }}/*** Adapter class for aligning the API of idna_convert with that of Net_IDNA* @author  Matthias Sommerfeld <mso@phlylabs.de>*/class Net_IDNA_php4 extends idna_convert{    /**     * Sets a new option value. Available options and values:     * [encoding - Use either UTF-8, UCS4 as array or UCS4 as string as input ('utf8' for UTF-8,     *         'ucs4_string' and 'ucs4_array' respectively for UCS4); The output is always UTF-8]     * [overlong - Unicode does not allow unnecessarily long encodings of chars,     *             to allow this, set this parameter to true, else to false;     *             default is false.]     * [strict - true: strict mode, good for registration purposes - Causes errors     *           on failures; false: loose mode, ideal for "wildlife" applications     *           by silently ignoring errors and returning the original input instead     *     * @param    mixed     Parameter to set (string: single parameter; array of Parameter => Value pairs)     * @param    string    Value to use (if parameter 1 is a string)     * @return   boolean   true on success, false otherwise     * @access   public     */    function setParams($option, $param = false)    {        return $this->IC->set_parameters($option, $param);    }}?>
<?php/** * @package     Joomla.Platform * @subpackage  View * * @copyright   Copyright (C) 2005 - 2013 Open Source Matters, Inc. All rights reserved. * @license     GNU General Public License version 2 or later; see LICENSE */defined('JPATH_PLATFORM') or die;jimport('joomla.filesystem.path');/** * Joomla Platform HTML View Class * * @package     Joomla.Platform * @subpackage  View * @since       12.1 */abstract class JViewHtml extends JViewBase{	/**	 * The view layout.	 *	 * @var    string	 * @since  12.1	 */	protected $layout = 'default';	/**	 * The paths queue.	 *	 * @var    SplPriorityQueue	 * @since  12.1	 */	protected $paths;	/**	 * Method to instantiate the view.	 *	 * @param   JModel            $model  The model object.	 * @param   SplPriorityQueue  $paths  The paths queue.	 *	 * @since   12.1	 */	public function __construct(JModel $model, SplPriorityQueue $paths = null)	{		parent::__construct($model);		// Setup dependencies.		$this->paths = isset($paths) ? $paths : $this->loadPaths();	}	/**	 * Magic toString method that is a proxy for the render method.	 *	 * @return  string	 *	 * @since   12.1	 */	public function __toString()	{		return $this->render();	}	/**	 * Method to escape output.	 *	 * @param   string  $output  The output to escape.	 *	 * @return  string  The escaped output.	 *	 * @see     JView::escape()	 * @since   12.1	 */	public function escape($output)	{		// Escape the output.		return htmlspecialchars($output, ENT_COMPAT, 'UTF-8');	}	/**	 * Method to get the view layout.	 *	 * @return  string  The layout name.	 *	 * @since   12.1	 */	public function getLayout()	{		return $this->layout;	}	/**	 * Method to get the layout path.	 *	 * @param   string  $layout  The layout name.	 *	 * @return  mixed  The layout file name if found, false otherwise.	 *	 * @since   12.1	 */	public function getPath($layout)	{		// Get the layout file name.		$file = JPath::clean($layout . '.php');		// Find the layout file path.		$path = JPath::find(clone($this->paths), $file);		return $path;	}	/**	 * Method to get the view paths.	 *	 * @return  SplPriorityQueue  The paths queue.	 *	 * @since   12.1	 */	public function getPaths()	{		return $this->paths;	}	/**	 * Method to render the view.	 *	 * @return  string  The rendered view.	 *	 * @since   12.1	 * @throws  RuntimeException	 */	public function render()	{		// Get the layout path.		$path = $this->getPath($this->getLayout());		// Check if the layout path was found.		if (!$path)		{			throw new RuntimeException('Layout Path Not Found');		}		// Start an output buffer.		ob_start();		// Load the layout.		include $path;		// Get the layout contents.		$output = ob_get_clean();		return $output;	}	/**	 * Method to set the view layout.	 *	 * @param   string  $layout  The layout name.	 *	 * @return  JViewHtml  Method supports chaining.	 *	 * @since   12.1	 */	public function setLayout($layout)	{		$this->layout = $layout;		return $this;	}	/**	 * Method to set the view paths.	 *	 * @param   SplPriorityQueue  $paths  The paths queue.	 *	 * @return  JViewHtml  Method supports chaining.	 *	 * @since   12.1	 */	public function setPaths(SplPriorityQueue $paths)	{		$this->paths = $paths;		return $this;	}	/**	 * Method to load the paths queue.	 *	 * @return  SplPriorityQueue  The paths queue.	 *	 * @since   12.1	 */	protected function loadPaths()	{		return new SplPriorityQueue;	}}
<?php/*** Tools to help with ASCII in UTF-8* @version $Id$* @package utf8* @subpackage ascii*///--------------------------------------------------------------------/*** Tests whether a string contains only 7bit ASCII bytes.* You might use this to conditionally check whether a string* needs handling as UTF-8 or not, potentially offering performance* benefits by using the native PHP equivalent if it's just ASCII e.g.;** <code>* if ( utf8_is_ascii($someString) ) {*     // It's just ASCII - use the native PHP version*     $someString = strtolower($someString);* } else {*     $someString = utf8_strtolower($someString);* }* </code>** @param string* @return boolean TRUE if it's all ASCII* @package utf8* @subpackage ascii* @see utf8_is_ascii_ctrl*/function utf8_is_ascii($str) {    // Search for any bytes which are outside the ASCII range...    return (preg_match('/(?:[^\x00-\x7F])/',$str) !== 1);}//--------------------------------------------------------------------/*** Tests whether a string contains only 7bit ASCII bytes with device* control codes omitted. The device control codes can be found on the* second table here: http://www.w3schools.com/tags/ref_ascii.asp** @param string* @return boolean TRUE if it's all ASCII without device control codes* @package utf8* @subpackage ascii* @see utf8_is_ascii*/function utf8_is_ascii_ctrl($str) {    if ( strlen($str) > 0 ) {        // Search for any bytes which are outside the ASCII range,        // or are device control codes        return (preg_match('/[^\x09\x0A\x0D\x20-\x7E]/',$str) !== 1);    }    return FALSE;}//--------------------------------------------------------------------/*** Strip out all non-7bit ASCII bytes* If you need to transmit a string to system which you know can only* support 7bit ASCII, you could use this function.* @param string* @return string with non ASCII bytes removed* @package utf8* @subpackage ascii* @see utf8_strip_non_ascii_ctrl*/function utf8_strip_non_ascii($str) {    ob_start();    while ( preg_match(        '/^([\x00-\x7F]+)|([^\x00-\x7F]+)/S',            $str, $matches) ) {        if ( !isset($matches[2]) ) {            echo $matches[0];        }        $str = substr($str, strlen($matches[0]));    }    $result = ob_get_contents();    ob_end_clean();    return $result;}//--------------------------------------------------------------------/*** Strip out device control codes in the ASCII range* which are not permitted in XML. Note that this leaves* multi-byte characters untouched - it only removes device* control codes* @see http://hsivonen.iki.fi/producing-xml/#controlchar* @param string* @return string control codes removed*/function utf8_strip_ascii_ctrl($str) {    ob_start();    while ( preg_match(        '/^([^\x00-\x08\x0B\x0C\x0E-\x1F\x7F]+)|([\x00-\x08\x0B\x0C\x0E-\x1F\x7F]+)/S',            $str, $matches) ) {        if ( !isset($matches[2]) ) {            echo $matches[0];        }        $str = substr($str, strlen($matches[0]));    }    $result = ob_get_contents();    ob_end_clean();    return $result;}//--------------------------------------------------------------------/*** Strip out all non 7bit ASCII bytes and ASCII device control codes.* For a list of ASCII device control codes see the 2nd table here:* http://www.w3schools.com/tags/ref_ascii.asp** @param string* @return boolean TRUE if it's all ASCII* @package utf8* @subpackage ascii*/function utf8_strip_non_ascii_ctrl($str) {    ob_start();    while ( preg_match(        '/^([\x09\x0A\x0D\x20-\x7E]+)|([^\x09\x0A\x0D\x20-\x7E]+)/S',            $str, $matches) ) {        if ( !isset($matches[2]) ) {            echo $matches[0];        }        $str = substr($str, strlen($matches[0]));    }    $result = ob_get_contents();    ob_end_clean();    return $result;}//---------------------------------------------------------------/*** Replace accented UTF-8 characters by unaccented ASCII-7 "equivalents".* The purpose of this function is to replace characters commonly found in Latin* alphabets with something more or less equivalent from the ASCII range. This can* be useful for converting a UTF-8 to something ready for a filename, for example.* Following the use of this function, you would probably also pass the string* through utf8_strip_non_ascii to clean out any other non-ASCII chars* Use the optional parameter to just deaccent lower ($case = -1) or upper ($case = 1)* letters. Default is to deaccent both cases ($case = 0)** For a more complete implementation of transliteration, see the utf8_to_ascii package* available from the phputf8 project downloads:* http://prdownloads.sourceforge.net/phputf8** @param string UTF-8 string* @param int (optional) -1 lowercase only, +1 uppercase only, 1 both cases* @param string UTF-8 with accented characters replaced by ASCII chars* @return string accented chars replaced with ascii equivalents* @author Andreas Gohr <andi@splitbrain.org>* @package utf8* @subpackage ascii*/function utf8_accents_to_ascii( $str, $case=0 ){    static $UTF8_LOWER_ACCENTS = NULL;    static $UTF8_UPPER_ACCENTS = NULL;    if($case <= 0){        if ( is_null($UTF8_LOWER_ACCENTS) ) {            $UTF8_LOWER_ACCENTS = array(  '' => 'a', '' => 'o', '' => 'd', '' => 'f', '' => 'e', '' => 's', '' => 'o',  '' => 'ss', '' => 'a', '' => 'r', '' => 't', '' => 'n', '' => 'a', '' => 'k',  '' => 's', '' => 'y', '' => 'n', '' => 'l', '' => 'h', '' => 'p', '' => 'o',  '' => 'u', '' => 'e', '' => 'e', '' => 'c', '' => 'w', '' => 'c', '' => 'o',  '' => 's', '' => 'o', '' => 'g', '' => 't', '' => 's', '' => 'e', '' => 'c',  '' => 's', '' => 'i', '' => 'u', '' => 'c', '' => 'e', '' => 'w', '' => 't',  '' => 'u', '' => 'c', '' => 'oe', '' => 'e', '' => 'y', '' => 'a', '' => 'l',  '' => 'u', '' => 'u', '' => 's', '' => 'g', '' => 'l', '' => 'f', '' => 'z',  '' => 'w', '' => 'b', '' => 'a', '' => 'i', '' => 'i', '' => 'd', '' => 't',  '' => 'r', '' => 'ae', '' => 'i', '' => 'r', '' => 'e', '' => 'ue', '' => 'o',  '' => 'e', '' => 'n', '' => 'n', '' => 'h', '' => 'g', '' => 'd', '' => 'j',  '' => 'y', '' => 'u', '' => 'u', '' => 'u', '' => 't', '' => 'y', '' => 'o',  '' => 'a', '' => 'l', '' => 'w', '' => 'z', '' => 'i', '' => 'a', '' => 'g',  '' => 'm', '' => 'o', '' => 'i', '' => 'u', '' => 'i', '' => 'z', '' => 'a',  '' => 'u', '' => 'th', '' => 'dh', '' => 'ae', '' => 'u', '' => 'e',            );        }        $str = str_replace(                array_keys($UTF8_LOWER_ACCENTS),                array_values($UTF8_LOWER_ACCENTS),                $str            );    }    if($case >= 0){        if ( is_null($UTF8_UPPER_ACCENTS) ) {            $UTF8_UPPER_ACCENTS = array(  '' => 'A', '' => 'O', '' => 'D', '' => 'F', '' => 'E', '' => 'S', '' => 'O',  '' => 'A', '' => 'R', '' => 'T', '' => 'N', '' => 'A', '' => 'K',  '' => 'S', '' => 'Y', '' => 'N', '' => 'L', '' => 'H', '' => 'P', '' => 'O',  '' => 'U', '' => 'E', '' => 'E', '' => 'C', '' => 'W', '' => 'C', '' => 'O',  '' => 'S', '' => 'O', '' => 'G', '' => 'T', '' => 'S', '' => 'E', '' => 'C',  '' => 'S', '' => 'I', '' => 'U', '' => 'C', '' => 'E', '' => 'W', '' => 'T',  '' => 'U', '' => 'C', '' => 'Oe', '' => 'E', '' => 'Y', '' => 'A', '' => 'L',  '' => 'U', '' => 'U', '' => 'S', '' => 'G', '' => 'L', '' => 'F', '' => 'Z',  '' => 'W', '' => 'B', '' => 'A', '' => 'I', '' => 'I', '' => 'D', '' => 'T',  '' => 'R', '' => 'Ae', '' => 'I', '' => 'R', '' => 'E', '' => 'Ue', '' => 'O',  '' => 'E', '' => 'N', '' => 'N', '' => 'H', '' => 'G', '' => 'D', '' => 'J',  '' => 'Y', '' => 'U', '' => 'U', '' => 'U', '' => 'T', '' => 'Y', '' => 'O',  '' => 'A', '' => 'L', '' => 'W', '' => 'Z', '' => 'I', '' => 'A', '' => 'G',  '' => 'M', '' => 'O', '' => 'I', '' => 'U', '' => 'I', '' => 'Z', '' => 'A',  '' => 'U', '' => 'Th', '' => 'Dh', '' => 'Ae', '' => 'E',            );        }        $str = str_replace(                array_keys($UTF8_UPPER_ACCENTS),                array_values($UTF8_UPPER_ACCENTS),                $str            );    }    return $str;}
<?php/** * @package     Joomla.Administrator * @subpackage  com_languages * * @copyright   Copyright (C) 2005 - 2013 Open Source Matters, Inc. All rights reserved. * @license     GNU General Public License version 2 or later; see LICENSE.txt */defined('_JEXEC') or die;/** * Displays the multilang status. * * @package     Joomla.Administrator * @subpackage  com_languages * @since       1.7.1 */class LanguagesViewMultilangstatus extends JViewLegacy{	/**	 * Display the view	 */	public function display($tpl = null)	{		require_once JPATH_COMPONENT . '/helpers/multilangstatus.php';		$this->homes			= MultilangstatusHelper::getHomes();		$this->language_filter	= JLanguageMultilang::isEnabled();		$this->switchers		= MultilangstatusHelper::getLangswitchers();		$this->listUsersError	= MultilangstatusHelper::getContacts();		$this->contentlangs		= MultilangstatusHelper::getContentlangs();		$this->site_langs		= MultilangstatusHelper::getSitelangs();		$this->statuses			= MultilangstatusHelper::getStatus();		$this->homepages		= MultilangstatusHelper::getHomepages();		parent::display($tpl);	}}
<?php/** * @package     Joomla.Platform * @subpackage  HTML * * @copyright   Copyright (C) 2005 - 2013 Open Source Matters, Inc. All rights reserved. * @license     GNU General Public License version 2 or later; see LICENSE */defined('JPATH_PLATFORM') or die;/** * HTML helper class for rendering manipulated strings. * * @package     Joomla.Platform * @subpackage  HTML * @since       11.1 */abstract class JHtmlString{	/**	 * Truncates text blocks over the specified character limit and closes	 * all open HTML tags. The method will optionally not truncate an individual	 * word, it will find the first space that is within the limit and	 * truncate at that point. This method is UTF-8 safe.	 *	 * @param   string   $text       The text to truncate.	 * @param   integer  $length     The maximum length of the text.	 * @param   boolean  $noSplit    Don't split a word if that is where the cutoff occurs (default: true).	 * @param   boolean  $allowHtml  Allow HTML tags in the output, and close any open tags (default: true).	 *	 * @return  string   The truncated text.	 *	 * @since   11.1	 */	public static function truncate($text, $length = 0, $noSplit = true, $allowHtml = true)	{		// Assume a lone open tag is invalid HTML.		if ($length == 1 && substr($text, 0, 1) == '<')		{			return '...';		}		// Check if HTML tags are allowed.		if (!$allowHtml)		{			// Deal with spacing issues in the input.			$text = str_replace('>', '> ', $text);			$text = str_replace(array('&nbsp;', '&#160;'), ' ', $text);			$text = JString::trim(preg_replace('#\s+#mui', ' ', $text));			// Strip the tags from the input and decode entities.			$text = strip_tags($text);			$text = html_entity_decode($text, ENT_QUOTES, 'UTF-8');			// Remove remaining extra spaces.			$text = str_replace('&nbsp;', ' ', $text);			$text = JString::trim(preg_replace('#\s+#mui', ' ', $text));		}		// Whether or not allowing HTML, truncate the item text if it is too long.		if ($length > 0 && JString::strlen($text) > $length)		{			$tmp = trim(JString::substr($text, 0, $length));			if (substr($tmp, 0, 1) == '<' && strpos($tmp, '>') === false)			{					return '...';			}			// $noSplit true means that we do not allow splitting of words.			if ($noSplit)			{				// Find the position of the last space within the allowed length.				$offset = JString::strrpos($tmp, ' ');				$tmp = JString::substr($tmp, 0, $offset + 1);				// If there are no spaces and the string is longer than the maximum				// we need to just use the ellipsis. In that case we are done.				if ($offset === false && strlen($text) > $length)				{					return '...';				}				if (JString::strlen($tmp) > $length - 3)				{					$tmp = trim(JString::substr($tmp, 0, JString::strrpos($tmp, ' ')));				}			}			if ($allowHtml)			{				// Put all opened tags into an array				preg_match_all("#<([a-z][a-z0-9]*)\b.*?(?!/)>#i", $tmp, $result);				$openedTags = $result[1];				// Some tags self close so they do not need a separate close tag.				$openedTags = array_diff($openedTags, array("img", "hr", "br"));				$openedTags = array_values($openedTags);				// Put all closed tags into an array				preg_match_all("#</([a-z]+)>#iU", $tmp, $result);				$closedTags = $result[1];				$numOpened = count($openedTags);				// All tags are closed so trim the text and finish.				if (count($closedTags) == $numOpened)				{					return trim($tmp) . '...';				}				// Closing tags need to be in the reverse order of opening tags.				$openedTags = array_reverse($openedTags);				// Close tags				for ($i = 0; $i < $numOpened; $i++)				{					if (!in_array($openedTags[$i], $closedTags))					{						$tmp .= "</" . $openedTags[$i] . ">";					}					else					{						unset($closedTags[array_search($openedTags[$i], $closedTags)]);					}				}			}			if ( $tmp === false || strlen($text) > strlen($tmp))			{				$text = trim($tmp) . '...';			}		}		// Clean up any internal spaces created by the processing.		$text = str_replace(' </', '</', $text);		$text = str_replace(' ...', '...', $text);		return $text;	}	/**	* Method to extend the truncate method to more complex situations	*	* The goal is to get the proper length plain text string with as much of	* the html intact as possible with all tags properly closed.	*	* @param   string   $html       The content of the introtext to be truncated	* @param   integer  $maxLength  The maximum number of characters to render	* @param   boolean  $noSplit    Don't split a word if that is where the cutoff occurs (default: true).	*	* @return  string  The truncated string. If the string is truncated an ellipsis	*                  (...) will be appended.	*	* @note: If a maximum length of 3 or less is selected and the text has more than	*        that number of characters an ellipsis will be displayed.	*        This method will not create valid HTML from malformed HTML.	*	* @since   12.2	*/	public static function truncateComplex($html, $maxLength = 0, $noSplit = true)	{		// Start with some basic rules.		$baseLength = strlen($html);		// If the original HTML string is shorter than the $maxLength do nothing and return that.		if ($baseLength <= $maxLength || $maxLength == 0)		{			return $html;		}		// Take care of short simple cases.		if ($maxLength <= 3 && substr($html, 0, 1) != '<' && strpos(substr($html, 0, $maxLength - 1), '<') === false && $baseLength > $maxLength)		{			return '...';		}		// Deal with maximum length of 1 where the string starts with a tag.		if ($maxLength == 1 && substr($html, 0, 1) == '<')		{			$endTagPos = strlen(strstr($html, '>', true));			$tag = substr($html, 1, $endTagPos);			$l = $endTagPos + 1;			if ($noSplit)			{				return substr($html, 0, $l) . '</' . $tag . '...';			}			$character = substr(strip_tags($html), 0, 1);			return substr($html, 0, $l) . '</' . $tag . '...';		}		// First get the truncated plain text string. This is the rendered text we want to end up with.		$ptString = JHtml::_('string.truncate', $html, $maxLength, $noSplit, $allowHtml = false);		// It's all HTML, just return it.		if (strlen($ptString) == 0)		{				return $html;		}		// If the plain text is shorter than the max length the variable will not end in ...		// In that case we use the whole string.		if (substr($ptString, -3) != '...')		{				return $html;		}		// Regular truncate gives us the ellipsis but we want to go back for text and tags.		if ($ptString == '...')		{			$stripped = substr(strip_tags($html), 0, $maxLength);			$ptString = JHtml::_('string.truncate', $stripped, $maxLength, $noSplit, $allowHtml = false);		}		// We need to trim the ellipsis that truncate adds.		$ptString = rtrim($ptString, '.');		// Now deal with more complex truncation.		$diffLength = 0;		while ($maxLength <= $baseLength)		{			// Get the truncated string assuming HTML is allowed.			$htmlString = JHtml::_('string.truncate', $html, $maxLength, $noSplit, $allowHtml = true);			if ($htmlString == '...' && strlen($ptString) + 3 > $maxLength)			{				return $htmlString;			}			$htmlString = rtrim($htmlString, '.');			// Now get the plain text from the HTML string and trim it.			$htmlStringToPtString = JHtml::_('string.truncate', $htmlString, $maxLength, $noSplit, $allowHtml = false);			$htmlStringToPtString = rtrim($htmlStringToPtString, '.');			// If the new plain text string matches the original plain text string we are done.			if ($ptString == $htmlStringToPtString)			{				return $htmlString . '...';			}			// Get the number of HTML tag characters in the first $maxLength characters			$diffLength = strlen($ptString) - strlen($htmlStringToPtString);			if ($diffLength <= 0)			{				return $htmlString . '...';			}			// Set new $maxlength that adjusts for the HTML tags			$maxLength += $diffLength;		}	}	/**	 * Abridges text strings over the specified character limit. The	 * behavior will insert an ellipsis into the text replacing a section	 * of variable size to ensure the string does not exceed the defined	 * maximum length. This method is UTF-8 safe.	 *	 * For example, it transforms "Really long title" to "Really...title".	 *	 * Note that this method does not scan for HTML tags so will potentially break them.	 *	 * @param   string   $text    The text to abridge.	 * @param   integer  $length  The maximum length of the text (default is 50).	 * @param   integer  $intro   The maximum length of the intro text (default is 30).	 *	 * @return  string   The abridged text.	 *	 * @since   11.1	 */	public static function abridge($text, $length = 50, $intro = 30)	{		// Abridge the item text if it is too long.		if (JString::strlen($text) > $length)		{			// Determine the remaining text length.			$remainder = $length - ($intro + 3);			// Extract the beginning and ending text sections.			$beg = JString::substr($text, 0, $intro);			$end = JString::substr($text, JString::strlen($text) - $remainder);			// Build the resulting string.			$text = $beg . '...' . $end;		}		return $text;	}}
<?php/** * @package     Joomla.Site * @subpackage  Templates.beez3 * * @copyright   Copyright (C) 2005 - 2013 Open Source Matters, Inc. All rights reserved. * @license     GNU General Public License version 2 or later; see LICENSE.txt */defined('_JEXEC') or die;$app = JFactory::getApplication();$templateparams = $app->getTemplate(true)->params;$class = ' class="first"';?><?php if (count($this->children[$this->category->id]) > 0) : ?>        <ul>        <?php foreach ($this->children[$this->category->id] as $id => $child) : ?>                <?php				if ($this->params->get('show_empty_categories') || $child->numitems || count($child->getChildren())) :					if (!isset($this->children[$this->category->id][$id + 1])) :						$class = ' class="last"';					endif;				?>                <li<?php echo $class; ?>>                        <?php $class = ''; ?>                        <span class="item-title"><a href="<?php echo JRoute::_(ContentHelperRoute::getCategoryRoute($child->id));?>">                                <?php echo $this->escape($child->title); ?></a>                        </span>                       <?php if ($this->params->get('show_subcat_desc') == 1) :?>                        <?php if ($child->description) : ?>                                <div class="category-desc">                                        <?php echo JHtml::_('content.prepare', $child->description, '', 'com_content.category'); ?>                                </div>                        <?php endif; ?>                        <?php endif; ?>                        <?php if ( $this->params->get('show_cat_num_articles', 1)) : ?>                        <dl>                                <dt>                                        <?php echo JText::_('COM_CONTENT_NUM_ITEMS'); ?>                                </dt>                                <dd>                                        <?php echo $child->getNumItems(true); ?>                                </dd>                        </dl>                        <?php endif; ?>                        <?php if (count($child->getChildren()) > 0):							$this->children[$child->id] = $child->getChildren();							$this->category = $child;							$this->maxLevel--;							if ($this->maxLevel != 0) :								echo $this->loadTemplate('children');							endif;							$this->category = $child->getParent();							$this->maxLevel++;						endif; ?>                </li>                <?php endif; ?>        <?php endforeach; ?>        </ul><?php endif; ?>
<?php/** * @package     Joomla.Libraries * @subpackage  Installer * * @copyright   Copyright (C) 2005 - 2013 Open Source Matters, Inc. All rights reserved. * @license     GNU General Public License version 2 or later; see LICENSE */defined('JPATH_PLATFORM') or die;/** * Extension object * * @package     Joomla.Libraries * @subpackage  Installer * @since       3.1 */class JInstallerExtension extends JObject{	/**	 * Filename of the extension	 *	 * @var    string	 * @since  3.1	 */	public $filename = '';	/**	 * Type of the extension	 *	 * @var    string	 * @since  3.1	 */	public $type = '';	/**	 * Unique Identifier for the extension	 *	 * @var    string	 * @since  3.1	 */	public $id = '';	/**	 * The status of the extension	 *	 * @var    boolean	 * @since  3.1	 */	public $published = false;	/**	 * String representation of client. Valid for modules, templates and languages.	 * Set by default to site.	 *	 * @var    string	 * @since  3.1	 */	public $client = 'site';	/**	 * The group name of the plugin. Not used for other known extension types (only plugins)	 *	 * @var string	 * @since  3.1	 */	public $group = '';	/**	 * An object representation of the manifest file stored metadata	 *	 * @var object	 * @since  3.1	 */	public $manifest_cache = null;	/**	 * An object representation of the extension params	 *	 * @var    object	 * @since  3.1	 */	public $params = null;	/**	 * Constructor	 *	 * @param   SimpleXMLElement  $element  A SimpleXMLElement from which to load data from	 *	 * @since  3.1	 */	public function __construct(SimpleXMLElement $element = null)	{		if ($element)		{			$this->type = (string) $element->attributes()->type;			$this->id = (string) $element->attributes()->id;			switch ($this->type)			{				case 'component':					// By default a component doesn't have anything					break;				case 'module':				case 'template':				case 'language':					$this->client = (string) $element->attributes()->client;					$tmp_client_id = JApplicationHelper::getClientInfo($this->client, 1);					if ($tmp_client_id == null)					{						JLog::add(JText::_('JLIB_INSTALLER_ERROR_EXTENSION_INVALID_CLIENT_IDENTIFIER'), JLog::WARNING, 'jerror');					}					else					{						$this->client_id = $tmp_client_id->id;					}					break;				case 'plugin':					$this->group = (string) $element->attributes()->group;					break;				default:					// Catch all					// Get and set client and group if we don't recognise the extension					if ($element->attributes()->client)					{						$this->client_id = JApplicationHelper::getClientInfo($this->client, 1);						$this->client_id = $this->client_id->id;					}					if ($element->attributes()->group)					{						$this->group = (string) $element->attributes()->group;					}					break;			}			$this->filename = (string) $element;		}	}}/** * Deprecated class placeholder. You should use JInstallerExtension instead. * * @package     Joomla.Libraries * @subpackage  Installer * @since       3.1 * @deprecated  4.0 * @codeCoverageIgnore */class JExtension extends JInstallerExtension{	/**	 * Constructor	 *	 * @param   SimpleXMLElement  $element  A SimpleXMLElement from which to load data from	 *	 * @since  3.1	 */	public function __construct(SimpleXMLElement $element = null)	{		parent::__construct($element);	}}
<?php/*** @version $Id$* @package utf8* @subpackage strings*///---------------------------------------------------------------/*** UTF-8 aware alternative to ord* Returns the unicode ordinal for a character* @param string UTF-8 encoded character* @return int unicode ordinal for the character* @see http://www.php.net/ord* @see http://www.php.net/manual/en/function.ord.php#46267*/function utf8_ord($chr) {    $ord0 = ord($chr);    if ( $ord0 >= 0 && $ord0 <= 127 ) {        return $ord0;    }    if ( !isset($chr{1}) ) {        trigger_error('Short sequence - at least 2 bytes expected, only 1 seen');        return FALSE;    }    $ord1 = ord($chr{1});    if ( $ord0 >= 192 && $ord0 <= 223 ) {        return ( $ord0 - 192 ) * 64            + ( $ord1 - 128 );    }    if ( !isset($chr{2}) ) {        trigger_error('Short sequence - at least 3 bytes expected, only 2 seen');        return FALSE;    }    $ord2 = ord($chr{2});    if ( $ord0 >= 224 && $ord0 <= 239 ) {        return ($ord0-224)*4096            + ($ord1-128)*64                + ($ord2-128);    }    if ( !isset($chr{3}) ) {        trigger_error('Short sequence - at least 4 bytes expected, only 3 seen');        return FALSE;    }    $ord3 = ord($chr{3});    if ($ord0>=240 && $ord0<=247) {        return ($ord0-240)*262144            + ($ord1-128)*4096                + ($ord2-128)*64                    + ($ord3-128);    }    if ( !isset($chr{4}) ) {        trigger_error('Short sequence - at least 5 bytes expected, only 4 seen');        return FALSE;    }    $ord4 = ord($chr{4});    if ($ord0>=248 && $ord0<=251) {        return ($ord0-248)*16777216            + ($ord1-128)*262144                + ($ord2-128)*4096                    + ($ord3-128)*64                        + ($ord4-128);    }    if ( !isset($chr{5}) ) {        trigger_error('Short sequence - at least 6 bytes expected, only 5 seen');        return FALSE;    }    if ($ord0>=252 && $ord0<=253) {        return ($ord0-252) * 1073741824            + ($ord1-128)*16777216                + ($ord2-128)*262144                    + ($ord3-128)*4096                        + ($ord4-128)*64                            + (ord($chr{5})-128);    }    if ( $ord0 >= 254 && $ord0 <= 255 ) {        trigger_error('Invalid UTF-8 with surrogate ordinal '.$ord0);        return FALSE;    }}
<?php/** * @package     Joomla.Site * @subpackage  com_content * * @copyright   Copyright (C) 2005 - 2013 Open Source Matters, Inc. All rights reserved. * @license     GNU General Public License version 2 or later; see LICENSE.txt */defined('_JEXEC') or die;JHtml::addIncludePath(JPATH_COMPONENT.'/helpers');JHtml::_('behavior.caption');?><div class="category-list<?php echo $this->pageclass_sfx;?>"><?php$this->subtemplatename = 'articles';echo JLayoutHelper::render('joomla.content.category_default', $this);?></div>
<?php/** * @package     Joomla.Libraries * @subpackage  Menu * * @copyright   Copyright (C) 2005 - 2013 Open Source Matters, Inc. All rights reserved. * @license     GNU General Public License version 2 or later; see LICENSE.txt */defined('_JEXEC') or die;/** * JMenu class. * * @package     Joomla.Libraries * @subpackage  Menu * @since       1.5 */class JMenuAdministrator extends JMenu{}
<?php/** * @package     Joomla.Site * @subpackage  com_contact * * @copyright   Copyright (C) 2005 - 2013 Open Source Matters, Inc. All rights reserved. * @license     GNU General Public License version 2 or later; see LICENSE.txt */defined('_JEXEC') or die;JHtml::_('behavior.framework');$listOrder	= $this->escape($this->state->get('list.ordering'));$listDirn	= $this->escape($this->state->get('list.direction'));?><?php if (empty($this->items)) : ?>	<p> <?php echo JText::_('COM_CONTACT_NO_ARTICLES'); ?> </p><?php else : ?><form action="<?php echo htmlspecialchars(JUri::getInstance()->toString()); ?>" method="post" name="adminForm" id="adminForm"><?php if ($this->params->get('show_pagination_limit')) : ?>	<fieldset class="filters">	<legend class="hidelabeltxt"><?php echo JText::_('JGLOBAL_FILTER_LABEL'); ?></legend>		<div class="display-limit">			<?php echo JText::_('JGLOBAL_DISPLAY_NUM'); ?>&#160;			<?php echo $this->pagination->getLimitBox(); ?>		</div>	</fieldset><?php endif; ?>	<table class="category">		<?php if ($this->params->get('show_headings')) : ?>		<thead><tr>			<th class="item-title">				<?php echo JHtml::_('grid.sort', 'COM_CONTACT_CONTACT_EMAIL_NAME_LABEL', 'a.name', $listDirn, $listOrder); ?>			</th>			<?php if ($this->params->get('show_position_headings')) : ?>			<th class="item-position">				<?php echo JHtml::_('grid.sort', 'COM_CONTACT_POSITION', 'a.con_position', $listDirn, $listOrder); ?>			</th>			<?php endif; ?>			<?php if ($this->params->get('show_email_headings')) : ?>			<th class="item-email">				<?php echo JText::_('JGLOBAL_EMAIL'); ?>			</th>			<?php endif; ?>			<?php if ($this->params->get('show_telephone_headings')) : ?>			<th class="item-phone">				<?php echo JText::_('COM_CONTACT_TELEPHONE'); ?>			</th>			<?php endif; ?>			<?php if ($this->params->get('show_mobile_headings')) : ?>			<th class="item-phone">				<?php echo JText::_('COM_CONTACT_MOBILE'); ?>			</th>			<?php endif; ?>			<?php if ($this->params->get('show_fax_headings')) : ?>			<th class="item-phone">				<?php echo JText::_('COM_CONTACT_FAX'); ?>			</th>			<?php endif; ?>			<?php if ($this->params->get('show_suburb_headings')) : ?>			<th class="item-suburb">				<?php echo JHtml::_('grid.sort', 'COM_CONTACT_SUBURB', 'a.suburb', $listDirn, $listOrder); ?>			</th>			<?php endif; ?>			<?php if ($this->params->get('show_state_headings')) : ?>			<th class="item-state">				<?php echo JHtml::_('grid.sort', 'COM_CONTACT_STATE', 'a.state', $listDirn, $listOrder); ?>			</th>			<?php endif; ?>			<?php if ($this->params->get('show_country_headings')) : ?>			<th class="item-state">				<?php echo JHtml::_('grid.sort', 'COM_CONTACT_COUNTRY', 'a.country', $listDirn, $listOrder); ?>			</th>			<?php endif; ?>			</tr>		</thead>		<?php endif; ?>		<tbody>			<?php foreach ($this->items as $i => $item) : ?>				<?php if ($this->items[$i]->published == 0) : ?>					<tr class="system-unpublished cat-list-row<?php echo $i % 2; ?>">				<?php else: ?>					<tr class="cat-list-row<?php echo $i % 2; ?>" >				<?php endif; ?>					<td class="item-title">						<a href="<?php echo JRoute::_(ContactHelperRoute::getContactRoute($item->slug, $item->catid)); ?>">							<?php echo $item->name; ?></a>					</td>					<?php if ($this->params->get('show_position_headings')) : ?>						<td class="item-position">							<?php echo $item->con_position; ?>						</td>					<?php endif; ?>					<?php if ($this->params->get('show_email_headings')) : ?>						<td class="item-email">							<?php echo $item->email_to; ?>						</td>					<?php endif; ?>					<?php if ($this->params->get('show_telephone_headings')) : ?>						<td class="item-phone">							<?php echo $item->telephone; ?>						</td>					<?php endif; ?>					<?php if ($this->params->get('show_mobile_headings')) : ?>						<td class="item-phone">							<?php echo $item->mobile; ?>						</td>					<?php endif; ?>					<?php if ($this->params->get('show_fax_headings')) : ?>					<td class="item-phone">						<?php echo $item->fax; ?>					</td>					<?php endif; ?>					<?php if ($this->params->get('show_suburb_headings')) : ?>					<td class="item-suburb">						<?php echo $item->suburb; ?>					</td>					<?php endif; ?>					<?php if ($this->params->get('show_state_headings')) : ?>					<td class="item-state">						<?php echo $item->state; ?>					</td>					<?php endif; ?>					<?php if ($this->params->get('show_country_headings')) : ?>					<td class="item-state">						<?php echo $item->country; ?>					</td>					<?php endif; ?>				</tr>			<?php endforeach; ?>		</tbody>	</table>	<?php if ($this->params->get('show_pagination')) : ?>	<div class="pagination">		<?php if ($this->params->def('show_pagination_results', 1)) : ?>		<p class="counter">			<?php echo $this->pagination->getPagesCounter(); ?>		</p>		<?php endif; ?>		<?php echo $this->pagination->getPagesLinks(); ?>	</div>	<?php endif; ?>	<div>		<input type="hidden" name="filter_order" value="<?php echo $listOrder; ?>" />		<input type="hidden" name="filter_order_Dir" value="<?php echo $listDirn; ?>" />	</div></form><?php endif; ?>
<?php/** * @package     Joomla.Administrator * @subpackage  com_menus * * @copyright   Copyright (C) 2005 - 2013 Open Source Matters, Inc. All rights reserved. * @license     GNU General Public License version 2 or later; see LICENSE.txt */defined('_JEXEC') or die;/** * Menu table * * @package     Joomla.Administrator * @subpackage  com_menus */class MenusTableMenu extends JTableMenu{	/**	 * Method to delete a node and, optionally, its child nodes from the table.	 *	 * @param   integer  $pk        The primary key of the node to delete.	 * @param   boolean  $children  True to delete child nodes, false to move them up a level.	 *	 * @return  boolean  True on success.	 *	 * @since   2.5	 * @see     http://docs.joomla.org/JTableNested/delete	 */	public function delete($pk = null, $children = false)	{		return parent::delete($pk, $children);	}}
<?php/** * @package     Joomla.Site * @subpackage  com_finder * * @copyright   Copyright (C) 2005 - 2013 Open Source Matters, Inc. All rights reserved. * @license     GNU General Public License version 2 or later; see LICENSE */defined('_JEXEC') or die;JHtml::_('behavior.framework');JHtml::addIncludePath(JPATH_COMPONENT . '/helpers/html');JHtml::stylesheet('com_finder/finder.css', false, true, false);?><div class="finder<?php echo $this->pageclass_sfx; ?>"><?php if ($this->params->get('show_page_heading')) : ?><h1>	<?php if ($this->escape($this->params->get('page_heading'))) : ?>		<?php echo $this->escape($this->params->get('page_heading')); ?>	<?php else : ?>		<?php echo $this->escape($this->params->get('page_title')); ?>	<?php endif; ?></h1><?php endif; ?><?php if ($this->params->get('show_search_form', 1)) : ?>	<div id="search-form">		<?php echo $this->loadTemplate('form'); ?>	</div><?php endif;// Load the search results layout if we are performing a search.if ($this->query->search === true):?>	<div id="search-results">		<?php echo $this->loadTemplate('results'); ?>	</div><?php endif; ?></div>
<?php/** * @package     Joomla.Administrator * @subpackage  com_templates * * @copyright   Copyright (C) 2005 - 2013 Open Source Matters, Inc. All rights reserved. * @license     GNU General Public License version 2 or later; see LICENSE.txt */defined('_JEXEC') or die;// Initiasile related data.require_once JPATH_ADMINISTRATOR.'/components/com_menus/helpers/menus.php';$menuTypes = MenusHelper::getMenuLinks();$user = JFactory::getUser();?><label id="jform_menuselect-lbl" for="jform_menuselect"><?php echo JText::_('JGLOBAL_MENU_SELECTION'); ?></label><div class="btn-toolbar">	<button class="btn" type="button" class="jform-rightbtn" onclick="$$('.chk-menulink').each(function(el) { el.checked = !el.checked; });">		<i class="icon-checkbox-partial"></i> <?php echo JText::_('JGLOBAL_SELECTION_INVERT'); ?>	</button></div><div id="menu-assignment">	<ul class="menu-links thumbnails">		<?php foreach ($menuTypes as &$type) : ?>			<li class="span3">				<div class="thumbnail">				<button class="btn" type="button" class="jform-rightbtn" onclick="$$('.<?php echo $type->menutype; ?>').each(function(el) { el.checked = !el.checked; });">					<i class="icon-checkbox-partial"></i> <?php echo JText::_('JGLOBAL_SELECTION_INVERT'); ?>				</button>				<h5><?php echo $type->title ? $type->title : $type->menutype; ?></h5>				<?php foreach ($type->links as $link) : ?>					<label class="checkbox small" for="link<?php echo (int) $link->value;?>" >					<input type="checkbox" name="jform[assigned][]" value="<?php echo (int) $link->value;?>" id="link<?php echo (int) $link->value;?>"<?php if ($link->template_style_id == $this->item->id):?> checked="checked"<?php endif;?><?php if ($link->checked_out && $link->checked_out != $user->id):?> disabled="disabled"<?php else:?> class="chk-menulink <?php echo $type->menutype; ?>"<?php endif;?> />					<?php echo $link->text; ?>					</label>				<?php endforeach; ?>				</div>			</li>		<?php endforeach; ?>	</ul></div>
<?php/** * @package     Joomla.Platform * @subpackage  Archive * * @copyright   Copyright (C) 2005 - 2013 Open Source Matters, Inc. All rights reserved. * @license     GNU General Public License version 2 or later; see LICENSE */defined('JPATH_PLATFORM') or die;jimport('joomla.filesystem.folder');/** * Tar format adapter for the JArchive class * * This class is inspired from and draws heavily in code and concept from the Compress package of * The Horde Project <http://www.horde.org> * * @contributor  Michael Slusarz <slusarz@horde.org> * @contributor  Michael Cochrane <mike@graftonhall.co.nz> * * @package     Joomla.Platform * @subpackage  Archive * @since       11.1 */class JArchiveTar implements JArchiveExtractable{	/**	 * Tar file types.	 *	 * @var    array	 * @since  11.1	 */	private $_types = array(		0x0 => 'Unix file',		0x30 => 'File',		0x31 => 'Link',		0x32 => 'Symbolic link',		0x33 => 'Character special file',		0x34 => 'Block special file',		0x35 => 'Directory',		0x36 => 'FIFO special file',		0x37 => 'Contiguous file');	/**	 * Tar file data buffer	 *	 * @var    string	 * @since  11.1	 */	private $_data = null;	/**	 * Tar file metadata array	 *	 * @var    array	 * @since  11.1	 */	private $_metadata = null;	/**	 * Extract a ZIP compressed file to a given path	 *	 * @param   string  $archive      Path to ZIP archive to extract	 * @param   string  $destination  Path to extract archive into	 * @param   array   $options      Extraction options [unused]	 *	 * @return  boolean True if successful	 *	 * @throws  RuntimeException	 * @since   11.1	 */	public function extract($archive, $destination, array $options = array())	{		$this->_data = null;		$this->_metadata = null;		$this->_data = file_get_contents($archive);		if (!$this->_data)		{			if (class_exists('JError'))			{				return JError::raiseWarning(100, 'Unable to read archive');			}			else			{				throw new RuntimeException('Unable to read archive');			}		}		$this->_getTarInfo($this->_data);		for ($i = 0, $n = count($this->_metadata); $i < $n; $i++)		{			$type = strtolower($this->_metadata[$i]['type']);			if ($type == 'file' || $type == 'unix file')			{				$buffer = $this->_metadata[$i]['data'];				$path = JPath::clean($destination . '/' . $this->_metadata[$i]['name']);				// Make sure the destination folder exists				if (!JFolder::create(dirname($path)))				{					if (class_exists('JError'))					{						return JError::raiseWarning(100, 'Unable to create destination');					}					else					{						throw new RuntimeException('Unable to create destination');					}				}				if (JFile::write($path, $buffer) === false)				{					if (class_exists('JError'))					{						return JError::raiseWarning(100, 'Unable to write entry');					}					else					{						throw new RuntimeException('Unable to write entry');					}				}			}		}		return true;	}	/**	 * Tests whether this adapter can unpack files on this computer.	 *	 * @return  boolean  True if supported	 *	 * @since   11.3	 */	public static function isSupported()	{		return true;	}	/**	 * Get the list of files/data from a Tar archive buffer.	 *	 * @param   string  &$data  The Tar archive buffer.	 *	 * @return   array  Archive metadata array	 * <pre>	 * KEY: Position in the array	 * VALUES: 'attr'  --  File attributes	 * 'data'  --  Raw file contents	 * 'date'  --  File modification time	 * 'name'  --  Filename	 * 'size'  --  Original file size	 * 'type'  --  File type	 * </pre>	 *	 * @since    11.1	 */	protected function _getTarInfo(& $data)	{		$position = 0;		$return_array = array();		while ($position < strlen($data))		{			$info = @unpack(				"a100filename/a8mode/a8uid/a8gid/a12size/a12mtime/a8checksum/Ctypeflag/a100link/a6magic/a2version/a32uname/a32gname/a8devmajor/a8devminor",				substr($data, $position)			);			if (!$info)			{				if (class_exists('JError'))				{					return JError::raiseWarning(100, 'Unable to decompress data');				}				else				{					throw new RuntimeException('Unable to decompress data');				}			}			$position += 512;			$contents = substr($data, $position, octdec($info['size']));			$position += ceil(octdec($info['size']) / 512) * 512;			if ($info['filename'])			{				$file = array(					'attr' => null,					'data' => null,					'date' => octdec($info['mtime']),					'name' => trim($info['filename']),					'size' => octdec($info['size']),					'type' => isset($this->_types[$info['typeflag']]) ? $this->_types[$info['typeflag']] : null);				if (($info['typeflag'] == 0) || ($info['typeflag'] == 0x30) || ($info['typeflag'] == 0x35))				{					/* File or folder. */					$file['data'] = $contents;					$mode = hexdec(substr($info['mode'], 4, 3));					$file['attr'] = (($info['typeflag'] == 0x35) ? 'd' : '-') . (($mode & 0x400) ? 'r' : '-') . (($mode & 0x200) ? 'w' : '-') .						(($mode & 0x100) ? 'x' : '-') . (($mode & 0x040) ? 'r' : '-') . (($mode & 0x020) ? 'w' : '-') . (($mode & 0x010) ? 'x' : '-') .						(($mode & 0x004) ? 'r' : '-') . (($mode & 0x002) ? 'w' : '-') . (($mode & 0x001) ? 'x' : '-');				}				else				{					/* Some other type. */				}				$return_array[] = $file;			}		}		$this->_metadata = $return_array;		return true;	}}
<?php/** * @package     Joomla.Administrator * @subpackage  com_finder * * @copyright   Copyright (C) 2005 - 2013 Open Source Matters, Inc. All rights reserved. * @license     GNU General Public License version 2 or later; see LICENSE */defined('_JEXEC') or die;/** * Helper class for Finder. * * @package     Joomla.Administrator * @subpackage  com_finder * @since       2.5 */class FinderHelper{	/**	 * @var		string	The extension name.	 * @since	2.5	 */	public static $extension = 'com_finder';	/**	 * Configure the Linkbar.	 *	 * @param   string  $vName  The name of the active view.	 *	 * @return  void	 *	 * @since   2.5	 */	public static function addSubmenu($vName)	{		JHtmlSidebar::addEntry(			JText::_('COM_FINDER_SUBMENU_INDEX'),			'index.php?option=com_finder&view=index',			$vName == 'index'		);		JHtmlSidebar::addEntry(			JText::_('COM_FINDER_SUBMENU_MAPS'),			'index.php?option=com_finder&view=maps',			$vName == 'maps'		);		JHtmlSidebar::addEntry(			JText::_('COM_FINDER_SUBMENU_FILTERS'),			'index.php?option=com_finder&view=filters',			$vName == 'filters'		);	}	/**	 * Gets a list of the actions that can be performed.	 *	 * @return  JObject  A JObject containing the allowed actions.	 *	 * @since   2.5	 */	public static function getActions()	{		$user = JFactory::getUser();		$result = new JObject;		$assetName = 'com_finder';		$actions = JAccess::getActions($assetName, 'component');		foreach ($actions as $action)		{			$result->set($action->name, $user->authorise($action->name, $assetName));		}		return $result;	}}
<?php/** * @package     Joomla.Platform * @subpackage  GitHub * * @copyright   Copyright (C) 2005 - 2013 Open Source Matters, Inc. All rights reserved * @license     GNU General Public License version 2 or later; see LICENSE */defined('JPATH_PLATFORM') or die;/** * GitHub API Milestones class for the Joomla Platform. * * @package     Joomla.Platform * @subpackage  GitHub * @since       12.3 */class JGithubMilestones extends JGithubObject{	/**	 * Method to get the list of milestones for a repo.	 *	 * @param   string   $user       The name of the owner of the GitHub repository.	 * @param   string   $repo       The name of the GitHub repository.	 * @param   string   $state      The milestone state to retrieved.  Open (default) or closed.	 * @param   string   $sort       Sort can be due_date (default) or completeness.	 * @param   string   $direction  Direction is asc or desc (default).	 * @param   integer  $page       The page number from which to get items.	 * @param   integer  $limit      The number of items on a page.	 *	 * @return  array	 *	 * @since   12.3	 */	public function getList($user, $repo, $state = 'open', $sort = 'due_date', $direction = 'desc', $page = 0, $limit = 0)	{		// Build the request path.		$path = '/repos/' . $user . '/' . $repo . '/milestones?';		$path .= 'state=' . $state;		$path .= '&sort=' . $sort;		$path .= '&direction=' . $direction;		// Send the request.		$response = $this->client->get($this->fetchUrl($path, $page, $limit));		// Validate the response code.		if ($response->code != 200)		{			// Decode the error response and throw an exception.			$error = json_decode($response->body);			throw new DomainException($error->message, $response->code);		}		return json_decode($response->body);	}	/**	 * Method to get a specific milestone.	 *	 * @param   string   $user         The name of the owner of the GitHub repository.	 * @param   string   $repo         The name of the GitHub repository.	 * @param   integer  $milestoneId  The milestone id to get.	 *	 * @return  object	 *	 * @since   12.3	 */	public function get($user, $repo, $milestoneId)	{		// Build the request path.		$path = '/repos/' . $user . '/' . $repo . '/milestones/' . (int) $milestoneId;		// Send the request.		$response = $this->client->get($this->fetchUrl($path));		// Validate the response code.		if ($response->code != 200)		{			// Decode the error response and throw an exception.			$error = json_decode($response->body);			throw new DomainException($error->message, $response->code);		}		return json_decode($response->body);	}	/**	 * Method to create a milestone for a repository.	 *	 * @param   string   $user         The name of the owner of the GitHub repository.	 * @param   string   $repo         The name of the GitHub repository.	 * @param   integer  $title        The title of the milestone.	 * @param   string   $state        Can be open (default) or closed.	 * @param   string   $description  Optional description for milestone.	 * @param   string   $due_on       Optional ISO 8601 time.	 *	 * @return  object	 *	 * @since   12.3	 */	public function create($user, $repo, $title, $state = null, $description = null, $due_on = null)	{		// Build the request path.		$path = '/repos/' . $user . '/' . $repo . '/milestones';		// Build the request data.		$data = array(			'title' => $title		);		if (!is_null($state))		{			$data['state'] = $state;		}		if (!is_null($description))		{			$data['description'] = $description;		}		if (!is_null($due_on))		{			$data['due_on'] = $due_on;		}		$data = json_encode($data);		// Send the request.		$response = $this->client->post($this->fetchUrl($path), $data);		// Validate the response code.		if ($response->code != 201)		{			// Decode the error response and throw an exception.			$error = json_decode($response->body);			throw new DomainException($error->message, $response->code);		}		return json_decode($response->body);	}	/**	 * Method to update a milestone.	 *	 * @param   string   $user         The name of the owner of the GitHub repository.	 * @param   string   $repo         The name of the GitHub repository.	 * @param   integer  $milestoneId  The id of the comment to update.	 * @param   integer  $title        Optional title of the milestone.	 * @param   string   $state        Can be open (default) or closed.	 * @param   string   $description  Optional description for milestone.	 * @param   string   $due_on       Optional ISO 8601 time.	 *	 * @return  object	 *	 * @since   12.3	 */	public function edit($user, $repo, $milestoneId, $title = null, $state = null, $description = null, $due_on = null)	{		// Build the request path.		$path = '/repos/' . $user . '/' . $repo . '/milestones/' . (int) $milestoneId;		// Build the request data.		$data = array();		if (!is_null($title))		{			$data['title'] = $title;		}		if (!is_null($state))		{			$data['state'] = $state;		}		if (!is_null($description))		{			$data['description'] = $description;		}		if (!is_null($due_on))		{			$data['due_on'] = $due_on;		}		$data = json_encode($data);		// Send the request.		$response = $this->client->patch($this->fetchUrl($path), $data);		// Validate the response code.		if ($response->code != 200)		{			// Decode the error response and throw an exception.			$error = json_decode($response->body);			throw new DomainException($error->message, $response->code);		}		return json_decode($response->body);	}	/**	 * Method to delete a milestone.	 *	 * @param   string   $user         The name of the owner of the GitHub repository.	 * @param   string   $repo         The name of the GitHub repository.	 * @param   integer  $milestoneId  The id of the milestone to delete.	 *	 * @return  void	 *	 * @since   12.3	 */	public function delete($user, $repo, $milestoneId)	{		// Build the request path.		$path = '/repos/' . $user . '/' . $repo . '/milestones/' . (int) $milestoneId;		// Send the request.		$response = $this->client->delete($this->fetchUrl($path));		// Validate the response code.		if ($response->code != 204)		{			// Decode the error response and throw an exception.			$error = json_decode($response->body);			throw new DomainException($error->message, $response->code);		}	}}
<?php/** * @package     Joomla.Site * @subpackage  mod_random_image * * @copyright   Copyright (C) 2005 - 2013 Open Source Matters, Inc. All rights reserved. * @license     GNU General Public License version 2 or later; see LICENSE.txt */defined('_JEXEC') or die;?><div class="random-image<?php echo $moduleclass_sfx ?>"><?php if ($link) : ?><a href="<?php echo $link; ?>"><?php endif; ?>	<?php echo JHtml::_('image', $image->folder.'/'.$image->name, $image->name, array('width' => $image->width, 'height' => $image->height)); ?><?php if ($link) : ?></a><?php endif; ?></div>
<?php/** * @package     Joomla.Site * @subpackage  com_finder * * @copyright   Copyright (C) 2005 - 2013 Open Source Matters, Inc. All rights reserved. * @license     GNU General Public License version 2 or later; see LICENSE */defined('_JEXEC') or die;/** * Suggestions JSON controller for Finder. * * @package     Joomla.Site * @subpackage  com_finder * @since       2.5 */class FinderControllerSuggestions extends JControllerLegacy{	/**	 * Method to find search query suggestions.	 *	 * @param   boolean  $cachable   If true, the view output will be cached	 * @param   array    $urlparams  An array of safe url parameters and their variable types, for valid values see {@link JFilterInput::clean()}.	 *	 * @return  void	 *	 * @since   2.5	 */	public function display($cachable = false, $urlparams = false)	{		$return = array();		$params = JComponentHelper::getParams('com_finder');		if ($params->get('show_autosuggest', 1))		{			// Get the suggestions.			$model = $this->getModel('Suggestions', 'FinderModel');			$return = $model->getItems();		}		// Check the data.		if (empty($return))		{			$return = array();		}		// Use the correct json mime-type		header('Content-Type: application/json');		// Send the response.		echo json_encode($return);		JFactory::getApplication()->close();	}}
<?php/** * @package     Joomla.Platform * @subpackage  Image * * @copyright   Copyright (C) 2005 - 2013 Open Source Matters, Inc. All rights reserved. * @license     GNU General Public License version 2 or later; see LICENSE */defined('JPATH_PLATFORM') or die;/** * Image Filter class to transform an image to grayscale. * * @package     Joomla.Platform * @subpackage  Image * @since       11.3 */class JImageFilterGrayscale extends JImageFilter{	/**	 * Method to apply a filter to an image resource.	 *	 * @param   array  $options  An array of options for the filter.	 *	 * @return  void	 *	 * @since   11.3	 * @throws  InvalidArgumentException	 * @throws  RuntimeException	 */	public function execute(array $options = array())	{		// Verify that image filter support for PHP is available.		if (!function_exists('imagefilter'))		{			JLog::add('The imagefilter function for PHP is not available.', JLog::ERROR);			throw new RuntimeException('The imagefilter function for PHP is not available.');		}		// Perform the grayscale filter.		imagefilter($this->handle, IMG_FILTER_GRAYSCALE);	}}
<?php/** * @package     Joomla.Platform * @subpackage  Model * * @copyright   Copyright (C) 2005 - 2013 Open Source Matters, Inc. All rights reserved. * @license     GNU General Public License version 2 or later; see LICENSE */defined('JPATH_PLATFORM') or die;/** * Joomla Platform Base Model Class * * @package     Joomla.Platform * @subpackage  Model * @since       12.1 */abstract class JModelBase implements JModel{	/**	 * The model state.	 *	 * @var    JRegistry	 * @since  12.1	 */	protected $state;	/**	 * Instantiate the model.	 *	 * @param   JRegistry  $state  The model state.	 *	 * @since   12.1	 */	public function __construct(JRegistry $state = null)	{		// Setup the model.		$this->state = isset($state) ? $state : $this->loadState();	}	/**	 * Get the model state.	 *	 * @return  JRegistry  The state object.	 *	 * @since   12.1	 */	public function getState()	{		return $this->state;	}	/**	 * Set the model state.	 *	 * @param   JRegistry  $state  The state object.	 *	 * @return  void	 *	 * @since   12.1	 */	public function setState(JRegistry $state)	{		$this->state = $state;	}	/**	 * Load the model state.	 *	 * @return  JRegistry  The state object.	 *	 * @since   12.1	 */	protected function loadState()	{		return new JRegistry;	}}
<?php/** * @package     Joomla.Administrator * @subpackage  com_joomlaupdate * * @copyright   Copyright (C) 2005 - 2013 Open Source Matters, Inc. All rights reserved. * @license     GNU General Public License version 2 or later; see LICENSE.txt */defined('_JEXEC') or die;$ftpFieldsDisplay = $this->ftp['enabled'] ? '' : 'style = "display: none"';?><form action="index.php" method="post" id="adminForm"><?php if (is_null($this->updateInfo['object'])) : ?><fieldset>	<legend>		<?php echo JText::_('COM_JOOMLAUPDATE_VIEW_DEFAULT_NOUPDATES') ?>	</legend>	<p>		<?php echo JText::sprintf('COM_JOOMLAUPDATE_VIEW_DEFAULT_NOUPDATESNOTICE', JVERSION); ?>	</p></fieldset><?php else: ?><fieldset>	<legend>		<?php echo JText::_('COM_JOOMLAUPDATE_VIEW_DEFAULT_UPDATEFOUND') ?>	</legend>	<table class="adminlist">		<tbody>			<tr class="row0">				<td>					<?php echo JText::_('COM_JOOMLAUPDATE_VIEW_DEFAULT_INSTALLED') ?>				</td>				<td>					<?php echo $this->updateInfo['installed'] ?>				</td>			</tr>			<tr class="row1">				<td>					<?php echo JText::_('COM_JOOMLAUPDATE_VIEW_DEFAULT_LATEST') ?>				</td>				<td>					<?php echo $this->updateInfo['latest'] ?>				</td>			</tr>			<tr class="row0">				<td>					<?php echo JText::_('COM_JOOMLAUPDATE_VIEW_DEFAULT_PACKAGE') ?>				</td>				<td>					<a href="<?php echo $this->updateInfo['object']->downloadurl->_data ?>">						<?php echo $this->updateInfo['object']->downloadurl->_data ?>					</a>				</td>			</tr>			<tr class="row1">				<td>					<?php echo JText::_('COM_JOOMLAUPDATE_VIEW_DEFAULT_METHOD') ?>				</td>				<td>					<?php echo $this->methodSelect ?>				</td>			</tr>			<tr class="row0" id="row_ftp_hostname" <?php echo $ftpFieldsDisplay ?>>				<td>					<?php echo JText::_('COM_JOOMLAUPDATE_VIEW_DEFAULT_FTP_HOSTNAME') ?>				</td>				<td>					<input type="text" name="ftp_host" value="<?php echo $this->ftp['host'] ?>" />				</td>			</tr>			<tr class="row1" id="row_ftp_port" <?php echo $ftpFieldsDisplay ?>>				<td>					<?php echo JText::_('COM_JOOMLAUPDATE_VIEW_DEFAULT_FTP_PORT') ?>				</td>				<td>					<input type="text" name="ftp_port" value="<?php echo $this->ftp['port'] ?>" />				</td>			</tr>			<tr class="row0" id="row_ftp_username" <?php echo $ftpFieldsDisplay ?>>				<td>					<?php echo JText::_('COM_JOOMLAUPDATE_VIEW_DEFAULT_FTP_USERNAME') ?>				</td>				<td>					<input type="text" name="ftp_user" value="<?php echo $this->ftp['username'] ?>" />				</td>			</tr>			<tr class="row1" id="row_ftp_password" <?php echo $ftpFieldsDisplay ?>>				<td>					<?php echo JText::_('COM_JOOMLAUPDATE_VIEW_DEFAULT_FTP_PASSWORD') ?>				</td>				<td>					<input type="text" name="ftp_pass" value="<?php echo $this->ftp['password'] ?>" />				</td>			</tr>			<tr class="row0" id="row_ftp_directory" <?php echo $ftpFieldsDisplay ?>>				<td>					<?php echo JText::_('COM_JOOMLAUPDATE_VIEW_DEFAULT_FTP_DIRECTORY') ?>				</td>				<td>					<input type="text" name="ftp_root" value="<?php echo $this->ftp['directory'] ?>" />				</td>			</tr>		</tbody>		<tfoot>			<tr>				<td>					&nbsp;				</td>				<td>					<button class="submit" type="submit">						<?php echo JText::_('COM_JOOMLAUPDATE_VIEW_DEFAULT_INSTALLUPDATE') ?>					</button>				</td>			</tr>		</tfoot>	</table></fieldset><?php endif; ?><?php echo JHtml::_('form.token'); ?><input type="hidden" name="task" value="update.download" /><input type="hidden" name="option" value="com_joomlaupdate" /></form><div class="download_message" style="display: none">	<p></p>	<p class="nowarning"> <?php echo JText::_('COM_JOOMLAUPDATE_VIEW_DEFAULT_DOWNLOAD_IN_PROGRESS'); ?></p>	<div class="joomlaupdate_spinner"></div></div>
<?php/** * @package     Joomla.Administrator * @subpackage  com_cache * * @copyright   Copyright (C) 2005 - 2013 Open Source Matters, Inc. All rights reserved. * @license     GNU General Public License version 2 or later; see LICENSE.txt */defined('_JEXEC') or die;/** * Cache Controller * * @package     Joomla.Administrator * @subpackage  com_cache * @since       1.6 */class CacheController extends JControllerLegacy{	/**	 * @param   boolean			If true, the view output will be cached	 * @param   array  An array of safe url parameters and their variable types, for valid values see {@link JFilterInput::clean()}.	 *	 * @return  JController		This object to support chaining.	 * @since   1.5	 */	public function display($cachable = false, $urlparams = false)	{		require_once JPATH_COMPONENT.'/helpers/cache.php';		// Get the document object.		$document = JFactory::getDocument();		// Set the default view name and format from the Request.		$vName   = $this->input->get('view', 'cache');		$vFormat = $document->getType();		$lName   = $this->input->get('layout', 'default');		// Get and render the view.		if ($view = $this->getView($vName, $vFormat))		{			switch ($vName)			{				case 'purge':					break;				case 'cache':				default:					$model = $this->getModel($vName);					$view->setModel($model, true);					break;			}			$view->setLayout($lName);			// Push document object into the view.			$view->document = $document;			// Load the submenu.			CacheHelper::addSubmenu($this->input->get('view', 'cache'));			$view->display();		}	}	public function delete()	{		// Check for request forgeries		JSession::checkToken() or jexit(JText::_('JInvalid_Token'));		$cid = $this->input->post->get('cid', array(), 'array');		$model = $this->getModel('cache');		if (empty($cid))		{			JError::raiseWarning(500, JText::_('JERROR_NO_ITEMS_SELECTED'));		}		else		{			$model->cleanlist($cid);		}		$this->setRedirect('index.php?option=com_cache&client='.$model->getClient()->id);	}	public function purge()	{		// Check for request forgeries		JSession::checkToken() or jexit(JText::_('JInvalid_Token'));		$model = $this->getModel('cache');		$ret = $model->purge();		$msg = JText::_('COM_CACHE_EXPIRED_ITEMS_HAVE_BEEN_PURGED');		$msgType = 'message';		if ($ret === false)		{			$msg = JText::_('Error purging expired items');			$msgType = 'error';		}		$this->setRedirect('index.php?option=com_cache&view=purge', $msg, $msgType);	}}
<?php/** * @package     Joomla.Site * @subpackage  mod_stats * * @copyright   Copyright (C) 2005 - 2013 Open Source Matters, Inc. All rights reserved. * @license     GNU General Public License version 2 or later; see LICENSE.txt */defined('_JEXEC') or die;?><dl class="stats-module<?php echo $moduleclass_sfx ?>"><?php foreach ($list as $item) : ?>	<dt><?php echo $item->title;?></dt>	<dd><?php echo $item->data;?></dd><?php endforeach; ?></dl>
<?php/** * @package     Joomla.Administrator * @subpackage  com_finder * * @copyright   Copyright (C) 2005 - 2013 Open Source Matters, Inc. All rights reserved. * @license     GNU General Public License version 2 or later; see LICENSE */defined('_JEXEC') or die;/** * HTML Parser class for the Finder indexer package. * * @package     Joomla.Administrator * @subpackage  com_finder * @since       2.5 */class FinderIndexerParserHtml extends FinderIndexerParser{	/**	 * Method to process HTML input and extract the plain text.	 *	 * @param   string  $input  The input to process.	 *	 * @return  string  The plain text input.	 *	 * @since   2.5	 */	protected function process($input)	{		// Strip invalid UTF-8 characters.		$input = iconv("utf-8", "utf-8//IGNORE", $input);		// Strip all script tags.		$input = preg_replace('#<script[^>]*>.*?</script>#si', ' ', $input);		// Deal with spacing issues in the input.		$input = str_replace('>', '> ', $input);		$input = str_replace(array('&nbsp;', '&#160;'), ' ', $input);		$input = trim(preg_replace('#\s+#u', ' ', $input));		// Strip the tags from the input and decode entities.		$input = strip_tags($input);		$input = html_entity_decode($input, ENT_QUOTES, 'UTF-8');		$input = trim(preg_replace('#\s+#u', ' ', $input));		return $input;	}}
<?php/** * @package     Joomla.Platform * @subpackage  Form * @copyright   Copyright (C) 2005 - 2013 Open Source Matters, Inc. All rights reserved. * @license     GNU General Public License version 2 or later; see LICENSE.txt */defined('JPATH_PLATFORM') or die;/** * Form Rule class for the Joomla Platform. * Requires the value entered be one of the options in a field of type="list" * * @package     Joomla.Platform * @subpackage  Form * @since       11.1 */class JFormRuleOptions extends JFormRule{	/**	 * Method to test the value.	 *	 * @param   SimpleXMLElement  $element  The SimpleXMLElement object representing the <field /> tag for the form field object.	 * @param   mixed             $value    The form field value to validate.	 * @param   string            $group    The field name group control value. This acts as as an array container for the field.	 *                                      For example if the field has name="foo" and the group value is set to "bar" then the	 *                                      full field name would end up being "bar[foo]".	 * @param   JRegistry         $input    An optional JRegistry object with the entire data set to validate against the entire form.	 * @param   JForm             $form     The form object for which the field is being tested.	 *	 * @return  boolean  True if the value is valid, false otherwise.	 *	 * @since   11.1	 */	public function test(SimpleXMLElement $element, $value, $group = null, JRegistry $input = null, JForm $form = null)	{		// Check each value and return true if we get a match		foreach ($element->option as $option)		{			if ($value == (string) $option->attributes()->value)			{				return true;			}		}		return false;	}}
<?php/** * @package     Joomla.Site * @subpackage  com_search * * @copyright   Copyright (C) 2005 - 2013 Open Source Matters, Inc. All rights reserved. * @license     GNU General Public License version 2 or later; see LICENSE.txt */defined('_JEXEC') or die;$controller = JControllerLegacy::getInstance('Search');$controller->execute(JFactory::getApplication()->input->get('task'));$controller->redirect();
<?php/** * @package     Joomla.Administrator * @subpackage  com_admin * * @copyright   Copyright (C) 2005 - 2013 Open Source Matters, Inc. All rights reserved. * @license     GNU General Public License version 2 or later; see LICENSE.txt */defined('_JEXEC') or die;/** * Sysinfo View class for the Admin component * * @package     Joomla.Administrator * @subpackage  com_admin * @since       1.6 */class AdminViewSysinfo extends JViewLegacy{	/**	 * @var array some php settings	 */	protected $php_settings = null;	/**	 * @var array config values	 */	protected $config = null;	/**	 * @var array somme system values	 */	protected $info = null;	/**	 * @var string php info	 */	protected $php_info = null;	/**	 * @var array informations about writable state of directories	 */	protected $directory = null;	/**	 * Display the view	 */	public function display($tpl = null)	{		// Access check.		if (!JFactory::getUser()->authorise('core.admin'))		{			return JError::raiseWarning(404, JText::_('JERROR_ALERTNOAUTHOR'));		}		$this->php_settings	= $this->get('PhpSettings');		$this->config		= $this->get('config');		$this->info			= $this->get('info');		$this->php_info		= $this->get('PhpInfo');		$this->directory	= $this->get('directory');		$this->addToolbar();		$this->_setSubMenu();		parent::display($tpl);	}	/**	 * Setup the SubMenu	 *	 * @return  void	 *	 * @since   1.6	 * @note    Necessary for Hathor compatibility	 */	protected function _setSubMenu()	{		try		{			$contents = $this->loadTemplate('navigation');			$document = JFactory::getDocument();			$document->setBuffer($contents, 'modules', 'submenu');		}		catch (Exception $e)		{		}	}	/**	 * Setup the Toolbar	 *	 * @since   1.6	 */	protected function addToolbar()	{		JToolbarHelper::title(JText::_('COM_ADMIN_SYSTEM_INFORMATION'), 'systeminfo.png');		JToolbarHelper::help('JHELP_SITE_SYSTEM_INFORMATION');	}}
<?php/** * @package     Joomla.Site * @subpackage  com_finder * * @copyright   Copyright (C) 2005 - 2013 Open Source Matters, Inc. All rights reserved. * @license     GNU General Public License version 2 or later; see LICENSE */defined('_JEXEC') or die;/** * Method to build a SEF route. * * @param   array  &$query  An array of route variables. * * @return  array  An array of route segments. * * @since   2.5 */function FinderBuildRoute(&$query){	static $menu;	$segments = array();	// Load the menu if necessary.	if (!$menu)	{		$menu = JFactory::getApplication('site')->getMenu();	}	/*	 * First, handle menu item routes first. When the menu system builds a	 * route, it only provides the option and the menu item id. We don't have	 * to do anything to these routes.	 */	if (count($query) === 2 && isset($query['Itemid']) && isset($query['option']))	{		return $segments;	}	/*	 * Next, handle a route with a supplied menu item id. All system generated	 * routes should fall into this group. We can assume that the menu item id	 * is the best possible match for the query but we need to go through and	 * see which variables we can eliminate from the route query string because	 * they are present in the menu item route already.	 */	if (!empty($query['Itemid']))	{		// Get the menu item.		$item = $menu->getItem($query['Itemid']);		// Check if the view matches.		if ($item && @$item->query['view'] === @$query['view'])		{			unset($query['view']);		}		// Check if the search query filter matches.		if ($item && @$item->query['f'] === @$query['f'])		{			unset($query['f']);		}		// Check if the search query string matches.		if ($item && @$item->query['q'] === @$query['q'])		{			unset($query['q']);		}		return $segments;	}	/*	 * Lastly, handle a route with no menu item id. Fortunately, we only need	 * to deal with the view as the other route variables are supposed to stay	 * in the query string.	 */	if (isset($query['view']))	{		// Add the view to the segments.		$segments[] = $query['view'];		unset($query['view']);	}	return $segments;}/** * Method to parse a SEF route. * * @param   array  $segments  An array of route segments. * * @return  array  An array of route variables. * * @since   2.5 */function FinderParseRoute($segments){	$vars = array();	// Check if the view segment is set and it equals search or advanced.	if (@$segments[0] === 'search' || @$segments[0] === 'advanced')	{		$vars['view'] = $segments[0];	}	return $vars;}
<?php/** * @package     Joomla.Site * @subpackage  mod_login * * @copyright   Copyright (C) 2005 - 2013 Open Source Matters, Inc. All rights reserved. * @license     GNU General Public License version 2 or later; see LICENSE.txt */defined('_JEXEC') or die;// Include the login functions only oncerequire_once __DIR__ . '/helper.php';$params->def('greeting', 1);$type	= ModLoginHelper::getType();$return	= ModLoginHelper::getReturnURL($params, $type);$user	= JFactory::getUser();$layout = $params->get('layout', 'default');// Logged users must load the logout sublayoutif (!$user->guest){	$layout .= '_logout';}require JModuleHelper::getLayoutPath('mod_login', $layout);
<?php/** * @package     Joomla.Administrator * @subpackage  com_finder * * @copyright   Copyright (C) 2005 - 2013 Open Source Matters, Inc. All rights reserved. * @license     GNU General Public License version 2 or later; see LICENSE */defined('_JEXEC') or die;/** * Statistics view class for Finder. * * @package     Joomla.Administrator * @subpackage  com_finder * @since       2.5 */class FinderViewStatistics extends JViewLegacy{	/**	 * Method to display the view.	 *	 * @param   string  $tpl  A template file to load. [optional]	 *	 * @return  mixed  A string if successful, otherwise a JError object.	 *	 * @since   2.5	 */	public function display($tpl = null)	{		// Load the view data.		$this->data		= $this->get('Data');		// Check for errors.		if (count($errors = $this->get('Errors')))		{			JError::raiseError(500, implode("\n", $errors));			return false;		}		parent::display($tpl);	}}
<?php/** * @package     Joomla.Platform * @subpackage  GitHub * * @copyright   Copyright (C) 2005 - 2013 Open Source Matters, Inc. All rights reserved. * @license     GNU General Public License version 2 or later; see LICENSE */defined('JPATH_PLATFORM') or die;/** * GitHub API object class for the Joomla Platform. * * @package     Joomla.Platform * @subpackage  GitHub * @since       11.3 */abstract class JGithubObject{	/**	 * @var    JRegistry  Options for the GitHub object.	 * @since  11.3	 */	protected $options;	/**	 * @var    JGithubHttp  The HTTP client object to use in sending HTTP requests.	 * @since  11.3	 */	protected $client;	/**	 * Constructor.	 *	 * @param   JRegistry    $options  GitHub options object.	 * @param   JGithubHttp  $client   The HTTP client object.	 *	 * @since   11.3	 */	public function __construct(JRegistry $options = null, JGithubHttp $client = null)	{		$this->options = isset($options) ? $options : new JRegistry;		$this->client = isset($client) ? $client : new JGithubHttp($this->options);	}	/**	 * Method to build and return a full request URL for the request.  This method will	 * add appropriate pagination details if necessary and also prepend the API url	 * to have a complete URL for the request.	 *	 * @param   string   $path   URL to inflect	 * @param   integer  $page   Page to request	 * @param   integer  $limit  Number of results to return per page	 *	 * @return  string   The request URL.	 *	 * @since   11.3	 */	protected function fetchUrl($path, $page = 0, $limit = 0)	{		// Get a new JUri object fousing the api url and given path.		$uri = new JUri($this->options->get('api.url') . $path);		if ($this->options->get('api.username', false))		{			$uri->setUser($this->options->get('api.username'));		}		if ($this->options->get('api.password', false))		{			$uri->setPass($this->options->get('api.password'));		}		// If we have a defined page number add it to the JUri object.		if ($page > 0)		{			$uri->setVar('page', (int) $page);		}		// If we have a defined items per page add it to the JUri object.		if ($limit > 0)		{			$uri->setVar('per_page', (int) $limit);		}		return (string) $uri;	}}
<?php/** * @package     Joomla.Site * @subpackage  com_contact * * @copyright   Copyright (C) 2005 - 2013 Open Source Matters, Inc. All rights reserved. * @license     GNU General Public License version 2 or later; see LICENSE.txt */defined('_JEXEC') or die;$class = ' class="first"';if (count($this->items[$this->parent->id]) > 0 && $this->maxLevelcat != 0) :?><ul><?php foreach ($this->items[$this->parent->id] as $id => $item) : ?>	<?php	if ($this->params->get('show_empty_categories_cat') || $item->numitems || count($item->getChildren())) :	if (!isset($this->items[$this->parent->id][$id + 1]))	{		$class = ' class="last"';	}	?>	<li<?php echo $class; ?>>	<?php $class = ''; ?>		<span class="item-title"><a href="<?php echo JRoute::_(ContactHelperRoute::getCategoryRoute($item->id));?>">			<?php echo $this->escape($item->title); ?></a>		</span>		<?php if ($this->params->get('show_subcat_desc_cat') == 1) :?>		<?php if ($item->description) : ?>			<div class="category-desc">				<?php echo JHtml::_('content.prepare', $item->description, '', 'com_contact.categories'); ?>			</div>		<?php endif; ?>        <?php endif; ?>		<?php if ($this->params->get('show_cat_items_cat') == 1) :?>			<dl><dt>				<?php echo JText::_('COM_CONTACT_COUNT'); ?></dt>				<dd><?php echo $item->numitems; ?></dd>			</dl>		<?php endif; ?>		<?php if (count($item->getChildren()) > 0) :			$this->items[$item->id] = $item->getChildren();			$this->parent = $item;			$this->maxLevelcat--;			echo $this->loadTemplate('items');			$this->parent = $item->getParent();			$this->maxLevelcat++;		endif; ?>	</li>	<?php endif; ?><?php endforeach; ?></ul><?php endif; ?>
<?php/** * @package     Joomla.Platform * @subpackage  Pagination * * @copyright   Copyright (C) 2005 - 2013 Open Source Matters, Inc. All rights reserved. * @license     GNU General Public License version 2 or later; see LICENSE */defined('JPATH_PLATFORM') or die;/** * Pagination Class. Provides a common interface for content pagination for the * Joomla! Platform. * * @package     Joomla.Platform * @subpackage  Pagination * @since       11.1 */class JPagination{	/**	 * @var    integer  The record number to start displaying from.	 * @since  11.1	 */	public $limitstart = null;	/**	 * @var    integer  Number of rows to display per page.	 * @since  11.1	 */	public $limit = null;	/**	 * @var    integer  Total number of rows.	 * @since  11.1	 */	public $total = null;	/**	 * @var    integer  Prefix used for request variables.	 * @since  11.1	 */	public $prefix = null;	/**	 * @var    integer	 * @since  12.2	 */	public $pagesStart;	/**	 * @var    integer	 * @since  12.2	 */	public $pagesStop;	/**	 * @var    integer	 * @since  12.2	 */	public $pagesCurrent;	/**	 * @var    integer	 * @since  12.2	 */	public $pagesTotal;	/**	 * @var    boolean  View all flag	 * @since  12.1	 */	protected $viewall = false;	/**	 * Additional URL parameters to be added to the pagination URLs generated by the class.  These	 * may be useful for filters and extra values when dealing with lists and GET requests.	 *	 * @var    array	 * @since  12.1	 */	protected $additionalUrlParams = array();	/**	 * Constructor.	 *	 * @param   integer  $total       The total number of items.	 * @param   integer  $limitstart  The offset of the item to start at.	 * @param   integer  $limit       The number of items to display per page.	 * @param   string   $prefix      The prefix used for request variables.	 *	 * @since   11.1	 */	public function __construct($total, $limitstart, $limit, $prefix = '')	{		// Value/type checking.		$this->total = (int) $total;		$this->limitstart = (int) max($limitstart, 0);		$this->limit = (int) max($limit, 0);		$this->prefix = $prefix;		if ($this->limit > $this->total)		{			$this->limitstart = 0;		}		if (!$this->limit)		{			$this->limit = $total;			$this->limitstart = 0;		}		/*		 * If limitstart is greater than total (i.e. we are asked to display records that don't exist)		 * then set limitstart to display the last natural page of results		 */		if ($this->limitstart > $this->total - $this->limit)		{			$this->limitstart = max(0, (int) (ceil($this->total / $this->limit) - 1) * $this->limit);		}		// Set the total pages and current page values.		if ($this->limit > 0)		{			$this->pagesTotal = ceil($this->total / $this->limit);			$this->pagesCurrent = ceil(($this->limitstart + 1) / $this->limit);		}		// Set the pagination iteration loop values.		$displayedPages = 10;		$this->pagesStart = $this->pagesCurrent - ($displayedPages / 2);		if ($this->pagesStart < 1)		{			$this->pagesStart = 1;		}		if ($this->pagesStart + $displayedPages > $this->pagesTotal)		{			$this->pagesStop = $this->pagesTotal;			if ($this->pagesTotal < $displayedPages)			{				$this->pagesStart = 1;			}			else			{				$this->pagesStart = $this->pagesTotal - $displayedPages + 1;			}		}		else		{			$this->pagesStop = $this->pagesStart + $displayedPages - 1;		}		// If we are viewing all records set the view all flag to true.		if ($limit == 0)		{			$this->viewall = true;		}	}	/**	 * Method to set an additional URL parameter to be added to all pagination class generated	 * links.	 *	 * @param   string  $key    The name of the URL parameter for which to set a value.	 * @param   mixed   $value  The value to set for the URL parameter.	 *	 * @return  mixed  The old value for the parameter.	 *	 * @since   11.1	 */	public function setAdditionalUrlParam($key, $value)	{		// Get the old value to return and set the new one for the URL parameter.		$result = isset($this->additionalUrlParams[$key]) ? $this->additionalUrlParams[$key] : null;		// If the passed parameter value is null unset the parameter, otherwise set it to the given value.		if ($value === null)		{			unset($this->additionalUrlParams[$key]);		}		else		{			$this->additionalUrlParams[$key] = $value;		}		return $result;	}	/**	 * Method to get an additional URL parameter (if it exists) to be added to	 * all pagination class generated links.	 *	 * @param   string  $key  The name of the URL parameter for which to get the value.	 *	 * @return  mixed  The value if it exists or null if it does not.	 *	 * @since   11.1	 */	public function getAdditionalUrlParam($key)	{		$result = isset($this->additionalUrlParams[$key]) ? $this->additionalUrlParams[$key] : null;		return $result;	}	/**	 * Return the rationalised offset for a row with a given index.	 *	 * @param   integer  $index  The row index	 *	 * @return  integer  Rationalised offset for a row with a given index.	 *	 * @since   11.1	 */	public function getRowOffset($index)	{		return $index + 1 + $this->limitstart;	}	/**	 * Return the pagination data object, only creating it if it doesn't already exist.	 *	 * @return  object   Pagination data object.	 *	 * @since   11.1	 */	public function getData()	{		static $data;		if (!is_object($data))		{			$data = $this->_buildDataObject();		}		return $data;	}	/**	 * Create and return the pagination pages counter string, ie. Page 2 of 4.	 *	 * @return  string   Pagination pages counter string.	 *	 * @since   11.1	 */	public function getPagesCounter()	{		$html = null;		if ($this->pagesTotal > 1)		{			$html .= JText::sprintf('JLIB_HTML_PAGE_CURRENT_OF_TOTAL', $this->pagesCurrent, $this->pagesTotal);		}		return $html;	}	/**	 * Create and return the pagination result set counter string, e.g. Results 1-10 of 42	 *	 * @return  string   Pagination result set counter string.	 *	 * @since   11.1	 */	public function getResultsCounter()	{		$html = null;		$fromResult = $this->limitstart + 1;		// If the limit is reached before the end of the list.		if ($this->limitstart + $this->limit < $this->total)		{			$toResult = $this->limitstart + $this->limit;		}		else		{			$toResult = $this->total;		}		// If there are results found.		if ($this->total > 0)		{			$msg = JText::sprintf('JLIB_HTML_RESULTS_OF', $fromResult, $toResult, $this->total);			$html .= "\n" . $msg;		}		else		{			$html .= "\n" . JText::_('JLIB_HTML_NO_RECORDS_FOUND');		}		return $html;	}	/**	 * Create and return the pagination page list string, ie. Previous, Next, 1 2 3 ... x.	 *	 * @return  string  Pagination page list string.	 *	 * @since   11.1	 */	public function getPagesLinks()	{		$app = JFactory::getApplication();		// Build the page navigation list.		$data = $this->_buildDataObject();		$list = array();		$list['prefix'] = $this->prefix;		$itemOverride = false;		$listOverride = false;		$chromePath = JPATH_THEMES . '/' . $app->getTemplate() . '/html/pagination.php';		if (file_exists($chromePath))		{			include_once $chromePath;			if (function_exists('pagination_item_active') && function_exists('pagination_item_inactive'))			{				$itemOverride = true;			}			if (function_exists('pagination_list_render'))			{				$listOverride = true;			}		}		// Build the select list		if ($data->all->base !== null)		{			$list['all']['active'] = true;			$list['all']['data'] = ($itemOverride) ? pagination_item_active($data->all) : $this->_item_active($data->all);		}		else		{			$list['all']['active'] = false;			$list['all']['data'] = ($itemOverride) ? pagination_item_inactive($data->all) : $this->_item_inactive($data->all);		}		if ($data->start->base !== null)		{			$list['start']['active'] = true;			$list['start']['data'] = ($itemOverride) ? pagination_item_active($data->start) : $this->_item_active($data->start);		}		else		{			$list['start']['active'] = false;			$list['start']['data'] = ($itemOverride) ? pagination_item_inactive($data->start) : $this->_item_inactive($data->start);		}		if ($data->previous->base !== null)		{			$list['previous']['active'] = true;			$list['previous']['data'] = ($itemOverride) ? pagination_item_active($data->previous) : $this->_item_active($data->previous);		}		else		{			$list['previous']['active'] = false;			$list['previous']['data'] = ($itemOverride) ? pagination_item_inactive($data->previous) : $this->_item_inactive($data->previous);		}		// Make sure it exists		$list['pages'] = array();		foreach ($data->pages as $i => $page)		{			if ($page->base !== null)			{				$list['pages'][$i]['active'] = true;				$list['pages'][$i]['data'] = ($itemOverride) ? pagination_item_active($page) : $this->_item_active($page);			}			else			{				$list['pages'][$i]['active'] = false;				$list['pages'][$i]['data'] = ($itemOverride) ? pagination_item_inactive($page) : $this->_item_inactive($page);			}		}		if ($data->next->base !== null)		{			$list['next']['active'] = true;			$list['next']['data'] = ($itemOverride) ? pagination_item_active($data->next) : $this->_item_active($data->next);		}		else		{			$list['next']['active'] = false;			$list['next']['data'] = ($itemOverride) ? pagination_item_inactive($data->next) : $this->_item_inactive($data->next);		}		if ($data->end->base !== null)		{			$list['end']['active'] = true;			$list['end']['data'] = ($itemOverride) ? pagination_item_active($data->end) : $this->_item_active($data->end);		}		else		{			$list['end']['active'] = false;			$list['end']['data'] = ($itemOverride) ? pagination_item_inactive($data->end) : $this->_item_inactive($data->end);		}		if ($this->total > $this->limit)		{			return ($listOverride) ? pagination_list_render($list) : $this->_list_render($list);		}		else		{			return '';		}	}	/**	 * Return the pagination footer.	 *	 * @return  string   Pagination footer.	 *	 * @since   11.1	 */	public function getListFooter()	{		$app = JFactory::getApplication();		$list = array();		$list['prefix'] = $this->prefix;		$list['limit'] = $this->limit;		$list['limitstart'] = $this->limitstart;		$list['total'] = $this->total;		$list['limitfield'] = $this->getLimitBox();		$list['pagescounter'] = $this->getPagesCounter();		$list['pageslinks'] = $this->getPagesLinks();		$chromePath = JPATH_THEMES . '/' . $app->getTemplate() . '/html/pagination.php';		if (file_exists($chromePath))		{			include_once $chromePath;			if (function_exists('pagination_list_footer'))			{				return pagination_list_footer($list);			}		}		return $this->_list_footer($list);	}	/**	 * Creates a dropdown box for selecting how many records to show per page.	 *	 * @return  string  The HTML for the limit # input box.	 *	 * @since   11.1	 */	public function getLimitBox()	{		$app = JFactory::getApplication();		$limits = array();		// Make the option list.		for ($i = 5; $i <= 30; $i += 5)		{			$limits[] = JHtml::_('select.option', "$i");		}		$limits[] = JHtml::_('select.option', '50', JText::_('J50'));		$limits[] = JHtml::_('select.option', '100', JText::_('J100'));		$limits[] = JHtml::_('select.option', '0', JText::_('JALL'));		$selected = $this->viewall ? 0 : $this->limit;		// Build the select list.		if ($app->isAdmin())		{			$html = JHtml::_(				'select.genericlist',				$limits,				$this->prefix . 'limit',				'class="inputbox input-mini" size="1" onchange="Joomla.submitform();"',				'value',				'text',				$selected			);		}		else		{			$html = JHtml::_(				'select.genericlist',				$limits,				$this->prefix . 'limit',				'class="inputbox input-mini" size="1" onchange="this.form.submit()"',				'value',				'text',				$selected			);		}		return $html;	}	/**	 * Return the icon to move an item UP.	 *	 * @param   integer  $i          The row index.	 * @param   boolean  $condition  True to show the icon.	 * @param   string   $task       The task to fire.	 * @param   string   $alt        The image alternative text string.	 * @param   boolean  $enabled    An optional setting for access control on the action.	 * @param   string   $checkbox   An optional prefix for checkboxes.	 *	 * @return  string   Either the icon to move an item up or a space.	 *	 * @since   11.1	 */	public function orderUpIcon($i, $condition = true, $task = 'orderup', $alt = 'JLIB_HTML_MOVE_UP', $enabled = true, $checkbox = 'cb')	{		if (($i > 0 || ($i + $this->limitstart > 0)) && $condition)		{			return JHtml::_('jgrid.orderUp', $i, $task, '', $alt, $enabled, $checkbox);		}		else		{			return '&#160;';		}	}	/**	 * Return the icon to move an item DOWN.	 *	 * @param   integer  $i          The row index.	 * @param   integer  $n          The number of items in the list.	 * @param   boolean  $condition  True to show the icon.	 * @param   string   $task       The task to fire.	 * @param   string   $alt        The image alternative text string.	 * @param   boolean  $enabled    An optional setting for access control on the action.	 * @param   string   $checkbox   An optional prefix for checkboxes.	 *	 * @return  string   Either the icon to move an item down or a space.	 *	 * @since   11.1	 */	public function orderDownIcon($i, $n, $condition = true, $task = 'orderdown', $alt = 'JLIB_HTML_MOVE_DOWN', $enabled = true, $checkbox = 'cb')	{		if (($i < $n - 1 || $i + $this->limitstart < $this->total - 1) && $condition)		{			return JHtml::_('jgrid.orderDown', $i, $task, '', $alt, $enabled, $checkbox);		}		else		{			return '&#160;';		}	}	/**	 * Create the HTML for a list footer	 *	 * @param   array  $list  Pagination list data structure.	 *	 * @return  string  HTML for a list footer	 *	 * @since   11.1	 */	protected function _list_footer($list)	{		$html = "<div class=\"list-footer\">\n";		$html .= "\n<div class=\"limit\">" . JText::_('JGLOBAL_DISPLAY_NUM') . $list['limitfield'] . "</div>";		$html .= $list['pageslinks'];		$html .= "\n<div class=\"counter\">" . $list['pagescounter'] . "</div>";		$html .= "\n<input type=\"hidden\" name=\"" . $list['prefix'] . "limitstart\" value=\"" . $list['limitstart'] . "\" />";		$html .= "\n</div>";		return $html;	}	/**	 * Create the html for a list footer	 *	 * @param   array  $list  Pagination list data structure.	 *	 * @return  string  HTML for a list start, previous, next,end	 *	 * @since   11.1	 */	protected function _list_render($list)	{		// Reverse output rendering for right-to-left display.		$html = '<ul>';		$html .= '<li class="pagination-start">' . $list['start']['data'] . '</li>';		$html .= '<li class="pagination-prev">' . $list['previous']['data'] . '</li>';		foreach ($list['pages'] as $page)		{			$html .= '<li>' . $page['data'] . '</li>';		}		$html .= '<li class="pagination-next">' . $list['next']['data'] . '</li>';		$html .= '<li class="pagination-end">' . $list['end']['data'] . '</li>';		$html .= '</ul>';		return $html;	}	/**	 * Method to create an active pagination link to the item	 *	 * @param   JPaginationObject  $item  The object with which to make an active link.	 *	 * @return   string  HTML link	 *	 * @since    11.1	 */	protected function _item_active(JPaginationObject $item)	{		$app = JFactory::getApplication();		if ($app->isAdmin())		{			if ($item->base > 0)			{				return "<a title=\"" . $item->text . "\" onclick=\"document.adminForm." . $this->prefix . "limitstart.value=" . $item->base					. "; Joomla.submitform();return false;\">" . $item->text . "</a>";			}			else			{				return "<a title=\"" . $item->text . "\" onclick=\"document.adminForm." . $this->prefix					. "limitstart.value=0; Joomla.submitform();return false;\">" . $item->text . "</a>";			}		}		else		{			return "<a title=\"" . $item->text . "\" href=\"" . $item->link . "\" class=\"pagenav\">" . $item->text . "</a>";		}	}	/**	 * Method to create an inactive pagination string	 *	 * @param   JPaginationObject  $item  The item to be processed	 *	 * @return  string	 *	 * @since   11.1	 */	protected function _item_inactive(JPaginationObject $item)	{		$app = JFactory::getApplication();		if ($app->isAdmin())		{			return "<span>" . $item->text . "</span>";		}		else		{			return "<span class=\"pagenav\">" . $item->text . "</span>";		}	}	/**	 * Create and return the pagination data object.	 *	 * @return  object  Pagination data object.	 *	 * @since   11.1	 */	protected function _buildDataObject()	{		$data = new stdClass;		// Build the additional URL parameters string.		$params = '';		if (!empty($this->additionalUrlParams))		{			foreach ($this->additionalUrlParams as $key => $value)			{				$params .= '&' . $key . '=' . $value;			}		}		$data->all = new JPaginationObject(JText::_('JLIB_HTML_VIEW_ALL'), $this->prefix);		if (!$this->viewall)		{			$data->all->base = '0';			$data->all->link = JRoute::_($params . '&' . $this->prefix . 'limitstart=');		}		// Set the start and previous data objects.		$data->start = new JPaginationObject(JText::_('JLIB_HTML_START'), $this->prefix);		$data->previous = new JPaginationObject(JText::_('JPREV'), $this->prefix);		if ($this->pagesCurrent > 1)		{			$page = ($this->pagesCurrent - 2) * $this->limit;			// Set the empty for removal from route			// @todo remove code: $page = $page == 0 ? '' : $page;			$data->start->base = '0';			$data->start->link = JRoute::_($params . '&' . $this->prefix . 'limitstart=0');			$data->previous->base = $page;			$data->previous->link = JRoute::_($params . '&' . $this->prefix . 'limitstart=' . $page);		}		// Set the next and end data objects.		$data->next = new JPaginationObject(JText::_('JNEXT'), $this->prefix);		$data->end = new JPaginationObject(JText::_('JLIB_HTML_END'), $this->prefix);		if ($this->pagesCurrent < $this->pagesTotal)		{			$next = $this->pagesCurrent * $this->limit;			$end = ($this->pagesTotal - 1) * $this->limit;			$data->next->base = $next;			$data->next->link = JRoute::_($params . '&' . $this->prefix . 'limitstart=' . $next);			$data->end->base = $end;			$data->end->link = JRoute::_($params . '&' . $this->prefix . 'limitstart=' . $end);		}		$data->pages = array();		$stop = $this->pagesStop;		for ($i = $this->pagesStart; $i <= $stop; $i++)		{			$offset = ($i - 1) * $this->limit;			// Set the empty for removal from route			// @todo remove code: $offset = $offset == 0 ? '' : $offset;			$data->pages[$i] = new JPaginationObject($i, $this->prefix);			if ($i != $this->pagesCurrent || $this->viewall)			{				$data->pages[$i]->base = $offset;				$data->pages[$i]->link = JRoute::_($params . '&' . $this->prefix . 'limitstart=' . $offset);			}			elseif ($i = $this->pagesCurrent)			{				$data->pages[$i]->active = true;			}		}		return $data;	}	/**	 * Modifies a property of the object, creating it if it does not already exist.	 *	 * @param   string  $property  The name of the property.	 * @param   mixed   $value     The value of the property to set.	 *	 * @return  void	 *	 * @since   12.2	 * @deprecated  13.3  Access the properties directly.	 */	public function set($property, $value = null)	{		JLog::add('JPagination::set() is deprecated. Access the properties directly.', JLog::WARNING, 'deprecated');		if (strpos($property, '.'))		{			$prop = explode('.', $property);			$prop[1] = ucfirst($prop[1]);			$property = implode($prop);		}		$this->$property = $value;	}	/**	 * Returns a property of the object or the default value if the property is not set.	 *	 * @param   string  $property  The name of the property.	 * @param   mixed   $default   The default value.	 *	 * @return  mixed    The value of the property.	 *	 * @since   12.2	 * @deprecated  13.3  Access the properties directly.	 */	public function get($property, $default = null)	{		JLog::add('JPagination::get() is deprecated. Access the properties directly.', JLog::WARNING, 'deprecated');		if (strpos($property, '.'))		{			$prop = explode('.', $property);			$prop[1] = ucfirst($prop[1]);			$property = implode($prop);		}		if (isset($this->$property))		{			return $this->$property;		}		return $default;	}}
<?php/** * @package     Joomla.Site * @subpackage  com_banners * * @copyright   Copyright (C) 2005 - 2013 Open Source Matters, Inc. All rights reserved. * @license     GNU General Public License version 2 or later; see LICENSE.txt */defined('_JEXEC') or die;/** * @package     Joomla.Site * @subpackage  com_banners */abstract class BannerHelper{	/**	 * Checks if a URL is an image	 *	 * @param string	 * @return URL	 */	public static function isImage($url)	{		$result = preg_match('#\.(?:bmp|gif|jpe?g|png)$#i', $url);		return $result;	}	/**	 * Checks if a URL is a Flash file	 *	 * @param string	 * @return URL	 */	public static function isFlash($url)	{		$result = preg_match('#\.swf$#i', $url);		return $result;	}}
<?php/** * @package     Joomla.Platform * @subpackage  Event * * @copyright   Copyright (C) 2005 - 2013 Open Source Matters, Inc. All rights reserved. * @license     GNU General Public License version 2 or later; see LICENSE */defined('JPATH_PLATFORM') or die;/** * Class to handle dispatching of events. * * This is the Observable part of the Observer design pattern * for the event architecture. * * @package     Joomla.Platform * @subpackage  Event * @link        http://docs.joomla.org/Tutorial:Plugins Plugin tutorials * @see         JPlugin * @since       12.1 */class JEventDispatcher extends JObject{	/**	 * An array of Observer objects to notify	 *	 * @var    array	 * @since  11.3	 */	protected $_observers = array();	/**	 * The state of the observable object	 *	 * @var    mixed	 * @since  11.3	 */	protected $_state = null;	/**	 * A multi dimensional array of [function][] = key for observers	 *	 * @var    array	 * @since  11.3	 */	protected $_methods = array();	/**	 * Stores the singleton instance of the dispatcher.	 *	 * @var    JEventDispatcher	 * @since  11.3	 */	protected static $instance = null;	/**	 * Returns the global Event Dispatcher object, only creating it	 * if it doesn't already exist.	 *	 * @return  JEventDispatcher  The EventDispatcher object.	 *	 * @since   11.1	 */	public static function getInstance()	{		if (self::$instance === null)		{			self::$instance = new static;		}		return self::$instance;	}	/**	 * Get the state of the JEventDispatcher object	 *	 * @return  mixed    The state of the object.	 *	 * @since   11.3	 */	public function getState()	{		return $this->_state;	}	/**	 * Registers an event handler to the event dispatcher	 *	 * @param   string  $event    Name of the event to register handler for	 * @param   string  $handler  Name of the event handler	 *	 * @return  void	 *	 * @since   11.1	 * @throws InvalidArgumentException	 */	public function register($event, $handler)	{		// Are we dealing with a class or callback type handler?		if (is_callable($handler))		{			// Ok, function type event handler... let's attach it.			$method = array('event' => $event, 'handler' => $handler);			$this->attach($method);		}		elseif (class_exists($handler))		{			// Ok, class type event handler... let's instantiate and attach it.			$this->attach(new $handler($this));		}		else		{			throw new InvalidArgumentException('Invalid event handler.');		}	}	/**	 * Triggers an event by dispatching arguments to all observers that handle	 * the event and returning their return values.	 *	 * @param   string  $event  The event to trigger.	 * @param   array   $args   An array of arguments.	 *	 * @return  array  An array of results from each function call.	 *	 * @since   11.1	 */	public function trigger($event, $args = array())	{		$result = array();		/*		 * If no arguments were passed, we still need to pass an empty array to		 * the call_user_func_array function.		 */		$args = (array) $args;		$event = strtolower($event);		// Check if any plugins are attached to the event.		if (!isset($this->_methods[$event]) || empty($this->_methods[$event]))		{			// No Plugins Associated To Event!			return $result;		}		// Loop through all plugins having a method matching our event		foreach ($this->_methods[$event] as $key)		{			// Check if the plugin is present.			if (!isset($this->_observers[$key]))			{				continue;			}			// Fire the event for an object based observer.			if (is_object($this->_observers[$key]))			{				$args['event'] = $event;				$value = $this->_observers[$key]->update($args);			}			// Fire the event for a function based observer.			elseif (is_array($this->_observers[$key]))			{				$value = call_user_func_array($this->_observers[$key]['handler'], $args);			}			if (isset($value))			{				$result[] = $value;			}		}		return $result;	}	/**	 * Attach an observer object	 *	 * @param   object  $observer  An observer object to attach	 *	 * @return  void	 *	 * @since   11.3	 */	public function attach($observer)	{		if (is_array($observer))		{			if (!isset($observer['handler']) || !isset($observer['event']) || !is_callable($observer['handler']))			{				return;			}			// Make sure we haven't already attached this array as an observer			foreach ($this->_observers as $check)			{				if (is_array($check) && $check['event'] == $observer['event'] && $check['handler'] == $observer['handler'])				{					return;				}			}			$this->_observers[] = $observer;			end($this->_observers);			$methods = array($observer['event']);		}		else		{			if (!($observer instanceof JEvent))			{				return;			}			// Make sure we haven't already attached this object as an observer			$class = get_class($observer);			foreach ($this->_observers as $check)			{				if ($check instanceof $class)				{					return;				}			}			$this->_observers[] = $observer;			$methods = array_diff(get_class_methods($observer), get_class_methods('JPlugin'));		}		$key = key($this->_observers);		foreach ($methods as $method)		{			$method = strtolower($method);			if (!isset($this->_methods[$method]))			{				$this->_methods[$method] = array();			}			$this->_methods[$method][] = $key;		}	}	/**	 * Detach an observer object	 *	 * @param   object  $observer  An observer object to detach.	 *	 * @return  boolean  True if the observer object was detached.	 *	 * @since   11.3	 */	public function detach($observer)	{		$retval = false;		$key = array_search($observer, $this->_observers);		if ($key !== false)		{			unset($this->_observers[$key]);			$retval = true;			foreach ($this->_methods as &$method)			{				$k = array_search($key, $method);				if ($k !== false)				{					unset($method[$k]);				}			}		}		return $retval;	}}
<?php/** * @package     Joomla.Administrator * @subpackage  com_login * * @copyright   Copyright (C) 2005 - 2013 Open Source Matters, Inc. All rights reserved. * @license     GNU General Public License version 2 or later; see LICENSE.txt */defined('_JEXEC') or die;$input = JFactory::getApplication()->input;$task = $input->get('task');if ($task != 'login' && $task != 'logout'){	$input->set('task', '');	$task = '';}$controller = JControllerLegacy::getInstance('Login');$controller->execute($task);$controller->redirect();
<?php/** * @package     Joomla.Site * @subpackage  com_weblinks * * @copyright   Copyright (C) 2005 - 2013 Open Source Matters, Inc. All rights reserved. * @license     GNU General Public License version 2 or later; see LICENSE.txt */defined('_JEXEC') or die;$class = ' class="first"';if (count($this->children[$this->category->id]) > 0 && $this->maxLevel != 0) :?><ul><?php foreach ($this->children[$this->category->id] as $id => $child) : ?>	<?php	if ($this->params->get('show_empty_categories') || $child->numitems || count($child->getChildren())) :	if (!isset($this->children[$this->category->id][$id + 1]))	{		$class = ' class="last"';	}	?>	<li<?php echo $class; ?>>		<?php $class = ''; ?>			<span class="item-title"><a href="<?php echo JRoute::_(WeblinksHelperRoute::getCategoryRoute($child->id));?>">				<?php echo $this->escape($child->title); ?></a>			</span>			<?php if ($this->params->get('show_subcat_desc') == 1) :?>			<?php if ($child->description) : ?>				<div class="category-desc">					<?php echo JHtml::_('content.prepare', $child->description, '', 'com_weblinks.category'); ?>				</div>			<?php endif; ?>            <?php endif; ?>            <?php if ($this->params->get('show_cat_num_links') == 1) :?>			<dl class="weblink-count"><dt>				<?php echo JText::_('COM_WEBLINKS_NUM'); ?></dt>				<dd><?php echo $child->numitems; ?></dd>			</dl>		<?php endif; ?>			<?php if (count($child->getChildren()) > 0 ) :				$this->children[$child->id] = $child->getChildren();				$this->category = $child;				$this->maxLevel--;				echo $this->loadTemplate('children');				$this->category = $child->getParent();				$this->maxLevel++;			endif; ?>		</li>	<?php endif; ?>	<?php endforeach; ?>	</ul><?php endif;
<?php/** * Squiz_Sniffs_WhiteSpace_CastSpacingSniff. * * PHP version 5 * * @category  PHP * @package   PHP_CodeSniffer * @author    Greg Sherwood <gsherwood@squiz.net> * @author    Marc McIntyre <mmcintyre@squiz.net> * @copyright 2006 Squiz Pty Ltd (ABN 77 084 670 600) * @license   http://matrix.squiz.net/developer/tools/php_cs/licence BSD Licence * @version   CVS: $Id: CastSpacingSniff.php 301632 2010-07-28 01:57:56Z squiz $ * @link      http://pear.php.net/package/PHP_CodeSniffer *//** * Squiz_Sniffs_WhiteSpace_CastSpacingSniff. * * Ensure cast statements dont contain whitespace. * * @category  PHP * @package   PHP_CodeSniffer * @author    Greg Sherwood <gsherwood@squiz.net> * @author    Marc McIntyre <mmcintyre@squiz.net> * @copyright 2006 Squiz Pty Ltd (ABN 77 084 670 600) * @license   http://matrix.squiz.net/developer/tools/php_cs/licence BSD Licence * @version   Release: 1.3.0 * @link      http://pear.php.net/package/PHP_CodeSniffer */class Joomla_Sniffs_WhiteSpace_CastSpacingSniff implements PHP_CodeSniffer_Sniff{    /**     * Returns an array of tokens this test wants to listen for.     *     * @return array     */    public function register()    {        return PHP_CodeSniffer_Tokens::$castTokens;    }//end register()    /**     * Processes this test, when one of its tokens is encountered.     *     * @param PHP_CodeSniffer_File $phpcsFile The file being scanned.     * @param int                  $stackPtr  The position of the current token in the     *                                        stack passed in $tokens.     *     * @return void     */    public function process(PHP_CodeSniffer_File $phpcsFile, $stackPtr)    {        $tokens = $phpcsFile->getTokens();        $content  = $tokens[$stackPtr]['content'];        $expected = str_replace(' ', '', $content);        $expected = str_replace("\t", '', $expected);        if ($content !== $expected) {            $error = 'Cast statements must not contain whitespace; expected "%s" but found "%s"';            $data  = array(                      $expected,                      $content,                     );            $phpcsFile->addError($error, $stackPtr, 'ContainsWhiteSpace', $data);        }    }//end process()}//end class?>
<?php/** * @package     Joomla.Platform * @subpackage  Log * * @copyright   Copyright (C) 2005 - 2013 Open Source Matters, Inc. All rights reserved. * @license     GNU General Public License version 2 or later; see LICENSE */defined('JPATH_PLATFORM') or die;/** * Joomla! Callback Log class * * This class allows logging to be handled by a callback function. * This allows unprecedented flexibility in the way logging can be handled. * * @package     Joomla.Platform * @subpackage  Log * @since       12.2 */class JLogLoggerCallback extends JLogLogger{	/**	 * @var    callable  The function to call when an entry is added - should return True on success	 * @since  12.2	 */	protected $callback;	/**	 * Constructor.	 *	 * @param   array  &$options  Log object options.	 *	 * @since   12.2	 */	public function __construct(array &$options)	{		// Call the parent constructor.		parent::__construct($options);		// Throw an exception if there is not a valid callback		if (isset($this->options['callback']) && is_callable($this->options['callback']))		{			$this->callback = $this->options['callback'];		}		else		{			throw new JLogException(JText::_('JLogLoggerCallback created without valid callback function.'));		}	}	/**	 * Method to add an entry to the log.	 *	 * @param   JLogEntry  $entry  The log entry object to add to the log.	 *	 * @return  boolean  True on success.	 *	 * @since   12.2	 * @throws  LogException	 */	public function addEntry(JLogEntry $entry)	{		// Pass the log entry to the callback function		call_user_func($this->callback, $entry);	}}
<?php/** * @package     Joomla.Administrator * @subpackage  com_languages * * @copyright   Copyright (C) 2005 - 2013 Open Source Matters, Inc. All rights reserved. * @license     GNU General Public License version 2 or later; see LICENSE.txt */defined('_JEXEC') or die;/** * HTML View class for the Languages component * * @package     Joomla.Administrator * @subpackage  com_languages * @since       1.5 */class LanguagesViewLanguage extends JViewLegacy{	public $item;	public $form;	public $state;	/**	 * Display the view	 */	public function display($tpl = null)	{		$this->item = $this->get('Item');		$this->form = $this->get('Form');		$this->state = $this->get('State');		// Check for errors.		if (count($errors = $this->get('Errors')))		{			JError::raiseError(500, implode("\n", $errors));			return false;		}		$this->addToolbar();		parent::display($tpl);	}	/**	 * Add the page title and toolbar.	 *	 * @since  1.6	 */	protected function addToolbar()	{		require_once JPATH_COMPONENT . '/helpers/languages.php';		JFactory::getApplication()->input->set('hidemainmenu', 1);		$isNew = empty($this->item->lang_id);		$canDo = LanguagesHelper::getActions();		JToolbarHelper::title(JText::_($isNew ? 'COM_LANGUAGES_VIEW_LANGUAGE_EDIT_NEW_TITLE' : 'COM_LANGUAGES_VIEW_LANGUAGE_EDIT_EDIT_TITLE'), 'langmanager.png');		// If a new item, can save.		if ($isNew && $canDo->get('core.create'))		{			JToolbarHelper::save('language.save');		}		//If an existing item, allow to Apply and Save.		if (!$isNew && $canDo->get('core.edit'))		{			JToolbarHelper::apply('language.apply');			JToolbarHelper::save('language.save');		}		// If an existing item, can save to a copy only if we have create rights.		if ($canDo->get('core.create'))		{			JToolbarHelper::save2new('language.save2new');		}		if ($isNew)		{			JToolbarHelper::cancel('language.cancel');		}		else		{			JToolbarHelper::cancel('language.cancel', 'JTOOLBAR_CLOSE');		}		JToolbarHelper::divider();		JToolbarHelper::help('JHELP_EXTENSIONS_LANGUAGE_MANAGER_EDIT');		$this->sidebar = JHtmlSidebar::render();	}}
<?php/** * @package     Joomla.Platform * @subpackage  Keychain * * @copyright   Copyright (C) 2005 - 2013 Open Source Matters, Inc. All rights reserved * @license     GNU General Public License version 2 or later; see LICENSE */defined('JPATH_PLATFORM') or die;/** * Keychain Class * * @package     Joomla.Platform * @subpackage  Keychain * @since       12.3 */class JKeychain extends JRegistry{	/**	 * @var    string  Method to use for encryption.	 * @since  12.3	 */	public $method = 'aes-128-cbc';	/**	 * @var    string  Initialisation vector for encryption method.	 * @since  12.3	 */	public $iv = "1234567890123456";	/**	 * Create a passphrase file	 *	 * @param   string  $passphrase            The passphrase to store in the passphrase file.	 * @param   string  $passphraseFile        Path to the passphrase file to create.	 * @param   string  $privateKeyFile        Path to the private key file to encrypt the passphrase file.	 * @param   string  $privateKeyPassphrase  The passphrase for the private key.	 *	 * @return  boolean  Result of writing the passphrase file to disk.	 *	 * @since   12.3	 * @throws  RuntimeException	 */	public function createPassphraseFile($passphrase, $passphraseFile, $privateKeyFile, $privateKeyPassphrase)	{		$privateKey = openssl_get_privatekey(file_get_contents($privateKeyFile), $privateKeyPassphrase);		if (!$privateKey)		{			throw new RuntimeException("Failed to load private key.");		}		$crypted = '';		if (!openssl_private_encrypt($passphrase, $crypted, $privateKey))		{			throw new RuntimeException("Failed to encrypt data using private key.");		}		return file_put_contents($passphraseFile, $crypted);	}	/**	 * Delete a registry value (very simple method)	 *	 * @param   string  $path  Registry Path (e.g. joomla.content.showauthor)	 *	 * @return  mixed  Value of old value or boolean false if operation failed	 *	 * @since   12.3	 */	public function deleteValue($path)	{		$result = null;		// Explode the registry path into an array		$nodes = explode('.', $path);		if ($nodes)		{			// Initialize the current node to be the registry root.			$node = $this->data;			// Traverse the registry to find the correct node for the result.			for ($i = 0, $n = count($nodes) - 1; $i < $n; $i++)			{			if (!isset($node->$nodes[$i]) && ($i != $n))			{			$node->$nodes[$i] = new stdClass;			}			$node = $node->$nodes[$i];			}			// Get the old value if exists so we can return it			$result = $node->$nodes[$i];			unset($node->$nodes[$i]);		}		return $result;	}	/**	 * Load a keychain file into this object.	 *	 * @param   string  $keychainFile    Path to the keychain file.	 * @param   string  $passphraseFile  The path to the passphrase file to decript the keychain.	 * @param   string  $publicKeyFile   The file containing the public key to decrypt the passphrase file.	 *	 * @return  boolean  Result of loading the object.	 *	 * @since   12.3	 * @throws  RuntimeException	 */	public function loadKeychain($keychainFile, $passphraseFile, $publicKeyFile)	{		if (!file_exists($keychainFile))		{			throw new RuntimeException('Attempting to load non-existent keychain file');		}		$passphrase = $this->getPassphraseFromFile($passphraseFile, $publicKeyFile);		$cleartext = openssl_decrypt(file_get_contents($keychainFile), $this->method, $passphrase, true, $this->iv);		if ($cleartext === false)		{			throw new RuntimeException("Failed to decrypt keychain file");		}		return $this->loadObject(json_decode($cleartext));	}	/**	 * Save this keychain to a file.	 *	 * @param   string  $keychainFile    The path to the keychain file.	 * @param   string  $passphraseFile  The path to the passphrase file to encrypt the keychain.	 * @param   string  $publicKeyFile   The file containing the public key to decrypt the passphrase file.	 *	 * @return  boolean  Result of storing the file.	 *	 * @since   12.3	 * @throws  RuntimeException	 */	public function saveKeychain($keychainFile, $passphraseFile, $publicKeyFile)	{		$passphrase = $this->getPassphraseFromFile($passphraseFile, $publicKeyFile);		$data = $this->toString('JSON');		$encrypted = @openssl_encrypt($data, $this->method, $passphrase, true, $this->iv);		if ($encrypted === false)		{			throw new RuntimeException('Unable to encrypt keychain');		}		return file_put_contents($keychainFile, $encrypted);	}	/**	 * Get the passphrase for this keychain	 *	 * @param   string  $passphraseFile  The file containing the passphrase to encrypt and decrypt.	 * @param   string  $publicKeyFile   The file containing the public key to decrypt the passphrase file.	 *	 * @return  string  The passphrase in from passphraseFile	 *	 * @since   12.3	 * @throws  RuntimeException	 */	protected function getPassphraseFromFile($passphraseFile, $publicKeyFile)	{		if (!file_exists($publicKeyFile))		{			throw new RuntimeException('Missing public key file');		}		$publicKey = openssl_get_publickey(file_get_contents($publicKeyFile));		if (!$publicKey)		{			throw new RuntimeException("Failed to load public key.");		}		if (!file_exists($passphraseFile))		{			throw new RuntimeException('Missing passphrase file');		}		$passphrase = '';		if (!openssl_public_decrypt(file_get_contents($passphraseFile), $passphrase, $publicKey))		{			throw new RuntimeException('Failed to decrypt passphrase file');		}		return $passphrase;	}}
<?php/*** @version $Id$* @package utf8* @subpackage strings*///---------------------------------------------------------------/*** UTF-8 aware alternative to str_ireplace* Case-insensitive version of str_replace* Note: requires utf8_strtolower* Note: it's not fast and gets slower if $search / $replace is array* Notes: it's based on the assumption that the lower and uppercase* versions of a UTF-8 character will have the same length in bytes* which is currently true given the hash table to strtolower* @param string* @return string* @see http://www.php.net/str_ireplace* @see utf8_strtolower* @package utf8* @subpackage strings*/function utf8_ireplace($search, $replace, $str, $count = NULL){    if ( !is_array($search) ) {        $slen = strlen($search);        if ( $slen == 0 ) {            return $str;        }        $lendif = strlen($replace) - strlen($search);        $search = utf8_strtolower($search);        $search = preg_quote($search, '/');        $lstr = utf8_strtolower($str);        $i = 0;        $matched = 0;        while ( preg_match('/(.*)'.$search.'/Us',$lstr, $matches) ) {            if ( $i === $count ) {                break;            }            $mlen = strlen($matches[0]);            $lstr = substr($lstr, $mlen);            $str = substr_replace($str, $replace, $matched+strlen($matches[1]), $slen);            $matched += $mlen + $lendif;            $i++;        }        return $str;    } else {        foreach ( array_keys($search) as $k ) {            if ( is_array($replace) ) {                if ( array_key_exists($k,$replace) ) {                    $str = utf8_ireplace($search[$k], $replace[$k], $str, $count);                } else {                    $str = utf8_ireplace($search[$k], '', $str, $count);                }            } else {                $str = utf8_ireplace($search[$k], $replace, $str, $count);            }        }        return $str;    }}
<?php/** * @package     Joomla.Platform * @subpackage  Table * * @copyright   Copyright (C) 2005 - 2013 Open Source Matters, Inc. All rights reserved. * @license     GNU General Public License version 2 or later; see LICENSE */defined('JPATH_PLATFORM') or die;/** * Languages table. * * @package     Joomla.Platform * @subpackage  Table * @since       11.1 */class JTableLanguage extends JTable{	/**	 * Constructor	 *	 * @param   JDatabaseDriver  $db  Database driver object.	 *	 * @since   11.1	 */	public function __construct($db)	{		parent::__construct('#__languages', 'lang_id', $db);	}	/**	 * Overloaded check method to ensure data integrity	 *	 * @return  boolean  True on success	 *	 * @since   11.1	 */	public function check()	{		if (trim($this->title) == '')		{			$this->setError(JText::_('JLIB_DATABASE_ERROR_LANGUAGE_NO_TITLE'));			return false;		}		return true;	}	/**	 * Overrides JTable::store to check unique fields.	 *	 * @param   boolean  $updateNulls  True to update fields even if they are null.	 *	 * @return  boolean  True on success.	 *	 * @since   11.4	 */	public function store($updateNulls = false)	{		// Verify that the sef field is unique		$table = JTable::getInstance('Language', 'JTable');		if ($table->load(array('sef' => $this->sef)) && ($table->lang_id != $this->lang_id || $this->lang_id == 0))		{			$this->setError(JText::_('JLIB_DATABASE_ERROR_LANGUAGE_UNIQUE_SEF'));			return false;		}		// Verify that the image field is unique		if ($table->load(array('image' => $this->image)) && ($table->lang_id != $this->lang_id || $this->lang_id == 0))		{			$this->setError(JText::_('JLIB_DATABASE_ERROR_LANGUAGE_UNIQUE_IMAGE'));			return false;		}		// Verify that the language code is unique		if ($table->load(array('lang_code' => $this->lang_code)) && ($table->lang_id != $this->lang_id || $this->lang_id == 0))		{			$this->setError(JText::_('JLIB_DATABASE_ERROR_LANGUAGE_UNIQUE_LANG_CODE'));			return false;		}		return parent::store($updateNulls);	}}
<?php/** * @package     Joomla.Platform * @subpackage  HTML * * @copyright   Copyright (C) 2005 - 2013 Open Source Matters, Inc. All rights reserved. * @license     GNU General Public License version 2 or later; see LICENSE */defined('JPATH_PLATFORM') or die;/** * HTML helper class for rendering telephone numbers. * * @package     Joomla.Platform * @subpackage  HTML * @since       11.1 */abstract class JHtmlTel{	/**	 * Converts strings of integers into more readable telephone format	 *	 * By default, the ITU-T format will automatically be used.	 * However, one of the allowed unit types may also be used instead.	 *	 * @param   integer  $number       The integers in a phone number with dot separated country code	 *                                 ccc.nnnnnnn where ccc represents country code and nnn represents the local number.	 * @param   string   $displayplan  The numbering plan used to display the numbers.	 *	 * @return  string  The formatted telephone number.	 *	 * @since   11.1	 *	 * @see     JFormRuleTel	 */	public static function tel($number, $displayplan)	{		$number = explode('.', $number);		$countrycode = $number[0];		$number = $number[1];		if ($displayplan == 'ITU-T' || $displayplan == 'International' || $displayplan == 'int' || $displayplan == 'missdn' || $displayplan == null)		{			$display[0] = '+';			$display[1] = $countrycode;			$display[2] = ' ';			$display[3] = implode(str_split($number, 2), ' ');		}		elseif ($displayplan == 'NANP' || $displayplan == 'northamerica' || $displayplan == 'US')		{			$display[0] = '(';			$display[1] = substr($number, 0, 3);			$display[2] = ') ';			$display[3] = substr($number, 3, 3);			$display[4] = '-';			$display[5] = substr($number, 6, 4);		}		elseif ($displayplan == 'EPP' || $displayplan == 'IETF')		{			$display[0] = '+';			$display[1] = $countrycode;			$display[2] = '.';			$display[3] = $number;		}		elseif ($displayplan == 'ARPA' || $displayplan == 'ENUM')		{			$number = implode(str_split(strrev($number), 1), '.');			$display[0] = '+';			$display[1] = $number;			$display[2] = '.';			$display[3] = $countrycode;			$display[4] = '.e164.arpa';		}		$display = implode($display, '');		return $display;	}}
<?php/** * @package     Joomla.Libraries * @subpackage  Help * * @copyright   Copyright (C) 2005 - 2013 Open Source Matters, Inc. All rights reserved. * @license     GNU General Public License version 2 or later; see LICENSE */defined('JPATH_PLATFORM') or die;/** * Help system class * * @package     Joomla.Libraries * @subpackage  Help * @since       1.5 */class JHelp{	/**	 * Create a URL for a given help key reference	 *	 * @param   string   $ref           The name of the help screen (its key reference)	 * @param   boolean  $useComponent  Use the help file in the component directory	 * @param   string   $override      Use this URL instead of any other	 * @param   string   $component     Name of component (or null for current component)	 *	 * @return  string	 *	 * @since   1.5	 */	public static function createURL($ref, $useComponent = false, $override = null, $component = null)	{		$local = false;		$app = JFactory::getApplication();		if (is_null($component))		{			$component = JApplicationHelper::getComponentName();		}		//  Determine the location of the help file.  At this stage the URL		//  can contain substitution codes that will be replaced later.		if ($override)		{			$url = $override;		}		else		{			// Get the user help URL.			$user = JFactory::getUser();			$url = $user->getParam('helpsite');			// If user hasn't specified a help URL, then get the global one.			if ($url == '')			{				$url = $app->getCfg('helpurl');			}			// Component help URL overrides user and global.			if ($useComponent)			{				// Look for help URL in component parameters.				$params = JComponentHelper::getParams($component);				$url = $params->get('helpURL');				if ($url == '')				{					$local = true;					$url = 'components/{component}/help/{language}/{keyref}';				}			}			// Set up a local help URL.			if (!$url)			{				$local = true;				$url = 'help/{language}/{keyref}';			}		}		// If the URL is local then make sure we have a valid file extension on the URL.		if ($local)		{			if (!preg_match('#\.html$|\.xml$#i', $ref))			{				$url .= '.html';			}		}		/*		 *  Replace substitution codes in the URL.		 */		$lang = JFactory::getLanguage();		$version = new JVersion;		$jver = explode('.', $version->getShortVersion());		$jlang = explode('-', $lang->getTag());		$debug = $lang->setDebug(false);		$keyref = JText::_($ref);		$lang->setDebug($debug);		// Replace substitution codes in help URL.		$search = array(			// Application name (eg. 'Administrator')			'{app}',			// Component name (eg. 'com_content')			'{component}',			// Help screen key reference			'{keyref}',			// Full language code (eg. 'en-GB')			'{language}',			// Short language code (eg. 'en')			'{langcode}',			// Region code (eg. 'GB')			'{langregion}',			// Joomla major version number			'{major}',			// Joomla minor version number			'{minor}',			// Joomla maintenance version number			'{maintenance}'		);		$replace = array(			// {app}			$app->getName(),			// {component}			$component,			// {keyref}			$keyref,			// {language}			$lang->getTag(),			// {langcode}			$jlang[0],			// {langregion}			$jlang[1],			// {major}			$jver[0],			// {minor}			$jver[1],			// {maintenance}			$jver[2]		);		// If the help file is local then check it exists.		// If it doesn't then fallback to English.		if ($local)		{			$try = str_replace($search, $replace, $url);			if (!is_file(JPATH_BASE . '/' . $try))			{				$replace[3] = 'en-GB';				$replace[4] = 'en';				$replace[5] = 'GB';			}		}		$url = str_replace($search, $replace, $url);		return $url;	}	/**	 * Builds a list of the help sites which can be used in a select option.	 *	 * @param   string  $pathToXml  Path to an XML file.	 *	 * @return  array  An array of arrays (text, value, selected).	 *	 * @since   1.5	 */	public static function createSiteList($pathToXml)	{		$list = array();		$xml = false;		if (!empty($pathToXml))		{			$xml = simplexml_load_file($pathToXml);		}		if (!$xml)		{			$option['text'] = 'English (GB) help.joomla.org';			$option['value'] = 'http://help.joomla.org';			$list[] = $option;		}		else		{			$option = array();			foreach ($xml->sites->site as $site)			{				$option['text'] = (string) $site;				$option['value'] = (string) $site->attributes()->url;				$list[] = $option;			}		}		return $list;	}}
<?php/** * @package     Joomla.Administrator * @subpackage  com_menus * * @copyright   Copyright (C) 2005 - 2013 Open Source Matters, Inc. All rights reserved. * @license     GNU General Public License version 2 or later; see LICENSE.txt */defined('_JEXEC') or die;/** * The HTML Menus Menu Item View. * * @package     Joomla.Administrator * @subpackage  com_menus * @since       1.6 */class MenusViewItem extends JViewLegacy{	protected $form;	protected $item;	protected $modules;	protected $state;	/**	 * Display the view	 */	public function display($tpl = null)	{		$this->form		= $this->get('Form');		$this->item		= $this->get('Item');		$this->modules	= $this->get('Modules');		$this->state	= $this->get('State');		// Check for errors.		if (count($errors = $this->get('Errors')))		{			JError::raiseError(500, implode("\n", $errors));			return false;		}		parent::display($tpl);		$this->addToolbar();	}	/**	 * Add the page title and toolbar.	 *	 * @since   1.6	 */	protected function addToolbar()	{		$input = JFactory::getApplication()->input;		$input->set('hidemainmenu', true);		$user		= JFactory::getUser();		$isNew		= ($this->item->id == 0);		$checkedOut	= !($this->item->checked_out == 0 || $this->item->checked_out == $user->get('id'));		$canDo		= MenusHelper::getActions($this->state->get('filter.parent_id'));		JToolbarHelper::title(JText::_($isNew ? 'COM_MENUS_VIEW_NEW_ITEM_TITLE' : 'COM_MENUS_VIEW_EDIT_ITEM_TITLE'), 'menu-add');		// If a new item, can save the item.  Allow users with edit permissions to apply changes to prevent returning to grid.		if ($isNew && $canDo->get('core.create'))		{			if ($canDo->get('core.edit'))			{				JToolbarHelper::apply('item.apply');			}			JToolbarHelper::save('item.save');		}		// If not checked out, can save the item.		if (!$isNew && !$checkedOut && $canDo->get('core.edit'))		{			JToolbarHelper::apply('item.apply');			JToolbarHelper::save('item.save');		}		// If the user can create new items, allow them to see Save & New		if ($canDo->get('core.create'))		{			JToolbarHelper::save2new('item.save2new');		}		// If an existing item, can save to a copy only if we have create rights.		if (!$isNew && $canDo->get('core.create'))		{			JToolbarHelper::save2copy('item.save2copy');		}		if ($isNew)		{			JToolbarHelper::cancel('item.cancel');		}		else		{			JToolbarHelper::cancel('item.cancel', 'JTOOLBAR_CLOSE');		}		JToolbarHelper::divider();		// Get the help information for the menu item.		$lang = JFactory::getLanguage();		$help = $this->get('Help');		if ($lang->hasKey($help->url))		{			$debug = $lang->setDebug(false);			$url = JText::_($help->url);			$lang->setDebug($debug);		}		else		{			$url = $help->url;		}		JToolbarHelper::help($help->key, $help->local, $url);	}}
<?php/** * @package     Joomla.Administrator * @subpackage  Template.hathor * * @copyright   Copyright (C) 2005 - 2013 Open Source Matters, Inc. All rights reserved. * @license     GNU General Public License version 2 or later; see LICENSE.txt */defined('_JEXEC') or die;$user		= JFactory::getUser();$userId		= $user->get('id');$listOrder	= $this->escape($this->state->get('list.ordering'));$listDirn	= $this->escape($this->state->get('list.direction'));JText::script('COM_FINDER_INDEX_CONFIRM_DELETE_PROMPT');?><script type="text/javascript">Joomla.submitbutton = function(pressbutton){	if (pressbutton == 'filters.delete')	{		if (confirm(Joomla.JText._('COM_FINDER_INDEX_CONFIRM_DELETE_PROMPT')))		{			Joomla.submitform(pressbutton);		}		else		{			return false;		}	}	Joomla.submitform(pressbutton);}</script><form action="<?php echo JRoute::_('index.php?option=com_finder&view=filters');?>" method="post" name="adminForm" id="adminForm"><?php if (!empty( $this->sidebar)) : ?>	<div id="j-sidebar-container" class="span2">		<?php echo $this->sidebar; ?>	</div>	<div id="j-main-container" class="span10"><?php else : ?>	<div id="j-main-container"><?php endif;?>	<fieldset id="filter-bar">	<legend class="element-invisible"><?php echo JText::sprintf('COM_FINDER_SEARCH_LABEL', JText::_('COM_FINDER_FILTERS')); ?></legend>		<div class="filter-search">			<label class="filter-search-lbl" for="filter_search"><?php echo JText::sprintf('COM_FINDER_SEARCH_LABEL', JText::_('COM_FINDER_FILTERS')); ?></label>			<input type="text" name="filter_search" id="filter_search" value="<?php echo $this->escape($this->state->get('filter.search')); ?>" title="<?php echo JText::_('COM_FINDER_FILTER_SEARCH_DESCRIPTION'); ?>" />			<button type="submit" class="btn"><?php echo JText::_('JSEARCH_FILTER_SUBMIT'); ?></button>			<button type="button" onclick="document.id('filter_search').value='';this.form.submit();"><?php echo JText::_('JSEARCH_FILTER_CLEAR'); ?></button>		</div>		<div class="filter-select">			<label class="selectlabel" for="filter_state"><?php echo JText::_('COM_FINDER_INDEX_FILTER_BY_STATE'); ?></label>			<select name="filter_state" class="inputbox" id="filter_state">				<option value=""><?php echo JText::_('COM_FINDER_INDEX_FILTER_BY_STATE');?></option>				<?php echo JHtml::_('select.options', JHtml::_('finder.statelist'), 'value', 'text', $this->state->get('filter.state'));?>			</select>			<button type="submit" id="filter-go">				<?php echo JText::_('JSUBMIT'); ?></button>		</div>	</fieldset>	<div class="clr"> </div>	<table class="adminlist">		<thead>			<tr>				<th class="checkmark-col">					<input type="checkbox" name="checkall-toggle" value="" title="<?php echo JText::_('JGLOBAL_CHECK_ALL'); ?>" onclick="Joomla.checkAll(this)" />				</th>				<th class="title">					<?php echo JHtml::_('grid.sort', 'JGLOBAL_TITLE', 'a.title', $listDirn, $listOrder); ?>				</th>				<th class="nowrap state-col">					<?php echo JHtml::_('grid.sort', 'JSTATUS', 'a.state', $listDirn, $listOrder); ?>				</th>				<th class="title created-by-col">					<?php echo JHtml::_('grid.sort', 'JGRID_HEADING_CREATED_BY', 'a.created_by_alias', $listDirn, $listOrder); ?>				</th>				<th class="title date-col">					<?php echo JHtml::_('grid.sort', 'COM_FINDER_FILTER_TIMESTAMP', 'a.created', $listDirn, $listOrder); ?>				</th>				<th class="nowrap width-5">					<?php echo JHtml::_('grid.sort', 'COM_FINDER_FILTER_MAP_COUNT', 'a.map_count', $listDirn, $listOrder); ?>				</th>				<th class="nowrap id-col">					<?php echo JHtml::_('grid.sort', 'JGRID_HEADING_ID', 'a.filter_id', $listDirn, $listOrder); ?>				</th>			</tr>		</thead>		<tbody>		<?php if (count($this->items) == 0) : ?>			<tr class="row0">				<td class="center" colspan="7">					<?php					if ($this->total == 0):						echo JText::_('COM_FINDER_NO_FILTERS');						?>						<a href="<?php echo JRoute::_('index.php?option=com_finder&task=filter.add'); ?>" title="<?php echo JText::_('COM_FINDER_CREATE_FILTER'); ?>">							<?php echo JText::_('COM_FINDER_CREATE_FILTER'); ?>						</a>						<?php					else:						echo JText::_('COM_FINDER_NO_RESULTS');					endif;					?>				</td>			</tr>		<?php endif; ?>		<?php foreach ($this->items as $i => $item) :			$canCreate  = $user->authorise('core.create',     'com_finder');			$canEdit    = $user->authorise('core.edit',       'com_finder');			$canCheckin = $user->authorise('core.manage',     'com_checkin') || $filter->checked_out == $user->get('id') || $filter->checked_out == 0;			$canChange  = $user->authorise('core.edit.state', 'com_finder') && $canCheckin;			?>			<tr class="row<?php echo $i % 2; ?>">				<th class="center">					<?php echo JHtml::_('grid.id', $i, $item->filter_id); ?>				</th>				<td>					<?php if ($item->checked_out)					{						echo JHtml::_('jgrid.checkedout', $i, $item->editor, $item->checked_out_time, 'filters.', $canCheckin);					} ?>					<?php if ($canEdit) { ?>						<a href="<?php echo JRoute::_('index.php?option=com_finder&task=filter.edit&filter_id=' . (int) $item->filter_id); ?>">							<?php echo $this->escape($item->title); ?></a>					<?php } else {							echo $this->escape($item->title);					} ?>				</td>				<td class="center nowrap">					<?php echo JHtml::_('jgrid.published', $item->state, $i, 'filters.', $canChange); ?>				</td>				<td class="center nowrap">					<?php echo $item->created_by_alias ? $item->created_by_alias : $item->user_name; ?>				</td>				<td class="center nowrap">					<?php echo JHtml::_('date', $item->created, JText::_('DATE_FORMAT_LC4')); ?>				</td>				<td class="center nowrap">					<?php echo $item->map_count; ?>				</td>				<td class="center">					<?php echo (int) $item->filter_id; ?>				</td>			</tr>			<?php endforeach; ?>		</tbody>	</table>	<?php echo $this->pagination->getListFooter(); ?>	<input type="hidden" name="task" value="" />	<input type="hidden" name="boxchecked" value="0" />	<input type="hidden" name="filter_order" value="<?php echo $listOrder; ?>" />	<input type="hidden" name="filter_order_Dir" value="<?php echo $listDirn; ?>" />	<?php echo JHtml::_('form.token'); ?>	</div></form>
<?php/** * @package     Joomla.Legacy * @subpackage  Base * * @copyright   Copyright (C) 2005 - 2013 Open Source Matters, Inc. All rights reserved. * @license     GNU General Public License version 2 or later; see LICENSE */defined('JPATH_PLATFORM') or die;/** * Tree Node Class. * * @package     Joomla.Legacy * @subpackage  Base * @since       11.1 * @deprecated  12.3 * @codeCoverageIgnore */class JNode extends JObject{	/**	 * Parent node	 * @var    object	 *	 * @since  11.1	 */	protected $_parent = null;	/**	 * Array of Children	 *	 * @var    array	 * @since  11.1	 */	protected $_children = array();	/**	 * Constructor	 *	 * @since  11.1	 */	public function __construct()	{		JLog::add('JNode::__construct() is deprecated.', JLog::WARNING, 'deprecated');		return true;	}	/**	 * Add child to this node	 *	 * If the child already has a parent, the link is unset	 *	 * @param   JNode  &$child  The child to be added	 *	 * @return  void	 *	 * @since   11.1	 */	public function addChild(&$child)	{		JLog::add('JNode::addChild() is deprecated.', JLog::WARNING, 'deprecated');		if ($child instanceof Jnode)		{			$child->setParent($this);		}	}	/**	 * Set the parent of a this node	 *	 * If the node already has a parent, the link is unset	 *	 * @param   mixed  &$parent  The JNode for parent to be set or null	 *	 * @return  void	 *	 * @since    11.1	 */	public function setParent(&$parent)	{		JLog::add('JNode::setParent() is deprecated.', JLog::WARNING, 'deprecated');		if ($parent instanceof JNode || is_null($parent))		{			$hash = spl_object_hash($this);			if (!is_null($this->_parent))			{				unset($this->_parent->children[$hash]);			}			if (!is_null($parent))			{				$parent->_children[$hash] = & $this;			}			$this->_parent = & $parent;		}	}	/**	 * Get the children of this node	 *	 * @return  array    The children	 *	 * @since   11.1	 */	public function &getChildren()	{		JLog::add('JNode::getChildren() is deprecated.', JLog::WARNING, 'deprecated');		return $this->_children;	}	/**	 * Get the parent of this node	 *	 * @return  mixed   JNode object with the parent or null for no parent	 *	 * @since   11.1	 */	public function &getParent()	{		JLog::add('JNode::getParent() is deprecated.', JLog::WARNING, 'deprecated');		return $this->_parent;	}	/**	 * Test if this node has children	 *	 * @return   boolean  True if there are children	 *	 * @since    11.1	 */	public function hasChildren()	{		JLog::add('JNode::hasChildren() is deprecated.', JLog::WARNING, 'deprecated');		return (bool) count($this->_children);	}	/**	 * Test if this node has a parent	 *	 * @return  boolean  True if there is a parent	 *	 * @since   11.1	 */	public function hasParent()	{		JLog::add('JNode::hasParent() is deprecated.', JLog::WARNING, 'deprecated');		return $this->getParent() != null;	}}
<?php/** * @package     Joomla.Administrator * @subpackage  com_config * * @copyright   Copyright (C) 2005 - 2013 Open Source Matters, Inc. All rights reserved. * @license     GNU General Public License version 2 or later; see LICENSE.txt */defined('_JEXEC') or die;?><div class="width-100"><fieldset class="adminform">	<legend><?php echo JText::_('COM_CONFIG_FTP_SETTINGS'); ?></legend>	<ul class="adminformlist">			<?php			foreach ($this->form->getFieldset('ftp') as $field):			?>					<li><?php echo $field->label; ?>					<?php echo $field->input; ?></li>			<?php			endforeach;			?>		</ul></fieldset></div>
<?php/** * @package     Joomla.Administrator * @subpackage  com_modules * * @copyright   Copyright (C) 2005 - 2013 Open Source Matters, Inc. All rights reserved. * @license     GNU General Public License version 2 or later; see LICENSE.txt */defined('_JEXEC') or die;require_once JPATH_ADMINISTRATOR . '/components/com_templates/helpers/templates.php';JHtml::addIncludePath(JPATH_COMPONENT . '/helpers/html');$clientId       = $this->item->client_id;$state          = 1;$templates      = array_keys(ModulesHelper::getTemplates($clientId, $state));$templateGroups = array();// Add an empty value to be able to deselect a module position$option = ModulesHelper::createOption();$templateGroups[''] = ModulesHelper::createOptionGroup('', array($option));// Add positions from templates$isTemplatePosition = false;foreach ($templates as $template){	$options = array();	$positions = TemplatesHelper::getPositions($clientId, $template);	foreach ($positions as $position)	{		$text = ModulesHelper::getTranslatedModulePosition($clientId, $template, $position) . ' [' . $position . ']';		$options[] = ModulesHelper::createOption($position, $text);		if (!$isTemplatePosition && $this->item->position === $position)		{			$isTemplatePosition = true;		}	}	$templateGroups[$template] = ModulesHelper::createOptionGroup(ucfirst($template), $options);}// Add custom position to options$customGroupText = JText::_('COM_MODULES_CUSTOM_POSITION');$editPositions = true;$customPositions = ModulesHelper::getPositions($clientId, $editPositions);$templateGroups[$customGroupText] = ModulesHelper::createOptionGroup($customGroupText, $customPositions);// Build field$attr = array(	'id'          => 'jform_position',	'list.select' => $this->item->position,	'list.attr'   => 'class="chzn-custom-value input-xlarge" '		. 'data-custom_group_text="' . $customGroupText . '" '		. 'data-no_results_text="' . JText::_('COM_MODULES_ADD_CUSTOM_POSITION') . '" '		. 'data-placeholder="' . JText::_('COM_MODULES_TYPE_OR_SELECT_POSITION') . '" ');echo JHtml::_('select.groupedlist', $templateGroups, 'jform[position]', $attr);
<?php/** * @package     Joomla.Platform * @subpackage  Crypt * * @copyright   Copyright (C) 2005 - 2011 Open Source Matters, Inc. All rights reserved. * @license     GNU General Public License version 2 or later; see LICENSE */defined('JPATH_PLATFORM') or die;/** * JCrypt cipher for Simple encryption, decryption and key generation. * * @package     Joomla.Platform * @subpackage  Crypt * @since       12.1 */class JCryptCipherSimple implements JCryptCipher{	/**	 * Method to decrypt a data string.	 *	 * @param   string     $data  The encrypted string to decrypt.	 * @param   JCryptKey  $key   The key[/pair] object to use for decryption.	 *	 * @return  string  The decrypted data string.	 *	 * @since   12.1	 * @throws  InvalidArgumentException	 */	public function decrypt($data, JCryptKey $key)	{		// Validate key.		if ($key->type != 'simple')		{			throw new InvalidArgumentException('Invalid key of type: ' . $key->type . '.  Expected simple.');		}		$decrypted = '';		$tmp = $key->public;		// Convert the HEX input into an array of integers and get the number of characters.		$chars = $this->_hexToIntArray($data);		$charCount = count($chars);		// Repeat the key as many times as necessary to ensure that the key is at least as long as the input.		for ($i = 0; $i < $charCount; $i = strlen($tmp))		{			$tmp = $tmp . $tmp;		}		// Get the XOR values between the ASCII values of the input and key characters for all input offsets.		for ($i = 0; $i < $charCount; $i++)		{			$decrypted .= chr($chars[$i] ^ ord($tmp[$i]));		}		return $decrypted;	}	/**	 * Method to encrypt a data string.	 *	 * @param   string     $data  The data string to encrypt.	 * @param   JCryptKey  $key   The key[/pair] object to use for encryption.	 *	 * @return  string  The encrypted data string.	 *	 * @since   12.1	 * @throws  InvalidArgumentException	 */	public function encrypt($data, JCryptKey $key)	{		// Validate key.		if ($key->type != 'simple')		{			throw new InvalidArgumentException('Invalid key of type: ' . $key->type . '.  Expected simple.');		}		$encrypted = '';		$tmp = $key->private;		// Split up the input into a character array and get the number of characters.		$chars = preg_split('//', $data, -1, PREG_SPLIT_NO_EMPTY);		$charCount = count($chars);		// Repeat the key as many times as necessary to ensure that the key is at least as long as the input.		for ($i = 0; $i < $charCount; $i = strlen($tmp))		{			$tmp = $tmp . $tmp;		}		// Get the XOR values between the ASCII values of the input and key characters for all input offsets.		for ($i = 0; $i < $charCount; $i++)		{			$encrypted .= $this->_intToHex(ord($tmp[$i]) ^ ord($chars[$i]));		}		return $encrypted;	}	/**	 * Method to generate a new encryption key[/pair] object.	 *	 * @param   array  $options  Key generation options.	 *	 * @return  JCryptKey	 *	 * @since   12.1	 */	public function generateKey(array $options = array())	{		// Create the new encryption key[/pair] object.		$key = new JCryptKey('simple');		// Just a random key of a given length.		$key->private = $this->_getRandomKey();		$key->public  = $key->private;		return $key;	}	/**	 * Method to generate a random key of a given length.	 *	 * @param   integer  $length  The length of the key to generate.	 *	 * @return  string	 *	 * @since   12.1	 */	private function _getRandomKey($length = 256)	{		$key = '';		$salt = 'abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789';		$saltLength = strlen($salt);		// Build the random key.		for ($i = 0; $i < $length; $i++)		{			$key .= $salt[mt_rand(0, $saltLength - 1)];		}		return $key;	}	/**	 * Convert hex to an integer	 *	 * @param   string   $s  The hex string to convert.	 * @param   integer  $i  The offset?	 *	 * @return  integer	 *	 * @since   11.1	 */	private function _hexToInt($s, $i)	{		$j = (int) $i * 2;		$k = 0;		$s1 = (string) $s;		// Get the character at position $j.		$c = substr($s1, $j, 1);		// Get the character at position $j + 1.		$c1 = substr($s1, $j + 1, 1);		switch ($c)		{			case 'A':				$k += 160;				break;			case 'B':				$k += 176;				break;			case 'C':				$k += 192;				break;			case 'D':				$k += 208;				break;			case 'E':				$k += 224;				break;			case 'F':				$k += 240;				break;			case ' ':				$k += 0;				break;			default:				(int) $k = $k + (16 * (int) $c);				break;		}		switch ($c1)		{			case 'A':				$k += 10;				break;			case 'B':				$k += 11;				break;			case 'C':				$k += 12;				break;			case 'D':				$k += 13;				break;			case 'E':				$k += 14;				break;			case 'F':				$k += 15;				break;			case ' ':				$k += 0;				break;			default:				$k += (int) $c1;				break;		}		return $k;	}	/**	 * Convert hex to an array of integers	 *	 * @param   string  $hex  The hex string to convert to an integer array.	 *	 * @return  array  An array of integers.	 *	 * @since   11.1	 */	private function _hexToIntArray($hex)	{		$array = array();		$j = (int) strlen($hex) / 2;		for ($i = 0; $i < $j; $i++)		{			$array[$i] = (int) $this->_hexToInt($hex, $i);		}		return $array;	}	/**	 * Convert an integer to a hexadecimal string.	 *	 * @param   integer  $i  An integer value to convert to a hex string.	 *	 * @return  string	 *	 * @since   11.1	 */	private function _intToHex($i)	{		// Sanitize the input.		$i = (int) $i;		// Get the first character of the hexadecimal string if there is one.		$j = (int) ($i / 16);		if ($j === 0)		{			$s = ' ';		}		else		{			$s = strtoupper(dechex($j));		}		// Get the second character of the hexadecimal string.		$k = $i - $j * 16;		$s = $s . strtoupper(dechex($k));		return $s;	}}
<?php/** * @package     Joomla.Administrator * @subpackage  com_languages * * @copyright   Copyright (C) 2005 - 2013 Open Source Matters, Inc. All rights reserved. * @license     GNU General Public License version 2 or later; see LICENSE.txt */defined('_JEXEC') or die;/** * Languages list actions controller. * * @package     Joomla.Administrator * @subpackage  com_languages * @since       1.6 */class LanguagesControllerLanguage extends JControllerForm{	/**	 * Gets the URL arguments to append to an item redirect.	 *	 * @param   int      $recordId  The primary key id for the item.	 * @param   string  $key        The name of the primary key variable.	 *	 * @return  string  The arguments to append to the redirect URL.	 *	 * @since   1.6	 */	protected function getRedirectToItemAppend($recordId = null, $key = 'lang_id')	{		return parent::getRedirectToItemAppend($recordId, $key);	}}
<?php/** * @package     Joomla.Platform * @subpackage  Event * * @copyright   Copyright (C) 2005 - 2013 Open Source Matters, Inc. All rights reserved. * @license     GNU General Public License version 2 or later; see LICENSE */defined('JPATH_PLATFORM') or die;/** * JEvent Class * * @package     Joomla.Platform * @subpackage  Event * @since       11.1 */abstract class JEvent extends JObject{	/**	 * Event object to observe.	 *	 * @var    object	 * @since  11.3	 */	protected $_subject = null;	/**	 * Constructor	 *	 * @param   object  &$subject  The object to observe.	 *	 * @since   11.3	 */	public function __construct(&$subject)	{		// Register the observer ($this) so we can be notified		$subject->attach($this);		// Set the subject to observe		$this->_subject = &$subject;	}	/**	 * Method to trigger events.	 * The method first generates the even from the argument array. Then it unsets the argument	 * since the argument has no bearing on the event handler.	 * If the method exists it is called and returns its return value. If it does not exist it	 * returns null.	 *	 * @param   array  &$args  Arguments	 *	 * @return  mixed  Routine return value	 *	 * @since   11.1	 */	public function update(&$args)	{		// First let's get the event from the argument array.  Next we will unset the		// event argument as it has no bearing on the method to handle the event.		$event = $args['event'];		unset($args['event']);		/*		 * If the method to handle an event exists, call it and return its return		 * value.  If it does not exist, return null.		 */		if (method_exists($this, $event))		{			return call_user_func_array(array($this, $event), $args);		}		else		{			return null;		}	}}
<?php/** * @package     Joomla.Platform * @subpackage  Model * * @copyright   Copyright (C) 2005 - 2013 Open Source Matters, Inc. All rights reserved. * @license     GNU General Public License version 2 or later; see LICENSE */defined('JPATH_PLATFORM') or die;/** * Joomla Platform Database Model Class * * @package     Joomla.Platform * @subpackage  Model * @since       12.1 */abstract class JModelDatabase extends JModelBase{	/**	 * The database driver.	 *	 * @var    JDatabaseDriver	 * @since  12.1	 */	protected $db;	/**	 * Instantiate the model.	 *	 * @param   JRegistry        $state  The model state.	 * @param   JDatabaseDriver  $db     The database adpater.	 *	 * @since   12.1	 */	public function __construct(JRegistry $state = null, JDatabaseDriver $db = null)	{		parent::__construct($state);		// Setup the model.		$this->db = isset($db) ? $db : $this->loadDb();	}	/**	 * Get the database driver.	 *	 * @return  JDatabaseDriver  The database driver.	 *	 * @since   12.1	 */	public function getDb()	{		return $this->db;	}	/**	 * Set the database driver.	 *	 * @param   JDatabaseDriver  $db  The database driver.	 *	 * @return  void	 *	 * @since   12.1	 */	public function setDb(JDatabaseDriver $db)	{		$this->db = $db;	}	/**	 * Load the database driver.	 *	 * @return  JDatabaseDriver  The database driver.	 *	 * @since   12.1	 */	protected function loadDb()	{		return JFactory::getDbo();	}}
<?php/** * @package     Joomla.Administrator * @subpackage  com_redirect * * @copyright   Copyright (C) 2005 - 2013 Open Source Matters, Inc. All rights reserved. * @license     GNU General Public License version 2 or later; see LICENSE.txt */defined('_JEXEC') or die;/** * Redirect link list controller class. * * @package     Joomla.Administrator * @subpackage  com_redirect * @since       1.6 */class RedirectControllerLinks extends JControllerAdmin{	/**	 * Method to update a record.	 * @since   1.6	 */	public function activate()	{		// Check for request forgeries.		JSession::checkToken() or jexit(JText::_('JINVALID_TOKEN'));		$ids     = $this->input->get('cid', array(), 'array');		$newUrl  = $this->input->getString('new_url');		$comment = $this->input->getString('comment');		if (empty($ids))		{			JError::raiseWarning(500, JText::_('COM_REDIRECT_NO_ITEM_SELECTED'));		}		else		{			// Get the model.			$model = $this->getModel();			JArrayHelper::toInteger($ids);			// Remove the items.			if (!$model->activate($ids, $newUrl, $comment))			{				JError::raiseWarning(500, $model->getError());			}			else {				$this->setMessage(JText::plural('COM_REDIRECT_N_LINKS_UPDATED', count($ids)));			}		}		$this->setRedirect('index.php?option=com_redirect&view=links');	}	/**	 * Proxy for getModel.	 * @since   1.6	 */	public function getModel($name = 'Link', $prefix = 'RedirectModel', $config = array('ignore_request' => true))	{		$model = parent::getModel($name, $prefix, $config);		return $model;	}}
