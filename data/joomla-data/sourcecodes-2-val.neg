<?php/** * @package     Joomla.Plugin * @subpackage  User.contactcreator * * @copyright   Copyright (C) 2005 - 2013 Open Source Matters, Inc. All rights reserved. * @license     GNU General Public License version 2 or later; see LICENSE.txt */defined('_JEXEC') or die;/** * Class for Contact Creator * * A tool to automatically create and synchronise contacts with a user * * @package     Joomla.Plugin * @subpackage  User.contactcreator * @since       1.6 */class PlgUserContactCreator extends JPlugin{	/**	 * Load the language file on instantiation.	 *	 * @var    boolean	 * @since  3.1	 */	protected $autoloadLanguage = true;	public function onUserAfterSave($user, $isnew, $success, $msg)	{		if (!$success)		{			return false; // if the user wasn't stored we don't resync		}		if (!$isnew)		{			return false; // if the user isn't new we don't sync		}		// ensure the user id is really an int		$user_id = (int) $user['id'];		if (empty($user_id))		{			die('invalid userid');			return false; // if the user id appears invalid then bail out just in case		}		$category = $this->params->get('category', 0);		if (empty($category))		{			JError::raiseWarning(41, JText::_('PLG_CONTACTCREATOR_ERR_NO_CATEGORY'));			return false; // bail out if we don't have a category		}		$db = JFactory::getDbo();		// grab the contact ID for this user; note $user_id is cleaned above		$db->setQuery('SELECT id FROM #__contact_details WHERE user_id = '. $user_id);		$id = $db->loadResult();		JTable::addIncludePath(JPATH_ADMINISTRATOR.'/components/com_contact/tables');		$contact = JTable::getInstance('contact', 'ContactTable');		if (!$contact)		{			return false;		}		if ($id)		{			$contact->load($id);		}		elseif ($this->params->get('autopublish', 0))		{			$contact->published = 1;		}		$contact->name = $user['name'];		$contact->user_id = $user_id;		$contact->email_to = $user['email'];		$contact->catid = $category;		$contact->language = '*';		$autowebpage = $this->params->get('autowebpage', '');		if (!empty($autowebpage))		{			// search terms			$search_array = array('[name]', '[username]', '[userid]', '[email]');			// replacement terms, urlencoded			$replace_array = array_map('urlencode', array($user['name'], $user['username'], $user['id'], $user['email']));			// now replace it in together			$contact->webpage = str_replace($search_array, $replace_array, $autowebpage);		}		if ($contact->check())		{			$result = $contact->store();		}		if (!(isset($result)) || !$result)		{			JError::raiseError(42, JText::sprintf('PLG_CONTACTCREATOR_ERR_FAILED_UPDATE', $contact->getError()));		}	}}
<?php/** * @package     Joomla.Site * @subpackage  com_users * * @copyright   Copyright (C) 2005 - 2013 Open Source Matters, Inc. All rights reserved. * @license     GNU General Public License version 2 or later; see LICENSE.txt */defined('_JEXEC') or die;/** * Remind model class for Users. * * @package     Joomla.Site * @subpackage  com_users * @since       1.5 */class UsersModelRemind extends JModelForm{	/**	 * Method to get the username remind request form.	 *	 * @param   array      $data        An optional array of data for the form to interogate.	 * @param   boolean    $loadData    True if the form is to load its own data (default case), false if not.	 * @return  JForm    A JForm object on success, false on failure	 * @since   1.6	 */	public function getForm($data = array(), $loadData = true)	{		// Get the form.		$form = $this->loadForm('com_users.remind', 'remind', array('control' => 'jform', 'load_data' => $loadData));		if (empty($form))		{			return false;		}		return $form;	}	/**	 * Override preprocessForm to load the user plugin group instead of content.	 *	 * @param   object    A form object.	 * @param   mixed     The data expected for the form.	 * @throws    Exception if there is an error in the form event.	 * @since   1.6	 */	protected function preprocessForm(JForm $form, $data, $group = 'user')	{		parent::preprocessForm($form, $data, 'user');	}	/**	 * Method to auto-populate the model state.	 *	 * Note. Calling getState in this method will result in recursion.	 *	 * @since   1.6	 */	protected function populateState()	{		// Get the application object.		$app = JFactory::getApplication();		$params = $app->getParams('com_users');		// Load the parameters.		$this->setState('params', $params);	}	/**	 * @since   1.6	 */	public function processRemindRequest($data)	{		// Get the form.		$form = $this->getForm();		// Check for an error.		if (empty($form))		{			return false;		}		// Validate the data.		$data = $this->validate($form, $data);		// Check for an error.		if ($data instanceof Exception)		{			return $return;		}		// Check the validation results.		if ($data === false)		{			// Get the validation messages from the form.			foreach ($form->getErrors() as $formError)			{				$this->setError($formError->getMessage());			}			return false;		}		// Find the user id for the given email address.		$db = $this->getDbo();		$query = $db->getQuery(true)			->select('*')			->from($db->quoteName('#__users'))			->where($db->quoteName('email') . ' = ' . $db->quote($data['email']));		// Get the user id.		$db->setQuery($query);		try		{			$user = $db->loadObject();		}		catch (RuntimeException $e)		{			$this->setError(JText::sprintf('COM_USERS_DATABASE_ERROR', $e->getMessage()), 500);			return false;		}		// Check for a user.		if (empty($user))		{			$this->setError(JText::_('COM_USERS_USER_NOT_FOUND'));			return false;		}		// Make sure the user isn't blocked.		if ($user->block)		{			$this->setError(JText::_('COM_USERS_USER_BLOCKED'));			return false;		}		$config = JFactory::getConfig();		// Assemble the login link.		$itemid = UsersHelperRoute::getLoginRoute();		$itemid = $itemid !== null ? '&Itemid=' . $itemid : '';		$link = 'index.php?option=com_users&view=login' . $itemid;		$mode = $config->get('force_ssl', 0) == 2 ? 1 : -1;		// Put together the email template data.		$data = JArrayHelper::fromObject($user);		$data['fromname'] = $config->get('fromname');		$data['mailfrom'] = $config->get('mailfrom');		$data['sitename'] = $config->get('sitename');		$data['link_text'] = JRoute::_($link, false, $mode);		$data['link_html'] = JRoute::_($link, true, $mode);		$subject = JText::sprintf(			'COM_USERS_EMAIL_USERNAME_REMINDER_SUBJECT',			$data['sitename']		);		$body = JText::sprintf(			'COM_USERS_EMAIL_USERNAME_REMINDER_BODY',			$data['sitename'],			$data['username'],			$data['link_text']		);		// Send the password reset request email.		$return = JFactory::getMailer()->sendMail($data['mailfrom'], $data['fromname'], $user->email, $subject, $body);		// Check for an error.		if ($return !== true)		{			$this->setError(JText::_('COM_USERS_MAIL_FAILED'), 500);			return false;		}		return true;	}}
<?php/** * @package     Joomla.Administrator * @subpackage  com_installer * @copyright   Copyright (C) 2005 - 2013 Open Source Matters, Inc. All rights reserved. * @license     GNU General Public License version 2 or later; see LICENSE.txt */defined('_JEXEC') or die;jimport('joomla.updater.update');/** * Languages Installer Model * * @package     Joomla.Administrator * @subpackage  com_installer * @since       2.5.7 */class InstallerModelLanguages extends JModelList{	/**	 * Constructor override, defines a white list of column filters.	 *	 * @param   array  $config  An optional associative array of configuration settings.	 *	 * @since   2.5.7	 */	public function __construct($config = array())	{		if (empty($config['filter_fields']))		{			$config['filter_fields'] = array(				'update_id', 'update_id',				'name', 'name',			);		}		parent::__construct($config);	}	/**	 * Method to get the available languages database query.	 *	 * @return  JDatabaseQuery  The database query	 *	 * @since   2.5.7	 */	protected function _getListQuery()	{		$db   = JFactory::getDbo();		$query = $db->getQuery(true);		// Select the required fields from the updates table		$query->select('update_id, name, version, detailsurl, type')			->from('#__updates');		// This Where clause will avoid to list languages already installed.		$query->where('extension_id = 0');		// Filter by search in title		$search = $this->getState('filter.search');		if (!empty($search))		{			$search = $db->quote('%' . $db->escape($search, true) . '%');			$query->where('(name LIKE ' . $search . ')');		}		// Add the list ordering clause.		$listOrder = $this->state->get('list.ordering');		$orderDirn = $this->state->get('list.direction');		$query->order($db->escape($listOrder) . ' ' . $db->escape($orderDirn));		return $query;	}	/**	 * Method to get a store id based on model configuration state.	 *	 * @param   string  $id  A prefix for the store id.	 *	 * @return  string  A store id.	 *	 * @since   2.5.7	 */	protected function getStoreId($id = '')	{		// Compile the store id.		$id	.= ':' . $this->getState('filter.search');		return parent::getStoreId($id);	}	/**	 * Method to auto-populate the model state.	 *	 * Note. Calling getState in this method will result in recursion.	 *	 * @param   string  $ordering   list order	 * @param   string  $direction  direction in the list	 *	 * @return  void	 *	 * @since   2.5.7	 */	protected function populateState($ordering = 'name', $direction = 'asc')	{		$app = JFactory::getApplication();		$value = $app->getUserStateFromRequest($this->context . '.filter.search', 'filter_search');		$this->setState('filter.search', $value);		$this->setState('extension_message', $app->getUserState('com_installer.extension_message'));		parent::populateState($ordering, $direction);	}	/**	 * Method to find available languages in the Accredited Languages Update Site.	 *	 * @param   int  $cache_timeout  time before refreshing the cached updates	 *	 * @return  bool	 *	 * @since   2.5.7	 */	public function findLanguages($cache_timeout = 0)	{		$updater = JUpdater::getInstance();		/*		 * The following function uses extension_id 600, that is the english language extension id.		 * In #__update_sites_extensions you should have 600 linked to the Accredited Translations Repo		 */		$updater->findUpdates(array(600), $cache_timeout);		return true;	}	/**	 * Install languages in the system.	 *	 * @param   array  $lids  array of language ids selected in the list	 *	 * @return  bool	 *	 * @since   2.5.7	 */	public function install($lids)	{		$app       = JFactory::getApplication();		$installer = JInstaller::getInstance();		// Loop through every selected language		foreach ($lids as $id)		{			// Loads the update database object that represents the language			$language = JTable::getInstance('update');			$language->load($id);			// Get the url to the XML manifest file of the selected language			$remote_manifest = $this->_getLanguageManifest($id);			if (!$remote_manifest)			{				// Could not find the url, the information in the update server may be corrupt				$message  = JText::sprintf('COM_INSTALLER_MSG_LANGUAGES_CANT_FIND_REMOTE_MANIFEST', $language->name);				$message .= ' ' . JText::_('COM_INSTALLER_MSG_LANGUAGES_TRY_LATER');				$app->enqueueMessage($message);				continue;			}			// Based on the language XML manifest get the url of the package to download			$package_url = $this->_getPackageUrl($remote_manifest);			if (!$package_url)			{				// Could not find the url , maybe the url is wrong in the update server, or there is not internet access				$message  = JText::sprintf('COM_INSTALLER_MSG_LANGUAGES_CANT_FIND_REMOTE_PACKAGE', $language->name);				$message .= ' ' . JText::_('COM_INSTALLER_MSG_LANGUAGES_TRY_LATER');				$app->enqueueMessage($message);				continue;			}			// Download the package to the tmp folder			$package = $this->_downloadPackage($package_url);			// Install the package			if (!$installer->install($package['dir']))			{				// There was an error installing the package				$message  = JText::sprintf('COM_INSTALLER_INSTALL_ERROR', $language->name);				$message .= ' ' . JText::_('COM_INSTALLER_MSG_LANGUAGES_TRY_LATER');				$app->enqueueMessage($message);				continue;			}			// Package installed successfully			$app->enqueueMessage(JText::sprintf('COM_INSTALLER_INSTALL_SUCCESS', $language->name));			// Cleanup the install files in tmp folder			if (!is_file($package['packagefile']))			{				$config = JFactory::getConfig();				$package['packagefile'] = $config->get('tmp_path') . '/' . $package['packagefile'];			}			JInstallerHelper::cleanupInstall($package['packagefile'], $package['extractdir']);			// Delete the installed language from the list			$language->delete($id);		}	}	/**	 * Gets the manifest file of a selected language from a the language list in a update server.	 *	 * @param   int  $uid  the id of the language in the #__updates table	 *	 * @return  string	 *	 * @since   2.5.7	 */	protected function _getLanguageManifest($uid)	{		$instance = JTable::getInstance('update');		$instance->load($uid);		return $instance->detailsurl;	}	/**	 * Finds the url of the package to download.	 *	 * @param   string  $remote_manifest  url to the manifest XML file of the remote package	 *	 * @return  string|bool	 *	 * @since   2.5.7	 */	protected function _getPackageUrl( $remote_manifest )	{		$update = new JUpdate;		$update->loadFromXML($remote_manifest);		$package_url = trim($update->get('downloadurl', false)->_data);		return $package_url;	}	/**	 * Download a language package from a URL and unpack it in the tmp folder.	 *	 * @param   string  $url  hola	 *	 * @return  array|bool  Package details or false on failure	 *	 * @since   2.5.7	 */	protected function _downloadPackage($url)	{		// Download the package from the given URL		$p_file = JInstallerHelper::downloadPackage($url);		// Was the package downloaded?		if (!$p_file)		{			JError::raiseWarning('', JText::_('COM_INSTALLER_MSG_INSTALL_INVALID_URL'));			return false;		}		$config   = JFactory::getConfig();		$tmp_dest = $config->get('tmp_path');		// Unpack the downloaded package file		$package = JInstallerHelper::unpack($tmp_dest . '/' . $p_file);		return $package;	}}
<?php/** * @package     Joomla.Administrator * @subpackage  com_banners * * @copyright   Copyright (C) 2005 - 2013 Open Source Matters, Inc. All rights reserved. * @license     GNU General Public License version 2 or later; see LICENSE.txt */defined('_JEXEC') or die;/** * View class for a list of banners. * * @package     Joomla.Administrator * @subpackage  com_banners * @since       1.6 */class BannersViewBanners extends JViewLegacy{	protected $categories;	protected $items;	protected $pagination;	protected $state;	/**	 * Method to display the view.	 *	 * @param   string  $tpl  A template file to load. [optional]	 *	 * @return  mixed  A string if successful, otherwise a JError object.	 *	 * @since   1.6	 */	public function display($tpl = null)	{		$this->categories	= $this->get('CategoryOrders');		$this->items		= $this->get('Items');		$this->pagination	= $this->get('Pagination');		$this->state		= $this->get('State');		// Check for errors.		if (count($errors = $this->get('Errors')))		{			JError::raiseError(500, implode("\n", $errors));			return false;		}		BannersHelper::addSubmenu('banners');		$this->addToolbar();		require_once JPATH_COMPONENT . '/models/fields/bannerclient.php';		// Include the component HTML helpers.		JHtml::addIncludePath(JPATH_COMPONENT . '/helpers/html');		$this->sidebar = JHtmlSidebar::render();		parent::display($tpl);	}	/**	 * Add the page title and toolbar.	 *	 * @return  void	 *	 * @since   1.6	 */	protected function addToolbar()	{		require_once JPATH_COMPONENT . '/helpers/banners.php';		$canDo = BannersHelper::getActions($this->state->get('filter.category_id'));		$user = JFactory::getUser();		// Get the toolbar object instance		$bar = JToolBar::getInstance('toolbar');		JToolbarHelper::title(JText::_('COM_BANNERS_MANAGER_BANNERS'), 'banners.png');		if (count($user->getAuthorisedCategories('com_banners', 'core.create')) > 0)		{			JToolbarHelper::addNew('banner.add');		}		if (($canDo->get('core.edit')))		{			JToolbarHelper::editList('banner.edit');		}		if ($canDo->get('core.edit.state'))		{			if ($this->state->get('filter.state') != 2)			{				JToolbarHelper::publish('banners.publish', 'JTOOLBAR_PUBLISH', true);				JToolbarHelper::unpublish('banners.unpublish', 'JTOOLBAR_UNPUBLISH', true);			}			if ($this->state->get('filter.state') != -1)			{				if ($this->state->get('filter.state') != 2)				{					JToolbarHelper::archiveList('banners.archive');				}				elseif ($this->state->get('filter.state') == 2)				{					JToolbarHelper::unarchiveList('banners.publish');				}			}		}		if ($canDo->get('core.edit.state'))		{			JToolbarHelper::checkin('banners.checkin');		}		if ($this->state->get('filter.state') == -2 && $canDo->get('core.delete'))		{			JToolbarHelper::deleteList('', 'banners.delete', 'JTOOLBAR_EMPTY_TRASH');		}		elseif ($canDo->get('core.edit.state'))		{			JToolbarHelper::trash('banners.trash');		}		// Add a batch button		if ($user->authorise('core.edit'))		{			JHtml::_('bootstrap.modal', 'collapseModal');			$title = JText::_('JTOOLBAR_BATCH');			$dhtml = "<button data-toggle=\"modal\" data-target=\"#collapseModal\" class=\"btn btn-small\">						<i class=\"icon-checkbox-partial\" title=\"$title\"></i>						$title</button>";			$bar->appendButton('Custom', $dhtml, 'batch');		}		if ($canDo->get('core.admin'))		{			JToolbarHelper::preferences('com_banners');		}		JToolbarHelper::help('JHELP_COMPONENTS_BANNERS_BANNERS');		JHtmlSidebar::setAction('index.php?option=com_banners&view=banners');		JHtmlSidebar::addFilter(			JText::_('JOPTION_SELECT_PUBLISHED'),			'filter_state',			JHtml::_('select.options', JHtml::_('jgrid.publishedOptions'), 'value', 'text', $this->state->get('filter.state'), true)		);		JHtmlSidebar::addFilter(			JText::_('COM_BANNERS_SELECT_CLIENT'),			'filter_client_id',			JHtml::_('select.options', BannersHelper::getClientOptions(), 'value', 'text', $this->state->get('filter.client_id'))		);		JHtmlSidebar::addFilter(			JText::_('JOPTION_SELECT_CATEGORY'),			'filter_category_id',			JHtml::_('select.options', JHtml::_('category.options', 'com_banners'), 'value', 'text', $this->state->get('filter.category_id'))		);		JHtmlSidebar::addFilter(			JText::_('JOPTION_SELECT_LANGUAGE'),			'filter_language',			JHtml::_('select.options', JHtml::_('contentlanguage.existing', true, true), 'value', 'text', $this->state->get('filter.language'))		);	}	/**	 * Returns an array of fields the table can be sorted by	 *	 * @return  array  Array containing the field name to sort by as the key and display text as value	 *	 * @since   3.0	 */	protected function getSortFields()	{		return array(			'ordering' => JText::_('JGRID_HEADING_ORDERING'),			'a.state' => JText::_('JSTATUS'),			'a.name' => JText::_('COM_BANNERS_HEADING_NAME'),			'a.sticky' => JText::_('COM_BANNERS_HEADING_STICKY'),			'client_name' => JText::_('COM_BANNERS_HEADING_CLIENT'),			'impmade' => JText::_('COM_BANNERS_HEADING_IMPRESSIONS'),			'clicks' => JText::_('COM_BANNERS_HEADING_CLICKS'),			'a.language' => JText::_('JGRID_HEADING_LANGUAGE'),			'a.id' => JText::_('JGRID_HEADING_ID')		);	}}
<?php/** * @package     Joomla.Site * @subpackage  mod_stats * * @copyright   Copyright (C) 2005 - 2013 Open Source Matters, Inc. All rights reserved. * @license     GNU General Public License version 2 or later; see LICENSE.txt */defined('_JEXEC') or die;/** * Helper for mod_stats * * @package     Joomla.Site * @subpackage  mod_stats * @since       1.5 */class ModStatsHelper{	public static function &getList(&$params)	{		$app	= JFactory::getApplication();		$db		= JFactory::getDbo();		$rows	= array();		$query	= $db->getQuery(true);		$serverinfo = $params->get('serverinfo');		$siteinfo	= $params->get('siteinfo');		$counter	= $params->get('counter');		$increase	= $params->get('increase');		$i = 0;		if ($serverinfo)		{			$rows[$i] = new stdClass;			$rows[$i]->title	= JText::_('MOD_STATS_OS');			$rows[$i]->data		= substr(php_uname(), 0, 7);			$i++;			$rows[$i] = new stdClass;			$rows[$i]->title	= JText::_('MOD_STATS_PHP');			$rows[$i]->data	= phpversion();			$i++;			$rows[$i] = new stdClass;			$rows[$i]->title	= JText::_('MOD_STATS_MYSQL');			$rows[$i]->data	= $db->getVersion();			$i++;			$rows[$i] = new stdClass;			$rows[$i]->title	= JTEXT::_('MOD_STATS_TIME');			$rows[$i]->data	= JHtml::_('date', 'now', 'H:i');			$i++;			$rows[$i] = new stdClass;			$rows[$i]->title	= JText::_('MOD_STATS_CACHING');			$rows[$i]->data	= $app->getCfg('caching') ? JText::_('JENABLED'):JText::_('JDISABLED');			$i++;			$rows[$i] = new stdClass;			$rows[$i]->title	= JText::_('MOD_STATS_GZIP');			$rows[$i]->data	= $app->getCfg('gzip') ? JText::_('JENABLED'):JText::_('JDISABLED');			$i++;		}		if ($siteinfo)		{			$query->select('COUNT(id) AS count_users')				->from('#__users');			$db->setQuery($query);			$users = $db->loadResult();			$query->clear()				->select('COUNT(id) AS count_items')				->from('#__content')				->where('state = 1');			$db->setQuery($query);			$items = $db->loadResult();			$query->clear()				->select('COUNT(id) AS count_links ')				->from('#__weblinks')				->where('state = 1');			$db->setQuery($query);			$links = $db->loadResult();			if ($users)			{				$rows[$i] = new stdClass;				$rows[$i]->title	= JText::_('MOD_STATS_USERS');				$rows[$i]->data	= $users;				$i++;			}			if ($items)			{				$rows[$i] = new stdClass;				$rows[$i]->title	= JText::_('MOD_STATS_ARTICLES');				$rows[$i]->data	= $items;				$i++;			}			if ($links)			{				$rows[$i] = new stdClass;				$rows[$i]->title	= JText::_('MOD_STATS_WEBLINKS');				$rows[$i]->data	= $links;				$i++;			}		}		if ($counter)		{			$query->clear()				->select('SUM(hits) AS count_hits')				->from('#__content')				->where('state = 1');			$db->setQuery($query);			$hits = $db->loadResult();			if ($hits)			{				$rows[$i] = new stdClass;				$rows[$i]->title	= JText::_('MOD_STATS_ARTICLES_VIEW_HITS');				$rows[$i]->data	= $hits + $increase;				$i++;			}		}		return $rows;	}}
<?php/** * @package     Joomla.Platform * @subpackage  Form * * @copyright   Copyright (C) 2005 - 2013 Open Source Matters, Inc. All rights reserved. * @license     GNU General Public License version 2 or later; see LICENSE */defined('JPATH_PLATFORM') or die;JFormHelper::loadFieldClass('list');/** * Form Field class for the Joomla Framework. * * @package     Joomla.Platform * @subpackage  Form * @since       11.4 */class JFormFieldPlugins extends JFormFieldList{	/**	 * The field type.	 *	 * @var    string	 * @since  11.4	 */	protected $type = 'Plugins';	/**	 * Method to get a list of options for a list input.	 *	 * @return	array		An array of JHtml options.	 *	 * @since   11.4	 */	protected function getOptions()	{		$folder	= $this->element['folder'];		if (!empty($folder))		{			// Get list of plugins			$db     = JFactory::getDbo();			$query  = $db->getQuery(true)				->select('element AS value, name AS text')				->from('#__extensions')				->where('folder = ' . $db->quote($folder))				->where('enabled = 1')				->order('ordering, name');			$db->setQuery($query);			$options = $db->loadObjectList();			$lang = JFactory::getLanguage();			foreach ($options as $i => $item)			{				$source = JPATH_PLUGINS . '/' . $folder . '/' . $item->value;				$extension = 'plg_' . $folder . '_' . $item->value;					$lang->load($extension . '.sys', JPATH_ADMINISTRATOR, null, false, false)				||	$lang->load($extension . '.sys', $source, null, false, false)				||	$lang->load($extension . '.sys', JPATH_ADMINISTRATOR, $lang->getDefault(), false, false)				||	$lang->load($extension . '.sys', $source, $lang->getDefault(), false, false);				$options[$i]->text = JText::_($item->text);			}		}		else		{			JLog::add(JText::_('JFRAMEWORK_FORM_FIELDS_PLUGINS_ERROR_FOLDER_EMPTY'), JLog::WARNING, 'jerror');		}		// Merge any additional options in the XML definition.		$options = array_merge(parent::getOptions(), $options);		return $options;	}}
<?php/** * @package     Joomla.Site * @subpackage  com_contact * * @copyright   Copyright (C) 2005 - 2013 Open Source Matters, Inc. All rights reserved. * @license     GNU General Public License version 2 or later; see LICENSE.txt */defined('_JEXEC') or die;require_once JPATH_COMPONENT.'/models/category.php';/** * HTML Contact View class for the Contact component * * @package     Joomla.Site * @subpackage  com_contact * @since       1.5 */class ContactViewContact extends JViewLegacy{	protected $state;	protected $form;	protected $item;	protected $return_page;	public function display($tpl = null)	{		$app		= JFactory::getApplication();		$user		= JFactory::getUser();		$dispatcher = JEventDispatcher::getInstance();		$state		= $this->get('State');		$item		= $this->get('Item');		$this->form	= $this->get('Form');		// Get the parameters		$params = JComponentHelper::getParams('com_contact');		if ($item)		{			// If we found an item, merge the item parameters			$params->merge($item->params);			// Get Category Model data			$categoryModel = JModelLegacy::getInstance('Category', 'ContactModel', array('ignore_request' => true));			$categoryModel->setState('category.id', $item->catid);			$categoryModel->setState('list.ordering', 'a.name');			$categoryModel->setState('list.direction', 'asc');			$categoryModel->setState('filter.published', 1);			$contacts = $categoryModel->getItems();		}		// Check for errors.		if (count($errors = $this->get('Errors')))		{			JError::raiseWarning(500, implode("\n", $errors));			return false;		}		// check if access is not public		$groups	= $user->getAuthorisedViewLevels();		$return = '';		if ((!in_array($item->access, $groups)) || (!in_array($item->category_access, $groups)))		{			JError::raiseWarning(403, JText::_('JERROR_ALERTNOAUTHOR'));			return;		}		$options['category_id']	= $item->catid;		$options['order by']	= 'a.default_con DESC, a.ordering ASC';		// Handle email cloaking		if ($item->email_to && $params->get('show_email'))		{			$item->email_to = JHtml::_('email.cloak', $item->email_to);		}			if ($params->get('show_street_address') || $params->get('show_suburb') || $params->get('show_state') || $params->get('show_postcode') || $params->get('show_country'))			{				if (!empty ($item->address) || !empty ($item->suburb) || !empty ($item->state) || !empty ($item->country) || !empty ($item->postcode))				{				$params->set('address_check', 1);			}		}		else		{			$params->set('address_check', 0);		}		// Manage the display mode for contact detail groups		switch ($params->get('contact_icons'))		{			case 1 :				// text				$params->set('marker_address',   JText::_('COM_CONTACT_ADDRESS') . ": ");				$params->set('marker_email',     JText::_('JGLOBAL_EMAIL') . ": ");				$params->set('marker_telephone', JText::_('COM_CONTACT_TELEPHONE') . ": ");				$params->set('marker_fax',       JText::_('COM_CONTACT_FAX') . ": ");				$params->set('marker_mobile',    JText::_('COM_CONTACT_MOBILE') . ": ");				$params->set('marker_misc',      JText::_('COM_CONTACT_OTHER_INFORMATION') . ": ");				$params->set('marker_class',     'jicons-text');				break;			case 2 :				// none				$params->set('marker_address',   '');				$params->set('marker_email',     '');				$params->set('marker_telephone', '');				$params->set('marker_mobile',    '');				$params->set('marker_fax',       '');				$params->set('marker_misc',      '');				$params->set('marker_class',     'jicons-none');				break;			default :				// icons				$image1 = JHtml::_('image', 'contacts/'.$params->get('icon_address', 'con_address.png'), JText::_('COM_CONTACT_ADDRESS').": ", null, true);				$image2 = JHtml::_('image', 'contacts/'.$params->get('icon_email', 'emailButton.png'), JText::_('JGLOBAL_EMAIL').": ", null, true);				$image3 = JHtml::_('image', 'contacts/'.$params->get('icon_telephone', 'con_tel.png'), JText::_('COM_CONTACT_TELEPHONE').": ", null, true);				$image4 = JHtml::_('image', 'contacts/'.$params->get('icon_fax', 'con_fax.png'), JText::_('COM_CONTACT_FAX').": ", null, true);				$image5 = JHtml::_('image', 'contacts/'.$params->get('icon_misc', 'con_info.png'), JText::_('COM_CONTACT_OTHER_INFORMATION').": ", null, true);				$image6 = JHtml::_('image', 'contacts/'.$params->get('icon_mobile', 'con_mobile.png'), JText::_('COM_CONTACT_MOBILE').": ", null, true);				$params->set('marker_address',   $image1);				$params->set('marker_email',     $image2);				$params->set('marker_telephone', $image3);				$params->set('marker_fax',       $image4);				$params->set('marker_misc',      $image5);				$params->set('marker_mobile',    $image6);				$params->set('marker_class',     'jicons-icons');				break;		}		// Add links to contacts		if ($params->get('show_contact_list') && count($contacts) > 1)		{			foreach ($contacts as &$contact)			{				$contact->link = JRoute::_(ContactHelperRoute::getContactRoute($contact->slug, $contact->catid));			}			$item->link = JRoute::_(ContactHelperRoute::getContactRoute($item->slug, $item->catid));		}		JHtml::_('behavior.formvalidation');		//Escape strings for HTML output		$this->pageclass_sfx = htmlspecialchars($params->get('pageclass_sfx'));		$this->contact  = &$item;		$this->params   = &$params;		$this->return   = &$return;		$this->state    = &$state;		$this->item     = &$item;		$this->user     = &$user;		$this->contacts = &$contacts;		$item->tags = new JHelperTags;		$item->tags->getItemTags('com_contact.contact', $this->item->id);		// Override the layout only if this is not the active menu item		// If it is the active menu item, then the view and item id will match		$active	= $app->getMenu()->getActive();		if ((!$active) || ((strpos($active->link, 'view=contact') === false) || (strpos($active->link, '&id=' . (string) $this->item->id) === false)))		{			if ($layout = $params->get('contact_layout'))			{				$this->setLayout($layout);			}		}		elseif (isset($active->query['layout']))		{			// We need to set the layout in case this is an alternative menu item (with an alternative layout)			$this->setLayout($active->query['layout']);		}		$this->_prepareDocument();		parent::display($tpl);	}	/**	 * Prepares the document	 */	protected function _prepareDocument()	{		$app		= JFactory::getApplication();		$menus		= $app->getMenu();		$pathway	= $app->getPathway();		$title 		= null;		// Because the application sets a default page title,		// we need to get it from the menu item itself		$menu = $menus->getActive();		if ($menu)		{			$this->params->def('page_heading', $this->params->get('page_title', $menu->title));		}		else		{			$this->params->def('page_heading', JText::_('COM_CONTACT_DEFAULT_PAGE_TITLE'));		}		$title = $this->params->get('page_title', '');		$id = (int) @$menu->query['id'];		// if the menu item does not concern this contact		if ($menu && ($menu->query['option'] != 'com_contact' || $menu->query['view'] != 'contact' || $id != $this->item->id))		{			// If this is not a single contact menu item, set the page title to the contact title			if ($this->item->name)			{				$title = $this->item->name;			}			$path = array(array('title' => $this->contact->name, 'link' => ''));			$category = JCategories::getInstance('Contact')->get($this->contact->catid);			while ($category && ($menu->query['option'] != 'com_contact' || $menu->query['view'] == 'contact' || $id != $category->id) && $category->id > 1)			{				$path[] = array('title' => $category->title, 'link' => ContactHelperRoute::getCategoryRoute($this->contact->catid));				$category = $category->getParent();			}			$path = array_reverse($path);			foreach ($path as $item)			{				$pathway->addItem($item['title'], $item['link']);			}		}		if (empty($title))		{			$title = $app->getCfg('sitename');		}		elseif ($app->getCfg('sitename_pagetitles', 0) == 1)		{			$title = JText::sprintf('JPAGETITLE', $app->getCfg('sitename'), $title);		}		elseif ($app->getCfg('sitename_pagetitles', 0) == 2)		{			$title = JText::sprintf('JPAGETITLE', $title, $app->getCfg('sitename'));		}		if (empty($title))		{			$title = $this->item->name;		}		$this->document->setTitle($title);		if ($this->item->metadesc)		{			$this->document->setDescription($this->item->metadesc);		}		elseif (!$this->item->metadesc && $this->params->get('menu-meta_description'))		{			$this->document->setDescription($this->params->get('menu-meta_description'));		}		if ($this->item->metakey)		{			$this->document->setMetadata('keywords', $this->item->metakey);		}		elseif (!$this->item->metakey && $this->params->get('menu-meta_keywords'))		{			$this->document->setMetadata('keywords', $this->params->get('menu-meta_keywords'));		}		if ($this->params->get('robots'))		{			$this->document->setMetadata('robots', $this->params->get('robots'));		}		$mdata = $this->item->metadata->toArray();		foreach ($mdata as $k => $v)		{			if ($v)			{				$this->document->setMetadata($k, $v);			}		}	}}
<?php/** * @package     Joomla.Administrator * @subpackage  com_modules * * @copyright   Copyright (C) 2005 - 2013 Open Source Matters, Inc. All rights reserved. * @license     GNU General Public License version 2 or later; see LICENSE.txt */defined('_JEXEC') or die;/** * HTML View class for the Modules component * * @package     Joomla.Administrator * @subpackage  com_modules * @since       1.6 */class ModulesViewSelect extends JViewLegacy{	protected $state;	protected $items;	/**	 * Display the view	 */	public function display($tpl = null)	{		$state		= $this->get('State');		$items		= $this->get('Items');		// Check for errors.		if (count($errors = $this->get('Errors')))		{			JError::raiseError(500, implode("\n", $errors));			return false;		}		$this->state = &$state;		$this->items = &$items;		$this->addToolbar();		parent::display($tpl);	}	/**	 * Add the page title and toolbar.	 *	 * @since   3.0	 */	protected function addToolbar()	{		// Add page title		JToolbarHelper::title(JText::_('COM_MODULES_MANAGER_MODULES'), 'module.png');		// Get the toolbar object instance		$bar = JToolBar::getInstance('toolbar');		// Cancel		$title = JText::_('JTOOLBAR_CANCEL');		$dhtml = "<button onClick=\"location.href='index.php?option=com_modules'\" class=\"btn\">					<i class=\"icon-remove\" title=\"$title\"></i>					$title</button>";		$bar->appendButton('Custom', $dhtml, 'new');	}}
<?php/** * @package     Joomla.Platform * @subpackage  Feed * * @copyright   Copyright (C) 2005 - 2012 Open Source Matters, Inc. All rights reserved. * @license     GNU General Public License version 2 or later; see LICENSE */defined('JPATH_PLATFORM') or die;/** * Feed Person class. * * @package     Joomla.Platform * @subpackage  Feed * @since       12.3 */class JFeedPerson{	/**	 * @var    string	 * @since  12.3	 */	public $email;	/**	 * @var    string	 * @since  12.3	 */	public $name;	/**	 * @var    string	 * @since  12.3	 */	public $type;	/**	 * @var    string	 * @since  12.3	 */	public $uri;	/**	 * Constructor.	 *	 * @param   string  $name   The full name of the person.	 * @param   string  $email  The email address of the person.	 * @param   string  $uri    The URI for the person.	 * @param   string  $type   The type of person.	 *	 * @since   12.3	 */	public function __construct($name = null, $email = null, $uri = null, $type = null)	{		$this->name = $name;		$this->email = $email;		$this->uri = $uri;		$this->type = $type;	}}
<?php/** * @package     Joomla.Platform * @subpackage  Linkedin * * @copyright   Copyright (C) 2005 - 2012 Open Source Matters, Inc. All rights reserved. * @license     GNU General Public License version 2 or later; see LICENSE */defined('JPATH_PLATFORM') or die();/** * Linkedin API People class for the Joomla Platform. * * @package     Joomla.Platform * @subpackage  Linkedin * @since       13.1 */class JLinkedinPeople extends JLinkedinObject{	/**	 * Method to get a member's profile.	 *	 * @param   string  $id        Member id of the profile you want.	 * @param   string  $url       The public profile URL.	 * @param   string  $fields    Request fields beyond the default ones.	 * @param   string  $type      Choosing public or standard profile.	 * @param   string  $language  A comma separated list of locales ordered from highest to lowest preference.	 *	 * @return  array  The decoded JSON response	 *	 * @since   13.1	 */	public function getProfile($id = null, $url = null, $fields = null, $type = 'standard', $language = null)	{		$token = $this->oauth->getToken();		// Set parameters.		$parameters = array(			'oauth_token' => $token['key']		);		// Set the API base		$base = '/v1/people/';		$data['format'] = 'json';		// Check if a member id is specified.		if ($id)		{			$base .= 'id=' . $id;		}		elseif (!$url)		{			$base .= '~';		}		// Check if profile url is specified.		if ($url)		{			$base .= 'url=' . $this->oauth->safeEncode($url);			// Choose public profile			if (!strcmp($type, 'public'))			{				$base .= ':public';			}		}		// Check if fields is specified.		if ($fields)		{			$base .= ':' . $fields;		}		// Check if language is specified.		$header = array();		if ($language)		{			$header = array('Accept-Language' => $language);		}		// Build the request path.		$path = $this->getOption('api.url') . $base;		// Send the request.		$response = $this->oauth->oauthRequest($path, 'GET', $parameters, $data, $header);		return json_decode($response->body);	}	/**	 * Method to get a list of connections for a user who has granted access to his/her account.	 *	 * @param   string   $fields          Request fields beyond the default ones.	 * @param   integer  $start           Starting location within the result set for paginated returns.	 * @param   integer  $count           The number of results returned.	 * @param   string   $modified        Values are updated or new.	 * @param   string   $modified_since  Value as a Unix time stamp of milliseconds since epoch.	 *	 * @return  array  The decoded JSON response	 *	 * @since   13.1	 */	public function getConnections($fields = null, $start = 0, $count = 500, $modified = null, $modified_since = null)	{		$token = $this->oauth->getToken();		// Set parameters.		$parameters = array(			'oauth_token' => $token['key']		);		// Set the API base		$base = '/v1/people/~/connections';		$data['format'] = 'json';		// Check if fields is specified.		if ($fields)		{			$base .= ':' . $fields;		}		// Check if start is specified.		if ($start > 0)		{			$data['start'] = $start;		}		// Check if count is specified.		if ($count != 500)		{			$data['count'] = $count;		}		// Check if modified is specified.		if ($modified)		{			$data['modified'] = $modified;		}		// Check if modified_since is specified.		if ($modified_since)		{			$data['modified-since'] = $modified_since;		}		// Build the request path.		$path = $this->getOption('api.url') . $base;		// Send the request.		$response = $this->oauth->oauthRequest($path, 'GET', $parameters, $data);		return json_decode($response->body);	}	/**	 * Method to get information about people.	 *	 * @param   string   $fields           Request fields beyond the default ones. provide 'api-standard-profile-request'	 * 									   field for out of network profiles.	 * @param   string   $keywords         Members who have all the keywords anywhere in their profile.	 * @param   string   $first_name       Members with a matching first name. Matches must be exact.	 * @param   string   $last_name        Members with a matching last name. Matches must be exactly.	 * @param   string   $company_name     Members who have a matching company name on their profile.	 * @param   boolean  $current_company  A value of true matches members who currently work at the company specified in the company-name	 * 									   parameter.	 * @param   string   $title            Matches members with that title on their profile.	 * @param   boolean  $current_title    A value of true matches members whose title is currently the one specified in the title-name parameter.	 * @param   string   $school_name      Members who have a matching school name on their profile.	 * @param   string   $current_school   A value of true matches members who currently attend the school specified in the school-name parameter.	 * @param   string   $country_code     Matches members with a location in a specific country. Values are defined in by ISO 3166 standard.	 * 									   Country codes must be in all lower case.	 * @param   integer  $postal_code      Matches members centered around a Postal Code. Must be combined with the country-code parameter.	 * 									   Not supported for all countries.	 * @param   integer  $distance         Matches members within a distance from a central point. This is measured in miles.	 * @param   string   $facets           Facet buckets to return, e.g. location.	 * @param   array    $facet            Array of facet values to search over. Contains values for location, industry, network, language,	 * 									   current-company, past-company and school, in exactly this order, null must be specified for an element if no value.	 * @param   integer  $start            Starting location within the result set for paginated returns.	 * @param   integer  $count            The number of results returned.	 * @param   string   $sort             Controls the search result order. There are four options: connections, recommenders,	 * 									   distance and relevance.	 *	 * @return  array  The decoded JSON response	 *	 * @since   13.1	 */	public function search($fields = null, $keywords = null, $first_name = null, $last_name = null, $company_name = null,		$current_company = null, $title = null, $current_title = null, $school_name = null, $current_school = null, $country_code = null,		$postal_code = null, $distance = null, $facets = null, $facet = null, $start = 0, $count = 10, $sort = null)	{		$token = $this->oauth->getToken();		// Set parameters.		$parameters = array(			'oauth_token' => $token['key']		);		// Set the API base		$base = '/v1/people-search';		$data['format'] = 'json';		// Check if fields is specified.		if ($fields)		{			$base .= ':' . $fields;		}		// Check if keywords is specified.		if ($keywords)		{			$data['keywords'] = $keywords;		}		// Check if first_name is specified.		if ($first_name)		{			$data['first-name'] = $first_name;		}		// Check if last_name is specified.		if ($last_name)		{			$data['last-name'] = $last_name;		}		// Check if company-name is specified.		if ($company_name)		{			$data['company-name'] = $company_name;		}		// Check if current_company is specified.		if ($current_company)		{			$data['current-company'] = $current_company;		}		// Check if title is specified.		if ($title)		{			$data['title'] = $title;		}		// Check if current_title is specified.		if ($current_title)		{			$data['current-title'] = $current_title;		}		// Check if school_name is specified.		if ($school_name)		{			$data['school-name'] = $school_name;		}		// Check if current_school is specified.		if ($current_school)		{			$data['current-school'] = $current_school;		}		// Check if country_code is specified.		if ($country_code)		{			$data['country-code'] = $country_code;		}		// Check if postal_code is specified.		if ($postal_code)		{			$data['postal-code'] = $postal_code;		}		// Check if distance is specified.		if ($distance)		{			$data['distance'] = $distance;		}		// Check if facets is specified.		if ($facets)		{			$data['facets'] = $facets;		}		// Check if facet is specified.		if ($facet)		{			$data['facet'] = array();			for ($i = 0; $i < count($facet); $i++)			{				if ($facet[$i])				{					if ($i == 0)					{						$data['facet'][] = 'location,' . $facet[$i];					}					if ($i == 1)					{						$data['facet'][] = 'industry,' . $facet[$i];					}					if ($i == 2)					{						$data['facet'][] = 'network,' . $facet[$i];					}					if ($i == 3)					{						$data['facet'][] = 'language,' . $facet[$i];					}					if ($i == 4)					{						$data['facet'][] = 'current-company,' . $facet[$i];					}					if ($i == 5)					{						$data['facet'][] = 'past-company,' . $facet[$i];					}					if ($i == 6)					{						$data['facet'][] = 'school,' . $facet[$i];					}				}			}		}		// Check if start is specified.		if ($start > 0)		{			$data['start'] = $start;		}		// Check if count is specified.		if ($count != 10)		{			$data['count'] = $count;		}		// Check if sort is specified.		if ($sort)		{			$data['sort'] = $sort;		}		// Build the request path.		$path = $this->getOption('api.url') . $base;		// Send the request.		$response = $this->oauth->oauthRequest($path, 'GET', $parameters, $data);		if (strpos($fields, 'api-standard-profile-request') === false)		{			return json_decode($response->body);		}		// Get header name.		$name = explode('"name": "', $response->body);		$name = explode('"', $name[1]);		$name = $name[0];		// Get header value.		$value = explode('"value": "', $response->body);		$value = explode('"', $value[1]);		$value = $value[0];		// Get request url.		$url = explode('"url": "', $response->body);		$url = explode('"', $url[1]);		$url = $url[0];		// Build header for out of network profile.		$header[$name] = $value;		// Send the request.		$response = $this->oauth->oauthRequest($url, 'GET', $parameters, $data, $header);		return json_decode($response->body);	}}
<?php/** * @package     Joomla.Site * @subpackage  Layout * * @copyright   Copyright (C) 2005 - 2012 Open Source Matters, Inc. All rights reserved. * @license     GNU General Public License version 2 or later; see LICENSE.txt */defined('JPATH_BASE') or die;// Note that this layout opens a div with the page class suffix. If you do not use the category children// layout you need to close this div either by overriding this file or in your main layout.$params  = $displayData->params;$extension = $displayData->get('category')->extension;$canEdit = $params->get('access-edit');$className = substr($extension, 4);// This will work for the core components but not necessarily for other components// that may have different pluralisation rules.if (substr($className, -1) == 's'){	$className = rtrim($className, 's');}$tagsData  = $displayData->get('category')->tags->itemTags;?><div>	<div class="<?php echo $className .'-category' . $displayData->pageclass_sfx;?>">		<?php if ($params->get('show_page_heading')) : ?>			<h1>				<?php echo $displayData->escape($params->get('page_heading')); ?>			</h1>		<?php endif; ?>		<?php if($params->get('show_category_title', 1)) : ?>			<h2>				<?php echo JHtml::_('content.prepare', $displayData->get('category')->title, '', $extension.'.category'); ?>			</h2>		<?php endif; ?>		<?php if ($displayData->get('show_tags', 1)) : ?>			<?php echo JLayoutHelper::render('joomla.content.tags', $tagsData); ?>		<?php endif; ?>		<?php if ($params->get('show_description', 1) || $params->def('show_description_image', 1)) : ?>			<div class="category-desc">				<?php if ($params->get('show_description_image') && $displayData->get('category')->getParams()->get('image')) : ?>					<img src="<?php echo $displayData->get('category')->getParams()->get('image'); ?>"/>				<?php endif; ?>				<?php if ($params->get('show_description') && $displayData->get('category')->description) : ?>					<?php echo JHtml::_('content.prepare', $displayData->get('category')->description, '', $extension .'.category'); ?>				<?php endif; ?>				<div class="clr"></div>			</div>		<?php endif; ?>		<?php echo $displayData->loadTemplate($displayData->subtemplatename); ?>		<?php if ($displayData->get('children') && $displayData->maxLevel != 0) : ?>			<div class="cat-children">				<h3>					<?php echo JTEXT::_('JGLOBAL_SUBCATEGORIES'); ?>				</h3>				<?php echo $displayData->loadTemplate('children'); ?>			</div>		<?php endif; ?>	</div></div>
<?php/** * @package     Joomla.Site * @subpackage  com_users * * @copyright   Copyright (C) 2005 - 2013 Open Source Matters, Inc. All rights reserved. * @license     GNU General Public License version 2 or later; see LICENSE.txt */defined('_JEXEC') or die;JHtml::_('behavior.tooltip');?><div class="profile <?php echo $this->pageclass_sfx?>"><?php if (JFactory::getUser()->id == $this->data->id) : ?><ul class="btn-toolbar pull-right">	<li class="btn-group">		<a class="btn" href="<?php echo JRoute::_('index.php?option=com_users&task=profile.edit&user_id='.(int) $this->data->id);?>">			<span class="icon-user"></span> <?php echo JText::_('COM_USERS_EDIT_PROFILE'); ?></a>	</li></ul><?php endif; ?><?php if ($this->params->get('show_page_heading')) : ?><div class="page-header">	<h1>		<?php echo $this->escape($this->params->get('page_heading')); ?>	</h1></div><?php endif; ?><?php echo $this->loadTemplate('core'); ?><?php echo $this->loadTemplate('params'); ?><?php echo $this->loadTemplate('custom'); ?></div>
<?php/** * @package     Joomla.Administrator * @subpackage  Template.hathor * * @copyright   Copyright (C) 2005 - 2013 Open Source Matters, Inc. All rights reserved. * @license     GNU General Public License version 2 or later; see LICENSE.txt */defined('_JEXEC') or die;// Include the component HTML helpers.JHtml::addIncludePath(JPATH_COMPONENT.'/helpers/html');JHtml::_('behavior.tooltip');JHtml::_('behavior.multiselect');$app		= JFactory::getApplication();$user		= JFactory::getUser();$userId		= $user->get('id');$listOrder	= $this->escape($this->state->get('list.ordering'));$listDirn	= $this->escape($this->state->get('list.direction'));$canOrder	= $user->authorise('core.edit.state', 'com_newsfeeds.category');$saveOrder	= $listOrder == 'a.ordering';$assoc		= isset($app->item_associations) ? $app->item_associations : 0;?><form action="<?php echo JRoute::_('index.php?option=com_newsfeeds&view=newsfeeds'); ?>" method="post" name="adminForm" id="adminForm"><?php if (!empty( $this->sidebar)) : ?>	<div id="j-sidebar-container" class="span2">		<?php echo $this->sidebar; ?>	</div>	<div id="j-main-container" class="span10"><?php else : ?>	<div id="j-main-container"><?php endif;?>	<fieldset id="filter-bar">	<legend class="element-invisible"><?php echo JText::_('JSEARCH_FILTER_LABEL'); ?></legend>		<div class="filter-search">			<label class="filter-search-lbl" for="filter_search"><?php echo JText::_('JSEARCH_FILTER_LABEL'); ?></label>			<input type="text" name="filter_search" id="filter_search" value="<?php echo $this->escape($this->state->get('filter.search')); ?>" title="<?php echo JText::_('COM_NEWSFEEDS_SEARCH_IN_TITLE'); ?>" />			<button type="submit"><?php echo JText::_('JSEARCH_FILTER_SUBMIT'); ?></button>			<button type="button" onclick="document.id('filter_search').value='';this.form.submit();"><?php echo JText::_('JSEARCH_FILTER_CLEAR'); ?></button>		</div>		<div class="filter-select">			<label class="selectlabel" for="filter_published">				<?php echo JText::_('JOPTION_SELECT_PUBLISHED'); ?>			</label>			<select name="filter_published" class="inputbox" id="filter_published">				<option value=""><?php echo JText::_('JOPTION_SELECT_PUBLISHED');?></option>				<?php echo JHtml::_('select.options', JHtml::_('jgrid.publishedOptions'), 'value', 'text', $this->state->get('filter.state'), true);?>			</select>			<label class="selectlabel" for="filter_category_id">				<?php echo JText::_('JOPTION_SELECT_CATEGORY'); ?>			</label>			<select name="filter_category_id" class="inputbox" id="filter_category_id">				<option value=""><?php echo JText::_('JOPTION_SELECT_CATEGORY');?></option>				<?php echo JHtml::_('select.options', JHtml::_('category.options', 'com_newsfeeds'), 'value', 'text', $this->state->get('filter.category_id'));?>			</select>			<label class="selectlabel" for="filter_access">				<?php echo JText::_('JOPTION_SELECT_ACCESS'); ?>			</label>			<select name="filter_access" class="inputbox" id="filter_access">				<option value=""><?php echo JText::_('JOPTION_SELECT_ACCESS');?></option>				<?php echo JHtml::_('select.options', JHtml::_('access.assetgroups'), 'value', 'text', $this->state->get('filter.access'));?>			</select>			<label class="selectlabel" for="filter_language">				<?php echo JText::_('JOPTION_SELECT_LANGUAGE'); ?>			</label>			<select name="filter_language" class="inputbox" id="filter_language">				<option value=""><?php echo JText::_('JOPTION_SELECT_LANGUAGE');?></option>				<?php echo JHtml::_('select.options', JHtml::_('contentlanguage.existing', true, true), 'value', 'text', $this->state->get('filter.language'));?>			</select>			<button type="submit" id="filter-go">				<?php echo JText::_('JSUBMIT'); ?></button>		</div>	</fieldset>	<div class="clr"> </div>	<table class="adminlist">		<thead>			<tr>				<th class="checkmark-col">					<input type="checkbox" name="checkall-toggle" value="" title="<?php echo JText::_('JGLOBAL_CHECK_ALL'); ?>" onclick="Joomla.checkAll(this)" />				</th>				<th class="title">					<?php echo JHtml::_('grid.sort', 'JGLOBAL_TITLE', 'a.name', $listDirn, $listOrder); ?>				</th>				<th class="nowrap state-col">					<?php echo JHtml::_('grid.sort', 'JSTATUS', 'a.published', $listDirn, $listOrder); ?>				</th>				<th class="nowrap title category-col">					<?php echo JHtml::_('grid.sort', 'JCATEGORY', 'category_title', $listDirn, $listOrder); ?>				</th>				<th class="nowrap ordering-col">					<?php echo JHtml::_('grid.sort', 'JGRID_HEADING_ORDERING', 'a.ordering', $listDirn, $listOrder); ?>					<?php if ($canOrder && $saveOrder) :?>						<?php echo JHtml::_('grid.order', $this->items, 'filesave.png', 'newsfeeds.saveorder'); ?>					<?php endif; ?>				</th>				<th class="title access-col">					<?php echo JHtml::_('grid.sort', 'JGRID_HEADING_ACCESS', 'a.access', $listDirn, $listOrder); ?>				</th>				<th class="width-10">					<?php echo JHtml::_('grid.sort', 'COM_NEWSFEEDS_NUM_ARTICLES_HEADING', 'numarticles', $listDirn, $listOrder); ?>				</th>				<th class="width-5">					<?php echo JHtml::_('grid.sort', 'COM_NEWSFEEDS_CACHE_TIME_HEADING', 'a.cache_time', $listDirn, $listOrder); ?>				</th>				<?php if ($assoc) : ?>					<th class="width-5">						<?php echo JHtml::_('grid.sort', 'COM_NEWSFEEDS_HEADING_ASSOCIATION', 'association', $listDirn, $listOrder); ?>					</th>				<?php endif;?>				<th class="width-5">					<?php echo JHtml::_('grid.sort', 'JGRID_HEADING_LANGUAGE', 'a.language', $listDirn, $listOrder); ?>				</th>				<th class="nowrap id-col">					<?php echo JHtml::_('grid.sort', 'JGRID_HEADING_ID', 'a.id', $listDirn, $listOrder); ?>				</th>			</tr>		</thead>		<tbody>		<?php foreach ($this->items as $i => $item) :			$ordering   = ($listOrder == 'a.ordering');			$canCreate  = $user->authorise('core.create',     'com_newsfeeds.category.' . $item->catid);			$canEdit    = $user->authorise('core.edit',       'com_newsfeeds.category.' . $item->catid);			$canCheckin = $user->authorise('core.manage',     'com_checkin') || $item->checked_out == $user->get('id') || $item->checked_out == 0;			$canChange  = $user->authorise('core.edit.state', 'com_newsfeeds.category.' . $item->catid) && $canCheckin;			?>			<tr class="row<?php echo $i % 2; ?>">				<th class="center">					<?php echo JHtml::_('grid.id', $i, $item->id); ?>				</th>				<td>					<?php if ($item->checked_out) : ?>						<?php echo JHtml::_('jgrid.checkedout', $i, $item->editor, $item->checked_out_time, 'newsfeeds.', $canCheckin); ?>					<?php endif; ?>					<?php if ($canEdit) : ?>						<a href="<?php echo JRoute::_('index.php?option=com_newsfeeds&task=newsfeed.edit&id='.(int) $item->id); ?>">							<?php echo $this->escape($item->name); ?></a>					<?php else : ?>							<?php echo $this->escape($item->name); ?>					<?php endif; ?>					<p class="smallsub">						<?php echo JText::sprintf('JGLOBAL_LIST_ALIAS', $this->escape($item->alias));?></p>				</td>				<td class="center">					<?php echo JHtml::_('jgrid.published', $item->published, $i, 'newsfeeds.', $canChange, 'cb', $item->publish_up, $item->publish_down); ?>				</td>				<td class="center">					<?php echo $this->escape($item->category_title); ?>				</td>				<td class="order">					<?php if ($canChange) : ?>						<?php if ($saveOrder) :?>							<?php if ($listDirn == 'asc') : ?>								<span><?php echo $this->pagination->orderUpIcon($i, ($item->catid == @$this->items[$i - 1]->catid), 'newsfeeds.orderup', 'JLIB_HTML_MOVE_UP', $ordering); ?></span>								<span><?php echo $this->pagination->orderDownIcon($i, $this->pagination->total, ($item->catid == @$this->items[$i + 1]->catid), 'newsfeeds.orderdown', 'JLIB_HTML_MOVE_DOWN', $ordering); ?></span>							<?php elseif ($listDirn == 'desc') : ?>								<span><?php echo $this->pagination->orderUpIcon($i, ($item->catid == @$this->items[$i - 1]->catid), 'newsfeeds.orderdown', 'JLIB_HTML_MOVE_UP', $ordering); ?></span>								<span><?php echo $this->pagination->orderDownIcon($i, $this->pagination->total, ($item->catid == @$this->items[$i + 1]->catid), 'newsfeeds.orderup', 'JLIB_HTML_MOVE_DOWN', $ordering); ?></span>							<?php endif; ?>						<?php endif; ?>						<?php $disabled = $saveOrder ?  '' : 'disabled="disabled"'; ?>						<input type="text" name="order[]" size="5" value="<?php echo $item->ordering;?>" <?php echo $disabled ?> class="text-area-order" title="<?php echo $item->name; ?> order" />					<?php else : ?>						<?php echo $item->ordering; ?>					<?php endif; ?>				</td>				<td class="center">					<?php echo $this->escape($item->access_level); ?>				</td>				<td class="center">					<?php echo (int) $item->numarticles; ?>				</td>				<td class="center">					<?php echo (int) $item->cache_time; ?>				</td>				<?php if ($assoc) : ?>					<td class="center">						<?php if ($item->association) : ?>							<?php echo JHtml::_('newsfeed.association', $item->id); ?>						<?php endif; ?>					</td>				<?php endif;?>				<td class="center">					<?php if ($item->language == '*'):?>						<?php echo JText::alt('JALL', 'language'); ?>					<?php else:?>						<?php echo $item->language_title ? $this->escape($item->language_title) : JText::_('JUNDEFINED'); ?>					<?php endif;?>				</td>				<td class="center">					<?php echo (int) $item->id; ?>				</td>			</tr>			<?php endforeach; ?>		</tbody>	</table>	<?php //Load the batch processing form. ?>	<?php echo $this->loadTemplate('batch'); ?>	<?php echo $this->pagination->getListFooter(); ?>	<input type="hidden" name="task" value="" />	<input type="hidden" name="boxchecked" value="0" />	<input type="hidden" name="filter_order" value="<?php echo $listOrder; ?>" />	<input type="hidden" name="filter_order_Dir" value="<?php echo $listDirn; ?>" />	<?php echo JHtml::_('form.token'); ?></div></form>
