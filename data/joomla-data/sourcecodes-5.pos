<?php/** * @package     Joomla.Platform * @subpackage  Table * * @copyright   Copyright (C) 2005 - 2013 Open Source Matters, Inc. All rights reserved. * @license     GNU General Public License version 2 or later; see LICENSE */defined('JPATH_PLATFORM') or die;/** * Viewlevels table class. * * @package     Joomla.Platform * @subpackage  Table * @since       11.1 */class JTableViewlevel extends JTable{	/**	 * Constructor	 *	 * @param   JDatabaseDriver  $db  Database driver object.	 *	 * @since   11.1	 */	public function __construct($db)	{		parent::__construct('#__viewlevels', 'id', $db);	}	/**	 * Method to bind the data.	 *	 * @param   array  $array   The data to bind.	 * @param   mixed  $ignore  An array or space separated list of fields to ignore.	 *	 * @return  boolean  True on success, false on failure.	 *	 * @since   11.1	 */	public function bind($array, $ignore = '')	{		// Bind the rules as appropriate.		if (isset($array['rules']))		{			if (is_array($array['rules']))			{				$array['rules'] = json_encode($array['rules']);			}		}		return parent::bind($array, $ignore);	}	/**	 * Method to check the current record to save	 *	 * @return  boolean  True on success	 *	 * @since   11.1	 */	public function check()	{		// Validate the title.		if ((trim($this->title)) == '')		{			$this->setError(JText::_('JLIB_DATABASE_ERROR_VIEWLEVEL'));			return false;		}		return true;	}}
<?php/** * @package     Joomla.Installation * @subpackage  Controller * * @copyright   Copyright (C) 2005 - 2013 Open Source Matters, Inc. All rights reserved. * @license     GNU General Public License version 2 or later; see LICENSE.txt */defined('_JEXEC') or die;jimport('joomla.filesystem.folder');/** * Controller class to set the FTP data for the Joomla Installer. * * @package     Joomla.Installation * @subpackage  Controller * @since       3.1 */class InstallationControllerRemovefolder extends JControllerBase{	/**	 * Execute the controller.	 *	 * @return  void	 *	 * @since   3.1	 */	public function execute()	{		// Get the application		/* @var InstallationApplicationWeb $app */		$app = $this->getApplication();		// Check for request forgeries.		JSession::checkToken() or $app->sendJsonResponse(new Exception(JText::_('JINVALID_TOKEN'), 403));		$path = JPATH_INSTALLATION;		// Check whether the folder still exists		if (!file_exists($path))		{			$app->sendJsonResponse(new Exception(JText::sprintf('INSTL_COMPLETE_ERROR_FOLDER_ALREADY_REMOVED'), 500));		}		// Check whether we need to use FTP		$useFTP = false;		if ((file_exists($path) && !is_writable($path)))		{			$useFTP = true;		}		// Check for safe mode		if (ini_get('safe_mode'))		{			$useFTP = true;		}		// Enable/Disable override		if (!isset($options->ftpEnable) || ($options->ftpEnable != 1))		{			$useFTP = false;		}		if ($useFTP == true)		{			// Connect the FTP client			jimport('joomla.filesystem.path');			$ftp = JClientFtp::getInstance($options->ftp_host, $options->ftp_port);			$ftp->login($options->ftp_user, $options->ftp_pass);			// Translate path for the FTP account			$file = JPath::clean(str_replace(JPATH_CONFIGURATION, $options->ftp_root, $path), '/');			$return = $ftp->delete($file);			// Delete the extra XML file while we're at it			if ($return)			{				$file = JPath::clean($options->ftp_root . '/joomla.xml');				if (file_exists($file))				{					$return = $ftp->delete($file);				}			}			// Rename the robots.txt.dist file to robots.txt			if ($return)			{				$robotsFile = JPath::clean($options->ftp_root . '/robots.txt');				$distFile = JPath::clean($options->ftp_root . '/robots.txt.dist');				if (!file_exists($robotsFile) && file_exists($distFile))				{					$return = $ftp->rename($distFile, $robotsFile);				}			}			$ftp->quit();		}		else		{			/*			 * Try to delete the folder.			 * We use output buffering so that any error message echoed JFolder::delete			 * doesn't land in our JSON output.			 */			ob_start();			$return = JFolder::delete($path) && (!file_exists(JPATH_ROOT . '/joomla.xml') || JFile::delete(JPATH_ROOT . '/joomla.xml'));			// Rename the robots.txt.dist file if robots.txt doesn't exist			if ($return && !file_exists(JPATH_ROOT . '/robots.txt') && file_exists(JPATH_ROOT . '/robots.txt.dist'))			{				$return = JFile::move(JPATH_ROOT . '/robots.txt.dist', JPATH_ROOT . '/robots.txt');			}			ob_end_clean();		}		// If an error was encountered return an error.		if (!$return)		{			$app->sendJsonResponse(new Exception(JText::_('INSTL_COMPLETE_ERROR_FOLDER_DELETE'), 500));		}		// Create a response body.		$r = new stdClass;		$r->text = JText::_('INSTL_COMPLETE_FOLDER_REMOVED');		/*		 * Send the response		 * This is a hack since by now, the rest of the folder is deleted and we can't make a new request		 */		$this->sendJsonResponse($r);	}	/**	 * Method to send a JSON response. The data parameter	 * can be a Exception object for when an error has occurred or	 * a stdClass for a good response.	 *	 * @param   mixed  $response  stdClass on success, Exception on failure.	 *	 * @return  void	 *	 * @since   3.1	 */	public function sendJsonResponse($response)	{		// Check if we need to send an error code.		if ($response instanceof Exception)		{			// Send the appropriate error code response.			$this->setHeader('status', $response->getCode());			$this->setHeader('Content-Type', 'application/json; charset=utf-8');			$this->sendHeaders();		}		// Send the JSON response.		JLoader::register('InstallationResponseJson', __FILE__);		echo json_encode(new InstallationResponseJson($response));		// Close the application.		exit;	}}/** * JSON Response class for the Joomla Installer. * * @package     Joomla.Installation * @subpackage  Response * @since       3.1 */class InstallationResponseJson{	/**	 * Constructor for the JSON response	 *	 * @param   mixed  $data  Exception if there is an error, otherwise, the session data	 *	 * @since   3.1	 */	public function __construct($data)	{		// The old token is invalid so send a new one.		$this->token = JSession::getFormToken(true);		// Get the language and send it's tag along		$this->lang = JFactory::getLanguage()->getTag();		// Get the message queue		$messages = JFactory::getApplication()->getMessageQueue();		// Build the sorted message list		if (is_array($messages) && count($messages))		{			foreach ($messages as $msg)			{				if (isset($msg['type']) && isset($msg['message']))				{					$lists[$msg['type']][] = $msg['message'];				}			}		}		// If messages exist add them to the output		if (isset($lists) && is_array($lists))		{			$this->messages = $lists;		}		// Check if we are dealing with an error.		if ($data instanceof Exception)		{			// Prepare the error response.			$this->error   = true;			$this->header  = JText::_('INSTL_HEADER_ERROR');			$this->message = $data->getMessage();		}		else		{			// Prepare the response data.			$this->error = false;			$this->data  = $data;		}	}}
<?php/** * @package     Joomla.Site * @subpackage  com_content * * @copyright   Copyright (C) 2005 - 2013 Open Source Matters, Inc. All rights reserved. * @license     GNU General Public License version 2 or later; see LICENSE.txt */defined('_JEXEC') or die;?><ol class="nav nav-tabs nav-stacked"><?php foreach ($this->link_items as &$item) : ?>	<li>		<a href="<?php echo JRoute::_(ContentHelperRoute::getArticleRoute($item->slug, $item->catslug)); ?>">			<?php echo $item->title; ?></a>	</li><?php endforeach; ?></ol>
<?php/** * @package     Joomla.Administrator * @subpackage  com_content * * @copyright   Copyright (C) 2005 - 2013 Open Source Matters, Inc. All rights reserved. * @license     GNU General Public License version 2 or later; see LICENSE.txt */defined('_JEXEC') or die;$fields = $this->form->getFieldset('item_associations');?><fieldset>	<?php foreach ($fields as $field) : ?>		<div class="control-group">			<div class="control-label">				<?php echo $field->label ?>			</div>			<div class="controls">				<?php echo $field->input; ?>			</div>		</div>	<?php endforeach; ?></fieldset>
<?php/** * @package     Joomla.Administrator * @subpackage  Template.hathor * * @copyright   Copyright (C) 2005 - 2013 Open Source Matters, Inc. All rights reserved. * @license     GNU General Public License version 2 or later; see LICENSE.txt */defined('_JEXEC') or die;?><fieldset class="adminform">	<legend><?php echo JText::_('COM_ADMIN_RELEVANT_PHP_SETTINGS'); ?></legend>	<table class="adminlist">		<thead>			<tr>				<th width="250">					<?php echo JText::_('COM_ADMIN_SETTING'); ?>				</th>				<th>					<?php echo JText::_('COM_ADMIN_VALUE'); ?>				</th>			</tr>		</thead>		<tfoot>			<tr>				<td colspan="2">&#160;				</td>			</tr>		</tfoot>		<tbody>			<tr>				<td>					<?php echo JText::_('COM_ADMIN_SAFE_MODE'); ?>				</td>				<td>					<?php echo JHtml::_('phpsetting.boolean', $this->php_settings['safe_mode']); ?>				</td>			</tr>			<tr>				<td>					<?php echo JText::_('COM_ADMIN_OPEN_BASEDIR'); ?>				</td>				<td>					<?php echo JHtml::_('phpsetting.string', $this->php_settings['open_basedir']); ?>				</td>			</tr>			<tr>				<td>					<?php echo JText::_('COM_ADMIN_DISPLAY_ERRORS'); ?>				</td>				<td>					<?php echo JHtml::_('phpsetting.boolean', $this->php_settings['display_errors']); ?>				</td>			</tr>			<tr>				<td>					<?php echo JText::_('COM_ADMIN_SHORT_OPEN_TAGS'); ?>				</td>				<td>					<?php echo JHtml::_('phpsetting.boolean', $this->php_settings['short_open_tag']); ?>				</td>			</tr>			<tr>				<td>					<?php echo JText::_('COM_ADMIN_FILE_UPLOADS'); ?>				</td>				<td>					<?php echo JHtml::_('phpsetting.boolean', $this->php_settings['file_uploads']); ?>				</td>			</tr>			<tr>				<td>					<?php echo JText::_('COM_ADMIN_MAGIC_QUOTES'); ?>				</td>				<td>					<?php echo JHtml::_('phpsetting.boolean', $this->php_settings['magic_quotes_gpc']); ?>				</td>			</tr>			<tr>				<td>					<?php echo JText::_('COM_ADMIN_REGISTER_GLOBALS'); ?>				</td>				<td>					<?php echo JHtml::_('phpsetting.boolean', $this->php_settings['register_globals']); ?>				</td>			</tr>			<tr>				<td>					<?php echo JText::_('COM_ADMIN_OUTPUT_BUFFERING'); ?>				</td>				<td>					<?php echo JHtml::_('phpsetting.boolean', $this->php_settings['output_buffering']); ?>				</td>			</tr>			<tr>				<td>					<?php echo JText::_('COM_ADMIN_SESSION_SAVE_PATH'); ?>				</td>				<td>					<?php echo JHtml::_('phpsetting.string', $this->php_settings['session.save_path']); ?>				</td>			</tr>			<tr>				<td>					<?php echo JText::_('COM_ADMIN_SESSION_AUTO_START'); ?>				</td>				<td>					<?php echo JHtml::_('phpsetting.integer', $this->php_settings['session.auto_start']); ?>				</td>			</tr>			<tr>				<td>					<?php echo JText::_('COM_ADMIN_XML_ENABLED'); ?>				</td>				<td>					<?php echo JHtml::_('phpsetting.set', $this->php_settings['xml']); ?>				</td>			</tr>			<tr>				<td>					<?php echo JText::_('COM_ADMIN_ZLIB_ENABLED'); ?>				</td>				<td>					<?php echo JHtml::_('phpsetting.set', $this->php_settings['zlib']); ?>				</td>			</tr>			<tr>				<td>					<?php echo JText::_('COM_ADMIN_ZIP_ENABLED'); ?>				</td>				<td>					<?php echo JHtml::_('phpsetting.set', $this->php_settings['zip']); ?>				</td>			</tr>			<tr>				<td>					<?php echo JText::_('COM_ADMIN_DISABLED_FUNCTIONS'); ?>				</td>				<td>					<?php echo JHtml::_('phpsetting.string', $this->php_settings['disable_functions']); ?>				</td>			</tr>			<tr>				<td>					<?php echo JText::_('COM_ADMIN_MBSTRING_ENABLED'); ?>				</td>				<td>					<?php echo JHtml::_('phpsetting.set', $this->php_settings['mbstring']); ?>				</td>			</tr>			<tr>				<td>					<?php echo JText::_('COM_ADMIN_ICONV_AVAILABLE'); ?>				</td>				<td>					<?php echo JHtml::_('phpsetting.set', $this->php_settings['iconv']); ?>				</td>			</tr>		</tbody>	</table></fieldset>
<?php/** * @package     Joomla.Site * @subpackage  Layout * * @copyright   Copyright (C) 2005 - 2013 Open Source Matters, Inc. All rights reserved. * @license     GNU General Public License version 2 or later; see LICENSE.txt */defined('_JEXEC') or die;?></div>
<?php/** * @package     Joomla.Administrator * @subpackage  com_config * * @copyright   Copyright (C) 2005 - 2013 Open Source Matters, Inc. All rights reserved. * @license     GNU General Public License version 2 or later; see LICENSE.txt */defined('_JEXEC') or die;?><div class="width-80">	<fieldset class="adminform">		<legend><?php echo JText::_('COM_CONFIG_TEXT_FILTER_SETTINGS'); ?></legend>		<p><?php echo JText::_('COM_CONFIG_TEXT_FILTERS_DESC'); ?></p>		<?php foreach ($this->form->getFieldset('filters') as $field) : ?>			<?php echo $field->label; ?>			<div class="clr"> </div>			<?php echo $field->input; ?>		<?php endforeach; ?>	</fieldset></div>
<?php/*** @version $Id$* Tools for locating / replacing bad bytes in UTF-8 strings* The Original Code is Mozilla Communicator client code.* The Initial Developer of the Original Code is* Netscape Communications Corporation.* Portions created by the Initial Developer are Copyright (C) 1998* the Initial Developer. All Rights Reserved.* Ported to PHP by Henri Sivonen (http://hsivonen.iki.fi)* Slight modifications to fit with phputf8 library by Harry Fuecks (hfuecks gmail com)* @see http://lxr.mozilla.org/seamonkey/source/intl/uconv/src/nsUTF8ToUnicode.cpp* @see http://lxr.mozilla.org/seamonkey/source/intl/uconv/src/nsUnicodeToUTF8.cpp* @see http://hsivonen.iki.fi/php-utf8/* @package utf8* @subpackage bad* @see utf8_is_valid*///--------------------------------------------------------------------/*** Locates the first bad byte in a UTF-8 string returning it's* byte index in the string* PCRE Pattern to locate bad bytes in a UTF-8 string* Comes from W3 FAQ: Multilingual Forms* Note: modified to include full ASCII range including control chars* @see http://www.w3.org/International/questions/qa-forms-utf-8* @param string* @return mixed integer byte index or FALSE if no bad found* @package utf8* @subpackage bad*/function utf8_bad_find($str) {    $UTF8_BAD =    '([\x00-\x7F]'.                          # ASCII (including control chars)    '|[\xC2-\xDF][\x80-\xBF]'.               # non-overlong 2-byte    '|\xE0[\xA0-\xBF][\x80-\xBF]'.           # excluding overlongs    '|[\xE1-\xEC\xEE\xEF][\x80-\xBF]{2}'.    # straight 3-byte    '|\xED[\x80-\x9F][\x80-\xBF]'.           # excluding surrogates    '|\xF0[\x90-\xBF][\x80-\xBF]{2}'.        # planes 1-3    '|[\xF1-\xF3][\x80-\xBF]{3}'.            # planes 4-15    '|\xF4[\x80-\x8F][\x80-\xBF]{2}'.        # plane 16    '|(.{1}))';                              # invalid byte    $pos = 0;    $badList = array();    while (preg_match('/'.$UTF8_BAD.'/S', $str, $matches)) {        $bytes = strlen($matches[0]);        if ( isset($matches[2])) {            return $pos;        }        $pos += $bytes;        $str = substr($str,$bytes);    }    return FALSE;}//--------------------------------------------------------------------/*** Locates all bad bytes in a UTF-8 string and returns a list of their* byte index in the string* PCRE Pattern to locate bad bytes in a UTF-8 string* Comes from W3 FAQ: Multilingual Forms* Note: modified to include full ASCII range including control chars* @see http://www.w3.org/International/questions/qa-forms-utf-8* @param string* @return mixed array of integers or FALSE if no bad found* @package utf8* @subpackage bad*/function utf8_bad_findall($str) {    $UTF8_BAD =    '([\x00-\x7F]'.                          # ASCII (including control chars)    '|[\xC2-\xDF][\x80-\xBF]'.               # non-overlong 2-byte    '|\xE0[\xA0-\xBF][\x80-\xBF]'.           # excluding overlongs    '|[\xE1-\xEC\xEE\xEF][\x80-\xBF]{2}'.    # straight 3-byte    '|\xED[\x80-\x9F][\x80-\xBF]'.           # excluding surrogates    '|\xF0[\x90-\xBF][\x80-\xBF]{2}'.        # planes 1-3    '|[\xF1-\xF3][\x80-\xBF]{3}'.            # planes 4-15    '|\xF4[\x80-\x8F][\x80-\xBF]{2}'.        # plane 16    '|(.{1}))';                              # invalid byte    $pos = 0;    $badList = array();    while (preg_match('/'.$UTF8_BAD.'/S', $str, $matches)) {        $bytes = strlen($matches[0]);        if ( isset($matches[2])) {            $badList[] = $pos;        }        $pos += $bytes;        $str = substr($str,$bytes);    }    if ( count($badList) > 0 ) {        return $badList;    }    return FALSE;}//--------------------------------------------------------------------/*** Strips out any bad bytes from a UTF-8 string and returns the rest* PCRE Pattern to locate bad bytes in a UTF-8 string* Comes from W3 FAQ: Multilingual Forms* Note: modified to include full ASCII range including control chars* @see http://www.w3.org/International/questions/qa-forms-utf-8* @param string* @return string* @package utf8* @subpackage bad*/function utf8_bad_strip($str) {    $UTF8_BAD =    '([\x00-\x7F]'.                          # ASCII (including control chars)    '|[\xC2-\xDF][\x80-\xBF]'.               # non-overlong 2-byte    '|\xE0[\xA0-\xBF][\x80-\xBF]'.           # excluding overlongs    '|[\xE1-\xEC\xEE\xEF][\x80-\xBF]{2}'.    # straight 3-byte    '|\xED[\x80-\x9F][\x80-\xBF]'.           # excluding surrogates    '|\xF0[\x90-\xBF][\x80-\xBF]{2}'.        # planes 1-3    '|[\xF1-\xF3][\x80-\xBF]{3}'.            # planes 4-15    '|\xF4[\x80-\x8F][\x80-\xBF]{2}'.        # plane 16    '|(.{1}))';                              # invalid byte    ob_start();    while (preg_match('/'.$UTF8_BAD.'/S', $str, $matches)) {        if ( !isset($matches[2])) {            echo $matches[0];        }        $str = substr($str,strlen($matches[0]));    }    $result = ob_get_contents();    ob_end_clean();    return $result;}//--------------------------------------------------------------------/*** Replace bad bytes with an alternative character - ASCII character* recommended is replacement char* PCRE Pattern to locate bad bytes in a UTF-8 string* Comes from W3 FAQ: Multilingual Forms* Note: modified to include full ASCII range including control chars* @see http://www.w3.org/International/questions/qa-forms-utf-8* @param string to search* @param string to replace bad bytes with (defaults to '?') - use ASCII* @return string* @package utf8* @subpackage bad*/function utf8_bad_replace($str, $replace = '?') {    $UTF8_BAD =    '([\x00-\x7F]'.                          # ASCII (including control chars)    '|[\xC2-\xDF][\x80-\xBF]'.               # non-overlong 2-byte    '|\xE0[\xA0-\xBF][\x80-\xBF]'.           # excluding overlongs    '|[\xE1-\xEC\xEE\xEF][\x80-\xBF]{2}'.    # straight 3-byte    '|\xED[\x80-\x9F][\x80-\xBF]'.           # excluding surrogates    '|\xF0[\x90-\xBF][\x80-\xBF]{2}'.        # planes 1-3    '|[\xF1-\xF3][\x80-\xBF]{3}'.            # planes 4-15    '|\xF4[\x80-\x8F][\x80-\xBF]{2}'.        # plane 16    '|(.{1}))';                              # invalid byte    ob_start();    while (preg_match('/'.$UTF8_BAD.'/S', $str, $matches)) {        if ( !isset($matches[2])) {            echo $matches[0];        } else {            echo $replace;        }        $str = substr($str,strlen($matches[0]));    }    $result = ob_get_contents();    ob_end_clean();    return $result;}//--------------------------------------------------------------------/*** Return code from utf8_bad_identify() when a five octet sequence is detected.* Note: 5 octets sequences are valid UTF-8 but are not supported by Unicode so* do not represent a useful character* @see utf8_bad_identify* @package utf8* @subpackage bad*/define('UTF8_BAD_5OCTET',1);/*** Return code from utf8_bad_identify() when a six octet sequence is detected.* Note: 6 octets sequences are valid UTF-8 but are not supported by Unicode so* do not represent a useful character* @see utf8_bad_identify* @package utf8* @subpackage bad*/define('UTF8_BAD_6OCTET',2);/*** Return code from utf8_bad_identify().* Invalid octet for use as start of multi-byte UTF-8 sequence* @see utf8_bad_identify* @package utf8* @subpackage bad*/define('UTF8_BAD_SEQID',3);/*** Return code from utf8_bad_identify().* From Unicode 3.1, non-shortest form is illegal* @see utf8_bad_identify* @package utf8* @subpackage bad*/define('UTF8_BAD_NONSHORT',4);/*** Return code from utf8_bad_identify().* From Unicode 3.2, surrogate characters are illegal* @see utf8_bad_identify* @package utf8* @subpackage bad*/define('UTF8_BAD_SURROGATE',5);/*** Return code from utf8_bad_identify().* Codepoints outside the Unicode range are illegal* @see utf8_bad_identify* @package utf8* @subpackage bad*/define('UTF8_BAD_UNIOUTRANGE',6);/*** Return code from utf8_bad_identify().* Incomplete multi-octet sequence* Note: this is kind of a "catch-all"* @see utf8_bad_identify* @package utf8* @subpackage bad*/define('UTF8_BAD_SEQINCOMPLETE',7);//--------------------------------------------------------------------/*** Reports on the type of bad byte found in a UTF-8 string. Returns a* status code on the first bad byte found* @author <hsivonen@iki.fi>* @param string UTF-8 encoded string* @return mixed integer constant describing problem or FALSE if valid UTF-8* @see utf8_bad_explain* @see http://hsivonen.iki.fi/php-utf8/* @package utf8* @subpackage bad*/function utf8_bad_identify($str, &$i) {    $mState = 0;     // cached expected number of octets after the current octet                     // until the beginning of the next UTF8 character sequence    $mUcs4  = 0;     // cached Unicode character    $mBytes = 1;     // cached expected number of octets in the current sequence    $len = strlen($str);    for($i = 0; $i < $len; $i++) {        $in = ord($str{$i});        if ( $mState == 0) {            // When mState is zero we expect either a US-ASCII character or a            // multi-octet sequence.            if (0 == (0x80 & ($in))) {                // US-ASCII, pass straight through.                $mBytes = 1;            } else if (0xC0 == (0xE0 & ($in))) {                // First octet of 2 octet sequence                $mUcs4 = ($in);                $mUcs4 = ($mUcs4 & 0x1F) << 6;                $mState = 1;                $mBytes = 2;            } else if (0xE0 == (0xF0 & ($in))) {                // First octet of 3 octet sequence                $mUcs4 = ($in);                $mUcs4 = ($mUcs4 & 0x0F) << 12;                $mState = 2;                $mBytes = 3;            } else if (0xF0 == (0xF8 & ($in))) {                // First octet of 4 octet sequence                $mUcs4 = ($in);                $mUcs4 = ($mUcs4 & 0x07) << 18;                $mState = 3;                $mBytes = 4;            } else if (0xF8 == (0xFC & ($in))) {                /* First octet of 5 octet sequence.                *                * This is illegal because the encoded codepoint must be either                * (a) not the shortest form or                * (b) outside the Unicode range of 0-0x10FFFF.                */                return UTF8_BAD_5OCTET;            } else if (0xFC == (0xFE & ($in))) {                // First octet of 6 octet sequence, see comments for 5 octet sequence.                return UTF8_BAD_6OCTET;            } else {                // Current octet is neither in the US-ASCII range nor a legal first                // octet of a multi-octet sequence.                return UTF8_BAD_SEQID;            }        } else {            // When mState is non-zero, we expect a continuation of the multi-octet            // sequence            if (0x80 == (0xC0 & ($in))) {                // Legal continuation.                $shift = ($mState - 1) * 6;                $tmp = $in;                $tmp = ($tmp & 0x0000003F) << $shift;                $mUcs4 |= $tmp;                /**                * End of the multi-octet sequence. mUcs4 now contains the final                * Unicode codepoint to be output                */                if (0 == --$mState) {                    // From Unicode 3.1, non-shortest form is illegal                    if (((2 == $mBytes) && ($mUcs4 < 0x0080)) ||                        ((3 == $mBytes) && ($mUcs4 < 0x0800)) ||                        ((4 == $mBytes) && ($mUcs4 < 0x10000)) ) {                        return UTF8_BAD_NONSHORT;                    // From Unicode 3.2, surrogate characters are illegal                    } else if (($mUcs4 & 0xFFFFF800) == 0xD800) {                        return UTF8_BAD_SURROGATE;                    // Codepoints outside the Unicode range are illegal                    } else if ($mUcs4 > 0x10FFFF) {                        return UTF8_BAD_UNIOUTRANGE;                    }                    //initialize UTF8 cache                    $mState = 0;                    $mUcs4  = 0;                    $mBytes = 1;                }            } else {                // ((0xC0 & (*in) != 0x80) && (mState != 0))                // Incomplete multi-octet sequence.                $i--;                return UTF8_BAD_SEQINCOMPLETE;            }        }    }    if ( $mState != 0 ) {        // Incomplete multi-octet sequence.        $i--;        return UTF8_BAD_SEQINCOMPLETE;    }    // No bad octets found    $i = NULL;    return FALSE;}//--------------------------------------------------------------------/*** Takes a return code from utf8_bad_identify() are returns a message* (in English) explaining what the problem is.* @param int return code from utf8_bad_identify* @return mixed string message or FALSE if return code unknown* @see utf8_bad_identify* @package utf8* @subpackage bad*/function utf8_bad_explain($code) {    switch ($code) {        case UTF8_BAD_5OCTET:            return 'Five octet sequences are valid UTF-8 but are not supported by Unicode';        break;        case UTF8_BAD_6OCTET:            return 'Six octet sequences are valid UTF-8 but are not supported by Unicode';        break;        case UTF8_BAD_SEQID:            return 'Invalid octet for use as start of multi-byte UTF-8 sequence';        break;        case UTF8_BAD_NONSHORT:            return 'From Unicode 3.1, non-shortest form is illegal';        break;        case UTF8_BAD_SURROGATE:            return 'From Unicode 3.2, surrogate characters are illegal';        break;        case UTF8_BAD_UNIOUTRANGE:            return 'Codepoints outside the Unicode range are illegal';        break;        case UTF8_BAD_SEQINCOMPLETE:            return 'Incomplete multi-octet sequence';        break;    }    trigger_error('Unknown error code: '.$code,E_USER_WARNING);    return FALSE;}
<?php/** * @package     Joomla.Site * @subpackage  Templates.beez3 * * @copyright   Copyright (C) 2005 - 2013 Open Source Matters, Inc. All rights reserved. * @license     GNU General Public License version 2 or later; see LICENSE.txt */defined('_JEXEC') or die;$app = JFactory::getApplication();$templateparams = $app->getTemplate(true)->params;JHtml::addIncludePath(JPATH_COMPONENT . '/helpers');$pageClass = $this->params->get('pageclass_sfx');?><section class="category-list<?php echo $this->pageclass_sfx;?>"><?php if ($this->params->get('show_page_heading')) : ?><?php if ($this->params->get('show_page_heading') and ($this->params->get('show_category_title') or $this->params->get('page_subheading'))) : ?><hgroup><?php endif; ?><h1>	<?php echo $this->escape($this->params->get('page_heading')); ?></h1><?php endif; ?><?php if ($this->params->get('show_category_title') or $this->params->get('page_subheading')) : ?><h2>	<?php echo $this->escape($this->params->get('page_subheading')); ?>	<?php if ($this->params->get('show_category_title'))	{		echo '<span class="subheading-category">'.$this->category->title.'</span>';	}	?></h2><?php if ($this->params->get('show_page_heading') and ($this->params->get('show_category_title', 1) or $this->params->get('page_subheading'))) : ?></hgroup><?php endif; ?><?php endif; ?><?php if ($this->params->get('show_description', 1) || $this->params->def('show_description_image', 1)) : ?>	<div class="category-desc">	<?php if ($this->params->get('show_description_image') && $this->category->getParams()->get('image')) : ?>		<img src="<?php echo $this->category->getParams()->get('image'); ?>"/>	<?php endif; ?>	<?php if ($this->params->get('show_description') && $this->category->description) : ?>		<?php echo JHtml::_('content.prepare', $this->category->description, '', 'com_content.category'); ?>	<?php endif; ?>	<div class="clr"></div>	</div><?php endif; ?><?php if (is_array($this->children[$this->category->id]) && count($this->children[$this->category->id]) > 0 && $this->params->get('maxLevel') != 0) : ?>		<div class="cat-children">	<?php if ($this->params->get('show_category_title') or $this->params->get('page_subheading'))	{		echo '<h3>';	}	elseif ($this->params->get('show_category_heading_title_text', 1) == 1)	{		echo '<h2>';	} ?>    <?php if ($this->params->get('show_category_heading_title_text', 1) == 1) : ?>		<?php echo JTEXT::_('JGLOBAL_SUBCATEGORIES'); ?>	<?php endif; ?>	<?php if ($this->params->get('show_category_title') or $this->params->get('page_subheading'))	{		echo '</h3>';	}	elseif ($this->params->get('show_category_heading_title_text', 1) == 1)	{		echo '</h2>';	} ?>		</div>	<?php endif; ?>		<?php echo $this->loadTemplate('children'); ?>			<div class="cat-items">		<?php echo $this->loadTemplate('articles'); ?>	</div></section>
<?php/** * @package     Joomla.Site * @subpackage  com_tags * * @copyright   Copyright (C) 2005 - 2013 Open Source Matters, Inc. All rights reserved. * @license     GNU General Public License version 2 or later; see LICENSE.txt */defined('_JEXEC') or die;require_once JPATH_COMPONENT.'/helpers/route.php';$controller	= JControllerLegacy::getInstance('Tags');$controller->execute(JFactory::getApplication()->input->get('task'));$controller->redirect();
<?php/** * @package     Joomla.Administrator * @subpackage  com_joomlaupdate * * @copyright   Copyright (C) 2005 - 2013 Open Source Matters, Inc. All rights reserved. * @license     GNU General Public License version 2 or later; see LICENSE.txt */defined('_JEXEC') or die;?><p class="nowarning"><?php echo JText::_('COM_JOOMLAUPDATE_VIEW_UPDATE_INPROGRESS') ?></p><div class="joomlaupdate_spinner" ></div><div id="update-progress">	<div id="extprogress">		<div class="extprogrow">			<?php			echo JHtml::_(				'image', 'media/bar.gif', JText::_('COM_JOOMLAUPDATE_VIEW_PROGRESS'),				array('class' => 'progress', 'id' => 'progress'), true			); ?>		</div>		<div class="extprogrow">			<span class="extlabel"><?php echo JText::_('COM_JOOMLAUPDATE_VIEW_UPDATE_PERCENT'); ?></span>			<span class="extvalue" id="extpercent"></span>		</div>		<div class="extprogrow">			<span class="extlabel"><?php echo JText::_('COM_JOOMLAUPDATE_VIEW_UPDATE_BYTESREAD'); ?></span>			<span class="extvalue" id="extbytesin"></span>		</div>		<div class="extprogrow">			<span class="extlabel"><?php echo JText::_('COM_JOOMLAUPDATE_VIEW_UPDATE_BYTESEXTRACTED'); ?></span>			<span class="extvalue" id="extbytesout"></span>		</div>		<div class="extprogrow">			<span class="extlabel"><?php echo JText::_('COM_JOOMLAUPDATE_VIEW_UPDATE_FILESEXTRACTED'); ?></span>			<span class="extvalue" id="extfiles"></span>		</div>	</div></div>
<?php/** * @package     Joomla.Platform * @subpackage  HTML * * @copyright   Copyright (C) 2005 - 2013 Open Source Matters, Inc. All rights reserved. * @license     GNU General Public License version 2 or later; see LICENSE */defined('JPATH_PLATFORM') or die;/** * Utility class for form elements * * @package     Joomla.Platform * @subpackage  HTML * @since       11.1 */abstract class JHtmlForm{	/**	 * Displays a hidden token field to reduce the risk of CSRF exploits	 *	 * Use in conjunction with JSession::checkToken	 *	 * @return  string  A hidden input field with a token	 *	 * @see     JSession::checkToken	 * @since   11.1	 */	public static function token()	{		return '<input type="hidden" name="' . JSession::getFormToken() . '" value="1" />';	}}
<?php/** * @package     Joomla.Administrator * @subpackage  com_installer * * @copyright   Copyright (C) 2005 - 2013 Open Source Matters, Inc. All rights reserved. * @license     GNU General Public License version 2 or later; see LICENSE.txt */defined('_JEXEC') or die;?><div id="installer-database">	<form action="<?php echo JRoute::_('index.php?option=com_installer&view=database');?>" method="post" name="adminForm" id="adminForm">	<?php if (!empty( $this->sidebar)) : ?>		<div id="j-sidebar-container" class="span2">			<?php echo $this->sidebar; ?>		</div>		<div id="j-main-container" class="span10">	<?php else : ?>		<div id="j-main-container">	<?php endif;?>		<?php if ($this->errorCount === 0) : ?>			<div class="alert alert-info">				<a class="close" data-dismiss="alert" href="#">&times;</a>				<?php echo JText::_('COM_INSTALLER_MSG_DATABASE_OK'); ?>			</div>			<?php echo JHtml::_('bootstrap.startTabSet', 'myTab', array('active' => 'other')); ?>		<?php else : ?>			<div class="alert alert-error">				<a class="close" data-dismiss="alert" href="#">&times;</a>				<?php echo JText::_('COM_INSTALLER_MSG_DATABASE_ERRORS'); ?>			</div>			<?php echo JHtml::_('bootstrap.startTabSet', 'myTab', array('active' => 'problems')); ?>			<?php echo JHtml::_('bootstrap.addTab', 'myTab', 'problems', JText::plural('COM_INSTALLER_MSG_N_DATABASE_ERROR_PANEL', $this->errorCount)); ?>				<fieldset class="panelform">						<ul>						<?php if (!$this->filterParams) : ?>							<li><?php echo JText::_('COM_INSTALLER_MSG_DATABASE_FILTER_ERROR'); ?>						<?php endif; ?>						<?php if (!(strncmp($this->schemaVersion, JVERSION, 5) === 0)) : ?>							<li><?php echo JText::sprintf('COM_INSTALLER_MSG_DATABASE_SCHEMA_ERROR', $this->schemaVersion, JVERSION); ?></li>						<?php endif; ?>						<?php if (($this->updateVersion != JVERSION)) : ?>							<li><?php echo JText::sprintf('COM_INSTALLER_MSG_DATABASE_UPDATEVERSION_ERROR', $this->updateVersion, JVERSION); ?></li>						<?php endif; ?>						<?php foreach ($this->errors as $line => $error) : ?>							<?php $key = 'COM_INSTALLER_MSG_DATABASE_' . $error->queryType;							$msgs = $error->msgElements;							$file = basename($error->file);							$msg0 = (isset($msgs[0])) ? $msgs[0] : ' ';							$msg1 = (isset($msgs[1])) ? $msgs[1] : ' ';							$msg2 = (isset($msgs[2])) ? $msgs[2] : ' ';							$message = JText::sprintf($key, $file, $msg0, $msg1, $msg2); ?>							<li><?php echo $message; ?></li>						<?php endforeach; ?>						</ul>					</fieldset>			<?php echo JHtml::_('bootstrap.endTab'); ?>		<?php endif; ?>			<?php echo JHtml::_('bootstrap.addTab', 'myTab', 'other', JText::_('COM_INSTALLER_MSG_DATABASE_INFO', true)); ?>				<div class="control-group" >					<fieldset class="panelform">						<ul>							<li><?php echo JText::sprintf('COM_INSTALLER_MSG_DATABASE_SCHEMA_VERSION', $this->schemaVersion); ?></li>							<li><?php echo JText::sprintf('COM_INSTALLER_MSG_DATABASE_UPDATE_VERSION', $this->updateVersion); ?></li>							<li><?php echo JText::sprintf('COM_INSTALLER_MSG_DATABASE_DRIVER', JFactory::getDbo()->name); ?></li>							<li><?php echo JText::sprintf('COM_INSTALLER_MSG_DATABASE_CHECKED_OK', count($this->results['ok'])); ?></li>							<li><?php echo JText::sprintf('COM_INSTALLER_MSG_DATABASE_SKIPPED', count($this->results['skipped'])); ?></li>						</ul>					</fieldset>				</div>				<?php echo JHtml::_('bootstrap.endTab'); ?>			<input type="hidden" name="task" value="" />			<input type="hidden" name="boxchecked" value="0" />			<?php echo JHtml::_('form.token'); ?>		</div>	</form></div>
<?php/** * @package     Joomla.Platform * @subpackage  Language * * @copyright   Copyright (C) 2005 - 2013 Open Source Matters, Inc. All rights reserved. * @copyright   Copyright (C) 2005 Richard Heyes (http://www.phpguru.org/). All rights reserved. * @license     GNU General Public License version 2 or later; see LICENSE */defined('JPATH_PLATFORM') or die;/** * Porter English stemmer class. * * This class was adapted from one written by Richard Heyes. * See copyright and link information above. * * @package     Joomla.Platform * @subpackage  Language * @since       12.1 */class JLanguageStemmerPorteren extends JLanguageStemmer{	/**	 * Regex for matching a consonant.	 *	 * @var    string	 * @since  12.1	 */	private static $_regex_consonant = '(?:[bcdfghjklmnpqrstvwxz]|(?<=[aeiou])y|^y)';	/**	 * Regex for matching a vowel	 * @var    string	 * @since  12.1	 */	private static $_regex_vowel = '(?:[aeiou]|(?<![aeiou])y)';	/**	 * Method to stem a token and return the root.	 *	 * @param   string  $token  The token to stem.	 * @param   string  $lang   The language of the token.	 *	 * @return  string  The root token.	 *	 * @since   12.1	 */	public function stem($token, $lang)	{		// Check if the token is long enough to merit stemming.		if (strlen($token) <= 2)		{			return $token;		}		// Check if the language is English or All.		if ($lang !== 'en')		{			return $token;		}		// Stem the token if it is not in the cache.		if (!isset($this->cache[$lang][$token]))		{			// Stem the token.			$result = $token;			$result = self::_step1ab($result);			$result = self::_step1c($result);			$result = self::_step2($result);			$result = self::_step3($result);			$result = self::_step4($result);			$result = self::_step5($result);			// Add the token to the cache.			$this->cache[$lang][$token] = $result;		}		return $this->cache[$lang][$token];	}	/**	 * Step 1	 *	 * @param   string  $word  The token to stem.	 *	 * @return  string	 *	 * @since   12.1	 */	private static function _step1ab($word)	{		// Part a		if (substr($word, -1) == 's')		{				self::_replace($word, 'sses', 'ss')			or self::_replace($word, 'ies', 'i')			or self::_replace($word, 'ss', 'ss')			or self::_replace($word, 's', '');		}		// Part b		if (substr($word, -2, 1) != 'e' or !self::_replace($word, 'eed', 'ee', 0))		{			// First rule			$v = self::$_regex_vowel;			// Check ing and ed			// Note use of && and OR, for precedence reasons			if (preg_match("#$v+#", substr($word, 0, -3)) && self::_replace($word, 'ing', '')				or preg_match("#$v+#", substr($word, 0, -2)) && self::_replace($word, 'ed', ''))			{				// If one of above two test successful				if (!self::_replace($word, 'at', 'ate') and !self::_replace($word, 'bl', 'ble') and !self::_replace($word, 'iz', 'ize'))				{					// Double consonant ending					if (self::_doubleConsonant($word) and substr($word, -2) != 'll' and substr($word, -2) != 'ss' and substr($word, -2) != 'zz')					{						$word = substr($word, 0, -1);					}					elseif (self::_m($word) == 1 and self::_cvc($word))					{						$word .= 'e';					}				}			}		}		return $word;	}	/**	 * Step 1c	 *	 * @param   string  $word  The token to stem.	 *	 * @return  string	 *	 * @since   12.1	 */	private static function _step1c($word)	{		$v = self::$_regex_vowel;		if (substr($word, -1) == 'y' && preg_match("#$v+#", substr($word, 0, -1)))		{			self::_replace($word, 'y', 'i');		}		return $word;	}	/**	 * Step 2	 *	 * @param   string  $word  The token to stem.	 *	 * @return  string	 *	 * @since   12.1	 */	private static function _step2($word)	{		switch (substr($word, -2, 1))		{			case 'a':					self::_replace($word, 'ational', 'ate', 0)				or self::_replace($word, 'tional', 'tion', 0);				break;			case 'c':					self::_replace($word, 'enci', 'ence', 0)				or self::_replace($word, 'anci', 'ance', 0);				break;			case 'e':				self::_replace($word, 'izer', 'ize', 0);				break;			case 'g':				self::_replace($word, 'logi', 'log', 0);				break;			case 'l':					self::_replace($word, 'entli', 'ent', 0)				or self::_replace($word, 'ousli', 'ous', 0)				or self::_replace($word, 'alli', 'al', 0)				or self::_replace($word, 'bli', 'ble', 0)				or self::_replace($word, 'eli', 'e', 0);				break;			case 'o':					self::_replace($word, 'ization', 'ize', 0)				or self::_replace($word, 'ation', 'ate', 0)				or self::_replace($word, 'ator', 'ate', 0);				break;			case 's':					self::_replace($word, 'iveness', 'ive', 0)				or self::_replace($word, 'fulness', 'ful', 0)				or self::_replace($word, 'ousness', 'ous', 0)				or self::_replace($word, 'alism', 'al', 0);				break;			case 't':					self::_replace($word, 'biliti', 'ble', 0)				or self::_replace($word, 'aliti', 'al', 0)				or self::_replace($word, 'iviti', 'ive', 0);				break;		}		return $word;	}	/**	 * Step 3	 *	 * @param   string  $word  The token to stem.	 *	 * @return  string	 *	 * @since   12.1	 */	private static function _step3($word)	{		switch (substr($word, -2, 1))		{			case 'a':				self::_replace($word, 'ical', 'ic', 0);				break;			case 's':				self::_replace($word, 'ness', '', 0);				break;			case 't':					self::_replace($word, 'icate', 'ic', 0)				or self::_replace($word, 'iciti', 'ic', 0);				break;			case 'u':				self::_replace($word, 'ful', '', 0);				break;			case 'v':				self::_replace($word, 'ative', '', 0);				break;			case 'z':				self::_replace($word, 'alize', 'al', 0);				break;		}		return $word;	}	/**	 * Step 4	 *	 * @param   string  $word  The token to stem.	 *	 * @return  string	 *	 * @since   12.1	 */	private static function _step4($word)	{		switch (substr($word, -2, 1))		{			case 'a':				self::_replace($word, 'al', '', 1);				break;			case 'c':					self::_replace($word, 'ance', '', 1)				or self::_replace($word, 'ence', '', 1);				break;			case 'e':				self::_replace($word, 'er', '', 1);				break;			case 'i':				self::_replace($word, 'ic', '', 1);				break;			case 'l':					self::_replace($word, 'able', '', 1)				or self::_replace($word, 'ible', '', 1);				break;			case 'n':					self::_replace($word, 'ant', '', 1)				or self::_replace($word, 'ement', '', 1)				or self::_replace($word, 'ment', '', 1)				or self::_replace($word, 'ent', '', 1);				break;			case 'o':				if (substr($word, -4) == 'tion' or substr($word, -4) == 'sion')				{					self::_replace($word, 'ion', '', 1);				}				else				{					self::_replace($word, 'ou', '', 1);				}				break;			case 's':				self::_replace($word, 'ism', '', 1);				break;			case 't':					self::_replace($word, 'ate', '', 1)				or self::_replace($word, 'iti', '', 1);				break;			case 'u':				self::_replace($word, 'ous', '', 1);				break;			case 'v':				self::_replace($word, 'ive', '', 1);				break;			case 'z':				self::_replace($word, 'ize', '', 1);				break;		}		return $word;	}	/**	 * Step 5	 *	 * @param   string  $word  The token to stem.	 *	 * @return  string	 *	 * @since   12.1	 */	private static function _step5($word)	{		// Part a		if (substr($word, -1) == 'e')		{			if (self::_m(substr($word, 0, -1)) > 1)			{				self::_replace($word, 'e', '');			}			elseif (self::_m(substr($word, 0, -1)) == 1)			{				if (!self::_cvc(substr($word, 0, -1)))				{					self::_replace($word, 'e', '');				}			}		}		// Part b		if (self::_m($word) > 1 and self::_doubleConsonant($word) and substr($word, -1) == 'l')		{			$word = substr($word, 0, -1);		}		return $word;	}	/**	 * Replaces the first string with the second, at the end of the string. If third	 * arg is given, then the preceding string must match that m count at least.	 *	 * @param   string   &$str   String to check	 * @param   string   $check  Ending to check for	 * @param   string   $repl   Replacement string	 * @param   integer  $m      Optional minimum number of m() to meet	 *	 * @return  boolean  Whether the $check string was at the end	 *                   of the $str string. True does not necessarily mean	 *                   that it was replaced.	 *	 * @since   12.1	 */	private static function _replace(&$str, $check, $repl, $m = null)	{		$len = 0 - strlen($check);		if (substr($str, $len) == $check)		{			$substr = substr($str, 0, $len);			if (is_null($m) or self::_m($substr) > $m)			{				$str = $substr . $repl;			}			return true;		}		return false;	}	/**	 * m() measures the number of consonant sequences in $str. if c is	 * a consonant sequence and v a vowel sequence, and <..> indicates arbitrary	 * presence,	 *	 * <c><v>       gives 0	 * <c>vc<v>     gives 1	 * <c>vcvc<v>   gives 2	 * <c>vcvcvc<v> gives 3	 *	 * @param   string  $str  The string to return the m count for	 *	 * @return  integer  The m count	 *	 * @since   12.1	 */	private static function _m($str)	{		$c = self::$_regex_consonant;		$v = self::$_regex_vowel;		$str = preg_replace("#^$c+#", '', $str);		$str = preg_replace("#$v+$#", '', $str);		preg_match_all("#($v+$c+)#", $str, $matches);		return count($matches[1]);	}	/**	 * Returns true/false as to whether the given string contains two	 * of the same consonant next to each other at the end of the string.	 *	 * @param   string  $str  String to check	 *	 * @return  boolean  Result	 *	 * @since   12.1	 */	private static function _doubleConsonant($str)	{		$c = self::$_regex_consonant;		return preg_match("#$c{2}$#", $str, $matches) and $matches[0]{0} == $matches[0]{1};	}	/**	 * Checks for ending CVC sequence where second C is not W, X or Y	 *	 * @param   string  $str  String to check	 *	 * @return  boolean  Result	 *	 * @since   12.1	 */	private static function _cvc($str)	{		$c = self::$_regex_consonant;		$v = self::$_regex_vowel;		$result = preg_match("#($c$v$c)$#", $str, $matches)			and strlen($matches[1]) == 3			and $matches[1]{2} != 'w'			and $matches[1]{2} != 'x'			and $matches[1]{2} != 'y';		return $result;	}}
<?php/** * @package     Joomla.Platform * @subpackage  Database * * @copyright   Copyright (C) 2005 - 2013 Open Source Matters, Inc. All rights reserved. * @license     GNU General Public License version 2 or later; see LICENSE */defined('JPATH_PLATFORM') or die;/** * SQL Server database driver * * @package     Joomla.Platform * @subpackage  Database * @see         http://msdn.microsoft.com/en-us/library/ee336279.aspx * @since       12.1 */class JDatabaseDriverSqlazure extends JDatabaseDriverSqlsrv{	/**	 * The name of the database driver.	 *	 * @var    string	 * @since  12.1	 */	public $name = 'sqlzure';}
<?php/** * @package     Joomla.Administrator * @subpackage  com_cpanel * * @copyright   Copyright (C) 2005 - 2013 Open Source Matters, Inc. All rights reserved. * @license     GNU General Public License version 2 or later; see LICENSE.txt */defined('_JEXEC') or die;/** * Cpanel Controller * * @package     Joomla.Administrator * @subpackage  com_cpanel * @since       1.5 */class CpanelController extends JControllerLegacy{}
<?php/** * @package     Joomla.Site * @subpackage  com_wrapper * * @copyright   Copyright (C) 2005 - 2013 Open Source Matters, Inc. All rights reserved. * @license     GNU General Public License version 2 or later; see LICENSE.txt */defined('_JEXEC') or die;?><script type="text/javascript">function iFrameHeight(){	var h = 0;	if (!document.all)	{		h = document.getElementById('blockrandom').contentDocument.height;		document.getElementById('blockrandom').style.height = h + 60 + 'px';	} else if (document.all)	{		h = document.frames('blockrandom').document.body.scrollHeight;		document.all.blockrandom.style.height = h + 20 + 'px';	}}</script><div class="contentpane<?php echo $this->pageclass_sfx; ?>"><?php if ($this->params->get('show_page_heading')) : ?>	<h1>		<?php if ($this->escape($this->params->get('page_heading'))) :?>			<?php echo $this->escape($this->params->get('page_heading')); ?>		<?php else : ?>			<?php echo $this->escape($this->params->get('page_title')); ?>		<?php endif; ?>	</h1><?php endif; ?><iframe <?php echo $this->wrapper->load; ?>	id="blockrandom"	name="iframe"	src="<?php echo $this->escape($this->wrapper->url); ?>"	width="<?php echo $this->escape($this->params->get('width')); ?>"	height="<?php echo $this->escape($this->params->get('height')); ?>"	scrolling="<?php echo $this->escape($this->params->get('scrolling')); ?>"	frameborder="<?php echo $this->escape($this->params->get('frameborder', 1)); ?>"	class="wrapper<?php echo $this->pageclass_sfx; ?>">	<?php echo JText::_('COM_WRAPPER_NO_IFRAMES'); ?></iframe></div>
<?php/** * @package     Joomla.Site * @subpackage  com_contact * * @copyright   Copyright (C) 2005 - 2013 Open Source Matters, Inc. All rights reserved. * @license     GNU General Public License version 2 or later; see LICENSE.txt */defined('_JEXEC') or die;JHtml::addIncludePath(JPATH_COMPONENT . '/helpers');// If the page class is defined, add to class as suffix.// It will be a separate class if the user starts it with a space?><div class="blog-featured<?php echo $this->pageclass_sfx;?>"><?php if ($this->params->get('show_page_heading') != 0 ) : ?>	<h1>	<?php echo $this->escape($this->params->get('page_heading')); ?>	</h1><?php endif; ?><?php echo $this->loadTemplate('items'); ?><?php if ($this->params->def('show_pagination', 2) == 1  || ($this->params->get('show_pagination') == 2 && $this->pagination->pagesTotal > 1)) : ?>	<div class="pagination">		<?php if ($this->params->def('show_pagination_results', 1)) : ?>			<p class="counter">				<?php echo $this->pagination->getPagesCounter(); ?>			</p>		<?php  endif; ?>				<?php echo $this->pagination->getPagesLinks(); ?>	</div><?php endif; ?></div>
<?php/** * @package     Joomla.Site * @subpackage  Template.system * * @copyright   Copyright (C) 2005 - 2013 Open Source Matters, Inc. All rights reserved. * @license     GNU General Public License version 2 or later; see LICENSE.txt */defined('_JEXEC') or die;/* * none (output raw module content) */function modChrome_none($module, &$params, &$attribs){	echo $module->content;}/* * html5 (chosen html5 tag and font headder tags) */function modChrome_html5($module, &$params, &$attribs){	$moduleTag      = $params->get('module_tag', 'div');	$headerTag      = htmlspecialchars($params->get('header_tag', 'h3'));	$bootstrapSize  = (int) $params->get('bootstrap_size', 0);	$moduleClass    = $bootstrapSize != 0 ? ' span' . $bootstrapSize : '';	if (!empty ($module->content)) : ?>		<<?php echo $moduleTag; ?> class="moduletable<?php echo htmlspecialchars($params->get('moduleclass_sfx')); ?><?php echo $moduleClass; ?>">		<?php if ((bool) $module->showtitle) :?>			<<?php echo $headerTag; ?> class="<?php echo $params->get('header_class'); ?>"><?php echo $module->title; ?></<?php echo $headerTag; ?>>		<?php endif; ?>			<?php echo $module->content; ?>				</<?php echo $moduleTag; ?>>	<?php endif;}/* * Module chrome that wraps the module in a table */function modChrome_table($module, &$params, &$attribs){ ?>	<table cellpadding="0" cellspacing="0" class="moduletable<?php echo htmlspecialchars($params->get('moduleclass_sfx')); ?>">	<?php if ((bool) $module->showtitle) : ?>		<tr>			<th>				<?php echo $module->title; ?>			</th>		</tr>	<?php endif; ?>		<tr>			<td>				<?php echo $module->content; ?>			</td>		</tr>		</table>	<?php}/* * Module chrome that wraps the tabled module output in a <td> tag of another table */function modChrome_horz($module, &$params, &$attribs){ ?>	<table cellspacing="1" cellpadding="0" width="100%">		<tr>			<td>				<?php modChrome_table($module, $params, $attribs); ?>			</td>		</tr>	</table>	<?php}/* * xhtml (divs and font headder tags) */function modChrome_xhtml($module, &$params, &$attribs){	if (!empty ($module->content)) : ?>		<div class="moduletable<?php echo htmlspecialchars($params->get('moduleclass_sfx')); ?>">		<?php if ((bool) $module->showtitle) : ?>			<h3><?php echo $module->title; ?></h3>		<?php endif; ?>			<?php echo $module->content; ?>		</div>	<?php endif;}/* * Module chrome that allows for rounded corners by wrapping in nested div tags */function modChrome_rounded($module, &$params, &$attribs){ ?>		<div class="module<?php echo htmlspecialchars($params->get('moduleclass_sfx')); ?>">			<div>				<div>					<div>						<?php if ((bool) $module->showtitle) : ?>							<h3><?php echo $module->title; ?></h3>						<?php endif; ?>					<?php echo $module->content; ?>					</div>				</div>			</div>		</div>	<?php}/* * Module chrome that add preview information to the module */function modChrome_outline($module, &$params, &$attribs){	static $css = false;	if (!$css)	{		$css = true;		$doc = JFactory::getDocument();		$doc->addStyleDeclaration(".mod-preview-info { padding: 2px 4px 2px 4px; border: 1px solid black; position: absolute; background-color: white; color: red;}");		$doc->addStyleDeclaration(".mod-preview-wrapper { background-color:#eee; border: 1px dotted black; color:#700;}");	}	?>	<div class="mod-preview">		<div class="mod-preview-info"><?php echo 'Position: ' . $module->position . ' [ Style: ' . $module->style . ']'; ?></div>		<div class="mod-preview-wrapper">			<?php echo $module->content; ?>		</div>	</div>	<?php}
<?php/** * @package     Joomla.Site * @subpackage  com_wrapper * * @copyright   Copyright (C) 2005 - 2013 Open Source Matters, Inc. All rights reserved. * @license     GNU General Public License version 2 or later; see LICENSE.txt */defined('_JEXEC') or die;/** * @param   array * @return  array */function WrapperBuildRoute(&$query){	$segments = array();	if (isset($query['view']))	{		unset($query['view']);	}	return $segments;}/** * @param   array * @return  array */function WrapperParseRoute($segments){	$vars = array();	$vars['view'] = 'wrapper';	return $vars;}
<?php/** * @package     Joomla.Site * @subpackage  mod_banners * * @copyright   Copyright (C) 2005 - 2013 Open Source Matters, Inc. All rights reserved. * @license     GNU General Public License version 2 or later; see LICENSE.txt */defined('_JEXEC') or die;/** * Helper for mod_banners * * @package     Joomla.Site * @subpackage  mod_banners * @since       1.5 */class ModBannersHelper{	public static function &getList(&$params)	{		JModelLegacy::addIncludePath(JPATH_ROOT.'/components/com_banners/models', 'BannersModel');		$document	= JFactory::getDocument();		$app		= JFactory::getApplication();		$keywords	= explode(',', $document->getMetaData('keywords'));		$model = JModelLegacy::getInstance('Banners', 'BannersModel', array('ignore_request' => true));		$model->setState('filter.client_id', (int) $params->get('cid'));		$model->setState('filter.category_id', $params->get('catid', array()));		$model->setState('list.limit', (int) $params->get('count', 1));		$model->setState('list.start', 0);		$model->setState('filter.ordering', $params->get('ordering'));		$model->setState('filter.tag_search', $params->get('tag_search'));		$model->setState('filter.keywords', $keywords);		$model->setState('filter.language', $app->getLanguageFilter());		$banners = $model->getItems();		$model->impress();		return $banners;	}}
<?php/** * @package     Joomla.Administrator * @subpackage  mod_title * * @copyright   Copyright (C) 2005 - 2013 Open Source Matters, Inc. All rights reserved. * @license     GNU General Public License version 2 or later; see LICENSE.txt */defined('_JEXEC') or die;// Get the component title divif (isset(JFactory::getApplication()->JComponentTitle)){	$title = JFactory::getApplication()->JComponentTitle;}require JModuleHelper::getLayoutPath('mod_title', $params->get('layout', 'default'));
<?php/** * @package     Joomla.Site * @subpackage  com_finder * * @copyright   Copyright (C) 2005 - 2013 Open Source Matters, Inc. All rights reserved. * @license     GNU General Public License version 2 or later; see LICENSE */defined('_JEXEC') or die;require_once JPATH_COMPONENT . '/helpers/route.php';$controller = JControllerLegacy::getInstance('Finder');$controller->execute(JFactory::getApplication()->input->get('task'));$controller->redirect();
<?php/** * @package     Joomla.Site * @subpackage  com_mailto * * @copyright   Copyright (C) 2005 - 2013 Open Source Matters, Inc. All rights reserved. * @license     GNU General Public License version 2 or later; see LICENSE.txt */defined('_JEXEC') or die;/** * @package     Joomla.Site * @subpackage  com_mailto * @since       1.5 */class MailtoViewSent extends JViewLegacy{	/**	 * @since  1.5	 */	public function display($tpl = null)	{		parent::display($tpl);	}}
<?php/*** @version $Id$* @package utf8* @subpackage strings*///---------------------------------------------------------------/*** UTF-8 aware alternative to str_split* Convert a string to an array* Note: requires utf8_strlen to be loaded* @param string UTF-8 encoded* @param int number to characters to split string by* @return string characters in string reverses* @see http://www.php.net/str_split* @see utf8_strlen* @package utf8* @subpackage strings*/function utf8_str_split($str, $split_len = 1) {    if ( !preg_match('/^[0-9]+$/',$split_len) || $split_len < 1 ) {        return FALSE;    }    $len = utf8_strlen($str);    if ( $len <= $split_len ) {        return array($str);    }    preg_match_all('/.{'.$split_len.'}|[^\x00]{1,'.$split_len.'}$/us', $str, $ar);    return $ar[0];}
<?php/** * @package     Joomla.Administrator * @subpackage  com_installer * @copyright   Copyright (C) 2005 - 2013 Open Source Matters, Inc. All rights reserved. * @license     GNU General Public License version 2 or later; see LICENSE.txt */defined('_JEXEC') or die;?><fieldset id="filter-bar">	<legend class="element-invisible"><?php echo JText::_('JSEARCH_FILTER_LABEL'); ?></legend>	<div class="filter-search">		<label class="filter-search-lbl" for="filter_search"><?php echo JText::_('JSEARCH_FILTER_LABEL'); ?></label>		<input type="text" name="filter_search" id="filter_search" value="<?php echo $this->escape($this->state->get('filter.search')); ?>" title="<?php echo JText::_('COM_INSTALLER_LANGUAGES_FILTER_SEARCH_DESC'); ?>" />		<button type="submit" class="btn"><?php echo JText::_('JSEARCH_FILTER_SUBMIT'); ?></button>		<button type="button" onclick="document.id('filter_search').value='';this.form.submit();"><?php echo JText::_('JSEARCH_FILTER_CLEAR'); ?></button>	</div></fieldset><div class="clr"></div>
<?php/** * @package     Joomla.Administrator * @subpackage  com_plugins * * @copyright   Copyright (C) 2005 - 2013 Open Source Matters, Inc. All rights reserved. * @license     GNU General Public License version 2 or later; see LICENSE.txt */defined('_JEXEC') or die;/** * View class for a list of plugins. * * @package     Joomla.Administrator * @subpackage  com_plugins * @since       1.5 */class PluginsViewPlugins extends JViewLegacy{	protected $items;	protected $pagination;	protected $state;	/**	 * Display the view	 */	public function display($tpl = null)	{		$this->items      = $this->get('Items');		$this->pagination = $this->get('Pagination');		$this->state      = $this->get('State');		// Check for errors.		if (count($errors = $this->get('Errors')))		{			JError::raiseError(500, implode("\n", $errors));			return false;		}		// Check if there are no matching items		if (!count($this->items))		{			JFactory::getApplication()->enqueueMessage(				JText::_('COM_PLUGINS_MSG_MANAGE_NO_PLUGINS'),				'warning'			);		}		$this->addToolbar();		parent::display($tpl);	}	/**	 * Add the page title and toolbar.	 *	 * @since   1.6	 */	protected function addToolbar()	{		$canDo = PluginsHelper::getActions();		JToolbarHelper::title(JText::_('COM_PLUGINS_MANAGER_PLUGINS'), 'plugin');		if ($canDo->get('core.edit'))		{			JToolbarHelper::editList('plugin.edit');		}		if ($canDo->get('core.edit.state'))		{			JToolbarHelper::publish('plugins.publish', 'JTOOLBAR_ENABLE', true);			JToolbarHelper::unpublish('plugins.unpublish', 'JTOOLBAR_DISABLE', true);			JToolbarHelper::checkin('plugins.checkin');		}		if ($canDo->get('core.admin'))		{			JToolbarHelper::preferences('com_plugins');		}		JToolbarHelper::help('JHELP_EXTENSIONS_PLUGIN_MANAGER');		JHtmlSidebar::setAction('index.php?option=com_plugins&view=plugins');		JHtmlSidebar::addFilter(				JText::_('JOPTION_SELECT_PUBLISHED'),				'filter_enabled',				JHtml::_('select.options', PluginsHelper::publishedOptions(), 'value', 'text', $this->state->get('filter.enabled'), true)		);		JHtmlSidebar::addFilter(				JText::_('COM_PLUGINS_OPTION_FOLDER'),				'filter_folder',				JHtml::_('select.options', PluginsHelper::folderOptions(), 'value', 'text', $this->state->get('filter.folder'))		);		JHtmlSidebar::addFilter(				JText::_('JOPTION_SELECT_ACCESS'),				'filter_access',				JHtml::_('select.options', JHtml::_('access.assetgroups'), 'value', 'text', $this->state->get('filter.access'))		);		$this->sidebar = JHtmlSidebar::render();	}	/**	 * Returns an array of fields the table can be sorted by	 *	 * @return  array  Array containing the field name to sort by as the key and display text as value	 *	 * @since   3.0	 */	protected function getSortFields()	{		return array(				'ordering' => JText::_('JGRID_HEADING_ORDERING'),				'a.state' => JText::_('JSTATUS'),				'name' => JText::_('JGLOBAL_TITLE'),				'folder' => JText::_('COM_PLUGINS_FOLDER_HEADING'),				'element' => JText::_('COM_PLUGINS_ELEMENT_HEADING'),				'access' => JText::_('JGRID_HEADING_ACCESS'),				'extension_id' => JText::_('JGRID_HEADING_ID')		);	}}
<?php/** * @package     Joomla.Site * @subpackage  mod_wrapper * * @copyright   Copyright (C) 2005 - 2013 Open Source Matters, Inc. All rights reserved. * @license     GNU General Public License version 2 or later; see LICENSE.txt */defined('_JEXEC') or die;?><script type="text/javascript">	function iFrameHeight()	{		var h = 0;		if (!document.all)		{			h = document.getElementById('blockrandom').contentDocument.height;			document.getElementById('blockrandom').style.height = h + 60 + 'px';		} else if (document.all)		{			h = document.frames('blockrandom').document.body.scrollHeight;			document.all.blockrandom.style.height = h + 20 + 'px';		}	}</script><iframe <?php echo $load; ?>	id="blockrandom"	name="<?php echo $target ?>"	src="<?php echo $url; ?>"	width="<?php echo $width ?>"	height="<?php echo $height ?>"	scrolling="<?php echo $scroll ?>"	frameborder="<?php echo $frameborder?>"	class="wrapper<?php echo $moduleclass_sfx ?>" >	<?php echo JText::_('MOD_WRAPPER_NO_IFRAMES'); ?></iframe>
<?php/** * @package    Joomla.Installation * * @copyright  Copyright (C) 2005 - 2013 Open Source Matters, Inc. All rights reserved. * @license    GNU General Public License version 2 or later; see LICENSE.txt */defined('_JEXEC') or die;/** * Joomla Installation Database Helper Class. * * @package  Joomla.Installation * @since    1.6 */abstract class InstallationHelperDatabase{	/**	 * Method to get a JDatabaseDriver object.	 *	 * @param   string   $driver    The database driver to use.	 * @param   string   $host      The hostname to connect on.	 * @param   string   $user      The user name to connect with.	 * @param   string   $password  The password to use for connection authentication.	 * @param   string   $database  The database to use.	 * @param   string   $prefix    The table prefix to use.	 * @param   boolean  $select    True if the database should be selected.	 *	 * @return  JDatabaseDriver	 *	 * @since   1.6	 */	public static function getDBO($driver, $host, $user, $password, $database, $prefix, $select = true)	{		static $db;		if (!$db)		{			// Build the connection options array.			$options = array(				'driver' => $driver,				'host' => $host,				'user' => $user,				'password' => $password,				'database' => $database,				'prefix' => $prefix,				'select' => $select			);			// Get a database object.			$db = JDatabaseDriver::getInstance($options);		}		return $db;	}}
<?php/** * @package     Joomla.Site * @subpackage  com_mailto * * @copyright   Copyright (C) 2005 - 2013 Open Source Matters, Inc. All rights reserved. * @license     GNU General Public License version 2 or later; see LICENSE.txt */defined('_JEXEC') or die;require_once JPATH_COMPONENT.'/helpers/mailto.php';require_once JPATH_COMPONENT.'/controller.php';$controller = JControllerLegacy::getInstance('Mailto');$controller->registerDefaultTask('mailto');$controller->execute(JFactory::getApplication()->input->get('task'));//$controller->redirect();
<?php/** * @package    Joomla.Language * * @copyright  Copyright (C) 2005 - 2013 Open Source Matters, Inc. All rights reserved. * @license    GNU General Public License version 2 or later; see LICENSE.txt */defined('_JEXEC') or die;/** * en-GB localise class * * @package  Joomla.Language * @since    1.6 */abstract class En_GBLocalise{	/**	 * Returns the potential suffixes for a specific number of items	 *	 * @param   int  $count  The number of items.	 *	 * @return  array  An array of potential suffixes.	 *	 * @since   1.6	 */	public static function getPluralSuffixes($count)	{		if ($count == 0)		{			$return = array('0');		}		elseif ($count == 1)		{			$return = array('1');		}		else		{			$return = array('MORE');		}		return $return;	}	/**	 * Returns the ignored search words	 *	 * @return  array  An array of ignored search words.	 *	 * @since   1.6	 */	public static function getIgnoredSearchWords()	{		$search_ignore = array();		$search_ignore[] = "and";		$search_ignore[] = "in";		$search_ignore[] = "on";		return $search_ignore;	}	/**	 * Returns the lower length limit of search words	 *	 * @return  integer  The lower length limit of search words.	 *	 * @since   1.6	 */	public static function getLowerLimitSearchWord()	{		return 3;	}	/**	 * Returns the upper length limit of search words	 *	 * @return  integer  The upper length limit of search words.	 *	 * @since   1.6	 */	public static function getUpperLimitSearchWord()	{		return 20;	}	/**	 * Returns the number of chars to display when searching	 *	 * @return  integer  The number of chars to display when searching.	 *	 * @since   1.6	 */	public static function getSearchDisplayedCharactersNumber()	{		return 200;	}}
<?php/** * @package     Joomla.Platform * @subpackage  Image * * @copyright   Copyright (C) 2005 - 2013 Open Source Matters, Inc. All rights reserved. * @license     GNU General Public License version 2 or later; see LICENSE */defined('JPATH_PLATFORM') or die;/** * Class to manipulate an image. * * @package     Joomla.Platform * @subpackage  Image * @since       11.3 */class JImage{	/**	 * @const  integer	 * @since  11.3	 */	const SCALE_FILL = 1;	/**	 * @const  integer	 * @since  11.3	 */	const SCALE_INSIDE = 2;	/**	 * @const  integer	 * @since  11.3	 */	const SCALE_OUTSIDE = 3;	/**	 * @const  integer	 * @since  12.2	 */	const CROP = 4;	/**	 * @const  integer	 * @since  12.3	 */	const CROP_RESIZE = 5;	/**	 * @var    resource  The image resource handle.	 * @since  11.3	 */	protected $handle;	/**	 * @var    string  The source image path.	 * @since  11.3	 */	protected $path = null;	/**	 * @var    array  Whether or not different image formats are supported.	 * @since  11.3	 */	protected static $formats = array();	/**	 * Class constructor.	 *	 * @param   mixed  $source  Either a file path for a source image or a GD resource handler for an image.	 *	 * @since   11.3	 * @throws  RuntimeException	 */	public function __construct($source = null)	{		// Verify that GD support for PHP is available.		if (!extension_loaded('gd'))		{			// @codeCoverageIgnoreStart			JLog::add('The GD extension for PHP is not available.', JLog::ERROR);			throw new RuntimeException('The GD extension for PHP is not available.');			// @codeCoverageIgnoreEnd		}		// Determine which image types are supported by GD, but only once.		if (!isset(self::$formats[IMAGETYPE_JPEG]))		{			$info = gd_info();			self::$formats[IMAGETYPE_JPEG] = ($info['JPEG Support']) ? true : false;			self::$formats[IMAGETYPE_PNG] = ($info['PNG Support']) ? true : false;			self::$formats[IMAGETYPE_GIF] = ($info['GIF Read Support']) ? true : false;		}		// If the source input is a resource, set it as the image handle.		if (is_resource($source) && (get_resource_type($source) == 'gd'))		{			$this->handle = &$source;		}		elseif (!empty($source) && is_string($source))		{			// If the source input is not empty, assume it is a path and populate the image handle.			$this->loadFile($source);		}	}	/**	 * Method to return a properties object for an image given a filesystem path.  The	 * result object has values for image width, height, type, attributes, mime type, bits,	 * and channels.	 *	 * @param   string  $path  The filesystem path to the image for which to get properties.	 *	 * @return  stdClass	 *	 * @since   11.3	 * @throws  InvalidArgumentException	 * @throws  RuntimeException	 */	public static function getImageFileProperties($path)	{		// Make sure the file exists.		if (!file_exists($path))		{			throw new InvalidArgumentException('The image file does not exist.');		}		// Get the image file information.		$info = getimagesize($path);		if (!$info)		{			// @codeCoverageIgnoreStart			throw new RuntimeException('Unable to get properties for the image.');			// @codeCoverageIgnoreEnd		}		// Build the response object.		$properties = (object) array(			'width' => $info[0],			'height' => $info[1],			'type' => $info[2],			'attributes' => $info[3],			'bits' => isset($info['bits']) ? $info['bits'] : null,			'channels' => isset($info['channels']) ? $info['channels'] : null,			'mime' => $info['mime']		);		return $properties;	}	/**	 * Method to generate thumbnails from the current image. It allows	 * creation by resizing or cropping the original image.	 *	 * @param   mixed    $thumbSizes      String or array of strings. Example: $thumbSizes = array('150x75','250x150');	 * @param   integer  $creationMethod  1-3 resize $scaleMethod | 4 create croppping | 5 resize then crop	 *	 * @return array	 *	 * @throws  LogicException	 * @throws  InvalidArgumentException	 *	 * @since 12.2	 */	public function generateThumbs($thumbSizes, $creationMethod = self::SCALE_INSIDE)	{		// Make sure the resource handle is valid.		if (!$this->isLoaded())		{			throw new LogicException('No valid image was loaded.');		}		// Accept a single thumbsize string as parameter		if (!is_array($thumbSizes))		{			$thumbSizes = array($thumbSizes);		}		// Process thumbs		$generated = array();		if (!empty($thumbSizes))		{			foreach ($thumbSizes as $thumbSize)			{				// Desired thumbnail size				$size = explode('x', strtolower($thumbSize));				if (count($size) != 2)				{					throw new InvalidArgumentException('Invalid thumb size received: ' . $thumbSize);				}				$thumbWidth 	= $size[0];				$thumbHeight	= $size[1];				switch ($creationMethod)				{					// Case for self::CROP					case 4:						$thumb = $this->crop($thumbWidth, $thumbHeight, null, null, true);						break;					// Case for self::CROP_RESIZE					case 5:						$thumb = $this->cropResize($thumbWidth, $thumbHeight, true);						break;					default:						$thumb = $this->resize($thumbWidth, $thumbHeight, true, $creationMethod);						break;				}				// Store the thumb in the results array				$generated[] = $thumb;			}		}		return $generated;	}	/**	 * Method to create thumbnails from the current image and save them to disk. It allows creation by resizing	 * or croppping the original image.	 *	 * @param   mixed    $thumbSizes      string or array of strings. Example: $thumbSizes = array('150x75','250x150');	 * @param   integer  $creationMethod  1-3 resize $scaleMethod | 4 create croppping	 * @param   string   $thumbsFolder    destination thumbs folder. null generates a thumbs folder in the image folder	 *	 * @return array	 *	 * @throws  LogicException	 * @throws  InvalidArgumentException	 *	 * @since 12.2	 */	public function createThumbs($thumbSizes, $creationMethod = self::SCALE_INSIDE, $thumbsFolder = null)	{		// Make sure the resource handle is valid.		if (!$this->isLoaded())		{			throw new LogicException('No valid image was loaded.');		}		// No thumbFolder set -> we will create a thumbs folder in the current image folder		if (is_null($thumbsFolder))		{			$thumbsFolder = dirname($this->getPath()) . '/thumbs';		}		// Check destination		if (!is_dir($thumbsFolder) && (!is_dir(dirname($thumbsFolder)) || !@mkdir($thumbsFolder)))		{			throw new InvalidArgumentException('Folder does not exist and cannot be created: ' . $thumbsFolder);		}		// Process thumbs		$thumbsCreated = array();		if ($thumbs = $this->generateThumbs($thumbSizes, $creationMethod))		{			// Parent image properties			$imgProperties = self::getImageFileProperties($this->getPath());			foreach ($thumbs as $thumb)			{				// Get thumb properties				$thumbWidth 	= $thumb->getWidth();				$thumbHeight 	= $thumb->getHeight();				// Generate thumb name				$filename 		= pathinfo($this->getPath(), PATHINFO_FILENAME);				$fileExtension 	= pathinfo($this->getPath(), PATHINFO_EXTENSION);				$thumbFileName 	= $filename . '_' . $thumbWidth . 'x' . $thumbHeight . '.' . $fileExtension;				// Save thumb file to disk				$thumbFileName = $thumbsFolder . '/' . $thumbFileName;				if ($thumb->toFile($thumbFileName, $imgProperties->type))				{					// Return JImage object with thumb path to ease further manipulation					$thumb->path = $thumbFileName;					$thumbsCreated[] = $thumb;				}			}		}		return $thumbsCreated;	}	/**	 * Method to crop the current image.	 *	 * @param   mixed    $width      The width of the image section to crop in pixels or a percentage.	 * @param   mixed    $height     The height of the image section to crop in pixels or a percentage.	 * @param   integer  $left       The number of pixels from the left to start cropping.	 * @param   integer  $top        The number of pixels from the top to start cropping.	 * @param   bool     $createNew  If true the current image will be cloned, cropped and returned; else	 *                               the current image will be cropped and returned.	 *	 * @return  JImage	 *	 * @since   11.3	 * @throws  LogicException	 */	public function crop($width, $height, $left = null, $top = null, $createNew = true)	{		// Make sure the resource handle is valid.		if (!$this->isLoaded())		{			throw new LogicException('No valid image was loaded.');		}		// Sanitize width.		$width = $this->sanitizeWidth($width, $height);		// Sanitize height.		$height = $this->sanitizeHeight($height, $width);		// Autocrop offsets		if (is_null($left))		{			$left = round(($this->getWidth() - $width) / 2);		}		if (is_null($top))		{			$top = round(($this->getHeight() - $height) / 2);		}		// Sanitize left.		$left = $this->sanitizeOffset($left);		// Sanitize top.		$top = $this->sanitizeOffset($top);		// Create the new truecolor image handle.		$handle = imagecreatetruecolor($width, $height);		// Allow transparency for the new image handle.		imagealphablending($handle, false);		imagesavealpha($handle, true);		if ($this->isTransparent())		{			// Get the transparent color values for the current image.			$rgba = imageColorsForIndex($this->handle, imagecolortransparent($this->handle));			$color = imageColorAllocate($this->handle, $rgba['red'], $rgba['green'], $rgba['blue']);			// Set the transparent color values for the new image.			imagecolortransparent($handle, $color);			imagefill($handle, 0, 0, $color);			imagecopyresized($handle, $this->handle, 0, 0, $left, $top, $width, $height, $width, $height);		}		else		{			imagecopyresampled($handle, $this->handle, 0, 0, $left, $top, $width, $height, $width, $height);		}		// If we are cropping to a new image, create a new JImage object.		if ($createNew)		{			// @codeCoverageIgnoreStart			$new = new JImage($handle);			return $new;			// @codeCoverageIgnoreEnd		}		// Swap out the current handle for the new image handle.		else		{			// Free the memory from the current handle			$this->destroy();			$this->handle = $handle;			return $this;		}	}	/**	 * Method to apply a filter to the image by type.  Two examples are: grayscale and sketchy.	 *	 * @param   string  $type     The name of the image filter to apply.	 * @param   array   $options  An array of options for the filter.	 *	 * @return  JImage	 *	 * @since   11.3	 * @see     JImageFilter	 * @throws  LogicException	 * @throws  RuntimeException	 */	public function filter($type, array $options = array())	{		// Make sure the resource handle is valid.		if (!$this->isLoaded())		{			throw new LogicException('No valid image was loaded.');		}		// Get the image filter instance.		$filter = $this->getFilterInstance($type);		// Execute the image filter.		$filter->execute($options);		return $this;	}	/**	 * Method to get the height of the image in pixels.	 *	 * @return  integer	 *	 * @since   11.3	 * @throws  LogicException	 */	public function getHeight()	{		// Make sure the resource handle is valid.		if (!$this->isLoaded())		{			throw new LogicException('No valid image was loaded.');		}		return imagesy($this->handle);	}	/**	 * Method to get the width of the image in pixels.	 *	 * @return  integer	 *	 * @since   11.3	 * @throws  LogicException	 */	public function getWidth()	{		// Make sure the resource handle is valid.		if (!$this->isLoaded())		{			throw new LogicException('No valid image was loaded.');		}		return imagesx($this->handle);	}	/**	 * Method to return the path	 *	 * @return	string	 *	 * @since	11.3	 */	public function getPath()	{		return $this->path;	}	/**	 * Method to determine whether or not an image has been loaded into the object.	 *	 * @return  bool	 *	 * @since   11.3	 */	public function isLoaded()	{		// Make sure the resource handle is valid.		if (!is_resource($this->handle) || (get_resource_type($this->handle) != 'gd'))		{			return false;		}		return true;	}	/**	 * Method to determine whether or not the image has transparency.	 *	 * @return  bool	 *	 * @since   11.3	 * @throws  LogicException	 */	public function isTransparent()	{		// Make sure the resource handle is valid.		if (!$this->isLoaded())		{			throw new LogicException('No valid image was loaded.');		}		return (imagecolortransparent($this->handle) >= 0);	}	/**	 * Method to load a file into the JImage object as the resource.	 *	 * @param   string  $path  The filesystem path to load as an image.	 *	 * @return  void	 *	 * @since   11.3	 * @throws  InvalidArgumentException	 * @throws  RuntimeException	 */	public function loadFile($path)	{		// Destroy the current image handle if it exists		$this->destroy();		// Make sure the file exists.		if (!file_exists($path))		{			throw new InvalidArgumentException('The image file does not exist.');		}		// Get the image properties.		$properties = self::getImageFileProperties($path);		// Attempt to load the image based on the MIME-Type		switch ($properties->mime)		{			case 'image/gif':				// Make sure the image type is supported.				if (empty(self::$formats[IMAGETYPE_GIF]))				{					// @codeCoverageIgnoreStart					JLog::add('Attempting to load an image of unsupported type GIF.', JLog::ERROR);					throw new RuntimeException('Attempting to load an image of unsupported type GIF.');					// @codeCoverageIgnoreEnd				}				// Attempt to create the image handle.				$handle = imagecreatefromgif($path);				if (!is_resource($handle))				{					// @codeCoverageIgnoreStart					throw new RuntimeException('Unable to process GIF image.');					// @codeCoverageIgnoreEnd				}				$this->handle = $handle;				break;			case 'image/jpeg':				// Make sure the image type is supported.				if (empty(self::$formats[IMAGETYPE_JPEG]))				{					// @codeCoverageIgnoreStart					JLog::add('Attempting to load an image of unsupported type JPG.', JLog::ERROR);					throw new RuntimeException('Attempting to load an image of unsupported type JPG.');					// @codeCoverageIgnoreEnd				}				// Attempt to create the image handle.				$handle = imagecreatefromjpeg($path);				if (!is_resource($handle))				{					// @codeCoverageIgnoreStart					throw new RuntimeException('Unable to process JPG image.');					// @codeCoverageIgnoreEnd				}				$this->handle = $handle;				break;			case 'image/png':				// Make sure the image type is supported.				if (empty(self::$formats[IMAGETYPE_PNG]))				{					// @codeCoverageIgnoreStart					JLog::add('Attempting to load an image of unsupported type PNG.', JLog::ERROR);					throw new RuntimeException('Attempting to load an image of unsupported type PNG.');					// @codeCoverageIgnoreEnd				}				// Attempt to create the image handle.				$handle = imagecreatefrompng($path);				if (!is_resource($handle))				{					// @codeCoverageIgnoreStart					throw new RuntimeException('Unable to process PNG image.');					// @codeCoverageIgnoreEnd				}				$this->handle = $handle;				break;			default:				JLog::add('Attempting to load an image of unsupported type: ' . $properties->mime, JLog::ERROR);				throw new InvalidArgumentException('Attempting to load an image of unsupported type: ' . $properties->mime);				break;		}		// Set the filesystem path to the source image.		$this->path = $path;	}	/**	 * Method to resize the current image.	 *	 * @param   mixed    $width        The width of the resized image in pixels or a percentage.	 * @param   mixed    $height       The height of the resized image in pixels or a percentage.	 * @param   bool     $createNew    If true the current image will be cloned, resized and returned; else	 *                                 the current image will be resized and returned.	 * @param   integer  $scaleMethod  Which method to use for scaling	 *	 * @return  JImage	 *	 * @since   11.3	 * @throws  LogicException	 */	public function resize($width, $height, $createNew = true, $scaleMethod = self::SCALE_INSIDE)	{		// Make sure the resource handle is valid.		if (!$this->isLoaded())		{			throw new LogicException('No valid image was loaded.');		}		// Sanitize width.		$width = $this->sanitizeWidth($width, $height);		// Sanitize height.		$height = $this->sanitizeHeight($height, $width);		// Prepare the dimensions for the resize operation.		$dimensions = $this->prepareDimensions($width, $height, $scaleMethod);		// Create the new truecolor image handle.		$handle = imagecreatetruecolor($dimensions->width, $dimensions->height);		// Allow transparency for the new image handle.		imagealphablending($handle, false);		imagesavealpha($handle, true);		if ($this->isTransparent())		{			// Get the transparent color values for the current image.			$rgba = imageColorsForIndex($this->handle, imagecolortransparent($this->handle));			$color = imageColorAllocate($this->handle, $rgba['red'], $rgba['green'], $rgba['blue']);			// Set the transparent color values for the new image.			imagecolortransparent($handle, $color);			imagefill($handle, 0, 0, $color);			imagecopyresized($handle, $this->handle, 0, 0, 0, 0, $dimensions->width, $dimensions->height, $this->getWidth(), $this->getHeight());		}		else		{			imagecopyresampled($handle, $this->handle, 0, 0, 0, 0, $dimensions->width, $dimensions->height, $this->getWidth(), $this->getHeight());		}		// If we are resizing to a new image, create a new JImage object.		if ($createNew)		{			// @codeCoverageIgnoreStart			$new = new JImage($handle);			return $new;			// @codeCoverageIgnoreEnd		}		// Swap out the current handle for the new image handle.		else		{			// Free the memory from the current handle			$this->destroy();			$this->handle = $handle;			return $this;		}	}	/**	 * Method to crop an image after resizing it to maintain	 * proportions without having to do all the set up work.	 *	 * @param   integer  $width      The desired width of the image in pixels or a percentage.	 * @param   integer  $height     The desired height of the image in pixels or a percentage.	 * @param   integer  $createNew  If true the current image will be cloned, resized, cropped and returned.	 *	 * @return  object  JImage Object for chaining.	 *	 * @since   12.3	 */	public function cropResize($width, $height, $createNew = true)	{		$width   = $this->sanitizeWidth($width, $height);		$height  = $this->sanitizeHeight($height, $width);		if (($this->getWidth() / $width) < ($this->getHeight() / $height))		{			$this->resize($width, 0, false);		}		else		{			$this->resize(0, $height, false);		}		return $this->crop($width, $height, null, null, $createNew);	}	/**	 * Method to rotate the current image.	 *	 * @param   mixed    $angle       The angle of rotation for the image	 * @param   integer  $background  The background color to use when areas are added due to rotation	 * @param   bool     $createNew   If true the current image will be cloned, rotated and returned; else	 *                                the current image will be rotated and returned.	 *	 * @return  JImage	 *	 * @since   11.3	 * @throws  LogicException	 */	public function rotate($angle, $background = -1, $createNew = true)	{		// Make sure the resource handle is valid.		if (!$this->isLoaded())		{			throw new LogicException('No valid image was loaded.');		}		// Sanitize input		$angle = (float) $angle;		// Create the new truecolor image handle.		$handle = imagecreatetruecolor($this->getWidth(), $this->getHeight());		// Allow transparency for the new image handle.		imagealphablending($handle, false);		imagesavealpha($handle, true);		// Copy the image		imagecopy($handle, $this->handle, 0, 0, 0, 0, $this->getWidth(), $this->getHeight());		// Rotate the image		$handle = imagerotate($handle, $angle, $background);		// If we are resizing to a new image, create a new JImage object.		if ($createNew)		{			// @codeCoverageIgnoreStart			$new = new JImage($handle);			return $new;			// @codeCoverageIgnoreEnd		}		// Swap out the current handle for the new image handle.		else		{			// Free the memory from the current handle			$this->destroy();			$this->handle = $handle;			return $this;		}	}	/**	 * Method to write the current image out to a file.	 *	 * @param   string   $path     The filesystem path to save the image.	 * @param   integer  $type     The image type to save the file as.	 * @param   array    $options  The image type options to use in saving the file.	 *	 * @return  boolean	 *	 * @see     http://www.php.net/manual/image.constants.php	 * @since   11.3	 * @throws  LogicException	 */	public function toFile($path, $type = IMAGETYPE_JPEG, array $options = array())	{		// Make sure the resource handle is valid.		if (!$this->isLoaded())		{			throw new LogicException('No valid image was loaded.');		}		switch ($type)		{			case IMAGETYPE_GIF:				return imagegif($this->handle, $path);				break;			case IMAGETYPE_PNG:				return imagepng($this->handle, $path, (array_key_exists('quality', $options)) ? $options['quality'] : 0);				break;			case IMAGETYPE_JPEG:			default:				return imagejpeg($this->handle, $path, (array_key_exists('quality', $options)) ? $options['quality'] : 100);		}	}	/**	 * Method to get an image filter instance of a specified type.	 *	 * @param   string  $type  The image filter type to get.	 *	 * @return  JImageFilter	 *	 * @since   11.3	 * @throws  RuntimeException	 */	protected function getFilterInstance($type)	{		// Sanitize the filter type.		$type = strtolower(preg_replace('#[^A-Z0-9_]#i', '', $type));		// Verify that the filter type exists.		$className = 'JImageFilter' . ucfirst($type);		if (!class_exists($className))		{			JLog::add('The ' . ucfirst($type) . ' image filter is not available.', JLog::ERROR);			throw new RuntimeException('The ' . ucfirst($type) . ' image filter is not available.');		}		// Instantiate the filter object.		$instance = new $className($this->handle);		// Verify that the filter type is valid.		if (!($instance instanceof JImageFilter))		{			// @codeCoverageIgnoreStart			JLog::add('The ' . ucfirst($type) . ' image filter is not valid.', JLog::ERROR);			throw new RuntimeException('The ' . ucfirst($type) . ' image filter is not valid.');			// @codeCoverageIgnoreEnd		}		return $instance;	}	/**	 * Method to get the new dimensions for a resized image.	 *	 * @param   integer  $width        The width of the resized image in pixels.	 * @param   integer  $height       The height of the resized image in pixels.	 * @param   integer  $scaleMethod  The method to use for scaling	 *	 * @return  stdClass	 *	 * @since   11.3	 * @throws  InvalidArgumentException  If width, height or both given as zero	 */	protected function prepareDimensions($width, $height, $scaleMethod)	{		// Instantiate variables.		$dimensions = new stdClass;		switch ($scaleMethod)		{			case self::SCALE_FILL:				$dimensions->width = (int) round($width);				$dimensions->height = (int) round($height);				break;			case self::SCALE_INSIDE:			case self::SCALE_OUTSIDE:				$rx = ($width > 0) ? ($this->getWidth() / $width) : 0;				$ry = ($height > 0) ? ($this->getHeight() / $height) : 0;				if ($scaleMethod == self::SCALE_INSIDE)				{					$ratio = ($rx > $ry) ? $rx : $ry;				}				else				{					$ratio = ($rx < $ry) ? $rx : $ry;				}				$dimensions->width = (int) round($this->getWidth() / $ratio);				$dimensions->height = (int) round($this->getHeight() / $ratio);				break;			default:				throw new InvalidArgumentException('Invalid scale method.');				break;		}		return $dimensions;	}	/**	 * Method to sanitize a height value.	 *	 * @param   mixed  $height  The input height value to sanitize.	 * @param   mixed  $width   The input width value for reference.	 *	 * @return  integer	 *	 * @since   11.3	 */	protected function sanitizeHeight($height, $width)	{		// If no height was given we will assume it is a square and use the width.		$height = ($height === null) ? $width : $height;		// If we were given a percentage, calculate the integer value.		if (preg_match('/^[0-9]+(\.[0-9]+)?\%$/', $height))		{			$height = (int) round($this->getHeight() * (float) str_replace('%', '', $height) / 100);		}		// Else do some rounding so we come out with a sane integer value.		else		{			$height = (int) round((float) $height);		}		return $height;	}	/**	 * Method to sanitize an offset value like left or top.	 *	 * @param   mixed  $offset  An offset value.	 *	 * @return  integer	 *	 * @since   11.3	 */	protected function sanitizeOffset($offset)	{		return (int) round((float) $offset);	}	/**	 * Method to sanitize a width value.	 *	 * @param   mixed  $width   The input width value to sanitize.	 * @param   mixed  $height  The input height value for reference.	 *	 * @return  integer	 *	 * @since   11.3	 */	protected function sanitizeWidth($width, $height)	{		// If no width was given we will assume it is a square and use the height.		$width = ($width === null) ? $height : $width;		// If we were given a percentage, calculate the integer value.		if (preg_match('/^[0-9]+(\.[0-9]+)?\%$/', $width))		{			$width = (int) round($this->getWidth() * (float) str_replace('%', '', $width) / 100);		}		// Else do some rounding so we come out with a sane integer value.		else		{			$width = (int) round((float) $width);		}		return $width;	}	/**	 * Method to destroy an image handle and	 * free the memory associated with the handle	 *	 * @return  boolean  True on success, false on failure or if no image is loaded	 *	 * @since 12.3	 */	public function destroy()	{		if ($this->isLoaded())		{			return imagedestroy($this->handle);		}		return false;	}	/**	 * Method to call the destroy() method one last time	 * to free any memory when the object is unset	 *	 * @see     JImage::destroy()	 */	public function __destruct()	{		$this->destroy();	}}
<?php/** * Verifies that control statements conform to their coding standards. * * PHP version 5 * * @category  PHP * @package   PHP_CodeSniffer * @author    Greg Sherwood <gsherwood@squiz.net> * @author    Marc McIntyre <mmcintyre@squiz.net> * @copyright 2006 Squiz Pty Ltd (ABN 77 084 670 600) * @license   http://matrix.squiz.net/developer/tools/php_cs/licence BSD Licence * @version   CVS: $Id: ControlSignatureSniff.php 244676 2007-10-23 06:05:14Z squiz $ * @link      http://pear.php.net/package/PHP_CodeSniffer */if (class_exists('PHP_CodeSniffer_Standards_AbstractPatternSniff', true) === false) {	throw new PHP_CodeSniffer_Exception('Class PHP_CodeSniffer_Standards_AbstractPatternSniff not found');}/** * Verifies that control statements conform to their coding standards. * * @category  PHP * @package   PHP_CodeSniffer * @author    Greg Sherwood <gsherwood@squiz.net> * @author    Marc McIntyre <mmcintyre@squiz.net> * @copyright 2006 Squiz Pty Ltd (ABN 77 084 670 600) * @license   http://matrix.squiz.net/developer/tools/php_cs/licence BSD Licence * @version   Release: 1.3.0RC2 * @link      http://pear.php.net/package/PHP_CodeSniffer */class Joomla_Sniffs_ControlStructures_ControlSignatureSniff extends PHP_CodeSniffer_Standards_AbstractPatternSniff{	/**	 * Constructs a Joomla_Sniffs_ControlStructures_ControlSignatureSniff.	 */	public function __construct()	{		parent::__construct(true);	}//end __construct()	/**	 * Returns the patterns that this test wishes to verify.	 *	 * @return array(string)	 */	protected function getPatterns()	{		return array(			'if (...)EOL...{...}EOL...elseEOL',			'if (...)EOL...{...}EOL...elseif (...)EOL',			'if (...)EOL',			'tryEOL...{EOL...}EOL',			'catch (...)EOL...{EOL',			'doEOL...{...}EOL',			'while (...)EOL...{EOL',			'for (...)EOL...{EOL',			'foreach (...)EOL...{EOL',			'switch (...)EOL...{EOL',		);	}//end getPatterns()	/**	 * Process a pattern.	 *	 * Returns if we are inside a "tmpl" folder - workaround for the Joomla! CMS :(	 *	 * @param array $patternInfo Information about the pattern used for checking, which includes are	 *               parsed token representation of the pattern.	 * @param PHP_CodeSniffer_File $phpcsFile The PHP_CodeSniffer file where the token occured.	 * @param integer $stackPtr The postion in the tokens stack where the listening token type was found.	 *	 * @return return_type	 */	protected function processPattern($patternInfo, PHP_CodeSniffer_File $phpcsFile	, $stackPtr)	{		if (0)		{			/*			 * @todo disabled - This is a special sniff for the Joomla! CMS to exclude			* the tmpl folder which may contain constructs in colon notation			*/			$parts = explode(DIRECTORY_SEPARATOR, $phpcsFile->getFileName());			if ('tmpl' == $parts[count($parts) - 2])			{				return false;			}		}		return parent::processPattern($patternInfo, $phpcsFile, $stackPtr);	}//function}//end class?>
<?php/** * @package     Joomla.Site * @subpackage  mod_articles_news * * @copyright   Copyright (C) 2005 - 2013 Open Source Matters, Inc. All rights reserved. * @license     GNU General Public License version 2 or later; see LICENSE.txt */defined('_JEXEC') or die;?><div class="newsflash<?php echo $moduleclass_sfx; ?>"><?phpforeach ($list as $item) :	require JModuleHelper::getLayoutPath('mod_articles_news', '_item');endforeach;?></div>
<?php/** * @package     Joomla.Site * @subpackage  Layout * * @copyright   Copyright (C) 2005 - 2013 Open Source Matters, Inc. All rights reserved. * @license     GNU General Public License version 2 or later; see LICENSE.txt */defined('_JEXEC') or die;$id      = empty($displayData['id']) ? '' : (' id="' . $displayData['id'] . '"');$target  = empty($displayData['target']) ? '' : (' target="' . $displayData['target'] . '"');$onclick = empty($displayData['onclick']) ? '' : (' onclick="' . $displayData['onclick'] . '"');$title   = empty($displayData['title']) ? '' : (' title="' . $this->escape($displayData['title']) . '"');$text    = empty($displayData['text']) ? '' : ('<span>' . $displayData['text'] . '</span>')?><div class="row-fluid"<?php echo $id; ?>>	<div class="span12">		<a href="<?php echo $displayData['link']; ?>"<?php echo $target . $onclick . $title; ?>>			<i class="icon-<?php echo $displayData['image']; ?>"></i> <?php echo $text; ?>		</a>	</div></div>
<?php/** * @package     Joomla.Administrator * @subpackage  com_finder * * @copyright   Copyright (C) 2005 - 2013 Open Source Matters, Inc. All rights reserved. * @license     GNU General Public License version 2 or later; see LICENSE */defined('_JEXEC') or die;JLoader::register('FinderIndexerHelper', __DIR__ . '/helper.php');JLoader::register('FinderIndexerParser', __DIR__ . '/parser.php');JLoader::register('FinderIndexerStemmer', __DIR__ . '/stemmer.php');JLoader::register('FinderIndexerTaxonomy', __DIR__ . '/taxonomy.php');JLoader::register('FinderIndexerToken', __DIR__ . '/token.php');jimport('joomla.filesystem.file');/** * Main indexer class for the Finder indexer package. * * The indexer class provides the core functionality of the Finder * search engine. It is responsible for adding and updating the * content links table; extracting and scoring tokens; and maintaining * all referential information for the content. * * Note: All exceptions thrown from within this class should be caught * by the controller. * * @package     Joomla.Administrator * @subpackage  com_finder * @since       2.5 */abstract class FinderIndexer{	/**	 * The title context identifier.	 *	 * @var    integer	 * @since  2.5	 */	const TITLE_CONTEXT = 1;	/**	 * The text context identifier.	 *	 * @var    integer	 * @since  2.5	 */	const TEXT_CONTEXT = 2;	/**	 * The meta context identifier.	 *	 * @var    integer	 * @since  2.5	 */	const META_CONTEXT = 3;	/**	 * The path context identifier.	 *	 * @var    integer	 * @since  2.5	 */	const PATH_CONTEXT = 4;	/**	 * The misc context identifier.	 *	 * @var    integer	 * @since  2.5	 */	const MISC_CONTEXT = 5;	/**	 * The indexer state object.	 *	 * @var    object	 * @since  2.5	 */	public static $state;	/**	 * The indexer profiler object.	 *	 * @var    object	 * @since  2.5	 */	public static $profiler;	/**	 * Returns a reference to the FinderIndexer object.	 *	 * @return  FinderIndexer instance based on the database driver	 *	 * @since   3.0	 * @throws  RuntimeException if driver class for indexer not present.	 */	public static function getInstance()	{		// Setup the adapter for the indexer.		$format = JFactory::getDbo()->name;		if ($format == 'mysqli')		{			$format = 'mysql';		}		elseif ($format == 'sqlazure')		{			$format = 'sqlsrv';		}		$path = __DIR__ . '/driver/' . $format . '.php';		$class = 'FinderIndexerDriver' . ucfirst($format);		// Check if a parser exists for the format.		if (file_exists($path))		{			// Instantiate the parser.			include_once $path;			return new $class;		}		else		{			// Throw invalid format exception.			throw new RuntimeException(JText::sprintf('COM_FINDER_INDEXER_INVALID_DRIVER', $format));		}	}	/**	 * Method to get the indexer state.	 *	 * @return  object  The indexer state object.	 *	 * @since   2.5	 */	public static function getState()	{		// First, try to load from the internal state.		if (!empty(self::$state))		{			return self::$state;		}		// If we couldn't load from the internal state, try the session.		$session = JFactory::getSession();		$data = $session->get('_finder.state', null);		// If the state is empty, load the values for the first time.		if (empty($data))		{			$data = new JObject;			// Load the default configuration options.			$data->options = JComponentHelper::getParams('com_finder');			// Setup the weight lookup information.			$data->weights = array(				self::TITLE_CONTEXT	=> round($data->options->get('title_multiplier', 1.7), 2),				self::TEXT_CONTEXT	=> round($data->options->get('text_multiplier', 0.7), 2),				self::META_CONTEXT	=> round($data->options->get('meta_multiplier', 1.2), 2),				self::PATH_CONTEXT	=> round($data->options->get('path_multiplier', 2.0), 2),				self::MISC_CONTEXT	=> round($data->options->get('misc_multiplier', 0.3), 2)			);			// Set the current time as the start time.			$data->startTime = JFactory::getDate()->toSQL();			// Set the remaining default values.			$data->batchSize = (int) $data->options->get('batch_size', 50);			$data->batchOffset = 0;			$data->totalItems = 0;			$data->pluginState = array();		}		// Setup the profiler if debugging is enabled.		if (JFactory::getApplication()->getCfg('debug'))		{			self::$profiler = JProfiler::getInstance('FinderIndexer');		}		// Setup the stemmer.		if ($data->options->get('stem', 1) && $data->options->get('stemmer', 'porter_en'))		{			FinderIndexerHelper::$stemmer = FinderIndexerStemmer::getInstance($data->options->get('stemmer', 'porter_en'));		}		// Set the state.		self::$state = $data;		return self::$state;	}	/**	 * Method to set the indexer state.	 *	 * @param   object  $data  A new indexer state object.	 *	 * @return  boolean  True on success, false on failure.	 *	 * @since   2.5	 */	public static function setState($data)	{		// Check the state object.		if (empty($data) || !$data instanceof JObject)		{			return false;		}		// Set the new internal state.		self::$state = $data;		// Set the new session state.		$session = JFactory::getSession();		$session->set('_finder.state', $data);		return true;	}	/**	 * Method to reset the indexer state.	 *	 * @return  void	 *	 * @since   2.5	 */	public static function resetState()	{		// Reset the internal state to null.		self::$state = null;		// Reset the session state to null.		$session = JFactory::getSession();		$session->set('_finder.state', null);	}	/**	 * Method to index a content item.	 *	 * @param   FinderIndexerResult  $item    The content item to index.	 * @param   string               $format  The format of the content. [optional]	 *	 * @return  integer  The ID of the record in the links table.	 *	 * @since   2.5	 * @throws  Exception on database error.	 */	abstract public function index($item, $format = 'html');	/**	 * Method to remove a link from the index.	 *	 * @param   integer  $linkId  The id of the link.	 *	 * @return  boolean  True on success.	 *	 * @since   2.5	 * @throws  Exception on database error.	 */	abstract public function remove($linkId);	/**	 * Method to optimize the index. We use this method to remove unused terms	 * and any other optimizations that might be necessary.	 *	 * @return  boolean  True on success.	 *	 * @since   2.5	 * @throws  Exception on database error.	 */	abstract public function optimize();	/**	 * Method to get a content item's signature.	 *	 * @param   object  $item  The content item to index.	 *	 * @return  string  The content item's signature.	 *	 * @since   2.5	 */	protected static function getSignature($item)	{		// Get the indexer state.		$state = self::getState();		// Get the relevant configuration variables.		$config = array();		$config[] = $state->weights;		$config[] = $state->options->get('stem', 1);		$config[] = $state->options->get('stemmer', 'porter_en');		return md5(serialize(array($item, $config)));	}	/**	 * Method to parse input, tokenize it, and then add it to the database.	 *	 * @param   mixed    $input    String or resource to use as input. A resource	 *                             input will automatically be chunked to conserve	 *                             memory. Strings will be chunked if longer than	 *                             2K in size.	 * @param   integer  $context  The context of the input. See context constants.	 * @param   string   $lang     The language of the input.	 * @param   string   $format   The format of the input.	 *	 * @return  integer  The number of tokens extracted from the input.	 *	 * @since   2.5	 */	protected function tokenizeToDB($input, $context, $lang, $format)	{		$count = 0;		$buffer = null;		if (!empty($input))		{			// If the input is a resource, batch the process out.			if (is_resource($input))			{				// Batch the process out to avoid memory limits.				while (!feof($input))				{					// Read into the buffer.					$buffer .= fread($input, 2048);					// If we haven't reached the end of the file, seek to the last					// space character and drop whatever is after that to make sure					// we didn't truncate a term while reading the input.					if (!feof($input))					{						// Find the last space character.						$ls = strrpos($buffer, ' ');						// Adjust string based on the last space character.						if ($ls)						{							// Truncate the string to the last space character.							$string = substr($buffer, 0, $ls);							// Adjust the buffer based on the last space for the							// next iteration and trim.							$buffer = JString::trim(substr($buffer, $ls));						}						// No space character was found.						else						{							$string = $buffer;						}					}					// We've reached the end of the file, so parse whatever remains.					else					{						$string = $buffer;					}					// Parse the input.					$string = FinderIndexerHelper::parse($string, $format);					// Check the input.					if (empty($string))					{						continue;					}					// Tokenize the input.					$tokens = FinderIndexerHelper::tokenize($string, $lang);					// Add the tokens to the database.					$count += $this->addTokensToDB($tokens, $context);					// Check if we're approaching the memory limit of the token table.					if ($count > self::$state->options->get('memory_table_limit', 30000))					{						self::toggleTables(false);					}					unset($string);					unset($tokens);				}			}			// If the input is greater than 2K in size, it is more efficient to			// batch out the operation into smaller chunks of work.			elseif (strlen($input) > 2048)			{				$start = 0;				$end = strlen($input);				$chunk = 2048;				// As it turns out, the complex regular expressions we use for				// sanitizing input are not very efficient when given large				// strings. It is much faster to process lots of short strings.				while ($start < $end)				{					// Setup the string.					$string = substr($input, $start, $chunk);					// Find the last space character if we aren't at the end.					$ls = (($start + $chunk) < $end ? strrpos($string, ' ') : false);					// Truncate to the last space character.					if ($ls !== false)					{						$string = substr($string, 0, $ls);					}					// Adjust the start position for the next iteration.					$start += ($ls !== false ? ($ls + 1 - $chunk) + $chunk : $chunk);					// Parse the input.					$string = FinderIndexerHelper::parse($string, $format);					// Check the input.					if (empty($string))					{						continue;					}					// Tokenize the input.					$tokens = FinderIndexerHelper::tokenize($string, $lang);					// Add the tokens to the database.					$count += $this->addTokensToDB($tokens, $context);					// Check if we're approaching the memory limit of the token table.					if ($count > self::$state->options->get('memory_table_limit', 30000))					{						self::toggleTables(false);					}				}			}			else			{				// Parse the input.				$input = FinderIndexerHelper::parse($input, $format);				// Check the input.				if (empty($input))				{					return $count;				}				// Tokenize the input.				$tokens = FinderIndexerHelper::tokenize($input, $lang);				// Add the tokens to the database.				$count = $this->addTokensToDB($tokens, $context);			}		}		return $count;	}	/**	 * Method to add a set of tokens to the database.	 *	 * @param   mixed  $tokens   An array or single FinderIndexerToken object.	 * @param   mixed  $context  The context of the tokens. See context constants. [optional]	 *	 * @return  integer  The number of tokens inserted into the database.	 *	 * @since   2.5	 * @throws  Exception on database error.	 */	abstract protected function addTokensToDB($tokens, $context = '');	/**	 * Method to switch the token tables from Memory tables to MyISAM tables	 * when they are close to running out of memory.	 *	 * @param   boolean  $memory  Flag to control how they should be toggled.	 *	 * @return  boolean  True on success.	 *	 * @since   2.5	 * @throws  Exception on database error.	 */	abstract protected function toggleTables($memory);}
<?php/** * @package     Joomla.Platform * @subpackage  Database * * @copyright   Copyright (C) 2005 - 2013 Open Source Matters, Inc. All rights reserved. * @license     GNU General Public License version 2 or later; see LICENSE */defined('JPATH_PLATFORM') or die;/** * Oracle database iterator. * * @package     Joomla.Platform * @subpackage  Database * @since       12.1 */class JDatabaseIteratorOracle extends JDatabaseIteratorPdo{}
<?php/** * @package     Joomla.Administrator * @subpackage  com_cache * * @copyright   Copyright (C) 2005 - 2013 Open Source Matters, Inc. All rights reserved. * @license     GNU General Public License version 2 or later; see LICENSE.txt */defined('_JEXEC') or die;/** * Cache Model * * @package     Joomla.Administrator * @subpackage  com_cache * @since       1.6 */class CacheModelCache extends JModelList{	/**	 * An Array of CacheItems indexed by cache group ID	 *	 * @var Array	 */	protected $_data = array();	/**	 * Group total	 *	 * @var integer	 */	protected $_total = null;	/**	 * Pagination object	 *	 * @var object	 */	protected $_pagination = null;	/**	 * Method to auto-populate the model state.	 *	 * Note. Calling getState in this method will result in recursion.	 *	 * @since   1.6	 */	protected function populateState($ordering = null, $direction = null)	{		$clientId = $this->getUserStateFromRequest($this->context.'.filter.client_id', 'filter_client_id', 0, 'int');		$this->setState('clientId', $clientId == 1 ? 1 : 0);		$client	= JApplicationHelper::getClientInfo($clientId);		$this->setState('client', $client);		parent::populateState('group', 'asc');	}	/**	 * Method to get cache data	 *	 * @return array	 */	public function getData()	{		if (empty($this->_data))		{			$cache = $this->getCache();			$data  = $cache->getAll();			if ($data != false)			{				$this->_data = $data;				$this->_total = count($data);				if ($this->_total)				{					// Apply custom ordering					$ordering 	= $this->getState('list.ordering');					$direction 	= ($this->getState('list.direction') == 'asc') ? 1 : -1;					jimport('joomla.utilities.arrayhelper');					$this->_data = JArrayHelper::sortObjects($data, $ordering, $direction);					// Apply custom pagination					if ($this->_total > $this->getState('list.limit') && $this->getState('list.limit'))					{						$this->_data = array_slice($this->_data, $this->getState('list.start'), $this->getState('list.limit'));					}				}			} else {				$this->_data = array();			}		}		return $this->_data;	}	/**	 * Method to get cache instance	 *	 * @return object	 */	public function getCache()	{		$conf = JFactory::getConfig();		$options = array(			'defaultgroup'	=> '',			'storage' 		=> $conf->get('cache_handler', ''),			'caching'		=> true,			'cachebase'		=> ($this->getState('clientId') == 1) ? JPATH_ADMINISTRATOR . '/cache' : $conf->get('cache_path', JPATH_SITE . '/cache')		);		$cache = JCache::getInstance('', $options);		return $cache;	}	/**	 * Method to get client data	 *	 * @return array	 */	public function getClient()	{		return $this->getState('client');	}	/**	 * Get the number of current Cache Groups	 *	 * @return  int	 */	public function getTotal()	{		if (empty($this->_total))		{			$this->_total = count($this->getData());		}		return $this->_total;	}	/**	 * Method to get a pagination object for the cache	 *	 * @return  integer	 */	public function getPagination()	{		if (empty($this->_pagination))		{			$this->_pagination = new JPagination($this->getTotal(), $this->getState('list.start'), $this->getState('list.limit'));		}		return $this->_pagination;	}	/**	 * Clean out a cache group as named by param.	 * If no param is passed clean all cache groups.	 *	 * @param String $group	 */	public function clean($group = '')	{		$cache = $this->getCache();		$cache->clean($group);	}	public function cleanlist($array)	{		foreach ($array as $group)		{			$this->clean($group);		}	}	public function purge()	{		$cache = JFactory::getCache('');		return $cache->gc();	}}
<?php/** * @package     Joomla.Administrator * @subpackage  com_installer * * @copyright   Copyright (C) 2005 - 2013 Open Source Matters, Inc. All rights reserved. * @license     GNU General Public License version 2 or later; see LICENSE.txt */defined('_JEXEC') or die;include_once __DIR__ . '/../default/view.php';/** * Extension Manager Templates View * * @package     Joomla.Administrator * @subpackage  com_installer * @since       1.6 */class InstallerViewWarnings extends InstallerViewDefault{	/**	 * Display the view	 *	 * @param   string  $tpl  Template	 *	 * @return  void	 *	 * @since   1.6	 */	public function display($tpl = null)	{		$items = $this->get('Items');		$this->messages = &$items;		parent::display($tpl);	}	/**	 * Add the page title and toolbar.	 *	 * @return  void	 *	 * @since   1.6	 */	protected function addToolbar()	{		parent::addToolbar();		JToolbarHelper::help('JHELP_EXTENSIONS_EXTENSION_MANAGER_WARNINGS');	}}
<?php/** * @package     Joomla.Platform * @subpackage  Application * * @copyright   Copyright (C) 2005 - 2013 Open Source Matters, Inc. All rights reserved. * @license     GNU General Public License version 2 or later; see LICENSE */defined('JPATH_PLATFORM') or die;/** * Basic Web application router class for the Joomla Platform. * * @package     Joomla.Platform * @subpackage  Application * @since       12.2 */class JApplicationWebRouterBase extends JApplicationWebRouter{	/**	 * @var    array  An array of rules, each rule being an associative array('regex'=> $regex, 'vars' => $vars, 'controller' => $controller)	 *                for routing the request.	 * @since  12.2	 */	protected $maps = array();	/**	 * Add a route map to the router.  If the pattern already exists it will be overwritten.	 *	 * @param   string  $pattern     The route pattern to use for matching.	 * @param   string  $controller  The controller name to map to the given pattern.	 *	 * @return  JApplicationWebRouter  This object for method chaining.	 *	 * @since   12.2	 */	public function addMap($pattern, $controller)	{		// Sanitize and explode the pattern.		$pattern = explode('/', trim(parse_url((string) $pattern, PHP_URL_PATH), ' /'));		// Prepare the route variables		$vars = array();		// Initialize regular expression		$regex = array();		// Loop on each segment		foreach ($pattern as $segment)		{			// Match a splat with no variable.			if ($segment == '*')			{				$regex[] = '.*';			}			// Match a splat and capture the data to a named variable.			elseif ($segment[0] == '*')			{				$vars[] = substr($segment, 1);				$regex[] = '(.*)';			}			// Match an escaped splat segment.			elseif ($segment[0] == '\\' && $segment[1] == '*')			{				$regex[] = '\*' . preg_quote(substr($segment, 2));			}			// Match an unnamed variable without capture.			elseif ($segment == ':')			{				$regex[] = '[^/]*';			}			// Match a named variable and capture the data.			elseif ($segment[0] == ':')			{				$vars[] = substr($segment, 1);				$regex[] = '([^/]*)';			}			// Match a semgent with an escaped variable character prefix.			elseif ($segment[0] == '\\' && $segment[1] == ':')			{				$regex[] = preg_quote(substr($segment, 1));			}			// Match the standard segment.			else			{				$regex[] = preg_quote($segment);			}		}		$this->maps[] = array(			'regex' => chr(1) . '^' . implode('/', $regex) . '$' . chr(1),			'vars' => $vars,			'controller' => (string) $controller		);		return $this;	}	/**	 * Add a route map to the router.  If the pattern already exists it will be overwritten.	 *	 * @param   array  $maps  A list of route maps to add to the router as $pattern => $controller.	 *	 * @return  JApplicationWebRouter  This object for method chaining.	 *	 * @since   12.2	 */	public function addMaps($maps)	{		foreach ($maps as $pattern => $controller)		{			$this->addMap($pattern, $controller);		}		return $this;	}	/**	 * Parse the given route and return the name of a controller mapped to the given route.	 *	 * @param   string  $route  The route string for which to find and execute a controller.	 *	 * @return  string  The controller name for the given route excluding prefix.	 *	 * @since   12.2	 * @throws  InvalidArgumentException	 */	protected function parseRoute($route)	{		$controller = false;		// Trim the query string off.		$route = preg_replace('/([^?]*).*/u', '\1', $route);		// Sanitize and explode the route.		$route = trim(parse_url($route, PHP_URL_PATH), ' /');		// If the route is empty then simply return the default route.  No parsing necessary.		if ($route == '')		{			return $this->default;		}		// Iterate through all of the known route maps looking for a match.		foreach ($this->maps as $rule)		{			if (preg_match($rule['regex'], $route, $matches))			{				// If we have gotten this far then we have a positive match.				$controller = $rule['controller'];				// Time to set the input variables.				// We are only going to set them if they don't already exist to avoid overwriting things.				foreach ($rule['vars'] as $i => $var)				{					$this->input->def($var, $matches[$i + 1]);					// Don't forget to do an explicit set on the GET superglobal.					$this->input->get->def($var, $matches[$i + 1]);				}				$this->input->def('_rawRoute', $route);				break;			}		}		// We were unable to find a route match for the request.  Panic.		if (!$controller)		{			throw new InvalidArgumentException(sprintf('Unable to handle request for route `%s`.', $route), 404);		}		return $controller;	}}
<?php/** * @package    Joomla.Cli * * @copyright  Copyright (C) 2005 - 2013 Open Source Matters, Inc. All rights reserved. * @license    GNU General Public License version 2 or later; see LICENSE.txt *//** * Finder CLI Bootstrap * * Run the framework bootstrap with a couple of mods based on the script's needs */// We are a valid entry point.const _JEXEC = 1;// Load system definesif (file_exists(dirname(__DIR__) . '/defines.php')){	require_once dirname(__DIR__) . '/defines.php';}if (!defined('_JDEFINES')){	define('JPATH_BASE', dirname(__DIR__));	require_once JPATH_BASE . '/includes/defines.php';}// Get the framework.require_once JPATH_LIBRARIES . '/import.legacy.php';// Bootstrap the CMS libraries.require_once JPATH_LIBRARIES . '/cms.php';// Import the configuration.require_once JPATH_CONFIGURATION . '/configuration.php';// System configuration.$config = new JConfig;// Configure error reporting to maximum for CLI output.error_reporting(E_ALL);ini_set('display_errors', 1);// Load Library language$lang = JFactory::getLanguage();// Try the finder_cli file in the current language (without allowing the loading of the file in the default language)$lang->load('finder_cli', JPATH_SITE, null, false, false)// Fallback to the finder_cli file in the default language|| $lang->load('finder_cli', JPATH_SITE, null, true);/** * A command line cron job to run the Finder indexer. * * @package     Joomla.CLI * @subpackage  com_finder * @since       2.5 */class FinderCli extends JApplicationCli{	/**	 * Start time for the index process	 *	 * @var    string	 * @since  2.5	 */	private $_time = null;	/**	 * Start time for each batch	 *	 * @var    string	 * @since  2.5	 */	private $_qtime = null;	/**	 * Entry point for Finder CLI script	 *	 * @return  void	 *	 * @since   2.5	 */	public function doExecute()	{		// Print a blank line.		$this->out(JText::_('FINDER_CLI'));		$this->out('============================');		$this->out();		$this->_index();		// Print a blank line at the end.		$this->out();	}	/**	 * Run the indexer	 *	 * @return  void	 *	 * @since   2.5	 */	private function _index()	{		$this->_time = microtime(true);		require_once JPATH_ADMINISTRATOR . '/components/com_finder/helpers/indexer/indexer.php';		// Fool the system into thinking we are running as JSite with Finder as the active component		JFactory::getApplication('site');		$_SERVER['HTTP_HOST'] = 'domain.com';		define('JPATH_COMPONENT_ADMINISTRATOR', JPATH_ADMINISTRATOR . '/components/com_finder');		// Disable caching.		$config = JFactory::getConfig();		$config->set('caching', 0);		$config->set('cache_handler', 'file');		// Reset the indexer state.		FinderIndexer::resetState();		// Import the finder plugins.		JPluginHelper::importPlugin('finder');		// Starting Indexer.		$this->out(JText::_('FINDER_CLI_STARTING_INDEXER'), true);		// Trigger the onStartIndex event.		JEventDispatcher::getInstance()->trigger('onStartIndex');		// Remove the script time limit.		@set_time_limit(0);		// Get the indexer state.		$state = FinderIndexer::getState();		// Setting up plugins.		$this->out(JText::_('FINDER_CLI_SETTING_UP_PLUGINS'), true);		// Trigger the onBeforeIndex event.		JEventDispatcher::getInstance()->trigger('onBeforeIndex');		// Startup reporting.		$this->out(JText::sprintf('FINDER_CLI_SETUP_ITEMS', $state->totalItems, round(microtime(true) - $this->_time, 3)), true);		// Get the number of batches.		$t = (int) $state->totalItems;		$c = (int) ceil($t / $state->batchSize);		$c = $c === 0 ? 1 : $c;		try		{			// Process the batches.			for ($i = 0; $i < $c; $i++)			{				// Set the batch start time.				$this->_qtime = microtime(true);				// Reset the batch offset.				$state->batchOffset = 0;				// Trigger the onBuildIndex event.				JEventDispatcher::getInstance()->trigger('onBuildIndex');				// Batch reporting.				$this->out(JText::sprintf('FINDER_CLI_BATCH_COMPLETE', ($i + 1), round(microtime(true) - $this->_qtime, 3)), true);			}		}		catch (Exception $e)		{			// Display the error			$this->out($e->getMessage(), true);			// Reset the indexer state.			FinderIndexer::resetState();			// Close the app			$this->close($e->getCode());		}		// Total reporting.		$this->out(JText::sprintf('FINDER_CLI_PROCESS_COMPLETE', round(microtime(true) - $this->_time, 3)), true);		// Reset the indexer state.		FinderIndexer::resetState();	}}// Instantiate the application object, passing the class name to JCli::getInstance// and use chaining to execute the application.JApplicationCli::getInstance('FinderCli')->execute();
<?php/** * @package     Joomla.Administrator * @subpackage  Template.hathor * * @copyright   Copyright (C) 2005 - 2013 Open Source Matters, Inc. All rights reserved. * @license     GNU General Public License version 2 or later; see LICENSE.txt */defined('_JEXEC') or die;?><fieldset class="adminform">	<legend><?php echo JText::_('COM_ADMIN_SYSTEM_INFORMATION'); ?></legend>	<table class="adminlist">		<thead>			<tr>				<th width="250">					<?php echo JText::_('COM_ADMIN_SETTING'); ?>				</th>				<th>					<?php echo JText::_('COM_ADMIN_VALUE'); ?>				</th>			</tr>		</thead>		<tfoot>			<tr>				<td colspan="2">&#160;				</td>			</tr>		</tfoot>		<tbody>			<tr>				<td>					<strong><?php echo JText::_('COM_ADMIN_PHP_BUILT_ON'); ?></strong>				</td>				<td>					<?php echo $this->info['php'];?>				</td>			</tr>			<tr>				<td>					<strong><?php echo JText::_('COM_ADMIN_DATABASE_VERSION'); ?></strong>				</td>				<td>					<?php echo $this->info['dbversion'];?>				</td>			</tr>			<tr>				<td>					<strong><?php echo JText::_('COM_ADMIN_DATABASE_COLLATION'); ?></strong>				</td>				<td>					<?php echo $this->info['dbcollation'];?>				</td>			</tr>			<tr>				<td>					<strong><?php echo JText::_('COM_ADMIN_PHP_VERSION'); ?></strong>				</td>				<td>					<?php echo $this->info['phpversion'];?>				</td>			</tr>			<tr>				<td>					<strong><?php echo JText::_('COM_ADMIN_WEB_SERVER'); ?></strong>				</td>				<td>					<?php echo JHtml::_('system.server', $this->info['server']); ?>				</td>			</tr>			<tr>				<td>					<strong><?php echo JText::_('COM_ADMIN_WEBSERVER_TO_PHP_INTERFACE'); ?></strong>				</td>				<td>					<?php echo $this->info['sapi_name'];?>				</td>			</tr>			<tr>				<td>					<strong><?php echo JText::_('COM_ADMIN_JOOMLA_VERSION'); ?></strong>				</td>				<td>					<?php echo $this->info['version'];?>				</td>			</tr>			<tr>				<td>					<strong><?php echo JText::_('COM_ADMIN_PLATFORM_VERSION'); ?></strong>				</td>				<td>					<?php echo $this->info['platform'];?>				</td>			</tr>			<tr>				<td>					<strong><?php echo JText::_('COM_ADMIN_USER_AGENT'); ?></strong>				</td>				<td>					<?php echo $this->info['useragent'];?>				</td>			</tr>		</tbody>	</table></fieldset>
<?php/*** @version $Id$* @package utf8* @subpackage strings*///---------------------------------------------------------------/*** UTF-8 aware alternative to ucwords* Uppercase the first character of each word in a string* Note: requires utf8_substr_replace and utf8_strtoupper* @param string* @return string with first char of each word uppercase* @see http://www.php.net/ucwords* @package utf8* @subpackage strings*/function utf8_ucwords($str) {    // Note: [\x0c\x09\x0b\x0a\x0d\x20] matches;    // form feeds, horizontal tabs, vertical tabs, linefeeds and carriage returns    // This corresponds to the definition of a "word" defined at http://www.php.net/ucwords    $pattern = '/(^|([\x0c\x09\x0b\x0a\x0d\x20]+))([^\x0c\x09\x0b\x0a\x0d\x20]{1})[^\x0c\x09\x0b\x0a\x0d\x20]*/u';    return preg_replace_callback($pattern, 'utf8_ucwords_callback',$str);}//---------------------------------------------------------------/*** Callback function for preg_replace_callback call in utf8_ucwords* You don't need to call this yourself* @param array of matches corresponding to a single word* @return string with first char of the word in uppercase* @see utf8_ucwords* @see utf8_strtoupper* @package utf8* @subpackage strings*/function utf8_ucwords_callback($matches) {    $leadingws = $matches[2];    $ucfirst = utf8_strtoupper($matches[3]);    $ucword = utf8_substr_replace(ltrim($matches[0]),$ucfirst,0,1);    return $leadingws . $ucword;}
<?php/** * @package     Joomla.Platform * @subpackage  Input * * @copyright   Copyright (C) 2005 - 2013 Open Source Matters, Inc. All rights reserved. * @license     GNU General Public License version 2 or later; see LICENSE */defined('JPATH_PLATFORM') or die;/** * Joomla! Input JSON Class * * This class decodes a JSON string from the raw request data and makes it available via * the standard JInput interface. * * @package     Joomla.Platform * @subpackage  Input * @since       12.2 */class JInputJSON extends JInput{	/**	 * @var    string  The raw JSON string from the request.	 * @since  12.2	 */	private $_raw;	/**	 * Constructor.	 *	 * @param   array  $source   Source data (Optional, default is the raw HTTP input decoded from JSON)	 * @param   array  $options  Array of configuration parameters (Optional)	 *	 * @since   12.2	 */	public function __construct(array $source = null, array $options = array())	{		if (isset($options['filter']))		{			$this->filter = $options['filter'];		}		else		{			$this->filter = JFilterInput::getInstance();		}		if (is_null($source))		{			$this->_raw = file_get_contents('php://input');			$this->data = json_decode($this->_raw, true);		}		else		{			$this->data = & $source;		}		// Set the options for the class.		$this->options = $options;	}	/**	 * Gets the raw JSON string from the request.	 *	 * @return  string  The raw JSON string from the request.	 *	 * @since   12.2	 */	public function getRaw()	{		return $this->_raw;	}}
<?php/** * @package     Joomla.Administrator * @subpackage  com_languages * * @copyright   Copyright (C) 2005 - 2013 Open Source Matters, Inc. All rights reserved. * @license     GNU General Public License version 2 or later; see LICENSE.txt */defined('_JEXEC') or die;/** * View to edit an language override * * @package     Joomla.Administrator * @subpackage  com_languages * @since       2.5 */class LanguagesViewOverride extends JViewLegacy{	/**	 * The form to use for the view	 *	 * @var		object	 * @since	2.5	 */	protected $form;	/**	 * The item to edit	 *	 * @var		object	 * @since	2.5	 */	protected $item;	/**	 * The model state	 *	 * @var		object	 * @since	2.5	 */	protected $state;	/**	 * Displays the view	 *	 * @param   	string	$tpl	The name of the template file to parse	 *	 * @return  void	 *	 * @since		2.5	 */	public function display($tpl = null)	{		JHtml::_('stylesheet', 'overrider/overrider.css', array(), true);		JHtml::_('behavior.framework');		JHtml::_('script', 'overrider/overrider.js', false, true);		$this->form  = $this->get('Form');		$this->item  = $this->get('Item');		$this->state = $this->get('State');		// Check for errors		if (count($errors = $this->get('Errors')))		{			throw new Exception(implode("\n", $errors));		}		// Check whether the cache has to be refreshed		$cached_time = JFactory::getApplication()->getUserState('com_languages.overrides.cachedtime.'.$this->state->get('filter.client').'.'.$this->state->get('filter.language'), 0);		if (time() - $cached_time > 60 * 5)		{			$this->state->set('cache_expired', true);		}		// Add strings for translations in Javascript		JText::script('COM_LANGUAGES_VIEW_OVERRIDE_NO_RESULTS');		JText::script('COM_LANGUAGES_VIEW_OVERRIDE_REQUEST_ERROR');		$this->addToolbar();		parent::display($tpl);	}	/**	 * Adds the page title and toolbar	 *	 * @return void	 *	 * @since	2.5	 */	protected function addToolbar()	{		JFactory::getApplication()->input->set('hidemainmenu', true);		$canDo	= LanguagesHelper::getActions();		JToolbarHelper::title(JText::_('COM_LANGUAGES_VIEW_OVERRIDE_EDIT_TITLE'), 'langmanager');		if ($canDo->get('core.edit'))		{			JToolbarHelper::apply('override.apply');			JToolbarHelper::save('override.save');		}		// This component does not support Save as Copy		if ($canDo->get('core.edit') && $canDo->get('core.create'))		{			JToolbarHelper::save2new('override.save2new');		}		if (empty($this->item->key))		{			JToolbarHelper::cancel('override.cancel');		}		else		{			JToolbarHelper::cancel('override.cancel', 'JTOOLBAR_CLOSE');		}		JToolbarHelper::divider();		JToolbarHelper::help('JHELP_EXTENSIONS_LANGUAGE_MANAGER_OVERRIDES_EDIT');	}}
<?php/*** Locate a byte index given a UTF-8 character index* @version $Id$* @package utf8* @subpackage position*///--------------------------------------------------------------------/*** Given a string and a character index in the string, in* terms of the UTF-8 character position, returns the byte* index of that character. Can be useful when you want to* PHP's native string functions but we warned, locating* the byte can be expensive* Takes variable number of parameters - first must be* the search string then 1 to n UTF-8 character positions* to obtain byte indexes for - it is more efficient to search* the string for multiple characters at once, than make* repeated calls to this function** @author Chris Smith<chris@jalakai.co.uk>* @param string string to locate index in* @param int (n times)* @return mixed - int if only one input int, array if more* @return boolean TRUE if it's all ASCII* @package utf8* @subpackage position*/function utf8_byte_position() {    $args = func_get_args();    $str =& array_shift($args);    if (!is_string($str)) return false;    $result = array();    // trivial byte index, character offset pair    $prev = array(0,0);    // use a short piece of str to estimate bytes per character    // $i (& $j) -> byte indexes into $str    $i = utf8_locate_next_chr($str, 300);    // $c -> character offset into $str    $c = strlen(utf8_decode(substr($str,0,$i)));    // deal with arguments from lowest to highest    sort($args);    foreach ($args as $offset) {        // sanity checks FIXME        // 0 is an easy check        if ($offset == 0) { $result[] = 0; continue; }        // ensure no endless looping        $safety_valve = 50;        do {            if ( ($c - $prev[1]) == 0 ) {                // Hack: gone past end of string                $error = 0;                $i = strlen($str);                break;            }            $j = $i + (int)(($offset-$c) * ($i - $prev[0]) / ($c - $prev[1]));            // correct to utf8 character boundary            $j = utf8_locate_next_chr($str, $j);            // save the index, offset for use next iteration            $prev = array($i,$c);            if ($j > $i) {                // determine new character offset                $c += strlen(utf8_decode(substr($str,$i,$j-$i)));            } else {                // ditto                $c -= strlen(utf8_decode(substr($str,$j,$i-$j)));            }            $error = abs($c-$offset);            // ready for next time around            $i = $j;        // from 7 it is faster to iterate over the string        } while ( ($error > 7) && --$safety_valve) ;        if ($error && $error <= 7) {            if ($c < $offset) {                // move up                while ($error--) { $i = utf8_locate_next_chr($str,++$i); }            } else {                // move down                while ($error--) { $i = utf8_locate_current_chr($str,--$i); }            }            // ready for next arg            $c = $offset;        }        $result[] = $i;    }    if ( count($result) == 1 ) {        return $result[0];    }    return $result;}//--------------------------------------------------------------------/*** Given a string and any byte index, returns the byte index* of the start of the current UTF-8 character, relative to supplied* position. If the current character begins at the same place as the* supplied byte index, that byte index will be returned. Otherwise* this function will step backwards, looking for the index where* curent UTF-8 character begins* @author Chris Smith<chris@jalakai.co.uk>* @param string* @param int byte index in the string* @return int byte index of start of next UTF-8 character* @package utf8* @subpackage position*/function utf8_locate_current_chr( &$str, $idx ) {    if ($idx <= 0) return 0;    $limit = strlen($str);    if ($idx >= $limit) return $limit;    // Binary value for any byte after the first in a multi-byte UTF-8 character    // will be like 10xxxxxx so & 0xC0 can be used to detect this kind    // of byte - assuming well formed UTF-8    while ($idx && ((ord($str[$idx]) & 0xC0) == 0x80)) $idx--;    return $idx;}//--------------------------------------------------------------------/*** Given a string and any byte index, returns the byte index* of the start of the next UTF-8 character, relative to supplied* position. If the next character begins at the same place as the* supplied byte index, that byte index will be returned.* @author Chris Smith<chris@jalakai.co.uk>* @param string* @param int byte index in the string* @return int byte index of start of next UTF-8 character* @package utf8* @subpackage position*/function utf8_locate_next_chr( &$str, $idx ) {    if ($idx <= 0) return 0;    $limit = strlen($str);    if ($idx >= $limit) return $limit;    // Binary value for any byte after the first in a multi-byte UTF-8 character    // will be like 10xxxxxx so & 0xC0 can be used to detect this kind    // of byte - assuming well formed UTF-8    while (($idx < $limit) && ((ord($str[$idx]) & 0xC0) == 0x80)) $idx++;    return $idx;}
<?php/** * Generic_Sniffs_WhiteSpace_DisallowSpaceIndentSniff. * * PHP version 5 * * @category  PHP * @package   PHP_CodeSniffer * @author    Greg Sherwood <gsherwood@squiz.net> * @author    Marc McIntyre <mmcintyre@squiz.net> * @copyright 2006 Squiz Pty Ltd (ABN 77 084 670 600) * @license   http://matrix.squiz.net/developer/tools/php_cs/licence BSD Licence * @version   CVS: $Id$ * @link      http://pear.php.net/package/PHP_CodeSniffer *//** * Generic_Sniffs_WhiteSpace_DisallowSpaceIndentSniff. * * Throws errors if spaces are used for indentation. * * @category  PHP * @package   PHP_CodeSniffer * @author    Greg Sherwood <gsherwood@squiz.net> * @author    Marc McIntyre <mmcintyre@squiz.net> * @copyright 2006 Squiz Pty Ltd (ABN 77 084 670 600) * @license   http://matrix.squiz.net/developer/tools/php_cs/licence BSD Licence * @version   Release: @package_version@ * @link      http://pear.php.net/package/PHP_CodeSniffer */class Joomla_Sniffs_WhiteSpace_DisallowSpaceIndentSniff implements PHP_CodeSniffer_Sniff{    /**     * A list of tokenizers this sniff supports.     *     * @var array     */    public $supportedTokenizers = array(                                   'PHP',                                   'JS',                                   'CSS',                                  );    /**     * Returns an array of tokens this test wants to listen for.     *     * @return array     */    public function register()    {        return array(T_WHITESPACE);    }//end register()    /**     * Processes this test, when one of its tokens is encountered.     *     * @param PHP_CodeSniffer_File $phpcsFile All the tokens found in the document.     * @param int                  $stackPtr  The position of the current token in     *                                        the stack passed in $tokens.     *     * @return void     */    public function process(PHP_CodeSniffer_File $phpcsFile, $stackPtr)    {        $tokens = $phpcsFile->getTokens();        // Make sure this is whitespace used for indentation.        $line = $tokens[$stackPtr]['line'];        if ($stackPtr > 0 && $tokens[($stackPtr - 1)]['line'] === $line) {            return;        }        if (strpos($tokens[$stackPtr]['content'], " ") !== false) {            $error = 'Tabs must be used to indent lines; spaces are not allowed';            $phpcsFile->addError($error, $stackPtr, 'SpaceUsed');        }    }//end process()}//end class?>
<?php/** * @package     Joomla.Administrator * @subpackage  mod_submenu * * @copyright   Copyright (C) 2005 - 2013 Open Source Matters, Inc. All rights reserved. * @license     GNU General Public License version 2 or later; see LICENSE.txt */defined('_JEXEC') or die;$list    = JSubMenuHelper::getEntries();$filters = JSubMenuHelper::getFilters();$action  = JSubMenuHelper::getAction();$displayMenu    = count($list);$displayFilters = count($filters);$hide = JFactory::getApplication()->input->getBool('hidemainmenu');if ($displayMenu || $displayFilters){	require JModuleHelper::getLayoutPath('mod_submenu', $params->get('layout', 'default'));}
<?php/** * @package     Joomla.Site * @subpackage  com_content * * @copyright   Copyright (C) 2005 - 2013 Open Source Matters, Inc. All rights reserved. * @license     GNU General Public License version 2 or later; see LICENSE.txt */defined('_JEXEC') or die;require_once __DIR__ . '/articles.php';/** * Content Component Archive Model * * @package     Joomla.Site * @subpackage  com_content * @since       1.5 */class ContentModelArchive extends ContentModelArticles{	/**	 * Model context string.	 *	 * @var		string	 */	public $_context = 'com_content.archive';	/**	 * Method to auto-populate the model state.	 *	 * Note. Calling getState in this method will result in recursion.	 *	 * @since   1.6	 */	protected function populateState($ordering = null, $direction = null)	{		parent::populateState();		$app = JFactory::getApplication();		// Add archive properties		$params = $this->state->params;		// Filter on archived articles		$this->setState('filter.published', 2);		// Filter on month, year		$this->setState('filter.month', $app->input->getInt('month'));		$this->setState('filter.year', $app->input->getInt('year'));		// Optional filter text		$this->setState('list.filter', $app->input->getString('filter-search'));		// Get list limit		$itemid = $app->input->get('Itemid', 0, 'int');		$limit = $app->getUserStateFromRequest('com_content.archive.list' . $itemid . '.limit', 'limit', $params->get('display_num'), 'uint');		$this->setState('list.limit', $limit);	}	/**	 * @return  JDatabaseQuery	 */	protected function getListQuery()	{		// Set the archive ordering		$params = $this->state->params;		$articleOrderby = $params->get('orderby_sec', 'rdate');		$articleOrderDate = $params->get('order_date');		// No category ordering		$categoryOrderby = '';		$secondary = ContentHelperQuery::orderbySecondary($articleOrderby, $articleOrderDate) . ', ';		$primary = ContentHelperQuery::orderbyPrimary($categoryOrderby);		$orderby = $primary . ' ' . $secondary . ' a.created DESC ';		$this->setState('list.ordering', $orderby);		$this->setState('list.direction', '');		// Create a new query object.		$query = parent::getListQuery();			// Add routing for archive			//sqlsrv changes		$case_when = ' CASE WHEN ';		$case_when .= $query->charLength('a.alias', '!=', '0');		$case_when .= ' THEN ';		$a_id = $query->castAsChar('a.id');		$case_when .= $query->concatenate(array($a_id, 'a.alias'), ':');		$case_when .= ' ELSE ';		$case_when .= $a_id.' END as slug';		$query->select($case_when);		$case_when = ' CASE WHEN ';		$case_when .= $query->charLength('c.alias', '!=', '0');		$case_when .= ' THEN ';		$c_id = $query->castAsChar('c.id');		$case_when .= $query->concatenate(array($c_id, 'c.alias'), ':');		$case_when .= ' ELSE ';		$case_when .= $c_id.' END as catslug';		$query->select($case_when);		// Filter on month, year		// First, get the date field		$queryDate = ContentHelperQuery::getQueryDate($articleOrderDate);		if ($month = $this->getState('filter.month'))		{			$query->where('MONTH('. $queryDate . ') = ' . $month);		}		if ($year = $this->getState('filter.year'))		{			$query->where('YEAR('. $queryDate . ') = ' . $year);		}		//echo nl2br(str_replace('#__','jos_',$query));		return $query;	}	/**	 * Method to get the archived article list	 *	 * @access public	 * @return array	 */	public function getData()	{		$app = JFactory::getApplication();		// Lets load the content if it doesn't already exist		if (empty($this->_data))		{			// Get the page/component configuration			$params = $app->getParams();			// Get the pagination request variables			$limit		= $app->input->get('limit', $params->get('display_num', 20), 'uint');			$limitstart	= $app->input->get('limitstart', 0, 'uint');			$query = $this->_buildQuery();			$this->_data = $this->_getList($query, $limitstart, $limit);		}		return $this->_data;	}	// JModelLegacy override to add alternating value for $odd	protected function _getList($query, $limitstart=0, $limit=0)	{		$result = parent::_getList($query, $limitstart, $limit);		$odd = 1;		foreach ($result as $k => $row)		{			$result[$k]->odd = $odd;			$odd = 1 - $odd;		}		return $result;	}}
<?php/** * @package     Joomla.Site * @subpackage  com_users * * @copyright   Copyright (C) 2005 - 2013 Open Source Matters, Inc. All rights reserved. * @license     GNU General Public License version 2 or later; see LICENSE.txt */defined('_JEXEC') or die;/** * Registration view class for Users. * * @package     Joomla.Site * @subpackage  com_users * @since       1.5 */class UsersViewRemind extends JViewLegacy{	protected $form;	protected $params;	protected $state;	/**	 * Method to display the view.	 *	 * @param   string	$tpl	The template file to include	 * @since   1.5	 */	public function display($tpl = null)	{		// Get the view data.		$this->form		= $this->get('Form');		$this->state	= $this->get('State');		$this->params	= $this->state->params;		// Check for errors.		if (count($errors = $this->get('Errors')))		{			JError::raiseError(500, implode('<br />', $errors));			return false;		}		// Check for layout override		$active = JFactory::getApplication()->getMenu()->getActive();		if (isset($active->query['layout']))		{			$this->setLayout($active->query['layout']);		}		//Escape strings for HTML output		$this->pageclass_sfx = htmlspecialchars($this->params->get('pageclass_sfx'));		$this->prepareDocument();		parent::display($tpl);	}	/**	 * Prepares the document.	 *	 * @since   1.6	 */	protected function prepareDocument()	{		$app		= JFactory::getApplication();		$menus		= $app->getMenu();		$title 		= null;		// Because the application sets a default page title,		// we need to get it from the menu item itself		$menu = $menus->getActive();		if ($menu)		{			$this->params->def('page_heading', $this->params->get('page_title', $menu->title));		}		else		{			$this->params->def('page_heading', JText::_('COM_USERS_REMIND'));		}		$title = $this->params->get('page_title', '');		if (empty($title))		{			$title = $app->getCfg('sitename');		}		elseif ($app->getCfg('sitename_pagetitles', 0) == 1)		{			$title = JText::sprintf('JPAGETITLE', $app->getCfg('sitename'), $title);		}		elseif ($app->getCfg('sitename_pagetitles', 0) == 2)		{			$title = JText::sprintf('JPAGETITLE', $title, $app->getCfg('sitename'));		}		$this->document->setTitle($title);		if ($this->params->get('menu-meta_description'))		{			$this->document->setDescription($this->params->get('menu-meta_description'));		}		if ($this->params->get('menu-meta_keywords'))		{			$this->document->setMetadata('keywords', $this->params->get('menu-meta_keywords'));		}		if ($this->params->get('robots'))		{			$this->document->setMetadata('robots', $this->params->get('robots'));		}	}}
<?php/** * @package     Joomla.Platform * @subpackage  Language * * @copyright   Copyright (C) 2005 - 2013 Open Source Matters, Inc. All rights reserved. * @license     GNU General Public License version 2 or later; see LICENSE */defined('JPATH_PLATFORM') or die;/** * Text handling class. * * @package     Joomla.Platform * @subpackage  Language * @since       11.1 */class JText{	/**	 * javascript strings	 *	 * @var    array	 * @since  11.1	 */	protected static $strings = array();	/**	 * Translates a string into the current language.	 *	 * Examples:	 * <script>alert(Joomla.JText._('<?php echo JText::_("JDEFAULT", array("script"=>true));?>'));</script>	 * will generate an alert message containing 'Default'	 * <?php echo JText::_("JDEFAULT");?> it will generate a 'Default' string	 *	 * @param   string   $string                The string to translate.	 * @param   mixed    $jsSafe                Boolean: Make the result javascript safe.	 * @param   boolean  $interpretBackSlashes  To interpret backslashes (\\=\, \n=carriage return, \t=tabulation)	 * @param   boolean  $script                To indicate that the string will be push in the javascript language store	 *	 * @return  string  The translated string or the key is $script is true	 *	 * @since   11.1	 */	public static function _($string, $jsSafe = false, $interpretBackSlashes = true, $script = false)	{		$lang = JFactory::getLanguage();		if (is_array($jsSafe))		{			if (array_key_exists('interpretBackSlashes', $jsSafe))			{				$interpretBackSlashes = (boolean) $jsSafe['interpretBackSlashes'];			}			if (array_key_exists('script', $jsSafe))			{				$script = (boolean) $jsSafe['script'];			}			if (array_key_exists('jsSafe', $jsSafe))			{				$jsSafe = (boolean) $jsSafe['jsSafe'];			}			else			{				$jsSafe = false;			}		}		if ($script)		{			self::$strings[$string] = $lang->_($string, $jsSafe, $interpretBackSlashes);			return $string;		}		else		{			return $lang->_($string, $jsSafe, $interpretBackSlashes);		}	}	/**	 * Translates a string into the current language.	 *	 * Examples:	 * <?php echo JText::alt("JALL","language");?> it will generate a 'All' string in English but a "Toutes" string in French	 * <?php echo JText::alt("JALL","module");?> it will generate a 'All' string in English but a "Tous" string in French	 *	 * @param   string   $string                The string to translate.	 * @param   string   $alt                   The alternate option for global string	 * @param   mixed    $jsSafe                Boolean: Make the result javascript safe.	 * @param   boolean  $interpretBackSlashes  To interpret backslashes (\\=\, \n=carriage return, \t=tabulation)	 * @param   boolean  $script                To indicate that the string will be pushed in the javascript language store	 *	 * @return  string  The translated string or the key if $script is true	 *	 * @since   11.1	 */	public static function alt($string, $alt, $jsSafe = false, $interpretBackSlashes = true, $script = false)	{		$lang = JFactory::getLanguage();		if ($lang->hasKey($string . '_' . $alt))		{			return self::_($string . '_' . $alt, $jsSafe, $interpretBackSlashes);		}		else		{			return self::_($string, $jsSafe, $interpretBackSlashes);		}	}	/**	 * Like JText::sprintf but tries to pluralise the string.	 *	 * Note that this method can take a mixed number of arguments as for the sprintf function.	 *	 * The last argument can take an array of options:	 *	 * array('jsSafe'=>boolean, 'interpretBackSlashes'=>boolean, 'script'=>boolean)	 *	 * where:	 *	 * jsSafe is a boolean to generate a javascript safe strings.	 * interpretBackSlashes is a boolean to interpret backslashes \\->\, \n->new line, \t->tabulation.	 * script is a boolean to indicate that the string will be push in the javascript language store.	 *	 * Examples:	 * <script>alert(Joomla.JText._('<?php echo JText::plural("COM_PLUGINS_N_ITEMS_UNPUBLISHED", 1, array("script"=>true));?>'));</script>	 * will generate an alert message containing '1 plugin successfully disabled'	 * <?php echo JText::plural("COM_PLUGINS_N_ITEMS_UNPUBLISHED", 1);?> it will generate a '1 plugin successfully disabled' string	 *	 * @param   string   $string  The format string.	 * @param   integer  $n       The number of items	 *	 * @return  string  The translated strings or the key if 'script' is true in the array of options	 *	 * @since   11.1	 */	public static function plural($string, $n)	{		$lang = JFactory::getLanguage();		$args = func_get_args();		$count = count($args);		if ($count > 1)		{			// Try the key from the language plural potential suffixes			$found = false;			$suffixes = $lang->getPluralSuffixes((int) $n);			array_unshift($suffixes, (int) $n);			foreach ($suffixes as $suffix)			{				$key = $string . '_' . $suffix;				if ($lang->hasKey($key))				{					$found = true;					break;				}			}			if (!$found)			{				// Not found so revert to the original.				$key = $string;			}			if (is_array($args[$count - 1]))			{				$args[0] = $lang->_(					$key, array_key_exists('jsSafe', $args[$count - 1]) ? $args[$count - 1]['jsSafe'] : false,					array_key_exists('interpretBackSlashes', $args[$count - 1]) ? $args[$count - 1]['interpretBackSlashes'] : true				);				if (array_key_exists('script', $args[$count - 1]) && $args[$count - 1]['script'])				{					self::$strings[$key] = call_user_func_array('sprintf', $args);					return $key;				}			}			else			{				$args[0] = $lang->_($key);			}			return call_user_func_array('sprintf', $args);		}		elseif ($count > 0)		{			// Default to the normal sprintf handling.			$args[0] = $lang->_($string);			return call_user_func_array('sprintf', $args);		}		return '';	}	/**	 * Passes a string thru a sprintf.	 *	 * Note that this method can take a mixed number of arguments as for the sprintf function.	 *	 * The last argument can take an array of options:	 *	 * array('jsSafe'=>boolean, 'interpretBackSlashes'=>boolean, 'script'=>boolean)	 *	 * where:	 *	 * jsSafe is a boolean to generate a javascript safe strings.	 * interpretBackSlashes is a boolean to interpret backslashes \\->\, \n->new line, \t->tabulation.	 * script is a boolean to indicate that the string will be push in the javascript language store.	 *	 * @param   string  $string  The format string.	 *	 * @return  string  The translated strings or the key if 'script' is true in the array of options.	 *	 * @since   11.1	 */	public static function sprintf($string)	{		$lang = JFactory::getLanguage();		$args = func_get_args();		$count = count($args);		if ($count > 0)		{			if (is_array($args[$count - 1]))			{				$args[0] = $lang->_(					$string, array_key_exists('jsSafe', $args[$count - 1]) ? $args[$count - 1]['jsSafe'] : false,					array_key_exists('interpretBackSlashes', $args[$count - 1]) ? $args[$count - 1]['interpretBackSlashes'] : true				);				if (array_key_exists('script', $args[$count - 1]) && $args[$count - 1]['script'])				{					self::$strings[$string] = call_user_func_array('sprintf', $args);					return $string;				}			}			else			{				$args[0] = $lang->_($string);			}			return call_user_func_array('sprintf', $args);		}		return '';	}	/**	 * Passes a string thru an printf.	 *	 * Note that this method can take a mixed number of arguments as for the sprintf function.	 *	 * @param   format  $string  The format string.	 *	 * @return  mixed	 *	 * @since   11.1	 */	public static function printf($string)	{		$lang = JFactory::getLanguage();		$args = func_get_args();		$count = count($args);		if ($count > 0)		{			if (is_array($args[$count - 1]))			{				$args[0] = $lang->_(					$string, array_key_exists('jsSafe', $args[$count - 1]) ? $args[$count - 1]['jsSafe'] : false,					array_key_exists('interpretBackSlashes', $args[$count - 1]) ? $args[$count - 1]['interpretBackSlashes'] : true				);			}			else			{				$args[0] = $lang->_($string);			}			return call_user_func_array('printf', $args);		}		return '';	}	/**	 * Translate a string into the current language and stores it in the JavaScript language store.	 *	 * @param   string   $string                The JText key.	 * @param   boolean  $jsSafe                Ensure the output is JavaScript safe.	 * @param   boolean  $interpretBackSlashes  Interpret \t and \n.	 *	 * @return  string	 *	 * @since   11.1	 */	public static function script($string = null, $jsSafe = false, $interpretBackSlashes = true)	{		if (is_array($jsSafe))		{			if (array_key_exists('interpretBackSlashes', $jsSafe))			{				$interpretBackSlashes = (boolean) $jsSafe['interpretBackSlashes'];			}			if (array_key_exists('jsSafe', $jsSafe))			{				$jsSafe = (boolean) $jsSafe['jsSafe'];			}			else			{				$jsSafe = false;			}		}		// Add the string to the array if not null.		if ($string !== null)		{			// Normalize the key and translate the string.			self::$strings[strtoupper($string)] = JFactory::getLanguage()->_($string, $jsSafe, $interpretBackSlashes);		}		return self::$strings;	}}
<?php/** * @package     Joomla.Site * @subpackage  com_content * @copyright   Copyright (C) 2005 - 2010 Open Source Matters, Inc. All rights reserved. * @license     GNU General Public License version 2 or later; see LICENSE.txt */// no direct accessdefined('_JEXEC') or die;$class = ' class="first"';if (count($this->items[$this->parent->id]) > 0 && $this->maxLevelcat != 0) :?><ul><?php foreach ($this->items[$this->parent->id] as $id => $item) : ?>	<?php	if ($this->params->get('show_empty_categories_cat') || $item->numitems || count($item->getChildren())) :	if (!isset($this->items[$this->parent->id][$id + 1]))	{		$class = ' class="last"';	}	?>	<li<?php echo $class; ?>>	<?php $class = ''; ?>		<h3 class="item-title"><a href="<?php echo JRoute::_(ContentHelperRoute::getCategoryRoute($item->id));?>">			<?php echo $this->escape($item->title); ?></a>		</h3>		<?php if ($this->params->get('show_subcat_desc_cat') == 1) :?>		<?php if ($item->description) : ?>			<div class="category-desc">				<?php echo JHtml::_('content.prepare', $item->description); ?>			</div>		<?php endif; ?>        <?php endif; ?>		<?php if ($this->params->get('show_cat_num_articles_cat') == 1) :?>			<dl class="article-count"><dt>				<?php echo JText::_('COM_CONTENT_NUM_ITEMS'); ?></dt>				<dd><?php echo $item->numitems; ?></dd>			</dl>		<?php endif; ?>		<?php if (count($item->getChildren()) > 0) :			$this->items[$item->id] = $item->getChildren();			$this->parent = $item;			$this->maxLevelcat--;			echo $this->loadTemplate('items');			$this->parent = $item->getParent();			$this->maxLevelcat++;		endif; ?>	</li>	<?php endif; ?><?php endforeach; ?></ul><?php endif; ?>
<?php/** * @package     Joomla.Administrator * @subpackage  com_joomlaupdate * * @copyright   Copyright (C) 2005 - 2013 Open Source Matters, Inc. All rights reserved. * @license     GNU General Public License version 2 or later; see LICENSE.txt */defined('_JEXEC') or die;?><fieldset>	<legend>		<?php echo JText::_('COM_JOOMLAUPDATE_VIEW_COMPLETE_HEADING') ?>	</legend>	<p>		<?php echo JText::sprintf('COM_JOOMLAUPDATE_VIEW_COMPLETE_MESSAGE', JVERSION); ?>	</p></fieldset>
<?php/** * @package     Joomla.Administrator * @subpackage  com_cache * * @copyright   Copyright (C) 2005 - 2013 Open Source Matters, Inc. All rights reserved. * @license     GNU General Public License version 2 or later; see LICENSE.txt */defined('_JEXEC') or die;/** * Cache component helper. * * @package     Joomla.Administrator * @subpackage  com_cache * @since       1.6 */class CacheHelper{	/**	 * Get a list of filter options for the application clients.	 *	 * @return  array  An array of JHtmlOption elements.	 */	public static function getClientOptions()	{		// Build the filter options.		$options	= array();		$options[]	= JHtml::_('select.option', '0', JText::_('JSITE'));		$options[]	= JHtml::_('select.option', '1', JText::_('JADMINISTRATOR'));		return $options;	}	/**	 * Configure the Linkbar.	 *	 * @param   string	The name of the active view.	 *	 * @return  void	 * @since   1.6	 */	public static function addSubmenu($vName)	{		JHtmlSidebar::addEntry(			JText::_('JGLOBAL_SUBMENU_CHECKIN'),			'index.php?option=com_checkin',			$vName == 'com_checkin'		);		JHtmlSidebar::addEntry(			JText::_('JGLOBAL_SUBMENU_CLEAR_CACHE'),			'index.php?option=com_cache',			$vName == 'cache'		);		JHtmlSidebar::addEntry(			JText::_('JGLOBAL_SUBMENU_PURGE_EXPIRED_CACHE'),			'index.php?option=com_cache&view=purge',			$vName == 'purge'		);	}}
<?php/** * @package     Joomla.Site * @subpackage  com_contact * * @copyright   Copyright (C) 2005 - 2013 Open Source Matters, Inc. All rights reserved. * @license     GNU General Public License version 2 or later; see LICENSE.txt */defined('_JEXEC') or die;$cparams = JComponentHelper::getParams('com_media');jimport('joomla.html.html.bootstrap');?><div class="contact<?php echo $this->pageclass_sfx?>">	<?php if ($this->params->get('show_page_heading')) : ?>		<h1>			<?php echo $this->escape($this->params->get('page_heading')); ?>		</h1>	<?php endif; ?>	<?php if ($this->contact->name && $this->params->get('show_name')) : ?>		<div class="page-header">			<h2>				<?php if ($this->item->published == 0) : ?>					<span class="label label-warning"><?php echo JText::_('JUNPUBLISHED'); ?></span>				<?php endif; ?>				<span class="contact-name"><?php echo $this->contact->name; ?></span>			</h2>		</div>	<?php endif;  ?>	<?php if ($this->params->get('show_contact_category') == 'show_no_link') : ?>		<h3>			<span class="contact-category"><?php echo $this->contact->category_title; ?></span>		</h3>	<?php endif; ?>	<?php if ($this->params->get('show_contact_category') == 'show_with_link') : ?>		<?php $contactLink = ContactHelperRoute::getCategoryRoute($this->contact->catid); ?>		<h3>			<span class="contact-category"><a href="<?php echo $contactLink; ?>">				<?php echo $this->escape($this->contact->category_title); ?></a>			</span>		</h3>	<?php endif; ?>	<?php if ($this->params->get('show_contact_list') && count($this->contacts) > 1) : ?>		<form action="#" method="get" name="selectForm" id="selectForm">			<?php echo JText::_('COM_CONTACT_SELECT_CONTACT'); ?>			<?php echo JHtml::_('select.genericlist', $this->contacts, 'id', 'class="inputbox" onchange="document.location.href = this.value"', 'link', 'name', $this->contact->link);?>		</form>	<?php endif; ?>	<?php if ($this->params->get('show_tags', 1) && !empty($this->item->tags)) : ?>		<?php $this->item->tagLayout = new JLayoutFile('joomla.content.tags'); ?>		<?php echo $this->item->tagLayout->render($this->item->tags->itemTags); ?>	<?php endif; ?> 	<?php if ($this->params->get('presentation_style') == 'sliders') : ?>		<?php echo JHtml::_('bootstrap.startAccordion', 'slide-contact', array('active' => 'basic-details')); ?>	<?php endif; ?>	<?php if ($this->params->get('presentation_style') == 'tabs') : ?>		<?php echo JHtml::_('bootstrap.startTabSet', 'myTab', array('active' => 'basic-details')); ?>	<?php endif; ?>	<?php if ($this->params->get('presentation_style') == 'sliders') : ?>		<?php echo JHtml::_('bootstrap.addSlide', 'slide-contact', JText::_('COM_CONTACT_DETAILS'), 'basic-details'); ?>	<?php endif; ?>	<?php if ($this->params->get('presentation_style') == 'tabs') : ?>		<?php echo JHtml::_('bootstrap.addTab', 'myTab', 'basic-details', JText::_('COM_CONTACT_DETAILS', true)); ?>	<?php endif; ?>	<?php if ($this->params->get('presentation_style') == 'plain'):?>		<?php  echo '<h3>'. JText::_('COM_CONTACT_DETAILS').'</h3>';  ?>	<?php endif; ?>	<?php if ($this->contact->image && $this->params->get('show_image')) : ?>		<div class="thumbnail pull-right">			<?php echo JHtml::_('image', $this->contact->image, JText::_('COM_CONTACT_IMAGE_DETAILS'), array('align' => 'middle')); ?>		</div>	<?php endif; ?>	<?php if ($this->contact->con_position && $this->params->get('show_position')) : ?>		<dl class="contact-position dl-horizontal">			<dd>				<?php echo $this->contact->con_position; ?>			</dd>		</dl>	<?php endif; ?>	<?php echo $this->loadTemplate('address'); ?>	<?php if ($this->params->get('allow_vcard')) :	?>		<?php echo JText::_('COM_CONTACT_DOWNLOAD_INFORMATION_AS');?>		<a href="<?php echo JRoute::_('index.php?option=com_contact&amp;view=contact&amp;id='.$this->contact->id . '&amp;format=vcf'); ?>">		<?php echo JText::_('COM_CONTACT_VCARD');?></a>	<?php endif; ?>	<?php if ($this->params->get('presentation_style') == 'sliders') : ?>		<?php echo JHtml::_('bootstrap.endSlide'); ?>	<?php endif; ?>	<?php if ($this->params->get('presentation_style') == 'tabs') : ?>		<?php echo JHtml::_('bootstrap.endTab'); ?>	<?php endif; ?>	<?php if ($this->params->get('show_email_form') && ($this->contact->email_to || $this->contact->user_id)) : ?>		<?php if ($this->params->get('presentation_style') == 'sliders') : ?>			<?php echo JHtml::_('bootstrap.addSlide', 'slide-contact', JText::_('COM_CONTACT_EMAIL_FORM'), 'display-form'); ?>		<?php endif; ?>		<?php if ($this->params->get('presentation_style') == 'tabs') : ?>			<?php echo JHtml::_('bootstrap.addTab', 'myTab', 'display-form', JText::_('COM_CONTACT_EMAIL_FORM', true)); ?>		<?php endif; ?>		<?php if ($this->params->get('presentation_style') == 'plain'):?>			<?php echo '<h3>'. JText::_('COM_CONTACT_EMAIL_FORM').'</h3>';  ?>		<?php endif; ?>		<?php  echo $this->loadTemplate('form');  ?>		<?php if ($this->params->get('presentation_style') == 'sliders') : ?>			<?php echo JHtml::_('bootstrap.endSlide'); ?>		<?php endif; ?>			<?php if ($this->params->get('presentation_style') == 'tabs') : ?>		<?php echo JHtml::_('bootstrap.endTab'); ?>			<?php endif; ?>	<?php endif; ?>	<?php if ($this->params->get('show_links')) : ?>		<?php echo $this->loadTemplate('links'); ?>	<?php endif; ?>	<?php if ($this->params->get('show_articles') && $this->contact->user_id && $this->contact->articles) : ?>		<?php if ($this->params->get('presentation_style') == 'sliders') : ?>			<?php echo JHtml::_('bootstrap.addSlide', 'slide-contact', JText::_('JGLOBAL_ARTICLES'), 'display-articles'); ?>		<?php endif; ?>		<?php if ($this->params->get('presentation_style') == 'tabs') : ?>			<?php echo JHtml::_('bootstrap.addTab', 'myTab', 'display-articles', JText::_('JGLOBAL_ARTICLES', true)); ?>		<?php endif; ?>		<?php if ($this->params->get('presentation_style') == 'plain'):?>			<?php echo '<h3>'. JText::_('JGLOBAL_ARTICLES').'</h3>';  ?>		<?php endif; ?>		<?php echo $this->loadTemplate('articles'); ?>		<?php if ($this->params->get('presentation_style') == 'sliders') : ?>			<?php echo JHtml::_('bootstrap.endSlide'); ?>		<?php endif; ?>		<?php if ($this->params->get('presentation_style') == 'tabs') : ?>			<?php echo JHtml::_('bootstrap.endTab'); ?>		<?php endif; ?>	<?php endif; ?>	<?php if ($this->params->get('show_profile') && $this->contact->user_id && JPluginHelper::isEnabled('user', 'profile')) : ?>		<?php if ($this->params->get('presentation_style') == 'sliders') : ?>			<?php echo JHtml::_('bootstrap.addSlide', 'slide-contact', JText::_('COM_CONTACT_PROFILE'), 'display-profile'); ?>		<?php endif; ?>		<?php if ($this->params->get('presentation_style') == 'tabs') : ?>			<?php echo JHtml::_('bootstrap.addTab', 'myTab', 'display-profile', JText::_('COM_CONTACT_PROFILE', true)); ?>		<?php endif; ?>		<?php if ($this->params->get('presentation_style') == 'plain'):?>			<?php echo '<h3>'. JText::_('COM_CONTACT_PROFILE').'</h3>';  ?>		<?php endif; ?>		<?php echo $this->loadTemplate('profile'); ?>		<?php if ($this->params->get('presentation_style') == 'sliders') : ?>			<?php echo JHtml::_('bootstrap.endSlide'); ?>		<?php endif; ?>		<?php if ($this->params->get('presentation_style') == 'tabs') : ?>			<?php echo JHtml::_('bootstrap.endTab'); ?>		<?php endif; ?>	<?php endif; ?>	<?php if ($this->contact->misc && $this->params->get('show_misc')) : ?>		<?php if ($this->params->get('presentation_style') == 'sliders') : ?>			<?php echo JHtml::_('bootstrap.addSlide', 'slide-contact', JText::_('COM_CONTACT_OTHER_INFORMATION'), 'display-misc'); ?>		<?php endif; ?>		<?php if ($this->params->get('presentation_style') == 'tabs') : ?>			<?php echo JHtml::_('bootstrap.addTab', 'myTab', 'display-misc', JText::_('COM_CONTACT_OTHER_INFORMATION', true)); ?>		<?php endif; ?>		<?php if ($this->params->get('presentation_style') == 'plain'):?>			<?php echo '<h3>'. JText::_('COM_CONTACT_OTHER_INFORMATION').'</h3>';  ?>		<?php endif; ?>		<div class="contact-miscinfo">			<dl class="dl-horizontal">				<dt>					<span class="<?php echo $this->params->get('marker_class'); ?>">					<?php echo $this->params->get('marker_misc'); ?>					</span>				</dt>				<dd>					<span class="contact-misc">						<?php echo $this->contact->misc; ?>					</span>				</dd>			</dl>		</div>		<?php if ($this->params->get('presentation_style') == 'sliders') : ?>			<?php echo JHtml::_('bootstrap.endSlide'); ?>		<?php endif; ?>		<?php if ($this->params->get('presentation_style') == 'tabs') : ?>			<?php echo JHtml::_('bootstrap.endTab'); ?>		<?php endif; ?>	<?php endif; ?>	<?php if ($this->params->get('presentation_style') == 'sliders') : ?>		<?php echo JHtml::_('bootstrap.endAccordion'); ?>	<?php endif; ?>	<?php if ($this->params->get('presentation_style') == 'tabs') : ?>		<?php echo JHtml::_('bootstrap.endTabSet'); ?>	<?php endif; ?></div>
<?php/** * @package    Joomla.Installation * * @copyright  Copyright (C) 2005 - 2013 Open Source Matters, Inc. All rights reserved. * @license    GNU General Public License version 2 or later; see LICENSE.txt */defined('JPATH_BASE') or die;/** * Form Field class for the Joomla Framework. * * @package  Joomla.Installation * @since    1.6 */class JFormFieldPrefix extends JFormField{	/**	 * The form field type.	 *	 * @var		string	 * @since   1.6	 */	protected $type = 'Prefix';	/**	 * Method to get the field input markup.	 *	 * @return  string	The field input markup.	 *	 * @since   1.6	 */	protected function getInput()	{		// Initialize some field attributes.		$size		= $this->element['size'] ? abs((int) $this->element['size']) : 5;		$maxLength	= $this->element['maxlength'] ? ' maxlength="' . (int) $this->element['maxlength'] . '"' : '';		$class		= $this->element['class'] ? ' class="' . (string) $this->element['class'] . '"' : '';		$readonly	= ((string) $this->element['readonly'] == 'true') ? ' readonly="readonly"' : '';		$disabled	= ((string) $this->element['disabled'] == 'true') ? ' disabled="disabled"' : '';		// Make sure somebody doesn't put in a too large prefix size value:		if ($size > 10)		{			$size = 10;		}		// If a prefix is already set, use it instead		$session = JFactory::getSession()->get('setup.options', array());		if (empty($session['db_prefix']))		{			// Create the random prefix:			$prefix = '';			$chars = range('a', 'z');			$numbers = range(0, 9);			// We want the fist character to be a random letter:			shuffle($chars);			$prefix .= $chars[0];			// Next we combine the numbers and characters to get the other characters:			$symbols = array_merge($numbers, $chars);			shuffle($symbols);			for ($i = 0, $j = $size - 1; $i < $j; ++$i)			{				$prefix .= $symbols[$i];			}			// Add in the underscore:			$prefix .= '_';		}		else		{			$prefix = $session['db_prefix'];		}		// Initialize JavaScript field attributes.		$onchange	= $this->element['onchange'] ? ' onchange="' . (string) $this->element['onchange'] . '"' : '';		return '<input type="text" name="' . $this->name . '" id="' . $this->id . '"' .				' value="' . htmlspecialchars($prefix, ENT_COMPAT, 'UTF-8') . '"' .				$class . $disabled . $readonly . $onchange . $maxLength . '/>';	}}
<?php/** * @package     Joomla.Platform * @subpackage  Database * * @copyright   Copyright (C) 2005 - 2013 Open Source Matters, Inc. All rights reserved. * @license     GNU General Public License version 2 or later; see LICENSE */defined('JPATH_PLATFORM') or die;/** * SQL server database iterator. * * @package     Joomla.Platform * @subpackage  Database * @since       12.1 */class JDatabaseIteratorSqlsrv extends JDatabaseIterator{	/**	 * Get the number of rows in the result set for the executed SQL given by the cursor.	 *	 * @return  integer  The number of rows in the result set.	 *	 * @since   12.1	 * @see     Countable::count()	 */	public function count()	{		return sqlsrv_num_rows($this->cursor);	}	/**	 * Method to fetch a row from the result set cursor as an object.	 *	 * @return  mixed   Either the next row from the result set or false if there are no more rows.	 *	 * @since   12.1	 */	protected function fetchObject()	{		return sqlsrv_fetch_object($this->cursor, $this->class);	}	/**	 * Method to free up the memory used for the result set.	 *	 * @return  void	 *	 * @since   12.1	 */	protected function freeResult()	{		sqlsrv_free_stmt($this->cursor);	}}
<?php/** * @package     Joomla.Administrator * @subpackage  com_joomlaupdate * * @copyright   Copyright (C) 2005 - 2013 Open Source Matters, Inc. All rights reserved. * @license     GNU General Public License version 2 or later; see LICENSE.txt */defined('_JEXEC') or die;/** * Joomla! Update's Default View * * @package     Joomla.Administrator * @subpackage  com_installer * @since       2.5.4 */class JoomlaupdateViewDefault extends JViewLegacy{	/**	 * Renders the view	 *	 * @param   string  $tpl  Template name	 *	 * @return void	 *	 * @since  2.5.4	 */	public function display($tpl=null)	{		// Get data from the model		$this->state = $this->get('State');		// Load useful classes		$model = $this->getModel();		$this->loadHelper('select');		// Assign view variables		$ftp = $model->getFTPOptions();		$this->assign('updateInfo', $model->getUpdateInformation());		$this->assign('methodSelect', JoomlaupdateHelperSelect::getMethods($ftp['enabled']));		// Set the toolbar information		JToolbarHelper::title(JText::_('COM_JOOMLAUPDATE_OVERVIEW'), 'install');		JToolbarHelper::custom('update.purge', 'purge', 'purge', 'JTOOLBAR_PURGE_CACHE', false, false);		// Add toolbar buttons		if (JFactory::getUser()->authorise('core.admin', 'com_joomlaupdate'))		{			JToolbarHelper::preferences('com_joomlaupdate');		}		JToolBarHelper::divider();		JToolBarHelper::help('JHELP_COMPONENTS_JOOMLA_UPDATE');		// Load mooTools		JHtml::_('behavior.framework', true);		// Load our Javascript		$document = JFactory::getDocument();		$document->addScript('../media/com_joomlaupdate/default.js');		JHtml::_('stylesheet', 'media/mediamanager.css', array(), true);		// Render the view		parent::display($tpl);	}}
<?php/** * @package     Joomla.Platform * @subpackage  Input * * @copyright   Copyright (C) 2005 - 2013 Open Source Matters, Inc. All rights reserved. * @license     GNU General Public License version 2 or later; see LICENSE */defined('JPATH_PLATFORM') or die;/** * Joomla! Input Files Class * * @package     Joomla.Platform * @subpackage  Input * @since       11.1 */class JInputFiles extends JInput{	protected $decodedData = array();	/**	 * Constructor.	 *	 * @param   array  $source   Ignored.	 * @param   array  $options  Array of configuration parameters (Optional)	 *	 * @since   12.1	 */	public function __construct(array $source = null, array $options = array())	{		if (isset($options['filter']))		{			$this->filter = $options['filter'];		}		else		{			$this->filter = JFilterInput::getInstance();		}		// Set the data source.		$this->data = & $_FILES;		// Set the options for the class.		$this->options = $options;	}	/**	 * Gets a value from the input data.	 *	 * @param   string  $name     Name of the value to get.	 * @param   mixed   $default  Default value to return if variable does not exist.	 * @param   string  $filter   Filter to apply to the value.	 *	 * @return  mixed  The filtered input value.	 *	 * @since   11.1	 */	public function get($name, $default = null, $filter = 'cmd')	{		if (isset($this->data[$name]))		{			$results = $this->decodeData(				array(					$this->data[$name]['name'],					$this->data[$name]['type'],					$this->data[$name]['tmp_name'],					$this->data[$name]['error'],					$this->data[$name]['size']				)			);			return $results;		}		return $default;	}	/**	 * Method to decode a data array.	 *	 * @param   array  $data  The data array to decode.	 *	 * @return  array	 *	 * @since   11.1	 */	protected function decodeData(array $data)	{		$result = array();		if (is_array($data[0]))		{			foreach ($data[0] as $k => $v)			{				$result[$k] = $this->decodeData(array($data[0][$k], $data[1][$k], $data[2][$k], $data[3][$k], $data[4][$k]));			}			return $result;		}		return array('name' => $data[0], 'type' => $data[1], 'tmp_name' => $data[2], 'error' => $data[3], 'size' => $data[4]);	}	/**	 * Sets a value	 *	 * @param   string  $name   Name of the value to set.	 * @param   mixed   $value  Value to assign to the input.	 *	 * @return  void	 *	 * @since   11.1	 */	public function set($name, $value)	{	}}
<?php/*** @version $Id$* @package utf8* @subpackage strings*///---------------------------------------------------------------/*** Replacement for str_pad. $padStr may contain multi-byte characters.** @author Oliver Saunders <oliver (a) osinternetservices.com>* @param string $input* @param int $length* @param string $padStr* @param int $type ( same constants as str_pad )* @return string* @see http://www.php.net/str_pad* @see utf8_substr* @package utf8* @subpackage strings*/function utf8_str_pad($input, $length, $padStr = ' ', $type = STR_PAD_RIGHT) {    $inputLen = utf8_strlen($input);    if ($length <= $inputLen) {        return $input;    }    $padStrLen = utf8_strlen($padStr);    $padLen = $length - $inputLen;    if ($type == STR_PAD_RIGHT) {        $repeatTimes = ceil($padLen / $padStrLen);        return utf8_substr($input . str_repeat($padStr, $repeatTimes), 0, $length);    }    if ($type == STR_PAD_LEFT) {        $repeatTimes = ceil($padLen / $padStrLen);        return utf8_substr(str_repeat($padStr, $repeatTimes), 0, floor($padLen)) . $input;    }    if ($type == STR_PAD_BOTH) {        $padLen/= 2;        $padAmountLeft = floor($padLen);        $padAmountRight = ceil($padLen);        $repeatTimesLeft = ceil($padAmountLeft / $padStrLen);        $repeatTimesRight = ceil($padAmountRight / $padStrLen);        $paddingLeft = utf8_substr(str_repeat($padStr, $repeatTimesLeft), 0, $padAmountLeft);        $paddingRight = utf8_substr(str_repeat($padStr, $repeatTimesRight), 0, $padAmountLeft);        return $paddingLeft . $input . $paddingRight;    }    trigger_error('utf8_str_pad: Unknown padding type (' . $type . ')',E_USER_ERROR);}
<?php/** * @package    Joomla.Installation * * @copyright  Copyright (C) 2005 - 2013 Open Source Matters, Inc. All rights reserved. * @license    GNU General Public License version 2 or later; see LICENSE.txt */defined('_JEXEC') or die;?><jdoc:include type="component" />
<?php/** * @package     Joomla.Administrator * @subpackage  com_installer * * @copyright   Copyright (C) 2005 - 2013 Open Source Matters, Inc. All rights reserved. * @license     GNU General Public License version 2 or later; see LICENSE.txt */defined('_JEXEC') or die;/** * @package     Joomla.Administrator * @subpackage  com_installer */class InstallerControllerInstall extends JControllerLegacy{	/**	 * Install an extension.	 *	 * @return  void	 * @since   1.5	 */	public function install()	{		// Check for request forgeries		JSession::checkToken() or jexit(JText::_('JINVALID_TOKEN'));		$model = $this->getModel('install');		if ($model->install())		{			$cache = JFactory::getCache('mod_menu');			$cache->clean();			// TODO: Reset the users acl here as well to kill off any missing bits		}		$app = JFactory::getApplication();		$redirect_url = $app->getUserState('com_installer.redirect_url');		if (empty($redirect_url))		{			$redirect_url = JRoute::_('index.php?option=com_installer&view=install', false);		} else		{			// wipe out the user state when we're going to redirect			$app->setUserState('com_installer.redirect_url', '');			$app->setUserState('com_installer.message', '');			$app->setUserState('com_installer.extension_message', '');		}		$this->setRedirect($redirect_url);	}}
<?php/** * @package     Joomla.Platform * @subpackage  Utilities * * @copyright   Copyright (C) 2005 - 2013 Open Source Matters, Inc. All rights reserved. * @license     GNU General Public License version 2 or later; see LICENSE */defined('JPATH_PLATFORM') or die;/** * JUtility is a utility functions class * * @package     Joomla.Platform * @subpackage  Utilities * @since       11.1 */class JUtility{	/**	 * Method to extract key/value pairs out of a string with XML style attributes	 *	 * @param   string  $string  String containing XML style attributes	 *	 * @return  array  Key/Value pairs for the attributes	 *	 * @since   11.1	 */	public static function parseAttributes($string)	{		$attr = array();		$retarray = array();		// Let's grab all the key/value pairs using a regular expression		preg_match_all('/([\w:-]+)[\s]?=[\s]?"([^"]*)"/i', $string, $attr);		if (is_array($attr))		{			$numPairs = count($attr[1]);			for ($i = 0; $i < $numPairs; $i++)			{				$retarray[$attr[1][$i]] = $attr[2][$i];			}		}		return $retarray;	}}
<?php/*~ class.smtp.php.---------------------------------------------------------------------------.|  Software: PHPMailer - PHP email class                                    ||   Version: 5.2.2                                                          ||      Site: https://code.google.com/a/apache-extras.org/p/phpmailer/       || ------------------------------------------------------------------------- ||     Admin: Jim Jagielski (project admininistrator)                        ||   Authors: Andy Prevost (codeworxtech) codeworxtech@users.sourceforge.net ||          : Marcus Bointon (coolbru) coolbru@users.sourceforge.net         ||          : Jim Jagielski (jimjag) jimjag@gmail.com                        ||   Founder: Brent R. Matzelle (original founder)                           || Copyright (c) 2010-2012, Jim Jagielski. All Rights Reserved.              || Copyright (c) 2004-2009, Andy Prevost. All Rights Reserved.               || Copyright (c) 2001-2003, Brent R. Matzelle                                || ------------------------------------------------------------------------- ||   License: Distributed under the Lesser General Public License (LGPL)     ||            http://www.gnu.org/copyleft/lesser.html                        || This program is distributed in the hope that it will be useful - WITHOUT  || ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or     || FITNESS FOR A PARTICULAR PURPOSE.                                         |'---------------------------------------------------------------------------'*//** * PHPMailer - PHP SMTP email transport class * NOTE: Designed for use with PHP version 5 and up * @package PHPMailer * @author Andy Prevost * @author Marcus Bointon * @copyright 2004 - 2008 Andy Prevost * @author Jim Jagielski * @copyright 2010 - 2012 Jim Jagielski * @license http://www.gnu.org/copyleft/lesser.html Distributed under the Lesser General Public License (LGPL) *//** * PHP RFC821 SMTP client * * Implements all the RFC 821 SMTP commands except TURN which will always return a not implemented error. * SMTP also provides some utility methods for sending mail to an SMTP server. * @author Chris Ryan * @package PHPMailer */class SMTP {  /**   *  SMTP server port   *  @var int   */  public $SMTP_PORT = 25;  /**   *  SMTP reply line ending (don't change)   *  @var string   */  public $CRLF = "\r\n";  /**   *  Sets whether debugging is turned on   *  @var bool   */  public $do_debug;       // the level of debug to perform  /**   * Sets the function/method to use for debugging output.   * Right now we only honor "echo" or "error_log"   * @var string   */  public $Debugoutput     = "echo";  /**   *  Sets VERP use on/off (default is off)   *  @var bool   */  public $do_verp = false;  /**   * Sets the SMTP timeout value for reads, in seconds   * @var int   */  public $Timeout         = 15;  /**   * Sets the SMTP timelimit value for reads, in seconds   * @var int   */  public $Timelimit       = 30;  /**   * Sets the SMTP PHPMailer Version number   * @var string   */  public $Version         = '5.2.2';  /////////////////////////////////////////////////  // PROPERTIES, PRIVATE AND PROTECTED  /////////////////////////////////////////////////  /**   * @var resource The socket to the server   */  private $smtp_conn;  /**   * @var string Error message, if any, for the last call   */  private $error;  /**   * @var string The reply the server sent to us for HELO   */  private $helo_rply;  /**   * Outputs debugging info via user-defined method   * @param string $str   */  private function edebug($str) {    if ($this->Debugoutput == "error_log") {        error_log($str);    } else {        echo $str;    }  }  /**   * Initialize the class so that the data is in a known state.   * @access public   * @return SMTP   */  public function __construct() {    $this->smtp_conn = 0;    $this->error = null;    $this->helo_rply = null;    $this->do_debug = 0;  }  /////////////////////////////////////////////////  // CONNECTION FUNCTIONS  /////////////////////////////////////////////////  /**   * Connect to the server specified on the port specified.   * If the port is not specified use the default SMTP_PORT.   * If tval is specified then a connection will try and be   * established with the server for that number of seconds.   * If tval is not specified the default is 30 seconds to   * try on the connection.   *   * SMTP CODE SUCCESS: 220   * SMTP CODE FAILURE: 421   * @access public   * @param string $host   * @param int $port   * @param int $tval   * @return bool   */  public function Connect($host, $port = 0, $tval = 30) {    // set the error val to null so there is no confusion    $this->error = null;    // make sure we are __not__ connected    if($this->connected()) {      // already connected, generate error      $this->error = array("error" => "Already connected to a server");      return false;    }    if(empty($port)) {      $port = $this->SMTP_PORT;    }    // connect to the smtp server    $this->smtp_conn = @fsockopen($host,    // the host of the server                                 $port,    // the port to use                                 $errno,   // error number if any                                 $errstr,  // error message if any                                 $tval);   // give up after ? secs    // verify we connected properly    if(empty($this->smtp_conn)) {      $this->error = array("error" => "Failed to connect to server",                           "errno" => $errno,                           "errstr" => $errstr);      if($this->do_debug >= 1) {        $this->edebug("SMTP -> ERROR: " . $this->error["error"] . ": $errstr ($errno)" . $this->CRLF . '<br />');      }      return false;    }    // SMTP server can take longer to respond, give longer timeout for first read    // Windows does not have support for this timeout function    if(substr(PHP_OS, 0, 3) != "WIN") {     $max = ini_get('max_execution_time');     if ($max != 0 && $tval > $max) { // don't bother if unlimited      @set_time_limit($tval);     }     stream_set_timeout($this->smtp_conn, $tval, 0);    }    // get any announcement    $announce = $this->get_lines();    if($this->do_debug >= 2) {      $this->edebug("SMTP -> FROM SERVER:" . $announce . $this->CRLF . '<br />');    }    return true;  }  /**   * Initiate a TLS communication with the server.   *   * SMTP CODE 220 Ready to start TLS   * SMTP CODE 501 Syntax error (no parameters allowed)   * SMTP CODE 454 TLS not available due to temporary reason   * @access public   * @return bool success   */  public function StartTLS() {    $this->error = null; # to avoid confusion    if(!$this->connected()) {      $this->error = array("error" => "Called StartTLS() without being connected");      return false;    }    fputs($this->smtp_conn,"STARTTLS" . $this->CRLF);    $rply = $this->get_lines();    $code = substr($rply,0,3);    if($this->do_debug >= 2) {      $this->edebug("SMTP -> FROM SERVER:" . $rply . $this->CRLF . '<br />');    }    if($code != 220) {      $this->error =         array("error"     => "STARTTLS not accepted from server",               "smtp_code" => $code,               "smtp_msg"  => substr($rply,4));      if($this->do_debug >= 1) {        $this->edebug("SMTP -> ERROR: " . $this->error["error"] . ": " . $rply . $this->CRLF . '<br />');      }      return false;    }    // Begin encrypted connection    if(!stream_socket_enable_crypto($this->smtp_conn, true, STREAM_CRYPTO_METHOD_TLS_CLIENT)) {      return false;    }    return true;  }  /**   * Performs SMTP authentication.  Must be run after running the   * Hello() method.  Returns true if successfully authenticated.   * @access public   * @param string $username   * @param string $password   * @param string $authtype   * @param string $realm   * @param string $workstation   * @return bool   */  public function Authenticate($username, $password, $authtype='LOGIN', $realm='', $workstation='') {    if (empty($authtype)) {      $authtype = 'LOGIN';    }    switch ($authtype) {      case 'PLAIN':        // Start authentication        fputs($this->smtp_conn,"AUTH PLAIN" . $this->CRLF);            $rply = $this->get_lines();        $code = substr($rply,0,3);            if($code != 334) {          $this->error =            array("error" => "AUTH not accepted from server",                  "smtp_code" => $code,                  "smtp_msg" => substr($rply,4));          if($this->do_debug >= 1) {            $this->edebug("SMTP -> ERROR: " . $this->error["error"] . ": " . $rply . $this->CRLF . '<br />');          }          return false;        }        // Send encoded username and password        fputs($this->smtp_conn, base64_encode("\0".$username."\0".$password) . $this->CRLF);        $rply = $this->get_lines();        $code = substr($rply,0,3);            if($code != 235) {          $this->error =            array("error" => "Authentication not accepted from server",                  "smtp_code" => $code,                  "smtp_msg" => substr($rply,4));          if($this->do_debug >= 1) {            $this->edebug("SMTP -> ERROR: " . $this->error["error"] . ": " . $rply . $this->CRLF . '<br />');          }          return false;        }        break;      case 'LOGIN':        // Start authentication        fputs($this->smtp_conn,"AUTH LOGIN" . $this->CRLF);            $rply = $this->get_lines();        $code = substr($rply,0,3);            if($code != 334) {          $this->error =            array("error" => "AUTH not accepted from server",                  "smtp_code" => $code,                  "smtp_msg" => substr($rply,4));          if($this->do_debug >= 1) {            $this->edebug("SMTP -> ERROR: " . $this->error["error"] . ": " . $rply . $this->CRLF . '<br />');          }          return false;        }            // Send encoded username        fputs($this->smtp_conn, base64_encode($username) . $this->CRLF);            $rply = $this->get_lines();        $code = substr($rply,0,3);            if($code != 334) {          $this->error =            array("error" => "Username not accepted from server",                  "smtp_code" => $code,                  "smtp_msg" => substr($rply,4));          if($this->do_debug >= 1) {            $this->edebug("SMTP -> ERROR: " . $this->error["error"] . ": " . $rply . $this->CRLF . '<br />');          }          return false;        }            // Send encoded password        fputs($this->smtp_conn, base64_encode($password) . $this->CRLF);            $rply = $this->get_lines();        $code = substr($rply,0,3);            if($code != 235) {          $this->error =            array("error" => "Password not accepted from server",                  "smtp_code" => $code,                  "smtp_msg" => substr($rply,4));          if($this->do_debug >= 1) {            $this->edebug("SMTP -> ERROR: " . $this->error["error"] . ": " . $rply . $this->CRLF . '<br />');          }          return false;        }        break;      case 'NTLM':        /*         * ntlm_sasl_client.php         ** Bundled with Permission         **         ** How to telnet in windows: http://technet.microsoft.com/en-us/library/aa995718%28EXCHG.65%29.aspx         ** PROTOCOL Documentation http://curl.haxx.se/rfc/ntlm.html#ntlmSmtpAuthentication         */        require_once('ntlm_sasl_client.php');        $temp = new stdClass();        $ntlm_client = new ntlm_sasl_client_class;        if(! $ntlm_client->Initialize($temp)){//let's test if every function its available            $this->error = array("error" => $temp->error);            if($this->do_debug >= 1) {                $this->edebug("You need to enable some modules in your php.ini file: " . $this->error["error"] . $this->CRLF);            }            return false;        }        $msg1 = $ntlm_client->TypeMsg1($realm, $workstation);//msg1                fputs($this->smtp_conn,"AUTH NTLM " . base64_encode($msg1) . $this->CRLF);        $rply = $this->get_lines();        $code = substr($rply,0,3);                if($code != 334) {            $this->error =                array("error" => "AUTH not accepted from server",                      "smtp_code" => $code,                      "smtp_msg" => substr($rply,4));            if($this->do_debug >= 1) {                $this->edebug("SMTP -> ERROR: " . $this->error["error"] . ": " . $rply . $this->CRLF);            }            return false;        }                $challange = substr($rply,3);//though 0 based, there is a white space after the 3 digit number....//msg2        $challange = base64_decode($challange);        $ntlm_res = $ntlm_client->NTLMResponse(substr($challange,24,8),$password);        $msg3 = $ntlm_client->TypeMsg3($ntlm_res,$username,$realm,$workstation);//msg3        // Send encoded username        fputs($this->smtp_conn, base64_encode($msg3) . $this->CRLF);        $rply = $this->get_lines();        $code = substr($rply,0,3);        if($code != 235) {            $this->error =                array("error" => "Could not authenticate",                      "smtp_code" => $code,                      "smtp_msg" => substr($rply,4));            if($this->do_debug >= 1) {                $this->edebug("SMTP -> ERROR: " . $this->error["error"] . ": " . $rply . $this->CRLF);            }            return false;        }        break;    }    return true;  }  /**   * Returns true if connected to a server otherwise false   * @access public   * @return bool   */  public function Connected() {    if(!empty($this->smtp_conn)) {      $sock_status = socket_get_status($this->smtp_conn);      if($sock_status["eof"]) {        // the socket is valid but we are not connected        if($this->do_debug >= 1) {            $this->edebug("SMTP -> NOTICE:" . $this->CRLF . "EOF caught while checking if connected");        }        $this->Close();        return false;      }      return true; // everything looks good    }    return false;  }  /**   * Closes the socket and cleans up the state of the class.   * It is not considered good to use this function without   * first trying to use QUIT.   * @access public   * @return void   */  public function Close() {    $this->error = null; // so there is no confusion    $this->helo_rply = null;    if(!empty($this->smtp_conn)) {      // close the connection and cleanup      fclose($this->smtp_conn);      $this->smtp_conn = 0;    }  }  /////////////////////////////////////////////////  // SMTP COMMANDS  /////////////////////////////////////////////////  /**   * Issues a data command and sends the msg_data to the server   * finializing the mail transaction. $msg_data is the message   * that is to be send with the headers. Each header needs to be   * on a single line followed by a <CRLF> with the message headers   * and the message body being seperated by and additional <CRLF>.   *   * Implements rfc 821: DATA <CRLF>   *   * SMTP CODE INTERMEDIATE: 354   *     [data]   *     <CRLF>.<CRLF>   *     SMTP CODE SUCCESS: 250   *     SMTP CODE FAILURE: 552,554,451,452   * SMTP CODE FAILURE: 451,554   * SMTP CODE ERROR  : 500,501,503,421   * @access public   * @param string $msg_data   * @return bool   */  public function Data($msg_data) {    $this->error = null; // so no confusion is caused    if(!$this->connected()) {      $this->error = array(              "error" => "Called Data() without being connected");      return false;    }    fputs($this->smtp_conn,"DATA" . $this->CRLF);    $rply = $this->get_lines();    $code = substr($rply,0,3);    if($this->do_debug >= 2) {      $this->edebug("SMTP -> FROM SERVER:" . $rply . $this->CRLF . '<br />');    }    if($code != 354) {      $this->error =        array("error" => "DATA command not accepted from server",              "smtp_code" => $code,              "smtp_msg" => substr($rply,4));      if($this->do_debug >= 1) {        $this->edebug("SMTP -> ERROR: " . $this->error["error"] . ": " . $rply . $this->CRLF . '<br />');      }      return false;    }    /* the server is ready to accept data!     * according to rfc 821 we should not send more than 1000     * including the CRLF     * characters on a single line so we will break the data up     * into lines by \r and/or \n then if needed we will break     * each of those into smaller lines to fit within the limit.     * in addition we will be looking for lines that start with     * a period '.' and append and additional period '.' to that     * line. NOTE: this does not count towards limit.     */    // normalize the line breaks so we know the explode works    $msg_data = str_replace("\r\n","\n",$msg_data);    $msg_data = str_replace("\r","\n",$msg_data);    $lines = explode("\n",$msg_data);    /* we need to find a good way to determine is headers are     * in the msg_data or if it is a straight msg body     * currently I am assuming rfc 822 definitions of msg headers     * and if the first field of the first line (':' sperated)     * does not contain a space then it _should_ be a header     * and we can process all lines before a blank "" line as     * headers.     */    $field = substr($lines[0],0,strpos($lines[0],":"));    $in_headers = false;    if(!empty($field) && !strstr($field," ")) {      $in_headers = true;    }    $max_line_length = 998; // used below; set here for ease in change    while(list(,$line) = @each($lines)) {      $lines_out = null;      if($line == "" && $in_headers) {        $in_headers = false;      }      // ok we need to break this line up into several smaller lines      while(strlen($line) > $max_line_length) {        $pos = strrpos(substr($line,0,$max_line_length)," ");        // Patch to fix DOS attack        if(!$pos) {          $pos = $max_line_length - 1;          $lines_out[] = substr($line,0,$pos);          $line = substr($line,$pos);        } else {          $lines_out[] = substr($line,0,$pos);          $line = substr($line,$pos + 1);        }        /* if processing headers add a LWSP-char to the front of new line         * rfc 822 on long msg headers         */        if($in_headers) {          $line = "\t" . $line;        }      }      $lines_out[] = $line;      // send the lines to the server      while(list(,$line_out) = @each($lines_out)) {        if(strlen($line_out) > 0)        {          if(substr($line_out, 0, 1) == ".") {            $line_out = "." . $line_out;          }        }        fputs($this->smtp_conn,$line_out . $this->CRLF);      }    }    // message data has been sent    fputs($this->smtp_conn, $this->CRLF . "." . $this->CRLF);    $rply = $this->get_lines();    $code = substr($rply,0,3);    if($this->do_debug >= 2) {      $this->edebug("SMTP -> FROM SERVER:" . $rply . $this->CRLF . '<br />');    }    if($code != 250) {      $this->error =        array("error" => "DATA not accepted from server",              "smtp_code" => $code,              "smtp_msg" => substr($rply,4));      if($this->do_debug >= 1) {        $this->edebug("SMTP -> ERROR: " . $this->error["error"] . ": " . $rply . $this->CRLF . '<br />');      }      return false;    }    return true;  }  /**   * Sends the HELO command to the smtp server.   * This makes sure that we and the server are in   * the same known state.   *   * Implements from rfc 821: HELO <SP> <domain> <CRLF>   *   * SMTP CODE SUCCESS: 250   * SMTP CODE ERROR  : 500, 501, 504, 421   * @access public   * @param string $host   * @return bool   */  public function Hello($host = '') {    $this->error = null; // so no confusion is caused    if(!$this->connected()) {      $this->error = array(            "error" => "Called Hello() without being connected");      return false;    }    // if hostname for HELO was not specified send default    if(empty($host)) {      // determine appropriate default to send to server      $host = "localhost";    }    // Send extended hello first (RFC 2821)    if(!$this->SendHello("EHLO", $host)) {      if(!$this->SendHello("HELO", $host)) {        return false;      }    }    return true;  }  /**   * Sends a HELO/EHLO command.   * @access private   * @param string $hello   * @param string $host   * @return bool   */  private function SendHello($hello, $host) {    fputs($this->smtp_conn, $hello . " " . $host . $this->CRLF);    $rply = $this->get_lines();    $code = substr($rply,0,3);    if($this->do_debug >= 2) {      $this->edebug("SMTP -> FROM SERVER: " . $rply . $this->CRLF . '<br />');    }    if($code != 250) {      $this->error =        array("error" => $hello . " not accepted from server",              "smtp_code" => $code,              "smtp_msg" => substr($rply,4));      if($this->do_debug >= 1) {        $this->edebug("SMTP -> ERROR: " . $this->error["error"] . ": " . $rply . $this->CRLF . '<br />');      }      return false;    }    $this->helo_rply = $rply;    return true;  }  /**   * Starts a mail transaction from the email address specified in   * $from. Returns true if successful or false otherwise. If True   * the mail transaction is started and then one or more Recipient   * commands may be called followed by a Data command.   *   * Implements rfc 821: MAIL <SP> FROM:<reverse-path> <CRLF>   *   * SMTP CODE SUCCESS: 250   * SMTP CODE SUCCESS: 552,451,452   * SMTP CODE SUCCESS: 500,501,421   * @access public   * @param string $from   * @return bool   */  public function Mail($from) {    $this->error = null; // so no confusion is caused    if(!$this->connected()) {      $this->error = array(              "error" => "Called Mail() without being connected");      return false;    }    $useVerp = ($this->do_verp ? " XVERP" : "");    fputs($this->smtp_conn,"MAIL FROM:<" . $from . ">" . $useVerp . $this->CRLF);    $rply = $this->get_lines();    $code = substr($rply,0,3);    if($this->do_debug >= 2) {      $this->edebug("SMTP -> FROM SERVER:" . $rply . $this->CRLF . '<br />');    }    if($code != 250) {      $this->error =        array("error" => "MAIL not accepted from server",              "smtp_code" => $code,              "smtp_msg" => substr($rply,4));      if($this->do_debug >= 1) {        $this->edebug("SMTP -> ERROR: " . $this->error["error"] . ": " . $rply . $this->CRLF . '<br />');      }      return false;    }    return true;  }  /**   * Sends the quit command to the server and then closes the socket   * if there is no error or the $close_on_error argument is true.   *   * Implements from rfc 821: QUIT <CRLF>   *   * SMTP CODE SUCCESS: 221   * SMTP CODE ERROR  : 500   * @access public   * @param bool $close_on_error   * @return bool   */  public function Quit($close_on_error = true) {    $this->error = null; // so there is no confusion    if(!$this->connected()) {      $this->error = array(              "error" => "Called Quit() without being connected");      return false;    }    // send the quit command to the server    fputs($this->smtp_conn,"quit" . $this->CRLF);    // get any good-bye messages    $byemsg = $this->get_lines();    if($this->do_debug >= 2) {      $this->edebug("SMTP -> FROM SERVER:" . $byemsg . $this->CRLF . '<br />');    }    $rval = true;    $e = null;    $code = substr($byemsg,0,3);    if($code != 221) {      // use e as a tmp var cause Close will overwrite $this->error      $e = array("error" => "SMTP server rejected quit command",                 "smtp_code" => $code,                 "smtp_rply" => substr($byemsg,4));      $rval = false;      if($this->do_debug >= 1) {        $this->edebug("SMTP -> ERROR: " . $e["error"] . ": " . $byemsg . $this->CRLF . '<br />');      }    }    if(empty($e) || $close_on_error) {      $this->Close();    }    return $rval;  }  /**   * Sends the command RCPT to the SMTP server with the TO: argument of $to.   * Returns true if the recipient was accepted false if it was rejected.   *   * Implements from rfc 821: RCPT <SP> TO:<forward-path> <CRLF>   *   * SMTP CODE SUCCESS: 250,251   * SMTP CODE FAILURE: 550,551,552,553,450,451,452   * SMTP CODE ERROR  : 500,501,503,421   * @access public   * @param string $to   * @return bool   */  public function Recipient($to) {    $this->error = null; // so no confusion is caused    if(!$this->connected()) {      $this->error = array(              "error" => "Called Recipient() without being connected");      return false;    }    fputs($this->smtp_conn,"RCPT TO:<" . $to . ">" . $this->CRLF);    $rply = $this->get_lines();    $code = substr($rply,0,3);    if($this->do_debug >= 2) {      $this->edebug("SMTP -> FROM SERVER:" . $rply . $this->CRLF . '<br />');    }    if($code != 250 && $code != 251) {      $this->error =        array("error" => "RCPT not accepted from server",              "smtp_code" => $code,              "smtp_msg" => substr($rply,4));      if($this->do_debug >= 1) {        $this->edebug("SMTP -> ERROR: " . $this->error["error"] . ": " . $rply . $this->CRLF . '<br />');      }      return false;    }    return true;  }  /**   * Sends the RSET command to abort and transaction that is   * currently in progress. Returns true if successful false   * otherwise.   *   * Implements rfc 821: RSET <CRLF>   *   * SMTP CODE SUCCESS: 250   * SMTP CODE ERROR  : 500,501,504,421   * @access public   * @return bool   */  public function Reset() {    $this->error = null; // so no confusion is caused    if(!$this->connected()) {      $this->error = array(              "error" => "Called Reset() without being connected");      return false;    }    fputs($this->smtp_conn,"RSET" . $this->CRLF);    $rply = $this->get_lines();    $code = substr($rply,0,3);    if($this->do_debug >= 2) {      $this->edebug("SMTP -> FROM SERVER:" . $rply . $this->CRLF . '<br />');    }    if($code != 250) {      $this->error =        array("error" => "RSET failed",              "smtp_code" => $code,              "smtp_msg" => substr($rply,4));      if($this->do_debug >= 1) {        $this->edebug("SMTP -> ERROR: " . $this->error["error"] . ": " . $rply . $this->CRLF . '<br />');      }      return false;    }    return true;  }  /**   * Starts a mail transaction from the email address specified in   * $from. Returns true if successful or false otherwise. If True   * the mail transaction is started and then one or more Recipient   * commands may be called followed by a Data command. This command   * will send the message to the users terminal if they are logged   * in and send them an email.   *   * Implements rfc 821: SAML <SP> FROM:<reverse-path> <CRLF>   *   * SMTP CODE SUCCESS: 250   * SMTP CODE SUCCESS: 552,451,452   * SMTP CODE SUCCESS: 500,501,502,421   * @access public   * @param string $from   * @return bool   */  public function SendAndMail($from) {    $this->error = null; // so no confusion is caused    if(!$this->connected()) {      $this->error = array(          "error" => "Called SendAndMail() without being connected");      return false;    }    fputs($this->smtp_conn,"SAML FROM:" . $from . $this->CRLF);    $rply = $this->get_lines();    $code = substr($rply,0,3);    if($this->do_debug >= 2) {      $this->edebug("SMTP -> FROM SERVER:" . $rply . $this->CRLF . '<br />');    }    if($code != 250) {      $this->error =        array("error" => "SAML not accepted from server",              "smtp_code" => $code,              "smtp_msg" => substr($rply,4));      if($this->do_debug >= 1) {        $this->edebug("SMTP -> ERROR: " . $this->error["error"] . ": " . $rply . $this->CRLF . '<br />');      }      return false;    }    return true;  }  /**   * This is an optional command for SMTP that this class does not   * support. This method is here to make the RFC821 Definition   * complete for this class and __may__ be implimented in the future   *   * Implements from rfc 821: TURN <CRLF>   *   * SMTP CODE SUCCESS: 250   * SMTP CODE FAILURE: 502   * SMTP CODE ERROR  : 500, 503   * @access public   * @return bool   */  public function Turn() {    $this->error = array("error" => "This method, TURN, of the SMTP ".                                    "is not implemented");    if($this->do_debug >= 1) {      $this->edebug("SMTP -> NOTICE: " . $this->error["error"] . $this->CRLF . '<br />');    }    return false;  }  /**  * Get the current error  * @access public  * @return array  */  public function getError() {    return $this->error;  }  /////////////////////////////////////////////////  // INTERNAL FUNCTIONS  /////////////////////////////////////////////////  /**   * Read in as many lines as possible   * either before eof or socket timeout occurs on the operation.   * With SMTP we can tell if we have more lines to read if the   * 4th character is '-' symbol. If it is a space then we don't   * need to read anything else.   * @access private   * @return string   */  private function get_lines() {    $data = "";    $endtime = 0;    /* If for some reason the fp is bad, don't inf loop */    if (!is_resource($this->smtp_conn)) {      return $data;    }    stream_set_timeout($this->smtp_conn, $this->Timeout);    if ($this->Timelimit > 0) {      $endtime = time() + $this->Timelimit;    }    while(is_resource($this->smtp_conn) && !feof($this->smtp_conn)) {      $str = @fgets($this->smtp_conn,515);      if($this->do_debug >= 4) {        $this->edebug("SMTP -> get_lines(): \$data was \"$data\"" . $this->CRLF . '<br />');        $this->edebug("SMTP -> get_lines(): \$str is \"$str\"" . $this->CRLF . '<br />');      }      $data .= $str;      if($this->do_debug >= 4) {        $this->edebug("SMTP -> get_lines(): \$data is \"$data\"" . $this->CRLF . '<br />');      }      // if 4th character is a space, we are done reading, break the loop      if(substr($str,3,1) == " ") { break; }      // Timed-out? Log and break      $info = stream_get_meta_data($this->smtp_conn);      if ($info['timed_out']) {        if($this->do_debug >= 4) {          $this->edebug("SMTP -> get_lines(): timed-out (" . $this->Timeout . " seconds) <br />");        }        break;      }      // Now check if reads took too long      if ($endtime) {        if (time() > $endtime) {          if($this->do_debug >= 4) {            $this->edebug("SMTP -> get_lines(): timelimit reached (" . $this->Timelimit . " seconds) <br />");          }          break;        }      }    }    return $data;  }}?>
<?php/** * @package     Joomla.Installation * @subpackage  View * * @copyright   Copyright (C) 2005 - 2013 Open Source Matters, Inc. All rights reserved. * @license     GNU General Public License version 2 or later; see LICENSE.txt */defined('_JEXEC') or die;/* @var InstallationViewDefault $this */?><?php echo JHtml::_('installation.stepbar'); ?><form action="index.php" method="post" id="adminForm" class="form-validate form-horizontal">	<div class="btn-toolbar">		<div class="btn-group pull-right">			<a class="btn" href="#" onclick="return Install.goToPage('site');" rel="prev" title="<?php echo JText::_('JPrevious'); ?>"><i class="icon-arrow-left"></i> <?php echo JText::_('JPrevious'); ?></a>			<a  class="btn btn-primary" href="#" onclick="Install.submitform();" rel="next" title="<?php echo JText::_('JNext'); ?>"><i class="icon-arrow-right icon-white"></i> <?php echo JText::_('JNext'); ?></a>		</div>	</div>	<h3><?php echo JText::_('INSTL_DATABASE'); ?></h3>	<hr class="hr-condensed" />	<div class="control-group">		<div class="control-label">			<?php echo $this->form->getLabel('db_type'); ?>		</div>		<div class="controls">			<?php echo $this->form->getInput('db_type'); ?>			<p class="help-block">				<?php echo JText::_('INSTL_DATABASE_TYPE_DESC'); ?>			</p>		</div>	</div>	<div class="control-group">		<div class="control-label">			<?php echo $this->form->getLabel('db_host'); ?>		</div>		<div class="controls">			<?php echo $this->form->getInput('db_host'); ?>			<p class="help-block">				<?php echo JText::_('INSTL_DATABASE_HOST_DESC'); ?>			</p>		</div>	</div>	<div class="control-group">		<div class="control-label">			<?php echo $this->form->getLabel('db_user'); ?>		</div>		<div class="controls">			<?php echo $this->form->getInput('db_user'); ?>			<p class="help-block">				<?php echo JText::_('INSTL_DATABASE_USER_DESC'); ?>			</p>		</div>	</div>	<div class="control-group">		<div class="control-label">			<?php echo $this->form->getLabel('db_pass'); ?>		</div>		<div class="controls">			<?php echo $this->form->getInput('db_pass'); ?>			<p class="help-block">				<?php echo JText::_('INSTL_DATABASE_PASSWORD_DESC'); ?>			</p>		</div>	</div>	<div class="control-group">		<div class="control-label">			<?php echo $this->form->getLabel('db_name'); ?>		</div>		<div class="controls">			<?php echo $this->form->getInput('db_name'); ?>			<p class="help-block">				<?php echo JText::_('INSTL_DATABASE_NAME_DESC'); ?>			</p>		</div>	</div>	<div class="control-group">		<div class="control-label">			<?php echo $this->form->getLabel('db_prefix'); ?>		</div>		<div class="controls">			<?php echo $this->form->getInput('db_prefix'); ?>			<p class="help-block">				<?php echo JText::_('INSTL_DATABASE_PREFIX_DESC'); ?>			</p>		</div>	</div>	<div class="control-group">		<div class="control-label">			<?php echo $this->form->getLabel('db_old'); ?>		</div>		<div class="controls">			<?php echo $this->form->getInput('db_old'); ?>			<p class="help-block">				<?php echo JText::_('INSTL_DATABASE_OLD_PROCESS_DESC'); ?>			</p>		</div>	</div>	<input type="hidden" name="task" value="database" />	<?php echo JHtml::_('form.token'); ?></form>
<?php/** * @package     Joomla.Administrator * @subpackage  com_checkin * * @copyright   Copyright (C) 2005 - 2013 Open Source Matters, Inc. All rights reserved. * @license     GNU General Public License version 2 or later; see LICENSE.txt */defined('_JEXEC') or die;$listOrder	= $this->escape($this->state->get('list.ordering'));$listDirn	= $this->escape($this->state->get('list.direction'));?><form action="<?php echo JRoute::_('index.php?option=com_checkin');?>" method="post" name="adminForm" id="adminForm"><?php if (!empty( $this->sidebar)) : ?>	<div id="j-sidebar-container" class="span2">		<?php echo $this->sidebar; ?>	</div>	<div id="j-main-container" class="span10"><?php else : ?>	<div id="j-main-container"><?php endif;?>	<fieldset id="filter-bar">		<div class="filter-search fltlft">			<label class="filter-search-lbl" for="filter_search"><?php echo JText::_('JSEARCH_FILTER_LABEL'); ?></label>			<input type="text" name="filter_search" id="filter_search" value="<?php echo $this->escape($this->state->get('filter.search')); ?>" title="<?php echo JText::_('COM_CHECKIN_FILTER_SEARCH_DESC'); ?>" />			<button type="submit" class="btn"><?php echo JText::_('JSEARCH_FILTER_SUBMIT'); ?></button>			<button type="button" onclick="document.id('filter_search').value='';this.form.submit();"><?php echo JText::_('JSEARCH_FILTER_CLEAR'); ?></button>		</div>	</fieldset>	<div class="clr"> </div>	<table id="global-checkin" class="adminlist">		<thead>			<tr>				<th width="1%">					<input type="checkbox" name="checkall-toggle" value="" title="<?php echo JText::_('JGLOBAL_CHECK_ALL'); ?>" onclick="Joomla.checkAll(this)" />				</th>				<th class="left"><?php echo JHtml::_('grid.sort', 'COM_CHECKIN_DATABASE_TABLE', 'table', $listDirn, $listOrder); ?></th>				<th><?php echo JHtml::_('grid.sort', 'COM_CHECKIN_ITEMS_TO_CHECK_IN', 'count', $listDirn, $listOrder); ?></th>			</tr>		</thead>		<tbody>		<?php foreach ($this->items as $table => $count): $i = 0;?>			<tr class="row<?php echo $i % 2; ?>">				<td class="center"><?php echo JHtml::_('grid.id', $i, $table); ?></td>				<td><?php echo JText::sprintf('COM_CHECKIN_TABLE', $table); ?></td>				<td width="200" class="center"><?php echo $count; ?></td>			</tr>		<?php endforeach;?>		</tbody>		<tfoot>			<tr>				<td colspan="15">					<?php echo $this->pagination->getListFooter(); ?>				</td>			</tr>		</tfoot>	</table>	<input type="hidden" name="task" value="" />	<input type="hidden" name="boxchecked" value="0" />	<input type="hidden" name="filter_order" value="<?php echo $listOrder; ?>" />	<input type="hidden" name="filter_order_Dir" value="<?php echo $listDirn; ?>" />	<?php echo JHtml::_('form.token'); ?>	</div></form>
<?php/** * @package     Joomla.Site * @subpackage  mod_random_image * * @copyright   Copyright (C) 2005 - 2013 Open Source Matters, Inc. All rights reserved. * @license     GNU General Public License version 2 or later; see LICENSE.txt */defined('_JEXEC') or die;// Include the syndicate functions only oncerequire_once __DIR__ . '/helper.php';$link	= $params->get('link');$folder	= ModRandomImageHelper::getFolder($params);$images	= ModRandomImageHelper::getImages($params, $folder);if (!count($images)){	echo JText::_('MOD_RANDOM_IMAGE_NO_IMAGES');	return;}$image = ModRandomImageHelper::getRandomImage($params, $images);$moduleclass_sfx = htmlspecialchars($params->get('moduleclass_sfx'));require JModuleHelper::getLayoutPath('mod_random_image', $params->get('layout', 'default'));
<?php/** * @package     Joomla.Administrator * @subpackage  com_weblinks * * @copyright   Copyright (C) 2005 - 2013 Open Source Matters, Inc. All rights reserved. * @license     GNU General Public License version 2 or later; see LICENSE.txt */defined('_JEXEC') or die;/** * Weblinks Weblink Controller * * @package     Joomla.Administrator * @subpackage  com_weblinks * @since       1.5 */class WeblinksController extends JControllerLegacy{	/**	 * Method to display a view.	 *	 * @param   boolean			$cachable	If true, the view output will be cached	 * @param   array  $urlparams	An array of safe url parameters and their variable types, for valid values see {@link JFilterInput::clean()}.	 *	 * @return  JController		This object to support chaining.	 * @since   1.5	 */	public function display($cachable = false, $urlparams = false)	{		require_once JPATH_COMPONENT.'/helpers/weblinks.php';		$view   = $this->input->get('view', 'weblinks');		$layout = $this->input->get('layout', 'default');		$id     = $this->input->getInt('id');		// Check for edit form.		if ($view == 'weblink' && $layout == 'edit' && !$this->checkEditId('com_weblinks.edit.weblink', $id))		{			// Somehow the person just went to the form - we don't allow that.			$this->setError(JText::sprintf('JLIB_APPLICATION_ERROR_UNHELD_ID', $id));			$this->setMessage($this->getError(), 'error');			$this->setRedirect(JRoute::_('index.php?option=com_weblinks&view=weblinks', false));			return false;		}		parent::display();		return $this;	}}
<?php/** * @package     Joomla.Platform * @subpackage  Application * * @copyright   Copyright (C) 2005 - 2013 Open Source Matters, Inc. All rights reserved. * @license     GNU General Public License version 2 or later; see LICENSE */defined('JPATH_PLATFORM') or die;/** * Route handling class * * @package     Joomla.Platform * @subpackage  Application * @since       11.1 */class JRoute{	/**	 * The route object so we don't have to keep fetching it.	 *	 * @var    JRouter	 * @since  12.2	 */	private static $_router = null;	/**	 * Translates an internal Joomla URL to a humanly readible URL.	 *	 * @param   string   $url    Absolute or Relative URI to Joomla resource.	 * @param   boolean  $xhtml  Replace & by &amp; for XML compilance.	 * @param   integer  $ssl    Secure state for the resolved URI.	 *                             1: Make URI secure using global secure site URI.	 *                             0: Leave URI in the same secure state as it was passed to the function.	 *                            -1: Make URI unsecure using the global unsecure site URI.	 *	 * @return  The translated humanly readible URL.	 *	 * @since   11.1	 */	public static function _($url, $xhtml = true, $ssl = null)	{		if (!self::$_router)		{			// Get the router.			self::$_router = JFactory::getApplication()->getRouter();			// Make sure that we have our router			if (!self::$_router)			{				return null;			}		}		if ((strpos($url, '&') !== 0) && (strpos($url, 'index.php') !== 0))		{			return $url;		}		// Build route.		$uri = self::$_router->build($url);		$url = $uri->toString(array('path', 'query', 'fragment'));		// Replace spaces.		$url = preg_replace('/\s/u', '%20', $url);		/*		 * Get the secure/unsecure URLs.		 *		 * If the first 5 characters of the BASE are 'https', then we are on an ssl connection over		 * https and need to set our secure URL to the current request URL, if not, and the scheme is		 * 'http', then we need to do a quick string manipulation to switch schemes.		 */		if ((int) $ssl)		{			$uri = JURI::getInstance();			// Get additional parts.			static $prefix;			if (!$prefix)			{				$prefix = $uri->toString(array('host', 'port'));			}			// Determine which scheme we want.			$scheme = ((int) $ssl === 1) ? 'https' : 'http';			// Make sure our URL path begins with a slash.			if (!preg_match('#^/#', $url))			{				$url = '/' . $url;			}			// Build the URL.			$url = $scheme . '://' . $prefix . $url;		}		if ($xhtml)		{			$url = htmlspecialchars($url);		}		return $url;	}}
