<?php/** * @package     Joomla.Platform * @subpackage  Input * * @copyright   Copyright (C) 2005 - 2013 Open Source Matters, Inc. All rights reserved. * @license     GNU General Public License version 2 or later; see LICENSE */defined('JPATH_PLATFORM') or die;/** * Joomla! Input JSON Class * * This class decodes a JSON string from the raw request data and makes it available via * the standard JInput interface. * * @package     Joomla.Platform * @subpackage  Input * @since       12.2 */class JInputJSON extends JInput{	/**	 * @var    string  The raw JSON string from the request.	 * @since  12.2	 */	private $_raw;	/**	 * Constructor.	 *	 * @param   array  $source   Source data (Optional, default is the raw HTTP input decoded from JSON)	 * @param   array  $options  Array of configuration parameters (Optional)	 *	 * @since   12.2	 */	public function __construct(array $source = null, array $options = array())	{		if (isset($options['filter']))		{			$this->filter = $options['filter'];		}		else		{			$this->filter = JFilterInput::getInstance();		}		if (is_null($source))		{			$this->_raw = file_get_contents('php://input');			$this->data = json_decode($this->_raw, true);		}		else		{			$this->data = & $source;		}		// Set the options for the class.		$this->options = $options;	}	/**	 * Gets the raw JSON string from the request.	 *	 * @return  string  The raw JSON string from the request.	 *	 * @since   12.2	 */	public function getRaw()	{		return $this->_raw;	}}
<?php/** * @package     Joomla.Platform * @subpackage  Event * * @copyright   Copyright (C) 2005 - 2013 Open Source Matters, Inc. All rights reserved. * @license     GNU General Public License version 2 or later; see LICENSE */defined('JPATH_PLATFORM') or die;/** * Class to handle dispatching of events. * * This is the Observable part of the Observer design pattern * for the event architecture. * * @package     Joomla.Platform * @subpackage  Event * @link        http://docs.joomla.org/Tutorial:Plugins Plugin tutorials * @see         JPlugin * @since       12.1 */class JEventDispatcher extends JObject{	/**	 * An array of Observer objects to notify	 *	 * @var    array	 * @since  11.3	 */	protected $_observers = array();	/**	 * The state of the observable object	 *	 * @var    mixed	 * @since  11.3	 */	protected $_state = null;	/**	 * A multi dimensional array of [function][] = key for observers	 *	 * @var    array	 * @since  11.3	 */	protected $_methods = array();	/**	 * Stores the singleton instance of the dispatcher.	 *	 * @var    JEventDispatcher	 * @since  11.3	 */	protected static $instance = null;	/**	 * Returns the global Event Dispatcher object, only creating it	 * if it doesn't already exist.	 *	 * @return  JEventDispatcher  The EventDispatcher object.	 *	 * @since   11.1	 */	public static function getInstance()	{		if (self::$instance === null)		{			self::$instance = new static;		}		return self::$instance;	}	/**	 * Get the state of the JEventDispatcher object	 *	 * @return  mixed    The state of the object.	 *	 * @since   11.3	 */	public function getState()	{		return $this->_state;	}	/**	 * Registers an event handler to the event dispatcher	 *	 * @param   string  $event    Name of the event to register handler for	 * @param   string  $handler  Name of the event handler	 *	 * @return  void	 *	 * @since   11.1	 * @throws InvalidArgumentException	 */	public function register($event, $handler)	{		// Are we dealing with a class or callback type handler?		if (is_callable($handler))		{			// Ok, function type event handler... let's attach it.			$method = array('event' => $event, 'handler' => $handler);			$this->attach($method);		}		elseif (class_exists($handler))		{			// Ok, class type event handler... let's instantiate and attach it.			$this->attach(new $handler($this));		}		else		{			throw new InvalidArgumentException('Invalid event handler.');		}	}	/**	 * Triggers an event by dispatching arguments to all observers that handle	 * the event and returning their return values.	 *	 * @param   string  $event  The event to trigger.	 * @param   array   $args   An array of arguments.	 *	 * @return  array  An array of results from each function call.	 *	 * @since   11.1	 */	public function trigger($event, $args = array())	{		$result = array();		/*		 * If no arguments were passed, we still need to pass an empty array to		 * the call_user_func_array function.		 */		$args = (array) $args;		$event = strtolower($event);		// Check if any plugins are attached to the event.		if (!isset($this->_methods[$event]) || empty($this->_methods[$event]))		{			// No Plugins Associated To Event!			return $result;		}		// Loop through all plugins having a method matching our event		foreach ($this->_methods[$event] as $key)		{			// Check if the plugin is present.			if (!isset($this->_observers[$key]))			{				continue;			}			// Fire the event for an object based observer.			if (is_object($this->_observers[$key]))			{				$args['event'] = $event;				$value = $this->_observers[$key]->update($args);			}			// Fire the event for a function based observer.			elseif (is_array($this->_observers[$key]))			{				$value = call_user_func_array($this->_observers[$key]['handler'], $args);			}			if (isset($value))			{				$result[] = $value;			}		}		return $result;	}	/**	 * Attach an observer object	 *	 * @param   object  $observer  An observer object to attach	 *	 * @return  void	 *	 * @since   11.3	 */	public function attach($observer)	{		if (is_array($observer))		{			if (!isset($observer['handler']) || !isset($observer['event']) || !is_callable($observer['handler']))			{				return;			}			// Make sure we haven't already attached this array as an observer			foreach ($this->_observers as $check)			{				if (is_array($check) && $check['event'] == $observer['event'] && $check['handler'] == $observer['handler'])				{					return;				}			}			$this->_observers[] = $observer;			end($this->_observers);			$methods = array($observer['event']);		}		else		{			if (!($observer instanceof JEvent))			{				return;			}			// Make sure we haven't already attached this object as an observer			$class = get_class($observer);			foreach ($this->_observers as $check)			{				if ($check instanceof $class)				{					return;				}			}			$this->_observers[] = $observer;			$methods = array_diff(get_class_methods($observer), get_class_methods('JPlugin'));		}		$key = key($this->_observers);		foreach ($methods as $method)		{			$method = strtolower($method);			if (!isset($this->_methods[$method]))			{				$this->_methods[$method] = array();			}			$this->_methods[$method][] = $key;		}	}	/**	 * Detach an observer object	 *	 * @param   object  $observer  An observer object to detach.	 *	 * @return  boolean  True if the observer object was detached.	 *	 * @since   11.3	 */	public function detach($observer)	{		$retval = false;		$key = array_search($observer, $this->_observers);		if ($key !== false)		{			unset($this->_observers[$key]);			$retval = true;			foreach ($this->_methods as &$method)			{				$k = array_search($key, $method);				if ($k !== false)				{					unset($method[$k]);				}			}		}		return $retval;	}}
<?php/** * @package     Joomla.Administrator * @subpackage  com_installer * * @copyright   Copyright (C) 2005 - 2013 Open Source Matters, Inc. All rights reserved. * @license     GNU General Public License version 2 or later; see LICENSE.txt */defined('_JEXEC') or die;?><fieldset title="<?php echo JText::_('COM_INSTALLER_MSG_DESCFTPTITLE'); ?>">	<legend><?php echo JText::_('COM_INSTALLER_MSG_DESCFTPTITLE'); ?></legend>	<?php echo JText::_('COM_INSTALLER_MSG_DESCFTP'); ?>	<?php if ($this->ftp instanceof Exception) : ?>		<p><?php echo JText::_($this->ftp->getMessage()); ?></p>	<?php endif; ?>	<table class="adminform">		<tbody>			<tr>				<td width="120">					<label for="username"><?php echo JText::_('JGLOBAL_USERNAME'); ?></label>				</td>				<td>					<input type="text" id="username" name="username" class="input_box" size="70" value="" />				</td>			</tr>			<tr>				<td width="120">					<label for="password"><?php echo JText::_('JGLOBAL_PASSWORD'); ?></label>				</td>				<td>					<input type="password" id="password" name="password" class="input_box" size="70" value="" />				</td>			</tr>		</tbody>	</table></fieldset>
<?php/** * @package     Joomla.Administrator * @subpackage  com_admin * * @copyright   Copyright (C) 2005 - 2013 Open Source Matters, Inc. All rights reserved. * @license     GNU General Public License version 2 or later; see LICENSE.txt */defined('_JEXEC') or die;?><fieldset class="adminform">	<legend><?php echo JText::_('COM_ADMIN_CONFIGURATION_FILE'); ?></legend>		<table class="table table-striped">			<thead>				<tr>					<th width="300">						<?php echo JText::_('COM_ADMIN_SETTING'); ?>					</th>					<th>						<?php echo JText::_('COM_ADMIN_VALUE'); ?>					</th>				</tr>			</thead>			<tfoot>				<tr>					<td colspan="2">&#160;</td>				</tr>			</tfoot>			<tbody>				<?php foreach ($this->config as $key => $value):?>					<tr>						<td>							<?php echo $key;?>						</td>						<td>							<?php echo htmlspecialchars($value, ENT_QUOTES);?>						</td>					</tr>				<?php endforeach;?>			</tbody>		</table></fieldset>
<?php/** * @package     Joomla.Site * @subpackage  mod_articles_news * * @copyright   Copyright (C) 2005 - 2013 Open Source Matters, Inc. All rights reserved. * @license     GNU General Public License version 2 or later; see LICENSE.txt */defined('_JEXEC') or die;?><ul class="newsflash-vert<?php echo $params->get('moduleclass_sfx'); ?>"><?php for ($i = 0, $n = count($list); $i < $n; $i ++) :	$item = $list[$i]; ?>	<li class="newsflash-item">	<?php require JModuleHelper::getLayoutPath('mod_articles_news', '_item');	if ($n > 1 && (($i < $n - 1) || $params->get('showLastSeparator'))) : ?>		<span class="article-separator">&#160;</span>	<?php endif; ?>	</li><?php endfor; ?></ul>
<?php/** * @package     Joomla.Site * @subpackage  com_content * * @copyright   Copyright (C) 2005 - 2013 Open Source Matters, Inc. All rights reserved. * @license     GNU General Public License version 2 or later; see LICENSE.txt */defined('_JEXEC') or die;// Create a shortcut for params.$params = &$this->item->params;$images = json_decode($this->item->images);$canEdit = $this->item->params->get('access-edit');$info    = $this->item->params->get('info_block_position', 0);?><?php if ($this->item->state == 0) : ?>	<div class="system-unpublished"><?php endif; ?><?php if ($params->get('show_title')) : ?>	<h2 class="item-title">	<?php if ($params->get('link_titles') && $params->get('access-view')) : ?>		<a href="<?php echo JRoute::_(ContentHelperRoute::getArticleRoute($this->item->slug, $this->item->catid)); ?>"> <?php echo $this->escape($this->item->title); ?></a>	<?php else : ?>		<?php echo $this->escape($this->item->title); ?>	<?php endif; ?>	</h2><?php endif; ?><?php if ($this->item->state == 0) : ?>	<span class="label label-warning"><?php echo JText::_('JUNPUBLISHED'); ?></span><?php endif; ?><?php if ($params->get('show_print_icon') || $params->get('show_email_icon') || $canEdit) : ?>	<div class="btn-group pull-right"> <a class="btn dropdown-toggle" data-toggle="dropdown" href="#" role="button"> <span class="icon-cog"></span> <span class="caret"></span> </a>		<ul class="dropdown-menu">		<?php if ($params->get('show_print_icon')) : ?>			<li class="print-icon"> <?php echo JHtml::_('icon.print_popup', $this->item, $params); ?> </li>		<?php endif; ?>		<?php if ($params->get('show_email_icon')) : ?>			<li class="email-icon"> <?php echo JHtml::_('icon.email', $this->item, $params); ?> </li>		<?php endif; ?>		<?php if ($canEdit) : ?>			<li class="edit-icon"> <?php echo JHtml::_('icon.edit', $this->item, $params); ?> </li>		<?php endif; ?>		</ul>	</div><?php endif; ?><?php // Todo Not that elegant would be nice to group the params ?><?php $useDefList = ($params->get('show_modify_date') || $params->get('show_publish_date') || $params->get('show_create_date')	|| $params->get('show_hits') || $params->get('show_category') || $params->get('show_parent_category') || $params->get('show_author') ); ?><?php if ($useDefList && ($info == 0 ||  $info == 2)) : ?>	<dl class="article-info  muted">		<dt class="article-info-term">		<?php echo JText::_('COM_CONTENT_ARTICLE_INFO'); ?>		</dt>		<?php if ($params->get('show_author') && !empty($this->item->author )) : ?>			<dd class="createdby">				<?php $author = $this->item->author; ?>				<?php $author = ($this->item->created_by_alias ? $this->item->created_by_alias : $author); ?>				<?php if (!empty($this->item->contactid ) && $params->get('link_author') == true) : ?>					<?php					echo JText::sprintf('COM_CONTENT_WRITTEN_BY',						JHtml::_('link', JRoute::_('index.php?option=com_contact&view=contact&id='.$this->item->contactid), $author)					); ?>				<?php else :?>					<?php echo JText::sprintf('COM_CONTENT_WRITTEN_BY', $author); ?>				<?php endif; ?>			</dd>		<?php endif; ?>		<?php if ($params->get('show_parent_category') && !empty($this->item->parent_slug)) : ?>			<dd class="parent-category-name">				<?php $title = $this->escape($this->item->parent_title);				$url = '<a href="'.JRoute::_(ContentHelperRoute::getCategoryRoute($this->item->parent_slug)).'">'.$title.'</a>';?>				<?php if ($params->get('link_parent_category') && !empty($this->item->parent_slug)) : ?>					<?php echo JText::sprintf('COM_CONTENT_PARENT', $url); ?>				<?php else : ?>					<?php echo JText::sprintf('COM_CONTENT_PARENT', $title); ?>				<?php endif; ?>			</dd>		<?php endif; ?>		<?php if ($params->get('show_category')) : ?>			<dd class="category-name">				<?php $title = $this->escape($this->item->category_title);				$url = '<a href="'.JRoute::_(ContentHelperRoute::getCategoryRoute($this->item->catslug)).'">'.$title.'</a>';?>				<?php if ($params->get('link_category') && $this->item->catslug) : ?>					<?php echo JText::sprintf('COM_CONTENT_CATEGORY', $url); ?>				<?php else : ?>					<?php echo JText::sprintf('COM_CONTENT_CATEGORY', $title); ?>				<?php endif; ?>			</dd>		<?php endif; ?>		<?php if ($params->get('show_publish_date')) : ?>			<dd class="published">				<span class="icon-calendar"></span> <?php echo JText::sprintf('COM_CONTENT_PUBLISHED_DATE_ON', JHtml::_('date', $this->item->publish_up, JText::_('DATE_FORMAT_LC3'))); ?>			</dd>		<?php endif; ?>		<?php if ($info == 0) : ?>			<?php if ($params->get('show_modify_date')) : ?>				<dd class="modified">				<span class="icon-calendar"></span>				<?php echo JText::sprintf('COM_CONTENT_LAST_UPDATED', JHtml::_('date', $this->item->modified, JText::_('DATE_FORMAT_LC3'))); ?>				</dd>			<?php endif; ?>			<?php if ($params->get('show_create_date')) : ?>				<dd class="create">					<span class="icon-calendar"></span>					<?php echo JText::sprintf('COM_CONTENT_CREATED_DATE_ON', JHtml::_('date', $this->item->created, JText::_('DATE_FORMAT_LC3'))); ?>				</dd>			<?php endif; ?>			<?php if ($params->get('show_hits')) : ?>				<dd class="hits">					<span class="icon-eye-open"></span>					<?php echo JText::sprintf('COM_CONTENT_ARTICLE_HITS', $this->item->hits); ?>				</dd>			<?php endif; ?>		<?php endif; ?>	</dl><?php endif; ?><?php if (isset($images->image_intro) && !empty($images->image_intro)) : ?>	<?php $imgfloat = (empty($images->float_intro)) ? $params->get('float_intro') : $images->float_intro; ?>	<div class="pull-<?php echo htmlspecialchars($imgfloat); ?> item-image"> <img	<?php if ($images->image_intro_caption):		echo 'class="caption"'.' title="' .htmlspecialchars($images->image_intro_caption) .'"';	endif; ?>	src="<?php echo htmlspecialchars($images->image_intro); ?>" alt="<?php echo htmlspecialchars($images->image_intro_alt); ?>"/> </div><?php endif; ?><?php if (!$params->get('show_intro')) : ?>	<?php echo $this->item->event->afterDisplayTitle; ?><?php endif; ?><?php echo $this->item->event->beforeDisplayContent; ?><?php if ($params->get('show_intro')) : ?><?php echo $this->item->introtext; ?><?php endif; ?><?php if ($useDefList && ($info == 1 ||  $info == 2)) : ?>	<dl class="article-info muted">		<dt class="article-info-term">			<?php echo JText::_('COM_CONTENT_ARTICLE_INFO'); ?>		</dt>		<?php if ($info == 1) : ?>			<?php if ($params->get('show_author') && !empty($this->item->author )) : ?>				<dd class="createdby">					<?php $author = $this->item->author; ?>					<?php $author = ($this->item->created_by_alias ? $this->item->created_by_alias : $author); ?>					<?php if (!empty($this->item->contactid ) && $params->get('link_author') == true) : ?>						<?php						echo JText::sprintf('COM_CONTENT_WRITTEN_BY',							JHtml::_('link', JRoute::_('index.php?option=com_contact&view=contact&id='.$this->item->contactid), $author)						); ?>					<?php else : ?>						<?php echo JText::sprintf('COM_CONTENT_WRITTEN_BY', $author); ?>					<?php endif; ?>				</dd>			<?php endif; ?>			<?php if ($params->get('show_parent_category') && !empty($this->item->parent_slug)) : ?>				<dd class="parent-category-name">					<?php	$title = $this->escape($this->item->parent_title);					$url = '<a href="'.JRoute::_(ContentHelperRoute::getCategoryRoute($this->item->parent_slug)).'">'.$title.'</a>';?>					<?php if ($params->get('link_parent_category') && $this->item->parent_slug) : ?>						<?php echo JText::sprintf('COM_CONTENT_PARENT', $url); ?>					<?php else : ?>						<?php echo JText::sprintf('COM_CONTENT_PARENT', $title); ?>					<?php endif; ?>				</dd>			<?php endif; ?>			<?php if ($params->get('show_category')) : ?>				<dd class="category-name">					<?php $title = $this->escape($this->item->category_title);					$url = '<a href="'.JRoute::_(ContentHelperRoute::getCategoryRoute($this->item->catslug)).'">'.$title.'</a>';?>					<?php if ($params->get('link_category') && $this->item->catslug) : ?>						<?php echo JText::sprintf('COM_CONTENT_CATEGORY', $url); ?>					<?php else : ?>						<?php echo JText::sprintf('COM_CONTENT_CATEGORY', $title); ?>					<?php endif; ?>				</dd>			<?php endif; ?>			<?php if ($params->get('show_publish_date')) : ?>				<dd class="published">					<span class="icon-calendar"></span> <?php echo JText::sprintf('COM_CONTENT_PUBLISHED_DATE_ON', JHtml::_('date', $this->item->publish_up, JText::_('DATE_FORMAT_LC3'))); ?>				</dd>			<?php endif; ?>		<?php endif; ?>		<?php if ($params->get('show_create_date')) : ?>			<dd class="create">				<span class="icon-calendar"></span> <?php echo JText::sprintf('COM_CONTENT_CREATED_DATE_ON', JHtml::_('date', $this->item->modified, JText::_('DATE_FORMAT_LC3'))); ?>			</dd>		<?php endif; ?>		<?php if ($params->get('show_modify_date')) : ?>			<dd class="modified">				<span class="icon-calendar"></span>				<?php echo JText::sprintf('COM_CONTENT_LAST_UPDATED', JHtml::_('date', $this->item->modified, JText::_('DATE_FORMAT_LC3'))); ?>			</dd>		<?php endif; ?>		<?php if ($params->get('show_hits')) : ?>			<dd class="hits">				<span class="icon-eye-open"></span> <?php echo JText::sprintf('COM_CONTENT_ARTICLE_HITS', $this->item->hits); ?>			</dd>		<?php endif; ?>	</dl>	<?php if ($this->params->get('show_tags', 1)) : ?>		<?php $this->item->tagLayout = new JLayoutFile('joomla.content.tags'); ?>		<?php echo $this->item->tagLayout->render($this->item->tags->itemTags); ?>	<?php endif; ?><?php endif; ?><?php if ($params->get('show_readmore') && $this->item->readmore) :	if ($params->get('access-view')) :		$link = JRoute::_(ContentHelperRoute::getArticleRoute($this->item->slug, $this->item->catid));	else :		$menu = JFactory::getApplication()->getMenu();		$active = $menu->getActive();		$itemId = $active->id;		$link1 = JRoute::_('index.php?option=com_users&view=login&Itemid=' . $itemId);		$returnURL = JRoute::_(ContentHelperRoute::getArticleRoute($this->item->slug, $this->item->catid));		$link = new JURI($link1);		$link->setVar('return', base64_encode($returnURL));	endif; ?>	<p class="readmore"><a class="btn" href="<?php echo $link; ?>"> <span class="icon-chevron-right"></span>	<?php if (!$params->get('access-view')) :		echo JText::_('COM_CONTENT_REGISTER_TO_READ_MORE');	elseif ($readmore = $this->item->alternative_readmore) :		echo $readmore;		if ($params->get('show_readmore_title', 0) != 0) :		echo JHtml::_('string.truncate', ($this->item->title), $params->get('readmore_limit'));		endif;	elseif ($params->get('show_readmore_title', 0) == 0) :		echo JText::sprintf('COM_CONTENT_READ_MORE_TITLE');	else :		echo JText::_('COM_CONTENT_READ_MORE');		echo JHtml::_('string.truncate', ($this->item->title), $params->get('readmore_limit'));	endif; ?>	</a></p><?php endif; ?><?php if ($this->item->state == 0) : ?></div><?php endif; ?><?php echo $this->item->event->afterDisplayContent; ?>
<?php/** * @package     Joomla.Administrator * @subpackage  com_finder * * @copyright   Copyright (C) 2005 - 2013 Open Source Matters, Inc. All rights reserved. * @license     GNU General Public License version 2 or later; see LICENSE */defined('_JEXEC') or die;/** * HTML Parser class for the Finder indexer package. * * @package     Joomla.Administrator * @subpackage  com_finder * @since       2.5 */class FinderIndexerParserHtml extends FinderIndexerParser{	/**	 * Method to process HTML input and extract the plain text.	 *	 * @param   string  $input  The input to process.	 *	 * @return  string  The plain text input.	 *	 * @since   2.5	 */	protected function process($input)	{		// Strip invalid UTF-8 characters.		$input = iconv("utf-8", "utf-8//IGNORE", $input);		// Strip all script tags.		$input = preg_replace('#<script[^>]*>.*?</script>#si', ' ', $input);		// Deal with spacing issues in the input.		$input = str_replace('>', '> ', $input);		$input = str_replace(array('&nbsp;', '&#160;'), ' ', $input);		$input = trim(preg_replace('#\s+#u', ' ', $input));		// Strip the tags from the input and decode entities.		$input = strip_tags($input);		$input = html_entity_decode($input, ENT_QUOTES, 'UTF-8');		$input = trim(preg_replace('#\s+#u', ' ', $input));		return $input;	}}
<?php/** * @package     Joomla.Administrator * @subpackage  com_languages * * @copyright   Copyright (C) 2005 - 2013 Open Source Matters, Inc. All rights reserved. * @license     GNU General Public License version 2 or later; see LICENSE.txt */defined('_JEXEC') or die;/** * Displays a list of the installed languages. * * @package     Joomla.Administrator * @subpackage  com_languages * @since       1.6 */class LanguagesViewInstalled extends JViewLegacy{	/**	 * @var object client object	 */	protected $client = null;	/**	 * @var boolean|JExeption True, if FTP settings should be shown, or an exeption	 */	protected $ftp = null;	/**	 * @var string option name	 */	protected $option = null;	/**	 * @var object pagination information	 */	protected $pagination = null;	/**	 * @var array languages information	 */	protected $rows = null;	/**	 * @var object user object	 */	protected $user = null;	/**	 * Display the view	 */	public function display($tpl = null)	{		$this->ftp        = $this->get('Ftp');		$this->option     = $this->get('Option');		$this->pagination = $this->get('Pagination');		$this->rows       = $this->get('Data');		$this->state      = $this->get('State');		$client = (int) $this->state->get('filter.client_id', 0);		LanguagesHelper::addSubmenu('installed', $client);		$this->addToolbar();		parent::display($tpl);	}	/**	 * Add the page title and toolbar.	 *	 * @since   1.6	 */	protected function addToolbar()	{		require_once JPATH_COMPONENT.'/helpers/languages.php';		$canDo	= LanguagesHelper::getActions();		JToolbarHelper::title(JText::_('COM_LANGUAGES_VIEW_INSTALLED_TITLE'), 'langmanager.png');		if ($canDo->get('core.edit.state'))		{			JToolbarHelper::makeDefault('installed.setDefault');			JToolbarHelper::divider();		}		if ($canDo->get('core.admin'))		{			// Add install languages link to the lang installer component			$bar = JToolbar::getInstance('toolbar');			$bar->appendButton('Link', 'upload', 'COM_LANGUAGES_INSTALL', 'index.php?option=com_installer&view=languages');			JToolbarHelper::divider();			JToolbarHelper::preferences('com_languages');			JToolbarHelper::divider();		}		JToolbarHelper::help('JHELP_EXTENSIONS_LANGUAGE_MANAGER_INSTALLED');		$this->sidebar = JHtmlSidebar::render();	}}
<?php/** * @package     Joomla.Administrator * @subpackage  Template.hathor * * @copyright   Copyright (C) 2005 - 2013 Open Source Matters, Inc. All rights reserved. * @license     GNU General Public License version 2 or later; see LICENSE.txt */defined('_JEXEC') or die;// Add specific helper files for html generationJHtml::addIncludePath(JPATH_COMPONENT . '/helpers/html');// Load switcher behaviorJHtml::_('behavior.switcher');?><form action="<?php echo JRoute::_('index.php'); ?>" method="post" name="adminForm" id="adminForm">	<div id="config-document">		<div id="page-site" class="tab">			<div class="noshow">				<div class="width-100">					<?php echo $this->loadTemplate('system'); ?>				</div>			</div>		</div>		<div id="page-phpsettings" class="tab">			<div class="noshow">				<div class="width-60">					<?php echo $this->loadTemplate('phpsettings'); ?>				</div>			</div>		</div>		<div id="page-config" class="tab">			<div class="noshow">				<div class="width-60">					<?php echo $this->loadTemplate('config'); ?>				</div>			</div>		</div>		<div id="page-directory" class="tab">			<div class="noshow">				<div class="width-60">					<?php echo $this->loadTemplate('directory'); ?>				</div>			</div>		</div>		<div id="page-phpinfo" class="tab">			<div class="noshow">				<div class="width-100">					<?php echo $this->loadTemplate('phpinfo'); ?>				</div>			</div>		</div>	</div>	<div class="clr"></div></form>
<?php/** * @package     Joomla.Administrator * @subpackage  mod_version * * @copyright   Copyright (C) 2005 - 2013 Open Source Matters, Inc. All rights reserved. * @license     GNU General Public License version 2 or later; see LICENSE.txt */defined('_JEXEC') or die;?><?php if (!empty($version)) : ?>	<p align="center"><?php echo $version ?></p><?php endif; ?>
<?php/** * @package     Joomla.Site * @subpackage  com_users * * @copyright   Copyright (C) 2005 - 2013 Open Source Matters, Inc. All rights reserved. * @license     GNU General Public License version 2 or later; see LICENSE.txt */defined('_JEXEC') or die;JHtml::_('behavior.keepalive');JHtml::_('behavior.formvalidation');?><div class="reset-complete<?php echo $this->pageclass_sfx?>">	<?php if ($this->params->get('show_page_heading')) : ?>	<h1>		<?php echo $this->escape($this->params->get('page_heading')); ?>	</h1>	<?php endif; ?>	<form action="<?php echo JRoute::_('index.php?option=com_users&task=reset.complete'); ?>" method="post" class="form-validate">		<?php foreach ($this->form->getFieldsets() as $fieldset) : ?>		<p><?php echo JText::_($fieldset->label); ?></p>		<fieldset>			<dl>			<?php foreach ($this->form->getFieldset($fieldset->name) as $name => $field) : ?>				<dt><?php echo $field->label; ?></dt>				<dd><?php echo $field->input; ?></dd>			<?php endforeach; ?>			</dl>		</fieldset>		<?php endforeach; ?>		<div>			<button type="submit" class="validate"><?php echo JText::_('JSUBMIT'); ?></button>			<?php echo JHtml::_('form.token'); ?>		</div>	</form></div>
<?php/** * @package     Joomla.Administrator * @subpackage  com_media * * @copyright   Copyright (C) 2005 - 2013 Open Source Matters, Inc. All rights reserved. * @license     GNU General Public License version 2 or later; see LICENSE.txt */defined('_JEXEC') or die;?><form target="_parent" action="index.php?option=com_media&amp;tmpl=index&amp;folder=<?php echo $this->state->folder; ?>" method="post" id="mediamanager-form" name="mediamanager-form">	<ul class="manager thumbnails">		<?php		echo $this->loadTemplate('up');		?>		<?php for ($i = 0, $n = count($this->folders); $i < $n; $i++) :			$this->setFolder($i);			echo $this->loadTemplate('folder');		endfor; ?>		<?php for ($i = 0, $n = count($this->documents); $i < $n; $i++) :			$this->setDoc($i);			echo $this->loadTemplate('doc');		endfor; ?>		<?php for ($i = 0, $n = count($this->images); $i < $n; $i++) :			$this->setImage($i);			echo $this->loadTemplate('img');		endfor; ?>		<input type="hidden" name="task" value="" />		<input type="hidden" name="username" value="" />		<input type="hidden" name="password" value="" />		<?php echo JHtml::_('form.token'); ?>	</ul></form>
<?php/** * @package     Joomla.Platform * @subpackage  Crypt * * @copyright   Copyright (C) 2005 - 2011 Open Source Matters, Inc. All rights reserved. * @license     GNU General Public License version 2 or later; see LICENSE */defined('JPATH_PLATFORM') or die;/** * JCrypt cipher for mcrypt algorithm encryption, decryption and key generation. * * @package     Joomla.Platform * @subpackage  Crypt * @since       12.1 */abstract class JCryptCipherMcrypt implements JCryptCipher{	/**	 * @var    integer  The mcrypt cipher constant.	 * @see    http://www.php.net/manual/en/mcrypt.ciphers.php	 * @since  12.1	 */	protected $type;	/**	 * @var    integer  The mcrypt block cipher mode.	 * @see    http://www.php.net/manual/en/mcrypt.constants.php	 * @since  12.1	 */	protected $mode;	/**	 * @var    string  The JCrypt key type for validation.	 * @since  12.1	 */	protected $keyType;	/**	 * Constructor.	 *	 * @since   12.1	 * @throws  RuntimeException	 */	public function __construct()	{		if (!is_callable('mcrypt_encrypt'))		{			throw new RuntimeException('The mcrypt extension is not available.');		}	}	/**	 * Method to decrypt a data string.	 *	 * @param   string     $data  The encrypted string to decrypt.	 * @param   JCryptKey  $key   The key object to use for decryption.	 *	 * @return  string  The decrypted data string.	 *	 * @since   12.1	 */	public function decrypt($data, JCryptKey $key)	{		// Validate key.		if ($key->type != $this->keyType)		{			throw new InvalidArgumentException('Invalid key of type: ' . $key->type . '.  Expected ' . $this->keyType . '.');		}		// Decrypt the data.		$decrypted = trim(mcrypt_decrypt($this->type, $key->private, $data, $this->mode, $key->public));		return $decrypted;	}	/**	 * Method to encrypt a data string.	 *	 * @param   string     $data  The data string to encrypt.	 * @param   JCryptKey  $key   The key object to use for encryption.	 *	 * @return  string  The encrypted data string.	 *	 * @since   12.1	 */	public function encrypt($data, JCryptKey $key)	{		// Validate key.		if ($key->type != $this->keyType)		{			throw new InvalidArgumentException('Invalid key of type: ' . $key->type . '.  Expected ' . $this->keyType . '.');		}		// Encrypt the data.		$encrypted = mcrypt_encrypt($this->type, $key->private, $data, $this->mode, $key->public);		return $encrypted;	}	/**	 * Method to generate a new encryption key object.	 *	 * @param   array  $options  Key generation options.	 *	 * @return  JCryptKey	 *	 * @since   12.1	 */	public function generateKey(array $options = array())	{		// Create the new encryption key object.		$key = new JCryptKey($this->keyType);		// Generate an initialisation vector based on the algorithm.		$key->public = mcrypt_create_iv(mcrypt_get_iv_size($this->type, $this->mode));		// Get the salt and password setup.		$salt = (isset($options['salt'])) ? $options['salt'] : substr(pack("h*", md5(mt_rand())), 0, 16);		$password = (isset($options['password'])) ? $options['password'] : 'J00ml4R0ck$!';		// Generate the derived key.		$key->private = $this->pbkdf2($password, $salt, mcrypt_get_key_size($this->type, $this->mode));		return $key;	}	/**	 * PBKDF2 Implementation for deriving keys.	 *	 * @param   string   $p   Password	 * @param   string   $s   Salt	 * @param   integer  $kl  Key length	 * @param   integer  $c   Iteration count	 * @param   string   $a   Hash algorithm	 *	 * @return  string  The derived key.	 *	 * @see     http://en.wikipedia.org/wiki/PBKDF2	 * @see     http://www.ietf.org/rfc/rfc2898.txt	 * @since   12.1	 */	public function pbkdf2($p, $s, $kl, $c = 10000, $a = 'sha256')	{		// Hash length.		$hl = strlen(hash($a, null, true));		// Key blocks to compute.		$kb = ceil($kl / $hl);		// Derived key.		$dk = '';		// Create the key.		for ($block = 1; $block <= $kb; $block++)		{			// Initial hash for this block.			$ib = $b = hash_hmac($a, $s . pack('N', $block), $p, true);			// Perform block iterations.			for ($i = 1; $i < $c; $i++)			{				$ib ^= ($b = hash_hmac($a, $b, $p, true));			}			// Append the iterated block.			$dk .= $ib;		}		// Return derived key of correct length.		return substr($dk, 0, $kl);	}}
<?php/** * @package     Joomla.Legacy * @subpackage  Database * * @copyright   Copyright (C) 2005 - 2013 Open Source Matters, Inc. All rights reserved. * @license     GNU General Public License version 2 or later; see LICENSE */defined('JPATH_PLATFORM') or die;JLog::add('JDatabaseMysqli is deprecated, use JDatabaseDriverMysqli instead.', JLog::WARNING, 'deprecated');/** * MySQLi database driver * * @package     Joomla.Legacy * @subpackage  Database * @see         http://php.net/manual/en/book.mysqli.php * @since       11.1 * @deprecated  13.1 Use JDatabaseDriverMysqli instead. */class JDatabaseMysqli extends JDatabaseDriverMysqli{}
<?php/** * JGrid class to dynamically generate HTML tables * * @package     Joomla.Platform * @subpackage  Grid * * @copyright   Copyright (C) 2005 - 2013 Open Source Matters, Inc. All rights reserved. * @license     GNU General Public License version 2 or later; see LICENSE */defined('JPATH_PLATFORM') or die;/** * JGrid class to dynamically generate HTML tables * * @package     Joomla.Platform * @subpackage  Grid * @since       11.3 */class JGrid{	/**	 * Array of columns	 * @var array	 * @since 11.3	 */	protected $columns = array();	/**	 * Current active row	 * @var int	 * @since 11.3	 */	protected $activeRow = 0;	/**	 * Rows of the table (including header and footer rows)	 * @var array	 * @since 11.3	 */	protected $rows = array();	/**	 * Header and Footer row-IDs	 * @var array	 * @since 11.3	 */	protected $specialRows = array('header' => array(), 'footer' => array());	/**	 * Associative array of attributes for the table-tag	 * @var array	 * @since 11.3	 */	protected $options;	/**	 * Constructor for a JGrid object	 *	 * @param   array  $options  Associative array of attributes for the table-tag	 *	 * @since 11.3	 */	public function __construct($options = array())	{		$this->setTableOptions($options, true);	}	/**	 * Magic function to render this object as a table.	 *	 * @return  string	 *	 * @since 11.3	 */	public function __toString()	{		return $this->toString();	}	/**	 * Method to set the attributes for a table-tag	 *	 * @param   array  $options  Associative array of attributes for the table-tag	 * @param   bool   $replace  Replace possibly existing attributes	 *	 * @return  JGrid This object for chaining	 *	 * @since 11.3	 */	public function setTableOptions($options = array(), $replace = false)	{		if ($replace)		{			$this->options = $options;		}		else		{			$this->options = array_merge($this->options, $options);		}		return $this;	}	/**	 * Get the Attributes of the current table	 *	 * @return  array Associative array of attributes	 *	 * @since 11.3	 */	public function getTableOptions()	{		return $this->options;	}	/**	 * Add new column name to process	 *	 * @param   string  $name  Internal column name	 *	 * @return  JGrid This object for chaining	 *	 * @since 11.3	 */	public function addColumn($name)	{		$this->columns[] = $name;		return $this;	}	/**	 * Returns the list of internal columns	 *	 * @return  array List of internal columns	 *	 * @since 11.3	 */	public function getColumns()	{		return $this->columns;	}	/**	 * Delete column by name	 *	 * @param   string  $name  Name of the column to be deleted	 *	 * @return  JGrid This object for chaining	 *	 * @since 11.3	 */	public function deleteColumn($name)	{		$index = array_search($name, $this->columns);		if ($index !== false)		{			unset($this->columns[$index]);			$this->columns = array_values($this->columns);		}		return $this;	}	/**	 * Method to set a whole range of columns at once	 * This can be used to re-order the columns, too	 *	 * @param   array  $columns  List of internal column names	 *	 * @return  JGrid This object for chaining	 *	 * @since 11.3	 */	public function setColumns($columns)	{		$this->columns = array_values($columns);		return $this;	}	/**	 * Adds a row to the table and sets the currently	 * active row to the new row	 *	 * @param   array  $options  Associative array of attributes for the row	 * @param   int    $special  1 for a new row in the header, 2 for a new row in the footer	 *	 * @return  JGrid This object for chaining	 *	 * @since 11.3	 */	public function addRow($options = array(), $special = false)	{		$this->rows[]['_row'] = $options;		$this->activeRow = count($this->rows) - 1;		if ($special)		{			if ($special === 1)			{				$this->specialRows['header'][] = $this->activeRow;			}			else			{				$this->specialRows['footer'][] = $this->activeRow;			}		}		return $this;	}	/**	 * Method to get the attributes of the currently active row	 *	 * @return array Associative array of attributes	 *	 * @since 11.3	 */	public function getRowOptions()	{		return $this->rows[$this->activeRow]['_row'];	}	/**	 * Method to set the attributes of the currently active row	 *	 * @param   array  $options  Associative array of attributes	 *	 * @return JGrid This object for chaining	 *	 * @since 11.3	 */	public function setRowOptions($options)	{		$this->rows[$this->activeRow]['_row'] = $options;		return $this;	}	/**	 * Get the currently active row ID	 *	 * @return  int ID of the currently active row	 *	 * @since 11.3	 */	public function getActiveRow()	{		return $this->activeRow;	}	/**	 * Set the currently active row	 *	 * @param   int  $id  ID of the row to be set to current	 *	 * @return  JGrid This object for chaining	 *	 * @since 11.3	 */	public function setActiveRow($id)	{		$this->activeRow = (int) $id;		return $this;	}	/**	 * Set cell content for a specific column for the	 * currently active row	 *	 * @param   string  $name     Name of the column	 * @param   string  $content  Content for the cell	 * @param   array   $option   Associative array of attributes for the td-element	 * @param   bool    $replace  If false, the content is appended to the current content of the cell	 *	 * @return  JGrid This object for chaining	 *	 * @since 11.3	 */	public function setRowCell($name, $content, $option = array(), $replace = true)	{		if ($replace || !isset($this->rows[$this->activeRow][$name]))		{			$cell = new stdClass;			$cell->options = $option;			$cell->content = $content;			$this->rows[$this->activeRow][$name] = $cell;		}		else		{			$this->rows[$this->activeRow][$name]->content .= $content;			$this->rows[$this->activeRow][$name]->options = $option;		}		return $this;	}	/**	 * Get all data for a row	 *	 * @param   int  $id  ID of the row to return	 *	 * @return  array Array of columns of a table row	 *	 * @since 11.3	 */	public function getRow($id = false)	{		if ($id === false)		{			$id = $this->activeRow;		}		if (isset($this->rows[(int) $id]))		{			return $this->rows[(int) $id];		}		else		{			return false;		}	}	/**	 * Get the IDs of all rows in the table	 *	 * @param   int  $special  false for the standard rows, 1 for the header rows, 2 for the footer rows	 *	 * @return  array Array of IDs	 *	 * @since 11.3	 */	public function getRows($special = false)	{		if ($special)		{			if ($special === 1)			{				return $this->specialRows['header'];			}			else			{				return $this->specialRows['footer'];			}		}		return array_diff(array_keys($this->rows), array_merge($this->specialRows['header'], $this->specialRows['footer']));	}	/**	 * Delete a row from the object	 *	 * @param   int  $id  ID of the row to be deleted	 *	 * @return  JGrid This object for chaining	 *	 * @since 11.3	 */	public function deleteRow($id)	{		unset($this->rows[$id]);		if (in_array($id, $this->specialRows['header']))		{			unset($this->specialRows['header'][array_search($id, $this->specialRows['header'])]);		}		if (in_array($id, $this->specialRows['footer']))		{			unset($this->specialRows['footer'][array_search($id, $this->specialRows['footer'])]);		}		if ($this->activeRow == $id)		{			end($this->rows);			$this->activeRow = key($this->rows);		}		return $this;	}	/**	 * Render the HTML table	 *	 * @return  string The rendered HTML table	 *	 * @since 11.3	 */	public function toString()	{		$output = array();		$output[] = '<table' . $this->renderAttributes($this->getTableOptions()) . '>';		if (count($this->specialRows['header']))		{			$output[] = $this->renderArea($this->specialRows['header'], 'thead', 'th');		}		if (count($this->specialRows['footer']))		{			$output[] = $this->renderArea($this->specialRows['footer'], 'tfoot');		}		$ids = array_diff(array_keys($this->rows), array_merge($this->specialRows['header'], $this->specialRows['footer']));		if (count($ids))		{			$output[] = $this->renderArea($ids);		}		$output[] = '</table>';		return implode('', $output);	}	/**	 * Render an area of the table	 *	 * @param   array   $ids   IDs of the rows to render	 * @param   string  $area  Name of the area to render. Valid: tbody, tfoot, thead	 * @param   string  $cell  Name of the cell to render. Valid: td, th	 *	 * @return string The rendered table area	 *	 * @since 11.3	 */	protected function renderArea($ids, $area = 'tbody', $cell = 'td')	{		$output = array();		$output[] = '<' . $area . ">\n";		foreach ($ids as $id)		{			$output[] = "\t<tr" . $this->renderAttributes($this->rows[$id]['_row']) . ">\n";			foreach ($this->getColumns() as $name)			{				if (isset($this->rows[$id][$name]))				{					$column = $this->rows[$id][$name];					$output[] = "\t\t<" . $cell . $this->renderAttributes($column->options) . '>' . $column->content . '</' . $cell . ">\n";				}			}			$output[] = "\t</tr>\n";		}		$output[] = '</' . $area . '>';		return implode('', $output);	}	/**	 * Renders an HTML attribute from an associative array	 *	 * @param   array  $attributes  Associative array of attributes	 *	 * @return  string The HTML attribute string	 *	 * @since 11.3	 */	protected function renderAttributes($attributes)	{		if (count((array) $attributes) == 0)		{			return '';		}		$return = array();		foreach ($attributes as $key => $option)		{			$return[] = $key . '="' . $option . '"';		}		return ' ' . implode(' ', $return);	}}
<?php/** * @package     Joomla.Administrator * @subpackage  com_admin * * @copyright   Copyright (C) 2005 - 2013 Open Source Matters, Inc. All rights reserved. * @license     GNU General Public License version 2 or later; see LICENSE.txt */defined('_JEXEC') or die;?><fieldset class="adminform">	<legend><?php echo JText::_('COM_ADMIN_SYSTEM_INFORMATION'); ?></legend>	<table class="table table-striped">		<thead>			<tr>				<th width="25%">					<?php echo JText::_('COM_ADMIN_SETTING'); ?>				</th>				<th>					<?php echo JText::_('COM_ADMIN_VALUE'); ?>				</th>			</tr>		</thead>		<tfoot>			<tr>				<td colspan="2">&#160;</td>			</tr>		</tfoot>		<tbody>			<tr>				<td>					<strong><?php echo JText::_('COM_ADMIN_PHP_BUILT_ON'); ?></strong>				</td>				<td>					<?php echo $this->info['php'];?>				</td>			</tr>			<tr>				<td>					<strong><?php echo JText::_('COM_ADMIN_DATABASE_VERSION'); ?></strong>				</td>				<td>					<?php echo $this->info['dbversion'];?>				</td>			</tr>			<tr>				<td>					<strong><?php echo JText::_('COM_ADMIN_DATABASE_COLLATION'); ?></strong>				</td>				<td>					<?php echo $this->info['dbcollation'];?>				</td>			</tr>			<tr>				<td>					<strong><?php echo JText::_('COM_ADMIN_PHP_VERSION'); ?></strong>				</td>				<td>					<?php echo $this->info['phpversion'];?>				</td>			</tr>			<tr>				<td>					<strong><?php echo JText::_('COM_ADMIN_WEB_SERVER'); ?></strong>				</td>				<td>					<?php echo JHtml::_('system.server', $this->info['server']); ?>				</td>			</tr>			<tr>				<td>					<strong><?php echo JText::_('COM_ADMIN_WEBSERVER_TO_PHP_INTERFACE'); ?></strong>				</td>				<td>					<?php echo $this->info['sapi_name'];?>				</td>			</tr>			<tr>				<td>					<strong><?php echo JText::_('COM_ADMIN_JOOMLA_VERSION'); ?></strong>				</td>				<td>					<?php echo $this->info['version'];?>				</td>			</tr>			<tr>				<td>					<strong><?php echo JText::_('COM_ADMIN_PLATFORM_VERSION'); ?></strong>				</td>				<td>					<?php echo $this->info['platform'];?>				</td>			</tr>			<tr>				<td>					<strong><?php echo JText::_('COM_ADMIN_USER_AGENT'); ?></strong>				</td>				<td>					<?php echo htmlspecialchars($this->info['useragent']);?>				</td>			</tr>		</tbody>	</table></fieldset>
<?php/** * @package     Joomla.Platform * @subpackage  Form * * @copyright   Copyright (C) 2005 - 2013 Open Source Matters, Inc. All rights reserved. * @license     GNU General Public License version 2 or later; see LICENSE */defined('JPATH_PLATFORM') or die;/** * Form Rule class for the Joomla Platform. * * @package     Joomla.Platform * @subpackage  Form * @since       11.1 */class JFormRuleRules extends JFormRule{	/**	 * Method to test the value.	 *	 * @param   SimpleXMLElement  $element  The SimpleXMLElement object representing the <field /> tag for the form field object.	 * @param   mixed             $value    The form field value to validate.	 * @param   string            $group    The field name group control value. This acts as as an array container for the field.	 *                                      For example if the field has name="foo" and the group value is set to "bar" then the	 *                                      full field name would end up being "bar[foo]".	 * @param   JRegistry         $input    An optional JRegistry object with the entire data set to validate against the entire form.	 * @param   JForm             $form     The form object for which the field is being tested.	 *	 * @return  boolean  True if the value is valid, false otherwise.	 *	 * @since   11.1	 */	public function test(SimpleXMLElement $element, $value, $group = null, JRegistry $input = null, JForm $form = null)	{		// Get the possible field actions and the ones posted to validate them.		$fieldActions = self::getFieldActions($element);		$valueActions = self::getValueActions($value);		// Make sure that all posted actions are in the list of possible actions for the field.		foreach ($valueActions as $action)		{			if (!in_array($action, $fieldActions))			{				return false;			}		}		return true;	}	/**	 * Method to get the list of permission action names from the form field value.	 *	 * @param   mixed  $value  The form field value to validate.	 *	 * @return  array  A list of permission action names from the form field value.	 *	 * @since   11.1	 */	protected function getValueActions($value)	{		$actions = array();		// Iterate over the asset actions and add to the actions.		foreach ((array) $value as $name => $rules)		{			$actions[] = $name;		}		return $actions;	}	/**	 * Method to get the list of possible permission action names for the form field.	 *	 * @param   SimpleXMLElement  $element  The SimpleXMLElement object representing the <field /> tag for the	 *                                      form field object.	 *	 * @return  array   A list of permission action names from the form field element definition.	 *	 * @since   11.1	 */	protected function getFieldActions(SimpleXMLElement $element)	{		$actions = array();		// Initialise some field attributes.		$section = $element['section'] ? (string) $element['section'] : '';		$component = $element['component'] ? (string) $element['component'] : '';		// Get the asset actions for the element.		$elActions = JAccess::getActions($component, $section);		// Iterate over the asset actions and add to the actions.		foreach ($elActions as $item)		{			$actions[] = $item->name;		}		// Iterate over the children and add to the actions.		foreach ($element->children() as $el)		{			if ($el->getName() == 'action')			{				$actions[] = (string) $el['name'];			}		}		return $actions;	}}
<?php/** * @package     Joomla.Administrator * @subpackage  com_messages * * @copyright   Copyright (C) 2005 - 2013 Open Source Matters, Inc. All rights reserved. * @license     GNU General Public License version 2 or later; see LICENSE.txt */defined('_JEXEC') or die;/** * View to edit messages user configuration. * * @package     Joomla.Administrator * @subpackage  com_messages * @since       1.6 */class MessagesViewConfig extends JViewLegacy{	protected $form;	protected $item;	protected $state;	/**	 * Display the view	 */	public function display($tpl = null)	{		$this->form		= $this->get('Form');		$this->item		= $this->get('Item');		$this->state	= $this->get('State');		// Check for errors.		if (count($errors = $this->get('Errors')))		{			JError::raiseError(500, implode("\n", $errors));			return false;		}		// Bind the record to the form.		$this->form->bind($this->item);		parent::display($tpl);	}}
<?php/** * @package     Joomla.Libraries * @subpackage  Installer * * @copyright   Copyright (C) 2005 - 2013 Open Source Matters, Inc. All rights reserved. * @license     GNU General Public License version 2 or later; see LICENSE */defined('JPATH_PLATFORM') or die;/** * Extension object * * @package     Joomla.Libraries * @subpackage  Installer * @since       3.1 */class JInstallerExtension extends JObject{	/**	 * Filename of the extension	 *	 * @var    string	 * @since  3.1	 */	public $filename = '';	/**	 * Type of the extension	 *	 * @var    string	 * @since  3.1	 */	public $type = '';	/**	 * Unique Identifier for the extension	 *	 * @var    string	 * @since  3.1	 */	public $id = '';	/**	 * The status of the extension	 *	 * @var    boolean	 * @since  3.1	 */	public $published = false;	/**	 * String representation of client. Valid for modules, templates and languages.	 * Set by default to site.	 *	 * @var    string	 * @since  3.1	 */	public $client = 'site';	/**	 * The group name of the plugin. Not used for other known extension types (only plugins)	 *	 * @var string	 * @since  3.1	 */	public $group = '';	/**	 * An object representation of the manifest file stored metadata	 *	 * @var object	 * @since  3.1	 */	public $manifest_cache = null;	/**	 * An object representation of the extension params	 *	 * @var    object	 * @since  3.1	 */	public $params = null;	/**	 * Constructor	 *	 * @param   SimpleXMLElement  $element  A SimpleXMLElement from which to load data from	 *	 * @since  3.1	 */	public function __construct(SimpleXMLElement $element = null)	{		if ($element)		{			$this->type = (string) $element->attributes()->type;			$this->id = (string) $element->attributes()->id;			switch ($this->type)			{				case 'component':					// By default a component doesn't have anything					break;				case 'module':				case 'template':				case 'language':					$this->client = (string) $element->attributes()->client;					$tmp_client_id = JApplicationHelper::getClientInfo($this->client, 1);					if ($tmp_client_id == null)					{						JLog::add(JText::_('JLIB_INSTALLER_ERROR_EXTENSION_INVALID_CLIENT_IDENTIFIER'), JLog::WARNING, 'jerror');					}					else					{						$this->client_id = $tmp_client_id->id;					}					break;				case 'plugin':					$this->group = (string) $element->attributes()->group;					break;				default:					// Catch all					// Get and set client and group if we don't recognise the extension					if ($element->attributes()->client)					{						$this->client_id = JApplicationHelper::getClientInfo($this->client, 1);						$this->client_id = $this->client_id->id;					}					if ($element->attributes()->group)					{						$this->group = (string) $element->attributes()->group;					}					break;			}			$this->filename = (string) $element;		}	}}/** * Deprecated class placeholder. You should use JInstallerExtension instead. * * @package     Joomla.Libraries * @subpackage  Installer * @since       3.1 * @deprecated  4.0 * @codeCoverageIgnore */class JExtension extends JInstallerExtension{	/**	 * Constructor	 *	 * @param   SimpleXMLElement  $element  A SimpleXMLElement from which to load data from	 *	 * @since  3.1	 */	public function __construct(SimpleXMLElement $element = null)	{		parent::__construct($element);	}}
<?php/** * @package     Joomla.Libraries * @subpackage  Less * * @copyright   Copyright (C) 2005 - 2013 Open Source Matters, Inc. All rights reserved. * @license     GNU General Public License version 2 or later; see LICENSE */defined('JPATH_PLATFORM') or die;require_once __DIR__ . '/lessc.php';/** * Help system class * * @package     Joomla.Libraries * @subpackage  Less * @since       3.0 */class JLess extends lessc{	public function __construct($fname = null, $formatter = null)	{		parent::__construct($fname);		if ($formatter === null)		{			$formatter = new JLessFormatterJoomla;		}		$this->setFormatter($formatter);	}}
<?php/** * @package     Joomla.Legacy * @subpackage  Database * * @copyright   Copyright (C) 2005 - 2013 Open Source Matters, Inc. All rights reserved. * @license     GNU General Public License version 2 or later; see LICENSE */defined('JPATH_PLATFORM') or die;JLog::add('JDatabaseException is deprecated, use SPL Exceptions instead.', JLog::WARNING, 'deprecated');/** * Exception class definition for the Database subpackage. * * @package     Joomla.Legacy * @subpackage  Database * @since       11.1 * @deprecated  12.3 Use semantic exceptions instead */class JDatabaseException extends RuntimeException{}
<?php/** * @package     Joomla.Plugin * @subpackage  System.Highlight * * @copyright   Copyright (C) 2005 - 2013 Open Source Matters, Inc. All rights reserved. * @license     GNU General Public License version 2 or later; see LICENSE */defined('JPATH_BASE') or die;/** * System plugin to highlight terms. * * @package     Joomla.Plugin * @subpackage  System.Highlight * @since       2.5 */class PlgSystemHighlight extends JPlugin{	/**	 * Method to catch the onAfterDispatch event.	 *	 * This is where we setup the click-through content highlighting for.	 * The highlighting is done with JavaScript so we just	 * need to check a few parameters and the JHtml behavior will do the rest.	 *	 * @return  boolean  True on success	 *	 * @since   2.5	 */	public function onAfterDispatch()	{		// Check that we are in the site application.		if (JFactory::getApplication()->isAdmin())		{			return true;		}		// Set the variables		$input = JFactory::getApplication()->input;		$extension = $input->get('option', '', 'cmd');		// Check if the highlighter is enabled.		if (!JComponentHelper::getParams($extension)->get('highlight_terms', 1))		{			return true;		}		// Check if the highlighter should be activated in this environment.		if (JFactory::getDocument()->getType() !== 'html' || $input->get('tmpl', '', 'cmd') === 'component')		{			return true;		}		// Get the terms to highlight from the request.		$terms = $input->request->get('highlight', null, 'base64');		$terms = $terms ? json_decode(base64_decode($terms)) : null;		// Check the terms.		if (empty($terms))		{			return true;		}		// Clean the terms array		$filter = JFilterInput::getInstance();		$cleanTerms = array();		foreach ($terms as $term)		{			$cleanTerms[] = htmlspecialchars($filter->clean($term, 'string'));		}		// Activate the highlighter.		JHtml::_('behavior.highlighter', $cleanTerms);		// Adjust the component buffer.		$doc = JFactory::getDocument();		$buf = $doc->getBuffer('component');		$buf = '<br id="highlighter-start" />' . $buf . '<br id="highlighter-end" />';		$doc->setBuffer($buf, 'component');		return true;	}}
<?php/** * @package     Joomla.Administrator * @subpackage  mod_title * * @copyright   Copyright (C) 2005 - 2013 Open Source Matters, Inc. All rights reserved. * @license     GNU General Public License version 2 or later; see LICENSE.txt */defined('_JEXEC') or die;// Get the component title divif (isset(JFactory::getApplication()->JComponentTitle)){	$title = JFactory::getApplication()->JComponentTitle;}require JModuleHelper::getLayoutPath('mod_title', $params->get('layout', 'default'));
<?php/** * @package     Joomla.Administrator * @subpackage  com_content * * @copyright   Copyright (C) 2005 - 2013 Open Source Matters, Inc. All rights reserved. * @license     GNU General Public License version 2 or later; see LICENSE.txt */defined('_JEXEC') or die;$script  = 'function insertPagebreak() {'."\n\t";// Get the pagebreak title$script .= 'var title = document.getElementById("title").value;'."\n\t";$script .= 'if (title != \'\') {'."\n\t\t";$script .= 'title = "title=\""+title+"\" ";'."\n\t";$script .= '}'."\n\t";// Get the pagebreak toc alias -- not inserting for now// don't know which attribute to use...$script .= 'var alt = document.getElementById("alt").value;'."\n\t";$script .= 'if (alt != \'\') {'."\n\t\t";$script .= 'alt = "alt=\""+alt+"\" ";'."\n\t";$script .= '}'."\n\t";$script .= 'var tag = "<hr class=\"system-pagebreak\" "+title+" "+alt+"/>";'."\n\t";$script .= 'window.parent.jInsertEditorText(tag, \''.$this->eName.'\');'."\n\t";$script .= 'window.parent.SqueezeBox.close();'."\n\t";$script .= 'return false;'."\n";$script .= '}'."\n";JFactory::getDocument()->addScriptDeclaration($script);?>		<form>		<table width="100%" align="center">			<tr width="40%">				<td class="key" align="right">					<label for="title">						<?php echo JText::_('COM_CONTENT_PAGEBREAK_TITLE'); ?>					</label>				</td>				<td>					<input type="text" id="title" name="title" />				</td>			</tr>			<tr width="60%">				<td class="key" align="right">					<label for="alias">						<?php echo JText::_('COM_CONTENT_PAGEBREAK_TOC'); ?>					</label>				</td>				<td>					<input type="text" id="alt" name="alt" />				</td>			</tr>		</table>		</form>		<button onclick="insertPagebreak();"><?php echo JText::_('COM_CONTENT_PAGEBREAK_INSERT_BUTTON'); ?></button>
<?php/** * @package     Joomla.Site * @subpackage  com_users * * @copyright   Copyright (C) 2005 - 2013 Open Source Matters, Inc. All rights reserved. * @license     GNU General Public License version 2 or later; see LICENSE.txt */defined('_JEXEC') or die;require_once JPATH_COMPONENT.'/controller.php';/** * Reset controller class for Users. * * @package     Joomla.Site * @subpackage  com_users * @since       1.6 */class UsersControllerRemind extends UsersController{	/**	 * Method to request a username reminder.	 *	 * @since   1.6	 */	public function remind()	{		// Check the request token.		JSession::checkToken('post') or jexit(JText::_('JINVALID_TOKEN'));		$model = $this->getModel('Remind', 'UsersModel');		$data  = $this->input->post->get('jform', array(), 'array');		// Submit the password reset request.		$return	= $model->processRemindRequest($data);		// Check for a hard error.		if ($return == false)		{			// The request failed.			// Get the route to the next page.			$itemid = UsersHelperRoute::getRemindRoute();			$itemid = $itemid !== null ? '&Itemid='.$itemid : '';			$route	= 'index.php?option=com_users&view=remind'.$itemid;			// Go back to the request form.			$message = JText::sprintf('COM_USERS_REMIND_REQUEST_FAILED', $model->getError());			$this->setRedirect(JRoute::_($route, false), $message, 'notice');			return false;		}		else		{			// The request succeeded.			// Get the route to the next page.			$itemid = UsersHelperRoute::getRemindRoute();			$itemid = $itemid !== null ? '&Itemid='.$itemid : '';			$route	= 'index.php?option=com_users&view=login'.$itemid;			// Proceed to step two.			$message = JText::_('COM_USERS_REMIND_REQUEST_SUCCESS');			$this->setRedirect(JRoute::_($route, false), $message);			return true;		}	}}
<?php/** * @package    Joomla.Installation * * @copyright  Copyright (C) 2005 - 2013 Open Source Matters, Inc. All rights reserved. * @license    GNU General Public License version 2 or later; see LICENSE.txt */defined('_JEXEC') or die;/** * HTML utility class for the installation application * * @package  Joomla.Installation * @since    1.6 */class JHtmlInstallation{	/**	 * Method to generate the side bar	 *	 * @return  string  Markup for the side bar	 *	 * @since   1.6	 */	public static function stepbar()	{		// Determine if the configuration file path is writable.		$path = JPATH_CONFIGURATION . '/configuration.php';		$useftp = (file_exists($path)) ? !is_writable($path) : !is_writable(JPATH_CONFIGURATION . '/');		$tabs = array();		$tabs[] = 'site';		$tabs[] = 'database';		if ($useftp)		{			$tabs[] = 'ftp';		}		$tabs[] = 'summary';		$html = array();		$html[] = '<ul class="nav nav-tabs">';		foreach ($tabs as $tab)		{			$html[] = self::getTab($tab, $tabs);		}		$html[] = '</ul>';		return implode('', $html);	}	/**	 * Method to generate the side bar	 *	 * @return  string  Markup for the side bar	 *	 * @since   3.1	 */	public static function stepbarlanguages()	{		$tabs = array();		$tabs[] = 'languages';		$tabs[] = 'defaultlanguage';		$tabs[] = 'complete';		$html = array();		$html[] = '<ul class="nav nav-tabs">';		foreach ($tabs as $tab)		{			$html[] = self::getTab($tab, $tabs);		}		$html[] = '</ul>';		return implode('', $html);	}	/**	 * Method to generate the navigation tab	 *	 * @param   string  $id    The container ID	 * @param   array   $tabs  The navigation tabs	 *	 * @return  string  Markup for the tab	 *	 * @since   3.1	 */	private static function getTab($id, $tabs)	{		$input = JFactory::getApplication()->input;		$num   = self::getTabNumber($id, $tabs);		$view  = self::getTabNumber($input->getWord('view'), $tabs);		$tab   = '<span class="badge">' . $num . '</span> ' . JText::_('INSTL_STEP_' . strtoupper($id) . '_LABEL');		if ($view + 1 == $num)		{			$tab = '<a href="#" onclick="Install.submitform();">' . $tab . '</a>';		}		elseif ($view < $num)		{			$tab = '<span>' . $tab . '</span>';		}		else		{			$tab = '<a href="#" onclick="return Install.goToPage(\'' . $id . '\')">' . $tab . '</a>';		}		return '<li class="step' . ($num == $view ? ' active' : '') . '" id="' . $id . '">' . $tab . '</li>';	}	/**	 * Method to determine the tab (step) number	 *	 * @param   string  $id    The container ID	 * @param   array   $tabs  The navigation tabs	 *	 * @return  integer  Tab number in navigation sequence	 *	 * @since   3.1	 */	private static function getTabNumber($id, $tabs)	{		$num = (int) array_search($id, $tabs);		$num++;		return $num;	}}
<?php/** * Verifies that class members have scope modifiers. * * PHP version 5 * * @category  PHP * @package   PHP_CodeSniffer * @author    Greg Sherwood <gsherwood@squiz.net> * @author    Marc McIntyre <mmcintyre@squiz.net> * @copyright 2006 Squiz Pty Ltd (ABN 77 084 670 600) * @license   http://matrix.squiz.net/developer/tools/php_cs/licence BSD Licence * @version   CVS: $Id: MemberVarScopeSniff.php 8 2010-11-06 00:40:23Z elkuku $ * @link      http://pear.php.net/package/PHP_CodeSniffer */if(class_exists('PHP_CodeSniffer_Standards_AbstractVariableSniff', true) === false){    throw new PHP_CodeSniffer_Exception('Class PHP_CodeSniffer_Standards_AbstractVariableSniff not found');}/** * Verifies that class members have scope modifiers. * * Example: * class Foo * { *     <b class="good">private $foo</b> *     <b class="bad">var $foo</b> * } * * @category  PHP * @package   PHP_CodeSniffer * @author    Greg Sherwood <gsherwood@squiz.net> * @author    Marc McIntyre <mmcintyre@squiz.net> * @copyright 2006 Squiz Pty Ltd (ABN 77 084 670 600) * @license   http://matrix.squiz.net/developer/tools/php_cs/licence BSD Licence * @version   Release: 1.3.0RC1 * @link      http://pear.php.net/package/PHP_CodeSniffer */class Joomla_Sniffs_Classes_MemberVarScopeSniff extends PHP_CodeSniffer_Standards_AbstractVariableSniff{    /**     * Processes the function tokens within the class.     *     * @param PHP_CodeSniffer_File $phpcsFile The file where this token was found.     * @param integer                  $stackPtr  The position where the token was found.     *     * @return void     */    protected function processMemberVar(PHP_CodeSniffer_File $phpcsFile, $stackPtr)    {        $tokens = $phpcsFile->getTokens();        $modifier = $phpcsFile->findPrevious(PHP_CodeSniffer_Tokens::$scopeModifiers, $stackPtr);        if(($modifier === false) || ($tokens[$modifier]['line'] !== $tokens[$stackPtr]['line']))        {            $error = sprintf('Scope modifier not specified for member variable "%s"'            , $tokens[$stackPtr]['content']);            $phpcsFile->addWarning($error, $stackPtr, 'Missing');        }    }//function    /**     * Processes normal variables.     *     * @param PHP_CodeSniffer_File $phpcsFile The file where this token was found.     * @param integer                  $stackPtr  The position where the token was found.     *     * @return void     */    protected function processVariable(PHP_CodeSniffer_File $phpcsFile, $stackPtr)    {        // We don't care about normal variables.        return;    }//function    /**     * Processes variables in double quoted strings.     *     * @param PHP_CodeSniffer_File $phpcsFile The file where this token was found.     * @param integer                  $stackPtr  The position where the token was found.     *     * @return void     */    protected function processVariableInString(PHP_CodeSniffer_File $phpcsFile, $stackPtr)    {        // We don't care about normal variables.        return;    }//function}//class
<?php/** * @package     Joomla.Administrator * @subpackage  com_finder * * @copyright   Copyright (C) 2005 - 2013 Open Source Matters, Inc. All rights reserved. * @license     GNU General Public License version 2 or later; see LICENSE */defined('_JEXEC') or die;/** * Token class for the Finder indexer package. * * @package     Joomla.Administrator * @subpackage  com_finder * @since       2.5 */class FinderIndexerToken{	/**	 * This is the term that will be referenced in the terms table and the	 * mapping tables.	 *	 * @var    string	 * @since  2.5	 */	public $term;	/**	 * The stem is used to match the root term and produce more potential	 * matches when searching the index.	 *	 * @var    string	 * @since  2.5	 */	public $stem;	/**	 * If the token is numeric, it is likely to be short and uncommon so the	 * weight is adjusted to compensate for that situation.	 *	 * @var    boolean	 * @since  2.5	 */	public $numeric;	/**	 * If the token is a common term, the weight is adjusted to compensate for	 * the higher frequency of the term in relation to other terms.	 *	 * @var    boolean	 * @since  2.5	 */	public $common;	/**	 * Flag for phrase tokens.	 *	 * @var    boolean	 * @since  2.5	 */	public $phrase;	/**	 * The length is used to calculate the weight of the token.	 *	 * @var    integer	 * @since  2.5	 */	public $length;	/**	 * The weight is calculated based on token size and whether the token is	 * considered a common term.	 *	 * @var    integer	 * @since  2.5	 */	public $weight;	/**	 * The simple language identifier for the token.	 *	 * @var    string	 * @since  2.5	 */	public $language;	/**	 * Method to construct the token object.	 *	 * @param   mixed   $term    The term as a string for words or an array for phrases.	 * @param   string  $lang    The simple language identifier.	 * @param   string  $spacer  The space separator for phrases. [optional]	 *	 * @since   2.5	 */	public function __construct($term, $lang, $spacer = ' ')	{		$this->language = $lang;		// Tokens can be a single word or an array of words representing a phrase.		if (is_array($term))		{			// Populate the token instance.			$this->term = implode($spacer, $term);			$this->stem = implode($spacer, array_map(array('FinderIndexerHelper', 'stem'), $term, array($lang)));			$this->numeric = false;			$this->common = false;			$this->phrase = true;			$this->length = JString::strlen($this->term);			/*			 * Calculate the weight of the token.			 *			 * 1. Length of the token up to 30 and divide by 30, add 1.			 * 2. Round weight to 4 decimal points.			 */			$this->weight = (($this->length >= 30 ? 30 : $this->length) / 30) + 1;			$this->weight = round($this->weight, 4);		}		else		{			// Populate the token instance.			$this->term = $term;			$this->stem = FinderIndexerHelper::stem($this->term, $lang);			$this->numeric = (is_numeric($this->term) || (bool) preg_match('#^[0-9,.\-\+]+$#', $this->term));			$this->common = $this->numeric ? false : FinderIndexerHelper::isCommon($this->term, $lang);			$this->phrase = false;			$this->length = JString::strlen($this->term);			/*			 * Calculate the weight of the token.			 *			 * 1. Length of the token up to 15 and divide by 15.			 * 2. If common term, divide weight by 8.			 * 3. If numeric, multiply weight by 1.5.			 * 4. Round weight to 4 decimal points.			 */			$this->weight = (($this->length >= 15 ? 15 : $this->length) / 15);			$this->weight = ($this->common == true ? $this->weight / 8 : $this->weight);			$this->weight = ($this->numeric == true ? $this->weight * 1.5 : $this->weight);			$this->weight = round($this->weight, 4);		}	}}
<?php/** * @package     Joomla.Administrator * @subpackage  com_users * * @copyright   Copyright (C) 2005 - 2013 Open Source Matters, Inc. All rights reserved. * @license     GNU General Public License version 2 or later; see LICENSE.txt */defined('_JEXEC') or die;/** * User notes controller class. * * @package     Joomla.Administrator * @subpackage  com_users * @since       2.5 */class UsersControllerNotes extends JControllerAdmin{	/**	 * The prefix to use with controller messages.	 *	 * @var    string	 * @since  2.5	 */	protected $text_prefix = 'COM_USERS_NOTES';	/**	 * @param   string  $name    The model name. Optional.	 * @param   string  $prefix  The class prefix. Optional.	 * @param   array   $config  Configuration array for model. Optional.	 *	 * @return  object  The model.	 *	 * @since   2.5	 */	public function getModel($name = 'Note', $prefix = 'UsersModel', $config = array('ignore_request' => true))	{		return parent::getModel($name, $prefix, $config);	}}
<?php/** * @package     Joomla.Site * @subpackage  com_finder * * @copyright   Copyright (C) 2005 - 2013 Open Source Matters, Inc. All rights reserved. * @license     GNU General Public License version 2 or later; see LICENSE */defined('_JEXEC') or die;JHtml::_('behavior.framework');JHtml::addIncludePath(JPATH_COMPONENT . '/helpers/html');JHtml::stylesheet('com_finder/finder.css', false, true, false);?><div class="finder<?php echo $this->pageclass_sfx; ?>"><?php if ($this->params->get('show_page_heading')) : ?><h1>	<?php if ($this->escape($this->params->get('page_heading'))) : ?>		<?php echo $this->escape($this->params->get('page_heading')); ?>	<?php else : ?>		<?php echo $this->escape($this->params->get('page_title')); ?>	<?php endif; ?></h1><?php endif; ?><?php if ($this->params->get('show_search_form', 1)) : ?>	<div id="search-form">		<?php echo $this->loadTemplate('form'); ?>	</div><?php endif;// Load the search results layout if we are performing a search.if ($this->query->search === true):?>	<div id="search-results">		<?php echo $this->loadTemplate('results'); ?>	</div><?php endif; ?></div>
<?php/** * @package     Joomla.Legacy * @subpackage  Model * * @copyright   Copyright (C) 2005 - 2013 Open Source Matters, Inc. All rights reserved. * @license     GNU General Public License version 2 or later; see LICENSE */defined('JPATH_PLATFORM') or die;/** * Base class for a Joomla Model * * Acts as a Factory class for application specific objects and * provides many supporting API functions. * * @package     Joomla.Legacy * @subpackage  Model * @since       12.2 */abstract class JModelLegacy extends JObject{	/**	 * Indicates if the internal state has been set	 *	 * @var    boolean	 * @since  12.2	 */	protected $__state_set = null;	/**	 * Database Connector	 *	 * @var    object	 * @since  12.2	 */	protected $_db;	/**	 * The model (base) name	 *	 * @var    string	 * @since  12.2	 */	protected $name;	/**	 * The URL option for the component.	 *	 * @var    string	 * @since  12.2	 */	protected $option = null;	/**	 * A state object	 *	 * @var    string	 * @since  12.2	 */	protected $state;	/**	 * The event to trigger when cleaning cache.	 *	 * @var      string	 * @since    12.2	 */	protected $event_clean_cache = null;	/**	 * Add a directory where JModelLegacy should search for models. You may	 * either pass a string or an array of directories.	 *	 * @param   mixed   $path    A path or array[sting] of paths to search.	 * @param   string  $prefix  A prefix for models.	 *	 * @return  array  An array with directory elements. If prefix is equal to '', all directories are returned.	 *	 * @since   12.2	 */	public static function addIncludePath($path = '', $prefix = '')	{		static $paths;		if (!isset($paths))		{			$paths = array();		}		if (!isset($paths[$prefix]))		{			$paths[$prefix] = array();		}		if (!isset($paths['']))		{			$paths[''] = array();		}		if (!empty($path))		{			jimport('joomla.filesystem.path');			if (!in_array($path, $paths[$prefix]))			{				array_unshift($paths[$prefix], JPath::clean($path));			}			if (!in_array($path, $paths['']))			{				array_unshift($paths[''], JPath::clean($path));			}		}		return $paths[$prefix];	}	/**	 * Adds to the stack of model table paths in LIFO order.	 *	 * @param   mixed  $path  The directory as a string or directories as an array to add.	 *	 * @return  void	 *	 * @since   12.2	 */	public static function addTablePath($path)	{		JTable::addIncludePath($path);	}	/**	 * Create the filename for a resource	 *	 * @param   string  $type   The resource type to create the filename for.	 * @param   array   $parts  An associative array of filename information.	 *	 * @return  string  The filename	 *	 * @since   12.2	 */	protected static function _createFileName($type, $parts = array())	{		$filename = '';		switch ($type)		{			case 'model':				$filename = strtolower($parts['name']) . '.php';				break;		}		return $filename;	}	/**	 * Returns a Model object, always creating it	 *	 * @param   string  $type    The model type to instantiate	 * @param   string  $prefix  Prefix for the model class name. Optional.	 * @param   array   $config  Configuration array for model. Optional.	 *	 * @return  mixed   A model object or false on failure	 *	 * @since   12.2	 */	public static function getInstance($type, $prefix = '', $config = array())	{		$type = preg_replace('/[^A-Z0-9_\.-]/i', '', $type);		$modelClass = $prefix . ucfirst($type);		if (!class_exists($modelClass))		{			jimport('joomla.filesystem.path');			$path = JPath::find(self::addIncludePath(null, $prefix), self::_createFileName('model', array('name' => $type)));			if (!$path)			{				$path = JPath::find(self::addIncludePath(null, ''), self::_createFileName('model', array('name' => $type)));			}			if ($path)			{				require_once $path;				if (!class_exists($modelClass))				{					JLog::add(JText::sprintf('JLIB_APPLICATION_ERROR_MODELCLASS_NOT_FOUND', $modelClass), JLog::WARNING, 'jerror');					return false;				}			}			else			{				return false;			}		}		return new $modelClass($config);	}	/**	 * Constructor	 *	 * @param   array  $config  An array of configuration options (name, state, dbo, table_path, ignore_request).	 *	 * @since   12.2	 * @throws  Exception	 */	public function __construct($config = array())	{		// Guess the option from the class name (Option)Model(View).		if (empty($this->option))		{			$r = null;			if (!preg_match('/(.*)Model/i', get_class($this), $r))			{				throw new Exception(JText::_('JLIB_APPLICATION_ERROR_MODEL_GET_NAME'), 500);			}			$this->option = 'com_' . strtolower($r[1]);		}		// Set the view name		if (empty($this->name))		{			if (array_key_exists('name', $config))			{				$this->name = $config['name'];			}			else			{				$this->name = $this->getName();			}		}		// Set the model state		if (array_key_exists('state', $config))		{			$this->state = $config['state'];		}		else		{			$this->state = new JObject;		}		// Set the model dbo		if (array_key_exists('dbo', $config))		{			$this->_db = $config['dbo'];		}		else		{			$this->_db = JFactory::getDbo();		}		// Set the default view search path		if (array_key_exists('table_path', $config))		{			$this->addTablePath($config['table_path']);		}		elseif (defined('JPATH_COMPONENT_ADMINISTRATOR'))		{			$this->addTablePath(JPATH_COMPONENT_ADMINISTRATOR . '/tables');		}		// Set the internal state marker - used to ignore setting state from the request		if (!empty($config['ignore_request']))		{			$this->__state_set = true;		}		// Set the clean cache event		if (isset($config['event_clean_cache']))		{			$this->event_clean_cache = $config['event_clean_cache'];		}		elseif (empty($this->event_clean_cache))		{			$this->event_clean_cache = 'onContentCleanCache';		}	}	/**	 * Gets an array of objects from the results of database query.	 *	 * @param   string   $query       The query.	 * @param   integer  $limitstart  Offset.	 * @param   integer  $limit       The number of records.	 *	 * @return  array  An array of results.	 *	 * @since   12.2	 * @throws  RuntimeException	 */	protected function _getList($query, $limitstart = 0, $limit = 0)	{		$this->_db->setQuery($query, $limitstart, $limit);		$result = $this->_db->loadObjectList();		return $result;	}	/**	 * Returns a record count for the query	 *	 * @param   string  $query  The query.	 *	 * @return  integer  Number of rows for query	 *	 * @since   12.2	 */	protected function _getListCount($query)	{		$this->_db->setQuery($query);		$this->_db->execute();		return $this->_db->getNumRows();	}	/**	 * Method to load and return a model object.	 *	 * @param   string  $name    The name of the view	 * @param   string  $prefix  The class prefix. Optional.	 * @param   array   $config  Configuration settings to pass to JTable::getInstance	 *	 * @return  mixed  Model object or boolean false if failed	 *	 * @since   12.2	 * @see     JTable::getInstance	 */	protected function _createTable($name, $prefix = 'Table', $config = array())	{		// Clean the model name		$name = preg_replace('/[^A-Z0-9_]/i', '', $name);		$prefix = preg_replace('/[^A-Z0-9_]/i', '', $prefix);		// Make sure we are returning a DBO object		if (!array_key_exists('dbo', $config))		{			$config['dbo'] = $this->getDbo();		}		return JTable::getInstance($name, $prefix, $config);	}	/**	 * Method to get the database driver object	 *	 * @return  JDatabaseDriver	 */	public function getDbo()	{		return $this->_db;	}	/**	 * Method to get the model name	 *	 * The model name. By default parsed using the classname or it can be set	 * by passing a $config['name'] in the class constructor	 *	 * @return  string  The name of the model	 *	 * @since   12.2	 * @throws  Exception	 */	public function getName()	{		if (empty($this->name))		{			$r = null;			if (!preg_match('/Model(.*)/i', get_class($this), $r))			{				throw new Exception(JText::_('JLIB_APPLICATION_ERROR_MODEL_GET_NAME'), 500);			}			$this->name = strtolower($r[1]);		}		return $this->name;	}	/**	 * Method to get model state variables	 *	 * @param   string  $property  Optional parameter name	 * @param   mixed   $default   Optional default value	 *	 * @return  object  The property where specified, the state object where omitted	 *	 * @since   12.2	 */	public function getState($property = null, $default = null)	{		if (!$this->__state_set)		{			// Protected method to auto-populate the model state.			$this->populateState();			// Set the model state set flag to true.			$this->__state_set = true;		}		return $property === null ? $this->state : $this->state->get($property, $default);	}	/**	 * Method to get a table object, load it if necessary.	 *	 * @param   string  $name     The table name. Optional.	 * @param   string  $prefix   The class prefix. Optional.	 * @param   array   $options  Configuration array for model. Optional.	 *	 * @return  JTable  A JTable object	 *	 * @since   12.2	 * @throws  Exception	 */	public function getTable($name = '', $prefix = 'Table', $options = array())	{		if (empty($name))		{			$name = $this->getName();		}		if ($table = $this->_createTable($name, $prefix, $options))		{			return $table;		}		throw new Exception(JText::sprintf('JLIB_APPLICATION_ERROR_TABLE_NAME_NOT_SUPPORTED', $name), 0);	}	/**	 * Method to auto-populate the model state.	 *	 * This method should only be called once per instantiation and is designed	 * to be called on the first call to the getState() method unless the model	 * configuration flag to ignore the request is set.	 *	 * @return  void	 *	 * @note    Calling getState in this method will result in recursion.	 * @since   12.2	 */	protected function populateState()	{	}	/**	 * Method to set the database driver object	 *	 * @param   JDatabaseDriver  $db  A JDatabaseDriver based object	 *	 * @return  void	 *	 * @since   12.2	 */	public function setDbo($db)	{		$this->_db = $db;	}	/**	 * Method to set model state variables	 *	 * @param   string  $property  The name of the property.	 * @param   mixed   $value     The value of the property to set or null.	 *	 * @return  mixed  The previous value of the property or null if not set.	 *	 * @since   12.2	 */	public function setState($property, $value = null)	{		return $this->state->set($property, $value);	}	/**	 * Clean the cache	 *	 * @param   string   $group      The cache group	 * @param   integer  $client_id  The ID of the client	 *	 * @return  void	 *	 * @since   12.2	 */	protected function cleanCache($group = null, $client_id = 0)	{		$conf = JFactory::getConfig();		$dispatcher = JEventDispatcher::getInstance();		$options = array(			'defaultgroup' => ($group) ? $group : (isset($this->option) ? $this->option : JFactory::getApplication()->input->get('option')),			'cachebase' => ($client_id) ? JPATH_ADMINISTRATOR . '/cache' : $conf->get('cache_path', JPATH_SITE . '/cache'));		$cache = JCache::getInstance('callback', $options);		$cache->clean();		// Trigger the onContentCleanCache event.		$dispatcher->trigger($this->event_clean_cache, $options);	}}
<?php/** * @package     Joomla.Site * @subpackage  Template.system * * @copyright   Copyright (C) 2005 - 2013 Open Source Matters, Inc. All rights reserved. * @license     GNU General Public License version 2 or later; see LICENSE.txt */defined('_JEXEC') or die;/* * none (output raw module content) */function modChrome_none($module, &$params, &$attribs){	echo $module->content;}/* * html5 (chosen html5 tag and font headder tags) */function modChrome_html5($module, &$params, &$attribs){	$moduleTag      = $params->get('module_tag', 'div');	$headerTag      = htmlspecialchars($params->get('header_tag', 'h3'));	$bootstrapSize  = (int) $params->get('bootstrap_size', 0);	$moduleClass    = $bootstrapSize != 0 ? ' span' . $bootstrapSize : '';	if (!empty ($module->content)) : ?>		<<?php echo $moduleTag; ?> class="moduletable<?php echo htmlspecialchars($params->get('moduleclass_sfx')); ?><?php echo $moduleClass; ?>">		<?php if ((bool) $module->showtitle) :?>			<<?php echo $headerTag; ?> class="<?php echo $params->get('header_class'); ?>"><?php echo $module->title; ?></<?php echo $headerTag; ?>>		<?php endif; ?>			<?php echo $module->content; ?>				</<?php echo $moduleTag; ?>>	<?php endif;}/* * Module chrome that wraps the module in a table */function modChrome_table($module, &$params, &$attribs){ ?>	<table cellpadding="0" cellspacing="0" class="moduletable<?php echo htmlspecialchars($params->get('moduleclass_sfx')); ?>">	<?php if ((bool) $module->showtitle) : ?>		<tr>			<th>				<?php echo $module->title; ?>			</th>		</tr>	<?php endif; ?>		<tr>			<td>				<?php echo $module->content; ?>			</td>		</tr>		</table>	<?php}/* * Module chrome that wraps the tabled module output in a <td> tag of another table */function modChrome_horz($module, &$params, &$attribs){ ?>	<table cellspacing="1" cellpadding="0" width="100%">		<tr>			<td>				<?php modChrome_table($module, $params, $attribs); ?>			</td>		</tr>	</table>	<?php}/* * xhtml (divs and font headder tags) */function modChrome_xhtml($module, &$params, &$attribs){	if (!empty ($module->content)) : ?>		<div class="moduletable<?php echo htmlspecialchars($params->get('moduleclass_sfx')); ?>">		<?php if ((bool) $module->showtitle) : ?>			<h3><?php echo $module->title; ?></h3>		<?php endif; ?>			<?php echo $module->content; ?>		</div>	<?php endif;}/* * Module chrome that allows for rounded corners by wrapping in nested div tags */function modChrome_rounded($module, &$params, &$attribs){ ?>		<div class="module<?php echo htmlspecialchars($params->get('moduleclass_sfx')); ?>">			<div>				<div>					<div>						<?php if ((bool) $module->showtitle) : ?>							<h3><?php echo $module->title; ?></h3>						<?php endif; ?>					<?php echo $module->content; ?>					</div>				</div>			</div>		</div>	<?php}/* * Module chrome that add preview information to the module */function modChrome_outline($module, &$params, &$attribs){	static $css = false;	if (!$css)	{		$css = true;		$doc = JFactory::getDocument();		$doc->addStyleDeclaration(".mod-preview-info { padding: 2px 4px 2px 4px; border: 1px solid black; position: absolute; background-color: white; color: red;}");		$doc->addStyleDeclaration(".mod-preview-wrapper { background-color:#eee; border: 1px dotted black; color:#700;}");	}	?>	<div class="mod-preview">		<div class="mod-preview-info"><?php echo 'Position: ' . $module->position . ' [ Style: ' . $module->style . ']'; ?></div>		<div class="mod-preview-wrapper">			<?php echo $module->content; ?>		</div>	</div>	<?php}
<?php/** * @package     Joomla.Libraries * @subpackage  Form * * @copyright   Copyright (C) 2005 - 2013 Open Source Matters, Inc. All rights reserved. * @license     GNU General Public License version 2 or later; see LICENSE */defined('JPATH_PLATFORM') or die;JFormHelper::loadFieldClass('list');/** * Form Field class for the Joomla Platform. * Provides a list of content languages * * @package     Joomla.Libraries * @subpackage  Form * @see         JFormFieldLanguage for a select list of application languages. * @since       1.6 */class JFormFieldContentlanguage extends JFormFieldList{	/**	 * The form field type.	 *	 * @var    string	 * @since  1.6	 */	public $type = 'ContentLanguage';	/**	 * Method to get the field options for content languages.	 *	 * @return  array  The options the field is going to show.	 *	 * @since   1.6	 */	protected function getOptions()	{		return array_merge(parent::getOptions(), JHtml::_('contentlanguage.existing'));	}}
<?php/** * @package     Joomla.Administrator * @subpackage  mod_menu * * @copyright   Copyright (C) 2005 - 2013 Open Source Matters, Inc. All rights reserved. * @license     GNU General Public License version 2 or later; see LICENSE.txt */defined('_JEXEC') or die;/* @var $menu JAdminCSSMenu */$shownew = (boolean) $params->get('shownew', 1);$showhelp = $params->get('showhelp', 1);$user = JFactory::getUser();$lang = JFactory::getLanguage();//// Site SubMenu//$menu->addChild(	new JMenuNode(JText::_('MOD_MENU_CONTROL_PANEL'), 'index.php', 'class:cpanel'), true);$menu->getParent();//// Users Submenu//if ($user->authorise('core.manage', 'com_users')){	$menu->addChild(		new JMenuNode(JText::_('MOD_MENU_COM_USERS_USERS'), '#'), true	);	$createUser = $shownew && $user->authorise('core.create', 'com_users');	$createGrp = $user->authorise('core.admin', 'com_users');	$menu->addChild(		new JMenuNode(JText::_('MOD_MENU_COM_USERS_USER_MANAGER'), 'index.php?option=com_users&view=users', 'class:user'), $createUser	);	if ($createUser)	{		$menu->addChild(			new JMenuNode(JText::_('MOD_MENU_COM_USERS_ADD_USER'), 'index.php?option=com_users&task=user.add', 'class:newarticle')		);		$menu->getParent();	}	if ($createGrp)	{		$menu->addChild(			new JMenuNode(JText::_('MOD_MENU_COM_USERS_GROUPS'), 'index.php?option=com_users&view=groups', 'class:groups'), $createUser		);		if ($createUser)		{			$menu->addChild(				new JMenuNode(JText::_('MOD_MENU_COM_USERS_ADD_GROUP'), 'index.php?option=com_users&task=group.add', 'class:newarticle')			);			$menu->getParent();		}		$menu->addChild(			new JMenuNode(JText::_('MOD_MENU_COM_USERS_LEVELS'), 'index.php?option=com_users&view=levels', 'class:levels'), $createUser		);		if ($createUser)		{			$menu->addChild(				new JMenuNode(JText::_('MOD_MENU_COM_USERS_ADD_LEVEL'), 'index.php?option=com_users&task=level.add', 'class:newarticle')			);			$menu->getParent();		}	}	$menu->addSeparator();	$menu->addChild(		new JMenuNode(JText::_('MOD_MENU_COM_USERS_NOTES'), 'index.php?option=com_users&view=notes', 'class:user-note'), $createUser	);	if ($createUser)	{		$menu->addChild(			new JMenuNode(JText::_('MOD_MENU_COM_USERS_ADD_NOTE'), 'index.php?option=com_users&task=note.add', 'class:newarticle')		);		$menu->getParent();	}	$menu->addChild(		new JMenuNode(JText::_('MOD_MENU_COM_USERS_NOTE_CATEGORIES'), 'index.php?option=com_categories&view=categories&extension=com_users.notes', 'class:category'), $createUser	);	if ($createUser)	{		$menu->addChild(			new JMenuNode(JText::_('MOD_MENU_COM_CONTENT_NEW_CATEGORY'), 'index.php?option=com_categories&task=category.add&extension=com_users.notes', 'class:newarticle')		);		$menu->getParent();	}	$menu->addSeparator();	$menu->addChild(		new JMenuNode(JText::_('MOD_MENU_MASS_MAIL_USERS'), 'index.php?option=com_users&view=mail', 'class:massmail')	);	$menu->getParent();}//// Menus Submenu//if ($user->authorise('core.manage', 'com_menus')){	$menu->addChild(		new JMenuNode(JText::_('MOD_MENU_MENUS'), '#'), true	);	$createMenu = $shownew && $user->authorise('core.create', 'com_menus');	$menu->addChild(		new JMenuNode(JText::_('MOD_MENU_MENU_MANAGER'), 'index.php?option=com_menus&view=menus', 'class:menumgr'), $createMenu	);	if ($createMenu)	{		$menu->addChild(			new JMenuNode(JText::_('MOD_MENU_MENU_MANAGER_NEW_MENU'), 'index.php?option=com_menus&view=menu&layout=edit', 'class:newarticle')		);		$menu->getParent();	}	$menu->addSeparator();	// Menu Types	foreach (ModMenuHelper::getMenus() as $menuType)	{		$alt = '*' .$menuType->sef. '*';		if ($menuType->home == 0)		{			$titleicon = '';		}		elseif ($menuType->home == 1 && $menuType->language == '*')		{			$titleicon = ' <i class="icon-home"></i>';		}		elseif ($menuType->home > 1)		{			$titleicon = ' <span>'.JHtml::_('image', 'mod_languages/icon-16-language.png', $menuType->home, array('title' => JText::_('MOD_MENU_HOME_MULTIPLE')), true).'</span>';		}		else		{			$image = JHtml::_('image', 'mod_languages/'.$menuType->image.'.gif', null, null, true, true);			if (!$image)			{				$titleicon = ' <span>'.JHtml::_('image', 'mod_languages/icon-16-language.png', $alt, array('title' => $menuType->title_native), true).'</span>';			}			else			{				$titleicon = ' <span>' . JHtml::_('image', 'mod_languages/' . $menuType->image . '.gif', $alt, array('title' => $menuType->title_native), true) . '</span>';			}		}		$menu->addChild(			new JMenuNode($menuType->title,	'index.php?option=com_menus&view=items&menutype='.$menuType->menutype, 'class:menu', null, null, $titleicon), $createMenu		);		if ($createMenu)		{			$menu->addChild(				new JMenuNode(JText::_('MOD_MENU_MENU_MANAGER_NEW_MENU_ITEM'), 'index.php?option=com_menus&view=item&layout=edit&menutype='.$menuType->menutype, 'class:newarticle')			);			$menu->getParent();		}	}	$menu->getParent();}//// Content Submenu//if ($user->authorise('core.manage', 'com_content')){	$menu->addChild(		new JMenuNode(JText::_('MOD_MENU_COM_CONTENT'), '#'), true	);	$createContent = $shownew && $user->authorise('core.create', 'com_content');	$menu->addChild(		new JMenuNode(JText::_('MOD_MENU_COM_CONTENT_ARTICLE_MANAGER'), 'index.php?option=com_content', 'class:article'), $createContent	);	if ($createContent)	{		$menu->addChild(			new JMenuNode(JText::_('MOD_MENU_COM_CONTENT_NEW_ARTICLE'), 'index.php?option=com_content&task=article.add', 'class:newarticle')		);		$menu->getParent();	}	$menu->addChild(		new JMenuNode(JText::_('MOD_MENU_COM_CONTENT_CATEGORY_MANAGER'), 'index.php?option=com_categories&extension=com_content', 'class:category'), $createContent	);	if ($createContent)	{		$menu->addChild(			new JMenuNode(JText::_('MOD_MENU_COM_CONTENT_NEW_CATEGORY'), 'index.php?option=com_categories&task=category.add&extension=com_content', 'class:newarticle')		);		$menu->getParent();	}	$menu->addChild(		new JMenuNode(JText::_('MOD_MENU_COM_CONTENT_FEATURED'), 'index.php?option=com_content&view=featured', 'class:featured')	);	$menu->addSeparator();	if ($user->authorise('core.manage', 'com_media'))	{		$menu->addChild(new JMenuNode(JText::_('MOD_MENU_MEDIA_MANAGER'), 'index.php?option=com_media', 'class:media'));	}	$menu->getParent();}//// Components Submenu//// Get the authorised components and sub-menus.$components = ModMenuHelper::getComponents(true);// Check if there are any components, otherwise, don't render the menuif ($components){	$menu->addChild(new JMenuNode(JText::_('MOD_MENU_COMPONENTS'), '#'), true);	foreach ($components as &$component)	{		if (!empty($component->submenu))		{			// This component has a db driven submenu.			$menu->addChild(new JMenuNode($component->text, $component->link, $component->img), true);			foreach ($component->submenu as $sub)			{				$menu->addChild(new JMenuNode($sub->text, $sub->link, $sub->img));			}			$menu->getParent();		}		else		{			$menu->addChild(new JMenuNode($component->text, $component->link, $component->img));		}	}	$menu->getParent();}//// Extensions Submenu//$im = $user->authorise('core.manage', 'com_installer');$mm = $user->authorise('core.manage', 'com_modules');$pm = $user->authorise('core.manage', 'com_plugins');$tm = $user->authorise('core.manage', 'com_templates');$lm = $user->authorise('core.manage', 'com_languages');if ($im || $mm || $pm || $tm || $lm){	$menu->addChild(new JMenuNode(JText::_('MOD_MENU_EXTENSIONS_EXTENSIONS'), '#'), true);	if ($im)	{		$menu->addChild(new JMenuNode(JText::_('MOD_MENU_EXTENSIONS_EXTENSION_MANAGER'), 'index.php?option=com_installer', 'class:install'));		$menu->addSeparator();	}	if ($mm)	{		$menu->addChild(new JMenuNode(JText::_('MOD_MENU_EXTENSIONS_MODULE_MANAGER'), 'index.php?option=com_modules', 'class:module'));	}	if ($pm)	{		$menu->addChild(new JMenuNode(JText::_('MOD_MENU_EXTENSIONS_PLUGIN_MANAGER'), 'index.php?option=com_plugins', 'class:plugin'));	}	if ($tm)	{		$menu->addChild(new JMenuNode(JText::_('MOD_MENU_EXTENSIONS_TEMPLATE_MANAGER'), 'index.php?option=com_templates', 'class:themes'));	}	if ($lm)	{		$menu->addChild(new JMenuNode(JText::_('MOD_MENU_EXTENSIONS_LANGUAGE_MANAGER'), 'index.php?option=com_languages', 'class:language'));	}	$menu->getParent();}//// Help Submenu//if ($showhelp == 1){	$menu->addChild(		new JMenuNode(JText::_('MOD_MENU_HELP'), '#'), true	);	$menu->addChild(		new JMenuNode(JText::_('MOD_MENU_HELP_JOOMLA'), 'index.php?option=com_admin&view=help', 'class:help')	);	$menu->addSeparator();	$menu->addChild(		new JMenuNode(JText::_('MOD_MENU_HELP_SUPPORT_OFFICIAL_FORUM'), 'http://forum.joomla.org', 'class:help-forum', false, '_blank')	);	if ($forum_url = $params->get('forum_url'))	{		$menu->addChild(			new JMenuNode(JText::_('MOD_MENU_HELP_SUPPORT_CUSTOM_FORUM'), $forum_url, 'class:help-forum', false, '_blank')		);	}	$debug = $lang->setDebug(false);	if ($lang->hasKey('MOD_MENU_HELP_SUPPORT_OFFICIAL_LANGUAGE_FORUM_VALUE') && JText::_('MOD_MENU_HELP_SUPPORT_OFFICIAL_LANGUAGE_FORUM_VALUE') != '')	{		$forum_url = 'http://forum.joomla.org/viewforum.php?f=' . (int) JText::_('MOD_MENU_HELP_SUPPORT_OFFICIAL_LANGUAGE_FORUM_VALUE');		$lang->setDebug($debug);		$menu->addChild(			new JMenuNode(JText::_('MOD_MENU_HELP_SUPPORT_OFFICIAL_LANGUAGE_FORUM'), $forum_url, 'class:help-forum', false, '_blank')		);	}	$lang->setDebug($debug);	$menu->addChild(		new JMenuNode(JText::_('MOD_MENU_HELP_DOCUMENTATION'), 'http://docs.joomla.org', 'class:help-docs', false, '_blank')	);	$menu->addSeparator();	$menu->addChild(		new JMenuNode(JText::_('MOD_MENU_HELP_EXTENSIONS'), 'http://extensions.joomla.org', 'class:help-jed', false, '_blank')	);	$menu->addChild(		new JMenuNode(JText::_('MOD_MENU_HELP_TRANSLATIONS'), 'http://community.joomla.org/translations.html', 'class:help-trans', false, '_blank')	);	$menu->addChild(		new JMenuNode(JText::_('MOD_MENU_HELP_RESOURCES'), 'http://resources.joomla.org', 'class:help-jrd', false, '_blank')	);	$menu->addChild(		new JMenuNode(JText::_('MOD_MENU_HELP_COMMUNITY'), 'http://community.joomla.org', 'class:help-community', false, '_blank')	);	$menu->addChild(		new JMenuNode(JText::_('MOD_MENU_HELP_SECURITY'), 'http://developer.joomla.org/security.html', 'class:help-security', false, '_blank')	);	$menu->addChild(		new JMenuNode(JText::_('MOD_MENU_HELP_DEVELOPER'), 'http://developer.joomla.org', 'class:help-dev', false, '_blank')	);	$menu->addChild(		new JMenuNode(JText::_('MOD_MENU_HELP_SHOP'), 'http://shop.joomla.org', 'class:help-shop', false, '_blank')	);	$menu->getParent();}//// Admin Settingss Submenu//$su = $user->authorise('core.admin');$cam = $user->authorise('core.manage', 'com_cache');$cim = $user->authorise('core.manage', 'com_checkin');	$menu->addChild(new JMenuNode(JText::_('MOD_MENU_SETTINGS'), '#'), true);	if ($su):		$menu->addChild(		new JMenuNode(JText::_('MOD_MENU_CONFIGURATION'), 'index.php?option=com_config', 'class:config')		);		$menu->addChild(		new JMenuNode(JText::_('MOD_MENU_SYSTEM_INFORMATION'), 'index.php?option=com_admin&view=sysinfo', 'class:info')	);	endif;	if  ($cam):		$menu->addChild(		new JMenuNode(JText::_('MOD_MENU_CLEAR_CACHE'), 'index.php?option=com_cache', 'class:clear')		);		$menu->addChild(		new JMenuNode(JText::_('MOD_MENU_PURGE_EXPIRED_CACHE'), 'index.php?option=com_cache&view=purge', 'class:purge')		);	endif;	if  ($cim):		$menu->addChild(		new JMenuNode(JText::_('MOD_MENU_GLOBAL_CHECKIN'), 'index.php?option=com_checkin', 'class:checkin')		);	endif;		$menu->addChild(		new JMenuNode(JText::_('MOD_MENU_USER_PROFILE'), 'index.php?option=com_admin&task=profile.edit&id='. $user->id, 'class:profile')		);		$menu->addChild(		new JMenuNode(JText::_('MOD_MENU_LOGOUT'), 'index.php?option=com_login&task=logout&'. JSession::getFormToken() .'=1', 'class:logout')		);	$menu->getParent();
<?php/** * @package     Joomla.Site * @subpackage  mod_custom * * @copyright   Copyright (C) 2005 - 2013 Open Source Matters, Inc. All rights reserved. * @license     GNU General Public License version 2 or later; see LICENSE.txt */defined('_JEXEC') or die;?><div class="custom<?php echo $moduleclass_sfx ?>" <?php if ($params->get('backgroundimage')) : ?> style="background-image:url(<?php echo $params->get('backgroundimage');?>)"<?php endif;?> >	<?php echo $module->content;?></div>
<?php/** * @package     Joomla.Site * @subpackage  com_contact * * @copyright   Copyright (C) 2005 - 2013 Open Source Matters, Inc. All rights reserved. * @license     GNU General Public License version 2 or later; see LICENSE.txt */defined('_JEXEC') or die;?><div class="contact-category<?php echo $this->pageclass_sfx;?>"><?php if ($this->params->get('show_page_heading')) : ?><h1>	<?php echo $this->escape($this->params->get('page_heading')); ?></h1><?php endif; ?><?php if ($this->params->get('show_category_title', 1)) : ?><h2>	<?php echo JHtml::_('content.prepare', $this->category->title, '', 'com_contact.category'); ?></h2><?php endif; ?><?php if ($this->params->def('show_description', 1) || $this->params->def('show_description_image', 1)) : ?>	<div class="category-desc">	<?php if ($this->params->get('show_description_image') && $this->category->getParams()->get('image')) : ?>		<img src="<?php echo $this->category->getParams()->get('image'); ?>"/>	<?php endif; ?>	<?php if ($this->params->get('show_description') && $this->category->description) : ?>		<?php echo JHtml::_('content.prepare', $this->category->description, '', 'com_contact.category'); ?>	<?php endif; ?>	<div class="clr"></div>	</div><?php endif; ?><?php echo $this->loadTemplate('items'); ?><?php if (!empty($this->children[$this->category->id])&& $this->maxLevel != 0) : ?><div class="cat-children">	<h3><?php echo JText::_('JGLOBAL_SUBCATEGORIES'); ?></h3>	<?php echo $this->loadTemplate('children'); ?></div><?php endif; ?></div>
<?php/** * Verifies that class members have scope modifiers. * * PHP version 5 * * @category  PHP * @package   PHP_CodeSniffer * @author    Greg Sherwood <gsherwood@squiz.net> * @author    Marc McIntyre <mmcintyre@squiz.net> * @copyright 2006 Squiz Pty Ltd (ABN 77 084 670 600) * @license   http://matrix.squiz.net/developer/tools/php_cs/licence BSD Licence * @version   CVS: $Id: MethodScopeSniff.php 8 2010-11-06 00:40:23Z elkuku $ * @link      http://pear.php.net/package/PHP_CodeSniffer */if(class_exists('PHP_CodeSniffer_Standards_AbstractScopeSniff', true) === false){    throw new PHP_CodeSniffer_Exception('Class PHP_CodeSniffer_Standards_AbstractScopeSniff not found');}/** * Verifies that class members have scope modifiers. * * Example: * class Foo * { *     <b class="good">public function foo()</b> *     { *     } * *     <b class="bad">function foo()</b> *     { *     } * } * * @category  PHP * @package   PHP_CodeSniffer * @author    Greg Sherwood <gsherwood@squiz.net> * @author    Marc McIntyre <mmcintyre@squiz.net> * @copyright 2006 Squiz Pty Ltd (ABN 77 084 670 600) * @license   http://matrix.squiz.net/developer/tools/php_cs/licence BSD Licence * @version   Release: 1.3.0RC1 * @link      http://pear.php.net/package/PHP_CodeSniffer */class Joomla_Sniffs_Classes_MethodScopeSniff extends PHP_CodeSniffer_Standards_AbstractScopeSniff{    /**     * Constructs a Squiz_Sniffs_Scope_MethodScopeSniff.     */    public function __construct()    {        parent::__construct(array(T_CLASS, T_INTERFACE), array(T_FUNCTION));    }//function    /**     * Processes the function tokens within the class.     *     * @param PHP_CodeSniffer_File $phpcsFile The file where this token was found.     * @param integer                  $stackPtr  The position where the token was found.     * @param integer                  $currScope The current scope opener token.     *     * @return void     */    protected function processTokenWithinScope(PHP_CodeSniffer_File $phpcsFile, $stackPtr, $currScope)    {        $tokens = $phpcsFile->getTokens();        $methodName = $phpcsFile->getDeclarationName($stackPtr);        if($methodName === null)        {            // Ignore closures.            return;        }        $modifier = $phpcsFile->findPrevious(PHP_CodeSniffer_Tokens::$scopeModifiers, $stackPtr);        if(($modifier === false) || ($tokens[$modifier]['line'] !== $tokens[$stackPtr]['line']))        {            $error = sprintf('No scope modifier specified for function "%s"'            , $methodName);            $phpcsFile->addWarning($error, $stackPtr, 'Missing');        }    }//function}//class
<?php/** * @package     Joomla.Platform * @subpackage  Google * * @copyright   Copyright (C) 2005 - 2013 Open Source Matters, Inc. All rights reserved * @license     GNU General Public License version 2 or later; see LICENSE */defined('JPATH_PLATFORM') or die;jimport('joomla.environment.uri');/** * Google API object class for the Joomla Platform. * * @package     Joomla.Platform * @subpackage  Google * @since       12.3 */abstract class JGoogleEmbed{	/**	 * @var    JRegistry  Options for the Google data object.	 * @since  12.3	 */	protected $options;	/**	 * @var    JURI  URI of the page being rendered.	 * @since  12.3	 */	protected $uri;	/**	 * Constructor.	 *	 * @param   JRegistry  $options  Google options object	 * @param   JURI       $uri      URL of the page being rendered	 *	 * @since   12.3	 */	public function __construct(JRegistry $options = null, JURI $uri = null)	{		$this->options = $options ? $options : new JRegistry;		$this->uri = $uri ? $uri : new JURI;	}	/**	 * Method to retrieve the javascript header for the embed API	 *	 * @return  string  The header	 *	 * @since   12.3	 */	public function isSecure()	{		return $this->uri->getScheme() == 'https';	}	/**	 * Method to retrieve the header for the API	 *	 * @return  string  The header	 *	 * @since   12.3	 */	abstract public function getHeader();	/**	 * Method to retrieve the body for the API	 *	 * @return  string  The body	 *	 * @since   12.3	 */	abstract public function getBody();	/**	 * Method to output the javascript header for the embed API	 *	 * @return  null	 *	 * @since   12.3	 */	public function echoHeader()	{		echo $this->getHeader();	}	/**	 * Method to output the body for the API	 *	 * @return  null	 *	 * @since   12.3	 */	public function echoBody()	{		echo $this->getBody();	}	/**	 * Get an option from the JGoogleEmbed instance.	 *	 * @param   string  $key  The name of the option to get.	 *	 * @return  mixed  The option value.	 *	 * @since   12.3	 */	public function getOption($key)	{		return $this->options->get($key);	}	/**	 * Set an option for the JGoogleEmbed instance.	 *	 * @param   string  $key    The name of the option to set.	 * @param   mixed   $value  The option value to set.	 *	 * @return  JGoogleEmbed  This object for method chaining.	 *	 * @since   12.3	 */	public function setOption($key, $value)	{		$this->options->set($key, $value);		return $this;	}}
<?php/** * @package     Joomla.Site * @subpackage  com_tags * * @copyright   Copyright (C) 2005 - 2013 Open Source Matters, Inc. All rights reserved. * @license     GNU General Public License version 2 or later; see LICENSE.txt */defined('_JEXEC') or die;// Note that there are certain parts of this layout used only when there is exactly one tag.JHtml::addIncludePath(JPATH_COMPONENT.'/helpers');$description = $this->params->get('all_tags_description');$descriptionImage = $this->params->get('all_tags_description_image');?><div class="tag-category<?php echo $this->pageclass_sfx; ?>">	<?php  if ($this->state->get('show_page_heading')) : ?>		<h1>		<?php echo $this->escape($this->params->get('page_heading')); ?>		</h1>	<?php endif;?>	<?php if ($this->params->get('all_tags_show_description_image') && !empty($descriptionImage)):?>		<div><?php echo '<img src="' . $descriptionImage . '">';?></div>	<?php endif;?>	<?php if (!empty($description)):?>		<div><?php echo $description;?></div>	<?php endif;?>	<?php echo $this->loadTemplate('items'); ?></div>
<?php/** * @package     Joomla.Administrator * @subpackage  mod_version * * @copyright   Copyright (C) 2005 - 2013 Open Source Matters, Inc. All rights reserved. * @license     GNU General Public License version 2 or later; see LICENSE.txt */defined('_JEXEC') or die;/** * Helper for mod_version * * @package     Joomla.Administrator * @subpackage  mod_version * @since       1.6 */abstract class ModVersionHelper{	/**	 * Get the member items of the submenu.	 *	 * @param   JRegistry  &$params  The parameters object.	 *	 * @return  string  String containing the current Joomla version based on the selected format.	 */	public static function getVersion(&$params)	{		$format  = $params->get('format', 'short');		$product = $params->get('product', 0);		$method  = 'get' . ucfirst($format) . "Version";		// Get the joomla version		$instance = new JVersion;		$version  = call_user_func(array($instance, $method));		if ($format == 'short' && !empty($product))		{			// Add the product name to short format only (in long format it's included)			$version = $instance->PRODUCT . ' ' . $version;		}		return $version;	}}
<?php/** * @package     Joomla.Platform * @subpackage  HTML * * @copyright   Copyright (C) 2005 - 2013 Open Source Matters, Inc. All rights reserved. * @license     GNU General Public License version 2 or later; see LICENSE */defined('JPATH_PLATFORM') or die;/** * Utility class for Sliders elements * * @package     Joomla.Platform * @subpackage  HTML * @since       11.1 */abstract class JHtmlSliders{	/**	 * Creates a panes and loads the javascript behavior for it.	 *	 * @param   string  $group   The pane identifier.	 * @param   array   $params  An array of options.	 *	 * @return  string	 *	 * @since   11.1	 */	public static function start($group = 'sliders', $params = array())	{		self::_loadBehavior($group, $params);		return '<div id="' . $group . '" class="pane-sliders"><div style="display:none;"><div>';	}	/**	 * Close the current pane.	 *	 * @return  string  hTML to close the pane	 *	 * @since   11.1	 */	public static function end()	{		return '</div></div></div>';	}	/**	 * Begins the display of a new panel.	 *	 * @param   string  $text  Text to display.	 * @param   string  $id    Identifier of the panel.	 *	 * @return  string  HTML to start a panel	 *	 * @since   11.1	 */	public static function panel($text, $id)	{		return '</div></div><div class="panel"><h3 class="pane-toggler title" id="' . $id . '"><a href="javascript:void(0);"><span>' . $text			. '</span></a></h3><div class="pane-slider content">';	}	/**	 * Load the JavaScript behavior.	 *	 * @param   string  $group   The pane identifier.	 * @param   array   $params  Array of options.	 *	 * @return  void	 *	 * @since   11.1	 */	protected static function _loadBehavior($group, $params = array())	{		static $loaded = array();		if (!array_key_exists($group, $loaded))		{			// Get the JInput object			$input = JFactory::getApplication()->input;			$loaded[$group] = true;			// Include mootools framework.			JHtml::_('behavior.framework', true);			$document = JFactory::getDocument();			$display = (isset($params['startOffset']) && isset($params['startTransition']) && $params['startTransition'])				? (int) $params['startOffset'] : null;			$show = (isset($params['startOffset']) && !(isset($params['startTransition']) && $params['startTransition']))				? (int) $params['startOffset'] : null;			$opt['onActive'] = "\\function(toggler, i) {toggler.addClass('pane-toggler-down');" .				"toggler.removeClass('pane-toggler');i.addClass('pane-down');i.removeClass('pane-hide');Cookie.write('jpanesliders_"				. $group . "',$$('div#" . $group . ".pane-sliders > .panel > h3').indexOf(toggler));}";			$opt['onBackground'] = "\\function(toggler, i) {toggler.addClass('pane-toggler');" .				"toggler.removeClass('pane-toggler-down');i.addClass('pane-hide');i.removeClass('pane-down');if($$('div#"				. $group . ".pane-sliders > .panel > h3').length==$$('div#" . $group				. ".pane-sliders > .panel > h3.pane-toggler').length) Cookie.write('jpanesliders_" . $group . "',-1);}";			$opt['duration'] = (isset($params['duration'])) ? (int) $params['duration'] : 300;			$opt['display'] = (isset($params['useCookie']) && $params['useCookie']) ? $input->cookie->get('jpanesliders_' . $group, $display, 'integer')				: $display;			$opt['show'] = (isset($params['useCookie']) && $params['useCookie']) ? $input->cookie->get('jpanesliders_' . $group, $show, 'integer') : $show;			$opt['opacity'] = (isset($params['opacityTransition']) && ($params['opacityTransition'])) ? 'true' : 'false';			$opt['alwaysHide'] = (isset($params['allowAllClose']) && (!$params['allowAllClose'])) ? 'false' : 'true';			$options = JHtml::getJSObject($opt);			$js = "window.addEvent('domready', function(){ new Fx.Accordion($$('div#" . $group				. ".pane-sliders > .panel > h3.pane-toggler'), $$('div#" . $group . ".pane-sliders > .panel > div.pane-slider'), " . $options				. "); });";			$document->addScriptDeclaration($js);		}	}}
<?php/** * @package     Joomla.Platform * @subpackage  Form * * @copyright   Copyright (C) 2005 - 2013 Open Source Matters, Inc. All rights reserved. * @license     GNU General Public License version 2 or later; see LICENSE */defined('JPATH_PLATFORM') or die;/** * Form Rule class for the Joomla Platform. * * @package     Joomla.Platform * @subpackage  Form * @since       11.1 */class JFormRuleUrl extends JFormRule{	/**	 * Method to test an external url for a valid parts.	 *	 * @param   SimpleXMLElement  $element  The SimpleXMLElement object representing the <field /> tag for the form field object.	 * @param   mixed             $value    The form field value to validate.	 * @param   string            $group    The field name group control value. This acts as as an array container for the field.	 *                                      For example if the field has name="foo" and the group value is set to "bar" then the	 *                                      full field name would end up being "bar[foo]".	 * @param   JRegistry         $input    An optional JRegistry object with the entire data set to validate against the entire form.	 * @param   JForm             $form     The form object for which the field is being tested.	 *	 * @return  boolean  True if the value is valid, false otherwise.	 *	 * @since   11.1	 * @link    http://www.w3.org/Addressing/URL/url-spec.txt	 * @see	    Jstring	 */	public function test(SimpleXMLElement $element, $value, $group = null, JRegistry $input = null, JForm $form = null)	{		// If the field is empty and not required, the field is valid.		$required = ((string) $element['required'] == 'true' || (string) $element['required'] == 'required');		if (!$required && empty($value))		{			return true;		}		$urlParts = JString::parse_url($value);		// See http://www.w3.org/Addressing/URL/url-spec.txt		// Use the full list or optionally specify a list of permitted schemes.		if ($element['schemes'] == '')		{			$scheme = array('http', 'https', 'ftp', 'ftps', 'gopher', 'mailto', 'news', 'prospero', 'telnet', 'rlogin', 'tn3270', 'wais', 'url',				'mid', 'cid', 'nntp', 'tel', 'urn', 'ldap', 'file', 'fax', 'modem', 'git');		}		else		{			$scheme = explode(',', $element['schemes']);		}		/*		 * This rule is only for full URLs with schemes because parse_url does not parse		 * accurately without a scheme.		 * @see http://php.net/manual/en/function.parse-url.php		 */		if ($urlParts && !array_key_exists('scheme', $urlParts))		{			return false;		}		$urlScheme = (string) $urlParts['scheme'];		$urlScheme = strtolower($urlScheme);		if (in_array($urlScheme, $scheme) == false)		{			return false;		}		// For some schemes here must be two slashes.		if (($urlScheme == 'http' || $urlScheme == 'https' || $urlScheme == 'ftp' || $urlScheme == 'sftp' || $urlScheme == 'gopher'			|| $urlScheme == 'wais' || $urlScheme == 'gopher' || $urlScheme == 'prospero' || $urlScheme == 'telnet' || $urlScheme == 'git')			&& ((substr($value, strlen($urlScheme), 3)) !== '://'))		{			return false;		}		// The best we can do for the rest is make sure that the strings are valid UTF-8		// and the port is an integer.		if (array_key_exists('host', $urlParts) && !JString::valid((string) $urlParts['host']))		{			return false;		}		if (array_key_exists('port', $urlParts) && !is_int((int) $urlParts['port']))		{			return false;		}		if (array_key_exists('path', $urlParts) && !JString::valid((string) $urlParts['path']))		{			return false;		}		return true;	}}
<?php/** * @package     Joomla.Administrator * @subpackage  Template.hathor * * @copyright   Copyright (C) 2005 - 2013 Open Source Matters, Inc. All rights reserved. * @license     GNU General Public License version 2 or later; see LICENSE.txt */defined('_JEXEC') or die; ?><?php echo JHtml::_('sliders.panel', JText::_('JGLOBAL_FIELDSET_PUBLISHING'), 'publishing-details'); ?>	<fieldset class="panelform">	<legend class="element-invisible"><?php echo JText::_('COM_CONTENT_FIELDSET_PUBLISHING'); ?></legend>		<ul class="adminformlist">			<li><?php echo $this->form->getLabel('created_user_id'); ?>			<?php echo $this->form->getInput('created_user_id'); ?></li>			<?php if ((int) $this->item->created_time) : ?>				<li><?php echo $this->form->getLabel('created_time'); ?>				<?php echo $this->form->getInput('created_time'); ?></li>			<?php endif; ?>			<?php if ($this->item->modified_user_id) : ?>				<li><?php echo $this->form->getLabel('modified_user_id'); ?>				<?php echo $this->form->getInput('modified_user_id'); ?></li>				<li><?php echo $this->form->getLabel('modified_time'); ?>				<?php echo $this->form->getInput('modified_time'); ?></li>			<?php endif; ?>		</ul>	</fieldset><?php $fieldSets = $this->form->getFieldsets('params');foreach ($fieldSets as $name => $fieldSet) :	$label = !empty($fieldSet->label) ? $fieldSet->label : 'COM_CATEGORIES_'.$name.'_FIELDSET_LABEL';	echo JHtml::_('sliders.panel', JText::_($label), $name.'-options');	if (isset($fieldSet->description) && trim($fieldSet->description)) :		echo '<p class="tip">'.$this->escape(JText::_($fieldSet->description)).'</p>';	endif;	?>	<fieldset class="panelform">	<legend class="element-invisible"><?php echo JText::_($label); ?></legend>	<ul class="adminformlist">		<?php foreach ($this->form->getFieldset($name) as $field) : ?>			<li><?php echo $field->label; ?>			<?php echo $field->input; ?></li>		<?php endforeach; ?>		<?php if ($name == 'basic'):?>			<li><?php echo $this->form->getLabel('note'); ?>			<?php echo $this->form->getInput('note'); ?></li>		<?php endif;?>	</ul>	</fieldset><?php endforeach; ?>
<?php/** * @package     Joomla.Site * @subpackage  com_users * * @copyright   Copyright (C) 2005 - 2013 Open Source Matters, Inc. All rights reserved. * @license     GNU General Public License version 2 or later; see LICENSE.txt */defined('_JEXEC') or die;?><fieldset id="users-profile-core">	<legend>		<?php echo JText::_('COM_USERS_PROFILE_CORE_LEGEND'); ?>	</legend>	<dl class="dl-horizontal">		<dt>			<?php echo JText::_('COM_USERS_PROFILE_NAME_LABEL'); ?>		</dt>		<dd>			<?php echo $this->data->name; ?>		</dd>		<dt>			<?php echo JText::_('COM_USERS_PROFILE_USERNAME_LABEL'); ?>		</dt>		<dd>			<?php echo htmlspecialchars($this->data->username); ?>		</dd>		<dt>			<?php echo JText::_('COM_USERS_PROFILE_REGISTERED_DATE_LABEL'); ?>		</dt>		<dd>			<?php echo JHtml::_('date', $this->data->registerDate); ?>		</dd>		<dt>			<?php echo JText::_('COM_USERS_PROFILE_LAST_VISITED_DATE_LABEL'); ?>		</dt>		<?php if ($this->data->lastvisitDate != '0000-00-00 00:00:00'){?>			<dd>				<?php echo JHtml::_('date', $this->data->lastvisitDate); ?>			</dd>		<?php }		else		{?>			<dd>				<?php echo JText::_('COM_USERS_PROFILE_NEVER_VISITED'); ?>			</dd>		<?php } ?>	</dl></fieldset>
<?php/** * @package     Joomla.Legacy * @subpackage  Access * * @copyright   Copyright (C) 2005 - 2013 Open Source Matters, Inc. All rights reserved. * @license     GNU General Public License version 2 or later; see LICENSE */defined('JPATH_PLATFORM') or die;/** * Deprecated class placeholder. You should use JAccessRule instead. * * @package     Joomla.Legacy * @subpackage  Access * @since       11.1 * @deprecated  12.3 */class JRule extends JAccessRule{	/**	 * Constructor.	 *	 * The input array must be in the form: array(-42 => true, 3 => true, 4 => false)	 * or an equivalent JSON encoded string.	 *	 * @param   mixed  $identities  A JSON format string (probably from the database) or a named array.	 *	 * @since   11.1	 * @deprecated  12.3	 */	public function __construct($identities)	{		JLog::add('JRule is deprecated. Use JAccessRule instead.', JLog::WARNING, 'deprecated');		parent::__construct($identities);	}}
<?php/** * @package     Joomla.Installation * @subpackage  Application * * @copyright   Copyright (C) 2005 - 2013 Open Source Matters, Inc. All rights reserved. * @license     GNU General Public License version 2 or later; see LICENSE.txt */defined('_JEXEC') or die;/* * Joomla! Installation Application Defines */// Global definitions$parts = explode(DIRECTORY_SEPARATOR, JPATH_BASE);array_pop($parts);// Definesdefine('JPATH_ROOT',           implode(DIRECTORY_SEPARATOR, $parts));define('JPATH_SITE',           JPATH_ROOT);define('JPATH_CONFIGURATION',  JPATH_ROOT);define('JPATH_ADMINISTRATOR',  JPATH_ROOT . '/administrator');define('JPATH_LIBRARIES',      JPATH_ROOT . '/libraries');define('JPATH_PLUGINS',        JPATH_ROOT . '/plugins');define('JPATH_INSTALLATION',   JPATH_ROOT . '/installation');define('JPATH_THEMES',         JPATH_BASE);define('JPATH_CACHE',          JPATH_BASE . '/cache');define('JPATH_MANIFESTS',      JPATH_ADMINISTRATOR . '/manifests');
<?php/** * @package     Joomla.Platform * @subpackage  Model * * @copyright   Copyright (C) 2005 - 2013 Open Source Matters, Inc. All rights reserved. * @license     GNU General Public License version 2 or later; see LICENSE */defined('JPATH_PLATFORM') or die;/** * Joomla Platform Model Interface * * @package     Joomla.Platform * @subpackage  Model * @since       12.1 */interface JModel{	/**	 * Get the model state.	 *	 * @return  JRegistry  The state object.	 *	 * @since   12.1	 */	public function getState();	/**	 * Set the model state.	 *	 * @param   JRegistry  $state  The state object.	 *	 * @return  void	 *	 * @since   12.1	 */	public function setState(JRegistry $state);}
<?php/** * @package     Joomla.Platform * @subpackage  Database * * @copyright   Copyright (C) 2005 - 2013 Open Source Matters, Inc. All rights reserved. * @license     GNU General Public License version 2 or later; see LICENSE */defined('JPATH_PLATFORM') or die;/** * SQL Server database driver * * @package     Joomla.Platform * @subpackage  Database * @see         http://msdn.microsoft.com/en-us/library/ee336279.aspx * @since       12.1 */class JDatabaseDriverSqlazure extends JDatabaseDriverSqlsrv{	/**	 * The name of the database driver.	 *	 * @var    string	 * @since  12.1	 */	public $name = 'sqlzure';}
<?php/** * @package    Joomla.Cli * * @copyright  Copyright (C) 2005 - 2013 Open Source Matters, Inc. All rights reserved. * @license    GNU General Public License version 2 or later; see LICENSE.txt *//** * Finder CLI Bootstrap * * Run the framework bootstrap with a couple of mods based on the script's needs */// We are a valid entry point.const _JEXEC = 1;// Load system definesif (file_exists(dirname(__DIR__) . '/defines.php')){	require_once dirname(__DIR__) . '/defines.php';}if (!defined('_JDEFINES')){	define('JPATH_BASE', dirname(__DIR__));	require_once JPATH_BASE . '/includes/defines.php';}// Get the framework.require_once JPATH_LIBRARIES . '/import.legacy.php';// Bootstrap the CMS libraries.require_once JPATH_LIBRARIES . '/cms.php';// Import the configuration.require_once JPATH_CONFIGURATION . '/configuration.php';// System configuration.$config = new JConfig;// Configure error reporting to maximum for CLI output.error_reporting(E_ALL);ini_set('display_errors', 1);// Load Library language$lang = JFactory::getLanguage();// Try the finder_cli file in the current language (without allowing the loading of the file in the default language)$lang->load('finder_cli', JPATH_SITE, null, false, false)// Fallback to the finder_cli file in the default language|| $lang->load('finder_cli', JPATH_SITE, null, true);/** * A command line cron job to run the Finder indexer. * * @package     Joomla.CLI * @subpackage  com_finder * @since       2.5 */class FinderCli extends JApplicationCli{	/**	 * Start time for the index process	 *	 * @var    string	 * @since  2.5	 */	private $_time = null;	/**	 * Start time for each batch	 *	 * @var    string	 * @since  2.5	 */	private $_qtime = null;	/**	 * Entry point for Finder CLI script	 *	 * @return  void	 *	 * @since   2.5	 */	public function doExecute()	{		// Print a blank line.		$this->out(JText::_('FINDER_CLI'));		$this->out('============================');		$this->out();		$this->_index();		// Print a blank line at the end.		$this->out();	}	/**	 * Run the indexer	 *	 * @return  void	 *	 * @since   2.5	 */	private function _index()	{		$this->_time = microtime(true);		require_once JPATH_ADMINISTRATOR . '/components/com_finder/helpers/indexer/indexer.php';		// Fool the system into thinking we are running as JSite with Finder as the active component		JFactory::getApplication('site');		$_SERVER['HTTP_HOST'] = 'domain.com';		define('JPATH_COMPONENT_ADMINISTRATOR', JPATH_ADMINISTRATOR . '/components/com_finder');		// Disable caching.		$config = JFactory::getConfig();		$config->set('caching', 0);		$config->set('cache_handler', 'file');		// Reset the indexer state.		FinderIndexer::resetState();		// Import the finder plugins.		JPluginHelper::importPlugin('finder');		// Starting Indexer.		$this->out(JText::_('FINDER_CLI_STARTING_INDEXER'), true);		// Trigger the onStartIndex event.		JEventDispatcher::getInstance()->trigger('onStartIndex');		// Remove the script time limit.		@set_time_limit(0);		// Get the indexer state.		$state = FinderIndexer::getState();		// Setting up plugins.		$this->out(JText::_('FINDER_CLI_SETTING_UP_PLUGINS'), true);		// Trigger the onBeforeIndex event.		JEventDispatcher::getInstance()->trigger('onBeforeIndex');		// Startup reporting.		$this->out(JText::sprintf('FINDER_CLI_SETUP_ITEMS', $state->totalItems, round(microtime(true) - $this->_time, 3)), true);		// Get the number of batches.		$t = (int) $state->totalItems;		$c = (int) ceil($t / $state->batchSize);		$c = $c === 0 ? 1 : $c;		try		{			// Process the batches.			for ($i = 0; $i < $c; $i++)			{				// Set the batch start time.				$this->_qtime = microtime(true);				// Reset the batch offset.				$state->batchOffset = 0;				// Trigger the onBuildIndex event.				JEventDispatcher::getInstance()->trigger('onBuildIndex');				// Batch reporting.				$this->out(JText::sprintf('FINDER_CLI_BATCH_COMPLETE', ($i + 1), round(microtime(true) - $this->_qtime, 3)), true);			}		}		catch (Exception $e)		{			// Display the error			$this->out($e->getMessage(), true);			// Reset the indexer state.			FinderIndexer::resetState();			// Close the app			$this->close($e->getCode());		}		// Total reporting.		$this->out(JText::sprintf('FINDER_CLI_PROCESS_COMPLETE', round(microtime(true) - $this->_time, 3)), true);		// Reset the indexer state.		FinderIndexer::resetState();	}}// Instantiate the application object, passing the class name to JCli::getInstance// and use chaining to execute the application.JApplicationCli::getInstance('FinderCli')->execute();
<?php/** * @package     Joomla.Platform * @subpackage  Log * * @copyright   Copyright (C) 2005 - 2013 Open Source Matters, Inc. All rights reserved. * @license     GNU General Public License version 2 or later; see LICENSE */defined('JPATH_PLATFORM') or die;jimport('joomla.filesystem.folder');/** * Joomla! Formatted Text File Log class * * This class is designed to use as a base for building formatted text files for output. By * default it emulates the Syslog style format output. This is a disk based output format. * * @package     Joomla.Platform * @subpackage  Log * @since       11.1 */class JLogLoggerFormattedtext extends JLogLogger{	/**	 * @var    resource  The file pointer for the log file.	 * @since  11.1	 */	protected $file;	/**	 * @var    string  The format for which each entry follows in the log file.  All fields must be named	 * in all caps and be within curly brackets eg. {FOOBAR}.	 * @since  11.1	 */	protected $format = '{DATETIME}	{PRIORITY}	{CATEGORY}	{MESSAGE}';	/**	 * @var    array  The parsed fields from the format string.	 * @since  11.1	 */	protected $fields = array();	/**	 * @var    string  The full filesystem path for the log file.	 * @since  11.1	 */	protected $path;	/**	 * Constructor.	 *	 * @param   array  &$options  Log object options.	 *	 * @since   11.1	 */	public function __construct(array &$options)	{		// Call the parent constructor.		parent::__construct($options);		// The name of the text file defaults to 'error.php' if not explicitly given.		if (empty($this->options['text_file']))		{			$this->options['text_file'] = 'error.php';		}		// The name of the text file path defaults to that which is set in configuration if not explicitly given.		if (empty($this->options['text_file_path']))		{			$this->options['text_file_path'] = JFactory::getConfig()->get('log_path');		}		// False to treat the log file as a php file.		if (empty($this->options['text_file_no_php']))		{			$this->options['text_file_no_php'] = false;		}		// Build the full path to the log file.		$this->path = $this->options['text_file_path'] . '/' . $this->options['text_file'];		// Use the default entry format unless explicitly set otherwise.		if (!empty($this->options['text_entry_format']))		{			$this->format = (string) $this->options['text_entry_format'];		}		// Build the fields array based on the format string.		$this->parseFields();	}	/**	 * Destructor.	 *	 * @since   11.1	 */	public function __destruct()	{		if (is_resource($this->file))		{			fclose($this->file);		}	}	/**	 * Method to add an entry to the log.	 *	 * @param   JLogEntry  $entry  The log entry object to add to the log.	 *	 * @return  boolean  True on success.	 *	 * @since   11.1	 * @throws  RuntimeException	 */	public function addEntry(JLogEntry $entry)	{		// Initialise the file if not already done.		if (!is_resource($this->file))		{			$this->initFile();		}		// Set some default field values if not already set.		if (!isset($entry->clientIP))		{			// Check for proxies as well.			if (isset($_SERVER['REMOTE_ADDR']))			{				$entry->clientIP = $_SERVER['REMOTE_ADDR'];			}			elseif (isset($_SERVER['HTTP_X_FORWARDED_FOR']))			{				$entry->clientIP = $_SERVER['HTTP_X_FORWARDED_FOR'];			}			elseif (isset($_SERVER['HTTP_CLIENT_IP']))			{				$entry->clientIP = $_SERVER['HTTP_CLIENT_IP'];			}		}		// If the time field is missing or the date field isn't only the date we need to rework it.		if ((strlen($entry->date) != 10) || !isset($entry->time))		{			// Get the date and time strings in GMT.			$entry->datetime = $entry->date->toISO8601();			$entry->time = $entry->date->format('H:i:s', false);			$entry->date = $entry->date->format('Y-m-d', false);		}		// Get a list of all the entry keys and make sure they are upper case.		$tmp = array_change_key_case(get_object_vars($entry), CASE_UPPER);		// Decode the entry priority into an English string.		$tmp['PRIORITY'] = $this->priorities[$entry->priority];		// Fill in field data for the line.		$line = $this->format;		foreach ($this->fields as $field)		{			$line = str_replace('{' . $field . '}', (isset($tmp[$field])) ? $tmp[$field] : '-', $line);		}		// Write the new entry to the file.		if (!fwrite($this->file, $line . "\n"))		{			throw new RuntimeException('Cannot write to log file.');		}	}	/**	 * Method to generate the log file header.	 *	 * @return  string  The log file header	 *	 * @since   11.1	 */	protected function generateFileHeader()	{		$head = array();		// Build the log file header.		// If the no php flag is not set add the php die statement.		if (empty($this->options['text_file_no_php']))		{			// Blank line to prevent information disclose: https://bugs.php.net/bug.php?id=60677			$head[] = '#';			$head[] = '#<?php die(\'Forbidden.\'); ?>';		}		$head[] = '#Date: ' . gmdate('Y-m-d H:i:s') . ' UTC';		$head[] = '#Software: ' . JPlatform::getLongVersion();		$head[] = '';		// Prepare the fields string		$head[] = '#Fields: ' . strtolower(str_replace('}', '', str_replace('{', '', $this->format)));		$head[] = '';		return implode("\n", $head);	}	/**	 * Method to initialise the log file.  This will create the folder path to the file if it doesn't already	 * exist and also get a new file header if the file doesn't already exist.  If the file already exists it	 * will simply open it for writing.	 *	 * @return  void	 *	 * @since   11.1	 */	protected function initFile()	{		// If the file doesn't already exist we need to create it and generate the file header.		if (!is_file($this->path))		{			// Make sure the folder exists in which to create the log file.			JFolder::create(dirname($this->path));			// Build the log file header.			$head = $this->generateFileHeader();		}		else		{			$head = false;		}		// Open the file for writing (append mode).		if (!$this->file = fopen($this->path, 'a'))		{			throw new RuntimeException('Cannot open file for writing log');		}		if ($head)		{			if (!fwrite($this->file, $head))			{				throw new RuntimeException('Cannot fput file for log');			}		}	}	/**	 * Method to parse the format string into an array of fields.	 *	 * @return  void	 *	 * @since   11.1	 */	protected function parseFields()	{		$this->fields = array();		$matches = array();		// Get all of the available fields in the format string.		preg_match_all("/{(.*?)}/i", $this->format, $matches);		// Build the parsed fields list based on the found fields.		foreach ($matches[1] as $match)		{			$this->fields[] = strtoupper($match);		}	}}
<?php/** * @package     Joomla.Site * @subpackage  Layout * * @copyright   Copyright (C) 2005 - 2013 Open Source Matters, Inc. All rights reserved. * @license     GNU General Public License version 2 or later; see LICENSE.txt */defined('JPATH_BASE') or die;?>			<dd class="createdby">				<?php $author = $displayData['item']->author; ?>				<?php $author = ($displayData['item']->created_by_alias ? $displayData['item']->created_by_alias : $author); ?>				<?php if (!empty($displayData['item']->contactid ) && $displayData['params']->get('link_author') == true) : ?>					<?php					echo JText::sprintf('COM_CONTENT_WRITTEN_BY',						JHtml::_('link', JRoute::_('index.php?option=com_contact&view=contact&id='.$displayData['item']->contactid), $author)					); ?>				<?php else :?>					<?php echo JText::sprintf('COM_CONTENT_WRITTEN_BY', $author); ?>				<?php endif; ?>			</dd>
<?php/** * @package     Joomla.Administrator * @subpackage  Template.hathor * * @copyright   Copyright (C) 2005 - 2013 Open Source Matters, Inc. All rights reserved. * @license     GNU General Public License version 2 or later; see LICENSE.txt */defined('_JEXEC') or die;?><fieldset class="adminform">	<legend><?php echo JText::_('COM_ADMIN_CONFIGURATION_FILE'); ?></legend>	<table class="adminlist">		<thead>			<tr>				<th width="300">					<?php echo JText::_('COM_ADMIN_SETTING'); ?>				</th>				<th>					<?php echo JText::_('COM_ADMIN_VALUE'); ?>				</th>			</tr>		</thead>		<tfoot>			<tr>				<td colspan="2">&#160;</td>			</tr>		</tfoot>		<tbody>			<?php foreach ($this->config as $key => $value):?>			<tr>				<td>					<?php echo $key;?>				</td>				<td>					<?php echo htmlspecialchars($value, ENT_QUOTES);?>				</td>			</tr>			<?php endforeach;?>		</tbody>	</table></fieldset>
<?php/** * @package     Joomla.Site * @subpackage  mod_whosonline * * @copyright   Copyright (C) 2005 - 2013 Open Source Matters, Inc. All rights reserved. * @license     GNU General Public License version 2 or later; see LICENSE.txt */defined('_JEXEC') or die;// Include the whosonline functions only oncerequire_once __DIR__ . '/helper.php';$showmode = $params->get('showmode', 0);if ($showmode == 0 || $showmode == 2){	$count	= ModWhosonlineHelper::getOnlineCount();}if ($showmode > 0){	$names	= ModWhosonlineHelper::getOnlineUserNames($params);}$linknames = $params->get('linknames', 0);$moduleclass_sfx = htmlspecialchars($params->get('moduleclass_sfx'));require JModuleHelper::getLayoutPath('mod_whosonline', $params->get('layout', 'default'));
<?php/** * @package     Joomla.Administrator * @subpackage  com_messages * * @copyright   Copyright (C) 2005 - 2013 Open Source Matters, Inc. All rights reserved. * @license     GNU General Public License version 2 or later; see LICENSE.txt */defined('_JEXEC') or die;if (!JFactory::getUser()->authorise('core.manage', 'com_messages')){	return JError::raiseWarning(404, JText::_('JERROR_ALERTNOAUTHOR'));}$task = JFactory::getApplication()->input->get('task');$controller	= JControllerLegacy::getInstance('Messages');$controller->execute(JFactory::getApplication()->input->get('task'));$controller->redirect();
<?php/** * @package     Joomla.Platform * @subpackage  Google * * @copyright   Copyright (C) 2005 - 2013 Open Source Matters, Inc. All rights reserved * @license     GNU General Public License version 2 or later; see LICENSE */defined('JPATH_PLATFORM') or die;/** * Google API data class for the Joomla Platform. * * @package     Joomla.Platform * @subpackage  Google * @since       12.3 */abstract class JGoogleData{	/**	 * @var    JRegistry  Options for the Google data object.	 * @since  12.3	 */	protected $options;	/**	 * @var    JGoogleAuth  Authentication client for the Google data object.	 * @since  12.3	 */	protected $auth;	/**	 * Constructor.	 *	 * @param   JRegistry    $options  Google options object.	 * @param   JGoogleAuth  $auth     Google data http client object.	 *	 * @since   12.3	 */	public function __construct(JRegistry $options = null, JGoogleAuth $auth = null)	{		$this->options = isset($options) ? $options : new JRegistry;		$this->auth = isset($auth) ? $auth : new JGoogleAuthOauth2($this->options);	}	/**	 * Method to authenticate to Google	 *	 * @return  boolean  True on success.	 *	 * @since   12.3	 */	public function authenticate()	{		return $this->auth->authenticate();	}	/**	 * Check authentication	 *	 * @return  boolean  True if authenticated.	 *	 * @since   12.3	 */	public function isAuthenticated()	{		return $this->auth->isAuthenticated();	}	/**	 * Method to validate XML	 *	 * @param   string  $data  XML data to be parsed	 *	 * @return  SimpleXMLElement  XMLElement of parsed data	 *	 * @since   12.3	 * @throws UnexpectedValueException	 */	protected static function safeXML($data)	{		try		{			return new SimpleXMLElement($data, LIBXML_NOWARNING | LIBXML_NOERROR);		}		catch (Exception $e)		{			throw new UnexpectedValueException("Unexpected data received from Google: `$data`.");		}	}	/**	 * Method to retrieve a list of data	 *	 * @param   array   $url       URL to GET	 * @param   int     $maxpages  Maximum number of pages to return	 * @param   string  $token     Next page token	 *	 * @return  mixed  Data from Google	 *	 * @since   12.3	 * @throws UnexpectedValueException	 */	protected function listGetData($url, $maxpages = 1, $token = null)	{		$qurl = $url;		if (strpos($url, '&') && isset($token))		{			$qurl .= '&pageToken=' . $token;		}		elseif (isset($token))		{			$qurl .= 'pageToken=' . $token;		}		$jdata = $this->query($qurl);		$data = json_decode($jdata->body, true);		if ($data && array_key_exists('items', $data))		{			if ($maxpages != 1 && array_key_exists('nextPageToken', $data))			{				$data['items'] = array_merge($data['items'], $this->listGetData($url, $maxpages - 1, $data['nextPageToken']));			}			return $data['items'];		}		elseif ($data)		{			return array();		}		else		{			throw new UnexpectedValueException("Unexpected data received from Google: `{$jdata->body}`.");		}	}	/**	 * Method to retrieve data from Google	 *	 * @param   string  $url      The URL for the request.	 * @param   mixed   $data     The data to include in the request.	 * @param   array   $headers  The headers to send with the request.	 * @param   string  $method   The type of http request to send.	 *	 * @return  mixed  Data from Google.	 *	 * @since   12.3	 */	protected function query($url, $data = null, $headers = null, $method = 'get')	{		return $this->auth->query($url, $data, $headers, $method);	}	/**	 * Get an option from the JGoogleData instance.	 *	 * @param   string  $key  The name of the option to get.	 *	 * @return  mixed  The option value.	 *	 * @since   12.3	 */	public function getOption($key)	{		return $this->options->get($key);	}	/**	 * Set an option for the JGoogleData instance.	 *	 * @param   string  $key    The name of the option to set.	 * @param   mixed   $value  The option value to set.	 *	 * @return  JGoogleData  This object for method chaining.	 *	 * @since   12.3	 */	public function setOption($key, $value)	{		$this->options->set($key, $value);		return $this;	}}
<?php/** * @package     Joomla.Administrator * @subpackage  com_search * * @copyright   Copyright (C) 2005 - 2013 Open Source Matters, Inc. All rights reserved. * @license     GNU General Public License version 2 or later; see LICENSE.txt */defined('_JEXEC') or die;/** * Search master display controller. * * @package     Joomla.Administrator * @subpackage  com_search * @since       1.6 */class SearchController extends JControllerLegacy{	/**	 * @var		string	The default view.	 * @since   1.6	 */	protected $default_view = 'searches';	/**	 * Method to display a view.	 *	 * @param   boolean			If true, the view output will be cached	 * @param   array  An array of safe url parameters and their variable types, for valid values see {@link JFilterInput::clean()}.	 *	 * @return  JController		This object to support chaining.	 * @since   1.5	 */	public function display($cachable = false, $urlparams = false)	{		require_once JPATH_COMPONENT.'/helpers/search.php';		// Load the submenu.		SearchHelper::addSubmenu($this->input->get('view', 'searches'));		parent::display();	}}
<?php/** * @package    Joomla.Platform * * @copyright  Copyright (C) 2005 - 2013 Open Source Matters, Inc. All rights reserved. * @license    GNU General Public License version 2 or later; see LICENSE */defined('JPATH_PLATFORM') or die;/** * Static class to handle loading of libraries. * * @package  Joomla.Platform * @since    11.1 */abstract class JLoader{	/**	 * Container for already imported library paths.	 *	 * @var    array	 * @since  11.1	 */	protected static $classes = array();	/**	 * Container for already imported library paths.	 *	 * @var    array	 * @since  11.1	 */	protected static $imported = array();	/**	 * Container for registered library class prefixes and path lookups.	 *	 * @var    array	 * @since  12.1	 */	protected static $prefixes = array();	/**	 * Method to discover classes of a given type in a given path.	 *	 * @param   string   $classPrefix  The class name prefix to use for discovery.	 * @param   string   $parentPath   Full path to the parent folder for the classes to discover.	 * @param   boolean  $force        True to overwrite the autoload path value for the class if it already exists.	 * @param   boolean  $recurse      Recurse through all child directories as well as the parent path.	 *	 * @return  void	 *	 * @since   11.1	 */	public static function discover($classPrefix, $parentPath, $force = true, $recurse = false)	{		try		{			if ($recurse)			{				$iterator = new RecursiveIteratorIterator(					new RecursiveDirectoryIterator($parentPath),					RecursiveIteratorIterator::SELF_FIRST				);			}			else			{				$iterator = new DirectoryIterator($parentPath);			}			foreach ($iterator as $file)			{				$fileName = $file->getFilename();				// Only load for php files.				// Note: DirectoryIterator::getExtension only available PHP >= 5.3.6				if ($file->isFile() && substr($fileName, strrpos($fileName, '.') + 1) == 'php')				{					// Get the class name and full path for each file.					$class = strtolower($classPrefix . preg_replace('#\.php$#', '', $fileName));					// Register the class with the autoloader if not already registered or the force flag is set.					if (empty(self::$classes[$class]) || $force)					{						self::register($class, $file->getPath() . '/' . $fileName);					}				}			}		}		catch (UnexpectedValueException $e)		{			// Exception will be thrown if the path is not a directory. Ignore it.		}	}	/**	 * Method to get the list of registered classes and their respective file paths for the autoloader.	 *	 * @return  array  The array of class => path values for the autoloader.	 *	 * @since   11.1	 */	public static function getClassList()	{		return self::$classes;	}	/**	 * Loads a class from specified directories.	 *	 * @param   string  $key   The class name to look for (dot notation).	 * @param   string  $base  Search this directory for the class.	 *	 * @return  boolean  True on success.	 *	 * @since   11.1	 */	public static function import($key, $base = null)	{		// Only import the library if not already attempted.		if (!isset(self::$imported[$key]))		{			// Setup some variables.			$success = false;			$parts = explode('.', $key);			$class = array_pop($parts);			$base = (!empty($base)) ? $base : __DIR__;			$path = str_replace('.', DIRECTORY_SEPARATOR, $key);			// Handle special case for helper classes.			if ($class == 'helper')			{				$class = ucfirst(array_pop($parts)) . ucfirst($class);			}			// Standard class.			else			{				$class = ucfirst($class);			}			// If we are importing a library from the Joomla namespace set the class to autoload.			if (strpos($path, 'joomla') === 0)			{				// Since we are in the Joomla namespace prepend the classname with J.				$class = 'J' . $class;				// Only register the class for autoloading if the file exists.				if (is_file($base . '/' . $path . '.php'))				{					self::$classes[strtolower($class)] = $base . '/' . $path . '.php';					$success = true;				}			}			/*			 * If we are not importing a library from the Joomla namespace directly include the			* file since we cannot assert the file/folder naming conventions.			*/			else			{				// If the file exists attempt to include it.				if (is_file($base . '/' . $path . '.php'))				{					$success = (bool) include_once $base . '/' . $path . '.php';				}			}			// Add the import key to the memory cache container.			self::$imported[$key] = $success;		}		return self::$imported[$key];	}	/**	 * Load the file for a class.	 *	 * @param   string  $class  The class to be loaded.	 *	 * @return  boolean  True on success	 *	 * @since   11.1	 */	public static function load($class)	{		// Sanitize class name.		$class = strtolower($class);		// If the class already exists do nothing.		if (class_exists($class))		{			return true;		}		// If the class is registered include the file.		if (isset(self::$classes[$class]))		{			include_once self::$classes[$class];			return true;		}		return false;	}	/**	 * Directly register a class to the autoload list.	 *	 * @param   string   $class  The class name to register.	 * @param   string   $path   Full path to the file that holds the class to register.	 * @param   boolean  $force  True to overwrite the autoload path value for the class if it already exists.	 *	 * @return  void	 *	 * @since   11.1	 */	public static function register($class, $path, $force = true)	{		// Sanitize class name.		$class = strtolower($class);		// Only attempt to register the class if the name and file exist.		if (!empty($class) && is_file($path))		{			// Register the class with the autoloader if not already registered or the force flag is set.			if (empty(self::$classes[$class]) || $force)			{				self::$classes[$class] = $path;			}		}	}	/**	 * Register a class prefix with lookup path.  This will allow developers to register library	 * packages with different class prefixes to the system autoloader.  More than one lookup path	 * may be registered for the same class prefix, but if this method is called with the reset flag	 * set to true then any registered lookups for the given prefix will be overwritten with the current	 * lookup path.	 *	 * @param   string   $prefix  The class prefix to register.	 * @param   string   $path    Absolute file path to the library root where classes with the given prefix can be found.	 * @param   boolean  $reset   True to reset the prefix with only the given lookup path.	 *	 * @return  void	 *	 * @since   12.1	 */	public static function registerPrefix($prefix, $path, $reset = false)	{		// Verify the library path exists.		if (!file_exists($path))		{			throw new RuntimeException('Library path ' . $path . ' cannot be found.', 500);		}		// If the prefix is not yet registered or we have an explicit reset flag then set set the path.		if (!isset(self::$prefixes[$prefix]) || $reset)		{			self::$prefixes[$prefix] = array($path);		}		// Otherwise we want to simply add the path to the prefix.		else		{			self::$prefixes[$prefix][] = $path;		}	}	/**	 * Method to setup the autoloaders for the Joomla Platform.  Since the SPL autoloaders are	 * called in a queue we will add our explicit, class-registration based loader first, then	 * fall back on the autoloader based on conventions.  This will allow people to register a	 * class in a specific location and override platform libraries as was previously possible.	 *	 * @return  void	 *	 * @since   11.3	 */	public static function setup()	{		// Register the base path for Joomla platform libraries.		self::registerPrefix('J', JPATH_PLATFORM . '/joomla');		// Register the autoloader functions.		spl_autoload_register(array('JLoader', 'load'));		spl_autoload_register(array('JLoader', '_autoload'));	}	/**	 * Autoload a class based on name.	 *	 * @param   string  $class  The class to be loaded.	 *	 * @return  void	 *	 * @since   11.3	 */	private static function _autoload($class)	{		foreach (self::$prefixes as $prefix => $lookup)		{			$chr = strlen($prefix) < strlen($class) ? $class[strlen($prefix)] : 0;			if (strpos($class, $prefix) === 0 && ($chr === strtoupper($chr)))			{				return self::_load(substr($class, strlen($prefix)), $lookup);			}		}	}	/**	 * Load a class based on name and lookup array.	 *	 * @param   string  $class   The class to be loaded (wihtout prefix).	 * @param   array   $lookup  The array of base paths to use for finding the class file.	 *	 * @return  void	 *	 * @since   12.1	 */	private static function _load($class, $lookup)	{		// Split the class name into parts separated by camelCase.		$parts = preg_split('/(?<=[a-z0-9])(?=[A-Z])/x', $class);		// If there is only one part we want to duplicate that part for generating the path.		$parts = (count($parts) === 1) ? array($parts[0], $parts[0]) : $parts;		foreach ($lookup as $base)		{			// Generate the path based on the class name parts.			$path = $base . '/' . implode('/', array_map('strtolower', $parts)) . '.php';			// Load the file if it exists.			if (file_exists($path))			{				return include $path;			}		}	}}/** * Global application exit. * * This function provides a single exit point for the platform. * * @param   mixed  $message  Exit code or string. Defaults to zero. * * @return  void * * @codeCoverageIgnore * @since   11.1 */function jexit($message = 0){	exit($message);}/** * Intelligent file importer. * * @param   string  $path  A dot syntax path. * * @return  boolean  True on success. * * @since   11.1 */function jimport($path){	return JLoader::import($path);}
<?php/** * @package     Joomla.Administrator * @subpackage  mod_logged * * @copyright   Copyright (C) 2005 - 2013 Open Source Matters, Inc. All rights reserved. * @license     GNU General Public License version 2 or later; see LICENSE.txt */defined('_JEXEC') or die;// Include dependancies.require_once __DIR__ . '/helper.php';$users = ModLoggedHelper::getList($params);require JModuleHelper::getLayoutPath('mod_logged', $params->get('layout', 'default'));
<?php/** * @package     Joomla.Installation * @subpackage  Controller * * @copyright   Copyright (C) 2005 - 2013 Open Source Matters, Inc. All rights reserved. * @license     GNU General Public License version 2 or later; see LICENSE.txt */defined('_JEXEC') or die;/** * Controller class to set the language for the Joomla Installer. * * @package     Joomla.Installation * @subpackage  Controller * @since       3.1 */class InstallationControllerSetlanguage extends JControllerBase{	/**	 * Execute the controller.	 *	 * @return  void	 *	 * @since   3.1	 */	public function execute()	{		// Get the application		/* @var InstallationApplicationWeb $app */		$app = $this->getApplication();		// Check for request forgeries.		JSession::checkToken() or $app->sendJsonResponse(new Exception(JText::_('JINVALID_TOKEN'), 403));		// Very crude workaround to give an error message when JSON is disabled		if (!function_exists('json_encode') || !function_exists('json_decode'))		{			$app->setHeader('status', 500);			$app->setHeader('Content-Type', 'application/json; charset=utf-8');			$app->sendHeaders();			echo '{"token":"' . JSession::getFormToken(true) . '","lang":"' . JFactory::getLanguage()->getTag()				. '","error":true,"header":"' . JText::_('INSTL_HEADER_ERROR') . '","message":"' . JText::_('INSTL_WARNJSON') . '"}';			$app->close();		}		// Check for potentially unwritable session		$session = JFactory::getSession();		if ($session->isNew())		{			$this->sendResponse(new Exception(JText::_('INSTL_COOKIES_NOT_ENABLED'), 500));		}		// Get the setup model.		$model = new InstallationModelSetup;		// Get the posted values from the request and validate them.		$data = $this->input->post->get('jform', array(), 'array');		$return	= $model->validate($data, 'preinstall');		$r = new stdClass;		// Check for validation errors.		if ($return === false)		{			/*			 * The validate method enqueued all messages for us, so we just need to			 * redirect back to the site setup screen.			 */			$r->view = $this->input->getWord('view', 'site');			$app->sendJsonResponse($r);		}		// Store the options in the session.		$model->storeOptions($return);		// Setup language		$language = JFactory::getLanguage();		$language->setLanguage($return['language']);		// Redirect to the page.		$r->view = $this->input->getWord('view', 'site');		$app->sendJsonResponse($r);	}}
<?php/** * @package     Joomla.Site * @subpackage  mod_tags_popular * * @copyright   Copyright (C) 2005 - 2013 Open Source Matters, Inc. All rights reserved. * @license     GNU General Public License version 2 or later; see LICENSE.txt */defined('_JEXEC') or die;?><?php JLoader::register('TagsHelperRoute', JPATH_BASE . '/components/com_tags/helpers/route.php'); ?><div class="tagssimilar<?php echo $moduleclass_sfx; ?>"><?php if ($list) : ?>	<ul>	<?php foreach ($list as $i => $item) : ?>		<li>			<?php $item->route = new JHelperRoute; ?>			<a href="<?php echo JRoute::_(TagsHelperRoute::getItemRoute($item->content_item_id, $item->core_alias, $item->core_catid, $item->core_language, $item->type_alias, $item->router)); ?>">				<?php if (!empty($item->core_title)) :					echo htmlspecialchars($item->core_title);				endif; ?>			</a>		</li>	<?php endforeach; ?>	</ul><?php else : ?>	<span><?php echo JText::_('MOD_TAGS_SIMILAR_NO_MATCHING_TAGS'); ?></span><?php endif; ?></div>
<?php/** * @package     Joomla.Installation * @subpackage  View * * @copyright   Copyright (C) 2005 - 2013 Open Source Matters, Inc. All rights reserved. * @license     GNU General Public License version 2 or later; see LICENSE.txt */defined('_JEXEC') or die;/* @var InstallationViewDefault $this */?><?php echo JHtml::_('installation.stepbar'); ?><div class="btn-toolbar">	<div class="btn-group pull-right">		<a href="#" class="btn btn-primary" onclick="Install.submitform();" rel="next" title="<?php echo JText::_('JNext'); ?>"><i class="icon-arrow-right icon-white"></i> <?php echo JText::_('JNext'); ?></a>	</div></div><form action="index.php" method="post" id="languageForm" class="form-horizontal">	<div class="control-group">		<label for="jform_language" class="control-label"><?php echo JText::_('INSTL_SELECT_LANGUAGE_TITLE'); ?></label>		<div class="controls">			<?php echo $this->form->getInput('language'); ?>		</div>	</div>	<input type="hidden" name="task" value="setlanguage" />	<?php echo JHtml::_('form.token'); ?></form><form action="index.php" method="post" id="adminForm" class="form-validate form-horizontal">	<h3><?php echo JText::_('INSTL_SITE'); ?></h3>	<hr class="hr-condensed" />	<div class="row-fluid">		<div class="span6">			<div class="control-group">				<div class="control-label">					<?php echo $this->form->getLabel('site_name'); ?>				</div>				<div class="controls">					<?php echo $this->form->getInput('site_name'); ?>					<p class="help-block"><?php echo JText::_('INSTL_SITE_NAME_DESC'); ?></p>				</div>			</div>			<div class="control-group">				<div class="control-label">					<?php echo $this->form->getLabel('site_metadesc'); ?>				</div>				<div class="controls">					<?php echo $this->form->getInput('site_metadesc'); ?>					<p class="help-block">						<?php echo JText::_('INSTL_SITE_METADESC_TITLE_LABEL'); ?>					</p>				</div>			</div>		</div>		<div class="span6">			<div class="control-group">				<div class="control-label">					<?php echo $this->form->getLabel('admin_email'); ?>				</div>				<div class="controls">					<?php echo $this->form->getInput('admin_email'); ?>					<p class="help-block"><?php echo JText::_('INSTL_ADMIN_EMAIL_DESC'); ?></p>				</div>			</div>			<div class="control-group">				<div class="control-label">					<?php echo $this->form->getLabel('admin_user'); ?>				</div>				<div class="controls">					<?php echo $this->form->getInput('admin_user'); ?>					<p class="help-block"><?php echo JText::_('INSTL_ADMIN_USER_DESC'); ?></p>				</div>			</div>			<div class="control-group">				<div class="control-label">					<?php echo $this->form->getLabel('admin_password'); ?>				</div>				<div class="controls">					<?php echo $this->form->getInput('admin_password'); ?>					<p class="help-block"><?php echo JText::_('INSTL_ADMIN_PASSWORD_DESC'); ?></p>				</div>			</div>			<div class="control-group">				<div class="control-label">					<?php echo $this->form->getLabel('admin_password2'); ?>				</div>				<div class="controls">					<?php echo $this->form->getInput('admin_password2'); ?>				</div>			</div>		</div>	</div>	<div class="row-fluid">		<div class="span12">			<div class="control-group">				<div class="control-label">					<?php echo $this->form->getLabel('site_offline'); ?>				</div>				<div class="controls">					<?php echo $this->form->getInput('site_offline'); ?>					<p class="help-block">						<?php echo JText::_('INSTL_SITE_OFFLINE_TITLE_LABEL'); ?>					</p>				</div>			</div>		</div>	</div>	<input type="hidden" name="task" value="site" />	<?php echo JHtml::_('form.token'); ?></form>
<?php/** * @package     Joomla.Site * @subpackage  mod_menu * * @copyright   Copyright (C) 2005 - 2013 Open Source Matters, Inc. All rights reserved. * @license     GNU General Public License version 2 or later; see LICENSE.txt */defined('_JEXEC') or die;// Include the syndicate functions only oncerequire_once __DIR__ . '/helper.php';$list		= ModMenuHelper::getList($params);$base		= ModMenuHelper::getBase($params);$active		= ModMenuHelper::getActive($params);$active_id 	= $active->id;$path		= $base->tree;$showAll	= $params->get('showAllChildren');$class_sfx	= htmlspecialchars($params->get('class_sfx'));if (count($list)){	require JModuleHelper::getLayoutPath('mod_menu', $params->get('layout', 'default'));}
<?php/** * @package     Joomla.Platform * @subpackage  String * * @copyright   Copyright (C) 2005 - 2011 Open Source Matters, Inc. All rights reserved. * @license     GNU General Public License version 2 or later; see LICENSE */defined('JPATH_PLATFORM') or die;/** * Joomla Platform String Inflector Class * * The Inflector transforms words * * @package     Joomla.Platform * @subpackage  String * @since       12.1 */class JStringInflector{	/**	 * The singleton instance.	 *	 * @var    JStringInflector	 * @since  12.1	 */	private static $_instance;	/**	 * The inflector rules for singularisation, pluralisation and countability.	 *	 * @var    array	 * @since  12.1	 */	private $_rules = array(		'singular' => array(			'/(matr)ices$/i' => '\1ix',			'/(vert|ind)ices$/i' => '\1ex',			'/(alumn|bacill|cact|foc|fung|nucle|radi|stimul|syllab|termin|viri?)i$/i' => '\1us',			'/([ftw]ax)es/i' => '\1',			'/(cris|ax|test)es$/i' => '\1is',			'/(shoe|slave)s$/i' => '\1',			'/(o)es$/i' => '\1',			'/([^aeiouy]|qu)ies$/i' => '\1y',			'/$1ses$/i' => '\s',			'/ses$/i' => '\s',			'/eaus$/' => 'eau',			'/^(.*us)$/' => '\\1',			'/s$/i' => '',		),		'plural' => array(			'/([m|l])ouse$/i' => '\1ice',			'/(matr|vert|ind)(ix|ex)$/i'  => '\1ices',			'/(x|ch|ss|sh)$/i' => '\1es',			'/([^aeiouy]|qu)y$/i' => '\1ies',			'/([^aeiouy]|qu)ies$/i' => '\1y',			'/(?:([^f])fe|([lr])f)$/i' => '\1\2ves',			'/sis$/i' => 'ses',			'/([ti])um$/i' => '\1a',			'/(buffal|tomat)o$/i' => '\1\2oes',			'/(alumn|bacill|cact|foc|fung|nucle|radi|stimul|syllab|termin|vir)us$/i' => '\1i',			'/us$/i' => 'uses',			'/(ax|cris|test)is$/i' => '\1es',			'/s$/i' => 's',			'/$/' => 's',		),		'countable' => array(			'id',			'hits',			'clicks',		),	);	/**	 * Cached inflections.	 *	 * The array is in the form [singular => plural]	 *	 * @var    array	 * @since  12.1	 */	private $_cache = array();	/**	 * Protected constructor.	 *	 * @since  12.1	 */	protected function __construct()	{		// Pre=populate the irregual singular/plural.		$this			->addWord('deer')			->addWord('moose')			->addWord('sheep')			->addWord('bison')			->addWord('salmon')			->addWord('pike')			->addWord('trout')			->addWord('fish')			->addWord('swine')			->addWord('alias', 'aliases')			->addWord('bus', 'buses')			->addWord('foot', 'feet')			->addWord('goose', 'geese')			->addWord('hive', 'hives')			->addWord('louse', 'lice')			->addWord('man', 'men')			->addWord('mouse', 'mice')			->addWord('ox', 'oxen')			->addWord('quiz', 'quizes')			->addWord('status', 'statuses')			->addWord('tooth', 'teeth')			->addWord('woman', 'women');	}	/**	 * Adds inflection regex rules to the inflector.	 *	 * @param   mixed   $data      A string or an array of strings or regex rules to add.	 * @param   string  $ruleType  The rule type: singular | plural | countable	 *	 * @return  void	 *	 * @since   12.1	 * @throws  InvalidArgumentException	 */	private function _addRule($data, $ruleType)	{		if (is_string($data))		{			$data = array($data);		}		elseif (!is_array($data))		{			// Do not translate.			throw new InvalidArgumentException('Invalid inflector rule data.');		}		foreach ($data as $rule)		{			// Ensure a string is pushed.			array_push($this->_rules[$ruleType], (string) $rule);		}	}	/**	 * Gets an inflected word from the cache where the singular form is supplied.	 *	 * @param   string  $singular  A singular form of a word.	 *	 * @return  mixed  The cached inflection or false if none found.	 *	 * @since   12.1	 */	private function _getCachedPlural($singular)	{		$singular = JString::strtolower($singular);		// Check if the word is in cache.		if (isset($this->_cache[$singular]))		{			return $this->_cache[$singular];		}		return false;	}	/**	 * Gets an inflected word from the cache where the plural form is supplied.	 *	 * @param   string  $plural  A plural form of a word.	 *	 * @return  mixed  The cached inflection or false if none found.	 *	 * @since   12.1	 */	private function _getCachedSingular($plural)	{		$plural = JString::strtolower($plural);		return array_search($plural, $this->_cache);	}	/**	 * Execute a regex from rules.	 *	 * The 'plural' rule type expects a singular word.	 * The 'singular' rule type expects a plural word.	 *	 * @param   string  $word      The string input.	 * @param   string  $ruleType  String (eg, singular|plural)	 *	 * @return  mixed  An inflected string, or false if no rule could be applied.	 *	 * @since   12.1	 */	private function _matchRegexRule($word, $ruleType)	{		// Cycle through the regex rules.		foreach ($this->_rules[$ruleType] as $regex => $replacement)		{			$matches = 0;			$matchedWord = preg_replace($regex, $replacement, $word, -1, $matches);			if ($matches > 0)			{				return $matchedWord;			}		}		return false;	}	/**	 * Sets an inflected word in the cache.	 *	 * @param   string  $singular  The singular form of the word.	 * @param   string  $plural    The plural form of the word. If omitted, it is assumed the singular and plural are identical.	 *	 * @return  void	 *	 * @since   12.1	 */	private function _setCache($singular, $plural = null)	{		$singular = JString::strtolower($singular);		if ($plural === null)		{			$plural = $singular;		}		else		{			$plural = JString::strtolower($plural);		}		$this->_cache[$singular] = $plural;	}	/**	 * Adds a countable word.	 *	 * @param   mixed  $data  A string or an array of strings to add.	 *	 * @return  JStringInflector  Returns this object to support chaining.	 *	 * @since   12.1	 */	public function addCountableRule($data)	{		$this->_addRule($data, 'countable');		return $this;	}	/**	 * Adds a specific singular-plural pair for a word.	 *	 * @param   string  $singular  The singular form of the word.	 * @param   string  $plural    The plural form of the word. If omitted, it is assumed the singular and plural are identical.	 *	 * @return  JStringInflector  Returns this object to support chaining.	 *	 * @since   12.1	 */	public function addWord($singular, $plural =null)	{		$this->_setCache($singular, $plural);		return $this;	}	/**	 * Adds a pluralisation rule.	 *	 * @param   mixed  $data  A string or an array of regex rules to add.	 *	 * @return  JStringInflector  Returns this object to support chaining.	 *	 * @since   12.1	 */	public function addPluraliseRule($data)	{		$this->_addRule($data, 'plural');		return $this;	}	/**	 * Adds a singularisation rule.	 *	 * @param   mixed  $data  A string or an array of regex rules to add.	 *	 * @return  JStringInflector  Returns this object to support chaining.	 *	 * @since   12.1	 */	public function addSingulariseRule($data)	{		$this->_addRule($data, 'singular');		return $this;	}	/**	 * Gets an instance of the JStringInflector singleton.	 *	 * @param   boolean  $new  If true (default is false), returns a new instance regardless if one exists.	 *                         This argument is mainly used for testing.	 *	 * @return  JStringInflector	 *	 * @since   12.1	 */	public static function getInstance($new = false)	{		if ($new)		{			return new static;		}		elseif (!is_object(self::$_instance))		{			self::$_instance = new static;		}		return self::$_instance;	}	/**	 * Checks if a word is countable.	 *	 * @param   string  $word  The string input.	 *	 * @return  boolean  True if word is countable, false otherwise.	 *	 * @since  12.1	 */	public function isCountable($word)	{		return (boolean) in_array($word, $this->_rules['countable']);	}	/**	 * Checks if a word is in a plural form.	 *	 * @param   string  $word  The string input.	 *	 * @return  boolean  True if word is plural, false if not.	 *	 * @since  12.1	 */	public function isPlural($word)	{		// Try the cache for an known inflection.		$inflection = $this->_getCachedSingular($word);		if ($inflection !== false)		{			return true;		}		// Compute the inflection to cache the values, and compare.		return $this->toPlural($this->toSingular($word)) == $word;	}	/**	 * Checks if a word is in a singular form.	 *	 * @param   string  $word  The string input.	 *	 * @return  boolean  True if word is singular, false if not.	 *	 * @since  12.1	 */	public function isSingular($word)	{		// Try the cache for an known inflection.		$inflection = $this->_getCachedPlural($word);		if ($inflection !== false)		{			return true;		}		// Compute the inflection to cache the values, and compare.		return $this->toSingular($this->toPlural($word)) == $word;	}	/**	 * Converts a word into its plural form.	 *	 * @param   string  $word  The singular word to pluralise.	 *	 * @return  mixed  An inflected string, or false if no rule could be applied.	 *	 * @since  12.1	 */	public function toPlural($word)	{		// Try to get the cached plural form from the singular.		$cache = $this->_getCachedPlural($word);		if ($cache !== false)		{			return $cache;		}		// Check if the word is a known singular.		if ($this->_getCachedSingular($word))		{			return false;		}		// Compute the inflection.		$inflected = $this->_matchRegexRule($word, 'plural');		if ($inflected !== false)		{			$this->_setCache($word, $inflected);			return $inflected;		}		return false;	}	/**	 * Converts a word into its singular form.	 *	 * @param   string  $word  The plural word to singularise.	 *	 * @return  mixed  An inflected string, or false if no rule could be applied.	 *	 * @since  12.1	 */	public function toSingular($word)	{		// Try to get the cached singular form from the plural.		$cache = $this->_getCachedSingular($word);		if ($cache !== false)		{			return $cache;		}		// Check if the word is a known plural.		if ($this->_getCachedPlural($word))		{			return false;		}		// Compute the inflection.		$inflected = $this->_matchRegexRule($word, 'singular');		if ($inflected !== false)		{			$this->_setCache($inflected, $word);			return $inflected;		}		return false;	}}
<?php/** * @package     Joomla.Administrator * @subpackage  com_banners * * @copyright   Copyright (C) 2005 - 2013 Open Source Matters, Inc. All rights reserved. * @license     GNU General Public License version 2 or later; see LICENSE.txt */defined('_JEXEC') or die;/** * Tracks list controller class. * * @package     Joomla.Administrator * @subpackage  com_banners * @since       1.6 */class BannersControllerTracks extends JControllerLegacy{	/**	 * @var		string	The context for persistent state.	 * @since   1.6	 */	protected $context = 'com_banners.tracks';	/**	 * Method to get a model object, loading it if required.	 *	 * @param   string  $name    The model name. Optional.	 * @param   string  $prefix  The class prefix. Optional.	 * @param   array   $config  Configuration array for model. Optional.	 *	 * @return  object  The model.	 *	 * @since   1.6	 */	public function getModel($name = 'Tracks', $prefix = 'BannersModel', $config = array('ignore_request' => true))	{		$model = parent::getModel($name, $prefix, $config);		return $model;	}	/**	 * Method to remove a record.	 *	 * @return  void	 * @since   1.6	 */	public function delete()	{		// Check for request forgeries.		JSession::checkToken() or jexit(JText::_('JINVALID_TOKEN'));		// Get the model.		$model = $this->getModel();		// Load the filter state.		$app = JFactory::getApplication();		$type = $app->getUserState($this->context.'.filter.type');		$model->setState('filter.type', $type);		$begin = $app->getUserState($this->context.'.filter.begin');		$model->setState('filter.begin', $begin);		$end = $app->getUserState($this->context.'.filter.end');		$model->setState('filter.end', $end);		$categoryId = $app->getUserState($this->context.'.filter.category_id');		$model->setState('filter.category_id', $categoryId);		$clientId = $app->getUserState($this->context.'.filter.client_id');		$model->setState('filter.client_id', $clientId);		$model->setState('list.limit', 0);		$model->setState('list.start', 0);		$count = $model->getTotal();		// Remove the items.		if (!$model->delete())		{			JError::raiseWarning(500, $model->getError());		}		else		{			$this->setMessage(JText::plural('COM_BANNERS_TRACKS_N_ITEMS_DELETED', $count));		}		$this->setRedirect('index.php?option=com_banners&view=tracks');	}}
<?php/** * @package     Joomla.Platform * @subpackage  Utilities * * @copyright   Copyright (C) 2005 - 2013 Open Source Matters, Inc. All rights reserved. * @license     GNU General Public License version 2 or later; see LICENSE */defined('JPATH_PLATFORM') or die;/** * Generic Buffer stream handler * * This class provides a generic buffer stream.  It can be used to store/retrieve/manipulate * string buffers with the standard PHP filesystem I/O methods. * * @package     Joomla.Platform * @subpackage  Utilities * @since       11.1 */class JBuffer{	/**	 * Stream position	 *	 * @var    integer	 * @since  11.1	 */	public $position = 0;	/**	 * Buffer name	 *	 * @var    string	 * @since  11.1	 */	public $name = null;	/**	 * Buffer hash	 *	 * @var    array	 * @since  12.1	 */	public $buffers = array();	/**	 * Function to open file or url	 *	 * @param   string   $path          The URL that was passed	 * @param   string   $mode          Mode used to open the file @see fopen	 * @param   integer  $options       Flags used by the API, may be STREAM_USE_PATH and	 *                                  STREAM_REPORT_ERRORS	 * @param   string   &$opened_path  Full path of the resource. Used with STREAN_USE_PATH option	 *	 * @return  boolean	 *	 * @since   11.1	 * @see     streamWrapper::stream_open	 */	public function stream_open($path, $mode, $options, &$opened_path)	{		$url = parse_url($path);		$this->name = $url['host'];		$this->buffers[$this->name] = null;		$this->position = 0;		return true;	}	/**	 * Read stream	 *	 * @param   integer  $count  How many bytes of data from the current position should be returned.	 *	 * @return  mixed    The data from the stream up to the specified number of bytes (all data if	 *                   the total number of bytes in the stream is less than $count. Null if	 *                   the stream is empty.	 *	 * @see     streamWrapper::stream_read	 * @since   11.1	 */	public function stream_read($count)	{		$ret = substr($this->buffers[$this->name], $this->position, $count);		$this->position += strlen($ret);		return $ret;	}	/**	 * Write stream	 *	 * @param   string  $data  The data to write to the stream.	 *	 * @return  integer	 *	 * @see     streamWrapper::stream_write	 * @since   11.1	 */	public function stream_write($data)	{		$left = substr($this->buffers[$this->name], 0, $this->position);		$right = substr($this->buffers[$this->name], $this->position + strlen($data));		$this->buffers[$this->name] = $left . $data . $right;		$this->position += strlen($data);		return strlen($data);	}	/**	 * Function to get the current position of the stream	 *	 * @return  integer	 *	 * @see     streamWrapper::stream_tell	 * @since   11.1	 */	public function stream_tell()	{		return $this->position;	}	/**	 * Function to test for end of file pointer	 *	 * @return  boolean  True if the pointer is at the end of the stream	 *	 * @see     streamWrapper::stream_eof	 * @since   11.1	 */	public function stream_eof()	{		return $this->position >= strlen($this->buffers[$this->name]);	}	/**	 * The read write position updates in response to $offset and $whence	 *	 * @param   integer  $offset  The offset in bytes	 * @param   integer  $whence  Position the offset is added to	 *                            Options are SEEK_SET, SEEK_CUR, and SEEK_END	 *	 * @return  boolean  True if updated	 *	 * @see     streamWrapper::stream_seek	 * @since   11.1	 */	public function stream_seek($offset, $whence)	{		switch ($whence)		{			case SEEK_SET:				if ($offset < strlen($this->buffers[$this->name]) && $offset >= 0)				{					$this->position = $offset;					return true;				}				else				{					return false;				}				break;			case SEEK_CUR:				if ($offset >= 0)				{					$this->position += $offset;					return true;				}				else				{					return false;				}				break;			case SEEK_END:				if (strlen($this->buffers[$this->name]) + $offset >= 0)				{					$this->position = strlen($this->buffers[$this->name]) + $offset;					return true;				}				else				{					return false;				}				break;			default:				return false;		}	}}// Register the streamstream_wrapper_register('buffer', 'JBuffer');
<?php/** * @package     Joomla.Legacy * @subpackage  Log * * @copyright   Copyright (C) 2005 - 2013 Open Source Matters, Inc. All rights reserved. * @license     GNU General Public License version 2 or later; see LICENSE */defined('JPATH_PLATFORM') or die;JLog::add('LogException is deprecated, use SPL Exceptions instead.', JLog::WARNING, 'deprecated');/** * Exception class definition for the Log subpackage. * * @package     Joomla.Legacy * @subpackage  Log * @since       11.1 * @deprecated  12.3 Use semantic exceptions instead */class LogException extends RuntimeException{}
<?php/** * @package     Joomla.Administrator * @subpackage  com_media * * @copyright   Copyright (C) 2005 - 2013 Open Source Matters, Inc. All rights reserved. * @license     GNU General Public License version 2 or later; see LICENSE.txt */defined('_JEXEC') or die;JHtml::_('formbehavior.chosen', 'select');$user  = JFactory::getUser();$input = JFactory::getApplication()->input;?><script type='text/javascript'>var image_base_path = '<?php $params = JComponentHelper::getParams('com_media');echo $params->get('image_path', 'images'); ?>/';</script><form action="index.php?option=com_media&amp;asset=<?php echo $input->getCmd('asset');?>&amp;author=<?php echo $input->getCmd('author'); ?>" class="form-vertical" id="imageForm" method="post" enctype="multipart/form-data">	<div id="messages" style="display: none;">		<span id="message"></span><?php echo JHtml::_('image', 'media/dots.gif', '...', array('width' => 22, 'height' => 12), true) ?>	</div>	<div class="well">		<div class="row">			<div class="span9 control-group">				<div class="control-label">					<label class="control-label" for="folder"><?php echo JText::_('COM_MEDIA_DIRECTORY') ?></label>				</div>				<div class="controls">					<?php echo $this->folderList; ?>					<button class="btn" type="button" id="upbutton" title="<?php echo JText::_('COM_MEDIA_DIRECTORY_UP') ?>"><?php echo JText::_('COM_MEDIA_UP') ?></button>				</div>			</div>			<div class="pull-right">				<button class="btn btn-primary" type="button" onclick="<?php if ($this->state->get('field.id')):?>window.parent.jInsertFieldValue(document.id('f_url').value,'<?php echo $this->state->get('field.id');?>');<?php else:?>ImageManager.onok();<?php endif;?>window.parent.SqueezeBox.close();"><?php echo JText::_('COM_MEDIA_INSERT') ?></button>				<button class="btn" type="button" onclick="window.parent.SqueezeBox.close();"><?php echo JText::_('JCANCEL') ?></button>			</div>		</div>	</div>	<iframe id="imageframe" name="imageframe" src="index.php?option=com_media&amp;view=imagesList&amp;tmpl=component&amp;folder=<?php echo $this->state->folder?>&amp;asset=<?php echo $input->getCmd('asset');?>&amp;author=<?php echo $input->getCmd('author');?>"></iframe>	<div class="well">		<div class="row">			<div class="span6 control-group">				<div class="control-label">					<label for="f_url"><?php echo JText::_('COM_MEDIA_IMAGE_URL') ?></label>				</div>				<div class="controls">					<input type="text" id="f_url" value="" />				</div>			</div>			<?php if (!$this->state->get('field.id')):?>			<div class="span6 control-group">				<div class="control-label">					<label for="f_align"><?php echo JText::_('COM_MEDIA_ALIGN') ?></label>				</div>				<div class="controls">					<select size="1" id="f_align">						<option value="" selected="selected"><?php echo JText::_('COM_MEDIA_NOT_SET') ?></option>						<option value="left"><?php echo JText::_('JGLOBAL_LEFT') ?></option>						<option value="right"><?php echo JText::_('JGLOBAL_RIGHT') ?></option>					</select>					<p class="help-block"><?php echo JText::_('COM_MEDIA_ALIGN_DESC');?></p>				</div>			</div>			<?php endif;?>		</div>		<?php if (!$this->state->get('field.id')):?>		<div class="row">			<div class="span6 control-group">				<div class="control-label">					<label for="f_alt"><?php echo JText::_('COM_MEDIA_IMAGE_DESCRIPTION') ?></label>				</div>				<div class="controls">					<input type="text" id="f_alt" value="" />				</div>			</div>			<div class="span6 control-group">				<div class="control-label">					<label for="f_title"><?php echo JText::_('COM_MEDIA_TITLE') ?></label>				</div>				<div class="controls">					<input type="text" id="f_title" value="" />				</div>			</div>		</div>		<div class="row">			<div class="span12 control-group">				<div class="control-label">					<label for="f_caption"><?php echo JText::_('COM_MEDIA_CAPTION') ?></label>				</div>				<div class="controls">					<select size="1" id="f_caption" >						<option value="" selected="selected" ><?php echo JText::_('JNO') ?></option>						<option value="1"><?php echo JText::_('JYES') ?></option>					</select>					<p class="help-block"><?php echo JText::_('COM_MEDIA_CAPTION_DESC');?></p>				</div>			</div>		</div>		<?php endif;?>		<input type="hidden" id="dirPath" name="dirPath" />		<input type="hidden" id="f_file" name="f_file" />		<input type="hidden" id="tmpl" name="component" />	</div></form><?php if ($user->authorise('core.create', 'com_media')) : ?>	<form action="<?php echo JURI::base(); ?>index.php?option=com_media&amp;task=file.upload&amp;tmpl=component&amp;<?php echo $this->session->getName() . '=' . $this->session->getId(); ?>&amp;<?php echo JSession::getFormToken();?>=1&amp;asset=<?php echo $input->getCmd('asset');?>&amp;author=<?php echo $input->getCmd('author');?>&amp;view=images" id="uploadForm" class="form-horizontal" name="uploadForm" method="post" enctype="multipart/form-data">		<div id="uploadform" class="well">			<fieldset id="upload-noflash" class="actions">				<div class="control-group">					<div class="control-label">						<label for="upload-file" class="control-label"><?php echo JText::_('COM_MEDIA_UPLOAD_FILE'); ?></label>					</div>					<div class="controls">						<input type="file" id="upload-file" name="Filedata[]" multiple /><button class="btn btn-primary" id="upload-submit"><i class="icon-upload icon-white"></i> <?php echo JText::_('COM_MEDIA_START_UPLOAD'); ?></button>						<p class="help-block"><?php echo $this->config->get('upload_maxsize') == '0' ? JText::_('COM_MEDIA_UPLOAD_FILES_NOLIMIT') : JText::sprintf('COM_MEDIA_UPLOAD_FILES', $this->config->get('upload_maxsize')); ?></p>					</div>				</div>			</fieldset>			<input type="hidden" name="return-url" value="<?php echo base64_encode('index.php?option=com_media&view=images&tmpl=component&fieldid=' . $input->getCmd('fieldid', '') . '&e_name=' . $input->getCmd('e_name') . '&asset=' . $input->getCmd('asset') . '&author=' . $input->getCmd('author')); ?>" />		</div>	</form><?php endif; ?>
<?php/** * @package     Joomla.Platform * @subpackage  Document * * @copyright   Copyright (C) 2005 - 2013 Open Source Matters, Inc. All rights reserved. * @license     GNU General Public License version 2 or later; see LICENSE */defined('JPATH_PLATFORM') or die;/** * JDocument Modules renderer * * @package     Joomla.Platform * @subpackage  Document * @since       11.1 */class JDocumentRendererModules extends JDocumentRenderer{	/**	 * Renders multiple modules script and returns the results as a string	 *	 * @param   string  $position  The position of the modules to render	 * @param   array   $params    Associative array of values	 * @param   string  $content   Module content	 *	 * @return  string  The output of the script	 *	 * @since   11.1	 */	public function render($position, $params = array(), $content = null)	{		$renderer = $this->_doc->loadRenderer('module');		$buffer = '';		foreach (JModuleHelper::getModules($position) as $mod)		{			$buffer .= $renderer->render($mod, $params, $content);		}		return $buffer;	}}
<?php/** * @package     Joomla.Site * @subpackage  com_users * * @copyright   Copyright (C) 2005 - 2013 Open Source Matters, Inc. All rights reserved. * @license     GNU General Public License version 2 or later; see LICENSE.txt */defined('_JEXEC') or die;JLoader::register('JHtmlUsers', JPATH_COMPONENT . '/helpers/html/users.php');JHtml::register('users.spacer', array('JHtmlUsers', 'spacer'));JHtml::register('users.helpsite', array('JHtmlUsers', 'helpsite'));JHtml::register('users.templatestyle', array('JHtmlUsers', 'templatestyle'));JHtml::register('users.admin_language', array('JHtmlUsers', 'admin_language'));JHtml::register('users.language', array('JHtmlUsers', 'language'));JHtml::register('users.editor', array('JHtmlUsers', 'editor'));?><?php $fields = $this->form->getFieldset('params'); ?><?php if (count($fields)) : ?><fieldset id="users-profile-custom">	<legend><?php echo JText::_('COM_USERS_SETTINGS_FIELDSET_LABEL'); ?></legend>	<dl class="dl-horizontal">	<?php foreach ($fields as $field):		if (!$field->hidden) :?>		<dt><?php echo $field->title; ?></dt>		<dd>			<?php if (JHtml::isRegistered('users.'.$field->id)):?>				<?php echo JHtml::_('users.'.$field->id, $field->value);?>			<?php elseif (JHtml::isRegistered('users.'.$field->fieldname)):?>				<?php echo JHtml::_('users.'.$field->fieldname, $field->value);?>			<?php elseif (JHtml::isRegistered('users.'.$field->type)):?>				<?php echo JHtml::_('users.'.$field->type, $field->value);?>			<?php else:?>				<?php echo JHtml::_('users.value', $field->value);?>			<?php endif;?>		</dd>		<?php endif;?>	<?php endforeach;?>	</dl></fieldset><?php endif;?>
<?php/** * @package     Joomla.Site * @subpackage  com_newsfeeds * * @copyright   Copyright (C) 2005 - 2013 Open Source Matters, Inc. All rights reserved. * @license     GNU General Public License version 2 or later; see LICENSE.txt */defined('_JEXEC') or die;JHtml::addIncludePath(JPATH_COMPONENT . '/helpers');JHtml::_('behavior.caption');echo JLayoutHelper::render('joomla.content.categories_default', $this);echo $this->loadTemplate('items');?></div>
<?php/** * @package     Joomla.Libraries * @subpackage  Schema * * @copyright   Copyright (C) 2005 - 2013 Open Source Matters, Inc. All rights reserved. * @license     GNU General Public License version 2 or later; see LICENSE */defined('JPATH_PLATFORM') or die;/** * Each object represents one query, which is one line from a DDL SQL query. * This class is used to check the site's database to see if the DDL query has been run. * If not, it provides the ability to fix the database by re-running the DDL query. * The queries are parsed from the update files in the folder * administrator/components/com_admin/sql/updates/<database>. * These updates are run automatically if the site was updated using com_installer. * However, it is possible that the program files could be updated without udpating * the database (for example, if a user just copies the new files over the top of an * existing installation). * * This is an abstract class. We need to extend it for each database and add a * buildCheckQuery() method that creates the query to check that a DDL query has been run. * * @package     Joomla.Libraries * @subpackage  Schema * @since       2.5 */abstract class JSchemaChangeitem{	/**	 * Update file: full path file name where query was found	 *	 * @var    string	 * @since  2.5	 */	public $file = null;	/**	 * Update query: query used to change the db schema (one line from the file)	 *	 * @var    string	 * @since  2.5	 */	public $updateQuery = null;	/**	 * Check query: query used to check the db schema	 *	 * @var    string	 * @since  2.5	 */	public $checkQuery = null;	/**	 * Check query result: expected result of check query if database is up to date	 *	 * @var    string	 * @since  2.5	 */	public $checkQueryExpected = 1;	/**	 * JDatabaseDriver object	 *	 * @var    JDatabaseDriver	 * @since  2.5	 */	public $db = null;	/**	 * Query type: To be used in building a language key for a	 * message to tell user what was checked / changed	 * Possible values: ADD_TABLE, ADD_COLUMN, CHANGE_COLUMN_TYPE, ADD_INDEX	 *	 * @var    string	 * @since  2.5	 */	public $queryType = null;	/**	 * Array with values for use in a JText::sprintf statment indicating what was checked	 *	 * Tells you what the message should be, based on which elements are defined, as follows:	 *     For ADD_TABLE: table	 *     For ADD_COLUMN: table, column	 *     For CHANGE_COLUMN_TYPE: table, column, type	 *     For ADD_INDEX: table, index	 *	 * @var    array	 * @since  2.5	 */	public $msgElements = array();	/**	 * Checked status	 *	 * @var    integer   0=not checked, -1=skipped, -2=failed, 1=succeeded	 * @since  2.5	 */	public $checkStatus = 0;	/**	 * Rerun status	 *	 * @var    int   0=not rerun, -1=skipped, -2=failed, 1=succeeded	 * @since  2.5	 */	public $rerunStatus = 0;	/**	 * Constructor: builds check query and message from $updateQuery	 *	 * @param   JDatabaseDriver  $db     Database connector object	 * @param   string           $file   Full path name of the sql file	 * @param   string           $query  Text of the sql query (one line of the file)	 *	 * @since   2.5	 */	public function __construct($db, $file, $query)	{		$this->updateQuery = $query;		$this->file = $file;		$this->db = $db;		$this->buildCheckQuery();	}	/**	 * Returns a reference to the JSchemaChangeitem object.	 *	 * @param   JDatabaseDriver  $db     Database connector object	 * @param   string           $file   Full path name of the sql file	 * @param   string           $query  Text of the sql query (one line of the file)	 *	 * @return  JSchemaChangeitem instance based on the database driver	 *	 * @since   2.5	 * @throws  RuntimeException if class for database driver not found	 */	public static function getInstance($db, $file, $query)	{		// Get the class name		$dbname = $db->name;		if ($dbname == 'mysqli')		{			$dbname = 'mysql';		}		elseif ($dbname == 'sqlazure')		{			$dbname = 'sqlsrv';		}		$class = 'JSchemaChangeitem' . ucfirst($dbname);		// If the class exists, return it.		if (class_exists($class))		{			return new $class($db, $file, $query);		}		throw new RuntimeException(sprintf('JSchemaChangeitem child class not found for the %s database driver', $dbname), 500);	}	/**	 * Checks a DDL query to see if it is a known type	 * If yes, build a check query to see if the DDL has been run on the database.	 * If successful, the $msgElements, $queryType, $checkStatus and $checkQuery fields are populated.	 * The $msgElements contains the text to create the user message.	 * The $checkQuery contains the SQL query to check whether the schema change has	 * been run against the current database. The $queryType contains the type of	 * DDL query that was run (for example, CREATE_TABLE, ADD_COLUMN, CHANGE_COLUMN_TYPE, ADD_INDEX).	 * The $checkStatus field is set to zero if the query is created	 *	 * If not successful, $checkQuery is empty and , and $checkStatus is -1.	 * For example, this will happen if the current line is a non-DDL statement.	 *	 * @return void	 *	 * @since  2.5	 */	abstract protected function buildCheckQuery();	/**	 * Runs the check query and checks that 1 row is returned	 * If yes, return true, otherwise return false	 *	 * @return  boolean  true on success, false otherwise	 *	 * @since  2.5	 */	public function check()	{		$this->checkStatus = -1;		if ($this->checkQuery)		{			$this->db->setQuery($this->checkQuery);			$rows = $this->db->loadObject();			if ($rows !== false)			{				if (count($rows) === $this->checkQueryExpected)				{					$this->checkStatus = 1;				}				else				{					$this->checkStatus = -2;				}			}			else			{				$this->checkStatus = -2;			}		}		return $this->checkStatus;	}	/**	 * Runs the update query to apply the change to the database	 *	 * @return  void	 *	 * @since   2.5	 */	public function fix()	{		if ($this->checkStatus === -2)		{			// At this point we have a failed query			$this->db->setQuery($this->updateQuery);			if ($this->db->execute())			{				if ($this->check())				{					$this->checkStatus = 1;					$this->rerunStatus = 1;				}				else				{					$this->rerunStatus = -2;				}			}			else			{				$this->rerunStatus = -2;			}		}	}}
<?php/** * @package     Joomla.Legacy * @subpackage  Database * * @copyright   Copyright (C) 2005 - 2013 Open Source Matters, Inc. All rights reserved. * @license     GNU General Public License version 2 or later; see LICENSE */defined('JPATH_PLATFORM') or die;JLog::add('JDatabaseMysql is deprecated, use JDatabaseDriverMysql instead.', JLog::WARNING, 'deprecated');/** * MySQL database driver * * @package     Joomla.Legacy * @subpackage  Database * @see         http://dev.mysql.com/doc/ * @since       11.1 * @deprecated  13.1 Use JDatabaseDriverMysql instead. */class JDatabaseMysql extends JDatabaseDriverMysql{}
<?php/** * @package     Joomla.Platform * @subpackage  Input * * @copyright   Copyright (C) 2005 - 2013 Open Source Matters, Inc. All rights reserved. * @license     GNU General Public License version 2 or later; see LICENSE */defined('JPATH_PLATFORM') or die;/** * Joomla! Input Files Class * * @package     Joomla.Platform * @subpackage  Input * @since       11.1 */class JInputFiles extends JInput{	protected $decodedData = array();	/**	 * Constructor.	 *	 * @param   array  $source   Ignored.	 * @param   array  $options  Array of configuration parameters (Optional)	 *	 * @since   12.1	 */	public function __construct(array $source = null, array $options = array())	{		if (isset($options['filter']))		{			$this->filter = $options['filter'];		}		else		{			$this->filter = JFilterInput::getInstance();		}		// Set the data source.		$this->data = & $_FILES;		// Set the options for the class.		$this->options = $options;	}	/**	 * Gets a value from the input data.	 *	 * @param   string  $name     Name of the value to get.	 * @param   mixed   $default  Default value to return if variable does not exist.	 * @param   string  $filter   Filter to apply to the value.	 *	 * @return  mixed  The filtered input value.	 *	 * @since   11.1	 */	public function get($name, $default = null, $filter = 'cmd')	{		if (isset($this->data[$name]))		{			$results = $this->decodeData(				array(					$this->data[$name]['name'],					$this->data[$name]['type'],					$this->data[$name]['tmp_name'],					$this->data[$name]['error'],					$this->data[$name]['size']				)			);			return $results;		}		return $default;	}	/**	 * Method to decode a data array.	 *	 * @param   array  $data  The data array to decode.	 *	 * @return  array	 *	 * @since   11.1	 */	protected function decodeData(array $data)	{		$result = array();		if (is_array($data[0]))		{			foreach ($data[0] as $k => $v)			{				$result[$k] = $this->decodeData(array($data[0][$k], $data[1][$k], $data[2][$k], $data[3][$k], $data[4][$k]));			}			return $result;		}		return array('name' => $data[0], 'type' => $data[1], 'tmp_name' => $data[2], 'error' => $data[3], 'size' => $data[4]);	}	/**	 * Sets a value	 *	 * @param   string  $name   Name of the value to set.	 * @param   mixed   $value  Value to assign to the input.	 *	 * @return  void	 *	 * @since   11.1	 */	public function set($name, $value)	{	}}
<?php/** * @package     Joomla.Administrator * @subpackage  mod_quickicon * * @copyright   Copyright (C) 2005 - 2013 Open Source Matters, Inc. All rights reserved. * @license     GNU General Public License version 2 or later; see LICENSE.txt */defined('_JEXEC') or die;require_once __DIR__ . '/helper.php';$buttons = ModQuickIconHelper::getButtons($params);require JModuleHelper::getLayoutPath('mod_quickicon', $params->get('layout', 'default'));
<?php/** * @package     Joomla.Installation * @subpackage  View * * @copyright   Copyright (C) 2005 - 2013 Open Source Matters, Inc. All rights reserved. * @license     GNU General Public License version 2 or later; see LICENSE.txt */defined('_JEXEC') or die;/** * The Installation Complete View * * @package     Joomla.Installation * @subpackage  View * @since       3.1 */class InstallationViewCompleteHtml extends JViewHtml{	/**	 * The JConfiguration data if present	 *	 * @var    JRegistry	 * @since  3.1	 */	protected $config;	/**	 * Redefine the model so the correct type hinting is available.	 *	 * @var     InstallationModelSetup	 * @since   3.1	 */	protected $model;	/**	 * The session options	 *	 * @var    array	 * @since  3.1	 */	protected $options;	/**	 * Method to render the view.	 *	 * @return  string  The rendered view.	 *	 * @since   3.1	 */	public function render()	{		$this->options = $this->model->getOptions();		// Get the config string from the session.		$session = JFactory::getSession();		$this->config = $session->get('setup.config', null);		return parent::render();	}}
<?php/** * @package    Joomla.Cli * * @copyright  Copyright (C) 2005 - 2013 Open Source Matters, Inc. All rights reserved. * @license    GNU General Public License version 2 or later; see LICENSE.txt *//** * This is a CRON script which should be called from the command-line, not the * web. For example something like: * /usr/bin/php /path/to/site/cli/update_cron.php */// Set flag that this is a parent file.const _JEXEC = 1;error_reporting(E_ALL | E_NOTICE);ini_set('display_errors', 1);// Load system definesif (file_exists(dirname(__DIR__) . '/defines.php')){	require_once dirname(__DIR__) . '/defines.php';}if (!defined('_JDEFINES')){	define('JPATH_BASE', dirname(__DIR__));	require_once JPATH_BASE . '/includes/defines.php';}require_once JPATH_LIBRARIES . '/import.legacy.php';require_once JPATH_LIBRARIES . '/cms.php';// Load the configurationrequire_once JPATH_CONFIGURATION . '/configuration.php';/** * This script will fetch the update information for all extensions and store * them in the database, speeding up your administrator. * * @package  Joomla.CLI * @since    2.5 */class Updatecron extends JApplicationCli{	/**	 * Entry point for the script	 *	 * @return  void	 *	 * @since   2.5	 */	public function doExecute()	{		// Get the update cache time		$component = JComponentHelper::getComponent('com_installer');		$params = $component->params;		$cache_timeout = $params->get('cachetimeout', 6, 'int');		$cache_timeout = 3600 * $cache_timeout;		// Find all updates		$this->out('Fetching updates...');		$updater = JUpdater::getInstance();		$updater->findUpdates(0, $cache_timeout);		$this->out('Finished fetching updates');	}}JApplicationCli::getInstance('Updatecron')->execute();
<?php/** * @package     Joomla.Site * @subpackage  com_weblinks * * @copyright   Copyright (C) 2005 - 2013 Open Source Matters, Inc. All rights reserved. * @license     GNU General Public License version 2 or later; see LICENSE.txt */defined('_JEXEC') or die;JHtml::addIncludePath(JPATH_COMPONENT . '/helpers');JHtml::_('behavior.caption');echo JLayoutHelper::render('joomla.content.categories_default', $this);echo $this->loadTemplate('items');?></div>
<?php/** * @package     Joomla.Plugin * @subpackage  Authentication.ldap * * @copyright   Copyright (C) 2005 - 2013 Open Source Matters, Inc. All rights reserved. * @license     GNU General Public License version 2 or later; see LICENSE.txt */defined('_JEXEC') or die;/** * LDAP Authentication Plugin * * @package     Joomla.Plugin * @subpackage  Authentication.ldap * @since       1.5 */class PlgAuthenticationLdap extends JPlugin{	/**	 * This method should handle any authentication and report back to the subject	 *	 * @access	public	 * @param   array  $credentials Array holding the user credentials	 * @param   array   $options	Array of extra options	 * @param   object	$response	Authentication response object	 * @return  object  boolean	 * @since 1.5	 */	public function onUserAuthenticate($credentials, $options, &$response)	{		$userdetails = null;		$success = 0;		$userdetails = array();		// For JLog		$response->type = 'LDAP';		// LDAP does not like Blank passwords (tries to Anon Bind which is bad)		if (empty($credentials['password']))		{			$response->status = JAuthentication::STATUS_FAILURE;			$response->error_message = JText::_('JGLOBAL_AUTH_PASS_BLANK');			return false;		}		// load plugin params info		$ldap_email		= $this->params->get('ldap_email');		$ldap_fullname	= $this->params->get('ldap_fullname');		$ldap_uid		= $this->params->get('ldap_uid');		$auth_method	= $this->params->get('auth_method');		$ldap = new JClientLdap($this->params);		if (!$ldap->connect())		{			$response->status = JAuthentication::STATUS_FAILURE;			$response->error_message = JText::_('JGLOBAL_AUTH_NO_CONNECT');			return;		}		switch($auth_method)		{			case 'search':			{				// Bind using Connect Username/password				// Force anon bind to mitigate misconfiguration like [#7119]				if (strlen($this->params->get('username')))				{					$bindtest = $ldap->bind();				}				else				{					$bindtest = $ldap->anonymous_bind();				}				if ($bindtest)				{					// Search for users DN					$binddata = $ldap->simple_search(str_replace("[search]", $credentials['username'], $this->params->get('search_string')));					if (isset($binddata[0]) && isset($binddata[0]['dn']))					{						// Verify Users Credentials						$success = $ldap->bind($binddata[0]['dn'], $credentials['password'], 1);						// Get users details						$userdetails = $binddata;					} else {						$response->status = JAuthentication::STATUS_FAILURE;						$response->error_message = JText::_('JGLOBAL_AUTH_USER_NOT_FOUND');					}				}				else				{					$response->status = JAuthentication::STATUS_FAILURE;					$response->error_message = JText::_('JGLOBAL_AUTH_NO_BIND');				}			}	break;			case 'bind':			{				// We just accept the result here				$success = $ldap->bind($credentials['username'], $credentials['password']);				if ($success)				{					$userdetails = $ldap->simple_search(str_replace("[search]", $credentials['username'], $this->params->get('search_string')));				} else {					$response->status = JAuthentication::STATUS_FAILURE;					$response->error_message = JText::_('JGLOBAL_AUTH_BIND_FAILED');				}			}	break;		}		if (!$success)		{			$response->status = JAuthentication::STATUS_FAILURE;			if (!strlen($response->error_message))			{				$response->error_message = JText::_('JGLOBAL_AUTH_INCORRECT');			}		}		else		{			// Grab some details from LDAP and return them			if (isset($userdetails[0][$ldap_uid][0]))			{				$response->username = $userdetails[0][$ldap_uid][0];			}			if (isset($userdetails[0][$ldap_email][0]))			{				$response->email = $userdetails[0][$ldap_email][0];			}			if (isset($userdetails[0][$ldap_fullname][0]))			{				$response->fullname = $userdetails[0][$ldap_fullname][0];			} else {				$response->fullname = $credentials['username'];			}			// Were good - So say so.			$response->status		= JAuthentication::STATUS_SUCCESS;			$response->error_message = '';		}		$ldap->close();	}}
<?php/** * @package     Joomla.Site * @subpackage  mod_languages * * @copyright   Copyright (C) 2005 - 2013 Open Source Matters, Inc. All rights reserved. * @license     GNU General Public License version 2 or later; see LICENSE.txt */defined('_JEXEC') or die;// Include the syndicate functions only oncerequire_once __DIR__ . '/helper.php';$headerText	= JString::trim($params->get('header_text'));$footerText	= JString::trim($params->get('footer_text'));$list = ModLanguagesHelper::getList($params);$moduleclass_sfx = htmlspecialchars($params->get('moduleclass_sfx'));require JModuleHelper::getLayoutPath('mod_languages', $params->get('layout', 'default'));
<?php/** * @package     Joomla.Administrator * @subpackage  Template.hathor * * @copyright   Copyright (C) 2005 - 2013 Open Source Matters, Inc. All rights reserved. * @license     GNU General Public License version 2 or later; see LICENSE.txt */defined('_JEXEC') or die;	$fieldSets = $this->form->getFieldsets('params');	foreach ($fieldSets as $name => $fieldSet) :		$label = !empty($fieldSet->label) ? $fieldSet->label : 'COM_MODULES_'.$name.'_FIELDSET_LABEL';		echo JHtml::_('sliders.panel', JText::_($label), $name.'-options');			if (isset($fieldSet->description) && trim($fieldSet->description)) :				echo '<p class="tip">'.$this->escape(JText::_($fieldSet->description)).'</p>';			endif;			?>		<fieldset class="panelform">		<legend class="element-invisible"><?php echo JText::_($label); ?></legend>		<?php $hidden_fields = ''; ?>		<ul class="adminformlist">			<?php foreach ($this->form->getFieldset($name) as $field) : ?>			<?php if (!$field->hidden) : ?>			<li>				<?php echo $field->label; ?>				<?php echo $field->input; ?>			</li>			<?php else : $hidden_fields .= $field->input; ?>			<?php endif; ?>			<?php endforeach; ?>		</ul>		<?php echo $hidden_fields; ?>		</fieldset>	<?php endforeach; ?>
<?php/** * @package     Joomla.Platform * @subpackage  Database * * @copyright   Copyright (C) 2005 - 2013 Open Source Matters, Inc. All rights reserved. * @license     GNU General Public License version 2 or later; see LICENSE */defined('JPATH_PLATFORM') or die;/** * Query Building Class. * * @package     Joomla.Platform * @subpackage  Database * @since       11.1 */class JDatabaseQueryMysql extends JDatabaseQueryMysqli{}
<?php/** * @package     Joomla.Site * @subpackage  mod_articles_news * * @copyright   Copyright (C) 2005 - 2013 Open Source Matters, Inc. All rights reserved. * @license     GNU General Public License version 2 or later; see LICENSE.txt */defined('_JEXEC') or die;$item_heading = $params->get('item_heading', 'h4');?><?php if ($params->get('item_title')) : ?>	<<?php echo $item_heading; ?> class="newsflash-title<?php echo $params->get('moduleclass_sfx'); ?>">	<?php if ($params->get('link_titles') && $item->link != '') : ?>		<a href="<?php echo $item->link;?>">			<?php echo $item->title;?></a>	<?php else : ?>		<?php echo $item->title; ?>	<?php endif; ?>	</<?php echo $item_heading; ?>><?php endif; ?><?php if (!$params->get('intro_only')) :	echo $item->afterDisplayTitle;endif; ?><?php echo $item->beforeDisplayContent; ?><?php echo $item->introtext; ?><?php if (isset($item->link) && $item->readmore != 0 && $params->get('readmore')) :	echo '<a class="readmore" href="'.$item->link.'">'.$item->linkText.'</a>';endif; ?>
<?php/** * @package     Joomla.Site * @subpackage  com_content * * @copyright   Copyright (C) 2005 - 2013 Open Source Matters, Inc. All rights reserved. * @license     GNU General Public License version 2 or later; see LICENSE.txt */defined('_JEXEC') or die;?><ol class="nav nav-tabs nav-stacked"><?php foreach ($this->link_items as &$item) : ?>	<li>		<a href="<?php echo JRoute::_(ContentHelperRoute::getArticleRoute($item->slug, $item->catslug)); ?>">			<?php echo $item->title; ?></a>	</li><?php endforeach; ?></ol>
<?php/** * @package     Joomla.Administrator * @subpackage  com_installer * @copyright   Copyright (C) 2005 - 2013 Open Source Matters, Inc. All rights reserved. * @license     GNU General Public License, see LICENSE.php */defined('_JEXEC') or die;/** * Languages Installer Controller * * @package     Joomla.Administrator * @subpackage  com_installer * @since       2.5.7 */class InstallerControllerLanguages extends JControllerLegacy{	/**	 * Finds new Languages.	 *	 * @return  void	 *	 * @since   2.5.7	 */	public function find()	{		// Purge the updates list		$model = $this->getModel('update');		$model->purge();		// Check for request forgeries		JSession::checkToken() or jexit(JText::_('JINVALID_TOKEN'));		// Get the caching duration		$component = JComponentHelper::getComponent('com_installer');		$params = $component->params;		$cache_timeout = $params->get('cachetimeout', 6, 'int');		$cache_timeout = 3600 * $cache_timeout;		// Find updates		$model	= $this->getModel('languages');		$model->findLanguages($cache_timeout);		$this->setRedirect(JRoute::_('index.php?option=com_installer&view=languages', false));	}	/**	 * Purge the updates list.	 *	 * @return  void	 *	 * @since   2.5.7	 */	public function purge()	{		// Check for request forgeries		JSession::checkToken() or jexit(JText::_('JINVALID_TOKEN'));		// Purge updates		$model = $this->getModel('update');		$model->purge();		$model->enableSites();		$this->setRedirect(JRoute::_('index.php?option=com_installer&view=languages', false), $model->_message);	}	/**	 * Install languages.	 *	 * @return  void	 *	 * @since   2.5.7	 */	public function install()	{		$model = $this->getModel('languages');		// Get array of selected languages		$lids = $this->input->get('cid', array(), 'array');		JArrayHelper::toInteger($lids, array());		if (!$lids)		{			// No languages have been selected			$app = JFactory::getApplication();			$app->enqueueMessage(JText::_('COM_INSTALLER_MSG_DISCOVER_NOEXTENSIONSELECTED'));		}		else		{			// Install selected languages			$model->install($lids);		}		$this->setRedirect(JRoute::_('index.php?option=com_installer&view=languages', false));	}}
<?php/** * @package     Joomla.Site * @subpackage  com_weblinks * * @copyright   Copyright (C) 2005 - 2013 Open Source Matters, Inc. All rights reserved. * @license     GNU General Public License version 2 or later; see LICENSE.txt */defined('_JEXEC') or die;require_once JPATH_COMPONENT.'/helpers/route.php';$controller	= JControllerLegacy::getInstance('Weblinks');$controller->execute(JFactory::getApplication()->input->get('task'));$controller->redirect();
<?php/** * @package     Joomla.Administrator * @subpackage  com_login * * @copyright   Copyright (C) 2005 - 2013 Open Source Matters, Inc. All rights reserved. * @license     GNU General Public License version 2 or later; see LICENSE.txt */defined('_JEXEC') or die;$input = JFactory::getApplication()->input;$task = $input->get('task');if ($task != 'login' && $task != 'logout'){	$input->set('task', '');	$task = '';}$controller = JControllerLegacy::getInstance('Login');$controller->execute($task);$controller->redirect();
<?php/** * @package     Joomla.Site * @subpackage  com_weblinks * * @copyright   Copyright (C) 2005 - 2013 Open Source Matters, Inc. All rights reserved. * @license     GNU General Public License version 2 or later; see LICENSE.txt */defined('_JEXEC') or die;$class = ' class="first"';if (count($this->children[$this->category->id]) > 0 && $this->maxLevel != 0) :?><ul><?php foreach ($this->children[$this->category->id] as $id => $child) : ?>	<?php	if ($this->params->get('show_empty_categories') || $child->numitems || count($child->getChildren())) :	if (!isset($this->children[$this->category->id][$id + 1]))	{		$class = ' class="last"';	}	?>	<li<?php echo $class; ?>>		<?php $class = ''; ?>			<span class="item-title"><a href="<?php echo JRoute::_(WeblinksHelperRoute::getCategoryRoute($child->id));?>">				<?php echo $this->escape($child->title); ?></a>			</span>			<?php if ($this->params->get('show_subcat_desc') == 1) :?>			<?php if ($child->description) : ?>				<div class="category-desc">					<?php echo JHtml::_('content.prepare', $child->description, '', 'com_weblinks.category'); ?>				</div>			<?php endif; ?>            <?php endif; ?>            <?php if ($this->params->get('show_cat_num_links') == 1) :?>			<dl class="weblink-count"><dt>				<?php echo JText::_('COM_WEBLINKS_NUM'); ?></dt>				<dd><?php echo $child->numitems; ?></dd>			</dl>		<?php endif; ?>			<?php if (count($child->getChildren()) > 0 ) :				$this->children[$child->id] = $child->getChildren();				$this->category = $child;				$this->maxLevel--;				echo $this->loadTemplate('children');				$this->category = $child->getParent();				$this->maxLevel++;			endif; ?>		</li>	<?php endif; ?>	<?php endforeach; ?>	</ul><?php endif;
<?php/** * @package     Joomla.Platform * @subpackage  Object * * @copyright   Copyright (C) 2005 - 2013 Open Source Matters, Inc. All rights reserved. * @license     GNU General Public License version 2 or later; see LICENSE */defined('JPATH_PLATFORM') or die;/** * Joomla Platform Object Class * * This class allows for simple but smart objects with get and set methods * and an internal error handler. * * @package     Joomla.Platform * @subpackage  Object * @since       11.1 */class JObject{	/**	 * An array of error messages or Exception objects.	 *	 * @var    array	 * @since  11.1	 * @see     JError	 * @deprecated 12.3  JError has been deprecated	 */	protected $_errors = array();	/**	 * Class constructor, overridden in descendant classes.	 *	 * @param   mixed  $properties  Either and associative array or another	 *                              object to set the initial properties of the object.	 *	 * @since   11.1	 */	public function __construct($properties = null)	{		if ($properties !== null)		{			$this->setProperties($properties);		}	}	/**	 * Magic method to convert the object to a string gracefully.	 *	 * @return  string  The classname.	 *	 * @since   11.1	 * @deprecated 12.3  Classes should provide their own __toString() implementation.	 */	public function __toString()	{		return get_class($this);	}	/**	 * Sets a default value if not alreay assigned	 *	 * @param   string  $property  The name of the property.	 * @param   mixed   $default   The default value.	 *	 * @return  mixed	 *	 * @since   11.1	 */	public function def($property, $default = null)	{		$value = $this->get($property, $default);		return $this->set($property, $value);	}	/**	 * Returns a property of the object or the default value if the property is not set.	 *	 * @param   string  $property  The name of the property.	 * @param   mixed   $default   The default value.	 *	 * @return  mixed    The value of the property.	 *	 * @since   11.1	 *	 * @see     getProperties()	 */	public function get($property, $default = null)	{		if (isset($this->$property))		{			return $this->$property;		}		return $default;	}	/**	 * Returns an associative array of object properties.	 *	 * @param   boolean  $public  If true, returns only the public properties.	 *	 * @return  array	 *	 * @since   11.1	 *	 * @see     get()	 */	public function getProperties($public = true)	{		$vars = get_object_vars($this);		if ($public)		{			foreach ($vars as $key => $value)			{				if ('_' == substr($key, 0, 1))				{					unset($vars[$key]);				}			}		}		return $vars;	}	/**	 * Get the most recent error message.	 *	 * @param   integer  $i         Option error index.	 * @param   boolean  $toString  Indicates if JError objects should return their error message.	 *	 * @return  string   Error message	 *	 * @since   11.1	 * @see     JError	 * @deprecated 12.3  JError has been deprecated	 */	public function getError($i = null, $toString = true)	{		// Find the error		if ($i === null)		{			// Default, return the last message			$error = end($this->_errors);		}		elseif (!array_key_exists($i, $this->_errors))		{			// If $i has been specified but does not exist, return false			return false;		}		else		{			$error = $this->_errors[$i];		}		// Check if only the string is requested		if ($error instanceof Exception && $toString)		{			return (string) $error;		}		return $error;	}	/**	 * Return all errors, if any.	 *	 * @return  array  Array of error messages or JErrors.	 *	 * @since   11.1	 * @see     JError	 * @deprecated 12.3  JError has been deprecated	 */	public function getErrors()	{		return $this->_errors;	}	/**	 * Modifies a property of the object, creating it if it does not already exist.	 *	 * @param   string  $property  The name of the property.	 * @param   mixed   $value     The value of the property to set.	 *	 * @return  mixed  Previous value of the property.	 *	 * @since   11.1	 */	public function set($property, $value = null)	{		$previous = isset($this->$property) ? $this->$property : null;		$this->$property = $value;		return $previous;	}	/**	 * Set the object properties based on a named array/hash.	 *	 * @param   mixed  $properties  Either an associative array or another object.	 *	 * @return  boolean	 *	 * @since   11.1	 *	 * @see     set()	 */	public function setProperties($properties)	{		if (is_array($properties) || is_object($properties))		{			foreach ((array) $properties as $k => $v)			{				// Use the set function which might be overridden.				$this->set($k, $v);			}			return true;		}		return false;	}	/**	 * Add an error message.	 *	 * @param   string  $error  Error message.	 *	 * @return  void	 *	 * @since   11.1	 * @see     JError	 * @deprecated 12.3  JError has been deprecated	 */	public function setError($error)	{		array_push($this->_errors, $error);	}}
<?php/** * @package     Joomla.Site * @subpackage  com_contact * * @copyright   Copyright (C) 2005 - 2013 Open Source Matters, Inc. All rights reserved. * @license     GNU General Public License version 2 or later; see LICENSE.txt */defined('_JEXEC') or die;JHtml::_('behavior.framework');$listOrder	= $this->escape($this->state->get('list.ordering'));$listDirn	= $this->escape($this->state->get('list.direction'));?><?php if (empty($this->items)) : ?>	<p> <?php echo JText::_('COM_CONTACT_NO_ARTICLES'); ?> </p><?php else : ?><form action="<?php echo htmlspecialchars(JUri::getInstance()->toString()); ?>" method="post" name="adminForm" id="adminForm"><?php if ($this->params->get('show_pagination_limit')) : ?>	<fieldset class="filters">	<legend class="hidelabeltxt"><?php echo JText::_('JGLOBAL_FILTER_LABEL'); ?></legend>		<div class="display-limit">			<?php echo JText::_('JGLOBAL_DISPLAY_NUM'); ?>&#160;			<?php echo $this->pagination->getLimitBox(); ?>		</div>	</fieldset><?php endif; ?>	<table class="category">		<?php if ($this->params->get('show_headings')) : ?>		<thead><tr>			<th class="item-title">				<?php echo JHtml::_('grid.sort', 'COM_CONTACT_CONTACT_EMAIL_NAME_LABEL', 'a.name', $listDirn, $listOrder); ?>			</th>			<?php if ($this->params->get('show_position_headings')) : ?>			<th class="item-position">				<?php echo JHtml::_('grid.sort', 'COM_CONTACT_POSITION', 'a.con_position', $listDirn, $listOrder); ?>			</th>			<?php endif; ?>			<?php if ($this->params->get('show_email_headings')) : ?>			<th class="item-email">				<?php echo JText::_('JGLOBAL_EMAIL'); ?>			</th>			<?php endif; ?>			<?php if ($this->params->get('show_telephone_headings')) : ?>			<th class="item-phone">				<?php echo JText::_('COM_CONTACT_TELEPHONE'); ?>			</th>			<?php endif; ?>			<?php if ($this->params->get('show_mobile_headings')) : ?>			<th class="item-phone">				<?php echo JText::_('COM_CONTACT_MOBILE'); ?>			</th>			<?php endif; ?>			<?php if ($this->params->get('show_fax_headings')) : ?>			<th class="item-phone">				<?php echo JText::_('COM_CONTACT_FAX'); ?>			</th>			<?php endif; ?>			<?php if ($this->params->get('show_suburb_headings')) : ?>			<th class="item-suburb">				<?php echo JHtml::_('grid.sort', 'COM_CONTACT_SUBURB', 'a.suburb', $listDirn, $listOrder); ?>			</th>			<?php endif; ?>			<?php if ($this->params->get('show_state_headings')) : ?>			<th class="item-state">				<?php echo JHtml::_('grid.sort', 'COM_CONTACT_STATE', 'a.state', $listDirn, $listOrder); ?>			</th>			<?php endif; ?>			<?php if ($this->params->get('show_country_headings')) : ?>			<th class="item-state">				<?php echo JHtml::_('grid.sort', 'COM_CONTACT_COUNTRY', 'a.country', $listDirn, $listOrder); ?>			</th>			<?php endif; ?>			</tr>		</thead>		<?php endif; ?>		<tbody>			<?php foreach ($this->items as $i => $item) : ?>				<?php if ($this->items[$i]->published == 0) : ?>					<tr class="system-unpublished cat-list-row<?php echo $i % 2; ?>">				<?php else: ?>					<tr class="cat-list-row<?php echo $i % 2; ?>" >				<?php endif; ?>					<td class="item-title">						<a href="<?php echo JRoute::_(ContactHelperRoute::getContactRoute($item->slug, $item->catid)); ?>">							<?php echo $item->name; ?></a>					</td>					<?php if ($this->params->get('show_position_headings')) : ?>						<td class="item-position">							<?php echo $item->con_position; ?>						</td>					<?php endif; ?>					<?php if ($this->params->get('show_email_headings')) : ?>						<td class="item-email">							<?php echo $item->email_to; ?>						</td>					<?php endif; ?>					<?php if ($this->params->get('show_telephone_headings')) : ?>						<td class="item-phone">							<?php echo $item->telephone; ?>						</td>					<?php endif; ?>					<?php if ($this->params->get('show_mobile_headings')) : ?>						<td class="item-phone">							<?php echo $item->mobile; ?>						</td>					<?php endif; ?>					<?php if ($this->params->get('show_fax_headings')) : ?>					<td class="item-phone">						<?php echo $item->fax; ?>					</td>					<?php endif; ?>					<?php if ($this->params->get('show_suburb_headings')) : ?>					<td class="item-suburb">						<?php echo $item->suburb; ?>					</td>					<?php endif; ?>					<?php if ($this->params->get('show_state_headings')) : ?>					<td class="item-state">						<?php echo $item->state; ?>					</td>					<?php endif; ?>					<?php if ($this->params->get('show_country_headings')) : ?>					<td class="item-state">						<?php echo $item->country; ?>					</td>					<?php endif; ?>				</tr>			<?php endforeach; ?>		</tbody>	</table>	<?php if ($this->params->get('show_pagination')) : ?>	<div class="pagination">		<?php if ($this->params->def('show_pagination_results', 1)) : ?>		<p class="counter">			<?php echo $this->pagination->getPagesCounter(); ?>		</p>		<?php endif; ?>		<?php echo $this->pagination->getPagesLinks(); ?>	</div>	<?php endif; ?>	<div>		<input type="hidden" name="filter_order" value="<?php echo $listOrder; ?>" />		<input type="hidden" name="filter_order_Dir" value="<?php echo $listDirn; ?>" />	</div></form><?php endif; ?>
<?php/** * @package     Joomla.Libraries * @subpackage  HTML * * @copyright   Copyright (C) 2005 - 2013 Open Source Matters, Inc. All rights reserved. * @license     GNU General Public License version 2 or later; see LICENSE.txt */defined('JPATH_BASE') or die;/** * Utility class for icons. * * @package     Joomla.Libraries * @subpackage  HTML * @since       2.5 */abstract class JHtmlIcons{	/**	 * Method to generate html code for a list of buttons	 *	 * @param   array  $buttons  Array of buttons	 *	 * @return  string	 *	 * @since   2.5	 */	public static function buttons($buttons)	{		$html = array();		foreach ($buttons as $button)		{			$html[] = JHtml::_('icons.button', $button);		}		return implode($html);	}	/**	 * Method to generate html code for a list of buttons	 *	 * @param   array  $button  Button properties	 *	 * @return  string	 *	 * @since   2.5	 */	public static function button($button)	{		if (isset($button['access']))		{			if (is_bool($button['access']))			{				if ($button['access'] == false)				{					return '';				}			}			else			{				// Get the user object to verify permissions				$user = JFactory::getUser();				// Take each pair of permission, context values.				for ($i = 0, $n = count($button['access']); $i < $n; $i += 2)				{					if (!$user->authorise($button['access'][$i], $button['access'][$i + 1]))					{						return '';					}				}			}		}		// Instantiate a new JLayoutFile instance and render the layout		$layout = new JLayoutFile('joomla.quickicons.icon');		return $layout->render($button);	}}
<?php/** * @package     Joomla.Site * @subpackage  mod_articles_archive * * @copyright   Copyright (C) 2005 - 2013 Open Source Matters, Inc. All rights reserved. * @license     GNU General Public License version 2 or later; see LICENSE.txt */defined('_JEXEC') or die;// Include the syndicate functions only oncerequire_once __DIR__ . '/helper.php';$params->def('count', 10);$moduleclass_sfx = htmlspecialchars($params->get('moduleclass_sfx'));$list = ModArchiveHelper::getList($params);require JModuleHelper::getLayoutPath('mod_articles_archive', $params->get('layout', 'default'));
<?php/** * @package     Joomla.Administrator * @subpackage  com_banners * * @copyright   Copyright (C) 2005 - 2013 Open Source Matters, Inc. All rights reserved. * @license     GNU General Public License version 2 or later; see LICENSE.txt */defined('_JEXEC') or die;/** * Tracks list controller class. * * @package     Joomla.Administrator * @subpackage  com_banners * @since       1.6 */class BannersControllerTracks extends JControllerLegacy{	/**	 * @var		string	The context for persistent state.	 * @since   1.6	 */	protected $context = 'com_banners.tracks';	/**	 * Proxy for getModel.	 *	 * @param   string	$name	The name of the model.	 * @param   string	$prefix	The prefix for the model class name.	 *	 * @return  JModel	 * @since   1.6	 */	public function getModel($name = 'Tracks', $prefix = 'BannersModel', $config = array())	{		$model = parent::getModel($name, $prefix, array('ignore_request' => true));		return $model;	}	/**	 * Display method for the raw track data.	 *	 * @param   boolean			If true, the view output will be cached	 * @param   array  An array of safe url parameters and their variable types, for valid values see {@link JFilterInput::clean()}.	 *	 * @return  JController		This object to support chaining.	 * @since   1.5	 * @todo	This should be done as a view, not here!	 */	public function display($cachable = false, $urlparams = false)	{		// Get the document object.		$document	= JFactory::getDocument();		$vName		= 'tracks';		$vFormat	= 'raw';		// Get and render the view.		if ($view = $this->getView($vName, $vFormat))		{			// Get the model for the view.			$model = $this->getModel($vName);			// Load the filter state.			$app = JFactory::getApplication();			$type = $app->getUserState($this->context.'.filter.type');			$model->setState('filter.type', $type);			$begin = $app->getUserState($this->context.'.filter.begin');			$model->setState('filter.begin', $begin);			$end = $app->getUserState($this->context.'.filter.end');			$model->setState('filter.end', $end);			$categoryId = $app->getUserState($this->context.'.filter.category_id');			$model->setState('filter.category_id', $categoryId);			$clientId = $app->getUserState($this->context.'.filter.client_id');			$model->setState('filter.client_id', $clientId);			$model->setState('list.limit', 0);			$model->setState('list.start', 0);			$form = JRequest::getVar('jform');			$model->setState('basename', $form['basename']);			$model->setState('compressed', $form['compressed']);			$config = JFactory::getConfig();			$cookie_domain = $config->get('cookie_domain', '');			$cookie_path = $config->get('cookie_path', '/');			setcookie(JApplication::getHash($this->context.'.basename'), $form['basename'], time() + 365 * 86400, $cookie_path, $cookie_domain);			setcookie(JApplication::getHash($this->context.'.compressed'), $form['compressed'], time() + 365 * 86400, $cookie_path, $cookie_domain);			// Push the model into the view (as default).			$view->setModel($model, true);			// Push document object into the view.			$view->document = $document;			$view->display();		}	}}
<?php/** * @package     Joomla.Site * @subpackage  com_contact * * @copyright   Copyright (C) 2005 - 2013 Open Source Matters, Inc. All rights reserved. * @license     GNU General Public License version 2 or later; see LICENSE.txt */defined('_JEXEC') or die;$class = ' class="first"';if (count($this->items[$this->parent->id]) > 0 && $this->maxLevelcat != 0) :?><ul><?php foreach ($this->items[$this->parent->id] as $id => $item) : ?>	<?php	if ($this->params->get('show_empty_categories_cat') || $item->numitems || count($item->getChildren())) :	if (!isset($this->items[$this->parent->id][$id + 1]))	{		$class = ' class="last"';	}	?>	<li<?php echo $class; ?>>	<?php $class = ''; ?>		<span class="item-title"><a href="<?php echo JRoute::_(ContactHelperRoute::getCategoryRoute($item->id));?>">			<?php echo $this->escape($item->title); ?></a>		</span>		<?php if ($this->params->get('show_subcat_desc_cat') == 1) :?>		<?php if ($item->description) : ?>			<div class="category-desc">				<?php echo JHtml::_('content.prepare', $item->description, '', 'com_contact.categories'); ?>			</div>		<?php endif; ?>        <?php endif; ?>		<?php if ($this->params->get('show_cat_items_cat') == 1) :?>			<dl><dt>				<?php echo JText::_('COM_CONTACT_COUNT'); ?></dt>				<dd><?php echo $item->numitems; ?></dd>			</dl>		<?php endif; ?>		<?php if (count($item->getChildren()) > 0) :			$this->items[$item->id] = $item->getChildren();			$this->parent = $item;			$this->maxLevelcat--;			echo $this->loadTemplate('items');			$this->parent = $item->getParent();			$this->maxLevelcat++;		endif; ?>	</li>	<?php endif; ?><?php endforeach; ?></ul><?php endif; ?>
<?php/** * @package     Joomla.Administrator * @subpackage  com_installer * * @copyright   Copyright (C) 2005 - 2013 Open Source Matters, Inc. All rights reserved. * @license     GNU General Public License version 2 or later; see LICENSE.txt */defined('_JEXEC') or die;?><div id="installer-warnings">	<form action="<?php echo JRoute::_('index.php?option=com_installer&view=warnings');?>" method="post" name="adminForm" id="adminForm">	<?php if (!empty( $this->sidebar)) : ?>		<div id="j-sidebar-container" class="span2">			<?php echo $this->sidebar; ?>		</div>		<div id="j-main-container" class="span10">	<?php else : ?>		<div id="j-main-container">	<?php endif;?>	<?php		if (!count($this->messages))		{			echo '<div class="alert alert-info"><a class="close" data-dismiss="alert" href="#">&times;</a>'. JText::_('COM_INSTALLER_MSG_WARNINGS_NONE').'</div>';		}		else		{			echo JHtml::_('sliders.start', 'warning-sliders', array('useCookie' => 1));			foreach($this->messages as $message)			{				echo JHtml::_('sliders.panel', $message['message'], str_replace(' ', '', $message['message']));				echo '<div style="padding: 5px;" >'.$message['description'].'</div>';			}			echo JHtml::_('sliders.panel', JText::_('COM_INSTALLER_MSG_WARNINGFURTHERINFO'), 'furtherinfo-pane');			echo '<div style="padding: 5px;" >'. JText::_('COM_INSTALLER_MSG_WARNINGFURTHERINFODESC') .'</div>';			echo JHtml::_('sliders.end');		}		?>			<div class="clr"> </div>			<div>				<input type="hidden" name="boxchecked" value="0" />				<?php echo JHtml::_('form.token'); ?>			</div>		</div>	</form></div>
<?php/** * @package     Joomla.Platform * @subpackage  GitHub * * @copyright   Copyright (C) 2005 - 2013 Open Source Matters, Inc. All rights reserved. * @license     GNU General Public License version 2 or later; see LICENSE */defined('JPATH_PLATFORM') or die;/** * GitHub API References class for the Joomla Platform. * * @package     Joomla.Platform * @subpackage  GitHub * @since       11.3 */class JGithubRefs extends JGithubObject{	/**	 * Method to create an issue.	 *	 * @param   string  $user  The name of the owner of the GitHub repository.	 * @param   string  $repo  The name of the GitHub repository.	 * @param   string  $ref   The name of the fully qualified reference.	 * @param   string  $sha   The SHA1 value to set this reference to.	 *	 * @return  object	 *	 * @since   11.3	 */	public function create($user, $repo, $ref, $sha)	{		// Build the request path.		$path = '/repos/' . $user . '/' . $repo . '/git/refs';		// Build the request data.		$data = json_encode(			array(				'ref' => $ref,				'sha' => $sha			)		);		// Send the request.		$response = $this->client->post($this->fetchUrl($path), $data);		// Validate the response code.		if ($response->code != 201)		{			// Decode the error response and throw an exception.			$error = json_decode($response->body);			throw new DomainException($error->message, $response->code);		}		return json_decode($response->body);	}	/**	 * Method to update a reference.	 *	 * @param   string  $user   The name of the owner of the GitHub repository.	 * @param   string  $repo   The name of the GitHub repository.	 * @param   string  $ref    The reference to update.	 * @param   string  $sha    The SHA1 value to set the reference to.	 * @param   string  $force  Whether the update should be forced. Default to false.	 *	 * @return  object	 *	 * @since   11.3	 */	public function edit($user, $repo, $ref, $sha, $force = false)	{		// Build the request path.		$path = '/repos/' . $user . '/' . $repo . '/git/refs/' . $ref;		// Craete the data object.		$data = new stdClass;		// If a title is set add it to the data object.		if ($force)		{			$data->force = true;		}		$data->sha = $sha;		// Encode the request data.		$data = json_encode($data);		// Send the request.		$response = $this->client->patch($this->fetchUrl($path), $data);		// Validate the response code.		if ($response->code != 200)		{			// Decode the error response and throw an exception.			$error = json_decode($response->body);			throw new DomainException($error->message, $response->code);		}		return json_decode($response->body);	}	/**	 * Method to get a reference.	 *	 * @param   string  $user  The name of the owner of the GitHub repository.	 * @param   string  $repo  The name of the GitHub repository.	 * @param   string  $ref   The reference to get.	 *	 * @return  object	 *	 * @since   11.3	 */	public function get($user, $repo, $ref)	{		// Build the request path.		$path = '/repos/' . $user . '/' . $repo . '/git/refs/' . $ref;		// Send the request.		$response = $this->client->get($this->fetchUrl($path));		// Validate the response code.		if ($response->code != 200)		{			// Decode the error response and throw an exception.			$error = json_decode($response->body);			throw new DomainException($error->message, $response->code);		}		return json_decode($response->body);	}	/**	 * Method to list references for a repository.	 *	 * @param   string   $user       The name of the owner of the GitHub repository.	 * @param   string   $repo       The name of the GitHub repository.	 * @param   string   $namespace  Optional sub-namespace to limit the returned references.	 * @param   integer  $page       Page to request	 * @param   integer  $limit      Number of results to return per page	 *	 * @return  array	 *	 * @since   11.3	 */	public function getList($user, $repo, $namespace = '', $page = 0, $limit = 0)	{		// Build the request path.		$path = '/repos/' . $user . '/' . $repo . '/git/refs' . $namespace;		// Send the request.		$response = $this->client->get($this->fetchUrl($path, $page, $limit));		// Validate the response code.		if ($response->code != 200)		{			// Decode the error response and throw an exception.			$error = json_decode($response->body);			throw new DomainException($error->message, $response->code);		}		return json_decode($response->body);	}}
<?php/** * @package     Joomla.Platform * @subpackage  Environment * * @copyright   Copyright (C) 2005 - 2013 Open Source Matters, Inc. All rights reserved. * @license     GNU General Public License version 2 or later; see LICENSE */defined('JPATH_PLATFORM') or die;/** * JResponse Class. * * This class serves to provide the Joomla Platform with a common interface to access * response variables.  This includes header and body. * * @package     Joomla.Platform * @subpackage  Environment * @since       11.1 */class JResponse{	/**	 * @var    array  Body	 * @since  11.1	 */	protected static $body = array();	/**	 * @var    boolean  Cachable	 * @since  11.1	 */	protected static $cachable = false;	/**	 * @var    array  Headers	 * @since  11.1	 */	protected static $headers = array();	/**	 * Set/get cachable state for the response.	 *	 * If $allow is set, sets the cachable state of the response.  Always returns current state.	 *	 * @param   boolean  $allow  True to allow browser caching.	 *	 * @return  boolean  True if browser caching should be allowed	 *	 * @since   11.1	 */	public static function allowCache($allow = null)	{		if (!is_null($allow))		{			self::$cachable = (bool) $allow;		}		return self::$cachable;	}	/**	 * Set a header.	 *	 * If $replace is true, replaces any headers already defined with that $name.	 *	 * @param   string   $name     The name of the header to set.	 * @param   string   $value    The value of the header to set.	 * @param   boolean  $replace  True to replace any existing headers by name.	 *	 * @return  void	 *	 * @since   11.1	 */	public static function setHeader($name, $value, $replace = false)	{		$name = (string) $name;		$value = (string) $value;		if ($replace)		{			foreach (self::$headers as $key => $header)			{				if ($name == $header['name'])				{					unset(self::$headers[$key]);				}			}		}		self::$headers[] = array('name' => $name, 'value' => $value);	}	/**	 * Return array of headers.	 *	 * @return  array	 *	 * @since   11.1	 */	public static function getHeaders()	{		return self::$headers;	}	/**	 * Clear headers.	 *	 * @return  void	 *	 * @since   11.1	 */	public static function clearHeaders()	{		self::$headers = array();	}	/**	 * Send all headers.	 *	 * @return  void	 *	 * @since   11.1	 */	public static function sendHeaders()	{		if (!headers_sent())		{			foreach (self::$headers as $header)			{				if ('status' == strtolower($header['name']))				{					// 'status' headers indicate an HTTP status, and need to be handled slightly differently					header(ucfirst(strtolower($header['name'])) . ': ' . $header['value'], null, (int) $header['value']);				}				else				{					header($header['name'] . ': ' . $header['value'], false);				}			}		}	}	/**	 * Set body content.	 *	 * If body content already defined, this will replace it.	 *	 * @param   string  $content  The content to set to the response body.	 *	 * @return  void	 *	 * @since   11.1	 */	public static function setBody($content)	{		self::$body = array((string) $content);	}	/**	 * Prepend content to the body content	 *	 * @param   string  $content  The content to prepend to the response body.	 *	 * @return  void	 *	 * @since   11.1	 */	public static function prependBody($content)	{		array_unshift(self::$body, (string) $content);	}	/**	 * Append content to the body content	 *	 * @param   string  $content  The content to append to the response body.	 *	 * @return  void	 *	 * @since   11.1	 */	public static function appendBody($content)	{		array_push(self::$body, (string) $content);	}	/**	 * Return the body content	 *	 * @param   boolean  $toArray  Whether or not to return the body content as an array of strings or as a single string; defaults to false.	 *	 * @return  string  array	 *	 * @since   11.1	 */	public static function getBody($toArray = false)	{		if ($toArray)		{			return self::$body;		}		ob_start();		foreach (self::$body as $content)		{			echo $content;		}		return ob_get_clean();	}	/**	 * Sends all headers prior to returning the string	 *	 * @param   boolean  $compress  If true, compress the data	 *	 * @return  string	 *	 * @since   11.1	 */	public static function toString($compress = false)	{		$data = self::getBody();		// Don't compress something if the server is going to do it anyway. Waste of time.		if ($compress && !ini_get('zlib.output_compression') && ini_get('output_handler') != 'ob_gzhandler')		{			$data = self::compress($data);		}		if (self::allowCache() === false)		{			self::setHeader('Cache-Control', 'no-cache', false);			// HTTP 1.0			self::setHeader('Pragma', 'no-cache');		}		self::sendHeaders();		return $data;	}	/**	 * Compress the data	 *	 * Checks the accept encoding of the browser and compresses the data before	 * sending it to the client.	 *	 * @param   string  $data  Content to compress for output.	 *	 * @return  string  compressed data	 *	 * @note    Replaces _compress method in 11.1	 * @since   11.1	 */	protected static function compress($data)	{		$encoding = self::clientEncoding();		if (!$encoding)		{			return $data;		}		if (!extension_loaded('zlib') || ini_get('zlib.output_compression'))		{			return $data;		}		if (headers_sent())		{			return $data;		}		if (connection_status() !== 0)		{			return $data;		}		// Ideal level		$level = 4;		/*		$size		= strlen($data);		$crc		= crc32($data);		$gzdata		= "\x1f\x8b\x08\x00\x00\x00\x00\x00";		$gzdata		.= gzcompress($data, $level);		$gzdata	= substr($gzdata, 0, strlen($gzdata) - 4);		$gzdata	.= pack("V",$crc) . pack("V", $size);		*/		$gzdata = gzencode($data, $level);		self::setHeader('Content-Encoding', $encoding);		self::setHeader('X-Content-Encoded-By', 'Joomla! 1.6');		return $gzdata;	}	/**	 * Check, whether client supports compressed data	 *	 * @return  boolean	 *	 * @since   11.1	 * @note    Replaces _clientEncoding method from 11.1	 */	protected static function clientEncoding()	{		if (!isset($_SERVER['HTTP_ACCEPT_ENCODING']))		{			return false;		}		$encoding = false;		if (false !== strpos($_SERVER['HTTP_ACCEPT_ENCODING'], 'gzip'))		{			$encoding = 'gzip';		}		if (false !== strpos($_SERVER['HTTP_ACCEPT_ENCODING'], 'x-gzip'))		{			$encoding = 'x-gzip';		}		return $encoding;	}}
<?php/*** PCRE Regular expressions for UTF-8. Note this file is not actually used by* the rest of the library but these regular expressions can be useful to have* available.* @version $Id$* @see http://www.w3.org/International/questions/qa-forms-utf-8* @package utf8* @subpackage patterns*///--------------------------------------------------------------------/*** PCRE Pattern to check a UTF-8 string is valid* Comes from W3 FAQ: Multilingual Forms* Note: modified to include full ASCII range including control chars* @see http://www.w3.org/International/questions/qa-forms-utf-8* @package utf8* @subpackage patterns*/$UTF8_VALID = '^('.    '[\x00-\x7F]'.                          # ASCII (including control chars)    '|[\xC2-\xDF][\x80-\xBF]'.              # non-overlong 2-byte    '|\xE0[\xA0-\xBF][\x80-\xBF]'.          # excluding overlongs    '|[\xE1-\xEC\xEE\xEF][\x80-\xBF]{2}'.   # straight 3-byte    '|\xED[\x80-\x9F][\x80-\xBF]'.          # excluding surrogates    '|\xF0[\x90-\xBF][\x80-\xBF]{2}'.       # planes 1-3    '|[\xF1-\xF3][\x80-\xBF]{3}'.           # planes 4-15    '|\xF4[\x80-\x8F][\x80-\xBF]{2}'.       # plane 16    ')*$';//--------------------------------------------------------------------/*** PCRE Pattern to match single UTF-8 characters* Comes from W3 FAQ: Multilingual Forms* Note: modified to include full ASCII range including control chars* @see http://www.w3.org/International/questions/qa-forms-utf-8* @package utf8* @subpackage patterns*/$UTF8_MATCH =    '([\x00-\x7F])'.                          # ASCII (including control chars)    '|([\xC2-\xDF][\x80-\xBF])'.              # non-overlong 2-byte    '|(\xE0[\xA0-\xBF][\x80-\xBF])'.          # excluding overlongs    '|([\xE1-\xEC\xEE\xEF][\x80-\xBF]{2})'.   # straight 3-byte    '|(\xED[\x80-\x9F][\x80-\xBF])'.          # excluding surrogates    '|(\xF0[\x90-\xBF][\x80-\xBF]{2})'.       # planes 1-3    '|([\xF1-\xF3][\x80-\xBF]{3})'.           # planes 4-15    '|(\xF4[\x80-\x8F][\x80-\xBF]{2})';       # plane 16//--------------------------------------------------------------------/*** PCRE Pattern to locate bad bytes in a UTF-8 string* Comes from W3 FAQ: Multilingual Forms* Note: modified to include full ASCII range including control chars* @see http://www.w3.org/International/questions/qa-forms-utf-8* @package utf8* @subpackage patterns*/$UTF8_BAD =    '([\x00-\x7F]'.                          # ASCII (including control chars)    '|[\xC2-\xDF][\x80-\xBF]'.               # non-overlong 2-byte    '|\xE0[\xA0-\xBF][\x80-\xBF]'.           # excluding overlongs    '|[\xE1-\xEC\xEE\xEF][\x80-\xBF]{2}'.    # straight 3-byte    '|\xED[\x80-\x9F][\x80-\xBF]'.           # excluding surrogates    '|\xF0[\x90-\xBF][\x80-\xBF]{2}'.        # planes 1-3    '|[\xF1-\xF3][\x80-\xBF]{3}'.            # planes 4-15    '|\xF4[\x80-\x8F][\x80-\xBF]{2}'.        # plane 16    '|(.{1}))';                              # invalid byte
<?php/** * @package     Joomla.Site * @subpackage  com_finder * * @copyright   Copyright (C) 2005 - 2013 Open Source Matters, Inc. All rights reserved. * @license     GNU General Public License version 2 or later; see LICENSE */defined('_JEXEC') or die;/** * Query HTML behavior class for Finder. * * @package     Joomla.Site * @subpackage  com_finder * @since       2.5 */abstract class JHtmlQuery{	/**	 * Method to get the explained (human-readable) search query.	 *	 * @param   FinderIndexerQuery  $query  A FinderIndexerQuery object to explain.	 *	 * @return  mixed  String if there is data to explain, null otherwise.	 *	 * @since   2.5	 */	public static function explained(FinderIndexerQuery $query)	{		$parts = array();		// Process the required tokens.		foreach ($query->included as $token)		{			if ($token->required && (!isset($token->derived) || $token->derived == false))			{				$parts[] = '<span class="query-required">' . JText::sprintf('COM_FINDER_QUERY_TOKEN_REQUIRED', $token->term) . '</span>';			}		}		// Process the optional tokens.		foreach ($query->included as $token)		{			if (!$token->required && (!isset($token->derived) || $token->derived == false))			{				$parts[] = '<span class="query-optional">' . JText::sprintf('COM_FINDER_QUERY_TOKEN_OPTIONAL', $token->term) . '</span>';			}		}		// Process the excluded tokens.		foreach ($query->excluded as $token)		{			if (!isset($token->derived) || $token->derived == false)			{				$parts[] = '<span class="query-excluded">' . JText::sprintf('COM_FINDER_QUERY_TOKEN_EXCLUDED', $token->term) . '</span>';			}		}		// Process the start date.		if ($query->date1)		{			$date = JFactory::getDate($query->date1)->format(JText::_('DATE_FORMAT_LC'));			$parts[] = '<span class="query-start-date">' . JText::sprintf('COM_FINDER_QUERY_START_DATE', $query->when1, $date) . '</span>';		}		// Process the end date.		if ($query->date2)		{			$date = JFactory::getDate($query->date2)->format(JText::_('DATE_FORMAT_LC'));			$parts[] = '<span class="query-end-date">' . JText::sprintf('COM_FINDER_QUERY_END_DATE', $query->when2, $date) . '</span>';		}		// Process the taxonomy filters.		if (!empty($query->filters))		{			// Get the filters in the request.			$t = JFactory::getApplication()->input->request->get('t', array(), 'array');			// Process the taxonomy branches.			foreach ($query->filters as $branch => $nodes)			{				// Process the taxonomy nodes.				$lang = JFactory::getLanguage();				foreach ($nodes as $title => $id)				{					// Translate the title for Types					$key = FinderHelperLanguage::branchPlural($title);					if ($lang->hasKey($key))					{						$title = JText::_($key);					}					// Don't include the node if it is not in the request.					if (!in_array($id, $t))					{						continue;					}					// Add the node to the explanation.					$parts[] = '<span class="query-taxonomy">' . JText::sprintf('COM_FINDER_QUERY_TAXONOMY_NODE', $title, JText::_(FinderHelperLanguage::branchSingular($branch))) . '</span>';				}			}		}		// Build the interpreted query.		return count($parts) ? JText::sprintf('COM_FINDER_QUERY_TOKEN_INTERPRETED', implode(JText::_('COM_FINDER_QUERY_TOKEN_GLUE'), $parts)) : null;	}	/**	 * Method to get the suggested search query.	 *	 * @param   FinderIndexerQuery  $query  A FinderIndexerQuery object.	 *	 * @return  mixed  String if there is a suggestion, false otherwise.	 *	 * @since   2.5	 */	public static function suggested(FinderIndexerQuery $query)	{		$suggested = false;		// Check if the query input is empty.		if (empty($query->input))		{			return $suggested;		}		// Check if there were any ignored or included keywords.		if (count($query->ignored) || count($query->included))		{			$suggested = $query->input;			// Replace the ignored keyword suggestions.			foreach (array_reverse($query->ignored) as $token)			{				if (isset($token->suggestion))				{					$suggested = str_replace($token->term, $token->suggestion, $suggested);				}			}			// Replace the included keyword suggestions.			foreach (array_reverse($query->included) as $token)			{				if (isset($token->suggestion))				{					$suggested = str_replace($token->term, $token->suggestion, $suggested);				}			}			// Check if we made any changes.			if ($suggested == $query->input)			{				$suggested = false;			}		}		return $suggested;	}}
<?php/** * @package     Joomla.Administrator * @subpackage  com_weblinks * * @copyright   Copyright (C) 2005 - 2013 Open Source Matters, Inc. All rights reserved. * @license     GNU General Public License version 2 or later; see LICENSE.txt */defined('_JEXEC') or die;$fieldSets = $this->form->getFieldsets('params');foreach ($fieldSets as $name => $fieldSet) :	?>	<div class="tab-pane" id="params-<?php echo $name;?>">	<?php	if (isset($fieldSet->description) && trim($fieldSet->description)) :		echo '<p class="alert alert-info">'.$this->escape(JText::_($fieldSet->description)).'</p>';	endif;	?>			<?php foreach ($this->form->getFieldset($name) as $field) : ?>				<div class="control-group">					<div class="control-label"><?php echo $field->label; ?></div>					<div class="controls"><?php echo $field->input; ?></div>				</div>			<?php endforeach; ?>	</div><?php endforeach; ?>
<?php/** * @package     Joomla.Administrator * @subpackage  Template.hathor * * @copyright   Copyright (C) 2005 - 2013 Open Source Matters, Inc. All rights reserved. * @license     GNU General Public License version 2 or later; see LICENSE.txt */defined('_JEXEC') or die;?><div id="submenu-box">	<ul id="submenu" class="configuration">		<li><a href="#" onclick="return false;" id="site" class="active"><?php echo JText::_('JSITE'); ?></a></li>		<li><a href="#" onclick="return false;" id="system"><?php echo JText::_('COM_CONFIG_SYSTEM'); ?></a></li>		<li><a href="#" onclick="return false;" id="server"><?php echo JText::_('COM_CONFIG_SERVER'); ?></a></li>		<li><a href="#" onclick="return false;" id="permissions"><?php echo JText::_('COM_CONFIG_PERMISSIONS'); ?></a></li>		<li><a href="#" onclick="return false;" id="filters"><?php echo JText::_('COM_CONFIG_TEXT_FILTERS')?></a></li>	</ul>	<div class="clr"></div></div>
<?php/** * @package     Joomla.Legacy * @subpackage  Model * * @copyright   Copyright (C) 2005 - 2013 Open Source Matters, Inc. All rights reserved. * @license     GNU General Public License version 2 or later; see LICENSE */defined('JPATH_PLATFORM') or die;/** * Prototype item model. * * @package     Joomla.Legacy * @subpackage  Model * @since       12.2 */abstract class JModelItem extends JModelLegacy{	/**	 * An item.	 *	 * @var    array	 */	protected $_item = null;	/**	 * Model context string.	 *	 * @var    string	 * @since  12.2	 */	protected $_context = 'group.type';	/**	 * Method to get a store id based on model configuration state.	 *	 * This is necessary because the model is used by the component and	 * different modules that might need different sets of data or different	 * ordering requirements.	 *	 * @param   string  $id  A prefix for the store id.	 *	 * @return  string  A store id.	 *	 * @since   12.2	 */	protected function getStoreId($id = '')	{		// Compile the store id.		return md5($id);	}}
<?php/** * @package     Joomla.Platform * @subpackage  GitHub * * @copyright   Copyright (C) 2005 - 2013 Open Source Matters, Inc. All rights reserved * @license     GNU General Public License version 2 or later; see LICENSE */defined('JPATH_PLATFORM') or die;/** * GitHub API References class for the Joomla Platform. * * @package     Joomla.Platform * @subpackage  GitHub * @since       12.3 */class JGithubStatuses extends JGithubObject{	/**	 * Method to create a status.	 *	 * @param   string  $user         The name of the owner of the GitHub repository.	 * @param   string  $repo         The name of the GitHub repository.	 * @param   string  $sha          The SHA1 value for which to set the status.	 * @param   string  $state        The state (pending, success, error or failure).	 * @param   string  $targetUrl    Optional target URL.	 * @param   string  $description  Optional description for the status.	 *	 * @return  object	 *	 * @since   12.3	 */	public function create($user, $repo, $sha, $state, $targetUrl = null, $description = null)	{		// Build the request path.		$path = '/repos/' . $user . '/' . $repo . '/statuses/' . $sha;		if (!in_array($state, array('pending', 'success', 'error', 'failure')))		{			throw new InvalidArgumentException('State must be one of pending, success, error or failure.');		}		// Build the request data.		$data = array(			'state' => $state		);		if (!is_null($targetUrl))		{			$data['target_url'] = $targetUrl;		}		if (!is_null($description))		{			$data['description'] = $description;		}		// Send the request.		$response = $this->client->post($this->fetchUrl($path), json_encode($data));		// Validate the response code.		if ($response->code != 201)		{			// Decode the error response and throw an exception.			$error = json_decode($response->body);			throw new DomainException($error->message, $response->code);		}		return json_decode($response->body);	}	/**	 * Method to list statuses for an SHA.	 *	 * @param   string  $user  The name of the owner of the GitHub repository.	 * @param   string  $repo  The name of the GitHub repository.	 * @param   string  $sha   SHA1 for which to get the statuses.	 *	 * @return  array	 *	 * @since   12.3	 */	public function getList($user, $repo, $sha)	{		// Build the request path.		$path = '/repos/' . $user . '/' . $repo . '/statuses/' . $sha;		// Send the request.		$response = $this->client->get($this->fetchUrl($path));		// Validate the response code.		if ($response->code != 200)		{			// Decode the error response and throw an exception.			$error = json_decode($response->body);			throw new DomainException($error->message, $response->code);		}		return json_decode($response->body);	}}
<?php/** * @package     Joomla.Administrator * @subpackage  com_media * * @copyright   Copyright (C) 2005 - 2013 Open Source Matters, Inc. All rights reserved. * @license     GNU General Public License version 2 or later; see LICENSE.txt */defined('_JEXEC') or die;$params = new JRegistry;$dispatcher	= JEventDispatcher::getInstance();$dispatcher->trigger('onContentBeforeDisplay', array('com_media.file', &$this->_tmp_img, &$params));?><li class="imgOutline thumbnail height-80 width-80 center">	<a class="img-preview" href="javascript:ImageManager.populateFields('<?php echo $this->_tmp_img->path_relative; ?>')" title="<?php echo $this->_tmp_img->name; ?>" >		<div class="height-50">			<?php echo JHtml::_('image', $this->baseURL . '/' . $this->_tmp_img->path_relative, JText::sprintf('COM_MEDIA_IMAGE_TITLE', $this->_tmp_img->title, JHtml::_('number.bytes', $this->_tmp_img->size)), array('width' => $this->_tmp_img->width_60, 'height' => $this->_tmp_img->height_60)); ?>		</div>		<div class="small">			<?php echo JHtml::_('string.truncate', $this->_tmp_img->name, 10, false); ?>		</div>	</a></li><?php$dispatcher->trigger('onContentAfterDisplay', array('com_media.file', &$this->_tmp_img, &$params));?>
<?php/** * @package     Joomla.Platform * @subpackage  String * * @copyright   Copyright (C) 2005 - 2013 Open Source Matters, Inc. All rights reserved * @license     GNU General Public License version 2 or later; see LICENSE */defined('JPATH_PLATFORM') or die;// PHP mbstring and iconv local configuration// Check if mbstring extension is loaded and attempt to load it if not present except for windowsif (extension_loaded('mbstring')){	// Make sure to suppress the output in case ini_set is disabled	@ini_set('mbstring.internal_encoding', 'UTF-8');	@ini_set('mbstring.http_input', 'UTF-8');	@ini_set('mbstring.http_output', 'UTF-8');}// Same for iconvif (function_exists('iconv')){	// These are settings that can be set inside code	iconv_set_encoding("internal_encoding", "UTF-8");	iconv_set_encoding("input_encoding", "UTF-8");	iconv_set_encoding("output_encoding", "UTF-8");}/** * Include the utf8 package */jimport('phputf8.utf8');jimport('phputf8.strcasecmp');/** * String handling class for utf-8 data * Wraps the phputf8 library * All functions assume the validity of utf-8 strings. * * @package     Joomla.Platform * @subpackage  String * @since       11.1 */abstract class JString{	/**	 * Increment styles.	 *	 * @var    array	 * @since  11.3	 */	protected static $incrementStyles = array(		'dash' => array(			'#-(\d+)$#',			'-%d'		),		'default' => array(			array('#\((\d+)\)$#', '#\(\d+\)$#'),			array(' (%d)', '(%d)'),		),	);	/**	 * Split a string in camel case format	 *	 * "FooBarABCDef"            becomes  array("Foo", "Bar", "ABC", "Def");	 * "JFooBar"                 becomes  array("J", "Foo", "Bar");	 * "J001FooBar002"           becomes  array("J001", "Foo", "Bar002");	 * "abcDef"                  becomes  array("abc", "Def");	 * "abc_defGhi_Jkl"          becomes  array("abc_def", "Ghi_Jkl");	 * "ThisIsA_NASAAstronaut"   becomes  array("This", "Is", "A_NASA", "Astronaut")),	 * "JohnFitzgerald_Kennedy"  becomes  array("John", "Fitzgerald_Kennedy")),	 *	 * @param   string  $string  The source string.	 *	 * @return  array   The splitted string.	 *	 * @deprecated  12.3 Use JStringNormalise::fromCamelCase()	 * @since   11.3	 */	public static function splitCamelCase($string)	{		JLog::add('JString::splitCamelCase has been deprecated. Use JStringNormalise::fromCamelCase.', JLog::WARNING, 'deprecated');		return JStringNormalise::fromCamelCase($string, true);	}	/**	 * Increments a trailing number in a string.	 *	 * Used to easily create distinct labels when copying objects. The method has the following styles:	 *	 * default: "Label" becomes "Label (2)"	 * dash:    "Label" becomes "Label-2"	 *	 * @param   string   $string  The source string.	 * @param   string   $style   The the style (default|dash).	 * @param   integer  $n       If supplied, this number is used for the copy, otherwise it is the 'next' number.	 *	 * @return  string  The incremented string.	 *	 * @since   11.3	 */	public static function increment($string, $style = 'default', $n = 0)	{		$styleSpec = isset(self::$incrementStyles[$style]) ? self::$incrementStyles[$style] : self::$incrementStyles['default'];		// Regular expression search and replace patterns.		if (is_array($styleSpec[0]))		{			$rxSearch = $styleSpec[0][0];			$rxReplace = $styleSpec[0][1];		}		else		{			$rxSearch = $rxReplace = $styleSpec[0];		}		// New and old (existing) sprintf formats.		if (is_array($styleSpec[1]))		{			$newFormat = $styleSpec[1][0];			$oldFormat = $styleSpec[1][1];		}		else		{			$newFormat = $oldFormat = $styleSpec[1];		}		// Check if we are incrementing an existing pattern, or appending a new one.		if (preg_match($rxSearch, $string, $matches))		{			$n = empty($n) ? ($matches[1] + 1) : $n;			$string = preg_replace($rxReplace, sprintf($oldFormat, $n), $string);		}		else		{			$n = empty($n) ? 2 : $n;			$string .= sprintf($newFormat, $n);		}		return $string;	}	/**	 * UTF-8 aware alternative to strpos.	 *	 * Find position of first occurrence of a string.	 *	 * @param   string   $str     String being examined	 * @param   string   $search  String being searched for	 * @param   integer  $offset  Optional, specifies the position from which the search should be performed	 *	 * @return  mixed  Number of characters before the first match or FALSE on failure	 *	 * @see     http://www.php.net/strpos	 * @since   11.1	 */	public static function strpos($str, $search, $offset = false)	{		if ($offset === false)		{			return utf8_strpos($str, $search);		}		else		{			return utf8_strpos($str, $search, $offset);		}	}	/**	 * UTF-8 aware alternative to strrpos	 * Finds position of last occurrence of a string	 *	 * @param   string   $str     String being examined.	 * @param   string   $search  String being searched for.	 * @param   integer  $offset  Offset from the left of the string.	 *	 * @return  mixed  Number of characters before the last match or false on failure	 *	 * @see     http://www.php.net/strrpos	 * @since   11.1	 */	public static function strrpos($str, $search, $offset = 0)	{		return utf8_strrpos($str, $search, $offset);	}	/**	 * UTF-8 aware alternative to substr	 * Return part of a string given character offset (and optionally length)	 *	 * @param   string   $str     String being processed	 * @param   integer  $offset  Number of UTF-8 characters offset (from left)	 * @param   integer  $length  Optional length in UTF-8 characters from offset	 *	 * @return  mixed string or FALSE if failure	 *	 * @see     http://www.php.net/substr	 * @since   11.1	 */	public static function substr($str, $offset, $length = false)	{		if ($length === false)		{			return utf8_substr($str, $offset);		}		else		{			return utf8_substr($str, $offset, $length);		}	}	/**	 * UTF-8 aware alternative to strtlower	 *	 * Make a string lowercase	 * Note: The concept of a characters "case" only exists is some alphabets	 * such as Latin, Greek, Cyrillic, Armenian and archaic Georgian - it does	 * not exist in the Chinese alphabet, for example. See Unicode Standard	 * Annex #21: Case Mappings	 *	 * @param   string  $str  String being processed	 *	 * @return  mixed  Either string in lowercase or FALSE is UTF-8 invalid	 *	 * @see http://www.php.net/strtolower	 * @since   11.1	 */	public static function strtolower($str)	{		return utf8_strtolower($str);	}	/**	 * UTF-8 aware alternative to strtoupper	 * Make a string uppercase	 * Note: The concept of a characters "case" only exists is some alphabets	 * such as Latin, Greek, Cyrillic, Armenian and archaic Georgian - it does	 * not exist in the Chinese alphabet, for example. See Unicode Standard	 * Annex #21: Case Mappings	 *	 * @param   string  $str  String being processed	 *	 * @return  mixed  Either string in uppercase or FALSE is UTF-8 invalid	 *	 * @see     http://www.php.net/strtoupper	 * @since   11.1	 */	public static function strtoupper($str)	{		return utf8_strtoupper($str);	}	/**	 * UTF-8 aware alternative to strlen.	 *	 * Returns the number of characters in the string (NOT THE NUMBER OF BYTES),	 *	 * @param   string  $str  UTF-8 string.	 *	 * @return  integer  Number of UTF-8 characters in string.	 *	 * @see http://www.php.net/strlen	 * @since   11.1	 */	public static function strlen($str)	{		return utf8_strlen($str);	}	/**	 * UTF-8 aware alternative to str_ireplace	 * Case-insensitive version of str_replace	 *	 * @param   string   $search   String to search	 * @param   string   $replace  Existing string to replace	 * @param   string   $str      New string to replace with	 * @param   integer  $count    Optional count value to be passed by referene	 *	 * @return  string  UTF-8 String	 *	 * @see     http://www.php.net/str_ireplace	 * @since   11.1	 */	public static function str_ireplace($search, $replace, $str, $count = null)	{		jimport('phputf8.str_ireplace');		if ($count === false)		{			return utf8_ireplace($search, $replace, $str);		}		else		{			return utf8_ireplace($search, $replace, $str, $count);		}	}	/**	 * UTF-8 aware alternative to str_split	 * Convert a string to an array	 *	 * @param   string   $str        UTF-8 encoded string to process	 * @param   integer  $split_len  Number to characters to split string by	 *	 * @return  array	 *	 * @see     http://www.php.net/str_split	 * @since   11.1	 */	public static function str_split($str, $split_len = 1)	{		jimport('phputf8.str_split');		return utf8_str_split($str, $split_len);	}	/**	 * UTF-8/LOCALE aware alternative to strcasecmp	 * A case insensitive string comparison	 *	 * @param   string  $str1    string 1 to compare	 * @param   string  $str2    string 2 to compare	 * @param   mixed   $locale  The locale used by strcoll or false to use classical comparison	 *	 * @return  integer   < 0 if str1 is less than str2; > 0 if str1 is greater than str2, and 0 if they are equal.	 *	 * @see     http://www.php.net/strcasecmp	 * @see     http://www.php.net/strcoll	 * @see     http://www.php.net/setlocale	 * @since   11.1	 */	public static function strcasecmp($str1, $str2, $locale = false)	{		if ($locale)		{			// Get current locale			$locale0 = setlocale(LC_COLLATE, 0);			if (!$locale = setlocale(LC_COLLATE, $locale))			{				$locale = $locale0;			}			// See if we have successfully set locale to UTF-8			if (!stristr($locale, 'UTF-8') && stristr($locale, '_') && preg_match('~\.(\d+)$~', $locale, $m))			{				$encoding = 'CP' . $m[1];			}			elseif (stristr($locale, 'UTF-8') || stristr($locale, 'utf8'))			{				$encoding = 'UTF-8';			}			else			{				$encoding = 'nonrecodable';			}			// If we successfully set encoding it to utf-8 or encoding is sth weird don't recode			if ($encoding == 'UTF-8' || $encoding == 'nonrecodable')			{				return strcoll(utf8_strtolower($str1), utf8_strtolower($str2));			}			else			{				return strcoll(					self::transcode(utf8_strtolower($str1), 'UTF-8', $encoding),					self::transcode(utf8_strtolower($str2), 'UTF-8', $encoding)				);			}		}		else		{			return utf8_strcasecmp($str1, $str2);		}	}	/**	 * UTF-8/LOCALE aware alternative to strcmp	 * A case sensitive string comparison	 *	 * @param   string  $str1    string 1 to compare	 * @param   string  $str2    string 2 to compare	 * @param   mixed   $locale  The locale used by strcoll or false to use classical comparison	 *	 * @return  integer  < 0 if str1 is less than str2; > 0 if str1 is greater than str2, and 0 if they are equal.	 *	 * @see     http://www.php.net/strcmp	 * @see     http://www.php.net/strcoll	 * @see     http://www.php.net/setlocale	 * @since   11.1	 */	public static function strcmp($str1, $str2, $locale = false)	{		if ($locale)		{			// Get current locale			$locale0 = setlocale(LC_COLLATE, 0);			if (!$locale = setlocale(LC_COLLATE, $locale))			{				$locale = $locale0;			}			// See if we have successfully set locale to UTF-8			if (!stristr($locale, 'UTF-8') && stristr($locale, '_') && preg_match('~\.(\d+)$~', $locale, $m))			{				$encoding = 'CP' . $m[1];			}			elseif (stristr($locale, 'UTF-8') || stristr($locale, 'utf8'))			{				$encoding = 'UTF-8';			}			else			{				$encoding = 'nonrecodable';			}			// If we successfully set encoding it to utf-8 or encoding is sth weird don't recode			if ($encoding == 'UTF-8' || $encoding == 'nonrecodable')			{				return strcoll($str1, $str2);			}			else			{				return strcoll(self::transcode($str1, 'UTF-8', $encoding), self::transcode($str2, 'UTF-8', $encoding));			}		}		else		{			return strcmp($str1, $str2);		}	}	/**	 * UTF-8 aware alternative to strcspn	 * Find length of initial segment not matching mask	 *	 * @param   string   $str     The string to process	 * @param   string   $mask    The mask	 * @param   integer  $start   Optional starting character position (in characters)	 * @param   integer  $length  Optional length	 *	 * @return  integer  The length of the initial segment of str1 which does not contain any of the characters in str2	 *	 * @see     http://www.php.net/strcspn	 * @since   11.1	 */	public static function strcspn($str, $mask, $start = null, $length = null)	{		jimport('phputf8.strcspn');		if ($start === false && $length === false)		{			return utf8_strcspn($str, $mask);		}		elseif ($length === false)		{			return utf8_strcspn($str, $mask, $start);		}		else		{			return utf8_strcspn($str, $mask, $start, $length);		}	}	/**	 * UTF-8 aware alternative to stristr	 * Returns all of haystack from the first occurrence of needle to the end.	 * needle and haystack are examined in a case-insensitive manner	 * Find first occurrence of a string using case insensitive comparison	 *	 * @param   string  $str     The haystack	 * @param   string  $search  The needle	 *	 * @return string the sub string	 *	 * @see     http://www.php.net/stristr	 * @since   11.1	 */	public static function stristr($str, $search)	{		jimport('phputf8.stristr');		return utf8_stristr($str, $search);	}	/**	 * UTF-8 aware alternative to strrev	 * Reverse a string	 *	 * @param   string  $str  String to be reversed	 *	 * @return  string   The string in reverse character order	 *	 * @see     http://www.php.net/strrev	 * @since   11.1	 */	public static function strrev($str)	{		jimport('phputf8.strrev');		return utf8_strrev($str);	}	/**	 * UTF-8 aware alternative to strspn	 * Find length of initial segment matching mask	 *	 * @param   string   $str     The haystack	 * @param   string   $mask    The mask	 * @param   integer  $start   Start optional	 * @param   integer  $length  Length optional	 *	 * @return  integer	 *	 * @see     http://www.php.net/strspn	 * @since   11.1	 */	public static function strspn($str, $mask, $start = null, $length = null)	{		jimport('phputf8.strspn');		if ($start === null && $length === null)		{			return utf8_strspn($str, $mask);		}		elseif ($length === null)		{			return utf8_strspn($str, $mask, $start);		}		else		{			return utf8_strspn($str, $mask, $start, $length);		}	}	/**	 * UTF-8 aware substr_replace	 * Replace text within a portion of a string	 *	 * @param   string   $str     The haystack	 * @param   string   $repl    The replacement string	 * @param   integer  $start   Start	 * @param   integer  $length  Length (optional)	 *	 * @return  string	 *	 * @see     http://www.php.net/substr_replace	 * @since   11.1	 */	public static function substr_replace($str, $repl, $start, $length = null)	{		// Loaded by library loader		if ($length === false)		{			return utf8_substr_replace($str, $repl, $start);		}		else		{			return utf8_substr_replace($str, $repl, $start, $length);		}	}	/**	 * UTF-8 aware replacement for ltrim()	 *	 * Strip whitespace (or other characters) from the beginning of a string	 * You only need to use this if you are supplying the charlist	 * optional arg and it contains UTF-8 characters. Otherwise ltrim will	 * work normally on a UTF-8 string	 *	 * @param   string  $str       The string to be trimmed	 * @param   string  $charlist  The optional charlist of additional characters to trim	 *	 * @return  string  The trimmed string	 *	 * @see     http://www.php.net/ltrim	 * @since   11.1	 */	public static function ltrim($str, $charlist = false)	{		if (empty($charlist) && $charlist !== false)		{			return $str;		}		jimport('phputf8.trim');		if ($charlist === false)		{			return utf8_ltrim($str);		}		else		{			return utf8_ltrim($str, $charlist);		}	}	/**	 * UTF-8 aware replacement for rtrim()	 * Strip whitespace (or other characters) from the end of a string	 * You only need to use this if you are supplying the charlist	 * optional arg and it contains UTF-8 characters. Otherwise rtrim will	 * work normally on a UTF-8 string	 *	 * @param   string  $str       The string to be trimmed	 * @param   string  $charlist  The optional charlist of additional characters to trim	 *	 * @return  string  The trimmed string	 *	 * @see     http://www.php.net/rtrim	 * @since   11.1	 */	public static function rtrim($str, $charlist = false)	{		if (empty($charlist) && $charlist !== false)		{			return $str;		}		jimport('phputf8.trim');		if ($charlist === false)		{			return utf8_rtrim($str);		}		else		{			return utf8_rtrim($str, $charlist);		}	}	/**	 * UTF-8 aware replacement for trim()	 * Strip whitespace (or other characters) from the beginning and end of a string	 * Note: you only need to use this if you are supplying the charlist	 * optional arg and it contains UTF-8 characters. Otherwise trim will	 * work normally on a UTF-8 string	 *	 * @param   string  $str       The string to be trimmed	 * @param   string  $charlist  The optional charlist of additional characters to trim	 *	 * @return  string  The trimmed string	 *	 * @see     http://www.php.net/trim	 * @since   11.1	 */	public static function trim($str, $charlist = false)	{		if (empty($charlist) && $charlist !== false)		{			return $str;		}		jimport('phputf8.trim');		if ($charlist === false)		{			return utf8_trim($str);		}		else		{			return utf8_trim($str, $charlist);		}	}	/**	 * UTF-8 aware alternative to ucfirst	 * Make a string's first character uppercase or all words' first character uppercase	 *	 * @param   string  $str           String to be processed	 * @param   string  $delimiter     The words delimiter (null means do not split the string)	 * @param   string  $newDelimiter  The new words delimiter (null means equal to $delimiter)	 *	 * @return  string  If $delimiter is null, return the string with first character as upper case (if applicable)	 *                  else consider the string of words separated by the delimiter, apply the ucfirst to each words	 *                  and return the string with the new delimiter	 *	 * @see     http://www.php.net/ucfirst	 * @since   11.1	 */	public static function ucfirst($str, $delimiter = null, $newDelimiter = null)	{		jimport('phputf8.ucfirst');		if ($delimiter === null)		{			return utf8_ucfirst($str);		}		else		{			if ($newDelimiter === null)			{				$newDelimiter = $delimiter;			}			return implode($newDelimiter, array_map('utf8_ucfirst', explode($delimiter, $str)));		}	}	/**	 * UTF-8 aware alternative to ucwords	 * Uppercase the first character of each word in a string	 *	 * @param   string  $str  String to be processed	 *	 * @return  string  String with first char of each word uppercase	 *	 * @see     http://www.php.net/ucwords	 * @since   11.1	 */	public static function ucwords($str)	{		jimport('phputf8.ucwords');		return utf8_ucwords($str);	}	/**	 * Transcode a string.	 *	 * @param   string  $source         The string to transcode.	 * @param   string  $from_encoding  The source encoding.	 * @param   string  $to_encoding    The target encoding.	 *	 * @return  mixed  The transcoded string, or null if the source was not a string.	 *	 * @link    https://bugs.php.net/bug.php?id=48147	 *	 * @since   11.1	 */	public static function transcode($source, $from_encoding, $to_encoding)	{		if (is_string($source))		{			switch (ICONV_IMPL)			{				case 'glibc':				return @iconv($from_encoding, $to_encoding . '//TRANSLIT,IGNORE', $source);				case 'libiconv':				default:				return iconv($from_encoding, $to_encoding . '//IGNORE//TRANSLIT', $source);			}		}		return null;	}	/**	 * Tests a string as to whether it's valid UTF-8 and supported by the Unicode standard.	 *	 * Note: this function has been modified to simple return true or false.	 *	 * @param   string  $str  UTF-8 encoded string.	 *	 * @return  boolean  true if valid	 *	 * @author  <hsivonen@iki.fi>	 * @see     http://hsivonen.iki.fi/php-utf8/	 * @see     compliant	 * @since   11.1	 */	public static function valid($str)	{		// Cached expected number of octets after the current octet		// until the beginning of the next UTF8 character sequence		$mState = 0;		// Cached Unicode character		$mUcs4 = 0;		// Cached expected number of octets in the current sequence		$mBytes = 1;		$len = strlen($str);		for ($i = 0; $i < $len; $i++)		{			$in = ord($str{$i});			if ($mState == 0)			{				// When mState is zero we expect either a US-ASCII character or a				// multi-octet sequence.				if (0 == (0x80 & ($in)))				{					// US-ASCII, pass straight through.					$mBytes = 1;				}				elseif (0xC0 == (0xE0 & ($in)))				{					// First octet of 2 octet sequence					$mUcs4 = ($in);					$mUcs4 = ($mUcs4 & 0x1F) << 6;					$mState = 1;					$mBytes = 2;				}				elseif (0xE0 == (0xF0 & ($in)))				{					// First octet of 3 octet sequence					$mUcs4 = ($in);					$mUcs4 = ($mUcs4 & 0x0F) << 12;					$mState = 2;					$mBytes = 3;				}				elseif (0xF0 == (0xF8 & ($in)))				{					// First octet of 4 octet sequence					$mUcs4 = ($in);					$mUcs4 = ($mUcs4 & 0x07) << 18;					$mState = 3;					$mBytes = 4;				}				elseif (0xF8 == (0xFC & ($in)))				{					/* First octet of 5 octet sequence.					 *					 * This is illegal because the encoded codepoint must be either					 * (a) not the shortest form or					 * (b) outside the Unicode range of 0-0x10FFFF.					 * Rather than trying to resynchronize, we will carry on until the end					 * of the sequence and let the later error handling code catch it.					 */					$mUcs4 = ($in);					$mUcs4 = ($mUcs4 & 0x03) << 24;					$mState = 4;					$mBytes = 5;				}				elseif (0xFC == (0xFE & ($in)))				{					// First octet of 6 octet sequence, see comments for 5 octet sequence.					$mUcs4 = ($in);					$mUcs4 = ($mUcs4 & 1) << 30;					$mState = 5;					$mBytes = 6;				}				else				{					/* Current octet is neither in the US-ASCII range nor a legal first					 * octet of a multi-octet sequence.					 */					return false;				}			}			else			{				// When mState is non-zero, we expect a continuation of the multi-octet				// sequence				if (0x80 == (0xC0 & ($in)))				{					// Legal continuation.					$shift = ($mState - 1) * 6;					$tmp = $in;					$tmp = ($tmp & 0x0000003F) << $shift;					$mUcs4 |= $tmp;					/**					 * End of the multi-octet sequence. mUcs4 now contains the final					 * Unicode codepoint to be output					 */					if (0 == --$mState)					{						/*						 * Check for illegal sequences and codepoints.						 */						// From Unicode 3.1, non-shortest form is illegal						if (((2 == $mBytes) && ($mUcs4 < 0x0080)) || ((3 == $mBytes) && ($mUcs4 < 0x0800)) || ((4 == $mBytes) && ($mUcs4 < 0x10000))							|| (4 < $mBytes)							|| (($mUcs4 & 0xFFFFF800) == 0xD800) // From Unicode 3.2, surrogate characters are illegal							|| ($mUcs4 > 0x10FFFF)) // Codepoints outside the Unicode range are illegal						{							return false;						}						// Initialize UTF8 cache.						$mState = 0;						$mUcs4 = 0;						$mBytes = 1;					}				}				else				{					/**					 *((0xC0 & (*in) != 0x80) && (mState != 0))					 * Incomplete multi-octet sequence.					 */					return false;				}			}		}		return true;	}	/**	 * Tests whether a string complies as UTF-8. This will be much	 * faster than utf8_is_valid but will pass five and six octet	 * UTF-8 sequences, which are not supported by Unicode and	 * so cannot be displayed correctly in a browser. In other words	 * it is not as strict as utf8_is_valid but it's faster. If you use	 * it to validate user input, you place yourself at the risk that	 * attackers will be able to inject 5 and 6 byte sequences (which	 * may or may not be a significant risk, depending on what you are	 * are doing)	 *	 * @param   string  $str  UTF-8 string to check	 *	 * @return  boolean  TRUE if string is valid UTF-8	 *	 * @see     valid	 * @see     http://www.php.net/manual/en/reference.pcre.pattern.modifiers.php#54805	 * @since   11.1	 */	public static function compliant($str)	{		if (strlen($str) == 0)		{			return true;		}		/*		 * If even just the first character can be matched, when the /u		 * modifier is used, then it's valid UTF-8. If the UTF-8 is somehow		 * invalid, nothing at all will match, even if the string contains		 * some valid sequences		 */		return (preg_match('/^.{1}/us', $str, $ar) == 1);	}	/**	 * Does a UTF-8 safe version of PHP parse_url function	 *	 * @param   string  $url  URL to parse	 *	 * @return  mixed  Associative array or false if badly formed URL.	 *	 * @see     http://us3.php.net/manual/en/function.parse-url.php	 * @since   11.1	 */	public static function parse_url($url)	{		$result = false;		// Build arrays of values we need to decode before parsing		$entities = array('%21', '%2A', '%27', '%28', '%29', '%3B', '%3A', '%40', '%26', '%3D', '%24', '%2C', '%2F', '%3F', '%23', '%5B', '%5D');		$replacements = array('!', '*', "'", "(", ")", ";", ":", "@", "&", "=", "$", ",", "/", "?", "#", "[", "]");		// Create encoded URL with special URL characters decoded so it can be parsed		// All other characters will be encoded		$encodedURL = str_replace($entities, $replacements, urlencode($url));		// Parse the encoded URL		$encodedParts = parse_url($encodedURL);		// Now, decode each value of the resulting array		if ($encodedParts)		{			foreach ($encodedParts as $key => $value)			{				$result[$key] = urldecode(str_replace($replacements, $entities, $value));			}		}		return $result;	}}
<?php/** * @package     Joomla.Platform * @subpackage  Controller * * @copyright   Copyright (C) 2005 - 2013 Open Source Matters, Inc. All rights reserved. * @license     GNU General Public License version 2 or later; see LICENSE */defined('JPATH_PLATFORM') or die;/** * Joomla Platform Controller Interface * * @package     Joomla.Platform * @subpackage  Controller * @since       12.1 */interface JController extends Serializable{	/**	 * Execute the controller.	 *	 * @return  boolean  True if controller finished execution, false if the controller did not	 *                   finish execution. A controller might return false if some precondition for	 *                   the controller to run has not been satisfied.	 *	 * @since   12.1	 * @throws  LogicException	 * @throws  RuntimeException	 */	public function execute();	/**	 * Get the application object.	 *	 * @return  JApplicationBase  The application object.	 *	 * @since   12.1	 */	public function getApplication();	/**	 * Get the input object.	 *	 * @return  JInput  The input object.	 *	 * @since   12.1	 */	public function getInput();}
<?php/** * @package     Joomla.Site * @subpackage  com_banners * * @copyright   Copyright (C) 2005 - 2013 Open Source Matters, Inc. All rights reserved. * @license     GNU General Public License version 2 or later; see LICENSE.txt */defined('_JEXEC') or die;$controller	= JControllerLegacy::getInstance('Banners');$controller->execute(JFactory::getApplication()->input->get('task'));$controller->redirect();
<?php/** * @package     Joomla.Platform * @subpackage  Plugin * * @copyright   Copyright (C) 2005 - 2013 Open Source Matters, Inc. All rights reserved. * @license     GNU General Public License version 2 or later; see LICENSE */defined('JPATH_PLATFORM') or die;/** * JPlugin Class * * @package     Joomla.Platform * @subpackage  Plugin * @since       11.1 */abstract class JPlugin extends JEvent{	/**	 * A JRegistry object holding the parameters for the plugin	 *	 * @var    JRegistry	 * @since  11.1	 */	public $params = null;	/**	 * The name of the plugin	 *	 * @var    string	 * @since  11.1	 */	protected $_name = null;	/**	 * The plugin type	 *	 * @var    string	 * @since  11.1	 */	protected $_type = null;	/**	 * Affects constructor behavior. If true, language files will be loaded automatically.	 *	 * @var    boolean	 * @since  12.3	 */	protected $autoloadLanguage = false;	/**	 * Constructor	 *	 * @param   object  &$subject  The object to observe	 * @param   array   $config    An optional associative array of configuration settings.	 *                             Recognized key values include 'name', 'group', 'params', 'language'	 *                             (this list is not meant to be comprehensive).	 *	 * @since   11.1	 */	public function __construct(&$subject, $config = array())	{		// Get the parameters.		if (isset($config['params']))		{			if ($config['params'] instanceof JRegistry)			{				$this->params = $config['params'];			}			else			{				$this->params = new JRegistry;				$this->params->loadString($config['params']);			}		}		// Get the plugin name.		if (isset($config['name']))		{			$this->_name = $config['name'];		}		// Get the plugin type.		if (isset($config['type']))		{			$this->_type = $config['type'];		}		// Load the language files if needed.		if ($this->autoloadLanguage)		{			$this->loadLanguage();		}		parent::__construct($subject);	}	/**	 * Loads the plugin language file	 *	 * @param   string  $extension  The extension for which a language file should be loaded	 * @param   string  $basePath   The basepath to use	 *	 * @return  boolean  True, if the file has successfully loaded.	 *	 * @since   11.1	 */	public function loadLanguage($extension = '', $basePath = JPATH_ADMINISTRATOR)	{		if (empty($extension))		{			$extension = 'plg_' . $this->_type . '_' . $this->_name;		}		$lang = JFactory::getLanguage();		return $lang->load(strtolower($extension), $basePath, null, false, false)			|| $lang->load(strtolower($extension), JPATH_PLUGINS . '/' . $this->_type . '/' . $this->_name, null, false, false)			|| $lang->load(strtolower($extension), $basePath, $lang->getDefault(), false, false)			|| $lang->load(strtolower($extension), JPATH_PLUGINS . '/' . $this->_type . '/' . $this->_name, $lang->getDefault(), false, false);	}}
<?php/** * @package     Joomla.Administrator * @subpackage  com_config * * @copyright   Copyright (C) 2005 - 2013 Open Source Matters, Inc. All rights reserved. * @license     GNU General Public License version 2 or later; see LICENSE.txt */defined('_JEXEC') or die;?><div class="width-100"><fieldset class="adminform">	<legend><?php echo JText::_('COM_CONFIG_SESSION_SETTINGS'); ?></legend>		<ul class="adminformlist">			<?php			foreach ($this->form->getFieldset('session') as $field):			?>					<li><?php echo $field->label; ?>					<?php echo $field->input; ?></li>			<?php			endforeach;			?>			</ul></fieldset></div>
<?php/** * @package     Joomla.Platform * @subpackage  Session * * @copyright   Copyright (C) 2005 - 2013 Open Source Matters, Inc. All rights reserved. * @license     GNU General Public License version 2 or later; see LICENSE */defined('JPATH_PLATFORM') or die;/** * APC session storage handler for PHP * * @package     Joomla.Platform * @subpackage  Session * @see         http://www.php.net/manual/en/function.session-set-save-handler.php * @since       11.1 */class JSessionStorageApc extends JSessionStorage{	/**	 * Constructor	 *	 * @param   array  $options  Optional parameters	 *	 * @since   11.1	 * @throws  RuntimeException	 */	public function __construct($options = array())	{		if (!self::isSupported())		{			throw new RuntimeException('APC Extension is not available', 404);		}		parent::__construct($options);	}	/**	 * Read the data for a particular session identifier from the	 * SessionHandler backend.	 *	 * @param   string  $id  The session identifier.	 *	 * @return  string  The session data.	 *	 * @since   11.1	 */	public function read($id)	{		$sess_id = 'sess_' . $id;		return (string) apc_fetch($sess_id);	}	/**	 * Write session data to the SessionHandler backend.	 *	 * @param   string  $id            The session identifier.	 * @param   string  $session_data  The session data.	 *	 * @return  boolean  True on success, false otherwise.	 *	 * @since   11.1	 */	public function write($id, $session_data)	{		$sess_id = 'sess_' . $id;		return apc_store($sess_id, $session_data, ini_get("session.gc_maxlifetime"));	}	/**	 * Destroy the data for a particular session identifier in the SessionHandler backend.	 *	 * @param   string  $id  The session identifier.	 *	 * @return  boolean  True on success, false otherwise.	 *	 * @since   11.1	 */	public function destroy($id)	{		$sess_id = 'sess_' . $id;		return apc_delete($sess_id);	}	/**	 * Test to see if the SessionHandler is available.	 *	 * @return boolean  True on success, false otherwise.	 *	 * @since   12.1	 */	public static function isSupported()	{		return extension_loaded('apc');	}}
<?php/** * @package     Joomla.Installation * @subpackage  View * * @copyright   Copyright (C) 2005 - 2013 Open Source Matters, Inc. All rights reserved. * @license     GNU General Public License version 2 or later; see LICENSE.txt */defined('_JEXEC') or die;/** * The Installation Summary View * * @package     Joomla.Installation * @subpackage  View * @since       3.1 */class InstallationViewSummaryHtml extends InstallationViewDefault{	/**	 * The session options	 *	 * @var    array	 * @since  3.1	 */	protected $options;	/**	 * The PHP options checked by the installer	 *	 * @var    array	 * @since  3.1	 */	protected $phpoptions;	/**	 * The PHP settings checked by the installer	 *	 * @var    array	 * @since  3.1	 */	protected $phpsettings;	/**	 * Method to render the view.	 *	 * @return  string  The rendered view.	 *	 * @since   3.1	 */	public function render()	{		$this->options     = $this->model->getOptions();		$this->phpoptions  = $this->model->getPhpOptions();		$this->phpsettings = $this->model->getPhpSettings();		return parent::render();	}}
<?php/** * @package     Joomla.Platform * @subpackage  Application * * @copyright   Copyright (C) 2005 - 2013 Open Source Matters, Inc. All rights reserved. * @license     GNU General Public License version 2 or later; see LICENSE */defined('JPATH_PLATFORM') or die;/** * Route handling class * * @package     Joomla.Platform * @subpackage  Application * @since       11.1 */class JRoute{	/**	 * The route object so we don't have to keep fetching it.	 *	 * @var    JRouter	 * @since  12.2	 */	private static $_router = null;	/**	 * Translates an internal Joomla URL to a humanly readible URL.	 *	 * @param   string   $url    Absolute or Relative URI to Joomla resource.	 * @param   boolean  $xhtml  Replace & by &amp; for XML compilance.	 * @param   integer  $ssl    Secure state for the resolved URI.	 *                             1: Make URI secure using global secure site URI.	 *                             0: Leave URI in the same secure state as it was passed to the function.	 *                            -1: Make URI unsecure using the global unsecure site URI.	 *	 * @return  The translated humanly readible URL.	 *	 * @since   11.1	 */	public static function _($url, $xhtml = true, $ssl = null)	{		if (!self::$_router)		{			// Get the router.			self::$_router = JFactory::getApplication()->getRouter();			// Make sure that we have our router			if (!self::$_router)			{				return null;			}		}		if ((strpos($url, '&') !== 0) && (strpos($url, 'index.php') !== 0))		{			return $url;		}		// Build route.		$uri = self::$_router->build($url);		$url = $uri->toString(array('path', 'query', 'fragment'));		// Replace spaces.		$url = preg_replace('/\s/u', '%20', $url);		/*		 * Get the secure/unsecure URLs.		 *		 * If the first 5 characters of the BASE are 'https', then we are on an ssl connection over		 * https and need to set our secure URL to the current request URL, if not, and the scheme is		 * 'http', then we need to do a quick string manipulation to switch schemes.		 */		if ((int) $ssl)		{			$uri = JURI::getInstance();			// Get additional parts.			static $prefix;			if (!$prefix)			{				$prefix = $uri->toString(array('host', 'port'));			}			// Determine which scheme we want.			$scheme = ((int) $ssl === 1) ? 'https' : 'http';			// Make sure our URL path begins with a slash.			if (!preg_match('#^/#', $url))			{				$url = '/' . $url;			}			// Build the URL.			$url = $scheme . '://' . $prefix . $url;		}		if ($xhtml)		{			$url = htmlspecialchars($url);		}		return $url;	}}
<?php/** * @package     Joomla.Site * @subpackage  com_newsfeeds * * @copyright   Copyright (C) 2005 - 2013 Open Source Matters, Inc. All rights reserved. * @license     GNU General Public License version 2 or later; see LICENSE.txt */defined('_JEXEC') or die;/** * This models supports retrieving lists of newsfeed categories. * * @package     Joomla.Site * @subpackage  com_newsfeeds * @since       1.6 */class NewsfeedsModelCategories extends JModelList{	/**	 * Model context string.	 *	 * @var		string	 */	public $_context = 'com_newsfeeds.categories';	/**	 * The category context (allows other extensions to derived from this model).	 *	 * @var		string	 */	protected $_extension = 'com_newsfeeds';	private $_parent = null;	private $_items = null;	/**	 * Method to auto-populate the model state.	 *	 * Note. Calling getState in this method will result in recursion.	 *	 * @since   1.6	 */	protected function populateState($ordering = null, $direction = null)	{		$app = JFactory::getApplication();		$this->setState('filter.extension', $this->_extension);		// Get the parent id if defined.		$parentId = $app->input->getInt('id');		$this->setState('filter.parentId', $parentId);		$params = $app->getParams();		$this->setState('params', $params);		$this->setState('filter.published',	1);		$this->setState('filter.access',	true);	}	/**	 * Method to get a store id based on model configuration state.	 *	 * This is necessary because the model is used by the component and	 * different modules that might need different sets of data or different	 * ordering requirements.	 *	 * @param   string  $id	A prefix for the store id.	 *	 * @return  string  A store id.	 */	protected function getStoreId($id = '')	{		// Compile the store id.		$id	.= ':'.$this->getState('filter.extension');		$id	.= ':'.$this->getState('filter.published');		$id	.= ':'.$this->getState('filter.access');		$id	.= ':'.$this->getState('filter.parentId');		return parent::getStoreId($id);	}	/**	 * redefine the function an add some properties to make the styling more easy	 *	 * @return mixed An array of data items on success, false on failure.	 */	public function getItems()	{		if (!count($this->_items))		{			$app = JFactory::getApplication();			$menu = $app->getMenu();			$active = $menu->getActive();			$params = new JRegistry;			if ($active)			{				$params->loadString($active->params);			}			$options = array();			$options['countItems'] = $params->get('show_cat_items_cat', 1) || !$params->get('show_empty_categories_cat', 0);			$categories = JCategories::getInstance('Newsfeeds', $options);			$this->_parent = $categories->get($this->getState('filter.parentId', 'root'));			if (is_object($this->_parent))			{				$this->_items = $this->_parent->getChildren();			} else {				$this->_items = false;			}		}		return $this->_items;	}	public function getParent()	{		if (!is_object($this->_parent))		{			$this->getItems();		}		return $this->_parent;	}}
<?php/** * @package     Joomla.Platform * @subpackage  FileSystem * * @copyright   Copyright (C) 2005 - 2013 Open Source Matters, Inc. All rights reserved. * @license     GNU General Public License version 2 or later; see LICENSE */defined('JPATH_PLATFORM') or die;jimport('joomla.filesystem.path');/** * A File handling class * * @package     Joomla.Platform * @subpackage  FileSystem * @since       11.1 */class JFile{	/**	 * Gets the extension of a file name	 *	 * @param   string  $file  The file name	 *	 * @return  string  The file extension	 *	 * @since   11.1	 */	public static function getExt($file)	{		$dot = strrpos($file, '.') + 1;		return substr($file, $dot);	}	/**	 * Strips the last extension off of a file name	 *	 * @param   string  $file  The file name	 *	 * @return  string  The file name without the extension	 *	 * @since   11.1	 */	public static function stripExt($file)	{		return preg_replace('#\.[^.]*$#', '', $file);	}	/**	 * Makes file name safe to use	 *	 * @param   string  $file  The name of the file [not full path]	 *	 * @return  string  The sanitised string	 *	 * @since   11.1	 */	public static function makeSafe($file)	{		$regex = array('#(\.){2,}#', '#[^A-Za-z0-9\.\_\- ]#', '#^\.#');		return preg_replace($regex, '', $file);	}	/**	 * Copies a file	 *	 * @param   string   $src          The path to the source file	 * @param   string   $dest         The path to the destination file	 * @param   string   $path         An optional base path to prefix to the file names	 * @param   boolean  $use_streams  True to use streams	 *	 * @return  boolean  True on success	 *	 * @since   11.1	 */	public static function copy($src, $dest, $path = null, $use_streams = false)	{		// Prepend a base path if it exists		if ($path)		{			$src = JPath::clean($path . '/' . $src);			$dest = JPath::clean($path . '/' . $dest);		}		// Check src path		if (!is_readable($src))		{			JLog::add(JText::sprintf('JLIB_FILESYSTEM_ERROR_JFILE_FIND_COPY', $src), JLog::WARNING, 'jerror');			return false;		}		if ($use_streams)		{			$stream = JFactory::getStream();			if (!$stream->copy($src, $dest))			{				JLog::add(JText::sprintf('JLIB_FILESYSTEM_ERROR_JFILE_STREAMS', $src, $dest, $stream->getError()), JLog::WARNING, 'jerror');				return false;			}			return true;		}		else		{			$FTPOptions = JClientHelper::getCredentials('ftp');			if ($FTPOptions['enabled'] == 1)			{				// Connect the FTP client				$ftp = JClientFtp::getInstance($FTPOptions['host'], $FTPOptions['port'], array(), $FTPOptions['user'], $FTPOptions['pass']);				// If the parent folder doesn't exist we must create it				if (!file_exists(dirname($dest)))				{					jimport('joomla.filesystem.folder');					JFolder::create(dirname($dest));				}				// Translate the destination path for the FTP account				$dest = JPath::clean(str_replace(JPATH_ROOT, $FTPOptions['root'], $dest), '/');				if (!$ftp->store($src, $dest))				{					// FTP connector throws an error					return false;				}				$ret = true;			}			else			{				if (!@ copy($src, $dest))				{					JLog::add(JText::_('JLIB_FILESYSTEM_ERROR_COPY_FAILED'), JLog::WARNING, 'jerror');					return false;				}				$ret = true;			}			return $ret;		}	}	/**	 * Delete a file or array of files	 *	 * @param   mixed  $file  The file name or an array of file names	 *	 * @return  boolean  True on success	 *	 * @since   11.1	 */	public static function delete($file)	{		$FTPOptions = JClientHelper::getCredentials('ftp');		if (is_array($file))		{			$files = $file;		}		else		{			$files[] = $file;		}		// Do NOT use ftp if it is not enabled		if ($FTPOptions['enabled'] == 1)		{			// Connect the FTP client			$ftp = JClientFtp::getInstance($FTPOptions['host'], $FTPOptions['port'], array(), $FTPOptions['user'], $FTPOptions['pass']);		}		foreach ($files as $file)		{			$file = JPath::clean($file);			// Try making the file writable first. If it's read-only, it can't be deleted			// on Windows, even if the parent folder is writable			@chmod($file, 0777);			// In case of restricted permissions we zap it one way or the other			// as long as the owner is either the webserver or the ftp			if (@unlink($file))			{				// Do nothing			}			elseif ($FTPOptions['enabled'] == 1)			{				$file = JPath::clean(str_replace(JPATH_ROOT, $FTPOptions['root'], $file), '/');				if (!$ftp->delete($file))				{					// FTP connector throws an error					return false;				}			}			else			{				$filename = basename($file);				JLog::add(JText::sprintf('JLIB_FILESYSTEM_DELETE_FAILED', $filename), JLog::WARNING, 'jerror');				return false;			}		}		return true;	}	/**	 * Moves a file	 *	 * @param   string   $src          The path to the source file	 * @param   string   $dest         The path to the destination file	 * @param   string   $path         An optional base path to prefix to the file names	 * @param   boolean  $use_streams  True to use streams	 *	 * @return  boolean  True on success	 *	 * @since   11.1	 */	public static function move($src, $dest, $path = '', $use_streams = false)	{		if ($path)		{			$src = JPath::clean($path . '/' . $src);			$dest = JPath::clean($path . '/' . $dest);		}		// Check src path		if (!is_readable($src))		{			return JText::_('JLIB_FILESYSTEM_CANNOT_FIND_SOURCE_FILE');		}		if ($use_streams)		{			$stream = JFactory::getStream();			if (!$stream->move($src, $dest))			{				JLog::add(JText::sprintf('JLIB_FILESYSTEM_ERROR_JFILE_MOVE_STREAMS', $stream->getError()), JLog::WARNING, 'jerror');				return false;			}			return true;		}		else		{			$FTPOptions = JClientHelper::getCredentials('ftp');			if ($FTPOptions['enabled'] == 1)			{				// Connect the FTP client				$ftp = JClientFtp::getInstance($FTPOptions['host'], $FTPOptions['port'], array(), $FTPOptions['user'], $FTPOptions['pass']);				// Translate path for the FTP account				$src = JPath::clean(str_replace(JPATH_ROOT, $FTPOptions['root'], $src), '/');				$dest = JPath::clean(str_replace(JPATH_ROOT, $FTPOptions['root'], $dest), '/');				// Use FTP rename to simulate move				if (!$ftp->rename($src, $dest))				{					JLog::add(JText::_('JLIB_FILESYSTEM_ERROR_RENAME_FILE'), JLog::WARNING, 'jerror');					return false;				}			}			else			{				if (!@ rename($src, $dest))				{					JLog::add(JText::_('JLIB_FILESYSTEM_ERROR_RENAME_FILE'), JLog::WARNING, 'jerror');					return false;				}			}			return true;		}	}	/**	 * Read the contents of a file	 *	 * @param   string   $filename   The full file path	 * @param   boolean  $incpath    Use include path	 * @param   integer  $amount     Amount of file to read	 * @param   integer  $chunksize  Size of chunks to read	 * @param   integer  $offset     Offset of the file	 *	 * @return  mixed  Returns file contents or boolean False if failed	 *	 * @since   11.1	 * @deprecated  13.3  Use the native file_get_contents() instead.	 */	public static function read($filename, $incpath = false, $amount = 0, $chunksize = 8192, $offset = 0)	{		JLog::add(__METHOD__ . ' is deprecated. Use native file_get_contents() syntax.', JLog::WARNING, 'deprecated');		$data = null;		if ($amount && $chunksize > $amount)		{			$chunksize = $amount;		}		if (false === $fh = fopen($filename, 'rb', $incpath))		{			JLog::add(JText::sprintf('JLIB_FILESYSTEM_ERROR_READ_UNABLE_TO_OPEN_FILE', $filename), JLog::WARNING, 'jerror');			return false;		}		clearstatcache();		if ($offset)		{			fseek($fh, $offset);		}		if ($fsize = @ filesize($filename))		{			if ($amount && $fsize > $amount)			{				$data = fread($fh, $amount);			}			else			{				$data = fread($fh, $fsize);			}		}		else		{			$data = '';			/*			 * While it's:			 * 1: Not the end of the file AND			 * 2a: No Max Amount set OR			 * 2b: The length of the data is less than the max amount we want			 */			while (!feof($fh) && (!$amount || strlen($data) < $amount))			{				$data .= fread($fh, $chunksize);			}		}		fclose($fh);		return $data;	}	/**	 * Write contents to a file	 *	 * @param   string   $file         The full file path	 * @param   string   &$buffer      The buffer to write	 * @param   boolean  $use_streams  Use streams	 *	 * @return  boolean  True on success	 *	 * @since   11.1	 */	public static function write($file, &$buffer, $use_streams = false)	{		@set_time_limit(ini_get('max_execution_time'));		// If the destination directory doesn't exist we need to create it		if (!file_exists(dirname($file)))		{			jimport('joomla.filesystem.folder');			JFolder::create(dirname($file));		}		if ($use_streams)		{			$stream = JFactory::getStream();			// Beef up the chunk size to a meg			$stream->set('chunksize', (1024 * 1024 * 1024));			if (!$stream->writeFile($file, $buffer))			{				JLog::add(JText::sprintf('JLIB_FILESYSTEM_ERROR_WRITE_STREAMS', $file, $stream->getError()), JLog::WARNING, 'jerror');				return false;			}			return true;		}		else		{			$FTPOptions = JClientHelper::getCredentials('ftp');			if ($FTPOptions['enabled'] == 1)			{				// Connect the FTP client				$ftp = JClientFtp::getInstance($FTPOptions['host'], $FTPOptions['port'], array(), $FTPOptions['user'], $FTPOptions['pass']);				// Translate path for the FTP account and use FTP write buffer to file				$file = JPath::clean(str_replace(JPATH_ROOT, $FTPOptions['root'], $file), '/');				$ret = $ftp->write($file, $buffer);			}			else			{				$file = JPath::clean($file);				$ret = is_int(file_put_contents($file, $buffer)) ? true : false;			}			return $ret;		}	}	/**	 * Moves an uploaded file to a destination folder	 *	 * @param   string   $src          The name of the php (temporary) uploaded file	 * @param   string   $dest         The path (including filename) to move the uploaded file to	 * @param   boolean  $use_streams  True to use streams	 *	 * @return  boolean  True on success	 *	 * @since   11.1	 */	public static function upload($src, $dest, $use_streams = false)	{		// Ensure that the path is valid and clean		$dest = JPath::clean($dest);		// Create the destination directory if it does not exist		$baseDir = dirname($dest);		if (!file_exists($baseDir))		{			jimport('joomla.filesystem.folder');			JFolder::create($baseDir);		}		if ($use_streams)		{			$stream = JFactory::getStream();			if (!$stream->upload($src, $dest))			{				JLog::add(JText::sprintf('JLIB_FILESYSTEM_ERROR_UPLOAD', $stream->getError()), JLog::WARNING, 'jerror');				return false;			}			return true;		}		else		{			$FTPOptions = JClientHelper::getCredentials('ftp');			$ret = false;			if ($FTPOptions['enabled'] == 1)			{				// Connect the FTP client				$ftp = JClientFtp::getInstance($FTPOptions['host'], $FTPOptions['port'], array(), $FTPOptions['user'], $FTPOptions['pass']);				// Translate path for the FTP account				$dest = JPath::clean(str_replace(JPATH_ROOT, $FTPOptions['root'], $dest), '/');				// Copy the file to the destination directory				if (is_uploaded_file($src) && $ftp->store($src, $dest))				{					unlink($src);					$ret = true;				}				else				{					JLog::add(JText::_('JLIB_FILESYSTEM_ERROR_WARNFS_ERR02'), JLog::WARNING, 'jerror');				}			}			else			{				if (is_writeable($baseDir) && move_uploaded_file($src, $dest))				{					// Short circuit to prevent file permission errors					if (JPath::setPermissions($dest))					{						$ret = true;					}					else					{						JLog::add(JText::_('JLIB_FILESYSTEM_ERROR_WARNFS_ERR01'), JLog::WARNING, 'jerror');					}				}				else				{					JLog::add(JText::_('JLIB_FILESYSTEM_ERROR_WARNFS_ERR02'), JLog::WARNING, 'jerror');				}			}			return $ret;		}	}	/**	 * Wrapper for the standard file_exists function	 *	 * @param   string  $file  File path	 *	 * @return  boolean  True if path is a file	 *	 * @since   11.1	 */	public static function exists($file)	{		return is_file(JPath::clean($file));	}	/**	 * Returns the name, without any path.	 *	 * @param   string  $file  File path	 *	 * @return  string  filename	 *	 * @since   11.1	 * @deprecated  13.3 Use basename() instead.	 */	public static function getName($file)	{		JLog::add(__METHOD__ . ' is deprecated. Use native basename() syntax.', JLog::WARNING, 'deprecated');		// Convert back slashes to forward slashes		$file = str_replace('\\', '/', $file);		$slash = strrpos($file, '/');		if ($slash !== false)		{			return substr($file, $slash + 1);		}		else		{			return $file;		}	}}
<?php/*** @version $Id$* @package utf8* @subpackage strings*//*** Define UTF8_CORE as required*/if ( !defined('UTF8_CORE') ) {    define('UTF8_CORE',TRUE);}//--------------------------------------------------------------------/*** Unicode aware replacement for strlen(). Returns the number* of characters in the string (not the number of bytes), replacing* multibyte characters with a single byte equivalent* utf8_decode() converts characters that are not in ISO-8859-1* to '?', which, for the purpose of counting, is alright - It's* much faster than iconv_strlen* Note: this function does not count bad UTF-8 bytes in the string* - these are simply ignored* @author <chernyshevsky at hotmail dot com>* @link   http://www.php.net/manual/en/function.strlen.php* @link   http://www.php.net/manual/en/function.utf8-decode.php* @param string UTF-8 string* @return int number of UTF-8 characters in string* @package utf8* @subpackage strings*/function utf8_strlen($str){    return strlen(utf8_decode($str));}//--------------------------------------------------------------------/*** UTF-8 aware alternative to strpos* Find position of first occurrence of a string* Note: This will get alot slower if offset is used* Note: requires utf8_strlen amd utf8_substr to be loaded* @param string haystack* @param string needle (you should validate this with utf8_is_valid)* @param integer offset in characters (from left)* @return mixed integer position or FALSE on failure* @see http://www.php.net/strpos* @see utf8_strlen* @see utf8_substr* @package utf8* @subpackage strings*/function utf8_strpos($str, $needle, $offset = NULL) {    if ( is_null($offset) ) {        $ar = explode($needle, $str, 2);        if ( count($ar) > 1 ) {            return utf8_strlen($ar[0]);        }        return FALSE;    } else {        if ( !is_int($offset) ) {            trigger_error('utf8_strpos: Offset must be an integer',E_USER_ERROR);            return FALSE;        }        $str = utf8_substr($str, $offset);        if ( FALSE !== ( $pos = utf8_strpos($str, $needle) ) ) {            return $pos + $offset;        }        return FALSE;    }}//--------------------------------------------------------------------/*** UTF-8 aware alternative to strrpos* Find position of last occurrence of a char in a string* Note: This will get alot slower if offset is used* Note: requires utf8_substr and utf8_strlen to be loaded* @param string haystack* @param string needle (you should validate this with utf8_is_valid)* @param integer (optional) offset (from left)* @return mixed integer position or FALSE on failure* @see http://www.php.net/strrpos* @see utf8_substr* @see utf8_strlen* @package utf8* @subpackage strings*/function utf8_strrpos($str, $needle, $offset = NULL) {    if ( is_null($offset) ) {        $ar = explode($needle, $str);        if ( count($ar) > 1 ) {            // Pop off the end of the string where the last match was made            array_pop($ar);            $str = join($needle,$ar);            return utf8_strlen($str);        }        return FALSE;    } else {        if ( !is_int($offset) ) {            trigger_error('utf8_strrpos expects parameter 3 to be long',E_USER_WARNING);            return FALSE;        }        $str = utf8_substr($str, $offset);        if ( FALSE !== ( $pos = utf8_strrpos($str, $needle) ) ) {            return $pos + $offset;        }        return FALSE;    }}//--------------------------------------------------------------------/*** UTF-8 aware alternative to substr* Return part of a string given character offset (and optionally length)** Note arguments: comparied to substr - if offset or length are* not integers, this version will not complain but rather massages them* into an integer.** Note on returned values: substr documentation states false can be* returned in some cases (e.g. offset > string length)* mb_substr never returns false, it will return an empty string instead.* This adopts the mb_substr approach** Note on implementation: PCRE only supports repetitions of less than* 65536, in order to accept up to MAXINT values for offset and length,* we'll repeat a group of 65535 characters when needed.** Note on implementation: calculating the number of characters in the* string is a relatively expensive operation, so we only carry it out when* necessary. It isn't necessary for +ve offsets and no specified length** @author Chris Smith<chris@jalakai.co.uk>* @param string* @param integer number of UTF-8 characters offset (from left)* @param integer (optional) length in UTF-8 characters from offset* @return mixed string or FALSE if failure* @package utf8* @subpackage strings*/function utf8_substr($str, $offset, $length = NULL) {    // generates E_NOTICE    // for PHP4 objects, but not PHP5 objects    $str = (string)$str;    $offset = (int)$offset;    if (!is_null($length)) $length = (int)$length;    // handle trivial cases    if ($length === 0) return '';    if ($offset < 0 && $length < 0 && $length < $offset)        return '';    // normalise negative offsets (we could use a tail    // anchored pattern, but they are horribly slow!)    if ($offset < 0) {        // see notes        $strlen = strlen(utf8_decode($str));        $offset = $strlen + $offset;        if ($offset < 0) $offset = 0;    }    $Op = '';    $Lp = '';    // establish a pattern for offset, a    // non-captured group equal in length to offset    if ($offset > 0) {        $Ox = (int)($offset/65535);        $Oy = $offset%65535;        if ($Ox) {            $Op = '(?:.{65535}){'.$Ox.'}';        }        $Op = '^(?:'.$Op.'.{'.$Oy.'})';    } else {        // offset == 0; just anchor the pattern        $Op = '^';    }    // establish a pattern for length    if (is_null($length)) {        // the rest of the string        $Lp = '(.*)$';    } else {        if (!isset($strlen)) {            // see notes            $strlen = strlen(utf8_decode($str));        }        // another trivial case        if ($offset > $strlen) return '';        if ($length > 0) {            // reduce any length that would            // go passed the end of the string            $length = min($strlen-$offset, $length);            $Lx = (int)( $length / 65535 );            $Ly = $length % 65535;            // negative length requires a captured group            // of length characters            if ($Lx) $Lp = '(?:.{65535}){'.$Lx.'}';            $Lp = '('.$Lp.'.{'.$Ly.'})';        } else if ($length < 0) {            if ( $length < ($offset - $strlen) ) {                return '';            }            $Lx = (int)((-$length)/65535);            $Ly = (-$length)%65535;            // negative length requires ... capture everything            // except a group of  -length characters            // anchored at the tail-end of the string            if ($Lx) $Lp = '(?:.{65535}){'.$Lx.'}';            $Lp = '(.*)(?:'.$Lp.'.{'.$Ly.'})$';        }    }    if (!preg_match( '#'.$Op.$Lp.'#us',$str, $match )) {        return '';    }    return $match[1];}//---------------------------------------------------------------/*** UTF-8 aware alternative to strtolower* Make a string lowercase* Note: The concept of a characters "case" only exists is some alphabets* such as Latin, Greek, Cyrillic, Armenian and archaic Georgian - it does* not exist in the Chinese alphabet, for example. See Unicode Standard* Annex #21: Case Mappings* Note: requires utf8_to_unicode and utf8_from_unicode* @author Andreas Gohr <andi@splitbrain.org>* @param string* @return mixed either string in lowercase or FALSE is UTF-8 invalid* @see http://www.php.net/strtolower* @see utf8_to_unicode* @see utf8_from_unicode* @see http://www.unicode.org/reports/tr21/tr21-5.html* @see http://dev.splitbrain.org/view/darcs/dokuwiki/inc/utf8.php* @package utf8* @subpackage strings*/function utf8_strtolower($string){    static $UTF8_UPPER_TO_LOWER = NULL;    if ( is_null($UTF8_UPPER_TO_LOWER) ) {        $UTF8_UPPER_TO_LOWER = array(    0x0041=>0x0061, 0x03A6=>0x03C6, 0x0162=>0x0163, 0x00C5=>0x00E5, 0x0042=>0x0062,    0x0139=>0x013A, 0x00C1=>0x00E1, 0x0141=>0x0142, 0x038E=>0x03CD, 0x0100=>0x0101,    0x0490=>0x0491, 0x0394=>0x03B4, 0x015A=>0x015B, 0x0044=>0x0064, 0x0393=>0x03B3,    0x00D4=>0x00F4, 0x042A=>0x044A, 0x0419=>0x0439, 0x0112=>0x0113, 0x041C=>0x043C,    0x015E=>0x015F, 0x0143=>0x0144, 0x00CE=>0x00EE, 0x040E=>0x045E, 0x042F=>0x044F,    0x039A=>0x03BA, 0x0154=>0x0155, 0x0049=>0x0069, 0x0053=>0x0073, 0x1E1E=>0x1E1F,    0x0134=>0x0135, 0x0427=>0x0447, 0x03A0=>0x03C0, 0x0418=>0x0438, 0x00D3=>0x00F3,    0x0420=>0x0440, 0x0404=>0x0454, 0x0415=>0x0435, 0x0429=>0x0449, 0x014A=>0x014B,    0x0411=>0x0431, 0x0409=>0x0459, 0x1E02=>0x1E03, 0x00D6=>0x00F6, 0x00D9=>0x00F9,    0x004E=>0x006E, 0x0401=>0x0451, 0x03A4=>0x03C4, 0x0423=>0x0443, 0x015C=>0x015D,    0x0403=>0x0453, 0x03A8=>0x03C8, 0x0158=>0x0159, 0x0047=>0x0067, 0x00C4=>0x00E4,    0x0386=>0x03AC, 0x0389=>0x03AE, 0x0166=>0x0167, 0x039E=>0x03BE, 0x0164=>0x0165,    0x0116=>0x0117, 0x0108=>0x0109, 0x0056=>0x0076, 0x00DE=>0x00FE, 0x0156=>0x0157,    0x00DA=>0x00FA, 0x1E60=>0x1E61, 0x1E82=>0x1E83, 0x00C2=>0x00E2, 0x0118=>0x0119,    0x0145=>0x0146, 0x0050=>0x0070, 0x0150=>0x0151, 0x042E=>0x044E, 0x0128=>0x0129,    0x03A7=>0x03C7, 0x013D=>0x013E, 0x0422=>0x0442, 0x005A=>0x007A, 0x0428=>0x0448,    0x03A1=>0x03C1, 0x1E80=>0x1E81, 0x016C=>0x016D, 0x00D5=>0x00F5, 0x0055=>0x0075,    0x0176=>0x0177, 0x00DC=>0x00FC, 0x1E56=>0x1E57, 0x03A3=>0x03C3, 0x041A=>0x043A,    0x004D=>0x006D, 0x016A=>0x016B, 0x0170=>0x0171, 0x0424=>0x0444, 0x00CC=>0x00EC,    0x0168=>0x0169, 0x039F=>0x03BF, 0x004B=>0x006B, 0x00D2=>0x00F2, 0x00C0=>0x00E0,    0x0414=>0x0434, 0x03A9=>0x03C9, 0x1E6A=>0x1E6B, 0x00C3=>0x00E3, 0x042D=>0x044D,    0x0416=>0x0436, 0x01A0=>0x01A1, 0x010C=>0x010D, 0x011C=>0x011D, 0x00D0=>0x00F0,    0x013B=>0x013C, 0x040F=>0x045F, 0x040A=>0x045A, 0x00C8=>0x00E8, 0x03A5=>0x03C5,    0x0046=>0x0066, 0x00DD=>0x00FD, 0x0043=>0x0063, 0x021A=>0x021B, 0x00CA=>0x00EA,    0x0399=>0x03B9, 0x0179=>0x017A, 0x00CF=>0x00EF, 0x01AF=>0x01B0, 0x0045=>0x0065,    0x039B=>0x03BB, 0x0398=>0x03B8, 0x039C=>0x03BC, 0x040C=>0x045C, 0x041F=>0x043F,    0x042C=>0x044C, 0x00DE=>0x00FE, 0x00D0=>0x00F0, 0x1EF2=>0x1EF3, 0x0048=>0x0068,    0x00CB=>0x00EB, 0x0110=>0x0111, 0x0413=>0x0433, 0x012E=>0x012F, 0x00C6=>0x00E6,    0x0058=>0x0078, 0x0160=>0x0161, 0x016E=>0x016F, 0x0391=>0x03B1, 0x0407=>0x0457,    0x0172=>0x0173, 0x0178=>0x00FF, 0x004F=>0x006F, 0x041B=>0x043B, 0x0395=>0x03B5,    0x0425=>0x0445, 0x0120=>0x0121, 0x017D=>0x017E, 0x017B=>0x017C, 0x0396=>0x03B6,    0x0392=>0x03B2, 0x0388=>0x03AD, 0x1E84=>0x1E85, 0x0174=>0x0175, 0x0051=>0x0071,    0x0417=>0x0437, 0x1E0A=>0x1E0B, 0x0147=>0x0148, 0x0104=>0x0105, 0x0408=>0x0458,    0x014C=>0x014D, 0x00CD=>0x00ED, 0x0059=>0x0079, 0x010A=>0x010B, 0x038F=>0x03CE,    0x0052=>0x0072, 0x0410=>0x0430, 0x0405=>0x0455, 0x0402=>0x0452, 0x0126=>0x0127,    0x0136=>0x0137, 0x012A=>0x012B, 0x038A=>0x03AF, 0x042B=>0x044B, 0x004C=>0x006C,    0x0397=>0x03B7, 0x0124=>0x0125, 0x0218=>0x0219, 0x00DB=>0x00FB, 0x011E=>0x011F,    0x041E=>0x043E, 0x1E40=>0x1E41, 0x039D=>0x03BD, 0x0106=>0x0107, 0x03AB=>0x03CB,    0x0426=>0x0446, 0x00DE=>0x00FE, 0x00C7=>0x00E7, 0x03AA=>0x03CA, 0x0421=>0x0441,    0x0412=>0x0432, 0x010E=>0x010F, 0x00D8=>0x00F8, 0x0057=>0x0077, 0x011A=>0x011B,    0x0054=>0x0074, 0x004A=>0x006A, 0x040B=>0x045B, 0x0406=>0x0456, 0x0102=>0x0103,    0x039B=>0x03BB, 0x00D1=>0x00F1, 0x041D=>0x043D, 0x038C=>0x03CC, 0x00C9=>0x00E9,    0x00D0=>0x00F0, 0x0407=>0x0457, 0x0122=>0x0123,            );    }    $uni = utf8_to_unicode($string);    if ( !$uni ) {        return FALSE;    }    $cnt = count($uni);    for ($i=0; $i < $cnt; $i++){        if ( isset($UTF8_UPPER_TO_LOWER[$uni[$i]]) ) {            $uni[$i] = $UTF8_UPPER_TO_LOWER[$uni[$i]];        }    }    return utf8_from_unicode($uni);}//---------------------------------------------------------------/*** UTF-8 aware alternative to strtoupper* Make a string uppercase* Note: The concept of a characters "case" only exists is some alphabets* such as Latin, Greek, Cyrillic, Armenian and archaic Georgian - it does* not exist in the Chinese alphabet, for example. See Unicode Standard* Annex #21: Case Mappings* Note: requires utf8_to_unicode and utf8_from_unicode* @author Andreas Gohr <andi@splitbrain.org>* @param string* @return mixed either string in lowercase or FALSE is UTF-8 invalid* @see http://www.php.net/strtoupper* @see utf8_to_unicode* @see utf8_from_unicode* @see http://www.unicode.org/reports/tr21/tr21-5.html* @see http://dev.splitbrain.org/view/darcs/dokuwiki/inc/utf8.php* @package utf8* @subpackage strings*/function utf8_strtoupper($string){    static $UTF8_LOWER_TO_UPPER = NULL;    if ( is_null($UTF8_LOWER_TO_UPPER) ) {        $UTF8_LOWER_TO_UPPER = array(    0x0061=>0x0041, 0x03C6=>0x03A6, 0x0163=>0x0162, 0x00E5=>0x00C5, 0x0062=>0x0042,    0x013A=>0x0139, 0x00E1=>0x00C1, 0x0142=>0x0141, 0x03CD=>0x038E, 0x0101=>0x0100,    0x0491=>0x0490, 0x03B4=>0x0394, 0x015B=>0x015A, 0x0064=>0x0044, 0x03B3=>0x0393,    0x00F4=>0x00D4, 0x044A=>0x042A, 0x0439=>0x0419, 0x0113=>0x0112, 0x043C=>0x041C,    0x015F=>0x015E, 0x0144=>0x0143, 0x00EE=>0x00CE, 0x045E=>0x040E, 0x044F=>0x042F,    0x03BA=>0x039A, 0x0155=>0x0154, 0x0069=>0x0049, 0x0073=>0x0053, 0x1E1F=>0x1E1E,    0x0135=>0x0134, 0x0447=>0x0427, 0x03C0=>0x03A0, 0x0438=>0x0418, 0x00F3=>0x00D3,    0x0440=>0x0420, 0x0454=>0x0404, 0x0435=>0x0415, 0x0449=>0x0429, 0x014B=>0x014A,    0x0431=>0x0411, 0x0459=>0x0409, 0x1E03=>0x1E02, 0x00F6=>0x00D6, 0x00F9=>0x00D9,    0x006E=>0x004E, 0x0451=>0x0401, 0x03C4=>0x03A4, 0x0443=>0x0423, 0x015D=>0x015C,    0x0453=>0x0403, 0x03C8=>0x03A8, 0x0159=>0x0158, 0x0067=>0x0047, 0x00E4=>0x00C4,    0x03AC=>0x0386, 0x03AE=>0x0389, 0x0167=>0x0166, 0x03BE=>0x039E, 0x0165=>0x0164,    0x0117=>0x0116, 0x0109=>0x0108, 0x0076=>0x0056, 0x00FE=>0x00DE, 0x0157=>0x0156,    0x00FA=>0x00DA, 0x1E61=>0x1E60, 0x1E83=>0x1E82, 0x00E2=>0x00C2, 0x0119=>0x0118,    0x0146=>0x0145, 0x0070=>0x0050, 0x0151=>0x0150, 0x044E=>0x042E, 0x0129=>0x0128,    0x03C7=>0x03A7, 0x013E=>0x013D, 0x0442=>0x0422, 0x007A=>0x005A, 0x0448=>0x0428,    0x03C1=>0x03A1, 0x1E81=>0x1E80, 0x016D=>0x016C, 0x00F5=>0x00D5, 0x0075=>0x0055,    0x0177=>0x0176, 0x00FC=>0x00DC, 0x1E57=>0x1E56, 0x03C3=>0x03A3, 0x043A=>0x041A,    0x006D=>0x004D, 0x016B=>0x016A, 0x0171=>0x0170, 0x0444=>0x0424, 0x00EC=>0x00CC,    0x0169=>0x0168, 0x03BF=>0x039F, 0x006B=>0x004B, 0x00F2=>0x00D2, 0x00E0=>0x00C0,    0x0434=>0x0414, 0x03C9=>0x03A9, 0x1E6B=>0x1E6A, 0x00E3=>0x00C3, 0x044D=>0x042D,    0x0436=>0x0416, 0x01A1=>0x01A0, 0x010D=>0x010C, 0x011D=>0x011C, 0x00F0=>0x00D0,    0x013C=>0x013B, 0x045F=>0x040F, 0x045A=>0x040A, 0x00E8=>0x00C8, 0x03C5=>0x03A5,    0x0066=>0x0046, 0x00FD=>0x00DD, 0x0063=>0x0043, 0x021B=>0x021A, 0x00EA=>0x00CA,    0x03B9=>0x0399, 0x017A=>0x0179, 0x00EF=>0x00CF, 0x01B0=>0x01AF, 0x0065=>0x0045,    0x03BB=>0x039B, 0x03B8=>0x0398, 0x03BC=>0x039C, 0x045C=>0x040C, 0x043F=>0x041F,    0x044C=>0x042C, 0x00FE=>0x00DE, 0x00F0=>0x00D0, 0x1EF3=>0x1EF2, 0x0068=>0x0048,    0x00EB=>0x00CB, 0x0111=>0x0110, 0x0433=>0x0413, 0x012F=>0x012E, 0x00E6=>0x00C6,    0x0078=>0x0058, 0x0161=>0x0160, 0x016F=>0x016E, 0x03B1=>0x0391, 0x0457=>0x0407,    0x0173=>0x0172, 0x00FF=>0x0178, 0x006F=>0x004F, 0x043B=>0x041B, 0x03B5=>0x0395,    0x0445=>0x0425, 0x0121=>0x0120, 0x017E=>0x017D, 0x017C=>0x017B, 0x03B6=>0x0396,    0x03B2=>0x0392, 0x03AD=>0x0388, 0x1E85=>0x1E84, 0x0175=>0x0174, 0x0071=>0x0051,    0x0437=>0x0417, 0x1E0B=>0x1E0A, 0x0148=>0x0147, 0x0105=>0x0104, 0x0458=>0x0408,    0x014D=>0x014C, 0x00ED=>0x00CD, 0x0079=>0x0059, 0x010B=>0x010A, 0x03CE=>0x038F,    0x0072=>0x0052, 0x0430=>0x0410, 0x0455=>0x0405, 0x0452=>0x0402, 0x0127=>0x0126,    0x0137=>0x0136, 0x012B=>0x012A, 0x03AF=>0x038A, 0x044B=>0x042B, 0x006C=>0x004C,    0x03B7=>0x0397, 0x0125=>0x0124, 0x0219=>0x0218, 0x00FB=>0x00DB, 0x011F=>0x011E,    0x043E=>0x041E, 0x1E41=>0x1E40, 0x03BD=>0x039D, 0x0107=>0x0106, 0x03CB=>0x03AB,    0x0446=>0x0426, 0x00FE=>0x00DE, 0x00E7=>0x00C7, 0x03CA=>0x03AA, 0x0441=>0x0421,    0x0432=>0x0412, 0x010F=>0x010E, 0x00F8=>0x00D8, 0x0077=>0x0057, 0x011B=>0x011A,    0x0074=>0x0054, 0x006A=>0x004A, 0x045B=>0x040B, 0x0456=>0x0406, 0x0103=>0x0102,    0x03BB=>0x039B, 0x00F1=>0x00D1, 0x043D=>0x041D, 0x03CC=>0x038C, 0x00E9=>0x00C9,    0x00F0=>0x00D0, 0x0457=>0x0407, 0x0123=>0x0122,            );    }    $uni = utf8_to_unicode($string);    if ( !$uni ) {        return FALSE;    }    $cnt = count($uni);    for ($i=0; $i < $cnt; $i++){        if( isset($UTF8_LOWER_TO_UPPER[$uni[$i]]) ) {            $uni[$i] = $UTF8_LOWER_TO_UPPER[$uni[$i]];        }    }    return utf8_from_unicode($uni);}
<?php/** * @package     Joomla.Site * @subpackage  com_users * * @copyright   Copyright (C) 2005 - 2013 Open Source Matters, Inc. All rights reserved. * @license     GNU General Public License version 2 or later; see LICENSE.txt */defined('_JEXEC') or die;JHtml::_('behavior.keepalive');?><div class="login <?php echo $this->pageclass_sfx?>">	<?php if ($this->params->get('show_page_heading')) : ?>	<div class="page-header">		<h1>			<?php echo $this->escape($this->params->get('page_heading')); ?>		</h1>	</div>	<?php endif; ?>	<?php if (($this->params->get('logindescription_show') == 1 && str_replace(' ', '', $this->params->get('login_description')) != '') || $this->params->get('login_image') != '') : ?>	<div class="login-description">	<?php endif; ?>		<?php if ($this->params->get('logindescription_show') == 1) : ?>			<?php echo $this->params->get('login_description'); ?>		<?php endif; ?>		<?php if (($this->params->get('login_image') != '')) :?>			<img src="<?php echo $this->escape($this->params->get('login_image')); ?>" class="login-image" alt="<?php echo JTEXT::_('COM_USER_LOGIN_IMAGE_ALT')?>"/>		<?php endif; ?>	<?php if (($this->params->get('logindescription_show') == 1 && str_replace(' ', '', $this->params->get('login_description')) != '') || $this->params->get('login_image') != '') : ?>	</div>	<?php endif; ?>	<form action="<?php echo JRoute::_('index.php?option=com_users&task=user.login'); ?>" method="post" class="form-horizontal">		<fieldset class="well">			<?php foreach ($this->form->getFieldset('credentials') as $field) : ?>				<?php if (!$field->hidden) : ?>					<div class="control-group">						<div class="control-label">							<?php echo $field->label; ?>						</div>						<div class="controls">							<?php echo $field->input; ?>						</div>					</div>				<?php endif; ?>			<?php endforeach; ?>			<div class="control-group">				<div class="controls">					<button type="submit" class="btn btn-primary"><?php echo JText::_('JLOGIN'); ?></button>				</div>			</div>			<input type="hidden" name="return" value="<?php echo base64_encode($this->params->get('login_redirect_url', $this->form->getValue('return'))); ?>" />			<?php echo JHtml::_('form.token'); ?>		</fieldset>	</form></div><div>	<ul class="nav nav-tabs nav-stacked">		<li>			<a href="<?php echo JRoute::_('index.php?option=com_users&view=reset'); ?>">			<?php echo JText::_('COM_USERS_LOGIN_RESET'); ?></a>		</li>		<li>			<a href="<?php echo JRoute::_('index.php?option=com_users&view=remind'); ?>">			<?php echo JText::_('COM_USERS_LOGIN_REMIND'); ?></a>		</li>		<?php		$usersConfig = JComponentHelper::getParams('com_users');		if ($usersConfig->get('allowUserRegistration')) : ?>		<li>			<a href="<?php echo JRoute::_('index.php?option=com_users&view=registration'); ?>">				<?php echo JText::_('COM_USERS_LOGIN_REGISTER'); ?></a>		</li>		<?php endif; ?>	</ul></div>
<?php/** * @package     Joomla.Platform * @subpackage  Filter * * @copyright   Copyright (C) 2005 - 2013 Open Source Matters, Inc. All rights reserved. * @license     GNU General Public License version 2 or later; see LICENSE */defined('JPATH_PLATFORM') or die;/** * JFilterOutput * * @package     Joomla.Platform * @subpackage  Filter * @since       11.1 */class JFilterOutput{	/**	 * Makes an object safe to display in forms	 *	 * Object parameters that are non-string, array, object or start with underscore	 * will be converted	 *	 * @param   object   &$mixed        An object to be parsed	 * @param   integer  $quote_style   The optional quote style for the htmlspecialchars function	 * @param   mixed    $exclude_keys  An optional string single field name or array of field names not	 *                                  to be parsed (eg, for a textarea)	 *	 * @return  void	 *	 * @since   11.1	 */	public static function objectHTMLSafe(&$mixed, $quote_style = ENT_QUOTES, $exclude_keys = '')	{		if (is_object($mixed))		{			foreach (get_object_vars($mixed) as $k => $v)			{				if (is_array($v) || is_object($v) || $v == null || substr($k, 1, 1) == '_')				{					continue;				}				if (is_string($exclude_keys) && $k == $exclude_keys)				{					continue;				}				elseif (is_array($exclude_keys) && in_array($k, $exclude_keys))				{					continue;				}				$mixed->$k = htmlspecialchars($v, $quote_style, 'UTF-8');			}		}	}	/**	 * This method processes a string and replaces all instances of & with &amp; in links only.	 *	 * @param   string  $input  String to process	 *	 * @return  string  Processed string	 *	 * @since   11.1	 */	public static function linkXHTMLSafe($input)	{		$regex = 'href="([^"]*(&(amp;){0})[^"]*)*?"';		return preg_replace_callback("#$regex#i", array('JFilterOutput', '_ampReplaceCallback'), $input);	}	/**	 * This method processes a string and replaces all accented UTF-8 characters by unaccented	 * ASCII-7 "equivalents", whitespaces are replaced by hyphens and the string is lowercase.	 *	 * @param   string  $string  String to process	 *	 * @return  string  Processed string	 *	 * @since   11.1	 */	public static function stringURLSafe($string)	{		// Remove any '-' from the string since they will be used as concatenaters		$str = str_replace('-', ' ', $string);		$lang = JFactory::getLanguage();		$str = $lang->transliterate($str);		// Trim white spaces at beginning and end of alias and make lowercase		$str = trim(JString::strtolower($str));		// Remove any duplicate whitespace, and ensure all characters are alphanumeric		$str = preg_replace('/(\s|[^A-Za-z0-9\-])+/', '-', $str);		// Trim dashes at beginning and end of alias		$str = trim($str, '-');		return $str;	}	/**	 * This method implements unicode slugs instead of transliteration.	 *	 * @param   string  $string  String to process	 *	 * @return  string  Processed string	 *	 * @since   11.1	 */	public static function stringURLUnicodeSlug($string)	{		// Replace double byte whitespaces by single byte (East Asian languages)		$str = preg_replace('/\xE3\x80\x80/', ' ', $string);		// Remove any '-' from the string as they will be used as concatenator.		// Would be great to let the spaces in but only Firefox is friendly with this		$str = str_replace('-', ' ', $str);		// Replace forbidden characters by whitespaces		$str = preg_replace('#[:\#\*"@+=;!><&\.%()\]\/\'\\\\|\[]#', "\x20", $str);		// Delete all '?'		$str = str_replace('?', '', $str);		// Trim white spaces at beginning and end of alias and make lowercase		$str = trim(JString::strtolower($str));		// Remove any duplicate whitespace and replace whitespaces by hyphens		$str = preg_replace('#\x20+#', '-', $str);		return $str;	}	/**	 * Replaces &amp; with & for XHTML compliance	 *	 * @param   string  $text  Text to process	 *	 * @return  string  Processed string.	 *	 * @since   11.1	 *	 * @todo There must be a better way???	 */	public static function ampReplace($text)	{		$text = str_replace('&&', '*--*', $text);		$text = str_replace('&#', '*-*', $text);		$text = str_replace('&amp;', '&', $text);		$text = preg_replace('|&(?![\w]+;)|', '&amp;', $text);		$text = str_replace('*-*', '&#', $text);		$text = str_replace('*--*', '&&', $text);		return $text;	}	/**	 * Callback method for replacing & with &amp; in a string	 *	 * @param   string  $m  String to process	 *	 * @return  string  Replaced string	 *	 * @since   11.1	 */	public static function _ampReplaceCallback($m)	{		$rx = '&(?!amp;)';		return preg_replace('#' . $rx . '#', '&amp;', $m[0]);	}	/**	 * Cleans text of all formatting and scripting code	 *	 * @param   string  &$text  Text to clean	 *	 * @return  string  Cleaned text.	 *	 * @since   11.1	 */	public static function cleanText(&$text)	{		$text = preg_replace("'<script[^>]*>.*?</script>'si", '', $text);		$text = preg_replace('/<a\s+.*?href="([^"]+)"[^>]*>([^<]+)<\/a>/is', '\2 (\1)', $text);		$text = preg_replace('/<!--.+?-->/', '', $text);		$text = preg_replace('/{.+?}/', '', $text);		$text = preg_replace('/&nbsp;/', ' ', $text);		$text = preg_replace('/&amp;/', ' ', $text);		$text = preg_replace('/&quot;/', ' ', $text);		$text = strip_tags($text);		$text = htmlspecialchars($text, ENT_COMPAT, 'UTF-8');		return $text;	}	/**	 * Strip img-tags from string	 *	 * @param   string  $string  Sting to be cleaned.	 *	 * @return  string  Cleaned string	 *	 * @since   11.1	 */	public static function stripImages($string)	{		return preg_replace('#(<[/]?img.*>)#U', '', $string);	}	/**	 * Strip iframe-tags from string	 *	 * @param   string  $string  Sting to be cleaned.	 *	 * @return  string  Cleaned string	 *	 * @since   12.2	 */	public static function stripIframes($string)	{		return preg_replace('#(<[/]?iframe.*>)#U', '', $string);	}}
<?php/** * @package     Joomla.Platform * @subpackage  Log * * @copyright   Copyright (C) 2005 - 2013 Open Source Matters, Inc. All rights reserved. * @license     GNU General Public License version 2 or later; see LICENSE */defined('JPATH_PLATFORM') or die;/** * Joomla! Log Entry class * * This class is designed to hold log entries for either writing to an engine, or for * supported engines, retrieving lists and building in memory (PHP based) search operations. * * @package     Joomla.Platform * @subpackage  Log * @since       11.1 */class JLogEntry{	/**	 * Application responsible for log entry.	 * @var    string	 * @since  11.1	 */	public $category;	/**	 * The date the message was logged.	 * @var    JDate	 * @since  11.1	 */	public $date;	/**	 * Message to be logged.	 * @var    string	 * @since  11.1	 */	public $message;	/**	 * The priority of the message to be logged.	 * @var    string	 * @since  11.1	 * @see    $priorities	 */	public $priority = JLog::INFO;	/**	 * List of available log priority levels [Based on the Syslog default levels].	 * @var    array	 * @since  11.1	 */	protected $priorities = array(		JLog::EMERGENCY,		JLog::ALERT,		JLog::CRITICAL,		JLog::ERROR,		JLog::WARNING,		JLog::NOTICE,		JLog::INFO,		JLog::DEBUG	);	/**	 * Constructor	 *	 * @param   string  $message   The message to log.	 * @param   string  $priority  Message priority based on {$this->priorities}.	 * @param   string  $category  Type of entry	 * @param   string  $date      Date of entry (defaults to now if not specified or blank)	 *	 * @since   11.1	 */	public function __construct($message, $priority = JLog::INFO, $category = '', $date = null)	{		$this->message = (string) $message;		// Sanitize the priority.		if (!in_array($priority, $this->priorities, true))		{			$priority = JLog::INFO;		}		$this->priority = $priority;		// Sanitize category if it exists.		if (!empty($category))		{			$this->category = (string) strtolower(preg_replace('/[^A-Z0-9_\.-]/i', '', $category));		}		// Get the date as a JDate object.		$this->date = new JDate($date ? $date : 'now');	}}
<?php/** * @package     Joomla.Site * @subpackage  com_weblinks * * @copyright   Copyright (C) 2005 - 2013 Open Source Matters, Inc. All rights reserved. * @license     GNU General Public License version 2 or later; see LICENSE.txt */defined('_JEXEC') or die;JHtml::addIncludePath(JPATH_COMPONENT.'/helpers');?><div class="weblink-category<?php echo $this->pageclass_sfx;?>"><?php if ($this->params->get('show_page_heading')) : ?><h1>	<?php echo $this->escape($this->params->get('page_heading')); ?></h1><?php endif; ?><?php if ($this->params->get('show_category_title', 1)) : ?><h2>	<?php echo JHtml::_('content.prepare', $this->category->title, '', 'com_weblinks.category'); ?></h2><?php endif; ?><?php if ($this->params->get('show_description', 1) || $this->params->def('show_description_image', 1)) : ?>	<div class="category-desc">	<?php if ($this->params->get('show_description_image') && $this->category->getParams()->get('image')) : ?>		<img src="<?php echo $this->category->getParams()->get('image'); ?>"/>	<?php endif; ?>	<?php if ($this->params->get('show_description') && $this->category->description) : ?>		<?php echo JHtml::_('content.prepare', $this->category->description, '', 'com_weblinks.category'); ?>	<?php endif; ?>	<div class="clr"></div>	</div><?php endif; ?><?php echo $this->loadTemplate('items'); ?><?php if (!empty($this->children[$this->category->id])&& $this->maxLevel != 0) : ?>	<div class="cat-children">	<h3><?php echo JText::_('JGLOBAL_SUBCATEGORIES'); ?></h3>	<?php echo $this->loadTemplate('children'); ?>	</div><?php endif; ?></div>
<?php/** * @package     Joomla.Site * @subpackage  Templates.beez3 * * @copyright   Copyright (C) 2005 - 2013 Open Source Matters, Inc. All rights reserved. * @license     GNU General Public License version 2 or later; see LICENSE.txt */defined('_JEXEC') or die;$params =& $this->item->params;$app = JFactory::getApplication();JHtml::addIncludePath(JPATH_COMPONENT . '/helpers');?><div class="items-more"><h3><?php echo JText::_('COM_CONTENT_MORE_ARTICLES'); ?></h3><ol><?php	foreach ($this->link_items as &$item) :?>		 <li>		  		<a href="<?php echo JRoute::_(ContentHelperRoute::getArticleRoute($item->slug, $item->catid)); ?>">			<?php echo $item->title; ?></a>		</li><?php endforeach; ?>	</ol></div>
<?php/** * @package    Joomla.Installation * * @copyright  Copyright (C) 2005 - 2013 Open Source Matters, Inc. All rights reserved. * @license    GNU General Public License version 2 or later; see LICENSE.txt */defined('_JEXEC') or die;/* @var InstallationViewPreinstallHtml $this */?><div class="btn-toolbar">	<div class="btn-group pull-right">		<a href="#" class="btn btn-primary" onclick="Install.submitform();" title="<?php echo JText::_('JCheck_Again'); ?>"><i class="icon-refresh icon-white"></i> <?php echo JText::_('JCheck_Again'); ?></a>	</div></div><form action="index.php" method="post" id="languageForm" class="form-horizontal">	<div class="control-group">		<label for="jform_language" class="control-label"><?php echo JText::_('INSTL_SELECT_LANGUAGE_TITLE'); ?></label>		<div class="controls">			<?php echo $this->form->getInput('language'); ?>		</div>	</div>	<input type="hidden" name="view" value="preinstall" />	<input type="hidden" name="task" value="setlanguage" />	<?php echo JHtml::_('form.token'); ?></form><form action="index.php" method="post" id="adminForm" class="form-horizontal">	<div class="row-fluid">		<div class="span6">			<h3><?php echo JText::_('INSTL_PRECHECK_TITLE'); ?></h3>			<hr class="hr-condensed" />			<p class="install-text">				<?php echo JText::_('INSTL_PRECHECK_DESC'); ?>			</p>			<table class="table table-striped table-condensed">				<tbody>					<?php foreach ($this->options as $option) : ?>					<tr>						<td class="item">							<?php echo $option->label; ?>						</td>						<td>							<span class="label label-<?php echo ($option->state) ? 'success' : 'important'; ?>">								<?php echo JText::_(($option->state) ? 'JYES' : 'JNO'); ?>								<?php if ($option->notice):?>									<i class="icon-info-sign icon-white hasTooltip" title="<?php echo $option->notice; ?>"></i>								<?php endif;?>							</span>						</td>					</tr>					<?php endforeach; ?>				</tbody>				<tfoot>					<tr>						<td colspan="2"></td>					</tr>				</tfoot>			</table>		</div>		<div class="span6">			<h3><?php echo JText::_('INSTL_PRECHECK_RECOMMENDED_SETTINGS_TITLE'); ?></h3>			<hr class="hr-condensed" />			<p class="install-text">				<?php echo JText::_('INSTL_PRECHECK_RECOMMENDED_SETTINGS_DESC'); ?>			</p>			<table class="table table-striped table-condensed">				<thead>					<tr>						<th>							<?php echo JText::_('INSTL_PRECHECK_DIRECTIVE'); ?>						</th>						<th>							<?php echo JText::_('INSTL_PRECHECK_RECOMMENDED'); ?>						</th>						<th>							<?php echo JText::_('INSTL_PRECHECK_ACTUAL'); ?>						</th>					</tr>				</thead>				<tbody>					<?php foreach ($this->settings as $setting) : ?>					<tr>						<td>							<?php echo $setting->label; ?>						</td>						<td>							<span class="label label-success disabled">								<?php echo JText::_(($setting->recommended) ? 'JON' : 'JOFF'); ?>							</span>						</td>						<td>							<span class="label label-<?php echo ($setting->state === $setting->recommended) ? 'success' : 'warning'; ?>">								<?php echo JText::_(($setting->state) ? 'JON' : 'JOFF'); ?>							</span>						</td>					</tr>				<?php endforeach; ?>				</tbody>				<tfoot>					<tr>						<td colspan="3"></td>					</tr>				</tfoot>			</table>		</div>	</div>	<input type="hidden" name="task" value="preinstall" />	<?php echo JHtml::_('form.token'); ?></form>
<?php/** * @package     Joomla.Platform * @subpackage  Image * * @copyright   Copyright (C) 2005 - 2013 Open Source Matters, Inc. All rights reserved. * @license     GNU General Public License version 2 or later; see LICENSE */defined('JPATH_PLATFORM') or die;/** * Image Filter class to emboss an image. * * @package     Joomla.Platform * @subpackage  Image * @since       11.3 */class JImageFilterEmboss extends JImageFilter{	/**	 * Method to apply a filter to an image resource.	 *	 * @param   array  $options  An array of options for the filter.	 *	 * @return  void	 *	 * @since   11.3	 * @throws  RuntimeException	 */	public function execute(array $options = array())	{		// Verify that image filter support for PHP is available.		if (!function_exists('imagefilter'))		{			JLog::add('The imagefilter function for PHP is not available.', JLog::ERROR);			throw new RuntimeException('The imagefilter function for PHP is not available.');		}		// Perform the emboss filter.		imagefilter($this->handle, IMG_FILTER_EMBOSS);	}}
<?php/** * @package     Joomla.Administrator * @subpackage  com_media * * @copyright   Copyright (C) 2005 - 2013 Open Source Matters, Inc. All rights reserved. * @license     GNU General Public License version 2 or later; see LICENSE.txt */defined('_JEXEC') or die;$input  = JFactory::getApplication()->input;$user   = JFactory::getUser();$asset  = $input->get('asset');$author = $input->get('author');// Access check.if (!$user->authorise('core.manage', 'com_media')	&&	(!$asset or (			!$user->authorise('core.edit', $asset)		&&	!$user->authorise('core.create', $asset)		&& 	count($user->getAuthorisedCategories($asset, 'core.create')) == 0)		&&	!($user->id == $author && $user->authorise('core.edit.own', $asset)))){	return JError::raiseWarning(403, JText::_('JERROR_ALERTNOAUTHOR'));}$params = JComponentHelper::getParams('com_media');// Load the helper classrequire_once JPATH_COMPONENT_ADMINISTRATOR . '/helpers/media.php';// Set the path definitions$popup_upload = $input->get('pop_up', null);$path = 'file_path';$view = $input->get('view');if (substr(strtolower($view), 0, 6) == 'images' || $popup_upload == 1){	$path = 'image_path';}define('COM_MEDIA_BASE',    JPATH_ROOT . '/' . $params->get($path, 'images'));define('COM_MEDIA_BASEURL', JURI::root() . $params->get($path, 'images'));$controller	= JControllerLegacy::getInstance('Media', array('base_path' => JPATH_COMPONENT_ADMINISTRATOR));$controller->execute($input->get('task'));$controller->redirect();
<?php/** * @package     Joomla.Administrator * @subpackage  com_contact * * @copyright   Copyright (C) 2005 - 2013 Open Source Matters, Inc. All rights reserved. * @license     GNU General Public License version 2 or later; see LICENSE.txt */defined('JPATH_BASE') or die;/** * Supports an HTML select list of contacts * * @package     Joomla.Administrator * @subpackage  com_contact * @since       1.6 */class JFormFieldOrdering extends JFormField{	/**	 * The form field type.	 *	 * @var		string	 * @since   1.6	 */	protected $type = 'Ordering';	/**	 * Method to get the field input markup.	 *	 * @return  string	The field input markup.	 * @since   1.6	 */	protected function getInput()	{		$html = array();		$attr = '';		// Initialize some field attributes.		$attr .= $this->element['class'] ? ' class="'.(string) $this->element['class'].'"' : '';		$attr .= ((string) $this->element['disabled'] == 'true') ? ' disabled="disabled"' : '';		$attr .= $this->element['size'] ? ' size="'.(int) $this->element['size'].'"' : '';		// Initialize JavaScript field attributes.		$attr .= $this->element['onchange'] ? ' onchange="'.(string) $this->element['onchange'].'"' : '';		// Get some field values from the form.		$contactId	= (int) $this->form->getValue('id');		$categoryId	= (int) $this->form->getValue('catid');		// Build the query for the ordering list.		$query = 'SELECT ordering AS value, name AS text' .				' FROM #__contact_details' .				' WHERE catid = ' . (int) $categoryId .				' ORDER BY ordering';		// Create a read-only list (no name) with a hidden input to store the value.		if ((string) $this->element['readonly'] == 'true')		{			$html[] = JHtml::_('list.ordering', '', $query, trim($attr), $this->value, $contactId ? 0 : 1);			$html[] = '<input type="hidden" name="'.$this->name.'" value="'.$this->value.'"/>';		}		// Create a regular list.		else {			$html[] = JHtml::_('list.ordering', $this->name, $query, trim($attr), $this->value, $contactId ? 0 : 1);		}		return implode($html);	}}
<?php/** * @package     Joomla.Platform * @subpackage  Document * * @copyright   Copyright (C) 2005 - 2013 Open Source Matters, Inc. All rights reserved. * @license     GNU General Public License version 2 or later; see LICENSE */defined('JPATH_PLATFORM') or die;/** * JDocumentRenderer_Atom is a feed that implements the atom specification * * Please note that just by using this class you won't automatically * produce valid atom files. For example, you have to specify either an editor * for the feed or an author for every single feed item. * * @package     Joomla.Platform * @subpackage  Document * @see         http://www.atomenabled.org/developers/syndication/atom-format-spec.php * @since       11.1 */class JDocumentRendererAtom extends JDocumentRenderer{	/**	 * Document mime type	 *	 * @var    string	 * @since  11.1	 */	protected $_mime = "application/atom+xml";	/**	 * Render the feed.	 *	 * @param   string  $name     The name of the element to render	 * @param   array   $params   Array of values	 * @param   string  $content  Override the output of the renderer	 *	 * @return  string  The output of the script	 *	 * @see JDocumentRenderer::render()	 * @since   11.1	 */	public function render($name = '', $params = null, $content = null)	{		$app = JFactory::getApplication();		// Gets and sets timezone offset from site configuration		$tz = new DateTimeZone($app->getCfg('offset'));		$now = JFactory::getDate();		$now->setTimeZone($tz);		$data = $this->_doc;		$uri = JURI::getInstance();		$url = $uri->toString(array('scheme', 'user', 'pass', 'host', 'port'));		$syndicationURL = JRoute::_('&format=feed&type=atom');		if ($app->getCfg('sitename_pagetitles', 0) == 1)		{			$title = JText::sprintf('JPAGETITLE', $app->getCfg('sitename'), $data->title);		}		elseif ($app->getCfg('sitename_pagetitles', 0) == 2)		{			$title = JText::sprintf('JPAGETITLE', $data->title, $app->getCfg('sitename'));		}		else		{			$title = $data->title;		}		$feed_title = htmlspecialchars($title, ENT_COMPAT, 'UTF-8');		$feed = "<feed xmlns=\"http://www.w3.org/2005/Atom\" ";		if ($data->language != "")		{			$feed .= " xml:lang=\"" . $data->language . "\"";		}		$feed .= ">\n";		$feed .= "	<title type=\"text\">" . $feed_title . "</title>\n";		$feed .= "	<subtitle type=\"text\">" . htmlspecialchars($data->description, ENT_COMPAT, 'UTF-8') . "</subtitle>\n";		if (empty($data->category) === false)		{			if (is_array($data->category))			{				foreach ($data->category as $cat)				{					$feed .= "	<category term=\"" . htmlspecialchars($cat, ENT_COMPAT, 'UTF-8') . "\" />\n";				}			}			else			{				$feed .= "	<category term=\"" . htmlspecialchars($data->category, ENT_COMPAT, 'UTF-8') . "\" />\n";			}		}		$feed .= "	<link rel=\"alternate\" type=\"text/html\" href=\"" . $url . "\"/>\n";		$feed .= "	<id>" . str_replace(' ', '%20', $data->getBase()) . "</id>\n";		$feed .= "	<updated>" . htmlspecialchars($now->toISO8601(true), ENT_COMPAT, 'UTF-8') . "</updated>\n";		if ($data->editor != "")		{			$feed .= "	<author>\n";			$feed .= "		<name>" . $data->editor . "</name>\n";			if ($data->editorEmail != "")			{				$feed .= "		<email>" . htmlspecialchars($data->editorEmail, ENT_COMPAT, 'UTF-8') . "</email>\n";			}			$feed .= "	</author>\n";		}		$feed .= "	<generator uri=\"http://joomla.org\" version=\"1.6\">" . $data->getGenerator() . "</generator>\n";		$feed .= '	<link rel="self" type="application/atom+xml" href="' . str_replace(' ', '%20', $url . $syndicationURL) . "\"/>\n";		for ($i = 0, $count = count($data->items); $i < $count; $i++)		{			$feed .= "	<entry>\n";			$feed .= "		<title>" . htmlspecialchars(strip_tags($data->items[$i]->title), ENT_COMPAT, 'UTF-8') . "</title>\n";			$feed .= '		<link rel="alternate" type="text/html" href="' . $url . $data->items[$i]->link . "\"/>\n";			if ($data->items[$i]->date == "")			{				$data->items[$i]->date = $now->toUnix();			}			$itemDate = JFactory::getDate($data->items[$i]->date);			$itemDate->setTimeZone($tz);			$feed .= "		<published>" . htmlspecialchars($itemDate->toISO8601(true), ENT_COMPAT, 'UTF-8') . "</published>\n";			$feed .= "		<updated>" . htmlspecialchars($itemDate->toISO8601(true), ENT_COMPAT, 'UTF-8') . "</updated>\n";			if (empty($data->items[$i]->guid) === true)			{				$feed .= "		<id>" . str_replace(' ', '%20', $url . $data->items[$i]->link) . "</id>\n";			}			else			{				$feed .= "		<id>" . htmlspecialchars($data->items[$i]->guid, ENT_COMPAT, 'UTF-8') . "</id>\n";			}			if ($data->items[$i]->author != "")			{				$feed .= "		<author>\n";				$feed .= "			<name>" . htmlspecialchars($data->items[$i]->author, ENT_COMPAT, 'UTF-8') . "</name>\n";				if ($data->items[$i]->authorEmail != "")				{					$feed .= "			<email>" . htmlspecialchars($data->items[$i]->authorEmail, ENT_COMPAT, 'UTF-8') . "</email>\n";				}				$feed .= "		</author>\n";			}			if ($data->items[$i]->description != "")			{				$feed .= "		<summary type=\"html\">" . htmlspecialchars($data->items[$i]->description, ENT_COMPAT, 'UTF-8') . "</summary>\n";				$feed .= "		<content type=\"html\">" . htmlspecialchars($data->items[$i]->description, ENT_COMPAT, 'UTF-8') . "</content>\n";			}			if (empty($data->items[$i]->category) === false)			{				if (is_array($data->items[$i]->category))				{					foreach ($data->items[$i]->category as $cat)					{						$feed .= "		<category term=\"" . htmlspecialchars($cat, ENT_COMPAT, 'UTF-8') . "\" />\n";					}				}				else				{					$feed .= "		<category term=\"" . htmlspecialchars($data->items[$i]->category, ENT_COMPAT, 'UTF-8') . "\" />\n";				}			}			if ($data->items[$i]->enclosure != null)			{				$feed .= "		<link rel=\"enclosure\" href=\"" . $data->items[$i]->enclosure->url . "\" type=\""					. $data->items[$i]->enclosure->type . "\"  length=\"" . $data->items[$i]->enclosure->length . "\" />\n";			}			$feed .= "	</entry>\n";		}		$feed .= "</feed>\n";		return $feed;	}}
<?php/** * @package     Joomla.Site * @subpackage  Templates.beez3 * * @copyright   Copyright (C) 2005 - 2013 Open Source Matters, Inc. All rights reserved. * @license     GNU General Public License version 2 or later; see LICENSE.txt */defined('_JEXEC') or die;$cparams = JComponentHelper::getParams('com_media');?><div class="contact<?php echo $this->pageclass_sfx?>">		<?php $contactLink = ContactHelperRoute::getCategoryRoute($this->contact->catid);?>		<h3>			<span class="contact-category"><a href="<?php echo $contactLink; ?>">				<?php echo $this->escape($this->contact->category_title); ?></a>			</span>		</h3>	<?php if ($this->contact->name && $this->params->get('show_name')) : ?>		<h2>			<span class="contact-name"><?php echo $this->contact->name; ?></span>		</h2>	<?php endif;  ?>	<div class="encyclopedia_col1">		<?php if ($this->contact->image ) : ?>			<div class="contact-image">			<?php // We are going to use the contact address field for the main image caption.				// If we have a caption load the caption behavior. ?>			<?php if ($this->contact->address)			{				JHtml::_('behavior.caption');			}?>				<?php echo JHtml::_('image', $this->contact->image, JText::_('COM_CONTACT_IMAGE_DETAILS'), array('align' => 'middle', 'class' => 'caption', 'title' => $this->contact->address)); ?>			</div>		<?php endif; ?>	</div>	<div class="encyclopedia_col2">		<?php // We are going to use some of the standard content fields in non standard ways. ?>				<div class="contact-miscinfo">						<div class="contact-misc">							<?php echo $this->contact->misc; ?>						</div>					</div>		<?php //Let's use position for the scientific name. ?>		<?php if ($this->contact->con_position && $this->params->get('show_position')) : ?>			<p class="contact-position"><?php echo $this->contact->con_position; ?></p>		<?php endif; ?>		<?php //Let's use state to put the family name.  ?>		<?php if ($this->contact->state && $this->params->get('show_state')) : ?>			<p class="contact-state"><?php echo $this->contact->state; ?></p>		<?php endif; ?>		<?php // Let's use contry to list the main countries it grows in. '?>		<?php if ($this->contact->country && $this->params->get('show_country')) : ?>			<p class="contact-country"><?php echo $this->contact->country; ?></p>		<?php endif; ?>	</div><div class="clr"> </div>	<?php  if ($this->params->get('presentation_style') != 'plain'):?>		<?php  echo  JHtml::_($this->params->get('presentation_style').'.start', 'contact-slider'); ?>	<?php endif ?><div class="encyclopedia_links"><?php echo $this->loadTemplate('links'); ?></div>	<?php if ($this->params->get('presentation_style') != 'plain'):?>			<?php echo JHtml::_($this->params->get('presentation_style').'.end'); ?>			<?php endif; ?></div>
<?php/** * @package     Joomla.Administrator * @subpackage  com_installer * * @copyright   Copyright (C) 2005 - 2013 Open Source Matters, Inc. All rights reserved. * @license     GNU General Public License version 2 or later; see LICENSE.txt */defined('_JEXEC') or die;?><script type="text/javascript">	Joomla.submitbutton = function(pressbutton)	{		var form = document.getElementById('adminForm');		// do field validation		if (form.install_package.value == ""){			alert("<?php echo JText::_('COM_INSTALLER_MSG_INSTALL_PLEASE_SELECT_A_PACKAGE', true); ?>");		}		else		{			form.installtype.value = 'upload';			form.submit();		}	}	Joomla.submitbutton3 = function(pressbutton)	{		var form = document.getElementById('adminForm');		// do field validation		if (form.install_directory.value == ""){			alert("<?php echo JText::_('COM_INSTALLER_MSG_INSTALL_PLEASE_SELECT_A_DIRECTORY', true); ?>");		}		else		{			form.installtype.value = 'folder';			form.submit();		}	}	Joomla.submitbutton4 = function(pressbutton)	{		var form = document.getElementById('adminForm');		// do field validation		if (form.install_url.value == "" || form.install_url.value == "http://"){			alert("<?php echo JText::_('COM_INSTALLER_MSG_INSTALL_ENTER_A_URL', true); ?>");		}		else		{			form.installtype.value = 'url';			form.submit();		}	}</script><form enctype="multipart/form-data" action="<?php echo JRoute::_('index.php?option=com_installer&view=install');?>" method="post" name="adminForm" id="adminForm"><?php if (!empty( $this->sidebar)) : ?>	<div id="j-sidebar-container" class="span2">		<?php echo $this->sidebar; ?>	</div>	<div id="j-main-container" class="span10"><?php else : ?>	<div id="j-main-container"><?php endif;?>	<?php if ($this->ftp) : ?>		<?php echo $this->loadTemplate('ftp'); ?>	<?php endif; ?>	<div class="width-70 fltlft">		<fieldset class="uploadform">			<legend><?php echo JText::_('COM_INSTALLER_UPLOAD_PACKAGE_FILE'); ?></legend>			<label for="install_package"><?php echo JText::_('COM_INSTALLER_PACKAGE_FILE'); ?></label>			<input class="input_box" id="install_package" name="install_package" type="file" size="57" />			<input class="button" type="button" value="<?php echo JText::_('COM_INSTALLER_UPLOAD_AND_INSTALL'); ?>" onclick="Joomla.submitbutton()" />		</fieldset>		<div class="clr"></div>		<fieldset class="uploadform">			<legend><?php echo JText::_('COM_INSTALLER_INSTALL_FROM_DIRECTORY'); ?></legend>			<label for="install_directory"><?php echo JText::_('COM_INSTALLER_INSTALL_DIRECTORY'); ?></label>			<input type="text" id="install_directory" name="install_directory" class="input_box" size="70" value="<?php echo $this->state->get('install.directory'); ?>" />			<input type="button" class="button" value="<?php echo JText::_('COM_INSTALLER_INSTALL_BUTTON'); ?>" onclick="Joomla.submitbutton3()" />		</fieldset>		<div class="clr"></div>		<fieldset class="uploadform">			<legend><?php echo JText::_('COM_INSTALLER_INSTALL_FROM_URL'); ?></legend>			<label for="install_url"><?php echo JText::_('COM_INSTALLER_INSTALL_URL'); ?></label>			<input type="text" id="install_url" name="install_url" class="input_box" size="70" value="http://" />			<input type="button" class="button" value="<?php echo JText::_('COM_INSTALLER_INSTALL_BUTTON'); ?>" onclick="Joomla.submitbutton4()" />		</fieldset>		<input type="hidden" name="type" value="" />		<input type="hidden" name="installtype" value="upload" />		<input type="hidden" name="task" value="install.install" />		<?php echo JHtml::_('form.token'); ?>	</div></div></form>
<?php/** * @package     Joomla.Site * @subpackage  mod_login * * @copyright   Copyright (C) 2005 - 2013 Open Source Matters, Inc. All rights reserved. * @license     GNU General Public License version 2 or later; see LICENSE.txt */defined('_JEXEC') or die;// Include the login functions only oncerequire_once __DIR__ . '/helper.php';$params->def('greeting', 1);$type	= ModLoginHelper::getType();$return	= ModLoginHelper::getReturnURL($params, $type);$user	= JFactory::getUser();$layout = $params->get('layout', 'default');// Logged users must load the logout sublayoutif (!$user->guest){	$layout .= '_logout';}require JModuleHelper::getLayoutPath('mod_login', $layout);
<?php/** * @package     Joomla.Site * @subpackage  mod_weblinks * * @copyright   Copyright (C) 2005 - 2013 Open Source Matters, Inc. All rights reserved. * @license     GNU General Public License version 2 or later; see LICENSE.txt */defined('_JEXEC') or die;// Include the weblinks functions only oncerequire_once __DIR__ . '/helper.php';$list = ModWeblinksHelper::getList($params);if (!count($list)){	return;}$moduleclass_sfx = htmlspecialchars($params->get('moduleclass_sfx'));require JModuleHelper::getLayoutPath('mod_weblinks', $params->get('layout', 'default'));
<?php/** * @package     Joomla.Administrator * @subpackage  com_banners * * @copyright   Copyright (C) 2005 - 2013 Open Source Matters, Inc. All rights reserved. * @license     GNU General Public License version 2 or later; see LICENSE.txt */defined('_JEXEC') or die;/** * Banners master display controller. * * @package     Joomla.Administrator * @subpackage  com_banners * @since       1.6 */class BannersController extends JControllerLegacy{	/**	 * Method to display a view.	 *	 * @param   boolean			If true, the view output will be cached	 * @param   array  An array of safe url parameters and their variable types, for valid values see {@link JFilterInput::clean()}.	 *	 * @return  JController		This object to support chaining.	 * @since   1.5	 */	public function display($cachable = false, $urlparams = false)	{		require_once JPATH_COMPONENT.'/helpers/banners.php';		BannersHelper::updateReset();		$view   = $this->input->get('view', 'banners');		$layout = $this->input->get('layout', 'default');		$id     = $this->input->getInt('id');		// Check for edit form.		if ($view == 'banner' && $layout == 'edit' && !$this->checkEditId('com_banners.edit.banner', $id)) {			// Somehow the person just went to the form - we don't allow that.			$this->setError(JText::sprintf('JLIB_APPLICATION_ERROR_UNHELD_ID', $id));			$this->setMessage($this->getError(), 'error');			$this->setRedirect(JRoute::_('index.php?option=com_banners&view=banners', false));			return false;		}		elseif ($view == 'client' && $layout == 'edit' && !$this->checkEditId('com_banners.edit.client', $id)) {			// Somehow the person just went to the form - we don't allow that.			$this->setError(JText::sprintf('JLIB_APPLICATION_ERROR_UNHELD_ID', $id));			$this->setMessage($this->getError(), 'error');			$this->setRedirect(JRoute::_('index.php?option=com_banners&view=clients', false));			return false;		}		parent::display();		return $this;	}}
<?php/** * @package     Joomla.Platform * @subpackage  Input * * @copyright   Copyright (C) 2005 - 2013 Open Source Matters, Inc. All rights reserved. * @license     GNU General Public License version 2 or later; see LICENSE */defined('JPATH_PLATFORM') or die;/** * Joomla! Input Base Class * * This is an abstracted input class used to manage retrieving data from the application environment. * * @package     Joomla.Platform * @subpackage  Input * @since       11.1 * * @method      integer  getInt()       getInt($name, $default = null)    Get a signed integer. * @method      integer  getUint()      getUint($name, $default = null)   Get an unsigned integer. * @method      float    getFloat()     getFloat($name, $default = null)  Get a floating-point number. * @method      boolean  getBool()      getBool($name, $default = null)   Get a boolean. * @method      string   getWord()      getWord($name, $default = null) * @method      string   getAlnum()     getAlnum($name, $default = null) * @method      string   getCmd()       getCmd($name, $default = null) * @method      string   getBase64()    getBase64($name, $default = null) * @method      string   getString()    getString($name, $default = null) * @method      string   getHtml()      getHtml($name, $default = null) * @method      string   getPath()      getPath($name, $default = null) * @method      string   getUsername()  getUsername($name, $default = null) */class JInput implements Serializable, Countable{	/**	 * Options array for the JInput instance.	 *	 * @var    array	 * @since  11.1	 */	protected $options = array();	/**	 * Filter object to use.	 *	 * @var    JFilterInput	 * @since  11.1	 */	protected $filter = null;	/**	 * Input data.	 *	 * @var    array	 * @since  11.1	 */	protected $data = array();	/**	 * Input objects	 *	 * @var    array	 * @since  11.1	 */	protected $inputs = array();	/**	 * Constructor.	 *	 * @param   array  $source   Source data (Optional, default is $_REQUEST)	 * @param   array  $options  Array of configuration parameters (Optional)	 *	 * @since   11.1	 */	public function __construct($source = null, array $options = array())	{		if (isset($options['filter']))		{			$this->filter = $options['filter'];		}		else		{			$this->filter = JFilterInput::getInstance();		}		if (is_null($source))		{			$this->data = &$_REQUEST;		}		else		{			$this->data = $source;		}		// Set the options for the class.		$this->options = $options;	}	/**	 * Magic method to get an input object	 *	 * @param   mixed  $name  Name of the input object to retrieve.	 *	 * @return  JInput  The request input object	 *	 * @since   11.1	 */	public function __get($name)	{		if (isset($this->inputs[$name]))		{			return $this->inputs[$name];		}		$className = 'JInput' . ucfirst($name);		if (class_exists($className))		{			$this->inputs[$name] = new $className(null, $this->options);			return $this->inputs[$name];		}		$superGlobal = '_' . strtoupper($name);		if (isset($GLOBALS[$superGlobal]))		{			$this->inputs[$name] = new JInput($GLOBALS[$superGlobal], $this->options);			return $this->inputs[$name];		}		// TODO throw an exception	}	/**	 * Get the number of variables.	 *	 * @return  integer  The number of variables in the input.	 *	 * @since   12.2	 * @see     Countable::count()	 */	public function count()	{		return count($this->data);	}	/**	 * Gets a value from the input data.	 *	 * @param   string  $name     Name of the value to get.	 * @param   mixed   $default  Default value to return if variable does not exist.	 * @param   string  $filter   Filter to apply to the value.	 *	 * @return  mixed  The filtered input value.	 *	 * @since   11.1	 */	public function get($name, $default = null, $filter = 'cmd')	{		if (isset($this->data[$name]))		{			return $this->filter->clean($this->data[$name], $filter);		}		return $default;	}	/**	 * Gets an array of values from the request.	 *	 * @param   array  $vars        Associative array of keys and filter types to apply.	 * @param   mixed  $datasource  Array to retrieve data from, or null	 *	 * @return  mixed  The filtered input data.	 *	 * @since   11.1	 */	public function getArray(array $vars, $datasource = null)	{		$results = array();		foreach ($vars as $k => $v)		{			if (is_array($v))			{				if (is_null($datasource))				{					$results[$k] = $this->getArray($v, $this->get($k, null, 'array'));				}				else				{					$results[$k] = $this->getArray($v, $datasource[$k]);				}			}			else			{				if (is_null($datasource))				{					$results[$k] = $this->get($k, null, $v);				}				elseif (isset($datasource[$k]))				{					$results[$k] = $this->filter->clean($datasource[$k], $v);				}				else				{					$results[$k] = $this->filter->clean(null, $v);				}			}		}		return $results;	}	/**	 * Sets a value	 *	 * @param   string  $name   Name of the value to set.	 * @param   mixed   $value  Value to assign to the input.	 *	 * @return  void	 *	 * @since   11.1	 */	public function set($name, $value)	{		$this->data[$name] = $value;	}	/**	 * Define a value. The value will only be set if there's no value for the name or if it is null.	 *	 * @param   string  $name   Name of the value to define.	 * @param   mixed   $value  Value to assign to the input.	 *	 * @return  void	 *	 * @since   12.1	 */	public function def($name, $value)	{		if (isset($this->data[$name]))		{			return;		}		$this->data[$name] = $value;	}	/**	 * Magic method to get filtered input data.	 *	 * @param   string  $name       Name of the filter type prefixed with 'get'.	 * @param   array   $arguments  [0] The name of the variable [1] The default value.	 *	 * @return  mixed   The filtered input value.	 *	 * @since   11.1	 */	public function __call($name, $arguments)	{		if (substr($name, 0, 3) == 'get')		{			$filter = substr($name, 3);			$default = null;			if (isset($arguments[1]))			{				$default = $arguments[1];			}			return $this->get($arguments[0], $default, $filter);		}	}	/**	 * Gets the request method.	 *	 * @return  string   The request method.	 *	 * @since   11.1	 */	public function getMethod()	{		$method = strtoupper($_SERVER['REQUEST_METHOD']);		return $method;	}	/**	 * Method to serialize the input.	 *	 * @return  string  The serialized input.	 *	 * @since   12.1	 */	public function serialize()	{		// Load all of the inputs.		$this->loadAllInputs();		// Remove $_ENV and $_SERVER from the inputs.		$inputs = $this->inputs;		unset($inputs['env']);		unset($inputs['server']);		// Serialize the options, data, and inputs.		return serialize(array($this->options, $this->data, $inputs));	}	/**	 * Method to unserialize the input.	 *	 * @param   string  $input  The serialized input.	 *	 * @return  JInput  The input object.	 *	 * @since   12.1	 */	public function unserialize($input)	{		// Unserialize the options, data, and inputs.		list($this->options, $this->data, $this->inputs) = unserialize($input);		// Load the filter.		if (isset($this->options['filter']))		{			$this->filter = $this->options['filter'];		}		else		{			$this->filter = JFilterInput::getInstance();		}	}	/**	 * Method to load all of the global inputs.	 *	 * @return  void	 *	 * @since   12.1	 */	protected function loadAllInputs()	{		static $loaded = false;		if (!$loaded)		{			// Load up all the globals.			foreach ($GLOBALS as $global => $data)			{				// Check if the global starts with an underscore.				if (strpos($global, '_') === 0)				{					// Convert global name to input name.					$global = strtolower($global);					$global = substr($global, 1);					// Get the input.					$this->$global;				}			}			$loaded = true;		}	}}
<?php/** * @package     Joomla.Administrator * @subpackage  com_messages * * @copyright   Copyright (C) 2005 - 2013 Open Source Matters, Inc. All rights reserved. * @license     GNU General Public License version 2 or later; see LICENSE.txt */defined('_JEXEC') or die;/** * Messages master display controller. * * @package     Joomla.Administrator * @subpackage  com_messages * @since       1.6 */class MessagesController extends JControllerLegacy{	/**	 * Method to display a view.	 *	 * @param   boolean			If true, the view output will be cached	 * @param   array  An array of safe url parameters and their variable types, for valid values see {@link JFilterInput::clean()}.	 *	 * @return  JController		This object to support chaining.	 * @since   1.5	 */	public function display($cachable = false, $urlparams = false)	{		require_once JPATH_COMPONENT.'/helpers/messages.php';		$view   = $this->input->get('view', 'messages');		$layout = $this->input->get('layout', 'default');		$id     = $this->input->getInt('id');		// Check for edit form.		if ($view == 'message' && $layout == 'edit' && !$this->checkEditId('com_messages.edit.message', $id))		{			// Somehow the person just went to the form - we don't allow that.			$this->setError(JText::sprintf('JLIB_APPLICATION_ERROR_UNHELD_ID', $id));			$this->setMessage($this->getError(), 'error');			$this->setRedirect(JRoute::_('index.php?option=com_messages&view=messages', false));			return false;		}		// Load the submenu.		MessagesHelper::addSubmenu($this->input->get('view', 'messages'));		parent::display();	}}
<?php/** * @package     Joomla.Installation * @subpackage  View * * @copyright   Copyright (C) 2005 - 2013 Open Source Matters, Inc. All rights reserved. * @license     GNU General Public License version 2 or later; see LICENSE.txt */defined('_JEXEC') or die;/** * The HTML Joomla Core Install Remove View * * @package     Joomla.Installation * @subpackage  View * @since       3.1 */class InstallationViewRemoveHtml extends JViewHtml{}
<?php/** * @package     Joomla.Site * @subpackage  com_newsfeeds * * @copyright   Copyright (C) 2005 - 2013 Open Source Matters, Inc. All rights reserved. * @license     GNU General Public License version 2 or later; see LICENSE.txt */defined('_JEXEC') or die;/** * Content Component Category Tree * * @package     Joomla.Site * @subpackage  com_newsfeeds * @since       1.6 */class NewsfeedsCategories extends JCategories{	public function __construct($options = array())	{		$options['table'] = '#__newsfeeds';		$options['extension'] = 'com_newsfeeds';		$options['statefield'] = 'published';		parent::__construct($options);	}}
<?php/** * @package     Joomla.Platform * @subpackage  Google * * @copyright   Copyright (C) 2005 - 2013 Open Source Matters, Inc. All rights reserved * @license     GNU General Public License version 2 or later; see LICENSE */defined('JPATH_PLATFORM') or die;/** * Google authentication class abstract * * @package     Joomla.Platform * @subpackage  Google * @since       12.3 */abstract class JGoogleAuth{	/**	 * @var    JRegistry  Options for the Google authentication object.	 * @since  12.3	 */	protected $options;	/**	 * Abstract method to authenticate to Google	 *	 * @return  boolean  True on success.	 *	 * @since   12.3	 */	abstract public function authenticate();	/**	 * Verify if the client has been authenticated	 *	 * @return  boolean  Is authenticated	 *	 * @since   12.3	 */	abstract public function isAuthenticated();	/**	 * Abstract method to retrieve data from Google	 *	 * @param   string  $url      The URL for the request.	 * @param   mixed   $data     The data to include in the request.	 * @param   array   $headers  The headers to send with the request.	 * @param   string  $method   The type of http request to send.	 *	 * @return  mixed  Data from Google.	 *	 * @since   12.3	 */	abstract public function query($url, $data = null, $headers = null, $method = 'get');	/**	 * Get an option from the JGoogleAuth object.	 *	 * @param   string  $key  The name of the option to get.	 *	 * @return  mixed  The option value.	 *	 * @since   12.3	 */	public function getOption($key)	{		return $this->options->get($key);	}	/**	 * Set an option for the JGoogleAuth object.	 *	 * @param   string  $key    The name of the option to set.	 * @param   mixed   $value  The option value to set.	 *	 * @return  JGoogleAuth  This object for method chaining.	 *	 * @since   12.3	 */	public function setOption($key, $value)	{		$this->options->set($key, $value);		return $this;	}}
<?php/** * @package     Joomla.Installation * @subpackage  Controller * * @copyright   Copyright (C) 2005 - 2013 Open Source Matters, Inc. All rights reserved. * @license     GNU General Public License version 2 or later; see LICENSE.txt */defined('_JEXEC') or die;/** * Controller class to set the site data for the Joomla Installer. * * @package     Joomla.Installation * @subpackage  Controller * @since       3.1 */class InstallationControllerSite extends JControllerBase{	/**	 * Execute the controller.	 *	 * @return  void	 *	 * @since   3.1	 */	public function execute()	{		// Get the application		/* @var InstallationApplicationWeb $app */		$app = $this->getApplication();		// Check for request forgeries.		JSession::checkToken() or $app->sendJsonResponse(new Exception(JText::_('JINVALID_TOKEN'), 403));		// Get the setup model.		$model = new InstallationModelSetup;		// Check the form		$model->checkForm('site');		// Redirect to the page.		$r = new stdClass;		$r->view = 'database';		$app->sendJsonResponse($r);	}}
<?php/** * @package     Joomla.Legacy * @subpackage  Base * * @copyright   Copyright (C) 2005 - 2013 Open Source Matters, Inc. All rights reserved. * @license     GNU General Public License version 2 or later; see LICENSE */defined('JPATH_PLATFORM') or die;/** * Abstract observer class to implement the observer design pattern * * @package     Joomla.Legacy * @subpackage  Base * @since       11.1 * @deprecated  12.3 * @codeCoverageIgnore */abstract class JObserver extends JObject{	/**	 * Event object to observe.	 *	 * @var    object	 * @since  11.1	 * @deprecated  12.3	 */	protected $_subject = null;	/**	 * Constructor	 *	 * @param   object  &$subject  The object to observe.	 *	 * @since   11.1	 * @deprecated  12.3	 */	public function __construct(&$subject)	{		// Register the observer ($this) so we can be notified		$subject->attach($this);		// Set the subject to observe		$this->_subject = &$subject;	}	/**	 * Method to update the state of observable objects	 *	 * @param   array  &$args  An array of arguments to pass to the listener.	 *	 * @return  mixed	 *	 * @since   11.1	 * @deprecated  12.3	 */	public abstract function update(&$args);}
<?php/** * @package     Joomla.Installation * @subpackage  View * * @copyright   Copyright (C) 2005 - 2013 Open Source Matters, Inc. All rights reserved. * @license     GNU General Public License version 2 or later; see LICENSE.txt */defined('_JEXEC') or die;/** * The HTML Joomla Core Pre-Install View * * @package     Joomla.Installation * @subpackage  View * @since       3.1 */class InstallationViewPreinstallHtml extends InstallationViewDefault{	/**	 * Array of PHP config options     *     * @var    array	 * @since  3.1	 */	protected $options;	/**	 * Array of PHP settings     *     * @var    array	 * @since  3.1	 */	protected $settings;	/**	 * Method to render the view.	 *	 * @return  string  The rendered view.	 *	 * @since   3.1	 */	public function render()	{		$this->options  = $this->model->getPhpOptions();		$this->settings = $this->model->getPhpSettings();		return parent::render();	}}
<?php/** * Verifies that class members are spaced correctly. * * PHP version 5 * * @category  PHP * @package   PHP_CodeSniffer * @author    Greg Sherwood <gsherwood@squiz.net> * @author    Marc McIntyre <mmcintyre@squiz.net> * @copyright 2006 Squiz Pty Ltd (ABN 77 084 670 600) * @license   http://matrix.squiz.net/developer/tools/php_cs/licence BSD Licence * @version   CVS: $Id: MemberVarSpacingSniff.php 8 2010-11-06 00:40:23Z elkuku $ * @link      http://pear.php.net/package/PHP_CodeSniffer */if(class_exists('PHP_CodeSniffer_Standards_AbstractVariableSniff', true) === false){    throw new PHP_CodeSniffer_Exception('Class PHP_CodeSniffer_Standards_AbstractVariableSniff not found');}/** * Verifies that class members are spaced correctly. * * Example: * <b class="bad">Bad:</b> * class Foo * { *     <b class="bad">private $foo;</b> *     <b class="bad">private $bar;</b> * } * * <b class="good">Good:</b> * class Foo * { *     <b class="good">private $foo;</b> *     <b class="good">             </b> *     <b class="good">private $bar;</b> * } * * @category  PHP * @package   PHP_CodeSniffer * @author    Greg Sherwood <gsherwood@squiz.net> * @author    Marc McIntyre <mmcintyre@squiz.net> * @copyright 2006 Squiz Pty Ltd (ABN 77 084 670 600) * @license   http://matrix.squiz.net/developer/tools/php_cs/licence BSD Licence * @version   Release: 1.3.0RC1 * @link      http://pear.php.net/package/PHP_CodeSniffer */class Joomla_Sniffs_WhiteSpace_MemberVarSpacingSniff extends PHP_CodeSniffer_Standards_AbstractVariableSniff{    /**     * Processes the function tokens within the class.     *     * @param PHP_CodeSniffer_File $phpcsFile The file where this token was found.     * @param integer                  $stackPtr  The position where the token was found.     *     * @return void     */    protected function processMemberVar(PHP_CodeSniffer_File $phpcsFile, $stackPtr)    {        $tokens = $phpcsFile->getTokens();        // There needs to be 1 blank line before the var, not counting comments.        $prevLineToken = null;        for($i = ($stackPtr); $i > 0; $i--)        {            if(in_array($tokens[$i]['code'], PHP_CodeSniffer_Tokens::$commentTokens) === true)            {                // Skip comments.                continue;            }            else if(strpos($tokens[$i]['content'], $phpcsFile->eolChar) === false)            {                // Not the end of the line.                continue;            }            else            {                // If this is a WHITESPACE token, and the token right before                // it is a DOC_COMMENT, then it is just the newline after the                // member var's comment, and can be skipped.                if($tokens[$i]['code'] === T_WHITESPACE                && in_array($tokens[($i - 1)]['code'], PHP_CodeSniffer_Tokens::$commentTokens) === true)                {                    continue;                }                $prevLineToken = $i;                break;            }        }//for        if(is_null($prevLineToken) === true)        {            // Never found the previous line, which means            // there are 0 blank lines before the member var.            $foundLines = 0;        }        else        {            $prevContent = $phpcsFile->findPrevious(array(T_WHITESPACE, T_DOC_COMMENT), $prevLineToken, null, true);            if($tokens[$prevContent]['code'] == T_OPEN_CURLY_BRACKET)            {                $foundLines = 1;            }            else            {                $foundLines  = ($tokens[$prevLineToken]['line'] - $tokens[$prevContent]['line']);            }        }//end if        if($foundLines !== 1)        {            $error = sprintf('Expected 1 blank line before member var; %s found'            , $foundLines);            $phpcsFile->addError($error, $stackPtr, 'After');        }    }//function    /**     * Processes normal variables.     *     * @param PHP_CodeSniffer_File $phpcsFile The file where this token was found.     * @param integer                  $stackPtr  The position where the token was found.     *     * @return void     */    protected function processVariable(PHP_CodeSniffer_File $phpcsFile, $stackPtr)    {        // We don't care about normal variables.        return;    }//function    /**     * Processes variables in double quoted strings.     *     * @param PHP_CodeSniffer_File $phpcsFile The file where this token was found.     * @param integer $stackPtr The position where the token was found.     *     * @return void     */    protected function processVariableInString(PHP_CodeSniffer_File $phpcsFile, $stackPtr)    {        // We don't care about normal variables.        return;    }//function}//class
<?php/** * @package     Joomla.Platform * @subpackage  Data * * @copyright   Copyright (C) 2005 - 2013 Open Source Matters, Inc. All rights reserved * @license     GNU General Public License version 2 or later; see LICENSE */defined('JPATH_PLATFORM') or die;/** * JData is a class that is used to store data but allowing you to access the data * by mimicking the way PHP handles class properties. * * @package     Joomla.Platform * @subpackage  Data * @since       12.3 */class JData implements JDataDumpable, IteratorAggregate, JsonSerializable, Countable{	/**	 * The data properties.	 *	 * @var    array	 * @since  12.3	 */	private $_properties = array();	/**	 * The class constructor.	 *	 * @param   mixed  $properties  Either an associative array or another object	 *                              by which to set the initial properties of the new object.	 *	 * @since   11.1	 * @throws  InvalidArgumentException	 */	public function __construct($properties = array())	{		// Check the properties input.		if (!empty($properties))		{			// Bind the properties.			$this->bind($properties);		}	}	/**	 * The magic get method is used to get a data property.	 *	 * This method is a public proxy for the protected getProperty method.	 *	 * Note: Magic __get does not allow recursive calls. This can be tricky because the error generated by recursing into	 * __get is "Undefined property:  {CLASS}::{PROPERTY}" which is misleading. This is relevant for this class because	 * requesting a non-visible property can trigger a call to a sub-function. If that references the property directly in	 * the object, it will cause a recursion into __get.	 *	 * @param   string  $property  The name of the data property.	 *	 * @return  mixed  The value of the data property, or null if the data property does not exist.	 *	 * @see     JData::getProperty()	 * @since   12.3	 */	public function __get($property)	{		return $this->getProperty($property);	}	/**	 * The magic isset method is used to check the state of an object property.	 *	 * @param   string  $property  The name of the data property.	 *	 * @return  boolean  True if set, otherwise false is returned.	 *	 * @since   12.3	 */	public function __isset($property)	{		return isset($this->_properties[$property]);	}	/**	 * The magic set method is used to set a data property.	 *	 * This is a public proxy for the protected setProperty method.	 *	 * @param   string  $property  The name of the data property.	 * @param   mixed   $value     The value to give the data property.	 *	 * @return  void	 *	 * @see     JData::setProperty()	 * @since   12.3	 */	public function __set($property, $value)	{		$this->setProperty($property, $value);	}	/**	 * The magic unset method is used to unset a data property.	 *	 * @param   string  $property  The name of the data property.	 *	 * @return  void	 *	 * @since   12.3	 */	public function __unset($property)	{		unset($this->_properties[$property]);	}	/**	 * Binds an array or object to this object.	 *	 * @param   mixed    $properties   An associative array of properties or an object.	 * @param   boolean  $updateNulls  True to bind null values, false to ignore null values.	 *	 * @return  JData  Returns itself to allow chaining.	 *	 * @since   12.3	 * @throws  InvalidArgumentException	 */	public function bind($properties, $updateNulls = true)	{		// Check the properties data type.		if (!is_array($properties) && !is_object($properties))		{			throw new InvalidArgumentException(sprintf('%s(%s)', __METHOD__, gettype($properties)));		}		// Check if the object is traversable.		if ($properties instanceof Traversable)		{			// Convert iterator to array.			$properties = iterator_to_array($properties);		}		// Check if the object needs to be converted to an array.		elseif (is_object($properties))		{			// Convert properties to an array.			$properties = (array) $properties;		}		// Bind the properties.		foreach ($properties as $property => $value)		{			// Check if the value is null and should be bound.			if ($value === null && !$updateNulls)			{				continue;			}			// Set the property.			$this->setProperty($property, $value);		}		return $this;	}	/**	 * Dumps the data properties into a stdClass object, recursively if appropriate.	 *	 * @param   integer           $depth   The maximum depth of recursion (default = 3).	 *                                     For example, a depth of 0 will return a stdClass with all the properties in native	 *                                     form. A depth of 1 will recurse into the first level of properties only.	 * @param   SplObjectStorage  $dumped  An array of already serialized objects that is used to avoid infinite loops.	 *	 * @return  stdClass  The data properties as a simple PHP stdClass object.	 *	 * @since   12.3	 */	public function dump($depth = 3, SplObjectStorage $dumped = null)	{		// Check if we should initialise the recursion tracker.		if ($dumped === null)		{			$dumped = new SplObjectStorage;		}		// Add this object to the dumped stack.		$dumped->attach($this);		// Setup a container.		$dump = new stdClass;		// Dump all object properties.		foreach (array_keys($this->_properties) as $property)		{			// Get the property.			$dump->$property = $this->dumpProperty($property, $depth, $dumped);		}		return $dump;	}	/**	 * Gets this object represented as an ArrayIterator.	 *	 * This allows the data properties to be access via a foreach statement.	 *	 * @return  ArrayIterator  This object represented as an ArrayIterator.	 *	 * @see     IteratorAggregate::getIterator()	 * @since   12.3	 */	public function getIterator()	{		return new ArrayIterator($this->dump(0));	}	/**	 * Gets the data properties in a form that can be serialised to JSON format.	 *	 * @return  string  An object that can be serialised by json_encode().	 *	 * @since   12.3	 */	public function jsonSerialize()	{		return $this->dump();	}	/**	 * Dumps a data property.	 *	 * If recursion is set, this method will dump any object implementing JDumpable (like JData and JDataSet); it will	 * convert a JDate object to a string; and it will convert a JRegistry to an object.	 *	 * @param   string            $property  The name of the data property.	 * @param   integer           $depth     The current depth of recursion (a value of 0 will ignore recursion).	 * @param   SplObjectStorage  $dumped    An array of already serialized objects that is used to avoid infinite loops.	 *	 * @return  mixed  The value of the dumped property.	 *	 * @since   12.3	 */	protected function dumpProperty($property, $depth, SplObjectStorage $dumped)	{		$value = $this->getProperty($property);		if ($depth > 0)		{			// Check if the object is also an dumpable object.			if ($value instanceof JDataDumpable)			{				// Do not dump the property if it has already been dumped.				if (!$dumped->contains($value))				{					$value = $value->dump($depth - 1, $dumped);				}			}			// Check if the object is a date.			if ($value instanceof JDate)			{				$value = (string) $value;			}			// Check if the object is a registry.			elseif ($value instanceof JRegistry)			{				$value = $value->toObject();			}		}		return $value;	}	/**	 * Gets a data property.	 *	 * @param   string  $property  The name of the data property.	 *	 * @return  mixed  The value of the data property.	 *	 * @see     JData::__get()	 * @since   12.3	 */	protected function getProperty($property)	{		// Get the raw value.		$value = array_key_exists($property, $this->_properties) ? $this->_properties[$property] : null;		return $value;	}	/**	 * Sets a data property.	 *	 * If the name of the property starts with a null byte, this method will return null.	 *	 * @param   string  $property  The name of the data property.	 * @param   mixed   $value     The value to give the data property.	 *	 * @return  mixed  The value of the data property.	 *	 * @see     JData::__set()	 * @since   12.3	 */	protected function setProperty($property, $value)	{		/*		 * Check if the property starts with a null byte. If so, discard it because a later attempt to try to access it		 * can cause a fatal error. See http://us3.php.net/manual/en/language.types.array.php#language.types.array.casting		 */		if (strpos($property, "\0") === 0)		{			return null;		}		// Set the value.		$this->_properties[$property] = $value;		return $value;	}	/**	 * Count the number of data properties.	 *	 * @return  integer  The number of data properties.	 *	 * @since   12.3	 */	public function count()	{		return count($this->_properties);	}}
<?php/** * @package     Joomla.Administrator * @subpackage  com_media * * @copyright   Copyright (C) 2005 - 2013 Open Source Matters, Inc. All rights reserved. * @license     GNU General Public License version 2 or later; see LICENSE.txt */defined('_JEXEC') or die;/** * Media Component Manager Model * * @package     Joomla.Administrator * @subpackage  com_media * @since       1.5 */class MediaModelManager extends JModelLegacy{	public function getState($property = null, $default = null)	{		static $set;		if (!$set)		{			$input = JFactory::getApplication()->input;			$folder = $input->get('folder', '', 'path');			$this->setState('folder', $folder);			$fieldid = $input->get('fieldid', '');			$this->setState('field.id', $fieldid);			$parent = str_replace("\\", "/", dirname($folder));			$parent = ($parent == '.') ? null : $parent;			$this->setState('parent', $parent);			$set = true;		}		return parent::getState($property, $default);	}	/**	 * Image Manager Popup	 *	 * @param string $listFolder The image directory to display	 * @since 1.5	 */	function getFolderList($base = null)	{		// Get some paths from the request		if (empty($base))		{			$base = COM_MEDIA_BASE;		}		//corrections for windows paths		$base = str_replace(DIRECTORY_SEPARATOR, '/', $base);		$com_media_base_uni = str_replace(DIRECTORY_SEPARATOR, '/', COM_MEDIA_BASE);		// Get the list of folders		jimport('joomla.filesystem.folder');		$folders = JFolder::folders($base, '.', true, true);		$document = JFactory::getDocument();		$document->setTitle(JText::_('COM_MEDIA_INSERT_IMAGE'));		// Build the array of select options for the folder list		$options[] = JHtml::_('select.option', "", "/");		foreach ($folders as $folder)		{			$folder		= str_replace($com_media_base_uni, "", str_replace(DIRECTORY_SEPARATOR, '/', $folder));			$value		= substr($folder, 1);			$text		= str_replace(DIRECTORY_SEPARATOR, "/", $folder);			$options[]	= JHtml::_('select.option', $value, $text);		}		// Sort the folder list array		if (is_array($options))		{			sort($options);		}		// Get asset and author id (use integer filter)		$input = JFactory::getApplication()->input;		$asset = $input->get('asset', 0, 'integer');		$author = $input->get('author', 0, 'integer');		// Create the drop-down folder select list		$list = JHtml::_('select.genericlist', $options, 'folderlist', 'class="inputbox" size="1" onchange="ImageManager.setFolder(this.options[this.selectedIndex].value, '.$asset.', '.$author.')" ', 'value', 'text', $base);		return $list;	}	function getFolderTree($base = null)	{		// Get some paths from the request		if (empty($base))		{			$base = COM_MEDIA_BASE;		}		$mediaBase = str_replace(DIRECTORY_SEPARATOR, '/', COM_MEDIA_BASE.'/');		// Get the list of folders		jimport('joomla.filesystem.folder');		$folders = JFolder::folders($base, '.', true, true);		$tree = array();		foreach ($folders as $folder)		{			$folder		= str_replace(DIRECTORY_SEPARATOR, '/', $folder);			$name		= substr($folder, strrpos($folder, '/') + 1);			$relative	= str_replace($mediaBase, '', $folder);			$absolute	= $folder;			$path		= explode('/', $relative);			$node		= (object) array('name' => $name, 'relative' => $relative, 'absolute' => $absolute);			$tmp = &$tree;			for ($i = 0, $n = count($path); $i < $n; $i++)			{				if (!isset($tmp['children']))				{					$tmp['children'] = array();				}				if ($i == $n - 1)				{					// We need to place the node					$tmp['children'][$relative] = array('data' => $node, 'children' => array());					break;				}				if (array_key_exists($key = implode('/', array_slice($path, 0, $i + 1)), $tmp['children']))				{					$tmp = &$tmp['children'][$key];				}			}		}		$tree['data'] = (object) array('name' => JText::_('COM_MEDIA_MEDIA'), 'relative' => '', 'absolute' => $base);		return $tree;	}}
<?php/** * @package     Joomla.Plugin * @subpackage  System.log * * @copyright   Copyright (C) 2005 - 2013 Open Source Matters, Inc. All rights reserved. * @license     GNU General Public License version 2 or later; see LICENSE.txt */defined('_JEXEC') or die;/** * Joomla! System Logging Plugin * * @package     Joomla.Plugin * @subpackage  System.log * @since       1.5 */class PlgSystemLog extends JPlugin{	public function onUserLoginFailure($response)	{		$errorlog = array();		switch($response['status'])		{			case JAuthentication::STATUS_SUCCESS:				$errorlog['status']  = $response['type'] . " CANCELED: ";				$errorlog['comment'] = $response['error_message'];				break;			case JAuthentication::STATUS_FAILURE:				$errorlog['status']  = $response['type'] . " FAILURE: ";				if ($this->params->get('log_username', 0))				{					$errorlog['comment'] = $response['error_message'] . ' ("' . $response['username'] . '")';				}				else				{					$errorlog['comment'] = $response['error_message'];				}				break;			default:				$errorlog['status']  = $response['type'] . " UNKNOWN ERROR: ";				$errorlog['comment'] = $response['error_message'];				break;		}		JLog::addLogger(array(), JLog::INFO);		JLog::add($errorlog['comment'], JLog::INFO, $errorlog['status']);	}}
<?php/** * @package     Joomla.Administrator * @subpackage  Template.hathor * * @copyright   Copyright (C) 2005 - 2013 Open Source Matters, Inc. All rights reserved. * @license     GNU General Public License version 2 or later; see LICENSE.txt */defined('_JEXEC') or die;$fieldSets = $this->form->getFieldsets('params');foreach ($fieldSets as $name => $fieldSet) :	echo JHtml::_('sliders.panel', JText::_($fieldSet->label), $name.'-params');	if (isset($fieldSet->description) && trim($fieldSet->description)) :		echo '<p class="tip">'.$this->escape(JText::_($fieldSet->description)).'</p>';	endif;	?>	<fieldset class="panelform">		<legend class="element-invisible"><?php echo JText::_($fieldSet->label); ?></legend>		<ul class="adminformlist">		<?php foreach ($this->form->getFieldset($name) as $field) : ?>			<li><?php echo $field->label; ?>			<?php echo $field->input; ?></li>		<?php endforeach; ?>		</ul>	</fieldset><?php endforeach; ?>
<?php/** * @package     Joomla.Administrator * @subpackage  com_menus * * @copyright   Copyright (C) 2005 - 2013 Open Source Matters, Inc. All rights reserved. * @license     GNU General Public License version 2 or later; see LICENSE.txt */defined('_JEXEC') or die;/** * The HTML Menus Menu Menus View. * * @package     Joomla.Administrator * @subpackage  com_menus * @since       1.6 */class MenusViewMenus extends JViewLegacy{	protected $items;	protected $modules;	protected $pagination;	protected $state;	/**	 * Display the view	 */	public function display($tpl = null)	{		$this->items		= $this->get('Items');		$this->modules		= $this->get('Modules');		$this->pagination	= $this->get('Pagination');		$this->state		= $this->get('State');		MenusHelper::addSubmenu('menus');		// Check for errors.		if (count($errors = $this->get('Errors')))		{			JError::raiseError(500, implode("\n", $errors));			return false;		}		$this->addToolbar();		$this->sidebar = JHtmlSidebar::render();		parent::display($tpl);	}	/**	 * Add the page title and toolbar.	 *	 * @since   1.6	 */	protected function addToolbar()	{		require_once JPATH_COMPONENT.'/helpers/menus.php';		$canDo	= MenusHelper::getActions($this->state->get('filter.parent_id'));		JToolbarHelper::title(JText::_('COM_MENUS_VIEW_MENUS_TITLE'), 'menumgr.png');		if ($canDo->get('core.create'))		{			JToolbarHelper::addNew('menu.add');		}		if ($canDo->get('core.edit'))		{			JToolbarHelper::editList('menu.edit');		}		if ($canDo->get('core.delete'))		{			JToolbarHelper::divider();			JToolbarHelper::deleteList('', 'menus.delete');		}		JToolbarHelper::custom('menus.rebuild', 'refresh.png', 'refresh_f2.png', 'JTOOLBAR_REBUILD', false);		if ($canDo->get('core.admin'))		{			JToolbarHelper::divider();			JToolbarHelper::preferences('com_menus');		}		JToolbarHelper::divider();		JToolbarHelper::help('JHELP_MENUS_MENU_MANAGER');	}}
<?php/** * @package     Joomla.Platform * @subpackage  Model * * @copyright   Copyright (C) 2005 - 2013 Open Source Matters, Inc. All rights reserved. * @license     GNU General Public License version 2 or later; see LICENSE */defined('JPATH_PLATFORM') or die;/** * Joomla Platform Database Model Class * * @package     Joomla.Platform * @subpackage  Model * @since       12.1 */abstract class JModelDatabase extends JModelBase{	/**	 * The database driver.	 *	 * @var    JDatabaseDriver	 * @since  12.1	 */	protected $db;	/**	 * Instantiate the model.	 *	 * @param   JRegistry        $state  The model state.	 * @param   JDatabaseDriver  $db     The database adpater.	 *	 * @since   12.1	 */	public function __construct(JRegistry $state = null, JDatabaseDriver $db = null)	{		parent::__construct($state);		// Setup the model.		$this->db = isset($db) ? $db : $this->loadDb();	}	/**	 * Get the database driver.	 *	 * @return  JDatabaseDriver  The database driver.	 *	 * @since   12.1	 */	public function getDb()	{		return $this->db;	}	/**	 * Set the database driver.	 *	 * @param   JDatabaseDriver  $db  The database driver.	 *	 * @return  void	 *	 * @since   12.1	 */	public function setDb(JDatabaseDriver $db)	{		$this->db = $db;	}	/**	 * Load the database driver.	 *	 * @return  JDatabaseDriver  The database driver.	 *	 * @since   12.1	 */	protected function loadDb()	{		return JFactory::getDbo();	}}
<?php/** * @package     Joomla.Administrator * @subpackage  com_login * * @copyright   Copyright (C) 2005 - 2013 Open Source Matters, Inc. All rights reserved. * @license     GNU General Public License version 2 or later; see LICENSE.txt */defined('_JEXEC') or die;JHtml::_('behavior.noframes');// Get the login modules// If you want to use a completely different login module change the value of name// in your layout override.$loginmodule = LoginModelLogin::getLoginModule('mod_login');echo JModuleHelper::renderModule($loginmodule, array('style' => 'rounded', 'id' => 'section-box'));//Get any other modules in the login position.//If you want to use a different position for the modules, change the name here in your override.$modules = JModuleHelper::getModules('login');foreach ($modules as $module)// Render the login modulesif ($module->module != 'mod_login'){	echo JModuleHelper::renderModule($module, array('style' => 'rounded', 'id' => 'section-box'));}
<?php/** * @package     Joomla.Platform * @subpackage  GitHub * * @copyright   Copyright (C) 2005 - 2013 Open Source Matters, Inc. All rights reserved. * @license     GNU General Public License version 2 or later; see LICENSE */defined('JPATH_PLATFORM') or die;/** * GitHub API Forks class for the Joomla Platform. * * @package     Joomla.Platform * @subpackage  GitHub * @since       11.3 */class JGithubForks extends JGithubObject{	/**	 * Method to fork a repository.	 *	 * @param   string  $user  The name of the owner of the GitHub repository.	 * @param   string  $repo  The name of the GitHub repository.	 * @param   string  $org   The organization to fork the repo into. By default it is forked to the current user.	 *	 * @return  object	 *	 * @since   11.4	 * @throws  DomainException	 */	public function create($user, $repo, $org = '')	{		// Build the request path.		$path = '/repos/' . $user . '/' . $repo . '/forks';		if (strlen($org) > 0)		{			$data = json_encode(				array('org' => $org)			);		}		else		{			$data = json_encode(array());		}		// Send the request.		$response = $this->client->post($this->fetchUrl($path), $data);		// Validate the response code.		if ($response->code != 202)		{			// Decode the error response and throw an exception.			$error = json_decode($response->body);			throw new DomainException($error->message, $response->code);		}		return json_decode($response->body);	}	/**	 * Method to list forks for a repository.	 *	 * @param   string   $user   The name of the owner of the GitHub repository.	 * @param   string   $repo   The name of the GitHub repository.	 * @param   integer  $page   Page to request	 * @param   integer  $limit  Number of results to return per page	 *	 * @return  array	 *	 * @since   11.4	 * @throws  DomainException	 */	public function getList($user, $repo, $page = 0, $limit = 0)	{		// Build the request path.		$path = '/repos/' . $user . '/' . $repo . '/forks';		// Send the request.		$response = $this->client->get($this->fetchUrl($path, $page, $limit));		// Validate the response code.		if ($response->code != 200)		{			// Decode the error response and throw an exception.			$error = json_decode($response->body);			throw new DomainException($error->message, $response->code);		}		return json_decode($response->body);	}}
<?php/** * @package     Joomla.Platform * @subpackage  Crypt * * @copyright   Copyright (C) 2005 - 2011 Open Source Matters, Inc. All rights reserved. * @license     GNU General Public License version 2 or later; see LICENSE */defined('JPATH_PLATFORM') or die;/** * JCrypt cipher interface. * * @package     Joomla.Platform * @subpackage  Crypt * @since       12.1 */interface JCryptCipher{	/**	 * Method to decrypt a data string.	 *	 * @param   string     $data  The encrypted string to decrypt.	 * @param   JCryptKey  $key   The key[/pair] object to use for decryption.	 *	 * @return  string  The decrypted data string.	 *	 * @since   12.1	 */	public function decrypt($data, JCryptKey $key);	/**	 * Method to encrypt a data string.	 *	 * @param   string     $data  The data string to encrypt.	 * @param   JCryptKey  $key   The key[/pair] object to use for encryption.	 *	 * @return  string  The encrypted data string.	 *	 * @since   12.1	 */	public function encrypt($data, JCryptKey $key);	/**	 * Method to generate a new encryption key[/pair] object.	 * 	 * @param   array  $options  Key generation options.	 * 	 * @return  JCryptKey	 * 	 * @since   12.1	 */	public function generateKey(array $options = array());}
<?php/** * @package     Joomla.Legacy * @subpackage  Application * * @copyright   Copyright (C) 2005 - 2013 Open Source Matters, Inc. All rights reserved. * @license     GNU General Public License version 2 or later; see LICENSE */defined('JPATH_PLATFORM') or die;/** * Deprecated class placeholder. You should use JApplicationWebClient instead. * * @package     Joomla.Legacy * @subpackage  Application * @since       11.3 * @deprecated  12.3 */class JWebClient extends JApplicationWebClient{	/**	 * Class constructor.	 *	 * @param   mixed  $userAgent       The optional user-agent string to parse.	 * @param   mixed  $acceptEncoding  The optional client accept encoding string to parse.	 * @param   mixed  $acceptLanguage  The optional client accept language string to parse.	 *	 * @since   11.3	 */	public function __construct($userAgent = null, $acceptEncoding = null, $acceptLanguage = null)	{		JLog::add('JWebClient is deprecated. Use JApplicationWebClient instead.', JLog::WARNING, 'deprecated');		parent::__construct($userAgent, $acceptEncoding, $acceptLanguage);	}}
<?php/** * @package     Joomla.Administrator * @subpackage  com_languages * * @copyright   Copyright (C) 2005 - 2013 Open Source Matters, Inc. All rights reserved. * @license     GNU General Public License version 2 or later; see LICENSE.txt */defined('_JEXEC') or die;/** * Languages list actions controller. * * @package     Joomla.Administrator * @subpackage  com_languages * @since       1.6 */class LanguagesControllerLanguage extends JControllerForm{	/**	 * Gets the URL arguments to append to an item redirect.	 *	 * @param   int      $recordId  The primary key id for the item.	 * @param   string  $key        The name of the primary key variable.	 *	 * @return  string  The arguments to append to the redirect URL.	 *	 * @since   1.6	 */	protected function getRedirectToItemAppend($recordId = null, $key = 'lang_id')	{		return parent::getRedirectToItemAppend($recordId, $key);	}}
<?php/** * @package     Joomla.Libraries * @subpackage  Schema * * @copyright   Copyright (C) 2005 - 2013 Open Source Matters, Inc. All rights reserved. * @license     GNU General Public License version 2 or later; see LICENSE */defined('_JEXEC') or die;/** * Checks the database schema against one MySQL DDL query to see if it has been run. * * @package     Joomla.Libraries * @subpackage  Schema * @since       2.5 */class JSchemaChangeitemMysql extends JSchemaChangeitem{	/**	 * Checks a DDL query to see if it is a known type	 * If yes, build a check query to see if the DDL has been run on the database.	 * If successful, the $msgElements, $queryType, $checkStatus and $checkQuery fields are populated.	 * The $msgElements contains the text to create the user message.	 * The $checkQuery contains the SQL query to check whether the schema change has	 * been run against the current database. The $queryType contains the type of	 * DDL query that was run (for example, CREATE_TABLE, ADD_COLUMN, CHANGE_COLUMN_TYPE, ADD_INDEX).	 * The $checkStatus field is set to zero if the query is created	 *	 * If not successful, $checkQuery is empty and , and $checkStatus is -1.	 * For example, this will happen if the current line is a non-DDL statement.	 *	 * @return void	 *	 * @since  2.5	 */	protected function buildCheckQuery()	{		// Initialize fields in case we can't create a check query		$this->checkStatus = -1; // change status to skipped		$result = null;		// Remove any newlines		$this->updateQuery = str_replace("\n", '', $this->updateQuery);		// Fix up extra spaces around () and in general		$find = array('#((\s*)\(\s*([^)\s]+)\s*)(\))#', '#(\s)(\s*)#');		$replace = array('($3)', '$1');		$updateQuery = preg_replace($find, $replace, $this->updateQuery);		$wordArray = explode(' ', $updateQuery);		// First, make sure we have an array of at least 6 elements		// if not, we can't make a check query for this one		if (count($wordArray) < 6)		{			// Done with method			return;		}		// We can only make check queries for alter table and create table queries		$command = strtoupper($wordArray[0] . ' ' . $wordArray[1]);		if ($command === 'ALTER TABLE')		{			$alterCommand = strtoupper($wordArray[3] . ' ' . $wordArray[4]);			if ($alterCommand == 'ADD COLUMN')			{				$result = 'SHOW COLUMNS IN ' . $wordArray[2] . ' WHERE field = ' . $this->fixQuote($wordArray[5]);				$this->queryType = 'ADD_COLUMN';				$this->msgElements = array($this->fixQuote($wordArray[2]), $this->fixQuote($wordArray[5]));			}			elseif ($alterCommand == 'ADD INDEX' || $alterCommand == 'ADD UNIQUE')			{				if ($pos = strpos($wordArray[5], '('))				{					$index = $this->fixQuote(substr($wordArray[5], 0, $pos));				}				else				{					$index = $this->fixQuote($wordArray[5]);				}				$result = 'SHOW INDEXES IN ' . $wordArray[2] . ' WHERE Key_name = ' . $index;				$this->queryType = 'ADD_INDEX';				$this->msgElements = array($this->fixQuote($wordArray[2]), $index);			}			elseif ($alterCommand == 'DROP INDEX')			{				$index = $this->fixQuote($wordArray[5]);				$result = 'SHOW INDEXES IN ' . $wordArray[2] . ' WHERE Key_name = ' . $index;				$this->queryType = 'DROP_INDEX';				$this->checkQueryExpected = 0;				$this->msgElements = array($this->fixQuote($wordArray[2]), $index);			}			elseif ($alterCommand == 'DROP COLUMN')			{				$index = $this->fixQuote($wordArray[5]);				$result = 'SHOW COLUMNS IN ' . $wordArray[2] . ' WHERE Field = ' . $index;				$this->queryType = 'DROP_COLUMN';				$this->checkQueryExpected = 0;				$this->msgElements = array($this->fixQuote($wordArray[2]), $index);			}			elseif (strtoupper($wordArray[3]) == 'MODIFY')			{				// Kludge to fix problem with "integer unsigned"				$type = $this->fixQuote($wordArray[5]);				if (isset($wordArray[6]))				{					$type = $this->fixQuote($this->fixInteger($wordArray[5], $wordArray[6]));				}				$result = 'SHOW COLUMNS IN ' . $wordArray[2] . ' WHERE field = ' . $this->fixQuote($wordArray[4]) . ' AND type = ' . $type;				$this->queryType = 'CHANGE_COLUMN_TYPE';				$this->msgElements = array($this->fixQuote($wordArray[2]), $this->fixQuote($wordArray[4]), $type);			}			elseif (strtoupper($wordArray[3]) == 'CHANGE')			{				// Kludge to fix problem with "integer unsigned"				$type = $this->fixQuote($this->fixInteger($wordArray[6], $wordArray[7]));				$result = 'SHOW COLUMNS IN ' . $wordArray[2] . ' WHERE field = ' . $this->fixQuote($wordArray[4]) . ' AND type = ' . $type;				$this->queryType = 'CHANGE_COLUMN_TYPE';				$this->msgElements = array($this->fixQuote($wordArray[2]), $this->fixQuote($wordArray[4]), $type);			}		}		if ($command == 'CREATE TABLE')		{			if (strtoupper($wordArray[2] . $wordArray[3] . $wordArray[4]) == 'IFNOTEXISTS')			{				$table = $wordArray[5];			}			else			{				$table = $wordArray[2];			}			$result = 'SHOW TABLES LIKE ' . $this->fixQuote($table);			$this->queryType = 'CREATE_TABLE';			$this->msgElements = array($this->fixQuote($table));		}		// Set fields based on results		if ($this->checkQuery = $result)		{			// Unchecked status			$this->checkStatus = 0;		}		else		{			// Skipped			$this->checkStatus = -1;		}	}	/**	 * Fix up integer. Fixes problem with MySQL integer descriptions.	 * If you change a column to "integer unsigned" it shows	 * as "int(10) unsigned" in the check query.	 *	 * @param   string  $type1  the column type	 * @param   string  $type2  the column attributes	 *	 * @return  string  The original or changed column type.	 *	 * @since   2.5	 */	private function fixInteger($type1, $type2)	{		$result = $type1;		if (strtolower($type1) == "integer" && strtolower(substr($type2, 0, 8)) == 'unsigned')		{			$result = 'int(10) unsigned';		}		return $result;	}	/**	 * Fixes up a string for inclusion in a query.	 * Replaces name quote character with normal quote for literal.	 * Drops trailing semi-colon. Injects the database prefix.	 *	 * @param   string  $string  The input string to be cleaned up.	 *	 * @return  string  The modified string.	 *	 * @since   2.5	 */	private function fixQuote($string)	{		$string = str_replace('`', '', $string);		$string = str_replace(';', '', $string);		$string = str_replace('#__', $this->db->getPrefix(), $string);		return $this->db->quote($string);	}}
<?php/** * @package     Joomla.Site * @subpackage  com_weblinks * * @copyright   Copyright (C) 2005 - 2013 Open Source Matters, Inc. All rights reserved. * @license     GNU General Public License version 2 or later; see LICENSE.txt */defined('_JEXEC') or die;/** * Weblinks Component Controller * * @package     Joomla.Site * @subpackage  com_weblinks * @since       1.5 */class WeblinksController extends JControllerLegacy{	/**	 * Method to display a view.	 *	 * @param   boolean			If true, the view output will be cached	 * @param   array  An array of safe url parameters and their variable types, for valid values see {@link JFilterInput::clean()}.	 *	 * @return  JController		This object to support chaining.	 * @since   1.5	 */	public function display($cachable = false, $urlparams = false)	{		$cachable	= true;	// Huh? Why not just put that in the constructor?		$user		= JFactory::getUser();		// Set the default view name and format from the Request.		// Note we are using w_id to avoid collisions with the router and the return page.		// Frontend is a bit messier than the backend.		$id    = $this->input->getInt('w_id');		$vName = $this->input->get('view', 'categories');		$this->input->set('view', $vName);		if ($user->get('id') ||($this->input->getMethod() == 'POST' && $vName = 'categories'))		{			$cachable = false;		}		$safeurlparams = array(			'id'				=> 'INT',			'limit'				=> 'UINT',			'limitstart'		=> 'UINT',			'filter_order'		=> 'CMD',			'filter_order_Dir'	=> 'CMD',			'lang'				=> 'CMD'		);		// Check for edit form.		if ($vName == 'form' && !$this->checkEditId('com_weblinks.edit.weblink', $id))		{			// Somehow the person just went to the form - we don't allow that.			return JError::raiseError(403, JText::sprintf('JLIB_APPLICATION_ERROR_UNHELD_ID', $id));		}		return parent::display($cachable, $safeurlparams);	}}
<?php/** * @package     Joomla.Administrator * @subpackage  com_menus * * @copyright   Copyright (C) 2005 - 2013 Open Source Matters, Inc. All rights reserved. * @license     GNU General Public License version 2 or later; see LICENSE.txt */defined('_JEXEC') or die;/** * Menu table * * @package     Joomla.Administrator * @subpackage  com_menus */class MenusTableMenu extends JTableMenu{	/**	 * Method to delete a node and, optionally, its child nodes from the table.	 *	 * @param   integer  $pk        The primary key of the node to delete.	 * @param   boolean  $children  True to delete child nodes, false to move them up a level.	 *	 * @return  boolean  True on success.	 *	 * @since   2.5	 * @see     http://docs.joomla.org/JTableNested/delete	 */	public function delete($pk = null, $children = false)	{		return parent::delete($pk, $children);	}}
<?php/** * @package     Joomla.Platform * @subpackage  HTML * * @copyright   Copyright (C) 2005 - 2013 Open Source Matters, Inc. All rights reserved. * @license     GNU General Public License version 2 or later; see LICENSE */defined('JPATH_PLATFORM') or die;/** * Utility class for javascript behaviors * * @package     Joomla.Platform * @subpackage  HTML * @since       11.1 */abstract class JHtmlBehavior{	/**	 * @var   array   array containing information for loaded files	 */	protected static $loaded = array();	/**	 * Method to load the MooTools framework into the document head	 *	 * If debugging mode is on an uncompressed version of MooTools is included for easier debugging.	 *	 * @param   string  $extras  MooTools file to load	 * @param   mixed   $debug   Is debugging mode on? [optional]	 *	 * @return  void	 *	 * @since   11.1	 */	public static function framework($extras = false, $debug = null)	{		$type = $extras ? 'more' : 'core';		// Only load once		if (!empty(self::$loaded[__METHOD__][$type]))		{			return;		}		// If no debugging value is set, use the configuration setting		if ($debug === null)		{			$config = JFactory::getConfig();			$debug = $config->get('debug');		}		if ($type != 'core' && empty(self::$loaded[__METHOD__]['core']))		{			self::framework(false, $debug);		}		JHtml::_('script', 'system/mootools-' . $type . '.js', false, true, false, false, $debug);		JHtml::_('script', 'system/core.js', false, true);		self::$loaded[__METHOD__][$type] = true;		return;	}	/**	 * Add unobtrusive javascript support for image captions.	 *	 * @param   string  $selector  The selector for which a caption behaviour is to be applied.	 *	 * @return  void	 *	 * @since   11.1	 */	public static function caption($selector = 'img.caption')	{		// Only load once		if (isset(self::$loaded[__METHOD__][$selector]))		{			return;		}		// Include MooTools framework		self::framework();		JHtml::_('script', 'system/caption.js', true, true);		// Attach caption to document		JFactory::getDocument()->addScriptDeclaration(			"window.addEvent('load', function() {				new JCaption('" . $selector . "');			});"		);		// Set static array		self::$loaded[__METHOD__][$selector] = true;	}	/**	 * Add unobtrusive javascript support for form validation.	 *	 * To enable form validation the form tag must have class="form-validate".	 * Each field that needs to be validated needs to have class="validate".	 * Additional handlers can be added to the handler for username, password,	 * numeric and email. To use these add class="validate-email" and so on.	 *	 * @return  void	 *	 * @since   11.1	 */	public static function formvalidation()	{		// Only load once		if (isset(self::$loaded[__METHOD__]))		{			return;		}		// Add validate.js language strings		JText::script('JLIB_FORM_FIELD_INVALID');		// Include MooTools framework		self::framework();		JHtml::_('script', 'system/validate.js', true, true);		self::$loaded[__METHOD__] = true;	}	/**	 * Add unobtrusive javascript support for submenu switcher support in	 * Global Configuration and System Information.	 *	 * @return  void	 *	 * @since   11.1	 */	public static function switcher()	{		// Only load once		if (isset(self::$loaded[__METHOD__]))		{			return;		}		// Include MooTools framework		self::framework();		JHtml::_('script', 'system/switcher.js', true, true);		$script = "			document.switcher = null;			window.addEvent('domready', function(){				toggler = document.id('submenu');				element = document.id('config-document');				if (element) {					document.switcher = new JSwitcher(toggler, element, {cookieName: toggler.getProperty('class')});				}			});";		JFactory::getDocument()->addScriptDeclaration($script);		self::$loaded[__METHOD__] = true;	}	/**	 * Add unobtrusive javascript support for a combobox effect.	 *	 * Note that this control is only reliable in absolutely positioned elements.	 * Avoid using a combobox in a slider or dynamic pane.	 *	 * @return  void	 *	 * @since   11.1	 */	public static function combobox()	{		if (isset(self::$loaded[__METHOD__]))		{			return;		}		// Include MooTools framework		self::framework();		JHtml::_('script', 'system/combobox.js', true, true);		self::$loaded[__METHOD__] = true;	}	/**	 * Add unobtrusive javascript support for a hover tooltips.	 *	 * Add a title attribute to any element in the form	 * title="title::text"	 *	 *	 * Uses the core Tips class in MooTools.	 *	 * @param   string  $selector  The class selector for the tooltip.	 * @param   array   $params    An array of options for the tooltip.	 *                             Options for the tooltip can be:	 *                             - maxTitleChars  integer   The maximum number of characters in the tooltip title (defaults to 50).	 *                             - offsets        object    The distance of your tooltip from the mouse (defaults to {'x': 16, 'y': 16}).	 *                             - showDelay      integer   The millisecond delay the show event is fired (defaults to 100).	 *                             - hideDelay      integer   The millisecond delay the hide hide is fired (defaults to 100).	 *                             - className      string    The className your tooltip container will get.	 *                             - fixed          boolean   If set to true, the toolTip will not follow the mouse.	 *                             - onShow         function  The default function for the show event, passes the tip element	 *                               and the currently hovered element.	 *                             - onHide         function  The default function for the hide event, passes the currently	 *                               hovered element.	 *	 * @return  void	 *	 * @since   11.1	 */	public static function tooltip($selector = '.hasTip', $params = array())	{		$sig = md5(serialize(array($selector, $params)));		if (isset(self::$loaded[__METHOD__][$sig]))		{			return;		}		// Include MooTools framework		self::framework(true);		// Setup options object		$opt['maxTitleChars'] = (isset($params['maxTitleChars']) && ($params['maxTitleChars'])) ? (int) $params['maxTitleChars'] : 50;		// Offsets needs an array in the format: array('x'=>20, 'y'=>30)		$opt['offset']    = (isset($params['offset']) && (is_array($params['offset']))) ? $params['offset'] : null;		$opt['showDelay'] = (isset($params['showDelay'])) ? (int) $params['showDelay'] : null;		$opt['hideDelay'] = (isset($params['hideDelay'])) ? (int) $params['hideDelay'] : null;		$opt['className'] = (isset($params['className'])) ? $params['className'] : null;		$opt['fixed']     = (isset($params['fixed']) && ($params['fixed'])) ? true : false;		$opt['onShow']    = (isset($params['onShow'])) ? '\\' . $params['onShow'] : null;		$opt['onHide']    = (isset($params['onHide'])) ? '\\' . $params['onHide'] : null;		$options = JHtml::getJSObject($opt);		// Attach tooltips to document		JFactory::getDocument()->addScriptDeclaration(			"window.addEvent('domready', function() {			$$('$selector').each(function(el) {				var title = el.get('title');				if (title) {					var parts = title.split('::', 2);					el.store('tip:title', parts[0]);					el.store('tip:text', parts[1]);				}			});			var JTooltips = new Tips($$('$selector'), $options);		});"		);		// Set static array		self::$loaded[__METHOD__][$sig] = true;		return;	}	/**	 * Add unobtrusive javascript support for modal links.	 *	 * @param   string  $selector  The selector for which a modal behaviour is to be applied.	 * @param   array   $params    An array of parameters for the modal behaviour.	 *                             Options for the modal behaviour can be:	 *                            - ajaxOptions	 *                            - size	 *                            - shadow	 *                            - overlay	 *                            - onOpen	 *                            - onClose	 *                            - onUpdate	 *                            - onResize	 *                            - onShow	 *                            - onHide	 *	 * @return  void	 *	 * @since   11.1	 */	public static function modal($selector = 'a.modal', $params = array())	{		$document = JFactory::getDocument();		// Load the necessary files if they haven't yet been loaded		if (!isset(self::$loaded[__METHOD__]))		{			// Include MooTools framework			self::framework(true);			// Load the javascript and css			JHtml::_('script', 'system/modal.js', true, true);			JHtml::_('stylesheet', 'system/modal.css', array(), true);		}		$sig = md5(serialize(array($selector, $params)));		if (isset(self::$loaded[__METHOD__][$sig]))		{			return;		}		// Setup options object		$opt['ajaxOptions']   = (isset($params['ajaxOptions']) && (is_array($params['ajaxOptions']))) ? $params['ajaxOptions'] : null;		$opt['handler']       = (isset($params['handler'])) ? $params['handler'] : null;		$opt['parseSecure']   = (isset($params['parseSecure'])) ? (bool) $params['parseSecure'] : null;		$opt['closable']      = (isset($params['closable'])) ? (bool) $params['closable'] : null;		$opt['closeBtn']      = (isset($params['closeBtn'])) ? (bool) $params['closeBtn'] : null;		$opt['iframePreload'] = (isset($params['iframePreload'])) ? (bool) $params['iframePreload'] : null;		$opt['iframeOptions'] = (isset($params['iframeOptions']) && (is_array($params['iframeOptions']))) ? $params['iframeOptions'] : null;		$opt['size']          = (isset($params['size']) && (is_array($params['size']))) ? $params['size'] : null;		$opt['shadow']        = (isset($params['shadow'])) ? $params['shadow'] : null;		$opt['overlay']       = (isset($params['overlay'])) ? $params['overlay'] : null;		$opt['onOpen']        = (isset($params['onOpen'])) ? $params['onOpen'] : null;		$opt['onClose']       = (isset($params['onClose'])) ? $params['onClose'] : null;		$opt['onUpdate']      = (isset($params['onUpdate'])) ? $params['onUpdate'] : null;		$opt['onResize']      = (isset($params['onResize'])) ? $params['onResize'] : null;		$opt['onMove']        = (isset($params['onMove'])) ? $params['onMove'] : null;		$opt['onShow']        = (isset($params['onShow'])) ? $params['onShow'] : null;		$opt['onHide']        = (isset($params['onHide'])) ? $params['onHide'] : null;		if (isset($params['fullScreen']) && (bool) $params['fullScreen'])		{			$opt['size']      = array('x' => '\\window.getSize().x-80', 'y' => '\\window.getSize().y-80');		}		$options = JHtml::getJSObject($opt);		// Attach modal behavior to document		$document			->addScriptDeclaration(			"		window.addEvent('domready', function() {			SqueezeBox.initialize(" . $options . ");			SqueezeBox.assign($$('" . $selector . "'), {				parse: 'rel'			});		});"		);		// Set static array		self::$loaded[__METHOD__][$sig] = true;		return;	}	/**	 * JavaScript behavior to allow shift select in grids	 *	 * @param   string  $id  The id of the form for which a multiselect behaviour is to be applied.	 *	 * @return  void	 *	 * @since   11.1	 */	public static function multiselect($id = 'adminForm')	{		// Only load once		if (isset(self::$loaded[__METHOD__][$id]))		{			return;		}		// Include MooTools framework		self::framework();		JHtml::_('script', 'system/multiselect.js', true, true);		// Attach multiselect to document		JFactory::getDocument()->addScriptDeclaration(			"window.addEvent('domready', function() {				new Joomla.JMultiSelect('" . $id . "');			});"		);		// Set static array		self::$loaded[__METHOD__][$id] = true;		return;	}	/**	 * Add unobtrusive javascript support for a collapsible tree.	 *	 * @param   string  $id      An index	 * @param   array   $params  An array of options.	 * @param   array   $root    The root node	 *	 * @return  void	 *	 * @since   11.1	 */	public static function tree($id, $params = array(), $root = array())	{		// Include MooTools framework		self::framework();		JHtml::_('script', 'system/mootree.js', true, true, false, false);		JHtml::_('stylesheet', 'system/mootree.css', array(), true);		if (isset(self::$loaded[__METHOD__][$id]))		{			return;		}		// Setup options object		$opt['div']   = (array_key_exists('div', $params)) ? $params['div'] : $id . '_tree';		$opt['mode']  = (array_key_exists('mode', $params)) ? $params['mode'] : 'folders';		$opt['grid']  = (array_key_exists('grid', $params)) ? '\\' . $params['grid'] : true;		$opt['theme'] = (array_key_exists('theme', $params)) ? $params['theme'] : JHtml::_('image', 'system/mootree.gif', '', array(), true, true);		// Event handlers		$opt['onExpand'] = (array_key_exists('onExpand', $params)) ? '\\' . $params['onExpand'] : null;		$opt['onSelect'] = (array_key_exists('onSelect', $params)) ? '\\' . $params['onSelect'] : null;		$opt['onClick']  = (array_key_exists('onClick', $params)) ? '\\' . $params['onClick']		: '\\function(node){  window.open(node.data.url, node.data.target != null ? node.data.target : \'_self\'); }';		$options = JHtml::getJSObject($opt);		// Setup root node		$rt['text']     = (array_key_exists('text', $root)) ? $root['text'] : 'Root';		$rt['id']       = (array_key_exists('id', $root)) ? $root['id'] : null;		$rt['color']    = (array_key_exists('color', $root)) ? $root['color'] : null;		$rt['open']     = (array_key_exists('open', $root)) ? '\\' . $root['open'] : true;		$rt['icon']     = (array_key_exists('icon', $root)) ? $root['icon'] : null;		$rt['openicon'] = (array_key_exists('openicon', $root)) ? $root['openicon'] : null;		$rt['data']     = (array_key_exists('data', $root)) ? $root['data'] : null;		$rootNode = JHtml::getJSObject($rt);		$treeName = (array_key_exists('treeName', $params)) ? $params['treeName'] : '';		$js = '		window.addEvent(\'domready\', function(){			tree' . $treeName . ' = new MooTreeControl(' . $options . ',' . $rootNode . ');			tree' . $treeName . '.adopt(\'' . $id . '\');})';		// Attach tooltips to document		$document = JFactory::getDocument();		$document->addScriptDeclaration($js);		// Set static array		self::$loaded[__METHOD__][$id] = true;		return;	}	/**	 * Add unobtrusive javascript support for a calendar control.	 *	 * @return  void	 *	 * @since   11.1	 */	public static function calendar()	{		// Only load once		if (isset(self::$loaded[__METHOD__]))		{			return;		}		$document = JFactory::getDocument();		$tag = JFactory::getLanguage()->getTag();		JHtml::_('stylesheet', 'system/calendar-jos.css', array(' title' => JText::_('JLIB_HTML_BEHAVIOR_GREEN'), ' media' => 'all'), true);		JHtml::_('script', $tag . '/calendar.js', false, true);		JHtml::_('script', $tag . '/calendar-setup.js', false, true);		$translation = self::_calendartranslation();		if ($translation)		{			$document->addScriptDeclaration($translation);		}		self::$loaded[__METHOD__] = true;	}	/**	 * Add unobtrusive javascript support for a color picker.	 *	 * @return  void	 *	 * @since   11.2	 */	public static function colorpicker()	{		// Only load once		if (isset(self::$loaded[__METHOD__]))		{			return;		}		// Include jQuery		JHtml::_('jquery.framework');		JHtml::_('script', 'jui/jquery.minicolors.min.js', false, true);		JHtml::_('stylesheet', 'jui/jquery.minicolors.css', false, true);		JFactory::getDocument()->addScriptDeclaration("				jQuery(document).ready(function (){					jQuery('.minicolors').each(function() {						jQuery(this).minicolors({							control: jQuery(this).attr('data-control') || 'hue',							position: jQuery(this).attr('data-position') || 'right',							theme: 'bootstrap'						});					});				});			"		);		self::$loaded[__METHOD__] = true;	}	/**	 * Add unobtrusive javascript support for a simple color picker.	 *	 * @return  void	 *	 * @since   11.2	 */	public static function simplecolorpicker()	{		// Only load once		if (isset(self::$loaded[__METHOD__]))		{			return;		}		// Include jQuery		JHtml::_('jquery.framework');		JHtml::_('script', 'jui/jquery.simplecolors.min.js', false, true);		JHtml::_('stylesheet', 'jui/jquery.simplecolors.css', false, true);		JFactory::getDocument()->addScriptDeclaration("				jQuery(document).ready(function (){					jQuery('select.simplecolors').simplecolors();				});			"		);		self::$loaded[__METHOD__] = true;	}	/**	 * Keep session alive, for example, while editing or creating an article.	 *	 * @return  void	 *	 * @since   11.1	 */	public static function keepalive()	{		// Only load once		if (isset(self::$loaded[__METHOD__]))		{			return;		}		// Include MooTools framework		self::framework();		$config = JFactory::getConfig();		$lifetime = ($config->get('lifetime') * 60000);		$refreshTime = ($lifetime <= 60000) ? 30000 : $lifetime - 60000;		// Refresh time is 1 minute less than the liftime assined in the configuration.php file.		// The longest refresh period is one hour to prevent integer overflow.		if ($refreshTime > 3600000 || $refreshTime <= 0)		{			$refreshTime = 3600000;		}		$document = JFactory::getDocument();		$script = '';		$script .= 'function keepAlive() {';		$script .= '	var myAjax = new Request({method: "get", url: "index.php"}).send();';		$script .= '}';		$script .= ' window.addEvent("domready", function()';		$script .= '{ keepAlive.periodical(' . $refreshTime . '); }';		$script .= ');';		$document->addScriptDeclaration($script);		self::$loaded[__METHOD__] = true;		return;	}	/**	 * Highlight some words via Javascript.	 *	 * @param   array   $terms      Array of words that should be highlighted.	 * @param   string  $start      ID of the element that marks the begin of the section in which words	 *                              should be highlighted. Note this element will be removed from the DOM.	 * @param   string  $end        ID of the element that end this section.	 *                              Note this element will be removed from the DOM.	 * @param   string  $className  Class name of the element highlights are wrapped in.	 * @param   string  $tag        Tag that will be used to wrap the highlighted words.	 *	 * @return  void	 *	 * @since   11.4	 */	public static function highlighter(array $terms, $start = 'highlighter-start', $end = 'highlighter-end', $className = 'highlight', $tag = 'span')	{		$sig = md5(serialize(array($terms, $start, $end)));		if (isset(self::$loaded[__METHOD__][$sig]))		{			return;		}		JHtml::_('script', 'system/highlighter.js', true, true);		$terms = str_replace('"', '\"', $terms);		$document = JFactory::getDocument();		$document->addScriptDeclaration("			window.addEvent('domready', function () {				var start = document.id('" . $start . "');				var end = document.id('" . $end . "');				if (!start || !end || !Joomla.Highlighter) {					return true;				}				highlighter = new Joomla.Highlighter({					startElement: start,					endElement: end,					className: '" . $className . "',					onlyWords: false,					tag: '" . $tag . "'				}).highlight([\"" . implode('","', $terms) . "\"]);				start.dispose();				end.dispose();			});		");		self::$loaded[__METHOD__][$sig] = true;		return;	}	/**	 * Break us out of any containing iframes	 *	 * @return  void	 *	 * @since   11.1	 */	public static function noframes()	{		// Only load once		if (isset(self::$loaded[__METHOD__]))		{			return;		}		// Include MooTools framework		self::framework();		$js = "window.addEvent('domready', function () {if (top == self) {document.documentElement.style.display = 'block'; }" .			" else {top.location = self.location; }});";		$document = JFactory::getDocument();		$document->addStyleDeclaration('html { display:none }');		$document->addScriptDeclaration($js);		JResponse::setHeader('X-Frames-Options', 'SAME-ORIGIN');		self::$loaded[__METHOD__] = true;	}	/**	 * Internal method to get a JavaScript object notation string from an array	 *	 * @param   array  $array  The array to convert to JavaScript object notation	 *	 * @return  string  JavaScript object notation representation of the array	 *	 * @since   11.1	 * @deprecated  13.3 Use JHtml::getJSObject() instead.	 */	protected static function _getJSObject($array = array())	{		JLog::add('JHtmlBehavior::_getJSObject() is deprecated. JHtml::getJSObject() instead..', JLog::WARNING, 'deprecated');		JHtml::getJSObject($array);	}	/**	 * Internal method to translate the JavaScript Calendar	 *	 * @return  string  JavaScript that translates the object	 *	 * @since   11.1	 */	protected static function _calendartranslation()	{		static $jsscript = 0;		// Guard clause, avoids unnecessary nesting		if ($jsscript)		{			return false;		}		$jsscript = 1;		// To keep the code simple here, run strings through JText::_() using array_map()		$callback = array('JText','_');		$weekdays_full = array_map(			$callback, array(				'SUNDAY', 'MONDAY', 'TUESDAY', 'WEDNESDAY', 'THURSDAY', 'FRIDAY', 'SATURDAY', 'SUNDAY'			)		);		$weekdays_short = array_map(			$callback,			array(				'SUN', 'MON', 'TUE', 'WED', 'THU', 'FRI', 'SAT', 'SUN'			)		);		$months_long = array_map(			$callback, array(				'JANUARY', 'FEBRUARY', 'MARCH', 'APRIL', 'MAY', 'JUNE',				'JULY', 'AUGUST', 'SEPTEMBER', 'OCTOBER', 'NOVEMBER', 'DECEMBER'			)		);		$months_short = array_map(			$callback, array(				'JANUARY_SHORT', 'FEBRUARY_SHORT', 'MARCH_SHORT', 'APRIL_SHORT', 'MAY_SHORT', 'JUNE_SHORT',				'JULY_SHORT', 'AUGUST_SHORT', 'SEPTEMBER_SHORT', 'OCTOBER_SHORT', 'NOVEMBER_SHORT', 'DECEMBER_SHORT'			)		);		// This will become an object in Javascript but define it first in PHP for readability		$text = array(			'INFO'			=> JText::_('JLIB_HTML_BEHAVIOR_ABOUT_THE_CALENDAR'),			'ABOUT'			=> "DHTML Date/Time Selector\n"				. "(c) dynarch.com 2002-2005 / Author: Mihai Bazon\n"				. "For latest version visit: http://www.dynarch.com/projects/calendar/\n"				. "Distributed under GNU LGPL.  See http://gnu.org/licenses/lgpl.html for details."				. "\n\n"				. JText::_('JLIB_HTML_BEHAVIOR_DATE_SELECTION')				. JText::_('JLIB_HTML_BEHAVIOR_YEAR_SELECT')				. JText::_('JLIB_HTML_BEHAVIOR_MONTH_SELECT')				. JText::_('JLIB_HTML_BEHAVIOR_HOLD_MOUSE'),			'ABOUT_TIME'	=> "\n\n"				. "Time selection:\n"				. "- Click on any of the time parts to increase it\n"				. "- or Shift-click to decrease it\n"				. "- or click and drag for faster selection.",			'PREV_YEAR'		=> JText::_('JLIB_HTML_BEHAVIOR_PREV_YEAR_HOLD_FOR_MENU'),			'PREV_MONTH'	=> JText::_('JLIB_HTML_BEHAVIOR_PREV_MONTH_HOLD_FOR_MENU'),			'GO_TODAY'		=> JText::_('JLIB_HTML_BEHAVIOR_GO_TODAY'),			'NEXT_MONTH'	=> JText::_('JLIB_HTML_BEHAVIOR_NEXT_MONTH_HOLD_FOR_MENU'),			'SEL_DATE'		=> JText::_('JLIB_HTML_BEHAVIOR_SELECT_DATE'),			'DRAG_TO_MOVE'	=> JText::_('JLIB_HTML_BEHAVIOR_DRAG_TO_MOVE'),			'PART_TODAY'	=> JText::_('JLIB_HTML_BEHAVIOR_TODAY'),			'DAY_FIRST'		=> JText::_('JLIB_HTML_BEHAVIOR_DISPLAY_S_FIRST'),			'WEEKEND'		=> "0,6",			'CLOSE'			=> JText::_('JLIB_HTML_BEHAVIOR_CLOSE'),			'TODAY'			=> JText::_('JLIB_HTML_BEHAVIOR_TODAY'),			'TIME_PART'		=> JText::_('JLIB_HTML_BEHAVIOR_SHIFT_CLICK_OR_DRAG_TO_CHANGE_VALUE'),			'DEF_DATE_FORMAT'	=> "%Y-%m-%d",			'TT_DATE_FORMAT'	=> JText::_('JLIB_HTML_BEHAVIOR_TT_DATE_FORMAT'),			'WK'			=> JText::_('JLIB_HTML_BEHAVIOR_WK'),			'TIME'			=> JText::_('JLIB_HTML_BEHAVIOR_TIME')		);		return 'Calendar._DN = ' . json_encode($weekdays_full) . ';'			. ' Calendar._SDN = ' . json_encode($weekdays_short) . ';'			. ' Calendar._FD = 0;'			. ' Calendar._MN = ' . json_encode($months_long) . ';'			. ' Calendar._SMN = ' . json_encode($months_short) . ';'			. ' Calendar._TT = ' . json_encode($text) . ';';	}}
<?php/** * @package     Joomla.Platform * @subpackage  Log * * @copyright   Copyright (C) 2005 - 2013 Open Source Matters, Inc. All rights reserved. * @license     GNU General Public License version 2 or later; see LICENSE */defined('JPATH_PLATFORM') or die;/** * Joomla! Callback Log class * * This class allows logging to be handled by a callback function. * This allows unprecedented flexibility in the way logging can be handled. * * @package     Joomla.Platform * @subpackage  Log * @since       12.2 */class JLogLoggerCallback extends JLogLogger{	/**	 * @var    callable  The function to call when an entry is added - should return True on success	 * @since  12.2	 */	protected $callback;	/**	 * Constructor.	 *	 * @param   array  &$options  Log object options.	 *	 * @since   12.2	 */	public function __construct(array &$options)	{		// Call the parent constructor.		parent::__construct($options);		// Throw an exception if there is not a valid callback		if (isset($this->options['callback']) && is_callable($this->options['callback']))		{			$this->callback = $this->options['callback'];		}		else		{			throw new JLogException(JText::_('JLogLoggerCallback created without valid callback function.'));		}	}	/**	 * Method to add an entry to the log.	 *	 * @param   JLogEntry  $entry  The log entry object to add to the log.	 *	 * @return  boolean  True on success.	 *	 * @since   12.2	 * @throws  LogException	 */	public function addEntry(JLogEntry $entry)	{		// Pass the log entry to the callback function		call_user_func($this->callback, $entry);	}}
#!/usr/bin/php<?phpif (php_sapi_name() != "cli"){	echo "Error: phptidy has to be run on command line with CLI SAPI\n";	exit(1);}function getDirectory($path = '.', $level = 0){	$iterator  = new RecursiveDirectoryIterator($path, FilesystemIterator::KEY_AS_PATHNAME | FilesystemIterator::CURRENT_AS_FILEINFO | FilesystemIterator::SKIP_DOTS);	$flattened = new RecursiveIteratorIterator($iterator, RecursiveIteratorIterator::SELF_FIRST);	foreach ($flattened as $path => $dir)	{		if (!$dir->isDir())		{			continue;		}		// Add an index.html if neither an index.html nor an index.php exist		if (!(file_exists($path . '/index.html') || file_exists($path . '/index.php')))		{			file_put_contents($path . '/index.html', '<!DOCTYPE html><title></title>' . "\n");		}	}}$work = $_SERVER['argv'][1];echo "Working on directory " . $work . "\n";getDirectory($_SERVER['argv'][1]);
<?php/** * @package     Joomla.Site * @subpackage  com_newsfeeds * * @copyright   Copyright (C) 2005 - 2013 Open Source Matters, Inc. All rights reserved. * @license     GNU General Public License version 2 or later; see LICENSE.txt */defined('_JEXEC') or die;require_once JPATH_COMPONENT.'/helpers/route.php';JTable::addIncludePath(JPATH_COMPONENT_ADMINISTRATOR . '/tables');$controller	= JControllerLegacy::getInstance('Newsfeeds');$controller->execute(JFactory::getApplication()->input->get('task'));$controller->redirect();
<?php/** * @package     Joomla.Administrator * @subpackage  com_languages * * @copyright   Copyright (C) 2005 - 2013 Open Source Matters, Inc. All rights reserved. * @license     GNU General Public License version 2 or later; see LICENSE.txt */defined('_JEXEC') or die;/** * Displays the multilang status. * * @package     Joomla.Administrator * @subpackage  com_languages * @since       1.7.1 */class LanguagesViewMultilangstatus extends JViewLegacy{	/**	 * Display the view	 */	public function display($tpl = null)	{		require_once JPATH_COMPONENT . '/helpers/multilangstatus.php';		$this->homes			= MultilangstatusHelper::getHomes();		$this->language_filter	= JLanguageMultilang::isEnabled();		$this->switchers		= MultilangstatusHelper::getLangswitchers();		$this->listUsersError	= MultilangstatusHelper::getContacts();		$this->contentlangs		= MultilangstatusHelper::getContentlangs();		$this->site_langs		= MultilangstatusHelper::getSitelangs();		$this->statuses			= MultilangstatusHelper::getStatus();		$this->homepages		= MultilangstatusHelper::getHomepages();		parent::display($tpl);	}}
<?php/** * @package     Joomla.Administrator * @subpackage  com_modules * * @copyright   Copyright (C) 2005 - 2013 Open Source Matters, Inc. All rights reserved. * @license     GNU General Public License version 2 or later; see LICENSE.txt */defined('JPATH_BASE') or die;JFormHelper::loadFieldClass('list');/** * Form Field class for the Joomla Framework. * * @package     Joomla.Administrator * @subpackage  com_modules * @since       3.0 */class JFormFieldHeadertag extends JFormFieldList{	/**	 * The form field type.	 *	 * @var    string	 * @since  3.0	 */	protected $type = 'HeaderTag';	/**	 * Method to get the field options.	 *	 * @return  array  The field option objects.	 *	 * @since   3.0	 */	protected function getOptions()	{		$options = array();		$tags = array('h1', 'h2', 'h3', 'h4', 'h5', 'h6', 'p');		// Create one new option object for each tag		foreach ($tags as $tag)		{			$tmp = JHtml::_('select.option', $tag, $tag);			$options[] = $tmp;		}		reset($options);		return $options;	}}
<?php/** * @package     Joomla.Installation * @subpackage  Controller * * @copyright   Copyright (C) 2005 - 2013 Open Source Matters, Inc. All rights reserved. * @license     GNU General Public License version 2 or later; see LICENSE.txt */defined('_JEXEC') or die;/** * Controller class to detect the site's FTP root for the Joomla Installer. * * @package     Joomla.Installation * @subpackage  Controller * @since       3.1 */class InstallationControllerDetectftproot extends JControllerBase{	/**	 * Execute the controller.	 *	 * @return  void	 *	 * @since   3.1	 */	public function execute()	{		// Get the application		/* @var InstallationApplicationWeb $app */		$app = $this->getApplication();		// Check for request forgeries.		JSession::checkToken() or $app->sendJsonResponse(new Exception(JText::_('JINVALID_TOKEN'), 403));		// Get the setup model.		$model = new InstallationModelSetup;		// Get the data		$data = $app->input->post->get('jform', array(), 'array');		// Store the options in the session.		$vars = $model->storeOptions($data);		// Get the database model.		$ftp = new InstallationModelFtp;		// Attempt to detect the Joomla root from the ftp account.		$return = $ftp->detectFtpRoot($vars);		// Build the response object		$r = new stdClass;		$r->view = 'ftp';		// If we got a FTP root, add it to the response object		if ($return)		{			$r->root = $return;		}		$app->sendJsonResponse($r);	}}
<?php/** * @package     Joomla.Site * @subpackage  Layout * * @copyright   Copyright (C) 2005 - 2013 Open Source Matters, Inc. All rights reserved. * @license     GNU General Public License version 2 or later; see LICENSE.txt */defined('_JEXEC') or die;$id      = empty($displayData['id']) ? '' : (' id="' . $displayData['id'] . '"');$target  = empty($displayData['target']) ? '' : (' target="' . $displayData['target'] . '"');$onclick = empty($displayData['onclick']) ? '' : (' onclick="' . $displayData['onclick'] . '"');$title   = empty($displayData['title']) ? '' : (' title="' . $this->escape($displayData['title']) . '"');$text    = empty($displayData['text']) ? '' : ('<span>' . $displayData['text'] . '</span>')?><div class="row-fluid"<?php echo $id; ?>>	<div class="span12">		<a href="<?php echo $displayData['link']; ?>"<?php echo $target . $onclick . $title; ?>>			<i class="icon-<?php echo $displayData['image']; ?>"></i> <?php echo $text; ?>		</a>	</div></div>
<?php/** * @package     Joomla.Site * @subpackage  Layout * * @copyright   Copyright (C) 2005 - 2013 Open Source Matters, Inc. All rights reserved. * @license     GNU General Public License version 2 or later; see LICENSE.txt */defined('JPATH_BASE') or die;$canEdit = $displayData['params']->get('access-edit');?><div id="icons">	<?php if (empty($displayData['print'])) : ?>		<?php if ($canEdit || $displayData['params']->get('show_print_icon') || $displayData['params']->get('show_email_icon')) : ?>			<div class="btn-group pull-right">				<a class="btn dropdown-toggle" data-toggle="dropdown" href="#"> <span class="icon-cog"></span> <span class="caret"></span> </a>				<?php // Note the actions class is deprecated. Use dropdown-menu instead. ?>				<ul class="dropdown-menu">					<?php if ($displayData['params']->get('show_print_icon')) : ?>						<li class="print-icon"> <?php echo JHtml::_('icon.print_popup', $displayData['item'], $displayData['params']); ?> </li>					<?php endif; ?>					<?php if ($displayData['params']->get('show_email_icon')) : ?>						<li class="email-icon"> <?php echo JHtml::_('icon.email', $displayData['item'], $displayData['params']); ?> </li>					<?php endif; ?>					<?php if ($canEdit) : ?>						<li class="edit-icon"> <?php echo JHtml::_('icon.edit', $displayData['item'], $displayData['params']); ?> </li>					<?php endif; ?>				</ul>			</div>		<?php endif; ?>	<?php else : ?>		<div class="pull-right">			<?php echo JHtml::_('icon.print_screen', $displayData['item'], $displayData['params']); ?>		</div>	<?php endif; ?></div>
<?php/** * @package     Joomla.Administrator * @subpackage  com_config * * @copyright   Copyright (C) 2005 - 2013 Open Source Matters, Inc. All rights reserved. * @license     GNU General Public License version 2 or later; see LICENSE.txt */defined('_JEXEC') or die;?><div class="width-100"><fieldset class="adminform">	<legend><?php echo JText::_('COM_CONFIG_FTP_SETTINGS'); ?></legend>	<ul class="adminformlist">			<?php			foreach ($this->form->getFieldset('ftp') as $field):			?>					<li><?php echo $field->label; ?>					<?php echo $field->input; ?></li>			<?php			endforeach;			?>		</ul></fieldset></div>
<?php/** * @package     Joomla.Platform * @subpackage  Form * * @copyright   Copyright (C) 2005 - 2013 Open Source Matters, Inc. All rights reserved. * @license     GNU General Public License version 2 or later; see LICENSE */defined('JPATH_PLATFORM') or die;jimport('joomla.filesystem.path');/** * JForm's helper class. * Provides a storage for filesystem's paths where JForm's entities reside and methods for creating those entities. * Also stores objects with entities' prototypes for further reusing. * * @package     Joomla.Platform * @subpackage  Form * @since       11.1 */class JFormHelper{	/**	 * Array with paths where entities(field, rule, form) can be found.	 *	 * Array's structure:	 * <code>	 * paths:	 * {ENTITY_NAME}:	 * - /path/1	 * - /path/2	 * </code>	 *	 * @var    array	 * @since  11.1	 *	 */	protected static $paths;	/**	 * Static array of JForm's entity objects for re-use.	 * Prototypes for all fields and rules are here.	 *	 * Array's structure:	 * <code>	 * entities:	 * {ENTITY_NAME}:	 * {KEY}: {OBJECT}	 * </code>	 *	 * @var    array	 * @since  11.1	 */	protected static $entities = array();	/**	 * Method to load a form field object given a type.	 *	 * @param   string   $type  The field type.	 * @param   boolean  $new   Flag to toggle whether we should get a new instance of the object.	 *	 * @return  mixed  JFormField object on success, false otherwise.	 *	 * @since   11.1	 */	public static function loadFieldType($type, $new = true)	{		return self::loadType('field', $type, $new);	}	/**	 * Method to load a form rule object given a type.	 *	 * @param   string   $type  The rule type.	 * @param   boolean  $new   Flag to toggle whether we should get a new instance of the object.	 *	 * @return  mixed  JFormRule object on success, false otherwise.	 *	 * @since   11.1	 */	public static function loadRuleType($type, $new = true)	{		return self::loadType('rule', $type, $new);	}	/**	 * Method to load a form entity object given a type.	 * Each type is loaded only once and then used as a prototype for other objects of same type.	 * Please, use this method only with those entities which support types (forms don't support them).	 *	 * @param   string   $entity  The entity.	 * @param   string   $type    The entity type.	 * @param   boolean  $new     Flag to toggle whether we should get a new instance of the object.	 *	 * @return  mixed  Entity object on success, false otherwise.	 *	 * @since   11.1	 */	protected static function loadType($entity, $type, $new = true)	{		// Reference to an array with current entity's type instances		$types = &self::$entities[$entity];		$key = md5($type);		// Return an entity object if it already exists and we don't need a new one.		if (isset($types[$key]) && $new === false)		{			return $types[$key];		}		$class = self::loadClass($entity, $type);		if ($class !== false)		{			// Instantiate a new type object.			$types[$key] = new $class;			return $types[$key];		}		else		{			return false;		}	}	/**	 * Attempt to import the JFormField class file if it isn't already imported.	 * You can use this method outside of JForm for loading a field for inheritance or composition.	 *	 * @param   string  $type  Type of a field whose class should be loaded.	 *	 * @return  mixed  Class name on success or false otherwise.	 *	 * @since   11.1	 */	public static function loadFieldClass($type)	{		return self::loadClass('field', $type);	}	/**	 * Attempt to import the JFormRule class file if it isn't already imported.	 * You can use this method outside of JForm for loading a rule for inheritance or composition.	 *	 * @param   string  $type  Type of a rule whose class should be loaded.	 *	 * @return  mixed  Class name on success or false otherwise.	 *	 * @since   11.1	 */	public static function loadRuleClass($type)	{		return self::loadClass('rule', $type);	}	/**	 * Load a class for one of the form's entities of a particular type.	 * Currently, it makes sense to use this method for the "field" and "rule" entities	 * (but you can support more entities in your subclass).	 *	 * @param   string  $entity  One of the form entities (field or rule).	 * @param   string  $type    Type of an entity.	 *	 * @return  mixed  Class name on success or false otherwise.	 *	 * @since   11.1	 */	protected static function loadClass($entity, $type)	{		if (strpos($type, '.'))		{			list($prefix, $type) = explode('.', $type);		}		else		{			$prefix = 'J';		}		$class = JString::ucfirst($prefix, '_') . 'Form' . JString::ucfirst($entity, '_') . JString::ucfirst($type, '_');		if (class_exists($class))		{			return $class;		}		// Get the field search path array.		$paths = self::addPath($entity);		// If the type is complex, add the base type to the paths.		if ($pos = strpos($type, '_'))		{			// Add the complex type prefix to the paths.			for ($i = 0, $n = count($paths); $i < $n; $i++)			{				// Derive the new path.				$path = $paths[$i] . '/' . strtolower(substr($type, 0, $pos));				// If the path does not exist, add it.				if (!in_array($path, $paths))				{					$paths[] = $path;				}			}			// Break off the end of the complex type.			$type = substr($type, $pos + 1);		}		// Try to find the class file.		$type = strtolower($type) . '.php';		foreach ($paths as $path)		{			if ($file = JPath::find($path, $type))			{				require_once $file;				if (class_exists($class))				{					break;				}			}		}		// Check for all if the class exists.		return class_exists($class) ? $class : false;	}	/**	 * Method to add a path to the list of field include paths.	 *	 * @param   mixed  $new  A path or array of paths to add.	 *	 * @return  array  The list of paths that have been added.	 *	 * @since   11.1	 */	public static function addFieldPath($new = null)	{		return self::addPath('field', $new);	}	/**	 * Method to add a path to the list of form include paths.	 *	 * @param   mixed  $new  A path or array of paths to add.	 *	 * @return  array  The list of paths that have been added.	 *	 * @since   11.1	 */	public static function addFormPath($new = null)	{		return self::addPath('form', $new);	}	/**	 * Method to add a path to the list of rule include paths.	 *	 * @param   mixed  $new  A path or array of paths to add.	 *	 * @return  array  The list of paths that have been added.	 *	 * @since   11.1	 */	public static function addRulePath($new = null)	{		return self::addPath('rule', $new);	}	/**	 * Method to add a path to the list of include paths for one of the form's entities.	 * Currently supported entities: field, rule and form. You are free to support your own in a subclass.	 *	 * @param   string  $entity  Form's entity name for which paths will be added.	 * @param   mixed   $new     A path or array of paths to add.	 *	 * @return  array  The list of paths that have been added.	 *	 * @since   11.1	 */	protected static function addPath($entity, $new = null)	{		// Reference to an array with paths for current entity		$paths = &self::$paths[$entity];		// Add the default entity's search path if not set.		if (empty($paths))		{			// While we support limited number of entities (form, field and rule)			// we can do this simple pluralisation:			$entity_plural = $entity . 's';			/*			 * But when someday we would want to support more entities, then we should consider adding			 * an inflector class to "libraries/joomla/utilities" and use it here (or somebody can use a real inflector in his subclass).			 * See also: pluralization snippet by Paul Osman in JControllerForm's constructor.			 */			$paths[] = __DIR__ . '/' . $entity_plural;		}		// Force the new path(s) to an array.		settype($new, 'array');		// Add the new paths to the stack if not already there.		foreach ($new as $path)		{			if (!in_array($path, $paths))			{				array_unshift($paths, trim($path));			}		}		return $paths;	}}
<?php/** * @package     Joomla.Administrator * @subpackage  com_modules * * @copyright   Copyright (C) 2005 - 2013 Open Source Matters, Inc. All rights reserved. * @license     GNU General Public License version 2 or later; see LICENSE.txt */defined('_JEXEC') or die;// Initiasile related data.require_once JPATH_ADMINISTRATOR . '/components/com_menus/helpers/menus.php';$menuTypes = MenusHelper::getMenuLinks();JHtml::_('script', 'jui/treeselectmenu.jquery.min.js', false, true);$script = "	jQuery(document).ready(function()	{		menuHide(jQuery('#jform_assignment').val());		jQuery('#jform_assignment').change(function()		{			menuHide(jQuery(this).val());		})	});	function menuHide(val)	{		if (val == 0 || val == '-')		{			jQuery('#menuselect-group').hide();		}		else		{			jQuery('#menuselect-group').show();		}	}";// Add the script to the document headJFactory::getDocument()->addScriptDeclaration($script);?><div class="control-group">	<label id="jform_menus-lbl" class="control-label" for="jform_menus"><?php echo JText::_('COM_MODULES_MODULE_ASSIGN'); ?></label>	<div id="jform_menus" class="controls">		<select name="jform[assignment]" id="jform_assignment">			<?php echo JHtml::_('select.options', ModulesHelper::getAssignmentOptions($this->item->client_id), 'value', 'text', $this->item->assignment, true); ?>		</select>	</div></div><div id="menuselect-group" class="control-group">	<label id="jform_menuselect-lbl" class="control-label" for="jform_menuselect"><?php echo JText::_('JGLOBAL_MENU_SELECTION'); ?></label>	<div id="jform_menuselect" class="controls">		<?php if (!empty($menuTypes)) : ?>		<?php $id = 'jform_menuselect'; ?>		<div class="well well-small">			<div class="form-inline">				<span class="small"><?php echo JText::_('JSELECT'); ?>:					<a id="treeCheckAll" href="javascript://"><?php echo JText::_('JALL'); ?></a>,					<a id="treeUncheckAll" href="javascript://"><?php echo JText::_('JNONE'); ?></a>				</span>				<span class="width-20">|</span>				<span class="small"><?php echo JText::_('COM_MODULES_EXPAND'); ?>:					<a id="treeExpandAll" href="javascript://"><?php echo JText::_('JALL'); ?></a>,					<a id="treeCollapseAll" href="javascript://"><?php echo JText::_('JNONE'); ?></a>				</span>				<input type="text" id="treeselectfilter" name="treeselectfilter" class="input-medium search-query pull-right" size="16"					autocomplete="off" placeholder="<?php echo JText::_('JSEARCH_FILTER'); ?>" aria-invalid="false" tabindex="-1">			</div>			<div class="clearfix"></div>			<hr class="hr-condensed" />			<ul class="treeselect">				<?php foreach ($menuTypes as &$type) : ?>				<?php if (count($type->links)) : ?>					<?php $prevlevel = 0; ?>					<li>						<div class="treeselect-item pull-left">							<label class="pull-left nav-header"><?php echo $type->title; ?></label></div>					<?php foreach ($type->links as $i => $link) : ?>						<?php						if ($prevlevel < $link->level)						{							echo '<ul class="treeselect-sub">';						} elseif ($prevlevel > $link->level)						{							echo str_repeat('</li></ul>', $prevlevel - $link->level);						} else {							echo '</li>';						}						$selected = 0;						if ($this->item->assignment == 0)						{							$selected = 1;						} elseif ($this->item->assignment < 0)						{							$selected = in_array(-$link->value, $this->item->assigned);						} elseif ($this->item->assignment > 0)						{							$selected = in_array($link->value, $this->item->assigned);						}						?>							<li>								<div class="treeselect-item pull-left">									<input type="checkbox" class="pull-left" name="jform[assigned][]" id="<?php echo $id . $link->value; ?>" value="<?php echo (int) $link->value; ?>"<?php echo $selected ? ' checked="checked"' : ''; ?> />									<label for="<?php echo $id . $link->value; ?>" class="pull-left"><?php echo $link->text; ?></label>								</div>						<?php						if (!isset($type->links[$i + 1]))						{							echo str_repeat('</li></ul>', $link->level);						}						$prevlevel = $link->level;						?>						<?php endforeach; ?>					</li>					<?php endif; ?>				<?php endforeach; ?>			</ul>			<div style="display:none;" id="treeselectmenu">				<div class="pull-left nav-hover treeselect-menu">					<div class="btn-group">						<a href="#" data-toggle="dropdown" class="dropdown-toggle btn btn-micro">							<span class="caret"></span>						</a>						<ul class="dropdown-menu">							<li class="nav-header"><?php echo JText::_('COM_MODULES_SUBITEMS'); ?></li>							<li class="divider"></li>							<li class=""><a class="checkall" href="javascript://"><i class="icon-checkbox"></i> <?php echo JText::_('JSELECT'); ?></a>							</li>							<li><a class="uncheckall" href="javascript://"><i class="icon-checkbox-unchecked"></i> <?php echo JText::_('COM_MODULES_DESELECT'); ?></a>							</li>							<div class="treeselect-menu-expand">							<li class="divider"></li>							<li><a class="expandall" href="javascript://"><i class="icon-plus"></i> <?php echo JText::_('COM_MODULES_EXPAND'); ?></a></li>							<li><a class="collapseall" href="javascript://"><i class="icon-minus"></i> <?php echo JText::_('COM_MODULES_COLLAPSE'); ?></a></li>							</div>						</ul>					</div>				</div>			</div>		</div>		<?php endif; ?>	</div></div>
<?php/** * @package     Joomla.Platform * @subpackage  Mail * * @copyright   Copyright (C) 2005 - 2013 Open Source Matters, Inc. All rights reserved. * @license     GNU General Public License version 2 or later; see LICENSE */defined('JPATH_PLATFORM') or die;$PHPMAILER_LANG["authenticate"] = JText::_('PHPMAILER_AUTHENTICATE');$PHPMAILER_LANG["connect_host"] = JText::_('PHPMAILER_CONNECT_HOST');$PHPMAILER_LANG["data_not_accepted"] = JText::_('PHPMAILER_DATA_NOT_ACCEPTED');$PHPMAILER_LANG['empty_message'] = JText::_('PHPMAILER_EMPTY_MESSAGE');$PHPMAILER_LANG["encoding"] = JText::_('PHPMAILER_ENCODING');$PHPMAILER_LANG["execute"] = JText::_('PHPMAILER_EXECUTE');$PHPMAILER_LANG["file_access"] = JText::_('PHPMAILER_FILE_ACCESS');$PHPMAILER_LANG["file_open"] = JText::_('PHPMAILER_FILE_OPEN');$PHPMAILER_LANG["from_failed"] = JText::_('PHPMAILER_FROM_FAILED');$PHPMAILER_LANG["instantiate"] = JText::_('PHPMAILER_INSTANTIATE');$PHPMAILER_LANG['invalid_address'] = JText::_('PHPMAILER_INVALID_ADDRESS');$PHPMAILER_LANG["mailer_not_supported"] = JText::_('PHPMAILER_MAILER_IS_NOT_SUPPORTED');$PHPMAILER_LANG["provide_address"] = JText::_('PHPMAILER_PROVIDE_ADDRESS');$PHPMAILER_LANG["recipients_failed"] = JText::_('PHPMAILER_RECIPIENTS_FAILED');$PHPMAILER_LANG["signing"]  = JText::_('PHPMAILER_SIGNING_ERROR');$PHPMAILER_LANG['smtp_connect_failed'] = JText::_('PHPMAILER_SMTP_CONNECT_FAILED');$PHPMAILER_LANG['smtp_error'] = JText::_('PHPMAILER_SMTP_ERROR');$PHPMAILER_LANG['variable_set'] = JText::_('PHPMAILER_VARIABLE_SET');
<?php/** * @package     Joomla.Administrator * @subpackage  mod_menu * * @copyright   Copyright (C) 2005 - 2013 Open Source Matters, Inc. All rights reserved. * @license     GNU General Public License version 2 or later; see LICENSE.txt */defined('_JEXEC') or die;$document = JFactory::getDocument();$direction = $document->direction == 'rtl' ? 'pull-right' : '';require JModuleHelper::getLayoutPath('mod_menu', $enabled ? 'default_enabled' : 'default_disabled');$menu->renderMenu('menu', $enabled ? 'nav ' . $direction : 'nav disabled ' . $direction);
<?php/** * @package     Joomla.Administrator * @subpackage  com_messages * * @copyright   Copyright (C) 2005 - 2013 Open Source Matters, Inc. All rights reserved. * @license     GNU General Public License version 2 or later; see LICENSE.txt */defined('_JEXEC') or die;/** * @package     Joomla.Administrator * @subpackage  com_messages * @since       1.6 */class MessagesHelper{	/**	 * Configure the Linkbar.	 *	 * @param   string	The name of the active view.	 *	 * @return  void	 * @since   1.6	 */	public static function addSubmenu($vName)	{		JHtmlSidebar::addEntry(			JText::_('COM_MESSAGES_ADD'),			'index.php?option=com_messages&view=message&layout=edit',			$vName == 'message'		);		JHtmlSidebar::addEntry(			JText::_('COM_MESSAGES_READ'),			'index.php?option=com_messages',			$vName == 'messages'		);	}	/**	 * Gets a list of the actions that can be performed.	 *	 * @return  JObject	 */	public static function getActions()	{		$user	= JFactory::getUser();		$result	= new JObject;		$actions = JAccess::getActions('com_messages');		foreach ($actions as $action)		{			$result->set($action->name,	$user->authorise($action->name, 'com_messages'));		}		return $result;	}	/**	 * Get a list of filter options for the state of a module.	 *	 * @return  array  An array of JHtmlOption elements.	 */	public static function getStateOptions()	{		// Build the filter options.		$options	= array();		$options[]	= JHtml::_('select.option',	'1',	JText::_('COM_MESSAGES_OPTION_READ'));		$options[]	= JHtml::_('select.option',	'0',	JText::_('COM_MESSAGES_OPTION_UNREAD'));		$options[]	= JHtml::_('select.option',	'-2',	JText::_('JTRASHED'));		return $options;	}}
<?php/** * @package     Joomla.Administrator * @subpackage  com_languages * * @copyright   Copyright (C) 2005 - 2013 Open Source Matters, Inc. All rights reserved. * @license     GNU General Public License version 2 or later; see LICENSE.txt */defined('_JEXEC') or die;/** * Languages component helper. * * @package     Joomla.Administrator * @subpackage  com_languages * @since       1.6 */class LanguagesHelper{	/**	 * Configure the Linkbar.	 *	 * @param   string  $vName   The name of the active view.	 * @param   int     $client  The client id of the active view. Maybe be 0 or 1	 *	 * @return  void	 */	public static function addSubmenu($vName, $client = 0)	{		JHtmlSidebar::addEntry(			JText::_('COM_LANGUAGES_SUBMENU_INSTALLED_SITE'),			'index.php?option=com_languages&view=installed&client=0',			$vName == 'installed' && $client === 0		);		JHtmlSidebar::addEntry(			JText::_('COM_LANGUAGES_SUBMENU_INSTALLED_ADMINISTRATOR'),			'index.php?option=com_languages&view=installed&client=1',			$vName == 'installed' && $client === 1		);		JHtmlSidebar::addEntry(			JText::_('COM_LANGUAGES_SUBMENU_CONTENT'),			'index.php?option=com_languages&view=languages',			$vName == 'languages'		);		JHtmlSidebar::addEntry(			JText::_('COM_LANGUAGES_SUBMENU_OVERRIDES'),			'index.php?option=com_languages&view=overrides',			$vName == 'overrides'		);	}	/**	 * Gets a list of the actions that can be performed.	 *	 * @return  JObject	 */	public static function getActions()	{		$user		= JFactory::getUser();		$result		= new JObject;		$assetName	= 'com_languages';		$actions = JAccess::getActions($assetName);		foreach ($actions as $action)		{			$result->set($action->name,	$user->authorise($action->name, $assetName));		}		return $result;	}	/**	 * Method for parsing ini files	 *	 * @param   string  $filename Path and name of the ini file to parse	 *	 * @return  array   Array of strings found in the file, the array indices will be the keys. On failure an empty array will be returned	 *	 * @since   2.5	 */	public static function parseFile($filename)	{		if (!is_file($filename))		{			return array();		}		$contents = file_get_contents($filename);		$contents = str_replace('_QQ_', '"\""', $contents);		$strings  = @parse_ini_string($contents);		if ($strings === false)		{			return array();		}		return $strings;	}	/**	 * Filter method for language keys.	 * This method will be called by JForm while filtering the form data.	 *	 * @param   	string	$value	The language key to filter	 *	 * @return  string	The filtered language key	 *	 * @since		2.5	 */	public static function filterKey($value)	{		$filter = JFilterInput::getInstance(null, null, 1, 1);		return strtoupper($filter->clean($value, 'cmd'));	}	/**	 * Filter method for language strings.	 * This method will be called by JForm while filtering the form data.	 *	 * @param   	string	$value	The language string to filter	 *	 * @return  string	The filtered language string	 *	 * @since		2.5	 */	public static function filterText($value)	{		$filter = JFilterInput::getInstance(null, null, 1, 1);		return $filter->clean($value);	}}
<?php/** * @package     Joomla.Platform * @subpackage  FileSystem * * @copyright   Copyright (C) 2005 - 2013 Open Source Matters, Inc. All rights reserved. * @license     GNU General Public License version 2 or later; see LICENSE */defined('JPATH_PLATFORM') or die;/** * String Controller * * @package     Joomla.Platform * @subpackage  FileSystem * @since       11.1 */class JStringController{	/**	 * Defines a variable as an array	 *	 * @return  array	 *	 * @since   11.1	 */	public function _getArray()	{		static $strings = array();		return $strings;	}	/**	 * Create a reference	 *	 * @param   string  $reference  The key	 * @param   string  &$string    The value	 *	 * @return  void	 *	 * @since   11.1	 */	public function createRef($reference, &$string)	{		$ref = &self::_getArray();		$ref[$reference] = & $string;	}	/**	 * Get reference	 *	 * @param   string  $reference  The key for the reference.	 *	 * @return  mixed  False if not set, reference if it it exists	 *	 * @since   11.1	 */	public function getRef($reference)	{		$ref = &self::_getArray();		if (isset($ref[$reference]))		{			return $ref[$reference];		}		else		{			return false;		}	}}
<?php/*** @version $Id$* @package utf8* @subpackage strings*///---------------------------------------------------------------/*** UTF-8 aware alternative to stristr* Find first occurrence of a string using case insensitive comparison* Note: requires utf8_strtolower* @param string* @param string* @return int* @see http://www.php.net/strcasecmp* @see utf8_strtolower* @package utf8* @subpackage strings*/function utf8_stristr($str, $search) {    if ( strlen($search) == 0 ) {        return $str;    }    $lstr = utf8_strtolower($str);    $lsearch = utf8_strtolower($search);    //JOOMLA SPECIFIC FIX - BEGIN    preg_match('/^(.*)'.preg_quote($lsearch, '/').'/Us',$lstr, $matches);    //JOOMLA SPECIFIC FIX - END    if ( count($matches) == 2 ) {        return substr($str, strlen($matches[1]));    }    return FALSE;}
<?php/** * @package     Joomla.Site * @subpackage  com_contact * * @copyright   Copyright (C) 2005 - 2013 Open Source Matters, Inc. All rights reserved. * @license     GNU General Public License version 2 or later; see LICENSE.txt */defined('_JEXEC') or die;require_once JPATH_COMPONENT . '/helpers/route.php';$controller = JControllerLegacy::getInstance('Contact');$controller->execute(JFactory::getApplication()->input->get('task'));$controller->redirect();
<?php/** * @package     Joomla.Site * @subpackage  com_finder * * @copyright   Copyright (C) 2005 - 2013 Open Source Matters, Inc. All rights reserved. * @license     GNU General Public License version 2 or later; see LICENSE */defined('_JEXEC') or die;require_once JPATH_COMPONENT . '/helpers/route.php';$controller = JControllerLegacy::getInstance('Finder');$controller->execute(JFactory::getApplication()->input->get('task'));$controller->redirect();
<?php/** * @package     Joomla.Site * @subpackage  mod_wrapper * * @copyright   Copyright (C) 2005 - 2013 Open Source Matters, Inc. All rights reserved. * @license     GNU General Public License version 2 or later; see LICENSE.txt */defined('_JEXEC') or die;// Include the syndicate functions only oncerequire_once __DIR__ . '/helper.php';$params = ModWrapperHelper::getParams($params);$load	= $params->get('load');$url	= htmlspecialchars($params->get('url'));$target = htmlspecialchars($params->get('target'));$width	= htmlspecialchars($params->get('width'));$height = htmlspecialchars($params->get('height'));$scroll = htmlspecialchars($params->get('scrolling'));$moduleclass_sfx = htmlspecialchars($params->get('moduleclass_sfx'));$frameborder = htmlspecialchars($params->get('frameborder'));require JModuleHelper::getLayoutPath('mod_wrapper', $params->get('layout', 'default'));
<?php/** * @package     Joomla.Administrator * @subpackage  com_languages * * @copyright   Copyright (C) 2005 - 2013 Open Source Matters, Inc. All rights reserved. * @license     GNU General Public License version 2 or later; see LICENSE.txt */defined('_JEXEC') or die;/** * Languages Controller * * @package     Joomla.Administrator * @subpackage  com_languages * @since       1.5 */class LanguagesController extends JControllerLegacy{	/**	 * @var		string	The default view.	 * @since   1.6	 */	protected $default_view = 'installed';	/**	 * Method to display a view.	 *	 * @param   boolean			If true, the view output will be cached	 * @param   array  An array of safe url parameters and their variable types, for valid values see {@link JFilterInput::clean()}.	 *	 * @return  JController		This object to support chaining.	 * @since   1.5	 */	public function display($cachable = false, $urlparams = false)	{		require_once JPATH_COMPONENT.'/helpers/languages.php';		$view   = $this->input->get('view', 'languages');		$layout = $this->input->get('layout', 'default');		$id     = $this->input->getInt('id');		// Check for edit form.		if ($view == 'language' && $layout == 'edit' && !$this->checkEditId('com_languages.edit.language', $id)) {			// Somehow the person just went to the form - we don't allow that.			$this->setError(JText::sprintf('JLIB_APPLICATION_ERROR_UNHELD_ID', $id));			$this->setMessage($this->getError(), 'error');			$this->setRedirect(JRoute::_('index.php?option=com_languages&view=languages', false));			return false;		}		parent::display();		return $this;	}}
<?php/** * @package     Joomla.Site * @subpackage  com_users * * @copyright   Copyright (C) 2005 - 2013 Open Source Matters, Inc. All rights reserved. * @license     GNU General Public License version 2 or later; see LICENSE.txt */defined('_JEXEC') or die;/** * Registration view class for Users. * * @package     Joomla.Site * @subpackage  com_users * @since       1.6 */class UsersViewRegistration extends JViewLegacy{	protected $data;	protected $form;	protected $params;	protected $state;	/**	 * Method to display the view.	 *	 * @param   string	The template file to include	 * @since   1.6	 */	public function display($tpl = null)	{		// Get the view data.		$this->data		= $this->get('Data');		$this->form		= $this->get('Form');		$this->state	= $this->get('State');		$this->params	= $this->state->get('params');		// Check for errors.		if (count($errors = $this->get('Errors')))		{			JError::raiseError(500, implode('<br />', $errors));			return false;		}		// Check for layout override		$active = JFactory::getApplication()->getMenu()->getActive();		if (isset($active->query['layout']))		{			$this->setLayout($active->query['layout']);		}		//Escape strings for HTML output		$this->pageclass_sfx = htmlspecialchars($this->params->get('pageclass_sfx'));		$this->prepareDocument();		parent::display($tpl);	}	/**	 * Prepares the document.	 *	 * @since   1.6	 */	protected function prepareDocument()	{		$app		= JFactory::getApplication();		$menus		= $app->getMenu();		$title 		= null;		// Because the application sets a default page title,		// we need to get it from the menu item itself		$menu = $menus->getActive();		if ($menu)		{			$this->params->def('page_heading', $this->params->get('page_title', $menu->title));		}		else		{			$this->params->def('page_heading', JText::_('COM_USERS_REGISTRATION'));		}		$title = $this->params->get('page_title', '');		if (empty($title))		{			$title = $app->getCfg('sitename');		}		elseif ($app->getCfg('sitename_pagetitles', 0) == 1)		{			$title = JText::sprintf('JPAGETITLE', $app->getCfg('sitename'), $title);		}		elseif ($app->getCfg('sitename_pagetitles', 0) == 2)		{			$title = JText::sprintf('JPAGETITLE', $title, $app->getCfg('sitename'));		}		$this->document->setTitle($title);		if ($this->params->get('menu-meta_description'))		{			$this->document->setDescription($this->params->get('menu-meta_description'));		}		if ($this->params->get('menu-meta_keywords'))		{			$this->document->setMetadata('keywords', $this->params->get('menu-meta_keywords'));		}		if ($this->params->get('robots'))		{			$this->document->setMetadata('robots', $this->params->get('robots'));		}	}}
<?php/** * @package     Joomla.Administrator * @subpackage  com_config * * @copyright   Copyright (C) 2005 - 2013 Open Source Matters, Inc. All rights reserved. * @license     GNU General Public License version 2 or later; see LICENSE.txt */defined('_JEXEC') or die;?><div class="width-100"><fieldset class="adminform">	<legend><?php echo JText::_('COM_CONFIG_SERVER_SETTINGS'); ?></legend>		<ul class="adminformlist">			<?php			foreach ($this->form->getFieldset('server') as $field):			?>					<li><?php echo $field->label; ?>					<?php echo $field->input; ?></li>			<?php			endforeach;			?>		</ul></fieldset></div>
<?php/** * @package     Joomla.Site * @subpackage  com_newsfeeds * * @copyright   Copyright (C) 2005 - 2013 Open Source Matters, Inc. All rights reserved. * @license     GNU General Public License version 2 or later; see LICENSE.txt */defined('_JEXEC') or die;$class = ' class="first"';if (count($this->children[$this->category->id]) > 0 && $this->maxLevel != 0) :?><ul><?php foreach ($this->children[$this->category->id] as $id => $child) : ?>	<?php	if ($this->params->get('show_empty_categories') || $child->numitems || count($child->getChildren())) :	if (!isset($this->children[$this->category->id][$id + 1]))	{		$class = ' class="last"';	}	?>	<li<?php echo $class; ?>>		<?php $class = ''; ?>			<span class="item-title"><a href="<?php echo JRoute::_(NewsfeedsHelperRoute::getCategoryRoute($child->id));?>">				<?php echo $this->escape($child->title); ?></a>			</span>			<?php if ($this->params->get('show_subcat_desc') == 1) :?>			<?php if ($child->description) : ?>				<div class="category-desc">					<?php echo JHtml::_('content.prepare', $child->description, '', 'com_newsfeeds.category'); ?>				</div>			<?php endif; ?>            <?php endif; ?>            <?php if ($this->params->get('show_cat_items') == 1) :?>			<dl class="newsfeed-count"><dt>				<?php echo JText::_('COM_NEWSFEEDS_CAT_NUM'); ?></dt>				<dd><?php echo $child->numitems; ?></dd>			</dl>		<?php endif; ?>			<?php if (count($child->getChildren()) > 0) :				$this->children[$child->id] = $child->getChildren();				$this->category = $child;				$this->maxLevel--;				echo $this->loadTemplate('children');				$this->category = $child->getParent();				$this->maxLevel++;			endif; ?>		</li>	<?php endif; ?>	<?php endforeach; ?>	</ul><?php endif;
<?php/** * @package     Joomla.Platform * @subpackage  HTML * * @copyright   Copyright (C) 2005 - 2013 Open Source Matters, Inc. All rights reserved. * @license     GNU General Public License version 2 or later; see LICENSE */defined('JPATH_PLATFORM') or die;/** * Extended Utility class for handling date display. * * @package     Joomla.Platform * @subpackage  HTML * @since       11.3 */abstract class JHtmlDate{	/**	 * Function to convert a static time into a relative measurement	 *	 * @param   string  $date  The date to convert	 * @param   string  $unit  The optional unit of measurement to return	 *                         if the value of the diff is greater than one	 * @param   string  $time  An optional time to compare to, defaults to now	 *	 * @return  string  The converted time string	 *	 * @since   11.3	 */	public static function relative($date, $unit = null, $time = null)	{		if (is_null($time))		{			// Get now			$time = JFactory::getDate('now');		}		// Get the difference in seconds between now and the time		$diff = strtotime($time) - strtotime($date);		// Less than a minute		if ($diff < 60)		{			return JText::_('JLIB_HTML_DATE_RELATIVE_LESSTHANAMINUTE');		}		// Round to minutes		$diff = round($diff / 60);		// 1 to 59 minutes		if ($diff < 60 || $unit == 'minute')		{			return JText::plural('JLIB_HTML_DATE_RELATIVE_MINUTES', $diff);		}		// Round to hours		$diff = round($diff / 60);		// 1 to 23 hours		if ($diff < 24 || $unit == 'hour')		{			return JText::plural('JLIB_HTML_DATE_RELATIVE_HOURS', $diff);		}		// Round to days		$diff = round($diff / 24);		// 1 to 6 days		if ($diff < 7 || $unit == 'day')		{			return JText::plural('JLIB_HTML_DATE_RELATIVE_DAYS', $diff);		}		// Round to weeks		$diff = round($diff / 7);		// 1 to 4 weeks		if ($diff <= 4 || $unit == 'week')		{			return JText::plural('JLIB_HTML_DATE_RELATIVE_WEEKS', $diff);		}		// Over a month, return the absolute time		return JHtml::_('date', $date);	}}
<?php/** * @package     Joomla.Platform * @subpackage  Database * * @copyright   Copyright (C) 2005 - 2013 Open Source Matters, Inc. All rights reserved. * @license     GNU General Public License version 2 or later; see LICENSE */defined('JPATH_PLATFORM') or die;/** * SQLite database iterator. * * @package     Joomla.Platform * @subpackage  Database * @since       12.1 */class JDatabaseIteratorSqlite extends JDatabaseIteratorPdo{}
<?php/** * @package     Joomla.Administrator * @subpackage  com_messages * * @copyright   Copyright (C) 2005 - 2013 Open Source Matters, Inc. All rights reserved. * @license     GNU General Public License version 2 or later; see LICENSE.txt */defined('_JEXEC') or die;/** * Messages Component Message Model * * @package     Joomla.Administrator * @subpackage  com_messages * @since       1.6 */class MessagesControllerMessage extends JControllerForm{	/**	 * Method (override) to check if you can save a new or existing record.	 *	 * Adjusts for the primary key name and hands off to the parent class.	 *	 * @param   array  An array of input data.	 * @param   string	The name of the key for the primary key.	 *	 * @return  boolean	 */	protected function allowSave($data, $key = 'message_id')	{		return parent::allowSave($data, $key);	}	/**	 * Reply to an existing message.	 *	 * This is a simple redirect to the compose form.	 */	public function reply()	{		if ($replyId = $this->input->getInt('reply_id'))		{			$this->setRedirect('index.php?option=com_messages&view=message&layout=edit&reply_id=' . $replyId);		}		else		{			$this->setMessage(JText::_('COM_MESSAGES_INVALID_REPLY_ID'));			$this->setRedirect('index.php?option=com_messages&view=messages');		}	}}
<?php/** * @package     Joomla.Platform * @subpackage  Image * * @copyright   Copyright (C) 2005 - 2013 Open Source Matters, Inc. All rights reserved. * @license     GNU General Public License version 2 or later; see LICENSE */defined('JPATH_PLATFORM') or die;/** * Image Filter class to transform an image to grayscale. * * @package     Joomla.Platform * @subpackage  Image * @since       11.3 */class JImageFilterGrayscale extends JImageFilter{	/**	 * Method to apply a filter to an image resource.	 *	 * @param   array  $options  An array of options for the filter.	 *	 * @return  void	 *	 * @since   11.3	 * @throws  InvalidArgumentException	 * @throws  RuntimeException	 */	public function execute(array $options = array())	{		// Verify that image filter support for PHP is available.		if (!function_exists('imagefilter'))		{			JLog::add('The imagefilter function for PHP is not available.', JLog::ERROR);			throw new RuntimeException('The imagefilter function for PHP is not available.');		}		// Perform the grayscale filter.		imagefilter($this->handle, IMG_FILTER_GRAYSCALE);	}}
<?php/** * @package     Joomla.Site * @subpackage  Templates.beez3 * * @copyright   Copyright (C) 2005 - 2013 Open Source Matters, Inc. All rights reserved. * @license     GNU General Public License version 2 or later; see LICENSE.txt */defined('_JEXEC') or die;$app = JFactory::getApplication();$templateparams = $app->getTemplate(true)->params;$images = json_decode($this->item->images);$urls = json_decode($this->item->urls);JHtml::addIncludePath(JPATH_COMPONENT . '/helpers');// Create shortcut to parameters.$params = $this->item->params;?><article class="item-page<?php echo $this->pageclass_sfx?>"><?php if ($this->params->get('show_page_heading')) : ?><?php if ($this->params->get('show_page_heading') and $params->get('show_title')) :?><hgroup><?php endif; ?><h1>	<?php echo $this->escape($this->params->get('page_heading')); ?></h1><?php endif; ?><?phpif (!empty($this->item->pagination) && $this->item->pagination && !$this->item->paginationposition && $this->item->paginationrelative){	echo $this->item->pagination;}if ($params->get('show_title')) : ?>		<h2>			<?php echo $this->escape($this->item->title); ?>		</h2><?php endif; ?><?php if ($this->params->get('show_page_heading') and $params->get('show_title')) :?></hgroup><?php endif; ?><?php if ($params->get('access-edit') ||  $params->get('show_print_icon') || $params->get('show_email_icon')) : ?>		<ul class="actions">		<?php if (!$this->print) : ?>				<?php if ($params->get('show_print_icon')) : ?>				<li class="print-icon">						<?php echo JHtml::_('icon.print_popup', $this->item, $params, array(), true); ?>				</li>				<?php endif; ?>				<?php if ($params->get('show_email_icon')) : ?>				<li class="email-icon">						<?php echo JHtml::_('icon.email', $this->item, $params, array(), true); ?>				</li>				<?php endif; ?>				<?php if ($this->user->authorise('core.edit', 'com_content.article.'.$this->item->id)) : ?>						<li class="edit-icon">							<?php echo JHtml::_('icon.edit', $this->item, $params, array(), true); ?>						</li>					<?php endif; ?>		<?php else : ?>				<li>						<?php echo JHtml::_('icon.print_screen', $this->item, $params, array(), true); ?>				</li>		<?php endif; ?>		</ul><?php endif; ?>	<?php  if (!$params->get('show_intro')) :		echo $this->item->event->afterDisplayTitle;	endif; ?>	<?php echo $this->item->event->beforeDisplayContent; ?><?php $useDefList = (($params->get('show_author')) or ($params->get('show_category')) or ($params->get('show_parent_category'))	or ($params->get('show_create_date')) or ($params->get('show_modify_date')) or ($params->get('show_publish_date'))	or ($params->get('show_hits'))); ?><?php if ($useDefList) : ?> <dl class="article-info"> <dt class="article-info-term"><?php  echo JText::_('COM_CONTENT_ARTICLE_INFO'); ?></dt><?php endif; ?><?php if ($params->get('show_parent_category') && $this->item->parent_slug != '1:root') : ?>		<dd class="parent-category-name">			<?php 	$title = $this->escape($this->item->parent_title);					$url = '<a href="'.JRoute::_(ContentHelperRoute::getCategoryRoute($this->item->parent_slug)).'">'.$title.'</a>';?>			<?php if ($params->get('link_parent_category') and $this->item->parent_slug) : ?>				<?php echo JText::sprintf('COM_CONTENT_PARENT', $url); ?>				<?php else : ?>				<?php echo JText::sprintf('COM_CONTENT_PARENT', $title); ?>			<?php endif; ?>		</dd><?php endif; ?><?php if ($params->get('show_category')) : ?>		<dd class="category-name">			<?php 	$title = $this->escape($this->item->category_title);					$url = '<a href="'.JRoute::_(ContentHelperRoute::getCategoryRoute($this->item->catslug)).'">'.$title.'</a>';?>			<?php if ($params->get('link_category') and $this->item->catslug) : ?>				<?php echo JText::sprintf('COM_CONTENT_CATEGORY', $url); ?>				<?php else : ?>				<?php echo JText::sprintf('COM_CONTENT_CATEGORY', $title); ?>			<?php endif; ?>		</dd><?php endif; ?><?php if ($params->get('show_create_date')) : ?>		<dd class="create">		<?php echo JText::sprintf('COM_CONTENT_CREATED_DATE_ON', JHtml::_('date', $this->item->created, JText::_('DATE_FORMAT_LC2'))); ?>		</dd><?php endif; ?><?php if ($params->get('show_modify_date')) : ?>		<dd class="modified">		<?php echo JText::sprintf('COM_CONTENT_LAST_UPDATED', JHtml::_('date', $this->item->modified, JText::_('DATE_FORMAT_LC2'))); ?>		</dd><?php endif; ?><?php if ($params->get('show_publish_date')) : ?>		<dd class="published">		<?php echo JText::sprintf('COM_CONTENT_PUBLISHED_DATE_ON', JHtml::_('date', $this->item->publish_up, JText::_('DATE_FORMAT_LC2'))); ?>		</dd><?php endif; ?><?php if ($params->get('show_author') && !empty($this->item->author )) : ?>	<dd class="createdby">		<?php $author = $this->item->author; ?>		<?php $author = ($this->item->created_by_alias ? $this->item->created_by_alias : $author);?>			<?php if (!empty($this->item->contactid ) &&  $params->get('link_author') == true):?>				<?php echo JText::sprintf('COM_CONTENT_WRITTEN_BY',					JHtml::_('link', JRoute::_('index.php?option=com_contact&view=contact&id=' . $this->item->contactid), $author)				); ?>			<?php else :?>				<?php echo JText::sprintf('COM_CONTENT_WRITTEN_BY', $author); ?>			<?php endif; ?>	</dd><?php endif; ?><?php if ($params->get('show_hits')) : ?>		<dd class="hits">		<?php echo JText::sprintf('COM_CONTENT_ARTICLE_HITS', $this->item->hits); ?>		</dd><?php endif; ?><?php if ($useDefList) : ?> </dl><?php endif; ?>	<?php if (isset ($this->item->toc)) : ?>		<?php echo $this->item->toc; ?>	<?php endif; ?><?php if (isset($urls) AND ((!empty($urls->urls_position) AND ($urls->urls_position == '0')) OR ($params->get('urls_position') == '0' AND empty($urls->urls_position)))		OR (empty($urls->urls_position) AND (!$params->get('urls_position')))) : ?>	<?php echo $this->loadTemplate('links'); ?><?php endif; ?>	<?php  if (isset($images->image_fulltext) and !empty($images->image_fulltext)) : ?>	<?php $imgfloat = (empty($images->float_fulltext)) ? $params->get('float_fulltext') : $images->float_fulltext; ?>	<div class="img-fulltext-<?php echo htmlspecialchars($imgfloat); ?>">	<img		<?php if ($images->image_fulltext_caption):			echo 'class="caption"'.' title="' .htmlspecialchars($images->image_fulltext_caption) .'"';		endif; ?>		src="<?php echo htmlspecialchars($images->image_fulltext); ?>" alt="<?php echo htmlspecialchars($images->image_fulltext_alt); ?>"/>	</div>	<?php endif; ?><?phpif (!empty($this->item->pagination) AND $this->item->pagination AND !$this->item->paginationposition AND !$this->item->paginationrelative):	echo $this->item->pagination;endif;?>	<?php echo $this->item->text; ?><?php // TAGS ?><?php if ($params->get('show_tags', 1) && !empty($this->item->tags)) : ?>	<?php $this->item->tagLayout = new JLayoutFile('joomla.content.tags'); ?>	<?php echo $this->item->tagLayout->render($this->item->tags->itemTags); ?><?php endif; ?><?phpif (!empty($this->item->pagination) AND $this->item->pagination AND $this->item->paginationposition AND!$this->item->paginationrelative):	echo $this->item->pagination;?><?php endif; ?>	<?php if (isset($urls) AND ((!empty($urls->urls_position) AND ($urls->urls_position == '1')) OR ( $params->get('urls_position') == '1'))) : ?>	<?php echo $this->loadTemplate('links'); ?>	<?php endif; ?><?phpif (!empty($this->item->pagination) AND $this->item->pagination AND $this->item->paginationposition AND $this->item->paginationrelative):	echo $this->item->pagination;?><?php endif; ?>	<?php echo $this->item->event->afterDisplayContent; ?></article>
<?php/** * @package     Joomla.Site * @subpackage  mod_footer * * @copyright   Copyright (C) 2005 - 2013 Open Source Matters, Inc. All rights reserved. * @license     GNU General Public License version 2 or later; see LICENSE.txt */defined('_JEXEC') or die;$app		= JFactory::getApplication();$date		= JFactory::getDate();$cur_year	= $date->format('Y');$csite_name	= $app->getCfg('sitename');if (JString::strpos(JText :: _('MOD_FOOTER_LINE1'), '%date%')){	$line1 = str_replace('%date%', $cur_year, JText :: _('MOD_FOOTER_LINE1'));}else {	$line1 = JText :: _('MOD_FOOTER_LINE1');}if (JString::strpos($line1, '%sitename%')){	$lineone = str_replace('%sitename%', $csite_name, $line1);}else {	$lineone = $line1;}$moduleclass_sfx = htmlspecialchars($params->get('moduleclass_sfx'));require JModuleHelper::getLayoutPath('mod_footer', $params->get('layout', 'default'));
<?php/** * @package     Joomla.Administrator * @subpackage  mod_multilangstatus * * @copyright   Copyright (C) 2005 - 2013 Open Source Matters, Inc. All rights reserved. * @license     GNU General Public License version 2 or later; see LICENSE.txt */defined('_JEXEC') or die;require JModuleHelper::getLayoutPath('mod_multilangstatus', $params->get('layout', 'default'));
<?php/** * @package     Joomla.Platform * @subpackage  GitHub * * @copyright   Copyright (C) 2005 - 2013 Open Source Matters, Inc. All rights reserved. * @license     GNU General Public License version 2 or later; see LICENSE */defined('JPATH_PLATFORM') or die;/** * Joomla Platform class for interacting with a GitHub server instance. * * @property-read  JGithubGists    $gists    GitHub API object for gists. * @property-read  JGithubIssues   $issues   GitHub API object for issues. * @property-read  JGithubPulls    $pulls    GitHub API object for pulls. * @property-read  JGithubRefs     $refs     GitHub API object for referencess. * @property-read  JGithubForks    $forks    GitHub API object for forks. * @property-read  JGithubCommits  $commits  GitHub API object for commits. * * @package     Joomla.Platform * @subpackage  GitHub * @since       11.3 */class JGithub{	/**	 * @var    JRegistry  Options for the GitHub object.	 * @since  11.3	 */	protected $options;	/**	 * @var    JGithubHttp  The HTTP client object to use in sending HTTP requests.	 * @since  11.3	 */	protected $client;	/**	 * @var    JGithubGists  GitHub API object for gists.	 * @since  11.3	 */	protected $gists;	/**	 * @var    JGithubIssues  GitHub API object for issues.	 * @since  11.3	 */	protected $issues;	/**	 * @var    JGithubPulls  GitHub API object for pulls.	 * @since  11.3	 */	protected $pulls;	/**	 * @var    JGithubRefs  GitHub API object for referencess.	 * @since  11.3	 */	protected $refs;	/**	 * @var    JGithubForks  GitHub API object for forks.	 * @since  11.3	 */	protected $forks;	/**	 * @var    JGithubCommits  GitHub API object for commits.	 * @since  12.1	 */	protected $commits;	/**	 * Constructor.	 *	 * @param   JRegistry    $options  GitHub options object.	 * @param   JGithubHttp  $client   The HTTP client object.	 *	 * @since   11.3	 */	public function __construct(JRegistry $options = null, JGithubHttp $client = null)	{		$this->options = isset($options) ? $options : new JRegistry;		$this->client  = isset($client) ? $client : new JGithubHttp($this->options);		// Setup the default API url if not already set.		$this->options->def('api.url', 'https://api.github.com');	}	/**	 * Magic method to lazily create API objects	 *	 * @param   string  $name  Name of property to retrieve	 *	 * @return  JGithubObject  GitHub API object (gists, issues, pulls, etc).	 *	 * @since   11.3	 */	public function __get($name)	{		if ($name == 'gists')		{			if ($this->gists == null)			{				$this->gists = new JGithubGists($this->options, $this->client);			}			return $this->gists;		}		if ($name == 'issues')		{			if ($this->issues == null)			{				$this->issues = new JGithubIssues($this->options, $this->client);			}			return $this->issues;		}		if ($name == 'pulls')		{			if ($this->pulls == null)			{				$this->pulls = new JGithubPulls($this->options, $this->client);			}			return $this->pulls;		}		if ($name == 'refs')		{			if ($this->refs == null)			{				$this->refs = new JGithubRefs($this->options, $this->client);			}			return $this->refs;		}		if ($name == 'forks')		{			if ($this->forks == null)			{				$this->forks = new JGithubForks($this->options, $this->client);			}			return $this->forks;		}		if ($name == 'commits')		{			if ($this->commits == null)			{				$this->commits = new JGithubCommits($this->options, $this->client);			}			return $this->commits;		}	}	/**	 * Get an option from the JGitHub instance.	 *	 * @param   string  $key  The name of the option to get.	 *	 * @return  mixed  The option value.	 *	 * @since   11.3	 */	public function getOption($key)	{		return $this->options->get($key);	}	/**	 * Set an option for the JGitHub instance.	 *	 * @param   string  $key    The name of the option to set.	 * @param   mixed   $value  The option value to set.	 *	 * @return  JGitHub  This object for method chaining.	 *	 * @since   11.3	 */	public function setOption($key, $value)	{		$this->options->set($key, $value);		return $this;	}}
<?php/** * @package     Joomla.Platform * @subpackage  Table * * @copyright   Copyright (C) 2005 - 2013 Open Source Matters, Inc. All rights reserved. * @license     GNU General Public License version 2 or later; see LICENSE */defined('JPATH_PLATFORM') or die;/** * Languages table. * * @package     Joomla.Platform * @subpackage  Table * @since       11.1 */class JTableLanguage extends JTable{	/**	 * Constructor	 *	 * @param   JDatabaseDriver  $db  Database driver object.	 *	 * @since   11.1	 */	public function __construct($db)	{		parent::__construct('#__languages', 'lang_id', $db);	}	/**	 * Overloaded check method to ensure data integrity	 *	 * @return  boolean  True on success	 *	 * @since   11.1	 */	public function check()	{		if (trim($this->title) == '')		{			$this->setError(JText::_('JLIB_DATABASE_ERROR_LANGUAGE_NO_TITLE'));			return false;		}		return true;	}	/**	 * Overrides JTable::store to check unique fields.	 *	 * @param   boolean  $updateNulls  True to update fields even if they are null.	 *	 * @return  boolean  True on success.	 *	 * @since   11.4	 */	public function store($updateNulls = false)	{		// Verify that the sef field is unique		$table = JTable::getInstance('Language', 'JTable');		if ($table->load(array('sef' => $this->sef)) && ($table->lang_id != $this->lang_id || $this->lang_id == 0))		{			$this->setError(JText::_('JLIB_DATABASE_ERROR_LANGUAGE_UNIQUE_SEF'));			return false;		}		// Verify that the image field is unique		if ($table->load(array('image' => $this->image)) && ($table->lang_id != $this->lang_id || $this->lang_id == 0))		{			$this->setError(JText::_('JLIB_DATABASE_ERROR_LANGUAGE_UNIQUE_IMAGE'));			return false;		}		// Verify that the language code is unique		if ($table->load(array('lang_code' => $this->lang_code)) && ($table->lang_id != $this->lang_id || $this->lang_id == 0))		{			$this->setError(JText::_('JLIB_DATABASE_ERROR_LANGUAGE_UNIQUE_LANG_CODE'));			return false;		}		return parent::store($updateNulls);	}}
<?php/** * @package     Joomla.Administrator * @subpackage  com_finder * * @copyright   Copyright (C) 2005 - 2013 Open Source Matters, Inc. All rights reserved. * @license     GNU General Public License version 2 or later; see LICENSE */defined('_JEXEC') or die;/** * Filter view class for Finder. * * @package     Joomla.Administrator * @subpackage  com_finder * @since       2.5 */class FinderViewFilter extends JViewLegacy{	/**	 * Method to display the view.	 *	 * @param   string  $tpl  A template file to load. [optional]	 *	 * @return  mixed  A string if successful, otherwise a JError object.	 *	 * @since   2.5	 */	public function display($tpl = null)	{		// Load the view data.		$this->filter = $this->get('Filter');		$this->item = $this->get('Item');		$this->form = $this->get('Form');		$this->state = $this->get('State');		// Check for errors.		if (count($errors = $this->get('Errors')))		{			JError::raiseError(500, implode("\n", $errors));			return false;		}		JHtml::addIncludePath(JPATH_COMPONENT . '/helpers/html');		JHtml::addIncludePath(JPATH_SITE . '/components/com_finder/helpers/html');		// Configure the toolbar.		$this->addToolbar();		parent::display($tpl);	}	/**	 * Method to configure the toolbar for this view.	 *	 * @return  void	 *	 * @since   2.5	 */	protected function addToolbar()	{		JFactory::getApplication()->input->set('hidemainmenu', true);		$user = JFactory::getUser();		$userId = $user->get('id');		$isNew = ($this->item->filter_id == 0);		$checkedOut = !($this->item->checked_out == 0 || $this->item->checked_out == $userId);		$canDo = FinderHelper::getActions();		// Configure the toolbar.		JToolbarHelper::title(JText::_('COM_FINDER_FILTER_EDIT_TOOLBAR_TITLE'), 'finder');		// Set the actions for new and existing records.		if ($isNew)		{			// For new records, check the create permission.			if ($canDo->get('core.create'))			{				JToolbarHelper::apply('filter.apply');				JToolbarHelper::save('filter.save');				JToolbarHelper::save2new('filter.save2new');			}			JToolbarHelper::cancel('filter.cancel');		}		else		{			// Can't save the record if it's checked out.			if (!$checkedOut)			{				// Since it's an existing record, check the edit permission.				if ($canDo->get('core.edit'))				{					JToolbarHelper::apply('filter.apply');					JToolbarHelper::save('filter.save');					// We can save this record, but check the create permission to see if we can return to make a new one.					if ($canDo->get('core.create'))					{						JToolbarHelper::save2new('filter.save2new');					}				}			}			// If an existing item, can save as a copy			if ($canDo->get('core.create'))			{				JToolbarHelper::save2copy('filter.save2copy');			}			JToolbarHelper::cancel('filter.cancel', 'JTOOLBAR_CLOSE');		}		JToolbarHelper::divider();		JToolbarHelper::help('JHELP_COMPONENTS_FINDER_MANAGE_SEARCH_FILTERS_EDIT');	}}
<?php/** * @package     Joomla.Administrator * @subpackage  com_modules * * @copyright   Copyright (C) 2005 - 2013 Open Source Matters, Inc. All rights reserved. * @license     GNU General Public License version 2 or later; see LICENSE.txt */defined('_JEXEC') or die;/** * Modules manager master display controller. * * @package     Joomla.Administrator * @subpackage  com_modules * @since       1.6 */class ModulesController extends JControllerLegacy{	/**	 * Method to display a view.	 *	 * @param   boolean			If true, the view output will be cached	 * @param   array  An array of safe url parameters and their variable types, for valid values see {@link JFilterInput::clean()}.	 *	 * @return  JController		This object to support chaining.	 * @since   1.5	 */	public function display($cachable = false, $urlparams = false)	{		require_once JPATH_COMPONENT.'/helpers/modules.php';		// Load the submenu.		ModulesHelper::addSubmenu($this->input->get('view', 'modules'));		$view   = $this->input->get('view', 'modules');		$layout = $this->input->get('layout', 'default');		$id     = $this->input->getInt('id');		// Check for edit form.		if ($view == 'module' && $layout == 'edit' && !$this->checkEditId('com_modules.edit.module', $id))		{			// Somehow the person just went to the form - we don't allow that.			$this->setError(JText::sprintf('JLIB_APPLICATION_ERROR_UNHELD_ID', $id));			$this->setMessage($this->getError(), 'error');			$this->setRedirect(JRoute::_('index.php?option=com_modules&view=modules', false));			return false;		}		parent::display();	}}
<?php/** * Squiz_Sniffs_Strings_ConcatenationSpacingSniff. * * PHP version 5 * * @category  PHP * @package   PHP_CodeSniffer * @author    Greg Sherwood <gsherwood@squiz.net> * @author    Marc McIntyre <mmcintyre@squiz.net> * @copyright 2006 Squiz Pty Ltd (ABN 77 084 670 600) * @license   http://matrix.squiz.net/developer/tools/php_cs/licence BSD Licence * @version   CVS: $Id: ConcatenationSpacingSniff.php 151 2010-11-26 01:07:46Z elkuku $ * @link      http://pear.php.net/package/PHP_CodeSniffer *//** * Makes sure there are is a spaces between the concatenation operator <b>.</b> and the strings being concatenated. * * Example: * <b class="bad">$a = $b.$c;</b> * <b class="good">$a = $b . $c;</b> * * @category  PHP * @package   PHP_CodeSniffer * @author    Greg Sherwood <gsherwood@squiz.net> * @author    Marc McIntyre <mmcintyre@squiz.net> * @copyright 2006 Squiz Pty Ltd (ABN 77 084 670 600) * @license   http://matrix.squiz.net/developer/tools/php_cs/licence BSD Licence * @version   Release: 1.3.0RC1 * @link      http://pear.php.net/package/PHP_CodeSniffer */class Joomla_Sniffs_WhiteSpace_ConcatenationSpacingSniff implements PHP_CodeSniffer_Sniff{	/**	 * Returns an array of tokens this test wants to listen for.	 *	 * @return array	 */	public function register()	{		return array(T_STRING_CONCAT);	}//function	/**	 * Processes this test, when one of its tokens is encountered.	 *	 * @param PHP_CodeSniffer_File $phpcsFile The file being scanned.	 * @param integer $stackPtr The position of the current token in the	 *                                        stack passed in $tokens.	 *	 * @return void	 */	public function process(PHP_CodeSniffer_File $phpcsFile, $stackPtr)	{		$tokens = $phpcsFile->getTokens();		if ($tokens[($stackPtr + 1)]['code'] != T_WHITESPACE)		{			// space after			$message = 'Concat operator must be followed by one space';			$phpcsFile->addError($message, $stackPtr, 'Missing');		}		else		{			$found = strlen($tokens[($stackPtr + 1)]['content']);			if ($found > 1)			{				$error = sprintf('Expected 1 space after concat operator; %s found', $found);				$phpcsFile->addError($error, $stackPtr, 'Too much');			}		}		if ($tokens[($stackPtr - 1)]['code'] != T_WHITESPACE)		{			// space before			$message = 'Concat operator must be preceeded by one space';			$phpcsFile->addError($message, $stackPtr, 'Missing');		}		else		{			if (strpos($tokens[($stackPtr - 2)]['content'], $phpcsFile->eolChar) !== false			|| strpos($tokens[($stackPtr - 1)]['content'], $phpcsFile->eolChar) !== false)			{				// the dot is on a new line				return;			}			$found = strlen($tokens[($stackPtr - 1)]['content']);			if ($found > 1)			{				$error = sprintf('Expected 1 space before concat operator; %s found', $found);				$phpcsFile->addError($error, $stackPtr, 'Too much');			}		}	}//function}//class
<?php/** * @package     Joomla.Site * @subpackage  com_contact * * @copyright   Copyright (C) 2005 - 2013 Open Source Matters, Inc. All rights reserved. * @license     GNU General Public License version 2 or later; see LICENSE.txt */defined('_JEXEC') or die;$cparams = JComponentHelper::getParams('com_media');jimport('joomla.html.html.bootstrap');?><div class="contact<?php echo $this->pageclass_sfx?>">	<?php if ($this->params->get('show_page_heading')) : ?>		<h1>			<?php echo $this->escape($this->params->get('page_heading')); ?>		</h1>	<?php endif; ?>	<?php if ($this->contact->name && $this->params->get('show_name')) : ?>		<div class="page-header">			<h2>				<?php if ($this->item->published == 0) : ?>					<span class="label label-warning"><?php echo JText::_('JUNPUBLISHED'); ?></span>				<?php endif; ?>				<span class="contact-name"><?php echo $this->contact->name; ?></span>			</h2>		</div>	<?php endif;  ?>	<?php if ($this->params->get('show_contact_category') == 'show_no_link') : ?>		<h3>			<span class="contact-category"><?php echo $this->contact->category_title; ?></span>		</h3>	<?php endif; ?>	<?php if ($this->params->get('show_contact_category') == 'show_with_link') : ?>		<?php $contactLink = ContactHelperRoute::getCategoryRoute($this->contact->catid); ?>		<h3>			<span class="contact-category"><a href="<?php echo $contactLink; ?>">				<?php echo $this->escape($this->contact->category_title); ?></a>			</span>		</h3>	<?php endif; ?>	<?php if ($this->params->get('show_contact_list') && count($this->contacts) > 1) : ?>		<form action="#" method="get" name="selectForm" id="selectForm">			<?php echo JText::_('COM_CONTACT_SELECT_CONTACT'); ?>			<?php echo JHtml::_('select.genericlist', $this->contacts, 'id', 'class="inputbox" onchange="document.location.href = this.value"', 'link', 'name', $this->contact->link);?>		</form>	<?php endif; ?>	<?php if ($this->params->get('show_tags', 1) && !empty($this->item->tags)) : ?>		<?php $this->item->tagLayout = new JLayoutFile('joomla.content.tags'); ?>		<?php echo $this->item->tagLayout->render($this->item->tags->itemTags); ?>	<?php endif; ?> 	<?php if ($this->params->get('presentation_style') == 'sliders') : ?>		<?php echo JHtml::_('bootstrap.startAccordion', 'slide-contact', array('active' => 'basic-details')); ?>	<?php endif; ?>	<?php if ($this->params->get('presentation_style') == 'tabs') : ?>		<?php echo JHtml::_('bootstrap.startTabSet', 'myTab', array('active' => 'basic-details')); ?>	<?php endif; ?>	<?php if ($this->params->get('presentation_style') == 'sliders') : ?>		<?php echo JHtml::_('bootstrap.addSlide', 'slide-contact', JText::_('COM_CONTACT_DETAILS'), 'basic-details'); ?>	<?php endif; ?>	<?php if ($this->params->get('presentation_style') == 'tabs') : ?>		<?php echo JHtml::_('bootstrap.addTab', 'myTab', 'basic-details', JText::_('COM_CONTACT_DETAILS', true)); ?>	<?php endif; ?>	<?php if ($this->params->get('presentation_style') == 'plain'):?>		<?php  echo '<h3>'. JText::_('COM_CONTACT_DETAILS').'</h3>';  ?>	<?php endif; ?>	<?php if ($this->contact->image && $this->params->get('show_image')) : ?>		<div class="thumbnail pull-right">			<?php echo JHtml::_('image', $this->contact->image, JText::_('COM_CONTACT_IMAGE_DETAILS'), array('align' => 'middle')); ?>		</div>	<?php endif; ?>	<?php if ($this->contact->con_position && $this->params->get('show_position')) : ?>		<dl class="contact-position dl-horizontal">			<dd>				<?php echo $this->contact->con_position; ?>			</dd>		</dl>	<?php endif; ?>	<?php echo $this->loadTemplate('address'); ?>	<?php if ($this->params->get('allow_vcard')) :	?>		<?php echo JText::_('COM_CONTACT_DOWNLOAD_INFORMATION_AS');?>		<a href="<?php echo JRoute::_('index.php?option=com_contact&amp;view=contact&amp;id='.$this->contact->id . '&amp;format=vcf'); ?>">		<?php echo JText::_('COM_CONTACT_VCARD');?></a>	<?php endif; ?>	<?php if ($this->params->get('presentation_style') == 'sliders') : ?>		<?php echo JHtml::_('bootstrap.endSlide'); ?>	<?php endif; ?>	<?php if ($this->params->get('presentation_style') == 'tabs') : ?>		<?php echo JHtml::_('bootstrap.endTab'); ?>	<?php endif; ?>	<?php if ($this->params->get('show_email_form') && ($this->contact->email_to || $this->contact->user_id)) : ?>		<?php if ($this->params->get('presentation_style') == 'sliders') : ?>			<?php echo JHtml::_('bootstrap.addSlide', 'slide-contact', JText::_('COM_CONTACT_EMAIL_FORM'), 'display-form'); ?>		<?php endif; ?>		<?php if ($this->params->get('presentation_style') == 'tabs') : ?>			<?php echo JHtml::_('bootstrap.addTab', 'myTab', 'display-form', JText::_('COM_CONTACT_EMAIL_FORM', true)); ?>		<?php endif; ?>		<?php if ($this->params->get('presentation_style') == 'plain'):?>			<?php echo '<h3>'. JText::_('COM_CONTACT_EMAIL_FORM').'</h3>';  ?>		<?php endif; ?>		<?php  echo $this->loadTemplate('form');  ?>		<?php if ($this->params->get('presentation_style') == 'sliders') : ?>			<?php echo JHtml::_('bootstrap.endSlide'); ?>		<?php endif; ?>			<?php if ($this->params->get('presentation_style') == 'tabs') : ?>		<?php echo JHtml::_('bootstrap.endTab'); ?>			<?php endif; ?>	<?php endif; ?>	<?php if ($this->params->get('show_links')) : ?>		<?php echo $this->loadTemplate('links'); ?>	<?php endif; ?>	<?php if ($this->params->get('show_articles') && $this->contact->user_id && $this->contact->articles) : ?>		<?php if ($this->params->get('presentation_style') == 'sliders') : ?>			<?php echo JHtml::_('bootstrap.addSlide', 'slide-contact', JText::_('JGLOBAL_ARTICLES'), 'display-articles'); ?>		<?php endif; ?>		<?php if ($this->params->get('presentation_style') == 'tabs') : ?>			<?php echo JHtml::_('bootstrap.addTab', 'myTab', 'display-articles', JText::_('JGLOBAL_ARTICLES', true)); ?>		<?php endif; ?>		<?php if ($this->params->get('presentation_style') == 'plain'):?>			<?php echo '<h3>'. JText::_('JGLOBAL_ARTICLES').'</h3>';  ?>		<?php endif; ?>		<?php echo $this->loadTemplate('articles'); ?>		<?php if ($this->params->get('presentation_style') == 'sliders') : ?>			<?php echo JHtml::_('bootstrap.endSlide'); ?>		<?php endif; ?>		<?php if ($this->params->get('presentation_style') == 'tabs') : ?>			<?php echo JHtml::_('bootstrap.endTab'); ?>		<?php endif; ?>	<?php endif; ?>	<?php if ($this->params->get('show_profile') && $this->contact->user_id && JPluginHelper::isEnabled('user', 'profile')) : ?>		<?php if ($this->params->get('presentation_style') == 'sliders') : ?>			<?php echo JHtml::_('bootstrap.addSlide', 'slide-contact', JText::_('COM_CONTACT_PROFILE'), 'display-profile'); ?>		<?php endif; ?>		<?php if ($this->params->get('presentation_style') == 'tabs') : ?>			<?php echo JHtml::_('bootstrap.addTab', 'myTab', 'display-profile', JText::_('COM_CONTACT_PROFILE', true)); ?>		<?php endif; ?>		<?php if ($this->params->get('presentation_style') == 'plain'):?>			<?php echo '<h3>'. JText::_('COM_CONTACT_PROFILE').'</h3>';  ?>		<?php endif; ?>		<?php echo $this->loadTemplate('profile'); ?>		<?php if ($this->params->get('presentation_style') == 'sliders') : ?>			<?php echo JHtml::_('bootstrap.endSlide'); ?>		<?php endif; ?>		<?php if ($this->params->get('presentation_style') == 'tabs') : ?>			<?php echo JHtml::_('bootstrap.endTab'); ?>		<?php endif; ?>	<?php endif; ?>	<?php if ($this->contact->misc && $this->params->get('show_misc')) : ?>		<?php if ($this->params->get('presentation_style') == 'sliders') : ?>			<?php echo JHtml::_('bootstrap.addSlide', 'slide-contact', JText::_('COM_CONTACT_OTHER_INFORMATION'), 'display-misc'); ?>		<?php endif; ?>		<?php if ($this->params->get('presentation_style') == 'tabs') : ?>			<?php echo JHtml::_('bootstrap.addTab', 'myTab', 'display-misc', JText::_('COM_CONTACT_OTHER_INFORMATION', true)); ?>		<?php endif; ?>		<?php if ($this->params->get('presentation_style') == 'plain'):?>			<?php echo '<h3>'. JText::_('COM_CONTACT_OTHER_INFORMATION').'</h3>';  ?>		<?php endif; ?>		<div class="contact-miscinfo">			<dl class="dl-horizontal">				<dt>					<span class="<?php echo $this->params->get('marker_class'); ?>">					<?php echo $this->params->get('marker_misc'); ?>					</span>				</dt>				<dd>					<span class="contact-misc">						<?php echo $this->contact->misc; ?>					</span>				</dd>			</dl>		</div>		<?php if ($this->params->get('presentation_style') == 'sliders') : ?>			<?php echo JHtml::_('bootstrap.endSlide'); ?>		<?php endif; ?>		<?php if ($this->params->get('presentation_style') == 'tabs') : ?>			<?php echo JHtml::_('bootstrap.endTab'); ?>		<?php endif; ?>	<?php endif; ?>	<?php if ($this->params->get('presentation_style') == 'sliders') : ?>		<?php echo JHtml::_('bootstrap.endAccordion'); ?>	<?php endif; ?>	<?php if ($this->params->get('presentation_style') == 'tabs') : ?>		<?php echo JHtml::_('bootstrap.endTabSet'); ?>	<?php endif; ?></div>
<?php/** * @package     Joomla.Administrator * @subpackage  com_admin * * @copyright   Copyright (C) 2005 - 2013 Open Source Matters, Inc. All rights reserved. * @license     GNU General Public License version 2 or later; see LICENSE.txt */defined('_JEXEC') or die;/** * HTML View class for the Admin component * * @package     Joomla.Administrator * @subpackage  com_admin * @since       1.6 */class AdminViewHelp extends JViewLegacy{	/**	 * @var string the search string	 */	protected $help_search = null;	/**	 * @var string the page to be viewed	 */	protected $page = null;	/**	 * @var string the iso language tag	 */	protected $lang_tag = null;	/**	 * @var array Table of contents	 */	protected $toc = null;	/**	 * @var string url for the latest version check	 */	protected $latest_version_check = 'http://www.joomla.org/download.html';	/**	 * @var string url for the start here link.	 */	protected $start_here = null;	/**	 * Display the view	 */	public function display($tpl = null)	{		$this->help_search			= $this->get('HelpSearch');		$this->page					= $this->get('Page');		$this->toc					= $this->get('Toc');		$this->lang_tag				= $this->get('LangTag');		$this->latest_version_check	= $this->get('LatestVersionCheck');		$this->addToolbar();		parent::display($tpl);	}	/**	 * Setup the Toolbar	 *	 * @since   1.6	 */	protected function addToolbar()	{		JToolbarHelper::title(JText::_('COM_ADMIN_HELP'), 'help_header.png');	}}
<?php/** * @package     Joomla.Site * @subpackage  com_newsfeeds * * @copyright   Copyright (C) 2005 - 2013 Open Source Matters, Inc. All rights reserved. * @license     GNU General Public License version 2 or later; see LICENSE.txt */defined('_JEXEC') or die;$class = ' class="first"';if (count($this->items[$this->parent->id]) > 0 && $this->maxLevelcat != 0) :?><ul><?php foreach ($this->items[$this->parent->id] as $id => $item) : ?>	<?php	if ($this->params->get('show_empty_categories_cat') || $item->numitems || count($item->getChildren())) :	if (!isset($this->items[$this->parent->id][$id + 1]))	{		$class = ' class="last"';	}	?>	<li<?php echo $class; ?>>	<?php $class = ''; ?>		<span class="item-title"><a href="<?php echo JRoute::_(NewsfeedsHelperRoute::getCategoryRoute($item->id));?>">			<?php echo $this->escape($item->title); ?></a>		</span>		<?php if ($this->params->get('show_subcat_desc_cat') == 1) :?>		<?php if ($item->description) : ?>			<div class="category-desc">				<?php echo JHtml::_('content.prepare', $item->description, '', 'com_newsfeeds.categories'); ?>			</div>		<?php endif; ?>        <?php endif; ?>		<?php if ($this->params->get('show_cat_items_cat') == 1) :?>			<dl class="newsfeed-count"><dt>				<?php echo JText::_('COM_NEWSFEEDS_CAT_NUM'); ?></dt>				<dd><?php echo $item->numitems; ?></dd>			</dl>		<?php endif; ?>		<?php if (count($item->getChildren()) > 0) :			$this->items[$item->id] = $item->getChildren();			$this->parent = $item;			$this->maxLevelcat--;			echo $this->loadTemplate('items');			$this->parent = $item->getParent();			$this->maxLevelcat++;		endif; ?>	</li>	<?php endif; ?><?php endforeach; ?></ul><?php endif; ?>
<?php/** * @package     Joomla.Administrator * @subpackage  com_banners * * @copyright   Copyright (C) 2005 - 2013 Open Source Matters, Inc. All rights reserved. * @license     GNU General Public License version 2 or later; see LICENSE.txt */defined('JPATH_BASE') or die;/** * Clicks Field class for the Joomla Framework. * * @package     Joomla.Administrator * @subpackage  com_banners * @since       1.6 */class JFormFieldImpMade extends JFormField{	/**	 * The form field type.	 *	 * @var		string	 * @since   1.6	 */	protected $type = 'ImpMade';	/**	 * Method to get the field input markup.	 *	 * @return  string	The field input markup.	 * @since   1.6	 */	protected function getInput()	{		$onclick	= ' onclick="document.id(\''.$this->id.'\').value=\'0\';"';		return '<input class="input-small" type="text" name="'.$this->name.'" id="'.$this->id.'" value="'.htmlspecialchars($this->value, ENT_COMPAT, 'UTF-8').'" readonly="readonly" /> <a class="btn" '.$onclick.'><i class="icon-refresh"></i> '.JText::_('COM_BANNERS_RESET_IMPMADE').'</a>';	}}
<?php/** * @package     Joomla.Administrator * @subpackage  com_installer * * @copyright   Copyright (C) 2005 - 2013 Open Source Matters, Inc. All rights reserved. * @license     GNU General Public License version 2 or later; see LICENSE.txt */defined('_JEXEC') or die;/** * Extension Manager Templates Model * * @package     Joomla.Administrator * @subpackage  com_installer * @since       1.6 */class InstallerModelWarnings extends JModelList{	/**	 * Extension Type	 * @var	string	 */	public $type = 'warnings';	/**	 * Return the byte value of a particular string.	 *	 * @param   string  $val  String optionally with G, M or K suffix	 *	 * @return  integer   size in bytes	 *	 * @since 1.6	 */	public function return_bytes($val)	{		$val = trim($val);		$last = strtolower($val{strlen($val) - 1});		switch ($last)		{			// The 'G' modifier is available since PHP 5.1.0			case 'g':				$val *= 1024;			case 'm':				$val *= 1024;			case 'k':				$val *= 1024;		}		return $val;	}	/**	 * Load the data.	 *	 * @return  array  Messages	 *	 * @since   1.6	 */	public function getItems()	{		static $messages;		if ($messages)		{			return $messages;		}		$messages = array();		$file_uploads = ini_get('file_uploads');		if (!$file_uploads)		{			$messages[] = array('message' => JText::_('COM_INSTALLER_MSG_WARNINGS_FILEUPLOADSDISABLED'),					'description' => JText::_('COM_INSTALLER_MSG_WARNINGS_FILEUPLOADISDISABLEDDESC'));		}		$upload_dir = ini_get('upload_tmp_dir');		if (!$upload_dir)		{			$messages[] = array('message' => JText::_('COM_INSTALLER_MSG_WARNINGS_PHPUPLOADNOTSET'),					'description' => JText::_('COM_INSTALLER_MSG_WARNINGS_PHPUPLOADNOTSETDESC'));		}		else		{			if (!is_writeable($upload_dir))			{				$messages[] = array('message' => JText::_('COM_INSTALLER_MSG_WARNINGS_PHPUPLOADNOTWRITEABLE'),						'description' => JText::sprintf('COM_INSTALLER_MSG_WARNINGS_PHPUPLOADNOTWRITEABLEDESC', $upload_dir));			}		}		$config = JFactory::getConfig();		$tmp_path = $config->get('tmp_path');		if (!$tmp_path)		{			$messages[] = array('message' => JText::_('COM_INSTALLER_MSG_WARNINGS_JOOMLATMPNOTSET'),					'description' => JText::_('COM_INSTALLER_MSG_WARNINGS_JOOMLATMPNOTSETDESC'));		}		else		{			if (!is_writeable($tmp_path))			{				$messages[] = array('message' => JText::_('COM_INSTALLER_MSG_WARNINGS_JOOMLATMPNOTWRITEABLE'),						'description' => JText::sprintf('COM_INSTALLER_MSG_WARNINGS_JOOMLATMPNOTWRITEABLEDESC', $tmp_path));			}		}		$memory_limit = $this->return_bytes(ini_get('memory_limit'));		if ($memory_limit < (8 * 1024 * 1024))		{			// 8MB			$messages[] = array('message' => JText::_('COM_INSTALLER_MSG_WARNINGS_LOWMEMORYWARN'),					'description' => JText::_('COM_INSTALLER_MSG_WARNINGS_LOWMEMORYDESC'));		}		elseif ($memory_limit < (16 * 1024 * 1024))		{			// 16MB			$messages[] = array('message' => JText::_('COM_INSTALLER_MSG_WARNINGS_MEDMEMORYWARN'),					'description' => JText::_('COM_INSTALLER_MSG_WARNINGS_MEDMEMORYDESC'));		}		$post_max_size = $this->return_bytes(ini_get('post_max_size'));		$upload_max_filesize = $this->return_bytes(ini_get('upload_max_filesize'));		if ($post_max_size < $upload_max_filesize)		{			$messages[] = array('message' => JText::_('COM_INSTALLER_MSG_WARNINGS_UPLOADBIGGERTHANPOST'),					'description' => JText::_('COM_INSTALLER_MSG_WARNINGS_UPLOADBIGGERTHANPOSTDESC'));		}		if ($post_max_size < (4 * 1024 * 1024)) // 4MB		{			$messages[] = array('message' => JText::_('COM_INSTALLER_MSG_WARNINGS_SMALLPOSTSIZE'),					'description' => JText::_('COM_INSTALLER_MSG_WARNINGS_SMALLPOSTSIZEDESC'));		}		if ($upload_max_filesize < (4 * 1024 * 1024)) // 4MB		{			$messages[] = array('message' => JText::_('COM_INSTALLER_MSG_WARNINGS_SMALLUPLOADSIZE'),					'description' => JText::_('COM_INSTALLER_MSG_WARNINGS_SMALLUPLOADSIZEDESC'));		}		return $messages;	}}
<?php/** * Squiz_Sniffs_WhiteSpace_SuperfluousWhitespaceSniff. * * PHP version 5 * * @category  PHP * @package   PHP_CodeSniffer * @author    Greg Sherwood <gsherwood@squiz.net> * @author    Marc McIntyre <mmcintyre@squiz.net> * @copyright 2006 Squiz Pty Ltd (ABN 77 084 670 600) * @license   http://matrix.squiz.net/developer/tools/php_cs/licence BSD Licence * @version   CVS: $Id: SuperfluousWhitespaceSniff.php 509 2011-08-30 02:21:56Z elkuku $ * @link      http://pear.php.net/package/PHP_CodeSniffer *//** * Checks for whitespace. * * Checks that. * <ul> *   <li>No whitespace proceeds the first content of the file.</li> *   <li>No whitespace resides after content on any line.</li> *   <li>There are not two or more empty lines in functions and classes.</li> *   <li>There is a exactly one empty line after the last content of the file.</li> * </ul> * * @category  PHP * @package   PHP_CodeSniffer * @author    Greg Sherwood <gsherwood@squiz.net> * @author    Marc McIntyre <mmcintyre@squiz.net> * @copyright 2006 Squiz Pty Ltd (ABN 77 084 670 600) * @license   http://matrix.squiz.net/developer/tools/php_cs/licence BSD Licence * @version   Release: 1.2.2 * @link      http://pear.php.net/package/PHP_CodeSniffer */class Joomla_Sniffs_WhiteSpace_SuperfluousWhitespaceSniff implements PHP_CodeSniffer_Sniff{    /**     * A list of tokenizers this sniff supports.     *     * @var array     */    public $supportedTokenizers = array(       'PHP',       'JS',       'CSS',    );    /**     * Returns an array of tokens this test wants to listen for.     *     * @return array     */    public function register()    {        return array(        T_OPEN_TAG,        T_CLOSE_TAG,        T_WHITESPACE,        T_COMMENT,        T_CLOSE_CURLY_BRACKET,        );    }//function    /**     * Processes this sniff, when one of its tokens is encountered.     *     * @param PHP_CodeSniffer_File $phpcsFile The file being scanned.     * @param integer $stackPtr The position of the current token in the stack passed in $tokens.     *     * @return void     */    public function process(PHP_CodeSniffer_File $phpcsFile, $stackPtr)    {        $tokens = $phpcsFile->getTokens();        if($stackPtr == $phpcsFile->numTokens - 1)        {            //-- We reached the end of the file - without a closing tag            if($tokens[$stackPtr]['code'] == T_WHITESPACE)            {                $lastCode = $tokens[$stackPtr - 1]['code'];                if($lastCode != T_CLOSE_CURLY_BRACKET                && $lastCode !== T_SEMICOLON)                {                    //-- If the second last is not a curly bracket or a semicolon                    $phpcsFile->addError('Additional whitespace found at end of file', $stackPtr);                }            }            else if(strpos($tokens[$stackPtr]['content'], $phpcsFile->eolChar) === false)            {                //-- Files must end with an empty line                $phpcsFile->addError('Please end your files with an empty line.', $stackPtr);            }        }        if($tokens[$stackPtr]['code'] === T_OPEN_TAG)        {            /*             Check for start of file whitespace.             */            if($phpcsFile->tokenizerType !== 'PHP')            {                // The first token is always the open tag inserted when tokenizsed                // and the second token is always the first piece of content in                // the file. If the second token is whitespace, there was                // whitespace at the start of the file.                if($tokens[($stackPtr + 1)]['code'] !== T_WHITESPACE)                {                    return;                }            }            else            {                // If its the first token, then there is no space.                if($stackPtr === 0)                {                    return;                }                for($i = ($stackPtr - 1); $i >= 0; $i--)                {                    // If we find something that isn't inline html                    // then there is something previous in the file.                    if($tokens[$i]['type'] !== 'T_INLINE_HTML')                    {                        return;                    }                    // If we have ended up with inline html make sure it isn't just whitespace.                    $tokenContent = trim($tokens[$i]['content']);                    if($tokenContent !== '')                    {                        return;                    }                }//for            }//end if            $phpcsFile->addError('Additional whitespace found at start of file', $stackPtr);        }        else if($phpcsFile->numTokens == ($stackPtr - 1))        {            //-- Wereached the end of the file - without a closing tag            die('BB');        }        else if($tokens[$stackPtr]['code'] === T_CLOSE_TAG)        {            /*            Check for end of file whitespace.            */            if($phpcsFile->tokenizerType === 'JS')            {                // The last token is always the close tag inserted when tokenizsed                // and the second last token is always the last piece of content in                // the file. If the second last token is whitespace, there was                // whitespace at the end of the file.                if($tokens[($stackPtr - 1)]['code'] !== T_WHITESPACE)                {                    return;                }            }            else if($phpcsFile->tokenizerType === 'CSS')            {                // The last two tokens are always the close tag and whitespace                // inserted when tokenizsed and the third last token is always the                // last piece of content in the file. If the third last token is                // whitespace, there was whitespace at the end of the file.                if($tokens[($stackPtr - 3)]['code'] !== T_WHITESPACE)                {                    return;                }                // Adjust the pointer to give the correct line number for the error.                $stackPtr -= 2;            }            else            {                if(isset($tokens[($stackPtr + 1)]) === false)                {                    // The close PHP token is the last in the file.                    return;                }                for($i = ($stackPtr + 1); $i < $phpcsFile->numTokens; $i++)                {                    // If we find something that isn't inline html then there                    // is more to the file.                    if($tokens[$i]['type'] !== 'T_INLINE_HTML')                    {                        return;                    }                    // If we have ended up with inline html make sure it                    // isn't just whitespace.                    $tokenContent = trim($tokens[$i]['content']);                    if(empty($tokenContent) === false)                    {                        return;                    }                }//for            }            $phpcsFile->addError('Additional whitespace found at end of file', $stackPtr);        }        else        {            /*             Check for end of line whitespace.             */            if(strpos($tokens[$stackPtr]['content'], $phpcsFile->eolChar) === false)            {                return;            }            $tokenContent = rtrim($tokens[$stackPtr]['content'], $phpcsFile->eolChar);            if(empty($tokenContent) === false)            {                if(preg_match('|^.*\s+$|', $tokenContent) !== 0)                {                    $phpcsFile->addError('Whitespace found at end of line', $stackPtr);                }            }            /*             Check for multiple blanks lines in a function or class.             */            if($phpcsFile->hasCondition($stackPtr, T_FUNCTION) === true            || $phpcsFile->hasCondition($stackPtr, T_CLASS) === true)            {                if($tokens[($stackPtr - 1)]['line'] < $tokens[$stackPtr]['line']                && $tokens[($stackPtr - 2)]['line'] === $tokens[($stackPtr - 1)]['line'])                {                    // This is an empty line and the line before this one is not                    //  empty, so this could be the start of a multiple empty                    // line block.                    $next  = $phpcsFile->findNext(T_WHITESPACE, $stackPtr, null, true);                    $lines = $tokens[$next]['line'] - $tokens[$stackPtr]['line'];                    if($lines > 1)                    {                        $error = 'Functions and classes must not contain multiple empty lines in a row;'                        ." found $lines empty lines";                        $phpcsFile->addError($error, $stackPtr);                    }                }            }        }//end if    }//function}//class
<?php/** * @package     Joomla.Platform * @subpackage  Session * * @copyright   Copyright (C) 2005 - 2013 Open Source Matters, Inc. All rights reserved. * @license     GNU General Public License version 2 or later; see LICENSE */defined('JPATH_PLATFORM') or die;/** * Custom session storage handler for PHP * * @package     Joomla.Platform * @subpackage  Session * @see         http://www.php.net/manual/en/function.session-set-save-handler.php * @todo        When dropping compatibility with PHP 5.3 use the SessionHandlerInterface and the SessionHandler class * @since       11.1 */abstract class JSessionStorage{	/**	 * @var    array  JSessionStorage instances container.	 * @since  11.3	 */	protected static $instances = array();	/**	 * Constructor	 *	 * @param   array  $options  Optional parameters.	 *	 * @since   11.1	 */	public function __construct($options = array())	{		$this->register($options);	}	/**	 * Returns a session storage handler object, only creating it if it doesn't already exist.	 *	 * @param   string  $name     The session store to instantiate	 * @param   array   $options  Array of options	 *	 * @return  JSessionStorage	 *	 * @since   11.1	 */	public static function getInstance($name = 'none', $options = array())	{		$name = strtolower(JFilterInput::getInstance()->clean($name, 'word'));		if (empty(self::$instances[$name]))		{			$class = 'JSessionStorage' . ucfirst($name);			if (!class_exists($class))			{				$path = __DIR__ . '/storage/' . $name . '.php';				if (file_exists($path))				{					require_once $path;				}				else				{					// No attempt to die gracefully here, as it tries to close the non-existing session					jexit('Unable to load session storage class: ' . $name);				}			}			self::$instances[$name] = new $class($options);		}		return self::$instances[$name];	}	/**	 * Register the functions of this class with PHP's session handler	 *	 * @return  void	 *	 * @since   11.1	 */	public function register()	{		// Use this object as the session handler		session_set_save_handler(			array($this, 'open'), array($this, 'close'), array($this, 'read'), array($this, 'write'),			array($this, 'destroy'), array($this, 'gc')		);	}	/**	 * Open the SessionHandler backend.	 *	 * @param   string  $save_path     The path to the session object.	 * @param   string  $session_name  The name of the session.	 *	 * @return  boolean  True on success, false otherwise.	 *	 * @since   11.1	 */	public function open($save_path, $session_name)	{		return true;	}	/**	 * Close the SessionHandler backend.	 *	 * @return  boolean  True on success, false otherwise.	 *	 * @since   11.1	 */	public function close()	{		return true;	}	/**	 * Read the data for a particular session identifier from the	 * SessionHandler backend.	 *	 * @param   string  $id  The session identifier.	 *	 * @return  string  The session data.	 *	 * @since   11.1	 */	public function read($id)	{		return;	}	/**	 * Write session data to the SessionHandler backend.	 *	 * @param   string  $id            The session identifier.	 * @param   string  $session_data  The session data.	 *	 * @return  boolean  True on success, false otherwise.	 *	 * @since   11.1	 */	public function write($id, $session_data)	{		return true;	}	/**	 * Destroy the data for a particular session identifier in the	 * SessionHandler backend.	 *	 * @param   string  $id  The session identifier.	 *	 * @return  boolean  True on success, false otherwise.	 *	 * @since   11.1	 */	public function destroy($id)	{		return true;	}	/**	 * Garbage collect stale sessions from the SessionHandler backend.	 *	 * @param   integer  $maxlifetime  The maximum age of a session.	 *	 * @return  boolean  True on success, false otherwise.	 *	 * @since   11.1	 */	public function gc($maxlifetime = null)	{		return true;	}	/**	 * Test to see if the SessionHandler is available.	 *	 * @return  boolean  True on success, false otherwise.	 *	 * @since   12.1	 */	public static function isSupported()	{		return true;	}	/**	 * Test to see if the SessionHandler is available.	 *	 * @return  boolean  True on success, false otherwise.	 *	 * @since   11.1	 * @deprecated  12.3 Use JSessionStorage::isSupported() instead.	 */	public static function test()	{		JLog::add('JSessionStorage::test() is deprecated. Use JSessionStorage::isSupported() instead.', JLog::WARNING, 'deprecated');		return static::isSupported();	}}
<?php/** * @package     Joomla.Plugin * @subpackage  Content.vote * * @copyright   Copyright (C) 2005 - 2013 Open Source Matters, Inc. All rights reserved. * @license     GNU General Public License version 2 or later; see LICENSE.txt */defined('_JEXEC') or die;/** * Vote plugin. * * @package     Joomla.Plugin * @subpackage  Content.vote * @since       1.5 */class PlgContentVote extends JPlugin{	/**	 * Load the language file on instantiation.	 *	 * @var    boolean	 * @since  3.1	 */	protected $autoloadLanguage = true;	/**	 * @since   1.6	 */	public function onContentBeforeDisplay($context, &$row, &$params, $page=0)	{		$html = '';		if ($params->get('show_vote'))		{			$rating = (int) @$row->rating;			$view = JFactory::getApplication()->input->getString('view', '');			$img = '';			// look for images in template if available			$starImageOn = JHtml::_('image', 'system/rating_star.png', JText::_('PLG_VOTE_STAR_ACTIVE'), null, true);			$starImageOff = JHtml::_('image', 'system/rating_star_blank.png', JText::_('PLG_VOTE_STAR_INACTIVE'), null, true);			for ($i = 0; $i < $rating; $i++)			{				$img .= $starImageOn;			}			for ($i = $rating; $i < 5; $i++)			{				$img .= $starImageOff;			}			$html .= '<div class="content_rating">';			$html .= '<p class="unseen element-invisible">' . JText::sprintf('PLG_VOTE_USER_RATING', $rating, '5') . '</p>';			$html .= $img;			$html .= '</div>';			if ($view == 'article' && $row->state == 1)			{				$uri = JURI::getInstance();				$uri->setQuery($uri->getQuery().'&hitcount=0');				// create option list for voting select box				$options = array();				for($i = 1; $i < 6; $i++)				{					$options[] = JHTML::_('select.option', $i, JText::sprintf('PLG_VOTE_VOTE', $i));				}				// generate voting form				$html .= '<form method="post" action="' . htmlspecialchars($uri->toString()) . '" class="form-inline">';				$html .= '<span class="content_vote">';				$html .= '<label class="unseen element-invisible" for="content_vote_' . $row->id . '">'.JText::_('PLG_VOTE_LABEL').'</label>';				$html .= JHTML::_('select.genericlist', $options, 'user_rating', null, 'value', 'text', '5', 'content_vote_'.$row->id);				$html .= '&#160;<input class="btn btn-mini" type="submit" name="submit_vote" value="' . JText::_('PLG_VOTE_RATE') . '" />';				$html .= '<input type="hidden" name="task" value="article.vote" />';				$html .= '<input type="hidden" name="hitcount" value="0" />';				$html .= '<input type="hidden" name="url" value="' . htmlspecialchars($uri->toString()) . '" />';				$html .= JHtml::_('form.token');				$html .= '</span>';				$html .= '</form>';			}		}		return $html;	}}
<?php/** * @package     Joomla.Site * @subpackage  com_contact * * @copyright   Copyright (C) 2005 - 2013 Open Source Matters, Inc. All rights reserved. * @license     GNU General Public License version 2 or later; see LICENSE.txt */defined('_JEXEC') or die;?><?php if ($this->params->get('presentation_style') == 'sliders') : ?>	<?php echo JHtml::_('bootstrap.addSlide', 'slide-contact', JText::_('COM_CONTACT_LINKS'), 'display-links'); ?><?php endif; ?><?php if ($this->params->get('presentation_style') == 'tabs') : ?>	<?php echo JHtml::_('bootstrap.addTab', 'myTab', 'display-links', JText::_('COM_CONTACT_LINKS', true)); ?><?php endif; ?><?php if ($this->params->get('presentation_style') == 'plain'):?>	<?php echo '<h3>'. JText::_('COM_CONTACT_LINKS').'</h3>';  ?><?php endif; ?><div class="contact-links">	<ul class="nav nav-tabs nav-stacked">		<?php		foreach (range('a', 'e') as $char) :// letters 'a' to 'e'			$link = $this->contact->params->get('link'.$char);			$label = $this->contact->params->get('link'.$char.'_name');			if (!$link) :				continue;			endif;			// Add 'http://' if not present			$link = (0 === strpos($link, 'http')) ? $link : 'http://'.$link;			// If no label is present, take the link			$label = ($label) ? $label : $link;			?>			<li>				<a href="<?php echo $link; ?>">					<?php echo $label; ?>				</a>			</li>		<?php endforeach; ?>	</ul></div><?php if ($this->params->get('presentation_style') == 'sliders') : ?>	<?php echo JHtml::_('bootstrap.endSlide'); ?><?php endif; ?><?php if ($this->params->get('presentation_style') == 'tabs') : ?>	<?php echo JHtml::_('bootstrap.endTab'); ?><?php endif; ?>
<?php/** * @package     Joomla.Administrator * @subpackage  com_languages * * @copyright   Copyright (C) 2005 - 2013 Open Source Matters, Inc. All rights reserved. * @license     GNU General Public License version 2 or later; see LICENSE.txt */defined('_JEXEC') or die;/** * Languages Controller * * @package     Joomla.Administrator * @subpackage  com_languages * @since       1.5 */class LanguagesControllerInstalled extends JControllerLegacy{	/**	 * task to set the default language	 */	public function setDefault()	{		// Check for request forgeries		JSession::checkToken() or jexit(JText::_('JInvalid_Token'));		$cid = $this->input->get('cid', '');		$model = $this->getModel('installed');		if ($model->publish($cid))		{			$msg = JText::_('COM_LANGUAGES_MSG_DEFAULT_LANGUAGE_SAVED');			$type = 'message';		}		else		{			$msg = $this->getError();			$type = 'error';		}		$clientId = $model->getState('filter.client_id');		$this->setredirect('index.php?option=com_languages&view=installed&client='.$clientId, $msg, $type);	}}
<?php/** * @package     Joomla.Administrator * @subpackage  com_finder * * @copyright   Copyright (C) 2005 - 2013 Open Source Matters, Inc. All rights reserved. * @license     GNU General Public License version 2 or later; see LICENSE */defined('_JEXEC') or die;/** * Link table class for the Finder package. * * @package     Joomla.Administrator * @subpackage  com_finder * @since       2.5 */class FinderTableLink extends JTable{	/**	 * Constructor	 *	 * @param   JDatabaseDriver  &$db  JDatabaseDriver connector object.	 *	 * @since   2.5	 */	public function __construct(&$db)	{		parent::__construct('#__finder_links', 'link_id', $db);	}}
<?php/** * @package     Joomla.Administrator * @subpackage  mod_toolbar * * @copyright   Copyright (C) 2005 - 2013 Open Source Matters, Inc. All rights reserved. * @license     GNU General Public License version 2 or later; see LICENSE.txt */defined('_JEXEC') or die;// Echo the toolbar.echo $toolbar;
<?php/*** @version $Id$* @package utf8* @subpackage strings*///---------------------------------------------------------------/*** UTF-8 aware alternative to strspn* Find length of initial segment matching mask* Note: requires utf8_strlen and utf8_substr (if start, length are used)* @param string* @return int* @see http://www.php.net/strspn* @package utf8* @subpackage strings*/function utf8_strspn($str, $mask, $start = NULL, $length = NULL) {    $mask = preg_replace('!([\\\\\\-\\]\\[/^])!','\\\${1}',$mask);	// Fix for $start but no $length argument.    if ($start !== null && $length === null) {    	$length = utf8_strlen($str);    }    if ( $start !== NULL || $length !== NULL ) {        $str = utf8_substr($str, $start, $length);    }    preg_match('/^['.$mask.']+/u',$str, $matches);    if ( isset($matches[0]) ) {        return utf8_strlen($matches[0]);    }    return 0;}
<?php/** * @package     Joomla.Administrator * @subpackage  com_finder * * @copyright   Copyright (C) 2005 - 2013 Open Source Matters, Inc. All rights reserved. * @license     GNU General Public License version 2 or later; see LICENSE */defined('_JEXEC') or die;/** * Filter model class for Finder. * * @package     Joomla.Administrator * @subpackage  com_finder * @since       2.5 */class FinderModelFilter extends JModelAdmin{	/**	 * The prefix to use with controller messages.	 *	 * @var    string	 * @since  2.5	 */	protected $text_prefix = 'COM_FINDER';	/**	 * Model context string.	 *	 * @var    string	 * @since  2.5	 */	protected $context = 'com_finder.filter';	/**	 * Custom clean cache method.	 *	 * @param   string   $group      The component name. [optional]	 * @param   integer  $client_id  The client ID. [optional]	 *	 * @return  void	 *	 * @since   2.5	 */	protected function cleanCache($group = 'com_finder', $client_id = 1)	{		parent::cleanCache($group, $client_id);	}	/**	 * Method to get the filter data.	 *	 * @return  mixed  The filter data.	 *	 * @since   2.5	 */	public function getFilter()	{		$filter_id = (int) $this->getState('filter.id');		// Get a FinderTableFilter instance.		$filter = $this->getTable();		// Attempt to load the row.		$return = $filter->load($filter_id);		// Check for a database error.		if ($return === false && $filter->getError())		{			$this->setError($filter->getError());			return false;		}		// Process the filter data.		if (!empty($filter->data))		{			$filter->data = explode(',', $filter->data);		}		elseif (empty($filter->data))		{			$filter->data = array();		}		// Check for a database error.		if ($this->_db->getErrorNum())		{			$this->setError($this->_db->getErrorMsg());			return false;		}		return $filter;	}	/**	 * Method to get the record form.	 *	 * @param   array    $data      Data for the form. [optional]	 * @param   boolean  $loadData  True if the form is to load its own data (default case), false if not. [optional]	 *	 * @return  mixed  A JForm object on success, false on failure	 *	 * @since   2.5	 */	public function getForm($data = array(), $loadData = true)	{		// Get the form.		$form = $this->loadForm('com_finder.filter', 'filter', array('control' => 'jform', 'load_data' => $loadData));		if (empty($form))		{			return false;		}		return $form;	}	/**	 * Returns a JTable object, always creating it.	 *	 * @param   string  $type    The table type to instantiate. [optional]	 * @param   string  $prefix  A prefix for the table class name. [optional]	 * @param   array   $config  Configuration array for model. [optional]	 *	 * @return  JTable  A database object	 *	 * @since   2.5	 */	public function getTable($type = 'Filter', $prefix = 'FinderTable', $config = array())	{		return JTable::getInstance($type, $prefix, $config);	}	/**	 * Method to get the data that should be injected in the form.	 *	 * @return  mixed  The data for the form.	 *	 * @since   2.5	 */	protected function loadFormData()	{		// Check the session for previously entered form data.		$data = JFactory::getApplication()->getUserState('com_finder.edit.filter.data', array());		if (empty($data))		{			$data = $this->getItem();		}		$this->preprocessData('com_finder.filter', $data);		return $data;	}}
<?php/** * @package     Joomla.Platform * @subpackage  Archive * * @copyright   Copyright (C) 2005 - 2013 Open Source Matters, Inc. All rights reserved. * @license     GNU General Public License version 2 or later; see LICENSE */defined('JPATH_PLATFORM') or die;jimport('joomla.filesystem.folder');/** * Tar format adapter for the JArchive class * * This class is inspired from and draws heavily in code and concept from the Compress package of * The Horde Project <http://www.horde.org> * * @contributor  Michael Slusarz <slusarz@horde.org> * @contributor  Michael Cochrane <mike@graftonhall.co.nz> * * @package     Joomla.Platform * @subpackage  Archive * @since       11.1 */class JArchiveTar implements JArchiveExtractable{	/**	 * Tar file types.	 *	 * @var    array	 * @since  11.1	 */	private $_types = array(		0x0 => 'Unix file',		0x30 => 'File',		0x31 => 'Link',		0x32 => 'Symbolic link',		0x33 => 'Character special file',		0x34 => 'Block special file',		0x35 => 'Directory',		0x36 => 'FIFO special file',		0x37 => 'Contiguous file');	/**	 * Tar file data buffer	 *	 * @var    string	 * @since  11.1	 */	private $_data = null;	/**	 * Tar file metadata array	 *	 * @var    array	 * @since  11.1	 */	private $_metadata = null;	/**	 * Extract a ZIP compressed file to a given path	 *	 * @param   string  $archive      Path to ZIP archive to extract	 * @param   string  $destination  Path to extract archive into	 * @param   array   $options      Extraction options [unused]	 *	 * @return  boolean True if successful	 *	 * @throws  RuntimeException	 * @since   11.1	 */	public function extract($archive, $destination, array $options = array())	{		$this->_data = null;		$this->_metadata = null;		$this->_data = file_get_contents($archive);		if (!$this->_data)		{			if (class_exists('JError'))			{				return JError::raiseWarning(100, 'Unable to read archive');			}			else			{				throw new RuntimeException('Unable to read archive');			}		}		$this->_getTarInfo($this->_data);		for ($i = 0, $n = count($this->_metadata); $i < $n; $i++)		{			$type = strtolower($this->_metadata[$i]['type']);			if ($type == 'file' || $type == 'unix file')			{				$buffer = $this->_metadata[$i]['data'];				$path = JPath::clean($destination . '/' . $this->_metadata[$i]['name']);				// Make sure the destination folder exists				if (!JFolder::create(dirname($path)))				{					if (class_exists('JError'))					{						return JError::raiseWarning(100, 'Unable to create destination');					}					else					{						throw new RuntimeException('Unable to create destination');					}				}				if (JFile::write($path, $buffer) === false)				{					if (class_exists('JError'))					{						return JError::raiseWarning(100, 'Unable to write entry');					}					else					{						throw new RuntimeException('Unable to write entry');					}				}			}		}		return true;	}	/**	 * Tests whether this adapter can unpack files on this computer.	 *	 * @return  boolean  True if supported	 *	 * @since   11.3	 */	public static function isSupported()	{		return true;	}	/**	 * Get the list of files/data from a Tar archive buffer.	 *	 * @param   string  &$data  The Tar archive buffer.	 *	 * @return   array  Archive metadata array	 * <pre>	 * KEY: Position in the array	 * VALUES: 'attr'  --  File attributes	 * 'data'  --  Raw file contents	 * 'date'  --  File modification time	 * 'name'  --  Filename	 * 'size'  --  Original file size	 * 'type'  --  File type	 * </pre>	 *	 * @since    11.1	 */	protected function _getTarInfo(& $data)	{		$position = 0;		$return_array = array();		while ($position < strlen($data))		{			$info = @unpack(				"a100filename/a8mode/a8uid/a8gid/a12size/a12mtime/a8checksum/Ctypeflag/a100link/a6magic/a2version/a32uname/a32gname/a8devmajor/a8devminor",				substr($data, $position)			);			if (!$info)			{				if (class_exists('JError'))				{					return JError::raiseWarning(100, 'Unable to decompress data');				}				else				{					throw new RuntimeException('Unable to decompress data');				}			}			$position += 512;			$contents = substr($data, $position, octdec($info['size']));			$position += ceil(octdec($info['size']) / 512) * 512;			if ($info['filename'])			{				$file = array(					'attr' => null,					'data' => null,					'date' => octdec($info['mtime']),					'name' => trim($info['filename']),					'size' => octdec($info['size']),					'type' => isset($this->_types[$info['typeflag']]) ? $this->_types[$info['typeflag']] : null);				if (($info['typeflag'] == 0) || ($info['typeflag'] == 0x30) || ($info['typeflag'] == 0x35))				{					/* File or folder. */					$file['data'] = $contents;					$mode = hexdec(substr($info['mode'], 4, 3));					$file['attr'] = (($info['typeflag'] == 0x35) ? 'd' : '-') . (($mode & 0x400) ? 'r' : '-') . (($mode & 0x200) ? 'w' : '-') .						(($mode & 0x100) ? 'x' : '-') . (($mode & 0x040) ? 'r' : '-') . (($mode & 0x020) ? 'w' : '-') . (($mode & 0x010) ? 'x' : '-') .						(($mode & 0x004) ? 'r' : '-') . (($mode & 0x002) ? 'w' : '-') . (($mode & 0x001) ? 'x' : '-');				}				else				{					/* Some other type. */				}				$return_array[] = $file;			}		}		$this->_metadata = $return_array;		return true;	}}
<?php/** * @package     Joomla.Site * @subpackage  Layout * * @copyright   Copyright (C) 2005 - 2013 Open Source Matters, Inc. All rights reserved. * @license     GNU General Public License version 2 or later; see LICENSE.txt */defined('JPATH_BASE') or die;?><div id="sidebar">	<div class="sidebar-nav">		<?php if ($displayData->displayMenu) : ?>		<ul id="submenu" class="nav nav-list">			<?php foreach ($displayData->list as $item) :			if (isset ($item[2]) && $item[2] == 1) : ?>				<li class="active">			<?php else : ?>				<li>			<?php endif;			if ($displayData->hide) : ?>				<a class="nolink"><?php echo $item[0]; ?></a>			<?php else :				if (strlen($item[1])) : ?>					<a href="<?php echo JFilterOutput::ampReplace($item[1]); ?>"><?php echo $item[0]; ?></a>				<?php else : ?>					<?php echo $item[0]; ?>				<?php endif;			endif; ?>			</li>			<?php endforeach; ?>		</ul>		<?php endif; ?>		<?php if ($displayData->displayMenu && $displayData->displayFilters) : ?>		<hr />		<?php endif; ?>		<?php if ($displayData->displayFilters) : ?>		<div class="filter-select hidden-phone">			<h4 class="page-header"><?php echo JText::_('JSEARCH_FILTER_LABEL');?></h4>			<?php foreach ($displayData->filters as $filter) : ?>				<label for="<?php echo $filter['name']; ?>" class="element-invisible"><?php echo $filter['label']; ?></label>				<select name="<?php echo $filter['name']; ?>" id="<?php echo $filter['name']; ?>" class="span12 small" onchange="this.form.submit()">					<?php if (!$filter['noDefault']) : ?>						<option value=""><?php echo $filter['label']; ?></option>					<?php endif; ?>					<?php echo $filter['options']; ?>				</select>				<hr class="hr-condensed" />			<?php endforeach; ?>		</div>		<?php endif; ?>	</div></div>
<?php/** * @package     Joomla.Legacy * @subpackage  Base * * @copyright   Copyright (C) 2005 - 2013 Open Source Matters, Inc. All rights reserved. * @license     GNU General Public License version 2 or later; see LICENSE */defined('JPATH_PLATFORM') or die;/** * Tree Node Class. * * @package     Joomla.Legacy * @subpackage  Base * @since       11.1 * @deprecated  12.3 * @codeCoverageIgnore */class JNode extends JObject{	/**	 * Parent node	 * @var    object	 *	 * @since  11.1	 */	protected $_parent = null;	/**	 * Array of Children	 *	 * @var    array	 * @since  11.1	 */	protected $_children = array();	/**	 * Constructor	 *	 * @since  11.1	 */	public function __construct()	{		JLog::add('JNode::__construct() is deprecated.', JLog::WARNING, 'deprecated');		return true;	}	/**	 * Add child to this node	 *	 * If the child already has a parent, the link is unset	 *	 * @param   JNode  &$child  The child to be added	 *	 * @return  void	 *	 * @since   11.1	 */	public function addChild(&$child)	{		JLog::add('JNode::addChild() is deprecated.', JLog::WARNING, 'deprecated');		if ($child instanceof Jnode)		{			$child->setParent($this);		}	}	/**	 * Set the parent of a this node	 *	 * If the node already has a parent, the link is unset	 *	 * @param   mixed  &$parent  The JNode for parent to be set or null	 *	 * @return  void	 *	 * @since    11.1	 */	public function setParent(&$parent)	{		JLog::add('JNode::setParent() is deprecated.', JLog::WARNING, 'deprecated');		if ($parent instanceof JNode || is_null($parent))		{			$hash = spl_object_hash($this);			if (!is_null($this->_parent))			{				unset($this->_parent->children[$hash]);			}			if (!is_null($parent))			{				$parent->_children[$hash] = & $this;			}			$this->_parent = & $parent;		}	}	/**	 * Get the children of this node	 *	 * @return  array    The children	 *	 * @since   11.1	 */	public function &getChildren()	{		JLog::add('JNode::getChildren() is deprecated.', JLog::WARNING, 'deprecated');		return $this->_children;	}	/**	 * Get the parent of this node	 *	 * @return  mixed   JNode object with the parent or null for no parent	 *	 * @since   11.1	 */	public function &getParent()	{		JLog::add('JNode::getParent() is deprecated.', JLog::WARNING, 'deprecated');		return $this->_parent;	}	/**	 * Test if this node has children	 *	 * @return   boolean  True if there are children	 *	 * @since    11.1	 */	public function hasChildren()	{		JLog::add('JNode::hasChildren() is deprecated.', JLog::WARNING, 'deprecated');		return (bool) count($this->_children);	}	/**	 * Test if this node has a parent	 *	 * @return  boolean  True if there is a parent	 *	 * @since   11.1	 */	public function hasParent()	{		JLog::add('JNode::hasParent() is deprecated.', JLog::WARNING, 'deprecated');		return $this->getParent() != null;	}}
<?php/** * @package     Joomla.Administrator * @subpackage  com_cpanel * * @copyright   Copyright (C) 2005 - 2013 Open Source Matters, Inc. All rights reserved. * @license     GNU General Public License version 2 or later; see LICENSE.txt */defined('_JEXEC') or die;// No access check.$controller	= JControllerLegacy::getInstance('Cpanel');$controller->execute(JFactory::getApplication()->input->get('task'));$controller->redirect();
<?php/** * @package     Joomla.Site * @subpackage  Layout * * @copyright   Copyright (C) 2005 - 2013 Open Source Matters, Inc. All rights reserved. * @license     GNU General Public License version 2 or later; see LICENSE.txt */defined('_JEXEC') or die;?></div>
<?php/** * @package     Joomla.Site * @subpackage  Templates.beez3 * * @copyright   Copyright (C) 2005 - 2013 Open Source Matters, Inc. All rights reserved. * @license     GNU General Public License version 2 or later; see LICENSE.txt */defined('_JEXEC') or die;$app = JFactory::getApplication();$templateparams = $app->getTemplate(true)->params;$class = ' class="first"';?><?php if (count($this->children[$this->category->id]) > 0) : ?>        <ul>        <?php foreach ($this->children[$this->category->id] as $id => $child) : ?>                <?php				if ($this->params->get('show_empty_categories') || $child->numitems || count($child->getChildren())) :					if (!isset($this->children[$this->category->id][$id + 1])) :						$class = ' class="last"';					endif;				?>                <li<?php echo $class; ?>>                        <?php $class = ''; ?>                        <span class="item-title"><a href="<?php echo JRoute::_(ContentHelperRoute::getCategoryRoute($child->id));?>">                                <?php echo $this->escape($child->title); ?></a>                        </span>                       <?php if ($this->params->get('show_subcat_desc') == 1) :?>                        <?php if ($child->description) : ?>                                <div class="category-desc">                                        <?php echo JHtml::_('content.prepare', $child->description, '', 'com_content.category'); ?>                                </div>                        <?php endif; ?>                        <?php endif; ?>                        <?php if ( $this->params->get('show_cat_num_articles', 1)) : ?>                        <dl>                                <dt>                                        <?php echo JText::_('COM_CONTENT_NUM_ITEMS'); ?>                                </dt>                                <dd>                                        <?php echo $child->getNumItems(true); ?>                                </dd>                        </dl>                        <?php endif; ?>                        <?php if (count($child->getChildren()) > 0):							$this->children[$child->id] = $child->getChildren();							$this->category = $child;							$this->maxLevel--;							if ($this->maxLevel != 0) :								echo $this->loadTemplate('children');							endif;							$this->category = $child->getParent();							$this->maxLevel++;						endif; ?>                </li>                <?php endif; ?>        <?php endforeach; ?>        </ul><?php endif; ?>
<?php/** * @package     Joomla.Site * @subpackage  com_users * * @copyright   Copyright (C) 2005 - 2013 Open Source Matters, Inc. All rights reserved. * @license     GNU General Public License version 2 or later; see LICENSE.txt */defined('_JEXEC') or die;/** * Users Route Helper * * @package     Joomla.Site * @subpackage  com_users * @since       1.6 */class UsersHelperRoute{	/**	 * Method to get the menu items for the component.	 *	 * @return  array  	An array of menu items.	 * @since   1.6	 */	public static function &getItems()	{		static $items;		// Get the menu items for this component.		if (!isset($items))		{			// Include the site app in case we are loading this from the admin.			require_once JPATH_SITE.'/includes/application.php';			$app	= JFactory::getApplication();			$menu	= $app->getMenu();			$com	= JComponentHelper::getComponent('com_users');			$items	= $menu->getItems('component_id', $com->id);			// If no items found, set to empty array.			if (!$items)			{				$items = array();			}		}		return $items;	}	/**	 * Method to get a route configuration for the login view.	 *	 * @return  mixed  	Integer menu id on success, null on failure.	 * @since   1.6	 * @static	 */	public static function getLoginRoute()	{		// Get the items.		$items	= self::getItems();		$itemid	= null;		// Search for a suitable menu id.		foreach ($items as $item)		{			if (isset($item->query['view']) && $item->query['view'] === 'login')			{				$itemid = $item->id;				break;			}		}		return $itemid;	}	/**	 * Method to get a route configuration for the profile view.	 *	 * @return  mixed  	Integer menu id on success, null on failure.	 * @since   1.6	 */	public static function getProfileRoute()	{		// Get the items.		$items	= self::getItems();		$itemid	= null;		// Search for a suitable menu id.		//Menu link can only go to users own profile.		foreach ($items as $item)		{			if (isset($item->query['view']) && $item->query['view'] === 'profile')			{				$itemid = $item->id;				break;			}		}		return $itemid;	}	/**	 * Method to get a route configuration for the registration view.	 *	 * @return  mixed  	Integer menu id on success, null on failure.	 * @since   1.6	 */	public static function getRegistrationRoute()	{		// Get the items.		$items	= self::getItems();		$itemid	= null;		// Search for a suitable menu id.		foreach ($items as $item)		{			if (isset($item->query['view']) && $item->query['view'] === 'registration')			{				$itemid = $item->id;				break;			}		}		return $itemid;	}	/**	 * Method to get a route configuration for the remind view.	 *	 * @return  mixed  	Integer menu id on success, null on failure.	 * @since   1.6	 */	public static function getRemindRoute()	{		// Get the items.		$items	= self::getItems();		$itemid	= null;		// Search for a suitable menu id.		foreach ($items as $item)		{			if (isset($item->query['view']) && $item->query['view'] === 'remind')			{				$itemid = $item->id;				break;			}		}		return $itemid;	}	/**	 * Method to get a route configuration for the resend view.	 *	 * @return  mixed  	Integer menu id on success, null on failure.	 * @since   1.6	 */	public static function getResendRoute()	{		// Get the items.		$items	= self::getItems();		$itemid	= null;		// Search for a suitable menu id.		foreach ($items as $item)		{			if (isset($item->query['view']) && $item->query['view'] === 'resend')			{				$itemid = $item->id;				break;			}		}		return $itemid;	}	/**	 * Method to get a route configuration for the reset view.	 *	 * @return  mixed  	Integer menu id on success, null on failure.	 * @since   1.6	 */	public static function getResetRoute()	{		// Get the items.		$items	= self::getItems();		$itemid	= null;		// Search for a suitable menu id.		foreach ($items as $item)		{			if (isset($item->query['view']) && $item->query['view'] === 'reset')			{				$itemid = $item->id;				break;			}		}		return $itemid;	}}
<?php/** * @package    Joomla.Installation * * @copyright  Copyright (C) 2005 - 2013 Open Source Matters, Inc. All rights reserved. * @license    GNU General Public License version 2 or later; see LICENSE.txt */defined('_JEXEC') or die;/* @var InstallationViewDefault $this */?><?php echo JHtml::_('installation.stepbar'); ?><form action="index.php" method="post" id="adminForm" class="form-validate form-horizontal">	<div class="btn-toolbar">		<div class="btn-group pull-right">			<a class="btn" href="#" onclick="return Install.goToPage('database');" rel="prev" title="<?php echo JText::_('JPrevious'); ?>"><i class="icon-arrow-left"></i> <?php echo JText::_('JPrevious'); ?></a>			<a  class="btn btn-primary" href="#" onclick="Install.submitform();" rel="next" title="<?php echo JText::_('JNext'); ?>"><i class="icon-arrow-right icon-white"></i> <?php echo JText::_('JNext'); ?></a>		</div>	</div>	<h3><?php echo JText::_('INSTL_FTP'); ?></h3>	<hr class="hr-condensed" />	<div class="control-group">		<div class="control-label">			<?php echo $this->form->getLabel('ftp_enable'); ?>		</div>		<div class="controls">			<?php echo $this->form->getInput('ftp_enable'); ?>		</div>	</div>	<div class="control-group">		<div class="control-label">			<?php echo $this->form->getLabel('ftp_user'); ?>		</div>		<div class="controls">			<?php echo $this->form->getInput('ftp_user'); ?>			<p class="help-block">				<?php echo JText::_('INSTL_FTP_USER_DESC'); ?>			</p>		</div>	</div>	<div class="control-group">		<div class="control-label">			<?php echo $this->form->getLabel('ftp_pass'); ?>		</div>		<div class="controls">			<?php echo $this->form->getInput('ftp_pass'); ?>			<p class="help-block">				<?php echo JText::_('INSTL_FTP_PASSWORD_DESC'); ?>			</p>		</div>	</div>	<div class="control-group">		<div class="control-label">		</div>		<div class="controls">			<button id="verifybutton" class="btn btn-success" onclick="Install.verifyFtpSettings(this);"><i class="icon-ok icon-white"></i> <?php echo JText::_('INSTL_VERIFY_FTP_SETTINGS'); ?></button>		</div>	</div>	<div class="control-group">		<div class="control-label">			<?php echo $this->form->getLabel('ftp_host'); ?>		</div>		<div class="controls">			<div class="input-append">				<?php echo $this->form->getInput('ftp_host'); ?><button id="findbutton" class="btn" onclick="Install.detectFtpRoot(this);"><i class="icon-folder-open"></i> <?php echo JText::_('INSTL_AUTOFIND_FTP_PATH'); ?></button>			</div>		</div>	</div>	<div class="control-group">		<div class="control-label">			<?php echo $this->form->getLabel('ftp_port'); ?>		</div>		<div class="controls">			<?php echo $this->form->getInput('ftp_port'); ?>		</div>	</div>	<div class="control-group">		<div class="control-label">			<?php echo $this->form->getLabel('ftp_save'); ?>		</div>		<div class="controls">			<?php echo $this->form->getInput('ftp_save'); ?>		</div>	</div>	<input type="hidden" name="task" value="ftp" />	<?php echo JHtml::_('form.token'); ?></form>
<?php/** * @package     Joomla.Administrator * @subpackage  com_languages * * @copyright   Copyright (C) 2005 - 2013 Open Source Matters, Inc. All rights reserved. * @license     GNU General Public License version 2 or later; see LICENSE.txt */defined('_JEXEC') or die;/** * View for language overrides list * * @package     Joomla.Administrator * @subpackage  com_languages * @since       2.5 */class LanguagesViewOverrides extends JViewLegacy{	/**	 * The items to list	 *	 * @var		array	 * @since	2.5	 */	protected $items;	/**	 * The pagination object	 *	 * @var		object	 * @since	2.5	 */	protected $pagination;	/**	 * The model state	 *	 * @var		object	 * @since	2.5	 */	protected $state;	/**	 * Displays the view	 *	 * @param   	string	$tpl	The name of the template file to parse	 *	 * @return  void	 *	 * @since		2.5	 */	public function display($tpl = null)	{		$this->state      = $this->get('State');		$this->items      = $this->get('Overrides');		$this->languages  = $this->get('Languages');		$this->pagination = $this->get('Pagination');		LanguagesHelper::addSubmenu('overrides');		// Check for errors		if (count($errors = $this->get('Errors')))		{			throw new Exception(implode("\n", $errors));		}		$this->addToolbar();		parent::display($tpl);	}	/**	 * Adds the page title and toolbar	 *	 * @return  void	 *	 * @since		2.5	 */	protected function addToolbar()	{		// Get the results for each action		$canDo = LanguagesHelper::getActions();		JToolbarHelper::title(JText::_('COM_LANGUAGES_VIEW_OVERRIDES_TITLE'), 'langmanager');		if ($canDo->get('core.create'))		{			JToolbarHelper::addNew('override.add');		}		if ($canDo->get('core.edit') && $this->pagination->total)		{			JToolbarHelper::editList('override.edit');		}		if ($canDo->get('core.delete') && $this->pagination->total)		{			JToolbarHelper::deleteList('', 'overrides.delete');		}		if ($canDo->get('core.admin'))		{			JToolbarHelper::preferences('com_languages');		}		JToolbarHelper::divider();		JToolbarHelper::help('JHELP_EXTENSIONS_LANGUAGE_MANAGER_OVERRIDES');		JHtmlSidebar::setAction('index.php?option=com_languages&view=overrides');		JHtmlSidebar::addFilter(			// @todo need a label here			'',			'filter_language_client',			JHtml::_('select.options', $this->languages, null, 'text', $this->state->get('filter.language_client')),			true		);		$this->sidebar = JHtmlSidebar::render();	}}
<?php/** * @package     Joomla.Site * @subpackage  Templates.beez3 * * @copyright   Copyright (C) 2005 - 2013 Open Source Matters, Inc. All rights reserved. * @license     GNU General Public License version 2 or later; see LICENSE.txt */defined('_JEXEC') or die;$app = JFactory::getApplication();$templateparams = $app->getTemplate(true)->params;$class = ' class="first"';?><?php if (count($this->children[$this->category->id]) > 0) :?>	<ul>	<?php foreach ($this->children[$this->category->id] as $id => $child) : ?>		<?php		if ($this->params->get('show_empty_categories') || $child->getNumItems(true) || count($child->getChildren())) :			if (!isset($this->children[$this->category->id][$id + 1])) :				$class = ' class="last"';			endif;		?>		<li<?php echo $class; ?>>			<?php $class = ''; ?>				<h3 class="item-title"><a href="<?php echo JRoute::_(ContentHelperRoute::getCategoryRoute($child->id));?>">					<?php echo $this->escape($child->title); ?></a>				</h3>				<?php if ($this->params->get('show_subcat_desc') == 1) :?>				<?php if ($child->description and $this->params->get('show_description') != 0 ) : ?>					<div class="category-desc">						<?php echo JHtml::_('content.prepare', $child->description, '', 'com_content.category'); ?>					</div>				<?php endif; ?>				<?php endif; ?>				<?php if ($child->getNumItems() == true) : ?>				<dl>					<dt>						<?php echo JText::_('COM_CONTENT_NUM_ITEMS'); ?>					</dt>					<dd>						<?php echo $child->getNumItems(true); ?>					</dd>				</dl>				<?php endif; ?>				<?php if (count($child->getChildren()) > 0 ) :					$this->children[$child->id] = $child->getChildren();					$this->category = $child;					$this->maxLevel--;					if ($this->maxLevel != 0) :						echo $this->loadTemplate('children');					endif;					$this->category = $child->getParent();					$this->maxLevel++;				endif; ?>			</li>		<?php endif; ?>	<?php endforeach; ?>	</ul><?php endif; ?>
<?php/** * @package     Joomla.Site * @subpackage  Template.beez5 * * @copyright   Copyright (C) 2005 - 2013 Open Source Matters, Inc. All rights reserved. * @license     GNU General Public License version 2 or later; see LICENSE.txt */defined('_JEXEC') or die;$app = JFactory::getApplication();$templateparams = $app->getTemplate(true)->params;if (!$templateparams->get('html5', 0)){	require JPATH_BASE.'/components/com_content/views/archive/tmpl/default_items.php';	//evtl. ersetzen durch JPATH_COMPONENT.'/views/...'} else {JHtml::addIncludePath(JPATH_COMPONENT . '/helpers');$params = &$this->params;?><ul id="archive-items"><?php foreach ($this->items as $i => $item) : ?>	<li class="row<?php echo $i % 2; ?>">		<h2>		<?php if ($params->get('link_titles')) : ?>			<a href="<?php echo JRoute::_(ContentHelperRoute::getArticleRoute($item->slug)); ?>">				<?php echo $this->escape($item->title); ?></a>		<?php else: ?>				<?php echo $this->escape($item->title); ?>		<?php endif; ?>		</h2><?php if (($params->get('show_author')) or ($params->get('show_parent_category')) or ($params->get('show_category')) or ($params->get('show_create_date')) or ($params->get('show_modify_date')) or ($params->get('show_publish_date'))  or ($params->get('show_hits'))) : ?> <dl class="article-info"> <dt class="article-info-term"><?php echo JText::_('COM_CONTENT_ARTICLE_INFO'); ?></dt><?php endif; ?><?php if ($params->get('show_parent_category')) : ?>		<dd class="parent-category-name">			<?php	$title = $this->escape($item->parent_title);					$url = '<a href="'.JRoute::_(ContentHelperRoute::getCategoryRoute($item->parent_slug)).'">'.$title.'</a>';?>			<?php if ($params->get('link_parent_category') && $item->parent_slug) : ?>				<?php echo JText::sprintf('COM_CONTENT_PARENT', $url); ?>				<?php else : ?>				<?php echo JText::sprintf('COM_CONTENT_PARENT', $title); ?>			<?php endif; ?>		</dd><?php endif; ?><?php if ($params->get('show_category')) : ?>		<dd class="category-name">			<?php	$title = $this->escape($item->category_title);					$url = '<a href="' . JRoute::_(ContentHelperRoute::getCategoryRoute($item->catslug)) . '">' . $title . '</a>'; ?>			<?php if ($params->get('link_category') && $item->catslug) : ?>				<?php echo JText::sprintf('COM_CONTENT_CATEGORY', $url); ?>				<?php else : ?>				<?php echo JText::sprintf('COM_CONTENT_CATEGORY', $title); ?>			<?php endif; ?>		</dd><?php endif; ?><?php if ($params->get('show_create_date')) : ?>		<dd class="create">		<?php echo JText::sprintf('COM_CONTENT_CREATED_DATE_ON', JHtml::_('date', $item->created, JText::_('DATE_FORMAT_LC2'))); ?>		</dd><?php endif; ?><?php if ($params->get('show_modify_date')) : ?>		<dd class="modified">		<?php echo JText::sprintf('COM_CONTENT_LAST_UPDATED', JHtml::_('date', $item->modified, JText::_('DATE_FORMAT_LC2'))); ?>		</dd><?php endif; ?><?php if ($params->get('show_publish_date')) : ?>		<dd class="published">		<?php echo JText::sprintf('COM_CONTENT_PUBLISHED_DATE_ON', JHtml::_('date', $item->publish_up, JText::_('DATE_FORMAT_LC2'))); ?>		</dd><?php endif; ?><?php if ($params->get('show_author') && !empty($item->author )) : ?>	<dd class="createdby">		<?php $author = $item->author; ?>		<?php $author = ($item->created_by_alias ? $item->created_by_alias : $author);?>			<?php if (!empty($item->contactid ) &&  $params->get('link_author') == true):?>				<?php echo JText::sprintf('COM_CONTENT_WRITTEN_BY',					JHtml::_('link', JRoute::_('index.php?option=com_contact&view=contact&id=' . $item->contactid), $author)				); ?>			<?php else :?>				<?php echo JText::sprintf('COM_CONTENT_WRITTEN_BY', $author); ?>			<?php endif; ?>	</dd><?php endif; ?><?php if ($params->get('show_hits')) : ?>		<dd class="hits">		<?php echo JText::sprintf('COM_CONTENT_ARTICLE_HITS', $item->hits); ?>		</dd><?php endif; ?><?php if (($params->get('show_author')) or ($params->get('show_category')) or ($params->get('show_create_date')) or ($params->get('show_modify_date')) or ($params->get('show_publish_date'))  or ($params->get('show_hits'))) :?>	 </dl><?php endif; ?><?php  if ($params->get('show_intro')) :?>		<div class="intro">			<?php echo JHtml::_('string.truncate', $item->introtext, $params->get('introtext_limit')); ?>		</div>		<?php endif; ?>	</li><?php endforeach; ?></ul><div id="pagination">	<span><?php echo $this->pagination->getPagesLinks(); ?></span>	<span><?php echo $this->pagination->getPagesCounter(); ?></span></div><?php } ?>
<?php/** * @package     Joomla.Plugin * @subpackage  Content.pagenavigation * * @copyright   Copyright (C) 2005 - 2013 Open Source Matters, Inc. All rights reserved. * @license     GNU General Public License version 2 or later; see LICENSE.txt */defined('_JEXEC') or die;?><ul class="pager pagenav"><?php if ($row->prev) : ?>	<li class="previous">		<a href="<?php echo $row->prev; ?>" rel="prev"><?php echo JText::_('JGLOBAL_LT') . $pnSpace . JText::_('JPREV'); ?></a>	</li><?php endif; ?><?php if ($row->next) : ?>	<li class="next">		<a href="<?php echo $row->next; ?>" rel="next"><?php echo JText::_('JNEXT') . $pnSpace . JText::_('JGLOBAL_GT'); ?></a>	</li><?php endif; ?></ul>
<?php/** * @package     Joomla.Platform * @subpackage  Google * * @copyright   Copyright (C) 2005 - 2013 Open Source Matters, Inc. All rights reserved * @license     GNU General Public License version 2 or later; see LICENSE */defined('JPATH_PLATFORM') or die;/** * Google+ data class for the Joomla Platform. * * @package     Joomla.Platform * @subpackage  Google * @since       1234 */class JGoogleDataPlusPeople extends JGoogleData{	/**	 * Constructor.	 *	 * @param   JRegistry    $options  Google options object	 * @param   JGoogleAuth  $auth     Google data http client object	 *	 * @since   1234	 */	public function __construct(JRegistry $options = null, JGoogleAuth $auth = null)	{		parent::__construct($options, $auth);		if (isset($this->auth) && !$this->auth->getOption('scope'))		{			$this->auth->setOption('scope', 'https://www.googleapis.com/auth/plus.me');		}	}	/**	 * Get a person's profile.	 *	 * @param   string  $id      The ID of the person to get the profile for. The special value "me" can be used to indicate the authenticated user.	 * @param   string  $fields  Used to specify the fields you want returned.	 *	 * @return  mixed  Data from Google	 *	 * @since   1234	 */	public function getPeople($id, $fields = null)	{		if ($this->isAuthenticated())		{			$url = $this->getOption('api.url') . 'people/' . $id;			// Check if fields is specified.			if ($fields)			{				$url .= '?fields=' . $fields;			}			$jdata = $this->auth->query($url);			return json_decode($jdata->body, true);		}		else		{			return false;		}	}	/**	 * Search all public profiles.	 *	 * @param   string   $query     Specify a query string for full text search of public text in all profiles.	 * @param   string   $fields    Used to specify the fields you want returned.	 * @param   string   $language  Specify the preferred language to search with. https://developers.google.com/+/api/search#available-languages	 * @param   integer  $max       The maximum number of people to include in the response, used for paging.	 * @param   string   $token     The continuation token, used to page through large result sets. To get the next page of results, set this	 * 								parameter to the value of "nextPageToken" from the previous response. This token may be of any length.	 *	 * @return  mixed  Data from Google	 *	 * @since   1234	 */	public function search($query, $fields = null, $language = null, $max = 10, $token = null)	{		if ($this->isAuthenticated())		{			$url = $this->getOption('api.url') . 'people?query=' . urlencode($query);			// Check if fields is specified.			if ($fields)			{				$url .= '&fields=' . $fields;			}			// Check if language is specified.			if ($language)			{				$url .= '&language=' . $language;			}			// Check if max is specified.			if ($max != 10)			{				$url .= '&maxResults=' . $max;			}			// Check of token is specified.			if ($token)			{				$url .= '&pageToken=' . $token;			}			$jdata = $this->auth->query($url);			return json_decode($jdata->body, true);		}		else		{			return false;		}	}	/**	 * List all of the people in the specified collection for a particular activity.	 *	 * @param   string   $activityId  The ID of the activity to get the list of people for.	 * @param   string   $collection  The collection of people to list. Acceptable values are "plusoners" and "resharers".	 * @param   string   $fields      Used to specify the fields you want returned.	 * @param   integer  $max         The maximum number of people to include in the response, used for paging.	 * @param   string   $token       The continuation token, used to page through large result sets. To get the next page of results, set this	 * 								  parameter to the value of "nextPageToken" from the previous response. This token may be of any length.	 *	 * @return  mixed  Data from Google	 *	 * @since   1234	 */	public function listByActivity($activityId, $collection, $fields = null, $max = 10, $token = null)	{		if ($this->isAuthenticated())		{			$url = $this->getOption('api.url') . 'activities/' . $activityId . '/people/' . $collection;			// Check if fields is specified.			if ($fields)			{				$url .= '?fields=' . $fields;			}			// Check if max is specified.			if ($max != 10)			{				$url .= (strpos($url, '?') === false) ? '?maxResults=' : '&maxResults=';				$url .= $max;			}			// Check of token is specified.			if ($token)			{				$url .= (strpos($url, '?') === false) ? '?pageToken=' : '&pageToken=';				$url .= $token;			}			$jdata = $this->auth->query($url);			return json_decode($jdata->body, true);		}		else		{			return false;		}	}}
<?php/** * @package     Joomla.Platform * @subpackage  Form * * @copyright   Copyright (C) 2005 - 2013 Open Source Matters, Inc. All rights reserved. * @license     GNU General Public License version 2 or later; see LICENSE */defined('JPATH_PLATFORM') or die;/** * Form Rule class for the Joomla Platform. * * @package     Joomla.Platform * @subpackage  Form * @since       11.1 */class JFormRuleEquals extends JFormRule{	/**	 * Method to test if two values are equal. To use this rule, the form	 * XML needs a validate attribute of equals and a field attribute	 * that is equal to the field to test against.	 *	 * @param   SimpleXMLElement  $element  The SimpleXMLElement object representing the <field /> tag for the form field object.	 * @param   mixed             $value    The form field value to validate.	 * @param   string            $group    The field name group control value. This acts as as an array container for the field.	 *                                      For example if the field has name="foo" and the group value is set to "bar" then the	 *                                      full field name would end up being "bar[foo]".	 * @param   JRegistry         $input    An optional JRegistry object with the entire data set to validate against the entire form.	 * @param   JForm             $form     The form object for which the field is being tested.	 *	 * @return  boolean  True if the value is valid, false otherwise.	 *	 * @since   11.1	 * @throws  InvalidArgumentException	 * @throws  UnexpectedValueException	 */	public function test(SimpleXMLElement $element, $value, $group = null, JRegistry $input = null, JForm $form = null)	{		$field = (string) $element['field'];		// Check that a validation field is set.		if (!$field)		{			throw new UnexpectedValueException(sprintf('$field empty in %s::test', get_class($this)));		}		if (is_null($form))		{			throw new InvalidArgumentException(sprintf('The value for $form must not be null in %s', get_class($this)));		}		if (is_null($input))		{			throw new InvalidArgumentException(sprintf('The value for $input must not be null in %s', get_class($this)));		}		// Test the two values against each other.		if ($value == $input->get($field))		{			return true;		}		return false;	}}
<?php/** * @package     Joomla.Platform * @subpackage  Database * * @copyright   Copyright (C) 2005 - 2013 Open Source Matters, Inc. All rights reserved. * @license     GNU General Public License version 2 or later; see LICENSE */defined('JPATH_PLATFORM') or die;/** * Joomla Database Query Limitable Interface. * Adds bind/unbind methods as well as a getBounded() method * to retrieve the stored bounded variables on demand prior to * query execution. * * @package     Joomla.Platform * @subpackage  Database * @since       12.1 */interface JDatabaseQueryLimitable{	/**	 * Method to modify a query already in string format with the needed	 * additions to make the query limited to a particular number of	 * results, or start at a particular offset. This method is used	 * automatically by the __toString() method if it detects that the	 * query implements the JDatabaseQueryLimitable interface.	 *	 * @param   string   $query   The query in string format	 * @param   integer  $limit   The limit for the result set	 * @param   integer  $offset  The offset for the result set	 *	 * @return  string	 *	 * @since   12.1	 */	public function processLimit($query, $limit, $offset = 0);	/**	 * Sets the offset and limit for the result set, if the database driver supports it.	 *	 * Usage:	 * $query->setLimit(100, 0); (retrieve 100 rows, starting at first record)	 * $query->setLimit(50, 50); (retrieve 50 rows, starting at 50th record)	 *	 * @param   integer  $limit   The limit for the result set	 * @param   integer  $offset  The offset for the result set	 *	 * @return  JDatabaseQuery  Returns this object to allow chaining.	 *	 * @since   12.1	 */	public function setLimit($limit = 0, $offset = 0);}
<?php/** * @package     Joomla.Libraries * @subpackage  Menu * * @copyright   Copyright (C) 2005 - 2013 Open Source Matters, Inc. All rights reserved. * @license     GNU General Public License version 2 or later; see LICENSE.txt */defined('_JEXEC') or die;/** * JMenu class. * * @package     Joomla.Libraries * @subpackage  Menu * @since       1.5 */class JMenuAdministrator extends JMenu{}
<?php/** * @package     Joomla.Platform * @subpackage  Google * * @copyright   Copyright (C) 2005 - 2013 Open Source Matters, Inc. All rights reserved * @license     GNU General Public License version 2 or later; see LICENSE */defined('JPATH_PLATFORM') or die;/** * Google Picasa data class for the Joomla Platform. * * @package     Joomla.Platform * @subpackage  Google * @since       12.3 */class JGoogleDataPicasaPhoto extends JGoogleData{	/**	 * @var    SimpleXMLElement  The photo's XML	 * @since  12.3	 */	protected $xml;	/**	 * Constructor.	 *	 * @param   SimpleXMLElement  $xml      XML from Google	 * @param   JRegistry         $options  Google options object	 * @param   JGoogleAuth       $auth     Google data http client object	 *	 * @since   12.3	 */	public function __construct(SimpleXMLElement $xml, JRegistry $options = null, JGoogleAuth $auth = null)	{		$this->xml = $xml;		parent::__construct($options, $auth);		if (isset($this->auth) && !$this->auth->getOption('scope'))		{			$this->auth->setOption('scope', 'https://picasaweb.google.com/data/');		}	}	/**	 * Method to delete a Picasa photo	 *	 * @param   mixed  $match  Check for most up to date photo	 *	 * @return  boolean  Success or failure.	 *	 * @since   12.3	 * @throws UnexpectedValueException	 */	public function delete($match = '*')	{		if ($this->isAuthenticated())		{			$url = $this->getLink();			if ($match === true)			{				$match = $this->xml->xpath('./@gd:etag');				$match = $match[0];			}			try			{				$jdata = $this->query($url, null, array('GData-Version' => 2, 'If-Match' => $match), 'delete');			}			catch (Exception $e)			{				if (strpos($e->getMessage(), 'Error code 412 received requesting data: Mismatch: etags') === 0)				{					throw new RuntimeException("Etag match failed: `$match`.");				}				throw $e;			}			if ($jdata->body != '')			{				throw new UnexpectedValueException("Unexpected data received from Google: `{$jdata->body}`.");			}			$this->xml = null;			return true;		}		else		{			return false;		}	}	/**	 * Method to get the photo link	 *	 * @param   string  $type  Type of link to return	 *	 * @return  string  Link or false on failure	 *	 * @since   12.3	 */	public function getLink($type = 'edit')	{		$links = $this->xml->link;		foreach ($links as $link)		{			if ($link->attributes()->rel == $type)			{				return (string) $link->attributes()->href;			}		}		return false;	}	/**	 * Method to get the photo's URL	 *	 * @return  string  Link	 *	 * @since   12.3	 */	public function getURL()	{		return (string) $this->xml->children()->content->attributes()->src;	}	/**	 * Method to get the photo's thumbnails	 *	 * @return  array  An array of thumbnails	 *	 * @since   12.3	 */	public function getThumbnails()	{		$thumbs = array();		foreach ($this->xml->children('media', true)->group->thumbnail as $item)		{			$url = (string) $item->attributes()->url;			$width = (int) $item->attributes()->width;			$height = (int) $item->attributes()->height;			$thumbs[$width] = array('url' => $url, 'w' => $width, 'h' => $height);		}		return $thumbs;	}	/**	 * Method to get the title of the photo	 *	 * @return  string  Photo title	 *	 * @since   12.3	 */	public function getTitle()	{		return (string) $this->xml->children()->title;	}	/**	 * Method to get the summary of the photo	 *	 * @return  string  Photo description	 *	 * @since   12.3	 */	public function getSummary()	{		return (string) $this->xml->children()->summary;	}	/**	 * Method to get the access level of the photo	 *	 * @return  string  Photo access level	 *	 * @since   12.3	 */	public function getAccess()	{		return (string) $this->xml->children('gphoto', true)->access;	}	/**	 * Method to get the time of the photo	 *	 * @return  double  Photo time	 *	 * @since   12.3	 */	public function getTime()	{		return (double) $this->xml->children('gphoto', true)->timestamp / 1000;	}	/**	 * Method to get the size of the photo	 *	 * @return  int  Photo size	 *	 * @since   12.3	 */	public function getSize()	{		return (int) $this->xml->children('gphoto', true)->size;	}	/**	 * Method to get the height of the photo	 *	 * @return  int  Photo height	 *	 * @since   12.3	 */	public function getHeight()	{		return (int) $this->xml->children('gphoto', true)->height;	}	/**	 * Method to get the width of the photo	 *	 * @return  int  Photo width	 *	 * @since   12.3	 */	public function getWidth()	{		return (int) $this->xml->children('gphoto', true)->width;	}	/**	 * Method to set the title of the photo	 *	 * @param   string  $title  New photo title	 *	 * @return  JGoogleDataPicasaPhoto  The object for method chaining	 *	 * @since   12.3	 */	public function setTitle($title)	{		$this->xml->children()->title = $title;		return $this;	}	/**	 * Method to set the summary of the photo	 *	 * @param   string  $summary  New photo description	 *	 * @return  JGoogleDataPicasaPhoto  The object for method chaining	 *	 * @since   12.3	 */	public function setSummary($summary)	{		$this->xml->children()->summary = $summary;		return $this;	}	/**	 * Method to set the access level of the photo	 *	 * @param   string  $access  New photo access level	 *	 * @return  JGoogleDataPicasaPhoto  The object for method chaining	 *	 * @since   12.3	 */	public function setAccess($access)	{		$this->xml->children('gphoto', true)->access = $access;		return $this;	}	/**	 * Method to set the time of the photo	 *	 * @param   int  $time  New photo time	 *	 * @return  JGoogleDataPicasaPhoto  The object for method chaining	 *	 * @since   12.3	 */	public function setTime($time)	{		$this->xml->children('gphoto', true)->timestamp = $time * 1000;		return $this;	}	/**	 * Method to modify a Picasa Photo	 *	 * @param   string  $match  Optional eTag matching parameter	 *	 * @return  mixed  Data from Google.	 *	 * @since   12.3	 */	public function save($match = '*')	{		if ($this->isAuthenticated())		{			$url = $this->getLink();			if ($match === true)			{				$match = $this->xml->xpath('./@gd:etag');				$match = $match[0];			}			try			{				$headers = array('GData-Version' => 2, 'Content-type' => 'application/atom+xml', 'If-Match' => $match);				$jdata = $this->query($url, $this->xml->asXML(), $headers, 'put');			}			catch (Exception $e)			{				if (strpos($e->getMessage(), 'Error code 412 received requesting data: Mismatch: etags') === 0)				{					throw new RuntimeException("Etag match failed: `$match`.");				}				throw $e;			}			$this->xml = $this->safeXML($jdata->body);			return $this;		}		else		{			return false;		}	}	/**	 * Refresh photo data	 *	 * @return  mixed  Data from Google	 *	 * @since   12.3	 */	public function refresh()	{		if ($this->isAuthenticated())		{			$url = $this->getLink();			$jdata = $this->query($url, null, array('GData-Version' => 2));			$this->xml = $this->safeXML($jdata->body);			return $this;		}		else		{			return false;		}	}}
<?php/** * @package     Joomla.Platform * @subpackage  Database * * @copyright   Copyright (C) 2005 - 2013 Open Source Matters, Inc. All rights reserved. * @license     GNU General Public License version 2 or later; see LICENSE */defined('JPATH_PLATFORM') or die;/** * MySQL database iterator. * * @package     Joomla.Platform * @subpackage  Database * @see         http://dev.mysql.com/doc/ * @since       12.1 */class JDatabaseIteratorMysql extends JDatabaseIterator{	/**	 * Get the number of rows in the result set for the executed SQL given by the cursor.	 *	 * @return  integer  The number of rows in the result set.	 *	 * @since   12.1	 * @see     Countable::count()	 */	public function count()	{		return mysql_num_rows($this->cursor);	}	/**	 * Method to fetch a row from the result set cursor as an object.	 *	 * @return  mixed   Either the next row from the result set or false if there are no more rows.	 *	 * @since   12.1	 */	protected function fetchObject()	{		return mysql_fetch_object($this->cursor, $this->class);	}	/**	 * Method to free up the memory used for the result set.	 *	 * @return  void	 *	 * @since   12.1	 */	protected function freeResult()	{		mysql_free_result($this->cursor);	}}
<?php/*** @version $Id$* @package utf8* @subpackage strings*///---------------------------------------------------------------/*** UTF-8 aware alternative to strcspn* Find length of initial segment not matching mask* Note: requires utf8_strlen and utf8_substr (if start, length are used)* @param string* @return int* @see http://www.php.net/strcspn* @see utf8_strlen* @package utf8* @subpackage strings*/function utf8_strcspn($str, $mask, $start = NULL, $length = NULL) {    if ( empty($mask) || strlen($mask) == 0 ) {        return NULL;    }    $mask = preg_replace('!([\\\\\\-\\]\\[/^])!','\\\${1}',$mask);    if ( $start !== NULL || $length !== NULL ) {        $str = utf8_substr($str, $start, $length);    }    preg_match('/^[^'.$mask.']+/u',$str, $matches);    if ( isset($matches[0]) ) {        return utf8_strlen($matches[0]);    }    return 0;}
<?php/** * @package     Joomla.Site * @subpackage  com_weblinks * * @copyright   Copyright (C) 2005 - 2013 Open Source Matters, Inc. All rights reserved. * @license     GNU General Public License version 2 or later; see LICENSE.txt */defined('_JEXEC') or die;JTable::addIncludePath(JPATH_COMPONENT_ADMINISTRATOR . '/tables');/** * Weblinks Component Model for a Weblink record * * @package     Joomla.Site * @subpackage  com_weblinks * @since       1.5 */class WeblinksModelWeblink extends JModelItem{	/**	 * Model context string.	 *	 * @access	protected	 * @var		string	 */	protected $_context = 'com_weblinks.weblink';	/**	 * Method to auto-populate the model state.	 *	 * Note. Calling getState in this method will result in recursion.	 *	 * @since   1.6	 */	protected function populateState()	{		$app = JFactory::getApplication();		$params	= $app->getParams();		// Load the object state.		$id	= $app->input->getInt('id');		$this->setState('weblink.id', $id);		// Load the parameters.		$this->setState('params', $params);	}	/**	 * Method to get an object.	 *	 * @param   integer	The id of the object to get.	 *	 * @return  mixed  Object on success, false on failure.	 */	public function getItem($id = null)	{		if ($this->_item === null)		{			$this->_item = false;			if (empty($id))			{				$id = $this->getState('weblink.id');			}			// Get a level row instance.			$table = JTable::getInstance('Weblink', 'WeblinksTable');			// Attempt to load the row.			if ($table->load($id))			{				// Check published state.				if ($published = $this->getState('filter.published'))				{					if ($table->state != $published)					{						return $this->_item;					}				}				// Convert the JTable to a clean JObject.				$properties = $table->getProperties(1);				$this->_item = JArrayHelper::toObject($properties, 'JObject');			}			elseif ($error = $table->getError())			{				$this->setError($error);			}		}		return $this->_item;	}	/**	 * Returns a reference to the a Table object, always creating it.	 *	 * @param	type	The table type to instantiate	 * @param	string	A prefix for the table class name. Optional.	 * @param	array	Configuration array for model. Optional.	 * @return	JTable	A database object	 * @since	1.6	 */	public function getTable($type = 'Weblink', $prefix = 'WeblinksTable', $config = array())	{		return JTable::getInstance($type, $prefix, $config);	}	/**	 * Method to increment the hit counter for the weblink	 *	 * @param   integer  $id  Optional ID of the weblink.	 *	 * @return  boolean  True on success	 */	public function hit($id = null)	{		if (empty($id))		{			$id = $this->getState('weblink.id');		}		$weblink = $this->getTable('Weblink', 'WeblinksTable');		return $weblink->hit($id);	}}
<?php/** * @package     Joomla.Administrator * @subpackage  com_modules * * @copyright   Copyright (C) 2005 - 2013 Open Source Matters, Inc. All rights reserved. * @license     GNU General Public License version 2 or later; see LICENSE.txt */defined('_JEXEC') or die;?><div class="btn-toolbar">	<div class="btn-group">		<button type="button" class="btn btn-primary" onclick="Joomla.submitbutton('module.save');">		<?php echo JText::_('JSAVE');?></button>	</div>	<div class="btn-group">		<button type="button" class="btn" onclick="window.parent.SqueezeBox.close();">		<?php echo JText::_('JCANCEL');?></button>	</div>	<div class="clearfix"></div></div><?php$this->setLayout('edit');echo $this->loadTemplate();
<?php/** * @package     Joomla.Administrator * @subpackage  com_languages * * @copyright   Copyright (C) 2005 - 2013 Open Source Matters, Inc. All rights reserved. * @license     GNU General Public License version 2 or later; see LICENSE.txt */defined('_JEXEC') or die;/** * HTML View class for the Languages component * * @package     Joomla.Administrator * @subpackage  com_languages * @since       1.5 */class LanguagesViewLanguage extends JViewLegacy{	public $item;	public $form;	public $state;	/**	 * Display the view	 */	public function display($tpl = null)	{		$this->item = $this->get('Item');		$this->form = $this->get('Form');		$this->state = $this->get('State');		// Check for errors.		if (count($errors = $this->get('Errors')))		{			JError::raiseError(500, implode("\n", $errors));			return false;		}		$this->addToolbar();		parent::display($tpl);	}	/**	 * Add the page title and toolbar.	 *	 * @since  1.6	 */	protected function addToolbar()	{		require_once JPATH_COMPONENT . '/helpers/languages.php';		JFactory::getApplication()->input->set('hidemainmenu', 1);		$isNew = empty($this->item->lang_id);		$canDo = LanguagesHelper::getActions();		JToolbarHelper::title(JText::_($isNew ? 'COM_LANGUAGES_VIEW_LANGUAGE_EDIT_NEW_TITLE' : 'COM_LANGUAGES_VIEW_LANGUAGE_EDIT_EDIT_TITLE'), 'langmanager.png');		// If a new item, can save.		if ($isNew && $canDo->get('core.create'))		{			JToolbarHelper::save('language.save');		}		//If an existing item, allow to Apply and Save.		if (!$isNew && $canDo->get('core.edit'))		{			JToolbarHelper::apply('language.apply');			JToolbarHelper::save('language.save');		}		// If an existing item, can save to a copy only if we have create rights.		if ($canDo->get('core.create'))		{			JToolbarHelper::save2new('language.save2new');		}		if ($isNew)		{			JToolbarHelper::cancel('language.cancel');		}		else		{			JToolbarHelper::cancel('language.cancel', 'JTOOLBAR_CLOSE');		}		JToolbarHelper::divider();		JToolbarHelper::help('JHELP_EXTENSIONS_LANGUAGE_MANAGER_EDIT');		$this->sidebar = JHtmlSidebar::render();	}}
<?php/** * @package     Joomla.Site * @subpackage  mod_banners * * @copyright   Copyright (C) 2005 - 2013 Open Source Matters, Inc. All rights reserved. * @license     GNU General Public License version 2 or later; see LICENSE.txt */defined('_JEXEC') or die;// Include the syndicate functions only oncerequire_once __DIR__ . '/helper.php';$headerText	= trim($params->get('header_text'));$footerText	= trim($params->get('footer_text'));require_once JPATH_ADMINISTRATOR . '/components/com_banners/helpers/banners.php';BannersHelper::updateReset();$list = &ModBannersHelper::getList($params);$moduleclass_sfx = htmlspecialchars($params->get('moduleclass_sfx'));require JModuleHelper::getLayoutPath('mod_banners', $params->get('layout', 'default'));
<?php/** * @package     Joomla.Site * @subpackage  mod_tags_similar * * @copyright   Copyright (C) 2005 - 2013 Open Source Matters, Inc. All rights reserved. * @license     GNU General Public License version 2 or later; see LICENSE.txt */defined('_JEXEC') or die;// Include the syndicate functions only oncerequire_once __DIR__ . '/helper.php';$cacheparams = new stdClass;$cacheparams->cachemode = 'safeuri';$cacheparams->class = 'ModTagssimilarHelper';$cacheparams->method = 'getList';$cacheparams->methodparams = $params;$cacheparams->modeparams = array('id' => 'array', 'Itemid' => 'int');$list = JModuleHelper::moduleCache($module, $params, $cacheparams);if (!count($list)){	return;}$moduleclass_sfx = htmlspecialchars($params->get('moduleclass_sfx'));require JModuleHelper::getLayoutPath('mod_tags_similar', $params->get('layout', 'default'));
<?php/** * @package     Joomla.Site * @subpackage  com_mailto * * @copyright   Copyright (C) 2005 - 2013 Open Source Matters, Inc. All rights reserved. * @license     GNU General Public License version 2 or later; see LICENSE.txt */defined('_JEXEC') or die;/** * @package     Joomla.Site * @subpackage  com_mailto */abstract class MailtoHelper{	/**	 * Adds a URL to the mailto system and returns the hash	 *	 * @param string url	 * @return URL hash	 */	public static function addLink($url)	{		$hash = sha1($url);		self::cleanHashes();		$session = JFactory::getSession();		$mailto_links = $session->get('com_mailto.links', array());		if (!isset($mailto_links[$hash]))		{			$mailto_links[$hash] = new stdClass;		}		$mailto_links[$hash]->link = $url;		$mailto_links[$hash]->expiry = time();		$session->set('com_mailto.links', $mailto_links);		return $hash;	}	/**	 * Checks if a URL is a Flash file	 *	 * @param string	 * @return URL	 */	public static function validateHash($hash)	{		$retval = false;		$session = JFactory::getSession();		self::cleanHashes();		$mailto_links = $session->get('com_mailto.links', array());		if (isset($mailto_links[$hash]))		{			$retval = $mailto_links[$hash]->link;		}		return $retval;	}	/**	 * Cleans out old hashes	 *	 * @since 1.6.1	 */	public static function cleanHashes($lifetime = 1440)	{		// flag for if we've cleaned on this cycle		static $cleaned = false;		if (!$cleaned)		{			$past = time() - $lifetime;			$session = JFactory::getSession();			$mailto_links = $session->get('com_mailto.links', array());			foreach ($mailto_links as $index => $link)			{				if ($link->expiry < $past)				{					unset($mailto_links[$index]);				}			}			$session->set('com_mailto.links', $mailto_links);			$cleaned = true;		}	}}
<?php/** * @package     Joomla.Site * @subpackage  com_newsfeeds * * @copyright   Copyright (C) 2005 - 2013 Open Source Matters, Inc. All rights reserved. * @license     GNU General Public License version 2 or later; see LICENSE.txt */defined('_JEXEC') or die;/** * Newsfeeds Component Controller * * @package     Joomla.Site * @subpackage  com_newsfeeds * @since       1.5 */class NewsfeedsController extends JControllerLegacy{	/**	 * Method to show a newsfeeds view	 *	 * @param   boolean			If true, the view output will be cached	 * @param   array  An array of safe url parameters and their variable types, for valid values see {@link JFilterInput::clean()}.	 *	 * @return  JController		This object to support chaining.	 * @since   1.5	 */	public function display($cachable = false, $urlparams = false)	{		$cachable = true;		// Set the default view name and format from the Request.		$vName = $this->input->get('view', 'categories');		$this->input->set('view', $vName);		$user = JFactory::getUser();		if ($user->get('id') || ($this->input->getMethod() == 'POST' && $vName = 'category' ))		{			$cachable = false;		}		$safeurlparams = array('id' => 'INT', 'limit' => 'UINT', 'limitstart' => 'UINT', 'filter_order' => 'CMD', 'filter_order_Dir' => 'CMD', 'lang' => 'CMD');		parent::display($cachable, $safeurlparams);	}}
<?php/** * Generic_Sniffs_PHP_LowerCaseConstantSniff. * * PHP version 5 * * @category  PHP * @package   PHP_CodeSniffer * @author    Greg Sherwood <gsherwood@squiz.net> * @author    Marc McIntyre <mmcintyre@squiz.net> * @copyright 2006 Squiz Pty Ltd (ABN 77 084 670 600) * @license   http://matrix.squiz.net/developer/tools/php_cs/licence BSD Licence * @version   CVS: $Id: LowerCaseConstantSniff.php 301632 2010-07-28 01:57:56Z squiz $ * @link      http://pear.php.net/package/PHP_CodeSniffer *//** * Generic_Sniffs_PHP_LowerCaseConstantSniff. * * Checks that all uses of true, false and null are lowerrcase. * * @category  PHP * @package   PHP_CodeSniffer * @author    Greg Sherwood <gsherwood@squiz.net> * @author    Marc McIntyre <mmcintyre@squiz.net> * @copyright 2006 Squiz Pty Ltd (ABN 77 084 670 600) * @license   http://matrix.squiz.net/developer/tools/php_cs/licence BSD Licence * @version   Release: 1.3.0RC2 * @link      http://pear.php.net/package/PHP_CodeSniffer */class Joomla_Sniffs_PHP_LowerCaseConstantSniff implements PHP_CodeSniffer_Sniff{    /**     * A list of tokenizers this sniff supports.     *     * @var array     */    public $supportedTokenizers = array(                                   'PHP',                                   'JS',                                  );    /**     * Returns an array of tokens this test wants to listen for.     *     * @return array     */    public function register()    {        return array(                T_TRUE,                T_FALSE,                T_NULL,               );    }//end register()    /**     * Processes this sniff, when one of its tokens is encountered.     *     * @param PHP_CodeSniffer_File $phpcsFile The file being scanned.     * @param int                  $stackPtr  The position of the current token in the     *                                        stack passed in $tokens.     *     * @return void     */    public function process(PHP_CodeSniffer_File $phpcsFile, $stackPtr)    {        $tokens = $phpcsFile->getTokens();        $keyword = $tokens[$stackPtr]['content'];        // AJE Added check for class property names, eg $obj->Null.        $before = $tokens[$stackPtr-1]['type'];        if (strtolower($keyword) !== $keyword && $before != 'T_OBJECT_OPERATOR') {            $error = 'TRUE, FALSE and NULL must be lowercase; expected "%s" but found "%s"';            $data  = array(                      strtolower($keyword),                      $keyword,                     );            $phpcsFile->addError($error, $stackPtr, 'Found', $data);        }    }//end process()}//end class?>
<?php/** * @package     Joomla.Platform * @subpackage  Form * * @copyright   Copyright (C) 2005 - 2013 Open Source Matters, Inc. All rights reserved. * @license     GNU General Public License version 2 or later; see LICENSE */defined('JPATH_PLATFORM') or die;/** * Form Rule class for the Joomla Platform. * * @package     Joomla.Platform * @subpackage  Form * @since       11.1 */class JFormRuleNotequals extends JFormRule{	/**	 * Method to test if two values are not equal. To use this rule, the form	 * XML needs a validate attribute of equals and a field attribute	 * that is equal to the field to test against.	 *	 * @param   SimpleXMLElement  $element  The SimpleXMLElement object representing the <field /> tag for the form field object.	 * @param   mixed             $value    The form field value to validate.	 * @param   string            $group    The field name group control value. This acts as as an array container for the field.	 *                                      For example if the field has name="foo" and the group value is set to "bar" then the	 *                                      full field name would end up being "bar[foo]".	 * @param   JRegistry         $input    An optional JRegistry object with the entire data set to validate against the entire form.	 * @param   JForm             $form     The form object for which the field is being tested.	 *	 * @return  boolean  True if the value is valid, false otherwise.	 *	 * @since   11.1	 * @throws  InvalidArgumentException	 * @throws  UnexpectedValueException	 */	public function test(SimpleXMLElement $element, $value, $group = null, JRegistry $input = null, JForm $form = null)	{		$field = (string) $element['field'];		// Check that a validation field is set.		if (!$field)		{			throw new UnexpectedValueException(sprintf('$field empty in %s::test', get_class($this)));		}		if (is_null($form))		{			throw new InvalidArgumentException(sprintf('The value for $form must not be null in %s', get_class($this)));		}		if (is_null($input))		{			throw new InvalidArgumentException(sprintf('The value for $input must not be null in %s', get_class($this)));		}		// Test the two values against each other.		if ($value != $input->get($field))		{			return true;		}		return false;	}}
<?php/** * @package     Joomla.Administrator * @subpackage  com_cache * * @copyright   Copyright (C) 2005 - 2013 Open Source Matters, Inc. All rights reserved. * @license     GNU General Public License version 2 or later; see LICENSE.txt */defined('_JEXEC') or die;?><form action="<?php echo JRoute::_('index.php?option=com_cache'); ?>" method="post" name="adminForm" id="adminForm"><?php if (!empty( $this->sidebar)) : ?>	<div id="j-sidebar-container" class="span2">		<?php echo $this->sidebar; ?>	</div>	<div id="j-main-container" class="span10"><?php else : ?>	<div id="j-main-container"><?php endif;?><table class="adminlist">	<thead>		<tr>			<th>				<?php echo JText::_('COM_CACHE_PURGE_EXPIRED_ITEMS'); ?>			</th>		</tr>	</thead>	<tbody>		<tr>			<td>			<p class="mod-purge-instruct"><?php echo JText::_('COM_CACHE_PURGE_INSTRUCTIONS'); ?></p>			<p class="warning"><?php echo JText::_('COM_CACHE_RESOURCE_INTENSIVE_WARNING'); ?></p>			</td>		</tr>	</tbody></table><div>	<input type="hidden" name="task" value="" />	<?php echo JHtml::_('form.token'); ?></div></div></form>
<?php/** * @package     Joomla.Libraries * @subpackage  Installer * * @copyright   Copyright (C) 2005 - 2013 Open Source Matters, Inc. All rights reserved. * @license     GNU General Public License version 2 or later; see LICENSE */defined('JPATH_PLATFORM') or die;/** * Joomla! Library Manifest File * * @package     Joomla.Libraries * @subpackage  Installer * @since       3.1 */class JInstallerManifestLibrary extends JInstallerManifest{	/**	 * File system name of the library	 *	 * @var    string	 * @since  3.1	 */	public $libraryname = '';	/**	 * Creation Date of the library	 *	 * @var    string	 * @since  3.1	 */	public $creationDate = '';	/**	 * Copyright notice for the library	 *	 * @var    string	 * @since  3.1	 */	public $copyright = '';	/**	 * License for the library	 *	 * @var    string	 * @since  3.1	 */	public $license = '';	/**	 * Author for the library	 *	 * @var    string	 * @since  3.1	 */	public $author = '';	/**	 * Author email for the library	 *	 * @var    string	 * @since  3.1	 */	public $authoremail = '';	/**	 * Author URL for the library	 *	 * @var    string	 * @since  3.1	 */	public $authorurl = '';	/**	 * Apply manifest data from a SimpleXMLElement to the object.	 *	 * @param   SimpleXMLElement  $xml  Data to load	 *	 * @return  void	 *	 * @since   3.1	 */	protected function loadManifestFromData(SimpleXMLElement $xml)	{		$this->name         = (string) $xml->name;		$this->libraryname  = (string) $xml->libraryname;		$this->version      = (string) $xml->version;		$this->description  = (string) $xml->description;		$this->creationdate = (string) $xml->creationDate;		$this->author       = (string) $xml->author;		$this->authoremail  = (string) $xml->authorEmail;		$this->authorurl    = (string) $xml->authorUrl;		$this->packager     = (string) $xml->packager;		$this->packagerurl  = (string) $xml->packagerurl;		$this->update       = (string) $xml->update;		if (isset($xml->files) && isset($xml->files->file) && count($xml->files->file))		{			foreach ($xml->files->file as $file)			{				$this->filelist[] = (string) $file;			}		}	}}
<?php/** * @package     Joomla.Platform * @subpackage  Registry * * @copyright   Copyright (C) 2005 - 2013 Open Source Matters, Inc. All rights reserved. * @license     GNU General Public License version 2 or later; see LICENSE */defined('JPATH_PLATFORM') or die;/** * PHP class format handler for JRegistry * * @package     Joomla.Platform * @subpackage  Registry * @since       11.1 */class JRegistryFormatPHP extends JRegistryFormat{	/**	 * Converts an object into a php class string.	 * - NOTE: Only one depth level is supported.	 *	 * @param   object  $object  Data Source Object	 * @param   array   $params  Parameters used by the formatter	 *	 * @return  string  Config class formatted string	 *	 * @since   11.1	 */	public function objectToString($object, $params = array())	{		// Build the object variables string		$vars = '';		foreach (get_object_vars($object) as $k => $v)		{			if (is_scalar($v))			{				$vars .= "\tpublic $" . $k . " = '" . addcslashes($v, '\\\'') . "';\n";			}			elseif (is_array($v) || is_object($v))			{				$vars .= "\tpublic $" . $k . " = " . $this->getArrayString((array) $v) . ";\n";			}		}		$str = "<?php\nclass " . $params['class'] . " {\n";		$str .= $vars;		$str .= "}";		// Use the closing tag if it not set to false in parameters.		if (!isset($params['closingtag']) || $params['closingtag'] !== false)		{			$str .= "\n?>";		}		return $str;	}	/**	 * Parse a PHP class formatted string and convert it into an object.	 *	 * @param   string  $data     PHP Class formatted string to convert.	 * @param   array   $options  Options used by the formatter.	 *	 * @return  object   Data object.	 *	 * @since   11.1	 */	public function stringToObject($data, array $options = array())	{		return true;	}	/**	 * Method to get an array as an exported string.	 *	 * @param   array  $a  The array to get as a string.	 *	 * @return  array	 *	 * @since   11.1	 */	protected function getArrayString($a)	{		$s = 'array(';		$i = 0;		foreach ($a as $k => $v)		{			$s .= ($i) ? ', ' : '';			$s .= '"' . $k . '" => ';			if (is_array($v) || is_object($v))			{				$s .= $this->getArrayString((array) $v);			}			else			{				$s .= '"' . addslashes($v) . '"';			}			$i++;		}		$s .= ')';		return $s;	}}
<?php/** * @package     Joomla.Administrator * @subpackage  com_newsfeeds * * @copyright   Copyright (C) 2005 - 2013 Open Source Matters, Inc. All rights reserved. * @license     GNU General Public License version 2 or later; see LICENSE.txt */defined('_JEXEC') or die;$fields = $this->form->getFieldset('item_associations');?><div class="tab-pane" id="associations">	<fieldset>		<?php foreach ($fields as $field) : ?>		<div class="control-group">			<div class="control-label">				<?php echo $field->label ?>			</div>			<div class="controls">				<?php echo $field->input; ?>			</div>		</div>		<?php endforeach; ?>	</fieldset></div>
<?php/** * @package     Joomla.Administrator * @subpackage  com_admin * * @copyright   Copyright (C) 2005 - 2013 Open Source Matters, Inc. All rights reserved. * @license     GNU General Public License version 2 or later; see LICENSE.txt */defined('_JEXEC') or die;?><fieldset class="adminform">	<legend><?php echo JText::_('COM_ADMIN_RELEVANT_PHP_SETTINGS'); ?></legend>	<table class="table table-striped">		<thead>			<tr>				<th width="250">					<?php echo JText::_('COM_ADMIN_SETTING'); ?>				</th>				<th>					<?php echo JText::_('COM_ADMIN_VALUE'); ?>				</th>			</tr>		</thead>		<tfoot>			<tr>				<td colspan="2">&#160;				</td>			</tr>		</tfoot>		<tbody>			<tr>				<td>					<?php echo JText::_('COM_ADMIN_SAFE_MODE'); ?>				</td>				<td>					<?php echo JHtml::_('phpsetting.boolean', $this->php_settings['safe_mode']); ?>				</td>			</tr>			<tr>				<td>					<?php echo JText::_('COM_ADMIN_OPEN_BASEDIR'); ?>				</td>				<td>					<?php echo JHtml::_('phpsetting.string', $this->php_settings['open_basedir']); ?>				</td>			</tr>			<tr>				<td>					<?php echo JText::_('COM_ADMIN_DISPLAY_ERRORS'); ?>				</td>				<td>					<?php echo JHtml::_('phpsetting.boolean', $this->php_settings['display_errors']); ?>				</td>			</tr>			<tr>				<td>					<?php echo JText::_('COM_ADMIN_SHORT_OPEN_TAGS'); ?>				</td>				<td>					<?php echo JHtml::_('phpsetting.boolean', $this->php_settings['short_open_tag']); ?>				</td>			</tr>			<tr>				<td>					<?php echo JText::_('COM_ADMIN_FILE_UPLOADS'); ?>				</td>				<td>					<?php echo JHtml::_('phpsetting.boolean', $this->php_settings['file_uploads']); ?>				</td>			</tr>			<tr>				<td>					<?php echo JText::_('COM_ADMIN_MAGIC_QUOTES'); ?>				</td>				<td>					<?php echo JHtml::_('phpsetting.boolean', $this->php_settings['magic_quotes_gpc']); ?>				</td>			</tr>			<tr>				<td>					<?php echo JText::_('COM_ADMIN_REGISTER_GLOBALS'); ?>				</td>				<td>					<?php echo JHtml::_('phpsetting.boolean', $this->php_settings['register_globals']); ?>				</td>			</tr>			<tr>				<td>					<?php echo JText::_('COM_ADMIN_OUTPUT_BUFFERING'); ?>				</td>				<td>					<?php echo JHtml::_('phpsetting.boolean', $this->php_settings['output_buffering']); ?>				</td>			</tr>			<tr>				<td>					<?php echo JText::_('COM_ADMIN_SESSION_SAVE_PATH'); ?>				</td>				<td>					<?php echo JHtml::_('phpsetting.string', $this->php_settings['session.save_path']); ?>				</td>			</tr>			<tr>				<td>					<?php echo JText::_('COM_ADMIN_SESSION_AUTO_START'); ?>				</td>				<td>					<?php echo JHtml::_('phpsetting.integer', $this->php_settings['session.auto_start']); ?>				</td>			</tr>			<tr>				<td>					<?php echo JText::_('COM_ADMIN_XML_ENABLED'); ?>				</td>				<td>					<?php echo JHtml::_('phpsetting.set', $this->php_settings['xml']); ?>				</td>			</tr>			<tr>				<td>					<?php echo JText::_('COM_ADMIN_ZLIB_ENABLED'); ?>				</td>				<td>					<?php echo JHtml::_('phpsetting.set', $this->php_settings['zlib']); ?>				</td>			</tr>			<tr>				<td>					<?php echo JText::_('COM_ADMIN_ZIP_ENABLED'); ?>				</td>				<td>					<?php echo JHtml::_('phpsetting.set', $this->php_settings['zip']); ?>				</td>			</tr>			<tr>				<td>					<?php echo JText::_('COM_ADMIN_DISABLED_FUNCTIONS'); ?>				</td>				<td>					<?php echo JHtml::_('phpsetting.string', $this->php_settings['disable_functions']); ?>				</td>			</tr>			<tr>				<td>					<?php echo JText::_('COM_ADMIN_MBSTRING_ENABLED'); ?>				</td>				<td>					<?php echo JHtml::_('phpsetting.set', $this->php_settings['mbstring']); ?>				</td>			</tr>			<tr>				<td>					<?php echo JText::_('COM_ADMIN_ICONV_AVAILABLE'); ?>				</td>				<td>					<?php echo JHtml::_('phpsetting.set', $this->php_settings['iconv']); ?>				</td>			</tr>		</tbody>	</table></fieldset>
<?php/** * @package     Joomla.Legacy * @subpackage  Application * * @copyright   Copyright (C) 2005 - 2013 Open Source Matters, Inc. All rights reserved. * @license     GNU General Public License version 2 or later; see LICENSE */defined('JPATH_PLATFORM') or die;/** * Application helper functions * * @package     Joomla.Legacy * @subpackage  Application * @since       11.1 */class JApplicationHelper{	/**	 * Client information array	 *	 * @var    array	 * @since  11.1	 */	protected static $_clients = null;	/**	 * Return the name of the request component [main component]	 *	 * @param   string  $default  The default option	 *	 * @return  string  Option (e.g. com_something)	 *	 * @since   11.1	 */	public static function getComponentName($default = null)	{		static $option;		if ($option)		{			return $option;		}		$input = JFactory::getApplication()->input;		$option = strtolower($input->get('option'));		if (empty($option))		{			$option = $default;		}		$input->set('option', $option);		return $option;	}	/**	 * Gets information on a specific client id.  This method will be useful in	 * future versions when we start mapping applications in the database.	 *	 * This method will return a client information array if called	 * with no arguments which can be used to add custom application information.	 *	 * @param   integer  $id      A client identifier	 * @param   boolean  $byName  If True, find the client by its name	 *	 * @return  mixed  Object describing the client or false if not known	 *	 * @since   11.1	 */	public static function getClientInfo($id = null, $byName = false)	{		// Only create the array if it does not exist		if (self::$_clients === null)		{			$obj = new stdClass;			// Site Client			$obj->id = 0;			$obj->name = 'site';			$obj->path = JPATH_SITE;			self::$_clients[0] = clone $obj;			// Administrator Client			$obj->id = 1;			$obj->name = 'administrator';			$obj->path = JPATH_ADMINISTRATOR;			self::$_clients[1] = clone $obj;			// Installation Client			$obj->id = 2;			$obj->name = 'installation';			$obj->path = JPATH_INSTALLATION;			self::$_clients[2] = clone $obj;		}		// If no client id has been passed return the whole array		if (is_null($id))		{			return self::$_clients;		}		// Are we looking for client information by id or by name?		if (!$byName)		{			if (isset(self::$_clients[$id]))			{				return self::$_clients[$id];			}		}		else		{			foreach (self::$_clients as $client)			{				if ($client->name == strtolower($id))				{					return $client;				}			}		}		return null;	}	/**	 * Adds information for a client.	 *	 * @param   mixed  $client  A client identifier either an array or object	 *	 * @return  boolean  True if the information is added. False on error	 *	 * @since   11.1	 */	public static function addClientInfo($client)	{		if (is_array($client))		{			$client = (object) $client;		}		if (!is_object($client))		{			return false;		}		$info = self::getClientInfo();		if (!isset($client->id))		{			$client->id = count($info);		}		self::$_clients[$client->id] = clone $client;		return true;	}	/**	 * Parse a XML install manifest file.	 *	 * XML Root tag should be 'install' except for languages which use meta file.	 *	 * @param   string  $path  Full path to XML file.	 *	 * @return  array  XML metadata.	 *	 * @since   11.1	 * @deprecated  13.3 Use JInstaller::parseXMLInstallFile instead.	 */	public static function parseXMLInstallFile($path)	{		JLog::add('JApplicationHelper::parseXMLInstallFile is deprecated. Use JInstaller::parseXMLInstallFile instead.', JLog::WARNING, 'deprecated');		return JInstaller::parseXMLInstallFile($path);	}	/**	 * Parse a XML language meta file.	 *	 * XML Root tag  for languages which is meta file.	 *	 * @param   string  $path  Full path to XML file.	 *	 * @return  array  XML metadata.	 *	 * @deprecated  13.3 Use JInstaller::parseXMLInstallFile instead.	 */	public static function parseXMLLangMetaFile($path)	{		JLog::add('JApplicationHelper::parseXMLLangMetaFile is deprecated. Use JInstaller::parseXMLInstallFile instead.', JLog::WARNING, 'deprecated');		// Read the file to see if it's a valid component XML file		$xml = simplexml_load_file($path);		if (!$xml)		{			return false;		}		/*		 * Check for a valid XML root tag.		 *		 * Should be 'metafile'.		 */		if ($xml->getName() != 'metafile')		{			unset($xml);			return false;		}		$data = array();		$data['name'] = (string) $xml->name;		$data['type'] = $xml->attributes()->type;		$data['creationDate'] = ((string) $xml->creationDate) ? (string) $xml->creationDate : JText::_('JLIB_UNKNOWN');		$data['author'] = ((string) $xml->author) ? (string) $xml->author : JText::_('JLIB_UNKNOWN');		$data['copyright'] = (string) $xml->copyright;		$data['authorEmail'] = (string) $xml->authorEmail;		$data['authorUrl'] = (string) $xml->authorUrl;		$data['version'] = (string) $xml->version;		$data['description'] = (string) $xml->description;		$data['group'] = (string) $xml->group;		return $data;	}}
<?php/** * @package     Joomla.Platform * @subpackage  HTML * * @copyright   Copyright (C) 2005 - 2013 Open Source Matters, Inc. All rights reserved. * @license     GNU General Public License version 2 or later; see LICENSE */defined('JPATH_PLATFORM') or die;/** * HTML helper class for rendering telephone numbers. * * @package     Joomla.Platform * @subpackage  HTML * @since       11.1 */abstract class JHtmlTel{	/**	 * Converts strings of integers into more readable telephone format	 *	 * By default, the ITU-T format will automatically be used.	 * However, one of the allowed unit types may also be used instead.	 *	 * @param   integer  $number       The integers in a phone number with dot separated country code	 *                                 ccc.nnnnnnn where ccc represents country code and nnn represents the local number.	 * @param   string   $displayplan  The numbering plan used to display the numbers.	 *	 * @return  string  The formatted telephone number.	 *	 * @since   11.1	 *	 * @see     JFormRuleTel	 */	public static function tel($number, $displayplan)	{		$number = explode('.', $number);		$countrycode = $number[0];		$number = $number[1];		if ($displayplan == 'ITU-T' || $displayplan == 'International' || $displayplan == 'int' || $displayplan == 'missdn' || $displayplan == null)		{			$display[0] = '+';			$display[1] = $countrycode;			$display[2] = ' ';			$display[3] = implode(str_split($number, 2), ' ');		}		elseif ($displayplan == 'NANP' || $displayplan == 'northamerica' || $displayplan == 'US')		{			$display[0] = '(';			$display[1] = substr($number, 0, 3);			$display[2] = ') ';			$display[3] = substr($number, 3, 3);			$display[4] = '-';			$display[5] = substr($number, 6, 4);		}		elseif ($displayplan == 'EPP' || $displayplan == 'IETF')		{			$display[0] = '+';			$display[1] = $countrycode;			$display[2] = '.';			$display[3] = $number;		}		elseif ($displayplan == 'ARPA' || $displayplan == 'ENUM')		{			$number = implode(str_split(strrev($number), 1), '.');			$display[0] = '+';			$display[1] = $number;			$display[2] = '.';			$display[3] = $countrycode;			$display[4] = '.e164.arpa';		}		$display = implode($display, '');		return $display;	}}
<?php/** * @package     Joomla.Administrator * @subpackage  com_media * * @copyright   Copyright (C) 2005 - 2013 Open Source Matters, Inc. All rights reserved. * @license     GNU General Public License version 2 or later; see LICENSE.txt */defined('_JEXEC') or die;
<?php/** * @package     Joomla.Site * @subpackage  mod_menu * * @copyright   Copyright (C) 2005 - 2013 Open Source Matters, Inc. All rights reserved. * @license     GNU General Public License version 2 or later; see LICENSE.txt */defined('_JEXEC') or die;// Note. It is important to remove spaces between elements.?><?php // The menu class is deprecated. Use nav instead. ?><ul class="nav menu<?php echo $class_sfx;?>"<?php	$tag = '';	if ($params->get('tag_id') != null)	{		$tag = $params->get('tag_id').'';		echo ' id="'.$tag.'"';	}?>><?phpforeach ($list as $i => &$item) :	$class = 'item-'.$item->id;	if ($item->id == $active_id)	{		$class .= ' current';	}	if (in_array($item->id, $path))	{		$class .= ' active';	}	elseif ($item->type == 'alias')	{		$aliasToId = $item->params->get('aliasoptions');		if (count($path) > 0 && $aliasToId == $path[count($path) - 1])		{			$class .= ' active';		}		elseif (in_array($aliasToId, $path))		{			$class .= ' alias-parent-active';		}	}	if ($item->type == 'separator')	{		$class .= ' divider';	}	if ($item->deeper)	{		$class .= ' deeper';	}	if ($item->parent)	{		$class .= ' parent';	}	if (!empty($class))	{		$class = ' class="'.trim($class) .'"';	}	echo '<li'.$class.'>';	// Render the menu item.	switch ($item->type) :		case 'separator':		case 'url':		case 'component':		case 'heading':			require JModuleHelper::getLayoutPath('mod_menu', 'default_'.$item->type);			break;		default:			require JModuleHelper::getLayoutPath('mod_menu', 'default_url');			break;	endswitch;	// The next item is deeper.	if ($item->deeper)	{		echo '<ul class="nav-child unstyled small">';	}	// The next item is shallower.	elseif ($item->shallower)	{		echo '</li>';		echo str_repeat('</ul></li>', $item->level_diff);	}	// The next item is on the same level.	else {		echo '</li>';	}endforeach;?></ul>
<?php/** * @package     Joomla.Administrator * @subpackage  com_banners * * @copyright   Copyright (C) 2005 - 2013 Open Source Matters, Inc. All rights reserved. * @license     GNU General Public License version 2 or later; see LICENSE.txt */defined('_JEXEC') or die;/** * Client model. * * @package     Joomla.Administrator * @subpackage  com_banners * @since       1.6 */class BannersModelClient extends JModelAdmin{	/**	 * Method to test whether a record can be deleted.	 *	 * @param   object	A record object.	 * @return  boolean  True if allowed to delete the record. Defaults to the permission set in the component.	 * @since   1.6	 */	protected function canDelete($record)	{		if (!empty($record->id))			{				if ($record->state != -2)				{					return;				}			$user = JFactory::getUser();			if (!empty($record->catid))			{				return $user->authorise('core.delete', 'com_banners.category.'.(int) $record->catid);			}			else {				return $user->authorise('core.delete', 'com_banners');			}		}	}	/**	 * Method to test whether a record can be deleted.	 *	 * @param   object	A record object.	 * @return  boolean  True if allowed to change the state of the record. Defaults to the permission set in the component.	 * @since   1.6	 */	protected function canEditState($record)	{		$user = JFactory::getUser();		if (!empty($record->catid))		{			return $user->authorise('core.edit.state', 'com_banners.category.'.(int) $record->catid);		}		else		{			return $user->authorise('core.edit.state', 'com_banners');		}	}	/**	 * Returns a reference to the a Table object, always creating it.	 *	 * @param   type	The table type to instantiate	 * @param   string	A prefix for the table class name. Optional.	 * @param   array  Configuration array for model. Optional.	 * @return  JTable	A database object	 * @since   1.6	 */	public function getTable($type = 'Client', $prefix = 'BannersTable', $config = array())	{		return JTable::getInstance($type, $prefix, $config);	}	/**	 * Method to get the record form.	 *	 * @param   array  $data		Data for the form.	 * @param   boolean	$loadData	True if the form is to load its own data (default case), false if not.	 * @return  mixed  A JForm object on success, false on failure	 * @since   1.6	 */	public function getForm($data = array(), $loadData = true)	{		// Get the form.		$form = $this->loadForm('com_banners.client', 'client', array('control' => 'jform', 'load_data' => $loadData));		if (empty($form))		{			return false;		}		return $form;	}	/**	 * Method to get the data that should be injected in the form.	 *	 * @return  mixed  The data for the form.	 * @since   1.6	 */	protected function loadFormData()	{		// Check the session for previously entered form data.		$data = JFactory::getApplication()->getUserState('com_banners.edit.client.data', array());		if (empty($data))		{			$data = $this->getItem();		}		$this->preprocessData('com_banners.client', $data);		return $data;	}	/**	 * Prepare and sanitise the table data prior to saving.	 *	 * @param   JTable	A JTable object.	 * @since   1.6	 */	protected function prepareTable($table)	{		$table->name = htmlspecialchars_decode($table->name, ENT_QUOTES);	}}
<?php/** * @package     Joomla.Administrator * @subpackage  com_cache * * @copyright   Copyright (C) 2005 - 2013 Open Source Matters, Inc. All rights reserved. * @license     GNU General Public License version 2 or later; see LICENSE.txt */defined('_JEXEC') or die;/** * Cache Controller * * @package     Joomla.Administrator * @subpackage  com_cache * @since       1.6 */class CacheController extends JControllerLegacy{	/**	 * @param   boolean			If true, the view output will be cached	 * @param   array  An array of safe url parameters and their variable types, for valid values see {@link JFilterInput::clean()}.	 *	 * @return  JController		This object to support chaining.	 * @since   1.5	 */	public function display($cachable = false, $urlparams = false)	{		require_once JPATH_COMPONENT.'/helpers/cache.php';		// Get the document object.		$document = JFactory::getDocument();		// Set the default view name and format from the Request.		$vName   = $this->input->get('view', 'cache');		$vFormat = $document->getType();		$lName   = $this->input->get('layout', 'default');		// Get and render the view.		if ($view = $this->getView($vName, $vFormat))		{			switch ($vName)			{				case 'purge':					break;				case 'cache':				default:					$model = $this->getModel($vName);					$view->setModel($model, true);					break;			}			$view->setLayout($lName);			// Push document object into the view.			$view->document = $document;			// Load the submenu.			CacheHelper::addSubmenu($this->input->get('view', 'cache'));			$view->display();		}	}	public function delete()	{		// Check for request forgeries		JSession::checkToken() or jexit(JText::_('JInvalid_Token'));		$cid = $this->input->post->get('cid', array(), 'array');		$model = $this->getModel('cache');		if (empty($cid))		{			JError::raiseWarning(500, JText::_('JERROR_NO_ITEMS_SELECTED'));		}		else		{			$model->cleanlist($cid);		}		$this->setRedirect('index.php?option=com_cache&client='.$model->getClient()->id);	}	public function purge()	{		// Check for request forgeries		JSession::checkToken() or jexit(JText::_('JInvalid_Token'));		$model = $this->getModel('cache');		$ret = $model->purge();		$msg = JText::_('COM_CACHE_EXPIRED_ITEMS_HAVE_BEEN_PURGED');		$msgType = 'message';		if ($ret === false)		{			$msg = JText::_('Error purging expired items');			$msgType = 'error';		}		$this->setRedirect('index.php?option=com_cache&view=purge', $msg, $msgType);	}}
<?php/** * @package     Joomla.Administrator * @subpackage  com_media * * @copyright   Copyright (C) 2005 - 2013 Open Source Matters, Inc. All rights reserved. * @license     GNU General Public License version 2 or later; see LICENSE.txt */defined('_JEXEC') or die;$app	= JFactory::getApplication();$style = $app->getUserStateFromRequest('media.list.layout', 'layout', 'thumbs', 'word');?><div class="media btn-group">	<a href="#" id="thumbs" onclick="MediaManager.setViewType('thumbs')" class="btn <?php echo ($style == "thumbs") ? 'active' : '';?>">	<i class="icon-grid-view-2"></i> <?php echo JText::_('COM_MEDIA_THUMBNAIL_VIEW'); ?></a>	<a href="#" id="details" onclick="MediaManager.setViewType('details')" class="btn <?php echo ($style == "details") ? 'active' : '';?>">	<i class="icon-list-view"></i> <?php echo JText::_('COM_MEDIA_DETAIL_VIEW'); ?></a></div>
<?php/** * @package     Joomla.Site * @subpackage  com_search * * @copyright   Copyright (C) 2005 - 2013 Open Source Matters, Inc. All rights reserved. * @license     GNU General Public License version 2 or later; see LICENSE.txt */defined('_JEXEC') or die;/** * OpenSearch View class for the Search component * * @package     Joomla.Site * @subpackage  Search * @since       1.7 */class SearchViewSearch extends JViewLegacy{	public function display($tpl = null)	{		$doc = JFactory::getDocument();		$app = JFactory::getApplication();		$params = JComponentHelper::getParams('com_search');		$doc->setShortName($params->get('opensearch_name', $app->getCfg('sitename')));		$doc->setDescription($params->get('opensearch_description', $app->getCfg('MetaDesc')));		// Add the URL for the search		$searchUri = JURI::base().'index.php?option=com_search&searchword={searchTerms}';		// Find the menu item for the search		$menu	= $app->getMenu();		$items	= $menu->getItems('link', 'index.php?option=com_search&view=search');		if (isset($items[0]))		{			$searchUri .= '&Itemid='.$items[0]->id;		}		$htmlSearch = new JOpenSearchUrl;		$htmlSearch->template = JRoute::_($searchUri);		$doc->addUrl($htmlSearch);	}}
<?php/** * @package     Joomla.Administrator * @subpackage  com_languages * * @copyright   Copyright (C) 2005 - 2013 Open Source Matters, Inc. All rights reserved. * @license     GNU General Public License version 2 or later; see LICENSE.txt */defined('_JEXEC') or die;/** * View to edit an language override * * @package     Joomla.Administrator * @subpackage  com_languages * @since       2.5 */class LanguagesViewOverride extends JViewLegacy{	/**	 * The form to use for the view	 *	 * @var		object	 * @since	2.5	 */	protected $form;	/**	 * The item to edit	 *	 * @var		object	 * @since	2.5	 */	protected $item;	/**	 * The model state	 *	 * @var		object	 * @since	2.5	 */	protected $state;	/**	 * Displays the view	 *	 * @param   	string	$tpl	The name of the template file to parse	 *	 * @return  void	 *	 * @since		2.5	 */	public function display($tpl = null)	{		JHtml::_('stylesheet', 'overrider/overrider.css', array(), true);		JHtml::_('behavior.framework');		JHtml::_('script', 'overrider/overrider.js', false, true);		$this->form  = $this->get('Form');		$this->item  = $this->get('Item');		$this->state = $this->get('State');		// Check for errors		if (count($errors = $this->get('Errors')))		{			throw new Exception(implode("\n", $errors));		}		// Check whether the cache has to be refreshed		$cached_time = JFactory::getApplication()->getUserState('com_languages.overrides.cachedtime.'.$this->state->get('filter.client').'.'.$this->state->get('filter.language'), 0);		if (time() - $cached_time > 60 * 5)		{			$this->state->set('cache_expired', true);		}		// Add strings for translations in Javascript		JText::script('COM_LANGUAGES_VIEW_OVERRIDE_NO_RESULTS');		JText::script('COM_LANGUAGES_VIEW_OVERRIDE_REQUEST_ERROR');		$this->addToolbar();		parent::display($tpl);	}	/**	 * Adds the page title and toolbar	 *	 * @return void	 *	 * @since	2.5	 */	protected function addToolbar()	{		JFactory::getApplication()->input->set('hidemainmenu', true);		$canDo	= LanguagesHelper::getActions();		JToolbarHelper::title(JText::_('COM_LANGUAGES_VIEW_OVERRIDE_EDIT_TITLE'), 'langmanager');		if ($canDo->get('core.edit'))		{			JToolbarHelper::apply('override.apply');			JToolbarHelper::save('override.save');		}		// This component does not support Save as Copy		if ($canDo->get('core.edit') && $canDo->get('core.create'))		{			JToolbarHelper::save2new('override.save2new');		}		if (empty($this->item->key))		{			JToolbarHelper::cancel('override.cancel');		}		else		{			JToolbarHelper::cancel('override.cancel', 'JTOOLBAR_CLOSE');		}		JToolbarHelper::divider();		JToolbarHelper::help('JHELP_EXTENSIONS_LANGUAGE_MANAGER_OVERRIDES_EDIT');	}}
<?php/** * @package     Joomla.Site * @subpackage  Template.Beez3 * * @copyright   Copyright (C) 2005 - 2013 Open Source Matters, Inc. All rights reserved. * @license     GNU General Public License version 2 or later; see LICENSE.txt */defined('_JEXEC') or die;function renderMessage($msgList){	$buffer  = null;	$buffer .= "\n<div id=\"system-message-container\">";	if (is_array($msgList))	{		$buffer .= "\n<dl id=\"system-message\">";		foreach ($msgList as $type => $msgs)		{			if (count($msgs))			{				$buffer .= "\n<dt class=\"" . strtolower($type) . "\">" . JText::_($type) . "</dt>";				$buffer .= "\n<dd class=\"" . strtolower($type) . " message\">";				$buffer .= "\n\t<ul>";				foreach ($msgs as $msg)				{					$buffer .= "\n\t\t<li>" . $msg . "</li>";				}				$buffer .= "\n\t</ul>";				$buffer .= "\n</dd>";			}			$buffer .= "\n</dl>";		}		$buffer .= "\n</div>";		return $buffer;	}}
<?php/** * @package     Joomla.Site * @subpackage  com_contact * * @copyright   Copyright (C) 2005 - 2013 Open Source Matters, Inc. All rights reserved. * @license     GNU General Public License version 2 or later; see LICENSE.txt */defined('_JEXEC') or die;JLoader::register('ContactHelper', JPATH_ADMINISTRATOR . '/components/com_contact/helpers/contact.php');JLoader::register('CategoryHelperAssociation', JPATH_ADMINISTRATOR . '/components/com_categories/helpers/association.php');/** * Contact Component Association Helper * * @package     Joomla.Site * @subpackage  com_contact * @since       3.0 */abstract class ContactHelperAssociation extends CategoryHelperAssociation{	/**	 * Method to get the associations for a given item	 *	 * @param   integer  $id    Id of the item	 * @param   string   $view  Name of the view	 *	 * @return  array   Array of associations for the item	 *	 * @since  3.0	 */	public static function getAssociations($id = 0, $view = null)	{		jimport('helper.route', JPATH_COMPONENT_SITE);		$app = JFactory::getApplication();		$jinput = $app->input;		$view = is_null($view) ? $jinput->get('view') : $view;		$id = empty($id) ? $jinput->getInt('id') : $id;		if ($view == 'contact')		{			if ($id)			{				$associations = JLanguageAssociations::getAssociations('com_contact', '#__contact_details', 'com_contact.item', $id);				$return = array();				foreach ($associations as $tag => $item)				{					$return[$tag] = ContactHelperRoute::getContactRoute($item->id, $item->catid, $item->language);				}				return $return;			}		}		if ($view == 'category' || $view == 'categories')		{			return self::getCategoryAssociations($id, 'com_contact');		}		return array();	}}
<?php/** * @package     Joomla.Administrator * @subpackage  com_config * * @copyright   Copyright (C) 2005 - 2013 Open Source Matters, Inc. All rights reserved. * @license     GNU General Public License version 2 or later; see LICENSE.txt */defined('_JEXEC') or die;?><div class="width-100">	<fieldset class="adminform">		<legend><?php echo JText::_('COM_CONFIG_PERMISSION_SETTINGS'); ?></legend>		<?php foreach ($this->form->getFieldset('permissions') as $field) : ?>			<?php echo $field->label; ?>			<div class="clr"> </div>			<?php echo $field->input; ?>		<?php endforeach; ?>	</fieldset></div>
<?php/** * @package     Joomla.Platform * @subpackage  Language * * @copyright   Copyright (C) 2005 - 2013 Open Source Matters, Inc. All rights reserved. * @copyright   Copyright (C) 2005 Richard Heyes (http://www.phpguru.org/). All rights reserved. * @license     GNU General Public License version 2 or later; see LICENSE */defined('JPATH_PLATFORM') or die;/** * Porter English stemmer class. * * This class was adapted from one written by Richard Heyes. * See copyright and link information above. * * @package     Joomla.Platform * @subpackage  Language * @since       12.1 */class JLanguageStemmerPorteren extends JLanguageStemmer{	/**	 * Regex for matching a consonant.	 *	 * @var    string	 * @since  12.1	 */	private static $_regex_consonant = '(?:[bcdfghjklmnpqrstvwxz]|(?<=[aeiou])y|^y)';	/**	 * Regex for matching a vowel	 * @var    string	 * @since  12.1	 */	private static $_regex_vowel = '(?:[aeiou]|(?<![aeiou])y)';	/**	 * Method to stem a token and return the root.	 *	 * @param   string  $token  The token to stem.	 * @param   string  $lang   The language of the token.	 *	 * @return  string  The root token.	 *	 * @since   12.1	 */	public function stem($token, $lang)	{		// Check if the token is long enough to merit stemming.		if (strlen($token) <= 2)		{			return $token;		}		// Check if the language is English or All.		if ($lang !== 'en')		{			return $token;		}		// Stem the token if it is not in the cache.		if (!isset($this->cache[$lang][$token]))		{			// Stem the token.			$result = $token;			$result = self::_step1ab($result);			$result = self::_step1c($result);			$result = self::_step2($result);			$result = self::_step3($result);			$result = self::_step4($result);			$result = self::_step5($result);			// Add the token to the cache.			$this->cache[$lang][$token] = $result;		}		return $this->cache[$lang][$token];	}	/**	 * Step 1	 *	 * @param   string  $word  The token to stem.	 *	 * @return  string	 *	 * @since   12.1	 */	private static function _step1ab($word)	{		// Part a		if (substr($word, -1) == 's')		{				self::_replace($word, 'sses', 'ss')			or self::_replace($word, 'ies', 'i')			or self::_replace($word, 'ss', 'ss')			or self::_replace($word, 's', '');		}		// Part b		if (substr($word, -2, 1) != 'e' or !self::_replace($word, 'eed', 'ee', 0))		{			// First rule			$v = self::$_regex_vowel;			// Check ing and ed			// Note use of && and OR, for precedence reasons			if (preg_match("#$v+#", substr($word, 0, -3)) && self::_replace($word, 'ing', '')				or preg_match("#$v+#", substr($word, 0, -2)) && self::_replace($word, 'ed', ''))			{				// If one of above two test successful				if (!self::_replace($word, 'at', 'ate') and !self::_replace($word, 'bl', 'ble') and !self::_replace($word, 'iz', 'ize'))				{					// Double consonant ending					if (self::_doubleConsonant($word) and substr($word, -2) != 'll' and substr($word, -2) != 'ss' and substr($word, -2) != 'zz')					{						$word = substr($word, 0, -1);					}					elseif (self::_m($word) == 1 and self::_cvc($word))					{						$word .= 'e';					}				}			}		}		return $word;	}	/**	 * Step 1c	 *	 * @param   string  $word  The token to stem.	 *	 * @return  string	 *	 * @since   12.1	 */	private static function _step1c($word)	{		$v = self::$_regex_vowel;		if (substr($word, -1) == 'y' && preg_match("#$v+#", substr($word, 0, -1)))		{			self::_replace($word, 'y', 'i');		}		return $word;	}	/**	 * Step 2	 *	 * @param   string  $word  The token to stem.	 *	 * @return  string	 *	 * @since   12.1	 */	private static function _step2($word)	{		switch (substr($word, -2, 1))		{			case 'a':					self::_replace($word, 'ational', 'ate', 0)				or self::_replace($word, 'tional', 'tion', 0);				break;			case 'c':					self::_replace($word, 'enci', 'ence', 0)				or self::_replace($word, 'anci', 'ance', 0);				break;			case 'e':				self::_replace($word, 'izer', 'ize', 0);				break;			case 'g':				self::_replace($word, 'logi', 'log', 0);				break;			case 'l':					self::_replace($word, 'entli', 'ent', 0)				or self::_replace($word, 'ousli', 'ous', 0)				or self::_replace($word, 'alli', 'al', 0)				or self::_replace($word, 'bli', 'ble', 0)				or self::_replace($word, 'eli', 'e', 0);				break;			case 'o':					self::_replace($word, 'ization', 'ize', 0)				or self::_replace($word, 'ation', 'ate', 0)				or self::_replace($word, 'ator', 'ate', 0);				break;			case 's':					self::_replace($word, 'iveness', 'ive', 0)				or self::_replace($word, 'fulness', 'ful', 0)				or self::_replace($word, 'ousness', 'ous', 0)				or self::_replace($word, 'alism', 'al', 0);				break;			case 't':					self::_replace($word, 'biliti', 'ble', 0)				or self::_replace($word, 'aliti', 'al', 0)				or self::_replace($word, 'iviti', 'ive', 0);				break;		}		return $word;	}	/**	 * Step 3	 *	 * @param   string  $word  The token to stem.	 *	 * @return  string	 *	 * @since   12.1	 */	private static function _step3($word)	{		switch (substr($word, -2, 1))		{			case 'a':				self::_replace($word, 'ical', 'ic', 0);				break;			case 's':				self::_replace($word, 'ness', '', 0);				break;			case 't':					self::_replace($word, 'icate', 'ic', 0)				or self::_replace($word, 'iciti', 'ic', 0);				break;			case 'u':				self::_replace($word, 'ful', '', 0);				break;			case 'v':				self::_replace($word, 'ative', '', 0);				break;			case 'z':				self::_replace($word, 'alize', 'al', 0);				break;		}		return $word;	}	/**	 * Step 4	 *	 * @param   string  $word  The token to stem.	 *	 * @return  string	 *	 * @since   12.1	 */	private static function _step4($word)	{		switch (substr($word, -2, 1))		{			case 'a':				self::_replace($word, 'al', '', 1);				break;			case 'c':					self::_replace($word, 'ance', '', 1)				or self::_replace($word, 'ence', '', 1);				break;			case 'e':				self::_replace($word, 'er', '', 1);				break;			case 'i':				self::_replace($word, 'ic', '', 1);				break;			case 'l':					self::_replace($word, 'able', '', 1)				or self::_replace($word, 'ible', '', 1);				break;			case 'n':					self::_replace($word, 'ant', '', 1)				or self::_replace($word, 'ement', '', 1)				or self::_replace($word, 'ment', '', 1)				or self::_replace($word, 'ent', '', 1);				break;			case 'o':				if (substr($word, -4) == 'tion' or substr($word, -4) == 'sion')				{					self::_replace($word, 'ion', '', 1);				}				else				{					self::_replace($word, 'ou', '', 1);				}				break;			case 's':				self::_replace($word, 'ism', '', 1);				break;			case 't':					self::_replace($word, 'ate', '', 1)				or self::_replace($word, 'iti', '', 1);				break;			case 'u':				self::_replace($word, 'ous', '', 1);				break;			case 'v':				self::_replace($word, 'ive', '', 1);				break;			case 'z':				self::_replace($word, 'ize', '', 1);				break;		}		return $word;	}	/**	 * Step 5	 *	 * @param   string  $word  The token to stem.	 *	 * @return  string	 *	 * @since   12.1	 */	private static function _step5($word)	{		// Part a		if (substr($word, -1) == 'e')		{			if (self::_m(substr($word, 0, -1)) > 1)			{				self::_replace($word, 'e', '');			}			elseif (self::_m(substr($word, 0, -1)) == 1)			{				if (!self::_cvc(substr($word, 0, -1)))				{					self::_replace($word, 'e', '');				}			}		}		// Part b		if (self::_m($word) > 1 and self::_doubleConsonant($word) and substr($word, -1) == 'l')		{			$word = substr($word, 0, -1);		}		return $word;	}	/**	 * Replaces the first string with the second, at the end of the string. If third	 * arg is given, then the preceding string must match that m count at least.	 *	 * @param   string   &$str   String to check	 * @param   string   $check  Ending to check for	 * @param   string   $repl   Replacement string	 * @param   integer  $m      Optional minimum number of m() to meet	 *	 * @return  boolean  Whether the $check string was at the end	 *                   of the $str string. True does not necessarily mean	 *                   that it was replaced.	 *	 * @since   12.1	 */	private static function _replace(&$str, $check, $repl, $m = null)	{		$len = 0 - strlen($check);		if (substr($str, $len) == $check)		{			$substr = substr($str, 0, $len);			if (is_null($m) or self::_m($substr) > $m)			{				$str = $substr . $repl;			}			return true;		}		return false;	}	/**	 * m() measures the number of consonant sequences in $str. if c is	 * a consonant sequence and v a vowel sequence, and <..> indicates arbitrary	 * presence,	 *	 * <c><v>       gives 0	 * <c>vc<v>     gives 1	 * <c>vcvc<v>   gives 2	 * <c>vcvcvc<v> gives 3	 *	 * @param   string  $str  The string to return the m count for	 *	 * @return  integer  The m count	 *	 * @since   12.1	 */	private static function _m($str)	{		$c = self::$_regex_consonant;		$v = self::$_regex_vowel;		$str = preg_replace("#^$c+#", '', $str);		$str = preg_replace("#$v+$#", '', $str);		preg_match_all("#($v+$c+)#", $str, $matches);		return count($matches[1]);	}	/**	 * Returns true/false as to whether the given string contains two	 * of the same consonant next to each other at the end of the string.	 *	 * @param   string  $str  String to check	 *	 * @return  boolean  Result	 *	 * @since   12.1	 */	private static function _doubleConsonant($str)	{		$c = self::$_regex_consonant;		return preg_match("#$c{2}$#", $str, $matches) and $matches[0]{0} == $matches[0]{1};	}	/**	 * Checks for ending CVC sequence where second C is not W, X or Y	 *	 * @param   string  $str  String to check	 *	 * @return  boolean  Result	 *	 * @since   12.1	 */	private static function _cvc($str)	{		$c = self::$_regex_consonant;		$v = self::$_regex_vowel;		$result = preg_match("#($c$v$c)$#", $str, $matches)			and strlen($matches[1]) == 3			and $matches[1]{2} != 'w'			and $matches[1]{2} != 'x'			and $matches[1]{2} != 'y';		return $result;	}}
<?php/** * @package     Joomla.Site * @subpackage  mod_related_items * * @copyright   Copyright (C) 2005 - 2013 Open Source Matters, Inc. All rights reserved. * @license     GNU General Public License version 2 or later; see LICENSE.txt */defined('_JEXEC') or die;?><ul class="relateditems<?php echo $moduleclass_sfx; ?>"><?php foreach ($list as $item) :	?><li>	<a href="<?php echo $item->route; ?>">		<?php if ($showDate) echo JHTML::_('date', $item->created, JText::_('DATE_FORMAT_LC4')). " - "; ?>		<?php echo $item->title; ?></a></li><?php endforeach; ?></ul>
<?php/** * @package     Joomla.Administrator * @subpackage  com_users * * @copyright   Copyright (C) 2005 - 2013 Open Source Matters, Inc. All rights reserved. * @license     GNU General Public License version 2 or later; see LICENSE.txt */defined('_JEXEC') or die;/** * User view levels list controller class. * * @package     Joomla.Administrator * @subpackage  com_users * @since       1.6 */class UsersControllerLevels extends JControllerAdmin{	/**	 * @var		string	The prefix to use with controller messages.	 * @since   1.6	 */	protected $text_prefix = 'COM_USERS_LEVELS';	/**	 * Proxy for getModel.	 *	 * @since   1.6	 */	public function getModel($name = 'Level', $prefix = 'UsersModel')	{		return parent::getModel($name, $prefix, array('ignore_request' => true));	}}
