<?php/** * @package     Joomla.Site * @subpackage  mod_tags_popular * * @copyright   Copyright (C) 2005 - 2013 Open Source Matters, Inc. All rights reserved. * @license     GNU General Public License version 2 or later; see LICENSE.txt */defined('_JEXEC') or die;/** * Helper for mod_tags_popular * * @package     Joomla.Site * @subpackage  mod_tags_popular * @since       3.1 */abstract class ModTagsPopularHelper{	public static function getList($params)	{		$db        = JFactory::getDbo();		$user      = JFactory::getUser();		$groups    = implode(',', $user->getAuthorisedViewLevels());		$timeframe = $params->get('timeframe', 'alltime');		$maximum   = $params->get('maximum', 5);		$query = $db->getQuery(true)			->select(				array(					'MAX(' . $db->quoteName('tag_id') . ') AS tag_id',					' COUNT(*) AS count', 'MAX(t.title) AS title',					'MAX(' .$db->quoteName('t.access') . ') AS access',					'MAX(' .$db->quoteName('t.alias') . ') AS alias'				)			)			->group($db->quoteName(array('tag_id', 'title', 'access', 'alias')))			->from($db->quoteName('#__contentitem_tag_map'))			->where($db->quoteName('t.access') . ' IN (' . $groups . ')');		// Only return published tags		$query->where($db->quoteName('t.published') . ' = 1 ');		// Optionally filter on language		$language = JComponentHelper::getParams('com_tags')->get('tag_list_language_filter', 'all');		if ($language != 'all')		{			if ($language == 'current_language')			{				$language = JHelperContent::getCurrentLanguage();			}			$query->where($db->quoteName('t.language') . ' IN (' . $db->quote($language) . ', ' . $db->quote('*') . ')');		}		if ($timeframe != 'alltime')		{			$now = new JDate;			$query->where($db->quoteName('tag_date') . ' > ' . $query->dateAdd($now->toSql('date'), '-1', strtoupper($timeframe)));		}		$query->join('INNER', $db->quoteName('#__tags', 't') . ' ON ' . $db->quoteName('tag_id') . ' = t.id')			->order('count DESC');		$db->setQuery($query, 0, $maximum);		$results = $db->loadObjectList();		return $results;	}}
<?php/** * @package     Joomla.Site * @subpackage  com_weblinks * * @copyright   Copyright (C) 2005 - 2013 Open Source Matters, Inc. All rights reserved. * @license     GNU General Public License version 2 or later; see LICENSE.txt */defined('_JEXEC') or die;// Code to support edit links for weblinks// Create a shortcut for params.$params = &$this->item->params;JHtml::addIncludePath(JPATH_COMPONENT.'/helpers/html');JHtml::_('behavior.tooltip');JHtml::_('behavior.framework');// Get the user object.$user = JFactory::getUser();// Check if user is allowed to add/edit based on weblinks permissinos.$canEdit = $user->authorise('core.edit', 'com_weblinks');$canCreate = $user->authorise('core.create', 'com_weblinks');$canEditState = $user->authorise('core.edit.state', 'com_weblinks');$n = count($this->items);$listOrder	= $this->escape($this->state->get('list.ordering'));$listDirn	= $this->escape($this->state->get('list.direction'));?><?php if (empty($this->items)) : ?>	<p> <?php echo JText::_('COM_WEBLINKS_NO_WEBLINKS'); ?></p><?php else : ?><form action="<?php echo htmlspecialchars(JUri::getInstance()->toString()); ?>" method="post" name="adminForm" id="adminForm">	<?php if ($this->params->get('show_pagination_limit')) : ?>		<fieldset class="filters">		<legend class="hidelabeltxt"><?php echo JText::_('JGLOBAL_FILTER_LABEL'); ?></legend>		<div class="display-limit">			<?php echo JText::_('JGLOBAL_DISPLAY_NUM'); ?>&#160;			<?php echo $this->pagination->getLimitBox(); ?>		</div>		<input type="hidden" name="filter_order" value="<?php echo $listOrder; ?>" />		<input type="hidden" name="filter_order_Dir" value="<?php echo $listDirn; ?>" />		</fieldset>	<?php endif; ?>	<table class="category">		<?php if ($this->params->get('show_headings') == 1) : ?>		<thead><tr>			<th class="title">					<?php echo JHtml::_('grid.sort',  'COM_WEBLINKS_GRID_TITLE', 'title', $listDirn, $listOrder); ?>			</th>			<?php if ($this->params->get('show_link_hits')) : ?>			<th class="hits">					<?php echo JHtml::_('grid.sort',  'JGLOBAL_HITS', 'hits', $listDirn, $listOrder); ?>			</th>			<?php endif; ?>		</tr>	</thead>	<?php endif; ?>	<tbody>	<?php foreach ($this->items as $i => $item) : ?>		<?php if ($this->items[$i]->state == 0) : ?>			<tr class="system-unpublished cat-list-row<?php echo $i % 2; ?>">		<?php else: ?>			<tr class="cat-list-row<?php echo $i % 2; ?>" >		<?php endif; ?>			<td class="title">			<p>				<?php if ($this->params->get('icons') == 0) : ?>					 <?php echo JText::_('COM_WEBLINKS_LINK'); ?>				<?php elseif ($this->params->get('icons') == 1) : ?>					<?php if (!$this->params->get('link_icons')) : ?>						<?php echo JHtml::_('image', 'system/'.$this->params->get('link_icons', 'weblink.png'), JText::_('COM_WEBLINKS_LINK'), null, true); ?>					<?php else: ?>						<?php echo '<img src="'.$this->params->get('link_icons').'" alt="'.JText::_('COM_WEBLINKS_LINK').'" />'; ?>					<?php endif; ?>				<?php endif; ?>				<?php					// Compute the correct link					$menuclass = 'category'.$this->pageclass_sfx;					$link = $item->link;					$width	= $item->params->get('width');					$height	= $item->params->get('height');					if ($width == null || $height == null)					{						$width	= 600;						$height	= 500;					}					switch ($item->params->get('target', $this->params->get('target')))					{						case 1:							// open in a new window							echo '<a href="'. $link .'" target="_blank" class="'. $menuclass .'" rel="nofollow">'.								$this->escape($item->title) .'</a>';							break;						case 2:							// open in a popup window							$attribs = 'toolbar=no,location=no,status=no,menubar=no,scrollbars=yes,resizable=yes,width='.$this->escape($width).',height='.$this->escape($height).'';							echo "<a href=\"$link\" onclick=\"window.open(this.href, 'targetWindow', '".$attribs."'); return false;\">".								$this->escape($item->title).'</a>';							break;						case 3:							// open in a modal window							JHtml::_('behavior.modal', 'a.modal'); ?>							<a class="modal" href="<?php echo $link;?>"  rel="{handler: 'iframe', size: {x:<?php echo $this->escape($width);?>, y:<?php echo $this->escape($height);?>}}">								<?php echo $this->escape($item->title). ' </a>';							break;						default:							// open in parent window							echo '<a href="'.  $link . '" class="'. $menuclass .'" rel="nofollow">'.								$this->escape($item->title) . ' </a>';							break;					}				?>				<?php // Code to add the edit link for the weblink. ?>						<?php if ($canEdit) : ?>							<ul class="actions">								<li class="edit-icon">									<?php echo JHtml::_('icon.edit', $item, $params); ?>								</li>							</ul>						<?php endif; ?>			</p>			<?php if (($this->params->get('show_link_description')) and ($item->description != '')) : ?>				<?php echo $item->description; ?>			<?php endif; ?>		</td>		<?php if ($this->params->get('show_link_hits')) : ?>		<td class="hits">			<?php echo $item->hits; ?>		</td>		<?php endif; ?>	</tr>	<?php endforeach; ?></tbody></table>	<?php // Code to add a link to submit a weblink. ?>	<?php /* if ($canCreate) : // TODO This is not working due to some problem in the router, I think. Ref issue #23685 ?>		<?php echo JHtml::_('icon.create', $item, $item->params); ?> 	<?php  endif; */ ?>		<?php if ($this->params->get('show_pagination')) : ?>		 <div class="pagination">			<?php if ($this->params->def('show_pagination_results', 1)) : ?>				<p class="counter">					<?php echo $this->pagination->getPagesCounter(); ?>				</p>			<?php endif; ?>				<?php echo $this->pagination->getPagesLinks(); ?>			</div>		<?php endif; ?>	</form><?php endif; ?>
<?php/** * @package     Joomla.Administrator * @subpackage  Template.hathor * * @copyright   Copyright (C) 2005 - 2013 Open Source Matters, Inc. All rights reserved. * @license     GNU General Public License version 2 or later; see LICENSE.txt */defined('_JEXEC') or die;JHtml::addIncludePath(JPATH_COMPONENT.'/helpers/html');JHtml::_('behavior.tooltip');$function  = JFactory::getApplication()->input->getCmd('function', 'jSelectPosition');$lang      = JFactory::getLanguage();$ordering  = $this->escape($this->state->get('list.ordering'));$direction = $this->escape($this->state->get('list.direction'));$clientId  = $this->state->get('filter.client_id');$state     = $this->state->get('filter.state');$template  = $this->state->get('filter.template');$type      = $this->state->get('filter.type');?><form action="<?php echo JRoute::_('index.php?option=com_modules&view=positions&layout=modal&tmpl=component&function='.$function.'&client_id=' .$clientId);?>" method="post" name="adminForm" id="adminForm">	<fieldset id="filter-bar">	<legend class="element-invisible"><?php echo JText::_('JSEARCH_FILTER_LABEL'); ?></legend>		<div class="filter-search">			<label for="filter_search">				<?php echo JText::_('JSearch_Filter_Label'); ?>			</label>			<input type="text" name="filter_search" id="filter_search" value="<?php echo $this->escape($this->state->get('filter.search')); ?>" size="30" title="<?php echo JText::_('COM_MODULES_FILTER_SEARCH_DESC'); ?>" />			<button type="submit">				<?php echo JText::_('JSEARCH_FILTER_SUBMIT'); ?></button>			<button type="button" onclick="document.id('filter_search').value='';this.form.submit();">				<?php echo JText::_('JSEARCH_FILTER_CLEAR'); ?></button>		</div>		<div class="filter-select">			<label class="selectlabel" for="filter_state">				<?php echo JText::_('JOPTION_SELECT_PUBLISHED'); ?>			</label>			<select name="filter_state" class="inputbox" id="filter_state">				<option value=""><?php echo JText::_('JOPTION_SELECT_PUBLISHED');?></option>				<?php echo JHtml::_('select.options', JHtml::_('modules.templateStates'), 'value', 'text', $state, true);?>			</select>			<label class="selectlabel" for="filter_type">				<?php echo JText::_('COM_MODULES_OPTION_SELECT_TYPE'); ?>			</label>			<select name="filter_type" class="inputbox" id="filter_type">				<option value=""><?php echo JText::_('COM_MODULES_OPTION_SELECT_TYPE');?></option>				<?php echo JHtml::_('select.options', JHtml::_('modules.types'), 'value', 'text', $type, true);?>			</select>			<label class="selectlabel" for="filter_template">				<?php echo JText::_('JOPTION_SELECT_TEMPLATE'); ?>			</label>			<select name="filter_template" class="inputbox" id="filter_template">				<option value=""><?php echo JText::_('JOPTION_SELECT_TEMPLATE');?></option>				<?php echo JHtml::_('select.options', JHtml::_('modules.templates', $clientId), 'value', 'text', $template, true);?>			</select>			<button type="submit" id="filter-go">				<?php echo JText::_('JSUBMIT'); ?></button>		</div>	</fieldset>	<table class="adminlist">		<thead>			<tr>				<th class="title width-20">					<?php echo JHtml::_('grid.sort', 'JGLOBAL_TITLE', 'value', $direction, $ordering); ?>				</th>				<th>					<?php echo JHtml::_('grid.sort', 'COM_MODULES_HEADING_TEMPLATES', 'templates', $direction, $ordering); ?>				</th>			</tr>		</thead>		<tbody>		<?php $i = 1; foreach ($this->items as $value => $templates) : ?>			<tr class="row<?php echo $i = 1 - $i;?>">				<td>					<a class="pointer" onclick="if (window.parent) window.parent.<?php echo $function;?>('<?php echo $value; ?>');"><?php echo $this->escape($value); ?></a>				</td>				<td>					<?php if (!empty($templates)):?>					<a class="pointer" onclick="if (window.parent) window.parent.<?php echo $function;?>('<?php echo $value; ?>');">						<ul>						<?php foreach ($templates as $template => $label):?>							<li><?php echo $lang->hasKey($label) ? JText::sprintf('COM_MODULES_MODULE_TEMPLATE_POSITION', JText::_($template), JText::_($label)) : JText::_($template);?></li>						<?php endforeach;?>						</ul>					</a>					<?php endif;?>				</td>			</tr>			<?php endforeach; ?>		</tbody>	</table>	<?php echo $this->pagination->getListFooter(); ?>	<div>		<input type="hidden" name="task" value="" />		<input type="hidden" name="boxchecked" value="0" />		<input type="hidden" name="filter_order" value="<?php echo $ordering; ?>" />		<input type="hidden" name="filter_order_Dir" value="<?php echo $direction; ?>" />		<?php echo JHtml::_('form.token'); ?>	</div></form>
<?php/** * @package     Joomla.Administrator * @subpackage  mod_logged * * @copyright   Copyright (C) 2005 - 2013 Open Source Matters, Inc. All rights reserved. * @license     GNU General Public License version 2 or later; see LICENSE.txt */defined('_JEXEC') or die;/** * Helper for mod_logged * * @package     Joomla.Administrator * @subpackage  mod_logged * @since       1.5 */abstract class ModLoggedHelper{	/**	 * Get a list of logged users.	 *	 * @param   JRegistry  $params  The module parameters.	 *	 * @return  mixed  An array of users, or false on error.	 */	public static function getList($params)	{		$db    = JFactory::getDbo();		$user  = JFactory::getUser();		$query = $db->getQuery(true)			->select('s.time, s.client_id, u.id, u.name, u.username')			->from('#__session AS s')			->join('LEFT', '#__users AS u ON s.userid = u.id')			->where('s.guest = 0');		$db->setQuery($query, 0, $params->get('count', 5));		try		{			$results = $db->loadObjectList();		}		catch (RuntimeException $e)		{			throw new RuntimeException($e->getMessage());			return false;		}		foreach ($results as $k => $result)		{			$results[$k]->logoutLink = '';			if ($user->authorise('core.manage', 'com_users'))			{				$results[$k]->editLink   = JRoute::_('index.php?option=com_users&task=user.edit&id=' . $result->id);				$results[$k]->logoutLink = JRoute::_('index.php?option=com_login&task=logout&uid=' . $result->id . '&' . JSession::getFormToken() . '=1');			}			if ($params->get('name', 1) == 0)			{				$results[$k]->name = $results[$k]->username;			}		}		return $results;	}	/**	 * Get the alternate title for the module	 *	 * @param   JRegistry  $params  The module parameters.	 *	 * @return  string    The alternate title for the module.	 */	public static function getTitle($params)	{		return JText::plural('MOD_LOGGED_TITLE', $params->get('count'));	}}
<?php/** * @package     Joomla.Site * @subpackage  mod_login * * @copyright   Copyright (C) 2005 - 2013 Open Source Matters, Inc. All rights reserved. * @license     GNU General Public License version 2 or later; see LICENSE.txt */defined('_JEXEC') or die;/** * Helper for mod_login * * @package     Joomla.Site * @subpackage  mod_login * @since       1.5 */class ModLoginHelper{	public static function getReturnURL($params, $type)	{		$app	= JFactory::getApplication();		$router = $app->getRouter();		$url = null;		if ($itemid = $params->get($type))		{			$db		= JFactory::getDbo();			$query	= $db->getQuery(true)				->select($db->quoteName('link'))				->from($db->quoteName('#__menu'))				->where($db->quoteName('published') . '=1')				->where($db->quoteName('id') . '=' . $db->quote($itemid));			$db->setQuery($query);			if ($link = $db->loadResult())			{				if ($router->getMode() == JROUTER_MODE_SEF)				{					$url = 'index.php?Itemid='.$itemid;				}				else {					$url = $link.'&Itemid='.$itemid;				}			}		}		if (!$url)		{			// Stay on the same page			$uri = clone JURI::getInstance();			$vars = $router->parse($uri);			unset($vars['lang']);			if ($router->getMode() == JROUTER_MODE_SEF)			{				if (isset($vars['Itemid']))				{					$itemid = $vars['Itemid'];					$menu = $app->getMenu();					$item = $menu->getItem($itemid);					unset($vars['Itemid']);					if (isset($item) && $vars == $item->query)					{						$url = 'index.php?Itemid='.$itemid;					}					else {						$url = 'index.php?'.JURI::buildQuery($vars).'&Itemid='.$itemid;					}				}				else				{					$url = 'index.php?'.JURI::buildQuery($vars);				}			}			else			{				$url = 'index.php?'.JURI::buildQuery($vars);			}		}		return base64_encode($url);	}	public static function getType()	{		$user = JFactory::getUser();		return (!$user->get('guest')) ? 'logout' : 'login';	}}
<?php/** * @package     Joomla.Administrator * @subpackage  com_categories * * @copyright   Copyright (C) 2005 - 2013 Open Source Matters, Inc. All rights reserved. * @license     GNU General Public License version 2 or later; see LICENSE.txt */defined('_JEXEC') or die;/** * HTML View class for the Categories component * * @package     Joomla.Administrator * @subpackage  com_categories * @since       1.6 */class CategoriesViewCategory extends JViewLegacy{	protected $form;	protected $item;	protected $state;	protected $assoc;	/**	 * Display the view	 */	public function display($tpl = null)	{		$this->form  = $this->get('Form');		$this->item  = $this->get('Item');		$this->state = $this->get('State');		$this->canDo = CategoriesHelper::getActions($this->state->get('category.component'));		$this->assoc = $this->get('Assoc');		$input = JFactory::getApplication()->input;		// Check for errors.		if (count($errors = $this->get('Errors')))		{			JError::raiseError(500, implode("\n", $errors));			return false;		}		$input->set('hidemainmenu', true);		$this->addToolbar();		parent::display($tpl);	}	/**	 * Add the page title and toolbar.	 *	 * @since   1.6	 */	protected function addToolbar()	{		$input      = JFactory::getApplication()->input;		$extension	= $input->get('extension');		$user		= JFactory::getUser();		$userId		= $user->get('id');		$isNew		= ($this->item->id == 0);		$checkedOut	= !($this->item->checked_out == 0 || $this->item->checked_out == $userId);		// Avoid nonsense situation.		if ($extension == 'com_categories')		{			return;		}		// The extension can be in the form com_foo.section		$parts = explode('.', $extension);		$component = $parts[0];		$section = (count($parts) > 1) ? $parts[1] : null;		// Need to load the menu language file as mod_menu hasn't been loaded yet.		$lang = JFactory::getLanguage();			$lang->load($component, JPATH_BASE, null, false, false)		||	$lang->load($component, JPATH_ADMINISTRATOR.'/components/'.$component, null, false, false)		||	$lang->load($component, JPATH_BASE, $lang->getDefault(), false, false)		||	$lang->load($component, JPATH_ADMINISTRATOR.'/components/'.$component, $lang->getDefault(), false, false);		// Load the category helper.		require_once JPATH_COMPONENT.'/helpers/categories.php';		// Get the results for each action.		$canDo = CategoriesHelper::getActions($component, $this->item->id);		// If a component categories title string is present, let's use it.		if ($lang->hasKey($component_title_key = $component.($section?"_$section":'').'_CATEGORY_'.($isNew?'ADD':'EDIT').'_TITLE'))		{			$title = JText::_($component_title_key);		}		// Else if the component section string exits, let's use it		elseif ($lang->hasKey($component_section_key = $component.($section?"_$section":'')))		{			$title = JText::sprintf('COM_CATEGORIES_CATEGORY_'.($isNew?'ADD':'EDIT').'_TITLE', $this->escape(JText::_($component_section_key)));		}		// Else use the base title		else {			$title = JText::_('COM_CATEGORIES_CATEGORY_BASE_'.($isNew?'ADD':'EDIT').'_TITLE');		}		// Load specific css component		JHtml::_('stylesheet', $component.'/administrator/categories.css', array(), true);		// Prepare the toolbar.		JToolbarHelper::title($title, 'category-'.($isNew?'add':'edit').' '.substr($component, 4).($section?"-$section":'').'-category-'.($isNew?'add':'edit'));		// For new records, check the create permission.		if ($isNew && (count($user->getAuthorisedCategories($component, 'core.create')) > 0))		{			JToolbarHelper::apply('category.apply');			JToolbarHelper::save('category.save');			JToolbarHelper::save2new('category.save2new');		}		// If not checked out, can save the item.		elseif (!$checkedOut && ($canDo->get('core.edit') || ($canDo->get('core.edit.own') && $this->item->created_user_id == $userId)))		{			JToolbarHelper::apply('category.apply');			JToolbarHelper::save('category.save');			if ($canDo->get('core.create'))			{				JToolbarHelper::save2new('category.save2new');			}		}		// If an existing item, can save to a copy.		if (!$isNew && $canDo->get('core.create'))		{			JToolbarHelper::save2copy('category.save2copy');		}		if (empty($this->item->id))		{			JToolbarHelper::cancel('category.cancel');		}		else		{			JToolbarHelper::cancel('category.cancel', 'JTOOLBAR_CLOSE');		}		JToolbarHelper::divider();		// Compute the ref_key if it does exist in the component		if (!$lang->hasKey($ref_key = strtoupper($component.($section?"_$section":'')).'_CATEGORY_'.($isNew?'ADD':'EDIT').'_HELP_KEY'))		{			$ref_key = 'JHELP_COMPONENTS_'.strtoupper(substr($component, 4).($section?"_$section":'')).'_CATEGORY_'.($isNew?'ADD':'EDIT');		}		// Get help for the category/section view for the component by		// -remotely searching in a language defined dedicated URL: *component*_HELP_URL		// -locally  searching in a component help file if helpURL param exists in the component and is set to ''		// -remotely searching in a component URL if helpURL param exists in the component and is NOT set to ''		if ($lang->hasKey($lang_help_url = strtoupper($component).'_HELP_URL'))		{			$debug = $lang->setDebug(false);			$url = JText::_($lang_help_url);			$lang->setDebug($debug);		}		else		{			$url = null;		}		JToolbarHelper::help($ref_key, JComponentHelper::getParams($component)->exists('helpURL'), $url, $component);	}}
<?php/** * @package     Joomla.Administrator * @subpackage  com_tags * * @copyright   Copyright (C) 2005 - 2013 Open Source Matters, Inc. All rights reserved. * @license     GNU General Public License version 2 or later; see LICENSE.txt */defined('_JEXEC') or die;/** * Tags Component Tag Model * * @package     Joomla.Administrator * @subpackage  com_tags * @since       3.1 */class TagsModelTag extends JModelAdmin{	/**	 * @var    string  The prefix to use with controller messages.	 * @since  3.1	 */	protected $text_prefix = 'COM_TAGS';	/**	 * Method to test whether a record can be deleted.	 *	 * @param   object  $record  A record object.	 *	 * @return  boolean  True if allowed to delete the record. Defaults to the permission set in the component.	 *	 * @since   3.1	 */	protected function canDelete($record)	{		if (!empty($record->id))		{			if ($record->published != -2)			{				return;			}			$user = JFactory::getUser();			return parent::canDelete($record);		}	}	/**	 * Method to test whether a record can have its state changed.	 *	 * @param   object  $record  A record object.	 *	 * @return  boolean  True if allowed to change the state of the record. Defaults to the permission set in the component.	 *	 * @since   3.1	 */	protected function canEditState($record)	{		$user = JFactory::getUser();		return parent::canEditState($record);	}	/**	 * Method to get a table object, load it if necessary.	 *	 * @param   string  $type    The table name. Optional.	 * @param   string  $prefix  The class prefix. Optional.	 * @param   array   $config  Configuration array for model. Optional.	 *	 * @return  JTable  A JTable object	 *	 * @since   3.1	*/	public function getTable($type = 'Tag', $prefix = 'TagsTable', $config = array())	{		return JTable::getInstance($type, $prefix, $config);	}	/**	 * Auto-populate the model state.	 *	 * Note. Calling getState in this method will result in recursion.	 *	 * @return  void	 *	 * @since   3.1	 */	protected function populateState()	{		$app = JFactory::getApplication('administrator');		$parentId = $app->input->getInt('parent_id');		$this->setState('tag.parent_id', $parentId);		// Load the User state.		$pk = $app->input->getInt('id');		$this->setState($this->getName() . '.id', $pk);		// Load the parameters.		$params = JComponentHelper::getParams('com_tags');		$this->setState('params', $params);	}	/**	 * Method to get a tag.	 *	 * @param   integer  $pk  An optional id of the object to get, otherwise the id from the model state is used.	 *	 * @return  mixed  Tag data object on success, false on failure.	 *	 * @since   3.1	 */	public function getItem($pk = null)	{		if ($result = parent::getItem($pk))		{			// Prime required properties.			if (empty($result->id))			{				$result->parent_id = $this->getState('tag.parent_id');			}			// Convert the metadata field to an array.			$registry = new JRegistry;			$registry->loadString($result->metadata);			$result->metadata = $registry->toArray();			// Convert the images field to an array.			$registry = new JRegistry;			$registry->loadString($result->images);			$result->images = $registry->toArray();			// Convert the urls field to an array.			$registry = new JRegistry;			$registry->loadString($result->urls);			$result->urls = $registry->toArray();			// Convert the created and modified dates to local user time for display in the form.			$tz = new DateTimeZone(JFactory::getApplication()->getCfg('offset'));			if ((int) $result->created_time)			{				$date = new JDate($result->created_time);				$date->setTimezone($tz);				$result->created_time = $date->toSql(true);			}			else			{				$result->created_time = null;			}			if ((int) $result->modified_time)			{				$date = new JDate($result->modified_time);				$date->setTimezone($tz);				$result->modified_time = $date->toSql(true);			}			else			{				$result->modified_time = null;			}		}		return $result;	}	/**	 * Method to get the row form.	 *	 * @param   array    $data      Data for the form.	 * @param   boolean  $loadData  True if the form is to load its own data (default case), false if not.	 *	 * @return  mixed  A JForm object on success, false on failure	 *	 * @since   3.1	 */	public function getForm($data = array(), $loadData = true)	{		$extension = $this->getState('tag');		$jinput = JFactory::getApplication()->input;		// Get the form.		$form = $this->loadForm('com_tags.tag', 'tag', array('control' => 'jform', 'load_data' => $loadData));		if (empty($form))		{			return false;		}		$user = JFactory::getUser();		if (!$user->authorise('core.edit.state', 'com_tags' . $jinput->get('id')))		{			// Disable fields for display.			$form->setFieldAttribute('ordering', 'disabled', 'true');			$form->setFieldAttribute('published', 'disabled', 'true');			// Disable fields while saving.			// The controller has already verified this is a record you can edit.			$form->setFieldAttribute('ordering', 'filter', 'unset');			$form->setFieldAttribute('published', 'filter', 'unset');		}		return $form;	}	/**	 * Method to get the data that should be injected in the form.	 *	 * @return  mixed  The data for the form.	 *	 * @since   3.1	 */	protected function loadFormData()	{		// Check the session for previously entered form data.		$data = JFactory::getApplication()->getUserState('com_tags.edit.tag.data', array());		if (empty($data))		{			$data = $this->getItem();		}		$this->preprocessData('com_tags.tag', $data);		return $data;	}	/**	 * Method to preprocess the form.	 *	 * @param   JForm   $form    A JForm object.	 * @param   mixed   $data    The data expected for the form.	 * @param   string  $group  The name of the plugin group to import.	 *	 * @return  void	 *	 * @see     JFormField	 * @since   3.1	 * @throws  Exception if there is an error in the form event.	 */	protected function preprocessForm(JForm $form, $data, $group = 'content')	{		// Trigger the default form events.		parent::preprocessForm($form, $data, $group);	}	/**	 * Method to save the form data.	 *	 * @param   array  $data  The form data.	 *	 * @return  boolean  True on success.	 *	 * @since   3.1	 */	public function save($data)	{		$dispatcher = JEventDispatcher::getInstance();		$table = $this->getTable();		$input = JFactory::getApplication()->input;		$pk = (!empty($data['id'])) ? $data['id'] : (int) $this->getState($this->getName() . '.id');		$isNew = true;		// Include the content plugins for the on save events.		JPluginHelper::importPlugin('content');		// Load the row if saving an existing tag.		if ($pk > 0)		{			$table->load($pk);			$isNew = false;		}		// Set the new parent id if parent id not matched OR while New/Save as Copy .		if ($table->parent_id != $data['parent_id'] || $data['id'] == 0)		{			$table->setLocation($data['parent_id'], 'last-child');		}		if (isset($data['images']) && is_array($data['images']))		{			$registry = new JRegistry;			$registry->loadArray($data['images']);			$data['images'] = (string) $registry;		}		if (isset($data['urls']) && is_array($data['urls']))		{			$registry = new JRegistry;			$registry->loadArray($data['urls']);			$data['urls'] = (string) $registry;		}		// Alter the title for save as copy		if ($input->get('task') == 'save2copy')		{			list($title, $alias) = $this->generateNewTitle($data['parent_id'], $data['alias'], $data['title']);			$data['title'] = $title;			$data['alias'] = $alias;		}		// Bind the data.		if (!$table->bind($data))		{			$this->setError($table->getError());			return false;		}		// Bind the rules.		if (isset($data['rules']))		{			$rules = new JAccessRules($data['rules']);			$table->setRules($rules);		}		// Check the data.		if (!$table->check())		{			$this->setError($table->getError());			return false;		}		// Trigger the onContentBeforeSave event.		$result = $dispatcher->trigger($this->event_before_save, array($this->option . '.' . $this->name, &$table, $isNew));		if (in_array(false, $result, true))		{			$this->setError($table->getError());			return false;		}		// Store the data.		if (!$table->store())		{			$this->setError($table->getError());			return false;		}		// Trigger the onContentAfterSave event.		$dispatcher->trigger($this->event_after_save, array($this->option . '.' . $this->name, &$table, $isNew));		// Rebuild the path for the tag:		if (!$table->rebuildPath($table->id))		{			$this->setError($table->getError());			return false;		}		// Rebuild the paths of the tag's children:		if (!$table->rebuild($table->id, $table->lft, $table->level, $table->path))		{			$this->setError($table->getError());			return false;		}		$this->setState($this->getName() . '.id', $table->id);		// Clear the cache		$this->cleanCache();		return true;	}	/**	 * Method rebuild the entire nested set tree.	 *	 * @return  boolean  False on failure or error, true otherwise.	 *	 * @since   3.1	 */	public function rebuild()	{		// Get an instance of the table object.		$table = $this->getTable();		if (!$table->rebuild())		{			$this->setError($table->getError());			return false;		}		// Clear the cache		$this->cleanCache();		return true;	}	/**	 * Method to save the reordered nested set tree.	 * First we save the new order values in the lft values of the changed ids.	 * Then we invoke the table rebuild to implement the new ordering.	 *	 * @param   array    $idArray    An array of primary key ids.	 * @param   integer  $lft_array  The lft value	 *	 * @return  boolean  False on failure or error, True otherwise	 *	 * @since   3.1	*/	public function saveorder($idArray = null, $lft_array = null)	{		// Get an instance of the table object.		$table = $this->getTable();		if (!$table->saveorder($idArray, $lft_array))		{			$this->setError($table->getError());			return false;		}		// Clear the cache		$this->cleanCache();		return true;	}	/**	 * Method to change the title & alias.	 *	 * @param   integer  $parent_id  The id of the parent.	 * @param   string   $alias      The alias.	 * @param   string   $title      The title.	 *	 * @return  array  Contains the modified title and alias.	 *	 * @since   3.1	 */	protected function generateNewTitle($parent_id, $alias, $title)	{		// Alter the title & alias		$table = $this->getTable();		while ($table->load(array('alias' => $alias, 'parent_id' => $parent_id)))		{			$title = ($table->title != $title) ? $title : JString::increment($title);			$alias = JString::increment($alias, 'dash');		}		return array($title, $alias);	}}
<?php/** * @package     Joomla.Platform * @subpackage  Database * * @copyright   Copyright (C) 2005 - 2013 Open Source Matters, Inc. All rights reserved. * @license     GNU General Public License version 2 or later; see LICENSE */defined('JPATH_PLATFORM') or die;/** * MySQLi database driver * * @package     Joomla.Platform * @subpackage  Database * @see         http://php.net/manual/en/book.mysqli.php * @since       12.1 */class JDatabaseDriverMysqli extends JDatabaseDriver{	/**	 * The name of the database driver.	 *	 * @var    string	 * @since  12.1	 */	public $name = 'mysqli';	/**	 * The character(s) used to quote SQL statement names such as table names or field names,	 * etc. The child classes should define this as necessary.  If a single character string the	 * same character is used for both sides of the quoted name, else the first character will be	 * used for the opening quote and the second for the closing quote.	 *	 * @var    string	 * @since  12.2	 */	protected $nameQuote = '`';	/**	 * The null or zero representation of a timestamp for the database driver.  This should be	 * defined in child classes to hold the appropriate value for the engine.	 *	 * @var    string	 * @since  12.2	 */	protected $nullDate = '0000-00-00 00:00:00';	/**	 * @var    string  The minimum supported database version.	 * @since  12.2	 */	protected static $dbMinimum = '5.0.4';	/**	 * Constructor.	 *	 * @param   array  $options  List of options used to configure the connection	 *	 * @since   12.1	 */	public function __construct($options)	{		// Get some basic values from the options.		$options['host'] = (isset($options['host'])) ? $options['host'] : 'localhost';		$options['user'] = (isset($options['user'])) ? $options['user'] : 'root';		$options['password'] = (isset($options['password'])) ? $options['password'] : '';		$options['database'] = (isset($options['database'])) ? $options['database'] : '';		$options['select'] = (isset($options['select'])) ? (bool) $options['select'] : true;		$options['port'] = null;		$options['socket'] = null;		// Finalize initialisation.		parent::__construct($options);	}	/**	 * Destructor.	 *	 * @since   12.1	 */	public function __destruct()	{		if (is_callable(array($this->connection, 'close')))		{			mysqli_close($this->connection);		}	}	/**	 * Connects to the database if needed.	 *	 * @return  void  Returns void if the database connected successfully.	 *	 * @since   12.1	 * @throws  RuntimeException	 */	public function connect()	{		if ($this->connection)		{			return;		}		/*		 * Unlike mysql_connect(), mysqli_connect() takes the port and socket as separate arguments. Therefore, we		 * have to extract them from the host string.		 */		$tmp = substr(strstr($this->options['host'], ':'), 1);		if (!empty($tmp))		{			// Get the port number or socket name			if (is_numeric($tmp))			{				$this->options['port'] = $tmp;			}			else			{				$this->options['socket'] = $tmp;			}			// Extract the host name only			$this->options['host'] = substr($this->options['host'], 0, strlen($this->options['host']) - (strlen($tmp) + 1));			// This will take care of the following notation: ":3306"			if ($this->options['host'] == '')			{				$this->options['host'] = 'localhost';			}		}		// Make sure the MySQLi extension for PHP is installed and enabled.		if (!function_exists('mysqli_connect'))		{			throw new RuntimeException('The MySQL adapter mysqli is not available');		}		$this->connection = @mysqli_connect(			$this->options['host'], $this->options['user'], $this->options['password'], null, $this->options['port'], $this->options['socket']		);		// Attempt to connect to the server.		if (!$this->connection)		{			throw new RuntimeException('Could not connect to MySQL.');		}		// Set sql_mode to non_strict mode		mysqli_query($this->connection, "SET @@SESSION.sql_mode = '';");		// If auto-select is enabled select the given database.		if ($this->options['select'] && !empty($this->options['database']))		{			$this->select($this->options['database']);		}		// Set charactersets (needed for MySQL 4.1.2+).		$this->setUTF();	}	/**	 * Disconnects the database.	 *	 * @return  void	 *	 * @since   12.1	 */	public function disconnect()	{		// Close the connection.		if (is_callable($this->connection, 'close'))		{			mysqli_close($this->connection);		}		$this->connection = null;	}	/**	 * Method to escape a string for usage in an SQL statement.	 *	 * @param   string   $text   The string to be escaped.	 * @param   boolean  $extra  Optional parameter to provide extra escaping.	 *	 * @return  string  The escaped string.	 *	 * @since   12.1	 */	public function escape($text, $extra = false)	{		$this->connect();		$result = mysqli_real_escape_string($this->getConnection(), $text);		if ($extra)		{			$result = addcslashes($result, '%_');		}		return $result;	}	/**	 * Test to see if the MySQL connector is available.	 *	 * @return  boolean  True on success, false otherwise.	 *	 * @since   12.1	 */	public static function isSupported()	{		return (function_exists('mysqli_connect'));	}	/**	 * Determines if the connection to the server is active.	 *	 * @return  boolean  True if connected to the database engine.	 *	 * @since   12.1	 */	public function connected()	{		if (is_object($this->connection))		{			return mysqli_ping($this->connection);		}		return false;	}	/**	 * Drops a table from the database.	 *	 * @param   string   $tableName  The name of the database table to drop.	 * @param   boolean  $ifExists   Optionally specify that the table must exist before it is dropped.	 *	 * @return  JDatabaseDriverMysqli  Returns this object to support chaining.	 *	 * @since   12.2	 * @throws  RuntimeException	 */	public function dropTable($tableName, $ifExists = true)	{		$this->connect();		$query = $this->getQuery(true);		$this->setQuery('DROP TABLE ' . ($ifExists ? 'IF EXISTS ' : '') . $query->quoteName($tableName));		$this->execute();		return $this;	}	/**	 * Get the number of affected rows for the previous executed SQL statement.	 *	 * @return  integer  The number of affected rows.	 *	 * @since   12.1	 */	public function getAffectedRows()	{		$this->connect();		return mysqli_affected_rows($this->connection);	}	/**	 * Method to get the database collation in use by sampling a text field of a table in the database.	 *	 * @return  mixed  The collation in use by the database (string) or boolean false if not supported.	 *	 * @since   12.2	 * @throws  RuntimeException	 */	public function getCollation()	{		$this->connect();		$this->setQuery('SHOW FULL COLUMNS FROM #__users');		$array = $this->loadAssocList();		return $array['2']['Collation'];	}	/**	 * Get the number of returned rows for the previous executed SQL statement.	 *	 * @param   resource  $cursor  An optional database cursor resource to extract the row count from.	 *	 * @return  integer   The number of returned rows.	 *	 * @since   12.1	 */	public function getNumRows($cursor = null)	{		return mysqli_num_rows($cursor ? $cursor : $this->cursor);	}	/**	 * Shows the table CREATE statement that creates the given tables.	 *	 * @param   mixed  $tables  A table name or a list of table names.	 *	 * @return  array  A list of the create SQL for the tables.	 *	 * @since   12.1	 * @throws  RuntimeException	 */	public function getTableCreate($tables)	{		$this->connect();		$result = array();		// Sanitize input to an array and iterate over the list.		settype($tables, 'array');		foreach ($tables as $table)		{			// Set the query to get the table CREATE statement.			$this->setQuery('SHOW CREATE table ' . $this->quoteName($this->escape($table)));			$row = $this->loadRow();			// Populate the result array based on the create statements.			$result[$table] = $row[1];		}		return $result;	}	/**	 * Retrieves field information about a given table.	 *	 * @param   string   $table     The name of the database table.	 * @param   boolean  $typeOnly  True to only return field types.	 *	 * @return  array  An array of fields for the database table.	 *	 * @since   12.2	 * @throws  RuntimeException	 */	public function getTableColumns($table, $typeOnly = true)	{		$this->connect();		$result = array();		// Set the query to get the table fields statement.		$this->setQuery('SHOW FULL COLUMNS FROM ' . $this->quoteName($this->escape($table)));		$fields = $this->loadObjectList();		// If we only want the type as the value add just that to the list.		if ($typeOnly)		{			foreach ($fields as $field)			{				$result[$field->Field] = preg_replace("/[(0-9)]/", '', $field->Type);			}		}		// If we want the whole field data object add that to the list.		else		{			foreach ($fields as $field)			{				$result[$field->Field] = $field;			}		}		return $result;	}	/**	 * Get the details list of keys for a table.	 *	 * @param   string  $table  The name of the table.	 *	 * @return  array  An array of the column specification for the table.	 *	 * @since   12.2	 * @throws  RuntimeException	 */	public function getTableKeys($table)	{		$this->connect();		// Get the details columns information.		$this->setQuery('SHOW KEYS FROM ' . $this->quoteName($table));		$keys = $this->loadObjectList();		return $keys;	}	/**	 * Method to get an array of all tables in the database.	 *	 * @return  array  An array of all the tables in the database.	 *	 * @since   12.2	 * @throws  RuntimeException	 */	public function getTableList()	{		$this->connect();		// Set the query to get the tables statement.		$this->setQuery('SHOW TABLES');		$tables = $this->loadColumn();		return $tables;	}	/**	 * Get the version of the database connector.	 *	 * @return  string  The database connector version.	 *	 * @since   12.1	 */	public function getVersion()	{		$this->connect();		return mysqli_get_server_info($this->connection);	}	/**	 * Method to get the auto-incremented value from the last INSERT statement.	 *	 * @return  integer  The value of the auto-increment field from the last inserted row.	 *	 * @since   12.1	 */	public function insertid()	{		$this->connect();		return mysqli_insert_id($this->connection);	}	/**	 * Locks a table in the database.	 *	 * @param   string  $table  The name of the table to unlock.	 *	 * @return  JDatabaseDriverMysqli  Returns this object to support chaining.	 *	 * @since   12.2	 * @throws  RuntimeException	 */	public function lockTable($table)	{		$this->setQuery('LOCK TABLES ' . $this->quoteName($table) . ' WRITE')->execute();		return $this;	}	/**	 * Execute the SQL statement.	 *	 * @return  mixed  A database cursor resource on success, boolean false on failure.	 *	 * @since   12.1	 * @throws  RuntimeException	 */	public function execute()	{		$this->connect();		if (!is_object($this->connection))		{			JLog::add(JText::sprintf('JLIB_DATABASE_QUERY_FAILED', $this->errorNum, $this->errorMsg), JLog::ERROR, 'database');			throw new RuntimeException($this->errorMsg, $this->errorNum);		}		// Take a local copy so that we don't modify the original query and cause issues later		$query = $this->replacePrefix((string) $this->sql);		if ($this->limit > 0 || $this->offset > 0)		{			$query .= ' LIMIT ' . $this->offset . ', ' . $this->limit;		}		// Increment the query counter.		$this->count++;		// If debugging is enabled then let's log the query.		if ($this->debug)		{			// Add the query to the object queue.			$this->log[] = $query;			JLog::add($query, JLog::DEBUG, 'databasequery');		}		// Reset the error values.		$this->errorNum = 0;		$this->errorMsg = '';		// Execute the query. Error suppression is used here to prevent warnings/notices that the connection has been lost.		$this->cursor = @mysqli_query($this->connection, $query);		// If an error occurred handle it.		if (!$this->cursor)		{			$this->errorNum = (int) mysqli_errno($this->connection);			$this->errorMsg = (string) mysqli_error($this->connection) . ' SQL=' . $query;			// Check if the server was disconnected.			if (!$this->connected())			{				try				{					// Attempt to reconnect.					$this->connection = null;					$this->connect();				}				// If connect fails, ignore that exception and throw the normal exception.				catch (RuntimeException $e)				{					JLog::add(JText::sprintf('JLIB_DATABASE_QUERY_FAILED', $this->errorNum, $this->errorMsg), JLog::ERROR, 'databasequery');					throw new RuntimeException($this->errorMsg, $this->errorNum);				}				// Since we were able to reconnect, run the query again.				return $this->execute();			}			// The server was not disconnected.			else			{				JLog::add(JText::sprintf('JLIB_DATABASE_QUERY_FAILED', $this->errorNum, $this->errorMsg), JLog::ERROR, 'databasequery');				throw new RuntimeException($this->errorMsg, $this->errorNum);			}		}		return $this->cursor;	}	/**	 * Renames a table in the database.	 *	 * @param   string  $oldTable  The name of the table to be renamed	 * @param   string  $newTable  The new name for the table.	 * @param   string  $backup    Not used by MySQL.	 * @param   string  $prefix    Not used by MySQL.	 *	 * @return  JDatabaseDriverMysqli  Returns this object to support chaining.	 *	 * @since   12.2	 * @throws  RuntimeException	 */	public function renameTable($oldTable, $newTable, $backup = null, $prefix = null)	{		$this->setQuery('RENAME TABLE ' . $oldTable . ' TO ' . $newTable)->execute();		return $this;	}	/**	 * Select a database for use.	 *	 * @param   string  $database  The name of the database to select for use.	 *	 * @return  boolean  True if the database was successfully selected.	 *	 * @since   12.1	 * @throws  RuntimeException	 */	public function select($database)	{		$this->connect();		if (!$database)		{			return false;		}		if (!mysqli_select_db($this->connection, $database))		{			throw new RuntimeException('Could not connect to database.');		}		return true;	}	/**	 * Set the connection to use UTF-8 character encoding.	 *	 * @return  boolean  True on success.	 *	 * @since   12.1	 */	public function setUTF()	{		$this->connect();		return $this->connection->set_charset('utf8');	}	/**	 * Method to commit a transaction.	 *	 * @return  void	 *	 * @since   12.2	 * @throws  RuntimeException	 */	public function transactionCommit()	{		$this->connect();		$this->setQuery('COMMIT');		$this->execute();	}	/**	 * Method to roll back a transaction.	 *	 * @return  void	 *	 * @since   12.2	 * @throws  RuntimeException	 */	public function transactionRollback()	{		$this->connect();		$this->setQuery('ROLLBACK');		$this->execute();	}	/**	 * Method to initialize a transaction.	 *	 * @return  void	 *	 * @since   12.2	 * @throws  RuntimeException	 */	public function transactionStart()	{		$this->connect();		$this->setQuery('START TRANSACTION');		$this->execute();	}	/**	 * Method to fetch a row from the result set cursor as an array.	 *	 * @param   mixed  $cursor  The optional result set cursor from which to fetch the row.	 *	 * @return  mixed  Either the next row from the result set or false if there are no more rows.	 *	 * @since   12.1	 */	protected function fetchArray($cursor = null)	{		return mysqli_fetch_row($cursor ? $cursor : $this->cursor);	}	/**	 * Method to fetch a row from the result set cursor as an associative array.	 *	 * @param   mixed  $cursor  The optional result set cursor from which to fetch the row.	 *	 * @return  mixed  Either the next row from the result set or false if there are no more rows.	 *	 * @since   12.1	 */	protected function fetchAssoc($cursor = null)	{		return mysqli_fetch_assoc($cursor ? $cursor : $this->cursor);	}	/**	 * Method to fetch a row from the result set cursor as an object.	 *	 * @param   mixed   $cursor  The optional result set cursor from which to fetch the row.	 * @param   string  $class   The class name to use for the returned row object.	 *	 * @return  mixed   Either the next row from the result set or false if there are no more rows.	 *	 * @since   12.1	 */	protected function fetchObject($cursor = null, $class = 'stdClass')	{		return mysqli_fetch_object($cursor ? $cursor : $this->cursor, $class);	}	/**	 * Method to free up the memory used for the result set.	 *	 * @param   mixed  $cursor  The optional result set cursor from which to fetch the row.	 *	 * @return  void	 *	 * @since   12.1	 */	protected function freeResult($cursor = null)	{		mysqli_free_result($cursor ? $cursor : $this->cursor);	}	/**	 * Unlocks tables in the database.	 *	 * @return  JDatabaseDriverMysqli  Returns this object to support chaining.	 *	 * @since   12.1	 * @throws  RuntimeException	 */	public function unlockTables()	{		$this->setQuery('UNLOCK TABLES')->execute();		return $this;	}}
<?php/** * @package     Joomla.Site * @subpackage  mod_menu * * @copyright   Copyright (C) 2005 - 2013 Open Source Matters, Inc. All rights reserved. * @license     GNU General Public License version 2 or later; see LICENSE.txt */defined('_JEXEC') or die;/** * Helper for mod_menu * * @package     Joomla.Site * @subpackage  mod_menu * @since       1.5 */class ModMenuHelper{	/**	 * Get a list of the menu items.	 *	 * @param  JRegistry   $params  The module options.	 *	 * @return  array	 *	 * @since   1.5	 */	public static function getList(&$params)	{		$app = JFactory::getApplication();		$menu = $app->getMenu();		// Get active menu item		$base = self::getBase($params);		$user = JFactory::getUser();		$levels = $user->getAuthorisedViewLevels();		asort($levels);		$key = 'menu_items' . $params . implode(',', $levels) . '.' . $base->id;		$cache = JFactory::getCache('mod_menu', '');		if (!($items = $cache->get($key)))		{			$path    = $base->tree;			$start   = (int) $params->get('startLevel');			$end     = (int) $params->get('endLevel');			$showAll = $params->get('showAllChildren');			$items   = $menu->getItems('menutype', $params->get('menutype'));			$lastitem = 0;			if ($items)			{				foreach ($items as $i => $item)				{					if (($start && $start > $item->level)						|| ($end && $item->level > $end)						|| (!$showAll && $item->level > 1 && !in_array($item->parent_id, $path))						|| ($start > 1 && !in_array($item->tree[$start - 2], $path)))					{						unset($items[$i]);						continue;					}					$item->deeper     = false;					$item->shallower  = false;					$item->level_diff = 0;					if (isset($items[$lastitem]))					{						$items[$lastitem]->deeper     = ($item->level > $items[$lastitem]->level);						$items[$lastitem]->shallower  = ($item->level < $items[$lastitem]->level);						$items[$lastitem]->level_diff = ($items[$lastitem]->level - $item->level);					}					$item->parent = (boolean) $menu->getItems('parent_id', (int) $item->id, true);					$lastitem     = $i;					$item->active = false;					$item->flink  = $item->link;					// Reverted back for CMS version 2.5.6					switch ($item->type)					{						case 'separator':						case 'heading':							// No further action needed.							continue;						case 'url':							if ((strpos($item->link, 'index.php?') === 0) && (strpos($item->link, 'Itemid=') === false))							{								// If this is an internal Joomla link, ensure the Itemid is set.								$item->flink = $item->link . '&Itemid=' . $item->id;							}							break;						case 'alias':							// If this is an alias use the item id stored in the parameters to make the link.							$item->flink = 'index.php?Itemid=' . $item->params->get('aliasoptions');							break;						default:							$router = JSite::getRouter();							if ($router->getMode() == JROUTER_MODE_SEF)							{								$item->flink = 'index.php?Itemid=' . $item->id;							}							else							{								$item->flink .= '&Itemid=' . $item->id;							}							break;					}					if (strcasecmp(substr($item->flink, 0, 4), 'http') && (strpos($item->flink, 'index.php?') !== false))					{						$item->flink = JRoute::_($item->flink, true, $item->params->get('secure'));					}					else					{						$item->flink = JRoute::_($item->flink);					}					// We prevent the double encoding because for some reason the $item is shared for menu modules and we get double encoding					// when the cause of that is found the argument should be removed					$item->title        = htmlspecialchars($item->title, ENT_COMPAT, 'UTF-8', false);					$item->anchor_css   = htmlspecialchars($item->params->get('menu-anchor_css', ''), ENT_COMPAT, 'UTF-8', false);					$item->anchor_title = htmlspecialchars($item->params->get('menu-anchor_title', ''), ENT_COMPAT, 'UTF-8', false);					$item->menu_image   = $item->params->get('menu_image', '') ? htmlspecialchars($item->params->get('menu_image', ''), ENT_COMPAT, 'UTF-8', false) : '';				}				if (isset($items[$lastitem]))				{					$items[$lastitem]->deeper     = (($start?$start:1) > $items[$lastitem]->level);					$items[$lastitem]->shallower  = (($start?$start:1) < $items[$lastitem]->level);					$items[$lastitem]->level_diff = ($items[$lastitem]->level - ($start?$start:1));				}			}			$cache->store($items, $key);		}		return $items;	}	/**	 * Get base menu item.	 *	 * @param   JRegistry  $params  The module options.	 *	 * @return   object	 *	 * @since	3.0.2	 */	public static function getBase(&$params)	{		// Get base menu item from parameters		if ($params->get('base'))		{			$base = JFactory::getApplication()->getMenu()->getItem($params->get('base'));		}		else		{			$base = false;		}		// Use active menu item if no base found		if (!$base)		{			$base = self::getActive($params);		}		return $base;	}	/**	 * Get active menu item.	 *	 * @param   JRegistry  $params  The module options.	 *	 * @return  object	 *	 * @since	3.0.2	 */	public static function getActive(&$params)	{		$menu = JFactory::getApplication()->getMenu();		return $menu->getActive() ? $menu->getActive() : $menu->getDefault();	}}
<?php/** * @package     Joomla.Administrator * @subpackage  com_installer * * @copyright   Copyright (C) 2005 - 2013 Open Source Matters, Inc. All rights reserved. * @license     GNU General Public License version 2 or later; see LICENSE.txt */defined('_JEXEC') or die;/** * Installer Database Controller * * @package     Joomla.Administrator * @subpackage  com_installer * @since       2.5 */class InstallerControllerDatabase extends JControllerLegacy{	/**	 * Tries to fix missing database updates	 *	 * @return  void	 *	 * @since   2.5	 */	public function fix()	{		$model = $this->getModel('database');		$model->fix();		$this->setRedirect(JRoute::_('index.php?option=com_installer&view=database', false));	}}
<?php/** * @package     Joomla.Site * @subpackage  Templates.beez3 * * @copyright   Copyright (C) 2005 - 2013 Open Source Matters, Inc. All rights reserved. * @license     GNU General Public License version 2 or later; see LICENSE.txt */defined('_JEXEC') or die;$app = JFactory::getApplication();JHtml::addIncludePath(JPATH_COMPONENT.'/helpers/html');JHtml::_('behavior.tooltip');JHtml::_('behavior.framework');$n = count($this->items);$listOrder	= $this->escape($this->state->get('list.ordering'));$listDirn	= $this->escape($this->state->get('list.direction'));?><?php if (empty($this->items)) : ?>	<?php if ($this->params->get('show_no_articles', 1)) : ?>		<p><?php echo JText::_('COM_CONTENT_NO_ARTICLES'); ?></p>	<?php endif; ?><?php else : ?><form action="<?php echo htmlspecialchars(JUri::getInstance()->toString()); ?>" method="post" name="adminForm" id="adminForm">	<?php if ($this->params->get('filter_field') != 'hide') : ?>	<fieldset class="filters">		<legend class="hidelabeltxt">			<?php echo JText::_('JGLOBAL_FILTER_LABEL'); ?>		</legend>		<div class="filter-search">			<label class="filter-search-lbl" for="filter-search"><?php echo JText::_('COM_CONTENT_'.$this->params->get('filter_field').'_FILTER_LABEL').'&#160;'; ?></label>			<input type="text" name="filter-search" id="filter-search" value="<?php echo $this->escape($this->state->get('list.filter')); ?>" class="inputbox" onchange="document.adminForm.submit();" title="<?php echo JText::_('COM_CONTENT_FILTER_SEARCH_DESC'); ?>" />		</div>	<?php endif; ?>	<?php if ($this->params->get('show_pagination_limit')) : ?>		<div class="display-limit">			<?php echo JText::_('JGLOBAL_DISPLAY_NUM'); ?>&#160;			<?php echo $this->pagination->getLimitBox(); ?>		</div>	<?php endif; ?>	<?php if ($this->params->get('filter_field') != 'hide') :?>	</fieldset>	<?php endif; ?>	<div class="clr"></div>	<table class="category">		<?php if ($this->params->get('show_headings')) :?>		<thead>			<tr>				<th class="list-title" id="tableOrdering">					<?php echo JHtml::_('grid.sort', 'COM_CONTENT_HEADING_TITLE', 'a.title', $listDirn, $listOrder); ?>				</th>				<?php if ($date = $this->params->get('list_show_date')) : ?>				<th class="list-date" id="tableOrdering2">					<?php if ($date == "created") : ?>						<?php echo JHtml::_('grid.sort', 'COM_CONTENT_'.$date.'_DATE', 'a.created', $listDirn, $listOrder); ?>					<?php elseif ($date == "modified") : ?>						<?php echo JHtml::_('grid.sort', 'COM_CONTENT_'.$date.'_DATE', 'a.modified', $listDirn, $listOrder); ?>					<?php elseif ($date == "published") : ?>						<?php echo JHtml::_('grid.sort', 'COM_CONTENT_'.$date.'_DATE', 'a.publish_up', $listDirn, $listOrder); ?>					<?php endif; ?>				</th>				<?php endif; ?>				<?php if ($this->params->get('list_show_author', 1)) : ?>				<th class="list-author" id="tableOrdering3">					<?php echo JHtml::_('grid.sort', 'JAUTHOR', 'author', $listDirn, $listOrder); ?>				</th>				<?php endif; ?>				<?php if ($this->params->get('list_show_hits', 1)) : ?>				<th class="list-hits" id="tableOrdering4">					<?php echo JHtml::_('grid.sort', 'JGLOBAL_HITS', 'a.hits', $listDirn, $listOrder); ?>				</th>				<?php endif; ?>			</tr>		</thead>		<?php endif; ?>		<tbody>			<?php foreach ($this->items as $i => &$article) : ?>			<tr class="cat-list-row<?php echo $i % 2; ?>">				<?php if (in_array($article->access, $this->user->getAuthorisedViewLevels())) : ?>					<td class="list-title">						<a href="<?php echo JRoute::_(ContentHelperRoute::getArticleRoute($article->slug, $article->catid)); ?>">							<?php echo $this->escape($article->title); ?></a>					</td>					<?php if ($this->params->get('list_show_date')) : ?>					<td class="list-date">						<?php						echo JHtml::_(							'date', $article->displayDate, $this->escape(								$this->params->get('date_format', JText::_('DATE_FORMAT_LC3'))							)						); ?>					</td>					<?php endif; ?>					<?php if ($this->params->get('list_show_author', 1)) : ?>					<td class="list-author">						<?php if (!empty($article->author) || !empty($article->created_by_alias)) : ?>							<?php $author = $article->author ?>							<?php $author = ($article->created_by_alias ? $article->created_by_alias : $author);?>							<?php if (!empty($article->contactid ) &&  $this->params->get('link_author') == true):?>								<?php echo JHtml::_(										'link',										JRoute::_('index.php?option=com_contact&view=contact&id='.$article->contactid),										$author								); ?>							<?php else :?>								<?php echo JText::sprintf('COM_CONTENT_WRITTEN_BY', $author); ?>							<?php endif; ?>						<?php endif; ?>					</td>					<?php endif; ?>					<?php if ($this->params->get('list_show_hits', 1)) : ?>					<td class="list-hits">						<?php echo $article->hits; ?>					</td>					<?php endif; ?>				<?php else : ?>				<td>					<?php						echo $this->escape($article->title).' : ';						$menu		= JFactory::getApplication()->getMenu();						$active		= $menu->getActive();						$itemId		= $active->id;						$link = JRoute::_('index.php?option=com_users&view=login&Itemid='.$itemId);						$returnURL = JRoute::_(ContentHelperRoute::getArticleRoute($article->slug));						$fullURL = new JURI($link);						$fullURL->setVar('return', base64_encode($returnURL));					?>					<a href="<?php echo $fullURL; ?>" class="register">					<?php echo JText::_('COM_CONTENT_REGISTER_TO_READ_MORE'); ?></a>				</td>				<?php endif; ?>			</tr>			<?php endforeach; ?>		</tbody>	</table><?php endif; ?><?php // Code to add a link to submit an article. ?><?php if ($this->category->getParams()->get('access-create')) : ?>	<?php echo JHtml::_('icon.create', $this->category, $this->category->params, array(), true); ?><?php  endif; ?><?php // Add pagination links ?><?php if (!empty($this->items)) : ?>	<?php if (($this->params->def('show_pagination', 2) == 1  || ($this->params->get('show_pagination') == 2)) && ($this->pagination->pagesTotal > 1)) : ?>	<div class="pagination">		<?php if ($this->params->def('show_pagination_results', 1)) : ?>		 	<p class="counter">				<?php echo $this->pagination->getPagesCounter(); ?>			</p>		<?php  endif; ?>		<?php echo $this->pagination->getPagesLinks(); ?>	</div>	<?php endif; ?>	<div>		<input type="hidden" name="task" value="" />		<input type="hidden" name="filter_order" value="" />		<input type="hidden" name="filter_order_Dir" value="" />		<input type="hidden" name="limitstart" value="" />	</div></form><?php endif; ?>
<?php/** * @package     Joomla.Administrator * @subpackage  com_users * * @copyright   Copyright (C) 2005 - 2013 Open Source Matters, Inc. All rights reserved. * @license     GNU General Public License version 2 or later; see LICENSE.txt */defined('_JEXEC') or die;/** * User view level controller class. * * @package     Joomla.Administrator * @subpackage  com_users * @since       1.6 */class UsersControllerLevel extends JControllerForm{	/**	 * @var		string	The prefix to use with controller messages.	 * @since   1.6	 */	protected $text_prefix = 'COM_USERS_LEVEL';	/**	 * Method to check if you can save a new or existing record.	 *	 * Overrides JControllerForm::allowSave to check the core.admin permission.	 *	 * @param   array  An array of input data.	 * @param   string	The name of the key for the primary key.	 *	 * @return  boolean	 * @since   1.6	 */	protected function allowSave($data, $key = 'id')	{		return (JFactory::getUser()->authorise('core.admin', $this->option) && parent::allowSave($data, $key));	}	/**	 * Method to remove a record.	 */	public function delete()	{		// Check for request forgeries.		JSession::checkToken() or jexit(JText::_('JInvalid_Token'));		$user = JFactory::getUser();		$ids  = $this->input->get('cid', array(), 'array');		if (!JFactory::getUser()->authorise('core.admin', $this->option))		{			JError::raiseError(500, JText::_('JERROR_ALERTNOAUTHOR'));			jexit();		}		elseif (empty($ids))		{			JError::raiseWarning(500, JText::_('COM_USERS_NO_LEVELS_SELECTED'));		}		else		{			// Get the model.			$model = $this->getModel();			JArrayHelper::toInteger($ids);			// Remove the items.			if (!$model->delete($ids))			{				JError::raiseWarning(500, $model->getError());			}			else {				$this->setMessage(JText::plural('COM_USERS_N_LEVELS_DELETED', count($ids)));			}		}		$this->setRedirect('index.php?option=com_users&view=levels');	}}
<?php/** * @package     Joomla.Site * @subpackage  com_weblinks * * @copyright   Copyright (C) 2005 - 2013 Open Source Matters, Inc. All rights reserved. * @license     GNU General Public License version 2 or later; see LICENSE.txt */defined('_JEXEC') or die;/** * HTML Article View class for the Weblinks component * * @package     Joomla.Site * @subpackage  com_weblinks * @since       1.5 */class WeblinksViewForm extends JViewLegacy{	protected $form;	protected $item;	protected $return_page;	protected $state;	public function display($tpl = null)	{		$app		= JFactory::getApplication();		$user		= JFactory::getUser();		// Get model data.		$this->state		= $this->get('State');		$this->item			= $this->get('Item');		$this->form			= $this->get('Form');		$this->return_page	= $this->get('ReturnPage');		if (empty($this->item->id))		{			$authorised = ($user->authorise('core.create', 'com_weblinks') || (count($user->getAuthorisedCategories('com_weblinks', 'core.create'))));		}		else		{			$authorised = $user->authorise('core.edit', 'com_weblinks.weblink.'.$this->item->id);		}		if ($authorised !== true)		{			JError::raiseError(403, JText::_('JERROR_ALERTNOAUTHOR'));			return false;		}		if (!empty($this->item))		{			$this->form->bind($this->item);		}		// Check for errors.		if (count($errors = $this->get('Errors')))		{			JError::raiseWarning(500, implode("\n", $errors));			return false;		}		// Create a shortcut to the parameters.		$params	= &$this->state->params;		//Escape strings for HTML output		$this->pageclass_sfx = htmlspecialchars($params->get('pageclass_sfx'));		$this->params	= $params;		$this->user		= $user;		$this->_prepareDocument();		parent::display($tpl);	}	/**	 * Prepares the document	 */	protected function _prepareDocument()	{		$app	= JFactory::getApplication();		$menus	= $app->getMenu();		$title	= null;		// Because the application sets a default page title,		// we need to get it from the menu item itself		$menu = $menus->getActive();		if (empty($this->item->id))	{		$head = JText::_('COM_WEBLINKS_FORM_SUBMIT_WEBLINK');		}		else		{		$head = JText::_('COM_WEBLINKS_FORM_EDIT_WEBLINK');		}		if ($menu)		{			$this->params->def('page_heading', $this->params->get('page_title', $menu->title));		}		else		{			$this->params->def('page_heading', $head);		}		$title = $this->params->def('page_title', $head);		if ($app->getCfg('sitename_pagetitles', 0) == 1)		{			$title = JText::sprintf('JPAGETITLE', $app->getCfg('sitename'), $title);		}		elseif ($app->getCfg('sitename_pagetitles', 0) == 2)		{			$title = JText::sprintf('JPAGETITLE', $title, $app->getCfg('sitename'));		}		$this->document->setTitle($title);		if ($this->params->get('menu-meta_description'))		{			$this->document->setDescription($this->params->get('menu-meta_description'));		}		if ($this->params->get('menu-meta_keywords'))		{			$this->document->setMetadata('keywords', $this->params->get('menu-meta_keywords'));		}			if ($this->params->get('robots'))		{			$this->document->setMetadata('robots', $this->params->get('robots'));		}	}}
