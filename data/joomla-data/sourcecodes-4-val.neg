<?php/** * @package     Joomla.Administrator * @subpackage  com_users * * @copyright   Copyright (C) 2005 - 2013 Open Source Matters, Inc. All rights reserved. * @license     GNU General Public License version 2 or later; see LICENSE.txt */defined('_JEXEC') or die;/** * Methods supporting a list of user access level records. * * @package     Joomla.Administrator * @subpackage  com_users * @since       1.6 */class UsersModelLevels extends JModelList{	/**	 * Constructor.	 *	 * @param   array  An optional associative array of configuration settings.	 * @see     JController	 * @since   1.6	 */	public function __construct($config = array())	{		if (empty($config['filter_fields']))		{			$config['filter_fields'] = array(				'id', 'a.id',				'title', 'a.title',				'ordering', 'a.ordering',			);		}		parent::__construct($config);	}	/**	 * Method to auto-populate the model state.	 *	 * Note. Calling getState in this method will result in recursion.	 *	 * @since   1.6	 */	protected function populateState($ordering = null, $direction = null)	{		$app = JFactory::getApplication('administrator');		// Load the filter state.		$search = $this->getUserStateFromRequest($this->context . '.filter.search', 'filter_search');		$this->setState('filter.search', $search);		// Load the parameters.		$params = JComponentHelper::getParams('com_users');		$this->setState('params', $params);		// List state information.		parent::populateState('a.title', 'asc');	}	/**	 * Method to get a store id based on model configuration state.	 *	 * This is necessary because the model is used by the component and	 * different modules that might need different sets of data or different	 * ordering requirements.	 *	 * @param   string  $id    A prefix for the store id.	 *	 * @return  string  A store id.	 */	protected function getStoreId($id = '')	{		// Compile the store id.		$id .= ':' . $this->getState('filter.search');		return parent::getStoreId($id);	}	/**	 * Build an SQL query to load the list data.	 *	 * @return  JDatabaseQuery	 */	protected function getListQuery()	{		// Create a new query object.		$db = $this->getDbo();		$query = $db->getQuery(true);		// Select the required fields from the table.		$query->select(			$this->getState(				'list.select',				'a.*'			)		);		$query->from($db->quoteName('#__viewlevels') . ' AS a');		// Add the level in the tree.		$query->group('a.id, a.title, a.ordering, a.rules');		// Filter the items over the search string if set.		$search = $this->getState('filter.search');		if (!empty($search))		{			if (stripos($search, 'id:') === 0)			{				$query->where('a.id = ' . (int) substr($search, 3));			}			else			{				$search = $db->quote('%' . $db->escape($search, true) . '%');				$query->where('a.title LIKE ' . $search);			}		}		$query->group('a.id');		// Add the list ordering clause.		$query->order($db->escape($this->getState('list.ordering', 'a.lft')) . ' ' . $db->escape($this->getState('list.direction', 'ASC')));		//echo nl2br(str_replace('#__','jos_',$query));		return $query;	}	/**	 * Method to adjust the ordering of a row.	 *	 * @param   integer    The ID of the primary key to move.	 * @param   integer    Increment, usually +1 or -1	 * @return  boolean  False on failure or error, true otherwise.	 */	public function reorder($pk, $direction = 0)	{		// Sanitize the id and adjustment.		$pk = (!empty($pk)) ? $pk : (int) $this->getState('level.id');		$user = JFactory::getUser();		// Get an instance of the record's table.		$table = JTable::getInstance('viewlevel');		// Load the row.		if (!$table->load($pk))		{			$this->setError($table->getError());			return false;		}		// Access checks.		$allow = $user->authorise('core.edit.state', 'com_users');		if (!$allow)		{			$this->setError(JText::_('JLIB_APPLICATION_ERROR_EDITSTATE_NOT_PERMITTED'));			return false;		}		// Move the row.		// TODO: Where clause to restrict category.		$table->move($pk);		return true;	}	/**	 * Saves the manually set order of records.	 *	 * @param   array    An array of primary key ids.	 * @param   integer  +/-1	 */	public function saveorder($pks, $order)	{		$table = JTable::getInstance('viewlevel');		$user = JFactory::getUser();		$conditions = array();		if (empty($pks))		{			return JError::raiseWarning(500, JText::_('COM_USERS_ERROR_LEVELS_NOLEVELS_SELECTED'));		}		// update ordering values		foreach ($pks as $i => $pk)		{			$table->load((int) $pk);			// Access checks.			$allow = $user->authorise('core.edit.state', 'com_users');			if (!$allow)			{				// Prune items that you can't change.				unset($pks[$i]);				JError::raiseWarning(403, JText::_('JLIB_APPLICATION_ERROR_EDITSTATE_NOT_PERMITTED'));			}			elseif ($table->ordering != $order[$i])			{				$table->ordering = $order[$i];				if (!$table->store())				{					$this->setError($table->getError());					return false;				}			}		}		// Execute reorder for each category.		foreach ($conditions as $cond)		{			$table->load($cond[0]);			$table->reorder($cond[1]);		}		return true;	}}
<?php/** * @package     Joomla.Platform * @subpackage  Feed * * @copyright   Copyright (C) 2005 - 2012 Open Source Matters, Inc. All rights reserved. * @license     GNU General Public License version 2 or later; see LICENSE */defined('JPATH_PLATFORM') or die;/** * Feed Person class. * * @package     Joomla.Platform * @subpackage  Feed * @since       12.3 */class JFeedPerson{	/**	 * @var    string	 * @since  12.3	 */	public $email;	/**	 * @var    string	 * @since  12.3	 */	public $name;	/**	 * @var    string	 * @since  12.3	 */	public $type;	/**	 * @var    string	 * @since  12.3	 */	public $uri;	/**	 * Constructor.	 *	 * @param   string  $name   The full name of the person.	 * @param   string  $email  The email address of the person.	 * @param   string  $uri    The URI for the person.	 * @param   string  $type   The type of person.	 *	 * @since   12.3	 */	public function __construct($name = null, $email = null, $uri = null, $type = null)	{		$this->name = $name;		$this->email = $email;		$this->uri = $uri;		$this->type = $type;	}}
<?php/** * @package     Joomla.Administrator * @subpackage  com_config * * @copyright   Copyright (C) 2005 - 2013 Open Source Matters, Inc. All rights reserved. * @license     GNU General Public License version 2 or later; see LICENSE.txt */defined('_JEXEC') or die;/** * Model for component configuration * * @package     Joomla.Administrator * @subpackage  com_config * @since       1.5 */class ConfigModelComponent extends JModelForm{	/**	* The event to trigger before saving the data.	*	* @var    string	* @since  3.1.0	*/	protected $event_before_save = 'onConfigurationBeforeSave';	/**	* The event to trigger before deleting the data.	*	* @var    string	* @since  3.1.0	*/	protected $event_after_save = 'onConfigurationAfterSave';	/**	 * Method to auto-populate the model state.	 *	 * Note. Calling getState in this method will result in recursion.	 *	 * @return  void	 * @since   1.6	 */	protected function populateState()	{		$input = JFactory::getApplication()->input;		// Set the component (option) we are dealing with.		$component = $input->get('component');		$this->setState('component.option', $component);		// Set an alternative path for the configuration file.		if ($path = $input->getString('path'))		{			$path = JPath::clean(JPATH_SITE . '/' . $path);			JPath::check($path);			$this->setState('component.path', $path);		}	}	/**	 * Method to get a form object.	 *	 * @param   array  $data		Data for the form.	 * @param   boolean	$loadData	True if the form is to load its own data (default case), false if not.	 *	 * @return  mixed  A JForm object on success, false on failure	 * @since   1.6	 */	public function getForm($data = array(), $loadData = true)	{		if ($path = $this->getState('component.path'))		{			// Add the search path for the admin component config.xml file.			JForm::addFormPath($path);		}		else		{			// Add the search path for the admin component config.xml file.			JForm::addFormPath(JPATH_ADMINISTRATOR.'/components/'.$this->getState('component.option'));		}		// Get the form.		$form = $this->loadForm(				'com_config.component',				'config',				array('control' => 'jform', 'load_data' => $loadData),				false,				'/config'			);		if (empty($form))		{			return false;		}		return $form;	}	/**	 * Get the component information.	 *	 * @return  object	 * @since   1.6	 */	function getComponent()	{		$option = $this->getState('component.option');		// Load common and local language files.		$lang = JFactory::getLanguage();			$lang->load($option, JPATH_BASE, null, false, false)		||	$lang->load($option, JPATH_BASE . "/components/$option", null, false, false)		||	$lang->load($option, JPATH_BASE, $lang->getDefault(), false, false)		||	$lang->load($option, JPATH_BASE . "/components/$option", $lang->getDefault(), false, false);		$result = JComponentHelper::getComponent($option);		$this->preprocessData('com_config.component', $result);		return $result;	}	/**	 * Method to save the configuration data.	 *	 * @param   array  An array containing all global config data.	 *	 * @return  bool	True on success, false on failure.	 * @since   1.6	 */	public function save($data)	{		$dispatcher = JDispatcher::getInstance();		$table	= JTable::getInstance('extension');		$isNew = true;		// Save the rules.		if (isset($data['params']) && isset($data['params']['rules']))		{			$rules	= new JAccessRules($data['params']['rules']);			$asset	= JTable::getInstance('asset');			if (!$asset->loadByName($data['option']))			{				$root	= JTable::getInstance('asset');				$root->loadByName('root.1');				$asset->name = $data['option'];				$asset->title = $data['option'];				$asset->setLocation($root->id, 'last-child');			}			$asset->rules = (string) $rules;			if (!$asset->check() || !$asset->store())			{				$this->setError($asset->getError());				return false;			}			// We don't need this anymore			unset($data['option']);			unset($data['params']['rules']);		}		// Load the previous Data		if (!$table->load($data['id']))		{			$this->setError($table->getError());			return false;		}		unset($data['id']);		// Bind the data.		if (!$table->bind($data))		{			$this->setError($table->getError());			return false;		}		// Check the data.		if (!$table->check())		{			$this->setError($table->getError());			return false;		}		// Trigger the onConfigurationBeforeSave event.		$result = $dispatcher->trigger($this->event_before_save, array($this->option . '.' . $this->name, $table, $isNew));		if (in_array(false, $result, true))		{			$this->setError($table->getError());			return false;		}		// Store the data.		if (!$table->store())		{			$this->setError($table->getError());			return false;		}		// Clean the component cache.		$this->cleanCache('_system');		// Trigger the onConfigurationAfterSave event.		$dispatcher->trigger($this->event_after_save, array($this->option . '.' . $this->name, $table, $isNew));		return true;	}}
<?php/** * @package     Joomla.Administrator * @subpackage  com_plugins * * @copyright   Copyright (C) 2005 - 2013 Open Source Matters, Inc. All rights reserved. * @license     GNU General Public License version 2 or later; see LICENSE.txt */defined('_JEXEC') or die;/** * Methods supporting a list of plugin records. * * @package     Joomla.Administrator * @subpackage  com_plugins * @since       1.6 */class PluginsModelPlugins extends JModelList{	/**	 * Constructor.	 *	 * @param   array  An optional associative array of configuration settings.	 * @see     JController	 * @since   1.6	 */	public function __construct($config = array())	{		if (empty($config['filter_fields']))		{			$config['filter_fields'] = array(				'extension_id', 'a.extension_id',				'name', 'a.name',				'folder', 'a.folder',				'element', 'a.element',				'checked_out', 'a.checked_out',				'checked_out_time', 'a.checked_out_time',				'state', 'a.state',				'enabled', 'a.enabled',				'access', 'a.access', 'access_level',				'ordering', 'a.ordering',				'client_id', 'a.client_id',			);		}		parent::__construct($config);	}	/**	 * Method to auto-populate the model state.	 *	 * Note. Calling getState in this method will result in recursion.	 *	 * @param   string  $ordering   An optional ordering field.	 * @param   string  $direction  An optional direction (asc|desc).	 *	 * @return  void	 *	 * @since   1.6	 */	protected function populateState($ordering = null, $direction = null)	{		$app = JFactory::getApplication('administrator');		// Load the filter state.		$search = $this->getUserStateFromRequest($this->context . '.filter.search', 'filter_search');		$this->setState('filter.search', $search);		$accessId = $this->getUserStateFromRequest($this->context . '.filter.access', 'filter_access', null, 'int');		$this->setState('filter.access', $accessId);		$state = $this->getUserStateFromRequest($this->context . '.filter.enabled', 'filter_enabled', '', 'string');		$this->setState('filter.enabled', $state);		$folder = $this->getUserStateFromRequest($this->context . '.filter.folder', 'filter_folder', null, 'cmd');		$this->setState('filter.folder', $folder);		$language = $this->getUserStateFromRequest($this->context . '.filter.language', 'filter_language', '');		$this->setState('filter.language', $language);		// Load the parameters.		$params = JComponentHelper::getParams('com_plugins');		$this->setState('params', $params);		// List state information.		parent::populateState('folder', 'asc');	}	/**	 * Method to get a store id based on model configuration state.	 *	 * This is necessary because the model is used by the component and	 * different modules that might need different sets of data or different	 * ordering requirements.	 *	 * @param   string    A prefix for the store id.	 *	 * @return  string    A store id.	 */	protected function getStoreId($id = '')	{		// Compile the store id.		$id .= ':' . $this->getState('filter.search');		$id .= ':' . $this->getState('filter.access');		$id .= ':' . $this->getState('filter.state');		$id .= ':' . $this->getState('filter.folder');		$id .= ':' . $this->getState('filter.language');		return parent::getStoreId($id);	}	/**	 * Returns an object list	 *	 * @param   string The query	 * @param   int    Offset	 * @param   int    The number of records	 * @return  array	 */	protected function _getList($query, $limitstart = 0, $limit = 0)	{		$search = $this->getState('filter.search');		$ordering = $this->getState('list.ordering', 'ordering');		if ($ordering == 'name' || (!empty($search) && stripos($search, 'id:') !== 0))		{			$this->_db->setQuery($query);			$result = $this->_db->loadObjectList();			$this->translate($result);			if (!empty($search))			{				foreach ($result as $i => $item)				{					if (!preg_match("/$search/i", $item->name))					{						unset($result[$i]);					}				}			}			$lang = JFactory::getLanguage();			$direction = ($this->getState('list.direction') == 'desc') ? -1 : 1;			JArrayHelper::sortObjects($result, $ordering, $direction, true, $lang->getLocale());			$total = count($result);			$this->cache[$this->getStoreId('getTotal')] = $total;			if ($total < $limitstart)			{				$limitstart = 0;				$this->setState('list.start', 0);			}			return array_slice($result, $limitstart, $limit ? $limit : null);		}		else		{			if ($ordering == 'ordering')			{				$query->order('a.folder ASC');				$ordering = 'a.ordering';			}			$query->order($this->_db->quoteName($ordering) . ' ' . $this->getState('list.direction'));			if ($ordering == 'folder')			{				$query->order('a.ordering ASC');			}			$result = parent::_getList($query, $limitstart, $limit);			$this->translate($result);			return $result;		}	}	/**	 * Translate a list of objects	 *	 * @param   array The array of objects	 * @return  array The array of translated objects	 */	protected function translate(&$items)	{		$lang = JFactory::getLanguage();		foreach ($items as &$item)		{			$source = JPATH_PLUGINS . '/' . $item->folder . '/' . $item->element;			$extension = 'plg_' . $item->folder . '_' . $item->element;			$lang->load($extension . '.sys', JPATH_ADMINISTRATOR, null, false, false)				|| $lang->load($extension . '.sys', $source, null, false, false)				|| $lang->load($extension . '.sys', JPATH_ADMINISTRATOR, $lang->getDefault(), false, false)				|| $lang->load($extension . '.sys', $source, $lang->getDefault(), false, false);			$item->name = JText::_($item->name);		}	}	/**	 * Build an SQL query to load the list data.	 *	 * @return  JDatabaseQuery	 */	protected function getListQuery()	{		// Create a new query object.		$db = $this->getDbo();		$query = $db->getQuery(true);		// Select the required fields from the table.		$query->select(			$this->getState(				'list.select',				'a.extension_id , a.name, a.element, a.folder, a.checked_out, a.checked_out_time,' .					' a.enabled, a.access, a.ordering'			)		)			->from($db->quoteName('#__extensions') . ' AS a')			->where($db->quoteName('type') . ' = ' . $db->quote('plugin'));		// Join over the users for the checked out user.		$query->select('uc.name AS editor')			->join('LEFT', '#__users AS uc ON uc.id=a.checked_out');		// Join over the asset groups.		$query->select('ag.title AS access_level')			->join('LEFT', '#__viewlevels AS ag ON ag.id = a.access');		// Filter by access level.		if ($access = $this->getState('filter.access'))		{			$query->where('a.access = ' . (int) $access);		}		// Filter by published state		$published = $this->getState('filter.enabled');		if (is_numeric($published))		{			$query->where('a.enabled = ' . (int) $published);		}		elseif ($published === '')		{			$query->where('(a.enabled IN (0, 1))');		}		// Filter by state		$query->where('a.state >= 0');		// Filter by folder.		if ($folder = $this->getState('filter.folder'))		{			$query->where('a.folder = ' . $db->quote($folder));		}		// Filter by search in id		$search = $this->getState('filter.search');		if (!empty($search) && stripos($search, 'id:') === 0)		{			$query->where('a.extension_id = ' . (int) substr($search, 3));		}		return $query;	}}
<?php/** * @package     Joomla.Administrator * @subpackage  com_tags * * @copyright   Copyright (C) 2005 - 2013 Open Source Matters, Inc. All rights reserved. * @license     GNU General Public License version 2 or later; see LICENSE.txt */defined('_JEXEC') or die;/** * The Tag Controller * * @package     Joomla.Administrator * @subpackage  com_tags * @since       3.1 */class TagsControllerTag extends JControllerForm{	/**	 * Method to check if you can add a new record.	 *	 * @param   array  $data  An array of input data.	 *	 * @return  boolean	 *	 * @since   3.1	 */	protected function allowAdd($data = array())	{		$user = JFactory::getUser();		return ($user->authorise('core.create', 'com_tags'));	}	/**	 * Method to check if you can edit a record.	 *	 * @param   array   $data  An array of input data.	 * @param   string  $key   The name of the key for the primary key.	 *	 * @return  boolean	 *	 * @since   3.1	 */	protected function allowEdit($data = array(), $key = 'id')	{		$user = JFactory::getUser();		$recordId = (int) isset($data[$key]) ? $data[$key] : 0;		// Since there is no asset tracking and no categories, revert to the component permissions.		return parent::allowEdit($data, $key);	}	/**	 * Method to run batch operations.	 *	 * @param   object  $model  The model.	 *	 * @return  boolean	 True if successful, false otherwise and internal error is set.	 *	 * @since   3.1	 */	public function batch($model = null)	{		JSession::checkToken() or jexit(JText::_('JINVALID_TOKEN'));		// Set the model		$model = $this->getModel('Tag');		// Preset the redirect		$this->setRedirect('index.php?option=com_tags&view=tags');		return parent::batch($model);	}}
<?php/** * @package     Joomla.Administrator * @subpackage  com_content * * @copyright   Copyright (C) 2005 - 2013 Open Source Matters, Inc. All rights reserved. * @license     GNU General Public License version 2 or later; see LICENSE.txt */defined('_JEXEC') or die;echo JLayoutHelper::render('joomla.edit.metadata', $this);?>
<?php/** * @package     Joomla.Administrator * @subpackage  com_users * * @copyright   Copyright (C) 2005 - 2013 Open Source Matters, Inc. All rights reserved. * @license     GNU General Public License version 2 or later; see LICENSE.txt */defined('_JEXEC') or die;/** * User view level model. * * @package     Joomla.Administrator * @subpackage  com_users * @since       1.6 */class UsersModelLevel extends JModelAdmin{	/**	 * @var	array	A list of the access levels in use.	 * @since   1.6	 */	protected $levelsInUse = null;	/**	 * Method to test whether a record can be deleted.	 *	 * @param   object	$record	A record object.	 *	 * @return  boolean  True if allowed to delete the record. Defaults to the permission set in the component.	 * @since   1.6	 */	protected function canDelete($record)	{		// Check if the access level is being used by any content.		if ($this->levelsInUse === null)		{			// Populate the list once.			$this->levelsInUse = array();			$db		= $this->getDbo();			$query	= $db->getQuery(true)				->select('DISTINCT access');				// from is added dynamically			// Get all the tables and the prefix			$tables = $db->getTableList();			//$fields = $db->getTableFields($tables);			$prefix = $db->getPrefix();			foreach ($tables as $table)			{				// Get all of the columns in the table				$fields = $db->getTableColumns($table);				// We are looking for the access field.  If custom tables are using something other				// than the 'access' field they are on their own unfortunately.				// Also make sure the table prefix matches the live db prefix (eg, it is not a "bak_" table)				if ((strpos($table, $prefix) === 0) && (isset($fields['access'])))				{					// Lookup the distinct values of the field.					$query->clear('from')						->from($db->quoteName($table));					$db->setQuery($query);					try					{						$values = $db->loadColumn();					}					catch (RuntimeException $e)					{						$this->setError($e->getMessage());						return false;					}					$this->levelsInUse = array_merge($this->levelsInUse, $values);					// TODO Could assemble an array of the tables used by each view level list those,					// giving the user a clue in the error where to look.				}			}			// Get uniques.			$this->levelsInUse = array_unique($this->levelsInUse);			// Ok, after all that we are ready to check the record :)		}		if (in_array($record->id, $this->levelsInUse))		{			$this->setError(JText::sprintf('COM_USERS_ERROR_VIEW_LEVEL_IN_USE', $record->id, $record->title));			return false;		}		return parent::canDelete($record);	}	/**	 * Returns a reference to the a Table object, always creating it.	 *	 * @param   type	The table type to instantiate	 * @param   string	A prefix for the table class name. Optional.	 * @param   array  Configuration array for model. Optional.	 * @return  JTable	A database object	 * @since   1.6	*/	public function getTable($type = 'Viewlevel', $prefix = 'JTable', $config = array())	{		$return = JTable::getInstance($type, $prefix, $config);		return $return;	}	/**	 * Method to get a single record.	 *	 * @param   integer	The id of the primary key.	 * @return  mixed  Object on success, false on failure.	 * @since   1.6	 */	public function getItem($pk = null)	{		$result = parent::getItem($pk);		// Convert the params field to an array.		$result->rules = json_decode($result->rules);		return $result;	}	/**	 * Method to get the record form.	 *	 * @param   array  $data		An optional array of data for the form to interogate.	 * @param   boolean	$loadData	True if the form is to load its own data (default case), false if not.	 * @return  JForm	A JForm object on success, false on failure	 * @since   1.6	 */	public function getForm($data = array(), $loadData = true)	{		$app = JFactory::getApplication();		// Get the form.		$form = $this->loadForm('com_users.level', 'level', array('control' => 'jform', 'load_data' => $loadData));		if (empty($form))		{			return false;		}		return $form;	}	/**	 * Method to get the data that should be injected in the form.	 *	 * @return  mixed  The data for the form.	 * @since   1.6	 */	protected function loadFormData()	{		// Check the session for previously entered form data.		$data = JFactory::getApplication()->getUserState('com_users.edit.level.data', array());		if (empty($data))		{			$data = $this->getItem();		}		$this->preprocessData('com_users.level', $data);		return $data;	}	/**	 * Override preprocessForm to load the user plugin group instead of content.	 *	 * @param   object	A form object.	 * @param   mixed	The data expected for the form.	 * @throws	Exception if there is an error in the form event.	 * @since   1.6	 */	protected function preprocessForm(JForm $form, $data, $groups = '')	{		parent::preprocessForm($form, $data, 'user');	}	/**	 * Method to save the form data.	 *	 * @param   array  The form data.	 * @return  boolean  True on success.	 * @since   1.6	 */	public function save($data)	{		if (!isset($data['rules']))		{			$data['rules'] = array();		}		return parent::save($data);	}}
<?php/** * @package     Joomla.Administrator * @subpackage  com_content * * @copyright   Copyright (C) 2005 - 2013 Open Source Matters, Inc. All rights reserved. * @license     GNU General Public License version 2 or later; see LICENSE.txt */defined('JPATH_BASE') or die;/** * Supports a modal article picker. * * @package     Joomla.Administrator * @subpackage  com_content * @since       1.6 */class JFormFieldModal_Article extends JFormField{	/**	 * The form field type.	 *	 * @var		string	 * @since   1.6	 */	protected $type = 'Modal_Article';	/**	 * Method to get the field input markup.	 *	 * @return  string	The field input markup.	 * @since   1.6	 */	protected function getInput()	{		// Load the modal behavior script.		JHtml::_('behavior.modal', 'a.modal');		// Build the script.		$script = array();		$script[] = '	function jSelectArticle_'.$this->id.'(id, title, catid, object) {';		$script[] = '		document.id("'.$this->id.'_id").value = id;';		$script[] = '		document.id("'.$this->id.'_name").value = title;';		$script[] = '		SqueezeBox.close();';		$script[] = '	}';		// Add the script to the document head.		JFactory::getDocument()->addScriptDeclaration(implode("\n", $script));		// Setup variables for display.		$html	= array();		$link	= 'index.php?option=com_content&amp;view=articles&amp;layout=modal&amp;tmpl=component&amp;function=jSelectArticle_'.$this->id;		if (isset($this->element['language']))		{			$link .= '&amp;forcedLanguage='.$this->element['language'];		}		$db	= JFactory::getDbo();		$db->setQuery(			'SELECT title' .			' FROM #__content' .			' WHERE id = '.(int) $this->value		);		try		{			$title = $db->loadResult();		}		catch (RuntimeException $e)		{			JError::raiseWarning(500, $e->getMessage());		}		if (empty($title))		{			$title = JText::_('COM_CONTENT_SELECT_AN_ARTICLE');		}		$title = htmlspecialchars($title, ENT_QUOTES, 'UTF-8');		// The current user display field.		$html[] = '<span class="input-append">';		$html[] = '<input type="text" class="input-medium" id="'.$this->id.'_name" value="'.$title.'" disabled="disabled" size="35" /><a class="modal btn" title="'.JText::_('COM_CONTENT_CHANGE_ARTICLE').'"  href="'.$link.'&amp;'.JSession::getFormToken().'=1" rel="{handler: \'iframe\', size: {x: 800, y: 450}}"><i class="icon-file"></i> '.JText::_('JSELECT').'</a>';		$html[] = '</span>';		// The active article id field.		if (0 == (int) $this->value)		{			$value = '';		}		else		{			$value = (int) $this->value;		}		// class='required' for client side validation		$class = '';		if ($this->required)		{			$class = ' class="required modal-value"';		}		$html[] = '<input type="hidden" id="'.$this->id.'_id"'.$class.' name="'.$this->name.'" value="'.$value.'" />';		return implode("\n", $html);	}}
<?php/** * @package     Joomla.Administrator * @subpackage  com_menus * * @copyright   Copyright (C) 2005 - 2013 Open Source Matters, Inc. All rights reserved. * @license     GNU General Public License version 2 or later; see LICENSE.txt */defined('_JEXEC') or die;?><?php	echo JHtml::_('bootstrap.startAccordion', 'menuOptions', array('active' => 'collapse0'));	$fieldSets = $this->form->getFieldsets('params');	$i = 0;	foreach ($fieldSets as $name => $fieldSet):		if (!($this->item->link == 'index.php?option=com_wrapper&view=wrapper' && $fieldSet->name == 'request')):			$label = !empty($fieldSet->label) ? $fieldSet->label : 'COM_MENUS_'.$name.'_FIELDSET_LABEL';			echo JHtml::_('bootstrap.addSlide', 'menuOptions', JText::_($label), 'collapse' . $i++);				if (isset($fieldSet->description) && trim($fieldSet->description)) :					echo '<p class="tip">'.$this->escape(JText::_($fieldSet->description)).'</p>';				endif;				?>					<?php foreach ($this->form->getFieldset($name) as $field) : ?>						<div class="control-group">							<div class="control-label">								<?php echo $field->label; ?>							</div>							<div class="controls">								<?php echo $field->input; ?>							</div>						</div>					<?php endforeach;			echo JHtml::_('bootstrap.endSlide');		endif;	endforeach;?><?phpecho JHtml::_('bootstrap.endAccordion');
<?php/** * @package     Joomla.Administrator * @subpackage  com_installer * * @copyright   Copyright (C) 2005 - 2013 Open Source Matters, Inc. All rights reserved. * @license     GNU General Public License version 2 or later; see LICENSE.txt */defined('_JEXEC') or die;JHtml::_('behavior.multiselect');JHtml::_('formbehavior.chosen', 'select');JHtml::_('bootstrap.tooltip');$listOrder = $this->escape($this->state->get('list.ordering'));$listDirn  = $this->escape($this->state->get('list.direction'));$version = new JVersion;?><div id="installer-languages">	<form action="<?php echo JRoute::_('index.php?option=com_installer&view=languages');?>" method="post" name="adminForm" id="adminForm">	<?php if (!empty( $this->sidebar)) : ?>		<div id="j-sidebar-container" class="span2">			<?php echo $this->sidebar; ?>		</div>		<div id="j-main-container" class="span10">	<?php else : ?>		<div id="j-main-container">	<?php endif;?>		<?php if (count($this->items) || $this->escape($this->state->get('filter.search'))) : ?>			<?php echo $this->loadTemplate('filter'); ?>			<table class="table table-striped">				<thead>					<tr>						<th width="20" class="nowrap hidden-phone">							<input type="checkbox" name="checkall-toggle" value="" title="<?php echo JText::_('JGLOBAL_CHECK_ALL'); ?>" onclick="Joomla.checkAll(this)" />						</th>						<th class="nowrap">							<?php echo JHtml::_('grid.sort', 'COM_INSTALLER_HEADING_NAME', 'name', $listDirn, $listOrder); ?>						</th>						<th width="10%" class="center">							<?php echo JText::_('JVERSION'); ?>						</th>						<th class="center nowrap hidden-phone">							<?php echo JText::_('COM_INSTALLER_HEADING_TYPE'); ?>						</th>						<th width="35%" class="nowrap hidden-phone">							<?php echo JText::_('COM_INSTALLER_HEADING_DETAILS_URL'); ?>						</th>						<th width="30" class="nowrap hidden-phone">							<?php echo JHtml::_('grid.sort', 'COM_INSTALLER_HEADING_ID', 'update_id', $listDirn, $listOrder); ?>						</th>					</tr>				</thead>				<tfoot>					<tr>						<td colspan="6">							<?php echo $this->pagination->getListFooter(); ?>						</td>					</tr>				</tfoot>				<tbody>					<?php foreach ($this->items as $i => $language) :				?>					<tr class="row<?php echo $i % 2; ?>">						<td class="hidden-phone">							<?php echo JHtml::_('grid.id', $i, $language->update_id, false, 'cid'); ?>						</td>						<td>							<?php echo $language->name; ?>							<?php // Display a Note if language pack version is not equal to Joomla version ?>							<?php if (substr($language->version, 0, 3) != $version->RELEASE									|| substr($language->version, 0, 5) != $version->RELEASE . "." . $version->DEV_LEVEL) : ?>								<div class="small"><?php echo JText::_('JGLOBAL_LANGUAGE_VERSION_NOT_PLATFORM'); ?></div>							<?php endif; ?>						</td>						<td class="center small">							<?php echo $language->version; ?>						</td>						<td class="center small hidden-phone">							<?php echo JText::_('COM_INSTALLER_TYPE_' . strtoupper($language->type)); ?>						</td>						<td class="small hidden-phone">							<?php echo $language->detailsurl; ?>						</td>						<td class="small hidden-phone">							<?php echo $language->update_id; ?>						</td>					</tr>					<?php endforeach; ?>				</tbody>			</table>		<?php else : ?>			<div class="alert"><?php echo JText::_('COM_INSTALLER_MSG_LANGUAGES_NOLANGUAGES'); ?></div>		<?php endif; ?>			<input type="hidden" name="task" value="" />			<input type="hidden" name="boxchecked" value="0" />			<input type="hidden" name="filter_order" value="<?php echo $listOrder; ?>" />			<input type="hidden" name="filter_order_Dir" value="<?php echo $listDirn; ?>" />			<?php echo JHtml::_('form.token'); ?>		</div>	</form></div>
<?php/** * @package     Joomla.Administrator * @subpackage  com_weblinks * * @copyright   Copyright (C) 2005 - 2013 Open Source Matters, Inc. All rights reserved. * @license     GNU General Public License version 2 or later; see LICENSE.txt */defined('_JEXEC') or die;/** * Weblink Table class * * @package     Joomla.Administrator * @subpackage  com_weblinks * @since       1.5 */class WeblinksTableWeblink extends JTable{	/**	 * Helper object for storing and deleting tag information.	 *	 * @var    JHelperTags	 * @since  3.1	 */	protected $tagsHelper = null;	/**	 * Constructor	 *	 * @param JDatabaseDriver A database connector object	 */	public function __construct(&$db)	{		parent::__construct('#__weblinks', 'id', $db);		$this->tagsHelper = new JHelperTags();		$this->tagsHelper->typeAlias = 'com_weblinks.weblink';	}	/**	 * Overloaded bind function to pre-process the params.	 *	 * @param   array  Named array	 * @return  null|string	null is operation was satisfactory, otherwise returns an error	 * @see     JTable:bind	 * @since   1.5	 */	public function bind($array, $ignore = '')	{		if (isset($array['params']) && is_array($array['params']))		{			$registry = new JRegistry;			$registry->loadArray($array['params']);			$array['params'] = (string) $registry;		}		if (isset($array['metadata']) && is_array($array['metadata']))		{			$registry = new JRegistry;			$registry->loadArray($array['metadata']);			$array['metadata'] = (string) $registry;		}		if (isset($array['images']) && is_array($array['images']))		{			$registry = new JRegistry;			$registry->loadArray($array['images']);			$array['images'] = (string) $registry;		}		return parent::bind($array, $ignore);	}	/**	 * Overload the store method for the Weblinks table.	 *	 * @param   boolean	Toggle whether null values should be updated.	 * @return  boolean  True on success, false on failure.	 * @since   1.6	 */	public function store($updateNulls = false)	{		$date	= JFactory::getDate();		$user	= JFactory::getUser();		if ($this->id)		{			// Existing item			$this->modified		= $date->toSql();			$this->modified_by	= $user->get('id');		}		else		{			// New weblink. A weblink created and created_by field can be set by the user,			// so we don't touch either of these if they are set.			if (!(int) $this->created)			{				$this->created = $date->toSql();			}			if (empty($this->created_by))			{				$this->created_by = $user->get('id');			}		}		// Set publish_up to null date if not set		if (!$this->publish_up)		{			$this->publish_up = $this->_db->getNullDate();		}		// Set publish_down to null date if not set		if (!$this->publish_down)		{			$this->publish_down = $this->_db->getNullDate();		}		// Verify that the alias is unique		$table = JTable::getInstance('Weblink', 'WeblinksTable');		if ($table->load(array('alias' => $this->alias, 'catid' => $this->catid)) && ($table->id != $this->id || $this->id == 0))		{			$this->setError(JText::_('COM_WEBLINKS_ERROR_UNIQUE_ALIAS'));			return false;		}		$this->tagsHelper->preStoreProcess($this);		$result = parent::store($updateNulls);		return $result && $this->tagsHelper->postStoreProcess($this);	}	/**	 * Overloaded check method to ensure data integrity.	 *	 * @return  boolean  True on success.	 */	public function check()	{		if (JFilterInput::checkAttribute(array ('href', $this->url)))		{			$this->setError(JText::_('COM_WEBLINKS_ERR_TABLES_PROVIDE_URL'));			return false;		}		// check for valid name		if (trim($this->title) == '')		{			$this->setError(JText::_('COM_WEBLINKS_ERR_TABLES_TITLE'));			return false;		}		// check for existing name		$query = 'SELECT id FROM #__weblinks WHERE title = '.$this->_db->quote($this->title).' AND catid = '.(int) $this->catid;		$this->_db->setQuery($query);		$xid = (int) $this->_db->loadResult();		if ($xid && $xid != (int) $this->id)		{			$this->setError(JText::_('COM_WEBLINKS_ERR_TABLES_NAME'));			return false;		}		if (empty($this->alias))		{			$this->alias = $this->title;		}		$this->alias = JApplication::stringURLSafe($this->alias);		if (trim(str_replace('-', '', $this->alias)) == '')		{			$this->alias = JFactory::getDate()->format("Y-m-d-H-i-s");		}		// Check the publish down date is not earlier than publish up.		if ($this->publish_down > $this->_db->getNullDate() && $this->publish_down < $this->publish_up)		{			$this->setError(JText::_('JGLOBAL_START_PUBLISH_AFTER_FINISH'));			return false;		}		// clean up keywords -- eliminate extra spaces between phrases		// and cr (\r) and lf (\n) characters from string		if (!empty($this->metakey))		{			// only process if not empty			$bad_characters = array("\n", "\r", "\"", "<", ">"); // array of characters to remove			$after_clean = JString::str_ireplace($bad_characters, "", $this->metakey); // remove bad characters			$keys = explode(',', $after_clean); // create array using commas as delimiter			$clean_keys = array();			foreach ($keys as $key)			{				if (trim($key)) {  // ignore blank keywords					$clean_keys[] = trim($key);				}			}			$this->metakey = implode(", ", $clean_keys); // put array back together delimited by ", "		}		return true;	}	/**	 * Override parent delete method to delete tags information.	 *	 * @param   integer  $pk  Primary key to delete.	 *	 * @return  boolean  True on success.	 *	 * @since   3.1	 * @throws  UnexpectedValueException	 */	public function delete($pk = null)	{		$result = parent::delete($pk);		return $result && $this->tagsHelper->deleteTagData($this, $pk);	}	/**	 * Method to set the publishing state for a row or list of rows in the database	 * table.  The method respects checked out rows by other users and will attempt	 * to checkin rows that it can after adjustments are made.	 *	 * @param   mixed	An optional array of primary key values to update.  If not	 *					set the instance property value is used.	 * @param   integer The publishing state. eg. [0 = unpublished, 1 = published]	 * @param   integer The user id of the user performing the operation.	 * @return  boolean  True on success.	 * @since   1.0.4	 */	public function publish($pks = null, $state = 1, $userId = 0)	{		$k = $this->_tbl_key;		// Sanitize input.		JArrayHelper::toInteger($pks);		$userId = (int) $userId;		$state  = (int) $state;		// If there are no primary keys set check to see if the instance key is set.		if (empty($pks))		{			if ($this->$k)			{				$pks = array($this->$k);			}			// Nothing to set publishing state on, return false.			else {				$this->setError(JText::_('JLIB_DATABASE_ERROR_NO_ROWS_SELECTED'));				return false;			}		}		// Build the WHERE clause for the primary keys.		$where = $k.'='.implode(' OR '.$k.'=', $pks);		// Determine if there is checkin support for the table.		if (!property_exists($this, 'checked_out') || !property_exists($this, 'checked_out_time'))		{			$checkin = '';		}		else		{			$checkin = ' AND (checked_out = 0 OR checked_out = '.(int) $userId.')';		}		// Update the publishing state for rows with the given primary keys.		$this->_db->setQuery(			'UPDATE '.$this->_db->quoteName($this->_tbl) .			' SET '.$this->_db->quoteName('state').' = '.(int) $state .			' WHERE ('.$where.')' .			$checkin		);		try		{			$this->_db->execute();		}		catch (RuntimeException $e)		{			$this->setError($e->getMessage());			return false;		}		// If checkin is supported and all rows were adjusted, check them in.		if ($checkin && (count($pks) == $this->_db->getAffectedRows()))		{			// Checkin the rows.			foreach ($pks as $pk)			{				$this->checkin($pk);			}		}		// If the JTable instance value is in the list of primary keys that were set, set the instance.		if (in_array($this->$k, $pks))		{			$this->state = $state;		}		$this->setError('');		return true;	}}
<?php/** * @package     Joomla.Site * @subpackage  Layout * * @copyright   Copyright (C) 2005 - 2012 Open Source Matters, Inc. All rights reserved. * @license     GNU General Public License version 2 or later; see LICENSE.txt */defined('_JEXEC') or die;?><ol class="nav nav-tabs nav-stacked"><?php foreach ($displayData->get('link_items') as $item) : ?>	<li>		<a href="<?php echo JRoute::_(ContentHelperRoute::getArticleRoute($item->slug, $item->catslug)); ?>">			<?php echo $item->title; ?></a>	</li><?php endforeach; ?></ol>
<?php/** * @package     Joomla.Platform * @subpackage  Database * * @copyright   Copyright (C) 2005 - 2013 Open Source Matters, Inc. All rights reserved * @license     GNU General Public License version 2 or later; see LICENSE */defined('JPATH_PLATFORM') or die;/** * Query Element Class. * * @property-read    string  $name      The name of the element. * @property-read    array   $elements  An array of elements. * @property-read    string  $glue      Glue piece. * * @package     Joomla.Platform * @subpackage  Database * @since       11.1 */class JDatabaseQueryElement{	/**	 * @var    string  The name of the element.	 * @since  11.1	 */	protected $name = null;	/**	 * @var    array  An array of elements.	 * @since  11.1	 */	protected $elements = null;	/**	 * @var    string  Glue piece.	 * @since  11.1	 */	protected $glue = null;	/**	 * Constructor.	 *	 * @param   string  $name      The name of the element.	 * @param   mixed   $elements  String or array.	 * @param   string  $glue      The glue for elements.	 *	 * @since   11.1	 */	public function __construct($name, $elements, $glue = ',')	{		$this->elements = array();		$this->name = $name;		$this->glue = $glue;		$this->append($elements);	}	/**	 * Magic function to convert the query element to a string.	 *	 * @return  string	 *	 * @since   11.1	 */	public function __toString()	{		if (substr($this->name, -2) == '()')		{			return PHP_EOL . substr($this->name, 0, -2) . '(' . implode($this->glue, $this->elements) . ')';		}		else		{			return PHP_EOL . $this->name . ' ' . implode($this->glue, $this->elements);		}	}	/**	 * Appends element parts to the internal list.	 *	 * @param   mixed  $elements  String or array.	 *	 * @return  void	 *	 * @since   11.1	 */	public function append($elements)	{		if (is_array($elements))		{			$this->elements = array_merge($this->elements, $elements);		}		else		{			$this->elements = array_merge($this->elements, array($elements));		}	}	/**	 * Gets the elements of this element.	 *	 * @return  string	 *	 * @since   11.1	 */	public function getElements()	{		return $this->elements;	}	/**	 * Method to provide deep copy support to nested objects and arrays	 * when cloning.	 *	 * @return  void	 *	 * @since   11.3	 */	public function __clone()	{		foreach ($this as $k => $v)		{			if (is_object($v) || is_array($v))			{				$this->{$k} = unserialize(serialize($v));			}		}	}}/** * Query Building Class. * * @package     Joomla.Platform * @subpackage  Database * @since       11.1 * * @method      string  q()   q($text, $escape = true)  Alias for quote method * @method      string  qn()  qs($name, $as = null)     Alias for quoteName method * @method      string  e()   e($text, $extra = false)   Alias for escape method */abstract class JDatabaseQuery{	/**	 * @var    JDatabaseDriver  The database driver.	 * @since  11.1	 */	protected $db = null;	/**	 * @var    string  The SQL query (if a direct query string was provided).	 * @since  12.1	 */	protected $sql = null;	/**	 * @var    string  The query type.	 * @since  11.1	 */	protected $type = '';	/**	 * @var    JDatabaseQueryElement  The query element for a generic query (type = null).	 * @since  11.1	 */	protected $element = null;	/**	 * @var    JDatabaseQueryElement  The select element.	 * @since  11.1	 */	protected $select = null;	/**	 * @var    JDatabaseQueryElement  The delete element.	 * @since  11.1	 */	protected $delete = null;	/**	 * @var    JDatabaseQueryElement  The update element.	 * @since  11.1	 */	protected $update = null;	/**	 * @var    JDatabaseQueryElement  The insert element.	 * @since  11.1	 */	protected $insert = null;	/**	 * @var    JDatabaseQueryElement  The from element.	 * @since  11.1	 */	protected $from = null;	/**	 * @var    JDatabaseQueryElement  The join element.	 * @since  11.1	 */	protected $join = null;	/**	 * @var    JDatabaseQueryElement  The set element.	 * @since  11.1	 */	protected $set = null;	/**	 * @var    JDatabaseQueryElement  The where element.	 * @since  11.1	 */	protected $where = null;	/**	 * @var    JDatabaseQueryElement  The group by element.	 * @since  11.1	 */	protected $group = null;	/**	 * @var    JDatabaseQueryElement  The having element.	 * @since  11.1	 */	protected $having = null;	/**	 * @var    JDatabaseQueryElement  The column list for an INSERT statement.	 * @since  11.1	 */	protected $columns = null;	/**	 * @var    JDatabaseQueryElement  The values list for an INSERT statement.	 * @since  11.1	 */	protected $values = null;	/**	 * @var    JDatabaseQueryElement  The order element.	 * @since  11.1	 */	protected $order = null;	/**	 * @var   object  The auto increment insert field element.	 * @since 11.1	 */	protected $autoIncrementField = null;	/**	 * @var    JDatabaseQueryElement  The call element.	 * @since  12.1	 */	protected $call = null;	/**	 * @var    JDatabaseQueryElement  The exec element.	 * @since  12.1	 */	protected $exec = null;	/**	 * @var    JDatabaseQueryElement  The union element.	 * @since  12.1	 */	protected $union = null;	/**	 * @var    JDatabaseQueryElement  The unionAll element.	 * @since  13.1	 */	protected $unionAll = null;	/**	 * Magic method to provide method alias support for quote() and quoteName().	 *	 * @param   string  $method  The called method.	 * @param   array   $args    The array of arguments passed to the method.	 *	 * @return  string  The aliased method's return value or null.	 *	 * @since   11.1	 */	public function __call($method, $args)	{		if (empty($args))		{			return;		}		switch ($method)		{			case 'q':				return $this->quote($args[0], isset($args[1]) ? $args[1] : true);				break;			case 'qn':				return $this->quoteName($args[0], isset($args[1]) ? $args[1] : null);				break;			case 'e':				return $this->escape($args[0], isset($args[1]) ? $args[1] : false);				break;		}	}	/**	 * Class constructor.	 *	 * @param   JDatabaseDriver  $db  The database driver.	 *	 * @since   11.1	 */	public function __construct(JDatabaseDriver $db = null)	{		$this->db = $db;	}	/**	 * Magic function to convert the query to a string.	 *	 * @return  string	The completed query.	 *	 * @since   11.1	 */	public function __toString()	{		$query = '';		if ($this->sql)		{			return $this->sql;		}		switch ($this->type)		{			case 'element':				$query .= (string) $this->element;				break;			case 'select':				$query .= (string) $this->select;				$query .= (string) $this->from;				if ($this->join)				{					// Special case for joins					foreach ($this->join as $join)					{						$query .= (string) $join;					}				}				if ($this->where)				{					$query .= (string) $this->where;				}				if ($this->group)				{					$query .= (string) $this->group;				}				if ($this->having)				{					$query .= (string) $this->having;				}				if ($this->order)				{					$query .= (string) $this->order;				}				break;			case 'union':				$query .= (string) $this->union;				break;			case 'unionAll':					$query .= (string) $this->unionAll;					break;			case 'delete':				$query .= (string) $this->delete;				$query .= (string) $this->from;				if ($this->join)				{					// Special case for joins					foreach ($this->join as $join)					{						$query .= (string) $join;					}				}				if ($this->where)				{					$query .= (string) $this->where;				}				break;			case 'update':				$query .= (string) $this->update;				if ($this->join)				{					// Special case for joins					foreach ($this->join as $join)					{						$query .= (string) $join;					}				}				$query .= (string) $this->set;				if ($this->where)				{					$query .= (string) $this->where;				}				break;			case 'insert':				$query .= (string) $this->insert;				// Set method				if ($this->set)				{					$query .= (string) $this->set;				}				// Columns-Values method				elseif ($this->values)				{					if ($this->columns)					{						$query .= (string) $this->columns;					}					$elements = $this->values->getElements();					if (!($elements[0] instanceof $this))					{						$query .= ' VALUES ';					}					$query .= (string) $this->values;				}				break;			case 'call':				$query .= (string) $this->call;				break;			case 'exec':				$query .= (string) $this->exec;				break;		}		if ($this instanceof JDatabaseQueryLimitable)		{			$query = $this->processLimit($query, $this->limit, $this->offset);		}		return $query;	}	/**	 * Magic function to get protected variable value	 *	 * @param   string  $name  The name of the variable.	 *	 * @return  mixed	 *	 * @since   11.1	 */	public function __get($name)	{		return isset($this->$name) ? $this->$name : null;	}	/**	 * Add a single column, or array of columns to the CALL clause of the query.	 *	 * Note that you must not mix insert, update, delete and select method calls when building a query.	 * The call method can, however, be called multiple times in the same query.	 *	 * Usage:	 * $query->call('a.*')->call('b.id');	 * $query->call(array('a.*', 'b.id'));	 *	 * @param   mixed  $columns  A string or an array of field names.	 *	 * @return  JDatabaseQuery  Returns this object to allow chaining.	 *	 * @since   12.1	 */	public function call($columns)	{		$this->type = 'call';		if (is_null($this->call))		{			$this->call = new JDatabaseQueryElement('CALL', $columns);		}		else		{			$this->call->append($columns);		}		return $this;	}	/**	 * Casts a value to a char.	 *	 * Ensure that the value is properly quoted before passing to the method.	 *	 * Usage:	 * $query->select($query->castAsChar('a'));	 *	 * @param   string  $value  The value to cast as a char.	 *	 * @return  string  Returns the cast value.	 *	 * @since   11.1	 */	public function castAsChar($value)	{		return $value;	}	/**	 * Gets the number of characters in a string.	 *	 * Note, use 'length' to find the number of bytes in a string.	 *	 * Usage:	 * $query->select($query->charLength('a'));	 *	 * @param   string  $field      A value.	 * @param   string  $operator   Comparison operator between charLength integer value and $condition	 * @param   string  $condition  Integer value to compare charLength with.	 *	 * @return  string  The required char length call.	 *	 * @since 11.1	 */	public function charLength($field, $operator = null, $condition = null)	{		return 'CHAR_LENGTH(' . $field . ')' . (isset($operator) && isset($condition) ? ' ' . $operator . ' ' . $condition : '');	}	/**	 * Clear data from the query or a specific clause of the query.	 *	 * @param   string  $clause  Optionally, the name of the clause to clear, or nothing to clear the whole query.	 *	 * @return  JDatabaseQuery  Returns this object to allow chaining.	 *	 * @since   11.1	 */	public function clear($clause = null)	{		$this->sql = null;		switch ($clause)		{			case 'select':				$this->select = null;				$this->type = null;				break;			case 'delete':				$this->delete = null;				$this->type = null;				break;			case 'update':				$this->update = null;				$this->type = null;				break;			case 'insert':				$this->insert = null;				$this->type = null;				$this->autoIncrementField = null;				break;			case 'from':				$this->from = null;				break;			case 'join':				$this->join = null;				break;			case 'set':				$this->set = null;				break;			case 'where':				$this->where = null;				break;			case 'group':				$this->group = null;				break;			case 'having':				$this->having = null;				break;			case 'order':				$this->order = null;				break;			case 'columns':				$this->columns = null;				break;			case 'values':				$this->values = null;				break;			case 'exec':				$this->exec = null;				$this->type = null;				break;			case 'call':				$this->call = null;				$this->type = null;				break;			case 'limit':				$this->offset = 0;				$this->limit = 0;				break;			case 'union':				$this->union = null;				break;			case 'unionAll':				$this->unionAll = null;				break;			default:				$this->type = null;				$this->select = null;				$this->delete = null;				$this->update = null;				$this->insert = null;				$this->from = null;				$this->join = null;				$this->set = null;				$this->where = null;				$this->group = null;				$this->having = null;				$this->order = null;				$this->columns = null;				$this->values = null;				$this->autoIncrementField = null;				$this->exec = null;				$this->call = null;				$this->union = null;				$this->unionAll = null;				$this->offset = 0;				$this->limit = 0;				break;		}		return $this;	}	/**	 * Adds a column, or array of column names that would be used for an INSERT INTO statement.	 *	 * @param   mixed  $columns  A column name, or array of column names.	 *	 * @return  JDatabaseQuery  Returns this object to allow chaining.	 *	 * @since   11.1	 */	public function columns($columns)	{		if (is_null($this->columns))		{			$this->columns = new JDatabaseQueryElement('()', $columns);		}		else		{			$this->columns->append($columns);		}		return $this;	}	/**	 * Concatenates an array of column names or values.	 *	 * Usage:	 * $query->select($query->concatenate(array('a', 'b')));	 *	 * @param   array   $values     An array of values to concatenate.	 * @param   string  $separator  As separator to place between each value.	 *	 * @return  string  The concatenated values.	 *	 * @since   11.1	 */	public function concatenate($values, $separator = null)	{		if ($separator)		{			return 'CONCATENATE(' . implode(' || ' . $this->quote($separator) . ' || ', $values) . ')';		}		else		{			return 'CONCATENATE(' . implode(' || ', $values) . ')';		}	}	/**	 * Gets the current date and time.	 *	 * Usage:	 * $query->where('published_up < '.$query->currentTimestamp());	 *	 * @return  string	 *	 * @since   11.1	 */	public function currentTimestamp()	{		return 'CURRENT_TIMESTAMP()';	}	/**	 * Returns a PHP date() function compliant date format for the database driver.	 *	 * This method is provided for use where the query object is passed to a function for modification.	 * If you have direct access to the database object, it is recommended you use the getDateFormat method directly.	 *	 * @return  string  The format string.	 *	 * @since   11.1	 */	public function dateFormat()	{		if (!($this->db instanceof JDatabaseDriver))		{			throw new RuntimeException('JLIB_DATABASE_ERROR_INVALID_DB_OBJECT');		}		return $this->db->getDateFormat();	}	/**	 * Creates a formatted dump of the query for debugging purposes.	 *	 * Usage:	 * echo $query->dump();	 *	 * @return  string	 *	 * @since   11.3	 */	public function dump()	{		return '<pre class="jdatabasequery">' . str_replace('#__', $this->db->getPrefix(), $this) . '</pre>';	}	/**	 * Add a table name to the DELETE clause of the query.	 *	 * Note that you must not mix insert, update, delete and select method calls when building a query.	 *	 * Usage:	 * $query->delete('#__a')->where('id = 1');	 *	 * @param   string  $table  The name of the table to delete from.	 *	 * @return  JDatabaseQuery  Returns this object to allow chaining.	 *	 * @since   11.1	 */	public function delete($table = null)	{		$this->type = 'delete';		$this->delete = new JDatabaseQueryElement('DELETE', null);		if (!empty($table))		{			$this->from($table);		}		return $this;	}	/**	 * Method to escape a string for usage in an SQL statement.	 *	 * This method is provided for use where the query object is passed to a function for modification.	 * If you have direct access to the database object, it is recommended you use the escape method directly.	 *	 * Note that 'e' is an alias for this method as it is in JDatabaseDriver.	 *	 * @param   string   $text   The string to be escaped.	 * @param   boolean  $extra  Optional parameter to provide extra escaping.	 *	 * @return  string  The escaped string.	 *	 * @since   11.1	 * @throws  RuntimeException if the internal db property is not a valid object.	 */	public function escape($text, $extra = false)	{		if (!($this->db instanceof JDatabaseDriver))		{			throw new RuntimeException('JLIB_DATABASE_ERROR_INVALID_DB_OBJECT');		}		return $this->db->escape($text, $extra);	}	/**	 * Add a single column, or array of columns to the EXEC clause of the query.	 *	 * Note that you must not mix insert, update, delete and select method calls when building a query.	 * The exec method can, however, be called multiple times in the same query.	 *	 * Usage:	 * $query->exec('a.*')->exec('b.id');	 * $query->exec(array('a.*', 'b.id'));	 *	 * @param   mixed  $columns  A string or an array of field names.	 *	 * @return  JDatabaseQuery  Returns this object to allow chaining.	 *	 * @since   12.1	 */	public function exec($columns)	{		$this->type = 'exec';		if (is_null($this->exec))		{			$this->exec = new JDatabaseQueryElement('EXEC', $columns);		}		else		{			$this->exec->append($columns);		}		return $this;	}	/**	 * Add a table to the FROM clause of the query.	 *	 * Note that while an array of tables can be provided, it is recommended you use explicit joins.	 *	 * Usage:	 * $query->select('*')->from('#__a');	 *	 * @param   mixed   $tables         A string or array of table names.	 *                                  This can be a JDatabaseQuery object (or a child of it) when used	 *                                  as a subquery in FROM clause along with a value for $subQueryAlias.	 * @param   string  $subQueryAlias  Alias used when $tables is a JDatabaseQuery.	 *	 * @return  JDatabaseQuery  Returns this object to allow chaining.	 *	 * @since   11.1	 */	public function from($tables, $subQueryAlias = null)	{		if (is_null($this->from))		{			if ($tables instanceof $this)			{				if (is_null($subQueryAlias))				{					throw new RuntimeException('JLIB_DATABASE_ERROR_NULL_SUBQUERY_ALIAS');				}				$tables = '( ' . (string) $tables . ' ) AS ' . $this->quoteName($subQueryAlias);			}			$this->from = new JDatabaseQueryElement('FROM', $tables);		}		else		{			$this->from->append($tables);		}		return $this;	}	/**	 * Used to get a string to extract year from date column.	 *	 * Usage:	 * $query->select($query->year($query->quoteName('dateColumn')));	 *	 * @param   string  $date  Date column containing year to be extracted.	 *	 * @return  string  Returns string to extract year from a date.	 *	 * @since   12.1	 */	public function year($date)	{		return 'YEAR(' . $date . ')';	}	/**	 * Used to get a string to extract month from date column.	 *	 * Usage:	 * $query->select($query->month($query->quoteName('dateColumn')));	 *	 * @param   string  $date  Date column containing month to be extracted.	 *	 * @return  string  Returns string to extract month from a date.	 *	 * @since   12.1	 */	public function month($date)	{		return 'MONTH(' . $date . ')';	}	/**	 * Used to get a string to extract day from date column.	 *	 * Usage:	 * $query->select($query->day($query->quoteName('dateColumn')));	 *	 * @param   string  $date  Date column containing day to be extracted.	 *	 * @return  string  Returns string to extract day from a date.	 *	 * @since   12.1	 */	public function day($date)	{		return 'DAY(' . $date . ')';	}	/**	 * Used to get a string to extract hour from date column.	 *	 * Usage:	 * $query->select($query->hour($query->quoteName('dateColumn')));	 *	 * @param   string  $date  Date column containing hour to be extracted.	 *	 * @return  string  Returns string to extract hour from a date.	 *	 * @since   12.1	 */	public function hour($date)	{		return 'HOUR(' . $date . ')';	}	/**	 * Used to get a string to extract minute from date column.	 *	 * Usage:	 * $query->select($query->minute($query->quoteName('dateColumn')));	 *	 * @param   string  $date  Date column containing minute to be extracted.	 *	 * @return  string  Returns string to extract minute from a date.	 *	 * @since   12.1	 */	public function minute($date)	{		return 'MINUTE(' . $date . ')';	}	/**	 * Used to get a string to extract seconds from date column.	 *	 * Usage:	 * $query->select($query->second($query->quoteName('dateColumn')));	 *	 * @param   string  $date  Date column containing second to be extracted.	 *	 * @return  string  Returns string to extract second from a date.	 *	 * @since   12.1	 */	public function second($date)	{		return 'SECOND(' . $date . ')';	}	/**	 * Add a grouping column to the GROUP clause of the query.	 *	 * Usage:	 * $query->group('id');	 *	 * @param   mixed  $columns  A string or array of ordering columns.	 *	 * @return  JDatabaseQuery  Returns this object to allow chaining.	 *	 * @since   11.1	 */	public function group($columns)	{		if (is_null($this->group))		{			$this->group = new JDatabaseQueryElement('GROUP BY', $columns);		}		else		{			$this->group->append($columns);		}		return $this;	}	/**	 * A conditions to the HAVING clause of the query.	 *	 * Usage:	 * $query->group('id')->having('COUNT(id) > 5');	 *	 * @param   mixed   $conditions  A string or array of columns.	 * @param   string  $glue        The glue by which to join the conditions. Defaults to AND.	 *	 * @return  JDatabaseQuery  Returns this object to allow chaining.	 *	 * @since   11.1	 */	public function having($conditions, $glue = 'AND')	{		if (is_null($this->having))		{			$glue = strtoupper($glue);			$this->having = new JDatabaseQueryElement('HAVING', $conditions, " $glue ");		}		else		{			$this->having->append($conditions);		}		return $this;	}	/**	 * Add an INNER JOIN clause to the query.	 *	 * Usage:	 * $query->innerJoin('b ON b.id = a.id')->innerJoin('c ON c.id = b.id');	 *	 * @param   string  $condition  The join condition.	 *	 * @return  JDatabaseQuery  Returns this object to allow chaining.	 *	 * @since   11.1	 */	public function innerJoin($condition)	{		$this->join('INNER', $condition);		return $this;	}	/**	 * Add a table name to the INSERT clause of the query.	 *	 * Note that you must not mix insert, update, delete and select method calls when building a query.	 *	 * Usage:	 * $query->insert('#__a')->set('id = 1');	 * $query->insert('#__a')->columns('id, title')->values('1,2')->values('3,4');	 * $query->insert('#__a')->columns('id, title')->values(array('1,2', '3,4'));	 *	 * @param   mixed    $table           The name of the table to insert data into.	 * @param   boolean  $incrementField  The name of the field to auto increment.	 *	 * @return  JDatabaseQuery  Returns this object to allow chaining.	 *	 * @since   11.1	 */	public function insert($table, $incrementField=false)	{		$this->type = 'insert';		$this->insert = new JDatabaseQueryElement('INSERT INTO', $table);		$this->autoIncrementField = $incrementField;		return $this;	}	/**	 * Add a JOIN clause to the query.	 *	 * Usage:	 * $query->join('INNER', 'b ON b.id = a.id);	 *	 * @param   string  $type        The type of join. This string is prepended to the JOIN keyword.	 * @param   string  $conditions  A string or array of conditions.	 *	 * @return  JDatabaseQuery  Returns this object to allow chaining.	 *	 * @since   11.1	 */	public function join($type, $conditions)	{		if (is_null($this->join))		{			$this->join = array();		}		$this->join[] = new JDatabaseQueryElement(strtoupper($type) . ' JOIN', $conditions);		return $this;	}	/**	 * Add a LEFT JOIN clause to the query.	 *	 * Usage:	 * $query->leftJoin('b ON b.id = a.id')->leftJoin('c ON c.id = b.id');	 *	 * @param   string  $condition  The join condition.	 *	 * @return  JDatabaseQuery  Returns this object to allow chaining.	 *	 * @since   11.1	 */	public function leftJoin($condition)	{		$this->join('LEFT', $condition);		return $this;	}	/**	 * Get the length of a string in bytes.	 *	 * Note, use 'charLength' to find the number of characters in a string.	 *	 * Usage:	 * query->where($query->length('a').' > 3');	 *	 * @param   string  $value  The string to measure.	 *	 * @return  int	 *	 * @since   11.1	 */	public function length($value)	{		return 'LENGTH(' . $value . ')';	}	/**	 * Get the null or zero representation of a timestamp for the database driver.	 *	 * This method is provided for use where the query object is passed to a function for modification.	 * If you have direct access to the database object, it is recommended you use the nullDate method directly.	 *	 * Usage:	 * $query->where('modified_date <> '.$query->nullDate());	 *	 * @param   boolean  $quoted  Optionally wraps the null date in database quotes (true by default).	 *	 * @return  string  Null or zero representation of a timestamp.	 *	 * @since   11.1	 */	public function nullDate($quoted = true)	{		if (!($this->db instanceof JDatabaseDriver))		{			throw new RuntimeException('JLIB_DATABASE_ERROR_INVALID_DB_OBJECT');		}		$result = $this->db->getNullDate($quoted);		if ($quoted)		{			return $this->db->quote($result);		}		return $result;	}	/**	 * Add a ordering column to the ORDER clause of the query.	 *	 * Usage:	 * $query->order('foo')->order('bar');	 * $query->order(array('foo','bar'));	 *	 * @param   mixed  $columns  A string or array of ordering columns.	 *	 * @return  JDatabaseQuery  Returns this object to allow chaining.	 *	 * @since   11.1	 */	public function order($columns)	{		if (is_null($this->order))		{			$this->order = new JDatabaseQueryElement('ORDER BY', $columns);		}		else		{			$this->order->append($columns);		}		return $this;	}	/**	 * Add an OUTER JOIN clause to the query.	 *	 * Usage:	 * $query->outerJoin('b ON b.id = a.id')->outerJoin('c ON c.id = b.id');	 *	 * @param   string  $condition  The join condition.	 *	 * @return  JDatabaseQuery  Returns this object to allow chaining.	 *	 * @since   11.1	 */	public function outerJoin($condition)	{		$this->join('OUTER', $condition);		return $this;	}	/**	 * Method to quote and optionally escape a string to database requirements for insertion into the database.	 *	 * This method is provided for use where the query object is passed to a function for modification.	 * If you have direct access to the database object, it is recommended you use the quote method directly.	 *	 * Note that 'q' is an alias for this method as it is in JDatabaseDriver.	 *	 * Usage:	 * $query->quote('fulltext');	 * $query->q('fulltext');	 * $query->q(array('option', 'fulltext'));	 *	 * @param   mixed    $text    A string or an array of strings to quote.	 * @param   boolean  $escape  True to escape the string, false to leave it unchanged.	 *	 * @return  string  The quoted input string.	 *	 * @since   11.1	 * @throws  RuntimeException if the internal db property is not a valid object.	 */	public function quote($text, $escape = true)	{		if (!($this->db instanceof JDatabaseDriver))		{			throw new RuntimeException('JLIB_DATABASE_ERROR_INVALID_DB_OBJECT');		}		return $this->db->quote($text, $escape);	}	/**	 * Wrap an SQL statement identifier name such as column, table or database names in quotes to prevent injection	 * risks and reserved word conflicts.	 *	 * This method is provided for use where the query object is passed to a function for modification.	 * If you have direct access to the database object, it is recommended you use the quoteName method directly.	 *	 * Note that 'qn' is an alias for this method as it is in JDatabaseDriver.	 *	 * Usage:	 * $query->quoteName('#__a');	 * $query->qn('#__a');	 *	 * @param   mixed  $name  The identifier name to wrap in quotes, or an array of identifier names to wrap in quotes.	 *                        Each type supports dot-notation name.	 * @param   mixed  $as    The AS query part associated to $name. It can be string or array, in latter case it has to be	 *                        same length of $name; if is null there will not be any AS part for string or array element.	 *	 * @return  mixed  The quote wrapped name, same type of $name.	 *	 * @since   11.1	 * @throws  RuntimeException if the internal db property is not a valid object.	 */	public function quoteName($name, $as = null)	{		if (!($this->db instanceof JDatabaseDriver))		{			throw new RuntimeException('JLIB_DATABASE_ERROR_INVALID_DB_OBJECT');		}		return $this->db->quoteName($name, $as);	}	/**	 * Add a RIGHT JOIN clause to the query.	 *	 * Usage:	 * $query->rightJoin('b ON b.id = a.id')->rightJoin('c ON c.id = b.id');	 *	 * @param   string  $condition  The join condition.	 *	 * @return  JDatabaseQuery  Returns this object to allow chaining.	 *	 * @since   11.1	 */	public function rightJoin($condition)	{		$this->join('RIGHT', $condition);		return $this;	}	/**	 * Add a single column, or array of columns to the SELECT clause of the query.	 *	 * Note that you must not mix insert, update, delete and select method calls when building a query.	 * The select method can, however, be called multiple times in the same query.	 *	 * Usage:	 * $query->select('a.*')->select('b.id');	 * $query->select(array('a.*', 'b.id'));	 *	 * @param   mixed  $columns  A string or an array of field names.	 *	 * @return  JDatabaseQuery  Returns this object to allow chaining.	 *	 * @since   11.1	 */	public function select($columns)	{		$this->type = 'select';		if (is_null($this->select))		{			$this->select = new JDatabaseQueryElement('SELECT', $columns);		}		else		{			$this->select->append($columns);		}		return $this;	}	/**	 * Add a single condition string, or an array of strings to the SET clause of the query.	 *	 * Usage:	 * $query->set('a = 1')->set('b = 2');	 * $query->set(array('a = 1', 'b = 2');	 *	 * @param   mixed   $conditions  A string or array of string conditions.	 * @param   string  $glue        The glue by which to join the condition strings. Defaults to ,.	 *                               Note that the glue is set on first use and cannot be changed.	 *	 * @return  JDatabaseQuery  Returns this object to allow chaining.	 *	 * @since   11.1	 */	public function set($conditions, $glue = ',')	{		if (is_null($this->set))		{			$glue = strtoupper($glue);			$this->set = new JDatabaseQueryElement('SET', $conditions, "\n\t$glue ");		}		else		{			$this->set->append($conditions);		}		return $this;	}	/**	 * Allows a direct query to be provided to the database	 * driver's setQuery() method, but still allow queries	 * to have bounded variables.	 *	 * Usage:	 * $query->setQuery('select * from #__users');	 *	 * @param   mixed  $query  An SQL Query	 *	 * @return  JDatabaseQuery  Returns this object to allow chaining.	 *	 * @since   12.1	 */	public function setQuery($query)	{		$this->sql = $query;		return $this;	}	/**	 * Add a table name to the UPDATE clause of the query.	 *	 * Note that you must not mix insert, update, delete and select method calls when building a query.	 *	 * Usage:	 * $query->update('#__foo')->set(...);	 *	 * @param   string  $table  A table to update.	 *	 * @return  JDatabaseQuery  Returns this object to allow chaining.	 *	 * @since   11.1	 */	public function update($table)	{		$this->type = 'update';		$this->update = new JDatabaseQueryElement('UPDATE', $table);		return $this;	}	/**	 * Adds a tuple, or array of tuples that would be used as values for an INSERT INTO statement.	 *	 * Usage:	 * $query->values('1,2,3')->values('4,5,6');	 * $query->values(array('1,2,3', '4,5,6'));	 *	 * @param   string  $values  A single tuple, or array of tuples.	 *	 * @return  JDatabaseQuery  Returns this object to allow chaining.	 *	 * @since   11.1	 */	public function values($values)	{		if (is_null($this->values))		{			$this->values = new JDatabaseQueryElement('()', $values, '),(');		}		else		{			$this->values->append($values);		}		return $this;	}	/**	 * Add a single condition, or an array of conditions to the WHERE clause of the query.	 *	 * Usage:	 * $query->where('a = 1')->where('b = 2');	 * $query->where(array('a = 1', 'b = 2'));	 *	 * @param   mixed   $conditions  A string or array of where conditions.	 * @param   string  $glue        The glue by which to join the conditions. Defaults to AND.	 *                               Note that the glue is set on first use and cannot be changed.	 *	 * @return  JDatabaseQuery  Returns this object to allow chaining.	 *	 * @since   11.1	 */	public function where($conditions, $glue = 'AND')	{		if (is_null($this->where))		{			$glue = strtoupper($glue);			$this->where = new JDatabaseQueryElement('WHERE', $conditions, " $glue ");		}		else		{			$this->where->append($conditions);		}		return $this;	}   /**     * Method to provide deep copy support to nested objects and     * arrays when cloning.     *     * @return  void     *     * @since   11.3     */    public function __clone()    {        foreach ($this as $k => $v)        {            if ($k === 'db')            {                continue;            }            if (is_object($v) || is_array($v))            {                $this->$k = unserialize(serialize($v));            }        }    }    /**	 * Add a query to UNION with the current query.	 * Multiple unions each require separate statements and create an array of unions.	 *	 * Usage:	 * $query->union('SELECT name FROM  #__foo')	 * $query->union('SELECT name FROM  #__foo','distinct')	 * $query->union(array('SELECT name FROM  #__foo','SELECT name FROM  #__bar'))	 *	 * @param   mixed    $query     The JDatabaseQuery object or string to union.	 * @param   boolean  $distinct  True to only return distinct rows from the union.	 * @param   string   $glue      The glue by which to join the conditions.	 *	 * @return  mixed    The JDatabaseQuery object on success or boolean false on failure.	 *	 * @since   12.1	 */	public function union($query, $distinct = false, $glue = '')	{		// Clear any ORDER BY clause in UNION query		// See http://dev.mysql.com/doc/refman/5.0/en/union.html		if (!is_null($this->order))		{			$this->clear('order');		}		// Set up the DISTINCT flag, the name with parentheses, and the glue.		if ($distinct)		{			$name = 'UNION DISTINCT ()';			$glue = ')' . PHP_EOL . 'UNION DISTINCT (';		}		else		{			$glue = ')' . PHP_EOL . 'UNION (';			$name = 'UNION ()';		}		// Get the JDatabaseQueryElement if it does not exist		if (is_null($this->union))		{				$this->union = new JDatabaseQueryElement($name, $query, "$glue");		}		// Otherwise append the second UNION.		else		{			$glue = '';			$this->union->append($query);		}		return $this;	}	/**	 * Add a query to UNION DISTINCT with the current query. Simply a proxy to Union with the Distinct clause.	 *	 * Usage:	 * $query->unionDistinct('SELECT name FROM  #__foo')	 *	 * @param   mixed   $query  The JDatabaseQuery object or string to union.	 * @param   string  $glue   The glue by which to join the conditions.	 *	 * @return  mixed   The JDatabaseQuery object on success or boolean false on failure.	 *	 * @since   12.1	 */	public function unionDistinct($query, $glue = '')	{		$distinct = true;		// Apply the distinct flag to the union.		return $this->union($query, $distinct, $glue);	}	/**	 * Find and replace sprintf-like tokens in a format string.	 * Each token takes one of the following forms:	 *     %%       - A literal percent character.	 *     %[t]     - Where [t] is a type specifier.	 *     %[n]$[x] - Where [n] is an argument specifier and [t] is a type specifier.	 *	 * Types:	 * a - Numeric: Replacement text is coerced to a numeric type but not quoted or escaped.	 * e - Escape: Replacement text is passed to $this->escape().	 * E - Escape (extra): Replacement text is passed to $this->escape() with true as the second argument.	 * n - Name Quote: Replacement text is passed to $this->quoteName().	 * q - Quote: Replacement text is passed to $this->quote().	 * Q - Quote (no escape): Replacement text is passed to $this->quote() with false as the second argument.	 * r - Raw: Replacement text is used as-is. (Be careful)	 *	 * Date Types:	 * - Replacement text automatically quoted (use uppercase for Name Quote).	 * - Replacement text should be a string in date format or name of a date column.	 * y/Y - Year	 * m/M - Month	 * d/D - Day	 * h/H - Hour	 * i/I - Minute	 * s/S - Second	 *	 * Invariable Types:	 * - Takes no argument.	 * - Argument index not incremented.	 * t - Replacement text is the result of $this->currentTimestamp().	 * z - Replacement text is the result of $this->nullDate(false).	 * Z - Replacement text is the result of $this->nullDate(true).	 *	 * Usage:	 * $query->format('SELECT %1$n FROM %2$n WHERE %3$n = %4$a', 'foo', '#__foo', 'bar', 1);	 * Returns: SELECT `foo` FROM `#__foo` WHERE `bar` = 1	 *	 * Notes:	 * The argument specifier is optional but recommended for clarity.	 * The argument index used for unspecified tokens is incremented only when used.	 *	 * @param   string  $format  The formatting string.	 *	 * @return  string  Returns a string produced according to the formatting string.	 *	 * @since   12.3	 */	public function format($format)	{		$query = $this;		$args = array_slice(func_get_args(), 1);		array_unshift($args, null);		$i = 1;		$func = function ($match) use ($query, $args, &$i)		{			if (isset($match[6]) && $match[6] == '%')			{				return '%';			}			// No argument required, do not increment the argument index.			switch ($match[5])			{				case 't':					return $query->currentTimestamp();					break;				case 'z':					return $query->nullDate(false);					break;				case 'Z':					return $query->nullDate(true);					break;			}			// Increment the argument index only if argument specifier not provided.			$index = is_numeric($match[4]) ? (int) $match[4] : $i++;			if (!$index || !isset($args[$index]))			{				// TODO - What to do? sprintf() throws a Warning in these cases.				$replacement = '';			}			else			{				$replacement = $args[$index];			}			switch ($match[5])			{				case 'a':					return 0 + $replacement;					break;				case 'e':					return $query->escape($replacement);					break;				case 'E':					return $query->escape($replacement, true);					break;				case 'n':					return $query->quoteName($replacement);					break;				case 'q':					return $query->quote($replacement);					break;				case 'Q':					return $query->quote($replacement, false);					break;				case 'r':					return $replacement;					break;				// Dates				case 'y':					return $query->year($query->quote($replacement));					break;				case 'Y':					return $query->year($query->quoteName($replacement));					break;				case 'm':					return $query->month($query->quote($replacement));					break;				case 'M':					return $query->month($query->quoteName($replacement));					break;				case 'd':					return $query->day($query->quote($replacement));					break;				case 'D':					return $query->day($query->quoteName($replacement));					break;				case 'h':					return $query->hour($query->quote($replacement));					break;				case 'H':					return $query->hour($query->quoteName($replacement));					break;				case 'i':					return $query->minute($query->quote($replacement));					break;				case 'I':					return $query->minute($query->quoteName($replacement));					break;				case 's':					return $query->second($query->quote($replacement));					break;				case 'S':					return $query->second($query->quoteName($replacement));					break;			}			return '';		};		/**		 * Regexp to find an replace all tokens.		 * Matched fields:		 * 0: Full token		 * 1: Everything following '%'		 * 2: Everything following '%' unless '%'		 * 3: Argument specifier and '$'		 * 4: Argument specifier		 * 5: Type specifier		 * 6: '%' if full token is '%%'		 */		return preg_replace_callback('#%(((([\d]+)\$)?([aeEnqQryYmMdDhHiIsStzZ]))|(%))#', $func, $format);	}	/**	 * Add to the current date and time.	 * Usage:	 * $query->select($query->dateAdd());	 * Prefixing the interval with a - (negative sign) will cause subtraction to be used.	 * Note: Not all drivers support all units.	 *	 * @param   datetime  $date      The date to add to. May be date or datetime	 * @param   string    $interval  The string representation of the appropriate number of units	 * @param   string    $datePart  The part of the date to perform the addition on	 *	 * @return  string  The string with the appropriate sql for addition of dates	 *	 * @since   13.1	 *	 * @see http://dev.mysql.com/doc/refman/5.1/en/date-and-time-functions.html#function_date-add	 */	public function dateAdd($date, $interval, $datePart)	{		return trim("DATE_ADD('" . $date . "', INTERVAL " . $interval . ' ' . $datePart . ')');	}	/**	 * Add a query to UNION ALL with the current query.	 * Multiple unions each require separate statements and create an array of unions.	 *	 * Usage:	 * $query->union('SELECT name FROM  #__foo')	 * $query->union('SELECT name FROM  #__foo','distinct')	 * $query->union(array('SELECT name FROM  #__foo','SELECT name FROM  #__bar'))	 *	 * @param   mixed    $query     The JDatabaseQuery object or string to union.	 * @param   boolean  $distinct  True to only return distinct rows from the union.	 * @param   string   $glue      The glue by which to join the conditions.	 *	 * @return  mixed    The JDatabaseQuery object on success or boolean false on failure.	 *	 * @since   13.1	 */	public function unionAll($query, $distinct = false, $glue = '')	{			$glue = ')' . PHP_EOL . 'UNION ALL (';			$name = 'UNION ALL ()';		// Get the JDatabaseQueryElement if it does not exist		if (is_null($this->unionAll))		{			$this->unionAll = new JDatabaseQueryElement($name, $query, "$glue");		}		// Otherwise append the second UNION.		else		{			$glue = '';			$this->unionAll->append($query);		}		return $this;	}}
<?php/** * @package     Joomla.Administrator * @subpackage  com_menus * * @copyright   Copyright (C) 2005 - 2013 Open Source Matters, Inc. All rights reserved. * @license     GNU General Public License version 2 or later; see LICENSE.txt */defined('_JEXEC') or die;/** * The Menu Item Controller * * @package     Joomla.Administrator * @subpackage  com_menus * @since       1.6 */class MenusControllerItem extends JControllerForm{	/**	 * Method to add a new menu item.	 *	 * @return  mixed  True if the record can be added, a JError object if not.	 *	 * @since   1.6	 */	public function add()	{		$app = JFactory::getApplication();		$context = 'com_menus.edit.item';		$result = parent::add();		if ($result)		{			$app->setUserState($context . '.type', null);			$app->setUserState($context . '.link', null);			$menuType = $app->getUserStateFromRequest($this->context . '.filter.menutype', 'menutype', 'mainmenu', 'cmd');			$this->setRedirect(JRoute::_('index.php?option=com_menus&view=item&menutype=' . $menuType . $this->getRedirectToItemAppend(), false));		}		return $result;	}	/**	 * Method to run batch operations.	 *	 * @param   object  $model  The model.	 *	 * @return  boolean	 True if successful, false otherwise and internal error is set.	 *	 * @since   1.6	 */	public function batch($model = null)	{		JSession::checkToken() or jexit(JText::_('JINVALID_TOKEN'));		$model = $this->getModel('Item', '', array());		// Preset the redirect		$this->setRedirect(JRoute::_('index.php?option=com_menus&view=items' . $this->getRedirectToListAppend(), false));		return parent::batch($model);	}	/**	 * Method to cancel an edit.	 *	 * @param   string  $key  The name of the primary key of the URL variable.	 *	 * @return  boolean  True if access level checks pass, false otherwise.	 *	 * @since   1.6	 */	public function cancel($key = null)	{		JSession::checkToken() or jexit(JText::_('JINVALID_TOKEN'));		$app = JFactory::getApplication();		$context = 'com_menus.edit.item';		$result = parent::cancel();		if ($result)		{			// Clear the ancillary data from the session.			$app->setUserState($context . '.type', null);			$app->setUserState($context . '.link', null);		}	}	/**	 * Method to edit an existing record.	 *	 * @param   string  $key     The name of the primary key of the URL variable.	 * @param   string  $urlVar  The name of the URL variable if different from the primary key	 * (sometimes required to avoid router collisions).	 *	 * @return  boolean  True if access level check and checkout passes, false otherwise.	 *	 * @since   1.6	 */	public function edit($key = null, $urlVar = null)	{		$app = JFactory::getApplication();		$result = parent::edit();		if ($result)		{			// Push the new ancillary data into the session.			$app->setUserState('com_menus.edit.item.type', null);			$app->setUserState('com_menus.edit.item.link', null);		}		return true;	}	/**	 * Method to save a record.	 *	 * @param   string  $key     The name of the primary key of the URL variable.	 * @param   string  $urlVar  The name of the URL variable if different from the primary key (sometimes required to avoid router collisions).	 *	 * @return  boolean  True if successful, false otherwise.	 *	 * @since   1.6	 */	public function save($key = null, $urlVar = null)	{		// Check for request forgeries.		JSession::checkToken() or jexit(JText::_('JINVALID_TOKEN'));		$app      = JFactory::getApplication();		$model    = $this->getModel('Item', '', array());		$data     = $this->input->post->get('jform', array(), 'array');		$task     = $this->getTask();		$context  = 'com_menus.edit.item';		$recordId = $this->input->getInt('id');		if (!$this->checkEditId($context, $recordId))		{			// Somehow the person just went to the form and saved it - we don't allow that.			$this->setError(JText::sprintf('JLIB_APPLICATION_ERROR_UNHELD_ID', $recordId));			$this->setMessage($this->getError(), 'error');			$this->setRedirect(JRoute::_('index.php?option=com_menus&view=items' . $this->getRedirectToListAppend(), false));			return false;		}		// Populate the row id from the session.		$data['id'] = $recordId;		// The save2copy task needs to be handled slightly differently.		if ($task == 'save2copy')		{			// Check-in the original row.			if ($model->checkin($data['id']) === false)			{				// Check-in failed, go back to the item and display a notice.				$this->setMessage(JText::sprintf('JLIB_APPLICATION_ERROR_CHECKIN_FAILED', $model->getError()), 'warning');				return false;			}			// Reset the ID and then treat the request as for Apply.			$data['id'] = 0;			$data['associations'] = array();			$task = 'apply';		}		// Validate the posted data.		// This post is made up of two forms, one for the item and one for params.		$form = $model->getForm($data);		if (!$form)		{			JError::raiseError(500, $model->getError());			return false;		}		$data = $model->validate($form, $data);		// Check for the special 'request' entry.		if ($data['type'] == 'component' && isset($data['request']) && is_array($data['request']) && !empty($data['request']))		{			// Parse the submitted link arguments.			$args = array();			parse_str(parse_url($data['link'], PHP_URL_QUERY), $args);			// Merge in the user supplied request arguments.			$args = array_merge($args, $data['request']);			$data['link'] = 'index.php?' . urldecode(http_build_query($args, '', '&'));			unset($data['request']);		}		// Check for validation errors.		if ($data === false)		{			// Get the validation messages.			$errors = $model->getErrors();			// Push up to three validation messages out to the user.			for ($i = 0, $n = count($errors); $i < $n && $i < 3; $i++)			{				if ($errors[$i] instanceof Exception)				{					$app->enqueueMessage($errors[$i]->getMessage(), 'warning');				}				else				{					$app->enqueueMessage($errors[$i], 'warning');				}			}			// Save the data in the session.			$app->setUserState('com_menus.edit.item.data', $data);			// Redirect back to the edit screen.			$this->setRedirect(JRoute::_('index.php?option=' . $this->option . '&view=' . $this->view_item . $this->getRedirectToItemAppend($recordId), false));			return false;		}		// Attempt to save the data.		if (!$model->save($data))		{			// Save the data in the session.			$app->setUserState('com_menus.edit.item.data', $data);			// Redirect back to the edit screen.			$this->setMessage(JText::sprintf('JLIB_APPLICATION_ERROR_SAVE_FAILED', $model->getError()), 'warning');			$this->setRedirect(JRoute::_('index.php?option=' . $this->option . '&view=' . $this->view_item . $this->getRedirectToItemAppend($recordId), false));			return false;		}		// Save succeeded, check-in the row.		if ($model->checkin($data['id']) === false)		{			// Check-in failed, go back to the row and display a notice.			$this->setMessage(JText::sprintf('JLIB_APPLICATION_ERROR_CHECKIN_FAILED', $model->getError()), 'warning');			$this->setRedirect(JRoute::_('index.php?option=' . $this->option . '&view=' . $this->view_item . $this->getRedirectToItemAppend($recordId), false));			return false;		}		$this->setMessage(JText::_('COM_MENUS_SAVE_SUCCESS'));		// Redirect the user and adjust session state based on the chosen task.		switch ($task)		{			case 'apply':				// Set the row data in the session.				$recordId = $model->getState($this->context . '.id');				$this->holdEditId($context, $recordId);				$app->setUserState('com_menus.edit.item.data', null);				$app->setUserState('com_menus.edit.item.type', null);				$app->setUserState('com_menus.edit.item.link', null);				// Redirect back to the edit screen.				$this->setRedirect(JRoute::_('index.php?option=' . $this->option . '&view=' . $this->view_item . $this->getRedirectToItemAppend($recordId), false));				break;			case 'save2new':				// Clear the row id and data in the session.				$this->releaseEditId($context, $recordId);				$app->setUserState('com_menus.edit.item.data', null);				$app->setUserState('com_menus.edit.item.type', null);				$app->setUserState('com_menus.edit.item.link', null);				$app->setUserState('com_menus.edit.item.menutype', $model->getState('item.menutype'));				// Redirect back to the edit screen.				$this->setRedirect(JRoute::_('index.php?option=' . $this->option . '&view=' . $this->view_item . $this->getRedirectToItemAppend(), false));				break;			default:				// Clear the row id and data in the session.				$this->releaseEditId($context, $recordId);				$app->setUserState('com_menus.edit.item.data', null);				$app->setUserState('com_menus.edit.item.type', null);				$app->setUserState('com_menus.edit.item.link', null);				// Redirect to the list screen.				$this->setRedirect(JRoute::_('index.php?option=' . $this->option . '&view=' . $this->view_list . $this->getRedirectToListAppend(), false));				break;		}	}	/**	 * Sets the type of the menu item currently being edited.	 *	 * @return  void	 *	 * @since   1.6	 */	public function setType()	{		$app = JFactory::getApplication();		// Get the posted values from the request.		$data = $this->input->post->get('jform', array(), 'array');		$recordId = $this->input->getInt('id');		// Get the type.		$type = $data['type'];		$type = json_decode(base64_decode($type));		$title = isset($type->title) ? $type->title : null;		$recordId = isset($type->id) ? $type->id : 0;		$specialTypes = array('alias', 'separator', 'url', 'heading');		if (!in_array($title, $specialTypes))		{			$title = 'component';		}		$app->setUserState('com_menus.edit.item.type', $title);		if ($title == 'component')		{			if (isset($type->request))			{				$component = JComponentHelper::getComponent($type->request->option);				$data['component_id'] = $component->id;				$app->setUserState('com_menus.edit.item.link', 'index.php?' . JURI::buildQuery((array) $type->request));			}		}		// If the type is alias you just need the item id from the menu item referenced.		elseif ($title == 'alias')		{			$app->setUserState('com_menus.edit.item.link', 'index.php?Itemid=');		}		unset($data['request']);		$data['type'] = $title;		if ($this->input->get('fieldtype') == 'type')		{			$data['link'] = $app->getUserState('com_menus.edit.item.link');		}		//Save the data in the session.		$app->setUserState('com_menus.edit.item.data', $data);		$this->type = $type;		$this->setRedirect(JRoute::_('index.php?option=' . $this->option . '&view=' . $this->view_item . $this->getRedirectToItemAppend($recordId), false));	}}
<?php/** * @package     Joomla.Administrator * @subpackage  com_config * * @copyright   Copyright (C) 2005 - 2013 Open Source Matters, Inc. All rights reserved. * @license     GNU General Public License version 2 or later; see LICENSE.txt */defined('JPATH_BASE') or die;/** * Text Filters form field. * * @package     Joomla.Administrator * @subpackage  com_config * @since       1.6 */class JFormFieldFilters extends JFormField{	/**	 * The form field type.	 *	 * @var		string	 * @since   1.6	 */	public $type = 'Filters';	/**	 * Method to get the field input markup.	 *	 * TODO: Add access check.	 *	 * @return  string	The field input markup.	 * @since   1.6	 */	protected function getInput()	{		// Get the available user groups.		$groups = $this->getUserGroups();		// Build the form control.		$html = array();		// Open the table.		$html[] = '<table id="filter-config" class="table table-striped">';		// The table heading.		$html[] = '	<thead>';		$html[] = '	<tr>';		$html[] = '		<th>';		$html[] = '			<span class="acl-action">'.JText::_('JGLOBAL_FILTER_GROUPS_LABEL').'</span>';		$html[] = '		</th>';		$html[] = '		<th>';		$html[] = '			<span class="acl-action" title="'.JText::_('JGLOBAL_FILTER_TYPE_LABEL').'">'.JText::_('JGLOBAL_FILTER_TYPE_LABEL').'</span>';		$html[] = '		</th>';		$html[] = '		<th>';		$html[] = '			<span class="acl-action" title="'.JText::_('JGLOBAL_FILTER_TAGS_LABEL').'">'.JText::_('JGLOBAL_FILTER_TAGS_LABEL').'</span>';		$html[] = '		</th>';		$html[] = '		<th>';		$html[] = '			<span class="acl-action" title="'.JText::_('JGLOBAL_FILTER_ATTRIBUTES_LABEL').'">'.JText::_('JGLOBAL_FILTER_ATTRIBUTES_LABEL').'</span>';		$html[] = '		</th>';		$html[] = '	</tr>';		$html[] = '	</thead>';		// The table body.		$html[] = '	<tbody>';		foreach ($groups as $group)		{			if (!isset($this->value[$group->value]))			{				$this->value[$group->value] = array('filter_type' => 'BL', 'filter_tags' => '', 'filter_attributes' => '');			}			$group_filter = $this->value[$group->value];			$html[] = '	<tr>';			$html[] = '		<th class="acl-groups left">';			$html[] = '			'.str_repeat('<span class="gi">|&mdash;</span>', $group->level).$group->text;			$html[] = '		</th>';			$html[] = '		<td>';			$html[] = '				<select name="'.$this->name.'['.$group->value.'][filter_type]" id="'.$this->id.$group->value.'_filter_type">';			$html[] = '					<option value="BL"'.($group_filter['filter_type'] == 'BL' ? ' selected="selected"' : '').'>'.JText::_('COM_CONFIG_FIELD_FILTERS_DEFAULT_BLACK_LIST').'</option>';			$html[] = '					<option value="CBL"'.($group_filter['filter_type'] == 'CBL' ? ' selected="selected"' : '').'>'.JText::_('COM_CONFIG_FIELD_FILTERS_CUSTOM_BLACK_LIST').'</option>';			$html[] = '					<option value="WL"'.($group_filter['filter_type'] == 'WL' ? ' selected="selected"' : '').'>'.JText::_('COM_CONFIG_FIELD_FILTERS_WHITE_LIST').'</option>';			$html[] = '					<option value="NH"'.($group_filter['filter_type'] == 'NH' ? ' selected="selected"' : '').'>'.JText::_('COM_CONFIG_FIELD_FILTERS_NO_HTML').'</option>';			$html[] = '					<option value="NONE"'.($group_filter['filter_type'] == 'NONE' ? ' selected="selected"' : '').'>'.JText::_('COM_CONFIG_FIELD_FILTERS_NO_FILTER').'</option>';			$html[] = '				</select>';			$html[] = '		</td>';			$html[] = '		<td>';			$html[] = '				<input name="'.$this->name.'['.$group->value.'][filter_tags]" id="'.$this->id.$group->value.'_filter_tags" title="'.JText::_('JGLOBAL_FILTER_TAGS_LABEL').'" value="'.$group_filter['filter_tags'].'"/>';			$html[] = '		</td>';			$html[] = '		<td>';			$html[] = '				<input name="'.$this->name.'['.$group->value.'][filter_attributes]" id="'.$this->id.$group->value.'_filter_attributes" title="'.JText::_('JGLOBAL_FILTER_ATTRIBUTES_LABEL').'" value="'.$group_filter['filter_attributes'].'"/>';			$html[] = '		</td>';			$html[] = '	</tr>';		}		$html[] = '	</tbody>';		// Close the table.		$html[] = '</table>';		// Add notes		$html[] = '<div class="alert">';		$html[] = '<p>' . JText::_('JGLOBAL_FILTER_TYPE_DESC') . '</p>';		$html[] = '<p>' . JText::_('JGLOBAL_FILTER_TAGS_DESC') . '</p>';		$html[] = '<p>' . JText::_('JGLOBAL_FILTER_ATTRIBUTES_DESC') . '</p>';		$html[] = '</div>';		return implode("\n", $html);	}	/**	 * A helper to get the list of user groups.	 *	 * @return  array	 * @since   1.6	 */	protected function getUserGroups()	{		// Get a database object.		$db = JFactory::getDbo();		// Get the user groups from the database.		$query = $db->getQuery(true)			->select('a.id AS value, a.title AS text, COUNT(DISTINCT b.id) AS level')			->from('#__usergroups AS a')			->join('LEFT', '#__usergroups AS b on a.lft > b.lft AND a.rgt < b.rgt')			->group('a.id, a.title, a.lft')			->order('a.lft ASC');		$db->setQuery($query);		$options = $db->loadObjectList();		return $options;	}}
<?php/** * @package     Joomla.Administrator * @subpackage  com_plugins * * @copyright   Copyright (C) 2005 - 2013 Open Source Matters, Inc. All rights reserved. * @license     GNU General Public License version 2 or later; see LICENSE.txt */defined('_JEXEC') or die;/** * View to edit a plugin. * * @package     Joomla.Administrator * @subpackage  com_plugins * @since       1.5 */class PluginsViewPlugin extends JViewLegacy{	protected $item;	protected $form;	protected $state;	/**	 * Display the view	 */	public function display($tpl = null)	{		$this->state	= $this->get('State');		$this->item		= $this->get('Item');		$this->form		= $this->get('Form');		// Check for errors.		if (count($errors = $this->get('Errors')))		{			JError::raiseError(500, implode("\n", $errors));			return false;		}		$this->addToolbar();		parent::display($tpl);	}	/**	 * Add the page title and toolbar.	 *	 * @since   1.6	 */	protected function addToolbar()	{		JFactory::getApplication()->input->set('hidemainmenu', true);		$user  = JFactory::getUser();		$canDo = PluginsHelper::getActions();		JToolbarHelper::title(JText::sprintf('COM_PLUGINS_MANAGER_PLUGIN', JText::_($this->item->name)), 'plugin');		// If not checked out, can save the item.		if ($canDo->get('core.edit'))		{			JToolbarHelper::apply('plugin.apply');			JToolbarHelper::save('plugin.save');		}		JToolbarHelper::cancel('plugin.cancel', 'JTOOLBAR_CLOSE');		JToolbarHelper::divider();		// Get the help information for the plugin item.		$lang = JFactory::getLanguage();		$help = $this->get('Help');		if ($lang->hasKey($help->url))		{			$debug = $lang->setDebug(false);			$url = JText::_($help->url);			$lang->setDebug($debug);		}		else		{			$url = null;		}		JToolbarHelper::help($help->key, false, $url);	}}
<?php/** * @package     Joomla.Administrator * @subpackage  com_plugins * * @copyright   Copyright (C) 2005 - 2013 Open Source Matters, Inc. All rights reserved. * @license     GNU General Public License version 2 or later; see LICENSE.txt */defined('_JEXEC') or die;/** * Plugin model. * * @package     Joomla.Administrator * @subpackage  com_plugins * @since       1.6 */class PluginsModelPlugin extends JModelAdmin{	/**	 * @var		string	The help screen key for the module.	 * @since   1.6	 */	protected $helpKey = 'JHELP_EXTENSIONS_PLUGIN_MANAGER_EDIT';	/**	 * @var		string	The help screen base URL for the module.	 * @since   1.6	 */	protected $helpURL;	protected $_cache;	/**	 * @var		string	The event to trigger after saving the data.	 * @since   1.6	 */	protected $event_after_save = 'onExtensionAfterSave';	/**	 * @var		string	The event to trigger after before the data.	 * @since   1.6	 */	protected $event_before_save = 'onExtensionBeforeSave';	/**	 * Method to get the record form.	 *	 * @param   array  $data		Data for the form.	 * @param   boolean	$loadData	True if the form is to load its own data (default case), false if not.	 * @return  JForm	A JForm object on success, false on failure	 * @since   1.6	 */	public function getForm($data = array(), $loadData = true)	{		// The folder and element vars are passed when saving the form.		if (empty($data))		{			$item		= $this->getItem();			$folder		= $item->folder;			$element	= $item->element;		}		else		{			$folder		= JArrayHelper::getValue($data, 'folder', '', 'cmd');			$element	= JArrayHelper::getValue($data, 'element', '', 'cmd');		}		// These variables are used to add data from the plugin XML files.		$this->setState('item.folder',	$folder);		$this->setState('item.element',	$element);		// Get the form.		$form = $this->loadForm('com_plugins.plugin', 'plugin', array('control' => 'jform', 'load_data' => $loadData));		if (empty($form))		{			return false;		}		// Modify the form based on access controls.		if (!$this->canEditState((object) $data))		{			// Disable fields for display.			$form->setFieldAttribute('ordering', 'disabled', 'true');			$form->setFieldAttribute('enabled', 'disabled', 'true');			// Disable fields while saving.			// The controller has already verified this is a record you can edit.			$form->setFieldAttribute('ordering', 'filter', 'unset');			$form->setFieldAttribute('enabled', 'filter', 'unset');		}		return $form;	}	/**	 * Method to get the data that should be injected in the form.	 *	 * @return  mixed  The data for the form.	 * @since   1.6	 */	protected function loadFormData()	{		// Check the session for previously entered form data.		$data = JFactory::getApplication()->getUserState('com_plugins.edit.plugin.data', array());		if (empty($data))		{			$data = $this->getItem();		}		$this->preprocessData('com_plugins.plugin', $data);		return $data;	}	/**	 * Method to get a single record.	 *	 * @param   integer	The id of the primary key.	 *	 * @return  mixed  Object on success, false on failure.	 */	public function getItem($pk = null)	{		$pk = (!empty($pk)) ? $pk : (int) $this->getState('plugin.id');		if (!isset($this->_cache[$pk]))		{			$false	= false;			// Get a row instance.			$table = $this->getTable();			// Attempt to load the row.			$return = $table->load($pk);			// Check for a table object error.			if ($return === false && $table->getError())			{				$this->setError($table->getError());				return $false;			}			// Convert to the JObject before adding other data.			$properties = $table->getProperties(1);			$this->_cache[$pk] = JArrayHelper::toObject($properties, 'JObject');			// Convert the params field to an array.			$registry = new JRegistry;			$registry->loadString($table->params);			$this->_cache[$pk]->params = $registry->toArray();			// Get the plugin XML.			$path = JPath::clean(JPATH_PLUGINS.'/'.$table->folder.'/'.$table->element.'/'.$table->element.'.xml');			if (file_exists($path))			{				$this->_cache[$pk]->xml = simplexml_load_file($path);			} else {				$this->_cache[$pk]->xml = null;			}		}		return $this->_cache[$pk];	}	/**	 * Returns a reference to the a Table object, always creating it.	 *	 * @param   type	The table type to instantiate	 * @param   string	A prefix for the table class name. Optional.	 * @param   array  Configuration array for model. Optional.	 * @return  JTable	A database object	*/	public function getTable($type = 'Extension', $prefix = 'JTable', $config = array())	{		return JTable::getInstance($type, $prefix, $config);	}	/**	 * Auto-populate the model state.	 *	 * Note. Calling getState in this method will result in recursion.	 *	 * @return  void	 * @since   1.6	 */	protected function populateState()	{		// Execute the parent method.		parent::populateState();		$app = JFactory::getApplication('administrator');		// Load the User state.		$pk = $app->input->getInt('extension_id');		$this->setState('plugin.id', $pk);	}	/**	 * @param   object	A form object.	 * @param   mixed	The data expected for the form.	 * @return  mixed  True if successful.	 * @throws	Exception if there is an error in the form event.	 * @since   1.6	 */	protected function preprocessForm(JForm $form, $data, $group = 'content')	{		jimport('joomla.filesystem.path');		$folder		= $this->getState('item.folder');		$element	= $this->getState('item.element');		$lang		= JFactory::getLanguage();		$client		= JApplicationHelper::getClientInfo(0);		// Load the core and/or local language sys file(s) for the ordering field.		$db = JFactory::getDbo();		$query = 'SELECT element' .				' FROM #__extensions' .				' WHERE (type =' .$db->quote('plugin'). 'AND folder='. $db->quote($folder) . ')';		$db->setQuery($query);		$elements = $db->loadColumn();		foreach ($elements as $elementa)		{				$lang->load('plg_'.$folder.'_'.$elementa.'.sys', JPATH_ADMINISTRATOR, null, false, false)			||	$lang->load('plg_'.$folder.'_'.$elementa.'.sys', JPATH_PLUGINS.'/'.$folder.'/'.$elementa, null, false, false)			||	$lang->load('plg_'.$folder.'_'.$elementa.'.sys', JPATH_ADMINISTRATOR, $lang->getDefault(), false, false)			||	$lang->load('plg_'.$folder.'_'.$elementa.'.sys', JPATH_PLUGINS.'/'.$folder.'/'.$elementa, $lang->getDefault(), false, false);		}		if (empty($folder) || empty($element))		{			$app = JFactory::getApplication();			$app->redirect(JRoute::_('index.php?option=com_plugins&view=plugins', false));		}		$formFile = JPath::clean(JPATH_PLUGINS . '/' . $folder . '/' . $element . '/' . $element . '.xml');		if (!file_exists($formFile))		{			throw new Exception(JText::sprintf('COM_PLUGINS_ERROR_FILE_NOT_FOUND', $element . '.xml'));		}		// Load the core and/or local language file(s).			$lang->load('plg_'.$folder.'_'.$element, JPATH_ADMINISTRATOR, null, false, false)		||	$lang->load('plg_'.$folder.'_'.$element, JPATH_PLUGINS.'/'.$folder.'/'.$element, null, false, false)		||	$lang->load('plg_'.$folder.'_'.$element, JPATH_ADMINISTRATOR, $lang->getDefault(), false, false)		||	$lang->load('plg_'.$folder.'_'.$element, JPATH_PLUGINS.'/'.$folder.'/'.$element, $lang->getDefault(), false, false);		if (file_exists($formFile))		{			// Get the plugin form.			if (!$form->loadFile($formFile, false, '//config'))			{				throw new Exception(JText::_('JERROR_LOADFILE_FAILED'));			}		}		// Attempt to load the xml file.		if (!$xml = simplexml_load_file($formFile))		{			throw new Exception(JText::_('JERROR_LOADFILE_FAILED'));		}		// Get the help data from the XML file if present.		$help = $xml->xpath('/extension/help');		if (!empty($help))		{			$helpKey = trim((string) $help[0]['key']);			$helpURL = trim((string) $help[0]['url']);			$this->helpKey = $helpKey ? $helpKey : $this->helpKey;			$this->helpURL = $helpURL ? $helpURL : $this->helpURL;		}		// Trigger the default form events.		parent::preprocessForm($form, $data, $group);	}	/**	 * A protected method to get a set of ordering conditions.	 *	 * @param   object	A record object.	 * @return  array  An array of conditions to add to add to ordering queries.	 * @since   1.6	 */	protected function getReorderConditions($table)	{		$condition = array();		$condition[] = 'type = '. $this->_db->quote($table->type);		$condition[] = 'folder = '. $this->_db->quote($table->folder);		return $condition;	}	/**	 * Override method to save the form data.	 *	 * @param   array  The form data.	 * @return  boolean  True on success.	 * @since   1.6	 */	public function save($data)	{		// Load the extension plugin group.		JPluginHelper::importPlugin('extension');		// Setup type		$data['type'] = 'plugin';		return parent::save($data);	}	/**	 * Get the necessary data to load an item help screen.	 *	 * @return  object  An object with key, url, and local properties for loading the item help screen.	 * @since   1.6	 */	public function getHelp()	{		return (object) array('key' => $this->helpKey, 'url' => $this->helpURL);	}	/**	 * Custom clean cache method, plugins are cached in 2 places for different clients	 *	 * @since   1.6	 */	protected function cleanCache($group = null, $client_id = 0)	{		parent::cleanCache('com_plugins');	}}
<?php/** * @package     Joomla.Administrator * @subpackage  com_config * * @copyright   Copyright (C) 2005 - 2013 Open Source Matters, Inc. All rights reserved. * @license     GNU General Public License version 2 or later; see LICENSE.txt */defined('_JEXEC') or die;?><fieldset class="form-horizontal">	<legend><?php echo JText::_('COM_CONFIG_SEO_SETTINGS'); ?></legend>	<?php	foreach ($this->form->getFieldset('seo') as $field):	?>		<div class="control-group">			<div class="control-label"><?php echo $field->label; ?></div>			<div class="controls"><?php echo $field->input; ?></div>		</div>	<?php	endforeach;	?></fieldset>
<?php/** * @package     Joomla.Administrator * @subpackage  com_languages * * @copyright   Copyright (C) 2005 - 2013 Open Source Matters, Inc. All rights reserved. * @license     GNU General Public License version 2 or later; see LICENSE.txt */defined('_JEXEC') or die;JHtml::addIncludePath(JPATH_COMPONENT.'/helpers/html');JHtml::_('behavior.tooltip');JHtml::_('behavior.formvalidation');JHtml::_('formbehavior.chosen', 'select');$canDo = LanguagesHelper::getActions();?><script type="text/javascript">	Joomla.submitbutton = function(task)	{		if (task == 'language.cancel' || document.formvalidator.isValid(document.id('language-form')))		{			Joomla.submitform(task, document.getElementById('language-form'));		}	}</script><form action="<?php echo JRoute::_('index.php?option=com_languages&layout=edit&lang_id='.(int) $this->item->lang_id); ?>" method="post" name="adminForm" id="language-form" class="form-validate form-horizontal">	<fieldset>	<?php echo JHtml::_('bootstrap.startTabSet', 'myTab', array('active' => 'details')); ?>		<?php echo JHtml::_('bootstrap.addTab', 'myTab', 'details', JText::_('JDETAILS', true)); ?>			<div class="control-group">				<div class="controls">					<?php if ($this->item->lang_id) : ?>						<?php echo JText::sprintf('JGLOBAL_RECORD_NUMBER', $this->item->lang_id); ?>					<?php else : ?>						<?php echo JText::_('COM_LANGUAGES_VIEW_LANGUAGE_EDIT_NEW_TITLE'); ?>					<?php endif; ?>				</div>			</div>			<div class="control-group">					<div class="control-label">						<?php echo $this->form->getLabel('title'); ?>					</div>					<div class="controls">						<?php echo $this->form->getInput('title'); ?>					</div>			</div>			<div class="control-group">					<div class="control-label">						<?php echo $this->form->getLabel('title_native'); ?>					</div>					<div class="controls">						<?php echo $this->form->getInput('title_native'); ?>					</div>			</div>			<div class="control-group">					<div class="control-label">						<?php echo $this->form->getLabel('sef'); ?>					</div>					<div class="controls">						<?php echo $this->form->getInput('sef'); ?>					</div>			</div>			<div class="control-group">					<div class="control-label">						<?php echo $this->form->getLabel('image'); ?>					</div>					<div class="controls">						<?php echo $this->form->getInput('image'); ?>					</div>			</div>			<div class="control-group">					<div class="control-label">						<?php echo $this->form->getLabel('lang_code'); ?>					</div>					<div class="controls">						<?php echo $this->form->getInput('lang_code'); ?>					</div>			</div>			<?php if ($canDo->get('core.edit.state')) : ?>				<div class="control-group">					<div class="control-label">						<?php echo $this->form->getLabel('published'); ?>					</div>					<div class="controls">						<?php echo $this->form->getInput('published'); ?>					</div>				</div>			<?php endif; ?>			<div class="control-group">					<div class="control-label">						<?php echo $this->form->getLabel('access'); ?>					</div>					<div class="controls">						<?php echo $this->form->getInput('access'); ?>					</div>			</div>			<div class="control-group">					<div class="control-label">						<?php echo $this->form->getLabel('description'); ?>					</div>					<div class="controls">						<?php echo $this->form->getInput('description'); ?>					</div>			</div>			<div class="control-group">					<div class="control-label">						<?php echo $this->form->getLabel('lang_id'); ?>					</div>					<div class="controls">						<?php echo $this->form->getInput('lang_id'); ?>					</div>			</div>		<?php echo JHtml::_('bootstrap.endTab'); ?>		<?php echo JHtml::_('bootstrap.addTab', 'myTab', 'metadata', JText::_('JGLOBAL_FIELDSET_METADATA_OPTIONS', true)); ?>			<?php foreach ($this->form->getFieldset('metadata') as $field) : ?>				<div class="control-group">					<?php if (!$field->hidden) : ?>						<div class="control-label">							<?php echo $field->label; ?>						</div>					<?php endif; ?>					<div class="controls">						<?php echo $field->input; ?>					</div>				</div>			<?php endforeach; ?>		<?php echo JHtml::_('bootstrap.endTab'); ?>		<?php echo JHtml::_('bootstrap.addTab', 'myTab', 'site_name', JText::_('COM_LANGUAGES_FIELDSET_SITE_NAME_LABEL', true)); ?>			<?php foreach ($this->form->getFieldset('site_name') as $field) : ?>				<div class="control-group">					<?php if (!$field->hidden) : ?>						<div class="control-label">							<?php echo $field->label; ?>						</div>					<?php endif; ?>					<div class="controls">						<?php echo $field->input; ?>					</div>				</div>			<?php endforeach; ?>		<?php echo JHtml::_('bootstrap.endTab'); ?>	<?php echo JHtml::_('bootstrap.endTabSet'); ?>	</fieldset>	<input type="hidden" name="task" value="" />	<?php echo JHtml::_('form.token'); ?></form>
<?php/** * @package     Joomla.Administrator * @subpackage  com_newsfeeds * * @copyright   Copyright (C) 2005 - 2013 Open Source Matters, Inc. All rights reserved. * @license     GNU General Public License version 2 or later; see LICENSE.txt */defined('_JEXEC') or die;JHtml::addIncludePath(JPATH_COMPONENT.'/helpers/html');JHtml::_('bootstrap.tooltip');$input     = JFactory::getApplication()->input;$function  = JFactory::getApplication()->input->getCmd('function', 'jSelectNewsfeed');$listOrder = $this->escape($this->state->get('list.ordering'));$listDirn  = $this->escape($this->state->get('list.direction'));?><form action="<?php echo JRoute::_('index.php?option=com_newsfeeds&view=newsfeeds&layout=modal&tmpl=component&function='.$function);?>" method="post" name="adminForm" id="adminForm" class="form-inline">	<fieldset class="filter clearfix">		<div class="btn-toolbar">			<div class="btn-group pull-left">				<label for="filter_search">					<?php echo JText::_('JSEARCH_FILTER_LABEL'); ?>				</label>				<input type="text" name="filter_search" id="filter_search" value="<?php echo $this->escape($this->state->get('filter.search')); ?>" size="30" title="<?php echo JText::_('COM_NEWSFEEDS_FILTER_SEARCH_DESC'); ?>" />			</div>			<div class="btn-group pull-left">				<button type="submit" class="btn hasTooltip" data-placement="bottom" title="<?php echo JText::_('JSEARCH_FILTER_SUBMIT'); ?>">					<i class="icon-search"></i></button>				<button type="button" class="btn hasTooltip" data-placement="bottom" title="<?php echo JText::_('JSEARCH_FILTER_CLEAR'); ?>" onclick="document.id('filter_search').value='';this.form.submit();">					<i class="icon-remove"></i></button>			</div>				<input onclick="if (window.parent) window.parent.<?php echo $this->escape($function);?>('0', '<?php echo $this->escape(addslashes(JText::_('COM_NEWSFEEDS_SELECT_A_FEED'))); ?>', null, null);" class="btn" type="button" value="<?php echo JText::_('COM_NEWSFEEDS_FIELD_VALUE_NONE'); ?>" />			<div class="clearfix"></div>		</div>		<hr class="hr-condensed" />		<div class="filters">			<select name="filter_access" class="input-medium" onchange="this.form.submit()">				<option value=""><?php echo JText::_('JOPTION_SELECT_ACCESS');?></option>				<?php echo JHtml::_('select.options', JHtml::_('access.assetgroups'), 'value', 'text', $this->state->get('filter.access'));?>			</select>			<select name="filter_published" class="input-medium" onchange="this.form.submit()">				<option value=""><?php echo JText::_('JOPTION_SELECT_PUBLISHED');?></option>				<?php echo JHtml::_('select.options', JHtml::_('jgrid.publishedOptions'), 'value', 'text', $this->state->get('filter.published'), true);?>			</select>			<?php if ($this->state->get('filter.forcedLanguage')) : ?>			<select name="filter_category_id" class="input-medium" onchange="this.form.submit()">				<option value=""><?php echo JText::_('JOPTION_SELECT_CATEGORY');?></option>				<?php echo JHtml::_('select.options', JHtml::_('category.options', 'com_newsfeeds', array('filter.language' => array('*', $this->state->get('filter.forcedLanguage')))), 'value', 'text', $this->state->get('filter.category_id'));?>			</select>			<input type="hidden" name="forcedLanguage" value="<?php echo $this->escape($this->state->get('filter.forcedLanguage')); ?>" />			<input type="hidden" name="filter_language" value="<?php echo $this->escape($this->state->get('filter.language')); ?>" />			<?php else : ?>			<select name="filter_category_id" class="input-medium" onchange="this.form.submit()">				<option value=""><?php echo JText::_('JOPTION_SELECT_CATEGORY');?></option>				<?php echo JHtml::_('select.options', JHtml::_('category.options', 'com_newsfeeds'), 'value', 'text', $this->state->get('filter.category_id'));?>			</select>			<select name="filter_language" class="input-medium" onchange="this.form.submit()">				<option value=""><?php echo JText::_('JOPTION_SELECT_LANGUAGE');?></option>				<?php echo JHtml::_('select.options', JHtml::_('contentlanguage.existing', true, true), 'value', 'text', $this->state->get('filter.language'));?>			</select>			<?php endif; ?>		</div>	</fieldset>	<table class="table table-striped table-condensed">		<thead>			<tr>				<th class="title">					<?php echo JHtml::_('grid.sort', 'JGLOBAL_TITLE', 'a.name', $listDirn, $listOrder); ?>				</th>				<th width="15%" class="nowrap center">					<?php echo JHtml::_('grid.sort', 'JGRID_HEADING_ACCESS', 'access_level', $listDirn, $listOrder); ?>				</th>				<th width="15%" class="nowrap center">					<?php echo JHtml::_('grid.sort', 'JCATEGORY', 'a.catid', $listDirn, $listOrder); ?>				</th>				<th width="5%" class="nowrap center">					<?php echo JHtml::_('grid.sort', 'JGRID_HEADING_LANGUAGE', 'language', $listDirn, $listOrder); ?>				</th>				<th width="1%" class="nowrap center">					<?php echo JHtml::_('grid.sort', 'JGRID_HEADING_ID', 'a.id', $listDirn, $listOrder); ?>				</th>			</tr>		</thead>		<tfoot>			<tr>				<td colspan="15">					<?php echo $this->pagination->getListFooter(); ?>				</td>			</tr>		</tfoot>		<tbody>		<?php foreach ($this->items as $i => $item) : ?>			<tr class="row<?php echo $i % 2; ?>">				<td>					<a class="pointer" onclick="if (window.parent) window.parent.<?php echo $this->escape($function);?>('<?php echo $item->id; ?>', '<?php echo $this->escape(addslashes($item->name)); ?>');">						<?php echo $this->escape($item->name); ?></a>				</td>				<td class="center">					<?php echo $this->escape($item->access_level); ?>				</td>				<td class="center">					<?php echo $this->escape($item->category_title); ?>				</td>				<td class="center">					<?php if ($item->language == '*'):?>						<?php echo JText::alt('JALL', 'language'); ?>					<?php else:?>						<?php echo $item->language_title ? $this->escape($item->language_title) : JText::_('JUNDEFINED'); ?>					<?php endif;?>				</td>				<td align="center">					<?php echo (int) $item->id; ?>				</td>			</tr>			<?php endforeach; ?>		</tbody>	</table>	<div>		<input type="hidden" name="task" value="" />		<input type="hidden" name="boxchecked" value="0" />		<input type="hidden" name="filter_order" value="<?php echo $listOrder; ?>" />		<input type="hidden" name="filter_order_Dir" value="<?php echo $listDirn; ?>" />		<?php echo JHtml::_('form.token'); ?>	</div></form>
<?php/** * @package     Joomla.Administrator * @subpackage  Template.hathor * * @copyright   Copyright (C) 2005 - 2013 Open Source Matters, Inc. All rights reserved. * @license     GNU General Public License version 2 or later; see LICENSE.txt */defined('_JEXEC') or die;JHtml::addIncludePath(JPATH_COMPONENT.'/helpers/html');JHtml::_('behavior.tooltip');JHtml::_('behavior.multiselect');$app		= JFactory::getApplication();$user		= JFactory::getUser();$userId		= $user->get('id');$listOrder	= $this->escape($this->state->get('list.ordering'));$listDirn	= $this->escape($this->state->get('list.direction'));$saveOrder	= $listOrder == 'a.ordering';$n			= count($this->items);?><form action="<?php echo JRoute::_('index.php?option=com_tags&view=tags');?>" method="post" name="adminForm" id="adminForm"><?php if (!empty( $this->sidebar)) : ?>	<div id="j-sidebar-container" class="span2">		<?php echo $this->sidebar; ?>	</div>	<div id="j-main-container" class="span10"><?php else : ?>	<div id="j-main-container"><?php endif;?>	<fieldset id="filter-bar">	<legend class="element-invisible"><?php echo JText::_('JSEARCH_FILTER_LABEL'); ?></legend>		<div class="filter-search">			<label class="filter-search-lbl" for="filter_search"><?php echo JText::_('JSEARCH_FILTER_LABEL'); ?></label>			<input type="text" name="filter_search" id="filter_search" value="<?php echo $this->escape($this->state->get('filter.search')); ?>" title="<?php echo JText::_('COM_TAGS_FILTER_SEARCH_DESC'); ?>" />			<button type="submit" class="btn"><?php echo JText::_('JSEARCH_FILTER_SUBMIT'); ?></button>			<button type="button" onclick="document.id('filter_search').value='';this.form.submit();"><?php echo JText::_('JSEARCH_FILTER_CLEAR'); ?></button>		</div>		<div class="filter-select">			<label class="selectlabel" for="filter_published"><?php echo JText::_('JOPTION_SELECT_PUBLISHED'); ?></label>			<select name="filter_published" class="inputbox" id="filter_published">				<option value=""><?php echo JText::_('JOPTION_SELECT_PUBLISHED'); ?></option>				<?php echo JHtml::_('select.options', JHtml::_('jgrid.publishedOptions'), 'value', 'text', $this->state->get('filter.published'), true); ?>			</select>			<label class="selectlabel" for="filter_access"><?php echo JText::_('JOPTION_SELECT_ACCESS'); ?></label>			<select name="filter_access" class="inputbox" id="filter_access">				<option value=""><?php echo JText::_('JOPTION_SELECT_ACCESS'); ?></option>				<?php echo JHtml::_('select.options', JHtml::_('access.assetgroups'), 'value', 'text', $this->state->get('filter.access')); ?>			</select>			<label class="selectlabel" for="filter_author_id"><?php echo JText::_('JOPTION_SELECT_AUTHOR'); ?></label>			<select name="filter_author_id" class="inputbox"  id="filter_author_id">				<option value=""><?php echo JText::_('JOPTION_SELECT_AUTHOR'); ?></option>				<?php echo JHtml::_('select.options', $this->authors, 'value', 'text', $this->state->get('filter.author_id')); ?>			</select>			<label class="selectlabel" for="filter_language"><?php echo JText::_('JOPTION_SELECT_LANGUAGE'); ?></label>			<select name="filter_language" class="inputbox" id="filter_language">				<option value=""><?php echo JText::_('JOPTION_SELECT_LANGUAGE'); ?></option>				<?php echo JHtml::_('select.options', JHtml::_('contentlanguage.existing', true, true), 'value', 'text', $this->state->get('filter.language')); ?>			</select>			<button type="submit" id="filter-go">				<?php echo JText::_('JSUBMIT'); ?></button>		</div>	</fieldset>	<div class="clr"> </div>	<table class="adminlist">		<thead>			<tr>				<th class="checkmark-col">					<input type="checkbox" name="checkall-toggle" value="" title="<?php echo JText::_('JGLOBAL_CHECK_ALL'); ?>" onclick="Joomla.checkAll(this)" />				</th>				<th class="title">					<?php echo JHtml::_('grid.sort', 'JGLOBAL_TITLE', 'a.title', $listDirn, $listOrder); ?>				</th>				<th class="nowrap state-col">					<?php echo JHtml::_('grid.sort', 'JSTATUS', 'a.published', $listDirn, $listOrder); ?>				</th>				<th class="title access-col">					<?php echo JHtml::_('grid.sort', 'JGRID_HEADING_ACCESS', 'access', $listDirn, $listOrder); ?>				<th class="language-col">					<?php echo JHtml::_('grid.sort', 'JGRID_HEADING_LANGUAGE', 'language', $listDirn, $listOrder); ?>				</th>				<th class="nowrap id-col">					<?php echo JHtml::_('grid.sort', 'JGRID_HEADING_ID', 'a.id', $listDirn, $listOrder); ?>				</th>			</tr>		</thead>		<tbody>		<?php foreach ($this->items as $i => $item) :			$item->max_ordering = 0; //??			$canCreate  = $user->authorise('core.create',     'com_tags');			$canEdit    = $user->authorise('core.edit',       'com_tags.tag.' . $item->id);			$canCheckin = $user->authorise('core.manage',     'com_checkin') || $item->checked_out_user_id == $userId || $item->checked_out_user_id == 0;			$canChange  = $user->authorise('core.edit.state', 'com_tags.tag.' . $item->id) && $canCheckin;			?>			<tr class="row<?php echo $i % 2; ?>">				<th class="center">					<?php echo JHtml::_('grid.id', $i, $item->id); ?>				</th>				<td>					<?php if ($item->level > 0): ?>					<?php echo str_repeat('<span class="gi">&mdash;</span>', $item->level - 1) ?>					<?php endif; ?>					<?php if ($item->checked_out) : ?>						<?php echo JHtml::_('jgrid.checkedout', $i, $item->editor, $item->checked_out_time, 'tags.', $canCheckin); ?>					<?php endif; ?>					<?php if ($canEdit || $canEditOwn) : ?>						<a href="<?php echo JRoute::_('index.php?option=com_tags&task=tag.edit&id='.$item->id); ?>">							<?php echo $this->escape($item->title); ?></a>					<?php else : ?>						<?php echo $this->escape($item->title); ?>					<?php endif; ?>					<p class="smallsub">						<?php echo JText::sprintf('JGLOBAL_LIST_ALIAS', $this->escape($item->alias)); ?></p>				</td>				<td class="center">					<?php echo JHtml::_('jgrid.published', $item->published, $i, 'tags.', $canChange, 'cb'); ?>				</td>				<td class="center">					<?php echo $this->escape($item->access_title); ?>				</td>				<td class="center">					<?php if ($item->language == '*'):?>						<?php echo JText::alt('JALL', 'language'); ?>					<?php else:?>						<?php echo $item->language_title ? $this->escape($item->language_title) : JText::_('JUNDEFINED'); ?>					<?php endif;?>				</td>				<td class="center">					<?php echo (int) $item->id; ?>				</td>			</tr>			<?php endforeach; ?>		</tbody>	</table>	<?php //Load the batch processing form. ?>	<?php echo $this->loadTemplate('batch'); ?>	<?php echo $this->pagination->getListFooter(); ?>	<input type="hidden" name="task" value="" />	<input type="hidden" name="boxchecked" value="0" />	<input type="hidden" name="filter_order" value="<?php echo $listOrder; ?>" />	<input type="hidden" name="filter_order_Dir" value="<?php echo $listDirn; ?>" />	<?php echo JHtml::_('form.token'); ?>	</div></form>
<?php/** * @package     Joomla.Administrator * @subpackage  com_redirect * * @copyright   Copyright (C) 2005 - 2013 Open Source Matters, Inc. All rights reserved. * @license     GNU General Public License version 2 or later; see LICENSE.txt */defined('_JEXEC') or die;/** * Redirect link model. * * @package     Joomla.Administrator * @subpackage  com_redirect * @since       1.6 */class RedirectModelLink extends JModelAdmin{	/**	 * @var        string    The prefix to use with controller messages.	 * @since   1.6	 */	protected $text_prefix = 'COM_REDIRECT';	/**	 * Method to test whether a record can be deleted.	 *	 * @param   object    $record    A record object.	 *	 * @return  boolean  True if allowed to delete the record. Defaults to the permission set in the component.	 * @since   1.6	 */	protected function canDelete($record)	{		if ($record->published != -2)		{			return false;		}		$user = JFactory::getUser();		return $user->authorise('core.admin', 'com_redirect');	}	/**	 * Method to test whether a record can have its state edited.	 *	 * @param   object    $record    A record object.	 *	 * @return  boolean  True if allowed to change the state of the record. Defaults to the permission set in the component.	 * @since   1.6	 */	protected function canEditState($record)	{		$user = JFactory::getUser();		// Check the component since there are no categories or other assets.		return $user->authorise('core.admin', 'com_redirect');	}	/**	 * Returns a reference to the a Table object, always creating it.	 *	 * @param   type      The table type to instantiate	 * @param   string    A prefix for the table class name. Optional.	 * @param   array     Configuration array for model. Optional.	 * @return  JTable    A database object	 * @since   1.6	 */	public function getTable($type = 'Link', $prefix = 'RedirectTable', $config = array())	{		return JTable::getInstance($type, $prefix, $config);	}	/**	 * Method to get the record form.	 *	 * @param   array      $data        Data for the form.	 * @param   boolean    $loadData    True if the form is to load its own data (default case), false if not.	 * @return  JForm    A JForm object on success, false on failure	 * @since   1.6	 */	public function getForm($data = array(), $loadData = true)	{		// Get the form.		$form = $this->loadForm('com_redirect.link', 'link', array('control' => 'jform', 'load_data' => $loadData));		if (empty($form))		{			return false;		}		// Modify the form based on access controls.		if ($this->canEditState((object) $data) != true)		{			// Disable fields for display.			$form->setFieldAttribute('published', 'disabled', 'true');			// Disable fields while saving.			// The controller has already verified this is a record you can edit.			$form->setFieldAttribute('published', 'filter', 'unset');		}		return $form;	}	/**	 * Method to get the data that should be injected in the form.	 *	 * @return  mixed  The data for the form.	 * @since   1.6	 */	protected function loadFormData()	{		// Check the session for previously entered form data.		$data = JFactory::getApplication()->getUserState('com_redirect.edit.link.data', array());		if (empty($data))		{			$data = $this->getItem();		}		$this->preprocessData('com_redirect.link', $data);		return $data;	}	/**	 * Method to activate links.	 *	 * @param   array     An array of link ids.	 * @param   string    The new URL to set for the redirect.	 * @param   string    A comment for the redirect links.	 * @return  boolean  Returns true on success, false on failure.	 * @since   1.6	 */	public function activate(&$pks, $url, $comment = null)	{		$user = JFactory::getUser();		$db = $this->getDbo();		// Sanitize the ids.		$pks = (array) $pks;		JArrayHelper::toInteger($pks);		// Populate default comment if necessary.		$comment = (!empty($comment)) ? $comment : JText::sprintf('COM_REDIRECT_REDIRECTED_ON', JHtml::_('date', time()));		// Access checks.		if (!$user->authorise('core.admin', 'com_redirect'))		{			$pks = array();			$this->setError(JText::_('JLIB_APPLICATION_ERROR_EDIT_NOT_PERMITTED'));			return false;		}		if (!empty($pks))		{			// Update the link rows.			$query = $db->getQuery(true)				->update($db->quoteName('#__redirect_links'))				->set($db->quoteName('new_url') . ' = ' . $db->quote($url))				->set($db->quoteName('published') . ' = ' . $db->quote(1))				->set($db->quoteName('comment') . ' = ' . $db->quote($comment))				->where($db->quoteName('id') . ' IN (' . implode(',', $pks) . ')');			$db->setQuery($query);			try			{				$db->execute();			}			catch (RuntimeException $e)			{				$this->setError($e->getMessage());				return false;			}		}		return true;	}}
<?php/** * @package     Joomla.Site * @subpackage  mod_breadcrumbs * * @copyright   Copyright (C) 2005 - 2013 Open Source Matters, Inc. All rights reserved. * @license     GNU General Public License version 2 or later; see LICENSE.txt */defined('_JEXEC') or die;JHtml::_('bootstrap.tooltip');?><ul class="breadcrumb<?php echo $moduleclass_sfx; ?>">	<?php	if ($params->get('showHere', 1))	{		echo '<li class="active"><span class="divider icon-location hasTooltip" title="' . JText::_('MOD_BREADCRUMBS_HERE') . '"></span></li>';	}	// Get rid of duplicated entries on trail including home page when using multilanguage	for ($i = 0; $i < $count; $i++)	{		if ($i == 1 && !empty($list[$i]->link) && !empty($list[$i - 1]->link) && $list[$i]->link == $list[$i - 1]->link)		{			unset($list[$i]);		}	}	// Find last and penultimate items in breadcrumbs list	end($list);	$last_item_key = key($list);	prev($list);	$penult_item_key = key($list);	// Generate the trail	foreach ($list as $key => $item) :	// Make a link if not the last item in the breadcrumbs	$show_last = $params->get('showLast', 1);	if ($key != $last_item_key)	{		// Render all but last item - along with separator		echo '<li>';		if (!empty($item->link))		{			echo '<a href="' . $item->link . '" class="pathway">' . $item->name . '</a>';		}		else		{			echo '<span>' . $item->name . '</span>';		}		if (($key != $penult_item_key) || $show_last)		{			echo '<span class="divider">' . $separator . '</span>';		}		echo '</li>';	}	elseif ($show_last)	{		// Render last item if reqd.		echo '<li>';		echo '<span>' . $item->name . '</span>';		echo '</li>';	}	endforeach; ?></ul>
<?php/** * @package     Joomla.Administrator * @subpackage  com_languages * * @copyright   Copyright (C) 2005 - 2013 Open Source Matters, Inc. All rights reserved. * @license     GNU General Public License version 2 or later; see LICENSE.txt */defined('_JEXEC') or die;/** * @package     Joomla.Administrator * @subpackage  com_languages * @since       1.6 */class LanguagesControllerLanguages extends JControllerAdmin{	/**	 * Method to get a model object, loading it if required.	 *	 * @param   string  $name    The model name. Optional.	 * @param   string  $prefix  The class prefix. Optional.	 * @param   array   $config  Configuration array for model. Optional.	 *	 * @return  object  The model.	 *	 * @since   1.6	 */	public function getModel($name = 'Language', $prefix = 'LanguagesModel', $config = array('ignore_request' => true))	{		$model = parent::getModel($name, $prefix, $config);		return $model;	}}
<?php/** * @package     Joomla.Administrator * @subpackage  com_finder * * @copyright   Copyright (C) 2005 - 2013 Open Source Matters, Inc. All rights reserved. * @license     GNU General Public License version 2 or later; see LICENSE */defined('_JEXEC') or die;JLoader::register('FinderHelperLanguage', JPATH_ADMINISTRATOR . '/components/com_finder/helpers/language.php');/** * Index view class for Finder. * * @package     Joomla.Administrator * @subpackage  com_finder * @since       2.5 */class FinderViewIndex extends JViewLegacy{	/**	 * Method to display the view.	 *	 * @param   string  $tpl  A template file to load. [optional]	 *	 * @return  mixed  A string if successful, otherwise a JError object.	 *	 * @since   2.5	 */	public function display($tpl = null)	{		// Load plug-in language files.		FinderHelperLanguage::loadPluginLanguage();		$this->items		= $this->get('Items');		$this->total		= $this->get('Total');		$this->pagination	= $this->get('Pagination');		$this->state		= $this->get('State');		$this->pluginState  = $this->get('pluginState');		FinderHelper::addSubmenu('index');		// Check for errors.		if (count($errors = $this->get('Errors')))		{			JError::raiseError(500, implode("\n", $errors));			return false;		}		JHtml::addIncludePath(JPATH_COMPONENT . '/helpers/html');		// Configure the toolbar.		$this->addToolbar();		$this->sidebar = JHtmlSidebar::render();		parent::display($tpl);	}	/**	 * Method to configure the toolbar for this view.	 *	 * @return  void	 *	 * @since   2.5	 */	protected function addToolbar()	{		$canDo	= FinderHelper::getActions();		JToolbarHelper::title(JText::_('COM_FINDER_INDEX_TOOLBAR_TITLE'), 'finder');		$toolbar = JToolbar::getInstance('toolbar');		$toolbar->appendButton('Popup', 'archive', 'COM_FINDER_INDEX', 'index.php?option=com_finder&view=indexer&tmpl=component', 500, 210, 0, 0, 'window.parent.location.reload()', 'COM_FINDER_HEADING_INDEXER');		JToolbarHelper::divider();		if ($canDo->get('core.edit.state'))		{			JToolbarHelper::publishList('index.publish');			JToolbarHelper::unpublishList('index.unpublish');			JToolbarHelper::divider();		}		if ($canDo->get('core.delete'))		{			JToolbarHelper::deleteList('', 'index.delete');			JToolbarHelper::divider();		}		if ($canDo->get('core.edit.state'))		{			JToolbarHelper::trash('index.purge', 'COM_FINDER_INDEX_TOOLBAR_PURGE', false);			JToolbarHelper::divider();		}		if ($canDo->get('core.admin'))		{			JToolbarHelper::preferences('com_finder');		}		JToolbarHelper::divider();		$toolbar->appendButton('Popup', 'stats', 'COM_FINDER_STATISTICS', 'index.php?option=com_finder&view=statistics&tmpl=component', 550, 350);		JToolbarHelper::divider();		JToolbarHelper::help('JHELP_COMPONENTS_FINDER_MANAGE_INDEXED_CONTENT');		JHtmlSidebar::setAction('index.php?option=com_finder&view=index');		JHtmlSidebar::addFilter(			JText::_('COM_FINDER_INDEX_FILTER_BY_STATE'),			'filter_state',			JHtml::_('select.options', JHtml::_('finder.statelist'), 'value', 'text', $this->state->get('filter.state'))		);		JHtmlSidebar::addFilter(			JText::_('COM_FINDER_INDEX_TYPE_FILTER'),			'filter_type',			JHtml::_('select.options', JHtml::_('finder.typeslist'), 'value', 'text', $this->state->get('filter.type'))		);	}}
<?php/** * @package     Joomla.Administrator * @subpackage  com_installer * * @copyright   Copyright (C) 2005 - 2013 Open Source Matters, Inc. All rights reserved. * @license     GNU General Public License version 2 or later; see LICENSE.txt */defined('_JEXEC') or die;JLoader::register('InstallerModel', __DIR__ . '/extension.php');JLoader::register('JoomlaInstallerScript', JPATH_ADMINISTRATOR . '/components/com_admin/script.php');/** * Installer Manage Model * * @package     Joomla.Administrator * @subpackage  com_installer * @since       1.6 */class InstallerModelDatabase extends InstallerModel{	protected $_context = 'com_installer.discover';	/**	 * Method to auto-populate the model state.	 *	 * Note. Calling getState in this method will result in recursion.	 *	 * @param   string  $ordering   An optional ordering field.	 * @param   string  $direction  An optional direction (asc|desc).	 *	 * @return  void	 *	 * @since   1.6	 */	protected function populateState($ordering = null, $direction = null)	{		$app = JFactory::getApplication();		$this->setState('message', $app->getUserState('com_installer.message'));		$this->setState('extension_message', $app->getUserState('com_installer.extension_message'));		$app->setUserState('com_installer.message', '');		$app->setUserState('com_installer.extension_message', '');		parent::populateState('name', 'asc');	}	/**	 * Fixes database problems	 *	 * @return  void	 */	public function fix()	{		if (!$changeSet = $this->getItems())		{			return false;		}		$changeSet->fix();		$this->fixSchemaVersion($changeSet);		$this->fixUpdateVersion();		$installer = new JoomlaInstallerScript;		$installer->deleteUnexistingFiles();		$this->fixDefaultTextFilters();	}	/**	 * Gets the changeset object	 *	 * @return  JSchemaChangeset	 */	public function getItems()	{		$folder = JPATH_ADMINISTRATOR . '/components/com_admin/sql/updates/';		try		{			$changeSet = JSchemaChangeset::getInstance(JFactory::getDbo(), $folder);		}		catch (RuntimeException $e)		{			JFactory::getApplication()->enqueueMessage($e->getMessage(), 'warning');			return false;		}		return $changeSet;	}	/**	 * Method to get a JPagination object for the data set.	 *	 * @return  boolean	 *	 * @since   12.2	 */	public function getPagination()	{		return true;	}	/**	 * Get version from #__schemas table	 *	 * @return  mixed  the return value from the query, or null if the query fails	 *	 * @throws Exception	 */	public function getSchemaVersion()	{		$db = JFactory::getDbo();		$query = $db->getQuery(true)			->select('version_id')			->from($db->quoteName('#__schemas'))			->where('extension_id = 700');		$db->setQuery($query);		$result = $db->loadResult();		return $result;	}	/**	 * Fix schema version if wrong	 *	 * @param   JSchemaChangeSet  $changeSet  Schema change set	 *	 * @return   mixed  string schema version if success, false if fail	 */	public function fixSchemaVersion($changeSet)	{		// Get correct schema version -- last file in array		$schema = $changeSet->getSchema();		$db = JFactory::getDbo();		$result = false;		// Check value. If ok, don't do update		$version = $this->getSchemaVersion();		if ($version == $schema)		{			$result = $version;		}		else		{			// Delete old row			$query = $db->getQuery(true)				->delete($db->quoteName('#__schemas'))				->where($db->quoteName('extension_id') . ' = 700');			$db->setQuery($query);			$db->execute();			// Add new row			$query = $db->getQuery(true)				->insert($db->quoteName('#__schemas'))				->set($db->quoteName('extension_id') . '= 700')				->set($db->quoteName('version_id') . '= ' . $db->quote($schema));			$db->setQuery($query);			if ($db->execute())			{				$result = $schema;			}		}		return $result;	}	/**	 * Get current version from #__extensions table	 *	 * @return  mixed   version if successful, false if fail	 */	public function getUpdateVersion()	{		$table = JTable::getInstance('Extension');		$table->load('700');		$cache = new JRegistry($table->manifest_cache);		return $cache->get('version');	}	/**	 * Fix Joomla version in #__extensions table if wrong (doesn't equal JVersion short version)	 *	 * @return   mixed  string update version if success, false if fail	 */	public function fixUpdateVersion()	{		$table = JTable::getInstance('Extension');		$table->load('700');		$cache = new JRegistry($table->manifest_cache);		$updateVersion = $cache->get('version');		$cmsVersion = new JVersion;		if ($updateVersion == $cmsVersion->getShortVersion())		{			return $updateVersion;		}		else		{			$cache->set('version', $cmsVersion->getShortVersion());			$table->manifest_cache = $cache->toString();			if ($table->store())			{				return $cmsVersion->getShortVersion();			}			else			{				return false;			}		}	}	/**	 * For version 2.5.x only	 * Check if com_config parameters are blank.	 *	 * @return  string  default text filters (if any)	 */	public function getDefaultTextFilters()	{		$table = JTable::getInstance('Extension');		$table->load($table->find(array('name' => 'com_config')));		return $table->params;	}	/**	 * For version 2.5.x only	 * Check if com_config parameters are blank. If so, populate with com_content text filters.	 *	 * @return  mixed  boolean true if params are updated, null otherwise	 */	public function fixDefaultTextFilters()	{		$table = JTable::getInstance('Extension');		$table->load($table->find(array('name' => 'com_config')));		// Check for empty $config and non-empty content filters		if (!$table->params)		{			// Get filters from com_content and store if you find them			$contentParams = JComponentHelper::getParams('com_content');			if ($contentParams->get('filters'))			{				$newParams = new JRegistry;				$newParams->set('filters', $contentParams->get('filters'));				$table->params = (string) $newParams;				$table->store();				return true;			}		}	}}
<?php/** * @package     Joomla.Libraries * @subpackage  Form * * @copyright   Copyright (C) 2005 - 2013 Open Source Matters, Inc. All rights reserved. * @license     GNU General Public License version 2 or later; see LICENSE */defined('JPATH_PLATFORM') or die;JFormHelper::loadFieldClass('groupedlist');/** * Form Field class for the Joomla CMS. * Supports a select grouped list of template styles * * @package     Joomla.Libraries * @subpackage  Form * @since       1.6 */class JFormFieldTemplatestyle extends JFormFieldGroupedList{	/**	 * The form field type.	 *	 * @var    string	 * @since  1.6	 */	public $type = 'TemplateStyle';	/**	 * Method to get the list of template style options	 * grouped by template.	 * Use the client attribute to specify a specific client.	 * Use the template attribute to specify a specific template	 *	 * @return  array  The field option objects as a nested array in groups.	 *	 * @since   1.6	 */	protected function getGroups()	{		$groups = array();		$lang = JFactory::getLanguage();		// Get the client and client_id.		$clientName = $this->element['client'] ? (string) $this->element['client'] : 'site';		$client = JApplicationHelper::getClientInfo($clientName, true);		// Get the template.		$template = (string) $this->element['template'];		// Get the database object and a new query object.		$db = JFactory::getDbo();		$query = $db->getQuery(true);		// Build the query.		$query->select('s.id, s.title, e.name as name, s.template')			->from('#__template_styles as s')			->where('s.client_id = ' . (int) $client->id)			->order('template')			->order('title');		if ($template)		{			$query->where('s.template = ' . $db->quote($template));		}		$query->join('LEFT', '#__extensions as e on e.element=s.template')			->where('e.enabled=1')			->where($db->quoteName('e.type') . '=' . $db->quote('template'));		// Set the query and load the styles.		$db->setQuery($query);		$styles = $db->loadObjectList();		// Build the grouped list array.		if ($styles)		{			foreach ($styles as $style)			{				$template = $style->template;				$lang->load('tpl_' . $template . '.sys', $client->path, null, false, false)					|| $lang->load('tpl_' . $template . '.sys', $client->path . '/templates/' . $template, null, false, false)					|| $lang->load('tpl_' . $template . '.sys', $client->path, $lang->getDefault(), false, false)					|| $lang->load('tpl_' . $template . '.sys', $client->path . '/templates/' . $template, $lang->getDefault(), false, false);				$name = JText::_($style->name);				// Initialize the group if necessary.				if (!isset($groups[$name]))				{					$groups[$name] = array();				}				$groups[$name][] = JHtml::_('select.option', $style->id, $style->title);			}		}		// Merge any additional groups in the XML definition.		$groups = array_merge(parent::getGroups(), $groups);		return $groups;	}}
<?php/** * @package     Joomla.Site * @subpackage  com_newsfeeds * * @copyright   Copyright (C) 2005 - 2013 Open Source Matters, Inc. All rights reserved. * @license     GNU General Public License version 2 or later; see LICENSE.txt */defined('_JEXEC') or die;/** * Newsfeeds Component Newsfeed Model * * @package     Joomla.Site * @subpackage  com_newsfeeds * @since       1.5 */class NewsfeedsModelNewsfeed extends JModelItem{	/**	 * Model context string.	 *	 * @var		string	 * @since   1.6	 */	protected $_context = 'com_newsfeeds.newsfeed';	/**	 * Method to auto-populate the model state.	 *	 * Note. Calling getState in this method will result in recursion.	 *	 * @return  void	 * @since   1.6	 */	protected function populateState()	{		$app = JFactory::getApplication('site');		// Load state from the request.		$pk = $app->input->getInt('id');		$this->setState('newsfeed.id', $pk);		$offset = $app->input->get('limitstart', 0, 'uint');		$this->setState('list.offset', $offset);		// Load the parameters.		$params = $app->getParams();		$this->setState('params', $params);		$user = JFactory::getUser();		if ((!$user->authorise('core.edit.state', 'com_newsfeeds')) &&  (!$user->authorise('core.edit', 'com_newsfeeds'))){			$this->setState('filter.published', 1);			$this->setState('filter.archived', 2);		}	}	/**	 * Method to get newsfeed data.	 *	 * @param   integer	The id of the newsfeed.	 *	 * @return  mixed  Menu item data object on success, false on failure.	 * @since   1.6	 */	public function &getItem($pk = null)	{		$pk = (!empty($pk)) ? $pk : (int) $this->getState('newsfeed.id');		if ($this->_item === null)		{			$this->_item = array();		}		if (!isset($this->_item[$pk]))		{			try			{				$db = $this->getDbo();				$query = $db->getQuery(true)					->select($this->getState('item.select', 'a.*'))					->from('#__newsfeeds AS a');				// Join on category table.				$query->select('c.title AS category_title, c.alias AS category_alias, c.access AS category_access')					->join('LEFT', '#__categories AS c on c.id = a.catid');				// Join on user table.				$query->select('u.name AS author')					->join('LEFT', '#__users AS u on u.id = a.created_by');				// Join over the categories to get parent category titles				$query->select('parent.title as parent_title, parent.id as parent_id, parent.path as parent_route, parent.alias as parent_alias')					->join('LEFT', '#__categories as parent ON parent.id = c.parent_id')					->where('a.id = ' . (int) $pk);				// Filter by start and end dates.				$nullDate = $db->quote($db->getNullDate());				$nowDate = $db->quote(JFactory::getDate()->toSql());				// Filter by published state.				$published = $this->getState('filter.published');				$archived = $this->getState('filter.archived');				if (is_numeric($published))				{					$query->where('(a.published = ' . (int) $published . ' OR a.published =' . (int) $archived . ')')						->where('(a.publish_up = ' . $nullDate . ' OR a.publish_up <= ' . $nowDate . ')')						->where('(a.publish_down = ' . $nullDate . ' OR a.publish_down >= ' . $nowDate . ')')						->where('(c.published = ' . (int) $published . ' OR c.published =' . (int) $archived . ')');				}				$db->setQuery($query);				$data = $db->loadObject();				if (empty($data))				{					JError::raiseError(404, JText::_('COM_NEWSFEEDS_ERROR_FEED_NOT_FOUND'));				}				// Check for published state if filter set.				if (((is_numeric($published)) || (is_numeric($archived))) && (($data->published != $published) && ($data->published != $archived)))				{					JError::raiseError(404, JText::_('COM_NEWSFEEDS_ERROR_FEED_NOT_FOUND'));				}				// Convert parameter fields to objects.				$registry = new JRegistry;				$registry->loadString($data->params);				$data->params = clone $this->getState('params');				$data->params->merge($registry);				$registry = new JRegistry;				$registry->loadString($data->metadata);				$data->metadata = $registry;				// Compute access permissions.				if ($access = $this->getState('filter.access'))				{					// If the access filter has been set, we already know this user can view.					$data->params->set('access-view', true);				}				else {					// If no access filter is set, the layout takes some responsibility for display of limited information.					$user = JFactory::getUser();					$groups = $user->getAuthorisedViewLevels();					$data->params->set('access-view', in_array($data->access, $groups) && in_array($data->category_access, $groups));				}				$this->_item[$pk] = $data;			}			catch (Exception $e)			{				$this->setError($e);				$this->_item[$pk] = false;			}		}		return $this->_item[$pk];	}	/**	 * Increment the hit counter for the newsfeed.	 *	 * @param   int  $pk  Optional primary key of the item to increment.	 *	 * @return  boolean  True if successful; false otherwise and internal error set.	 *	 * @since   3.0	 */	public function hit($pk = 0)	{		$input = JFactory::getApplication()->input;		$hitcount = $input->getInt('hitcount', 1);		if ($hitcount)		{			$pk = (!empty($pk)) ? $pk : (int) $this->getState('newsfeed.id');			$db = $this->getDbo();			$db->setQuery(				'UPDATE #__newsfeeds' .				' SET hits = hits + 1' .				' WHERE id = '.(int) $pk			);			try			{				$db->execute();			}			catch (RuntimeException $e)			{				$this->setError($e->getMessage());				return false;			}		}		return true;	}}
<?php/** * @package     Joomla.Administrator * @subpackage  com_modules * * @copyright   Copyright (C) 2005 - 2013 Open Source Matters, Inc. All rights reserved. * @license     GNU General Public License version 2 or later; see LICENSE.txt */defined('_JEXEC') or die;/** * Modules list controller class. * * @package     Joomla.Administrator * @subpackage  com_modules * @since       1.6 */class ModulesControllerModules extends JControllerAdmin{	/**	 * Method to clone an existing module.	 * @since   1.6	 */	public function duplicate()	{		// Check for request forgeries		JSession::checkToken() or jexit(JText::_('JINVALID_TOKEN'));		$pks = $this->input->post->get('cid', array(), 'array');		JArrayHelper::toInteger($pks);		try {			if (empty($pks))			{				throw new Exception(JText::_('COM_MODULES_ERROR_NO_MODULES_SELECTED'));			}			$model = $this->getModel();			$model->duplicate($pks);			$this->setMessage(JText::plural('COM_MODULES_N_MODULES_DUPLICATED', count($pks)));		} catch (Exception $e)		{			JError::raiseWarning(500, $e->getMessage());		}		$this->setRedirect('index.php?option=com_modules&view=modules');	}	/**	 * Method to get a model object, loading it if required.	 *	 * @param   string  $name    The model name. Optional.	 * @param   string  $prefix  The class prefix. Optional.	 * @param   array   $config  Configuration array for model. Optional.	 *	 * @return  object  The model.	 *	 * @since   1.6	 */	public function getModel($name = 'Module', $prefix = 'ModulesModel', $config = array('ignore_request' => true))	{		$model = parent::getModel($name, $prefix, $config);		return $model;	}	/**	 * Method to save the submitted ordering values for records via AJAX.	 *	 * @return  void	 *	 * @since   3.0	 */	public function saveOrderAjax()	{		// Get the input		$input = JFactory::getApplication()->input;		$pks   = $input->post->get('cid', array(), 'array');		$order = $input->post->get('order', array(), 'array');		// Sanitize the input		JArrayHelper::toInteger($pks);		JArrayHelper::toInteger($order);		// Get the model		$model = $this->getModel();		// Save the ordering		$return = $model->saveorder($pks, $order);		if ($return)		{			echo "1";		}		// Close the application		JFactory::getApplication()->close();	}}
<?php/** * @package     Joomla.Legacy * @subpackage  Table * * @copyright   Copyright (C) 2005 - 2013 Open Source Matters, Inc. All rights reserved. * @license     GNU General Public License version 2 or later; see LICENSE */defined('JPATH_PLATFORM') or die;/** * Menu table * * @package     Joomla.Legacy * @subpackage  Table * @since       11.1 */class JTableMenu extends JTableNested{	/**	 * Constructor	 *	 * @param   JDatabaseDriver  $db  Database driver object.	 *	 * @since   11.1	 */	public function __construct($db)	{		parent::__construct('#__menu', 'id', $db);		// Set the default access level.		$this->access = (int) JFactory::getConfig()->get('access');	}	/**	 * Overloaded bind function	 *	 * @param   array  $array   Named array	 * @param   mixed  $ignore  An optional array or space separated list of properties to ignore while binding.	 *	 * @return  mixed  Null if operation was satisfactory, otherwise returns an error	 *	 * @see     JTable::bind	 * @since   11.1	 */	public function bind($array, $ignore = '')	{		// Verify that the default home menu is not unset		if ($this->home == '1' && $this->language == '*' && ($array['home'] == '0'))		{			$this->setError(JText::_('JLIB_DATABASE_ERROR_MENU_CANNOT_UNSET_DEFAULT_DEFAULT'));			return false;		}		// Verify that the default home menu set to "all" languages" is not unset		if ($this->home == '1' && $this->language == '*' && ($array['language'] != '*'))		{			$this->setError(JText::_('JLIB_DATABASE_ERROR_MENU_CANNOT_UNSET_DEFAULT'));			return false;		}		// Verify that the default home menu is not unpublished		if ($this->home == '1' && $this->language == '*' && $array['published'] != '1')		{			$this->setError(JText::_('JLIB_DATABASE_ERROR_MENU_UNPUBLISH_DEFAULT_HOME'));			return false;		}		if (isset($array['params']) && is_array($array['params']))		{			$registry = new JRegistry;			$registry->loadArray($array['params']);			$array['params'] = (string) $registry;		}		return parent::bind($array, $ignore);	}	/**	 * Overloaded check function	 *	 * @return  boolean  True on success	 *	 * @see     JTable::check	 * @since   11.1	 */	public function check()	{		// If the alias field is empty, set it to the title.		$this->alias = trim($this->alias);		if ((empty($this->alias)) && ($this->type != 'alias' && $this->type != 'url'))		{			$this->alias = $this->title;		}		// Make the alias URL safe.		$this->alias = JApplication::stringURLSafe($this->alias);		if (trim(str_replace('-', '', $this->alias)) == '')		{			$this->alias = JFactory::getDate()->format('Y-m-d-H-i-s');		}		// Cast the home property to an int for checking.		$this->home = (int) $this->home;		// Verify that a first level menu item alias is not 'component'.		if ($this->parent_id == 1 && $this->alias == 'component')		{			$this->setError(JText::_('JLIB_DATABASE_ERROR_MENU_ROOT_ALIAS_COMPONENT'));			return false;		}		// Verify that a first level menu item alias is not the name of a folder.		jimport('joomla.filesystem.folder');		if ($this->parent_id == 1 && in_array($this->alias, JFolder::folders(JPATH_ROOT)))		{			$this->setError(JText::sprintf('JLIB_DATABASE_ERROR_MENU_ROOT_ALIAS_FOLDER', $this->alias, $this->alias));			return false;		}		// Verify that the home item a component.		if ($this->home && $this->type != 'component')		{			$this->setError(JText::_('JLIB_DATABASE_ERROR_MENU_HOME_NOT_COMPONENT'));			return false;		}		return true;	}	/**	 * Overloaded store function	 *	 * @param   boolean  $updateNulls  True to update fields even if they are null.	 *	 * @return  mixed  False on failure, positive integer on success.	 *	 * @see     JTable::store	 * @since   11.1	 */	public function store($updateNulls = false)	{		$db = JFactory::getDbo();		// Verify that the alias is unique		$table = JTable::getInstance('Menu', 'JTable', array('dbo' => $this->getDbo()));		if ($table->load(array('alias' => $this->alias, 'parent_id' => $this->parent_id, 'client_id' => (int) $this->client_id, 'language' => $this->language))			&& ($table->id != $this->id || $this->id == 0))		{			if ($this->menutype == $table->menutype)			{				$this->setError(JText::_('JLIB_DATABASE_ERROR_MENU_UNIQUE_ALIAS'));			}			else			{				$this->setError(JText::_('JLIB_DATABASE_ERROR_MENU_UNIQUE_ALIAS_ROOT'));			}			return false;		}		// Verify that the home page for this language is unique		if ($this->home == '1')		{			$table = JTable::getInstance('Menu', 'JTable', array('dbo' => $this->getDbo()));			if ($table->load(array('home' => '1', 'language' => $this->language)))			{				if ($table->checked_out && $table->checked_out != $this->checked_out)				{					$this->setError(JText::_('JLIB_DATABASE_ERROR_MENU_DEFAULT_CHECKIN_USER_MISMATCH'));					return false;				}				$table->home = 0;				$table->checked_out = 0;				$table->checked_out_time = $db->getNullDate();				$table->store();			}			// Verify that the home page for this menu is unique.			if ($table->load(array('home' => '1', 'menutype' => $this->menutype)) && ($table->id != $this->id || $this->id == 0))			{				$this->setError(JText::_('JLIB_DATABASE_ERROR_MENU_HOME_NOT_UNIQUE_IN_MENU'));				return false;			}		}		if (!parent::store($updateNulls))		{			return false;		}		// Get the new path in case the node was moved		$pathNodes = $this->getPath();		$segments = array();		foreach ($pathNodes as $node)		{			// Don't include root in path			if ($node->alias != 'root')			{				$segments[] = $node->alias;			}		}		$newPath = trim(implode('/', $segments), ' /\\');		// Use new path for partial rebuild of table		// Rebuild will return positive integer on success, false on failure		return ($this->rebuild($this->{$this->_tbl_key}, $this->lft, $this->level, $newPath) > 0);	}}
<?php/** * @package     Joomla.Libraries * @subpackage  Installer * * @copyright   Copyright (C) 2005 - 2013 Open Source Matters, Inc. All rights reserved. * @license     GNU General Public License version 2 or later; see LICENSE */defined('JPATH_PLATFORM') or die;jimport('joomla.base.adapterinstance');jimport('joomla.filesystem.folder');/** * Library installer * * @package     Joomla.Libraries * @subpackage  Installer * @since       3.1 */class JInstallerAdapterLibrary extends JAdapterInstance{	/**	 * Custom loadLanguage method	 *	 * @param   string  $path  The path where to find language files.	 *	 * @return  void	 *	 * @since   3.1	 */	public function loadLanguage($path = null)	{		$source = $this->parent->getPath('source');		if (!$source)		{			$this->parent->setPath('source', JPATH_PLATFORM . '/' . $this->parent->extension->element);		}		$this->manifest = $this->parent->getManifest();		$extension = 'lib_' . strtolower(JFilterInput::getInstance()->clean((string) $this->manifest->name, 'cmd'));		$name = strtolower((string) $this->manifest->libraryname);		$lang = JFactory::getLanguage();		$source = $path ? $path : JPATH_PLATFORM . "/$name";		$lang->load($extension . '.sys', $source, null, false, false)			|| $lang->load($extension . '.sys', JPATH_SITE, null, false, false)			|| $lang->load($extension . '.sys', $source, $lang->getDefault(), false, false)			|| $lang->load($extension . '.sys', JPATH_SITE, $lang->getDefault(), false, false);	}	/**	 * Custom install method	 *	 * @return  boolean  True on success	 *	 * @since   3.1	 */	public function install()	{		// Get the extension manifest object		$this->manifest = $this->parent->getManifest();		/*		 * ---------------------------------------------------------------------------------------------		 * Manifest Document Setup Section		 * ---------------------------------------------------------------------------------------------		 */		// Set the extension's name		$name = JFilterInput::getInstance()->clean((string) $this->manifest->name, 'string');		$element = str_replace('.xml', '', basename($this->parent->getPath('manifest')));		$this->set('name', $name);		$this->set('element', $element);		$db = $this->parent->getDbo();		$query = $db->getQuery(true)			->select($db->quoteName('extension_id'))			->from($db->quoteName('#__extensions'))			->where($db->quoteName('type') . ' = ' . $db->quote('library'))			->where($db->quoteName('element') . ' = ' . $db->quote($element));		$db->setQuery($query);		$result = $db->loadResult();		if ($result)		{			// Already installed, can we upgrade?			if ($this->parent->isOverwrite() || $this->parent->isUpgrade())			{				// We can upgrade, so uninstall the old one				$installer = new JInstaller; // we don't want to compromise this instance!				$installer->uninstall('library', $result);			}			else			{				// Abort the install, no upgrade possible				$this->parent->abort(JText::_('JLIB_INSTALLER_ABORT_LIB_INSTALL_ALREADY_INSTALLED'));				return false;			}		}		// Get the library's description		$description = (string) $this->manifest->description;		if ($description)		{			$this->parent->set('message', JText::_($description));		}		else		{			$this->parent->set('message', '');		}		// Set the installation path		$group = (string) $this->manifest->libraryname;		if (!$group)		{			$this->parent->abort(JText::_('JLIB_INSTALLER_ABORT_LIB_INSTALL_NOFILE'));			return false;		}		else		{			$this->parent->setPath('extension_root', JPATH_PLATFORM . '/' . implode(DIRECTORY_SEPARATOR, explode('/', $group)));		}		/*		 * ---------------------------------------------------------------------------------------------		 * Filesystem Processing Section		 * ---------------------------------------------------------------------------------------------		 */		// If the library directory does not exist, let's create it		$created = false;		if (!file_exists($this->parent->getPath('extension_root')))		{			if (!$created = JFolder::create($this->parent->getPath('extension_root')))			{				$this->parent->abort(					JText::sprintf('JLIB_INSTALLER_ABORT_LIB_INSTALL_FAILED_TO_CREATE_DIRECTORY', $this->parent->getPath('extension_root'))				);				return false;			}		}		/*		 * If we created the library directory and will want to remove it if we		 * have to roll back the installation, let's add it to the installation		 * step stack		 */		if ($created)		{			$this->parent->pushStep(array('type' => 'folder', 'path' => $this->parent->getPath('extension_root')));		}		// Copy all necessary files		if ($this->parent->parseFiles($this->manifest->files, -1) === false)		{			// Install failed, roll back changes			$this->parent->abort();			return false;		}		// Parse optional tags		$this->parent->parseLanguages($this->manifest->languages);		$this->parent->parseMedia($this->manifest->media);		// Extension Registration		$row = JTable::getInstance('extension');		$row->name = $this->get('name');		$row->type = 'library';		$row->element = $this->get('element');		// There is no folder for libraries		$row->folder = '';		$row->enabled = 1;		$row->protected = 0;		$row->access = 1;		$row->client_id = 0;		$row->params = $this->parent->getParams();		// Custom data		$row->custom_data = '';		$row->manifest_cache = $this->parent->generateManifestCache();		if (!$row->store())		{			// Install failed, roll back changes			$this->parent->abort(JText::sprintf('JLIB_INSTALLER_ABORT_LIB_INSTALL_ROLLBACK', $db->stderr(true)));			return false;		}		/**		 * ---------------------------------------------------------------------------------------------		 * Finalization and Cleanup Section		 * ---------------------------------------------------------------------------------------------		 */		// Lastly, we will copy the manifest file to its appropriate place.		$manifest = array();		$manifest['src'] = $this->parent->getPath('manifest');		$manifest['dest'] = JPATH_MANIFESTS . '/libraries/' . basename($this->parent->getPath('manifest'));		if (!$this->parent->copyFiles(array($manifest), true))		{			// Install failed, rollback changes			$this->parent->abort(JText::_('JLIB_INSTALLER_ABORT_LIB_INSTALL_COPY_SETUP'));			return false;		}		return $row->get('extension_id');	}	/**	 * Custom update method	 *	 * @return  boolean  True on success	 *	 * @since   3.1	 */	public function update()	{		// Since this is just files, an update removes old files		// Get the extension manifest object		$this->manifest = $this->parent->getManifest();		/*		 * ---------------------------------------------------------------------------------------------		 * Manifest Document Setup Section		 * ---------------------------------------------------------------------------------------------		 */		// Set the extensions name		$name = (string) $this->manifest->name;		$name = JFilterInput::getInstance()->clean($name, 'string');		$element = str_replace('.xml', '', basename($this->parent->getPath('manifest')));		$this->set('name', $name);		$this->set('element', $element);		// We don't want to compromise this instance!		$installer = new JInstaller;		$db = $this->parent->getDbo();		$query = $db->getQuery(true)			->select($db->quoteName('extension_id'))			->from($db->quoteName('#__extensions'))			->where($db->quoteName('type') . ' = ' . $db->quote('library'))			->where($db->quoteName('element') . ' = ' . $db->quote($element));		$db->setQuery($query);		$result = $db->loadResult();		if ($result)		{			// Already installed, which would make sense			$installer->uninstall('library', $result);		}		// Now create the new files		return $this->install();	}	/**	 * Custom uninstall method	 *	 * @param   string  $id  The id of the library to uninstall.	 *	 * @return  boolean  True on success	 *	 * @since   3.1	 */	public function uninstall($id)	{		$retval = true;		// First order of business will be to load the module object table from the database.		// This should give us the necessary information to proceed.		$row = JTable::getInstance('extension');		if (!$row->load((int) $id) || !strlen($row->element))		{			JLog::add(JText::_('ERRORUNKOWNEXTENSION'), JLog::WARNING, 'jerror');			return false;		}		// Is the library we are trying to uninstall a core one?		// Because that is not a good idea...		if ($row->protected)		{			JLog::add(JText::_('JLIB_INSTALLER_ERROR_LIB_UNINSTALL_WARNCORELIBRARY'), JLog::WARNING, 'jerror');			return false;		}		$manifestFile = JPATH_MANIFESTS . '/libraries/' . $row->element . '.xml';		// Because libraries may not have their own folders we cannot use the standard method of finding an installation manifest		if (file_exists($manifestFile))		{			$manifest = new JInstallerManifestLibrary($manifestFile);			// Set the library root path			$this->parent->setPath('extension_root', JPATH_PLATFORM . '/' . $manifest->libraryname);			$xml = simplexml_load_file($manifestFile);			// If we cannot load the XML file return null			if (!$xml)			{				JLog::add(JText::_('JLIB_INSTALLER_ERROR_LIB_UNINSTALL_LOAD_MANIFEST'), JLog::WARNING, 'jerror');				return false;			}			// Check for a valid XML root tag.			if ($xml->getName() != 'extension')			{				JLog::add(JText::_('JLIB_INSTALLER_ERROR_LIB_UNINSTALL_INVALID_MANIFEST'), JLog::WARNING, 'jerror');				return false;			}			$this->parent->removeFiles($xml->files, -1);			JFile::delete($manifestFile);		}		else		{			// Remove this row entry since its invalid			$row->delete($row->extension_id);			unset($row);			JLog::add(JText::_('JLIB_INSTALLER_ERROR_LIB_UNINSTALL_INVALID_NOTFOUND_MANIFEST'), JLog::WARNING, 'jerror');			return false;		}		// TODO: Change this so it walked up the path backwards so we clobber multiple empties		// If the folder is empty, let's delete it		if (JFolder::exists($this->parent->getPath('extension_root')))		{			if (is_dir($this->parent->getPath('extension_root')))			{				$files = JFolder::files($this->parent->getPath('extension_root'));				if (!count($files))				{					JFolder::delete($this->parent->getPath('extension_root'));				}			}		}		$this->parent->removeFiles($xml->media);		$this->parent->removeFiles($xml->languages);		$row->delete($row->extension_id);		unset($row);		return $retval;	}	/**	 * Custom discover method	 *	 * @return  array  JExtension  list of extensions available	 *	 * @since   3.1	 */	public function discover()	{		$results = array();		$file_list = JFolder::files(JPATH_MANIFESTS . '/libraries', '\.xml$');		foreach ($file_list as $file)		{			$manifest_details = JInstaller::parseXMLInstallFile(JPATH_MANIFESTS . '/libraries/' . $file);			$file = JFile::stripExt($file);			$extension = JTable::getInstance('extension');			$extension->set('type', 'library');			$extension->set('client_id', 0);			$extension->set('element', $file);			$extension->set('folder', '');			$extension->set('name', $file);			$extension->set('state', -1);			$extension->set('manifest_cache', json_encode($manifest_details));			$extension->set('params', '{}');			$results[] = $extension;		}		return $results;	}	/**	 * Custom discover_install method	 *	 * @return  boolean  True on success	 *	 * @since   3.1	 */	public function discover_install()	{		/* Libraries are a strange beast; they are actually references to files		 * There are two parts to a library which are disjunct in their locations		 * 1) The manifest file (stored in /JPATH_MANIFESTS/libraries)		 * 2) The actual files (stored in /JPATH_PLATFORM/libraryname)		 * Thus installation of a library is the process of dumping files		 * in two different places. As such it is impossible to perform		 * any operation beyond mere registration of a library under the presumption		 * that the files exist in the appropriate location so that come uninstall		 * time they can be adequately removed.		 */		$manifestPath = JPATH_MANIFESTS . '/libraries/' . $this->parent->extension->element . '.xml';		$this->parent->manifest = $this->parent->isManifest($manifestPath);		$this->parent->setPath('manifest', $manifestPath);		$manifest_details = JInstaller::parseXMLInstallFile($this->parent->getPath('manifest'));		$this->parent->extension->manifest_cache = json_encode($manifest_details);		$this->parent->extension->state = 0;		$this->parent->extension->name = $manifest_details['name'];		$this->parent->extension->enabled = 1;		$this->parent->extension->params = $this->parent->getParams();		if ($this->parent->extension->store())		{			return true;		}		else		{			JLog::add(JText::_('JLIB_INSTALLER_ERROR_LIB_DISCOVER_STORE_DETAILS'), JLog::WARNING, 'jerror');			return false;		}	}	/**	 * Refreshes the extension table cache	 *	 * @return  boolean  Result of operation, true if updated, false on failure	 *	 * @since   3.1	 */	public function refreshManifestCache()	{		// Need to find to find where the XML file is since we don't store this normally		$manifestPath = JPATH_MANIFESTS . '/libraries/' . $this->parent->extension->element . '.xml';		$this->parent->manifest = $this->parent->isManifest($manifestPath);		$this->parent->setPath('manifest', $manifestPath);		$manifest_details = JInstaller::parseXMLInstallFile($this->parent->getPath('manifest'));		$this->parent->extension->manifest_cache = json_encode($manifest_details);		$this->parent->extension->name = $manifest_details['name'];		try		{			return $this->parent->extension->store();		}		catch (RuntimeException $e)		{			JLog::add(JText::_('JLIB_INSTALLER_ERROR_LIB_REFRESH_MANIFEST_CACHE'), JLog::WARNING, 'jerror');			return false;		}	}}/** * Deprecated class placeholder. You should use JInstallerAdapterLibrary instead. * * @package     Joomla.Libraries * @subpackage  Installer * @since       3.1 * @deprecated  4.0 * @codeCoverageIgnore */class JInstallerLibrary extends JInstallerAdapterLibrary{}
<?php/** * @package     Joomla.Site * @subpackage  com_weblinks * * @copyright   Copyright (C) 2005 - 2013 Open Source Matters, Inc. All rights reserved. * @license     GNU General Public License version 2 or later; see LICENSE.txt */defined('_JEXEC') or die;/** * HTML View class for the WebLinks component * * @package     Joomla.Site * @subpackage  com_weblinks * @since       1.5 */class WeblinksViewCategory extends JViewLegacy{	protected $state;	protected $items;	protected $category;	protected $children;	protected $pagination;	public function display($tpl = null)	{		$app		= JFactory::getApplication();		$params		= $app->getParams();		// Get some data from the models		$state		= $this->get('State');		$items		= $this->get('Items');		$category	= $this->get('Category');		$children	= $this->get('Children');		$parent 	= $this->get('Parent');		$pagination	= $this->get('Pagination');		// Check for errors.		if (count($errors = $this->get('Errors')))		{			JError::raiseError(500, implode("\n", $errors));			return false;		}		if ($category == false)		{			return JError::raiseWarning(404, JText::_('JGLOBAL_CATEGORY_NOT_FOUND'));		}		if ($parent == false)		{			return JError::raiseWarning(404, JText::_('JGLOBAL_CATEGORY_NOT_FOUND'));		}		// Check whether category access level allows access.		// TODO: SHould already be computed in $category->params->get('access-view')		$user	= JFactory::getUser();		$groups	= $user->getAuthorisedViewLevels();		if (!in_array($category->access, $groups))		{			return JError::raiseError(403, JText::_('JERROR_ALERTNOAUTHOR'));		}		// Prepare the data.		// Compute the weblink slug & link url.		for ($i = 0, $n = count($items); $i < $n; $i++)		{			$item		= &$items[$i];			$item->slug	= $item->alias ? ($item->id.':'.$item->alias) : $item->id;			if ($item->params->get('count_clicks', $params->get('count_clicks')) == 1)			{				$item->link = JRoute::_('index.php?option=com_weblinks&task=weblink.go&id='. $item->id);			}			else {				$item->link = $item->url;			}			$temp = new JRegistry;			$temp->loadString($item->params);			$item->params = clone($params);			$item->params->merge($temp);		}		// Setup the category parameters.		$cparams = $category->getParams();		$category->params = clone($params);		$category->params->merge($cparams);		$children = array($category->id => $children);		$maxLevel = $params->get('maxLevel', -1);		$this->maxLevel   = &$maxLevel;		$this->state      = &$state;		$this->items      = &$items;		$this->category   = &$category;		$this->children   = &$children;		$this->params     = &$params;		$this->parent     = &$parent;		$this->pagination = &$pagination;		$this->user       = &$user;		//Escape strings for HTML output		$this->pageclass_sfx = htmlspecialchars($params->get('pageclass_sfx'));		// Check for layout override only if this is not the active menu item		// If it is the active menu item, then the view and category id will match		$active	= $app->getMenu()->getActive();		if ((!$active) || ((strpos($active->link, 'view=category') === false) || (strpos($active->link, '&id=' . (string) $this->category->id) === false)))		{			if ($layout = $category->params->get('category_layout'))			{			$this->setLayout($layout);			}		}		elseif (isset($active->query['layout']))		{			// We need to set the layout in case this is an alternative menu item (with an alternative layout)			$this->setLayout($active->query['layout']);		}		$this->category->tags = new JHelperTags;		$this->category->tags->getItemTags('com_weblinks.category', $this->category->id);		$this->_prepareDocument();		parent::display($tpl);	}	/**	 * Prepares the document	 */	protected function _prepareDocument()	{		$app		= JFactory::getApplication();		$menus		= $app->getMenu();		$pathway	= $app->getPathway();		$title 		= null;		// Because the application sets a default page title,		// we need to get it from the menu item itself		$menu = $menus->getActive();		if ($menu)		{			$this->params->def('page_heading', $this->params->get('page_title', $menu->title));		}		else		{			$this->params->def('page_heading', JText::_('COM_WEBLINKS_DEFAULT_PAGE_TITLE'));		}		$id = (int) @$menu->query['id'];		if ($menu && ($menu->query['option'] != 'com_weblinks' || $id != $this->category->id))		{			$this->params->set('page_subheading', $this->category->title);			$path = array(array('title' => $this->category->title, 'link' => ''));			$category = $this->category->getParent();			while (($menu->query['option'] != 'com_weblinks' || $id != $category->id) && $category->id > 1)			{				$path[] = array('title' => $category->title, 'link' => WeblinksHelperRoute::getCategoryRoute($category->id));				$category = $category->getParent();			}			$path = array_reverse($path);			foreach ($path as $item)			{				$pathway->addItem($item['title'], $item['link']);			}		}		$title = $this->params->get('page_title', '');		if (empty($title))		{			$title = $app->getCfg('sitename');		}		elseif ($app->getCfg('sitename_pagetitles', 0) == 1)		{			$title = JText::sprintf('JPAGETITLE', $app->getCfg('sitename'), $title);		}		elseif ($app->getCfg('sitename_pagetitles', 0) == 2)		{			$title = JText::sprintf('JPAGETITLE', $title, $app->getCfg('sitename'));		}		$this->document->setTitle($title);		if ($this->category->metadesc)		{			$this->document->setDescription($this->category->metadesc);		}		elseif (!$this->category->metadesc && $this->params->get('menu-meta_description'))		{			$this->document->setDescription($this->params->get('menu-meta_description'));		}		if ($this->category->metakey)		{			$this->document->setMetadata('keywords', $this->category->metakey);		}		elseif (!$this->category->metakey && $this->params->get('menu-meta_keywords'))		{			$this->document->setMetadata('keywords', $this->params->get('menu-meta_keywords'));		}		if ($this->params->get('robots'))		{			$this->document->setMetadata('robots', $this->params->get('robots'));		}		if ($app->getCfg('MetaAuthor') == '1')		{			$this->document->setMetaData('author', $this->category->getMetadata()->get('author'));		}		$mdata = $this->category->getMetadata()->toArray();		foreach ($mdata as $k => $v)		{			if ($v)			{				$this->document->setMetadata($k, $v);			}		}		// Add alternative feed link		if ($this->params->get('show_feed_link', 1) == 1)		{			$link	= '&format=feed&limitstart=';			$attribs = array('type' => 'application/rss+xml', 'title' => 'RSS 2.0');			$this->document->addHeadLink(JRoute::_($link.'&type=rss'), 'alternate', 'rel', $attribs);			$attribs = array('type' => 'application/atom+xml', 'title' => 'Atom 1.0');			$this->document->addHeadLink(JRoute::_($link.'&type=atom'), 'alternate', 'rel', $attribs);		}	}}
<?php/** * @package     Joomla.Site * @subpackage  Layout * * @copyright   Copyright (C) 2005 - 2013 Open Source Matters, Inc. All rights reserved. * @license     GNU General Public License version 2 or later; see LICENSE.txt */defined('JPATH_BASE') or die;$blockPosition = $displayData['params']->get('info_block_position', 0);?>	<dl class="article-info  muted">		<?php if ($displayData['position'] == 'above' && ($blockPosition == 0 || $blockPosition == 2)				|| $displayData['position'] == 'below' && ($blockPosition == 1)				) : ?>			<dt class="article-info-term">				<?php // TODO: implement info_block_show_title param to hide article info title ?>				<?php if ($displayData['params']->get('info_block_show_title', 1)) : ?>					<?php echo JText::_('COM_CONTENT_ARTICLE_INFO'); ?>				<?php endif; ?>			</dt>			<?php if ($displayData['params']->get('show_author') && !empty($displayData['item']->author )) : ?>				<?php echo JLayoutHelper::render('joomla.content.info_block.author', $displayData); ?>			<?php endif; ?>			<?php if ($displayData['params']->get('show_parent_category') && !empty($displayData['item']->parent_slug)) : ?>				<?php echo JLayoutHelper::render('joomla.content.info_block.parent_category', $displayData); ?>			<?php endif; ?>			<?php if ($displayData['params']->get('show_category')) : ?>				<?php echo JLayoutHelper::render('joomla.content.info_block.category', $displayData); ?>			<?php endif; ?>			<?php if ($displayData['params']->get('show_publish_date')) : ?>				<?php echo JLayoutHelper::render('joomla.content.info_block.publish_date', $displayData); ?>			<?php endif; ?>		<?php endif; ?>		<?php if ($displayData['position'] == 'above' && ($blockPosition == 0)				|| $displayData['position'] == 'below' && ($blockPosition == 1 || $blockPosition == 2)				) : ?>			<?php if ($displayData['params']->get('show_create_date')) : ?>				<?php echo JLayoutHelper::render('joomla.content.info_block.create_date', $displayData); ?>			<?php endif; ?>			<?php if ($displayData['params']->get('show_modify_date')) : ?>				<?php echo JLayoutHelper::render('joomla.content.info_block.modify_date', $displayData); ?>			<?php endif; ?>			<?php if ($displayData['params']->get('show_hits')) : ?>				<?php echo JLayoutHelper::render('joomla.content.info_block.hits', $displayData); ?>			<?php endif; ?>		<?php endif; ?>	</dl>
<?php/** * @package     Joomla.Libraries * @subpackage  Installer * * @copyright   Copyright (C) 2005 - 2013 Open Source Matters, Inc. All rights reserved. * @license     GNU General Public License version 2 or later; see LICENSE */defined('JPATH_PLATFORM') or die;jimport('joomla.base.adapterinstance');jimport('joomla.filesystem.folder');/** * File installer * * @package     Joomla.Libraries * @subpackage  Installer * @since       3.1 */class JInstallerAdapterFile extends JAdapterInstance{	protected $route = 'install';	/**	 * Custom loadLanguage method	 *	 * @param   string  $path  The path on which to find language files.	 *	 * @return  void	 *	 * @since   3.1	 */	public function loadLanguage($path)	{		$this->manifest = $this->parent->getManifest();		$extension = 'files_' . str_replace('files_', '', strtolower(JFilterInput::getInstance()->clean((string) $this->manifest->name, 'cmd')));		$lang = JFactory::getLanguage();		$source = $path;		$lang->load($extension . '.sys', $source, null, false, false)			|| $lang->load($extension . '.sys', JPATH_SITE, null, false, false)			|| $lang->load($extension . '.sys', $source, $lang->getDefault(), false, false)			|| $lang->load($extension . '.sys', JPATH_SITE, $lang->getDefault(), false, false);	}	/**	 * Custom install method	 *	 * @return  boolean  True on success	 *	 * @since   3.1	 */	public function install()	{		// Get the extension manifest object		$this->manifest = $this->parent->getManifest();		/*		 * ---------------------------------------------------------------------------------------------		 * Manifest Document Setup Section		 * ---------------------------------------------------------------------------------------------		 */		// Set the extension's name		$name = JFilterInput::getInstance()->clean((string) $this->manifest->name, 'string');		$this->set('name', $name);		// Set element		$manifestPath = JPath::clean($this->parent->getPath('manifest'));		$element = preg_replace('/\.xml/', '', basename($manifestPath));		$this->set('element', $element);		// Get the component description		$description = (string) $this->manifest->description;		if ($description)		{			$this->parent->set('message', JText::_($description));		}		else		{			$this->parent->set('message', '');		}		// Check if the extension by the same name is already installed		if ($this->extensionExistsInSystem($element))		{			// Package with same name already exists			if (!$this->parent->isOverwrite())			{				// We're not overwriting so abort				$this->parent->abort(JText::_('JLIB_INSTALLER_ABORT_FILE_SAME_NAME'));				return false;			}			else			{				// Swap to the update route				$this->route = 'update';			}		}		// Set the file root path		if ($name == 'files_joomla')		{			// If we are updating the Joomla core, set the root path to the root of Joomla			$this->parent->setPath('extension_root', JPATH_ROOT);		}		else		{			$this->parent->setPath('extension_root', JPATH_MANIFESTS . '/files/' . $this->get('element'));		}		/**		 * ---------------------------------------------------------------------------------------------		 * Installer Trigger Loading		 * ---------------------------------------------------------------------------------------------		 */		// If there is an manifest class file, lets load it; we'll copy it later (don't have dest yet)		$this->scriptElement = $this->manifest->scriptfile;		$manifestScript = (string) $this->manifest->scriptfile;		if ($manifestScript)		{			$manifestScriptFile = $this->parent->getPath('source') . '/' . $manifestScript;			if (is_file($manifestScriptFile))			{				// Load the file				include_once $manifestScriptFile;			}			// Set the class name			$classname = $element . 'InstallerScript';			if (class_exists($classname))			{				// Create a new instance				$this->parent->manifestClass = new $classname($this);				// And set this so we can copy it later				$this->set('manifest_script', $manifestScript);			}		}		// Run preflight if possible (since we know we're not an update)		ob_start();		ob_implicit_flush(false);		if ($this->parent->manifestClass && method_exists($this->parent->manifestClass, 'preflight'))		{			if ($this->parent->manifestClass->preflight($this->route, $this) === false)			{				// Install failed, rollback changes				$this->parent->abort(JText::_('JLIB_INSTALLER_ABORT_FILE_INSTALL_CUSTOM_INSTALL_FAILURE'));				return false;			}		}		// Create msg object; first use here		$msg = ob_get_contents();		ob_end_clean();		// Populate File and Folder List to copy		$this->populateFilesAndFolderList();		/*		 * ---------------------------------------------------------------------------------------------		 * Filesystem Processing Section		 * ---------------------------------------------------------------------------------------------		 */		// Now that we have folder list, lets start creating them		foreach ($this->folderList as $folder)		{			if (!JFolder::exists($folder))			{				if (!$created = JFolder::create($folder))				{					JLog::add(JText::sprintf('JLIB_INSTALLER_ABORT_FILE_INSTALL_FAIL_SOURCE_DIRECTORY', $folder), JLog::WARNING, 'jerror');					// If installation fails, rollback					$this->parent->abort();					return false;				}				// Since we created a directory and will want to remove it if we have to roll back.				// The installation due to some errors, let's add it to the installation step stack.				if ($created)				{					$this->parent->pushStep(array('type' => 'folder', 'path' => $folder));				}			}		}		// Now that we have file list, let's start copying them		$this->parent->copyFiles($this->fileList);		// Parse optional tags		$this->parent->parseLanguages($this->manifest->languages);		/**		 * ---------------------------------------------------------------------------------------------		 * Finalization and Cleanup Section		 * ---------------------------------------------------------------------------------------------		 */		// Get a database connector object		$db = $this->parent->getDbo();		/*		 * Check to see if a file extension by the same name is already installed		 * If it is, then update the table because if the files aren't there		 * we can assume that it was (badly) uninstalled		 * If it isn't, add an entry to extensions		 */		$query = $db->getQuery(true)			->select($db->quoteName('extension_id'))			->from($db->quoteName('#__extensions'))			->where($db->quoteName('type') . ' = ' . $db->quote('file'))			->where($db->quoteName('element') . ' = ' . $db->quote($element));		$db->setQuery($query);		try		{			$db->execute();		}		catch (RuntimeException $e)		{			// Install failed, roll back changes			$this->parent->abort(				JText::sprintf('JLIB_INSTALLER_ABORT_FILE_ROLLBACK', JText::_('JLIB_INSTALLER_' . $this->route), $db->stderr(true))			);			return false;		}		$id = $db->loadResult();		$row = JTable::getInstance('extension');		if ($id)		{			// Load the entry and update the manifest_cache			$row->load($id);			// Update name			$row->set('name', $this->get('name'));			// Update manifest			$row->manifest_cache = $this->parent->generateManifestCache();			if (!$row->store())			{				// Install failed, roll back changes				$this->parent->abort(					JText::sprintf('JLIB_INSTALLER_ABORT_FILE_ROLLBACK', JText::_('JLIB_INSTALLER_' . $this->route), $db->stderr(true))				);				return false;			}		}		else		{			// Add an entry to the extension table with a whole heap of defaults			$row->set('name', $this->get('name'));			$row->set('type', 'file');			$row->set('element', $this->get('element'));			// There is no folder for files so leave it blank			$row->set('folder', '');			$row->set('enabled', 1);			$row->set('protected', 0);			$row->set('access', 0);			$row->set('client_id', 0);			$row->set('params', '');			$row->set('system_data', '');			$row->set('manifest_cache', $this->parent->generateManifestCache());			if (!$row->store())			{				// Install failed, roll back changes				$this->parent->abort(JText::sprintf('JLIB_INSTALLER_ABORT_FILE_INSTALL_ROLLBACK', $db->stderr(true)));				return false;			}			// Since we have created a module item, we add it to the installation step stack			// so that if we have to rollback the changes we can undo it.			$this->parent->pushStep(array('type' => 'extension', 'extension_id' => $row->extension_id));		}		// Let's run the queries for the file		if (strtolower($this->route) == 'install')		{			$result = $this->parent->parseSQLFiles($this->manifest->install->sql);			if ($result === false)			{				// Install failed, rollback changes				$this->parent->abort(					JText::sprintf('JLIB_INSTALLER_ABORT_FILE_INSTALL_SQL_ERROR', JText::_('JLIB_INSTALLER_' . $this->route), $db->stderr(true))				);				return false;			}			// Set the schema version to be the latest update version			if ($this->manifest->update)			{				$this->parent->setSchemaVersion($this->manifest->update->schemas, $row->extension_id);			}		}		elseif (strtolower($this->route) == 'update')		{			if ($this->manifest->update)			{				$result = $this->parent->parseSchemaUpdates($this->manifest->update->schemas, $row->extension_id);				if ($result === false)				{					// Install failed, rollback changes					$this->parent->abort(JText::sprintf('JLIB_INSTALLER_ABORT_FILE_UPDATE_SQL_ERROR', $db->stderr(true)));					return false;				}			}		}		// Try to run the script file's custom method based on the route		ob_start();		ob_implicit_flush(false);		if ($this->parent->manifestClass && method_exists($this->parent->manifestClass, $this->route))		{			if ($this->parent->manifestClass->{$this->route}($this) === false)			{				// Install failed, rollback changes				$this->parent->abort(JText::_('JLIB_INSTALLER_ABORT_FILE_INSTALL_CUSTOM_INSTALL_FAILURE'));				return false;			}		}		// Append messages		$msg .= ob_get_contents();		ob_end_clean();		// Lastly, we will copy the manifest file to its appropriate place.		$manifest = array();		$manifest['src'] = $this->parent->getPath('manifest');		$manifest['dest'] = JPATH_MANIFESTS . '/files/' . basename($this->parent->getPath('manifest'));		if (!$this->parent->copyFiles(array($manifest), true))		{			// Install failed, rollback changes			$this->parent->abort(JText::_('JLIB_INSTALLER_ABORT_FILE_INSTALL_COPY_SETUP'));			return false;		}		// If there is a manifest script, let's copy it.		if ($this->get('manifest_script'))		{			// First, we have to create a folder for the script if one isn't present			if (!file_exists($this->parent->getPath('extension_root')))			{				JFolder::create($this->parent->getPath('extension_root'));			}			$path['src'] = $this->parent->getPath('source') . '/' . $this->get('manifest_script');			$path['dest'] = $this->parent->getPath('extension_root') . '/' . $this->get('manifest_script');			if (!file_exists($path['dest']) || $this->parent->isOverwrite())			{				if (!$this->parent->copyFiles(array($path)))				{					// Install failed, rollback changes					$this->parent->abort(JText::_('JLIB_INSTALLER_ABORT_PACKAGE_INSTALL_MANIFEST'));					return false;				}			}		}		// Clobber any possible pending updates		$update = JTable::getInstance('update');		$uid = $update->find(			array('element' => $this->get('element'), 'type' => 'file', 'client_id' => '', 'folder' => '')		);		if ($uid)		{			$update->delete($uid);		}		// And now we run the postflight		ob_start();		ob_implicit_flush(false);		if ($this->parent->manifestClass && method_exists($this->parent->manifestClass, 'postflight'))		{			$this->parent->manifestClass->postflight($this->route, $this);		}		// Append messages		$msg .= ob_get_contents();		ob_end_clean();		if ($msg != '')		{			$this->parent->set('extension_message', $msg);		}		return $row->get('extension_id');	}	/**	 * Custom update method	 *	 * @return  boolean  True on success	 *	 * @since   3.1	 */	public function update()	{		// Set the overwrite setting		$this->parent->setOverwrite(true);		$this->parent->setUpgrade(true);		$this->route = 'update';		// ...and adds new files		return $this->install();	}	/**	 * Custom uninstall method	 *	 * @param   string  $id  The id of the file to uninstall	 *	 * @return  boolean  True on success	 *	 * @since   3.1	 */	public function uninstall($id)	{		$row = JTable::getInstance('extension');		if (!$row->load($id))		{			JLog::add(JText::_('JLIB_INSTALLER_ERROR_FILE_UNINSTALL_LOAD_ENTRY'), JLog::WARNING, 'jerror');			return false;		}		if ($row->protected)		{			JLog::add(JText::_('JLIB_INSTALLER_ERROR_FILE_UNINSTALL_WARNCOREFILE'), JLog::WARNING, 'jerror');			return false;		}		$retval = true;		$manifestFile = JPATH_MANIFESTS . '/files/' . $row->element . '.xml';		// Because files may not have their own folders we cannot use the standard method of finding an installation manifest		if (file_exists($manifestFile))		{			// Set the files root path			$this->parent->setPath('extension_root', JPATH_MANIFESTS . '/files/' . $row->element);			$xml = simplexml_load_file($manifestFile);			// If we cannot load the XML file return null			if (!$xml)			{				JLog::add(JText::_('JLIB_INSTALLER_ERROR_FILE_UNINSTALL_LOAD_MANIFEST'), JLog::WARNING, 'jerror');				return false;			}			// Check for a valid XML root tag.			if ($xml->getName() != 'extension')			{				JLog::add(JText::_('JLIB_INSTALLER_ERROR_FILE_UNINSTALL_INVALID_MANIFEST'), JLog::WARNING, 'jerror');				return false;			}			$this->manifest = $xml;			// If there is an manifest class file, let's load it			$this->scriptElement = $this->manifest->scriptfile;			$manifestScript = (string) $this->manifest->scriptfile;			if ($manifestScript)			{				$manifestScriptFile = $this->parent->getPath('extension_root') . '/' . $manifestScript;				if (is_file($manifestScriptFile))				{					// Load the file					include_once $manifestScriptFile;				}				// Set the class name				$classname = $row->element . 'InstallerScript';				if (class_exists($classname))				{					// Create a new instance					$this->parent->manifestClass = new $classname($this);					// And set this so we can copy it later					$this->set('manifest_script', $manifestScript);				}			}			ob_start();			ob_implicit_flush(false);			// Run uninstall if possible			if ($this->parent->manifestClass && method_exists($this->parent->manifestClass, 'uninstall'))			{				$this->parent->manifestClass->uninstall($this);			}			$msg = ob_get_contents();			ob_end_clean();			if ($msg != '')			{				$this->parent->set('extension_message', $msg);			}			$db = JFactory::getDbo();			// Let's run the uninstall queries for the extension			$result = $this->parent->parseSQLFiles($this->manifest->uninstall->sql);			if ($result === false)			{				// Install failed, rollback changes				JLog::add(JText::sprintf('JLIB_INSTALLER_ERROR_FILE_UNINSTALL_SQL_ERROR', $db->stderr(true)), JLog::WARNING, 'jerror');				$retval = false;			}			// Remove the schema version			$query = $db->getQuery(true)				->delete('#__schemas')				->where('extension_id = ' . $row->extension_id);			$db->setQuery($query);			$db->execute();			// Loop through all elements and get list of files and folders			foreach ($xml->fileset->files as $eFiles)			{				$folder = (string) $eFiles->attributes()->folder;				$target = (string) $eFiles->attributes()->target;				// Create folder path				if (empty($target))				{					$targetFolder = JPATH_ROOT;				}				else				{					$targetFolder = JPATH_ROOT . '/' . $target;				}				$folderList = array();				// Check if all children exists				if (count($eFiles->children()) > 0)				{					// Loop through all filenames elements					foreach ($eFiles->children() as $eFileName)					{						if ($eFileName->getName() == 'folder')						{							$folderList[] = $targetFolder . '/' . $eFileName;						}						else						{							$fileName = $targetFolder . '/' . $eFileName;							JFile::delete($fileName);						}					}				}				// Delete any folders that don't have any content in them.				foreach ($folderList as $folder)				{					$files = JFolder::files($folder);					if (!count($files))					{						JFolder::delete($folder);					}				}			}			JFile::delete($manifestFile);			// Lastly, remove the extension_root			$folder = $this->parent->getPath('extension_root');			if (JFolder::exists($folder))			{				JFolder::delete($folder);			}		}		else		{			JLog::add(JText::_('JLIB_INSTALLER_ERROR_FILE_UNINSTALL_INVALID_NOTFOUND_MANIFEST'), JLog::WARNING, 'jerror');			// Delete the row because its broken			$row->delete();			return false;		}		$this->parent->removeFiles($xml->languages);		$row->delete();		return $retval;	}	/**	 * Function used to check if extension is already installed	 *	 * @param   string  $extension  The element name of the extension to install	 *	 * @return  boolean  True if extension exists	 *	 * @since   3.1	 */	protected function extensionExistsInSystem($extension = null)	{		// Get a database connector object		$db = $this->parent->getDBO();		$query = $db->getQuery(true)			->select($db->quoteName('extension_id'))			->from($db->quoteName('#__extensions'))			->where($db->quoteName('type') . ' = ' . $db->quote('file'))			->where($db->quoteName('element') . ' = ' . $db->quote($extension));		$db->setQuery($query);		try		{			$db->execute();		}		catch (RuntimeException $e)		{			// Install failed, roll back changes			$this->parent->abort(JText::sprintf('JLIB_INSTALLER_ABORT_FILE_ROLLBACK', $db->stderr(true)));			return false;		}		$id = $db->loadResult();		if (empty($id))		{			return false;		}		return true;	}	/**	 * Function used to populate files and folder list	 *	 * @return  boolean  none	 *	 * @since   3.1	 */	protected function populateFilesAndFolderList()	{		// Initialise variable		$this->folderList = array();		$this->fileList = array();		// Set root folder names		$packagePath = $this->parent->getPath('source');		$jRootPath = JPath::clean(JPATH_ROOT);		// Loop through all elements and get list of files and folders		foreach ($this->manifest->fileset->files as $eFiles)		{			// Check if the element is files element			$folder = (string) $eFiles->attributes()->folder;			$target = (string) $eFiles->attributes()->target;			// Split folder names into array to get folder names. This will help in creating folders			$arrList = preg_split("#/|\\/#", $target);			$folderName = $jRootPath;			foreach ($arrList as $dir)			{				if (empty($dir))				{					continue;				}				$folderName .= '/' . $dir;				// Check if folder exists, if not then add to the array for folder creation				if (!JFolder::exists($folderName))				{					array_push($this->folderList, $folderName);				}			}			// Create folder path			$sourceFolder = empty($folder) ? $packagePath : $packagePath . '/' . $folder;			$targetFolder = empty($target) ? $jRootPath : $jRootPath . '/' . $target;			// Check if source folder exists			if (!JFolder::exists($sourceFolder))			{				JLog::add(JText::sprintf('JLIB_INSTALLER_ABORT_FILE_INSTALL_FAIL_SOURCE_DIRECTORY', $sourceFolder), JLog::WARNING, 'jerror');				// If installation fails, rollback				$this->parent->abort();				return false;			}			// Check if all children exists			if (count($eFiles->children()))			{				// Loop through all filenames elements				foreach ($eFiles->children() as $eFileName)				{					$path['src'] = $sourceFolder . '/' . $eFileName;					$path['dest'] = $targetFolder . '/' . $eFileName;					$path['type'] = 'file';					if ($eFileName->getName() == 'folder')					{						$folderName = $targetFolder . '/' . $eFileName;						array_push($this->folderList, $folderName);						$path['type'] = 'folder';					}					array_push($this->fileList, $path);				}			}			else			{				$files = JFolder::files($sourceFolder);				foreach ($files as $file)				{					$path['src'] = $sourceFolder . '/' . $file;					$path['dest'] = $targetFolder . '/' . $file;					array_push($this->fileList, $path);				}			}		}	}	/**	 * Refreshes the extension table cache	 *	 * @return  boolean result of operation, true if updated, false on failure	 *	 * @since   3.1	 */	public function refreshManifestCache()	{		// Need to find to find where the XML file is since we don't store this normally		$manifestPath = JPATH_MANIFESTS . '/files/' . $this->parent->extension->element . '.xml';		$this->parent->manifest = $this->parent->isManifest($manifestPath);		$this->parent->setPath('manifest', $manifestPath);		$manifest_details = JInstaller::parseXMLInstallFile($this->parent->getPath('manifest'));		$this->parent->extension->manifest_cache = json_encode($manifest_details);		$this->parent->extension->name = $manifest_details['name'];		try		{			return $this->parent->extension->store();		}		catch (RuntimeException $e)		{			JLog::add(JText::_('JLIB_INSTALLER_ERROR_PACK_REFRESH_MANIFEST_CACHE'), JLog::WARNING, 'jerror');			return false;		}	}}/** * Deprecated class placeholder. You should use JInstallerAdapterFile instead. * * @package     Joomla.Libraries * @subpackage  Installer * @since       3.1 * @deprecated  4.0 * @codeCoverageIgnore */class JInstallerFile extends JInstallerAdapterFile{}
<?php/** * @package     Joomla.Administrator * @subpackage  com_contact * * @copyright   Copyright (C) 2005 - 2013 Open Source Matters, Inc. All rights reserved. * @license     GNU General Public License version 2 or later; see LICENSE.txt */defined('_JEXEC') or die;/** * Component Controller * * @package     Joomla.Administrator * @subpackage  com_contact */class ContactController extends JControllerLegacy{	/**	 * @var		string	The default view.	 * @since   1.6	 */	protected $default_view = 'contacts';	/**	 * Method to display a view.	 *	 * @param   boolean			If true, the view output will be cached	 * @param   array  An array of safe url parameters and their variable types, for valid values see {@link JFilterInput::clean()}.	 *	 * @return  JController		This object to support chaining.	 * @since   1.5	 */	public function display($cachable = false, $urlparams = false)	{		require_once JPATH_COMPONENT.'/helpers/contact.php';		$view   = $this->input->get('view', 'contacts');		$layout = $this->input->get('layout', 'default');		$id     = $this->input->getInt('id');		// Check for edit form.		if ($view == 'contact' && $layout == 'edit' && !$this->checkEditId('com_contact.edit.contact', $id)) {			// Somehow the person just went to the form - we don't allow that.			$this->setError(JText::sprintf('JLIB_APPLICATION_ERROR_UNHELD_ID', $id));			$this->setMessage($this->getError(), 'error');			$this->setRedirect(JRoute::_('index.php?option=com_contact&view=contacts', false));			return false;		}		parent::display();		return $this;	}}
<?php/** * @package     Joomla.Administrator * @subpackage  com_newsfeeds * * @copyright   Copyright (C) 2005 - 2013 Open Source Matters, Inc. All rights reserved. * @license     GNU General Public License version 2 or later; see LICENSE.txt */defined('_JEXEC') or die;/** * Newsfeed controller class. * * @package     Joomla.Administrator * @subpackage  com_newsfeeds * @since       1.6 */class NewsfeedsControllerNewsfeed extends JControllerForm{	/**	 * Method override to check if you can add a new record.	 *	 * @param   array  $data  An array of input data.	 *	 * @return  boolean	 *	 * @since   1.6	 */	protected function allowAdd($data = array())	{		$user = JFactory::getUser();		$categoryId = JArrayHelper::getValue($data, 'catid', $this->input->getInt('filter_category_id'), 'int');		$allow = null;		if ($categoryId)		{			// If the category has been passed in the URL check it.			$allow = $user->authorise('core.create', $this->option . '.category.' . $categoryId);		}		if ($allow === null)		{			// In the absence of better information, revert to the component permissions.			return parent::allowAdd($data);		}		else		{			return $allow;		}	}	/**	 * Method to check if you can edit a record.	 *	 * @param   array   $data  An array of input data.	 * @param   string  $key   The name of the key for the primary key.	 *	 * @return  boolean	 *	 * @since   1.6	 */	protected function allowEdit($data = array(), $key = 'id')	{		$user = JFactory::getUser();		$recordId = (int) isset($data[$key]) ? $data[$key] : 0;		$categoryId = 0;		if ($recordId)		{			$categoryId = (int) $this->getModel()->getItem($recordId)->catid;		}		if ($categoryId)		{			// The category has been set. Check the category permissions.			return $user->authorise('core.edit', $this->option . '.category.' . $categoryId);		}		else		{			// Since there is no asset tracking, revert to the component permissions.			return parent::allowEdit($data, $key);		}	}	/**	 * Method to run batch operations.	 *	 * @param   object  $model  The model.	 *	 * @return  boolean   True if successful, false otherwise and internal error is set.	 *	 * @since   2.5	 */	public function batch($model = null)	{		JSession::checkToken() or jexit(JText::_('JINVALID_TOKEN'));		// Set the model		$model = $this->getModel('Newsfeed', '', array());		// Preset the redirect		$this->setRedirect(JRoute::_('index.php?option=com_newsfeeds&view=newsfeeds' . $this->getRedirectToListAppend(), false));		return parent::batch($model);	}	/**	 * Function that allows child controller access to model data after the data has been saved.	 *	 * @param   JModelLegacy  $model      The data model object.	 * @param   array         $validData  The validated data.	 *	 * @return  void	 *	 * @since   3.1	 */	protected function postSaveHook(JModelLegacy $model, $validData = array())	{	}}
<?php/** * @package     Joomla.Administrator * @subpackage  com_content * * @copyright   Copyright (C) 2005 - 2013 Open Source Matters, Inc. All rights reserved. * @license     GNU General Public License version 2 or later; see LICENSE.txt */defined('_JEXEC') or die;require_once __DIR__ . '/articles.php';/** * About Page Model * * @package     Joomla.Administrator * @subpackage  com_content */class ContentModelFeatured extends ContentModelArticles{	/**	 * Constructor.	 *	 * @param   array  An optional associative array of configuration settings.	 * @see     JController	 * @since   1.6	 */	public function __construct($config = array())	{		if (empty($config['filter_fields']))		{			$config['filter_fields'] = array(				'id', 'a.id',				'title', 'a.title',				'alias', 'a.alias',				'checked_out', 'a.checked_out',				'checked_out_time', 'a.checked_out_time',				'catid', 'a.catid', 'category_title',				'state', 'a.state',				'access', 'a.access', 'access_level',				'created', 'a.created',				'created_by', 'a.created_by',				'created_by_alias', 'a.created_by_alias',				'ordering', 'a.ordering',				'featured', 'a.featured',				'language', 'a.language',				'hits', 'a.hits',				'publish_up', 'a.publish_up',				'publish_down', 'a.publish_down',				'fp.ordering',			);		}		parent::__construct($config);	}	/**	 * @param   boolean    True to join selected foreign information	 *	 * @return  string	 */	protected function getListQuery($resolveFKs = true)	{		// Create a new query object.		$db = $this->getDbo();		$query = $db->getQuery(true);		// Select the required fields from the table.		$query->select(			$this->getState(				'list.select',				'a.id, a.title, a.alias, a.checked_out, a.checked_out_time, a.catid, a.state, a.access, a.created, a.hits,' .					'a.language, a.created_by_alias, a.publish_up, a.publish_down'			)		);		$query->from('#__content AS a');		// Join over the language		$query->select('l.title AS language_title')			->join('LEFT', $db->quoteName('#__languages') . ' AS l ON l.lang_code = a.language');		// Join over the content table.		$query->select('fp.ordering')			->join('INNER', '#__content_frontpage AS fp ON fp.content_id = a.id');		// Join over the users for the checked out user.		$query->select('uc.name AS editor')			->join('LEFT', '#__users AS uc ON uc.id=a.checked_out');		// Join over the asset groups.		$query->select('ag.title AS access_level')			->join('LEFT', '#__viewlevels AS ag ON ag.id = a.access');		// Join over the categories.		$query->select('c.title AS category_title')			->join('LEFT', '#__categories AS c ON c.id = a.catid');		// Join over the users for the author.		$query->select('ua.name AS author_name')			->join('LEFT', '#__users AS ua ON ua.id = a.created_by');		// Filter by access level.		if ($access = $this->getState('filter.access'))		{			$query->where('a.access = ' . (int) $access);		}		// Filter by published state		$published = $this->getState('filter.published');		if (is_numeric($published))		{			$query->where('a.state = ' . (int) $published);		}		elseif ($published === '')		{			$query->where('(a.state = 0 OR a.state = 1)');		}		// Filter by a single or group of categories.		$baselevel = 1;		$categoryId = $this->getState('filter.category_id');		if (is_numeric($categoryId))		{			$cat_tbl = JTable::getInstance('Category', 'JTable');			$cat_tbl->load($categoryId);			$rgt = $cat_tbl->rgt;			$lft = $cat_tbl->lft;			$baselevel = (int) $cat_tbl->level;			$query->where('c.lft >= ' . (int) $lft)				->where('c.rgt <= ' . (int) $rgt);		}		elseif (is_array($categoryId))		{			JArrayHelper::toInteger($categoryId);			$categoryId = implode(',', $categoryId);			$query->where('a.catid IN (' . $categoryId . ')');		}		// Filter on the level.		if ($level = $this->getState('filter.level'))		{			$query->where('c.level <= ' . ((int) $level + (int) $baselevel - 1));		}		// Filter by search in title		$search = $this->getState('filter.search');		if (!empty($search))		{			if (stripos($search, 'id:') === 0)			{				$query->where('a.id = ' . (int) substr($search, 3));			}			else			{				$search = $db->quote('%' . $db->escape($search, true) . '%');				$query->where('a.title LIKE ' . $search . ' OR a.alias LIKE ' . $search);			}		}		// Filter on the language.		if ($language = $this->getState('filter.language'))		{			$query->where('a.language = ' . $db->quote($language));		}		// Add the list ordering clause.		$query->order($db->escape($this->getState('list.ordering', 'a.title')) . ' ' . $db->escape($this->getState('list.direction', 'ASC')));		//echo nl2br(str_replace('#__','jos_',(string)$query));		return $query;	}}
<?php/** * @package     Joomla.Administrator * @subpackage  com_modules * * @copyright   Copyright (C) 2005 - 2013 Open Source Matters, Inc. All rights reserved. * @license     GNU General Public License version 2 or later; see LICENSE.txt */defined('_JEXEC') or die;/** * Module model. * * @package     Joomla.Administrator * @subpackage  com_modules * @since       1.6 */class ModulesModelSelect extends JModelList{	/**	 * Method to auto-populate the model state.	 *	 * Note. Calling getState in this method will result in recursion.	 *	 * @since   1.6	 */	protected function populateState($ordering = null, $direction = null)	{		$app = JFactory::getApplication('administrator');		// Load the filter state.		$clientId = $app->getUserState('com_modules.modules.filter.client_id', 0);		$this->setState('filter.client_id', (int) $clientId);		// Load the parameters.		$params = JComponentHelper::getParams('com_modules');		$this->setState('params', $params);		// Manually set limits to get all modules.		$this->setState('list.limit', 0);		$this->setState('list.start', 0);		$this->setState('list.ordering', 'a.name');		$this->setState('list.direction', 'ASC');	}	/**	 * Method to get a store id based on model configuration state.	 *	 * This is necessary because the model is used by the component and	 * different modules that might need different sets of data or different	 * ordering requirements.	 *	 * @param   string    A prefix for the store id.	 *	 * @return  string    A store id.	 */	protected function getStoreId($id = '')	{		// Compile the store id.		$id .= ':' . $this->getState('filter.client_id');		return parent::getStoreId($id);	}	/**	 * Build an SQL query to load the list data.	 *	 * @return  JDatabaseQuery	 */	protected function getListQuery()	{		// Create a new query object.		$db = $this->getDbo();		$query = $db->getQuery(true);		// Select the required fields from the table.		$query->select(			$this->getState(				'list.select',				'a.extension_id, a.name, a.element AS module'			)		);		$query->from($db->quoteName('#__extensions') . ' AS a');		// Filter by module		$query->where('a.type = ' . $db->quote('module'));		// Filter by client.		$clientId = $this->getState('filter.client_id');		$query->where('a.client_id = ' . (int) $clientId);		// Filter by enabled		$query->where('a.enabled = 1');		// Add the list ordering clause.		$query->order($db->escape($this->getState('list.ordering', 'a.ordering')) . ' ' . $db->escape($this->getState('list.direction', 'ASC')));		//echo nl2br(str_replace('#__','jos_',$query));		return $query;	}	/**	 * Method to get a list of items.	 *	 * @return  mixed  An array of objects on success, false on failure.	 */	public function &getItems()	{		// Get the list of items from the database.		$items = parent::getItems();		$client = JApplicationHelper::getClientInfo($this->getState('filter.client_id', 0));		$lang = JFactory::getLanguage();		// Loop through the results to add the XML metadata,		// and load language support.		foreach ($items as &$item)		{			$path = JPath::clean($client->path . '/modules/' . $item->module . '/' . $item->module . '.xml');			if (file_exists($path))			{				$item->xml = simplexml_load_file($path);			}			else			{				$item->xml = null;			}			// 1.5 Format; Core files or language packs then			// 1.6 3PD Extension Support			$lang->load($item->module . '.sys', $client->path, null, false, false)				|| $lang->load($item->module . '.sys', $client->path . '/modules/' . $item->module, null, false, false)				|| $lang->load($item->module . '.sys', $client->path, $lang->getDefault(), false, false)				|| $lang->load($item->module . '.sys', $client->path . '/modules/' . $item->module, $lang->getDefault(), false, false);			$item->name = JText::_($item->name);			if (isset($item->xml) && $text = trim($item->xml->description))			{				$item->desc = JText::_($text);			}			else			{				$item->desc = JText::_('COM_MODULES_NODESCRIPTION');			}		}		$items = JArrayHelper::sortObjects($items, 'name', 1, true, $lang->getLocale());		// TODO: Use the cached XML from the extensions table?		return $items;	}}
<?php/** * @package     Joomla.Administrator * @subpackage  com_categories * * @copyright   Copyright (C) 2005 - 2013 Open Source Matters, Inc. All rights reserved. * @license     GNU General Public License version 2 or later; see LICENSE.txt */defined('_JEXEC') or die;echo JLayoutHelper::render('joomla.edit.metadata', $this);?>
<?php/** * @package     Joomla.Administrator * @subpackage  com_banners * * @copyright   Copyright (C) 2005 - 2013 Open Source Matters, Inc. All rights reserved. * @license     GNU General Public License version 2 or later; see LICENSE.txt */defined('_JEXEC') or die;/** * Methods supporting a list of tracks. * * @package     Joomla.Administrator * @subpackage  com_banners * @since       1.6 */class BannersModelTracks extends JModelList{	/**	 * Constructor.	 *	 * @param   array  An optional associative array of configuration settings.	 * @see     JController	 * @since   1.6	 */	public function __construct($config = array())	{		if (empty($config['filter_fields']))		{			$config['filter_fields'] = array(				'name', 'b.name',				'cl.name', 'client_name',				'cat.title', 'category_title',				'track_type', 'a.track_type',				'count', 'a.count',				'track_date', 'a.track_date',			);		}		parent::__construct($config);	}	/**	 * @since   1.6	 */	protected $basename;	/**	 * Method to auto-populate the model state.	 *	 * Note. Calling getState in this method will result in recursion.	 *	 * @since   1.6	 */	protected function populateState($ordering = null, $direction = null)	{		$app = JFactory::getApplication('administrator');		// Load the filter state.		$type = $this->getUserStateFromRequest($this->context . '.filter.type', 'filter_type');		$this->setState('filter.type', $type);		$begin = $this->getUserStateFromRequest($this->context . '.filter.begin', 'filter_begin', '', 'string');		$this->setState('filter.begin', $begin);		$end = $this->getUserStateFromRequest($this->context . '.filter.end', 'filter_end', '', 'string');		$this->setState('filter.end', $end);		$categoryId = $this->getUserStateFromRequest($this->context . '.filter.category_id', 'filter_category_id', '');		$this->setState('filter.category_id', $categoryId);		$clientId = $this->getUserStateFromRequest($this->context . '.filter.client_id', 'filter_client_id', '');		$this->setState('filter.client_id', $clientId);		// Load the parameters.		$params = JComponentHelper::getParams('com_banners');		$this->setState('params', $params);		// List state information.		parent::populateState('b.name', 'asc');	}	/**	 * Build an SQL query to load the list data.	 *	 * @return  JDatabaseQuery	 * @since   1.6	 */	protected function getListQuery()	{		require_once JPATH_COMPONENT . '/helpers/banners.php';		// Create a new query object.		$db = $this->getDbo();		$query = $db->getQuery(true);		// Select the required fields from the table.		$query->select(			'a.track_date as track_date,'				. 'a.track_type as track_type,'				. $db->quoteName('a.count') . ' as ' . $db->quoteName('count')		);		$query->from($db->quoteName('#__banner_tracks') . ' AS a');		// Join with the banners		$query->join('LEFT', $db->quoteName('#__banners') . ' as b ON b.id=a.banner_id')			->select('b.name as name');		// Join with the client		$query->join('LEFT', $db->quoteName('#__banner_clients') . ' as cl ON cl.id=b.cid')			->select('cl.name as client_name');		// Join with the category		$query->join('LEFT', $db->quoteName('#__categories') . ' as cat ON cat.id=b.catid')			->select('cat.title as category_title');		// Filter by type		$type = $this->getState('filter.type');		if (!empty($type))		{			$query->where('a.track_type = ' . (int) $type);		}		// Filter by client		$clientId = $this->getState('filter.client_id');		if (is_numeric($clientId))		{			$query->where('b.cid = ' . (int) $clientId);		}		// Filter by category		$catedoryId = $this->getState('filter.category_id');		if (is_numeric($catedoryId))		{			$query->where('b.catid = ' . (int) $catedoryId);		}		// Filter by begin date		$begin = $this->getState('filter.begin');		if (!empty($begin))		{			$query->where('a.track_date >= ' . $db->quote($begin));		}		// Filter by end date		$end = $this->getState('filter.end');		if (!empty($end))		{			$query->where('a.track_date <= ' . $db->quote($end));		}		// Add the list ordering clause.		$orderCol = $this->getState('list.ordering', 'name');		$query->order($db->escape($orderCol) . ' ' . $db->escape($this->getState('list.direction', 'ASC')));		return $query;	}	/**	 * Method to delete rows.	 *	 * @param   array  An array of item ids.	 *	 * @return  boolean  Returns true on success, false on failure.	 */	public function delete()	{		$user = JFactory::getUser();		$categoryId = $this->getState('category_id');		// Access checks.		if ($categoryId)		{			$allow = $user->authorise('core.delete', 'com_banners.category.' . (int) $categoryId);		}		else		{			$allow = $user->authorise('core.delete', 'com_banners');		}		if ($allow)		{			// Delete tracks from this banner			$db = $this->getDbo();			$query = $db->getQuery(true)				->delete($db->quoteName('#__banner_tracks'));			// Filter by type			$type = $this->getState('filter.type');			if (!empty($type))			{				$query->where('track_type = ' . (int) $type);			}			// Filter by begin date			$begin = $this->getState('filter.begin');			if (!empty($begin))			{				$query->where('track_date >= ' . $db->quote($begin));			}			// Filter by end date			$end = $this->getState('filter.end');			if (!empty($end))			{				$query->where('track_date <= ' . $db->quote($end));			}			$where = '1';			// Filter by client			$clientId = $this->getState('filter.client_id');			if (!empty($clientId))			{				$where .= ' AND cid = ' . (int) $clientId;			}			// Filter by category			if (!empty($categoryId))			{				$where .= ' AND catid = ' . (int) $categoryId;			}			$query->where('banner_id IN (SELECT id FROM ' . $db->quoteName('#__banners') . ' WHERE ' . $where . ')');			$db->setQuery($query);			$this->setError((string) $query);			try			{				$db->execute();			}			catch (RuntimeException $e)			{				$this->setError($e->getMessage());				return false;			}		}		else		{			JError::raiseWarning(403, JText::_('JERROR_CORE_DELETE_NOT_PERMITTED'));		}		return true;	}	/**	 * Get file name	 *	 * @return  string    The file name	 * @since   1.6	 */	public function getBaseName()	{		if (!isset($this->basename))		{			$app = JFactory::getApplication();			$basename = $this->getState('basename');			$basename = str_replace('__SITE__', $app->getCfg('sitename'), $basename);			$categoryId = $this->getState('filter.category_id');			if (is_numeric($categoryId))			{				if ($categoryId > 0)				{					$basename = str_replace('__CATID__', $categoryId, $basename);				}				else				{					$basename = str_replace('__CATID__', '', $basename);				}				$categoryName = $this->getCategoryName();				$basename = str_replace('__CATNAME__', $categoryName, $basename);			}			else			{				$basename = str_replace('__CATID__', '', $basename);				$basename = str_replace('__CATNAME__', '', $basename);			}			$clientId = $this->getState('filter.client_id');			if (is_numeric($clientId))			{				if ($clientId > 0)				{					$basename = str_replace('__CLIENTID__', $clientId, $basename);				}				else				{					$basename = str_replace('__CLIENTID__', '', $basename);				}				$clientName = $this->getClientName();				$basename = str_replace('__CLIENTNAME__', $clientName, $basename);			}			else			{				$basename = str_replace('__CLIENTID__', '', $basename);				$basename = str_replace('__CLIENTNAME__', '', $basename);			}			$type = $this->getState('filter.type');			if ($type > 0)			{				$basename = str_replace('__TYPE__', $type, $basename);				$typeName = JText::_('COM_BANNERS_TYPE' . $type);				$basename = str_replace('__TYPENAME__', $typeName, $basename);			}			else			{				$basename = str_replace('__TYPE__', '', $basename);				$basename = str_replace('__TYPENAME__', '', $basename);			}			$begin = $this->getState('filter.begin');			if (!empty($begin))			{				$basename = str_replace('__BEGIN__', $begin, $basename);			}			else			{				$basename = str_replace('__BEGIN__', '', $basename);			}			$end = $this->getState('filter.end');			if (!empty($end))			{				$basename = str_replace('__END__', $end, $basename);			}			else			{				$basename = str_replace('__END__', '', $basename);			}			$this->basename = $basename;		}		return $this->basename;	}	/**	 * Get the category name.	 *	 * @return  string    The category name	 * @since   1.6	 */	protected function getCategoryName()	{		$categoryId = $this->getState('filter.category_id');		if ($categoryId)		{			$db = $this->getDbo();			$query = $db->getQuery(true)				->select('title')				->from($db->quoteName('#__categories'))				->where($db->quoteName('id') . '=' . $db->quote($categoryId));			$db->setQuery($query);			try			{				$name = $db->loadResult();			}			catch (RuntimeException $e)			{				$this->setError($e->getMessage());				return false;			}		}		else		{			$name = JText::_('COM_BANNERS_NOCATEGORYNAME');		}		return $name;	}	/**	 * Get the category name	 *	 * @return  string    The category name.	 * @since   1.6	 */	protected function getClientName()	{		$clientId = $this->getState('filter.client_id');		if ($clientId)		{			$db = $this->getDbo();			$query = $db->getQuery(true)				->select('name')				->from($db->quoteName('#__banner_clients'))				->where($db->quoteName('id') . '=' . $db->quote($clientId));			$db->setQuery($query);			try			{				$name = $db->loadResult();			}			catch (RuntimeException $e)			{				$this->setError($e->getMessage());				return false;			}		}		else		{			$name = JText::_('COM_BANNERS_NOCLIENTNAME');		}		return $name;	}	/**	 * Get the file type.	 *	 * @return  string    The file type	 * @since   1.6	 */	public function getFileType()	{		return $this->getState('compressed') ? 'zip' : 'csv';	}	/**	 * Get the mime type.	 *	 * @return  string    The mime type.	 * @since   1.6	 */	public function getMimeType()	{		return $this->getState('compressed') ? 'application/zip' : 'text/csv';	}	/**	 * Get the content	 *	 * @return  string    The content.	 * @since   1.6	 */	public function getContent()	{		if (!isset($this->content))		{			$this->content = '';			$this->content .=				'"' . str_replace('"', '""', JText::_('COM_BANNERS_HEADING_NAME')) . '","' .					str_replace('"', '""', JText::_('COM_BANNERS_HEADING_CLIENT')) . '","' .					str_replace('"', '""', JText::_('JCATEGORY')) . '","' .					str_replace('"', '""', JText::_('COM_BANNERS_HEADING_TYPE')) . '","' .					str_replace('"', '""', JText::_('COM_BANNERS_HEADING_COUNT')) . '","' .					str_replace('"', '""', JText::_('JDATE')) . '"' . "\n";			foreach ($this->getItems() as $item)			{				$this->content .=					'"' . str_replace('"', '""', $item->name) . '","' .						str_replace('"', '""', $item->client_name) . '","' .						str_replace('"', '""', $item->category_title) . '","' .						str_replace('"', '""', ($item->track_type == 1 ? JText::_('COM_BANNERS_IMPRESSION') : JText::_('COM_BANNERS_CLICK'))) . '","' .						str_replace('"', '""', $item->count) . '","' .						str_replace('"', '""', $item->track_date) . '"' . "\n";			}			if ($this->getState('compressed'))			{				$app = JFactory::getApplication('administrator');				$files = array();				$files['track'] = array();				$files['track']['name'] = $this->getBasename() . '.csv';				$files['track']['data'] = $this->content;				$files['track']['time'] = time();				$ziproot = $app->getCfg('tmp_path') . '/' . uniqid('banners_tracks_') . '.zip';				// run the packager				jimport('joomla.filesystem.folder');				jimport('joomla.filesystem.file');				$delete = JFolder::files($app->getCfg('tmp_path') . '/', uniqid('banners_tracks_'), false, true);				if (!empty($delete))				{					if (!JFile::delete($delete))					{						// JFile::delete throws an error						$this->setError(JText::_('COM_BANNERS_ERR_ZIP_DELETE_FAILURE'));						return false;					}				}				if (!$packager = JArchive::getAdapter('zip'))				{					$this->setError(JText::_('COM_BANNERS_ERR_ZIP_ADAPTER_FAILURE'));					return false;				}				elseif (!$packager->create($ziproot, $files))				{					$this->setError(JText::_('COM_BANNERS_ERR_ZIP_CREATE_FAILURE'));					return false;				}				$this->content = file_get_contents($ziproot);			}		}		return $this->content;	}}
<?php/** * @package     Joomla.Site * @subpackage  Templates.beez3 * * @copyright   Copyright (C) 2005 - 2013 Open Source Matters, Inc. All rights reserved. * @license     GNU General Public License version 2 or later; see LICENSE.txt */// no direct accessdefined('_JEXEC') or die;JHtml::_('behavior.keepalive');JHtml::_('behavior.tooltip');JHtml::_('behavior.calendar');JHtml::_('behavior.formvalidation');// Create shortcut to parameters.$params = $this->state->get('params');//$images = json_decode($this->item->images);//$urls = json_decode($this->item->urls);// This checks if the editor config options have ever been saved. If they haven't they will fall back to the original settings.$editoroptions = isset($params->show_publishing_options);if (!$editoroptions):	$params->show_urls_images_frontend = '0';endif;?><script type="text/javascript">	Joomla.submitbutton = function(task)	{		if (task == 'article.cancel' || document.formvalidator.isValid(document.id('adminForm')))		{			<?php echo $this->form->getField('articletext')->save(); ?>			Joomla.submitform(task);		}	}</script><div class="edit item-page<?php echo $this->pageclass_sfx; ?>"><?php if ($params->get('show_page_heading')) : ?><h1>	<?php echo $this->escape($params->get('page_heading')); ?></h1><?php endif; ?><form action="<?php echo JRoute::_('index.php?option=com_content&a_id='.(int) $this->item->id); ?>" method="post" name="adminForm" id="adminForm" class="form-validate">	<fieldset>		<legend><?php echo JText::_('JEDITOR'); ?></legend>			<div class="control-group">				<div class="control-label">					<?php echo $this->form->getLabel('title'); ?>				</div>				<div class="controls">					<?php echo $this->form->getInput('title'); ?>				</div>			</div>		<?php if (is_null($this->item->id)):?>			<div class="control-group">				<div class="control-label">					<?php echo $this->form->getLabel('alias'); ?>				</div>				<div class="controls">					<?php echo $this->form->getInput('alias'); ?>				</div>			</div>		<?php endif; ?>			<div class="btn-group">				<button type="button" class="btn btn-primary" onclick="Joomla.submitbutton('article.save')">					<?php echo JText::_('JSAVE') ?>				</button>				<button type="button" class="btn" onclick="Joomla.submitbutton('article.cancel')">					<?php echo JText::_('JCANCEL') ?>				</button>			</div>			<?php echo $this->form->getInput('articletext'); ?>	</fieldset>	<?php if ($params->get('show_urls_images_frontend')  ) : ?>	<fieldset>		<legend><?php echo JText::_('COM_CONTENT_IMAGES_AND_URLS'); ?></legend>			<div class="control-group">				<div class="control-label">					<?php echo $this->form->getLabel('image_intro', 'images'); ?>					<?php echo $this->form->getInput('image_intro', 'images'); ?>				</div>			</div>			<div class="control-group">				<div class="control-label">					<?php echo $this->form->getLabel('image_intro_alt', 'images'); ?>				</div>				<div class="controls">					<?php echo $this->form->getInput('image_intro_alt', 'images'); ?>				</div>			</div>			<div class="control-group">				<div class="control-label">					<?php echo $this->form->getLabel('image_intro_caption', 'images'); ?>				</div>				<div class="controls">					<?php echo $this->form->getInput('image_intro_caption', 'images'); ?>				</div>			</div>			<div class="control-group">				<div class="control-label">					<?php echo $this->form->getLabel('float_intro', 'images'); ?>				</div>				<div class="controls">					<?php echo $this->form->getInput('float_intro', 'images'); ?>				</div>			</div>			<div class="control-group">				<div class="control-label">					<?php echo $this->form->getLabel('image_fulltext', 'images'); ?>				</div>				<div class="controls">					<?php echo $this->form->getInput('image_fulltext', 'images'); ?>				</div>			</div>			<div class="control-group">				<div class="control-label">					<?php echo $this->form->getLabel('image_fulltext_alt', 'images'); ?>				</div>				<div class="controls">					<?php echo $this->form->getInput('image_fulltext_alt', 'images'); ?>				</div>			</div>			<div class="control-group">				<div class="control-label">					<?php echo $this->form->getLabel('image_fulltext_caption', 'images'); ?>				</div>				<div class="controls">					<?php echo $this->form->getInput('image_fulltext_caption', 'images'); ?>				</div>			</div>			<div class="control-group">				<div class="control-label">					<?php echo $this->form->getLabel('float_fulltext', 'images'); ?>				</div>				<div class="controls">					<?php echo $this->form->getInput('float_fulltext', 'images'); ?>				</div>			</div>			<div class="control-group">				<div class="control-label">					<?php echo $this->form->getLabel('urla', 'urls'); ?>				</div>				<div class="controls">					<?php echo $this->form->getInput('urla', 'urls'); ?>				</div>			</div>			<div class="control-group">				<div class="control-label">					<?php echo $this->form->getLabel('urlatext', 'urls'); ?>				</div>				<div class="controls">					<?php echo $this->form->getInput('urlatext', 'urls'); ?>				</div>			</div>			<div class="control-group">				<div class="controls">					<?php echo $this->form->getInput('targeta', 'urls'); ?>				</div>			</div>			<div class="control-group">				<div class="control-label">					<?php echo $this->form->getLabel('urlb', 'urls'); ?>				</div>				<div class="controls">					<?php echo $this->form->getInput('urlb', 'urls'); ?>				</div>			</div>			<div class="control-group">				<div class="control-label">					<?php echo $this->form->getLabel('urlbtext', 'urls'); ?>				</div>				<div class="controls">					<?php echo $this->form->getInput('urlbtext', 'urls'); ?>				</div>			</div>			<div class="control-group">				<div class="controls">					<?php echo $this->form->getInput('targetb', 'urls'); ?>				</div>			</div>			<div class="control-group">				<div class="control-label">					<?php echo $this->form->getLabel('urlc', 'urls'); ?>				</div>				<div class="controls">					<?php echo $this->form->getInput('urlc', 'urls'); ?>				</div>			</div>			<div class="control-group">				<div class="control-label">					<?php echo $this->form->getLabel('urlctext', 'urls'); ?>				</div>				<div class="controls">					<?php echo $this->form->getInput('urlctext', 'urls'); ?>				</div>			</div>			<div class="control-group">				<div class="controls">					<?php echo $this->form->getInput('targetc', 'urls'); ?>				</div>			</div>	</fieldset>	<?php endif; ?>	<fieldset>		<legend><?php echo JText::_('COM_CONTENT_PUBLISHING'); ?></legend>			<div class="control-group">				<div class="control-label">					<?php echo $this->form->getLabel('catid'); ?>				</div>				<div class="controls">					<?php echo $this->form->getInput('catid'); ?>				</div>			</div>			<div class="control-group">				<div class="control-label">					<?php echo $this->form->getLabel('created_by_alias'); ?>				</div>				<div class="controls">					<?php echo $this->form->getInput('created_by_alias'); ?>				</div>			</div>			<?php if ($this->item->params->get('access-change')) : ?>				<div class="control-group">					<div class="control-label">						<?php echo $this->form->getLabel('state'); ?>					</div>					<div class="controls">						<?php echo $this->form->getInput('state'); ?>					</div>				</div>				<div class="control-group">					<div class="control-label">						<?php echo $this->form->getLabel('featured'); ?>					</div>					<div class="controls">						<?php echo $this->form->getInput('featured'); ?>					</div>				</div>				<div class="control-group">					<div class="control-label">						<?php echo $this->form->getLabel('publish_up'); ?>					</div>					<div class="controls">						<?php echo $this->form->getInput('publish_up'); ?>					</div>				</div>				<div class="control-group">					<div class="control-label">						<?php echo $this->form->getLabel('publish_down'); ?>					</div>					<div class="controls">						<?php echo $this->form->getInput('publish_down'); ?>					</div>				</div>			<?php endif; ?>			<div class="control-group">				<div class="control-label">					<?php echo $this->form->getLabel('access'); ?>				</div>				<div class="controls">					<?php echo $this->form->getInput('access'); ?>				</div>			</div>			<?php if (is_null($this->item->id)):?>				<div class="control-group">					<div class="control-label">					</div>					<div class="controls">						<?php echo JText::_('COM_CONTENT_ORDERING'); ?>					</div>				</div>			<?php endif; ?>	</fieldset>	<fieldset>		<legend><?php echo JText::_('JFIELD_LANGUAGE_LABEL'); ?></legend>			<div class="control-group">				<div class="control-label">					<?php echo $this->form->getLabel('language'); ?>				</div>				<div class="controls">					<?php echo $this->form->getInput('language'); ?>				</div>			</div>	</fieldset>	<fieldset>		<legend><?php echo JText::_('COM_CONTENT_METADATA'); ?></legend>			<div class="control-group">				<div class="control-label">					<?php echo $this->form->getLabel('metadesc'); ?>				</div>				<div class="controls">					<?php echo $this->form->getInput('metadesc'); ?>				</div>			</div>			<div class="control-group">				<div class="control-label">					<?php echo $this->form->getLabel('metakey'); ?>				</div>				<div class="controls">					<?php echo $this->form->getInput('metakey'); ?>				</div>			</div>		<input type="hidden" name="task" value="" />		<input type="hidden" name="return" value="<?php echo $this->return_page;?>" />		<?php if ($this->params->get('enable_category', 0) == 1) : ?>			<input type="hidden" name="jform[catid]" value="<?php echo $this->params->get('catid', 1);?>"/>		<?php endif;?>		<?php echo JHtml::_('form.token'); ?>	</fieldset></form></div>
<?php/** * @package     Joomla.Site * @subpackage  com_tags * * @copyright   Copyright (C) 2005 - 2013 Open Source Matters, Inc. All rights reserved. * @license     GNU General Public License version 2 or later; see LICENSE.txt */defined('_JEXEC') or die;JHtml::addIncludePath(JPATH_COMPONENT.'/helpers');JHtml::_('behavior.tooltip');JHtml::_('behavior.framework');// Get the user object.$user = JFactory::getUser();// Check if user is allowed to add/edit based on tags permissions.// Do we really have to make it so people can see unpublished tags???$canEdit = $user->authorise('core.edit', 'com_tags');$canCreate = $user->authorise('core.create', 'com_tags');$canEditState = $user->authorise('core.edit.state', 'com_tags');$items = $this->items;$n = count($this->items);?><form action="<?php echo htmlspecialchars(JUri::getInstance()->toString()); ?>" method="post" name="adminForm" id="adminForm" class="form-inline">	<?php if ($this->params->get('show_headings') || $this->params->get('filter_field') !== '0' || $this->params->get('show_pagination_limit')) :?>	<fieldset class="filters btn-toolbar">		<?php if ($this->params->get('filter_field') != 'hide') :?>			<div class="btn-group">				<label class="filter-search-lbl element-invisible" for="filter-search">					<?php echo JText::_('COM_TAGS_TITLE_FILTER_LABEL').'&#160;'; ?>				</label>				<input type="text" name="filter-search" id="filter-search" value="<?php echo $this->escape($this->state->get('list.filter')); ?>" class="inputbox" onchange="document.adminForm.submit();" title="<?php echo JText::_('COM_TAGS_FILTER_SEARCH_DESC'); ?>" placeholder="<?php echo JText::_('COM_TAGS_TITLE_FILTER_LABEL'); ?>" />			</div>		<?php endif; ?>		<?php if ($this->params->get('show_pagination_limit')) : ?>			<div class="btn-group pull-right">				<label for="limit" class="element-invisible">					<?php echo JText::_('JGLOBAL_DISPLAY_NUM'); ?>				</label>				<?php echo $this->pagination->getLimitBox(); ?>			</div>		<?php endif; ?>		<input type="hidden" name="filter_order" value="" />		<input type="hidden" name="filter_order_Dir" value="" />		<input type="hidden" name="limitstart" value="" />		<input type="hidden" name="task" value="" />		<div class="clearfix"></div>	</fieldset>	<?php endif; ?>	<?php if ($this->items == false || $n == 0) : ?>		<p> <?php echo JText::_('COM_TAGS_NO_ITEMS'); ?></p>	<?php else : ?>	<ul class="category list-striped list-condensed">		<?php foreach ($items as $i => $item) : ?>			<?php if ($item->core_state == 0) : ?>				<li class="system-unpublished cat-list-row<?php echo $i % 2; ?>">			<?php else: ?>				<li class="cat-list-row<?php echo $i % 2; ?>" >				<h3>					<a href="<?php echo JRoute::_(TagsHelperRoute::getItemRoute($item->content_item_id, $item->core_alias, $item->core_catid, $item->core_language, $item->type_alias, $item->router)); ?>">						<?php echo $this->escape($item->core_title); ?>					</a>				</h3>			<?php endif; ?>			<?php $images  = json_decode($item->core_images);?>			<?php if ($this->params->get('tag_list_show_item_image', 1) == 1 && !empty($images->image_intro)) :?>				<img src="<?php echo htmlspecialchars($images->image_intro);?>" alt="<?php echo htmlspecialchars($images->image_intro_alt); ?>">			<?php endif; ?>			<?php if ($this->params->get('tag_list_show_item_description', 1)) : ?>				<span class="tag-body">					<?php echo JHtml::_('string.truncate', $item->core_body, $this->params->get('tag_list_item_maximum_characters')); ?>				</span>			<?php endif; ?>				</li>			<div class="clearfix"></div>		<?php endforeach; ?>	</ul>	<?php if ($this->params->get('show_pagination')) : ?>	 <div class="pagination">		<?php if ($this->params->get('show_pagination_results', 1)) : ?>			<p class="counter">				<?php echo $this->pagination->getPagesCounter(); ?>			</p>		<?php endif; ?>			<?php echo $this->pagination->getPagesLinks(); ?>		</div>		</br>	<?php endif; ?></form><?php endif; ?>
<?php/** * @package     Joomla.Administrator * @subpackage  com_config * * @copyright   Copyright (C) 2005 - 2013 Open Source Matters, Inc. All rights reserved. * @license     GNU General Public License version 2 or later; see LICENSE.txt */defined('_JEXEC') or die;?><fieldset class="form-horizontal">	<legend><?php echo JText::_('COM_CONFIG_MAIL_SETTINGS'); ?></legend>	<?php	foreach ($this->form->getFieldset('mail') as $field):	?>		<div class="control-group">			<div class="control-label"><?php echo $field->label; ?></div>			<div class="controls"><?php echo $field->input; ?></div>		</div>	<?php	endforeach;	?></fieldset>
<?php/** * @package     Joomla.Platform * @subpackage  Linkedin * * @copyright   Copyright (C) 2005 - 2012 Open Source Matters, Inc. All rights reserved. * @license     GNU General Public License version 2 or later; see LICENSE */defined('JPATH_PLATFORM') or die();/** * Linkedin API Groups class for the Joomla Platform. * * @package     Joomla.Platform * @subpackage  Linkedin * @since       13.1 */class JLinkedinGroups extends JLinkedinObject{	/**	 * Method to get a group.	 *	 * @param   string   $id      The unique identifier for a group.	 * @param   string   $fields  Request fields beyond the default ones.	 * @param   integer  $start   Starting location within the result set for paginated returns.	 * @param   integer  $count   The number of results returned.	 *	 * @return  array  The decoded JSON response	 *	 * @since   13.1	 */	public function getGroup($id, $fields = null, $start = 0, $count = 5)	{		$token = $this->oauth->getToken();		// Set parameters.		$parameters = array(			'oauth_token' => $token['key']		);		// Set the API base		$base = '/v1/groups/' . $id;		$data['format'] = 'json';		// Check if fields is specified.		if ($fields)		{			$base .= ':' . $fields;		}		// Check if start is specified.		if ($start > 0)		{			$data['start'] = $start;		}		// Check if count is specified.		if ($count != 5)		{			$data['count'] = $count;		}		// Build the request path.		$path = $this->getOption('api.url') . $base;		// Send the request.		$response = $this->oauth->oauthRequest($path, 'GET', $parameters, $data);		return json_decode($response->body);	}	/**	 * Method to find the groups a member belongs to.	 *	 * @param   string   $id                The unique identifier for a user.	 * @param   string   $fields            Request fields beyond the default ones.	 * @param   integer  $start             Starting location within the result set for paginated returns.	 * @param   integer  $count             The number of results returned.	 * @param   string   $membership_state  The state of the callers membership to the specified group.	 * 										Values are: non-member, awaiting-confirmation, awaiting-parent-group-confirmation, member, moderator, manager, owner.	 *	 * @return  array  The decoded JSON response	 *	 * @since   13.1	 */	public function getMemberships($id = null, $fields = null, $start = 0, $count = 5, $membership_state = null)	{		$token = $this->oauth->getToken();		// Set parameters.		$parameters = array(			'oauth_token' => $token['key']		);		// Set the API base		$base = '/v1/people/';		// Check if id is specified.		if ($id)		{			$base .= $id . '/group-memberships';		}		else		{			$base .= '~/group-memberships';		}		$data['format'] = 'json';		// Check if fields is specified.		if ($fields)		{			$base .= ':' . $fields;		}		// Check if start is specified.		if ($start > 0)		{			$data['start'] = $start;		}		// Check if count is specified.		if ($count != 5)		{			$data['count'] = $count;		}		// Check if membership_state is specified.		if ($membership_state)		{			$data['membership-state'] = $membership_state;		}		// Build the request path.		$path = $this->getOption('api.url') . $base;		// Send the request.		$response = $this->oauth->oauthRequest($path, 'GET', $parameters, $data);		return json_decode($response->body);	}	/**	 * Method to find the groups a member belongs to.	 *	 * @param   string   $person_id  The unique identifier for a user.	 * @param   string   $group_id   The unique identifier for a group.	 * @param   string   $fields     Request fields beyond the default ones.	 * @param   integer  $start      Starting location within the result set for paginated returns.	 * @param   integer  $count      The number of results returned.	 *	 * @return  array  The decoded JSON response	 *	 * @since   13.1	 */	public function getSettings($person_id = null, $group_id = null, $fields = null, $start = 0, $count = 5)	{		$token = $this->oauth->getToken();		// Set parameters.		$parameters = array(			'oauth_token' => $token['key']		);		// Set the API base		$base = '/v1/people/';		// Check if person_id is specified.		if ($person_id)		{			$base .= $person_id . '/group-memberships';		}		else		{			$base .= '~/group-memberships';		}		// Check if group_id is specified.		if ($group_id)		{			$base .= '/' . $group_id;		}		$data['format'] = 'json';		// Check if fields is specified.		if ($fields)		{			$base .= ':' . $fields;		}		// Check if start is specified.		if ($start > 0)		{			$data['start'] = $start;		}		// Check if count is specified.		if ($count != 5)		{			$data['count'] = $count;		}		// Build the request path.		$path = $this->getOption('api.url') . $base;		// Send the request.		$response = $this->oauth->oauthRequest($path, 'GET', $parameters, $data);		return json_decode($response->body);	}	/**	 * Method to change a groups settings.	 *	 * @param   string   $group_id          The unique identifier for a group.	 * @param   boolean  $show_logo         Show group logo in profile.	 * @param   string   $digest_frequency  E-mail digest frequency.	 * @param   boolean  $announcements     E-mail announcements from managers.	 * @param   boolean  $allow_messages    Allow messages from members.	 * @param   boolean  $new_post          E-mail for every new post.	 *	 * @return  array  The decoded JSON response	 *	 * @since   13.1	 */	public function changeSettings($group_id, $show_logo = null, $digest_frequency = null, $announcements = null,		$allow_messages = null, $new_post = null)	{		$token = $this->oauth->getToken();		// Set parameters.		$parameters = array(			'oauth_token' => $token['key']		);		// Set the API base		$base = '/v1/people/~/group-memberships/' . $group_id;		// Build xml.		$xml = '<group-membership>';		if (!is_null($show_logo))		{			$xml .= '<show-group-logo-in-profile>' . $this->booleanToString($show_logo) . '</show-group-logo-in-profile>';		}		if ($digest_frequency)		{			$xml .= '<email-digest-frequency><code>' . $digest_frequency . '</code></email-digest-frequency>';		}		if (!is_null($announcements))		{			$xml .= '<email-announcements-from-managers>' . $this->booleanToString($announcements) . '</email-announcements-from-managers>';		}		if (!is_null($allow_messages))		{			$xml .= '<allow-messages-from-members>' . $this->booleanToString($allow_messages) . '</allow-messages-from-members>';		}		if (!is_null($new_post))		{			$xml .= '<email-for-every-new-post>' . $this->booleanToString($new_post) . '</email-for-every-new-post>';		}		$xml .= '</group-membership>';		// Build the request path.		$path = $this->getOption('api.url') . $base;		$header['Content-Type'] = 'text/xml';		// Send the request.		$response = $this->oauth->oauthRequest($path, 'PUT', $parameters, $xml, $header);		return $response;	}	/**	 * Method to join a group.	 *	 * @param   string   $group_id          The unique identifier for a group.	 * @param   boolean  $show_logo         Show group logo in profile.	 * @param   string   $digest_frequency  E-mail digest frequency.	 * @param   boolean  $announcements     E-mail announcements from managers.	 * @param   boolean  $allow_messages    Allow messages from members.	 * @param   boolean  $new_post          E-mail for every new post.	 *	 * @return  array  The decoded JSON response	 *	 * @since   13.1	 */	public function joinGroup($group_id, $show_logo = null, $digest_frequency = null, $announcements = null,		$allow_messages = null, $new_post = null)	{		$token = $this->oauth->getToken();		// Set parameters.		$parameters = array(			'oauth_token' => $token['key']		);		// Set the success response code.		$this->oauth->setOption('success_code', 201);		// Set the API base		$base = '/v1/people/~/group-memberships';		// Build xml.		$xml = '<group-membership><group><id>' . $group_id . '</id></group>';		if (!is_null($show_logo))		{			$xml .= '<show-group-logo-in-profile>' . $this->booleanToString($show_logo) . '</show-group-logo-in-profile>';		}		if ($digest_frequency)		{			$xml .= '<email-digest-frequency><code>' . $digest_frequency . '</code></email-digest-frequency>';		}		if (!is_null($announcements))		{			$xml .= '<email-announcements-from-managers>' . $this->booleanToString($announcements) . '</email-announcements-from-managers>';		}		if (!is_null($allow_messages))		{			$xml .= '<allow-messages-from-members>' . $this->booleanToString($allow_messages) . '</allow-messages-from-members>';		}		if (!is_null($new_post))		{			$xml .= '<email-for-every-new-post>' . $this->booleanToString($new_post) . '</email-for-every-new-post>';		}		$xml .= '<membership-state><code>member</code></membership-state></group-membership>';		// Build the request path.		$path = $this->getOption('api.url') . $base;		$header['Content-Type'] = 'text/xml';		// Send the request.		$response = $this->oauth->oauthRequest($path, 'POST', $parameters, $xml, $header);		return $response;	}	/**	 * Method to leave a group.	 *	 * @param   string  $group_id  The unique identifier for a group.	 *	 * @return  array  The decoded JSON response	 *	 * @since   13.1	 */	public function leaveGroup($group_id)	{		$token = $this->oauth->getToken();		// Set parameters.		$parameters = array(			'oauth_token' => $token['key']		);		// Set the success response code.		$this->oauth->setOption('success_code', 204);		// Set the API base		$base = '/v1/people/~/group-memberships/' . $group_id;		// Build the request path.		$path = $this->getOption('api.url') . $base;		// Send the request.		$response = $this->oauth->oauthRequest($path, 'DELETE', $parameters);		return $response;	}	/**	 * Method to get dicussions for a group.	 *	 * @param   string   $id              The unique identifier for a group.	 * @param   string   $fields          Request fields beyond the default ones.	 * @param   integer  $start           Starting location within the result set for paginated returns.	 * @param   integer  $count           The number of results returned.	 * @param   string   $order           Sort order for posts. Valid for: recency, popularity.	 * @param   string   $category        Category of posts. Valid for: discussion	 * @param   string   $modified_since  Timestamp filter for posts created after the specified value.	 *	 * @return  array  The decoded JSON response	 *	 * @since   13.1	 */	public function getDiscussions($id, $fields = null, $start = 0, $count = 0, $order = null, $category = 'discussion', $modified_since = null)	{		$token = $this->oauth->getToken();		// Set parameters.		$parameters = array(			'oauth_token' => $token['key']		);		// Set the API base		$base = '/v1/groups/' . $id . '/posts';		$data['format'] = 'json';		// Check if fields is specified.		if ($fields)		{			$base .= ':' . $fields;		}		// Check if start is specified.		if ($start > 0)		{			$data['start'] = $start;		}		// Check if count is specified.		if ($count > 0)		{			$data['count'] = $count;		}		// Check if order is specified.		if ($order)		{			$data['order'] = $order;		}		// Check if category is specified.		if ($category)		{			$data['category'] = $category;		}		// Check if modified_since is specified.		if ($modified_since)		{			$data['modified-since'] = $modified_since;		}		// Build the request path.		$path = $this->getOption('api.url') . $base;		// Send the request.		$response = $this->oauth->oauthRequest($path, 'GET', $parameters, $data);		return json_decode($response->body);	}	/**	 * Method to get posts a user started / participated in / follows for a group.	 *	 * @param   string   $group_id        The unique identifier for a group.	 * @param   string   $role            Filter for posts related to the caller. Valid for: creator, commenter, follower.	 * @param   string   $person_id       The unique identifier for a user.	 * @param   string   $fields          Request fields beyond the default ones.	 * @param   integer  $start           Starting location within the result set for paginated returns.	 * @param   integer  $count           The number of results returned.	 * @param   string   $order           Sort order for posts. Valid for: recency, popularity.	 * @param   string   $category        Category of posts. Valid for: discussion	 * @param   string   $modified_since  Timestamp filter for posts created after the specified value.	 *	 * @return  array  The decoded JSON response	 *	 * @since   13.1	 */	public function getUserPosts($group_id, $role, $person_id = null, $fields = null, $start = 0, $count = 0,		$order = null, $category = 'discussion', $modified_since = null)	{		$token = $this->oauth->getToken();		// Set parameters.		$parameters = array(			'oauth_token' => $token['key']		);		// Set the API base		$base = '/v1/people/';		// Check if person_id is specified.		if ($person_id)		{			$base .= $person_id;		}		else		{			$base .= '~';		}		$base .= '/group-memberships/' . $group_id . '/posts';		$data['format'] = 'json';		$data['role'] = $role;		// Check if fields is specified.		if ($fields)		{			$base .= ':' . $fields;		}		// Check if start is specified.		if ($start > 0)		{			$data['start'] = $start;		}		// Check if count is specified.		if ($count > 0)		{			$data['count'] = $count;		}		// Check if order is specified.		if ($order)		{			$data['order'] = $order;		}		// Check if category is specified.		if ($category)		{			$data['category'] = $category;		}		// Check if modified_since is specified.		if ($modified_since)		{			$data['modified-since'] = $modified_since;		}		// Build the request path.		$path = $this->getOption('api.url') . $base;		// Send the request.		$response = $this->oauth->oauthRequest($path, 'GET', $parameters, $data);		return json_decode($response->body);	}	/**	 * Method to retrieve details about a post.	 *	 * @param   string  $post_id  The unique identifier for a post.	 * @param   string  $fields   Request fields beyond the default ones.	 *	 * @return  array  The decoded JSON response	 *	 * @since   13.1	 */	public function getPost($post_id, $fields = null)	{		$token = $this->oauth->getToken();		// Set parameters.		$parameters = array(			'oauth_token' => $token['key']		);		// Set the API base		$base = '/v1/posts/' . $post_id;		$data['format'] = 'json';		// Check if fields is specified.		if ($fields)		{			$base .= ':' . $fields;		}		// Build the request path.		$path = $this->getOption('api.url') . $base;		// Send the request.		$response = $this->oauth->oauthRequest($path, 'GET', $parameters, $data);		return json_decode($response->body);	}	/**	 * Method to retrieve all comments of a post.	 *	 * @param   string   $post_id  The unique identifier for a post.	 * @param   string   $fields   Request fields beyond the default ones.	 * @param   integer  $start    Starting location within the result set for paginated returns.	 * @param   integer  $count    The number of results returned.	 *	 * @return  array  The decoded JSON response	 *	 * @since   13.1	 */	public function getPostComments($post_id, $fields = null, $start = 0, $count = 0)	{		$token = $this->oauth->getToken();		// Set parameters.		$parameters = array(			'oauth_token' => $token['key']		);		// Set the API base		$base = '/v1/posts/' . $post_id . '/comments';		$data['format'] = 'json';		// Check if fields is specified.		if ($fields)		{			$base .= ':' . $fields;		}		// Check if start is specified.		if ($start > 0)		{			$data['start'] = $start;		}		// Check if count is specified.		if ($count > 0)		{			$data['count'] = $count;		}		// Build the request path.		$path = $this->getOption('api.url') . $base;		// Send the request.		$response = $this->oauth->oauthRequest($path, 'GET', $parameters, $data);		return json_decode($response->body);	}	/**	 * Method to retrieve all comments of a post.	 *	 * @param   string  $group_id  The unique identifier for a group.	 * @param   string  $title     Post title.	 * @param   string  $summary   Post summary.	 *	 * @return  string  The created post's id.	 *	 * @since   13.1	 */	public function createPost($group_id, $title, $summary)	{		$token = $this->oauth->getToken();		// Set parameters.		$parameters = array(			'oauth_token' => $token['key']		);		// Set the success response code.		$this->oauth->setOption('success_code', 201);		// Set the API base		$base = '/v1/groups/' . $group_id . '/posts';		// Build xml.		$xml = '<post><title>' . $title . '</title><summary>' . $summary . '</summary></post>';		// Build the request path.		$path = $this->getOption('api.url') . $base;		$header['Content-Type'] = 'text/xml';		// Send the request.		$response = $this->oauth->oauthRequest($path, 'POST', $parameters, $xml, $header);		// Return the post id.		$response = explode('posts/', $response->headers['Location']);		return $response[1];	}	/**	 * Method to like or unlike a post.	 *	 * @param   string   $post_id  The unique identifier for a group.	 * @param   boolean  $like     True to like post, false otherwise.	 *	 * @return  array  The decoded JSON response	 *	 * @since   13.1	 */	private function _likeUnlike($post_id, $like)	{		$token = $this->oauth->getToken();		// Set parameters.		$parameters = array(			'oauth_token' => $token['key']		);		// Set the success response code.		$this->oauth->setOption('success_code', 204);		// Set the API base		$base = '/v1/posts/' . $post_id . '/relation-to-viewer/is-liked';		// Build xml.		$xml = '<is-liked>' . $this->booleanToString($like) . '</is-liked>';		// Build the request path.		$path = $this->getOption('api.url') . $base;		$header['Content-Type'] = 'text/xml';		// Send the request.		$response = $this->oauth->oauthRequest($path, 'PUT', $parameters, $xml, $header);		return $response;	}	/**	 * Method used to like a post.	 *	 * @param   string  $post_id  The unique identifier for a group.	 *	 * @return  array  The decoded JSON response	 *	 * @since   13.1	 */	public function likePost($post_id)	{		return $this->_likeUnlike($post_id, true);	}	/**	 * Method used to unlike a post.	 *	 * @param   string  $post_id  The unique identifier for a group.	 *	 * @return  array  The decoded JSON response	 *	 * @since   13.1	 */	public function unlikePost($post_id)	{		return $this->_likeUnlike($post_id, false);	}	/**	 * Method to follow or unfollow a post.	 *	 * @param   string   $post_id  The unique identifier for a group.	 * @param   boolean  $follow   True to like post, false otherwise.	 *	 * @return  array  The decoded JSON response	 *	 * @since   13.1	 */	private function _followUnfollow($post_id, $follow)	{		$token = $this->oauth->getToken();		// Set parameters.		$parameters = array(			'oauth_token' => $token['key']		);		// Set the success response code.		$this->oauth->setOption('success_code', 204);		// Set the API base		$base = '/v1/posts/' . $post_id . '/relation-to-viewer/is-following';		// Build xml.		$xml = '<is-following>' . $this->booleanToString($follow) . '</is-following>';		// Build the request path.		$path = $this->getOption('api.url') . $base;		$header['Content-Type'] = 'text/xml';		// Send the request.		$response = $this->oauth->oauthRequest($path, 'PUT', $parameters, $xml, $header);		return $response;	}	/**	 * Method used to follow a post.	 *	 * @param   string  $post_id  The unique identifier for a group.	 *	 * @return  array  The decoded JSON response	 *	 * @since   13.1	 */	public function followPost($post_id)	{		return $this->_followUnfollow($post_id, true);	}	/**	 * Method used to unfollow a post.	 *	 * @param   string  $post_id  The unique identifier for a group.	 *	 * @return  array  The decoded JSON response	 *	 * @since   13.1	 */	public function unfollowPost($post_id)	{		return $this->_followUnfollow($post_id, false);	}	/**	 * Method to flag a post as a Promotion or Job.	 *	 * @param   string  $post_id  The unique identifier for a group.	 * @param   string  $flag     Flag as a 'promotion' or 'job'.	 *	 * @return  array  The decoded JSON response	 *	 * @since   13.1	 */	public function flagPost($post_id, $flag)	{		$token = $this->oauth->getToken();		// Set parameters.		$parameters = array(			'oauth_token' => $token['key']		);		// Set the success response code.		$this->oauth->setOption('success_code', 204);		// Set the API base		$base = '/v1/posts/' . $post_id . '/category/code';		// Build xml.		$xml = '<code>' . $flag . '</code>';		// Build the request path.		$path = $this->getOption('api.url') . $base;		$header['Content-Type'] = 'text/xml';		// Send the request.		$response = $this->oauth->oauthRequest($path, 'PUT', $parameters, $xml, $header);		return $response;	}	/**	 * Method to delete a post if the current user is the creator or flag it as inappropriate otherwise.	 *	 * @param   string  $post_id  The unique identifier for a group.	 *	 * @return  array  The decoded JSON response	 *	 * @since   13.1	 */	public function deletePost($post_id)	{		$token = $this->oauth->getToken();		// Set parameters.		$parameters = array(			'oauth_token' => $token['key']		);		// Set the success response code.		$this->oauth->setOption('success_code', 204);		// Set the API base		$base = '/v1/posts/' . $post_id;		// Build the request path.		$path = $this->getOption('api.url') . $base;		// Send the request.		$response = $this->oauth->oauthRequest($path, 'DELETE', $parameters);		return $response;	}	/**	 * Method to access the comments resource.	 *	 * @param   string  $comment_id  The unique identifier for a comment.	 * @param   string  $fields      Request fields beyond the default ones.	 *	 * @return  array  The decoded JSON response	 *	 * @since   13.1	 */	public function getComment($comment_id, $fields = null)	{		$token = $this->oauth->getToken();		// Set parameters.		$parameters = array(			'oauth_token' => $token['key']		);		// Set the API base		$base = '/v1/comments/' . $comment_id;		$data['format'] = 'json';		// Check if fields is specified.		if ($fields)		{			$base .= ':' . $fields;		}		// Build the request path.		$path = $this->getOption('api.url') . $base;		// Send the request.		$response = $this->oauth->oauthRequest($path, 'GET', $parameters, $data);		return json_decode($response->body);	}	/**	 * Method to add a comment to a post	 *	 * @param   string  $post_id  The unique identifier for a group.	 * @param   string  $comment  The post comment's text.	 *	 * @return  string   The created comment's id.	 *	 * @since   13.1	 */	public function addComment($post_id, $comment)	{		$token = $this->oauth->getToken();		// Set parameters.		$parameters = array(			'oauth_token' => $token['key']		);		// Set the success response code.		$this->oauth->setOption('success_code', 201);		// Set the API base		$base = '/v1/posts/' . $post_id . '/comments';		// Build xml.		$xml = '<comment><text>' . $comment . '</text></comment>';		// Build the request path.		$path = $this->getOption('api.url') . $base;		$header['Content-Type'] = 'text/xml';		// Send the request.		$response = $this->oauth->oauthRequest($path, 'POST', $parameters, $xml, $header);		// Return the comment id.		$response = explode('comments/', $response->headers['Location']);		return $response[1];	}	/**	 * Method to delete a comment if the current user is the creator or flag it as inappropriate otherwise.	 *	 * @param   string  $comment_id  The unique identifier for a group.	 *	 * @return  array  The decoded JSON response	 *	 * @since   13.1	 */	public function deleteComment($comment_id)	{		$token = $this->oauth->getToken();		// Set parameters.		$parameters = array(			'oauth_token' => $token['key']		);		// Set the success response code.		$this->oauth->setOption('success_code', 204);		// Set the API base		$base = '/v1/comments/' . $comment_id;		// Build the request path.		$path = $this->getOption('api.url') . $base;		// Send the request.		$response = $this->oauth->oauthRequest($path, 'DELETE', $parameters);		return $response;	}	/**	 * Method to get suggested groups for a user.	 *	 * @param   string  $person_id  The unique identifier for a user.	 * @param   string  $fields     Request fields beyond the default ones.	 *	 * @return  array  The decoded JSON response	 *	 * @since   13.1	 */	public function getSuggested($person_id = null, $fields = null)	{		$token = $this->oauth->getToken();		// Set parameters.		$parameters = array(			'oauth_token' => $token['key']		);		// Set the API base		$base = '/v1/people/';		// Check if person_id is specified.		if ($person_id)		{			$base .= $person_id . '/suggestions/groups';		}		else		{			$base .= '~/suggestions/groups';		}		$data['format'] = 'json';		// Check if fields is specified.		if ($fields)		{			$base .= ':' . $fields;		}		// Build the request path.		$path = $this->getOption('api.url') . $base;		// Send the request.		$response = $this->oauth->oauthRequest($path, 'GET', $parameters, $data);		return json_decode($response->body);	}	/**	 * Method to delete a group suggestion for a user.	 *	 * @param   string  $suggestion_id  The unique identifier for a suggestion.	 * @param   string  $person_id      The unique identifier for a user.	 *	 * @return  array  The decoded JSON response	 *	 * @since   13.1	 */	public function deleteSuggestion($suggestion_id, $person_id = null)	{		$token = $this->oauth->getToken();		// Set parameters.		$parameters = array(			'oauth_token' => $token['key']		);		// Set the success response code.		$this->oauth->setOption('success_code', 204);		// Set the API base		$base = '/v1/people/';		// Check if person_id is specified.		if ($person_id)		{			$base .= $person_id . '/suggestions/groups/' . $suggestion_id;		}		else		{			$base .= '~/suggestions/groups/' . $suggestion_id;		}		// Build the request path.		$path = $this->getOption('api.url') . $base;		// Send the request.		$response = $this->oauth->oauthRequest($path, 'DELETE', $parameters);		return $response;	}}
<?php/** * @package     Joomla.Administrator * @subpackage  com_contact * * @copyright   Copyright (C) 2005 - 2013 Open Source Matters, Inc. All rights reserved. * @license     GNU General Public License version 2 or later; see LICENSE.txt */defined('_JEXEC') or die;JHtml::addIncludePath(JPATH_COMPONENT.'/helpers/html');JHtml::_('bootstrap.tooltip');JHtml::_('behavior.multiselect');JHtml::_('dropdown.init');JHtml::_('formbehavior.chosen', 'select');$app		= JFactory::getApplication();$user		= JFactory::getUser();$userId		= $user->get('id');$listOrder	= $this->escape($this->state->get('list.ordering'));$listDirn	= $this->escape($this->state->get('list.direction'));$archived	= $this->state->get('filter.published') == 2 ? true : false;$trashed	= $this->state->get('filter.published') == -2 ? true : false;$canOrder	= $user->authorise('core.edit.state', 'com_contact.category');$saveOrder	= $listOrder == 'a.ordering';if ($saveOrder){	$saveOrderingUrl = 'index.php?option=com_contact&task=contacts.saveOrderAjax&tmpl=component';	JHtml::_('sortablelist.sortable', 'articleList', 'adminForm', strtolower($listDirn), $saveOrderingUrl);}$sortFields = $this->getSortFields();$assoc		= isset($app->item_associations) ? $app->item_associations : 0;?><script type="text/javascript">	Joomla.orderTable = function()	{		table = document.getElementById("sortTable");		direction = document.getElementById("directionTable");		order = table.options[table.selectedIndex].value;		if (order != '<?php echo $listOrder; ?>')		{			dirn = 'asc';		}		else		{			dirn = direction.options[direction.selectedIndex].value;		}		Joomla.tableOrdering(order, dirn, '');	}</script><form action="<?php echo JRoute::_('index.php?option=com_contact'); ?>" method="post" name="adminForm" id="adminForm"><?php if (!empty( $this->sidebar)) : ?>	<div id="j-sidebar-container" class="span2">		<?php echo $this->sidebar; ?>	</div>	<div id="j-main-container" class="span10"><?php else : ?>	<div id="j-main-container"><?php endif;?>		<div id="filter-bar" class="btn-toolbar">			<div class="filter-search btn-group pull-left">				<label for="filter_search" class="element-invisible"><?php echo JText::_('COM_CONTACT_FILTER_SEARCH_DESC');?></label>				<input type="text" name="filter_search" id="filter_search" placeholder="<?php echo JText::_('COM_CONTACT_SEARCH_IN_NAME'); ?>" value="<?php echo $this->escape($this->state->get('filter.search')); ?>" title="<?php echo JText::_('COM_CONTACT_SEARCH_IN_NAME'); ?>" />			</div>			<div class="btn-group pull-left">				<button class="btn hasTooltip" type="submit" title="<?php echo JText::_('JSEARCH_FILTER_SUBMIT'); ?>"><i class="icon-search"></i></button>				<button class="btn hasTooltip" type="button" title="<?php echo JText::_('JSEARCH_FILTER_CLEAR'); ?>" onclick="document.id('filter_search').value='';this.form.submit();"><i class="icon-remove"></i></button>			</div>			<div class="btn-group pull-right hidden-phone">				<label for="limit" class="element-invisible"><?php echo JText::_('JFIELD_PLG_SEARCH_SEARCHLIMIT_DESC');?></label>				<?php echo $this->pagination->getLimitBox(); ?>			</div>			<div class="btn-group pull-right hidden-phone">				<label for="directionTable" class="element-invisible"><?php echo JText::_('JFIELD_ORDERING_DESC');?></label>				<select name="directionTable" id="directionTable" class="input-medium" onchange="Joomla.orderTable()">					<option value=""><?php echo JText::_('JFIELD_ORDERING_DESC');?></option>					<option value="asc" <?php if ($listDirn == 'asc') echo 'selected="selected"'; ?>><?php echo JText::_('JGLOBAL_ORDER_ASCENDING');?></option>					<option value="desc" <?php if ($listDirn == 'desc') echo 'selected="selected"'; ?>><?php echo JText::_('JGLOBAL_ORDER_DESCENDING');?></option>				</select>			</div>			<div class="btn-group pull-right">				<label for="sortTable" class="element-invisible"><?php echo JText::_('JGLOBAL_SORT_BY');?></label>				<select name="sortTable" id="sortTable" class="input-medium" onchange="Joomla.orderTable()">					<option value=""><?php echo JText::_('JGLOBAL_SORT_BY');?></option>					<?php echo JHtml::_('select.options', $sortFields, 'value', 'text', $listOrder);?>				</select>			</div>		</div>		<div class="clearfix"> </div>		<table class="table table-striped" id="articleList">			<thead>				<tr>					<th width="1%" class="nowrap center hidden-phone">						<?php echo JHtml::_('grid.sort', '<i class="icon-menu-2"></i>', 'a.ordering', $listDirn, $listOrder, null, 'asc', 'JGRID_HEADING_ORDERING'); ?>					</th>					<th width="1%" class="hidden-phone">						<input type="checkbox" name="checkall-toggle" value="" title="<?php echo JText::_('JGLOBAL_CHECK_ALL'); ?>" onclick="Joomla.checkAll(this)" />					</th>					<th width="1%" style="min-width:55px" class="nowrap center">						<?php echo JHtml::_('grid.sort', 'JSTATUS', 'a.published', $listDirn, $listOrder); ?>					</th>					<th>						<?php echo JHtml::_('grid.sort', 'JGLOBAL_TITLE', 'a.name', $listDirn, $listOrder); ?>					</th>					<th class="nowrap hidden-phone">						<?php echo JHtml::_('grid.sort', 'COM_CONTACT_FIELD_LINKED_USER_LABEL', 'ul.name', $listDirn, $listOrder); ?>					</th>					<th width="5%" class="nowrap hidden-phone">						<?php echo JHtml::_('grid.sort', 'JFEATURED', 'a.featured', $listDirn, $listOrder); ?>					</th>					<th width="10%" class="nowrap hidden-phone">						<?php echo JHtml::_('grid.sort', 'JGRID_HEADING_ACCESS', 'a.access', $listDirn, $listOrder); ?>					</th>					<?php if ($assoc) : ?>					<th width="5%" class="nowrap hidden-phone">						<?php echo JHtml::_('grid.sort', 'COM_CONTACT_HEADING_ASSOCIATION', 'association', $listDirn, $listOrder); ?>					</th>					<?php endif;?>					<th width="5%" class="nowrap hidden-phone">						<?php echo JHtml::_('grid.sort', 'JGRID_HEADING_LANGUAGE', 'a.language', $listDirn, $listOrder); ?>					</th>					<th width="1%" class="nowrap center hidden-phone">						<?php echo JHtml::_('grid.sort', 'JGRID_HEADING_ID', 'a.id', $listDirn, $listOrder); ?>					</th>				</tr>			</thead>			<tbody>			<?php			$n = count($this->items);			foreach ($this->items as $i => $item) :				$ordering	= $listOrder == 'a.ordering';				$canCreate	= $user->authorise('core.create',     'com_contact.category.'.$item->catid);				$canEdit	= $user->authorise('core.edit',       'com_contact.category.'.$item->catid);				$canCheckin	= $user->authorise('core.manage',     'com_checkin') || $item->checked_out == $userId || $item->checked_out == 0;				$canEditOwn	= $user->authorise('core.edit.own',   'com_contact.category.'.$item->catid) && $item->created_by == $userId;				$canChange	= $user->authorise('core.edit.state', 'com_contact.category.'.$item->catid) && $canCheckin;				$item->cat_link = JRoute::_('index.php?option=com_categories&extension=com_contact&task=edit&type=other&id='.$item->catid);				?>				<tr class="row<?php echo $i % 2; ?>" sortable-group-id="<?php echo $item->catid?>">					<td class="order nowrap center hidden-phone">						<?php if ($canChange) :							$disableClassName = '';							$disabledLabel	  = '';							if (!$saveOrder) :								$disabledLabel    = JText::_('JORDERINGDISABLED');								$disableClassName = 'inactive tip-top';							endif; ?>							<span class="sortable-handler hasTooltip<?php echo $disableClassName?>" title="<?php echo $disabledLabel?>">								<i class="icon-menu"></i>							</span>							<input type="text" style="display:none" name="order[]" size="5"							value="<?php echo $item->ordering;?>" class="width-20 text-area-order " />						<?php else : ?>							<span class="sortable-handler inactive" >								<i class="icon-menu"></i>							</span>						<?php endif; ?>					</td>					<td class="center hidden-phone">						<?php echo JHtml::_('grid.id', $i, $item->id); ?>					</td>					<td class="center">						<?php echo JHtml::_('jgrid.published', $item->published, $i, 'contacts.', $canChange, 'cb', $item->publish_up, $item->publish_down); ?>					</td>					<td class="nowrap has-context">						<div class="pull-left">							<?php if ($item->checked_out) : ?>								<?php echo JHtml::_('jgrid.checkedout', $i, $item->editor, $item->checked_out_time, 'contacts.', $canCheckin); ?>							<?php endif; ?>							<?php if ($canEdit || $canEditOwn) : ?>								<a href="<?php echo JRoute::_('index.php?option=com_contact&task=contact.edit&id='.(int) $item->id); ?>">								<?php echo $this->escape($item->name); ?></a>							<?php else : ?>								<?php echo $this->escape($item->name); ?>							<?php endif; ?>							<span class="small">								<?php echo JText::sprintf('JGLOBAL_LIST_ALIAS', $this->escape($item->alias));?>							</span>							<div class="small">								<?php echo $item->category_title; ?>							</div>						</div>						<div class="pull-left">							<?php								// Create dropdown items								JHtml::_('dropdown.edit', $item->id, 'contact.');								JHtml::_('dropdown.divider');								if ($item->published) :									JHtml::_('dropdown.unpublish', 'cb' . $i, 'contacts.');								else :									JHtml::_('dropdown.publish', 'cb' . $i, 'contacts.');								endif;								if ($item->featured) :									JHtml::_('dropdown.unfeatured', 'cb' . $i, 'contacts.');								else :									JHtml::_('dropdown.featured', 'cb' . $i, 'contacts.');								endif;								JHtml::_('dropdown.divider');								if ($archived) :									JHtml::_('dropdown.unarchive', 'cb' . $i, 'contacts.');								else :									JHtml::_('dropdown.archive', 'cb' . $i, 'contacts.');								endif;								if ($item->checked_out) :									JHtml::_('dropdown.checkin', 'cb' . $i, 'contacts.');								endif;								if ($trashed) :									JHtml::_('dropdown.untrash', 'cb' . $i, 'contacts.');								else :									JHtml::_('dropdown.trash', 'cb' . $i, 'contacts.');								endif;								// render dropdown list								echo JHtml::_('dropdown.render');							?>						</div>					</td>					<td align="small hidden-phone">						<?php if (!empty($item->linked_user)) : ?>							<a href="<?php echo JRoute::_('index.php?option=com_users&task=user.edit&id='.$item->user_id);?>"><?php echo $item->linked_user;?></a>						<?php endif; ?>					</td>					<td class="center hidden-phone">						<?php echo JHtml::_('contact.featured', $item->featured, $i, $canChange); ?>					</td>					<td align="small hidden-phone">						<?php echo $item->access_level; ?>					</td>					<?php if ($assoc) : ?>					<td class="hidden-phone">						<?php if ($item->association) : ?>							<?php echo JHtml::_('contact.association', $item->id); ?>						<?php endif; ?>					</td>					<?php endif;?>					<td class="small hidden-phone">						<?php if ($item->language == '*'):?>							<?php echo JText::alt('JALL', 'language'); ?>						<?php else:?>							<?php echo $item->language_title ? $this->escape($item->language_title) : JText::_('JUNDEFINED'); ?>						<?php endif;?>					</td>					<td align="center hidden-phone">						<?php echo $item->id; ?>					</td>				</tr>				<?php endforeach; ?>			</tbody>			<tfoot>				<tr>					<td colspan="10">						<?php echo $this->pagination->getListFooter(); ?>					</td>				</tr>			</tfoot>		</table>		<?php //Load the batch processing form. ?>		<?php echo $this->loadTemplate('batch'); ?>		<input type="hidden" name="task" value="" />		<input type="hidden" name="boxchecked" value="0" />		<input type="hidden" name="filter_order" value="<?php echo $listOrder; ?>" />		<input type="hidden" name="filter_order_Dir" value="<?php echo $listDirn; ?>" />		<?php echo JHtml::_('form.token'); ?>	</div></form>
<?php/** * @package     Joomla.Plugin * @subpackage  Quickicon.Extensionupdate * * @copyright   Copyright (C) 2005 - 2013 Open Source Matters, Inc. All rights reserved. * @license     GNU General Public License version 2 or later; see LICENSE.txt */defined('_JEXEC') or die;/** * Joomla! udpate notification plugin * * @package     Joomla.Plugin * @subpackage  Quickicon.Extensionupdate * @since       2.5 */class PlgQuickiconExtensionupdate extends JPlugin{	/**	 * Load the language file on instantiation.	 *	 * @var    boolean	 * @since  3.1	 */	protected $autoloadLanguage = true;	/**	 * Returns an icon definition for an icon which looks for extensions updates	 * via AJAX and displays a notification when such updates are found.	 *	 * @param  $context  The calling context	 *	 * @return array A list of icon definition associative arrays, consisting of the	 *				 keys link, image, text and access.	 *	 * @since       2.5	 */	public function onGetIcons($context)	{		if ($context != $this->params->get('context', 'mod_quickicon') || !JFactory::getUser()->authorise('core.manage', 'com_installer'))		{			return;		}		JHtml::_('jquery.framework');		$ajax_url = JURI::base().'index.php?option=com_installer&view=update&task=update.ajax';		$script = "var plg_quickicon_extensionupdate_ajax_url = '$ajax_url';\n";		$script .= 'var plg_quickicon_extensionupdate_text = {"UPTODATE" : "'.			JText::_('PLG_QUICKICON_EXTENSIONUPDATE_UPTODATE', true).'", "UPDATEFOUND": "'.			JText::_('PLG_QUICKICON_EXTENSIONUPDATE_UPDATEFOUND', true).'", "ERROR": "'.			JText::_('PLG_QUICKICON_EXTENSIONUPDATE_ERROR', true)."\"};\n";		$document = JFactory::getDocument();		$document->addScriptDeclaration($script);		JHtml::_('script', 'plg_quickicon_extensionupdate/extensionupdatecheck.js', false, true);		return array(array(			'link' => 'index.php?option=com_installer&view=update',			'image' => 'asterisk',			'icon' => 'header/icon-48-extension.png',			'text' => JText::_('PLG_QUICKICON_EXTENSIONUPDATE_CHECKING'),			'id' => 'plg_quickicon_extensionupdate'		));	}}
<?php/** * @package     Joomla.Site * @subpackage  com_weblinks * * @copyright   Copyright (C) 2005 - 2012 Open Source Matters, Inc. All rights reserved. * @license     GNU General Public License version 2 or later; see LICENSE.txt */defined('_JEXEC') or die;?><div class="categories-list<?php echo $displayData->pageclass_sfx;?>"><?php if ($displayData->params->get('show_page_heading')) : ?><h1>	<?php echo $displayData->escape($displayData->params->get('page_heading')); ?></h1><?php endif; ?><?php if ($displayData->params->get('show_base_description')) : ?>	<?php //If there is a description in the menu parameters use that; ?>		<?php if($displayData->params->get('categories_description')) : ?>			<div class="category-desc base-desc">			<?php echo JHtml::_('content.prepare', $displayData->params->get('categories_description'), '',  $displayData->extension . '.categories'); ?>			</div>		<?php else : ?>			<?php //Otherwise get one from the database if it exists. ?>			<?php  if ($displayData->parent->description) : ?>				<div class="category-desc base-desc">					<?php echo JHtml::_('content.prepare', $displayData->parent->description, '', $displayData->parent->extension . '.categories'); ?>				</div>			<?php endif; ?>		<?php endif; ?>	<?php endif; ?>
<?php/** * @package     Joomla.Administrator * @subpackage  com_config * * @copyright   Copyright (C) 2005 - 2013 Open Source Matters, Inc. All rights reserved. * @license     GNU General Public License version 2 or later; see LICENSE.txt */defined('_JEXEC') or die;?><fieldset class="form-horizontal">	<legend><?php echo JText::_('COM_CONFIG_SESSION_SETTINGS'); ?></legend>	<?php	foreach ($this->form->getFieldset('session') as $field):	?>		<div class="control-group">			<div class="control-label"><?php echo $field->label; ?></div>			<div class="controls"><?php echo $field->input; ?></div>		</div>	<?php	endforeach;	?></fieldset>
<?php/** * @package     Joomla.Platform * @subpackage  Form * * @copyright   Copyright (C) 2005 - 2013 Open Source Matters, Inc. All rights reserved. * @license     GNU General Public License version 2 or later; see LICENSE */defined('JPATH_PLATFORM') or die;jimport('joomla.filesystem.folder');JFormHelper::loadFieldClass('list');/** * Supports an HTML select list of folder * * @package     Joomla.Platform * @subpackage  Form * @since       11.1 */class JFormFieldFolderList extends JFormFieldList{	/**	 * The form field type.	 *	 * @var    string	 * @since  11.1	 */	public $type = 'FolderList';	/**	 * Method to get the field options.	 *	 * @return  array  The field option objects.	 *	 * @since   11.1	 */	protected function getOptions()	{		$options = array();		// Initialize some field attributes.		$filter = (string) $this->element['filter'];		$exclude = (string) $this->element['exclude'];		$hideNone = (string) $this->element['hide_none'];		$hideDefault = (string) $this->element['hide_default'];		// Get the path in which to search for file options.		$path = (string) $this->element['directory'];		if (!is_dir($path))		{			$path = JPATH_ROOT . '/' . $path;		}		// Prepend some default options based on field attributes.		if (!$hideNone)		{			$options[] = JHtml::_('select.option', '-1', JText::alt('JOPTION_DO_NOT_USE', preg_replace('/[^a-zA-Z0-9_\-]/', '_', $this->fieldname)));		}		if (!$hideDefault)		{			$options[] = JHtml::_('select.option', '', JText::alt('JOPTION_USE_DEFAULT', preg_replace('/[^a-zA-Z0-9_\-]/', '_', $this->fieldname)));		}		// Get a list of folders in the search path with the given filter.		$folders = JFolder::folders($path, $filter);		// Build the options list from the list of folders.		if (is_array($folders))		{			foreach ($folders as $folder)			{				// Check to see if the file is in the exclude mask.				if ($exclude)				{					if (preg_match(chr(1) . $exclude . chr(1), $folder))					{						continue;					}				}				$options[] = JHtml::_('select.option', $folder, $folder);			}		}		// Merge any additional options in the XML definition.		$options = array_merge(parent::getOptions(), $options);		return $options;	}}
<?php/** * @package     Joomla.Installation * @subpackage  Controller * * @copyright   Copyright (C) 2005 - 2013 Open Source Matters, Inc. All rights reserved. * @license     GNU General Public License version 2 or later; see LICENSE.txt */defined('_JEXEC') or die;/** * Controller class to initialise the database for the Joomla Installer. * * @package     Joomla.Installation * @subpackage  Controller * @since       3.1 */class InstallationControllerDatabase extends JControllerBase{	/**	 * Execute the controller.	 *	 * @return  void	 *	 * @since   3.1	 */	public function execute()	{		// Get the application		/* @var InstallationApplicationWeb $app */		$app = $this->getApplication();		// Check for request forgeries.		JSession::checkToken() or $app->sendJsonResponse(new Exception(JText::_('JINVALID_TOKEN'), 403));		// Get the setup model.		$model = new InstallationModelSetup;		// Check the form		$vars = $model->checkForm('database');		// Determine if the configuration file path is writable.		$path = JPATH_CONFIGURATION . '/configuration.php';		$useftp = (file_exists($path)) ? !is_writable($path) : !is_writable(JPATH_CONFIGURATION . '/');		$r = new stdClass;		$r->view = $useftp ? 'ftp' : 'summary';		// Get the database model.		$db = new InstallationModelDatabase;		// Attempt to initialise the database.		$return = $db->createDatabase($vars);		// Check if the database was initialised		if (!$return)		{			$r->view = 'database';		}		$app->sendJsonResponse($r);	}}
<?php/** * @package     Joomla.Administrator * @subpackage  com_menus * * @copyright   Copyright (C) 2005 - 2013 Open Source Matters, Inc. All rights reserved. * @license     GNU General Public License version 2 or later; see LICENSE.txt */defined('_JEXEC') or die;jimport('joomla.filesystem.path');require_once JPATH_COMPONENT . '/helpers/menus.php';/** * Menu Item Model for Menus. * * @package     Joomla.Administrator * @subpackage  com_menus * @since       1.6 */class MenusModelItem extends JModelAdmin{	/**	 * @var        string    The prefix to use with controller messages.	 * @since   1.6	 */	protected $text_prefix = 'COM_MENUS_ITEM';	/**	 * @var        string    The help screen key for the menu item.	 * @since   1.6	 */	protected $helpKey = 'JHELP_MENUS_MENU_ITEM_MANAGER_EDIT';	/**	 * @var        string    The help screen base URL for the menu item.	 * @since   1.6	 */	protected $helpURL;	/**	 * @var        boolean    True to use local lookup for the help screen.	 * @since   1.6	 */	protected $helpLocal = false;	/**	 * Method to test whether a record can be deleted.	 *	 * @param   object    A record object.	 *	 * @return  boolean  True if allowed to delete the record. Defaults to the permission set in the component.	 * @since   1.6	 */	protected function canDelete($record)	{		if (!empty($record->id))		{			if ($record->published != -2)			{				return;			}			$user = JFactory::getUser();			return $user->authorise('core.delete', 'com_menus.item.' . (int) $record->id);		}	}	/**	 * Method to test whether a record can have its state edited.	 *	 * @param   object    A record object.	 *	 * @return  boolean  True if allowed to change the state of the record. Defaults to the permission set in the component.	 * @since   1.6	 */	protected function canEditState($record)	{		$user = JFactory::getUser();		if (!empty($record->id))		{			return $user->authorise('core.edit.state', 'com_menus.item.' . (int) $record->id);		}		// Default to component settings if menu item not known.		else		{			return parent::canEditState($record);		}	}	/**	 * Method to perform batch operations on an item or a set of items.	 *	 * @param   array  $commands  An array of commands to perform.	 * @param   array  $pks       An array of item ids.	 * @param   array  $contexts  An array of item contexts.	 *	 * @return  boolean  Returns true on success, false on failure.	 *	 * @since   1.6	 */	public function batch($commands, $pks, $contexts)	{		// Sanitize user ids.		$pks = array_unique($pks);		JArrayHelper::toInteger($pks);		// Remove any values of zero.		if (array_search(0, $pks, true))		{			unset($pks[array_search(0, $pks, true)]);		}		if (empty($pks))		{			$this->setError(JText::_('COM_MENUS_NO_ITEM_SELECTED'));			return false;		}		$done = false;		if (!empty($commands['menu_id']))		{			$cmd = JArrayHelper::getValue($commands, 'move_copy', 'c');			if ($cmd == 'c')			{				$result = $this->batchCopy($commands['menu_id'], $pks, $contexts);				if (is_array($result))				{					$pks = $result;				}				else				{					return false;				}			}			elseif ($cmd == 'm' && !$this->batchMove($commands['menu_id'], $pks, $contexts))			{				return false;			}			$done = true;		}		if (!empty($commands['assetgroup_id']))		{			if (!$this->batchAccess($commands['assetgroup_id'], $pks, $contexts))			{				return false;			}			$done = true;		}		if (!empty($commands['language_id']))		{			if (!$this->batchLanguage($commands['language_id'], $pks, $contexts))			{				return false;			}			$done = true;		}		if (!$done)		{			$this->setError(JText::_('JLIB_APPLICATION_ERROR_INSUFFICIENT_BATCH_INFORMATION'));			return false;		}		return true;	}	/**	 * Batch copy menu items to a new menu or parent.	 *	 * @param   integer  $value     The new menu or sub-item.	 * @param   array    $pks       An array of row IDs.	 * @param   array    $contexts  An array of item contexts.	 *	 * @return  mixed  An array of new IDs on success, boolean false on failure.	 *	 * @since   1.6	 */	protected function batchCopy($value, $pks, $contexts)	{		// $value comes as {menutype}.{parent_id}		$parts = explode('.', $value);		$menuType = $parts[0];		$parentId = (int) JArrayHelper::getValue($parts, 1, 0);		$table = $this->getTable();		$db = $this->getDbo();		$query = $db->getQuery(true);		$i = 0;		// Check that the parent exists		if ($parentId)		{			if (!$table->load($parentId))			{				if ($error = $table->getError())				{					// Fatal error					$this->setError($error);					return false;				}				else				{					// Non-fatal error					$this->setError(JText::_('JGLOBAL_BATCH_MOVE_PARENT_NOT_FOUND'));					$parentId = 0;				}			}		}		// If the parent is 0, set it to the ID of the root item in the tree		if (empty($parentId))		{			if (!$parentId = $table->getRootId())			{				$this->setError($db->getErrorMsg());				return false;			}		}		// Check that user has create permission for menus		$user = JFactory::getUser();		if (!$user->authorise('core.create', 'com_menus'))		{			$this->setError(JText::_('COM_MENUS_BATCH_MENU_ITEM_CANNOT_CREATE'));			return false;		}		// We need to log the parent ID		$parents = array();		// Calculate the emergency stop count as a precaution against a runaway loop bug		$query->select('COUNT(id)')			->from($db->quoteName('#__menu'));		$db->setQuery($query);		try		{			$count = $db->loadResult();		}		catch (RuntimeException $e)		{			$this->setError($e->getMessage());			return false;		}		// Parent exists so we let's proceed		while (!empty($pks) && $count > 0)		{			// Pop the first id off the stack			$pk = array_shift($pks);			$table->reset();			// Check that the row actually exists			if (!$table->load($pk))			{				if ($error = $table->getError())				{					// Fatal error					$this->setError($error);					return false;				}				else				{					// Not fatal error					$this->setError(JText::sprintf('JGLOBAL_BATCH_MOVE_ROW_NOT_FOUND', $pk));					continue;				}			}			// Copy is a bit tricky, because we also need to copy the children			$query->clear()				->select('id')				->from($db->quoteName('#__menu'))				->where('lft > ' . (int) $table->lft)				->where('rgt < ' . (int) $table->rgt);			$db->setQuery($query);			$childIds = $db->loadColumn();			// Add child ID's to the array only if they aren't already there.			foreach ($childIds as $childId)			{				if (!in_array($childId, $pks))				{					array_push($pks, $childId);				}			}			// Make a copy of the old ID and Parent ID			$oldId = $table->id;			$oldParentId = $table->parent_id;			// Reset the id because we are making a copy.			$table->id = 0;			// If we a copying children, the Old ID will turn up in the parents list			// otherwise it's a new top level item			$table->parent_id = isset($parents[$oldParentId]) ? $parents[$oldParentId] : $parentId;			$table->menutype = $menuType;			// Set the new location in the tree for the node.			$table->setLocation($table->parent_id, 'last-child');			// TODO: Deal with ordering?			//$table->ordering	= 1;			$table->level = null;			$table->lft = null;			$table->rgt = null;			$table->home = 0;			// Alter the title & alias			list($title, $alias) = $this->generateNewTitle($table->parent_id, $table->alias, $table->title);			$table->title = $title;			$table->alias = $alias;			// Check the row.			if (!$table->check())			{				$this->setError($table->getError());				return false;			}			// Store the row.			if (!$table->store())			{				$this->setError($table->getError());				return false;			}			// Get the new item ID			$newId = $table->get('id');			// Add the new ID to the array			$newIds[$i] = $newId;			$i++;			// Now we log the old 'parent' to the new 'parent'			$parents[$oldId] = $table->id;			$count--;		}		// Rebuild the hierarchy.		if (!$table->rebuild())		{			$this->setError($table->getError());			return false;		}		// Rebuild the tree path.		if (!$table->rebuildPath($table->id))		{			$this->setError($table->getError());			return false;		}		// Clean the cache		$this->cleanCache();		return $newIds;	}	/**	 * Batch move menu items to a new menu or parent.	 *	 * @param   integer  $value     The new menu or sub-item.	 * @param   array    $pks       An array of row IDs.	 * @param   array    $contexts  An array of item contexts.	 *	 * @return  boolean  True on success.	 *	 * @since   1.6	 */	protected function batchMove($value, $pks, $contexts)	{		// $value comes as {menutype}.{parent_id}		$parts = explode('.', $value);		$menuType = $parts[0];		$parentId = (int) JArrayHelper::getValue($parts, 1, 0);		$table = $this->getTable();		$db = $this->getDbo();		$query = $db->getQuery(true);		// Check that the parent exists.		if ($parentId)		{			if (!$table->load($parentId))			{				if ($error = $table->getError())				{					// Fatal error					$this->setError($error);					return false;				}				else				{					// Non-fatal error					$this->setError(JText::_('JGLOBAL_BATCH_MOVE_PARENT_NOT_FOUND'));					$parentId = 0;				}			}		}		// Check that user has create and edit permission for menus		$user = JFactory::getUser();		if (!$user->authorise('core.create', 'com_menus'))		{			$this->setError(JText::_('COM_MENUS_BATCH_MENU_ITEM_CANNOT_CREATE'));			return false;		}		if (!$user->authorise('core.edit', 'com_menus'))		{			$this->setError(JText::_('COM_MENUS_BATCH_MENU_ITEM_CANNOT_EDIT'));			return false;		}		// We are going to store all the children and just moved the menutype		$children = array();		// Parent exists so we let's proceed		foreach ($pks as $pk)		{			// Check that the row actually exists			if (!$table->load($pk))			{				if ($error = $table->getError())				{					// Fatal error					$this->setError($error);					return false;				}				else				{					// Not fatal error					$this->setError(JText::sprintf('JGLOBAL_BATCH_MOVE_ROW_NOT_FOUND', $pk));					continue;				}			}			// Set the new location in the tree for the node.			$table->setLocation($parentId, 'last-child');			// Set the new Parent Id			$table->parent_id = $parentId;			// Check if we are moving to a different menu			if ($menuType != $table->menutype)			{				// Add the child node ids to the children array.				$query->clear()					->select($db->quoteName('id'))					->from($db->quoteName('#__menu'))					->where($db->quoteName('lft') . ' BETWEEN ' . (int) $table->lft . ' AND ' . (int) $table->rgt);				$db->setQuery($query);				$children = array_merge($children, (array) $db->loadColumn());			}			// Check the row.			if (!$table->check())			{				$this->setError($table->getError());				return false;			}			// Store the row.			if (!$table->store())			{				$this->setError($table->getError());				return false;			}			// Rebuild the tree path.			if (!$table->rebuildPath())			{				$this->setError($table->getError());				return false;			}		}		// Process the child rows		if (!empty($children))		{			// Remove any duplicates and sanitize ids.			$children = array_unique($children);			JArrayHelper::toInteger($children);			// Update the menutype field in all nodes where necessary.			$query->clear()				->update($db->quoteName('#__menu'))				->set($db->quoteName('menutype') . ' = ' . $db->quote($menuType))				->where($db->quoteName('id') . ' IN (' . implode(',', $children) . ')');			$db->setQuery($query);			try			{				$db->execute();			}			catch (RuntimeException $e)			{				$this->setError($e->getMessage());				return false;			}		}		// Clean the cache		$this->cleanCache();		return true;	}	/**	 * Method to check if you can save a record.	 *	 * @param   array     $data    An array of input data.	 * @param   string    $key     The name of the key for the primary key.	 *	 * @return  boolean	 * @since   1.6	 */	protected function canSave($data = array(), $key = 'id')	{		return JFactory::getUser()->authorise('core.edit', $this->option);	}	/**	 * Method to get the row form.	 *	 * @param   array      $data        Data for the form.	 * @param   boolean    $loadData    True if the form is to load its own data (default case), false if not.	 * @return  mixed  A JForm object on success, false on failure	 * @since   1.6	 */	public function getForm($data = array(), $loadData = true)	{		// The folder and element vars are passed when saving the form.		if (empty($data))		{			$item = $this->getItem();			$this->setState('item.link', $item->link);			// The type should already be set.		}		else		{			$this->setState('item.link', JArrayHelper::getValue($data, 'link'));			$this->setState('item.type', JArrayHelper::getValue($data, 'type'));		}		// Get the form.		$form = $this->loadForm('com_menus.item', 'item', array('control' => 'jform', 'load_data' => $loadData), true);		if (empty($form))		{			return false;		}		// Modify the form based on access controls.		if (!$this->canEditState((object) $data))		{			// Disable fields for display.			$form->setFieldAttribute('menuordering', 'disabled', 'true');			$form->setFieldAttribute('published', 'disabled', 'true');			// Disable fields while saving.			// The controller has already verified this is an article you can edit.			$form->setFieldAttribute('menuordering', 'filter', 'unset');			$form->setFieldAttribute('published', 'filter', 'unset');		}		return $form;	}	/**	 * Method to get the data that should be injected in the form.	 *	 * @return  mixed  The data for the form.	 * @since   1.6	 */	protected function loadFormData()	{		// Check the session for previously entered form data.		$data = array_merge((array) $this->getItem(), (array) JFactory::getApplication()->getUserState('com_menus.edit.item.data', array()));		$this->preprocessData('com_menus.item', $data);		return $data;	}	/**	 * Get the necessary data to load an item help screen.	 *	 * @return  object  An object with key, url, and local properties for loading the item help screen.	 * @since   1.6	 */	public function getHelp()	{		return (object) array('key' => $this->helpKey, 'url' => $this->helpURL, 'local' => $this->helpLocal);	}	/**	 * Method to get a menu item.	 *	 * @param   integer    $pk    An optional id of the object to get, otherwise the id from the model state is used.	 *	 * @return  mixed  Menu item data object on success, false on failure.	 * @since   1.6	 */	public function getItem($pk = null)	{		$pk = (!empty($pk)) ? $pk : (int) $this->getState('item.id');		// Get a level row instance.		$table = $this->getTable();		// Attempt to load the row.		$table->load($pk);		// Check for a table object error.		if ($error = $table->getError())		{			$this->setError($error);			return false;		}		// Prime required properties.		if ($type = $this->getState('item.type'))		{			$table->type = $type;		}		if (empty($table->id))		{			$table->parent_id = $this->getState('item.parent_id');			$table->menutype = $this->getState('item.menutype');			$table->params = '{}';		}		// If the link has been set in the state, possibly changing link type.		if ($link = $this->getState('item.link'))		{			// Check if we are changing away from the actual link type.			if (MenusHelper::getLinkKey($table->link) != MenusHelper::getLinkKey($link))			{				$table->link = $link;			}		}		switch ($table->type)		{			case 'alias':				$table->component_id = 0;				$args = array();				parse_str(parse_url($table->link, PHP_URL_QUERY), $args);				break;			case 'separator':			case 'heading':				$table->link = '';				$table->component_id = 0;				break;			case 'url':				$table->component_id = 0;				parse_str(parse_url($table->link, PHP_URL_QUERY));				break;			case 'component':			default:				// Enforce a valid type.				$table->type = 'component';				// Ensure the integrity of the component_id field is maintained, particularly when changing the menu item type.				$args = array();				parse_str(parse_url($table->link, PHP_URL_QUERY), $args);				if (isset($args['option']))				{					// Load the language file for the component.					$lang = JFactory::getLanguage();					$lang->load($args['option'], JPATH_ADMINISTRATOR, null, false, false)						|| $lang->load($args['option'], JPATH_ADMINISTRATOR . '/components/' . $args['option'], null, false, false)						|| $lang->load($args['option'], JPATH_ADMINISTRATOR, $lang->getDefault(), false, false)						|| $lang->load($args['option'], JPATH_ADMINISTRATOR . '/components/' . $args['option'], $lang->getDefault(), false, false);					// Determine the component id.					$component = JComponentHelper::getComponent($args['option']);					if (isset($component->id))					{						$table->component_id = $component->id;					}				}				break;		}		// We have a valid type, inject it into the state for forms to use.		$this->setState('item.type', $table->type);		// Convert to the JObject before adding the params.		$properties = $table->getProperties(1);		$result = JArrayHelper::toObject($properties);		// Convert the params field to an array.		$registry = new JRegistry;		$registry->loadString($table->params);		$result->params = $registry->toArray();		// Merge the request arguments in to the params for a component.		if ($table->type == 'component')		{			// Note that all request arguments become reserved parameter names.			$result->request = $args;			$result->params = array_merge($result->params, $args);		}		if ($table->type == 'alias')		{			// Note that all request arguments become reserved parameter names.			$args = array();			parse_str(parse_url($table->link, PHP_URL_QUERY), $args);			$result->params = array_merge($result->params, $args);		}		if ($table->type == 'url')		{			// Note that all request arguments become reserved parameter names.			$args = array();			parse_str(parse_url($table->link, PHP_URL_QUERY), $args);			$result->params = array_merge($result->params, $args);		}		// Load associated menu items		$app = JFactory::getApplication();		$assoc = isset($app->item_associations) ? $app->item_associations : 0;		if ($assoc)		{			if ($pk != null)			{				$result->associations = MenusHelper::getAssociations($pk);			}			else			{				$result->associations = array();			}		}		$result->menuordering = $pk;		return $result;	}	/**	 * Get the list of modules not in trash.	 *	 * @return  mixed  An array of module records (id, title, position), or false on error.	 * @since   1.6	 */	public function getModules()	{		$db = $this->getDbo();		$query = $db->getQuery(true);		// Join on the module-to-menu mapping table.		// We are only interested if the module is displayed on ALL or THIS menu item (or the inverse ID number).		//sqlsrv changes for modulelink to menu manager		$query->select('a.id, a.title, a.position, a.published, map.menuid')			->from('#__modules AS a')			->join('LEFT', sprintf('#__modules_menu AS map ON map.moduleid = a.id AND map.menuid IN (0, %1$d, -%1$d)', $this->getState('item.id')))			->select('(SELECT COUNT(*) FROM #__modules_menu WHERE moduleid = a.id AND menuid < 0) AS ' . $db->quoteName('except'));		// Join on the asset groups table.		$query->select('ag.title AS access_title')			->join('LEFT', '#__viewlevels AS ag ON ag.id = a.access')			->where('a.published >= 0')			->where('a.client_id = 0')			->order('a.position, a.ordering');		$db->setQuery($query);		try		{			$result = $db->loadObjectList();		}		catch (RuntimeException $e)		{			$this->setError($e->getMessage());			return false;		}		return $result;	}	/**	 * A protected method to get the where clause for the reorder	 * This ensures that the row will be moved relative to a row with the same menutype	 *	 * @param   JTableMenu $table instance	 *	 * @return  array  An array of conditions to add to add to ordering queries.	 * @since   1.6	 */	protected function getReorderConditions($table)	{		return 'menutype = ' . $this->_db->quote($table->menutype);	}	/**	 * Returns a Table object, always creating it	 *	 * @param   type      $type      The table type to instantiate	 * @param   string    $prefix    A prefix for the table class name. Optional.	 * @param   array     $config    Configuration array for model. Optional.	 *	 * @return  JTable    A database object	 * @since   1.6	 */	public function getTable($type = 'Menu', $prefix = 'MenusTable', $config = array())	{		return JTable::getInstance($type, $prefix, $config);	}	/**	 * Auto-populate the model state.	 *	 * Note. Calling getState in this method will result in recursion.	 *	 * @return  void	 * @since   1.6	 */	protected function populateState()	{		$app = JFactory::getApplication('administrator');		// Load the User state.		$pk = $app->input->getInt('id');		$this->setState('item.id', $pk);		if (!($parentId = $app->getUserState('com_menus.edit.item.parent_id')))		{			$parentId = $app->input->getInt('parent_id');		}		$this->setState('item.parent_id', $parentId);		$menuType = $app->getUserState('com_menus.edit.item.menutype');		if ($app->input->getString('menutype', false))		{			$menuType = $app->input->getString('menutype', 'mainmenu');		}		$this->setState('item.menutype', $menuType);		if (!($type = $app->getUserState('com_menus.edit.item.type')))		{			$type = $app->input->get('type');			// Note a new menu item will have no field type.			// The field is required so the user has to change it.		}		$this->setState('item.type', $type);		if ($link = $app->getUserState('com_menus.edit.item.link'))		{			$this->setState('item.link', $link);		}		// Load the parameters.		$params = JComponentHelper::getParams('com_menus');		$this->setState('params', $params);	}	/**	 * @param   object    $form    A form object.	 * @param   mixed     $data    The data expected for the form.	 *	 * @return  void	 * @since   1.6	 * @throws    Exception if there is an error in the form event.	 */	protected function preprocessForm(JForm $form, $data, $group = 'content')	{		$link = $this->getState('item.link');		$type = $this->getState('item.type');		$formFile = false;		// Initialise form with component view params if available.		if ($type == 'component')		{			$link = htmlspecialchars_decode($link);			// Parse the link arguments.			$args = array();			parse_str(parse_url(htmlspecialchars_decode($link), PHP_URL_QUERY), $args);			// Confirm that the option is defined.			$option = '';			$base = '';			if (isset($args['option']))			{				// The option determines the base path to work with.				$option = $args['option'];				$base = JPATH_SITE . '/components/' . $option;			}			// Confirm a view is defined.			$formFile = false;			if (isset($args['view']))			{				$view = $args['view'];				// Determine the layout to search for.				if (isset($args['layout']))				{					$layout = $args['layout'];				}				else				{					$layout = 'default';				}				$formFile = false;				// Check for the layout XML file. Use standard xml file if it exists.				$path = JPath::clean($base . '/views/' . $view . '/tmpl/' . $layout . '.xml');				if (is_file($path))				{					$formFile = $path;				}				// if custom layout, get the xml file from the template folder				// template folder is first part of file name -- template:folder				if (!$formFile && (strpos($layout, ':') > 0))				{					$temp = explode(':', $layout);					$templatePath = JPATH::clean(JPATH_SITE . '/templates/' . $temp[0] . '/html/' . $option . '/' . $view . '/' . $temp[1] . '.xml');					if (is_file($templatePath))					{						$formFile = $templatePath;					}				}			}			//Now check for a view manifest file			if (!$formFile)			{				if (isset($view) && is_file($path = JPath::clean($base . '/views/' . $view . '/metadata.xml')))				{					$formFile = $path;				}				else				{					//Now check for a component manifest file					$path = JPath::clean($base . '/metadata.xml');					if (is_file($path))					{						$formFile = $path;					}				}			}		}		if ($formFile)		{			// If an XML file was found in the component, load it first.			// We need to qualify the full path to avoid collisions with component file names.			if ($form->loadFile($formFile, true, '/metadata') == false)			{				throw new Exception(JText::_('JERROR_LOADFILE_FAILED'));			}			// Attempt to load the xml file.			if (!$xml = simplexml_load_file($formFile))			{				throw new Exception(JText::_('JERROR_LOADFILE_FAILED'));			}			// Get the help data from the XML file if present.			$help = $xml->xpath('/metadata/layout/help');		}		else		{			// We don't have a component. Load the form XML to get the help path			$xmlFile = JPath::find(JPATH_ROOT . '/administrator/components/com_menus/models/forms', 'item_' . $type . '.xml');			// Attempt to load the xml file.			if ($xmlFile && !$xml = simplexml_load_file($xmlFile))			{				throw new Exception(JText::_('JERROR_LOADFILE_FAILED'));			}			// Get the help data from the XML file if present.			$help = $xml->xpath('/form/help');		}		if (!empty($help))		{			$helpKey = trim((string) $help[0]['key']);			$helpURL = trim((string) $help[0]['url']);			$helpLoc = trim((string) $help[0]['local']);			$this->helpKey = $helpKey ? $helpKey : $this->helpKey;			$this->helpURL = $helpURL ? $helpURL : $this->helpURL;			$this->helpLocal = (($helpLoc == 'true') || ($helpLoc == '1') || ($helpLoc == 'local')) ? true : false;		}		// Now load the component params.		// TODO: Work out why 'fixing' this breaks JForm		if ($isNew = false)		{			$path = JPath::clean(JPATH_ADMINISTRATOR . '/components/' . $option . '/config.xml');		}		else		{			$path = 'null';		}		if (is_file($path))		{			// Add the component params last of all to the existing form.			if (!$form->load($path, true, '/config'))			{				throw new Exception(JText::_('JERROR_LOADFILE_FAILED'));			}		}		// Load the specific type file		if (!$form->loadFile('item_' . $type, false, false))		{			throw new Exception(JText::_('JERROR_LOADFILE_FAILED'));		}		// Association menu items		$app = JFactory::getApplication();		$assoc = isset($app->item_associations) ? $app->item_associations : 0;		if ($assoc)		{			$languages = JLanguageHelper::getLanguages('lang_code');			$addform = new SimpleXMLElement('<form />');			$fields = $addform->addChild('fields');			$fields->addAttribute('name', 'associations');			$fieldset = $fields->addChild('fieldset');			$fieldset->addAttribute('name', 'item_associations');			$fieldset->addAttribute('description', 'COM_MENUS_ITEM_ASSOCIATIONS_FIELDSET_DESC');			$add = false;			foreach ($languages as $tag => $language)			{				if ($tag != $data['language'])				{					$add = true;					$field = $fieldset->addChild('field');					$field->addAttribute('name', $tag);					$field->addAttribute('type', 'menuitem');					$field->addAttribute('language', $tag);					$field->addAttribute('label', $language->title);					$field->addAttribute('translate_label', 'false');					$option = $field->addChild('option', 'COM_MENUS_ITEM_FIELD_ASSOCIATION_NO_VALUE');					$option->addAttribute('value', '');				}			}			if ($add)			{				$form->load($addform, false);			}		}		// Trigger the default form events.		parent::preprocessForm($form, $data, $group);	}	/**	 * Method rebuild the entire nested set tree.	 *	 * @return  boolean  False on failure or error, true otherwise.	 * @since   1.6	 */	public function rebuild()	{		// Initialiase variables.		$db = $this->getDbo();		$table = $this->getTable();		if (!$table->rebuild())		{			$this->setError($table->getError());			return false;		}		// Convert the parameters not in JSON format.		$db->setQuery(			'SELECT id, params' .				' FROM #__menu' .				' WHERE params NOT LIKE ' . $db->quote('{%') .				'  AND params <> ' . $db->quote('')		);		try		{			$items = $db->loadObjectList();		}		catch (RuntimeException $e)		{			$this->setError($e->getMessage());			return false;		}		foreach ($items as &$item)		{			$registry = new JRegistry;			$registry->loadString($item->params);			$params = (string) $registry;			$db->setQuery(				'UPDATE #__menu' .					' SET params = ' . $db->quote($params) .					' WHERE id = ' . (int) $item->id			);			if (!$db->execute())			{				$this->setError($error);				return false;			}			unset($registry);		}		// Clean the cache		$this->cleanCache();		return true;	}	/**	 * Method to save the form data.	 *	 * @param   array  $data    The form data.	 *	 * @return  boolean  True on success.	 * @since   1.6	 */	public function save($data)	{		$pk = (!empty($data['id'])) ? $data['id'] : (int) $this->getState('item.id');		$isNew = true;		$table = $this->getTable();		// Load the row if saving an existing item.		if ($pk > 0)		{			$table->load($pk);			$isNew = false;		}		if (!$isNew && $table->menutype == $data['menutype'])		{			if ($table->parent_id == $data['parent_id'])			{				// If first is chosen make the item the first child of the selected parent.				if ($data['menuordering'] == -1)				{					$table->setLocation($data['parent_id'], 'first-child');				}				// If last is chosen make it the last child of the selected parent.				elseif ($data['menuordering'] == -2)				{					$table->setLocation($data['parent_id'], 'last-child');				}				// Don't try to put an item after itself. All other ones put after the selected item.				// $data['id'] is empty means it's a save as copy				elseif ($data['menuordering'] && $table->id != $data['menuordering'] || empty($data['id']))				{					$table->setLocation($data['menuordering'], 'after');				}				// Just leave it where it is if no change is made.				elseif ($data['menuordering'] && $table->id == $data['menuordering'])				{					unset($data['menuordering']);				}			}			// Set the new parent id if parent id not matched and put in last position			else			{				$table->setLocation($data['parent_id'], 'last-child');			}		}		// We have a new item, so it is not a change.		elseif ($isNew)		{			$table->setLocation($data['parent_id'], 'last-child');		}		// The menu type has changed so we need to just put this at the bottom		// of the root level.		else		{			$table->setLocation(1, 'last-child');		}		// Bind the data.		if (!$table->bind($data))		{			$this->setError($table->getError());			return false;		}		// Alter the title & alias for save as copy.  Also, unset the home record.		if (!$isNew && $data['id'] == 0)		{			list($title, $alias) = $this->generateNewTitle($table->parent_id, $table->alias, $table->title);			$table->title = $title;			$table->alias = $alias;			$table->published = 0;			$table->home = 0;		}		// Check the data.		if (!$table->check())		{			$this->setError($table->getError());			return false;		}		// Store the data.		if (!$table->store())		{			$this->setError($table->getError());			return false;		}		// Rebuild the tree path.		if (!$table->rebuildPath($table->id))		{			$this->setError($table->getError());			return false;		}		$this->setState('item.id', $table->id);		$this->setState('item.menutype', $table->menutype);		// Load associated menu items		$app = JFactory::getApplication();		$assoc = isset($app->item_associations) ? $app->item_associations : 0;		if ($assoc)		{			// Adding self to the association			$associations = $data['associations'];			foreach ($associations as $tag => $id)			{				if (empty($id))				{					unset($associations[$tag]);				}			}			// Detecting all item menus			$all_language = $table->language == '*';			if ($all_language && !empty($associations))			{				JError::raiseNotice(403, JText::_('COM_MENUS_ERROR_ALL_LANGUAGE_ASSOCIATED'));			}			$associations[$table->language] = $table->id;			// Deleting old association for these items			$db = JFactory::getDbo();			$query = $db->getQuery(true)				->delete('#__associations')				->where('context=' . $db->quote('com_menus.item'))				->where('id IN (' . implode(',', $associations) . ')');			$db->setQuery($query);			try			{				$db->execute();			}			catch (RuntimeException $e)			{				$this->setError($e->getMessage());				return false;			}			if (!$all_language && count($associations) > 1)			{				// Adding new association for these items				$key = md5(json_encode($associations));				$query->clear()					->insert('#__associations');				foreach ($associations as $tag => $id)				{					$query->values($id . ',' . $db->quote('com_menus.item') . ',' . $db->quote($key));				}				$db->setQuery($query);				try				{					$db->execute();				}				catch (RuntimeException $e)				{					$this->setError($e->getMessage());					return false;				}			}		}		// Clean the cache		$this->cleanCache();		if (isset($data['link']))		{			$base = JURI::base();			$juri = JURI::getInstance($base . $data['link']);			$option = $juri->getVar('option');			// Clean the cache			parent::cleanCache($option);		}		return true;	}	/**	 * Method to save the reordered nested set tree.	 * First we save the new order values in the lft values of the changed ids.	 * Then we invoke the table rebuild to implement the new ordering.	 *	 * @param   array  $idArray      id's of rows to be reordered	 * @param   array  $lft_array    lft values of rows to be reordered	 *	 * @return  boolean false on failuer or error, true otherwise	 * @since   1.6	 */	public function saveorder($idArray = null, $lft_array = null)	{		// Get an instance of the table object.		$table = $this->getTable();		if (!$table->saveorder($idArray, $lft_array))		{			$this->setError($table->getError());			return false;		}		// Clean the cache		$this->cleanCache();		return true;	}	/**	 * Method to change the home state of one or more items.	 *	 * @param   array    $pks      A list of the primary keys to change.	 * @param   integer  $value    The value of the home state.	 *	 * @return  boolean  True on success.	 * @since   1.6	 */	public function setHome(&$pks, $value = 1)	{		$table = $this->getTable();		$pks = (array) $pks;		$user = JFactory::getUser();		$languages = array();		$onehome = false;		// Remember that we can set a home page for different languages,		// so we need to loop through the primary key array.		foreach ($pks as $i => $pk)		{			if ($table->load($pk))			{				if (!array_key_exists($table->language, $languages))				{					$languages[$table->language] = true;					if ($table->home == $value)					{						unset($pks[$i]);						JError::raiseNotice(403, JText::_('COM_MENUS_ERROR_ALREADY_HOME'));					}					else					{						$table->home = $value;						if ($table->language == '*')						{							$table->published = 1;						}						if (!$this->canSave($table))						{							// Prune items that you can't change.							unset($pks[$i]);							JError::raiseWarning(403, JText::_('JLIB_APPLICATION_ERROR_SAVE_NOT_PERMITTED'));						}						elseif (!$table->check())						{							// Prune the items that failed pre-save checks.							unset($pks[$i]);							JError::raiseWarning(403, $table->getError());						}						elseif (!$table->store())						{							// Prune the items that could not be stored.							unset($pks[$i]);							JError::raiseWarning(403, $table->getError());						}					}				}				else				{					unset($pks[$i]);					if (!$onehome)					{						$onehome = true;						JError::raiseNotice(403, JText::sprintf('COM_MENUS_ERROR_ONE_HOME'));					}				}			}		}		// Clean the cache		$this->cleanCache();		return true;	}	/**	 * Method to change the published state of one or more records.	 *	 * @param   array       &$pks   A list of the primary keys to change.	 * @param   integer     $value  The value of the published state.	 *	 * @return  boolean  True on success.	 *	 * @since   1.6	 */	public function publish(&$pks, $value = 1)	{		$table = $this->getTable();		$pks = (array) $pks;		// Default menu item existence checks.		if ($value != 1)		{			foreach ($pks as $i => $pk)			{				if ($table->load($pk) && $table->home && $table->language == '*')				{					// Prune items that you can't change.					JError::raiseWarning(403, JText::_('JLIB_DATABASE_ERROR_MENU_UNPUBLISH_DEFAULT_HOME'));					unset($pks[$i]);					break;				}			}		}		// Clean the cache		$this->cleanCache();		// Ensure that previous checks doesn't empty the array		if (empty($pks))		{			return true;		}		return parent::publish($pks, $value);	}	/**	 * Method to change the title & alias.	 *	 * @param   integer  $parent_id  The id of the parent.	 * @param   string   $alias      The alias.	 * @param   string   $title      The title.	 *	 * @return  array  Contains the modified title and alias.	 *	 * @since   1.6	 */	protected function generateNewTitle($parent_id, $alias, $title)	{		// Alter the title & alias		$table = $this->getTable();		while ($table->load(array('alias' => $alias, 'parent_id' => $parent_id)))		{			if ($title == $table->title)			{				$title = JString::increment($title);			}			$alias = JString::increment($alias, 'dash');		}		return array($title, $alias);	}	/**	 * Custom clean cache method	 *	 * @since   1.6	 */	protected function cleanCache($group = null, $client_id = 0)	{		parent::cleanCache('com_modules');		parent::cleanCache('mod_menu');	}}
<?php/** * @package     Joomla.Administrator * @subpackage  com_newsfeeds * * @copyright   Copyright (C) 2005 - 2013 Open Source Matters, Inc. All rights reserved. * @license     GNU General Public License version 2 or later; see LICENSE.txt */defined('_JEXEC') or die;/** * View class for a list of newsfeeds. * * @package     Joomla.Administrator * @subpackage  com_newsfeeds * @since       1.6 */class NewsfeedsViewNewsfeeds extends JViewLegacy{	protected $items;	protected $pagination;	protected $state;	/**	 * Display the view	 */	public function display($tpl = null)	{		$this->items		= $this->get('Items');		$this->pagination	= $this->get('Pagination');		$this->state		= $this->get('State');		NewsfeedsHelper::addSubmenu('newsfeeds');		// Check for errors.		if (count($errors = $this->get('Errors')))		{			JError::raiseError(500, implode("\n", $errors));			return false;		}		$this->addToolbar();		$this->sidebar = JHtmlSidebar::render();		parent::display($tpl);	}	/**	 * Add the page title and toolbar.	 *	 * @since   1.6	 */	protected function addToolbar()	{		$state	= $this->get('State');		$canDo	= NewsfeedsHelper::getActions($state->get('filter.category_id'));		$user	= JFactory::getUser();		// Get the toolbar object instance		$bar = JToolBar::getInstance('toolbar');		JToolbarHelper::title(JText::_('COM_NEWSFEEDS_MANAGER_NEWSFEEDS'), 'newsfeeds.png');		if (count($user->getAuthorisedCategories('com_newsfeeds', 'core.create')) > 0)		{			JToolbarHelper::addNew('newsfeed.add');		}		if ($canDo->get('core.edit'))		{			JToolbarHelper::editList('newsfeed.edit');		}		if ($canDo->get('core.edit.state'))		{			JToolbarHelper::publish('newsfeeds.publish', 'JTOOLBAR_PUBLISH', true);			JToolbarHelper::unpublish('newsfeeds.unpublish', 'JTOOLBAR_UNPUBLISH', true);			JToolbarHelper::archiveList('newsfeeds.archive');		}		if ($canDo->get('core.admin'))		{			JToolbarHelper::checkin('newsfeeds.checkin');			}		if ($state->get('filter.published') == -2 && $canDo->get('core.delete'))		{			JToolbarHelper::deleteList('', 'newsfeeds.delete', 'JTOOLBAR_EMPTY_TRASH');		} elseif ($canDo->get('core.edit.state'))		{			JToolbarHelper::trash('newsfeeds.trash');		}		// Add a batch button		if ($user->authorise('core.edit'))		{			JHtml::_('bootstrap.modal', 'collapseModal');			$title = JText::_('JTOOLBAR_BATCH');			$dhtml = "<button data-toggle=\"modal\" data-target=\"#collapseModal\" class=\"btn btn-small\">						<i class=\"icon-checkbox-partial\" title=\"$title\"></i>						$title</button>";			$bar->appendButton('Custom', $dhtml, 'batch');		}		if ($canDo->get('core.admin'))		{			JToolbarHelper::preferences('com_newsfeeds');		}		JToolbarHelper::help('JHELP_COMPONENTS_NEWSFEEDS_FEEDS');		JHtmlSidebar::setAction('index.php?option=com_newsfeeds&view=newsfeeds');		JHtmlSidebar::addFilter(			JText::_('JOPTION_SELECT_PUBLISHED'),			'filter_published',			JHtml::_('select.options', JHtml::_('jgrid.publishedOptions'), 'value', 'text', $this->state->get('filter.published'), true)		);		JHtmlSidebar::addFilter(			JText::_('JOPTION_SELECT_CATEGORY'),			'filter_category_id',			JHtml::_('select.options', JHtml::_('category.options', 'com_newsfeeds'), 'value', 'text', $this->state->get('filter.category_id'))		);		JHtmlSidebar::addFilter(			JText::_('JOPTION_SELECT_ACCESS'),			'filter_access',			JHtml::_('select.options', JHtml::_('access.assetgroups'), 'value', 'text', $this->state->get('filter.access'))		);		JHtmlSidebar::addFilter(			JText::_('JOPTION_SELECT_LANGUAGE'),			'filter_language',			JHtml::_('select.options', JHtml::_('contentlanguage.existing', true, true), 'value', 'text', $this->state->get('filter.language'))		);		JHtmlSidebar::addFilter(		'-' . JText::_('JSELECT') . ' ' . JText::_('JTAG') . '-',		'filter_tag',		JHtml::_('select.options', JHtml::_('tag.options', true, true), 'value', 'text', $this->state->get('filter.tag'))		);	}	/**	 * Returns an array of fields the table can be sorted by	 *	 * @return  array  Array containing the field name to sort by as the key and display text as value	 *	 * @since   3.0	 */	protected function getSortFields()	{		return array(			'a.ordering' => JText::_('JGRID_HEADING_ORDERING'),			'a.published' => JText::_('JSTATUS'),			'a.name' => JText::_('JGLOBAL_TITLE'),			'category_title' => JText::_('JCATEGORY'),			'a.access' => JText::_('JGRID_HEADING_ACCESS'),			'numarticles' => JText::_('COM_NEWSFEEDS_NUM_ARTICLES_HEADING'),			'a.cache_time' => JText::_('COM_NEWSFEEDS_CACHE_TIME_HEADING'),			'a.language' => JText::_('JGRID_HEADING_LANGUAGE'),			'a.id' => JText::_('JGRID_HEADING_ID')		);	}}
<?php/** * @package     Joomla.Platform * @subpackage  Feed * * @copyright   Copyright (C) 2005 - 2012 Open Source Matters, Inc. All rights reserved. * @license     GNU General Public License version 2 or later; see LICENSE */defined('JPATH_PLATFORM') or die;/** * RSS Feed Parser class. * * @package     Joomla.Platform * @subpackage  Feed * @link        http://cyber.law.harvard.edu/rss/rss.html * @since       12.3 */class JFeedParserRss extends JFeedParser{	/**	 * @var    string  The feed element name for the entry elements.	 * @since  12.3	 */	protected $entryElementName = 'item';	/**	 * @var    string  The feed format version.	 * @since  12.3	 */	protected $version;	/**	 * Method to handle the <category> element for the feed.	 *	 * @param   JFeed             $feed  The JFeed object being built from the parsed feed.	 * @param   SimpleXMLElement  $el    The current XML element object to handle.	 *	 * @return  void	 *	 * @since   12.3	 */	protected function handleCategory(JFeed $feed, SimpleXMLElement $el)	{		// Get the data from the element.		$domain    = (string) $el['domain'];		$category  = (string) $el;		$feed->addCategory($category, $domain);	}	/**	 * Method to handle the <cloud> element for the feed.	 *	 * @param   JFeed             $feed  The JFeed object being built from the parsed feed.	 * @param   SimpleXMLElement  $el    The current XML element object to handle.	 *	 * @return  void	 *	 * @since   12.3	 */	protected function handleCloud(JFeed $feed, SimpleXMLElement $el)	{		$cloud = new stdClass;		$cloud->domain            = (string) $el['domain'];		$cloud->port              = (string) $el['port'];		$cloud->path              = (string) $el['path'];		$cloud->protocol          = (string) $el['protocol'];		$cloud->registerProcedure = (string) $el['registerProcedure'];		$feed->cloud = $cloud;	}	/**	 * Method to handle the <copyright> element for the feed.	 *	 * @param   JFeed             $feed  The JFeed object being built from the parsed feed.	 * @param   SimpleXMLElement  $el    The current XML element object to handle.	 *	 * @return  void	 *	 * @since   12.3	 */	protected function handleCopyright(JFeed $feed, SimpleXMLElement $el)	{		$feed->copyright = (string) $el;	}	/**	 * Method to handle the <description> element for the feed.	 *	 * @param   JFeed             $feed  The JFeed object being built from the parsed feed.	 * @param   SimpleXMLElement  $el    The current XML element object to handle.	 *	 * @return  void	 *	 * @since   12.3	 */	protected function handleDescription(JFeed $feed, SimpleXMLElement $el)	{		$feed->description = (string) $el;	}	/**	 * Method to handle the <generator> element for the feed.	 *	 * @param   JFeed             $feed  The JFeed object being built from the parsed feed.	 * @param   SimpleXMLElement  $el    The current XML element object to handle.	 *	 * @return  void	 *	 * @since   12.3	 */	protected function handleGenerator(JFeed $feed, SimpleXMLElement $el)	{		$feed->generator = (string) $el;	}	/**	 * Method to handle the <image> element for the feed.	 *	 * @param   JFeed             $feed  The JFeed object being built from the parsed feed.	 * @param   SimpleXMLElement  $el    The current XML element object to handle.	 *	 * @return  void	 *	 * @since   12.3	 */	protected function handleImage(JFeed $feed, SimpleXMLElement $el)	{		// Create a feed link object for the image.		$image = new JFeedLink(			(string) $el->url,			null,			'logo',			null,			(string) $el->title		);		// Populate extra fields if they exist.		$image->link         = (string) $el->link;		$image->description  = (string) $el->description;		$image->height       = (string) $el->height;		$image->width        = (string) $el->width;		$feed->image = $image;	}	/**	 * Method to handle the <language> element for the feed.	 *	 * @param   JFeed             $feed  The JFeed object being built from the parsed feed.	 * @param   SimpleXMLElement  $el    The current XML element object to handle.	 *	 * @return  void	 *	 * @since   12.3	 */	protected function handleLanguage(JFeed $feed, SimpleXMLElement $el)	{		$feed->language = (string) $el;	}	/**	 * Method to handle the <lastBuildDate> element for the feed.	 *	 * @param   JFeed             $feed  The JFeed object being built from the parsed feed.	 * @param   SimpleXMLElement  $el    The current XML element object to handle.	 *	 * @return  void	 *	 * @since   12.3	 */	protected function handleLastBuildDate(JFeed $feed, SimpleXMLElement $el)	{		$feed->updatedDate = (string) $el;	}	/**	 * Method to handle the <link> element for the feed.	 *	 * @param   JFeed             $feed  The JFeed object being built from the parsed feed.	 * @param   SimpleXMLElement  $el    The current XML element object to handle.	 *	 * @return  void	 *	 * @since   12.3	 */	protected function handleLink(JFeed $feed, SimpleXMLElement $el)	{		$feed->uri = (string) $el;	}	/**	 * Method to handle the <managingEditor> element for the feed.	 *	 * @param   JFeed             $feed  The JFeed object being built from the parsed feed.	 * @param   SimpleXMLElement  $el    The current XML element object to handle.	 *	 * @return  void	 *	 * @since   12.3	 */	protected function handleManagingEditor(JFeed $feed, SimpleXMLElement $el)	{		$feed->author = $this->processPerson((string) $el);	}	/**	 * Method to handle the <skipDays> element for the feed.	 *	 * @param   JFeed             $feed  The JFeed object being built from the parsed feed.	 * @param   SimpleXMLElement  $el    The current XML element object to handle.	 *	 * @return  void	 *	 * @since   12.3	 */	protected function handleSkipDays(JFeed $feed, SimpleXMLElement $el)	{		// Initialise the array.		$days = array();		// Add all of the day values from the feed to the array.		foreach ($el->day as $day)		{			$days[] = (string) $day;		}		$feed->skipDays = $days;	}	/**	 * Method to handle the <skipHours> element for the feed.	 *	 * @param   JFeed             $feed  The JFeed object being built from the parsed feed.	 * @param   SimpleXMLElement  $el    The current XML element object to handle.	 *	 * @return  void	 *	 * @since   12.3	 */	protected function handleSkipHours(JFeed $feed, SimpleXMLElement $el)	{		// Initialise the array.		$hours = array();		// Add all of the day values from the feed to the array.		foreach ($el->hour as $hour)		{			$hours[] = (int) $hour;		}		$feed->skipHours = $hours;	}	/**	 * Method to handle the <pubDate> element for the feed.	 *	 * @param   JFeed             $feed  The JFeed object being built from the parsed feed.	 * @param   SimpleXMLElement  $el    The current XML element object to handle.	 *	 * @return  void	 *	 * @since   12.3	 */	protected function handlePubDate(JFeed $feed, SimpleXMLElement $el)	{		$feed->publishedDate = (string) $el;	}	/**	 * Method to handle the <title> element for the feed.	 *	 * @param   JFeed             $feed  The JFeed object being built from the parsed feed.	 * @param   SimpleXMLElement  $el    The current XML element object to handle.	 *	 * @return  void	 *	 * @since   12.3	 */	protected function handleTitle(JFeed $feed, SimpleXMLElement $el)	{		$feed->title = (string) $el;	}	/**	 * Method to handle the <ttl> element for the feed.	 *	 * @param   JFeed             $feed  The JFeed object being built from the parsed feed.	 * @param   SimpleXMLElement  $el    The current XML element object to handle.	 *	 * @return  void	 *	 * @since   12.3	 */	protected function handleTtl(JFeed $feed, SimpleXMLElement $el)	{		$feed->ttl = (integer) $el;	}	/**	 * Method to handle the <webmaster> element for the feed.	 *	 * @param   JFeed             $feed  The JFeed object being built from the parsed feed.	 * @param   SimpleXMLElement  $el    The current XML element object to handle.	 *	 * @return  void	 *	 * @since   12.3	 */	protected function handleWebmaster(JFeed $feed, SimpleXMLElement $el)	{		// Get the tag contents and split it over the first space.		$tmp = (string) $el;		$tmp = explode(' ', $tmp, 2);		// This is really cheap parsing.  Probably need to create a method to do this more robustly.		$name = null;		if (isset($tmp[1]))		{			$name = trim($tmp[1], ' ()');		}		$email = trim($tmp[0]);		$feed->addContributor($name, $email, null, 'webmaster');	}	/**	 * Method to initialise the feed for parsing.  Here we detect the version and advance the stream	 * reader so that it is ready to parse feed elements.	 *	 * @return  void	 *	 * @since   12.3	 */	protected function initialise()	{		// Read the version attribute.		$this->version = $this->stream->getAttribute('version');		// We want to move forward to the first element after the <channel> element.		$this->moveToNextElement('channel');		$this->moveToNextElement();	}	/**	 * Method to handle the feed entry element for the feed: <item>.	 *	 * @param   JFeedEntry        $entry  The JFeedEntry object being built from the parsed feed entry.	 * @param   SimpleXMLElement  $el     The current XML element object to handle.	 *	 * @return  void	 *	 * @since   12.3	 */	protected function processFeedEntry(JFeedEntry $entry, SimpleXMLElement $el)	{		$entry->uri           = (string) $el->link;		$entry->title         = (string) $el->title;		$entry->publishedDate = (string) $el->pubDate;		$entry->updatedDate   = (string) $el->pubDate;		$entry->content       = (string) $el->description;		$entry->guid          = (string) $el->guid;		$entry->comments      = (string) $el->comments;		// Add the feed entry author if available.		$author = (string) $el->author;		if (!empty($author))		{			$entry->author = $this->processPerson($author);		}		// Add any categories to the entry.		foreach ($el->category as $category)		{			$entry->addCategory((string) $category, (string) $category['domain']);		}		// Add any enclosures to the entry.		foreach ($el->enclosure as $enclosure)		{			$link = new JFeedLink(				(string) $enclosure['url'],				null,				(string) $enclosure['type'],				null,				null,				(int) $enclosure['length']			);			$entry->addLink($link);		}	}	/**	 * Method to parse a string with person data and return a JFeedPerson object.	 *	 * @param   string  $data  The string to parse for a person.	 *	 * @return  JFeedPerson	 *	 * @since   12.3	 */	protected function processPerson($data)	{		// Create a new person object.		$person = new JFeedPerson;		// This is really cheap parsing, but so far good enough. :)		$data = explode(' ', $data, 2);		if (isset($data[1]))		{			$person->name = trim($data[1], ' ()');		}		// Set the email for the person.		$person->email = trim($data[0]);		return $person;	}}
<?php/** * @package     Joomla.Administrator * @subpackage  mod_popular * * @copyright   Copyright (C) 2005 - 2013 Open Source Matters, Inc. All rights reserved. * @license     GNU General Public License version 2 or later; see LICENSE.txt */defined('_JEXEC') or die;JHtml::_('bootstrap.tooltip');?><div class="row-striped">	<?php if (count($list)) : ?>		<?php foreach ($list as $i => $item) :			// Calculate popular items			$hits = (int) $item->hits;			$hits_class = $hits >= 100 ? 'important' : $hits >= 25 ? 'warning' : $hits >= 10 ? 'info' : '';		?>			<div class="row-fluid">				<div class="span9">					<span class="badge badge-<?php echo $hits_class;?> hasTooltip" title="<?php echo JText::_('JGLOBAL_HITS');?>"><?php echo $item->hits;?></span>					<?php if ($item->checked_out) : ?>							<?php echo JHtml::_('jgrid.checkedout', $i, $item->editor, $item->checked_out_time); ?>					<?php endif; ?>					<strong class="row-title">						<?php if ($item->link) :?>							<a href="<?php echo $item->link; ?>">								<?php echo htmlspecialchars($item->title, ENT_QUOTES, 'UTF-8');?></a>						<?php else :							echo htmlspecialchars($item->title, ENT_QUOTES, 'UTF-8');						endif; ?>					</strong>				</div>				<div class="span3">					<span class="small"><i class="icon-calendar"></i> <?php echo JHtml::_('date', $item->created, 'Y-m-d'); ?></span>				</div>			</div>		<?php endforeach; ?>	<?php else : ?>		<div class="row-fluid">			<div class="span12">				<div class="alert"><?php echo JText::_('MOD_POPULAR_NO_MATCHING_RESULTS');?></div>			</div>		</div>	<?php endif; ?></div>
<?php/** * @package     Joomla.Administrator * @subpackage  com_joomlaupdate * * @copyright   Copyright (C) 2005 - 2013 Open Source Matters, Inc. All rights reserved. * @license     GNU General Public License version 2 or later; see LICENSE.txt */defined('_JEXEC') or die;/** * Joomla! Update's Update View * * @package     Joomla.Administrator * @subpackage  com_installer * @since       2.5.4 */class JoomlaupdateViewUpdate extends JViewLegacy{	/**	 * Renders the view	 *	 * @param   string  $tpl  Template name	 *	 * @return void	 */	public function display($tpl=null)	{		$password = JFactory::getApplication()->getUserState('com_joomlaupdate.password', null);		$filesize = JFactory::getApplication()->getUserState('com_joomlaupdate.filesize', null);		$ajaxUrl = JURI::base().'components/com_joomlaupdate/restore.php';		$returnUrl = 'index.php?option=com_joomlaupdate&task=update.finalise';		// Set the toolbar information		JToolbarHelper::title(JText::_('COM_JOOMLAUPDATE_OVERVIEW'), 'install');		JToolBarHelper::divider();		JToolBarHelper::help('JHELP_COMPONENTS_JOOMLA_UPDATE');		// Add toolbar buttons		if (JFactory::getUser()->authorise('core.admin', 'com_joomlaupdate'))		{			JToolbarHelper::preferences('com_joomlaupdate');		}		// Load mooTools		JHtml::_('behavior.framework', true);		$updateScript = <<<ENDSCRIPTvar joomlaupdate_password = '$password';var joomlaupdate_totalsize = '$filesize';var joomlaupdate_ajax_url = '$ajaxUrl';var joomlaupdate_return_url = '$returnUrl';ENDSCRIPT;		// Load our Javascript		$document = JFactory::getDocument();		$document->addScript('../media/com_joomlaupdate/json2.js');		$document->addScript('../media/com_joomlaupdate/encryption.js');		$document->addScript('../media/com_joomlaupdate/update.js');		JHtml::_('script', 'system/progressbar.js', true, true);		JHtml::_('stylesheet', 'media/mediamanager.css', array(), true);		$document->addScriptDeclaration($updateScript);		// Render the view		parent::display($tpl);	}}
<?php/** * @package     Joomla.Installation * @subpackage  Model * * @copyright   Copyright (C) 2005 - 2013 Open Source Matters, Inc. All rights reserved. * @license     GNU General Public License version 2 or later; see LICENSE.txt */defined('_JEXEC') or die;jimport('joomla.updater.update');jimport('legacy.application.helper');jimport('legacy.component.helper');/** * Language Installer model for the Joomla Core Installer. * * @package     Joomla.Installation * @subpackage  Model * @since       3.1 */class InstallationModelLanguages extends JModelBase{	/**	 * @var    object  Client object	 * @since  3.1	 */	protected $client = null;	/**	 * @var    array  Languages description	 * @since  3.1	 */	protected $data = null;	/**	 * @var    string  Language path	 * @since  3.1	 */	protected $path = null;	/**	 * @var    integer  Total number of languages installed	 * @since  3.1	 */	protected $langlist = null;	/**	 * Constructor	 *	 * Deletes the default installation config file and recreates it with the good config file.	 *	 * @since  3.1	 */	public function __construct()	{		// Overrides application config and set the configuration.php file so tokens and database works		JFactory::$config = null;		JFactory::getConfig(JPATH_SITE . '/configuration.php');		JFactory::$session = null;		parent::__construct();	}	/**	 * Generate a list of language choices to install in the Joomla CMS	 *	 * @return  boolean  True if successful	 *	 * @since   3.1	 */	public function getItems()	{		$updater = JUpdater::getInstance();		/*		 * The following function uses extension_id 600, that is the English language extension id.		 * In #__update_sites_extensions you should have 600 linked to the Accredited Translations Repo		 */		$updater->findUpdates(array(600), 0);		$db		= JFactory::getDbo();		$query	= $db->getQuery(true);		// Select the required fields from the updates table		$query->select('update_id, name, version')			->from('#__updates')			->order('name');		$db->setQuery($query);		$list = $db->loadObjectList();		if (!$list || $list instanceof Exception)		{			$list = array();		}		return $list;	}	/**	 * Method that installs in Joomla! the selected languages in the Languages View of the installer	 *	 * @param   array  $lids  list of the update_id value of the languages to install	 *	 * @return  boolean True if successful	 */	public function install($lids)	{		/* @var InstallationApplicationWeb $app */		$app       = JFactory::getApplication();		$installer = JInstaller::getInstance();		// Loop through every selected language		foreach ($lids as $id)		{			// Loads the update database object that represents the language			$language = JTable::getInstance('update');			$language->load($id);			// Get the url to the XML manifest file of the selected language			$remote_manifest = $this->getLanguageManifest($id);			if (!$remote_manifest)			{				// Could not find the url, the information in the update server may be corrupt				$message = JText::sprintf('INSTL_DEFAULTLANGUAGE_COULD_NOT_INSTALL_LANGUAGE', $language->name);				$message .= ' ' . JText::_('INSTL_DEFAULTLANGUAGE_TRY_LATER');				$app->enqueueMessage($message);				continue;			}			// Based on the language XML manifest get the url of the package to download			$package_url = $this->getPackageUrl($remote_manifest);			if (!$package_url)			{				// Could not find the url , maybe the url is wrong in the update server, or there is not internet access				$message = JText::sprintf('INSTL_DEFAULTLANGUAGE_COULD_NOT_INSTALL_LANGUAGE', $language->name);				$message .= ' ' . JText::_('INSTL_DEFAULTLANGUAGE_TRY_LATER');				$app->enqueueMessage($message);				continue;			}			// Download the package to the tmp folder			$package = $this->downloadPackage($package_url);			// Install the package			if (!$installer->install($package['dir']))			{				// There was an error installing the package				$message = JText::sprintf('INSTL_DEFAULTLANGUAGE_COULD_NOT_INSTALL_LANGUAGE', $language->name);				$message .= ' ' . JText::_('INSTL_DEFAULTLANGUAGE_TRY_LATER');				$app->enqueueMessage($message);				continue;			}			// Cleanup the install files in tmp folder			if (!is_file($package['packagefile']))			{				$config = JFactory::getConfig();				$package['packagefile'] = $config->get('tmp_path') . '/' . $package['packagefile'];			}			JInstallerHelper::cleanupInstall($package['packagefile'], $package['extractdir']);			// Delete the installed language from the list			$language->delete($id);		}		return true;	}	/**	 * Gets the manifest file of a selected language from a the language list in a update server.	 *	 * @param   integer  $uid  The id of the language in the #__updates table	 *	 * @return  string	 *	 * @since   3.1	 */	protected function getLanguageManifest($uid)	{		$instance = JTable::getInstance('update');		$instance->load($uid);		$detailurl = trim($instance->detailsurl);		return $detailurl;	}	/**	 * Finds the url of the package to download.	 *	 * @param   string  $remote_manifest  url to the manifest XML file of the remote package	 *	 * @return  string|bool	 *	 * @since   3.1	 */	protected function getPackageUrl($remote_manifest)	{		$update = new JUpdate;		$update->loadFromXML($remote_manifest);		$package_url = trim($update->get('downloadurl', false)->_data);		return $package_url;	}	/**	 * Download a language package from a URL and unpack it in the tmp folder.	 *	 * @param   string  $url  url of the package	 *	 * @return  array|bool Package details or false on failure	 *	 * @since   3.1	 */	protected function downloadPackage($url)	{		// Download the package from the given URL		$p_file = JInstallerHelper::downloadPackage($url);		// Was the package downloaded?		if (!$p_file)		{			JFactory::getApplication()->enqueueMessage(JText::_('COM_INSTALLER_MSG_INSTALL_INVALID_URL'), 'warning');			return false;		}		$config		= JFactory::getConfig();		$tmp_dest	= $config->get('tmp_path');		// Unpack the downloaded package file		$package = JInstallerHelper::unpack($tmp_dest . '/' . $p_file);		return $package;	}	/**	 * Method to get Languages item data for the Administrator	 *	 * @return  array	 *	 * @since   3.1	 */	public function getInstalledlangsAdministrator()	{		return $this->getInstalledlangs('administrator');	}	/**	 * Method to get Languages item data for the Frontend	 *	 * @return  array	 *	 * @since   3.1	 */	public function getInstalledlangsFrontend()	{		return $this->getInstalledlangs('site');	}	/**	 * Method to get Languages item data	 *	 * @param   string  $cms_client  name of the cms client	 *	 * @return  array	 *	 * @since   3.1	 */	protected function getInstalledlangs($cms_client = 'administrator')	{		// Get information		$path     = $this->getPath();		$client   = $this->getClient($cms_client);		$langlist = $this->getLanguageList($client->id);		// Compute all the languages		$data = array();		foreach ($langlist as $lang)		{			$file = $path . '/' . $lang . '/' . $lang . '.xml';			$info = JInstaller::parseXMLInstallFile($file);			$row = new stdClass;			$row->language = $lang;			if (!is_array($info))			{				continue;			}			foreach ($info as $key => $value)			{				$row->$key = $value;			}			// If current then set published			$params = JComponentHelper::getParams('com_languages');			if ($params->get($client->name, 'en-GB') == $row->language)			{				$row->published	= 1;			}			else			{				$row->published = 0;			}			$row->checked_out = 0;			$data[] = $row;		}		usort($data, array($this, 'compareLanguages'));		return $data;	}	/**	 * Method to get installed languages data.	 *	 * @param   integer  $client_id  The client ID to retrieve data for	 *	 * @return  object  The language data	 *	 * @since   3.1	 */	protected function getLanguageList($client_id = 1)	{		// Create a new db object.		$db = JFactory::getDbo();		$query = $db->getQuery(true);		// Select field element from the extensions table.		$query->select('a.element, a.name')			->from('#__extensions AS a')			->where('a.type = ' . $db->quote('language'))			->where('state = 0')			->where('enabled = 1')			->where('client_id=' . (int) $client_id);		$db->setQuery($query);		$this->langlist = $db->loadColumn();		return $this->langlist;	}	/**	 * Method to compare two languages in order to sort them	 *	 * @param   object  $lang1  the first language	 * @param   object  $lang2  the second language	 *	 * @return  integer	 *	 * @since   3.1	 */	protected function compareLanguages($lang1, $lang2)	{		return strcmp($lang1->name, $lang2->name);	}	/**	 * Method to get the path	 *	 * @return  string  The path to the languages folders	 *	 * @since   3.1	 */	protected function getPath()	{		if (is_null($this->path))		{			$client = $this->getClient();			$this->path = JLanguage::getLanguagePath($client->path);		}		return $this->path;	}	/**	 * Method to get the client object of Administrator or FrontEnd	 *	 * @param   string  $client  name of the client object	 *	 * @return  object	 *	 * @since   3.1	 */	protected function getClient($client = 'administrator')	{		$this->client = JApplicationHelper::getClientInfo($client, true);		return $this->client;	}	/**	 * Method to set the default language.	 *	 * @param   string  $language    The language to be set as default	 * @param   string  $cms_client  The name of the CMS client	 *	 * @return  boolean	 *	 * @since   3.1	 */	public function setDefault($language, $cms_client = 'administrator')	{		// Get the application		/* @var InstallationApplicationWeb $app */		$app = JFactory::getApplication();		$client	= $this->getClient($cms_client);		$params = JComponentHelper::getParams('com_languages');		$params->set($client->name, $language);		$table = JTable::getInstance('extension');		$id    = $table->find(array('element' => 'com_languages'));		// Load		if (!$table->load($id))		{			$app->enqueueMessage($table->getError(), 'warning');			return false;		}		$table->params = (string) $params;		// Pre-save checks		if (!$table->check())		{			$app->enqueueMessage($table->getError(), 'warning');			return false;		}		// Save the changes		if (!$table->store())		{			$app->enqueueMessage($table->getError(), 'warning');			return false;		}		return true;	}	/**	 * Get the current setup options from the session.	 *	 * @return  array	 *	 * @since   3.1	 */	public function getOptions()	{		$session = JFactory::getSession();		$options = $session->get('setup.options', array());		return $options;	}}
<?php/** * @package     Joomla.Administrator * @subpackage  com_content * * @copyright   Copyright (C) 2005 - 2013 Open Source Matters, Inc. All rights reserved. * @license     GNU General Public License version 2 or later; see LICENSE.txt */defined('_JEXEC') or die;/** * Content component helper. * * @package     Joomla.Administrator * @subpackage  com_content * @since       1.6 */class ContentHelper{	public static $extension = 'com_content';	/**	 * Configure the Linkbar.	 *	 * @param   string	$vName	The name of the active view.	 *	 * @return  void	 * @since   1.6	 */	public static function addSubmenu($vName)	{		JHtmlSidebar::addEntry(			JText::_('JGLOBAL_ARTICLES'),			'index.php?option=com_content&view=articles',			$vName == 'articles'		);		JHtmlSidebar::addEntry(			JText::_('COM_CONTENT_SUBMENU_CATEGORIES'),			'index.php?option=com_categories&extension=com_content',			$vName == 'categories');		JHtmlSidebar::addEntry(			JText::_('COM_CONTENT_SUBMENU_FEATURED'),			'index.php?option=com_content&view=featured',			$vName == 'featured'		);	}	/**	 * Gets a list of the actions that can be performed.	 *	 * @param   integer  The category ID.	 * @param   integer  The article ID.	 *	 * @return  JObject	 * @since   1.6	 */	public static function getActions($categoryId = 0, $articleId = 0)	{		// Reverted a change for version 2.5.6		$user	= JFactory::getUser();		$result	= new JObject;		if (empty($articleId) && empty($categoryId))		{			$assetName = 'com_content';		}		elseif (empty($articleId))		{			$assetName = 'com_content.category.'.(int) $categoryId;		}		else		{			$assetName = 'com_content.article.'.(int) $articleId;		}		$actions = array(			'core.admin', 'core.manage', 'core.create', 'core.edit', 'core.edit.own', 'core.edit.state', 'core.delete'		);		foreach ($actions as $action)		{			$result->set($action,	$user->authorise($action, $assetName));		}		return $result;	}	/**	 * Applies the content tag filters to arbitrary text as per settings for current user group	 *	 * @param   text  $text  The string to filter	 *	 * @return  string  The filtered string	 *	 * @deprecated  4.0  Use JComponentHelper::filterText() instead.	*/	public static function filterText($text)	{		JLog::add('ContentHelper::filterText() is deprecated. Use JComponentHelper::filterText() instead.', JLog::WARNING, 'deprecated');		return JComponentHelper::filterText($text);	}}
<?php/** * @package    Joomla.Language * * @copyright  Copyright (C) 2005 - 2013 Open Source Matters, Inc. All rights reserved. * @license    GNU General Public License version 2 or later; see LICENSE.txt */defined('_JEXEC') or die;/** * en-GB localise class * * @package  Joomla.Language * @since    1.6 */abstract class En_GBLocalise{	/**	 * Returns the potential suffixes for a specific number of items	 *	 * @param   int $count  The number of items.	 * @return  array  An array of potential suffixes.	 * @since   1.6	 */	public static function getPluralSuffixes($count)	{		if ($count == 0)		{			$return = array('0');		}		elseif ($count == 1)		{			$return = array('1');		}		else		{			$return = array('MORE');		}		return $return;	}	/**	 * Returns the ignored search words	 *	 * @return  array  An array of ignored search words.	 * @since   1.6	 */	public static function getIgnoredSearchWords()	{		$search_ignore = array();		$search_ignore[] = "and";		$search_ignore[] = "in";		$search_ignore[] = "on";		return $search_ignore;	}	/**	 * Returns the lower length limit of search words	 *	 * @return  integer  The lower length limit of search words.	 * @since   1.6	 */	public static function getLowerLimitSearchWord()	{		return 3;	}	/**	 * Returns the upper length limit of search words	 *	 * @return  integer  The upper length limit of search words.	 * @since   1.6	 */	public static function getUpperLimitSearchWord()	{		return 20;	}	/**	 * Returns the number of chars to display when searching	 *	 * @return  integer  The number of chars to display when searching.	 * @since   1.6	 */	public static function getSearchDisplayedCharactersNumber()	{		return 200;	}}
<?php/** * @package     Joomla.Administrator * @subpackage  com_content * * @copyright   Copyright (C) 2005 - 2013 Open Source Matters, Inc. All rights reserved. * @license     GNU General Public License version 2 or later; see LICENSE.txt */defined('_JEXEC') or die;/** * @package     Joomla.Administrator * @subpackage  com_content */class ContentViewFeatured extends JViewLegacy{	protected $items;	protected $pagination;	protected $state;	/**	 * Display the view	 */	public function display($tpl = null)	{		ContentHelper::addSubmenu('featured');		$this->items      = $this->get('Items');		$this->pagination = $this->get('Pagination');		$this->state      = $this->get('State');		$this->authors    = $this->get('Authors');		// Check for errors.		if (count($errors = $this->get('Errors')))		{			JError::raiseError(500, implode("\n", $errors));			return false;		}		// Levels filter.		$options	= array();		$options[]	= JHtml::_('select.option', '1', JText::_('J1'));		$options[]	= JHtml::_('select.option', '2', JText::_('J2'));		$options[]	= JHtml::_('select.option', '3', JText::_('J3'));		$options[]	= JHtml::_('select.option', '4', JText::_('J4'));		$options[]	= JHtml::_('select.option', '5', JText::_('J5'));		$options[]	= JHtml::_('select.option', '6', JText::_('J6'));		$options[]	= JHtml::_('select.option', '7', JText::_('J7'));		$options[]	= JHtml::_('select.option', '8', JText::_('J8'));		$options[]	= JHtml::_('select.option', '9', JText::_('J9'));		$options[]	= JHtml::_('select.option', '10', JText::_('J10'));		$this->f_levels = $options;		$this->addToolbar();		$this->sidebar = JHtmlSidebar::render();		parent::display($tpl);	}	/**	 * Add the page title and toolbar.	 *	 * @since   1.6	 */	protected function addToolbar()	{		$state	= $this->get('State');		$canDo	= ContentHelper::getActions($this->state->get('filter.category_id'));		JToolbarHelper::title(JText::_('COM_CONTENT_FEATURED_TITLE'), 'featured.png');		if ($canDo->get('core.create'))		{			JToolbarHelper::addNew('article.add');		}		if ($canDo->get('core.edit'))		{			JToolbarHelper::editList('article.edit');		}		if ($canDo->get('core.edit.state'))		{			JToolbarHelper::publish('articles.publish', 'JTOOLBAR_PUBLISH', true);			JToolbarHelper::unpublish('articles.unpublish', 'JTOOLBAR_UNPUBLISH', true);			JToolbarHelper::custom('featured.delete', 'remove.png', 'remove_f2.png', 'JTOOLBAR_REMOVE', true);			JToolbarHelper::archiveList('articles.archive');			JToolbarHelper::checkin('articles.checkin');		}		if ($state->get('filter.published') == -2 && $canDo->get('core.delete'))		{			JToolbarHelper::deleteList('', 'articles.delete', 'JTOOLBAR_EMPTY_TRASH');		} elseif ($canDo->get('core.edit.state'))		{			JToolbarHelper::trash('articles.trash');		}		if ($canDo->get('core.admin'))		{			JToolbarHelper::preferences('com_content');		}		JToolbarHelper::help('JHELP_CONTENT_FEATURED_ARTICLES');		JHtmlSidebar::setAction('index.php?option=com_content&view=featured');		JHtmlSidebar::addFilter(			JText::_('JOPTION_SELECT_PUBLISHED'),			'filter_published',			JHtml::_('select.options', JHtml::_('jgrid.publishedOptions'), 'value', 'text', $this->state->get('filter.published'), true)		);		JHtmlSidebar::addFilter(			JText::_('JOPTION_SELECT_CATEGORY'),			'filter_category_id',			JHtml::_('select.options', JHtml::_('category.options', 'com_content'), 'value', 'text', $this->state->get('filter.category_id'))		);		JHtmlSidebar::addFilter(			JText::_('JOPTION_SELECT_MAX_LEVELS'),			'filter_level',			JHtml::_('select.options', $this->f_levels, 'value', 'text', $this->state->get('filter.level'))		);		JHtmlSidebar::addFilter(			JText::_('JOPTION_SELECT_ACCESS'),			'filter_access',			JHtml::_('select.options', JHtml::_('access.assetgroups'), 'value', 'text', $this->state->get('filter.access'))		);		JHtmlSidebar::addFilter(			JText::_('JOPTION_SELECT_AUTHOR'),			'filter_author_id',			JHtml::_('select.options', $this->authors, 'value', 'text', $this->state->get('filter.author_id'))		);		JHtmlSidebar::addFilter(			JText::_('JOPTION_SELECT_LANGUAGE'),			'filter_language',			JHtml::_('select.options', JHtml::_('contentlanguage.existing', true, true), 'value', 'text', $this->state->get('filter.language'))		);	}	/**	 * Returns an array of fields the table can be sorted by	 *	 * @return  array  Array containing the field name to sort by as the key and display text as value	 *	 * @since   3.0	 */	protected function getSortFields()	{		return array(			'fp.ordering' => JText::_('JGRID_HEADING_ORDERING'),			'a.state' => JText::_('JSTATUS'),			'a.title' => JText::_('JGLOBAL_TITLE'),			'category_title' => JText::_('JCATEGORY'),			'access_level' => JText::_('JGRID_HEADING_ACCESS'),			'a.created_by' => JText::_('JAUTHOR'),			'language' => JText::_('JGRID_HEADING_LANGUAGE'),			'a.created' => JText::_('JDATE'),			'a.id' => JText::_('JGRID_HEADING_ID')		);	}}
<?php/** * @package     Joomla.Administrator * @subpackage  com_users * * @copyright   Copyright (C) 2005 - 2013 Open Source Matters, Inc. All rights reserved. * @license     GNU General Public License version 2 or later; see LICENSE.txt */defined('_JEXEC') or die;/** * Extended Utility class for the Users component. * * @package     Joomla.Administrator * @subpackage  com_users * @since       2.5 */class JHtmlUsers{	/**	 * Display an image.	 *	 * @param   string  $src  The source of the image	 *	 * @return  string  A <img> element if the specified file exists, otherwise, a null string	 *	 * @since   2.5	 */	public static function image($src)	{		$src = preg_replace('#[^A-Z0-9\-_\./]#i', '', $src);		$file = JPATH_SITE . '/' . $src;		jimport('joomla.filesystem.path');		JPath::check($file);		if (!file_exists($file))		{			return '';		}		return '<img src="' . JUri::root() . $src . '" alt="" />';	}	/**	 * Displays an icon to add a note for this user.	 *	 * @param   integer  $userId  The user ID	 *	 * @return  string  A link to add a note	 *	 * @since   2.5	 */	public static function addNote($userId)	{		$title = JText::_('COM_USERS_ADD_NOTE');		return '<a href="' . JRoute::_('index.php?option=com_users&task=note.add&u_id=' . (int) $userId) . '">'			. '<span class="label label-info"><i class="icon-vcard"></i>' . $title . '</span></a>';	}	/**	 * Displays an icon to filter the notes list on this user.	 *	 * @param   integer  $count   The number of notes for the user	 * @param   integer  $userId  The user ID	 *	 * @return  string  A link to apply a filter	 *	 * @since   2.5	 */	public static function filterNotes($count, $userId)	{		if (empty($count))		{			return '';		}		$title = JText::_('COM_USERS_FILTER_NOTES');		return '<a href="' . JRoute::_('index.php?option=com_users&view=notes&filter_search=uid:' . (int) $userId) . '">'			. JHtml::_('image', 'admin/filter_16.png', 'COM_USERS_NOTES', array('title' => $title), true) . '</a>';	}	/**	 * Displays a note icon.	 *	 * @param   integer  $count   The number of notes for the user	 * @param   integer  $userId  The user ID	 *	 * @return  string  A link to a modal window with the user notes	 *	 * @since   2.5	 */	public static function notes($count, $userId)	{		if (empty($count))		{			return '';		}		$title = JText::plural('COM_USERS_N_USER_NOTES', $count);		return '<a class="modal"'			. ' href="' . JRoute::_('index.php?option=com_users&view=notes&tmpl=component&layout=modal&u_id=' . (int) $userId) . '"'			. ' rel="{handler: \'iframe\', size: {x: 800, y: 450}}">'			. '<span class="label label-info"><i class="icon-drawer-2"></i>' . $title . '</span></a>';	}	/**	 * Build an array of block/unblock user states to be used by jgrid.state,	 * State options will be different for any user	 * and for currently logged in user	 *	 * @param   boolean  $self  True if state array is for currently logged in user	 *	 * @return  array  a list of possible states to display	 *	 * @since  3.0	 */	public static function blockStates( $self = false)	{		if ($self)		{			$states = array(				1 => array(					'task'				=> 'unblock',					'text'				=> '',					'active_title'		=> 'COM_USERS_USER_FIELD_BLOCK_DESC',					'inactive_title'	=> '',					'tip'				=> true,					'active_class'		=> 'unpublish',					'inactive_class'	=> 'unpublish'				),				0 => array(					'task'				=> 'block',					'text'				=> '',					'active_title'		=> '',					'inactive_title'	=> 'COM_USERS_USERS_ERROR_CANNOT_BLOCK_SELF',					'tip'				=> true,					'active_class'		=> 'publish',					'inactive_class'	=> 'publish'				)			);		}		else		{			$states = array(				1 => array(					'task'				=> 'unblock',					'text'				=> '',					'active_title'		=> 'COM_USERS_TOOLBAR_UNBLOCK',					'inactive_title'	=> '',					'tip'				=> true,					'active_class'		=> 'unpublish',					'inactive_class'	=> 'unpublish'				),				0 => array(					'task'				=> 'block',					'text'				=> '',					'active_title'		=> 'COM_USERS_USER_FIELD_BLOCK_DESC',					'inactive_title'	=> '',					'tip'				=> true,					'active_class'		=> 'publish',					'inactive_class'	=> 'publish'				)			);		}		return $states;	}	/**	 * Build an array of activate states to be used by jgrid.state,	 *	 * @return  array  a list of possible states to display	 *	 * @since  3.0	 */	public static function activateStates()	{		$states = array(			1	=> array(				'task'				=> 'activate',				'text'				=> '',				'active_title'		=> 'COM_USERS_TOOLBAR_ACTIVATE',				'inactive_title'	=> '',				'tip'				=> true,				'active_class'		=> 'unpublish',				'inactive_class'	=> 'unpublish'			),			0	=> array(				'task'				=> '',				'text'				=> '',				'active_title'		=> '',				'inactive_title'	=> 'COM_USERS_ACTIVATED',				'tip'				=> true,				'active_class'		=> 'publish',				'inactive_class'	=> 'publish'			)		);		return $states;	}}
<?php/** * @package     Joomla.Administrator * @subpackage  com_menus * * @copyright   Copyright (C) 2005 - 2013 Open Source Matters, Inc. All rights reserved. * @license     GNU General Public License version 2 or later; see LICENSE.txt */defined('JPATH_BASE') or die;JFormHelper::loadFieldClass('list');/** * Form Field class for the Joomla Framework. * * @package     Joomla.Administrator * @subpackage  com_menus * @since       1.6 */class JFormFieldMenutype extends JFormFieldList{	/**	 * The form field type.	 *	 * @var		string	 * @since   1.6	 */	protected $type = 'menutype';	/**	 * Method to get the field input markup.	 *	 * @return  string	The field input markup.	 * @since   1.6	 */	protected function getInput()	{		$html 		= array();		$recordId	= (int) $this->form->getValue('id');		$size		= ($v = $this->element['size']) ? ' size="'.$v.'"' : '';		$class		= ($v = $this->element['class']) ? ' class="'.$v.'"' : 'class="text_area"';		// Get a reverse lookup of the base link URL to Title		$model 	= JModelLegacy::getInstance('menutypes', 'menusModel');		$rlu 	= $model->getReverseLookup();		switch ($this->value)		{			case 'url':				$value = JText::_('COM_MENUS_TYPE_EXTERNAL_URL');				break;			case 'alias':				$value = JText::_('COM_MENUS_TYPE_ALIAS');				break;			case 'separator':				$value = JText::_('COM_MENUS_TYPE_SEPARATOR');				break;			case 'heading':				$value = JText::_('COM_MENUS_TYPE_HEADING');				break;			default:				$link	= $this->form->getValue('link');				// Clean the link back to the option, view and layout				$value	= JText::_(JArrayHelper::getValue($rlu, MenusHelper::getLinkKey($link)));				break;		}		// Load the javascript and css		JHtml::_('behavior.framework');		JHtml::_('behavior.modal');		$html[] = '<span class="input-append"><input type="text" readonly="readonly" disabled="disabled" value="'.$value.'"'.$size.$class.' /><a class="btn btn-primary" onclick="SqueezeBox.fromElement(this, {handler:\'iframe\', size: {x: 600, y: 450}, url:\''.JRoute::_('index.php?option=com_menus&view=menutypes&tmpl=component&recordId='.$recordId).'\'})"><i class="icon-list icon-white"></i> '.JText::_('JSELECT').'</a></span>';		$html[] = '<input class="input-small" type="hidden" name="' . $this->name . '" value="'.htmlspecialchars($this->value, ENT_COMPAT, 'UTF-8') . '" />';		return implode("\n", $html);	}}
<?php/** * @package     Joomla.Administrator * @subpackage  com_weblinks * * @copyright   Copyright (C) 2005 - 2013 Open Source Matters, Inc. All rights reserved. * @license     GNU General Public License version 2 or later; see LICENSE.txt */defined('_JEXEC') or die;/** * View to edit a weblink. * * @package     Joomla.Administrator * @subpackage  com_weblinks * @since       1.5 */class WeblinksViewWeblink extends JViewLegacy{	protected $state;	protected $item;	protected $form;	/**	 * Display the view	 */	public function display($tpl = null)	{		$this->state	= $this->get('State');		$this->item		= $this->get('Item');		$this->form		= $this->get('Form');		// Check for errors.		if (count($errors = $this->get('Errors')))		{			JError::raiseError(500, implode("\n", $errors));			return false;		}		$this->addToolbar();		parent::display($tpl);	}	/**	 * Add the page title and toolbar.	 *	 * @since   1.6	 */	protected function addToolbar()	{		JFactory::getApplication()->input->set('hidemainmenu', true);		$user		= JFactory::getUser();		$userId		= $user->get('id');		$isNew		= ($this->item->id == 0);		$checkedOut	= !($this->item->checked_out == 0 || $this->item->checked_out == $user->get('id'));		// Since we don't track these assets at the item level, use the category id.		$canDo		= WeblinksHelper::getActions($this->item->catid, 0);		JToolbarHelper::title(JText::_('COM_WEBLINKS_MANAGER_WEBLINK'), 'weblinks.png');		// If not checked out, can save the item.		if (!$checkedOut && ($canDo->get('core.edit')||(count($user->getAuthorisedCategories('com_weblinks', 'core.create')))))		{			JToolbarHelper::apply('weblink.apply');			JToolbarHelper::save('weblink.save');		}		if (!$checkedOut && (count($user->getAuthorisedCategories('com_weblinks', 'core.create')))){			JToolbarHelper::save2new('weblink.save2new');		}		// If an existing item, can save to a copy.		if (!$isNew && (count($user->getAuthorisedCategories('com_weblinks', 'core.create')) > 0))		{			JToolbarHelper::save2copy('weblink.save2copy');		}		if (empty($this->item->id))		{			JToolbarHelper::cancel('weblink.cancel');		}		else		{			JToolbarHelper::cancel('weblink.cancel', 'JTOOLBAR_CLOSE');		}		JToolbarHelper::divider();		JToolbarHelper::help('JHELP_COMPONENTS_WEBLINKS_LINKS_EDIT');	}}
<?php/** * @package     Joomla.Administrator * @subpackage  com_templates * * @copyright   Copyright (C) 2005 - 2013 Open Source Matters, Inc. All rights reserved. * @license     GNU General Public License version 2 or later; see LICENSE.txt */defined('_JEXEC') or die;// Include the component HTML helpers.JHtml::addIncludePath(JPATH_COMPONENT.'/helpers/html');JHtml::_('behavior.tooltip');JHtml::_('behavior.modal');$canDo = TemplatesHelper::getActions();$input = JFactory::getApplication()->input;?><form action="<?php echo JRoute::_('index.php?option=com_templates&view=templates'); ?>" method="post" name="adminForm" id="adminForm">	<div class="width-50 fltlft">		<fieldset class="adminform" id="template-manager">			<legend><?php echo JText::_('COM_TEMPLATES_TEMPLATE_DESCRIPTION');?></legend>			<?php echo JHtml::_('templates.thumb', $this->template->element, $this->template->client_id); ?>			<h2><?php echo ucfirst($this->template->element); ?></h2>			<?php $client = JApplicationHelper::getClientInfo($this->template->client_id); ?>			<p><?php $this->template->xmldata = TemplatesHelper::parseXMLTemplateFile($client->path, $this->template->element);?></p>			<p><?php  echo JText::_($this->template->xmldata->description); ?></p>		</fieldset>		<fieldset class="adminform" id="template-manager">			<legend><?php echo JText::_('COM_TEMPLATES_TEMPLATE_MASTER_FILES');?></legend>			<ul>				<li>					<?php $id = $this->files['main']['index']->id; ?>					<?php if ($canDo->get('core.edit')) : ?>					<a href="<?php echo JRoute::_('index.php?option=com_templates&task=source.edit&id='.$id);?>">					<?php endif; ?>						<?php echo JText::_('COM_TEMPLATES_TEMPLATE_EDIT_MAIN');?>					<?php if ($canDo->get('core.edit')) : ?>						</a>					<?php endif; ?>				</li>				<?php if ($this->files['main']['error']->exists) : ?>				<li>					<?php $id = $this->files['main']['error']->id; ?>					<?php if ($canDo->get('core.edit')) : ?>						<a href="<?php echo JRoute::_('index.php?option=com_templates&task=source.edit&id='.$id);?>">					<?php endif; ?>						<?php echo JText::_('COM_TEMPLATES_TEMPLATE_EDIT_ERROR');?>					<?php if ($canDo->get('core.edit')) : ?>						</a>					<?php endif; ?>				</li>				<?php endif; ?>				<?php if ($this->files['main']['offline']->exists) : ?>					<li>						<?php $id = $this->files['main']['offline']->id; ?>						<?php if ($canDo->get('core.edit')) : ?>							<a href="<?php echo JRoute::_('index.php?option=com_templates&task=source.edit&id='.$id);?>">						<?php endif; ?>						<?php echo JText::_('COM_TEMPLATES_TEMPLATE_EDIT_OFFLINEVIEW');?>						<?php if ($canDo->get('core.edit')) : ?>							</a>						<?php endif; ?>					</li>				<?php endif; ?>				<?php if ($this->files['main']['print']->exists) : ?>				<li>					<?php $id = $this->files['main']['print']->id; ?>					<?php if ($canDo->get('core.edit')) : ?>						<a href="<?php echo JRoute::_('index.php?option=com_templates&task=source.edit&id='.$id);?>">					<?php endif; ?>						<?php echo JText::_('COM_TEMPLATES_TEMPLATE_EDIT_PRINTVIEW');?>					<?php if ($canDo->get('core.edit')) : ?>						</a>					<?php endif; ?>				</li>				<?php endif; ?>			</ul>		</fieldset>		<div class="clr"></div>	</div>	<div class="width-50 fltrt">		<fieldset class="adminform" id="template-manager-css">			<legend><?php echo JText::_('COM_TEMPLATES_TEMPLATE_CSS');?></legend>			<?php if (!empty($this->files['css'])) : ?>			<ul>				<?php foreach ($this->files['css'] as $file) : ?>				<li>					<?php if ($canDo->get('core.edit')) : ?>					<a href="<?php echo JRoute::_('index.php?option=com_templates&task=source.edit&id='.$file->id);?>">					<?php endif; ?>						<?php echo JText::sprintf('COM_TEMPLATES_TEMPLATE_EDIT_CSS', $file->name);?>					<?php if ($canDo->get('core.edit')) : ?>					</a>					<?php endif; ?>				</li>				<?php endforeach; ?>			</ul>			<?php endif; ?>			<!--<div>				<a href="#" class="modal">					<?php echo JText::sprintf('COM_TEMPLATES_TEMPLATE_ADD_CSS');?></a>			</div>-->		</fieldset>		<div class="clr"></div>		<input type="hidden" name="task" value="" />	</div><div class="width-50 fltrt"></form><form action="<?php echo JRoute::_('index.php?option=com_templates&task=template.copy&id=' . $input->getInt('id')); ?>"		method="post" name="adminForm" id="adminForm">	<fieldset class="adminform" id="template-manager-css">		<legend><?php echo JText::_('COM_TEMPLATES_TEMPLATE_COPY');?></legend>		<label id="new_name" class="hasTip"  title="<?php echo JText::_('COM_TEMPLATES_TEMPLATE_NEW_NAME_DESC'); ?>"><?php echo JText::_('COM_TEMPLATES_TEMPLATE_NEW_NAME_LABEL')?></label>		<input class="inputbox" type="text" id="new_name" name="new_name"  />		<button type="submit"><?php echo JText::_('COM_TEMPLATES_TEMPLATE_COPY'); ?></button>	</fieldset>	<?php echo JHtml::_('form.token'); ?></form></div>
<?php/** * @package     Joomla.Administrator * @subpackage  com_templates * * @copyright   Copyright (C) 2005 - 2013 Open Source Matters, Inc. All rights reserved. * @license     GNU General Public License version 2 or later; see LICENSE.txt */defined('_JEXEC') or die;JLoader::register('InstallerModelInstall', JPATH_ADMINISTRATOR . '/components/com_installer/models/install.php');/** * Template style controller class. * * @package     Joomla.Administrator * @subpackage  com_templates * @since       1.6 */class TemplatesControllerTemplate extends JControllerLegacy{	/**	 */	public function cancel()	{		$this->setRedirect('index.php?option=com_templates&view=templates');	}	public function copy()	{		// Check for request forgeries		JSession::checkToken() or jexit(JText::_('JINVALID_TOKEN'));		$app = JFactory::getApplication();		$this->input->set('installtype', 'folder');		$newName    = $this->input->get('new_name');		$newNameRaw = $this->input->get('new_name', null, 'string');		$templateID = $this->input->getInt('id', 0);		$this->setRedirect('index.php?option=com_templates&view=template&id=' . $templateID);		$model = $this->getModel('Template', 'TemplatesModel');		$model->setState('new_name', $newName);		$model->setState('tmp_prefix', uniqid('template_copy_'));		$model->setState('to_path', JFactory::getConfig()->get('tmp_path') . '/' . $model->getState('tmp_prefix'));		// Process only if we have a new name entered		if (strlen($newName) > 0)		{			if (!JFactory::getUser()->authorise('core.create', 'com_templates'))			{				// User is not authorised to delete				JError::raiseWarning(403, JText::_('COM_TEMPLATES_ERROR_CREATE_NOT_PERMITTED'));				return false;			}			// Set FTP credentials, if given			JClientHelper::setCredentialsFromRequest('ftp');			// Check that new name is valid			if (($newNameRaw !== null) && ($newName !== $newNameRaw))			{				JError::raiseWarning(403, JText::_('COM_TEMPLATES_ERROR_INVALID_TEMPLATE_NAME'));				return false;			}			// Check that new name doesn't already exist			if (!$model->checkNewName())			{				JError::raiseWarning(403, JText::_('COM_TEMPLATES_ERROR_DUPLICATE_TEMPLATE_NAME'));				return false;			}			// Check that from name does exist and get the folder name			$fromName = $model->getFromName();			if (!$fromName)			{				JError::raiseWarning(403, JText::_('COM_TEMPLATES_ERROR_INVALID_FROM_NAME'));				return false;			}			// Call model's copy method			if (!$model->copy())			{				JError::raiseWarning(403, JText::_('COM_TEMPLATES_ERROR_COULD_NOT_COPY'));				return false;			}			// Call installation model			$this->input->set('install_directory', JFactory::getConfig()->get('tmp_path') . '/' . $model->getState('tmp_prefix'));			$installModel = $this->getModel('Install', 'InstallerModel');			JFactory::getLanguage()->load('com_installer');			if (!$installModel->install())			{				JError::raiseWarning(403, JText::_('COM_TEMPLATES_ERROR_COULD_NOT_INSTALL'));				return false;			}			$this->setMessage(JText::sprintf('COM_TEMPLATES_COPY_SUCCESS', $newName));			$model->cleanup();			return true;		}	}}
<?php/** * @package     Joomla.Platform * @subpackage  Form * * @copyright   Copyright (C) 2005 - 2013 Open Source Matters, Inc. All rights reserved. * @license     GNU General Public License version 2 or later; see LICENSE */defined('JPATH_PLATFORM') or die;JFormHelper::loadFieldClass('list');/** * Form Field class for the Joomla Platform. * Provides a list of access levels. Access levels control what users in specific * groups can see. * * @package     Joomla.Platform * @subpackage  Form * @see         JAccess * @since       11.1 */class JFormFieldAccessLevel extends JFormFieldList{	/**	 * The form field type.	 *	 * @var    string	 * @since  11.1	 */	public $type = 'AccessLevel';	/**	 * Method to get the field input markup.	 *	 * @return  string   The field input markup.	 *	 * @since   11.1	 */	protected function getInput()	{		$attr = '';		// Initialize some field attributes.		$attr .= $this->element['class'] ? ' class="' . (string) $this->element['class'] . '"' : '';		$attr .= ((string) $this->element['disabled'] == 'true') ? ' disabled="disabled"' : '';		$attr .= $this->element['size'] ? ' size="' . (int) $this->element['size'] . '"' : '';		$attr .= $this->multiple ? ' multiple="multiple"' : '';		$attr .= $this->required ? ' required="required" aria-required="true"' : '';		// Initialize JavaScript field attributes.		$attr .= $this->element['onchange'] ? ' onchange="' . (string) $this->element['onchange'] . '"' : '';		// Get the field options.		$options = $this->getOptions();		return JHtml::_('access.level', $this->name, $this->value, $attr, $options, $this->id);	}}
<?php/** * @package     Joomla.Administrator * @subpackage  com_tags * * @copyright   Copyright (C) 2005 - 2013 Open Source Matters, Inc. All rights reserved. * @license     GNU General Public License version 2 or later; see LICENSE.txt */defined('_JEXEC') or die;// Include the component HTML helpers.JHtml::addIncludePath(JPATH_COMPONENT.'/helpers/html');$app = JFactory::getApplication();$input = $app->input;// Load the tooltip behavior.JHtml::_('behavior.tooltip');JHtml::_('behavior.formvalidation');JHtml::_('behavior.keepalive');JHtml::_('formbehavior.chosen', 'select');// Create shortcut to parameters.$params = $this->state->get('params');$params = $params->toArray();?><script type="text/javascript">	Joomla.submitbutton = function(task)	{		if (task == 'tag.cancel' || document.formvalidator.isValid(document.id('item-form'))) {			<?php echo $this->form->getField('description')->save(); ?>			Joomla.submitform(task, document.getElementById('item-form'));		}	}</script><form action="<?php echo JRoute::_('index.php?option=com_tags&layout=edit&id=' . (int) $this->item->id); ?>" method="post" name="adminForm" id="item-form" class="form-validate form-horizontal">	<div class="row-fluid">	<!-- Begin Content -->		<div class="span10 form-horizontal">			<?php echo JHtml::_('bootstrap.startTabSet', 'myTab', array('active' => 'general')); ?>				<?php echo JHtml::_('bootstrap.addTab', 'myTab', 'general', JText::_('COM_TAGS_FIELDSET_DETAILS', true)); ?>					<fieldset class="adminform">						<div class="control-group form-inline">							<?php echo $this->form->getLabel('title'); ?> <?php echo $this->form->getInput('title'); ?> <?php echo $this->form->getLabel('catid'); ?> <?php echo $this->form->getInput('catid'); ?>						</div>						<?php echo $this->form->getInput('description'); ?>					</fieldset>						<div class="row-fluid">							<div class="span6">								<h4><?php echo JText::_('COM_TAGS_FIELDSET_URLS_AND_IMAGES');?></h4>								<div class="control-group">									<?php echo $this->form->getLabel('images'); ?>									<div class="controls">										<?php echo $this->form->getInput('images'); ?>									</div>								</div>								<?php foreach ($this->form->getGroup('images') as $field) : ?>									<div class="control-group">										<?php if (!$field->hidden) : ?>											<?php echo $field->label; ?>										<?php endif; ?>										<div class="controls">											<?php echo $field->input; ?>										</div>									</div>								<?php endforeach; ?>							</div>						</div>				<?php echo JHtml::_('bootstrap.endTab'); ?>						<?php echo JHtml::_('bootstrap.addTab', 'myTab', 'publishing', JText::_('COM_TAGS_FIELDSET_PUBLISHING', true)); ?>							<div class="row-fluid">								<div class="span6">									<div class="control-group">										<?php echo $this->form->getLabel('alias'); ?>										<div class="controls">											<?php echo $this->form->getInput('alias'); ?>										</div>									</div>									<div class="control-group">										<div class="control-label">											<?php echo $this->form->getLabel('id'); ?>										</div>										<div class="controls">											<?php echo $this->form->getInput('id'); ?>										</div>									</div>									<div class="control-group">										<?php echo $this->form->getLabel('created_user_id'); ?>										<div class="controls">											<?php echo $this->form->getInput('created_user_id'); ?>										</div>									</div>									<div class="control-group">										<?php echo $this->form->getLabel('created_by_alias'); ?>										<div class="controls">											<?php echo $this->form->getInput('created_by_alias'); ?>										</div>									</div>									<div class="control-group">										<?php echo $this->form->getLabel('created_time'); ?>										<div class="controls">											<?php echo $this->form->getInput('created_time'); ?>										</div>									</div>								</div>								<div class="span6">									<div class="control-group">										<?php echo $this->form->getLabel('publish_up'); ?>										<div class="controls">											<?php echo $this->form->getInput('publish_up'); ?>										</div>									</div>									<div class="control-group">										<?php echo $this->form->getLabel('publish_down'); ?>										<div class="controls">											<?php echo $this->form->getInput('publish_down'); ?>										</div>									</div>									<?php if ($this->item->modified_user_id) : ?>										<div class="control-group">											<?php echo $this->form->getLabel('modified_user_id'); ?>											<div class="controls">												<?php echo $this->form->getInput('modified_user_id'); ?>											</div>										</div>										<div class="control-group">											<?php echo $this->form->getLabel('modified_time'); ?>											<div class="controls">												<?php echo $this->form->getInput('modified_time'); ?>											</div>										</div>									<?php endif; ?>									<?php if ($this->item->version) : ?>										<div class="control-group">											<?php echo $this->form->getLabel('version'); ?>											<div class="controls">												<?php echo $this->form->getInput('version'); ?>											</div>										</div>									<?php endif; ?>									<?php if ($this->item->hits) : ?>										<div class="control-group">											<div class="control-label">												<?php echo $this->form->getLabel('hits'); ?>											</div>											<div class="controls">												<?php echo $this->form->getInput('hits'); ?>											</div>										</div>									<?php endif; ?>								</div>							</div>						<?php echo JHtml::_('bootstrap.endTab'); ?>					<?php echo JHtml::_('bootstrap.addTab', 'myTab', 'metadata', JText::_('JGLOBAL_FIELDSET_METADATA_OPTIONS', true)); ?>							<?php echo $this->loadTemplate('metadata'); ?>					<?php echo JHtml::_('bootstrap.endTab'); ?>									</div>				<input type="hidden" name="task" value="" />				<?php echo JHtml::_('form.token'); ?>		</div>		<!-- End Content -->		<!-- Begin Sidebar -->		<div class="span2">			<h4><?php echo JText::_('JDETAILS');?></h4>			<hr />			<fieldset class="form-vertical">				<div class="control-group">					<div class="controls">						<?php echo $this->form->getValue('title'); ?>					</div>				</div>				<div class="control-group">					<?php echo $this->form->getLabel('parent_id'); ?>					<div class="controls">						<?php echo $this->form->getInput('parent_id'); ?>					</div>				</div>				<div class="control-group">					<?php echo $this->form->getLabel('published'); ?>					<div class="controls">						<?php echo $this->form->getInput('published'); ?>					</div>				</div>				<div class="control-group">					<?php echo $this->form->getLabel('access'); ?>					<div class="controls">						<?php echo $this->form->getInput('access'); ?>					</div>				</div>				<div class="control-group">					<?php echo $this->form->getLabel('language'); ?>					<div class="controls">						<?php echo $this->form->getInput('language'); ?>					</div>				</div>			</fieldset>		</div>		<!-- End Sidebar -->	</div></form>
<?php/** * @package     Joomla.Administrator * @subpackage  com_admin * * @copyright   Copyright (C) 2005 - 2013 Open Source Matters, Inc. All rights reserved. * @license     GNU General Public License version 2 or later; see LICENSE.txt */defined('_JEXEC') or die;/** * Script file of Joomla CMS * * @package     Joomla.Administrator * @subpackage  com_admin * @since       1.6.4 */class JoomlaInstallerScript{	/**	 * Method to update Joomla!	 *	 * @param   JInstallerFile    $installer    The class calling this method	 *	 * @return void	 */	public function update($installer)	{		$this->deleteUnexistingFiles();		$this->updateManifestCaches();		$this->updateDatabase();	}	protected function updateDatabase()	{		$db = JFactory::getDbo();		if (substr($db->name, 0, 5) == 'mysql')		{			$query = 'SHOW ENGINES';			$db->setQuery($query);			$results = $db->loadObjectList();			if ($db->getErrorNum())			{				echo JText::sprintf('JLIB_DATABASE_ERROR_FUNCTION_FAILED', $db->getErrorNum(), $db->getErrorMsg()) . '<br />';				return;			}			foreach ($results as $result)			{				if ($result->Support == 'DEFAULT')				{					$query = 'ALTER TABLE #__update_sites_extensions ENGINE = ' . $result->Engine;					$db->setQuery($query);					$db->execute();					if ($db->getErrorNum())					{						echo JText::sprintf('JLIB_DATABASE_ERROR_FUNCTION_FAILED', $db->getErrorNum(), $db->getErrorMsg()) . '<br />';						return;					}					break;				}			}		}	}	protected function updateManifestCaches()	{		$extensions = array();		// Components		//`type`, `element`, `folder`, `client_id`		$extensions[] = array('component', 'com_mailto', '', 0);		$extensions[] = array('component', 'com_wrapper', '', 0);		$extensions[] = array('component', 'com_admin', '', 1);		$extensions[] = array('component', 'com_banners', '', 1);		$extensions[] = array('component', 'com_cache', '', 1);		$extensions[] = array('component', 'com_categories', '', 1);		$extensions[] = array('component', 'com_checkin', '', 1);		$extensions[] = array('component', 'com_contact', '', 1);		$extensions[] = array('component', 'com_cpanel', '', 1);		$extensions[] = array('component', 'com_installer', '', 1);		$extensions[] = array('component', 'com_languages', '', 1);		$extensions[] = array('component', 'com_login', '', 1);		$extensions[] = array('component', 'com_media', '', 1);		$extensions[] = array('component', 'com_menus', '', 1);		$extensions[] = array('component', 'com_messages', '', 1);		$extensions[] = array('component', 'com_modules', '', 1);		$extensions[] = array('component', 'com_newsfeeds', '', 1);		$extensions[] = array('component', 'com_plugins', '', 1);		$extensions[] = array('component', 'com_search', '', 1);		$extensions[] = array('component', 'com_templates', '', 1);		$extensions[] = array('component', 'com_weblinks', '', 1);		$extensions[] = array('component', 'com_content', '', 1);		$extensions[] = array('component', 'com_config', '', 1);		$extensions[] = array('component', 'com_redirect', '', 1);		$extensions[] = array('component', 'com_users', '', 1);		$extensions[] = array('component', 'com_tags', '', 1);		// Libraries		$extensions[] = array('library', 'phpmailer', '', 0);		$extensions[] = array('library', 'simplepie', '', 0);		$extensions[] = array('library', 'phputf8', '', 0);		$extensions[] = array('library', 'joomla', '', 0);		// Modules site		// Site		$extensions[] = array('module', 'mod_articles_archive', '', 0);		$extensions[] = array('module', 'mod_articles_latest', '', 0);		$extensions[] = array('module', 'mod_articles_popular', '', 0);		$extensions[] = array('module', 'mod_banners', '', 0);		$extensions[] = array('module', 'mod_breadcrumbs', '', 0);		$extensions[] = array('module', 'mod_custom', '', 0);		$extensions[] = array('module', 'mod_feed', '', 0);		$extensions[] = array('module', 'mod_footer', '', 0);		$extensions[] = array('module', 'mod_login', '', 0);		$extensions[] = array('module', 'mod_menu', '', 0);		$extensions[] = array('module', 'mod_articles_news', '', 0);		$extensions[] = array('module', 'mod_random_image', '', 0);		$extensions[] = array('module', 'mod_related_items', '', 0);		$extensions[] = array('module', 'mod_search', '', 0);		$extensions[] = array('module', 'mod_stats', '', 0);		$extensions[] = array('module', 'mod_syndicate', '', 0);		$extensions[] = array('module', 'mod_users_latest', '', 0);		$extensions[] = array('module', 'mod_weblinks', '', 0);		$extensions[] = array('module', 'mod_whosonline', '', 0);		$extensions[] = array('module', 'mod_wrapper', '', 0);		$extensions[] = array('module', 'mod_articles_category', '', 0);		$extensions[] = array('module', 'mod_articles_categories', '', 0);		$extensions[] = array('module', 'mod_languages', '', 0);		$extensions[] = array('module', 'mod_tags_popular', '', 0);		$extensions[] = array('module', 'mod_tags_similar', '', 0);		// Administrator		$extensions[] = array('module', 'mod_custom', '', 1);		$extensions[] = array('module', 'mod_feed', '', 1);		$extensions[] = array('module', 'mod_latest', '', 1);		$extensions[] = array('module', 'mod_logged', '', 1);		$extensions[] = array('module', 'mod_login', '', 1);		$extensions[] = array('module', 'mod_menu', '', 1);		$extensions[] = array('module', 'mod_popular', '', 1);		$extensions[] = array('module', 'mod_quickicon', '', 1);		$extensions[] = array('module', 'mod_stats_admin', '', 1);		$extensions[] = array('module', 'mod_status', '', 1);		$extensions[] = array('module', 'mod_submenu', '', 1);		$extensions[] = array('module', 'mod_title', '', 1);		$extensions[] = array('module', 'mod_toolbar', '', 1);		$extensions[] = array('module', 'mod_multilangstatus', '', 1);		// Plug-ins		$extensions[] = array('plugin', 'gmail', 'authentication', 0);		$extensions[] = array('plugin', 'joomla', 'authentication', 0);		$extensions[] = array('plugin', 'ldap', 'authentication', 0);		$extensions[] = array('plugin', 'emailcloak', 'content', 0);		$extensions[] = array('plugin', 'loadmodule', 'content', 0);		$extensions[] = array('plugin', 'pagebreak', 'content', 0);		$extensions[] = array('plugin', 'pagenavigation', 'content', 0);		$extensions[] = array('plugin', 'vote', 'content', 0);		$extensions[] = array('plugin', 'codemirror', 'editors', 0);		$extensions[] = array('plugin', 'none', 'editors', 0);		$extensions[] = array('plugin', 'tinymce', 'editors', 0);		$extensions[] = array('plugin', 'article', 'editors-xtd', 0);		$extensions[] = array('plugin', 'image', 'editors-xtd', 0);		$extensions[] = array('plugin', 'pagebreak', 'editors-xtd', 0);		$extensions[] = array('plugin', 'readmore', 'editors-xtd', 0);		$extensions[] = array('plugin', 'categories', 'search', 0);		$extensions[] = array('plugin', 'contacts', 'search', 0);		$extensions[] = array('plugin', 'content', 'search', 0);		$extensions[] = array('plugin', 'newsfeeds', 'search', 0);		$extensions[] = array('plugin', 'weblinks', 'search', 0);		$extensions[] = array('plugin', 'languagefilter', 'system', 0);		$extensions[] = array('plugin', 'p3p', 'system', 0);		$extensions[] = array('plugin', 'cache', 'system', 0);		$extensions[] = array('plugin', 'debug', 'system', 0);		$extensions[] = array('plugin', 'log', 'system', 0);		$extensions[] = array('plugin', 'redirect', 'system', 0);		$extensions[] = array('plugin', 'remember', 'system', 0);		$extensions[] = array('plugin', 'sef', 'system', 0);		$extensions[] = array('plugin', 'logout', 'system', 0);		$extensions[] = array('plugin', 'contactcreator', 'user', 0);		$extensions[] = array('plugin', 'joomla', 'user', 0);		$extensions[] = array('plugin', 'profile', 'user', 0);		$extensions[] = array('plugin', 'joomla', 'extension', 0);		$extensions[] = array('plugin', 'joomla', 'content', 0);		$extensions[] = array('plugin', 'languagecode', 'system', 0);		$extensions[] = array('plugin', 'joomlaupdate', 'quickicon', 0);		$extensions[] = array('plugin', 'extensionupdate', 'quickicon', 0);		$extensions[] = array('plugin', 'recaptcha', 'captcha', 0);		$extensions[] = array('plugin', 'categories', 'finder', 0);		$extensions[] = array('plugin', 'contacts', 'finder', 0);		$extensions[] = array('plugin', 'content', 'finder', 0);		$extensions[] = array('plugin', 'newsfeeds', 'finder', 0);		$extensions[] = array('plugin', 'weblinks', 'finder', 0);		$extensions[] = array('plugin', 'tags', 'finder', 0);		// Templates		$extensions[] = array('template', 'beez3', '', 0);		$extensions[] = array('template', 'hathor', '', 1);		$extensions[] = array('template', 'protostar', '', 0);		$extensions[] = array('template', 'isis', '', 1);		// Languages		$extensions[] = array('language', 'en-GB', '', 0);		$extensions[] = array('language', 'en-GB', '', 1);		// Files		$extensions[] = array('file', 'joomla', '', 0);		// Packages		// None in core at this time		// Attempt to refresh manifest caches		$db = JFactory::getDbo();		$query = $db->getQuery(true)			->select('*')			->from('#__extensions');		foreach ($extensions as $extension)		{			$query->where('type=' . $db->quote($extension[0]) . ' AND element=' . $db->quote($extension[1]) . ' AND folder=' . $db->quote($extension[2]) . ' AND client_id=' . $extension[3], 'OR');		}		$db->setQuery($query);		$extensions = $db->loadObjectList();		$installer = new JInstaller;		// Check for a database error.		if ($db->getErrorNum())		{			echo JText::sprintf('JLIB_DATABASE_ERROR_FUNCTION_FAILED', $db->getErrorNum(), $db->getErrorMsg()) . '<br />';			return;		}		foreach ($extensions as $extension)		{			if (!$installer->refreshManifestCache($extension->extension_id))			{				echo JText::sprintf('FILES_JOOMLA_ERROR_MANIFEST', $extension->type, $extension->element, $extension->name, $extension->client_id) . '<br />';			}		}	}	public function deleteUnexistingFiles()	{		$files = array(			'/libraries/cms/cmsloader.php',			'/libraries/joomla/form/fields/templatestyle.php',			'/libraries/joomla/form/fields/user.php',			'/libraries/joomla/form/fields/menu.php',			'/libraries/joomla/form/fields/helpsite.php',			'/administrator/components/com_admin/sql/updates/mysql/1.7.0.sql',			'/administrator/components/com_admin/sql/updates/sqlsrv/2.5.2-2012-03-05.sql',			'/administrator/components/com_admin/sql/updates/sqlsrv/2.5.3-2012-03-13.sql',			'/administrator/components/com_admin/sql/updates/sqlsrv/index.html',			'/administrator/components/com_users/controllers/config.php',			'/administrator/language/en-GB/en-GB.plg_system_finder.ini',			'/administrator/language/en-GB/en-GB.plg_system_finder.sys.ini',			'/media/editors/tinymce/jscripts/tiny_mce/plugins/advhr/editor_plugin_src.js',			'/media/editors/tinymce/jscripts/tiny_mce/plugins/advimage/editor_plugin_src.js',			'/media/editors/tinymce/jscripts/tiny_mce/plugins/advlink/editor_plugin_src.js',			'/media/editors/tinymce/jscripts/tiny_mce/plugins/advlist/editor_plugin_src.js',			'/media/editors/tinymce/jscripts/tiny_mce/plugins/autolink/editor_plugin_src.js',			'/media/editors/tinymce/jscripts/tiny_mce/plugins/autoresize/editor_plugin_src.js',			'/media/editors/tinymce/jscripts/tiny_mce/plugins/autosave/editor_plugin_src.js',			'/media/editors/tinymce/jscripts/tiny_mce/plugins/bbcode/editor_plugin_src.js',			'/media/editors/tinymce/jscripts/tiny_mce/plugins/contextmenu/editor_plugin_src.js',			'/media/editors/tinymce/jscripts/tiny_mce/plugins/directionality/editor_plugin_src.js',			'/media/editors/tinymce/jscripts/tiny_mce/plugins/emotions/editor_plugin_src.js',			'/media/editors/tinymce/jscripts/tiny_mce/plugins/fullpage/editor_plugin_src.js',			'/media/editors/tinymce/jscripts/tiny_mce/plugins/fullscreen/editor_plugin_src.js',			'/media/editors/tinymce/jscripts/tiny_mce/plugins/iespell/editor_plugin_src.js',			'/media/editors/tinymce/jscripts/tiny_mce/plugins/inlinepopups/editor_plugin_src.js',			'/media/editors/tinymce/jscripts/tiny_mce/plugins/insertdatetime/editor_plugin_src.js',			'/media/editors/tinymce/jscripts/tiny_mce/plugins/layer/editor_plugin_src.js',			'/media/editors/tinymce/jscripts/tiny_mce/plugins/lists/editor_plugin_src.js',			'/media/editors/tinymce/jscripts/tiny_mce/plugins/media/editor_plugin_src.js',			'/media/editors/tinymce/jscripts/tiny_mce/plugins/nonbreaking/editor_plugin_src.js',			'/media/editors/tinymce/jscripts/tiny_mce/plugins/noneditable/editor_plugin_src.js',			'/media/editors/tinymce/jscripts/tiny_mce/plugins/pagebreak/editor_plugin_src.js',			'/media/editors/tinymce/jscripts/tiny_mce/plugins/paste/editor_plugin_src.js',			'/media/editors/tinymce/jscripts/tiny_mce/plugins/preview/editor_plugin_src.js',			'/media/editors/tinymce/jscripts/tiny_mce/plugins/print/editor_plugin_src.js',			'/media/editors/tinymce/jscripts/tiny_mce/plugins/save/editor_plugin_src.js',			'/media/editors/tinymce/jscripts/tiny_mce/plugins/searchreplace/editor_plugin_src.js',			'/media/editors/tinymce/jscripts/tiny_mce/plugins/spellchecker/editor_plugin_src.js',			'/media/editors/tinymce/jscripts/tiny_mce/plugins/style/editor_plugin_src.js',			'/media/editors/tinymce/jscripts/tiny_mce/plugins/tabfocus/editor_plugin_src.js',			'/media/editors/tinymce/jscripts/tiny_mce/plugins/table/editor_plugin_src.js',			'/media/editors/tinymce/jscripts/tiny_mce/plugins/template/editor_plugin_src.js',			'/media/editors/tinymce/jscripts/tiny_mce/plugins/visualchars/editor_plugin_src.js',			'/media/editors/tinymce/jscripts/tiny_mce/plugins/wordcount/editor_plugin_src.js',			'/media/editors/tinymce/jscripts/tiny_mce/plugins/xhtmlxtras/editor_plugin_src.js',			'/media/editors/tinymce/jscripts/tiny_mce/themes/advanced/editor_template_src.js',			'/media/editors/tinymce/jscripts/tiny_mce/themes/simple/editor_template_src.js',			'/media/editors/tinymce/jscripts/tiny_mce/tiny_mce_src.js',			'/media/com_finder/images/calendar.png',			'/media/com_finder/images/mime/index.html',			'/media/com_finder/images/mime/pdf.png',			'/components/com_media/controller.php',			'/components/com_media/helpers/index.html',			'/components/com_media/helpers/media.php',			// Joomla 3.0			'/administrator/components/com_admin/sql/updates/mysql/1.7.0-2011-06-06-2.sql',			'/administrator/components/com_admin/sql/updates/mysql/1.7.0-2011-06-06.sql',			'/administrator/components/com_admin/sql/updates/mysql/1.7.0.sql',			'/administrator/components/com_admin/sql/updates/mysql/1.7.1-2011-09-15-2.sql',			'/administrator/components/com_admin/sql/updates/mysql/1.7.1-2011-09-15-3.sql',			'/administrator/components/com_admin/sql/updates/mysql/1.7.1-2011-09-15-4.sql',			'/administrator/components/com_admin/sql/updates/mysql/1.7.1-2011-09-15.sql',			'/administrator/components/com_admin/sql/updates/mysql/1.7.1-2011-09-17.sql',			'/administrator/components/com_admin/sql/updates/mysql/1.7.1-2011-09-20.sql',			'/administrator/components/com_admin/sql/updates/mysql/1.7.3-2011-10-15.sql',			'/administrator/components/com_admin/sql/updates/mysql/1.7.3-2011-10-19.sql',			'/administrator/components/com_admin/sql/updates/mysql/1.7.3-2011-11-10.sql',			'/administrator/components/com_admin/sql/updates/mysql/1.7.4-2011-11-19.sql',			'/administrator/components/com_admin/sql/updates/mysql/1.7.4-2011-11-23.sql',			'/administrator/components/com_admin/sql/updates/mysql/1.7.4-2011-12-12.sql',			'/administrator/components/com_admin/views/sysinfo/tmpl/default_navigation.php',			'/administrator/components/com_categories/config.xml',			'/administrator/components/com_categories/helpers/categoriesadministrator.php',			'/administrator/components/com_contact/elements/contact.php',			'/administrator/components/com_contact/elements/index.html',			'/administrator/components/com_content/elements/article.php',			'/administrator/components/com_content/elements/author.php',			'/administrator/components/com_content/elements/index.html',			'/administrator/components/com_installer/models/fields/client.php',			'/administrator/components/com_installer/models/fields/group.php',			'/administrator/components/com_installer/models/fields/index.html',			'/administrator/components/com_installer/models/fields/search.php',			'/administrator/components/com_installer/models/fields/type.php',			'/administrator/components/com_installer/models/forms/index.html',			'/administrator/components/com_installer/models/forms/manage.xml',			'/administrator/components/com_installer/views/install/tmpl/default_form.php',			'/administrator/components/com_installer/views/manage/tmpl/default_filter.php',			'/administrator/components/com_languages/views/installed/tmpl/default_ftp.php',			'/administrator/components/com_languages/views/installed/tmpl/default_navigation.php',			'/administrator/components/com_modules/models/fields/index.html',			'/administrator/components/com_modules/models/fields/moduleorder.php',			'/administrator/components/com_modules/models/fields/moduleposition.php',			'/administrator/components/com_newsfeeds/elements/index.html',			'/administrator/components/com_newsfeeds/elements/newsfeed.php',			'/administrator/components/com_templates/views/prevuuw/index.html',			'/administrator/components/com_templates/views/prevuuw/tmpl/default.php',			'/administrator/components/com_templates/views/prevuuw/tmpl/index.html',			'/administrator/components/com_templates/views/prevuuw/view.html.php',			'/administrator/includes/menu.php',			'/administrator/includes/router.php',			'/administrator/manifests/packages/pkg_joomla.xml',			'/administrator/modules/mod_submenu/helper.php',			'/administrator/templates/hathor/css/ie6.css',			'/administrator/templates/hathor/html/mod_submenu/index.html',			'/administrator/templates/hathor/html/mod_submenu/default.php',			'/components/com_media/controller.php',			'/components/com_media/helpers/index.html',			'/components/com_media/helpers/media.php',			'/includes/menu.php',			'/includes/pathway.php',			'/includes/router.php',			'/language/en-GB/en-GB.pkg_joomla.sys.ini',			'/libraries/cms/controller/index.html',			'/libraries/cms/controller/legacy.php',			'/libraries/cms/model/index.html',			'/libraries/cms/model/legacy.php',			'/libraries/cms/schema/changeitemmysql.php',			'/libraries/cms/schema/changeitemsqlazure.php',			'/libraries/cms/schema/changeitemsqlsrv.php',			'/libraries/cms/view/index.html',			'/libraries/cms/view/legacy.php',			'/libraries/joomla/application/application.php',			'/libraries/joomla/application/categories.php',			'/libraries/joomla/application/cli/daemon.php',			'/libraries/joomla/application/cli/index.html',			'/libraries/joomla/application/component/controller.php',			'/libraries/joomla/application/component/controlleradmin.php',			'/libraries/joomla/application/component/controllerform.php',			'/libraries/joomla/application/component/helper.php',			'/libraries/joomla/application/component/index.html',			'/libraries/joomla/application/component/model.php',			'/libraries/joomla/application/component/modeladmin.php',			'/libraries/joomla/application/component/modelform.php',			'/libraries/joomla/application/component/modelitem.php',			'/libraries/joomla/application/component/modellist.php',			'/libraries/joomla/application/component/view.php',			'/libraries/joomla/application/helper.php',			'/libraries/joomla/application/input.php',			'/libraries/joomla/application/input/cli.php',			'/libraries/joomla/application/input/cookie.php',			'/libraries/joomla/application/input/files.php',			'/libraries/joomla/application/input/index.html',			'/libraries/joomla/application/menu.php',			'/libraries/joomla/application/module/helper.php',			'/libraries/joomla/application/module/index.html',			'/libraries/joomla/application/pathway.php',			'/libraries/joomla/application/web/webclient.php',			'/libraries/joomla/base/node.php',			'/libraries/joomla/base/object.php',			'/libraries/joomla/base/observable.php',			'/libraries/joomla/base/observer.php',			'/libraries/joomla/base/tree.php',			'/libraries/joomla/cache/storage/eaccelerator.php',			'/libraries/joomla/cache/storage/helpers/helper.php',			'/libraries/joomla/cache/storage/helpers/index.html',			'/libraries/joomla/database/database/index.html',			'/libraries/joomla/database/database/mysql.php',			'/libraries/joomla/database/database/mysqlexporter.php',			'/libraries/joomla/database/database/mysqli.php',			'/libraries/joomla/database/database/mysqliexporter.php',			'/libraries/joomla/database/database/mysqliimporter.php',			'/libraries/joomla/database/database/mysqlimporter.php',			'/libraries/joomla/database/database/mysqliquery.php',			'/libraries/joomla/database/database/mysqlquery.php',			'/libraries/joomla/database/database/sqlazure.php',			'/libraries/joomla/database/database/sqlazurequery.php',			'/libraries/joomla/database/database/sqlsrv.php',			'/libraries/joomla/database/database/sqlsrvquery.php',			'/libraries/joomla/database/exception.php',			'/libraries/joomla/database/table.php',			'/libraries/joomla/database/table/asset.php',			'/libraries/joomla/database/table/category.php',			'/libraries/joomla/database/table/content.php',			'/libraries/joomla/database/table/extension.php',			'/libraries/joomla/database/table/index.html',			'/libraries/joomla/database/table/language.php',			'/libraries/joomla/database/table/menu.php',			'/libraries/joomla/database/table/menutype.php',			'/libraries/joomla/database/table/module.php',			'/libraries/joomla/database/table/session.php',			'/libraries/joomla/database/table/update.php',			'/libraries/joomla/database/table/user.php',			'/libraries/joomla/database/table/usergroup.php',			'/libraries/joomla/database/table/viewlevel.php',			'/libraries/joomla/database/tablenested.php',			'/libraries/joomla/environment/request.php',			'/libraries/joomla/environment/uri.php',			'/libraries/joomla/error/error.php',			'/libraries/joomla/error/exception.php',			'/libraries/joomla/error/index.html',			'/libraries/joomla/error/log.php',			'/libraries/joomla/error/profiler.php',			'/libraries/joomla/filesystem/archive.php',			'/libraries/joomla/filesystem/archive/bzip2.php',			'/libraries/joomla/filesystem/archive/gzip.php',			'/libraries/joomla/filesystem/archive/index.html',			'/libraries/joomla/filesystem/archive/tar.php',			'/libraries/joomla/filesystem/archive/zip.php',			'/libraries/joomla/form/fields/category.php',			'/libraries/joomla/form/fields/componentlayout.php',			'/libraries/joomla/form/fields/contentlanguage.php',			'/libraries/joomla/form/fields/editor.php',			'/libraries/joomla/form/fields/editors.php',			'/libraries/joomla/form/fields/media.php',			'/libraries/joomla/form/fields/menuitem.php',			'/libraries/joomla/form/fields/modulelayout.php',			'/libraries/joomla/html/editor.php',			'/libraries/joomla/html/html/access.php',			'/libraries/joomla/html/html/batch.php',			'/libraries/joomla/html/html/behavior.php',			'/libraries/joomla/html/html/category.php',			'/libraries/joomla/html/html/content.php',			'/libraries/joomla/html/html/contentlanguage.php',			'/libraries/joomla/html/html/date.php',			'/libraries/joomla/html/html/email.php',			'/libraries/joomla/html/html/form.php',			'/libraries/joomla/html/html/grid.php',			'/libraries/joomla/html/html/image.php',			'/libraries/joomla/html/html/index.html',			'/libraries/joomla/html/html/jgrid.php',			'/libraries/joomla/html/html/list.php',			'/libraries/joomla/html/html/menu.php',			'/libraries/joomla/html/html/number.php',			'/libraries/joomla/html/html/rules.php',			'/libraries/joomla/html/html/select.php',			'/libraries/joomla/html/html/sliders.php',			'/libraries/joomla/html/html/string.php',			'/libraries/joomla/html/html/tabs.php',			'/libraries/joomla/html/html/tel.php',			'/libraries/joomla/html/html/user.php',			'/libraries/joomla/html/pagination.php',			'/libraries/joomla/html/pane.php',			'/libraries/joomla/html/parameter.php',			'/libraries/joomla/html/parameter/element.php',			'/libraries/joomla/html/parameter/element/calendar.php',			'/libraries/joomla/html/parameter/element/category.php',			'/libraries/joomla/html/parameter/element/componentlayouts.php',			'/libraries/joomla/html/parameter/element/contentlanguages.php',			'/libraries/joomla/html/parameter/element/editors.php',			'/libraries/joomla/html/parameter/element/filelist.php',			'/libraries/joomla/html/parameter/element/folderlist.php',			'/libraries/joomla/html/parameter/element/helpsites.php',			'/libraries/joomla/html/parameter/element/hidden.php',			'/libraries/joomla/html/parameter/element/imagelist.php',			'/libraries/joomla/html/parameter/element/index.html',			'/libraries/joomla/html/parameter/element/languages.php',			'/libraries/joomla/html/parameter/element/list.php',			'/libraries/joomla/html/parameter/element/menu.php',			'/libraries/joomla/html/parameter/element/menuitem.php',			'/libraries/joomla/html/parameter/element/modulelayouts.php',			'/libraries/joomla/html/parameter/element/password.php',			'/libraries/joomla/html/parameter/element/radio.php',			'/libraries/joomla/html/parameter/element/spacer.php',			'/libraries/joomla/html/parameter/element/sql.php',			'/libraries/joomla/html/parameter/element/templatestyle.php',			'/libraries/joomla/html/parameter/element/text.php',			'/libraries/joomla/html/parameter/element/textarea.php',			'/libraries/joomla/html/parameter/element/timezones.php',			'/libraries/joomla/html/parameter/element/usergroup.php',			'/libraries/joomla/html/parameter/index.html',			'/libraries/joomla/html/toolbar.php',			'/libraries/joomla/html/toolbar/button.php',			'/libraries/joomla/html/toolbar/button/confirm.php',			'/libraries/joomla/html/toolbar/button/custom.php',			'/libraries/joomla/html/toolbar/button/help.php',			'/libraries/joomla/html/toolbar/button/index.html',			'/libraries/joomla/html/toolbar/button/link.php',			'/libraries/joomla/html/toolbar/button/popup.php',			'/libraries/joomla/html/toolbar/button/separator.php',			'/libraries/joomla/html/toolbar/button/standard.php',			'/libraries/joomla/html/toolbar/index.html',			'/libraries/joomla/image/filters/brightness.php',			'/libraries/joomla/image/filters/contrast.php',			'/libraries/joomla/image/filters/edgedetect.php',			'/libraries/joomla/image/filters/emboss.php',			'/libraries/joomla/image/filters/grayscale.php',			'/libraries/joomla/image/filters/index.html',			'/libraries/joomla/image/filters/negate.php',			'/libraries/joomla/image/filters/sketchy.php',			'/libraries/joomla/image/filters/smooth.php',			'/libraries/joomla/language/help.php',			'/libraries/joomla/language/latin_transliterate.php',			'/libraries/joomla/log/logexception.php',			'/libraries/joomla/log/loggers/database.php',			'/libraries/joomla/log/loggers/echo.php',			'/libraries/joomla/log/loggers/formattedtext.php',			'/libraries/joomla/log/loggers/index.html',			'/libraries/joomla/log/loggers/messagequeue.php',			'/libraries/joomla/log/loggers/syslog.php',			'/libraries/joomla/log/loggers/w3c.php',			'/libraries/joomla/methods.php',			'/libraries/joomla/session/storage/eaccelerator.php',			'/libraries/joomla/string/stringnormalize.php',			'/libraries/joomla/utilities/date.php',			'/libraries/joomla/utilities/simplecrypt.php',			'/libraries/joomla/utilities/simplexml.php',			'/libraries/joomla/utilities/string.php',			'/libraries/joomla/utilities/xmlelement.php',			'/media/plg_quickicon_extensionupdate/extensionupdatecheck.js',			'/media/plg_quickicon_joomlaupdate/jupdatecheck.js',			// Joomla! 3.1			'/libraries/joomla/form/rules/boolean.php',			'/libraries/joomla/form/rules/color.php',			'/libraries/joomla/form/rules/email.php',			'/libraries/joomla/form/rules/equals.php',			'/libraries/joomla/form/rules/index.html',			'/libraries/joomla/form/rules/options.php',			'/libraries/joomla/form/rules/rules.php',			'/libraries/joomla/form/rules/tel.php',			'/libraries/joomla/form/rules/url.php',			'/libraries/joomla/form/rules/username.php',			'/libraries/joomla/installer/adapters/component.php',			'/libraries/joomla/installer/adapters/file.php',			'/libraries/joomla/installer/adapters/index.html',			'/libraries/joomla/installer/adapters/language.php',			'/libraries/joomla/installer/adapters/library.php',			'/libraries/joomla/installer/adapters/module.php',			'/libraries/joomla/installer/adapters/package.php',			'/libraries/joomla/installer/adapters/plugin.php',			'/libraries/joomla/installer/adapters/template.php',			'/libraries/joomla/installer/extension.php',			'/libraries/joomla/installer/helper.php',			'/libraries/joomla/installer/index.html',			'/libraries/joomla/installer/librarymanifest.php',			'/libraries/joomla/installer/packagemanifest.php',			'/media/system/css/mooRainbow.css',			'/media/system/js/mooRainbow-uncompressed.js',			'/media/system/js/mooRainbow.js',			'/media/system/js/swf-uncompressed.js',			'/media/system/js/swf.js',			'/media/system/js/uploader-uncompressed.js',			'/media/system/js/uploader.js',			'/media/system/swf/index.html',			'/media/system/swf/uploader.swf',		);		// TODO There is an issue while deleting folders using the ftp mode		$folders = array(			'/administrator/components/com_admin/sql/updates/sqlsrv',			'/media/com_finder/images/mime',			'/media/com_finder/images',			'/components/com_media/helpers',			// Joomla 3.0			'/administrator/components/com_contact/elements',			'/administrator/components/com_content/elements',			'/administrator/components/com_installer/models/fields',			'/administrator/components/com_installer/models/forms',			'/administrator/components/com_modules/models/fields',			'/administrator/components/com_newsfeeds/elements',			'/administrator/components/com_templates/views/prevuuw/tmpl',			'/administrator/components/com_templates/views/prevuuw',			'/libraries/cms/controller',			'/libraries/cms/model',			'/libraries/cms/view',			'/libraries/joomla/application/cli',			'/libraries/joomla/application/component',			'/libraries/joomla/application/input',			'/libraries/joomla/application/module',			'/libraries/joomla/cache/storage/helpers',			'/libraries/joomla/database/table',			'/libraries/joomla/database/database',			'/libraries/joomla/error',			'/libraries/joomla/filesystem/archive',			'/libraries/joomla/html/html',			'/libraries/joomla/html/toolbar',			'/libraries/joomla/html/toolbar/button',			'/libraries/joomla/html/parameter',			'/libraries/joomla/html/parameter/element',			'/libraries/joomla/image/filters',			'/libraries/joomla/log/loggers',			// Joomla! 3.1			'/libraries/joomla/form/rules',			'/libraries/joomla/installer/adapters',			'/libraries/joomla/installer',			'/media/system/swf/',		);		jimport('joomla.filesystem.file');		foreach ($files as $file)		{			if (JFile::exists(JPATH_ROOT . $file) && !JFile::delete(JPATH_ROOT . $file))			{				echo JText::sprintf('FILES_JOOMLA_ERROR_FILE_FOLDER', $file) . '<br />';			}		}		jimport('joomla.filesystem.folder');		foreach ($folders as $folder)		{			if (JFolder::exists(JPATH_ROOT . $folder) && !JFolder::delete(JPATH_ROOT . $folder))			{				echo JText::sprintf('FILES_JOOMLA_ERROR_FILE_FOLDER', $folder) . '<br />';			}		}	}}
<?php/** * @package     Joomla.Platform * @subpackage  MediaWiki * * @copyright   Copyright (C) 2005 - 2012 Open Source Matters, Inc. All rights reserved. * @license     GNU General Public License version 2 or later; see LICENSE */defined('JPATH_PLATFORM') or die;/** * MediaWiki API Images class for the Joomla Platform. * * @package     Joomla.Platform * @subpackage  MediaWiki * @since       12.3 */class JMediawikiImages extends JMediawikiObject{	/**     * Method to get all images contained on the given page(s).     *     * @param   array    $titles         Page titles to retrieve images.     * @param   integer  $imagelimit     How many images to return.     * @param   boolean  $imagecontinue  When more results are available, use this to continue.     * @param   integer  $imimages       Only list these images.     * @param   string   $imdir          The direction in which to list.     *     * @return  object     *     * @since   12.3     */	public function getImages(array $titles, $imagelimit = null, $imagecontinue = null, $imimages = null, $imdir = null)	{		// Build the request.		$path = '?action=query&prop=images';		// Append titles to the request.		$path .= '&titles=' . $this->buildParameter($titles);		if (isset($imagelimit))		{			$path .= '&imagelimit=' . $imagelimit;		}		if ($imagecontinue)		{			$path .= '&imagecontinue=';		}		if (isset($imimages))		{			$path .= '&imimages=' . $imimages;		}		if (isset($imdir))		{			$path .= '&imdir=' . $imdir;		}		// Send the request.		$response = $this->client->get($this->fetchUrl($path));		return $this->validateResponse($response);	}	/**     * Method to get all images contained on the given page(s).     *     * @param   array  $titles  Page titles to retrieve links.     *     * @return  object     *     * @since   12.3     */	public function getImagesUsed(array $titles)	{		// Build the request.		$path = '?action=query&generator=images&prop=info';		// Append titles to the request.		$path .= '&titles=' . $this->buildParameter($titles);		// Send the request.		$response = $this->client->get($this->fetchUrl($path));		return $this->validateResponse($response);	}	/**     * Method to get all image information and upload history.     *     * @param   array    $liprop             What image information to get.     * @param   integer  $lilimit            How many image revisions to return.     * @param   string   $listart            Timestamp to start listing from.     * @param   string   $liend              Timestamp to stop listing at.     * @param   integer  $liurlwidth         URL to an image scaled to this width will be returned..     * @param   integer  $liurlheight        URL to an image scaled to this height will be returned.     * @param   string   $limetadataversion  Version of metadata to use.     * @param   string   $liurlparam         A handler specific parameter string.     * @param   boolean  $licontinue         When more results are available, use this to continue.     *     * @return  object     *     * @since   12.3     */	public function getImageInfo(array $liprop = null, $lilimit = null, $listart = null, $liend = null, $liurlwidth = null,		$liurlheight = null, $limetadataversion = null, $liurlparam = null, $licontinue = null)	{		// Build the request.		$path = '?action=query&prop=imageinfo';		if (isset($liprop))		{			$path .= '&liprop=' . $this->buildParameter($liprop);		}		if (isset($lilimit))		{			$path .= '&lilimit=' . $lilimit;		}		if (isset($listart))		{			$path .= '&listart=' . $listart;		}		if (isset($liend))		{			$path .= '&liend=' . $liend;		}		if (isset($liurlwidth))		{			$path .= '&liurlwidth=' . $liurlwidth;		}		if (isset($liurlheight))		{			$path .= '&liurlheight=' . $liurlheight;		}		if (isset($limetadataversion))		{			$path .= '&limetadataversion=' . $limetadataversion;		}		if (isset($liurlparam))		{			$path .= '&liurlparam=' . $liurlparam;		}		if ($licontinue)		{			$path .= '&alcontinue=';		}		// Send the request.		$response = $this->client->get($this->fetchUrl($path));		return $this->validateResponse($response);	}	/**     * Method to enumerate all images.     *     * @param   string   $aifrom        The image title to start enumerating from.     * @param   string   $aito          The image title to stop enumerating at.     * @param   string   $aiprefix      Search for all image titles that begin with this value.     * @param   integer  $aiminsize     Limit to images with at least this many bytes.     * @param   integer  $aimaxsize     Limit to images with at most this many bytes.     * @param   integer  $ailimit       How many images in total to return.     * @param   string   $aidir         The direction in which to list.     * @param   string   $aisha1        SHA1 hash of image.     * @param   string   $aisha1base36  SHA1 hash of image in base 36.     * @param   array    $aiprop        What image information to get.     * @param   string   $aimime        What MIME type to search for.     *     * @return  object     *     * @since   12.3     */	public function enumerateImages($aifrom = null, $aito = null, $aiprefix = null, $aiminsize = null, $aimaxsize = null, $ailimit = null,		$aidir = null, $aisha1 = null, $aisha1base36 = null, array $aiprop = null, $aimime = null)	{		// Build the request.		$path = '?action=query&list=allimages';		if (isset($aifrom))		{			$path .= '&aifrom=' . $aifrom;		}		if (isset($aito))		{			$path .= '&aito=' . $aito;		}		if (isset($aiprefix))		{			$path .= '&aiprefix=' . $aiprefix;		}		if (isset($aiminsize))		{			$path .= '&aiminsize=' . $aiminsize;		}		if (isset($aimaxsize))		{			$path .= '&aimaxsize=' . $aimaxsize;		}		if (isset($ailimit))		{			$path .= '&ailimit=' . $ailimit;		}		if (isset($aidir))		{			$path .= '&aidir=' . $aidir;		}		if (isset($aisha1))		{			$path .= '&aisha1=' . $aisha1;		}		if (isset($aisha1base36))		{			$path .= '&$aisha1base36=' . $aisha1base36;		}		if (isset($aiprop))		{			$path .= '&aiprop=' . $this->buildParameter($aiprop);		}		if (isset($aimime))		{			$path .= '&aimime=' . $aimime;		}		// Send the request.		$response = $this->client->get($this->fetchUrl($path));		return $this->validateResponse($response);	}}
<?php/** * @package     Joomla.Site * @subpackage  com_banners * * @copyright   Copyright (C) 2005 - 2013 Open Source Matters, Inc. All rights reserved. * @license     GNU General Public License version 2 or later; see LICENSE.txt */defined('_JEXEC') or die;JTable::addIncludePath(JPATH_COMPONENT_ADMINISTRATOR . '/tables');/** * Banners model for the Joomla Banners component. * * @package     Joomla.Site * @subpackage  com_banners * @since       1.6 */class BannersModelBanners extends JModelList{	/**	 * Method to get a store id based on model configuration state.	 *	 * This is necessary because the model is used by the component and	 * different modules that might need different sets of data or different	 * ordering requirements.	 *	 * @param   string  $id    A prefix for the store id.	 *	 * @return  string  A store id.	 * @since   1.6	 */	protected function getStoreId($id = '')	{		// Compile the store id.		$id .= ':' . $this->getState('filter.search');		$id .= ':' . $this->getState('filter.tag_search');		$id .= ':' . $this->getState('filter.client_id');		$id .= ':' . serialize($this->getState('filter.category_id'));		$id .= ':' . serialize($this->getState('filter.keywords'));		return parent::getStoreId($id);	}	/**	 * Gets a list of banners	 *	 * @return  array  An array of banner objects.	 * @since   1.6	 */	protected function getListQuery()	{		$db = $this->getDbo();		$query = $db->getQuery(true);		$ordering = $this->getState('filter.ordering');		$tagSearch = $this->getState('filter.tag_search');		$cid = $this->getState('filter.client_id');		$categoryId = $this->getState('filter.category_id');		$keywords = $this->getState('filter.keywords');		$randomise = ($ordering == 'random');		$nullDate = $db->quote($db->getNullDate());		$query->select(			'a.id as id,' .				'a.type as type,' .				'a.name as name,' .				'a.clickurl as clickurl,' .				'a.cid as cid,' .				'a.params as params,' .				'a.custombannercode as custombannercode,' .				'a.track_impressions as track_impressions,' .				'cl.track_impressions as client_track_impressions'		)			->from('#__banners as a')			->join('LEFT', '#__banner_clients AS cl ON cl.id = a.cid')			->where('a.state=1')			->where('(' . $query->currentTimestamp() . ' >= a.publish_up OR a.publish_up = ' . $nullDate . ')')			->where('(' . $query->currentTimestamp() . ' <= a.publish_down OR a.publish_down = ' . $nullDate . ')')			->where('(a.imptotal = 0 OR a.impmade <= a.imptotal)');		if ($cid)		{			$query->join('LEFT', '#__categories as cat ON a.catid = cat.id')				->where('a.cid = ' . (int) $cid)				->where('cl.state = 1');		}		// Filter by a single or group of categories		$categoryId = $this->getState('filter.category_id');		$catid = $this->getState('filter.category_id', array());		if (is_numeric($categoryId))		{			$type = $this->getState('filter.category_id.include', true) ? '= ' : '<> ';			// Add subcategory check			$includeSubcategories = $this->getState('filter.subcategories', false);			$categoryEquals = 'a.catid ' . $type . (int) $categoryId;			if ($includeSubcategories)			{				$levels = (int) $this->getState('filter.max_category_levels', '1');				// Create a subquery for the subcategory list				$subQuery = $db->getQuery(true);				$subQuery->select('sub.id')					->from('#__categories as sub')					->join('INNER', '#__categories as this ON sub.lft > this.lft AND sub.rgt < this.rgt')					->where('this.id = ' . (int) $categoryId)					->where('sub.level <= this.level + ' . $levels);				// Add the subquery to the main query				$query->where('(' . $categoryEquals . ' OR a.catid IN (' . $subQuery->__toString() . '))');			}			else			{				$query->where($categoryEquals);			}		}		elseif ((is_array($categoryId)) && (count($categoryId) > 0))		{			JArrayHelper::toInteger($categoryId);			$categoryId = implode(',', $categoryId);			if ($categoryId != '0')			{				$type = $this->getState('filter.category_id.include', true) ? 'IN' : 'NOT IN';				$query->where('a.catid ' . $type . ' (' . $categoryId . ')');			}		}		if ($tagSearch)		{			if (count($keywords) == 0)			{				$query->where('0');			}			else			{				$temp = array();				$config = JComponentHelper::getParams('com_banners');				$prefix = $config->get('metakey_prefix');				foreach ($keywords as $keyword)				{					$keyword = trim($keyword);					$condition1 = "a.own_prefix=1 AND a.metakey_prefix=SUBSTRING(" . $db->quote($keyword) . ",1,LENGTH( a.metakey_prefix)) OR a.own_prefix=0 AND cl.own_prefix=1 AND cl.metakey_prefix=SUBSTRING(" . $db->quote($keyword) . ",1,LENGTH(cl.metakey_prefix)) OR a.own_prefix=0 AND cl.own_prefix=0 AND " . ($prefix == substr($keyword, 0, strlen($prefix)) ? '1' : '0');					$condition2 = "a.metakey REGEXP '[[:<:]]" . $db->escape($keyword) . "[[:>:]]'";					if ($cid)					{						$condition2 .= " OR cl.metakey REGEXP '[[:<:]]" . $db->escape($keyword) . "[[:>:]]'";					}					if ($catid)					{						$condition2 .= " OR cat.metakey REGEXP '[[:<:]]" . $db->escape($keyword) . "[[:>:]]'";					}					$temp[] = "($condition1) AND ($condition2)";				}				$query->where('(' . implode(' OR ', $temp) . ')');			}		}		// Filter by language		if ($this->getState('filter.language'))		{			$query->where('a.language in (' . $db->quote(JFactory::getLanguage()->getTag()) . ',' . $db->quote('*') . ')');		}		$query->order('a.sticky DESC,' . ($randomise ? 'RAND()' : 'a.ordering'));		return $query;	}	/**	 * Get a list of banners.	 *	 * @return  array	 * @since   1.6	 */	public function getItems()	{		if (!isset($this->cache['items']))		{			$this->cache['items'] = parent::getItems();			foreach ($this->cache['items'] as &$item)			{				$parameters = new JRegistry;				$parameters->loadString($item->params);				$item->params = $parameters;			}		}		return $this->cache['items'];	}	/**	 * Makes impressions on a list of banners	 *	 * @return  void	 * @since   1.6	 */	public function impress()	{		$trackDate = JFactory::getDate()->format('Y-m-d H');		$items = $this->getItems();		$db = $this->getDbo();		$query = $db->getQuery(true);		foreach ($items as $item)		{			// Increment impression made			$id = $item->id;			$query->clear()				->update('#__banners')				->set('impmade = (impmade + 1)')				->where('id = ' . (int) $id);			$db->setQuery($query);			try			{				$db->execute();			}			catch (RuntimeException $e)			{				JError::raiseError(500, $e->getMessage());			}			// track impressions			$trackImpressions = $item->track_impressions;			if ($trackImpressions < 0 && $item->cid)			{				$trackImpressions = $item->client_track_impressions;			}			if ($trackImpressions < 0)			{				$config = JComponentHelper::getParams('com_banners');				$trackImpressions = $config->get('track_impressions');			}			if ($trackImpressions > 0)			{				// is track already created ?				$query->clear()					->select($db->quoteName('count'))					->from('#__banner_tracks')					->where('track_type=1')					->where('banner_id=' . (int) $id)					->where('track_date=' . $db->quote($trackDate));				$db->setQuery($query);				try				{					$db->execute();				}				catch (RuntimeException $e)				{					JError::raiseError(500, $e->getMessage());				}				$count = $db->loadResult();				$query->clear();				if ($count)				{					// update count					$query->update('#__banner_tracks')						->set($db->quoteName('count') . ' = (' . $db->quote('count') . ' + 1)')						->where('track_type=1')						->where('banner_id=' . (int) $id)						->where('track_date=' . $db->quote($trackDate));				}				else				{					// insert new count					//sqlsrv change					$query->insert('#__banner_tracks')						->columns(							array(								$db->quoteName('count'), $db->quoteName('track_type'),								$db->quoteName('banner_id'), $db->quoteName('track_date')							)						)						->values('1, 1, ' . (int) $id . ', ' . $db->quote($trackDate));				}				$db->setQuery($query);				try				{					$db->execute();				}				catch (RuntimeException $e)				{					JError::raiseError(500, $e->getMessage());				}			}		}	}}
<?php/** * @package     Joomla.Administrator * @subpackage  com_cache * * @copyright   Copyright (C) 2005 - 2013 Open Source Matters, Inc. All rights reserved. * @license     GNU General Public License version 2 or later; see LICENSE.txt */defined('_JEXEC') or die;JHtml::_('formbehavior.chosen', 'select');$listOrder	= $this->escape($this->state->get('list.ordering'));$listDirn	= $this->escape($this->state->get('list.direction'));?><form action="<?php echo JRoute::_('index.php?option=com_cache'); ?>" method="post" name="adminForm" id="adminForm">  <?php if (!empty( $this->sidebar)) : ?>    <div id="j-sidebar-container" class="span2">      <?php echo $this->sidebar; ?>    </div>      <div id="j-main-container" class="span10">  <?php else : ?>    <div id="j-main-container">  <?php endif;?>  	<table class="table table-striped">  		<thead>  			<tr>  				<th class="title" width="10">  					<?php echo JText::_('COM_CACHE_NUM'); ?>  				</th>  				<th width="20">  					<input type="checkbox" name="checkall-toggle" value="" title="<?php echo JText::_('JGLOBAL_CHECK_ALL'); ?>" onclick="Joomla.checkAll(this)" />  				</th>  				<th class="title nowrap">  					<?php echo JHtml::_('grid.sort',  'COM_CACHE_GROUP', 'group', $listDirn, $listOrder); ?>  				</th>  				<th width="5%" class="center nowrap">  					<?php echo JHtml::_('grid.sort',  'COM_CACHE_NUMBER_OF_FILES', 'count', $listDirn, $listOrder); ?>  				</th>  				<th width="10%" class="center">  					<?php echo JHtml::_('grid.sort',  'COM_CACHE_SIZE', 'size', $listDirn, $listOrder); ?>  				</th>  			</tr>  		</thead>  		<tfoot>  			<tr>  				<td colspan="6">  				<?php echo $this->pagination->getListFooter(); ?>  				</td>  			</tr>  		</tfoot>  		<tbody>  			<?php  			$i = 0;  			foreach ($this->data as $folder => $item) : ?>  				<tr class="row<?php echo $i % 2; ?>">  					<td>  						<?php echo $this->pagination->getRowOffset($i); ?>  					</td>  					<td>  						<input type="checkbox" id="cb<?php echo $i;?>" name="cid[]" value="<?php echo $item->group; ?>" onclick="Joomla.isChecked(this.checked);" />  					</td>  					<td>  						<strong><?php echo $item->group; ?></strong>  					</td>  					<td class="center">  						<?php echo $item->count; ?>  					</td>  					<td class="center">  						<?php echo JHtml::_('number.bytes', $item->size*1024); ?>  					</td>  				</tr>  			<?php $i++; endforeach; ?>  		</tbody>  	</table>    	<input type="hidden" name="task" value="" />  	<input type="hidden" name="boxchecked" value="0" />  	<input type="hidden" name="client" value="<?php echo $this->client->id;?>" />  	<input type="hidden" name="filter_order" value="<?php echo $listOrder; ?>" />  	<input type="hidden" name="filter_order_Dir" value="<?php echo $listDirn; ?>" />  	<?php echo JHtml::_('form.token'); ?>	</div></form>
<?php/** * @package     Joomla.Platform * @subpackage  Database * * @copyright   Copyright (C) 2005 - 2013 Open Source Matters, Inc. All rights reserved. * @license     GNU General Public License version 2 or later; see LICENSE */defined('JPATH_PLATFORM') or die;/** * Joomla Platform Database Interface * * @package     Joomla.Platform * @subpackage  Database * @since       11.2 */interface JDatabaseInterface{	/**	 * Test to see if the connector is available.	 *	 * @return  boolean  True on success, false otherwise.	 *	 * @since   11.2	 */	public static function isSupported();}/** * Joomla Platform Database Driver Class * * @package     Joomla.Platform * @subpackage  Database * @since       12.1 * * @method      string  q()   q($text, $escape = true)  Alias for quote method * @method      string  qn()  qn($name, $as = null)     Alias for quoteName method */abstract class JDatabaseDriver extends JDatabase implements JDatabaseInterface{	/**	 * The name of the database.	 *	 * @var    string	 * @since  11.4	 */	private $_database;	/**	 * The name of the database driver.	 *	 * @var    string	 * @since  11.1	 */	public $name;	/**	 * @var    resource  The database connection resource.	 * @since  11.1	 */	protected $connection;	/**	 * @var    integer  The number of SQL statements executed by the database driver.	 * @since  11.1	 */	protected $count = 0;	/**	 * @var    resource  The database connection cursor from the last query.	 * @since  11.1	 */	protected $cursor;	/**	 * @var    boolean  The database driver debugging state.	 * @since  11.1	 */	protected $debug = false;	/**	 * @var    integer  The affected row limit for the current SQL statement.	 * @since  11.1	 */	protected $limit = 0;	/**	 * @var    array  The log of executed SQL statements by the database driver.	 * @since  11.1	 */	protected $log = array();	/**	 * @var    string  The character(s) used to quote SQL statement names such as table names or field names,	 *                 etc.  The child classes should define this as necessary.  If a single character string the	 *                 same character is used for both sides of the quoted name, else the first character will be	 *                 used for the opening quote and the second for the closing quote.	 * @since  11.1	 */	protected $nameQuote;	/**	 * @var    string  The null or zero representation of a timestamp for the database driver.  This should be	 *                 defined in child classes to hold the appropriate value for the engine.	 * @since  11.1	 */	protected $nullDate;	/**	 * @var    integer  The affected row offset to apply for the current SQL statement.	 * @since  11.1	 */	protected $offset = 0;	/**	 * @var    array  Passed in upon instantiation and saved.	 * @since  11.1	 */	protected $options;	/**	 * @var    mixed  The current SQL statement to execute.	 * @since  11.1	 */	protected $sql;	/**	 * @var    string  The common database table prefix.	 * @since  11.1	 */	protected $tablePrefix;	/**	 * @var    boolean  True if the database engine supports UTF-8 character encoding.	 * @since  11.1	 */	protected $utf = true;	/**	 * @var         integer  The database error number	 * @since       11.1	 * @deprecated  12.1	 */	protected $errorNum = 0;	/**	 * @var         string  The database error message	 * @since       11.1	 * @deprecated  12.1	 */	protected $errorMsg;	/**	 * @var    array  JDatabaseDriver instances container.	 * @since  11.1	 */	protected static $instances = array();	/**	 * @var    string  The minimum supported database version.	 * @since  12.1	 */	protected static $dbMinimum;	/**	 * Get a list of available database connectors.  The list will only be populated with connectors that both	 * the class exists and the static test method returns true.  This gives us the ability to have a multitude	 * of connector classes that are self-aware as to whether or not they are able to be used on a given system.	 *	 * @return  array  An array of available database connectors.	 *	 * @since   11.1	 */	public static function getConnectors()	{		$connectors = array();		// Get an iterator and loop trough the driver classes.		$iterator = new DirectoryIterator(__DIR__ . '/driver');		foreach ($iterator as $file)		{			$fileName = $file->getFilename();			// Only load for php files.			// Note: DirectoryIterator::getExtension only available PHP >= 5.3.6			if (!$file->isFile() || substr($fileName, strrpos($fileName, '.') + 1) != 'php')			{				continue;			}			// Derive the class name from the type.			$class = str_ireplace('.php', '', 'JDatabaseDriver' . ucfirst(trim($fileName)));			// If the class doesn't exist we have nothing left to do but look at the next type. We did our best.			if (!class_exists($class))			{				continue;			}			// Sweet!  Our class exists, so now we just need to know if it passes its test method.			if ($class::isSupported())			{				// Connector names should not have file extensions.				$connectors[] = str_ireplace('.php', '', $fileName);			}		}		return $connectors;	}	/**	 * Method to return a JDatabaseDriver instance based on the given options.  There are three global options and then	 * the rest are specific to the database driver.  The 'driver' option defines which JDatabaseDriver class is	 * used for the connection -- the default is 'mysqli'.  The 'database' option determines which database is to	 * be used for the connection.  The 'select' option determines whether the connector should automatically select	 * the chosen database.	 *	 * Instances are unique to the given options and new objects are only created when a unique options array is	 * passed into the method.  This ensures that we don't end up with unnecessary database connection resources.	 *	 * @param   array  $options  Parameters to be passed to the database driver.	 *	 * @return  JDatabaseDriver  A database object.	 *	 * @since   11.1	 */	public static function getInstance($options = array())	{		// Sanitize the database connector options.		$options['driver']   = (isset($options['driver'])) ? preg_replace('/[^A-Z0-9_\.-]/i', '', $options['driver']) : 'mysqli';		$options['database'] = (isset($options['database'])) ? $options['database'] : null;		$options['select']   = (isset($options['select'])) ? $options['select'] : true;		// Get the options signature for the database connector.		$signature = md5(serialize($options));		// If we already have a database connector instance for these options then just use that.		if (empty(self::$instances[$signature]))		{			// Derive the class name from the driver.			$class = 'JDatabaseDriver' . ucfirst(strtolower($options['driver']));			// If the class still doesn't exist we have nothing left to do but throw an exception.  We did our best.			if (!class_exists($class))			{				throw new RuntimeException(sprintf('Unable to load Database Driver: %s', $options['driver']));			}			// Create our new JDatabaseDriver connector based on the options given.			try			{				$instance = new $class($options);			}			catch (RuntimeException $e)			{				throw new RuntimeException(sprintf('Unable to connect to the Database: %s', $e->getMessage()));			}			// Set the new connector to the global instances based on signature.			self::$instances[$signature] = $instance;		}		return self::$instances[$signature];	}	/**	 * Splits a string of multiple queries into an array of individual queries.	 *	 * @param   string  $query  Input SQL string with which to split into individual queries.	 *	 * @return  array  The queries from the input string separated into an array.	 *	 * @since   11.1	 */	public static function splitSql($query)	{		$start = 0;		$open = false;		$char = '';		$end = strlen($query);		$queries = array();		for ($i = 0; $i < $end; $i++)		{			$current = substr($query, $i, 1);			if (($current == '"' || $current == '\''))			{				$n = 2;				while (substr($query, $i - $n + 1, 1) == '\\' && $n < $i)				{					$n++;				}				if ($n % 2 == 0)				{					if ($open)					{						if ($current == $char)						{							$open = false;							$char = '';						}					}					else					{						$open = true;						$char = $current;					}				}			}			if (($current == ';' && !$open) || $i == $end - 1)			{				$queries[] = substr($query, $start, ($i - $start + 1));				$start = $i + 1;			}		}		return $queries;	}	/**	 * Magic method to provide method alias support for quote() and quoteName().	 *	 * @param   string  $method  The called method.	 * @param   array   $args    The array of arguments passed to the method.	 *	 * @return  string  The aliased method's return value or null.	 *	 * @since   11.1	 */	public function __call($method, $args)	{		if (empty($args))		{			return;		}		switch ($method)		{			case 'q':				return $this->quote($args[0], isset($args[1]) ? $args[1] : true);				break;			case 'qn':				return $this->quoteName($args[0], isset($args[1]) ? $args[1] : null);				break;		}	}	/**	 * Constructor.	 *	 * @param   array  $options  List of options used to configure the connection	 *	 * @since   11.1	 */	public function __construct($options)	{		// Initialise object variables.		$this->_database = (isset($options['database'])) ? $options['database'] : '';		$this->tablePrefix = (isset($options['prefix'])) ? $options['prefix'] : 'jos_';		$this->count = 0;		$this->errorNum = 0;		$this->log = array();		// Set class options.		$this->options = $options;	}	/**	 * Alter database's character set, obtaining query string from protected member.	 *	 * @param   string  $dbName  The database name that will be altered	 *	 * @return  string  The query that alter the database query string	 *	 * @since   12.2	 * @throws  RuntimeException	 */	public function alterDbCharacterSet($dbName)	{		if (is_null($dbName))		{			throw new RuntimeException('Database name must not be null.');		}		$this->setQuery($this->getAlterDbCharacterSet($dbName));		return $this->execute();	}	/**	 * Connects to the database if needed.	 *	 * @return  void  Returns void if the database connected successfully.	 *	 * @since   12.1	 * @throws  RuntimeException	 */	abstract public function connect();	/**	 * Determines if the connection to the server is active.	 *	 * @return  boolean  True if connected to the database engine.	 *	 * @since   11.1	 */	abstract public function connected();	/**	 * Create a new database using information from $options object, obtaining query string	 * from protected member.	 *	 * @param   stdClass  $options  Object used to pass user and database name to database driver.	 * 									This object must have "db_name" and "db_user" set.	 * @param   boolean   $utf      True if the database supports the UTF-8 character set.	 *	 * @return  string  The query that creates database	 *	 * @since   12.2	 * @throws  RuntimeException	 */	public function createDatabase($options, $utf = true)	{		if (is_null($options))		{			throw new RuntimeException('$options object must not be null.');		}		elseif (empty($options->db_name))		{			throw new RuntimeException('$options object must have db_name set.');		}		elseif (empty($options->db_user))		{			throw new RuntimeException('$options object must have db_user set.');		}		$this->setQuery($this->getCreateDatabaseQuery($options, $utf));		return $this->execute();	}	/**	 * Disconnects the database.	 *	 * @return  void	 *	 * @since   12.1	 */	abstract public function disconnect();	/**	 * Drops a table from the database.	 *	 * @param   string   $table     The name of the database table to drop.	 * @param   boolean  $ifExists  Optionally specify that the table must exist before it is dropped.	 *	 * @return  JDatabaseDriver     Returns this object to support chaining.	 *	 * @since   11.4	 * @throws  RuntimeException	 */	public abstract function dropTable($table, $ifExists = true);	/**	 * Method to escape a string for usage in an SQL statement.	 *	 * @param   string   $text   The string to be escaped.	 * @param   boolean  $extra  Optional parameter to provide extra escaping.	 *	 * @return  string   The escaped string.	 *	 * @since   11.1	 */	abstract public function escape($text, $extra = false);	/**	 * Method to fetch a row from the result set cursor as an array.	 *	 * @param   mixed  $cursor  The optional result set cursor from which to fetch the row.	 *	 * @return  mixed  Either the next row from the result set or false if there are no more rows.	 *	 * @since   11.1	 */	abstract protected function fetchArray($cursor = null);	/**	 * Method to fetch a row from the result set cursor as an associative array.	 *	 * @param   mixed  $cursor  The optional result set cursor from which to fetch the row.	 *	 * @return  mixed  Either the next row from the result set or false if there are no more rows.	 *	 * @since   11.1	 */	abstract protected function fetchAssoc($cursor = null);	/**	 * Method to fetch a row from the result set cursor as an object.	 *	 * @param   mixed   $cursor  The optional result set cursor from which to fetch the row.	 * @param   string  $class   The class name to use for the returned row object.	 *	 * @return  mixed   Either the next row from the result set or false if there are no more rows.	 *	 * @since   11.1	 */	abstract protected function fetchObject($cursor = null, $class = 'stdClass');	/**	 * Method to free up the memory used for the result set.	 *	 * @param   mixed  $cursor  The optional result set cursor from which to fetch the row.	 *	 * @return  void	 *	 * @since   11.1	 */	abstract protected function freeResult($cursor = null);	/**	 * Get the number of affected rows for the previous executed SQL statement.	 *	 * @return  integer  The number of affected rows.	 *	 * @since   11.1	 */	abstract public function getAffectedRows();	/**	 * Return the query string to alter the database character set.	 *	 * @param   string  $dbName  The database name	 *	 * @return  string  The query that alter the database query string	 *	 * @since   12.2	 */	protected function getAlterDbCharacterSet($dbName)	{		$query = 'ALTER DATABASE ' . $this->quoteName($dbName) . ' CHARACTER SET `utf8`';		return $query;	}	/**	 * Return the query string to create new Database.	 * Each database driver, other than MySQL, need to override this member to return correct string.	 *	 * @param   stdClass  $options  Object used to pass user and database name to database driver.	 * 									This object must have "db_name" and "db_user" set.	 * @param   boolean   $utf      True if the database supports the UTF-8 character set.	 *	 * @return  string  The query that creates database	 *	 * @since   12.2	 */	protected function getCreateDatabaseQuery($options, $utf)	{		if ($utf)		{			$query = 'CREATE DATABASE ' . $this->quoteName($options->db_name) . ' CHARACTER SET `utf8`';		}		else		{			$query = 'CREATE DATABASE ' . $this->quoteName($options->db_name);		}		return $query;	}	/**	 * Method to get the database collation in use by sampling a text field of a table in the database.	 *	 * @return  mixed  The collation in use by the database or boolean false if not supported.	 *	 * @since   11.1	 */	abstract public function getCollation();	/**	 * Method that provides access to the underlying database connection. Useful for when you need to call a	 * proprietary method such as postgresql's lo_* methods.	 *	 * @return  resource  The underlying database connection resource.	 *	 * @since   11.1	 */	public function getConnection()	{		return $this->connection;	}	/**	 * Get the total number of SQL statements executed by the database driver.	 *	 * @return  integer	 *	 * @since   11.1	 */	public function getCount()	{		return $this->count;	}	/**	 * Gets the name of the database used by this conneciton.	 *	 * @return  string	 *	 * @since   11.4	 */	protected function getDatabase()	{		return $this->_database;	}	/**	 * Returns a PHP date() function compliant date format for the database driver.	 *	 * @return  string  The format string.	 *	 * @since   11.1	 */	public function getDateFormat()	{		return 'Y-m-d H:i:s';	}	/**	 * Get the database driver SQL statement log.	 *	 * @return  array  SQL statements executed by the database driver.	 *	 * @since   11.1	 */	public function getLog()	{		return $this->log;	}	/**	 * Get the minimum supported database version.	 *	 * @return  string  The minimum version number for the database driver.	 *	 * @since   12.1	 */	public function getMinimum()	{		return static::$dbMinimum;	}	/**	 * Get the null or zero representation of a timestamp for the database driver.	 *	 * @return  string  Null or zero representation of a timestamp.	 *	 * @since   11.1	 */	public function getNullDate()	{		return $this->nullDate;	}	/**	 * Get the number of returned rows for the previous executed SQL statement.	 *	 * @param   resource  $cursor  An optional database cursor resource to extract the row count from.	 *	 * @return  integer   The number of returned rows.	 *	 * @since   11.1	 */	abstract public function getNumRows($cursor = null);	/**	 * Get the common table prefix for the database driver.	 *	 * @return  string  The common database table prefix.	 *	 * @since   11.1	 */	public function getPrefix()	{		return $this->tablePrefix;	}	/**	 * Gets an exporter class object.	 *	 * @return  JDatabaseExporter  An exporter object.	 *	 * @since   12.1	 * @throws  RuntimeException	 */	public function getExporter()	{		// Derive the class name from the driver.		$class = 'JDatabaseExporter' . ucfirst($this->name);		// Make sure we have an exporter class for this driver.		if (!class_exists($class))		{			// If it doesn't exist we are at an impasse so throw an exception.			throw new RuntimeException('Database Exporter not found.');		}		$o = new $class;		$o->setDbo($this);		return $o;	}	/**	 * Gets an importer class object.	 *	 * @return  JDatabaseImporter  An importer object.	 *	 * @since   12.1	 * @throws  RuntimeException	 */	public function getImporter()	{		// Derive the class name from the driver.		$class = 'JDatabaseImporter' . ucfirst($this->name);		// Make sure we have an importer class for this driver.		if (!class_exists($class))		{			// If it doesn't exist we are at an impasse so throw an exception.			throw new RuntimeException('Database Importer not found');		}		$o = new $class;		$o->setDbo($this);		return $o;	}	/**	 * Get the current query object or a new JDatabaseQuery object.	 *	 * @param   boolean  $new  False to return the current query object, True to return a new JDatabaseQuery object.	 *	 * @return  JDatabaseQuery  The current query object or a new object extending the JDatabaseQuery class.	 *	 * @since   11.1	 * @throws  RuntimeException	 */	public function getQuery($new = false)	{		if ($new)		{			// Derive the class name from the driver.			$class = 'JDatabaseQuery' . ucfirst($this->name);			// Make sure we have a query class for this driver.			if (!class_exists($class))			{				// If it doesn't exist we are at an impasse so throw an exception.				throw new RuntimeException('Database Query Class not found.');			}			return new $class($this);		}		else		{			return $this->sql;		}	}	/**	 * Get a new iterator on the current query.	 *	 * @param   string  $column  An option column to use as the iterator key.	 * @param   string  $class   The class of object that is returned.	 *	 * @return  JDatabaseIterator  A new database iterator.	 *	 * @since   12.1	 * @throws  RuntimeException	 */	public function getIterator($column = null, $class = 'stdClass')	{		// Derive the class name from the driver.		$iteratorClass = 'JDatabaseIterator' . ucfirst($this->name);		// Make sure we have an iterator class for this driver.		if (!class_exists($iteratorClass))		{			// If it doesn't exist we are at an impasse so throw an exception.			throw new RuntimeException(sprintf('class *%s* is not defined', $iteratorClass));		}		// Return a new iterator		return new $iteratorClass($this->execute(), $column, $class);	}	/**	 * Retrieves field information about the given tables.	 *	 * @param   string   $table     The name of the database table.	 * @param   boolean  $typeOnly  True (default) to only return field types.	 *	 * @return  array  An array of fields by table.	 *	 * @since   11.1	 * @throws  RuntimeException	 */	abstract public function getTableColumns($table, $typeOnly = true);	/**	 * Shows the table CREATE statement that creates the given tables.	 *	 * @param   mixed  $tables  A table name or a list of table names.	 *	 * @return  array  A list of the create SQL for the tables.	 *	 * @since   11.1	 * @throws  RuntimeException	 */	abstract public function getTableCreate($tables);	/**	 * Retrieves field information about the given tables.	 *	 * @param   mixed  $tables  A table name or a list of table names.	 *	 * @return  array  An array of keys for the table(s).	 *	 * @since   11.1	 * @throws  RuntimeException	 */	abstract public function getTableKeys($tables);	/**	 * Method to get an array of all tables in the database.	 *	 * @return  array  An array of all the tables in the database.	 *	 * @since   11.1	 * @throws  RuntimeException	 */	abstract public function getTableList();	/**	 * Determine whether or not the database engine supports UTF-8 character encoding.	 *	 * @return  boolean  True if the database engine supports UTF-8 character encoding.	 *	 * @since   11.1	 * @deprecated 12.3 Use hasUTFSupport() instead	 */	public function getUTFSupport()	{		JLog::add('JDatabase::getUTFSupport() is deprecated. Use JDatabase::hasUTFSupport() instead.', JLog::WARNING, 'deprecated');		return $this->hasUTFSupport();	}	/**	 * Determine whether or not the database engine supports UTF-8 character encoding.	 *	 * @return  boolean  True if the database engine supports UTF-8 character encoding.	 *	 * @since   12.1	 */	public function hasUTFSupport()	{		return $this->utf;	}	/**	 * Get the version of the database connector	 *	 * @return  string  The database connector version.	 *	 * @since   11.1	 */	abstract public function getVersion();	/**	 * Method to get the auto-incremented value from the last INSERT statement.	 *	 * @return  integer  The value of the auto-increment field from the last inserted row.	 *	 * @since   11.1	 */	abstract public function insertid();	/**	 * Inserts a row into a table based on an object's properties.	 *	 * @param   string  $table    The name of the database table to insert into.	 * @param   object  &$object  A reference to an object whose public properties match the table fields.	 * @param   string  $key      The name of the primary key. If provided the object property is updated.	 *	 * @return  boolean    True on success.	 *	 * @since   11.1	 * @throws  RuntimeException	 */	public function insertObject($table, &$object, $key = null)	{		$fields = array();		$values = array();		// Iterate over the object variables to build the query fields and values.		foreach (get_object_vars($object) as $k => $v)		{			// Only process non-null scalars.			if (is_array($v) or is_object($v) or $v === null)			{				continue;			}			// Ignore any internal fields.			if ($k[0] == '_')			{				continue;			}			// Prepare and sanitize the fields and values for the database query.			$fields[] = $this->quoteName($k);			$values[] = $this->quote($v);		}		// Create the base insert statement.		$query = $this->getQuery(true)			->insert($this->quoteName($table))				->columns($fields)				->values(implode(',', $values));		// Set the query and execute the insert.		$this->setQuery($query);		if (!$this->execute())		{			return false;		}		// Update the primary key if it exists.		$id = $this->insertid();		if ($key && $id && is_string($key))		{			$object->$key = $id;		}		return true;	}	/**	 * Method to check whether the installed database version is supported by the database driver	 *	 * @return  boolean  True if the database version is supported	 *	 * @since   12.1	 */	public function isMinimumVersion()	{		return version_compare($this->getVersion(), static::$dbMinimum) >= 0;	}	/**	 * Method to get the first row of the result set from the database query as an associative array	 * of ['field_name' => 'row_value'].	 *	 * @return  mixed  The return value or null if the query failed.	 *	 * @since   11.1	 * @throws  RuntimeException	 */	public function loadAssoc()	{		$this->connect();		$ret = null;		// Execute the query and get the result set cursor.		if (!($cursor = $this->execute()))		{			return null;		}		// Get the first row from the result set as an associative array.		if ($array = $this->fetchAssoc($cursor))		{			$ret = $array;		}		// Free up system resources and return.		$this->freeResult($cursor);		return $ret;	}	/**	 * Method to get an array of the result set rows from the database query where each row is an associative array	 * of ['field_name' => 'row_value'].  The array of rows can optionally be keyed by a field name, but defaults to	 * a sequential numeric array.	 *	 * NOTE: Chosing to key the result array by a non-unique field name can result in unwanted	 * behavior and should be avoided.	 *	 * @param   string  $key     The name of a field on which to key the result array.	 * @param   string  $column  An optional column name. Instead of the whole row, only this column value will be in	 * the result array.	 *	 * @return  mixed   The return value or null if the query failed.	 *	 * @since   11.1	 * @throws  RuntimeException	 */	public function loadAssocList($key = null, $column = null)	{		$this->connect();		$array = array();		// Execute the query and get the result set cursor.		if (!($cursor = $this->execute()))		{			return null;		}		// Get all of the rows from the result set.		while ($row = $this->fetchAssoc($cursor))		{			$value = ($column) ? (isset($row[$column]) ? $row[$column] : $row) : $row;			if ($key)			{				$array[$row[$key]] = $value;			}			else			{				$array[] = $value;			}		}		// Free up system resources and return.		$this->freeResult($cursor);		return $array;	}	/**	 * Method to get an array of values from the <var>$offset</var> field in each row of the result set from	 * the database query.	 *	 * @param   integer  $offset  The row offset to use to build the result array.	 *	 * @return  mixed    The return value or null if the query failed.	 *	 * @since   11.1	 * @throws  RuntimeException	 */	public function loadColumn($offset = 0)	{		$this->connect();		$array = array();		// Execute the query and get the result set cursor.		if (!($cursor = $this->execute()))		{			return null;		}		// Get all of the rows from the result set as arrays.		while ($row = $this->fetchArray($cursor))		{			$array[] = $row[$offset];		}		// Free up system resources and return.		$this->freeResult($cursor);		return $array;	}	/**	 * Method to get the next row in the result set from the database query as an object.	 *	 * @param   string  $class  The class name to use for the returned row object.	 *	 * @return  mixed   The result of the query as an array, false if there are no more rows.	 *	 * @since   11.1	 * @throws  RuntimeException	 */	public function loadNextObject($class = 'stdClass')	{		JLog::add(__METHOD__ . '() is deprecated. Use JDatabase::getIterator() instead.', JLog::WARNING, 'deprecated');		$this->connect();		static $cursor = null;		// Execute the query and get the result set cursor.		if ( is_null($cursor) )		{			if (!($cursor = $this->execute()))			{				return $this->errorNum ? null : false;			}		}		// Get the next row from the result set as an object of type $class.		if ($row = $this->fetchObject($cursor, $class))		{			return $row;		}		// Free up system resources and return.		$this->freeResult($cursor);		$cursor = null;		return false;	}	/**	 * Method to get the next row in the result set from the database query as an array.	 *	 * @return  mixed  The result of the query as an array, false if there are no more rows.	 *	 * @since   11.1	 * @throws  RuntimeException	 */	public function loadNextRow()	{		JLog::add('JDatabase::loadNextRow() is deprecated. Use JDatabase::getIterator() instead.', JLog::WARNING, 'deprecated');		$this->connect();		static $cursor = null;		// Execute the query and get the result set cursor.		if ( is_null($cursor) )		{			if (!($cursor = $this->execute()))			{				return $this->errorNum ? null : false;			}		}		// Get the next row from the result set as an object of type $class.		if ($row = $this->fetchArray($cursor))		{			return $row;		}		// Free up system resources and return.		$this->freeResult($cursor);		$cursor = null;		return false;	}	/**	 * Method to get the first row of the result set from the database query as an object.	 *	 * @param   string  $class  The class name to use for the returned row object.	 *	 * @return  mixed   The return value or null if the query failed.	 *	 * @since   11.1	 * @throws  RuntimeException	 */	public function loadObject($class = 'stdClass')	{		$this->connect();		$ret = null;		// Execute the query and get the result set cursor.		if (!($cursor = $this->execute()))		{			return null;		}		// Get the first row from the result set as an object of type $class.		if ($object = $this->fetchObject($cursor, $class))		{			$ret = $object;		}		// Free up system resources and return.		$this->freeResult($cursor);		return $ret;	}	/**	 * Method to get an array of the result set rows from the database query where each row is an object.  The array	 * of objects can optionally be keyed by a field name, but defaults to a sequential numeric array.	 *	 * NOTE: Choosing to key the result array by a non-unique field name can result in unwanted	 * behavior and should be avoided.	 *	 * @param   string  $key    The name of a field on which to key the result array.	 * @param   string  $class  The class name to use for the returned row objects.	 *	 * @return  mixed   The return value or null if the query failed.	 *	 * @since   11.1	 * @throws  RuntimeException	 */	public function loadObjectList($key = '', $class = 'stdClass')	{		$this->connect();		$array = array();		// Execute the query and get the result set cursor.		if (!($cursor = $this->execute()))		{			return null;		}		// Get all of the rows from the result set as objects of type $class.		while ($row = $this->fetchObject($cursor, $class))		{			if ($key)			{				$array[$row->$key] = $row;			}			else			{				$array[] = $row;			}		}		// Free up system resources and return.		$this->freeResult($cursor);		return $array;	}	/**	 * Method to get the first field of the first row of the result set from the database query.	 *	 * @return  mixed  The return value or null if the query failed.	 *	 * @since   11.1	 * @throws  RuntimeException	 */	public function loadResult()	{		$this->connect();		$ret = null;		// Execute the query and get the result set cursor.		if (!($cursor = $this->execute()))		{			return null;		}		// Get the first row from the result set as an array.		if ($row = $this->fetchArray($cursor))		{			$ret = $row[0];		}		// Free up system resources and return.		$this->freeResult($cursor);		return $ret;	}	/**	 * Method to get the first row of the result set from the database query as an array.  Columns are indexed	 * numerically so the first column in the result set would be accessible via <var>$row[0]</var>, etc.	 *	 * @return  mixed  The return value or null if the query failed.	 *	 * @since   11.1	 * @throws  RuntimeException	 */	public function loadRow()	{		$this->connect();		$ret = null;		// Execute the query and get the result set cursor.		if (!($cursor = $this->execute()))		{			return null;		}		// Get the first row from the result set as an array.		if ($row = $this->fetchArray($cursor))		{			$ret = $row;		}		// Free up system resources and return.		$this->freeResult($cursor);		return $ret;	}	/**	 * Method to get an array of the result set rows from the database query where each row is an array.  The array	 * of objects can optionally be keyed by a field offset, but defaults to a sequential numeric array.	 *	 * NOTE: Choosing to key the result array by a non-unique field can result in unwanted	 * behavior and should be avoided.	 *	 * @param   string  $key  The name of a field on which to key the result array.	 *	 * @return  mixed   The return value or null if the query failed.	 *	 * @since   11.1	 * @throws  RuntimeException	 */	public function loadRowList($key = null)	{		$this->connect();		$array = array();		// Execute the query and get the result set cursor.		if (!($cursor = $this->execute()))		{			return null;		}		// Get all of the rows from the result set as arrays.		while ($row = $this->fetchArray($cursor))		{			if ($key !== null)			{				$array[$row[$key]] = $row;			}			else			{				$array[] = $row;			}		}		// Free up system resources and return.		$this->freeResult($cursor);		return $array;	}	/**	 * Locks a table in the database.	 *	 * @param   string  $tableName  The name of the table to unlock.	 *	 * @return  JDatabaseDriver     Returns this object to support chaining.	 *	 * @since   11.4	 * @throws  RuntimeException	 */	public abstract function lockTable($tableName);	/**	 * Method to quote and optionally escape a string to database requirements for insertion into the database.	 *	 * @param   string   $text    The string to quote.	 * @param   boolean  $escape  True (default) to escape the string, false to leave it unchanged.	 *	 * @return  string  The quoted input string.	 *	 * @since   11.1	 */	public function quote($text, $escape = true)	{		return '\'' . ($escape ? $this->escape($text) : $text) . '\'';	}	/**	 * Wrap an SQL statement identifier name such as column, table or database names in quotes to prevent injection	 * risks and reserved word conflicts.	 *	 * @param   mixed  $name  The identifier name to wrap in quotes, or an array of identifier names to wrap in quotes.	 *                        Each type supports dot-notation name.	 * @param   mixed  $as    The AS query part associated to $name. It can be string or array, in latter case it has to be	 *                        same length of $name; if is null there will not be any AS part for string or array element.	 *	 * @return  mixed  The quote wrapped name, same type of $name.	 *	 * @since   11.1	 */	public function quoteName($name, $as = null)	{		if (is_string($name))		{			$quotedName = $this->quoteNameStr(explode('.', $name));			$quotedAs = '';			if (!is_null($as))			{				settype($as, 'array');				$quotedAs .= ' AS ' . $this->quoteNameStr($as);			}			return $quotedName . $quotedAs;		}		else		{			$fin = array();			if (is_null($as))			{				foreach ($name as $str)				{					$fin[] = $this->quoteName($str);				}			}			elseif (is_array($name) && (count($name) == count($as)))			{				$count = count($name);				for ($i = 0; $i < $count; $i++)				{					$fin[] = $this->quoteName($name[$i], $as[$i]);				}			}			return $fin;		}	}	/**	 * Quote strings coming from quoteName call.	 *	 * @param   array  $strArr  Array of strings coming from quoteName dot-explosion.	 *	 * @return  string  Dot-imploded string of quoted parts.	 *	 * @since 11.3	 */	protected function quoteNameStr($strArr)	{		$parts = array();		$q = $this->nameQuote;		foreach ($strArr as $part)		{			if (is_null($part))			{				continue;			}			if (strlen($q) == 1)			{				$parts[] = $q . $part . $q;			}			else			{				$parts[] = $q{0} . $part . $q{1};			}		}		return implode('.', $parts);	}	/**	 * This function replaces a string identifier <var>$prefix</var> with the string held is the	 * <var>tablePrefix</var> class variable.	 *	 * @param   string  $query   The SQL statement to prepare.	 * @param   string  $prefix  The common table prefix.	 *	 * @return  string  The processed SQL statement.	 *	 * @since   11.1	 */	public function replacePrefix($query, $prefix = '#__')	{		$escaped = false;		$startPos = 0;		$quoteChar = '';		$literal = '';		$query = trim($query);		$n = strlen($query);		while ($startPos < $n)		{			$ip = strpos($query, $prefix, $startPos);			if ($ip === false)			{				break;			}			$j = strpos($query, "'", $startPos);			$k = strpos($query, '"', $startPos);			if (($k !== false) && (($k < $j) || ($j === false)))			{				$quoteChar = '"';				$j = $k;			}			else			{				$quoteChar = "'";			}			if ($j === false)			{				$j = $n;			}			$literal .= str_replace($prefix, $this->tablePrefix, substr($query, $startPos, $j - $startPos));			$startPos = $j;			$j = $startPos + 1;			if ($j >= $n)			{				break;			}			// Quote comes first, find end of quote			while (true)			{				$k = strpos($query, $quoteChar, $j);				$escaped = false;				if ($k === false)				{					break;				}				$l = $k - 1;				while ($l >= 0 && $query{$l} == '\\')				{					$l--;					$escaped = !$escaped;				}				if ($escaped)				{					$j = $k + 1;					continue;				}				break;			}			if ($k === false)			{				// Error in the query - no end quote; ignore it				break;			}			$literal .= substr($query, $startPos, $k - $startPos + 1);			$startPos = $k + 1;		}		if ($startPos < $n)		{			$literal .= substr($query, $startPos, $n - $startPos);		}		return $literal;	}	/**	 * Renames a table in the database.	 *	 * @param   string  $oldTable  The name of the table to be renamed	 * @param   string  $newTable  The new name for the table.	 * @param   string  $backup    Table prefix	 * @param   string  $prefix    For the table - used to rename constraints in non-mysql databases	 *	 * @return  JDatabaseDriver    Returns this object to support chaining.	 *	 * @since   11.4	 * @throws  RuntimeException	 */	public abstract function renameTable($oldTable, $newTable, $backup = null, $prefix = null);	/**	 * Select a database for use.	 *	 * @param   string  $database  The name of the database to select for use.	 *	 * @return  boolean  True if the database was successfully selected.	 *	 * @since   11.1	 * @throws  RuntimeException	 */	abstract public function select($database);	/**	 * Sets the database debugging state for the driver.	 *	 * @param   boolean  $level  True to enable debugging.	 *	 * @return  boolean  The old debugging level.	 *	 * @since   11.1	 */	public function setDebug($level)	{		$previous = $this->debug;		$this->debug = (bool) $level;		return $previous;	}	/**	 * Sets the SQL statement string for later execution.	 *	 * @param   mixed    $query   The SQL statement to set either as a JDatabaseQuery object or a string.	 * @param   integer  $offset  The affected row offset to set.	 * @param   integer  $limit   The maximum affected rows to set.	 *	 * @return  JDatabaseDriver  This object to support method chaining.	 *	 * @since   11.1	 */	public function setQuery($query, $offset = 0, $limit = 0)	{		$this->sql = $query;		$this->limit = (int) max(0, $limit);		$this->offset = (int) max(0, $offset);		return $this;	}	/**	 * Set the connection to use UTF-8 character encoding.	 *	 * @return  boolean  True on success.	 *	 * @since   11.1	 */	abstract public function setUTF();	/**	 * Method to commit a transaction.	 *	 * @return  void	 *	 * @since   11.1	 * @throws  RuntimeException	 */	abstract public function transactionCommit();	/**	 * Method to roll back a transaction.	 *	 * @return  void	 *	 * @since   11.1	 * @throws  RuntimeException	 */	abstract public function transactionRollback();	/**	 * Method to initialize a transaction.	 *	 * @return  void	 *	 * @since   11.1	 * @throws  RuntimeException	 */	abstract public function transactionStart();	/**	 * Method to truncate a table.	 *	 * @param   string  $table  The table to truncate	 *	 * @return  void	 *	 * @since   11.3	 * @throws  RuntimeException	 */	public function truncateTable($table)	{		$this->setQuery('TRUNCATE TABLE ' . $this->quoteName($table));		$this->execute();	}	/**	 * Updates a row in a table based on an object's properties.	 *	 * @param   string   $table    The name of the database table to update.	 * @param   object   &$object  A reference to an object whose public properties match the table fields.	 * @param   array    $key      The name of the primary key.	 * @param   boolean  $nulls    True to update null fields or false to ignore them.	 *	 * @return  boolean  True on success.	 *	 * @since   11.1	 * @throws  RuntimeException	 */	public function updateObject($table, &$object, $key, $nulls = false)	{		$fields = array();		$where = array();		if (is_string($key))		{			$key = array($key);		}		if (is_object($key))		{			$key = (array) $key;		}		// Create the base update statement.		$statement = 'UPDATE ' . $this->quoteName($table) . ' SET %s WHERE %s';		// Iterate over the object variables to build the query fields/value pairs.		foreach (get_object_vars($object) as $k => $v)		{			// Only process scalars that are not internal fields.			if (is_array($v) or is_object($v) or $k[0] == '_')			{				continue;			}			// Set the primary key to the WHERE clause instead of a field to update.			if (in_array($k, $key))			{				$where[] = $this->quoteName($k) . '=' . $this->quote($v);				continue;			}			// Prepare and sanitize the fields and values for the database query.			if ($v === null)			{				// If the value is null and we want to update nulls then set it.				if ($nulls)				{					$val = 'NULL';				}				// If the value is null and we do not want to update nulls then ignore this field.				else				{					continue;				}			}			// The field is not null so we prep it for update.			else			{				$val = $this->quote($v);			}			// Add the field to be updated.			$fields[] = $this->quoteName($k) . '=' . $val;		}		// We don't have any fields to update.		if (empty($fields))		{			return true;		}		// Set the query and execute the update.		$this->setQuery(sprintf($statement, implode(",", $fields), implode(' AND ', $where)));		return $this->execute();	}	/**	 * Execute the SQL statement.	 *	 * @return  mixed  A database cursor resource on success, boolean false on failure.	 *	 * @since   12.1	 * @throws  RuntimeException	 */	abstract public function execute();	/**	 * Unlocks tables in the database.	 *	 * @return  JDatabaseDriver  Returns this object to support chaining.	 *	 * @since   11.4	 * @throws  RuntimeException	 */	public abstract function unlockTables();}
<?php/** * @package     Joomla.Administrator * @subpackage  com_finder * * @copyright   Copyright (C) 2005 - 2013 Open Source Matters, Inc. All rights reserved. * @license     GNU General Public License version 2 or later; see LICENSE */defined('_JEXEC') or die;JHtml::_('formbehavior.chosen', 'select');JHtml::_('bootstrap.tooltip');$user      = JFactory::getUser();$userId    = $user->get('id');$listOrder = $this->escape($this->state->get('list.ordering'));$listDirn  = $this->escape($this->state->get('list.direction'));JText::script('COM_FINDER_INDEX_CONFIRM_DELETE_PROMPT');?><script type="text/javascript">Joomla.submitbutton = function(pressbutton){	if (pressbutton == 'filters.delete')	{		if (confirm(Joomla.JText._('COM_FINDER_INDEX_CONFIRM_DELETE_PROMPT')))		{			Joomla.submitform(pressbutton);		}		else		{			return false;		}	}	Joomla.submitform(pressbutton);}</script><form action="<?php echo JRoute::_('index.php?option=com_finder&view=filters');?>" method="post" name="adminForm" id="adminForm"><?php if (!empty( $this->sidebar)) : ?>	<div id="j-sidebar-container" class="span2">		<?php echo $this->sidebar; ?>	</div>	<div id="j-main-container" class="span10"><?php else : ?>	<div id="j-main-container"><?php endif;?>		<div id="filter-bar" class="btn-toolbar">			<div class="filter-search btn-group pull-left">				<input type="text" name="filter_search" id="filter_search" placeholder="<?php echo JText::_('COM_FINDER_FILTER_SEARCH_DESCRIPTION'); ?>" value="<?php echo $this->escape($this->state->get('filter.search')); ?>" title="<?php echo JText::_('COM_FINDER_FILTER_SEARCH_DESCRIPTION'); ?>" />			</div>			<div class="btn-group pull-left">				<button class="btn hasTooltip" type="submit" title="<?php echo JText::_('JSEARCH_FILTER_SUBMIT'); ?>"><i class="icon-search"></i></button>				<button class="btn hasTooltip" type="button" title="<?php echo JText::_('JSEARCH_FILTER_CLEAR'); ?>" onclick="document.id('filter_search').value='';this.form.submit();"><i class="icon-remove"></i></button>			</div>		</div>		<div class="clearfix"> </div>		<table class="table table-striped">			<thead>				<tr>					<th width="1%">						<input type="checkbox" name="checkall-toggle" value="" title="<?php echo JText::_('JGLOBAL_CHECK_ALL'); ?>" onclick="Joomla.checkAll(this)" />					</th>					<th class="nowrap">						<?php echo JHtml::_('grid.sort', 'JGLOBAL_TITLE', 'a.title', $listDirn, $listOrder); ?>					</th>					<th width="5%" class="nowrap">						<?php echo JHtml::_('grid.sort', 'JSTATUS', 'a.state', $listDirn, $listOrder); ?>					</th>					<th width="10%" class="center nowrap">						<?php echo JHtml::_('grid.sort', 'JGRID_HEADING_CREATED_BY', 'a.created_by_alias', $listDirn, $listOrder); ?>					</th>					<th width="10%" class="center nowrap">						<?php echo JHtml::_('grid.sort', 'COM_FINDER_FILTER_TIMESTAMP', 'a.created', $listDirn, $listOrder); ?>					</th>					<th width="5%" class="center nowrap">						<?php echo JHtml::_('grid.sort', 'COM_FINDER_FILTER_MAP_COUNT', 'a.map_count', $listDirn, $listOrder); ?>					</th>					<th width="1%" class="center nowrap">						<?php echo JHtml::_('grid.sort', 'JGRID_HEADING_ID', 'a.filter_id', $listDirn, $listOrder); ?>					</th>				</tr>			</thead>			<tbody>				<?php if (count($this->items) == 0) : ?>				<tr class="row0">					<td class="center" colspan="7">						<?php						if ($this->total == 0):							echo JText::_('COM_FINDER_NO_FILTERS');							?>							<a href="<?php echo JRoute::_('index.php?option=com_finder&task=filter.add'); ?>" title="<?php echo JText::_('COM_FINDER_CREATE_FILTER'); ?>">								<?php echo JText::_('COM_FINDER_CREATE_FILTER'); ?>							</a>						<?php						else:							echo JText::_('COM_FINDER_NO_RESULTS');						endif;						?>					</td>				</tr>				<?php endif; ?>				<?php foreach ($this->items as $i => $item):				$canCreate  = $user->authorise('core.create',     'com_finder');				$canEdit    = $user->authorise('core.edit',       'com_finder');				$canCheckin = $user->authorise('core.manage',     'com_checkin') || $item->checked_out == $user->get('id') || $item->checked_out == 0;				$canChange  = $user->authorise('core.edit.state', 'com_finder') && $canCheckin;				?>				<tr class="row<?php echo $i % 2; ?>">					<td class="center">						<?php echo JHtml::_('grid.id', $i, $item->filter_id); ?>					</td>					<td>						<?php if ($item->checked_out)						{							echo JHtml::_('jgrid.checkedout', $i, $item->editor, $item->checked_out_time, 'filters.', $canCheckin);						} ?>						<?php if ($canEdit) { ?>							<a href="<?php echo JRoute::_('index.php?option=com_finder&task=filter.edit&filter_id=' . (int) $item->filter_id); ?>">								<?php echo $this->escape($item->title); ?></a>						<?php } else {								echo $this->escape($item->title);						} ?>					</td>					<td class="center nowrap">						<?php echo JHtml::_('jgrid.published', $item->state, $i, 'filters.', $canChange); ?>					</td>					<td class="center nowrap">						<?php echo $item->created_by_alias ? $item->created_by_alias : $item->user_name; ?>					</td>					<td class="center nowrap">						<?php echo JHtml::_('date', $item->created, JText::_('DATE_FORMAT_LC4')); ?>					</td>					<td class="center nowrap">						<?php echo $item->map_count; ?>					</td>					<td class="center">						<?php echo (int) $item->filter_id; ?>					</td>				</tr>				<?php endforeach; ?>			</tbody>			<tfoot>				<tr>					<td colspan="7" class="nowrap">						<?php echo $this->pagination->getListFooter(); ?>					</td>				</tr>			</tfoot>		</table>		<input type="hidden" name="task" value="" />		<input type="hidden" name="boxchecked" value="0" />		<input type="hidden" name="filter_order" value="<?php echo $this->state->get('list.ordering'); ?>" />		<input type="hidden" name="filter_order_Dir" value="<?php echo $this->state->get('list.direction'); ?>" />		<?php echo JHtml::_('form.token'); ?>	</div></form>
<?php/** * @package     Joomla.Legacy * @subpackage  View * * @copyright   Copyright (C) 2005 - 2013 Open Source Matters, Inc. All rights reserved. * @license     GNU General Public License version 2 or later; see LICENSE */defined('JPATH_PLATFORM') or die;/** * Base class for a Joomla View * * Class holding methods for displaying presentation data. * * @package     Joomla.Legacy * @subpackage  View * @since       12.2 */class JViewLegacy extends JObject{	/**	 * The name of the view	 *	 * @var    array	 */	protected $_name = null;	/**	 * Registered models	 *	 * @var    array	 */	protected $_models = array();	/**	 * The base path of the view	 *	 * @var    string	 */	protected $_basePath = null;	/**	 * The default model	 *	 * @var	string	 */	protected $_defaultModel = null;	/**	 * Layout name	 *	 * @var    string	 */	protected $_layout = 'default';	/**	 * Layout extension	 *	 * @var    string	 */	protected $_layoutExt = 'php';	/**	 * Layout template	 *	 * @var    string	 */	protected $_layoutTemplate = '_';	/**	 * The set of search directories for resources (templates)	 *	 * @var array	 */	protected $_path = array('template' => array(), 'helper' => array());	/**	 * The name of the default template source file.	 *	 * @var string	 */	protected $_template = null;	/**	 * The output of the template script.	 *	 * @var string	 */	protected $_output = null;	/**	 * Callback for escaping.	 *	 * @var string	 * @deprecated 13.3	 */	protected $_escape = 'htmlspecialchars';	/**	 * Charset to use in escaping mechanisms; defaults to urf8 (UTF-8)	 *	 * @var string	 */	protected $_charset = 'UTF-8';	/**	 * Constructor	 *	 * @param   array  $config  A named configuration array for object construction.<br/>	 *                          name: the name (optional) of the view (defaults to the view class name suffix).<br/>	 *                          charset: the character set to use for display<br/>	 *                          escape: the name (optional) of the function to use for escaping strings<br/>	 *                          base_path: the parent path (optional) of the views directory (defaults to the component folder)<br/>	 *                          template_plath: the path (optional) of the layout directory (defaults to base_path + /views/ + view name<br/>	 *                          helper_path: the path (optional) of the helper files (defaults to base_path + /helpers/)<br/>	 *                          layout: the layout (optional) to use to display the view<br/>	 *	 * @since   12.2	 */	public function __construct($config = array())	{		// Set the view name		if (empty($this->_name))		{			if (array_key_exists('name', $config))			{				$this->_name = $config['name'];			}			else			{				$this->_name = $this->getName();			}		}		// Set the charset (used by the variable escaping functions)		if (array_key_exists('charset', $config))		{			JLog::add('Setting a custom charset for escaping is deprecated. Override JViewLegacy::escape() instead.', JLog::WARNING, 'deprecated');			$this->_charset = $config['charset'];		}		// User-defined escaping callback		if (array_key_exists('escape', $config))		{			$this->setEscape($config['escape']);		}		// Set a base path for use by the view		if (array_key_exists('base_path', $config))		{			$this->_basePath = $config['base_path'];		}		else		{			$this->_basePath = JPATH_COMPONENT;		}		// Set the default template search path		if (array_key_exists('template_path', $config))		{			// User-defined dirs			$this->_setPath('template', $config['template_path']);		}		else		{			$this->_setPath('template', $this->_basePath . '/views/' . $this->getName() . '/tmpl');		}		// Set the default helper search path		if (array_key_exists('helper_path', $config))		{			// User-defined dirs			$this->_setPath('helper', $config['helper_path']);		}		else		{			$this->_setPath('helper', $this->_basePath . '/helpers');		}		// Set the layout		if (array_key_exists('layout', $config))		{			$this->setLayout($config['layout']);		}		else		{			$this->setLayout('default');		}		$this->baseurl = JURI::base(true);	}	/**	 * Execute and display a template script.	 *	 * @param   string  $tpl  The name of the template file to parse; automatically searches through the template paths.	 *	 * @return  mixed  A string if successful, otherwise a Error object.	 *	 * @see     fetch()	 * @since   12.2	 */	public function display($tpl = null)	{		$result = $this->loadTemplate($tpl);		if ($result instanceof Exception)		{			return $result;		}		echo $result;	}	/**	 * Assigns variables to the view script via differing strategies.	 *	 * This method is overloaded; you can assign all the properties of	 * an object, an associative array, or a single value by name.	 *	 * You are not allowed to set variables that begin with an underscore;	 * these are either private properties for JView or private variables	 * within the template script itself.	 *	 * <code>	 * $view = new JView;	 *	 * // Assign directly	 * $view->var1 = 'something';	 * $view->var2 = 'else';	 *	 * // Assign by name and value	 * $view->assign('var1', 'something');	 * $view->assign('var2', 'else');	 *	 * // Assign by assoc-array	 * $ary = array('var1' => 'something', 'var2' => 'else');	 * $view->assign($obj);	 *	 * // Assign by object	 * $obj = new stdClass;	 * $obj->var1 = 'something';	 * $obj->var2 = 'else';	 * $view->assign($obj);	 *	 * </code>	 *	 * @return  boolean  True on success, false on failure.	 *	 * @deprecated  13.3 Use native PHP syntax.	 */	public function assign()	{		JLog::add(__METHOD__ . ' is deprecated. Use native PHP syntax.', JLog::WARNING, 'deprecated');		// Get the arguments; there may be 1 or 2.		$arg0 = @func_get_arg(0);		$arg1 = @func_get_arg(1);		// Assign by object		if (is_object($arg0))		{			// Assign public properties			foreach (get_object_vars($arg0) as $key => $val)			{				if (substr($key, 0, 1) != '_')				{					$this->$key = $val;				}			}			return true;		}		// Assign by associative array		if (is_array($arg0))		{			foreach ($arg0 as $key => $val)			{				if (substr($key, 0, 1) != '_')				{					$this->$key = $val;				}			}			return true;		}		// Assign by string name and mixed value.		// We use array_key_exists() instead of isset() because isset()		// fails if the value is set to null.		if (is_string($arg0) && substr($arg0, 0, 1) != '_' && func_num_args() > 1)		{			$this->$arg0 = $arg1;			return true;		}		// $arg0 was not object, array, or string.		return false;	}	/**	 * Assign variable for the view (by reference).	 *	 * You are not allowed to set variables that begin with an underscore;	 * these are either private properties for JView or private variables	 * within the template script itself.	 *	 * <code>	 * $view = new JView;	 *	 * // Assign by name and value	 * $view->assignRef('var1', $ref);	 *	 * // Assign directly	 * $view->ref = &$var1;	 * </code>	 *	 * @param   string  $key   The name for the reference in the view.	 * @param   mixed   &$val  The referenced variable.	 *	 * @return  boolean  True on success, false on failure.	 *	 * @since   12.2	 * @deprecated  13.3  Use native PHP syntax.	 */	public function assignRef($key, &$val)	{		JLog::add(__METHOD__ . ' is deprecated. Use native PHP syntax.', JLog::WARNING, 'deprecated');		if (is_string($key) && substr($key, 0, 1) != '_')		{			$this->$key = &$val;			return true;		}		return false;	}	/**	 * Escapes a value for output in a view script.	 *	 * If escaping mechanism is either htmlspecialchars or htmlentities, uses	 * {@link $_encoding} setting.	 *	 * @param   mixed  $var  The output to escape.	 *	 * @return  mixed  The escaped value.	 *	 * @since   12.2	 */	public function escape($var)	{		if (in_array($this->_escape, array('htmlspecialchars', 'htmlentities')))		{			return call_user_func($this->_escape, $var, ENT_COMPAT, $this->_charset);		}		return call_user_func($this->_escape, $var);	}	/**	 * Method to get data from a registered model or a property of the view	 *	 * @param   string  $property  The name of the method to call on the model or the property to get	 * @param   string  $default   The name of the model to reference or the default value [optional]	 *	 * @return  mixed  The return value of the method	 *	 * @since   12.2	 */	public function get($property, $default = null)	{		// If $model is null we use the default model		if (is_null($default))		{			$model = $this->_defaultModel;		}		else		{			$model = strtolower($default);		}		// First check to make sure the model requested exists		if (isset($this->_models[$model]))		{			// Model exists, let's build the method name			$method = 'get' . ucfirst($property);			// Does the method exist?			if (method_exists($this->_models[$model], $method))			{				// The method exists, let's call it and return what we get				$result = $this->_models[$model]->$method();				return $result;			}		}		// Degrade to JObject::get		$result = parent::get($property, $default);		return $result;	}	/**	 * Method to get the model object	 *	 * @param   string  $name  The name of the model (optional)	 *	 * @return  mixed  JModelLegacy object	 *	 * @since   12.2	 */	public function getModel($name = null)	{		if ($name === null)		{			$name = $this->_defaultModel;		}		return $this->_models[strtolower($name)];	}	/**	 * Get the layout.	 *	 * @return  string  The layout name	 */	public function getLayout()	{		return $this->_layout;	}	/**	 * Get the layout template.	 *	 * @return  string  The layout template name	 */	public function getLayoutTemplate()	{		return $this->_layoutTemplate;	}	/**	 * Method to get the view name	 *	 * The model name by default parsed using the classname, or it can be set	 * by passing a $config['name'] in the class constructor	 *	 * @return  string  The name of the model	 *	 * @since   12.2	 * @throws  Exception	 */	public function getName()	{		if (empty($this->_name))		{			$classname = get_class($this);			$viewpos = strpos($classname, 'View');			if ($viewpos === false)			{				throw new Exception(JText::_('JLIB_APPLICATION_ERROR_VIEW_GET_NAME'), 500);			}			$this->_name = strtolower(substr($classname, $viewpos + 4));		}		return $this->_name;	}	/**	 * Method to add a model to the view.  We support a multiple model single	 * view system by which models are referenced by classname.  A caveat to the	 * classname referencing is that any classname prepended by JModel will be	 * referenced by the name without JModel, eg. JModelCategory is just	 * Category.	 *	 * @param   JModelLegacy  $model    The model to add to the view.	 * @param   boolean       $default  Is this the default model?	 *	 * @return  object   The added model.	 *	 * @since   12.2	 */	public function setModel($model, $default = false)	{		$name = strtolower($model->getName());		$this->_models[$name] = $model;		if ($default)		{			$this->_defaultModel = $name;		}		return $model;	}	/**	 * Sets the layout name to use	 *	 * @param   string  $layout  The layout name or a string in format <template>:<layout file>	 *	 * @return  string  Previous value.	 *	 * @since   12.2	 */	public function setLayout($layout)	{		$previous = $this->_layout;		if (strpos($layout, ':') === false)		{			$this->_layout = $layout;		}		else		{			// Convert parameter to array based on :			$temp = explode(':', $layout);			$this->_layout = $temp[1];			// Set layout template			$this->_layoutTemplate = $temp[0];		}		return $previous;	}	/**	 * Allows a different extension for the layout files to be used	 *	 * @param   string  $value  The extension.	 *	 * @return  string   Previous value	 *	 * @since   12.2	 */	public function setLayoutExt($value)	{		$previous = $this->_layoutExt;		if ($value = preg_replace('#[^A-Za-z0-9]#', '', trim($value)))		{			$this->_layoutExt = $value;		}		return $previous;	}	/**	 * Sets the _escape() callback.	 *	 * @param   mixed  $spec  The callback for _escape() to use.	 *	 * @return  void	 *	 * @since   12.2	 * @deprecated  13.3  Override JViewLegacy::escape() instead.	 */	public function setEscape($spec)	{		JLog::add(__METHOD__ . ' is deprecated. Override JViewLegacy::escape() instead.', JLog::WARNING, 'deprecated');		$this->_escape = $spec;	}	/**	 * Adds to the stack of view script paths in LIFO order.	 *	 * @param   mixed  $path  A directory path or an array of paths.	 *	 * @return  void	 *	 * @since   12.2	 */	public function addTemplatePath($path)	{		$this->_addPath('template', $path);	}	/**	 * Adds to the stack of helper script paths in LIFO order.	 *	 * @param   mixed  $path  A directory path or an array of paths.	 *	 * @return  void	 *	 * @since   12.2	 */	public function addHelperPath($path)	{		$this->_addPath('helper', $path);	}	/**	 * Load a template file -- first look in the templates folder for an override	 *	 * @param   string  $tpl  The name of the template source file; automatically searches the template paths and compiles as needed.	 *	 * @return  string  The output of the the template script.	 *	 * @since   12.2	 * @throws  Exception	 */	public function loadTemplate($tpl = null)	{		// Clear prior output		$this->_output = null;		$template = JFactory::getApplication()->getTemplate();		$layout = $this->getLayout();		$layoutTemplate = $this->getLayoutTemplate();		// Create the template file name based on the layout		$file = isset($tpl) ? $layout . '_' . $tpl : $layout;		// Clean the file name		$file = preg_replace('/[^A-Z0-9_\.-]/i', '', $file);		$tpl = isset($tpl) ? preg_replace('/[^A-Z0-9_\.-]/i', '', $tpl) : $tpl;		// Load the language file for the template		$lang = JFactory::getLanguage();		$lang->load('tpl_' . $template, JPATH_BASE, null, false, false)			|| $lang->load('tpl_' . $template, JPATH_THEMES . "/$template", null, false, false)			|| $lang->load('tpl_' . $template, JPATH_BASE, $lang->getDefault(), false, false)			|| $lang->load('tpl_' . $template, JPATH_THEMES . "/$template", $lang->getDefault(), false, false);		// Change the template folder if alternative layout is in different template		if (isset($layoutTemplate) && $layoutTemplate != '_' && $layoutTemplate != $template)		{			$this->_path['template'] = str_replace($template, $layoutTemplate, $this->_path['template']);		}		// Load the template script		jimport('joomla.filesystem.path');		$filetofind = $this->_createFileName('template', array('name' => $file));		$this->_template = JPath::find($this->_path['template'], $filetofind);		// If alternate layout can't be found, fall back to default layout		if ($this->_template == false)		{			$filetofind = $this->_createFileName('', array('name' => 'default' . (isset($tpl) ? '_' . $tpl : $tpl)));			$this->_template = JPath::find($this->_path['template'], $filetofind);		}		if ($this->_template != false)		{			// Unset so as not to introduce into template scope			unset($tpl);			unset($file);			// Never allow a 'this' property			if (isset($this->this))			{				unset($this->this);			}			// Start capturing output into a buffer			ob_start();			// Include the requested template filename in the local scope			// (this will execute the view logic).			include $this->_template;			// Done with the requested template; get the buffer and			// clear it.			$this->_output = ob_get_contents();			ob_end_clean();			return $this->_output;		}		else		{			throw new Exception(JText::sprintf('JLIB_APPLICATION_ERROR_LAYOUTFILE_NOT_FOUND', $file), 500);		}	}	/**	 * Load a helper file	 *	 * @param   string  $hlp  The name of the helper source file automatically searches the helper paths and compiles as needed.	 *	 * @return  void	 *	 * @since   12.2	 */	public function loadHelper($hlp = null)	{		// Clean the file name		$file = preg_replace('/[^A-Z0-9_\.-]/i', '', $hlp);		// Load the template script		jimport('joomla.filesystem.path');		$helper = JPath::find($this->_path['helper'], $this->_createFileName('helper', array('name' => $file)));		if ($helper != false)		{			// Include the requested template filename in the local scope			include_once $helper;		}	}	/**	 * Sets an entire array of search paths for templates or resources.	 *	 * @param   string  $type  The type of path to set, typically 'template'.	 * @param   mixed   $path  The new search path, or an array of search paths.  If null or false, resets to the current directory only.	 *	 * @return  void	 *	 * @since   12.2	 */	protected function _setPath($type, $path)	{		$component = JApplicationHelper::getComponentName();		$app = JFactory::getApplication();		// Clear out the prior search dirs		$this->_path[$type] = array();		// Actually add the user-specified directories		$this->_addPath($type, $path);		// Always add the fallback directories as last resort		switch (strtolower($type))		{			case 'template':				// Set the alternative template search dir				if (isset($app))				{					$component = preg_replace('/[^A-Z0-9_\.-]/i', '', $component);					$fallback = JPATH_THEMES . '/' . $app->getTemplate() . '/html/' . $component . '/' . $this->getName();					$this->_addPath('template', $fallback);				}				break;		}	}	/**	 * Adds to the search path for templates and resources.	 *	 * @param   string  $type  The type of path to add.	 * @param   mixed   $path  The directory or stream, or an array of either, to search.	 *	 * @return  void	 *	 * @since   12.2	 */	protected function _addPath($type, $path)	{		// Just force to array		settype($path, 'array');		// Loop through the path directories		foreach ($path as $dir)		{			// No surrounding spaces allowed!			$dir = trim($dir);			// Add trailing separators as needed			if (substr($dir, -1) != DIRECTORY_SEPARATOR)			{				// Directory				$dir .= DIRECTORY_SEPARATOR;			}			// Add to the top of the search dirs			array_unshift($this->_path[$type], $dir);		}	}	/**	 * Create the filename for a resource	 *	 * @param   string  $type   The resource type to create the filename for	 * @param   array   $parts  An associative array of filename information	 *	 * @return  string  The filename	 *	 * @since   12.2	 */	protected function _createFileName($type, $parts = array())	{		$filename = '';		switch ($type)		{			case 'template':				$filename = strtolower($parts['name']) . '.' . $this->_layoutExt;				break;			default:				$filename = strtolower($parts['name']) . '.php';				break;		}		return $filename;	}}
<?php/** * @package     Joomla.Administrator * @subpackage  com_finder * * @copyright   Copyright (C) 2005 - 2013 Open Source Matters, Inc. All rights reserved. * @license     GNU General Public License version 2 or later; see LICENSE */defined('_JEXEC') or die;jimport('joomla.filesystem.file');/** * Indexer class supporting PostgreSQL for the Finder indexer package. * * @package     Joomla.Administrator * @subpackage  com_finder * @since       3.0 */class FinderIndexerDriverPostgresql extends FinderIndexer{	/**	 * Method to index a content item.	 *	 * @param   FinderIndexerResult  $item    The content item to index.	 * @param   string               $format  The format of the content. [optional]	 *	 * @return  integer  The ID of the record in the links table.	 *	 * @since   3.0	 * @throws  Exception on database error.	 */	public function index($item, $format = 'html')	{		// Mark beforeIndexing in the profiler.		static::$profiler ? static::$profiler->mark('beforeIndexing') : null;		$db = JFactory::getDbo();		$nd = $db->getNullDate();		// Check if the item is in the database.		$query = $db->getQuery(true)			->select($db->quoteName('link_id') . ', ' . $db->quoteName('md5sum'))			->from($db->quoteName('#__finder_links'))			->where($db->quoteName('url') . ' = ' . $db->quote($item->url));		// Load the item  from the database.		$db->setQuery($query);		$link = $db->loadObject();		// Get the indexer state.		$state = static::getState();		// Get the signatures of the item.		$curSig = static::getSignature($item);		$oldSig = isset($link->md5sum) ? $link->md5sum : null;		// Get the other item information.		$linkId = empty($link->link_id) ? null : $link->link_id;		$isNew = empty($link->link_id) ? true : false;		// Check the signatures. If they match, the item is up to date.		if (!$isNew && $curSig == $oldSig)		{			return $linkId;		}		/*		 * If the link already exists, flush all the term maps for the item.		 * Maps are stored in 16 tables so we need to iterate through and flush		 * each table one at a time.		 */		if (!$isNew)		{			for ($i = 0; $i <= 15; $i++)			{				// Flush the maps for the link.				$query->clear()					->delete($db->quoteName('#__finder_links_terms' . dechex($i)))					->where($db->quoteName('link_id') . ' = ' . (int) $linkId);				$db->setQuery($query);				$db->execute();			}			// Remove the taxonomy maps.			FinderIndexerTaxonomy::removeMaps($linkId);		}		// Mark afterUnmapping in the profiler.		static::$profiler ? static::$profiler->mark('afterUnmapping') : null;		// Perform cleanup on the item data.		$item->publish_start_date = (int) $item->publish_start_date != 0 ? $item->publish_start_date : $nd;		$item->publish_end_date = (int) $item->publish_end_date != 0 ? $item->publish_end_date : $nd;		$item->start_date = (int) $item->start_date != 0 ? $item->start_date : $nd;		$item->end_date = (int) $item->end_date != 0 ? $item->end_date : $nd;		// Prepare the item description.		$item->description = FinderIndexerHelper::parse($item->summary);		/*		 * Now, we need to enter the item into the links table. If the item		 * already exists in the database, we need to use an UPDATE query.		 * Otherwise, we need to use an INSERT to get the link id back.		 */		if ($isNew)		{			$columnsArray = array(				$db->quoteName('url'), $db->quoteName('route'), $db->quoteName('title'), $db->quoteName('description'),				$db->quoteName('indexdate'), $db->quoteName('published'), $db->quoteName('state'), $db->quoteName('access'),				$db->quoteName('language'), $db->quoteName('type_id'), $db->quoteName('object'), $db->quoteName('publish_start_date'),				$db->quoteName('publish_end_date'), $db->quoteName('start_date'), $db->quoteName('end_date'), $db->quoteName('list_price'),				$db->quoteName('sale_price')			);			// Insert the link.			$query->clear()				->insert($db->quoteName('#__finder_links'))				->columns($columnsArray)				->values(				$db->quote($item->url) . ', '				. $db->quote($item->route) . ', '				. $db->quote($item->title) . ', '				. $db->quote($item->description) . ', '				. $query->currentTimestamp() . ', '				. '1, '				. (int) $item->state . ', '				. (int) $item->access . ', '				. $db->quote($item->language) . ', '				. (int) $item->type_id . ', '				. $db->quote(serialize($item)) . ', '				. $db->quote($item->publish_start_date) . ', '				. $db->quote($item->publish_end_date) . ', '				. $db->quote($item->start_date) . ', '				. $db->quote($item->end_date) . ', '				. (double) ($item->list_price ? $item->list_price : 0) . ', '				. (double) ($item->sale_price ? $item->sale_price : 0)			);			$db->setQuery($query);			$db->execute();			// Get the link id.			$linkId = (int) $db->insertid();		}		else		{			// Update the link.			$query->clear()				->update($db->quoteName('#__finder_links'))				->set($db->quoteName('route') . ' = ' . $db->quote($item->route))				->set($db->quoteName('title') . ' = ' . $db->quote($item->title))				->set($db->quoteName('description') . ' = ' . $db->quote($item->description))				->set($db->quoteName('indexdate') . ' = ' . $query->currentTimestamp())				->set($db->quoteName('state') . ' = ' . (int) $item->state)				->set($db->quoteName('access') . ' = ' . (int) $item->access)				->set($db->quoteName('language') . ' = ' . $db->quote($item->language))				->set($db->quoteName('type_id') . ' = ' . (int) $item->type_id)				->set($db->quoteName('object') . ' = ' . $db->quote(serialize($item)))				->set($db->quoteName('publish_start_date') . ' = ' . $db->quote($item->publish_start_date))				->set($db->quoteName('publish_end_date') . ' = ' . $db->quote($item->publish_end_date))				->set($db->quoteName('start_date') . ' = ' . $db->quote($item->start_date))				->set($db->quoteName('end_date') . ' = ' . $db->quote($item->end_date))				->set($db->quoteName('list_price') . ' = ' . (double) ($item->list_price ? $item->list_price : 0))				->set($db->quoteName('sale_price') . ' = ' . (double) ($item->sale_price ? $item->sale_price : 0))				->where('link_id = ' . (int) $linkId);			$db->setQuery($query);			$db->execute();		}		// Set up the variables we will need during processing.		$tokens = array();		$count = 0;		// Mark afterLinking in the profiler.		static::$profiler ? static::$profiler->mark('afterLinking') : null;		// Truncate the tokens tables.		$db->truncateTable('#__finder_tokens');		// Truncate the tokens aggregate table.		$db->truncateTable('#__finder_tokens_aggregate');		/*		 * Process the item's content. The items can customize their		 * processing instructions to define extra properties to process		 * or rearrange how properties are weighted.		 */		foreach ($item->getInstructions() as $group => $properties)		{			// Iterate through the properties of the group.			foreach ($properties as $property)			{				// Check if the property exists in the item.				if (empty($item->$property))				{					continue;				}				// Tokenize the property.				if (is_array($item->$property))				{					// Tokenize an array of content and add it to the database.					foreach ($item->$property as $ip)					{						// If the group is path, we need to a few extra processing						// steps to strip the extension and convert slashes and dashes						// to spaces.						if ($group === static::PATH_CONTEXT)						{							$ip = JFile::stripExt($ip);							$ip = str_replace('/', ' ', $ip);							$ip = str_replace('-', ' ', $ip);						}						// Tokenize a string of content and add it to the database.						$count += $this->tokenizeToDB($ip, $group, $item->language, $format);						// Check if we're approaching the memory limit of the token table.						if ($count > static::$state->options->get('memory_table_limit', 30000))						{							$this->toggleTables(false);						}					}				}				else				{					// If the group is path, we need to a few extra processing					// steps to strip the extension and convert slashes and dashes					// to spaces.					if ($group === static::PATH_CONTEXT)					{						$item->$property = JFile::stripExt($item->$property);						$item->$property = str_replace('/', ' ', $item->$property);						$item->$property = str_replace('-', ' ', $item->$property);					}					// Tokenize a string of content and add it to the database.					$count += $this->tokenizeToDB($item->$property, $group, $item->language, $format);					// Check if we're approaching the memory limit of the token table.					if ($count > static::$state->options->get('memory_table_limit', 30000))					{						$this->toggleTables(false);					}				}			}		}		/*		 * Process the item's taxonomy. The items can customize their		 * taxonomy mappings to define extra properties to map.		 */		foreach ($item->getTaxonomy() as $branch => $nodes)		{			// Iterate through the nodes and map them to the branch.			foreach ($nodes as $node)			{				// Add the node to the tree.				$nodeId = FinderIndexerTaxonomy::addNode($branch, $node->title, $node->state, $node->access);				// Add the link => node map.				FinderIndexerTaxonomy::addMap($linkId, $nodeId);				// Tokenize the node title and add them to the database.				$count += $this->tokenizeToDB($node->title, static::META_CONTEXT, $item->language, $format);			}		}		// Mark afterProcessing in the profiler.		static::$profiler ? static::$profiler->mark('afterProcessing') : null;		/*		 * At this point, all of the item's content has been parsed, tokenized		 * and inserted into the #__finder_tokens table. Now, we need to		 * aggregate all the data into that table into a more usable form. The		 * aggregated data will be inserted into #__finder_tokens_aggregate		 * table.		 */		$query	= 'INSERT INTO ' . $db->quoteName('#__finder_tokens_aggregate') .				' (' . $db->quoteName('term_id') .				', ' . $db->quoteName('term') .				', ' . $db->quoteName('stem') .				', ' . $db->quoteName('common') .				', ' . $db->quoteName('phrase') .				', ' . $db->quoteName('term_weight') .				', ' . $db->quoteName('context') .				', ' . $db->quoteName('context_weight') .				', ' . $db->quoteName('language') . ')' .				' SELECT' .				' t.term_id, t1.term, t1.stem, t1.common, t1.phrase, t1.weight, t1.context,' .				' ROUND( t1.weight * COUNT( t2.term ) * %F, 8 ) AS context_weight, t1.language' .				' FROM (' .				'   SELECT DISTINCT t1.term, t1.stem, t1.common, t1.phrase, t1.weight, t1.context, t1.language' .				'   FROM ' . $db->quoteName('#__finder_tokens') . ' AS t1' .				'   WHERE t1.context = %d' .				' ) AS t1' .				' JOIN ' . $db->quoteName('#__finder_tokens') . ' AS t2 ON t2.term = t1.term' .				' LEFT JOIN ' . $db->quoteName('#__finder_terms') . ' AS t ON t.term = t1.term' .				' WHERE t2.context = %d' .				' GROUP BY t1.term, t.term_id, t1.term, t1.stem, t1.common, t1.phrase, t1.weight, t1.context, t1.language' .				' ORDER BY t1.term DESC';		// Iterate through the contexts and aggregate the tokens per context.		foreach ($state->weights as $context => $multiplier)		{			// Run the query to aggregate the tokens for this context..			$db->setQuery(sprintf($query, $multiplier, $context, $context));			$db->execute();		}		// Mark afterAggregating in the profiler.		static::$profiler ? static::$profiler->mark('afterAggregating') : null;		/*		 * When we pulled down all of the aggregate data, we did a LEFT JOIN		 * over the terms table to try to find all the term ids that		 * already exist for our tokens. If any of the rows in the aggregate		 * table have a term of 0, then no term record exists for that		 * term so we need to add it to the terms table.		 */		/* Emulation of IGNORE INTO behaviour */		$db->setQuery(			' SELECT ta.term' .			' FROM ' . $db->quoteName('#__finder_tokens_aggregate') . ' AS ta' .			' WHERE ta.term_id = 0'		);		if ($db->loadRow() == null)		{			$db->setQuery(				'INSERT INTO ' . $db->quoteName('#__finder_terms') .				' (' . $db->quoteName('term') .				', ' . $db->quoteName('stem') .				', ' . $db->quoteName('common') .				', ' . $db->quoteName('phrase') .				', ' . $db->quoteName('weight') .				', ' . $db->quoteName('soundex') .				', ' . $db->quoteName('language') . ')' .				' SELECT ta.term, ta.stem, ta.common, ta.phrase, ta.term_weight, SOUNDEX(ta.term), ta.language' .				' FROM ' . $db->quoteName('#__finder_tokens_aggregate') . ' AS ta' .				' WHERE ta.term_id = 0' .				' GROUP BY ta.term, ta.stem, ta.common, ta.phrase, ta.term_weight, SOUNDEX(ta.term), ta.language'			);			$db->execute();		}		/*		 * Now, we just inserted a bunch of new records into the terms table		 * so we need to go back and update the aggregate table with all the		 * new term ids.		 */		$query = $db->getQuery(true)			->update($db->quoteName('#__finder_tokens_aggregate') . ' AS ta')			->join('INNER', $db->quoteName('#__finder_terms') . ' AS t ON t.term = ta.term')			->set('ta.term_id = t.term_id')			->where('ta.term_id = 0');		$db->setQuery($query);		$db->execute();		// Mark afterTerms in the profiler.		static::$profiler ? static::$profiler->mark('afterTerms') : null;		/*		 * After we've made sure that all of the terms are in the terms table		 * and the aggregate table has the correct term ids, we need to update		 * the links counter for each term by one.		 */		$query->clear()			->update($db->quoteName('#__finder_terms') . ' AS t')			->join('INNER', $db->quoteName('#__finder_tokens_aggregate') . ' AS ta ON ta.term_id = t.term_id')			->set('t.' . $db->quoteName('links') . ' = t.links + 1');		$db->setQuery($query);		$db->execute();		// Mark afterTerms in the profiler.		static::$profiler ? static::$profiler->mark('afterTerms') : null;		/*		 * Before we can insert all of the mapping rows, we have to figure out		 * which mapping table the rows need to be inserted into. The mapping		 * table for each term is based on the first character of the md5 of		 * the first character of the term. In php, it would be expressed as		 * substr(md5(substr($token, 0, 1)), 0, 1)		 */		$query->clear()			->update($db->quoteName('#__finder_tokens_aggregate'))			->set($db->quoteName('map_suffix') . ' = SUBSTR(MD5(SUBSTR(' . $db->quoteName('term') . ', 1, 1)), 1, 1)');		$db->setQuery($query);		$db->execute();		/*		 * At this point, the aggregate table contains a record for each		 * term in each context. So, we're going to pull down all of that		 * data while grouping the records by term and add all of the		 * sub-totals together to arrive at the final total for each token for		 * this link. Then, we insert all of that data into the appropriate		 * mapping table.		 */		for ($i = 0; $i <= 15; $i++)		{			// Get the mapping table suffix.			$suffix = dechex($i);			/*			 * We have to run this query 16 times, one for each link => term			 * mapping table.			 */			$db->setQuery(				'INSERT INTO ' . $db->quoteName('#__finder_links_terms' . $suffix) .				' (' . $db->quoteName('link_id') .				', ' . $db->quoteName('term_id') .				', ' . $db->quoteName('weight') . ')' .				' SELECT ' . (int) $linkId . ', ' . $db->quoteName('term_id') . ',' .				' ROUND(SUM(' . $db->quoteName('context_weight') . '), 8)' .				' FROM ' . $db->quoteName('#__finder_tokens_aggregate') .				' WHERE ' . $db->quoteName('map_suffix') . ' = ' . $db->quote($suffix) .				' GROUP BY ' . $db->quoteName('term') .				' ORDER BY ' . $db->quoteName('term') . ' DESC'			);			$db->execute();		}		// Mark afterMapping in the profiler.		static::$profiler ? static::$profiler->mark('afterMapping') : null;		// Update the signature.		$query->clear()			->update($db->quoteName('#__finder_links'))			->set($db->quoteName('md5sum') . ' = ' . $db->quote($curSig))			->where($db->quoteName('link_id') . ' = ' . $db->quote($linkId));		$db->setQuery($query);		$db->execute();		// Mark afterSigning in the profiler.		static::$profiler ? static::$profiler->mark('afterSigning') : null;		// Truncate the tokens tables.		$db->truncateTable('#__finder_tokens');		// Truncate the tokens aggregate table.		$db->truncateTable('#__finder_tokens_aggregate');		// Toggle the token tables back to memory tables.		$this->toggleTables(true);		// Mark afterTruncating in the profiler.		static::$profiler ? static::$profiler->mark('afterTruncating') : null;		return $linkId;	}	/**	 * Method to remove a link from the index.	 *	 * @param   integer  $linkId  The id of the link.	 *	 * @return  boolean  True on success.	 *	 * @since   2.5	 * @throws  Exception on database error.	 */	public function remove($linkId)	{		$db = JFactory::getDbo();		$query = $db->getQuery(true);		// Get the indexer state.		$state = static::getState();		// Update the link counts and remove the mapping records.		for ($i = 0; $i <= 15; $i++)		{			// Update the link counts for the terms.			$query->update($db->quoteName('#__finder_terms') . ' AS t')				->join('INNER', $db->quoteName('#__finder_links_terms' . dechex($i)) . ' AS m ON m.term_id = t.term_id')				->set('t.links = t.links - 1')				->where('m.link_id = ' . $db->quote((int) $linkId));			$db->setQuery($query);			$db->execute();			// Remove all records from the mapping tables.			$query->clear()				->delete($db->quoteName('#__finder_links_terms' . dechex($i)))				->where($db->quoteName('link_id') . ' = ' . (int) $linkId);			$db->setQuery($query);			$db->execute();		}		// Delete all orphaned terms.		$query->clear()			->delete($db->quoteName('#__finder_terms'))			->where($db->quoteName('links') . ' <= 0');		$db->setQuery($query);		$db->execute();		// Delete the link from the index.		$query->clear()			->delete($db->quoteName('#__finder_links'))			->where($db->quoteName('link_id') . ' = ' . $db->quote((int) $linkId));		$db->setQuery($query);		$db->execute();		// Remove the taxonomy maps.		FinderIndexerTaxonomy::removeMaps($linkId);		// Remove the orphaned taxonomy nodes.		FinderIndexerTaxonomy::removeOrphanNodes();		return true;	}	/**	 * Method to optimize the index. We use this method to remove unused terms	 * and any other optimizations that might be necessary.	 *	 * @return  boolean  True on success.	 *	 * @since   2.5	 * @throws  Exception on database error.	 */	public function optimize()	{		// Get the database object.		$db = JFactory::getDbo();		$query = $db->getQuery(true);		// Delete all orphaned terms.		$query->delete($db->quoteName('#__finder_terms'))			->where($db->quoteName('links') . ' <= 0');		$db->setQuery($query);		$db->execute();		// Optimize the links table.		$db->setQuery('VACUUM ' . $db->quoteName('#__finder_links'));		$db->execute();		$db->setQuery('REINDEX TABLE ' . $db->quoteName('#__finder_links'));		$db->execute();		for ($i = 0; $i <= 15; $i++)		{			// Optimize the terms mapping table.			$db->setQuery('VACUUM ' . $db->quoteName('#__finder_links_terms' . dechex($i)));			$db->execute();			$db->setQuery('REINDEX TABLE ' . $db->quoteName('#__finder_links_terms' . dechex($i)));			$db->execute();		}		// Optimize the terms mapping table.		$db->setQuery('REINDEX TABLE ' . $db->quoteName('#__finder_links_terms'));		$db->execute();		// Remove the orphaned taxonomy nodes.		FinderIndexerTaxonomy::removeOrphanNodes();		// Optimize the taxonomy mapping table.		$db->setQuery('REINDEX TABLE ' . $db->quoteName('#__finder_taxonomy_map'));		$db->execute();		return true;	}	/**	 * Method to add a set of tokens to the database.	 *	 * @param   mixed  $tokens   An array or single FinderIndexerToken object.	 * @param   mixed  $context  The context of the tokens. See context constants. [optional]	 *	 * @return  integer  The number of tokens inserted into the database.	 *	 * @since   2.5	 * @throws  Exception on database error.	 */	protected function addTokensToDB($tokens, $context = '')	{		// Get the database object.		$db = JFactory::getDbo();		$query = $db->getQuery(true);		// Force tokens to an array.		$tokens = is_array($tokens) ? $tokens : array($tokens);		// Count the number of token values.		$values = 0;		// Insert the tokens into the database.		$query->insert($db->quoteName('#__finder_tokens'))			->columns(				array(					$db->quoteName('term'),					$db->quoteName('stem'),					$db->quoteName('common'),					$db->quoteName('phrase'),					$db->quoteName('weight'),					$db->quoteName('context'),					$db->quoteName('language')				)			);		// Iterate through the tokens to create SQL value sets.		foreach ($tokens as $token)		{			$query->values(				$db->quote($token->term) . ', '					. $db->quote($token->stem) . ', '					. (int) $token->common . ', '					. (int) $token->phrase . ', '					. (float) $token->weight . ', '					. (int) $context . ', '					. $db->quote($token->language)			);			$values++;		}		$db->setQuery($query);		$db->execute();		return $values;	}	/**	 * Method to switch the token tables from Memory tables to MyISAM tables	 * when they are close to running out of memory.	 *	 * @param   boolean  $memory  Flag to control how they should be toggled.	 *	 * @return  boolean  True on success.	 *	 * @since   2.5	 * @throws  Exception on database error.	 */	protected function toggleTables($memory)	{		return true;	}}
<?php/** * @package     Joomla.Administrator * @subpackage  com_installer * * @copyright   Copyright (C) 2005 - 2013 Open Source Matters, Inc. All rights reserved. * @license     GNU General Public License version 2 or later; see LICENSE.txt */defined('_JEXEC') or die;?><tr class="<?php echo "row".$this->item->index % 2; ?>" <?php echo $this->item->style; ?>>	<td><?php echo $this->pagination->getRowOffset($this->item->index); ?></td>	<td>			<input type="checkbox" id="cb<?php echo $this->item->index;?>" name="eid[]" value="<?php echo $this->item->extension_id; ?>" onclick="Joomla.isChecked(this.checked);" <?php echo $this->item->cbd; ?> /><!--		<input type="checkbox" id="cb<?php echo $this->item->index;?>" name="eid" value="<?php echo $this->item->extension_id; ?>" onclick="Joomla.isChecked(this.checked);" <?php echo $this->item->cbd; ?> />-->		<span class="bold"><?php echo $this->item->name; ?></span>	</td>	<td>		<?php echo $this->item->type ?>	</td>	<td class="center">		<?php if (!$this->item->element) : ?>		<strong>X</strong>		<?php else : ?>		<a href="index.php?option=com_installer&amp;type=manage&amp;task=<?php echo $this->item->task; ?>&amp;eid[]=<?php echo $this->item->extension_id; ?>&amp;limitstart=<?php echo $this->pagination->limitstart; ?>&amp;<?php echo JSession::getFormToken();?>=1"><?php echo JHtml::_('image', 'images/'.$this->item->img, $this->item->alt, array('title' => $this->item->action)); ?></a>		<?php endif; ?>	</td>	<td class="center"><?php echo @$this->item->folder != '' ? $this->item->folder : 'N/A'; ?></td>	<td class="center"><?php echo @$this->item->client != '' ? $this->item->client : 'N/A'; ?></td>	<td>		<span class="editlinktip hasTip" title="<?php echo addslashes(htmlspecialchars(JText::_('COM_INSTALLER_AUTHOR_INFORMATION').'::'.$this->item->author_info)); ?>">			<?php echo @$this->item->author != '' ? $this->item->author : '&#160;'; ?>		</span>	</td></tr>
<?php/** * @package     Joomla.Administrator * @subpackage  com_installer * * @copyright   Copyright (C) 2005 - 2013 Open Source Matters, Inc. All rights reserved. * @license     GNU General Public License version 2 or later; see LICENSE.txt */defined('_JEXEC') or die;JHtml::_('behavior.multiselect');JHtml::_('formbehavior.chosen', 'select');JHtml::_('bootstrap.tooltip');$listOrder	= $this->escape($this->state->get('list.ordering'));$listDirn	= $this->escape($this->state->get('list.direction'));?><div id="installer-manage"><form action="<?php echo JRoute::_('index.php?option=com_installer&view=manage');?>" method="post" name="adminForm" id="adminForm">	<?php if (!empty( $this->sidebar)) : ?>		<div id="j-sidebar-container" class="span2">			<?php echo $this->sidebar; ?>		</div>		<div id="j-main-container" class="span10">	<?php else : ?>		<div id="j-main-container">	<?php endif;?>	<?php if ($this->showMessage) : ?>		<?php echo $this->loadTemplate('message'); ?>	<?php endif; ?>	<?php if ($this->ftp) : ?>		<?php echo $this->loadTemplate('ftp'); ?>	<?php endif; ?>		<div id="filter-bar" class="btn-toolbar">			<div class="btn-group pull-right hidden-phone">				<label for="limit" class="element-invisible"><?php echo JText::_('JFIELD_PLG_SEARCH_SEARCHLIMIT_DESC');?></label>				<?php echo $this->pagination->getLimitBox(); ?>			</div>			<div class="filter-search btn-group pull-left">				<input type="text" name="filter_search" placeholder="<?php echo JText::_('JSEARCH_FILTER_LABEL'); ?>" id="filter_search" value="<?php echo $this->escape($this->state->get('filter.search')); ?>" title="<?php echo JText::_('JSEARCH_FILTER'); ?>" />			</div>			<div class="btn-group pull-left">				<button class="btn tip hasTooltip" type="submit" title="<?php echo JText::_('JSEARCH_FILTER_SUBMIT'); ?>"><i class="icon-search"></i></button>				<button class="btn tip hasTooltip" type="button" onclick="document.id('filter_search').value='';this.form.submit();" title="<?php echo JText::_('JSEARCH_FILTER_CLEAR'); ?>"><i class="icon-remove"></i></button>			</div>		</div>		<div class="clearfix"> </div>		<?php if (count($this->items)) : ?>		<table class="table table-striped">			<thead>				<tr>					<th width="20">						<input type="checkbox" name="checkall-toggle" value="" title="<?php echo JText::_('JGLOBAL_CHECK_ALL'); ?>" onclick="Joomla.checkAll(this)" />					</th>					<th class="nowrap">						<?php echo JHtml::_('grid.sort', 'COM_INSTALLER_HEADING_NAME', 'name', $listDirn, $listOrder); ?>					</th>					<th>						<?php echo JHtml::_('grid.sort', 'COM_INSTALLER_HEADING_LOCATION', 'client_id', $listDirn, $listOrder); ?>					</th>					<th width="10%" class="center">						<?php echo JHtml::_('grid.sort', 'JSTATUS', 'status', $listDirn, $listOrder); ?>					</th>					<th>						<?php echo JHtml::_('grid.sort', 'COM_INSTALLER_HEADING_TYPE', 'type', $listDirn, $listOrder); ?>					</th>					<th width="10%" class="center">						<?php echo JText::_('JVERSION'); ?>					</th>					<th width="10%">						<?php echo JText::_('JDATE'); ?>					</th>					<th width="15%">						<?php echo JText::_('JAUTHOR'); ?>					</th>					<th>						<?php echo JHtml::_('grid.sort', 'COM_INSTALLER_HEADING_FOLDER', 'folder', $listDirn, $listOrder); ?>					</th>					<th width="10">						<?php echo JHtml::_('grid.sort', 'COM_INSTALLER_HEADING_ID', 'extension_id', $listDirn, $listOrder); ?>					</th>				</tr>			</thead>			<tfoot>				<tr>					<td colspan="11">						<?php echo $this->pagination->getListFooter(); ?>					</td>				</tr>			</tfoot>			<tbody>			<?php foreach ($this->items as $i => $item) : ?>				<tr class="row<?php echo $i % 2; if ($item->status == 2) echo ' protected';?>">					<td>						<?php echo JHtml::_('grid.id', $i, $item->extension_id); ?>					</td>					<td>						<span class="bold hasTip" title="<?php echo htmlspecialchars($item->name.'::'.$item->description); ?>">							<?php echo $item->name; ?>						</span>					</td>					<td class="center">						<?php echo $item->client; ?>					</td>					<td class="center">						<?php if (!$item->element) : ?>						<strong>X</strong>						<?php else : ?>							<?php echo JHtml::_('InstallerHtml.Manage.state', $item->status, $i, $item->status < 2, 'cb'); ?>						<?php endif; ?>					</td>					<td class="center">						<?php echo JText::_('COM_INSTALLER_TYPE_' . $item->type); ?>					</td>					<td class="center">						<?php echo @$item->version != '' ? $item->version : '&#160;'; ?>					</td>					<td class="center">						<?php echo @$item->creationDate != '' ? $item->creationDate : '&#160;'; ?>					</td>					<td class="center">						<span class="editlinktip hasTip" title="<?php echo addslashes(htmlspecialchars(JText::_('COM_INSTALLER_AUTHOR_INFORMATION').'::'.$item->author_info)); ?>">							<?php echo @$item->author != '' ? $item->author : '&#160;'; ?>						</span>					</td>					<td class="center">						<?php echo @$item->folder != '' ? $item->folder : JText::_('COM_INSTALLER_TYPE_NONAPPLICABLE'); ?>					</td>					<td>						<?php echo $item->extension_id ?>					</td>				</tr>			<?php endforeach; ?>			</tbody>		</table>		<?php endif; ?>		<input type="hidden" name="task" value="" />		<input type="hidden" name="boxchecked" value="0" />		<input type="hidden" name="filter_order" value="<?php echo $listOrder; ?>" />		<input type="hidden" name="filter_order_Dir" value="<?php echo $listDirn; ?>" />		<?php echo JHtml::_('form.token'); ?>	<!-- End Content -->	</div></form></div>
<?php/** * @package     Joomla.Administrator * @subpackage  mod_login * * @copyright   Copyright (C) 2005 - 2013 Open Source Matters, Inc. All rights reserved. * @license     GNU General Public License version 2 or later; see LICENSE.txt */defined('_JEXEC') or die;JHtml::_('behavior.keepalive');JHtml::_('bootstrap.tooltip');JHtml::_('formbehavior.chosen');$document = JFactory::getDocument();$mainDirection = $document->direction == 'rtl' ? 'right' : 'left';$altDirection  = $document->direction == 'rtl' ? 'left' : 'right';?><form action="<?php echo JRoute::_('index.php', true, $params->get('usesecure')); ?>" method="post" id="form-login" class="form-inline">	<fieldset class="loginform">		<div class="control-group">			<div class="controls">				<div class="input-prepend input-append">					<span class="add-on">						<i class="icon-user hasTooltip" data-placement="<?php echo $mainDirection; ?>" title="<?php echo JText::_('JGLOBAL_USERNAME'); ?>"></i>						<label for="mod-login-username" class="element-invisible">							<?php echo JText::_('JGLOBAL_USERNAME'); ?>						</label>					</span>					<input name="username" tabindex="1" id="mod-login-username" type="text" class="input-medium" placeholder="<?php echo JText::_('JGLOBAL_USERNAME'); ?>" size="15"/>					<a href="<?php echo JUri::root(); ?>index.php?option=com_users&view=remind" class="btn width-auto hasTooltip" data-placement="<?php echo $altDirection; ?>" title="<?php echo JText::_('MOD_LOGIN_REMIND'); ?>">						<i class="icon-help" title="<?php echo JText::_('MOD_LOGIN_REMIND'); ?>"></i>					</a>				</div>			</div>		</div>		<div class="control-group">			<div class="controls">				<div class="input-prepend input-append">					<span class="add-on">						<i class="icon-lock hasTooltip" data-placement="<?php echo $mainDirection; ?>" title="<?php echo JText::_('JGLOBAL_PASSWORD'); ?>"></i>						<label for="mod-login-password" class="element-invisible">							<?php echo JText::_('JGLOBAL_PASSWORD'); ?>						</label>					</span>					<input name="passwd" tabindex="2" id="mod-login-password" type="password" class="input-medium" placeholder="<?php echo JText::_('JGLOBAL_PASSWORD'); ?>" size="15"/>					<a href="<?php echo JUri::root(); ?>index.php?option=com_users&view=reset" class="btn width-auto hasTooltip" data-placement="<?php echo $altDirection; ?>" title="<?php echo JText::_('MOD_LOGIN_RESET'); ?>">						<i class="icon-help" title="<?php echo JText::_('MOD_LOGIN_RESET'); ?>"></i>					</a>				</div>			</div>		</div>		<div class="control-group">			<div class="controls">				<div class="input-prepend">					<span class="add-on">						<i class="icon-comment hasTooltip" data-placement="<?php echo $mainDirection; ?>" class="hasTooltip" title="<?php echo JText::_('MOD_LOGIN_LANGUAGE'); ?>"></i>						<label for="lang" class="element-invisible">							<?php echo JText::_('MOD_LOGIN_LANGUAGE'); ?>						</label>					</span>					<?php echo $langs; ?>				</div>			</div>		</div>		<div class="control-group">			<div class="controls">				<div class="btn-group pull-left">					<button tabindex="3" class="btn btn-primary btn-large">						<i class="icon-lock icon-white"></i> <?php echo JText::_('MOD_LOGIN_LOGIN'); ?>					</button>				</div>			</div>		</div>		<input type="hidden" name="option" value="com_login"/>		<input type="hidden" name="task" value="login"/>		<input type="hidden" name="return" value="<?php echo $return; ?>"/>		<?php echo JHtml::_('form.token'); ?>	</fieldset></form>
<?php/** * @package     Joomla.Site * @subpackage  com_content * * @copyright   Copyright (C) 2005 - 2013 Open Source Matters, Inc. All rights reserved. * @license     GNU General Public License version 2 or later; see LICENSE.txt */defined('_JEXEC') or die;/** * Content Component Category Tree * * @package     Joomla.Site * @subpackage  com_content * @since       1.6 */class ContentCategories extends JCategories{	public function __construct($options = array())	{		$options['table'] = '#__content';		$options['extension'] = 'com_content';		parent::__construct($options);	}}
<?php/** * @package     Joomla.Administrator * @subpackage  com_contact * * @copyright   Copyright (C) 2005 - 2013 Open Source Matters, Inc. All rights reserved. * @license     GNU General Public License version 2 or later; see LICENSE.txt */defined('_JEXEC') or die;/** * View class for a list of contacts. * * @package     Joomla.Administrator * @subpackage  com_contact * @since       1.6 */class ContactViewContacts extends JViewLegacy{	protected $items;	protected $pagination;	protected $state;	/**	 * Display the view	 *	 * @return  void	 */	public function display($tpl = null)	{		$this->items		= $this->get('Items');		$this->pagination	= $this->get('Pagination');		$this->state		= $this->get('State');		ContactHelper::addSubmenu('contacts');		// Check for errors.		if (count($errors = $this->get('Errors')))		{			JError::raiseError(500, implode("\n", $errors));			return false;		}		// Preprocess the list of items to find ordering divisions.		// TODO: Complete the ordering stuff with nested sets		foreach ($this->items as &$item)		{			$item->order_up = true;			$item->order_dn = true;		}		$this->addToolbar();		$this->sidebar = JHtmlSidebar::render();		parent::display($tpl);	}	/**	 * Add the page title and toolbar.	 *	 * @since   1.6	 */	protected function addToolbar()	{		require_once JPATH_COMPONENT.'/helpers/contact.php';		$canDo	= ContactHelper::getActions($this->state->get('filter.category_id'));		$user	= JFactory::getUser();		// Get the toolbar object instance		$bar = JToolBar::getInstance('toolbar');		JToolbarHelper::title(JText::_('COM_CONTACT_MANAGER_CONTACTS'), 'contact.png');		if ($canDo->get('core.create') || (count($user->getAuthorisedCategories('com_contact', 'core.create'))) > 0)		{			JToolbarHelper::addNew('contact.add');		}		if (($canDo->get('core.edit')) || ($canDo->get('core.edit.own')))		{			JToolbarHelper::editList('contact.edit');		}		if ($canDo->get('core.edit.state'))		{			JToolbarHelper::publish('contacts.publish', 'JTOOLBAR_PUBLISH', true);			JToolbarHelper::unpublish('contacts.unpublish', 'JTOOLBAR_UNPUBLISH', true);			JToolbarHelper::archiveList('contacts.archive');			JToolbarHelper::checkin('contacts.checkin');		}		if ($this->state->get('filter.published') == -2 && $canDo->get('core.delete'))		{			JToolbarHelper::deleteList('', 'contacts.delete', 'JTOOLBAR_EMPTY_TRASH');		}		elseif ($canDo->get('core.edit.state'))		{			JToolbarHelper::trash('contacts.trash');		}		// Add a batch button		if ($user->authorise('core.edit'))		{			JHtml::_('bootstrap.modal', 'collapseModal');			$title = JText::_('JTOOLBAR_BATCH');			$dhtml = "<button data-toggle=\"modal\" data-target=\"#collapseModal\" class=\"btn btn-small\">						<i class=\"icon-checkbox-partial\" title=\"$title\"></i>						$title</button>";			$bar->appendButton('Custom', $dhtml, 'batch');		}		if ($canDo->get('core.admin'))		{			JToolbarHelper::preferences('com_contact');		}		JToolbarHelper::help('JHELP_COMPONENTS_CONTACTS_CONTACTS');		JHtmlSidebar::setAction('index.php?option=com_contact');		JHtmlSidebar::addFilter(			JText::_('JOPTION_SELECT_PUBLISHED'),			'filter_published',			JHtml::_('select.options', JHtml::_('jgrid.publishedOptions'), 'value', 'text', $this->state->get('filter.published'), true)		);		JHtmlSidebar::addFilter(			JText::_('JOPTION_SELECT_CATEGORY'),			'filter_category_id',			JHtml::_('select.options', JHtml::_('category.options', 'com_contact'), 'value', 'text', $this->state->get('filter.category_id'))		);		JHtmlSidebar::addFilter(			JText::_('JOPTION_SELECT_ACCESS'),			'filter_access',			JHtml::_('select.options', JHtml::_('access.assetgroups'), 'value', 'text', $this->state->get('filter.access'))		);		JHtmlSidebar::addFilter(			JText::_('JOPTION_SELECT_LANGUAGE'),			'filter_language',			JHtml::_('select.options', JHtml::_('contentlanguage.existing', true, true), 'value', 'text', $this->state->get('filter.language'))		);		JHtmlSidebar::addFilter(		'-' . JText::_('JSELECT') . ' ' . JText::_('JTAG') . '-',		'filter_tag',		JHtml::_('select.options', JHtml::_('tag.options', true, true), 'value', 'text', $this->state->get('filter.tag'))		);	}	/**	 * Returns an array of fields the table can be sorted by	 *	 * @return  array  Array containing the field name to sort by as the key and display text as value	 *	 * @since   3.0	 */	protected function getSortFields()	{		return array(			'a.ordering' => JText::_('JGRID_HEADING_ORDERING'),			'a.published' => JText::_('JSTATUS'),			'a.name' => JText::_('JGLOBAL_TITLE'),			'category_title' => JText::_('JCATEGORY'),			'ul.name' => JText::_('COM_CONTACT_FIELD_LINKED_USER_LABEL'),			'a.featured' => JText::_('JFEATURED'),			'a.access' => JText::_('JGRID_HEADING_ACCESS'),			'a.language' => JText::_('JGRID_HEADING_LANGUAGE'),			'a.id' => JText::_('JGRID_HEADING_ID')		);	}}
<?php/** * @package     Joomla.Platform * @subpackage  Cache * * @copyright   Copyright (C) 2005 - 2013 Open Source Matters, Inc. All rights reserved. * @license     GNU General Public License version 2 or later; see LICENSE */defined('JPATH_PLATFORM') or die;/** * File cache storage handler * * @package     Joomla.Platform * @subpackage  Cache * @since       11.1 */class JCacheStorageFile extends JCacheStorage{	/**	 * @var    string	 * @since  11.1	 */	protected $_root;	/**	 * Constructor	 *	 * @param   array  $options  Optional parameters	 *	 * @since   11.1	 */	public function __construct($options = array())	{		parent::__construct($options);		$this->_root = $options['cachebase'];	}	// NOTE: raw php calls are up to 100 times faster than JFile or JFolder	/**	 * Get cached data from a file by id and group	 *	 * @param   string   $id         The cache data id	 * @param   string   $group      The cache data group	 * @param   boolean  $checkTime  True to verify cache time expiration threshold	 *	 * @return  mixed  Boolean false on failure or a cached data string	 *	 * @since   11.1	 */	public function get($id, $group, $checkTime = true)	{		$data = false;		$path = $this->_getFilePath($id, $group);		if ($checkTime == false || ($checkTime == true && $this->_checkExpire($id, $group) === true))		{			if (file_exists($path))			{				$data = file_get_contents($path);				if ($data)				{					// Remove the initial die() statement					$data = str_replace('<?php die("Access Denied"); ?>#x#', '', $data);				}			}			return $data;		}		else		{			return false;		}	}	/**	 * Get all cached data	 *	 * @return  array  The cached data	 *	 * @since   11.1	 */	public function getAll()	{		parent::getAll();		$path = $this->_root;		$folders = $this->_folders($path);		$data = array();		foreach ($folders as $folder)		{			$files = array();			$files = $this->_filesInFolder($path . '/' . $folder);			$item = new JCacheStorageHelper($folder);			foreach ($files as $file)			{				$item->updateSize(filesize($path . '/' . $folder . '/' . $file) / 1024);			}			$data[$folder] = $item;		}		return $data;	}	/**	 * Store the data to a file by id and group	 *	 * @param   string  $id     The cache data id	 * @param   string  $group  The cache data group	 * @param   string  $data   The data to store in cache	 *	 * @return  boolean  True on success, false otherwise	 *	 * @since   11.1	 */	public function store($id, $group, $data)	{		$written = false;		$path = $this->_getFilePath($id, $group);		$die = '<?php die("Access Denied"); ?>#x#';		// Prepend a die string		$data = $die . $data;		$_fileopen = @fopen($path, "wb");		if ($_fileopen)		{			$len = strlen($data);			@fwrite($_fileopen, $data, $len);			$written = true;		}		// Data integrity check		if ($written && ($data == file_get_contents($path)))		{			return true;		}		else		{			return false;		}	}	/**	 * Remove a cached data file by id and group	 *	 * @param   string  $id     The cache data id	 * @param   string  $group  The cache data group	 *	 * @return  boolean  True on success, false otherwise	 *	 * @since   11.1	 */	public function remove($id, $group)	{		$path = $this->_getFilePath($id, $group);		if (!@unlink($path))		{			return false;		}		return true;	}	/**	 * Clean cache for a group given a mode.	 *	 * @param   string  $group  The cache data group	 * @param   string  $mode   The mode for cleaning cache [group|notgroup]	 * group mode     : cleans all cache in the group	 * notgroup mode  : cleans all cache not in the group	 *	 * @return  boolean  True on success, false otherwise	 *	 * @since   11.1	 */	public function clean($group, $mode = null)	{		$return = true;		$folder = $group;		if (trim($folder) == '')		{			$mode = 'notgroup';		}		switch ($mode)		{			case 'notgroup':				$folders = $this->_folders($this->_root);				for ($i = 0, $n = count($folders); $i < $n; $i++)				{					if ($folders[$i] != $folder)					{						$return |= $this->_deleteFolder($this->_root . '/' . $folders[$i]);					}				}				break;			case 'group':			default:				if (is_dir($this->_root . '/' . $folder))				{					$return = $this->_deleteFolder($this->_root . '/' . $folder);				}				break;		}		return $return;	}	/**	 * Garbage collect expired cache data	 *	 * @return  boolean  True on success, false otherwise.	 *	 * @since   11.1	 */	public function gc()	{		$result = true;		// Files older than lifeTime get deleted from cache		$files = $this->_filesInFolder($this->_root, '', true, true, array('.svn', 'CVS', '.DS_Store', '__MACOSX', 'index.html'));		foreach ($files as $file)		{			$time = @filemtime($file);			if (($time + $this->_lifetime) < $this->_now || empty($time))			{				$result |= @unlink($file);			}		}		return $result;	}	/**	 * Test to see if the cache storage is available.	 *	 * @return  boolean  True on success, false otherwise.	 *	 * @since   12.1	 */	public static function isSupported()	{		$conf = JFactory::getConfig();		return is_writable($conf->get('cache_path', JPATH_CACHE));	}	/**	 * Lock cached item	 *	 * @param   string   $id        The cache data id	 * @param   string   $group     The cache data group	 * @param   integer  $locktime  Cached item max lock time	 *	 * @return  boolean  True on success, false otherwise.	 *	 * @since   11.1	 */	public function lock($id, $group, $locktime)	{		$returning = new stdClass;		$returning->locklooped = false;		$looptime = $locktime * 10;		$path = $this->_getFilePath($id, $group);		$_fileopen = @fopen($path, "r+b");		if ($_fileopen)		{			$data_lock = @flock($_fileopen, LOCK_EX);		}		else		{			$data_lock = false;		}		if ($data_lock === false)		{			$lock_counter = 0;			// Loop until you find that the lock has been released.			// That implies that data get from other thread has finished			while ($data_lock === false)			{				if ($lock_counter > $looptime)				{					$returning->locked = false;					$returning->locklooped = true;					break;				}				usleep(100);				$data_lock = @flock($_fileopen, LOCK_EX);				$lock_counter++;			}		}		$returning->locked = $data_lock;		return $returning;	}	/**	 * Unlock cached item	 *	 * @param   string  $id     The cache data id	 * @param   string  $group  The cache data group	 *	 * @return  boolean  True on success, false otherwise.	 *	 * @since   11.1	 */	public function unlock($id, $group = null)	{		$path = $this->_getFilePath($id, $group);		$_fileopen = @fopen($path, "r+b");		if ($_fileopen)		{			$ret = @flock($_fileopen, LOCK_UN);			@fclose($_fileopen);		}		return $ret;	}	/**	 * Check to make sure cache is still valid, if not, delete it.	 *	 * @param   string  $id     Cache key to expire.	 * @param   string  $group  The cache data group.	 *	 * @return  boolean  False if not valid	 *	 * @since   11.1	 */	protected function _checkExpire($id, $group)	{		$path = $this->_getFilePath($id, $group);		// Check prune period		if (file_exists($path))		{			$time = @filemtime($path);			if (($time + $this->_lifetime) < $this->_now || empty($time))			{				@unlink($path);				return false;			}			return true;		}		return false;	}	/**	 * Get a cache file path from an id/group pair	 *	 * @param   string  $id     The cache data id	 * @param   string  $group  The cache data group	 *	 * @return  string   The cache file path	 *	 * @since   11.1	 */	protected function _getFilePath($id, $group)	{		$name = $this->_getCacheId($id, $group);		$dir = $this->_root . '/' . $group;		// If the folder doesn't exist try to create it		if (!is_dir($dir))		{			// Make sure the index file is there			$indexFile = $dir . '/index.html';			@ mkdir($dir) && file_put_contents($indexFile, '<!DOCTYPE html><title></title>');		}		// Make sure the folder exists		if (!is_dir($dir))		{			return false;		}		return $dir . '/' . $name . '.php';	}	/**	 * Quickly delete a folder of files	 *	 * @param   string  $path  The path to the folder to delete.	 *	 * @return  boolean  True on success.	 *	 * @since   11.1	 */	protected function _deleteFolder($path)	{		// Sanity check		if (!$path || !is_dir($path) || empty($this->_root))		{			// Bad programmer! Bad Bad programmer!			JLog::add('JCacheStorageFile::_deleteFolder ' . JText::_('JLIB_FILESYSTEM_ERROR_DELETE_BASE_DIRECTORY'), JLog::WARNING, 'jerror');			return false;		}		$path = $this->_cleanPath($path);		// Check to make sure path is inside cache folder, we do not want to delete Joomla root!		$pos = strpos($path, $this->_cleanPath($this->_root));		if ($pos === false || $pos > 0)		{			JLog::add('JCacheStorageFile::_deleteFolder' . JText::sprintf('JLIB_FILESYSTEM_ERROR_PATH_IS_NOT_A_FOLDER', $path), JLog::WARNING, 'jerror');			return false;		}		// Remove all the files in folder if they exist; disable all filtering		$files = $this->_filesInFolder($path, '.', false, true, array(), array());		if (!empty($files) && !is_array($files))		{			if (@unlink($files) !== true)			{				return false;			}		}		elseif (!empty($files) && is_array($files))		{			foreach ($files as $file)			{				$file = $this->_cleanPath($file);				// In case of restricted permissions we zap it one way or the other				// as long as the owner is either the webserver or the ftp				if (@unlink($file))				{					// Do nothing				}				else				{					$filename = basename($file);					JLog::add('JCacheStorageFile::_deleteFolder' . JText::sprintf('JLIB_FILESYSTEM_DELETE_FAILED', $filename), JLog::WARNING, 'jerror');					return false;				}			}		}		// Remove sub-folders of folder; disable all filtering		$folders = $this->_folders($path, '.', false, true, array(), array());		foreach ($folders as $folder)		{			if (is_link($folder))			{				// Don't descend into linked directories, just delete the link.				if (@unlink($folder) !== true)				{					return false;				}			}			elseif ($this->_deleteFolder($folder) !== true)			{				return false;			}		}		// In case of restricted permissions we zap it one way or the other		// as long as the owner is either the webserver or the ftp		if (@rmdir($path))		{			$ret = true;		}		else		{			JLog::add('JCacheStorageFile::_deleteFolder' . JText::sprintf('JLIB_FILESYSTEM_ERROR_FOLDER_DELETE', $path), JLog::WARNING, 'jerror');			$ret = false;		}		return $ret;	}	/**	 * Function to strip additional / or \ in a path name	 *	 * @param   string  $path  The path to clean	 * @param   string  $ds    Directory separator (optional)	 *	 * @return  string  The cleaned path	 *	 * @since   11.1	 */	protected function _cleanPath($path, $ds = DIRECTORY_SEPARATOR)	{		$path = trim($path);		if (empty($path))		{			$path = $this->_root;		}		else		{			// Remove double slashes and backslahses and convert all slashes and backslashes to DIRECTORY_SEPARATOR			$path = preg_replace('#[/\\\\]+#', $ds, $path);		}		return $path;	}	/**	 * Utility function to quickly read the files in a folder.	 *	 * @param   string   $path           The path of the folder to read.	 * @param   string   $filter         A filter for file names.	 * @param   mixed    $recurse        True to recursively search into sub-folders, or an	 *                                   integer to specify the maximum depth.	 * @param   boolean  $fullpath       True to return the full path to the file.	 * @param   array    $exclude        Array with names of files which should not be shown in	 *                                   the result.	 * @param   array    $excludefilter  Array of folder names to exclude	 *	 * @return  array    Files in the given folder.	 *	 * @since   11.1	 */	protected function _filesInFolder($path, $filter = '.', $recurse = false, $fullpath = false		, $exclude = array('.svn', 'CVS', '.DS_Store', '__MACOSX'), $excludefilter = array('^\..*', '.*~'))	{		$arr = array();		// Check to make sure the path valid and clean		$path = $this->_cleanPath($path);		// Is the path a folder?		if (!is_dir($path))		{			JLog::add('JCacheStorageFile::_filesInFolder' . JText::sprintf('JLIB_FILESYSTEM_ERROR_PATH_IS_NOT_A_FOLDER', $path), JLog::WARNING, 'jerror');			return false;		}		// Read the source directory.		if (!($handle = @opendir($path)))		{			return $arr;		}		if (count($excludefilter))		{			$excludefilter = '/(' . implode('|', $excludefilter) . ')/';		}		else		{			$excludefilter = '';		}		while (($file = readdir($handle)) !== false)		{			if (($file != '.') && ($file != '..') && (!in_array($file, $exclude)) && (!$excludefilter || !preg_match($excludefilter, $file)))			{				$dir = $path . '/' . $file;				$isDir = is_dir($dir);				if ($isDir)				{					if ($recurse)					{						if (is_int($recurse))						{							$arr2 = $this->_filesInFolder($dir, $filter, $recurse - 1, $fullpath);						}						else						{							$arr2 = $this->_filesInFolder($dir, $filter, $recurse, $fullpath);						}						$arr = array_merge($arr, $arr2);					}				}				else				{					if (preg_match("/$filter/", $file))					{						if ($fullpath)						{							$arr[] = $path . '/' . $file;						}						else						{							$arr[] = $file;						}					}				}			}		}		closedir($handle);		return $arr;	}	/**	 * Utility function to read the folders in a folder.	 *	 * @param   string   $path           The path of the folder to read.	 * @param   string   $filter         A filter for folder names.	 * @param   mixed    $recurse        True to recursively search into sub-folders, or an integer to specify the maximum depth.	 * @param   boolean  $fullpath       True to return the full path to the folders.	 * @param   array    $exclude        Array with names of folders which should not be shown in the result.	 * @param   array    $excludefilter  Array with regular expressions matching folders which should not be shown in the result.	 *	 * @return  array  Folders in the given folder.	 *	 * @since   11.1	 */	protected function _folders($path, $filter = '.', $recurse = false, $fullpath = false		, $exclude = array('.svn', 'CVS', '.DS_Store', '__MACOSX'), $excludefilter = array('^\..*'))	{		$arr = array();		// Check to make sure the path valid and clean		$path = $this->_cleanPath($path);		// Is the path a folder?		if (!is_dir($path))		{			JLog::add('JCacheStorageFile::_folders' . JText::sprintf('JLIB_FILESYSTEM_ERROR_PATH_IS_NOT_A_FOLDER', $path), JLog::WARNING, 'jerror');			return false;		}		// Read the source directory		if (!($handle = @opendir($path)))		{			return $arr;		}		if (count($excludefilter))		{			$excludefilter_string = '/(' . implode('|', $excludefilter) . ')/';		}		else		{			$excludefilter_string = '';		}		while (($file = readdir($handle)) !== false)		{			if (($file != '.') && ($file != '..')				&& (!in_array($file, $exclude))				&& (empty($excludefilter_string) || !preg_match($excludefilter_string, $file)))			{				$dir = $path . '/' . $file;				$isDir = is_dir($dir);				if ($isDir)				{					// Removes filtered directories					if (preg_match("/$filter/", $file))					{						if ($fullpath)						{							$arr[] = $dir;						}						else						{							$arr[] = $file;						}					}					if ($recurse)					{						if (is_int($recurse))						{							$arr2 = $this->_folders($dir, $filter, $recurse - 1, $fullpath, $exclude, $excludefilter);						}						else						{							$arr2 = $this->_folders($dir, $filter, $recurse, $fullpath, $exclude, $excludefilter);						}						$arr = array_merge($arr, $arr2);					}				}			}		}		closedir($handle);		return $arr;	}}
<?php/** * @package     Joomla.Administrator * @subpackage  com_categories * * @copyright   Copyright (C) 2005 - 2013 Open Source Matters, Inc. All rights reserved. * @license     GNU General Public License version 2 or later; see LICENSE.txt */defined('JPATH_BASE') or die;JFormHelper::loadFieldClass('list');/** * Form Field class for the Joomla Framework. * * @package     Joomla.Administrator * @subpackage  com_categories * @since       1.6 */class JFormFieldCategoryEdit extends JFormFieldList{	/**	 * A flexible category list that respects access controls	 *	 * @var        string	 * @since   1.6	 */	public $type = 'CategoryEdit';	/**	 * Method to get a list of categories that respects access controls and can be used for	 * either category assignment or parent category assignment in edit screens.	 * Use the parent element to indicate that the field will be used for assigning parent categories.	 *	 * @return  array  The field option objects.	 * @since   1.6	 */	protected function getOptions()	{		$options = array();		$published = $this->element['published'] ? $this->element['published'] : array(0, 1);		$name = (string) $this->element['name'];		// Let's get the id for the current item, either category or content item.		$jinput = JFactory::getApplication()->input;		// Load the category options for a given extension.		// For categories the old category is the category id or 0 for new category.		if ($this->element['parent'] || $jinput->get('option') == 'com_categories')		{			$oldCat = $jinput->get('id', 0);			$oldParent = $this->form->getValue($name, 0);			$extension = $this->element['extension'] ? (string) $this->element['extension'] : (string) $jinput->get('extension', 'com_content');		}		else			// For items the old category is the category they are in when opened or 0 if new.		{			$thisItem = $jinput->get('id', 0);			$oldCat = $this->form->getValue($name, 0);			$extension = $this->element['extension'] ? (string) $this->element['extension'] : (string) $jinput->get('option', 'com_content');		}		$db = JFactory::getDbo();		$query = $db->getQuery(true)			->select('a.id AS value, a.title AS text, a.level, a.published')			->from('#__categories AS a')			->join('LEFT', $db->quoteName('#__categories') . ' AS b ON a.lft > b.lft AND a.rgt < b.rgt');		// Filter by the extension type		if ($this->element['parent'] == true || $jinput->get('option') == 'com_categories')		{			$query->where('(a.extension = ' . $db->quote($extension) . ' OR a.parent_id = 0)');		}		else		{			$query->where('(a.extension = ' . $db->quote($extension) . ')');		}		// If parent isn't explicitly stated but we are in com_categories assume we want parents		if ($oldCat != 0 && ($this->element['parent'] == true || $jinput->get('option') == 'com_categories'))		{			// Prevent parenting to children of this item.			// To rearrange parents and children move the children up, not the parents down.			$query->join('LEFT', $db->quoteName('#__categories') . ' AS p ON p.id = ' . (int) $oldCat)				->where('NOT(a.lft >= p.lft AND a.rgt <= p.rgt)');			$rowQuery = $db->getQuery(true);			$rowQuery->select('a.id AS value, a.title AS text, a.level, a.parent_id')				->from('#__categories AS a')				->where('a.id = ' . (int) $oldCat);			$db->setQuery($rowQuery);			$row = $db->loadObject();		}		// Filter language		if (!empty($this->element['language']))		{			$query->where('a.language = ' . $db->quote($this->element['language']));		}		// Filter on the published state		if (is_numeric($published))		{			$query->where('a.published = ' . (int) $published);		}		elseif (is_array($published))		{			JArrayHelper::toInteger($published);			$query->where('a.published IN (' . implode(',', $published) . ')');		}		$query->group('a.id, a.title, a.level, a.lft, a.rgt, a.extension, a.parent_id, a.published')			->order('a.lft ASC');		// Get the options.		$db->setQuery($query);		try		{			$options = $db->loadObjectList();		}		catch (RuntimeException $e)		{			JError::raiseWarning(500, $e->getMessage);		}		// Pad the option text with spaces using depth level as a multiplier.		for ($i = 0, $n = count($options); $i < $n; $i++)		{			// Translate ROOT			if ($this->element['parent'] == true || $jinput->get('option') == 'com_categories')			{				if ($options[$i]->level == 0)				{					$options[$i]->text = JText::_('JGLOBAL_ROOT_PARENT');				}			}			if ($options[$i]->published == 1)			{				$options[$i]->text = str_repeat('- ', $options[$i]->level) . $options[$i]->text;			}			else			{				$options[$i]->text = str_repeat('- ', $options[$i]->level) . '[' . $options[$i]->text . ']';			}		}		// Get the current user object.		$user = JFactory::getUser();		// For new items we want a list of categories you are allowed to create in.		if ($oldCat == 0)		{			foreach ($options as $i => $option)			{				// To take save or create in a category you need to have create rights for that category				// unless the item is already in that category.				// Unset the option if the user isn't authorised for it. In this field assets are always categories.				if ($user->authorise('core.create', $extension . '.category.' . $option->value) != true)				{					unset($options[$i]);				}			}		}		// If you have an existing category id things are more complex.		else		{			// If you are only allowed to edit in this category but not edit.state, you should not get any			// option to change the category parent for a category or the category for a content item,			// but you should be able to save in that category.			foreach ($options as $i => $option)			{				if ($user->authorise('core.edit.state', $extension . '.category.' . $oldCat) != true && !isset($oldParent))				{					if ($option->value != $oldCat)					{						unset($options[$i]);					}				}				if ($user->authorise('core.edit.state', $extension . '.category.' . $oldCat) != true					&& (isset($oldParent))					&& $option->value != $oldParent				)				{					unset($options[$i]);				}				// However, if you can edit.state you can also move this to another category for which you have				// create permission and you should also still be able to save in the current category.				if (($user->authorise('core.create', $extension . '.category.' . $option->value) != true)					&& ($option->value != $oldCat && !isset($oldParent))				)				{					{						unset($options[$i]);					}				}				if (($user->authorise('core.create', $extension . '.category.' . $option->value) != true)					&& (isset($oldParent))					&& $option->value != $oldParent				)				{					{						unset($options[$i]);					}				}			}		}		if (($this->element['parent'] == true || $jinput->get('option') == 'com_categories')			&& (isset($row) && !isset($options[0]))			&& isset($this->element['show_root'])		)		{			if ($row->parent_id == '1')			{				$parent = new stdClass;				$parent->text = JText::_('JGLOBAL_ROOT_PARENT');				array_unshift($options, $parent);			}			array_unshift($options, JHtml::_('select.option', '0', JText::_('JGLOBAL_ROOT')));		}		// Merge any additional options in the XML definition.		$options = array_merge(parent::getOptions(), $options);		return $options;	}}
<?php/** * @package     Joomla.Administrator * @subpackage  Template.hathor * * @copyright   Copyright (C) 2005 - 2013 Open Source Matters, Inc. All rights reserved. * @license     GNU General Public License version 2 or later; see LICENSE.txt */defined('_JEXEC') or die;// Include the component HTML helpers.JHtml::addIncludePath(JPATH_COMPONENT . '/helpers/html');// Load the tooltip behavior.JHtml::_('behavior.tooltip');JHtml::_('behavior.multiselect');$uri		= JUri::getInstance();$return		= base64_encode($uri);$user		= JFactory::getUser();$userId		= $user->get('id');$listOrder	= $this->escape($this->state->get('list.ordering'));$listDirn	= $this->escape($this->state->get('list.direction'));?><script type="text/javascript">	Joomla.submitbutton = function(task)	{		if (task != 'menus.delete' || confirm('<?php echo JText::_('COM_MENUS_MENU_CONFIRM_DELETE', true);?>'))		{			Joomla.submitform(task);		}	}</script><form action="<?php echo JRoute::_('index.php?option=com_menus&view=menus');?>" method="post" name="adminForm" id="adminForm"><?php if (!empty( $this->sidebar)) : ?>	<div id="j-sidebar-container" class="span2">		<?php echo $this->sidebar; ?>	</div>	<div id="j-main-container" class="span10"><?php else : ?>	<div id="j-main-container"><?php endif;?>	<fieldset id="filter-bar">	<legend class="element-invisible"><?php echo JText::_('JSEARCH_FILTER_LABEL'); ?></legend>		<div class="filter-search">			<label class="filter-search-lbl" for="filter_search"><?php echo JText::_('COM_MENUS_MENU_SEARCH_FILTER'); ?></label>			<input type="text" name="filter_search" id="filter_search" value="<?php echo $this->escape($this->state->get('filter.search')); ?>" title="<?php echo JText::_('COM_MENUS_ITEMS_SEARCH_FILTER'); ?>" />			<button type="submit"><?php echo JText::_('JSEARCH_FILTER_SUBMIT'); ?></button>			<button type="button" onclick="document.id('filter_search').value='';this.form.submit();"><?php echo JText::_('JSEARCH_FILTER_CLEAR'); ?></button>		</div>	</fieldset>	<div class="clearfix"> </div>	<table class="adminlist">		<thead>			<tr>				<th class="checkmark-col" rowspan="2">					<input type="checkbox" name="checkall-toggle" value="" title="<?php echo JText::_('JGLOBAL_CHECK_ALL'); ?>" onclick="Joomla.checkAll(this)" />				</th>				<th rowspan="2">					<?php echo JHtml::_('grid.sort', 'JGLOBAL_TITLE', 'a.title', $listDirn, $listOrder); ?>				</th>				<th class="width-30" colspan="3">					<?php echo JText::_('COM_MENUS_HEADING_NUMBER_MENU_ITEMS'); ?>				</th>				<th class="width-20" rowspan="2">					<?php echo JText::_('COM_MENUS_HEADING_LINKED_MODULES'); ?>				</th>				<th class="nowrap id-col" rowspan="2">					<?php echo JHtml::_('grid.sort', 'JGRID_HEADING_ID', 'a.id', $listDirn, $listOrder); ?>				</th>			</tr>			<tr>				<th class="width-10">					<?php echo JText::_('COM_MENUS_HEADING_PUBLISHED_ITEMS'); ?>				</th>				<th class="width-10">					<?php echo JText::_('COM_MENUS_HEADING_UNPUBLISHED_ITEMS'); ?>				</th>				<th class="width-10">					<?php echo JText::_('COM_MENUS_HEADING_TRASHED_ITEMS'); ?>				</th>			</tr>		</thead>		<tbody>		<?php foreach ($this->items as $i => $item) :			$canCreate = $user->authorise('core.create',     'com_menus');			$canEdit   = $user->authorise('core.edit',       'com_menus');			$canChange = $user->authorise('core.edit.state', 'com_menus');		?>			<tr class="row<?php echo $i % 2; ?>">				<td class="center">					<?php echo JHtml::_('grid.id', $i, $item->id); ?>				</td>				<td>					<a href="<?php echo JRoute::_('index.php?option=com_menus&view=items&menutype='.$item->menutype) ?> ">						<?php echo $this->escape($item->title); ?></a>					<p class="smallsub">(<span><?php echo JText::_('COM_MENUS_MENU_MENUTYPE_LABEL') ?></span>						<?php if ($canEdit) : ?>							<?php echo '<a href="'.JRoute::_('index.php?option=com_menus&task=menu.edit&id='.$item->id).' title='.$this->escape($item->description).'">'.							$this->escape($item->menutype).'</a>'; ?>)						<?php else : ?>							<?php echo $this->escape($item->menutype)?>)						<?php endif; ?>					</p>				</td>				<td class="center btns">					<a href="<?php echo JRoute::_('index.php?option=com_menus&view=items&menutype='.$item->menutype.'&filter_published=1');?>">						<?php echo $item->count_published; ?></a>				</td>				<td class="center btns">					<a href="<?php echo JRoute::_('index.php?option=com_menus&view=items&menutype='.$item->menutype.'&filter_published=0');?>">						<?php echo $item->count_unpublished; ?></a>				</td>				<td class="center btns">					<a href="<?php echo JRoute::_('index.php?option=com_menus&view=items&menutype='.$item->menutype.'&filter_published=-2');?>">						<?php echo $item->count_trashed; ?></a>				</td>				<td class="left">				<ul class="menu-module-list">					<?php					if (isset($this->modules[$item->menutype])) :						foreach ($this->modules[$item->menutype] as &$module) :						?>						<li>							<?php if ($canEdit) : ?>								<a class="modal" href="<?php echo JRoute::_('index.php?option=com_modules&task=module.edit&id='.$module->id.'&return='.$return.'&tmpl=component&layout=modal');?>" rel="{handler: 'iframe', size: {x: 1024, y: 450}}"  title="<?php echo JText::_('COM_MENUS_EDIT_MODULE_SETTINGS');?>">								<?php echo JText::sprintf('COM_MENUS_MODULE_ACCESS_POSITION', $this->escape($module->title), $this->escape($module->access_title), $this->escape($module->position)); ?></a>							<?php else :?>								<?php echo JText::sprintf('COM_MENUS_MODULE_ACCESS_POSITION', $this->escape($module->title), $this->escape($module->access_title), $this->escape($module->position)); ?>							<?php endif; ?>						</li>						<?php						endforeach;					endif;					?>				</ul>				</td>				<td class="center">					<?php echo $item->id; ?>				</td>			</tr>			<?php endforeach; ?>		</tbody>	</table>	<?php echo $this->pagination->getListFooter(); ?>	<input type="hidden" name="task" value="" />	<input type="hidden" name="boxchecked" value="0" />	<input type="hidden" name="filter_order" value="<?php echo $listOrder; ?>" />	<input type="hidden" name="filter_order_Dir" value="<?php echo $listDirn; ?>" />	<?php echo JHtml::_('form.token'); ?>	</div></form>
<?php/** * @package     Joomla.Platform * @subpackage  Registry * * @copyright   Copyright (C) 2005 - 2013 Open Source Matters, Inc. All rights reserved. * @license     GNU General Public License version 2 or later; see LICENSE */defined('JPATH_PLATFORM') or die;/** * INI format handler for JRegistry. * * @package     Joomla.Platform * @subpackage  Registry * @since       11.1 */class JRegistryFormatINI extends JRegistryFormat{	protected static $cache = array();	/**	 * Converts an object into an INI formatted string	 * -	Unfortunately, there is no way to have ini values nested further than two	 * levels deep.  Therefore we will only go through the first two levels of	 * the object.	 *	 * @param   object  $object   Data source object.	 * @param   array   $options  Options used by the formatter.	 *	 * @return  string  INI formatted string.	 *	 * @since   11.1	 */	public function objectToString($object, $options = array())	{		$local = array();		$global = array();		// Iterate over the object to set the properties.		foreach (get_object_vars($object) as $key => $value)		{			// If the value is an object then we need to put it in a local section.			if (is_object($value))			{				// Add the section line.				$local[] = '';				$local[] = '[' . $key . ']';				// Add the properties for this section.				foreach (get_object_vars($value) as $k => $v)				{					$local[] = $k . '=' . $this->getValueAsINI($v);				}			}			else			{				// Not in a section so add the property to the global array.				$global[] = $key . '=' . $this->getValueAsINI($value);			}		}		return implode("\n", array_merge($global, $local));	}	/**	 * Parse an INI formatted string and convert it into an object.	 *	 * @param   string  $data     INI formatted string to convert.	 * @param   mixed   $options  An array of options used by the formatter, or a boolean setting to process sections.	 *	 * @return  object   Data object.	 *	 * @since   11.1	 */	public function stringToObject($data, array $options = array())	{		$sections = (isset($options['processSections'])) ? $options['processSections'] : false;		// Check the memory cache for already processed strings.		$hash = md5($data . ':' . (int) $sections);		if (isset(self::$cache[$hash]))		{			return self::$cache[$hash];		}		// If no lines present just return the object.		if (empty($data))		{			return new stdClass;		}		$obj = new stdClass;		$section = false;		$lines = explode("\n", $data);		// Process the lines.		foreach ($lines as $line)		{			// Trim any unnecessary whitespace.			$line = trim($line);			// Ignore empty lines and comments.			if (empty($line) || ($line{0} == ';'))			{				continue;			}			if ($sections)			{				$length = strlen($line);				// If we are processing sections and the line is a section add the object and continue.				if (($line[0] == '[') && ($line[$length - 1] == ']'))				{					$section = substr($line, 1, $length - 2);					$obj->$section = new stdClass;					continue;				}			}			elseif ($line{0} == '[')			{				continue;			}			// Check that an equal sign exists and is not the first character of the line.			if (!strpos($line, '='))			{				// Maybe throw exception?				continue;			}			// Get the key and value for the line.			list ($key, $value) = explode('=', $line, 2);			// Validate the key.			if (preg_match('/[^A-Z0-9_]/i', $key))			{				// Maybe throw exception?				continue;			}			// If the value is quoted then we assume it is a string.			$length = strlen($value);			if ($length && ($value[0] == '"') && ($value[$length - 1] == '"'))			{				// Strip the quotes and Convert the new line characters.				$value = stripcslashes(substr($value, 1, ($length - 2)));				$value = str_replace('\n', "\n", $value);			}			else			{				// If the value is not quoted, we assume it is not a string.				// If the value is 'false' assume boolean false.				if ($value == 'false')				{					$value = false;				}				// If the value is 'true' assume boolean true.				elseif ($value == 'true')				{					$value = true;				}				// If the value is numeric than it is either a float or int.				elseif (is_numeric($value))				{					// If there is a period then we assume a float.					if (strpos($value, '.') !== false)					{						$value = (float) $value;					}					else					{						$value = (int) $value;					}				}			}			// If a section is set add the key/value to the section, otherwise top level.			if ($section)			{				$obj->$section->$key = $value;			}			else			{				$obj->$key = $value;			}		}		// Cache the string to save cpu cycles -- thus the world :)		self::$cache[$hash] = clone ($obj);		return $obj;	}	/**	 * Method to get a value in an INI format.	 *	 * @param   mixed  $value  The value to convert to INI format.	 *	 * @return  string  The value in INI format.	 *	 * @since   11.1	 */	protected function getValueAsINI($value)	{		$string = '';		switch (gettype($value))		{			case 'integer':			case 'double':				$string = $value;				break;			case 'boolean':				$string = $value ? 'true' : 'false';				break;			case 'string':				// Sanitize any CRLF characters..				$string = '"' . str_replace(array("\r\n", "\n"), '\\n', $value) . '"';				break;		}		return $string;	}}
<?php/** * @package     Joomla.Administrator * @subpackage  com_users * * @copyright   Copyright (C) 2005 - 2013 Open Source Matters, Inc. All rights reserved. * @license     GNU General Public License version 2 or later; see LICENSE.txt */defined('JPATH_BASE') or die;JFormHelper::loadFieldClass('list');/** * Form Field class for the Joomla Framework. * * @package     Joomla.Administrator * @subpackage  com_users * @since       1.6 */class JFormFieldGroupParent extends JFormFieldList{	/**	 * The form field type.	 *	 * @var        string	 * @since   1.6	 */	protected $type = 'GroupParent';	/**	 * Method to get the field options.	 *	 * @return  array  The field option objects.	 * @since   1.6	 */	protected function getOptions()	{		$options = array();		$db = JFactory::getDbo();		$user = JFactory::getUser();		$query = $db->getQuery(true)			->select('a.id AS value, a.title AS text, COUNT(DISTINCT b.id) AS level')			->from('#__usergroups AS a')			->join('LEFT', $db->quoteName('#__usergroups') . ' AS b ON a.lft > b.lft AND a.rgt < b.rgt');		// Prevent parenting to children of this item.		if ($id = $this->form->getValue('id'))		{			$query->join('LEFT', $db->quoteName('#__usergroups') . ' AS p ON p.id = ' . (int) $id)				->where('NOT(a.lft >= p.lft AND a.rgt <= p.rgt)');		}		$query->group('a.id, a.title, a.lft, a.rgt')			->order('a.lft ASC');		// Get the options.		$db->setQuery($query);		try		{			$options = $db->loadObjectList();		}		catch (RuntimeException $e)		{			JError::raiseWarning(500, $e->getMessage());		}		// Pad the option text with spaces using depth level as a multiplier.		for ($i = 0, $n = count($options); $i < $n; $i++)		{			// Show groups only if user is super admin or group is not super admin			if ($user->authorise('core.admin') || (!JAccess::checkGroup($options[$i]->value, 'core.admin')))			{				$options[$i]->text = str_repeat('- ', $options[$i]->level) . $options[$i]->text;			}			else			{				unset($options[$i]);			}		}		// Merge any additional options in the XML definition.		$options = array_merge(parent::getOptions(), $options);		return $options;	}}
<?php/** * @package     Joomla.Site * @subpackage  com_contact * * @copyright   Copyright (C) 2005 - 2013 Open Source Matters, Inc. All rights reserved. * @license     GNU General Public License version 2 or later; see LICENSE.txt */defined('_JEXEC') or die;JHtml::_('behavior.framework');$listOrder	= $this->escape($this->state->get('list.ordering'));$listDirn	= $this->escape($this->state->get('list.direction'));?><?php if (empty($this->items)) : ?>	<p> <?php echo JText::_('COM_CONTACT_NO_ARTICLES'); ?>	 </p><?php else : ?>	<form action="<?php echo htmlspecialchars(JUri::getInstance()->toString()); ?>" method="post" name="adminForm" id="adminForm">	<?php if ($this->params->get('filter_field') != 'hide' || $this->params->get('show_pagination_limit')) :?>	<fieldset class="filters btn-toolbar">		<?php if ($this->params->get('filter_field') != 'hide') :?>			<div class="btn-group">				<label class="filter-search-lbl element-invisible" for="filter-search"><span class="label label-warning"><?php echo JText::_('JUNPUBLISHED'); ?></span><?php echo JText::_('COM_CONTACT_FILTER_LABEL').'&#160;'; ?></label>				<input type="text" name="filter-search" id="filter-search" value="<?php echo $this->escape($this->state->get('list.filter')); ?>" class="inputbox" onchange="document.adminForm.submit();" title="<?php echo JText::_('COM_CONTACT_FILTER_SEARCH_DESC'); ?>" placeholder="<?php echo JText::_('COM_CONTACT_FILTER_SEARCH_DESC'); ?>" />			</div>		<?php endif; ?>		<?php if ($this->params->get('show_pagination_limit')) : ?>			<div class="btn-group pull-right">				<label for="limit" class="element-invisible">					<?php echo JText::_('JGLOBAL_DISPLAY_NUM'); ?>				</label>				<?php echo $this->pagination->getLimitBox(); ?>			</div>		<?php endif; ?>	</fieldset>	<?php endif; ?>		<ul class="category list-striped">			<?php foreach ($this->items as $i => $item) : ?>				<?php if (in_array($item->access, $this->user->getAuthorisedViewLevels())) : ?>					<?php if ($this->items[$i]->published == 0) : ?>						<li class="system-unpublished cat-list-row<?php echo $i % 2; ?>">					<?php else: ?>						<li class="cat-list-row<?php echo $i % 2; ?>" >					<?php endif; ?>						<span class="pull-right">							<?php if ($this->params->get('show_telephone_headings') AND !empty($item->telephone)) : ?>								<?php echo JTEXT::sprintf('COM_CONTACT_TELEPHONE_NUMBER', $item->telephone); ?><br/>							<?php endif; ?>							<?php if ($this->params->get('show_mobile_headings') AND !empty ($item->mobile)) : ?>									<?php echo JTEXT::sprintf('COM_CONTACT_MOBILE_NUMBER', $item->mobile); ?><br/>							<?php endif; ?>							<?php if ($this->params->get('show_fax_headings') AND !empty($item->fax) ) : ?>								<?php echo JTEXT::sprintf('COM_CONTACT_FAX_NUMBER', $item->fax); ?><br/>							<?php endif; ?>					</span>					<p>						<strong class="list-title">							<a href="<?php echo JRoute::_(ContactHelperRoute::getContactRoute($item->slug, $item->catid)); ?>">								<?php echo $item->name; ?></a>							<?php if ($this->items[$i]->published == 0) : ?>								<span class="label label-warning"><?php echo JText::_('JUNPUBLISHED'); ?></span>							<?php endif; ?>						</strong><br/>						<?php if ($this->params->get('show_position_headings')) : ?>								<?php echo $item->con_position; ?><br/>						<?php endif; ?>						<?php if ($this->params->get('show_email_headings')) : ?>								<?php echo $item->email_to; ?>						<?php endif; ?>						<?php if ($this->params->get('show_suburb_headings') AND !empty($item->suburb)) : ?>							<?php echo $item->suburb . ', '; ?>						<?php endif; ?>						<?php if ($this->params->get('show_state_headings') AND !empty($item->state)) : ?>							<?php echo $item->state . ', '; ?>						<?php endif; ?>						<?php if ($this->params->get('show_country_headings') AND !empty($item->country)) : ?>							<?php echo $item->country; ?><br/>						<?php endif; ?>					</p>					</li>				<?php endif; ?>			<?php endforeach; ?>		</ul>		<?php if ($this->params->get('show_pagination')) : ?>		<div class="pagination">			<?php if ($this->params->def('show_pagination_results', 1)) : ?>			<p class="counter">				<?php echo $this->pagination->getPagesCounter(); ?>			</p>			<?php endif; ?>			<?php echo $this->pagination->getPagesLinks(); ?>		</div>		<?php endif; ?>		<div>			<input type="hidden" name="filter_order" value="<?php echo $listOrder; ?>" />			<input type="hidden" name="filter_order_Dir" value="<?php echo $listDirn; ?>" />		</div></form><?php endif; ?>
<?php/** * @package     Joomla.Administrator * @subpackage  com_users * * @copyright   Copyright (C) 2005 - 2013 Open Source Matters, Inc. All rights reserved. * @license     GNU General Public License version 2 or later; see LICENSE.txt */defined('_JEXEC') or die;/* @var $this UsersViewNotes */JHtml::addIncludePath(JPATH_COMPONENT.'/helpers/html');JHtml::_('behavior.tooltip');?><div class="unotes">	<h1><?php echo JText::sprintf('COM_USERS_NOTES_FOR_USER', $this->user->name, $this->user->id); ?></h1><?php if (empty($this->items)) : ?>	<?php echo JText::_('COM_USERS_NO_NOTES'); ?><?php else : ?>	<ol class="alternating">	<?php foreach ($this->items as $item) : ?>		<li>			<div class="fltlft utitle">				<?php if ($item->subject) : ?>					<h4><?php echo JText::sprintf('COM_USERS_NOTE_N_SUBJECT', (int) $item->id, $this->escape($item->subject)); ?></h4>				<?php else : ?>					<h4><?php echo JText::sprintf('COM_USERS_NOTE_N_SUBJECT', (int) $item->id, JText::_('COM_USERS_EMPTY_SUBJECT')); ?></h4>				<?php endif; ?>			</div>			<div class="fltlft utitle">				<?php echo JHtml::date($item->created_time, 'D d M Y H:i'); ?>			</div>			<?php $category_image = $item->cparams->get('image'); ?>			<?php if ($item->catid && isset($category_image)) : ?>			<div class="fltlft utitle">				<?php echo JHtml::_('users.image', $category_image); ?>			</div>			<div class="fltlft utitle">				<em><?php echo $this->escape($item->category_title); ?></em>			</div>			<?php endif; ?>			<div class="clr"></div>			<div class="ubody">				<?php echo $item->body; ?>			</div>		</li>	<?php endforeach; ?>	</ol><?php endif; ?></div>
<?php/** * @package     Joomla.Site * @subpackage  mod_articles_category * * @copyright   Copyright (C) 2005 - 2013 Open Source Matters, Inc. All rights reserved. * @license     GNU General Public License version 2 or later; see LICENSE.txt */defined('_JEXEC') or die;$com_path = JPATH_SITE.'/components/com_content/';require_once $com_path.'router.php';require_once $com_path.'helpers/route.php';JModelLegacy::addIncludePath($com_path . '/models', 'ContentModel');/** * Helper for mod_articles_category * * @package     Joomla.Site * @subpackage  mod_articles_category */abstract class ModArticlesCategoryHelper{	public static function getList(&$params)	{		// Get an instance of the generic articles model		$articles = JModelLegacy::getInstance('Articles', 'ContentModel', array('ignore_request' => true));		// Set application parameters in model		$app = JFactory::getApplication();		$appParams = $app->getParams();		$articles->setState('params', $appParams);		// Set the filters based on the module params		$articles->setState('list.start', 0);		$articles->setState('list.limit', (int) $params->get('count', 0));		$articles->setState('filter.published', 1);		// Access filter		$access = !JComponentHelper::getParams('com_content')->get('show_noauth');		$authorised = JAccess::getAuthorisedViewLevels(JFactory::getUser()->get('id'));		$articles->setState('filter.access', $access);		// Prep for Normal or Dynamic Modes		$mode = $params->get('mode', 'normal');		switch ($mode)		{			case 'dynamic':				$option = $app->input->get('option');				$view = $app->input->get('view');				if ($option === 'com_content')				{					switch($view)					{						case 'category':							$catids = array($app->input->getInt('id'));							break;						case 'categories':							$catids = array($app->input->getInt('id'));							break;						case 'article':							if ($params->get('show_on_article_page', 1))							{								$article_id = $app->input->getInt('id');								$catid = $app->input->getInt('catid');								if (!$catid)								{									// Get an instance of the generic article model									$article = JModelLegacy::getInstance('Article', 'ContentModel', array('ignore_request' => true));									$article->setState('params', $appParams);									$article->setState('filter.published', 1);									$article->setState('article.id', (int) $article_id);									$item = $article->getItem();									$catids = array($item->catid);								}								else								{									$catids = array($catid);								}							}							else {								// Return right away if show_on_article_page option is off								return;							}							break;						case 'featured':						default:							// Return right away if not on the category or article views							return;					}				}				else {					// Return right away if not on a com_content page					return;				}				break;			case 'normal':			default:				$catids = $params->get('catid');				$articles->setState('filter.category_id.include', (bool) $params->get('category_filtering_type', 1));				break;		}		// Category filter		if ($catids)		{			if ($params->get('show_child_category_articles', 0) && (int) $params->get('levels', 0) > 0)			{				// Get an instance of the generic categories model				$categories = JModelLegacy::getInstance('Categories', 'ContentModel', array('ignore_request' => true));				$categories->setState('params', $appParams);				$levels = $params->get('levels', 1) ? $params->get('levels', 1) : 9999;				$categories->setState('filter.get_children', $levels);				$categories->setState('filter.published', 1);				$categories->setState('filter.access', $access);				$additional_catids = array();				foreach ($catids as $catid)				{					$categories->setState('filter.parentId', $catid);					$recursive = true;					$items = $categories->getItems($recursive);					if ($items)					{						foreach ($items as $category)						{							$condition = (($category->level - $categories->getParent()->level) <= $levels);							if ($condition)							{								$additional_catids[] = $category->id;							}						}					}				}				$catids = array_unique(array_merge($catids, $additional_catids));			}			$articles->setState('filter.category_id', $catids);		}		// Ordering		$articles->setState('list.ordering', $params->get('article_ordering', 'a.ordering'));		$articles->setState('list.direction', $params->get('article_ordering_direction', 'ASC'));		// New Parameters		$articles->setState('filter.featured', $params->get('show_front', 'show'));		$articles->setState('filter.author_id', $params->get('created_by', ""));		$articles->setState('filter.author_id.include', $params->get('author_filtering_type', 1));		$articles->setState('filter.author_alias', $params->get('created_by_alias', ""));		$articles->setState('filter.author_alias.include', $params->get('author_alias_filtering_type', 1));		$excluded_articles = $params->get('excluded_articles', '');		if ($excluded_articles)		{			$excluded_articles = explode("\r\n", $excluded_articles);			$articles->setState('filter.article_id', $excluded_articles);			$articles->setState('filter.article_id.include', false); // Exclude		}		$date_filtering = $params->get('date_filtering', 'off');		if ($date_filtering !== 'off')		{			$articles->setState('filter.date_filtering', $date_filtering);			$articles->setState('filter.date_field', $params->get('date_field', 'a.created'));			$articles->setState('filter.start_date_range', $params->get('start_date_range', '1000-01-01 00:00:00'));			$articles->setState('filter.end_date_range', $params->get('end_date_range', '9999-12-31 23:59:59'));			$articles->setState('filter.relative_date', $params->get('relative_date', 30));		}		// Filter by language		$articles->setState('filter.language', $app->getLanguageFilter());		$items = $articles->getItems();		// Display options		$show_date = $params->get('show_date', 0);		$show_date_field = $params->get('show_date_field', 'created');		$show_date_format = $params->get('show_date_format', 'Y-m-d H:i:s');		$show_category = $params->get('show_category', 0);		$show_hits = $params->get('show_hits', 0);		$show_author = $params->get('show_author', 0);		$show_introtext = $params->get('show_introtext', 0);		$introtext_limit = $params->get('introtext_limit', 100);		// Find current Article ID if on an article page		$option = $app->input->get('option');		$view = $app->input->get('view');		if ($option === 'com_content' && $view === 'article')		{			$active_article_id = $app->input->getInt('id');		}		else		{			$active_article_id = 0;		}		// Prepare data for display using display options		foreach ($items as &$item)		{			$item->slug = $item->id.':'.$item->alias;			$item->catslug = $item->catid ? $item->catid .':'.$item->category_alias : $item->catid;			if ($access || in_array($item->access, $authorised))			{				// We know that user has the privilege to view the article				$item->link = JRoute::_(ContentHelperRoute::getArticleRoute($item->slug, $item->catslug));			}			else			{				$app  = JFactory::getApplication();				$menu = $app->getMenu();				$menuitems = $menu->getItems('link', 'index.php?option=com_users&view=login');				if (isset($menuitems[0]))				{					$Itemid = $menuitems[0]->id;				}				elseif ($app->input->getInt('Itemid') > 0)				{					// Use Itemid from requesting page only if there is no existing menu					$Itemid = $app->input->getInt('Itemid');				}				$item->link = JRoute::_('index.php?option=com_users&view=login&Itemid='.$Itemid);			}			// Used for styling the active article			$item->active = $item->id == $active_article_id ? 'active' : '';			$item->displayDate = '';			if ($show_date)			{				$item->displayDate = JHTML::_('date', $item->$show_date_field, $show_date_format);			}			if ($item->catid)			{				$item->displayCategoryLink = JRoute::_(ContentHelperRoute::getCategoryRoute($item->catid));				$item->displayCategoryTitle = $show_category ? '<a href="'.$item->displayCategoryLink.'">'.$item->category_title.'</a>' : '';			}			else {				$item->displayCategoryTitle = $show_category ? $item->category_title : '';			}			$item->displayHits = $show_hits ? $item->hits : '';			$item->displayAuthorName = $show_author ? $item->author : '';			if ($show_introtext)			{				$item->introtext = JHtml::_('content.prepare', $item->introtext, '', 'mod_articles_category.content');				$item->introtext = self::_cleanIntrotext($item->introtext);			}			$item->displayIntrotext = $show_introtext ? self::truncate($item->introtext, $introtext_limit) : '';			$item->displayReadmore = $item->alternative_readmore;		}		return $items;	}	public static function _cleanIntrotext($introtext)	{		$introtext = str_replace('<p>', ' ', $introtext);		$introtext = str_replace('</p>', ' ', $introtext);		$introtext = strip_tags($introtext, '<a><em><strong>');		$introtext = trim($introtext);		return $introtext;	}	/**	* Method to truncate introtext	*	* The goal is to get the proper length plain text string with as much of	* the html intact as possible with all tags properly closed.	*	* @param string   $html       The content of the introtext to be truncated	* @param integer  $maxLength  The maximum number of charactes to render	*	* @return  string  The truncated string	*/	public static function truncate($html, $maxLength = 0)	{		$baseLength = strlen($html);		$diffLength = 0;		// First get the plain text string. This is the rendered text we want to end up with.		$ptString = JHtml::_('string.truncate', $html, $maxLength, $noSplit = true, $allowHtml = false);		for ($maxLength; $maxLength < $baseLength;)		{			// Now get the string if we allow html.			$htmlString = JHtml::_('string.truncate', $html, $maxLength, $noSplit = true, $allowHtml = true);			// Now get the plain text from the html string.			$htmlStringToPtString = JHtml::_('string.truncate', $htmlString, $maxLength, $noSplit = true, $allowHtml = false);			// If the new plain text string matches the original plain text string we are done.			if ($ptString == $htmlStringToPtString)			{				return $htmlString;			}			// Get the number of html tag characters in the first $maxlength characters			$diffLength = strlen($ptString) - strlen($htmlStringToPtString);			// Set new $maxlength that adjusts for the html tags			$maxLength += $diffLength;			if ($baseLength <= $maxLength || $diffLength <= 0)			{				return $htmlString;			}		}		return $html;	}	public static function groupBy($list, $fieldName, $article_grouping_direction, $fieldNameToKeep = null)	{		$grouped = array();		if (!is_array($list))		{			if ($list == '')			{				return $grouped;			}			$list = array($list);		}		foreach ($list as $key => $item)		{			if (!isset($grouped[$item->$fieldName]))			{				$grouped[$item->$fieldName] = array();			}			if (is_null($fieldNameToKeep))			{				$grouped[$item->$fieldName][$key] = $item;			}			else {				$grouped[$item->$fieldName][$key] = $item->$fieldNameToKeep;			}			unset($list[$key]);		}		$article_grouping_direction($grouped);		return $grouped;	}	public static function groupByDate($list, $type = 'year', $article_grouping_direction, $month_year_format = 'F Y')	{		$grouped = array();		if (!is_array($list))		{			if ($list == '')			{				return $grouped;			}			$list = array($list);		}		foreach ($list as $key => $item)		{			switch($type)			{				case 'month_year':					$month_year = JString::substr($item->created, 0, 7);					if (!isset($grouped[$month_year]))					{						$grouped[$month_year] = array();					}					$grouped[$month_year][$key] = $item;					break;				case 'year':				default:					$year = JString::substr($item->created, 0, 4);					if (!isset($grouped[$year]))					{						$grouped[$year] = array();					}					$grouped[$year][$key] = $item;					break;			}			unset($list[$key]);		}		$article_grouping_direction($grouped);		if ($type === 'month_year')		{			foreach ($grouped as $group => $items)			{				$date = new JDate($group);				$formatted_group = $date->format($month_year_format);				$grouped[$formatted_group] = $items;				unset($grouped[$group]);			}		}		return $grouped;	}}
<?php/** * @package    Joomla.Installation * * @copyright  Copyright (C) 2005 - 2013 Open Source Matters, Inc. All rights reserved. * @license    GNU General Public License version 2 or later; see LICENSE.txt */defined('_JEXEC') or die;$doc = JFactory::getDocument();// Add Stylesheets$doc->addStyleSheet('../media/jui/css/bootstrap.css');$doc->addStyleSheet('../media/jui/css/bootstrap-extended.css');$doc->addStyleSheet('../media/jui/css/bootstrap-responsive.css');$doc->addStyleSheet('template/css/template.css');if ($this->direction === 'rtl'){	$doc->addStyleSheet('../media/jui/css/bootstrap-rtl.css');}// Load the JavaScript behaviorsJHtml::_('bootstrap.framework');JHtml::_('formbehavior.chosen', 'select');JHtml::_('behavior.framework', true);JHtml::_('behavior.keepalive');JHtml::_('behavior.formvalidation');JHtml::_('script', 'installation/template/js/installation.js', true, false, false, false);// Load the JavaScript translated messagesJText::script('INSTL_PROCESS_BUSY');JText::script('INSTL_FTP_SETTINGS_CORRECT');?><!DOCTYPE html><html xmlns="http://www.w3.org/1999/xhtml" xml:lang="<?php echo $this->language; ?>" lang="<?php echo $this->language; ?>" dir="<?php echo $this->direction; ?>">	<head>		<jdoc:include type="head" />		<!--[if lt IE 9]>			<script src="../media/jui/js/html5.js"></script>		<![endif]-->		<script type="text/javascript">			window.addEvent('domready', function()			{				window.Install = new Installation('container-installation', '<?php echo JURI::current(); ?>');			});		</script>	</head>	<body>		<!-- Header -->		<div class="header">			<img src="<?php echo $this->baseurl ?>/template/images/joomla.png" alt="Joomla" />			<hr />			<h5>				<?php				$joomla = '<a href="http://www.joomla.org">Joomla!<sup>&#174;</sup></a>';				$license = '<a data-toggle="modal" href="#licenseModal">' . JText::_('INSTL_GNU_GPL_LICENSE') . '</a>';				echo JText::sprintf('JGLOBAL_ISFREESOFTWARE', $joomla, $license);				?>			</h5>		</div>		<!-- Container -->		<div class="container">			<jdoc:include type="message" />			<div id="container-installation">				<jdoc:include type="component" />			</div>			<hr />		</div>		<div id="licenseModal" class="modal fade">			<div class="modal-header">				<button type="button" class="close" data-dismiss="modal"></button>				<h3><?php echo JText::_('INSTL_GNU_GPL_LICENSE'); ?></h3>			</div>			<div class="modal-body">				<iframe src="gpl.html" class="thumbnail span6 license" height="250" marginwidth="25" scrolling="auto"></iframe>			</div>		</div>		<script>			function initElements()			{				(function($){					$('.hasTooltip').tooltip()					// Chosen select boxes					$("select").chosen({						disable_search_threshold : 10,						allow_single_deselect : true					});					// Turn radios into btn-group				    $('.radio.btn-group label').addClass('btn');				    $(".btn-group label:not(.active)").click(function()					{				        var label = $(this);				        var input = $('#' + label.attr('for'));				        if (!input.prop('checked'))						{				            label.closest('.btn-group').find("label").removeClass('active btn-success btn-danger btn-primary');				            if(input.val()== '')							{				                    label.addClass('active btn-primary');				             } else if(input.val()==0 || input.val()=='remove')							{				                    label.addClass('active btn-danger');				             } else {				            label.addClass('active btn-success');				             }				            input.prop('checked', true);				        }				    });				    $(".btn-group input[checked=checked]").each(function()					{						if ($(this).val()== '')						{				           $("label[for=" + $(this).attr('id') + "]").addClass('active btn-primary');				        } else if($(this).val()==0 || $(this).val()=='remove')						{				           $("label[for=" + $(this).attr('id') + "]").addClass('active btn-danger');				        } else {				            $("label[for=" + $(this).attr('id') + "]").addClass('active btn-success');				        }				    });				})(jQuery);			}			initElements();		</script>	</body></html>
<?php/** * @package     Joomla.Libraries * @subpackage  Form * * @copyright   Copyright (C) 2005 - 2013 Open Source Matters, Inc. All rights reserved. * @license     GNU General Public License version 2 or later; see LICENSE */defined('JPATH_PLATFORM') or die;JFormHelper::loadFieldClass('list');/** * Form Field class for the Joomla Platform. * Provides a select list of help sites. * * @package     Joomla.Libraries * @subpackage  Form * @since       1.6.0 */class JFormFieldHelpsite extends JFormFieldList{	/**	 * The form field type.	 *	 * @var    string	 * @since  1.6.0	 */	public $type = 'Helpsite';	/**	 * Method to get the help site field options.	 *	 * @return  array  The field option objects.	 *	 * @since   1.6.0	 */	protected function getOptions()	{		// Merge any additional options in the XML definition.		$options = array_merge(parent::getOptions(), JHelp::createSiteList(JPATH_ADMINISTRATOR . '/help/helpsites.xml', $this->value));		return $options;	}}
<?php/** * @package     Joomla.Platform * @subpackage  Form * * @copyright   Copyright (C) 2005 - 2013 Open Source Matters, Inc. All rights reserved. * @license     GNU General Public License version 2 or later; see LICENSE */defined('JPATH_PLATFORM') or die;/** * Form Field class for the Joomla Platform. * Supports a multi line area for entry of plain text * * @package     Joomla.Platform * @subpackage  Form * @link        http://www.w3.org/TR/html-markup/textarea.html#textarea * @since       11.1 */class JFormFieldTextarea extends JFormField{	/**	 * The form field type.	 *	 * @var    string	 * @since  11.1	 */	protected $type = 'Textarea';	/**	 * Method to get the textarea field input markup.	 * Use the rows and columns attributes to specify the dimensions of the area.	 *	 * @return  string  The field input markup.	 *	 * @since   11.1	 */	protected function getInput()	{		// Initialize some field attributes.		$class = $this->element['class'] ? ' class="' . (string) $this->element['class'] . '"' : '';		$disabled = ((string) $this->element['disabled'] == 'true') ? ' disabled="disabled"' : '';		$columns = $this->element['cols'] ? ' cols="' . (int) $this->element['cols'] . '"' : '';		$rows = $this->element['rows'] ? ' rows="' . (int) $this->element['rows'] . '"' : '';		$required = $this->required ? ' required="required" aria-required="true"' : '';		// Initialize JavaScript field attributes.		$onchange = $this->element['onchange'] ? ' onchange="' . (string) $this->element['onchange'] . '"' : '';		return '<textarea name="' . $this->name . '" id="' . $this->id . '"' . $columns . $rows . $class . $disabled . $onchange . $required . '>'			. htmlspecialchars($this->value, ENT_COMPAT, 'UTF-8') . '</textarea>';	}}
<?php/** * @package     Joomla.Administrator * @subpackage  Template.hathor * * @copyright   Copyright (C) 2005 - 2013 Open Source Matters, Inc. All rights reserved. * @license     GNU General Public License version 2 or later; see LICENSE.txt */defined('_JEXEC') or die;// Include the component HTML helpers.JHtml::addIncludePath(JPATH_COMPONENT.'/helpers/html');// Load the tooltip behavior.JHtml::_('behavior.tooltip');$listOrder	= $this->escape($this->state->get('list.ordering'));$listDirn	= $this->escape($this->state->get('list.direction'));?><form action="<?php echo JRoute::_('index.php?option=com_users&view=debuguser&user_id='.(int) $this->state->get('filter.user_id'));?>" method="post" name="adminForm" id="adminForm"><?php if (!empty( $this->sidebar)) : ?>	<div id="j-sidebar-container" class="span2">		<?php echo $this->sidebar; ?>	</div>	<div id="j-main-container" class="span10"><?php else : ?>	<div id="j-main-container"><?php endif;?>	<fieldset id="filter-bar">	<legend class="element-invisible"><?php echo JText::_('COM_USERS_SEARCH_ASSETS'); ?></legend>		<div class="filter-search fltlft">			<label class="filter-search-lbl" for="filter_search"><?php echo JText::_('COM_USERS_SEARCH_ASSETS'); ?></label>			<input type="text" name="filter_search" id="filter_search" value="<?php echo $this->escape($this->state->get('filter.search')); ?>" title="<?php echo JText::_('COM_USERS_SEARCH_USERS'); ?>" />			<button type="submit"><?php echo JText::_('JSEARCH_FILTER_SUBMIT'); ?></button>			<button type="button" onclick="document.id('filter_search').value='';this.form.submit();"><?php echo JText::_('JSEARCH_RESET'); ?></button>		</div>		<div class="filter-select fltrt">			<label class="selectlabel" for="filter_component"><?php echo JText::_('COM_USERS_OPTION_SELECT_COMPONENT'); ?></label>			<select name="filter_component" class="inputbox" id="filter_component">				<option value=""><?php echo JText::_('COM_USERS_OPTION_SELECT_COMPONENT');?></option>				<?php if (!empty($this->components))				{					echo JHtml::_('select.options', $this->components, 'value', 'text', $this->state->get('filter.component'));				}?>			</select>			<label class="selectlabel" for="filter_level_start"><?php echo JText::_('COM_USERS_OPTION_SELECT_LEVEL_START'); ?></label>			<select name="filter_level_start" class="inputbox" id="filter_level_start">				<option value=""><?php echo JText::_('COM_USERS_OPTION_SELECT_LEVEL_START');?></option>				<?php echo JHtml::_('select.options', $this->levels, 'value', 'text', $this->state->get('filter.level_start'));?>			</select>			<label class="selectlabel" for="filter_level_end"><?php echo JText::_('COM_USERS_OPTION_SELECT_LEVEL_END'); ?></label>			<select name="filter_level_end" class="inputbox" id="filter_level_end">				<option value=""><?php echo JText::_('COM_USERS_OPTION_SELECT_LEVEL_END');?></option>				<?php echo JHtml::_('select.options', $this->levels, 'value', 'text', $this->state->get('filter.level_end'));?>			</select>			<button type="submit" id="filter-go">				<?php echo JText::_('JSUBMIT'); ?></button>		</div>	</fieldset>	<div class="clr"> </div>	<div>		<?php echo JText::_('COM_USERS_DEBUG_LEGEND'); ?>		<span class="swatch"><?php echo JText::sprintf('COM_USERS_DEBUG_NO_CHECK', '-');?></span>		<span class="check-0 swatch"><?php echo JText::sprintf('COM_USERS_DEBUG_IMPLICIT_DENY', '-');?></span>		<span class="check-a swatch"><?php echo JText::sprintf('COM_USERS_DEBUG_EXPLICIT_ALLOW', '&#10003;');?></span>		<span class="check-d swatch"><?php echo JText::sprintf('COM_USERS_DEBUG_EXPLICIT_DENY', '&#10007;');?></span>	</div>	<table class="adminlist">		<thead>			<tr>				<th class="left">					<?php echo JHtml::_('grid.sort', 'COM_USERS_HEADING_ASSET_TITLE', 'a.title', $listDirn, $listOrder); ?>				</th>				<th class="left">					<?php echo JHtml::_('grid.sort', 'COM_USERS_HEADING_ASSET_NAME', 'a.name', $listDirn, $listOrder); ?>				</th>				<?php foreach ($this->actions as $key => $action) : ?>				<th class="width-5">					<span class="hasTip" title="<?php echo htmlspecialchars(JText::_($key).'::'.JText::_($action[1]), ENT_COMPAT, 'UTF-8'); ?>"><?php echo JText::_($key); ?></span>				</th>				<?php endforeach; ?>				<th class="width-5 nowrap">					<?php echo JHtml::_('grid.sort', 'COM_USERS_HEADING_LFT', 'a.lft', $listDirn, $listOrder); ?>				</th>				<th class="width-5 nowrap">					<?php echo JHtml::_('grid.sort', 'JGRID_HEADING_ID', 'a.id', $listDirn, $listOrder); ?>				</th>			</tr>		</thead>		<tbody>		<?php foreach ($this->items as $i => $item) : ?>			<tr class="row1">				<th>					<?php echo $this->escape($item->title); ?>				</th>				<td class="nowrap">					<?php echo str_repeat('<span class="gi">|&mdash;</span>', $item->level) ?>					<?php echo $this->escape($item->name); ?>				</td>				<?php foreach ($this->actions as $action) : ?>					<?php					$name	= $action[0];					$check	= $item->checks[$name];					if ($check === true) :						$class	= 'check-a';						$text	= '&#10003;';					elseif ($check === false) :						$class	= 'check-d';						$text	= '&#10007;';					elseif ($check === null) :						$class	= 'check-0';						$text	= '-';					else :						$class	= '';						$text	= '&#160;';					endif;					?>				<td class="center <?php echo $class;?>">					<?php echo $text; ?>				</td>				<?php endforeach; ?>				<td class="center">					<?php echo (int) $item->lft; ?>					- <?php echo (int) $item->rgt; ?>				</td>				<td class="center">					<?php echo (int) $item->id; ?>				</td>			</tr>			<?php endforeach; ?>		</tbody>	</table>	<?php echo $this->pagination->getListFooter(); ?>	<div>		<input type="hidden" name="task" value="" />		<input type="hidden" name="boxchecked" value="0" />		<input type="hidden" name="filter_order" value="<?php echo $listOrder; ?>" />		<input type="hidden" name="filter_order_Dir" value="<?php echo $listDirn; ?>" />		<?php echo JHtml::_('form.token'); ?>	</div></div></form>
<?php/** * @package     Joomla.Administrator * @subpackage  com_newsfeeds * * @copyright   Copyright (C) 2005 - 2013 Open Source Matters, Inc. All rights reserved. * @license     GNU General Public License version 2 or later; see LICENSE.txt */defined('_JEXEC') or die;/** * View to edit a newsfeed. * * @package     Joomla.Administrator * @subpackage  com_newsfeeds * @since       1.6 */class NewsfeedsViewNewsfeed extends JViewLegacy{	protected $item;	protected $form;	protected $state;	/**	 * Display the view	 */	public function display($tpl = null)	{		$this->state	= $this->get('State');		$this->item		= $this->get('Item');		$this->form		= $this->get('Form');		// Check for errors.		if (count($errors = $this->get('Errors')))		{			JError::raiseError(500, implode("\n", $errors));			return false;		}		$this->addToolbar();		parent::display($tpl);	}	/**	 * Add the page title and toolbar.	 *	 * @since   1.6	 */	protected function addToolbar()	{		JFactory::getApplication()->input->set('hidemainmenu', true);		$user		= JFactory::getUser();		$userId		= $user->get('id');		$isNew		= ($this->item->id == 0);		$checkedOut	= !($this->item->checked_out == 0 || $this->item->checked_out == $user->get('id'));		// Since we don't track these assets at the item level, use the category id.		$canDo		= NewsfeedsHelper::getActions($this->item->catid, 0);		JToolbarHelper::title(JText::_('COM_NEWSFEEDS_MANAGER_NEWSFEED'), 'newsfeeds.png');		// If not checked out, can save the item.		if (!$checkedOut && ($canDo->get('core.edit') || count($user->getAuthorisedCategories('com_newsfeeds', 'core.create')) > 0))		{			JToolbarHelper::apply('newsfeed.apply');			JToolbarHelper::save('newsfeed.save');		}		if (!$checkedOut && count($user->getAuthorisedCategories('com_newsfeeds', 'core.create')) > 0){			JToolbarHelper::save2new('newsfeed.save2new');		}		// If an existing item, can save to a copy.		if (!$isNew && $canDo->get('core.create'))		{			JToolbarHelper::save2copy('newsfeed.save2copy');		}		if (empty($this->item->id))		{			JToolbarHelper::cancel('newsfeed.cancel');		}		else		{			JToolbarHelper::cancel('newsfeed.cancel', 'JTOOLBAR_CLOSE');		}		JToolbarHelper::divider();		JToolbarHelper::help('JHELP_COMPONENTS_NEWSFEEDS_FEEDS_EDIT');	}}
<?php/** * @package     Joomla.Administrator * @subpackage  com_finder * * @copyright   Copyright (C) 2005 - 2013 Open Source Matters, Inc. All rights reserved. * @license     GNU General Public License version 2 or later; see LICENSE */defined('_JEXEC') or die;/** * Filters view class for Finder. * * @package     Joomla.Administrator * @subpackage  com_finder * @since       2.5 */class FinderViewFilters extends JViewLegacy{	/**	 * Method to display the view.	 *	 * @param   string  $tpl  A template file to load. [optional]	 *	 * @return  mixed  A string if successful, otherwise a JError object.	 *	 * @since   2.5	 */	public function display($tpl = null)	{		// Load the view data.		$this->items = $this->get('Items');		$this->pagination = $this->get('Pagination');		$this->total = $this->get('Total');		$this->state = $this->get('State');		FinderHelper::addSubmenu('filters');		// Check for errors.		if (count($errors = $this->get('Errors')))		{			JError::raiseError(500, implode("\n", $errors));			return false;		}		JHtml::addIncludePath(JPATH_COMPONENT . '/helpers/html');		// Configure the toolbar.		$this->addToolbar();		$this->sidebar = JHtmlSidebar::render();		parent::display($tpl);	}	/**	 * Method to configure the toolbar for this view.	 *	 * @return  void	 *	 * @since   2.5	 */	protected function addToolbar()	{		$canDo = FinderHelper::getActions();		JToolbarHelper::title(JText::_('COM_FINDER_FILTERS_TOOLBAR_TITLE'), 'finder');		$toolbar = JToolbar::getInstance('toolbar');		if ($canDo->get('core.create'))		{			JToolbarHelper::addNew('filter.add');			JToolbarHelper::editList('filter.edit');			JToolbarHelper::divider();		}		if ($canDo->get('core.edit.state'))		{			JToolbarHelper::publishList('filters.publish');			JToolbarHelper::unpublishList('filters.unpublish');			JToolbarHelper::divider();		}		if ($canDo->get('core.delete'))		{			JToolbarHelper::deleteList('', 'filters.delete');			JToolbarHelper::divider();		}		if ($canDo->get('core.admin'))		{			JToolbarHelper::preferences('com_finder');		}		JToolbarHelper::divider();		$toolbar->appendButton('Popup', 'stats', 'COM_FINDER_STATISTICS', 'index.php?option=com_finder&view=statistics&tmpl=component', 550, 350);		JToolbarHelper::divider();		JToolbarHelper::help('JHELP_COMPONENTS_FINDER_MANAGE_SEARCH_FILTERS');		JHtmlSidebar::setAction('index.php?option=com_finder&view=filters');		JHtmlSidebar::addFilter(			JText::_('COM_FINDER_INDEX_FILTER_BY_STATE'),			'filter_state',			JHtml::_('select.options', JHtml::_('finder.statelist'), 'value', 'text', $this->state->get('filter.state'))		);	}}
<?php/** * @package     Joomla.Administrator * @subpackage  com_languages * * @copyright   Copyright (C) 2005 - 2013 Open Source Matters, Inc. All rights reserved. * @license     GNU General Public License version 2 or later; see LICENSE.txt */defined('_JEXEC') or die;/** * Languages Component Languages Model * * @package     Joomla.Administrator * @subpackage  com_languages * @since       1.6 */class LanguagesModelInstalled extends JModelList{	/**	 * @var object client object	 */	protected $client = null;	/**	 * @var object user object	 */	protected $user = null;	/**	 * @var boolean|JExeption True, if FTP settings should be shown, or an exeption	 */	protected $ftp = null;	/**	 * @var string option name	 */	protected $option = null;	/**	 * @var array languages description	 */	protected $data = null;	/**	 * @var int total number pf languages	 */	protected $total = null;	/**	 * @var int total number pf languages installed	 */	protected $langlist = null;	/**	 * @var string language path	 */	protected $path = null;	/**	 * Method to auto-populate the model state.	 *	 * Note. Calling getState in this method will result in recursion.	 *	 * @return  void	 * @since   1.6	 */	protected function populateState($ordering = null, $direction = null)	{		$app = JFactory::getApplication('administrator');		// Load the filter state.		$clientId = $app->input->getInt('client');		$this->setState('filter.client_id', $clientId);		// Load the parameters.		$params = JComponentHelper::getParams('com_languages');		$this->setState('params', $params);		// List state information.		parent::populateState('a.name', 'asc');	}	/**	 * Method to get a store id based on model configuration state.	 *	 * This is necessary because the model is used by the component and	 * different modules that might need different sets of data or different	 * ordering requirements.	 *	 * @param   string  $id	A prefix for the store id.	 *	 * @return  string  A store id.	 * @since   1.6	 */	protected function getStoreId($id = '')	{		// Compile the store id.		$id	.= ':'.$this->getState('filter.client_id');		return parent::getStoreId($id);	}	/**	 * Method to get the client object	 *	 * @return  object	 * @since   1.6	 */	public function &getClient()	{		if (is_null($this->client))		{			$this->client = JApplicationHelper::getClientInfo($this->getState('filter.client_id', 0));		}		return $this->client;	}	/**	 * Method to get the ftp credentials	 *	 * @return  object	 * @since   1.6	 */	public function &getFtp()	{		if (is_null($this->ftp))		{			$this->ftp = JClientHelper::setCredentialsFromRequest('ftp');		}		return $this->ftp;	}	/**	 * Method to get the option	 *	 * @return  object	 * @since   1.6	 */	public function &getOption()	{		$option = $this->getState('option');		return $option;	}	/**	 * Method to get Languages item data	 *	 * @return  array	 * @since   1.6	 */	public function &getData()	{		if (is_null($this->data)) {			// Get information			$path		= $this->getPath();			$client		= $this->getClient();			$langlist   = $this->getLanguageList();			// Compute all the languages			$data	= array ();			foreach ($langlist as $lang) {				$file = $path . '/' . $lang . '/' . $lang.'.xml';				$info = JApplicationHelper::parseXMLLangMetaFile($file);				$row = new JObject;				$row->language = $lang;				if (!is_array($info))				{					continue;				}				foreach ($info as $key => $value)				{					$row->$key = $value;				}				// if current than set published				$params = JComponentHelper::getParams('com_languages');				if ($params->get($client->name, 'en-GB') == $row->language)				{					$row->published	= 1;				}				else {					$row->published = 0;				}				$row->checked_out = 0;				$data[] = $row;			}			usort($data, array($this, 'compareLanguages'));			// Prepare data			$limit = $this->getState('list.limit');			$start = $this->getState('list.start');			$total = $this->getTotal();			if ($limit == 0)			{				$start = 0;				$end = $total;			}			else {				if ($start > $total)				{					$start = $total - $total % $limit;				}				$end = $start + $limit;				if ($end > $total)				{					$end = $total;				}			}			// Compute the displayed languages			$this->data	= array();			for ($i = $start;$i < $end;$i++)			{				$this->data[] = & $data[$i];			}		}		return $this->data;	}	/**	 * Method to get installed languages data.	 *	 * @return  string	An SQL query	 * @since   1.6	 */	protected function getLanguageList()	{		// Create a new db object.		$db = $this->getDbo();		$query = $db->getQuery(true);		$client = $this->getState('filter.client_id');		$type = "language";		// Select field element from the extensions table.		$query->select($this->getState('list.select', 'a.element'))			->from('#__extensions AS a');		$type = $db->quote($type);		$query->where('(a.type = '.$type.')')			->where('state = 0')			->where('enabled = 1')			->where('client_id=' . (int) $client);		// for client_id = 1 do we need to check language table also ?		$db->setQuery($query);		$this->langlist = $db->loadColumn();		return $this->langlist;	}	/**	 * Method to get the total number of Languages items	 *	 * @return  integer	 * @since   1.6	 */	public function getTotal()	{		if (is_null($this->total))		{			$langlist = $this->getLanguageList();			$this->total = count($langlist);		}		return $this->total;	}	/**	 * Method to set the default language	 *	 * @return  boolean	 * @since   1.6	 */	public function publish($cid)	{		if ($cid)		{			$client	= $this->getClient();			$params = JComponentHelper::getParams('com_languages');			$params->set($client->name, $cid);			$table = JTable::getInstance('extension');			$id = $table->find(array('element' => 'com_languages'));			// Load			if (!$table->load($id))			{				$this->setError($table->getError());				return false;			}			$table->params = (string) $params;			// pre-save checks			if (!$table->check())			{				$this->setError($table->getError());				return false;			}			// save the changes			if (!$table->store())			{				$this->setError($table->getError());				return false;			}		}		else		{			$this->setError(JText::_('COM_LANGUAGES_ERR_NO_LANGUAGE_SELECTED'));			return false;		}		// Clean the cache of com_languages and component cache.		$this->cleanCache();		$this->cleanCache('_system');		return true;	}	/**	 * Method to get the folders	 *	 * @return  array  Languages folders	 * @since   1.6	 */	protected function getFolders()	{		if (is_null($this->folders))		{			$path = $this->getPath();			jimport('joomla.filesystem.folder');			$this->folders = JFolder::folders($path, '.', false, false, array('.svn', 'CVS', '.DS_Store', '__MACOSX', 'pdf_fonts', 'overrides'));		}		return $this->folders;	}	/**	 * Method to get the path	 *	 * @return  string	The path to the languages folders	 * @since   1.6	 */	protected function getPath()	{		if (is_null($this->path))		{			$client = $this->getClient();			$this->path = JLanguage::getLanguagePath($client->path);		}		return $this->path;	}	/**	 * Method to compare two languages in order to sort them	 *	 * @param   object	$lang1 the first language	 * @param   object	$lang2 the second language	 *	 * @return  integer	 * @since   1.6	 */	protected function compareLanguages($lang1, $lang2)	{		return strcmp($lang1->name, $lang2->name);	}}
<?php/** * @package     Joomla.Platform * @subpackage  Database * * @copyright   Copyright (C) 2005 - 2013 Open Source Matters, Inc. All rights reserved. * @license     GNU General Public License version 2 or later; see LICENSE */defined('JPATH_PLATFORM') or die;/** * SQL Server database driver * * @package     Joomla.Platform * @subpackage  Database * @see         http://msdn.microsoft.com/en-us/library/cc296152(SQL.90).aspx * @since       12.1 */class JDatabaseDriverSqlsrv extends JDatabaseDriver{	/**	 * The name of the database driver.	 *	 * @var    string	 * @since  12.1	 */	public $name = 'sqlsrv';	/**	 * The character(s) used to quote SQL statement names such as table names or field names,	 * etc.  The child classes should define this as necessary.  If a single character string the	 * same character is used for both sides of the quoted name, else the first character will be	 * used for the opening quote and the second for the closing quote.	 *	 * @var    string	 * @since  12.1	 */	protected $nameQuote = '[]';	/**	 * The null or zero representation of a timestamp for the database driver.  This should be	 * defined in child classes to hold the appropriate value for the engine.	 *	 * @var    string	 * @since  12.1	 */	protected $nullDate = '1900-01-01 00:00:00';	/**	 * @var    string  The minimum supported database version.	 * @since  12.1	 */	protected static $dbMinimum = '10.50.1600.1';	/**	 * Test to see if the SQLSRV connector is available.	 *	 * @return  boolean  True on success, false otherwise.	 *	 * @since   12.1	 */	public static function isSupported()	{		return (function_exists('sqlsrv_connect'));	}	/**	 * Constructor.	 *	 * @param   array  $options  List of options used to configure the connection	 *	 * @since   12.1	 */	public function __construct($options)	{		// Get some basic values from the options.		$options['host'] = (isset($options['host'])) ? $options['host'] : 'localhost';		$options['user'] = (isset($options['user'])) ? $options['user'] : '';		$options['password'] = (isset($options['password'])) ? $options['password'] : '';		$options['database'] = (isset($options['database'])) ? $options['database'] : '';		$options['select'] = (isset($options['select'])) ? (bool) $options['select'] : true;		// Finalize initialisation		parent::__construct($options);	}	/**	 * Destructor.	 *	 * @since   12.1	 */	public function __destruct()	{		if (is_resource($this->connection))		{			sqlsrv_close($this->connection);		}	}	/**	 * Connects to the database if needed.	 *	 * @return  void  Returns void if the database connected successfully.	 *	 * @since   12.1	 * @throws  RuntimeException	 */	public function connect()	{		if ($this->connection)		{			return;		}		// Build the connection configuration array.		$config = array(			'Database' => $this->options['database'],			'uid' => $this->options['user'],			'pwd' => $this->options['password'],			'CharacterSet' => 'UTF-8',			'ReturnDatesAsStrings' => true);		// Make sure the SQLSRV extension for PHP is installed and enabled.		if (!function_exists('sqlsrv_connect'))		{			throw new RuntimeException('PHP extension sqlsrv_connect is not available.');		}		// Attempt to connect to the server.		if (!($this->connection = @ sqlsrv_connect($this->options['host'], $config)))		{			throw new RuntimeException('Database sqlsrv_connect failed');		}		// Make sure that DB warnings are not returned as errors.		sqlsrv_configure('WarningsReturnAsErrors', 0);		// If auto-select is enabled select the given database.		if ($this->options['select'] && !empty($this->options['database']))		{			$this->select($this->options['database']);		}	}	/**	 * Disconnects the database.	 *	 * @return  void	 *	 * @since   12.1	 */	public function disconnect()	{		// Close the connection.		if (is_resource($this->connection))		{			sqlsrv_close($this->connection);		}		$this->connection = null;	}	/**	 * Get table constraints	 *	 * @param   string  $tableName  The name of the database table.	 *	 * @return  array  Any constraints available for the table.	 *	 * @since   12.1	 */	protected function getTableConstraints($tableName)	{		$this->connect();		$query = $this->getQuery(true);		$this->setQuery(			'SELECT CONSTRAINT_NAME FROM INFORMATION_SCHEMA.TABLE_CONSTRAINTS WHERE TABLE_NAME = ' . $query->quote($tableName)		);		return $this->loadColumn();	}	/**	 * Rename constraints.	 *	 * @param   array   $constraints  Array(strings) of table constraints	 * @param   string  $prefix       A string	 * @param   string  $backup       A string	 *	 * @return  void	 *	 * @since   12.1	 */	protected function renameConstraints($constraints = array(), $prefix = null, $backup = null)	{		$this->connect();		foreach ($constraints as $constraint)		{			$this->setQuery('sp_rename ' . $constraint . ',' . str_replace($prefix, $backup, $constraint));			$this->execute();		}	}	/**	 * Method to escape a string for usage in an SQL statement.	 *	 * The escaping for MSSQL isn't handled in the driver though that would be nice.  Because of this we need	 * to handle the escaping ourselves.	 *	 * @param   string   $text   The string to be escaped.	 * @param   boolean  $extra  Optional parameter to provide extra escaping.	 *	 * @return  string  The escaped string.	 *	 * @since   12.1	 */	public function escape($text, $extra = false)	{		$result = addslashes($text);		$result = str_replace("\'", "''", $result);		$result = str_replace('\"', '"', $result);		$result = str_replace('\/', '/', $result);		if ($extra)		{			// We need the below str_replace since the search in sql server doesn't recognize _ character.			$result = str_replace('_', '[_]', $result);		}		return $result;	}	/**	 * Determines if the connection to the server is active.	 *	 * @return  boolean  True if connected to the database engine.	 *	 * @since   12.1	 */	public function connected()	{		// TODO: Run a blank query here		return true;	}	/**	 * Drops a table from the database.	 *	 * @param   string   $tableName  The name of the database table to drop.	 * @param   boolean  $ifExists   Optionally specify that the table must exist before it is dropped.	 *	 * @return  JDatabaseDriverSqlsrv  Returns this object to support chaining.	 *	 * @since   12.1	 */	public function dropTable($tableName, $ifExists = true)	{		$this->connect();		$query = $this->getQuery(true);		if ($ifExists)		{			$this->setQuery(				'IF EXISTS(SELECT TABLE_NAME FROM INFORMATION_SCHEMA.TABLES WHERE TABLE_NAME = ' . $query->quote($tableName) . ') DROP TABLE ' . $tableName			);		}		else		{			$this->setQuery('DROP TABLE ' . $tableName);		}		$this->execute();		return $this;	}	/**	 * Get the number of affected rows for the previous executed SQL statement.	 *	 * @return  integer  The number of affected rows.	 *	 * @since   12.1	 */	public function getAffectedRows()	{		$this->connect();		return sqlsrv_rows_affected($this->cursor);	}	/**	 * Method to get the database collation in use by sampling a text field of a table in the database.	 *	 * @return  mixed  The collation in use by the database or boolean false if not supported.	 *	 * @since   12.1	 */	public function getCollation()	{		// TODO: Not fake this		return 'MSSQL UTF-8 (UCS2)';	}	/**	 * Get the number of returned rows for the previous executed SQL statement.	 *	 * @param   resource  $cursor  An optional database cursor resource to extract the row count from.	 *	 * @return  integer   The number of returned rows.	 *	 * @since   12.1	 */	public function getNumRows($cursor = null)	{		$this->connect();		return sqlsrv_num_rows($cursor ? $cursor : $this->cursor);	}	/**	 * Retrieves field information about the given tables.	 *	 * @param   mixed    $table     A table name	 * @param   boolean  $typeOnly  True to only return field types.	 *	 * @return  array  An array of fields.	 *	 * @since   12.1	 * @throws  RuntimeException	 */	public function getTableColumns($table, $typeOnly = true)	{		$result = array();		$table_temp = $this->replacePrefix((string) $table);		// Set the query to get the table fields statement.		$this->setQuery(			'SELECT column_name as Field, data_type as Type, is_nullable as \'Null\', column_default as \'Default\'' .			' FROM information_schema.columns WHERE table_name = ' . $this->quote($table_temp)		);		$fields = $this->loadObjectList();		// If we only want the type as the value add just that to the list.		if ($typeOnly)		{			foreach ($fields as $field)			{				$result[$field->Field] = preg_replace("/[(0-9)]/", '', $field->Type);			}		}		// If we want the whole field data object add that to the list.		else		{			foreach ($fields as $field)			{				$result[$field->Field] = $field;			}		}		return $result;	}	/**	 * Shows the table CREATE statement that creates the given tables.	 *	 * This is unsupported by MSSQL.	 *	 * @param   mixed  $tables  A table name or a list of table names.	 *	 * @return  array  A list of the create SQL for the tables.	 *	 * @since   12.1	 * @throws  RuntimeException	 */	public function getTableCreate($tables)	{		$this->connect();		return '';	}	/**	 * Get the details list of keys for a table.	 *	 * @param   string  $table  The name of the table.	 *	 * @return  array  An array of the column specification for the table.	 *	 * @since   12.1	 * @throws  RuntimeException	 */	public function getTableKeys($table)	{		$this->connect();		// TODO To implement.		return array();	}	/**	 * Method to get an array of all tables in the database.	 *	 * @return  array  An array of all the tables in the database.	 *	 * @since   12.1	 * @throws  RuntimeException	 */	public function getTableList()	{		$this->connect();		// Set the query to get the tables statement.		$this->setQuery('SELECT name FROM ' . $this->getDatabase() . '.sys.Tables WHERE type = \'U\';');		$tables = $this->loadColumn();		return $tables;	}	/**	 * Get the version of the database connector.	 *	 * @return  string  The database connector version.	 *	 * @since   12.1	 */	public function getVersion()	{		$this->connect();		$version = sqlsrv_server_info($this->connection);		return $version['SQLServerVersion'];	}	/**	 * Inserts a row into a table based on an object's properties.	 *	 * @param   string  $table    The name of the database table to insert into.	 * @param   object  &$object  A reference to an object whose public properties match the table fields.	 * @param   string  $key      The name of the primary key. If provided the object property is updated.	 *	 * @return  boolean    True on success.	 *	 * @since   12.1	 * @throws  RuntimeException	 */	public function insertObject($table, &$object, $key = null)	{		$fields = array();		$values = array();		$statement = 'INSERT INTO ' . $this->quoteName($table) . ' (%s) VALUES (%s)';		foreach (get_object_vars($object) as $k => $v)		{			if (is_array($v) or is_object($v) or $v === null)			{				continue;			}			if (!$this->checkFieldExists($table, $k))			{				continue;			}			if ($k[0] == '_')			{				// Internal field				continue;			}			if ($k == $key && $key == 0)			{				continue;			}			$fields[] = $this->quoteName($k);			$values[] = $this->Quote($v);		}		// Set the query and execute the insert.		$this->setQuery(sprintf($statement, implode(',', $fields), implode(',', $values)));		if (!$this->execute())		{			return false;		}		$id = $this->insertid();		if ($key && $id)		{			$object->$key = $id;		}		return true;	}	/**	 * Method to get the auto-incremented value from the last INSERT statement.	 *	 * @return  integer  The value of the auto-increment field from the last inserted row.	 *	 * @since   12.1	 */	public function insertid()	{		$this->connect();		// TODO: SELECT IDENTITY		$this->setQuery('SELECT @@IDENTITY');		return (int) $this->loadResult();	}	/**	 * Method to get the first field of the first row of the result set from the database query.	 *	 * @return  mixed  The return value or null if the query failed.	 *	 * @since   12.1	 * @throws  RuntimeException	 */	public function loadResult()	{		$ret = null;		// Execute the query and get the result set cursor.		if (!($cursor = $this->execute()))		{			return null;		}		// Get the first row from the result set as an array.		if ($row = sqlsrv_fetch_array($cursor, SQLSRV_FETCH_NUMERIC))		{			$ret = $row[0];		}		// Free up system resources and return.		$this->freeResult($cursor);		// For SQLServer - we need to strip slashes		$ret = stripslashes($ret);		return $ret;	}	/**	 * Execute the SQL statement.	 *	 * @return  mixed  A database cursor resource on success, boolean false on failure.	 *	 * @since   12.1	 * @throws  RuntimeException	 * @throws  Exception	 */	public function execute()	{		$this->connect();		if (!is_resource($this->connection))		{			JLog::add(JText::sprintf('JLIB_DATABASE_QUERY_FAILED', $this->errorNum, $this->errorMsg), JLog::ERROR, 'database');			throw new RuntimeException($this->errorMsg, $this->errorNum);		}		// Take a local copy so that we don't modify the original query and cause issues later		$query = $this->replacePrefix((string) $this->sql);		if ($this->limit > 0 || $this->offset > 0)		{			$query = $this->limit($query, $this->limit, $this->offset);		}		// Increment the query counter.		$this->count++;		// If debugging is enabled then let's log the query.		if ($this->debug)		{			// Add the query to the object queue.			$this->log[] = $query;			JLog::add($query, JLog::DEBUG, 'databasequery');		}		// Reset the error values.		$this->errorNum = 0;		$this->errorMsg = '';		// SQLSrv_num_rows requires a static or keyset cursor.		if (strncmp(ltrim(strtoupper($query)), 'SELECT', strlen('SELECT')) == 0)		{			$array = array('Scrollable' => SQLSRV_CURSOR_KEYSET);		}		else		{			$array = array();		}		// Execute the query. Error suppression is used here to prevent warnings/notices that the connection has been lost.		$this->cursor = @sqlsrv_query($this->connection, $query, array(), $array);		// If an error occurred handle it.		if (!$this->cursor)		{			// Check if the server was disconnected.			if (!$this->connected())			{				try				{					// Attempt to reconnect.					$this->connection = null;					$this->connect();				}				// If connect fails, ignore that exception and throw the normal exception.				catch (RuntimeException $e)				{					// Get the error number and message.					$errors = sqlsrv_errors();					$this->errorNum = $errors[0]['SQLSTATE'];					$this->errorMsg = $errors[0]['message'] . 'SQL=' . $query;					// Throw the normal query exception.					JLog::add(JText::sprintf('JLIB_DATABASE_QUERY_FAILED', $this->errorNum, $this->errorMsg), JLog::ERROR, 'databasequery');					throw new RuntimeException($this->errorMsg, $this->errorNum);				}				// Since we were able to reconnect, run the query again.				return $this->execute();			}			// The server was not disconnected.			else			{				// Get the error number and message.				$errors = sqlsrv_errors();				$this->errorNum = $errors[0]['SQLSTATE'];				$this->errorMsg = $errors[0]['message'] . 'SQL=' . $query;				// Throw the normal query exception.				JLog::add(JText::sprintf('JLIB_DATABASE_QUERY_FAILED', $this->errorNum, $this->errorMsg), JLog::ERROR, 'databasequery');				throw new RuntimeException($this->errorMsg, $this->errorNum);			}		}		return $this->cursor;	}	/**	 * This function replaces a string identifier <var>$prefix</var> with the string held is the	 * <var>tablePrefix</var> class variable.	 *	 * @param   string  $query   The SQL statement to prepare.	 * @param   string  $prefix  The common table prefix.	 *	 * @return  string  The processed SQL statement.	 *	 * @since   12.1	 */	public function replacePrefix($query, $prefix = '#__')	{		$escaped = false;		$startPos = 0;		$quoteChar = '';		$literal = '';		$query = trim($query);		$n = strlen($query);		while ($startPos < $n)		{			$ip = strpos($query, $prefix, $startPos);			if ($ip === false)			{				break;			}			$j = strpos($query, "N'", $startPos);			$k = strpos($query, '"', $startPos);			if (($k !== false) && (($k < $j) || ($j === false)))			{				$quoteChar = '"';				$j = $k;			}			else			{				$quoteChar = "'";			}			if ($j === false)			{				$j = $n;			}			$literal .= str_replace($prefix, $this->tablePrefix, substr($query, $startPos, $j - $startPos));			$startPos = $j;			$j = $startPos + 1;			if ($j >= $n)			{				break;			}			// Quote comes first, find end of quote			while (true)			{				$k = strpos($query, $quoteChar, $j);				$escaped = false;				if ($k === false)				{					break;				}				$l = $k - 1;				while ($l >= 0 && $query{$l} == '\\')				{					$l--;					$escaped = !$escaped;				}				if ($escaped)				{					$j = $k + 1;					continue;				}				break;			}			if ($k === false)			{				// Error in the query - no end quote; ignore it				break;			}			$literal .= substr($query, $startPos, $k - $startPos + 1);			$startPos = $k + 1;		}		if ($startPos < $n)		{			$literal .= substr($query, $startPos, $n - $startPos);		}		return $literal;	}	/**	 * Select a database for use.	 *	 * @param   string  $database  The name of the database to select for use.	 *	 * @return  boolean  True if the database was successfully selected.	 *	 * @since   12.1	 * @throws  RuntimeException	 */	public function select($database)	{		$this->connect();		if (!$database)		{			return false;		}		if (!sqlsrv_query($this->connection, 'USE ' . $database, null, array('scrollable' => SQLSRV_CURSOR_STATIC)))		{			throw new RuntimeException('Could not connect to database');		}		return true;	}	/**	 * Set the connection to use UTF-8 character encoding.	 *	 * @return  boolean  True on success.	 *	 * @since   12.1	 */	public function setUTF()	{		// TODO: Remove this?	}	/**	 * Method to commit a transaction.	 *	 * @return  void	 *	 * @since   12.1	 * @throws  RuntimeException	 */	public function transactionCommit()	{		$this->connect();		$this->setQuery('COMMIT TRANSACTION');		$this->execute();	}	/**	 * Method to roll back a transaction.	 *	 * @return  void	 *	 * @since   12.1	 * @throws  RuntimeException	 */	public function transactionRollback()	{		$this->connect();		$this->setQuery('ROLLBACK TRANSACTION');		$this->execute();	}	/**	 * Method to initialize a transaction.	 *	 * @return  void	 *	 * @since   12.1	 * @throws  RuntimeException	 */	public function transactionStart()	{		$this->connect();		$this->setQuery('BEGIN TRANSACTION');		$this->execute();	}	/**	 * Method to fetch a row from the result set cursor as an array.	 *	 * @param   mixed  $cursor  The optional result set cursor from which to fetch the row.	 *	 * @return  mixed  Either the next row from the result set or false if there are no more rows.	 *	 * @since   12.1	 */	protected function fetchArray($cursor = null)	{		return sqlsrv_fetch_array($cursor ? $cursor : $this->cursor, SQLSRV_FETCH_NUMERIC);	}	/**	 * Method to fetch a row from the result set cursor as an associative array.	 *	 * @param   mixed  $cursor  The optional result set cursor from which to fetch the row.	 *	 * @return  mixed  Either the next row from the result set or false if there are no more rows.	 *	 * @since   12.1	 */	protected function fetchAssoc($cursor = null)	{		return sqlsrv_fetch_array($cursor ? $cursor : $this->cursor, SQLSRV_FETCH_ASSOC);	}	/**	 * Method to fetch a row from the result set cursor as an object.	 *	 * @param   mixed   $cursor  The optional result set cursor from which to fetch the row.	 * @param   string  $class   The class name to use for the returned row object.	 *	 * @return  mixed   Either the next row from the result set or false if there are no more rows.	 *	 * @since   12.1	 */	protected function fetchObject($cursor = null, $class = 'stdClass')	{		return sqlsrv_fetch_object($cursor ? $cursor : $this->cursor, $class);	}	/**	 * Method to free up the memory used for the result set.	 *	 * @param   mixed  $cursor  The optional result set cursor from which to fetch the row.	 *	 * @return  void	 *	 * @since   12.1	 */	protected function freeResult($cursor = null)	{		sqlsrv_free_stmt($cursor ? $cursor : $this->cursor);	}	/**	 * Method to check and see if a field exists in a table.	 *	 * @param   string  $table  The table in which to verify the field.	 * @param   string  $field  The field to verify.	 *	 * @return  boolean  True if the field exists in the table.	 *	 * @since   12.1	 */	protected function checkFieldExists($table, $field)	{		$this->connect();		$table = $this->replacePrefix((string) $table);		$query = "SELECT COLUMN_NAME FROM INFORMATION_SCHEMA.COLUMNS" . " WHERE TABLE_NAME = '$table' AND COLUMN_NAME = '$field'" .			" ORDER BY ORDINAL_POSITION";		$this->setQuery($query);		if ($this->loadResult())		{			return true;		}		else		{			return false;		}	}	/**	 * Method to wrap an SQL statement to provide a LIMIT and OFFSET behavior for scrolling through a result set.	 *	 * @param   string   $query   The SQL statement to process.	 * @param   integer  $limit   The maximum affected rows to set.	 * @param   integer  $offset  The affected row offset to set.	 *	 * @return  string   The processed SQL statement.	 *	 * @since   12.1	 */	protected function limit($query, $limit, $offset)	{		$orderBy = stristr($query, 'ORDER BY');		if (is_null($orderBy) || empty($orderBy))		{			$orderBy = 'ORDER BY (select 0)';		}		$query = str_ireplace($orderBy, '', $query);		$rowNumberText = ',ROW_NUMBER() OVER (' . $orderBy . ') AS RowNumber FROM ';		$query = preg_replace('/\\s+FROM/', '\\1 ' . $rowNumberText . ' ', $query, 1);		$query = 'SELECT TOP ' . $this->limit . ' * FROM (' . $query . ') _myResults WHERE RowNumber > ' . $this->offset;		return $query;	}	/**	 * Renames a table in the database.	 *	 * @param   string  $oldTable  The name of the table to be renamed	 * @param   string  $newTable  The new name for the table.	 * @param   string  $backup    Table prefix	 * @param   string  $prefix    For the table - used to rename constraints in non-mysql databases	 *	 * @return  JDatabaseDriverSqlsrv  Returns this object to support chaining.	 *	 * @since   12.1	 * @throws  RuntimeException	 */	public function renameTable($oldTable, $newTable, $backup = null, $prefix = null)	{		$constraints = array();		if (!is_null($prefix) && !is_null($backup))		{			$constraints = $this->getTableConstraints($oldTable);		}		if (!empty($constraints))		{			$this->renameConstraints($constraints, $prefix, $backup);		}		$this->setQuery("sp_rename '" . $oldTable . "', '" . $newTable . "'");		return $this->execute();	}	/**	 * Locks a table in the database.	 *	 * @param   string  $tableName  The name of the table to lock.	 *	 * @return  JDatabaseDriverSqlsrv  Returns this object to support chaining.	 *	 * @since   12.1	 * @throws  RuntimeException	 */	public function lockTable($tableName)	{		return $this;	}	/**	 * Unlocks tables in the database.	 *	 * @return  JDatabaseDriverSqlsrv  Returns this object to support chaining.	 *	 * @since   12.1	 * @throws  RuntimeException	 */	public function unlockTables()	{		return $this;	}}
<?php/** * @package     Joomla.Plugin * @subpackage  System.languagecode * * @copyright   Copyright (C) 2005 - 2013 Open Source Matters, Inc. All rights reserved. * @license     GNU General Public License version 2 or later; see LICENSE.txt */defined('_JEXEC') or die;/** * Language Code plugin class. * * @package     Joomla.Plugin * @subpackage  Content.languagecode * @since       2.5 */class PlgSystemLanguagecode extends JPlugin{	/**	 * Plugin that change the language code used in the <html /> tag	 *	 * @since  2.5	 */	public function onAfterRender()	{		// Use this plugin only in site application		if (JFactory::getApplication()->isSite())		{			// Get the response body			$body = JResponse::getBody();			// Get the current language code			$code = JFactory::getDocument()->getLanguage();			// Get the new code			$new_code  = $this->params->get($code);			// Replace the old code by the new code in the <html /> tag			if ($new_code)			{				// Replace the new code in the HTML document				$patterns = array(					chr(1) . '(<html.*\s+xml:lang=")(' . $code . ')(".*>)' . chr(1) . 'i',					chr(1) . '(<html.*\s+lang=")(' . $code . ')(".*>)' . chr(1) . 'i',				);				$replace = array(					'${1}' . strtolower($new_code) . '${3}',					'${1}' . strtolower($new_code) . '${3}'				);			}			else			{				$patterns = array();				$replace = array();			}			// Replace codes in <link hreflang="" /> attributes			preg_match_all(chr(1) . '(<link.*\s+hreflang=")([0-9a-z\-]*)(".*\s+rel="alternate".*/>)' . chr(1) . 'i', $body, $matches);			foreach ($matches[2] as $match)			{				$new_code = $this->params->get(strtolower($match));				if ($new_code)				{					$patterns[] = chr(1) . '(<link.*\s+hreflang=")(' . $match . ')(".*\s+rel="alternate".*/>)' . chr(1) . 'i';					$replace[] = '${1}' . $new_code . '${3}';				}			}			preg_match_all(chr(1) . '(<link.*\s+rel="alternate".*\s+hreflang=")([0-9A-Za-z\-]*)(".*/>)' . chr(1) . 'i', $body, $matches);			foreach ($matches[2] as $match)			{				$new_code = $this->params->get(strtolower($match));				if ($new_code)				{					$patterns[] = chr(1) . '(<link.*\s+rel="alternate".*\s+hreflang=")(' . $match . ')(".*/>)' . chr(1) . 'i';					$replace[] = '${1}' . $new_code . '${3}';				}			}			JResponse::setBody(preg_replace($patterns, $replace, $body));		}	}	/**	 * @param   JForm	$form	The form to be altered.	 * @param   array  $data	The associated data for the form.	 *	 * @return  boolean	 * @since	2.5	 */	public function onContentPrepareForm($form, $data)	{		// Check we have a form		if (!($form instanceof JForm))		{			$this->_subject->setError('JERROR_NOT_A_FORM');			return false;		}		// Check we are manipulating a valid form.		$app = JFactory::getApplication();		if ($form->getName() != 'com_plugins.plugin'			|| isset($data->name) && $data->name != 'plg_system_languagecode'			|| empty($data) && !$app->getUserState('plg_system_language_code.edit')		)		{			return true;		}		// Mark the plugin as being edited		$app->setUserState('plg_system_language_code.edit', $data->name == 'plg_system_languagecode');		// Get site languages		$languages = JLanguage::getKnownLanguages(JPATH_SITE);		// Inject fields into the form		foreach ($languages as $tag => $language)		{			$form->load('<form>	<fields name="params">		<fieldset			name="languagecode"			label="PLG_SYSTEM_LANGUAGECODE_FIELDSET_LABEL"			description="PLG_SYSTEM_LANGUAGECODE_FIELDSET_DESC"		>			<field				name="'.strtolower($tag).'"				type="text"				description="' . htmlspecialchars(JText::sprintf('PLG_SYSTEM_LANGUAGECODE_FIELD_DESC', $language['name']), ENT_COMPAT, 'UTF-8') . '"				translate_description="false"				label="' . $tag . '"				translate_label="false"				size="7"				filter="cmd"			/>		</fieldset>	</fields></form>			');		}		return true;	}}
<?php/** * @package     Joomla.Libraries * @subpackage  Installer * * @copyright   Copyright (C) 2005 - 2013 Open Source Matters, Inc. All rights reserved. * @license     GNU General Public License version 2 or later; see LICENSE */defined('JPATH_PLATFORM') or die;jimport('joomla.base.adapterinstance');jimport('joomla.filesystem.folder');/** * Language installer * * @package     Joomla.Libraries * @subpackage  Installer * @since       3.1 */class JInstallerAdapterLanguage extends JAdapterInstance{	/**	 * Core language pack flag	 *	 * @var    boolean	 * @since  12.1	 */	protected $core = false;	/**	 * Custom install method	 *	 * Note: This behaves badly due to hacks made in the middle of 1.5.x to add	 * the ability to install multiple distinct packs in one install. The	 * preferred method is to use a package to install multiple language packs.	 *	 * @return  boolean  True on success	 *	 * @since   3.1	 */	public function install()	{		$source = $this->parent->getPath('source');		if (!$source)		{			$this->parent				->setPath(				'source',				($this->parent->extension->client_id ? JPATH_ADMINISTRATOR : JPATH_SITE) . '/language/' . $this->parent->extension->element			);		}		$this->manifest = $this->parent->getManifest();		// Get the client application target		if ($cname = (string) $this->manifest->attributes()->client)		{			// Attempt to map the client to a base path			$client = JApplicationHelper::getClientInfo($cname, true);			if ($client === null)			{				$this->parent->abort(JText::sprintf('JLIB_INSTALLER_ABORT', JText::sprintf('JLIB_INSTALLER_ERROR_UNKNOWN_CLIENT_TYPE', $cname)));				return false;			}			$basePath = $client->path;			$clientId = $client->id;			$element = $this->manifest->files;			return $this->_install($cname, $basePath, $clientId, $element);		}		else		{			// No client attribute was found so we assume the site as the client			$cname = 'site';			$basePath = JPATH_SITE;			$clientId = 0;			$element = $this->manifest->files;			return $this->_install($cname, $basePath, $clientId, $element);		}	}	/**	 * Install function that is designed to handle individual clients	 *	 * @param   string   $cname     Cname @todo: not used	 * @param   string   $basePath  The base name.	 * @param   integer  $clientId  The client id.	 * @param   object   &$element  The XML element.	 *	 * @return  boolean	 *	 * @since  3.1	 */	protected function _install($cname, $basePath, $clientId, &$element)	{		$this->manifest = $this->parent->getManifest();		// Get the language name		// Set the extensions name		$name = JFilterInput::getInstance()->clean((string) $this->manifest->name, 'cmd');		$this->set('name', $name);		// Get the Language tag [ISO tag, eg. en-GB]		$tag = (string) $this->manifest->tag;		// Check if we found the tag - if we didn't, we may be trying to install from an older language package		if (!$tag)		{			$this->parent->abort(JText::sprintf('JLIB_INSTALLER_ABORT', JText::_('JLIB_INSTALLER_ERROR_NO_LANGUAGE_TAG')));			return false;		}		$this->set('tag', $tag);		// Set the language installation path		$this->parent->setPath('extension_site', $basePath . '/language/' . $tag);		// Do we have a meta file in the file list?  In other words... is this a core language pack?		if ($element && count($element->children()))		{			$files = $element->children();			foreach ($files as $file)			{				if ((string) $file->attributes()->file == 'meta')				{					$this->core = true;					break;				}			}		}		// If the language directory does not exist, let's create it		$created = false;		if (!file_exists($this->parent->getPath('extension_site')))		{			if (!$created = JFolder::create($this->parent->getPath('extension_site')))			{				$this->parent					->abort(					JText::sprintf(						'JLIB_INSTALLER_ABORT',						JText::sprintf('JLIB_INSTALLER_ERROR_CREATE_FOLDER_FAILED', $this->parent->getPath('extension_site'))					)				);				return false;			}		}		else		{			// Look for an update function or update tag			$updateElement = $this->manifest->update;			// Upgrade manually set or update tag detected			if ($this->parent->isUpgrade() || $updateElement)			{				// Transfer control to the update function				return $this->update();			}			elseif (!$this->parent->isOverwrite())			{				// Overwrite is set				// We didn't have overwrite set, find an update function or find an update tag so lets call it safe				if (file_exists($this->parent->getPath('extension_site')))				{					// If the site exists say so.					JLog::add(						JText::sprintf('JLIB_INSTALLER_ABORT', JText::sprintf('JLIB_INSTALLER_ERROR_FOLDER_IN_USE', $this->parent->getPath('extension_site'))),						JLog::WARNING, 'jerror'					);				}				else				{					// If the admin exists say so.					JLog::add(						JText::sprintf('JLIB_INSTALLER_ABORT', JText::sprintf('JLIB_INSTALLER_ERROR_FOLDER_IN_USE', $this->parent->getPath('extension_administrator'))),						JLog::WARNING, 'jerror'					);				}				return false;			}		}		/*		 * If we created the language directory we will want to remove it if we		 * have to roll back the installation, so let's add it to the installation		 * step stack		 */		if ($created)		{			$this->parent->pushStep(array('type' => 'folder', 'path' => $this->parent->getPath('extension_site')));		}		// Copy all the necessary files		if ($this->parent->parseFiles($element) === false)		{			// Install failed, rollback changes			$this->parent->abort();			return false;		}		// Parse optional tags		$this->parent->parseMedia($this->manifest->media);		// Copy all the necessary font files to the common pdf_fonts directory		$this->parent->setPath('extension_site', $basePath . '/language/pdf_fonts');		$overwrite = $this->parent->setOverwrite(true);		if ($this->parent->parseFiles($this->manifest->fonts) === false)		{			// Install failed, rollback changes			$this->parent->abort();			return false;		}		$this->parent->setOverwrite($overwrite);		// Get the language description		$description = (string) $this->manifest->description;		if ($description)		{			$this->parent->set('message', JText::_($description));		}		else		{			$this->parent->set('message', '');		}		// Add an entry to the extension table with a whole heap of defaults		$row = JTable::getInstance('extension');		$row->set('name', $this->get('name'));		$row->set('type', 'language');		$row->set('element', $this->get('tag'));		// There is no folder for languages		$row->set('folder', '');		$row->set('enabled', 1);		$row->set('protected', 0);		$row->set('access', 0);		$row->set('client_id', $clientId);		$row->set('params', $this->parent->getParams());		$row->set('manifest_cache', $this->parent->generateManifestCache());		if (!$row->store())		{			// Install failed, roll back changes			$this->parent->abort(JText::sprintf('JLIB_INSTALLER_ABORT', $row->getError()));			return false;		}		// Clobber any possible pending updates		$update = JTable::getInstance('update');		$uid = $update->find(array('element' => $this->get('tag'), 'type' => 'language', 'client_id' => '', 'folder' => ''));		if ($uid)		{			$update->delete($uid);		}		return $row->get('extension_id');	}	/**	 * Custom update method	 *	 * @return  boolean  True on success, false on failure	 *	 * @since   3.1	 */	public function update()	{		$xml = $this->parent->getManifest();		$this->manifest = $xml;		$cname = $xml->attributes()->client;		// Attempt to map the client to a base path		$client = JApplicationHelper::getClientInfo($cname, true);		if ($client === null || (empty($cname) && $cname !== 0))		{			$this->parent->abort(JText::sprintf('JLIB_INSTALLER_ABORT', JText::sprintf('JLIB_INSTALLER_ERROR_UNKNOWN_CLIENT_TYPE', $cname)));			return false;		}		$basePath = $client->path;		$clientId = $client->id;		// Get the language name		// Set the extensions name		$name = (string) $this->manifest->name;		$name = JFilterInput::getInstance()->clean($name, 'cmd');		$this->set('name', $name);		// Get the Language tag [ISO tag, eg. en-GB]		$tag = (string) $xml->tag;		// Check if we found the tag - if we didn't, we may be trying to install from an older language package		if (!$tag)		{			$this->parent->abort(JText::sprintf('JLIB_INSTALLER_ABORT', JText::_('JLIB_INSTALLER_ERROR_NO_LANGUAGE_TAG')));			return false;		}		$this->set('tag', $tag);		$folder = $tag;		// Set the language installation path		$this->parent->setPath('extension_site', $basePath . '/language/' . $this->get('tag'));		// Do we have a meta file in the file list?  In other words... is this a core language pack?		if (count($xml->files->children()))		{			foreach ($xml->files->children() as $file)			{				if ((string) $file->attributes()->file == 'meta')				{					$this->core = true;					break;				}			}		}		// Copy all the necessary files		if ($this->parent->parseFiles($xml->files) === false)		{			// Install failed, rollback changes			$this->parent->abort();			return false;		}		// Parse optional tags		$this->parent->parseMedia($xml->media);		// Copy all the necessary font files to the common pdf_fonts directory		$this->parent->setPath('extension_site', $basePath . '/language/pdf_fonts');		$overwrite = $this->parent->setOverwrite(true);		if ($this->parent->parseFiles($xml->fonts) === false)		{			// Install failed, rollback changes			$this->parent->abort();			return false;		}		$this->parent->setOverwrite($overwrite);		// Get the language description and set it as message		$this->parent->set('message', (string) $xml->description);		/**		 * ---------------------------------------------------------------------------------------------		 * Finalization and Cleanup Section		 * ---------------------------------------------------------------------------------------------		 */		// Clobber any possible pending updates		$update = JTable::getInstance('update');		$uid = $update->find(array('element' => $this->get('tag'), 'type' => 'language', 'client_id' => $clientId));		if ($uid)		{			$update->delete($uid);		}		// Update an entry to the extension table		$row = JTable::getInstance('extension');		$eid = $row->find(array('element' => strtolower($this->get('tag')), 'type' => 'language', 'client_id' => $clientId));		if ($eid)		{			$row->load($eid);		}		else		{			// Set the defaults			// There is no folder for language			$row->set('folder', '');			$row->set('enabled', 1);			$row->set('protected', 0);			$row->set('access', 0);			$row->set('client_id', $clientId);			$row->set('params', $this->parent->getParams());		}		$row->set('name', $this->get('name'));		$row->set('type', 'language');		$row->set('element', $this->get('tag'));		$row->set('manifest_cache', $this->parent->generateManifestCache());		if (!$row->store())		{			// Install failed, roll back changes			$this->parent->abort(JText::sprintf('JLIB_INSTALLER_ABORT', $row->getError()));			return false;		}		return $row->get('extension_id');	}	/**	 * Custom uninstall method	 *	 * @param   string  $eid  The tag of the language to uninstall	 *	 * @return  mixed  Return value for uninstall method in component uninstall file	 *	 * @since   3.1	 */	public function uninstall($eid)	{		// Load up the extension details		$extension = JTable::getInstance('extension');		$extension->load($eid);		// Grab a copy of the client details		$client = JApplicationHelper::getClientInfo($extension->get('client_id'));		// Check the element isn't blank to prevent nuking the languages directory...just in case		$element = $extension->get('element');		if (empty($element))		{			JLog::add(JText::_('JLIB_INSTALLER_ERROR_LANG_UNINSTALL_ELEMENT_EMPTY'), JLog::WARNING, 'jerror');			return false;		}		// Check that the language is not protected, Normally en-GB.		$protected = $extension->get('protected');		if ($protected == 1)		{			JLog::add(JText::_('JLIB_INSTALLER_ERROR_LANG_UNINSTALL_PROTECTED'), JLog::WARNING, 'jerror');			return false;		}		// Verify that it's not the default language for that client		$params = JComponentHelper::getParams('com_languages');		if ($params->get($client->name) == $element)		{			JLog::add(JText::_('JLIB_INSTALLER_ERROR_LANG_UNINSTALL_DEFAULT'), JLog::WARNING, 'jerror');			return false;		}		// Construct the path from the client, the language and the extension element name		$path = $client->path . '/language/' . $element;		// Get the package manifest object and remove media		$this->parent->setPath('source', $path);		// We do findManifest to avoid problem when uninstalling a list of extension: getManifest cache its manifest file		$this->parent->findManifest();		$this->manifest = $this->parent->getManifest();		$this->parent->removeFiles($this->manifest->media);		// Check it exists		if (!JFolder::exists($path))		{			// If the folder doesn't exist lets just nuke the row as well and presume the user killed it for us			$extension->delete();			JLog::add(JText::_('JLIB_INSTALLER_ERROR_LANG_UNINSTALL_PATH_EMPTY'), JLog::WARNING, 'jerror');			return false;		}		if (!JFolder::delete($path))		{			// If deleting failed we'll leave the extension entry in tact just in case			JLog::add(JText::_('JLIB_INSTALLER_ERROR_LANG_UNINSTALL_DIRECTORY'), JLog::WARNING, 'jerror');			return false;		}		// Remove the extension table entry		$extension->delete();		// Setting the language of users which have this language as the default language		$db = JFactory::getDbo();		$query = $db->getQuery(true)			->from('#__users')			->select('*');		$db->setQuery($query);		$users = $db->loadObjectList();		if ($client->name == 'administrator')		{			$param_name = 'admin_language';		}		else		{			$param_name = 'language';		}		$count = 0;		foreach ($users as $user)		{			$registry = new JRegistry;			$registry->loadString($user->params);			if ($registry->get($param_name) == $element)			{				$registry->set($param_name, '');				$query = $db->getQuery(true)					->update('#__users')					->set('params=' . $db->quote($registry))					->where('id=' . (int) $user->id);				$db->setQuery($query);				$db->execute();				$count++;			}		}		if (!empty($count))		{			JLog::add(JText::plural('JLIB_INSTALLER_NOTICE_LANG_RESET_USERS', $count), JLog::NOTICE, 'jerror');		}		// All done!		return true;	}	/**	 * Custom discover method	 * Finds language files	 *	 * @return  boolean  True on success	 *	 * @since  3.1	 */	public function discover()	{		$results = array();		$site_languages = JFolder::folders(JPATH_SITE . '/language');		$admin_languages = JFolder::folders(JPATH_ADMINISTRATOR . '/language');		foreach ($site_languages as $language)		{			if (file_exists(JPATH_SITE . '/language/' . $language . '/' . $language . '.xml'))			{				$manifest_details = JInstaller::parseXMLInstallFile(JPATH_SITE . '/language/' . $language . '/' . $language . '.xml');				$extension = JTable::getInstance('extension');				$extension->set('type', 'language');				$extension->set('client_id', 0);				$extension->set('element', $language);				$extension->set('folder', '');				$extension->set('name', $language);				$extension->set('state', -1);				$extension->set('manifest_cache', json_encode($manifest_details));				$extension->set('params', '{}');				$results[] = $extension;			}		}		foreach ($admin_languages as $language)		{			if (file_exists(JPATH_ADMINISTRATOR . '/language/' . $language . '/' . $language . '.xml'))			{				$manifest_details = JInstaller::parseXMLInstallFile(JPATH_ADMINISTRATOR . '/language/' . $language . '/' . $language . '.xml');				$extension = JTable::getInstance('extension');				$extension->set('type', 'language');				$extension->set('client_id', 1);				$extension->set('element', $language);				$extension->set('folder', '');				$extension->set('name', $language);				$extension->set('state', -1);				$extension->set('manifest_cache', json_encode($manifest_details));				$extension->set('params', '{}');				$results[] = $extension;			}		}		return $results;	}	/**	 * Custom discover install method	 * Basically updates the manifest cache and leaves everything alone	 *	 * @return  integer  The extension id	 *	 * @since   3.1	 */	public function discover_install()	{		// Need to find to find where the XML file is since we don't store this normally		$client = JApplicationHelper::getClientInfo($this->parent->extension->client_id);		$short_element = $this->parent->extension->element;		$manifestPath = $client->path . '/language/' . $short_element . '/' . $short_element . '.xml';		$this->parent->manifest = $this->parent->isManifest($manifestPath);		$this->parent->setPath('manifest', $manifestPath);		$this->parent->setPath('source', $client->path . '/language/' . $short_element);		$this->parent->setPath('extension_root', $this->parent->getPath('source'));		$manifest_details = JInstaller::parseXMLInstallFile($this->parent->getPath('manifest'));		$this->parent->extension->manifest_cache = json_encode($manifest_details);		$this->parent->extension->state = 0;		$this->parent->extension->name = $manifest_details['name'];		$this->parent->extension->enabled = 1;		// @todo remove code: $this->parent->extension->params = $this->parent->getParams();		try		{			$this->parent->extension->store();		}		catch (RuntimeException $e)		{			JLog::add(JText::_('JLIB_INSTALLER_ERROR_LANG_DISCOVER_STORE_DETAILS'), JLog::WARNING, 'jerror');			return false;		}		return $this->parent->extension->get('extension_id');	}	/**	 * Refreshes the extension table cache	 *	 * @return  boolean result of operation, true if updated, false on failure	 *	 * @since   3.1	 */	public function refreshManifestCache()	{		$client = JApplicationHelper::getClientInfo($this->parent->extension->client_id);		$manifestPath = $client->path . '/language/' . $this->parent->extension->element . '/' . $this->parent->extension->element . '.xml';		$this->parent->manifest = $this->parent->isManifest($manifestPath);		$this->parent->setPath('manifest', $manifestPath);		$manifest_details = JInstaller::parseXMLInstallFile($this->parent->getPath('manifest'));		$this->parent->extension->manifest_cache = json_encode($manifest_details);		$this->parent->extension->name = $manifest_details['name'];		if ($this->parent->extension->store())		{			return true;		}		else		{			JLog::add(JText::_('JLIB_INSTALLER_ERROR_MOD_REFRESH_MANIFEST_CACHE'), JLog::WARNING, 'jerror');			return false;		}	}}/** * Deprecated class placeholder. You should use JInstallerAdapterLanguage instead. * * @package     Joomla.Libraries * @subpackage  Installer * @since       3.1 * @deprecated  4.0 * @codeCoverageIgnore */class JInstallerLanguage extends JInstallerAdapterLanguage{}
<?php/** * @package    Joomla.Installation * * @copyright  Copyright (C) 2005 - 2013 Open Source Matters, Inc. All rights reserved. * @license    GNU General Public License version 2 or later; see LICENSE.txt */defined('_JEXEC') or die;/* @var InstallationViewLanguagesHtml $this */// Get version of Joomla! to compare it with the version of the language package$version = new JVersion;?><script type="text/javascript">	function installLanguages()	{		document.id(install_languages_desc).hide();		document.id(wait_installing).show();		document.id(wait_installing_spinner).show();		Install.submitform();	}</script><?php echo JHtml::_('installation.stepbarlanguages'); ?><form action="index.php" method="post" id="adminForm" class="form-validate form-horizontal">	<div class="btn-toolbar">		<div class="btn-group pull-right">			<a				class="btn"				href="#"				onclick="return Install.goToPage('remove');"				rel="prev"				title="<?php echo JText::_('JPREVIOUS'); ?>">				<i class="icon-arrow-left"></i>				<?php echo JText::_('JPREVIOUS'); ?>			</a>			<a				class="btn btn-primary"				href="#"				onclick="installLanguages()"				rel="next"				title="<?php echo JText::_('JNEXT'); ?>">				<i class="icon-arrow-right icon-white"></i>				<?php echo JText::_('JNEXT'); ?>			</a>		</div>	</div>	<h3><?php echo JText::_('INSTL_LANGUAGES'); ?></h3>	<hr class="hr-condensed" />	<?php if (!$this->items) : ?>		<p><?php echo JText::_('INSTL_LANGUAGES_WARNING_NO_INTERNET') ?></p>		<p>			<a href="#"			class="btn btn-primary"			onclick="return Install.goToPage('remove');">			<i class="icon-arrow-left icon-white"></i>			<?php echo JText::_('INSTL_LANGUAGES_WARNING_BACK_BUTTON'); ?>			</a>		</p>		<p><?php echo JText::_('INSTL_LANGUAGES_WARNING_NO_INTERNET2') ?></p>	<?php else : ?>		<p id="install_languages_desc"><?php echo JText::_('INSTL_LANGUAGES_DESC'); ?></p>		<p id="wait_installing" style="display: none;">			<?php echo JText::_('INSTL_LANGUAGES_MESSAGE_PLEASE_WAIT') ?><br />			<div id="wait_installing_spinner" class="spinner spinner-img" style="display: none;"></div>		</p>	<table class="table table-striped table-condensed">			<thead>					<tr>						<th>							<?php echo JText::_('INSTL_LANGUAGES_COLUMN_HEADER_LANGUAGE'); ?>						</th>						<th>							<?php echo JText::_('INSTL_LANGUAGES_COLUMN_HEADER_VERSION'); ?>						</th>					</tr>			</thead>			<tbody>				<?php foreach ($this->items as $i => $language) : ?>					<tr>						<td>							<label class="checkbox">								<input									type="checkbox"									id="cb<?php echo $i; ?>"									name="cid[]"									value="<?php echo $language->update_id; ?>"									/> <?php echo $language->name; ?>									<?php // Display a Note if language pack version is not equal to Joomla version ?>									<?php if (substr($language->version, 0, 3) != $version->RELEASE											|| substr($language->version, 0, 5) != $version->RELEASE . "." . $version->DEV_LEVEL) : ?>										<div class="small"><?php echo JText::_('JGLOBAL_LANGUAGE_VERSION_NOT_PLATFORM'); ?></div>									<?php endif; ?>							</label>						</td>						<td>							<span class="badge"><?php echo $language->version; ?></span>						</td>					</tr>				<?php endforeach; ?>			</tbody>		</table>		<input type="hidden" name="task" value="InstallLanguages" />		<?php echo JHtml::_('form.token'); ?>	<?php endif; ?></form>
<?php/** * @package     Joomla.Platform * @subpackage  Form * * @copyright   Copyright (C) 2005 - 2013 Open Source Matters, Inc. All rights reserved. * @license     GNU General Public License version 2 or later; see LICENSE */defined('JPATH_PLATFORM') or die;/** * Abstract Form Field class for the Joomla Platform. * * @package     Joomla.Platform * @subpackage  Form * @since       11.1 */abstract class JFormField{	/**	 * The description text for the form field.  Usually used in tooltips.	 *	 * @var    string	 * @since  11.1	 */	protected $description;	/**	 * The SimpleXMLElement object of the <field /> XML element that describes the form field.	 *	 * @var    SimpleXMLElement	 * @since  11.1	 */	protected $element;	/**	 * The JForm object of the form attached to the form field.	 *	 * @var    JForm	 * @since  11.1	 */	protected $form;	/**	 * The form control prefix for field names from the JForm object attached to the form field.	 *	 * @var    string	 * @since  11.1	 */	protected $formControl;	/**	 * The hidden state for the form field.	 *	 * @var    boolean	 * @since  11.1	 */	protected $hidden = false;	/**	 * True to translate the field label string.	 *	 * @var    boolean	 * @since  11.1	 */	protected $translateLabel = true;	/**	 * True to translate the field description string.	 *	 * @var    boolean	 * @since  11.1	 */	protected $translateDescription = true;	/**	 * The document id for the form field.	 *	 * @var    string	 * @since  11.1	 */	protected $id;	/**	 * The input for the form field.	 *	 * @var    string	 * @since  11.1	 */	protected $input;	/**	 * The label for the form field.	 *	 * @var    string	 * @since  11.1	 */	protected $label;	/**	 * The multiple state for the form field.  If true then multiple values are allowed for the	 * field.  Most often used for list field types.	 *	 * @var    boolean	 * @since  11.1	 */	protected $multiple = false;	/**	 * The name of the form field.	 *	 * @var    string	 * @since  11.1	 */	protected $name;	/**	 * The name of the field.	 *	 * @var    string	 * @since  11.1	 */	protected $fieldname;	/**	 * The group of the field.	 *	 * @var    string	 * @since  11.1	 */	protected $group;	/**	 * The required state for the form field.  If true then there must be a value for the field to	 * be considered valid.	 *	 * @var    boolean	 * @since  11.1	 */	protected $required = false;	/**	 * The form field type.	 *	 * @var    string	 * @since  11.1	 */	protected $type;	/**	 * The validation method for the form field.  This value will determine which method is used	 * to validate the value for a field.	 *	 * @var    string	 * @since  11.1	 */	protected $validate;	/**	 * The value of the form field.	 *	 * @var    mixed	 * @since  11.1	 */	protected $value;	/**	 * The label's CSS class of the form field	 *	 * @var    mixed	 * @since  11.1	 */	protected $labelClass;	/**	 * The count value for generated name field	 *	 * @var    integer	 * @since  11.1	 */	protected static $count = 0;	/**	 * The string used for generated fields names	 *	 * @var    integer	 * @since  11.1	 */	protected static $generated_fieldname = '__field';	/**	 * Method to instantiate the form field object.	 *	 * @param   JForm  $form  The form to attach to the form field object.	 *	 * @since   11.1	 */	public function __construct($form = null)	{		// If there is a form passed into the constructor set the form and form control properties.		if ($form instanceof JForm)		{			$this->form = $form;			$this->formControl = $form->getFormControl();		}		// Detect the field type if not set		if (!isset($this->type))		{			$parts = JStringNormalise::fromCamelCase(get_called_class(), true);			if ($parts[0] == 'J')			{				$this->type = JString::ucfirst($parts[count($parts) - 1], '_');			}			else			{				$this->type = JString::ucfirst($parts[0], '_') . JString::ucfirst($parts[count($parts) - 1], '_');			}		}	}	/**	 * Method to get certain otherwise inaccessible properties from the form field object.	 *	 * @param   string  $name  The property name for which to the the value.	 *	 * @return  mixed  The property value or null.	 *	 * @since   11.1	 */	public function __get($name)	{		switch ($name)		{			case 'description':			case 'formControl':			case 'hidden':			case 'id':			case 'multiple':			case 'name':			case 'required':			case 'type':			case 'validate':			case 'value':			case 'labelClass':			case 'fieldname':			case 'group':				return $this->$name;			case 'input':				// If the input hasn't yet been generated, generate it.				if (empty($this->input))				{					$this->input = $this->getInput();				}				return $this->input;			case 'label':				// If the label hasn't yet been generated, generate it.				if (empty($this->label))				{					$this->label = $this->getLabel();				}				return $this->label;			case 'title':				return $this->getTitle();		}		return null;	}	/**	 * Method to attach a JForm object to the field.	 *	 * @param   JForm  $form  The JForm object to attach to the form field.	 *	 * @return  JFormField  The form field object so that the method can be used in a chain.	 *	 * @since   11.1	 */	public function setForm(JForm $form)	{		$this->form = $form;		$this->formControl = $form->getFormControl();		return $this;	}	/**	 * Method to attach a JForm object to the field.	 *	 * @param   SimpleXMLElement  $element  The SimpleXMLElement object representing the <field /> tag for the form field object.	 * @param   mixed             $value    The form field value to validate.	 * @param   string            $group    The field name group control value. This acts as as an array container for the field.	 *                                      For example if the field has name="foo" and the group value is set to "bar" then the	 *                                      full field name would end up being "bar[foo]".	 *	 * @return  boolean  True on success.	 *	 * @since   11.1	 */	public function setup(SimpleXMLElement $element, $value, $group = null)	{		// Make sure there is a valid JFormField XML element.		if ((string) $element->getName() != 'field')		{			return false;		}		// Reset the input and label values.		$this->input = null;		$this->label = null;		// Set the XML element object.		$this->element = $element;		// Get some important attributes from the form field element.		$class = (string) $element['class'];		$id = (string) $element['id'];		$multiple = (string) $element['multiple'];		$name = (string) $element['name'];		$required = (string) $element['required'];		// Set the required and validation options.		$this->required = ($required == 'true' || $required == 'required' || $required == '1');		$this->validate = (string) $element['validate'];		// Add the required class if the field is required.		if ($this->required)		{			if ($class)			{				if (strpos($class, 'required') === false)				{					$this->element['class'] = $class . ' required';				}			}			else			{				$this->element['class'] = 'required';			}		}		// Set the multiple values option.		$this->multiple = ($multiple == 'true' || $multiple == 'multiple');		// Allow for field classes to force the multiple values option.		if (isset($this->forceMultiple))		{			$this->multiple = (bool) $this->forceMultiple;		}		// Set the field description text.		$this->description = (string) $element['description'];		// Set the visibility.		$this->hidden = ((string) $element['type'] == 'hidden' || (string) $element['hidden'] == 'true');		// Determine whether to translate the field label and/or description.		$this->translateLabel = !((string) $this->element['translate_label'] == 'false' || (string) $this->element['translate_label'] == '0');		$this->translateDescription = !((string) $this->element['translate_description'] == 'false'			|| (string) $this->element['translate_description'] == '0');		// Set the group of the field.		$this->group = $group;		// Set the field name and id.		$this->fieldname = $this->getFieldName($name);		$this->name = $this->getName($this->fieldname);		$this->id = $this->getId($id, $this->fieldname);		// Set the field default value.		$this->value = $value;		// Set the CSS class of field label		$this->labelClass = (string) $element['labelclass'];		return true;	}	/**	 * Method to get the id used for the field input tag.	 *	 * @param   string  $fieldId    The field element id.	 * @param   string  $fieldName  The field element name.	 *	 * @return  string  The id to be used for the field input tag.	 *	 * @since   11.1	 */	protected function getId($fieldId, $fieldName)	{		$id = '';		// If there is a form control set for the attached form add it first.		if ($this->formControl)		{			$id .= $this->formControl;		}		// If the field is in a group add the group control to the field id.		if ($this->group)		{			// If we already have an id segment add the group control as another level.			if ($id)			{				$id .= '_' . str_replace('.', '_', $this->group);			}			else			{				$id .= str_replace('.', '_', $this->group);			}		}		// If we already have an id segment add the field id/name as another level.		if ($id)		{			$id .= '_' . ($fieldId ? $fieldId : $fieldName);		}		else		{			$id .= ($fieldId ? $fieldId : $fieldName);		}		// Clean up any invalid characters.		$id = preg_replace('#\W#', '_', $id);		return $id;	}	/**	 * Method to get the field input markup.	 *	 * @return  string  The field input markup.	 *	 * @since   11.1	 */	abstract protected function getInput();	/**	 * Method to get the field title.	 *	 * @return  string  The field title.	 *	 * @since   11.1	 */	protected function getTitle()	{		$title = '';		if ($this->hidden)		{			return $title;		}		// Get the label text from the XML element, defaulting to the element name.		$title = $this->element['label'] ? (string) $this->element['label'] : (string) $this->element['name'];		$title = $this->translateLabel ? JText::_($title) : $title;		return $title;	}	/**	 * Method to get the field label markup.	 *	 * @return  string  The field label markup.	 *	 * @since   11.1	 */	protected function getLabel()	{		$label = '';		if ($this->hidden)		{			return $label;		}		// Get the label text from the XML element, defaulting to the element name.		$text = $this->element['label'] ? (string) $this->element['label'] : (string) $this->element['name'];		$text = $this->translateLabel ? JText::_($text) : $text;		// Build the class for the label.		$class = !empty($this->description) ? 'hasTip' : '';		$class = $this->required == true ? $class . ' required' : $class;		$class = !empty($this->labelClass) ? $class . ' ' . $this->labelClass : $class;		// Add the opening label tag and main attributes attributes.		$label .= '<label id="' . $this->id . '-lbl" for="' . $this->id . '" class="' . $class . '"';		// If a description is specified, use it to build a tooltip.		if (!empty($this->description))		{			$label .= ' title="'				. htmlspecialchars(				trim($text, ':') . '::' . ($this->translateDescription ? JText::_($this->description) : $this->description),				ENT_COMPAT, 'UTF-8'			) . '"';		}		// Add the label text and closing tag.		if ($this->required)		{			$label .= '>' . $text . '<span class="star">&#160;*</span></label>';		}		else		{			$label .= '>' . $text . '</label>';		}		return $label;	}	/**	 * Method to get the name used for the field input tag.	 *	 * @param   string  $fieldName  The field element name.	 *	 * @return  string  The name to be used for the field input tag.	 *	 * @since   11.1	 */	protected function getName($fieldName)	{		$name = '';		// If there is a form control set for the attached form add it first.		if ($this->formControl)		{			$name .= $this->formControl;		}		// If the field is in a group add the group control to the field name.		if ($this->group)		{			// If we already have a name segment add the group control as another level.			$groups = explode('.', $this->group);			if ($name)			{				foreach ($groups as $group)				{					$name .= '[' . $group . ']';				}			}			else			{				$name .= array_shift($groups);				foreach ($groups as $group)				{					$name .= '[' . $group . ']';				}			}		}		// If we already have a name segment add the field name as another level.		if ($name)		{			$name .= '[' . $fieldName . ']';		}		else		{			$name .= $fieldName;		}		// If the field should support multiple values add the final array segment.		if ($this->multiple)		{			switch (strtolower((string) $this->element['type']))			{				case 'text':				case 'textarea':				case 'email':				case 'password':				case 'radio':				case 'calendar':				case 'editor':				case 'hidden':					break;				default:					$name .= '[]';			}		}		return $name;	}	/**	 * Method to get the field name used.	 *	 * @param   string  $fieldName  The field element name.	 *	 * @return  string  The field name	 *	 * @since   11.1	 */	protected function getFieldName($fieldName)	{		if ($fieldName)		{			return $fieldName;		}		else		{			self::$count = self::$count + 1;			return self::$generated_fieldname . self::$count;		}	}}
<?php/** * @package     Joomla.Administrator * @subpackage  com_media * * @copyright   Copyright (C) 2005 - 2013 Open Source Matters, Inc. All rights reserved. * @license     GNU General Public License version 2 or later; see LICENSE.txt */defined('_JEXEC') or die;$user = JFactory::getUser();$params = new JRegistry;$dispatcher	= JEventDispatcher::getInstance();$dispatcher->trigger('onContentBeforeDisplay', array('com_media.file', &$this->_tmp_img, &$params));?>		<li class="imgOutline thumbnail height-80 width-80 center">			<?php if ($user->authorise('core.delete', 'com_media')):?>				<a class="close delete-item" target="_top" href="index.php?option=com_media&amp;task=file.delete&amp;tmpl=index&amp;<?php echo JSession::getFormToken(); ?>=1&amp;folder=<?php echo $this->state->folder; ?>&amp;rm[]=<?php echo $this->_tmp_img->name; ?>" rel="<?php echo $this->_tmp_img->name; ?>" title="<?php echo JText::_('JACTION_DELETE');?>">x</a>				<input class="pull-left" type="checkbox" name="rm[]" value="<?php echo $this->_tmp_img->name; ?>" />				<div class="clearfix"></div>			<?php endif;?>			<div class="height-50">				<a class="img-preview" href="<?php echo COM_MEDIA_BASEURL.'/'.$this->_tmp_img->path_relative; ?>" title="<?php echo $this->_tmp_img->name; ?>" >					<?php echo JHtml::_('image', COM_MEDIA_BASEURL.'/'.$this->_tmp_img->path_relative, JText::sprintf('COM_MEDIA_IMAGE_TITLE', $this->_tmp_img->title, JHtml::_('number.bytes', $this->_tmp_img->size)), array('width' => $this->_tmp_img->width_60, 'height' => $this->_tmp_img->height_60)); ?>				</a>			</div>			<div class="small">				<a href="<?php echo COM_MEDIA_BASEURL.'/'.$this->_tmp_img->path_relative; ?>" title="<?php echo $this->_tmp_img->name; ?>" class="preview"><?php echo JHtml::_('string.truncate', $this->_tmp_img->name, 10, false); ?></a>			</div>		</li><?php$dispatcher->trigger('onContentAfterDisplay', array('com_media.file', &$this->_tmp_img, &$params));?>
<?php/** * @package     Joomla.Platform * @subpackage  Openstreetmap * * @copyright   Copyright (C) 2005 - 2012 Open Source Matters, Inc. All rights reserved. * @license     GNU General Public License version 2 or later; see LICENSE */defined('JPATH_PLATFORM') or die();/** * Joomla Platform class for interact with Openstreetmap API. * * @package     Joomla.Platform * @subpackage  Openstreetmap * * @since       13.1 */class JOpenstreetmap{	/**	 * @var    JRegistry  Options for the Openstreetmap object.	 * @since  13.1	 */	protected $options;	/**	 * @var    JHttp      The HTTP client object to use in sending HTTP requests.	 * @since  13.1	 */	protected $client;	/**	 * @var   JOpenstreetmapOauth  The OAuth client.	 * @since 13.1	 */	protected $oauth;	/**	 * @var    JOpenstreetmapChangesets  Openstreetmap API object for changesets.	 * @since  13.1	 */	protected $changesets;	/**	 * @var    JOpenstreetmapElements  Openstreetmap API object for elements.	 * @since  13.1	 */	protected $elements;	/**	 * @var   JOpenstreetmapGps  Openstreetmap API object for gps.	 * @since  13.1	 */	protected $gps;	/**	 * @var    JOpenstreetmapInfo  Openstreetmap API object for info.	 * @since  13.1	 */	protected $info;	/**	 * @var    JOpenstreetmapUser  Openstreetmap API object for user.	 * @since  13.1	 */	protected $user;	/**	 * Constructor.	 *	 * @param   JOpenstreetmapOauth  $oauth    Openstreetmap oauth client.	 * @param   JRegistry            $options  Openstreetmap options object.	 * @param   JOpenstreetmapHttp   $client   The HTTP client object.	 *	 * @since   13.1	 */	public function __construct(JOpenstreetmapOauth $oauth = null, JRegistry $options = null, JHttp $client = null)	{		$this->oauth = $oauth;		$this->options = isset($options) ? $options : new JRegistry;		$this->client  = isset($client) ? $client : new JHttp($this->options);		// Setup the default API url if not already set.		$this->options->def('api.url', 'http://api.openstreetmap.org/api/0.6/');		// $this->options->def('api.url', 'http://api06.dev.openstreetmap.org/api/0.6/');	}	/**		 * Method to get object instances	 * 	 * @param   string  $name  Name of property to retrieve	 *	 * @return  JOpenstreetmapObject  Openstreetmap API object .	 *	 * @since   13.1	 */	public function __get($name)	{		switch ($name)		{			case 'changesets':				if ($this->changesets == null)				{					$this->changesets = new JOpenstreetmapChangesets($this->options, $this->client, $this->oauth);				}				return $this->changesets;			case 'elements':				if ($this->elements == null)				{					$this->elements = new JOpenstreetmapElements($this->options, $this->client, $this->oauth);				}				return $this->elements;			case 'gps':				if ($this->gps == null)				{					$this->gps = new JOpenstreetmapGps($this->options, $this->client, $this->oauth);				}				return $this->gps;			case 'info':				if ($this->info == null)				{					$this->info = new JOpenstreetmapInfo($this->options, $this->client, $this->oauth);				}				return $this->info;			case 'user':				if ($this->user == null)				{					$this->user = new JOpenstreetmapUser($this->options, $this->client, $this->oauth);				}				return $this->user;		}	}	/**	 * Get an option from the JOpenstreetmap instance.	 *	 * @param   string  $key  The name of the option to get.	 *	 * @return  mixed  The option value.	 *	 * @since   13.1	 */	public function getOption($key)	{		return $this->options->get($key);	}	/**	 * Set an option for the Openstreetmap instance.	 *	 * @param   string  $key    The name of the option to set.	 * @param   mixed   $value  The option value to set.	 *	 * @return  JOpenstreetmap  This object for method chaining.	 *	 * @since   13.1	 */	public function setOption($key, $value)	{		$this->options->set($key, $value);		return $this;	}}
<?php/** * @package     Joomla.Administrator * @subpackage  com_installer * * @copyright   Copyright (C) 2005 - 2013 Open Source Matters, Inc. All rights reserved. * @license     GNU General Public License version 2 or later; see LICENSE.txt */defined('_JEXEC') or die;/** * Installer Manage Controller * * @package     Joomla.Administrator * @subpackage  com_installer * @since       1.6 */class InstallerControllerManage extends JControllerLegacy{	/**	 * Constructor.	 *	 * @param   array  $config  An optional associative array of configuration settings.	 *	 * @see     JController	 * @since   1.6	 */	public function __construct($config = array())	{		parent::__construct($config);		$this->registerTask('unpublish', 'publish');		$this->registerTask('publish',   'publish');	}	/**	 * Enable/Disable an extension (if supported).	 *	 * @return  void	 *	 * @since   1.6	 */	public function publish()	{		// Check for request forgeries.		JSession::checkToken() or jexit(JText::_('JINVALID_TOKEN'));		$ids    = $this->input->get('cid', array(), 'array');		$values = array('publish' => 1, 'unpublish' => 0);		$task   = $this->getTask();		$value  = JArrayHelper::getValue($values, $task, 0, 'int');		if (empty($ids))		{			JError::raiseWarning(500, JText::_('COM_INSTALLER_ERROR_NO_EXTENSIONS_SELECTED'));		}		else		{			// Get the model.			$model	= $this->getModel('manage');			// Change the state of the records.			if (!$model->publish($ids, $value))			{				JError::raiseWarning(500, implode('<br />', $model->getErrors()));			}			else			{				if ($value == 1)				{					$ntext = 'COM_INSTALLER_N_EXTENSIONS_PUBLISHED';				}				elseif ($value == 0)				{					$ntext = 'COM_INSTALLER_N_EXTENSIONS_UNPUBLISHED';				}				$this->setMessage(JText::plural($ntext, count($ids)));			}		}		$this->setRedirect(JRoute::_('index.php?option=com_installer&view=manage', false));	}	/**	 * Remove an extension (Uninstall).	 *	 * @return  void	 *	 * @since   1.5	 */	public function remove()	{		// Check for request forgeries		JSession::checkToken() or jexit(JText::_('JINVALID_TOKEN'));		$eid   = $this->input->get('cid', array(), 'array');		$model = $this->getModel('manage');		JArrayHelper::toInteger($eid, array());		$result = $model->remove($eid);		$this->setRedirect(JRoute::_('index.php?option=com_installer&view=manage', false));	}	/**	 * Refreshes the cached metadata about an extension.	 *	 * Useful for debugging and testing purposes when the XML file might change.	 *	 * @return  void	 *	 * @since   1.6	 */	public function refresh()	{		// Check for request forgeries		JSession::checkToken() or jexit(JText::_('JINVALID_TOKEN'));		$uid   = $this->input->get('cid', array(), 'array');		$model = $this->getModel('manage');		JArrayHelper::toInteger($uid, array());		$result = $model->refresh($uid);		$this->setRedirect(JRoute::_('index.php?option=com_installer&view=manage', false));	}}
<?php/** * @package     Joomla.Site * @subpackage  com_content * * @copyright   Copyright (C) 2005 - 2013 Open Source Matters, Inc. All rights reserved. * @license     GNU General Public License version 2 or later; see LICENSE.txt */defined('_JEXEC') or die;// Create shortcut$urls = json_decode($this->item->urls);// Create shortcuts to some parameters.$params = $this->item->params;if ($urls && (!empty($urls->urla) || !empty($urls->urlb) || !empty($urls->urlc))) :?><div class="content-links">	<ul class="nav nav-tabs nav-stacked">		<?php			$urlarray = array(			array($urls->urla, $urls->urlatext, $urls->targeta, 'a'),			array($urls->urlb, $urls->urlbtext, $urls->targetb, 'b'),			array($urls->urlc, $urls->urlctext, $urls->targetc, 'c')			);			foreach ($urlarray as $url) :				$link = $url[0];				$label = $url[1];				$target = $url[2];				$id = $url[3];				if ( ! $link) :					continue;				endif;				// If no label is present, take the link				$label = ($label) ? $label : $link;				// If no target is present, use the default				$target = $target ? $target : $params->get('target'.$id);				?>			<li class="content-links-<?php echo $id; ?>">				<?php					// Compute the correct link					switch ($target)					{						case 1:							// open in a new window							echo '<a href="'. htmlspecialchars($link) .'" target="_blank"  rel="nofollow">'.								htmlspecialchars($label) .'</a>';							break;						case 2:							// open in a popup window							$attribs = 'toolbar=no,location=no,status=no,menubar=no,scrollbars=yes,resizable=yes,width=600,height=600';							echo "<a href=\"" . htmlspecialchars($link) . "\" onclick=\"window.open(this.href, 'targetWindow', '".$attribs."'); return false;\">".								htmlspecialchars($label).'</a>';							break;						case 3:							// open in a modal window							JHtml::_('behavior.modal', 'a.modal'); ?>							<a class="modal" href="<?php echo htmlspecialchars($link); ?>"  rel="{handler: 'iframe', size: {x:600, y:600}}">								<?php echo htmlspecialchars($label) . ' </a>';							break;						default:							// open in parent window							echo '<a href="'.  htmlspecialchars($link) . '" rel="nofollow">'.								htmlspecialchars($label) . ' </a>';							break;					}				?>				</li>		<?php endforeach; ?>	</ul></div><?php endif; ?>
<?php/** * @package     Joomla.Legacy * @subpackage  Application * * @copyright   Copyright (C) 2005 - 2013 Open Source Matters, Inc. All rights reserved. * @license     GNU General Public License version 2 or later; see LICENSE */defined('JPATH_PLATFORM') or die;jimport('joomla.environment.response');/** * Base class for a Joomla! application. * * Acts as a Factory class for application specific objects and provides many * supporting API functions. Derived clases should supply the route(), dispatch() * and render() functions. * * @package     Joomla.Legacy * @subpackage  Application * @since       11.1 */class JApplication extends JApplicationBase{	/**	 * The client identifier.	 *	 * @var    integer	 * @since  11.1	 */	protected $_clientId = null;	/**	 * The application message queue.	 *	 * @var    array	 * @since  11.1	 */	protected $_messageQueue = array();	/**	 * The name of the application.	 *	 * @var    array	 * @since  11.1	 */	protected $_name = null;	/**	 * The scope of the application.	 *	 * @var    string	 * @since  11.1	 */	public $scope = null;	/**	 * The time the request was made.	 *	 * @var    date	 * @since  11.1	 */	public $requestTime = null;	/**	 * The time the request was made as Unix timestamp.	 *	 * @var    integer	 * @since  11.1	 */	public $startTime = null;	/**	 * @var    JApplicationWebClient  The application client object.	 * @since  12.2	 */	public $client;	/**	 * @var    array  JApplication instances container.	 * @since  11.3	 */	protected static $instances = array();	/**	 * Class constructor.	 *	 * @param   array  $config  A configuration array including optional elements such as session	 * session_name, clientId and others. This is not exhaustive.	 *	 * @since   11.1	 */	public function __construct($config = array())	{		// Set the view name.		$this->_name = $this->getName();		// Only set the clientId if available.		if (isset($config['clientId']))		{			$this->_clientId = $config['clientId'];		}		// Enable sessions by default.		if (!isset($config['session']))		{			$config['session'] = true;		}		// Create the input object		$this->input = new JInput;		$this->client = new JApplicationWebClient;		$this->loadDispatcher();		// Set the session default name.		if (!isset($config['session_name']))		{			$config['session_name'] = $this->_name;		}		// Set the default configuration file.		if (!isset($config['config_file']))		{			$config['config_file'] = 'configuration.php';		}		// Create the configuration object.		if (file_exists(JPATH_CONFIGURATION . '/' . $config['config_file']))		{			$this->_createConfiguration(JPATH_CONFIGURATION . '/' . $config['config_file']);		}		// Create the session if a session name is passed.		if ($config['session'] !== false)		{			$this->_createSession(self::getHash($config['session_name']));		}		$this->requestTime = gmdate('Y-m-d H:i');		// Used by task system to ensure that the system doesn't go over time.		$this->startTime = JProfiler::getmicrotime();	}	/**	 * Returns the global JApplication object, only creating it if it	 * doesn't already exist.	 *	 * @param   mixed   $client  A client identifier or name.	 * @param   array   $config  An optional associative array of configuration settings.	 * @param   string  $prefix  A prefix for class names	 *	 * @return  JApplication A JApplication object.	 *	 * @since   11.1	 */	public static function getInstance($client, $config = array(), $prefix = 'J')	{		if (empty(self::$instances[$client]))		{			// Load the router object.			$info = JApplicationHelper::getClientInfo($client, true);			$path = $info->path . '/includes/application.php';			if (file_exists($path))			{				include_once $path;				// Create a JApplication object.				$classname = $prefix . ucfirst($client);				$instance = new $classname($config);			}			else			{				$error = JError::raiseError(500, JText::sprintf('JLIB_APPLICATION_ERROR_APPLICATION_LOAD', $client));				return $error;			}			self::$instances[$client] = $instance;		}		return self::$instances[$client];	}	/**	 * Initialise the application.	 *	 * @param   array  $options  An optional associative array of configuration settings.	 *	 * @return  void	 *	 * @since   11.1	 */	public function initialise($options = array())	{		// Set the language in the class.		$config = JFactory::getConfig();		// Check that we were given a language in the array (since by default may be blank).		if (isset($options['language']))		{			$config->set('language', $options['language']);		}		// Set user specific editor.		$user = JFactory::getUser();		$editor = $user->getParam('editor', $this->getCfg('editor'));		if (!JPluginHelper::isEnabled('editors', $editor))		{			$editor = $this->getCfg('editor');			if (!JPluginHelper::isEnabled('editors', $editor))			{				$editor = 'none';			}		}		$config->set('editor', $editor);		// Trigger the onAfterInitialise event.		JPluginHelper::importPlugin('system');		$this->triggerEvent('onAfterInitialise');	}	/**	 * Route the application.	 *	 * Routing is the process of examining the request environment to determine which	 * component should receive the request. The component optional parameters	 * are then set in the request object to be processed when the application is being	 * dispatched.	 *	 * @return  void	 *	 * @since   11.1	 */	public function route()	{		// Get the full request URI.		$uri = clone JURI::getInstance();		$router = $this->getRouter();		$result = $router->parse($uri);		foreach ($result as $key => $value)		{			$this->input->def($key, $value);		}		// Trigger the onAfterRoute event.		JPluginHelper::importPlugin('system');		$this->triggerEvent('onAfterRoute');	}	/**	 * Dispatch the application.	 *	 * Dispatching is the process of pulling the option from the request object and	 * mapping them to a component. If the component does not exist, it handles	 * determining a default component to dispatch.	 *	 * @param   string  $component  The component to dispatch.	 *	 * @return  void	 *	 * @since   11.1	 */	public function dispatch($component = null)	{		$document = JFactory::getDocument();		$contents = JComponentHelper::renderComponent($component);		$document->setBuffer($contents, 'component');		// Trigger the onAfterDispatch event.		JPluginHelper::importPlugin('system');		$this->triggerEvent('onAfterDispatch');	}	/**	 * Render the application.	 *	 * Rendering is the process of pushing the document buffers into the template	 * placeholders, retrieving data from the document and pushing it into	 * the JResponse buffer.	 *	 * @return  void	 *	 * @since   11.1	 */	public function render()	{		$params = array('template' => $this->getTemplate(), 'file' => 'index.php', 'directory' => JPATH_THEMES, 'params' => $template->params);		// Parse the document.		$document = JFactory::getDocument();		$document->parse($params);		// Trigger the onBeforeRender event.		JPluginHelper::importPlugin('system');		$this->triggerEvent('onBeforeRender');		// Render the document.		$caching = ($this->getCfg('caching') >= 2) ? true : false;		JResponse::setBody($document->render($caching, $params));		// Trigger the onAfterRender event.		$this->triggerEvent('onAfterRender');	}	/**	 * Redirect to another URL.	 *	 * Optionally enqueues a message in the system message queue (which will be displayed	 * the next time a page is loaded) using the enqueueMessage method. If the headers have	 * not been sent the redirect will be accomplished using a "301 Moved Permanently"	 * code in the header pointing to the new location. If the headers have already been	 * sent this will be accomplished using a JavaScript statement.	 *	 * @param   string   $url      The URL to redirect to. Can only be http/https URL	 * @param   string   $msg      An optional message to display on redirect.	 * @param   string   $msgType  An optional message type. Defaults to message.	 * @param   boolean  $moved    True if the page is 301 Permanently Moved, otherwise 303 See Other is assumed.	 *	 * @return  void  Calls exit().	 *	 * @since   11.1	 *	 * @see     JApplication::enqueueMessage()	 */	public function redirect($url, $msg = '', $msgType = 'message', $moved = false)	{		// Check for relative internal links.		if (preg_match('#^index2?\.php#', $url))		{			$url = JURI::base() . $url;		}		// Strip out any line breaks.		$url = preg_split("/[\r\n]/", $url);		$url = $url[0];		/*		 * If we don't start with a http we need to fix this before we proceed.		 * We could validly start with something else (e.g. ftp), though this would		 * be unlikely and isn't supported by this API.		 */		if (!preg_match('#^http#i', $url))		{			$uri = JURI::getInstance();			$prefix = $uri->toString(array('scheme', 'user', 'pass', 'host', 'port'));			if ($url[0] == '/')			{				// We just need the prefix since we have a path relative to the root.				$url = $prefix . $url;			}			else			{				// It's relative to where we are now, so lets add that.				$parts = explode('/', $uri->toString(array('path')));				array_pop($parts);				$path = implode('/', $parts) . '/';				$url = $prefix . $path . $url;			}		}		// If the message exists, enqueue it.		if (trim($msg))		{			$this->enqueueMessage($msg, $msgType);		}		// Persist messages if they exist.		if (count($this->_messageQueue))		{			$session = JFactory::getSession();			$session->set('application.queue', $this->_messageQueue);		}		// If the headers have been sent, then we cannot send an additional location header		// so we will output a javascript redirect statement.		if (headers_sent())		{			echo "<script>document.location.href='" . htmlspecialchars($url) . "';</script>\n";		}		else		{			$document = JFactory::getDocument();			jimport('phputf8.utils.ascii');			if (($this->client->engine == JApplicationWebClient::TRIDENT) && !utf8_is_ascii($url))			{				// MSIE type browser and/or server cause issues when url contains utf8 character,so use a javascript redirect method				echo '<html><head><meta http-equiv="content-type" content="text/html; charset=' . $document->getCharset() . '" />'					. '<script>document.location.href=\'' . htmlspecialchars($url) . '\';</script></head></html>';			}			else			{				// All other browsers, use the more efficient HTTP header method				header($moved ? 'HTTP/1.1 301 Moved Permanently' : 'HTTP/1.1 303 See other');				header('Location: ' . $url);				header('Content-Type: text/html; charset=' . $document->getCharset());			}		}		$this->close();	}	/**	 * Enqueue a system message.	 *	 * @param   string  $msg   The message to enqueue.	 * @param   string  $type  The message type. Default is message.	 *	 * @return  void	 *	 * @since   11.1	 */	public function enqueueMessage($msg, $type = 'message')	{		// For empty queue, if messages exists in the session, enqueue them first.		if (!count($this->_messageQueue))		{			$session = JFactory::getSession();			$sessionQueue = $session->get('application.queue');			if (count($sessionQueue))			{				$this->_messageQueue = $sessionQueue;				$session->set('application.queue', null);			}		}		// Enqueue the message.		$this->_messageQueue[] = array('message' => $msg, 'type' => strtolower($type));	}	/**	 * Get the system message queue.	 *	 * @return  array  The system message queue.	 *	 * @since   11.1	 */	public function getMessageQueue()	{		// For empty queue, if messages exists in the session, enqueue them.		if (!count($this->_messageQueue))		{			$session = JFactory::getSession();			$sessionQueue = $session->get('application.queue');			if (count($sessionQueue))			{				$this->_messageQueue = $sessionQueue;				$session->set('application.queue', null);			}		}		return $this->_messageQueue;	}	/**	 * Gets a configuration value.	 *	 * An example is in application/japplication-getcfg.php Getting a configuration	 *	 * @param   string  $varname  The name of the value to get.	 * @param   string  $default  Default value to return	 *	 * @return  mixed  The user state.	 *	 * @since   11.1	 */	public function getCfg($varname, $default = null)	{		$config = JFactory::getConfig();		return $config->get('' . $varname, $default);	}	/**	 * Method to get the application name.	 *	 * The dispatcher name is by default parsed using the classname, or it can be set	 * by passing a $config['name'] in the class constructor.	 *	 * @return  string  The name of the dispatcher.	 *	 * @since   11.1	 */	public function getName()	{		$name = $this->_name;		if (empty($name))		{			$r = null;			if (!preg_match('/J(.*)/i', get_class($this), $r))			{				JLog::add(JText::_('JLIB_APPLICATION_ERROR_APPLICATION_GET_NAME'), JLog::WARNING, 'jerror');			}			$name = strtolower($r[1]);		}		return $name;	}	/**	 * Gets a user state.	 *	 * @param   string  $key      The path of the state.	 * @param   mixed   $default  Optional default value, returned if the internal value is null.	 *	 * @return  mixed  The user state or null.	 *	 * @since   11.1	 */	public function getUserState($key, $default = null)	{		$session = JFactory::getSession();		$registry = $session->get('registry');		if (!is_null($registry))		{			return $registry->get($key, $default);		}		return $default;	}	/**	 * Sets the value of a user state variable.	 *	 * @param   string  $key    The path of the state.	 * @param   string  $value  The value of the variable.	 *	 * @return  mixed  The previous state, if one existed.	 *	 * @since   11.1	 */	public function setUserState($key, $value)	{		$session = JFactory::getSession();		$registry = $session->get('registry');		if (!is_null($registry))		{			return $registry->set($key, $value);		}		return null;	}	/**	 * Gets the value of a user state variable.	 *	 * @param   string  $key      The key of the user state variable.	 * @param   string  $request  The name of the variable passed in a request.	 * @param   string  $default  The default value for the variable if not found. Optional.	 * @param   string  $type     Filter for the variable, for valid values see {@link JFilterInput::clean()}. Optional.	 *	 * @return  The request user state.	 *	 * @since   11.1	 */	public function getUserStateFromRequest($key, $request, $default = null, $type = 'none')	{		$cur_state = $this->getUserState($key, $default);		$new_state = $this->input->get($request, null, $type);		// Save the new value only if it was set in this request.		if ($new_state !== null)		{			$this->setUserState($key, $new_state);		}		else		{			$new_state = $cur_state;		}		return $new_state;	}	/**	 * Login authentication function.	 *	 * Username and encoded password are passed the onUserLogin event which	 * is responsible for the user validation. A successful validation updates	 * the current session record with the user's details.	 *	 * Username and encoded password are sent as credentials (along with other	 * possibilities) to each observer (authentication plugin) for user	 * validation.  Successful validation will update the current session with	 * the user details.	 *	 * @param   array  $credentials  Array('username' => string, 'password' => string)	 * @param   array  $options      Array('remember' => boolean)	 *	 * @return  boolean  True on success.	 *	 * @since   11.1	 */	public function login($credentials, $options = array())	{		// Get the global JAuthentication object.		jimport('joomla.user.authentication');		$authenticate = JAuthentication::getInstance();		$response = $authenticate->authenticate($credentials, $options);		if ($response->status === JAuthentication::STATUS_SUCCESS)		{			// Validate that the user should be able to login (different to being authenticated).			// This permits authentication plugins blocking the user			$authorisations = $authenticate->authorise($response, $options);			foreach ($authorisations as $authorisation)			{				$denied_states = array(JAuthentication::STATUS_EXPIRED, JAuthentication::STATUS_DENIED);				if (in_array($authorisation->status, $denied_states))				{					// Trigger onUserAuthorisationFailure Event.					$this->triggerEvent('onUserAuthorisationFailure', array((array) $authorisation));					// If silent is set, just return false.					if (isset($options['silent']) && $options['silent'])					{						return false;					}					// Return the error.					switch ($authorisation->status)					{						case JAuthentication::STATUS_EXPIRED:							return JError::raiseWarning('102002', JText::_('JLIB_LOGIN_EXPIRED'));							break;						case JAuthentication::STATUS_DENIED:							return JError::raiseWarning('102003', JText::_('JLIB_LOGIN_DENIED'));							break;						default:							return JError::raiseWarning('102004', JText::_('JLIB_LOGIN_AUTHORISATION'));							break;					}				}			}			// Import the user plugin group.			JPluginHelper::importPlugin('user');			// OK, the credentials are authenticated and user is authorised.  Lets fire the onLogin event.			$results = $this->triggerEvent('onUserLogin', array((array) $response, $options));			/*			 * If any of the user plugins did not successfully complete the login routine			 * then the whole method fails.			 *			 * Any errors raised should be done in the plugin as this provides the ability			 * to provide much more information about why the routine may have failed.			 */			if (!in_array(false, $results, true))			{				// Set the remember me cookie if enabled.				if (isset($options['remember']) && $options['remember'])				{					// Create the encryption key, apply extra hardening using the user agent string.					$privateKey = self::getHash(@$_SERVER['HTTP_USER_AGENT']);					$key = new JCryptKey('simple', $privateKey, $privateKey);					$crypt = new JCrypt(new JCryptCipherSimple, $key);					$rcookie = $crypt->encrypt(json_encode($credentials));					$lifetime = time() + 365 * 24 * 60 * 60;					// Use domain and path set in config for cookie if it exists.					$cookie_domain = $this->getCfg('cookie_domain', '');					$cookie_path = $this->getCfg('cookie_path', '/');					$secure = $this->isSSLConnection();					setcookie(self::getHash('JLOGIN_REMEMBER'), $rcookie, $lifetime, $cookie_path, $cookie_domain, $secure, true);				}				return true;			}		}		// Trigger onUserLoginFailure Event.		$this->triggerEvent('onUserLoginFailure', array((array) $response));		// If silent is set, just return false.		if (isset($options['silent']) && $options['silent'])		{			return false;		}		// If status is success, any error will have been raised by the user plugin		if ($response->status !== JAuthentication::STATUS_SUCCESS)		{			JLog::add($response->error_message, JLog::WARNING, 'jerror');		}		return false;	}	/**	 * Logout authentication function.	 *	 * Passed the current user information to the onUserLogout event and reverts the current	 * session record back to 'anonymous' parameters.	 * If any of the authentication plugins did not successfully complete	 * the logout routine then the whole method fails. Any errors raised	 * should be done in the plugin as this provides the ability to give	 * much more information about why the routine may have failed.	 *	 * @param   integer  $userid   The user to load - Can be an integer or string - If string, it is converted to ID automatically	 * @param   array    $options  Array('clientid' => array of client id's)	 *	 * @return  boolean  True on success	 *	 * @since   11.1	 */	public function logout($userid = null, $options = array())	{		// Get a user object from the JApplication.		$user = JFactory::getUser($userid);		// Build the credentials array.		$parameters['username'] = $user->get('username');		$parameters['id'] = $user->get('id');		// Set clientid in the options array if it hasn't been set already.		if (!isset($options['clientid']))		{			$options['clientid'] = $this->getClientId();		}		// Import the user plugin group.		JPluginHelper::importPlugin('user');		// OK, the credentials are built. Lets fire the onLogout event.		$results = $this->triggerEvent('onUserLogout', array($parameters, $options));		// Check if any of the plugins failed. If none did, success.		if (!in_array(false, $results, true))		{			// Use domain and path set in config for cookie if it exists.			$cookie_domain = $this->getCfg('cookie_domain', '');			$cookie_path = $this->getCfg('cookie_path', '/');			setcookie(self::getHash('JLOGIN_REMEMBER'), false, time() - 86400, $cookie_path, $cookie_domain);			return true;		}		// Trigger onUserLoginFailure Event.		$this->triggerEvent('onUserLogoutFailure', array($parameters));		return false;	}	/**	 * Gets the name of the current template.	 *	 * @param   array  $params  An optional associative array of configuration settings	 *	 * @return  string  System is the fallback.	 *	 * @since   11.1	 */	public function getTemplate($params = array())	{		return 'system';	}	/**	 * Returns the application JRouter object.	 *	 * @param   string  $name     The name of the application.	 * @param   array   $options  An optional associative array of configuration settings.	 *	 * @return  JRouter  A JRouter object	 *	 * @since   11.1	 */	static public function getRouter($name = null, array $options = array())	{		if (!isset($name))		{			$app = JFactory::getApplication();			$name = $app->getName();		}		jimport('joomla.application.router');		try		{			$router = JRouter::getInstance($name, $options);		}		catch (Exception $e)		{			return null;		}		return $router;	}	/**	 * This method transliterates a string into an URL	 * safe string or returns a URL safe UTF-8 string	 * based on the global configuration	 *	 * @param   string  $string  String to process	 *	 * @return  string  Processed string	 *	 * @since   11.1	 */	static public function stringURLSafe($string)	{		if (JFactory::getConfig()->get('unicodeslugs') == 1)		{			$output = JFilterOutput::stringURLUnicodeSlug($string);		}		else		{			$output = JFilterOutput::stringURLSafe($string);		}		return $output;	}	/**	 * Returns the application JPathway object.	 *	 * @param   string  $name     The name of the application.	 * @param   array   $options  An optional associative array of configuration settings.	 *	 * @return  JPathway  A JPathway object	 *	 * @since   11.1	 */	public function getPathway($name = null, $options = array())	{		if (!isset($name))		{			$name = $this->_name;		}		try		{			$pathway = JPathway::getInstance($name, $options);		}		catch (Exception $e)		{			return null;		}		return $pathway;	}	/**	 * Returns the application JPathway object.	 *	 * @param   string  $name     The name of the application/client.	 * @param   array   $options  An optional associative array of configuration settings.	 *	 * @return  JMenu  JMenu object.	 *	 * @since   11.1	 */	public function getMenu($name = null, $options = array())	{		if (!isset($name))		{			$name = $this->_name;		}		try		{			$menu = JMenu::getInstance($name, $options);		}		catch (Exception $e)		{			return null;		}		return $menu;	}	/**	 * Provides a secure hash based on a seed	 *	 * @param   string  $seed  Seed string.	 *	 * @return  string  A secure hash	 *	 * @since   11.1	 */	public static function getHash($seed)	{		return md5(JFactory::getConfig()->get('secret') . $seed);	}	/**	 * Create the configuration registry.	 *	 * @param   string  $file  The path to the configuration file	 *	 * @return  JConfig  A JConfig object	 *	 * @since   11.1	 */	protected function _createConfiguration($file)	{		JLoader::register('JConfig', $file);		// Create the JConfig object.		$config = new JConfig;		// Get the global configuration object.		$registry = JFactory::getConfig();		// Load the configuration values into the registry.		$registry->loadObject($config);		return $config;	}	/**	 * Create the user session.	 *	 * Old sessions are flushed based on the configuration value for the cookie	 * lifetime. If an existing session, then the last access time is updated.	 * If a new session, a session id is generated and a record is created in	 * the #__sessions table.	 *	 * @param   string  $name  The sessions name.	 *	 * @return  JSession  JSession on success. May call exit() on database error.	 *	 * @since   11.1	 */	protected function _createSession($name)	{		$options = array();		$options['name'] = $name;		switch ($this->_clientId)		{			case 0:				if ($this->getCfg('force_ssl') == 2)				{					$options['force_ssl'] = true;				}				break;			case 1:				if ($this->getCfg('force_ssl') >= 1)				{					$options['force_ssl'] = true;				}				break;		}		$this->registerEvent('onAfterSessionStart', array($this, 'afterSessionStart'));		$session = JFactory::getSession($options);		$session->initialise($this->input, $this->dispatcher);		$session->start();		// TODO: At some point we need to get away from having session data always in the db.		$db = JFactory::getDbo();		// Remove expired sessions from the database.		$time = time();		if ($time % 2)		{			// The modulus introduces a little entropy, making the flushing less accurate			// but fires the query less than half the time.			$query = $db->getQuery(true)				->delete($db->quoteName('#__session'))				->where($db->quoteName('time') . ' < ' . $db->quote((int) ($time - $session->getExpire())));			$db->setQuery($query);			$db->execute();		}		// Check to see the the session already exists.		$handler = $this->getCfg('session_handler');		if (($handler != 'database' && ($time % 2 || $session->isNew()))			|| ($handler == 'database' && $session->isNew()))		{			$this->checkSession();		}		return $session;	}	/**	 * Checks the user session.	 *	 * If the session record doesn't exist, initialise it.	 * If session is new, create session variables	 *	 * @return  void	 *	 * @since   11.1	 */	public function checkSession()	{		$db = JFactory::getDbo();		$session = JFactory::getSession();		$user = JFactory::getUser();		$query = $db->getQuery(true)			->select($db->quoteName('session_id'))			->from($db->quoteName('#__session'))			->where($db->quoteName('session_id') . ' = ' . $db->quote($session->getId()));		$db->setQuery($query, 0, 1);		$exists = $db->loadResult();		// If the session record doesn't exist initialise it.		if (!$exists)		{			$query->clear();			if ($session->isNew())			{				$query->insert($db->quoteName('#__session'))					->columns($db->quoteName('session_id') . ', ' . $db->quoteName('client_id') . ', ' . $db->quoteName('time'))					->values($db->quote($session->getId()) . ', ' . (int) $this->getClientId() . ', ' . $db->quote((int) time()));				$db->setQuery($query);			}			else			{				$query->insert($db->quoteName('#__session'))					->columns(						$db->quoteName('session_id') . ', ' . $db->quoteName('client_id') . ', ' . $db->quoteName('guest') . ', ' .						$db->quoteName('time') . ', ' . $db->quoteName('userid') . ', ' . $db->quoteName('username')					)					->values(						$db->quote($session->getId()) . ', ' . (int) $this->getClientId() . ', ' . (int) $user->get('guest') . ', ' .						$db->quote((int) $session->get('session.timer.start')) . ', ' . (int) $user->get('id') . ', ' . $db->quote($user->get('username'))					);				$db->setQuery($query);			}			// If the insert failed, exit the application.			try			{				$db->execute();			}			catch (RuntimeException $e)			{				jexit($e->getMessage());			}		}	}	/**	 * After the session has been started we need to populate it with some default values.	 *	 * @return  void	 *	 * @since   12.2	 */	public function afterSessionStart()	{		$session = JFactory::getSession();		if ($session->isNew())		{			$session->set('registry', new JRegistry('session'));			$session->set('user', new JUser);		}	}	/**	 * Gets the client id of the current running application.	 *	 * @return  integer  A client identifier.	 *	 * @since   11.1	 */	public function getClientId()	{		return $this->_clientId;	}	/**	 * Is admin interface?	 *	 * @return  boolean  True if this application is administrator.	 *	 * @since   11.1	 */	public function isAdmin()	{		return ($this->_clientId == 1);	}	/**	 * Is site interface?	 *	 * @return  boolean  True if this application is site.	 *	 * @since   11.1	 */	public function isSite()	{		return ($this->_clientId == 0);	}	/**	 * Method to determine if the host OS is  Windows	 *	 * @return  boolean  True if Windows OS	 *	 * @since   11.1	 * @deprecated  13.3 Use the IS_WIN constant instead.	 */	public static function isWinOS()	{		JLog::add('JApplication::isWinOS() is deprecated. Use the IS_WIN constant instead.', JLog::WARNING, 'deprecated');		return IS_WIN;	}	/**	 * Determine if we are using a secure (SSL) connection.	 *	 * @return  boolean  True if using SSL, false if not.	 *	 * @since   12.2	 */	public function isSSLConnection()	{		return ((isset($_SERVER['HTTPS']) && ($_SERVER['HTTPS'] == 'on')) || getenv('SSL_PROTOCOL_VERSION'));	}	/**	 * Returns the response as a string.	 *	 * @return  string  The response	 *	 * @since   11.1	 */	public function __toString()	{		$compress = $this->getCfg('gzip', false);		return JResponse::toString($compress);	}}
<?php/** * @package     Joomla.Administrator * @subpackage  com_admin * * @copyright   Copyright (C) 2005 - 2013 Open Source Matters, Inc. All rights reserved. * @license     GNU General Public License version 2 or later; see LICENSE.txt */defined('_JEXEC') or die;/** * Utility class working with phpsetting * * @package     Joomla.Administrator * @subpackage  com_admin * @since       1.6 */abstract class JHtmlPhpSetting{	/**	 * Method to generate a boolean message for a value	 *	 * @param boolean $val is the value set?	 *	 * @return  string html code	 */	public static function boolean($val)	{		if ($val)		{			return JText::_('JON');		}		else		{			return JText::_('JOFF');		}	}	/**	 * Method to generate a boolean message for a value	 *	 * @param boolean $val is the value set?	 *	 * @return  string html code	 */	public static function set($val)	{		if ($val)		{			return JText::_('JYES');		}		else		{			return JText::_('JNO');		}	}	/**	 * Method to generate a string message for a value	 *	 * @param string $val a php ini value	 *	 * @return  string html code	 */	public static function string($val)	{		if (empty($val))		{			return JText::_('JNONE');		}		else		{			return $val;		}	}	/**	 * Method to generate an integer from a value	 *	 * @param string $val a php ini value	 *	 * @return  string html code	 *	 * @deprecated  4.0  Use intval() or casting instead.	 */	public static function integer($val)	{		JLog::add('JHtmlPhpSetting::integer() is deprecated. Use intval() or casting instead.', JLog::WARNING, 'deprecated');		return (int) $val;	}}
<?php/** * @package     Joomla.Site * @subpackage  com_search * * @copyright   Copyright (C) 2005 - 2013 Open Source Matters, Inc. All rights reserved. * @license     GNU General Public License version 2 or later; see LICENSE.txt */defined('_JEXEC') or die;/** * HTML View class for the search component * * @package     Joomla.Site * @subpackage  com_search * @since       1.0 */class SearchViewSearch extends JViewLegacy{	public function display($tpl = null)	{		require_once JPATH_COMPONENT_ADMINISTRATOR.'/helpers/search.php';		$app     = JFactory::getApplication();		$pathway = $app->getPathway();		$uri     = JURI::getInstance();		$error   = null;		$rows    = null;		$results = null;		$total   = 0;		// Get some data from the model		$areas      = $this->get('areas');		$state      = $this->get('state');		$searchword = $state->get('keyword');		$params     = $app->getParams();		$menus = $app->getMenu();		$menu  = $menus->getActive();		// because the application sets a default page title, we need to get it		// right from the menu item itself		if (is_object($menu))		{			$menu_params = new JRegistry;			$menu_params->loadString($menu->params);			if (!$menu_params->get('page_title'))			{				$params->set('page_title',	JText::_('COM_SEARCH_SEARCH'));			}		}		else		{			$params->set('page_title',	JText::_('COM_SEARCH_SEARCH'));		}		$title = $params->get('page_title');		if ($app->getCfg('sitename_pagetitles', 0) == 1)		{			$title = JText::sprintf('JPAGETITLE', $app->getCfg('sitename'), $title);		}		elseif ($app->getCfg('sitename_pagetitles', 0) == 2)		{			$title = JText::sprintf('JPAGETITLE', $title, $app->getCfg('sitename'));		}		$this->document->setTitle($title);		if ($params->get('menu-meta_description'))		{			$this->document->setDescription($params->get('menu-meta_description'));		}		if ($params->get('menu-meta_keywords'))		{			$this->document->setMetadata('keywords', $params->get('menu-meta_keywords'));		}		if ($params->get('robots'))		{			$this->document->setMetadata('robots', $params->get('robots'));		}		// built select lists		$orders = array();		$orders[] = JHtml::_('select.option', 'newest', JText::_('COM_SEARCH_NEWEST_FIRST'));		$orders[] = JHtml::_('select.option', 'oldest', JText::_('COM_SEARCH_OLDEST_FIRST'));		$orders[] = JHtml::_('select.option', 'popular', JText::_('COM_SEARCH_MOST_POPULAR'));		$orders[] = JHtml::_('select.option', 'alpha', JText::_('COM_SEARCH_ALPHABETICAL'));		$orders[] = JHtml::_('select.option', 'category', JText::_('JCATEGORY'));		$lists = array();		$lists['ordering'] = JHtml::_('select.genericlist', $orders, 'ordering', 'class="inputbox"', 'value', 'text', $state->get('ordering'));		$searchphrases         = array();		$searchphrases[]       = JHtml::_('select.option',  'all', JText::_('COM_SEARCH_ALL_WORDS'));		$searchphrases[]       = JHtml::_('select.option',  'any', JText::_('COM_SEARCH_ANY_WORDS'));		$searchphrases[]       = JHtml::_('select.option',  'exact', JText::_('COM_SEARCH_EXACT_PHRASE'));		$lists['searchphrase'] = JHtml::_('select.radiolist',  $searchphrases, 'searchphrase', '', 'value', 'text', $state->get('match'));		// log the search		JSearchHelper::logSearch($searchword, 'com_search');		//limit searchword		$lang = JFactory::getLanguage();		$upper_limit = $lang->getUpperLimitSearchWord();		$lower_limit = $lang->getLowerLimitSearchWord();		if (SearchHelper::limitSearchWord($searchword))		{			$error = JText::sprintf('COM_SEARCH_ERROR_SEARCH_MESSAGE', $lower_limit, $upper_limit);		}		// Sanitise searchword		if (SearchHelper::santiseSearchWord($searchword, $state->get('match')))		{			$error = JText::_('COM_SEARCH_ERROR_IGNOREKEYWORD');		}		if (!$searchword && !empty($this->input) && count($this->input->post))		{			// $error = JText::_('COM_SEARCH_ERROR_ENTERKEYWORD');		}		// Put the filtered results back into the model		// for next release, the checks should be done in the model perhaps...		$state->set('keyword', $searchword);		if ($error == null)		{			$results	= $this->get('data');			$total		= $this->get('total');			$pagination	= $this->get('pagination');			require_once JPATH_SITE . '/components/com_content/helpers/route.php';			for ($i = 0, $count = count($results); $i < $count; $i++)			{				$row = &$results[$i]->text;				if ($state->get('match') == 'exact')				{					$searchwords = array($searchword);					$needle = $searchword;				}				else {					$searchworda = preg_replace('#\xE3\x80\x80#s', ' ', $searchword);					$searchwords = preg_split("/\s+/u", $searchworda);					$needle = $searchwords[0];				}				$row = SearchHelper::prepareSearchContent($row, $needle);				$searchwords = array_unique($searchwords);				$searchRegex = '#(';				$x = 0;				foreach ($searchwords as $k => $hlword)				{					$searchRegex .= ($x == 0 ? '' : '|');					$searchRegex .= preg_quote($hlword, '#');					$x++;				}				$searchRegex .= ')#iu';				$row = preg_replace($searchRegex, '<span class="highlight">\0</span>', $row);				$result = &$results[$i];				if ($result->created)				{					$created = JHtml::_('date', $result->created, JText::_('DATE_FORMAT_LC3'));				}				else {					$created = '';				}				$result->text		= JHtml::_('content.prepare', $result->text, '', 'com_search.search');				$result->created	= $created;				$result->count		= $i + 1;			}		}		// Check for layout override		$active = JFactory::getApplication()->getMenu()->getActive();		if (isset($active->query['layout']))		{			$this->setLayout($active->query['layout']);		}		//Escape strings for HTML output		$this->pageclass_sfx = htmlspecialchars($params->get('pageclass_sfx'));		$this->pagination = &$pagination;		$this->results = &$results;		$this->lists = &$lists;		$this->params = &$params;		$this->ordering = $state->get('ordering');		$this->searchword = $searchword;		$this->origkeyword = $state->get('origkeyword');		$this->searchphrase = $state->get('match');		$this->searchareas = $areas;		$this->total = $total;		$this->error = $error;		$this->action = $uri;		parent::display($tpl);	}}
<?php/** * @package     Joomla.Platform * @subpackage  Cache * * @copyright   Copyright (C) 2005 - 2013 Open Source Matters, Inc. All rights reserved. * @license     GNU General Public License version 2 or later; see LICENSE */defined('JPATH_PLATFORM') or die;/** * APC cache storage handler * * @package     Joomla.Platform * @subpackage  Cache * @see         http://php.net/manual/en/book.apc.php * @since       11.1 */class JCacheStorageApc extends JCacheStorage{	/**	 * Get cached data from APC by id and group	 *	 * @param   string   $id         The cache data id	 * @param   string   $group      The cache data group	 * @param   boolean  $checkTime  True to verify cache time expiration threshold	 *	 * @return  mixed    Boolean     False on failure or a cached data string	 *	 * @since   11.1	 */	public function get($id, $group, $checkTime = true)	{		$cache_id = $this->_getCacheId($id, $group);		return apc_fetch($cache_id);	}	/**	 * Get all cached data	 *	 * @return  array  data	 *	 * @since   11.1	 */	public function getAll()	{		parent::getAll();		$allinfo = apc_cache_info('user');		$keys = $allinfo['cache_list'];		$secret = $this->_hash;		$data = array();		foreach ($keys as $key)		{			$name = $key['info'];			$namearr = explode('-', $name);			if ($namearr !== false && $namearr[0] == $secret && $namearr[1] == 'cache')			{				$group = $namearr[2];				if (!isset($data[$group]))				{					$item = new JCacheStorageHelper($group);				}				else				{					$item = $data[$group];				}				$item->updateSize($key['mem_size'] / 1024);				$data[$group] = $item;			}		}		return $data;	}	/**	 * Store the data to APC by id and group	 *	 * @param   string  $id     The cache data id	 * @param   string  $group  The cache data group	 * @param   string  $data   The data to store in cache	 *	 * @return  boolean  True on success, false otherwise	 *	 * @since   11.1	 */	public function store($id, $group, $data)	{		$cache_id = $this->_getCacheId($id, $group);		return apc_store($cache_id, $data, $this->_lifetime);	}	/**	 * Remove a cached data entry by id and group	 *	 * @param   string  $id     The cache data id	 * @param   string  $group  The cache data group	 *	 * @return  boolean  True on success, false otherwise	 *	 * @since   11.1	 */	public function remove($id, $group)	{		$cache_id = $this->_getCacheId($id, $group);		return apc_delete($cache_id);	}	/**	 * Clean cache for a group given a mode.	 *	 * group mode    : cleans all cache in the group	 * notgroup mode : cleans all cache not in the group	 *	 * @param   string  $group  The cache data group	 * @param   string  $mode   The mode for cleaning cache [group|notgroup]	 *	 * @return  boolean  True on success, false otherwise	 *	 * @since   11.1	 */	public function clean($group, $mode = null)	{		$allinfo = apc_cache_info('user');		$keys = $allinfo['cache_list'];		$secret = $this->_hash;		foreach ($keys as $key)		{			if (strpos($key['info'], $secret . '-cache-' . $group . '-') === 0 xor $mode != 'group')			{				apc_delete($key['info']);			}		}		return true;	}	/**	 * Force garbage collect expired cache data as items are removed only on fetch!	 *	 * @return  boolean  True on success, false otherwise.	 *	 * @since   11.1	 */	public function gc()	{		$allinfo = apc_cache_info('user');		$keys = $allinfo['cache_list'];		$secret = $this->_hash;		foreach ($keys as $key)		{			if (strpos($key['info'], $secret . '-cache-'))			{				apc_fetch($key['info']);			}		}	}	/**	 * Test to see if the cache storage is available.	 *	 * @return  boolean  True on success, false otherwise.	 *	 * @since   12.1	 */	public static function isSupported()	{		return extension_loaded('apc');	}	/**	 * Lock cached item - override parent as this is more efficient	 *	 * @param   string   $id        The cache data id	 * @param   string   $group     The cache data group	 * @param   integer  $locktime  Cached item max lock time	 *	 * @return  object   Properties are lock and locklooped	 *	 * @since   11.1	 */	public function lock($id, $group, $locktime)	{		$returning = new stdClass;		$returning->locklooped = false;		$looptime = $locktime * 10;		$cache_id = $this->_getCacheId($id, $group) . '_lock';		$data_lock = apc_add($cache_id, 1, $locktime);		if ($data_lock === false)		{			$lock_counter = 0;			// Loop until you find that the lock has been released.			// That implies that data get from other thread has finished			while ($data_lock === false)			{				if ($lock_counter > $looptime)				{					$returning->locked = false;					$returning->locklooped = true;					break;				}				usleep(100);				$data_lock = apc_add($cache_id, 1, $locktime);				$lock_counter++;			}		}		$returning->locked = $data_lock;		return $returning;	}	/**	 * Unlock cached item - override parent for cacheid compatibility with lock	 *	 * @param   string  $id     The cache data id	 * @param   string  $group  The cache data group	 *	 * @return  boolean  True on success, false otherwise.	 *	 * @since   11.1	 */	public function unlock($id, $group = null)	{		$unlock = false;		$cache_id = $this->_getCacheId($id, $group) . '_lock';		$unlock = apc_delete($cache_id);		return $unlock;	}}
<?php/** * @package     Joomla.Administrator * @subpackage  com_search * * @copyright   Copyright (C) 2005 - 2013 Open Source Matters, Inc. All rights reserved. * @license     GNU General Public License version 2 or later; see LICENSE.txt */defined('_JEXEC') or die;/** * Search component helper. * * @package     Joomla.Administrator * @subpackage  com_search * @since       1.5 */class SearchHelper{	/**	 * Configure the Linkbar.	 *	 * @param   string	The name of the active view.	 * @since   1.6	 */	public static function addSubmenu($vName)	{		// Not required.	}	/**	 * Gets a list of the actions that can be performed.	 *	 * @return  JObject	 */	public static function getActions()	{		$user	= JFactory::getUser();		$result	= new JObject;		$assetName = 'com_search';		$actions = JAccess::getActions($assetName);		foreach ($actions as $action)		{			$result->set($action->name,	$user->authorise($action->name, $assetName));		}		return $result;	}	public static function santiseSearchWord(&$searchword, $searchphrase)	{		$ignored = false;		$lang = JFactory::getLanguage();		$tag			= $lang->getTag();		$search_ignore	= $lang->getIgnoredSearchWords();		// Deprecated in 1.6 use $lang->getIgnoredSearchWords instead		$ignoreFile		= $lang->getLanguagePath() . '/' . $tag . '/' . $tag.'.ignore.php';		if (file_exists($ignoreFile))		{			include $ignoreFile;		}		// check for words to ignore		$aterms = explode(' ', JString::strtolower($searchword));		// first case is single ignored word		if (count($aterms) == 1 && in_array(JString::strtolower($searchword), $search_ignore))		{			$ignored = true;		}		// filter out search terms that are too small		$lower_limit = $lang->getLowerLimitSearchWord();		foreach ($aterms as $aterm)		{			if (JString::strlen($aterm) < $lower_limit)			{				$search_ignore[] = $aterm;			}		}		// next is to remove ignored words from type 'all' or 'any' (not exact) searches with multiple words		if (count($aterms) > 1 && $searchphrase != 'exact')		{			$pruned = array_diff($aterms, $search_ignore);			$searchword = implode(' ', $pruned);		}		return $ignored;	}	/**	 * @since  1.5	 */	public static function limitSearchWord(&$searchword)	{		$restriction = false;		$lang = JFactory::getLanguage();		// limit searchword to a maximum of characters		$upper_limit = $lang->getUpperLimitSearchWord();		if (JString::strlen($searchword) > $upper_limit)		{			$searchword		= JString::substr($searchword, 0, $upper_limit - 1);			$restriction	= true;		}		// searchword must contain a minimum of characters		if ($searchword && JString::strlen($searchword) < $lang->getLowerLimitSearchWord())		{			$searchword		= '';			$restriction	= true;		}		return $restriction;	}	/**	 * Logs a search term	 *	 * @param   string  $search_term  The term being searched	 *	 * @return  void	 *	 * @since   1.5	 * @deprecated  4.0  Use JSearchHelper::logSearch() instead	 */	public static function logSearch($search_term)	{		JLog::add(__METHOD__ . '() is deprecated, use JSearchHelper::logSearch() instead.', JLog::WARNING, 'deprecated');		JSearchHelper::logSearch($search_term, 'com_search');	}	/**	 * Prepares results from search for display	 *	 * @param string The source string	 * @param string The searchword to select around	 * @return  string	 *	 * @since  1.5	 */	public static function prepareSearchContent($text, $searchword)	{		// strips tags won't remove the actual jscript		$text = preg_replace("'<script[^>]*>.*?</script>'si", "", $text);		$text = preg_replace('/{.+?}/', '', $text);		//$text = preg_replace('/<a\s+.*?href="([^"]+)"[^>]*>([^<]+)<\/a>/is','\2', $text);		// replace line breaking tags with whitespace		$text = preg_replace("'<(br[^/>]*?/|hr[^/>]*?/|/(div|h[1-6]|li|p|td))>'si", ' ', $text);		return self::_smartSubstr(strip_tags($text), $searchword);	}	/**	 * Checks an object for search terms (after stripping fields of HTML)	 *	 * @param object The object to check	 * @param string Search words to check for	 * @param array List of object variables to check against	 * @returns boolean True if searchTerm is in object, false otherwise	 */	public static function checkNoHtml($object, $searchTerm, $fields)	{		$searchRegex = array(				'#<script[^>]*>.*?</script>#si',				'#<style[^>]*>.*?</style>#si',				'#<!.*?(--|]])>#si',				'#<[^>]*>#i'				);		$terms = explode(' ', $searchTerm);		if (empty($fields))		{			return false;		}		foreach ($fields as $field)		{			if (!isset($object->$field))			{				continue;			}			$text = $object->$field;			foreach ($searchRegex as $regex)			{				$text = preg_replace($regex, '', $text);			}			foreach ($terms as $term)			{				if (JString::stristr($text, $term) !== false)				{					return true;				}			}		}		return false;	}	/**	 * returns substring of characters around a searchword	 *	 * @param string The source string	 * @param int Number of chars to return	 * @param string The searchword to select around	 * @return  string	 *	 * @since  1.5	 */	public static function _smartSubstr($text, $searchword)	{		$lang = JFactory::getLanguage();		$length = $lang->getSearchDisplayedCharactersNumber();		$textlen = JString::strlen($text);		$lsearchword = JString::strtolower($searchword);		$wordfound = false;		$pos = 0;		while ($wordfound === false && $pos < $textlen)		{			if (($wordpos = @JString::strpos($text, ' ', $pos + $length)) !== false)			{				$chunk_size = $wordpos - $pos;			} else {				$chunk_size = $length;			}			$chunk = JString::substr($text, $pos, $chunk_size);			$wordfound = JString::strpos(JString::strtolower($chunk), $lsearchword);			if ($wordfound === false)			{				$pos += $chunk_size + 1;			}		}		if ($wordfound !== false)		{			return (($pos > 0) ? '...&#160;' : '') . $chunk . '&#160;...';		}		else		{			if (($wordpos = @JString::strpos($text, ' ', $length)) !== false)			{				return JString::substr($text, 0, $wordpos) . '&#160;...';			} else {				return JString::substr($text, 0, $length);			}		}	}}
<?php/** * @package     Joomla.Site * @subpackage  com_users * * @copyright   Copyright (C) 2005 - 2013 Open Source Matters, Inc. All rights reserved. * @license     GNU General Public License version 2 or later; see LICENSE.txt */defined('_JEXEC') or die;JHtml::_('behavior.keepalive');JHtml::_('behavior.tooltip');JHtml::_('behavior.formvalidation');//load user_profile plugin language$lang = JFactory::getLanguage();$lang->load('plg_user_profile', JPATH_ADMINISTRATOR);?><div class="profile-edit<?php echo $this->pageclass_sfx?>"><?php if ($this->params->get('show_page_heading')) : ?>	<div class="page-header">		<h1><?php echo $this->escape($this->params->get('page_heading')); ?></h1>	</div><?php endif; ?><form id="member-profile" action="<?php echo JRoute::_('index.php?option=com_users&task=profile.save'); ?>" method="post" class="form-validate form-horizontal" enctype="multipart/form-data"><?php foreach ($this->form->getFieldsets() as $group => $fieldset):// Iterate through the form fieldsets and display each one.?>	<?php $fields = $this->form->getFieldset($group);?>	<?php if (count($fields)):?>	<fieldset>		<?php if (isset($fieldset->label)):// If the fieldset has a label set, display it as the legend.?>		<legend><?php echo JText::_($fieldset->label); ?></legend>		<?php endif;?>		<?php foreach ($fields as $field):// Iterate through the fields in the set and display them.?>			<?php if ($field->hidden):// If the field is hidden, just display the input.?>				<div class="control-group">					<div class="controls">						<?php echo $field->input;?>					</div>				</div>			<?php else:?>				<div class="control-group">					<div class="control-label">						<?php echo $field->label; ?>						<?php if (!$field->required && $field->type != 'Spacer') : ?>						<span class="optional"><?php echo JText::_('COM_USERS_OPTIONAL'); ?></span>						<?php endif; ?>					</div>					<div class="controls">						<?php echo $field->input; ?>					</div>				</div>			<?php endif;?>		<?php endforeach;?>	</fieldset>	<?php endif;?><?php endforeach;?>		<div class="form-actions">			<button type="submit" class="btn btn-primary validate"><span><?php echo JText::_('JSUBMIT'); ?></span></button>			<a class="btn" href="<?php echo JRoute::_(''); ?>" title="<?php echo JText::_('JCANCEL'); ?>"><?php echo JText::_('JCANCEL'); ?></a>			<input type="hidden" name="option" value="com_users" />			<input type="hidden" name="task" value="profile.save" />			<?php echo JHtml::_('form.token'); ?>		</div>	</form></div>
<?php/** * @package     Joomla.Platform * @subpackage  Form * * @copyright   Copyright (C) 2005 - 2013 Open Source Matters, Inc. All rights reserved. * @license     GNU General Public License version 2 or later; see LICENSE */defined('JPATH_PLATFORM') or die;/** * Form Field class for the Joomla Platform. * Single check box field. * This is a boolean field with null for false and the specified option for true * * @package     Joomla.Platform * @subpackage  Form * @link        http://www.w3.org/TR/html-markup/input.checkbox.html#input.checkbox * @see         JFormFieldCheckboxes * @since       11.1 */class JFormFieldCheckbox extends JFormField{	/**	 * The form field type.	 *	 * @var    string	 * @since  11.1	 */	public $type = 'Checkbox';	/**	 * Method to get the field input markup.	 * The checked element sets the field to selected.	 *	 * @return  string   The field input markup.	 *	 * @since   11.1	 */	protected function getInput()	{		// Initialize some field attributes.		$class = $this->element['class'] ? ' class="' . (string) $this->element['class'] . '"' : '';		$disabled = ((string) $this->element['disabled'] == 'true') ? ' disabled="disabled"' : '';		$value = $this->element['value'] ? (string) $this->element['value'] : '1';		$required = $this->required ? ' required="required" aria-required="true"' : '';		if (empty($this->value))		{			$checked = (isset($this->element['checked'] )) ? ' checked="checked"' : '';		}		else		{			$checked = ' checked="checked"';		}		// Initialize JavaScript field attributes.		$onclick = $this->element['onclick'] ? ' onclick="' . (string) $this->element['onclick'] . '"' : '';		return '<input type="checkbox" name="' . $this->name . '" id="' . $this->id . '" value="'			. htmlspecialchars($value, ENT_COMPAT, 'UTF-8') . '"' . $class . $checked . $disabled . $onclick . $required . ' />';	}}
<?php/** * @package     Joomla.Platform * @subpackage  Document * * @copyright   Copyright (C) 2005 - 2013 Open Source Matters, Inc. All rights reserved. * @license     GNU General Public License version 2 or later; see LICENSE */defined('JPATH_PLATFORM') or die;/** * JDocumentJSON class, provides an easy interface to parse and display JSON output * * @package     Joomla.Platform * @subpackage  Document * @see         http://www.json.org/ * @since       11.1 */class JDocumentJSON extends JDocument{	/**	 * Document name	 *	 * @var    string	 * @since  11.1	 */	protected $_name = 'joomla';	/**	 * Class constructor	 *	 * @param   array  $options  Associative array of options	 *	 * @since  11.1	 */	public function __construct($options = array())	{		parent::__construct($options);		// Set mime type		$this->_mime = 'application/json';		// Set document type		$this->_type = 'json';	}	/**	 * Render the document.	 *	 * @param   boolean  $cache   If true, cache the output	 * @param   array    $params  Associative array of attributes	 *	 * @return  The rendered data	 *	 * @since  11.1	 */	public function render($cache = false, $params = array())	{		JResponse::allowCache(false);		JResponse::setHeader('Content-disposition', 'attachment; filename="' . $this->getName() . '.json"', true);		parent::render();		return $this->getBuffer();	}	/**	 * Returns the document name	 *	 * @return  string	 *	 * @since  11.1	 */	public function getName()	{		return $this->_name;	}	/**	 * Sets the document name	 *	 * @param   string  $name  Document name	 *	 * @return  JDocumentJSON instance of $this to allow chaining	 *	 * @since   11.1	 */	public function setName($name = 'joomla')	{		$this->_name = $name;		return $this;	}}
<?php/** * @package     Joomla.Administrator * @subpackage  com_redirect * * @copyright   Copyright (C) 2005 - 2013 Open Source Matters, Inc. All rights reserved. * @license     GNU General Public License version 2 or later; see LICENSE.txt */defined('_JEXEC') or die;/** * View to edit a redirect link. * * @package     Joomla.Administrator * @subpackage  com_redirect * @since       1.6 */class RedirectViewLink extends JViewLegacy{	protected $item;	protected $form;	protected $state;	/**	 * Display the view	 *	 * @since   1.6	 */	public function display($tpl = null)	{		$this->form		= $this->get('Form');		$this->item		= $this->get('Item');		$this->state	= $this->get('State');		// Check for errors.		if (count($errors = $this->get('Errors')))		{			JError::raiseError(500, implode("\n", $errors));			return false;		}		$this->addToolbar();		parent::display($tpl);	}	/**	 * Add the page title and toolbar.	 *	 * @since   1.6	 */	protected function addToolbar()	{		JFactory::getApplication()->input->set('hidemainmenu', true);		$user		= JFactory::getUser();		$isNew		= ($this->item->id == 0);		$canDo		= RedirectHelper::getActions();		JToolbarHelper::title(JText::_('COM_REDIRECT_MANAGER_LINK'), 'redirect');		// If not checked out, can save the item.		if ($canDo->get('core.edit'))		{			JToolbarHelper::apply('link.apply');			JToolbarHelper::save('link.save');		}		// This component does not support Save as Copy due to uniqueness checks.		// While it can be done, it causes too much confusion if the user does		// not change the Old URL.		if ($canDo->get('core.edit') && $canDo->get('core.create'))		{			JToolbarHelper::save2new('link.save2new');		}		if (empty($this->item->id))		{			JToolbarHelper::cancel('link.cancel');		}		else		{			JToolbarHelper::cancel('link.cancel', 'JTOOLBAR_CLOSE');		}		JToolbarHelper::help('JHELP_COMPONENTS_REDIRECT_MANAGER_EDIT');	}}
<?php/** * @package     Joomla.Administrator * @subpackage  Template.hathor * * @copyright   Copyright (C) 2005 - 2013 Open Source Matters, Inc. All rights reserved. * @license     GNU General Public License version 2 or later; see LICENSE.txt */defined('_JEXEC') or die;JHtml::addIncludePath(JPATH_COMPONENT.'/helpers/html');JHtml::_('behavior.tooltip');$function  = JFactory::getApplication()->input->getCmd('function', 'jSelectContact');$listOrder = $this->escape($this->state->get('list.ordering'));$listDirn  = $this->escape($this->state->get('list.direction'));?><form action="<?php echo JRoute::_('index.php?option=com_contact&view=contacts&layout=modal&tmpl=component');?>" method="post" name="adminForm" id="adminForm">	<fieldset id="filter-bar">	<legend class="element-invisible"><?php echo JText::_('JSEARCH_FILTER_LABEL'); ?></legend>		<div class="filter-search">			<label class="filter-search-lbl" for="filter-search"><?php echo JText::_('JSEARCH_FILTER_LABEL'); ?></label>			<input type="text" name="filter_search" id="filter_search" value="<?php echo $this->escape($this->state->get('filter.search')); ?>" title="<?php echo JText::_('COM_CONTENT_FILTER_SEARCH_DESC'); ?>" />			<button type="submit">				<?php echo JText::_('JSEARCH_FILTER_SUBMIT'); ?></button>			<button type="button" onclick="document.id('filter_search').value='';this.form.submit();">				<?php echo JText::_('JSEARCH_FILTER_CLEAR'); ?></button>		</div>		<div class="filter-select">			<label class="selectlabel" for="filter_access">				<?php echo JText::_('JOPTION_SELECT_ACCESS'); ?>			</label>			<select name="filter_access" class="inputbox" id="filter_access">				<option value=""><?php echo JText::_('JOPTION_SELECT_ACCESS');?></option>				<?php echo JHtml::_('select.options', JHtml::_('access.assetgroups'), 'value', 'text', $this->state->get('filter.access'));?>			</select>			<label class="selectlabel" for="filter_published">				<?php echo JText::_('JOPTION_SELECT_PUBLISHED'); ?>			</label>			<select name="filter_published" class="inputbox" id="filter_published">				<option value=""><?php echo JText::_('JOPTION_SELECT_PUBLISHED');?></option>				<?php echo JHtml::_('select.options', JHtml::_('jgrid.publishedOptions'), 'value', 'text', $this->state->get('filter.published'), true);?>			</select>			<label class="selectlabel" for="filter_category_id">				<?php echo JText::_('JOPTION_SELECT_CATEGORY'); ?>			</label>			<select name="filter_category_id" class="inputbox" id="filter_category_id">				<option value=""><?php echo JText::_('JOPTION_SELECT_CATEGORY');?></option>				<?php echo JHtml::_('select.options', JHtml::_('category.options', 'com_contact'), 'value', 'text', $this->state->get('filter.category_id'));?>			</select>			<?php if ($this->state->get('filter.forcedLanguage')) : ?>				<input type="hidden" name="forcedLanguage" value="<?php echo $this->escape($this->state->get('filter.forcedLanguage')); ?>" />				<input type="hidden" name="filter_language" value="<?php echo $this->escape($this->state->get('filter.language')); ?>" />			<?php else : ?>				<label class="selectlabel" for="filter_language"><?php echo JText::_('JOPTION_SELECT_LANGUAGE'); ?></label>				<select name="filter_language" class="inputbox" id="filter_language">					<option value=""><?php echo JText::_('JOPTION_SELECT_LANGUAGE');?></option>					<?php echo JHtml::_('select.options', JHtml::_('contentlanguage.existing', true, true), 'value', 'text', $this->state->get('filter.language'));?>				</select>			<?php endif; ?>			<button type="submit" id="filter-go">				<?php echo JText::_('JSUBMIT'); ?></button>		</div>	</fieldset>	<div class="clr"> </div>	<table class="adminlist modal">		<thead>			<tr>				<th class="title">					<?php echo JHtml::_('grid.sort', 'JGLOBAL_TITLE', 'a.name', $listDirn, $listOrder); ?>				</th>				<th>					<?php echo JHtml::_('grid.sort', 'COM_CONTACT_FIELD_LINKED_USER_LABEL', 'ul.name', $listDirn, $listOrder); ?>				</th>				<th class="title access-col">					<?php echo JHtml::_('grid.sort', 'JGRID_HEADING_ACCESS', 'access_level', $listDirn, $listOrder); ?>				</th>				<th class="nowrap state-col">					<?php echo JHtml::_('grid.sort', 'JCATEGORY', 'a.catid', $listDirn, $listOrder); ?>				</th>				<th class="title language-col">					<?php echo JHtml::_('grid.sort', 'JGRID_HEADING_LANGUAGE', 'language', $listDirn, $listOrder); ?>				</th>				<th class="nowrap id-col">					<?php echo JHtml::_('grid.sort', 'JGRID_HEADING_ID', 'a.id', $listDirn, $listOrder); ?>				</th>			</tr>		</thead>		<tbody>		<?php foreach ($this->items as $i => $item) : ?>			<tr class="row<?php echo $i % 2; ?>">				<th>					<a class="pointer" onclick="if (window.parent) window.parent.<?php echo $this->escape($function);?>('<?php echo $item->id; ?>', '<?php echo $this->escape(addslashes($item->name)); ?>');">						<?php echo $this->escape($item->name); ?></a>				</th>				<td class="center">					<?php if (!empty($item->linked_user)) : ?>						<?php echo $item->linked_user;?>					<?php endif; ?>				</td>				<td class="center">					<?php echo $this->escape($item->access_level); ?>				</td>				<td class="center">					<?php echo $this->escape($item->category_title); ?>				</td>				<td class="center">					<?php if ($item->language == '*'):?>						<?php echo JText::alt('JALL', 'language'); ?>					<?php else:?>						<?php echo $item->language_title ? $this->escape($item->language_title) : JText::_('JUNDEFINED'); ?>					<?php endif;?>				</td>				<td class="center">					<?php echo (int) $item->id; ?>				</td>			</tr>			<?php endforeach; ?>		</tbody>	</table>	<?php echo $this->pagination->getListFooter(); ?>	<input type="hidden" name="task" value="" />	<input type="hidden" name="filter_order" value="<?php echo $listOrder; ?>" />	<input type="hidden" name="filter_order_Dir" value="<?php echo $listDirn; ?>" />	<?php echo JHtml::_('form.token'); ?></form>
<?php/** * @package     Joomla.Administrator * @subpackage  Template.hathor * * @copyright   Copyright (C) 2005 - 2013 Open Source Matters, Inc. All rights reserved. * @license     GNU General Public License version 2 or later; see LICENSE.txt */defined('_JEXEC') or die;// Include the component HTML helpers.JHtml::addIncludePath(JPATH_COMPONENT.'/helpers/html');// Load the tooltip behavior.JHtml::_('behavior.tooltip');$listOrder	= $this->escape($this->state->get('list.ordering'));$listDirn	= $this->escape($this->state->get('list.direction'));?><form action="<?php echo JRoute::_('index.php?option=com_users&view=debuggroup&user_id='.(int) $this->state->get('filter.user_id'));?>" method="post" name="adminForm" id="adminForm"><?php if (!empty( $this->sidebar)) : ?>	<div id="j-sidebar-container" class="span2">		<?php echo $this->sidebar; ?>	</div>	<div id="j-main-container" class="span10"><?php else : ?>	<div id="j-main-container"><?php endif;?>	<fieldset id="filter-bar">	<legend class="element-invisible"><?php echo JText::_('COM_USERS_SEARCH_ASSETS'); ?></legend>		<div class="filter-search fltlft">			<label class="filter-search-lbl" for="filter_search"><?php echo JText::_('COM_USERS_SEARCH_ASSETS'); ?></label>			<input type="text" name="filter_search" id="filter_search" value="<?php echo $this->escape($this->state->get('filter.search')); ?>" title="<?php echo JText::_('COM_USERS_SEARCH_USERS'); ?>" />			<button type="submit"><?php echo JText::_('JSEARCH_FILTER_SUBMIT'); ?></button>			<button type="button" onclick="document.id('filter_search').value='';this.form.submit();"><?php echo JText::_('JSEARCH_RESET'); ?></button>		</div>		<div class="filter-select fltrt">			<label class="selectlabel" for="filter_component"><?php echo JText::_('COM_USERS_OPTION_SELECT_COMPONENT'); ?></label>			<select name="filter_component" class="inputbox" id="filter_component">				<option value=""><?php echo JText::_('COM_USERS_OPTION_SELECT_COMPONENT');?></option>				<?php if (!empty($this->components))				{					echo JHtml::_('select.options', $this->components, 'value', 'text', $this->state->get('filter.component'));				}?>			</select>			<label class="selectlabel" for="filter_level_start"><?php echo JText::_('COM_USERS_OPTION_SELECT_LEVEL_START'); ?></label>			<select name="filter_level_start" class="inputbox" id="filter_level_start">				<option value=""><?php echo JText::_('COM_USERS_OPTION_SELECT_LEVEL_START');?></option>				<?php echo JHtml::_('select.options', $this->levels, 'value', 'text', $this->state->get('filter.level_start'));?>			</select>			<label class="selectlabel" for="filter_level_end"><?php echo JText::_('COM_USERS_OPTION_SELECT_LEVEL_END'); ?></label>			<select name="filter_level_end" class="inputbox" id="filter_level_end">				<option value=""><?php echo JText::_('COM_USERS_OPTION_SELECT_LEVEL_END');?></option>				<?php echo JHtml::_('select.options', $this->levels, 'value', 'text', $this->state->get('filter.level_end'));?>			</select>			<button type="submit" id="filter-go">				<?php echo JText::_('JSUBMIT'); ?></button>		</div>	</fieldset>	<div class="clr"> </div>	<div>		<?php echo JText::_('COM_USERS_DEBUG_LEGEND'); ?>		<span class="swatch"><?php echo JText::sprintf('COM_USERS_DEBUG_NO_CHECK', '-');?></span>		<span class="check-0 swatch"><?php echo JText::sprintf('COM_USERS_DEBUG_IMPLICIT_DENY', '-');?></span>		<span class="check-a swatch"><?php echo JText::sprintf('COM_USERS_DEBUG_EXPLICIT_ALLOW', '&#10003;');?></span>		<span class="check-d swatch"><?php echo JText::sprintf('COM_USERS_DEBUG_EXPLICIT_DENY', '&#10007;');?></span>	</div>	<table class="adminlist">		<thead>			<tr>				<th class="left">					<?php echo JHtml::_('grid.sort', 'COM_USERS_HEADING_ASSET_TITLE', 'a.title', $listDirn, $listOrder); ?>				</th>				<th class="left">					<?php echo JHtml::_('grid.sort', 'COM_USERS_HEADING_ASSET_NAME', 'a.name', $listDirn, $listOrder); ?>				</th>				<?php foreach ($this->actions as $key => $action) : ?>				<th class="width-5">					<span class="hasTip" title="<?php echo htmlspecialchars(JText::_($key).'::'.JText::_($action[1]), ENT_COMPAT, 'UTF-8'); ?>"><?php echo JText::_($key); ?></span>				</th>				<?php endforeach; ?>				<th class="width-5 nowrap">					<?php echo JHtml::_('grid.sort', 'COM_USERS_HEADING_LFT', 'a.lft', $listDirn, $listOrder); ?>				</th>				<th class="width-5 nowrap">					<?php echo JHtml::_('grid.sort', 'JGRID_HEADING_ID', 'a.id', $listDirn, $listOrder); ?>				</th>			</tr>		</thead>		<tbody>		<?php foreach ($this->items as $i => $item) : ?>			<tr class="row1">				<td>					<?php echo $this->escape($item->title); ?>				</td>				<td class="nowrap">					<?php echo str_repeat('<span class="gi">|&mdash;</span>', $item->level) ?>					<?php echo $this->escape($item->name); ?>				</td>				<?php foreach ($this->actions as $action) : ?>					<?php					$name	= $action[0];					$check	= $item->checks[$name];					if ($check === true) :						$class	= 'check-a';						$text	= '&#10003;';					elseif ($check === false) :						$class	= 'check-d';						$text	= '&#10007;';					elseif ($check === null) :						$class	= 'check-0';						$text	= '-';					else :						$class	= '';						$text	= '&#160;';					endif;					?>				<td class="center <?php echo $class;?>">					<?php echo $text; ?>				</td>				<?php endforeach; ?>				<td class="center">					<?php echo (int) $item->lft; ?>					- <?php echo (int) $item->rgt; ?>				</td>				<td class="center">					<?php echo (int) $item->id; ?>				</td>			</tr>			<?php endforeach; ?>		</tbody>	</table>	<?php echo $this->pagination->getListFooter(); ?>	<div>		<input type="hidden" name="task" value="" />		<input type="hidden" name="boxchecked" value="0" />		<input type="hidden" name="filter_order" value="<?php echo $listOrder; ?>" />		<input type="hidden" name="filter_order_Dir" value="<?php echo $listDirn; ?>" />		<?php echo JHtml::_('form.token'); ?>	</div></div></form>
<?php/** * @package     Joomla.Platform * @subpackage  Form * * @copyright   Copyright (C) 2005 - 2013 Open Source Matters, Inc. All rights reserved. * @license     GNU General Public License version 2 or later; see LICENSE */defined('JPATH_PLATFORM') or die;/** * Form Field class for the Joomla Platform. * Supports a one line text field. * * @package     Joomla.Platform * @subpackage  Form * @link        http://www.w3.org/TR/html-markup/input.text.html#input.text * @since       11.1 */class JFormFieldText extends JFormField{	/**	 * The form field type.	 *	 * @var    string	 *	 * @since  11.1	 */	protected $type = 'Text';	/**	 * Method to get the field input markup.	 *	 * @return  string  The field input markup.	 *	 * @since   11.1	 */	protected function getInput()	{		// Initialize some field attributes.		$size = $this->element['size'] ? ' size="' . (int) $this->element['size'] . '"' : '';		$maxLength = $this->element['maxlength'] ? ' maxlength="' . (int) $this->element['maxlength'] . '"' : '';		$class = $this->element['class'] ? ' class="' . (string) $this->element['class'] . '"' : '';		$readonly = ((string) $this->element['readonly'] == 'true') ? ' readonly="readonly"' : '';		$disabled = ((string) $this->element['disabled'] == 'true') ? ' disabled="disabled"' : '';		$required = $this->required ? ' required="required" aria-required="true"' : '';		// Initialize JavaScript field attributes.		$onchange = $this->element['onchange'] ? ' onchange="' . (string) $this->element['onchange'] . '"' : '';		return '<input type="text" name="' . $this->name . '" id="' . $this->id . '" value="'			. htmlspecialchars($this->value, ENT_COMPAT, 'UTF-8') . '"' . $class . $size . $disabled . $readonly . $onchange . $maxLength . $required . '/>';	}}
<?php/** * @package     Joomla.Plugin * @subpackage  Finder.Content * * @copyright   Copyright (C) 2005 - 2013 Open Source Matters, Inc. All rights reserved. * @license     GNU General Public License version 2 or later; see LICENSE */defined('JPATH_BASE') or die;require_once JPATH_ADMINISTRATOR . '/components/com_finder/helpers/indexer/adapter.php';/** * Finder adapter for com_content. * * @package     Joomla.Plugin * @subpackage  Finder.Content * @since       2.5 */class PlgFinderContent extends FinderIndexerAdapter{	/**	 * The plugin identifier.	 *	 * @var    string	 * @since  2.5	 */	protected $context = 'Content';	/**	 * The extension name.	 *	 * @var    string	 * @since  2.5	 */	protected $extension = 'com_content';	/**	 * The sublayout to use when rendering the results.	 *	 * @var    string	 * @since  2.5	 */	protected $layout = 'article';	/**	 * The type of content that the adapter indexes.	 *	 * @var    string	 * @since  2.5	 */	protected $type_title = 'Article';	/**	 * The table name.	 *	 * @var    string	 * @since  2.5	 */	protected $table = '#__content';	/**	 * Load the language file on instantiation.	 *	 * @var    boolean	 * @since  3.1	 */	protected $autoloadLanguage = true;	/**	 * Method to update the item link information when the item category is	 * changed. This is fired when the item category is published or unpublished	 * from the list view.	 *	 * @param   string   $extension  The extension whose category has been updated.	 * @param   array    $pks        A list of primary key ids of the content that has changed state.	 * @param   integer  $value      The value of the state that the content has been changed to.	 *	 * @return  void	 *	 * @since   2.5	 */	public function onFinderCategoryChangeState($extension, $pks, $value)	{		// Make sure we're handling com_content categories		if ($extension == 'com_content')		{			$this->categoryStateChange($pks, $value);		}	}	/**	 * Method to remove the link information for items that have been deleted.	 *	 * @param   string  $context  The context of the action being performed.	 * @param   JTable  $table    A JTable object containing the record to be deleted	 *	 * @return  boolean  True on success.	 *	 * @since   2.5	 * @throws  Exception on database error.	 */	public function onFinderAfterDelete($context, $table)	{		if ($context == 'com_content.article')		{			$id = $table->id;		}		elseif ($context == 'com_finder.index')		{			$id = $table->link_id;		}		else		{			return true;		}		// Remove the items.		return $this->remove($id);	}	/**	 * Method to determine if the access level of an item changed.	 *	 * @param   string   $context  The context of the content passed to the plugin.	 * @param   JTable   $row      A JTable object	 * @param   boolean  $isNew    If the content has just been created	 *	 * @return  boolean  True on success.	 *	 * @since   2.5	 * @throws  Exception on database error.	 */	public function onFinderAfterSave($context, $row, $isNew)	{		// We only want to handle articles here		if ($context == 'com_content.article' || $context == 'com_content.form')		{			// Check if the access levels are different			if (!$isNew && $this->old_access != $row->access)			{				// Process the change.				$this->itemAccessChange($row);			}			// Reindex the item			$this->reindex($row->id);		}		// Check for access changes in the category		if ($context == 'com_categories.category')		{			// Check if the access levels are different			if (!$isNew && $this->old_cataccess != $row->access)			{				$this->categoryAccessChange($row);			}		}		return true;	}	/**	 * Method to reindex the link information for an item that has been saved.	 * This event is fired before the data is actually saved so we are going	 * to queue the item to be indexed later.	 *	 * @param   string   $context  The context of the content passed to the plugin.	 * @param   JTable   $row     A JTable object	 * @param   boolean  $isNew    If the content is just about to be created	 *	 * @return  boolean  True on success.	 *	 * @since   2.5	 * @throws  Exception on database error.	 */	public function onFinderBeforeSave($context, $row, $isNew)	{		// We only want to handle articles here		if ($context == 'com_content.article' || $context == 'com_content.form')		{			// Query the database for the old access level if the item isn't new			if (!$isNew)			{				$this->checkItemAccess($row);			}		}		// Check for access levels from the category		if ($context == 'com_categories.category')		{			// Query the database for the old access level if the item isn't new			if (!$isNew)			{				$this->checkCategoryAccess($row);			}		}		return true;	}	/**	 * Method to update the link information for items that have been changed	 * from outside the edit screen. This is fired when the item is published,	 * unpublished, archived, or unarchived from the list view.	 *	 * @param   string   $context  The context for the content passed to the plugin.	 * @param   array    $pks      A list of primary key ids of the content that has changed state.	 * @param   integer  $value    The value of the state that the content has been changed to.	 *	 * @return  void	 *	 * @since   2.5	 */	public function onFinderChangeState($context, $pks, $value)	{		// We only want to handle articles here		if ($context == 'com_content.article' || $context == 'com_content.form')		{			$this->itemStateChange($pks, $value);		}		// Handle when the plugin is disabled		if ($context == 'com_plugins.plugin' && $value === 0)		{			$this->pluginDisable($pks);		}	}	/**	 * Method to index an item. The item must be a FinderIndexerResult object.	 *	 * @param   FinderIndexerResult  $item    The item to index as an FinderIndexerResult object.	 * @param   string               $format  The item format	 *	 * @return  void	 *	 * @since   2.5	 * @throws  Exception on database error.	 */	protected function index(FinderIndexerResult $item, $format = 'html')	{		$item->setLanguage();		// Check if the extension is enabled		if (JComponentHelper::isEnabled($this->extension) == false)		{			return;		}		// Initialize the item parameters.		$registry = new JRegistry;		$registry->loadString($item->params);		$item->params = JComponentHelper::getParams('com_content', true);		$item->params->merge($registry);		$registry = new JRegistry;		$registry->loadString($item->metadata);		$item->metadata = $registry;		// Trigger the onContentPrepare event.		$item->summary = FinderIndexerHelper::prepareContent($item->summary, $item->params);		$item->body = FinderIndexerHelper::prepareContent($item->body, $item->params);		// Build the necessary route and path information.		$item->url = $this->getURL($item->id, $this->extension, $this->layout);		$item->route = ContentHelperRoute::getArticleRoute($item->slug, $item->catslug);		$item->path = FinderIndexerHelper::getContentPath($item->route);		// Get the menu title if it exists.		$title = $this->getItemMenuTitle($item->url);		// Adjust the title if necessary.		if (!empty($title) && $this->params->get('use_menu_title', true))		{			$item->title = $title;		}		// Add the meta-author.		$item->metaauthor = $item->metadata->get('author');		// Add the meta-data processing instructions.		$item->addInstruction(FinderIndexer::META_CONTEXT, 'metakey');		$item->addInstruction(FinderIndexer::META_CONTEXT, 'metadesc');		$item->addInstruction(FinderIndexer::META_CONTEXT, 'metaauthor');		$item->addInstruction(FinderIndexer::META_CONTEXT, 'author');		$item->addInstruction(FinderIndexer::META_CONTEXT, 'created_by_alias');		// Translate the state. Articles should only be published if the category is published.		$item->state = $this->translateState($item->state, $item->cat_state);		// Add the type taxonomy data.		$item->addTaxonomy('Type', 'Article');		// Add the author taxonomy data.		if (!empty($item->author) || !empty($item->created_by_alias))		{			$item->addTaxonomy('Author', !empty($item->created_by_alias) ? $item->created_by_alias : $item->author);		}		// Add the category taxonomy data.		$item->addTaxonomy('Category', $item->category, $item->cat_state, $item->cat_access);		// Add the language taxonomy data.		$item->addTaxonomy('Language', $item->language);		// Get content extras.		FinderIndexerHelper::getContentExtras($item);		// Index the item.		$this->indexer->index($item);	}	/**	 * Method to setup the indexer to be run.	 *	 * @return  boolean  True on success.	 *	 * @since   2.5	 */	protected function setup()	{		// Load dependent classes.		include_once JPATH_SITE . '/components/com_content/helpers/route.php';		return true;	}	/**	 * Method to get the SQL query used to retrieve the list of content items.	 *	 * @param   mixed  $query  A JDatabaseQuery object or null.	 *	 * @return  JDatabaseQuery  A database object.	 *	 * @since   2.5	 */	protected function getListQuery($query = null)	{		$db = JFactory::getDbo();		// Check if we can use the supplied SQL query.		$query = $query instanceof JDatabaseQuery ? $query : $db->getQuery(true)			->select('a.id, a.title, a.alias, a.introtext AS summary, a.fulltext AS body')			->select('a.state, a.catid, a.created AS start_date, a.created_by')			->select('a.created_by_alias, a.modified, a.modified_by, a.attribs AS params')			->select('a.metakey, a.metadesc, a.metadata, a.language, a.access, a.version, a.ordering')			->select('a.publish_up AS publish_start_date, a.publish_down AS publish_end_date')			->select('c.title AS category, c.published AS cat_state, c.access AS cat_access');		// Handle the alias CASE WHEN portion of the query		$case_when_item_alias = ' CASE WHEN ';		$case_when_item_alias .= $query->charLength('a.alias', '!=', '0');		$case_when_item_alias .= ' THEN ';		$a_id = $query->castAsChar('a.id');		$case_when_item_alias .= $query->concatenate(array($a_id, 'a.alias'), ':');		$case_when_item_alias .= ' ELSE ';		$case_when_item_alias .= $a_id.' END as slug';		$query->select($case_when_item_alias);		$case_when_category_alias = ' CASE WHEN ';		$case_when_category_alias .= $query->charLength('c.alias', '!=', '0');		$case_when_category_alias .= ' THEN ';		$c_id = $query->castAsChar('c.id');		$case_when_category_alias .= $query->concatenate(array($c_id, 'c.alias'), ':');		$case_when_category_alias .= ' ELSE ';		$case_when_category_alias .= $c_id.' END as catslug';		$query->select($case_when_category_alias)			->select('u.name AS author')			->from('#__content AS a')			->join('LEFT', '#__categories AS c ON c.id = a.catid')			->join('LEFT', '#__users AS u ON u.id = a.created_by');		return $query;	}}
<?php/** * @package     Joomla.Platform * @subpackage  Form * * @copyright   Copyright (C) 2005 - 2013 Open Source Matters, Inc. All rights reserved. * @license     GNU General Public License version 2 or later; see LICENSE */defined('JPATH_PLATFORM') or die;/** * Form Field class for the Joomla Platform. * Provides a hidden field * * @package     Joomla.Platform * @subpackage  Form * @link        http://www.w3.org/TR/html-markup/input.hidden.html#input.hidden * @since       11.1 */class JFormFieldHidden extends JFormField{	/**	 * The form field type.	 *	 * @var    string	 * @since  11.1	 */	protected $type = 'Hidden';	/**	 * Method to get the field input markup.	 *	 * @return  string  The field input markup.	 *	 * @since   11.1	 */	protected function getInput()	{		// Initialize some field attributes.		$class = $this->element['class'] ? ' class="' . (string) $this->element['class'] . '"' : '';		$disabled = ((string) $this->element['disabled'] == 'true') ? ' disabled="disabled"' : '';		// Initialize JavaScript field attributes.		$onchange = $this->element['onchange'] ? ' onchange="' . (string) $this->element['onchange'] . '"' : '';		return '<input type="hidden" name="' . $this->name . '" id="' . $this->id . '" value="'			. htmlspecialchars($this->value, ENT_COMPAT, 'UTF-8') . '"' . $class . $disabled . $onchange . ' />';	}}
<?php/** * @package     Joomla.Administrator * @subpackage  com_finder * * @copyright   Copyright (C) 2005 - 2013 Open Source Matters, Inc. All rights reserved. * @license     GNU General Public License version 2 or later; see LICENSE */defined('_JEXEC') or die();/** * Maps model for the Finder package. * * @package     Joomla.Administrator * @subpackage  com_finder * @since       2.5 */class FinderModelMaps extends JModelList{	/**	 * Constructor.	 *	 * @param   array  $config  An associative array of configuration settings. [optional]	 *	 * @since   2.5	 * @see     JController	 */	public function __construct($config = array())	{		if (empty($config['filter_fields']))		{			$config['filter_fields'] = array(				'state', 'a.state',				'title', 'a.title'			);		}		parent::__construct($config);	}	/**	 * Method to test whether a record can be deleted.	 *	 * @param   object  $record  A record object.	 *	 * @return  boolean  True if allowed to delete the record. Defaults to the permission for the component.	 *	 * @since   2.5	 */	protected function canDelete($record)	{		$user = JFactory::getUser();		return $user->authorise('core.delete', $this->option);	}	/**	 * Method to test whether a record can be deleted.	 *	 * @param   object  $record  A record object.	 *	 * @return  boolean  True if allowed to change the state of the record. Defaults to the permission for the component.	 *	 * @since   2.5	 */	protected function canEditState($record)	{		$user = JFactory::getUser();		return $user->authorise('core.edit.state', $this->option);	}	/**	 * Method to delete one or more records.	 *	 * @param   array  &$pks  An array of record primary keys.	 *	 * @return  boolean  True if successful, false if an error occurs.	 *	 * @since   2.5	 */	public function delete(&$pks)	{		$dispatcher = JEventDispatcher::getInstance();		$pks = (array) $pks;		$table = $this->getTable();		// Include the content plugins for the on delete events.		JPluginHelper::importPlugin('content');		// Iterate the items to delete each one.		foreach ($pks as $i => $pk)		{			if ($table->load($pk))			{				if ($this->canDelete($table))				{					$context = $this->option . '.' . $this->name;					// Trigger the onContentBeforeDelete event.					$result = $dispatcher->trigger('onContentBeforeDelete', array($context, $table));					if (in_array(false, $result, true))					{						$this->setError($table->getError());						return false;					}					if (!$table->delete($pk))					{						$this->setError($table->getError());						return false;					}					// Trigger the onContentAfterDelete event.					$dispatcher->trigger('onContentAfterDelete', array($context, $table));				}				else				{					// Prune items that you can't change.					unset($pks[$i]);					$error = $this->getError();					if ($error)					{						$this->setError($error);					}					else					{						$this->setError(JText::_('JLIB_APPLICATION_ERROR_DELETE_NOT_PERMITTED'));					}				}			}			else			{				$this->setError($table->getError());				return false;			}		}		// Clear the component's cache		$this->cleanCache();		return true;	}	/**	 * Build an SQL query to load the list data.	 *	 * @return  JDatabaseQuery  A JDatabaseQuery object	 *	 * @since   2.5	 */	protected function getListQuery()	{		$db = $this->getDbo();		$query = $db->getQuery(true);		// Select all fields from the table.		$query->select('a.*')			->from($db->quoteName('#__finder_taxonomy') . ' AS a');		// Self-join to get children.		$query->select('COUNT(b.id) AS num_children')			->join('LEFT', $db->quoteName('#__finder_taxonomy') . ' AS b ON b.parent_id=a.id');		// Join to get the map links		$query->select('COUNT(c.node_id) AS num_nodes')			->join('LEFT', $db->quoteName('#__finder_taxonomy_map') . ' AS c ON c.node_id=a.id')			->group('a.id, a.parent_id, a.title, a.state, a.access, a.ordering');		// If the model is set to check item state, add to the query.		if (is_numeric($this->getState('filter.state')))		{			$query->where('a.state = ' . (int) $this->getState('filter.state'));		}		// Filter the maps over the branch if set.		$branch_id = $this->getState('filter.branch');		if (!empty($branch_id))		{			$query->where('a.parent_id = ' . (int) $branch_id);		}		// Filter the maps over the search string if set.		$search = $this->getState('filter.search');		if (!empty($search))		{			$query->where('a.title LIKE ' . $db->quote('%' . $search . '%'));		}		// Handle the list ordering.		$ordering = $this->getState('list.ordering');		$direction = $this->getState('list.direction');		if (!empty($ordering))		{			$query->order($db->escape($ordering) . ' ' . $db->escape($direction));		}		return $query;	}	/**	 * Method to get a store id based on model configuration state.	 *	 * This is necessary because the model is used by the component and	 * different modules that might need different sets of data or different	 * ordering requirements.	 *	 * @param   string  $id  A prefix for the store id. [optional]	 *	 * @return  string  A store id.	 *	 * @since   2.5	 */	protected function getStoreId($id = '')	{		// Compile the store id.		$id .= ':' . $this->getState('filter.state');		$id .= ':' . $this->getState('filter.search');		$id .= ':' . $this->getState('filter.branch');		return parent::getStoreId($id);	}	/**	 * Returns a JTable object, always creating it.	 *	 * @param   string  $type    The table type to instantiate. [optional]	 * @param   string  $prefix  A prefix for the table class name. [optional]	 * @param   array   $config  Configuration array for model. [optional]	 *	 * @return  JTable  A database object	 *	 * @since   2.5	 */	public function getTable($type = 'Map', $prefix = 'FinderTable', $config = array())	{		return JTable::getInstance($type, $prefix, $config);	}	/**	 * Method to auto-populate the model state.  Calling getState in this method will result in recursion.	 *	 * @param   string  $ordering   An optional ordering field. [optional]	 * @param   string  $direction  An optional direction. [optional]	 *	 * @return  void	 *	 * @since   2.5	 */	protected function populateState($ordering = null, $direction = null)	{		// Load the filter state.		$search = $this->getUserStateFromRequest($this->context . '.filter.search', 'filter_search');		$this->setState('filter.search', $search);		$state = $this->getUserStateFromRequest($this->context . '.filter.state', 'filter_state', '', 'string');		$this->setState('filter.state', $state);		$branch = $this->getUserStateFromRequest($this->context . '.filter.branch', 'filter_branch', '1', 'string');		$this->setState('filter.branch', $branch);		// Load the parameters.		$params = JComponentHelper::getParams('com_finder');		$this->setState('params', $params);		// List state information.		parent::populateState('a.title', 'asc');	}	/**	 * Method to change the published state of one or more records.	 *	 * @param   array    &$pks   A list of the primary keys to change.	 * @param   integer  $value  The value of the published state. [optional]	 *	 * @return  boolean  True on success.	 *	 * @since   2.5	 */	public function publish(&$pks, $value = 1)	{		$dispatcher = JEventDispatcher::getInstance();		$user = JFactory::getUser();		$table = $this->getTable();		$pks = (array) $pks;		// Include the content plugins for the change of state event.		JPluginHelper::importPlugin('content');		// Access checks.		foreach ($pks as $i => $pk)		{			$table->reset();			if ($table->load($pk))			{				if (!$this->canEditState($table))				{					// Prune items that you can't change.					unset($pks[$i]);					$this->setError(JText::_('JLIB_APPLICATION_ERROR_EDITSTATE_NOT_PERMITTED'));					return false;				}			}		}		// Attempt to change the state of the records.		if (!$table->publish($pks, $value, $user->get('id')))		{			$this->setError($table->getError());			return false;		}		$context = $this->option . '.' . $this->name;		// Trigger the onContentChangeState event.		$result = $dispatcher->trigger('onContentChangeState', array($context, $pks, $value));		if (in_array(false, $result, true))		{			$this->setError($table->getError());			return false;		}		// Clear the component's cache		$this->cleanCache();		return true;	}	/**	 * Method to purge all maps from the taxonomy.	 *	 * @return  boolean  Returns true on success, false on failure.	 *	 * @since   2.5	 */	public function purge()	{		$db = $this->getDbo();		$query = $db->getQuery(true)			->delete($db->quoteName('#__finder_taxonomy'))			->where($db->quoteName('parent_id') . ' > 1');		$db->setQuery($query);		$db->execute();		$query->clear()			->delete($db->quoteName('#__finder_taxonomy_map'))			->where('1');		$db->setQuery($query);		$db->execute();		return true;	}}
<?php/** * @package     Joomla.Administrator * @subpackage  com_users * * @copyright   Copyright (C) 2005 - 2013 Open Source Matters, Inc. All rights reserved. * @license     GNU General Public License version 2 or later; see LICENSE.txt */defined('_JEXEC') or die;/** * View class for a list of users. * * @package     Joomla.Administrator * @subpackage  com_users * @since       1.6 */class UsersViewDebugUser extends JViewLegacy{	protected $actions;	protected $items;	protected $pagination;	protected $state;	/**	 * Display the view	 */	public function display($tpl = null)	{		// Access check.		if (!JFactory::getUser()->authorise('core.manage', 'com_users') || !JFactory::getConfig()->get('debug'))		{			return JError::raiseWarning(404, JText::_('JERROR_ALERTNOAUTHOR'));		}		$this->actions		= $this->get('DebugActions');		$this->items		= $this->get('Items');		$this->pagination	= $this->get('Pagination');		$this->state		= $this->get('State');		$this->user			= $this->get('User');		$this->levels		= UsersHelperDebug::getLevelsOptions();		$this->components	= UsersHelperDebug::getComponents();		// Check for errors.		if (count($errors = $this->get('Errors')))		{			JError::raiseError(500, implode("\n", $errors));			return false;		}		$this->addToolbar();		$this->sidebar = JHtmlSidebar::render();		parent::display($tpl);	}	/**	 * Add the page title and toolbar.	 *	 * @since   1.6	 */	protected function addToolbar()	{		JToolbarHelper::title(JText::sprintf('COM_USERS_VIEW_DEBUG_USER_TITLE', $this->user->id, $this->user->name), 'user');		JToolbarHelper::help('JHELP_USERS_DEBUG_USERS');		JHtmlSidebar::setAction('index.php?option=com_users&view=debuguser&user_id=' . (int) $this->state->get('filter.user_id'));		$option = '';		if (!empty($this->components))		{			$option = JHtml::_('select.options', $this->components, 'value', 'text', $this->state->get('filter.component'));		}		JHtmlSidebar::addFilter(			JText::_('COM_USERS_OPTION_SELECT_COMPONENT'),			'filter_component',			$option		);		JHtmlSidebar::addFilter(			JText::_('COM_USERS_OPTION_SELECT_LEVEL_START'),			'filter_level_start',			JHtml::_('select.options', $this->levels, 'value', 'text', $this->state->get('filter.level_start'))		);		JHtmlSidebar::addFilter(			JText::_('COM_USERS_OPTION_SELECT_LEVEL_END'),			'filter_level_end',			JHtml::_('select.options', $this->levels, 'value', 'text', $this->state->get('filter.level_end'))		);		$this->sidebar = JHtmlSidebar::render();	}}
<?php/** * @package     Joomla.Platform * @subpackage  Form * * @copyright   Copyright (C) 2005 - 2013 Open Source Matters, Inc. All rights reserved. * @license     GNU General Public License version 2 or later; see LICENSE */defined('JPATH_PLATFORM') or die;/** * Form Field class for the Joomla Platform. * Supports a generic list of options. * * @package     Joomla.Platform * @subpackage  Form * @since       11.1 */class JFormFieldList extends JFormField{	/**	 * The form field type.	 *	 * @var    string	 * @since  11.1	 */	protected $type = 'List';	/**	 * Method to get the field input markup for a generic list.	 * Use the multiple attribute to enable multiselect.	 *	 * @return  string  The field input markup.	 *	 * @since   11.1	 */	protected function getInput()	{		$html = array();		$attr = '';		// Initialize some field attributes.		$attr .= $this->element['class'] ? ' class="' . (string) $this->element['class'] . '"' : '';		// To avoid user's confusion, readonly="true" should imply disabled="true".		if ((string) $this->element['readonly'] == 'true' || (string) $this->element['disabled'] == 'true')		{			$attr .= ' disabled="disabled"';		}		$attr .= $this->element['size'] ? ' size="' . (int) $this->element['size'] . '"' : '';		$attr .= $this->multiple ? ' multiple="multiple"' : '';		$attr .= $this->required ? ' required="required" aria-required="true"' : '';		// Initialize JavaScript field attributes.		$attr .= $this->element['onchange'] ? ' onchange="' . (string) $this->element['onchange'] . '"' : '';		// Get the field options.		$options = (array) $this->getOptions();		// Create a read-only list (no name) with a hidden input to store the value.		if ((string) $this->element['readonly'] == 'true')		{			$html[] = JHtml::_('select.genericlist', $options, '', trim($attr), 'value', 'text', $this->value, $this->id);			$html[] = '<input type="hidden" name="' . $this->name . '" value="' . $this->value . '"/>';		}		// Create a regular list.		else		{			$html[] = JHtml::_('select.genericlist', $options, $this->name, trim($attr), 'value', 'text', $this->value, $this->id);		}		return implode($html);	}	/**	 * Method to get the field options.	 *	 * @return  array  The field option objects.	 *	 * @since   11.1	 */	protected function getOptions()	{		$options = array();		foreach ($this->element->children() as $option)		{			// Only add <option /> elements.			if ($option->getName() != 'option')			{				continue;			}			// Create a new option object based on the <option /> element.			$tmp = JHtml::_(				'select.option', (string) $option['value'],				JText::alt(trim((string) $option), preg_replace('/[^a-zA-Z0-9_\-]/', '_', $this->fieldname)), 'value', 'text',				((string) $option['disabled'] == 'true')			);			// Set some option attributes.			$tmp->class = (string) $option['class'];			// Set some JavaScript option attributes.			$tmp->onclick = (string) $option['onclick'];			// Add the option object to the result set.			$options[] = $tmp;		}		reset($options);		return $options;	}}
<?php/** * @package     Joomla.Administrator * @subpackage  com_menus * * @copyright   Copyright (C) 2005 - 2013 Open Source Matters, Inc. All rights reserved. * @license     GNU General Public License version 2 or later; see LICENSE.txt */defined('JPATH_BASE') or die;JFormHelper::loadFieldClass('list');/** * Form Field class for the Joomla Framework. * * @package     Joomla.Administrator * @subpackage  com_menus * @since       1.6 */class JFormFieldMenuParent extends JFormFieldList{	/**	 * The form field type.	 *	 * @var        string	 * @since   1.6	 */	protected $type = 'MenuParent';	/**	 * Method to get the field options.	 *	 * @return  array  The field option objects.	 * @since   1.6	 */	protected function getOptions()	{		$options = array();		$db = JFactory::getDbo();		$query = $db->getQuery(true)			->select('a.id AS value, a.title AS text, a.level')			->from('#__menu AS a')			->join('LEFT', $db->quoteName('#__menu') . ' AS b ON a.lft > b.lft AND a.rgt < b.rgt');		if ($menuType = $this->form->getValue('menutype'))		{			$query->where('a.menutype = ' . $db->quote($menuType));		}		else		{			$query->where('a.menutype != ' . $db->quote(''));		}		// Prevent parenting to children of this item.		if ($id = $this->form->getValue('id'))		{			$query->join('LEFT', $db->quoteName('#__menu') . ' AS p ON p.id = ' . (int) $id)				->where('NOT(a.lft >= p.lft AND a.rgt <= p.rgt)');		}		$query->where('a.published != -2')			->group('a.id, a.title, a.level, a.lft, a.rgt, a.menutype, a.parent_id, a.published')			->order('a.lft ASC');		// Get the options.		$db->setQuery($query);		try		{			$options = $db->loadObjectList();		}		catch (RuntimeException $e)		{			JError::raiseWarning(500, $e->getMessage());		}		// Pad the option text with spaces using depth level as a multiplier.		for ($i = 0, $n = count($options); $i < $n; $i++)		{			$options[$i]->text = str_repeat('- ', $options[$i]->level) . $options[$i]->text;		}		// Merge any additional options in the XML definition.		$options = array_merge(parent::getOptions(), $options);		return $options;	}}
<?php/** * @package     Joomla.Administrator * @subpackage  com_messages * * @copyright   Copyright (C) 2005 - 2013 Open Source Matters, Inc. All rights reserved. * @license     GNU General Public License version 2 or later; see LICENSE.txt */defined('_JEXEC') or die;// Include the HTML helpers.JHtml::addIncludePath(JPATH_COMPONENT.'/helpers/html');JHtml::_('behavior.tooltip');JHtml::_('behavior.formvalidation');JHtml::_('behavior.keepalive');JHtml::_('behavior.modal');?><script type="text/javascript">	Joomla.submitbutton = function(task)	{		if (task == 'config.cancel' || document.formvalidator.isValid(document.id('config-form')))		{			Joomla.submitform(task, document.getElementById('config-form'));		}	}</script><form action="<?php echo JRoute::_('index.php?option=com_messages'); ?>" method="post" name="adminForm" id="message-form" class="form-validate form-horizontal">	<fieldset>		<div>			<div class="modal-header">				<h3><?php echo JText::_('COM_MESSAGES_MY_SETTINGS');?></h3>			</div>			<div class="modal-body">				<button class="btn btn-primary" type="submit" onclick="Joomla.submitform('config.save', this.form);window.top.setTimeout('window.parent.SqueezeBox.close()', 700);">					<?php echo JText::_('JSAVE');?></button>				<button class="btn" type="button" onclick="window.parent.SqueezeBox.close();">					<?php echo JText::_('JCANCEL');?></button>				<hr />				<div class="control-group">					<div class="control-label">						<?php echo $this->form->getLabel('lock'); ?>					</div>					<div class="controls">						<?php echo $this->form->getInput('lock'); ?>					</div>				</div>				<div class="control-group">					<div class="control-label">						<?php echo $this->form->getLabel('mail_on_new'); ?>					</div>					<div class="controls">						<?php echo $this->form->getInput('mail_on_new'); ?>					</div>				</div>				<div class="control-group">					<div class="control-label">						<?php echo $this->form->getLabel('auto_purge'); ?>					</div>					<div class="controls">						<?php echo $this->form->getInput('auto_purge'); ?>					</div>				</div>			</div>		</div>		</fieldset>		<input type="hidden" name="task" value="" />		<?php echo JHtml::_('form.token'); ?></form>
<?php/** * @package     Joomla.Administrator * @subpackage  com_menus * * @copyright   Copyright (C) 2005 - 2013 Open Source Matters, Inc. All rights reserved. * @license     GNU General Public License version 2 or later; see LICENSE.txt */defined('_JEXEC') or die;// Include the component HTML helpers.JHtml::addIncludePath(JPATH_COMPONENT.'/helpers/html');JHtml::_('bootstrap.tooltip');JHtml::_('behavior.multiselect');JHtml::_('formbehavior.chosen', 'select');$user		= JFactory::getUser();$app		= JFactory::getApplication();$userId		= $user->get('id');$listOrder	= $this->escape($this->state->get('list.ordering'));$listDirn	= $this->escape($this->state->get('list.direction'));$ordering 	= ($listOrder == 'a.lft');$canOrder	= $user->authorise('core.edit.state',	'com_menus');$saveOrder 	= ($listOrder == 'a.lft' && $listDirn == 'asc');if ($saveOrder){	$saveOrderingUrl = 'index.php?option=com_menus&task=items.saveOrderAjax&tmpl=component';	JHtml::_('sortablelist.sortable', 'itemList', 'adminForm', strtolower($listDirn), $saveOrderingUrl, false, true);}$sortFields = $this->getSortFields();$assoc		= isset($app->item_associations) ? $app->item_associations : 0;?><script type="text/javascript">	Joomla.orderTable = function()	{		table = document.getElementById("sortTable");		direction = document.getElementById("directionTable");		order = table.options[table.selectedIndex].value;		if (order != '<?php echo $listOrder; ?>')		{			dirn = 'asc';		}		else		{			dirn = direction.options[direction.selectedIndex].value;		}		Joomla.tableOrdering(order, dirn, '');	}</script><?php //Set up the filter bar. ?><form action="<?php echo JRoute::_('index.php?option=com_menus&view=items');?>" method="post" name="adminForm" id="adminForm"><?php if (!empty( $this->sidebar)) : ?>	<div id="j-sidebar-container" class="span2">		<?php echo $this->sidebar; ?>	</div>	<div id="j-main-container" class="span10"><?php else : ?>	<div id="j-main-container"><?php endif;?>		<div id="filter-bar" class="btn-toolbar">			<div class="filter-search btn-group pull-left">				<label for="filter_search" class="element-invisible"><?php echo JText::_('COM_CONTENT_FILTER_SEARCH_DESC');?></label>				<input type="text" name="filter_search" id="filter_search" placeholder="<?php echo JText::_('COM_MENUS_ITEMS_SEARCH_FILTER'); ?>" value="<?php echo $this->escape($this->state->get('filter.search')); ?>" title="<?php echo JText::_('COM_MENUS_ITEMS_SEARCH_FILTER'); ?>" />			</div>			<div class="btn-group pull-left hidden-phone">				<button class="btn hasTooltip" type="submit" title="<?php echo JText::_('JSEARCH_FILTER_SUBMIT'); ?>"><i class="icon-search"></i></button>				<button class="btn hasTooltip" type="button" onclick="document.id('filter_search').value='';this.form.submit();" title="<?php echo JText::_('JSEARCH_FILTER_CLEAR'); ?>"><i class="icon-remove"></i></button>			</div>			<div class="btn-group pull-right hidden-phone">				<label for="limit" class="element-invisible"><?php echo JText::_('JFIELD_PLG_SEARCH_SEARCHLIMIT_DESC');?></label>				<?php echo $this->pagination->getLimitBox(); ?>			</div>			<div class="btn-group pull-right hidden-phone">				<label for="directionTable" class="element-invisible"><?php echo JText::_('JFIELD_ORDERING_DESC');?></label>				<select name="directionTable" id="directionTable" class="input-medium" onchange="Joomla.orderTable()">					<option value=""><?php echo JText::_('JFIELD_ORDERING_DESC');?></option>					<option value="asc" <?php if ($listDirn == 'asc') echo 'selected="selected"'; ?>><?php echo JText::_('JGLOBAL_ORDER_ASCENDING');?></option>					<option value="desc" <?php if ($listDirn == 'desc') echo 'selected="selected"'; ?>><?php echo JText::_('JGLOBAL_ORDER_DESCENDING');?></option>				</select>			</div>			<div class="btn-group pull-right">				<label for="sortTable" class="element-invisible"><?php echo JText::_('JGLOBAL_SORT_BY');?></label>				<select name="sortTable" id="sortTable" class="input-medium" onchange="Joomla.orderTable()">					<option value=""><?php echo JText::_('JGLOBAL_SORT_BY');?></option>					<?php echo JHtml::_('select.options', $sortFields, 'value', 'text', $listOrder);?>				</select>			</div>		</div>		<div class="clearfix"> </div>		<table class="table table-striped" id="itemList">			<thead>				<tr>					<th width="1%" class="hidden-phone">						<?php echo JHtml::_('grid.sort', '<i class="icon-menu-2"></i>', 'a.ordering', $listDirn, $listOrder, null, 'asc', 'JGRID_HEADING_ORDERING'); ?>					</th>					<th width="1%" class="hidden-phone">						<input type="checkbox" name="checkall-toggle" value="" title="<?php echo JText::_('JGLOBAL_CHECK_ALL'); ?>" onclick="Joomla.checkAll(this)" />					</th>					<th width="1%" class="nowrap center">						<?php echo JHtml::_('grid.sort', 'JSTATUS', 'a.published', $listDirn, $listOrder); ?>					</th>					<th class="title">						<?php echo JHtml::_('grid.sort', 'JGLOBAL_TITLE', 'a.title', $listDirn, $listOrder); ?>					</th>					<th width="5%" class="nowrap hidden-phone">						<?php echo JHtml::_('grid.sort', 'COM_MENUS_HEADING_HOME', 'a.home', $listDirn, $listOrder); ?>					</th>				<th width="10%" class="nowrap hidden-phone">					<?php echo JHtml::_('grid.sort',  'JGRID_HEADING_ACCESS', 'a.access', $listDirn, $listOrder); ?>				</th>				<?php if ($assoc) : ?>				<th width="5%" class="nowrap hidden-phone">					<?php echo JHtml::_('grid.sort', 'COM_MENUS_HEADING_ASSOCIATION', 'association', $listDirn, $listOrder); ?>				</th>					<?php endif;?>					<th width="5%" class="nowrap hidden-phone">						<?php echo JHtml::_('grid.sort', 'JGRID_HEADING_LANGUAGE', 'language', $this->state->get('list.direction'), $this->state->get('list.ordering')); ?>					</th>					<th width="1%" class="nowrap hidden-phone">						<?php echo JHtml::_('grid.sort', 'JGRID_HEADING_ID', 'a.id', $listDirn, $listOrder); ?>					</th>				</tr>			</thead>			<tfoot>				<tr>					<td colspan="15">						<?php echo $this->pagination->getListFooter(); ?>					</td>				</tr>			</tfoot>			<tbody>			<?php			$originalOrders = array();			foreach ($this->items as $i => $item) :				$orderkey   = array_search($item->id, $this->ordering[$item->parent_id]);				$canCreate  = $user->authorise('core.create',     'com_menus');				$canEdit    = $user->authorise('core.edit',       'com_menus');				$canCheckin = $user->authorise('core.manage',     'com_checkin') || $item->checked_out == $user->get('id')|| $item->checked_out == 0;				$canChange  = $user->authorise('core.edit.state', 'com_menus') && $canCheckin;				// Get the parents of item for sorting				if ($item->level > 1)				{					$parentsStr = "";					$_currentParentId = $item->parent_id;					$parentsStr = " ".$_currentParentId;					for ($j = 0; $j < $item->level; $j++)					{						foreach ($this->ordering as $k => $v)						{							$v = implode("-", $v);							$v = "-" . $v . "-";							if (strpos($v, "-" . $_currentParentId . "-") !== false)							{								$parentsStr .= " " . $k;								$_currentParentId = $k;								break;							}						}					}				}				else				{					$parentsStr = "";				}				?>				<tr class="row<?php echo $i % 2; ?>" sortable-group-id="<?php echo $item->parent_id;?>" item-id="<?php echo $item->id?>" parents="<?php echo $parentsStr?>" level="<?php echo $item->level?>">					<td class="order nowrap center hidden-phone">					<?php if ($canChange) :						$disableClassName = '';						$disabledLabel	  = '';						if (!$saveOrder) :							$disabledLabel    = JText::_('JORDERINGDISABLED');							$disableClassName = 'inactive tip-top';						endif; ?>						<span class="sortable-handler hasTooltip <?php echo $disableClassName?>" title="<?php echo $disabledLabel?>">							<i class="icon-menu"></i>						</span>					<?php else : ?>						<span class="sortable-handler inactive">							<i class="icon-menu"></i>						</span>					<?php endif; ?>					<input type="text" style="display:none" name="order[]" size="5" value="<?php echo $orderkey + 1;?>" />					</td>					<td class="center hidden-phone">						<?php echo JHtml::_('grid.id', $i, $item->id); ?>					</td>					<td class="center">						<?php echo JHtml::_('MenusHtml.Menus.state', $item->published, $i, $canChange, 'cb'); ?>					</td>					<td>						<?php echo str_repeat('<span class="gi">|&mdash;</span>', $item->level - 1) ?>						<?php if ($item->checked_out) : ?>							<?php echo JHtml::_('jgrid.checkedout', $i, $item->editor, $item->checked_out_time, 'items.', $canCheckin); ?>						<?php endif; ?>						<?php if ($canEdit) : ?>							<a href="<?php echo JRoute::_('index.php?option=com_menus&task=item.edit&id='.(int) $item->id);?>">								<?php echo $this->escape($item->title); ?></a>						<?php else : ?>							<?php echo $this->escape($item->title); ?>						<?php endif; ?>						<span class="small">						<?php if ($item->type != 'url') : ?>							<?php if (empty($item->note)) : ?>								<?php echo JText::sprintf('JGLOBAL_LIST_ALIAS', $this->escape($item->alias));?>							<?php else : ?>								<?php echo JText::sprintf('JGLOBAL_LIST_ALIAS_NOTE', $this->escape($item->alias), $this->escape($item->note));?>							<?php endif; ?>						<?php elseif ($item->type == 'url' && $item->note) : ?>							<?php echo JText::sprintf('JGLOBAL_LIST_NOTE', $this->escape($item->note));?>						<?php endif; ?>						</span>						<div class="small" title="<?php echo $this->escape($item->path);?>">							<?php echo str_repeat('<span class="gtr">&mdash;</span>', $item->level - 1) ?>							<span title="<?php echo isset($item->item_type_desc) ? htmlspecialchars($this->escape($item->item_type_desc), ENT_COMPAT, 'UTF-8') : ''; ?>">								<?php echo $this->escape($item->item_type); ?></span>						</div>					</td>					<td class="center hidden-phone">						<?php if ($item->type == 'component') : ?>							<?php if ($item->language == '*' || $item->home == '0'):?>								<?php echo JHtml::_('jgrid.isdefault', $item->home, $i, 'items.', ($item->language != '*' || !$item->home) && $canChange);?>							<?php elseif ($canChange):?>								<a href="<?php echo JRoute::_('index.php?option=com_menus&task=items.unsetDefault&cid[]='.$item->id.'&'.JSession::getFormToken().'=1');?>">									<?php echo JHtml::_('image', 'mod_languages/' . $item->image . '.gif', $item->language_title, array('title' => JText::sprintf('COM_MENUS_GRID_UNSET_LANGUAGE', $item->language_title)), true);?>								</a>							<?php else:?>								<?php echo JHtml::_('image', 'mod_languages/' . $item->image . '.gif', $item->language_title, array('title' => $item->language_title), true);?>							<?php endif;?>						<?php endif; ?>					</td>				<td class="small hidden-phone">					<?php echo $this->escape($item->access_level); ?>				</td>				<?php if ($assoc):?>				<td class="small hidden-phone">					<?php if ($item->association):?>						<?php echo JHtml::_('MenusHtml.Menus.association', $item->id);?>						<?php endif;?>					</td>					<?php endif;?>					<td class="small hidden-phone">						<?php if ($item->language == ''):?>							<?php echo JText::_('JDEFAULT'); ?>						<?php elseif ($item->language == '*'):?>							<?php echo JText::alt('JALL', 'language'); ?>						<?php else:?>							<?php echo $item->language_title ? $this->escape($item->language_title) : JText::_('JUNDEFINED'); ?>						<?php endif;?>					</td>					<td class="center hidden-phone">						<span title="<?php echo sprintf('%d-%d', $item->lft, $item->rgt);?>">							<?php echo (int) $item->id; ?></span>					</td>				</tr>				<?php endforeach; ?>			</tbody>		</table>		<?php //Load the batch processing form.is user is allowed ?>		<?php if ($user->authorise('core.create', 'com_menus') || $user->authorise('core.edit', 'com_menus')) : ?>			<?php echo $this->loadTemplate('batch'); ?>		<?php endif;?>		<input type="hidden" name="task" value="" />		<input type="hidden" name="boxchecked" value="0" />		<input type="hidden" name="filter_order" value="<?php echo $listOrder; ?>" />		<input type="hidden" name="filter_order_Dir" value="<?php echo $listDirn; ?>" />		<input type="hidden" name="original_order_values" value="<?php echo implode($originalOrders, ','); ?>" />		<?php echo JHtml::_('form.token'); ?>	</div></form>
<?php/** * @package     Joomla.Administrator * @subpackage  Template.hathor * * @copyright   Copyright (C) 2005 - 2013 Open Source Matters, Inc. All rights reserved. * @license     GNU General Public License version 2 or later; see LICENSE.txt *//* add accessibility, labels on input forms */defined('_JEXEC') or die;JHtml::addIncludePath(JPATH_COMPONENT.'/helpers/html');JHtml::_('behavior.tooltip');JHtml::_('behavior.multiselect');$user		= JFactory::getUser();$listOrder	= $this->escape($this->state->get('list.ordering'));$listDirn	= $this->escape($this->state->get('list.direction'));$canOrder	= $user->authorise('core.edit.state', 'com_content.article');$saveOrder	= $listOrder == 'fp.ordering';$n			= count($this->items);?><form action="<?php echo JRoute::_('index.php?option=com_content&view=featured'); ?>" method="post" name="adminForm" id="adminForm"><?php if (!empty( $this->sidebar)) : ?>	<div id="j-sidebar-container" class="span2">		<?php echo $this->sidebar; ?>	</div>	<div id="j-main-container" class="span10"><?php else : ?>	<div id="j-main-container"><?php endif;?>	<fieldset id="filter-bar">	<legend class="element-invisible"><?php echo JText::_('JSEARCH_FILTER_LABEL'); ?></legend>		<div class="filter-search">			<label class="filter-search-lbl" for="filter_search"><?php echo JText::_('JSEARCH_FILTER_LABEL'); ?></label>			<input type="text" name="filter_search" id="filter_search" value="<?php echo $this->escape($this->state->get('filter.search')); ?>" title="<?php echo JText::_('COM_CONTENT_FILTER_SEARCH_DESC'); ?>" />			<button type="submit"><?php echo JText::_('JSEARCH_FILTER_SUBMIT'); ?></button>			<button type="button" onclick="document.id('filter_search').value='';this.form.submit();"><?php echo JText::_('JSEARCH_FILTER_CLEAR'); ?></button>		</div>		<div class="filter-select">			<label class="selectlabel" for="filter_published"><?php echo JText::_('JOPTION_SELECT_PUBLISHED'); ?></label>			<select name="filter_published" class="inputbox" id="filter_published">				<option value=""><?php echo JText::_('JOPTION_SELECT_PUBLISHED'); ?></option>				<?php echo JHtml::_('select.options', JHtml::_('jgrid.publishedOptions'), 'value', 'text', $this->state->get('filter.published'), true); ?>			</select>			<label class="selectlabel" for="filter_category_id"><?php echo JText::_('JOPTION_SELECT_CATEGORY'); ?></label>			<select name="filter_category_id" class="inputbox" id="filter_category_id">				<option value=""><?php echo JText::_('JOPTION_SELECT_CATEGORY'); ?></option>				<?php echo JHtml::_('select.options', JHtml::_('category.options', 'com_content'), 'value', 'text', $this->state->get('filter.category_id')); ?>			</select>			<label class="selectlabel" for="filter_level"><?php echo JText::_('JOPTION_SELECT_MAX_LEVELS'); ?></label>			<select name="filter_level" class="inputbox" id="filter_level">				<option value=""><?php echo JText::_('JOPTION_SELECT_MAX_LEVELS'); ?></option>				<?php echo JHtml::_('select.options', $this->f_levels, 'value', 'text', $this->state->get('filter.level')); ?>			</select>			<label class="selectlabel" for="filter_access"><?php echo JText::_('JOPTION_SELECT_ACCESS'); ?></label>			<select name="filter_access" class="inputbox" id="filter_access">				<option value=""><?php echo JText::_('JOPTION_SELECT_ACCESS');?></option>				<?php echo JHtml::_('select.options', JHtml::_('access.assetgroups'), 'value', 'text', $this->state->get('filter.access')); ?>			</select>			<label class="selectlabel" for="filter_language"><?php echo JText::_('JOPTION_SELECT_LANGUAGE'); ?></label>			<select name="filter_language" class="inputbox" id="filter_language">				<option value=""><?php echo JText::_('JOPTION_SELECT_LANGUAGE'); ?></option>				<?php echo JHtml::_('select.options', JHtml::_('contentlanguage.existing', true, true), 'value', 'text', $this->state->get('filter.language')); ?>			</select>			<button type="submit" id="filter-go">				<?php echo JText::_('JSUBMIT'); ?></button>		</div>	</fieldset>	<div class="clr"> </div>	<table class="adminlist">		<thead>			<tr>				<th class="checkmark-col">					<input type="checkbox" name="checkall-toggle" value="" title="<?php echo JText::_('JGLOBAL_CHECK_ALL'); ?>" onclick="Joomla.checkAll(this)" />				</th>				<th class="title">					<?php echo JHtml::_('grid.sort', 'JGLOBAL_TITLE', 'a.title', $listDirn, $listOrder); ?>				</th>				<th class="nowrap state-col">					<?php echo JHtml::_('grid.sort', 'JSTATUS', 'a.state', $listDirn, $listOrder); ?>				</th>				<th class="title category-col">					<?php echo JHtml::_('grid.sort', 'JCATEGORY', 'a.catid', $listDirn, $listOrder); ?>				</th>				<th class="nowrap ordering-col">					<?php echo JHtml::_('grid.sort', 'JGRID_HEADING_ORDERING', 'fp.ordering', $listDirn, $listOrder); ?>					<?php if ($canOrder && $saveOrder) :?>						<?php echo JHtml::_('grid.order', $this->items, 'filesave.png', 'featured.saveorder'); ?>					<?php endif; ?>				</th>				<th class="title access-col">					<?php echo JHtml::_('grid.sort', 'JGRID_HEADING_ACCESS', 'a.access', $listDirn, $listOrder); ?>				</th>				<th class="title created-by-col">					<?php echo JHtml::_('grid.sort', 'JGRID_HEADING_CREATED_BY', 'a.created_by', $listDirn, $listOrder); ?>				</th>				<th class="title date-col">					<?php echo JHtml::_('grid.sort', 'JDATE', 'a.created', $listDirn, $listOrder); ?>				</th>				<th class="hits-col">					<?php echo JHtml::_('grid.sort', 'JGLOBAL_HITS', 'a.hits', $listDirn, $listOrder); ?>				</th>				<th class="language-col">					<?php echo JHtml::_('grid.sort', 'JGRID_HEADING_LANGUAGE', 'language', $listDirn, $listOrder); ?>				</th>				<th class="nowrap id-col">					<?php echo JHtml::_('grid.sort', 'JGRID_HEADING_ID', 'a.id', $listDirn, $listOrder); ?>				</th>			</tr>		</thead>		<tbody>		<?php		foreach ($this->items as $i => $item) :			$item->max_ordering = 0; //??			$ordering   = ($listOrder == 'fp.ordering');			$assetId    = 'com_content.article.' . $item->id;			$canCreate  = $user->authorise('core.create',     'com_content.category.' . $item->catid);			$canEdit    = $user->authorise('core.edit',       'com_content.article.' . $item->id);			$canCheckin = $user->authorise('core.manage',     'com_checkin') || $item->checked_out == $user->get('id')|| $item->checked_out == 0;			$canChange  = $user->authorise('core.edit.state', 'com_content.article.' . $item->id) && $canCheckin;			?>			<tr class="row<?php echo $i % 2; ?>">				<th class="center">					<?php echo JHtml::_('grid.id', $i, $item->id); ?>				</th>				<td>					<?php if ($item->checked_out) : ?>						<?php echo JHtml::_('jgrid.checkedout', $i, $item->editor, $item->checked_out_time, 'featured.', $canCheckin); ?>					<?php endif; ?>					<?php if ($canEdit) : ?>					<a href="<?php echo JRoute::_('index.php?option=com_content&task=article.edit&return=featured&id='.$item->id);?>">						<?php echo $this->escape($item->title); ?></a>					<?php else : ?>						<?php echo $this->escape($item->title); ?>					<?php endif; ?>					<p class="smallsub">						<?php echo JText::sprintf('JGLOBAL_LIST_ALIAS', $this->escape($item->alias)); ?></p>				</td>				<td class="center">					<?php echo JHtml::_('jgrid.published', $item->state, $i, 'articles.', $canChange, 'cb', $item->publish_up, $item->publish_down); ?>				</td>				<td class="center">					<?php echo $this->escape($item->category_title); ?>				</td>				<td class="order">					<?php if ($canChange) : ?>						<?php if ($saveOrder) : ?>							<?php if ($listDirn == 'asc') : ?>								<span><?php echo $this->pagination->orderUpIcon($i, true, 'featured.orderup', 'JLIB_HTML_MOVE_UP', $ordering); ?></span>								<span><?php echo $this->pagination->orderDownIcon($i, $this->pagination->total, true, 'featured.orderdown', 'JLIB_HTML_MOVE_DOWN', $ordering); ?></span>							<?php elseif ($listDirn == 'desc') : ?>								<span><?php echo $this->pagination->orderUpIcon($i, true, 'featured.orderdown', 'JLIB_HTML_MOVE_UP', $ordering); ?></span>								<span><?php echo $this->pagination->orderDownIcon($i, $this->pagination->total, true, 'featured.orderup', 'JLIB_HTML_MOVE_DOWN', $ordering); ?></span>							<?php endif; ?>						<?php endif; ?>						<?php $disabled = $saveOrder ?  '' : 'disabled="disabled"'; ?>						<input type="text" name="order[]" value="<?php echo $item->ordering; ?>" <?php echo $disabled; ?> class="text-area-order" title="<?php echo $item->title; ?> order" />					<?php else : ?>						<?php echo $item->ordering; ?>					<?php endif; ?>				</td>				<td class="center">					<?php echo $this->escape($item->access_level); ?>				</td>				<td class="center">					<?php if ($item->created_by_alias) : ?>						<?php echo $this->escape($item->author_name); ?>						<p class="smallsub"> <?php echo JText::sprintf('JGLOBAL_LIST_ALIAS', $this->escape($item->created_by_alias)); ?></p>					<?php else : ?>						<?php echo $this->escape($item->author_name); ?>					<?php endif; ?>				</td>				<td class="center nowrap">					<?php echo JHtml::_('date', $item->created, JText::_('DATE_FORMAT_LC4')); ?>				</td>				<td class="center">					<?php echo (int) $item->hits; ?>				</td>				<td class="center">					<?php if ($item->language == '*') : ?>						<?php echo JText::alt('JALL', 'language'); ?>					<?php else : ?>						<?php echo $item->language_title ? $this->escape($item->language_title) : JText::_('JUNDEFINED'); ?>					<?php endif;?>				</td>				<td class="center">					<?php echo (int) $item->id; ?>				</td>			</tr>			<?php endforeach; ?>		</tbody>	</table><?php echo $this->pagination->getListFooter(); ?>	<input type="hidden" name="task" value="" />	<input type="hidden" name="boxchecked" value="0" />	<input type="hidden" name="filter_order" value="<?php echo $listOrder; ?>" />	<input type="hidden" name="filter_order_Dir" value="<?php echo $listDirn; ?>" />	<?php echo JHtml::_('form.token'); ?>	</div></form>
<?php/** * @package     Joomla.Administrator * @subpackage  com_config * * @copyright   Copyright (C) 2005 - 2013 Open Source Matters, Inc. All rights reserved. * @license     GNU General Public License version 2 or later; see LICENSE.txt */defined('_JEXEC') or die;?><fieldset class="form-vertical">	<legend><?php echo JText::_('COM_CONFIG_TEXT_FILTER_SETTINGS'); ?></legend>	<p><?php echo JText::_('COM_CONFIG_TEXT_FILTERS_DESC'); ?></p>	<?php foreach ($this->form->getFieldset('filters') as $field) : ?>		<div class="control-group">			<div class="control-label"><?php echo $field->label; ?></div>			<div class="controls"><?php echo $field->input; ?></div>		</div>	<?php endforeach; ?></fieldset>
<?php/** * @package     Joomla.Administrator * @subpackage  com_contact * * @copyright   Copyright (C) 2005 - 2013 Open Source Matters, Inc. All rights reserved. * @license     GNU General Public License version 2 or later; see LICENSE.txt */defined('_JEXEC') or die;/** * Controller for a single contact * * @package     Joomla.Administrator * @subpackage  com_contact * @since       1.6 */class ContactControllerContact extends JControllerForm{	/**	 * Method override to check if you can add a new record.	 *	 * @param   array  $data  An array of input data.	 *	 * @return  boolean	 *	 * @since   1.6	 */	protected function allowAdd($data = array())	{		$user = JFactory::getUser();		$categoryId = JArrayHelper::getValue($data, 'catid', $this->input->getInt('filter_category_id'), 'int');		$allow = null;		if ($categoryId)		{			// If the category has been passed in the URL check it.			$allow = $user->authorise('core.create', $this->option . '.category.' . $categoryId);		}		if ($allow === null)		{			// In the absense of better information, revert to the component permissions.			return parent::allowAdd($data);		}		else		{			return $allow;		}	}	/**	 * Method override to check if you can edit an existing record.	 *	 * @param   array   $data  An array of input data.	 * @param   string  $key   The name of the key for the primary key.	 *	 * @return  boolean	 *	 * @since   1.6	 */	protected function allowEdit($data = array(), $key = 'id')	{		$recordId = (int) isset($data[$key]) ? $data[$key] : 0;		$categoryId = 0;		if ($recordId)		{			$categoryId = (int) $this->getModel()->getItem($recordId)->catid;		}		if ($categoryId)		{			// The category has been set. Check the category permissions.			return JFactory::getUser()->authorise('core.edit', $this->option . '.category.' . $categoryId);		}		else		{			// Since there is no asset tracking, revert to the component permissions.			return parent::allowEdit($data, $key);		}	}	/**	 * Method to run batch operations.	 *	 * @param   object  $model  The model.	 *	 * @return  boolean   True if successful, false otherwise and internal error is set.	 *	 * @since   2.5	 */	public function batch($model = null)	{		JSession::checkToken() or jexit(JText::_('JINVALID_TOKEN'));		// Set the model		$model = $this->getModel('Contact', '', array());		// Preset the redirect		$this->setRedirect(JRoute::_('index.php?option=com_contact&view=contacts' . $this->getRedirectToListAppend(), false));		return parent::batch($model);	}	/**	 * Function that allows child controller access to model data after the data has been saved.	 *	 * @param   JModelLegacy  $model      The data model object.	 * @param   array         $validData  The validated data.	 *	 * @return  void	 * @since   3.1	 */	protected function postSaveHook(JModelLegacy $model, $validData = array())	{	}}
<?php/** * @package     Joomla.Platform * @subpackage  Form * * @copyright   Copyright (C) 2005 - 2013 Open Source Matters, Inc. All rights reserved. * @license     GNU General Public License version 2 or later; see LICENSE */defined('JPATH_PLATFORM') or die;/** * Form Rule class for the Joomla Platform. * * @package     Joomla.Platform * @subpackage  Form * @since       11.2 */class JFormRuleColor extends JFormRule{	/**	 * Method to test for a valid color in hexadecimal.	 *	 * @param   SimpleXMLElement  $element  The SimpleXMLElement object representing the <field /> tag for the form field object.	 * @param   mixed             $value    The form field value to validate.	 * @param   string            $group    The field name group control value. This acts as as an array container for the field.	 *                                      For example if the field has name="foo" and the group value is set to "bar" then the	 *                                      full field name would end up being "bar[foo]".	 * @param   JRegistry         $input    An optional JRegistry object with the entire data set to validate against the entire form.	 * @param   JForm             $form     The form object for which the field is being tested.	 *	 * @return  boolean  True if the value is valid, false otherwise.	 *	 * @since   11.2	 */	public function test(SimpleXMLElement $element, $value, $group = null, JRegistry $input = null, JForm $form = null)	{		$value = trim($value);		if (empty($value))		{			// A color field can't be empty, we default to black. This is the same as the HTML5 spec.			$value = '#000000';			return true;		}		if ($value[0] != '#')		{			return false;		}		// Remove the leading # if present to validate the numeric part		$value = ltrim($value, '#');		// The value must be 6 or 3 characters long		if (!((strlen($value) == 6 || strlen($value) == 3) && ctype_xdigit($value)))		{			return false;		}		// Prepend the # again		$value = '#' . $value;		return true;	}}
<?php/** * @package     Joomla.Site * @subpackage  com_tags * * @copyright   Copyright (C) 2005 - 2013 Open Source Matters, Inc. All rights reserved. * @license     GNU General Public License version 2 or later; see LICENSE.txt */defined('_JEXEC') or die;/** * This models supports retrieving a list of tags. * * @package     Joomla.Site * @subpackage  com_tags * @since       3.1 */class TagsModelTags extends JModelList{	/**	 * Model context string.	 *	 * @var    string	 * @since  3.1	 */	public $_context = 'com_tags.tags';	/**	 * Method to auto-populate the model state.	 *	 * Note. Calling getState in this method will result in recursion.	 *	 * @param   string  $ordering   An optional ordering field.	 * @param   string  $direction  An optional direction (asc|desc).	 *	 * @return  void	 *	 * @since   3.1	 */	protected function populateState($ordering = null, $direction = null)	{		$app = JFactory::getApplication('site');		// Load state from the request.		$pid = $app->input->getInt('parent_id');		$this->setState('tag.parent_id', $pid);		$language = $app->input->getString('tag_list_language_filter');		$this->setState('tag.language', $language);		$offset = $app->input->get('limitstart', 0, 'uint');		$this->setState('list.offset', $offset);		$app = JFactory::getApplication();		$params = $app->getParams();		$this->setState('params', $params);		$this->setState('list.limit', $params->get('maximum', 200));		$this->setState('filter.published', 1);		$this->setState('filter.access', true);		$user = JFactory::getUser();		if ((!$user->authorise('core.edit.state', 'com_tags')) &&  (!$user->authorise('core.edit', 'com_tags')))		{			$this->setState('filter.published', 1);		}		// Optional filter text		$itemid = $pid . ':' . $app->input->getInt('Itemid', 0);		$filterSearch = $app->getUserStateFromRequest('com_tags.tags.list.' . $itemid . '.filter_search', 'filter-search', '', 'string');		$this->setState('list.filter', $filterSearch);	}	/**	 * Redefine the function and add some properties to make the styling more easy	 *	 * @return  mixed  An array of data items on success, false on failure.	 *	 * @since   3.1	 */	public function getItems()	{		// Invoke the parent getItems method to get the main list		$items = parent::getItems();		if (!count($items))		{			$app = JFactory::getApplication();			$menu = $app->getMenu();			$active = $menu->getActive();			$params = new JRegistry;			if ($active)			{				$params->loadString($active->params);			}		}		return $items;	}	/**	 * Method to build an SQL query to load the list data.	 *	 * @return  string  An SQL query	 *	 * @since   1.6	 */	protected function getListQuery()	{		$app = JFactory::getApplication('site');		$user	= JFactory::getUser();		$groups	= implode(',', $user->getAuthorisedViewLevels());		$pid = $this->getState('tag.parent_id');		$orderby = $this->state->params->get('all_tags_orderby', 'title');		$orderDirection = $this->state->params->get('all_tags_orderby_direction', 'ASC');		$language = $this->getState('tag.language');		// Create a new query object.		$db		= $this->getDbo();		$query	= $db->getQuery(true);		// Select required fields from the tags.		$query->select('a.*')			->from($db->quoteName('#__tags') . ' AS a')			->where($db->quoteName('a.access') . ' IN (' . $groups . ')');		if (!empty($pid))		{			$query->where($db->quoteName('a.parent_id') . ' = ' . $pid);		}		// Exclude the root.		$query->where($db->quoteName('a.parent_id') . ' <> 0');		// Optionally filter on language		if (empty($language))		{			$language = JComponentHelper::getParams('com_tags')->get('tag_list_language_filter', 'all');		}		if ($language != 'all')		{			if ($language == 'current_language')			{				$language = JHelperContent::getCurrentLanguage();			}			$query->where($db->quoteName('language') . ' IN (' . $db->quote($language) . ', ' . $db->quote('*') . ')');		}		// List state information		$format = $app->input->getWord('format');		if ($format == 'feed')		{			$limit = $app->getCfg('feed_limit');		}		else		{			if ($this->state->params->get('show_pagination_limit'))			{				$limit = $app->getUserStateFromRequest('global.list.limit', 'limit', $app->getCfg('list_limit'), 'uint');			}			else			{				$limit = $this->state->params->get('maximum', 20);			}		}		$this->setState('list.limit', $limit);		$offset = $app->input->get('limitstart', 0, 'uint');		$this->setState('list.start', $offset);		// Optionally filter on entered value		if ($this->state->get('list.filter'))		{			$query->where($this->_db->quoteName('a.title') . ' LIKE ' . $this->_db->quote('%' . $this->state->get('list.filter') . '%'));		}		$query->order($db->quoteName($orderby) . ' ' . $orderDirection . ', a.title ASC');		return $query;	}}
<?php/** * @package     Joomla.Installation * @subpackage  Controller * * @copyright   Copyright (C) 2005 - 2013 Open Source Matters, Inc. All rights reserved. * @license     GNU General Public License version 2 or later; see LICENSE.txt */defined('_JEXEC') or die;/** * Controller class to write the config file for the Joomla Installer. * * @package     Joomla.Installation * @subpackage  Controller * @since       3.1 */class InstallationControllerInstallConfig extends JControllerBase{	/**	 * Execute the controller.	 *	 * @return  void	 *	 * @since   3.1	 */	public function execute()	{		// Get the application		/* @var InstallationApplicationWeb $app */		$app = $this->getApplication();		// Check for request forgeries.		JSession::checkToken() or $app->sendJsonResponse(new Exception(JText::_('JINVALID_TOKEN'), 403));		// Get the setup model.		$model = new InstallationModelSetup;		// Get the options from the session		$options = $model->getOptions();		// Get the database model.		$configuration = new InstallationModelConfiguration;		// Attempt to setup the configuration.		$return = $configuration->setup($options);		$r = new stdClass;		$r->view = 'install';		// Check if the database was initialised		if (!$return)		{			$r->view = 'database';		}		$app->sendJsonResponse($r);	}}
<?php/** * @package     Joomla.Administrator * @subpackage  com_templates * * @copyright   Copyright (C) 2005 - 2013 Open Source Matters, Inc. All rights reserved. * @license     GNU General Public License version 2 or later; see LICENSE.txt */defined('_JEXEC') or die;JHtml::addIncludePath(JPATH_COMPONENT.'/helpers/html');JHtml::_('behavior.tooltip');JHtml::_('behavior.formvalidation');JHtml::_('behavior.keepalive');?><script type="text/javascript">	Joomla.submitbutton = function(task)	{		if (task == 'source.cancel' || document.formvalidator.isValid(document.id('source-form')))		{			<?php echo $this->form->getField('source')->save(); ?>			Joomla.submitform(task, document.getElementById('source-form'));		}	}</script><form action="<?php echo JRoute::_('index.php?option=com_templates&layout=edit'); ?>" method="post" name="adminForm" id="source-form" class="form-validate">	<?php if ($this->ftp) : ?>		<?php echo $this->loadTemplate('ftp'); ?>	<?php endif; ?>	<fieldset class="adminform">		<legend><?php echo JText::sprintf('COM_TEMPLATES_TEMPLATE_FILENAME', $this->source->filename, $this->template->element); ?></legend>		<?php echo $this->form->getLabel('source'); ?>		<div class="clr"></div>		<div class="editor-border">		<?php echo $this->form->getInput('source'); ?>		</div>		<input type="hidden" name="task" value="" />		<?php echo JHtml::_('form.token'); ?>	</fieldset>	<?php echo $this->form->getInput('extension_id'); ?>	<?php echo $this->form->getInput('filename'); ?></form>
<?php/** * @package     Joomla.Administrator * @subpackage  com_menus * * @copyright   Copyright (C) 2005 - 2013 Open Source Matters, Inc. All rights reserved. * @license     GNU General Public License version 2 or later; see LICENSE.txt */defined('_JEXEC') or die;/** * The Menu Item Controller * * @package     Joomla.Administrator * @subpackage  com_menus * @since       1.6 */class MenusControllerItems extends JControllerAdmin{	public function __construct($config = array())	{		parent::__construct($config);		$this->registerTask('unsetDefault',	'setDefault');	}	/**	 * Proxy for getModel	 * @since   1.6	 */	public function getModel($name = 'Item', $prefix = 'MenusModel', $config = array())	{		return parent::getModel($name, $prefix, array('ignore_request' => true));	}	/**	 * Rebuild the nested set tree.	 *	 * @return  bool	False on failure or error, true on success.	 * @since   1.6	 */	public function rebuild()	{		JSession::checkToken() or jexit(JText::_('JINVALID_TOKEN'));		$this->setRedirect('index.php?option=com_menus&view=items');		$model = $this->getModel();		if ($model->rebuild())		{			// Reorder succeeded.			$this->setMessage(JText::_('COM_MENUS_ITEMS_REBUILD_SUCCESS'));			return true;		}		else		{			// Rebuild failed.			$this->setMessage(JText::sprintf('COM_MENUS_ITEMS_REBUILD_FAILED'));			return false;		}	}	public function saveorder()	{		JSession::checkToken() or jexit(JText::_('JINVALID_TOKEN'));		// Get the arrays from the Request		$order = $this->input->post->get('order', null, 'array');		$originalOrder = explode(',', $this->input->getString('original_order_values'));		// Make sure something has changed		if (!($order === $originalOrder))		{			parent::saveorder();		}		else		{			// Nothing to reorder			$this->setRedirect(JRoute::_('index.php?option='.$this->option.'&view='.$this->view_list, false));			return true;		}	}	/**	 * Method to set the home property for a list of items	 *	 * @since   1.6	 */	public function setDefault()	{		// Check for request forgeries		JSession::checkToken('request') or die(JText::_('JINVALID_TOKEN'));		// Get items to publish from the request.		$cid   = $this->input->get('cid', array(), 'array');		$data  = array('setDefault' => 1, 'unsetDefault' => 0);		$task  = $this->getTask();		$value = JArrayHelper::getValue($data, $task, 0, 'int');		if (empty($cid))		{			JError::raiseWarning(500, JText::_($this->text_prefix.'_NO_ITEM_SELECTED'));		}		else		{			// Get the model.			$model = $this->getModel();			// Make sure the item ids are integers			JArrayHelper::toInteger($cid);			// Publish the items.			if (!$model->setHome($cid, $value))			{				JError::raiseWarning(500, $model->getError());			} else {				if ($value == 1)				{					$ntext = 'COM_MENUS_ITEMS_SET_HOME';				}				else {					$ntext = 'COM_MENUS_ITEMS_UNSET_HOME';				}				$this->setMessage(JText::plural($ntext, count($cid)));			}		}		$this->setRedirect(JRoute::_('index.php?option='.$this->option.'&view='.$this->view_list, false));	}	/**	 * Method to save the submitted ordering values for records via AJAX.	 *	 * @return  void	 *	 * @since   3.0	 */	public function saveOrderAjax()	{		JSession::checkToken() or jexit(JText::_('JINVALID_TOKEN'));		// Get the arrays from the Request		$pks   = $this->input->post->get('cid', null, 'array');		$order = $this->input->post->get('order', null, 'array');		$originalOrder = explode(',', $this->input->getString('original_order_values'));		// Make sure something has changed		if (!($order === $originalOrder))		{			// Get the model			$model = $this->getModel();			// Save the ordering			$return = $model->saveorder($pks, $order);			if ($return)			{				echo "1";			}		}		// Close the application		JFactory::getApplication()->close();	}}
<?php/** * @package     Joomla.Administrator * @subpackage  com_plugins * * @copyright   Copyright (C) 2005 - 2013 Open Source Matters, Inc. All rights reserved. * @license     GNU General Public License version 2 or later; see LICENSE.txt */defined('_JEXEC') or die;/** * Plugins component helper. * * @package     Joomla.Administrator * @subpackage  com_plugins * @since       1.6 */class PluginsHelper{	public static $extension = 'com_plugins';	/**	 * Configure the Linkbar.	 *	 * @param   string    The name of the active view.	 */	public static function addSubmenu($vName)	{		// No submenu for this component.	}	/**	 * Gets a list of the actions that can be performed.	 *	 * @return  JObject	 */	public static function getActions()	{		$user = JFactory::getUser();		$result = new JObject;		$assetName = 'com_plugins';		$actions = JAccess::getActions($assetName);		foreach ($actions as $action)		{			$result->set($action->name, $user->authorise($action->name, $assetName));		}		return $result;	}	/**	 * Returns an array of standard published state filter options.	 *	 * @return  string    The HTML code for the select tag	 */	public static function publishedOptions()	{		// Build the active state filter options.		$options = array();		$options[] = JHtml::_('select.option', '1', 'JENABLED');		$options[] = JHtml::_('select.option', '0', 'JDISABLED');		return $options;	}	/**	 * Returns an array of standard published state filter options.	 *	 * @return  string    The HTML code for the select tag	 */	public static function folderOptions()	{		$db = JFactory::getDbo();		$query = $db->getQuery(true)			->select('DISTINCT(folder) AS value, folder AS text')			->from('#__extensions')			->where($db->quoteName('type') . ' = ' . $db->quote('plugin'))			->order('folder');		$db->setQuery($query);		try		{			$options = $db->loadObjectList();		}		catch (RuntimeException $e)		{			JError::raiseWarning(500, $e->getMessage());		}		return $options;	}	public function parseXMLTemplateFile($templateBaseDir, $templateDir)	{		$data = new JObject;		// Check of the xml file exists		$filePath = JPath::clean($templateBaseDir . '/templates/' . $templateDir . '/templateDetails.xml');		if (is_file($filePath))		{			$xml = JInstaller::parseXMLInstallFile($filePath);			if ($xml['type'] != 'template')			{				return false;			}			foreach ($xml as $key => $value)			{				$data->set($key, $value);			}		}		return $data;	}}
<?php/** * @package     Joomla.Platform * @subpackage  Table * * @copyright   Copyright (C) 2005 - 2013 Open Source Matters, Inc. All rights reserved. * @license     GNU General Public License version 2 or later; see LICENSE */defined('JPATH_PLATFORM') or die;/** * Table class supporting modified pre-order tree traversal behavior. * * @package     Joomla.Platform * @subpackage  Table * @link        http://docs.joomla.org/JTableAsset * @since       11.1 */class JTableAsset extends JTableNested{	/**	 * The primary key of the asset.	 *	 * @var    integer	 * @since  11.1	 */	public $id = null;	/**	 * The unique name of the asset.	 *	 * @var    string	 * @since  11.1	 */	public $name = null;	/**	 * The human readable title of the asset.	 *	 * @var    string	 * @since  11.1	 */	public $title = null;	/**	 * The rules for the asset stored in a JSON string	 *	 * @var    string	 * @since  11.1	 */	public $rules = null;	/**	 * Constructor	 *	 * @param   JDatabaseDriver  $db  Database driver object.	 *	 * @since   11.1	 */	public function __construct($db)	{		parent::__construct('#__assets', 'id', $db);	}	/**	 * Method to load an asset by its name.	 *	 * @param   string  $name  The name of the asset.	 *	 * @return  integer	 *	 * @since   11.1	 */	public function loadByName($name)	{		// Get the JDatabaseQuery object		$query = $this->_db->getQuery(true);		// Get the asset id for the asset.		$query->select($this->_db->quoteName('id'))			->from($this->_db->quoteName('#__assets'))			->where($this->_db->quoteName('name') . ' = ' . $this->_db->quote($name));		$this->_db->setQuery($query);		$assetId = (int) $this->_db->loadResult();		if (empty($assetId))		{			return false;		}		return $this->load($assetId);	}	/**	 * Assert that the nested set data is valid.	 *	 * @return  boolean  True if the instance is sane and able to be stored in the database.	 *	 * @link    http://docs.joomla.org/JTable/check	 * @since   11.1	 */	public function check()	{		$this->parent_id = (int) $this->parent_id;		// JTableNested does not allow parent_id = 0, override this.		if ($this->parent_id > 0)		{			// Get the JDatabaseQuery object			$query = $this->_db->getQuery(true)				->select('COUNT(id)')				->from($this->_db->quoteName($this->_tbl))				->where($this->_db->quoteName('id') . ' = ' . $this->parent_id);			$this->_db->setQuery($query);			if ($this->_db->loadResult())			{				return true;			}			else			{				$this->setError('Invalid Parent ID');				return false;			}		}		return true;	}}
<?php/** * @package     Joomla.Administrator * @subpackage  com_menus * * @copyright   Copyright (C) 2005 - 2013 Open Source Matters, Inc. All rights reserved. * @license     GNU General Public License version 2 or later; see LICENSE.txt */defined('_JEXEC') or die;$options = array(	JHtml::_('select.option', 'c', JText::_('JLIB_HTML_BATCH_COPY')),	JHtml::_('select.option', 'm', JText::_('JLIB_HTML_BATCH_MOVE')));$published = $this->state->get('filter.published');?><div class="modal hide fade" id="collapseModal">	<div class="modal-header">		<button type="button" class="close" data-dismiss="modal">x</button>		<h3><?php echo JText::_('COM_MENUS_BATCH_OPTIONS');?></h3>	</div>	<div class="modal-body">		<p><?php echo JText::_('COM_MENUS_BATCH_TIP'); ?></p>		<div class="control-group">			<div class="controls">				<?php echo JHtml::_('batch.access');?>			</div>		</div>		<div class="control-group">			<div class="controls">				<?php echo JHtml::_('batch.language'); ?>			</div>		</div>		<?php if ($published >= 0)		{		?>			<div id="batch-choose-action" class="combo control-group">				<label id="batch-choose-action-lbl" class="control-label" for="batch-choose-action">					<?php echo JText::_('COM_MENUS_BATCH_MENU_LABEL'); ?>				</label>				<div class="controls">					<select name="batch[menu_id]" class="inputbox" id="batch-menu-id">						<option value=""><?php echo JText::_('JSELECT') ?></option>						<?php echo JHtml::_('select.options', JHtml::_('menu.menuitems', array('published' => $published)));?>					</select>				</div>			</div>			<div id="batch-copy-move" class="control-group radio">				<?php echo JHtml::_('select.radiolist', $options, 'batch[move_copy]', '', 'value', 'text', 'm'); ?>			</div>		<?php		}		?>	</div>	<div class="modal-footer">		<button class="btn" type="button" onclick="document.id('batch-menu-id').value='';document.id('batch-access').value='';document.id('batch-language-id').value=''" data-dismiss="modal">			<?php echo JText::_('JCANCEL'); ?>		</button>		<button class="btn btn-primary" type="submit" onclick="Joomla.submitbutton('item.batch');">			<?php echo JText::_('JGLOBAL_BATCH_PROCESS'); ?>		</button>	</div></div>
<?php/** * @package     Joomla.Administrator * @subpackage  com_installer * * @copyright   Copyright (C) 2005 - 2013 Open Source Matters, Inc. All rights reserved. * @license     GNU General Public License version 2 or later; see LICENSE.txt */defined('_JEXEC') or die;?><script type="text/javascript">	Joomla.submitbutton = function(pressbutton)	{		var form = document.getElementById('adminForm');		// do field validation		if (form.install_package.value == ""){			alert("<?php echo JText::_('COM_INSTALLER_MSG_INSTALL_PLEASE_SELECT_A_PACKAGE', true); ?>");		}		else		{			form.installtype.value = 'upload';			form.submit();		}	}	Joomla.submitbutton3 = function(pressbutton)	{		var form = document.getElementById('adminForm');		// do field validation		if (form.install_directory.value == ""){			alert("<?php echo JText::_('COM_INSTALLER_MSG_INSTALL_PLEASE_SELECT_A_DIRECTORY', true); ?>");		}		else		{			form.installtype.value = 'folder';			form.submit();		}	}	Joomla.submitbutton4 = function(pressbutton)	{		var form = document.getElementById('adminForm');		// do field validation		if (form.install_url.value == "" || form.install_url.value == "http://"){			alert("<?php echo JText::_('COM_INSTALLER_MSG_INSTALL_ENTER_A_URL', true); ?>");		}		else		{			form.installtype.value = 'url';			form.submit();		}	}</script><div id="installer-install"><form enctype="multipart/form-data" action="<?php echo JRoute::_('index.php?option=com_installer&view=install');?>" method="post" name="adminForm" id="adminForm" class="form-horizontal">	<?php if (!empty( $this->sidebar)) : ?>		<div id="j-sidebar-container" class="span2">			<?php echo $this->sidebar; ?>		</div>		<div id="j-main-container" class="span10">	<?php else : ?>		<div id="j-main-container">	<?php endif;?>	<!-- Render messages set by extension install scripts here -->	<?php if ($this->showMessage) : ?>		<?php echo $this->loadTemplate('message'); ?>	<?php endif; ?>	<?php echo JHtml::_('bootstrap.startTabSet', 'myTab', array('active' => 'upload')); ?>		<?php echo JHtml::_('bootstrap.addTab', 'myTab', 'upload', JText::_('COM_INSTALLER_UPLOAD_PACKAGE_FILE', true)); ?>			<fieldset class="uploadform">				<legend><?php echo JText::_('COM_INSTALLER_UPLOAD_PACKAGE_FILE'); ?></legend>				<div class="control-group">					<label for="install_package" class="control-label"><?php echo JText::_('COM_INSTALLER_PACKAGE_FILE'); ?></label>					<div class="controls">						<input class="input_box" id="install_package" name="install_package" type="file" size="57" />					</div>				</div>				<div class="form-actions">					<input class="btn btn-primary" type="button" value="<?php echo JText::_('COM_INSTALLER_UPLOAD_AND_INSTALL'); ?>" onclick="Joomla.submitbutton()" />				</div>			</fieldset>		<?php echo JHtml::_('bootstrap.endTab'); ?>		<?php echo JHtml::_('bootstrap.addTab', 'myTab', 'directory', JText::_('COM_INSTALLER_INSTALL_FROM_DIRECTORY', true)); ?>			<fieldset class="uploadform">				<legend><?php echo JText::_('COM_INSTALLER_INSTALL_FROM_DIRECTORY'); ?></legend>				<div class="control-group">					<label for="install_directory" class="control-label"><?php echo JText::_('COM_INSTALLER_INSTALL_DIRECTORY'); ?></label>					<div class="controls">						<input type="text" id="install_directory" name="install_directory" class="span5 input_box" size="70" value="<?php echo $this->state->get('install.directory'); ?>" />					</div>				</div>				<div class="form-actions">					<input type="button" class="btn btn-primary" value="<?php echo JText::_('COM_INSTALLER_INSTALL_BUTTON'); ?>" onclick="Joomla.submitbutton3()" />				</div>			</fieldset>		<?php echo JHtml::_('bootstrap.endTab'); ?>		<?php echo JHtml::_('bootstrap.addTab', 'myTab', 'url', JText::_('COM_INSTALLER_INSTALL_FROM_URL', true)); ?>			<fieldset class="uploadform">				<legend><?php echo JText::_('COM_INSTALLER_INSTALL_FROM_URL'); ?></legend>				<div class="control-group">					<label for="install_url" class="control-label"><?php echo JText::_('COM_INSTALLER_INSTALL_URL'); ?></label>					<div class="controls">						<input type="text" id="install_url" name="install_url" class="span5 input_box" size="70" value="http://" />					</div>				</div>				<div class="form-actions">					<input type="button" class="btn btn-primary" value="<?php echo JText::_('COM_INSTALLER_INSTALL_BUTTON'); ?>" onclick="Joomla.submitbutton4()" />				</div>			</fieldset>		<?php echo JHtml::_('bootstrap.endTab'); ?>		<?php if ($this->ftp) : ?>			<?php echo JHtml::_('bootstrap.addTab', 'myTab', 'ftp', JText::_('COM_INSTALLER_MSG_DESCFTPTITLE', true)); ?>				<?php echo $this->loadTemplate('ftp'); ?>			<?php echo JHtml::_('bootstrap.endTab'); ?>		<?php endif; ?>	<input type="hidden" name="type" value="" />	<input type="hidden" name="installtype" value="upload" />	<input type="hidden" name="task" value="install.install" />	<?php echo JHtml::_('form.token'); ?>	<?php echo JHtml::_('bootstrap.endTabSet'); ?></form></div>
<?php/** * @package     Joomla.Platform * @subpackage  Filter * * @copyright   Copyright (C) 2005 - 2013 Open Source Matters, Inc. All rights reserved. * @license     GNU General Public License version 2 or later; see LICENSE */defined('JPATH_PLATFORM') or die;/** * JFilterInput is a class for filtering input from any data source * * Forked from the php input filter library by: Daniel Morris <dan@rootcube.com> * Original Contributors: Gianpaolo Racca, Ghislain Picard, Marco Wandschneider, Chris Tobin and Andrew Eddie. * * @package     Joomla.Platform * @subpackage  Filter * @since       11.1 */class JFilterInput{	/**	 * @var    array  A container for JFilterInput instances.	 * @since  11.3	 */	protected static $instances = array();	/**	 * @var    array  An array of permitted tags.	 * @since  11.1	 */	public $tagsArray;	/**	 * @var    array  An array of permitted tag attributes.	 * @since  11.1	 */	public $attrArray;	/**	 * @var    integer  Method for tags: WhiteList method = 0 (default), BlackList method = 1	 * @since  11.1	 */	public $tagsMethod;	/**	 * @var    integer  Method for attributes: WhiteList method = 0 (default), BlackList method = 1	 * @since  11.1	 */	public $attrMethod;	/**	 * @var    integer  Only auto clean essentials = 0, Allow clean blacklisted tags/attr = 1	 * @since  11.1	 */	public $xssAuto;	/**	 * @var    array  A list of the default blacklisted tags.	 * @since  11.1	 */	public $tagBlacklist = array(		'applet',		'body',		'bgsound',		'base',		'basefont',		'embed',		'frame',		'frameset',		'head',		'html',		'id',		'iframe',		'ilayer',		'layer',		'link',		'meta',		'name',		'object',		'script',		'style',		'title',		'xml'	);	/**	 * @var    array     A list of the default blacklisted tag attributes.  All event handlers implicit.	 * @since   11.1	 */	public $attrBlacklist = array(		'action',		'background',		'codebase',		'dynsrc',		'lowsrc'	);	/**	 * Constructor for inputFilter class. Only first parameter is required.	 *	 * @param   array    $tagsArray   List of user-defined tags	 * @param   array    $attrArray   List of user-defined attributes	 * @param   integer  $tagsMethod  WhiteList method = 0, BlackList method = 1	 * @param   integer  $attrMethod  WhiteList method = 0, BlackList method = 1	 * @param   integer  $xssAuto     Only auto clean essentials = 0, Allow clean blacklisted tags/attr = 1	 *	 * @since   11.1	 */	public function __construct($tagsArray = array(), $attrArray = array(), $tagsMethod = 0, $attrMethod = 0, $xssAuto = 1)	{		// Make sure user defined arrays are in lowercase		$tagsArray = array_map('strtolower', (array) $tagsArray);		$attrArray = array_map('strtolower', (array) $attrArray);		// Assign member variables		$this->tagsArray = $tagsArray;		$this->attrArray = $attrArray;		$this->tagsMethod = $tagsMethod;		$this->attrMethod = $attrMethod;		$this->xssAuto = $xssAuto;	}	/**	 * Returns an input filter object, only creating it if it doesn't already exist.	 *	 * @param   array    $tagsArray   List of user-defined tags	 * @param   array    $attrArray   List of user-defined attributes	 * @param   integer  $tagsMethod  WhiteList method = 0, BlackList method = 1	 * @param   integer  $attrMethod  WhiteList method = 0, BlackList method = 1	 * @param   integer  $xssAuto     Only auto clean essentials = 0, Allow clean blacklisted tags/attr = 1	 *	 * @return  JFilterInput  The JFilterInput object.	 *	 * @since   11.1	 */	public static function &getInstance($tagsArray = array(), $attrArray = array(), $tagsMethod = 0, $attrMethod = 0, $xssAuto = 1)	{		$sig = md5(serialize(array($tagsArray, $attrArray, $tagsMethod, $attrMethod, $xssAuto)));		if (empty(self::$instances[$sig]))		{			self::$instances[$sig] = new JFilterInput($tagsArray, $attrArray, $tagsMethod, $attrMethod, $xssAuto);		}		return self::$instances[$sig];	}	/**	 * Method to be called by another php script. Processes for XSS and	 * specified bad code.	 *	 * @param   mixed   $source  Input string/array-of-string to be 'cleaned'	 * @param   string  $type    Return type for the variable (INT, UINT, FLOAT, BOOLEAN, WORD, ALNUM, CMD, BASE64, STRING, ARRAY, PATH, NONE)	 *	 * @return  mixed  'Cleaned' version of input parameter	 *	 * @since   11.1	 */	public function clean($source, $type = 'string')	{		// Handle the type constraint		switch (strtoupper($type))		{			case 'INT':			case 'INTEGER':				// Only use the first integer value				preg_match('/-?[0-9]+/', (string) $source, $matches);				$result = @ (int) $matches[0];				break;			case 'UINT':				// Only use the first integer value				preg_match('/-?[0-9]+/', (string) $source, $matches);				$result = @ abs((int) $matches[0]);				break;			case 'FLOAT':			case 'DOUBLE':				// Only use the first floating point value				preg_match('/-?[0-9]+(\.[0-9]+)?/', (string) $source, $matches);				$result = @ (float) $matches[0];				break;			case 'BOOL':			case 'BOOLEAN':				$result = (bool) $source;				break;			case 'WORD':				$result = (string) preg_replace('/[^A-Z_]/i', '', $source);				break;			case 'ALNUM':				$result = (string) preg_replace('/[^A-Z0-9]/i', '', $source);				break;			case 'CMD':				$result = (string) preg_replace('/[^A-Z0-9_\.-]/i', '', $source);				$result = ltrim($result, '.');				break;			case 'BASE64':				$result = (string) preg_replace('/[^A-Z0-9\/+=]/i', '', $source);				break;			case 'STRING':				$result = (string) $this->_remove($this->_decode((string) $source));				break;			case 'HTML':				$result = (string) $this->_remove((string) $source);				break;			case 'ARRAY':				$result = (array) $source;				break;			case 'PATH':				$pattern = '/^[A-Za-z0-9_-]+[A-Za-z0-9_\.-]*([\\\\\/][A-Za-z0-9_-]+[A-Za-z0-9_\.-]*)*$/';				preg_match($pattern, (string) $source, $matches);				$result = @ (string) $matches[0];				break;			case 'USERNAME':				$result = (string) preg_replace('/[\x00-\x1F\x7F<>"\'%&]/', '', $source);				break;			case 'RAW':				$result = $source;				break;			default:				// Are we dealing with an array?				if (is_array($source))				{					foreach ($source as $key => $value)					{						// Filter element for XSS and other 'bad' code etc.						if (is_string($value))						{							$source[$key] = $this->_remove($this->_decode($value));						}					}					$result = $source;				}				else				{					// Or a string?					if (is_string($source) && !empty($source))					{						// Filter source for XSS and other 'bad' code etc.						$result = $this->_remove($this->_decode($source));					}					else					{						// Not an array or string.. return the passed parameter						$result = $source;					}				}				break;		}		return $result;	}	/**	 * Function to determine if contents of an attribute are safe	 *	 * @param   array  $attrSubSet  A 2 element array for attribute's name, value	 *	 * @return  boolean  True if bad code is detected	 *	 * @since   11.1	 */	public static function checkAttribute($attrSubSet)	{		$attrSubSet[0] = strtolower($attrSubSet[0]);		$attrSubSet[1] = strtolower($attrSubSet[1]);		return (((strpos($attrSubSet[1], 'expression') !== false) && ($attrSubSet[0]) == 'style') || (strpos($attrSubSet[1], 'javascript:') !== false) ||			(strpos($attrSubSet[1], 'behaviour:') !== false) || (strpos($attrSubSet[1], 'vbscript:') !== false) ||			(strpos($attrSubSet[1], 'mocha:') !== false) || (strpos($attrSubSet[1], 'livescript:') !== false));	}	/**	 * Internal method to iteratively remove all unwanted tags and attributes	 *	 * @param   string  $source  Input string to be 'cleaned'	 *	 * @return  string  'Cleaned' version of input parameter	 *	 * @since   11.1	 */	protected function _remove($source)	{		$loopCounter = 0;		// Iteration provides nested tag protection		while ($source != $this->_cleanTags($source))		{			$source = $this->_cleanTags($source);			$loopCounter++;		}		return $source;	}	/**	 * Internal method to strip a string of certain tags	 *	 * @param   string  $source  Input string to be 'cleaned'	 *	 * @return  string  'Cleaned' version of input parameter	 *	 * @since   11.1	 */	protected function _cleanTags($source)	{		// First, pre-process this for illegal characters inside attribute values		$source = $this->_escapeAttributeValues($source);		// In the beginning we don't really have a tag, so everything is postTag		$preTag = null;		$postTag = $source;		$currentSpace = false;		// Setting to null to deal with undefined variables		$attr = '';		// Is there a tag? If so it will certainly start with a '<'.		$tagOpen_start = strpos($source, '<');		while ($tagOpen_start !== false)		{			// Get some information about the tag we are processing			$preTag .= substr($postTag, 0, $tagOpen_start);			$postTag = substr($postTag, $tagOpen_start);			$fromTagOpen = substr($postTag, 1);			$tagOpen_end = strpos($fromTagOpen, '>');			// Check for mal-formed tag where we have a second '<' before the first '>'			$nextOpenTag = (strlen($postTag) > $tagOpen_start) ? strpos($postTag, '<', $tagOpen_start + 1) : false;			if (($nextOpenTag !== false) && ($nextOpenTag < $tagOpen_end))			{				// At this point we have a mal-formed tag -- remove the offending open				$postTag = substr($postTag, 0, $tagOpen_start) . substr($postTag, $tagOpen_start + 1);				$tagOpen_start = strpos($postTag, '<');				continue;			}			// Let's catch any non-terminated tags and skip over them			if ($tagOpen_end === false)			{				$postTag = substr($postTag, $tagOpen_start + 1);				$tagOpen_start = strpos($postTag, '<');				continue;			}			// Do we have a nested tag?			$tagOpen_nested = strpos($fromTagOpen, '<');			if (($tagOpen_nested !== false) && ($tagOpen_nested < $tagOpen_end))			{				$preTag .= substr($postTag, 0, ($tagOpen_nested + 1));				$postTag = substr($postTag, ($tagOpen_nested + 1));				$tagOpen_start = strpos($postTag, '<');				continue;			}			// Let's get some information about our tag and setup attribute pairs			$tagOpen_nested = (strpos($fromTagOpen, '<') + $tagOpen_start + 1);			$currentTag = substr($fromTagOpen, 0, $tagOpen_end);			$tagLength = strlen($currentTag);			$tagLeft = $currentTag;			$attrSet = array();			$currentSpace = strpos($tagLeft, ' ');			// Are we an open tag or a close tag?			if (substr($currentTag, 0, 1) == '/')			{				// Close Tag				$isCloseTag = true;				list ($tagName) = explode(' ', $currentTag);				$tagName = substr($tagName, 1);			}			else			{				// Open Tag				$isCloseTag = false;				list ($tagName) = explode(' ', $currentTag);			}			/*			 * Exclude all "non-regular" tagnames			 * OR no tagname			 * OR remove if xssauto is on and tag is blacklisted			 */			if ((!preg_match("/^[a-z][a-z0-9]*$/i", $tagName)) || (!$tagName) || ((in_array(strtolower($tagName), $this->tagBlacklist)) && ($this->xssAuto)))			{				$postTag = substr($postTag, ($tagLength + 2));				$tagOpen_start = strpos($postTag, '<');				// Strip tag				continue;			}			/*			 * Time to grab any attributes from the tag... need this section in			 * case attributes have spaces in the values.			 */			while ($currentSpace !== false)			{				$attr = '';				$fromSpace = substr($tagLeft, ($currentSpace + 1));				$nextEqual = strpos($fromSpace, '=');				$nextSpace = strpos($fromSpace, ' ');				$openQuotes = strpos($fromSpace, '"');				$closeQuotes = strpos(substr($fromSpace, ($openQuotes + 1)), '"') + $openQuotes + 1;				$startAtt = '';				$startAttPosition = 0;				// Find position of equal and open quotes ignoring				if (preg_match('#\s*=\s*\"#', $fromSpace, $matches, PREG_OFFSET_CAPTURE))				{					$startAtt = $matches[0][0];					$startAttPosition = $matches[0][1];					$closeQuotes = strpos(substr($fromSpace, ($startAttPosition + strlen($startAtt))), '"') + $startAttPosition + strlen($startAtt);					$nextEqual = $startAttPosition + strpos($startAtt, '=');					$openQuotes = $startAttPosition + strpos($startAtt, '"');					$nextSpace = strpos(substr($fromSpace, $closeQuotes), ' ') + $closeQuotes;				}				// Do we have an attribute to process? [check for equal sign]				if ($fromSpace != '/' && (($nextEqual && $nextSpace && $nextSpace < $nextEqual) || !$nextEqual))				{					if (!$nextEqual)					{						$attribEnd = strpos($fromSpace, '/') - 1;					}					else					{						$attribEnd = $nextSpace - 1;					}					// If there is an ending, use this, if not, do not worry.					if ($attribEnd > 0)					{						$fromSpace = substr($fromSpace, $attribEnd + 1);					}				}				if (strpos($fromSpace, '=') !== false)				{					// If the attribute value is wrapped in quotes we need to grab the substring from					// the closing quote, otherwise grab until the next space.					if (($openQuotes !== false) && (strpos(substr($fromSpace, ($openQuotes + 1)), '"') !== false))					{						$attr = substr($fromSpace, 0, ($closeQuotes + 1));					}					else					{						$attr = substr($fromSpace, 0, $nextSpace);					}				}				// No more equal signs so add any extra text in the tag into the attribute array [eg. checked]				else				{					if ($fromSpace != '/')					{						$attr = substr($fromSpace, 0, $nextSpace);					}				}				// Last Attribute Pair				if (!$attr && $fromSpace != '/')				{					$attr = $fromSpace;				}				// Add attribute pair to the attribute array				$attrSet[] = $attr;				// Move search point and continue iteration				$tagLeft = substr($fromSpace, strlen($attr));				$currentSpace = strpos($tagLeft, ' ');			}			// Is our tag in the user input array?			$tagFound = in_array(strtolower($tagName), $this->tagsArray);			// If the tag is allowed let's append it to the output string.			if ((!$tagFound && $this->tagsMethod) || ($tagFound && !$this->tagsMethod))			{				// Reconstruct tag with allowed attributes				if (!$isCloseTag)				{					// Open or single tag					$attrSet = $this->_cleanAttributes($attrSet);					$preTag .= '<' . $tagName;					for ($i = 0, $count = count($attrSet); $i < $count; $i++)					{						$preTag .= ' ' . $attrSet[$i];					}					// Reformat single tags to XHTML					if (strpos($fromTagOpen, '</' . $tagName))					{						$preTag .= '>';					}					else					{						$preTag .= ' />';					}				}				// Closing tag				else				{					$preTag .= '</' . $tagName . '>';				}			}			// Find next tag's start and continue iteration			$postTag = substr($postTag, ($tagLength + 2));			$tagOpen_start = strpos($postTag, '<');		}		// Append any code after the end of tags and return		if ($postTag != '<')		{			$preTag .= $postTag;		}		return $preTag;	}	/**	 * Internal method to strip a tag of certain attributes	 *	 * @param   array  $attrSet  Array of attribute pairs to filter	 *	 * @return  array  Filtered array of attribute pairs	 *	 * @since   11.1	 */	protected function _cleanAttributes($attrSet)	{		$newSet = array();		$count = count($attrSet);		// Iterate through attribute pairs		for ($i = 0; $i < $count; $i++)		{			// Skip blank spaces			if (!$attrSet[$i])			{				continue;			}			// Split into name/value pairs			$attrSubSet = explode('=', trim($attrSet[$i]), 2);			// Take the last attribute in case there is an attribute with no value			$attrSubSet[0] = array_pop(explode(' ', trim($attrSubSet[0])));			// Remove all "non-regular" attribute names			// AND blacklisted attributes			if ((!preg_match('/[a-z]*$/i', $attrSubSet[0]))				|| (($this->xssAuto) && ((in_array(strtolower($attrSubSet[0]), $this->attrBlacklist))				|| (substr($attrSubSet[0], 0, 2) == 'on'))))			{				continue;			}			// XSS attribute value filtering			if (isset($attrSubSet[1]))			{				// Trim leading and trailing spaces				$attrSubSet[1] = trim($attrSubSet[1]);				// Strips unicode, hex, etc				$attrSubSet[1] = str_replace('&#', '', $attrSubSet[1]);				// Strip normal newline within attr value				$attrSubSet[1] = preg_replace('/[\n\r]/', '', $attrSubSet[1]);				// Strip double quotes				$attrSubSet[1] = str_replace('"', '', $attrSubSet[1]);				// Convert single quotes from either side to doubles (Single quotes shouldn't be used to pad attr values)				if ((substr($attrSubSet[1], 0, 1) == "'") && (substr($attrSubSet[1], (strlen($attrSubSet[1]) - 1), 1) == "'"))				{					$attrSubSet[1] = substr($attrSubSet[1], 1, (strlen($attrSubSet[1]) - 2));				}				// Strip slashes				$attrSubSet[1] = stripslashes($attrSubSet[1]);			}			else			{				continue;			}			// Autostrip script tags			if (self::checkAttribute($attrSubSet))			{				continue;			}			// Is our attribute in the user input array?			$attrFound = in_array(strtolower($attrSubSet[0]), $this->attrArray);			// If the tag is allowed lets keep it			if ((!$attrFound && $this->attrMethod) || ($attrFound && !$this->attrMethod))			{				// Does the attribute have a value?				if (empty($attrSubSet[1]) === false)				{					$newSet[] = $attrSubSet[0] . '="' . $attrSubSet[1] . '"';				}				elseif ($attrSubSet[1] === "0")				{					// Special Case					// Is the value 0?					$newSet[] = $attrSubSet[0] . '="0"';				}				else				{					// Leave empty attributes alone					$newSet[] = $attrSubSet[0] . '=""';				}			}		}		return $newSet;	}	/**	 * Try to convert to plaintext	 *	 * @param   string  $source  The source string.	 *	 * @return  string  Plaintext string	 *	 * @since   11.1	 */	protected function _decode($source)	{		static $ttr;		if (!is_array($ttr))		{			// Entity decode			$trans_tbl = get_html_translation_table(HTML_ENTITIES);			foreach ($trans_tbl as $k => $v)			{				$ttr[$v] = utf8_encode($k);			}		}		$source = strtr($source, $ttr);		// Convert decimal		$source = preg_replace('/&#(\d+);/me', "utf8_encode(chr(\\1))", $source); // decimal notation		// Convert hex		$source = preg_replace('/&#x([a-f0-9]+);/mei', "utf8_encode(chr(0x\\1))", $source); // hex notation		return $source;	}	/**	 * Escape < > and " inside attribute values	 *	 * @param   string  $source  The source string.	 *	 * @return  string  Filtered string	 *	 * @since    11.1	 */	protected function _escapeAttributeValues($source)	{		$alreadyFiltered = '';		$remainder = $source;		$badChars = array('<', '"', '>');		$escapedChars = array('&lt;', '&quot;', '&gt;');		// Process each portion based on presence of =" and "<space>, "/>, or ">		// See if there are any more attributes to process		while (preg_match('#<[^>]*?=\s*?(\"|\')#s', $remainder, $matches, PREG_OFFSET_CAPTURE))		{			// Get the portion before the attribute value			$quotePosition = $matches[0][1];			$nextBefore = $quotePosition + strlen($matches[0][0]);			// Figure out if we have a single or double quote and look for the matching closing quote			// Closing quote should be "/>, ">, "<space>, or " at the end of the string			$quote = substr($matches[0][0], -1);			$pregMatch = ($quote == '"') ? '#(\"\s*/\s*>|\"\s*>|\"\s+|\"$)#' : "#(\'\s*/\s*>|\'\s*>|\'\s+|\'$)#";			// Get the portion after attribute value			if (preg_match($pregMatch, substr($remainder, $nextBefore), $matches, PREG_OFFSET_CAPTURE))			{				// We have a closing quote				$nextAfter = $nextBefore + $matches[0][1];			}			else			{				// No closing quote				$nextAfter = strlen($remainder);			}			// Get the actual attribute value			$attributeValue = substr($remainder, $nextBefore, $nextAfter - $nextBefore);			// Escape bad chars			$attributeValue = str_replace($badChars, $escapedChars, $attributeValue);			$attributeValue = $this->_stripCSSExpressions($attributeValue);			$alreadyFiltered .= substr($remainder, 0, $nextBefore) . $attributeValue . $quote;			$remainder = substr($remainder, $nextAfter + 1);		}		// At this point, we just have to return the $alreadyFiltered and the $remainder		return $alreadyFiltered . $remainder;	}	/**	 * Remove CSS Expressions in the form of <property>:expression(...)	 *	 * @param   string  $source  The source string.	 *	 * @return  string  Filtered string	 *	 * @since   11.1	 */	protected function _stripCSSExpressions($source)	{		// Strip any comments out (in the form of /*...*/)		$test = preg_replace('#\/\*.*\*\/#U', '', $source);		// Test for :expression		if (!stripos($test, ':expression'))		{			// Not found, so we are done			$return = $source;		}		else		{			// At this point, we have stripped out the comments and have found :expression			// Test stripped string for :expression followed by a '('			if (preg_match_all('#:expression\s*\(#', $test, $matches))			{				// If found, remove :expression				$test = str_ireplace(':expression', '', $test);				$return = $test;			}		}		return $return;	}}
<?php/** * @package     Joomla.Site * @subpackage  com_contact * * @copyright   Copyright (C) 2005 - 2013 Open Source Matters, Inc. All rights reserved. * @license     GNU General Public License version 2 or later; see LICENSE.txt */defined('_JEXEC') or die;/** * @package     Joomla.Site * @subpackage  com_contact * @since       1.5 */class ContactModelContact extends JModelForm{	/**	 * @since   1.6	 */	protected $view_item = 'contact';	protected $_item = null;	/**	 * Model context string.	 *	 * @var		string	 */	protected $_context = 'com_contact.contact';	/**	 * Method to auto-populate the model state.	 *	 * Note. Calling getState in this method will result in recursion.	 *	 * @since   1.6	 */	protected function populateState()	{		$app = JFactory::getApplication('site');		// Load state from the request.		$pk = $app->input->getInt('id');		$this->setState('contact.id', $pk);		// Load the parameters.		$params = $app->getParams();		$this->setState('params', $params);		$user = JFactory::getUser();		if ((!$user->authorise('core.edit.state', 'com_contact')) &&  (!$user->authorise('core.edit', 'com_contact'))){			$this->setState('filter.published', 1);			$this->setState('filter.archived', 2);		}	}	/**	 * Method to get the contact form.	 *	 * The base form is loaded from XML and then an event is fired	 *	 *	 * @param   array  $data		An optional array of data for the form to interrogate.	 * @param   boolean	$loadData	True if the form is to load its own data (default case), false if not.	 * @return  JForm	A JForm object on success, false on failure	 * @since   1.6	 */	public function getForm($data = array(), $loadData = true)	{		// Get the form.		$form = $this->loadForm('com_contact.contact', 'contact', array('control' => 'jform', 'load_data' => true));		if (empty($form))		{			return false;		}		$id = $this->getState('contact.id');		$params = $this->getState('params');		$contact = $this->_item[$id];		$params->merge($contact->params);		if (!$params->get('show_email_copy', 0)){			$form->removeField('contact_email_copy');		}		return $form;	}	protected function loadFormData()	{		$data = (array) JFactory::getApplication()->getUserState('com_contact.contact.data', array());		$this->preprocessData('com_contact.contact', $data);		return $data;	}	/**	 * Gets a contact	 *	 * @param integer $pk  Id for the contact	 *	 * @return mixed Object or null	 */	public function &getItem($pk = null)	{		$pk = (!empty($pk)) ? $pk : (int) $this->getState('contact.id');		if ($this->_item === null)		{			$this->_item = array();		}		if (!isset($this->_item[$pk]))		{			try			{				$db = $this->getDbo();				$query = $db->getQuery(true);				//sqlsrv changes				$case_when = ' CASE WHEN ';				$case_when .= $query->charLength('a.alias', '!=', '0');				$case_when .= ' THEN ';				$a_id = $query->castAsChar('a.id');				$case_when .= $query->concatenate(array($a_id, 'a.alias'), ':');				$case_when .= ' ELSE ';				$case_when .= $a_id.' END as slug';				$case_when1 = ' CASE WHEN ';				$case_when1 .= $query->charLength('c.alias', '!=', '0');				$case_when1 .= ' THEN ';				$c_id = $query->castAsChar('c.id');				$case_when1 .= $query->concatenate(array($c_id, 'c.alias'), ':');				$case_when1 .= ' ELSE ';				$case_when1 .= $c_id.' END as catslug';				$query->select($this->getState('item.select', 'a.*') . ','.$case_when.','.$case_when1)					->from('#__contact_details AS a')				// Join on category table.					->select('c.title AS category_title, c.alias AS category_alias, c.access AS category_access')					->join('LEFT', '#__categories AS c on c.id = a.catid')				// Join over the categories to get parent category titles					->select('parent.title as parent_title, parent.id as parent_id, parent.path as parent_route, parent.alias as parent_alias')					->join('LEFT', '#__categories as parent ON parent.id = c.parent_id')					->where('a.id = ' . (int) $pk);				// Filter by start and end dates.				$nullDate = $db->quote($db->getNullDate());				$nowDate = $db->quote(JFactory::getDate()->toSql());				// Filter by published state.				$published = $this->getState('filter.published');				$archived = $this->getState('filter.archived');				if (is_numeric($published))				{					$query->where('(a.published = ' . (int) $published . ' OR a.published =' . (int) $archived . ')')						->where('(a.publish_up = ' . $nullDate . ' OR a.publish_up <= ' . $nowDate . ')')						->where('(a.publish_down = ' . $nullDate . ' OR a.publish_down >= ' . $nowDate . ')');				}				$db->setQuery($query);				$data = $db->loadObject();				if (empty($data))				{					JError::raiseError(404, JText::_('COM_CONTACT_ERROR_CONTACT_NOT_FOUND'));				}				// Check for published state if filter set.				if (((is_numeric($published)) || (is_numeric($archived))) && (($data->published != $published) && ($data->published != $archived)))				{					JError::raiseError(404, JText::_('COM_CONTACT_ERROR_CONTACT_NOT_FOUND'));				}				// Convert parameter fields to objects.				$registry = new JRegistry;				$registry->loadString($data->params);				$data->params = clone $this->getState('params');				$data->params->merge($registry);				$registry = new JRegistry;				$registry->loadString($data->metadata);				$data->metadata = $registry;				$data->tags = new JHelperTags;				$data->tags->getItemTags('com_contact.contact', $data->id);				// Compute access permissions.				if ($access = $this->getState('filter.access')) {					// If the access filter has been set, we already know this user can view.					$data->params->set('access-view', true);				}				else {					// If no access filter is set, the layout takes some responsibility for display of limited information.					$user = JFactory::getUser();					$groups = $user->getAuthorisedViewLevels();					if ($data->catid == 0 || $data->category_access === null)					{						$data->params->set('access-view', in_array($data->access, $groups));					}					else {						$data->params->set('access-view', in_array($data->access, $groups) && in_array($data->category_access, $groups));					}				}				$this->_item[$pk] = $data;			}			catch (Exception $e)			{				$this->setError($e);				$this->_item[$pk] = false;			}		}		if ($this->_item[$pk])		{			if ($extendedData = $this->getContactQuery($pk))			{				$this->_item[$pk]->articles = $extendedData->articles;				$this->_item[$pk]->profile = $extendedData->profile;			}		}		return $this->_item[$pk];	}	protected function getContactQuery($pk = null)	{		// TODO: Cache on the fingerprint of the arguments		$db		= $this->getDbo();		$user	= JFactory::getUser();		$pk = (!empty($pk)) ? $pk : (int) $this->getState('contact.id');		$query	= $db->getQuery(true);		if ($pk)		{			//sqlsrv changes			$case_when = ' CASE WHEN ';			$case_when .= $query->charLength('a.alias', '!=', '0');			$case_when .= ' THEN ';			$a_id = $query->castAsChar('a.id');			$case_when .= $query->concatenate(array($a_id, 'a.alias'), ':');			$case_when .= ' ELSE ';			$case_when .= $a_id.' END as slug';			$case_when1 = ' CASE WHEN ';			$case_when1 .= $query->charLength('cc.alias', '!=', '0');			$case_when1 .= ' THEN ';			$c_id = $query->castAsChar('cc.id');			$case_when1 .= $query->concatenate(array($c_id, 'cc.alias'), ':');			$case_when1 .= ' ELSE ';			$case_when1 .= $c_id.' END as catslug';			$query->select(				'a.*, cc.access as category_access, cc.title as category_name, '				. $case_when . ',' . $case_when1			)				->from('#__contact_details AS a')				->join('INNER', '#__categories AS cc on cc.id = a.catid')				->where('a.id = ' . (int) $pk);			$published = $this->getState('filter.published');			$archived = $this->getState('filter.archived');			if (is_numeric($published))			{				$query->where('a.published IN (1,2)')					->where('cc.published IN (1,2)');			}			$groups = implode(',', $user->getAuthorisedViewLevels());			$query->where('a.access IN ('.$groups.')');			try			{				$db->setQuery($query);				$result = $db->loadObject();				if (empty($result))				{					throw new Exception(JText::_('COM_CONTACT_ERROR_CONTACT_NOT_FOUND'), 404);				}			// If we are showing a contact list, then the contact parameters take priority			// So merge the contact parameters with the merged parameters				if ($this->getState('params')->get('show_contact_list'))				{					$registry = new JRegistry;					$registry->loadString($result->params);					$this->getState('params')->merge($registry);				}			}			catch (Exception $e)			{				$this->setError($e);				return false;			}			if ($result)			{				$user	= JFactory::getUser();				$groups	= implode(',', $user->getAuthorisedViewLevels());				//get the content by the linked user				$query	= $db->getQuery(true)					->select('a.id')					->select('a.title')					->select('a.state')					->select('a.access')					->select('a.created');				// SQL Server changes				$case_when = ' CASE WHEN ';				$case_when .= $query->charLength('a.alias', '!=', '0');				$case_when .= ' THEN ';				$a_id = $query->castAsChar('a.id');				$case_when .= $query->concatenate(array($a_id, 'a.alias'), ':');				$case_when .= ' ELSE ';				$case_when .= $a_id.' END as slug';				$case_when1 = ' CASE WHEN ';				$case_when1 .= $query->charLength('c.alias', '!=', '0');				$case_when1 .= ' THEN ';				$c_id = $query->castAsChar('c.id');				$case_when1 .= $query->concatenate(array($c_id, 'c.alias'), ':');				$case_when1 .= ' ELSE ';				$case_when1 .= $c_id.' END as catslug';				$query->select($case_when1 . ',' . $case_when)					->from('#__content as a')					->join('LEFT', '#__categories as c on a.catid=c.id')					->where('a.created_by = ' . (int) $result->user_id)					->where('a.access IN ('. $groups.')')					->order('a.state DESC, a.created DESC');				// filter per language if plugin published				if (JLanguageMultilang::isEnabled())				{					$query->where(('a.created_by = ' . (int) $result->user_id) AND ('a.language=' . $db->quote(JFactory::getLanguage()->getTag()) . ' OR a.language=' . $db->quote('*')));				}				if (is_numeric($published))				{					$query->where('a.state IN (1,2)');				}				$db->setQuery($query, 0, 10);				$articles = $db->loadObjectList();				$result->articles = $articles;				//get the profile information for the linked user				require_once JPATH_ADMINISTRATOR.'/components/com_users/models/user.php';				$userModel = JModelLegacy::getInstance('User', 'UsersModel', array('ignore_request' => true));				$data = $userModel->getItem((int) $result->user_id);				JPluginHelper::importPlugin('user');				$form = new JForm('com_users.profile');				// Get the dispatcher.				$dispatcher	= JEventDispatcher::getInstance();				// Trigger the form preparation event.				$dispatcher->trigger('onContentPrepareForm', array($form, $data));				// Trigger the data preparation event.				$dispatcher->trigger('onContentPrepareData', array('com_users.profile', $data));				// Load the data into the form after the plugins have operated.				$form->bind($data);				$result->profile = $form;				$this->contact = $result;				return $result;			}		}	}	/**	 * Increment the hit counter for the contact.	 *	 * @param   int  $pk  Optional primary key of the article to increment.	 *	 * @return  boolean  True if successful; false otherwise and internal error set.	 *	 * @since   3.0	 */	public function hit($pk = 0)	{		$input = JFactory::getApplication()->input;		$hitcount = $input->getInt('hitcount', 1);		if ($hitcount)		{			$pk = (!empty($pk)) ? $pk : (int) $this->getState('contact.id');			$db = $this->getDbo();			$db->setQuery(				'UPDATE #__contact_details' .				' SET hits = hits + 1' .				' WHERE id = '.(int) $pk			);			try			{				$db->execute();			}			catch (RuntimeException $e)			{				$this->setError($e->getMessage());				return false;			}		}		return true;	}}
<?php/** * @package     Joomla.Administrator * @subpackage  com_users * * @copyright   Copyright (C) 2005 - 2013 Open Source Matters, Inc. All rights reserved. * @license     GNU General Public License version 2 or later; see LICENSE.txt */defined('_JEXEC') or die;// Create the copy/move options.$options = array(	JHtml::_('select.option', 'add', JText::_('COM_USERS_BATCH_ADD')),	JHtml::_('select.option', 'del', JText::_('COM_USERS_BATCH_DELETE')),	JHtml::_('select.option', 'set', JText::_('COM_USERS_BATCH_SET')));JHtml::_('formbehavior.chosen', 'select');?><div class="modal hide fade" id="collapseModal">	<div class="modal-header">		<button type="button" class="close" data-dismiss="modal">x</button>		<h3><?php echo JText::_('COM_USERS_BATCH_OPTIONS');?></h3>	</div>	<div class="modal-body">		<div id="batch-choose-action" class="combo control-group">			<label id="batch-choose-action-lbl" class="control-label" for="batch-choose-action">				<?php echo JText::_('COM_USERS_BATCH_GROUP') ?>			</label>		</div>		<div id="batch-choose-action" class="combo controls">			<div class="control-group">				<select name="batch[group_id]" class="inputbox" id="batch-group-id">					<option value=""><?php echo JText::_('JSELECT') ?></option>					<?php echo JHtml::_('select.options', JHtml::_('user.groups')); ?>				</select>			</div>		</div>		<div class="control-group radio">			<?php echo JHtml::_('select.radiolist', $options, 'batch[group_action]', '', 'value', 'text', 'add') ?>		</div>	</div>	<div class="modal-footer">		<button class="btn" type="button" onclick="document.id('batch-group-id').value=''" data-dismiss="modal">			<?php echo JText::_('JCANCEL'); ?>		</button>		<button class="btn btn-primary" type="submit" onclick="Joomla.submitbutton('user.batch');">			<?php echo JText::_('JGLOBAL_BATCH_PROCESS'); ?>		</button>	</div></div>
<?php/** * @package     Joomla.Administrator * @subpackage  com_users * * @copyright   Copyright (C) 2005 - 2013 Open Source Matters, Inc. All rights reserved. * @license     GNU General Public License version 2 or later; see LICENSE.txt */defined('_JEXEC') or die;/** * Users mail model. * * @package     Joomla.Administrator * @subpackage  com_users * @since       1.6 */class UsersModelMail extends JModelAdmin{	/**	 * Method to get the row form.	 *	 * @param   array  $data		An optional array of data for the form to interogate.	 * @param   boolean	$loadData	True if the form is to load its own data (default case), false if not.	 * @return  JForm	A JForm object on success, false on failure	 * @since   1.6	 */	public function getForm($data = array(), $loadData = true)	{		$app = JFactory::getApplication();		// Get the form.		$form = $this->loadForm('com_users.mail', 'mail', array('control' => 'jform', 'load_data' => $loadData));		if (empty($form))		{			return false;		}		return $form;	}	/**	 * Method to get the data that should be injected in the form.	 *	 * @return  mixed  The data for the form.	 * @since   1.6	 */	protected function loadFormData()	{		// Check the session for previously entered form data.		$data = JFactory::getApplication()->getUserState('com_users.display.mail.data', array());		$this->preprocessData('com_users.mail', $data);		return $data;	}	/**	 * Override preprocessForm to load the user plugin group instead of content.	 *	 * @param   object	A form object.	 * @param   mixed	The data expected for the form.	 * @throws	Exception if there is an error in the form event.	 * @since   1.6	 */	protected function preprocessForm(JForm $form, $data, $group = 'user')	{		parent::preprocessForm($form, $data, $group);	}	public function send()	{		$app    = JFactory::getApplication();		$data   = $app->input->post->get('jform', array(), 'array');		$user   = JFactory::getUser();		$access = new JAccess;		$db     = $this->getDbo();		$mode		= array_key_exists('mode', $data) ? (int) $data['mode'] : 0;		$subject	= array_key_exists('subject', $data) ? $data['subject'] : '';		$grp		= array_key_exists('group', $data) ? (int) $data['group'] : 0;		$recurse	= array_key_exists('recurse', $data) ? (int) $data['recurse'] : 0;		$bcc		= array_key_exists('bcc', $data) ? (int) $data['bcc'] : 0;		$disabled	= array_key_exists('disabled', $data) ? (int) $data['disabled'] : 0;		$message_body = array_key_exists('message', $data) ? $data['message'] : '';		// automatically removes html formatting		if (!$mode)		{			$message_body = JFilterInput::getInstance()->clean($message_body, 'string');		}		// Check for a message body and subject		if (!$message_body || !$subject)		{			$app->setUserState('com_users.display.mail.data', $data);			$this->setError(JText::_('COM_USERS_MAIL_PLEASE_FILL_IN_THE_FORM_CORRECTLY'));			return false;		}		// get users in the group out of the acl		$to = $access->getUsersByGroup($grp, $recurse);		// Get all users email and group except for senders		$query	= $db->getQuery(true)			->select('email')			->from('#__users')			->where('id != '.(int) $user->get('id'));		if ($grp !== 0)		{			if (empty($to))			{				$query->where('0');			} else {				$query->where('id IN (' . implode(',', $to) . ')');			}		}		if ($disabled == 0){			$query->where("block = 0");		}		$db->setQuery($query);		$rows = $db->loadColumn();		// Check to see if there are any users in this group before we continue		if (!count($rows))		{			$app->setUserState('com_users.display.mail.data', $data);			if (in_array($user->id, $to))			{				$this->setError(JText::_('COM_USERS_MAIL_ONLY_YOU_COULD_BE_FOUND_IN_THIS_GROUP'));			}			else			{				$this->setError(JText::_('COM_USERS_MAIL_NO_USERS_COULD_BE_FOUND_IN_THIS_GROUP'));			}			return false;		}		// Get the Mailer		$mailer = JFactory::getMailer();		$params = JComponentHelper::getParams('com_users');		// Build email message format.		$mailer->setSender(array($app->getCfg('mailfrom'), $app->getCfg('fromname')));		$mailer->setSubject($params->get('mailSubjectPrefix') . stripslashes($subject));		$mailer->setBody($message_body . $params->get('mailBodySuffix'));		$mailer->IsHTML($mode);		// Add recipients		if ($bcc)		{			$mailer->addBCC($rows);			$mailer->addRecipient($app->getCfg('mailfrom'));		}		else		{			$mailer->addRecipient($rows);		}		// Send the Mail		$rs	= $mailer->Send();		// Check for an error		if ($rs instanceof Exception)		{			$app->setUserState('com_users.display.mail.data', $data);			$this->setError($rs->getError());			return false;		} elseif (empty($rs))		{			$app->setUserState('com_users.display.mail.data', $data);			$this->setError(JText::_('COM_USERS_MAIL_THE_MAIL_COULD_NOT_BE_SENT'));			return false;		}		else		{			// Fill the data (specially for the 'mode', 'group' and 'bcc': they could not exist in the array			// when the box is not checked and in this case, the default value would be used instead of the '0'			// one)			$data['mode'] = $mode;			$data['subject'] = $subject;			$data['group'] = $grp;			$data['recurse'] = $recurse;			$data['bcc'] = $bcc;			$data['message'] = $message_body;			$app->setUserState('com_users.display.mail.data', array());			$app->enqueueMessage(JText::plural('COM_USERS_MAIL_EMAIL_SENT_TO_N_USERS', count($rows)), 'message');			return true;		}	}}
<?php/** * @package     Joomla.Administrator * @subpackage  com_finder * * @copyright   Copyright (C) 2005 - 2013 Open Source Matters, Inc. All rights reserved. * @license     GNU General Public License version 2 or later; see LICENSE */defined('_JEXEC') or die;/** * Statistics model class for Finder. * * @package     Joomla.Administrator * @subpackage  com_finder * @since       2.5 */class FinderModelStatistics extends JModelLegacy{	/**	 * Method to get the component statistics	 *	 * @return  object  The component statistics	 *	 * @since   2.5	 */	public function getData()	{		// Initialise		$db = $this->getDbo();		$query = $db->getQuery(true);		$data = new JObject;		$query->select('COUNT(term_id)')			->from($db->quoteName('#__finder_terms'));		$db->setQuery($query);		$data->term_count = $db->loadResult();		$query->clear()			->select('COUNT(link_id)')			->from($db->quoteName('#__finder_links'));		$db->setQuery($query);		$data->link_count = $db->loadResult();		$query->clear()			->select('COUNT(id)')			->from($db->quoteName('#__finder_taxonomy'))			->where($db->quoteName('parent_id') . ' = 1');		$db->setQuery($query);		$data->taxonomy_branch_count = $db->loadResult();		$query->clear()			->select('COUNT(id)')			->from($db->quoteName('#__finder_taxonomy'))			->where($db->quoteName('parent_id') . ' > 1');		$db->setQuery($query);		$data->taxonomy_node_count = $db->loadResult();		$query->clear()			->select('t.title AS type_title, COUNT(a.link_id) AS link_count')			->from($db->quoteName('#__finder_links') . ' AS a')			->join('INNER', $db->quoteName('#__finder_types') . ' AS t ON t.id = a.type_id')			->group('a.type_id, t.title')			->order($db->quoteName('type_title'), 'ASC');		$db->setQuery($query);		$data->type_list = $db->loadObjectList();		return $data;	}}
<?php/** * @package     Joomla.Legacy * @subpackage  HTML * * @copyright   Copyright (C) 2005 - 2013 Open Source Matters, Inc. All rights reserved. * @license     GNU General Public License version 2 or later; see LICENSE */defined('JPATH_PLATFORM') or die;/** * Utility class working with menu select lists * * @package     Joomla.Legacy * @subpackage  HTML * @since       11.1 */abstract class JHtmlMenu{	/**	 * Cached array of the menus.	 *	 * @var    array	 * @since  11.1	 */	protected static $menus = null;	/**	 * Cached array of the menus items.	 *	 * @var    array	 * @since  11.1	 */	protected static $items = null;	/**	 * Get a list of the available menus.	 *	 * @return  string	 *	 * @since   11.1	 */	public static function menus()	{		if (empty(self::$menus))		{			$db = JFactory::getDbo();			$query = $db->getQuery(true)				->select('menutype AS value, title AS text')				->from($db->quoteName('#__menu_types'))				->order('title');			$db->setQuery($query);			self::$menus = $db->loadObjectList();		}		return self::$menus;	}	/**	 * Returns an array of menu items grouped by menu.	 *	 * @param   array  $config  An array of configuration options.	 *	 * @return  array	 */	public static function menuitems($config = array())	{		if (empty(self::$items))		{			$db = JFactory::getDbo();			$query = $db->getQuery(true)				->select('menutype AS value, title AS text')				->from($db->quoteName('#__menu_types'))				->order('title');			$db->setQuery($query);			$menus = $db->loadObjectList();			$query->clear()				->select('a.id AS value, a.title AS text, a.level, a.menutype')				->from('#__menu AS a')				->where('a.parent_id > 0')				->where('a.type <> ' . $db->quote('url'))				->where('a.client_id = 0');			// Filter on the published state			if (isset($config['published']))			{				if (is_numeric($config['published']))				{					$query->where('a.published = ' . (int) $config['published']);				}				elseif ($config['published'] === '')				{					$query->where('a.published IN (0,1)');				}			}			$query->order('a.lft');			$db->setQuery($query);			$items = $db->loadObjectList();			// Collate menu items based on menutype			$lookup = array();			foreach ($items as &$item)			{				if (!isset($lookup[$item->menutype]))				{					$lookup[$item->menutype] = array();				}				$lookup[$item->menutype][] = &$item;				$item->text = str_repeat('- ', $item->level) . $item->text;			}			self::$items = array();			foreach ($menus as &$menu)			{				// Start group:				self::$items[] = JHtml::_('select.optgroup', $menu->text);				// Special "Add to this Menu" option:				self::$items[] = JHtml::_('select.option', $menu->value . '.1', JText::_('JLIB_HTML_ADD_TO_THIS_MENU'));				// Menu items:				if (isset($lookup[$menu->value]))				{					foreach ($lookup[$menu->value] as &$item)					{						self::$items[] = JHtml::_('select.option', $menu->value . '.' . $item->value, $item->text);					}				}				// Finish group:				self::$items[] = JHtml::_('select.optgroup', $menu->text);			}		}		return self::$items;	}	/**	 * Displays an HTML select list of menu items.	 *	 * @param   string  $name      The name of the control.	 * @param   string  $selected  The value of the selected option.	 * @param   string  $attribs   Attributes for the control.	 * @param   array   $config    An array of options for the control.	 *	 * @return  string	 */	public static function menuitemlist($name, $selected = null, $attribs = null, $config = array())	{		static $count;		$options = self::menuitems($config);		return JHtml::_(			'select.genericlist', $options, $name,			array(				'id' => isset($config['id']) ? $config['id'] : 'assetgroups_' . (++$count),				'list.attr' => (is_null($attribs) ? 'class="inputbox" size="1"' : $attribs),				'list.select' => (int) $selected,				'list.translate' => false			)		);	}	/**	 * Build the select list for Menu Ordering	 *	 * @param   object   &$row  The row object	 * @param   integer  $id    The id for the row. Must exist to enable menu ordering	 *	 * @return  string	 *	 * @since   11.1	 */	public static function ordering(&$row, $id)	{		$db = JFactory::getDbo();		$query = $db->getQuery(true);		if ($id)		{			$query->select('ordering AS value, title AS text')				->from($db->quoteName('#__menu'))				->where($db->quoteName('menutype') . ' = ' . $db->quote($row->menutype))				->where($db->quoteName('parent_id') . ' = ' . (int) $row->parent_id)				->where($db->quoteName('published') . ' != -2')				->order('ordering');			$order = JHtml::_('list.genericordering', $query);			$ordering = JHtml::_(				'select.genericlist', $order, 'ordering',				array('list.attr' => 'class="inputbox" size="1"', 'list.select' => (int) $row->ordering)			);		}		else		{			$ordering = '<input type="hidden" name="ordering" value="' . $row->ordering . '" />' . JText::_('JGLOBAL_NEWITEMSLAST_DESC');		}		return $ordering;	}	/**	 * Build the multiple select list for Menu Links/Pages	 *	 * @param   boolean  $all         True if all can be selected	 * @param   boolean  $unassigned  True if unassigned can be selected	 *	 * @return  string	 *	 * @since   11.1	 */	public static function linkoptions($all = false, $unassigned = false)	{		$db = JFactory::getDbo();		$query = $db->getQuery(true);		// Get a list of the menu items		$query->select('m.id, m.parent_id, m.title, m.menutype')			->from($db->quoteName('#__menu') . ' AS m')			->where($db->quoteName('m.published') . ' = 1')			->order('m.menutype, m.parent_id, m.ordering');		$db->setQuery($query);		$mitems = $db->loadObjectList();		if (!$mitems)		{			$mitems = array();		}		// Establish the hierarchy of the menu		$children = array();		// First pass - collect children		foreach ($mitems as $v)		{			$pt = $v->parent_id;			$list = @$children[$pt] ? $children[$pt] : array();			array_push($list, $v);			$children[$pt] = $list;		}		// Second pass - get an indent list of the items		$list = self::TreeRecurse((int) $mitems[0]->parent_id, '', array(), $children, 9999, 0, 0);		// Code that adds menu name to Display of Page(s)		$mitems = array();		if ($all | $unassigned)		{			$mitems[] = JHtml::_('select.option', '<OPTGROUP>', JText::_('JOPTION_MENUS'));			if ($all)			{				$mitems[] = JHtml::_('select.option', 0, JText::_('JALL'));			}			if ($unassigned)			{				$mitems[] = JHtml::_('select.option', -1, JText::_('JOPTION_UNASSIGNED'));			}			$mitems[] = JHtml::_('select.option', '</OPTGROUP>');		}		$lastMenuType = null;		$tmpMenuType = null;		foreach ($list as $list_a)		{			if ($list_a->menutype != $lastMenuType)			{				if ($tmpMenuType)				{					$mitems[] = JHtml::_('select.option', '</OPTGROUP>');				}				$mitems[] = JHtml::_('select.option', '<OPTGROUP>', $list_a->menutype);				$lastMenuType = $list_a->menutype;				$tmpMenuType = $list_a->menutype;			}			$mitems[] = JHtml::_('select.option', $list_a->id, $list_a->title);		}		if ($lastMenuType !== null)		{			$mitems[] = JHtml::_('select.option', '</OPTGROUP>');		}		return $mitems;	}	/**	 * Build the list representing the menu tree	 *	 * @param   integer  $id         Id of the menu item	 * @param   string   $indent     The indentation string	 * @param   array    $list       The list to process	 * @param   array    &$children  The children of the current item	 * @param   integer  $maxlevel   The maximum number of levels in the tree	 * @param   integer  $level      The starting level	 * @param   string   $type       Type of link: component, URL, alias, separator	 *	 * @return  array	 *	 * @since   11.1	 */	public static function treerecurse($id, $indent, $list, &$children, $maxlevel = 9999, $level = 0, $type = 1)	{		if (@$children[$id] && $level <= $maxlevel)		{			foreach ($children[$id] as $v)			{				$id = $v->id;				if ($type)				{					$pre = '<sup>|_</sup>&#160;';					$spacer = '.&#160;&#160;&#160;&#160;&#160;&#160;';				}				else				{					$pre = '- ';					$spacer = '&#160;&#160;';				}				if ($v->parent_id == 0)				{					$txt = $v->title;				}				else				{					$txt = $pre . $v->title;				}				$list[$id] = $v;				$list[$id]->treename = $indent . $txt;				$list[$id]->children = count(@$children[$id]);				$list = self::TreeRecurse($id, $indent . $spacer, $list, $children, $maxlevel, $level + 1, $type);			}		}		return $list;	}}
<?php/** * @package     Joomla.Legacy * @subpackage  Controller * * @copyright   Copyright (C) 2005 - 2013 Open Source Matters, Inc. All rights reserved. * @license     GNU General Public License version 2 or later; see LICENSE */defined('JPATH_PLATFORM') or die;/** * Controller tailored to suit most form-based admin operations. * * @package     Joomla.Legacy * @subpackage  Controller * @since       12.2 * @todo        Add ability to set redirect manually to better cope with frontend usage. */class JControllerForm extends JControllerLegacy{	/**	 * The context for storing internal data, e.g. record.	 *	 * @var    string	 * @since  12.2	 */	protected $context;	/**	 * The URL option for the component.	 *	 * @var    string	 * @since  12.2	 */	protected $option;	/**	 * The URL view item variable.	 *	 * @var    string	 * @since  12.2	 */	protected $view_item;	/**	 * The URL view list variable.	 *	 * @var    string	 * @since  12.2	 */	protected $view_list;	/**	 * The prefix to use with controller messages.	 *	 * @var    string	 * @since  12.2	 */	protected $text_prefix;	/**	 * Constructor.	 *	 * @param   array  $config  An optional associative array of configuration settings.	 *	 * @see     JControllerLegacy	 * @since   12.2	 * @throws  Exception	 */	public function __construct($config = array())	{		parent::__construct($config);		// Guess the option as com_NameOfController		if (empty($this->option))		{			$this->option = 'com_' . strtolower($this->getName());		}		// Guess the JText message prefix. Defaults to the option.		if (empty($this->text_prefix))		{			$this->text_prefix = strtoupper($this->option);		}		// Guess the context as the suffix, eg: OptionControllerContent.		if (empty($this->context))		{			$r = null;			if (!preg_match('/(.*)Controller(.*)/i', get_class($this), $r))			{				throw new Exception(JText::_('JLIB_APPLICATION_ERROR_CONTROLLER_GET_NAME'), 500);			}			$this->context = strtolower($r[2]);		}		// Guess the item view as the context.		if (empty($this->view_item))		{			$this->view_item = $this->context;		}		// Guess the list view as the plural of the item view.		if (empty($this->view_list))		{			// @TODO Probably worth moving to an inflector class based on			// http://kuwamoto.org/2007/12/17/improved-pluralizing-in-php-actionscript-and-ror/			// Simple pluralisation based on public domain snippet by Paul Osman			// For more complex types, just manually set the variable in your class.			$plural = array(				array('/(x|ch|ss|sh)$/i', "$1es"),				array('/([^aeiouy]|qu)y$/i', "$1ies"),				array('/([^aeiouy]|qu)ies$/i', "$1y"),				array('/(bu)s$/i', "$1ses"),				array('/s$/i', "s"),				array('/$/', "s"));			// Check for matches using regular expressions			foreach ($plural as $pattern)			{				if (preg_match($pattern[0], $this->view_item))				{					$this->view_list = preg_replace($pattern[0], $pattern[1], $this->view_item);					break;				}			}		}		// Apply, Save & New, and Save As copy should be standard on forms.		$this->registerTask('apply', 'save');		$this->registerTask('save2new', 'save');		$this->registerTask('save2copy', 'save');	}	/**	 * Method to add a new record.	 *	 * @return  mixed  True if the record can be added, a error object if not.	 *	 * @since   12.2	 */	public function add()	{		$app = JFactory::getApplication();		$context = "$this->option.edit.$this->context";		// Access check.		if (!$this->allowAdd())		{			// Set the internal error and also the redirect error.			$this->setError(JText::_('JLIB_APPLICATION_ERROR_CREATE_RECORD_NOT_PERMITTED'));			$this->setMessage($this->getError(), 'error');			$this->setRedirect(				JRoute::_(					'index.php?option=' . $this->option . '&view=' . $this->view_list					. $this->getRedirectToListAppend(), false				)			);			return false;		}		// Clear the record edit information from the session.		$app->setUserState($context . '.data', null);		// Redirect to the edit screen.		$this->setRedirect(			JRoute::_(				'index.php?option=' . $this->option . '&view=' . $this->view_item				. $this->getRedirectToItemAppend(), false			)		);		return true;	}	/**	 * Method to check if you can add a new record.	 *	 * Extended classes can override this if necessary.	 *	 * @param   array  $data  An array of input data.	 *	 * @return  boolean	 *	 * @since   12.2	 */	protected function allowAdd($data = array())	{		$user = JFactory::getUser();		return ($user->authorise('core.create', $this->option) || count($user->getAuthorisedCategories($this->option, 'core.create')));	}	/**	 * Method to check if you can add a new record.	 *	 * Extended classes can override this if necessary.	 *	 * @param   array   $data  An array of input data.	 * @param   string  $key   The name of the key for the primary key; default is id.	 *	 * @return  boolean	 *	 * @since   12.2	 */	protected function allowEdit($data = array(), $key = 'id')	{		return JFactory::getUser()->authorise('core.edit', $this->option);	}	/**	 * Method to check if you can save a new or existing record.	 *	 * Extended classes can override this if necessary.	 *	 * @param   array   $data  An array of input data.	 * @param   string  $key   The name of the key for the primary key.	 *	 * @return  boolean	 *	 * @since   12.2	 */	protected function allowSave($data, $key = 'id')	{		$recordId = isset($data[$key]) ? $data[$key] : '0';		if ($recordId)		{			return $this->allowEdit($data, $key);		}		else		{			return $this->allowAdd($data);		}	}	/**	 * Method to run batch operations.	 *	 * @param   JModelLegacy  $model  The model of the component being processed.	 *	 * @return	boolean	 True if successful, false otherwise and internal error is set.	 *	 * @since	12.2	 */	public function batch($model)	{		$vars = $this->input->post->get('batch', array(), 'array');		$cid  = $this->input->post->get('cid', array(), 'array');		// Build an array of item contexts to check		$contexts = array();		foreach ($cid as $id)		{			// If we're coming from com_categories, we need to use extension vs. option			if (isset($this->extension))			{				$option = $this->extension;			}			else			{				$option = $this->option;			}			$contexts[$id] = $option . '.' . $this->context . '.' . $id;		}		// Attempt to run the batch operation.		if ($model->batch($vars, $cid, $contexts))		{			$this->setMessage(JText::_('JLIB_APPLICATION_SUCCESS_BATCH'));			return true;		}		else		{			$this->setMessage(JText::sprintf('JLIB_APPLICATION_ERROR_BATCH_FAILED', $model->getError()));			return false;		}	}	/**	 * Method to cancel an edit.	 *	 * @param   string  $key  The name of the primary key of the URL variable.	 *	 * @return  boolean  True if access level checks pass, false otherwise.	 *	 * @since   12.2	 */	public function cancel($key = null)	{		JSession::checkToken() or jexit(JText::_('JINVALID_TOKEN'));		$app = JFactory::getApplication();		$model = $this->getModel();		$table = $model->getTable();		$checkin = property_exists($table, 'checked_out');		$context = "$this->option.edit.$this->context";		if (empty($key))		{			$key = $table->getKeyName();		}		$recordId = $app->input->getInt($key);		// Attempt to check-in the current record.		if ($recordId)		{			// Check we are holding the id in the edit list.			if (!$this->checkEditId($context, $recordId))			{				// Somehow the person just went to the form - we don't allow that.				$this->setError(JText::sprintf('JLIB_APPLICATION_ERROR_UNHELD_ID', $recordId));				$this->setMessage($this->getError(), 'error');				$this->setRedirect(					JRoute::_(						'index.php?option=' . $this->option . '&view=' . $this->view_list						. $this->getRedirectToListAppend(), false					)				);				return false;			}			if ($checkin)			{				if ($model->checkin($recordId) === false)				{					// Check-in failed, go back to the record and display a notice.					$this->setError(JText::sprintf('JLIB_APPLICATION_ERROR_CHECKIN_FAILED', $model->getError()));					$this->setMessage($this->getError(), 'error');					$this->setRedirect(						JRoute::_(							'index.php?option=' . $this->option . '&view=' . $this->view_item							. $this->getRedirectToItemAppend($recordId, $key), false						)					);					return false;				}			}		}		// Clean the session data and redirect.		$this->releaseEditId($context, $recordId);		$app->setUserState($context . '.data', null);		$this->setRedirect(			JRoute::_(				'index.php?option=' . $this->option . '&view=' . $this->view_list				. $this->getRedirectToListAppend(), false			)		);		return true;	}	/**	 * Method to edit an existing record.	 *	 * @param   string  $key     The name of the primary key of the URL variable.	 * @param   string  $urlVar  The name of the URL variable if different from the primary key	 * (sometimes required to avoid router collisions).	 *	 * @return  boolean  True if access level check and checkout passes, false otherwise.	 *	 * @since   12.2	 */	public function edit($key = null, $urlVar = null)	{		$app   = JFactory::getApplication();		$model = $this->getModel();		$table = $model->getTable();		$cid   = $this->input->post->get('cid', array(), 'array');		$context = "$this->option.edit.$this->context";		// Determine the name of the primary key for the data.		if (empty($key))		{			$key = $table->getKeyName();		}		// To avoid data collisions the urlVar may be different from the primary key.		if (empty($urlVar))		{			$urlVar = $key;		}		// Get the previous record id (if any) and the current record id.		$recordId = (int) (count($cid) ? $cid[0] : $this->input->getInt($urlVar));		$checkin = property_exists($table, 'checked_out');		// Access check.		if (!$this->allowEdit(array($key => $recordId), $key))		{			$this->setError(JText::_('JLIB_APPLICATION_ERROR_EDIT_NOT_PERMITTED'));			$this->setMessage($this->getError(), 'error');			$this->setRedirect(				JRoute::_(					'index.php?option=' . $this->option . '&view=' . $this->view_list					. $this->getRedirectToListAppend(), false				)			);			return false;		}		// Attempt to check-out the new record for editing and redirect.		if ($checkin && !$model->checkout($recordId))		{			// Check-out failed, display a notice but allow the user to see the record.			$this->setError(JText::sprintf('JLIB_APPLICATION_ERROR_CHECKOUT_FAILED', $model->getError()));			$this->setMessage($this->getError(), 'error');			$this->setRedirect(				JRoute::_(					'index.php?option=' . $this->option . '&view=' . $this->view_item					. $this->getRedirectToItemAppend($recordId, $urlVar), false				)			);			return false;		}		else		{			// Check-out succeeded, push the new record id into the session.			$this->holdEditId($context, $recordId);			$app->setUserState($context . '.data', null);			$this->setRedirect(				JRoute::_(					'index.php?option=' . $this->option . '&view=' . $this->view_item					. $this->getRedirectToItemAppend($recordId, $urlVar), false				)			);			return true;		}	}	/**	 * Method to get a model object, loading it if required.	 *	 * @param   string  $name    The model name. Optional.	 * @param   string  $prefix  The class prefix. Optional.	 * @param   array   $config  Configuration array for model. Optional.	 *	 * @return  object  The model.	 *	 * @since   12.2	 */	public function getModel($name = '', $prefix = '', $config = array('ignore_request' => true))	{		if (empty($name))		{			$name = $this->context;		}		return parent::getModel($name, $prefix, $config);	}	/**	 * Gets the URL arguments to append to an item redirect.	 *	 * @param   integer  $recordId  The primary key id for the item.	 * @param   string   $urlVar    The name of the URL variable for the id.	 *	 * @return  string  The arguments to append to the redirect URL.	 *	 * @since   12.2	 */	protected function getRedirectToItemAppend($recordId = null, $urlVar = 'id')	{		$tmpl   = $this->input->get('tmpl');		$layout = $this->input->get('layout', 'edit');		$append = '';		// Setup redirect info.		if ($tmpl)		{			$append .= '&tmpl=' . $tmpl;		}		if ($layout)		{			$append .= '&layout=' . $layout;		}		if ($recordId)		{			$append .= '&' . $urlVar . '=' . $recordId;		}		return $append;	}	/**	 * Gets the URL arguments to append to a list redirect.	 *	 * @return  string  The arguments to append to the redirect URL.	 *	 * @since   12.2	 */	protected function getRedirectToListAppend()	{		$tmpl = JFactory::getApplication()->input->get('tmpl');		$append = '';		// Setup redirect info.		if ($tmpl)		{			$append .= '&tmpl=' . $tmpl;		}		return $append;	}	/**	 * Function that allows child controller access to model data	 * after the data has been saved.	 *	 * @param   JModelLegacy  $model      The data model object.	 * @param   array         $validData  The validated data.	 *	 * @return  void	 *	 * @since   12.2	 */	protected function postSaveHook(JModelLegacy $model, $validData = array())	{	}	/**	 * Method to save a record.	 *	 * @param   string  $key     The name of the primary key of the URL variable.	 * @param   string  $urlVar  The name of the URL variable if different from the primary key (sometimes required to avoid router collisions).	 *	 * @return  boolean  True if successful, false otherwise.	 *	 * @since   12.2	 */	public function save($key = null, $urlVar = null)	{		// Check for request forgeries.		JSession::checkToken() or jexit(JText::_('JINVALID_TOKEN'));		$app   = JFactory::getApplication();		$lang  = JFactory::getLanguage();		$model = $this->getModel();		$table = $model->getTable();		$data  = $this->input->post->get('jform', array(), 'array');		$checkin = property_exists($table, 'checked_out');		$context = "$this->option.edit.$this->context";		$task = $this->getTask();		// Determine the name of the primary key for the data.		if (empty($key))		{			$key = $table->getKeyName();		}		// To avoid data collisions the urlVar may be different from the primary key.		if (empty($urlVar))		{			$urlVar = $key;		}		$recordId = $this->input->getInt($urlVar);		if (!$this->checkEditId($context, $recordId))		{			// Somehow the person just went to the form and tried to save it. We don't allow that.			$this->setError(JText::sprintf('JLIB_APPLICATION_ERROR_UNHELD_ID', $recordId));			$this->setMessage($this->getError(), 'error');			$this->setRedirect(				JRoute::_(					'index.php?option=' . $this->option . '&view=' . $this->view_list					. $this->getRedirectToListAppend(), false				)			);			return false;		}		// Populate the row id from the session.		$data[$key] = $recordId;		// The save2copy task needs to be handled slightly differently.		if ($task == 'save2copy')		{			// Check-in the original row.			if ($checkin && $model->checkin($data[$key]) === false)			{				// Check-in failed. Go back to the item and display a notice.				$this->setError(JText::sprintf('JLIB_APPLICATION_ERROR_CHECKIN_FAILED', $model->getError()));				$this->setMessage($this->getError(), 'error');				$this->setRedirect(					JRoute::_(						'index.php?option=' . $this->option . '&view=' . $this->view_item						. $this->getRedirectToItemAppend($recordId, $urlVar), false					)				);				return false;			}			// Reset the ID and then treat the request as for Apply.			$data[$key] = 0;			$task = 'apply';		}		// Access check.		if (!$this->allowSave($data, $key))		{			$this->setError(JText::_('JLIB_APPLICATION_ERROR_SAVE_NOT_PERMITTED'));			$this->setMessage($this->getError(), 'error');			$this->setRedirect(				JRoute::_(					'index.php?option=' . $this->option . '&view=' . $this->view_list					. $this->getRedirectToListAppend(), false				)			);			return false;		}		// Validate the posted data.		// Sometimes the form needs some posted data, such as for plugins and modules.		$form = $model->getForm($data, false);		if (!$form)		{			$app->enqueueMessage($model->getError(), 'error');			return false;		}		// Test whether the data is valid.		$validData = $model->validate($form, $data);		// Check for validation errors.		if ($validData === false)		{			// Get the validation messages.			$errors = $model->getErrors();			// Push up to three validation messages out to the user.			for ($i = 0, $n = count($errors); $i < $n && $i < 3; $i++)			{				if ($errors[$i] instanceof Exception)				{					$app->enqueueMessage($errors[$i]->getMessage(), 'warning');				}				else				{					$app->enqueueMessage($errors[$i], 'warning');				}			}			// Save the data in the session.			$app->setUserState($context . '.data', $data);			// Redirect back to the edit screen.			$this->setRedirect(				JRoute::_(					'index.php?option=' . $this->option . '&view=' . $this->view_item					. $this->getRedirectToItemAppend($recordId, $urlVar), false				)			);			return false;		}		if (!isset($validData['metadata']['tags']))		{			$validData['metadata']['tags'] = null;		}		// Attempt to save the data.		if (!$model->save($validData))		{			// Save the data in the session.			$app->setUserState($context . '.data', $validData);			// Redirect back to the edit screen.			$this->setError(JText::sprintf('JLIB_APPLICATION_ERROR_SAVE_FAILED', $model->getError()));			$this->setMessage($this->getError(), 'error');			$this->setRedirect(				JRoute::_(					'index.php?option=' . $this->option . '&view=' . $this->view_item					. $this->getRedirectToItemAppend($recordId, $urlVar), false				)			);			return false;		}		// Save succeeded, so check-in the record.		if ($checkin && $model->checkin($validData[$key]) === false)		{			// Save the data in the session.			$app->setUserState($context . '.data', $validData);			// Check-in failed, so go back to the record and display a notice.			$this->setError(JText::sprintf('JLIB_APPLICATION_ERROR_CHECKIN_FAILED', $model->getError()));			$this->setMessage($this->getError(), 'error');			$this->setRedirect(				JRoute::_(					'index.php?option=' . $this->option . '&view=' . $this->view_item					. $this->getRedirectToItemAppend($recordId, $urlVar), false				)			);			return false;		}		$this->setMessage(			JText::_(				($lang->hasKey($this->text_prefix . ($recordId == 0 && $app->isSite() ? '_SUBMIT' : '') . '_SAVE_SUCCESS')					? $this->text_prefix					: 'JLIB_APPLICATION') . ($recordId == 0 && $app->isSite() ? '_SUBMIT' : '') . '_SAVE_SUCCESS'			)		);		// Redirect the user and adjust session state based on the chosen task.		switch ($task)		{			case 'apply':				// Set the record data in the session.				$recordId = $model->getState($this->context . '.id');				$this->holdEditId($context, $recordId);				$app->setUserState($context . '.data', null);				$model->checkout($recordId);				// Redirect back to the edit screen.				$this->setRedirect(					JRoute::_(						'index.php?option=' . $this->option . '&view=' . $this->view_item						. $this->getRedirectToItemAppend($recordId, $urlVar), false					)				);				break;			case 'save2new':				// Clear the record id and data from the session.				$this->releaseEditId($context, $recordId);				$app->setUserState($context . '.data', null);				// Redirect back to the edit screen.				$this->setRedirect(					JRoute::_(						'index.php?option=' . $this->option . '&view=' . $this->view_item						. $this->getRedirectToItemAppend(null, $urlVar), false					)				);				break;			default:				// Clear the record id and data from the session.				$this->releaseEditId($context, $recordId);				$app->setUserState($context . '.data', null);				// Redirect to the list screen.				$this->setRedirect(					JRoute::_(						'index.php?option=' . $this->option . '&view=' . $this->view_list						. $this->getRedirectToListAppend(), false					)				);				break;		}		// Invoke the postSave method to allow for the child class to access the model.		$this->postSaveHook($model, $validData);		return true;	}}
<?php/** * @package     Joomla.Site * @subpackage  com_tags * * @copyright   Copyright (C) 2005 - 2013 Open Source Matters, Inc. All rights reserved. * @license     GNU General Public License version 2 or later; see LICENSE.txt */defined('_JEXEC') or die;/** * HTML View class for the Tags component * * @package     Joomla.Site * @subpackage  com_tags * @since       3.1 */class TagsViewTags extends JViewLegacy{	protected $state;	protected $items;	protected $item;	protected $pagination;	protected $params;	public function display($tpl = null)	{		$app		= JFactory::getApplication();		$params		= $app->getParams();		// Get some data from the models		$state		= $this->get('State');		$items		= $this->get('Items');		$item		= $this->get('Item');		$pagination	= $this->get('Pagination');		// Change to catch		/*if (count($errors = $this->get('Errors'))) {			JError::raiseError(500, implode("\n", $errors));			return false;		}*/		// Check whether access level allows access.		// TODO: SHould already be computed in $item->params->get('access-view')		$user	= JFactory::getUser();		$groups	= $user->getAuthorisedViewLevels();		if (!empty($items))		{			foreach ($items as $itemElement)			{				if (!in_array($itemElement->access, $groups))				{					unset($itemElement);				}				// Prepare the data.				$temp = new JRegistry;				$temp->loadString($itemElement->params);				$itemElement->params = clone($params);				$itemElement->params->merge($temp);				$itemElement->params = (array) json_decode($itemElement->params);			}		}		$this->state      = &$state;		$this->items      = &$items;		$this->pagination = &$pagination;		$this->user       = &$user;		$this->item       = &$item;		//Escape strings for HTML output		$this->pageclass_sfx = htmlspecialchars($params->get('pageclass_sfx'));		// Merge tag params. If this is single-tag view, menu params override tag params		// Otherwise, article params override menu item params		$this->params	= $this->state->get('params');		$active	= $app->getMenu()->getActive();		$temp	= clone ($this->params);		// Check to see which parameters should take priority		if ($active)		{			$currentLink = $active->link;			// If the current view is the active item and the tags view, then the menu item params take priority			if (strpos($currentLink, 'view=tags'))			{				$this->params = $active->params;				$this->params->merge($temp);				// Load layout from active query (in case it is an alternative menu item)				if (isset($active->query['layout']))				{					$this->setLayout($active->query['layout']);				}			}			else			{				// Current view is not a single tag, so the tag params take priority here				// Merge the menu item params with the tag params so that the tag params take priority				$temp->merge($item->params);				$item->params = $temp;				// Check for alternative layouts (since we are not in a single-article menu item)				// Single tag menu item layout takes priority over alt layout for a tag				if ($layout = $item->params->get('tag_layout'))				{					$this->setLayout($layout);				}			}		}		else		{			// Merge so that tag params take priority			$temp->merge($item[0]->params);			$item[0]->params = $temp;			// Check for alternative layouts (since we are not in a single-tag menu item)			// Single-tag menu item layout takes priority over alt layout for a tag			if ($layout = $item[0]->params->get('tag_layout'))			{				$this->setLayout($layout);			}		}		$this->_prepareDocument();		parent::display($tpl);	}	/**	 * Prepares the document	 */	protected function _prepareDocument()	{		$app		= JFactory::getApplication();		$menus		= $app->getMenu();		$pathway	= $app->getPathway();		$title 		= null;		// Because the application sets a default page title,		// we need to get it from the menu item itself		$menu = $menus->getActive();		if ($menu)		{			$this->params->def('page_heading', $this->params->get('page_title', $menu->title));		}		else		{			$this->params->def('page_heading', JText::_('COM_TAGS_DEFAULT_PAGE_TITLE'));		}		$id = (int) @$menu->query['id'];		if ($menu && ($menu->query['option'] != 'com_tags'))		{			$this->params->set('page_subheading', $item->title);		}		// If this is not a single tag menu item, set the page title to the tag titles		$title = '';		if (!empty($this->item))		{			foreach ($this->item as $i => $itemElement)			{				if ($itemElement->title)				{					if ($i != 0)					{						$title .= ', ';					}					$title .= $itemElement->title;				}			}			$path = array(array('title' => $title, 'link' => ''));			if (empty($title))			{				$title = $app->getCfg('sitename');			}			elseif ($app->getCfg('sitename_pagetitles', 0) == 1)			{				$title = JText::sprintf('JPAGETITLE', $app->getCfg('sitename'), $title);			}			elseif ($app->getCfg('sitename_pagetitles', 0) == 2)			{				$title = JText::sprintf('JPAGETITLE', $title, $app->getCfg('sitename'));			}			$this->document->setTitle($title);			foreach ($this->item as $j => $itemElement)			{				if ($itemElement->metadesc)				{					$this->document->setDescription($this->item->metadesc);				}				elseif ($itemElement->metadesc && $this->params->get('menu-meta_description'))				{					$this->document->setDescription($this->params->get('menu-meta_description'));				}				if ($itemElement->metakey)				{					$this->document->setMetadata('keywords', $this->tag->metakey);				}				elseif (!$itemElement->metakey && $this->params->get('menu-meta_keywords'))				{					$this->document->setMetadata('keywords', $this->params->get('menu-meta_keywords'));				}				if ($this->params->get('robots'))				{					$this->document->setMetadata('robots', $this->params->get('robots'));				}				if ($app->getCfg('MetaAuthor') == '1')				{					$this->document->setMetaData('author', $itemElement->created_user_id);				}				$mdata = $this->item->metadata->toArray();				foreach ($mdata as $k => $v)				{					if ($v)					{						$this->document->setMetadata($k, $v);					}				}			}		}		// Add alternative feed link		if ($this->params->get('show_feed_link', 1) == 1)		{			$link	= '&format=feed&limitstart=';			$attribs = array('type' => 'application/rss+xml', 'title' => 'RSS 2.0');			$this->document->addHeadLink(JRoute::_($link.'&type=rss'), 'alternate', 'rel', $attribs);			$attribs = array('type' => 'application/atom+xml', 'title' => 'Atom 1.0');			$this->document->addHeadLink(JRoute::_($link.'&type=atom'), 'alternate', 'rel', $attribs);		}	}}
<?php/** * @package    Joomla.Platform * * @copyright  Copyright (C) 2005 - 2013 Open Source Matters, Inc. All rights reserved. * @license    GNU General Public License version 2 or later; see LICENSE */defined('JPATH_PLATFORM') or die;/** * Joomla Platform Factory class * * @package  Joomla.Platform * @since    11.1 */abstract class JFactory{	/**	 * @var    JApplication	 * @since  11.1	 */	public static $application = null;	/**	 * @var    JCache	 * @since  11.1	 */	public static $cache = null;	/**	 * @var    JConfig	 * @since  11.1	 */	public static $config = null;	/**	 * @var    array	 * @since  11.3	 */	public static $dates = array();	/**	 * @var    JSession	 * @since  11.1	 */	public static $session = null;	/**	 * @var    JLanguage	 * @since  11.1	 */	public static $language = null;	/**	 * @var    JDocument	 * @since  11.1	 */	public static $document = null;	/**	 * @var    JAccess	 * @since  11.1	 * @deprecated  13.3	 */	public static $acl = null;	/**	 * @var    JDatabaseDriver	 * @since  11.1	 */	public static $database = null;	/**	 * @var    JMail	 * @since  11.1	 */	public static $mailer = null;	/**	 * Get a application object.	 *	 * Returns the global {@link JApplication} object, only creating it if it doesn't already exist.	 *	 * @param   mixed   $id      A client identifier or name.	 * @param   array   $config  An optional associative array of configuration settings.	 * @param   string  $prefix  Application prefix	 *	 * @return  JApplication object	 *	 * @see     JApplication	 * @since   11.1	 * @throws  Exception	 */	public static function getApplication($id = null, array $config = array(), $prefix = 'J')	{		if (!self::$application)		{			if (!$id)			{				throw new Exception('Application Instantiation Error', 500);			}			self::$application = JApplication::getInstance($id, $config, $prefix);		}		return self::$application;	}	/**	 * Get a configuration object	 *	 * Returns the global {@link JRegistry} object, only creating it if it doesn't already exist.	 *	 * @param   string  $file       The path to the configuration file	 * @param   string  $type       The type of the configuration file	 * @param   string  $namespace  The namespace of the configuration file	 *	 * @return  JRegistry	 *	 * @see     JRegistry	 * @since   11.1	 */	public static function getConfig($file = null, $type = 'PHP', $namespace = '')	{		if (!self::$config)		{			if ($file === null)			{				$file = JPATH_PLATFORM . '/config.php';			}			self::$config = self::createConfig($file, $type, $namespace);		}		return self::$config;	}	/**	 * Get a session object.	 *	 * Returns the global {@link JSession} object, only creating it if it doesn't already exist.	 *	 * @param   array  $options  An array containing session options	 *	 * @return  JSession object	 *	 * @see     JSession	 * @since   11.1	 */	public static function getSession(array $options = array())	{		if (!self::$session)		{			self::$session = self::createSession($options);		}		return self::$session;	}	/**	 * Get a language object.	 *	 * Returns the global {@link JLanguage} object, only creating it if it doesn't already exist.	 *	 * @return  JLanguage object	 *	 * @see     JLanguage	 * @since   11.1	 */	public static function getLanguage()	{		if (!self::$language)		{			self::$language = self::createLanguage();		}		return self::$language;	}	/**	 * Get a document object.	 *	 * Returns the global {@link JDocument} object, only creating it if it doesn't already exist.	 *	 * @return  JDocument object	 *	 * @see     JDocument	 * @since   11.1	 */	public static function getDocument()	{		if (!self::$document)		{			self::$document = self::createDocument();		}		return self::$document;	}	/**	 * Get an user object.	 *	 * Returns the global {@link JUser} object, only creating it if it doesn't already exist.	 *	 * @param   integer  $id  The user to load - Can be an integer or string - If string, it is converted to ID automatically.	 *	 * @return  JUser object	 *	 * @see     JUser	 * @since   11.1	 */	public static function getUser($id = null)	{		$instance = self::getSession()->get('user');		if (is_null($id))		{			if (!($instance instanceof JUser))			{				$instance = JUser::getInstance();			}		}		elseif ($instance->id != $id)		{			$instance = JUser::getInstance($id);		}		return $instance;	}	/**	 * Get a cache object	 *	 * Returns the global {@link JCache} object	 *	 * @param   string  $group    The cache group name	 * @param   string  $handler  The handler to use	 * @param   string  $storage  The storage method	 *	 * @return  JCacheController object	 *	 * @see     JCache	 */	public static function getCache($group = '', $handler = 'callback', $storage = null)	{		$hash = md5($group . $handler . $storage);		if (isset(self::$cache[$hash]))		{			return self::$cache[$hash];		}		$handler = ($handler == 'function') ? 'callback' : $handler;		$options = array('defaultgroup' => $group);		if (isset($storage))		{			$options['storage'] = $storage;		}		$cache = JCache::getInstance($handler, $options);		self::$cache[$hash] = $cache;		return self::$cache[$hash];	}	/**	 * Get an authorization object	 *	 * Returns the global {@link JAccess} object, only creating it	 * if it doesn't already exist.	 *	 * @return  JAccess object	 *	 * @deprecated  13.3  Use JAccess directly.	 */	public static function getACL()	{		JLog::add(__METHOD__ . ' is deprecated. Use JAccess directly.', JLog::WARNING, 'deprecated');		if (!self::$acl)		{			self::$acl = new JAccess;		}		return self::$acl;	}	/**	 * Get a database object.	 *	 * Returns the global {@link JDatabaseDriver} object, only creating it if it doesn't already exist.	 *	 * @return  JDatabaseDriver	 *	 * @see     JDatabaseDriver	 * @since   11.1	 */	public static function getDbo()	{		if (!self::$database)		{			// Get the debug configuration setting			$conf = self::getConfig();			$debug = $conf->get('debug');			self::$database = self::createDbo();			self::$database->setDebug($debug);		}		return self::$database;	}	/**	 * Get a mailer object.	 *	 * Returns the global {@link JMail} object, only creating it if it doesn't already exist.	 *	 * @return  JMail object	 *	 * @see     JMail	 * @since   11.1	 */	public static function getMailer()	{		if (!self::$mailer)		{			self::$mailer = self::createMailer();		}		$copy = clone self::$mailer;		return $copy;	}	/**	 * Get a parsed XML Feed Source	 *	 * @param   string   $url         Url for feed source.	 * @param   integer  $cache_time  Time to cache feed for (using internal cache mechanism).	 *	 * @return  mixed  SimplePie parsed object on success, false on failure.	 *	 * @since   11.1	 * @deprecated  4.0  Use directly JFeedFactory or supply SimplePie instead. Mehod will be proxied to JFeedFactory beginning in 3.2	 */	public static function getFeedParser($url, $cache_time = 0)	{		if (!class_exists('JSimplepieFactory'))		{			throw new BadMethodCallException('JSimplepieFactory not found');		}		JLog::add(__METHOD__ . ' is deprecated.   Use JFeedFactory() or supply SimplePie instead.', JLog::WARNING, 'deprecated');		return JSimplepieFactory::getFeedParser($url, $cache_time);	}	/**	 * Reads a XML file.	 *	 * @param   string   $data    Full path and file name.	 * @param   boolean  $isFile  true to load a file or false to load a string.	 *	 * @return  mixed    JXMLElement or SimpleXMLElement on success or false on error.	 *	 * @see     JXMLElement	 * @since   11.1	 * @note    When JXMLElement is not present a SimpleXMLElement will be returned.	 * @deprecated  13.3 Use SimpleXML directly.	 */	public static function getXML($data, $isFile = true)	{		JLog::add(__METHOD__ . ' is deprecated. Use SimpleXML directly.', JLog::WARNING, 'deprecated');		$class = 'SimpleXMLElement';		if (class_exists('JXMLElement'))		{			$class = 'JXMLElement';		}		// Disable libxml errors and allow to fetch error information as needed		libxml_use_internal_errors(true);		if ($isFile)		{			// Try to load the XML file			$xml = simplexml_load_file($data, $class);		}		else		{			// Try to load the XML string			$xml = simplexml_load_string($data, $class);		}		if ($xml === false)		{			JLog::add(JText::_('JLIB_UTIL_ERROR_XML_LOAD'), JLog::WARNING, 'jerror');			if ($isFile)			{				JLog::add($data, JLog::WARNING, 'jerror');			}			foreach (libxml_get_errors() as $error)			{				JLog::add($error->message, JLog::WARNING, 'jerror');			}		}		return $xml;	}	/**	 * Get an editor object.	 *	 * @param   string  $editor  The editor to load, depends on the editor plugins that are installed	 *	 * @return  JEditor instance of JEditor	 *	 * @since   11.1	 * @deprecated 12.3 Use JEditor directly	 */	public static function getEditor($editor = null)	{		JLog::add(__METHOD__ . ' is deprecated. Use JEditor directly.', JLog::WARNING, 'deprecated');		if (!class_exists('JEditor'))		{			throw new BadMethodCallException('JEditor not found');		}		JLog::add(__METHOD__ . ' is deprecated. Use JEditor directly.', JLog::WARNING, 'deprecated');		// Get the editor configuration setting		if (is_null($editor))		{			$conf = self::getConfig();			$editor = $conf->get('editor');		}		return JEditor::getInstance($editor);	}	/**	 * Return a reference to the {@link JURI} object	 *	 * @param   string  $uri  Uri name.	 *	 * @return  JURI object	 *	 * @see     JURI	 * @since   11.1	 * @deprecated  13.3 Use JURI directly.	 */	public static function getURI($uri = 'SERVER')	{		JLog::add(__METHOD__ . ' is deprecated. Use JURI directly.', JLog::WARNING, 'deprecated');		return JURI::getInstance($uri);	}	/**	 * Return the {@link JDate} object	 *	 * @param   mixed  $time      The initial time for the JDate object	 * @param   mixed  $tzOffset  The timezone offset.	 *	 * @return  JDate object	 *	 * @see     JDate	 * @since   11.1	 */	public static function getDate($time = 'now', $tzOffset = null)	{		static $classname;		static $mainLocale;		$language = self::getLanguage();		$locale = $language->getTag();		if (!isset($classname) || $locale != $mainLocale)		{			// Store the locale for future reference			$mainLocale = $locale;			if ($mainLocale !== false)			{				$classname = str_replace('-', '_', $mainLocale) . 'Date';				if (!class_exists($classname))				{					// The class does not exist, default to JDate					$classname = 'JDate';				}			}			else			{				// No tag, so default to JDate				$classname = 'JDate';			}		}		$key = $time . '-' . ($tzOffset instanceof DateTimeZone ? $tzOffset->getName() : (string) $tzOffset);		if (!isset(self::$dates[$classname][$key]))		{			self::$dates[$classname][$key] = new $classname($time, $tzOffset);		}		$date = clone self::$dates[$classname][$key];		return $date;	}	/**	 * Create a configuration object	 *	 * @param   string  $file       The path to the configuration file.	 * @param   string  $type       The type of the configuration file.	 * @param   string  $namespace  The namespace of the configuration file.	 *	 * @return  JRegistry	 *	 * @see     JRegistry	 * @since   11.1	 */	protected static function createConfig($file, $type = 'PHP', $namespace = '')	{		if (is_file($file))		{			include_once $file;		}		// Create the registry with a default namespace of config		$registry = new JRegistry;		// Sanitize the namespace.		$namespace = ucfirst((string) preg_replace('/[^A-Z_]/i', '', $namespace));		// Build the config name.		$name = 'JConfig' . $namespace;		// Handle the PHP configuration type.		if ($type == 'PHP' && class_exists($name))		{			// Create the JConfig object			$config = new $name;			// Load the configuration values into the registry			$registry->loadObject($config);		}		return $registry;	}	/**	 * Create a session object	 *	 * @param   array  $options  An array containing session options	 *	 * @return  JSession object	 *	 * @since   11.1	 */	protected static function createSession(array $options = array())	{		// Get the editor configuration setting		$conf = self::getConfig();		$handler = $conf->get('session_handler', 'none');		// Config time is in minutes		$options['expire'] = ($conf->get('lifetime')) ? $conf->get('lifetime') * 60 : 900;		$session = JSession::getInstance($handler, $options);		if ($session->getState() == 'expired')		{			$session->restart();		}		return $session;	}	/**	 * Create an database object	 *	 * @return  JDatabaseDriver	 *	 * @see     JDatabaseDriver	 * @since   11.1	 */	protected static function createDbo()	{		$conf = self::getConfig();		$host = $conf->get('host');		$user = $conf->get('user');		$password = $conf->get('password');		$database = $conf->get('db');		$prefix = $conf->get('dbprefix');		$driver = $conf->get('dbtype');		$debug = $conf->get('debug');		$options = array('driver' => $driver, 'host' => $host, 'user' => $user, 'password' => $password, 'database' => $database, 'prefix' => $prefix);		try		{			$db = JDatabaseDriver::getInstance($options);		}		catch (RuntimeException $e)		{			if (!headers_sent())			{				header('HTTP/1.1 500 Internal Server Error');			}			jexit('Database Error: ' . $e->getMessage());		}		$db->setDebug($debug);		return $db;	}	/**	 * Create a mailer object	 *	 * @return  JMail object	 *	 * @see     JMail	 * @since   11.1	 */	protected static function createMailer()	{		$conf = self::getConfig();		$smtpauth = ($conf->get('smtpauth') == 0) ? null : 1;		$smtpuser = $conf->get('smtpuser');		$smtppass = $conf->get('smtppass');		$smtphost = $conf->get('smtphost');		$smtpsecure = $conf->get('smtpsecure');		$smtpport = $conf->get('smtpport');		$mailfrom = $conf->get('mailfrom');		$fromname = $conf->get('fromname');		$mailer = $conf->get('mailer');		// Create a JMail object		$mail = JMail::getInstance();		// Set default sender without Reply-to		$mail->SetFrom(JMailHelper::cleanLine($mailfrom), JMailHelper::cleanLine($fromname), 0);		// Default mailer is to use PHP's mail function		switch ($mailer)		{			case 'smtp':				$mail->useSMTP($smtpauth, $smtphost, $smtpuser, $smtppass, $smtpsecure, $smtpport);				break;			case 'sendmail':				$mail->IsSendmail();				break;			default:				$mail->IsMail();				break;		}		return $mail;	}	/**	 * Create a language object	 *	 * @return  JLanguage object	 *	 * @see     JLanguage	 * @since   11.1	 */	protected static function createLanguage()	{		$conf = self::getConfig();		$locale = $conf->get('language');		$debug = $conf->get('debug_lang');		$lang = JLanguage::getInstance($locale, $debug);		return $lang;	}	/**	 * Create a document object	 *	 * @return  JDocument object	 *	 * @see     JDocument	 * @since   11.1	 */	protected static function createDocument()	{		$lang = self::getLanguage();		$input = self::getApplication()->input;		$type = $input->get('format', 'html', 'word');		$attributes = array('charset' => 'utf-8', 'lineend' => 'unix', 'tab' => '  ', 'language' => $lang->getTag(),			'direction' => $lang->isRTL() ? 'rtl' : 'ltr');		return JDocument::getInstance($type, $attributes);	}	/**	 * Creates a new stream object with appropriate prefix	 *	 * @param   boolean  $use_prefix   Prefix the connections for writing	 * @param   boolean  $use_network  Use network if available for writing; use false to disable (e.g. FTP, SCP)	 * @param   string   $ua           UA User agent to use	 * @param   boolean  $uamask       User agent masking (prefix Mozilla)	 *	 * @return  JStream	 *	 * @see JStream	 * @since   11.1	 */	public static function getStream($use_prefix = true, $use_network = true, $ua = null, $uamask = false)	{		jimport('joomla.filesystem.stream');		// Setup the context; Joomla! UA and overwrite		$context = array();		$version = new JVersion;		// Set the UA for HTTP and overwrite for FTP		$context['http']['user_agent'] = $version->getUserAgent($ua, $uamask);		$context['ftp']['overwrite'] = true;		if ($use_prefix)		{			$FTPOptions = JClientHelper::getCredentials('ftp');			$SCPOptions = JClientHelper::getCredentials('scp');			if ($FTPOptions['enabled'] == 1 && $use_network)			{				$prefix = 'ftp://' . $FTPOptions['user'] . ':' . $FTPOptions['pass'] . '@' . $FTPOptions['host'];				$prefix .= $FTPOptions['port'] ? ':' . $FTPOptions['port'] : '';				$prefix .= $FTPOptions['root'];			}			elseif ($SCPOptions['enabled'] == 1 && $use_network)			{				$prefix = 'ssh2.sftp://' . $SCPOptions['user'] . ':' . $SCPOptions['pass'] . '@' . $SCPOptions['host'];				$prefix .= $SCPOptions['port'] ? ':' . $SCPOptions['port'] : '';				$prefix .= $SCPOptions['root'];			}			else			{				$prefix = JPATH_ROOT . '/';			}			$retval = new JStream($prefix, JPATH_ROOT, $context);		}		else		{			$retval = new JStream('', '', $context);		}		return $retval;	}}
<?php/** * @package     Joomla.Administrator * @subpackage  com_finder * * @copyright   Copyright (C) 2005 - 2013 Open Source Matters, Inc. All rights reserved. * @license     GNU General Public License version 2 or later; see LICENSE */defined('_JEXEC') or die;// Load the tooltip behavior.JHtml::_('behavior.tooltip');JHtml::_('behavior.formvalidation');JHtml::_('behavior.keepalive');JHtml::_('formbehavior.chosen', 'select');?><form action="<?php echo JRoute::_('index.php?option=com_finder&view=filter&layout=edit&filter_id=' . (int) $this->item->filter_id); ?>" method="post" name="adminForm" id="adminForm" class="form-validate form-horizontal">	<fieldset>		<?php echo JHtml::_('bootstrap.startTabSet', 'myTab', array('active' => 'basic')); ?>			<?php echo JHtml::_('bootstrap.addTab', 'myTab', 'basic', JText::_('COM_FINDER_EDIT_FILTER', true)); ?>				<div class="control-group">					<div class="control-label"><?php echo $this->form->getLabel('title'); ?></div>					<div class="controls"><?php echo $this->form->getInput('title'); ?></div>				</div>				<div class="control-group">					<div class="control-label"><?php echo $this->form->getLabel('alias'); ?></div>					<div class="controls"><?php echo $this->form->getInput('alias'); ?></div>				</div>				<div class="control-group">					<div class="control-label"><?php echo $this->form->getLabel('state'); ?></div>					<div class="controls"><?php echo $this->form->getInput('state'); ?></div>				</div>				<div class="control-group">					<div class="control-label"><?php echo $this->form->getLabel('map_count'); ?></div>					<div class="controls"><?php echo $this->form->getInput('map_count'); ?></div>				</div>			<?php echo JHtml::_('bootstrap.endTab'); ?>			<?php echo JHtml::_('bootstrap.addTab', 'myTab', 'params', JText::_('COM_FINDER_FILTER_FIELDSET_PARAMS', true)); ?>				<?php foreach ($this->form->getGroup('params') as $field) : ?>					<div class="control-group">						<?php if (!$field->hidden) : ?>							<div class="control-label"><?php echo $field->label; ?></div>						<?php endif; ?>						<div class="controls"><?php echo $field->input; ?></div>					</div>				<?php endforeach; ?>			<?php echo JHtml::_('bootstrap.endTab'); ?>			<?php echo JHtml::_('bootstrap.addTab', 'myTab', 'details', JText::_('COM_FINDER_FILTER_FIELDSET_DETAILS', true)); ?>				<div class="control-group">					<div class="control-label"><?php echo $this->form->getLabel('created_by'); ?></div>					<div class="controls"><?php echo $this->form->getInput('created_by'); ?></div>				</div>				<div class="control-group">					<div class="control-label"><?php echo $this->form->getLabel('created_by_alias'); ?></div>					<div class="controls"><?php echo $this->form->getInput('created_by_alias'); ?></div>				</div>				<div class="control-group">					<div class="control-label"><?php echo $this->form->getLabel('created'); ?></div>					<div class="controls"><?php echo $this->form->getInput('created'); ?></div>				</div>				<?php if ($this->item->modified_by) : ?>					<div class="control-group">						<div class="control-label"><?php echo $this->form->getLabel('modified_by'); ?></div>						<div class="controls"><?php echo $this->form->getInput('modified_by'); ?></div>					</div>					<div class="control-group">						<div class="control-label"><?php echo $this->form->getLabel('modified'); ?></div>						<div class="controls"><?php echo $this->form->getInput('modified'); ?></div>					</div>				<?php endif; ?>			<?php echo JHtml::_('bootstrap.endTab'); ?>		<?php echo JHtml::_('bootstrap.endTabSet'); ?>	</fieldset>	<div id="finder-filter-window">		<?php echo JHtml::_('filter.slider', array('selected_nodes' => $this->filter->data)); ?>	</div>	<input type="hidden" name="task" value="" />	<input type="hidden" name="return" value="<?php echo JFactory::getApplication()->input->get('return', '', 'cmd');?>" />	<?php echo JHtml::_('form.token'); ?></form>
<?php/** * @package     Joomla.Platform * @subpackage  Form * * @copyright   Copyright (C) 2005 - 2013 Open Source Matters, Inc. All rights reserved. * @license     GNU General Public License version 2 or later; see LICENSE */defined('JPATH_PLATFORM') or die;JFormHelper::loadFieldClass('list');/** * Supports an custom SQL select list * * @package     Joomla.Platform * @subpackage  Form * @since       11.1 */class JFormFieldSQL extends JFormFieldList{	/**	 * The form field type.	 *	 * @var    string	 * @since  11.1	 */	public $type = 'SQL';	/**	 * Method to get the custom field options.	 * Use the query attribute to supply a query to generate the list.	 *	 * @return  array  The field option objects.	 *	 * @since   11.1	 */	protected function getOptions()	{		$options = array();		// Initialize some field attributes.		$key = $this->element['key_field'] ? (string) $this->element['key_field'] : 'value';		$value = $this->element['value_field'] ? (string) $this->element['value_field'] : (string) $this->element['name'];		$translate = $this->element['translate'] ? (string) $this->element['translate'] : false;		$query = (string) $this->element['query'];		// Get the database object.		$db = JFactory::getDbo();		// Set the query and get the result list.		$db->setQuery($query);		$items = $db->loadObjectlist();		// Build the field options.		if (!empty($items))		{			foreach ($items as $item)			{				if ($translate == true)				{					$options[] = JHtml::_('select.option', $item->$key, JText::_($item->$value));				}				else				{					$options[] = JHtml::_('select.option', $item->$key, $item->$value);				}			}		}		// Merge any additional options in the XML definition.		$options = array_merge(parent::getOptions(), $options);		return $options;	}}
<?php/** * @package     Joomla.Site * @subpackage  com_weblinks * * @copyright   Copyright (C) 2005 - 2013 Open Source Matters, Inc. All rights reserved. * @license     GNU General Public License version 2 or later; see LICENSE.txt */defined('_JEXEC') or die;/** * Weblinks Component Weblink Model * * @package     Joomla.Site * @subpackage  com_weblinks * @since       1.5 */class WeblinksModelCategory extends JModelList{	/**	 * Category items data	 *	 * @var array	 */	protected $_item = null;	protected $_articles = null;	protected $_siblings = null;	protected $_children = null;	protected $_parent = null;	/**	 * Constructor.	 *	 * @param   array  An optional associative array of configuration settings.	 * @see     JController	 * @since   1.6	 */	public function __construct($config = array())	{		if (empty($config['filter_fields']))		{			$config['filter_fields'] = array(				'id', 'a.id',				'title', 'a.title',				'hits', 'a.hits',				'ordering', 'a.ordering',			);		}		parent::__construct($config);	}	/**	 * The category that applies.	 *	 * @access    protected	 * @var        object	 */	protected $_category = null;	/**	 * The list of other weblink categories.	 *	 * @access    protected	 * @var        array	 */	protected $_categories = null;	/**	 * Method to get a list of items.	 *	 * @return  mixed  An array of objects on success, false on failure.	 */	public function getItems()	{		// Invoke the parent getItems method to get the main list		$items = parent::getItems();		// Convert the params field into an object, saving original in _params		foreach ($items as $item)		{			if (!isset($this->_params))			{				$params = new JRegistry;				$params->loadString($item->params);				$item->params = $params;			}			// Get the tags			$item->tags = new JHelperTags;			$item->tags->getItemTags('com_weblinks.category', $item->id);		}		return $items;	}	/**	 * Method to build an SQL query to load the list data.	 *	 * @return  string    An SQL query	 * @since   1.6	 */	protected function getListQuery()	{		$user = JFactory::getUser();		$groups = implode(',', $user->getAuthorisedViewLevels());		// Create a new query object.		$db = $this->getDbo();		$query = $db->getQuery(true);		// Select required fields from the categories.		$query->select($this->getState('list.select', 'a.*'))			->from($db->quoteName('#__weblinks') . ' AS a')			->where('a.access IN (' . $groups . ')');		// Filter by category.		if ($categoryId = $this->getState('category.id'))		{			$query->where('a.catid = ' . (int) $categoryId)				->join('LEFT', '#__categories AS c ON c.id = a.catid')				->where('c.access IN (' . $groups . ')');			//Filter by published category			$cpublished = $this->getState('filter.c.published');			if (is_numeric($cpublished))			{				$query->where('c.published = ' . (int) $cpublished);			}		}		// Join over the users for the author and modified_by names.		$query->select("CASE WHEN a.created_by_alias > ' ' THEN a.created_by_alias ELSE ua.name END AS author")			->select("ua.email AS author_email")			->join('LEFT', '#__users AS ua ON ua.id = a.created_by')			->join('LEFT', '#__users AS uam ON uam.id = a.modified_by');		// Filter by state		$state = $this->getState('filter.state');		if (is_numeric($state))		{			$query->where('a.state = ' . (int) $state);		}		// do not show trashed links on the front-end		$query->where('a.state != -2');		// Filter by start and end dates.		$nullDate = $db->quote($db->getNullDate());		$date = JFactory::getDate();		$nowDate = $db->quote($date->toSql());		if ($this->getState('filter.publish_date'))		{			$query->where('(a.publish_up = ' . $nullDate . ' OR a.publish_up <= ' . $nowDate . ')')				->where('(a.publish_down = ' . $nullDate . ' OR a.publish_down >= ' . $nowDate . ')');		}		// Filter by language		if ($this->getState('filter.language'))		{			$query->where('a.language in (' . $db->quote(JFactory::getLanguage()->getTag()) . ',' . $db->quote('*') . ')');		}		// Filter by search in title		$search = $this->getState('list.filter');		if (!empty($search))		{			$search = $db->quote('%' . $db->escape($search, true) . '%');			$query->where('(a.title LIKE ' . $search . ')');		}		// Add the list ordering clause.		$query->order($db->escape($this->getState('list.ordering', 'a.ordering')) . ' ' . $db->escape($this->getState('list.direction', 'ASC')));		return $query;	}	/**	 * Method to auto-populate the model state.	 *	 * Note. Calling getState in this method will result in recursion.	 *	 * @since   1.6	 */	protected function populateState($ordering = null, $direction = null)	{		$app = JFactory::getApplication();		$params = JComponentHelper::getParams('com_weblinks');		// List state information		$limit = $app->getUserStateFromRequest('global.list.limit', 'limit', $app->getCfg('list_limit'), 'uint');		$this->setState('list.limit', $limit);		$limitstart = $app->input->get('limitstart', 0, 'uint');		$this->setState('list.start', $limitstart);		// Optional filter text		$this->setState('list.filter', $app->input->getString('filter-search'));		$orderCol = $app->input->get('filter_order', 'ordering');		if (!in_array($orderCol, $this->filter_fields))		{			$orderCol = 'ordering';		}		$this->setState('list.ordering', $orderCol);		$listOrder = $app->input->get('filter_order_Dir', 'ASC');		if (!in_array(strtoupper($listOrder), array('ASC', 'DESC', '')))		{			$listOrder = 'ASC';		}		$this->setState('list.direction', $listOrder);		$id = $app->input->get('id', 0, 'int');		$this->setState('category.id', $id);		$user = JFactory::getUser();		if ((!$user->authorise('core.edit.state', 'com_weblinks')) && (!$user->authorise('core.edit', 'com_weblinks')))		{			// limit to published for people who can't edit or edit.state.			$this->setState('filter.state', 1);			// Filter by start and end dates.			$this->setState('filter.publish_date', true);		}		$this->setState('filter.language', $app->getLanguageFilter());		// Load the parameters.		$this->setState('params', $params);	}	/**	 * Method to get category data for the current category	 *	 * @param   integer  An optional ID	 *	 * @return  object	 * @since   1.5	 */	public function getCategory()	{		if (!is_object($this->_item))		{			$app = JFactory::getApplication();			$menu = $app->getMenu();			$active = $menu->getActive();			$params = new JRegistry;			if ($active)			{				$params->loadString($active->params);			}			$options = array();			$options['countItems'] = $params->get('show_cat_num_links_cat', 1) || $params->get('show_empty_categories', 0);			$categories = JCategories::getInstance('Weblinks', $options);			$this->_item = $categories->get($this->getState('category.id', 'root'));			if (is_object($this->_item))			{				$this->_children = $this->_item->getChildren();				$this->_parent = false;				if ($this->_item->getParent())				{					$this->_parent = $this->_item->getParent();				}				$this->_rightsibling = $this->_item->getSibling();				$this->_leftsibling = $this->_item->getSibling(false);			}			else			{				$this->_children = false;				$this->_parent = false;			}		}		return $this->_item;	}	/**	 * Get the parent category	 *	 * @param   integer  An optional category id. If not supplied, the model state 'category.id' will be used.	 *	 * @return  mixed  An array of categories or false if an error occurs.	 */	public function getParent()	{		if (!is_object($this->_item))		{			$this->getCategory();		}		return $this->_parent;	}	/**	 * Get the sibling (adjacent) categories.	 *	 * @return  mixed  An array of categories or false if an error occurs.	 */	function &getLeftSibling()	{		if (!is_object($this->_item))		{			$this->getCategory();		}		return $this->_leftsibling;	}	function &getRightSibling()	{		if (!is_object($this->_item))		{			$this->getCategory();		}		return $this->_rightsibling;	}	/**	 * Get the child categories.	 *	 * @param   integer  An optional category id. If not supplied, the model state 'category.id' will be used.	 *	 * @return  mixed  An array of categories or false if an error occurs.	 */	function &getChildren()	{		if (!is_object($this->_item))		{			$this->getCategory();		}		return $this->_children;	}}
<?php/** * @package     Joomla.Site * @subpackage  com_weblinks * * @copyright   Copyright (C) 2005 - 2013 Open Source Matters, Inc. All rights reserved. * @license     GNU General Public License version 2 or later; see LICENSE.txt */defined('_JEXEC') or die;/** * Content categories view. * * @package     Joomla.Site * @subpackage  com_weblinks * @since       1.5 */class WeblinksViewCategories extends JViewLegacy{	protected $state = null;	protected $item = null;	protected $items = null;	/**	 * Display the view	 *	 * @return  mixed  False on error, null otherwise.	 */	public function display($tpl = null)	{		$state		= $this->get('State');		$items		= $this->get('Items');		$parent		= $this->get('Parent');		// Check for errors.		if (count($errors = $this->get('Errors')))		{			JError::raiseWarning(500, implode("\n", $errors));			return false;		}		if ($items === false)		{			return JError::raiseError(404, JText::_('JGLOBAL_CATEGORY_NOT_FOUND'));		}		if ($parent == false)		{			return JError::raiseError(404, JText::_('JGLOBAL_CATEGORY_NOT_FOUND'));		}		$params = &$state->params;		$items = array($parent->id => $items);		//Escape strings for HTML output		$this->pageclass_sfx = htmlspecialchars($params->get('pageclass_sfx'));		$this->maxLevelcat = $params->get('maxLevelcat', -1);		$this->params = &$params;		$this->parent = &$parent;		$this->items  = &$items;		$this->_prepareDocument();		parent::display($tpl);	}	/**	 * Prepares the document	 */	protected function _prepareDocument()	{		$app	= JFactory::getApplication();		$menus	= $app->getMenu();		$title	= null;		// Because the application sets a default page title,		// we need to get it from the menu item itself		$menu = $menus->getActive();		if ($menu)		{			$this->params->def('page_heading', $this->params->get('page_title', $menu->title));		}		else		{			$this->params->def('page_heading', JText::_('COM_WEBLINKS_DEFAULT_PAGE_TITLE'));		}		$title = $this->params->get('page_title', '');		if (empty($title))		{			$title = $app->getCfg('sitename');		}		elseif ($app->getCfg('sitename_pagetitles', 0) == 1)		{			$title = JText::sprintf('JPAGETITLE', $app->getCfg('sitename'), $title);		}		elseif ($app->getCfg('sitename_pagetitles', 0) == 2)		{			$title = JText::sprintf('JPAGETITLE', $title, $app->getCfg('sitename'));		}		$this->document->setTitle($title);		if ($this->params->get('menu-meta_description'))		{			$this->document->setDescription($this->params->get('menu-meta_description'));		}		if ($this->params->get('menu-meta_keywords'))		{			$this->document->setMetadata('keywords', $this->params->get('menu-meta_keywords'));		}		if ($this->params->get('robots'))		{			$this->document->setMetadata('robots', $this->params->get('robots'));		}	}}
<?php/** * @package     Joomla.Administrator * @subpackage  com_tags * * @copyright   Copyright (C) 2005 - 2013 Open Source Matters, Inc. All rights reserved. * @license     GNU General Public License version 2 or later; see LICENSE.txt */defined('_JEXEC') or die;// Include the component HTML helpers.JHtml::addIncludePath(JPATH_COMPONENT . '/helpers/html');JHtml::_('bootstrap.tooltip');JHtml::_('behavior.multiselect');JHtml::_('formbehavior.chosen', 'select');$app		= JFactory::getApplication();$user		= JFactory::getUser();$userId		= $user->get('id');$listOrder	= $this->escape($this->state->get('list.ordering'));$listDirn	= $this->escape($this->state->get('list.direction'));$ordering 	= ($listOrder == 'a.lft');$canOrder	= $user->authorise('core.edit.state',	'com_tags');$saveOrder 	= ($listOrder == 'a.lft' && $listDirn == 'asc');if ($saveOrder){	$saveOrderingUrl = 'index.php?option=com_tags&task=tags.saveOrderAjax';	JHtml::_('sortablelist.sortable', 'categoryList', 'adminForm', strtolower($listDirn), $saveOrderingUrl, false, true);}$sortFields = $this->getSortFields();?><script type="text/javascript">	Joomla.orderTable = function() {		table = document.getElementById("sortTable");		direction = document.getElementById("directionTable");		order = table.options[table.selectedIndex].value;		if (order != '<?php echo $listOrder; ?>')		{			dirn = 'asc';		} else {			dirn = direction.options[direction.selectedIndex].value;		}		Joomla.tableOrdering(order, dirn, '');	}</script><form action="<?php echo JRoute::_('index.php?option=com_tags&view=tags');?>" method="post" name="adminForm" id="adminForm"><?php if (!empty( $this->sidebar)): ?>	<div id="j-sidebar-container" class="span2">		<?php echo $this->sidebar; ?>	</div>	<div id="j-main-container" class="span10"><?php else : ?>	<div id="j-main-container"><?php endif;?>		<div id="filter-bar" class="btn-toolbar">			<div class="filter-search btn-group pull-left">				<label for="filter_search" class="element-invisible"><?php echo JText::_('COM_TAGS_ITEMS_SEARCH_FILTER');?></label>				<input type="text" name="filter_search" id="filter_search" placeholder="<?php echo JText::_('COM_TAGS_ITEMS_SEARCH_FILTER'); ?>" value="<?php echo $this->escape($this->state->get('filter.search')); ?>" title="<?php echo JText::_('COM_TAGS_ITEMS_SEARCH_FILTER'); ?>" />			</div>			<div class="btn-group hidden-phone">				<button class="btn tip" type="submit" title="<?php echo JText::_('JSEARCH_FILTER_SUBMIT'); ?>"><i class="icon-search"></i></button>				<button class="btn tip" type="button" onclick="document.id('filter_search').value='';this.form.submit();" title="<?php echo JText::_('JSEARCH_FILTER_CLEAR'); ?>"><i class="icon-remove"></i></button>			</div>			<div class="btn-group pull-right hidden-phone">				<label for="limit" class="element-invisible"><?php echo JText::_('JFIELD_PLG_SEARCH_SEARCHLIMIT_DESC');?></label>				<?php echo $this->pagination->getLimitBox(); ?>			</div>			<div class="btn-group pull-right hidden-phone">				<label for="directionTable" class="element-invisible"><?php echo JText::_('JFIELD_ORDERING_DESC');?></label>				<select name="directionTable" id="directionTable" class="input-medium" onchange="Joomla.orderTable()">					<option value=""><?php echo JText::_('JFIELD_ORDERING_DESC');?></option>					<option value="asc" <?php if ($listDirn == 'asc') echo 'selected="selected"'; ?>><?php echo JText::_('JGLOBAL_ORDER_ASCENDING');?></option>					<option value="desc" <?php if ($listDirn == 'desc') echo 'selected="selected"'; ?>><?php echo JText::_('JGLOBAL_ORDER_DESCENDING');?></option>				</select>			</div>			<div class="btn-group pull-right">				<label for="sortTable" class="element-invisible"><?php echo JText::_('JGLOBAL_SORT_BY');?></label>				<select name="sortTable" id="sortTable" class="input-medium" onchange="Joomla.orderTable()">					<option value=""><?php echo JText::_('JGLOBAL_SORT_BY');?></option>					<?php echo JHtml::_('select.options', $sortFields, 'value', 'text', $listOrder);?>				</select>			</div>			<div class="clearfix"></div>		</div>		<table class="table table-striped" id="categoryList">			<thead>				<tr>					<th width="1%" class="hidden-phone">						<?php echo JHtml::_('grid.sort', '<i class="icon-menu-2"></i>', 'a.ordering', $listDirn, $listOrder, null, 'asc', 'JGRID_HEADING_ORDERING'); ?>					</th>					<th width="1%" class="hidden-phone">						<input type="checkbox" name="checkall-toggle" value="" title="<?php echo JText::_('JGLOBAL_CHECK_ALL'); ?>" onclick="Joomla.checkAll(this)" />					</th>					<th width="1%" class="nowrap center">						<?php echo JHtml::_('grid.sort', 'JSTATUS', 'a.published', $listDirn, $listOrder); ?>					</th>					<th>						<?php echo JHtml::_('grid.sort', 'JGLOBAL_TITLE', 'a.title', $listDirn, $listOrder); ?>					</th>				<th width="10%" class="nowrap hidden-phone">					<?php echo JHtml::_('grid.sort',  'JGRID_HEADING_ACCESS', 'a.access', $listDirn, $listOrder); ?>				</th>				<th width="5%" class="nowrap hidden-phone">					<?php echo JHtml::_('grid.sort', 'JGRID_HEADING_LANGUAGE', 'language', $this->state->get('list.direction'), $this->state->get('list.ordering')); ?>				</th>					<th width="1%" class="nowrap hidden-phone">						<?php echo JHtml::_('grid.sort', 'JGRID_HEADING_ID', 'a.id', $listDirn, $listOrder); ?>					</th>				</tr>			</thead>			<tfoot>				<tr>					<td colspan="15">						<?php echo $this->pagination->getListFooter(); ?>					</td>				</tr>			</tfoot>			<tbody>			<?php			$originalOrders = array();			foreach ($this->items as $i => $item) :				$orderkey   = array_search($item->id, $this->ordering[$item->parent_id]);				$canCreate  = $user->authorise('core.create',     'com_tags');				$canEdit    = $user->authorise('core.edit',       'com_tags');				$canCheckin = $user->authorise('core.manage',     'com_checkin') || $item->checked_out == $user->get('id')|| $item->checked_out == 0;				$canChange  = $user->authorise('core.edit.state', 'com_tags') && $canCheckin;				// Get the parents of item for sorting				if ($item->level > 1)				{					$parentsStr = "";					$_currentParentId = $item->parent_id;					$parentsStr = " ".$_currentParentId;					for ($j = 0; $j < $item->level; $j++)					{						foreach ($this->ordering as $k => $v)						{							$v = implode("-", $v);							$v = "-" . $v . "-";							if (strpos($v, "-" . $_currentParentId . "-") !== false)							{								$parentsStr .= " " . $k;								$_currentParentId = $k;								break;							}						}					}				}				else				{					$parentsStr = "";				}				?>					<tr class="row<?php echo $i % 2; ?>" sortable-group-id="<?php echo $item->parent_id;?>" item-id="<?php echo $item->id?>" parents="<?php echo $parentsStr?>" level="<?php echo $item->level?>">						<td class="order nowrap center hidden-phone">						<?php if ($canChange) :							$disableClassName = '';							$disabledLabel    = '';							if (!$saveOrder) :								$disabledLabel    = JText::_('JORDERINGDISABLED');								$disableClassName = 'inactive tip-top';							endif; ?>							<span class="sortable-handler hasTooltip <?php echo $disableClassName?>" title="<?php echo $disabledLabel?>">								<i class="icon-menu"></i>							</span>						<?php else : ?>							<span class="sortable-handler inactive">								<i class="icon-menu"></i>							</span>						<?php endif; ?>							<input type="text" style="display:none" name="order[]" size="5" value="<?php echo $orderkey + 1;?>" />						</td>						<td class="center hidden-phone">							<?php echo JHtml::_('grid.id', $i, $item->id); ?>						</td>						<td class="center">							<?php echo JHtml::_('jgrid.published', $item->published, $i, 'tags.', $canChange);?>						</td>						<td>							<?php if ($item->level > 0): ?>							<?php echo str_repeat('<span class="gi">&mdash;</span>', $item->level - 1) ?>							<?php endif; ?>							<?php if ($item->checked_out) : ?>								<?php echo JHtml::_('jgrid.checkedout', $i, $item->editor, $item->checked_out_time, 'tags.', $canCheckin); ?>							<?php endif; ?>							<?php if ($canEdit || $canEditOwn) : ?>								<a href="<?php echo JRoute::_('index.php?option=com_tags&task=tag.edit&id='.$item->id);?>">									<?php echo $this->escape($item->title); ?></a>							<?php else : ?>								<?php echo $this->escape($item->title); ?>							<?php endif; ?>							<span class="small" title="<?php echo $this->escape($item->path); ?>">								<?php if (empty($item->note)) : ?>									<?php echo JText::sprintf('JGLOBAL_LIST_ALIAS', $this->escape($item->alias));?>								<?php else : ?>									<?php echo JText::sprintf('JGLOBAL_LIST_ALIAS_NOTE', $this->escape($item->alias), $this->escape($item->note));?>								<?php endif; ?>							</span>						</td>					<td class="small hidden-phone">						<?php echo $this->escape($item->access_title); ?>					</td>					<td class="small nowrap hidden-phone">					<?php if ($item->language == '*') : ?>						<?php echo JText::alt('JALL', 'language'); ?>						<?php else:?>							<?php echo $item->language_title ? $this->escape($item->language_title) : JText::_('JUNDEFINED'); ?>						<?php endif;?>						</td>						<td class="center hidden-phone">							<span title="<?php echo sprintf('%d-%d', $item->lft, $item->rgt); ?>">								<?php echo (int) $item->id; ?></span>						</td>					</tr>			<?php endforeach; ?>			</tbody>		</table>		<?php //Load the batch processing form. ?>		<?php echo $this->loadTemplate('batch'); ?>		<input type="hidden" name="task" value="" />		<input type="hidden" name="boxchecked" value="0" />		<input type="hidden" name="filter_order" value="<?php echo $listOrder; ?>" />		<input type="hidden" name="filter_order_Dir" value="<?php echo $listDirn; ?>" />		<input type="hidden" name="original_order_values" value="<?php echo implode($originalOrders, ','); ?>" />		<?php echo JHtml::_('form.token'); ?>	</div></form>
<?php/** * @package     Joomla.Administrator * @subpackage  com_installer * * @copyright   Copyright (C) 2005 - 2013 Open Source Matters, Inc. All rights reserved. * @license     GNU General Public License version 2 or later; see LICENSE.txt */defined('_JEXEC') or die;if (!JFactory::getUser()->authorise('core.manage', 'com_installer')){	return JError::raiseWarning(404, JText::_('JERROR_ALERTNOAUTHOR'));}$controller	= JControllerLegacy::getInstance('Installer');$controller->execute(JFactory::getApplication()->input->get('task'));$controller->redirect();
<?php/** * @package     Joomla.Administrator * @subpackage  com_content * * @copyright   Copyright (C) 2005 - 2013 Open Source Matters, Inc. All rights reserved. * @license     GNU General Public License version 2 or later; see LICENSE.txt */defined('_JEXEC') or die;JLoader::register('ContentHelper', JPATH_ADMINISTRATOR . '/components/com_content/helpers/content.php');/** * @package     Joomla.Administrator * @subpackage  com_content */abstract class JHtmlContentAdministrator{	/**	 * Get the associated language flags	 *	 * @param   int  $articleid  The article item id	 *	 * @return  string  The language HTML	 */	public static function association($articleid)	{		// Defaults		$html = '';		// Get the associations		if ($associations = JLanguageAssociations::getAssociations('com_content', '#__content', 'com_content.item', $articleid))		{			foreach ($associations as $tag => $associated)			{				$associations[$tag] = (int) $associated->id;			}			// Get the associated menu items			$db = JFactory::getDbo();			$query = $db->getQuery(true)				->select('c.*')				->from('#__content as c')				->select('cat.title as category_title')				->join('LEFT', '#__categories as cat ON cat.id=c.catid')				->where('c.id IN (' . implode(',', array_values($associations)) . ')')				->join('LEFT', '#__languages as l ON c.language=l.lang_code')				->select('l.image')				->select('l.title as language_title');			$db->setQuery($query);			try			{				$items = $db->loadObjectList('id');			}			catch (runtimeException $e)			{				throw new Exception($e->getMessage(), 500);				return false;			}			$flags = array();			// Construct html			foreach ($associations as $tag => $associated)			{				if ($associated != $articleid)				{					$flags[] = JText::sprintf(						'COM_CONTENT_TIP_ASSOCIATED_LANGUAGE',						JHtml::_('image', 'mod_languages/' . $items[$associated]->image . '.gif',							$items[$associated]->language_title,							array('title' => $items[$associated]->language_title),							true						),						$items[$associated]->title, $items[$associated]->category_title					);				}			}			$html = JHtml::_('tooltip', implode('<br />', $flags), JText::_('COM_CONTENT_TIP_ASSOCIATION'), 'admin/icon-16-links.png');		}		return $html;	}	/**	 * @param   int $value	The state value	 * @param   int $i	 */	public static function featured($value = 0, $i, $canChange = true)	{		JHtml::_('bootstrap.tooltip');		// Array of image, task, title, action		$states	= array(			0	=> array('star-empty',	'articles.featured',	'COM_CONTENT_UNFEATURED',	'COM_CONTENT_TOGGLE_TO_FEATURE'),			1	=> array('star',		'articles.unfeatured',	'COM_CONTENT_FEATURED',		'COM_CONTENT_TOGGLE_TO_UNFEATURE'),		);		$state	= JArrayHelper::getValue($states, (int) $value, $states[1]);		$icon	= $state[0];		if ($canChange)		{			$html	= '<a href="#" onclick="return listItemTask(\'cb'.$i.'\',\''.$state[1].'\')" class="btn btn-micro hasTooltip' . ($value == 1 ? ' active' : '') . '" title="'.JText::_($state[3]).'"><i class="icon-'					. $icon.'"></i></a>';		}		else		{			$html	= '<a class="btn btn-micro hasTooltip disabled' . ($value == 1 ? ' active' : '') . '" title="'.JText::_($state[2]).'"><i class="icon-'					. $icon.'"></i></a>';		}		return $html;	}}
<?php/** * @package     Joomla.Administrator * @subpackage  com_finder * * @copyright   Copyright (C) 2005 - 2013 Open Source Matters, Inc. All rights reserved. * @license     GNU General Public License version 2 or later; see LICENSE */defined('_JEXEC') or die;/** * Stemmer base class for the Finder indexer package. * * @package     Joomla.Administrator * @subpackage  com_finder * @since       2.5 */class FinderIndexerTaxonomy{	/**	 * An internal cache of taxonomy branch data.	 *	 * @var    array	 * @since  2.5	 */	public static $branches = array();	/**	 * An internal cache of taxonomy node data.	 *	 * @var    array	 * @since  2.5	 */	public static $nodes = array();	/**	 * Method to add a branch to the taxonomy tree.	 *	 * @param   string   $title   The title of the branch.	 * @param   integer  $state   The published state of the branch. [optional]	 * @param   integer  $access  The access state of the branch. [optional]	 *	 * @return  integer  The id of the branch.	 *	 * @since   2.5	 * @throws  Exception on database error.	 */	public static function addBranch($title, $state = 1, $access = 1)	{		// Check to see if the branch is in the cache.		if (isset(self::$branches[$title]))		{			return self::$branches[$title]->id;		}		// Check to see if the branch is in the table.		$db = JFactory::getDbo();		$query = $db->getQuery(true)			->select('*')			->from($db->quoteName('#__finder_taxonomy'))			->where($db->quoteName('parent_id') . ' = 1')			->where($db->quoteName('title') . ' = ' . $db->quote($title));		$db->setQuery($query);		// Get the result.		$result = $db->loadObject();		// Check if the database matches the input data.		if (!empty($result) && $result->state == $state && $result->access == $access)		{			// The data matches, add the item to the cache.			self::$branches[$title] = $result;			return self::$branches[$title]->id;		}		// The database did not match the input. This could be because the		// state has changed or because the branch does not exist. Let's figure		// out which case is true and deal with it.		$branch = new JObject;		if (empty($result))		{			// Prepare the branch object.			$branch->parent_id = 1;			$branch->title = $title;			$branch->state = (int) $state;			$branch->access = (int) $access;		}		else		{			// Prepare the branch object.			$branch->id = (int) $result->id;			$branch->parent_id = (int) $result->parent_id;			$branch->title = $result->title;			$branch->state = (int) $result->title;			$branch->access = (int) $result->access;			$branch->ordering = (int) $result->ordering;		}		// Store the branch.		self::storeNode($branch);		// Add the branch to the cache.		self::$branches[$title] = $branch;		return self::$branches[$title]->id;	}	/**	 * Method to add a node to the taxonomy tree.	 *	 * @param   string   $branch  The title of the branch to store the node in.	 * @param   string   $title   The title of the node.	 * @param   integer  $state   The published state of the node. [optional]	 * @param   integer  $access  The access state of the node. [optional]	 *	 * @return  integer  The id of the node.	 *	 * @since   2.5	 * @throws  Exception on database error.	 */	public static function addNode($branch, $title, $state = 1, $access = 1)	{		// Check to see if the node is in the cache.		if (isset(self::$nodes[$branch][$title]))		{			return self::$nodes[$branch][$title]->id;		}		// Get the branch id, insert it if it does not exist.		$branchId = self::addBranch($branch);		// Check to see if the node is in the table.		$db = JFactory::getDbo();		$query = $db->getQuery(true)			->select('*')			->from($db->quoteName('#__finder_taxonomy'))			->where($db->quoteName('parent_id') . ' = ' . $db->quote($branchId))			->where($db->quoteName('title') . ' = ' . $db->quote($title));		$db->setQuery($query);		// Get the result.		$result = $db->loadObject();		// Check if the database matches the input data.		if (!empty($result) && $result->state == $state && $result->access == $access)		{			// The data matches, add the item to the cache.			self::$nodes[$branch][$title] = $result;			return self::$nodes[$branch][$title]->id;		}		// The database did not match the input. This could be because the		// state has changed or because the node does not exist. Let's figure		// out which case is true and deal with it.		$node = new JObject;		if (empty($result))		{			// Prepare the node object.			$node->parent_id = (int) $branchId;			$node->title = $title;			$node->state = (int) $state;			$node->access = (int) $access;		}		else		{			// Prepare the node object.			$node->id = (int) $result->id;			$node->parent_id = (int) $result->parent_id;			$node->title = $result->title;			$node->state = (int) $result->title;			$node->access = (int) $result->access;			$node->ordering = (int) $result->ordering;		}		// Store the node.		self::storeNode($node);		// Add the node to the cache.		self::$nodes[$branch][$title] = $node;		return self::$nodes[$branch][$title]->id;	}	/**	 * Method to add a map entry between a link and a taxonomy node.	 *	 * @param   integer  $linkId  The link to map to.	 * @param   integer  $nodeId  The node to map to.	 *	 * @return  boolean  True on success.	 *	 * @since   2.5	 * @throws  Exception on database error.	 */	public static function addMap($linkId, $nodeId)	{		// Insert the map.		$db = JFactory::getDbo();		$query = $db->getQuery(true)			->select($db->quoteName('link_id'))			->from($db->quoteName('#__finder_taxonomy_map'))			->where($db->quoteName('link_id') . ' = ' . (int) $linkId)			->where($db->quoteName('node_id') . ' = ' . (int) $nodeId);		$db->setQuery($query);		$db->execute();		$id = (int) $db->loadResult();		$map = new JObject;		$map->link_id = (int) $linkId;		$map->node_id = (int) $nodeId;		if ($id)		{			$db->updateObject('#__finder_taxonomy_map', $map);		}		else		{			$db->insertObject('#__finder_taxonomy_map', $map);		}		return true;	}	/**	 * Method to get the title of all taxonomy branches.	 *	 * @return  array  An array of branch titles.	 *	 * @since   2.5	 * @throws  Exception on database error.	 */	public static function getBranchTitles()	{		$db = JFactory::getDbo();		// Set user variables		$user = JFactory::getUser();		$groups = implode(',', $user->getAuthorisedViewLevels());		// Create a query to get the taxonomy branch titles.		$query = $db->getQuery(true)			->select($db->quoteName('title'))			->from($db->quoteName('#__finder_taxonomy'))			->where($db->quoteName('parent_id') . ' = 1')			->where($db->quoteName('state') . ' = 1')			->where($db->quoteName('access') . ' IN (' . $groups . ')');		// Get the branch titles.		$db->setQuery($query);		$results = $db->loadColumn();		return $results;	}	/**	 * Method to find a taxonomy node in a branch.	 *	 * @param   string  $branch  The branch to search.	 * @param   string  $title   The title of the node.	 *	 * @return  mixed  Integer id on success, null on no match.	 *	 * @since   2.5	 * @throws  Exception on database error.	 */	public static function getNodeByTitle($branch, $title)	{		$db = JFactory::getDbo();		// Set user variables		$user = JFactory::getUser();		$groups = implode(',', $user->getAuthorisedViewLevels());		// Create a query to get the node.		$query = $db->getQuery(true)			->select('t1.*')			->from($db->quoteName('#__finder_taxonomy') . ' AS t1')			->join('INNER', $db->quoteName('#__finder_taxonomy') . ' AS t2 ON t2.id = t1.parent_id')			->where('t1.access IN (' . $groups . ')')			->where('t1.state = 1')			->where('t1.title LIKE ' . $db->quote($db->escape($title) . '%'))			->where('t2.access IN (' . $groups . ')')			->where('t2.state = 1')			->where('t2.title = ' . $db->quote($branch));		// Get the node.		$db->setQuery($query, 0, 1);		$result = $db->loadObject();		return $result;	}	/**	 * Method to remove map entries for a link.	 *	 * @param   integer  $linkId  The link to remove.	 *	 * @return  boolean  True on success.	 *	 * @since   2.5	 * @throws  Exception on database error.	 */	public static function removeMaps($linkId)	{		// Delete the maps.		$db = JFactory::getDbo();		$query = $db->getQuery(true)			->delete($db->quoteName('#__finder_taxonomy_map'))			->where($db->quoteName('link_id') . ' = ' . (int) $linkId);		$db->setQuery($query);		$db->execute();		return true;	}	/**	 * Method to remove orphaned taxonomy nodes and branches.	 *	 * @return  integer  The number of deleted rows.	 *	 * @since   2.5	 * @throws  Exception on database error.	 */	public static function removeOrphanNodes()	{		// Delete all orphaned nodes.		$db = JFactory::getDbo();		$query = 'DELETE t' .			' FROM ' . $db->quoteName('#__finder_taxonomy') . ' AS t' .			' LEFT JOIN ' . $db->quoteName('#__finder_taxonomy_map') . ' AS m ON m.node_id = t.id' .			' WHERE t.parent_id > 1' .			' AND m.link_id IS NULL';		$db->setQuery($query);		$db->execute();		return $db->getAffectedRows();	}	/**	 * Method to store a node to the database.  This method will accept either a branch or a node.	 *	 * @param   object  $item  The item to store.	 *	 * @return  boolean  True on success.	 *	 * @since   2.5	 * @throws  Exception on database error.	 */	protected static function storeNode($item)	{		$db = JFactory::getDbo();		// Check if we are updating or inserting the item.		if (empty($item->id))		{			// Insert the item.			$db->insertObject('#__finder_taxonomy', $item, 'id');		}		else		{			// Update the item.			$db->updateObject('#__finder_taxonomy', $item, 'id');		}		return true;	}}
<?php/** * @package     Joomla.Administrator * @subpackage  com_users * * @copyright   Copyright (C) 2005 - 2013 Open Source Matters, Inc. All rights reserved. * @license     GNU General Public License version 2 or later; see LICENSE.txt */defined('_JEXEC') or die;/** * User note model. * * @package     Joomla.Administrator * @subpackage  com_users * @since       2.5 */class UsersModelNote extends JModelAdmin{	/**	 * Method to get the record form.	 *	 * @param   array    $data      Data for the form.	 * @param   boolean  $loadData  True if the form is to load its own data (default case), false if not.	 *	 * @return  mixed  A JForm object on success, false on failure	 *	 * @since   2.5	 */	public function getForm($data = array(), $loadData = true)	{		// Get the form.		$form = $this->loadForm('com_users.note', 'note', array('control' => 'jform', 'load_data' => $loadData));		if (empty($form))		{			return false;		}		return $form;	}	/**	 * Method to get a single record.	 *	 * @param   integer  $pk  The id of the primary key.	 *	 * @return  mixed  Object on success, false on failure.	 *	 * @since   2.5	 */	public function getItem($pk = null)	{		$result = parent::getItem($pk);		// Get the dispatcher and load the users plugins.		$dispatcher	= JEventDispatcher::getInstance();		JPluginHelper::importPlugin('user');		// Trigger the data preparation event.		$results = $dispatcher->trigger('onContentPrepareData', array('com_users.note', $result));		return $result;	}	/**	 * Method to get a table object, load it if necessary.	 *	 * @param   string  $name     The table name. Optional.	 * @param   string  $prefix   The class prefix. Optional.	 * @param   array   $options  Configuration array for model. Optional.	 *	 * @return  JTable  The table object	 *	 * @since   2.5	 */	public function getTable($name = 'Note', $prefix = 'UsersTable', $options = array())	{		return JTable::getInstance($name, $prefix, $options);	}	/**	 * Method to get the data that should be injected in the form.	 *	 * @return  mixed  The data for the form.	 *	 * @since   1.6	 */	protected function loadFormData()	{		// Get the application		$app = JFactory::getApplication();		// Check the session for previously entered form data.		$data = $app->getUserState('com_users.edit.note.data', array());		if (empty($data))		{			$data = $this->getItem();			// Prime some default values.			if ($this->getState('note.id') == 0)			{				$data->set('catid', $app->input->get('catid', $app->getUserState('com_users.notes.filter.category_id'), 'int'));			}			$userId = $app->input->get('u_id', 0, 'int');			if ($userId != 0)			{				$data->user_id = $userId;			}		}		$this->preprocessData('com_users.note', $data);		return $data;	}	/**	 * Method to auto-populate the model state.	 *	 * Note. Calling getState in this method will result in recursion.	 *	 * @return  void	 *	 * @since   2.5	 */	protected function populateState()	{		parent::populateState();		$userId = JFactory::getApplication()->input->get('u_id', 0, 'int');		$this->setState('note.user_id', $userId);	}	/**	 * Method to save the form data.	 *	 * @param   array  $data  The form data.	 *	 * @return  boolean  True on success.	 *	 * @since   2.5	 */	/*public function save($data)	{		$pk		= (!empty($data['id'])) ? $data['id'] : (int) $this->getState('note.id');		$table	= $this->getTable();		$isNew	= empty($pk);		if (!$table->bind($data))		{			$this->setError($table->getError());			return false;		}		// JTableCategory doesn't bind the params, so we need to do that by hand.		if (isset($data['params']) && is_array($data['params']))		{			$registry = new JRegistry();			$registry->loadArray($data['params']);			$table->params = $registry->toString();			// This will give us INI format.		}		if (!$table->check())		{			$this->setError($table->getError());			return false;		}		if (!$table->store())		{			$this->setError($table->getError());			return false;		}		$this->setState('note.id', $table->id);		return true;	}*/}
<?php/** * @package     Joomla.Site * @subpackage  com_contact * * @copyright   Copyright (C) 2005 - 2013 Open Source Matters, Inc. All rights reserved. * @license     GNU General Public License version 2 or later; see LICENSE.txt */defined('_JEXEC') or die;$class = ' class="first"';if (count($this->children[$this->category->id]) > 0 && $this->maxLevel != 0) :?><ul class="list-striped list-condensed"><?php foreach ($this->children[$this->category->id] as $id => $child) : ?>	<?php	if ($this->params->get('show_empty_categories') || $child->numitems || count($child->getChildren())) :		if (!isset($this->children[$this->category->id][$id + 1]))		{			$class = ' class="last"';		}	?>	<li<?php echo $class; ?>>		<?php $class = ''; ?>			<h4 class="item-title">				<a href="<?php echo JRoute::_(ContactHelperRoute::getCategoryRoute($child->id)); ?>">				<?php echo $this->escape($child->title); ?>				</a>				<?php if ($this->params->get('show_cat_items') == 1) :?>					<span class="badge badge-info pull-right" title="<?php echo JText::_('COM_CONTACT_CAT_NUM'); ?>"><?php echo $child->numitems; ?></span>				<?php endif; ?>			</h4>			<?php if ($this->params->get('show_subcat_desc') == 1) : ?>				<?php if ($child->description) : ?>					<small class="category-desc">						<?php echo JHtml::_('content.prepare', $child->description, '', 'com_contact.category'); ?>					</small>				<?php endif; ?>			<?php endif; ?>			<?php if (count($child->getChildren()) > 0 ) :				$this->children[$child->id] = $child->getChildren();				$this->category = $child;				$this->maxLevel--;				echo $this->loadTemplate('children');				$this->category = $child->getParent();				$this->maxLevel++;			endif; ?>	</li>	<?php endif; ?><?php endforeach; ?></ul><?php endif; ?>
<?php/** * @package     Joomla.Administrator * @subpackage  Template.hathor * * @copyright   Copyright (C) 2005 - 2013 Open Source Matters, Inc. All rights reserved. * @license     GNU General Public License version 2 or later; see LICENSE.txt */defined('_JEXEC') or die;// Include the HTML helpers.JHtml::addIncludePath(JPATH_COMPONENT.'/helpers/html');JHtml::_('behavior.tooltip');JHtml::_('behavior.formvalidation');JHtml::_('behavior.keepalive');$app = JFactory::getApplication();$input = $app->input;$assoc = isset($app->item_associations) ? $app->item_associations : 0;?><script type="text/javascript">	Joomla.submitbutton = function(task)	{		if (task == 'newsfeed.cancel' || document.formvalidator.isValid(document.id('newsfeed-form')))		{			Joomla.submitform(task, document.getElementById('newsfeed-form'));		}	}</script><form action="<?php echo JRoute::_('index.php?option=com_newsfeeds&id='.(int) $this->item->id); ?>" method="post" name="adminForm" id="newsfeed-form" class="form-validate">	<div class="col main-section">		<fieldset class="adminform">			<legend><?php echo empty($this->item->id) ? JText::_('COM_NEWSFEEDS_NEW_NEWSFEED') : JText::sprintf('COM_NEWSFEEDS_EDIT_NEWSFEED', $this->item->id); ?></legend>			<ul class="adminformlist">			<li><?php echo $this->form->getLabel('name'); ?>			<?php echo $this->form->getInput('name'); ?></li>   			<li><?php echo $this->form->getLabel('alias'); ?>			<?php echo $this->form->getInput('alias'); ?></li>			<li><?php echo $this->form->getLabel('link'); ?>			<?php echo $this->form->getInput('link'); ?></li>			<li><?php echo $this->form->getLabel('catid'); ?>			<?php echo $this->form->getInput('catid'); ?></li>			<li><?php echo $this->form->getLabel('published'); ?>			<?php echo $this->form->getInput('published'); ?></li>			<li><?php echo $this->form->getLabel('access'); ?>			<?php echo $this->form->getInput('access'); ?></li>			<li><?php echo $this->form->getLabel('ordering'); ?>			<?php echo $this->form->getInput('ordering'); ?></li>			<li><?php echo $this->form->getLabel('language'); ?>			<?php echo $this->form->getInput('language'); ?></li>			<!-- Tag field -->			<?php foreach ($this->get('form')->getFieldset('jmetadata') as $field) : ?>				<?php if ($field->name == 'jform[metadata][tags][]') :?>					<li>						<?php echo $field->label; ?>						<?php echo $field->input; ?>					</li>				<?php endif; ?>			<?php endforeach; ?>			<li><?php echo $this->form->getLabel('id'); ?>			<?php echo $this->form->getInput('id'); ?></li>			</ul>		</fieldset>	</div>	<div class="col options-section">		<?php echo JHtml::_('sliders.start', 'newsfeed-sliders-' . $this->item->id, array('useCookie' => 1)); ?>			<?php echo JHtml::_('sliders.panel', JText::_('JGLOBAL_FIELDSET_PUBLISHING'), 'publishing-details'); ?>			<fieldset class="panelform">			<legend class="element-invisible"><?php echo JText::_('JGLOBAL_FIELDSET_PUBLISHING'); ?></legend>			<ul class="adminformlist">				<li><?php echo $this->form->getLabel('created_by'); ?>				<?php echo $this->form->getInput('created_by'); ?></li>				<li><?php echo $this->form->getLabel('created_by_alias'); ?>				<?php echo $this->form->getInput('created_by_alias'); ?></li>				<li><?php echo $this->form->getLabel('created'); ?>				<?php echo $this->form->getInput('created'); ?></li>				<li><?php echo $this->form->getLabel('publish_up'); ?>				<?php echo $this->form->getInput('publish_up'); ?></li>				<li><?php echo $this->form->getLabel('publish_down'); ?>				<?php echo $this->form->getInput('publish_down'); ?></li>				<?php if ($this->item->modified_by) : ?>					<li><?php echo $this->form->getLabel('modified_by'); ?>					<?php echo $this->form->getInput('modified_by'); ?></li>					<li><?php echo $this->form->getLabel('modified'); ?>					<?php echo $this->form->getInput('modified'); ?></li>				<?php endif; ?>				<li><?php echo $this->form->getLabel('numarticles'); ?>				<?php echo $this->form->getInput('numarticles'); ?></li>				<li><?php echo $this->form->getLabel('cache_time'); ?>				<?php echo $this->form->getInput('cache_time'); ?></li>				<li><?php echo $this->form->getLabel('rtl'); ?>				<?php echo $this->form->getInput('rtl'); ?></li>			</ul>			</fieldset>			<?php echo $this->loadTemplate('params'); ?>			<?php echo JHtml::_('sliders.panel', JText::_('JGLOBAL_FIELDSET_METADATA_OPTIONS'), 'meta-options'); ?>			<fieldset class="panelform">			<legend class="element-invisible"><?php echo JText::_('JGLOBAL_FIELDSET_METADATA_OPTIONS'); ?></legend>				<?php echo $this->loadTemplate('metadata'); ?>			</fieldset>			<?php if ($assoc) : ?>				<?php echo $this->loadTemplate('associations'); ?>			<?php endif; ?>		<?php echo JHtml::_('sliders.end'); ?>		<input type="hidden" name="task" value="" />		<?php echo JHtml::_('form.token'); ?>	</div>	<div class="clr"></div></form>
<?php/** * @package     Joomla.Administrator * @subpackage  com_menus * * @copyright   Copyright (C) 2005 - 2013 Open Source Matters, Inc. All rights reserved. * @license     GNU General Public License version 2 or later; see LICENSE.txt */defined('_JEXEC') or die;/** * The Menu List Controller * * @package     Joomla.Administrator * @subpackage  com_menus * @since       1.6 */class MenusControllerMenus extends JControllerLegacy{	/**	 * Display the view	 *	 * @param   boolean            If true, the view output will be cached	 * @param   array              An array of safe url parameters and their variable types, for valid values see {@link JFilterInput::clean()}.	 *	 * @return  JController        This object to support chaining.	 * @since   1.6	 */	public function display($cachable = false, $urlparams = false)	{	}	/**	 * Method to get a model object, loading it if required.	 *	 * @param   string  $name    The model name. Optional.	 * @param   string  $prefix  The class prefix. Optional.	 * @param   array   $config  Configuration array for model. Optional.	 *	 * @return  object  The model.	 *	 * @since   1.6	 */	public function getModel($name = 'Menu', $prefix = 'MenusModel', $config = array('ignore_request' => true))	{		$model = parent::getModel($name, $prefix, $config);		return $model;	}	/**	 * Removes an item	 */	public function delete()	{		// Check for request forgeries		JSession::checkToken() or jexit(JText::_('JINVALID_TOKEN'));		// Get items to remove from the request.		$cid = $this->input->get('cid', array(), 'array');		if (!is_array($cid) || count($cid) < 1)		{			JError::raiseWarning(500, JText::_('COM_MENUS_NO_MENUS_SELECTED'));		}		else		{			// Get the model.			$model = $this->getModel();			// Make sure the item ids are integers			jimport('joomla.utilities.arrayhelper');			JArrayHelper::toInteger($cid);			// Remove the items.			if (!$model->delete($cid))			{				$this->setMessage($model->getError());			}			else			{				$this->setMessage(JText::plural('COM_MENUS_N_MENUS_DELETED', count($cid)));			}		}		$this->setRedirect('index.php?option=com_menus&view=menus');	}	/**	 * Rebuild the menu tree.	 *	 * @return  bool    False on failure or error, true on success.	 */	public function rebuild()	{		JSession::checkToken() or jexit(JText::_('JINVALID_TOKEN'));		$this->setRedirect('index.php?option=com_menus&view=menus');		$model = $this->getModel('Item');		if ($model->rebuild())		{			// Reorder succeeded.			$this->setMessage(JText::_('JTOOLBAR_REBUILD_SUCCESS'));			return true;		}		else		{			// Rebuild failed.			$this->setMessage(JText::sprintf('JTOOLBAR_REBUILD_FAILED', $model->getMessage()));			return false;		}	}	/**	 * Temporary method. This should go into the 1.5 to 1.6 upgrade routines.	 */	public function resync()	{		$db = JFactory::getDbo();		$parts = null;		try		{			// Load a lookup table of all the component id's.			$components = $db->setQuery(				'SELECT element, extension_id' .					' FROM #__extensions' .					' WHERE type = ' . $db->quote('component')			)->loadAssocList('element', 'extension_id');		}		catch (RuntimeException $e)		{			return JError::raiseWarning(500, $e->getMessage());		}		try		{			// Load all the component menu links			$query = $db->getQuery(true)				->select($db->quoteName('id'))				->select($db->quoteName('link'))				->select($db->quoteName('component_id'))				->from('#__menu')				->where($db->quoteName('type') . ' = ' . $db->quote('component.item'));			$db->setQuery($query);			$items = $db->loadObjectList();		}		catch (RuntimeException $e)		{			return JError::raiseWarning(500, $e->getMessage());		}		foreach ($items as $item)		{			// Parse the link.			parse_str(parse_url($item->link, PHP_URL_QUERY), $parts);			// Tease out the option.			if (isset($parts['option']))			{				$option = $parts['option'];				// Lookup the component ID				if (isset($components[$option]))				{					$componentId = $components[$option];				}				else				{					// Mismatch. Needs human intervention.					$componentId = -1;				}				// Check for mis-matched component id's in the menu link.				if ($item->component_id != $componentId)				{					// Update the menu table.					$log = "Link $item->id refers to $item->component_id, converting to $componentId ($item->link)";					echo "<br/>$log";					try					{						$db->setQuery(							'UPDATE #__menu' .								' SET component_id = ' . $componentId .								' WHERE id = ' . $item->id						)->execute();					}					catch (RuntimeException $e)					{						return JError::raiseWarning(500, $e->getMessage());					}					//echo "<br>".$db->getQuery();				}			}		}	}}
<?php/** * @package     Joomla.Administrator * @subpackage  com_templates * * @copyright   Copyright (C) 2005 - 2013 Open Source Matters, Inc. All rights reserved. * @license     GNU General Public License version 2 or later; see LICENSE.txt */defined('_JEXEC') or die;/** * Template styles list controller class. * * @package     Joomla.Administrator * @subpackage  com_templates * @since       1.6 */class TemplatesControllerStyles extends JControllerAdmin{	/**	 * Method to clone and existing template style.	 */	public function duplicate()	{		// Check for request forgeries		JSession::checkToken() or jexit(JText::_('JINVALID_TOKEN'));		$pks = $this->input->post->get('cid', array(), 'array');		try		{			if (empty($pks))			{				throw new Exception(JText::_('COM_TEMPLATES_NO_TEMPLATE_SELECTED'));			}			JArrayHelper::toInteger($pks);			$model = $this->getModel();			$model->duplicate($pks);			$this->setMessage(JText::_('COM_TEMPLATES_SUCCESS_DUPLICATED'));		}		catch (Exception $e)		{			JError::raiseWarning(500, $e->getMessage());		}		$this->setRedirect('index.php?option=com_templates&view=styles');	}	/**	 * Proxy for getModel.	 *	 * @since   1.6	 */	public function getModel($name = 'Style', $prefix = 'TemplatesModel', $config = array())	{		$model = parent::getModel($name, $prefix, array('ignore_request' => true));		return $model;	}	/**	 * Method to set the home template for a client.	 *	 * @since   1.6	 */	public function setDefault()	{		// Check for request forgeries		JSession::checkToken() or jexit(JText::_('JINVALID_TOKEN'));		$pks = $this->input->post->get('cid', array(), 'array');		try		{			if (empty($pks))			{				throw new Exception(JText::_('COM_TEMPLATES_NO_TEMPLATE_SELECTED'));			}			JArrayHelper::toInteger($pks);			// Pop off the first element.			$id = array_shift($pks);			$model = $this->getModel();			$model->setHome($id);			$this->setMessage(JText::_('COM_TEMPLATES_SUCCESS_HOME_SET'));		}		catch (Exception $e)		{			JError::raiseWarning(500, $e->getMessage());		}		$this->setRedirect('index.php?option=com_templates&view=styles');	}	/**	 * Method to unset the default template for a client and for a language	 *	 * @since   1.6	 */	public function unsetDefault()	{		// Check for request forgeries		JSession::checkToken('request') or jexit(JText::_('JINVALID_TOKEN'));		$pks = $this->input->get->get('cid', array(), 'array');		JArrayHelper::toInteger($pks);		try		{			if (empty($pks))			{				throw new Exception(JText::_('COM_TEMPLATES_NO_TEMPLATE_SELECTED'));			}			// Pop off the first element.			$id = array_shift($pks);			$model = $this->getModel();			$model->unsetHome($id);			$this->setMessage(JText::_('COM_TEMPLATES_SUCCESS_HOME_UNSET'));		}		catch (Exception $e)		{			JError::raiseWarning(500, $e->getMessage());		}		$this->setRedirect('index.php?option=com_templates&view=styles');	}}
<?php/** * @package     Joomla.Site * @subpackage  com_contact * * @copyright   Copyright (C) 2005 - 2013 Open Source Matters, Inc. All rights reserved. * @license     GNU General Public License version 2 or later; see LICENSE.txt */defined('_JEXEC') or die;/** * Contact Component Controller * * @package     Joomla.Site * @subpackage  com_contact * @since       1.5 */class ContactController extends JControllerLegacy{	/**	 * Method to display a view.	 *	 * @param   boolean			If true, the view output will be cached	 * @param   array  An array of safe url parameters and their variable types, for valid values see {@link JFilterInput::clean()}.	 *	 * @return  JController		This object to support chaining.	 * @since   1.5	 */	public function display($cachable = false, $urlparams = false)	{		$cachable = true;		// Get the document object.		$document = JFactory::getDocument();		// Set the default view name and format from the Request.		$vName = $this->input->get('view', 'categories');		$this->input->set('view', $vName);		$user = JFactory::getUser();		$safeurlparams = array('catid' => 'INT', 'id' => 'INT', 'cid' => 'ARRAY', 'year' => 'INT', 'month' => 'INT', 'limit' => 'UINT', 'limitstart' => 'UINT',			'showall' => 'INT', 'return' => 'BASE64', 'filter' => 'STRING', 'filter_order' => 'CMD', 'filter_order_Dir' => 'CMD', 'filter-search' => 'STRING', 'print' => 'BOOLEAN', 'lang' => 'CMD');		parent::display($cachable, $safeurlparams);		return $this;	}}
<?php/** * @package     Joomla.Administrator * @subpackage  com_banners * * @copyright   Copyright (C) 2005 - 2013 Open Source Matters, Inc. All rights reserved. * @license     GNU General Public License version 2 or later; see LICENSE.txt */defined('_JEXEC') or die;/** * View class for a list of banners. * * @package     Joomla.Administrator * @subpackage  com_banners * @since       1.6 */class BannersViewBanners extends JViewLegacy{	protected $categories;	protected $items;	protected $pagination;	protected $state;	/**	 * Method to display the view.	 *	 * @param   string  $tpl  A template file to load. [optional]	 *	 * @return  mixed  A string if successful, otherwise a JError object.	 *	 * @since   1.6	 */	public function display($tpl = null)	{		$this->categories	= $this->get('CategoryOrders');		$this->items		= $this->get('Items');		$this->pagination	= $this->get('Pagination');		$this->state		= $this->get('State');		// Check for errors.		if (count($errors = $this->get('Errors')))		{			JError::raiseError(500, implode("\n", $errors));			return false;		}		BannersHelper::addSubmenu('banners');		$this->addToolbar();		require_once JPATH_COMPONENT . '/models/fields/bannerclient.php';		// Include the component HTML helpers.		JHtml::addIncludePath(JPATH_COMPONENT . '/helpers/html');		$this->sidebar = JHtmlSidebar::render();		parent::display($tpl);	}	/**	 * Add the page title and toolbar.	 *	 * @return  void	 *	 * @since   1.6	 */	protected function addToolbar()	{		require_once JPATH_COMPONENT . '/helpers/banners.php';		$canDo = BannersHelper::getActions($this->state->get('filter.category_id'));		$user = JFactory::getUser();		// Get the toolbar object instance		$bar = JToolBar::getInstance('toolbar');		JToolbarHelper::title(JText::_('COM_BANNERS_MANAGER_BANNERS'), 'banners.png');		if (count($user->getAuthorisedCategories('com_banners', 'core.create')) > 0)		{			JToolbarHelper::addNew('banner.add');		}		if (($canDo->get('core.edit')))		{			JToolbarHelper::editList('banner.edit');		}		if ($canDo->get('core.edit.state'))		{			if ($this->state->get('filter.state') != 2)			{				JToolbarHelper::publish('banners.publish', 'JTOOLBAR_PUBLISH', true);				JToolbarHelper::unpublish('banners.unpublish', 'JTOOLBAR_UNPUBLISH', true);			}			if ($this->state->get('filter.state') != -1)			{				if ($this->state->get('filter.state') != 2)				{					JToolbarHelper::archiveList('banners.archive');				}				elseif ($this->state->get('filter.state') == 2)				{					JToolbarHelper::unarchiveList('banners.publish');				}			}		}		if ($canDo->get('core.edit.state'))		{			JToolbarHelper::checkin('banners.checkin');		}		if ($this->state->get('filter.state') == -2 && $canDo->get('core.delete'))		{			JToolbarHelper::deleteList('', 'banners.delete', 'JTOOLBAR_EMPTY_TRASH');		}		elseif ($canDo->get('core.edit.state'))		{			JToolbarHelper::trash('banners.trash');		}		// Add a batch button		if ($user->authorise('core.edit'))		{			JHtml::_('bootstrap.modal', 'collapseModal');			$title = JText::_('JTOOLBAR_BATCH');			$dhtml = "<button data-toggle=\"modal\" data-target=\"#collapseModal\" class=\"btn btn-small\">						<i class=\"icon-checkbox-partial\" title=\"$title\"></i>						$title</button>";			$bar->appendButton('Custom', $dhtml, 'batch');		}		if ($canDo->get('core.admin'))		{			JToolbarHelper::preferences('com_banners');		}		JToolbarHelper::help('JHELP_COMPONENTS_BANNERS_BANNERS');		JHtmlSidebar::setAction('index.php?option=com_banners&view=banners');		JHtmlSidebar::addFilter(			JText::_('JOPTION_SELECT_PUBLISHED'),			'filter_state',			JHtml::_('select.options', JHtml::_('jgrid.publishedOptions'), 'value', 'text', $this->state->get('filter.state'), true)		);		JHtmlSidebar::addFilter(			JText::_('COM_BANNERS_SELECT_CLIENT'),			'filter_client_id',			JHtml::_('select.options', BannersHelper::getClientOptions(), 'value', 'text', $this->state->get('filter.client_id'))		);		JHtmlSidebar::addFilter(			JText::_('JOPTION_SELECT_CATEGORY'),			'filter_category_id',			JHtml::_('select.options', JHtml::_('category.options', 'com_banners'), 'value', 'text', $this->state->get('filter.category_id'))		);		JHtmlSidebar::addFilter(			JText::_('JOPTION_SELECT_LANGUAGE'),			'filter_language',			JHtml::_('select.options', JHtml::_('contentlanguage.existing', true, true), 'value', 'text', $this->state->get('filter.language'))		);	}	/**	 * Returns an array of fields the table can be sorted by	 *	 * @return  array  Array containing the field name to sort by as the key and display text as value	 *	 * @since   3.0	 */	protected function getSortFields()	{		return array(			'ordering' => JText::_('JGRID_HEADING_ORDERING'),			'a.state' => JText::_('JSTATUS'),			'a.name' => JText::_('COM_BANNERS_HEADING_NAME'),			'a.sticky' => JText::_('COM_BANNERS_HEADING_STICKY'),			'client_name' => JText::_('COM_BANNERS_HEADING_CLIENT'),			'impmade' => JText::_('COM_BANNERS_HEADING_IMPRESSIONS'),			'clicks' => JText::_('COM_BANNERS_HEADING_CLICKS'),			'a.language' => JText::_('JGRID_HEADING_LANGUAGE'),			'a.id' => JText::_('JGRID_HEADING_ID')		);	}}
<?php/** * @package     Joomla.Administrator * @subpackage  com_content * * @copyright   Copyright (C) 2005 - 2013 Open Source Matters, Inc. All rights reserved. * @license     GNU General Public License version 2 or later; see LICENSE.txt */defined('_JEXEC') or die;require_once __DIR__ . '/articles.php';/** * @package     Joomla.Administrator * @subpackage  com_content */class ContentControllerFeatured extends ContentControllerArticles{	/**	 * Removes an item	 */	public function delete()	{		// Check for request forgeries		JSession::checkToken() or jexit(JText::_('JINVALID_TOKEN'));		$user = JFactory::getUser();		$ids  = $this->input->get('cid', array(), 'array');		// Access checks.		foreach ($ids as $i => $id)		{			if (!$user->authorise('core.delete', 'com_content.article.'.(int) $id))			{				// Prune items that you can't delete.				unset($ids[$i]);				JError::raiseNotice(403, JText::_('JERROR_CORE_DELETE_NOT_PERMITTED'));			}		}		if (empty($ids))		{			JError::raiseWarning(500, JText::_('JERROR_NO_ITEMS_SELECTED'));		}		else		{			// Get the model.			$model = $this->getModel();			// Remove the items.			if (!$model->featured($ids, 0))			{				JError::raiseWarning(500, $model->getError());			}		}		$this->setRedirect('index.php?option=com_content&view=featured');	}	/**	 * Method to publish a list of articles.	 *	 * @return  void	 * @since   1.0	 */	public function publish()	{		parent::publish();		$this->setRedirect('index.php?option=com_content&view=featured');	}	/**	 * Method to get a model object, loading it if required.	 *	 * @param   string  $name    The model name. Optional.	 * @param   string  $prefix  The class prefix. Optional.	 * @param   array   $config  Configuration array for model. Optional.	 *	 * @return  object  The model.	 *	 * @since   1.6	 */	public function getModel($name = 'Feature', $prefix = 'ContentModel', $config = array('ignore_request' => true))	{		$model = parent::getModel($name, $prefix, $config);		return $model;	}	/**	 * Method to save the submitted ordering values for records via AJAX.	 *	 * @return  void	 *	 * @since   3.0	 */	public function saveOrderAjax()	{		$pks = $this->input->post->get('cid', array(), 'array');		$order = $this->input->post->get('order', array(), 'array');		// Sanitize the input		JArrayHelper::toInteger($pks);		JArrayHelper::toInteger($order);		// Get the model		$model = $this->getModel();		// Save the ordering		$return = $model->saveorder($pks, $order);		if ($return)		{			echo "1";		}		// Close the application		JFactory::getApplication()->close();	}}
<?php/** * @package     Joomla.Platform * @subpackage  Profiler * * @copyright   Copyright (C) 2005 - 2013 Open Source Matters, Inc. All rights reserved. * @license     GNU General Public License version 2 or later; see LICENSE */defined('JPATH_PLATFORM') or die;/** * Utility class to assist in the process of benchmarking the execution * of sections of code to understand where time is being spent. * * @package     Joomla.Platform * @subpackage  Profiler * @since       11.1 */class JProfiler{	/**	 * @var    integer  The start time.	 * @since  12.1	 */	protected $start = 0;	/**	 * @var    string  The prefix to use in the output	 * @since  12.1	 */	protected $prefix = '';	/**	 * @var    array  The buffer of profiling messages.	 * @since  12.1	 */	protected $buffer = null;	/**	 * @var    float	 * @since  12.1	 */	protected $previousTime = 0.0;	/**	 * @var    float	 * @since  12.1	 */	protected $previousMem = 0.0;	/**	 * @var    array  JProfiler instances container.	 * @since  11.3	 */	protected static $instances = array();	/**	 * Constructor	 *	 * @param   string  $prefix  Prefix for mark messages	 *	 * @since  11.1	 */	public function __construct($prefix = '')	{		$this->start = $this->getmicrotime();		$this->prefix = $prefix;		$this->buffer = array();	}	/**	 * Returns the global Profiler object, only creating it	 * if it doesn't already exist.	 *	 * @param   string  $prefix  Prefix used to distinguish profiler objects.	 *	 * @return  JProfiler  The Profiler object.	 *	 * @since   11.1	 */	public static function getInstance($prefix = '')	{		if (empty(self::$instances[$prefix]))		{			self::$instances[$prefix] = new JProfiler($prefix);		}		return self::$instances[$prefix];	}	/**	 * Output a time mark	 *	 * The mark is returned as text enclosed in <div> tags	 * with a CSS class of 'profiler'.	 *	 * @param   string  $label  A label for the time mark	 *	 * @return  string  Mark enclosed in <div> tags	 *	 * @since   11.1	 */	public function mark($label)	{		$current = self::getmicrotime() - $this->start;		$currentMem = 0;		$currentMem = memory_get_usage() / 1048576;		$mark = sprintf(			'<code>%s %.3f seconds (+%.3f); %0.2f MB (%s%0.3f) - %s</code>',			$this->prefix,			$current,			$current - $this->previousTime,			$currentMem,			($currentMem > $this->previousMem) ? '+' : '', $currentMem - $this->previousMem,			$label		);		$this->previousTime = $current;		$this->previousMem = $currentMem;		$this->buffer[] = $mark;		return $mark;	}	/**	 * Get the current time.	 *	 * @return  float The current time	 *	 * @since   11.1	 */	public static function getmicrotime()	{		list ($usec, $sec) = explode(' ', microtime());		return ((float) $usec + (float) $sec);	}	/**	 * Get information about current memory usage.	 *	 * @return  integer  The memory usage	 *	 * @link    PHP_MANUAL#memory_get_usage	 * @since   11.1	 * @deprecated  12.3  Use PHP's native memory_get_usage()	 */	public function getMemory()	{		return memory_get_usage();	}	/**	 * Get all profiler marks.	 *	 * Returns an array of all marks created since the Profiler object	 * was instantiated.  Marks are strings as per {@link JProfiler::mark()}.	 *	 * @return  array  Array of profiler marks	 */	public function getBuffer()	{		return $this->buffer;	}}
<?php/** * @package     Joomla.Libraries * @subpackage  CMS * * @copyright   Copyright (C) 2005 - 2013 Open Source Matters, Inc. All rights reserved. * @license     GNU General Public License version 2 or later; see LICENSE.txt */defined('_JEXEC') or die;/** * Route Helper * * A class providing basic routing for urls that are for content types found in * the #__content_types table and rows found in the #__ucm_content table. * * @package     Joomla.Libraries * @subpackage  CMS * @since       3.1 */class JHelperRoute{	/**	 * @var    array  Holds the reverse lookup	 * @since  3.1	 */	protected static $lookup;	/**	 * @var    string  Option for the extension (such as com_content)	 * @since  3.1	 */	protected  $extension;	/**	 * @var    string  Value of the primary key in the content type table	 * @since  3.1	 */	protected  $id;	/**	 * @var    string  Name of the view for the url	 * @since  3.1	 */	protected  $view;	/**	 * A method to get the route for a specific item	 *	 * @param   integer  $id         Value of the primary key for the item in its content table	 * @param   string   $typealias  The type_alias for the item being routed. Of the form extension.view.	 * @param   string   $link       The link to be routed	 * @param   string   $language   The language of the content for multilingual sites	 * @param   integer  $catid      Optional category id	 *	 * @return  string  The route of the item	 *	 * @since   3.1	 */	public function getRoute($id, $typealias, $link = '', $language = null, $catid = null)	{		$typeExploded = explode('.', $typealias);		$this->view = $typeExploded[1];		$this->extension = $typeExploded[0];		$name = ucfirst(substr_replace($this->extension, '', 0, 4));		if (isset($this->view))		{			$needles = array(				$this->view  => array((int) $id)			);		}		if (empty($link))		{			// Create the link			$link = 'index.php?option=' . $this->extension . '&view=' . $this->view . '&id=' . $id;		}		if ($catid > 1)		{			$categories = JCategories::getInstance($name);			if ($categories)			{				$category = $categories->get((int) $catid);				if ($category)				{					$needles['category'] = array_reverse($category->getPath());					$needles['categories'] = $needles['category'];					$link .= '&catid=' . $catid;				}			}		}		// Deal with languages only if needed		if (!empty($language) && $language != '*' && JLanguageMultilang::isEnabled())		{			$db		= JFactory::getDbo();			$query	= $db->getQuery(true)				->select('a.sef AS sef')				->select('a.lang_code AS lang_code')				->from('#__languages AS a');			$db->setQuery($query);			$langs = $db->loadObjectList();			foreach ($langs as $lang)			{				if ($language == $lang->lang_code)				{					$link .= '&lang=' . $lang->sef;					$needles['language'] = $language;				}			}		}			if ($item = self::findItem($needles))			{				$link .= '&Itemid=' . $item;			}			elseif ($item = self::findItem())			{				$link .= '&Itemid=' . $item;			}		return $link;	}	/**	 * Method to find the item in the menu structure	 *	 * @param   array  $needles  Array of lookup values	 *	 * @return  mixed	 *	 * @since   3.1	 */	protected function findItem($needles = array())	{		$app		= JFactory::getApplication();		$menus		= $app->getMenu('site');		$language	= isset($needles['language']) ? $needles['language'] : '*';		// Prepare the reverse lookup array.		if (!isset(self::$lookup[$language]))		{			self::$lookup[$language] = array();			$component = JComponentHelper::getComponent($this->extension);			$attributes = array('component_id');			$values = array($component->id);			if ($language != '*')			{				$attributes[] = 'language';				$values[] = array($needles['language'], '*');			}			$items = $menus->getItems($attributes, $values);			foreach ($items as $item)			{				if (isset($item->query) && isset($item->query['view']))				{					$view = $item->query['view'];					if (!isset(self::$lookup[$language][$view]))					{						self::$lookup[$language][$view] = array();					}					if (isset($item->query['id']))					{						if (is_array($item->query['id']))						{							$item->query['id'] = $item->query['id'][0];						}						/*						 * Here it will become a bit tricky						 * $language != * can override existing entries						 * $language == * cannot override existing entries						 */						if (!isset(self::$lookup[$language][$view][$item->query['id']]) || $item->language != '*')						{							self::$lookup[$language][$view][$item->query['id']] = $item->id;						}					}				}			}		}		if ($needles)		{			foreach ($needles as $view => $ids)			{				if (isset(self::$lookup[$language][$view]))				{					foreach ($ids as $id)					{						if (isset(self::$lookup[$language][$view][(int) $id]))						{							return self::$lookup[$language][$view][(int) $id];						}					}				}			}		}		$active = $menus->getActive();		if ($active && $active->component == $this->extension && ($active->language == '*' || !JLanguageMultilang::isEnabled()))		{			return $active->id;		}		// If not found, return language specific home link		$default = $menus->getDefault($language);		return !empty($default->id) ? $default->id : null;	}}
<?php/** * @package     Joomla.Legacy * @subpackage  Form * * @copyright   Copyright (C) 2005 - 2013 Open Source Matters, Inc. All rights reserved. * @license     GNU General Public License version 2 or later; see LICENSE */defined('JPATH_PLATFORM') or die;jimport('joomla.filesystem.folder');/** * Form Field to display a list of the layouts for module display from the module or template overrides. * * @package     Joomla.Legacy * @subpackage  Form * @since       11.1 */class JFormFieldModulelayout extends JFormField{	/**	 * The form field type.	 *	 * @var    string	 * @since  11.1	 */	protected $type = 'ModuleLayout';	/**	 * Method to get the field input for module layouts.	 *	 * @return  string  The field input.	 *	 * @since   11.1	 */	protected function getInput()	{		// Get the client id.		$clientId = $this->element['client_id'];		if (is_null($clientId) && $this->form instanceof JForm)		{			$clientId = $this->form->getValue('client_id');		}		$clientId = (int) $clientId;		$client = JApplicationHelper::getClientInfo($clientId);		// Get the module.		$module = (string) $this->element['module'];		if (empty($module) && ($this->form instanceof JForm))		{			$module = $this->form->getValue('module');		}		$module = preg_replace('#\W#', '', $module);		// Get the template.		$template = (string) $this->element['template'];		$template = preg_replace('#\W#', '', $template);		// Get the style.		if ($this->form instanceof JForm)		{			$template_style_id = $this->form->getValue('template_style_id');		}		$template_style_id = preg_replace('#\W#', '', $template_style_id);		// If an extension and view are present build the options.		if ($module && $client)		{			// Load language file			$lang = JFactory::getLanguage();			$lang->load($module . '.sys', $client->path, null, false, false)				|| $lang->load($module . '.sys', $client->path . '/modules/' . $module, null, false, false)				|| $lang->load($module . '.sys', $client->path, $lang->getDefault(), false, false)				|| $lang->load($module . '.sys', $client->path . '/modules/' . $module, $lang->getDefault(), false, false);			// Get the database object and a new query object.			$db = JFactory::getDbo();			$query = $db->getQuery(true);			// Build the query.			$query->select('element, name')				->from('#__extensions as e')				->where('e.client_id = ' . (int) $clientId)				->where('e.type = ' . $db->quote('template'))				->where('e.enabled = 1');			if ($template)			{				$query->where('e.element = ' . $db->quote($template));			}			if ($template_style_id)			{				$query->join('LEFT', '#__template_styles as s on s.template=e.element')					->where('s.id=' . (int) $template_style_id);			}			// Set the query and load the templates.			$db->setQuery($query);			$templates = $db->loadObjectList('element');			// Build the search paths for module layouts.			$module_path = JPath::clean($client->path . '/modules/' . $module . '/tmpl');			// Prepare array of component layouts			$module_layouts = array();			// Prepare the grouped list			$groups = array();			// Add the layout options from the module path.			if (is_dir($module_path) && ($module_layouts = JFolder::files($module_path, '^[^_]*\.php$')))			{				// Create the group for the module				$groups['_'] = array();				$groups['_']['id'] = $this->id . '__';				$groups['_']['text'] = JText::sprintf('JOPTION_FROM_MODULE');				$groups['_']['items'] = array();				foreach ($module_layouts as $file)				{					// Add an option to the module group					$value = basename($file, '.php');					$text = $lang->hasKey($key = strtoupper($module . '_LAYOUT_' . $value)) ? JText::_($key) : $value;					$groups['_']['items'][] = JHtml::_('select.option', '_:' . $value, $text);				}			}			// Loop on all templates			if ($templates)			{				foreach ($templates as $template)				{					// Load language file					$lang->load('tpl_' . $template->element . '.sys', $client->path, null, false, false)						|| $lang->load('tpl_' . $template->element . '.sys', $client->path . '/templates/' . $template->element, null, false, false)						|| $lang->load('tpl_' . $template->element . '.sys', $client->path, $lang->getDefault(), false, false)						|| $lang->load(						'tpl_' . $template->element . '.sys', $client->path . '/templates/' . $template->element, $lang->getDefault(),						false, false					);					$template_path = JPath::clean($client->path . '/templates/' . $template->element . '/html/' . $module);					// Add the layout options from the template path.					if (is_dir($template_path) && ($files = JFolder::files($template_path, '^[^_]*\.php$')))					{						foreach ($files as $i => $file)						{							// Remove layout that already exist in component ones							if (in_array($file, $module_layouts))							{								unset($files[$i]);							}						}						if (count($files))						{							// Create the group for the template							$groups[$template->element] = array();							$groups[$template->element]['id'] = $this->id . '_' . $template->element;							$groups[$template->element]['text'] = JText::sprintf('JOPTION_FROM_TEMPLATE', $template->name);							$groups[$template->element]['items'] = array();							foreach ($files as $file)							{								// Add an option to the template group								$value = basename($file, '.php');								$text = $lang->hasKey($key = strtoupper('TPL_' . $template->element . '_' . $module . '_LAYOUT_' . $value))									? JText::_($key) : $value;								$groups[$template->element]['items'][] = JHtml::_('select.option', $template->element . ':' . $value, $text);							}						}					}				}			}			// Compute attributes for the grouped list			$attr = $this->element['size'] ? ' size="' . (int) $this->element['size'] . '"' : '';			// Prepare HTML code			$html = array();			// Compute the current selected values			$selected = array($this->value);			// Add a grouped list			$html[] = JHtml::_(				'select.groupedlist', $groups, $this->name,				array('id' => $this->id, 'group.id' => 'id', 'list.attr' => $attr, 'list.select' => $selected)			);			return implode($html);		}		else		{			return '';		}	}}
<?php/** * @package     Joomla.Platform * @subpackage  OAuth * * @copyright   Copyright (C) 2005 - 2012 Open Source Matters, Inc. All rights reserved. * @license     GNU General Public License version 2 or later; see LICENSE */defined('JPATH_PLATFORM') or die();jimport('joomla.environment.response');/** * Joomla Platform class for interacting with an OAuth 1.0 and 1.0a server. * * @package     Joomla.Platform * @subpackage  OAuth * * @since       13.1 */abstract class JOAuth1Client{	/**	 * @var    JRegistry  Options for the JOAuth1Client object.	 * @since  13.1	 */	protected $options;	/**	 * @var array  Contains access token key, secret and verifier.	 * @since 13.1	 */	protected $token = array();	/**	 * @var    JHttp  The HTTP client object to use in sending HTTP requests.	 * @since  13.1	 */	protected $client;	/**	 * @var    JInput The input object to use in retrieving GET/POST data.	 * @since  13.1	 */	protected $input;	/**	 * @var   JApplicationWeb  The application object to send HTTP headers for redirects.	 * @since 13.1	 */	protected $application;	/**	 * @var   string  Selects which version of OAuth to use: 1.0 or 1.0a.	 * @since 13.1	 */	protected $version;	/**	 * Constructor.	 *	 * @param   JRegistry        $options      OAuth1Client options object.	 * @param   JHttp            $client       The HTTP client object.	 * @param   JInput           $input        The input object	 * @param   JApplicationWeb  $application  The application object	 * @param   string           $version      Specify the OAuth version. By default we are using 1.0a.	 *	 * @since 13.1	 */	public function __construct(JRegistry $options = null, JHttp $client = null, JInput $input = null, JApplicationWeb $application = null,		$version = null)	{		$this->options = isset($options) ? $options : new JRegistry;		$this->client = isset($client) ? $client : JHttpFactory::getHttp($this->options);		$this->input = isset($input) ? $input : JFactory::getApplication()->input;		$this->application = isset($application) ? $application : new JApplicationWeb;		$this->version = isset($version) ? $version : '1.0a';	}	/**	 * Method to for the oauth flow.	 *	 * @return void	 *	 * @since  13.1	 *	 * @throws DomainException	 */	public function authenticate()	{		// Already got some credentials stored?		if ($this->token)		{			$response = $this->verifyCredentials();			if ($response)			{				return $this->token;			}			else			{				$this->token = null;			}		}		// Check for callback.		if (strcmp($this->version, '1.0a') === 0)		{			$verifier = $this->input->get('oauth_verifier');		}		else		{			$verifier = $this->input->get('oauth_token');		}		if (empty($verifier))		{			// Generate a request token.			$this->_generateRequestToken();			// Authenticate the user and authorise the app.			$this->_authorise();		}		// Callback		else		{			$session = JFactory::getSession();			// Get token form session.			$this->token = array('key' => $session->get('key', null, 'oauth_token'), 'secret' => $session->get('secret', null, 'oauth_token'));			// Verify the returned request token.			if (strcmp($this->token['key'], $this->input->get('oauth_token')) !== 0)			{				throw new DomainException('Bad session!');			}			// Set token verifier for 1.0a.			if (strcmp($this->version, '1.0a') === 0)			{				$this->token['verifier'] = $this->input->get('oauth_verifier');			}			// Generate access token.			$this->_generateAccessToken();			// Return the access token.			return $this->token;		}	}	/**	 * Method used to get a request token.	 *	 * @return void	 *	 * @since  13.1	 * @throws  DomainException	 */	private function _generateRequestToken()	{		// Set the callback URL.		if ($this->getOption('callback'))		{			$parameters = array(				'oauth_callback' => $this->getOption('callback')			);		}		else		{			$parameters = array();		}		// Make an OAuth request for the Request Token.		$response = $this->oauthRequest($this->getOption('requestTokenURL'), 'POST', $parameters);		parse_str($response->body, $params);		if (strcmp($this->version, '1.0a') === 0 && strcmp($params['oauth_callback_confirmed'], 'true') !== 0)		{			throw new DomainException('Bad request token!');		}		// Save the request token.		$this->token = array('key' => $params['oauth_token'], 'secret' => $params['oauth_token_secret']);		// Save the request token in session		$session = JFactory::getSession();		$session->set('key', $this->token['key'], 'oauth_token');		$session->set('secret', $this->token['secret'], 'oauth_token');	}	/**	 * Method used to authorise the application.	 *	 * @return void	 *	 * @since  13.1	 */	private function _authorise()	{		$url = $this->getOption('authoriseURL') . '?oauth_token=' . $this->token['key'];		if ($this->getOption('scope'))		{			$scope = is_array($this->getOption('scope')) ? implode(' ', $this->getOption('scope')) : $this->getOption('scope');			$url .= '&scope=' . urlencode($scope);		}		if ($this->getOption('sendheaders'))		{			$this->application->redirect($url);		}	}	/**	 * Method used to get an access token.	 *	 * @return void	 *	 * @since  13.1	 */	private function _generateAccessToken()	{		// Set the parameters.		$parameters = array(			'oauth_token' => $this->token['key']		);		if (strcmp($this->version, '1.0a') === 0)		{			$parameters = array_merge($parameters, array('oauth_verifier' => $this->token['verifier']));		}		// Make an OAuth request for the Access Token.		$response = $this->oauthRequest($this->getOption('accessTokenURL'), 'POST', $parameters);		parse_str($response->body, $params);		// Save the access token.		$this->token = array('key' => $params['oauth_token'], 'secret' => $params['oauth_token_secret']);	}	/**	 * Method used to make an OAuth request.	 *	 * @param   string  $url         The request URL.	 * @param   string  $method      The request method.	 * @param   array   $parameters  Array containing request parameters.	 * @param   mixed   $data        The POST request data.	 * @param   array   $headers     An array of name-value pairs to include in the header of the request	 *	 * @return  object  The JHttpResponse object.	 *	 * @since 13.1	 * @throws  DomainException	 */	public function oauthRequest($url, $method, $parameters, $data = array(), $headers = array())	{		// Set the parameters.		$defaults = array(			'oauth_consumer_key' => $this->getOption('consumer_key'),			'oauth_signature_method' => 'HMAC-SHA1',			'oauth_version' => '1.0',			'oauth_nonce' => $this->generateNonce(),			'oauth_timestamp' => time()		);		$parameters = array_merge($parameters, $defaults);		// Do not encode multipart parameters. Do not include $data in the signature if $data is not array.		if (isset($headers['Content-Type']) && strpos($headers['Content-Type'], 'multipart/form-data') !== false || !is_array($data))		{			$oauth_headers = $parameters;		}		else		{			// Use all parameters for the signature.			$oauth_headers = array_merge($parameters, $data);		}		// Sign the request.		$oauth_headers = $this->_signRequest($url, $method, $oauth_headers);		// Get parameters for the Authorisation header.		if (is_array($data))		{			$oauth_headers = array_diff_key($oauth_headers, $data);		}		// Send the request.		switch ($method)		{			case 'GET':				$url = $this->toUrl($url, $data);				$response = $this->client->get($url, array('Authorization' => $this->_createHeader($oauth_headers)));				break;			case 'POST':				$headers = array_merge($headers, array('Authorization' => $this->_createHeader($oauth_headers)));				$response = $this->client->post($url, $data, $headers);				break;			case 'PUT':				$headers = array_merge($headers, array('Authorization' => $this->_createHeader($oauth_headers)));				$response = $this->client->put($url, $data, $headers);				break;			case 'DELETE':				$headers = array_merge($headers, array('Authorization' => $this->_createHeader($oauth_headers)));				$response = $this->client->delete($url, $headers);				break;		}		// Validate the response code.		$this->validateResponse($url, $response);		return $response;	}	/**	 * Method to validate a response.	 *	 * @param   string         $url       The request URL.	 * @param   JHttpResponse  $response  The response to validate.	 *	 * @return  void	 *	 * @since  13.1	 * @throws DomainException	 */	abstract public function validateResponse($url, $response);	/**	 * Method used to create the header for the POST request.	 *	 * @param   array  $parameters  Array containing request parameters.	 *	 * @return  string  The header.	 *	 * @since 13.1	 */	private function _createHeader($parameters)	{		$header = 'OAuth ';		foreach ($parameters as $key => $value)		{			if (!strcmp($header, 'OAuth '))			{				$header .= $key . '="' . $this->safeEncode($value) . '"';			}			else			{				$header .= ', ' . $key . '="' . $value . '"';			}		}		return $header;	}	/**	 * Method to create the URL formed string with the parameters.	 *	 * @param   string  $url         The request URL.	 * @param   array   $parameters  Array containing request parameters.	 *	 * @return  string  The formed URL.	 *	 * @since  13.1	 */	public function toUrl($url, $parameters)	{		foreach ($parameters as $key => $value)		{			if (is_array($value))			{				foreach ($value as $k => $v)				{					if (strpos($url, '?') === false)					{						$url .= '?' . $key . '=' . $v;					}					else					{						$url .= '&' . $key . '=' . $v;					}				}			}			else			{				if (strpos($value, ' ') !== false)				{					$value = $this->safeEncode($value);				}				if (strpos($url, '?') === false)				{					$url .= '?' . $key . '=' . $value;				}				else				{					$url .= '&' . $key . '=' . $value;				}			}		}		return $url;	}	/**	 * Method used to sign requests.	 *	 * @param   string  $url         The URL to sign.	 * @param   string  $method      The request method.	 * @param   array   $parameters  Array containing request parameters.	 *	 * @return  void	 *	 * @since   13.1	 */	private function _signRequest($url, $method, $parameters)	{		// Create the signature base string.		$base = $this->_baseString($url, $method, $parameters);		$parameters['oauth_signature'] = $this->safeEncode(			base64_encode(				hash_hmac('sha1', $base, $this->_prepareSigningKey(), true)				)			);		return $parameters;	}	/**	 * Prepare the signature base string.	 *	 * @param   string  $url         The URL to sign.	 * @param   string  $method      The request method.	 * @param   array   $parameters  Array containing request parameters.	 *	 * @return string  The base string.	 *	 * @since 13.1	 */	private function _baseString($url, $method, $parameters)	{		// Sort the parameters alphabetically		uksort($parameters, 'strcmp');		// Encode parameters.		foreach ($parameters as $key => $value)		{			$key = $this->safeEncode($key);			if (is_array($value))			{				foreach ($value as $k => $v)				{					$v = $this->safeEncode($v);					$kv[] = "{$key}={$v}";				}			}			else			{				$value = $this->safeEncode($value);				$kv[] = "{$key}={$value}";			}		}		// Form the parameter string.		$params = implode('&', $kv);		// Signature base string elements.		$base = array(			$method,			$url,			$params			);		// Return the base string.		return implode('&', $this->safeEncode($base));	}	/**	 * Encodes the string or array passed in a way compatible with OAuth.	 * If an array is passed each array value will will be encoded.	 *	 * @param   mixed  $data  The scalar or array to encode.	 *	 * @return  string  $data encoded in a way compatible with OAuth.	 *	 * @since 13.1	 */	public function safeEncode($data)	{		if (is_array($data))		{			return array_map(array($this, 'safeEncode'), $data);		}		elseif (is_scalar($data))		{			return str_ireplace(				array('+', '%7E'),				array(' ', '~'),				rawurlencode($data)				);		}		else		{			return '';		}	}	/**	 * Method used to generate the current nonce.	 *	 * @return  string  The current nonce.	 *	 * @since 13.1	 */	public static function generateNonce()	{		$mt = microtime();		$rand = mt_rand();		// The md5s look nicer than numbers.		return md5($mt . $rand);	}	/**	 * Prepares the OAuth signing key.	 *	 * @return string  The prepared signing key.	 *	 * @since 13.1	 */	private function _prepareSigningKey()	{		return $this->safeEncode($this->getOption('consumer_secret')) . '&' . $this->safeEncode(($this->token) ? $this->token['secret'] : '');	}	/**	 * Returns an HTTP 200 OK response code and a representation of the requesting user if authentication was successful;	 * returns a 401 status code and an error message if not.	 *	 * @return  array  The decoded JSON response	 *	 * @since   13.1	 */	abstract public function verifyCredentials();	/**	 * Get an option from the JOauth1aClient instance.	 *	 * @param   string  $key  The name of the option to get	 *	 * @return  mixed  The option value	 *	 * @since   13.1	 */	public function getOption($key)	{		return $this->options->get($key);	}	/**	 * Set an option for the JOauth1aClient instance.	 *	 * @param   string  $key    The name of the option to set	 * @param   mixed   $value  The option value to set	 *	 * @return  JOAuth1Client  This object for method chaining	 *	 * @since   13.1	 */	public function setOption($key, $value)	{		$this->options->set($key, $value);		return $this;	}	/**	 * Get the oauth token key or secret.	 *	 * @return  array  The oauth token key and secret.	 *	 * @since   13.1	 */	public function getToken()	{		return $this->token;	}	/**	 * Set the oauth token.	 *	 * @param   array  $token  The access token key and secret.	 *	 * @return  JOAuth1Client  This object for method chaining.	 *	 * @since   13.1	 */	public function setToken($token)	{		$this->token = $token;		return $this;	}}
<?php/** * @package     Joomla.Administrator * @subpackage  com_weblinks * * @copyright   Copyright (C) 2005 - 2013 Open Source Matters, Inc. All rights reserved. * @license     GNU General Public License version 2 or later; see LICENSE.txt */defined('_JEXEC') or die;/** * View class for a list of weblinks. * * @package     Joomla.Administrator * @subpackage  com_weblinks * @since       1.5 */class WeblinksViewWeblinks extends JViewLegacy{	protected $items;	protected $pagination;	protected $state;	/**	 * Display the view	 *	 * @return  void	 */	public function display($tpl = null)	{		$this->state		= $this->get('State');		$this->items		= $this->get('Items');		$this->pagination	= $this->get('Pagination');		WeblinksHelper::addSubmenu('weblinks');		// Check for errors.		if (count($errors = $this->get('Errors')))		{			JError::raiseError(500, implode("\n", $errors));			return false;		}		$this->addToolbar();		$this->sidebar = JHtmlSidebar::render();		parent::display($tpl);	}	/**	 * Add the page title and toolbar.	 *	 * @since   1.6	 */	protected function addToolbar()	{		require_once JPATH_COMPONENT.'/helpers/weblinks.php';		$state	= $this->get('State');		$canDo	= WeblinksHelper::getActions($state->get('filter.category_id'));		$user	= JFactory::getUser();		// Get the toolbar object instance		$bar = JToolBar::getInstance('toolbar');		JToolbarHelper::title(JText::_('COM_WEBLINKS_MANAGER_WEBLINKS'), 'weblinks.png');		if (count($user->getAuthorisedCategories('com_weblinks', 'core.create')) > 0)		{			JToolbarHelper::addNew('weblink.add');		}		if ($canDo->get('core.edit'))		{			JToolbarHelper::editList('weblink.edit');		}		if ($canDo->get('core.edit.state')) {			JToolbarHelper::publish('weblinks.publish', 'JTOOLBAR_PUBLISH', true);			JToolbarHelper::unpublish('weblinks.unpublish', 'JTOOLBAR_UNPUBLISH', true);			JToolbarHelper::archiveList('weblinks.archive');			JToolbarHelper::checkin('weblinks.checkin');		}		if ($state->get('filter.state') == -2 && $canDo->get('core.delete'))		{			JToolbarHelper::deleteList('', 'weblinks.delete', 'JTOOLBAR_EMPTY_TRASH');		} elseif ($canDo->get('core.edit.state'))		{			JToolbarHelper::trash('weblinks.trash');		}		// Add a batch button		if ($canDo->get('core.edit'))		{			JHtml::_('bootstrap.modal', 'collapseModal');			$title = JText::_('JTOOLBAR_BATCH');			$dhtml = "<button data-toggle=\"modal\" data-target=\"#collapseModal\" class=\"btn btn-small\">						<i class=\"icon-checkbox-partial\" title=\"$title\"></i>						$title</button>";			$bar->appendButton('Custom', $dhtml, 'batch');		}		if ($canDo->get('core.admin'))		{			JToolbarHelper::preferences('com_weblinks');		}		JToolbarHelper::help('JHELP_COMPONENTS_WEBLINKS_LINKS');		JHtmlSidebar::setAction('index.php?option=com_weblinks&view=weblinks');		JHtmlSidebar::addFilter(			JText::_('JOPTION_SELECT_PUBLISHED'),			'filter_state',			JHtml::_('select.options', JHtml::_('jgrid.publishedOptions'), 'value', 'text', $this->state->get('filter.state'), true)		);		JHtmlSidebar::addFilter(			JText::_('JOPTION_SELECT_CATEGORY'),			'filter_category_id',			JHtml::_('select.options', JHtml::_('category.options', 'com_weblinks'), 'value', 'text', $this->state->get('filter.category_id'))		);		JHtmlSidebar::addFilter(			JText::_('JOPTION_SELECT_ACCESS'),			'filter_access',			JHtml::_('select.options', JHtml::_('access.assetgroups'), 'value', 'text', $this->state->get('filter.access'))		);		JHtmlSidebar::addFilter(			JText::_('JOPTION_SELECT_LANGUAGE'),			'filter_language',			JHtml::_('select.options', JHtml::_('contentlanguage.existing', true, true), 'value', 'text', $this->state->get('filter.language'))		);		JHtmlSidebar::addFilter(		'-' . JText::_('JSELECT') . ' ' . JText::_('JTAG') . '-',		'filter_tag',		JHtml::_('select.options', JHtml::_('tag.options', true, true), 'value', 'text', $this->state->get('filter.tag'))		);	}	/**	 * Returns an array of fields the table can be sorted by	 *	 * @return  array  Array containing the field name to sort by as the key and display text as value	 *	 * @since   3.0	 */	protected function getSortFields()	{		return array(			'a.ordering' => JText::_('JGRID_HEADING_ORDERING'),			'a.state' => JText::_('JSTATUS'),			'a.title' => JText::_('JGLOBAL_TITLE'),			'a.access' => JText::_('JGRID_HEADING_ACCESS'),			'a.hits' => JText::_('JGLOBAL_HITS'),			'a.language' => JText::_('JGRID_HEADING_LANGUAGE'),			'a.id' => JText::_('JGRID_HEADING_ID')		);	}}
<?php/** * @package     Joomla.Administrator * @subpackage  com_banners * * @copyright   Copyright (C) 2005 - 2013 Open Source Matters, Inc. All rights reserved. * @license     GNU General Public License version 2 or later; see LICENSE.txt */defined('_JEXEC') or die;if (!JFactory::getUser()->authorise('core.manage', 'com_banners')){	return JError::raiseWarning(404, JText::_('JERROR_ALERTNOAUTHOR'));}// Execute the task.$controller	= JControllerLegacy::getInstance('Banners');$controller->execute(JFactory::getApplication()->input->get('task'));$controller->redirect();
<?php/** * @package     Joomla.Platform * @subpackage  Document * * @copyright   Copyright (C) 2005 - 2013 Open Source Matters, Inc. All rights reserved. * @license     GNU General Public License version 2 or later; see LICENSE */defined('JPATH_PLATFORM') or die;jimport('joomla.utilities.utility');/** * DocumentHTML class, provides an easy interface to parse and display a HTML document * * @package     Joomla.Platform * @subpackage  Document * @since       11.1 */class JDocumentHTML extends JDocument{	/**	 * Array of Header <link> tags	 *	 * @var    array	 * @since  11.1	 */	public $_links = array();	/**	 * Array of custom tags	 *	 * @var    array	 * @since  11.1	 */	public $_custom = array();	/**	 * Name of the template	 *	 * @var    string	 * @since  11.1	 */	public $template = null;	/**	 * Base url	 *	 * @var    string	 * @since  11.1	 */	public $baseurl = null;	/**	 * Array of template parameters	 *	 * @var    array	 * @since  11.1	 */	public $params = null;	/**	 * File name	 *	 * @var    array	 * @since  11.1	 */	public $_file = null;	/**	 * String holding parsed template	 *	 * @var    string	 * @since  11.1	 */	protected $_template = '';	/**	 * Array of parsed template JDoc tags	 *	 * @var    array	 * @since  11.1	 */	protected $_template_tags = array();	/**	 * Integer with caching setting	 *	 * @var    integer	 * @since  11.1	 */	protected $_caching = null;	/**	 * Set to true when the document should be output as HTML%	 *	 * @var    boolean	 * @since  12.1	 */	private $_html5 = null;	/**	 * Class constructor	 *	 * @param   array  $options  Associative array of options	 *	 * @since   11.1	 */	public function __construct($options = array())	{		parent::__construct($options);		// Set document type		$this->_type = 'html';		// Set default mime type and document metadata (meta data syncs with mime type by default)		$this->setMimeEncoding('text/html');	}	/**	 * Get the HTML document head data	 *	 * @return  array  The document head data in array form	 *	 * @since   11.1	 */	public function getHeadData()	{		$data = array();		$data['title']       = $this->title;		$data['description'] = $this->description;		$data['link']        = $this->link;		$data['metaTags']    = $this->_metaTags;		$data['links']       = $this->_links;		$data['styleSheets'] = $this->_styleSheets;		$data['style']       = $this->_style;		$data['scripts']     = $this->_scripts;		$data['script']      = $this->_script;		$data['custom']      = $this->_custom;		return $data;	}	/**	 * Set the HTML document head data	 *	 * @param   array  $data  The document head data in array form	 *	 * @return  JDocumentHTML instance of $this to allow chaining	 *	 * @since   11.1	 */	public function setHeadData($data)	{		if (empty($data) || !is_array($data))		{			return;		}		$this->title = (isset($data['title']) && !empty($data['title'])) ? $data['title'] : $this->title;		$this->description = (isset($data['description']) && !empty($data['description'])) ? $data['description'] : $this->description;		$this->link = (isset($data['link']) && !empty($data['link'])) ? $data['link'] : $this->link;		$this->_metaTags = (isset($data['metaTags']) && !empty($data['metaTags'])) ? $data['metaTags'] : $this->_metaTags;		$this->_links = (isset($data['links']) && !empty($data['links'])) ? $data['links'] : $this->_links;		$this->_styleSheets = (isset($data['styleSheets']) && !empty($data['styleSheets'])) ? $data['styleSheets'] : $this->_styleSheets;		$this->_style = (isset($data['style']) && !empty($data['style'])) ? $data['style'] : $this->_style;		$this->_scripts = (isset($data['scripts']) && !empty($data['scripts'])) ? $data['scripts'] : $this->_scripts;		$this->_script = (isset($data['script']) && !empty($data['script'])) ? $data['script'] : $this->_script;		$this->_custom = (isset($data['custom']) && !empty($data['custom'])) ? $data['custom'] : $this->_custom;		return $this;	}	/**	 * Merge the HTML document head data	 *	 * @param   array  $data  The document head data in array form	 *	 * @return  JDocumentHTML instance of $this to allow chaining	 *	 * @since   11.1	 */	public function mergeHeadData($data)	{		if (empty($data) || !is_array($data))		{			return;		}		$this->title = (isset($data['title']) && !empty($data['title']) && !stristr($this->title, $data['title']))			? $this->title . $data['title']			: $this->title;		$this->description = (isset($data['description']) && !empty($data['description']) && !stristr($this->description, $data['description']))			? $this->description . $data['description']			: $this->description;		$this->link = (isset($data['link'])) ? $data['link'] : $this->link;		if (isset($data['metaTags']))		{			foreach ($data['metaTags'] as $type1 => $data1)			{				$booldog = $type1 == 'http-equiv' ? true : false;				foreach ($data1 as $name2 => $data2)				{					$this->setMetaData($name2, $data2, $booldog);				}			}		}		$this->_links = (isset($data['links']) && !empty($data['links']) && is_array($data['links']))			? array_unique(array_merge($this->_links, $data['links']))			: $this->_links;		$this->_styleSheets = (isset($data['styleSheets']) && !empty($data['styleSheets']) && is_array($data['styleSheets']))			? array_merge($this->_styleSheets, $data['styleSheets'])			: $this->_styleSheets;		if (isset($data['style']))		{			foreach ($data['style'] as $type => $stdata)			{				if (!isset($this->_style[strtolower($type)]) || !stristr($this->_style[strtolower($type)], $stdata))				{					$this->addStyleDeclaration($stdata, $type);				}			}		}		$this->_scripts = (isset($data['scripts']) && !empty($data['scripts']) && is_array($data['scripts']))			? array_merge($this->_scripts, $data['scripts'])			: $this->_scripts;		if (isset($data['script']))		{			foreach ($data['script'] as $type => $sdata)			{				if (!isset($this->_script[strtolower($type)]) || !stristr($this->_script[strtolower($type)], $sdata))				{					$this->addScriptDeclaration($sdata, $type);				}			}		}		$this->_custom = (isset($data['custom']) && !empty($data['custom']) && is_array($data['custom']))			? array_unique(array_merge($this->_custom, $data['custom']))			: $this->_custom;		return $this;	}	/**	 * Adds <link> tags to the head of the document	 *	 * $relType defaults to 'rel' as it is the most common relation type used.	 * ('rev' refers to reverse relation, 'rel' indicates normal, forward relation.)	 * Typical tag: <link href="index.php" rel="Start">	 *	 * @param   string  $href      The link that is being related.	 * @param   string  $relation  Relation of link.	 * @param   string  $relType   Relation type attribute.  Either rel or rev (default: 'rel').	 * @param   array   $attribs   Associative array of remaining attributes.	 *	 * @return  JDocumentHTML instance of $this to allow chaining	 *	 * @since   11.1	 */	public function addHeadLink($href, $relation, $relType = 'rel', $attribs = array())	{		$this->_links[$href]['relation'] = $relation;		$this->_links[$href]['relType'] = $relType;		$this->_links[$href]['attribs'] = $attribs;		return $this;	}	/**	 * Adds a shortcut icon (favicon)	 *	 * This adds a link to the icon shown in the favorites list or on	 * the left of the url in the address bar. Some browsers display	 * it on the tab, as well.	 *	 * @param   string  $href      The link that is being related.	 * @param   string  $type      File type	 * @param   string  $relation  Relation of link	 *	 * @return  JDocumentHTML instance of $this to allow chaining	 *	 * @since   11.1	 */	public function addFavicon($href, $type = 'image/vnd.microsoft.icon', $relation = 'shortcut icon')	{		$href = str_replace('\\', '/', $href);		$this->addHeadLink($href, $relation, 'rel', array('type' => $type));		return $this;	}	/**	 * Adds a custom HTML string to the head block	 *	 * @param   string  $html  The HTML to add to the head	 *	 * @return  JDocumentHTML instance of $this to allow chaining	 *	 * @since   11.1	 */	public function addCustomTag($html)	{		$this->_custom[] = trim($html);		return $this;	}	/**	 * Returns whether the document is set up to be output as HTML5	 *	 * @return  Boolean true when HTML5 is used	 *	 * @since   12.1	 */	public function isHtml5()	{		return $this->_html5;	}	/**	 * Sets whether the document should be output as HTML5	 *	 * @param   bool  $state  True when HTML5 should be output	 *	 * @return  void	 *	 * @since   12.1	 */	public function setHtml5($state)	{		if (is_bool($state))		{			$this->_html5 = $state;		}	}	/**	 * Get the contents of a document include	 *	 * @param   string  $type     The type of renderer	 * @param   string  $name     The name of the element to render	 * @param   array   $attribs  Associative array of remaining attributes.	 *	 * @return  The output of the renderer	 *	 * @since   11.1	 */	public function getBuffer($type = null, $name = null, $attribs = array())	{		// If no type is specified, return the whole buffer		if ($type === null)		{			return parent::$_buffer;		}		$title = (isset($attribs['title'])) ? $attribs['title'] : null;		if (isset(parent::$_buffer[$type][$name][$title]))		{			return parent::$_buffer[$type][$name][$title];		}		$renderer = $this->loadRenderer($type);		if ($this->_caching == true && $type == 'modules')		{			$cache = JFactory::getCache('com_modules', '');			$hash = md5(serialize(array($name, $attribs, null, $renderer)));			$cbuffer = $cache->get('cbuffer_' . $type);			if (isset($cbuffer[$hash]))			{				return JCache::getWorkarounds($cbuffer[$hash], array('mergehead' => 1));			}			else			{				$options = array();				$options['nopathway'] = 1;				$options['nomodules'] = 1;				$options['modulemode'] = 1;				$this->setBuffer($renderer->render($name, $attribs, null), $type, $name);				$data = parent::$_buffer[$type][$name][$title];				$tmpdata = JCache::setWorkarounds($data, $options);				$cbuffer[$hash] = $tmpdata;				$cache->store($cbuffer, 'cbuffer_' . $type);			}		}		else		{			$this->setBuffer($renderer->render($name, $attribs, null), $type, $name, $title);		}		return parent::$_buffer[$type][$name][$title];	}	/**	 * Set the contents a document includes	 *	 * @param   string  $content  The content to be set in the buffer.	 * @param   array   $options  Array of optional elements.	 *	 * @return  JDocumentHTML instance of $this to allow chaining	 *	 * @since   11.1	 */	public function setBuffer($content, $options = array())	{		// The following code is just for backward compatibility.		if (func_num_args() > 1 && !is_array($options))		{			$args = func_get_args();			$options = array();			$options['type'] = $args[1];			$options['name'] = (isset($args[2])) ? $args[2] : null;			$options['title'] = (isset($args[3])) ? $args[3] : null;		}		parent::$_buffer[$options['type']][$options['name']][$options['title']] = $content;		return $this;	}	/**	 * Parses the template and populates the buffer	 *	 * @param   array  $params  Parameters for fetching the template	 *	 * @return  JDocumentHTML instance of $this to allow chaining	 *	 * @since   11.1	 */	public function parse($params = array())	{		return $this->_fetchTemplate($params)->_parseTemplate();	}	/**	 * Outputs the template to the browser.	 *	 * @param   boolean  $caching  If true, cache the output	 * @param   array    $params   Associative array of attributes	 *	 * @return  The rendered data	 *	 * @since   11.1	 */	public function render($caching = false, $params = array())	{		$this->_caching = $caching;		if (!empty($this->_template))		{			$data = $this->_renderTemplate();		}		else		{			$this->parse($params);			$data = $this->_renderTemplate();		}		parent::render();		return $data;	}	/**	 * Count the modules based on the given condition	 *	 * @param   string  $condition  The condition to use	 *	 * @return  integer  Number of modules found	 *	 * @since   11.1	 */	public function countModules($condition)	{		$operators = '(\+|\-|\*|\/|==|\!=|\<\>|\<|\>|\<=|\>=|and|or|xor)';		$words = preg_split('# ' . $operators . ' #', $condition, null, PREG_SPLIT_DELIM_CAPTURE);		for ($i = 0, $n = count($words); $i < $n; $i += 2)		{			// Odd parts (modules)			$name = strtolower($words[$i]);			$words[$i] = ((isset(parent::$_buffer['modules'][$name])) && (parent::$_buffer['modules'][$name] === false))				? 0				: count(JModuleHelper::getModules($name));		}		$str = 'return ' . implode(' ', $words) . ';';		return eval($str);	}	/**	 * Count the number of child menu items	 *	 * @return  integer  Number of child menu items	 *	 * @since   11.1	 */	public function countMenuChildren()	{		static $children;		if (!isset($children))		{			$db = JFactory::getDbo();			$app = JFactory::getApplication();			$menu = $app->getMenu();			$active = $menu->getActive();			if ($active)			{				$query = $db->getQuery(true)					->select('COUNT(*)')					->from('#__menu')					->where('parent_id = ' . $active->id)					->where('published = 1');				$children = $db->loadResult();			}			else			{				$children = 0;			}		}		return $children;	}	/**	 * Load a template file	 *	 * @param   string  $directory  The name of the template	 * @param   string  $filename   The actual filename	 *	 * @return  string  The contents of the template	 *	 * @since   11.1	 */	protected function _loadTemplate($directory, $filename)	{		// @todo remove code: $component	= JApplicationHelper::getComponentName();		$contents = '';		// Check to see if we have a valid template file		if (file_exists($directory . '/' . $filename))		{			// Store the file path			$this->_file = $directory . '/' . $filename;			// Get the file content			ob_start();			require $directory . '/' . $filename;			$contents = ob_get_contents();			ob_end_clean();		}		// Try to find a favicon by checking the template and root folder		$path = $directory . '/';		$dirs = array($path, JPATH_BASE . '/');		foreach ($dirs as $dir)		{			$icon = $dir . 'favicon.ico';			if (file_exists($icon))			{				$path = str_replace(JPATH_BASE . '/', '', $dir);				$path = str_replace('\\', '/', $path);				$this->addFavicon(JURI::base(true) . '/' . $path . 'favicon.ico');				break;			}		}		return $contents;	}	/**	 * Fetch the template, and initialise the params	 *	 * @param   array  $params  Parameters to determine the template	 *	 * @return  JDocumentHTML instance of $this to allow chaining	 *	 * @since   11.1	 */	protected function _fetchTemplate($params = array())	{		// Check		$directory = isset($params['directory']) ? $params['directory'] : 'templates';		$filter = JFilterInput::getInstance();		$template = $filter->clean($params['template'], 'cmd');		$file = $filter->clean($params['file'], 'cmd');		if (!file_exists($directory . '/' . $template . '/' . $file))		{			$template = 'system';		}		// Load the language file for the template		$lang = JFactory::getLanguage();		// 1.5 or core then 1.6		$lang->load('tpl_' . $template, JPATH_BASE, null, false, false)			|| $lang->load('tpl_' . $template, $directory . '/' . $template, null, false, false)			|| $lang->load('tpl_' . $template, JPATH_BASE, $lang->getDefault(), false, false)			|| $lang->load('tpl_' . $template, $directory . '/' . $template, $lang->getDefault(), false, false);		// Assign the variables		$this->template = $template;		$this->baseurl = JURI::base(true);		$this->params = isset($params['params']) ? $params['params'] : new JRegistry;		// Load		$this->_template = $this->_loadTemplate($directory . '/' . $template, $file);		return $this;	}	/**	 * Parse a document template	 *	 * @return  JDocumentHTML  instance of $this to allow chaining	 *	 * @since   11.1	 */	protected function _parseTemplate()	{		$matches = array();		if (preg_match_all('#<jdoc:include\ type="([^"]+)" (.*)\/>#iU', $this->_template, $matches))		{			$template_tags_first = array();			$template_tags_last = array();			// Step through the jdocs in reverse order.			for ($i = count($matches[0]) - 1; $i >= 0; $i--)			{				$type = $matches[1][$i];				$attribs = empty($matches[2][$i]) ? array() : JUtility::parseAttributes($matches[2][$i]);				$name = isset($attribs['name']) ? $attribs['name'] : null;				// Separate buffers to be executed first and last				if ($type == 'module' || $type == 'modules')				{					$template_tags_first[$matches[0][$i]] = array('type' => $type, 'name' => $name, 'attribs' => $attribs);				}				else				{					$template_tags_last[$matches[0][$i]] = array('type' => $type, 'name' => $name, 'attribs' => $attribs);				}			}			// Reverse the last array so the jdocs are in forward order.			$template_tags_last = array_reverse($template_tags_last);			$this->_template_tags = $template_tags_first + $template_tags_last;		}		return $this;	}	/**	 * Render pre-parsed template	 *	 * @return string rendered template	 *	 * @since   11.1	 */	protected function _renderTemplate()	{		$replace = array();		$with = array();		foreach ($this->_template_tags as $jdoc => $args)		{			$replace[] = $jdoc;			$with[] = $this->getBuffer($args['type'], $args['name'], $args['attribs']);		}		return str_replace($replace, $with, $this->_template);	}}
<?php/** * @package     Joomla.Administrator * @subpackage  com_users * * @copyright   Copyright (C) 2005 - 2013 Open Source Matters, Inc. All rights reserved. * @license     GNU General Public License version 2 or later; see LICENSE.txt */defined('_JEXEC') or die;/** * Users component helper. * * @package     Joomla.Administrator * @subpackage  com_users * @since       1.6 */class UsersHelper{	/**	 * @var    JObject  A cache for the available actions.	 * @since  1.6	 */	protected static $actions;	/**	 * Configure the Linkbar.	 *	 * @param   string  $vName  The name of the active view.	 *	 * @return  void	 *	 * @since   1.6	 */	public static function addSubmenu($vName)	{		JHtmlSidebar::addEntry(			JText::_('COM_USERS_SUBMENU_USERS'),			'index.php?option=com_users&view=users',			$vName == 'users'		);		// Groups and Levels are restricted to core.admin		$canDo = self::getActions();		if ($canDo->get('core.admin'))		{			JHtmlSidebar::addEntry(				JText::_('COM_USERS_SUBMENU_GROUPS'),				'index.php?option=com_users&view=groups',				$vName == 'groups'			);			JHtmlSidebar::addEntry(				JText::_('COM_USERS_SUBMENU_LEVELS'),				'index.php?option=com_users&view=levels',				$vName == 'levels'			);			JHtmlSidebar::addEntry(				JText::_('COM_USERS_SUBMENU_NOTES'),				'index.php?option=com_users&view=notes',				$vName == 'notes'			);			$extension = JFactory::getApplication()->input->getString('extension');			JHtmlSidebar::addEntry(				JText::_('COM_USERS_SUBMENU_NOTE_CATEGORIES'),				'index.php?option=com_categories&extension=com_users',				$vName == 'categories' || $extension == 'com_users'			);		}	}	/**	 * Gets a list of the actions that can be performed.	 *	 * @return  JObject	 *	 * @since   1.6	 * @todo    Refactor to work with notes	 */	public static function getActions()	{		if (empty(self::$actions))		{			$user = JFactory::getUser();			self::$actions = new JObject;			$actions = JAccess::getActions('com_users');			foreach ($actions as $action)			{				self::$actions->set($action->name, $user->authorise($action->name, 'com_users'));			}		}		return self::$actions;	}	/**	 * Get a list of filter options for the blocked state of a user.	 *	 * @return  array  An array of JHtmlOption elements.	 *	 * @since   1.6	 */	public static function getStateOptions()	{		// Build the filter options.		$options = array();		$options[] = JHtml::_('select.option', '0', JText::_('JENABLED'));		$options[] = JHtml::_('select.option', '1', JText::_('JDISABLED'));		return $options;	}	/**	 * Get a list of filter options for the activated state of a user.	 *	 * @return  array  An array of JHtmlOption elements.	 *	 * @since   1.6	 */	public static function getActiveOptions()	{		// Build the filter options.		$options = array();		$options[] = JHtml::_('select.option', '0', JText::_('COM_USERS_ACTIVATED'));		$options[] = JHtml::_('select.option', '1', JText::_('COM_USERS_UNACTIVATED'));		return $options;	}	/**	 * Get a list of the user groups for filtering.	 *	 * @return  array  An array of JHtmlOption elements.	 *	 * @since   1.6	 */	public static function getGroups()	{		$db = JFactory::getDbo();		$query = $db->getQuery(true)			->select('a.id AS value')			->select('a.title AS text')			->select('COUNT(DISTINCT b.id) AS level')			->from('#__usergroups as a')			->join('LEFT', '#__usergroups  AS b ON a.lft > b.lft AND a.rgt < b.rgt')			->group('a.id, a.title, a.lft, a.rgt')			->order('a.lft ASC');		$db->setQuery($query);		try		{			$options = $db->loadObjectList();		}		catch (RuntimeException $e)		{			JError::raiseNotice(500, $e->getMessage());			return null;		}		foreach ($options as &$option)		{			$option->text = str_repeat('- ', $option->level).$option->text;		}		return $options;	}	/**	 * Creates a list of range options used in filter select list	 * used in com_users on users view	 *	 * @return  array	 *	 * @since   2.5	 */	public static function getRangeOptions()	{		$options = array(			JHtml::_('select.option', 'today', JText::_('COM_USERS_OPTION_RANGE_TODAY')),			JHtml::_('select.option', 'past_week', JText::_('COM_USERS_OPTION_RANGE_PAST_WEEK')),			JHtml::_('select.option', 'past_1month', JText::_('COM_USERS_OPTION_RANGE_PAST_1MONTH')),			JHtml::_('select.option', 'past_3month', JText::_('COM_USERS_OPTION_RANGE_PAST_3MONTH')),			JHtml::_('select.option', 'past_6month', JText::_('COM_USERS_OPTION_RANGE_PAST_6MONTH')),			JHtml::_('select.option', 'past_year', JText::_('COM_USERS_OPTION_RANGE_PAST_YEAR')),			JHtml::_('select.option', 'post_year', JText::_('COM_USERS_OPTION_RANGE_POST_YEAR')),		);		return $options;	}}
<?php/** * @package     Joomla.Site * @subpackage  com_newsfeeds * * @copyright   Copyright (C) 2005 - 2013 Open Source Matters, Inc. All rights reserved. * @license     GNU General Public License version 2 or later; see LICENSE.txt */defined('_JEXEC') or die;/** * Newsfeeds Component Category Model * * @package     Joomla.Site * @subpackage  com_newsfeeds * @since       1.5 */class NewsfeedsModelCategory extends JModelList{	/**	 * Category items data	 *	 * @var array	 */	protected $_item = null;	protected $_articles = null;	protected $_siblings = null;	protected $_children = null;	protected $_parent = null;	/**	 * The category that applies.	 *	 * @access    protected	 * @var        object	 */	protected $_category = null;	/**	 * The list of other newfeed categories.	 *	 * @access    protected	 * @var        array	 */	protected $_categories = null;	/**	 * Constructor.	 *	 * @param   array  An optional associative array of configuration settings.	 * @see     JController	 * @since   1.6	 */	public function __construct($config = array())	{		if (empty($config['filter_fields']))		{			$config['filter_fields'] = array(				'id', 'a.id',				'name', 'a.name',				'numarticles', 'a.numarticles',				'link', 'a.link',				'ordering', 'a.ordering',			);		}		parent::__construct($config);	}	/**	 * Method to get a list of items.	 *	 * @return  mixed  An array of objects on success, false on failure.	 */	public function getItems()	{		// Invoke the parent getItems method to get the main list		$items = parent::getItems();		// Convert the params field into an object, saving original in _params		for ($i = 0, $n = count($items); $i < $n; $i++)		{			$item = & $items[$i];			if (!isset($this->_params))			{				$params = new JRegistry;				$item->params = $params;				$params->loadString($item->params);			}		}		return $items;	}	/**	 * Method to build an SQL query to load the list data.	 *	 * @return  string    An SQL query	 * @since   1.6	 */	protected function getListQuery()	{		$user = JFactory::getUser();		$groups = implode(',', $user->getAuthorisedViewLevels());		// Create a new query object.		$db = $this->getDbo();		$query = $db->getQuery(true);		// Select required fields from the categories.		$query->select($this->getState('list.select', 'a.*'))			->from($db->quoteName('#__newsfeeds') . ' AS a')			->where('a.access IN (' . $groups . ')');		// Filter by category.		if ($categoryId = $this->getState('category.id'))		{			$query->where('a.catid = ' . (int) $categoryId)				->join('LEFT', '#__categories AS c ON c.id = a.catid')				->where('c.access IN (' . $groups . ')');		}		// Filter by state		$state = $this->getState('filter.published');		if (is_numeric($state))		{			$query->where('a.published = ' . (int) $state);		}		// Filter by start and end dates.		$nullDate = $db->quote($db->getNullDate());		$date = JFactory::getDate();		$nowDate = $db->quote($date->format($db->getDateFormat()));		if ($this->getState('filter.publish_date'))		{			$query->where('(a.publish_up = ' . $nullDate . ' OR a.publish_up <= ' . $nowDate . ')')				->where('(a.publish_down = ' . $nullDate . ' OR a.publish_down >= ' . $nowDate . ')');		}		// Filter by search in title		$search = $this->getState('list.filter');		if (!empty($search))		{			$search = $db->quote('%' . $db->escape($search, true) . '%');			$query->where('(a.name LIKE ' . $search . ')');		}		// Filter by language		if ($this->getState('filter.language'))		{			$query->where('a.language in (' . $db->quote(JFactory::getLanguage()->getTag()) . ',' . $db->quote('*') . ')');		}		// Add the list ordering clause.		$query->order($db->escape($this->getState('list.ordering', 'a.ordering')) . ' ' . $db->escape($this->getState('list.direction', 'ASC')));		return $query;	}	/**	 * Method to auto-populate the model state.	 *	 * Note. Calling getState in this method will result in recursion.	 *	 * @since   1.6	 */	protected function populateState($ordering = null, $direction = null)	{		$app = JFactory::getApplication();		$params = JComponentHelper::getParams('com_newsfeeds');		// List state information		$limit = $app->getUserStateFromRequest('global.list.limit', 'limit', $app->getCfg('list_limit'), 'uint');		$this->setState('list.limit', $limit);		$limitstart = $app->input->get('limitstart', 0, 'uint');		$this->setState('list.start', $limitstart);		// Optional filter text		$this->setState('list.filter', $app->input->getString('filter-search'));		$orderCol = $app->input->get('filter_order', 'ordering');		if (!in_array($orderCol, $this->filter_fields))		{			$orderCol = 'ordering';		}		$this->setState('list.ordering', $orderCol);		$listOrder = $app->input->get('filter_order_Dir', 'ASC');		if (!in_array(strtoupper($listOrder), array('ASC', 'DESC', '')))		{			$listOrder = 'ASC';		}		$this->setState('list.direction', $listOrder);		$id = $app->input->get('id', 0, 'int');		$this->setState('category.id', $id);		$user = JFactory::getUser();		if ((!$user->authorise('core.edit.state', 'com_newsfeeds')) && (!$user->authorise('core.edit', 'com_newsfeeds')))		{			// limit to published for people who can't edit or edit.state.			$this->setState('filter.published', 1);			// Filter by start and end dates.			$this->setState('filter.publish_date', true);		}		$this->setState('filter.language', $app->getLanguageFilter());		// Load the parameters.		$this->setState('params', $params);	}	/**	 * Method to get category data for the current category	 *	 * @param   integer  An optional ID	 *	 * @return  object	 * @since   1.5	 */	public function getCategory()	{		if (!is_object($this->_item))		{			$app = JFactory::getApplication();			$menu = $app->getMenu();			$active = $menu->getActive();			$params = new JRegistry;			if ($active)			{				$params->loadString($active->params);			}			$options = array();			$options['countItems'] = $params->get('show_cat_items', 1) || $params->get('show_empty_categories', 0);			$categories = JCategories::getInstance('Newsfeeds', $options);			$this->_item = $categories->get($this->getState('category.id', 'root'));			if (is_object($this->_item))			{				$this->_children = $this->_item->getChildren();				$this->_parent = false;				if ($this->_item->getParent())				{					$this->_parent = $this->_item->getParent();				}				$this->_rightsibling = $this->_item->getSibling();				$this->_leftsibling = $this->_item->getSibling(false);			}			else			{				$this->_children = false;				$this->_parent = false;			}		}		return $this->_item;	}	/**	 * Get the parent category.	 *	 * @param   integer  An optional category id. If not supplied, the model state 'category.id' will be used.	 *	 * @return  mixed  An array of categories or false if an error occurs.	 */	public function getParent()	{		if (!is_object($this->_item))		{			$this->getCategory();		}		return $this->_parent;	}	/**	 * Get the sibling (adjacent) categories.	 *	 * @return  mixed  An array of categories or false if an error occurs.	 */	function &getLeftSibling()	{		if (!is_object($this->_item))		{			$this->getCategory();		}		return $this->_leftsibling;	}	function &getRightSibling()	{		if (!is_object($this->_item))		{			$this->getCategory();		}		return $this->_rightsibling;	}	/**	 * Get the child categories.	 *	 * @param   integer  An optional category id. If not supplied, the model state 'category.id' will be used.	 *	 * @return  mixed  An array of categories or false if an error occurs.	 */	function &getChildren()	{		if (!is_object($this->_item))		{			$this->getCategory();		}		return $this->_children;	}}
<?php/** * @package     Joomla.Site * @subpackage  com_tags * * @copyright   Copyright (C) 2005 - 2013 Open Source Matters, Inc. All rights reserved. * @license     GNU General Public License version 2 or later; see LICENSE.txt */defined('_JEXEC') or die;/** * Tags Component Controller * * @package     Joomla.Site * @subpackage  com_tags * @since       3.1 */class TagsController extends JControllerLegacy{	/**	 * Method to display a view.	 *	 * @param   boolean  If true, the view output will be cached	 * @param   array    An array of safe url parameters and their variable types, for valid values see {@link JFilterInput::clean()}.	 *	 * @return  JController  This object to support chaining.	 *	 * @since   3.1	 */	public function display($cachable = true, $urlparams = false)	{		$user		= JFactory::getUser();		// Set the default view name and format from the Request.		$id = $this->input->getObject('id');		$id = (array) $id;		$vName = $this->input->get('view', 'tags');		$this->input->set('view', $vName);		if ($user->get('id') ||($this->input->getMethod() == 'POST' && $vName = 'tags'))		{			$cachable = false;		}		$safeurlparams = array(			'id'				=> 'ARRAY',			'type'				=> 'ARRAY',			'limit'				=> 'UINT',			'limitstart'		=> 'UINT',			'filter_order'		=> 'CMD',			'filter_order_Dir'	=> 'CMD',			'lang'				=> 'CMD'		);		return parent::display($cachable, $safeurlparams);	}}
<?php/** * @package     Joomla.Administrator * @subpackage  com_media * * @copyright   Copyright (C) 2005 - 2013 Open Source Matters, Inc. All rights reserved. * @license     GNU General Public License version 2 or later; see LICENSE.txt */defined('_JEXEC') or die;jimport('joomla.filesystem.file');jimport('joomla.filesystem.folder');/** * Media File Controller * * @package     Joomla.Administrator * @subpackage  com_media * @since       1.5 */class MediaControllerFile extends JControllerLegacy{	/**	 * The folder we are uploading into	 *	 * @var   string	 */	protected $folder = '';	/**	 * Upload one or more files	 *	 * @return  boolean	 *	 * @since   1.5	 */	public function upload()	{		// Check for request forgeries		JSession::checkToken('request') or jexit(JText::_('JINVALID_TOKEN'));		$params = JComponentHelper::getParams('com_media');		// Get some data from the request		$files        = $this->input->files->get('Filedata', '', 'array');		$return       = $this->input->post->get('return-url', null, 'base64');		$this->folder = $this->input->get('folder', '', 'path');		// Set the redirect		if ($return)		{			$this->setRedirect(base64_decode($return) . '&folder=' . $this->folder);		}		// Authorize the user		if (!$this->authoriseUser('create'))		{			return false;		}		if (			$_SERVER['CONTENT_LENGTH'] > ($params->get('upload_maxsize', 0) * 1024 * 1024) ||			$_SERVER['CONTENT_LENGTH'] > (int) (ini_get('upload_max_filesize')) * 1024 * 1024 ||			$_SERVER['CONTENT_LENGTH'] > (int) (ini_get('post_max_size')) * 1024 * 1024 ||			(($_SERVER['CONTENT_LENGTH'] > (int) (ini_get('memory_limit')) * 1024 * 1024) && ((int) (ini_get('memory_limit')) != -1))		)		{			JError::raiseWarning(100, JText::_('COM_MEDIA_ERROR_WARNFILETOOLARGE'));			return false;		}		// Perform basic checks on file info before attempting anything		foreach ($files as &$file)		{			$file['name']     = JFile::makeSafe($file['name']);			$file['filepath'] = JPath::clean(implode(DIRECTORY_SEPARATOR, array(COM_MEDIA_BASE, $this->folder, $file['name'])));			if ($file['error'] == 1)			{				JError::raiseWarning(100, JText::_('COM_MEDIA_ERROR_WARNFILETOOLARGE'));				return false;			}			if ($file['size'] > ($params->get('upload_maxsize', 0) * 1024 * 1024))			{				JError::raiseNotice(100, JText::_('COM_MEDIA_ERROR_WARNFILETOOLARGE'));				return false;			}			if (JFile::exists($file['filepath']))			{				// A file with this name already exists				JError::raiseWarning(100, JText::_('COM_MEDIA_ERROR_FILE_EXISTS'));				return false;			}			if (!isset($file['name']))			{				// No filename (after the name was cleaned by JFile::makeSafe)				$this->setRedirect('index.php', JText::_('COM_MEDIA_INVALID_REQUEST'), 'error');				return false;			}		}		// Set FTP credentials, if given		JClientHelper::setCredentialsFromRequest('ftp');		JPluginHelper::importPlugin('content');		$dispatcher	= JEventDispatcher::getInstance();		foreach ($files as &$file)		{			// The request is valid			$err = null;			if (!MediaHelper::canUpload($file, $err))			{				// The file can't be upload				JError::raiseNotice(100, JText::_($err));				return false;			}			// Trigger the onContentBeforeSave event.			$object_file = new JObject($file);			$result = $dispatcher->trigger('onContentBeforeSave', array('com_media.file', &$object_file));			if (in_array(false, $result, true))			{				// There are some errors in the plugins				JError::raiseWarning(100, JText::plural('COM_MEDIA_ERROR_BEFORE_SAVE', count($errors = $object_file->getErrors()), implode('<br />', $errors)));				return false;			}			if (!JFile::upload($object_file->tmp_name, $object_file->filepath))			{				// Error in upload				JError::raiseWarning(100, JText::_('COM_MEDIA_ERROR_UNABLE_TO_UPLOAD_FILE'));				return false;			}			else			{				// Trigger the onContentAfterSave event.				$dispatcher->trigger('onContentAfterSave', array('com_media.file', &$object_file, true));				$this->setMessage(JText::sprintf('COM_MEDIA_UPLOAD_COMPLETE', substr($object_file->filepath, strlen(COM_MEDIA_BASE))));			}		}		return true;	}	/**	 * Check that the user is authorized to perform this action	 *	 * @param   string   $action - the action to be peformed (create or delete)	 *	 * @return  boolean	 *	 * @since   1.6	 */	protected function authoriseUser($action)	{		if (!JFactory::getUser()->authorise('core.' . strtolower($action), 'com_media'))		{			// User is not authorised			JError::raiseWarning(403, JText::_('JLIB_APPLICATION_ERROR_' . strtoupper($action) . '_NOT_PERMITTED'));			return false;		}		return true;	}	/**	 * Deletes paths from the current path	 *	 * @return  boolean	 *	 * @since   1.5	 */	public function delete()	{		JSession::checkToken('request') or jexit(JText::_('JINVALID_TOKEN'));		// Get some data from the request		$tmpl	= $this->input->get('tmpl');		$paths	= $this->input->get('rm', array(), 'array');		$folder = $this->input->get('folder', '', 'path');		$redirect = 'index.php?option=com_media&folder=' . $folder;		if ($tmpl == 'component')		{			// We are inside the iframe			$redirect .= '&view=mediaList&tmpl=component';		}		$this->setRedirect($redirect);		// Nothing to delete		if (empty($paths))		{			return true;		}		// Authorize the user		if (!$this->authoriseUser('delete'))		{			return false;		}		// Set FTP credentials, if given		JClientHelper::setCredentialsFromRequest('ftp');		JPluginHelper::importPlugin('content');		$dispatcher	= JEventDispatcher::getInstance();		$ret = true;		foreach ($paths as $path)		{			if ($path !== JFile::makeSafe($path))			{				// filename is not safe				$filename = htmlspecialchars($path, ENT_COMPAT, 'UTF-8');				JError::raiseWarning(100, JText::sprintf('COM_MEDIA_ERROR_UNABLE_TO_DELETE_FILE_WARNFILENAME', substr($filename, strlen(COM_MEDIA_BASE))));				continue;			}			$fullPath = JPath::clean(implode(DIRECTORY_SEPARATOR, array(COM_MEDIA_BASE, $folder, $path)));			$object_file = new JObject(array('filepath' => $fullPath));			if (is_file($object_file->filepath))			{				// Trigger the onContentBeforeDelete event.				$result = $dispatcher->trigger('onContentBeforeDelete', array('com_media.file', &$object_file));				if (in_array(false, $result, true))				{					// There are some errors in the plugins					JError::raiseWarning(100, JText::plural('COM_MEDIA_ERROR_BEFORE_DELETE', count($errors = $object_file->getErrors()), implode('<br />', $errors)));					continue;				}				$ret &= JFile::delete($object_file->filepath);				// Trigger the onContentAfterDelete event.				$dispatcher->trigger('onContentAfterDelete', array('com_media.file', &$object_file));				$this->setMessage(JText::sprintf('COM_MEDIA_DELETE_COMPLETE', substr($object_file->filepath, strlen(COM_MEDIA_BASE))));			}			elseif (is_dir($object_file->filepath))			{				$contents = JFolder::files($object_file->filepath, '.', true, false, array('.svn', 'CVS', '.DS_Store', '__MACOSX', 'index.html'));				if (empty($contents))				{					// Trigger the onContentBeforeDelete event.					$result = $dispatcher->trigger('onContentBeforeDelete', array('com_media.folder', &$object_file));					if (in_array(false, $result, true))					{						// There are some errors in the plugins						JError::raiseWarning(100, JText::plural('COM_MEDIA_ERROR_BEFORE_DELETE', count($errors = $object_file->getErrors()), implode('<br />', $errors)));						continue;					}					$ret &= JFolder::delete($object_file->filepath);					// Trigger the onContentAfterDelete event.					$dispatcher->trigger('onContentAfterDelete', array('com_media.folder', &$object_file));					$this->setMessage(JText::sprintf('COM_MEDIA_DELETE_COMPLETE', substr($object_file->filepath, strlen(COM_MEDIA_BASE))));				}				else				{					// This makes no sense...					JError::raiseWarning(100, JText::sprintf('COM_MEDIA_ERROR_UNABLE_TO_DELETE_FOLDER_NOT_EMPTY', substr($object_file->filepath, strlen(COM_MEDIA_BASE))));				}			}		}		return $ret;	}}
<?php/** * @package     Joomla.Administrator * @subpackage  mod_feed * * @copyright   Copyright (C) 2005 - 2013 Open Source Matters, Inc. All rights reserved. * @license     GNU General Public License version 2 or later; see LICENSE.txt */defined('_JEXEC') or die;/** * Helper for mod_feed * * @package     Joomla.Administrator * @subpackage  mod_feed * @since       1.5 */class ModFeedHelper{	/**	 * Method to load a feed.	 *	 * @param   JRegisty  $params  The parameters object.	 *	 * @return  JFeedReader|string  Return a JFeedReader object or a string message if error.	 */	static function getFeed($params)	{		// Module params		$rssurl = $params->get('rssurl', '');		// Get RSS parsed object		$cache_time = 0;		if ($params->get('cache'))		{			$cache_time = $params->get('cache_time', 15) * 60;		}		try		{			jimport('joomla.feed.factory');			$feed   = new JFeedFactory;			$rssDoc = $feed->getFeed($rssurl);		}		catch (InvalidArgumentException $e)		{			$msg = JText::_('MOD_NEWSFEEDS_ERRORS_FEED_NOT_RETRIEVED');		}		catch (RunTimeException $e)		{			$msg = JText::_('MOD_FEED_ERR_FEED_NOT_RETRIEVED');		}		if (empty($rssDoc))		{			$msg = JText::_('MOD_FEED_ERR_FEED_NOT_RETRIEVED');			return $msg;		}		$lists = array();		if ($rssDoc)		{			return $rssDoc;		}	}}
<?php/** * @package     Joomla.Administrator * @subpackage  com_messages * * @copyright   Copyright (C) 2005 - 2013 Open Source Matters, Inc. All rights reserved. * @license     GNU General Public License version 2 or later; see LICENSE.txt */defined('_JEXEC') or die;JFormHelper::loadFieldClass('user');/** * Supports an modal select of user that have access to com_messages * * @package     Joomla.Administrator * @subpackage  com_messages * @since       1.6 */class JFormFieldUserMessages extends JFormFieldUser{	/**	 * The form field type.	 *	 * @var		string	 * @since   1.6	 */	public $type = 'UserMessages';	/**	 * Method to get the filtering groups (null means no filtering)	 *	 * @return  array|null	array of filtering groups or null.	 * @since   1.6	 */	protected function getGroups()	{		// Compute usergroups		$db = JFactory::getDbo();		$query = $db->getQuery(true)			->select('id')			->from('#__usergroups');		$db->setQuery($query);		try		{			$groups = $db->loadColumn();		}		catch (RuntimeException $e)		{			JError::raiseNotice(500, $e->getMessage());			return null;		}		foreach ($groups as $i => $group)		{			if (JAccess::checkGroup($group, 'core.admin'))			{				continue;			}			if (!JAccess::checkGroup($group, 'core.manage', 'com_messages'))			{				unset($groups[$i]);				continue;			}			if (!JAccess::checkGroup($group, 'core.login.admin'))			{				unset($groups[$i]);				continue;			}		}		return array_values($groups);	}	/**	 * Method to get the users to exclude from the list of users	 *	 * @return  array|null array of users to exclude or null to to not exclude them	 * @since   1.6	 */	protected function getExcluded()	{		return array(JFactory::getUser()->id);	}}
<?php/** * @package     Joomla.Administrator * @subpackage  com_config * * @copyright   Copyright (C) 2005 - 2013 Open Source Matters, Inc. All rights reserved. * @license     GNU General Public License version 2 or later; see LICENSE.txt */defined('_JEXEC') or die;?><fieldset class="form-horizontal">	<legend><?php echo JText::_('COM_CONFIG_SYSTEM_SETTINGS'); ?></legend>	<?php	foreach ($this->form->getFieldset('system') as $field):	?>		<div class="control-group">			<div class="control-label"><?php echo $field->label; ?></div>			<div class="controls"><?php echo $field->input; ?></div>		</div>	<?php	endforeach;	?></fieldset>
<?php/** * @package     Joomla.Platform * @subpackage  Database * * @copyright   Copyright (C) 2005 - 2013 Open Source Matters, Inc. All rights reserved. * @license     GNU General Public License version 2 or later; see LICENSE */defined('JPATH_PLATFORM') or die;/** * PostgreSQL export driver. * * @package     Joomla.Platform * @subpackage  Database * @since       12.1 */class JDatabaseExporterPostgresql extends JDatabaseExporter{	/**	 * An array of cached data.	 *	 * @var    array	 * @since  12.1	 */	protected $cache = array();	/**	 * The database connector to use for exporting structure and/or data.	 *	 * @var    JDatabaseDriverPostgresql	 * @since  12.1	 */	protected $db = null;	/**	 * An array input sources (table names).	 *	 * @var    array	 * @since  12.1	 */	protected $from = array();	/**	 * The type of output format (xml).	 *	 * @var    string	 * @since  12.1	 */	protected $asFormat = 'xml';	/**	 * An array of options for the exporter.	 *	 * @var    object	 * @since  12.1	 */	protected $options = null;	/**	 * Constructor.	 *	 * Sets up the default options for the exporter.	 *	 * @since   12.1	 */	public function __construct()	{		$this->options = new stdClass;		$this->cache = array('columns' => array(), 'keys' => array());		// Set up the class defaults:		// Export with only structure		$this->withStructure();		// Export as xml.		$this->asXml();		// Default destination is a string using $output = (string) $exporter;	}	/**	 * Magic function to exports the data to a string.	 *	 * @return  string	 *	 * @since   12.1	 * @throws  Exception if an error is encountered.	 */	public function __toString()	{		// Check everything is ok to run first.		$this->check();		$buffer = '';		// Get the format.		switch ($this->asFormat)		{			case 'xml':			default:				$buffer = $this->buildXml();				break;		}		return $buffer;	}	/**	 * Set the output option for the exporter to XML format.	 *	 * @return  JDatabaseExporterPostgresql  Method supports chaining.	 *	 * @since   12.1	 */	public function asXml()	{		$this->asFormat = 'xml';		return $this;	}	/**	 * Builds the XML data for the tables to export.	 *	 * @return  string  An XML string	 *	 * @since   12.1	 * @throws  Exception if an error occurs.	 */	protected function buildXml()	{		$buffer = array();		$buffer[] = '<?xml version="1.0"?>';		$buffer[] = '<postgresqldump xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">';		$buffer[] = ' <database name="">';		$buffer = array_merge($buffer, $this->buildXmlStructure());		$buffer[] = ' </database>';		$buffer[] = '</postgresqldump>';		return implode("\n", $buffer);	}	/**	 * Builds the XML structure to export.	 *	 * @return  array  An array of XML lines (strings).	 *	 * @since   12.1	 * @throws  Exception if an error occurs.	 */	protected function buildXmlStructure()	{		$buffer = array();		foreach ($this->from as $table)		{			// Replace the magic prefix if found.			$table = $this->getGenericTableName($table);			// Get the details columns information.			$fields = $this->db->getTableColumns($table, false);			$keys = $this->db->getTableKeys($table);			$sequences = $this->db->getTableSequences($table);			$buffer[] = '  <table_structure name="' . $table . '">';			foreach ($sequences as $sequence)			{				if (version_compare($this->db->getVersion(), '9.1.0') < 0)				{					$sequence->start_value = null;				}				$buffer[] = '   <sequence Name="' . $sequence->sequence . '" Schema="' . $sequence->schema . '"' .					' Table="' . $sequence->table . '" Column="' . $sequence->column . '" Type="' . $sequence->data_type . '"' .					' Start_Value="' . $sequence->start_value . '" Min_Value="' . $sequence->minimum_value . '"' .					' Max_Value="' . $sequence->maximum_value . '" Increment="' . $sequence->increment . '"' .					' Cycle_option="' . $sequence->cycle_option . '"' .					' />';			}			foreach ($fields as $field)			{				$buffer[] = '   <field Field="' . $field->column_name . '" Type="' . $field->type . '" Null="' . $field->null . '"' .							(isset($field->default) ? ' Default="' . $field->default . '"' : '') . ' Comments="' . $field->comments . '"' .					' />';			}			foreach ($keys as $key)			{				$buffer[] = '   <key Index="' . $key->idxName . '" is_primary="' . $key->isPrimary . '" is_unique="' . $key->isUnique . '"' .					' Query="' . $key->Query . '" />';			}			$buffer[] = '  </table_structure>';		}		return $buffer;	}	/**	 * Checks if all data and options are in order prior to exporting.	 *	 * @return  JDatabaseExporterPostgresql  Method supports chaining.	 *	 * @since   12.1	 *	 * @throws  Exception if an error is encountered.	 */	public function check()	{		// Check if the db connector has been set.		if (!($this->db instanceof JDatabaseDriverPostgresql))		{			throw new Exception('JPLATFORM_ERROR_DATABASE_CONNECTOR_WRONG_TYPE');		}		// Check if the tables have been specified.		if (empty($this->from))		{			throw new Exception('JPLATFORM_ERROR_NO_TABLES_SPECIFIED');		}		return $this;	}	/**	 * Get the generic name of the table, converting the database prefix to the wildcard string.	 *	 * @param   string  $table  The name of the table.	 *	 * @return  string  The name of the table with the database prefix replaced with #__.	 *	 * @since   12.1	 */	protected function getGenericTableName($table)	{		// TODO Incorporate into parent class and use $this.		$prefix = $this->db->getPrefix();		// Replace the magic prefix if found.		$table = preg_replace("|^$prefix|", '#__', $table);		return $table;	}	/**	 * Specifies a list of table names to export.	 *	 * @param   mixed  $from  The name of a single table, or an array of the table names to export.	 *	 * @return  JDatabaseExporterPostgresql  Method supports chaining.	 *	 * @since   12.1	 * @throws  Exception if input is not a string or array.	 */	public function from($from)	{		if (is_string($from))		{			$this->from = array($from);		}		elseif (is_array($from))		{			$this->from = $from;		}		else		{			throw new Exception('JPLATFORM_ERROR_INPUT_REQUIRES_STRING_OR_ARRAY');		}		return $this;	}	/**	 * Sets the database connector to use for exporting structure and/or data from PostgreSQL.	 *	 * @param   JDatabaseDriverPostgresql  $db  The database connector.	 *	 * @return  JDatabaseExporterPostgresql  Method supports chaining.	 *	 * @since   12.1	 */	public function setDbo(JDatabaseDriverPostgresql $db)	{		$this->db = $db;		return $this;	}	/**	 * Sets an internal option to export the structure of the input table(s).	 *	 * @param   boolean  $setting  True to export the structure, false to not.	 *	 * @return  JDatabaseExporterPostgresql  Method supports chaining.	 *	 * @since   12.1	 */	public function withStructure($setting = true)	{		$this->options->withStructure = (boolean) $setting;		return $this;	}}
<?php/** * @package     Joomla.Platform * @subpackage  FileSystem * * @copyright   Copyright (C) 2005 - 2013 Open Source Matters, Inc. All rights reserved. * @license     GNU General Public License version 2 or later; see LICENSE */defined('JPATH_PLATFORM') or die;/** * Joomla! Stream Interface * * The Joomla! stream interface is designed to handle files as streams * where as the legacy JFile static class treated files in a rather * atomic manner. * * @package     Joomla.Platform * @subpackage  FileSystem * * This class adheres to the stream wrapper operations: * * @see         http://php.net/manual/en/function.stream-get-wrappers.php * @see         http://php.net/manual/en/intro.stream.php PHP Stream Manual * @see         http://php.net/manual/en/wrappers.php Stream Wrappers * @see         http://php.net/manual/en/filters.php Stream Filters * @see         http://php.net/manual/en/transports.php Socket Transports (used by some options, particularly HTTP proxy) * @since       11.1 */class JStream extends JObject{	// Publicly settable vars (protected to let our parent read them)	/**	 * File Mode	 * @var    integer	 * @since  11.1	 * */	protected $filemode = 0644;	/**	 * Directory Mode	 * @var   integer	 * @since  11.1	 * */	protected $dirmode = 0755;	/**	 * Default Chunk Size	 * @var    integer	 * @since  11.1	 */	protected $chunksize = 8192;	/**	 * Filename	 * @var    string	 * @since  11.1	 */	protected $filename;	/**	 * Prefix of the connection for writing	 * @var    string	 * @since  11.1	 */	protected $writeprefix;	/**	 * Prefix of the connection for reading	 * @var    string	 * @since  11.1	 */	protected $readprefix;	/**	 *	 *Read Processing method	 * @var   string  gz, bz, f	 * If a scheme is detected, fopen will be defaulted	 * To use compression with a network stream use a filter	 * @since  11.1	 */	protected $processingmethod = 'f';	/**	 * Filters applied to the current stream	 * @var    array	 * @since  11.1	 */	protected $filters = array();	/**	 * File Handle	 * @var    array	 * @since  12.1	 */	protected $fh;	/**	 * File size	 * @var    integer	 * @since  12.1	 */	protected $filesize;	/**	 *Context to use when opening the connection	 * @var	 * @since  12.1	 */	protected $context = null;	/**	 * Context options; used to rebuild the context	 * @var	 * @since  12.1	 */	protected $contextOptions;	/**	 * The mode under which the file was opened	 * @var	 * @since  12.1	 */	protected $openmode;	/**	 * Constructor	 *	 * @param   string  $writeprefix  Prefix of the stream (optional). Unlike the JPATH_*, this has a final path separator!	 * @param   string  $readprefix   The read prefix (optional).	 * @param   array   $context      The context options (optional).	 *	 * @since   11.1	 */	public function __construct($writeprefix = '', $readprefix = '', $context = array())	{		$this->writeprefix = $writeprefix;		$this->readprefix = $readprefix;		$this->contextOptions = $context;		$this->_buildContext();	}	/**	 * Destructor	 *	 * @since   11.1	 */	public function __destruct()	{		// Attempt to close on destruction if there is a file handle		if ($this->fh)		{			@$this->close();		}	}	/**	 * Generic File Operations	 *	 * Open a stream with some lazy loading smarts	 *	 * @param   string    $filename              Filename	 * @param   string    $mode                  Mode string to use	 * @param   boolean   $use_include_path      Use the PHP include path	 * @param   resource  $context               Context to use when opening	 * @param   boolean   $use_prefix            Use a prefix to open the file	 * @param   boolean   $relative              Filename is a relative path (if false, strips JPATH_ROOT to make it relative)	 * @param   boolean   $detectprocessingmode  Detect the processing method for the file and use the appropriate function	 *                                           to handle output automatically	 *	 * @return  boolean	 *	 * @since   11.1	 */	public function open($filename, $mode = 'r', $use_include_path = false, $context = null,		$use_prefix = false, $relative = false, $detectprocessingmode = false)	{		$filename = $this->_getFilename($filename, $mode, $use_prefix, $relative);		if (!$filename)		{			$this->setError(JText::_('JLIB_FILESYSTEM_ERROR_STREAMS_FILENAME'));			return false;		}		$this->filename = $filename;		$this->openmode = $mode;		$url = parse_url($filename);		$retval = false;		if (isset($url['scheme']))		{			// If we're dealing with a Joomla! stream, load it			if (JFilesystemHelper::isJoomlaStream($url['scheme']))			{				require_once __DIR__ . '/streams/' . $url['scheme'] . '.php';			}			// We have a scheme! force the method to be f			$this->processingmethod = 'f';		}		elseif ($detectprocessingmode)		{			$ext = strtolower(JFile::getExt($this->filename));			switch ($ext)			{				case 'tgz':				case 'gz':				case 'gzip':					$this->processingmethod = 'gz';					break;				case 'tbz2':				case 'bz2':				case 'bzip2':					$this->processingmethod = 'bz';					break;				default:					$this->processingmethod = 'f';					break;			}		}		// Capture PHP errors		$php_errormsg = 'Error Unknown whilst opening a file';		$track_errors = ini_get('track_errors');		ini_set('track_errors', true);		// Decide which context to use:		switch ($this->processingmethod)		{			// Gzip doesn't support contexts or streams			case 'gz':				$this->fh = gzopen($filename, $mode, $use_include_path);				break;			// Bzip2 is much like gzip except it doesn't use the include path			case 'bz':				$this->fh = bzopen($filename, $mode);				break;			// Fopen can handle streams			case 'f':			default:				// One supplied at open; overrides everything				if ($context)				{					$this->fh = fopen($filename, $mode, $use_include_path, $context);				}				// One provided at initialisation				elseif ($this->context)				{					$this->fh = fopen($filename, $mode, $use_include_path, $this->context);				}				// No context; all defaults				else				{					$this->fh = fopen($filename, $mode, $use_include_path);				}				break;		}		if (!$this->fh)		{			$this->setError($php_errormsg);		}		else		{			$retval = true;		}		// Restore error tracking to what it was before		ini_set('track_errors', $track_errors);		// Return the result		return $retval;	}	/**	 * Attempt to close a file handle	 *	 * Will return false if it failed and true on success	 * If the file is not open the system will return true, this function destroys the file handle as well	 *	 * @return  boolean	 *	 * @since   11.1	 */	public function close()	{		if (!$this->fh)		{			$this->setError(JText::_('JLIB_FILESYSTEM_ERROR_STREAMS_FILE_NOT_OPEN'));			return true;		}		$retval = false;		// Capture PHP errors		$php_errormsg = 'Error Unknown';		$track_errors = ini_get('track_errors');		ini_set('track_errors', true);		switch ($this->processingmethod)		{			case 'gz':				$res = gzclose($this->fh);				break;			case 'bz':				$res = bzclose($this->fh);				break;			case 'f':			default:				$res = fclose($this->fh);				break;		}		if (!$res)		{			$this->setError($php_errormsg);		}		else		{			// Reset this			$this->fh = null;			$retval = true;		}		// If we wrote, chmod the file after it's closed		if ($this->openmode[0] == 'w')		{			$this->chmod();		}		// Restore error tracking to what it was before		ini_set('track_errors', $track_errors);		// Return the result		return $retval;	}	/**	 * Work out if we're at the end of the file for a stream	 *	 * @return  boolean	 *	 * @since   11.1	 */	public function eof()	{		if (!$this->fh)		{			$this->setError(JText::_('JLIB_FILESYSTEM_ERROR_STREAMS_FILE_NOT_OPEN'));			return false;		}		// Capture PHP errors		$php_errormsg = '';		$track_errors = ini_get('track_errors');		ini_set('track_errors', true);		switch ($this->processingmethod)		{			case 'gz':				$res = gzeof($this->fh);				break;			case 'bz':			case 'f':			default:				$res = feof($this->fh);				break;		}		if ($php_errormsg)		{			$this->setError($php_errormsg);		}		// Restore error tracking to what it was before		ini_set('track_errors', $track_errors);		// Return the result		return $res;	}	/**	 * Retrieve the file size of the path	 *	 * @return  mixed	 *	 * @since   11.1	 */	public function filesize()	{		if (!$this->filename)		{			$this->setError(JText::_('JLIB_FILESYSTEM_ERROR_STREAMS_FILE_NOT_OPEN'));			return false;		}		$retval = false;		// Capture PHP errors		$php_errormsg = '';		$track_errors = ini_get('track_errors');		ini_set('track_errors', true);		$res = @filesize($this->filename);		if (!$res)		{			$tmp_error = '';			if ($php_errormsg)			{				// Something went wrong.				// Store the error in case we need it.				$tmp_error = $php_errormsg;			}			$res = JFilesystemHelper::remotefsize($this->filename);			if (!$res)			{				if ($tmp_error)				{					// Use the php_errormsg from before					$this->setError($tmp_error);				}				else				{					// Error but nothing from php? How strange! Create our own					$this->setError(JText::_('JLIB_FILESYSTEM_ERROR_STREAMS_FILE_SIZE'));				}			}			else			{				$this->filesize = $res;				$retval = $res;			}		}		else		{			$this->filesize = $res;			$retval = $res;		}		// Restore error tracking to what it was before.		ini_set('track_errors', $track_errors);		// Return the result		return $retval;	}	/**	 * Get a line from the stream source.	 *	 * @param   integer  $length  The number of bytes (optional) to read.	 *	 * @return  mixed	 *	 * @since   11.1	 */	public function gets($length = 0)	{		if (!$this->fh)		{			$this->setError(JText::_('JLIB_FILESYSTEM_ERROR_STREAMS_FILE_NOT_OPEN'));			return false;		}		$retval = false;		// Capture PHP errors		$php_errormsg = 'Error Unknown';		$track_errors = ini_get('track_errors');		ini_set('track_errors', true);		switch ($this->processingmethod)		{			case 'gz':				$res = $length ? gzgets($this->fh, $length) : gzgets($this->fh);				break;			case 'bz':			case 'f':			default:				$res = $length ? fgets($this->fh, $length) : fgets($this->fh);				break;		}		if (!$res)		{			$this->setError($php_errormsg);		}		else		{			$retval = $res;		}		// Restore error tracking to what it was before		ini_set('track_errors', $track_errors);		// Return the result		return $retval;	}	/**	 * Read a file	 *	 * Handles user space streams appropriately otherwise any read will return 8192	 *	 * @param   integer  $length  Length of data to read	 *	 * @return  mixed	 *	 * @see     http://php.net/manual/en/function.fread.php	 * @since   11.1	 */	public function read($length = 0)	{		if (!$this->filesize && !$length)		{			// Get the filesize			$this->filesize();			if (!$this->filesize)			{				// Set it to the biggest and then wait until eof				$length = -1;			}			else			{				$length = $this->filesize;			}		}		if (!$this->fh)		{			$this->setError(JText::_('JLIB_FILESYSTEM_ERROR_STREAMS_FILE_NOT_OPEN'));			return false;		}		$retval = false;		// Capture PHP errors		$php_errormsg = 'Error Unknown';		$track_errors = ini_get('track_errors');		ini_set('track_errors', true);		$remaining = $length;		do		{			// Do chunked reads where relevant			switch ($this->processingmethod)			{				case 'bz':					$res = ($remaining > 0) ? bzread($this->fh, $remaining) : bzread($this->fh, $this->chunksize);					break;				case 'gz':					$res = ($remaining > 0) ? gzread($this->fh, $remaining) : gzread($this->fh, $this->chunksize);					break;				case 'f':				default:					$res = ($remaining > 0) ? fread($this->fh, $remaining) : fread($this->fh, $this->chunksize);					break;			}			if (!$res)			{				$this->setError($php_errormsg);				// Jump from the loop				$remaining = 0;			}			else			{				if (!$retval)				{					$retval = '';				}				$retval .= $res;				if (!$this->eof())				{					$len = strlen($res);					$remaining -= $len;				}				else				{					// If it's the end of the file then we've nothing left to read; reset remaining and len					$remaining = 0;					$length = strlen($retval);				}			}		}		while ($remaining || !$length);		// Restore error tracking to what it was before		ini_set('track_errors', $track_errors);		// Return the result		return $retval;	}	/**	 * Seek the file	 *	 * Note: the return value is different to that of fseek	 *	 * @param   integer  $offset  Offset to use when seeking.	 * @param   integer  $whence  Seek mode to use.	 *	 * @return  boolean  True on success, false on failure	 *	 * @see http://php.net/manual/en/function.fseek.php	 * @since   11.1	 */	public function seek($offset, $whence = SEEK_SET)	{		if (!$this->fh)		{			$this->setError(JText::_('JLIB_FILESYSTEM_ERROR_STREAMS_FILE_NOT_OPEN'));			return false;		}		$retval = false;		// Capture PHP errors		$php_errormsg = '';		$track_errors = ini_get('track_errors');		ini_set('track_errors', true);		switch ($this->processingmethod)		{			case 'gz':				$res = gzseek($this->fh, $offset, $whence);				break;			case 'bz':			case 'f':			default:				$res = fseek($this->fh, $offset, $whence);				break;		}		// Seek, interestingly, returns 0 on success or -1 on failure.		if ($res == -1)		{			$this->setError($php_errormsg);		}		else		{			$retval = true;		}		// Restore error tracking to what it was before		ini_set('track_errors', $track_errors);		// Return the result		return $retval;	}	/**	 * Returns the current position of the file read/write pointer.	 *	 * @return  mixed	 *	 * @since   11.1	 */	public function tell()	{		if (!$this->fh)		{			$this->setError(JText::_('JLIB_FILESYSTEM_ERROR_STREAMS_FILE_NOT_OPEN'));			return false;		}		$res = false;		// Capture PHP errors		$php_errormsg = '';		$track_errors = ini_get('track_errors');		ini_set('track_errors', true);		switch ($this->processingmethod)		{			case 'gz':				$res = gztell($this->fh);				break;			case 'bz':			case 'f':			default:				$res = ftell($this->fh);				break;		}		// May return 0 so check if it's really false		if ($res === false)		{			$this->setError($php_errormsg);		}		// Restore error tracking to what it was before		ini_set('track_errors', $track_errors);		// Return the result		return $res;	}	/**	 * File write	 *	 * Whilst this function accepts a reference, the underlying fwrite	 * will do a copy! This will roughly double the memory allocation for	 * any write you do. Specifying chunked will get around this by only	 * writing in specific chunk sizes. This defaults to 8192 which is a	 * sane number to use most of the time (change the default with	 * JStream::set('chunksize', newsize);)	 * Note: This doesn't support gzip/bzip2 writing like reading does	 *	 * @param   string   &$string  Reference to the string to write.	 * @param   integer  $length   Length of the string to write.	 * @param   integer  $chunk    Size of chunks to write in.	 *	 * @return  boolean	 *	 * @see     http://php.net/manual/en/function.fwrite.php	 * @since   11.1	 */	public function write(&$string, $length = 0, $chunk = 0)	{		if (!$this->fh)		{			$this->setError(JText::_('JLIB_FILESYSTEM_ERROR_STREAMS_FILE_NOT_OPEN'));			return false;		}		// If the length isn't set, set it to the length of the string.		if (!$length)		{			$length = strlen($string);		}		// If the chunk isn't set, set it to the default.		if (!$chunk)		{			$chunk = $this->chunksize;		}		$retval = true;		// Capture PHP errors		$php_errormsg = '';		$track_errors = ini_get('track_errors');		ini_set('track_errors', true);		$remaining = $length;		$start = 0;		do		{			// If the amount remaining is greater than the chunk size, then use the chunk			$amount = ($remaining > $chunk) ? $chunk : $remaining;			$res = fwrite($this->fh, substr($string, $start), $amount);			// Returns false on error or the number of bytes written			if ($res === false)			{				// Returned error				$this->setError($php_errormsg);				$retval = false;				$remaining = 0;			}			elseif ($res === 0)			{				// Wrote nothing?				$remaining = 0;				$this->setError(JText::_('JLIB_FILESYSTEM_ERROR_NO_DATA_WRITTEN'));			}			else			{				// Wrote something				$start += $amount;				$remaining -= $res;			}		}		while ($remaining);		// Restore error tracking to what it was before.		ini_set('track_errors', $track_errors);		// Return the result		return $retval;	}	/**	 * Chmod wrapper	 *	 * @param   string  $filename  File name.	 * @param   mixed   $mode      Mode to use.	 *	 * @return  boolean	 *	 * @since   11.1	 */	public function chmod($filename = '', $mode = 0)	{		if (!$filename)		{			if (!isset($this->filename) || !$this->filename)			{				$this->setError(JText::_('JLIB_FILESYSTEM_ERROR_STREAMS_FILENAME'));				return false;			}			$filename = $this->filename;		}		// If no mode is set use the default		if (!$mode)		{			$mode = $this->filemode;		}		$retval = false;		// Capture PHP errors		$php_errormsg = '';		$track_errors = ini_get('track_errors');		ini_set('track_errors', true);		$sch = parse_url($filename, PHP_URL_SCHEME);		// Scheme specific options; ftp's chmod support is fun.		switch ($sch)		{			case 'ftp':			case 'ftps':				$res = JFilesystemHelper::ftpChmod($filename, $mode);				break;			default:				$res = chmod($filename, $mode);				break;		}		// Seek, interestingly, returns 0 on success or -1 on failure		if (!$res)		{			$this->setError($php_errormsg);		}		else		{			$retval = true;		}		// Restore error tracking to what it was before.		ini_set('track_errors', $track_errors);		// Return the result		return $retval;	}	/**	 * Get the stream metadata	 *	 * @return  array  header/metadata	 *	 * @see     http://php.net/manual/en/function.stream-get-meta-data.php	 * @since   11.1	 */	public function get_meta_data()	{		if (!$this->fh)		{			$this->setError(JText::_('JLIB_FILESYSTEM_ERROR_STREAMS_FILE_NOT_OPEN'));			return false;		}		return stream_get_meta_data($this->fh);	}	/**	 * Stream contexts	 * Builds the context from the array	 *	 * @return  mixed	 *	 * @since   11.1	 */	public function _buildContext()	{		// According to the manual this always works!		if (count($this->contextOptions))		{			$this->context = @stream_context_create($this->contextOptions);		}		else		{			$this->context = null;		}	}	/**	 * Updates the context to the array	 *	 * Format is the same as the options for stream_context_create	 *	 * @param   array  $context  Options to create the context with	 *	 * @return  void	 *	 * @see       http://php.net/stream_context_create	 * @since   11.1	 */	public function setContextOptions($context)	{		$this->contextOptions = $context;		$this->_buildContext();	}	/**	 * Adds a particular options to the context	 *	 * @param   string  $wrapper  The wrapper to use	 * @param   string  $name     The option to set	 * @param   string  $value    The value of the option	 *	 * @return  void	 *	 * @see     http://php.net/stream_context_create Stream Context Creation	 * @see     http://php.net/manual/en/context.php Context Options for various streams	 * @since   11.1	 */	public function addContextEntry($wrapper, $name, $value)	{		$this->contextOptions[$wrapper][$name] = $value;		$this->_buildContext();	}	/**	 * Deletes a particular setting from a context	 *	 * @param   string  $wrapper  The wrapper to use	 * @param   string  $name     The option to unset	 *	 * @return  void	 *	 * @see     http://php.net/stream_context_create	 * @since   11.1	 */	public function deleteContextEntry($wrapper, $name)	{		// Check whether the wrapper is set		if (isset($this->contextOptions[$wrapper]))		{			// Check that entry is set for that wrapper			if (isset($this->contextOptions[$wrapper][$name]))			{				// Unset the item				unset($this->contextOptions[$wrapper][$name]);				// Check that there are still items there				if (!count($this->contextOptions[$wrapper]))				{					// Clean up an empty wrapper context option					unset($this->contextOptions[$wrapper]);				}			}		}		// Rebuild the context and apply it to the stream		$this->_buildContext();	}	/**	 * Applies the current context to the stream	 *	 * Use this to change the values of the context after you've opened a stream	 *	 * @return  mixed	 *	 * @since   11.1	 */	public function applyContextToStream()	{		$retval = false;		if ($this->fh)		{			// Capture PHP errors			$php_errormsg = 'Unknown error setting context option';			$track_errors = ini_get('track_errors');			ini_set('track_errors', true);			$retval = @stream_context_set_option($this->fh, $this->contextOptions);			if (!$retval)			{				$this->setError($php_errormsg);			}			// Restore error tracking to what it was before			ini_set('track_errors', $track_errors);		}		return $retval;	}	/**	 * Stream filters	 * Append a filter to the chain	 *	 * @param   string   $filtername  The key name of the filter.	 * @param   integer  $read_write  Optional. Defaults to STREAM_FILTER_READ.	 * @param   array    $params      An array of params for the stream_filter_append call.	 *	 * @return  mixed	 *	 * @see     http://php.net/manual/en/function.stream-filter-append.php	 * @since   11.1	 */	public function appendFilter($filtername, $read_write = STREAM_FILTER_READ, $params = array())	{		$res = false;		if ($this->fh)		{			// Capture PHP errors			$php_errormsg = '';			$track_errors = ini_get('track_errors');			ini_set('track_errors', true);			$res = @stream_filter_append($this->fh, $filtername, $read_write, $params);			if (!$res && $php_errormsg)			{				$this->setError($php_errormsg);			}			else			{				$this->filters[] = &$res;			}			// Restore error tracking to what it was before.			ini_set('track_errors', $track_errors);		}		return $res;	}	/**	 * Prepend a filter to the chain	 *	 * @param   string   $filtername  The key name of the filter.	 * @param   integer  $read_write  Optional. Defaults to STREAM_FILTER_READ.	 * @param   array    $params      An array of params for the stream_filter_prepend call.	 *	 * @return  mixed	 *	 * @see     http://php.net/manual/en/function.stream-filter-prepend.php	 * @since   11.1	 */	public function prependFilter($filtername, $read_write = STREAM_FILTER_READ, $params = array())	{		$res = false;		if ($this->fh)		{			// Capture PHP errors			$php_errormsg = '';			$track_errors = ini_get('track_errors');			ini_set('track_errors', true);			$res = @stream_filter_prepend($this->fh, $filtername, $read_write, $params);			if (!$res && $php_errormsg)			{				// Set the error msg				$this->setError($php_errormsg);			}			else			{				array_unshift($res, '');				$res[0] = &$this->filters;			}			// Restore error tracking to what it was before.			ini_set('track_errors', $track_errors);		}		return $res;	}	/**	 * Remove a filter, either by resource (handed out from the append or prepend function)	 * or via getting the filter list)	 *	 * @param   resource  &$resource  The resource.	 * @param   boolean   $byindex    The index of the filter.	 *	 * @return  boolean   Result of operation	 *	 * @since   11.1	 */	public function removeFilter(&$resource, $byindex = false)	{		$res = false;		// Capture PHP errors		$php_errormsg = '';		$track_errors = ini_get('track_errors');		ini_set('track_errors', true);		if ($byindex)		{			$res = stream_filter_remove($this->filters[$resource]);		}		else		{			$res = stream_filter_remove($resource);		}		if ($res && $php_errormsg)		{			$this->setError($php_errormsg);		}		// Restore error tracking to what it was before.		ini_set('track_errors', $track_errors);		return $res;	}	/**	 * Copy a file from src to dest	 *	 * @param   string    $src         The file path to copy from.	 * @param   string    $dest        The file path to copy to.	 * @param   resource  $context     A valid context resource (optional) created with stream_context_create.	 * @param   boolean   $use_prefix  Controls the use of a prefix (optional).	 * @param   boolean   $relative    Determines if the filename given is relative. Relative paths do not have JPATH_ROOT stripped.	 *	 * @return  mixed	 *	 * @since   11.1	 */	public function copy($src, $dest, $context = null, $use_prefix = true, $relative = false)	{		$res = false;		// Capture PHP errors		$php_errormsg = '';		$track_errors = ini_get('track_errors');		ini_set('track_errors', true);		$chmodDest = $this->_getFilename($dest, 'w', $use_prefix, $relative);		// Since we're going to open the file directly we need to get the filename.		// We need to use the same prefix so force everything to write.		$src = $this->_getFilename($src, 'w', $use_prefix, $relative);		$dest = $this->_getFilename($dest, 'w', $use_prefix, $relative);		if ($context)		{			// Use the provided context			$res = @copy($src, $dest, $context);		}		elseif ($this->context)		{			// Use the objects context			$res = @copy($src, $dest, $this->context);		}		else		{			// Don't use any context			$res = @copy($src, $dest);		}		if (!$res && $php_errormsg)		{			$this->setError($php_errormsg);		}		else		{			$this->chmod($chmodDest);		}		// Restore error tracking to what it was before		ini_set('track_errors', $track_errors);		return $res;	}	/**	 * Moves a file	 *	 * @param   string    $src         The file path to move from.	 * @param   string    $dest        The file path to move to.	 * @param   resource  $context     A valid context resource (optional) created with stream_context_create.	 * @param   boolean   $use_prefix  Controls the use of a prefix (optional).	 * @param   boolean   $relative    Determines if the filename given is relative. Relative paths do not have JPATH_ROOT stripped.	 *	 * @return  mixed	 *	 * @since   11.1	 */	public function move($src, $dest, $context = null, $use_prefix = true, $relative = false)	{		$res = false;		// Capture PHP errors		$php_errormsg = '';		$track_errors = ini_get('track_errors');		ini_set('track_errors', true);		$src = $this->_getFilename($src, 'w', $use_prefix, $relative);		$dest = $this->_getFilename($dest, 'w', $use_prefix, $relative);		if ($context)		{			// Use the provided context			$res = @rename($src, $dest, $context);		}		elseif ($this->context)		{			// Use the object's context			$res = @rename($src, $dest, $this->context);		}		else		{			// Don't use any context			$res = @rename($src, $dest);		}		if (!$res && $php_errormsg)		{			$this->setError($php_errormsg());		}		$this->chmod($dest);		// Restore error tracking to what it was before		ini_set('track_errors', $track_errors);		return $res;	}	/**	 * Delete a file	 *	 * @param   string    $filename    The file path to delete.	 * @param   resource  $context     A valid context resource (optional) created with stream_context_create.	 * @param   boolean   $use_prefix  Controls the use of a prefix (optional).	 * @param   boolean   $relative    Determines if the filename given is relative. Relative paths do not have JPATH_ROOT stripped.	 *	 * @return  mixed	 *	 * @since   11.1	 */	public function delete($filename, $context = null, $use_prefix = true, $relative = false)	{		$res = false;		// Capture PHP errors		$php_errormsg = '';		$track_errors = ini_get('track_errors');		ini_set('track_errors', true);		$filename = $this->_getFilename($filename, 'w', $use_prefix, $relative);		if ($context)		{			// Use the provided context			$res = @unlink($filename, $context);		}		elseif ($this->context)		{			// Use the object's context			$res = @unlink($filename, $this->context);		}		else		{			// Don't use any context			$res = @unlink($filename);		}		if (!$res && $php_errormsg)		{			$this->setError($php_errormsg());		}		// Restore error tracking to what it was before.		ini_set('track_errors', $track_errors);		return $res;	}	/**	 * Upload a file	 *	 * @param   string    $src         The file path to copy from (usually a temp folder).	 * @param   string    $dest        The file path to copy to.	 * @param   resource  $context     A valid context resource (optional) created with stream_context_create.	 * @param   boolean   $use_prefix  Controls the use of a prefix (optional).	 * @param   boolean   $relative    Determines if the filename given is relative. Relative paths do not have JPATH_ROOT stripped.	 *	 * @return  mixed	 *	 * @since   11.1	 */	public function upload($src, $dest, $context = null, $use_prefix = true, $relative = false)	{		if (is_uploaded_file($src))		{			// Make sure it's an uploaded file			return $this->copy($src, $dest, $context, $use_prefix, $relative);		}		else		{			$this->setError(JText::_('JLIB_FILESYSTEM_ERROR_STREAMS_NOT_UPLOADED_FILE'));			return false;		}	}	/**	 * Writes a chunk of data to a file.	 *	 * @param   string  $filename  The file name.	 * @param   string  &$buffer   The data to write to the file.	 *	 * @return  boolean	 *	 * @since   11.1	 */	public function writeFile($filename, &$buffer)	{		if ($this->open($filename, 'w'))		{			$result = $this->write($buffer);			$this->chmod();			$this->close();			return $result;		}		return false;	}	/**	 * Determine the appropriate 'filename' of a file	 *	 * @param   string   $filename    Original filename of the file	 * @param   string   $mode        Mode string to retrieve the filename	 * @param   boolean  $use_prefix  Controls the use of a prefix	 * @param   boolean  $relative    Determines if the filename given is relative. Relative paths do not have JPATH_ROOT stripped.	 *	 * @return  string	 *	 * @since   11.1	 */	public function _getFilename($filename, $mode, $use_prefix, $relative)	{		if ($use_prefix)		{			// Get rid of binary or t, should be at the end of the string			$tmode = trim($mode, 'btf123456789');			// Check if it's a write mode then add the appropriate prefix			// Get rid of JPATH_ROOT (legacy compat) along the way			if (in_array($tmode, JFilesystemHelper::getWriteModes()))			{				if (!$relative && $this->writeprefix)				{					$filename = str_replace(JPATH_ROOT, '', $filename);				}				$filename = $this->writeprefix . $filename;			}			else			{				if (!$relative && $this->readprefix)				{					$filename = str_replace(JPATH_ROOT, '', $filename);				}				$filename = $this->readprefix . $filename;			}		}		return $filename;	}	/**	 * Return the internal file handle	 *	 * @return  File handler	 *	 * @since   11.1	 */	public function getFileHandle()	{		return $this->fh;	}}
<?php/** * @package     Joomla.Administrator * @subpackage  com_languages * * @copyright   Copyright (C) 2005 - 2013 Open Source Matters, Inc. All rights reserved. * @license     GNU General Public License version 2 or later; see LICENSE.txt */defined('_JEXEC') or die;/** * Languages Model Class * * @package     Joomla.Administrator * @subpackage  com_languages * @since       1.6 */class LanguagesModelLanguages extends JModelList{	/**	 * Constructor.	 *	 * @param   array  An optional associative array of configuration settings.	 * @see     JController	 * @since   1.6	 */	public function __construct($config = array())	{		if (empty($config['filter_fields']))		{			$config['filter_fields'] = array(				'lang_id', 'a.lang_id',				'lang_code', 'a.lang_code',				'title', 'a.title',				'title_native', 'a.title_native',				'sef', 'a.sef',				'image', 'a.image',				'published', 'a.published',				'ordering', 'a.ordering',				'access', 'a.access', 'access_level',				'home', 'l.home',			);		}		parent::__construct($config);	}	/**	 * Method to auto-populate the model state.	 *	 * Note. Calling getState in this method will result in recursion.	 *	 * @param   string  $ordering   An optional ordering field.	 * @param   string  $direction  An optional direction (asc|desc).	 *	 * @return  void	 *	 * @since   1.6	 */	protected function populateState($ordering = null, $direction = null)	{		$app = JFactory::getApplication('administrator');		// Load the filter state.		$search = $this->getUserStateFromRequest($this->context . '.search', 'filter_search');		$this->setState('filter.search', $search);		$accessId = $this->getUserStateFromRequest($this->context . '.access', 'filter_access', null, 'int');		$this->setState('filter.access', $accessId);		$published = $this->getUserStateFromRequest($this->context . '.published', 'filter_published', '');		$this->setState('filter.published', $published);		// Load the parameters.		$params = JComponentHelper::getParams('com_languages');		$this->setState('params', $params);		// List state information.		parent::populateState('a.title', 'asc');	}	/**	 * Method to get a store id based on model configuration state.	 *	 * This is necessary because the model is used by the component and	 * different modules that might need different sets of data or different	 * ordering requirements.	 *	 * @param   string  $id    A prefix for the store id.	 *	 * @return  string  A store id.	 * @since   1.6	 */	protected function getStoreId($id = '')	{		// Compile the store id.		$id .= ':' . $this->getState('filter.search');		$id .= ':' . $this->getState('filter.access');		$id .= ':' . $this->getState('filter.published');		return parent::getStoreId($id);	}	/**	 * Method to build an SQL query to load the list data.	 *	 * @return  string    An SQL query	 * @since   1.6	 */	protected function getListQuery()	{		// Create a new query object.		$db = $this->getDbo();		$query = $db->getQuery(true);		// Select all fields from the languages table.		$query->select($this->getState('list.select', 'a.*', 'l.home'))			->from($db->quoteName('#__languages') . ' AS a');		// Join over the asset groups.		$query->select('ag.title AS access_level')			->join('LEFT', '#__viewlevels AS ag ON ag.id = a.access');		// Select the language home pages		$query->select('l.home AS home')			->join('LEFT', $db->quoteName('#__menu') . ' AS l  ON  l.language = a.lang_code AND l.home=1  AND l.language <> ' . $db->quote('*'));		// Filter on the published state.		$published = $this->getState('filter.published');		if (is_numeric($published))		{			$query->where('a.published = ' . (int) $published);		}		elseif ($published === '')		{			$query->where('(a.published IN (0, 1))');		}		// Filter by search in title		$search = $this->getState('filter.search');		if (!empty($search))		{			$search = $db->quote('%' . $db->escape($search, true) . '%', false);			$query->where('(a.title LIKE ' . $search . ')');		}		// Filter by access level.		if ($access = $this->getState('filter.access'))		{			$query->where('a.access = ' . (int) $access);		}		// Add the list ordering clause.		$query->order($db->escape($this->getState('list.ordering', 'a.ordering')) . ' ' . $db->escape($this->getState('list.direction', 'ASC')));		return $query;	}	/**	 * Set the published language(s)	 *	 * @param   array    $cid      An array of language IDs.	 * @param   integer  $value    The value of the published state.	 *	 * @return  boolean  True on success, false otherwise.	 * @since   1.6	 */	public function setPublished($cid, $value = 0)	{		return JTable::getInstance('Language')->publish($cid, $value);	}	/**	 * Method to delete records.	 *	 * @param   array  An array of item primary keys.	 *	 * @return  boolean  Returns true on success, false on failure.	 * @since   1.6	 */	public function delete($pks)	{		// Sanitize the array.		$pks = (array) $pks;		// Get a row instance.		$table = JTable::getInstance('Language');		// Iterate the items to delete each one.		foreach ($pks as $itemId)		{			if (!$table->delete((int) $itemId))			{				$this->setError($table->getError());				return false;			}		}		// Clean the cache.		$this->cleanCache();		return true;	}	/**	 * Custom clean cache method, 2 places for 2 clients	 *	 * @since   1.6	 */	protected function cleanCache($group = null, $client_id = 0)	{		parent::cleanCache('_system');		parent::cleanCache('com_languages');	}}
<?php/** * @package     Joomla.Site * @subpackage  com_users * * @copyright   Copyright (C) 2005 - 2013 Open Source Matters, Inc. All rights reserved. * @license     GNU General Public License version 2 or later; see LICENSE.txt */defined('_JEXEC') or die;require_once JPATH_COMPONENT.'/controller.php';/** * Registration controller class for Users. * * @package     Joomla.Site * @subpackage  com_users * @since       1.6 */class UsersControllerUser extends UsersController{	/**	 * Method to log in a user.	 *	 * @since   1.6	 */	public function login()	{		JSession::checkToken('post') or jexit(JText::_('JInvalid_Token'));		$app = JFactory::getApplication();		// Populate the data array:		$data = array();		$data['return'] = base64_decode($app->input->post->get('return', '', 'BASE64'));		$data['username'] = JRequest::getVar('username', '', 'method', 'username');		$data['password'] = JRequest::getString('password', '', 'post', JREQUEST_ALLOWRAW);		// Set the return URL if empty.		if (empty($data['return']))		{			$data['return'] = 'index.php?option=com_users&view=profile';		}		// Set the return URL in the user state to allow modification by plugins		$app->setUserState('users.login.form.return', $data['return']);		// Get the log in options.		$options = array();		$options['remember'] = $this->input->getBool('remember', false);		$options['return'] = $data['return'];		// Get the log in credentials.		$credentials = array();		$credentials['username'] = $data['username'];		$credentials['password'] = $data['password'];		// Perform the log in.		if (true === $app->login($credentials, $options))		{			// Success			$app->setUserState('users.login.form.data', array());			$app->redirect(JRoute::_($app->getUserState('users.login.form.return'), false));		}		else		{			// Login failed !			$data['remember'] = (int) $options['remember'];			$app->setUserState('users.login.form.data', $data);			$app->redirect(JRoute::_('index.php?option=com_users&view=login', false));		}	}	/**	 * Method to log out a user.	 *	 * @since   1.6	 */	public function logout()	{		JSession::checkToken('request') or jexit(JText::_('JInvalid_Token'));		$app = JFactory::getApplication();		// Perform the log in.		$error = $app->logout();		// Check if the log out succeeded.		if (!($error instanceof Exception))		{			// Get the return url from the request and validate that it is internal.			$return = JRequest::getVar('return', '', 'method', 'base64');			$return = base64_decode($return);			if (!JURI::isInternal($return))			{				$return = '';			}			// Redirect the user.			$app->redirect(JRoute::_($return, false));		}		else		{			$app->redirect(JRoute::_('index.php?option=com_users&view=login', false));		}	}	/**	 * Method to register a user.	 *	 * @since   1.6	 */	public function register()	{		JSession::checkToken('post') or jexit(JText::_('JINVALID_TOKEN'));		// Get the form data.		$data  = $this->input->post->get('user', array(), 'array');		// Get the model and validate the data.		$model  = $this->getModel('Registration', 'UsersModel');		$return	= $model->validate($data);		// Check for errors.		if ($return === false)		{			// Get the validation messages.			$app	= &JFactory::getApplication();			$errors	= $model->getErrors();			// Push up to three validation messages out to the user.			for ($i = 0, $n = count($errors); $i < $n && $i < 3; $i++)			{				if ($errors[$i] instanceof Exception)				{					$app->enqueueMessage($errors[$i]->getMessage(), 'notice');				} else {					$app->enqueueMessage($errors[$i], 'notice');				}			}			// Save the data in the session.			$app->setUserState('users.registration.form.data', $data);			// Redirect back to the registration form.			$this->setRedirect('index.php?option=com_users&view=registration');			return false;		}		// Finish the registration.		$return	= $model->register($data);		// Check for errors.		if ($return === false)		{			// Save the data in the session.			$app->setUserState('users.registration.form.data', $data);			// Redirect back to the registration form.			$message = JText::sprintf('COM_USERS_REGISTRATION_SAVE_FAILED', $model->getError());			$this->setRedirect('index.php?option=com_users&view=registration', $message, 'error');			return false;		}		// Flush the data from the session.		$app->setUserState('users.registration.form.data', null);		exit;	}	/**	 * Method to login a user.	 *	 * @since   1.6	 */	public function remind()	{		// Check the request token.		JSession::checkToken('post') or jexit(JText::_('JINVALID_TOKEN'));		$app   = JFactory::getApplication();		$model = $this->getModel('User', 'UsersModel');		$data  = $this->input->post->get('jform', array(), 'array');		// Submit the username remind request.		$return	= $model->processRemindRequest($data);		// Check for a hard error.		if ($return instanceof Exception)		{			// Get the error message to display.			if ($app->getCfg('error_reporting'))			{				$message = $return->getMessage();			} else {				$message = JText::_('COM_USERS_REMIND_REQUEST_ERROR');			}			// Get the route to the next page.			$itemid = UsersHelperRoute::getRemindRoute();			$itemid = $itemid !== null ? '&Itemid='.$itemid : '';			$route	= 'index.php?option=com_users&view=remind'.$itemid;			// Go back to the complete form.			$this->setRedirect(JRoute::_($route, false), $message, 'error');			return false;		} elseif ($return === false)		{			// Complete failed.			// Get the route to the next page.			$itemid = UsersHelperRoute::getRemindRoute();			$itemid = $itemid !== null ? '&Itemid='.$itemid : '';			$route	= 'index.php?option=com_users&view=remind'.$itemid;			// Go back to the complete form.			$message = JText::sprintf('COM_USERS_REMIND_REQUEST_FAILED', $model->getError());			$this->setRedirect(JRoute::_($route, false), $message, 'notice');			return false;		}		else		{			// Complete succeeded.			// Get the route to the next page.			$itemid = UsersHelperRoute::getLoginRoute();			$itemid = $itemid !== null ? '&Itemid='.$itemid : '';			$route	= 'index.php?option=com_users&view=login'.$itemid;			// Proceed to the login form.			$message = JText::_('COM_USERS_REMIND_REQUEST_SUCCESS');			$this->setRedirect(JRoute::_($route, false), $message);			return true;		}	}	/**	 * Method to login a user.	 *	 * @since   1.6	 */	public function resend()	{		// Check for request forgeries		JSession::checkToken('post') or jexit(JText::_('JINVALID_TOKEN'));	}}
<?php/** * @package     Joomla.Administrator * @subpackage  com_config * * @copyright   Copyright (C) 2005 - 2013 Open Source Matters, Inc. All rights reserved. * @license     GNU General Public License version 2 or later; see LICENSE.txt */defined('_JEXEC') or die;?><fieldset class="form-horizontal">	<legend><?php echo JText::_('COM_CONFIG_CACHE_SETTINGS'); ?></legend>			<?php			foreach ($this->form->getFieldset('cache') as $field):			?>				<div class="control-group">					<div class="control-label"><?php echo $field->label; ?></div>					<div class="controls"><?php echo $field->input; ?></div>				</div>			<?php			endforeach;			?>		<?php if (isset($this->data['cache_handler']) &&				$this->data['cache_handler'] == 'memcache' ||				$this->data['session_handler'] == 'memcache' ||				$this->data['cache_handler'] == 'memcached' ||				$this->data['session_handler'] == 'memcached'				) : ?>					<?php			foreach ($this->form->getFieldset('memcache') as $mfield):			?>				<div class="control-group">					<div class="control-label"><?php echo $mfield->label; ?></div>					<div class="controls"><?php echo $mfield->input; ?></div>				</div>			<?php			endforeach;			?>		<?php endif; ?></fieldset>
<?php/** * @package     Joomla.Platform * @subpackage  Feed * * @copyright   Copyright (C) 2005 - 2012 Open Source Matters, Inc. All rights reserved. * @license     GNU General Public License version 2 or later; see LICENSE */defined('JPATH_PLATFORM') or die;/** * Feed Link class. * * @package     Joomla.Platform * @subpackage  Feed * @since       12.3 */class JFeedLink{	/**	 * @var    string	 * @since  12.3	 */	public $uri;	/**	 * @var    string	 * @since  12.3	 */	public $relation;	/**	 * @var    string	 * @since  12.3	 */	public $type;	/**	 * @var    string	 * @since  12.3	 */	public $language;	/**	 * @var    string	 * @since  12.3	 */	public $title;	/**	 * @var    integer	 * @since  12.3	 */	public $length;	/**	 * Constructor.	 *	 * @param   string   $uri       The URI to the linked resource.	 * @param   string   $relation  The relationship between the feed and the linked resource.	 * @param   string   $type      The resource type.	 * @param   string   $language  The language of the resource found at the given URI.	 * @param   string   $title     The title of the resource.	 * @param   integer  $length    The length of the resource in bytes.	 *	 * @since   12.3	 */	public function __construct($uri = null, $relation = null, $type = null, $language = null, $title = null, $length = null)	{		$this->uri = $uri;		$this->relation = $relation;		$this->type = $type;		$this->language = $language;		$this->title = $title;		// Validate the length input.		if (isset($length) && !is_numeric($length))		{			throw new InvalidArgumentException('Length must be numeric.');		}		$this->length = (int) $length;	}}
<?php/** * @package     Joomla.Administrator * @subpackage  Template.hathor * * @copyright   Copyright (C) 2005 - 2013 Open Source Matters, Inc. All rights reserved. * @license     GNU General Public License version 2 or later; see LICENSE.txt */defined('_JEXEC') or die;JHtml::addIncludePath(JPATH_COMPONENT.'/helpers/html');JHtml::_('behavior.tooltip');$input     = JFactory::getApplication()->input;$field     = $input->getCmd('field');$function  = 'jSelectUser_'.$field;$listOrder = $this->escape($this->state->get('list.ordering'));$listDirn  = $this->escape($this->state->get('list.direction'));?><form action="<?php echo JRoute::_('index.php?option=com_users&view=users&layout=modal&tmpl=component&groups=' . $input->get('groups', '', 'BASE64') . '&excluded=' . $input->get('excluded', '', 'BASE64'));?>" method="post" name="adminForm" id="adminForm">	<fieldset id="filter-bar">	<legend class="element-invisible"><?php echo JText::_('JSEARCH_FILTER'); ?></legend>		<div class="filter-search">			<label class="filter-search-lbl" for="filter_search"><?php echo JText::_('JSEARCH_FILTER'); ?></label>			<input type="text" name="filter_search" id="filter_search" value="<?php echo $this->escape($this->state->get('filter.search')); ?>" title="<?php echo JText::_('COM_USERS_SEARCH_IN_NAME'); ?>" />			<button type="submit"><?php echo JText::_('JSEARCH_FILTER_SUBMIT'); ?></button>			<button type="button" onclick="document.id('filter_search').value='';this.form.submit();"><?php echo JText::_('JSEARCH_FILTER_CLEAR'); ?></button>			<button type="button" onclick="if (window.parent) window.parent.<?php echo $this->escape($function);?>('', '<?php echo JText::_('JLIB_FORM_SELECT_USER') ?>');"><?php echo JText::_('JOPTION_NO_USER')?></button>		</div>		<div class="filter-select">			<label for="filter_group_id">				<?php echo JText::_('COM_USERS_FILTER_USER_GROUP'); ?>			</label>			<?php echo JHtml::_('access.usergroup', 'filter_group_id', $this->state->get('filter.group_id')); ?>			<button type="submit" id="filter-go">				<?php echo JText::_('JSUBMIT'); ?></button>		</div>	</fieldset>	<table class="adminlist modal">		<thead>			<tr>				<th class="title">					<?php echo JHtml::_('grid.sort', 'COM_USERS_HEADING_NAME', 'a.name', $listDirn, $listOrder); ?>				</th>				<th class="nowrap width=25">					<?php echo JHtml::_('grid.sort', 'JGLOBAL_USERNAME', 'a.username', $listDirn, $listOrder); ?>				</th>				<th class="nowrap width=25">					<?php echo JHtml::_('grid.sort', 'COM_USERS_HEADING_GROUPS', 'group_names', $listDirn, $listOrder); ?>				</th>			</tr>		</thead>		<tbody>		<?php			$i = 0;			foreach ($this->items as $item) : ?>			<tr class="row<?php echo $i % 2; ?>">				<td>					<a class="pointer" onclick="if (window.parent) window.parent.<?php echo $this->escape($function);?>('<?php echo $item->id; ?>', '<?php echo $this->escape(addslashes($item->name)); ?>');">						<?php echo $item->name; ?></a>				</td>				<td class="center">					<?php echo $item->username; ?>				</td>				<td class="title">					<?php echo nl2br($item->group_names); ?>				</td>			</tr>		<?php endforeach; ?>		</tbody>	</table>	<?php echo $this->pagination->getListFooter(); ?>	<input type="hidden" name="task" value="" />	<input type="hidden" name="boxchecked" value="0" />	<input type="hidden" name="filter_order" value="<?php echo $listOrder; ?>" />	<input type="hidden" name="filter_order_Dir" value="<?php echo $listDirn; ?>" />	<?php echo JHtml::_('form.token'); ?></form>
<?php/** * @package     Joomla.Administrator * @subpackage  com_contact * * @copyright   Copyright (C) 2005 - 2013 Open Source Matters, Inc. All rights reserved. * @license     GNU General Public License version 2 or later; see LICENSE.txt */defined('_JEXEC') or die;/** * Contact component helper. * * @package     Joomla.Administrator * @subpackage  com_contact * @since       1.6 */class ContactHelper{	/**	 * Configure the Linkbar.	 *	 * @param   string	$vName	The name of the active view.	 *	 * @return  void	 * @since   1.6	 */	public static function addSubmenu($vName)	{		JHtmlSidebar::addEntry(			JText::_('COM_CONTACT_SUBMENU_CONTACTS'),			'index.php?option=com_contact&view=contacts',			$vName == 'contacts'		);		JHtmlSidebar::addEntry(			JText::_('COM_CONTACT_SUBMENU_CATEGORIES'),			'index.php?option=com_categories&extension=com_contact',			$vName == 'categories'		);		if ($vName == 'categories')		{			JToolbarHelper::title(				JText::sprintf('COM_CATEGORIES_CATEGORIES_TITLE', JText::_('com_contact')),				'contact-categories');		}	}	/**	 * Gets a list of the actions that can be performed.	 *	 * @param   integer  The category ID.	 * @param   integer  The contact ID.	 *	 * @return  JObject	 * @since   1.6	 */	public static function getActions($categoryId = 0, $contactId = 0)	{		$user	= JFactory::getUser();		$result	= new JObject;		if (empty($contactId) && empty($categoryId))		{			$assetName = 'com_contact';			$level = 'component';		}		elseif (empty($contactId))		{			$assetName = 'com_contact.category.'.(int) $categoryId;			$level = 'category';		}		else		{			$assetName = 'com_contact.contact.'.(int) $contactId;			$level = 'category';		}		$actions = JAccess::getActions('com_contact', $level);		foreach ($actions as $action)		{			$result->set($action->name,	$user->authorise($action->name, $assetName));		}		return $result;	}}
<?php/** * @package     Joomla.Site * @subpackage  com_content * * @copyright   Copyright (C) 2005 - 2013 Open Source Matters, Inc. All rights reserved. * @license     GNU General Public License version 2 or later; see LICENSE.txt */defined('_JEXEC') or die;/** * Frontpage View class * * @package     Joomla.Site * @subpackage  com_content * @since       1.5 */class ContentViewFeatured extends JViewLegacy{	protected $state = null;	protected $item = null;	protected $items = null;	protected $pagination = null;	protected $lead_items = array();	protected $intro_items = array();	protected $link_items = array();	protected $columns = 1;	/**	 * Display the view	 *	 * @return  mixed  False on error, null otherwise.	 */	public function display($tpl = null)	{		$user = JFactory::getUser();		$app = JFactory::getApplication();		$state 		= $this->get('State');		$items 		= $this->get('Items');		$pagination	= $this->get('Pagination');		// Check for errors.		if (count($errors = $this->get('Errors')))		{			JError::raiseWarning(500, implode("\n", $errors));			return false;		}		$params = &$state->params;		// PREPARE THE DATA		// Get the metrics for the structural page layout.		$numLeading = $params->def('num_leading_articles', 1);		$numIntro = $params->def('num_intro_articles', 4);		$numLinks = $params->def('num_links', 4);		// Compute the article slugs and prepare introtext (runs content plugins).		foreach ($items as $i => & $item)		{			$item->slug = $item->alias ? ($item->id . ':' . $item->alias) : $item->id;			$item->catslug = ($item->category_alias) ? ($item->catid . ':' . $item->category_alias) : $item->catid;			$item->parent_slug = ($item->parent_alias) ? ($item->parent_id . ':' . $item->parent_alias) : $item->parent_id;			// No link for ROOT category			if ($item->parent_alias == 'root')			{				$item->parent_slug = null;			}			$item->event = new stdClass;			$dispatcher = JEventDispatcher::getInstance();			// Old plugins: Ensure that text property is available			if (!isset($item->text))			{				$item->text = $item->introtext;			}			JPluginHelper::importPlugin('content');			$results = $dispatcher->trigger('onContentPrepare', array ('com_content.featured', &$item, &$this->params, 0));			// Old plugins: Use processed text as introtext			$item->introtext = $item->text;			$results = $dispatcher->trigger('onContentAfterTitle', array('com_content.featured', &$item, &$item->params, 0));			$item->event->afterDisplayTitle = trim(implode("\n", $results));			$results = $dispatcher->trigger('onContentBeforeDisplay', array('com_content.featured', &$item, &$item->params, 0));			$item->event->beforeDisplayContent = trim(implode("\n", $results));			$results = $dispatcher->trigger('onContentAfterDisplay', array('com_content.featured', &$item, &$item->params, 0));			$item->event->afterDisplayContent = trim(implode("\n", $results));		}		// Preprocess the breakdown of leading, intro and linked articles.		// This makes it much easier for the designer to just interogate the arrays.		$max = count($items);		// The first group is the leading articles.		$limit = $numLeading;		for ($i = 0; $i < $limit && $i < $max; $i++)		{			$this->lead_items[$i] = &$items[$i];		}		// The second group is the intro articles.		$limit = $numLeading + $numIntro;		// Order articles across, then down (or single column mode)		for ($i = $numLeading; $i < $limit && $i < $max; $i++)		{			$this->intro_items[$i] = &$items[$i];		}		$this->columns = max(1, $params->def('num_columns', 1));		$order = $params->def('multi_column_order', 1);		if ($order == 0 && $this->columns > 1)		{			// call order down helper			$this->intro_items = ContentHelperQuery::orderDownColumns($this->intro_items, $this->columns);		}		// The remainder are the links.		for ($i = $numLeading + $numIntro; $i < $max; $i++)		{			$this->link_items[$i] = &$items[$i];		}		//Escape strings for HTML output		$this->pageclass_sfx = htmlspecialchars($params->get('pageclass_sfx'));		$this->params     = &$params;		$this->items      = &$items;		$this->pagination = &$pagination;		$this->user       = &$user;		$this->_prepareDocument();		parent::display($tpl);	}	/**	 * Prepares the document	 */	protected function _prepareDocument()	{		$app		= JFactory::getApplication();		$menus		= $app->getMenu();		$title 		= null;		// Because the application sets a default page title,		// we need to get it from the menu item itself		$menu = $menus->getActive();		if ($menu)		{			$this->params->def('page_heading', $this->params->get('page_title', $menu->title));		}		else		{			$this->params->def('page_heading', JText::_('JGLOBAL_ARTICLES'));		}		$title = $this->params->get('page_title', '');		if (empty($title))		{			$title = $app->getCfg('sitename');		}		elseif ($app->getCfg('sitename_pagetitles', 0) == 1)		{			$title = JText::sprintf('JPAGETITLE', $app->getCfg('sitename'), $title);		}		elseif ($app->getCfg('sitename_pagetitles', 0) == 2)		{			$title = JText::sprintf('JPAGETITLE', $title, $app->getCfg('sitename'));		}		$this->document->setTitle($title);		if ($this->params->get('menu-meta_description'))		{			$this->document->setDescription($this->params->get('menu-meta_description'));		}		if ($this->params->get('menu-meta_keywords'))		{			$this->document->setMetadata('keywords', $this->params->get('menu-meta_keywords'));		}		if ($this->params->get('robots'))		{			$this->document->setMetadata('robots', $this->params->get('robots'));		}		// Add feed links		if ($this->params->get('show_feed_link', 1))		{			$link = '&format=feed&limitstart=';			$attribs = array('type' => 'application/rss+xml', 'title' => 'RSS 2.0');			$this->document->addHeadLink(JRoute::_($link . '&type=rss'), 'alternate', 'rel', $attribs);			$attribs = array('type' => 'application/atom+xml', 'title' => 'Atom 1.0');			$this->document->addHeadLink(JRoute::_($link . '&type=atom'), 'alternate', 'rel', $attribs);		}	}}
<?php/** * @package     Joomla.Site * @subpackage  com_content * * @copyright   Copyright (C) 2005 - 2013 Open Source Matters, Inc. All rights reserved. * @license     GNU General Public License version 2 or later; see LICENSE.txt */defined('_JEXEC') or die;/** * Content Component Query Helper * * @static * @package     Joomla.Site * @subpackage  com_content * @since       1.5 */class ContentHelperQuery{	/**	 * Translate an order code to a field for primary category ordering.	 *	 * @param   string	$orderby	The ordering code.	 *	 * @return  string	The SQL field(s) to order by.	 * @since   1.5	 */	public static function orderbyPrimary($orderby)	{		switch ($orderby)		{			case 'alpha' :				$orderby = 'c.path, ';				break;			case 'ralpha' :				$orderby = 'c.path DESC, ';				break;			case 'order' :				$orderby = 'c.lft, ';				break;			default :				$orderby = '';				break;		}		return $orderby;	}	/**	 * Translate an order code to a field for secondary category ordering.	 *	 * @param   string	$orderby	The ordering code.	 * @param   string	$orderDate	The ordering code for the date.	 *	 * @return  string	The SQL field(s) to order by.	 * @since   1.5	 */	public static function orderbySecondary($orderby, $orderDate = 'created')	{		$queryDate = self::getQueryDate($orderDate);		switch ($orderby)		{			case 'date' :				$orderby = $queryDate;				break;			case 'rdate' :				$orderby = $queryDate . ' DESC ';				break;			case 'alpha' :				$orderby = 'a.title';				break;			case 'ralpha' :				$orderby = 'a.title DESC';				break;			case 'hits' :				$orderby = 'a.hits DESC';				break;			case 'rhits' :				$orderby = 'a.hits';				break;			case 'order' :				$orderby = 'a.ordering';				break;			case 'author' :				$orderby = 'author';				break;			case 'rauthor' :				$orderby = 'author DESC';				break;			case 'front' :				$orderby = 'a.featured DESC, fp.ordering';				break;			default :				$orderby = 'a.ordering';				break;		}		return $orderby;	}	/**	 * Translate an order code to a field for primary category ordering.	 *	 * @param   string	$orderDate	The ordering code.	 *	 * @return  string	The SQL field(s) to order by.	 * @since   1.6	 */	public static function getQueryDate($orderDate)	{		$db = JFactory::getDbo();		switch ($orderDate)		{			case 'modified' :				$queryDate = ' CASE WHEN a.modified = ' . $db->quote($db->getNullDate()) . ' THEN a.created ELSE a.modified END';				break;			// use created if publish_up is not set			case 'published' :				$queryDate = ' CASE WHEN a.publish_up = ' . $db->quote($db->getNullDate()) . ' THEN a.created ELSE a.publish_up END ';				break;			case 'created' :			default :				$queryDate = ' a.created ';				break;		}		return $queryDate;	}	/**	 * Get join information for the voting query.	 *	 * @param   JRegistry	$param	An options object for the article.	 *	 * @return  array  	A named array with "select" and "join" keys.	 * @since   1.5	 */	public static function buildVotingQuery($params=null)	{		if (!$params)		{			$params = JComponentHelper::getParams('com_content');		}		$voting = $params->get('show_vote');		if ($voting)		{			// calculate voting count			$select = ' , ROUND(v.rating_sum / v.rating_count) AS rating, v.rating_count';			$join = ' LEFT JOIN #__content_rating AS v ON a.id = v.content_id';		}		else		{			$select = '';			$join = '';		}		$results = array ('select' => $select, 'join' => $join);		return $results;	}	/**	 * Method to order the intro articles array for ordering	 * down the columns instead of across.	 * The layout always lays the introtext articles out across columns.	 * Array is reordered so that, when articles are displayed in index order	 * across columns in the layout, the result is that the	 * desired article ordering is achieved down the columns.	 *	 * @param   array  $articles	Array of intro text articles	 * @param   integer	$numColumns	Number of columns in the layout	 *	 * @return  array  Reordered array to achieve desired ordering down columns	 * @since   1.6	 */	public static function orderDownColumns(&$articles, $numColumns = 1)	{		$count = count($articles);		// just return the same array if there is nothing to change		if ($numColumns == 1 || !is_array($articles) || $count <= $numColumns)		{			$return = $articles;		}		// we need to re-order the intro articles array		else {			// we need to preserve the original array keys			$keys = array_keys($articles);			$maxRows = ceil($count / $numColumns);			$numCells = $maxRows * $numColumns;			$numEmpty = $numCells - $count;			$index = array();			// calculate number of empty cells in the array			// fill in all cells of the array			// put -1 in empty cells so we can skip later			for ($row = 1, $i = 1; $row <= $maxRows; $row++)			{				for ($col = 1; $col <= $numColumns; $col++)				{					if ($numEmpty > ($numCells - $i))					{						// put -1 in empty cells						$index[$row][$col] = -1;					}					else {						// put in zero as placeholder						$index[$row][$col] = 0;					}					$i++;				}			}			// layout the articles in column order, skipping empty cells			$i = 0;			for ($col = 1; ($col <= $numColumns) && ($i < $count); $col++)			{				for ($row = 1; ($row <= $maxRows) && ($i < $count); $row++)				{					if ($index[$row][$col] != - 1)					{						$index[$row][$col] = $keys[$i];						$i++;					}				}			}			// now read the $index back row by row to get articles in right row/col			// so that they will actually be ordered down the columns (when read by row in the layout)			$return = array();			$i = 0;			for ($row = 1; ($row <= $maxRows) && ($i < $count); $row++)			{				for ($col = 1; ($col <= $numColumns) && ($i < $count); $col++)				{					$return[$keys[$i]] = $articles[$index[$row][$col]];					$i++;				}			}		}		return $return;	}}
<?php/** * @package     Joomla.Administrator * @subpackage  com_config * * @copyright   Copyright (C) 2005 - 2013 Open Source Matters, Inc. All rights reserved. * @license     GNU General Public License version 2 or later; see LICENSE.txt */defined('_JEXEC') or die;/** * Components helper for com_config * * @package     Joomla.Administrator * @subpackage  com_config * @since       3.0 */class ConfigHelperComponent{	/**	 * Get an array of all enabled components.	 *	 * @return  array	 *	 * @since   3.0	 */	public static function getAllComponents()	{		$db = JFactory::getDbo();		$query = $db->getQuery(true)			->select('element')			->from('#__extensions')			->where('type = ' . $db->quote('component'))			->where('enabled = 1');		$db->setQuery($query);		$result = $db->loadColumn();		return $result;	}	/**	 * Returns true if the component has configuration options.	 *	 * @param   string  $components	 *	 * @return  boolean	 *	 * @since   3.0	 */	public static function hasComponentConfig($component)	{		return is_file(JPATH_ADMINISTRATOR . '/components/' . $component . '/config.xml');	}	/**	 * Returns an array of all components with configuration options. By only	 * components for which the current user has 'core.manage' rights are returned.	 *	 * @param   boolean  $authCheck	 *	 * @return  array	 *	 * @since   3.0	 */	public static function getComponentsWithConfig($authCheck = true)	{		$result = array();		$components = self::getAllComponents();		$user = JFactory::getUser();		// Remove com_config from the array as that may have weird side effects		$components = array_diff($components, array('com_config'));		foreach ($components as $component)		{			if (self::hasComponentConfig($component) && (!$authCheck || $user->authorise('core.manage', $component)))			{				$result[] = $component;			}		}		return $result;	}	/**	 * Load the sys language for the given component.	 *	 * @param   string  $components	 *	 * @return  void	 *	 * @since   3.0	 */	public static function loadLanguageForComponents($components)	{		$lang = JFactory::getLanguage();		foreach ($components as $component)		{			if (!empty($component))				{					// Load the core file then					// Load extension-local file.					$lang->load($component . '.sys', JPATH_BASE, null, false, false)				||	$lang->load($component . '.sys', JPATH_ADMINISTRATOR . '/components/' . $component, null, false, false)				||	$lang->load($component . '.sys', JPATH_BASE, $lang->getDefault(), false, false)				||	$lang->load($component . '.sys', JPATH_ADMINISTRATOR . '/components/' . $component, $lang->getDefault(), false, false);			}		}	}}
<?php/** * @package     Joomla.Site * @subpackage  com_users * * @copyright   Copyright (C) 2005 - 2013 Open Source Matters, Inc. All rights reserved. * @license     GNU General Public License version 2 or later; see LICENSE.txt */defined('_JEXEC') or die;/** * Rest model class for Users. * * @package     Joomla.Site * @subpackage  com_users * @since       1.5 */class UsersModelReset extends JModelForm{	/**	 * Method to get the password reset request form.	 *	 * @param   array      $data        Data for the form.	 * @param   boolean    $loadData    True if the form is to load its own data (default case), false if not.	 * @return  JForm    A JForm object on success, false on failure	 * @since   1.6	 */	public function getForm($data = array(), $loadData = true)	{		// Get the form.		$form = $this->loadForm('com_users.reset_request', 'reset_request', array('control' => 'jform', 'load_data' => $loadData));		if (empty($form))		{			return false;		}		return $form;	}	/**	 * Method to get the password reset complete form.	 *	 * @param   array      $data        Data for the form.	 * @param   boolean    $loadData    True if the form is to load its own data (default case), false if not.	 * @return  JForm    A JForm object on success, false on failure	 * @since   1.6	 */	public function getResetCompleteForm($data = array(), $loadData = true)	{		// Get the form.		$form = $this->loadForm('com_users.reset_complete', 'reset_complete', $options = array('control' => 'jform'));		if (empty($form))		{			return false;		}		return $form;	}	/**	 * Method to get the password reset confirm form.	 *	 * @param   array      $data        Data for the form.	 * @param   boolean    $loadData    True if the form is to load its own data (default case), false if not.	 * @return  JForm    A JForm object on success, false on failure	 * @since   1.6	 */	public function getResetConfirmForm($data = array(), $loadData = true)	{		// Get the form.		$form = $this->loadForm('com_users.reset_confirm', 'reset_confirm', $options = array('control' => 'jform'));		if (empty($form))		{			return false;		}		return $form;	}	/**	 * Override preprocessForm to load the user plugin group instead of content.	 *	 * @param   object    A form object.	 * @param   mixed     The data expected for the form.	 * @throws    Exception if there is an error in the form event.	 * @since   1.6	 */	protected function preprocessForm(JForm $form, $data, $group = 'user')	{		parent::preprocessForm($form, $data, $group);	}	/**	 * Method to auto-populate the model state.	 *	 * Note. Calling getState in this method will result in recursion.	 *	 * @since   1.6	 */	protected function populateState()	{		// Get the application object.		$params = JFactory::getApplication()->getParams('com_users');		// Load the parameters.		$this->setState('params', $params);	}	/**	 * @since   1.6	 */	function processResetComplete($data)	{		// Get the form.		$form = $this->getResetCompleteForm();		// Check for an error.		if ($form instanceof Exception)		{			return $form;		}		// Filter and validate the form data.		$data = $form->filter($data);		$return = $form->validate($data);		// Check for an error.		if ($return instanceof Exception)		{			return $return;		}		// Check the validation results.		if ($return === false)		{			// Get the validation messages from the form.			foreach ($form->getErrors() as $formError)			{				$this->setError($formError->getMessage());			}			return false;		}		// Get the token and user id from the confirmation process.		$app = JFactory::getApplication();		$token = $app->getUserState('com_users.reset.token', null);		$userId = $app->getUserState('com_users.reset.user', null);		// Check the token and user id.		if (empty($token) || empty($userId))		{			return new JException(JText::_('COM_USERS_RESET_COMPLETE_TOKENS_MISSING'), 403);		}		// Get the user object.		$user = JUser::getInstance($userId);		// Check for a user and that the tokens match.		if (empty($user) || $user->activation !== $token)		{			$this->setError(JText::_('COM_USERS_USER_NOT_FOUND'));			return false;		}		// Make sure the user isn't blocked.		if ($user->block)		{			$this->setError(JText::_('COM_USERS_USER_BLOCKED'));			return false;		}		// Generate the new password hash.		$salt = JUserHelper::genRandomPassword(32);		$crypted = JUserHelper::getCryptedPassword($data['password1'], $salt);		$password = $crypted . ':' . $salt;		// Update the user object.		$user->password = $password;		$user->activation = '';		$user->password_clear = $data['password1'];		// Save the user to the database.		if (!$user->save(true))		{			return new JException(JText::sprintf('COM_USERS_USER_SAVE_FAILED', $user->getError()), 500);		}		// Flush the user data from the session.		$app->setUserState('com_users.reset.token', null);		$app->setUserState('com_users.reset.user', null);		return true;	}	/**	 * @since   1.6	 */	function processResetConfirm($data)	{		// Get the form.		$form = $this->getResetConfirmForm();		// Check for an error.		if ($form instanceof Exception)		{			return $form;		}		// Filter and validate the form data.		$data = $form->filter($data);		$return = $form->validate($data);		// Check for an error.		if ($return instanceof Exception)		{			return $return;		}		// Check the validation results.		if ($return === false)		{			// Get the validation messages from the form.			foreach ($form->getErrors() as $formError)			{				$this->setError($formError->getMessage());			}			return false;		}		// Find the user id for the given token.		$db = $this->getDbo();		$query = $db->getQuery(true)			->select('activation')			->select('id')			->select('block')			->from($db->quoteName('#__users'))			->where($db->quoteName('username') . ' = ' . $db->quote($data['username']));		// Get the user id.		$db->setQuery($query);		try		{			$user = $db->loadObject();		}		catch (RuntimeException $e)		{			return new JException(JText::sprintf('COM_USERS_DATABASE_ERROR', $e->getMessage()), 500);		}		// Check for a user.		if (empty($user))		{			$this->setError(JText::_('COM_USERS_USER_NOT_FOUND'));			return false;		}		$parts = explode(':', $user->activation);		$crypt = $parts[0];		if (!isset($parts[1]))		{			$this->setError(JText::_('COM_USERS_USER_NOT_FOUND'));			return false;		}		$salt = $parts[1];		$testcrypt = JUserHelper::getCryptedPassword($data['token'], $salt);		// Verify the token		if (!($crypt == $testcrypt))		{			$this->setError(JText::_('COM_USERS_USER_NOT_FOUND'));			return false;		}		// Make sure the user isn't blocked.		if ($user->block)		{			$this->setError(JText::_('COM_USERS_USER_BLOCKED'));			return false;		}		// Push the user data into the session.		$app = JFactory::getApplication();		$app->setUserState('com_users.reset.token', $crypt . ':' . $salt);		$app->setUserState('com_users.reset.user', $user->id);		return true;	}	/**	 * Method to start the password reset process.	 *	 * @since   1.6	 */	public function processResetRequest($data)	{		$config = JFactory::getConfig();		// Get the form.		$form = $this->getForm();		// Check for an error.		if ($form instanceof Exception)		{			return $form;		}		// Filter and validate the form data.		$data = $form->filter($data);		$return = $form->validate($data);		// Check for an error.		if ($return instanceof Exception)		{			return $return;		}		// Check the validation results.		if ($return === false)		{			// Get the validation messages from the form.			foreach ($form->getErrors() as $formError)			{				$this->setError($formError->getMessage());			}			return false;		}		// Find the user id for the given email address.		$db = $this->getDbo();		$query = $db->getQuery(true)			->select('id')			->from($db->quoteName('#__users'))			->where($db->quoteName('email') . ' = ' . $db->quote($data['email']));		// Get the user object.		$db->setQuery($query);		try		{			$userId = $db->loadResult();		}		catch (RuntimeException $e)		{			$this->setError(JText::sprintf('COM_USERS_DATABASE_ERROR', $e->getMessage()), 500);			return false;		}		// Check for a user.		if (empty($userId))		{			$this->setError(JText::_('COM_USERS_INVALID_EMAIL'));			return false;		}		// Get the user object.		$user = JUser::getInstance($userId);		// Make sure the user isn't blocked.		if ($user->block)		{			$this->setError(JText::_('COM_USERS_USER_BLOCKED'));			return false;		}		// Make sure the user isn't a Super Admin.		if ($user->authorise('core.admin'))		{			$this->setError(JText::_('COM_USERS_REMIND_SUPERADMIN_ERROR'));			return false;		}		// Make sure the user has not exceeded the reset limit		if (!$this->checkResetLimit($user))		{			$resetLimit = (int) JFactory::getApplication()->getParams()->get('reset_time');			$this->setError(JText::plural('COM_USERS_REMIND_LIMIT_ERROR_N_HOURS', $resetLimit));			return false;		}		// Set the confirmation token.		$token = JApplication::getHash(JUserHelper::genRandomPassword());		$salt = JUserHelper::getSalt('crypt-md5');		$hashedToken = md5($token . $salt) . ':' . $salt;		$user->activation = $hashedToken;		// Save the user to the database.		if (!$user->save(true))		{			return new JException(JText::sprintf('COM_USERS_USER_SAVE_FAILED', $user->getError()), 500);		}		// Assemble the password reset confirmation link.		$mode = $config->get('force_ssl', 0) == 2 ? 1 : -1;		$itemid = UsersHelperRoute::getLoginRoute();		$itemid = $itemid !== null ? '&Itemid=' . $itemid : '';		$link = 'index.php?option=com_users&view=reset&layout=confirm' . $itemid;		// Put together the email template data.		$data = $user->getProperties();		$data['fromname'] = $config->get('fromname');		$data['mailfrom'] = $config->get('mailfrom');		$data['sitename'] = $config->get('sitename');		$data['link_text'] = JRoute::_($link, false, $mode);		$data['link_html'] = JRoute::_($link, true, $mode);		$data['token'] = $token;		$subject = JText::sprintf(			'COM_USERS_EMAIL_PASSWORD_RESET_SUBJECT',			$data['sitename']		);		$body = JText::sprintf(			'COM_USERS_EMAIL_PASSWORD_RESET_BODY',			$data['sitename'],			$data['token'],			$data['link_text']		);		// Send the password reset request email.		$return = JFactory::getMailer()->sendMail($data['mailfrom'], $data['fromname'], $user->email, $subject, $body);		// Check for an error.		if ($return !== true)		{			return new JException(JText::_('COM_USERS_MAIL_FAILED'), 500);		}		return true;	}	/**	 * Method to check if user reset limit has been exceeded within the allowed time period.	 *	 * @param   JUser  the user doing the password reset	 *	 * @return  boolean true if user can do the reset, false if limit exceeded	 *	 * @since    2.5	 */	public function checkResetLimit($user)	{		$params = JFactory::getApplication()->getParams();		$maxCount = (int) $params->get('reset_count');		$resetHours = (int) $params->get('reset_time');		$result = true;		$lastResetTime = strtotime($user->lastResetTime) ? strtotime($user->lastResetTime) : 0;		$hoursSinceLastReset = (strtotime(JFactory::getDate()->toSql()) - $lastResetTime) / 3600;		// If it's been long enough, start a new reset count		if ($hoursSinceLastReset > $resetHours)		{			$user->lastResetTime = JFactory::getDate()->toSql();			$user->resetCount = 1;		}		// If we are under the max count, just increment the counter		elseif ($user->resetCount < $maxCount)		{			$user->resetCount;		}		// At this point, we know we have exceeded the maximum resets for the time period		else		{			$result = false;		}		return $result;	}}
<?php/** * @package     Joomla.Administrator * @subpackage  mod_login * * @copyright   Copyright (C) 2005 - 2013 Open Source Matters, Inc. All rights reserved. * @license     GNU General Public License version 2 or later; see LICENSE.txt */defined('_JEXEC') or die;/** * Helper for mod_login * * @package     Joomla.Administrator * @subpackage  mod_login * @since       1.6 */abstract class ModLoginHelper{	/**	 * Get an HTML select list of the available languages.	 *	 * @return  string	 */	public static function getLanguageList()	{		$languages = JLanguageHelper::createLanguageList(null, JPATH_ADMINISTRATOR, false, true);		array_unshift($languages, JHtml::_('select.option', '', JText::_('JDEFAULTLANGUAGE')));		return JHtml::_('select.genericlist', $languages, 'lang', ' class="inputbox advancedSelect"', 'value', 'text', null);	}	/**	 * Get the redirect URI after login.	 *	 * @return  string	 */	public static function getReturnURI()	{		$uri    = JUri::getInstance();		$return = 'index.php' . $uri->toString(array('query'));		if ($return != 'index.php?option=com_login')		{			return base64_encode($return);		}		else		{			return base64_encode('index.php');		}	}}
<?php/** * @package     Joomla.Platform * @subpackage  Facebook * * @copyright   Copyright (C) 2005 - 2012 Open Source Matters, Inc. All rights reserved. * @license     GNU General Public License version 2 or later; see LICENSE */defined('JPATH_PLATFORM') or die();/** * Facebook API Link class for the Joomla Platform. * * @package     Joomla.Platform * @subpackage  Facebook * * @see         http://developers.facebook.com/docs/reference/api/link/ * @since       13.1 */class JFacebookLink extends JFacebookObject{	/**	 * Method to get a link. Requires authentication and read_stream permission for non-public links.	 *	 * @param   string  $link  The link id.	 *	 * @return  mixed   The decoded JSON response or false if the client is not authenticated.	 *	 * @since   13.1	 */	public function getLink($link)	{		return $this->get($link);	}	/**	 * Method to get a link's comments. Requires authentication and read_stream permission for non-public links.	 *	 * @param   string   $link    The link id.	 * @param   integer  $limit   The number of objects per page.	 * @param   integer  $offset  The object's number on the page.	 * @param   string   $until   A unix timestamp or any date accepted by strtotime.	 * @param   string   $since   A unix timestamp or any date accepted by strtotime.	 *	 * @return  mixed   The decoded JSON response or false if the client is not authenticated.	 *	 * @since   13.1	 */	public function getComments($link, $limit = 0, $offset = 0, $until = null, $since = null)	{		return $this->getConnection($link, 'comments', '', $limit, $offset, $until, $since);	}	/**	 * Method to comment on a link. Requires authentication and publish_stream permission.	 *	 * @param   string  $link     The link id.	 * @param   string  $message  The comment's text.	 *	 * @return  mixed   The decoded JSON response or false if the client is not authenticated.	 *	 * @since   13.1	 */	public function createComment($link, $message)	{		// Set POST request parameters.		$data = array();		$data['message'] = $message;		return $this->createConnection($link, 'comments', $data);	}	/**	 * Method to delete a comment. Requires authentication and publish_stream permission.	 *	 * @param   string  $comment  The comment's id.	 *	 * @return  mixed   The decoded JSON response or false if the client is not authenticated.	 *	 * @since   13.1	 */	public function deleteComment($comment)	{		return $this->deleteConnection($comment);	}	/**	 * Method to get link's likes. Requires authentication and read_stream permission for non-public links.	 *	 * @param   string   $link    The link id.	 * @param   integer  $limit   The number of objects per page.	 * @param   integer  $offset  The object's number on the page.	 * @param   string   $until   A unix timestamp or any date accepted by strtotime.	 * @param   string   $since   A unix timestamp or any date accepted by strtotime.	 *	 * @return  mixed   The decoded JSON response or false if the client is not authenticated.	 *	 * @since   13.1	 */	public function getLikes($link, $limit = 0, $offset = 0, $until = null, $since = null)	{		return $this->getConnection($link, 'likes', '', $limit, $offset, $until, $since);	}	/**	 * Method to like a link. Requires authentication and publish_stream permission.	 *	 * @param   string  $link  The link id.	 *	 * @return  boolean Returns true if successful, and false otherwise.	 *	 * @since   13.1	 */	public function createLike($link)	{		return $this->createConnection($link, 'likes');	}	/**	 * Method to unlike a link. Requires authentication and publish_stream permission.	 *	 * @param   string  $link  The link id.	 *	 * @return  boolean Returns true if successful, and false otherwise.	 *	 * @since   13.1	 */	public function deleteLike($link)	{		return $this->deleteConnection($link, 'likes');	}}
<?php/** * @package     Joomla.Administrator * @subpackage  Template.hathor * * @copyright   Copyright (C) 2005 - 2013 Open Source Matters, Inc. All rights reserved. * @license     GNU General Public License version 2 or later; see LICENSE.txt */defined('_JEXEC') or die;// Include the component HTML helpers.JHtml::addIncludePath(JPATH_COMPONENT.'/helpers/html');// Load the tooltip behavior.JHtml::_('behavior.tooltip');JHtml::_('behavior.formvalidation');// Get the form fieldsets.$fieldsets = $this->form->getFieldsets();?><script type="text/javascript">	Joomla.submitbutton = function(task)	{		if (task == 'profile.cancel' || document.formvalidator.isValid(document.id('profile-form')))		{			Joomla.submitform(task, document.getElementById('profile-form'));		}	}</script><form action="<?php echo JRoute::_('index.php?option=com_admin&view=profile&layout=edit&id='.$this->item->id); ?>" method="post" name="adminForm" id="profile-form" class="form-validate" enctype="multipart/form-data">	<div class="col main-section">		<fieldset class="adminform">			<legend><?php echo JText::_('COM_ADMIN_USER_ACCOUNT_DETAILS'); ?></legend>			<ul class="adminformlist">			<?php foreach ($this->form->getFieldset('user_details') as $field) : ?>				<li><?php echo $field->label; ?>				<?php echo $field->input; ?></li>			<?php endforeach; ?>			</ul>		</fieldset>	</div>	<div class="col options-section">		<?php		echo JHtml::_('sliders.start');		foreach ($fieldsets as $fieldset) :			if ($fieldset->name == 'user_details') :				continue;			endif;			echo JHtml::_('sliders.panel', JText::_($fieldset->label), $fieldset->name);		?>		<fieldset class="panelform">		<legend class="element-invisible"><?php echo JText::_($fieldset->label); ?></legend>		<ul class="adminformlist">		<?php foreach ($this->form->getFieldset($fieldset->name) as $field) : ?>			<?php if ($field->hidden) : ?>				<?php echo $field->input; ?>			<?php else: ?>				<li><?php echo $field->label; ?>				<?php echo $field->input; ?></li>			<?php endif; ?>		<?php endforeach; ?>		</ul>		</fieldset>		<?php endforeach; ?>		<?php echo JHtml::_('sliders.end'); ?>		<input type="hidden" name="task" value="" />		<?php echo JHtml::_('form.token'); ?>	</div></form>
<?php/** * @package     Joomla.Platform * @subpackage  HTML * * @copyright   Copyright (C) 2005 - 2013 Open Source Matters, Inc. All rights reserved. * @license     GNU General Public License version 2 or later; see LICENSE */defined('JPATH_PLATFORM') or die;/** * Extended Utility class for all HTML drawing classes. * * @package     Joomla.Platform * @subpackage  HTML * @since       11.1 */abstract class JHtmlAccess{	/**	 * A cached array of the asset groups	 *	 * @var    array	 * @since  11.1	 */	protected static $asset_groups = null;	/**	 * Displays a list of the available access view levels	 *	 * @param   string  $name      The form field name.	 * @param   string  $selected  The name of the selected section.	 * @param   string  $attribs   Additional attributes to add to the select field.	 * @param   mixed   $params    True to add "All Sections" option or and array of options	 * @param   string  $id        The form field id	 *	 * @return  string  The required HTML for the SELECT tag.	 *	 * @since  11.1	 *	 * @see    JFormFieldAccessLevel	 */	public static function level($name, $selected, $attribs = '', $params = true, $id = false)	{		$db = JFactory::getDbo();		$query = $db->getQuery(true)			->select('a.id AS value, a.title AS text')			->from('#__viewlevels AS a')			->group('a.id, a.title, a.ordering')			->order('a.ordering ASC')			->order($db->quoteName('title') . ' ASC');		// Get the options.		$db->setQuery($query);		$options = $db->loadObjectList();		// If params is an array, push these options to the array		if (is_array($params))		{			$options = array_merge($params, $options);		}		// If all levels is allowed, push it into the array.		elseif ($params)		{			array_unshift($options, JHtml::_('select.option', '', JText::_('JOPTION_ACCESS_SHOW_ALL_LEVELS')));		}		return JHtml::_(			'select.genericlist',			$options,			$name,			array(				'list.attr' => $attribs,				'list.select' => $selected,				'id' => $id			)		);	}	/**	 * Displays a list of the available user groups.	 *	 * @param   string   $name      The form field name.	 * @param   string   $selected  The name of the selected section.	 * @param   string   $attribs   Additional attributes to add to the select field.	 * @param   boolean  $allowAll  True to add "All Groups" option.	 *	 * @return  string   The required HTML for the SELECT tag.	 *	 * @see     JFormFieldUsergroup	 *	 * @since   11.1	 */	public static function usergroup($name, $selected, $attribs = '', $allowAll = true)	{		$db = JFactory::getDbo();		$query = $db->getQuery(true)			->select('a.id AS value, a.title AS text, COUNT(DISTINCT b.id) AS level')			->from($db->quoteName('#__usergroups') . ' AS a')			->join('LEFT', $db->quoteName('#__usergroups') . ' AS b ON a.lft > b.lft AND a.rgt < b.rgt')			->group('a.id, a.title, a.lft, a.rgt')			->order('a.lft ASC');		$db->setQuery($query);		$options = $db->loadObjectList();		for ($i = 0, $n = count($options); $i < $n; $i++)		{			$options[$i]->text = str_repeat('- ', $options[$i]->level) . $options[$i]->text;		}		// If all usergroups is allowed, push it into the array.		if ($allowAll)		{			array_unshift($options, JHtml::_('select.option', '', JText::_('JOPTION_ACCESS_SHOW_ALL_GROUPS')));		}		return JHtml::_('select.genericlist', $options, $name, array('list.attr' => $attribs, 'list.select' => $selected));	}	/**	 * Returns a UL list of user groups with check boxes	 *	 * @param   string   $name             The name of the checkbox controls array	 * @param   array    $selected         An array of the checked boxes	 * @param   boolean  $checkSuperAdmin  If false only super admins can add to super admin groups	 *	 * @return  string	 *	 * @since   11.1	 */	public static function usergroups($name, $selected, $checkSuperAdmin = false)	{		static $count;		$count++;		$isSuperAdmin = JFactory::getUser()->authorise('core.admin');		$db = JFactory::getDbo();		$query = $db->getQuery(true)			->select('a.*, COUNT(DISTINCT b.id) AS level')			->from($db->quoteName('#__usergroups') . ' AS a')			->join('LEFT', $db->quoteName('#__usergroups') . ' AS b ON a.lft > b.lft AND a.rgt < b.rgt')			->group('a.id, a.title, a.lft, a.rgt, a.parent_id')			->order('a.lft ASC');		$db->setQuery($query);		$groups = $db->loadObjectList();		$html = array();		for ($i = 0, $n = count($groups); $i < $n; $i++)		{			$item = &$groups[$i];			// If checkSuperAdmin is true, only add item if the user is superadmin or the group is not super admin			if ((!$checkSuperAdmin) || $isSuperAdmin || (!JAccess::checkGroup($item->id, 'core.admin')))			{				// Setup  the variable attributes.				$eid = $count . 'group_' . $item->id;				// Don't call in_array unless something is selected				$checked = '';				if ($selected)				{					$checked = in_array($item->id, $selected) ? ' checked="checked"' : '';				}				$rel = ($item->parent_id > 0) ? ' rel="' . $count . 'group_' . $item->parent_id . '"' : '';				// Build the HTML for the item.				$html[] = '	<div class="control-group">';				$html[] = '		<div class="controls">';				$html[] = '			<label class="checkbox" for="' . $eid . '">';				$html[] = '			<input type="checkbox" name="' . $name . '[]" value="' . $item->id . '" id="' . $eid . '"';				$html[] = '					' . $checked . $rel . ' />';				$html[] = '			' . str_repeat('<span class="gi">|&mdash;</span>', $item->level) . $item->title;				$html[] = '			</label>';				$html[] = '		</div>';				$html[] = '	</div>';			}		}		return implode("\n", $html);	}	/**	 * Returns a UL list of actions with check boxes	 *	 * @param   string  $name       The name of the checkbox controls array	 * @param   array   $selected   An array of the checked boxes	 * @param   string  $component  The component the permissions apply to	 * @param   string  $section    The section (within a component) the permissions apply to	 *	 * @return  string	 *	 * @see     JAccess	 * @since   11.1	 */	public static function actions($name, $selected, $component, $section = 'global')	{		static $count;		$count++;		$actions = JAccess::getActionsFromFile(			JPATH_ADMINISTRATOR . '/components/' . $component . '/access.xml',			"/access/section[@name='" . $section . "']/"		);		$html = array();		$html[] = '<ul class="checklist access-actions">';		for ($i = 0, $n = count($actions); $i < $n; $i++)		{			$item = &$actions[$i];			// Setup  the variable attributes.			$eid = $count . 'action_' . $item->id;			$checked = in_array($item->id, $selected) ? ' checked="checked"' : '';			// Build the HTML for the item.			$html[] = '	<li>';			$html[] = '		<input type="checkbox" name="' . $name . '[]" value="' . $item->id . '" id="' . $eid . '"';			$html[] = '			' . $checked . ' />';			$html[] = '		<label for="' . $eid . '">';			$html[] = '			' . JText::_($item->title);			$html[] = '		</label>';			$html[] = '	</li>';		}		$html[] = '</ul>';		return implode("\n", $html);	}	/**	 * Gets a list of the asset groups as an array of JHtml compatible options.	 *	 * @return  mixed  An array or false if an error occurs	 *	 * @since   11.1	 */	public static function assetgroups()	{		if (empty(self::$asset_groups))		{			$db = JFactory::getDbo();			$query = $db->getQuery(true)				->select('a.id AS value, a.title AS text')				->from($db->quoteName('#__viewlevels') . ' AS a')				->group('a.id, a.title, a.ordering')				->order('a.ordering ASC');			$db->setQuery($query);			self::$asset_groups = $db->loadObjectList();		}		return self::$asset_groups;	}	/**	 * Displays a Select list of the available asset groups	 *	 * @param   string  $name      The name of the select element	 * @param   mixed   $selected  The selected asset group id	 * @param   string  $attribs   Optional attributes for the select field	 * @param   array   $config    An array of options for the control	 *	 * @return  mixed  An HTML string or null if an error occurs	 *	 * @since   11.1	 */	public static function assetgrouplist($name, $selected, $attribs = null, $config = array())	{		static $count;		$options = self::assetgroups();		if (isset($config['title']))		{			array_unshift($options, JHtml::_('select.option', '', $config['title']));		}		return JHtml::_(			'select.genericlist',			$options,			$name,			array(				'id' => isset($config['id']) ? $config['id'] : 'assetgroups_' . (++$count),				'list.attr' => (is_null($attribs) ? 'class="inputbox" size="3"' : $attribs),				'list.select' => (int) $selected			)		);	}}
<?php/** * @package     Joomla.Site * @subpackage  com_content * * @copyright   Copyright (C) 2005 - 2013 Open Source Matters, Inc. All rights reserved. * @license     GNU General Public License version 2 or later; see LICENSE.txt */defined('_JEXEC') or die;/** * Content Component Route Helper * * @static * @package     Joomla.Site * @subpackage  com_content * @since       1.5 */abstract class ContentHelperRoute{	protected static $lookup = array();	/**	 * @param   integer  The route of the content item	 */	public static function getArticleRoute($id, $catid = 0, $language = 0)	{		$needles = array(			'article'  => array((int) $id)		);		//Create the link		$link = 'index.php?option=com_content&view=article&id='. $id;		if ((int) $catid > 1)		{			$categories = JCategories::getInstance('Content');			$category = $categories->get((int) $catid);			if ($category)			{				$needles['category'] = array_reverse($category->getPath());				$needles['categories'] = $needles['category'];				$link .= '&catid='.$catid;			}		}		if ($language && $language != "*" && JLanguageMultilang::isEnabled())		{			$db		= JFactory::getDbo();			$query	= $db->getQuery(true)				->select('a.sef AS sef')				->select('a.lang_code AS lang_code')				->from('#__languages AS a');			$db->setQuery($query);			$langs = $db->loadObjectList();			foreach ($langs as $lang)			{				if ($language == $lang->lang_code)				{					$link .= '&lang='.$lang->sef;					$needles['language'] = $language;				}			}		}		if ($item = self::_findItem($needles))		{			$link .= '&Itemid='.$item;		}		elseif ($item = self::_findItem())		{			$link .= '&Itemid='.$item;		}		return $link;	}	public static function getCategoryRoute($catid, $language = 0)	{		if ($catid instanceof JCategoryNode)		{			$id = $catid->id;			$category = $catid;		}		else		{			$id = (int) $catid;			$category = JCategories::getInstance('Content')->get($id);		}		if ($id < 1)		{			$link = '';		}		else		{			$link = 'index.php?option=com_content&view=category&id='.$id;			$needles = array(				'category' => array($id)			);			if ($language && $language != "*" && JLanguageMultilang::isEnabled())			{				$db		= JFactory::getDbo();				$query	= $db->getQuery(true)					->select('a.sef AS sef')					->select('a.lang_code AS lang_code')					->from('#__languages AS a');				$db->setQuery($query);				$langs = $db->loadObjectList();				foreach ($langs as $lang)				{					if ($language == $lang->lang_code)					{						$link .= '&lang='.$lang->sef;						$needles['language'] = $language;					}				}			}			if ($item = self::_findItem($needles))			{				$link .= '&Itemid='.$item;			}			else			{				//Create the link				if ($category)				{					$catids = array_reverse($category->getPath());					$needles['category'] = $catids;					$needles['categories'] = $catids;					if ($item = self::_findItem($needles))					{						$link .= '&Itemid='.$item;					}					elseif ($item = self::_findItem())					{						$link .= '&Itemid='.$item;					}				}			}		}		return $link;	}	public static function getFormRoute($id)	{		//Create the link		if ($id)		{			$link = 'index.php?option=com_content&task=article.edit&a_id='. $id;		}		else		{			$link = 'index.php?option=com_content&task=article.edit&a_id=0';		}		return $link;	}	protected static function _findItem($needles = null)	{		$app		= JFactory::getApplication();		$menus		= $app->getMenu('site');		$language	= isset($needles['language']) ? $needles['language'] : '*';		// Prepare the reverse lookup array.		if (!isset(self::$lookup[$language]))		{			self::$lookup[$language] = array();			$component	= JComponentHelper::getComponent('com_content');			$attributes = array('component_id');			$values = array($component->id);			if ($language != '*')			{				$attributes[] = 'language';				$values[] = array($needles['language'], '*');			}			$items		= $menus->getItems($attributes, $values);			foreach ($items as $item)			{				if (isset($item->query) && isset($item->query['view']))				{					$view = $item->query['view'];					if (!isset(self::$lookup[$language][$view]))					{						self::$lookup[$language][$view] = array();					}					if (isset($item->query['id'])) {						// here it will become a bit tricky						// language != * can override existing entries						// language == * cannot override existing entries						if (!isset(self::$lookup[$language][$view][$item->query['id']]) || $item->language != '*')						{							self::$lookup[$language][$view][$item->query['id']] = $item->id;						}					}				}			}		}		if ($needles)		{			foreach ($needles as $view => $ids)			{				if (isset(self::$lookup[$language][$view]))				{					foreach ($ids as $id)					{						if (isset(self::$lookup[$language][$view][(int) $id]))						{							return self::$lookup[$language][$view][(int) $id];						}					}				}			}		}		$active = $menus->getActive();		if ($active && $active->component == 'com_content' && ($active->language == '*' || !JLanguageMultilang::isEnabled()))		{			return $active->id;		}		// if not found, return language specific home link		$default = $menus->getDefault($language);		return !empty($default->id) ? $default->id : null;	}}
<?php/** * @package     Joomla.Platform * @subpackage  Facebook * * @copyright   Copyright (C) 2005 - 2012 Open Source Matters, Inc. All rights reserved. * @license     GNU General Public License version 2 or later; see LICENSE */defined('JPATH_PLATFORM') or die();/** * Facebook API Comment class for the Joomla Platform. * * @package     Joomla.Platform * @subpackage  Facebook * * @see         http://developers.facebook.com/docs/reference/api/Comment/ * @since       13.1 */class JFacebookComment extends JFacebookObject{	/**	 * Method to get a comment. Requires authentication.	 *	 * @param   string  $comment  The comment id.	 *	 * @return  mixed   The decoded JSON response or false if the client is not authenticated.	 *	 * @since   13.1	 */	public function getComment($comment)	{		return $this->get($comment);	}	/**	 * Method to delete a comment. Requires authentication and publish_stream permission.	 *	 * @param   string  $comment  The comment id.	 *	 * @return  boolean Returns true if successful, and false otherwise.	 *	 * @since   13.1	 */	public function deleteComment($comment)	{		return $this->deleteConnection($comment);	}	/**	 * Method to get a comment's comments. Requires authentication.	 *	 * @param   string   $comment  The comment id.	 * @param   integer  $limit    The number of objects per page.	 * @param   integer  $offset   The object's number on the page.	 * @param   string   $until    A unix timestamp or any date accepted by strtotime.	 * @param   string   $since    A unix timestamp or any date accepted by strtotime.	 *	 * @return  mixed   The decoded JSON response or false if the client is not authenticated.	 *	 * @since   13.1	 */	public function getComments($comment, $limit=0, $offset=0, $until=null, $since=null)	{		return $this->getConnection($comment, 'comments', '', $limit, $offset, $until, $since);	}	/**	 * Method to comment on a comment. Requires authentication with publish_stream permission.	 *	 * @param   string  $comment  The comment id.	 * @param   string  $message  The comment's text.	 *	 * @return  mixed   The decoded JSON response or false if the client is not authenticated.	 *	 * @since   13.1	 */	public function createComment($comment, $message)	{		// Set POST request parameters.		$data = array();		$data['message'] = $message;		return $this->createConnection($comment, 'comments', $data);	}	/**	 * Method to get comment's likes. Requires authentication.	 *	 * @param   string   $comment  The comment id.	 * @param   integer  $limit    The number of objects per page.	 * @param   integer  $offset   The object's number on the page.	 * @param   string   $until    A unix timestamp or any date accepted by strtotime.	 * @param   string   $since    A unix timestamp or any date accepted by strtotime.	 *	 * @return  mixed   The decoded JSON response or false if the client is not authenticated.	 *	 * @since   13.1	 */	public function getLikes($comment, $limit=0, $offset=0, $until=null, $since=null)	{		return $this->getConnection($comment, 'likes', '', $limit, $offset, $until, $since);	}	/**	 * Method to like a comment. Requires authentication and publish_stram permission.	 *	 * @param   string  $comment  The comment id.	 *	 * @return  boolean Returns true if successful, and false otherwise.	 *	 * @since   13.1	 */	public function createLike($comment)	{		return $this->createConnection($comment, 'likes');	}	/**	 * Method to unlike a comment. Requires authentication and publish_stram permission.	 *	 * @param   string  $comment  The comment id.	 *	 * @return  boolean Returns true if successful, and false otherwise.	 *	 * @since   13.1	 */	public function deleteLike($comment)	{		return $this->deleteConnection($comment, 'likes');	}}
<?php/** * @package     Joomla.Platform * @subpackage  Form * * @copyright   Copyright (C) 2005 - 2013 Open Source Matters, Inc. All rights reserved. * @license     GNU General Public License version 2 or later; see LICENSE */defined('JPATH_PLATFORM') or die;/** * Form Field class for the Joomla Platform. * Provides radio button inputs * * @package     Joomla.Platform * @subpackage  Form * @link        http://www.w3.org/TR/html-markup/command.radio.html#command.radio * @since       11.1 */class JFormFieldRadio extends JFormField{	/**	 * The form field type.	 *	 * @var    string	 * @since  11.1	 */	protected $type = 'Radio';	/**	 * Method to get the radio button field input markup.	 *	 * @return  string  The field input markup.	 *	 * @since   11.1	 */	protected function getInput()	{		$html = array();		// Initialize some field attributes.		$class = $this->element['class'] ? ' class="radio ' . (string) $this->element['class'] . '"' : ' class="radio"';		// Start the radio field output.		$html[] = '<fieldset id="' . $this->id . '"' . $class . '>';		// Get the field options.		$options = $this->getOptions();		// Build the radio field output.		foreach ($options as $i => $option)		{			// Initialize some option attributes.			$checked = ((string) $option->value == (string) $this->value) ? ' checked="checked"' : '';			$class = !empty($option->class) ? ' class="' . $option->class . '"' : '';			$disabled = !empty($option->disable) ? ' disabled="disabled"' : '';			$required = !empty($option->required) ? ' required="required" aria-required="true"' : '';			// Initialize some JavaScript option attributes.			$onclick = !empty($option->onclick) ? ' onclick="' . $option->onclick . '"' : '';			$html[] = '<input type="radio" id="' . $this->id . $i . '" name="' . $this->name . '" value="'				. htmlspecialchars($option->value, ENT_COMPAT, 'UTF-8') . '"' . $checked . $class . $onclick . $disabled . $required . '/>';			$html[] = '<label for="' . $this->id . $i . '"' . $class . '>'				. JText::alt($option->text, preg_replace('/[^a-zA-Z0-9_\-]/', '_', $this->fieldname)) . '</label>';		}		// End the radio field output.		$html[] = '</fieldset>';		return implode($html);	}	/**	 * Method to get the field options for radio buttons.	 *	 * @return  array  The field option objects.	 *	 * @since   11.1	 */	protected function getOptions()	{		$options = array();		foreach ($this->element->children() as $option)		{			// Only add <option /> elements.			if ($option->getName() != 'option')			{				continue;			}			// Create a new option object based on the <option /> element.			$tmp = JHtml::_(				'select.option', (string) $option['value'], trim((string) $option), 'value', 'text',				((string) $option['disabled'] == 'true')			);			// Set some option attributes.			$tmp->class = (string) $option['class'];			// Set some JavaScript option attributes.			$tmp->onclick = (string) $option['onclick'];			// Add the option object to the result set.			$options[] = $tmp;		}		reset($options);		return $options;	}}
<?php/** * @package     Joomla.Administrator * @subpackage  com_tags * * @copyright   Copyright (C) 2005 - 2013 Open Source Matters, Inc. All rights reserved. * @license     GNU General Public License version 2 or later; see LICENSE.txt */defined('_JEXEC') or die;/** * Tags table * * @package     Joomla.Administrator * @subpackage  com_tags * @since       3.1 */class TagsTableTag extends JTableNested{	/**	 * Constructor	 *	 * @param JDatabaseDriver A database connector object	 */	public function __construct($db)	{		parent::__construct('#__tags', 'id', $db);	}	/**	 * Overloaded bind function	 *	 * @param   array  $array   Named array	 * @param   mixed  $ignore  An optional array or space separated list of properties	 * to ignore while binding.	 *	 * @return  mixed  Null if operation was satisfactory, otherwise returns an error string	 *	 * @see     JTable::bind	 * @since   3.1	 */	public function bind($array, $ignore = '')	{		if (isset($array['params']) && is_array($array['params']))		{			$registry = new JRegistry;			$registry->loadArray($array['params']);			$array['params'] = (string) $registry;		}		if (isset($array['metadata']) && is_array($array['metadata']))		{			$registry = new JRegistry;			$registry->loadArray($array['metadata']);			$array['metadata'] = (string) $registry;		}		if (isset($array['urls']) && $array['urls'])		{			$registry = new JRegistry;			$registry->loadArray($array['urls']);			$array['urls'] = (string) $registry;		}		if (isset($array['images']) && is_array($array['images']))		{			$registry = new JRegistry;			$registry->loadArray($array['images']);			$array['images'] = (string) $registry;		}		return parent::bind($array, $ignore);	}	/**	 * Overloaded check method to ensure data integrity.	 *	 * @return  boolean  True on success.	 *	 * @since   3.1	 * @throws  UnexpectedValueException	 */	public function check()	{		// Check for valid name.		if (trim($this->title) == '')		{			throw new UnexpectedValueException(sprintf('The title is empty'));		}		if (empty($this->alias))		{			$this->alias = $this->title;		}		$this->alias = JApplication::stringURLSafe($this->alias);		if (trim(str_replace('-', '', $this->alias)) == '')		{			$this->alias = JFactory::getDate()->format("Y-m-d-H-i-s");		}		// Check the publish down date is not earlier than publish up.		if ((int) $this->publish_down > 0 && $this->publish_down < $this->publish_up)		{			throw new UnexpectedValueException(sprintf('End publish date is before start publish date.'));		}		// Clean up keywords -- eliminate extra spaces between phrases		// and cr (\r) and lf (\n) characters from string		if (!empty($this->metakey))		{			// Only process if not empty			// Define array of characters to remove			$bad_characters = array("\n", "\r", "\"", "<", ">");			// Remove bad characters			$after_clean = JString::str_ireplace($bad_characters, "", $this->metakey);			// Create array using commas as delimiter			$keys = explode(',', $after_clean);			$clean_keys = array();			foreach($keys as $key)			{				if (trim($key))				{					// Ignore blank keywords					$clean_keys[] = trim($key);				}			}			// Put array back together delimited by ", "			$this->metakey = implode(", ", $clean_keys);		}		// Clean up description -- eliminate quotes and <> brackets		if (!empty($this->metadesc)) {			// Only process if not empty			$bad_characters = array("\"", "<", ">");			$this->metadesc = JString::str_ireplace($bad_characters, "", $this->metadesc);		}		return true;	}	/**	 * Overriden JTable::store to set modified data and user id.	 *	 * @param   boolean  $updateNulls  True to update fields even if they are null.	 *	 * @return  boolean  True on success.	 *	 * @since   3.1	 */	public function store($updateNulls = false)	{		$date	= JFactory::getDate();		$user	= JFactory::getUser();		if ($this->id) {			// Existing item			$this->modified_time		= $date->toSql();			$this->modified_user_id	= $user->get('id');		}		else		{			// New tag. A tag created and created_by field can be set by the user,			// so we don't touch either of these if they are set.			if (!(int) $this->created_time) {				$this->created_time = $date->toSql();			}			if (empty($this->created_user_id)) {				$this->created_user_id = $user->get('id');			}		}		// Verify that the alias is unique		$table = JTable::getInstance('Tag', 'TagsTable');		if ($table->load(array('alias' => $this->alias)) && ($table->id != $this->id || $this->id == 0))		{			$this->setError(JText::_('COM_TAGS_ERROR_UNIQUE_ALIAS'));			return false;		}		return parent::store($updateNulls);	}	/**	 * Method to delete a node and, optionally, its child nodes from the table.	 *	 * @param   integer  $pk        The primary key of the node to delete.	 * @param   boolean  $children  True to delete child nodes, false to move them up a level.	 *	 * @return  boolean  True on success.	 *	 * @since   3.1	 * @see     http://docs.joomla.org/JTableNested/delete	 */	public function delete($pk = null, $children = false)	{		return parent::delete($pk, $children);		$helper = new JHelperTags;		$helper->tagDeleteInstances($pk);	}}
<?php/** * @package     Joomla.Administrator * @subpackage  Templates.protostar * * @copyright   Copyright (C) 2005 - 2013 Open Source Matters, Inc. All rights reserved. * @license     GNU General Public License version 2 or later; see LICENSE.txt */defined('_JEXEC') or die;$app   = JFactory::getApplication();$doc   = JFactory::getDocument();$this->language = $doc->language;$this->direction = $doc->direction;// Add JavaScript FrameworksJHtml::_('bootstrap.framework');// Add Stylesheets$doc->addStyleSheet('templates/'.$this->template.'/css/template.css');// Load optional rtl Bootstrap css and Bootstrap bugfixesJHtmlBootstrap::loadCss($includeMaincss = false, $this->direction);?><!DOCTYPE html><html xmlns="http://www.w3.org/1999/xhtml" xml:lang="<?php echo $this->language; ?>" lang="<?php echo $this->language; ?>" dir="<?php echo $this->direction; ?>"><head><jdoc:include type="head" /><!--[if lt IE 9]>	<script src="<?php echo $this->baseurl ?>/media/jui/js/html5.js"></script><![endif]--></head><body class="contentpane modal">	<jdoc:include type="message" />	<jdoc:include type="component" /></body></html>
<?php/** * @package     Joomla.Site * @subpackage  com_content * * @copyright   Copyright (C) 2005 - 2013 Open Source Matters, Inc. All rights reserved. * @license     GNU General Public License version 2 or later; see LICENSE.txt */defined('_JEXEC') or die;JHtml::addIncludePath(JPATH_COMPONENT.'/helpers/html');JHtml::_('behavior.tooltip');JHtml::_('behavior.framework');// Create some shortcuts.$params		= &$this->item->params;$n			= count($this->items);$listOrder	= $this->escape($this->state->get('list.ordering'));$listDirn	= $this->escape($this->state->get('list.direction'));// check for at least one editable article$isEditable = false;if (!empty($this->items)){	foreach ($this->items as $article)	{		if ($article->params->get('access-edit'))		{			$isEditable = true;			break;		}	}}?><?php if (empty($this->items)) : ?>	<?php if ($this->params->get('show_no_articles', 1)) : ?>	<p><?php echo JText::_('COM_CONTENT_NO_ARTICLES'); ?></p>	<?php endif; ?><?php else : ?><form action="<?php echo htmlspecialchars(JUri::getInstance()->toString()); ?>" method="post" name="adminForm" id="adminForm" class="form-inline">	<?php if ($this->params->get('show_headings') || $this->params->get('filter_field') != 'hide' || $this->params->get('show_pagination_limit')) :?>	<fieldset class="filters btn-toolbar">		<?php if ($this->params->get('filter_field') != 'hide') :?>			<div class="btn-group">				<label class="filter-search-lbl element-invisible" for="filter-search">					<?php echo JText::_('COM_CONTENT_'.$this->params->get('filter_field').'_FILTER_LABEL').'&#160;'; ?>				</label>				<input type="text" name="filter-search" id="filter-search" value="<?php echo $this->escape($this->state->get('list.filter')); ?>" class="inputbox" onchange="document.adminForm.submit();" title="<?php echo JText::_('COM_CONTENT_FILTER_SEARCH_DESC'); ?>" placeholder="<?php echo JText::_('COM_CONTENT_'.$this->params->get('filter_field').'_FILTER_LABEL'); ?>" />			</div>		<?php endif; ?>		<?php if ($this->params->get('show_pagination_limit')) : ?>			<div class="btn-group pull-right">				<label for="limit" class="element-invisible">					<?php echo JText::_('JGLOBAL_DISPLAY_NUM'); ?>				</label>				<?php echo $this->pagination->getLimitBox(); ?>			</div>		<?php endif; ?>		<input type="hidden" name="filter_order" value="" />		<input type="hidden" name="filter_order_Dir" value="" />		<input type="hidden" name="limitstart" value="" />		<input type="hidden" name="task" value="" />		<div class="clearfix"></div>	</fieldset>	<?php endif; ?>	<table class="category table table-striped table-bordered table-hover">		<?php if ($this->params->get('show_headings')) : ?>		<thead>			<tr>				<th id="categorylist_header_title">					<?php echo JHtml::_('grid.sort', 'JGLOBAL_TITLE', 'a.title', $listDirn, $listOrder); ?>				</th>				<?php if ($date = $this->params->get('list_show_date')) : ?>					<th id="categorylist_header_date">						<?php if ($date == "created") : ?>							<?php echo JHtml::_('grid.sort', 'COM_CONTENT_'.$date.'_DATE', 'a.created', $listDirn, $listOrder); ?>						<?php elseif ($date == "modified") : ?>							<?php echo JHtml::_('grid.sort', 'COM_CONTENT_'.$date.'_DATE', 'a.modified', $listDirn, $listOrder); ?>						<?php elseif ($date == "published") : ?>							<?php echo JHtml::_('grid.sort', 'COM_CONTENT_'.$date.'_DATE', 'a.publish_up', $listDirn, $listOrder); ?>						<?php endif; ?>					</th>				<?php endif; ?>				<?php if ($this->params->get('list_show_author')) : ?>					<th id="categorylist_header_author">						<?php echo JHtml::_('grid.sort', 'JAUTHOR', 'author', $listDirn, $listOrder); ?>					</th>				<?php endif; ?>				<?php if ($this->params->get('list_show_hits')) : ?>					<th id="categorylist_header_hits">						<?php echo JHtml::_('grid.sort', 'JGLOBAL_HITS', 'a.hits', $listDirn, $listOrder); ?>					</th>				<?php endif; ?>				<?php if ($isEditable) : ?>					<th id="categorylist_header_edit"><?php echo JText::_('COM_CONTENT_EDIT_ITEM'); ?></th>				<?php endif; ?>			</tr>		</thead>		<?php endif; ?>		<tbody>			<?php foreach ($this->items as $i => $article) : ?>				<?php if ($this->items[$i]->state == 0) : ?>				 <tr class="system-unpublished cat-list-row<?php echo $i % 2; ?>">				<?php else: ?>				<tr class="cat-list-row<?php echo $i % 2; ?>" >				<?php endif; ?>					<td headers="categorylist_header_title" class="list-title">						<?php if (in_array($article->access, $this->user->getAuthorisedViewLevels())) : ?>							<a href="<?php echo JRoute::_(ContentHelperRoute::getArticleRoute($article->slug, $article->catid)); ?>">								<?php echo $this->escape($article->title); ?>							</a>						<?php else: ?>							<?php							echo $this->escape($article->title).' : ';							$menu		= JFactory::getApplication()->getMenu();							$active		= $menu->getActive();							$itemId		= $active->id;							$link = JRoute::_('index.php?option=com_users&view=login&Itemid='.$itemId);							$returnURL = JRoute::_(ContentHelperRoute::getArticleRoute($article->slug));							$fullURL = new JURI($link);							$fullURL->setVar('return', base64_encode($returnURL));							?>							<a href="<?php echo $fullURL; ?>" class="register">								<?php echo JText::_('COM_CONTENT_REGISTER_TO_READ_MORE'); ?>							</a>						<?php endif; ?>						<?php if ($article->state == 0) : ?>							<span class="list-published label label-warning">								<?php echo JText::_('JUNPUBLISHED'); ?>							</span>						<?php endif; ?>					</td>					<?php if ($this->params->get('list_show_date')) : ?>						<td headers="categorylist_header_date" class="list-date small">							<?php							echo JHtml::_(								'date', $article->displayDate,								$this->escape($this->params->get('date_format', JText::_('DATE_FORMAT_LC3')))							); ?>						</td>					<?php endif; ?>					<?php if ($this->params->get('list_show_author', 1)) : ?>						<td headers="categorylist_header_author" class="list-author">							<?php if (!empty($article->author) || !empty($article->created_by_alias)) : ?>								<?php $author = $article->author ?>								<?php $author = ($article->created_by_alias ? $article->created_by_alias : $author);?>								<?php if (!empty($article->contactid ) &&  $this->params->get('link_author') == true):?>									<?php echo JHtml::_(											'link',											JRoute::_('index.php?option=com_contact&view=contact&id='.$article->contactid),											$author									); ?>								<?php else :?>									<?php echo JText::sprintf('COM_CONTENT_WRITTEN_BY', $author); ?>								<?php endif; ?>							<?php endif; ?>						</td>					<?php endif; ?>					<?php if ($this->params->get('list_show_hits', 1)) : ?>						<td headers="categorylist_header_hits" class="list-hits">							<span class="badge badge-info">								<?php echo JText::sprintf('JGLOBAL_HITS_COUNT', $article->hits); ?>							</span>						</td>					<?php endif; ?>					<?php if ($isEditable) : ?>						<td headers="categorylist_header_edit" class="list-edit">							<?php if ($article->params->get('access-edit')) : ?>								<?php echo JHtml::_('icon.edit', $article, $params); ?>							<?php endif; ?>						</td>					<?php endif; ?>				</tr>			<?php endforeach; ?>		</tbody>	</table><?php endif; ?><?php // Code to add a link to submit an article. ?><?php if ($this->category->getParams()->get('access-create')) : ?>	<?php echo JHtml::_('icon.create', $this->category, $this->category->params); ?><?php  endif; ?><?php // Add pagination links ?><?php if (!empty($this->items)) : ?>	<?php if (($this->params->def('show_pagination', 2) == 1  || ($this->params->get('show_pagination') == 2)) && ($this->pagination->pagesTotal > 1)) : ?>	<div class="pagination">		<?php if ($this->params->def('show_pagination_results', 1)) : ?>			<p class="counter pull-right">				<?php echo $this->pagination->getPagesCounter(); ?>			</p>		<?php endif; ?>		<?php echo $this->pagination->getPagesLinks(); ?>	</div>	<?php endif; ?></form><?php  endif; ?>
<?php/** * @package     Joomla.Administrator * @subpackage  com_modules * * @copyright   Copyright (C) 2005 - 2013 Open Source Matters, Inc. All rights reserved. * @license     GNU General Public License version 2 or later; see LICENSE.txt */defined('_JEXEC') or die;JHtml::addIncludePath(JPATH_COMPONENT.'/helpers/html');JHtml::_('behavior.tooltip');JHtml::_('bootstrap.popover');$document = JFactory::getDocument();?><h2><?php echo JText::_('COM_MODULES_TYPE_CHOOSE')?></h2><ul id="new-modules-list" class="list list-striped"><?php foreach ($this->items as &$item) : ?>	<?php		// Prepare variables for the link.		$link	= 'index.php?option=com_modules&task=module.add&eid='. $item->extension_id;		$name	= $this->escape($item->name);		$desc	= JHTML::_('string.truncate', ($this->escape($item->desc)), 200);		$short_desc	= JHTML::_('string.truncate', ($this->escape($item->desc)), 90);	?>	<?php if ($document->direction != "rtl") : ?>	<li>		<a href="<?php echo JRoute::_($link);?>">			<strong><?php echo $name; ?></strong>		</a>		<small class="hasPopover" data-placement="right" title="<?php echo $name; ?>" data-content="<?php echo $desc; ?>"><?php echo $short_desc; ?></small>	</li>	<?php else : ?>	<li>		<small rel="popover" data-placement="left" title="<?php echo $name; ?>" data-content="<?php echo $desc; ?>"><?php echo $short_desc; ?></small>		<a href="<?php echo JRoute::_($link);?>">			<strong><?php echo $name; ?></strong>		</a>	</li>	<?php endif?><?php endforeach; ?></ul><div class="clr"></div>
<?php/** * @package     Joomla.Site * @subpackage  com_contact * * @copyright   Copyright (C) 2005 - 2013 Open Source Matters, Inc. All rights reserved. * @license     GNU General Public License version 2 or later; see LICENSE.txt */defined('_JEXEC') or die;/** * @package     Joomla.Site * @subpackage  com_contact */class ContactViewContact extends JViewLegacy{	protected $state;	protected $item;	public function display()	{		// Get model data.		$state = $this->get('State');		$item = $this->get('Item');		// Check for errors.		if (count($errors = $this->get('Errors')))		{			JError::raiseWarning(500, implode("\n", $errors));			return false;		}		$doc = JFactory::getDocument();		$doc->setMetaData('Content-Type', 'text/directory', true);		$app		= JFactory::getApplication();		$params 	= $app->getParams();		$user		= JFactory::getUser();		$dispatcher = JEventDispatcher::getInstance();		// Compute lastname, firstname and middlename		$item->name = trim($item->name);		// "Lastname, Firstname Midlename" format support		// e.g. "de Gaulle, Charles"		$namearray = explode(',', $item->name);		if (count($namearray) > 1 )		{			$lastname = $namearray[0];			$card_name = $lastname;			$name_and_midname = trim($namearray[1]);			$firstname = '';			if (!empty($name_and_midname))			{				$namearray = explode(' ', $name_and_midname);				$firstname = $namearray[0];				$middlename = (count($namearray) > 1) ? $namearray[1] : '';				$card_name = $firstname . ' ' . ($middlename ? $middlename . ' ' : '') .  $card_name;			}		}		// "Firstname Middlename Lastname" format support		else {			$namearray = explode(' ', $item->name);			$middlename = (count($namearray) > 2) ? $namearray[1] : '';			$firstname = array_shift($namearray);			$lastname = count($namearray) ? end($namearray) : '';			$card_name = $firstname . ($middlename ? ' ' . $middlename : '') . ($lastname ? ' ' . $lastname : '');		}		$rev = date('c', strtotime($item->modified));		JResponse::setHeader('Content-disposition', 'attachment; filename="'.$card_name.'.vcf"', true);		$vcard = array();		$vcard[] .= 'BEGIN:VCARD';		$vcard[] .= 'VERSION:3.0';		$vcard[]  = 'N:'.$lastname.';'.$firstname.';'.$middlename;		$vcard[]  = 'FN:'. $item->name;		$vcard[]  = 'TITLE:'.$item->con_position;		$vcard[]  = 'TEL;TYPE=WORK,VOICE:'.$item->telephone;		$vcard[]  = 'TEL;TYPE=WORK,FAX:'.$item->fax;		$vcard[]  = 'TEL;TYPE=WORK,MOBILE:'.$item->mobile;		$vcard[]  = 'ADR;TYPE=WORK:;;'.$item->address.';'.$item->suburb.';'.$item->state.';'.$item->postcode.';'.$item->country;		$vcard[]  = 'LABEL;TYPE=WORK:'.$item->address."\n".$item->suburb."\n".$item->state."\n".$item->postcode."\n".$item->country;		$vcard[]  = 'EMAIL;TYPE=PREF,INTERNET:'.$item->email_to;		$vcard[]  = 'URL:'.$item->webpage;		$vcard[]  = 'REV:'.$rev.'Z';		$vcard[]  = 'END:VCARD';		echo implode("\n", $vcard);		return true;	}}
<?php/** * @package     Joomla.Site * @subpackage  com_content * * @copyright   Copyright (C) 2005 - 2013 Open Source Matters, Inc. All rights reserved. * @license     GNU General Public License version 2 or later; see LICENSE.txt */defined('_JEXEC') or die;JHtml::addIncludePath(JPATH_COMPONENT . '/helpers');JHtml::_('behavior.caption');// If the page class is defined, add to class as suffix.// It will be a separate class if the user starts it with a space?><div class="blog-featured<?php echo $this->pageclass_sfx;?>"><?php if ($this->params->get('show_page_heading') != 0) : ?><div class="page-header">	<h1>	<?php echo $this->escape($this->params->get('page_heading')); ?>	</h1></div><?php endif; ?><?php $leadingcount = 0; ?><?php if (!empty($this->lead_items)) : ?><div class="items-leading">	<?php foreach ($this->lead_items as &$item) : ?>		<div class="leading-<?php echo $leadingcount; ?><?php echo $item->state == 0 ? ' system-unpublished' : null; ?>">			<?php				$this->item = &$item;				echo $this->loadTemplate('item');			?>		</div>		<div class="clearfix"></div>		<?php			$leadingcount++;		?>	<?php endforeach; ?></div><div class="clearfix"></div><?php endif; ?><?php	$introcount = (count($this->intro_items));	$counter = 0;?><?php if (!empty($this->intro_items)) : ?>	<?php foreach ($this->intro_items as $key => &$item) : ?>		<?php		$key = ($key - $leadingcount) + 1;		$rowcount = (((int) $key - 1) % (int) $this->columns) + 1;		$row = $counter / $this->columns;		if ($rowcount == 1) : ?>		<div class="items-row cols-<?php echo (int) $this->columns;?> <?php echo 'row-'.$row; ?> row-fluid">		<?php endif; ?>			<div class="item column-<?php echo $rowcount;?><?php echo $item->state == 0 ? ' system-unpublished' : null; ?> span<?php echo round((12 / $this->columns));?>">			<?php					$this->item = &$item;					echo $this->loadTemplate('item');			?>			</div>			<?php $counter++; ?>			<?php if (($rowcount == $this->columns) or ($counter == $introcount)) : ?>		</div>		<?php endif; ?>	<?php endforeach; ?><?php endif; ?><?php if (!empty($this->link_items)) : ?>	<div class="items-more">	<?php echo $this->loadTemplate('links'); ?>	</div><?php endif; ?><?php if ($this->params->def('show_pagination', 2) == 1  || ($this->params->get('show_pagination') == 2 && $this->pagination->pagesTotal > 1)) : ?>	<div class="pagination">		<?php if ($this->params->def('show_pagination_results', 1)) : ?>			<p class="counter pull-right">				<?php echo $this->pagination->getPagesCounter(); ?>			</p>		<?php  endif; ?>				<?php echo $this->pagination->getPagesLinks(); ?>	</div><?php endif; ?></div>
<?php/** * @package     Joomla.Administrator * @subpackage  com_media * * @copyright   Copyright (C) 2005 - 2013 Open Source Matters, Inc. All rights reserved. * @license     GNU General Public License version 2 or later; see LICENSE.txt */defined('_JEXEC') or die;$user = JFactory::getUser();?>		<li class="imgOutline thumbnail height-80 width-80 center">			<?php if ($user->authorise('core.delete', 'com_media')):?>				<a class="close delete-item" target="_top" href="index.php?option=com_media&amp;task=folder.delete&amp;tmpl=index&amp;<?php echo JSession::getFormToken(); ?>=1&amp;folder=<?php echo $this->state->folder; ?>&amp;rm[]=<?php echo $this->_tmp_folder->name; ?>" rel="<?php echo $this->_tmp_folder->name; ?> :: <?php echo $this->_tmp_folder->files + $this->_tmp_folder->folders; ?>" title="<?php echo JText::_('JACTION_DELETE');?>">x</a>				<input class="pull-left" type="checkbox" name="rm[]" value="<?php echo $this->_tmp_folder->name; ?>" />				<div class="clearfix"></div>			<?php endif;?>			<div class="height-50">				<a href="index.php?option=com_media&amp;view=mediaList&amp;tmpl=component&amp;folder=<?php echo $this->_tmp_folder->path_relative; ?>" target="folderframe">					<i class="icon-folder-2"></i>				</a>			</div>			<div class="small">				<a href="index.php?option=com_media&amp;view=mediaList&amp;tmpl=component&amp;folder=<?php echo $this->_tmp_folder->path_relative; ?>" target="folderframe"><?php echo JHtml::_('string.truncate', $this->_tmp_folder->name, 10, false); ?></a>			</div>		</li>
<?php/** * @package     Joomla.Site * @subpackage  com_newsfeeds * * @copyright   Copyright (C) 2005 - 2013 Open Source Matters, Inc. All rights reserved. * @license     GNU General Public License version 2 or later; see LICENSE.txt */defined('_JEXEC') or die;JHtml::_('behavior.framework');$n			= count($this->items);$listOrder	= $this->escape($this->state->get('list.ordering'));$listDirn	= $this->escape($this->state->get('list.direction'));?><?php if (empty($this->items)) : ?>	<p> <?php echo JText::_('COM_NEWSFEEDS_NO_ARTICLES'); ?></p><?php else : ?><form action="<?php echo htmlspecialchars(JUri::getInstance()->toString()); ?>" method="post" name="adminForm" id="adminForm">	<?php if ($this->params->get('filter_field') != 'hide' || $this->params->get('show_pagination_limit')) :?>	<fieldset class="filters btn-toolbar">		<?php if ($this->params->get('filter_field') != 'hide') :?>			<div class="btn-group">				<label class="filter-search-lbl element-invisible" for="filter-search"><span class="label label-warning"><?php echo JText::_('JUNPUBLISHED'); ?></span><?php echo JText::_('COM_NEWSFEEDS_FILTER_LABEL').'&#160;'; ?></label>				<input type="text" name="filter-search" id="filter-search" value="<?php echo $this->escape($this->state->get('list.filter')); ?>" class="inputbox" onchange="document.adminForm.submit();" title="<?php echo JText::_('COM_NEWSFEEDS_FILTER_SEARCH_DESC'); ?>" placeholder="<?php echo JText::_('COM_NEWSFEEDS_FILTER_SEARCH_DESC'); ?>" />			</div>		<?php endif; ?>		<?php if ($this->params->get('show_pagination_limit')) : ?>			<div class="btn-group pull-right">				<label for="limit" class="element-invisible">					<?php echo JText::_('JGLOBAL_DISPLAY_NUM'); ?>				</label>				<?php echo $this->pagination->getLimitBox(); ?>			</div>		<?php endif; ?>	</fieldset>	<?php endif; ?>		<ul class="category list-striped list-condensed">			<?php foreach ($this->items as $i => $item) : ?>				<?php if ($this->items[$i]->published == 0) : ?>					<li class="system-unpublished cat-list-row<?php echo $i % 2; ?>">				<?php else: ?>					<li class="cat-list-row<?php echo $i % 2; ?>" >				<?php endif; ?>				<?php  if ($this->params->get('show_articles')) : ?>					<span class="list-hits badge badge-info pull-right">						<?php echo  JText::sprintf('COM_NEWSFEEDS_NUM_ARTICLES_COUNT', $item->numarticles); ?>					</span>				<?php  endif; ?>				<span class="list pull-left">					<strong class="list-title">						<a href="<?php echo JRoute::_(NewsFeedsHelperRoute::getNewsfeedRoute($item->slug, $item->catid)); ?>">							<?php echo $item->name; ?></a>					</strong>				</span>				<?php if ($this->items[$i]->published == 0) : ?>					<span class="label label-warning"><?php echo JText::_('JUNPUBLISHED'); ?></span>				<?php endif; ?>				<br />				<?php  if ($this->params->get('show_link')) : ?>					<span class="list pull-left">							<a href="<?php echo $item->link; ?>"><?php echo $item->link; ?></a>					</span>					<br/>				<?php  endif; ?>				</li>			<?php endforeach; ?>		</ul>		<?php // Add pagination links ?>		<?php if (!empty($this->items)) : ?>			<?php if (($this->params->def('show_pagination', 2) == 1  || ($this->params->get('show_pagination') == 2)) && ($this->pagination->pagesTotal > 1)) : ?>				<div class="pagination">					<?php if ($this->params->def('show_pagination_results', 1)) : ?>						<p class="counter pull-right">							<?php echo $this->pagination->getPagesCounter(); ?>						</p>					<?php endif; ?>					<?php echo $this->pagination->getPagesLinks(); ?>				</div>			<?php endif; ?>		<?php  endif; ?>	</form><?php endif; ?>
<?php/** * @package     Joomla.Site * @subpackage  com_content * * @copyright   Copyright (C) 2005 - 2013 Open Source Matters, Inc. All rights reserved. * @license     GNU General Public License version 2 or later; see LICENSE.txt */defined('_JEXEC') or die;$class = ' class="first"';JHtml::_('bootstrap.tooltip');$lang	= JFactory::getLanguage();if (count($this->children[$this->category->id]) > 0 && $this->maxLevel != 0) : ?>	<?php foreach ($this->children[$this->category->id] as $id => $child) : ?>		<?php		if ($this->params->get('show_empty_categories') || $child->numitems || count($child->getChildren())) :			if (!isset($this->children[$this->category->id][$id + 1])) :				$class = ' class="last"';			endif;		?>		<div<?php echo $class; ?>>			<?php $class = ''; ?>			<?php if ($lang->isRTL()) : ?>			<h3 class="page-header item-title">				<?php if ( $this->params->get('show_cat_num_articles', 1)) : ?>					<span class="badge badge-info tip hasTooltip" title="<?php echo JText::_('COM_CONTENT_NUM_ITEMS'); ?>">						<?php echo $child->getNumItems(true); ?>					</span>				<?php endif; ?>				<a href="<?php echo JRoute::_(ContentHelperRoute::getCategoryRoute($child->id)); ?>">				<?php echo $this->escape($child->title); ?></a>				<?php if (count($child->getChildren()) > 0) : ?>					<a href="#category-<?php echo $child->id;?>" data-toggle="collapse" data-toggle="button" class="btn btn-mini pull-right"><span class="icon-plus"></span></a>				<?php endif;?>			<?php else : ?>			<h3 class="page-header item-title"><a href="<?php echo JRoute::_(ContentHelperRoute::getCategoryRoute($child->id));?>">				<?php echo $this->escape($child->title); ?></a>				<?php if ( $this->params->get('show_cat_num_articles', 1)) : ?>					<span class="badge badge-info tip hasTooltip" title="<?php echo JText::_('COM_CONTENT_NUM_ITEMS'); ?>">						<?php echo $child->getNumItems(true); ?>					</span>				<?php endif; ?>				<?php if (count($child->getChildren()) > 0) : ?>					<a href="#category-<?php echo $child->id;?>" data-toggle="collapse" data-toggle="button" class="btn btn-mini pull-right"><span class="icon-plus"></span></a>				<?php endif;?>			<?php endif;?>			</h3>			<?php if ($this->params->get('show_subcat_desc') == 1) : ?>			<?php if ($child->description) : ?>				<div class="category-desc">					<?php echo JHtml::_('content.prepare', $child->description, '', 'com_content.category'); ?>				</div>			<?php endif; ?>			<?php endif; ?>			<?php if (count($child->getChildren()) > 0) : ?>			<div class="collapse fade" id="category-<?php echo $child->id; ?>">				<?php				$this->children[$child->id] = $child->getChildren();				$this->category = $child;				$this->maxLevel--;				if ($this->maxLevel != 0) :					echo $this->loadTemplate('children');				endif;				$this->category = $child->getParent();				$this->maxLevel++;				?>			</div>			<?php endif; ?>		</div>		<?php endif; ?>	<?php endforeach; ?><?php endif;
<?php/** * @package     Joomla.Platform * @subpackage  HTTP * * @copyright   Copyright (C) 2005 - 2013 Open Source Matters, Inc. All rights reserved. * @license     GNU General Public License version 2 or later; see LICENSE */defined('JPATH_PLATFORM') or die;/** * HTTP factory class. * * @package     Joomla.Platform * @subpackage  HTTP * @since       12.1 */class JHttpFactory{	/**	 * method to recieve Http instance.	 *	 * @param   JRegistry  $options   Client options object.	 * @param   mixed      $adapters  Adapter (string) or queue of adapters (array) to use for communication.	 *	 * @return  JHttp      Joomla Http class	 *	 * @since   12.1	 */	public static function getHttp(JRegistry $options = null, $adapters = null)	{		if (empty($options))		{			$options = new JRegistry;		}		return new JHttp($options, self::getAvailableDriver($options, $adapters));	}	/**	 * Finds an available http transport object for communication	 *	 * @param   JRegistry  $options  Option for creating http transport object	 * @param   mixed      $default  Adapter (string) or queue of adapters (array) to use	 *	 * @return  JHttpTransport Interface sub-class	 *	 * @since   12.1	 */	public static function getAvailableDriver(JRegistry $options, $default = null)	{		if (is_null($default))		{			$availableAdapters = self::getHttpTransports();		}		else		{			settype($default, 'array');			$availableAdapters = $default;		}		// Check if there is available http transport adapters		if (!count($availableAdapters))		{			return false;		}		foreach ($availableAdapters as $adapter)		{			$class = 'JHttpTransport' . ucfirst($adapter);			if ($class::isSupported())			{				return new $class($options);			}		}		return false;	}	/**	 * Get the http transport handlers	 *	 * @return  array  An array of available transport handlers	 *	 * @since   12.1	 */	public static function getHttpTransports()	{		$names = array();		$iterator = new DirectoryIterator(__DIR__ . '/transport');		foreach ($iterator as $file)		{			$fileName = $file->getFilename();			// Only load for php files.			// Note: DirectoryIterator::getExtension only available PHP >= 5.3.6			if ($file->isFile() && substr($fileName, strrpos($fileName, '.') + 1) == 'php')			{				$names[] = substr($fileName, 0, strrpos($fileName, '.'));			}		}		return $names;	}}
<?php/** * @package     Joomla.Platform * @subpackage  MediaWiki * * @copyright   Copyright (C) 2005 - 2012 Open Source Matters, Inc. All rights reserved. * @license     GNU General Public License version 2 or later; see LICENSE */defined('JPATH_PLATFORM') or die;/** * MediaWiki API Pages class for the Joomla Platform. * * @package     Joomla.Platform * @subpackage  MediaWiki * @since       12.3 */class JMediawikiPages extends JMediawikiObject{	/**     * Method to edit a page.	 *	 * @param   string  $title         Page title.	 * @param   int     $section       Section number.	 * @param   string  $sectiontitle  The title for a new section.	 * @param   string  $text          Page content.	 * @param   string  $summary       Title of the page you want to delete.     *     * @return  object     *     * @since   12.3     */	public function editPage($title, $section = null, $sectiontitle = null, $text = null, $summary = null)	{		// Get the token.		$token = $this->getToken($title, 'edit');		// Build the request path.		$path = '?action=edit';		// Build the request data.		$data = array(			'title' => $title,			'token' => $token,			'section' => $section,			'sectiontitle' => $section,			'text' => $text,			'summary' => $summary		);		// Send the request.		$response = $this->client->post($this->fetchUrl($path), $data);		return $this->validateResponse($response);	}	/**	 * Method to delete a page.	 *	 * @param   string  $title      Title of the page you want to delete.	 * @param   string  $reason     Reason for the deletion.	 * @param   string  $watchlist  Unconditionally add or remove the page from your watchlis.	 * @param   string  $oldimage   The name of the old image to delete.	 *	 * @return  object	 *	 * @since   12.3	 */	public function deletePageByName($title, $reason = null, $watchlist = null, $oldimage = null)	{		// Get the token.		$token = $this->getToken($title, 'delete');		// Build the request path.		$path = '?action=delete';		// Build the request data.		$data = array(			'title' => $title,			'token' => $token,			'reason' => $reason,			'watchlist' => $watchlist,			'oldimage' => $oldimage		);		// Send the request.		$response = $this->client->post($this->fetchUrl($path), $data);		return $this->validateResponse($response);	}	/**	 * Method to delete a page.	 *	 * @param   string  $pageid     Page ID of the page you want to delete.	 * @param   string  $reason     Reason for the deletion.	 * @param   string  $watchlist  Unconditionally add or remove the page from your watchlis.	 * @param   string  $oldimage   The name of the old image to delete.	 *	 * @return  object	 *	 * @since   12.3	 */	public function deletePageByID($pageid,  $reason = null, $watchlist = null, $oldimage = null)	{		// Get the token.		$token = $this->getToken($pageid, 'delete');		// Build the request path.		$path = '?action=delete';		// Build the request data.		$data = array(			'pageid' => $pageid,			'token' => $token,			'reason' => $reason,			'watchlist' => $watchlist,			'oldimage' => $oldimage		);		// Send the request.		$response = $this->client->post($this->fetchUrl($path), $data);		return $this->validateResponse($response);	}	/**     * Method to restore certain revisions of a deleted page.	 *	 * @param   string  $title      Title of the page you want to restore.	 * @param   string  $reason     Reason for restoring (optional).	 * @param   string  $timestamp  Timestamps of the revisions to restore.	 * @param   string  $watchlist  Unconditionally add or remove the page from your watchlist.     *     * @return  object     *     * @since   12.3     */	public function undeletePage($title, $reason = null, $timestamp = null, $watchlist = null)	{		// Get the token.		$token = $this->getToken($title, 'undelete');		// Build the request path.		$path = '?action=undelete';		// Build the request data.		$data = array(			'title' => $title,			'token' => $token,			'reason' => $reason,			'timestamp' => $timestamp,			'watchlist' => $watchlist,		);		// Send the request.		$response = $this->client->post($this->fetchUrl($path), $data);		return $this->validateResponse($response);	}	/**     * Method to move a page.	 *	 * @param   string   $from            Title of the page you want to move.	 * @param   string   $to              Title you want to rename the page to.	 * @param   string   $reason          Reason for the move (optional).	 * @param   string   $movetalk        Move the talk page, if it exists.	 * @param   string   $movesubpages    Move subpages, if applicable.	 * @param   boolean  $noredirect      Don't create a redirect.	 * @param   string   $watchlist       Unconditionally add or remove the page from your watchlist.	 * @param   boolean  $ignorewarnings  Ignore any warnings.     *     * @return  object     *     * @since   12.3     */	public function movePageByName($from, $to, $reason = null, $movetalk = null, $movesubpages = null, $noredirect = null,		$watchlist =null, $ignorewarnings = null)	{		// Get the token.		$token = $this->getToken($from, 'move');		// Build the request path.		$path = '?action=move';		// Build the request data.		$data = array(			'from' => $from,			'to' => $reason,			'token' => $token,			'reason' => $reason,			'movetalk' => $movetalk,			'movesubpages' => $movesubpages,			'noredirect' => $noredirect,			'watchlist' => $watchlist,			'ignorewarnings' => $ignorewarnings		);		// Send the request.		$response = $this->client->post($this->fetchUrl($path), $data);		return $this->validateResponse($response);	}	/**	 * Method to move a page.	 *	 * @param   int      $fromid          Page ID of the page you want to move.	 * @param   string   $to              Title you want to rename the page to.	 * @param   string   $reason          Reason for the move (optional).	 * @param   string   $movetalk        Move the talk page, if it exists.	 * @param   string   $movesubpages    Move subpages, if applicable.	 * @param   boolean  $noredirect      Don't create a redirect.	 * @param   string   $watchlist       Unconditionally add or remove the page from your watchlist.	 * @param   boolean  $ignorewarnings  Ignore any warnings.	 *	 * @return  object	 *	 * @since   12.3	 */	public function movePageByID($fromid, $to, $reason = null, $movetalk = null, $movesubpages = null, $noredirect = null,		$watchlist =null, $ignorewarnings = null)	{		// Get the token.		$token = $this->getToken($fromid, 'move');		// Build the request path.		$path = '?action=move';		// Build the request data.		$data = array(			'fromid' => $fromid,			'to' => $reason,			'token' => $token,			'reason' => $reason,			'movetalk' => $movetalk,			'movesubpages' => $movesubpages,			'noredirect' => $noredirect,			'watchlist' => $watchlist,			'ignorewarnings' => $ignorewarnings		);		// Send the request.		$response = $this->client->post($this->fetchUrl($path), $data);		return $this->validateResponse($response);	}	/**     * Method to undo the last edit to the page.	 *	 * @param   string  $title      Title of the page you want to rollback.	 * @param   string  $user       Name of the user whose edits are to be rolled back.	 * @param   string  $summary    Custom edit summary. If not set, default summary will be used.	 * @param   string  $markbot    Mark the reverted edits and the revert as bot edits.	 * @param   string  $watchlist  Unconditionally add or remove the page from your watchlist.     *     * @return  object     *     * @since   12.3     */	public function rollback($title, $user, $summary = null, $markbot = null, $watchlist = null)	{		// Get the token.		$token = $this->getToken($title, 'rollback');		// Build the request path.		$path = '?action=rollback';		// Build the request data.		$data = array(			'title' => $title,			'token' => $token,			'user' => $user,			'expiry' => $summary,			'markbot' => $markbot,			'watchlist' => $watchlist		);		// Send the request.		$response = $this->client->post($this->fetchUrl($path), $data);		return $this->validateResponse($response);	}	/**     * Method to change the protection level of a page.	 *	 * @param   string  $title        Title of the page you want to (un)protect.	 * @param   string  $protections  Pipe-separated list of protection levels.	 * @param   string  $expiry       Expiry timestamps.	 * @param   string  $reason       Reason for (un)protecting (optional).	 * @param   string  $cascade      Enable cascading protection.	 * @param   string  $watchlist    Unconditionally add or remove the page from your watchlist.     *     * @return  object     *     * @since   12.3     */	public function changeProtection($title, $protections, $expiry = null, $reason = null, $cascade = null, $watchlist = null)	{		// Get the token.		$token = $this->getToken($title, 'unblock');		// Build the request path.		$path = '?action=protect';		// Build the request data.		$data = array(			'title' => $title,			'token' => $token,			'protections' => $protections,			'expiry' => $expiry,			'reason' => $reason,			'cascade' => $cascade,			'watchlist' => $watchlist		);		// Send the request.		$response = $this->client->post($this->fetchUrl($path), $data);		return $this->validateResponse($response);	}	/**     * Method to get basic page information.     *     * @param   array    $titles      Page titles to retrieve info.     * @param   array    $inprop      Which additional properties to get.     * @param   array    $intoken     Request a token to perform a data-modifying action on a page     * @param   boolean  $incontinue  When more results are available, use this to continue.     *     * @return  object     *     * @since   12.3     */	public function getPageInfo(array $titles, array $inprop = null, array $intoken = null, $incontinue = null)	{		// Build the request		$path = '?action=query&prop=info';		// Append titles to the request.		$path .= '&titles=' . $this->buildParameter($titles);		if (isset($inprop))		{			$path .= '&inprop=' . $this->buildParameter($inprop);		}		if (isset($intoken))		{			$path .= '&intoken=' . $this->buildParameter($intoken);		}		if ($incontinue)		{			$path .= '&incontinue=';		}		// Send the request.		$response = $this->client->get($this->fetchUrl($path));		return $this->validateResponse($response);	}	/**     * Method to get various properties defined in the page content.     *     * @param   array    $titles      Page titles to retrieve properties.     * @param   boolean  $ppcontinue  When more results are available, use this to continue.     * @param   string   $ppprop      Page prop to look on the page for.     *     * @return  object     *     * @since   12.3     */	public function getPageProperties(array $titles, $ppcontinue = null, $ppprop = null)	{		// Build the request		$path = '?action=query&prop=pageprops';		// Append titles to the request.		$path .= '&titles=' . $this->buildParameter($titles);		if ($ppcontinue)		{			$path .= '&ppcontinue=';		}		if (isset($ppprop))		{			$path .= '&ppprop=' . $ppprop;		}		// Send the request.		$response = $this->client->get($this->fetchUrl($path));		return $this->validateResponse($response);	}	/**     * Method to get a list of revisions.     *	 * @param   array    $titles   Page titles to retrieve revisions.	 * @param   array    $rvprop   Which properties to get for each revision.	 * @param   boolean  $rvparse  Parse revision content.	 * @param   int      $rvlimit  Limit how many revisions will be returned.	 *     * @return  object     *     * @since   12.3     */	public function getRevisions(array $titles, array $rvprop = null, $rvparse = null, $rvlimit = null)	{		// Build the request		$path = '?action=query&prop=revisions';		// Append titles to the request.		$path .= '&titles=' . $this->buildParameter($titles);		if (isset($rvprop))		{			$path .= '&rvprop=' . $this->buildParameter($rvprop);		}		if ($rvparse)		{			$path .= '&rvparse=';		}		if (isset($rvlimit))		{			$path .= '&rvlimit=' . $rvlimit;		}		// Send the request.		$response = $this->client->get($this->fetchUrl($path));		return $this->validateResponse($response);	}	/**     * Method to get all page templates from the given page.     *     * @param   array    $titles       Page titles to retrieve templates.     * @param   array    $tlnamespace  Show templates in this namespace(s) only.     * @param   integer  $tllimit      How many templates to return.     * @param   boolean  $tlcontinue   When more results are available, use this to continue.     * @param   string   $tltemplates  Only list these templates.     * @param   string   $tldir        The direction in which to list.     *     * @return  object     *     * @since   12.3     */	public function getPageTemplates(array $titles, array $tlnamespace = null, $tllimit = null, $tlcontinue = null, $tltemplates = null, $tldir = null)	{		// Build the request.		$path = '?action=query&prop=templates';		// Append titles to the request.		$path .= '&titles=' . $this->buildParameter($titles);		if (isset($tlnamespace))		{			$path .= '&tlnamespace=' . $this->buildParameter($tlnamespace);		}		if (isset($tllimit))		{			$path .= '&tllimit=' . $tllimit;		}		if ($tlcontinue)		{			$path .= '&tlcontinue=';		}		if (isset($tltemplates))		{			$path .= '&tltemplates=' . $tltemplates;		}		if (isset($tldir))		{			$path .= '&tldir=' . $tldir;		}		// Send the request.		$response = $this->client->get($this->fetchUrl($path));		return $this->validateResponse($response);	}	/**     * Method to get all pages that link to the given page.     *     * @param   string   $bltitle           Title to search.     * @param   integer  $blpageid          Pageid to search.     * @param   boolean  $blcontinue        When more results are available, use this to continue.     * @param   array    $blnamespace       The namespace to enumerate.     * @param   string   $blfilterredirect  How to filter for redirects..     * @param   integer  $bllimit           How many total pages to return.     * @param   boolean  $blredirect        If linking page is a redirect, find all pages that link to that redirect as well.     *     * @return  object     *     * @since   12.3     */	public function getBackLinks($bltitle, $blpageid = null, $blcontinue = null, array $blnamespace = null, $blfilterredirect = null,		$bllimit = null, $blredirect = null)	{		// Build the request.		$path = '?action=query&list=backlinks';		if (isset($bltitle))		{			$path .= '&bltitle=' . $bltitle;		}		if (isset($blpageid))		{			$path .= '&blpageid=' . $blpageid;		}		if ($blcontinue)		{			$path .= '&blcontinue=';		}		if (isset($blnamespace))		{			$path .= '&blnamespace=' . $this->buildParameter($blnamespace);		}		if (isset($blfilterredirect))		{			$path .= '&blfilterredirect=' . $blfilterredirect;		}		if (isset($bllimit))		{			$path .= '&bllimit=' . $bllimit;		}		if ($blredirect)		{			$path .= '&blredirect=';		}		// Send the request.		$response = $this->client->get($this->fetchUrl($path));		return $this->validateResponse($response);	}	/**     * Method to get all pages that link to the given interwiki link.     *     * @param   string   $iwbltitle     Interwiki link to search for. Must be used with iwblprefix.     * @param   string   $iwblprefix    Prefix for the interwiki.     * @param   boolean  $iwblcontinue  When more results are available, use this to continue.     * @param   integer  $iwbllimit     How many total pages to return.     * @param   array    $iwblprop      Which properties to get.     *     * @return  object     *     * @since   12.3     */	public function getIWBackLinks($iwbltitle, $iwblprefix = null, $iwblcontinue = null, $iwbllimit = null, array $iwblprop = null)	{		// Build the request		$path = '?action=query&list=iwbacklinks';		if (isset($iwbltitle))		{			$path .= '&iwbltitle=' . $iwbltitle;		}		if (isset($iwblprefix))		{			$path .= '&iwblprefix=' . $iwblprefix;		}		if ($iwblcontinue)		{			$path .= '&iwblcontinue=';		}		if (isset($iwbllimit))		{			$path .= '&bllimit=' . $iwbllimit;		}		if (isset($iwblprop))		{			$path .= '&iwblprop=' . $this->buildParameter($iwblprop);		}		// Send the request.		$response = $this->client->get($this->fetchUrl($path));		return $this->validateResponse($response);	}	/**	 * Method to get access token.	 *	 * @param   string  $user     The User to get token.	 * @param   string  $intoken  The type of token.	 *	 * @return  object	 *	 * @since   12.1	 */	public function getToken($user, $intoken)	{		// Build the request path.		$path = '?action=query&prop=info&intoken=' . $intoken . '&titles=User:' . $user;		// Send the request.		$response = $this->client->post($this->fetchUrl($path), null);		return (string) $this->validateResponse($response)->query->pages->page[$intoken . 'token'];	}}
<?php/** * @package     Joomla.Administrator * @subpackage  com_users * * @copyright   Copyright (C) 2005 - 2013 Open Source Matters, Inc. All rights reserved. * @license     GNU General Public License version 2 or later; see LICENSE.txt */defined('_JEXEC') or die;require_once JPATH_COMPONENT . '/helpers/debug.php';/** * Methods supporting a list of user records. * * @package     Joomla.Administrator * @subpackage  com_users * @since       1.6 */class UsersModelDebugUser extends JModelList{	/**	 * Get a list of the actions.	 *	 * @return  array	 * @since   1.6	 */	public function getDebugActions()	{		$component = $this->getState('filter.component');		return UsersHelperDebug::getDebugActions($component);	}	/**	 * Override getItems method.	 *	 * @return  array	 * @since   1.6	 */	public function getItems()	{		$userId = $this->getState('filter.user_id');		if (($assets = parent::getItems()) && $userId)		{			$actions = $this->getDebugActions();			foreach ($assets as &$asset)			{				$asset->checks = array();				foreach ($actions as $action)				{					$name = $action[0];					$level = $action[1];					// Check that we check this action for the level of the asset.					if ($action[1] === null || $action[1] >= $asset->level)					{						// We need to test this action.						$asset->checks[$name] = JAccess::check($userId, $action[0], $asset->name);					}					else					{						// We ignore this action.						$asset->checks[$name] = 'skip';					}				}			}		}		return $assets;	}	/**	 * Method to auto-populate the model state.	 *	 * Note. Calling getState in this method will result in recursion.	 *	 * @return  void	 * @since   1.6	 */	protected function populateState($ordering = null, $direction = null)	{		$app = JFactory::getApplication('administrator');		// Adjust the context to support modal layouts.		$layout = $app->input->get('layout', 'default');		if ($layout)		{			$this->context .= '.' . $layout;		}		// Load the filter state.		$search = $this->getUserStateFromRequest($this->context . '.filter.search', 'filter_search');		$this->setState('filter.search', $search);		$value = $this->getUserStateFromRequest($this->context . '.filter.user_id', 'user_id', 0, 'int');		$this->setState('filter.user_id', $value);		$levelStart = $this->getUserStateFromRequest($this->context . '.filter.level_start', 'filter_level_start', 0, 'int');		$this->setState('filter.level_start', $levelStart);		$value = $this->getUserStateFromRequest($this->context . '.filter.level_end', 'filter_level_end', 0, 'int');		if ($value > 0 && $value < $levelStart)		{			$value = $levelStart;		}		$this->setState('filter.level_end', $value);		$component = $this->getUserStateFromRequest($this->context . '.filter.component', 'filter_component');		$this->setState('filter.component', $component);		// Load the parameters.		$params = JComponentHelper::getParams('com_users');		$this->setState('params', $params);		// List state information.		parent::populateState('a.lft', 'asc');	}	/**	 * Method to get a store id based on model configuration state.	 *	 * This is necessary because the model is used by the component and	 * different modules that might need different sets of data or different	 * ordering requirements.	 *	 * @param   string  $id    A prefix for the store id.	 *	 * @return  string  A store id.	 * @since   1.6	 */	protected function getStoreId($id = '')	{		// Compile the store id.		$id .= ':' . $this->getState('filter.search');		$id .= ':' . $this->getState('filter.user_id');		$id .= ':' . $this->getState('filter.level_start');		$id .= ':' . $this->getState('filter.level_end');		$id .= ':' . $this->getState('filter.component');		return parent::getStoreId($id);	}	/**	 * Get the user being debugged.	 *	 * @return  JUser	 * @since   1.6	 */	public function getUser()	{		$userId = $this->getState('filter.user_id');		return JFactory::getUser($userId);	}	/**	 * Build an SQL query to load the list data.	 *	 * @return  JDatabaseQuery	 * @since   1.6	 */	protected function getListQuery()	{		// Create a new query object.		$db = $this->getDbo();		$query = $db->getQuery(true);		// Select the required fields from the table.		$query->select(			$this->getState(				'list.select',				'a.id, a.name, a.title, a.level, a.lft, a.rgt'			)		);		$query->from($db->quoteName('#__assets') . ' AS a');		// Filter the items over the group id if set.		if ($groupId = $this->getState('filter.group_id'))		{			$query->join('LEFT', '#__user_usergroup_map AS map2 ON map2.user_id = a.id')				->where('map2.group_id = ' . (int) $groupId);		}		// Filter the items over the search string if set.		if ($this->getState('filter.search'))		{			// Escape the search token.			$token = $db->quote('%' . $db->escape($this->getState('filter.search')) . '%');			// Compile the different search clauses.			$searches = array();			$searches[] = 'a.name LIKE ' . $token;			$searches[] = 'a.title LIKE ' . $token;			// Add the clauses to the query.			$query->where('(' . implode(' OR ', $searches) . ')');		}		// Filter on the start and end levels.		$levelStart = (int) $this->getState('filter.level_start');		$levelEnd = (int) $this->getState('filter.level_end');		if ($levelEnd > 0 && $levelEnd < $levelStart)		{			$levelEnd = $levelStart;		}		if ($levelStart > 0)		{			$query->where('a.level >= ' . $levelStart);		}		if ($levelEnd > 0)		{			$query->where('a.level <= ' . $levelEnd);		}		// Filter the items over the component if set.		if ($this->getState('filter.component'))		{			$component = $this->getState('filter.component');			$query->where('(a.name = ' . $db->quote($component) . ' OR a.name LIKE ' . $db->quote($component . '.%') . ')');		}		// Add the list ordering clause.		$query->order($db->escape($this->getState('list.ordering', 'a.lft')) . ' ' . $db->escape($this->getState('list.direction', 'ASC')));		return $query;	}}
<?php/** * @package    Joomla.Site * * @copyright  Copyright (C) 2005 - 2013 Open Source Matters, Inc. All rights reserved. * @license    GNU General Public License version 2 or later; see LICENSE.txt */defined('_JEXEC') or die;//// Joomla system checks.//@ini_set('magic_quotes_runtime', 0);//// Installation check, and check on removal of the install directory.//if (!file_exists(JPATH_CONFIGURATION.'/configuration.php') || (filesize(JPATH_CONFIGURATION.'/configuration.php') < 10) || file_exists(JPATH_INSTALLATION.'/index.php')) {	if (file_exists(JPATH_INSTALLATION.'/index.php'))	{		header('Location: '.substr($_SERVER['REQUEST_URI'], 0, strpos($_SERVER['REQUEST_URI'], 'index.php')).'installation/index.php');		exit();	} else {		echo 'No configuration file found and no installation code available. Exiting...';		exit();	}}//// Joomla system startup.//// System includes.require_once JPATH_LIBRARIES.'/import.legacy.php';JError::setErrorHandling(E_NOTICE, 'message');JError::setErrorHandling(E_WARNING, 'message');JError::setErrorHandling(E_ERROR, 'callback', array('JError', 'customErrorPage'));// Botstrap the CMS libraries.require_once JPATH_LIBRARIES.'/cms.php';// Pre-Load configuration.ob_start();require_once JPATH_CONFIGURATION.'/configuration.php';ob_end_clean();// System configuration.$config = new JConfig;// Set the error_reportingswitch ($config->error_reporting){	case 'default':	case '-1':		break;	case 'none':	case '0':		error_reporting(0);		break;	case 'simple':		error_reporting(E_ERROR | E_WARNING | E_PARSE);		ini_set('display_errors', 1);		break;	case 'maximum':		error_reporting(E_ALL);		ini_set('display_errors', 1);		break;	case 'development':		error_reporting(-1);		ini_set('display_errors', 1);		break;	default:		error_reporting($config->error_reporting);		ini_set('display_errors', 1);		break;}define('JDEBUG', $config->debug);unset($config);//// Joomla framework loading.//// System profiler.if (JDEBUG){	$_PROFILER = JProfiler::getInstance('Application');}
<?php/** * @package     Joomla.Platform * @subpackage  Database * * @copyright   Copyright (C) 2005 - 2013 Open Source Matters, Inc. All rights reserved. * @license     GNU General Public License version 2 or later; see LICENSE */defined('JPATH_PLATFORM') or die;/** * Query Building Class. * * @package     Joomla.Platform * @subpackage  Database * @since       11.3 */class JDatabaseQueryPostgresql extends JDatabaseQuery implements JDatabaseQueryLimitable{	/**	 * @var    object  The FOR UPDATE element used in "FOR UPDATE"  lock	 * @since  11.3	 */	protected $forUpdate = null;	/**	 * @var    object  The FOR SHARE element used in "FOR SHARE"  lock	 * @since  11.3	 */	protected $forShare = null;	/**	 * @var    object  The NOWAIT element used in "FOR SHARE" and "FOR UPDATE" lock	 * @since  11.3	 */	protected $noWait = null;	/**	 * @var    object  The LIMIT element	 * @since  11.3	 */	protected $limit = null;	/**	 * @var    object  The OFFSET element	 * @since  11.3	 */	protected $offset = null;	/**	 * @var    object  The RETURNING element of INSERT INTO	 * @since  11.3	 */	protected $returning = null;	/**	 * Magic function to convert the query to a string, only for postgresql specific query	 *	 * @return  string	The completed query.	 *	 * @since   11.3	 */	public function __toString()	{		$query = '';		switch ($this->type)		{			case 'select':				$query .= (string) $this->select;				$query .= (string) $this->from;				if ($this->join)				{					// Special case for joins					foreach ($this->join as $join)					{						$query .= (string) $join;					}				}				if ($this->where)				{					$query .= (string) $this->where;				}				if ($this->group)				{					$query .= (string) $this->group;				}				if ($this->having)				{					$query .= (string) $this->having;				}				if ($this->order)				{					$query .= (string) $this->order;				}				if ($this->limit)				{					$query .= (string) $this->limit;				}				if ($this->offset)				{					$query .= (string) $this->offset;				}				if ($this->forUpdate)				{					$query .= (string) $this->forUpdate;				}				else				{					if ($this->forShare)					{						$query .= (string) $this->forShare;					}				}				if ($this->noWait)				{					$query .= (string) $this->noWait;				}				break;			case 'update':				$query .= (string) $this->update;				$query .= (string) $this->set;				if ($this->join)				{					$onWord = ' ON ';					// Workaround for special case of JOIN with UPDATE					foreach ($this->join as $join)					{						$joinElem = $join->getElements();						$joinArray = explode($onWord, $joinElem[0]);						$this->from($joinArray[0]);						$this->where($joinArray[1]);					}					$query .= (string) $this->from;				}				if ($this->where)				{					$query .= (string) $this->where;				}				break;			case 'insert':				$query .= (string) $this->insert;				if ($this->values)				{					if ($this->columns)					{						$query .= (string) $this->columns;					}					$elements = $this->values->getElements();					if (!($elements[0] instanceof $this))					{						$query .= ' VALUES ';					}					$query .= (string) $this->values;					if ($this->returning)					{						$query .= (string) $this->returning;					}				}				break;			default:				$query = parent::__toString();				break;		}		return $query;	}	/**	 * Clear data from the query or a specific clause of the query.	 *	 * @param   string  $clause  Optionally, the name of the clause to clear, or nothing to clear the whole query.	 *	 * @return  void	 *	 * @since   11.3	 */	public function clear($clause = null)	{		switch ($clause)		{			case 'limit':				$this->limit = null;				break;			case 'offset':				$this->offset = null;				break;			case 'forUpdate':				$this->forUpdate = null;				break;			case 'forShare':				$this->forShare = null;				break;			case 'noWait':				$this->noWait = null;				break;			case 'returning':				$this->returning = null;				break;			case 'select':			case 'update':			case 'delete':			case 'insert':			case 'from':			case 'join':			case 'set':			case 'where':			case 'group':			case 'having':			case 'order':			case 'columns':			case 'values':				parent::clear($clause);				break;			default:				$this->type = null;				$this->limit = null;				$this->offset = null;				$this->forUpdate = null;				$this->forShare = null;				$this->noWait = null;				$this->returning = null;				parent::clear($clause);				break;		}		return $this;	}	/**	 * Casts a value to a char.	 *	 * Ensure that the value is properly quoted before passing to the method.	 *	 * Usage:	 * $query->select($query->castAsChar('a'));	 *	 * @param   string  $value  The value to cast as a char.	 *	 * @return  string  Returns the cast value.	 *	 * @since   11.1	 */	public function castAsChar($value)	{		return $value . '::text';	}	/**	 * Concatenates an array of column names or values.	 *	 * Usage:	 * $query->select($query->concatenate(array('a', 'b')));	 *	 * @param   array   $values     An array of values to concatenate.	 * @param   string  $separator  As separator to place between each value.	 *	 * @return  string  The concatenated values.	 *	 * @since   11.3	 */	public function concatenate($values, $separator = null)	{		if ($separator)		{			return implode(' || ' . $this->quote($separator) . ' || ', $values);		}		else		{			return implode(' || ', $values);		}	}	/**	 * Gets the current date and time.	 *	 * @return  string  Return string used in query to obtain	 *	 * @since   11.3	 */	public function currentTimestamp()	{		return 'NOW()';	}	/**	 * Sets the FOR UPDATE lock on select's output row	 *	 * @param   string   $table_name  The table to lock	 * @param   boolean  $glue        The glue by which to join the conditions. Defaults to ',' .	 *	 * @return  JDatabaseQuery  FOR UPDATE query element	 *	 * @since   11.3	 */	public function forUpdate ($table_name, $glue = ',')	{		$this->type = 'forUpdate';		if ( is_null($this->forUpdate) )		{			$glue = strtoupper($glue);			$this->forUpdate = new JDatabaseQueryElement('FOR UPDATE', 'OF ' . $table_name, "$glue ");		}		else		{			$this->forUpdate->append($table_name);		}		return $this;	}	/**	 * Sets the FOR SHARE lock on select's output row	 *	 * @param   string   $table_name  The table to lock	 * @param   boolean  $glue        The glue by which to join the conditions. Defaults to ',' .	 *	 * @return  JDatabaseQuery  FOR SHARE query element	 *	 * @since   11.3	 */	public function forShare ($table_name, $glue = ',')	{		$this->type = 'forShare';		if ( is_null($this->forShare) )		{			$glue = strtoupper($glue);			$this->forShare = new JDatabaseQueryElement('FOR SHARE', 'OF ' . $table_name, "$glue ");		}		else		{			$this->forShare->append($table_name);		}		return $this;	}	/**	 * Used to get a string to extract year from date column.	 *	 * Usage:	 * $query->select($query->year($query->quoteName('dateColumn')));	 *	 * @param   string  $date  Date column containing year to be extracted.	 *	 * @return  string  Returns string to extract year from a date.	 *	 * @since   12.1	 */	public function year($date)	{		return 'EXTRACT (YEAR FROM ' . $date . ')';	}	/**	 * Used to get a string to extract month from date column.	 *	 * Usage:	 * $query->select($query->month($query->quoteName('dateColumn')));	 *	 * @param   string  $date  Date column containing month to be extracted.	 *	 * @return  string  Returns string to extract month from a date.	 *	 * @since   12.1	 */	public function month($date)	{		return 'EXTRACT (MONTH FROM ' . $date . ')';	}	/**	 * Used to get a string to extract day from date column.	 *	 * Usage:	 * $query->select($query->day($query->quoteName('dateColumn')));	 *	 * @param   string  $date  Date column containing day to be extracted.	 *	 * @return  string  Returns string to extract day from a date.	 *	 * @since   12.1	 */	public function day($date)	{		return 'EXTRACT (DAY FROM ' . $date . ')';	}	/**	 * Used to get a string to extract hour from date column.	 *	 * Usage:	 * $query->select($query->hour($query->quoteName('dateColumn')));	 *	 * @param   string  $date  Date column containing hour to be extracted.	 *	 * @return  string  Returns string to extract hour from a date.	 *	 * @since   12.1	 */	public function hour($date)	{		return 'EXTRACT (HOUR FROM ' . $date . ')';	}	/**	 * Used to get a string to extract minute from date column.	 *	 * Usage:	 * $query->select($query->minute($query->quoteName('dateColumn')));	 *	 * @param   string  $date  Date column containing minute to be extracted.	 *	 * @return  string  Returns string to extract minute from a date.	 *	 * @since   12.1	 */	public function minute($date)	{		return 'EXTRACT (MINUTE FROM ' . $date . ')';	}	/**	 * Used to get a string to extract seconds from date column.	 *	 * Usage:	 * $query->select($query->second($query->quoteName('dateColumn')));	 *	 * @param   string  $date  Date column containing second to be extracted.	 *	 * @return  string  Returns string to extract second from a date.	 *	 * @since   12.1	 */	public function second($date)	{		return 'EXTRACT (SECOND FROM ' . $date . ')';	}	/**	 * Sets the NOWAIT lock on select's output row	 *	 * @return  JDatabaseQuery  NO WAIT query element	 *	 * @since   11.3	 */	public function noWait ()	{		$this->type = 'noWait';		if ( is_null($this->noWait) )		{			$this->noWait = new JDatabaseQueryElement('NOWAIT', null);		}		return $this;	}	/**	 * Set the LIMIT clause to the query	 *	 * @param   int  $limit  An int of how many row will be returned	 *	 * @return  JDatabaseQuery  Returns this object to allow chaining.	 *	 * @since   11.3	 */	public function limit( $limit = 0 )	{		if (is_null($this->limit))		{			$this->limit = new JDatabaseQueryElement('LIMIT', (int) $limit);		}		return $this;	}	/**	 * Set the OFFSET clause to the query	 *	 * @param   int  $offset  An int for skipping row	 *	 * @return  JDatabaseQuery  Returns this object to allow chaining.	 *	 * @since   11.3	 */	public function offset( $offset = 0 )	{		if (is_null($this->offset))		{			$this->offset = new JDatabaseQueryElement('OFFSET', (int) $offset);		}		return $this;	}	/**	 * Add the RETURNING element to INSERT INTO statement.	 *	 * @param   mixed  $pkCol  The name of the primary key column.	 *	 * @return  JDatabaseQuery  Returns this object to allow chaining.	 *	 * @since   11.3	 */	public function returning( $pkCol )	{		if (is_null($this->returning))		{			$this->returning = new JDatabaseQueryElement('RETURNING', $pkCol);		}		return $this;	}	/**	 * Sets the offset and limit for the result set, if the database driver supports it.	 *	 * Usage:	 * $query->setLimit(100, 0); (retrieve 100 rows, starting at first record)	 * $query->setLimit(50, 50); (retrieve 50 rows, starting at 50th record)	 *	 * @param   integer  $limit   The limit for the result set	 * @param   integer  $offset  The offset for the result set	 *	 * @return  JDatabaseQuery  Returns this object to allow chaining.	 *	 * @since   12.1	 */	public function setLimit($limit = 0, $offset = 0)	{		$this->limit  = (int) $limit;		$this->offset = (int) $offset;		return $this;	}	/**	 * Method to modify a query already in string format with the needed	 * additions to make the query limited to a particular number of	 * results, or start at a particular offset.	 *	 * @param   string   $query   The query in string format	 * @param   integer  $limit   The limit for the result set	 * @param   integer  $offset  The offset for the result set	 *	 * @return string	 *	 * @since 12.1	 */	public function processLimit($query, $limit, $offset = 0)	{		if ($limit > 0)		{			$query .= ' LIMIT ' . $limit;		}		if ($offset > 0)		{			$query .= ' OFFSET ' . $offset;		}		return $query;	}	/**	 * Add to the current date and time in Postgresql.	 * Usage:	 * $query->select($query->dateAdd());	 * Prefixing the interval with a - (negative sign) will cause subtraction to be used.	 *	 * @param   datetime  $date      The date to add to	 * @param   string    $interval  The string representation of the appropriate number of units	 * @param   string    $datePart  The part of the date to perform the addition on	 *	 * @return  string  The string with the appropriate sql for addition of dates	 *	 * @since   13.1	 * @note Not all drivers support all units. Check appropriate references	 * @link http://www.postgresql.org/docs/9.0/static/functions-datetime.html.	 */	public function dateAdd($date, $interval, $datePart)	{		if (substr($interval, 0, 1) != '-')		{			return "timestamp '" . $date . "' + interval '" . $interval . " " . $datePart . "'";		}		else		{			return "timestamp '" . $date . "' - interval '" . ltrim($interval, '-') . " " . $datePart . "'";		}	}}
<?php/** * @package     Joomla.Platform * @subpackage  Database * * @copyright   Copyright (C) 2005 - 2013 Open Source Matters, Inc. All rights reserved. * @license     GNU General Public License version 2 or later; see LICENSE */defined('JPATH_PLATFORM') or die;/** * Oracle Query Building Class. * * @package     Joomla.Platform * @subpackage  Database * @since       12.1 */class JDatabaseQueryOracle extends JDatabaseQueryPdo implements JDatabaseQueryPreparable, JDatabaseQueryLimitable{	/**	 * @var integer	 * @since 12.1	 */	protected $limit;	/**	 * @var integer	 * @since 12.1	 */	protected $offset;	/**	 * @var mixed	 * @since 12.1	 */	protected $bounded = array();	/**	 * Method to add a variable to an internal array that will be bound to a prepared SQL statement before query execution. Also	 * removes a variable that has been bounded from the internal bounded array when the passed in value is null.	 *	 * @param   string|integer  $key            The key that will be used in your SQL query to reference the value. Usually of	 *                                          the form ':key', but can also be an integer.	 * @param   mixed           &$value         The value that will be bound. The value is passed by reference to support output	 *                                          parameters such as those possible with stored procedures.	 * @param   integer         $dataType       Constant corresponding to a SQL datatype.	 * @param   integer         $length         The length of the variable. Usually required for OUTPUT parameters.	 * @param   array           $driverOptions  Optional driver options to be used.	 *	 * @return  JDatabaseQuery	 *	 * @since   12.1	 */	public function bind($key = null, &$value = null, $dataType = PDO::PARAM_STR, $length = 0, $driverOptions = array())	{		// Case 1: Empty Key (reset $bounded array)		if (empty($key))		{			$this->bounded = array();			return $this;		}		// Case 2: Key Provided, null value (unset key from $bounded array)		if (is_null($value))		{			if (isset($this->bounded[$key]))			{				unset($this->bounded[$key]);			}			return $this;		}		$obj = new stdClass;		$obj->value = &$value;		$obj->dataType = $dataType;		$obj->length = $length;		$obj->driverOptions = $driverOptions;		// Case 3: Simply add the Key/Value into the bounded array		$this->bounded[$key] = $obj;		return $this;	}	/**	 * Retrieves the bound parameters array when key is null and returns it by reference. If a key is provided then that item is	 * returned.	 *	 * @param   mixed  $key  The bounded variable key to retrieve.	 *	 * @return  mixed	 *	 * @since   12.1	 */	public function &getBounded($key = null)	{		if (empty($key))		{			return $this->bounded;		}		else		{			if (isset($this->bounded[$key]))			{				return $this->bounded[$key];			}		}	}	/**	 * Clear data from the query or a specific clause of the query.	 *	 * @param   string  $clause  Optionally, the name of the clause to clear, or nothing to clear the whole query.	 *	 * @return  JDatabaseQuery  Returns this object to allow chaining.	 *	 * @since   12.1	 */	public function clear($clause = null)	{		switch ($clause)		{			case null:				$this->bounded = array();				break;		}		parent::clear($clause);		return $this;	}	/**	 * Method to modify a query already in string format with the needed	 * additions to make the query limited to a particular number of	 * results, or start at a particular offset. This method is used	 * automatically by the __toString() method if it detects that the	 * query implements the JDatabaseQueryLimitable interface.	 *	 * @param   string   $query   The query in string format	 * @param   integer  $limit   The limit for the result set	 * @param   integer  $offset  The offset for the result set	 *	 * @return  string	 *	 * @since   12.1	 */	public function processLimit($query, $limit, $offset = 0)	{		// Check if we need to mangle the query.		if ($limit || $offset)		{			$query = "SELECT joomla2.*		              FROM (		                  SELECT joomla1.*, ROWNUM AS joomla_db_rownum		                  FROM (		                      " . $query . "		                  ) joomla1		              ) joomla2";			// Check if the limit value is greater than zero.			if ($limit > 0)			{				$query .= ' WHERE joomla2.joomla_db_rownum BETWEEN ' . ($offset + 1) . ' AND ' . ($offset + $limit);			}			else			{				// Check if there is an offset and then use this.				if ($offset)				{					$query .= ' WHERE joomla2.joomla_db_rownum > ' . ($offset + 1);				}			}		}		return $query;	}	/**	 * Sets the offset and limit for the result set, if the database driver supports it.	 *	 * Usage:	 * $query->setLimit(100, 0); (retrieve 100 rows, starting at first record)	 * $query->setLimit(50, 50); (retrieve 50 rows, starting at 50th record)	 *	 * @param   integer  $limit   The limit for the result set	 * @param   integer  $offset  The offset for the result set	 *	 * @return  JDatabaseQuery  Returns this object to allow chaining.	 *	 * @since   12.1	 */	public function setLimit($limit = 0, $offset = 0)	{		$this->limit = (int) $limit;		$this->offset = (int) $offset;		return $this;	}}
<?php/** * @package     Joomla.Administrator * @subpackage  com_newsfeeds * * @copyright   Copyright (C) 2005 - 2013 Open Source Matters, Inc. All rights reserved. * @license     GNU General Public License version 2 or later; see LICENSE.txt */defined('JPATH_BASE') or die;JFormHelper::loadFieldClass('list');/** * Form Field class for the Joomla Framework. * * @package     Joomla.Administrator * @subpackage  com_newsfeeds * @since       1.6 */class JFormFieldNewsfeeds extends JFormFieldList{	/**	 * The form field type.	 *	 * @var		string	 * @since   1.6	 */	protected $type = 'Newsfeeds';	/**	 * Method to get the field options.	 *	 * @return  array  The field option objects.	 * @since   1.6	 */	protected function getOptions()	{		$options = array();		$db		= JFactory::getDbo();		$query	= $db->getQuery(true)			->select('id As value, name As text')			->from('#__newsfeeds AS a')			->order('a.name');		// Get the options.		$db->setQuery($query);		try		{			$options = $db->loadObjectList();		}		catch (RuntimeException $e)		{			JError::raiseWarning(500, $db->getMessage());		}		// Merge any additional options in the XML definition.		$options = array_merge(parent::getOptions(), $options);		return $options;	}}
<?php/** * @package    Joomla.Administrator * * @copyright  Copyright (C) 2005 - 2013 Open Source Matters, Inc. All rights reserved. * @license    GNU General Public License version 2 or later; see LICENSE.txt */defined('_JEXEC') or die;/** * Joomla! Administrator Application helper class. * Provide many supporting API functions. * * @package     Joomla.Administrator * @subpackage  Application * @since       1.5 */class JAdministratorHelper{	/**	 * Return the application option string [main component].	 *	 * @return  string  The component to access.	 *	 * @since   1.5	 */	public static function findOption()	{		$app = JFactory::getApplication();		$option = strtolower($app->input->get('option'));		$app->loadIdentity();		$user = $app->getIdentity();		if ($user->get('guest') || !$user->authorise('core.login.admin'))		{			$option = 'com_login';		}		if (empty($option))		{			$option = 'com_cpanel';		}		$app->input->set('option', $option);		return $option;	}}
<?php/** * @package     Joomla.Administrator * @subpackage  com_config * * @copyright   Copyright (C) 2005 - 2013 Open Source Matters, Inc. All rights reserved. * @license     GNU General Public License version 2 or later; see LICENSE.txt */defined('_JEXEC') or die;$app      = JFactory::getApplication();$template = $app->getTemplate();// Load the tooltip behavior.JHtml::_('behavior.tooltip');JHtml::_('behavior.formvalidation');JHtml::_('formbehavior.chosen', 'select');?><script type="text/javascript">	Joomla.submitbutton = function(task)	{		if (document.formvalidator.isValid(document.id('component-form')))		{			Joomla.submitform(task, document.getElementById('component-form'));		}	}</script><form action="<?php echo JRoute::_('index.php?option=com_config');?>" id="component-form" method="post" name="adminForm" autocomplete="off" class="form-validate form-horizontal">	<div class="row-fluid">		<!-- Begin Sidebar -->		<div id="sidebar" class="span2">			<div class="sidebar-nav">				<?php echo $this->loadTemplate('navigation'); ?>			</div>		</div>		<!-- End Sidebar -->		<div class="span10">			<ul class="nav nav-tabs" id="configTabs">				<?php					$fieldSets = $this->form->getFieldsets();					foreach ($fieldSets as $name => $fieldSet) :						$label = empty($fieldSet->label) ? 'COM_CONFIG_'.$name.'_FIELDSET_LABEL' : $fieldSet->label;				?>					<li><a href="#<?php echo $name;?>" data-toggle="tab"><?php echo  JText::_($label);?></a></li>				<?php					endforeach;				?>			</ul>			<div class="tab-content">				<?php					$fieldSets = $this->form->getFieldsets();					foreach ($fieldSets as $name => $fieldSet) :				?>					<div class="tab-pane" id="<?php echo $name;?>">						<?php							if (isset($fieldSet->description) && !empty($fieldSet->description)) :								echo '<p class="tab-description">'.JText::_($fieldSet->description).'</p>';							endif;							foreach ($this->form->getFieldset($name) as $field):						?>							<div class="control-group">						<?php if (!$field->hidden && $name != "permissions") : ?>								<div class="control-label">									<?php echo $field->label; ?>								</div>						<?php endif; ?>						<div class="<?php if ($name != "permissions") : ?>controls<?php endif; ?>">							<?php echo $field->input; ?>						</div>					</div>				<?php					endforeach;				?>				</div>				<?php				endforeach;				?>			</div>		</div>	</div>	<div>		<input type="hidden" name="id" value="<?php echo $this->component->id;?>" />		<input type="hidden" name="component" value="<?php echo $this->component->option;?>" />		<input type="hidden" name="return" value="<?php echo $this->return;?>" />		<input type="hidden" name="task" value="" />		<?php echo JHtml::_('form.token'); ?>	</div></form><script type="text/javascript">		jQuery('#configTabs a:first').tab('show'); // Select first tab</script>
<?php/** * @package     Joomla.Administrator * @subpackage  com_contact * * @copyright   Copyright (C) 2005 - 2013 Open Source Matters, Inc. All rights reserved. * @license     GNU General Public License version 2 or later; see LICENSE.txt */defined('_JEXEC') or die;// Include the component HTML helpers.JHtml::addIncludePath(JPATH_COMPONENT . '/helpers/html');JHtml::_('behavior.tooltip');JHtml::_('behavior.formvalidation');JHtml::_('formbehavior.chosen', 'select');$app = JFactory::getApplication();$input = $app->input;$assoc = isset($app->item_associations) ? $app->item_associations : 0;?><script type="text/javascript">	Joomla.submitbutton = function(task)	{		if (task == 'contact.cancel' || document.formvalidator.isValid(document.id('contact-form')))		{			<?php echo $this->form->getField('misc')->save(); ?>			Joomla.submitform(task, document.getElementById('contact-form'));		}	}</script><form action="<?php echo JRoute::_('index.php?option=com_contact&layout=edit&id='.(int) $this->item->id); ?>" method="post" name="adminForm" id="contact-form" class="form-validate form-horizontal">	<div class="row-fluid">		<!-- Begin contact -->		<div class="span10 form-horizontal">		<fieldset>			<?php echo JHtml::_('bootstrap.startTabSet', 'myTab', array('active' => 'details')); ?>				<?php echo JHtml::_('bootstrap.addTab', 'myTab', 'details', empty($this->item->id) ? JText::_('COM_CONTACT_NEW_CONTACT', true) : JText::sprintf('COM_CONTACT_EDIT_CONTACT', $this->item->id, true)); ?>				<div class="control-group">					<div class="control-label"><?php echo $this->form->getLabel('name'); ?></div>					<div class="controls"><?php echo $this->form->getInput('name'); ?></div>				</div>				<div class="control-group">					<div class="control-label"><?php echo $this->form->getLabel('alias'); ?></div>					<div class="controls"><?php echo $this->form->getInput('alias'); ?></div>				</div>				<div class="control-group">					<div class="control-label"><?php echo $this->form->getLabel('user_id'); ?></div>					<div class="controls"><?php echo $this->form->getInput('user_id'); ?></div>				</div>				<div class="control-group">					<div class="control-label"><?php echo $this->form->getLabel('catid'); ?></div>					<div class="controls"><?php echo $this->form->getInput('catid'); ?></div>				</div>				<div class="control-group">					<div class="control-label"><?php echo $this->form->getLabel('ordering'); ?></div>					<div class="controls"><?php echo $this->form->getInput('ordering'); ?></div>				</div>				<div class="control-group">					<div class="control-label"><?php echo $this->form->getLabel('id'); ?></div>					<div class="controls"><?php echo $this->form->getInput('id'); ?></div>				</div>				<div class="control-group form-inline">					<?php echo $this->form->getLabel('misc'); ?>				</div>					<?php echo $this->form->getInput('misc'); ?>			<?php echo JHtml::_('bootstrap.endTab'); ?>			<?php echo JHtml::_('bootstrap.addTab', 'myTab', 'publishing', JText::_('JGLOBAL_FIELDSET_PUBLISHING', true)); ?>				<div class="control-group">					<div class="control-label"><?php echo $this->form->getLabel('created_by'); ?></div>					<div class="controls"><?php echo $this->form->getInput('created_by'); ?></div>				</div>				<div class="control-group">					<div class="control-label"><?php echo $this->form->getLabel('created_by_alias'); ?></div>					<div class="controls"><?php echo $this->form->getInput('created_by_alias'); ?></div>				</div>				<div class="control-group">					<div class="control-label"><?php echo $this->form->getLabel('created'); ?></div>					<div class="controls"><?php echo $this->form->getInput('created'); ?></div>				</div>				<div class="control-group">					<div class="control-label"><?php echo $this->form->getLabel('publish_up'); ?></div>					<div class="controls"><?php echo $this->form->getInput('publish_up'); ?></div>				</div>				<div class="control-group">					<div class="control-label"><?php echo $this->form->getLabel('publish_down'); ?></div>					<div class="controls"><?php echo $this->form->getInput('publish_down'); ?></div>				</div>					<?php if ($this->item->modified_by) : ?>						<div class="control-group">							<div class="control-label"><?php echo $this->form->getLabel('modified_by'); ?></div>							<div class="controls"><?php echo $this->form->getInput('modified_by'); ?></div>						</div>						<div class="control-group">							<div class="control-label"><?php echo $this->form->getLabel('modified'); ?></div>							<div class="controls"><?php echo $this->form->getInput('modified'); ?></div>						</div>					<?php endif; ?>				<?php if ($this->item->version) : ?>					<div class="control-group">						<div class="control-label">							<?php echo $this->form->getLabel('version'); ?>						</div>						<div class="controls">							<?php echo $this->form->getInput('version'); ?>						</div>					</div>				<?php endif; ?>				<?php if ($this->item->hits) : ?>					<div class="control-group">						<div class="control-label">							<?php echo $this->form->getLabel('hits'); ?>						</div>						<div class="controls">							<?php echo $this->form->getInput('hits'); ?>						</div>					</div>				<?php endif; ?>			<?php echo JHtml::_('bootstrap.endTab'); ?>			<?php echo JHtml::_('bootstrap.addTab', 'myTab', 'basic', JText::_('COM_CONTACT_CONTACT_DETAILS', true)); ?>				<p><?php echo empty($this->item->id) ? JText::_('COM_CONTACT_DETAILS', true) : JText::sprintf('COM_CONTACT_EDIT_DETAILS', $this->item->id, true); ?></p>				<div class="control-group">					<div class="control-label"><?php echo $this->form->getLabel('image'); ?></div>					<div class="controls"><?php echo $this->form->getInput('image'); ?></div>				</div>				<div class="control-group">					<div class="control-label"><?php echo $this->form->getLabel('con_position'); ?></div>					<div class="controls"><?php echo $this->form->getInput('con_position'); ?></div>				</div>				<div class="control-group">					<div class="control-label"><?php echo $this->form->getLabel('email_to'); ?></div>					<div class="controls"><?php echo $this->form->getInput('email_to'); ?></div>				</div>				<div class="control-group">					<div class="control-label"><?php echo $this->form->getLabel('address'); ?></div>					<div class="controls"><?php echo $this->form->getInput('address'); ?></div>				</div>				<div class="control-group">					<div class="control-label"><?php echo $this->form->getLabel('suburb'); ?></div>					<div class="controls"><?php echo $this->form->getInput('suburb'); ?></div>				</div>				<div class="control-group">					<div class="control-label"><?php echo $this->form->getLabel('state'); ?></div>					<div class="controls"><?php echo $this->form->getInput('state'); ?></div>				</div>				<div class="control-group">					<div class="control-label"><?php echo $this->form->getLabel('postcode'); ?></div>					<div class="controls"><?php echo $this->form->getInput('postcode'); ?></div>				</div>				<div class="control-group">					<div class="control-label"><?php echo $this->form->getLabel('country'); ?></div>					<div class="controls"><?php echo $this->form->getInput('country'); ?></div>				</div>				<div class="control-group">					<div class="control-label"><?php echo $this->form->getLabel('telephone'); ?></div>					<div class="controls"><?php echo $this->form->getInput('telephone'); ?></div>				</div>				<div class="control-group">					<div class="control-label"><?php echo $this->form->getLabel('mobile'); ?></div>					<div class="controls"><?php echo $this->form->getInput('mobile'); ?></div>				</div>				<div class="control-group">					<div class="control-label"><?php echo $this->form->getLabel('fax'); ?></div>					<div class="controls"><?php echo $this->form->getInput('fax'); ?></div>				</div>				<div class="control-group">					<div class="control-label"><?php echo $this->form->getLabel('webpage'); ?></div>					<div class="controls"><?php echo $this->form->getInput('webpage'); ?></div>				</div>				<div class="control-group">					<div class="control-label"><?php echo $this->form->getLabel('sortname1'); ?></div>					<div class="controls"><?php echo $this->form->getInput('sortname1'); ?></div>				</div>				<div class="control-group">					<div class="control-label"><?php echo $this->form->getLabel('sortname2'); ?></div>					<div class="controls"><?php echo $this->form->getInput('sortname2'); ?></div>				</div>				<div class="control-group">					<div class="control-label"><?php echo $this->form->getLabel('sortname3'); ?></div>					<div class="controls"><?php echo $this->form->getInput('sortname3'); ?></div>				</div>			<?php echo JHtml::_('bootstrap.endTab'); ?>			<?php echo $this->loadTemplate('params'); ?>			<?php echo JHtml::_('bootstrap.addTab', 'myTab', 'metadata', JText::_('JGLOBAL_FIELDSET_METADATA_OPTIONS', true)); ?>					<?php echo $this->loadTemplate('metadata'); ?>			<?php echo JHtml::_('bootstrap.endTab'); ?>			<?php if ($assoc) : ?>				<?php echo JHtml::_('bootstrap.addTab', 'myTab', 'associations', JText::_('JGLOBAL_FIELDSET_ASSOCIATIONS', true)); ?>					<?php echo $this->loadTemplate('associations'); ?>				<?php echo JHtml::_('bootstrap.endTab'); ?>			<?php endif; ?>			<?php echo JHtml::_('bootstrap.endTabSet'); ?>		</fieldset>		<input type="hidden" name="task" value="" />		<?php echo JHtml::_('form.token'); ?>	</div>	<!-- End content -->	<!-- Begin Sidebar -->		<?php echo JLayoutHelper::render('joomla.edit.details', $this); ?>	<!-- End Sidebar --></form>
<?php/** * @package     Joomla.Administrator * @subpackage  com_messages * * @copyright   Copyright (C) 2005 - 2013 Open Source Matters, Inc. All rights reserved. * @license     GNU General Public License version 2 or later; see LICENSE.txt */defined('_JEXEC') or die;/** * Message Table class * * @package     Joomla.Administrator * @subpackage  com_messages * @since       1.5 */class MessagesTableMessage extends JTable{	/**	 * Constructor	 *	 * @param database A database connector object	 */	public function __construct(& $db)	{		parent::__construct('#__messages', 'message_id', $db);	}	/**	 * Validation and filtering.	 *	 * @return  boolean	 */	public function check()	{		// Check the to and from users.		$user = new JUser($this->user_id_from);		if (empty($user->id))		{			$this->setError(JText::_('COM_MESSAGES_ERROR_INVALID_FROM_USER'));			return false;		}		$user = new JUser($this->user_id_to);		if (empty($user->id))		{			$this->setError(JText::_('COM_MESSAGES_ERROR_INVALID_TO_USER'));			return false;		}		if (empty($this->subject))		{			$this->setError(JText::_('COM_MESSAGES_ERROR_INVALID_SUBJECT'));			return false;		}		if (empty($this->message))		{			$this->setError(JText::_('COM_MESSAGES_ERROR_INVALID_MESSAGE'));			return false;		}		return true;	}	/**	 * Method to set the publishing state for a row or list of rows in the database	 * table.  The method respects checked out rows by other users and will attempt	 * to checkin rows that it can after adjustments are made.	 *	 * @param   mixed	An optional array of primary key values to update.  If not	 *					set the instance property value is used.	 * @param   integer The publishing state. eg. [0 = unpublished, 1 = published]	 * @param   integer The user id of the user performing the operation.	 * @return  boolean  True on success.	 * @since   1.6	 */	public function publish($pks = null, $state = 1, $userId = 0)	{		$k = $this->_tbl_key;		// Sanitize input.		JArrayHelper::toInteger($pks);		$userId = (int) $userId;		$state  = (int) $state;		// If there are no primary keys set check to see if the instance key is set.		if (empty($pks))		{			if ($this->$k)			{				$pks = array($this->$k);			}			// Nothing to set publishing state on, return false.			else {				$this->setError(JText::_('JLIB_DATABASE_ERROR_NO_ROWS_SELECTED'));				return false;			}		}		// Build the WHERE clause for the primary keys.		$where = $k.' IN ('.implode(',', $pks).')';		// Update the publishing state for rows with the given primary keys.		$this->_db->setQuery(			'UPDATE '.$this->_db->quoteName($this->_tbl).			' SET '.$this->_db->quoteName('state').' = '.(int) $state .			' WHERE ('.$where.')'		);		try		{			$this->_db->execute();		}		catch (RuntimeException $e)		{			$this->setError($e->getMessage());			return false;		}		// If the JTable instance value is in the list of primary keys that were set, set the instance.		if (in_array($this->$k, $pks))		{			$this->state = $state;		}		$this->setError('');		return true;	}}
<?php/** * @package     Joomla.Administrator * @subpackage  com_tags * * @copyright   Copyright (C) 2005 - 2013 Open Source Matters, Inc. All rights reserved. * @license     GNU General Public License version 2 or later; see LICENSE.txt */defined('_JEXEC') or die;/** * Tags helper. * * @package     Joomla.Administrator * @subpackage  com_tags * @since       3.1 */class TagsHelper{	/**	 * Configure the Submenu links.	 *	 * @param   string  The extension.	 *	 * @return  void	 *	 * @since   3.1	 */	public static function addSubmenu($extension)	{		$parts = explode('.', $extension);		$component = $parts[0];		if (count($parts) > 1)		{			$section = $parts[1];		}		// Try to find the component helper.		$file = JPath::clean(JPATH_ADMINISTRATOR . '/components/com_tags/helpers/tags.php');		if (file_exists($file))		{			require_once $file;			$cName = 'TagsHelper';			if (class_exists($cName))			{				if (is_callable(array($cName, 'addSubmenu')))				{					$lang = JFactory::getLanguage();					// loading language file from the administrator/language directory then					// loading language file from the administrator/components/*extension*/language directory						$lang->load($component, JPATH_BASE, null, false, false)					||	$lang->load($component, JPath::clean(JPATH_ADMINISTRATOR . '/components/' . $component), null, false, false)					||	$lang->load($component, JPATH_BASE, $lang->getDefault(), false, false)					||	$lang->load($component, JPath::clean(JPATH_ADMINISTRATOR . '/components/' . $component), $lang->getDefault(), false, false);				}			}		}	}	/**	 * Gets a list of the actions that can be performed.	 *	 * @return  JObject	 *	 * @since   3.1	 */	public static function getActions()	{		$user   = JFactory::getUser();		$result = new JObject;		$assetName = 'com_tags';		$level     = 'component';		$actions   = JAccess::getActions('com_tags', $level);		foreach ($actions as $action)		{			$result->set($action->name, $user->authorise($action->name, $assetName));		}		return $result;	}}
<?php/** * @package     Joomla.Libraries * @subpackage  Helper * * @copyright   Copyright (C) 2005 - 2013 Open Source Matters, Inc. All rights reserved. * @license     GNU General Public License version 2 or later; see LICENSE.txt */defined('_JEXEC') or die;/** * Helper for standard content style extensions. * * @package     Joomla.Libraries * @subpackage  Helper * @since       3.1 */class JHelperContent{	/**	 * Configure the Linkbar. Must be implemented by each extension.	 *	 * @param   string  $vName  The name of the active view.	 *	 * @return  void	 *	 * @since   3.1	 */	public static function addSubmenu($vName)	{	}	/**	 * Gets a list of the actions that can be performed.	 *	 * @param   integer  $categoryId  The category ID.	 * @param   integer  $id          The item ID.	 * @param   string   $assetName   The asset name	 *	 * @return  JObject	 *	 * @since   3.1	 */	public static function getActions($categoryId = 0, $id = 0, $assetName = '')	{		// Reverted a change for version 2.5.6		$user	= JFactory::getUser();		$result	= new JObject;		$actions = array(			'core.admin', 'core.manage', 'core.create', 'core.edit', 'core.edit.own', 'core.edit.state', 'core.delete'		);		foreach ($actions as $action)		{			$result->set($action, $user->authorise($action, $assetName));		}		return $result;	}	/**	 * Gets the current language	 *	 * @param   boolean  $detectBrowser  Flag indicating whether to use the browser language as a fallback.	 *	 * @return  string  The language string	 *	 * @since   3.1	 */	public static function getCurrentLanguage($detectBrowser = true)	{		$app = JFactory::getApplication();		$langCode = $app->input->cookie->getString(JApplication::getHash('language'));		// No cookie - let's try to detect browser language or use site default		if (!$langCode)		{			if ($detectBrowser)			{				$langCode = JLanguageHelper::detectLanguage();			}			else			{				$langCode = JComponentHelper::getParams('com_languages')->get('site', 'en-GB');			}		}		return $langCode;	}	/**	* Gets the associated language ID	*	* @param   string  $langCode  The language code to look up	*	* @return  integer  The language ID	*	* @since   3.1	*/	public static function getLanguageId($langCode)	{		$db    = JFactory::getDbo();		$query = $db->getQuery(true)			->select('lang_id')			->from('#__languages')			->where($db->quoteName('lang_code') . ' = ' . $db->quote($langCode));		$db->setQuery($query);		$id = $db->loadResult();		return $id;	}	/**	 * Gets a row of data from a table	 *	 * @param   JTable  $table  JTable instance for a row.	 *	 * @return  array  Associative array of all columns and values for a row in a table.	 *	 * @since   3.1	 */	public function getRowData($table)	{		$fields = $table->getFields();		$data = array();		foreach ($fields as &$field)		{			$columnName = $field->Field;			$value = $table->$columnName;			$data[$columnName] = $value;		}		return $data;	}}
<?php/** * @package     Joomla.Administrator * @subpackage  com_users * * @copyright   Copyright (C) 2005 - 2013 Open Source Matters, Inc. All rights reserved. * @license     GNU General Public License version 2 or later; see LICENSE.txt */defined('_JEXEC') or die;// Include the component HTML helpers.JHtml::addIncludePath(JPATH_COMPONENT.'/helpers/html');// Load the tooltip behavior.JHtml::_('bootstrap.tooltip');JHtml::_('behavior.multiselect');$user		= JFactory::getUser();$listOrder	= $this->escape($this->state->get('list.ordering'));$listDirn	= $this->escape($this->state->get('list.direction'));$canOrder	= $user->authorise('core.edit.state', 'com_users');$saveOrder	= $listOrder == 'a.ordering';?><form action="<?php echo JRoute::_('index.php?option=com_users&view=levels');?>" method="post" id="adminForm" name="adminForm"><?php if (!empty( $this->sidebar)) : ?>	<div id="j-sidebar-container" class="span2">		<?php echo $this->sidebar; ?>	</div>	<div id="j-main-container" class="span10"><?php else : ?>	<div id="j-main-container"><?php endif;?>		<div id="filter-bar" class="btn-toolbar">			<div class="filter-search btn-group pull-left">				<input type="text" name="filter_search" placeholder="<?php echo JText::_('COM_USERS_SEARCH_ACCESS_LEVELS'); ?>" id="filter_search" value="<?php echo $this->escape($this->state->get('filter.search')); ?>" title="<?php echo JText::_('COM_USERS_SEARCH_TITLE_LEVELS'); ?>" />			</div>			<div class="filter-search btn-group pull-left">				<button class="btn hasTooltip" type="submit" title="<?php echo JText::_('JSEARCH_FILTER_SUBMIT'); ?>"><i class="icon-search"></i></button>				<button class="btn hasTooltip" type="button" onclick="document.id('filter_search').value='';this.form.submit();" title="<?php echo JText::_('JSEARCH_RESET'); ?>"><i class="icon-remove"></i></button>			</div>		</div>		<div class="clearfix"> </div>		<table class="table table-striped">			<thead>				<tr>					<th width="1%">						<input type="checkbox" name="checkall-toggle" value="" title="<?php echo JText::_('JGLOBAL_CHECK_ALL'); ?>" onclick="Joomla.checkAll(this)" />					</th>					<th class="left">						<?php echo JHtml::_('grid.sort', 'COM_USERS_HEADING_LEVEL_NAME', 'a.title', $listDirn, $listOrder); ?>					</th>					<th width="10%" class="nowrap">						<?php echo JHtml::_('grid.sort', 'JGRID_HEADING_ORDERING', 'a.ordering', $listDirn, $listOrder); ?>						<?php if ($canOrder && $saveOrder) :?>							<?php echo JHtml::_('grid.order', $this->items, 'filesave.png', 'levels.saveorder'); ?>						<?php endif; ?>					</th>					<th width="5%" class="nowrap center hidden-phone">						<?php echo JText::_('JGRID_HEADING_ID'); ?>					</th>					<th width="40%">						&#160;					</th>				</tr>			</thead>			<tfoot>				<tr>					<td colspan="15">						<?php echo $this->pagination->getListFooter(); ?>					</td>				</tr>			</tfoot>			<tbody>			<?php $count = count($this->items); ?>			<?php foreach ($this->items as $i => $item) :				$ordering  = ($listOrder == 'a.ordering');				$canCreate = $user->authorise('core.create',     'com_users');				$canEdit   = $user->authorise('core.edit',       'com_users');				$canChange = $user->authorise('core.edit.state', 'com_users');				?>				<tr class="row<?php echo $i % 2; ?>">					<td class="center">						<?php echo JHtml::_('grid.id', $i, $item->id); ?>					</td>					<td>						<?php if ($canEdit) : ?>						<a href="<?php echo JRoute::_('index.php?option=com_users&task=level.edit&id='.$item->id);?>">							<?php echo $this->escape($item->title); ?></a>						<?php else : ?>							<?php echo $this->escape($item->title); ?>						<?php endif; ?>					</td>					<td class="order">						<?php if ($canChange) : ?>							<div class="input-prepend">							<?php if ($saveOrder) :?>								<?php if ($listDirn == 'asc') : ?>									<span class="add-on"><?php echo $this->pagination->orderUpIcon($i, true, 'levels.orderup', 'JLIB_HTML_MOVE_UP', $ordering); ?></span>									<span class="add-on"><?php echo $this->pagination->orderDownIcon($i, $count, true, 'levels.orderdown', 'JLIB_HTML_MOVE_DOWN', $ordering); ?></span>								<?php elseif ($listDirn == 'desc') : ?>									<span class="add-on"><?php echo $this->pagination->orderUpIcon($i, true, 'levels.orderdown', 'JLIB_HTML_MOVE_UP', $ordering); ?></span>									<span class="add-on"><?php echo $this->pagination->orderDownIcon($i, $count, true, 'levels.orderup', 'JLIB_HTML_MOVE_DOWN', $ordering); ?></span>								<?php endif; ?>							<?php endif; ?>							<?php $disabled = $saveOrder ? '' : 'disabled="disabled"'; ?>						 	<input type="text" name="order[]" size="5" value="<?php echo $item->ordering;?>" <?php echo $disabled ?> class="width-20 text-area-order" />						 </div>						<?php else : ?>							<?php echo $item->ordering; ?>						<?php endif; ?>					</td>					<td class="center">						<?php echo (int) $item->id; ?>					</td>					<td>						&#160;					</td>				</tr>			<?php endforeach; ?>			</tbody>		</table>		<input type="hidden" name="task" value="" />		<input type="hidden" name="boxchecked" value="0" />		<input type="hidden" name="filter_order" value="<?php echo $listOrder; ?>" />		<input type="hidden" name="filter_order_Dir" value="<?php echo $listDirn; ?>" />		<?php echo JHtml::_('form.token'); ?>	</div></form>
<?php/** * @package     Joomla.Administrator * @subpackage  com_weblinks * * @copyright   Copyright (C) 2005 - 2013 Open Source Matters, Inc. All rights reserved. * @license     GNU General Public License version 2 or later; see LICENSE.txt */defined('_JEXEC') or die;/** * Weblink controller class. * * @package     Joomla.Administrator * @subpackage  com_weblinks * @since       1.6 */class WeblinksControllerWeblink extends JControllerForm{	/**	 * Method override to check if you can add a new record.	 *	 * @param   array  $data  An array of input data.	 *	 * @return  boolean	 *	 * @since   1.6	 */	protected function allowAdd($data = array())	{		$user = JFactory::getUser();		$categoryId = JArrayHelper::getValue($data, 'catid', $this->input->getInt('filter_category_id'), 'int');		$allow = null;		if ($categoryId)		{			// If the category has been passed in the URL check it.			$allow = $user->authorise('core.create', $this->option . '.category.' . $categoryId);		}		if ($allow === null)		{			// In the absense of better information, revert to the component permissions.			return parent::allowAdd($data);		}		else		{			return $allow;		}	}	/**	 * Method to check if you can add a new record.	 *	 * @param   array   $data  An array of input data.	 * @param   string  $key   The name of the key for the primary key.	 *	 * @return  boolean	 * @since   1.6	 */	protected function allowEdit($data = array(), $key = 'id')	{		$recordId = (int) isset($data[$key]) ? $data[$key] : 0;		$categoryId = 0;		if ($recordId)		{			$categoryId = (int) $this->getModel()->getItem($recordId)->catid;		}		if ($categoryId)		{			// The category has been set. Check the category permissions.			return JFactory::getUser()->authorise('core.edit', $this->option . '.category.' . $categoryId);		}		else		{			// Since there is no asset tracking, revert to the component permissions.			return parent::allowEdit($data, $key);		}	}	/**	 * Method to run batch operations.	 *	 * @param   object  $model  The model.	 *	 * @return  boolean   True if successful, false otherwise and internal error is set.	 *	 * @since   1.7	 */	public function batch($model = null)	{		JSession::checkToken() or jexit(JText::_('JINVALID_TOKEN'));		// Set the model		$model = $this->getModel('Weblink', '', array());		// Preset the redirect		$this->setRedirect(JRoute::_('index.php?option=com_weblinks&view=weblinks' . $this->getRedirectToListAppend(), false));		return parent::batch($model);	}	/**	 * Function that allows child controller access to model data after the data has been saved.	 *	 * @param   JModelLegacy  $model      The data model object.	 * @param   array         $validData  The validated data.	 *	 * @return	void	 * @since	1.6	 */	protected function postSaveHook(JModelLegacy $model, $validData = array())	{		if ($task == 'save')		{			$this->setRedirect(JRoute::_('index.php?option=com_weblinks&view=weblinks', false));		}	}}
<?php/** * @package     Joomla.Administrator * @subpackage  com_users * * @copyright   Copyright (C) 2005 - 2013 Open Source Matters, Inc. All rights reserved. * @license     GNU General Public License version 2 or later; see LICENSE.txt */defined('_JEXEC') or die;if (!JFactory::getUser()->authorise('core.manage', 'com_users')){	return JError::raiseWarning(404, JText::_('JERROR_ALERTNOAUTHOR'));}JLoader::register('UsersHelper', __DIR__ . '/helpers/users.php');$controller	= JControllerLegacy::getInstance('Users');$controller->execute(JFactory::getApplication()->input->get('task'));$controller->redirect();
<?php/** * @package     Joomla.Administrator * @subpackage  com_templates * * @copyright   Copyright (C) 2005 - 2013 Open Source Matters, Inc. All rights reserved. * @license     GNU General Public License version 2 or later; see LICENSE.txt */defined('_JEXEC') or die;/** * Template style model. * * @package     Joomla.Administrator * @subpackage  com_templates * @since       1.6 */class TemplatesModelStyle extends JModelAdmin{	/**	 * @var		string	The help screen key for the module.	 * @since   1.6	 */	protected $helpKey = 'JHELP_EXTENSIONS_TEMPLATE_MANAGER_STYLES_EDIT';	/**	 * @var		string	The help screen base URL for the module.	 * @since   1.6	 */	protected $helpURL;	/**	 * Item cache.	 */	private $_cache = array();	/**	 * Method to auto-populate the model state.	 *	 * Note. Calling getState in this method will result in recursion.	 *	 * @since   1.6	 */	protected function populateState()	{		$app = JFactory::getApplication('administrator');		// Load the User state.		$pk = $app->input->getInt('id');		$this->setState('style.id', $pk);		// Load the parameters.		$params	= JComponentHelper::getParams('com_templates');		$this->setState('params', $params);	}	/**	 * Method to delete rows.	 *	 * @param   array  An array of item ids.	 *	 * @return  boolean  Returns true on success, false on failure.	 */	public function delete(&$pks)	{		$pks	= (array) $pks;		$user	= JFactory::getUser();		$table	= $this->getTable();		// Iterate the items to delete each one.		foreach ($pks as $i => $pk)		{			if ($table->load($pk))			{				// Access checks.				if (!$user->authorise('core.delete', 'com_templates'))				{					throw new Exception(JText::_('JERROR_CORE_DELETE_NOT_PERMITTED'));				}				// You should not delete a default style				if ($table->home != '0'){					JError::raiseWarning(SOME_ERROR_NUMBER, Jtext::_('COM_TEMPLATES_STYLE_CANNOT_DELETE_DEFAULT_STYLE'));					return false;				}				if (!$table->delete($pk))				{					$this->setError($table->getError());					return false;				}			}			else {				$this->setError($table->getError());				return false;			}		}		// Clean cache		$this->cleanCache();		return true;	}	/**	 * Method to duplicate styles.	 *	 * @param   array  An array of primary key IDs.	 *	 * @return  boolean  True if successful.	 * @throws	Exception	 */	public function duplicate(&$pks)	{		$user	= JFactory::getUser();		$db		= $this->getDbo();		// Access checks.		if (!$user->authorise('core.create', 'com_templates'))		{			throw new Exception(JText::_('JERROR_CORE_CREATE_NOT_PERMITTED'));		}		$table = $this->getTable();		foreach ($pks as $pk)		{			if ($table->load($pk, true))			{				// Reset the id to create a new record.				$table->id = 0;				// Reset the home (don't want dupes of that field).				$table->home = 0;				// Alter the title.				$m = null;				$table->title = $this->generateNewTitle(null, null, $table->title);				if (!$table->check() || !$table->store())				{					throw new Exception($table->getError());				}			}			else {				throw new Exception($table->getError());			}		}		// Clean cache		$this->cleanCache();		return true;	}	/**	 * Method to change the title.	 *	 * @param   integer  $category_id  The id of the category.	 * @param   string   $alias        The alias.	 * @param   string   $title        The title.	 *	 * @return  string  New title.	 * @since   1.7.1	 */	protected function generateNewTitle($category_id, $alias, $title)	{		// Alter the title		$table = $this->getTable();		while ($table->load(array('title' => $title)))		{			$title = JString::increment($title);		}		return $title;	}	/**	 * Method to get the record form.	 *	 * @param   array  $data		An optional array of data for the form to interogate.	 * @param   boolean	$loadData	True if the form is to load its own data (default case), false if not.	 * @return  JForm	A JForm object on success, false on failure	 * @since   1.6	 */	public function getForm($data = array(), $loadData = true)	{		$app = JFactory::getApplication();		// The folder and element vars are passed when saving the form.		if (empty($data))		{			$item		= $this->getItem();			$clientId	= $item->client_id;			$template	= $item->template;		}		else		{			$clientId	= JArrayHelper::getValue($data, 'client_id');			$template	= JArrayHelper::getValue($data, 'template');		}		// These variables are used to add data from the plugin XML files.		$this->setState('item.client_id',	$clientId);		$this->setState('item.template',	$template);		// Get the form.		$form = $this->loadForm('com_templates.style', 'style', array('control' => 'jform', 'load_data' => $loadData));		if (empty($form))		{			return false;		}		// Modify the form based on access controls.		if (!$this->canEditState((object) $data))		{			// Disable fields for display.			$form->setFieldAttribute('home', 'disabled', 'true');			// Disable fields while saving.			// The controller has already verified this is a record you can edit.			$form->setFieldAttribute('home', 'filter', 'unset');		}		return $form;	}	/**	 * Method to get the data that should be injected in the form.	 *	 * @return  mixed  The data for the form.	 * @since   1.6	 */	protected function loadFormData()	{		// Check the session for previously entered form data.		$data = JFactory::getApplication()->getUserState('com_templates.edit.style.data', array());		if (empty($data))		{			$data = $this->getItem();		}		$this->preprocessData('com_templates.style', $data);		return $data;	}	/**	 * Method to get a single record.	 *	 * @param   integer	The id of the primary key.	 *	 * @return  mixed  Object on success, false on failure.	 */	public function getItem($pk = null)	{		$pk = (!empty($pk)) ? $pk : (int) $this->getState('style.id');		if (!isset($this->_cache[$pk]))		{			$false	= false;			// Get a row instance.			$table = $this->getTable();			// Attempt to load the row.			$return = $table->load($pk);			// Check for a table object error.			if ($return === false && $table->getError())			{				$this->setError($table->getError());				return $false;			}			// Convert to the JObject before adding other data.			$properties = $table->getProperties(1);			$this->_cache[$pk] = JArrayHelper::toObject($properties, 'JObject');			// Convert the params field to an array.			$registry = new JRegistry;			$registry->loadString($table->params);			$this->_cache[$pk]->params = $registry->toArray();			// Get the template XML.			$client	= JApplicationHelper::getClientInfo($table->client_id);			$path	= JPath::clean($client->path.'/templates/'.$table->template.'/templateDetails.xml');			if (file_exists($path))			{				$this->_cache[$pk]->xml = simplexml_load_file($path);			}			else {				$this->_cache[$pk]->xml = null;			}		}		return $this->_cache[$pk];	}	/**	 * Returns a reference to the a Table object, always creating it.	 *	 * @param   type	The table type to instantiate	 * @param   string	A prefix for the table class name. Optional.	 * @param   array  Configuration array for model. Optional.	 * @return  JTable	A database object	*/	public function getTable($type = 'Style', $prefix = 'TemplatesTable', $config = array())	{		return JTable::getInstance($type, $prefix, $config);	}	/**	 * @param   object	A form object.	 * @param   mixed	The data expected for the form.	 * @throws	Exception if there is an error in the form event.	 * @since   1.6	 */	protected function preprocessForm(JForm $form, $data, $group = 'content')	{		$clientId	= $this->getState('item.client_id');		$template	= $this->getState('item.template');		$lang		= JFactory::getLanguage();		$client		= JApplicationHelper::getClientInfo($clientId);		if (!$form->loadFile('style_'.$client->name, true))		{			throw new Exception(JText::_('JERROR_LOADFILE_FAILED'));		}		jimport('joomla.filesystem.path');		$formFile	= JPath::clean($client->path.'/templates/'.$template.'/templateDetails.xml');		// Load the core and/or local language file(s).			$lang->load('tpl_'.$template, $client->path, null, false, false)		||	$lang->load('tpl_'.$template, $client->path.'/templates/'.$template, null, false, false)		||	$lang->load('tpl_'.$template, $client->path, $lang->getDefault(), false, false)		||	$lang->load('tpl_'.$template, $client->path.'/templates/'.$template, $lang->getDefault(), false, false);		if (file_exists($formFile))		{			// Get the template form.			if (!$form->loadFile($formFile, false, '//config'))			{				throw new Exception(JText::_('JERROR_LOADFILE_FAILED'));			}		}		// Disable home field if it is default style		if ((is_array($data) && array_key_exists('home', $data) && $data['home'] == '1')			|| ((is_object($data) && isset($data->home) && $data->home == '1')))		{			$form->setFieldAttribute('home', 'readonly', 'true');		}		// Attempt to load the xml file.		if (!$xml = simplexml_load_file($formFile))		{			throw new Exception(JText::_('JERROR_LOADFILE_FAILED'));		}		// Get the help data from the XML file if present.		$help = $xml->xpath('/extension/help');		if (!empty($help))		{			$helpKey = trim((string) $help[0]['key']);			$helpURL = trim((string) $help[0]['url']);			$this->helpKey = $helpKey ? $helpKey : $this->helpKey;			$this->helpURL = $helpURL ? $helpURL : $this->helpURL;		}		// Trigger the default form events.		parent::preprocessForm($form, $data, $group);	}	/**	 * Method to save the form data.	 *	 * @param   array  The form data.	 * @return  boolean  True on success.	 */	public function save($data)	{		// Detect disabled extension		$extension = JTable::getInstance('Extension');		if ($extension->load(array('enabled' => 0, 'type' => 'template', 'element' => $data['template'], 'client_id' => $data['client_id'])))		{			$this->setError(JText::_('COM_TEMPLATES_ERROR_SAVE_DISABLED_TEMPLATE'));			return false;		}		$app        = JFactory::getApplication();		$dispatcher = JEventDispatcher::getInstance();		$table      = $this->getTable();		$pk         = (!empty($data['id'])) ? $data['id'] : (int) $this->getState('style.id');		$isNew      = true;		// Include the extension plugins for the save events.		JPluginHelper::importPlugin('extension');		// Load the row if saving an existing record.		if ($pk > 0)		{			$table->load($pk);			$isNew = false;		}		if ($app->input->get('task') == 'save2copy')		{			$data['title'] = $this->generateNewTitle(null, null, $data['title']);			$data['home'] = 0;			$data['assigned'] = '';		}		// Bind the data.		if (!$table->bind($data))		{			$this->setError($table->getError());			return false;		}		// Prepare the row for saving		$this->prepareTable($table);		// Check the data.		if (!$table->check())		{			$this->setError($table->getError());			return false;		}		// Trigger the onExtensionBeforeSave event.		$result = $dispatcher->trigger('onExtensionBeforeSave', array('com_templates.style', &$table, $isNew));		if (in_array(false, $result, true))		{			$this->setError($table->getError());			return false;		}		// Store the data.		if (!$table->store())		{			$this->setError($table->getError());			return false;		}		$user = JFactory::getUser();		if ($user->authorise('core.edit', 'com_menus') && $table->client_id == 0)		{			$n    = 0;			$db   = JFactory::getDbo();			$user = JFactory::getUser();			if (!empty($data['assigned']) && is_array($data['assigned']))			{				JArrayHelper::toInteger($data['assigned']);				// Update the mapping for menu items that this style IS assigned to.				$query = $db->getQuery(true)					->update('#__menu')					->set('template_style_id='.(int) $table->id)					->where('id IN ('.implode(',', $data['assigned']).')')					->where('template_style_id!='.(int) $table->id)					->where('checked_out in (0,'.(int) $user->id.')');				$db->setQuery($query);				$db->execute();				$n += $db->getAffectedRows();			}			// Remove style mappings for menu items this style is NOT assigned to.			// If unassigned then all existing maps will be removed.			$query = $db->getQuery(true)				->update('#__menu')				->set('template_style_id=0');			if (!empty($data['assigned']))			{				$query->where('id NOT IN ('.implode(',', $data['assigned']).')');			}			$query->where('template_style_id='.(int) $table->id)				->where('checked_out in (0,'.(int) $user->id.')');			$db->setQuery($query);			$db->execute();			$n += $db->getAffectedRows();			if ($n > 0)			{				$app->enQueueMessage(JText::plural('COM_TEMPLATES_MENU_CHANGED', $n));			}		}		// Clean the cache.		$this->cleanCache();		// Trigger the onExtensionAfterSave event.		$dispatcher->trigger('onExtensionAfterSave', array('com_templates.style', &$table, $isNew));		$this->setState('style.id', $table->id);		return true;	}	/**	 * Method to set a template style as home.	 *	 * @param   integer  The primary key ID for the style.	 *	 * @return  boolean  True if successful.	 * @throws	Exception	 */	public function setHome($id = 0)	{		$user	= JFactory::getUser();		$db		= $this->getDbo();		// Access checks.		if (!$user->authorise('core.edit.state', 'com_templates'))		{			throw new Exception(JText::_('JLIB_APPLICATION_ERROR_EDITSTATE_NOT_PERMITTED'));		}		$style = JTable::getInstance('Style', 'TemplatesTable');		if (!$style->load((int) $id))		{			throw new Exception(JText::_('COM_TEMPLATES_ERROR_STYLE_NOT_FOUND'));		}		// Detect disabled extension		$extension = JTable::getInstance('Extension');		if ($extension->load(array('enabled' => 0, 'type' => 'template', 'element' => $style->template, 'client_id' => $style->client_id)))		{			throw new Exception(JText::_('COM_TEMPLATES_ERROR_SAVE_DISABLED_TEMPLATE'));		}		// Reset the home fields for the client_id.		$db->setQuery(			'UPDATE #__template_styles' .			' SET home = \'0\'' .			' WHERE client_id = '.(int) $style->client_id .			' AND home = \'1\''		);		$db->execute();		// Set the new home style.		$db->setQuery(			'UPDATE #__template_styles' .			' SET home = \'1\'' .			' WHERE id = '.(int) $id		);		$db->execute();		// Clean the cache.		$this->cleanCache();		return true;	}	/**	 * Method to unset a template style as default for a language.	 *	 * @param   integer  The primary key ID for the style.	 *	 * @return  boolean  True if successful.	 * @throws	Exception	 */	public function unsetHome($id = 0)	{		$user	= JFactory::getUser();		$db		= $this->getDbo();		// Access checks.		if (!$user->authorise('core.edit.state', 'com_templates'))		{			throw new Exception(JText::_('JLIB_APPLICATION_ERROR_EDITSTATE_NOT_PERMITTED'));		}		// Lookup the client_id.		$db->setQuery(			'SELECT client_id, home' .			' FROM #__template_styles' .			' WHERE id = '.(int) $id		);		$style = $db->loadObject();		if (!is_numeric($style->client_id))		{			throw new Exception(JText::_('COM_TEMPLATES_ERROR_STYLE_NOT_FOUND'));		}		elseif ($style->home == '1')		{			throw new Exception(JText::_('COM_TEMPLATES_ERROR_CANNOT_UNSET_DEFAULT_STYLE'));		}		// Set the new home style.		$db->setQuery(			'UPDATE #__template_styles' .			' SET home = \'0\'' .			' WHERE id = '.(int) $id		);		$db->execute();		// Clean the cache.		$this->cleanCache();		return true;	}	/**	 * Get the necessary data to load an item help screen.	 *	 * @return  object  An object with key, url, and local properties for loading the item help screen.	 * @since   1.6	 */	public function getHelp()	{		return (object) array('key' => $this->helpKey, 'url' => $this->helpURL);	}	/**	 * Custom clean cache method	 *	 * @since   1.6	 */	protected function cleanCache($group = null, $client_id = 0)	{		parent::cleanCache('com_templates');		parent::cleanCache('_system');	}}
<?php/** * @package     Joomla.Legacy * @subpackage  Component * * @copyright   Copyright (C) 2005 - 2013 Open Source Matters, Inc. All rights reserved. * @license     GNU General Public License version 2 or later; see LICENSE */defined('JPATH_PLATFORM') or die;/** * Component helper class * * @package     Joomla.Legacy * @subpackage  Component * @since       11.1 */class JComponentHelper{	/**	 * The component list cache	 *	 * @var    array	 * @since  11.1	 */	protected static $components = array();	/**	 * Get the component information.	 *	 * @param   string   $option  The component option.	 * @param   boolean  $strict  If set and the component does not exist, the enabled attribute will be set to false.	 *	 * @return  object   An object with the information for the component.	 *	 * @since   11.1	 */	public static function getComponent($option, $strict = false)	{		if (!isset(self::$components[$option]))		{			if (self::_load($option))			{				$result = self::$components[$option];			}			else			{				$result = new stdClass;				$result->enabled = $strict ? false : true;				$result->params = new JRegistry;			}		}		else		{			$result = self::$components[$option];		}		return $result;	}	/**	 * Checks if the component is enabled	 *	 * @param   string  $option  The component option.	 *	 * @return  boolean	 *	 * @since   11.1	 */	public static function isEnabled($option)	{		$result = self::getComponent($option, true);		return $result->enabled;	}	/**	 * Gets the parameter object for the component	 *	 * @param   string   $option  The option for the component.	 * @param   boolean  $strict  If set and the component does not exist, false will be returned	 *	 * @return  JRegistry  A JRegistry object.	 *	 * @see     JRegistry	 * @since   11.1	 */	public static function getParams($option, $strict = false)	{		$component = self::getComponent($option, $strict);		return $component->params;	}	/**	 * Applies the global text filters to arbitrary text as per settings for current user groups	 *	 * @param   string  $text  The string to filter	 *	 * @return  string  The filtered string	 *	 * @since   11.4	 */	public static function filterText($text)	{		// Filter settings		$config		= self::getParams('com_config');		$user		= JFactory::getUser();		$userGroups	= JAccess::getGroupsByUser($user->get('id'));		$filters = $config->get('filters');		$blackListTags			= array();		$blackListAttributes	= array();		$customListTags			= array();		$customListAttributes	= array();		$whiteListTags			= array();		$whiteListAttributes	= array();		$noHtml		= false;		$whiteList	= false;		$blackList	= false;		$customList	= false;		$unfiltered	= false;		// Cycle through each of the user groups the user is in.		// Remember they are included in the Public group as well.		foreach ($userGroups as $groupId)		{			// May have added a group by not saved the filters.			if (!isset($filters->$groupId))			{				continue;			}			// Each group the user is in could have different filtering properties.			$filterData = $filters->$groupId;			$filterType	= strtoupper($filterData->filter_type);			if ($filterType == 'NH')			{				// Maximum HTML filtering.				$noHtml = true;			}			elseif ($filterType == 'NONE')			{				// No HTML filtering.				$unfiltered = true;			}			else			{				// Black or white list.				// Preprocess the tags and attributes.				$tags			= explode(',', $filterData->filter_tags);				$attributes		= explode(',', $filterData->filter_attributes);				$tempTags		= array();				$tempAttributes	= array();				foreach ($tags as $tag)				{					$tag = trim($tag);					if ($tag)					{						$tempTags[] = $tag;					}				}				foreach ($attributes as $attribute)				{					$attribute = trim($attribute);					if ($attribute)					{						$tempAttributes[] = $attribute;					}				}				// Collect the black or white list tags and attributes.				// Each list is cummulative.				if ($filterType == 'BL')				{					$blackList				= true;					$blackListTags			= array_merge($blackListTags, $tempTags);					$blackListAttributes	= array_merge($blackListAttributes, $tempAttributes);				}				elseif ($filterType == 'CBL')				{					// Only set to true if Tags or Attributes were added					if ($tempTags || $tempAttributes)					{						$customList				= true;						$customListTags			= array_merge($customListTags, $tempTags);						$customListAttributes	= array_merge($customListAttributes, $tempAttributes);					}				}				elseif ($filterType == 'WL')				{					$whiteList				= true;					$whiteListTags			= array_merge($whiteListTags, $tempTags);					$whiteListAttributes	= array_merge($whiteListAttributes, $tempAttributes);				}			}		}		// Remove duplicates before processing (because the black list uses both sets of arrays).		$blackListTags			= array_unique($blackListTags);		$blackListAttributes	= array_unique($blackListAttributes);		$customListTags			= array_unique($customListTags);		$customListAttributes	= array_unique($customListAttributes);		$whiteListTags			= array_unique($whiteListTags);		$whiteListAttributes	= array_unique($whiteListAttributes);		// Unfiltered assumes first priority.		if ($unfiltered)		{			// Dont apply filtering.		}		else		{			// Custom blacklist precedes Default blacklist			if ($customList)			{				$filter = JFilterInput::getInstance(array(), array(), 1, 1);				// Override filter's default blacklist tags and attributes				if ($customListTags)				{					$filter->tagBlacklist = $customListTags;				}				if ($customListAttributes)				{					$filter->attrBlacklist = $customListAttributes;				}			}			// Black lists take second precedence.			elseif ($blackList)			{				// Remove the white-listed tags and attributes from the black-list.				$blackListTags			= array_diff($blackListTags, $whiteListTags);				$blackListAttributes	= array_diff($blackListAttributes, $whiteListAttributes);				$filter = JFilterInput::getInstance($blackListTags, $blackListAttributes, 1, 1);				// Remove white listed tags from filter's default blacklist				if ($whiteListTags)				{					$filter->tagBlacklist = array_diff($filter->tagBlacklist, $whiteListTags);				}				// Remove white listed attributes from filter's default blacklist				if ($whiteListAttributes)				{					$filter->attrBlacklist = array_diff($filter->attrBlacklist);				}			}			// White lists take third precedence.			elseif ($whiteList)			{				// Turn off XSS auto clean				$filter	= JFilterInput::getInstance($whiteListTags, $whiteListAttributes, 0, 0, 0);			}			// No HTML takes last place.			else			{				$filter = JFilterInput::getInstance();			}			$text = $filter->clean($text, 'html');		}		return $text;	}	/**	 * Render the component.	 *	 * @param   string  $option  The component option.	 * @param   array   $params  The component parameters	 *	 * @return  object	 *	 * @since   11.1	 * @throws  Exception	 */	public static function renderComponent($option, $params = array())	{		$app = JFactory::getApplication();		// Load template language files.		$template = $app->getTemplate(true)->template;		$lang = JFactory::getLanguage();		$lang->load('tpl_' . $template, JPATH_BASE, null, false, false)			|| $lang->load('tpl_' . $template, JPATH_THEMES . "/$template", null, false, false)			|| $lang->load('tpl_' . $template, JPATH_BASE, $lang->getDefault(), false, false)			|| $lang->load('tpl_' . $template, JPATH_THEMES . "/$template", $lang->getDefault(), false, false);		if (empty($option))		{			throw new Exception(JText::_('JLIB_APPLICATION_ERROR_COMPONENT_NOT_FOUND'), 404);		}		// Record the scope		$scope = $app->scope;		// Set scope to component name		$app->scope = $option;		// Build the component path.		$option = preg_replace('/[^A-Z0-9_\.-]/i', '', $option);		$file = substr($option, 4);		// Define component path.		define('JPATH_COMPONENT', JPATH_BASE . '/components/' . $option);		define('JPATH_COMPONENT_SITE', JPATH_SITE . '/components/' . $option);		define('JPATH_COMPONENT_ADMINISTRATOR', JPATH_ADMINISTRATOR . '/components/' . $option);		$path = JPATH_COMPONENT . '/' . $file . '.php';		// If component is disabled throw error		if (!self::isEnabled($option) || !file_exists($path))		{			throw new Exception(JText::_('JLIB_APPLICATION_ERROR_COMPONENT_NOT_FOUND'), 404);		}		$task = $app->input->getString('task');		// Load common and local language files.		$lang->load($option, JPATH_BASE, null, false, false) || $lang->load($option, JPATH_COMPONENT, null, false, false)			|| $lang->load($option, JPATH_BASE, $lang->getDefault(), false, false)			|| $lang->load($option, JPATH_COMPONENT, $lang->getDefault(), false, false);		// Handle template preview outlining.		$contents = null;		// Execute the component.		$contents = self::executeComponent($path);		// Revert the scope		$app->scope = $scope;		return $contents;	}	/**	 * Execute the component.	 *	 * @param   string  $path  The component path.	 *	 * @return  string  The component output	 *	 * @since   11.3	 */	protected static function executeComponent($path)	{		ob_start();		require_once $path;		$contents = ob_get_contents();		ob_end_clean();		return $contents;	}	/**	 * Load the installed components into the components property.	 *	 * @param   string  $option  The element value for the extension	 *	 * @return  boolean  True on success	 *	 * @since   11.1	 */	protected static function _load($option)	{		$db = JFactory::getDbo();		$query = $db->getQuery(true)			->select('extension_id AS id, element AS "option", params, enabled')			->from('#__extensions')			->where($db->quoteName('type') . ' = ' . $db->quote('component'))			->where($db->quoteName('element') . ' = ' . $db->quote($option));		$db->setQuery($query);		$cache = JFactory::getCache('_system', 'callback');		try		{			self::$components[$option] = $cache->get(array($db, 'loadObject'), null, $option, false);		}		catch (RuntimeException $e)		{			// Fatal error.			JLog::add(JText::sprintf('JLIB_APPLICATION_ERROR_COMPONENT_NOT_LOADING', $option, $error), JLog::WARNING, 'jerror');			return false;		}		if (empty(self::$components[$option]))		{			// Fatal error.			$error = JText::_('JLIB_APPLICATION_ERROR_COMPONENT_NOT_FOUND');			JLog::add(JText::sprintf('JLIB_APPLICATION_ERROR_COMPONENT_NOT_LOADING', $option, $error), JLog::WARNING, 'jerror');			return false;		}		// Convert the params to an object.		if (is_string(self::$components[$option]->params))		{			$temp = new JRegistry;			$temp->loadString(self::$components[$option]->params);			self::$components[$option]->params = $temp;		}		return true;	}}
<?php/** * @package     Joomla.Administrator * @subpackage  com_plugins * * @copyright   Copyright (C) 2005 - 2013 Open Source Matters, Inc. All rights reserved. * @license     GNU General Public License version 2 or later; see LICENSE.txt */defined('JPATH_BASE') or die;/** * Supports an HTML select list of plugins * * @package     Joomla.Administrator * @subpackage  com_plugins * @since       1.6 */class JFormFieldOrdering extends JFormField{	/**	 * The form field type.	 *	 * @var		string	 * @since   1.6	 */	protected $type = 'Ordering';	/**	 * Method to get the field input markup.	 *	 * @return  string	The field input markup.	 * @since   1.6	 */	protected function getInput()	{		$html = array();		$attr = '';		// Initialize some field attributes.		$attr .= $this->element['class'] ? ' class="'.(string) $this->element['class'].'"' : '';		$attr .= ((string) $this->element['disabled'] == 'true') ? ' disabled="disabled"' : '';		$attr .= $this->element['size'] ? ' size="'.(int) $this->element['size'].'"' : '';		// Initialize JavaScript field attributes.		$attr .= $this->element['onchange'] ? ' onchange="'.(string) $this->element['onchange'].'"' : '';		// Get some field values from the form.		$pluginId = (int) $this->form->getValue('extension_id');		$folder	= $this->form->getValue('folder');		$db = JFactory::getDbo();		// Build the query for the ordering list.		$query = 'SELECT ordering AS value, name AS text, type AS type, folder AS folder, extension_id AS extension_id' .				' FROM #__extensions' .				' WHERE (type =' .$db->quote('plugin'). 'AND folder='. $db->quote($folder) . ')'.				' ORDER BY ordering';		// Create a read-only list (no name) with a hidden input to store the value.		if ((string) $this->element['readonly'] == 'true')		{			$html[] = JHtml::_('list.ordering', '', $query, trim($attr), $this->value, $pluginId ? 0 : 1);			$html[] = '<input type="hidden" name="'.$this->name.'" value="'.$this->value.'"/>';		}		// Create a regular list.		else {			$html[] = JHtml::_('list.ordering', $this->name, $query, trim($attr), $this->value, $pluginId ? 0 : 1);		}		return implode($html);	}}
<?php/** * @package     Joomla.Site * @subpackage  com_contact * * @copyright   Copyright (C) 2005 - 2013 Open Source Matters, Inc. All rights reserved. * @license     GNU General Public License version 2 or later; see LICENSE.txt */defined('_JEXEC') or die;/** * HTML View class for the Contacts component * * @package     Joomla.Site * @subpackage  com_contact * @since       1.5 */class ContactViewCategory extends JViewLegacy{	protected $state;	protected $items;	protected $category;	protected $categories;	protected $pagination;	public function display($tpl = null)	{		$app		= JFactory::getApplication();		$params		= $app->getParams();		// Get some data from the models		$state		= $this->get('State');		$items		= $this->get('Items');		$category	= $this->get('Category');		$children	= $this->get('Children');		$parent 	= $this->get('Parent');		$pagination	= $this->get('Pagination');		// Check for errors.		if (count($errors = $this->get('Errors')))		{			JError::raiseError(500, implode("\n", $errors));			return false;		}		if ($category == false)		{			return JError::raiseError(404, JText::_('JGLOBAL_CATEGORY_NOT_FOUND'));		}		if ($parent == false)		{			return JError::raiseError(404, JText::_('JGLOBAL_CATEGORY_NOT_FOUND'));		}		// Check whether category access level allows access.		$user	= JFactory::getUser();		$groups	= $user->getAuthorisedViewLevels();		if (!in_array($category->access, $groups))		{			return JError::raiseError(403, JText::_('JERROR_ALERTNOAUTHOR'));		}		// Prepare the data.		// Compute the contact slug.		for ($i = 0, $n = count($items); $i < $n; $i++)		{			$item		= &$items[$i];			$item->slug	= $item->alias ? ($item->id.':'.$item->alias) : $item->id;			$temp		= new JRegistry;			$temp->loadString($item->params);			$item->params = clone($params);			$item->params->merge($temp);			if ($item->params->get('show_email', 0) == 1)			{				$item->email_to = trim($item->email_to);				if (!empty($item->email_to) && JMailHelper::isEmailAddress($item->email_to))				{					$item->email_to = JHtml::_('email.cloak', $item->email_to);				}				else {					$item->email_to = '';				}			}		}		// Setup the category parameters.		$cparams = $category->getParams();		$category->params = clone($params);		$category->params->merge($cparams);		$children = array($category->id => $children);		$maxLevel = $params->get('maxLevel', -1);		$this->maxLevel   = &$maxLevel;		$this->state      = &$state;		$this->items      = &$items;		$this->category   = &$category;		$this->children   = &$children;		$this->params     = &$params;		$this->parent     = &$parent;		$this->pagination = &$pagination;		$this->user       = &$user;		//Escape strings for HTML output		$this->pageclass_sfx = htmlspecialchars($this->params->get('pageclass_sfx'));		// Check for layout override only if this is not the active menu item		// If it is the active menu item, then the view and category id will match		$active	= $app->getMenu()->getActive();		if ((!$active) || ((strpos($active->link, 'view=category') === false) || (strpos($active->link, '&id=' . (string) $this->category->id) === false)))		{			if ($layout = $category->params->get('category_layout'))			{				$this->setLayout($layout);			}		}		elseif (isset($active->query['layout']))		{			// We need to set the layout in case this is an alternative menu item (with an alternative layout)			$this->setLayout($active->query['layout']);		}		$category->tags = new JHelperTags;		$category->tags->getItemTags('com_contact.category', $category->id);		$this->_prepareDocument();		parent::display($tpl);	}	/**	 * Prepares the document	 */	protected function _prepareDocument()	{		$app		= JFactory::getApplication();		$menus		= $app->getMenu();		$pathway	= $app->getPathway();		$title 		= null;		// Because the application sets a default page title,		// we need to get it from the menu item itself		$menu = $menus->getActive();		if ($menu)		{			$this->params->def('page_heading', $this->params->get('page_title', $menu->title));		}		else		{			$this->params->def('page_heading', JText::_('COM_CONTACT_DEFAULT_PAGE_TITLE'));		}		$id = (int) @$menu->query['id'];		if ($menu && ($menu->query['option'] != 'com_contact' || $menu->query['view'] == 'contact' || $id != $this->category->id))		{			$path = array(array('title' => $this->category->title, 'link' => ''));			$category = $this->category->getParent();			while (($menu->query['option'] != 'com_contact' || $menu->query['view'] == 'contact' || $id != $category->id) && $category->id > 1)			{				$path[] = array('title' => $category->title, 'link' => ContactHelperRoute::getCategoryRoute($category->id));				$category = $category->getParent();			}			$path = array_reverse($path);			foreach ($path as $item)			{				$pathway->addItem($item['title'], $item['link']);			}		}		$title = $this->params->get('page_title', '');		if (empty($title))		{			$title = $app->getCfg('sitename');		}		elseif ($app->getCfg('sitename_pagetitles', 0) == 1)		{			$title = JText::sprintf('JPAGETITLE', $app->getCfg('sitename'), $title);		}		elseif ($app->getCfg('sitename_pagetitles', 0) == 2)		{			$title = JText::sprintf('JPAGETITLE', $title, $app->getCfg('sitename'));		}		$this->document->setTitle($title);		if ($this->category->metadesc)		{			$this->document->setDescription($this->category->metadesc);		}		elseif (!$this->category->metadesc && $this->params->get('menu-meta_description'))		{			$this->document->setDescription($this->params->get('menu-meta_description'));		}		if ($this->category->metakey)		{			$this->document->setMetadata('keywords', $this->category->metakey);		}		elseif (!$this->category->metakey && $this->params->get('menu-meta_keywords'))		{			$this->document->setMetadata('keywords', $this->params->get('menu-meta_keywords'));		}		if ($this->params->get('robots'))		{			$this->document->setMetadata('robots', $this->params->get('robots'));		}		if ($app->getCfg('MetaAuthor') == '1')		{			$this->document->setMetaData('author', $this->category->getMetadata()->get('author'));		}		$mdata = $this->category->getMetadata()->toArray();		foreach ($mdata as $k => $v)		{			if ($v)			{				$this->document->setMetadata($k, $v);			}		}		// Add alternative feed link		if ($this->params->get('show_feed_link', 1) == 1)		{			$link	= '&format=feed&limitstart=';			$attribs = array('type' => 'application/rss+xml', 'title' => 'RSS 2.0');			$this->document->addHeadLink(JRoute::_($link.'&type=rss'), 'alternate', 'rel', $attribs);			$attribs = array('type' => 'application/atom+xml', 'title' => 'Atom 1.0');			$this->document->addHeadLink(JRoute::_($link.'&type=atom'), 'alternate', 'rel', $attribs);		}	}}
<?php/** * @package     Joomla.Administrator * @subpackage  com_finder * * @copyright   Copyright (C) 2005 - 2013 Open Source Matters, Inc. All rights reserved. * @license     GNU General Public License version 2 or later; see LICENSE */defined('JPATH_BASE') or die();JFormHelper::loadFieldClass('list');/** * Search Filter field for the Finder package. * * @package     Joomla.Administrator * @subpackage  com_finder * @since       2.5 */class JFormFieldSearchFilter extends JFormFieldList{	/**	 * The form field type.	 *	 * @var    string	 * @since  2.5	 */	protected $type = 'SearchFilter';	/**	 * Method to get the field options.	 *	 * @return  array  The field option objects.	 *	 * @since   2.5	 */	public function getOptions()	{		$options = array();		// Build the query.		$db = JFactory::getDbo();		$query = $db->getQuery(true)			->select('f.title AS text, f.filter_id AS value')			->from($db->quoteName('#__finder_filters') . ' AS f')			->where('f.state = 1')			->order('f.title ASC');		$db->setQuery($query);		$options = $db->loadObjectList();		array_unshift($options, JHtml::_('select.option', '', JText::_('COM_FINDER_SELECT_SEARCH_FILTER'), 'value', 'text'));		return $options;	}}
<?php/** * @package     Joomla.Administrator * @subpackage  com_users * * @copyright   Copyright (C) 2005 - 2013 Open Source Matters, Inc. All rights reserved. * @license     GNU General Public License version 2 or later; see LICENSE.txt */defined('_JEXEC') or die;/** * @package     Joomla.Administrator * @subpackage  com_users * @since       1.5 */class UsersViewUser extends JViewLegacy{	protected $form;	protected $item;	protected $grouplist;	protected $groups;	protected $state;	/**	 * Display the view	 *	 * @since  1.5	 */	public function display($tpl = null)	{		$this->form			= $this->get('Form');		$this->item			= $this->get('Item');		$this->grouplist	= $this->get('Groups');		$this->groups		= $this->get('AssignedGroups');		$this->state		= $this->get('State');		// Check for errors.		if (count($errors = $this->get('Errors')))		{			JError::raiseError(500, implode("\n", $errors));			return false;		}		$this->form->setValue('password', null);		$this->form->setValue('password2',	null);		parent::display($tpl);		$this->addToolbar();	}	/**	 * Add the page title and toolbar.	 *	 * @since   1.6	 */	protected function addToolbar()	{		JFactory::getApplication()->input->set('hidemainmenu', true);		$user  = JFactory::getUser();		$isNew = ($this->item->id == 0);		$canDo = UsersHelper::getActions();		$isNew	= ($this->item->id == 0);		$isProfile = $this->item->id == $user->id;		JToolbarHelper::title(JText::_($isNew ? 'COM_USERS_VIEW_NEW_USER_TITLE' : ($isProfile ? 'COM_USERS_VIEW_EDIT_PROFILE_TITLE' : 'COM_USERS_VIEW_EDIT_USER_TITLE')), $isNew ? 'user-add' : ($isProfile ? 'user-profile' : 'user-edit'));		if ($canDo->get('core.edit')||$canDo->get('core.create'))		{			JToolbarHelper::apply('user.apply');			JToolbarHelper::save('user.save');		}		if ($canDo->get('core.create')&&$canDo->get('core.manage'))		{			JToolbarHelper::save2new('user.save2new');		}		if (empty($this->item->id))		{			JToolbarHelper::cancel('user.cancel');		}		else		{			JToolbarHelper::cancel('user.cancel', 'JTOOLBAR_CLOSE');		}		JToolbarHelper::divider();		JToolbarHelper::help('JHELP_USERS_USER_MANAGER_EDIT');	}}
<?php/** * @package     Joomla.Platform * @subpackage  Facebook * * @copyright   Copyright (C) 2005 - 2012 Open Source Matters, Inc. All rights reserved. * @license     GNU General Public License version 2 or later; see LICENSE */defined('JPATH_PLATFORM') or die();/** * Facebook API Photo class for the Joomla Platform. * * @package     Joomla.Platform * @subpackage  Facebook * * @see         http://developers.facebook.com/docs/reference/api/photo/ * @since       13.1 */class JFacebookPhoto extends JFacebookObject{	/**	 * Method to get a photo. Requires authentication and user_photos or friends_photos permission for private photos.	 *	 * @param   string  $photo  The photo id.	 *	 * @return  mixed   The decoded JSON response or false if the client is not authenticated.	 *	 * @since   13.1	 */	public function getPhoto($photo)	{		return $this->get($photo);	}	/**	 * Method to get a photo's comments. Requires authentication and user_photos or friends_photos permission for private photos.	 *	 * @param   string   $photo   The photo id.	 * @param   integer  $limit   The number of objects per page.	 * @param   integer  $offset  The object's number on the page.	 * @param   string   $until   A unix timestamp or any date accepted by strtotime.	 * @param   string   $since   A unix timestamp or any date accepted by strtotime.	 *	 * @return  mixed   The decoded JSON response or false if the client is not authenticated.	 *	 * @since   13.1	 */	public function getComments($photo, $limit = 0, $offset = 0, $until = null, $since = null)	{		return $this->getConnection($photo, 'comments', '', $limit, $offset, $until, $since);	}	/**	 * Method to comment on a photo. Requires authentication and publish_stream permission, user_photos or friends_photos permission for private photos.	 *	 * @param   string  $photo    The photo id.	 * @param   string  $message  The comment's text.	 *	 * @return  mixed   The decoded JSON response or false if the client is not authenticated.	 *	 * @since   13.1	 */	public function createComment($photo, $message)	{		// Set POST request parameters.		$data['message'] = $message;		return $this->createConnection($photo, 'comments', $data);	}	/**	 * Method to delete a comment. Requires authentication and publish_stream permission, user_photos or friends_photos permission for private photos.	 *	 * @param   string  $comment  The comment's id.	 *	 * @return  boolean Returns true if successful, and false otherwise.	 *	 * @since   13.1	 */	public function deleteComment($comment)	{		return $this->deleteConnection($comment);	}	/**	 * Method to get photo's likes. Requires authentication and user_photos or friends_photos permission for private photos.	 *	 * @param   string   $photo   The photo id.	 * @param   integer  $limit   The number of objects per page.	 * @param   integer  $offset  The object's number on the page.	 * @param   string   $until   A unix timestamp or any date accepted by strtotime.	 * @param   string   $since   A unix timestamp or any date accepted by strtotime.	 *	 * @return  mixed   The decoded JSON response or false if the client is not authenticated.	 *	 * @since   13.1	 */	public function getLikes($photo, $limit = 0, $offset = 0, $until = null, $since = null)	{		return $this->getConnection($photo, 'likes', '', $limit, $offset, $until, $since);	}	/**	 * Method to like a photo. Requires authentication and publish_stream permission, user_photos or friends_photos permission for private photos.	 *	 * @param   string  $photo  The photo id.	 *	 * @return  boolean Returns true if successful, and false otherwise.	 *	 * @since   13.1	 */	public function createLike($photo)	{		return $this->createConnection($photo, 'likes');	}	/**	 * Method to unlike a photo. Requires authentication and publish_stream permission, user_photos or friends_photos permission for private photos.	 *	 * @param   string  $photo  The photo id.	 *	 * @return  boolean Returns true if successful, and false otherwise.	 *	 * @since   13.1	 */	public function deleteLike($photo)	{		return $this->deleteConnection($photo, 'likes');	}	/**	 * Method to get the Users tagged in the photo. Requires authentication and user_photos or friends_photos permission for private photos.	 *	 * @param   string   $photo   The photo id.	 * @param   integer  $limit   The number of objects per page.	 * @param   integer  $offset  The object's number on the page.	 * @param   string   $until   A unix timestamp or any date accepted by strtotime.	 * @param   string   $since   A unix timestamp or any date accepted by strtotime.	 *	 * @return  mixed   The decoded JSON response or false if the client is not authenticated.	 *	 * @since   13.1	 */	public function getTags($photo, $limit = 0, $offset = 0, $until = null, $since = null)	{		return $this->getConnection($photo, 'tags', '', $limit, $offset, $until, $since);	}	/**	 * Method to tag one or more Users in a photo. $to or $tag_text required.	 * Requires authentication and publish_stream permission, user_photos permission for private photos.	 *	 * @param   string   $photo     The photo id.	 * @param   mixed    $to        ID of the User or an array of Users to tag in the photo: [{"id":"1234"}, {"id":"12345"}].	 * @param   string   $tag_text  A text string to tag.	 * @param   integer  $x         x coordinate of tag, as a percentage offset from the left edge of the picture.	 * @param   integer  $y         y coordinate of tag, as a percentage offset from the top edge of the picture.	 *	 * @return  boolean Returns true if successful, and false otherwise.	 *	 * @since   13.1	 */	public function createTag($photo, $to = null, $tag_text = null, $x = null, $y = null)	{		// Set POST request parameters.		if (is_array($to))		{			$data['tags'] = $to;		}		else		{			$data['to'] = $to;		}		if ($tag_text)		{			$data['tag_text'] = $tag_text;		}		if ($x)		{			$data['x'] = $x;		}		if ($y)		{			$data['y'] = $y;		}		return $this->createConnection($photo, 'tags', $data);	}	/**	 * Method to update the position of the tag for a particular Users in a photo.	 * Requires authentication and publish_stream permission, user_photos permission for private photos.	 *	 * @param   string   $photo  The photo id.	 * @param   string   $to     ID of the User to update tag in the photo.	 * @param   integer  $x      x coordinate of tag, as a percentage offset from the left edge of the picture.	 * @param   integer  $y      y coordinate of tag, as a percentage offset from the top edge of the picture.	 *	 * @return  boolean Returns true if successful, and false otherwise.	 *	 * @since   13.1	 */	public function updateTag($photo, $to, $x = null, $y = null)	{		// Set POST request parameters.		$data['to'] = $to;		if ($x)		{			$data['x'] = $x;		}		if ($y)		{			$data['y'] = $y;		}		return $this->createConnection($photo, 'tags', $data);	}	/**	 * Method to get the album-sized view of the photo. Requires authentication and user_photos or friends_photos permission for private photos.	 *	 * @param   string   $photo     The photo id.	 * @param   boolean  $redirect  If false this will return the URL of the picture without a 302 redirect.	 *	 * @return  string  URL of the picture.	 *	 * @since   13.1	 */	public function getPicture($photo, $redirect = true)	{		$extra_fields = '';		if ($redirect == false)		{			$extra_fields = '?redirect=false';		}		return $this->getConnection($photo, 'picture', $extra_fields);	}}
<?php/** * @package    Joomla.Administrator * * @copyright  Copyright (C) 2005 - 2013 Open Source Matters, Inc. All rights reserved. * @license    GNU General Public License version 2 or later; see LICENSE.txt */defined('_JEXEC') or die;/** * Utility class for the button bar. * * @package  Joomla.Administrator * @since    1.5 */abstract class JToolbarHelper{	/**	 * Title cell.	 * For the title and toolbar to be rendered correctly,	 * this title fucntion must be called before the starttable function and the toolbars icons	 * this is due to the nature of how the css has been used to postion the title in respect to the toolbar.	 *	 * @param   string  $title  The title.	 * @param   string  $icon   The space-separated names of the image.	 *	 * @return  void	 *	 * @since   1.5	 */	public static function title($title, $icon = 'generic.png')	{		// Strip the extension.		$icons = explode(' ', $icon);		foreach ($icons as &$icon)		{			$icon = 'icon-48-' . preg_replace('#\.[^.]*$#', '', $icon);		}		$html = '<div class="pagetitle ' . htmlspecialchars(implode(' ', $icons)) . '"><h2>' . $title . '</h2></div>';		$app = JFactory::getApplication();		$app->JComponentTitle = $html;		JFactory::getDocument()->setTitle($app->getCfg('sitename') . ' - ' . JText::_('JADMINISTRATION') . ' - ' . $title);	}	/**	 * Writes a spacer cell.	 *	 * @param   string  $width  The width for the cell	 *	 * @return  void	 *	 * @since   1.5	 */	public static function spacer($width = '')	{		$bar = JToolbar::getInstance('toolbar');		// Add a spacer.		$bar->appendButton('Separator', 'spacer', $width);	}	/**	 * Writes a divider between menu buttons	 *	 * @return  void	 *	 * @since   1.5	 */	public static function divider()	{		$bar = JToolbar::getInstance('toolbar');		// Add a divider.		$bar->appendButton('Separator', 'divider');	}	/**	 * Writes a custom option and task button for the button bar.	 *	 * @param   string  $task        The task to perform (picked up by the switch($task) blocks.	 * @param   string  $icon        The image to display.	 * @param   string  $iconOver    The image to display when moused over.	 * @param   string  $alt         The alt text for the icon image.	 * @param   bool    $listSelect  True if required to check that a standard list item is checked.	 *	 * @return  void	 *	 * @since   1.5	 */	public static function custom($task = '', $icon = '', $iconOver = '', $alt = '', $listSelect = true)	{		$bar = JToolbar::getInstance('toolbar');		// Strip extension.		$icon = preg_replace('#\.[^.]*$#', '', $icon);		// Add a standard button.		$bar->appendButton('Standard', $icon, $alt, $task, $listSelect);	}	/**	 * Writes a preview button for a given option (opens a popup window).	 *	 * @param   string  $url            The name of the popup file (excluding the file extension)	 * @param   bool    $updateEditors	 *	 * @return  void	 *	 * @since   1.5	 */	public static function preview($url = '', $updateEditors = false)	{		$bar = JToolbar::getInstance('toolbar');		// Add a preview button.		$bar->appendButton('Popup', 'preview', 'Preview', $url.'&task=preview');	}	/**	 * Writes a preview button for a given option (opens a popup window).	 *	 * @param   string  $ref        The name of the popup file (excluding the file extension for an xml file).	 * @param   bool    $com        Use the help file in the component directory.	 * @param   string  $override   Use this URL instead of any other	 * @param   string  $component  Name of component to get Help (null for current component)	 *	 * @return  void	 *	 * @since   1.5	 */	public static function help($ref, $com = false, $override = null, $component = null)	{		$bar = JToolbar::getInstance('toolbar');		// Add a help button.		$bar->appendButton('Help', $ref, $com, $override, $component);	}	/**	 * Writes a cancel button that will go back to the previous page without doing	 * any other operation.	 *	 * @param   string  $alt   Alternative text.	 * @param   string  $href  URL of the href attribute.	 *	 * @return  void	 *	 * @since   1.5	 */	public static function back($alt = 'JTOOLBAR_BACK', $href = 'javascript:history.back();')	{		$bar = JToolbar::getInstance('toolbar');		// Add a back button.		$bar->appendButton('Link', 'back', $alt, $href);	}	/**	 * Writes a media_manager button.	 *	 * @param   string  $directory  The sub-directory to upload the media to.	 * @param   string  $alt        An override for the alt text.	 *	 * @return  void	 *	 * @since   1.5	 */	public static function media_manager($directory = '', $alt = 'JTOOLBAR_UPLOAD')	{		$bar = JToolbar::getInstance('toolbar');		// Add an upload button.		$bar->appendButton('Popup', 'upload', $alt, 'index.php?option=com_media&tmpl=component&task=popupUpload&folder=' . $directory, 800, 520);	}	/**	 * Writes a common 'default' button for a record.	 *	 * @param   string  $task  An override for the task.	 * @param   string  $alt   An override for the alt text.	 *	 * @return  void	 *	 * @since   1.5	 */	public static function makeDefault($task = 'default', $alt = 'JTOOLBAR_DEFAULT')	{		$bar = JToolbar::getInstance('toolbar');		// Add a default button.		$bar->appendButton('Standard', 'star', $alt, $task, true);	}	/**	 * Writes a common 'assign' button for a record.	 *	 * @param   string  $task  An override for the task.	 * @param   string  $alt   An override for the alt text.	 *	 * @return  void	 *	 * @since   1.5	 */	public static function assign($task = 'assign', $alt = 'JTOOLBAR_ASSIGN')	{		$bar = JToolbar::getInstance('toolbar');		// Add an assign button.		$bar->appendButton('Standard', 'assign', $alt, $task, true);	}	/**	 * Writes the common 'new' icon for the button bar.	 *	 * @param   string   $task   An override for the task.	 * @param   string   $alt    An override for the alt text.	 * @param   boolean  $check  True if required to check that a standard list item is checked.	 *	 * @return  void	 *	 * @since   1.5	 */	public static function addNew($task = 'add', $alt = 'JTOOLBAR_NEW', $check = false)	{		$bar = JToolbar::getInstance('toolbar');		// Add a new button.		$bar->appendButton('Standard', 'new', $alt, $task, $check);	}	/**	 * Writes a common 'publish' button.	 *	 * @param   string   $task   An override for the task.	 * @param   string   $alt    An override for the alt text.	 * @param   boolean  $check  True if required to check that a standard list item is checked.	 *	 * @return  void	 *	 * @since   1.5	 */	public static function publish($task = 'publish', $alt = 'JTOOLBAR_PUBLISH', $check = false)	{		$bar = JToolbar::getInstance('toolbar');		// Add a publish button.		$bar->appendButton('Standard', 'publish', $alt, $task, $check);	}	/**	 * Writes a common 'publish' button for a list of records.	 *	 * @param   string  $task  An override for the task.	 * @param   string  $alt   An override for the alt text.	 *	 * @return  void	 *	 * @since   1.5	 */	public static function publishList($task = 'publish', $alt = 'JTOOLBAR_PUBLISH')	{		$bar = JToolbar::getInstance('toolbar');		// Add a publish button (list).		$bar->appendButton('Standard', 'publish', $alt, $task, true);	}	/**	 * Writes a common 'unpublish' button.	 *	 * @param   string   $task   An override for the task.	 * @param   string   $alt    An override for the alt text.	 * @param   boolean  $check  True if required to check that a standard list item is checked.	 *	 * @return  void	 *	 * @since   1.5	 */	public static function unpublish($task = 'unpublish', $alt = 'JTOOLBAR_UNPUBLISH', $check = false)	{		$bar = JToolbar::getInstance('toolbar');		// Add an unpublish button		$bar->appendButton('Standard', 'unpublish', $alt, $task, $check);	}	/**	 * Writes a common 'unpublish' button for a list of records.	 *	 * @param   string  $task  An override for the task.	 * @param   string  $alt   An override for the alt text.	 *	 * @return  void	 *	 * @since   1.5	 */	public static function unpublishList($task = 'unpublish', $alt = 'JTOOLBAR_UNPUBLISH')	{		$bar = JToolbar::getInstance('toolbar');		// Add an unpublish button (list).		$bar->appendButton('Standard', 'unpublish', $alt, $task, true);	}	/**	 * Writes a common 'archive' button for a list of records.	 *	 * @param   string  $task  An override for the task.	 * @param   string  $alt   An override for the alt text.	 *	 * @return  void	 *	 * @since   1.5	 */	public static function archiveList($task = 'archive', $alt = 'JTOOLBAR_ARCHIVE')	{		$bar = JToolbar::getInstance('toolbar');		// Add an archive button.		$bar->appendButton('Standard', 'archive', $alt, $task, true);	}	/**	 * Writes an unarchive button for a list of records.	 *	 * @param   string  $task  An override for the task.	 * @param   string  $alt   An override for the alt text.	 *	 * @return  void	 *	 * @since   1.5	 */	public static function unarchiveList($task = 'unarchive', $alt = 'JTOOLBAR_UNARCHIVE')	{		$bar = JToolbar::getInstance('toolbar');		// Add an unarchive button (list).		$bar->appendButton('Standard', 'unarchive', $alt, $task, true);	}	/**	 * Writes a common 'edit' button for a list of records.	 *	 * @param   string  $task  An override for the task.	 * @param   string  $alt   An override for the alt text.	 *	 * @return  void	 *	 * @since   1.5	 */	public static function editList($task = 'edit', $alt = 'JTOOLBAR_EDIT')	{		$bar = JToolbar::getInstance('toolbar');		// Add an edit button.		$bar->appendButton('Standard', 'edit', $alt, $task, true);	}	/**	 * Writes a common 'edit' button for a template html.	 *	 * @param   string  $task  An override for the task.	 * @param   string  $alt   An override for the alt text.	 *	 * @return  void	 *	 * @since   1.5	 */	public static function editHtml($task = 'edit_source', $alt = 'JTOOLBAR_EDIT_HTML')	{		$bar = JToolbar::getInstance('toolbar');		// Add an edit html button.		$bar->appendButton('Standard', 'edithtml', $alt, $task, true);	}	/**	 * Writes a common 'edit' button for a template css.	 *	 * @param   string  $task  An override for the task.	 * @param   string  $alt   An override for the alt text.	 *	 * @return  void	 *	 * @since   1.5	 */	public static function editCss($task = 'edit_css', $alt = 'JTOOLBAR_EDIT_CSS')	{		$bar = JToolbar::getInstance('toolbar');		// Add an edit css button (hide).		$bar->appendButton('Standard', 'editcss', $alt, $task, true);	}	/**	 * Writes a common 'delete' button for a list of records.	 *	 * @param   string  $msg   Postscript for the 'are you sure' message.	 * @param   string  $task  An override for the task.	 * @param   string  $alt   An override for the alt text.	 *	 * @return  void	 *	 * @since   1.5	 */	public static function deleteList($msg = '', $task = 'remove', $alt = 'JTOOLBAR_DELETE')	{		$bar = JToolbar::getInstance('toolbar');		// Add a delete button.		if ($msg)		{			$bar->appendButton('Confirm', $msg, 'delete', $alt, $task, true);		}		else		{			$bar->appendButton('Standard', 'delete', $alt, $task, true);		}	}	/**	 * Write a trash button that will move items to Trash Manager.	 *	 * @param   string  $task   An override for the task.	 * @param   string  $alt    An override for the alt text.	 * @param   bool    $check	 *	 * @return  void	 *	 * @since   1.5	 */	public static function trash($task = 'remove', $alt = 'JTOOLBAR_TRASH', $check = true)	{		$bar = JToolbar::getInstance('toolbar');		// Add a trash button.		$bar->appendButton('Standard', 'trash', $alt, $task, $check, false);	}	/**	 * Writes a save button for a given option.	 * Apply operation leads to a save action only (does not leave edit mode).	 *	 * @param   string  $task  An override for the task.	 * @param   string  $alt   An override for the alt text.	 *	 * @return  void	 *	 * @since   1.5	 */	public static function apply($task = 'apply', $alt = 'JTOOLBAR_APPLY')	{		$bar = JToolbar::getInstance('toolbar');		// Add an apply button		$bar->appendButton('Standard', 'apply', $alt, $task, false);	}	/**	 * Writes a save button for a given option.	 * Save operation leads to a save and then close action.	 *	 * @param   string  $task  An override for the task.	 * @param   string  $alt   An override for the alt text.	 *	 * @return  void	 *	 * @since   1.5	 */	public static function save($task = 'save', $alt = 'JTOOLBAR_SAVE')	{		$bar = JToolbar::getInstance('toolbar');		// Add a save button.		$bar->appendButton('Standard', 'save', $alt, $task, false);	}	/**	 * Writes a save and create new button for a given option.	 * Save and create operation leads to a save and then add action.	 *	 * @param   string  $task  An override for the task.	 * @param   string  $alt   An override for the alt text.	 *	 * @return  void	 *	 * @since   1.6	 */	public static function save2new($task = 'save2new', $alt = 'JTOOLBAR_SAVE_AND_NEW')	{		$bar = JToolbar::getInstance('toolbar');		// Add a save and create new button.		$bar->appendButton('Standard', 'save-new', $alt, $task, false);	}	/**	 * Writes a save as copy button for a given option.	 * Save as copy operation leads to a save after clearing the key,	 * then returns user to edit mode with new key.	 *	 * @param   string  $task  An override for the task.	 * @param   string  $alt   An override for the alt text.	 *	 * @return  void	 *	 * @since   1.6	 */	public static function save2copy($task = 'save2copy', $alt = 'JTOOLBAR_SAVE_AS_COPY')	{		$bar = JToolbar::getInstance('toolbar');		// Add a save and create new button.		$bar->appendButton('Standard', 'save-copy', $alt, $task, false);	}	/**	 * Writes a checkin button for a given option.	 *	 * @param   string   $task   An override for the task.	 * @param   string   $alt    An override for the alt text.	 * @param   boolean  $check  True if required to check that a standard list item is checked.	 *	 * @return  void	 *	 * @since   1.7	 */	public static function checkin($task = 'checkin', $alt = 'JTOOLBAR_CHECKIN', $check = true)	{		$bar = JToolbar::getInstance('toolbar');		// Add a save and create new button.		$bar->appendButton('Standard', 'checkin', $alt, $task, $check);	}	/**	 * Writes a cancel button and invokes a cancel operation (eg a checkin).	 *	 * @param   string  $task  An override for the task.	 * @param   string  $alt   An override for the alt text.	 *	 * @return  void	 *	 * @since   1.5	 */	public static function cancel($task = 'cancel', $alt = 'JTOOLBAR_CANCEL')	{		$bar = JToolbar::getInstance('toolbar');		// Add a cancel button.		$bar->appendButton('Standard', 'cancel', $alt, $task, false);	}	/**	 * Writes a configuration button and invokes a cancel operation (eg a checkin).	 *	 * @param   string  $component  The name of the component, eg, com_content.	 * @param   int     $height     The height of the popup. [UNUSED]	 * @param   int     $width      The width of the popup. [UNUSED]	 * @param   string  $alt        The name of the button.	 * @param   string  $path       An alternative path for the configuation xml relative to JPATH_SITE.	 *	 * @return  void	 *	 * @since   1.5	 */	public static function preferences($component, $height = '550', $width = '875', $alt = 'JToolbar_Options', $path = '')	{		$component = urlencode($component);		$path = urlencode($path);		$bar = JToolBar::getInstance('toolbar');		$uri = (string) JUri::getInstance();		$return = urlencode(base64_encode($uri));		// Add a button linking to config for component.		$bar->appendButton('Link', 'options', $alt, 'index.php?option=com_config&amp;view=component&amp;component=' . $component . '&amp;path=' . $path . '&amp;return=' . $return);	}}/** * Utility class for the submenu. * * @package     Joomla.Administrator * @since       1.5 * @deprecated  4.0  Use JHtmlSidebar instead. */abstract class JSubMenuHelper{	/**	 * Menu entries	 *	 * @var    array	 * @since  3.0	 * @deprecated  4.0	 */	protected static $entries = array();	/**	 * Filters	 *	 * @var    array	 * @since  3.0	 * @deprecated  4.0	 */	protected static $filters = array();	/**	 * Value for the action attribute of the form.	 *	 * @var    string	 * @since  3.0	 * @deprecated  4.0	 */	protected static $action = '';	/**	 * Method to add a menu item to submenu.	 *	 * @param   string	$name	 Name of the menu item.	 * @param   string	$link	 URL of the menu item.	 * @param   bool	$active  True if the item is active, false otherwise.	 *	 * @return  void	 *	 * @since   1.5	 * @deprecated  4.0  Use JHtmlSidebar::addEntry() instead.	 */	public static function addEntry($name, $link = '', $active = false)	{		JLog::add('JSubMenuHelper::addEntry() is deprecated. Use JHtmlSidebar::addEntry() instead.', JLog::WARNING, 'deprecated');		array_push(self::$entries, array($name, $link, $active));	}	/**	 * Returns an array of all submenu entries	 *	 * @return  array	 *	 * @since   3.0	 * @deprecated  4.0  Use JHtmlSidebar::getEntries() instead.	 */	public static function getEntries()	{		JLog::add('JSubMenuHelper::getEntries() is deprecated. Use JHtmlSidebar::getEntries() instead.', JLog::WARNING, 'deprecated');		return self::$entries;	}	/**	 * Method to add a filter to the submenu	 *	 * @param   string	$label      Label for the menu item.	 * @param   string	$name       name for the filter. Also used as id.	 * @param   string	$options    options for the select field.	 * @param   bool	$noDefault  Don't the label as the empty option	 *	 * @return  void	 *	 * @since   3.0	 * @deprecated  4.0  Use JHtmlSidebar::addFilter() instead.	 */	public static function addFilter($label, $name, $options, $noDefault = false)	{		JLog::add('JSubMenuHelper::addFilter() is deprecated. Use JHtmlSidebar::addFilter() instead.', JLog::WARNING, 'deprecated');		array_push(self::$filters, array('label' => $label, 'name' => $name, 'options' => $options, 'noDefault' => $noDefault));	}	/**	 * Returns an array of all filters	 *	 * @return  array	 *	 * @since   3.0	 * @deprecated  4.0  Use JHtmlSidebar::getFilters() instead.	 */	public static function getFilters()	{		JLog::add('JSubMenuHelper::getFilters() is deprecated. Use JHtmlSidebar::getFilters() instead.', JLog::WARNING, 'deprecated');		return self::$filters;	}	/**	 * Set value for the action attribute of the filter form	 *	 * @param   string  $action  Value for the action attribute of the form	 *	 * @return  void	 *	 * @since   3.0	 * @deprecated  4.0  Use JHtmlSidebar::setAction() instead.	 */	public static function setAction($action)	{		JLog::add('JSubMenuHelper::setAction() is deprecated. Use JHtmlSidebar::setAction() instead.', JLog::WARNING, 'deprecated');		self::$action = $action;	}	/**	 * Get value for the action attribute of the filter form	 *	 * @return  string  Value for the action attribute of the form	 *	 * @since   3.0	 * @deprecated  4.0  Use JHtmlSidebar::getAction() instead.	 */	public static function getAction()	{		JLog::add('JSubMenuHelper::getAction() is deprecated. Use JHtmlSidebar::getAction() instead.', JLog::WARNING, 'deprecated');		return self::$action;	}}
<?php/** * @package     Joomla.Administrator * @subpackage  com_admin * * @copyright   Copyright (C) 2005 - 2013 Open Source Matters, Inc. All rights reserved. * @license     GNU General Public License version 2 or later; see LICENSE.txt */defined('_JEXEC') or die;JHtml::_('bootstrap.tooltip');?><form action="<?php echo JRoute::_('index.php?option=com_admin&amp;view=help'); ?>" method="post" name="adminForm" id="adminForm">	<div class="row-fluid">		<div id="sidebar" class="span3">			<div id="filter-bar" class="btn-toolbar">				<div class="filter-search input-append">					<label for="helpsearch" class="element-invisible"><?php echo JText::_('COM_ADMIN_SEARCH');?></label>					<input type="text" name="helpsearch" class="input-small" placeholder="<?php echo JText::_('COM_ADMIN_SEARCH'); ?>" id="helpsearch" value="<?php echo $this->escape($this->help_search);?>" title="<?php echo JText::_('COM_ADMIN_SEARCH'); ?>" /><button class="btn tip hasTooltip" type="submit" title="<?php echo JText::_('JSEARCH_FILTER_SUBMIT'); ?>"><i class="icon-search"></i></button><button class="btn tip" type="button" onclick="f=document.adminForm;f.helpsearch.value='';f.submit()" class="hasTooltip" title="<?php echo JText::_('JSEARCH_FILTER_CLEAR'); ?>"><i class="icon-remove"></i></button>				</div>			</div>			<div class="clearfix"> </div>			<div class="sidebar-nav">				<ul class="nav nav-list">					<li><?php echo JHtml::_('link', JHelp::createUrl('JHELP_START_HERE'), JText::_('COM_ADMIN_START_HERE'), array('target' => 'helpFrame')) ?></li>					<li><?php echo JHtml::_('link', $this->latest_version_check, JText::_('COM_ADMIN_LATEST_VERSION_CHECK'), array('target' => 'helpFrame')) ?></li>					<li><?php echo JHtml::_('link', 'http://www.gnu.org/licenses/gpl-2.0.html', JText::_('COM_ADMIN_LICENSE'), array('target' => 'helpFrame')) ?></li>					<li><?php echo JHtml::_('link', JHelp::createUrl('JHELP_GLOSSARY'), JText::_('COM_ADMIN_GLOSSARY'), array('target' => 'helpFrame')) ?></li>					<hr class="hr-condensed" />					<li class="nav-header"><?php echo JText::_('COM_ADMIN_ALPHABETICAL_INDEX'); ?></li>					<?php foreach ($this->toc as $k => $v):?>						<li>						    <?php $url = JHelp::createUrl('JHELP_'.strtoupper($k)); ?>							<?php echo JHtml::_('link', $url, $v, array('target' => 'helpFrame'));?>						</li>					<?php endforeach;?>				</ul>			</div>		</div>		<div class="span9">			<iframe name="helpFrame" height="2100px" src="<?php echo $this->page;?>" class="helpFrame table table-bordered"></iframe>		</div>	</div>	<input class="textarea" type="hidden" name="option" value="com_admin" /></form>
<?php/** * @package     Joomla.Platform * @subpackage  Registry * * @copyright   Copyright (C) 2005 - 2013 Open Source Matters, Inc. All rights reserved. * @license     GNU General Public License version 2 or later; see LICENSE */defined('JPATH_PLATFORM') or die;jimport('joomla.utilities.arrayhelper');/** * JRegistry class * * @package     Joomla.Platform * @subpackage  Registry * @since       11.1 */class JRegistry implements JsonSerializable{	/**	 * Registry Object	 *	 * @var    object	 * @since  11.1	 */	protected $data;	/**	 * @var    array  JRegistry instances container.	 * @since  11.3	 */	protected static $instances = array();	/**	 * Constructor	 *	 * @param   mixed  $data  The data to bind to the new JRegistry object.	 *	 * @since   11.1	 */	public function __construct($data = null)	{		// Instantiate the internal data object.		$this->data = new stdClass;		// Optionally load supplied data.		if (is_array($data) || is_object($data))		{			$this->bindData($this->data, $data);		}		elseif (!empty($data) && is_string($data))		{			$this->loadString($data);		}	}	/**	 * Magic function to clone the registry object.	 *	 * @return  JRegistry	 *	 * @since   11.1	 */	public function __clone()	{		$this->data = unserialize(serialize($this->data));	}	/**	 * Magic function to render this object as a string using default args of toString method.	 *	 * @return  string	 *	 * @since   11.1	 */	public function __toString()	{		return $this->toString();	}	/**	 * Implementation for the JsonSerializable interface.	 * Allows us to pass JRegistry objects to json_encode.	 *	 * @return  object	 *	 * @since   12.2	 * @note    The interface is only present in PHP 5.4 and up.	 */	public function jsonSerialize()	{		return $this->data;	}	/**	 * Sets a default value if not already assigned.	 *	 * @param   string  $key      The name of the parameter.	 * @param   string  $default  An optional value for the parameter.	 *	 * @return  string  The value set, or the default if the value was not previously set (or null).	 *	 * @since   11.1	 */	public function def($key, $default = '')	{		$value = $this->get($key, (string) $default);		$this->set($key, $value);		return $value;	}	/**	 * Check if a registry path exists.	 *	 * @param   string  $path  Registry path (e.g. joomla.content.showauthor)	 *	 * @return  boolean	 *	 * @since   11.1	 */	public function exists($path)	{		// Explode the registry path into an array		if ($nodes = explode('.', $path))		{			// Initialize the current node to be the registry root.			$node = $this->data;			// Traverse the registry to find the correct node for the result.			for ($i = 0, $n = count($nodes); $i < $n; $i++)			{				if (isset($node->$nodes[$i]))				{					$node = $node->$nodes[$i];				}				else				{					break;				}				if ($i + 1 == $n)				{					return true;				}			}		}		return false;	}	/**	 * Get a registry value.	 *	 * @param   string  $path     Registry path (e.g. joomla.content.showauthor)	 * @param   mixed   $default  Optional default value, returned if the internal value is null.	 *	 * @return  mixed  Value of entry or null	 *	 * @since   11.1	 */	public function get($path, $default = null)	{		$result = $default;		if (!strpos($path, '.'))		{			return (isset($this->data->$path) && $this->data->$path !== null && $this->data->$path !== '') ? $this->data->$path : $default;		}		// Explode the registry path into an array		$nodes = explode('.', $path);		// Initialize the current node to be the registry root.		$node = $this->data;		$found = false;		// Traverse the registry to find the correct node for the result.		foreach ($nodes as $n)		{			if (isset($node->$n))			{				$node = $node->$n;				$found = true;			}			else			{				$found = false;				break;			}		}		if ($found && $node !== null && $node !== '')		{			$result = $node;		}		return $result;	}	/**	 * Returns a reference to a global JRegistry object, only creating it	 * if it doesn't already exist.	 *	 * This method must be invoked as:	 * <pre>$registry = JRegistry::getInstance($id);</pre>	 *	 * @param   string  $id  An ID for the registry instance	 *	 * @return  JRegistry  The JRegistry object.	 *	 * @since   11.1	 */	public static function getInstance($id)	{		if (empty(self::$instances[$id]))		{			self::$instances[$id] = new JRegistry;		}		return self::$instances[$id];	}	/**	 * Load a associative array of values into the default namespace	 *	 * @param   array  $array  Associative array of value to load	 *	 * @return  boolean  True on success	 *	 * @since   11.1	 */	public function loadArray($array)	{		$this->bindData($this->data, $array);		return true;	}	/**	 * Load the public variables of the object into the default namespace.	 *	 * @param   object  $object  The object holding the publics to load	 *	 * @return  boolean  True on success	 *	 * @since   11.1	 */	public function loadObject($object)	{		$this->bindData($this->data, $object);		return true;	}	/**	 * Load the contents of a file into the registry	 *	 * @param   string  $file     Path to file to load	 * @param   string  $format   Format of the file [optional: defaults to JSON]	 * @param   array   $options  Options used by the formatter	 *	 * @return  boolean  True on success	 *	 * @since   11.1	 */	public function loadFile($file, $format = 'JSON', $options = array())	{		$data = file_get_contents($file);		return $this->loadString($data, $format, $options);	}	/**	 * Load a string into the registry	 *	 * @param   string  $data     String to load into the registry	 * @param   string  $format   Format of the string	 * @param   array   $options  Options used by the formatter	 *	 * @return  boolean  True on success	 *	 * @since   11.1	 */	public function loadString($data, $format = 'JSON', $options = array())	{		// Load a string into the given namespace [or default namespace if not given]		$handler = JRegistryFormat::getInstance($format);		$obj = $handler->stringToObject($data, $options);		$this->loadObject($obj);		return true;	}	/**	 * Merge a JRegistry object into this one	 *	 * @param   JRegistry  $source  Source JRegistry object to merge.	 *	 * @return  boolean  True on success	 *	 * @since   11.1	 */	public function merge($source)	{		if (!$source instanceof JRegistry)		{			return false;		}		// Load the variables into the registry's default namespace.		foreach ($source->toArray() as $k => $v)		{			if (($v !== null) && ($v !== ''))			{				$this->data->$k = $v;			}		}		return true;	}	/**	 * Set a registry value.	 *	 * @param   string  $path   Registry Path (e.g. joomla.content.showauthor)	 * @param   mixed   $value  Value of entry	 *	 * @return  mixed  The value of the that has been set.	 *	 * @since   11.1	 */	public function set($path, $value)	{		$result = null;		/**		 * Explode the registry path into an array and remove empty		 * nodes, then re-key the array so it's sequential.		 */		$nodes = array_values(array_filter(explode('.', $path), 'strlen'));		if ($nodes)		{			// Initialize the current node to be the registry root.			$node = $this->data;			// Traverse the registry to find the correct node for the result.			for ($i = 0, $n = count($nodes) - 1; $i < $n; $i++)			{				if (!isset($node->$nodes[$i]) && ($i != $n))				{					$node->$nodes[$i] = new stdClass;				}				$node = $node->$nodes[$i];			}			// Get the old value if exists so we can return it			$result = $node->$nodes[$i] = $value;		}		return $result;	}	/**	 * Transforms a namespace to an array	 *	 * @return  array  An associative array holding the namespace data	 *	 * @since   11.1	 */	public function toArray()	{		return (array) $this->asArray($this->data);	}	/**	 * Transforms a namespace to an object	 *	 * @return  object   An an object holding the namespace data	 *	 * @since   11.1	 */	public function toObject()	{		return $this->data;	}	/**	 * Get a namespace in a given string format	 *	 * @param   string  $format   Format to return the string in	 * @param   mixed   $options  Parameters used by the formatter, see formatters for more info	 *	 * @return  string   Namespace in string format	 *	 * @since   11.1	 */	public function toString($format = 'JSON', $options = array())	{		// Return a namespace in a given format		$handler = JRegistryFormat::getInstance($format);		return $handler->objectToString($this->data, $options);	}	/**	 * Method to recursively bind data to a parent object.	 *	 * @param   object  $parent  The parent object on which to attach the data values.	 * @param   mixed   $data    An array or object of data to bind to the parent object.	 *	 * @return  void	 *	 * @since   11.1	 */	protected function bindData($parent, $data)	{		// Ensure the input data is an array.		if (is_object($data))		{			$data = get_object_vars($data);		}		else		{			$data = (array) $data;		}		foreach ($data as $k => $v)		{			if ((is_array($v) && JArrayHelper::isAssociative($v)) || is_object($v))			{				$parent->$k = new stdClass;				$this->bindData($parent->$k, $v);			}			else			{				$parent->$k = $v;			}		}	}	/**	 * Method to recursively convert an object of data to an array.	 *	 * @param   object  $data  An object of data to return as an array.	 *	 * @return  array  Array representation of the input object.	 *	 * @since   11.1	 */	protected function asArray($data)	{		$array = array();		foreach (get_object_vars((object) $data) as $k => $v)		{			if (is_object($v))			{				$array[$k] = $this->asArray($v);			}			else			{				$array[$k] = $v;			}		}		return $array;	}}
<?php/** * @package     Joomla.Platform * @subpackage  Plugin * * @copyright   Copyright (C) 2005 - 2013 Open Source Matters, Inc. All rights reserved. * @license     GNU General Public License version 2 or later; see LICENSE */defined('JPATH_PLATFORM') or die;/** * Plugin helper class * * @package     Joomla.Platform * @subpackage  Plugin * @since       11.1 */abstract class JPluginHelper{	/**	 * A persistent cache of the loaded plugins.	 *	 * @var    array	 * @since  11.3	 */	protected static $plugins = null;	/**	 * Get the path to a layout from a Plugin	 *	 * @param   string  $type    Plugin type	 * @param   string  $name    Plugin name	 * @param   string  $layout  Layout name	 *	 * @return  string  Layout path	 *	 * @since   12.2	 */	public static function getLayoutPath($type, $name, $layout = 'default')	{		$template = JFactory::getApplication()->getTemplate();		$defaultLayout = $layout;		if (strpos($layout, ':') !== false)		{			// Get the template and file name from the string			$temp = explode(':', $layout);			$template = ($temp[0] == '_') ? $template : $temp[0];			$layout = $temp[1];			$defaultLayout = ($temp[1]) ? $temp[1] : 'default';		}		// Build the template and base path for the layout		$tPath = JPATH_THEMES . '/' . $template . '/html/plg_' . $type . '_' . $name . '/' . $layout . '.php';		$bPath = JPATH_BASE . '/plugins/' . $type . '/' . $name . '/tmpl/' . $defaultLayout . '.php';		$dPath = JPATH_BASE . '/plugins/' . $type . '/' . $name . '/tmpl/default.php';		// If the template has a layout override use it		if (file_exists($tPath))		{			return $tPath;		}		elseif (file_exists($bPath))		{			return $bPath;		}		else		{			return $dPath;		}	}	/**	 * Get the plugin data of a specific type if no specific plugin is specified	 * otherwise only the specific plugin data is returned.	 *	 * @param   string  $type    The plugin type, relates to the sub-directory in the plugins directory.	 * @param   string  $plugin  The plugin name.	 *	 * @return  mixed  An array of plugin data objects, or a plugin data object.	 *	 * @since   11.1	 */	public static function getPlugin($type, $plugin = null)	{		$result = array();		$plugins = self::_load();		// Find the correct plugin(s) to return.		if (!$plugin)		{			foreach ($plugins as $p)			{				// Is this the right plugin?				if ($p->type == $type)				{					$result[] = $p;				}			}		}		else		{			foreach ($plugins as $p)			{				// Is this plugin in the right group?				if ($p->type == $type && $p->name == $plugin)				{					$result = $p;					break;				}			}		}		return $result;	}	/**	 * Checks if a plugin is enabled.	 *	 * @param   string  $type    The plugin type, relates to the sub-directory in the plugins directory.	 * @param   string  $plugin  The plugin name.	 *	 * @return  boolean	 *	 * @since   11.1	 */	public static function isEnabled($type, $plugin = null)	{		$result = self::getPlugin($type, $plugin);		return (!empty($result));	}	/**	 * Loads all the plugin files for a particular type if no specific plugin is specified	 * otherwise only the specific plugin is loaded.	 *	 * @param   string            $type        The plugin type, relates to the sub-directory in the plugins directory.	 * @param   string            $plugin      The plugin name.	 * @param   boolean           $autocreate  Autocreate the plugin.	 * @param   JEventDispatcher  $dispatcher  Optionally allows the plugin to use a different dispatcher.	 *	 * @return  boolean  True on success.	 *	 * @since   11.1	 */	public static function importPlugin($type, $plugin = null, $autocreate = true, JEventDispatcher $dispatcher = null)	{		static $loaded = array();		// Check for the default args, if so we can optimise cheaply		$defaults = false;		if (is_null($plugin) && $autocreate == true && is_null($dispatcher))		{			$defaults = true;		}		if (!isset($loaded[$type]) || !$defaults)		{			$results = null;			// Load the plugins from the database.			$plugins = self::_load();			// Get the specified plugin(s).			for ($i = 0, $t = count($plugins); $i < $t; $i++)			{				if ($plugins[$i]->type == $type && ($plugin === null || $plugins[$i]->name == $plugin))				{					self::_import($plugins[$i], $autocreate, $dispatcher);					$results = true;				}			}			// Bail out early if we're not using default args			if (!$defaults)			{				return $results;			}			$loaded[$type] = $results;		}		return $loaded[$type];	}	/**	 * Loads the plugin file.	 *	 * @param   object            $plugin      The plugin.	 * @param   boolean           $autocreate  True to autocreate.	 * @param   JEventDispatcher  $dispatcher  Optionally allows the plugin to use a different dispatcher.	 *	 * @return  void	 *	 * @since   11.1	 */	protected static function _import($plugin, $autocreate = true, JEventDispatcher $dispatcher = null)	{		static $paths = array();		$plugin->type = preg_replace('/[^A-Z0-9_\.-]/i', '', $plugin->type);		$plugin->name = preg_replace('/[^A-Z0-9_\.-]/i', '', $plugin->name);		$path = JPATH_PLUGINS . '/' . $plugin->type . '/' . $plugin->name . '/' . $plugin->name . '.php';		if (!isset($paths[$path]))		{			if (file_exists($path))			{				if (!isset($paths[$path]))				{					require_once $path;				}				$paths[$path] = true;				if ($autocreate)				{					// Makes sure we have an event dispatcher					if (!is_object($dispatcher))					{						$dispatcher = JEventDispatcher::getInstance();					}					$className = 'plg' . $plugin->type . $plugin->name;					if (class_exists($className))					{						// Load the plugin from the database.						if (!isset($plugin->params))						{							// Seems like this could just go bye bye completely							$plugin = self::getPlugin($plugin->type, $plugin->name);						}						// Instantiate and register the plugin.						new $className($dispatcher, (array) ($plugin));					}				}			}			else			{				$paths[$path] = false;			}		}	}	/**	 * Loads the published plugins.	 *	 * @return  array  An array of published plugins	 *	 * @since   11.1	 */	protected static function _load()	{		if (self::$plugins !== null)		{			return self::$plugins;		}		$user = JFactory::getUser();		$cache = JFactory::getCache('com_plugins', '');		$levels = implode(',', $user->getAuthorisedViewLevels());		if (!self::$plugins = $cache->get($levels))		{			$db = JFactory::getDbo();			$query = $db->getQuery(true)				->select('folder AS type, element AS name, params')				->from('#__extensions')				->where('enabled >= 1')				->where('type =' . $db->quote('plugin'))				->where('state >= 0')				->where('access IN (' . $levels . ')')				->order('ordering');			self::$plugins = $db->setQuery($query)->loadObjectList();			$cache->store(self::$plugins, $levels);		}		return self::$plugins;	}}
<?php/** * @package     Joomla.Administrator * @subpackage  com_content * * @copyright   Copyright (C) 2005 - 2013 Open Source Matters, Inc. All rights reserved. * @license     GNU General Public License version 2 or later; see LICENSE.txt */defined('_JEXEC') or die;/** * View class for a list of articles. * * @package     Joomla.Administrator * @subpackage  com_content * @since       1.6 */class ContentViewArticles extends JViewLegacy{	protected $items;	protected $pagination;	protected $state;	/**	 * Display the view	 *	 * @return  void	 */	public function display($tpl = null)	{		if ($this->getLayout() !== 'modal')		{			ContentHelper::addSubmenu('articles');		}		$this->items		= $this->get('Items');		$this->pagination	= $this->get('Pagination');		$this->state		= $this->get('State');		$this->authors		= $this->get('Authors');		// Check for errors.		if (count($errors = $this->get('Errors')))		{			JError::raiseError(500, implode("\n", $errors));			return false;		}		// Levels filter.		$options	= array();		$options[]	= JHtml::_('select.option', '1', JText::_('J1'));		$options[]	= JHtml::_('select.option', '2', JText::_('J2'));		$options[]	= JHtml::_('select.option', '3', JText::_('J3'));		$options[]	= JHtml::_('select.option', '4', JText::_('J4'));		$options[]	= JHtml::_('select.option', '5', JText::_('J5'));		$options[]	= JHtml::_('select.option', '6', JText::_('J6'));		$options[]	= JHtml::_('select.option', '7', JText::_('J7'));		$options[]	= JHtml::_('select.option', '8', JText::_('J8'));		$options[]	= JHtml::_('select.option', '9', JText::_('J9'));		$options[]	= JHtml::_('select.option', '10', JText::_('J10'));		$this->f_levels = $options;		// We don't need toolbar in the modal window.		if ($this->getLayout() !== 'modal')		{			$this->addToolbar();			$this->sidebar = JHtmlSidebar::render();		}		parent::display($tpl);	}	/**	 * Add the page title and toolbar.	 *	 * @since   1.6	 */	protected function addToolbar()	{		$canDo = ContentHelper::getActions($this->state->get('filter.category_id'));		$user  = JFactory::getUser();		// Get the toolbar object instance		$bar = JToolBar::getInstance('toolbar');		JToolbarHelper::title(JText::_('COM_CONTENT_ARTICLES_TITLE'), 'article.png');		if ($canDo->get('core.create') || (count($user->getAuthorisedCategories('com_content', 'core.create'))) > 0 )		{			JToolbarHelper::addNew('article.add');		}		if (($canDo->get('core.edit')) || ($canDo->get('core.edit.own')))		{			JToolbarHelper::editList('article.edit');		}		if ($canDo->get('core.edit.state'))		{			JToolbarHelper::publish('articles.publish', 'JTOOLBAR_PUBLISH', true);			JToolbarHelper::unpublish('articles.unpublish', 'JTOOLBAR_UNPUBLISH', true);			JToolbarHelper::custom('articles.featured', 'featured.png', 'featured_f2.png', 'JFEATURED', true);			JToolbarHelper::archiveList('articles.archive');			JToolbarHelper::checkin('articles.checkin');		}		if ($this->state->get('filter.published') == -2 && $canDo->get('core.delete'))		{			JToolbarHelper::deleteList('', 'articles.delete', 'JTOOLBAR_EMPTY_TRASH');		}		elseif ($canDo->get('core.edit.state'))		{			JToolbarHelper::trash('articles.trash');		}		// Add a batch button		if ($user->authorise('core.edit'))		{			JHtml::_('bootstrap.modal', 'collapseModal');			$title = JText::_('JTOOLBAR_BATCH');			$dhtml = "<button data-toggle=\"modal\" data-target=\"#collapseModal\" class=\"btn btn-small\">						<i class=\"icon-checkbox-partial\" title=\"$title\"></i>						$title</button>";			$bar->appendButton('Custom', $dhtml, 'batch');		}		if ($canDo->get('core.admin'))		{			JToolbarHelper::preferences('com_content');		}		JToolbarHelper::help('JHELP_CONTENT_ARTICLE_MANAGER');		JHtmlSidebar::setAction('index.php?option=com_content&view=articles');		JHtmlSidebar::addFilter(			JText::_('JOPTION_SELECT_PUBLISHED'),			'filter_published',			JHtml::_('select.options', JHtml::_('jgrid.publishedOptions'), 'value', 'text', $this->state->get('filter.published'), true)		);		JHtmlSidebar::addFilter(			JText::_('JOPTION_SELECT_CATEGORY'),			'filter_category_id',			JHtml::_('select.options', JHtml::_('category.options', 'com_content'), 'value', 'text', $this->state->get('filter.category_id'))		);		JHtmlSidebar::addFilter(			JText::_('JOPTION_SELECT_MAX_LEVELS'),			'filter_level',			JHtml::_('select.options', $this->f_levels, 'value', 'text', $this->state->get('filter.level'))		);		JHtmlSidebar::addFilter(			JText::_('JOPTION_SELECT_ACCESS'),			'filter_access',			JHtml::_('select.options', JHtml::_('access.assetgroups'), 'value', 'text', $this->state->get('filter.access'))		);		JHtmlSidebar::addFilter(			JText::_('JOPTION_SELECT_AUTHOR'),			'filter_author_id',			JHtml::_('select.options', $this->authors, 'value', 'text', $this->state->get('filter.author_id'))		);		JHtmlSidebar::addFilter(			JText::_('JOPTION_SELECT_LANGUAGE'),			'filter_language',			JHtml::_('select.options', JHtml::_('contentlanguage.existing', true, true), 'value', 'text', $this->state->get('filter.language'))		);		JHtmlSidebar::addFilter(		'-' . JText::_('JSELECT') . ' ' . JText::_('JTAG') . '-',		'filter_tag',		JHtml::_('select.options', JHtml::_('tag.options', true, true), 'value', 'text', $this->state->get('filter.tag'))		);	}	/**	 * Returns an array of fields the table can be sorted by	 *	 * @return  array  Array containing the field name to sort by as the key and display text as value	 *	 * @since   3.0	 */	protected function getSortFields()	{		return array(			'a.ordering' => JText::_('JGRID_HEADING_ORDERING'),			'a.state' => JText::_('JSTATUS'),			'a.title' => JText::_('JGLOBAL_TITLE'),			'category_title' => JText::_('JCATEGORY'),			'access_level' => JText::_('JGRID_HEADING_ACCESS'),			'a.created_by' => JText::_('JAUTHOR'),			'language' => JText::_('JGRID_HEADING_LANGUAGE'),			'a.created' => JText::_('JDATE'),			'a.id' => JText::_('JGRID_HEADING_ID'),			'a.featured' => JText::_('JFEATURED')		);	}}
<?php/** * @package     Joomla.Administrator * @subpackage  Template.hathor * * @copyright   Copyright (C) 2005 - 2013 Open Source Matters, Inc. All rights reserved. * @license     GNU General Public License version 2 or later; see LICENSE.txt */defined('_JEXEC') or die;// Include the component HTML helpers.JHtml::addIncludePath(JPATH_COMPONENT.'/helpers/html');// Load the tooltip behavior.JHtml::_('behavior.tooltip');JHtml::_('behavior.formvalidation');JHtml::_('behavior.keepalive');// Create shortcut to parameters.$params = $this->state->get('params');$params = $params->toArray();// This checks if the config options have ever been saved. If they haven't they will fall back to the original settings.$editoroptions = isset($params['show_publishing_options']);$input = JFactory::getApplication()->input;if (!$editoroptions):	$params['show_publishing_options'] = '1';	$params['show_article_options'] = '1';	$params['show_urls_images_backend'] = '0';	$params['show_urls_images_frontend'] = '0';endif;// Check if the article uses configuration settings besides global. If so, use them.if (!empty($this->item->attribs['show_publishing_options'])):		$params['show_publishing_options'] = $this->item->attribs['show_publishing_options'];endif;if (!empty($this->item->attribs['show_article_options'])):		$params['show_article_options'] = $this->item->attribs['show_article_options'];endif;if (!empty($this->item->attribs['show_urls_images_backend'])):		$params['show_urls_images_backend'] = $this->item->attribs['show_urls_images_backend'];endif;?><script type="text/javascript">	Joomla.submitbutton = function(task)	{		if (task == 'article.cancel' || document.formvalidator.isValid(document.id('item-form')))		{			<?php echo $this->form->getField('articletext')->save(); ?>			Joomla.submitform(task, document.getElementById('item-form'));		}	}</script><div class="article-edit"><form action="<?php echo JRoute::_('index.php?option=com_content&layout=edit&id='.(int) $this->item->id); ?>" method="post" name="adminForm" id="item-form" class="form-validate">	<div class="col main-section">		<fieldset class="adminform">			<legend><?php echo empty($this->item->id) ? JText::_('COM_CONTENT_NEW_ARTICLE') : JText::sprintf('COM_CONTENT_EDIT_ARTICLE', $this->item->id); ?></legend>			<ul class="adminformlist">				<li><?php echo $this->form->getLabel('title'); ?>				<?php echo $this->form->getInput('title'); ?></li>				<li><?php echo $this->form->getLabel('alias'); ?>				<?php echo $this->form->getInput('alias'); ?></li>				<li><?php echo $this->form->getLabel('catid'); ?>				<?php echo $this->form->getInput('catid'); ?></li>				<li><?php echo $this->form->getLabel('state'); ?>				<?php echo $this->form->getInput('state'); ?></li>				<li><?php echo $this->form->getLabel('access'); ?>				<?php echo $this->form->getInput('access'); ?></li>				<?php if ($this->canDo->get('core.admin')) : ?>					<li><span class="faux-label"><?php echo JText::_('JGLOBAL_ACTION_PERMISSIONS_LABEL'); ?></span>						<button type="button" onclick="document.location.href='#access-rules';">							<?php echo JText::_('JGLOBAL_PERMISSIONS_ANCHOR'); ?>						</button>					</li>				<?php endif; ?>				<li><?php echo $this->form->getLabel('featured'); ?>				<?php echo $this->form->getInput('featured'); ?></li>				<li><?php echo $this->form->getLabel('language'); ?>				<?php echo $this->form->getInput('language'); ?></li>				<!-- Tag field -->				<?php foreach ($this->get('form')->getFieldset('jmetadata') as $field) : ?>					<?php if ($field->name == 'jform[metadata][tags][]') :?>						<li>							<?php echo $field->label; ?>							<div class="is-tagbox">								<?php echo $field->input; ?>							</div>						</li>					<?php endif; ?>				<?php endforeach; ?>				<li><?php echo $this->form->getLabel('id'); ?>				<?php echo $this->form->getInput('id'); ?></li>			</ul>			<div class="clr"></div>			<?php echo $this->form->getLabel('articletext'); ?>			<div class="clr"></div>			<?php echo $this->form->getInput('articletext'); ?>			<div class="clr"></div>		</fieldset>	</div>	<div class="col options-section">		<?php echo JHtml::_('sliders.start', 'content-sliders-' . $this->item->id, array('useCookie' => 1)); ?>		<?php // Do not show the publishing options if the edit form is configured not to. ?>		<?php  if ($params['show_publishing_options'] || ( $params['show_publishing_options'] = '' && !empty($editoroptions)) ) : ?>			<?php echo JHtml::_('sliders.panel', JText::_('COM_CONTENT_FIELDSET_PUBLISHING'), 'publishing-details'); ?>			<fieldset class="panelform">				<ul class="adminformlist">					<li><?php echo $this->form->getLabel('created_by'); ?>					<?php echo $this->form->getInput('created_by'); ?></li>					<li><?php echo $this->form->getLabel('created_by_alias'); ?>					<?php echo $this->form->getInput('created_by_alias'); ?></li>					<li><?php echo $this->form->getLabel('created'); ?>					<?php echo $this->form->getInput('created'); ?></li>						<li><?php echo $this->form->getLabel('publish_up'); ?>						<?php echo $this->form->getInput('publish_up'); ?></li>					<li><?php echo $this->form->getLabel('publish_down'); ?>					<?php echo $this->form->getInput('publish_down'); ?></li>					<?php if ($this->item->modified_by) : ?>						<li><?php echo $this->form->getLabel('modified_by'); ?>						<?php echo $this->form->getInput('modified_by'); ?></li>						<li><?php echo $this->form->getLabel('modified'); ?>						<?php echo $this->form->getInput('modified'); ?></li>					<?php endif; ?>					<?php if ($this->item->version) : ?>						<li><?php echo $this->form->getLabel('version'); ?>						<?php echo $this->form->getInput('version'); ?></li>					<?php endif; ?>					<?php if ($this->item->hits) : ?>						<li><?php echo $this->form->getLabel('hits'); ?>						<?php echo $this->form->getInput('hits'); ?></li>					<?php endif; ?>				</ul>			</fieldset>		<?php  endif; ?>		<?php  $fieldSets = $this->form->getFieldsets('attribs'); ?>			<?php foreach ($fieldSets as $name => $fieldSet) : ?>				<?php					// If the parameter says to show the article options or if the parameters have never been set, we will					// show the article options.					if ($params['show_article_options'] || (( $params['show_article_options'] == '' && !empty($editoroptions) ))):					// Go through all the fieldsets except the configuration and basic-limited, which are					// handled separately below.					if ($name != 'editorConfig' && $name != 'basic-limited') : ?>						<?php echo JHtml::_('sliders.panel', JText::_($fieldSet->label), $name.'-options'); ?>						<?php if (isset($fieldSet->description) && trim($fieldSet->description)) : ?>							<p class="tip"><?php echo $this->escape(JText::_($fieldSet->description));?></p>						<?php endif; ?>						<fieldset class="panelform">							<ul class="adminformlist">							<?php foreach ($this->form->getFieldset($name) as $field) : ?>								<li><?php echo $field->label; ?>								<?php echo $field->input; ?></li>							<?php endforeach; ?>							</ul>						</fieldset>					<?php endif ?>					<?php // If we are not showing the options we need to use the hidden fields so the values are not lost.  ?>				<?php  elseif ($name == 'basic-limited') : ?>						<?php foreach ($this->form->getFieldset('basic-limited') as $field) : ?>							<?php  echo $field->input; ?>						<?php endforeach; ?>				<?php endif; ?>			<?php endforeach; ?>			<?php // Not the best place, but here for continuity with 1.5/1/6/1.7 ?>				<fieldset class="panelform">				</fieldset>				<?php					// We need to make a separate space for the configuration					// so that those fields always show to those wih permissions					if ( $this->canDo->get('core.admin')   ):  ?>					<?php  echo JHtml::_('sliders.panel', JText::_('COM_CONTENT_SLIDER_EDITOR_CONFIG'), 'configure-sliders'); ?>						<fieldset  class="panelform" >							<ul class="adminformlist">							<?php foreach ($this->form->getFieldset('editorConfig') as $field) : ?>								<li><?php echo $field->label; ?>								<?php echo $field->input; ?></li>							<?php endforeach; ?>							</ul>						</fieldset>				<?php endif ?>		<?php // The url and images fields only show if the configuration is set to allow them.  ?>		<?php // This is for legacy reasons. ?>		<?php if ($params['show_urls_images_backend']) : ?>			<?php echo JHtml::_('sliders.panel', JText::_('COM_CONTENT_FIELDSET_URLS_AND_IMAGES'), 'urls_and_images-options'); ?>				<fieldset class="panelform">				<ul class="adminformlist">					<li>					<?php echo $this->form->getLabel('images'); ?>					<?php echo $this->form->getInput('images'); ?></li>					<?php foreach ($this->form->getGroup('images') as $field) : ?>						<li>							<?php if (!$field->hidden) : ?>								<?php echo $field->label; ?>							<?php endif; ?>							<?php echo $field->input; ?>						</li>					<?php endforeach; ?>						<?php foreach ($this->form->getGroup('urls') as $field) : ?>						<li>							<?php if (!$field->hidden) : ?>								<?php echo $field->label; ?>							<?php endif; ?>							<?php echo $field->input; ?>						</li>					<?php endforeach; ?>				</ul>				</fieldset>		<?php endif; ?>		<?php echo JHtml::_('sliders.panel', JText::_('JGLOBAL_FIELDSET_METADATA_OPTIONS'), 'meta-options'); ?>			<fieldset class="panelform">			<legend class="element-invisible"><?php echo JText::_('JGLOBAL_FIELDSET_METADATA_OPTIONS'); ?></legend>				<?php echo $this->loadTemplate('metadata'); ?>			</fieldset>		<?php			$fieldSets = $this->form->getFieldsets('associations');			foreach ($fieldSets as $name => $fieldSet) :				$label = !empty($fieldSet->label) ? $fieldSet->label : 'COM_CONTENT_'.$name.'_FIELDSET_LABEL';				echo JHtml::_('sliders.panel', JText::_($label), $name.'-options');					if (isset($fieldSet->description) && trim($fieldSet->description)) :						echo '<p class="tip">'.$this->escape(JText::_($fieldSet->description)).'</p>';					endif;					?>				<div class="clr"></div>				<fieldset class="panelform">					<ul class="adminformlist">						<?php foreach ($this->form->getFieldset($name) as $field) : ?>							<li><?php echo $field->label; ?>							<?php echo $field->input; ?></li>						<?php endforeach; ?>					</ul>				</fieldset>			<?php endforeach;?>		<?php echo JHtml::_('sliders.end'); ?>	</div>	<div class="clr"></div>	<?php if ($this->canDo->get('core.admin')) : ?>		<div  class="col rules-section">			<?php echo JHtml::_('sliders.start', 'permissions-sliders-' . $this->item->id, array('useCookie' => 1)); ?>				<?php echo JHtml::_('sliders.panel', JText::_('COM_CONTENT_FIELDSET_RULES'), 'access-rules'); ?>				<fieldset class="panelform">					<legend class="element-invisible"><?php echo JText::_('COM_CONTENT_FIELDSET_RULES'); ?></legend>					<?php echo $this->form->getLabel('rules'); ?>					<?php echo $this->form->getInput('rules'); ?>				</fieldset>			<?php echo JHtml::_('sliders.end'); ?>		</div>	<?php endif; ?>	<div>		<input type="hidden" name="task" value="" />		<input type="hidden" name="return" value="<?php echo $input->getCmd('return');?>" />		<?php echo JHtml::_('form.token'); ?>	</div></form><div class="clr"></div></div>
<?php/** * @package     Joomla.Administrator * @subpackage  com_search * * @copyright   Copyright (C) 2005 - 2013 Open Source Matters, Inc. All rights reserved. * @license     GNU General Public License version 2 or later; see LICENSE.txt */defined('_JEXEC') or die;// Include the component HTML helpers.JHtml::addIncludePath(JPATH_COMPONENT.'/helpers/html');JHtml::_('bootstrap.tooltip');JHtml::_('behavior.multiselect');JHtml::_('formbehavior.chosen', 'select');$listOrder	= $this->escape($this->state->get('list.ordering'));$listDirn	= $this->escape($this->state->get('list.direction'));$canDo		= SearchHelper::getActions();?><form action="<?php echo JRoute::_('index.php?option=com_search&view=searches'); ?>" method="post" name="adminForm" id="adminForm">	<div id="filter-bar" class="btn-toolbar">		<div class="filter-search btn-group pull-left">			<input type="text" name="filter_search" id="filter_search" placeholder="<?php echo JText::_('COM_SEARCH_SEARCH_IN_PHRASE'); ?>" value="<?php echo $this->escape($this->state->get('filter.search')); ?>" title="<?php echo JText::_('COM_SEARCH_SEARCH_IN_PHRASE'); ?>" />		</div>		<div class="filter-search btn-group pull-left">			<button class="btn hasTooltip" type="submit" title="<?php echo JText::_('JSEARCH_FILTER_SUBMIT'); ?>"><i class="icon-search"></i></button>			<button class="btn hasTooltip" type="button" title="<?php echo JText::_('JSEARCH_FILTER_CLEAR'); ?>" onclick="document.id('filter_search').value='';this.form.submit();"><i class="icon-remove"></i></button>		</div>		<div class="btn-group pull-right hidden-phone">			<label for="limit" class="element-invisible"><?php echo JText::_('JFIELD_PLG_SEARCH_SEARCHLIMIT_DESC');?></label>			<?php echo $this->pagination->getLimitBox(); ?>		</div>		<div class="filter-select btn-group pull-left">			<span class="adminlist-searchstatus">			<?php if ($this->state->get('filter.results')) : ?>				<a class="btn" href="<?php echo JRoute::_('index.php?option=com_search&filter_results=0');?>">					<i class="icon-zoom-out"></i> <?php echo JText::_('COM_SEARCH_HIDE_SEARCH_RESULTS'); ?></a>			<?php else : ?>				<a class="btn" href="<?php echo JRoute::_('index.php?option=com_search&filter_results=1');?>">					<i class="icon-zoom-in"></i> <?php echo JText::_('COM_SEARCH_SHOW_SEARCH_RESULTS'); ?></a>			<?php endif; ?>			</span>		</div>	</div>	<div class="clearfix"> </div>	<?php if ($this->enabled) : ?>	<div class="alert alert-info">		<a class="close" data-dismiss="alert"></a>		<span class="enabled"><?php echo JText::_('COM_SEARCH_LOGGING_ENABLED'); ?></span>	</div>	<?php else : ?>	<div class="alert alert-error">		<a class="close" data-dismiss="alert"></a>		<span class="disabled"><?php echo JText::_('COM_SEARCH_LOGGING_DISABLED'); ?></span>	</div>	<?php endif; ?>	<table class="table table-striped">		<thead>			<tr>				<th width="20">					<?php echo JText::_('JGRID_HEADING_ROW_NUMBER'); ?>				</th>				<th class="title">					<?php echo JHtml::_('grid.sort', 'COM_SEARCH_HEADING_PHRASE', 'a.search_term', $listDirn, $listOrder); ?>				</th>				<th width="15%" class="center">					<?php echo JHtml::_('grid.sort', 'JGLOBAL_HITS', 'a.hits', $listDirn, $listOrder); ?>				</th>				<th width="15%" class="center">					<?php echo JText::_('COM_SEARCH_HEADING_RESULTS'); ?>				</th>				<th width="30%">					&#160;				</th>			</tr>		</thead>		<tfoot>			<tr>				<td colspan="11">					<?php echo $this->pagination->getListFooter(); ?>				</td>			</tr>		</tfoot>		<tbody>		<?php foreach ($this->items as $i => $item) : ?>			<tr class="row<?php echo $i % 2; ?>">					<td class="right">						<?php echo $i + 1 + $this->pagination->limitstart; ?>					</td>					<td>						<?php echo $this->escape($item->search_term); ?>					</td>					<td class="center">						<?php echo (int) $item->hits; ?>					</td>					<td class="center">					<?php if ($this->state->get('filter.results')) : ?>						<?php echo (int) $item->returns; ?>					<?php else: ?>						<?php echo JText::_('COM_SEARCH_NO_RESULTS'); ?>					<?php endif; ?>					</td>					<td>						&#160;					</td>				</tr>			<?php endforeach; ?>			</tbody>		</table>	<div>		<input type="hidden" name="task" value="" />		<input type="hidden" name="boxchecked" value="0" />		<input type="hidden" name="filter_order" value="<?php echo $listOrder; ?>" />		<input type="hidden" name="filter_order_Dir" value="<?php echo $listDirn; ?>" />		<?php echo JHtml::_('form.token'); ?>	</div></form>
<?php/** * @package     Joomla.Administrator * @subpackage  com_users * * @copyright   Copyright (C) 2005 - 2013 Open Source Matters, Inc. All rights reserved. * @license     GNU General Public License version 2 or later; see LICENSE.txt */defined('_JEXEC') or die;/** * View class for a list of user groups. * * @package     Joomla.Administrator * @subpackage  com_users * @since       1.6 */class UsersViewGroups extends JViewLegacy{	protected $items;	protected $pagination;	protected $state;	/**	 * Display the view	 */	public function display($tpl = null)	{		$this->items		= $this->get('Items');		$this->pagination	= $this->get('Pagination');		$this->state		= $this->get('State');		UsersHelper::addSubmenu('groups');		// Check for errors.		if (count($errors = $this->get('Errors')))		{			JError::raiseError(500, implode("\n", $errors));			return false;		}		$this->addToolbar();		$this->sidebar = JHtmlSidebar::render();		parent::display($tpl);	}	/**	 * Add the page title and toolbar.	 *	 * @since   1.6	 */	protected function addToolbar()	{		$canDo	= UsersHelper::getActions();		JToolbarHelper::title(JText::_('COM_USERS_VIEW_GROUPS_TITLE'), 'groups');		if ($canDo->get('core.create'))		{			JToolbarHelper::addNew('group.add');		}		if ($canDo->get('core.edit'))		{			JToolbarHelper::editList('group.edit');			JToolbarHelper::divider();		}		if ($canDo->get('core.delete'))		{			JToolbarHelper::deleteList('', 'groups.delete');			JToolbarHelper::divider();		}		if ($canDo->get('core.admin'))		{			JToolbarHelper::preferences('com_users');			JToolbarHelper::divider();		}		JToolbarHelper::help('JHELP_USERS_GROUPS');	}}
<?php/** * @package     Joomla.Administrator * @subpackage  com_finder * * @copyright   Copyright (C) 2005 - 2013 Open Source Matters, Inc. All rights reserved. * @license     GNU General Public License version 2 or later; see LICENSE */defined('_JEXEC') or die;/** * Indexer view class for Finder. * * @package     Joomla.Administrator * @subpackage  com_finder * @since       2.5 */class FinderViewIndexer extends JViewLegacy{	/**	 * Method to display the view.	 *	 * @param   string  $tpl  A template file to load. [optional]	 *	 * @return  void	 *	 * @since   2.5	 */	public function display($tpl = null)	{		JHtml::_('behavior.framework');		JHtml::_('stylesheet', 'com_finder/indexer.css', false, true, false);		JHtml::_('script', 'com_finder/indexer.js', false, true);		JHtml::_('script', 'system/progressbar.js', true, true);		parent::display();	}}
<?php/** * @package     Joomla.Administrator * @subpackage  com_modules * * @copyright   Copyright (C) 2005 - 2013 Open Source Matters, Inc. All rights reserved. * @license     GNU General Public License version 2 or later; see LICENSE.txt */defined('_JEXEC') or die;/** * Module model. * * @package     Joomla.Administrator * @subpackage  com_modules * @since       1.6 */class ModulesModelModule extends JModelAdmin{	/**	 * @var    string  The prefix to use with controller messages.	 * @since  1.6	 */	protected $text_prefix = 'COM_MODULES';	/**	 * @var    string  The help screen key for the module.	 * @since  1.6	 */	protected $helpKey = 'JHELP_EXTENSIONS_MODULE_MANAGER_EDIT';	/**	 * @var    string  The help screen base URL for the module.	 * @since  1.6	 */	protected $helpURL;	/**	 * Method to auto-populate the model state.	 *	 * Note. Calling getState in this method will result in recursion.	 *	 * @return  void	 *	 * @since   1.6	 */	protected function populateState()	{		$app = JFactory::getApplication('administrator');		// Load the User state.		$pk = $app->input->getInt('id');		if (!$pk)		{			if ($extensionId = (int) $app->getUserState('com_modules.add.module.extension_id'))			{				$this->setState('extension.id', $extensionId);			}		}		$this->setState('module.id', $pk);		// Load the parameters.		$params	= JComponentHelper::getParams('com_modules');		$this->setState('params', $params);	}	/**	 * Method to perform batch operations on a set of modules.	 *	 * @param   array  $commands  An array of commands to perform.	 * @param   array  $pks       An array of item ids.	 * @param   array  $contexts  An array of item contexts.	 *	 * @return  boolean  Returns true on success, false on failure.	 *	 * @since   1.7	 */	public function batch($commands, $pks, $contexts)	{		// Sanitize user ids.		$pks = array_unique($pks);		JArrayHelper::toInteger($pks);		// Remove any values of zero.		if (array_search(0, $pks, true))		{			unset($pks[array_search(0, $pks, true)]);		}		if (empty($pks))		{			$this->setError(JText::_('JGLOBAL_NO_ITEM_SELECTED'));			return false;		}		$done = false;		if (!empty($commands['position_id']))		{			$cmd = JArrayHelper::getValue($commands, 'move_copy', 'c');			if (!empty($commands['position_id']))			{				if ($cmd == 'c')				{					$result = $this->batchCopy($commands['position_id'], $pks, $contexts);					if (is_array($result))					{						$pks = $result;					}					else					{						return false;					}				}				elseif ($cmd == 'm' && !$this->batchMove($commands['position_id'], $pks, $contexts))				{					return false;				}				$done = true;			}		}		if (!empty($commands['assetgroup_id']))		{			if (!$this->batchAccess($commands['assetgroup_id'], $pks, $contexts))			{				return false;			}			$done = true;		}		if (!empty($commands['language_id']))		{			if (!$this->batchLanguage($commands['language_id'], $pks, $contexts))			{				return false;			}			$done = true;		}		if (!$done)		{			$this->setError(JText::_('JLIB_APPLICATION_ERROR_INSUFFICIENT_BATCH_INFORMATION'));			return false;		}		// Clear the cache		$this->cleanCache();		return true;	}	/**	 * Batch copy modules to a new position or current.	 *	 * @param   integer  $value     The new value matching a module position.	 * @param   array    $pks       An array of row IDs.	 * @param   array    $contexts  An array of item contexts.	 *	 * @return  boolean  True if successful, false otherwise and internal error is set.	 *	 * @since   2.5	 */	protected function batchCopy($value, $pks, $contexts)	{		// Set the variables		$user = JFactory::getUser();		$table = $this->getTable();		$newIds = array();		$i = 0;		foreach ($pks as $pk)		{			if ($user->authorise('core.create', 'com_modules'))			{				$table->reset();				$table->load($pk);				// Set the new position				if ($value == 'noposition')				{					$position = '';				}				elseif ($value == 'nochange')				{					$position = $table->position;				}				else				{					$position = $value;				}				$table->position = $position;				// Alter the title if necessary				$data = $this->generateNewTitle(0, $table->title, $table->position);				$table->title = $data['0'];				// Reset the ID because we are making a copy				$table->id = 0;				// Unpublish the new module				$table->published = 0;				if (!$table->store())				{					$this->setError($table->getError());					return false;				}				// Get the new item ID				$newId = $table->get('id');				// Add the new ID to the array				$newIds[$i]	= $newId;				$i++;				// Now we need to handle the module assignments				$db = $this->getDbo();				$query = $db->getQuery(true)					->select($db->quoteName('menuid'))					->from($db->quoteName('#__modules_menu'))					->where($db->quoteName('moduleid') . ' = ' . $pk);				$db->setQuery($query);				$menus = $db->loadColumn();				// Insert the new records into the table				foreach ($menus as $menu)				{					$query->clear()						->insert($db->quoteName('#__modules_menu'))						->columns(array($db->quoteName('moduleid'), $db->quoteName('menuid')))						->values($newId . ', ' . $menu);					$db->setQuery($query);					$db->execute();				}			}			else			{				$this->setError(JText::_('JLIB_APPLICATION_ERROR_BATCH_CANNOT_CREATE'));				return false;			}		}		// Clean the cache		$this->cleanCache();		return $newIds;	}	/**	 * Batch move modules to a new position or current.	 *	 * @param   integer  $value     The new value matching a module position.	 * @param   array    $pks       An array of row IDs.	 * @param   array    $contexts  An array of item contexts.	 *	 * @return  boolean  True if successful, false otherwise and internal error is set.	 *	 * @since   2.5	 */	protected function batchMove($value, $pks, $contexts)	{		// Set the variables		$user = JFactory::getUser();		$table = $this->getTable();		foreach ($pks as $pk)		{			if ($user->authorise('core.edit', 'com_modules'))			{				$table->reset();				$table->load($pk);				// Set the new position				if ($value == 'noposition')				{					$position = '';				}				elseif ($value == 'nochange')				{					$position = $table->position;				}				else				{					$position = $value;				}				$table->position = $position;				// Alter the title if necessary				$data = $this->generateNewTitle(0, $table->title, $table->position);				$table->title = $data['0'];				// Unpublish the moved module				$table->published = 0;				if (!$table->store())				{					$this->setError($table->getError());					return false;				}			}			else			{				$this->setError(JText::_('JLIB_APPLICATION_ERROR_BATCH_CANNOT_EDIT'));				return false;			}		}		// Clean the cache		$this->cleanCache();		return true;	}	/**	 * Method to delete rows.	 *	 * @param   array  &$pks  An array of item ids.	 *	 * @return  boolean  Returns true on success, false on failure.	 *	 * @since   1.6	 * @throws  Exception	 */	public function delete(&$pks)	{		$pks	= (array) $pks;		$user	= JFactory::getUser();		$table	= $this->getTable();		// Iterate the items to delete each one.		foreach ($pks as $pk)		{			if ($table->load($pk))			{				// Access checks.				if (!$user->authorise('core.delete', 'com_modules') || $table->published != -2)				{					JError::raiseWarning(403, JText::_('JERROR_CORE_DELETE_NOT_PERMITTED'));					return;				}				if (!$table->delete($pk))				{					throw new Exception($table->getError());				}				else				{					// Delete the menu assignments					$db    = $this->getDbo();					$query = $db->getQuery(true)						->delete('#__modules_menu')						->where('moduleid=' . (int) $pk);					$db->setQuery($query);					$db->execute();				}				// Clear module cache				parent::cleanCache($table->module, $table->client_id);			}			else			{				throw new Exception($table->getError());			}		}		// Clear modules cache		$this->cleanCache();		return true;	}	/**	 * Method to duplicate modules.	 *	 * @param   array  &$pks  An array of primary key IDs.	 *	 * @return  boolean  True if successful.	 *	 * @since   1.6	 * @throws  Exception	 */	public function duplicate(&$pks)	{		$user	= JFactory::getUser();		$db		= $this->getDbo();		// Access checks.		if (!$user->authorise('core.create', 'com_modules'))		{			throw new Exception(JText::_('JERROR_CORE_CREATE_NOT_PERMITTED'));		}		$table = $this->getTable();		foreach ($pks as $pk)		{			if ($table->load($pk, true))			{				// Reset the id to create a new record.				$table->id = 0;				// Alter the title.				$m = null;				if (preg_match('#\((\d+)\)$#', $table->title, $m))				{					$table->title = preg_replace('#\(\d+\)$#', '(' . ($m[1] + 1) . ')', $table->title);				}				else				{					$table->title .= ' (2)';				}				// Unpublish duplicate module				$table->published = 0;				if (!$table->check() || !$table->store())				{					throw new Exception($table->getError());				}				// $query = 'SELECT menuid'				//	. ' FROM #__modules_menu'				//	. ' WHERE moduleid = ' . (int) $pk				//	;				$query	= $db->getQuery(true)					->select('menuid')					->from('#__modules_menu')					->where('moduleid=' . (int) $pk);				$this->_db->setQuery($query);				$rows = $this->_db->loadColumn();				foreach ($rows as $menuid)				{					$tuples[] = '(' . (int) $table->id . ',' . (int) $menuid . ')';				}			}			else			{				throw new Exception($table->getError());			}		}		if (!empty($tuples))		{			// Module-Menu Mapping: Do it in one query			$query = 'INSERT INTO #__modules_menu (moduleid,menuid) VALUES ' . implode(',', $tuples);			$this->_db->setQuery($query);			try			{				$this->_db->execute();			}			catch (RuntimeException $e)			{				return JError::raiseWarning(500, $e->getMessage());			}		}		// Clear modules cache		$this->cleanCache();		return true;	}	/**	 * Method to change the title.	 *	 * @param   integer  $category_id  The id of the category. Not used here.	 * @param   string   $title        The title.	 * @param   string   $position     The position.	 *	 * @return  array  Contains the modified title.	 *	 * @since   2.5	 */	protected function generateNewTitle($category_id, $title, $position)	{		// Alter the title & alias		$table = $this->getTable();		while ($table->load(array('position' => $position, 'title' => $title)))		{			$title = JString::increment($title);		}		return array($title);	}	/**	 * Method to get the client object	 *	 * @return  void	 *	 * @since   1.6	 */	public function &getClient()	{		return $this->_client;	}	/**	 * Method to get the record form.	 *	 * @param   array    $data      Data for the form.	 * @param   boolean  $loadData  True if the form is to load its own data (default case), false if not.	 *	 * @return  JForm  A JForm object on success, false on failure	 *	 * @since   1.6	 */	public function getForm($data = array(), $loadData = true)	{		// The folder and element vars are passed when saving the form.		if (empty($data))		{			$item		= $this->getItem();			$clientId	= $item->client_id;			$module		= $item->module;		}		else		{			$clientId	= JArrayHelper::getValue($data, 'client_id');			$module		= JArrayHelper::getValue($data, 'module');		}		// These variables are used to add data from the plugin XML files.		$this->setState('item.client_id', $clientId);		$this->setState('item.module', $module);		// Get the form.		$form = $this->loadForm('com_modules.module', 'module', array('control' => 'jform', 'load_data' => $loadData));		if (empty($form))		{			return false;		}		$form->setFieldAttribute('position', 'client', $this->getState('item.client_id') == 0 ? 'site' : 'administrator');		// Modify the form based on access controls.		if (!$this->canEditState((object) $data))		{			// Disable fields for display.			$form->setFieldAttribute('ordering', 'disabled', 'true');			$form->setFieldAttribute('published', 'disabled', 'true');			$form->setFieldAttribute('publish_up', 'disabled', 'true');			$form->setFieldAttribute('publish_down', 'disabled', 'true');			// Disable fields while saving.			// The controller has already verified this is a record you can edit.			$form->setFieldAttribute('ordering', 'filter', 'unset');			$form->setFieldAttribute('published', 'filter', 'unset');			$form->setFieldAttribute('publish_up', 'filter', 'unset');			$form->setFieldAttribute('publish_down', 'filter', 'unset');		}		return $form;	}	/**	 * Method to get the data that should be injected in the form.	 *	 * @return  mixed  The data for the form.	 *	 * @since   1.6	 */	protected function loadFormData()	{		$app = JFactory::getApplication();		// Check the session for previously entered form data.		$data = JFactory::getApplication()->getUserState('com_modules.edit.module.data', array());		if (empty($data))		{			$data = $this->getItem();			// This allows us to inject parameter settings into a new module.			$params = $app->getUserState('com_modules.add.module.params');			if (is_array($params))			{				$data->set('params', $params);			}		}		$this->preprocessData('com_modules.module', $data);		return $data;	}	/**	 * Method to get a single record.	 *	 * @param   integer  $pk  The id of the primary key.	 *	 * @return  mixed  Object on success, false on failure.	 *	 * @since   1.6	 */	public function getItem($pk = null)	{		$pk	= (!empty($pk)) ? (int) $pk : (int) $this->getState('module.id');		$db	= $this->getDbo();		if (!isset($this->_cache[$pk]))		{			$false	= false;			// Get a row instance.			$table = $this->getTable();			// Attempt to load the row.			$return = $table->load($pk);			// Check for a table object error.			if ($return === false && $error = $table->getError())			{				$this->setError($error);				return $false;			}			// Check if we are creating a new extension.			if (empty($pk))			{				if ($extensionId = (int) $this->getState('extension.id'))				{					$query	= $db->getQuery(true)						->select('element, client_id')						->from('#__extensions')						->where('extension_id = ' . $extensionId)						->where('type = ' . $db->quote('module'));					$db->setQuery($query);					try					{						$extension = $db->loadObject();					}					catch (RuntimeException $e)					{						$this->setError($e->getMessage);						return false;					}					if (empty($extension))					{						$this->setError('COM_MODULES_ERROR_CANNOT_FIND_MODULE');						return false;					}					// Extension found, prime some module values.					$table->module    = $extension->element;					$table->client_id = $extension->client_id;				}				else				{					$app = JFactory::getApplication();					$app->redirect(JRoute::_('index.php?option=com_modules&view=modules', false));					return false;				}			}			// Convert to the JObject before adding other data.			$properties = $table->getProperties(1);			$this->_cache[$pk] = JArrayHelper::toObject($properties, 'JObject');			// Convert the params field to an array.			$registry = new JRegistry;			$registry->loadString($table->params);			$this->_cache[$pk]->params = $registry->toArray();			// Determine the page assignment mode.			$db->setQuery(				'SELECT menuid' .				' FROM #__modules_menu' .				' WHERE moduleid = ' . $pk			);			$assigned = $db->loadColumn();			if (empty($pk))			{				// If this is a new module, assign to all pages.				$assignment = 0;			}			elseif (empty($assigned))			{				// For an existing module it is assigned to none.				$assignment = '-';			}			else			{				if ($assigned[0] > 0)				{					$assignment = +1;				}				elseif ($assigned[0] < 0)				{					$assignment = -1;				}				else				{					$assignment = 0;				}			}			$this->_cache[$pk]->assigned = $assigned;			$this->_cache[$pk]->assignment = $assignment;			// Get the module XML.			$client	= JApplicationHelper::getClientInfo($table->client_id);			$path	= JPath::clean($client->path . '/modules/' . $table->module . '/' . $table->module . '.xml');			if (file_exists($path))			{				$this->_cache[$pk]->xml = simplexml_load_file($path);			}			else			{				$this->_cache[$pk]->xml = null;			}		}		return $this->_cache[$pk];	}	/**	 * Get the necessary data to load an item help screen.	 *	 * @return  object  An object with key, url, and local properties for loading the item help screen.	 *	 * @since   1.6	 */	public function getHelp()	{		return (object) array('key' => $this->helpKey, 'url' => $this->helpURL);	}	/**	 * Returns a reference to the a Table object, always creating it.	 *	 * @param   string  $type    The table type to instantiate	 * @param   string  $prefix  A prefix for the table class name. Optional.	 * @param   array   $config  Configuration array for model. Optional.	 *	 * @return  JTable  A database object	 *	 * @since   1.6	*/	public function getTable($type = 'Module', $prefix = 'JTable', $config = array())	{		return JTable::getInstance($type, $prefix, $config);	}	/**	 * Prepare and sanitise the table prior to saving.	 *	 * @param   JTable  $table  The database object	 *	 * @return  void	 *	 * @since   1.6	 */	protected function prepareTable($table)	{		$date = JFactory::getDate();		$user = JFactory::getUser();		$table->title		= htmlspecialchars_decode($table->title, ENT_QUOTES);		if (empty($table->id))		{			// Set the values			// $table->created = $date->toSql();		}		else		{			// Set the values			// $table->modified    = $date->toSql();			// $table->modified_by = $user->get('id');		}	}	/**	 * Method to preprocess the form	 *	 * @param   JForm   $form   A form object.	 * @param   mixed   $data   The data expected for the form.	 * @param   string  $group  The name of the plugin group to import (defaults to "content").	 *	 * @return  void	 *	 * @since   1.6	 * @throws  Exception if there is an error loading the form.	 */	protected function preprocessForm(JForm $form, $data, $group = 'content')	{		jimport('joomla.filesystem.path');		$lang     = JFactory::getLanguage();		$clientId = $this->getState('item.client_id');		$module   = $this->getState('item.module');		$client   = JApplicationHelper::getClientInfo($clientId);		$formFile = JPath::clean($client->path . '/modules/' . $module . '/' . $module . '.xml');		// Load the core and/or local language file(s).		$lang->load($module, $client->path, null, false, false)			||	$lang->load($module, $client->path . '/modules/' . $module, null, false, false)			||	$lang->load($module, $client->path, $lang->getDefault(), false, false)			||	$lang->load($module, $client->path . '/modules/' . $module, $lang->getDefault(), false, false);		if (file_exists($formFile))		{			// Get the module form.			if (!$form->loadFile($formFile, false, '//config'))			{				throw new Exception(JText::_('JERROR_LOADFILE_FAILED'));			}			// Attempt to load the xml file.			if (!$xml = simplexml_load_file($formFile))			{				throw new Exception(JText::_('JERROR_LOADFILE_FAILED'));			}			// Get the help data from the XML file if present.			$help = $xml->xpath('/extension/help');			if (!empty($help))			{				$helpKey = trim((string) $help[0]['key']);				$helpURL = trim((string) $help[0]['url']);				$this->helpKey = $helpKey ? $helpKey : $this->helpKey;				$this->helpURL = $helpURL ? $helpURL : $this->helpURL;			}		}		// Load the default advanced params		JForm::addFormPath(JPATH_ADMINISTRATOR . '/components/com_modules/models/forms');		$form->loadFile('advanced', false);		// Trigger the default form events.		parent::preprocessForm($form, $data, $group);	}	/**	 * Loads ContentHelper for filters before validating data.	 *	 * @param   object  $form   The form to validate against.	 * @param   array   $data   The data to validate.	 * @param   string  $group  The name of the group(defaults to null).	 *	 * @return  mixed  Array of filtered data if valid, false otherwise.	 *	 * @since   1.1	 */	public function validate($form, $data, $group = null)	{		require_once JPATH_ADMINISTRATOR . '/components/com_content/helpers/content.php';		return parent::validate($form, $data, $group);	}	/**	 * Method to save the form data.	 *	 * @param   array  $data  The form data.	 *	 * @return  boolean  True on success.	 *	 * @since   1.6	 */	public function save($data)	{		$dispatcher = JEventDispatcher::getInstance();		$input      = JFactory::getApplication()->input;		$table		= $this->getTable();		$pk			= (!empty($data['id'])) ? $data['id'] : (int) $this->getState('module.id');		$isNew		= true;		// Include the content modules for the onSave events.		JPluginHelper::importPlugin('extension');		// Load the row if saving an existing record.		if ($pk > 0)		{			$table->load($pk);			$isNew = false;		}		// Alter the title and published state for Save as Copy		if ($input->get('task') == 'save2copy')		{			$orig_data  = $input->post->get('jform', array(), 'array');			$orig_table = clone($this->getTable());			$orig_table->load((int) $orig_data['id']);			if ($data['title'] == $orig_table->title)			{				$data['title'] .= ' ' . JText::_('JGLOBAL_COPY');				$data['published'] = 0;			}		}		// Bind the data.		if (!$table->bind($data))		{			$this->setError($table->getError());			return false;		}		// Prepare the row for saving		$this->prepareTable($table);		// Check the data.		if (!$table->check())		{			$this->setError($table->getError());			return false;		}		// Trigger the onExtensionBeforeSave event.		$result = $dispatcher->trigger('onExtensionBeforeSave', array('com_modules.module', &$table, $isNew));		if (in_array(false, $result, true))		{			$this->setError($table->getError());			return false;		}		// Store the data.		if (!$table->store())		{			$this->setError($table->getError());			return false;		}		// Process the menu link mappings.		$assignment = isset($data['assignment']) ? $data['assignment'] : 0;		// Delete old module to menu item associations		// $db->setQuery(		//	'DELETE FROM #__modules_menu'.		//	' WHERE moduleid = '.(int) $table->id		// );		$db    = $this->getDbo();		$query = $db->getQuery(true)			->delete('#__modules_menu')			->where('moduleid = ' . (int) $table->id);		$db->setQuery($query);		try		{			$db->execute();		}		catch (RuntimeException $e)		{			$this->setError($e->getMessage());			return false;		}		// If the assignment is numeric, then something is selected (otherwise it's none).		if (is_numeric($assignment))		{			// Variable is numeric, but could be a string.			$assignment = (int) $assignment;			// Logic check: if no module excluded then convert to display on all.			if ($assignment == -1 && empty($data['assigned']))			{				$assignment = 0;			}			// Check needed to stop a module being assigned to `All`			// and other menu items resulting in a module being displayed twice.			if ($assignment === 0)			{				// Assign new module to `all` menu item associations.				// $this->_db->setQuery(				//  'INSERT INTO #__modules_menu'.				//  ' SET moduleid = ' . (int) $table->id . ', menuid = 0'				// )				$query->clear()					->insert('#__modules_menu')					->columns(array($db->quoteName('moduleid'), $db->quoteName('menuid')))					->values((int) $table->id . ', 0');				$db->setQuery($query);				try				{					$db->execute();				}				catch (RuntimeException $e)				{					$this->setError($e->getMessage());					return false;				}			}			elseif (!empty($data['assigned']))			{				// Get the sign of the number.				$sign = $assignment < 0 ? -1 : +1;				// Preprocess the assigned array.				$tuples = array();				foreach ($data['assigned'] as &$pk)				{					$tuples[] = '(' . (int) $table->id . ',' . (int) $pk * $sign . ')';				}				$this->_db->setQuery(					'INSERT INTO #__modules_menu (moduleid, menuid) VALUES ' .					implode(',', $tuples)				);				try				{					$db->execute();				}				catch (RuntimeException $e)				{					$this->setError($e->getMessage());					return false;				}			}		}		// Trigger the onExtensionAfterSave event.		$dispatcher->trigger('onExtensionAfterSave', array('com_modules.module', &$table, $isNew));		// Compute the extension id of this module in case the controller wants it.		$query	= $db->getQuery(true)			->select('extension_id')			->from('#__extensions AS e')			->join('LEFT', '#__modules AS m ON e.element = m.module')			->where('m.id = ' . (int) $table->id);		$db->setQuery($query);		try		{			$extensionId = $db->loadResult();		}		catch (RuntimeException $e)		{			JError::raiseWarning(500, $e->getMessage());			return false;		}		$this->setState('module.extension_id', $extensionId);		$this->setState('module.id', $table->id);		// Clear modules cache		$this->cleanCache();		// Clean module cache		parent::cleanCache($table->module, $table->client_id);		return true;	}	/**	 * A protected method to get a set of ordering conditions.	 *	 * @param   object  $table  A record object.	 *	 * @return  array  An array of conditions to add to add to ordering queries.	 *	 * @since   1.6	 */	protected function getReorderConditions($table)	{		$condition = array();		$condition[] = 'client_id = ' . (int) $table->client_id;		$condition[] = 'position = ' . $this->_db->quote($table->position);		return $condition;	}	/**	 * Custom clean cache method for different clients	 *	 * @param   string   $group      The name of the plugin group to import (defaults to null).	 * @param   integer  $client_id  The client ID. [optional]	 *	 * @return  void	 *	 * @since   1.6	 */	protected function cleanCache($group = null, $client_id = 0)	{		parent::cleanCache('com_modules', $this->getClient());	}}
<?php/** * @package     Joomla.Administrator * @subpackage  com_modules * * @copyright   Copyright (C) 2005 - 2013 Open Source Matters, Inc. All rights reserved. * @license     GNU General Public License version 2 or later; see LICENSE.txt */defined('_JEXEC') or die;/** * HTML View class for the Modules component * * @package     Joomla.Administrator * @subpackage  com_modules * @since       1.6 */class ModulesViewSelect extends JViewLegacy{	protected $state;	protected $items;	/**	 * Display the view	 */	public function display($tpl = null)	{		$state		= $this->get('State');		$items		= $this->get('Items');		// Check for errors.		if (count($errors = $this->get('Errors')))		{			JError::raiseError(500, implode("\n", $errors));			return false;		}		$this->state = &$state;		$this->items = &$items;		$this->addToolbar();		parent::display($tpl);	}	/**	 * Add the page title and toolbar.	 *	 * @since   3.0	 */	protected function addToolbar()	{		// Add page title		JToolbarHelper::title(JText::_('COM_MODULES_MANAGER_MODULES'), 'module.png');		// Get the toolbar object instance		$bar = JToolBar::getInstance('toolbar');		// Cancel		$title = JText::_('JTOOLBAR_CANCEL');		$dhtml = "<button onClick=\"location.href='index.php?option=com_modules'\" class=\"btn\">					<i class=\"icon-remove\" title=\"$title\"></i>					$title</button>";		$bar->appendButton('Custom', $dhtml, 'new');	}}
<?php/** * @package     Joomla.Administrator * @subpackage  com_weblinks * * @copyright   Copyright (C) 2005 - 2013 Open Source Matters, Inc. All rights reserved. * @license     GNU General Public License version 2 or later; see LICENSE.txt */defined('_JEXEC') or die;if (!JFactory::getUser()->authorise('core.manage', 'com_weblinks')){	return JError::raiseWarning(404, JText::_('JERROR_ALERTNOAUTHOR'));}$controller	= JControllerLegacy::getInstance('Weblinks');$controller->execute(JFactory::getApplication()->input->get('task'));$controller->redirect();
<?php/** * @package     Joomla.Platform * @subpackage  Form * * @copyright   Copyright (C) 2005 - 2013 Open Source Matters, Inc. All rights reserved. * @license     GNU General Public License version 2 or later; see LICENSE */defined('JPATH_PLATFORM') or die;/** * Form Field class for the Joomla Platform. * Text field for passwords * * @package     Joomla.Platform * @subpackage  Form * @link        http://www.w3.org/TR/html-markup/input.password.html#input.password * @note        Two password fields may be validated as matching using JFormRuleEquals * @since       11.1 */class JFormFieldPassword extends JFormField{	/**	 * The form field type.	 *	 * @var    string	 * @since  11.1	 */	protected $type = 'Password';	/**	 * Method to get the field input markup for password.	 *	 * @return  string  The field input markup.	 *	 * @since   11.1	 */	protected function getInput()	{		// Initialize some field attributes.		$size		= $this->element['size'] ? ' size="' . (int) $this->element['size'] . '"' : '';		$maxLength	= $this->element['maxlength'] ? ' maxlength="' . (int) $this->element['maxlength'] . '"' : '';		$class		= $this->element['class'] ? ' class="' . (string) $this->element['class'] . '"' : '';		$auto		= ((string) $this->element['autocomplete'] == 'off') ? ' autocomplete="off"' : '';		$readonly	= ((string) $this->element['readonly'] == 'true') ? ' readonly="readonly"' : '';		$disabled	= ((string) $this->element['disabled'] == 'true') ? ' disabled="disabled"' : '';		$meter		= ((string) $this->element['strengthmeter'] == 'true');		$required   = $this->required ? ' required="required" aria-required="true"' : '';		$threshold	= $this->element['threshold'] ? (int) $this->element['threshold'] : 66;		$script = '';		if ($meter)		{			JHtml::_('script', 'system/passwordstrength.js', true, true);			$script = '<script type="text/javascript">new Form.PasswordStrength("' . $this->id . '",				{					threshold: ' . $threshold . ',					onUpdate: function(element, strength, threshold) {						element.set("data-passwordstrength", strength);					}				}			);</script>';		}		return '<input type="password" name="' . $this->name . '" id="' . $this->id . '"' .			' value="' . htmlspecialchars($this->value, ENT_COMPAT, 'UTF-8') . '"' .			$auto . $class . $readonly . $disabled . $size . $maxLength . $required . '/>' . $script;	}}
<?php/** * @package     Joomla.Libraries * @subpackage  HTML * * @copyright   Copyright (C) 2005 - 2013 Open Source Matters, Inc. All rights reserved. * @license     GNU General Public License version 2 or later; see LICENSE */defined('JPATH_PLATFORM') or die;/** * Utility class for form related behaviors * * @package     Joomla.Libraries * @subpackage  HTML * @since       3.0 */abstract class JHtmlFormbehavior{	/**	 * @var    array  Array containing information for loaded files	 * @since  3.0	 */	protected static $loaded = array();	/**	 * Method to load the Chosen JavaScript framework and supporting CSS into the document head	 *	 * If debugging mode is on an uncompressed version of Chosen is included for easier debugging.	 *	 * @param   string  $selector  Class for Chosen elements.	 * @param   mixed   $debug     Is debugging mode on? [optional]	 *	 * @return  void	 *	 * @since   3.0	 */	public static function chosen($selector = '.advancedSelect', $debug = null)	{		if (isset(self::$loaded[__METHOD__][$selector]))		{			return;		}		// Include jQuery		JHtml::_('jquery.framework');		// Add chosen.jquery.js language strings		JText::script('JGLOBAL_SELECT_SOME_OPTIONS');		JText::script('JGLOBAL_SELECT_AN_OPTION');		JText::script('JGLOBAL_SELECT_NO_RESULTS_MATCH');		// If no debugging value is set, use the configuration setting		if ($debug === null)		{			$config = JFactory::getConfig();			$debug  = (boolean) $config->get('debug');		}		JHtml::_('script', 'jui/chosen.jquery.min.js', false, true, false, false, $debug);		JHtml::_('stylesheet', 'jui/chosen.css', false, true);		JFactory::getDocument()->addScriptDeclaration("				jQuery(document).ready(function (){					jQuery('" . $selector . "').chosen({						disable_search_threshold : 10,						allow_single_deselect : true					});				});			"		);		self::$loaded[__METHOD__][$selector] = true;		return;	}	/**	 * Method to load the AJAX Chosen library	 *	 * If debugging mode is on an uncompressed version of AJAX Chosen is included for easier debugging.	 *	 * @param   JRegistry  $options  Options in a JRegistry object	 * @param   mixed      $debug    Is debugging mode on? [optional]	 *	 * @return  void	 *	 * @since   3.0	 */	public static function ajaxchosen(JRegistry $options, $debug = null)	{		// Retrieve options/defaults		$selector       = $options->get('selector', '.tagfield');		$type           = $options->get('type', 'GET');		$url            = $options->get('url', null);		$dataType       = $options->get('dataType', 'json');		$jsonTermKey    = $options->get('jsonTermKey', 'term');		$afterTypeDelay = $options->get('afterTypeDelay', '500');		$minTermLength  = $options->get('minTermLength', '3');		JText::script('JGLOBAL_KEEP_TYPING');		JText::script('JGLOBAL_LOOKING_FOR');		// Ajax URL is mandatory		if (!empty($url))		{			if (isset(self::$loaded[__METHOD__][$selector]))			{				return;			}			// Include jQuery			JHtml::_('jquery.framework');			// Requires chosen to work			self::chosen($selector, $debug);			JHtml::_('script', 'jui/ajax-chosen.min.js', false, true, false, false, $debug);			JFactory::getDocument()->addScriptDeclaration("				(function($){					$(document).ready(function () {						$('" . $selector . "').ajaxChosen({							type: '" . $type . "',							url: '" . $url . "',							dataType: '" . $dataType . "',							jsonTermKey: '" . $jsonTermKey . "',							afterTypeDelay: '" . $afterTypeDelay . "',							minTermLength: '" . $minTermLength . "'						}, function (data) {							var results = [];							$.each(data, function (i, val) {								results.push({ value: val.value, text: val.text });							});							return results;						});					});				})(jQuery);				"			);			self::$loaded[__METHOD__][$selector] = true;		}		return;	}}
<?php/** * @package     Joomla.Administrator * @subpackage  com_menus * * @copyright   Copyright (C) 2005 - 2013 Open Source Matters, Inc. All rights reserved. * @license     GNU General Public License version 2 or later; see LICENSE.txt */defined('_JEXEC') or die;/** * The HTML Menus Menu Item View. * * @package     Joomla.Administrator * @subpackage  com_menus * @since       1.6 */class MenusViewMenu extends JViewLegacy{	protected $form;	protected $item;	protected $state;	/**	 * Display the view	 */	public function display($tpl = null)	{		$this->form	 = $this->get('Form');		$this->item	 = $this->get('Item');		$this->state = $this->get('State');		// Check for errors.		if (count($errors = $this->get('Errors')))		{			JError::raiseError(500, implode("\n", $errors));			return false;		}		parent::display($tpl);		$this->addToolbar();	}	/**	 * Add the page title and toolbar.	 *	 * @since   1.6	 */	protected function addToolbar()	{		$input = JFactory::getApplication()->input;		$input->set('hidemainmenu', true);		$user  = JFactory::getUser();		$isNew = ($this->item->id == 0);		$canDo = MenusHelper::getActions($this->state->get('filter.parent_id'));		JToolbarHelper::title(JText::_($isNew ? 'COM_MENUS_VIEW_NEW_MENU_TITLE' : 'COM_MENUS_VIEW_EDIT_MENU_TITLE'), 'menu.png');		// If a new item, can save the item.  Allow users with edit permissions to apply changes to prevent returning to grid.		if ($isNew && $canDo->get('core.create'))		{			if ($canDo->get('core.edit'))			{				JToolbarHelper::apply('menu.apply');			}			JToolbarHelper::save('menu.save');		}		// If user can edit, can save the item.		if (!$isNew && $canDo->get('core.edit'))		{			JToolbarHelper::apply('menu.apply');			JToolbarHelper::save('menu.save');		}		// If the user can create new items, allow them to see Save & New		if ($canDo->get('core.create'))		{			JToolbarHelper::save2new('menu.save2new');		}		if ($isNew)		{			JToolbarHelper::cancel('menu.cancel');		}		else		{			JToolbarHelper::cancel('menu.cancel', 'JTOOLBAR_CLOSE');		}		JToolbarHelper::divider();		JToolbarHelper::help('JHELP_MENUS_MENU_MANAGER_EDIT');	}}
<?php/** * @package     Joomla.Administrator * @subpackage  Template.hathor * * @copyright   Copyright (C) 2005 - 2013 Open Source Matters, Inc. All rights reserved. * @license     GNU General Public License version 2 or later; see LICENSE.txt */defined('_JEXEC') or die;// Include the component HTML helpers.JHtml::addIncludePath(JPATH_COMPONENT.'/helpers/html');// Load the tooltip behavior.JHtml::_('behavior.tooltip');JHtml::_('behavior.multiselect');$user		= JFactory::getUser();$listOrder	= $this->escape($this->state->get('list.ordering'));$listDirn	= $this->escape($this->state->get('list.direction'));$canOrder	= $user->authorise('core.edit.state', 'com_users');$saveOrder	= $listOrder == 'a.ordering';?><form action="<?php echo JRoute::_('index.php?option=com_users&view=levels');?>" method="post" id="adminForm" name="adminForm"><?php if (!empty( $this->sidebar)) : ?>	<div id="j-sidebar-container" class="span2">		<?php echo $this->sidebar; ?>	</div>	<div id="j-main-container" class="span10"><?php else : ?>	<div id="j-main-container"><?php endif;?>	<fieldset id="filter-bar">	<legend class="element-invisible"><?php echo JText::_('COM_USERS_SEARCH_ACCESS_LEVELS'); ?></legend>		<div class="filter-search">			<label class="filter-search-lbl" for="filter_search"><?php echo JText::_('COM_USERS_SEARCH_ACCESS_LEVELS'); ?></label>			<input type="text" name="filter_search" id="filter_search" value="<?php echo $this->escape($this->state->get('filter.search')); ?>" title="<?php echo JText::_('COM_USERS_SEARCH_TITLE_LEVELS'); ?>" />			<button type="submit"><?php echo JText::_('JSEARCH_FILTER_SUBMIT'); ?></button>			<button type="button" onclick="document.id('filter_search').value='';this.form.submit();"><?php echo JText::_('JSEARCH_RESET'); ?></button>		</div>	</fieldset>	<div class="clr"> </div>	<table class="adminlist">		<thead>			<tr>				<th class="checkmark-col">					<input type="checkbox" name="checkall-toggle" value="" title="<?php echo JText::_('JGLOBAL_CHECK_ALL'); ?>" onclick="Joomla.checkAll(this)" />				</th>				<th>					<?php echo JHtml::_('grid.sort', 'COM_USERS_HEADING_LEVEL_NAME', 'a.title', $listDirn, $listOrder); ?>				</th>				<th class="nowrap ordering-col">					<?php echo JHtml::_('grid.sort', 'JGRID_HEADING_ORDERING', 'a.ordering', $listDirn, $listOrder); ?>					<?php if ($canOrder && $saveOrder) :?>						<?php echo JHtml::_('grid.order', $this->items, 'filesave.png', 'levels.saveorder'); ?>					<?php endif; ?>				</th>				<th class="nowrap id-col">					<?php echo JText::_('JGRID_HEADING_ID'); ?>				</th>				<th class="width-40">					&#160;				</th>			</tr>		</thead>		<tbody>		<?php foreach ($this->items as $i => $item) :			$ordering  = ($listOrder == 'a.ordering');			$canCreate = $user->authorise('core.create',     'com_users');			$canEdit   = $user->authorise('core.edit',       'com_users');			$canChange = $user->authorise('core.edit.state', 'com_users');			?>			<tr class="row<?php echo $i % 2; ?>">				<td>					<?php echo JHtml::_('grid.id', $i, $item->id); ?>				</td>				<td>					<?php if ($canEdit) : ?>					<a href="<?php echo JRoute::_('index.php?option=com_users&task=level.edit&id='.$item->id);?>">						<?php echo $this->escape($item->title); ?></a>					<?php else : ?>						<?php echo $this->escape($item->title); ?>					<?php endif; ?>				</td>				<td class="order">					<?php if ($canChange) : ?>						<?php if ($saveOrder) :?>							<?php if ($listDirn == 'asc') : ?>								<span><?php echo $this->pagination->orderUpIcon($i, true, 'levels.orderup', 'JLIB_HTML_MOVE_UP', $ordering); ?></span>								<span><?php echo $this->pagination->orderDownIcon($i, $this->pagination->total, true, 'levels.orderdown', 'JLIB_HTML_MOVE_DOWN', $ordering); ?></span>							<?php elseif ($listDirn == 'desc') : ?>								<span><?php echo $this->pagination->orderUpIcon($i, true, 'levels.orderdown', 'JLIB_HTML_MOVE_UP', $ordering); ?></span>								<span><?php echo $this->pagination->orderDownIcon($i, $this->pagination->total, true, 'levels.orderup', 'JLIB_HTML_MOVE_DOWN', $ordering); ?></span>							<?php endif; ?>						<?php endif; ?>						<?php $disabled = $saveOrder ?  '' : 'disabled="disabled"'; ?>						<input type="text" name="order[]" value="<?php echo $item->ordering;?>" <?php echo $disabled ?> class="text-area-order" title="<?php echo $item->title; ?> order" />					<?php else : ?>						<?php echo $item->ordering; ?>					<?php endif; ?>				</td>				<td class="center">					<?php echo (int) $item->id; ?>				</td>				<td>					&#160;				</td>			</tr>		<?php endforeach; ?>		</tbody>	</table>	<?php echo $this->pagination->getListFooter(); ?>	<input type="hidden" name="task" value="" />	<input type="hidden" name="boxchecked" value="0" />	<input type="hidden" name="filter_order" value="<?php echo $listOrder; ?>" />	<input type="hidden" name="filter_order_Dir" value="<?php echo $listDirn; ?>" />	<?php echo JHtml::_('form.token'); ?></div></form>
<?php/** * @package     Joomla.Platform * @subpackage  Form * * @copyright   Copyright (C) 2005 - 2013 Open Source Matters, Inc. All rights reserved. * @license     GNU General Public License version 2 or later; see LICENSE */defined('JPATH_PLATFORM') or die;JFormHelper::loadFieldClass('groupedlist');/** * Form Field class for the Joomla Platform. * * @package     Joomla.Platform * @subpackage  Form * @since       11.1 */class JFormFieldTimezone extends JFormFieldGroupedList{	/**	 * The form field type.	 *	 * @var    string	 * @since  11.1	 */	protected $type = 'Timezone';	/**	 * The list of available timezone groups to use.	 *	 * @var    array	 *	 * @since  11.1	 */	protected static $zones = array('Africa', 'America', 'Antarctica', 'Arctic', 'Asia', 'Atlantic', 'Australia', 'Europe', 'Indian', 'Pacific');	/**	 * Method to get the time zone field option groups.	 *	 * @return  array  The field option objects as a nested array in groups.	 *	 * @since   11.1	 */	protected function getGroups()	{		$groups = array();		$keyField = $this->element['key_field'] ? (string) $this->element['key_field'] : 'id';		$keyValue = $this->form->getValue($keyField);		// If the timezone is not set use the server setting.		if (strlen($this->value) == 0 && empty($keyValue))		{			$this->value = JFactory::getConfig()->get('offset');		}		// Get the list of time zones from the server.		$zones = DateTimeZone::listIdentifiers();		// Build the group lists.		foreach ($zones as $zone)		{			// Time zones not in a group we will ignore.			if (strpos($zone, '/') === false)			{				continue;			}			// Get the group/locale from the timezone.			list ($group, $locale) = explode('/', $zone, 2);			// Only use known groups.			if (in_array($group, self::$zones))			{				// Initialize the group if necessary.				if (!isset($groups[$group]))				{					$groups[$group] = array();				}				// Only add options where a locale exists.				if (!empty($locale))				{					$groups[$group][$zone] = JHtml::_('select.option', $zone, str_replace('_', ' ', $locale), 'value', 'text', false);				}			}		}		// Sort the group lists.		ksort($groups);		foreach ($groups as $zone => & $location)		{			sort($location);		}		// Merge any additional groups in the XML definition.		$groups = array_merge(parent::getGroups(), $groups);		return $groups;	}}
<?php/** * @package     Joomla.Site * @subpackage  mod_feed * * @copyright   Copyright (C) 2005 - 2013 Open Source Matters, Inc. All rights reserved. * @license     GNU General Public License version 2 or later; see LICENSE.txt */defined('_JEXEC') or die;/** * Helper for mod_feed * * @package     Joomla.Site * @subpackage  mod_feed * @since       1.5 */class ModFeedHelper{	public static function getFeed($params)	{		// module params		$rssurl	= $params->get('rssurl', '');		// get RSS parsed object		$cache_time = 0;		if ($params->get('cache'))		{			$cache_time  = $params->get('cache_time', 15) * 60;		}		try		{			$feed = new JFeedFactory;			$rssDoc = $feed->getFeed($rssurl);		}		catch (InvalidArgumentException $e)		{			$msg = JText::_('MOD_NEWSFEEDS_ERRORS_FEED_NOT_RETRIEVED');		}		catch (RunTimeException $e)		{			$msg = JText::_('MOD_FEED_ERR_FEED_NOT_RETRIEVED');		}		if (empty($rssDoc))		{			$msg = JText::_('MOD_FEED_ERR_FEED_NOT_RETRIEVED');			return $msg;		}		if ($rssDoc)		{			return $rssDoc;		}	}}
<?php/** * @package     Joomla.Site * @subpackage  com_users * * @copyright   Copyright (C) 2005 - 2013 Open Source Matters, Inc. All rights reserved. * @license     GNU General Public License version 2 or later; see LICENSE.txt */defined('_JEXEC') or die;/** * Profile view class for Users. * * @package     Joomla.Site * @subpackage  com_users * @since       1.6 */class UsersViewProfile extends JViewLegacy{	protected $data;	protected $form;	protected $params;	protected $state;	/**	 * Method to display the view.	 *	 * @param   string	$tpl	The template file to include	 * @since   1.6	 */	public function display($tpl = null)	{		// Get the view data.		$this->data		= $this->get('Data');		$this->form		= $this->get('Form');		$this->state	= $this->get('State');		$this->params	= $this->state->get('params');		// Check for errors.		if (count($errors = $this->get('Errors')))		{			JError::raiseError(500, implode('<br />', $errors));			return false;		}		// Check if a user was found.		if (!$this->data->id)		{			JError::raiseError(404, JText::_('JERROR_USERS_PROFILE_NOT_FOUND'));			return false;		}		$this->data->tags = new JHelperTags;		$this->data->tags->getItemTags('com_users.user.', $this->data->id);		// Check for layout override		$active = JFactory::getApplication()->getMenu()->getActive();		if (isset($active->query['layout']))		{			$this->setLayout($active->query['layout']);		}		//Escape strings for HTML output		$this->pageclass_sfx = htmlspecialchars($this->params->get('pageclass_sfx'));		$this->prepareDocument();		parent::display($tpl);	}	/**	 * Prepares the document	 *	 * @since   1.6	 */	protected function prepareDocument()	{		$app		= JFactory::getApplication();		$menus		= $app->getMenu();		$user		= JFactory::getUser();		$login		= $user->get('guest') ? true : false;		$title 		= null;		// Because the application sets a default page title,		// we need to get it from the menu item itself		$menu = $menus->getActive();		if ($menu)		{			$this->params->def('page_heading', $this->params->get('page_title', $user->name));		}		else		{			$this->params->def('page_heading', JText::_('COM_USERS_PROFILE'));		}		$title = $this->params->get('page_title', '');		if (empty($title))		{			$title = $app->getCfg('sitename');		}		elseif ($app->getCfg('sitename_pagetitles', 0) == 1)		{			$title = JText::sprintf('JPAGETITLE', $app->getCfg('sitename'), $title);		}		elseif ($app->getCfg('sitename_pagetitles', 0) == 2)		{			$title = JText::sprintf('JPAGETITLE', $title, $app->getCfg('sitename'));		}		$this->document->setTitle($title);		if ($this->params->get('menu-meta_description'))		{			$this->document->setDescription($this->params->get('menu-meta_description'));		}		if ($this->params->get('menu-meta_keywords'))		{			$this->document->setMetadata('keywords', $this->params->get('menu-meta_keywords'));		}		if ($this->params->get('robots'))		{			$this->document->setMetadata('robots', $this->params->get('robots'));		}	}}
<?php/** * @package     Joomla.Platform * @subpackage  MediaWiki * * @copyright   Copyright (C) 2005 - 2012 Open Source Matters, Inc. All rights reserved. * @license     GNU General Public License version 2 or later; see LICENSE */defined('JPATH_PLATFORM') or die;/** * MediaWiki API object class for the Joomla Platform. * * @package     Joomla.Platform * @subpackage  Mediawiki * @since       12.3 */abstract class JMediawikiObject{	/**	 * @var    JRegistry  Options for the MediaWiki object.	 * @since  12.3	 */	protected $options;	/**	 * @var    JMediawikiHttp  The HTTP client object to use in sending HTTP requests.	 * @since  12.3	 */	protected $client;	/**     * Constructor.     *     * @param   JRegistry       $options  Mediawiki options object.     * @param   JMediawikiHttp  $client   The HTTP client object.     *     * @since   12.3     */	public function __construct(JRegistry $options = null, JMediawikiHttp $client = null)	{		$this->options = isset($options) ? $options : new JRegistry;		$this->client = isset($client) ? $client : new JMediawikiHttp($this->options);	}	/**     * Method to build and return a full request URL for the request.     *     * @param   string  $path  URL to inflect     *     * @return  string   The request URL.     *     * @since   12.3     */	protected function fetchUrl($path)	{		// Append the path with output format		$path .= '&format=xml';		$uri = new JUri($this->options->get('api.url') . '/api.php' . $path);		if ($this->options->get('api.username', false))		{			$uri->setUser($this->options->get('api.username'));		}		if ($this->options->get('api.password', false))		{			$uri->setPass($this->options->get('api.password'));		}		return (string) $uri;	}	/**     * Method to build request parameters from a string array.     *     * @param   array  $params  string array that contains the parameters     *     * @return  string   request parameter     *     * @since   12.3     */	public function buildParameter(array $params)	{		$path = '';		foreach ($params as $param)		{			$path .= $param;			if (next($params) == true)			{				$path .= '|';			}		}		return $path;	}	/**     * Method to validate response for errors     *     * @param   JHttpresponse  $response  reponse from the mediawiki server     *     * @return  Object     *     * @since   12.3     */	public function validateResponse($response)	{		$xml = simplexml_load_string($response->body);		if (isset($xml->warnings))		{			throw new DomainException($xml->warnings->info);		}		if (isset($xml->error))		{			throw new DomainException($xml->error['info']);		}		return $xml;	}}
<?php/** * @package     Joomla.Legacy * @subpackage  Model * * @copyright   Copyright (C) 2005 - 2013 Open Source Matters, Inc. All rights reserved. * @license     GNU General Public License version 2 or later; see LICENSE */defined('JPATH_PLATFORM') or die;/** * Prototype admin model. * * @package     Joomla.Legacy * @subpackage  Model * @since       12.2 */abstract class JModelAdmin extends JModelForm{	/**	 * The prefix to use with controller messages.	 *	 * @var    string	 * @since  12.2	 */	protected $text_prefix = null;	/**	 * The event to trigger after deleting the data.	 *	 * @var    string	 * @since  12.2	 */	protected $event_after_delete = null;	/**	 * The event to trigger after saving the data.	 *	 * @var    string	 * @since  12.2	 */	protected $event_after_save = null;	/**	 * The event to trigger before deleting the data.	 *	 * @var    string	 * @since  12.2	 */	protected $event_before_delete = null;	/**	 * The event to trigger before saving the data.	 *	 * @var    string	 * @since  12.2	 */	protected $event_before_save = null;	/**	 * The event to trigger after changing the published state of the data.	 *	 * @var    string	 * @since  12.2	 */	protected $event_change_state = null;	/**	 * Constructor.	 *	 * @param   array  $config  An optional associative array of configuration settings.	 *	 * @see     JModelLegacy	 * @since   12.2	 */	public function __construct($config = array())	{		parent::__construct($config);		if (isset($config['event_after_delete']))		{			$this->event_after_delete = $config['event_after_delete'];		}		elseif (empty($this->event_after_delete))		{			$this->event_after_delete = 'onContentAfterDelete';		}		if (isset($config['event_after_save']))		{			$this->event_after_save = $config['event_after_save'];		}		elseif (empty($this->event_after_save))		{			$this->event_after_save = 'onContentAfterSave';		}		if (isset($config['event_before_delete']))		{			$this->event_before_delete = $config['event_before_delete'];		}		elseif (empty($this->event_before_delete))		{			$this->event_before_delete = 'onContentBeforeDelete';		}		if (isset($config['event_before_save']))		{			$this->event_before_save = $config['event_before_save'];		}		elseif (empty($this->event_before_save))		{			$this->event_before_save = 'onContentBeforeSave';		}		if (isset($config['event_change_state']))		{			$this->event_change_state = $config['event_change_state'];		}		elseif (empty($this->event_change_state))		{			$this->event_change_state = 'onContentChangeState';		}		// Guess the JText message prefix. Defaults to the option.		if (isset($config['text_prefix']))		{			$this->text_prefix = strtoupper($config['text_prefix']);		}		elseif (empty($this->text_prefix))		{			$this->text_prefix = strtoupper($this->option);		}	}	/**	 * Method to perform batch operations on an item or a set of items.	 *	 * @param   array  $commands  An array of commands to perform.	 * @param   array  $pks       An array of item ids.	 * @param   array  $contexts  An array of item contexts.	 *	 * @return  boolean  Returns true on success, false on failure.	 *	 * @since   12.2	 */	public function batch($commands, $pks, $contexts)	{		// Sanitize ids.		$pks = array_unique($pks);		JArrayHelper::toInteger($pks);		// Remove any values of zero.		if (array_search(0, $pks, true))		{			unset($pks[array_search(0, $pks, true)]);		}		if (empty($pks))		{			$this->setError(JText::_('JGLOBAL_NO_ITEM_SELECTED'));			return false;		}		$done = false;		if (!empty($commands['category_id']))		{			$cmd = JArrayHelper::getValue($commands, 'move_copy', 'c');			if ($cmd == 'c')			{				$result = $this->batchCopy($commands['category_id'], $pks, $contexts);				if (is_array($result))				{					$pks = $result;				}				else				{					return false;				}			}			elseif ($cmd == 'm' && !$this->batchMove($commands['category_id'], $pks, $contexts))			{				return false;			}			$done = true;		}		if (!empty($commands['assetgroup_id']))		{			if (!$this->batchAccess($commands['assetgroup_id'], $pks, $contexts))			{				return false;			}			$done = true;		}		if (!empty($commands['language_id']))		{			if (!$this->batchLanguage($commands['language_id'], $pks, $contexts))			{				return false;			}			$done = true;		}		if (!empty($commands['tag']))		{			if (!$this->batchTag($commands['tag'], $pks, $contexts))			{				return false;			}			$done = true;		}		if (!$done)		{			$this->setError(JText::_('JLIB_APPLICATION_ERROR_INSUFFICIENT_BATCH_INFORMATION'));			return false;		}		// Clear the cache		$this->cleanCache();		return true;	}	/**	 * Batch access level changes for a group of rows.	 *	 * @param   integer  $value     The new value matching an Asset Group ID.	 * @param   array    $pks       An array of row IDs.	 * @param   array    $contexts  An array of item contexts.	 *	 * @return  boolean  True if successful, false otherwise and internal error is set.	 *	 * @since   12.2	 */	protected function batchAccess($value, $pks, $contexts)	{		// Set the variables		$user = JFactory::getUser();		$table = $this->getTable();		foreach ($pks as $pk)		{			if ($user->authorise('core.edit', $contexts[$pk]))			{				$table->reset();				$table->load($pk);				$table->access = (int) $value;				if (!$table->store())				{					$this->setError($table->getError());					return false;				}			}			else			{				$this->setError(JText::_('JLIB_APPLICATION_ERROR_BATCH_CANNOT_EDIT'));				return false;			}		}		// Clean the cache		$this->cleanCache();		return true;	}	/**	 * Batch copy items to a new category or current.	 *	 * @param   integer  $value     The new category.	 * @param   array    $pks       An array of row IDs.	 * @param   array    $contexts  An array of item contexts.	 *	 * @return  mixed  An array of new IDs on success, boolean false on failure.	 *	 * @since	12.2	 */	protected function batchCopy($value, $pks, $contexts)	{		$categoryId = (int) $value;		$table = $this->getTable();		$i = 0;		// Check that the category exists		if ($categoryId)		{			$categoryTable = JTable::getInstance('Category');			if (!$categoryTable->load($categoryId))			{				if ($error = $categoryTable->getError())				{					// Fatal error					$this->setError($error);					return false;				}				else				{					$this->setError(JText::_('JLIB_APPLICATION_ERROR_BATCH_MOVE_CATEGORY_NOT_FOUND'));					return false;				}			}		}		if (empty($categoryId))		{			$this->setError(JText::_('JLIB_APPLICATION_ERROR_BATCH_MOVE_CATEGORY_NOT_FOUND'));			return false;		}		// Check that the user has create permission for the component		$extension = JFactory::getApplication()->input->get('option', '');		$user = JFactory::getUser();		if (!$user->authorise('core.create', $extension . '.category.' . $categoryId))		{			$this->setError(JText::_('JLIB_APPLICATION_ERROR_BATCH_CANNOT_CREATE'));			return false;		}		// Parent exists so we let's proceed		while (!empty($pks))		{			// Pop the first ID off the stack			$pk = array_shift($pks);			$table->reset();			// Check that the row actually exists			if (!$table->load($pk))			{				if ($error = $table->getError())				{					// Fatal error					$this->setError($error);					return false;				}				else				{					// Not fatal error					$this->setError(JText::sprintf('JLIB_APPLICATION_ERROR_BATCH_MOVE_ROW_NOT_FOUND', $pk));					continue;				}			}			// Alter the title & alias			$data = $this->generateNewTitle($categoryId, $table->alias, $table->title);			$table->title = $data['0'];			$table->alias = $data['1'];			// Reset the ID because we are making a copy			$table->id = 0;			// New category ID			$table->catid = $categoryId;			// TODO: Deal with ordering?			// $table->ordering	= 1;			// Check the row.			if (!$table->check())			{				$this->setError($table->getError());				return false;			}			// Store the row.			if (!$table->store())			{				$this->setError($table->getError());				return false;			}			// Get the new item ID			$newId = $table->get('id');			// Add the new ID to the array			$newIds[$i]	= $newId;			$i++;		}		// Clean the cache		$this->cleanCache();		return $newIds;	}	/**	 * Batch language changes for a group of rows.	 *	 * @param   string  $value     The new value matching a language.	 * @param   array   $pks       An array of row IDs.	 * @param   array   $contexts  An array of item contexts.	 *	 * @return  boolean  True if successful, false otherwise and internal error is set.	 *	 * @since   11.3	 */	protected function batchLanguage($value, $pks, $contexts)	{		// Set the variables		$user	= JFactory::getUser();		$table = $this->getTable();		foreach ($pks as $pk)		{			if ($user->authorise('core.edit', $contexts[$pk]))			{				$table->reset();				$table->load($pk);				$table->language = $value;				if (!$table->store())				{					$this->setError($table->getError());					return false;				}			}			else			{				$this->setError(JText::_('JLIB_APPLICATION_ERROR_BATCH_CANNOT_EDIT'));				return false;			}		}		// Clean the cache		$this->cleanCache();		return true;	}	/**	 * Batch move items to a new category	 *	 * @param   integer  $value     The new category ID.	 * @param   array    $pks       An array of row IDs.	 * @param   array    $contexts  An array of item contexts.	 *	 * @return  boolean  True if successful, false otherwise and internal error is set.	 *	 * @since	12.2	 */	protected function batchMove($value, $pks, $contexts)	{		$categoryId = (int) $value;		$table = $this->getTable();		// Check that the category exists		if ($categoryId)		{			$categoryTable = JTable::getInstance('Category');			if (!$categoryTable->load($categoryId))			{				if ($error = $categoryTable->getError())				{					// Fatal error					$this->setError($error);					return false;				}				else				{					$this->setError(JText::_('JLIB_APPLICATION_ERROR_BATCH_MOVE_CATEGORY_NOT_FOUND'));					return false;				}			}		}		if (empty($categoryId))		{			$this->setError(JText::_('JLIB_APPLICATION_ERROR_BATCH_MOVE_CATEGORY_NOT_FOUND'));			return false;		}		// Check that user has create and edit permission for the component		$extension = JFactory::getApplication()->input->get('option', '');		$user = JFactory::getUser();		if (!$user->authorise('core.create', $extension . '.category.' . $categoryId))		{			$this->setError(JText::_('JLIB_APPLICATION_ERROR_BATCH_CANNOT_CREATE'));			return false;		}		// Parent exists so we proceed		foreach ($pks as $pk)		{			if (!$user->authorise('core.edit', $contexts[$pk]))			{				$this->setError(JText::_('JLIB_APPLICATION_ERROR_BATCH_CANNOT_EDIT'));				return false;			}			// Check that the row actually exists			if (!$table->load($pk))			{				if ($error = $table->getError())				{					// Fatal error					$this->setError($error);					return false;				}				else				{					// Not fatal error					$this->setError(JText::sprintf('JLIB_APPLICATION_ERROR_BATCH_MOVE_ROW_NOT_FOUND', $pk));					continue;				}			}			// Set the new category ID			$table->catid = $categoryId;			// Check the row.			if (!$table->check())			{				$this->setError($table->getError());				return false;			}			// Store the row.			if (!$table->store())			{				$this->setError($table->getError());				return false;			}		}		// Clean the cache		$this->cleanCache();		return true;	}	/**	 * Batch tag a list of item.	 *	 * @param   integer  $value     The value of the new tag.	 * @param   array    $pks       An array of row IDs.	 * @param   array    $contexts  An array of item contexts.	 *	 * @return  void.	 *	 * @since   3.1	 */	protected function batchTag($value, $pks, $contexts)	{		// Set the variables		$user = JFactory::getUser();		$table = $this->getTable();		foreach ($pks as $pk)		{			if ($user->authorise('core.edit', $contexts[$pk]))			{				$table->reset();				$table->load($pk);				$metaObject = json_decode($table->metadata);				$metaObject->tags = (isset($metaObject->tags) && is_array($metaObject->tags)) ? $metaObject->tags : array();				$metaObject->tags[] = (int) $value;				$metaObject->tags = array_unique($metaObject->tags);				$table->metadata = json_encode($metaObject);				if (!$table->store())				{					$this->setError($table->getError());					return false;				}			}			else			{				$this->setError(JText::_('JLIB_APPLICATION_ERROR_BATCH_CANNOT_EDIT'));				return false;			}		}		// Clean the cache		$this->cleanCache();		return true;	}	/**	 * Method to test whether a record can be deleted.	 *	 * @param   object  $record  A record object.	 *	 * @return  boolean  True if allowed to delete the record. Defaults to the permission for the component.	 *	 * @since   12.2	 */	protected function canDelete($record)	{		$user = JFactory::getUser();		return $user->authorise('core.delete', $this->option);	}	/**	 * Method to test whether a record can be deleted.	 *	 * @param   object  $record  A record object.	 *	 * @return  boolean  True if allowed to change the state of the record. Defaults to the permission for the component.	 *	 * @since   12.2	 */	protected function canEditState($record)	{		$user = JFactory::getUser();		return $user->authorise('core.edit.state', $this->option);	}	/**	 * Method override to check-in a record or an array of record	 *	 * @param   mixed  $pks  The ID of the primary key or an array of IDs	 *	 * @return  mixed  Boolean false if there is an error, otherwise the count of records checked in.	 *	 * @since   12.2	 */	public function checkin($pks = array())	{		$pks = (array) $pks;		$table = $this->getTable();		$count = 0;		if (empty($pks))		{			$pks = array((int) $this->getState($this->getName() . '.id'));		}		// Check in all items.		foreach ($pks as $pk)		{			if ($table->load($pk))			{				if ($table->checked_out > 0)				{					if (!parent::checkin($pk))					{						return false;					}					$count++;				}			}			else			{				$this->setError($table->getError());				return false;			}		}		return $count;	}	/**	 * Method override to check-out a record.	 *	 * @param   integer  $pk  The ID of the primary key.	 *	 * @return  boolean  True if successful, false if an error occurs.	 *	 * @since   12.2	 */	public function checkout($pk = null)	{		$pk = (!empty($pk)) ? $pk : (int) $this->getState($this->getName() . '.id');		return parent::checkout($pk);	}	/**	 * Method to delete one or more records.	 *	 * @param   array  &$pks  An array of record primary keys.	 *	 * @return  boolean  True if successful, false if an error occurs.	 *	 * @since   12.2	 */	public function delete(&$pks)	{		$dispatcher = JEventDispatcher::getInstance();		$pks = (array) $pks;		$table = $this->getTable();		// Include the content plugins for the on delete events.		JPluginHelper::importPlugin('content');		// Iterate the items to delete each one.		foreach ($pks as $i => $pk)		{			if ($table->load($pk))			{				if ($this->canDelete($table))				{					$context = $this->option . '.' . $this->name;					// Trigger the onContentBeforeDelete event.					$result = $dispatcher->trigger($this->event_before_delete, array($context, $table));					if (in_array(false, $result, true))					{						$this->setError($table->getError());						return false;					}					if (!$table->delete($pk))					{						$this->setError($table->getError());						return false;					}					// Trigger the onContentAfterDelete event.					$dispatcher->trigger($this->event_after_delete, array($context, $table));				}				else				{					// Prune items that you can't change.					unset($pks[$i]);					$error = $this->getError();					if ($error)					{						JLog::add($error, JLog::WARNING, 'jerror');						return false;					}					else					{						JLog::add(JText::_('JLIB_APPLICATION_ERROR_DELETE_NOT_PERMITTED'), JLog::WARNING, 'jerror');						return false;					}				}			}			else			{				$this->setError($table->getError());				return false;			}		}		// Clear the component's cache		$this->cleanCache();		return true;	}	/**	 * Method to change the title & alias.	 *	 * @param   integer  $category_id  The id of the category.	 * @param   string   $alias        The alias.	 * @param   string   $title        The title.	 *	 * @return	array  Contains the modified title and alias.	 *	 * @since	12.2	 */	protected function generateNewTitle($category_id, $alias, $title)	{		// Alter the title & alias		$table = $this->getTable();		while ($table->load(array('alias' => $alias, 'catid' => $category_id)))		{			$title = JString::increment($title);			$alias = JString::increment($alias, 'dash');		}		return array($title, $alias);	}	/**	 * Method to get a single record.	 *	 * @param   integer  $pk  The id of the primary key.	 *	 * @return  mixed    Object on success, false on failure.	 *	 * @since   12.2	 */	public function getItem($pk = null)	{		$pk = (!empty($pk)) ? $pk : (int) $this->getState($this->getName() . '.id');		$table = $this->getTable();		if ($pk > 0)		{			// Attempt to load the row.			$return = $table->load($pk);			// Check for a table object error.			if ($return === false && $table->getError())			{				$this->setError($table->getError());				return false;			}		}		// Convert to the JObject before adding other data.		$properties = $table->getProperties(1);		$item = JArrayHelper::toObject($properties, 'JObject');		if (property_exists($item, 'params'))		{			$registry = new JRegistry;			$registry->loadString($item->params);			$item->params = $registry->toArray();		}		return $item;	}	/**	 * A protected method to get a set of ordering conditions.	 *	 * @param   JTable  $table  A JTable object.	 *	 * @return  array  An array of conditions to add to ordering queries.	 *	 * @since   12.2	 */	protected function getReorderConditions($table)	{		return array();	}	/**	 * Stock method to auto-populate the model state.	 *	 * @return  void	 *	 * @since   12.2	 */	protected function populateState()	{		$table = $this->getTable();		$key = $table->getKeyName();		// Get the pk of the record from the request.		$pk = JFactory::getApplication()->input->getInt($key);		$this->setState($this->getName() . '.id', $pk);		// Load the parameters.		$value = JComponentHelper::getParams($this->option);		$this->setState('params', $value);	}	/**	 * Prepare and sanitise the table data prior to saving.	 *	 * @param   JTable  $table  A reference to a JTable object.	 *	 * @return  void	 *	 * @since   12.2	 */	protected function prepareTable($table)	{		// Derived class will provide its own implementation if required.	}	/**	 * Method to change the published state of one or more records.	 *	 * @param   array    &$pks   A list of the primary keys to change.	 * @param   integer  $value  The value of the published state.	 *	 * @return  boolean  True on success.	 *	 * @since   12.2	 */	public function publish(&$pks, $value = 1)	{		$dispatcher = JEventDispatcher::getInstance();		$user = JFactory::getUser();		$table = $this->getTable();		$pks = (array) $pks;		// Include the content plugins for the change of state event.		JPluginHelper::importPlugin('content');		// Access checks.		foreach ($pks as $i => $pk)		{			$table->reset();			if ($table->load($pk))			{				if (!$this->canEditState($table))				{					// Prune items that you can't change.					unset($pks[$i]);					JLog::add(JText::_('JLIB_APPLICATION_ERROR_EDITSTATE_NOT_PERMITTED'), JLog::WARNING, 'jerror');					return false;				}			}		}		// Attempt to change the state of the records.		if (!$table->publish($pks, $value, $user->get('id')))		{			$this->setError($table->getError());			return false;		}		$context = $this->option . '.' . $this->name;		// Trigger the onContentChangeState event.		$result = $dispatcher->trigger($this->event_change_state, array($context, $pks, $value));		if (in_array(false, $result, true))		{			$this->setError($table->getError());			return false;		}		// Clear the component's cache		$this->cleanCache();		return true;	}	/**	 * Method to adjust the ordering of a row.	 *	 * Returns NULL if the user did not have edit	 * privileges for any of the selected primary keys.	 *	 * @param   integer  $pks    The ID of the primary key to move.	 * @param   integer  $delta  Increment, usually +1 or -1	 *	 * @return  mixed  False on failure or error, true on success, null if the $pk is empty (no items selected).	 *	 * @since   12.2	 */	public function reorder($pks, $delta = 0)	{		$table = $this->getTable();		$pks = (array) $pks;		$result = true;		$allowed = true;		foreach ($pks as $i => $pk)		{			$table->reset();			if ($table->load($pk) && $this->checkout($pk))			{				// Access checks.				if (!$this->canEditState($table))				{					// Prune items that you can't change.					unset($pks[$i]);					$this->checkin($pk);					JLog::add(JText::_('JLIB_APPLICATION_ERROR_EDITSTATE_NOT_PERMITTED'), JLog::WARNING, 'jerror');					$allowed = false;					continue;				}				$where = array();				$where = $this->getReorderConditions($table);				if (!$table->move($delta, $where))				{					$this->setError($table->getError());					unset($pks[$i]);					$result = false;				}				$this->checkin($pk);			}			else			{				$this->setError($table->getError());				unset($pks[$i]);				$result = false;			}		}		if ($allowed === false && empty($pks))		{			$result = null;		}		// Clear the component's cache		if ($result == true)		{			$this->cleanCache();		}		return $result;	}	/**	 * Method to save the form data.	 *	 * @param   array  $data  The form data.	 *	 * @return  boolean  True on success, False on error.	 *	 * @since   12.2	 */	public function save($data)	{		$dispatcher = JEventDispatcher::getInstance();		$table = $this->getTable();		$key = $table->getKeyName();		$pk = (!empty($data[$key])) ? $data[$key] : (int) $this->getState($this->getName() . '.id');		$isNew = true;		// Include the content plugins for the on save events.		JPluginHelper::importPlugin('content');		// Allow an exception to be thrown.		try		{			// Load the row if saving an existing record.			if ($pk > 0)			{				$table->load($pk);				$isNew = false;			}			// Bind the data.			if (!$table->bind($data))			{				$this->setError($table->getError());				return false;			}			// Prepare the row for saving			$this->prepareTable($table);			// Check the data.			if (!$table->check())			{				$this->setError($table->getError());				return false;			}			// Trigger the onContentBeforeSave event.			$result = $dispatcher->trigger($this->event_before_save, array($this->option . '.' . $this->name, $table, $isNew));			if (in_array(false, $result, true))			{				$this->setError($table->getError());				return false;			}			// Store the data.			if (!$table->store())			{				$this->setError($table->getError());				return false;			}			// Clean the cache.			$this->cleanCache();			// Trigger the onContentAfterSave event.			$dispatcher->trigger($this->event_after_save, array($this->option . '.' . $this->name, $table, $isNew));		}		catch (Exception $e)		{			$this->setError($e->getMessage());			return false;		}		$pkName = $table->getKeyName();		if (isset($table->$pkName))		{			$this->setState($this->getName() . '.id', $table->$pkName);		}		$this->setState($this->getName() . '.new', $isNew);		return true;	}	/**	 * Saves the manually set order of records.	 *	 * @param   array    $pks    An array of primary key ids.	 * @param   integer  $order  +1 or -1	 *	 * @return  mixed	 *	 * @since   12.2	 */	public function saveorder($pks = null, $order = null)	{		$table = $this->getTable();		$conditions = array();		if (empty($pks))		{			return JError::raiseWarning(500, JText::_($this->text_prefix . '_ERROR_NO_ITEMS_SELECTED'));		}		// Update ordering values		foreach ($pks as $i => $pk)		{			$table->load((int) $pk);			// Access checks.			if (!$this->canEditState($table))			{				// Prune items that you can't change.				unset($pks[$i]);				JLog::add(JText::_('JLIB_APPLICATION_ERROR_EDITSTATE_NOT_PERMITTED'), JLog::WARNING, 'jerror');			}			elseif ($table->ordering != $order[$i])			{				$table->ordering = $order[$i];				if (!$table->store())				{					$this->setError($table->getError());					return false;				}				// Remember to reorder within position and client_id				$condition = $this->getReorderConditions($table);				$found = false;				foreach ($conditions as $cond)				{					if ($cond[1] == $condition)					{						$found = true;						break;					}				}				if (!$found)				{					$key = $table->getKeyName();					$conditions[] = array($table->$key, $condition);				}			}		}		// Execute reorder for each category.		foreach ($conditions as $cond)		{			$table->load($cond[0]);			$table->reorder($cond[1]);		}		// Clear the component's cache		$this->cleanCache();		return true;	}}
<?php/** * @package     Joomla.Administrator * @subpackage  com_banners * * @copyright   Copyright (C) 2005 - 2013 Open Source Matters, Inc. All rights reserved. * @license     GNU General Public License version 2 or later; see LICENSE.txt */defined('_JEXEC') or die;/** * Banners list controller class. * * @package     Joomla.Administrator * @subpackage  com_banners * @since       1.6 */class BannersControllerBanners extends JControllerAdmin{	/**	 * @var		string	The prefix to use with controller messages.	 * @since   1.6	 */	protected $text_prefix = 'COM_BANNERS_BANNERS';	/**	 * Constructor.	 *	 * @param   array An optional associative array of configuration settings.	 * @see     JController	 * @since   1.6	 */	public function __construct($config = array())	{		parent::__construct($config);		$this->registerTask('sticky_unpublish',	'sticky_publish');	}	/**	 * Proxy for getModel.	 * @since   1.6	 */	public function getModel($name = 'Banner', $prefix = 'BannersModel', $config = array('ignore_request' => true))	{		$model = parent::getModel($name, $prefix, $config);		return $model;	}	/**	 * @since   1.6	 */	public function sticky_publish()	{		// Check for request forgeries.		JSession::checkToken() or jexit(JText::_('JINVALID_TOKEN'));		$ids    = $this->input->get('cid', array(), 'array');		$values = array('sticky_publish' => 1, 'sticky_unpublish' => 0);		$task   = $this->getTask();		$value  = JArrayHelper::getValue($values, $task, 0, 'int');		if (empty($ids))		{			JError::raiseWarning(500, JText::_('COM_BANNERS_NO_BANNERS_SELECTED'));		}		else		{			// Get the model.			$model	= $this->getModel();			// Change the state of the records.			if (!$model->stick($ids, $value))			{				JError::raiseWarning(500, $model->getError());			} else {				if ($value == 1)				{					$ntext = 'COM_BANNERS_N_BANNERS_STUCK';				} else {					$ntext = 'COM_BANNERS_N_BANNERS_UNSTUCK';				}				$this->setMessage(JText::plural($ntext, count($ids)));			}		}		$this->setRedirect('index.php?option=com_banners&view=banners');	}	/**	 * Method to save the submitted ordering values for records via AJAX.	 *	 * @return  void	 *	 * @since   3.0	 */	public function saveOrderAjax()	{		// Get the input		$pks = $this->input->post->get('cid', array(), 'array');		$order = $this->input->post->get('order', array(), 'array');		// Sanitize the input		JArrayHelper::toInteger($pks);		JArrayHelper::toInteger($order);		// Get the model		$model = $this->getModel();		// Save the ordering		$return = $model->saveorder($pks, $order);		if ($return)		{			echo "1";		}		// Close the application		JFactory::getApplication()->close();	}}
<?php/** * @package     Joomla.Site * @subpackage  com_search * * @copyright   Copyright (C) 2005 - 2013 Open Source Matters, Inc. All rights reserved. * @license     GNU General Public License version 2 or later; see LICENSE.txt */defined('_JEXEC') or die;?><div class="search<?php echo $this->pageclass_sfx; ?>"><?php if ($this->params->get('show_page_heading', 1)) : ?><h1 class="page-title">	<?php if ($this->escape($this->params->get('page_heading'))) :?>		<?php echo $this->escape($this->params->get('page_heading')); ?>	<?php else : ?>		<?php echo $this->escape($this->params->get('page_title')); ?>	<?php endif; ?></h1><?php endif; ?><?php echo $this->loadTemplate('form'); ?><?php if ($this->error == null && count($this->results) > 0) :	echo $this->loadTemplate('results');else :	echo $this->loadTemplate('error');endif; ?></div>
<?php/** * @package     Joomla.Site * @subpackage  mod_wrapper * * @copyright   Copyright (C) 2005 - 2013 Open Source Matters, Inc. All rights reserved. * @license     GNU General Public License version 2 or later; see LICENSE.txt */defined('_JEXEC') or die;/** * Helper for mod_wrapper * * @package     Joomla.Site * @subpackage  mod_wrapper * @since       1.5 */class ModWrapperHelper{	public static function getParams(&$params)	{		$params->def('url', '');		$params->def('scrolling', 'auto');		$params->def('height', '200');		$params->def('height_auto', '0');		$params->def('width', '100%');		$params->def('add', '1');		$params->def('name', 'wrapper');		$url = $params->get('url');		if ($params->get('add'))		{			// adds 'http://' if none is set			if (substr($url, 0, 1) == '/')			{				// relative url in component. use server http_host.				$url = 'http://'.$_SERVER['HTTP_HOST'].$url;			}			elseif (!strstr($url, 'http') && !strstr($url, 'https'))			{				$url = 'http://'.$url;			}			else {				$url = $url;			}		}		// auto height control		if ($params->def('height_auto'))		{			$load = 'onload="iFrameHeight()"';		}		else		{			$load = '';		}		$params->set('load', $load);		$params->set('url', $url);		return $params;	}}
<?php/** * @package     Joomla.Administrator * @subpackage  mod_login * * @copyright   Copyright (C) 2005 - 2013 Open Source Matters, Inc. All rights reserved. * @license     GNU General Public License version 2 or later; see LICENSE.txt */defined('_JEXEC') or die;// Include the syndicate functions only oncerequire_once __DIR__ . '/helper.php';$langs  = ModLoginHelper::getLanguageList();$return = ModLoginHelper::getReturnURI();require JModuleHelper::getLayoutPath('mod_login', $params->get('layout', 'default'));
<?php/** * @package     Joomla.Administrator * @subpackage  mod_menu * * @copyright   Copyright (C) 2005 - 2013 Open Source Matters, Inc. All rights reserved. * @license     GNU General Public License version 2 or later; see LICENSE.txt */defined('_JEXEC') or die;/** * Tree based class to render the admin menu * * @package     Joomla.Administrator * @subpackage  mod_menu * @since       1.5 */class JAdminCssMenu extends JObject{	/**	 * CSS string to add to document head	 * @var string	 */	protected $_css = null;	/**	 * Root node	 *	 * @var    object	 */	protected $_root = null;	/**	 * Current working node	 *	 * @var    object	 */	protected $_current = null;	/**	 * Constructor	 */	public function __construct()	{		$this->_root = new JMenuNode('ROOT');		$this->_current = & $this->_root;	}	/**	 * Method to add a child	 *	 * @param   JMenuNode  &$node       The node to process	 * @param   boolean    $setCurrent  True to set as current working node	 *	 * @return  void	 */	public function addChild(JMenuNode &$node, $setCurrent = false)	{		$this->_current->addChild($node);		if ($setCurrent)		{			$this->_current = &$node;		}	}	/**	 * Method to get the parent	 *	 * @return  void	 */	public function getParent()	{		$this->_current = &$this->_current->getParent();	}	/**	 * Method to get the parent	 *	 * @return  void	 */	public function reset()	{		$this->_current = &$this->_root;	}	public function addSeparator()	{		$this->addChild(new JMenuNode(null, null, 'separator', false));	}	public function renderMenu($id = 'menu', $class = '')	{		$depth = 1;		if (!empty($id))		{			$id = 'id="' . $id . '"';		}		if (!empty($class))		{			$class = 'class="' . $class . '"';		}		/*		 * Recurse through children if they exist		 */		while ($this->_current->hasChildren())		{			echo "<ul ".$id." ".$class.">\n";			foreach ($this->_current->getChildren() as $child)			{				$this->_current = & $child;				$this->renderLevel($depth++);			}			echo "</ul>\n";		}		if ($this->_css)		{			// Add style to document head			$doc = JFactory::getDocument();			$doc->addStyleDeclaration($this->_css);		}	}	public function renderLevel($depth)	{		/*		 * Build the CSS class suffix		 */		$class = '';		if ($this->_current->hasChildren())		{			$class = ' class="dropdown"';		}		if ($this->_current->class == 'separator')		{			$class = ' class="divider"';		}		if ($this->_current->hasChildren() && $this->_current->class)		{			$class = ' class="dropdown-submenu"';		}		if ($this->_current->class == 'disabled')		{			$class = ' class="disabled"';		}		/*		 * Print the item		 */		echo "<li".$class.">";		/*		 * Print a link if it exists		 */		$linkClass = array();		$dataToggle = '';		$dropdownCaret = '';		if ($this->_current->hasChildren())		{			$linkClass[] = 'dropdown-toggle';			$dataToggle = ' data-toggle="dropdown"';			if (!$this->_current->getParent()->hasParent())			{				$dropdownCaret = ' <span class="caret"></span>';			}		}		if ($this->_current->link != null && $this->_current->getParent()->title != 'ROOT')		{			$iconClass = $this->getIconClass($this->_current->class);			if (!empty($iconClass))			{				$linkClass[] = $iconClass;			}		}		// Implode out $linkClass for rendering		$linkClass = ' class="' . implode(' ', $linkClass) . '"';		if ($this->_current->link != null && $this->_current->target != null)		{			echo "<a" . $linkClass . " " . $dataToggle . " href=\"" . $this->_current->link . "\" target=\"" . $this->_current->target . "\" >" . $this->_current->title . $dropdownCaret . "</a>";		}		elseif ($this->_current->link != null && $this->_current->target == null)		{			echo "<a" . $linkClass . " " . $dataToggle . " href=\"" . $this->_current->link . "\">" . $this->_current->title . $dropdownCaret . "</a>";		}		elseif ($this->_current->title != null)		{			echo "<a" . $linkClass . " " . $dataToggle . ">" . $this->_current->title . $dropdownCaret . "</a>";		}		else		{			echo "<span></span>";		}		/*		 * Recurse through children if they exist		 */		while ($this->_current->hasChildren())		{			if ($this->_current->class)			{				$id = '';				if (!empty($this->_current->id))				{					$id = ' id="menu-'.strtolower($this->_current->id).'"';				}				echo '<ul'.$id.' class="dropdown-menu menu-component">'."\n";			} else {				echo '<ul class="dropdown-menu">'."\n";			}			foreach ($this->_current->getChildren() as $child)			{				$this->_current = & $child;				$this->renderLevel($depth++);			}			echo "</ul>\n";		}		echo "</li>\n";	}	/**	 * Method to get the CSS class name for an icon identifier or create one if	 * a custom image path is passed as the identifier	 *	 * @access	public	 * @param   string	$identifier	Icon identification string	 * @return  string	CSS class name	 * @since   1.5	 */	public function getIconClass($identifier)	{		static $classes;		// Initialise the known classes array if it does not exist		if (!is_array($classes))		{			$classes = array();		}		/*		 * If we don't already know about the class... build it and mark it		 * known so we don't have to build it again		 */		if (!isset($classes[$identifier]))		{			if (substr($identifier, 0, 6) == 'class:')			{				// We were passed a class name				$class = substr($identifier, 6);				$classes[$identifier] = "menu-$class";			} else {				if ($identifier == null)				{					return null;				}				// Build the CSS class for the icon				$class = preg_replace('#\.[^.]*$#', '', basename($identifier));				$class = preg_replace('#\.\.[^A-Za-z0-9\.\_\- ]#', '', $class);				$this->_css  .= "\n.menu-$class {\n" .						"\tbackground: url($identifier) no-repeat;\n" .						"}\n";				$classes[$identifier] = "menu-$class";			}		}		return $classes[$identifier];	}}/** * A Node for JAdminCssMenu * * @package     Joomla.Administrator * @subpackage  mod_menu * @since       1.5 * @see         JAdminCssMenu */class JMenuNode extends JObject{	/**	 * Node Title	 */	public $title = null;	/**	 * Node Id	 */	public $id = null;	/**	 * Node Link	 */	public $link = null;	/**	 * Link Target	 */	public $target = null;	/**	 * CSS Class for node	 */	public $class = null;	/**	 * Active Node?	 */	public $active = false;	/**	 * Parent node	 * @var    object	 */	protected $_parent = null;	/**	 * Array of Children	 *	 * @var    array	 */	protected $_children = array();	public function __construct($title, $link = null, $class = null, $active = false, $target = null, $titleicon = null)	{		$this->title	= $titleicon ? $title.$titleicon : $title;		$this->link		= JFilterOutput::ampReplace($link);		$this->class	= $class;		$this->active	= $active;		$this->id = null;		if (!empty($link) && $link !== '#')		{			$uri = new JURI($link);			$params = $uri->getQuery(true);			$parts = array();			foreach ($params as $name => $value)			{				$parts[] = str_replace(array('.', '_'), '-', $value);			}			$this->id = implode('-', $parts);		}		$this->target	= $target;	}	/**	 * Add child to this node	 *	 * If the child already has a parent, the link is unset	 *	 * @param   JMenuNode  &$child  The child to be added	 *	 * @return  void	 */	public function addChild(JMenuNode &$child)	{		$child->setParent($this);	}	/**	 * Set the parent of a this node	 *	 * If the node already has a parent, the link is unset	 *	 * @param   JMenuNode   &$parent  The JMenuNode for parent to be set or null	 *	 * @return  void	 */	public function setParent(JMenuNode &$parent = null)	{		$hash = spl_object_hash($this);		if (!is_null($this->_parent))		{			unset($this->_parent->children[$hash]);		}		if (!is_null($parent))		{			$parent->_children[$hash] = & $this;		}		$this->_parent = & $parent;	}	/**	 * Get the children of this node	 *	 * @return  array    The children	 */	public function &getChildren()	{		return $this->_children;	}	/**	 * Get the parent of this node	 *	 * @return  mixed   JMenuNode object with the parent or null for no parent	 */	public function &getParent()	{		return $this->_parent;	}	/**	 * Test if this node has children	 *	 * @return   boolean  True if there are children	 */	public function hasChildren()	{		return (bool) count($this->_children);	}	/**	 * Test if this node has a parent	 *	 * @return  boolean  True if there is a parent	 */	public function hasParent()	{		return $this->getParent() != null;	}}
<?php/** * @package     Joomla.Administrator * @subpackage  Template.system * * @copyright   Copyright (C) 2005 - 2013 Open Source Matters, Inc. All rights reserved. * @license     GNU General Public License version 2 or later; see LICENSE.txt */defined('_JEXEC') or die;include __DIR__ . '/component.php';
<?php/** * @package     Joomla.Libraries * @subpackage  Table * * @copyright   Copyright (C) 2005 - 2013 Open Source Matters, Inc. All rights reserved. * @license     GNU General Public License version 2 or later; see LICENSE */defined('JPATH_PLATFORM') or die;/** * Core content table * * @package     Joomla.Libraries * @subpackage  Table * @since       3.1 */class JTableCorecontent extends JTable{	/**	 * Constructor	 *	 * @param   JDatabaseDriver  $db  A database connector object	 *	 * @since   3.1	 */	public function __construct($db)	{		parent::__construct('#__ucm_content', 'core_content_id', $db);	}	/**	 * Overloaded bind function	 *	 * @param   array  $array   Named array	 * @param   mixed  $ignore  An optional array or space separated list of properties	 *                          to ignore while binding.	 *	 * @return  mixed  Null if operation was satisfactory, otherwise returns an error string	 *	 * @see     JTable::bind	 * @since   3.1	 */	public function bind($array, $ignore = '')	{		if (isset($array['core_params']) && is_array($array['core_params']))		{			$registry = new JRegistry;			$registry->loadArray($array['core_params']);			$array['core_params'] = (string) $registry;		}		if (isset($array['core_metadata']) && is_array($array['core_metadata']))		{			$registry = new JRegistry;			$registry->loadArray($array['core_metadata']);			$array['core_metadata'] = (string) $registry;		}		if (isset($array['core_images']) && is_array($array['core_images']))		{			$registry = new JRegistry;			$registry->loadArray($array['core_images']);			$array['core_images'] = (string) $registry;		}		if (isset($array['core_urls']) && is_array($array['core_urls']))		{			$registry = new JRegistry;			$registry->loadArray($array['core_urls']);			$array['core_urls'] = (string) $registry;		}		if (isset($array['core_body']) && is_array($array['core_body']))		{			$registry = new JRegistry;			$registry->loadArray($array['core_body']);			$array['core_body'] = (string) $registry;		}		return parent::bind($array, $ignore);	}	/**	 * Overloaded check function	 *	 * @return  boolean  True on success, false on failure	 *	 * @see     JTable::check	 * @since   3.1	 */	public function check()	{		if (trim($this->core_title) == '')		{			$this->setError(JText::_('LIB_CMS_WARNING_PROVIDE_VALID_NAME'));			return false;		}		if (trim($this->core_alias) == '')		{			$this->core_alias = $this->core_title;		}		$this->core_alias = JApplication::stringURLSafe($this->core_alias);		if (trim(str_replace('-', '', $this->core_alias)) == '')		{			$this->core_alias = JFactory::getDate()->format('Y-m-d-H-i-s');		}		// Check the publish down date is not earlier than publish up.		if ($this->core_publish_down > $this->_db->getNullDate() && $this->core_publish_down < $this->core_publish_up)		{			// Swap the dates.			$temp = $this->core_publish_up;			$this->core_publish_up = $this->core_publish_down;			$this->core_publish_down = $temp;		}		// Clean up keywords -- eliminate extra spaces between phrases		// and cr (\r) and lf (\n) characters from string		if (!empty($this->core_metakey))		{			// Only process if not empty			// Array of characters to remove			$bad_characters = array("\n", "\r", "\"", "<", ">");			// Remove bad characters			$after_clean = JString::str_ireplace($bad_characters, "", $this->metakey);			// Create array using commas as delimiter			$keys = explode(',', $after_clean);			$clean_keys = array();			foreach ($keys as $key)			{				if (trim($key))				{					// Ignore blank keywords					$clean_keys[] = trim($key);				}			}			// Put array back together delimited by ", "			$this->core_metakey = implode(", ", $clean_keys);		}		return true;	}	/**	 * Override JTable delete method to include deleting corresponding row from #__ucm_base.	 *	 * @param   integer  primary key value to delete. Must be set or throws an exception.	 *	 * @return  boolean  True on success.	 *	 * @throws  UnexpectedValueException	 */	public function delete($pk = null)	{		$baseTable = JTable::getInstance('Ucm');		return parent::delete($pk) && $baseTable->delete($pk);	}	/**	 * Method to delete a row from the #__ucm_content table by content_item_id.	 *	 * @param   integer  $pk  value of the core_content_item_id to delete. Corresponds to the primary key of the content table.	 *	 * @return  boolean  True on success.	 *	 * @since   3.1	 *	 * @throws  UnexpectedValueException	 */	public function deleteByContentId($contentItemId = null)	{		if ($contentItemId === null || ((int) $contentItemId) === 0)		{			throw new UnexpectedValueException('Null content item key not allowed.');		}		$db = $this->getDbo();		$query = $db->getQuery(true);		$query->select($db->quoteName('core_content_id'))			->from($db->quoteName('#__ucm_content'))			->where($db->quoteName('core_content_item_id') . ' = ' . (int) $contentItemId);		$db->setQuery($query);		if ($ucmId = $db->loadResult())		{			return $this->delete($ucmId);		}		else		{			return true;		}	}	/**	 * Overrides JTable::store to set modified data and user id.	 *	 * @param   boolean  $updateNulls  True to update fields even if they are null.	 *	 * @return  boolean  True on success.	 *	 * @since   3.1	 */	public function store($updateNulls = false)	{		$date = JFactory::getDate();		$user = JFactory::getUser();		if ($this->core_content_id)		{			// Existing item			$this->core_modified_time = $date->toSql();			$this->core_modified_user_id = $user->get('id');			$isNew = false;		}		else		{			// New content item. A content item core_created_time and core_created_user_id field can be set by the user,			// so we don't touch either of these if they are set.			if (!(int) $this->core_created_time)			{				$this->core_created_time = $date->toSql();			}			if (empty($this->core_created_user_id))			{				$this->core_created_user_id = $user->get('id');			}			$isNew = true;		}		$result = parent::store($updateNulls);		return $result && $this->storeUcmBase($updateNulls, $isNew);	}	/**	 * Insert or update row in ucm_base table	 *	 * @param   boolean  $updateNulls  True to update fields even if they are null.	 * @param   boolean  $isNew        if true, need to insert. Otherwise update.	 *	 * @return  boolean  True on success.	 *	 * @since   3.1	 */	protected function storeUcmBase($updateNulls = false, $isNew = false)	{		// Store the ucm_base row		$db = $this->getDbo();		$query = $db->getQuery(true);		$query->set($db->quoteName('ucm_item_id') . ' = ' . $db->quote($this->core_content_item_id));		$query->set($db->quoteName('ucm_type_id') . ' = ' . $db->quote($this->core_type_id));		$languageId = JHelperContent::getLanguageId($this->core_language);		$query->set($db->quoteName('ucm_language_id') . ' = ' . $db->quote($languageId));		if ($isNew)		{			$query->set($db->quoteName('ucm_id') . ' = ' . $db->quote($this->core_content_id));			$query->insert($db->quoteName('#__ucm_base'));		}		else		{			$query->update($db->quoteName('#__ucm_base'));			$query->where($db->quoteName('ucm_id') . ' = ' . $db->quote($this->core_content_id));		}		$db->setQuery($query);		return $db->execute();	}	/**	 * Method to set the publishing state for a row or list of rows in the database	 * table. The method respects checked out rows by other users and will attempt	 * to checkin rows that it can after adjustments are made.	 *	 * @param   mixed    $pks     An optional array of primary key values to update.  If not set the instance property value is used.	 * @param   integer  $state   The publishing state. eg. [0 = unpublished, 1 = published]	 * @param   integer  $userId  The user id of the user performing the operation.	 *	 * @return  boolean  True on success.	 *	 * @since   3.1	 */	public function publish($pks = null, $state = 1, $userId = 0)	{		$k = $this->_tbl_key;		// Sanitize input.		JArrayHelper::toInteger($pks);		$userId = (int) $userId;		$state = (int) $state;		// If there are no primary keys set check to see if the instance key is set.		if (empty($pks))		{			if ($this->$k)			{				$pks = array($this->$k);			}			// Nothing to set publishing state on, return false.			else			{				$this->setError(JText::_('JLIB_DATABASE_ERROR_NO_ROWS_SELECTED'));				return false;			}		}		$pksImploded = implode(',', $pks);		// Get the JDatabaseQuery object		$query = $this->_db->getQuery(true);		// Update the publishing state for rows with the given primary keys.		$query->update($this->_db->quoteName($this->_tbl))			->set($this->_db->quoteName('core_state') . ' = ' . (int) $state)			->where($this->_db->quoteName($k) . 'IN (' . $pksImploded . ')');		// Determine if there is checkin support for the table.		$checkin = false;		if (property_exists($this, 'core_checked_out_user_id') && property_exists($this, 'core_checked_out_time'))		{			$checkin = true;			$query->where(' (' . $this->_db->quoteName('core_checked_out_user_id') . ' = 0 OR ' . $this->_db->quoteName('core_checked_out_user_id') . ' = ' . (int) $userId . ')');		}		$this->_db->setQuery($query);		try		{			$this->_db->execute();		}		catch (RuntimeException $e)		{			$this->setError($e->getMessage());			return false;		}		// If checkin is supported and all rows were adjusted, check them in.		if ($checkin && (count($pks) == $this->_db->getAffectedRows()))		{			// Checkin the rows.			foreach ($pks as $pk)			{				$this->checkin($pk);			}		}		// If the JTable instance value is in the list of primary keys that were set, set the instance.		if (in_array($this->$k, $pks))		{			$this->core_state = $state;		}		$this->setError('');		return true;	}}
<?php/** * @package     Joomla.Administrator * @subpackage  com_content * * @copyright   Copyright (C) 2005 - 2013 Open Source Matters, Inc. All rights reserved. * @license     GNU General Public License version 2 or later; see LICENSE.txt */defined('_JEXEC') or die;$app = JFactory::getApplication();if ($app->isSite()){	JSession::checkToken('get') or die(JText::_('JINVALID_TOKEN'));}require_once JPATH_ROOT . '/components/com_content/helpers/route.php';JHtml::addIncludePath(JPATH_COMPONENT.'/helpers/html');JHtml::_('bootstrap.tooltip');$function  = $app->input->getCmd('function', 'jSelectArticle');$listOrder = $this->escape($this->state->get('list.ordering'));$listDirn  = $this->escape($this->state->get('list.direction'));?><form action="<?php echo JRoute::_('index.php?option=com_content&view=articles&layout=modal&tmpl=component&function='.$function.'&'.JSession::getFormToken().'=1');?>" method="post" name="adminForm" id="adminForm" class="form-inline">	<fieldset class="filter clearfix">		<div class="btn-toolbar">			<div class="btn-group pull-left">				<label for="filter_search">					<?php echo JText::_('JSEARCH_FILTER_LABEL'); ?>				</label>			</div>			<div class="btn-group pull-left">				<input type="text" name="filter_search" id="filter_search" value="<?php echo $this->escape($this->state->get('filter.search')); ?>" size="30" title="<?php echo JText::_('COM_CONTENT_FILTER_SEARCH_DESC'); ?>" />			</div>			<div class="btn-group pull-left">				<button type="submit" class="btn hasTooltip" data-placement="bottom" title="<?php echo JText::_('JSEARCH_FILTER_SUBMIT'); ?>">					<span class="icon-search"></span><?php echo '&#160;' . JText::_('JSEARCH_FILTER_SUBMIT'); ?></button>				<button type="button" class="btn hasTooltip" data-placement="bottom" title="<?php echo JText::_('JSEARCH_FILTER_CLEAR'); ?>" onclick="document.id('filter_search').value='';this.form.submit();">					<span class="icon-remove"></span><?php echo '&#160;' . JText::_('JSEARCH_FILTER_CLEAR'); ?></button>			</div>			<?php if ($app->isAdmin()) : ?>				<input onclick="if (window.parent) window.parent.<?php echo $this->escape($function);?>('0', '<?php echo $this->escape(addslashes(JText::_('COM_CONTENT_SELECT_AN_ARTICLE'))); ?>', null, null);" class="btn" type="button" value="<?php echo JText::_('COM_CONTENT_NONE'); ?>" />			<?php endif; ?>			<div class="clearfix"></div>		</div>		<hr class="hr-condensed" />		<div class="filters pull-left">			<select name="filter_access" class="input-medium" onchange="this.form.submit()">				<option value=""><?php echo JText::_('JOPTION_SELECT_ACCESS');?></option>				<?php echo JHtml::_('select.options', JHtml::_('access.assetgroups'), 'value', 'text', $this->state->get('filter.access'));?>			</select>			<select name="filter_published" class="input-medium" onchange="this.form.submit()">				<option value=""><?php echo JText::_('JOPTION_SELECT_PUBLISHED');?></option>				<?php echo JHtml::_('select.options', JHtml::_('jgrid.publishedOptions'), 'value', 'text', $this->state->get('filter.published'), true);?>			</select>			<?php if ($this->state->get('filter.forcedLanguage')) : ?>			<select name="filter_category_id" class="input-medium" onchange="this.form.submit()">				<option value=""><?php echo JText::_('JOPTION_SELECT_CATEGORY');?></option>				<?php echo JHtml::_('select.options', JHtml::_('category.options', 'com_content', array('filter.language' => array('*', $this->state->get('filter.forcedLanguage')))), 'value', 'text', $this->state->get('filter.category_id'));?>			</select>			<input type="hidden" name="forcedLanguage" value="<?php echo $this->escape($this->state->get('filter.forcedLanguage')); ?>" />			<input type="hidden" name="filter_language" value="<?php echo $this->escape($this->state->get('filter.language')); ?>" />			<?php else : ?>			<select name="filter_category_id" class="input-medium" onchange="this.form.submit()">				<option value=""><?php echo JText::_('JOPTION_SELECT_CATEGORY');?></option>				<?php echo JHtml::_('select.options', JHtml::_('category.options', 'com_content'), 'value', 'text', $this->state->get('filter.category_id'));?>			</select>			<select name="filter_language" class="input-medium" onchange="this.form.submit()">				<option value=""><?php echo JText::_('JOPTION_SELECT_LANGUAGE');?></option>				<?php echo JHtml::_('select.options', JHtml::_('contentlanguage.existing', true, true), 'value', 'text', $this->state->get('filter.language'));?>			</select>			<?php endif; ?>		</div>	</fieldset>	<table class="table table-striped table-condensed">		<thead>			<tr>				<th class="title">					<?php echo JHtml::_('grid.sort', 'JGLOBAL_TITLE', 'a.title', $listDirn, $listOrder); ?>				</th>				<th width="15%" class="center nowrap">					<?php echo JHtml::_('grid.sort', 'JGRID_HEADING_ACCESS', 'access_level', $listDirn, $listOrder); ?>				</th>				<th width="15%" class="center nowrap">					<?php echo JHtml::_('grid.sort', 'JCATEGORY', 'a.catid', $listDirn, $listOrder); ?>				</th>				<th width="5%" class="center nowrap">					<?php echo JHtml::_('grid.sort', 'JGRID_HEADING_LANGUAGE', 'language', $listDirn, $listOrder); ?>				</th>				<th width="5%" class="center nowrap">					<?php echo JHtml::_('grid.sort', 'JDATE', 'a.created', $listDirn, $listOrder); ?>				</th>				<th width="1%" class="center nowrap">					<?php echo JHtml::_('grid.sort', 'JGRID_HEADING_ID', 'a.id', $listDirn, $listOrder); ?>				</th>			</tr>		</thead>		<tfoot>			<tr>				<td colspan="15">					<?php echo $this->pagination->getListFooter(); ?>				</td>			</tr>		</tfoot>		<tbody>		<?php foreach ($this->items as $i => $item) : ?>			<?php if ($item->language && JLanguageMultilang::isEnabled())			{				$tag = strlen($item->language);				if ($tag == 5)				{					$lang = substr($item->language, 0, 2);				}				elseif ($tag == 6)				{					$lang = substr($item->language, 0, 3);				}				else {					$lang = "";				}			}			elseif (!JLanguageMultilang::isEnabled())			{				$lang = "";			}			?>			<tr class="row<?php echo $i % 2; ?>">				<td>					<a class="pointer" onclick="if (window.parent) window.parent.<?php echo $this->escape($function);?>('<?php echo $item->id; ?>', '<?php echo $this->escape(addslashes($item->title)); ?>', '<?php echo $this->escape($item->catid); ?>', null, '<?php echo $this->escape(ContentHelperRoute::getArticleRoute($item->id, $item->catid, $item->language)); ?>', '<?php echo $this->escape($lang); ?>', null);">						<?php echo $this->escape($item->title); ?></a>				</td>				<td class="center">					<?php echo $this->escape($item->access_level); ?>				</td>				<td class="center">					<?php echo $this->escape($item->category_title); ?>				</td>				<td class="center">					<?php if ($item->language == '*'):?>						<?php echo JText::alt('JALL', 'language'); ?>					<?php else:?>						<?php echo $item->language_title ? $this->escape($item->language_title) : JText::_('JUNDEFINED'); ?>					<?php endif;?>				</td>				<td class="center nowrap">					<?php echo JHtml::_('date', $item->created, JText::_('DATE_FORMAT_LC4')); ?>				</td>				<td class="center">					<?php echo (int) $item->id; ?>				</td>			</tr>			<?php endforeach; ?>		</tbody>	</table>	<div>		<input type="hidden" name="task" value="" />		<input type="hidden" name="boxchecked" value="0" />		<input type="hidden" name="filter_order" value="<?php echo $listOrder; ?>" />		<input type="hidden" name="filter_order_Dir" value="<?php echo $listDirn; ?>" />		<?php echo JHtml::_('form.token'); ?>	</div></form>
<?php/** * @package     Joomla.Platform * @subpackage  Feed * * @copyright   Copyright (C) 2005 - 2012 Open Source Matters, Inc. All rights reserved. * @license     GNU General Public License version 2 or later; see LICENSE */defined('JPATH_PLATFORM') or die();/** * Class to encapsulate a feed for the Joomla Platform. * * @property  JFeedPerson  $author         Person responsible for feed content. * @property  array        $categories     Categories to which the feed belongs. * @property  array        $contributors   People who contributed to the feed content. * @property  string       $copyright      Information about rights, e.g. copyrights, held in and over the feed. * @property  string       $description    A phrase or sentence describing the feed. * @property  string       $generator      A string indicating the program used to generate the feed. * @property  string       $image          Specifies a GIF, JPEG or PNG image that should be displayed with the feed. * @property  JDate        $publishedDate  The publication date for the feed content. * @property  string       $title          A human readable title for the feed. * @property  JDate        $updatedDate    The last time the content of the feed changed. * @property  string       $uri            Universal, permanent identifier for the feed. * * @package     Joomla.Platform * @subpackage  Feed * @since       12.3 */class JFeed implements ArrayAccess{	/**	 * @var    array  The entry properties.	 * @since  12.3	 */	protected $properties = array(		'uri' => '',		'title' => '',		'updatedDate' => '',		'description' => '',		'categories' => array(),		'contributors' => array()	);	/**	 * @var    array  The list of feed entry objects.	 * @since  12.3	 */	protected $entries = array();	/**	 * Magic method to return values for feed properties.	 *	 * @param   string  $name  The name of the property.	 *	 * @return  mixed	 *	 * @since   12.3	 */	public function __get($name)	{		return isset($this->properties[$name]) ? $this->properties[$name] : null;	}	/**	 * Magic method to set values for feed properties.	 *	 * @param   string  $name   The name of the property.	 * @param   mixed   $value  The value to set for the property.	 *	 * @return  void	 *	 * @since   12.3	 */	public function __set($name, $value)	{		// Ensure that setting a date always sets a JDate instance.		if ((($name == 'updatedDate') || ($name == 'publishedDate')) && !($value instanceof JDate))		{			$value = new JDate($value);		}		// Validate that any authors that are set are instances of JFeedPerson or null.		if (($name == 'author') && (!($value instanceof JFeedPerson) || ($value === null)))		{			throw new InvalidArgumentException('JFeed "author" must be of type JFeedPerson. ' . gettype($value) . 'given.');		}		// Disallow setting categories or contributors directly.		if (($name == 'categories') || ($name == 'contributors'))		{			throw new InvalidArgumentException('Cannot directly set JFeed property "' . $name . '".');		}		$this->properties[$name] = $value;	}	/**	 * Method to add a category to the feed object.	 *	 * @param   string  $name  The name of the category to add.	 * @param   string  $uri   The optional URI for the category to add.	 *	 * @return  JFeed	 *	 * @since   12.3	 */	public function addCategory($name, $uri = '')	{		$this->properties['categories'][$name] = $uri;		return $this;	}	/**	 * Method to add a contributor to the feed object.	 *	 * @param   string  $name   The full name of the person to add.	 * @param   string  $email  The email address of the person to add.	 * @param   string  $uri    The optional URI for the person to add.	 * @param   string  $type   The optional type of person to add.	 *	 * @return  JFeed	 *	 * @since   12.3	 */	public function addContributor($name, $email, $uri = null, $type = null)	{		$contributor = new JFeedPerson($name, $email, $uri, $type);		// If the new contributor already exists then there is nothing to do, so just return.		foreach ($this->properties['contributors'] as $c)		{			if ($c == $contributor)			{				return $this;			}		}		// Add the new contributor.		$this->properties['contributors'][] = $contributor;		return $this;	}	/**	 * Method to add an entry to the feed object.	 *	 * @param   JFeedEntry  $entry  The entry object to add.	 *	 * @return  JFeed	 *	 * @since   12.3	 */	public function addEntry(JFeedEntry $entry)	{		// If the new entry already exists then there is nothing to do, so just return.		foreach ($this->entries as $e)		{			if ($e == $entry)			{				return $this;			}		}		// Add the new entry.		$this->entries[] = $entry;		return $this;	}	/**	 * Whether or not an offset exists.  This method is executed when using isset() or empty() on	 * objects implementing ArrayAccess.	 *	 * @param   mixed  $offset  An offset to check for.	 *	 * @return  boolean	 *	 * @see     ArrayAccess::offsetExists()	 * @since   12.3	 */	public function offsetExists($offset)	{		return isset($this->entries[$offset]);	}	/**	 * Returns the value at specified offset.	 *	 * @param   mixed  $offset  The offset to retrieve.	 *	 * @return  mixed  The value at the offset.	 *	 * @see     ArrayAccess::offsetGet()	 * @since   12.3	 */	public function offsetGet($offset)	{		return $this->entries[$offset];	}	/**	 * Assigns a value to the specified offset.	 *	 * @param   mixed       $offset  The offset to assign the value to.	 * @param   JFeedEntry  $value   The JFeedEntry to set.	 *	 * @return  boolean	 *	 * @see    ArrayAccess::offsetSet()	 * @since  12.3	 */	public function offsetSet($offset, $value)	{		if (!($value instanceof JFeedEntry))		{			throw new InvalidArgumentException('Cannot set value of type "' . gettype($value) . '".');		}		$this->entries[$offset] = $value;		return true;	}	/**	 * Unsets an offset.	 *	 * @param   mixed  $offset  The offset to unset.	 *	 * @return  void	 *	 * @see     ArrayAccess::offsetUnset()	 * @since   12.3	 */	public function offsetUnset($offset)	{		unset($this->entries[$offset]);	}	/**	 * Method to remove a category from the feed object.	 *	 * @param   string  $name  The name of the category to remove.	 *	 * @return  JFeed	 *	 * @since   12.3	 */	public function removeCategory($name)	{		unset($this->properties['categories'][$name]);		return $this;	}	/**	 * Method to remove a contributor from the feed object.	 *	 * @param   JFeedPerson  $contributor  The person object to remove.	 *	 * @return  JFeed	 *	 * @since   12.3	 */	public function removeContributor(JFeedPerson $contributor)	{		// If the contributor exists remove it.		foreach ($this->properties['contributors'] as $k => $c)		{			if ($c == $contributor)			{				unset($this->properties['contributors'][$k]);				$this->properties['contributors'] = array_values($this->properties['contributors']);				return $this;			}		}		return $this;	}	/**	 * Method to remove an entry from the feed object.	 *	 * @param   JFeedEntry  $entry  The entry object to remove.	 *	 * @return  JFeed	 *	 * @since   12.3	 */	public function removeEntry(JFeedEntry $entry)	{		// If the entry exists remove it.		foreach ($this->entries as $k => $e)		{			if ($e == $entry)			{				unset($this->entries[$k]);				$this->entries = array_values($this->entries);				return $this;			}		}		return $this;	}	/**	 * Shortcut method to set the author for the feed object.	 *	 * @param   string  $name   The full name of the person to set.	 * @param   string  $email  The email address of the person to set.	 * @param   string  $uri    The optional URI for the person to set.	 * @param   string  $type   The optional type of person to set.	 *	 * @return  JFeed	 *	 * @since   12.3	 */	public function setAuthor($name, $email, $uri = null, $type = null)	{		$author = new JFeedPerson($name, $email, $uri, $type);		$this->properties['author'] = $author;		return $this;	}}
<?php/** * @package    Joomla.Build * * @copyright  Copyright (C) 2005 - 2013 Open Source Matters, Inc. All rights reserved. * @license    GNU General Public License version 2 or later; see LICENSE.txt */// Set flag that this is a parent file.const _JEXEC = 1;// Load system definesif (file_exists(dirname(__DIR__) . '/defines.php')){	require_once dirname(__DIR__) . '/defines.php';}if (!defined('_JDEFINES')){	define('JPATH_BASE', dirname(__DIR__));	require_once JPATH_BASE . '/includes/defines.php';}require_once JPATH_LIBRARIES . '/import.php';JLoader::registerPrefix('J', __DIR__ . '/libraries');require_once JPATH_LIBRARIES . '/cms.php';/** * This script will recompile the CSS files for templates using Less to build their stylesheets. * * @package  Joomla.Build * @since    3.0 */class GenerateCss extends JApplicationCli{	/**	 * Entry point for the script	 *	 * @return  void	 *	 * @since   3.0	 */	public function doExecute()	{		$templates = array(			JPATH_ADMINISTRATOR . '/templates/isis/less/template.less' => JPATH_ADMINISTRATOR . '/templates/isis/css/template.css',			JPATH_ADMINISTRATOR . '/templates/hathor/less/template.less' => JPATH_ADMINISTRATOR . '/templates/hathor/css/template.css',			JPATH_ADMINISTRATOR . '/templates/hathor/less/colour_blue.less' => JPATH_ADMINISTRATOR . '/templates/hathor/css/colour_blue.css',			JPATH_ADMINISTRATOR . '/templates/hathor/less/colour_brown.less' => JPATH_ADMINISTRATOR . '/templates/hathor/css/colour_brown.css',			JPATH_ADMINISTRATOR . '/templates/hathor/less/colour_standard.less' => JPATH_ADMINISTRATOR . '/templates/hathor/css/colour_standard.css',			JPATH_SITE . '/templates/protostar/less/template.less' => JPATH_SITE . '/templates/protostar/css/template.css',			// Below files are to recompile the default Bootstrap CSS files			__DIR__ . '/less/bootstrap-extended.less' => JPATH_SITE . '/media/jui/css/bootstrap-extended.css',			__DIR__ . '/less/bootstrap-rtl.less' => JPATH_SITE . '/media/jui/css/bootstrap-rtl.css'		);		$less = new JLess;		foreach ($templates as $source => $output)		{			try			{				$less->compileFile($source, $output);			}			catch (Exception $e)			{				echo $e->getMessage();			}		}	}}JApplicationCli::getInstance('GenerateCss')->execute();
<?php/** * @package     Joomla.Platform * @subpackage  Form * * @copyright   Copyright (C) 2005 - 2013 Open Source Matters, Inc. All rights reserved. * @license     GNU General Public License version 2 or later; see LICENSE */defined('JPATH_PLATFORM') or die;/** * Form Rule class for the Joomla Platform. * * @package     Joomla.Platform * @subpackage  Form * @since       11.1 */class JFormRuleEmail extends JFormRule{	/**	 * The regular expression to use in testing a form field value.	 *	 * @var    string	 * @since  11.1	 * @see    http://www.w3.org/TR/html-markup/input.email.html	 */	protected $regex = '^[a-zA-Z0-9.!#$%&*+/=?^_`{|}~-]+@[a-zA-Z0-9-]+(?:\.[a-zA-Z0-9-]+)*$';	/**	 * Method to test the email address and optionally check for uniqueness.	 *	 * @param   SimpleXMLElement  $element  The SimpleXMLElement object representing the <field /> tag for the form field object.	 * @param   mixed             $value    The form field value to validate.	 * @param   string            $group    The field name group control value. This acts as as an array container for the field.	 *                                      For example if the field has name="foo" and the group value is set to "bar" then the	 *                                      full field name would end up being "bar[foo]".	 * @param   JRegistry         $input    An optional JRegistry object with the entire data set to validate against the entire form.	 * @param   JForm             $form     The form object for which the field is being tested.	 *	 * @return  boolean  True if the value is valid, false otherwise.	 *	 * @since   11.1	 */	public function test(SimpleXMLElement $element, $value, $group = null, JRegistry $input = null, JForm $form = null)	{		// If the field is empty and not required, the field is valid.		$required = ((string) $element['required'] == 'true' || (string) $element['required'] == 'required');		if (!$required && empty($value))		{			return true;		}		// If the tld attribute is present, change the regular expression to require at least 2 characters for it.		$tld = ((string) $element['tld'] == 'tld' || (string) $element['tld'] == 'required');		if ($tld)		{			$this->regex = '^[a-zA-Z0-9.!#$%&*+/=?^_`{|}~-]+@[a-zA-Z0-9-]+(?:\.[a-zA-Z0-9-]{2,})$';		}		// Determine if the multiple attribute is present		$multiple = ((string) $element['multiple'] == 'true' || (string) $element['multiple'] == 'multiple');		if ($multiple)		{			$values = explode(',', $value);		}		if (!$multiple)		{			// Test the value against the regular expression.			if (!parent::test($element, $value, $group, $input, $form))			{				return false;			}		}		else		{			foreach ($values as $value)			{				// Test the value against the regular expression.				if (!parent::test($element, $value, $group, $input, $form))				{					return false;				}			}		}		// Check if we should test for uniqueness. This only can be used if multiple is not true		$unique = ((string) $element['unique'] == 'true' || (string) $element['unique'] == 'unique');		if ($unique && !$multiple)		{			// Get the database object and a new query object.			$db = JFactory::getDbo();			$query = $db->getQuery(true);			// Build the query.			$query->select('COUNT(*)')				->from('#__users')				->where('email = ' . $db->quote($value));			// Get the extra field check attribute.			$userId = ($form instanceof JForm) ? $form->getValue('id') : '';			$query->where($db->quoteName('id') . ' <> ' . (int) $userId);			// Set and query the database.			$db->setQuery($query);			$duplicate = (bool) $db->loadResult();			if ($duplicate)			{				return false;			}		}		return true;	}}
<?php/** * @package     Joomla.Site * @subpackage  com_users * * @copyright   Copyright (C) 2005 - 2013 Open Source Matters, Inc. All rights reserved. * @license     GNU General Public License version 2 or later; see LICENSE.txt */defined('_JEXEC') or die;/** * Users Html Helper * * @package     Joomla.Site * @subpackage  com_users * @since       1.6 */abstract class JHtmlUsers{	public static function value($value)	{		if (is_string($value))		{			$value = trim($value);		}		if (empty($value))		{			return JText::_('COM_USERS_PROFILE_VALUE_NOT_FOUND');		}		elseif (!is_array($value))		{			return htmlspecialchars($value);		}	}	public static function spacer($value)	{		return '';	}	public static function helpsite($value)	{		if (empty($value))		{			return self::value($value);		}		else		{			$pathToXml = JPATH_ADMINISTRATOR . '/help/helpsites.xml';			$text = $value;			if (!empty($pathToXml) && $xml = simplexml_load_file($pathToXml))			{				foreach ($xml->sites->site as $site)				{					if ((string) $site->attributes()->url == $value)					{						$text = (string) $site;						break;					}				}			}			$value = htmlspecialchars($value);			if (substr($value, 0, 4) == "http")			{				return '<a href="' . $value . '">' . $text . '</a>';			}			else			{				return '<a href="http://' . $value . '">' . $text . '</a>';			}		}	}	public static function templatestyle($value)	{		if (empty($value))		{			return self::value($value);		}		else		{			$db = JFactory::getDbo();			$query = $db->getQuery(true)				->select('title')				->from('#__template_styles')				->where('id = ' . $db->quote($value));			$db->setQuery($query);			$title = $db->loadResult();			if ($title)			{				return htmlspecialchars($title);			}			else			{				return self::value('');			}		}	}	public static function admin_language($value)	{		if (empty($value))		{			return self::value($value);		}		else		{			$path = JLanguage::getLanguagePath(JPATH_ADMINISTRATOR, $value);			$file = "$value.xml";			$result = null;			if (is_file("$path/$file"))			{				$result = JLanguage::parseXMLLanguageFile("$path/$file");			}			if ($result)			{				return htmlspecialchars($result['name']);			}			else			{				return self::value('');			}		}	}	public static function language($value)	{		if (empty($value))		{			return self::value($value);		}		else		{			$path = JLanguage::getLanguagePath(JPATH_SITE, $value);			$file = "$value.xml";			$result = null;			if (is_file("$path/$file"))			{				$result = JLanguage::parseXMLLanguageFile("$path/$file");			}			if ($result)			{				return htmlspecialchars($result['name']);			}			else			{				return self::value('');			}		}	}	public static function editor($value)	{		if (empty($value))		{			return self::value($value);		}		else		{			$db = JFactory::getDbo();			$lang = JFactory::getLanguage();			$query = $db->getQuery(true)				->select('name')				->from('#__extensions')				->where('element = ' . $db->quote($value))				->where('folder = ' . $db->quote('editors'));			$db->setQuery($query);			$title = $db->loadResult();			if ($title)			{				$lang->load("plg_editors_$value.sys", JPATH_ADMINISTRATOR, null, false, false)					|| $lang->load("plg_editors_$value.sys", JPATH_PLUGINS . '/editors/' . $value, null, false, false)					|| $lang->load("plg_editors_$value.sys", JPATH_ADMINISTRATOR, $lang->getDefault(), false, false)					|| $lang->load("plg_editors_$value.sys", JPATH_PLUGINS . '/editors/' . $value, $lang->getDefault(), false, false);				$lang->load($title . '.sys');				return JText::_($title);			}			else			{				return self::value('');			}		}	}}
<?php/** * @package     Joomla.Legacy * @subpackage  Table * * @copyright   Copyright (C) 2005 - 2013 Open Source Matters, Inc. All rights reserved. * @license     GNU General Public License version 2 or later; see LICENSE */defined('JPATH_PLATFORM') or die;/** * Content table * * @package     Joomla.Legacy * @subpackage  Table * @since       11.1 */class JTableContent extends JTable{	/**	 * Helper object for storing and deleting tag information.	 *	 * @var    JHelperTags	 * @since  3.1	 */	protected $tagsHelper = null;	/**	 * Constructor	 *	 * @param   JDatabaseDriver  $db  A database connector object	 *	 * @since   11.1	 */	public function __construct($db)	{		parent::__construct('#__content', 'id', $db);		$this->tagsHelper = new JHelperTags();		$this->tagsHelper->typeAlias = 'com_content.article';	}	/**	 * Method to compute the default name of the asset.	 * The default name is in the form table_name.id	 * where id is the value of the primary key of the table.	 *	 * @return  string	 *	 * @since   11.1	 */	protected function _getAssetName()	{		$k = $this->_tbl_key;		return 'com_content.article.' . (int) $this->$k;	}	/**	 * Method to return the title to use for the asset table.	 *	 * @return  string	 *	 * @since   11.1	 */	protected function _getAssetTitle()	{		return $this->title;	}	/**	 * Method to get the parent asset id for the record	 *	 * @param   JTable   $table  A JTable object (optional) for the asset parent	 * @param   integer  $id     The id (optional) of the content.	 *	 * @return  integer	 *	 * @since   11.1	 */	protected function _getAssetParentId($table = null, $id = null)	{		$assetId = null;		// This is a article under a category.		if ($this->catid)		{			// Build the query to get the asset id for the parent category.			$query = $this->_db->getQuery(true)				->select($this->_db->quoteName('asset_id'))				->from($this->_db->quoteName('#__categories'))				->where($this->_db->quoteName('id') . ' = ' . (int) $this->catid);			// Get the asset id from the database.			$this->_db->setQuery($query);			if ($result = $this->_db->loadResult())			{				$assetId = (int) $result;			}		}		// Return the asset id.		if ($assetId)		{			return $assetId;		}		else		{			return parent::_getAssetParentId($table, $id);		}	}	/**	 * Overloaded bind function	 *	 * @param   array  $array   Named array	 * @param   mixed  $ignore  An optional array or space separated list of properties	 *                          to ignore while binding.	 *	 * @return  mixed  Null if operation was satisfactory, otherwise returns an error string	 *	 * @see     JTable::bind	 * @since   11.1	 */	public function bind($array, $ignore = '')	{		// Search for the {readmore} tag and split the text up accordingly.		if (isset($array['articletext']))		{			$pattern = '#<hr\s+id=("|\')system-readmore("|\')\s*\/*>#i';			$tagPos = preg_match($pattern, $array['articletext']);			if ($tagPos == 0)			{				$this->introtext = $array['articletext'];				$this->fulltext = '';			}			else			{				list ($this->introtext, $this->fulltext) = preg_split($pattern, $array['articletext'], 2);			}		}		if (isset($array['attribs']) && is_array($array['attribs']))		{			$registry = new JRegistry;			$registry->loadArray($array['attribs']);			$array['attribs'] = (string) $registry;		}		if (isset($array['metadata']) && is_array($array['metadata']))		{			$registry = new JRegistry;			$registry->loadArray($array['metadata']);			$array['metadata'] = (string) $registry;		}		// Bind the rules.		if (isset($array['rules']) && is_array($array['rules']))		{			$rules = new JAccessRules($array['rules']);			$this->setRules($rules);		}		return parent::bind($array, $ignore);	}	/**	 * Overloaded check function	 *	 * @return  boolean  True on success, false on failure	 *	 * @see     JTable::check	 * @since   11.1	 */	public function check()	{		if (trim($this->title) == '')		{			$this->setError(JText::_('COM_CONTENT_WARNING_PROVIDE_VALID_NAME'));			return false;		}		if (trim($this->alias) == '')		{			$this->alias = $this->title;		}		$this->alias = JApplication::stringURLSafe($this->alias);		if (trim(str_replace('-', '', $this->alias)) == '')		{			$this->alias = JFactory::getDate()->format('Y-m-d-H-i-s');		}		if (trim(str_replace('&nbsp;', '', $this->fulltext)) == '')		{			$this->fulltext = '';		}		// Check the publish down date is not earlier than publish up.		if ($this->publish_down > $this->_db->getNullDate() && $this->publish_down < $this->publish_up)		{			// Swap the dates.			$temp = $this->publish_up;			$this->publish_up = $this->publish_down;			$this->publish_down = $temp;		}		// Clean up keywords -- eliminate extra spaces between phrases		// and cr (\r) and lf (\n) characters from string		if (!empty($this->metakey))		{			// Only process if not empty			// Array of characters to remove			$bad_characters = array("\n", "\r", "\"", "<", ">");			// Remove bad characters			$after_clean = JString::str_ireplace($bad_characters, "", $this->metakey);			// Create array using commas as delimiter			$keys = explode(',', $after_clean);			$clean_keys = array();			foreach ($keys as $key)			{				if (trim($key))				{					// Ignore blank keywords					$clean_keys[] = trim($key);				}			}			// Put array back together delimited by ", "			$this->metakey = implode(", ", $clean_keys);		}		return true;	}	/**	 * Override parent delete method to delete tags information.	 *	 * @param   integer  $pk  Primary key to delete.	 *	 * @return  boolean  True on success.	 *	 * @since   3.1	 * @throws  UnexpectedValueException	 */	public function delete($pk = null)	{		$result = parent::delete($pk);		$this->tagsHelper->typeAlias = 'com_content.article';		return $result && $this->tagsHelper->deleteTagData($this, $pk);	}	/**	 * Overrides JTable::store to set modified data and user id.	 *	 * @param   boolean  $updateNulls  True to update fields even if they are null.	 *	 * @return  boolean  True on success.	 *	 * @since   11.1	 */	public function store($updateNulls = false)	{		$date = JFactory::getDate();		$user = JFactory::getUser();		if ($this->id)		{			// Existing item			$this->modified = $date->toSql();			$this->modified_by = $user->get('id');		}		else		{			// New article. An article created and created_by field can be set by the user,			// so we don't touch either of these if they are set.			if (!(int) $this->created)			{				$this->created = $date->toSql();			}			if (empty($this->created_by))			{				$this->created_by = $user->get('id');			}		}		// Verify that the alias is unique		$table = JTable::getInstance('Content', 'JTable');		if ($table->load(array('alias' => $this->alias, 'catid' => $this->catid)) && ($table->id != $this->id || $this->id == 0))		{			$this->setError(JText::_('JLIB_DATABASE_ERROR_ARTICLE_UNIQUE_ALIAS'));			return false;		}		$this->tagsHelper->typeAlias = 'com_content.article';		$this->tagsHelper->preStoreProcess($this);		$result = parent::store($updateNulls);		return $result && $this->tagsHelper->postStoreProcess($this);	}	/**	 * Method to set the publishing state for a row or list of rows in the database	 * table. The method respects checked out rows by other users and will attempt	 * to checkin rows that it can after adjustments are made.	 *	 * @param   mixed    $pks     An optional array of primary key values to update.  If not set the instance property value is used.	 * @param   integer  $state   The publishing state. eg. [0 = unpublished, 1 = published]	 * @param   integer  $userId  The user id of the user performing the operation.	 *	 * @return  boolean  True on success.	 *	 * @since   11.1	 */	public function publish($pks = null, $state = 1, $userId = 0)	{		$k = $this->_tbl_key;		// Sanitize input.		JArrayHelper::toInteger($pks);		$userId = (int) $userId;		$state = (int) $state;		// If there are no primary keys set check to see if the instance key is set.		if (empty($pks))		{			if ($this->$k)			{				$pks = array($this->$k);			}			// Nothing to set publishing state on, return false.			else			{				$this->setError(JText::_('JLIB_DATABASE_ERROR_NO_ROWS_SELECTED'));				return false;			}		}		// Build the WHERE clause for the primary keys.		$where = $k . '=' . implode(' OR ' . $k . '=', $pks);		// Determine if there is checkin support for the table.		if (!property_exists($this, 'checked_out') || !property_exists($this, 'checked_out_time'))		{			$checkin = '';		}		else		{			$checkin = ' AND (checked_out = 0 OR checked_out = ' . (int) $userId . ')';		}		// Get the JDatabaseQuery object		$query = $this->_db->getQuery(true);		// Update the publishing state for rows with the given primary keys.		$query->update($this->_db->quoteName($this->_tbl))			->set($this->_db->quoteName('state') . ' = ' . (int) $state)			->where('(' . $where . ')' . $checkin);		$this->_db->setQuery($query);		try		{			$this->_db->execute();		}		catch (RuntimeException $e)		{			$this->setError($e->getMessage());			return false;		}		// If checkin is supported and all rows were adjusted, check them in.		if ($checkin && (count($pks) == $this->_db->getAffectedRows()))		{			// Checkin the rows.			foreach ($pks as $pk)			{				$this->checkin($pk);			}		}		// If the JTable instance value is in the list of primary keys that were set, set the instance.		if (in_array($this->$k, $pks))		{			$this->state = $state;		}		$this->setError('');		return true;	}}
<?php/** * @package     Joomla.Plugin * @subpackage  Content.finder * * @copyright   Copyright (C) 2005 - 2013 Open Source Matters, Inc. All rights reserved. * @license     GNU General Public License version 2 or later; see LICENSE.txt */defined('_JEXEC') or die;/** * Finder Content Plugin * * @package     Joomla.Plugin * @subpackage  Content.finder * @since       2.5 */class PlgContentFinder extends JPlugin{	/**	 * Finder after save content method	 * Article is passed by reference, but after the save, so no changes will be saved.	 * Method is called right after the content is saved	 *	 * @param   string  The context of the content passed to the plugin (added in 1.6)	 * @param   object		A JTableContent object	 * @param   bool		If the content has just been created	 * @since	2.5	 */	public function onContentAfterSave($context, $article, $isNew)	{		$dispatcher	= JEventDispatcher::getInstance();		JPluginHelper::importPlugin('finder');		// Trigger the onFinderAfterSave event.		$dispatcher->trigger('onFinderAfterSave', array($context, $article, $isNew));	}	/**	 * Finder before save content method	 * Article is passed by reference, but after the save, so no changes will be saved.	 * Method is called right after the content is saved	 *	 * @param   string  The context of the content passed to the plugin (added in 1.6)	 * @param   object		A JTableContent object	 * @param   bool		If the content is just about to be created	 * @since   2.5	 */	public function onContentBeforeSave($context, $article, $isNew)	{		$dispatcher	= JEventDispatcher::getInstance();		JPluginHelper::importPlugin('finder');		// Trigger the onFinderBeforeSave event.		$dispatcher->trigger('onFinderBeforeSave', array($context, $article, $isNew));	}	/**	 * Finder after delete content method	 * Article is passed by reference, but after the save, so no changes will be saved.	 * Method is called right after the content is saved	 *	 * @param   string  The context of the content passed to the plugin (added in 1.6)	 * @param   object		A JTableContent object	 * @since   2.5	 */	public function onContentAfterDelete($context, $article)	{		$dispatcher	= JEventDispatcher::getInstance();		JPluginHelper::importPlugin('finder');		// Trigger the onFinderAfterDelete event.		$dispatcher->trigger('onFinderAfterDelete', array($context, $article));	}	/**	 * Finder change state content method	 * Method to update the link information for items that have been changed	 * from outside the edit screen. This is fired when the item is published,	 * unpublished, archived, or unarchived from the list view.	 *	 * @param   string   $context  The context for the content passed to the plugin.	 * @param   array    $pks      A list of primary key ids of the content that has changed state.	 * @param   integer  $value    The value of the state that the content has been changed to.	 * @since   2.5	 */	public function onContentChangeState($context, $pks, $value)	{		$dispatcher	= JEventDispatcher::getInstance();		JPluginHelper::importPlugin('finder');		// Trigger the onFinderChangeState event.		$dispatcher->trigger('onFinderChangeState', array($context, $pks, $value));	}	/**	 * Finder change category state content method	 * Article is passed by reference, but after the save, so no changes will be saved.	 * Method is called right after the content is saved	 *	 * @param   string   $extension  The extension whose category has been updated.	 * @param   array    $pks        A list of primary key ids of the content that has changed state.	 * @param   integer  $value      The value of the state that the content has been changed to.	 * @since   2.5	 */	public function onCategoryChangeState($extension, $pks, $value)	{		$dispatcher	= JEventDispatcher::getInstance();		JPluginHelper::importPlugin('finder');		// Trigger the onFinderCategoryChangeState event.		$dispatcher->trigger('onFinderCategoryChangeState', array($extension, $pks, $value));	}}
<?php/** * @package     Joomla.Plugin * @subpackage  Search.newsfeeds * * @copyright   Copyright (C) 2005 - 2013 Open Source Matters, Inc. All rights reserved. * @license     GNU General Public License version 2 or later; see LICENSE.txt */defined('_JEXEC') or die;/** * Newsfeeds Search plugin * * @package     Joomla.Plugin * @subpackage  Search.newsfeeds * @since       1.6 */class PlgSearchNewsfeeds extends JPlugin{	/**	 * Load the language file on instantiation.	 *	 * @var    boolean	 * @since  3.1	 */	protected $autoloadLanguage = true;	/**	 * @return array An array of search areas	 */	public function onContentSearchAreas()	{		static $areas = array(			'newsfeeds' => 'PLG_SEARCH_NEWSFEEDS_NEWSFEEDS'		);		return $areas;	}	/**	 * Newsfeeds Search method	 *	 * The sql must return the following fields that are used in a common display	 * routine: href, title, section, created, text, browsernav	 * @param string Target search string	 * @param string mathcing option, exact|any|all	 * @param string ordering option, newest|oldest|popular|alpha|category	 * @param mixed  An array if the search it to be restricted to areas, null if search all	 */	public function onContentSearch($text, $phrase = '', $ordering = '', $areas = null)	{		$db = JFactory::getDbo();		$app = JFactory::getApplication();		$user = JFactory::getUser();		$groups = implode(',', $user->getAuthorisedViewLevels());		if (is_array($areas))		{			if (!array_intersect($areas, array_keys($this->onContentSearchAreas())))			{				return array();			}		}		$sContent = $this->params->get('search_content', 1);		$sArchived = $this->params->get('search_archived', 1);		$limit = $this->params->def('search_limit', 50);		$state = array();		if ($sContent)		{			$state[] = 1;		}		if ($sArchived)		{			$state[] = 2;		}		$text = trim($text);		if ($text == '')		{			return array();		}		switch ($phrase)		{			case 'exact':				$text = $db->quote('%' . $db->escape($text, true) . '%', false);				$wheres2 = array();				$wheres2[] = 'a.name LIKE ' . $text;				$wheres2[] = 'a.link LIKE ' . $text;				$where = '(' . implode(') OR (', $wheres2) . ')';				break;			case 'all':			case 'any':			default:				$words = explode(' ', $text);				$wheres = array();				foreach ($words as $word)				{					$word = $db->quote('%' . $db->escape($word, true) . '%', false);					$wheres2 = array();					$wheres2[] = 'a.name LIKE ' . $word;					$wheres2[] = 'a.link LIKE ' . $word;					$wheres[] = implode(' OR ', $wheres2);				}				$where = '(' . implode(($phrase == 'all' ? ') AND (' : ') OR ('), $wheres) . ')';				break;		}		switch ($ordering)		{			case 'alpha':				$order = 'a.name ASC';				break;			case 'category':				$order = 'c.title ASC, a.name ASC';				break;			case 'oldest':			case 'popular':			case 'newest':			default:				$order = 'a.name ASC';		}		$searchNewsfeeds = JText::_('PLG_SEARCH_NEWSFEEDS_NEWSFEEDS');		$rows = array();		if (!empty($state))		{			$query = $db->getQuery(true);			//sqlsrv changes			$case_when = ' CASE WHEN ';			$case_when .= $query->charLength('a.alias', '!=', '0');			$case_when .= ' THEN ';			$a_id = $query->castAsChar('a.id');			$case_when .= $query->concatenate(array($a_id, 'a.alias'), ':');			$case_when .= ' ELSE ';			$case_when .= $a_id . ' END as slug';			$case_when1 = ' CASE WHEN ';			$case_when1 .= $query->charLength('c.alias', '!=', '0');			$case_when1 .= ' THEN ';			$c_id = $query->castAsChar('c.id');			$case_when1 .= $query->concatenate(array($c_id, 'c.alias'), ':');			$case_when1 .= ' ELSE ';			$case_when1 .= $c_id . ' END as catslug';			$query->select('a.name AS title, \'\' AS created, a.link AS text, ' . $case_when . "," . $case_when1)				->select($query->concatenate(array($db->quote($searchNewsfeeds), 'c.title'), " / ") . ' AS section')				->select('\'1\' AS browsernav')				->from('#__newsfeeds AS a')				->join('INNER', '#__categories as c ON c.id = a.catid')				->where('(' . $where . ')AND a.published IN (' . implode(',', $state) . ') AND c.published = 1 AND c.access IN (' . $groups . ')')				->order($order);			// Filter by language			if ($app->isSite() && JLanguageMultilang::isEnabled())			{				$tag = JFactory::getLanguage()->getTag();				$query->where('a.language in (' . $db->quote($tag) . ',' . $db->quote('*') . ')')					->where('c.language in (' . $db->quote($tag) . ',' . $db->quote('*') . ')');			}			$db->setQuery($query, 0, $limit);			$rows = $db->loadObjectList();			if ($rows)			{				foreach ($rows as $key => $row)				{					$rows[$key]->href = 'index.php?option=com_newsfeeds&view=newsfeed&catid=' . $row->catslug . '&id=' . $row->slug;				}			}		}		return $rows;	}}
<?php/** * @package     Joomla.Libraries * @subpackage  Schema * * @copyright   Copyright (C) 2005 - 2013 Open Source Matters, Inc. All rights reserved. * @license     GNU General Public License version 2 or later; see LICENSE */defined('_JEXEC') or die;/** * Checks the database schema against one SQL Server DDL query to see if it has been run. * * @package     Joomla.Libraries * @subpackage  Schema * @since       2.5 */class JSchemaChangeitemSqlsrv extends JSchemaChangeitem{	/**	 * Checks a DDL query to see if it is a known type	 * If yes, build a check query to see if the DDL has been run on the database.	 * If successful, the $msgElements, $queryType, $checkStatus and $checkQuery fields are populated.	 * The $msgElements contains the text to create the user message.	 * The $checkQuery contains the SQL query to check whether the schema change has	 * been run against the current database. The $queryType contains the type of	 * DDL query that was run (for example, CREATE_TABLE, ADD_COLUMN, CHANGE_COLUMN_TYPE, ADD_INDEX).	 * The $checkStatus field is set to zero if the query is created	 *	 * If not successful, $checkQuery is empty and , and $checkStatus is -1.	 * For example, this will happen if the current line is a non-DDL statement.	 *	 * @return void	 *	 * @since  2.5	 */	protected function buildCheckQuery()	{		// Initialize fields in case we can't create a check query		$this->checkStatus = -1; // change status to skipped		$result = null;		// Remove any newlines		$this->updateQuery = str_replace("\n", '', $this->updateQuery);		// Fix up extra spaces around () and in general		$find = array('#((\s*)\(\s*([^)\s]+)\s*)(\))#', '#(\s)(\s*)#');		$replace = array('($3)', '$1');		$updateQuery = preg_replace($find, $replace, $this->updateQuery);		$wordArray = explode(' ', $updateQuery);		// First, make sure we have an array of at least 6 elements		// if not, we can't make a check query for this one		if (count($wordArray) < 6)		{			// Done with method			return;		}		// We can only make check queries for alter table and create table queries		$command = strtoupper($wordArray[0] . ' ' . $wordArray[1]);		if ($command === 'ALTER TABLE')		{			$alterCommand = strtoupper($wordArray[3] . ' ' . $wordArray[4]);			if ($alterCommand == 'ADD')			{				$result = 'SELECT * FROM INFORMATION_SCHEMA.Columns ' . $wordArray[2] . ' WHERE COLUMN_NAME = ' . $this->fixQuote($wordArray[5]);				$this->queryType = 'ADD';				$this->msgElements = array($this->fixQuote($wordArray[2]), $this->fixQuote($wordArray[5]));			}			elseif ($alterCommand == 'CREATE INDEX')			{				$index = $this->fixQuote(substr($wordArray[5], 0, strpos($wordArray[5], '(')));				$result = 'SELECT * FROM SYS.INDEXES ' . $wordArray[2] . ' WHERE name = ' . $index;				$this->queryType = 'CREATE INDEX';				$this->msgElements = array($this->fixQuote($wordArray[2]), $index);			}			elseif (strtoupper($wordArray[3]) == 'MODIFY')			{				$type = $this->fixQuote($wordArray[5]);				if (isset($wordArray[6]))				{					$type = $this->fixQuote($this->fixInteger($wordArray[5], $wordArray[6]));				}				$result = 'SELECT COLUMN_NAME FROM INFORMATION_SCHEMA.COLUMNS  WHERE table_name = ' . $this->fixQuote($wordArray[2]);				$this->queryType = 'ALTER COLUMN COLUMN_NAME =' . $this->fixQuote($wordArray[4]);				$this->msgElements = array($this->fixQuote($wordArray[2]), $this->fixQuote($wordArray[4]));			}			elseif (strtoupper($wordArray[3]) == 'CHANGE')			{				// Kludge to fix problem with "integer unsigned"				$type = $this->fixQuote($this->fixInteger($wordArray[6], $wordArray[7]));				$result = 'SELECT COLUMN_NAME FROM INFORMATION_SCHEMA.COLUMNS  WHERE table_name = ' . $this->fixQuote($wordArray[2]);				$this->fixQuote($wordArray[4]);				$this->queryType = 'ALTER COLUMN COLUMN_NAME =' . $this->fixQuote($wordArray[4]);				$this->msgElements = array($this->fixQuote($wordArray[2]), $this->fixQuote($wordArray[4]));			}		}		if ($command == 'CREATE TABLE')		{			$table = $wordArray[5];			$result = 'SELECT * FROM sys.TABLES WHERE NAME = ' . $this->fixQuote($table);			$this->queryType = 'CREATE_TABLE';			$this->msgElements = array($this->fixQuote($table));		}		// Set fields based on results		if ($this->checkQuery = $result)		{			// Unchecked status			$this->checkStatus = 0;		}		else		{			// Skipped			$this->checkStatus = -1;		}	}	/**	 * Fix up integer. Fixes problem with MySQL integer descriptions.	 * If you change a column to "integer unsigned" it shows	 * as "int(10) unsigned" in the check query.	 *	 * @param   string  $type1  the column type	 * @param   string  $type2  the column attributes	 *	 * @return  string  The original or changed column type.	 *	 * @since   2.5	 */	private function fixInteger($type1, $type2)	{		$result = $type1;		if (strtolower($type1) == 'integer' && strtolower(substr($type2, 0, 8)) == 'unsigned')		{			$result = 'int';		}		return $result;	}	/**	 * Fixes up a string for inclusion in a query.	 * Replaces name quote character with normal quote for literal.	 * Drops trailing semi-colon. Injects the database prefix.	 *	 * @param   string  $string  The input string to be cleaned up.	 *	 * @return  string  The modified string.	 *	 * @since   2.5	 */	private function fixQuote($string)	{		$string = str_replace('`', '', $string);		$string = str_replace(';', '', $string);		$string = str_replace('#__', $this->db->getPrefix(), $string);		return $this->db->quote($string);	}}
<?php/** * @package     Joomla.Libraries * @subpackage  Schema * * @copyright   Copyright (C) 2005 - 2013 Open Source Matters, Inc. All rights reserved. * @license     GNU General Public License version 2 or later; see LICENSE */defined('JPATH_PLATFORM') or die;jimport('joomla.filesystem.folder');/** * Contains a set of JSchemaChange objects for a particular instance of Joomla. * Each of these objects contains a DDL query that should have been run against * the database when this database was created or updated. This enables the * Installation Manager to check that the current database schema is up to date. * * @package     Joomla.Libraries * @subpackage  Schema * @since       2.5 */class JSchemaChangeset{	/**	 * Array of JSchemaChangeitem objects	 *	 * @var    array	 * @since  2.5	 */	protected $changeItems = array();	/**	 * JDatabaseDriver object	 *	 * @var    JDatabaseDriver	 * @since  2.5	 */	protected $db = null;	/**	 * Folder where SQL update files will be found	 *	 * @var    string	 */	protected $folder = null;	/**	 * Constructor: builds array of $changeItems by processing the .sql files in a folder.	 * The folder for the Joomla core updates is administrator/components/com_admin/sql/updates/<database>.	 *	 * @param   JDatabaseDriver  $db      The current database object	 * @param   string           $folder  The full path to the folder containing the update queries	 *	 * @since   2.5	 */	public function __construct($db, $folder = null)	{		$this->db = $db;		$this->folder = $folder;		$updateFiles = $this->getUpdateFiles();		$updateQueries = $this->getUpdateQueries($updateFiles);		foreach ($updateQueries as $obj)		{			$this->changeItems[] = JSchemaChangeitem::getInstance($db, $obj->file, $obj->updateQuery);		}	}	/**	 * Returns a reference to the JSchemaChangeset object, only creating it if it doesn't already exist.	 *	 * @param   JDatabaseDriver  $db      The current database object	 * @param   string           $folder  The full path to the folder containing the update queries	 *	 * @return  JSchemaChangeset	 *	 * @since   2.5	 */	public static function getInstance($db, $folder)	{		static $instance;		if (!is_object($instance))		{			$instance = new JSchemaChangeset($db, $folder);		}		return $instance;	}	/**	 * Checks the database and returns an array of any errors found.	 * Note these are not database errors but rather situations where	 * the current schema is not up to date.	 *	 * @return   array Array of errors if any.	 *	 * @since    2.5	 */	public function check()	{		$errors = array();		foreach ($this->changeItems as $item)		{			if ($item->check() === -2)			{				// Error found				$errors[] = $item;			}		}		return $errors;	}	/**	 * Runs the update query to apply the change to the database	 *	 * @return  void	 *	 * @since   2.5	 */	public function fix()	{		$this->check();		foreach ($this->changeItems as $item)		{			$item->fix();		}	}	/**	* Returns an array of results for this set	*	* @return  array  associative array of changeitems grouped by unchecked, ok, error, and skipped	*	* @since   2.5	*/	public function getStatus()	{		$result = array('unchecked' => array(), 'ok' => array(), 'error' => array(), 'skipped' => array());		foreach ($this->changeItems as $item)		{			switch ($item->checkStatus)			{				case 0:					$result['unchecked'][] = $item;					break;				case 1:					$result['ok'][] = $item;					break;				case -2:					$result['error'][] = $item;					break;				case -1:					$result['skipped'][] = $item;					break;			}		}		return $result;	}	/**	 * Gets the current database schema, based on the highest version number.	 * Note that the .sql files are named based on the version and date, so	 * the file name of the last file should match the database schema version	 * in the #__schemas table.	 *	 * @return  string  the schema version for the database	 *	 * @since   2.5	 */	public function getSchema()	{		$updateFiles = $this->getUpdateFiles();		$result = new SplFileInfo(array_pop($updateFiles));		return $result->getBasename('.sql');	}	/**	 * Get list of SQL update files for this database	 *	 * @return  array  list of sql update full-path names	 *	 * @since   2.5	 */	private function getUpdateFiles()	{		// Get the folder from the database name		$sqlFolder = $this->db->name;		if ($sqlFolder == 'mysqli')		{			$sqlFolder = 'mysql';		}		elseif ($sqlFolder == 'sqlsrv')		{			$sqlFolder = 'sqlazure';		}		// Default folder to core com_admin		if (!$this->folder)		{			$this->folder = JPATH_ADMINISTRATOR . '/components/com_admin/sql/updates/';		}		return JFolder::files($this->folder . '/' . $sqlFolder, '\.sql$', 1, true);	}	/**	 * Get array of SQL queries	 *	 * @param   array  $sqlfiles  Array of .sql update filenames.	 *	 * @return  array  Array of stdClass objects where:	 *                    file=filename,	 *                    update_query = text of SQL update query	 *	 * @since   2.5	 */	private function getUpdateQueries(array $sqlfiles)	{		// Hold results as array of objects		$result = array();		foreach ($sqlfiles as $file)		{			$buffer = file_get_contents($file);			// Create an array of queries from the sql file			$queries = JDatabaseDriver::splitSql($buffer);			foreach ($queries as $query)			{				if (trim($query))				{					$fileQueries = new stdClass;					$fileQueries->file = $file;					$fileQueries->updateQuery = $query;					$result[] = $fileQueries;				}			}		}		return $result;	}}
<?php/** * @package     Joomla.Administrator * @subpackage  com_categories * * @copyright   Copyright (C) 2005 - 2013 Open Source Matters, Inc. All rights reserved. * @license     GNU General Public License version 2 or later; see LICENSE.txt */defined('_JEXEC') or die;/** * Categories view class for the Category package. * * @package     Joomla.Administrator * @subpackage  com_categories * @since       1.6 */class CategoriesViewCategories extends JViewLegacy{	protected $items;	protected $pagination;	protected $state;	protected $assoc;	/**	 * Display the view	 */	public function display($tpl = null)	{		$this->state		= $this->get('State');		$this->items		= $this->get('Items');		$this->pagination	= $this->get('Pagination');		$this->assoc		= $this->get('Assoc');		// Check for errors.		if (count($errors = $this->get('Errors')))		{			JError::raiseError(500, implode("\n", $errors));			return false;		}		// Preprocess the list of items to find ordering divisions.		foreach ($this->items as &$item)		{			$this->ordering[$item->parent_id][] = $item->id;		}		// Levels filter.		$options	= array();		$options[]	= JHtml::_('select.option', '1', JText::_('J1'));		$options[]	= JHtml::_('select.option', '2', JText::_('J2'));		$options[]	= JHtml::_('select.option', '3', JText::_('J3'));		$options[]	= JHtml::_('select.option', '4', JText::_('J4'));		$options[]	= JHtml::_('select.option', '5', JText::_('J5'));		$options[]	= JHtml::_('select.option', '6', JText::_('J6'));		$options[]	= JHtml::_('select.option', '7', JText::_('J7'));		$options[]	= JHtml::_('select.option', '8', JText::_('J8'));		$options[]	= JHtml::_('select.option', '9', JText::_('J9'));		$options[]	= JHtml::_('select.option', '10', JText::_('J10'));		$this->f_levels = $options;		$this->addToolbar();		$this->sidebar = JHtmlSidebar::render();		parent::display($tpl);	}	/**	 * Add the page title and toolbar.	 *	 * @since   1.6	 */	protected function addToolbar()	{		$categoryId	= $this->state->get('filter.category_id');		$component	= $this->state->get('filter.component');		$section	= $this->state->get('filter.section');		$canDo		= null;		$user		= JFactory::getUser();		// Get the toolbar object instance		$bar = JToolBar::getInstance('toolbar');		// Avoid nonsense situation.		if ($component == 'com_categories')		{			return;		}		// Need to load the menu language file as mod_menu hasn't been loaded yet.		$lang = JFactory::getLanguage();			$lang->load($component, JPATH_BASE, null, false, false)		||	$lang->load($component, JPATH_ADMINISTRATOR.'/components/'.$component, null, false, false)		||	$lang->load($component, JPATH_BASE, $lang->getDefault(), false, false)		||	$lang->load($component, JPATH_ADMINISTRATOR.'/components/'.$component, $lang->getDefault(), false, false);		// Load the category helper.		require_once JPATH_COMPONENT.'/helpers/categories.php';		// Get the results for each action.		$canDo = CategoriesHelper::getActions($component, $categoryId);		// If a component categories title string is present, let's use it.		if ($lang->hasKey($component_title_key = strtoupper($component.($section?"_$section":'')).'_CATEGORIES_TITLE'))		{			$title = JText::_($component_title_key);		}		// Else if the component section string exits, let's use it		elseif ($lang->hasKey($component_section_key = strtoupper($component.($section?"_$section":''))))		{			$title = JText::sprintf('COM_CATEGORIES_CATEGORIES_TITLE', $this->escape(JText::_($component_section_key)));		}		// Else use the base title		else		{			$title = JText::_('COM_CATEGORIES_CATEGORIES_BASE_TITLE');		}		// Load specific css component		JHtml::_('stylesheet', $component.'/administrator/categories.css', array(), true);		// Prepare the toolbar.		JToolbarHelper::title($title, 'categories '.substr($component, 4).($section?"-$section":'').'-categories');		if ($canDo->get('core.create') || (count($user->getAuthorisedCategories($component, 'core.create'))) > 0 )		{			JToolbarHelper::addNew('category.add');		}		if ($canDo->get('core.edit') || $canDo->get('core.edit.own'))		{			JToolbarHelper::editList('category.edit');		}		if ($canDo->get('core.edit.state'))		{			JToolbarHelper::publish('categories.publish', 'JTOOLBAR_PUBLISH', true);			JToolbarHelper::unpublish('categories.unpublish', 'JTOOLBAR_UNPUBLISH', true);			JToolbarHelper::archiveList('categories.archive');		}		if (JFactory::getUser()->authorise('core.admin'))		{			JToolbarHelper::checkin('categories.checkin');		}		if ($this->state->get('filter.published') == -2 && $canDo->get('core.delete', $component))		{			JToolbarHelper::deleteList('', 'categories.delete', 'JTOOLBAR_EMPTY_TRASH');		}		elseif ($canDo->get('core.edit.state'))		{			JToolbarHelper::trash('categories.trash');		}		// Add a batch button		if ($canDo->get('core.edit'))		{			JHtml::_('bootstrap.modal', 'collapseModal');			$title = JText::_('JTOOLBAR_BATCH');			$dhtml = "<button data-toggle=\"modal\" data-target=\"#collapseModal\" class=\"btn btn-small\">						<i class=\"icon-checkbox-partial\" title=\"$title\"></i>						$title</button>";			$bar->appendButton('Custom', $dhtml, 'batch');		}		if ($canDo->get('core.admin'))		{			JToolbarHelper::custom('categories.rebuild', 'refresh.png', 'refresh_f2.png', 'JTOOLBAR_REBUILD', false);			JToolbarHelper::preferences($component);		}		// Compute the ref_key if it does exist in the component		if (!$lang->hasKey($ref_key = strtoupper($component.($section?"_$section":'')).'_CATEGORIES_HELP_KEY'))		{			$ref_key = 'JHELP_COMPONENTS_'.strtoupper(substr($component, 4).($section?"_$section":'')).'_CATEGORIES';		}		// Get help for the categories view for the component by		// -remotely searching in a language defined dedicated URL: *component*_HELP_URL		// -locally  searching in a component help file if helpURL param exists in the component and is set to ''		// -remotely searching in a component URL if helpURL param exists in the component and is NOT set to ''		if ($lang->hasKey($lang_help_url = strtoupper($component).'_HELP_URL'))		{			$debug = $lang->setDebug(false);			$url = JText::_($lang_help_url);			$lang->setDebug($debug);		}		else		{			$url = null;		}		JToolbarHelper::help($ref_key, JComponentHelper::getParams($component)->exists('helpURL'), $url);		JHtmlSidebar::setAction('index.php?option=com_categories&view=categories');		JHtmlSidebar::addFilter(			JText::_('JOPTION_SELECT_MAX_LEVELS'),			'filter_level',			JHtml::_('select.options', $this->f_levels, 'value', 'text', $this->state->get('filter.level'))		);		JHtmlSidebar::addFilter(			JText::_('JOPTION_SELECT_PUBLISHED'),			'filter_published',			JHtml::_('select.options', JHtml::_('jgrid.publishedOptions'), 'value', 'text', $this->state->get('filter.published'), true)		);		JHtmlSidebar::addFilter(			JText::_('JOPTION_SELECT_ACCESS'),			'filter_access',			JHtml::_('select.options', JHtml::_('access.assetgroups'), 'value', 'text', $this->state->get('filter.access'))		);		JHtmlSidebar::addFilter(			JText::_('JOPTION_SELECT_LANGUAGE'),			'filter_language',			JHtml::_('select.options', JHtml::_('contentlanguage.existing', true, true), 'value', 'text', $this->state->get('filter.language'))		);		JHtmlSidebar::addFilter(		'-' . JText::_('JSELECT') . ' ' . JText::_('JTAG') . '-',		'filter_tag',		JHtml::_('select.options', JHtml::_('tag.options', true, true), 'value', 'text', $this->state->get('filter.tag'))		);	}	/**	 * Returns an array of fields the table can be sorted by	 *	 * @return  array  Array containing the field name to sort by as the key and display text as value	 *	 * @since   3.0	 */	protected function getSortFields()	{		return array(			'a.lft' => JText::_('JGRID_HEADING_ORDERING'),			'a.state' => JText::_('JSTATUS'),			'a.title' => JText::_('JGLOBAL_TITLE'),			'a.access' => JText::_('JGRID_HEADING_ACCESS'),			'language' => JText::_('JGRID_HEADING_LANGUAGE'),			'a.id' => JText::_('JGRID_HEADING_ID')		);	}}
<?php/** * @package     Joomla.Site * @subpackage  com_weblinks * * @copyright   Copyright (C) 2005 - 2013 Open Source Matters, Inc. All rights reserved. * @license     GNU General Public License version 2 or later; see LICENSE.txt */defined('_JEXEC') or die;/** * @package     Joomla.Site * @subpackage  com_weblinks * @since       1.5 */class WeblinksControllerWeblink extends JControllerForm{	/**	 * @since   1.6	 */	protected $view_item = 'form';	/**	 * @since   1.6	 */	protected $view_list = 'categories';	/**	 * Method to add a new record.	 *	 * @return  boolean  True if the article can be added, false if not.	 * @since   1.6	 */	public function add()	{		if (!parent::add())		{			// Redirect to the return page.			$this->setRedirect($this->getReturnPage());		}	}	/**	 * Method override to check if you can add a new record.	 *	 * @param   array  $data	An array of input data.	 * @return  boolean	 * @since   1.6	 */	protected function allowAdd($data = array())	{		$user		= JFactory::getUser();		$categoryId	= JArrayHelper::getValue($data, 'catid', $this->input->getInt('id'), 'int');		$allow		= null;		if ($categoryId)		{			// If the category has been passed in the URL check it.			$allow	= $user->authorise('core.create', $this->option.'.category.'.$categoryId);		}		if ($allow === null)		{			// In the absense of better information, revert to the component permissions.			return parent::allowAdd($data);		}		else		{			return $allow;		}	}	/**	 * Method to check if you can add a new record.	 *	 * @param   array  $data	An array of input data.	 * @param   string	$key	The name of the key for the primary key.	 *	 * @return  boolean	 * @since   1.6	 */	protected function allowEdit($data = array(), $key = 'id')	{		$recordId	= (int) isset($data[$key]) ? $data[$key] : 0;		$categoryId = 0;		if ($recordId)		{			$categoryId = (int) $this->getModel()->getItem($recordId)->catid;		}		if ($categoryId)		{			// The category has been set. Check the category permissions.			return JFactory::getUser()->authorise('core.edit', $this->option.'.category.'.$categoryId);		}		else		{			// Since there is no asset tracking, revert to the component permissions.			return parent::allowEdit($data, $key);		}	}	/**	 * Method to cancel an edit.	 *	 * @param   string	$key	The name of the primary key of the URL variable.	 *	 * @return  Boolean	True if access level checks pass, false otherwise.	 * @since   1.6	 */	public function cancel($key = 'w_id')	{		parent::cancel($key);		// Redirect to the return page.		$this->setRedirect($this->getReturnPage());	}	/**	 * Method to edit an existing record.	 *	 * @param   string	$key	The name of the primary key of the URL variable.	 * @param   string	$urlVar	The name of the URL variable if different from the primary key (sometimes required to avoid router collisions).	 *	 * @return  Boolean	True if access level check and checkout passes, false otherwise.	 * @since   1.6	 */	public function edit($key = null, $urlVar = 'w_id')	{		$result = parent::edit($key, $urlVar);		return $result;	}	/**	 * Method to get a model object, loading it if required.	 *	 * @param   string	$name	The model name. Optional.	 * @param   string	$prefix	The class prefix. Optional.	 * @param   array  $config	Configuration array for model. Optional.	 *	 * @return  object  The model.	 * @since   1.5	 */	public function getModel($name = 'form', $prefix = '', $config = array('ignore_request' => true))	{		$model = parent::getModel($name, $prefix, $config);		return $model;	}	/**	 * Gets the URL arguments to append to an item redirect.	 *	 * @param   integer  $recordId	The primary key id for the item.	 * @param   string	$urlVar		The name of the URL variable for the id.	 *	 * @return  string	The arguments to append to the redirect URL.	 * @since   1.6	 */	protected function getRedirectToItemAppend($recordId = null, $urlVar = null)	{		$append = parent::getRedirectToItemAppend($recordId, $urlVar);		$itemId	= $this->input->getInt('Itemid');		$return	= $this->getReturnPage();		if ($itemId)		{			$append .= '&Itemid='.$itemId;		}		if ($return)		{			$append .= '&return='.base64_encode($return);		}		return $append;	}	/**	 * Get the return URL.	 *	 * If a "return" variable has been passed in the request	 *	 * @return  string	The return URL.	 * @since   1.6	 */	protected function getReturnPage()	{		$return = $this->input->get('return', null, 'base64');		if (empty($return) || !JUri::isInternal(base64_decode($return)))		{			return JURI::base();		}		else		{			return base64_decode($return);		}	}	/**	 * Function that allows child controller access to model data after the data has been saved.	 *	 * @param   JModelLegacy  $model      The data model object.	 * @param   array         $validData  The validated data.	 *	 * @return  void	 * @since   1.6	 */	protected function postSaveHook(JModelLegacy $model, $validData = array())	{			$task = $this->getTask();	}	/**	 * Method to save a record.	 *	 * @param   string	$key	The name of the primary key of the URL variable.	 * @param   string	$urlVar	The name of the URL variable if different from the primary key (sometimes required to avoid router collisions).	 *	 * @return  Boolean	True if successful, false otherwise.	 * @since   1.6	 */	public function save($key = null, $urlVar = 'w_id')	{		$result = parent::save($key, $urlVar);		// If ok, redirect to the return page.		if ($result)		{			$this->setRedirect($this->getReturnPage());		}		$model = $this->getModel();		return $result;	}	/**	 * Go to a weblink	 *	 * @return  void	 * @since   1.6	 */	public function go()	{		// Get the ID from the request		$id = $this->input->getInt('id');		// Get the model, requiring published items		$modelLink	= $this->getModel('Weblink', '', array('ignore_request' => true));		$modelLink->setState('filter.published', 1);		// Get the item		$link	= $modelLink->getItem($id);		// Make sure the item was found.		if (empty($link))		{			return JError::raiseWarning(404, JText::_('COM_WEBLINKS_ERROR_WEBLINK_NOT_FOUND'));		}		// Check whether item access level allows access.		$user	= JFactory::getUser();		$groups	= $user->getAuthorisedViewLevels();		if (!in_array($link->access, $groups))		{			return JError::raiseError(403, JText::_('JERROR_ALERTNOAUTHOR'));		}		// Check whether category access level allows access.		$modelCat = $this->getModel('Category', 'WeblinksModel', array('ignore_request' => true));		$modelCat->setState('filter.published', 1);		// Get the category		$category = $modelCat->getCategory($link->catid);		// Make sure the category was found.		if (empty($category))		{			return JError::raiseWarning(404, JText::_('COM_WEBLINKS_ERROR_WEBLINK_NOT_FOUND'));		}		// Check whether item access level allows access.		if (!in_array($category->access, $groups))		{			return JError::raiseError(403, JText::_('JERROR_ALERTNOAUTHOR'));		}		// Redirect to the URL		// TODO: Probably should check for a valid http link		if ($link->url)		{			$modelLink->hit($id);			JFactory::getApplication()->redirect($link->url);		}		else		{			return JError::raiseWarning(404, JText::_('COM_WEBLINKS_ERROR_WEBLINK_URL_INVALID'));		}	}}
<?php/** * @package     Joomla.Administrator * @subpackage  com_modules * * @copyright   Copyright (C) 2005 - 2013 Open Source Matters, Inc. All rights reserved. * @license     GNU General Public License version 2 or later; see LICENSE.txt */defined('_JEXEC') or die;JHtml::_('bootstrap.tooltip');JHtml::_('behavior.multiselect');JHtml::_('dropdown.init');JHtml::_('formbehavior.chosen', 'select');$client		= $this->state->get('filter.client_id') ? 'administrator' : 'site';$user		= JFactory::getUser();$listOrder	= $this->escape($this->state->get('list.ordering'));$listDirn	= $this->escape($this->state->get('list.direction'));$trashed	= $this->state->get('filter.published') == -2 ? true : false;$canOrder	= $user->authorise('core.edit.state', 'com_modules');$saveOrder	= $listOrder == 'ordering';if ($saveOrder){	$saveOrderingUrl = 'index.php?option=com_modules&task=modules.saveOrderAjax&tmpl=component';	JHtml::_('sortablelist.sortable', 'articleList', 'adminForm', strtolower($listDirn), $saveOrderingUrl);}$sortFields = $this->getSortFields();?><script type="text/javascript">	Joomla.orderTable = function()	{		table = document.getElementById("sortTable");		direction = document.getElementById("directionTable");		order = table.options[table.selectedIndex].value;		if (order != '<?php echo $listOrder; ?>')		{			dirn = 'asc';		}		else		{			dirn = direction.options[direction.selectedIndex].value;		}		Joomla.tableOrdering(order, dirn, '');	}</script><form action="<?php echo JRoute::_('index.php?option=com_modules'); ?>" method="post" name="adminForm" id="adminForm"><?php if (!empty( $this->sidebar)) : ?>	<div id="j-sidebar-container" class="span2">		<?php echo $this->sidebar; ?>	</div>	<div id="j-main-container" class="span10"><?php else : ?>	<div id="j-main-container"><?php endif;?>		<div id="filter-bar" class="btn-toolbar">			<div class="filter-search btn-group pull-left">				<label for="filter_search" class="element-invisible"><?php echo JText::_('COM_BANNERS_SEARCH_IN_TITLE');?></label>				<input type="text" name="filter_search" id="filter_search" placeholder="<?php echo JText::_('COM_MODULES_MODULES_FILTER_SEARCH_DESC'); ?>" value="<?php echo $this->escape($this->state->get('filter.search')); ?>" title="<?php echo JText::_('COM_MODULES_MODULES_FILTER_SEARCH_DESC'); ?>" />			</div>			<div class="btn-group pull-left hidden-phone">				<button class="btn hasTooltip" type="submit" title="<?php echo JText::_('JSEARCH_FILTER_SUBMIT'); ?>"><i class="icon-search"></i></button>				<button class="btn hasTooltip" type="button" title="<?php echo JText::_('JSEARCH_FILTER_CLEAR'); ?>" onclick="document.id('filter_search').value='';this.form.submit();"><i class="icon-remove"></i></button>			</div>			<div class="btn-group pull-right hidden-phone">				<label for="limit" class="element-invisible"><?php echo JText::_('JFIELD_PLG_SEARCH_SEARCHLIMIT_DESC');?></label>				<?php echo $this->pagination->getLimitBox(); ?>			</div>			<div class="btn-group pull-right hidden-phone">				<label for="directionTable" class="element-invisible"><?php echo JText::_('JFIELD_ORDERING_DESC');?></label>				<select name="directionTable" id="directionTable" class="input-medium" onchange="Joomla.orderTable()">					<option value=""><?php echo JText::_('JFIELD_ORDERING_DESC');?></option>					<option value="asc" <?php if ($listDirn == 'asc') echo 'selected="selected"'; ?>><?php echo JText::_('JGLOBAL_ORDER_ASCENDING');?></option>					<option value="desc" <?php if ($listDirn == 'desc') echo 'selected="selected"'; ?>><?php echo JText::_('JGLOBAL_ORDER_DESCENDING');?></option>				</select>			</div>			<div class="btn-group pull-right">				<label for="sortTable" class="element-invisible"><?php echo JText::_('JGLOBAL_SORT_BY');?></label>				<select name="sortTable" id="sortTable" class="input-medium" onchange="Joomla.orderTable()">					<option value=""><?php echo JText::_('JGLOBAL_SORT_BY');?></option>					<?php echo JHtml::_('select.options', $sortFields, 'value', 'text', $listOrder);?>				</select>			</div>		</div>		<div class="clearfix"> </div>		<table class="table table-striped" id="articleList">			<thead>				<tr>					<th width="1%" class="nowrap center hidden-phone">						<?php echo JHtml::_('grid.sort', '<i class="icon-menu-2"></i>', 'ordering', $listDirn, $listOrder, null, 'asc', 'JGRID_HEADING_ORDERING'); ?>					</th>					<th width="1%" class="hidden-phone">						<input type="checkbox" name="checkall-toggle" value="" title="<?php echo JText::_('JGLOBAL_CHECK_ALL'); ?>" onclick="Joomla.checkAll(this)" />					</th>					<th width="1%" class="nowrap center">						<?php echo JHtml::_('grid.sort', 'JSTATUS', 'a.published', $listDirn, $listOrder); ?>					</th>					<th class="title">						<?php echo JHtml::_('grid.sort', 'JGLOBAL_TITLE', 'a.title', $listDirn, $listOrder); ?>					</th>					<th width="15%" class="nowrap hidden-phone">						<?php echo JHtml::_('grid.sort', 'COM_MODULES_HEADING_POSITION', 'position', $listDirn, $listOrder); ?>					</th>					<th width="10%" class="nowrap hidden-phone" >						<?php echo JHtml::_('grid.sort', 'COM_MODULES_HEADING_MODULE', 'name', $listDirn, $listOrder); ?>					</th>					<th width="10%" class="nowrap hidden-phone">						<?php echo JHtml::_('grid.sort', 'COM_MODULES_HEADING_PAGES', 'pages', $listDirn, $listOrder); ?>					</th>					<th width="10%" class="nowrap hidden-phone">						<?php echo JHtml::_('grid.sort', 'JGRID_HEADING_ACCESS', 'a.access', $listDirn, $listOrder); ?>					</th>					<th width="5%" class="nowrap hidden-phone">						<?php echo JHtml::_('grid.sort', 'JGRID_HEADING_LANGUAGE', 'language_title', $listDirn, $listOrder); ?>					</th>					<th width="1%" class="nowrap center hidden-phone">						<?php echo JHtml::_('grid.sort', 'JGRID_HEADING_ID', 'a.id', $listDirn, $listOrder); ?>					</th>				</tr>			</thead>			<tfoot>				<tr>					<td colspan="10">						<?php echo $this->pagination->getListFooter(); ?>					</td>				</tr>			</tfoot>			<tbody>			<?php foreach ($this->items as $i => $item) :				$ordering   = ($listOrder == 'ordering');				$canCreate  = $user->authorise('core.create',     'com_modules');				$canEdit    = $user->authorise('core.edit',       'com_modules');				$canCheckin = $user->authorise('core.manage',     'com_checkin') || $item->checked_out == $user->get('id')|| $item->checked_out == 0;				$canChange  = $user->authorise('core.edit.state', 'com_modules') && $canCheckin;			?>				<tr class="row<?php echo $i % 2; ?>" sortable-group-id="<?php echo $item->position?>">					<td class="order nowrap center hidden-phone">					<?php if ($canChange) :						$disableClassName = '';						$disabledLabel	  = '';						if (!$saveOrder) :							$disabledLabel    = JText::_('JORDERINGDISABLED');							$disableClassName = 'inactive tip-top';						endif; ?>						<span class="sortable-handler hasTooltip <?php echo $disableClassName?>" title="<?php echo $disabledLabel?>">							<i class="icon-menu"></i>						</span>						<input type="text" style="display:none" name="order[]" size="5" value="<?php echo $item->ordering;?>" class="width-20 text-area-order" />					<?php else : ?>						<span class="sortable-handler inactive" >							<i class="icon-menu"></i>						</span>					<?php endif; ?>					</td>					<td class="center hidden-phone">						<?php echo JHtml::_('grid.id', $i, $item->id); ?>					</td>					<td class="center">						<?php echo JHtml::_('modules.state', $item->published, $i, $canChange, 'cb'); ?>					</td>					<td class="has-context">						<div class="pull-left">							<?php if ($item->checked_out) : ?>								<?php echo JHtml::_('jgrid.checkedout', $i, $item->editor, $item->checked_out_time, 'modules.', $canCheckin); ?>							<?php endif; ?>							<?php if ($canEdit) : ?>								<a href="<?php echo JRoute::_('index.php?option=com_modules&task=module.edit&id='.(int) $item->id); ?>">									<?php echo $this->escape($item->title); ?></a>							<?php else : ?>									<?php echo $this->escape($item->title); ?>							<?php endif; ?>							<?php if (!empty($item->note)) : ?>								<div class="small">									<?php echo JText::sprintf('JGLOBAL_LIST_NOTE', $this->escape($item->note));?>								</div>							<?php endif; ?>						</div>						<div class="pull-left">							<?php								// Create dropdown items								JHtml::_('dropdown.edit', $item->id, 'module.');								JHtml::_('dropdown.divider');								if ($item->published) :									JHtml::_('dropdown.unpublish', 'cb' . $i, 'modules.');								else :									JHtml::_('dropdown.publish', 'cb' . $i, 'modules.');								endif;								JHtml::_('dropdown.divider');								if ($item->checked_out) :									JHtml::_('dropdown.checkin', 'cb' . $i, 'modules.');								endif;								if ($trashed) :									JHtml::_('dropdown.untrash', 'cb' . $i, 'modules.');								else :									JHtml::_('dropdown.trash', 'cb' . $i, 'modules.');								endif;								// Render dropdown list								echo JHtml::_('dropdown.render');								?>						</div>					</td>					<td class="small hidden-phone">						<?php if ($item->position) : ?>							<span class="label label-info">								<?php echo $item->position; ?>							</span>						<?php else : ?>							<span class="label">								<?php echo JText::_('JNONE'); ?>							</span>						<?php endif; ?>					</td>					<td class="small hidden-phone">						<?php echo $item->name;?>					</td>					<td class="small hidden-phone">						<?php echo $item->pages; ?>					</td>					<td class="small hidden-phone">						<?php echo $this->escape($item->access_level); ?>					</td>					<td class="small hidden-phone">						<?php if ($item->language == ''):?>							<?php echo JText::_('JDEFAULT'); ?>						<?php elseif ($item->language == '*'):?>							<?php echo JText::alt('JALL', 'language'); ?>						<?php else:?>							<?php echo $item->language_title ? $this->escape($item->language_title) : JText::_('JUNDEFINED'); ?>						<?php endif;?>					</td>					<td class="center hidden-phone">						<?php echo (int) $item->id; ?>					</td>				</tr>				<?php endforeach; ?>			</tbody>		</table>		<?php //Load the batch processing form. ?>		<?php echo $this->loadTemplate('batch'); ?>		<input type="hidden" name="task" value="" />		<input type="hidden" name="boxchecked" value="0" />		<input type="hidden" name="filter_order" value="<?php echo $listOrder; ?>" />		<input type="hidden" name="filter_order_Dir" value="<?php echo $listDirn; ?>" />		<?php echo JHtml::_('form.token'); ?>	</div></form>
<?php/** * @package     Joomla.Platform * @subpackage  Archive * * @copyright   Copyright (C) 2005 - 2013 Open Source Matters, Inc. All rights reserved. * @license     GNU General Public License version 2 or later; see LICENSE */defined('JPATH_PLATFORM') or die;/** * Gzip format adapter for the JArchive class * * This class is inspired from and draws heavily in code and concept from the Compress package of * The Horde Project <http://www.horde.org> * * @contributor  Michael Slusarz <slusarz@horde.org> * @contributor  Michael Cochrane <mike@graftonhall.co.nz> * * @package     Joomla.Platform * @subpackage  Archive * @since       11.1 */class JArchiveGzip implements JArchiveExtractable{	/**	 * Gzip file flags.	 *	 * @var    array	 * @since  11.1	 */	private $_flags = array('FTEXT' => 0x01, 'FHCRC' => 0x02, 'FEXTRA' => 0x04, 'FNAME' => 0x08, 'FCOMMENT' => 0x10);	/**	 * Gzip file data buffer	 *	 * @var    string	 * @since  11.1	 */	private $_data = null;	/**	 * Extract a Gzip compressed file to a given path	 *	 * @param   string  $archive      Path to ZIP archive to extract	 * @param   string  $destination  Path to extract archive to	 * @param   array   $options      Extraction options [unused]	 *	 * @return  boolean  True if successful	 *	 * @since   11.1	 * @throws  RuntimeException	 */	public function extract($archive, $destination, array $options = array ())	{		$this->_data = null;		if (!extension_loaded('zlib'))		{			if (class_exists('JError'))			{				return JError::raiseWarning(100, 'The zlib extension is not available.');			}			else			{				throw new RuntimeException('The zlib extension is not available.');			}		}		if (!isset($options['use_streams']) || $options['use_streams'] == false)		{			$this->_data = file_get_contents($archive);			if (!$this->_data)			{				if (class_exists('JError'))				{					return JError::raiseWarning(100, 'Unable to read archive');				}				else				{					throw new RuntimeException('Unable to read archive');				}			}			$position = $this->_getFilePosition();			$buffer = gzinflate(substr($this->_data, $position, strlen($this->_data) - $position));			if (empty($buffer))			{				if (class_exists('JError'))				{					return JError::raiseWarning(100, 'Unable to decompress data');				}				else				{					throw new RuntimeException('Unable to decompress data');				}			}			if (JFile::write($destination, $buffer) === false)			{				if (class_exists('JError'))				{					return JError::raiseWarning(100, 'Unable to write archive');				}				else				{					throw new RuntimeException('Unable to write archive');				}			}		}		else		{			// New style! streams!			$input = JFactory::getStream();			// Use gz			$input->set('processingmethod', 'gz');			if (!$input->open($archive))			{				if (class_exists('JError'))				{					return JError::raiseWarning(100, 'Unable to read archive (gz)');				}				else				{					throw new RuntimeException('Unable to read archive (gz)');				}			}			$output = JFactory::getStream();			if (!$output->open($destination, 'w'))			{				$input->close();				if (class_exists('JError'))				{					return JError::raiseWarning(100, 'Unable to write archive (gz)');				}				else				{					throw new RuntimeException('Unable to write archive (gz)');				}			}			do			{				$this->_data = $input->read($input->get('chunksize', 8196));				if ($this->_data)				{					if (!$output->write($this->_data))					{						$input->close();						if (class_exists('JError'))						{							return JError::raiseWarning(100, 'Unable to write file (gz)');						}						else						{							throw new RuntimeException('Unable to write file (gz)');						}					}				}			}			while ($this->_data);			$output->close();			$input->close();		}		return true;	}	/**	 * Tests whether this adapter can unpack files on this computer.	 *	 * @return  boolean  True if supported	 *	 * @since   11.3	 */	public static function isSupported()	{		return extension_loaded('zlib');	}	/**	 * Get file data offset for archive	 *	 * @return  integer  Data position marker for archive	 *	 * @since   11.1	 * @throws  RuntimeException	 */	public function _getFilePosition()	{		// Gzipped file... unpack it first		$position = 0;		$info = @ unpack('CCM/CFLG/VTime/CXFL/COS', substr($this->_data, $position + 2));		if (!$info)		{			if (class_exists('JError'))			{				return JError::raiseWarning(100, 'Unable to decompress data.');			}			else			{				throw new RuntimeException('Unable to decompress data.');			}		}		$position += 10;		if ($info['FLG'] & $this->_flags['FEXTRA'])		{			$XLEN = unpack('vLength', substr($this->_data, $position + 0, 2));			$XLEN = $XLEN['Length'];			$position += $XLEN + 2;		}		if ($info['FLG'] & $this->_flags['FNAME'])		{			$filenamePos = strpos($this->_data, "\x0", $position);			$position = $filenamePos + 1;		}		if ($info['FLG'] & $this->_flags['FCOMMENT'])		{			$commentPos = strpos($this->_data, "\x0", $position);			$position = $commentPos + 1;		}		if ($info['FLG'] & $this->_flags['FHCRC'])		{			$hcrc = unpack('vCRC', substr($this->_data, $position + 0, 2));			$hcrc = $hcrc['CRC'];			$position += 2;		}		return $position;	}}
<?php/** * @package     Joomla.Administrator * @subpackage  Template.hathor * * @copyright   Copyright (C) 2005 - 2013 Open Source Matters, Inc. All rights reserved. * @license     GNU General Public License version 2 or later; see LICENSE.txt */defined('_JEXEC') or die;$app	= JFactory::getApplication();$doc	= JFactory::getDocument();$lang	= JFactory::getLanguage();$input	= $app->input;$user	= JFactory::getUser();// Load optional RTL Bootstrap CSSJHtml::_('bootstrap.loadCss', false, $this->direction);// Load system style CSS$doc->addStyleSheet('templates/system/css/system.css');// Loadtemplate CSS$doc->addStyleSheet('templates/'.$this->template.'/css/template.css');// Load additional CSS styles for colorsif (!$this->params->get('colourChoice')) :$colour = 'standard';else :$colour = htmlspecialchars($this->params->get('colourChoice'));endif;$doc->addStyleSheet('templates/'.$this->template.'/css/colour_'.$colour.'.css');// Load specific language related CSS$file = 'language/' . $lang->getTag() . '/' . $lang->getTag() . '.css';if (is_file($file)){	$doc->addStyleSheet($file);}// Load additional CSS styles for rtl sitesif ($this->direction == 'rtl'){	$doc->addStyleSheet('templates/'.$this->template.'/css/template_rtl.css');	$doc->addStyleSheet('templates/'.$this->template.'/css/colour_'.$colour.'_rtl.css');}// Load specific language related CSS$file = 'language/'.$lang->getTag().'/'.$lang->getTag().'.css';if (JFile::exists($file)){	$doc->addStyleSheet($file);}// Load additional CSS styles for bold Textif ($this->params->get('boldText')){	$doc->addStyleSheet('templates/'.$this->template.'/css/boldtext.css');}// Load template javascript$doc->addScript('templates/'.$this->template.'/js/template.js', 'text/javascript');// Logo fileif ($this->params->get('logoFile')){	$logo = JURI::root() . $this->params->get('logoFile');}else{	$logo = $this->baseurl . "/templates/" . $this->template . "/images/logo.png";}?><!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.0 Transitional//EN" "http://www.w3.org/TR/xhtml1/DTD/xhtml1-transitional.dtd"><html xmlns="http://www.w3.org/1999/xhtml" xml:lang="<?php echo  $this->language; ?>" lang="<?php echo  $this->language; ?>" dir="<?php echo  $this->direction; ?>"><head>	<meta name="viewport" content="width=device-width, initial-scale=1.0">	<jdoc:include type="head" /><!-- Load additional CSS styles for Internet Explorer --><!--[if IE 8]>	<link href="templates/<?php echo  $this->template ?>/css/ie8.css" rel="stylesheet" type="text/css" /><![endif]--><!--[if IE 7]>	<link href="templates/<?php echo  $this->template ?>/css/ie7.css" rel="stylesheet" type="text/css" /><![endif]--><!--[if lt IE 9]>	<script src="../media/jui/js/html5.js"></script><![endif]--></head><body id="minwidth-body"><div id="containerwrap">	<!-- Header Logo -->	<div id="header">		<!-- Site Title and Skip to Content -->		<div class="title-ua">			<h1 class="title"><?php echo $this->params->get('showSiteName') ? $app->getCfg('sitename') . " " . JText::_('JADMINISTRATION') : JText::_('JADMINISTRATION'); ?></h1>			<div id="skiplinkholder"><p><a id="skiplink" href="#skiptarget"><?php echo JText::_('TPL_HATHOR_SKIP_TO_MAIN_CONTENT'); ?></a></p></div>		</div>	</div><!-- end header -->	<!-- Main Menu Navigation -->	<div id="nav">		<div id="module-menu">			<h2 class="element-invisible"><?php echo JText::_('TPL_HATHOR_MAIN_MENU'); ?></h2>			<jdoc:include type="modules" name="menu" />		</div>		<div class="clr"></div>	</div><!-- end nav -->	<!-- Status Module -->	<div id="module-status">		<jdoc:include type="modules" name="status"/>			<?php			//Display an harcoded logout			$task = $app->input->get('task');			if ($task == 'edit' || $task == 'editA' || $app->input->getInt('hidemainmenu'))			{				$logoutLink = '';			} else {				$logoutLink = JRoute::_('index.php?option=com_login&task=logout&'. JSession::getFormToken() .'=1');			}			$hideLinks = $app->input->getBool('hidemainmenu');			$output = array();			// Print the Preview link to Main site.			//$output[] = '<span class="viewsite"><a href="'.JURI::root().'" target="_blank">'.JText::_('JGLOBAL_VIEW_SITE').'</a></span>';			// Print the logout link.			//$output[] = '<span class="logout">' .($hideLinks ? '' : '<a href="'.$logoutLink.'">').JText::_('JLOGOUT').($hideLinks ? '' : '</a>').'</span>';			// Output the items.			foreach ($output as $item) :			echo $item;			endforeach;			?>	</div>	<!-- Content Area -->	<div id="content">		<!-- Component Title -->		<jdoc:include type="modules" name="title" />		<!-- System Messages -->		<jdoc:include type="message" />		<!-- Sub Menu Navigation -->		<div class="subheader">			<?php if (!$app->input->getInt('hidemainmenu')) : ?>				<h3 class="element-invisible"><?php echo JText::_('TPL_HATHOR_SUB_MENU'); ?></h3>				<jdoc:include type="modules" name="submenu" style="xhtmlid" id="submenu-box" />			<?php echo " " ?>			<?php else : ?>				<div id="no-submenu"></div>			<?php endif; ?>		</div>		<!-- Toolbar Icon Buttons -->		<div class="toolbar-box">			<jdoc:include type="modules" name="toolbar" style="xhtml" />			<div class="clr"></div>		</div>		<!-- Beginning of Actual Content -->		<div id="element-box">			<div id="container-collapse" class="container-collapse"></div>			<p id="skiptargetholder"><a id="skiptarget" class="skip" tabindex="-1"></a></p>			<!-- The main component -->			<jdoc:include type="component" />			<div class="clr"></div>		</div><!-- end of element-box -->		<noscript>			<?php echo  JText::_('JGLOBAL_WARNJAVASCRIPT') ?>		</noscript>		<div class="clr"></div>	</div><!-- end of content -->	<div class="clr"></div></div><!-- end of containerwrap --><!-- Footer --><div id="footer">	<jdoc:include type="modules" name="footer" style="none"  />	<p class="copyright">		<?php $joomla = '<a href="http://www.joomla.org">Joomla!&#174;</a>';			echo JText::sprintf('JGLOBAL_ISFREESOFTWARE', $joomla) ?>	</p></div><script type="text/javascript">	(function($){		$(document).ready(function () {			// Patches to fix some wrong render of chosen fields			$('.chzn-container, .chzn-drop, .chzn-choices .search-field input').each(function (index) {				$(this).css({					'width': 'auto'				});			});		});	})(jQuery);</script></body></html>
<?php/** * @package     Joomla.Platform * @subpackage  MediaWiki * * @copyright   Copyright (C) 2005 - 2012 Open Source Matters, Inc. All rights reserved. * @license     GNU General Public License version 2 or later; see LICENSE */defined('JPATH_PLATFORM') or die;/** * MediaWiki API Users class for the Joomla Platform. * * @package     Joomla.Platform * @subpackage  MediaWiki * @since       12.3 */class JMediawikiUsers extends JMediawikiObject{	/**     * Method to login and get authentication tokens.     *     * @param   string  $lgname      User Name.     * @param   string  $lgpassword  Password.     * @param   string  $lgdomain    Domain (optional).     *     * @return  object     *     * @since   12.3     */	public function login($lgname, $lgpassword, $lgdomain = null)	{		// Build the request path.		$path = '?action=login&lgname=' . $lgname . '&lgpassword=' . $lgpassword;		if (isset($lgdomain))		{			$path .= '&lgdomain=' . $lgdomain;		}		// Send the request.		$response = $this->client->post($this->fetchUrl($path), null);		// Request path with login token.		$path = '?action=login&lgname=' . $lgname . '&lgpassword=' . $lgpassword . '&lgtoken=' . $this->validateResponse($response)->login['token'];		if (isset($lgdomain))		{			$path .= '&lgdomain=' . $lgdomain;		}		// Set the session cookies returned.		$headers = (array) $this->options->get('headers');		$headers['Cookie'] = !empty($headers['Cookie']) ? empty($headers['Cookie']) : '';		$headers['Cookie'] = $headers['Cookie'] . $response->headers['Set-Cookie'];		$this->options->set('headers', $headers);		// Send the request again with the token.		$response = $this->client->post($this->fetchUrl($path), null);		$response_body = $this->validateResponse($response);		$headers = (array) $this->options->get('headers');		$cookie_prefix = $response_body->login['cookieprefix'];		$cookie = $cookie_prefix . 'UserID=' . $response_body->login['lguserid'] . '; ' . $cookie_prefix			. 'UserName=' . $response_body->login['lgusername'];		$headers['Cookie'] = $headers['Cookie'] . '; ' . $response->headers['Set-Cookie'] . '; ' . $cookie;		$this->options->set('headers', $headers);		return $this->validateResponse($response);	}	/**	 * Method to logout and clear session data.	 *	 * @return  object	 *	 * @since   12.3	 */	public function logout()	{		// Build the request path.		$path = '?action=login';		// @TODO clear internal data as well		// Send the request.		$response = $this->client->get($this->fetchUrl($path));		return $this->validateResponse($response);	}	/**     * Method to get user information.	 *	 * @param   array  $ususers  A list of users to obtain the same information for.	 * @param   array  $usprop   What pieces of information to include.	 *     * @return  object     *     * @since   12.3     */	public function getUserInfo(array $ususers, array $usprop = null)	{		// Build the request path.		$path = '?action=query&list=users';		// Append users to the request.		$path .= '&ususers=' . $this->buildParameter($ususers);		if (isset($usprop))		{			$path .= '&usprop' . $this->buildParameter($usprop);		}		// Send the request.		$response = $this->client->get($this->fetchUrl($path));		return $this->validateResponse($response);	}	/**     * Method to get current user information.	 *	 * @param   array  $uiprop  What pieces of information to include.     *     * @return  object     *     * @since   12.3     */	public function getCurrentUserInfo(array $uiprop = null)	{		// Build the request path.		$path = '?action=query&meta=userinfo';		if (isset($uiprop))		{			$path .= '&uiprop' . $this->buildParameter($uiprop);		}		// Send the request.		$response = $this->client->get($this->fetchUrl($path));		return $this->validateResponse($response);	}	/**     * Method to get user contributions.     *     * @param   string   $ucuser        The users to retrieve contributions for.	 * @param   string   $ucuserprefix  Retrieve contibutions for all users whose names begin with this value.     * @param   integer  $uclimit       The users to retrieve contributions for.     * @param   string   $ucstart       The start timestamp to return from.     * @param   string   $ucend         The end timestamp to return to.     * @param   boolean  $uccontinue    When more results are available, use this to continue.     * @param   string   $ucdir         In which direction to enumerate.     * @param   array    $ucnamespace   Only list contributions in these namespaces.     * @param   array    $ucprop        Include additional pieces of information.     * @param   array    $ucshow        Show only items that meet this criteria.     * @param   string   $uctag         Only list revisions tagged with this tag.     * @param   string   $uctoponly     Only list changes which are the latest revision     *     * @return  object     *     * @since   12.3     */	public function getUserContribs($ucuser = null, $ucuserprefix = null, $uclimit = null, $ucstart = null, $ucend = null, $uccontinue = null,		$ucdir = null, array $ucnamespace = null, array $ucprop = null, array $ucshow = null, $uctag = null, $uctoponly = null)	{		// Build the request path.		$path = '?action=query&list=usercontribs';		if (isset($ucuser))		{			$path .= '&ucuser=' . $ucuser;		}		if (isset($ucuserprefix))		{			$path .= '&ucuserprefix=' . $ucuserprefix;		}		if (isset($uclimit))		{			$path .= '&uclimit=' . $uclimit;		}		if (isset($ucstart))		{			$path .= '&ucstart=' . $ucstart;		}		if (isset($ucend))		{			$path .= '&ucend=' . $ucend;		}		if ($uccontinue)		{			$path .= '&uccontinue=';		}		if (isset($ucdir))		{			$path .= '&ucdir=' . $ucdir;		}		if (isset($ucnamespace))		{			$path .= '&ucnamespace=' . $this->buildParameter($ucnamespace);		}		if (isset($ucprop))		{			$path .= '&ucprop=' . $this->buildParameter($ucprop);		}		if (isset($ucshow))		{			$path .= '&ucshow=' . $this->buildParameter($ucshow);		}		if (isset($uctag))		{			$path .= '&uctag=' . $uctag;		}		if (isset($uctoponly))		{			$path .= '&uctoponly=' . $uctoponly;		}		// Send the request.		$response = $this->client->get($this->fetchUrl($path));		return $this->validateResponse($response);	}	/**     * Method to block a user.	 *	 * @param   string   $user           Username, IP address or IP range you want to block.	 * @param   string   $expiry         Relative expiry time, Default: never.	 * @param   string   $reason         Reason for block (optional).	 * @param   boolean  $anononly       Block anonymous users only.	 * @param   boolean  $nocreate       Prevent account creation.	 * @param   boolean  $autoblock      Automatically block the last used IP address, and any subsequent IP addresses they try to login from.	 * @param   boolean  $noemail        Prevent user from sending e-mail through the wiki.	 * @param   boolean  $hidename       Hide the username from the block log.	 * @param   boolean  $allowusertalk  Allow the user to edit their own talk page.	 * @param   boolean  $reblock        If the user is already blocked, overwrite the existing block.	 * @param   boolean  $watchuser      Watch the user/IP's user and talk pages.     *     * @return  object     *     * @since   12.3     */	public function blockUser($user, $expiry = null, $reason = null, $anononly = null, $nocreate = null, $autoblock = null, $noemail = null,		$hidename = null, $allowusertalk = null, $reblock = null, $watchuser = null)	{		// Get the token.		$token = $this->getToken($user, 'block');		// Build the request path.		$path = '?action=unblock';		// Build the request data.		$data = array(			'user' => $user,			'token' => $token,			'expiry' => $expiry,			'reason' => $reason,			'anononly' => $anononly,			'nocreate' => $nocreate,			'autoblock' => $autoblock,			'noemail' => $noemail,			'hidename' => $hidename,			'allowusetalk' => $allowusertalk,			'reblock' => $reblock,			'watchuser' => $watchuser		);		// Send the request.		$response = $this->client->post($this->fetchUrl($path), $data);		return $this->validateResponse($response);	}	/**     * Method to unblock a user.	 *	 * @param   string  $user    Username, IP address or IP range you want to unblock.	 * @param   string  $reason  Reason for unblock (optional).     *     * @return  object     *     * @since   12.3     */	public function unBlockUserByName($user, $reason = null)	{		// Get the token.		$token = $this->getToken($user, 'unblock');		// Build the request path.		$path = '?action=unblock';		// Build the request data.		$data = array(				'user' => $user,				'token' => $token,				'reason' => $reason,		);		// Send the request.		$response = $this->client->post($this->fetchUrl($path), $data);		return $this->validateResponse($response);	}	/**	 * Method to unblock a user.	 *	 * @param   int     $id      Username, IP address or IP range you want to unblock.	 * @param   string  $reason  Reason for unblock (optional).	 *	 * @return  object	 *	 * @since   12.3	 */	public function unBlockUserByID($id, $reason = null)	{		// Get the token.		$token = $this->getToken($id, 'unblock');		// Build the request path.		$path = '?action=unblock';		// Build the request data.		$data = array(			'id' => $id,			'token' => $token,			'reason' => $reason,		);		// Send the request.		$response = $this->client->get($this->fetchUrl($path));		return $this->validateResponse($response);	}	/**     * Method to assign a user to a group.	 *	 * @param   string  $username  User name.	 * @param   array   $add       Add the user to these groups.	 * @param   array   $remove    Remove the user from these groups.	 * @param   string  $reason    Reason for the change.     *     * @return  object     *     * @since   12.3     */	public function assignGroup($username, $add = null, $remove = null, $reason = null)	{		// Get the token.		$token = $this->getToken($username, 'unblock');		// Build the request path.		$path = '?action=userrights';		// Build the request data.		$data = array(			'username' => $username,			'token' => $token,			'add' => $add,			'remove' => $remove,			'reason' => $reason		);		// Send the request.		$response = $this->client->post($this->fetchUrl($path), $data);		return $this->validateResponse($response);	}	/**     * Method to email a user.	 *	 * @param   string   $target   User to send email to.	 * @param   string   $subject  Subject header.	 * @param   string   $text     Mail body.	 * @param   boolean  $ccme     Send a copy of this mail to me.     *     * @return  object     *     * @since   12.3     */	public function emailUser($target, $subject = null, $text = null, $ccme = null)	{		// Get the token.		$token = $this->getToken($target, 'emailuser');		// Build the request path.		$path = '?action=emailuser';		// Build the request data.		$data = array(			'target' => $target,			'token' => $token,			'subject' => $subject,			'text' => $text,			'ccme' => $ccme		);		// Send the request.		$response = $this->client->post($this->fetchUrl($path), $data);		return $this->validateResponse($response);	}	/**	 * Method to get access token.	 *	 * @param   string  $user     The User to get token.	 * @param   string  $intoken  The type of token.	 *	 * @return  object	 *	 * @since   12.3	 */	public function getToken($user, $intoken)	{		// Build the request path.		$path = '?action=query&prop=info&intoken=' . $intoken . '&titles=User:' . $user;		// Send the request.		$response = $this->client->post($this->fetchUrl($path), null);		return (string) $this->validateResponse($response)->query->pages->page[$intoken . 'token'];	}}
<?php/** * @package     Joomla.Platform * @subpackage  Form * * @copyright   Copyright (C) 2005 - 2013 Open Source Matters, Inc. All rights reserved. * @license     GNU General Public License version 2 or later; see LICENSE */defined('JPATH_PLATFORM') or die;/** * Form Field class for the Joomla Platform. * * Provides a pop up date picker linked to a button. * Optionally may be filtered to use user's or server's time zone. * * @package     Joomla.Platform * @subpackage  Form * @since       11.1 */class JFormFieldCalendar extends JFormField{	/**	 * The form field type.	 *	 * @var    string	 * @since  11.1	 */	public $type = 'Calendar';	/**	 * Method to get the field input markup.	 *	 * @return  string   The field input markup.	 *	 * @since   11.1	 */	protected function getInput()	{		// Initialize some field attributes.		$format = $this->element['format'] ? (string) $this->element['format'] : '%Y-%m-%d';		// Build the attributes array.		$attributes = array();		if ($this->element['size'])		{			$attributes['size'] = (int) $this->element['size'];		}		if ($this->element['maxlength'])		{			$attributes['maxlength'] = (int) $this->element['maxlength'];		}		if ($this->element['class'])		{			$attributes['class'] = (string) $this->element['class'];		}		if ((string) $this->element['readonly'] == 'true')		{			$attributes['readonly'] = 'readonly';		}		if ((string) $this->element['disabled'] == 'true')		{			$attributes['disabled'] = 'disabled';		}		if ($this->element['onchange'])		{			$attributes['onchange'] = (string) $this->element['onchange'];		}		if ($this->required)		{			$attributes['required'] = 'required';			$attributes['aria-required'] = 'true';		}		// Handle the special case for "now".		if (strtoupper($this->value) == 'NOW')		{			$this->value = strftime($format);		}		// Get some system objects.		$config = JFactory::getConfig();		$user = JFactory::getUser();		// If a known filter is given use it.		switch (strtoupper((string) $this->element['filter']))		{			case 'SERVER_UTC':				// Convert a date to UTC based on the server timezone.				if ((int) $this->value)				{					// Get a date object based on the correct timezone.					$date = JFactory::getDate($this->value, 'UTC');					$date->setTimezone(new DateTimeZone($config->get('offset')));					// Transform the date string.					$this->value = $date->format('Y-m-d H:i:s', true, false);				}				break;			case 'USER_UTC':				// Convert a date to UTC based on the user timezone.				if ((int) $this->value)				{					// Get a date object based on the correct timezone.					$date = JFactory::getDate($this->value, 'UTC');					$date->setTimezone(new DateTimeZone($user->getParam('timezone', $config->get('offset'))));					// Transform the date string.					$this->value = $date->format('Y-m-d H:i:s', true, false);				}				break;		}		return JHtml::_('calendar', $this->value, $this->name, $this->id, $format, $attributes);	}}
<?php/** * @package     Joomla.Installation * @subpackage  View * * @copyright   Copyright (C) 2005 - 2013 Open Source Matters, Inc. All rights reserved. * @license     GNU General Public License version 2 or later; see LICENSE.txt */defined('_JEXEC') or die;/** * The Installation Default Language View * * @package     Joomla.Installation * @subpackage  View * @since       3.1 */class InstallationViewDefaultlanguageHtml extends JViewHtml{	/**	 * Container with all installed languages	 *	 * @var    array	 * @since  3.1	 */	protected $items;	/**	 * Redefine the model so the correct type hinting is available.	 *	 * @var     InstallationModelLanguages	 * @since   3.1	 */	protected $model;	/**	 * Method to render the view.	 *	 * @return  string  The rendered view.	 *	 * @since   3.1	 */	public function render()	{		$this->items = new stdClass;		$this->items->administrator = $this->model->getInstalledlangsAdministrator();		$this->items->frontend      = $this->model->getInstalledlangsFrontend();		return parent::render();	}}
<?php/** * @package     Joomla.Platform * @subpackage  Document * * @copyright   Copyright (C) 2005 - 2013 Open Source Matters, Inc. All rights reserved. * @license     GNU General Public License version 2 or later; see LICENSE */defined('JPATH_PLATFORM') or die;/** * JDocument head renderer * * @package     Joomla.Platform * @subpackage  Document * @since       11.1 */class JDocumentRendererHead extends JDocumentRenderer{	/**	 * Renders the document head and returns the results as a string	 *	 * @param   string  $head     (unused)	 * @param   array   $params   Associative array of values	 * @param   string  $content  The script	 *	 * @return  string  The output of the script	 *	 * @since   11.1	 *	 * @note    Unused arguments are retained to preserve backward compatibility.	 */	public function render($head, $params = array(), $content = null)	{		ob_start();		echo $this->fetchHead($this->_doc);		$buffer = ob_get_contents();		ob_end_clean();		return $buffer;	}	/**	 * Generates the head HTML and return the results as a string	 *	 * @param   JDocument  $document  The document for which the head will be created	 *	 * @return  string  The head hTML	 *	 * @since   11.1	 */	public function fetchHead($document)	{		// Convert the tagids to titles		$tagsHelper = new JHelperTags();		if (isset($document->_metaTags['standard']['tags']))		{			$document->_metaTags['standard']['tags'] = implode(', ', $tagsHelper->getTagNames($document->_metaTags['standard']['tags']));		}		// Trigger the onBeforeCompileHead event		$app = JFactory::getApplication();		$app->triggerEvent('onBeforeCompileHead');		// Get line endings		$lnEnd = $document->_getLineEnd();		$tab = $document->_getTab();		$tagEnd = ' />';		$buffer = '';		// Generate charset when using HTML5 (should happen first)		if ($document->isHtml5())		{			$buffer .= $tab . '<meta charset="' . $document->getCharset() . '" />' . $lnEnd;		}		// Generate base tag (need to happen early)		$base = $document->getBase();		if (!empty($base))		{			$buffer .= $tab . '<base href="' . $document->getBase() . '" />' . $lnEnd;		}		// Generate META tags (needs to happen as early as possible in the head)		foreach ($document->_metaTags as $type => $tag)		{			foreach ($tag as $name => $content)			{				if ($type == 'http-equiv' && !($document->isHtml5() && $name == 'content-type'))				{					$buffer .= $tab . '<meta http-equiv="' . $name . '" content="' . htmlspecialchars($content) . '" />' . $lnEnd;				}				elseif ($type == 'standard' && !empty($content))				{					$buffer .= $tab . '<meta name="' . $name . '" content="' . htmlspecialchars($content) . '" />' . $lnEnd;				}			}		}		// Don't add empty descriptions		$documentDescription = $document->getDescription();		if ($documentDescription)		{			$buffer .= $tab . '<meta name="description" content="' . htmlspecialchars($documentDescription) . '" />' . $lnEnd;		}		// Don't add empty generators		$generator = $document->getGenerator();		if ($generator)		{			$buffer .= $tab . '<meta name="generator" content="' . htmlspecialchars($generator) . '" />' . $lnEnd;		}		$buffer .= $tab . '<title>' . htmlspecialchars($document->getTitle(), ENT_COMPAT, 'UTF-8') . '</title>' . $lnEnd;		// Generate link declarations		foreach ($document->_links as $link => $linkAtrr)		{			$buffer .= $tab . '<link href="' . $link . '" ' . $linkAtrr['relType'] . '="' . $linkAtrr['relation'] . '"';			if ($temp = JArrayHelper::toString($linkAtrr['attribs']))			{				$buffer .= ' ' . $temp;			}			$buffer .= ' />' . $lnEnd;		}		// Generate stylesheet links		foreach ($document->_styleSheets as $strSrc => $strAttr)		{			$buffer .= $tab . '<link rel="stylesheet" href="' . $strSrc . '" type="' . $strAttr['mime'] . '"';			if (!is_null($strAttr['media']))			{				$buffer .= ' media="' . $strAttr['media'] . '" ';			}			if ($temp = JArrayHelper::toString($strAttr['attribs']))			{				$buffer .= ' ' . $temp;			}			$buffer .= $tagEnd . $lnEnd;		}		// Generate stylesheet declarations		foreach ($document->_style as $type => $content)		{			$buffer .= $tab . '<style type="' . $type . '">' . $lnEnd;			// This is for full XHTML support.			if ($document->_mime != 'text/html')			{				$buffer .= $tab . $tab . '<![CDATA[' . $lnEnd;			}			$buffer .= $content . $lnEnd;			// See above note			if ($document->_mime != 'text/html')			{				$buffer .= $tab . $tab . ']]>' . $lnEnd;			}			$buffer .= $tab . '</style>' . $lnEnd;		}		// Generate script file links		foreach ($document->_scripts as $strSrc => $strAttr)		{			$buffer .= $tab . '<script src="' . $strSrc . '"';			if (!is_null($strAttr['mime']))			{				$buffer .= ' type="' . $strAttr['mime'] . '"';			}			if ($strAttr['defer'])			{				$buffer .= ' defer="defer"';			}			if ($strAttr['async'])			{				$buffer .= ' async="async"';			}			$buffer .= '></script>' . $lnEnd;		}		// Generate script declarations		foreach ($document->_script as $type => $content)		{			$buffer .= $tab . '<script type="' . $type . '">' . $lnEnd;			// This is for full XHTML support.			if ($document->_mime != 'text/html')			{				$buffer .= $tab . $tab . '<![CDATA[' . $lnEnd;			}			$buffer .= $content . $lnEnd;			// See above note			if ($document->_mime != 'text/html')			{				$buffer .= $tab . $tab . ']]>' . $lnEnd;			}			$buffer .= $tab . '</script>' . $lnEnd;		}		// Generate script language declarations.		if (count(JText::script()))		{			$buffer .= $tab . '<script type="text/javascript">' . $lnEnd;			$buffer .= $tab . $tab . '(function() {' . $lnEnd;			$buffer .= $tab . $tab . $tab . 'var strings = ' . json_encode(JText::script()) . ';' . $lnEnd;			$buffer .= $tab . $tab . $tab . 'if (typeof Joomla == \'undefined\') {' . $lnEnd;			$buffer .= $tab . $tab . $tab . $tab . 'Joomla = {};' . $lnEnd;			$buffer .= $tab . $tab . $tab . $tab . 'Joomla.JText = strings;' . $lnEnd;			$buffer .= $tab . $tab . $tab . '}' . $lnEnd;			$buffer .= $tab . $tab . $tab . 'else {' . $lnEnd;			$buffer .= $tab . $tab . $tab . $tab . 'Joomla.JText.load(strings);' . $lnEnd;			$buffer .= $tab . $tab . $tab . '}' . $lnEnd;			$buffer .= $tab . $tab . '})();' . $lnEnd;			$buffer .= $tab . '</script>' . $lnEnd;		}		foreach ($document->_custom as $custom)		{			$buffer .= $tab . $custom . $lnEnd;		}		return $buffer;	}}
<?php/** * @package     Joomla.Plugin * @subpackage  Extension.Joomla * * @copyright   Copyright (C) 2005 - 2013 Open Source Matters, Inc. All rights reserved. * @license     GNU General Public License version 2 or later; see LICENSE.txt */defined('_JEXEC') or die;/** * Joomla! master extension plugin. * * @package     Joomla.Plugin * @subpackage  Extension.Joomla * @since       1.6 */class PlgExtensionJoomla extends JPlugin{	/**	 * @var    integer Extension Identifier	 * @since  1.6	 */	private $eid = 0;	/**	 * @var    JInstaller Installer object	 * @since  1.6	 */	private $installer = null;	/**	 * Load the language file on instantiation.	 *	 * @var    boolean	 * @since  3.1	 */	protected $autoloadLanguage = true;	/**	 * Adds an update site to the table if it doesn't exist.	 *	 * @param   string   $name      The friendly name of the site	 * @param   string   $type      The type of site (e.g. collection or extension)	 * @param   string   $location  The URI for the site	 * @param   boolean  $enabled   If this site is enabled	 *	 * @return  void	 *	 * @since   1.6	 */	private function addUpdateSite($name, $type, $location, $enabled)	{		$db = JFactory::getDbo();		// Look if the location is used already; doesn't matter what type you can't have two types at the same address, doesn't make sense		$query = $db->getQuery(true)			->select('update_site_id')			->from('#__update_sites')			->where('location = ' . $db->quote($location));		$db->setQuery($query);		$update_site_id = (int) $db->loadResult();		// If it doesn't exist, add it!		if (!$update_site_id)		{			$query->clear()				->insert('#__update_sites')				->columns(array($db->quoteName('name'), $db->quoteName('type'), $db->quoteName('location'), $db->quoteName('enabled')))				->values($db->quote($name) . ', ' . $db->quote($type) . ', ' . $db->quote($location) . ', ' . (int) $enabled);			$db->setQuery($query);			if ($db->execute())			{				// Link up this extension to the update site				$update_site_id = $db->insertid();			}		}		// Check if it has an update site id (creation might have faileD)		if ($update_site_id)		{			// Look for an update site entry that exists			$query->clear()				->select('update_site_id')				->from('#__update_sites_extensions')				->where('update_site_id = ' . $update_site_id)				->where('extension_id = ' . $this->eid);			$db->setQuery($query);			$tmpid = (int) $db->loadResult();			if (!$tmpid)			{				// Link this extension to the relevant update site				$query->clear()					->insert('#__update_sites_extensions')					->columns(array($db->quoteName('update_site_id'), $db->quoteName('extension_id')))					->values($update_site_id . ', ' . $this->eid);				$db->setQuery($query);				$db->execute();			}		}	}	/**	 * Handle post extension install update sites	 *	 * @param   JInstaller  $installer  Installer object	 * @param   integer     $eid        Extension Identifier	 *	 * @return  void	 *	 * @since   1.6	 */	public function onExtensionAfterInstall($installer, $eid )	{		if ($eid)		{			$this->installer = $installer;			$this->eid = $eid;			// After an install we only need to do update sites			$this->processUpdateSites();		}	}	/**	 * Handle extension uninstall	 *	 * @param   JInstaller  $installer  Installer instance	 * @param   integer     $eid        Extension id	 * @param   integer     $result     Installation result	 *	 * @return  void	 *	 * @since   1.6	 */	public function onExtensionAfterUninstall($installer, $eid, $result)	{		if ($eid)		{			// Wipe out any update_sites_extensions links			$db = JFactory::getDbo();			$query = $db->getQuery(true)				->delete('#__update_sites_extensions')				->where('extension_id = ' . $eid);			$db->setQuery($query);			$db->execute();			// Delete any unused update sites			$query->clear()				->select('update_site_id')				->from('#__update_sites_extensions');			$db->setQuery($query);			$results = $db->loadColumn();			if (is_array($results))			{				// So we need to delete the update sites and their associated updates				$updatesite_delete = $db->getQuery(true);				$updatesite_delete->delete('#__update_sites');				$updatesite_query = $db->getQuery(true);				$updatesite_query->select('update_site_id')					->from('#__update_sites');				// If we get results back then we can exclude them				if (count($results))				{					$updatesite_query->where('update_site_id NOT IN (' . implode(',', $results) . ')');					$updatesite_delete->where('update_site_id NOT IN (' . implode(',', $results) . ')');				}				// So let's find what update sites we're about to nuke and remove their associated extensions				$db->setQuery($updatesite_query);				$update_sites_pending_delete = $db->loadColumn();				if (is_array($update_sites_pending_delete) && count($update_sites_pending_delete))				{					// Nuke any pending updates with this site before we delete it					// TODO: investigate alternative of using a query after the delete below with a query and not in like above					$query->clear()						->delete('#__updates')						->where('update_site_id IN (' . implode(',', $update_sites_pending_delete) . ')');					$db->setQuery($query);					$db->execute();				}				// Note: this might wipe out the entire table if there are no extensions linked				$db->setQuery($updatesite_delete);				$db->execute();			}			// Last but not least we wipe out any pending updates for the extension			$query->clear()				->delete('#__updates')				->where('extension_id = '. $eid);			$db->setQuery($query);			$db->execute();		}	}	/**	 * After update of an extension	 *	 * @param   JInstaller  $installer  Installer object	 * @param   integer     $eid        Extension identifier	 *	 * @return  void	 *	 * @since   1.6	 */	public function onExtensionAfterUpdate($installer, $eid)	{		if ($eid)		{			$this->installer = $installer;			$this->eid = $eid;			// handle any update sites			$this->processUpdateSites();		}	}	/**	 * Processes the list of update sites for an extension.	 *	 * @return  void	 *	 * @since   1.6	 */	private function processUpdateSites()	{		$manifest		= $this->installer->getManifest();		$updateservers	= $manifest->updateservers;		if ($updateservers)		{			$children = $updateservers->children();		}		else		{			$children = array();		}		if (count($children))		{			foreach ($children as $child)			{				$attrs = $child->attributes();				$this->addUpdateSite($attrs['name'], $attrs['type'], $child, true);			}		}		else		{			$data = (string) $updateservers;			if (strlen($data))			{				// We have a single entry in the update server line, let us presume this is an extension line				$this->addUpdateSite(JText::_('PLG_EXTENSION_JOOMLA_UNKNOWN_SITE'), 'extension', $data, true);			}		}	}}
<?php/** * @package     Joomla.Administrator * @subpackage  com_messages * * @copyright   Copyright (C) 2005 - 2013 Open Source Matters, Inc. All rights reserved. * @license     GNU General Public License version 2 or later; see LICENSE.txt */defined('_JEXEC') or die;/** * Message configuration model. * * @package     Joomla.Administrator * @subpackage  com_messages * @since       1.6 */class MessagesModelConfig extends JModelForm{	/**	 * Method to auto-populate the model state.	 *	 * Note. Calling getState in this method will result in recursion.	 *	 * @since   1.6	 */	protected function populateState()	{		$app	= JFactory::getApplication('administrator');		$user	= JFactory::getUser();		$this->setState('user.id', $user->get('id'));		// Load the parameters.		$params	= JComponentHelper::getParams('com_messages');		$this->setState('params', $params);	}	/**	 * Method to get a single record.	 *	 * @param   integer	The id of the primary key.	 *	 * @return  mixed  Object on success, false on failure.	 */	public function &getItem()	{		$item = new JObject;		$db = $this->getDbo();		$query = $db->getQuery(true)			->select('cfg_name, cfg_value')			->from('#__messages_cfg')			->where('user_id = '.(int) $this->getState('user.id'));		$db->setQuery($query);		try		{			$rows = $db->loadObjectList();		}		catch (RuntimeException $e)		{			$this->setError($e->getMessage());			return false;		}		foreach ($rows as $row)		{			$item->set($row->cfg_name, $row->cfg_value);		}		$this->preprocessData('com_messages.config', $item);		return $item;	}	/**	 * Method to get the record form.	 *	 * @param   array  $data		Data for the form.	 * @param   boolean	$loadData	True if the form is to load its own data (default case), false if not.	 * @return  JForm	A JForm object on success, false on failure	 * @since   1.6	 */	public function getForm($data = array(), $loadData = true)	{		// Get the form.		$form = $this->loadForm('com_messages.config', 'config', array('control' => 'jform', 'load_data' => $loadData));		if (empty($form))		{			return false;		}		return $form;	}	/**	 * Method to save the form data.	 *	 * @param   array  The form data.	 * @return  boolean  True on success.	 */	public function save($data)	{		$db = $this->getDbo();		if ($userId = (int) $this->getState('user.id'))		{			$db->setQuery(				'DELETE FROM #__messages_cfg'.				' WHERE user_id = '. $userId			);			try			{				$db->execute();			}			catch (RuntimeException $e)			{				$this->setError($e->getMessage());				return false;			}			$tuples = array();			foreach ($data as $k => $v)			{				$tuples[] = '(' . $userId.', ' . $db->quote($k) . ', ' . $db->quote($v) . ')';			}			if ($tuples)			{				$db->setQuery(					'INSERT INTO #__messages_cfg'.					' (user_id, cfg_name, cfg_value)'.					' VALUES '.implode(',', $tuples)				);				try				{				$db->execute();				}				catch (RuntimeException $e)				{					$this->setError($e->getMessage());					return false;				}			}			return true;		}		else		{			$this->setError('COM_MESSAGES_ERR_INVALID_USER');			return false;		}	}}
<?php/** * @package     Joomla.Administrator * @subpackage  com_config * * @copyright   Copyright (C) 2005 - 2013 Open Source Matters, Inc. All rights reserved. * @license     GNU General Public License version 2 or later; see LICENSE.txt */defined('_JEXEC') or die;?><fieldset class="form-horizontal">	<legend><?php echo JText::_('COM_CONFIG_COOKIE_SETTINGS'); ?></legend>	<?php	foreach ($this->form->getFieldset('cookie') as $field):	?>		<div class="control-group">			<div class="control-label"><?php echo $field->label; ?></div>			<div class="controls"><?php echo $field->input; ?></div>		</div>	<?php	endforeach;	?></fieldset>
<?php/** * @package     Joomla.Platform * @subpackage  Table * * @copyright   Copyright (C) 2005 - 2013 Open Source Matters, Inc. All rights reserved. * @license     GNU General Public License version 2 or later; see LICENSE */defined('JPATH_PLATFORM') or die;/** * Extension table * Replaces plugins table * * @package     Joomla.Platform * @subpackage  Table * @since       11.1 */class JTableExtension extends JTable{	/**	 * Constructor	 *	 * @param   JDatabaseDriver  $db  Database driver object.	 *	 * @since   11.1	 */	public function __construct($db)	{		parent::__construct('#__extensions', 'extension_id', $db);	}	/**	 * Overloaded check function	 *	 * @return  boolean  True if the object is ok	 *	 * @see     JTable::check	 * @since   11.1	 */	public function check()	{		// Check for valid name		if (trim($this->name) == '' || trim($this->element) == '')		{			$this->setError(JText::_('JLIB_DATABASE_ERROR_MUSTCONTAIN_A_TITLE_EXTENSION'));			return false;		}		return true;	}	/**	 * Overloaded bind function	 *	 * @param   array  $array   Named array	 * @param   mixed  $ignore  An optional array or space separated list of properties	 * to ignore while binding.	 *	 * @return  mixed  Null if operation was satisfactory, otherwise returns an error	 *	 * @see     JTable::bind	 * @since   11.1	 */	public function bind($array, $ignore = '')	{		if (isset($array['params']) && is_array($array['params']))		{			$registry = new JRegistry;			$registry->loadArray($array['params']);			$array['params'] = (string) $registry;		}		if (isset($array['control']) && is_array($array['control']))		{			$registry = new JRegistry;			$registry->loadArray($array['control']);			$array['control'] = (string) $registry;		}		return parent::bind($array, $ignore);	}	/**	 * Method to create and execute a SELECT WHERE query.	 *	 * @param   array  $options  Array of options	 *	 * @return  string  The database query result	 *	 * @since   11.1	 */	public function find($options = array())	{		// Get the JDatabaseQuery object		$query = $this->_db->getQuery(true);		foreach ($options as $col => $val)		{			$query->where($col . ' = ' . $this->_db->quote($val));		}		$query->select($this->_db->quoteName('extension_id'))			->from($this->_db->quoteName('#__extensions'));		$this->_db->setQuery($query);		return $this->_db->loadResult();	}	/**	 * Method to set the publishing state for a row or list of rows in the database	 * table.  The method respects checked out rows by other users and will attempt	 * to checkin rows that it can after adjustments are made.	 *	 * @param   mixed    $pks     An optional array of primary key values to update.  If not	 *                            set the instance property value is used.	 * @param   integer  $state   The publishing state. eg. [0 = unpublished, 1 = published]	 * @param   integer  $userId  The user id of the user performing the operation.	 *	 * @return  boolean  True on success.	 *	 * @since   11.1	 */	public function publish($pks = null, $state = 1, $userId = 0)	{		$k = $this->_tbl_key;		// Sanitize input.		JArrayHelper::toInteger($pks);		$userId = (int) $userId;		$state = (int) $state;		// If there are no primary keys set check to see if the instance key is set.		if (empty($pks))		{			if ($this->$k)			{				$pks = array($this->$k);			}			// Nothing to set publishing state on, return false.			else			{				$this->setError(JText::_('JLIB_DATABASE_ERROR_NO_ROWS_SELECTED'));				return false;			}		}		// Build the WHERE clause for the primary keys.		$where = $k . '=' . implode(' OR ' . $k . '=', $pks);		// Determine if there is checkin support for the table.		if (!property_exists($this, 'checked_out') || !property_exists($this, 'checked_out_time'))		{			$checkin = '';		}		else		{			$checkin = ' AND (checked_out = 0 OR checked_out = ' . (int) $userId . ')';		}		// Get the JDatabaseQuery object		$query = $this->_db->getQuery(true);		// Update the publishing state for rows with the given primary keys.		$query->update($this->_db->quoteName($this->_tbl))			->set($this->_db->quoteName('enabled') . ' = ' . (int) $state)			->where('(' . $where . ')' . $checkin);		$this->_db->setQuery($query);		$this->_db->execute();		// If checkin is supported and all rows were adjusted, check them in.		if ($checkin && (count($pks) == $this->_db->getAffectedRows()))		{			// Checkin the rows.			foreach ($pks as $pk)			{				$this->checkin($pk);			}		}		// If the JTable instance value is in the list of primary keys that were set, set the instance.		if (in_array($this->$k, $pks))		{			$this->enabled = $state;		}		$this->setError('');		return true;	}}
<?php/** * @package     Joomla.Administrator * @subpackage  com_finder * * @copyright   Copyright (C) 2005 - 2013 Open Source Matters, Inc. All rights reserved. * @license     GNU General Public License version 2 or later; see LICENSE */defined('_JEXEC') or die;JLoader::register('FinderIndexerHelper', __DIR__ . '/helper.php');JLoader::register('FinderIndexerTaxonomy', __DIR__ . '/taxonomy.php');JLoader::register('FinderHelperRoute', JPATH_SITE . '/components/com_finder/helpers/route.php');JLoader::register('FinderHelperLanguage', JPATH_ADMINISTRATOR . '/components/com_finder/helpers/language.php');/** * Query class for the Finder indexer package. * * @package     Joomla.Administrator * @subpackage  com_finder * @since       2.5 */class FinderIndexerQuery{	/**	 * Flag to show whether the query can return results.	 *	 * @var    boolean	 * @since  2.5	 */	public $search;	/**	 * The query input string.	 *	 * @var    string	 * @since  2.5	 */	public $input;	/**	 * The language of the query.	 *	 * @var    string	 * @since  2.5	 */	public $language;	/**	 * The query string matching mode.	 *	 * @var    string	 * @since  2.5	 */	public $mode;	/**	 * The included tokens.	 *	 * @var    array	 * @since  2.5	 */	public $included = array();	/**	 * The excluded tokens.	 *	 * @var    array	 * @since  2.5	 */	public $excluded = array();	/**	 * The tokens to ignore because no matches exist.	 *	 * @var    array	 * @since  2.5	 */	public $ignored = array();	/**	 * The operators used in the query input string.	 *	 * @var    array	 * @since  2.5	 */	public $operators = array();	/**	 * The terms to highlight as matches.	 *	 * @var    array	 * @since  2.5	 */	public $highlight = array();	/**	 * The number of matching terms for the query input.	 *	 * @var    integer	 * @since  2.5	 */	public $terms;	/**	 * The static filter id.	 *	 * @var    string	 * @since  2.5	 */	public $filter;	/**	 * The taxonomy filters. This is a multi-dimensional array of taxonomy	 * branches as the first level and then the taxonomy nodes as the values.	 *	 * For example:	 * $filters = array(	 *     'Type' = array(10, 32, 29, 11, ...);	 *     'Label' = array(20, 314, 349, 91, 82, ...);	 *        ...	 * );	 *	 * @var    array	 * @since  2.5	 */	public $filters = array();	/**	 * The start date filter.	 *	 * @var    string	 * @since  2.5	 */	public $date1;	/**	 * The end date filter.	 *	 * @var    string	 * @since  2.5	 */	public $date2;	/**	 * The start date filter modifier.	 *	 * @var    string	 * @since  2.5	 */	public $when1;	/**	 * The end date filter modifier.	 *	 * @var    string	 * @since  2.5	 */	public $when2;	/**	 * Method to instantiate the query object.	 *	 * @param   array  $options  An array of query options.	 *	 * @since   2.5	 * @throws  Exception on database error.	 */	public function __construct($options)	{		// Get the input string.		$this->input = isset($options['input']) ? $options['input'] : null;		// Get the empty query setting.		$this->empty = isset($options['empty']) ? (bool) $options['empty'] : false;		// Get the input language.		$this->language = !empty($options['language']) ? $options['language'] : FinderIndexerHelper::getDefaultLanguage();		$this->language = FinderIndexerHelper::getPrimaryLanguage($this->language);		// Get the matching mode.		$this->mode = 'AND';		// Initialize the temporary date storage.		$this->dates = new JRegistry;		// Populate the temporary date storage.		if (isset($options['date1']) && !empty($options['date1']))		{			$this->dates->set('date1', $options['date1']);		}		if (isset($options['date2']) && !empty($options['date1']))		{			$this->dates->set('date2', $options['date2']);		}		if (isset($options['when1']) && !empty($options['date1']))		{			$this->dates->set('when1', $options['when1']);		}		if (isset($options['when2']) && !empty($options['date1']))		{			$this->dates->set('when2', $options['when2']);		}		// Process the static taxonomy filters.		if (isset($options['filter']) && !empty($options['filter']))		{			$this->processStaticTaxonomy($options['filter']);		}		// Process the dynamic taxonomy filters.		if (isset($options['filters']) && !empty($options['filters']))		{			$this->processDynamicTaxonomy($options['filters']);		}		// Get the date filters.		$d1 = $this->dates->get('date1');		$d2 = $this->dates->get('date2');		$w1 = $this->dates->get('when1');		$w2 = $this->dates->get('when2');		// Process the date filters.		if (!empty($d1) || !empty($d2))		{			$this->processDates($d1, $d2, $w1, $w2);		}		// Process the input string.		$this->processString($this->input, $this->language, $this->mode);		// Get the number of matching terms.		foreach ($this->included as $token)		{			$this->terms += count($token->matches);		}		// Remove the temporary date storage.		unset($this->dates);		/*		 * Lastly, determine whether this query can return a result set.		 */		// Check if we have a query string.		if (!empty($this->input))		{			$this->search = true;		}		// Check if we can search without a query string.		elseif ($this->empty && (!empty($this->filter) || !empty($this->filters) || !empty($this->date1) || !empty($this->date2)))		{			$this->search = true;		}		// We do not have a valid search query.		else		{			$this->search = false;		}	}	/**	 * Method to convert the query object into a URI string.	 *	 * @param   string  $base  The base URI. [optional]	 *	 * @return  string  The complete query URI.	 *	 * @since   2.5	 */	public function toURI($base = null)	{		// Set the base if not specified.		if (empty($base))		{			$base = 'index.php?option=com_finder&view=search';		}		// Get the base URI.		$uri = JURI::getInstance($base);		// Add the static taxonomy filter if present.		if (!empty($this->filter))		{			$uri->setVar('f', $this->filter);		}		// Get the filters in the request.		$input = JFactory::getApplication()->input;		$t = $input->request->get('t', array(), 'array');		// Add the dynamic taxonomy filters if present.		if (!empty($this->filters))		{			foreach ($this->filters as $nodes)			{				foreach ($nodes as $node)				{					if (!in_array($node, $t))					{						continue;					}					$uri->setVar('t[]', $node);				}			}		}		// Add the input string if present.		if (!empty($this->input))		{			$uri->setVar('q', $this->input);		}		// Add the start date if present.		if (!empty($this->date1))		{			$uri->setVar('d1', $this->date1);		}		// Add the end date if present.		if (!empty($this->date2))		{			$uri->setVar('d2', $this->date2);		}		// Add the start date modifier if present.		if (!empty($this->when1))		{			$uri->setVar('w1', $this->when1);		}		// Add the end date modifier if present.		if (!empty($this->when2))		{			$uri->setVar('w2', $this->when2);		}		// Add a menu item id if one is not present.		if (!$uri->getVar('Itemid'))		{			// Get the menu item id.			$query = array(				'view' => $uri->getVar('view'),				'f' => $uri->getVar('f'),				'q' => $uri->getVar('q')			);			$item = FinderHelperRoute::getItemid($query);			// Add the menu item id if present.			if ($item !== null)			{				$uri->setVar('Itemid', $item);			}		}		return $uri->toString(array('path', 'query'));	}	/**	 * Method to get a list of excluded search term ids.	 *	 * @return  array  An array of excluded term ids.	 *	 * @since   2.5	 */	public function getExcludedTermIds()	{		$results = array();		// Iterate through the excluded tokens and compile the matching terms.		for ($i = 0, $c = count($this->excluded); $i < $c; $i++)		{			$results = array_merge($results, $this->excluded[$i]->matches);		}		// Sanitize the terms.		//@TODO: Should toInteger use $return?		$return = array_unique($results);		JArrayHelper::toInteger($results);		return $results;	}	/**	 * Method to get a list of included search term ids.	 *	 * @return  array  An array of included term ids.	 *	 * @since   2.5	 */	public function getIncludedTermIds()	{		$results = array();		// Iterate through the included tokens and compile the matching terms.		for ($i = 0, $c = count($this->included); $i < $c; $i++)		{			// Check if we have any terms.			if (empty($this->included[$i]->matches))			{				continue;			}			// Get the term.			$term = $this->included[$i]->term;			// Prepare the container for the term if necessary.			if (!array_key_exists($term, $results))			{				$results[$term] = array();			}			// Add the matches to the stack.			$results[$term] = array_merge($results[$term], $this->included[$i]->matches);		}		// Sanitize the terms.		foreach ($results as $key => $value)		{			$results[$key] = array_unique($results[$key]);			JArrayHelper::toInteger($results[$key]);		}		return $results;	}	/**	 * Method to get a list of required search term ids.	 *	 * @return  array  An array of required term ids.	 *	 * @since   2.5	 */	public function getRequiredTermIds()	{		$results = array();		// Iterate through the included tokens and compile the matching terms.		for ($i = 0, $c = count($this->included); $i < $c; $i++)		{			// Check if the token is required.			if ($this->included[$i]->required)			{				// Get the term.				$term = $this->included[$i]->term;				// Prepare the container for the term if necessary.				if (!array_key_exists($term, $results))				{					$results[$term] = array();				}				// Add the matches to the stack.				$results[$term] = array_merge($results[$term], $this->included[$i]->matches);			}		}		// Sanitize the terms.		foreach ($results as $key => $value)		{			$results[$key] = array_unique($results[$key]);			JArrayHelper::toInteger($results[$key]);		}		return $results;	}	/**	 * Method to process the static taxonomy input. The static taxonomy input	 * comes in the form of a pre-defined search filter that is assigned to the	 * search form.	 *	 * @param   integer  $filterId  The id of static filter.	 *	 * @return  boolean  True on success, false on failure.	 *	 * @since   2.5	 * @throws  Exception on database error.	 */	protected function processStaticTaxonomy($filterId)	{		// Get the database object.		$db = JFactory::getDbo();		// Initialize user variables		$user = JFactory::getUser();		$groups = implode(',', $user->getAuthorisedViewLevels());		// Load the predefined filter.		$query = $db->getQuery(true)			->select('f.data, f.params')			->from($db->quoteName('#__finder_filters') . ' AS f')			->where('f.filter_id = ' . (int) $filterId);		$db->setQuery($query);		$return = $db->loadObject();		// Check the returned filter.		if (empty($return))		{			return false;		}		// Set the filter.		$this->filter = (int) $filterId;		// Get a parameter object for the filter date options.		$registry = new JRegistry;		$registry->loadString($return->params);		$params = $registry;		// Set the dates if not already set.		$this->dates->def('d1', $params->get('d1'));		$this->dates->def('d2', $params->get('d2'));		$this->dates->def('w1', $params->get('w1'));		$this->dates->def('w2', $params->get('w2'));		// Remove duplicates and sanitize.		$filters = explode(',', $return->data);		$filters = array_unique($filters);		JArrayHelper::toInteger($filters);		// Remove any values of zero.		if (array_search(0, $filters, true) !== false)		{			unset($filters[array_search(0, $filters, true)]);		}		// Check if we have any real input.		if (empty($filters))		{			return true;		}		/*		 * Create the query to get filters from the database. We do this for		 * two reasons: one, it allows us to ensure that the filters being used		 * are real; two, we need to sort the filters by taxonomy branch.		 */		$query->clear()			->select('t1.id, t1.title, t2.title AS branch')			->from($db->quoteName('#__finder_taxonomy') . ' AS t1')			->join('INNER', $db->quoteName('#__finder_taxonomy') . ' AS t2 ON t2.id = t1.parent_id')			->where('t1.state = 1')			->where('t1.access IN (' . $groups . ')')			->where('t1.id IN (' . implode(',', $filters) . ')')			->where('t2.state = 1')			->where('t2.access IN (' . $groups . ')');		// Load the filters.		$db->setQuery($query);		$results = $db->loadObjectList();		// Sort the filter ids by branch.		foreach ($results as $result)		{			$this->filters[$result->branch][$result->title] = (int) $result->id;		}		return true;	}	/**	 * Method to process the dynamic taxonomy input. The dynamic taxonomy input	 * comes in the form of select fields that the user chooses from. The	 * dynamic taxonomy input is processed AFTER the static taxonomy input	 * because the dynamic options can be used to further narrow a static	 * taxonomy filter.	 *	 * @param   array  $filters  An array of taxonomy node ids.	 *	 * @return  boolean  True on success.	 *	 * @since   2.5	 * @throws  Exception on database error.	 */	protected function processDynamicTaxonomy($filters)	{		// Initialize user variables		$user = JFactory::getUser();		$groups = implode(',', $user->getAuthorisedViewLevels());		// Remove duplicates and sanitize.		$filters = array_unique($filters);		JArrayHelper::toInteger($filters);		// Remove any values of zero.		if (array_search(0, $filters, true) !== false)		{			unset($filters[array_search(0, $filters, true)]);		}		// Check if we have any real input.		if (empty($filters))		{			return true;		}		// Get the database object.		$db = JFactory::getDbo();		$query = $db->getQuery(true);		/*		 * Create the query to get filters from the database. We do this for		 * two reasons: one, it allows us to ensure that the filters being used		 * are real; two, we need to sort the filters by taxonomy branch.		 */		$query->select('t1.id, t1.title, t2.title AS branch')			->from($db->quoteName('#__finder_taxonomy') . ' AS t1')			->join('INNER', $db->quoteName('#__finder_taxonomy') . ' AS t2 ON t2.id = t1.parent_id')			->where('t1.state = 1')			->where('t1.access IN (' . $groups . ')')			->where('t1.id IN (' . implode(',', $filters) . ')')			->where('t2.state = 1')			->where('t2.access IN (' . $groups . ')');		// Load the filters.		$db->setQuery($query);		$results = $db->loadObjectList();		// Cleared filter branches.		$cleared = array();		/*		 * Sort the filter ids by branch. Because these filters are designed to		 * override and further narrow the items selected in the static filter,		 * we will clear the values from the static filter on a branch by		 * branch basis before adding the dynamic filters. So, if the static		 * filter defines a type filter of "articles" and three "category"		 * filters but the user only limits the category further, the category		 * filters will be flushed but the type filters will not.		 */		foreach ($results as $result)		{			// Check if the branch has been cleared.			if (!in_array($result->branch, $cleared))			{				// Clear the branch.				$this->filters[$result->branch] = array();				// Add the branch to the cleared list.				$cleared[] = $result->branch;			}			// Add the filter to the list.			$this->filters[$result->branch][$result->title] = (int) $result->id;		}		return true;	}	/**	 * Method to process the query date filters to determine start and end	 * date limitations.	 *	 * @param   string  $date1  The first date filter.	 * @param   string  $date2  The second date filter.	 * @param   string  $when1  The first date modifier.	 * @param   string  $when2  The second date modifier.	 *	 * @return  boolean  True on success.	 *	 * @since   2.5	 */	protected function processDates($date1, $date2, $when1, $when2)	{		// Clean up the inputs.		$date1 = JString::trim(JString::strtolower($date1));		$date2 = JString::trim(JString::strtolower($date2));		$when1 = JString::trim(JString::strtolower($when1));		$when2 = JString::trim(JString::strtolower($when2));		// Get the time offset.		$offset = JFactory::getApplication()->getCfg('offset');		// Array of allowed when values.		$whens = array('before', 'after', 'exact');		// The value of 'today' is a special case that we need to handle.		if ($date1 === JString::strtolower(JText::_('COM_FINDER_QUERY_FILTER_TODAY')))		{			$today = JFactory::getDate('now', $offset);			$date1 = $today->format('%Y-%m-%d');		}		// Try to parse the date string.		$date = JFactory::getDate($date1, $offset);		// Check if the date was parsed successfully.		if ($date->toUnix() !== null)		{			// Set the date filter.			$this->date1 = $date->toSQL();			$this->when1 = in_array($when1, $whens) ? $when1 : 'before';		}		// The value of 'today' is a special case that we need to handle.		if ($date2 === JString::strtolower(JText::_('COM_FINDER_QUERY_FILTER_TODAY')))		{			$today = JFactory::getDate('now', $offset);			$date2 = $today->format('%Y-%m-%d');		}		// Try to parse the date string.		$date = JFactory::getDate($date2, $offset);		// Check if the date was parsed successfully.		if ($date->toUnix() !== null)		{			// Set the date filter.			$this->date2 = $date->toSQL();			$this->when2 = in_array($when2, $whens) ? $when2 : 'before';		}		return true;	}	/**	 * Method to process the query input string and extract required, optional,	 * and excluded tokens; taxonomy filters; and date filters.	 *	 * @param   string  $input  The query input string.	 * @param   string  $lang   The query input language.	 * @param   string  $mode   The query matching mode.	 *	 * @return  boolean  True on success.	 *	 * @since   2.5	 * @throws  Exception on database error.	 */	protected function processString($input, $lang, $mode)	{		// Clean up the input string.		$input = html_entity_decode($input, ENT_QUOTES, 'UTF-8');		$input = JString::strtolower($input);		$input = preg_replace('#\s+#mi', ' ', $input);		$input = JString::trim($input);		$debug = JFactory::getConfig()->get('debug_lang');		/*		 * First, we need to handle string based modifiers. String based		 * modifiers could potentially include things like "category:blah" or		 * "before:2009-10-21" or "type:article", etc.		 */		$patterns = array(			'before' => JText::_('COM_FINDER_FILTER_WHEN_BEFORE'),			'after' => JText::_('COM_FINDER_FILTER_WHEN_AFTER')		);		// Add the taxonomy branch titles to the possible patterns.		foreach (FinderIndexerTaxonomy::getBranchTitles() as $branch)		{			// Add the pattern.			$patterns[$branch] = JString::strtolower(JText::_(FinderHelperLanguage::branchSingular($branch)));		}		// Container for search terms and phrases.		$terms = array();		$phrases = array();		// Cleared filter branches.		$cleared = array();		/*		 * Compile the suffix pattern. This is used to match the values of the		 * filter input string. Single words can be input directly, multi-word		 * values have to be wrapped in double quotes.		 */		$quotes = html_entity_decode('&#8216;&#8217;&#39;', ENT_QUOTES, 'UTF-8');		$suffix = '(([\w\d' . $quotes . '-]+)|\"([\w\d\s' . $quotes . '-]+)\")';		/*		 * Iterate through the possible filter patterns and search for matches.		 * We need to match the key, colon, and a value pattern for the match		 * to be valid.		 */		foreach ($patterns as $modifier => $pattern)		{			$matches = array();			if ($debug)			{				$pattern = substr($pattern, 2, -2);			}			// Check if the filter pattern is in the input string.			if (preg_match('#' . $pattern . '\s*:\s*' . $suffix . '#mi', $input, $matches))			{				// Get the value given to the modifier.				$value = isset($matches[3]) ? $matches[3] : $matches[1];				// Now we have to handle the filter string.				switch ($modifier)				{					// Handle a before and after date filters.					case 'before':					case 'after':					{						// Get the time offset.						$offset = JFactory::getApplication()->getCfg('offset');						// Array of allowed when values.						$whens = array('before', 'after', 'exact');						// The value of 'today' is a special case that we need to handle.						if ($value === JString::strtolower(JText::_('COM_FINDER_QUERY_FILTER_TODAY')))						{							$today = JFactory::getDate('now', $offset);							$value = $today->format('%Y-%m-%d');						}						// Try to parse the date string.						$date = JFactory::getDate($value, $offset);						// Check if the date was parsed successfully.						if ($date->toUnix() !== null)						{							// Set the date filter.							$this->date1 = $date->toSQL();							$this->when1 = in_array($modifier, $whens) ? $modifier : 'before';						}						break;					}					// Handle a taxonomy branch filter.					default:						{						// Try to find the node id.						$return = FinderIndexerTaxonomy::getNodeByTitle($modifier, $value);						// Check if the node id was found.						if ($return)						{							// Check if the branch has been cleared.							if (!in_array($modifier, $cleared))							{								// Clear the branch.								$this->filters[$modifier] = array();								// Add the branch to the cleared list.								$cleared[] = $modifier;							}							// Add the filter to the list.							$this->filters[$modifier][$return->title] = (int) $return->id;						}						break;						}				}				// Clean up the input string again.				$input = str_replace($matches[0], '', $input);				$input = preg_replace('#\s+#mi', ' ', $input);				$input = JString::trim($input);			}		}		/*		 * Extract the tokens enclosed in double quotes so that we can handle		 * them as phrases.		 */		if (JString::strpos($input, '"') !== false)		{			$matches = array();			// Extract the tokens enclosed in double quotes.			if (preg_match_all('#\"([^"]+)\"#mi', $input, $matches))			{				/*				 * One or more phrases were found so we need to iterate through				 * them, tokenize them as phrases, and remove them from the raw				 * input string before we move on to the next processing step.				 */				foreach ($matches[1] as $key => $match)				{					// Find the complete phrase in the input string.					$pos = JString::strpos($input, $matches[0][$key]);					$len = JString::strlen($matches[0][$key]);					// Add any terms that are before this phrase to the stack.					if (JString::trim(JString::substr($input, 0, $pos)))					{						$terms = array_merge($terms, explode(' ', JString::trim(JString::substr($input, 0, $pos))));					}					// Strip out everything up to and including the phrase.					$input = JString::substr($input, $pos + $len);					// Clean up the input string again.					$input = preg_replace('#\s+#mi', ' ', $input);					$input = JString::trim($input);					// Get the number of words in the phrase.					$parts = explode(' ', $match);					// Check if the phrase is longer than three words.					if (count($parts) > 3)					{						/*						 * If the phrase is longer than three words, we need to						 * break it down into smaller chunks of phrases that						 * are less than or equal to three words. We overlap						 * the chunks so that we can ensure that a match is						 * found for the complete phrase and not just portions						 * of it.						 */						for ($i = 0, $c = count($parts); $i < $c; $i += 2)						{							// Set up the chunk.							$chunk = array();							// The chunk has to be assembled based on how many							// pieces are available to use.							switch ($c - $i)							{								// If only one word is left, we can break from								// the switch and loop because the last word								// was already used at the end of the last								// chunk.								case 1:									break 2;								// If there words are left, we use them both as								// the last chunk of the phrase and we're done.								case 2:									$chunk[] = $parts[$i];									$chunk[] = $parts[$i + 1];									break;								// If there are three or more words left, we								// build a three word chunk and continue on.								default:									$chunk[] = $parts[$i];									$chunk[] = $parts[$i + 1];									$chunk[] = $parts[$i + 2];									break;							}							// If the chunk is not empty, add it as a phrase.							if (count($chunk))							{								$phrases[] = implode(' ', $chunk);								$terms[] = implode(' ', $chunk);							}						}					}					else					{						// The phrase is <= 3 words so we can use it as is.						$phrases[] = $match;						$terms[] = $match;					}				}			}		}		// Add the remaining terms if present.		if (!empty($input))		{			$terms = array_merge($terms, explode(' ', $input));		}		// An array of our boolean operators. $operator => $translation		$operators = array(			'AND' => JString::strtolower(JText::_('COM_FINDER_QUERY_OPERATOR_AND')),			'OR' => JString::strtolower(JText::_('COM_FINDER_QUERY_OPERATOR_OR')),			'NOT' => JString::strtolower(JText::_('COM_FINDER_QUERY_OPERATOR_NOT'))		);		// If language debugging is enabled you need to ignore the debug strings in matching.		if (JDEBUG)		{			$debugStrings = array('**', '??');			$operators = str_replace($debugStrings, '', $operators);		}		/*		 * Iterate through the terms and perform any sorting that needs to be		 * done based on boolean search operators. Terms that are before an		 * and/or/not modifier have to be handled in relation to their operator.		 */		for ($i = 0, $c = count($terms); $i < $c; $i++)		{			// Check if the term is followed by an operator that we understand.			if (isset($terms[$i + 1]) && in_array($terms[$i + 1], $operators))			{				// Get the operator mode.				$op = array_search($terms[$i + 1], $operators);				// Handle the AND operator.				if ($op === 'AND' && isset($terms[$i + 2]))				{					// Tokenize the current term.					$token = FinderIndexerHelper::tokenize($terms[$i], $lang, true);					$token = $this->getTokenData($token);					// Set the required flag.					$token->required = true;					// Add the current token to the stack.					$this->included[] = $token;					$this->highlight = array_merge($this->highlight, array_keys($token->matches));					// Skip the next token (the mode operator).					$this->operators[] = $terms[$i + 1];					// Tokenize the term after the next term (current plus two).					$other = FinderIndexerHelper::tokenize($terms[$i + 2], $lang, true);					$other = $this->getTokenData($other);					// Set the required flag.					$other->required = true;					// Add the token after the next token to the stack.					$this->included[] = $other;					$this->highlight = array_merge($this->highlight, array_keys($other->matches));					// Remove the processed phrases if possible.					if (($pk = array_search($terms[$i], $phrases)) !== false)					{						unset($phrases[$pk]);					}					if (($pk = array_search($terms[$i + 2], $phrases)) !== false)					{						unset($phrases[$pk]);					}					// Remove the processed terms.					unset($terms[$i]);					unset($terms[$i + 1]);					unset($terms[$i + 2]);					// Adjust the loop.					$i += 2;					continue;				}				// Handle the OR operator.				elseif ($op === 'OR' && isset($terms[$i + 2]))				{					// Tokenize the current term.					$token = FinderIndexerHelper::tokenize($terms[$i], $lang, true);					$token = $this->getTokenData($token);					// Set the required flag.					$token->required = false;					// Add the current token to the stack.					if (count($token->matches))					{						$this->included[] = $token;						$this->highlight = array_merge($this->highlight, array_keys($token->matches));					}					else					{						$this->ignored[] = $token;					}					// Skip the next token (the mode operator).					$this->operators[] = $terms[$i + 1];					// Tokenize the term after the next term (current plus two).					$other = FinderIndexerHelper::tokenize($terms[$i + 2], $lang, true);					$other = $this->getTokenData($other);					// Set the required flag.					$other->required = false;					// Add the token after the next token to the stack.					if (count($other->matches))					{						$this->included[] = $other;						$this->highlight = array_merge($this->highlight, array_keys($other->matches));					}					else					{						$this->ignored[] = $other;					}					// Remove the processed phrases if possible.					if (($pk = array_search($terms[$i], $phrases)) !== false)					{						unset($phrases[$pk]);					}					if (($pk = array_search($terms[$i + 2], $phrases)) !== false)					{						unset($phrases[$pk]);					}					// Remove the processed terms.					unset($terms[$i]);					unset($terms[$i + 1]);					unset($terms[$i + 2]);					// Adjust the loop.					$i += 2;					continue;				}			}			// Handle an orphaned OR operator.			elseif (isset($terms[$i + 1]) && array_search($terms[$i], $operators) === 'OR')			{				// Skip the next token (the mode operator).				$this->operators[] = $terms[$i];				// Tokenize the next term (current plus one).				$other = FinderIndexerHelper::tokenize($terms[$i + 1], $lang, true);				$other = $this->getTokenData($other);				// Set the required flag.				$other->required = false;				// Add the token after the next token to the stack.				if (count($other->matches))				{					$this->included[] = $other;					$this->highlight = array_merge($this->highlight, array_keys($other->matches));				}				else				{					$this->ignored[] = $other;				}				// Remove the processed phrase if possible.				if (($pk = array_search($terms[$i + 1], $phrases)) !== false)				{					unset($phrases[$pk]);				}				// Remove the processed terms.				unset($terms[$i]);				unset($terms[$i + 1]);				// Adjust the loop.				$i += 1;				continue;			}			// Handle the NOT operator.			elseif (isset($terms[$i + 1]) && array_search($terms[$i], $operators) === 'NOT')			{				// Skip the next token (the mode operator).				$this->operators[] = $terms[$i];				// Tokenize the next term (current plus one).				$other = FinderIndexerHelper::tokenize($terms[$i + 1], $lang, true);				$other = $this->getTokenData($other);				// Set the required flag.				$other->required = false;				// Add the next token to the stack.				if (count($other->matches))				{					$this->excluded[] = $other;				}				else				{					$this->ignored[] = $other;				}				// Remove the processed phrase if possible.				if (($pk = array_search($terms[$i + 1], $phrases)) !== false)				{					unset($phrases[$pk]);				}				// Remove the processed terms.				unset($terms[$i]);				unset($terms[$i + 1]);				// Adjust the loop.				$i += 1;				continue;			}		}		/*		 * Iterate through any search phrases and tokenize them. We handle		 * phrases as autonomous units and do not break them down into two and		 * three word combinations.		 */		for ($i = 0, $c = count($phrases); $i < $c; $i++)		{			// Tokenize the phrase.			$token = FinderIndexerHelper::tokenize($phrases[$i], $lang, true);			$token = $this->getTokenData($token);			// Set the required flag.			$token->required = true;			// Add the current token to the stack.			$this->included[] = $token;			$this->highlight = array_merge($this->highlight, array_keys($token->matches));			// Remove the processed term if possible.			if (($pk = array_search($phrases[$i], $terms)) !== false)			{				unset($terms[$pk]);			}			// Remove the processed phrase.			unset($phrases[$i]);		}		/*		 * Handle any remaining tokens using the standard processing mechanism.		 */		if (!empty($terms))		{			// Tokenize the terms.			$terms = implode(' ', $terms);			$tokens = FinderIndexerHelper::tokenize($terms, $lang, false);			// Make sure we are working with an array.			$tokens = is_array($tokens) ? $tokens : array($tokens);			// Get the token data and required state for all the tokens.			foreach ($tokens as $token)			{				// Get the token data.				$token = $this->getTokenData($token);				// Set the required flag for the token.				$token->required = $mode === 'AND' ? ($token->phrase ? false : true) : false;				// Add the token to the appropriate stack.				if (count($token->matches) || $token->required)				{					$this->included[] = $token;					$this->highlight = array_merge($this->highlight, array_keys($token->matches));				}				else				{					$this->ignored[] = $token;				}			}		}		return true;	}	/**	 * Method to get the base and similar term ids and, if necessary, suggested	 * term data from the database. The terms ids are identified based on a	 * 'like' match in MySQL and/or a common stem. If no term ids could be	 * found, then we know that we will not be able to return any results for	 * that term and we should try to find a similar term to use that we can	 * match so that we can suggest the alternative search query to the user.	 *	 * @param   FinderIndexerToken  $token  A FinderIndexerToken object.	 *	 * @return  FinderIndexerToken  A FinderIndexerToken object.	 *	 * @since   2.5	 * @throws  Exception on database error.	 */	protected function getTokenData($token)	{		// Get the database object.		$db = JFactory::getDbo();		// Create a database query to build match the token.		$query = $db->getQuery(true)			->select('t.term, t.term_id')			->from('#__finder_terms AS t');		/*		 * If the token is a phrase, the lookup process is fairly simple. If		 * the token is a word, it is a little more complicated. We have to		 * create two queries to lookup the term and the stem respectively,		 * then union the result sets together. This is MUCH faster than using		 * an or condition in the database query.		 */		if ($token->phrase)		{			// Add the phrase to the query.			$query->where('t.term = ' . $db->quote($token->term))				->where('t.phrase = 1');		}		else		{			// Add the term to the query.			$query->where('t.term = ' . $db->quote($token->term))				->where('t.phrase = 0');			// Clone the query, replace the WHERE clause.			$sub = clone($query);			$sub->clear('where');			$sub->where('t.stem = ' . $db->quote($token->stem));			$sub->where('t.phrase = 0');			// Union the two queries.			$query->union($sub);		}		// Get the terms.		$db->setQuery($query);		$matches = $db->loadObjectList();		// Setup the container.		$token->matches = array();		// Check the matching terms.		if (!empty($matches))		{			// Add the matches to the token.			for ($i = 0, $c = count($matches); $i < $c; $i++)			{				$token->matches[$matches[$i]->term] = (int) $matches[$i]->term_id;			}		}		// If no matches were found, try to find a similar but better token.		if (empty($token->matches))		{			// Create a database query to get the similar terms.			//@TODO: PostgreSQL doesn't support SOUNDEX out of the box			$query->clear()				->select('DISTINCT t.term_id AS id, t.term AS term')				->from('#__finder_terms AS t')				// ->where('t.soundex = ' . soundex($db->quote($token->term)))				->where('t.soundex = SOUNDEX(' . $db->quote($token->term) . ')')				->where('t.phrase = ' . (int) $token->phrase);			// Get the terms.			$db->setQuery($query);			$results = $db->loadObjectList();			// Check if any similar terms were found.			if (empty($results))			{				return $token;			}			// Stack for sorting the similar terms.			$suggestions = array();			// Get the levnshtein distance for all suggested terms.			foreach ($results as $sk => $st)			{				// Get the levenshtein distance between terms.				$distance = levenshtein($st->term, $token->term);				// Make sure the levenshtein distance isn't over 50.				if ($distance < 50)				{					$suggestions[$sk] = $distance;				}			}			// Sort the suggestions.			asort($suggestions, SORT_NUMERIC);			// Get the closest match.			$keys = array_keys($suggestions);			$key = $keys[0];			// Add the suggested term.			$token->suggestion = $results[$key]->term;		}		return $token;	}}
<?php/** * @package     Joomla.Libraries * @subpackage  Form * * @copyright   Copyright (C) 2005 - 2013 Open Source Matters, Inc. All rights reserved. * @license     GNU General Public License version 2 or later; see LICENSE */defined('JPATH_PLATFORM') or die;JFormHelper::loadFieldClass('groupedlist');// Import the com_menus helper.require_once realpath(JPATH_ADMINISTRATOR . '/components/com_menus/helpers/menus.php');/** * Supports an HTML grouped select list of menu item grouped by menu * * @package     Joomla.Libraries * @subpackage  Form * @since       1.6 */class JFormFieldMenuitem extends JFormFieldGroupedList{	/**	 * The form field type.	 *	 * @var    string	 * @since  1.6	 */	public $type = 'MenuItem';	/**	 * Method to get the field option groups.	 *	 * @return  array  The field option objects as a nested array in groups.	 *	 * @since   1.6	 */	protected function getGroups()	{		$groups = array();		// Initialize some field attributes.		$menuType = (string) $this->element['menu_type'];		$published = $this->element['published'] ? explode(',', (string) $this->element['published']) : array();		$disable = $this->element['disable'] ? explode(',', (string) $this->element['disable']) : array();		$language = $this->element['language'] ? explode(',', (string) $this->element['language']) : array();		// Get the menu items.		$items = MenusHelper::getMenuLinks($menuType, 0, 0, $published, $language);		// Build group for a specific menu type.		if ($menuType)		{			// Initialize the group.			$groups[$menuType] = array();			// Build the options array.			foreach ($items as $link)			{				$groups[$menuType][] = JHtml::_('select.option', $link->value, $link->text, 'value', 'text', in_array($link->type, $disable));			}		}		// Build groups for all menu types.		else		{			// Build the groups arrays.			foreach ($items as $menu)			{				// Initialize the group.				$groups[$menu->menutype] = array();				// Build the options array.				foreach ($menu->links as $link)				{					$groups[$menu->menutype][] = JHtml::_(						'select.option', $link->value, $link->text, 'value', 'text',						in_array($link->type, $disable)					);				}			}		}		// Merge any additional groups in the XML definition.		$groups = array_merge(parent::getGroups(), $groups);		return $groups;	}}
<?php/** * @package     Joomla.Site * @subpackage  com_search * * @copyright   Copyright (C) 2005 - 2013 Open Source Matters, Inc. All rights reserved. * @license     GNU General Public License version 2 or later; see LICENSE.txt */defined('_JEXEC') or die;$lang = JFactory::getLanguage();$upper_limit = $lang->getUpperLimitSearchWord();JHtml::_('bootstrap.tooltip');?><form id="searchForm" action="<?php echo JRoute::_('index.php?option=com_search');?>" method="post">	<div class="btn-toolbar">		<div class="btn-group pull-left">			<input type="text" name="searchword" placeholder="<?php echo JText::_('COM_SEARCH_SEARCH_KEYWORD'); ?>" id="search-searchword" size="30" maxlength="<?php echo $upper_limit; ?>" value="<?php echo $this->escape($this->origkeyword); ?>" class="inputbox" />		</div>		<div class="btn-group pull-left">			<button name="Search" onclick="this.form.submit()" class="btn hasTooltip" title="<?php echo JText::_('COM_SEARCH_SEARCH');?>"><span class="icon-search"></span></button>		</div>		<input type="hidden" name="task" value="search" />		<div class="clearfix"></div>	</div>	<div class="searchintro<?php echo $this->params->get('pageclass_sfx'); ?>">		<?php if (!empty($this->searchword)):?>		<p><?php echo JText::plural('COM_SEARCH_SEARCH_KEYWORD_N_RESULTS', '<span class="badge badge-info">'. $this->total. '</span>');?></p>		<?php endif;?>	</div>	<fieldset class="phrases">		<legend><?php echo JText::_('COM_SEARCH_FOR');?>		</legend>			<div class="phrases-box">			<?php echo $this->lists['searchphrase']; ?>			</div>			<div class="ordering-box">			<label for="ordering" class="ordering">				<?php echo JText::_('COM_SEARCH_ORDERING');?>			</label>			<?php echo $this->lists['ordering'];?>			</div>	</fieldset>	<?php if ($this->params->get('search_areas', 1)) : ?>		<fieldset class="only">		<legend><?php echo JText::_('COM_SEARCH_SEARCH_ONLY');?></legend>		<?php foreach ($this->searchareas['search'] as $val => $txt) :			$checked = is_array($this->searchareas['active']) && in_array($val, $this->searchareas['active']) ? 'checked="checked"' : '';		?>		<label for="area-<?php echo $val;?>" class="checkbox">			<input type="checkbox" name="areas[]" value="<?php echo $val;?>" id="area-<?php echo $val;?>" <?php echo $checked;?> >			<?php echo JText::_($txt); ?>		</label>		<?php endforeach; ?>		</fieldset>	<?php endif; ?><?php if ($this->total > 0) : ?>	<div class="form-limit">		<label for="limit">			<?php echo JText::_('JGLOBAL_DISPLAY_NUM'); ?>		</label>		<?php echo $this->pagination->getLimitBox(); ?>	</div><p class="counter">		<?php echo $this->pagination->getPagesCounter(); ?>	</p><?php endif; ?></form>
<?php/** * @package     Joomla.Administrator * @subpackage  com_users * * @copyright   Copyright (C) 2005 - 2013 Open Source Matters, Inc. All rights reserved. * @license     GNU General Public License version 2 or later; see LICENSE.txt */defined('_JEXEC') or die;// Include the component HTML helpers.JHtml::addIncludePath(JPATH_COMPONENT.'/helpers/html');// Load the tooltip behavior.JHtml::_('behavior.tooltip');$listOrder = $this->escape($this->state->get('list.ordering'));$listDirn  = $this->escape($this->state->get('list.direction'));?><form action="<?php echo JRoute::_('index.php?option=com_users&view=debuggroup&user_id='.(int) $this->state->get('filter.user_id'));?>" method="post" name="adminForm" id="adminForm"><?php if (!empty( $this->sidebar)) : ?>	<div id="j-sidebar-container" class="span2">		<?php echo $this->sidebar; ?>	</div>	<div id="j-main-container" class="span10"><?php else : ?>	<div id="j-main-container"><?php endif;?>		<div id="filter-bar" class="btn-toolbar">			<div class="filter-search btn-group pull-left">				<input type="text" name="filter_search" id="filter_search" placeholder="<?php echo JText::_('COM_USERS_SEARCH_ASSETS'); ?>" value="<?php echo $this->escape($this->state->get('filter.search')); ?>" title="<?php echo JText::_('COM_USERS_SEARCH_ASSETS'); ?>" />			</div>			<div class="btn-group pull-left">				<button type="submit" class="btn tip" title="<?php echo JText::_('JSEARCH_FILTER_SUBMIT'); ?>"><i class="icon-search"></i></button>				<button type="button" class="btn tip" onclick="document.id('filter_search').value='';this.form.submit();" title="<?php echo JText::_('JSEARCH_RESET'); ?>"><i class="icon-remove"></i></button>			</div>		</div>		<div class="clearfix"> </div>		<table class="table table-striped">			<thead>				<tr>					<th class="left">						<?php echo JHtml::_('grid.sort', 'COM_USERS_HEADING_ASSET_TITLE', 'a.title', $listDirn, $listOrder); ?>					</th>					<th class="left">						<?php echo JHtml::_('grid.sort', 'COM_USERS_HEADING_ASSET_NAME', 'a.name', $listDirn, $listOrder); ?>					</th>					<?php foreach ($this->actions as $key => $action) : ?>					<th width="5%" class="nowrap center">						<span class="hasTip" title="<?php echo htmlspecialchars(JText::_($key) . '::' . JText::_($action[1]), ENT_COMPAT, 'UTF-8'); ?>"><?php echo JText::_($key); ?></span>					</th>					<?php endforeach; ?>					<th width="5%" class="nowrap center">						<?php echo JHtml::_('grid.sort', 'COM_USERS_HEADING_LFT', 'a.lft', $listDirn, $listOrder); ?>					</th>					<th width="1%" class="nowrap center">						<?php echo JHtml::_('grid.sort', 'JGRID_HEADING_ID', 'a.id', $listDirn, $listOrder); ?>					</th>				</tr>			</thead>			<tfoot>				<tr>					<td colspan="15">						<?php echo $this->pagination->getListFooter(); ?>					</td>				</tr>			</tfoot>			<tbody>				<tr class="row1">					<td colspan="15">						<div>							<?php echo JText::_('COM_USERS_DEBUG_LEGEND'); ?>							<span class="btn disabled btn-micro btn-warning"><i class="icon-white icon-ban-circle"></i></span> <?php echo JText::_('COM_USERS_DEBUG_IMPLICIT_DENY');?>							<span class="btn disabled btn-micro btn-success"><i class="icon-white icon-ok"></i></span> <?php echo JText::_('COM_USERS_DEBUG_EXPLICIT_ALLOW');?>							<span class="btn disabled btn-micro btn-danger"><i class="icon-white icon-remove"></i></span> <?php echo JText::_('COM_USERS_DEBUG_EXPLICIT_DENY');?>						</div>					</td>				</tr>				<?php foreach ($this->items as $i => $item) : ?>					<tr class="row0">						<td>							<?php echo $this->escape($item->title); ?>						</td>						<td class="nowrap">							<?php echo str_repeat('<span class="gi">|&mdash;</span>', $item->level) ?>							<?php echo $this->escape($item->name); ?>						</td>						<?php foreach ($this->actions as $action) : ?>							<?php							$name  = $action[0];							$check = $item->checks[$name];							if ($check === true) :								$class  = 'icon-ok';								$button = 'btn-success';							elseif ($check === false) :								$class  = 'icon-remove';								$button = 'btn-danger';							elseif ($check === null) :								$class  = 'icon-ban-circle';								$button = 'btn-warning';							else :								$class  = '';								$button = '';							endif;							?>						<td class="center">							<span class="btn disabled btn-micro <?php echo $button; ?>">								<i class="icon-white <?php echo $class; ?>"></i>							</span>						</td>						<?php endforeach; ?>						<td class="center">							<?php echo (int) $item->lft; ?>							- <?php echo (int) $item->rgt; ?>						</td>						<td class="center">							<?php echo (int) $item->id; ?>						</td>					</tr>				<?php endforeach; ?>			</tbody>		</table>		<input type="hidden" name="task" value="" />		<input type="hidden" name="boxchecked" value="0" />		<input type="hidden" name="filter_order" value="<?php echo $listOrder; ?>" />		<input type="hidden" name="filter_order_Dir" value="<?php echo $listDirn; ?>" />		<?php echo JHtml::_('form.token'); ?>	</div></form>
<?php/** * @package     Joomla.Site * @subpackage  com_contact * * @copyright   Copyright (C) 2005 - 2013 Open Source Matters, Inc. All rights reserved. * @license     GNU General Public License version 2 or later; see LICENSE.txt */defined('_JEXEC') or die;/** * Content categories view. * * @package     Joomla.Site * @subpackage  com_contact * @since       1.6 */class ContactViewCategories extends JViewLegacy{	protected $state = null;	protected $item = null;	protected $items = null;	protected $pagination = null;	/**	 * Display the view	 *	 * @return  mixed  False on error, null otherwise.	 */	public function display($tpl = null)	{		$state		= $this->get('State');		$items		= $this->get('Items');		$parent		= $this->get('Parent');		// Check for errors.		if (count($errors = $this->get('Errors')))		{			JError::raiseWarning(500, implode("\n", $errors));			return false;		}		if ($items === false)		{			return JError::raiseError(404, JText::_('JGLOBAL_CATEGORY_NOT_FOUND'));		}		if ($parent == false)		{			return JError::raiseError(404, JText::_('JGLOBAL_CATEGORY_NOT_FOUND'));		}		$params = &$state->params;		$items = array($parent->id => $items);		//Escape strings for HTML output		$this->pageclass_sfx = htmlspecialchars($params->get('pageclass_sfx'));		$this->maxLevelcat = $params->get('maxLevelcat', -1);		$this->params = &$params;		$this->parent = &$parent;		$this->items = &$items;		$this->_prepareDocument();		parent::display($tpl);	}	/**	 * Prepares the document	 */	protected function _prepareDocument()	{		$app	= JFactory::getApplication();		$menus	= $app->getMenu();		$title	= null;		// Because the application sets a default page title,		// we need to get it from the menu item itself		$menu = $menus->getActive();		if ($menu)		{			$this->params->def('page_heading', $this->params->def('page_title', $menu->title));		}		else		{			$this->params->def('page_heading', JText::_('COM_CONTACT_DEFAULT_PAGE_TITLE'));		}		$title = $this->params->get('page_title', '');		if (empty($title))		{			$title = $app->getCfg('sitename');		}		elseif ($app->getCfg('sitename_pagetitles', 0) == 1)		{			$title = JText::sprintf('JPAGETITLE', $app->getCfg('sitename'), $title);		}		elseif ($app->getCfg('sitename_pagetitles', 0) == 2)		{			$title = JText::sprintf('JPAGETITLE', $title, $app->getCfg('sitename'));		}		$this->document->setTitle($title);		if ($this->params->get('menu-meta_description'))		{			$this->document->setDescription($this->params->get('menu-meta_description'));		}		if ($this->params->get('menu-meta_keywords'))		{			$this->document->setMetadata('keywords', $this->params->get('menu-meta_keywords'));		}		if ($this->params->get('robots'))		{			$this->document->setMetadata('robots', $this->params->get('robots'));		}	}}
<?php/** * @package     Joomla.Libraries * @subpackage  HTML * * @copyright   Copyright (C) 2005 - 2013 Open Source Matters, Inc. All rights reserved. * @license     GNU General Public License version 2 or later; see LICENSE */defined('JPATH_PLATFORM') or die;/** * Utility class for Bootstrap elements. * * @package     Joomla.Libraries * @subpackage  HTML * @since       3.0 */abstract class JHtmlBootstrap{	/**	 * @var    array  Array containing information for loaded files	 * @since  3.0	 */	protected static $loaded = array();	/**	 * Add javascript support for Bootstrap alerts	 *	 * @param   string  $selector  Common class for the alerts	 *	 * @return  void	 *	 * @since   3.0	 */	public static function alert($selector = 'alert')	{		// Only load once		if (isset(self::$loaded[__METHOD__][$selector]))		{			return;		}		// Include Bootstrap framework		self::framework();		// Attach the alerts to the document		JFactory::getDocument()->addScriptDeclaration(			"(function($){				$('.$selector').alert();				})(jQuery);"		);		self::$loaded[__METHOD__][$selector] = true;		return;	}	/**	 * Add javascript support for Bootstrap carousels	 *	 * @param   string  $selector  Common class for the carousels.	 * @param   array   $params    An array of options for the modal.	 *                             Options for the modal can be:	 *                             - interval  number  The amount of time to delay between automatically cycling an item.	 *                                                 If false, carousel will not automatically cycle.	 *                             - pause     string  Pauses the cycling of the carousel on mouseenter and resumes the cycling	 *                                                 of the carousel on mouseleave.	 *	 * @return  void	 *	 * @since   3.0	 */	public static function carousel($selector = 'carousel', $params = array())	{		$sig = md5(serialize(array($selector, $params)));		if (!isset(self::$loaded[__METHOD__][$sig]))		{			// Include Bootstrap framework			self::framework();			// Setup options object			$opt['interval'] = (isset($params['interval']) && ($params['interval'])) ? (int) $params['interval'] : 5000;			$opt['pause'] = (isset($params['pause']) && ($params['pause'])) ? $params['pause'] : 'hover';			$options = JHtml::getJSObject($opt);			// Attach the carousel to document			JFactory::getDocument()->addScriptDeclaration(				"(function($){					$('.$selector').carousel($options);					})(jQuery);"			);			// Set static array			self::$loaded[__METHOD__][$sig] = true;		}		return;	}	/**	 * Add javascript support for Bootstrap dropdowns	 *	 * @param   string  $selector  Common class for the dropdowns	 *	 * @return  void	 *	 * @since   3.0	 */	public static function dropdown($selector = 'dropdown-toggle')	{		// Only load once		if (isset(self::$loaded[__METHOD__][$selector]))		{			return;		}		// Include Bootstrap framework		self::framework();		// Attach the dropdown to the document		JFactory::getDocument()->addScriptDeclaration(			"(function($){				$('.$selector').dropdown();				})(jQuery);"		);		self::$loaded[__METHOD__][$selector] = true;		return;	}	/**	 * Method to load the Bootstrap JavaScript framework into the document head	 *	 * If debugging mode is on an uncompressed version of Bootstrap is included for easier debugging.	 *	 * @param   mixed  $debug  Is debugging mode on? [optional]	 *	 * @return  void	 *	 * @since   3.0	 */	public static function framework($debug = null)	{		// Only load once		if (!empty(self::$loaded[__METHOD__]))		{			return;		}		// Load jQuery		JHtml::_('jquery.framework');		// If no debugging value is set, use the configuration setting		if ($debug === null)		{			$config = JFactory::getConfig();			$debug = (boolean) $config->get('debug');		}		JHtml::_('script', 'jui/bootstrap.min.js', false, true, false, false, $debug);		self::$loaded[__METHOD__] = true;		return;	}	/**	 * Add javascript support for Bootstrap modals	 *	 * @param   string  $selector  The ID selector for the modal.	 * @param   array   $params    An array of options for the modal.	 *                             Options for the modal can be:	 *                             - backdrop  boolean  Includes a modal-backdrop element.	 *                             - keyboard  boolean  Closes the modal when escape key is pressed.	 *                             - show      boolean  Shows the modal when initialized.	 *                             - remote    string   An optional remote URL to load	 *	 * @return  void	 *	 * @since   3.0	 */	public static function modal($selector = 'modal', $params = array())	{		$sig = md5(serialize(array($selector, $params)));		if (!isset(self::$loaded[__METHOD__][$sig]))		{			// Include Bootstrap framework			self::framework();			// Setup options object			$opt['backdrop'] = (isset($params['backdrop']) && ($params['backdrop'])) ? (boolean) $params['backdrop'] : true;			$opt['keyboard'] = (isset($params['keyboard']) && ($params['keyboard'])) ? (boolean) $params['keyboard'] : true;			$opt['show'] = (isset($params['show']) && ($params['show'])) ? (boolean) $params['show'] : true;			$opt['remote'] = (isset($params['remote']) && ($params['remote'])) ? (boolean) $params['remote'] : '';			$options = JHtml::getJSObject($opt);			// Attach the modal to document			JFactory::getDocument()->addScriptDeclaration(				"(function($){					$('#$selector').modal($options);					})(jQuery);"			);			// Set static array			self::$loaded[__METHOD__][$sig] = true;		}		return;	}	/**	 * Method to render a Bootstrap modal	 *	 * @param   string  $selector  The ID selector for the modal.	 * @param   array   $params    An array of options for the modal.	 * @param   string  $footer    Optional markup for the modal footer	 *	 * @return  string  HTML markup for a modal	 *	 * @since   3.0	 */	public static function renderModal($selector = 'modal', $params = array(), $footer = '')	{		// Ensure the behavior is loaded		self::modal($selector, $params);		$html = "<div class=\"modal hide fade\" id=\"" . $selector . "\">\n";		$html .= "<div class=\"modal-header\">\n";		$html .= "<button type=\"button\" class=\"close\" data-dismiss=\"modal\"></button>\n";		$html .= "<h3>" . $params['title'] . "</h3>\n";		$html .= "</div>\n";		$html .= "<div id=\"" . $selector . "-container\">\n";		$html .= "</div>\n";		$html .= "</div>\n";		$html .= "<script>";		$html .= "jQuery('#" . $selector . "').on('show', function () {\n";		$html .= "document.getElementById('" . $selector . "-container').innerHTML = '<div class=\"modal-body\"><iframe class=\"iframe\" src=\""			. $params['url'] . "\" height=\"" . $params['height'] . "\" width=\"" . $params['width'] . "\"></iframe></div>" . $footer . "';\n";		$html .= "});\n";		$html .= "</script>";		return $html;	}	/**	 * Add javascript support for Bootstrap popovers	 *	 * Use element's Title as popover content	 *	 * @param   string  $selector  Selector for the tooltip	 * @param   array   $params    An array of options for the tooltip.	 *                  Options for the tooltip can be:	 *                      animation  boolean          apply a css fade transition to the tooltip	 *                      html       boolean          Insert HTML into the tooltip. If false, jQuery's text method will be used to insert	 *                                                  content into the dom.	 *                      placement  string|function  how to position the tooltip - top | bottom | left | right	 *                      selector   string           If a selector is provided, tooltip objects will be delegated to the specified targets.	 *                      title      string|function  default title value if `title` tag isn't present	 *                      trigger    string           how tooltip is triggered - hover | focus | manual	 *                      content    string|function  default content value if `data-content` attribute isn't present	 *                      delay      number|object    delay showing and hiding the tooltip (ms) - does not apply to manual trigger type	 *                                                  If a number is supplied, delay is applied to both hide/show	 *                                                  Object structure is: delay: { show: 500, hide: 100 }	 *	 * @return  void	 *	 * @since   3.0	 */	public static function popover($selector = '.hasPopover', $params = array())	{		// Only load once		if (isset(self::$loaded[__METHOD__][$selector]))		{			return;		}		// Include Bootstrap framework		self::framework();		$opt['animation'] = isset($params['animation']) ? $params['animation'] : null;		$opt['html'] = isset($params['html']) ? $params['html'] : null;		$opt['placement'] = isset($params['placement']) ? $params['placement'] : null;		$opt['selector'] = isset($params['selector']) ? $params['selector'] : null;		$opt['title'] = isset($params['title']) ? $params['title'] : null;		$opt['trigger'] = isset($params['trigger']) ? $params['trigger'] : 'hover';		$opt['content'] = isset($params['content']) ? $params['content'] : null;		$opt['delay'] = isset($params['delay']) ? $params['delay'] : null;		$options = JHtml::getJSObject($opt);		// Attach the popover to the document		JFactory::getDocument()->addScriptDeclaration(			"jQuery(document).ready(function()			{				jQuery('" . $selector . "').popover(" . $options . ");			});"		);		self::$loaded[__METHOD__][$selector] = true;		return;	}	/**	 * Add javascript support for Bootstrap ScrollSpy	 *	 * @param   string  $selector  The ID selector for the ScrollSpy element.	 * @param   array   $params    An array of options for the ScrollSpy.	 *                             Options for the modal can be:	 *                             - offset  number  Pixels to offset from top when calculating position of scroll.	 *	 * @return  void	 *	 * @since   3.0	 */	public static function scrollspy($selector = 'navbar', $params = array())	{		$sig = md5(serialize(array($selector, $params)));		if (!isset(self::$loaded[__METHOD__][$sig]))		{			// Include Bootstrap framework			self::framework();			// Setup options object			$opt['offset'] = (isset($params['offset']) && ($params['offset'])) ? (int) $params['offset'] : 10;			$options = JHtml::getJSObject($opt);			// Attach ScrollSpy to document			JFactory::getDocument()->addScriptDeclaration(				"(function($){					$('#$selector').scrollspy($options);					})(jQuery);"			);			// Set static array			self::$loaded[__METHOD__][$sig] = true;		}		return;	}	/**	 * Add javascript support for Bootstrap tooltips	 *	 * Add a title attribute to any element in the form	 * title="title::text"	 *	 * @param   string  $selector  The ID selector for the tooltip.	 * @param   array   $params    An array of options for the tooltip.	 *                             Options for the tooltip can be:	 *                             - animation  boolean          Apply a CSS fade transition to the tooltip	 *                             - html       boolean          Insert HTML into the tooltip. If false, jQuery's text method will be used to insert	 *                                                           content into the dom.	 *                             - placement  string|function  How to position the tooltip - top | bottom | left | right	 *                             - selector   string           If a selector is provided, tooltip objects will be delegated to the specified targets.	 *                             - title      string|function  Default title value if `title` tag isn't present	 *                             - trigger    string           How tooltip is triggered - hover | focus | manual	 *                             - delay      number           Delay showing and hiding the tooltip (ms) - does not apply to manual trigger type	 *                                                           If a number is supplied, delay is applied to both hide/show	 *                                                           Object structure is: delay: { show: 500, hide: 100 }	 *	 * @return  void	 *	 * @since   3.0	 */	public static function tooltip($selector = '.hasTooltip', $params = array())	{		if (!isset(self::$loaded[__METHOD__][$selector]))		{			// Include Bootstrap framework			self::framework();			// Setup options object			$opt['animation'] = (isset($params['animation']) && ($params['animation'])) ? (boolean) $params['animation'] : null;			$opt['html'] = (isset($params['html']) && ($params['html'])) ? (boolean) $params['html'] : null;			$opt['placement'] = (isset($params['placement']) && ($params['placement'])) ? (string) $params['placement'] : null;			$opt['selector'] = (isset($params['selector']) && ($params['selector'])) ? (string) $params['selector'] : null;			$opt['title'] = (isset($params['title']) && ($params['title'])) ? (string) $params['title'] : null;			$opt['trigger'] = (isset($params['trigger']) && ($params['trigger'])) ? (string) $params['trigger'] : null;			$opt['delay'] = (isset($params['delay']) && ($params['delay'])) ? (int) $params['delay'] : null;			$options = JHtml::getJSObject($opt);			// Attach tooltips to document			JFactory::getDocument()->addScriptDeclaration(				"jQuery(document).ready(function()				{					jQuery('" . $selector . "').tooltip(" . $options . ");				});"			);			// Set static array			self::$loaded[__METHOD__][$selector] = true;		}		return;	}	/**	 * Add javascript support for Bootstrap accordians and insert the accordian	 *	 * @param   string  $selector  The ID selector for the tooltip.	 * @param   array   $params    An array of options for the tooltip.	 *                             Options for the tooltip can be:	 *                             - parent  selector  If selector then all collapsible elements under the specified parent will be closed when this	 *                                                 collapsible item is shown. (similar to traditional accordion behavior)	 *                             - toggle  boolean   Toggles the collapsible element on invocation	 *                             - active  string    Sets the active slide during load	 *	 * @return  string  HTML for the accordian	 *	 * @since   3.0	 */	public static function startAccordion($selector = 'myAccordian', $params = array())	{		$sig = md5(serialize(array($selector, $params)));		if (!isset(self::$loaded[__METHOD__][$sig]))		{			// Include Bootstrap framework			self::framework();			// Setup options object			$opt['parent'] = (isset($params['parent']) && ($params['parent'])) ? (boolean) $params['parent'] : false;			$opt['toggle'] = (isset($params['toggle']) && ($params['toggle'])) ? (boolean) $params['toggle'] : true;			$opt['active'] = (isset($params['active']) && ($params['active'])) ? (string) $params['active'] : '';			$options = JHtml::getJSObject($opt);			// Attach accordion to document			JFactory::getDocument()->addScriptDeclaration(				"(function($){					$('#$selector').collapse($options);				})(jQuery);"			);			// Set static array			self::$loaded[__METHOD__][$sig] = true;			self::$loaded[__METHOD__]['active'] = $opt['active'];		}		return '<div id="' . $selector . '" class="accordion">';	}	/**	 * Close the current accordion	 *	 * @return  string  HTML to close the accordian	 *	 * @since   3.0	 */	public static function endAccordion()	{		return '</div>';	}	/**	 * Begins the display of a new accordion slide.	 *	 * @param   string  $selector  Identifier of the accordion group.	 * @param   string  $text      Text to display.	 * @param   string  $id        Identifier of the slide.	 * @param   string  $class     Class of the accordion group.	 *	 * @return  string  HTML to add the slide	 *	 * @since   3.0	 */	public static function addSlide($selector, $text, $id, $class = '')	{		$in = (self::$loaded['JHtmlBootstrap::startAccordion']['active'] == $id) ? ' in' : '';		$class = (!empty($class)) ? ' ' . $class : '';		$html = '<div class="accordion-group' . $class . '">'			. '<div class="accordion-heading">'			. '<strong><a href="#' . $id . '" data-parent="#' . $selector . '" data-toggle="collapse" class="accordion-toggle">'			. $text			. '</a></strong>'			. '</div>'			. '<div class="accordion-body collapse' . $in . '" id="' . $id . '">'			. '<div class="accordion-inner">';		return $html;	}	/**	 * Close the current slide	 *	 * @return  string  HTML to close the slide	 *	 * @since   3.0	 */	public static function endSlide()	{		return '</div></div></div>';	}	/**	 * Creates a tab pane	 *	 * @param   string  $selector  The pane identifier.	 * @param   array   $params    The parameters for the pane	 *	 * @return  string	 *	 * @since   3.1	 */	public static function startTabSet($selector = 'myTab', $params = array())	{		$sig = md5(serialize(array($selector, $params)));		if (!isset(self::$loaded[__METHOD__][$sig]))		{			// Include Bootstrap framework			self::framework();			// Setup options object			$opt['active'] = (isset($params['active']) && ($params['active'])) ? (string) $params['active'] : '';			$options = JHtml::getJSObject($opt);			// Attach tabs to document			JFactory::getDocument()				->addScriptDeclaration(JLayoutHelper::render('libraries.cms.html.bootstrap.starttabsetscript', array('selector' => $selector)));			// Set static array			self::$loaded[__METHOD__][$sig] = true;			self::$loaded[__METHOD__][$selector]['active'] = $opt['active'];		}		$html = JLayoutHelper::render('libraries.cms.html.bootstrap.starttabset', array('selector' => $selector));		return $html;	}	/**	 * Close the current tab pane	 *	 * @return  string  HTML to close the pane	 *	 * @since   3.1	 */	public static function endTabSet()	{		$html = JLayoutHelper::render('libraries.cms.html.bootstrap.endtabset');		return $html;	}	/**	 * Begins the display of a new tab content panel.	 *	 * @param   string  $selector  Identifier of the panel.	 * @param   string  $id        The ID of the div element	 * @param   string  $title     The title text for the new UL tab	 *	 * @return  string  HTML to start a new panel	 *	 * @since   3.1	 */	public static function addTab($selector, $id, $title)	{		static $tabScriptLayout = null;		static $tabLayout = null;		$tabScriptLayout = is_null($tabScriptLayout) ? new JLayoutFile('libraries.cms.html.bootstrap.addtabscript') : $tabScriptLayout;		$tabLayout = is_null($tabLayout) ? new JLayoutFile('libraries.cms.html.bootstrap.addtab') : $tabLayout;		$active = (self::$loaded['JHtmlBootstrap::startTabSet'][$selector]['active'] == $id) ? ' active' : '';		// Inject tab into UL		JFactory::getDocument()		->addScriptDeclaration($tabScriptLayout->render(array('selector' => $selector,'id' => $id, 'active' => $active, 'title' => $title)));		$html = $tabLayout->render(array('id' => $id, 'active' => $active));		return $html;	}	/**	 * Close the current tab content panel	 *	 * @return  string  HTML to close the pane	 *	 * @since   3.1	 */	public static function endTab()	{		$html = JLayoutHelper::render('libraries.cms.html.bootstrap.endtab');		return $html;	}	/**	 * Creates a tab pane	 *	 * @param   string  $selector  The pane identifier.	 * @param   array   $params    The parameters for the pane	 *	 * @return  string	 *	 * @since   3.0	 * @deprecated  4.0	Use JHtml::_('bootstrap.startTabSet') instead.	 */	public static function startPane($selector = 'myTab', $params = array())	{		$sig = md5(serialize(array($selector, $params)));		if (!isset(self::$loaded['JHtmlBootstrap::startTabSet'][$sig]))		{			// Include Bootstrap framework			self::framework();			// Setup options object			$opt['active'] = (isset($params['active']) && ($params['active'])) ? (string) $params['active'] : '';			$options = JHtml::getJSObject($opt);			// Attach tooltips to document			JFactory::getDocument()				->addScriptDeclaration(					"(function($){			$('#$selector a').click(function (e)			{			e.preventDefault();			$(this).tab('show');		});		})(jQuery);");			// Set static array			self::$loaded['JHtmlBootstrap::startTabSet'][$sig] = true;			self::$loaded['JHtmlBootstrap::startTabSet'][$selector]['active'] = $opt['active'];		}		return '<div class="tab-content" id="' . $selector . 'Content">';	}	/**	 * Close the current tab pane	 *	 * @return  string  HTML to close the pane	 *	 * @since   3.0	 * @deprecated  4.0	Use JHtml::_('bootstrap.endTabSet') instead.	 */	public static function endPane()	{		return '</div>';	}	/**	 * Begins the display of a new tab content panel.	 *	 * @param   string  $selector  Identifier of the panel.	 * @param   string  $id        The ID of the div element	 *	 * @return  string  HTML to start a new panel	 *	 * @since   3.0	 * @deprecated  4.0 Use JHtml::_('bootstrap.addTab') instead.	 */	public static function addPanel($selector, $id)	{		$active = (self::$loaded['JHtmlBootstrap::startTabSet'][$selector]['active'] == $id) ? ' active' : '';		return '<div id="' . $id . '" class="tab-pane' . $active . '">';	}	/**	 * Close the current tab content panel	 *	 * @return  string  HTML to close the pane	 *	 * @since   3.0	 * @deprecated  4.0 Use JHtml::_('bootstrap.endTab') instead.	 */	public static function endPanel()	{		return '</div>';	}	/**	 * Loads CSS files needed by Bootstrap	 *	 * @param   boolean  $includeMainCss  If true, main bootstrap.css files are loaded	 * @param   string   $direction       rtl or ltr direction. If empty, ltr is assumed	 * @param   array    $attribs         Optional array of attributes to be passed to JHtml::_('stylesheet')	 *	 * @return  void	 *	 * @since   3.0	 */	public static function loadCss($includeMainCss = true, $direction = 'ltr', $attribs = array())	{		// Load Bootstrap main CSS		if ($includeMainCss)		{			JHtml::_('stylesheet', 'jui/bootstrap.min.css', $attribs, true);			JHtml::_('stylesheet', 'jui/bootstrap-responsive.min.css', $attribs, true);			JHtml::_('stylesheet', 'jui/bootstrap-extended.css', $attribs, true);		}		// Load Bootstrap RTL CSS		if ($direction === 'rtl')		{			JHtml::_('stylesheet', 'jui/bootstrap-rtl.css', $attribs, true);		}	}}
<?php/** * @package     Joomla.Platform * @subpackage  Facebook * * @copyright   Copyright (C) 2005 - 2012 Open Source Matters, Inc. All rights reserved. * @license     GNU General Public License version 2 or later; see LICENSE */defined('JPATH_PLATFORM') or die();/** * Facebook API Group class for the Joomla Platform. * * @package     Joomla.Platform * @subpackage  Facebook * * @see         http://developers.facebook.com/docs/reference/api/group/ * @since       13.1 */class JFacebookGroup extends JFacebookObject{	/**	 * Method to read a group. Requires authentication and user_groups or friends_groups permission for non-public groups.	 *	 * @param   string  $group  The group id.	 *	 * @return  mixed   The decoded JSON response or false if the client is not authenticated.	 *	 * @since   13.1	 */	public function getGroup($group)	{		return $this->get($group);	}	/**	 * Method to get the group's wall. Requires authentication and user_groups or friends_groups permission for non-public groups.	 *	 * @param   string   $group   The group id.	 * @param   integer  $limit   The number of objects per page.	 * @param   integer  $offset  The object's number on the page.	 * @param   string   $until   A unix timestamp or any date accepted by strtotime.	 * @param   string   $since   A unix timestamp or any date accepted by strtotime.	 *	 * @return  mixed   The decoded JSON response or false if the client is not authenticated.	 *	 * @since   13.1	 */	public function getFeed($group, $limit = 0, $offset = 0, $until = null, $since = null)	{		return $this->getConnection($group, 'feed', '', $limit, $offset, $until, $since);	}	/**	 * Method to get the group's members. Requires authentication and user_groups or friends_groups permission for non-public groups.	 *	 * @param   string   $group   The group id.	 * @param   integer  $limit   The number of objects per page.	 * @param   integer  $offset  The object's number on the page.	 *	 * @return  mixed   The decoded JSON response or false if the client is not authenticated.	 *	 * @since   13.1	 */	public function getMembers($group, $limit = 0, $offset = 0)	{		return $this->getConnection($group, 'members', '', $limit, $offset);	}	/**	 * Method to get the group's docs. Requires authentication and user_groups or friends_groups permission for non-public groups.	 *	 * @param   string   $group   The group id.	 * @param   integer  $limit   The number of objects per page.	 * @param   integer  $offset  The object's number on the page.	 * @param   string   $until   A unix timestamp or any date accepted by strtotime.	 * @param   string   $since   A unix timestamp or any date accepted by strtotime.	 *	 * @return  mixed   The decoded JSON response or false if the client is not authenticated.	 *	 * @since   13.1	 */	public function getDocs($group, $limit = 0, $offset = 0, $until = null, $since = null)	{		return $this->getConnection($group, 'docs', '', $limit, $offset, $until, $since);	}	/**	 * Method to get the groups's picture. Requires authentication and user_groups or friends_groups permission.	 *	 * @param   string  $group  The group id.	 * @param   string  $type   To request a different photo use square | small | normal | large.	 *	 * @return  string   The URL to the group's picture.	 *	 * @since   13.1	 */	public function getPicture($group, $type = null)	{		if ($type)		{			$type = '?type=' . $type;		}		return $this->getConnection($group, 'picture', $type);	}	/**	 * Method to post a link on group's wall. Requires authentication and publish_stream permission.	 *	 * @param   string  $group    The group id.	 * @param   string  $link     Link URL.	 * @param   strin   $message  Link message.	 *	 * @return  mixed   The decoded JSON response or false if the client is not authenticated.	 *	 * @since   13.1	 */	public function createLink($group, $link, $message = null)	{		// Set POST request parameters.		$data = array();		$data['link'] = $link;		if ($message)		{			$data['message'] = $message;		}		return $this->createConnection($group, 'feed', $data);	}	/**	 * Method to delete a link. Requires authentication.	 *	 * @param   mixed  $link  The Link ID.	 *	 * @return  boolean   Returns true if successful, and false otherwise.	 *	 * @since   13.1	 */	public function deleteLink($link)	{		return $this->deleteConnection($link);	}	/**	 * Method to post on group's wall. Message or link parameter is required. Requires authentication and publish_stream permission.	 *	 * @param   string  $group        The group id.	 * @param   string  $message      Post message.	 * @param   string  $link         Post URL.	 * @param   string  $picture      Post thumbnail image (can only be used if link is specified)	 * @param   string  $name         Post name (can only be used if link is specified).	 * @param   string  $caption      Post caption (can only be used if link is specified).	 * @param   string  $description  Post description (can only be used if link is specified).	 * @param   array   $actions      Post actions array of objects containing name and link.	 *	 * @return  mixed   The decoded JSON response or false if the client is not authenticated.	 *	 * @since   13.1	 */	public function createPost($group, $message = null, $link = null, $picture = null, $name = null, $caption = null,		$description = null, $actions = null)	{		// Set POST request parameters.		if ($message)		{			$data['message'] = $message;		}		if ($link)		{			$data['link'] = $link;		}		if ($name)		{			$data['name'] = $name;		}		if ($caption)		{			$data['caption'] = $caption;		}		if ($description)		{			$data['description'] = $description;		}		if ($actions)		{			$data['actions'] = $actions;		}		if ($picture)		{			$data['picture'] = $picture;		}		return $this->createConnection($group, 'feed', $data);	}	/**	 * Method to delete a post. Note: you can only delete the post if it was created by the current user. Requires authentication.	 *	 * @param   string  $post  The Post ID.	 *	 * @return  boolean   Returns true if successful, and false otherwise.	 *	 * @since   13.1	 */	public function deletePost($post)	{		return $this->deleteConnection($post);	}	/**	 * Method to post a status message on behalf of the user on the group's wall. Requires authentication and publish_stream permission.	 *	 * @param   string  $group    The group id.	 * @param   string  $message  Status message content.	 *	 * @return  mixed   The decoded JSON response or false if the client is not authenticated.	 *	 * @since   13.1	 */	public function createStatus($group, $message)	{		// Set POST request parameters.		$data = array();		$data['message'] = $message;		return $this->createConnection($group, 'feed', $data);	}	/**	 * Method to delete a status. Note: you can only delete the status if it was created by the current user. Requires authentication.	 *	 * @param   string  $status  The Status ID.	 *	 * @return  boolean Returns true if successful, and false otherwise.	 *	 * @since   13.1	 */	public function deleteStatus($status)	{		return $this->deleteConnection($status);	}}
<?php/** * @package     Joomla.Libraries * @subpackage  Language * * @copyright   Copyright (C) 2005 - 2013 Open Source Matters, Inc. All rights reserved. * @license     GNU General Public License version 2 or later; see LICENSE.txt */defined('JPATH_PLATFORM') or die;/** * Utitlity class for multilang * * @package     Joomla.Libraries * @subpackage  Language * @since       2.5.4 */class JLanguageMultilang{	/**	 * Method to determine if the language filter plugin is enabled.	 * This works for both site and administrator.	 *	 * @return  boolean  True if site is supporting multiple languages; false otherwise.	 *	 * @since   2.5.4	 */	public static function isEnabled()	{		// Flag to avoid doing multiple database queries.		static $tested = false;		// Status of language filter plugin.		static $enabled = false;		// Get application object.		$app = JFactory::getApplication();		// If being called from the front-end, we can avoid the database query.		if ($app->isSite())		{			$enabled = $app->getLanguageFilter();			return $enabled;		}		// If already tested, don't test again.		if (!$tested)		{			// Determine status of language filter plug-in.			$db = JFactory::getDbo();			$query = $db->getQuery(true)				->select('enabled')				->from($db->quoteName('#__extensions'))				->where($db->quoteName('type') . ' = ' . $db->quote('plugin'))				->where($db->quoteName('folder') . ' = ' . $db->quote('system'))				->where($db->quoteName('element') . ' = ' . $db->quote('languagefilter'));			$db->setQuery($query);			$enabled = $db->loadResult();			$tested = true;		}		return $enabled;	}}
<?php/** * @package     Joomla.Administrator * @subpackage  com_tags * * @copyright   Copyright (C) 2005 - 2013 Open Source Matters, Inc. All rights reserved. * @license     GNU General Public License version 2 or later; see LICENSE.txt */defined('_JEXEC') or die;/** * Tags view class for the Tags package. * * @package     Joomla.Administrator * @subpackage  com_tags * @since       3.1 */class TagsViewTags extends JViewLegacy{	protected $items;	protected $pagination;	protected $state;	/**	 * Display the view	 */	public function display($tpl = null)	{		$this->state		= $this->get('State');		$this->items		= $this->get('Items');		$this->pagination	= $this->get('Pagination');		TagsHelper::addSubmenu('tags');		// Check for errors.		if (count($errors = $this->get('Errors'))) {			JError::raiseError(500, implode("\n", $errors));			return false;		}		// Preprocess the list of items to find ordering divisions.		foreach ($this->items as &$item)		{			$this->ordering[$item->parent_id][] = $item->id;		}		// Levels filter.		$options	= array();		$options[]	= JHtml::_('select.option', '1', JText::_('J1'));		$options[]	= JHtml::_('select.option', '2', JText::_('J2'));		$options[]	= JHtml::_('select.option', '3', JText::_('J3'));		$options[]	= JHtml::_('select.option', '4', JText::_('J4'));		$options[]	= JHtml::_('select.option', '5', JText::_('J5'));		$options[]	= JHtml::_('select.option', '6', JText::_('J6'));		$options[]	= JHtml::_('select.option', '7', JText::_('J7'));		$options[]	= JHtml::_('select.option', '8', JText::_('J8'));		$options[]	= JHtml::_('select.option', '9', JText::_('J9'));		$options[]	= JHtml::_('select.option', '10', JText::_('J10'));		$this->f_levels = $options;		$this->addToolbar();		$this->sidebar = JHtmlSidebar::render();		parent::display($tpl);	}	/**	 * Add the page title and toolbar.	 *	 * @since   3.1	 */	protected function addToolbar()	{		$state	= $this->get('State');		$canDo	= TagsHelper::getActions($state->get('filter.parent_id'));		$user	= JFactory::getUser();		// Get the toolbar object instance		$bar = JToolBar::getInstance('toolbar');		JToolbarHelper::title(JText::_('COM_TAGS_MANAGER_TAGS'), 'modules.png');		if ($canDo->get('core.create'))		{			JToolbarHelper::addNew('tag.add');		}		if ($canDo->get('core.edit'))		{			JToolbarHelper::editList('tag.edit');		}		if ($canDo->get('core.edit.state'))		{			JToolbarHelper::publish('tags.publish', 'JTOOLBAR_PUBLISH', true);			JToolbarHelper::unpublish('tags.unpublish', 'JTOOLBAR_UNPUBLISH', true);			JToolbarHelper::archiveList('tags.archive');		}		if ($canDo->get('core.admin'))		{			JToolbarHelper::checkin('tags.checkin');		}		if ($state->get('filter.published') == -2 && $canDo->get('core.delete'))		{			JToolbarHelper::deleteList('', 'tags.delete', 'JTOOLBAR_EMPTY_TRASH');		}		elseif ($canDo->get('core.edit.state'))		{			JToolbarHelper::trash('tags.trash');		}		// Add a batch button		if ($user->authorise('core.edit'))		{			JHtml::_('bootstrap.modal', 'collapseModal');			$title = JText::_('JTOOLBAR_BATCH');			$dhtml = "<button data-toggle=\"modal\" data-target=\"#collapseModal\" class=\"btn btn-small\">						<i class=\"icon-checkbox-partial\" title=\"$title\"></i>						$title</button>";			$bar->appendButton('Custom', $dhtml, 'batch');		}		if ($canDo->get('core.admin'))		{			JToolbarHelper::preferences('com_tags');		}		JToolbarHelper::help('JHELP_COMPONENTS_TAGS_MANAGER');		JHtmlSidebar::setAction('index.php?option=com_tags&view=tags');		JHtmlSidebar::addFilter(			JText::_('JOPTION_SELECT_PUBLISHED'),			'filter_published',			JHtml::_('select.options', JHtml::_('jgrid.publishedOptions'), 'value', 'text', $this->state->get('filter.published'), true)		);		JHtmlSidebar::addFilter(			JText::_('JOPTION_SELECT_ACCESS'),			'filter_access',			JHtml::_('select.options', JHtml::_('access.assetgroups'), 'value', 'text', $this->state->get('filter.access'))		);		JHtmlSidebar::addFilter(			JText::_('JOPTION_SELECT_LANGUAGE'),			'filter_language',			JHtml::_('select.options', JHtml::_('contentlanguage.existing', true, true), 'value', 'text', $this->state->get('filter.language'))		);	}	/**	 * Returns an array of fields the table can be sorted by	 *	 * @return  array  Array containing the field name to sort by as the key and display text as value	 *	 * @since   3.0	 */	protected function getSortFields()	{		return array(			'a.lft' => JText::_('JGRID_HEADING_ORDERING'),			'a.state' => JText::_('JSTATUS'),			'a.title' => JText::_('JGLOBAL_TITLE'),			'a.access' => JText::_('JGRID_HEADING_ACCESS'),			'language' => JText::_('JGRID_HEADING_LANGUAGE'),			'a.id' => JText::_('JGRID_HEADING_ID')		);	}}
<?php/** * @package     Joomla.Platform * @subpackage  Facebook * * @copyright   Copyright (C) 2005 - 2012 Open Source Matters, Inc. All rights reserved. * @license     GNU General Public License version 2 or later; see LICENSE */defined('JPATH_PLATFORM') or die();/** * Facebook API Album class for the Joomla Platform. * * @package     Joomla.Platform * @subpackage  Facebook * * @see         http://developers.facebook.com/docs/reference/api/album/ * @since       13.1 */class JFacebookAlbum extends JFacebookObject{	/**	 * Method to get an album. Requires authentication and user_photos or friends_photos permission for private photos.	 *	 * @param   string  $album  The album id.	 *	 * @return  mixed   The decoded JSON response or false if the client is not authenticated.	 *	 * @since   13.1	 */	public function getAlbum($album)	{		return $this->get($album);	}	/**	 * Method to get the photos contained in this album. Requires authentication and user_photos or friends_photos permission for private photos.	 *	 * @param   string   $album   The album id.	 * @param   integer  $limit   The number of objects per page.	 * @param   integer  $offset  The object's number on the page.	 * @param   string   $until   A unix timestamp or any date accepted by strtotime.	 * @param   string   $since   A unix timestamp or any date accepted by strtotime.	 *	 * @return  mixed   The decoded JSON response or false if the client is not authenticated.	 *	 * @since   13.1	 */	public function getPhotos($album, $limit = 0, $offset = 0, $until = null, $since = null)	{		return $this->getConnection($album, 'photos', '', $limit, $offset, $until, $since);	}	/**	 * Method to add photos to an album. Note: check can_upload flag first. Requires authentication and publish_stream  permission.	 *	 * @param   string  $album    The album id.	 * @param   string  $source   Path to photo.	 * @param   string  $message  Photo description.	 *	 * @return  mixed   The decoded JSON response or false if the client is not authenticated.	 *	 * @since   13.1	 */	public function createPhoto($album, $source, $message = null)	{		// Set POST request parameters.		$data = array();		$data[basename($source)] = '@' . realpath($source);		if ($message)		{			$data['message'] = $message;		}		return $this->createConnection($album, 'photos', $data, array('Content-Type' => 'multipart/form-data'));	}	/**	 * Method to get an album's comments. Requires authentication and user_photos or friends_photos permission for private photos.	 *	 * @param   string   $album   The album id.	 * @param   integer  $limit   The number of objects per page.	 * @param   integer  $offset  The object's number on the page.	 * @param   string   $until   A unix timestamp or any date accepted by strtotime.	 * @param   string   $since   A unix timestamp or any date accepted by strtotime.	 *	 * @return  mixed   The decoded JSON response or false if the client is not authenticated.	 *	 * @since   13.1	 */	public function getComments($album, $limit = 0, $offset = 0, $until = null, $since = null)	{		return $this->getConnection($album, 'comments', '', $limit, $offset, $until, $since);	}	/**	 * Method to comment on an album. Requires authentication and publish_stream  permission.	 *	 * @param   string  $album    The album id.	 * @param   string  $message  The comment's text.	 *	 * @return  mixed   The decoded JSON response or false if the client is not authenticated.	 *	 * @since   13.1	 */	public function createComment($album, $message)	{		// Set POST request parameters.		$data = array();		$data['message'] = $message;		return $this->createConnection($album, 'comments', $data);	}	/**	 * Method to delete a comment. Requires authentication and publish_stream  permission.	 *	 * @param   string  $comment  The comment's id.	 *	 * @return  boolean Returns true if successful, and false otherwise.	 *	 * @since   13.1	 */	public function deleteComment($comment)	{		return $this->deleteConnection($comment);	}	/**	 * Method to get album's likes. Requires authentication and user_photos or friends_photos permission for private photos.	 *	 * @param   string   $album   The album id.	 * @param   integer  $limit   The number of objects per page.	 * @param   integer  $offset  The object's number on the page.	 * @param   string   $until   A unix timestamp or any date accepted by strtotime.	 * @param   string   $since   A unix timestamp or any date accepted by strtotime.	 *	 * @return  mixed   The decoded JSON response or false if the client is not authenticated.	 *	 * @since   13.1	 */	public function getLikes($album, $limit = 0, $offset = 0, $until = null, $since = null)	{		return $this->getConnection($album, 'likes', '', $limit, $offset, $until, $since);	}	/**	 * Method to like an album. Requires authentication and publish_stream  permission.	 *	 * @param   string  $album  The album id.	 *	 * @return  boolean Returns true if successful, and false otherwise.	 *	 * @since   13.1	 */	public function createLike($album)	{		return $this->createConnection($album, 'likes');	}	/**	 * Method to unlike an album. Requires authentication and publish_stream  permission.	 *	 * @param   string  $album  The album id.	 *	 * @return  boolean Returns true if successful, and false otherwise.	 *	 * @since   13.1	 */	public function deleteLike($album)	{		return $this->deleteConnection($album, 'likes');	}	/**	 * Method to get the album's cover photo, the first picture uploaded to an album becomes the cover photo for the album.	 * Requires authentication and user_photos or friends_photos permission for private photos.	 *	 * @param   string   $album     The album id.	 * @param   boolean  $redirect  If false this will return the URL of the picture without a 302 redirect.	 *	 * @return  string  URL of the picture.	 *	 * @since   13.1	 */	public function getPicture($album, $redirect = true)	{		$extra_fields = '';		if ($redirect == false)		{			$extra_fields = '?redirect=false';		}		return $this->getConnection($album, 'picture', $extra_fields);	}}
<?php/** * @package     Joomla.Platform * @subpackage  Application * * @copyright   Copyright (C) 2005 - 2013 Open Source Matters, Inc. All rights reserved. * @license     GNU General Public License version 2 or later; see LICENSE */defined('JPATH_PLATFORM') or die;/** * Base class for a Joomla! Web application. * * @package     Joomla.Platform * @subpackage  Application * @since       11.4 */class JApplicationWeb extends JApplicationBase{	/**	 * @var    string  Character encoding string.	 * @since  11.3	 */	public $charSet = 'utf-8';	/**	 * @var    string  Response mime type.	 * @since  11.3	 */	public $mimeType = 'text/html';	/**	 * @var    JDate  The body modified date for response headers.	 * @since  11.3	 */	public $modifiedDate;	/**	 * @var    JApplicationWebClient  The application client object.	 * @since  11.3	 */	public $client;	/**	 * @var    JRegistry  The application configuration object.	 * @since  11.3	 */	protected $config;	/**	 * @var    JDocument  The application document object.	 * @since  11.3	 */	protected $document;	/**	 * @var    JLanguage  The application language object.	 * @since  11.3	 */	protected $language;	/**	 * @var    JSession  The application session object.	 * @since  11.3	 */	protected $session;	/**	 * @var    object  The application response object.	 * @since  11.3	 */	protected $response;	/**	 * @var    JApplicationWeb  The application instance.	 * @since  11.3	 */	protected static $instance;	/**	 * Class constructor.	 *	 * @param   mixed  $input   An optional argument to provide dependency injection for the application's	 *                          input object.  If the argument is a JInput object that object will become	 *                          the application's input object, otherwise a default input object is created.	 * @param   mixed  $config  An optional argument to provide dependency injection for the application's	 *                          config object.  If the argument is a JRegistry object that object will become	 *                          the application's config object, otherwise a default config object is created.	 * @param   mixed  $client  An optional argument to provide dependency injection for the application's	 *                          client object.  If the argument is a JApplicationWebClient object that object will become	 *                          the application's client object, otherwise a default client object is created.	 *	 * @since   11.3	 */	public function __construct(JInput $input = null, JRegistry $config = null, JApplicationWebClient $client = null)	{		// If a input object is given use it.		if ($input instanceof JInput)		{			$this->input = $input;		}		// Create the input based on the application logic.		else		{			$this->input = new JInput;		}		// If a config object is given use it.		if ($config instanceof JRegistry)		{			$this->config = $config;		}		// Instantiate a new configuration object.		else		{			$this->config = new JRegistry;		}		// If a client object is given use it.		if ($client instanceof JApplicationWebClient)		{			$this->client = $client;		}		// Instantiate a new web client object.		else		{			$this->client = new JApplicationWebClient;		}		// Load the configuration object.		$this->loadConfiguration($this->fetchConfigurationData());		// Set the execution datetime and timestamp;		$this->set('execution.datetime', gmdate('Y-m-d H:i:s'));		$this->set('execution.timestamp', time());		// Setup the response object.		$this->response = new stdClass;		$this->response->cachable = false;		$this->response->headers = array();		$this->response->body = array();		// Set the system URIs.		$this->loadSystemUris();	}	/**	 * Returns a reference to the global JApplicationWeb object, only creating it if it doesn't already exist.	 *	 * This method must be invoked as: $web = JApplicationWeb::getInstance();	 *	 * @param   string  $name  The name (optional) of the JApplicationWeb class to instantiate.	 *	 * @return  JApplicationWeb	 *	 * @since   11.3	 */	public static function getInstance($name = null)	{		// Only create the object if it doesn't exist.		if (empty(self::$instance))		{			if (class_exists($name) && (is_subclass_of($name, 'JApplicationWeb')))			{				self::$instance = new $name;			}			else			{				self::$instance = new JApplicationWeb;			}		}		return self::$instance;	}	/**	 * Initialise the application.	 *	 * @param   mixed  $session     An optional argument to provide dependency injection for the application's	 *                              session object.  If the argument is a JSession object that object will become	 *                              the application's session object, if it is false then there will be no session	 *                              object, and if it is null then the default session object will be created based	 *                              on the application's loadSession() method.	 * @param   mixed  $document    An optional argument to provide dependency injection for the application's	 *                              document object.  If the argument is a JDocument object that object will become	 *                              the application's document object, if it is false then there will be no document	 *                              object, and if it is null then the default document object will be created based	 *                              on the application's loadDocument() method.	 * @param   mixed  $language    An optional argument to provide dependency injection for the application's	 *                              language object.  If the argument is a JLanguage object that object will become	 *                              the application's language object, if it is false then there will be no language	 *                              object, and if it is null then the default language object will be created based	 *                              on the application's loadLanguage() method.	 * @param   mixed  $dispatcher  An optional argument to provide dependency injection for the application's	 *                              event dispatcher.  If the argument is a JEventDispatcher object that object will become	 *                              the application's event dispatcher, if it is null then the default event dispatcher	 *                              will be created based on the application's loadDispatcher() method.	 *	 * @return  JApplicationWeb  Instance of $this to allow chaining.	 *	 * @deprecated  13.1	 * @see     loadSession()	 * @see     loadDocument()	 * @see     loadLanguage()	 * @see     loadDispatcher()	 * @since   11.3	 */	public function initialise($session = null, $document = null, $language = null, $dispatcher = null)	{		// Create the session based on the application logic.		if ($session !== false)		{			$this->loadSession($session);		}		// Create the document based on the application logic.		if ($document !== false)		{			$this->loadDocument($document);		}		// Create the language based on the application logic.		if ($language !== false)		{			$this->loadLanguage($language);		}		$this->loadDispatcher($dispatcher);		return $this;	}	/**	 * Execute the application.	 *	 * @return  void	 *	 * @since   11.3	 */	public function execute()	{		// Trigger the onBeforeExecute event.		$this->triggerEvent('onBeforeExecute');		// Perform application routines.		$this->doExecute();		// Trigger the onAfterExecute event.		$this->triggerEvent('onAfterExecute');		// If we have an application document object, render it.		if ($this->document instanceof JDocument)		{			// Trigger the onBeforeRender event.			$this->triggerEvent('onBeforeRender');			// Render the application output.			$this->render();			// Trigger the onAfterRender event.			$this->triggerEvent('onAfterRender');		}		// If gzip compression is enabled in configuration and the server is compliant, compress the output.		if ($this->get('gzip') && !ini_get('zlib.output_compression') && (ini_get('output_handler') != 'ob_gzhandler'))		{			$this->compress();		}		// Trigger the onBeforeRespond event.		$this->triggerEvent('onBeforeRespond');		// Send the application response.		$this->respond();		// Trigger the onAfterRespond event.		$this->triggerEvent('onAfterRespond');	}	/**	 * Method to run the Web application routines.  Most likely you will want to instantiate a controller	 * and execute it, or perform some sort of action that populates a JDocument object so that output	 * can be rendered to the client.	 *	 * @return  void	 *	 * @codeCoverageIgnore	 * @since   11.3	 */	protected function doExecute()	{		// Your application routines go here.	}	/**	 * Rendering is the process of pushing the document buffers into the template	 * placeholders, retrieving data from the document and pushing it into	 * the application response buffer.	 *	 * @return  void	 *	 * @since   11.3	 */	protected function render()	{		// Setup the document options.		$options = array(			'template' => $this->get('theme'),			'file' => 'index.php',			'params' => $this->get('themeParams')		);		if ($this->get('themes.base'))		{			$options['directory'] = $this->get('themes.base');		}		// Fall back to constants.		else		{			$options['directory'] = defined('JPATH_THEMES') ? JPATH_THEMES : (defined('JPATH_BASE') ? JPATH_BASE : __DIR__) . '/themes';		}		// Parse the document.		$this->document->parse($options);		// Render the document.		$data = $this->document->render($this->get('cache_enabled'), $options);		// Set the application output data.		$this->setBody($data);	}	/**	 * Checks the accept encoding of the browser and compresses the data before	 * sending it to the client if possible.	 *	 * @return  void	 *	 * @since   11.3	 */	protected function compress()	{		// Supported compression encodings.		$supported = array(			'x-gzip' => 'gz',			'gzip' => 'gz',			'deflate' => 'deflate'		);		// Get the supported encoding.		$encodings = array_intersect($this->client->encodings, array_keys($supported));		// If no supported encoding is detected do nothing and return.		if (empty($encodings))		{			return;		}		// Verify that headers have not yet been sent, and that our connection is still alive.		if ($this->checkHeadersSent() || !$this->checkConnectionAlive())		{			return;		}		// Iterate through the encodings and attempt to compress the data using any found supported encodings.		foreach ($encodings as $encoding)		{			if (($supported[$encoding] == 'gz') || ($supported[$encoding] == 'deflate'))			{				// Verify that the server supports gzip compression before we attempt to gzip encode the data.				// @codeCoverageIgnoreStart				if (!extension_loaded('zlib') || ini_get('zlib.output_compression'))				{					continue;				}				// @codeCoverageIgnoreEnd				// Attempt to gzip encode the data with an optimal level 4.				$data = $this->getBody();				$gzdata = gzencode($data, 4, ($supported[$encoding] == 'gz') ? FORCE_GZIP : FORCE_DEFLATE);				// If there was a problem encoding the data just try the next encoding scheme.				// @codeCoverageIgnoreStart				if ($gzdata === false)				{					continue;				}				// @codeCoverageIgnoreEnd				// Set the encoding headers.				$this->setHeader('Content-Encoding', $encoding);				$this->setHeader('X-Content-Encoded-By', 'Joomla');				// Replace the output with the encoded data.				$this->setBody($gzdata);				// Compression complete, let's break out of the loop.				break;			}		}	}	/**	 * Method to send the application response to the client.  All headers will be sent prior to the main	 * application output data.	 *	 * @return  void	 *	 * @since   11.3	 */	protected function respond()	{		// Send the content-type header.		$this->setHeader('Content-Type', $this->mimeType . '; charset=' . $this->charSet);		// If the response is set to uncachable, we need to set some appropriate headers so browsers don't cache the response.		if (!$this->response->cachable)		{			// Expires in the past.			$this->setHeader('Expires', 'Mon, 1 Jan 2001 00:00:00 GMT', true);			// Always modified.			$this->setHeader('Last-Modified', gmdate('D, d M Y H:i:s') . ' GMT', true);			$this->setHeader('Cache-Control', 'no-store, no-cache, must-revalidate, post-check=0, pre-check=0', false);			// HTTP 1.0			$this->setHeader('Pragma', 'no-cache');		}		else		{			// Expires.			$this->setHeader('Expires', gmdate('D, d M Y H:i:s', time() + 900) . ' GMT');			// Last modified.			if ($this->modifiedDate instanceof JDate)			{				$this->setHeader('Last-Modified', $this->modifiedDate->format('D, d M Y H:i:s'));			}		}		$this->sendHeaders();		echo $this->getBody();	}	/**	 * Redirect to another URL.	 *	 * If the headers have not been sent the redirect will be accomplished using a "301 Moved Permanently"	 * or "303 See Other" code in the header pointing to the new location. If the headers have already been	 * sent this will be accomplished using a JavaScript statement.	 *	 * @param   string   $url    The URL to redirect to. Can only be http/https URL	 * @param   boolean  $moved  True if the page is 301 Permanently Moved, otherwise 303 See Other is assumed.	 *	 * @return  void	 *	 * @since   11.3	 */	public function redirect($url, $moved = false)	{		// Import library dependencies.		jimport('phputf8.utils.ascii');		// Check for relative internal links.		if (preg_match('#^index\.php#', $url))		{			$url = $this->get('uri.base.full') . $url;		}		// Perform a basic sanity check to make sure we don't have any CRLF garbage.		$url = preg_split("/[\r\n]/", $url);		$url = $url[0];		/*		 * Here we need to check and see if the URL is relative or absolute.  Essentially, do we need to		 * prepend the URL with our base URL for a proper redirect.  The rudimentary way we are looking		 * at this is to simply check whether or not the URL string has a valid scheme or not.		 */		if (!preg_match('#^[a-z]+\://#i', $url))		{			// Get a JURI instance for the requested URI.			$uri = JURI::getInstance($this->get('uri.request'));			// Get a base URL to prepend from the requested URI.			$prefix = $uri->toString(array('scheme', 'user', 'pass', 'host', 'port'));			// We just need the prefix since we have a path relative to the root.			if ($url[0] == '/')			{				$url = $prefix . $url;			}			// It's relative to where we are now, so lets add that.			else			{				$parts = explode('/', $uri->toString(array('path')));				array_pop($parts);				$path = implode('/', $parts) . '/';				$url = $prefix . $path . $url;			}		}		// If the headers have already been sent we need to send the redirect statement via JavaScript.		if ($this->checkHeadersSent())		{			echo "<script>document.location.href='$url';</script>\n";		}		else		{			// We have to use a JavaScript redirect here because MSIE doesn't play nice with utf-8 URLs.			if (($this->client->engine == JApplicationWebClient::TRIDENT) && !utf8_is_ascii($url))			{				$html = '<html><head>';				$html .= '<meta http-equiv="content-type" content="text/html; charset=' . $this->charSet . '" />';				$html .= '<script>document.location.href=\'' . $url . '\';</script>';				$html .= '</head><body></body></html>';				echo $html;			}			else			{				// All other cases use the more efficient HTTP header for redirection.				$this->header($moved ? 'HTTP/1.1 301 Moved Permanently' : 'HTTP/1.1 303 See other');				$this->header('Location: ' . $url);				$this->header('Content-Type: text/html; charset=' . $this->charSet);			}		}		// Close the application after the redirect.		$this->close();	}	/**	 * Load an object or array into the application configuration object.	 *	 * @param   mixed  $data  Either an array or object to be loaded into the configuration object.	 *	 * @return  JApplicationWeb  Instance of $this to allow chaining.	 *	 * @since   11.3	 */	public function loadConfiguration($data)	{		// Load the data into the configuration object.		if (is_array($data))		{			$this->config->loadArray($data);		}		elseif (is_object($data))		{			$this->config->loadObject($data);		}		return $this;	}	/**	 * Returns a property of the object or the default value if the property is not set.	 *	 * @param   string  $key      The name of the property.	 * @param   mixed   $default  The default value (optional) if none is set.	 *	 * @return  mixed   The value of the configuration.	 *	 * @since   11.3	 */	public function get($key, $default = null)	{		return $this->config->get($key, $default);	}	/**	 * Modifies a property of the object, creating it if it does not already exist.	 *	 * @param   string  $key    The name of the property.	 * @param   mixed   $value  The value of the property to set (optional).	 *	 * @return  mixed   Previous value of the property	 *	 * @since   11.3	 */	public function set($key, $value = null)	{		$previous = $this->config->get($key);		$this->config->set($key, $value);		return $previous;	}	/**	 * Set/get cachable state for the response.  If $allow is set, sets the cachable state of the	 * response.  Always returns the current state.	 *	 * @param   boolean  $allow  True to allow browser caching.	 *	 * @return  boolean	 *	 * @since   11.3	 */	public function allowCache($allow = null)	{		if ($allow !== null)		{			$this->response->cachable = (bool) $allow;		}		return $this->response->cachable;	}	/**	 * Method to set a response header.  If the replace flag is set then all headers	 * with the given name will be replaced by the new one.  The headers are stored	 * in an internal array to be sent when the site is sent to the browser.	 *	 * @param   string   $name     The name of the header to set.	 * @param   string   $value    The value of the header to set.	 * @param   boolean  $replace  True to replace any headers with the same name.	 *	 * @return  JApplicationWeb  Instance of $this to allow chaining.	 *	 * @since   11.3	 */	public function setHeader($name, $value, $replace = false)	{		// Sanitize the input values.		$name = (string) $name;		$value = (string) $value;		// If the replace flag is set, unset all known headers with the given name.		if ($replace)		{			foreach ($this->response->headers as $key => $header)			{				if ($name == $header['name'])				{					unset($this->response->headers[$key]);				}			}			// Clean up the array as unsetting nested arrays leaves some junk.			$this->response->headers = array_values($this->response->headers);		}		// Add the header to the internal array.		$this->response->headers[] = array('name' => $name, 'value' => $value);		return $this;	}	/**	 * Method to get the array of response headers to be sent when the response is sent	 * to the client.	 *	 * @return  array	 *	 * @since   11.3	 */	public function getHeaders()	{		return $this->response->headers;	}	/**	 * Method to clear any set response headers.	 *	 * @return  JApplicationWeb  Instance of $this to allow chaining.	 *	 * @since   11.3	 */	public function clearHeaders()	{		$this->response->headers = array();		return $this;	}	/**	 * Send the response headers.	 *	 * @return  JApplicationWeb  Instance of $this to allow chaining.	 *	 * @since   11.3	 */	public function sendHeaders()	{		if (!$this->checkHeadersSent())		{			foreach ($this->response->headers as $header)			{				if ('status' == strtolower($header['name']))				{					// 'status' headers indicate an HTTP status, and need to be handled slightly differently					$this->header(ucfirst(strtolower($header['name'])) . ': ' . $header['value'], null, (int) $header['value']);				}				else				{					$this->header($header['name'] . ': ' . $header['value']);				}			}		}		return $this;	}	/**	 * Set body content.  If body content already defined, this will replace it.	 *	 * @param   string  $content  The content to set as the response body.	 *	 * @return  JApplicationWeb  Instance of $this to allow chaining.	 *	 * @since   11.3	 */	public function setBody($content)	{		$this->response->body = array((string) $content);		return $this;	}	/**	 * Prepend content to the body content	 *	 * @param   string  $content  The content to prepend to the response body.	 *	 * @return  JApplicationWeb  Instance of $this to allow chaining.	 *	 * @since   11.3	 */	public function prependBody($content)	{		array_unshift($this->response->body, (string) $content);		return $this;	}	/**	 * Append content to the body content	 *	 * @param   string  $content  The content to append to the response body.	 *	 * @return  JApplicationWeb  Instance of $this to allow chaining.	 *	 * @since   11.3	 */	public function appendBody($content)	{		array_push($this->response->body, (string) $content);		return $this;	}	/**	 * Return the body content	 *	 * @param   boolean  $asArray  True to return the body as an array of strings.	 *	 * @return  mixed  The response body either as an array or concatenated string.	 *	 * @since   11.3	 */	public function getBody($asArray = false)	{		return $asArray ? $this->response->body : implode((array) $this->response->body);	}	/**	 * Method to get the application document object.	 *	 * @return  JDocument  The document object	 *	 * @since   11.3	 */	public function getDocument()	{		return $this->document;	}	/**	 * Method to get the application language object.	 *	 * @return  JLanguage  The language object	 *	 * @since   11.3	 */	public function getLanguage()	{		return $this->language;	}	/**	 * Method to get the application session object.	 *	 * @return  JSession  The session object	 *	 * @since   11.3	 */	public function getSession()	{		return $this->session;	}	/**	 * Method to check the current client connnection status to ensure that it is alive.  We are	 * wrapping this to isolate the connection_status() function from our code base for testing reasons.	 *	 * @return  boolean  True if the connection is valid and normal.	 *	 * @codeCoverageIgnore	 * @see     connection_status()	 * @since   11.3	 */	protected function checkConnectionAlive()	{		return (connection_status() === CONNECTION_NORMAL);	}	/**	 * Method to check to see if headers have already been sent.  We are wrapping this to isolate the	 * headers_sent() function from our code base for testing reasons.	 *	 * @return  boolean  True if the headers have already been sent.	 *	 * @codeCoverageIgnore	 * @see     headers_sent()	 * @since   11.3	 */	protected function checkHeadersSent()	{		return headers_sent();	}	/**	 * Method to detect the requested URI from server environment variables.	 *	 * @return  string  The requested URI	 *	 * @since   11.3	 */	protected function detectRequestUri()	{		$uri = '';		// First we need to detect the URI scheme.		if (isset($_SERVER['HTTPS']) && !empty($_SERVER['HTTPS']) && (strtolower($_SERVER['HTTPS']) != 'off'))		{			$scheme = 'https://';		}		else		{			$scheme = 'http://';		}		/*		 * There are some differences in the way that Apache and IIS populate server environment variables.  To		 * properly detect the requested URI we need to adjust our algorithm based on whether or not we are getting		 * information from Apache or IIS.		 */		// If PHP_SELF and REQUEST_URI are both populated then we will assume "Apache Mode".		if (!empty($_SERVER['PHP_SELF']) && !empty($_SERVER['REQUEST_URI']))		{			// The URI is built from the HTTP_HOST and REQUEST_URI environment variables in an Apache environment.			$uri = $scheme . $_SERVER['HTTP_HOST'] . $_SERVER['REQUEST_URI'];		}		// If not in "Apache Mode" we will assume that we are in an IIS environment and proceed.		else		{			// IIS uses the SCRIPT_NAME variable instead of a REQUEST_URI variable... thanks, MS			$uri = $scheme . $_SERVER['HTTP_HOST'] . $_SERVER['SCRIPT_NAME'];			// If the QUERY_STRING variable exists append it to the URI string.			if (isset($_SERVER['QUERY_STRING']) && !empty($_SERVER['QUERY_STRING']))			{				$uri .= '?' . $_SERVER['QUERY_STRING'];			}		}		return trim($uri);	}	/**	 * Method to load a PHP configuration class file based on convention and return the instantiated data object.  You	 * will extend this method in child classes to provide configuration data from whatever data source is relevant	 * for your specific application.	 *	 * @param   string  $file   The path and filename of the configuration file. If not provided, configuration.php	 *                          in JPATH_BASE will be used.	 * @param   string  $class  The class name to instantiate.	 *	 * @return  mixed   Either an array or object to be loaded into the configuration object.	 *	 * @since   11.3	 */	protected function fetchConfigurationData($file = '', $class = 'JConfig')	{		// Instantiate variables.		$config = array();		if (empty($file) && defined('JPATH_BASE'))		{			$file = JPATH_BASE . '/configuration.php';			// Applications can choose not to have any configuration data			// by not implementing this method and not having a config file.			if (!file_exists($file))			{				$file = '';			}		}		if (!empty($file))		{			JLoader::register($class, $file);			if (class_exists($class))			{				$config = new $class;			}			else			{				throw new RuntimeException('Configuration class does not exist.');			}		}		return $config;	}	/**	 * Method to send a header to the client.  We are wrapping this to isolate the header() function	 * from our code base for testing reasons.	 *	 * @param   string   $string   The header string.	 * @param   boolean  $replace  The optional replace parameter indicates whether the header should	 *                             replace a previous similar header, or add a second header of the same type.	 * @param   integer  $code     Forces the HTTP response code to the specified value. Note that	 *                             this parameter only has an effect if the string is not empty.	 *	 * @return  void	 *	 * @codeCoverageIgnore	 * @see     header()	 * @since   11.3	 */	protected function header($string, $replace = true, $code = null)	{		header($string, $replace, $code);	}	/**	 * Determine if we are using a secure (SSL) connection.	 *	 * @return  boolean  True if using SSL, false if not.	 *	 * @since   12.2	 */	public function isSSLConnection()	{		return ((isset($_SERVER['HTTPS']) && ($_SERVER['HTTPS'] == 'on')) || getenv('SSL_PROTOCOL_VERSION'));	}	/**	 * Allows the application to load a custom or default document.	 *	 * The logic and options for creating this object are adequately generic for default cases	 * but for many applications it will make sense to override this method and create a document,	 * if required, based on more specific needs.	 *	 * @param   JDocument  $document  An optional document object. If omitted, the factory document is created.	 *	 * @return  JApplicationWeb This method is chainable.	 *	 * @since   11.3	 */	public function loadDocument(JDocument $document = null)	{		$this->document = ($document === null) ? JFactory::getDocument() : $document;		return $this;	}	/**	 * Allows the application to load a custom or default language.	 *	 * The logic and options for creating this object are adequately generic for default cases	 * but for many applications it will make sense to override this method and create a language,	 * if required, based on more specific needs.	 *	 * @param   JLanguage  $language  An optional language object. If omitted, the factory language is created.	 *	 * @return  JApplicationWeb This method is chainable.	 *	 * @since   11.3	 */	public function loadLanguage(JLanguage $language = null)	{		$this->language = ($language === null) ? JFactory::getLanguage() : $language;		return $this;	}	/**	 * Allows the application to load a custom or default session.	 *	 * The logic and options for creating this object are adequately generic for default cases	 * but for many applications it will make sense to override this method and create a session,	 * if required, based on more specific needs.	 *	 * @param   JSession  $session  An optional session object. If omitted, the session is created.	 *	 * @return  JApplicationWeb This method is chainable.	 *	 * @since   11.3	 */	public function loadSession(JSession $session = null)	{		if ($session !== null)		{			$this->session = $session;			return $this;		}		// Generate a session name.		$name = md5($this->get('secret') . $this->get('session_name', get_class($this)));		// Calculate the session lifetime.		$lifetime = (($this->get('sess_lifetime')) ? $this->get('sess_lifetime') * 60 : 900);		// Get the session handler from the configuration.		$handler = $this->get('sess_handler', 'none');		// Initialize the options for JSession.		$options = array(			'name' => $name,			'expire' => $lifetime,			'force_ssl' => $this->get('force_ssl')		);		$this->registerEvent('onAfterSessionStart', array($this, 'afterSessionStart'));		// Instantiate the session object.		$session = JSession::getInstance($handler, $options);		$session->initialise($this->input, $this->dispatcher);		if ($session->getState() == 'expired')		{			$session->restart();		}		else		{			$session->start();		}		// Set the session object.		$this->session = $session;		return $this;	}	/**	 * After the session has been started we need to populate it with some default values.	 *	 * @return  void	 *	 * @since   12.2	 */	public function afterSessionStart()	{		$session = JFactory::getSession();		if ($session->isNew())		{			$session->set('registry', new JRegistry('session'));			$session->set('user', new JUser);		}	}	/**	 * Method to load the system URI strings for the application.	 *	 * @param   string  $requestUri  An optional request URI to use instead of detecting one from the	 *                               server environment variables.	 *	 * @return  void	 *	 * @since   11.3	 */	protected function loadSystemUris($requestUri = null)	{		// Set the request URI.		// @codeCoverageIgnoreStart		if (!empty($requestUri))		{			$this->set('uri.request', $requestUri);		}		else		{			$this->set('uri.request', $this->detectRequestUri());		}		// @codeCoverageIgnoreEnd		// Check to see if an explicit base URI has been set.		$siteUri = trim($this->get('site_uri'));		if ($siteUri != '')		{			$uri = JUri::getInstance($siteUri);		}		// No explicit base URI was set so we need to detect it.		else		{			// Start with the requested URI.			$uri = JUri::getInstance($this->get('uri.request'));			// If we are working from a CGI SAPI with the 'cgi.fix_pathinfo' directive disabled we use PHP_SELF.			if (strpos(php_sapi_name(), 'cgi') !== false && !ini_get('cgi.fix_pathinfo') && !empty($_SERVER['REQUEST_URI']))			{				// We aren't expecting PATH_INFO within PHP_SELF so this should work.				$uri->setPath(rtrim(dirname($_SERVER['PHP_SELF']), '/\\'));			}			// Pretty much everything else should be handled with SCRIPT_NAME.			else			{				$uri->setPath(rtrim(dirname($_SERVER['SCRIPT_NAME']), '/\\'));			}			// Clear the unused parts of the requested URI.			$uri->setQuery(null);			$uri->setFragment(null);		}		// Get the host and path from the URI.		$host = $uri->toString(array('scheme', 'user', 'pass', 'host', 'port'));		$path = rtrim($uri->toString(array('path')), '/\\');		// Check if the path includes "index.php".		if (strpos($path, 'index.php') !== false)		{			// Remove the index.php portion of the path.			$path = substr_replace($path, '', strpos($path, 'index.php'), 9);			$path = rtrim($path, '/\\');		}		// Set the base URI both as just a path and as the full URI.		$this->set('uri.base.full', $host . $path . '/');		$this->set('uri.base.host', $host);		$this->set('uri.base.path', $path . '/');		// Set the extended (non-base) part of the request URI as the route.		$this->set('uri.route', substr_replace($this->get('uri.request'), '', 0, strlen($this->get('uri.base.full'))));		// Get an explicitly set media URI is present.		$mediaURI = trim($this->get('media_uri'));		if ($mediaURI)		{			if (strpos($mediaURI, '://') !== false)			{				$this->set('uri.media.full', $mediaURI);				$this->set('uri.media.path', $mediaURI);			}			else			{				// Normalise slashes.				$mediaURI = '/' . trim($mediaURI, '/\\') . '/';				$this->set('uri.media.full', $this->get('uri.base.host') . $mediaURI);				$this->set('uri.media.path', $mediaURI);			}		}		// No explicit media URI was set, build it dynamically from the base uri.		else		{			$this->set('uri.media.full', $this->get('uri.base.full') . 'media/');			$this->set('uri.media.path', $this->get('uri.base.path') . 'media/');		}	}}/** * Deprecated class placeholder.  You should use JApplicationWeb instead. * * @package     Joomla.Platform * @subpackage  Application * @since       11.3 * @deprecated  12.3 */class JWeb extends JApplicationWeb{}
<?php/** * @package     Joomla.Administrator * @subpackage  Templates.protostar * * @copyright   Copyright (C) 2005 - 2013 Open Source Matters, Inc. All rights reserved. * @license     GNU General Public License version 2 or later; see LICENSE.txt */defined('_JEXEC') or die;/** * This is a file to add template specific chrome to pagination rendering. * * pagination_list_footer * 	Input variable $list is an array with offsets: * 		$list[limit]		: int * 		$list[limitstart]	: int * 		$list[total]		: int * 		$list[limitfield]	: string * 		$list[pagescounter]	: string * 		$list[pageslinks]	: string * * pagination_list_render * 	Input variable $list is an array with offsets: * 		$list[all] * 			[data]		: string * 			[active]	: boolean * 		$list[start] * 			[data]		: string * 			[active]	: boolean * 		$list[previous] * 			[data]		: string * 			[active]	: boolean * 		$list[next] * 			[data]		: string * 			[active]	: boolean * 		$list[end] * 			[data]		: string * 			[active]	: boolean * 		$list[pages] * 			[{PAGE}][data]		: string * 			[{PAGE}][active]	: boolean * * pagination_item_active * 	Input variable $item is an object with fields: * 		$item->base	: integer * 		$item->link	: string * 		$item->text	: string * * pagination_item_inactive * 	Input variable $item is an object with fields: * 		$item->base	: integer * 		$item->link	: string * 		$item->text	: string * * This gives template designers ultimate control over how pagination is rendered. * * NOTE: If you override pagination_item_active OR pagination_item_inactive you MUST override them both *//** * Renders the pagination footer * * @param   array  $list  Array containing pagination footer * * @return  string  HTML markup for the full pagination footer * * @since   3.0 */function pagination_list_footer($list){	$html = "<div class=\"pagination\">\n";	$html .= $list['pageslinks'];	$html .= "\n<input type=\"hidden\" name=\"" . $list['prefix'] . "limitstart\" value=\"" . $list['limitstart'] . "\" />";	$html .= "\n</div>";	return $html;}/** * Renders the pagination list * * @param   array  $list  Array containing pagination information * * @return  string  HTML markup for the full pagination object * * @since   3.0 */function pagination_list_render($list){	// Calculate to display range of pages	$currentPage = 1;	$range = 1;	$step = 5;	foreach ($list['pages'] as $k => $page)	{		if (!$page['active'])		{			$currentPage = $k;		}	}	if ($currentPage >= $step)	{		if ($currentPage % $step == 0)		{			$range = ceil($currentPage / $step) + 1;		}		else		{			$range = ceil($currentPage / $step);		}	}	$html = '<ul class="pagination-list">';	$html .= $list['start']['data'];	$html .= $list['previous']['data'];	foreach ($list['pages'] as $k => $page)	{		if (in_array($k, range($range * $step - ($step + 1), $range * $step)))		{			if (($k % $step == 0 || $k == $range * $step - ($step + 1)) && $k != $currentPage && $k != $range * $step - $step)			{				$page['data'] = preg_replace('#(<a.*?>).*?(</a>)#', '$1...$2', $page['data']);			}		}		$html .= $page['data'];	}	$html .= $list['next']['data'];	$html .= $list['end']['data'];	$html .= '</ul>';	return $html;}/** * Renders an active item in the pagination block * * @param   JPaginationObject  $item  The current pagination object * * @return  string  HTML markup for active item * * @since   3.0 */function pagination_item_active(&$item){	// Check for "Start" item	if ($item->text == JText::_('JLIB_HTML_START'))	{		$display = '<i class="icon-first"></i>';	}	// Check for "Prev" item	if ($item->text == JText::_('JPREV'))	{		$display = '<i class="icon-previous"></i>';	}	// Check for "Next" item	if ($item->text == JText::_('JNEXT'))	{		$display = '<i class="icon-next"></i>';	}	// Check for "End" item	if ($item->text == JText::_('JLIB_HTML_END'))	{		$display = '<i class="icon-last"></i>';	}	// If the display object isn't set already, just render the item with its text	if (!isset($display))	{		$display = $item->text;	}	return "<li><a title=\"" . $item->text . "\" href=\"" . $item->link . "\" class=\"pagenav\">" . $display . "</a></li>";}/** * Renders an inactive item in the pagination block * * @param   JPaginationObject  $item  The current pagination object * * @return  string  HTML markup for inactive item * * @since   3.0 */function pagination_item_inactive(&$item){	// Check for "Start" item	if ($item->text == JText::_('JLIB_HTML_START'))	{		return '<li class="disabled"><a><i class="icon-first"></i></a></li>';	}	// Check for "Prev" item	if ($item->text == JText::_('JPREV'))	{		return '<li class="disabled"><a><i class="icon-previous"></i></a></li>';	}	// Check for "Next" item	if ($item->text == JText::_('JNEXT'))	{		return '<li class="disabled"><a><i class="icon-next"></i></a></li>';	}	// Check for "End" item	if ($item->text == JText::_('JLIB_HTML_END'))	{		return '<li class="disabled"><a><i class="icon-last"></i></a></li>';	}	// Check if the item is the active page	if (isset($item->active) && ($item->active))	{		return '<li class="active"><a>' . $item->text . '</a></li>';	}	// Doesn't match any other condition, render a normal item	return '<li class="disabled"><a>' . $item->text . '</a></li>';}
<?php/** * @package     Joomla.Libraries * @subpackage  HTML * * @copyright   Copyright (C) 2005 - 2013 Open Source Matters, Inc. All rights reserved. * @license     GNU General Public License version 2 or later; see LICENSE */defined('JPATH_BASE') or die;/** * Extended Utility class for batch processing widgets. * * @package     Joomla.Libraries * @subpackage  HTML * @since       1.7 */abstract class JHtmlBatch{	/**	 * Display a batch widget for the access level selector.	 *	 * @return  string  The necessary HTML for the widget.	 *	 * @since   1.7	 */	public static function access()	{		// Create the batch selector to change an access level on a selection list.		$lines = array(			'<label id="batch-access-lbl" for="batch-access" class="hasTip" title="' . JText::_('JLIB_HTML_BATCH_ACCESS_LABEL') . '::'			. JText::_('JLIB_HTML_BATCH_ACCESS_LABEL_DESC') . '">', JText::_('JLIB_HTML_BATCH_ACCESS_LABEL'), '</label>',			JHtml::_(				'access.assetgrouplist',				'batch[assetgroup_id]', '',				'class="inputbox"',				array(					'title' => JText::_('JLIB_HTML_BATCH_NOCHANGE'),					'id' => 'batch-access')			)		);		return implode("\n", $lines);	}	/**	 * Displays a batch widget for moving or copying items.	 *	 * @param   string  $extension  The extension that owns the category.	 *	 * @return  string  The necessary HTML for the widget.	 *	 * @since   1.7	 */	public static function item($extension)	{		// Create the copy/move options.		$options = array(JHtml::_('select.option', 'c', JText::_('JLIB_HTML_BATCH_COPY')),			JHtml::_('select.option', 'm', JText::_('JLIB_HTML_BATCH_MOVE')));		// Create the batch selector to change select the category by which to move or copy.		$lines = array('<label id="batch-choose-action-lbl" for="batch-choose-action">', JText::_('JLIB_HTML_BATCH_MENU_LABEL'), '</label>',			'<div id="batch-choose-action" class="control-group">', '<select name="batch[category_id]" class="inputbox" id="batch-category-id">',			'<option value="">' . JText::_('JSELECT') . '</option>',			JHtml::_('select.options', JHtml::_('category.options', $extension)), '</select>',			'</div>', '<div id="batch-move-copy" class="control-group radio">',			JHtml::_('select.radiolist', $options, 'batch[move_copy]', '', 'value', 'text', 'm'), '</div><hr />');		return implode("\n", $lines);	}	/**	 * Display a batch widget for the language selector.	 *	 * @return  string  The necessary HTML for the widget.	 *	 * @since   2.5	 */	public static function language()	{		// Create the batch selector to change the language on a selection list.		$lines = array(			'<label id="batch-language-lbl" for="batch-language-id" class="hasTip"'			. ' title="' . JText::_('JLIB_HTML_BATCH_LANGUAGE_LABEL') . '::' . JText::_('JLIB_HTML_BATCH_LANGUAGE_LABEL_DESC') . '">',			JText::_('JLIB_HTML_BATCH_LANGUAGE_LABEL'),			'</label>',			'<select name="batch[language_id]" class="inputbox" id="batch-language-id">',			'<option value="">' . JText::_('JLIB_HTML_BATCH_LANGUAGE_NOCHANGE') . '</option>',			JHtml::_('select.options', JHtml::_('contentlanguage.existing', true, true), 'value', 'text'),			'</select>',		);		return implode("\n", $lines);	}	/**	 * Display a batch widget for the user selector.	 *	 * @param   boolean  $noUser  Choose to display a "no user" option	 *	 * @return  string  The necessary HTML for the widget.	 *	 * @since   2.5	 */	public static function user($noUser = true)	{		$optionNo = '';		if ($noUser)		{			$optionNo = '<option value="0">' . JText::_('JLIB_HTML_BATCH_USER_NOUSER') . '</option>';		}		// Create the batch selector to select a user on a selection list.		$lines = array(			'<label id="batch-user-lbl" for="batch-user" class="hasTip"'			. ' title="' . JText::_('JLIB_HTML_BATCH_USER_LABEL') . '::' . JText::_('JLIB_HTML_BATCH_USER_LABEL_DESC') . '">',			JText::_('JLIB_HTML_BATCH_USER_LABEL'),			'</label>',			'<select name="batch[user_id]" class="inputbox" id="batch-user-id">',			'<option value="">' . JText::_('JLIB_HTML_BATCH_USER_NOCHANGE') . '</option>',			$optionNo,			JHtml::_('select.options', JHtml::_('user.userlist'), 'value', 'text'),			'</select>'		);		return implode("\n", $lines);	}	/**	 * Display a batch widget for the tag selector.	 *	 * @return  string  The necessary HTML for the widget.	 *	 * @since   3.1	 */	public static function tag()	{		// Create the batch selector to tag items on a selection list.		$lines = array(			'<label id="batch-tag-lbl" for="batch-tag-id" class="hasTip"'			. ' title="' . JText::_('JLIB_HTML_BATCH_TAG_LABEL') . '::' . JText::_('JLIB_HTML_BATCH_TAG_LABEL_DESC') . '">',			JText::_('JLIB_HTML_BATCH_TAG_LABEL'),			'</label>',			'<select name="batch[tag]" class="inputbox" id="batch-tag-id">',			'<option value="">' . JText::_('JLIB_HTML_BATCH_TAG_NOCHANGE') . '</option>',			JHtml::_('select.options', JHtml::_('tag.tags', array('filter.published' => array(1))), 'value', 'text'),			'</select>'		);		return implode("\n", $lines);	}}
<?php/** * @package     Joomla.Administrator * @subpackage  com_media * * @copyright   Copyright (C) 2005 - 2013 Open Source Matters, Inc. All rights reserved. * @license     GNU General Public License version 2 or later; see LICENSE.txt */defined('_JEXEC') or die;/** * HTML View class for the Media component * * @package     Joomla.Administrator * @subpackage  com_media * @since       1.0 */class MediaViewMedia extends JViewLegacy{	public function display($tpl = null)	{		$app	= JFactory::getApplication();		$config = JComponentHelper::getParams('com_media');		$lang	= JFactory::getLanguage();		$style = $app->getUserStateFromRequest('media.list.layout', 'layout', 'thumbs', 'word');		$document = JFactory::getDocument();		JHtml::_('behavior.framework', true);		JHtml::_('script', 'media/mediamanager.js', true, true);		/*		JHtml::_('stylesheet', 'media/mediamanager.css', array(), true);		if ($lang->isRTL()) :			JHtml::_('stylesheet', 'media/mediamanager_rtl.css', array(), true);		endif;		*/		JHtml::_('behavior.modal');		$document->addScriptDeclaration("		window.addEvent('domready', function()		{			document.preview = SqueezeBox;		});");		// JHtml::_('script', 'system/mootree.js', true, true, false, false);		JHtml::_('stylesheet', 'system/mootree.css', array(), true);		if ($lang->isRTL()) :			JHtml::_('stylesheet', 'media/mootree_rtl.css', array(), true);		endif;		if (DIRECTORY_SEPARATOR == '\\')		{			$base = str_replace(DIRECTORY_SEPARATOR, "\\\\", COM_MEDIA_BASE);		}		else		{			$base = COM_MEDIA_BASE;		}		$js = "			var basepath = '".$base."';			var viewstyle = '".$style."';		";		$document->addScriptDeclaration($js);		/*		 * Display form for FTP credentials?		 * Don't set them here, as there are other functions called before this one if there is any file write operation		 */		$ftp = !JClientHelper::hasCredentials('ftp');		$session	= JFactory::getSession();		$state		= $this->get('state');		$this->session = $session;		$this->config = &$config;		$this->state = &$state;		$this->require_ftp = $ftp;		$this->folders_id = ' id="media-tree"';		$this->folders = $this->get('folderTree');		// Set the toolbar		$this->addToolbar();		parent::display($tpl);		echo JHtml::_('behavior.keepalive');	}	/**	 * Add the page title and toolbar.	 *	 * @since   1.6	 */	protected function addToolbar()	{		// Get the toolbar object instance		$bar = JToolBar::getInstance('toolbar');		$user = JFactory::getUser();		// Set the titlebar text		JToolbarHelper::title(JText::_('COM_MEDIA'), 'mediamanager.png');		// Add a upload button		if ($user->authorise('core.create', 'com_media'))		{			$title = JText::_('JTOOLBAR_UPLOAD');			$dhtml = "<button data-toggle=\"collapse\" data-target=\"#collapseUpload\" class=\"btn btn-small btn-success\">						<i class=\"icon-plus icon-white\" title=\"$title\"></i>						$title</button>";			$bar->appendButton('Custom', $dhtml, 'upload');			JToolbarHelper::divider();		}		// Add a create folder button		if ($user->authorise('core.create', 'com_media'))		{			$title = JText::_('COM_MEDIA_CREATE_FOLDER');			$dhtml = "<button data-toggle=\"collapse\" data-target=\"#collapseFolder\" class=\"btn btn-small\">						<i class=\"icon-folder\" title=\"$title\"></i>						$title</button>";			$bar->appendButton('Custom', $dhtml, 'folder');			JToolbarHelper::divider();		}		// Add a delete button		if ($user->authorise('core.delete', 'com_media'))		{			$title = JText::_('JTOOLBAR_DELETE');			$dhtml = "<button href=\"#\" onclick=\"MediaManager.submit('folder.delete')\" class=\"btn btn-small\">						<i class=\"icon-remove\" title=\"$title\"></i>						$title</button>";			$bar->appendButton('Custom', $dhtml, 'delete');			JToolbarHelper::divider();		}		// Add a delete button		if ($user->authorise('core.admin', 'com_media'))		{			JToolbarHelper::preferences('com_media');			JToolbarHelper::divider();		}		JToolbarHelper::help('JHELP_CONTENT_MEDIA_MANAGER');	}	function getFolderLevel($folder)	{		$this->folders_id = null;		$txt = null;		if (isset($folder['children']) && count($folder['children']))		{			$tmp = $this->folders;			$this->folders = $folder;			$txt = $this->loadTemplate('folders');			$this->folders = $tmp;		}		return $txt;	}}
<?php/** * @package     Joomla.Administrator * @subpackage  com_templates * * @copyright   Copyright (C) 2005 - 2013 Open Source Matters, Inc. All rights reserved. * @license     GNU General Public License version 2 or later; see LICENSE.txt */defined('_JEXEC') or die;?><?php	echo JHtml::_('bootstrap.startAccordion', 'templatestyleOptions', array('active' => 'collapse0'));	$fieldSets = $this->form->getFieldsets('params');	$i = 0;	foreach ($fieldSets as $name => $fieldSet) :		$label = !empty($fieldSet->label) ? $fieldSet->label : 'COM_TEMPLATES_'.$name.'_FIELDSET_LABEL';		echo JHtml::_('bootstrap.addSlide', 'templatestyleOptions', JText::_($label), 'collapse' . $i++);			if (isset($fieldSet->description) && trim($fieldSet->description)) :				echo '<p class="tip">'.$this->escape(JText::_($fieldSet->description)).'</p>';			endif;			?>				<?php foreach ($this->form->getFieldset($name) as $field) : ?>					<div class="control-group">						<div class="control-label">							<?php echo $field->label; ?>						</div>						<div class="controls">							<?php echo $field->input; ?>						</div>					</div>				<?php endforeach;		echo JHtml::_('bootstrap.endSlide');	endforeach;echo JHtml::_('bootstrap.endAccordion');
<?php/** * @package     Joomla.Administrator * @subpackage  com_modules * * @copyright   Copyright (C) 2005 - 2013 Open Source Matters, Inc. All rights reserved. * @license     GNU General Public License version 2 or later; see LICENSE.txt */defined('_JEXEC') or die;/** * View to edit a module. * * @package     Joomla.Administrator * @subpackage  com_modules * @since       1.6 */class ModulesViewModule extends JViewLegacy{	protected $form;	protected $item;	protected $state;	/**	 * Display the view	 */	public function display($tpl = null)	{		$this->form		= $this->get('Form');		$this->item		= $this->get('Item');		$this->state	= $this->get('State');		// Check for errors.		if (count($errors = $this->get('Errors')))		{			JError::raiseError(500, implode("\n", $errors));			return false;		}		$this->addToolbar();		parent::display($tpl);	}	/**	 * Add the page title and toolbar.	 *	 * @since   1.6	 */	protected function addToolbar()	{		JFactory::getApplication()->input->set('hidemainmenu', true);		$user		= JFactory::getUser();		$isNew		= ($this->item->id == 0);		$checkedOut	= !($this->item->checked_out == 0 || $this->item->checked_out == $user->get('id'));		$canDo		= ModulesHelper::getActions($this->state->get('filter.category_id'), $this->item->id);		$item		= $this->get('Item');		JToolbarHelper::title(JText::sprintf('COM_MODULES_MANAGER_MODULE', JText::_($this->item->module)), 'module.png');		// If not checked out, can save the item.		if (!$checkedOut && ($canDo->get('core.edit') || $canDo->get('core.create') ))		{			JToolbarHelper::apply('module.apply');			JToolbarHelper::save('module.save');		}		if (!$checkedOut && $canDo->get('core.create'))		{			JToolbarHelper::save2new('module.save2new');		}			// If an existing item, can save to a copy.		if (!$isNew && $canDo->get('core.create'))		{			JToolbarHelper::save2copy('module.save2copy');		}		if (empty($this->item->id))		{			JToolbarHelper::cancel('module.cancel');		}		else		{			JToolbarHelper::cancel('module.cancel', 'JTOOLBAR_CLOSE');		}		// Get the help information for the menu item.		$lang = JFactory::getLanguage();		$help = $this->get('Help');		if ($lang->hasKey($help->url))		{			$debug = $lang->setDebug(false);			$url = JText::_($help->url);			$lang->setDebug($debug);		}		else		{			$url = null;		}		JToolbarHelper::help($help->key, false, $url);	}}
<?php/** * @package     Joomla.Administrator * @subpackage  mod_quickicon * * @copyright   Copyright (C) 2005 - 2013 Open Source Matters, Inc. All rights reserved. * @license     GNU General Public License version 2 or later; see LICENSE.txt */defined('_JEXEC') or die;$html = JHtml::_('icons.buttons', $buttons);?><?php if (!empty($html)) : ?>	<div class="row-striped">		<?php echo $html;?>	</div><?php endif;?>
<?php/** * @package     Joomla.Libraries * @subpackage  Router * * @copyright   Copyright (C) 2005 - 2013 Open Source Matters, Inc. All rights reserved. * @license     GNU General Public License version 2 or later; see LICENSE.txt */defined('JPATH_BASE') or die;jimport('joomla.application.router');/** * Class to create and parse routes * * @package     Joomla.Libraries * @subpackage  Router * @since       1.5 */class JRouterAdministrator extends JRouter{	/**	 * Function to convert a route to an internal URI.	 *	 * @param   JURI  $uri  The uri.	 *	 * @return  array	 */	public function parse($uri)	{		return array();	}	/**	 * Function to convert an internal URI to a route	 *	 * @param   string  $url  The internal URL	 *	 * @return  string  The absolute search engine friendly URL	 *	 * @since   1.5	 */	public function build($url)	{		// Create the URI object		$uri = parent::build($url);		// Get the path data		$route = $uri->getPath();		// Add basepath to the uri		$uri->setPath(JURI::base(true) . '/' . $route);		return $uri;	}}
