<?php/** * @package     Joomla.Plugin * @subpackage  Editors-xtd.article * * @copyright   Copyright (C) 2005 - 2013 Open Source Matters, Inc. All rights reserved. * @license     GNU General Public License version 2 or later; see LICENSE.txt */defined('_JEXEC') or die;/** * Editor Article buton * * @package     Joomla.Plugin * @subpackage  Editors-xtd.article * @since       1.5 */class PlgButtonArticle extends JPlugin{	/**	 * Load the language file on instantiation.	 *	 * @var    boolean	 * @since  3.1	 */	protected $autoloadLanguage = true;	/**	 * Display the button	 *	 * @return array A four element array of (article_id, article_title, category_id, object)	 */	public function onDisplay($name)	{		/*		 * Javascript to insert the link		 * View element calls jSelectArticle when an article is clicked		 * jSelectArticle creates the link tag, sends it to the editor,		 * and closes the select frame.		 */		$js = "		function jSelectArticle(id, title, catid, object, link, lang)		{			var hreflang = '';			if (lang !== '')			{				var hreflang = ' hreflang = \"' + lang + '\"';			}			var tag = '<a' + hreflang + ' href=\"' + link + '\">' + title + '</a>';			jInsertEditorText(tag, '".$name."');			SqueezeBox.close();		}";		$doc = JFactory::getDocument();		$doc->addScriptDeclaration($js);		JHtml::_('behavior.modal');		/*		 * Use the built-in element view to select the article.		 * Currently uses blank class.		 */		$link = 'index.php?option=com_content&amp;view=articles&amp;layout=modal&amp;tmpl=component&amp;'.JSession::getFormToken().'=1';		$button = new JObject;		$button->modal = true;		$button->link = $link;		$button->text = JText::_('PLG_ARTICLE_BUTTON_ARTICLE');		$button->name = 'file-add';		$button->options = "{handler: 'iframe', size: {x: 800, y: 500}}";		return $button;	}}
<?php/** * @package     Joomla.Administrator * @subpackage  com_installer * * @copyright   Copyright (C) 2005 - 2013 Open Source Matters, Inc. All rights reserved. * @license     GNU General Public License version 2 or later; see LICENSE.txt */defined('_JEXEC') or die;/** * Installer Database Controller * * @package     Joomla.Administrator * @subpackage  com_installer * @since       2.5 */class InstallerControllerDatabase extends JControllerLegacy{	/**	 * Tries to fix missing database updates	 *	 * @return  void	 *	 * @since   2.5	 */	public function fix()	{		$model = $this->getModel('database');		$model->fix();		$this->setRedirect(JRoute::_('index.php?option=com_installer&view=database', false));	}}
<?php/** * @package     Joomla.Administrator * @subpackage  com_templates * * @copyright   Copyright (C) 2005 - 2013 Open Source Matters, Inc. All rights reserved. * @license     GNU General Public License version 2 or later; see LICENSE.txt */defined('_JEXEC') or die;/** * View class for a list of template styles. * * @package     Joomla.Administrator * @subpackage  com_templates * @since       1.6 */class TemplatesViewTemplates extends JViewLegacy{	/**	 * @var		array	 * @since   1.6	 */	protected $items;	/**	 * @var		object	 * @since   1.6	 */	protected $pagination;	/**	 * @var		object	 * @since   1.6	 */	protected $state;	/**	 * Display the view.	 *	 * @param   string	 *	 * @return  void	 * @since   1.6	 */	public function display($tpl = null)	{		$this->items		= $this->get('Items');		$this->pagination	= $this->get('Pagination');		$this->state		= $this->get('State');		$this->preview		= JComponentHelper::getParams('com_templates')->get('template_positions_display');		TemplatesHelper::addSubmenu('templates');		// Check for errors.		if (count($errors = $this->get('Errors')))		{			JError::raiseError(500, implode("\n", $errors));			return false;		}		// Check if there are no matching items		if (!count($this->items))		{			JFactory::getApplication()->enqueueMessage(				JText::_('COM_TEMPLATES_MSG_MANAGE_NO_TEMPLATES'),				'warning'			);		}		$this->addToolbar();		parent::display($tpl);	}	/**	 * Add the page title and toolbar.	 *	 * @return  void	 * @since   1.6	 */	protected function addToolbar()	{		$state	= $this->get('State');		$canDo	= TemplatesHelper::getActions();		JToolbarHelper::title(JText::_('COM_TEMPLATES_MANAGER_TEMPLATES'), 'thememanager');		if ($canDo->get('core.admin'))		{			JToolbarHelper::preferences('com_templates');			JToolbarHelper::divider();		}		JToolbarHelper::help('JHELP_EXTENSIONS_TEMPLATE_MANAGER_TEMPLATES');		JHtmlSidebar::setAction('index.php?option=com_templates&view=templates');		JHtmlSidebar::addFilter(			JText::_('JGLOBAL_FILTER_CLIENT'),			'filter_client_id',			JHtml::_('select.options', TemplatesHelper::getClientOptions(), 'value', 'text', $this->state->get('filter.client_id'))		);		$this->sidebar = JHtmlSidebar::render();	}}
<?php/** * @package     Joomla.Administrator * @subpackage  com_menus * * @copyright   Copyright (C) 2005 - 2013 Open Source Matters, Inc. All rights reserved. * @license     GNU General Public License version 2 or later; see LICENSE.txt */defined('_JEXEC') or die;/** * The Menu Item Controller * * @package     Joomla.Administrator * @subpackage  com_menus * @since       1.6 */class MenusControllerItem extends JControllerForm{	/**	 * Method to add a new menu item.	 *	 * @return  mixed  True if the record can be added, a JError object if not.	 *	 * @since   1.6	 */	public function add()	{		$app = JFactory::getApplication();		$context = 'com_menus.edit.item';		$result = parent::add();		if ($result)		{			$app->setUserState($context . '.type', null);			$app->setUserState($context . '.link', null);			$menuType = $app->getUserStateFromRequest($this->context . '.filter.menutype', 'menutype', 'mainmenu', 'cmd');			$this->setRedirect(JRoute::_('index.php?option=com_menus&view=item&menutype=' . $menuType . $this->getRedirectToItemAppend(), false));		}		return $result;	}	/**	 * Method to run batch operations.	 *	 * @param   object  $model  The model.	 *	 * @return  boolean	 True if successful, false otherwise and internal error is set.	 *	 * @since   1.6	 */	public function batch($model = null)	{		JSession::checkToken() or jexit(JText::_('JINVALID_TOKEN'));		$model = $this->getModel('Item', '', array());		// Preset the redirect		$this->setRedirect(JRoute::_('index.php?option=com_menus&view=items' . $this->getRedirectToListAppend(), false));		return parent::batch($model);	}	/**	 * Method to cancel an edit.	 *	 * @param   string  $key  The name of the primary key of the URL variable.	 *	 * @return  boolean  True if access level checks pass, false otherwise.	 *	 * @since   1.6	 */	public function cancel($key = null)	{		JSession::checkToken() or jexit(JText::_('JINVALID_TOKEN'));		$app = JFactory::getApplication();		$context = 'com_menus.edit.item';		$result = parent::cancel();		if ($result)		{			// Clear the ancillary data from the session.			$app->setUserState($context . '.type', null);			$app->setUserState($context . '.link', null);		}	}	/**	 * Method to edit an existing record.	 *	 * @param   string  $key     The name of the primary key of the URL variable.	 * @param   string  $urlVar  The name of the URL variable if different from the primary key	 * (sometimes required to avoid router collisions).	 *	 * @return  boolean  True if access level check and checkout passes, false otherwise.	 *	 * @since   1.6	 */	public function edit($key = null, $urlVar = null)	{		$app = JFactory::getApplication();		$result = parent::edit();		if ($result)		{			// Push the new ancillary data into the session.			$app->setUserState('com_menus.edit.item.type', null);			$app->setUserState('com_menus.edit.item.link', null);		}		return true;	}	/**	 * Method to save a record.	 *	 * @param   string  $key     The name of the primary key of the URL variable.	 * @param   string  $urlVar  The name of the URL variable if different from the primary key (sometimes required to avoid router collisions).	 *	 * @return  boolean  True if successful, false otherwise.	 *	 * @since   1.6	 */	public function save($key = null, $urlVar = null)	{		// Check for request forgeries.		JSession::checkToken() or jexit(JText::_('JINVALID_TOKEN'));		$app      = JFactory::getApplication();		$model    = $this->getModel('Item', '', array());		$data     = $this->input->post->get('jform', array(), 'array');		$task     = $this->getTask();		$context  = 'com_menus.edit.item';		$recordId = $this->input->getInt('id');		if (!$this->checkEditId($context, $recordId))		{			// Somehow the person just went to the form and saved it - we don't allow that.			$this->setError(JText::sprintf('JLIB_APPLICATION_ERROR_UNHELD_ID', $recordId));			$this->setMessage($this->getError(), 'error');			$this->setRedirect(JRoute::_('index.php?option=com_menus&view=items' . $this->getRedirectToListAppend(), false));			return false;		}		// Populate the row id from the session.		$data['id'] = $recordId;		// The save2copy task needs to be handled slightly differently.		if ($task == 'save2copy')		{			// Check-in the original row.			if ($model->checkin($data['id']) === false)			{				// Check-in failed, go back to the item and display a notice.				$this->setMessage(JText::sprintf('JLIB_APPLICATION_ERROR_CHECKIN_FAILED', $model->getError()), 'warning');				return false;			}			// Reset the ID and then treat the request as for Apply.			$data['id'] = 0;			$data['associations'] = array();			$task = 'apply';		}		// Validate the posted data.		// This post is made up of two forms, one for the item and one for params.		$form = $model->getForm($data);		if (!$form)		{			JError::raiseError(500, $model->getError());			return false;		}		$data = $model->validate($form, $data);		// Check for the special 'request' entry.		if ($data['type'] == 'component' && isset($data['request']) && is_array($data['request']) && !empty($data['request']))		{			// Parse the submitted link arguments.			$args = array();			parse_str(parse_url($data['link'], PHP_URL_QUERY), $args);			// Merge in the user supplied request arguments.			$args = array_merge($args, $data['request']);			$data['link'] = 'index.php?' . urldecode(http_build_query($args, '', '&'));			unset($data['request']);		}		// Check for validation errors.		if ($data === false)		{			// Get the validation messages.			$errors = $model->getErrors();			// Push up to three validation messages out to the user.			for ($i = 0, $n = count($errors); $i < $n && $i < 3; $i++)			{				if ($errors[$i] instanceof Exception)				{					$app->enqueueMessage($errors[$i]->getMessage(), 'warning');				}				else				{					$app->enqueueMessage($errors[$i], 'warning');				}			}			// Save the data in the session.			$app->setUserState('com_menus.edit.item.data', $data);			// Redirect back to the edit screen.			$this->setRedirect(JRoute::_('index.php?option=' . $this->option . '&view=' . $this->view_item . $this->getRedirectToItemAppend($recordId), false));			return false;		}		// Attempt to save the data.		if (!$model->save($data))		{			// Save the data in the session.			$app->setUserState('com_menus.edit.item.data', $data);			// Redirect back to the edit screen.			$this->setMessage(JText::sprintf('JLIB_APPLICATION_ERROR_SAVE_FAILED', $model->getError()), 'warning');			$this->setRedirect(JRoute::_('index.php?option=' . $this->option . '&view=' . $this->view_item . $this->getRedirectToItemAppend($recordId), false));			return false;		}		// Save succeeded, check-in the row.		if ($model->checkin($data['id']) === false)		{			// Check-in failed, go back to the row and display a notice.			$this->setMessage(JText::sprintf('JLIB_APPLICATION_ERROR_CHECKIN_FAILED', $model->getError()), 'warning');			$this->setRedirect(JRoute::_('index.php?option=' . $this->option . '&view=' . $this->view_item . $this->getRedirectToItemAppend($recordId), false));			return false;		}		$this->setMessage(JText::_('COM_MENUS_SAVE_SUCCESS'));		// Redirect the user and adjust session state based on the chosen task.		switch ($task)		{			case 'apply':				// Set the row data in the session.				$recordId = $model->getState($this->context . '.id');				$this->holdEditId($context, $recordId);				$app->setUserState('com_menus.edit.item.data', null);				$app->setUserState('com_menus.edit.item.type', null);				$app->setUserState('com_menus.edit.item.link', null);				// Redirect back to the edit screen.				$this->setRedirect(JRoute::_('index.php?option=' . $this->option . '&view=' . $this->view_item . $this->getRedirectToItemAppend($recordId), false));				break;			case 'save2new':				// Clear the row id and data in the session.				$this->releaseEditId($context, $recordId);				$app->setUserState('com_menus.edit.item.data', null);				$app->setUserState('com_menus.edit.item.type', null);				$app->setUserState('com_menus.edit.item.link', null);				$app->setUserState('com_menus.edit.item.menutype', $model->getState('item.menutype'));				// Redirect back to the edit screen.				$this->setRedirect(JRoute::_('index.php?option=' . $this->option . '&view=' . $this->view_item . $this->getRedirectToItemAppend(), false));				break;			default:				// Clear the row id and data in the session.				$this->releaseEditId($context, $recordId);				$app->setUserState('com_menus.edit.item.data', null);				$app->setUserState('com_menus.edit.item.type', null);				$app->setUserState('com_menus.edit.item.link', null);				// Redirect to the list screen.				$this->setRedirect(JRoute::_('index.php?option=' . $this->option . '&view=' . $this->view_list . $this->getRedirectToListAppend(), false));				break;		}	}	/**	 * Sets the type of the menu item currently being edited.	 *	 * @return  void	 *	 * @since   1.6	 */	public function setType()	{		$app = JFactory::getApplication();		// Get the posted values from the request.		$data = $this->input->post->get('jform', array(), 'array');		$recordId = $this->input->getInt('id');		// Get the type.		$type = $data['type'];		$type = json_decode(base64_decode($type));		$title = isset($type->title) ? $type->title : null;		$recordId = isset($type->id) ? $type->id : 0;		$specialTypes = array('alias', 'separator', 'url', 'heading');		if (!in_array($title, $specialTypes))		{			$title = 'component';		}		$app->setUserState('com_menus.edit.item.type', $title);		if ($title == 'component')		{			if (isset($type->request))			{				$component = JComponentHelper::getComponent($type->request->option);				$data['component_id'] = $component->id;				$app->setUserState('com_menus.edit.item.link', 'index.php?' . JURI::buildQuery((array) $type->request));			}		}		// If the type is alias you just need the item id from the menu item referenced.		elseif ($title == 'alias')		{			$app->setUserState('com_menus.edit.item.link', 'index.php?Itemid=');		}		unset($data['request']);		$data['type'] = $title;		if ($this->input->get('fieldtype') == 'type')		{			$data['link'] = $app->getUserState('com_menus.edit.item.link');		}		//Save the data in the session.		$app->setUserState('com_menus.edit.item.data', $data);		$this->type = $type;		$this->setRedirect(JRoute::_('index.php?option=' . $this->option . '&view=' . $this->view_item . $this->getRedirectToItemAppend($recordId), false));	}}
<?php/** * @package     Joomla.Administrator * @subpackage  com_content * * @copyright   Copyright (C) 2005 - 2013 Open Source Matters, Inc. All rights reserved. * @license     GNU General Public License version 2 or later; see LICENSE.txt */defined('_JEXEC') or die;/** * @package     Joomla.Administrator * @subpackage  com_content * @since       1.6 */class ContentControllerArticle extends JControllerForm{	/**	 * Class constructor.	 *	 * @param   array  $config  A named array of configuration variables.	 *	 * @since   1.6	 */	public function __construct($config = array())	{		parent::__construct($config);		// An article edit form can come from the articles or featured view.		// Adjust the redirect view on the value of 'return' in the request.		if ($this->input->get('return') == 'featured')		{			$this->view_list = 'featured';			$this->view_item = 'article&return=featured';		}	}	/**	 * Method override to check if you can add a new record.	 *	 * @param   array  $data  An array of input data.	 *	 * @return  boolean	 *	 * @since   1.6	 */	protected function allowAdd($data = array())	{		$user = JFactory::getUser();		$categoryId = JArrayHelper::getValue($data, 'catid', $this->input->getInt('filter_category_id'), 'int');		$allow = null;		if ($categoryId)		{			// If the category has been passed in the data or URL check it.			$allow = $user->authorise('core.create', 'com_content.category.' . $categoryId);		}		if ($allow === null)		{			// In the absense of better information, revert to the component permissions.			return parent::allowAdd();		}		else		{			return $allow;		}	}	/**	 * Method override to check if you can edit an existing record.	 *	 * @param   array   $data  An array of input data.	 * @param   string  $key   The name of the key for the primary key.	 *	 * @return  boolean	 *	 * @since   1.6	 */	protected function allowEdit($data = array(), $key = 'id')	{		$recordId = (int) isset($data[$key]) ? $data[$key] : 0;		$user = JFactory::getUser();		$userId = $user->get('id');		// Check general edit permission first.		if ($user->authorise('core.edit', 'com_content.article.' . $recordId))		{			return true;		}		// Fallback on edit.own.		// First test if the permission is available.		if ($user->authorise('core.edit.own', 'com_content.article.' . $recordId))		{			// Now test the owner is the user.			$ownerId = (int) isset($data['created_by']) ? $data['created_by'] : 0;			if (empty($ownerId) && $recordId)			{				// Need to do a lookup from the model.				$record = $this->getModel()->getItem($recordId);				if (empty($record))				{					return false;				}				$ownerId = $record->created_by;			}			// If the owner matches 'me' then do the test.			if ($ownerId == $userId)			{				return true;			}		}		// Since there is no asset tracking, revert to the component permissions.		return parent::allowEdit($data, $key);	}	/**	 * Method to run batch operations.	 *	 * @param   object  $model  The model.	 *	 * @return  boolean   True if successful, false otherwise and internal error is set.	 *	 * @since   1.6	 */	public function batch($model = null)	{		JSession::checkToken() or jexit(JText::_('JINVALID_TOKEN'));		// Set the model		$model = $this->getModel('Article', '', array());		// Preset the redirect		$this->setRedirect(JRoute::_('index.php?option=com_content&view=articles' . $this->getRedirectToListAppend(), false));		return parent::batch($model);	}	/**	 * Function that allows child controller access to model data after the data has been saved.	 *	 * @param   JModelLegacy  $model  The data model object.	 * @param   array         $validData   The validated data.	 *	 * @return	void	 *	 * @since	3.1	 */	protected function postSaveHook(JModelLegacy $model, $validData = array())	{		return;	}}
<?php/** * @package     Joomla.Administrator * @subpackage  com_templates * * @copyright   Copyright (C) 2005 - 2013 Open Source Matters, Inc. All rights reserved. * @license     GNU General Public License version 2 or later; see LICENSE.txt */defined('_JEXEC') or die;/** * Templates component helper. * * @package     Joomla.Administrator * @subpackage  com_templates * @since       1.6 */class TemplatesHelper{	/**	 * Configure the Linkbar.	 *	 * @param   string    The name of the active view.	 */	public static function addSubmenu($vName)	{		JHtmlSidebar::addEntry(			JText::_('COM_TEMPLATES_SUBMENU_STYLES'),			'index.php?option=com_templates&view=styles',			$vName == 'styles'		);		JHtmlSidebar::addEntry(			JText::_('COM_TEMPLATES_SUBMENU_TEMPLATES'),			'index.php?option=com_templates&view=templates',			$vName == 'templates'		);	}	/**	 * Gets a list of the actions that can be performed.	 *	 * @return  JObject	 */	public static function getActions()	{		$user = JFactory::getUser();		$result = new JObject;		$actions = JAccess::getActions('com_templates');		foreach ($actions as $action)		{			$result->set($action->name, $user->authorise($action->name, 'com_templates'));		}		return $result;	}	/**	 * Get a list of filter options for the application clients.	 *	 * @return  array  An array of JHtmlOption elements.	 */	public static function getClientOptions()	{		// Build the filter options.		$options = array();		$options[] = JHtml::_('select.option', '0', JText::_('JSITE'));		$options[] = JHtml::_('select.option', '1', JText::_('JADMINISTRATOR'));		return $options;	}	/**	 * Get a list of filter options for the templates with styles.	 *	 * @return  array  An array of JHtmlOption elements.	 */	public static function getTemplateOptions($clientId = '*')	{		// Build the filter options.		$db = JFactory::getDbo();		$query = $db->getQuery(true);		if ($clientId != '*')		{			$query->where('client_id=' . (int) $clientId);		}		$query->select('element as value, name as text, extension_id as e_id')			->from('#__extensions')			->where('type = ' . $db->quote('template'))			->where('enabled = 1')			->order('client_id')			->order('name');		$db->setQuery($query);		$options = $db->loadObjectList();		return $options;	}	public static function parseXMLTemplateFile($templateBaseDir, $templateDir)	{		$data = new JObject;		// Check of the xml file exists		$filePath = JPath::clean($templateBaseDir . '/templates/' . $templateDir . '/templateDetails.xml');		if (is_file($filePath))		{			$xml = JInstaller::parseXMLInstallFile($filePath);			if ($xml['type'] != 'template')			{				return false;			}			foreach ($xml as $key => $value)			{				$data->set($key, $value);			}		}		return $data;	}	/**	 * @since   3.0	 */	public static function getPositions($clientId, $templateDir)	{		$positions = array();		$templateBaseDir = $clientId ? JPATH_ADMINISTRATOR : JPATH_SITE;		$filePath = JPath::clean($templateBaseDir . '/templates/' . $templateDir . '/templateDetails.xml');		if (is_file($filePath))		{			// Read the file to see if it's a valid component XML file			$xml = simplexml_load_file($filePath);			if (!$xml)			{				return false;			}			// Check for a valid XML root tag.			// Extensions use 'extension' as the root tag.  Languages use 'metafile' instead			if ($xml->getName() != 'extension' && $xml->getName() != 'metafile')			{				unset($xml);				return false;			}			$positions = (array) $xml->positions;			if (isset($positions['position']))			{				$positions = $positions['position'];			}			else			{				$positions = array();			}		}		return $positions;	}}
<?php/** * @package     Joomla.Site * @subpackage  com_newsfeeds * * @copyright   Copyright (C) 2005 - 2013 Open Source Matters, Inc. All rights reserved. * @license     GNU General Public License version 2 or later; see LICENSE.txt */defined('_JEXEC') or die;JHtml::_('behavior.framework');$n			= count($this->items);$listOrder	= $this->escape($this->state->get('list.ordering'));$listDirn	= $this->escape($this->state->get('list.direction'));?><?php if (empty($this->items)) : ?>	<p> <?php echo JText::_('COM_NEWSFEEDS_NO_ARTICLES'); ?></p><?php else : ?><form action="<?php echo htmlspecialchars(JUri::getInstance()->toString()); ?>" method="post" name="adminForm" id="adminForm">	<?php if ($this->params->get('filter_field') != 'hide' || $this->params->get('show_pagination_limit')) :?>	<fieldset class="filters btn-toolbar">		<?php if ($this->params->get('filter_field') != 'hide') :?>			<div class="btn-group">				<label class="filter-search-lbl element-invisible" for="filter-search"><span class="label label-warning"><?php echo JText::_('JUNPUBLISHED'); ?></span><?php echo JText::_('COM_NEWSFEEDS_FILTER_LABEL').'&#160;'; ?></label>				<input type="text" name="filter-search" id="filter-search" value="<?php echo $this->escape($this->state->get('list.filter')); ?>" class="inputbox" onchange="document.adminForm.submit();" title="<?php echo JText::_('COM_NEWSFEEDS_FILTER_SEARCH_DESC'); ?>" placeholder="<?php echo JText::_('COM_NEWSFEEDS_FILTER_SEARCH_DESC'); ?>" />			</div>		<?php endif; ?>		<?php if ($this->params->get('show_pagination_limit')) : ?>			<div class="btn-group pull-right">				<label for="limit" class="element-invisible">					<?php echo JText::_('JGLOBAL_DISPLAY_NUM'); ?>				</label>				<?php echo $this->pagination->getLimitBox(); ?>			</div>		<?php endif; ?>	</fieldset>	<?php endif; ?>		<ul class="category list-striped list-condensed">			<?php foreach ($this->items as $i => $item) : ?>				<?php if ($this->items[$i]->published == 0) : ?>					<li class="system-unpublished cat-list-row<?php echo $i % 2; ?>">				<?php else: ?>					<li class="cat-list-row<?php echo $i % 2; ?>" >				<?php endif; ?>				<?php  if ($this->params->get('show_articles')) : ?>					<span class="list-hits badge badge-info pull-right">						<?php echo  JText::sprintf('COM_NEWSFEEDS_NUM_ARTICLES_COUNT', $item->numarticles); ?>					</span>				<?php  endif; ?>				<span class="list pull-left">					<strong class="list-title">						<a href="<?php echo JRoute::_(NewsFeedsHelperRoute::getNewsfeedRoute($item->slug, $item->catid)); ?>">							<?php echo $item->name; ?></a>					</strong>				</span>				<?php if ($this->items[$i]->published == 0) : ?>					<span class="label label-warning"><?php echo JText::_('JUNPUBLISHED'); ?></span>				<?php endif; ?>				<br />				<?php  if ($this->params->get('show_link')) : ?>					<span class="list pull-left">							<a href="<?php echo $item->link; ?>"><?php echo $item->link; ?></a>					</span>					<br/>				<?php  endif; ?>				</li>			<?php endforeach; ?>		</ul>		<?php // Add pagination links ?>		<?php if (!empty($this->items)) : ?>			<?php if (($this->params->def('show_pagination', 2) == 1  || ($this->params->get('show_pagination') == 2)) && ($this->pagination->pagesTotal > 1)) : ?>				<div class="pagination">					<?php if ($this->params->def('show_pagination_results', 1)) : ?>						<p class="counter pull-right">							<?php echo $this->pagination->getPagesCounter(); ?>						</p>					<?php endif; ?>					<?php echo $this->pagination->getPagesLinks(); ?>				</div>			<?php endif; ?>		<?php  endif; ?>	</form><?php endif; ?>
<?php/** * @package     Joomla.Libraries * @subpackage  Toolbar * * @copyright   Copyright (C) 2005 - 2013 Open Source Matters, Inc. All rights reserved. * @license     GNU General Public License version 2 or later; see LICENSE */defined('JPATH_PLATFORM') or die;/** * Renders a modal window button * * @package     Joomla.Libraries * @subpackage  Toolbar * @since       3.0 */class JToolbarButtonPopup extends JToolbarButton{	/**	 * Button type	 *	 * @var    string	 */	protected $_name = 'Popup';	/**	 * Fetch the HTML for the button	 *	 * @param   string   $type     Unused string, formerly button type.	 * @param   string   $name     Modal name, used to generate element ID	 * @param   string   $text     The link text	 * @param   string   $url      URL for popup	 * @param   integer  $width    Width of popup	 * @param   integer  $height   Height of popup	 * @param   integer  $top      Top attribute.  [@deprecated  Unused, will be removed in 4.0]	 * @param   integer  $left     Left attribute. [@deprecated  Unused, will be removed in 4.0]	 * @param   string   $onClose  JavaScript for the onClose event.	 * @param   string   $title    The title text	 *	 * @return  string  HTML string for the button	 *	 * @since   3.0	 */	public function fetchButton($type = 'Modal', $name = '', $text = '', $url = '', $width = 640, $height = 480, $top = 0, $left = 0,		$onClose = '', $title = '')	{		// If no $title is set, use the $text element		if (strlen($title) == 0)		{			$title = $text;		}		$text = JText::_($text);		$title = JText::_($title);		$class = 'out-2';		$doTask = $this->_getCommand($url);		$html = "<button class=\"btn btn-small modal\" data-toggle=\"modal\" data-target=\"#modal-" . $name . "\">\n";		$html .= "<i class=\"icon-" . $class . "\">\n";		$html .= "</i>\n";		$html .= "$text\n";		$html .= "</button>\n";		// Build the options array for the modal		$params = array();		$params['title']  = $title;		$params['url']    = $doTask;		$params['height'] = $height;		$params['width']  = $width;		$html .= JHtml::_('bootstrap.renderModal', 'modal-' . $name, $params);		// If an $onClose event is passed, add it to the modal JS object		if (strlen($onClose) >= 1)		{			$html .= "<script>\n";			$html .= "jQuery('#modal-" . $name . "').on('hide', function () {\n";			$html .= $onClose . ";\n";			$html .= "}";			$html .= ");";			$html .= "</script>\n";		}		return $html;	}	/**	 * Get the button id	 *	 * @param   string  $type  Button type	 * @param   string  $name  Button name	 *	 * @return  string	Button CSS Id	 *	 * @since   3.0	 */	public function fetchId($type, $name)	{		return $this->_parent->getName() . '-' . "popup-$name";	}	/**	 * Get the JavaScript command for the button	 *	 * @param   string  $url  URL for popup	 *	 * @return  string  JavaScript command string	 *	 * @since   3.0	 */	private function _getCommand($url)	{		if (substr($url, 0, 4) !== 'http')		{			$url = JURI::base() . $url;		}		return $url;	}}
<?php/** * @package     Joomla.Platform * @subpackage  MediaWiki * * @copyright   Copyright (C) 2005 - 2012 Open Source Matters, Inc. All rights reserved. * @license     GNU General Public License version 2 or later; see LICENSE */defined('JPATH_PLATFORM') or die;/** * MediaWiki API Categories class for the Joomla Platform. * * @package     Joomla.Platform * @subpackage  MediaWiki * @since       12.3 */class JMediawikiCategories extends JMediawikiObject{	/**     * Method to list all categories the page(s) belong to.     *     * @param   array    $titles        Page titles to retrieve categories.     * @param   array    $clprop        List of additional properties to get.     * @param   array    $clshow        Type of categories to show.     * @param   integer  $cllimit       Number of categories to return.     * @param   boolean  $clcontinue    Continue when more results are available.     * @param   array    $clcategories  Only list these categories.     * @param   string   $cldir         Direction of listing.     *     * @return  object     *     * @since   12.1     */	public function getCategories(array $titles, array $clprop = null, array $clshow = null, $cllimit = null, $clcontinue = false,		array $clcategories = null, $cldir = null)	{		// Build the request.		$path = '?action=query&prop=categories';		// Append titles to the request.		$path .= '&titles=' . $this->buildParameter($titles);		if (isset($clprop))		{			$path .= '&clprop=' . $this->buildParameter($clprop);		}		if (isset($clshow))		{			$path .= '&$clshow=' . $this->buildParameter($clshow);		}		if (isset($cllimit))		{			$path .= '&cllimit=' . $cllimit;		}		if ($clcontinue)		{			$path .= '&clcontinue=';		}		if (isset($clcategories))		{			$path .= '&clcategories=' . $this->buildParameter($clcategories);		}		if (isset($cldir))		{			$path .= '&cldir=' . $cldir;		}		// Send the request.		$response = $this->client->get($this->fetchUrl($path));		return $this->validateResponse($response);	}	/**     * Method to get information about all categories used.     *     * @param   array  $titles  Page titles to retrieve categories.     *     * @return  object     *     * @since   12.3     */	public function getCategoriesUsed(array $titles)	{		// Build the request		$path = '?action=query&generator=categories&prop=info';		// Append titles to the request		$path .= '&titles=' . $this->buildParameter($titles);		// Send the request.		$response = $this->client->get($this->fetchUrl($path));		return $this->validateResponse($response);	}	/**     * Method to get information about the given categories.     *     * @param   array    $titles      Page titles to retrieve categories.     * @param   boolean  $clcontinue  Continue when more results are available.     *     * @return  object     *     * @since   12.3     */	public function getCategoriesInfo(array $titles, $clcontinue = false)	{		// Build the request.		$path = '?action=query&prop=categoryinfo';		// Append titles to the request		$path .= '&titles=' . $this->buildParameter($titles);		if ($clcontinue)		{			$path .= '&clcontinue=';		}		// Send the request.		$response = $this->client->get($this->fetchUrl($path));		return $this->validateResponse($response);	}	/**     * Method to enumerate all categories.     *     * @param   string   $acfrom    The category to start enumerating from.     * @param   string   $acto      The category to stop enumerating at.     * @param   string   $acprefix  Search for all category titles that begin with this value.     * @param   string   $acdir     Direction to sort in.     * @param   integer  $acmin     Minimum number of category members.     * @param   integer  $acmax     Maximum number of category members.     * @param   integer  $aclimit   How many categories to return.     * @param   array    $acprop    Which properties to get.     *     * @return  object     *     * @since   12.3     */	public function enumerateCategories($acfrom = null, $acto = null, $acprefix = null, $acdir = null, $acmin = null,		$acmax = null, $aclimit = null, array $acprop = null)	{		// Build the request.		$path = '?action=query&list=allcategories';		if (isset($acfrom))		{			$path .= '&acfrom=' . $acfrom;		}		if (isset($acto))		{			$path .= '&acto=' . $acto;		}		if (isset($acprefix))		{			$path .= '&acprefix=' . $acprefix;		}		if (isset($acdir))		{			$path .= '&acdir=' . $acdir;		}		if (isset($acfrom))		{			$path .= '&acfrom=' . $acfrom;		}		if (isset($acmin))		{			$path .= '&acmin=' . $acmin;		}		if (isset($acmax))		{			$path .= '&acmax=' . $acmax;		}		if (isset($aclimit))		{			$path .= '&aclimit=' . $aclimit;		}		if (isset($acprop))		{			$path .= '&acprop=' . $this->buildParameter($acprop);		}		// Send the request.		$response = $this->client->get($this->fetchUrl($path));		return $this->validateResponse($response);	}	/**     * Method to list change tags.     *     * @param   array   $tgprop   List of properties to get.     * @param   string  $tglimit  The maximum number of tags to limit.     *     * @return  object     *     * @since   12.3     */	public function getChangeTags(array $tgprop = null, $tglimit = null)	{		// Build the request.		$path = '?action=query&list=tags';		if (isset($tgprop))		{			$path .= '&tgprop=' . $this->buildParameter($tgprop);		}		if (isset($tglimit))		{			$path .= '&tglimit=' . $tglimit;		}		// @TODO add support for $tgcontinue		// Send the request.		$response = $this->client->get($this->fetchUrl($path));		return $this->validateResponse($response);	}}
<?php/** * @package     Joomla.Site * @subpackage  com_content * * @copyright   Copyright (C) 2005 - 2013 Open Source Matters, Inc. All rights reserved. * @license     GNU General Public License version 2 or later; see LICENSE.txt */defined('_JEXEC') or die;JHtml::addIncludePath(JPATH_COMPONENT.'/helpers/html');JHtml::_('behavior.tooltip');JHtml::_('behavior.framework');// Create some shortcuts.$params		= &$this->item->params;$n			= count($this->items);$listOrder	= $this->escape($this->state->get('list.ordering'));$listDirn	= $this->escape($this->state->get('list.direction'));// check for at least one editable article$isEditable = false;if (!empty($this->items)){	foreach ($this->items as $article)	{		if ($article->params->get('access-edit'))		{			$isEditable = true;			break;		}	}}?><?php if (empty($this->items)) : ?>	<?php if ($this->params->get('show_no_articles', 1)) : ?>	<p><?php echo JText::_('COM_CONTENT_NO_ARTICLES'); ?></p>	<?php endif; ?><?php else : ?><form action="<?php echo htmlspecialchars(JUri::getInstance()->toString()); ?>" method="post" name="adminForm" id="adminForm" class="form-inline">	<?php if ($this->params->get('show_headings') || $this->params->get('filter_field') != 'hide' || $this->params->get('show_pagination_limit')) :?>	<fieldset class="filters btn-toolbar">		<?php if ($this->params->get('filter_field') != 'hide') :?>			<div class="btn-group">				<label class="filter-search-lbl element-invisible" for="filter-search">					<?php echo JText::_('COM_CONTENT_'.$this->params->get('filter_field').'_FILTER_LABEL').'&#160;'; ?>				</label>				<input type="text" name="filter-search" id="filter-search" value="<?php echo $this->escape($this->state->get('list.filter')); ?>" class="inputbox" onchange="document.adminForm.submit();" title="<?php echo JText::_('COM_CONTENT_FILTER_SEARCH_DESC'); ?>" placeholder="<?php echo JText::_('COM_CONTENT_'.$this->params->get('filter_field').'_FILTER_LABEL'); ?>" />			</div>		<?php endif; ?>		<?php if ($this->params->get('show_pagination_limit')) : ?>			<div class="btn-group pull-right">				<label for="limit" class="element-invisible">					<?php echo JText::_('JGLOBAL_DISPLAY_NUM'); ?>				</label>				<?php echo $this->pagination->getLimitBox(); ?>			</div>		<?php endif; ?>		<input type="hidden" name="filter_order" value="" />		<input type="hidden" name="filter_order_Dir" value="" />		<input type="hidden" name="limitstart" value="" />		<input type="hidden" name="task" value="" />		<div class="clearfix"></div>	</fieldset>	<?php endif; ?>	<table class="category table table-striped table-bordered table-hover">		<?php if ($this->params->get('show_headings')) : ?>		<thead>			<tr>				<th id="categorylist_header_title">					<?php echo JHtml::_('grid.sort', 'JGLOBAL_TITLE', 'a.title', $listDirn, $listOrder); ?>				</th>				<?php if ($date = $this->params->get('list_show_date')) : ?>					<th id="categorylist_header_date">						<?php if ($date == "created") : ?>							<?php echo JHtml::_('grid.sort', 'COM_CONTENT_'.$date.'_DATE', 'a.created', $listDirn, $listOrder); ?>						<?php elseif ($date == "modified") : ?>							<?php echo JHtml::_('grid.sort', 'COM_CONTENT_'.$date.'_DATE', 'a.modified', $listDirn, $listOrder); ?>						<?php elseif ($date == "published") : ?>							<?php echo JHtml::_('grid.sort', 'COM_CONTENT_'.$date.'_DATE', 'a.publish_up', $listDirn, $listOrder); ?>						<?php endif; ?>					</th>				<?php endif; ?>				<?php if ($this->params->get('list_show_author')) : ?>					<th id="categorylist_header_author">						<?php echo JHtml::_('grid.sort', 'JAUTHOR', 'author', $listDirn, $listOrder); ?>					</th>				<?php endif; ?>				<?php if ($this->params->get('list_show_hits')) : ?>					<th id="categorylist_header_hits">						<?php echo JHtml::_('grid.sort', 'JGLOBAL_HITS', 'a.hits', $listDirn, $listOrder); ?>					</th>				<?php endif; ?>				<?php if ($isEditable) : ?>					<th id="categorylist_header_edit"><?php echo JText::_('COM_CONTENT_EDIT_ITEM'); ?></th>				<?php endif; ?>			</tr>		</thead>		<?php endif; ?>		<tbody>			<?php foreach ($this->items as $i => $article) : ?>				<?php if ($this->items[$i]->state == 0) : ?>				 <tr class="system-unpublished cat-list-row<?php echo $i % 2; ?>">				<?php else: ?>				<tr class="cat-list-row<?php echo $i % 2; ?>" >				<?php endif; ?>					<td headers="categorylist_header_title" class="list-title">						<?php if (in_array($article->access, $this->user->getAuthorisedViewLevels())) : ?>							<a href="<?php echo JRoute::_(ContentHelperRoute::getArticleRoute($article->slug, $article->catid)); ?>">								<?php echo $this->escape($article->title); ?>							</a>						<?php else: ?>							<?php							echo $this->escape($article->title).' : ';							$menu		= JFactory::getApplication()->getMenu();							$active		= $menu->getActive();							$itemId		= $active->id;							$link = JRoute::_('index.php?option=com_users&view=login&Itemid='.$itemId);							$returnURL = JRoute::_(ContentHelperRoute::getArticleRoute($article->slug));							$fullURL = new JURI($link);							$fullURL->setVar('return', base64_encode($returnURL));							?>							<a href="<?php echo $fullURL; ?>" class="register">								<?php echo JText::_('COM_CONTENT_REGISTER_TO_READ_MORE'); ?>							</a>						<?php endif; ?>						<?php if ($article->state == 0) : ?>							<span class="list-published label label-warning">								<?php echo JText::_('JUNPUBLISHED'); ?>							</span>						<?php endif; ?>					</td>					<?php if ($this->params->get('list_show_date')) : ?>						<td headers="categorylist_header_date" class="list-date small">							<?php							echo JHtml::_(								'date', $article->displayDate,								$this->escape($this->params->get('date_format', JText::_('DATE_FORMAT_LC3')))							); ?>						</td>					<?php endif; ?>					<?php if ($this->params->get('list_show_author', 1)) : ?>						<td headers="categorylist_header_author" class="list-author">							<?php if (!empty($article->author) || !empty($article->created_by_alias)) : ?>								<?php $author = $article->author ?>								<?php $author = ($article->created_by_alias ? $article->created_by_alias : $author);?>								<?php if (!empty($article->contactid ) &&  $this->params->get('link_author') == true):?>									<?php echo JHtml::_(											'link',											JRoute::_('index.php?option=com_contact&view=contact&id='.$article->contactid),											$author									); ?>								<?php else :?>									<?php echo JText::sprintf('COM_CONTENT_WRITTEN_BY', $author); ?>								<?php endif; ?>							<?php endif; ?>						</td>					<?php endif; ?>					<?php if ($this->params->get('list_show_hits', 1)) : ?>						<td headers="categorylist_header_hits" class="list-hits">							<span class="badge badge-info">								<?php echo JText::sprintf('JGLOBAL_HITS_COUNT', $article->hits); ?>							</span>						</td>					<?php endif; ?>					<?php if ($isEditable) : ?>						<td headers="categorylist_header_edit" class="list-edit">							<?php if ($article->params->get('access-edit')) : ?>								<?php echo JHtml::_('icon.edit', $article, $params); ?>							<?php endif; ?>						</td>					<?php endif; ?>				</tr>			<?php endforeach; ?>		</tbody>	</table><?php endif; ?><?php // Code to add a link to submit an article. ?><?php if ($this->category->getParams()->get('access-create')) : ?>	<?php echo JHtml::_('icon.create', $this->category, $this->category->params); ?><?php  endif; ?><?php // Add pagination links ?><?php if (!empty($this->items)) : ?>	<?php if (($this->params->def('show_pagination', 2) == 1  || ($this->params->get('show_pagination') == 2)) && ($this->pagination->pagesTotal > 1)) : ?>	<div class="pagination">		<?php if ($this->params->def('show_pagination_results', 1)) : ?>			<p class="counter pull-right">				<?php echo $this->pagination->getPagesCounter(); ?>			</p>		<?php endif; ?>		<?php echo $this->pagination->getPagesLinks(); ?>	</div>	<?php endif; ?></form><?php  endif; ?>
<?php/** * @package     Joomla.Administrator * @subpackage  com_templates * * @copyright   Copyright (C) 2005 - 2013 Open Source Matters, Inc. All rights reserved. * @license     GNU General Public License version 2 or later; see LICENSE.txt */defined('_JEXEC') or die;/** * Templates manager master display controller. * * @package     Joomla.Administrator * @subpackage  com_templates * @since       1.6 */class TemplatesController extends JControllerLegacy{	/**	 * @var		string	The default view.	 * @since   1.6	 */	protected $default_view = 'styles';	/**	 * Method to display a view.	 *	 * @param   boolean			If true, the view output will be cached	 * @param   array  An array of safe url parameters and their variable types, for valid values see {@link JFilterInput::clean()}.	 *	 * @return  JController		This object to support chaining.	 * @since   1.5	 */	public function display($cachable = false, $urlparams = false)	{		$view   = $this->input->get('view', 'styles');		$layout = $this->input->get('layout', 'default');		$id     = $this->input->getInt('id');		// Check for edit form.		if ($view == 'style' && $layout == 'edit' && !$this->checkEditId('com_templates.edit.style', $id))		{			// Somehow the person just went to the form - we don't allow that.			$this->setError(JText::sprintf('JLIB_APPLICATION_ERROR_UNHELD_ID', $id));			$this->setMessage($this->getError(), 'error');			$this->setRedirect(JRoute::_('index.php?option=com_templates&view=styles', false));			return false;		}		parent::display();	}}
<?php/** * @package     Joomla.Administrator * @subpackage  Template.hathor * * @copyright   Copyright (C) 2005 - 2013 Open Source Matters, Inc. All rights reserved. * @license     GNU General Public License version 2 or later; see LICENSE.txt */defined('_JEXEC') or die;JHtml::addIncludePath(JPATH_COMPONENT.'/helpers/html');JHtml::_('behavior.tooltip');JHtml::_('behavior.multiselect');$app		= JFactory::getApplication();$user		= JFactory::getUser();$userId		= $user->get('id');$listOrder	= $this->escape($this->state->get('list.ordering'));$listDirn	= $this->escape($this->state->get('list.direction'));$canOrder	= $user->authorise('core.edit.state', 'com_contact.category');$saveOrder	= $listOrder == 'a.ordering';$assoc		= isset($app->item_associations) ? $app->item_associations : 0;?><form action="<?php echo JRoute::_('index.php?option=com_contact'); ?>" method="post" name="adminForm" id="adminForm"><?php if (!empty( $this->sidebar)) : ?>	<div id="j-sidebar-container" class="span2">		<?php echo $this->sidebar; ?>	</div>	<div id="j-main-container" class="span10"><?php else : ?>	<div id="j-main-container"><?php endif;?>	<fieldset id="filter-bar">	<legend class="element-invisible"><?php echo JText::_('JSEARCH_FILTER_LABEL'); ?></legend>		<div class="filter-search">			<label class="filter-search-lbl" for="filter_search"><?php echo JText::_('JSEARCH_FILTER_LABEL'); ?></label>			<input type="text" name="filter_search" id="filter_search" value="<?php echo $this->escape($this->state->get('filter.search')); ?>" title="<?php echo JText::_('COM_CONTACT_SEARCH_IN_NAME'); ?>" />			<button type="submit"><?php echo JText::_('JSEARCH_FILTER_SUBMIT'); ?></button>			<button type="button" onclick="document.id('filter_search').value='';this.form.submit();"><?php echo JText::_('JSEARCH_FILTER_CLEAR'); ?></button>		</div>		<div class="filter-select">			<label class="selectlabel" for="filter_published">				<?php echo JText::_('JOPTION_SELECT_PUBLISHED'); ?>			</label>			<select name="filter_published" class="inputbox" id="filter_published">				<option value=""><?php echo JText::_('JOPTION_SELECT_PUBLISHED');?></option>				<?php echo JHtml::_('select.options', JHtml::_('jgrid.publishedOptions'), 'value', 'text', $this->state->get('filter.published'), true);?>			</select>			<label class="selectlabel" for="filter_category_id">				<?php echo JText::_('JOPTION_SELECT_CATEGORY'); ?>			</label>			<select name="filter_category_id" class="inputbox" id="filter_category_id">				<option value=""><?php echo JText::_('JOPTION_SELECT_CATEGORY');?></option>				<?php echo JHtml::_('select.options', JHtml::_('category.options', 'com_contact'), 'value', 'text', $this->state->get('filter.category_id'));?>			</select>			<label class="selectlabel" for="filter_access">				<?php echo JText::_('JOPTION_SELECT_ACCESS'); ?>			</label>			<select name="filter_access" class="inputbox" id="filter_access">				<option value=""><?php echo JText::_('JOPTION_SELECT_ACCESS');?></option>				<?php echo JHtml::_('select.options', JHtml::_('access.assetgroups'), 'value', 'text', $this->state->get('filter.access'));?>			</select>			<label class="selectlabel" for="filter_language">				<?php echo JText::_('JOPTION_SELECT_LANGUAGE'); ?>			</label>			<select name="filter_language" class="inputbox" id="filter_language">				<option value=""><?php echo JText::_('JOPTION_SELECT_LANGUAGE');?></option>				<?php echo JHtml::_('select.options', JHtml::_('contentlanguage.existing', true, true), 'value', 'text', $this->state->get('filter.language'));?>			</select>			<button type="submit" id="filter-go">				<?php echo JText::_('JSUBMIT'); ?></button>		</div>	</fieldset>	<div class="clr"> </div>	<table class="adminlist">		<thead>			<tr>				<th class="checkmark-col">					<input type="checkbox" name="checkall-toggle" value="" title="<?php echo JText::_('JGLOBAL_CHECK_ALL'); ?>" onclick="Joomla.checkAll(this)" />				</th>				<th class="title">					<?php echo JHtml::_('grid.sort', 'JGLOBAL_TITLE', 'a.name', $listDirn, $listOrder); ?>				</th>				<th>					<?php echo JHtml::_('grid.sort', 'COM_CONTACT_FIELD_LINKED_USER_LABEL', 'ul.name', $listDirn, $listOrder); ?>				</th>				<th class="nowrap state-col">					<?php echo JHtml::_('grid.sort', 'JSTATUS', 'a.state', $listDirn, $listOrder); ?>				</th>				<th class="nowrap featured-col">					<?php echo JHtml::_('grid.sort', 'JFEATURED', 'a.featured', $listDirn, $listOrder, null, 'desc'); ?>				</th>				<th class="title category-col">					<?php echo JHtml::_('grid.sort', 'JCATEGORY', 'category_title', $listDirn, $listOrder); ?>				</th>				<th class="nowrap ordering-col">					<?php echo JHtml::_('grid.sort', 'JGRID_HEADING_ORDERING', 'a.ordering', $listDirn, $listOrder); ?>					<?php if ($canOrder && $saveOrder) :?>						<?php echo JHtml::_('grid.order', $this->items, 'filesave.png', 'contacts.saveorder'); ?>					<?php endif; ?>				</th>				<th class="title access-col">					<?php echo JHtml::_('grid.sort', 'JGRID_HEADING_ACCESS', 'access_level', $listDirn, $listOrder); ?>				</th>				<?php if ($assoc) : ?>					<th width="5%">						<?php echo JHtml::_('grid.sort', 'COM_CONTACT_HEADING_ASSOCIATION', 'association', $listDirn, $listOrder); ?>					</th>				<?php endif;?>				<th class="language-col">					<?php echo JHtml::_('grid.sort', 'JGRID_HEADING_LANGUAGE', 'a.language', $listDirn, $listOrder); ?>				</th>				<th class="nowrap id-col">					<?php echo JHtml::_('grid.sort', 'JGRID_HEADING_ID', 'a.id', $listDirn, $listOrder); ?>				</th>			</tr>		</thead>		<tbody>		<?php		$n = count($this->items);		foreach ($this->items as $i => $item) :			$ordering   = $listOrder == 'a.ordering';			$canCreate  = $user->authorise('core.create',     'com_contact.category.' . $item->catid);			$canEdit    = $user->authorise('core.edit',       'com_contact.category.' . $item->catid);			$canCheckin = $user->authorise('core.manage',     'com_checkin') || $item->checked_out == $userId || $item->checked_out == 0;			$canEditOwn = $user->authorise('core.edit.own',   'com_contact.category.' . $item->catid) && $item->created_by == $userId;			$canChange  = $user->authorise('core.edit.state', 'com_contact.category.' . $item->catid) && $canCheckin;			$item->cat_link = JRoute::_('index.php?option=com_categories&extension=com_contact&task=edit&type=other&id='.$item->catid);			?>			<tr class="row<?php echo $i % 2; ?>">				<td class="center">					<?php echo JHtml::_('grid.id', $i, $item->id); ?>				</td>				<td>					<?php if ($item->checked_out) : ?>						<?php echo JHtml::_('jgrid.checkedout', $i, $item->editor, $item->checked_out_time, 'contacts.', $canCheckin); ?>					<?php endif; ?>					<?php if ($canEdit || $canEditOwn) : ?>						<a href="<?php echo JRoute::_('index.php?option=com_contact&task=contact.edit&id='.(int) $item->id); ?>">						<?php echo $this->escape($item->name); ?></a>					<?php else : ?>						<?php echo $this->escape($item->name); ?>					<?php endif; ?>					<p class="smallsub">						<?php echo JText::sprintf('JGLOBAL_LIST_ALIAS', $this->escape($item->alias));?></p>				</td>				<td align="center">					<?php if (!empty($item->linked_user)) : ?>						<a href="<?php echo JRoute::_('index.php?option=com_users&task=user.edit&id='.$item->user_id);?>"><?php echo $item->linked_user;?></a>					<?php endif; ?>				</td>				<td class="center">					<?php echo JHtml::_('jgrid.published', $item->published, $i, 'contacts.', $canChange, 'cb', $item->publish_up, $item->publish_down); ?>				</td>				<td class="center">					<?php echo JHtml::_('contact.featured', $item->featured, $i, $canChange); ?>				</td>				<td class="center">					<?php echo $item->category_title; ?>				</td>				<td class="order">					<?php if ($canChange) : ?>						<?php if ($saveOrder) :?>							<?php if ($listDirn == 'asc') : ?>								<span><?php echo $this->pagination->orderUpIcon($i, ($item->catid == @$this->items[$i - 1]->catid), 'contacts.orderup', 'JLIB_HTML_MOVE_UP', $ordering); ?></span>								<span><?php echo $this->pagination->orderDownIcon($i, $n, ($item->catid == @$this->items[$i + 1]->catid), 'contacts.orderdown', 'JLIB_HTML_MOVE_DOWN', $ordering); ?></span>							<?php elseif ($listDirn == 'desc') : ?>								<span><?php echo $this->pagination->orderUpIcon($i, ($item->catid == @$this->items[$i - 1]->catid), 'contacts.orderdown', 'JLIB_HTML_MOVE_UP', $ordering); ?></span>								<span><?php echo $this->pagination->orderDownIcon($i, $n, ($item->catid == @$this->items[$i + 1]->catid), 'contacts.orderup', 'JLIB_HTML_MOVE_DOWN', $ordering); ?></span>							<?php endif; ?>						<?php endif; ?>						<?php $disabled = $saveOrder ?  '' : 'disabled="disabled"'; ?>						<input type="text" name="order[]" value="<?php echo $item->ordering;?>" <?php echo $disabled ?> class="text-area-order" title="<?php echo $item->name; ?> order" />					<?php else : ?>						<?php echo $item->ordering; ?>					<?php endif; ?>				</td>				<td class="center">					<?php echo $item->access_level; ?>				</td>				<?php if ($assoc) : ?>					<td class="center">						<?php if ($item->association) : ?>							<?php echo JHtml::_('contact.association', $item->id); ?>						<?php endif; ?>					</td>				<?php endif;?>				<td class="center">					<?php if ($item->language == '*'):?>						<?php echo JText::alt('JALL', 'language'); ?>					<?php else:?>						<?php echo $item->language_title ? $this->escape($item->language_title) : JText::_('JUNDEFINED'); ?>					<?php endif;?>				</td>				<td class="center">					<?php echo $item->id; ?>				</td>			</tr>			<?php endforeach; ?>		</tbody>	</table>	<?php //Load the batch processing form. ?>	<?php echo $this->loadTemplate('batch'); ?>	<?php echo $this->pagination->getListFooter(); ?>	<input type="hidden" name="task" value="" />	<input type="hidden" name="boxchecked" value="0" />	<input type="hidden" name="filter_order" value="<?php echo $listOrder; ?>" />	<input type="hidden" name="filter_order_Dir" value="<?php echo $listDirn; ?>" />	<?php echo JHtml::_('form.token'); ?>	</div></form>
<?php/** * @package     Joomla.Plugin * @subpackage  Finder.Newsfeeds * * @copyright   Copyright (C) 2005 - 2013 Open Source Matters, Inc. All rights reserved. * @license     GNU General Public License version 2 or later; see LICENSE */defined('JPATH_BASE') or die;require_once JPATH_ADMINISTRATOR . '/components/com_finder/helpers/indexer/adapter.php';/** * Finder adapter for Joomla Newsfeeds. * * @package     Joomla.Plugin * @subpackage  Finder.Newsfeeds * @since       2.5 */class PlgFinderNewsfeeds extends FinderIndexerAdapter{	/**	 * The plugin identifier.	 *	 * @var    string	 * @since  2.5	 */	protected $context = 'Newsfeeds';	/**	 * The extension name.	 *	 * @var    string	 * @since  2.5	 */	protected $extension = 'com_newsfeeds';	/**	 * The sublayout to use when rendering the results.	 *	 * @var    string	 * @since  2.5	 */	protected $layout = 'newsfeed';	/**	 * The type of content that the adapter indexes.	 *	 * @var    string	 * @since  2.5	 */	protected $type_title = 'News Feed';	/**	 * The table name.	 *	 * @var    string	 * @since  2.5	 */	protected $table = '#__newsfeeds';	/**	 * The field the published state is stored in.	 *	 * @var    string	 * @since  2.5	 */	protected $state_field = 'published';	/**	 * Load the language file on instantiation.	 *	 * @var    boolean	 * @since  3.1	 */	protected $autoloadLanguage = true;	/**	 * Method to update the item link information when the item category is	 * changed. This is fired when the item category is published or unpublished	 * from the list view.	 *	 * @param   string   $extension  The extension whose category has been updated.	 * @param   array    $pks        A list of primary key ids of the content that has changed state.	 * @param   integer  $value      The value of the state that the content has been changed to.	 *	 * @return  void	 *	 * @since   2.5	 */	public function onFinderCategoryChangeState($extension, $pks, $value)	{		// Make sure we're handling com_newsfeeds categories		if ($extension == 'com_newsfeeds')		{			$this->categoryStateChange($pks, $value);		}	}	/**	 * Method to remove the link information for items that have been deleted.	 *	 * @param   string  $context  The context of the action being performed.	 * @param   JTable  $table    A JTable object containing the record to be deleted	 *	 * @return  boolean  True on success.	 *	 * @since   2.5	 * @throws  Exception on database error.	 */	public function onFinderAfterDelete($context, $table)	{		if ($context == 'com_newsfeeds.newsfeed')		{			$id = $table->id;		}		elseif ($context == 'com_finder.index')		{			$id = $table->link_id;		}		else		{			return true;		}		// Remove the items.		return $this->remove($id);	}	/**	 * Method to determine if the access level of an item changed.	 *	 * @param   string   $context  The context of the content passed to the plugin.	 * @param   JTable   $row      A JTable object	 * @param   boolean  $isNew    If the content has just been created	 *	 * @return  boolean  True on success.	 *	 * @since   2.5	 * @throws  Exception on database error.	 */	public function onFinderAfterSave($context, $row, $isNew)	{		// We only want to handle news feeds here		if ($context == 'com_newsfeeds.newsfeed')		{			// Check if the access levels are different			if (!$isNew && $this->old_access != $row->access)			{				// Process the change.				$this->itemAccessChange($row);			}			// Reindex the item			$this->reindex($row->id);		}		// Check for access changes in the category		if ($context == 'com_categories.category')		{			// Check if the access levels are different			if (!$isNew && $this->old_cataccess != $row->access)			{				$this->categoryAccessChange($row);			}		}		return true;	}	/**	 * Method to reindex the link information for an item that has been saved.	 * This event is fired before the data is actually saved so we are going	 * to queue the item to be indexed later.	 *	 * @param   string   $context  The context of the content passed to the plugin.	 * @param   JTable   $row     A JTable object	 * @param   boolean  $isNew    If the content is just about to be created	 *	 * @return  boolean  True on success.	 *	 * @since   2.5	 * @throws  Exception on database error.	 */	public function onFinderBeforeSave($context, $row, $isNew)	{		// We only want to handle news feeds here		if ($context == 'com_newsfeeds.newsfeed')		{			// Query the database for the old access level if the item isn't new			if (!$isNew)			{				$this->checkItemAccess($row);			}		}		// Check for access levels from the category		if ($context == 'com_categories.category')		{			// Query the database for the old access level if the item isn't new			if (!$isNew)			{				$this->checkCategoryAccess($row);			}		}		return true;	}	/**	 * Method to update the link information for items that have been changed	 * from outside the edit screen. This is fired when the item is published,	 * unpublished, archived, or unarchived from the list view.	 *	 * @param   string   $context  The context for the content passed to the plugin.	 * @param   array    $pks      A list of primary key ids of the content that has changed state.	 * @param   integer  $value    The value of the state that the content has been changed to.	 *	 * @return  void	 *	 * @since   2.5	 */	public function onFinderChangeState($context, $pks, $value)	{		// We only want to handle news feeds here		if ($context == 'com_newsfeeds.newsfeed')		{			$this->itemStateChange($pks, $value);		}		// Handle when the plugin is disabled		if ($context == 'com_plugins.plugin' && $value === 0)		{			$this->pluginDisable($pks);		}	}	/**	 * Method to index an item. The item must be a FinderIndexerResult object.	 *	 * @param   FinderIndexerResult  $item    The item to index as an FinderIndexerResult object.	 * @param   string               $format  The item format	 *	 * @return  void	 *	 * @since   2.5	 * @throws  Exception on database error.	 */	protected function index(FinderIndexerResult $item, $format = 'html')	{		// Check if the extension is enabled		if (JComponentHelper::isEnabled($this->extension) == false)		{			return;		}		$item->setLanguage();		// Initialize the item parameters.		$registry = new JRegistry;		$registry->loadString($item->params);		$item->params = $registry;		$registry = new JRegistry;		$registry->loadString($item->metadata);		$item->metadata = $registry;		// Build the necessary route and path information.		$item->url = $this->getURL($item->id, $this->extension, $this->layout);		$item->route = NewsfeedsHelperRoute::getNewsfeedRoute($item->slug, $item->catslug);		$item->path = FinderIndexerHelper::getContentPath($item->route);		/*		 * Add the meta-data processing instructions based on the newsfeeds		 * configuration parameters.		 */		// Add the meta-author.		$item->metaauthor = $item->metadata->get('author');		// Handle the link to the meta-data.		$item->addInstruction(FinderIndexer::META_CONTEXT, 'link');		$item->addInstruction(FinderIndexer::META_CONTEXT, 'metakey');		$item->addInstruction(FinderIndexer::META_CONTEXT, 'metadesc');		$item->addInstruction(FinderIndexer::META_CONTEXT, 'metaauthor');		$item->addInstruction(FinderIndexer::META_CONTEXT, 'author');		$item->addInstruction(FinderIndexer::META_CONTEXT, 'created_by_alias');		// Add the type taxonomy data.		$item->addTaxonomy('Type', 'News Feed');		// Add the category taxonomy data.		$item->addTaxonomy('Category', $item->category, $item->cat_state, $item->cat_access);		// Add the language taxonomy data.		$item->addTaxonomy('Language', $item->language);		// Get content extras.		FinderIndexerHelper::getContentExtras($item);		// Index the item.		$this->indexer->index($item);	}	/**	 * Method to setup the indexer to be run.	 *	 * @return  boolean  True on success.	 *	 * @since   2.5	 */	protected function setup()	{		// Load dependent classes.		require_once JPATH_SITE . '/components/com_newsfeeds/helpers/route.php';		return true;	}	/**	 * Method to get the SQL query used to retrieve the list of content items.	 *	 * @param   mixed  $query  A JDatabaseQuery object or null.	 *	 * @return  JDatabaseQuery  A database object.	 *	 * @since   2.5	 */	protected function getListQuery($query = null)	{		$db = JFactory::getDbo();		// Check if we can use the supplied SQL query.		$query = $query instanceof JDatabaseQuery ? $query : $db->getQuery(true)			->select('a.id, a.catid, a.name AS title, a.alias, a.link AS link')			->select('a.published AS state, a.ordering, a.created AS start_date, a.params, a.access')			->select('a.publish_up AS publish_start_date, a.publish_down AS publish_end_date')			->select('a.metakey, a.metadesc, a.metadata, a.language')			->select('a.created_by, a.created_by_alias, a.modified, a.modified_by')			->select('c.title AS category, c.published AS cat_state, c.access AS cat_access');		// Handle the alias CASE WHEN portion of the query		$case_when_item_alias = ' CASE WHEN ';		$case_when_item_alias .= $query->charLength('a.alias', '!=', '0');		$case_when_item_alias .= ' THEN ';		$a_id = $query->castAsChar('a.id');		$case_when_item_alias .= $query->concatenate(array($a_id, 'a.alias'), ':');		$case_when_item_alias .= ' ELSE ';		$case_when_item_alias .= $a_id.' END as slug';		$query->select($case_when_item_alias);		$case_when_category_alias = ' CASE WHEN ';		$case_when_category_alias .= $query->charLength('c.alias', '!=', '0');		$case_when_category_alias .= ' THEN ';		$c_id = $query->castAsChar('c.id');		$case_when_category_alias .= $query->concatenate(array($c_id, 'c.alias'), ':');		$case_when_category_alias .= ' ELSE ';		$case_when_category_alias .= $c_id.' END as catslug';		$query->select($case_when_category_alias)			->from('#__newsfeeds AS a')			->join('LEFT', '#__categories AS c ON c.id = a.catid');		return $query;	}}
